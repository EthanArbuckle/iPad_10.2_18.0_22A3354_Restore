unint64_t ZSTD_compressBlock_lazy_extDict_row(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v40;
  char *v41;
  int v42;
  int v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  char *v54;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  int v63;
  BOOL v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  char *v74;
  unsigned __int8 *v75;
  unint64_t v76;
  _OWORD *v77;
  _OWORD *v78;
  __int128 v79;
  char v80;
  uint64_t v81;
  _OWORD *v82;
  unint64_t v83;
  __int128 *v84;
  __int128 v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int *v101;
  int v102;
  int v103;
  int v104;
  unsigned __int8 *v105;
  uint64_t v106;
  unint64_t v107;
  int v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  unsigned __int8 *v112;
  int v113;
  uint64_t (*v114)(uint64_t, char *, unint64_t, _QWORD *);
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD v119[2];

  v5 = a4;
  v7 = a1;
  v8 = (unint64_t)&a4[a5];
  v9 = (unint64_t)&a4[a5 - 16];
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 28);
  v117 = *(_QWORD *)(a1 + 16);
  v118 = *(unsigned int *)(a1 + 24);
  v12 = *(_DWORD *)(a1 + 240);
  v13 = *(_DWORD *)(a1 + 252);
  v14 = *(_DWORD *)(a1 + 256);
  if (v13 < 5)
    v15 = 4;
  else
    v15 = 5;
  v16 = 2 * (v14 > 3);
  if (v14 - 7 >= 0xFFFFFFFD)
    v16 = v14 - 4;
  v17 = 2 * (v13 > 3);
  if (v13 - 7 >= 0xFFFFFFFD)
    v17 = v13 - 4;
  v114 = *(uint64_t (**)(uint64_t, char *, unint64_t, _QWORD *))*(&off_1E6E2C4B8[3 * v16 + 9] + v17);
  v18 = *a3;
  LODWORD(v19) = a3[1];
  v112 = (unsigned __int8 *)(v10 + v118);
  if ((char *)(v10 + v118) == a4)
    v20 = a4 + 1;
  else
    v20 = a4;
  if (v14 >= 6)
    v14 = 6;
  v21 = *(unsigned int *)(a1 + 44);
  v22 = v9 - (v10 + v21);
  if ((v22 + 1) < 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  if (v9 >= v10 + v21)
    v24 = v23;
  else
    v24 = 0;
  v25 = (v24 + v21);
  if (v21 < v25)
  {
    v26 = *(_QWORD *)(a1 + 96);
    v27 = *(_DWORD *)(a1 + 52);
    v28 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v14 == 5)
      {
        v29 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v10 + v21);
      }
      else
      {
        if (v14 != 6)
        {
          LODWORD(v30) = (-1640531535 * *(_DWORD *)(v10 + v21)) >> (24 - v27);
          goto LABEL_27;
        }
        v29 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v10 + v21);
      }
      v30 = v29 >> (56 - v27);
LABEL_27:
      v31 = v30 >> 8 << v15;
      _X7 = v26 + 4 * v31;
      __asm { PRFM            #0, [X7] }
      if (v13 >= 5)
        __asm { PRFM            #0, [X7,#0x40] }
      _X6 = v28 + 2 * v31;
      __asm { PRFM            #0, [X6] }
      *(_DWORD *)(a1 + 4 * (v21++ & 7) + 64) = v30;
    }
    while (v25 != v21);
  }
  if ((unint64_t)v20 < v9)
  {
    v101 = a3;
    v105 = (unsigned __int8 *)(v117 + v11);
    v113 = v118 - 1;
    v110 = (char *)(v8 - 32);
    v107 = (unint64_t)&a4[a5 - 16];
    v116 = 1 << v12;
    v104 = 1 - v10 - (1 << v12);
    v103 = 1 - v10;
    v102 = v118 + v10 - 2;
    v111 = (unint64_t)&a4[a5];
    v106 = a2;
    v109 = v10;
    while (1)
    {
      v40 = 0;
      v41 = v20 + 1;
      v42 = (_DWORD)v20 - v10 + 1;
      v43 = v42 - v116;
      if (v42 - *(_DWORD *)(v7 + 28) <= v116 || *(_DWORD *)(v7 + 40) != 0)
        v43 = *(_DWORD *)(v7 + 28);
      v45 = (v42 - v18);
      v46 = v117;
      if (v45 >= v118)
        v46 = v10;
      if ((v113 - v45) >= 3 && v18 <= v42 - v43)
      {
        if (*(_DWORD *)v41 == *(_DWORD *)(v46 + v45))
        {
          if (v45 >= v118)
            v47 = (char *)v8;
          else
            v47 = (char *)(v117 + v118);
          v40 = ZSTD_count_2segments(v20 + 5, (char *)(v46 + v45 + 4), v8, v47, v112) + 4;
        }
        else
        {
          v40 = 0;
        }
      }
      v119[0] = 999999999;
      v48 = v114(v7, v20, v8, v119);
      v49 = v48 <= v40 ? v40 : v48;
      if (v49 >= 4)
        break;
      v20 += ((v20 - v5) >> 8) + 1;
      v50 = v107;
      v10 = v109;
LABEL_146:
      if ((unint64_t)v20 >= v50)
      {
        a3 = v101;
        goto LABEL_148;
      }
    }
    if (v48 <= v40)
    {
      v51 = 0;
    }
    else
    {
      v41 = v20;
      v51 = v119[0];
    }
    if ((unint64_t)v20 >= v107)
    {
      v67 = v49;
      v69 = v51;
    }
    else
    {
      v52 = 0;
      v53 = v102 + v18 - (_DWORD)v20;
      v108 = v103 + (_DWORD)v20;
      while (1)
      {
        v54 = &v20[v52 + 1];
        if (!v51)
          goto LABEL_83;
        if (v108 + (int)v52 - *(_DWORD *)(a1 + 28) > v116 && *(_DWORD *)(a1 + 40) == 0)
          v56 = v104 + (_DWORD)v20 + v52;
        else
          v56 = *(_DWORD *)(a1 + 28);
        v57 = (v103 + (_DWORD)v20 - v18 + v52);
        v58 = v109;
        if (v57 < v118)
          v58 = v117;
        if (v53 >= 3 && v18 <= v108 + (int)v52 - v56 && *(_DWORD *)v54 == *(_DWORD *)(v58 + v57))
        {
          if (v57 >= v118)
            v59 = (char *)v111;
          else
            v59 = (char *)(v117 + v118);
          v60 = ZSTD_count_2segments(&v20[v52 + 5], (char *)(v58 + v57 + 4), v111, v59, v112);
          v61 = v60 + 4;
          v62 = 3 * v49 + (__clz(v51 + 1) ^ 0xFFFFFFE0) + 2;
          v63 = 3 * (v60 + 4);
          v64 = v63 <= v62;
          if (v63 > v62)
          {
            v65 = 0;
          }
          else
          {
            v61 = v49;
            v65 = v51;
          }
          if (v64)
            v66 = (uint64_t)v41;
          else
            v66 = (uint64_t)&v20[v52 + 1];
          if (v60 <= 0xFFFFFFFFFFFFFFFBLL)
            v67 = v61;
          else
            v67 = v49;
          if (v60 <= 0xFFFFFFFFFFFFFFFBLL)
          {
            v51 = v65;
            v41 = (char *)v66;
          }
        }
        else
        {
LABEL_83:
          v67 = v49;
        }
        v119[0] = 999999999;
        v68 = v114(a1, &v20[v52 + 1], v111, v119);
        v69 = v51;
        if (v68 < 4)
          break;
        v49 = v68;
        v51 = v119[0];
        if ((int)((__clz(LODWORD(v119[0]) + 1) ^ 0xFFFFFFE0) + 4 * v68 + 1) <= (int)((__clz(v69 + 1) ^ 0xFFFFFFE0)
                                                                                    + 4 * v67
                                                                                    + 5))
          break;
        ++v52;
        --v53;
        v41 = v54;
        if (v107 - (_QWORD)v20 == v52)
        {
          v67 = v68;
          v69 = v119[0];
          v41 = (char *)v107;
          break;
        }
      }
      v8 = v111;
      a2 = v106;
    }
    v10 = v109;
    v19 = v19;
    if (v69 <= 2)
    {
      v7 = a1;
    }
    else
    {
      v70 = (_DWORD)v41 - (v69 + v109) + 2;
      if (v118 <= v70)
        v71 = v109;
      else
        v71 = v117;
      v72 = v112;
      if (v118 > v70)
        v72 = v105;
      if (v41 <= v5 || v71 + (unint64_t)v70 <= (unint64_t)v72)
      {
        v7 = a1;
      }
      else
      {
        v73 = (unsigned __int8 *)(v71 + ((_DWORD)v41 - (v69 + v109) + 2) - 1);
        v74 = v41 - 1;
        v7 = a1;
        while (*v74 == *v73)
        {
          ++v67;
          v75 = (unsigned __int8 *)(v74 - 1);
          if (v74 > v5)
          {
            --v74;
            v64 = v73-- > v72;
            if (v64)
              continue;
          }
          v41 = (char *)(v75 + 1);
          goto LABEL_106;
        }
        v41 = v74 + 1;
      }
LABEL_106:
      v19 = v18;
      v18 = (v69 - 2);
    }
    v76 = v41 - v5;
    v77 = *(_OWORD **)(a2 + 24);
    if (v41 <= v110)
    {
      *v77 = *(_OWORD *)v5;
      v81 = *(_QWORD *)(a2 + 24);
      if (v76 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v81 + v76;
        v86 = *(_QWORD *)(a2 + 8);
LABEL_121:
        *(_WORD *)(v86 + 4) = v76;
        *(_DWORD *)v86 = v69 + 1;
        if (v67 - 3 >= 0x10000)
        {
          v88 = (unint64_t)(v86 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v88;
        }
        *(_WORD *)(v86 + 6) = v67 - 3;
        v89 = v86 + 8;
        *(_QWORD *)(a2 + 8) = v86 + 8;
        v5 = &v41[v67];
        v50 = v107;
        if ((unint64_t)v5 <= v107)
        {
          v90 = v18;
          v91 = v19;
          while (1)
          {
            v18 = v91;
            v91 = v90;
            v92 = (_DWORD)v5 - v109;
            v93 = (_DWORD)v5 - v109 - v116;
            if ((int)v5 - (int)v109 - *(_DWORD *)(v7 + 28) <= v116 || *(_DWORD *)(v7 + 40) != 0)
              v93 = *(_DWORD *)(v7 + 28);
            v95 = (v92 - v18);
            v96 = v117;
            if (v95 >= v118)
              v96 = v109;
            if ((v113 - v95) < 3
              || v18 > v92 - v93
              || *(_DWORD *)v5 != *(_DWORD *)(v96 + v95))
            {
              break;
            }
            if (v95 >= v118)
              v97 = (char *)v8;
            else
              v97 = (char *)(v117 + v118);
            v98 = ZSTD_count_2segments(v5 + 4, (char *)(v96 + v95 + 4), v8, v97, v112);
            if (v5 <= v110)
            {
              *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
              v89 = *(_QWORD *)(a2 + 8);
            }
            *(_WORD *)(v89 + 4) = 0;
            *(_DWORD *)v89 = 1;
            if (v98 + 1 >= 0x10000)
            {
              v99 = (unint64_t)(v89 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v99;
            }
            *(_WORD *)(v89 + 6) = v98 + 1;
            v89 += 8;
            v5 += v98 + 4;
            *(_QWORD *)(a2 + 8) = v89;
            v90 = v18;
            LODWORD(v19) = v91;
            v20 = v5;
            if ((unint64_t)v5 > v107)
              goto LABEL_146;
          }
          LODWORD(v19) = v18;
          v18 = v90;
        }
        v20 = v5;
        goto LABEL_146;
      }
      v82 = (_OWORD *)(v81 + 16);
      v83 = v81 + v76;
      v84 = (__int128 *)(v5 + 16);
      do
      {
        v85 = *v84++;
        *v82++ = v85;
      }
      while ((unint64_t)v82 < v83);
    }
    else
    {
      if (v5 <= v110)
      {
        v78 = (_OWORD *)((char *)v77 + v110 - v5);
        do
        {
          v79 = *(_OWORD *)v5;
          v5 += 16;
          *v77++ = v79;
        }
        while (v77 < v78);
        v5 = v110;
        v77 = v78;
      }
      while (v5 < v41)
      {
        v80 = *v5++;
        *(_BYTE *)v77 = v80;
        v77 = (_OWORD *)((char *)v77 + 1);
      }
    }
    *(_QWORD *)(a2 + 24) += v76;
    v86 = *(_QWORD *)(a2 + 8);
    if (v76 >= 0x10000)
    {
      v87 = (unint64_t)(v86 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v87;
    }
    goto LABEL_121;
  }
LABEL_148:
  *a3 = v18;
  a3[1] = v19;
  return v8 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy2_extDict_row(uint64_t a1, uint64_t a2, unsigned int *a3, _BYTE *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v40;
  char *v41;
  int v42;
  int v43;
  int v44;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  int v55;
  int v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  int v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unint64_t v79;
  _OWORD *v80;
  _OWORD *v81;
  __int128 v82;
  char v83;
  uint64_t v84;
  _OWORD *v85;
  unint64_t v86;
  __int128 *v87;
  __int128 v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  unsigned __int8 *v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  char *v109;
  unsigned __int8 *v110;
  unsigned int v111;
  uint64_t (*v112)(uint64_t, char *, unint64_t, uint64_t *);
  int v113;
  unsigned int v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;

  v5 = a4;
  v117 = (unint64_t)&a4[a5];
  v8 = (unint64_t)&a4[a5 - 16];
  v9 = *(_QWORD *)(a1 + 8);
  v115 = *(_QWORD *)(a1 + 16);
  v11 = *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(a1 + 28);
  v12 = *(_DWORD *)(a1 + 240);
  v13 = *(_DWORD *)(a1 + 252);
  v14 = *(_DWORD *)(a1 + 256);
  if (v13 < 5)
    v15 = 4;
  else
    v15 = 5;
  v16 = 2 * (v14 > 3);
  if (v14 - 7 >= 0xFFFFFFFD)
    v16 = v14 - 4;
  v17 = 2 * (v13 > 3);
  if (v13 - 7 >= 0xFFFFFFFD)
    v17 = v13 - 4;
  v112 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *))*(&off_1E6E2C4B8[3 * v16 + 9] + v17);
  v19 = *a3;
  LODWORD(v18) = a3[1];
  v110 = (unsigned __int8 *)(v9 + v11);
  if ((_BYTE *)(v9 + v11) == a4)
    v20 = a4 + 1;
  else
    v20 = a4;
  if (v14 >= 6)
    v14 = 6;
  v21 = *(unsigned int *)(a1 + 44);
  v22 = v8 - (v9 + v21);
  if ((v22 + 1) < 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  v116 = (unint64_t)&a4[a5 - 16];
  if (v8 >= v9 + v21)
    v24 = v23;
  else
    v24 = 0;
  v25 = (v24 + v21);
  if (v21 < v25)
  {
    v26 = *(_QWORD *)(a1 + 96);
    v27 = *(_DWORD *)(a1 + 52);
    v28 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v14 == 5)
      {
        v29 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v21);
      }
      else
      {
        if (v14 != 6)
        {
          LODWORD(v30) = (-1640531535 * *(_DWORD *)(v9 + v21)) >> (24 - v27);
          goto LABEL_27;
        }
        v29 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v21);
      }
      v30 = v29 >> (56 - v27);
LABEL_27:
      v31 = v30 >> 8 << v15;
      _X6 = v26 + 4 * v31;
      __asm { PRFM            #0, [X6] }
      if (v13 >= 5)
        __asm { PRFM            #0, [X6,#0x40] }
      _X5 = v28 + 2 * v31;
      __asm { PRFM            #0, [X5] }
      *(_DWORD *)(a1 + 4 * (v21++ & 7) + 64) = v30;
    }
    while (v25 != v21);
  }
  if ((unint64_t)v20 < v116)
  {
    v109 = (char *)(v115 + v11);
    v105 = (unsigned __int8 *)(v115 + v10);
    v113 = v11 - 1;
    v114 = 1 << v12;
    v108 = v9;
    v106 = a2;
    v111 = v11;
    while (1)
    {
      v40 = 0;
      v41 = v20 + 1;
      v42 = (_DWORD)v20 - v9;
      v43 = (_DWORD)v20 - v9 + 1;
      v44 = v43 - v114;
      if (v43 - *(_DWORD *)(a1 + 28) <= v114 || *(_DWORD *)(a1 + 40) != 0)
        v44 = *(_DWORD *)(a1 + 28);
      v46 = (v43 - v19);
      v47 = v115;
      if (v46 >= v11)
        v47 = v9;
      v107 = v18;
      if ((v113 - v46) >= 3 && v19 <= v43 - v44)
      {
        if (*(_DWORD *)v41 == *(_DWORD *)(v47 + v46))
        {
          if (v46 >= v11)
            v48 = (char *)v117;
          else
            v48 = v109;
          v40 = ZSTD_count_2segments(v20 + 5, (char *)(v47 + v46 + 4), v117, v48, v110) + 4;
        }
        else
        {
          v40 = 0;
        }
      }
      v118 = 999999999;
      v49 = v112(a1, v20, v117, &v118);
      v50 = v49 <= v40 ? v40 : v49;
      if (v50 >= 4)
        break;
      v20 += ((v20 - (char *)v5) >> 8) + 1;
      LODWORD(v11) = v111;
      LODWORD(v18) = v107;
LABEL_154:
      if ((unint64_t)v20 >= v116)
        goto LABEL_155;
    }
    if (v49 <= v40)
    {
      v51 = 0;
    }
    else
    {
      v41 = v20;
      v51 = v118;
    }
    v52 = v50;
    v53 = v51;
    v54 = v41;
    if ((unint64_t)v20 < v116)
    {
      do
      {
        v54 = v20 + 1;
        v55 = v42 + 1;
        if (v51)
        {
          v56 = v55 - v114;
          if (v55 - *(_DWORD *)(a1 + 28) <= v114 || *(_DWORD *)(a1 + 40) != 0)
            v56 = *(_DWORD *)(a1 + 28);
          v58 = (v55 - v19);
          v59 = v108;
          if (v58 < v111)
            v59 = v115;
          if ((v113 - v58) >= 3 && v19 <= v55 - v56)
          {
            v60 = v59 + v58;
            if (*(_DWORD *)v54 == *(_DWORD *)v60)
            {
              v61 = v58 >= v111 ? (char *)v117 : v109;
              v62 = ZSTD_count_2segments(v20 + 5, (char *)(v60 + 4), v117, v61, v110);
              if (v62 <= 0xFFFFFFFFFFFFFFFBLL
                && 3 * ((int)v62 + 4) > (int)(3 * v50 + (__clz(v51 + 1) ^ 0xFFFFFFE0) + 2))
              {
                v50 = v62 + 4;
                v51 = 0;
                v41 = v20 + 1;
              }
            }
          }
        }
        v118 = 999999999;
        v52 = v112(a1, v20 + 1, v117, &v118);
        if (v52 < 4
          || (v53 = v118,
              (int)((__clz(v118 + 1) ^ 0xFFFFFFE0) + 4 * v52 + 1) <= (int)((__clz(v51 + 1) ^ 0xFFFFFFE0) + 4 * v50 + 5)))
        {
          if ((unint64_t)v54 >= v116)
            goto LABEL_98;
          v54 = v20 + 2;
          v42 += 2;
          if (v51)
          {
            v63 = v42 - v114;
            if (v42 - *(_DWORD *)(a1 + 28) <= v114 || *(_DWORD *)(a1 + 40) != 0)
              v63 = *(_DWORD *)(a1 + 28);
            v65 = (v42 - v19);
            v66 = v108;
            if (v65 < v111)
              v66 = v115;
            if ((v113 - v65) >= 3 && v19 <= v42 - v63)
            {
              v67 = v66 + v65;
              if (*(_DWORD *)v54 == *(_DWORD *)v67)
              {
                v68 = v65 >= v111 ? (char *)v117 : v109;
                v69 = ZSTD_count_2segments(v20 + 6, (char *)(v67 + 4), v117, v68, v110);
                if (v69 <= 0xFFFFFFFFFFFFFFFBLL
                  && (int)((__clz(v51 + 1) ^ 0xFFFFFFE0) + 4 * v50 + 2) < 4 * ((int)v69 + 4))
                {
                  v51 = 0;
                  v50 = v69 + 4;
                  v41 = v20 + 2;
                }
              }
            }
          }
          v118 = 999999999;
          v52 = v112(a1, v20 + 2, v117, &v118);
          if (v52 < 4
            || (v53 = v118,
                (int)((__clz(v118 + 1) ^ 0xFFFFFFE0) + 4 * v52 + 1) <= (int)((__clz(v51 + 1) ^ 0xFFFFFFE0) + 4 * v50 + 8)))
          {
LABEL_98:
            v52 = v50;
            v53 = v51;
            v54 = v41;
            break;
          }
        }
        else
        {
          ++v42;
        }
        v20 = v54;
        v41 = v54;
        v51 = v53;
        v50 = v52;
      }
      while ((unint64_t)v54 < v116);
    }
    v18 = v107;
    if (v53 <= 2)
    {
      v75 = v106;
      LODWORD(v11) = v111;
      v76 = (unsigned __int8 *)(v117 - 32);
    }
    else
    {
      v70 = v108;
      v71 = (_DWORD)v54 - (v53 + v108) + 2;
      LODWORD(v11) = v111;
      if (v111 > v71)
        v70 = v115;
      v72 = v110;
      if (v111 > v71)
        v72 = v105;
      if (v54 <= (char *)v5 || v70 + (unint64_t)v71 <= (unint64_t)v72)
      {
        v75 = v106;
        v76 = (unsigned __int8 *)(v117 - 32);
      }
      else
      {
        v73 = (unsigned __int8 *)(v70 + ((_DWORD)v54 - (v53 + v108) + 2) - 1);
        v74 = (unsigned __int8 *)(v54 - 1);
        v75 = v106;
        v76 = (unsigned __int8 *)(v117 - 32);
        while (*v74 == *v73)
        {
          ++v52;
          v77 = v74 - 1;
          if (v74 > v5)
          {
            --v74;
            if (v73-- > v72)
              continue;
          }
          v54 = (char *)(v77 + 1);
          goto LABEL_114;
        }
        v54 = (char *)(v74 + 1);
      }
LABEL_114:
      v18 = v19;
      v19 = (v53 - 2);
    }
    v79 = v54 - (char *)v5;
    v80 = *(_OWORD **)(v75 + 24);
    if (v54 <= (char *)v76)
    {
      *v80 = *(_OWORD *)v5;
      v84 = *(_QWORD *)(v75 + 24);
      if (v79 <= 0x10)
      {
        *(_QWORD *)(v75 + 24) = v84 + v79;
        v89 = *(_QWORD *)(v75 + 8);
        goto LABEL_129;
      }
      v85 = (_OWORD *)(v84 + 16);
      v86 = v84 + v79;
      v87 = (__int128 *)(v5 + 16);
      do
      {
        v88 = *v87++;
        *v85++ = v88;
      }
      while ((unint64_t)v85 < v86);
    }
    else
    {
      if (v5 <= v76)
      {
        v81 = (_OWORD *)((char *)v80 + v76 - v5);
        do
        {
          v82 = *(_OWORD *)v5;
          v5 += 16;
          *v80++ = v82;
        }
        while (v80 < v81);
        v5 = v76;
        v80 = v81;
      }
      while (v5 < (unsigned __int8 *)v54)
      {
        v83 = *v5++;
        *(_BYTE *)v80 = v83;
        v80 = (_OWORD *)((char *)v80 + 1);
      }
    }
    *(_QWORD *)(v75 + 24) += v79;
    v89 = *(_QWORD *)(v75 + 8);
    if (v79 >= 0x10000)
    {
      v90 = (unint64_t)(v89 - *(_QWORD *)v75) >> 3;
      *(_DWORD *)(v75 + 72) = 1;
      *(_DWORD *)(v75 + 76) = v90;
    }
LABEL_129:
    *(_WORD *)(v89 + 4) = v79;
    *(_DWORD *)v89 = v53 + 1;
    if (v52 - 3 >= 0x10000)
    {
      v91 = (unint64_t)(v89 - *(_QWORD *)v75) >> 3;
      *(_DWORD *)(v75 + 72) = 2;
      *(_DWORD *)(v75 + 76) = v91;
    }
    *(_WORD *)(v89 + 6) = v52 - 3;
    v92 = v89 + 8;
    *(_QWORD *)(v75 + 8) = v89 + 8;
    v5 = (unsigned __int8 *)&v54[v52];
    if ((unint64_t)&v54[v52] <= v116)
    {
      v93 = v19;
      v94 = v18;
      v9 = v108;
      while (1)
      {
        v19 = v94;
        v94 = v93;
        v95 = (_DWORD)v5 - v108;
        v96 = (_DWORD)v5 - v108 - v114;
        if ((int)v5 - (int)v108 - *(_DWORD *)(a1 + 28) <= v114 || *(_DWORD *)(a1 + 40) != 0)
          v96 = *(_DWORD *)(a1 + 28);
        v98 = (v95 - v19);
        v99 = v115;
        if (v98 >= v11)
          v99 = v108;
        if ((v113 - v98) < 3 || v19 > v95 - v96 || *(_DWORD *)v5 != *(_DWORD *)(v99 + v98))
          break;
        if (v98 >= v11)
          v100 = (char *)v117;
        else
          v100 = v109;
        v101 = ZSTD_count_2segments(v5 + 4, (char *)(v99 + v98 + 4), v117, v100, v110);
        if ((unint64_t)v5 <= v117 - 32)
        {
          *(_OWORD *)*(_QWORD *)(v75 + 24) = *(_OWORD *)v5;
          v92 = *(_QWORD *)(v75 + 8);
        }
        *(_WORD *)(v92 + 4) = 0;
        *(_DWORD *)v92 = 1;
        if (v101 + 1 >= 0x10000)
        {
          v102 = (unint64_t)(v92 - *(_QWORD *)v75) >> 3;
          *(_DWORD *)(v75 + 72) = 2;
          *(_DWORD *)(v75 + 76) = v102;
        }
        *(_WORD *)(v92 + 6) = v101 + 1;
        v92 += 8;
        v5 += v101 + 4;
        *(_QWORD *)(v75 + 8) = v92;
        v93 = v19;
        LODWORD(v18) = v94;
        v20 = (char *)v5;
        if ((unint64_t)v5 > v116)
          goto LABEL_154;
      }
      LODWORD(v18) = v19;
      v19 = v93;
      v20 = (char *)v5;
    }
    else
    {
      v20 = &v54[v52];
      v9 = v108;
    }
    goto LABEL_154;
  }
LABEL_155:
  *a3 = v19;
  a3[1] = v18;
  return v117 - (_QWORD)v5;
}

unint64_t ZSTD_HcFindBestMatch_noDict_4(uint64_t a1, _DWORD *a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t result;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_DWORD *)(a1 + 244);
  v6 = 1 << v5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 240);
  v10 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0)
    v12 = (_DWORD)a2 - v7 - v9;
  else
    v12 = *(_DWORD *)(a1 + 28);
  v13 = v8 - v6;
  if (v8 < v6)
    v13 = 0;
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_DWORD *)(a1 + 252);
  v16 = 32 - *(_DWORD *)(a1 + 248);
  if (v10 < v8)
  {
    v17 = ~(-1 << v5);
    do
    {
      v18 = (-1640531535 * *(_DWORD *)(v7 + v10)) >> v16;
      *(_DWORD *)(v4 + 4 * (v10 & v17)) = *(_DWORD *)(v14 + 4 * v18);
      *(_DWORD *)(v14 + 4 * v18) = v10++;
    }
    while (v10 < ((_DWORD)a2 - v7));
  }
  *(_DWORD *)(a1 + 44) = v8;
  v19 = *(_DWORD *)(v14 + 4 * ((-1640531535 * *a2) >> v16));
  if (v19 < v12)
    return 3;
  v21 = 1 << v15;
  v22 = v6 - 1;
  v23 = (unint64_t)a3 - 7;
  v24 = v8 + 2;
  v25 = a2 + 2;
  v26 = v7 + 8;
  v27 = 3;
  while (1)
  {
    v28 = v19;
    v29 = (_QWORD *)(v7 + v19);
    if (*((unsigned __int8 *)v29 + v27) != *((unsigned __int8 *)a2 + v27))
      goto LABEL_32;
    if (v23 <= (unint64_t)a2)
    {
      v31 = a2;
    }
    else
    {
      v30 = *(_QWORD *)a2 ^ *v29;
      if (v30)
      {
        result = __clz(__rbit64(v30)) >> 3;
        goto LABEL_30;
      }
      v32 = 0;
      while (1)
      {
        v31 = &v25[v32];
        if ((unint64_t)&v25[v32] >= v23)
          break;
        v33 = *(_QWORD *)(v26 + v28 + v32 * 4);
        v32 += 2;
        v34 = *v31 ^ v33;
        if (v34)
        {
          result = v32 * 4 + (__clz(__rbit64(v34)) >> 3);
          goto LABEL_30;
        }
      }
      v29 = (_QWORD *)(v26 + v28 + v32 * 4);
    }
    if (v31 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v29 == *(_DWORD *)v31)
    {
      v31 = (_QWORD *)((char *)v31 + 4);
      v29 = (_QWORD *)((char *)v29 + 4);
    }
    if (v31 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v29 == *(unsigned __int16 *)v31)
    {
      v31 = (_QWORD *)((char *)v31 + 2);
      v29 = (_QWORD *)((char *)v29 + 2);
    }
    if (v31 < (_QWORD *)a3 && *(unsigned __int8 *)v29 == *(unsigned __int8 *)v31)
      v31 = (_QWORD *)((char *)v31 + 1);
    result = (char *)v31 - (char *)a2;
LABEL_30:
    if (result > v27)
    {
      *a4 = v24 - v28;
      v27 = result;
      if ((_DWORD *)((char *)a2 + result) == a3)
        return result;
    }
LABEL_32:
    if (v28 <= v13)
      return v27;
    if (!--v21)
      return v27;
    v19 = *(_DWORD *)(v4 + 4 * (v28 & v22));
    result = v27;
    if (v19 < v12)
      return result;
  }
}

unint64_t ZSTD_HcFindBestMatch_noDict_5(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t result;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_DWORD *)(a1 + 244);
  v6 = 1 << v5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 240);
  v10 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0)
    v12 = (_DWORD)a2 - v7 - v9;
  else
    v12 = *(_DWORD *)(a1 + 28);
  v13 = v8 - v6;
  if (v8 < v6)
    v13 = 0;
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_DWORD *)(a1 + 252);
  v16 = 64 - *(_DWORD *)(a1 + 248);
  if (v10 < v8)
  {
    v17 = ~(-1 << v5);
    do
    {
      v18 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v10)) >> v16;
      *(_DWORD *)(v4 + 4 * (v10 & v17)) = *(_DWORD *)(v14 + 4 * v18);
      *(_DWORD *)(v14 + 4 * v18) = v10++;
    }
    while (v10 < ((_DWORD)a2 - v7));
  }
  *(_DWORD *)(a1 + 44) = v8;
  v19 = *(_DWORD *)(v14 + 4 * ((0xCF1BBCDCBB000000 * *a2) >> v16));
  if (v19 < v12)
    return 3;
  v21 = 1 << v15;
  v22 = v6 - 1;
  v23 = (unint64_t)a3 - 7;
  v24 = v8 + 2;
  v25 = a2 + 1;
  v26 = v7 + 8;
  v27 = 3;
  while (1)
  {
    v28 = v19;
    v29 = (_QWORD *)(v7 + v19);
    if (*((unsigned __int8 *)v29 + v27) != *((unsigned __int8 *)a2 + v27))
      goto LABEL_32;
    if (v23 <= (unint64_t)a2)
    {
      v31 = a2;
    }
    else
    {
      v30 = *a2 ^ *v29;
      if (v30)
      {
        result = __clz(__rbit64(v30)) >> 3;
        goto LABEL_30;
      }
      v32 = 0;
      while (1)
      {
        v31 = &v25[v32];
        if ((unint64_t)&v25[v32] >= v23)
          break;
        v33 = *(_QWORD *)(v26 + v28 + v32 * 8);
        ++v32;
        v34 = *v31 ^ v33;
        if (v34)
        {
          result = v32 * 8 + (__clz(__rbit64(v34)) >> 3);
          goto LABEL_30;
        }
      }
      v29 = (_QWORD *)(v26 + v28 + v32 * 8);
    }
    if (v31 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v29 == *(_DWORD *)v31)
    {
      v31 = (_QWORD *)((char *)v31 + 4);
      v29 = (_QWORD *)((char *)v29 + 4);
    }
    if (v31 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v29 == *(unsigned __int16 *)v31)
    {
      v31 = (_QWORD *)((char *)v31 + 2);
      v29 = (_QWORD *)((char *)v29 + 2);
    }
    if (v31 < a3 && *(unsigned __int8 *)v29 == *(unsigned __int8 *)v31)
      v31 = (_QWORD *)((char *)v31 + 1);
    result = (char *)v31 - (char *)a2;
LABEL_30:
    if (result > v27)
    {
      *a4 = v24 - v28;
      v27 = result;
      if ((_QWORD *)((char *)a2 + result) == a3)
        return result;
    }
LABEL_32:
    if (v28 <= v13)
      return v27;
    if (!--v21)
      return v27;
    v19 = *(_DWORD *)(v4 + 4 * (v28 & v22));
    result = v27;
    if (v19 < v12)
      return result;
  }
}

unint64_t ZSTD_HcFindBestMatch_noDict_6(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t result;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_DWORD *)(a1 + 244);
  v6 = 1 << v5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 240);
  v10 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v7 - *(_DWORD *)(a1 + 28) > v9 && *(_DWORD *)(a1 + 40) == 0)
    v12 = (_DWORD)a2 - v7 - v9;
  else
    v12 = *(_DWORD *)(a1 + 28);
  v13 = v8 - v6;
  if (v8 < v6)
    v13 = 0;
  v14 = *(_QWORD *)(a1 + 96);
  v15 = *(_DWORD *)(a1 + 252);
  v16 = 64 - *(_DWORD *)(a1 + 248);
  if (v10 < v8)
  {
    v17 = ~(-1 << v5);
    do
    {
      v18 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v10)) >> v16;
      *(_DWORD *)(v4 + 4 * (v10 & v17)) = *(_DWORD *)(v14 + 4 * v18);
      *(_DWORD *)(v14 + 4 * v18) = v10++;
    }
    while (v10 < ((_DWORD)a2 - v7));
  }
  *(_DWORD *)(a1 + 44) = v8;
  v19 = *(_DWORD *)(v14 + 4 * ((0xCF1BBCDCBF9B0000 * *a2) >> v16));
  if (v19 < v12)
    return 3;
  v21 = 1 << v15;
  v22 = v6 - 1;
  v23 = (unint64_t)a3 - 7;
  v24 = v8 + 2;
  v25 = a2 + 1;
  v26 = v7 + 8;
  v27 = 3;
  while (1)
  {
    v28 = v19;
    v29 = (_QWORD *)(v7 + v19);
    if (*((unsigned __int8 *)v29 + v27) != *((unsigned __int8 *)a2 + v27))
      goto LABEL_32;
    if (v23 <= (unint64_t)a2)
    {
      v31 = a2;
    }
    else
    {
      v30 = *a2 ^ *v29;
      if (v30)
      {
        result = __clz(__rbit64(v30)) >> 3;
        goto LABEL_30;
      }
      v32 = 0;
      while (1)
      {
        v31 = &v25[v32];
        if ((unint64_t)&v25[v32] >= v23)
          break;
        v33 = *(_QWORD *)(v26 + v28 + v32 * 8);
        ++v32;
        v34 = *v31 ^ v33;
        if (v34)
        {
          result = v32 * 8 + (__clz(__rbit64(v34)) >> 3);
          goto LABEL_30;
        }
      }
      v29 = (_QWORD *)(v26 + v28 + v32 * 8);
    }
    if (v31 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v29 == *(_DWORD *)v31)
    {
      v31 = (_QWORD *)((char *)v31 + 4);
      v29 = (_QWORD *)((char *)v29 + 4);
    }
    if (v31 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v29 == *(unsigned __int16 *)v31)
    {
      v31 = (_QWORD *)((char *)v31 + 2);
      v29 = (_QWORD *)((char *)v29 + 2);
    }
    if (v31 < a3 && *(unsigned __int8 *)v29 == *(unsigned __int8 *)v31)
      v31 = (_QWORD *)((char *)v31 + 1);
    result = (char *)v31 - (char *)a2;
LABEL_30:
    if (result > v27)
    {
      *a4 = v24 - v28;
      v27 = result;
      if ((_QWORD *)((char *)a2 + result) == a3)
        return result;
    }
LABEL_32:
    if (v28 <= v13)
      return v27;
    if (!--v21)
      return v27;
    v19 = *(_DWORD *)(v4 + 4 * (v28 & v22));
    result = v27;
    if (v19 < v12)
      return result;
  }
}

unint64_t ZSTD_HcFindBestMatch_extDict_4(uint64_t a1, _DWORD *a2, unint64_t a3, _QWORD *a4)
{
  _DWORD *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unint64_t result;
  int v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  unsigned int v49;
  uint64_t v50;
  char *v51;
  _QWORD *v52;
  _DWORD *v53;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_DWORD *)(a1 + 244);
  v7 = 1 << v6;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (_DWORD)a2 - v8;
  v11 = 1 << *(_DWORD *)(a1 + 240);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = *(_DWORD *)(a1 + 28);
  v14 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)a2 - (_DWORD)v8 - v13 > v11 && *(_DWORD *)(a1 + 40) == 0)
    v16 = (_DWORD)a2 - (_DWORD)v8 - v11;
  else
    v16 = v13;
  if (v10 >= v7)
    v17 = v10 - v7;
  else
    v17 = 0;
  v18 = *(_QWORD *)(a1 + 96);
  v19 = *(_DWORD *)(a1 + 252);
  v20 = 32 - *(_DWORD *)(a1 + 248);
  if (v14 < v10)
  {
    v21 = ~(-1 << v6);
    do
    {
      v22 = (-1640531535 * *(_DWORD *)(v8 + v14)) >> v20;
      *(_DWORD *)(v5 + 4 * (v14 & v21)) = *(_DWORD *)(v18 + 4 * v22);
      *(_DWORD *)(v18 + 4 * v22) = v14++;
    }
    while (v14 < v10);
  }
  *(_DWORD *)(a1 + 44) = v10;
  v23 = *v4;
  v24 = *(_DWORD *)(v18 + 4 * ((-1640531535 * *v4) >> v20));
  if (v24 < v16)
    return 3;
  v52 = (_QWORD *)(v8 + v12);
  v53 = v4;
  v50 = v5;
  v51 = (char *)(v9 + v12);
  v26 = 1 << v19;
  v27 = v7 - 1;
  v28 = a3 - 7;
  v44 = a3 - 1;
  v45 = a3 - 3;
  v48 = v4 + 1;
  v47 = v10 + 2;
  v42 = v4 + 2;
  v43 = v8 + 8;
  v29 = 3;
  v49 = v17;
  v46 = a3;
  while (1)
  {
    v30 = v24;
    if (v24 >= v12)
    {
      v36 = (_QWORD *)(v8 + v24);
      if (*((unsigned __int8 *)v36 + v29) != *((unsigned __int8 *)v4 + v29))
        goto LABEL_36;
      if (v28 <= (unint64_t)v4)
      {
        v38 = v4;
      }
      else
      {
        v37 = *(_QWORD *)v4 ^ *v36;
        if (v37)
        {
          result = __clz(__rbit64(v37)) >> 3;
          goto LABEL_34;
        }
        v39 = 0;
        while (1)
        {
          v38 = &v42[v39];
          if ((unint64_t)&v42[v39] >= v28)
            break;
          v40 = *(_QWORD *)(v43 + v24 + v39 * 4);
          v39 += 2;
          v41 = *v38 ^ v40;
          if (v41)
          {
            result = v39 * 4 + (__clz(__rbit64(v41)) >> 3);
            goto LABEL_34;
          }
        }
        v36 = (_QWORD *)(v43 + v24 + v39 * 4);
      }
      if ((unint64_t)v38 < v45 && *(_DWORD *)v36 == *(_DWORD *)v38)
      {
        v38 = (_QWORD *)((char *)v38 + 4);
        v36 = (_QWORD *)((char *)v36 + 4);
      }
      if ((unint64_t)v38 < v44 && *(unsigned __int16 *)v36 == *(unsigned __int16 *)v38)
      {
        v38 = (_QWORD *)((char *)v38 + 2);
        v36 = (_QWORD *)((char *)v36 + 2);
      }
      if ((unint64_t)v38 < a3 && *(unsigned __int8 *)v36 == *(unsigned __int8 *)v38)
        v38 = (_QWORD *)((char *)v38 + 1);
      result = (char *)v38 - (char *)v4;
    }
    else
    {
      if (*(_DWORD *)(v9 + v24) != v23)
        goto LABEL_36;
      v31 = v12;
      v32 = v8;
      v33 = v16;
      v34 = v28;
      v35 = ZSTD_count_2segments(v48, (char *)(v9 + v24 + 4), a3, v51, v52);
      v28 = v34;
      v16 = v33;
      v8 = v32;
      v5 = v50;
      v12 = v31;
      v17 = v49;
      v4 = v53;
      a3 = v46;
      result = v35 + 4;
    }
LABEL_34:
    if (result > v29)
    {
      *a4 = v47 - v30;
      v29 = result;
      if ((_DWORD *)((char *)v4 + result) == (_DWORD *)a3)
        return result;
    }
LABEL_36:
    if (v30 <= v17)
      return v29;
    if (!--v26)
      return v29;
    v24 = *(_DWORD *)(v5 + 4 * (v30 & v27));
    result = v29;
    if (v24 < v16)
      return result;
  }
}

unint64_t ZSTD_HcFindBestMatch_extDict_5(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t result;
  int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_DWORD *)(a1 + 244);
  v7 = 1 << v6;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (_DWORD)a2 - v8;
  v11 = 1 << *(_DWORD *)(a1 + 240);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v8 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0)
    v15 = (_DWORD)a2 - v8 - v11;
  else
    v15 = *(_DWORD *)(a1 + 28);
  if (v10 >= v7)
    v16 = v10 - v7;
  else
    v16 = 0;
  v17 = *(_QWORD *)(a1 + 96);
  v18 = *(_DWORD *)(a1 + 252);
  v19 = 64 - *(_DWORD *)(a1 + 248);
  if (v13 < v10)
  {
    v20 = ~(-1 << v6);
    do
    {
      v21 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v8 + v13)) >> v19;
      *(_DWORD *)(v5 + 4 * (v13 & v20)) = *(_DWORD *)(v17 + 4 * v21);
      *(_DWORD *)(v17 + 4 * v21) = v13++;
    }
    while (v13 < v10);
  }
  *(_DWORD *)(a1 + 44) = v10;
  v22 = *(_DWORD *)(v17 + 4 * ((0xCF1BBCDCBB000000 * *v4) >> v19));
  if (v22 < v15)
    return 3;
  v50 = (_QWORD *)(v8 + v12);
  v48 = v5;
  v49 = (char *)(v9 + v12);
  v24 = 1 << v18;
  v25 = v7 - 1;
  v26 = a3 - 7;
  v42 = a3 - 1;
  v43 = a3 - 3;
  v46 = (_QWORD *)((char *)v4 + 4);
  v47 = v8;
  v45 = v10 + 2;
  v40 = v4 + 1;
  v41 = v8 + 8;
  v27 = 3;
  v44 = v4;
  while (1)
  {
    v28 = v22;
    if (v22 >= v12)
    {
      v34 = (_QWORD *)(v8 + v22);
      if (*((unsigned __int8 *)v34 + v27) != *((unsigned __int8 *)v4 + v27))
        goto LABEL_36;
      if (v26 <= (unint64_t)v4)
      {
        v36 = v4;
      }
      else
      {
        v35 = *v4 ^ *v34;
        if (v35)
        {
          result = __clz(__rbit64(v35)) >> 3;
          goto LABEL_34;
        }
        v37 = 0;
        while (1)
        {
          v36 = &v40[v37];
          if ((unint64_t)&v40[v37] >= v26)
            break;
          v38 = *(_QWORD *)(v41 + v22 + v37 * 8);
          ++v37;
          v39 = *v36 ^ v38;
          if (v39)
          {
            result = v37 * 8 + (__clz(__rbit64(v39)) >> 3);
            goto LABEL_34;
          }
        }
        v34 = (_QWORD *)(v41 + v22 + v37 * 8);
      }
      if ((unint64_t)v36 < v43 && *(_DWORD *)v34 == *(_DWORD *)v36)
      {
        v36 = (_QWORD *)((char *)v36 + 4);
        v34 = (_QWORD *)((char *)v34 + 4);
      }
      if ((unint64_t)v36 < v42 && *(unsigned __int16 *)v34 == *(unsigned __int16 *)v36)
      {
        v36 = (_QWORD *)((char *)v36 + 2);
        v34 = (_QWORD *)((char *)v34 + 2);
      }
      if ((unint64_t)v36 < a3 && *(unsigned __int8 *)v34 == *(unsigned __int8 *)v36)
        v36 = (_QWORD *)((char *)v36 + 1);
      result = (char *)v36 - (char *)v4;
    }
    else
    {
      if (*(_DWORD *)(v9 + v22) != *(_DWORD *)v4)
        goto LABEL_36;
      v29 = a3;
      v30 = v16;
      v31 = v12;
      v32 = v26;
      v33 = ZSTD_count_2segments(v46, (char *)(v9 + v22 + 4), a3, v49, v50);
      v26 = v32;
      v12 = v31;
      v16 = v30;
      v4 = v44;
      a3 = v29;
      v8 = v47;
      v5 = v48;
      result = v33 + 4;
    }
LABEL_34:
    if (result > v27)
    {
      *a4 = v45 - v28;
      v27 = result;
      if ((_QWORD *)((char *)v4 + result) == (_QWORD *)a3)
        return result;
    }
LABEL_36:
    if (v28 <= v16)
      return v27;
    if (!--v24)
      return v27;
    v22 = *(_DWORD *)(v5 + 4 * (v28 & v25));
    result = v27;
    if (v22 < v15)
      return result;
  }
}

unint64_t ZSTD_HcFindBestMatch_extDict_6(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t result;
  int v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_DWORD *)(a1 + 244);
  v7 = 1 << v6;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (_DWORD)a2 - v8;
  v11 = 1 << *(_DWORD *)(a1 + 240);
  v12 = *(unsigned int *)(a1 + 24);
  v13 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v8 - *(_DWORD *)(a1 + 28) > v11 && *(_DWORD *)(a1 + 40) == 0)
    v15 = (_DWORD)a2 - v8 - v11;
  else
    v15 = *(_DWORD *)(a1 + 28);
  if (v10 >= v7)
    v16 = v10 - v7;
  else
    v16 = 0;
  v17 = *(_QWORD *)(a1 + 96);
  v18 = *(_DWORD *)(a1 + 252);
  v19 = 64 - *(_DWORD *)(a1 + 248);
  if (v13 < v10)
  {
    v20 = ~(-1 << v6);
    do
    {
      v21 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v8 + v13)) >> v19;
      *(_DWORD *)(v5 + 4 * (v13 & v20)) = *(_DWORD *)(v17 + 4 * v21);
      *(_DWORD *)(v17 + 4 * v21) = v13++;
    }
    while (v13 < v10);
  }
  *(_DWORD *)(a1 + 44) = v10;
  v22 = *(_DWORD *)(v17 + 4 * ((0xCF1BBCDCBF9B0000 * *v4) >> v19));
  if (v22 < v15)
    return 3;
  v50 = (_QWORD *)(v8 + v12);
  v48 = v5;
  v49 = (char *)(v9 + v12);
  v24 = 1 << v18;
  v25 = v7 - 1;
  v26 = a3 - 7;
  v42 = a3 - 1;
  v43 = a3 - 3;
  v46 = (_QWORD *)((char *)v4 + 4);
  v47 = v8;
  v45 = v10 + 2;
  v40 = v4 + 1;
  v41 = v8 + 8;
  v27 = 3;
  v44 = v4;
  while (1)
  {
    v28 = v22;
    if (v22 >= v12)
    {
      v34 = (_QWORD *)(v8 + v22);
      if (*((unsigned __int8 *)v34 + v27) != *((unsigned __int8 *)v4 + v27))
        goto LABEL_36;
      if (v26 <= (unint64_t)v4)
      {
        v36 = v4;
      }
      else
      {
        v35 = *v4 ^ *v34;
        if (v35)
        {
          result = __clz(__rbit64(v35)) >> 3;
          goto LABEL_34;
        }
        v37 = 0;
        while (1)
        {
          v36 = &v40[v37];
          if ((unint64_t)&v40[v37] >= v26)
            break;
          v38 = *(_QWORD *)(v41 + v22 + v37 * 8);
          ++v37;
          v39 = *v36 ^ v38;
          if (v39)
          {
            result = v37 * 8 + (__clz(__rbit64(v39)) >> 3);
            goto LABEL_34;
          }
        }
        v34 = (_QWORD *)(v41 + v22 + v37 * 8);
      }
      if ((unint64_t)v36 < v43 && *(_DWORD *)v34 == *(_DWORD *)v36)
      {
        v36 = (_QWORD *)((char *)v36 + 4);
        v34 = (_QWORD *)((char *)v34 + 4);
      }
      if ((unint64_t)v36 < v42 && *(unsigned __int16 *)v34 == *(unsigned __int16 *)v36)
      {
        v36 = (_QWORD *)((char *)v36 + 2);
        v34 = (_QWORD *)((char *)v34 + 2);
      }
      if ((unint64_t)v36 < a3 && *(unsigned __int8 *)v34 == *(unsigned __int8 *)v36)
        v36 = (_QWORD *)((char *)v36 + 1);
      result = (char *)v36 - (char *)v4;
    }
    else
    {
      if (*(_DWORD *)(v9 + v22) != *(_DWORD *)v4)
        goto LABEL_36;
      v29 = a3;
      v30 = v16;
      v31 = v12;
      v32 = v26;
      v33 = ZSTD_count_2segments(v46, (char *)(v9 + v22 + 4), a3, v49, v50);
      v26 = v32;
      v12 = v31;
      v16 = v30;
      v4 = v44;
      a3 = v29;
      v8 = v47;
      v5 = v48;
      result = v33 + 4;
    }
LABEL_34:
    if (result > v27)
    {
      *a4 = v45 - v28;
      v27 = result;
      if ((_QWORD *)((char *)v4 + result) == (_QWORD *)a3)
        return result;
    }
LABEL_36:
    if (v28 <= v16)
      return v27;
    if (!--v24)
      return v27;
    v22 = *(_DWORD *)(v5 + 4 * (v28 & v25));
    result = v27;
    if (v22 < v15)
      return result;
  }
}

unint64_t ZSTD_HcFindBestMatch_dictMatchState_4(uint64_t a1, _DWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  unint64_t v36;
  unsigned int v39;
  unint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;

  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_DWORD *)(a1 + 244);
  v6 = 1 << v5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 240);
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 28);
  v12 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)a2 - (_DWORD)v7 - v11 > v9 && *(_DWORD *)(a1 + 40) == 0)
    v11 = (_DWORD)a2 - v7 - v9;
  if (v8 >= v6)
    v14 = v8 - v6;
  else
    v14 = 0;
  v15 = 1 << *(_DWORD *)(a1 + 252);
  v16 = *(_QWORD *)(a1 + 232);
  v17 = *(_QWORD *)(a1 + 96);
  v18 = 32 - *(_DWORD *)(a1 + 248);
  if (v12 < v8)
  {
    v19 = ~(-1 << v5);
    do
    {
      v20 = (-1640531535 * *(_DWORD *)(v7 + v12)) >> v18;
      *(_DWORD *)(v4 + 4 * (v12 & v19)) = *(_DWORD *)(v17 + 4 * v20);
      *(_DWORD *)(v17 + 4 * v20) = v12++;
    }
    while (v12 < ((_DWORD)a2 - v7));
  }
  *(_DWORD *)(a1 + 44) = v8;
  v21 = *a2;
  v22 = -1640531535 * *a2;
  v23 = *(_DWORD *)(v17 + 4 * (v22 >> v18));
  if (v23 < v11)
  {
    v24 = 3;
    goto LABEL_14;
  }
  v39 = v6 - 1;
  v40 = a3 - 7;
  v41 = a2 + 2;
  v42 = v7 + 8;
  v24 = 3;
  while (1)
  {
    v43 = v23;
    v44 = (_QWORD *)(v7 + v23);
    if (*((unsigned __int8 *)v44 + v24) == *((unsigned __int8 *)a2 + v24))
      break;
LABEL_46:
    if (v43 > v14)
    {
      if (--v15)
      {
        v23 = *(_DWORD *)(v4 + 4 * (v43 & v39));
        if (v23 >= v11)
          continue;
      }
    }
    goto LABEL_14;
  }
  if (v40 <= (unint64_t)a2)
  {
    v47 = a2;
  }
  else
  {
    v45 = *(_QWORD *)a2 ^ *v44;
    if (v45)
    {
      v46 = __clz(__rbit64(v45)) >> 3;
      goto LABEL_44;
    }
    v48 = 0;
    while (1)
    {
      v47 = &v41[v48];
      if ((unint64_t)&v41[v48] >= v40)
        break;
      v49 = *(_QWORD *)(v42 + v43 + v48 * 4);
      v48 += 2;
      v50 = *v47 ^ v49;
      if (v50)
      {
        v46 = v48 * 4 + (__clz(__rbit64(v50)) >> 3);
        goto LABEL_44;
      }
    }
    v44 = (_QWORD *)(v42 + v43 + v48 * 4);
  }
  if ((unint64_t)v47 < a3 - 3 && *(_DWORD *)v44 == *(_DWORD *)v47)
  {
    v47 = (_QWORD *)((char *)v47 + 4);
    v44 = (_QWORD *)((char *)v44 + 4);
  }
  if ((unint64_t)v47 < a3 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v47)
  {
    v47 = (_QWORD *)((char *)v47 + 2);
    v44 = (_QWORD *)((char *)v44 + 2);
  }
  if ((unint64_t)v47 < a3 && *(unsigned __int8 *)v44 == *(unsigned __int8 *)v47)
    v47 = (_QWORD *)((char *)v47 + 1);
  v46 = (char *)v47 - (char *)a2;
LABEL_44:
  if (v46 <= v24)
    goto LABEL_46;
  *a4 = v8 + 2 - v43;
  v24 = v46;
  if ((_DWORD *)((char *)a2 + v46) != (_DWORD *)a3)
    goto LABEL_46;
  v24 = v46;
LABEL_14:
  v25 = 1 << *(_DWORD *)(v16 + 244);
  v26 = *(_QWORD *)(v16 + 8);
  v56 = *(char **)v16;
  v27 = *(_QWORD *)v16 - v26;
  if (v27 >= v25)
    v28 = v27 - v25;
  else
    v28 = 0;
  if (v15)
  {
    v29 = *(_DWORD *)(v16 + 24);
    v30 = *(_DWORD *)(*(_QWORD *)(v16 + 96) + 4 * (v22 >> -*(_BYTE *)(v16 + 248)));
    if (v30 >= v29)
    {
      v55 = (_QWORD *)(v7 + v10);
      v31 = *(_QWORD *)(v16 + 112);
      v32 = v25 - 1;
      v54 = a2 + 1;
      v51 = v8 - v10 + v27 + 2;
      v33 = v15 - 1;
      do
      {
        v34 = v26 + v30;
        if (*(_DWORD *)v34 == v21)
        {
          v35 = (_DWORD *)a3;
          v36 = ZSTD_count_2segments(v54, (char *)(v34 + 4), a3, v56, v55);
          a3 = (unint64_t)v35;
          if (v36 + 4 > v24)
          {
            *a4 = v51 - v30;
            v24 = v36 + 4;
            if ((_DWORD *)((char *)a2 + v36 + 4) == v35)
              break;
          }
        }
        if (v30 <= v28)
          break;
        if (v33-- == 0)
          break;
        v30 = *(_DWORD *)(v31 + 4 * (v30 & v32));
      }
      while (v30 >= v29);
    }
  }
  return v24;
}

unint64_t ZSTD_HcFindBestMatch_dictMatchState_5(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;

  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_DWORD *)(a1 + 244);
  v6 = 1 << v5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 240);
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 28);
  v12 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)a2 - (_DWORD)v7 - v11 > v9 && *(_DWORD *)(a1 + 40) == 0)
    v11 = (_DWORD)a2 - v7 - v9;
  if (v8 >= v6)
    v14 = v8 - v6;
  else
    v14 = 0;
  v15 = 1 << *(_DWORD *)(a1 + 252);
  v16 = *(_QWORD *)(a1 + 232);
  v17 = *(_QWORD *)(a1 + 96);
  v18 = 64 - *(_DWORD *)(a1 + 248);
  if (v12 < v8)
  {
    v19 = ~(-1 << v5);
    do
    {
      v20 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v7 + v12)) >> v18;
      *(_DWORD *)(v4 + 4 * (v12 & v19)) = *(_DWORD *)(v17 + 4 * v20);
      *(_DWORD *)(v17 + 4 * v20) = v12++;
    }
    while (v12 < ((_DWORD)a2 - v7));
  }
  *(_DWORD *)(a1 + 44) = v8;
  v21 = 0xCF1BBCDCBB000000 * *a2;
  v22 = *(_DWORD *)(v17 + 4 * (v21 >> v18));
  if (v22 < v11)
  {
    v23 = 3;
    goto LABEL_14;
  }
  v39 = v6 - 1;
  v40 = a3 - 7;
  v41 = a2 + 1;
  v42 = v7 + 8;
  v23 = 3;
  while (1)
  {
    v43 = v22;
    v44 = (_QWORD *)(v7 + v22);
    if (*((unsigned __int8 *)v44 + v23) == *((unsigned __int8 *)a2 + v23))
      break;
LABEL_46:
    if (v43 > v14)
    {
      if (--v15)
      {
        v22 = *(_DWORD *)(v4 + 4 * (v43 & v39));
        if (v22 >= v11)
          continue;
      }
    }
    goto LABEL_14;
  }
  if (v40 <= (unint64_t)a2)
  {
    v47 = a2;
  }
  else
  {
    v45 = *a2 ^ *v44;
    if (v45)
    {
      v46 = __clz(__rbit64(v45)) >> 3;
      goto LABEL_44;
    }
    v48 = 0;
    while (1)
    {
      v47 = &v41[v48];
      if ((unint64_t)&v41[v48] >= v40)
        break;
      v49 = *(_QWORD *)(v42 + v43 + v48 * 8);
      ++v48;
      v50 = *v47 ^ v49;
      if (v50)
      {
        v46 = v48 * 8 + (__clz(__rbit64(v50)) >> 3);
        goto LABEL_44;
      }
    }
    v44 = (_QWORD *)(v42 + v43 + v48 * 8);
  }
  if ((unint64_t)v47 < a3 - 3 && *(_DWORD *)v44 == *(_DWORD *)v47)
  {
    v47 = (_QWORD *)((char *)v47 + 4);
    v44 = (_QWORD *)((char *)v44 + 4);
  }
  if ((unint64_t)v47 < a3 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v47)
  {
    v47 = (_QWORD *)((char *)v47 + 2);
    v44 = (_QWORD *)((char *)v44 + 2);
  }
  if ((unint64_t)v47 < a3 && *(unsigned __int8 *)v44 == *(unsigned __int8 *)v47)
    v47 = (_QWORD *)((char *)v47 + 1);
  v46 = (char *)v47 - (char *)a2;
LABEL_44:
  if (v46 <= v23)
    goto LABEL_46;
  *a4 = v8 + 2 - v43;
  v23 = v46;
  if ((_QWORD *)((char *)a2 + v46) != (_QWORD *)a3)
    goto LABEL_46;
  v23 = v46;
LABEL_14:
  v24 = 1 << *(_DWORD *)(v16 + 244);
  v25 = *(_QWORD *)(v16 + 8);
  v56 = *(char **)v16;
  v26 = *(_QWORD *)v16 - v25;
  if (v26 >= v24)
    v27 = v26 - v24;
  else
    v27 = 0;
  if (v15)
  {
    v28 = *(_DWORD *)(v16 + 24);
    v29 = *(_DWORD *)(*(_QWORD *)(v16 + 96) + 4 * (v21 >> -*(_BYTE *)(v16 + 248)));
    if (v29 >= v28)
    {
      v55 = (_QWORD *)(v7 + v10);
      v30 = *(_QWORD *)(v16 + 112);
      v31 = v24 - 1;
      v32 = *(_DWORD *)a2;
      v54 = (_QWORD *)((char *)a2 + 4);
      v51 = v8 - v10 + v26 + 2;
      v33 = v15 - 1;
      do
      {
        v34 = v25 + v29;
        if (*(_DWORD *)v34 == v32)
        {
          v35 = (_QWORD *)a3;
          v36 = ZSTD_count_2segments(v54, (char *)(v34 + 4), a3, v56, v55);
          a3 = (unint64_t)v35;
          if (v36 + 4 > v23)
          {
            *a4 = v51 - v29;
            v23 = v36 + 4;
            if ((_QWORD *)((char *)a2 + v36 + 4) == v35)
              break;
          }
        }
        if (v29 <= v27)
          break;
        if (v33-- == 0)
          break;
        v29 = *(_DWORD *)(v30 + 4 * (v29 & v31));
      }
      while (v29 >= v28);
    }
  }
  return v23;
}

unint64_t ZSTD_HcFindBestMatch_dictMatchState_6(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unsigned int v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  _QWORD *v54;
  _QWORD *v55;
  char *v56;

  v4 = *(_QWORD *)(a1 + 112);
  v5 = *(_DWORD *)(a1 + 244);
  v6 = 1 << v5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = (_DWORD)a2 - v7;
  v9 = 1 << *(_DWORD *)(a1 + 240);
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 28);
  v12 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)a2 - (_DWORD)v7 - v11 > v9 && *(_DWORD *)(a1 + 40) == 0)
    v11 = (_DWORD)a2 - v7 - v9;
  if (v8 >= v6)
    v14 = v8 - v6;
  else
    v14 = 0;
  v15 = 1 << *(_DWORD *)(a1 + 252);
  v16 = *(_QWORD *)(a1 + 232);
  v17 = *(_QWORD *)(a1 + 96);
  v18 = 64 - *(_DWORD *)(a1 + 248);
  if (v12 < v8)
  {
    v19 = ~(-1 << v5);
    do
    {
      v20 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v7 + v12)) >> v18;
      *(_DWORD *)(v4 + 4 * (v12 & v19)) = *(_DWORD *)(v17 + 4 * v20);
      *(_DWORD *)(v17 + 4 * v20) = v12++;
    }
    while (v12 < ((_DWORD)a2 - v7));
  }
  *(_DWORD *)(a1 + 44) = v8;
  v21 = 0xCF1BBCDCBF9B0000 * *a2;
  v22 = *(_DWORD *)(v17 + 4 * (v21 >> v18));
  if (v22 < v11)
  {
    v23 = 3;
    goto LABEL_14;
  }
  v39 = v6 - 1;
  v40 = a3 - 7;
  v41 = a2 + 1;
  v42 = v7 + 8;
  v23 = 3;
  while (1)
  {
    v43 = v22;
    v44 = (_QWORD *)(v7 + v22);
    if (*((unsigned __int8 *)v44 + v23) == *((unsigned __int8 *)a2 + v23))
      break;
LABEL_46:
    if (v43 > v14)
    {
      if (--v15)
      {
        v22 = *(_DWORD *)(v4 + 4 * (v43 & v39));
        if (v22 >= v11)
          continue;
      }
    }
    goto LABEL_14;
  }
  if (v40 <= (unint64_t)a2)
  {
    v47 = a2;
  }
  else
  {
    v45 = *a2 ^ *v44;
    if (v45)
    {
      v46 = __clz(__rbit64(v45)) >> 3;
      goto LABEL_44;
    }
    v48 = 0;
    while (1)
    {
      v47 = &v41[v48];
      if ((unint64_t)&v41[v48] >= v40)
        break;
      v49 = *(_QWORD *)(v42 + v43 + v48 * 8);
      ++v48;
      v50 = *v47 ^ v49;
      if (v50)
      {
        v46 = v48 * 8 + (__clz(__rbit64(v50)) >> 3);
        goto LABEL_44;
      }
    }
    v44 = (_QWORD *)(v42 + v43 + v48 * 8);
  }
  if ((unint64_t)v47 < a3 - 3 && *(_DWORD *)v44 == *(_DWORD *)v47)
  {
    v47 = (_QWORD *)((char *)v47 + 4);
    v44 = (_QWORD *)((char *)v44 + 4);
  }
  if ((unint64_t)v47 < a3 - 1 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v47)
  {
    v47 = (_QWORD *)((char *)v47 + 2);
    v44 = (_QWORD *)((char *)v44 + 2);
  }
  if ((unint64_t)v47 < a3 && *(unsigned __int8 *)v44 == *(unsigned __int8 *)v47)
    v47 = (_QWORD *)((char *)v47 + 1);
  v46 = (char *)v47 - (char *)a2;
LABEL_44:
  if (v46 <= v23)
    goto LABEL_46;
  *a4 = v8 + 2 - v43;
  v23 = v46;
  if ((_QWORD *)((char *)a2 + v46) != (_QWORD *)a3)
    goto LABEL_46;
  v23 = v46;
LABEL_14:
  v24 = 1 << *(_DWORD *)(v16 + 244);
  v25 = *(_QWORD *)(v16 + 8);
  v56 = *(char **)v16;
  v26 = *(_QWORD *)v16 - v25;
  if (v26 >= v24)
    v27 = v26 - v24;
  else
    v27 = 0;
  if (v15)
  {
    v28 = *(_DWORD *)(v16 + 24);
    v29 = *(_DWORD *)(*(_QWORD *)(v16 + 96) + 4 * (v21 >> -*(_BYTE *)(v16 + 248)));
    if (v29 >= v28)
    {
      v55 = (_QWORD *)(v7 + v10);
      v30 = *(_QWORD *)(v16 + 112);
      v31 = v24 - 1;
      v32 = *(_DWORD *)a2;
      v54 = (_QWORD *)((char *)a2 + 4);
      v51 = v8 - v10 + v26 + 2;
      v33 = v15 - 1;
      do
      {
        v34 = v25 + v29;
        if (*(_DWORD *)v34 == v32)
        {
          v35 = (_QWORD *)a3;
          v36 = ZSTD_count_2segments(v54, (char *)(v34 + 4), a3, v56, v55);
          a3 = (unint64_t)v35;
          if (v36 + 4 > v23)
          {
            *a4 = v51 - v29;
            v23 = v36 + 4;
            if ((_QWORD *)((char *)a2 + v36 + 4) == v35)
              break;
          }
        }
        if (v29 <= v27)
          break;
        if (v33-- == 0)
          break;
        v29 = *(_DWORD *)(v30 + 4 * (v29 & v31));
      }
      while (v29 >= v28);
    }
  }
  return v23;
}

unint64_t ZSTD_HcFindBestMatch_dedicatedDictSearch_4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v38;
  uint64_t v39;
  int v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  char *v80;
  _QWORD *v81;

  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_DWORD *)(a1 + 244);
  v7 = 1 << v6;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (_DWORD)a2 - v8;
  v10 = 1 << *(_DWORD *)(a1 + 240);
  v11 = *(unsigned int *)(a1 + 24);
  v12 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v8 - *(_DWORD *)(a1 + 28) > v10 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v8 - v10;
  else
    v14 = *(_DWORD *)(a1 + 28);
  if (v9 >= v7)
    v15 = v9 - v7;
  else
    v15 = 0;
  v16 = 1 << *(_DWORD *)(a1 + 252);
  v17 = *(_QWORD *)(a1 + 232);
  v18 = *(_DWORD *)a2;
  v19 = -1640531535 * *(_DWORD *)a2;
  v20 = v19 >> (34 - *(_DWORD *)(v17 + 248));
  v21 = *(_QWORD *)(v17 + 96);
  _X1 = v21 + 16 * v20;
  __asm { PRFM            #0, [X1] }
  v27 = *(_QWORD *)(a1 + 96);
  v28 = 32 - *(_DWORD *)(a1 + 248);
  if (v12 < v9)
  {
    v29 = ~(-1 << v6);
    do
    {
      v30 = (-1640531535 * *(_DWORD *)(v8 + v12)) >> v28;
      *(_DWORD *)(v5 + 4 * (v12 & v29)) = *(_DWORD *)(v27 + 4 * v30);
      *(_DWORD *)(v27 + 4 * v30) = v12++;
    }
    while (v12 < v9);
    v18 = *(_DWORD *)a2;
    v19 = -1640531535 * *(_DWORD *)a2;
  }
  v81 = (_QWORD *)(v8 + v11);
  *(_DWORD *)(a1 + 44) = v9;
  v31 = *(_DWORD *)(v27 + 4 * (v19 >> v28));
  if (v31 >= v14)
  {
    v60 = v7 - 1;
    v61 = a3 - 7;
    v62 = a2 + 1;
    v63 = v8 + 8;
    v32 = 3;
    while (1)
    {
      v64 = v31;
      v65 = (_QWORD *)(v8 + v31);
      if (*((unsigned __int8 *)v65 + v32) != *((unsigned __int8 *)a2 + v32))
        goto LABEL_60;
      if (v61 <= (unint64_t)a2)
      {
        v68 = a2;
      }
      else
      {
        v66 = *a2 ^ *v65;
        if (v66)
        {
          v67 = __clz(__rbit64(v66)) >> 3;
          goto LABEL_58;
        }
        v69 = 0;
        while (1)
        {
          v68 = &v62[v69];
          if ((unint64_t)&v62[v69] >= v61)
            break;
          v70 = *(_QWORD *)(v63 + v64 + v69 * 8);
          ++v69;
          v71 = *v68 ^ v70;
          if (v71)
          {
            v67 = v69 * 8 + (__clz(__rbit64(v71)) >> 3);
            goto LABEL_58;
          }
        }
        v65 = (_QWORD *)(v63 + v64 + v69 * 8);
      }
      if ((unint64_t)v68 < a3 - 3 && *(_DWORD *)v65 == *(_DWORD *)v68)
      {
        v68 = (_QWORD *)((char *)v68 + 4);
        v65 = (_QWORD *)((char *)v65 + 4);
      }
      if ((unint64_t)v68 < a3 - 1 && *(unsigned __int16 *)v65 == *(unsigned __int16 *)v68)
      {
        v68 = (_QWORD *)((char *)v68 + 2);
        v65 = (_QWORD *)((char *)v65 + 2);
      }
      if ((unint64_t)v68 < a3 && *(unsigned __int8 *)v65 == *(unsigned __int8 *)v68)
        v68 = (_QWORD *)((char *)v68 + 1);
      v67 = (char *)v68 - (char *)a2;
LABEL_58:
      if (v67 > v32)
      {
        *a4 = v9 + 2 - v64;
        v32 = v67;
        if ((_QWORD *)((char *)a2 + v67) == (_QWORD *)a3)
        {
          v32 = v67;
          goto LABEL_16;
        }
      }
LABEL_60:
      if (v64 > v15)
      {
        if (--v16)
        {
          v31 = *(_DWORD *)(v5 + 4 * (v64 & v60));
          if (v31 >= v14)
            continue;
        }
      }
      goto LABEL_16;
    }
  }
  v32 = 3;
LABEL_16:
  v33 = 0;
  v34 = *(_QWORD *)(v17 + 8);
  v80 = *(char **)v17;
  v35 = *(_QWORD *)v17 - v34 - v11;
  do
  {
    _X14 = v34 + *(unsigned int *)(v21 + 16 * v20 + v33);
    __asm { PRFM            #0, [X14] }
    v33 += 4;
  }
  while (v33 != 12);
  if (v16 >= 3)
    v38 = 3;
  else
    v38 = v16;
  v39 = *(_QWORD *)(v17 + 112);
  _X10 = v39 + 4 * ((unint64_t)*(unsigned int *)(v21 + ((16 * v20) | 0xC)) >> 8);
  __asm { PRFM            #0, [X10] }
  v42 = v18;
  v75 = v9;
  v76 = *(_DWORD *)(v21 + ((16 * v20) | 0xC));
  v74 = v35;
  v72 = v39;
  v73 = (unint64_t)v76 >> 8;
  v77 = v38;
  if ((_DWORD)v38)
  {
    v78 = v9 + v35 + 2;
    v43 = (unsigned int *)(v21 + 16 * v20);
    do
    {
      v45 = *v43++;
      v44 = v45;
      if (!v45)
        return v32;
      if (*(_DWORD *)(v34 + v44) == v18)
      {
        v46 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v34 + v44 + 4), a3, v80, v81);
        v18 = v42;
        v47 = v46 + 4;
        if (v46 + 4 > v32)
        {
          *a4 = (v78 - v44);
          v32 = v46 + 4;
          if ((_QWORD *)((char *)a2 + v47) == (_QWORD *)a3)
            return v47;
        }
      }
    }
    while (--v38);
  }
  if (v16 - v77 >= v76)
    v48 = v76;
  else
    v48 = v16 - v77;
  if (!(_DWORD)v48)
    return v32;
  v49 = (unsigned int *)(v72 + 4 * v73);
  v50 = v48;
  do
  {
    v51 = *v49++;
    _X10 = v34 + v51;
    __asm { PRFM            #0, [X10] }
    --v50;
  }
  while (v50);
  v54 = (unsigned int *)(v72 + 4 * v73);
  v47 = v32;
  do
  {
    v56 = *v54++;
    v55 = v56;
    v57 = v34 + v56;
    if (*(_DWORD *)v57 == v18)
    {
      v58 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v57 + 4), a3, v80, v81);
      v18 = v42;
      if (v58 + 4 > v47)
      {
        *a4 = v75 + v74 + 2 - v55;
        v47 = v58 + 4;
        if ((_QWORD *)((char *)a2 + v58 + 4) == (_QWORD *)a3)
          break;
      }
    }
    LODWORD(v48) = v48 - 1;
  }
  while ((_DWORD)v48);
  return v47;
}

unint64_t ZSTD_HcFindBestMatch_dedicatedDictSearch_5(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  unsigned int v50;
  int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  _QWORD *v80;

  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_DWORD *)(a1 + 244);
  v7 = 1 << v6;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (_DWORD)a2 - v8;
  v10 = 1 << *(_DWORD *)(a1 + 240);
  v11 = *(unsigned int *)(a1 + 24);
  v12 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v8 - *(_DWORD *)(a1 + 28) > v10 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v8 - v10;
  else
    v14 = *(_DWORD *)(a1 + 28);
  if (v9 >= v7)
    v15 = v9 - v7;
  else
    v15 = 0;
  v16 = 1 << *(_DWORD *)(a1 + 252);
  v17 = *(_QWORD *)(a1 + 232);
  v18 = 0xCF1BBCDCBB000000 * *a2;
  v19 = v18 >> (66 - *(_DWORD *)(v17 + 248));
  v20 = *(_QWORD *)(v17 + 96);
  _X3 = v20 + 16 * v19;
  __asm { PRFM            #0, [X3] }
  v26 = *(_QWORD *)(a1 + 96);
  v27 = 64 - *(_DWORD *)(a1 + 248);
  if (v12 < v9)
  {
    v28 = ~(-1 << v6);
    do
    {
      v29 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v8 + v12)) >> v27;
      *(_DWORD *)(v5 + 4 * (v12 & v28)) = *(_DWORD *)(v26 + 4 * v29);
      *(_DWORD *)(v26 + 4 * v29) = v12++;
    }
    while (v12 < ((_DWORD)a2 - v8));
  }
  v80 = (_QWORD *)(v8 + v11);
  *(_DWORD *)(a1 + 44) = v9;
  v30 = *(_DWORD *)(v26 + 4 * (v18 >> v27));
  if (v30 >= v14)
  {
    v60 = v7 - 1;
    v61 = a3 - 7;
    v62 = a2 + 1;
    v63 = v8 + 8;
    v31 = 3;
    while (1)
    {
      v64 = v30;
      v65 = (_QWORD *)(v8 + v30);
      if (*((unsigned __int8 *)v65 + v31) != *((unsigned __int8 *)a2 + v31))
        goto LABEL_59;
      if (v61 <= (unint64_t)a2)
      {
        v68 = a2;
      }
      else
      {
        v66 = *a2 ^ *v65;
        if (v66)
        {
          v67 = __clz(__rbit64(v66)) >> 3;
          goto LABEL_57;
        }
        v69 = 0;
        while (1)
        {
          v68 = &v62[v69];
          if ((unint64_t)&v62[v69] >= v61)
            break;
          v70 = *(_QWORD *)(v63 + v64 + v69 * 8);
          ++v69;
          v71 = *v68 ^ v70;
          if (v71)
          {
            v67 = v69 * 8 + (__clz(__rbit64(v71)) >> 3);
            goto LABEL_57;
          }
        }
        v65 = (_QWORD *)(v63 + v64 + v69 * 8);
      }
      if ((unint64_t)v68 < a3 - 3 && *(_DWORD *)v65 == *(_DWORD *)v68)
      {
        v68 = (_QWORD *)((char *)v68 + 4);
        v65 = (_QWORD *)((char *)v65 + 4);
      }
      if ((unint64_t)v68 < a3 - 1 && *(unsigned __int16 *)v65 == *(unsigned __int16 *)v68)
      {
        v68 = (_QWORD *)((char *)v68 + 2);
        v65 = (_QWORD *)((char *)v65 + 2);
      }
      if ((unint64_t)v68 < a3 && *(unsigned __int8 *)v65 == *(unsigned __int8 *)v68)
        v68 = (_QWORD *)((char *)v68 + 1);
      v67 = (char *)v68 - (char *)a2;
LABEL_57:
      if (v67 > v31)
      {
        *a4 = v9 + 2 - v64;
        v31 = v67;
        if ((_QWORD *)((char *)a2 + v67) == (_QWORD *)a3)
        {
          v31 = v67;
          goto LABEL_15;
        }
      }
LABEL_59:
      if (v64 > v15)
      {
        if (--v16)
        {
          v30 = *(_DWORD *)(v5 + 4 * (v64 & v60));
          if (v30 >= v14)
            continue;
        }
      }
      goto LABEL_15;
    }
  }
  v31 = 3;
LABEL_15:
  v32 = 0;
  v34 = *(char **)v17;
  v33 = *(_QWORD *)(v17 + 8);
  v35 = *(_QWORD *)v17 - v33 - v11;
  do
  {
    _X14 = v33 + *(unsigned int *)(v20 + 16 * v19 + v32);
    __asm { PRFM            #0, [X14] }
    v32 += 4;
  }
  while (v32 != 12);
  if (v16 >= 3)
    v38 = 3;
  else
    v38 = v16;
  v39 = *(_QWORD *)(v17 + 112);
  _X10 = v39 + 4 * ((unint64_t)*(unsigned int *)(v20 + ((16 * v19) | 0xC)) >> 8);
  __asm { PRFM            #0, [X10] }
  v75 = v9;
  v76 = *(_DWORD *)(v20 + ((16 * v19) | 0xC));
  v74 = v35;
  v72 = v39;
  v73 = (unint64_t)v76 >> 8;
  v77 = v38;
  if ((_DWORD)v38)
  {
    v78 = v9 + v35 + 2;
    v42 = (unsigned int *)(v20 + 16 * v19);
    do
    {
      v44 = *v42++;
      v43 = v44;
      if (!v44)
        return v31;
      if (*(_DWORD *)(v33 + v43) == *(_DWORD *)a2)
      {
        v45 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v33 + v43 + 4), a3, v34, v80);
        v46 = v45 + 4;
        if (v45 + 4 > v31)
        {
          *a4 = (v78 - v43);
          v31 = v45 + 4;
          if ((_QWORD *)((char *)a2 + v46) == (_QWORD *)a3)
            return v46;
        }
      }
    }
    while (--v38);
  }
  if (v16 - v77 >= v76)
    v47 = v76;
  else
    v47 = v16 - v77;
  if (!(_DWORD)v47)
    return v31;
  v48 = (unsigned int *)(v72 + 4 * v73);
  v49 = v47;
  do
  {
    v50 = *v48++;
    _X10 = v33 + v50;
    __asm { PRFM            #0, [X10] }
    --v49;
  }
  while (v49);
  v53 = *(_DWORD *)a2;
  v54 = (unsigned int *)(v72 + 4 * v73);
  v46 = v31;
  do
  {
    v56 = *v54++;
    v55 = v56;
    v57 = v33 + v56;
    if (*(_DWORD *)v57 == v53)
    {
      v58 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v57 + 4), a3, v34, v80);
      if (v58 + 4 > v46)
      {
        *a4 = v75 + v74 + 2 - v55;
        v46 = v58 + 4;
        if ((_QWORD *)((char *)a2 + v58 + 4) == (_QWORD *)a3)
          break;
      }
    }
    LODWORD(v47) = v47 - 1;
  }
  while ((_DWORD)v47);
  return v46;
}

unint64_t ZSTD_HcFindBestMatch_dedicatedDictSearch_6(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  uint64_t v49;
  unsigned int v50;
  int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  int v78;
  _QWORD *v80;

  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_DWORD *)(a1 + 244);
  v7 = 1 << v6;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = (_DWORD)a2 - v8;
  v10 = 1 << *(_DWORD *)(a1 + 240);
  v11 = *(unsigned int *)(a1 + 24);
  v12 = *(unsigned int *)(a1 + 44);
  if ((int)a2 - (int)v8 - *(_DWORD *)(a1 + 28) > v10 && *(_DWORD *)(a1 + 40) == 0)
    v14 = (_DWORD)a2 - v8 - v10;
  else
    v14 = *(_DWORD *)(a1 + 28);
  if (v9 >= v7)
    v15 = v9 - v7;
  else
    v15 = 0;
  v16 = 1 << *(_DWORD *)(a1 + 252);
  v17 = *(_QWORD *)(a1 + 232);
  v18 = 0xCF1BBCDCBF9B0000 * *a2;
  v19 = v18 >> (66 - *(_DWORD *)(v17 + 248));
  v20 = *(_QWORD *)(v17 + 96);
  _X3 = v20 + 16 * v19;
  __asm { PRFM            #0, [X3] }
  v26 = *(_QWORD *)(a1 + 96);
  v27 = 64 - *(_DWORD *)(a1 + 248);
  if (v12 < v9)
  {
    v28 = ~(-1 << v6);
    do
    {
      v29 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v8 + v12)) >> v27;
      *(_DWORD *)(v5 + 4 * (v12 & v28)) = *(_DWORD *)(v26 + 4 * v29);
      *(_DWORD *)(v26 + 4 * v29) = v12++;
    }
    while (v12 < ((_DWORD)a2 - v8));
  }
  v80 = (_QWORD *)(v8 + v11);
  *(_DWORD *)(a1 + 44) = v9;
  v30 = *(_DWORD *)(v26 + 4 * (v18 >> v27));
  if (v30 >= v14)
  {
    v60 = v7 - 1;
    v61 = a3 - 7;
    v62 = a2 + 1;
    v63 = v8 + 8;
    v31 = 3;
    while (1)
    {
      v64 = v30;
      v65 = (_QWORD *)(v8 + v30);
      if (*((unsigned __int8 *)v65 + v31) != *((unsigned __int8 *)a2 + v31))
        goto LABEL_59;
      if (v61 <= (unint64_t)a2)
      {
        v68 = a2;
      }
      else
      {
        v66 = *a2 ^ *v65;
        if (v66)
        {
          v67 = __clz(__rbit64(v66)) >> 3;
          goto LABEL_57;
        }
        v69 = 0;
        while (1)
        {
          v68 = &v62[v69];
          if ((unint64_t)&v62[v69] >= v61)
            break;
          v70 = *(_QWORD *)(v63 + v64 + v69 * 8);
          ++v69;
          v71 = *v68 ^ v70;
          if (v71)
          {
            v67 = v69 * 8 + (__clz(__rbit64(v71)) >> 3);
            goto LABEL_57;
          }
        }
        v65 = (_QWORD *)(v63 + v64 + v69 * 8);
      }
      if ((unint64_t)v68 < a3 - 3 && *(_DWORD *)v65 == *(_DWORD *)v68)
      {
        v68 = (_QWORD *)((char *)v68 + 4);
        v65 = (_QWORD *)((char *)v65 + 4);
      }
      if ((unint64_t)v68 < a3 - 1 && *(unsigned __int16 *)v65 == *(unsigned __int16 *)v68)
      {
        v68 = (_QWORD *)((char *)v68 + 2);
        v65 = (_QWORD *)((char *)v65 + 2);
      }
      if ((unint64_t)v68 < a3 && *(unsigned __int8 *)v65 == *(unsigned __int8 *)v68)
        v68 = (_QWORD *)((char *)v68 + 1);
      v67 = (char *)v68 - (char *)a2;
LABEL_57:
      if (v67 > v31)
      {
        *a4 = v9 + 2 - v64;
        v31 = v67;
        if ((_QWORD *)((char *)a2 + v67) == (_QWORD *)a3)
        {
          v31 = v67;
          goto LABEL_15;
        }
      }
LABEL_59:
      if (v64 > v15)
      {
        if (--v16)
        {
          v30 = *(_DWORD *)(v5 + 4 * (v64 & v60));
          if (v30 >= v14)
            continue;
        }
      }
      goto LABEL_15;
    }
  }
  v31 = 3;
LABEL_15:
  v32 = 0;
  v34 = *(char **)v17;
  v33 = *(_QWORD *)(v17 + 8);
  v35 = *(_QWORD *)v17 - v33 - v11;
  do
  {
    _X14 = v33 + *(unsigned int *)(v20 + 16 * v19 + v32);
    __asm { PRFM            #0, [X14] }
    v32 += 4;
  }
  while (v32 != 12);
  if (v16 >= 3)
    v38 = 3;
  else
    v38 = v16;
  v39 = *(_QWORD *)(v17 + 112);
  _X10 = v39 + 4 * ((unint64_t)*(unsigned int *)(v20 + ((16 * v19) | 0xC)) >> 8);
  __asm { PRFM            #0, [X10] }
  v75 = v9;
  v76 = *(_DWORD *)(v20 + ((16 * v19) | 0xC));
  v74 = v35;
  v72 = v39;
  v73 = (unint64_t)v76 >> 8;
  v77 = v38;
  if ((_DWORD)v38)
  {
    v78 = v9 + v35 + 2;
    v42 = (unsigned int *)(v20 + 16 * v19);
    do
    {
      v44 = *v42++;
      v43 = v44;
      if (!v44)
        return v31;
      if (*(_DWORD *)(v33 + v43) == *(_DWORD *)a2)
      {
        v45 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v33 + v43 + 4), a3, v34, v80);
        v46 = v45 + 4;
        if (v45 + 4 > v31)
        {
          *a4 = (v78 - v43);
          v31 = v45 + 4;
          if ((_QWORD *)((char *)a2 + v46) == (_QWORD *)a3)
            return v46;
        }
      }
    }
    while (--v38);
  }
  if (v16 - v77 >= v76)
    v47 = v76;
  else
    v47 = v16 - v77;
  if (!(_DWORD)v47)
    return v31;
  v48 = (unsigned int *)(v72 + 4 * v73);
  v49 = v47;
  do
  {
    v50 = *v48++;
    _X10 = v33 + v50;
    __asm { PRFM            #0, [X10] }
    --v49;
  }
  while (v49);
  v53 = *(_DWORD *)a2;
  v54 = (unsigned int *)(v72 + 4 * v73);
  v46 = v31;
  do
  {
    v56 = *v54++;
    v55 = v56;
    v57 = v33 + v56;
    if (*(_DWORD *)v57 == v53)
    {
      v58 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v57 + 4), a3, v34, v80);
      if (v58 + 4 > v46)
      {
        *a4 = v75 + v74 + 2 - v55;
        v46 = v58 + 4;
        if ((_QWORD *)((char *)a2 + v58 + 4) == (_QWORD *)a3)
          break;
      }
    }
    LODWORD(v47) = v47 - 1;
  }
  while ((_DWORD)v47);
  return v46;
}

unint64_t ZSTD_BtFindBestMatch_noDict_4(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  ZSTD_updateDUBT(a1, (int)a2, 4);
  return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, 4, 0);
}

uint64_t ZSTD_updateDUBT(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  _DWORD *v14;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(unsigned int *)(result + 44);
  if (v4 < a2 - (int)v3)
  {
    v5 = *(_DWORD *)(result + 248);
    v6 = *(_QWORD *)(result + 96);
    v7 = ~(-1 << (*(_DWORD *)(result + 244) - 1));
    v8 = 64 - v5;
    v9 = 32 - v5;
    v10 = *(_QWORD *)(result + 112);
    do
    {
      switch(a3)
      {
        case 5:
          v11 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v3 + v4);
          goto LABEL_9;
        case 6:
          v11 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v3 + v4);
          goto LABEL_9;
        case 7:
          v11 = 0xCF1BBCDCBFA56300 * *(_QWORD *)(v3 + v4);
          goto LABEL_9;
        case 8:
          v11 = 0xCF1BBCDCB7A56463 * *(_QWORD *)(v3 + v4);
LABEL_9:
          v12 = v11 >> v8;
          break;
        default:
          v12 = (-1640531535 * *(_DWORD *)(v3 + v4)) >> v9;
          break;
      }
      v13 = *(_DWORD *)(v6 + 4 * v12);
      v14 = (_DWORD *)(v10 + 8 * (v4 & v7));
      *(_DWORD *)(v6 + 4 * v12) = v4;
      *v14 = v13;
      v14[1] = 1;
      ++v4;
    }
    while (v4 < (a2 - v3));
  }
  *(_DWORD *)(result + 44) = a2 - v3;
  return result;
}

unint64_t ZSTD_DUBT_findBestMatch(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4, int a5, int a6)
{
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  unsigned int *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  _DWORD *v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  unsigned int v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  _DWORD *v99;
  unsigned int *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unint64_t v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  unsigned int *v129;
  unint64_t v131;
  uint64_t v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  unsigned int v151;
  unint64_t v152;
  uint64_t v153;
  int v154;
  unsigned int v155;
  _QWORD *v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  unsigned int *v166;
  char *v167;
  unint64_t v168;
  unsigned int v169;
  unsigned int *v170;
  _QWORD *v171;
  unint64_t v172;
  unsigned int v173;
  unsigned int v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  _DWORD v178[3];

  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_DWORD *)(a1 + 248);
  v8 = a5 - 5;
  switch(a5)
  {
    case 5:
      v9 = (int)a2;
      v10 = *a2;
      v11 = -1157627904;
      goto LABEL_7;
    case 6:
      v9 = (int)a2;
      v10 = *a2;
      v11 = -1080360960;
      goto LABEL_7;
    case 7:
      v9 = (int)a2;
      v10 = *a2;
      v11 = -1079680256;
      goto LABEL_7;
    case 8:
      v9 = (int)a2;
      v10 = *a2;
      v11 = -1213897629;
LABEL_7:
      v12 = (v10 * (v11 | 0xCF1BBCDC00000000)) >> -(char)v7;
      break;
    default:
      v9 = (int)a2;
      v12 = (-1640531535 * *(_DWORD *)a2) >> -(char)v7;
      break;
  }
  v13 = *(_QWORD *)(a1 + 8);
  v14 = v9 - v13;
  v15 = *(_DWORD *)(a1 + 244);
  v16 = 1 << *(_DWORD *)(a1 + 240);
  v17 = *(_DWORD *)(a1 + 28);
  if (v14 - v17 > v16 && *(_DWORD *)(a1 + 40) == 0)
    v17 = v14 - v16;
  v19 = *(_QWORD *)(a1 + 112);
  v20 = ~(-1 << (v15 - 1));
  v134 = v17;
  v135 = v14;
  v21 = v14 + (-1 << (v15 - 1)) + 1;
  if (v14 < v20)
    v21 = 0;
  v136 = v21;
  if (v21 <= v17)
    v22 = v17;
  else
    v22 = v21;
  v23 = 1 << *(_DWORD *)(a1 + 252);
  v24 = *(_DWORD *)(v6 + 4 * v12);
  v142 = a1;
  v146 = *(_QWORD *)(a1 + 112);
  v147 = *(_QWORD *)(a1 + 8);
  v154 = a6;
  v143 = ~(-1 << (v15 - 1));
  v133 = v8;
  if (v24 > v22)
  {
    v25 = 0;
    v26 = 1 << *(_DWORD *)(a1 + 252);
    while (1)
    {
      v27 = v24;
      v28 = (unsigned int *)(v19 + 8 * (v24 & v20));
      v29 = v28[1];
      v30 = v29 == 1 && v26 >= 2;
      if (!v30)
        break;
      v28[1] = v25;
      --v26;
      v24 = *v28;
      v25 = v27;
      if (v24 <= v22)
        goto LABEL_30;
    }
    if (v29 == 1)
      *(_QWORD *)v28 = 0;
    v27 = v25;
    if (v25)
    {
LABEL_30:
      v131 = v12;
      v132 = v6;
      v140 = v23;
      v139 = v19 + 4;
      v31 = *(_QWORD *)(a1 + 16);
      v144 = v31;
      while (1)
      {
        v32 = v27;
        v33 = *(_DWORD *)(v139 + 8 * (v27 & v20));
        v34 = *(_DWORD *)(a1 + 240);
        v35 = -1 << (*(_BYTE *)(a1 + 244) - 1);
        v36 = *(unsigned int *)(a1 + 24);
        v37 = *(_DWORD *)(a1 + 28);
        v38 = v36 <= v32 ? v13 : v31;
        v161 = (char *)(v31 + v36);
        v39 = v36 <= v32 ? a3 : v31 + v36;
        v40 = (unsigned int *)(v19 + 8 * (v32 & ~v35));
        v41 = v40 + 1;
        v42 = *v40;
        v178[0] = 0;
        v43 = 1 << v34;
        v44 = v32 - v37 <= v43 ? v37 : v32 - v43;
        v158 = v26;
        v155 = v33;
        if (v26)
        {
          if (v42 > v44)
            break;
        }
LABEL_86:
        *v41 = 0;
        *v40 = 0;
        v26 = v158 + 1;
        a1 = v142;
        v20 = v143;
        v27 = v155;
        if (!v155)
        {
          v23 = v140;
          v12 = v131;
          v6 = v132;
          goto LABEL_89;
        }
      }
      v45 = 0;
      v46 = 0;
      v47 = ~v35;
      v48 = v32;
      v49 = v38 + v32;
      v150 = (_QWORD *)(v13 + v36);
      v50 = v39 - 7;
      v51 = v39 - 3;
      v52 = v39 - 1;
      v145 = v49 + 8;
      v169 = v44;
      v151 = v32;
      v152 = v36;
      v148 = v39 - 3;
      v149 = v39 - 7;
      while (1)
      {
        if (v46 >= v45)
          v53 = v45;
        else
          v53 = v46;
        v54 = v13;
        v172 = v46;
        v175 = v45;
        if (a6 != 1)
          goto LABEL_55;
        v55 = v53 + v42;
        if (v36 > v48 || v55 >= v36)
          break;
        v163 = v31 + v42;
        v166 = v41;
        v56 = (_QWORD *)(v49 + v53);
        v57 = v22;
        v58 = v40;
        v59 = v39;
        v60 = v49;
        v61 = v47;
        v62 = ZSTD_count_2segments(v56, (char *)(v163 + v53), v39, v161, v150);
        v47 = v61;
        v49 = v60;
        v39 = v59;
        v48 = v151;
        v36 = v152;
        v40 = v58;
        v51 = v148;
        v50 = v149;
        v22 = v57;
        v31 = v144;
        v19 = v146;
        v13 = v147;
        a6 = v154;
        v63 = v62 + v53;
        v30 = v62 + v53 + v42 >= v152;
        v64 = v163;
        v41 = v166;
        if (v30)
          v64 = v147 + v42;
LABEL_70:
        if (v49 + v63 == v39)
          goto LABEL_86;
        v70 = (unsigned int *)(v19 + 8 * (v42 & v47));
        if (*(unsigned __int8 *)(v64 + v63) >= *(unsigned __int8 *)(v49 + v63))
        {
          *v41 = v42;
          if (v42 <= v22)
          {
            v41 = v178;
            goto LABEL_86;
          }
          v45 = v63;
          v41 = (unsigned int *)(v19 + 8 * (v42 & v47));
          v71 = v169;
          v46 = v172;
        }
        else
        {
          *v40 = v42;
          if (v42 <= v22)
          {
            v40 = v178;
            goto LABEL_86;
          }
          v40 = v70 + 1;
          v46 = v63;
          ++v70;
          v71 = v169;
          v45 = v175;
        }
        if (--v26)
        {
          v42 = *v70;
          if (*v70 > v71)
            continue;
        }
        goto LABEL_86;
      }
      if (v55 >= v36)
        v54 = v13;
      else
        v54 = v31;
LABEL_55:
      v64 = v54 + v42;
      v65 = (char *)(v49 + v53);
      v66 = (_QWORD *)(v64 + v53);
      if (v50 <= v49 + v53)
      {
        v69 = (_DWORD *)(v49 + v53);
      }
      else
      {
        v67 = *(_QWORD *)v65 ^ *v66;
        if (v67)
        {
          v68 = __clz(__rbit64(v67)) >> 3;
LABEL_69:
          v63 = v68 + v53;
          goto LABEL_70;
        }
        v72 = 0;
        v73 = v145 + v53;
        while (1)
        {
          v74 = (_QWORD *)(v73 + v72);
          if (v73 + v72 >= v50)
            break;
          v75 = *(_QWORD *)(v54 + v53 + v42 + 8 + v72);
          v72 += 8;
          v76 = *v74 ^ v75;
          if (v76)
          {
            v68 = v72 + (__clz(__rbit64(v76)) >> 3);
            goto LABEL_69;
          }
        }
        v69 = (_DWORD *)(v145 + v53 + v72);
        v66 = (_QWORD *)(v54 + v72 + v53 + v42 + 8);
      }
      if ((unint64_t)v69 < v51 && *(_DWORD *)v66 == *v69)
      {
        ++v69;
        v66 = (_QWORD *)((char *)v66 + 4);
      }
      if ((unint64_t)v69 < v52 && *(unsigned __int16 *)v66 == *(unsigned __int16 *)v69)
      {
        v69 = (_DWORD *)((char *)v69 + 2);
        v66 = (_QWORD *)((char *)v66 + 2);
      }
      if ((unint64_t)v69 < v39 && *(unsigned __int8 *)v66 == *(unsigned __int8 *)v69)
        v69 = (_DWORD *)((char *)v69 + 1);
      v68 = (char *)v69 - v65;
      goto LABEL_69;
    }
  }
  v31 = *(_QWORD *)(a1 + 16);
LABEL_89:
  v77 = *(unsigned int *)(a1 + 24);
  v78 = (unsigned int *)(v19 + 8 * (v20 & v135));
  v79 = v78 + 1;
  v80 = v135 + 9;
  v177 = 0;
  v81 = *(_DWORD *)(v6 + 4 * v12);
  *(_DWORD *)(v6 + 4 * v12) = v135;
  if (v81 <= v134)
  {
    v176 = 0;
    v85 = a2;
    goto LABEL_137;
  }
  v176 = 0;
  v82 = 0;
  v83 = 0;
  v167 = (char *)(v31 + v77);
  v164 = (_QWORD *)(v13 + v77);
  v84 = a3 - 7;
  v85 = a2;
  v156 = a2 + 1;
  v153 = v13 + 8;
  v86 = v134;
  while (1)
  {
    v141 = v23;
    if (v83 >= v82)
      v87 = v82;
    else
      v87 = v83;
    v88 = (char *)v85 + v87;
    if (a6 != 1 || v87 + v81 >= v77)
    {
      v95 = v13 + v81;
      v96 = (_QWORD *)(v95 + v87);
      if (v84 <= (unint64_t)v88)
      {
        v99 = (_DWORD *)((char *)v85 + v87);
      }
      else
      {
        v97 = *(_QWORD *)v88 ^ *v96;
        if (v97)
        {
          v98 = __clz(__rbit64(v97)) >> 3;
LABEL_114:
          v85 = a2;
          v94 = v98 + v87;
          goto LABEL_115;
        }
        v101 = 0;
        v102 = (char *)v156 + v87;
        while (1)
        {
          v103 = &v102[v101];
          if ((unint64_t)&v102[v101] >= v84)
            break;
          v104 = *(_QWORD *)(v153 + v87 + v81 + v101);
          v101 += 8;
          v105 = *(_QWORD *)v103 ^ v104;
          if (v105)
          {
            v98 = v101 + (__clz(__rbit64(v105)) >> 3);
            goto LABEL_114;
          }
        }
        v99 = (_DWORD *)((char *)v156 + v87 + v101);
        v96 = (_QWORD *)(v153 + v87 + v81 + v101);
      }
      if ((unint64_t)v99 < a3 - 3 && *(_DWORD *)v96 == *v99)
      {
        ++v99;
        v96 = (_QWORD *)((char *)v96 + 4);
      }
      if ((unint64_t)v99 < a3 - 1 && *(unsigned __int16 *)v96 == *(unsigned __int16 *)v99)
      {
        v99 = (_DWORD *)((char *)v99 + 2);
        v96 = (_QWORD *)((char *)v96 + 2);
      }
      if ((unint64_t)v99 < a3 && *(unsigned __int8 *)v96 == *(unsigned __int8 *)v99)
        v99 = (_DWORD *)((char *)v99 + 1);
      v98 = (char *)v99 - v88;
      goto LABEL_114;
    }
    v173 = v80;
    v170 = v78;
    v89 = v31 + v81;
    v90 = v77;
    v91 = v79;
    v92 = v31;
    v93 = ZSTD_count_2segments(v88, (char *)(v89 + v87), a3, v167, v164);
    v31 = v92;
    v79 = v91;
    v77 = v90;
    v19 = v146;
    v13 = v147;
    v86 = v134;
    v94 = v93 + v87;
    v95 = v93 + v87 + v81 >= v90 ? v147 + v81 : v89;
    v78 = v170;
    v80 = v173;
    v20 = v143;
    v85 = a2;
LABEL_115:
    v23 = v141;
    if (v94 <= v176)
    {
      a6 = v154;
      goto LABEL_123;
    }
    if (v94 > v80 - v81)
      v80 = v81 + v94;
    if ((int)((__clz(v135 - v81 + 1) ^ 0x1F) + (__clz(*(_DWORD *)a4 + 1) ^ 0xFFFFFFE0) + 1) < 4
                                                                                             * ((int)v94 - (int)v176))
    {
      *a4 = v135 - v81 + 2;
      v176 = v94;
    }
    a6 = v154;
    if ((uint64_t *)((char *)v85 + v94) == (uint64_t *)a3)
      break;
LABEL_123:
    v100 = (unsigned int *)(v19 + 8 * (v81 & v20));
    if (*(unsigned __int8 *)(v95 + v94) >= *((unsigned __int8 *)v85 + v94))
    {
      *v79 = v81;
      if (v81 <= v136)
      {
        v79 = (unsigned int *)&v177;
        goto LABEL_137;
      }
      v82 = v94;
      v79 = (unsigned int *)(v19 + 8 * (v81 & v20));
    }
    else
    {
      *v78 = v81;
      if (v81 <= v136)
      {
        v78 = (unsigned int *)&v177;
        goto LABEL_137;
      }
      ++v100;
      v83 = v94;
      v78 = v100;
    }
    v23 = v141 - 1;
    if (v141 != 1)
    {
      v81 = *v100;
      if (*v100 > v86)
        continue;
    }
    goto LABEL_137;
  }
  if (v154 == 2)
    v23 = 0;
LABEL_137:
  *v79 = 0;
  *v78 = 0;
  v174 = v80;
  if (a6 == 2 && v23)
  {
    v106 = *(_QWORD *)(v142 + 232);
    v107 = *(_DWORD *)(v106 + 248);
    switch(v133)
    {
      case 0:
        v108 = *v85;
        v109 = -1157627904;
        goto LABEL_149;
      case 1:
        v108 = *v85;
        v109 = -1080360960;
        goto LABEL_149;
      case 2:
        v108 = *v85;
        v109 = -1079680256;
        goto LABEL_149;
      case 3:
        v108 = *v85;
        v109 = -1213897629;
LABEL_149:
        v110 = (v108 * (v109 | 0xCF1BBCDC00000000)) >> -(char)v107;
        break;
      default:
        v110 = (-1640531535 * *(_DWORD *)v85) >> -(char)v107;
        break;
    }
    v111 = *(char **)v106;
    v112 = *(_QWORD *)(v106 + 8);
    v113 = *(_QWORD *)v106 - v112;
    v114 = *(_DWORD *)(v106 + 28);
    v115 = ~(-1 << (*(_DWORD *)(v106 + 244) - 1));
    v116 = v113 - v114 <= v115 ? *(_DWORD *)(v106 + 28) : v113 + (-1 << (*(_DWORD *)(v106 + 244) - 1)) + 1;
    v117 = *(_DWORD *)(*(_QWORD *)(v106 + 96) + 4 * v110);
    if (v117 > v114)
    {
      v159 = *(_DWORD *)(v106 + 28);
      v118 = 0;
      v119 = 0;
      v171 = (_QWORD *)(v13 + *(unsigned int *)(v142 + 24));
      v162 = *(_QWORD *)(v106 + 112);
      v168 = (*(_DWORD *)v106 - v112);
      v157 = (*(_DWORD *)(v142 + 28) - v113);
      v165 = v13 + v157;
      v120 = v23 - 1;
      do
      {
        if (v119 >= v118)
          v121 = v118;
        else
          v121 = v119;
        v122 = v112;
        v123 = v112 + v117;
        v124 = v111;
        v125 = ZSTD_count_2segments((uint64_t *)((char *)v85 + v121), (char *)(v123 + v121), a3, v111, v171);
        v126 = v125 + v121;
        if (v125 + v121 + v117 >= v168)
          v127 = v165 + v117;
        else
          v127 = v123;
        if (v126 <= v176)
        {
          v85 = a2;
          v112 = v122;
          v111 = v124;
        }
        else
        {
          v128 = v135 - (v157 + v117);
          if ((int)((__clz(v128 + 1) ^ 0x1F) + (__clz(*(_DWORD *)a4 + 1) ^ 0xFFFFFFE0) + 1) < 4
                                                                                             * ((int)v126 - (int)v176))
          {
            *a4 = (v128 + 2);
            v176 = v125 + v121;
          }
          v85 = a2;
          v112 = v122;
          v111 = v124;
          if ((uint64_t *)((char *)a2 + v126) == (uint64_t *)a3)
            break;
        }
        v129 = (unsigned int *)(v162 + 8 * (v117 & v115));
        if (*(unsigned __int8 *)(v127 + v126) >= *((unsigned __int8 *)v85 + v126))
        {
          if (v117 <= v116)
            break;
        }
        else
        {
          if (v117 <= v116)
            break;
          ++v129;
          v119 = v125 + v121;
          v126 = v118;
        }
        v30 = v120-- != 0;
        if (!v30)
          break;
        v117 = *v129;
        v118 = v126;
      }
      while (*v129 > v159);
    }
  }
  *(_DWORD *)(v142 + 44) = v174 - 8;
  return v176;
}

unint64_t ZSTD_BtFindBestMatch_noDict_5(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  ZSTD_updateDUBT(a1, (int)a2, 5);
  return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, 5, 0);
}

unint64_t ZSTD_BtFindBestMatch_noDict_6(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  ZSTD_updateDUBT(a1, (int)a2, 6);
  return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, 6, 0);
}

unint64_t ZSTD_BtFindBestMatch_extDict_4(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  ZSTD_updateDUBT(a1, (int)a2, 4);
  return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, 4, 1);
}

unint64_t ZSTD_BtFindBestMatch_extDict_5(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  ZSTD_updateDUBT(a1, (int)a2, 5);
  return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, 5, 1);
}

unint64_t ZSTD_BtFindBestMatch_extDict_6(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  ZSTD_updateDUBT(a1, (int)a2, 6);
  return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, 6, 1);
}

unint64_t ZSTD_BtFindBestMatch_dictMatchState_4(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  ZSTD_updateDUBT(a1, (int)a2, 4);
  return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, 4, 2);
}

unint64_t ZSTD_BtFindBestMatch_dictMatchState_5(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  ZSTD_updateDUBT(a1, (int)a2, 5);
  return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, 5, 2);
}

unint64_t ZSTD_BtFindBestMatch_dictMatchState_6(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  ZSTD_updateDUBT(a1, (int)a2, 6);
  return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, 6, 2);
}

unint64_t ZSTD_BtFindBestMatch_dedicatedDictSearch_4(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  ZSTD_updateDUBT(a1, (int)a2, 4);
  return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, 4, 3);
}

unint64_t ZSTD_BtFindBestMatch_dedicatedDictSearch_5(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  ZSTD_updateDUBT(a1, (int)a2, 5);
  return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, 5, 3);
}

unint64_t ZSTD_BtFindBestMatch_dedicatedDictSearch_6(uint64_t a1, uint64_t *a2, unint64_t a3, _QWORD *a4)
{
  if (*(_QWORD *)(a1 + 8) + (unint64_t)*(unsigned int *)(a1 + 44) > (unint64_t)a2)
    return 0;
  ZSTD_updateDUBT(a1, (int)a2, 6);
  return ZSTD_DUBT_findBestMatch(a1, a2, a3, a4, 6, 3);
}

unint64_t ZSTD_RowFindBestMatch_noDict_4_4(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x16_t *v42;
  __int8 v43;
  int16x8_t v44;
  uint64x2_t v45;
  uint64x2_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t result;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  _OWORD v94[16];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 96);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v6;
  v8 = a1 + 64;
  v9 = *(_DWORD *)(a1 + 52);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (_DWORD)a2 - v10;
  v12 = 1 << *(_DWORD *)(a1 + 240);
  v13 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v10 - *(_DWORD *)(a1 + 28) > v12 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v15 = (_DWORD)a2 - v10 - v12;
  else
    v15 = *(_DWORD *)(a1 + 28);
  v16 = *(_DWORD *)(a1 + 252);
  if (v16 >= 4)
    LOBYTE(v16) = 4;
  if (v11 - v13 >= 0x181)
  {
    if (v13 <= 0xFFFFFF9F)
    {
      v71 = v13 + 96;
      do
      {
        v72 = (-1640531535 * *(_DWORD *)(v10 + 8 + v13)) >> (24 - v9);
        v73 = (v72 >> 4) & 0xFFFFFF0;
        _X21 = v4 + 4 * v73;
        __asm { PRFM            #0, [X21] }
        _X20 = v6 + 2 * v73;
        __asm { PRFM            #0, [X20] }
        v78 = *(unsigned int *)(v8 + 4 * (v13 & 7));
        *(_DWORD *)(v8 + 4 * (v13 & 7)) = v72;
        v79 = (v78 >> 4) & 0xFFFFFF0;
        v80 = v4 + 4 * v79;
        v81 = (_BYTE *)(v6 + 2 * v79);
        v82 = (*v81 - 1) & 0xF;
        *v81 = v82;
        v81[v82 + 16] = v78;
        *(_DWORD *)(v80 + 4 * v82) = v13++;
      }
      while (v13 < v71);
      v5 = *(_QWORD *)(a1 + 96);
      v7 = *(_QWORD *)(a1 + 56);
    }
    v83 = v11 - 32;
    LODWORD(v13) = v11 - 32;
    v84 = (_DWORD)a2 + 1 - (v10 + v83);
    if ((v84 + 1) < 8)
      v85 = v84 + 1;
    else
      v85 = 8;
    if ((unint64_t)a2 + 1 >= v10 + v83)
      v86 = v85;
    else
      v86 = 0;
    if (v83 < v86 + (int)v83)
    {
      v87 = 24 - *(_DWORD *)(a1 + 52);
      do
      {
        v88 = (-1640531535 * *(_DWORD *)(v10 + v83)) >> v87;
        v89 = (v88 >> 4) & 0xFFFFFF0;
        _X23 = v5 + 4 * v89;
        __asm { PRFM            #0, [X23] }
        _X22 = v7 + 2 * v89;
        __asm { PRFM            #0, [X22] }
        *(_DWORD *)(a1 + 4 * (v83++ & 7) + 64) = v88;
        --v86;
      }
      while (v86);
    }
  }
  if (v13 < v11)
  {
    v17 = *(_QWORD *)(a1 + 8) + 8;
    v18 = 24 - *(_DWORD *)(a1 + 52);
    v13 = v13;
    do
    {
      v19 = (-1640531535 * *(_DWORD *)(v17 + v13)) >> v18;
      v20 = (v19 >> 4) & 0xFFFFFF0;
      _X23 = v5 + 4 * v20;
      __asm { PRFM            #0, [X23] }
      _X22 = v7 + 2 * v20;
      __asm { PRFM            #0, [X22] }
      v28 = *(unsigned int *)(v8 + 4 * (v13 & 7));
      *(_DWORD *)(v8 + 4 * (v13 & 7)) = v19;
      v29 = (v28 >> 4) & 0xFFFFFF0;
      v30 = v5 + 4 * v29;
      v31 = (_BYTE *)(v7 + 2 * v29);
      v32 = (*v31 - 1) & 0xF;
      *v31 = v32;
      v31[v32 + 16] = v28;
      *(_DWORD *)(v30 + 4 * v32) = v13++;
    }
    while (v13 < ((_DWORD)a2 - v10));
  }
  *(_DWORD *)(a1 + 44) = v11;
  v33 = (-1640531535 * *(_DWORD *)(v10 + v11 + 8)) >> (24 - v9);
  v34 = (v33 >> 4) & 0xFFFFFF0;
  _X4 = v4 + 4 * v34;
  __asm { PRFM            #0, [X4] }
  _X16 = v6 + 2 * v34;
  __asm { PRFM            #0, [X16] }
  v39 = *(unsigned int *)(v8 + 4 * (v11 & 7));
  *(_DWORD *)(v8 + 4 * (v11 & 7)) = v33;
  v40 = (v39 >> 4) & 0xFFFFFF0;
  v41 = v4 + 4 * v40;
  v42 = (int8x16_t *)(v6 + 2 * v40);
  v43 = v42->i8[0];
  memset(v94, 0, sizeof(v94));
  v44 = vshlq_n_s16((int16x8_t)vceqq_s8(v42[1], vdupq_n_s8(v39)), 7uLL);
  v45 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v44, v44, 0xEuLL), 0xEuLL);
  v46 = vsraq_n_u64(v45, v45, 0x1CuLL);
  if (v46.u8[0] | (unsigned __int16)(v46.u8[8] << 8))
  {
    v47 = 0;
    v48 = 1 << v16;
    v49 = ((unsigned __int16)(v46.u8[0] | (v46.u8[8] << 8)) >> (v43 & 0xF)) | (unsigned __int16)((v46.u8[0] | (v46.u8[8] << 8)) << (-v43 & 0xF));
    v50 = v48 - 1;
    while (1)
    {
      v51 = *(unsigned int *)(v41 + 4 * ((__clz(__rbit64(v49)) + v43) & 0xF));
      if (v51 < v15)
        break;
      _X11 = v10 + v51;
      __asm { PRFM            #0, [X11] }
      v54 = v47 + 1;
      *((_DWORD *)v94 + v47) = v51;
      v49 &= v49 - 1;
      if (v49)
      {
        _ZF = v50 == (_DWORD)v47++;
        if (!_ZF)
          continue;
      }
      goto LABEL_22;
    }
    v54 = v47;
  }
  else
  {
    v54 = 0;
  }
LABEL_22:
  v55 = (v43 - 1) & 0xF;
  v42->i8[0] = v55;
  v42[1].i8[v55] = v39;
  v56 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v56 + 1;
  *(_DWORD *)(v41 + 4 * v55) = v56;
  if (v54)
  {
    v57 = 0;
    v58 = (unint64_t)a3 - 7;
    v59 = v11 + 2;
    v60 = a2 + 1;
    v61 = v10 + 8;
    v62 = 3;
    while (1)
    {
      v63 = *((unsigned int *)v94 + v57);
      v64 = (_QWORD *)(v10 + v63);
      if (*(unsigned __int8 *)(v10 + v63 + v62) != *((unsigned __int8 *)a2 + v62))
        goto LABEL_41;
      if (v58 <= (unint64_t)a2)
      {
        v67 = a2;
      }
      else
      {
        v65 = *a2 ^ *v64;
        if (v65)
        {
          result = __clz(__rbit64(v65)) >> 3;
          goto LABEL_39;
        }
        v68 = 0;
        while (1)
        {
          v67 = &v60[v68];
          if ((unint64_t)&v60[v68] >= v58)
            break;
          v69 = *(_QWORD *)(v61 + v63 + v68 * 8);
          ++v68;
          v70 = *v67 ^ v69;
          if (v70)
          {
            result = v68 * 8 + (__clz(__rbit64(v70)) >> 3);
            goto LABEL_39;
          }
        }
        v64 = (_QWORD *)(v61 + v63 + v68 * 8);
      }
      if (v67 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v64 == *(_DWORD *)v67)
      {
        v67 = (_QWORD *)((char *)v67 + 4);
        v64 = (_QWORD *)((char *)v64 + 4);
      }
      if (v67 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v64 == *(unsigned __int16 *)v67)
      {
        v67 = (_QWORD *)((char *)v67 + 2);
        v64 = (_QWORD *)((char *)v64 + 2);
      }
      if (v67 < a3 && *(unsigned __int8 *)v64 == *(unsigned __int8 *)v67)
        v67 = (_QWORD *)((char *)v67 + 1);
      result = (char *)v67 - (char *)a2;
LABEL_39:
      if (result > v62)
      {
        *a4 = v59 - v63;
        v62 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_41:
      ++v57;
      result = v62;
      if (v57 == v54)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_noDict_4_5(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  const __int16 *v46;
  int8x16_t v47;
  unsigned __int32 v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t result;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  _OWORD v98[16];
  uint64_t v99;
  int16x8x2_t v100;

  v99 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 96);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v6;
  v8 = a1 + 64;
  v9 = *(_DWORD *)(a1 + 52);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (_DWORD)a2 - v10;
  v12 = 1 << *(_DWORD *)(a1 + 240);
  v13 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v10 - *(_DWORD *)(a1 + 28) > v12 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v15 = (_DWORD)a2 - v10 - v12;
  else
    v15 = *(_DWORD *)(a1 + 28);
  v16 = *(_DWORD *)(a1 + 252);
  if (v16 >= 5)
    LOBYTE(v16) = 5;
  if (v11 - v13 >= 0x181)
  {
    if (v13 <= 0xFFFFFF9F)
    {
      v73 = v13 + 96;
      do
      {
        v74 = (-1640531535 * *(_DWORD *)(v10 + 8 + v13)) >> (24 - v9);
        v75 = (v74 >> 3) & 0x1FFFFFE0;
        _X21 = v4 + 4 * v75;
        __asm
        {
          PRFM            #0, [X21]
          PRFM            #0, [X21,#0x40]
        }
        _X20 = v6 + 2 * v75;
        __asm { PRFM            #0, [X20] }
        v81 = *(unsigned int *)(v8 + 4 * (v13 & 7));
        *(_DWORD *)(v8 + 4 * (v13 & 7)) = v74;
        v82 = (v81 >> 3) & 0x1FFFFFE0;
        v83 = v4 + 4 * v82;
        v84 = (_BYTE *)(v6 + 2 * v82);
        v85 = (*v84 - 1) & 0x1F;
        *v84 = v85;
        v84[v85 + 16] = v81;
        *(_DWORD *)(v83 + 4 * v85) = v13++;
      }
      while (v13 < v73);
      v5 = *(_QWORD *)(a1 + 96);
      v7 = *(_QWORD *)(a1 + 56);
    }
    v86 = v11 - 32;
    LODWORD(v13) = v11 - 32;
    v87 = (_DWORD)a2 + 1 - (v10 + v86);
    if ((v87 + 1) < 8)
      v88 = v87 + 1;
    else
      v88 = 8;
    if ((unint64_t)a2 + 1 >= v10 + v86)
      v89 = v88;
    else
      v89 = 0;
    if (v86 < v89 + (int)v86)
    {
      v90 = 24 - *(_DWORD *)(a1 + 52);
      do
      {
        v91 = (-1640531535 * *(_DWORD *)(v10 + v86)) >> v90;
        v92 = (v91 >> 3) & 0x1FFFFFE0;
        _X23 = v5 + 4 * v92;
        __asm
        {
          PRFM            #0, [X23]
          PRFM            #0, [X23,#0x40]
        }
        _X22 = v7 + 2 * v92;
        __asm { PRFM            #0, [X22] }
        *(_DWORD *)(a1 + 4 * (v86++ & 7) + 64) = v91;
        --v89;
      }
      while (v89);
    }
  }
  if (v13 < v11)
  {
    v17 = *(_QWORD *)(a1 + 8) + 8;
    v18 = 24 - *(_DWORD *)(a1 + 52);
    v13 = v13;
    do
    {
      v19 = (-1640531535 * *(_DWORD *)(v17 + v13)) >> v18;
      v20 = (v19 >> 3) & 0x1FFFFFE0;
      _X23 = v5 + 4 * v20;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X23,#0x40]
      }
      _X22 = v7 + 2 * v20;
      __asm { PRFM            #0, [X22] }
      v29 = *(unsigned int *)(v8 + 4 * (v13 & 7));
      *(_DWORD *)(v8 + 4 * (v13 & 7)) = v19;
      v30 = (v29 >> 3) & 0x1FFFFFE0;
      v31 = v5 + 4 * v30;
      v32 = (_BYTE *)(v7 + 2 * v30);
      v33 = (*v32 - 1) & 0x1F;
      *v32 = v33;
      v32[v33 + 16] = v29;
      *(_DWORD *)(v31 + 4 * v33) = v13++;
    }
    while (v13 < ((_DWORD)a2 - v10));
  }
  *(_DWORD *)(a1 + 44) = v11;
  v34 = (-1640531535 * *(_DWORD *)(v10 + v11 + 8)) >> (24 - v9);
  v35 = (v34 >> 3) & 0x1FFFFFE0;
  _X4 = v4 + 4 * v35;
  __asm
  {
    PRFM            #0, [X4]
    PRFM            #0, [X4,#0x40]
  }
  _X16 = v6 + 2 * v35;
  __asm { PRFM            #0, [X16] }
  v41 = *(unsigned int *)(v8 + 4 * (v11 & 7));
  *(_DWORD *)(v8 + 4 * (v11 & 7)) = v34;
  v42 = (v41 >> 3) & 0x1FFFFFE0;
  v43 = v4 + 4 * v42;
  v44 = (char *)(v6 + 2 * v42);
  v46 = (const __int16 *)(v44 + 16);
  v45 = *v44;
  v100 = vld2q_s16(v46);
  memset(v98, 0, sizeof(v98));
  v47 = vdupq_n_s8(v41);
  *(int8x8_t *)v100.val[0].i8 = vqmovn_s16((int16x8_t)vceqq_s8(v47, (int8x16_t)v100.val[0]));
  *(int8x8_t *)v47.i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v47, (int8x16_t)v100.val[1])), *(int8x8_t *)v100.val[0].i8, 2uLL);
  v48 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v100.val[0].i8), vuzp1_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v100.val[0].i8), 4uLL).u32[0];
  if (v48)
  {
    v49 = 0;
    v50 = 1 << v16;
    v51 = __ROR4__(v48, v45);
    v52 = v50 - 1;
    while (1)
    {
      v53 = *(unsigned int *)(v43 + 4 * ((__clz(__rbit64(v51)) + v45) & 0x1F));
      if (v53 < v15)
        break;
      _X11 = v10 + v53;
      __asm { PRFM            #0, [X11] }
      v56 = v49 + 1;
      *((_DWORD *)v98 + v49) = v53;
      v51 &= v51 - 1;
      if (v51)
      {
        _ZF = v52 == (_DWORD)v49++;
        if (!_ZF)
          continue;
      }
      goto LABEL_22;
    }
    v56 = v49;
  }
  else
  {
    v56 = 0;
  }
LABEL_22:
  v57 = (v45 - 1) & 0x1F;
  *v44 = v57;
  v44[v57 + 16] = v41;
  v58 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v58 + 1;
  *(_DWORD *)(v43 + 4 * v57) = v58;
  if (v56)
  {
    v59 = 0;
    v60 = (unint64_t)a3 - 7;
    v61 = v11 + 2;
    v62 = a2 + 1;
    v63 = v10 + 8;
    v64 = 3;
    while (1)
    {
      v65 = *((unsigned int *)v98 + v59);
      v66 = (_QWORD *)(v10 + v65);
      if (*(unsigned __int8 *)(v10 + v65 + v64) != *((unsigned __int8 *)a2 + v64))
        goto LABEL_41;
      if (v60 <= (unint64_t)a2)
      {
        v69 = a2;
      }
      else
      {
        v67 = *a2 ^ *v66;
        if (v67)
        {
          result = __clz(__rbit64(v67)) >> 3;
          goto LABEL_39;
        }
        v70 = 0;
        while (1)
        {
          v69 = &v62[v70];
          if ((unint64_t)&v62[v70] >= v60)
            break;
          v71 = *(_QWORD *)(v63 + v65 + v70 * 8);
          ++v70;
          v72 = *v69 ^ v71;
          if (v72)
          {
            result = v70 * 8 + (__clz(__rbit64(v72)) >> 3);
            goto LABEL_39;
          }
        }
        v66 = (_QWORD *)(v63 + v65 + v70 * 8);
      }
      if (v69 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v66 == *(_DWORD *)v69)
      {
        v69 = (_QWORD *)((char *)v69 + 4);
        v66 = (_QWORD *)((char *)v66 + 4);
      }
      if (v69 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v66 == *(unsigned __int16 *)v69)
      {
        v69 = (_QWORD *)((char *)v69 + 2);
        v66 = (_QWORD *)((char *)v66 + 2);
      }
      if (v69 < a3 && *(unsigned __int8 *)v66 == *(unsigned __int8 *)v69)
        v69 = (_QWORD *)((char *)v69 + 1);
      result = (char *)v69 - (char *)a2;
LABEL_39:
      if (result > v64)
      {
        *a4 = v61 - v65;
        v64 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_41:
      ++v59;
      result = v64;
      if (v59 == v56)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_noDict_4_6(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  const char *v46;
  char v47;
  uint64_t v48;
  int8x16_t v49;
  int8x8_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t result;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  _OWORD v102[16];
  uint64_t v103;
  int8x16x4_t v104;

  v103 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 96);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v6;
  v8 = a1 + 64;
  v9 = *(_DWORD *)(a1 + 52);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (_DWORD)a2 - v10;
  v12 = 1 << *(_DWORD *)(a1 + 240);
  v13 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v10 - *(_DWORD *)(a1 + 28) > v12 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v15 = (_DWORD)a2 - v10 - v12;
  else
    v15 = *(_DWORD *)(a1 + 28);
  v16 = *(_DWORD *)(a1 + 252);
  if (v16 >= 6)
    LOBYTE(v16) = 6;
  if (v11 - v13 >= 0x181)
  {
    if (v13 <= 0xFFFFFF9F)
    {
      v75 = v13 + 96;
      do
      {
        v76 = (-1640531535 * *(_DWORD *)(v10 + 8 + v13)) >> (24 - v9);
        v77 = (v76 >> 2) & 0x3FFFFFC0;
        _X21 = v4 + 4 * v77;
        __asm
        {
          PRFM            #0, [X21]
          PRFM            #0, [X21,#0x40]
        }
        _X20 = v6 + 2 * v77;
        __asm
        {
          PRFM            #0, [X20]
          PRFM            #0, [X20,#0x40]
        }
        v84 = *(unsigned int *)(v8 + 4 * (v13 & 7));
        *(_DWORD *)(v8 + 4 * (v13 & 7)) = v76;
        v85 = (v84 >> 2) & 0x3FFFFFC0;
        v86 = v4 + 4 * v85;
        v87 = (_BYTE *)(v6 + 2 * v85);
        v88 = (*v87 - 1) & 0x3F;
        *v87 = v88;
        v87[v88 + 16] = v84;
        *(_DWORD *)(v86 + 4 * v88) = v13++;
      }
      while (v13 < v75);
      v5 = *(_QWORD *)(a1 + 96);
      v7 = *(_QWORD *)(a1 + 56);
    }
    v89 = v11 - 32;
    LODWORD(v13) = v11 - 32;
    v90 = (_DWORD)a2 + 1 - (v10 + v89);
    if ((v90 + 1) < 8)
      v91 = v90 + 1;
    else
      v91 = 8;
    if ((unint64_t)a2 + 1 >= v10 + v89)
      v92 = v91;
    else
      v92 = 0;
    if (v89 < v92 + (int)v89)
    {
      v93 = 24 - *(_DWORD *)(a1 + 52);
      do
      {
        v94 = (-1640531535 * *(_DWORD *)(v10 + v89)) >> v93;
        v95 = (v94 >> 2) & 0x3FFFFFC0;
        _X23 = v5 + 4 * v95;
        __asm
        {
          PRFM            #0, [X23]
          PRFM            #0, [X23,#0x40]
        }
        _X22 = v7 + 2 * v95;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        *(_DWORD *)(a1 + 4 * (v89++ & 7) + 64) = v94;
        --v92;
      }
      while (v92);
    }
  }
  if (v13 < v11)
  {
    v17 = *(_QWORD *)(a1 + 8) + 8;
    v18 = 24 - *(_DWORD *)(a1 + 52);
    v13 = v13;
    do
    {
      v19 = (-1640531535 * *(_DWORD *)(v17 + v13)) >> v18;
      v20 = (v19 >> 2) & 0x3FFFFFC0;
      _X23 = v5 + 4 * v20;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X23,#0x40]
      }
      _X22 = v7 + 2 * v20;
      __asm
      {
        PRFM            #0, [X22]
        PRFM            #0, [X22,#0x40]
      }
      v30 = *(unsigned int *)(v8 + 4 * (v13 & 7));
      *(_DWORD *)(v8 + 4 * (v13 & 7)) = v19;
      v31 = (v30 >> 2) & 0x3FFFFFC0;
      v32 = v5 + 4 * v31;
      v33 = (_BYTE *)(v7 + 2 * v31);
      v34 = (*v33 - 1) & 0x3F;
      *v33 = v34;
      v33[v34 + 16] = v30;
      *(_DWORD *)(v32 + 4 * v34) = v13++;
    }
    while (v13 < ((_DWORD)a2 - v10));
  }
  *(_DWORD *)(a1 + 44) = v11;
  v35 = (-1640531535 * *(_DWORD *)(v10 + v11 + 8)) >> (24 - v9);
  v36 = (v35 >> 2) & 0x3FFFFFC0;
  _X4 = v4 + 4 * v36;
  __asm
  {
    PRFM            #0, [X4]
    PRFM            #0, [X4,#0x40]
  }
  _X16 = v6 + 2 * v36;
  __asm
  {
    PRFM            #0, [X16]
    PRFM            #0, [X16,#0x40]
  }
  v43 = *(unsigned int *)(v8 + 4 * (v11 & 7));
  *(_DWORD *)(v8 + 4 * (v11 & 7)) = v35;
  v44 = (v43 >> 2) & 0x3FFFFFC0;
  v45 = (char *)(v6 + 2 * v44);
  v46 = v45 + 16;
  v47 = *v45;
  v48 = v4 + 4 * v44;
  memset(v102, 0, sizeof(v102));
  v104 = vld4q_s8(v46);
  v49 = vdupq_n_s8(v43);
  v104.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v104.val[3], v49), vceqq_s8(v104.val[2], v49), 1uLL), vsriq_n_s8(vceqq_s8(v104.val[1], v49), vceqq_s8(v104.val[0], v49), 1uLL), 2uLL);
  v50 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v104.val[0], v104.val[0], 4uLL), 4uLL);
  if (v50)
  {
    v51 = 0;
    v52 = 1 << v16;
    v53 = __ROR8__(*(_QWORD *)&v50, v47);
    v54 = v52 - 1;
    while (1)
    {
      v55 = *(unsigned int *)(v48 + 4 * ((__clz(__rbit64(v53)) + v47) & 0x3F));
      if (v55 < v15)
        break;
      _X11 = v10 + v55;
      __asm { PRFM            #0, [X11] }
      v58 = v51 + 1;
      *((_DWORD *)v102 + v51) = v55;
      v53 &= v53 - 1;
      if (v53)
      {
        _ZF = v54 == (_DWORD)v51++;
        if (!_ZF)
          continue;
      }
      goto LABEL_22;
    }
    v58 = v51;
  }
  else
  {
    v58 = 0;
  }
LABEL_22:
  v59 = (v47 - 1) & 0x3F;
  *v45 = v59;
  v45[v59 + 16] = v43;
  v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v48 + 4 * v59) = v60;
  if (v58)
  {
    v61 = 0;
    v62 = (unint64_t)a3 - 7;
    v63 = v11 + 2;
    v64 = a2 + 1;
    v65 = v10 + 8;
    v66 = 3;
    while (1)
    {
      v67 = *((unsigned int *)v102 + v61);
      v68 = (_QWORD *)(v10 + v67);
      if (*(unsigned __int8 *)(v10 + v67 + v66) != *((unsigned __int8 *)a2 + v66))
        goto LABEL_41;
      if (v62 <= (unint64_t)a2)
      {
        v71 = a2;
      }
      else
      {
        v69 = *a2 ^ *v68;
        if (v69)
        {
          result = __clz(__rbit64(v69)) >> 3;
          goto LABEL_39;
        }
        v72 = 0;
        while (1)
        {
          v71 = &v64[v72];
          if ((unint64_t)&v64[v72] >= v62)
            break;
          v73 = *(_QWORD *)(v65 + v67 + v72 * 8);
          ++v72;
          v74 = *v71 ^ v73;
          if (v74)
          {
            result = v72 * 8 + (__clz(__rbit64(v74)) >> 3);
            goto LABEL_39;
          }
        }
        v68 = (_QWORD *)(v65 + v67 + v72 * 8);
      }
      if (v71 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v68 == *(_DWORD *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 4);
        v68 = (_QWORD *)((char *)v68 + 4);
      }
      if (v71 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v68 == *(unsigned __int16 *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 2);
        v68 = (_QWORD *)((char *)v68 + 2);
      }
      if (v71 < a3 && *(unsigned __int8 *)v68 == *(unsigned __int8 *)v71)
        v71 = (_QWORD *)((char *)v71 + 1);
      result = (char *)v71 - (char *)a2;
LABEL_39:
      if (result > v66)
      {
        *a4 = v63 - v67;
        v66 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_41:
      ++v61;
      result = v66;
      if (v61 == v58)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_noDict_5_4(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x16_t *v42;
  __int8 v43;
  int16x8_t v44;
  uint64x2_t v45;
  uint64x2_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t result;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  _OWORD v94[16];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 96);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v6;
  v8 = a1 + 64;
  v9 = *(_DWORD *)(a1 + 52);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (_DWORD)a2 - v10;
  v12 = 1 << *(_DWORD *)(a1 + 240);
  v13 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v10 - *(_DWORD *)(a1 + 28) > v12 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v15 = (_DWORD)a2 - v10 - v12;
  else
    v15 = *(_DWORD *)(a1 + 28);
  v16 = *(_DWORD *)(a1 + 252);
  if (v16 >= 4)
    LOBYTE(v16) = 4;
  if (v11 - v13 >= 0x181)
  {
    if (v13 <= 0xFFFFFF9F)
    {
      v71 = v13 + 96;
      do
      {
        v72 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v10 + 8 + v13)) >> (56 - v9);
        v73 = (v72 >> 4) & 0xFFFFFF0;
        _X21 = v4 + 4 * v73;
        __asm { PRFM            #0, [X21] }
        _X20 = v6 + 2 * v73;
        __asm { PRFM            #0, [X20] }
        v78 = *(unsigned int *)(v8 + 4 * (v13 & 7));
        *(_DWORD *)(v8 + 4 * (v13 & 7)) = v72;
        v79 = (v78 >> 4) & 0xFFFFFF0;
        v80 = v4 + 4 * v79;
        v81 = (_BYTE *)(v6 + 2 * v79);
        v82 = (*v81 - 1) & 0xF;
        *v81 = v82;
        v81[v82 + 16] = v78;
        *(_DWORD *)(v80 + 4 * v82) = v13++;
      }
      while (v13 < v71);
      v5 = *(_QWORD *)(a1 + 96);
      v7 = *(_QWORD *)(a1 + 56);
    }
    v83 = v11 - 32;
    LODWORD(v13) = v11 - 32;
    v84 = (_DWORD)a2 + 1 - (v10 + v83);
    if ((v84 + 1) < 8)
      v85 = v84 + 1;
    else
      v85 = 8;
    if ((unint64_t)a2 + 1 >= v10 + v83)
      v86 = v85;
    else
      v86 = 0;
    if (v83 < v86 + (int)v83)
    {
      v87 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v88 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v10 + v83)) >> v87;
        v89 = (v88 >> 4) & 0xFFFFFF0;
        _X23 = v5 + 4 * v89;
        __asm { PRFM            #0, [X23] }
        _X22 = v7 + 2 * v89;
        __asm { PRFM            #0, [X22] }
        *(_DWORD *)(a1 + 4 * (v83++ & 7) + 64) = v88;
        --v86;
      }
      while (v86);
    }
  }
  if (v13 < v11)
  {
    v17 = *(_QWORD *)(a1 + 8) + 8;
    v18 = 56 - *(_DWORD *)(a1 + 52);
    v13 = v13;
    do
    {
      v19 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v17 + v13)) >> v18;
      v20 = (v19 >> 4) & 0xFFFFFF0;
      _X23 = v5 + 4 * v20;
      __asm { PRFM            #0, [X23] }
      _X22 = v7 + 2 * v20;
      __asm { PRFM            #0, [X22] }
      v28 = *(unsigned int *)(v8 + 4 * (v13 & 7));
      *(_DWORD *)(v8 + 4 * (v13 & 7)) = v19;
      v29 = (v28 >> 4) & 0xFFFFFF0;
      v30 = v5 + 4 * v29;
      v31 = (_BYTE *)(v7 + 2 * v29);
      v32 = (*v31 - 1) & 0xF;
      *v31 = v32;
      v31[v32 + 16] = v28;
      *(_DWORD *)(v30 + 4 * v32) = v13++;
    }
    while (v13 < ((_DWORD)a2 - v10));
  }
  *(_DWORD *)(a1 + 44) = v11;
  v33 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v10 + v11 + 8)) >> (56 - v9);
  v34 = (v33 >> 4) & 0xFFFFFF0;
  _X4 = v4 + 4 * v34;
  __asm { PRFM            #0, [X4] }
  _X16 = v6 + 2 * v34;
  __asm { PRFM            #0, [X16] }
  v39 = *(unsigned int *)(v8 + 4 * (v11 & 7));
  *(_DWORD *)(v8 + 4 * (v11 & 7)) = v33;
  v40 = (v39 >> 4) & 0xFFFFFF0;
  v41 = v4 + 4 * v40;
  v42 = (int8x16_t *)(v6 + 2 * v40);
  v43 = v42->i8[0];
  memset(v94, 0, sizeof(v94));
  v44 = vshlq_n_s16((int16x8_t)vceqq_s8(v42[1], vdupq_n_s8(v39)), 7uLL);
  v45 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v44, v44, 0xEuLL), 0xEuLL);
  v46 = vsraq_n_u64(v45, v45, 0x1CuLL);
  if (v46.u8[0] | (unsigned __int16)(v46.u8[8] << 8))
  {
    v47 = 0;
    v48 = 1 << v16;
    v49 = ((unsigned __int16)(v46.u8[0] | (v46.u8[8] << 8)) >> (v43 & 0xF)) | (unsigned __int16)((v46.u8[0] | (v46.u8[8] << 8)) << (-v43 & 0xF));
    v50 = v48 - 1;
    while (1)
    {
      v51 = *(unsigned int *)(v41 + 4 * ((__clz(__rbit64(v49)) + v43) & 0xF));
      if (v51 < v15)
        break;
      _X11 = v10 + v51;
      __asm { PRFM            #0, [X11] }
      v54 = v47 + 1;
      *((_DWORD *)v94 + v47) = v51;
      v49 &= v49 - 1;
      if (v49)
      {
        _ZF = v50 == (_DWORD)v47++;
        if (!_ZF)
          continue;
      }
      goto LABEL_22;
    }
    v54 = v47;
  }
  else
  {
    v54 = 0;
  }
LABEL_22:
  v55 = (v43 - 1) & 0xF;
  v42->i8[0] = v55;
  v42[1].i8[v55] = v39;
  v56 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v56 + 1;
  *(_DWORD *)(v41 + 4 * v55) = v56;
  if (v54)
  {
    v57 = 0;
    v58 = (unint64_t)a3 - 7;
    v59 = v11 + 2;
    v60 = a2 + 1;
    v61 = v10 + 8;
    v62 = 3;
    while (1)
    {
      v63 = *((unsigned int *)v94 + v57);
      v64 = (_QWORD *)(v10 + v63);
      if (*(unsigned __int8 *)(v10 + v63 + v62) != *((unsigned __int8 *)a2 + v62))
        goto LABEL_41;
      if (v58 <= (unint64_t)a2)
      {
        v67 = a2;
      }
      else
      {
        v65 = *a2 ^ *v64;
        if (v65)
        {
          result = __clz(__rbit64(v65)) >> 3;
          goto LABEL_39;
        }
        v68 = 0;
        while (1)
        {
          v67 = &v60[v68];
          if ((unint64_t)&v60[v68] >= v58)
            break;
          v69 = *(_QWORD *)(v61 + v63 + v68 * 8);
          ++v68;
          v70 = *v67 ^ v69;
          if (v70)
          {
            result = v68 * 8 + (__clz(__rbit64(v70)) >> 3);
            goto LABEL_39;
          }
        }
        v64 = (_QWORD *)(v61 + v63 + v68 * 8);
      }
      if (v67 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v64 == *(_DWORD *)v67)
      {
        v67 = (_QWORD *)((char *)v67 + 4);
        v64 = (_QWORD *)((char *)v64 + 4);
      }
      if (v67 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v64 == *(unsigned __int16 *)v67)
      {
        v67 = (_QWORD *)((char *)v67 + 2);
        v64 = (_QWORD *)((char *)v64 + 2);
      }
      if (v67 < a3 && *(unsigned __int8 *)v64 == *(unsigned __int8 *)v67)
        v67 = (_QWORD *)((char *)v67 + 1);
      result = (char *)v67 - (char *)a2;
LABEL_39:
      if (result > v62)
      {
        *a4 = v59 - v63;
        v62 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_41:
      ++v57;
      result = v62;
      if (v57 == v54)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_noDict_5_5(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  const __int16 *v46;
  int8x16_t v47;
  unsigned __int32 v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t result;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  _OWORD v98[16];
  uint64_t v99;
  int16x8x2_t v100;

  v99 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 96);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v6;
  v8 = a1 + 64;
  v9 = *(_DWORD *)(a1 + 52);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (_DWORD)a2 - v10;
  v12 = 1 << *(_DWORD *)(a1 + 240);
  v13 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v10 - *(_DWORD *)(a1 + 28) > v12 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v15 = (_DWORD)a2 - v10 - v12;
  else
    v15 = *(_DWORD *)(a1 + 28);
  v16 = *(_DWORD *)(a1 + 252);
  if (v16 >= 5)
    LOBYTE(v16) = 5;
  if (v11 - v13 >= 0x181)
  {
    if (v13 <= 0xFFFFFF9F)
    {
      v73 = v13 + 96;
      do
      {
        v74 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v10 + 8 + v13)) >> (56 - v9);
        v75 = (v74 >> 3) & 0x1FFFFFE0;
        _X21 = v4 + 4 * v75;
        __asm
        {
          PRFM            #0, [X21]
          PRFM            #0, [X21,#0x40]
        }
        _X20 = v6 + 2 * v75;
        __asm { PRFM            #0, [X20] }
        v81 = *(unsigned int *)(v8 + 4 * (v13 & 7));
        *(_DWORD *)(v8 + 4 * (v13 & 7)) = v74;
        v82 = (v81 >> 3) & 0x1FFFFFE0;
        v83 = v4 + 4 * v82;
        v84 = (_BYTE *)(v6 + 2 * v82);
        v85 = (*v84 - 1) & 0x1F;
        *v84 = v85;
        v84[v85 + 16] = v81;
        *(_DWORD *)(v83 + 4 * v85) = v13++;
      }
      while (v13 < v73);
      v5 = *(_QWORD *)(a1 + 96);
      v7 = *(_QWORD *)(a1 + 56);
    }
    v86 = v11 - 32;
    LODWORD(v13) = v11 - 32;
    v87 = (_DWORD)a2 + 1 - (v10 + v86);
    if ((v87 + 1) < 8)
      v88 = v87 + 1;
    else
      v88 = 8;
    if ((unint64_t)a2 + 1 >= v10 + v86)
      v89 = v88;
    else
      v89 = 0;
    if (v86 < v89 + (int)v86)
    {
      v90 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v91 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v10 + v86)) >> v90;
        v92 = (v91 >> 3) & 0x1FFFFFE0;
        _X23 = v5 + 4 * v92;
        __asm
        {
          PRFM            #0, [X23]
          PRFM            #0, [X23,#0x40]
        }
        _X22 = v7 + 2 * v92;
        __asm { PRFM            #0, [X22] }
        *(_DWORD *)(a1 + 4 * (v86++ & 7) + 64) = v91;
        --v89;
      }
      while (v89);
    }
  }
  if (v13 < v11)
  {
    v17 = *(_QWORD *)(a1 + 8) + 8;
    v18 = 56 - *(_DWORD *)(a1 + 52);
    v13 = v13;
    do
    {
      v19 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v17 + v13)) >> v18;
      v20 = (v19 >> 3) & 0x1FFFFFE0;
      _X23 = v5 + 4 * v20;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X23,#0x40]
      }
      _X22 = v7 + 2 * v20;
      __asm { PRFM            #0, [X22] }
      v29 = *(unsigned int *)(v8 + 4 * (v13 & 7));
      *(_DWORD *)(v8 + 4 * (v13 & 7)) = v19;
      v30 = (v29 >> 3) & 0x1FFFFFE0;
      v31 = v5 + 4 * v30;
      v32 = (_BYTE *)(v7 + 2 * v30);
      v33 = (*v32 - 1) & 0x1F;
      *v32 = v33;
      v32[v33 + 16] = v29;
      *(_DWORD *)(v31 + 4 * v33) = v13++;
    }
    while (v13 < ((_DWORD)a2 - v10));
  }
  *(_DWORD *)(a1 + 44) = v11;
  v34 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v10 + v11 + 8)) >> (56 - v9);
  v35 = (v34 >> 3) & 0x1FFFFFE0;
  _X4 = v4 + 4 * v35;
  __asm
  {
    PRFM            #0, [X4]
    PRFM            #0, [X4,#0x40]
  }
  _X16 = v6 + 2 * v35;
  __asm { PRFM            #0, [X16] }
  v41 = *(unsigned int *)(v8 + 4 * (v11 & 7));
  *(_DWORD *)(v8 + 4 * (v11 & 7)) = v34;
  v42 = (v41 >> 3) & 0x1FFFFFE0;
  v43 = v4 + 4 * v42;
  v44 = (char *)(v6 + 2 * v42);
  v46 = (const __int16 *)(v44 + 16);
  v45 = *v44;
  v100 = vld2q_s16(v46);
  memset(v98, 0, sizeof(v98));
  v47 = vdupq_n_s8(v41);
  *(int8x8_t *)v100.val[0].i8 = vqmovn_s16((int16x8_t)vceqq_s8(v47, (int8x16_t)v100.val[0]));
  *(int8x8_t *)v47.i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v47, (int8x16_t)v100.val[1])), *(int8x8_t *)v100.val[0].i8, 2uLL);
  v48 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v100.val[0].i8), vuzp1_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v100.val[0].i8), 4uLL).u32[0];
  if (v48)
  {
    v49 = 0;
    v50 = 1 << v16;
    v51 = __ROR4__(v48, v45);
    v52 = v50 - 1;
    while (1)
    {
      v53 = *(unsigned int *)(v43 + 4 * ((__clz(__rbit64(v51)) + v45) & 0x1F));
      if (v53 < v15)
        break;
      _X11 = v10 + v53;
      __asm { PRFM            #0, [X11] }
      v56 = v49 + 1;
      *((_DWORD *)v98 + v49) = v53;
      v51 &= v51 - 1;
      if (v51)
      {
        _ZF = v52 == (_DWORD)v49++;
        if (!_ZF)
          continue;
      }
      goto LABEL_22;
    }
    v56 = v49;
  }
  else
  {
    v56 = 0;
  }
LABEL_22:
  v57 = (v45 - 1) & 0x1F;
  *v44 = v57;
  v44[v57 + 16] = v41;
  v58 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v58 + 1;
  *(_DWORD *)(v43 + 4 * v57) = v58;
  if (v56)
  {
    v59 = 0;
    v60 = (unint64_t)a3 - 7;
    v61 = v11 + 2;
    v62 = a2 + 1;
    v63 = v10 + 8;
    v64 = 3;
    while (1)
    {
      v65 = *((unsigned int *)v98 + v59);
      v66 = (_QWORD *)(v10 + v65);
      if (*(unsigned __int8 *)(v10 + v65 + v64) != *((unsigned __int8 *)a2 + v64))
        goto LABEL_41;
      if (v60 <= (unint64_t)a2)
      {
        v69 = a2;
      }
      else
      {
        v67 = *a2 ^ *v66;
        if (v67)
        {
          result = __clz(__rbit64(v67)) >> 3;
          goto LABEL_39;
        }
        v70 = 0;
        while (1)
        {
          v69 = &v62[v70];
          if ((unint64_t)&v62[v70] >= v60)
            break;
          v71 = *(_QWORD *)(v63 + v65 + v70 * 8);
          ++v70;
          v72 = *v69 ^ v71;
          if (v72)
          {
            result = v70 * 8 + (__clz(__rbit64(v72)) >> 3);
            goto LABEL_39;
          }
        }
        v66 = (_QWORD *)(v63 + v65 + v70 * 8);
      }
      if (v69 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v66 == *(_DWORD *)v69)
      {
        v69 = (_QWORD *)((char *)v69 + 4);
        v66 = (_QWORD *)((char *)v66 + 4);
      }
      if (v69 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v66 == *(unsigned __int16 *)v69)
      {
        v69 = (_QWORD *)((char *)v69 + 2);
        v66 = (_QWORD *)((char *)v66 + 2);
      }
      if (v69 < a3 && *(unsigned __int8 *)v66 == *(unsigned __int8 *)v69)
        v69 = (_QWORD *)((char *)v69 + 1);
      result = (char *)v69 - (char *)a2;
LABEL_39:
      if (result > v64)
      {
        *a4 = v61 - v65;
        v64 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_41:
      ++v59;
      result = v64;
      if (v59 == v56)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_noDict_5_6(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  const char *v46;
  char v47;
  uint64_t v48;
  int8x16_t v49;
  int8x8_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t result;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  _OWORD v102[16];
  uint64_t v103;
  int8x16x4_t v104;

  v103 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 96);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v6;
  v8 = a1 + 64;
  v9 = *(_DWORD *)(a1 + 52);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (_DWORD)a2 - v10;
  v12 = 1 << *(_DWORD *)(a1 + 240);
  v13 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v10 - *(_DWORD *)(a1 + 28) > v12 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v15 = (_DWORD)a2 - v10 - v12;
  else
    v15 = *(_DWORD *)(a1 + 28);
  v16 = *(_DWORD *)(a1 + 252);
  if (v16 >= 6)
    LOBYTE(v16) = 6;
  if (v11 - v13 >= 0x181)
  {
    if (v13 <= 0xFFFFFF9F)
    {
      v75 = v13 + 96;
      do
      {
        v76 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v10 + 8 + v13)) >> (56 - v9);
        v77 = (v76 >> 2) & 0x3FFFFFC0;
        _X21 = v4 + 4 * v77;
        __asm
        {
          PRFM            #0, [X21]
          PRFM            #0, [X21,#0x40]
        }
        _X20 = v6 + 2 * v77;
        __asm
        {
          PRFM            #0, [X20]
          PRFM            #0, [X20,#0x40]
        }
        v84 = *(unsigned int *)(v8 + 4 * (v13 & 7));
        *(_DWORD *)(v8 + 4 * (v13 & 7)) = v76;
        v85 = (v84 >> 2) & 0x3FFFFFC0;
        v86 = v4 + 4 * v85;
        v87 = (_BYTE *)(v6 + 2 * v85);
        v88 = (*v87 - 1) & 0x3F;
        *v87 = v88;
        v87[v88 + 16] = v84;
        *(_DWORD *)(v86 + 4 * v88) = v13++;
      }
      while (v13 < v75);
      v5 = *(_QWORD *)(a1 + 96);
      v7 = *(_QWORD *)(a1 + 56);
    }
    v89 = v11 - 32;
    LODWORD(v13) = v11 - 32;
    v90 = (_DWORD)a2 + 1 - (v10 + v89);
    if ((v90 + 1) < 8)
      v91 = v90 + 1;
    else
      v91 = 8;
    if ((unint64_t)a2 + 1 >= v10 + v89)
      v92 = v91;
    else
      v92 = 0;
    if (v89 < v92 + (int)v89)
    {
      v93 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v94 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v10 + v89)) >> v93;
        v95 = (v94 >> 2) & 0x3FFFFFC0;
        _X23 = v5 + 4 * v95;
        __asm
        {
          PRFM            #0, [X23]
          PRFM            #0, [X23,#0x40]
        }
        _X22 = v7 + 2 * v95;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        *(_DWORD *)(a1 + 4 * (v89++ & 7) + 64) = v94;
        --v92;
      }
      while (v92);
    }
  }
  if (v13 < v11)
  {
    v17 = *(_QWORD *)(a1 + 8) + 8;
    v18 = 56 - *(_DWORD *)(a1 + 52);
    v13 = v13;
    do
    {
      v19 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v17 + v13)) >> v18;
      v20 = (v19 >> 2) & 0x3FFFFFC0;
      _X23 = v5 + 4 * v20;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X23,#0x40]
      }
      _X22 = v7 + 2 * v20;
      __asm
      {
        PRFM            #0, [X22]
        PRFM            #0, [X22,#0x40]
      }
      v30 = *(unsigned int *)(v8 + 4 * (v13 & 7));
      *(_DWORD *)(v8 + 4 * (v13 & 7)) = v19;
      v31 = (v30 >> 2) & 0x3FFFFFC0;
      v32 = v5 + 4 * v31;
      v33 = (_BYTE *)(v7 + 2 * v31);
      v34 = (*v33 - 1) & 0x3F;
      *v33 = v34;
      v33[v34 + 16] = v30;
      *(_DWORD *)(v32 + 4 * v34) = v13++;
    }
    while (v13 < ((_DWORD)a2 - v10));
  }
  *(_DWORD *)(a1 + 44) = v11;
  v35 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v10 + v11 + 8)) >> (56 - v9);
  v36 = (v35 >> 2) & 0x3FFFFFC0;
  _X4 = v4 + 4 * v36;
  __asm
  {
    PRFM            #0, [X4]
    PRFM            #0, [X4,#0x40]
  }
  _X16 = v6 + 2 * v36;
  __asm
  {
    PRFM            #0, [X16]
    PRFM            #0, [X16,#0x40]
  }
  v43 = *(unsigned int *)(v8 + 4 * (v11 & 7));
  *(_DWORD *)(v8 + 4 * (v11 & 7)) = v35;
  v44 = (v43 >> 2) & 0x3FFFFFC0;
  v45 = (char *)(v6 + 2 * v44);
  v46 = v45 + 16;
  v47 = *v45;
  v48 = v4 + 4 * v44;
  memset(v102, 0, sizeof(v102));
  v104 = vld4q_s8(v46);
  v49 = vdupq_n_s8(v43);
  v104.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v104.val[3], v49), vceqq_s8(v104.val[2], v49), 1uLL), vsriq_n_s8(vceqq_s8(v104.val[1], v49), vceqq_s8(v104.val[0], v49), 1uLL), 2uLL);
  v50 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v104.val[0], v104.val[0], 4uLL), 4uLL);
  if (v50)
  {
    v51 = 0;
    v52 = 1 << v16;
    v53 = __ROR8__(*(_QWORD *)&v50, v47);
    v54 = v52 - 1;
    while (1)
    {
      v55 = *(unsigned int *)(v48 + 4 * ((__clz(__rbit64(v53)) + v47) & 0x3F));
      if (v55 < v15)
        break;
      _X11 = v10 + v55;
      __asm { PRFM            #0, [X11] }
      v58 = v51 + 1;
      *((_DWORD *)v102 + v51) = v55;
      v53 &= v53 - 1;
      if (v53)
      {
        _ZF = v54 == (_DWORD)v51++;
        if (!_ZF)
          continue;
      }
      goto LABEL_22;
    }
    v58 = v51;
  }
  else
  {
    v58 = 0;
  }
LABEL_22:
  v59 = (v47 - 1) & 0x3F;
  *v45 = v59;
  v45[v59 + 16] = v43;
  v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v48 + 4 * v59) = v60;
  if (v58)
  {
    v61 = 0;
    v62 = (unint64_t)a3 - 7;
    v63 = v11 + 2;
    v64 = a2 + 1;
    v65 = v10 + 8;
    v66 = 3;
    while (1)
    {
      v67 = *((unsigned int *)v102 + v61);
      v68 = (_QWORD *)(v10 + v67);
      if (*(unsigned __int8 *)(v10 + v67 + v66) != *((unsigned __int8 *)a2 + v66))
        goto LABEL_41;
      if (v62 <= (unint64_t)a2)
      {
        v71 = a2;
      }
      else
      {
        v69 = *a2 ^ *v68;
        if (v69)
        {
          result = __clz(__rbit64(v69)) >> 3;
          goto LABEL_39;
        }
        v72 = 0;
        while (1)
        {
          v71 = &v64[v72];
          if ((unint64_t)&v64[v72] >= v62)
            break;
          v73 = *(_QWORD *)(v65 + v67 + v72 * 8);
          ++v72;
          v74 = *v71 ^ v73;
          if (v74)
          {
            result = v72 * 8 + (__clz(__rbit64(v74)) >> 3);
            goto LABEL_39;
          }
        }
        v68 = (_QWORD *)(v65 + v67 + v72 * 8);
      }
      if (v71 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v68 == *(_DWORD *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 4);
        v68 = (_QWORD *)((char *)v68 + 4);
      }
      if (v71 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v68 == *(unsigned __int16 *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 2);
        v68 = (_QWORD *)((char *)v68 + 2);
      }
      if (v71 < a3 && *(unsigned __int8 *)v68 == *(unsigned __int8 *)v71)
        v71 = (_QWORD *)((char *)v71 + 1);
      result = (char *)v71 - (char *)a2;
LABEL_39:
      if (result > v66)
      {
        *a4 = v63 - v67;
        v66 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_41:
      ++v61;
      result = v66;
      if (v61 == v58)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_noDict_6_4(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int8x16_t *v42;
  __int8 v43;
  int16x8_t v44;
  uint64x2_t v45;
  uint64x2_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t result;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  _OWORD v94[16];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 96);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v6;
  v8 = a1 + 64;
  v9 = *(_DWORD *)(a1 + 52);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (_DWORD)a2 - v10;
  v12 = 1 << *(_DWORD *)(a1 + 240);
  v13 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v10 - *(_DWORD *)(a1 + 28) > v12 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v15 = (_DWORD)a2 - v10 - v12;
  else
    v15 = *(_DWORD *)(a1 + 28);
  v16 = *(_DWORD *)(a1 + 252);
  if (v16 >= 4)
    LOBYTE(v16) = 4;
  if (v11 - v13 >= 0x181)
  {
    if (v13 <= 0xFFFFFF9F)
    {
      v71 = v13 + 96;
      do
      {
        v72 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v10 + 8 + v13)) >> (56 - v9);
        v73 = (v72 >> 4) & 0xFFFFFF0;
        _X21 = v4 + 4 * v73;
        __asm { PRFM            #0, [X21] }
        _X20 = v6 + 2 * v73;
        __asm { PRFM            #0, [X20] }
        v78 = *(unsigned int *)(v8 + 4 * (v13 & 7));
        *(_DWORD *)(v8 + 4 * (v13 & 7)) = v72;
        v79 = (v78 >> 4) & 0xFFFFFF0;
        v80 = v4 + 4 * v79;
        v81 = (_BYTE *)(v6 + 2 * v79);
        v82 = (*v81 - 1) & 0xF;
        *v81 = v82;
        v81[v82 + 16] = v78;
        *(_DWORD *)(v80 + 4 * v82) = v13++;
      }
      while (v13 < v71);
      v5 = *(_QWORD *)(a1 + 96);
      v7 = *(_QWORD *)(a1 + 56);
    }
    v83 = v11 - 32;
    LODWORD(v13) = v11 - 32;
    v84 = (_DWORD)a2 + 1 - (v10 + v83);
    if ((v84 + 1) < 8)
      v85 = v84 + 1;
    else
      v85 = 8;
    if ((unint64_t)a2 + 1 >= v10 + v83)
      v86 = v85;
    else
      v86 = 0;
    if (v83 < v86 + (int)v83)
    {
      v87 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v88 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v10 + v83)) >> v87;
        v89 = (v88 >> 4) & 0xFFFFFF0;
        _X23 = v5 + 4 * v89;
        __asm { PRFM            #0, [X23] }
        _X22 = v7 + 2 * v89;
        __asm { PRFM            #0, [X22] }
        *(_DWORD *)(a1 + 4 * (v83++ & 7) + 64) = v88;
        --v86;
      }
      while (v86);
    }
  }
  if (v13 < v11)
  {
    v17 = *(_QWORD *)(a1 + 8) + 8;
    v18 = 56 - *(_DWORD *)(a1 + 52);
    v13 = v13;
    do
    {
      v19 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v17 + v13)) >> v18;
      v20 = (v19 >> 4) & 0xFFFFFF0;
      _X23 = v5 + 4 * v20;
      __asm { PRFM            #0, [X23] }
      _X22 = v7 + 2 * v20;
      __asm { PRFM            #0, [X22] }
      v28 = *(unsigned int *)(v8 + 4 * (v13 & 7));
      *(_DWORD *)(v8 + 4 * (v13 & 7)) = v19;
      v29 = (v28 >> 4) & 0xFFFFFF0;
      v30 = v5 + 4 * v29;
      v31 = (_BYTE *)(v7 + 2 * v29);
      v32 = (*v31 - 1) & 0xF;
      *v31 = v32;
      v31[v32 + 16] = v28;
      *(_DWORD *)(v30 + 4 * v32) = v13++;
    }
    while (v13 < ((_DWORD)a2 - v10));
  }
  *(_DWORD *)(a1 + 44) = v11;
  v33 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v10 + v11 + 8)) >> (56 - v9);
  v34 = (v33 >> 4) & 0xFFFFFF0;
  _X4 = v4 + 4 * v34;
  __asm { PRFM            #0, [X4] }
  _X16 = v6 + 2 * v34;
  __asm { PRFM            #0, [X16] }
  v39 = *(unsigned int *)(v8 + 4 * (v11 & 7));
  *(_DWORD *)(v8 + 4 * (v11 & 7)) = v33;
  v40 = (v39 >> 4) & 0xFFFFFF0;
  v41 = v4 + 4 * v40;
  v42 = (int8x16_t *)(v6 + 2 * v40);
  v43 = v42->i8[0];
  memset(v94, 0, sizeof(v94));
  v44 = vshlq_n_s16((int16x8_t)vceqq_s8(v42[1], vdupq_n_s8(v39)), 7uLL);
  v45 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v44, v44, 0xEuLL), 0xEuLL);
  v46 = vsraq_n_u64(v45, v45, 0x1CuLL);
  if (v46.u8[0] | (unsigned __int16)(v46.u8[8] << 8))
  {
    v47 = 0;
    v48 = 1 << v16;
    v49 = ((unsigned __int16)(v46.u8[0] | (v46.u8[8] << 8)) >> (v43 & 0xF)) | (unsigned __int16)((v46.u8[0] | (v46.u8[8] << 8)) << (-v43 & 0xF));
    v50 = v48 - 1;
    while (1)
    {
      v51 = *(unsigned int *)(v41 + 4 * ((__clz(__rbit64(v49)) + v43) & 0xF));
      if (v51 < v15)
        break;
      _X11 = v10 + v51;
      __asm { PRFM            #0, [X11] }
      v54 = v47 + 1;
      *((_DWORD *)v94 + v47) = v51;
      v49 &= v49 - 1;
      if (v49)
      {
        _ZF = v50 == (_DWORD)v47++;
        if (!_ZF)
          continue;
      }
      goto LABEL_22;
    }
    v54 = v47;
  }
  else
  {
    v54 = 0;
  }
LABEL_22:
  v55 = (v43 - 1) & 0xF;
  v42->i8[0] = v55;
  v42[1].i8[v55] = v39;
  v56 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v56 + 1;
  *(_DWORD *)(v41 + 4 * v55) = v56;
  if (v54)
  {
    v57 = 0;
    v58 = (unint64_t)a3 - 7;
    v59 = v11 + 2;
    v60 = a2 + 1;
    v61 = v10 + 8;
    v62 = 3;
    while (1)
    {
      v63 = *((unsigned int *)v94 + v57);
      v64 = (_QWORD *)(v10 + v63);
      if (*(unsigned __int8 *)(v10 + v63 + v62) != *((unsigned __int8 *)a2 + v62))
        goto LABEL_41;
      if (v58 <= (unint64_t)a2)
      {
        v67 = a2;
      }
      else
      {
        v65 = *a2 ^ *v64;
        if (v65)
        {
          result = __clz(__rbit64(v65)) >> 3;
          goto LABEL_39;
        }
        v68 = 0;
        while (1)
        {
          v67 = &v60[v68];
          if ((unint64_t)&v60[v68] >= v58)
            break;
          v69 = *(_QWORD *)(v61 + v63 + v68 * 8);
          ++v68;
          v70 = *v67 ^ v69;
          if (v70)
          {
            result = v68 * 8 + (__clz(__rbit64(v70)) >> 3);
            goto LABEL_39;
          }
        }
        v64 = (_QWORD *)(v61 + v63 + v68 * 8);
      }
      if (v67 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v64 == *(_DWORD *)v67)
      {
        v67 = (_QWORD *)((char *)v67 + 4);
        v64 = (_QWORD *)((char *)v64 + 4);
      }
      if (v67 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v64 == *(unsigned __int16 *)v67)
      {
        v67 = (_QWORD *)((char *)v67 + 2);
        v64 = (_QWORD *)((char *)v64 + 2);
      }
      if (v67 < a3 && *(unsigned __int8 *)v64 == *(unsigned __int8 *)v67)
        v67 = (_QWORD *)((char *)v67 + 1);
      result = (char *)v67 - (char *)a2;
LABEL_39:
      if (result > v62)
      {
        *a4 = v59 - v63;
        v62 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_41:
      ++v57;
      result = v62;
      if (v57 == v54)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_noDict_6_5(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  const __int16 *v46;
  int8x16_t v47;
  unsigned __int32 v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t result;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  _OWORD v98[16];
  uint64_t v99;
  int16x8x2_t v100;

  v99 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 96);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v6;
  v8 = a1 + 64;
  v9 = *(_DWORD *)(a1 + 52);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (_DWORD)a2 - v10;
  v12 = 1 << *(_DWORD *)(a1 + 240);
  v13 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v10 - *(_DWORD *)(a1 + 28) > v12 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v15 = (_DWORD)a2 - v10 - v12;
  else
    v15 = *(_DWORD *)(a1 + 28);
  v16 = *(_DWORD *)(a1 + 252);
  if (v16 >= 5)
    LOBYTE(v16) = 5;
  if (v11 - v13 >= 0x181)
  {
    if (v13 <= 0xFFFFFF9F)
    {
      v73 = v13 + 96;
      do
      {
        v74 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v10 + 8 + v13)) >> (56 - v9);
        v75 = (v74 >> 3) & 0x1FFFFFE0;
        _X21 = v4 + 4 * v75;
        __asm
        {
          PRFM            #0, [X21]
          PRFM            #0, [X21,#0x40]
        }
        _X20 = v6 + 2 * v75;
        __asm { PRFM            #0, [X20] }
        v81 = *(unsigned int *)(v8 + 4 * (v13 & 7));
        *(_DWORD *)(v8 + 4 * (v13 & 7)) = v74;
        v82 = (v81 >> 3) & 0x1FFFFFE0;
        v83 = v4 + 4 * v82;
        v84 = (_BYTE *)(v6 + 2 * v82);
        v85 = (*v84 - 1) & 0x1F;
        *v84 = v85;
        v84[v85 + 16] = v81;
        *(_DWORD *)(v83 + 4 * v85) = v13++;
      }
      while (v13 < v73);
      v5 = *(_QWORD *)(a1 + 96);
      v7 = *(_QWORD *)(a1 + 56);
    }
    v86 = v11 - 32;
    LODWORD(v13) = v11 - 32;
    v87 = (_DWORD)a2 + 1 - (v10 + v86);
    if ((v87 + 1) < 8)
      v88 = v87 + 1;
    else
      v88 = 8;
    if ((unint64_t)a2 + 1 >= v10 + v86)
      v89 = v88;
    else
      v89 = 0;
    if (v86 < v89 + (int)v86)
    {
      v90 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v91 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v10 + v86)) >> v90;
        v92 = (v91 >> 3) & 0x1FFFFFE0;
        _X23 = v5 + 4 * v92;
        __asm
        {
          PRFM            #0, [X23]
          PRFM            #0, [X23,#0x40]
        }
        _X22 = v7 + 2 * v92;
        __asm { PRFM            #0, [X22] }
        *(_DWORD *)(a1 + 4 * (v86++ & 7) + 64) = v91;
        --v89;
      }
      while (v89);
    }
  }
  if (v13 < v11)
  {
    v17 = *(_QWORD *)(a1 + 8) + 8;
    v18 = 56 - *(_DWORD *)(a1 + 52);
    v13 = v13;
    do
    {
      v19 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v17 + v13)) >> v18;
      v20 = (v19 >> 3) & 0x1FFFFFE0;
      _X23 = v5 + 4 * v20;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X23,#0x40]
      }
      _X22 = v7 + 2 * v20;
      __asm { PRFM            #0, [X22] }
      v29 = *(unsigned int *)(v8 + 4 * (v13 & 7));
      *(_DWORD *)(v8 + 4 * (v13 & 7)) = v19;
      v30 = (v29 >> 3) & 0x1FFFFFE0;
      v31 = v5 + 4 * v30;
      v32 = (_BYTE *)(v7 + 2 * v30);
      v33 = (*v32 - 1) & 0x1F;
      *v32 = v33;
      v32[v33 + 16] = v29;
      *(_DWORD *)(v31 + 4 * v33) = v13++;
    }
    while (v13 < ((_DWORD)a2 - v10));
  }
  *(_DWORD *)(a1 + 44) = v11;
  v34 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v10 + v11 + 8)) >> (56 - v9);
  v35 = (v34 >> 3) & 0x1FFFFFE0;
  _X4 = v4 + 4 * v35;
  __asm
  {
    PRFM            #0, [X4]
    PRFM            #0, [X4,#0x40]
  }
  _X16 = v6 + 2 * v35;
  __asm { PRFM            #0, [X16] }
  v41 = *(unsigned int *)(v8 + 4 * (v11 & 7));
  *(_DWORD *)(v8 + 4 * (v11 & 7)) = v34;
  v42 = (v41 >> 3) & 0x1FFFFFE0;
  v43 = v4 + 4 * v42;
  v44 = (char *)(v6 + 2 * v42);
  v46 = (const __int16 *)(v44 + 16);
  v45 = *v44;
  v100 = vld2q_s16(v46);
  memset(v98, 0, sizeof(v98));
  v47 = vdupq_n_s8(v41);
  *(int8x8_t *)v100.val[0].i8 = vqmovn_s16((int16x8_t)vceqq_s8(v47, (int8x16_t)v100.val[0]));
  *(int8x8_t *)v47.i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v47, (int8x16_t)v100.val[1])), *(int8x8_t *)v100.val[0].i8, 2uLL);
  v48 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v100.val[0].i8), vuzp1_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v100.val[0].i8), 4uLL).u32[0];
  if (v48)
  {
    v49 = 0;
    v50 = 1 << v16;
    v51 = __ROR4__(v48, v45);
    v52 = v50 - 1;
    while (1)
    {
      v53 = *(unsigned int *)(v43 + 4 * ((__clz(__rbit64(v51)) + v45) & 0x1F));
      if (v53 < v15)
        break;
      _X11 = v10 + v53;
      __asm { PRFM            #0, [X11] }
      v56 = v49 + 1;
      *((_DWORD *)v98 + v49) = v53;
      v51 &= v51 - 1;
      if (v51)
      {
        _ZF = v52 == (_DWORD)v49++;
        if (!_ZF)
          continue;
      }
      goto LABEL_22;
    }
    v56 = v49;
  }
  else
  {
    v56 = 0;
  }
LABEL_22:
  v57 = (v45 - 1) & 0x1F;
  *v44 = v57;
  v44[v57 + 16] = v41;
  v58 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v58 + 1;
  *(_DWORD *)(v43 + 4 * v57) = v58;
  if (v56)
  {
    v59 = 0;
    v60 = (unint64_t)a3 - 7;
    v61 = v11 + 2;
    v62 = a2 + 1;
    v63 = v10 + 8;
    v64 = 3;
    while (1)
    {
      v65 = *((unsigned int *)v98 + v59);
      v66 = (_QWORD *)(v10 + v65);
      if (*(unsigned __int8 *)(v10 + v65 + v64) != *((unsigned __int8 *)a2 + v64))
        goto LABEL_41;
      if (v60 <= (unint64_t)a2)
      {
        v69 = a2;
      }
      else
      {
        v67 = *a2 ^ *v66;
        if (v67)
        {
          result = __clz(__rbit64(v67)) >> 3;
          goto LABEL_39;
        }
        v70 = 0;
        while (1)
        {
          v69 = &v62[v70];
          if ((unint64_t)&v62[v70] >= v60)
            break;
          v71 = *(_QWORD *)(v63 + v65 + v70 * 8);
          ++v70;
          v72 = *v69 ^ v71;
          if (v72)
          {
            result = v70 * 8 + (__clz(__rbit64(v72)) >> 3);
            goto LABEL_39;
          }
        }
        v66 = (_QWORD *)(v63 + v65 + v70 * 8);
      }
      if (v69 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v66 == *(_DWORD *)v69)
      {
        v69 = (_QWORD *)((char *)v69 + 4);
        v66 = (_QWORD *)((char *)v66 + 4);
      }
      if (v69 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v66 == *(unsigned __int16 *)v69)
      {
        v69 = (_QWORD *)((char *)v69 + 2);
        v66 = (_QWORD *)((char *)v66 + 2);
      }
      if (v69 < a3 && *(unsigned __int8 *)v66 == *(unsigned __int8 *)v69)
        v69 = (_QWORD *)((char *)v69 + 1);
      result = (char *)v69 - (char *)a2;
LABEL_39:
      if (result > v64)
      {
        *a4 = v61 - v65;
        v64 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_41:
      ++v59;
      result = v64;
      if (v59 == v56)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_noDict_6_6(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  const char *v46;
  char v47;
  uint64_t v48;
  int8x16_t v49;
  int8x8_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t result;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  _OWORD v102[16];
  uint64_t v103;
  int8x16x4_t v104;

  v103 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 96);
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = v6;
  v8 = a1 + 64;
  v9 = *(_DWORD *)(a1 + 52);
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (_DWORD)a2 - v10;
  v12 = 1 << *(_DWORD *)(a1 + 240);
  v13 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v10 - *(_DWORD *)(a1 + 28) > v12 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v15 = (_DWORD)a2 - v10 - v12;
  else
    v15 = *(_DWORD *)(a1 + 28);
  v16 = *(_DWORD *)(a1 + 252);
  if (v16 >= 6)
    LOBYTE(v16) = 6;
  if (v11 - v13 >= 0x181)
  {
    if (v13 <= 0xFFFFFF9F)
    {
      v75 = v13 + 96;
      do
      {
        v76 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v10 + 8 + v13)) >> (56 - v9);
        v77 = (v76 >> 2) & 0x3FFFFFC0;
        _X21 = v4 + 4 * v77;
        __asm
        {
          PRFM            #0, [X21]
          PRFM            #0, [X21,#0x40]
        }
        _X20 = v6 + 2 * v77;
        __asm
        {
          PRFM            #0, [X20]
          PRFM            #0, [X20,#0x40]
        }
        v84 = *(unsigned int *)(v8 + 4 * (v13 & 7));
        *(_DWORD *)(v8 + 4 * (v13 & 7)) = v76;
        v85 = (v84 >> 2) & 0x3FFFFFC0;
        v86 = v4 + 4 * v85;
        v87 = (_BYTE *)(v6 + 2 * v85);
        v88 = (*v87 - 1) & 0x3F;
        *v87 = v88;
        v87[v88 + 16] = v84;
        *(_DWORD *)(v86 + 4 * v88) = v13++;
      }
      while (v13 < v75);
      v5 = *(_QWORD *)(a1 + 96);
      v7 = *(_QWORD *)(a1 + 56);
    }
    v89 = v11 - 32;
    LODWORD(v13) = v11 - 32;
    v90 = (_DWORD)a2 + 1 - (v10 + v89);
    if ((v90 + 1) < 8)
      v91 = v90 + 1;
    else
      v91 = 8;
    if ((unint64_t)a2 + 1 >= v10 + v89)
      v92 = v91;
    else
      v92 = 0;
    if (v89 < v92 + (int)v89)
    {
      v93 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v94 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v10 + v89)) >> v93;
        v95 = (v94 >> 2) & 0x3FFFFFC0;
        _X23 = v5 + 4 * v95;
        __asm
        {
          PRFM            #0, [X23]
          PRFM            #0, [X23,#0x40]
        }
        _X22 = v7 + 2 * v95;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        *(_DWORD *)(a1 + 4 * (v89++ & 7) + 64) = v94;
        --v92;
      }
      while (v92);
    }
  }
  if (v13 < v11)
  {
    v17 = *(_QWORD *)(a1 + 8) + 8;
    v18 = 56 - *(_DWORD *)(a1 + 52);
    v13 = v13;
    do
    {
      v19 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v17 + v13)) >> v18;
      v20 = (v19 >> 2) & 0x3FFFFFC0;
      _X23 = v5 + 4 * v20;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X23,#0x40]
      }
      _X22 = v7 + 2 * v20;
      __asm
      {
        PRFM            #0, [X22]
        PRFM            #0, [X22,#0x40]
      }
      v30 = *(unsigned int *)(v8 + 4 * (v13 & 7));
      *(_DWORD *)(v8 + 4 * (v13 & 7)) = v19;
      v31 = (v30 >> 2) & 0x3FFFFFC0;
      v32 = v5 + 4 * v31;
      v33 = (_BYTE *)(v7 + 2 * v31);
      v34 = (*v33 - 1) & 0x3F;
      *v33 = v34;
      v33[v34 + 16] = v30;
      *(_DWORD *)(v32 + 4 * v34) = v13++;
    }
    while (v13 < ((_DWORD)a2 - v10));
  }
  *(_DWORD *)(a1 + 44) = v11;
  v35 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v10 + v11 + 8)) >> (56 - v9);
  v36 = (v35 >> 2) & 0x3FFFFFC0;
  _X4 = v4 + 4 * v36;
  __asm
  {
    PRFM            #0, [X4]
    PRFM            #0, [X4,#0x40]
  }
  _X16 = v6 + 2 * v36;
  __asm
  {
    PRFM            #0, [X16]
    PRFM            #0, [X16,#0x40]
  }
  v43 = *(unsigned int *)(v8 + 4 * (v11 & 7));
  *(_DWORD *)(v8 + 4 * (v11 & 7)) = v35;
  v44 = (v43 >> 2) & 0x3FFFFFC0;
  v45 = (char *)(v6 + 2 * v44);
  v46 = v45 + 16;
  v47 = *v45;
  v48 = v4 + 4 * v44;
  memset(v102, 0, sizeof(v102));
  v104 = vld4q_s8(v46);
  v49 = vdupq_n_s8(v43);
  v104.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v104.val[3], v49), vceqq_s8(v104.val[2], v49), 1uLL), vsriq_n_s8(vceqq_s8(v104.val[1], v49), vceqq_s8(v104.val[0], v49), 1uLL), 2uLL);
  v50 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v104.val[0], v104.val[0], 4uLL), 4uLL);
  if (v50)
  {
    v51 = 0;
    v52 = 1 << v16;
    v53 = __ROR8__(*(_QWORD *)&v50, v47);
    v54 = v52 - 1;
    while (1)
    {
      v55 = *(unsigned int *)(v48 + 4 * ((__clz(__rbit64(v53)) + v47) & 0x3F));
      if (v55 < v15)
        break;
      _X11 = v10 + v55;
      __asm { PRFM            #0, [X11] }
      v58 = v51 + 1;
      *((_DWORD *)v102 + v51) = v55;
      v53 &= v53 - 1;
      if (v53)
      {
        _ZF = v54 == (_DWORD)v51++;
        if (!_ZF)
          continue;
      }
      goto LABEL_22;
    }
    v58 = v51;
  }
  else
  {
    v58 = 0;
  }
LABEL_22:
  v59 = (v47 - 1) & 0x3F;
  *v45 = v59;
  v45[v59 + 16] = v43;
  v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v48 + 4 * v59) = v60;
  if (v58)
  {
    v61 = 0;
    v62 = (unint64_t)a3 - 7;
    v63 = v11 + 2;
    v64 = a2 + 1;
    v65 = v10 + 8;
    v66 = 3;
    while (1)
    {
      v67 = *((unsigned int *)v102 + v61);
      v68 = (_QWORD *)(v10 + v67);
      if (*(unsigned __int8 *)(v10 + v67 + v66) != *((unsigned __int8 *)a2 + v66))
        goto LABEL_41;
      if (v62 <= (unint64_t)a2)
      {
        v71 = a2;
      }
      else
      {
        v69 = *a2 ^ *v68;
        if (v69)
        {
          result = __clz(__rbit64(v69)) >> 3;
          goto LABEL_39;
        }
        v72 = 0;
        while (1)
        {
          v71 = &v64[v72];
          if ((unint64_t)&v64[v72] >= v62)
            break;
          v73 = *(_QWORD *)(v65 + v67 + v72 * 8);
          ++v72;
          v74 = *v71 ^ v73;
          if (v74)
          {
            result = v72 * 8 + (__clz(__rbit64(v74)) >> 3);
            goto LABEL_39;
          }
        }
        v68 = (_QWORD *)(v65 + v67 + v72 * 8);
      }
      if (v71 < (_QWORD *)((char *)a3 - 3) && *(_DWORD *)v68 == *(_DWORD *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 4);
        v68 = (_QWORD *)((char *)v68 + 4);
      }
      if (v71 < (_QWORD *)((char *)a3 - 1) && *(unsigned __int16 *)v68 == *(unsigned __int16 *)v71)
      {
        v71 = (_QWORD *)((char *)v71 + 2);
        v68 = (_QWORD *)((char *)v68 + 2);
      }
      if (v71 < a3 && *(unsigned __int8 *)v68 == *(unsigned __int8 *)v71)
        v71 = (_QWORD *)((char *)v71 + 1);
      result = (char *)v71 - (char *)a2;
LABEL_39:
      if (result > v66)
      {
        *a4 = v63 - v67;
        v66 = result;
        if ((_QWORD *)((char *)a2 + result) == a3)
          return result;
      }
LABEL_41:
      ++v61;
      result = v66;
      if (v61 == v58)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_extDict_4_4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t *v46;
  __int8 v47;
  int16x8_t v48;
  uint64x2_t v49;
  uint64x2_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t result;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  char *v105;
  _QWORD *v106;
  _OWORD v108[16];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = (_DWORD)a2 - v12;
  v14 = 1 << *(_DWORD *)(a1 + 240);
  v15 = *(unsigned int *)(a1 + 24);
  v16 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v12 - *(_DWORD *)(a1 + 28) > v14 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v18 = (_DWORD)a2 - v12 - v14;
  else
    v18 = *(_DWORD *)(a1 + 28);
  v19 = *(_DWORD *)(a1 + 252);
  if (v19 >= 4)
    LOBYTE(v19) = 4;
  if (v13 - v16 >= 0x181)
  {
    if (v16 <= 0xFFFFFF9F)
    {
      v77 = v16 + 96;
      do
      {
        v78 = (-1640531535 * *(_DWORD *)(v12 + 8 + v16)) >> (24 - v10);
        v79 = (v78 >> 4) & 0xFFFFFF0;
        _X6 = v5 + 4 * v79;
        __asm { PRFM            #0, [X6] }
        _X5 = v7 + 2 * v79;
        __asm { PRFM            #0, [X5] }
        v84 = *(unsigned int *)(v9 + 4 * (v16 & 7));
        *(_DWORD *)(v9 + 4 * (v16 & 7)) = v78;
        v85 = (v84 >> 4) & 0xFFFFFF0;
        v86 = v5 + 4 * v85;
        v87 = (_BYTE *)(v7 + 2 * v85);
        v88 = (*v87 - 1) & 0xF;
        *v87 = v88;
        v87[v88 + 16] = v84;
        *(_DWORD *)(v86 + 4 * v88) = v16++;
      }
      while (v16 < v77);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v89 = v13 - 32;
    LODWORD(v16) = v13 - 32;
    v90 = (_DWORD)a2 + 1 - (v12 + v89);
    if ((v90 + 1) < 8)
      v91 = v90 + 1;
    else
      v91 = 8;
    if ((unint64_t)a2 + 1 >= v12 + v89)
      v92 = v91;
    else
      v92 = 0;
    if (v89 < v92 + (int)v89)
    {
      v93 = 24 - *(_DWORD *)(a1 + 52);
      do
      {
        v94 = (-1640531535 * *(_DWORD *)(v12 + v89)) >> v93;
        v95 = (v94 >> 4) & 0xFFFFFF0;
        _X19 = v6 + 4 * v95;
        __asm { PRFM            #0, [X19] }
        _X7 = v8 + 2 * v95;
        __asm { PRFM            #0, [X7] }
        *(_DWORD *)(a1 + 4 * (v89++ & 7) + 64) = v94;
        --v92;
      }
      while (v92);
    }
  }
  if (v16 < v13)
  {
    v20 = *(_QWORD *)(a1 + 8) + 8;
    v21 = 24 - *(_DWORD *)(a1 + 52);
    v22 = v16;
    do
    {
      v23 = (-1640531535 * *(_DWORD *)(v20 + v22)) >> v21;
      v24 = (v23 >> 4) & 0xFFFFFF0;
      _X19 = v6 + 4 * v24;
      __asm { PRFM            #0, [X19] }
      _X7 = v8 + 2 * v24;
      __asm { PRFM            #0, [X7] }
      v32 = *(unsigned int *)(v9 + 4 * (v22 & 7));
      *(_DWORD *)(v9 + 4 * (v22 & 7)) = v23;
      v33 = (v32 >> 4) & 0xFFFFFF0;
      v34 = v6 + 4 * v33;
      v35 = (_BYTE *)(v8 + 2 * v33);
      v36 = (*v35 - 1) & 0xF;
      *v35 = v36;
      v35[v36 + 16] = v32;
      *(_DWORD *)(v34 + 4 * v36) = v22++;
    }
    while (v22 < ((_DWORD)a2 - v12));
  }
  *(_DWORD *)(a1 + 44) = v13;
  v37 = (-1640531535 * *(_DWORD *)(v12 + v13 + 8)) >> (24 - v10);
  v38 = (v37 >> 4) & 0xFFFFFF0;
  _X17 = v5 + 4 * v38;
  __asm { PRFM            #0, [X17] }
  _X15 = v7 + 2 * v38;
  __asm { PRFM            #0, [X15] }
  v43 = *(unsigned int *)(v9 + 4 * (v13 & 7));
  *(_DWORD *)(v9 + 4 * (v13 & 7)) = v37;
  v44 = (v43 >> 4) & 0xFFFFFF0;
  v45 = v5 + 4 * v44;
  v46 = (int8x16_t *)(v7 + 2 * v44);
  v47 = v46->i8[0];
  memset(v108, 0, sizeof(v108));
  v48 = vshlq_n_s16((int16x8_t)vceqq_s8(v46[1], vdupq_n_s8(v43)), 7uLL);
  v49 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v48, v48, 0xEuLL), 0xEuLL);
  v50 = vsraq_n_u64(v49, v49, 0x1CuLL);
  if (v50.u8[0] | (unsigned __int16)(v50.u8[8] << 8))
  {
    v51 = 0;
    v52 = ((unsigned __int16)(v50.u8[0] | (v50.u8[8] << 8)) >> (v47 & 0xF)) | (unsigned __int16)((v50.u8[0] | (v50.u8[8] << 8)) << (-v47 & 0xF));
    v53 = (1 << v19) - 1;
    while (1)
    {
      v54 = *(unsigned int *)(v45 + 4 * ((__clz(__rbit64(v52)) + v47) & 0xF));
      if (v54 < v18)
        break;
      if (v54 >= v15)
        v55 = v12;
      else
        v55 = v11;
      _X3 = v55 + v54;
      __asm { PRFM            #0, [X3] }
      v58 = v51 + 1;
      *((_DWORD *)v108 + v51) = v54;
      v52 &= v52 - 1;
      if (v52)
      {
        _ZF = v53 == (_DWORD)v51++;
        if (!_ZF)
          continue;
      }
      goto LABEL_25;
    }
    v58 = v51;
  }
  else
  {
    v58 = 0;
  }
LABEL_25:
  v59 = (v47 - 1) & 0xF;
  v46->i8[0] = v59;
  v46[1].i8[v59] = v43;
  v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v45 + 4 * v59) = v60;
  if (v58)
  {
    v61 = 0;
    v106 = (_QWORD *)(v12 + v15);
    v105 = (char *)(v11 + v15);
    v62 = a3 - 7;
    v102 = a3 - 1;
    v103 = a3 - 3;
    v104 = v13 + 2;
    v100 = a2 + 1;
    v101 = v12 + 8;
    v63 = 3;
    while (1)
    {
      v64 = *((unsigned int *)v108 + v61);
      if (v64 >= v15)
      {
        v71 = (_QWORD *)(v12 + v64);
        if (*(unsigned __int8 *)(v12 + v64 + v63) != *((unsigned __int8 *)a2 + v63))
          goto LABEL_47;
        if (v62 <= (unint64_t)a2)
        {
          v73 = a2;
        }
        else
        {
          v72 = *a2 ^ *v71;
          if (v72)
          {
            result = __clz(__rbit64(v72)) >> 3;
            goto LABEL_45;
          }
          v74 = 0;
          while (1)
          {
            v73 = &v100[v74];
            if ((unint64_t)&v100[v74] >= v62)
              break;
            v75 = *(_QWORD *)(v101 + v64 + v74 * 8);
            ++v74;
            v76 = *v73 ^ v75;
            if (v76)
            {
              result = v74 * 8 + (__clz(__rbit64(v76)) >> 3);
              goto LABEL_45;
            }
          }
          v71 = (_QWORD *)(v101 + v64 + v74 * 8);
        }
        if ((unint64_t)v73 < v103 && *(_DWORD *)v71 == *(_DWORD *)v73)
        {
          v73 = (_QWORD *)((char *)v73 + 4);
          v71 = (_QWORD *)((char *)v71 + 4);
        }
        if ((unint64_t)v73 < v102 && *(unsigned __int16 *)v71 == *(unsigned __int16 *)v73)
        {
          v73 = (_QWORD *)((char *)v73 + 2);
          v71 = (_QWORD *)((char *)v71 + 2);
        }
        if ((unint64_t)v73 < a3 && *(unsigned __int8 *)v71 == *(unsigned __int8 *)v73)
          v73 = (_QWORD *)((char *)v73 + 1);
        result = (char *)v73 - (char *)a2;
      }
      else
      {
        v65 = v11 + v64;
        if (*(_DWORD *)(v11 + v64) != *(_DWORD *)a2)
          goto LABEL_47;
        v66 = v11;
        v67 = v12;
        v68 = a3;
        v69 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v65 + 4), a3, v105, v106);
        a3 = v68;
        v12 = v67;
        v11 = v66;
        result = v69 + 4;
      }
LABEL_45:
      if (result > v63)
      {
        *a4 = v104 - v64;
        v63 = result;
        if ((_QWORD *)((char *)a2 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_47:
      ++v61;
      result = v63;
      if (v61 == v58)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_extDict_4_5(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char v49;
  const __int16 *v50;
  int8x16_t v51;
  unsigned __int32 v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t result;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  char *v109;
  _QWORD *v110;
  _OWORD v112[16];
  uint64_t v113;
  int16x8x2_t v114;

  v113 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = (_DWORD)a2 - v12;
  v14 = 1 << *(_DWORD *)(a1 + 240);
  v15 = *(unsigned int *)(a1 + 24);
  v16 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v12 - *(_DWORD *)(a1 + 28) > v14 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v18 = (_DWORD)a2 - v12 - v14;
  else
    v18 = *(_DWORD *)(a1 + 28);
  v19 = *(_DWORD *)(a1 + 252);
  if (v19 >= 5)
    LOBYTE(v19) = 5;
  if (v13 - v16 >= 0x181)
  {
    if (v16 <= 0xFFFFFF9F)
    {
      v79 = v16 + 96;
      do
      {
        v80 = (-1640531535 * *(_DWORD *)(v12 + 8 + v16)) >> (24 - v10);
        v81 = (v80 >> 3) & 0x1FFFFFE0;
        _X6 = v5 + 4 * v81;
        __asm
        {
          PRFM            #0, [X6]
          PRFM            #0, [X6,#0x40]
        }
        _X5 = v7 + 2 * v81;
        __asm { PRFM            #0, [X5] }
        v87 = *(unsigned int *)(v9 + 4 * (v16 & 7));
        *(_DWORD *)(v9 + 4 * (v16 & 7)) = v80;
        v88 = (v87 >> 3) & 0x1FFFFFE0;
        v89 = v5 + 4 * v88;
        v90 = (_BYTE *)(v7 + 2 * v88);
        v91 = (*v90 - 1) & 0x1F;
        *v90 = v91;
        v90[v91 + 16] = v87;
        *(_DWORD *)(v89 + 4 * v91) = v16++;
      }
      while (v16 < v79);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v92 = v13 - 32;
    LODWORD(v16) = v13 - 32;
    v93 = (_DWORD)a2 + 1 - (v12 + v92);
    if ((v93 + 1) < 8)
      v94 = v93 + 1;
    else
      v94 = 8;
    if ((unint64_t)a2 + 1 >= v12 + v92)
      v95 = v94;
    else
      v95 = 0;
    if (v92 < v95 + (int)v92)
    {
      v96 = 24 - *(_DWORD *)(a1 + 52);
      do
      {
        v97 = (-1640531535 * *(_DWORD *)(v12 + v92)) >> v96;
        v98 = (v97 >> 3) & 0x1FFFFFE0;
        _X19 = v6 + 4 * v98;
        __asm
        {
          PRFM            #0, [X19]
          PRFM            #0, [X19,#0x40]
        }
        _X7 = v8 + 2 * v98;
        __asm { PRFM            #0, [X7] }
        *(_DWORD *)(a1 + 4 * (v92++ & 7) + 64) = v97;
        --v95;
      }
      while (v95);
    }
  }
  if (v16 < v13)
  {
    v20 = *(_QWORD *)(a1 + 8) + 8;
    v21 = 24 - *(_DWORD *)(a1 + 52);
    v22 = v16;
    do
    {
      v23 = (-1640531535 * *(_DWORD *)(v20 + v22)) >> v21;
      v24 = (v23 >> 3) & 0x1FFFFFE0;
      _X19 = v6 + 4 * v24;
      __asm
      {
        PRFM            #0, [X19]
        PRFM            #0, [X19,#0x40]
      }
      _X7 = v8 + 2 * v24;
      __asm { PRFM            #0, [X7] }
      v33 = *(unsigned int *)(v9 + 4 * (v22 & 7));
      *(_DWORD *)(v9 + 4 * (v22 & 7)) = v23;
      v34 = (v33 >> 3) & 0x1FFFFFE0;
      v35 = v6 + 4 * v34;
      v36 = (_BYTE *)(v8 + 2 * v34);
      v37 = (*v36 - 1) & 0x1F;
      *v36 = v37;
      v36[v37 + 16] = v33;
      *(_DWORD *)(v35 + 4 * v37) = v22++;
    }
    while (v22 < ((_DWORD)a2 - v12));
  }
  *(_DWORD *)(a1 + 44) = v13;
  v38 = (-1640531535 * *(_DWORD *)(v12 + v13 + 8)) >> (24 - v10);
  v39 = (v38 >> 3) & 0x1FFFFFE0;
  _X17 = v5 + 4 * v39;
  __asm
  {
    PRFM            #0, [X17]
    PRFM            #0, [X17,#0x40]
  }
  _X15 = v7 + 2 * v39;
  __asm { PRFM            #0, [X15] }
  v45 = *(unsigned int *)(v9 + 4 * (v13 & 7));
  *(_DWORD *)(v9 + 4 * (v13 & 7)) = v38;
  v46 = (v45 >> 3) & 0x1FFFFFE0;
  v47 = v5 + 4 * v46;
  v48 = (char *)(v7 + 2 * v46);
  v50 = (const __int16 *)(v48 + 16);
  v49 = *v48;
  v114 = vld2q_s16(v50);
  memset(v112, 0, sizeof(v112));
  v51 = vdupq_n_s8(v45);
  *(int8x8_t *)v114.val[0].i8 = vqmovn_s16((int16x8_t)vceqq_s8(v51, (int8x16_t)v114.val[0]));
  *(int8x8_t *)v51.i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v51, (int8x16_t)v114.val[1])), *(int8x8_t *)v114.val[0].i8, 2uLL);
  v52 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v114.val[0].i8), vuzp1_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v114.val[0].i8), 4uLL).u32[0];
  if (v52)
  {
    v53 = 0;
    v54 = __ROR4__(v52, v49);
    v55 = (1 << v19) - 1;
    while (1)
    {
      v56 = *(unsigned int *)(v47 + 4 * ((__clz(__rbit64(v54)) + v49) & 0x1F));
      if (v56 < v18)
        break;
      if (v56 >= v15)
        v57 = v12;
      else
        v57 = v11;
      _X3 = v57 + v56;
      __asm { PRFM            #0, [X3] }
      v60 = v53 + 1;
      *((_DWORD *)v112 + v53) = v56;
      v54 &= v54 - 1;
      if (v54)
      {
        _ZF = v55 == (_DWORD)v53++;
        if (!_ZF)
          continue;
      }
      goto LABEL_25;
    }
    v60 = v53;
  }
  else
  {
    v60 = 0;
  }
LABEL_25:
  v61 = (v49 - 1) & 0x1F;
  *v48 = v61;
  v48[v61 + 16] = v45;
  v62 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v62 + 1;
  *(_DWORD *)(v47 + 4 * v61) = v62;
  if (v60)
  {
    v63 = 0;
    v110 = (_QWORD *)(v12 + v15);
    v109 = (char *)(v11 + v15);
    v64 = a3 - 7;
    v106 = a3 - 1;
    v107 = a3 - 3;
    v108 = v13 + 2;
    v104 = a2 + 1;
    v105 = v12 + 8;
    v65 = 3;
    while (1)
    {
      v66 = *((unsigned int *)v112 + v63);
      if (v66 >= v15)
      {
        v73 = (_QWORD *)(v12 + v66);
        if (*(unsigned __int8 *)(v12 + v66 + v65) != *((unsigned __int8 *)a2 + v65))
          goto LABEL_47;
        if (v64 <= (unint64_t)a2)
        {
          v75 = a2;
        }
        else
        {
          v74 = *a2 ^ *v73;
          if (v74)
          {
            result = __clz(__rbit64(v74)) >> 3;
            goto LABEL_45;
          }
          v76 = 0;
          while (1)
          {
            v75 = &v104[v76];
            if ((unint64_t)&v104[v76] >= v64)
              break;
            v77 = *(_QWORD *)(v105 + v66 + v76 * 8);
            ++v76;
            v78 = *v75 ^ v77;
            if (v78)
            {
              result = v76 * 8 + (__clz(__rbit64(v78)) >> 3);
              goto LABEL_45;
            }
          }
          v73 = (_QWORD *)(v105 + v66 + v76 * 8);
        }
        if ((unint64_t)v75 < v107 && *(_DWORD *)v73 == *(_DWORD *)v75)
        {
          v75 = (_QWORD *)((char *)v75 + 4);
          v73 = (_QWORD *)((char *)v73 + 4);
        }
        if ((unint64_t)v75 < v106 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v75)
        {
          v75 = (_QWORD *)((char *)v75 + 2);
          v73 = (_QWORD *)((char *)v73 + 2);
        }
        if ((unint64_t)v75 < a3 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v75)
          v75 = (_QWORD *)((char *)v75 + 1);
        result = (char *)v75 - (char *)a2;
      }
      else
      {
        v67 = v11 + v66;
        if (*(_DWORD *)(v11 + v66) != *(_DWORD *)a2)
          goto LABEL_47;
        v68 = v11;
        v69 = v12;
        v70 = a3;
        v71 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v67 + 4), a3, v109, v110);
        a3 = v70;
        v12 = v69;
        v11 = v68;
        result = v71 + 4;
      }
LABEL_45:
      if (result > v65)
      {
        *a4 = v108 - v66;
        v65 = result;
        if ((_QWORD *)((char *)a2 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_47:
      ++v63;
      result = v65;
      if (v63 == v60)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_extDict_4_6(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  const char *v51;
  uint64_t v52;
  int8x16_t v53;
  int8x8_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t result;
  _QWORD *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int v84;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  char *v114;
  _QWORD *v115;
  _OWORD v117[16];
  uint64_t v118;
  int8x16x4_t v119;

  v118 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = (_DWORD)a2 - v12;
  v14 = 1 << *(_DWORD *)(a1 + 240);
  v15 = *(unsigned int *)(a1 + 24);
  v16 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v12 - *(_DWORD *)(a1 + 28) > v14 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v18 = (_DWORD)a2 - v12 - v14;
  else
    v18 = *(_DWORD *)(a1 + 28);
  v19 = *(_DWORD *)(a1 + 252);
  if (v19 >= 6)
    LOBYTE(v19) = 6;
  if (v13 - v16 >= 0x181)
  {
    if (v16 <= 0xFFFFFF9F)
    {
      v82 = v16 + 96;
      do
      {
        v83 = (-1640531535 * *(_DWORD *)(v12 + 8 + v16)) >> (24 - v10);
        v84 = (v83 >> 2) & 0x3FFFFFC0;
        _X6 = v5 + 4 * v84;
        __asm
        {
          PRFM            #0, [X6]
          PRFM            #0, [X6,#0x40]
        }
        _X5 = v7 + 2 * v84;
        __asm
        {
          PRFM            #0, [X5]
          PRFM            #0, [X5,#0x40]
        }
        v91 = *(unsigned int *)(v9 + 4 * (v16 & 7));
        *(_DWORD *)(v9 + 4 * (v16 & 7)) = v83;
        v92 = (v91 >> 2) & 0x3FFFFFC0;
        v93 = v5 + 4 * v92;
        v94 = (_BYTE *)(v7 + 2 * v92);
        v95 = (*v94 - 1) & 0x3F;
        *v94 = v95;
        v94[v95 + 16] = v91;
        *(_DWORD *)(v93 + 4 * v95) = v16++;
      }
      while (v16 < v82);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v96 = v13 - 32;
    LODWORD(v16) = v13 - 32;
    v97 = (_DWORD)a2 + 1 - (v12 + v96);
    if ((v97 + 1) < 8)
      v98 = v97 + 1;
    else
      v98 = 8;
    if ((unint64_t)a2 + 1 >= v12 + v96)
      v99 = v98;
    else
      v99 = 0;
    if (v96 < v99 + (int)v96)
    {
      v100 = 24 - *(_DWORD *)(a1 + 52);
      do
      {
        v101 = (-1640531535 * *(_DWORD *)(v12 + v96)) >> v100;
        v102 = (v101 >> 2) & 0x3FFFFFC0;
        _X19 = v6 + 4 * v102;
        __asm
        {
          PRFM            #0, [X19]
          PRFM            #0, [X19,#0x40]
        }
        _X7 = v8 + 2 * v102;
        __asm
        {
          PRFM            #0, [X7]
          PRFM            #0, [X7,#0x40]
        }
        *(_DWORD *)(a1 + 4 * (v96++ & 7) + 64) = v101;
        --v99;
      }
      while (v99);
    }
  }
  if (v16 < v13)
  {
    v20 = *(_QWORD *)(a1 + 8) + 8;
    v21 = 24 - *(_DWORD *)(a1 + 52);
    v22 = v16;
    do
    {
      v23 = (-1640531535 * *(_DWORD *)(v20 + v22)) >> v21;
      v24 = (v23 >> 2) & 0x3FFFFFC0;
      _X19 = v6 + 4 * v24;
      __asm
      {
        PRFM            #0, [X19]
        PRFM            #0, [X19,#0x40]
      }
      _X7 = v8 + 2 * v24;
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X7,#0x40]
      }
      v34 = *(unsigned int *)(v9 + 4 * (v22 & 7));
      *(_DWORD *)(v9 + 4 * (v22 & 7)) = v23;
      v35 = (v34 >> 2) & 0x3FFFFFC0;
      v36 = v6 + 4 * v35;
      v37 = (_BYTE *)(v8 + 2 * v35);
      v38 = (*v37 - 1) & 0x3F;
      *v37 = v38;
      v37[v38 + 16] = v34;
      *(_DWORD *)(v36 + 4 * v38) = v22++;
    }
    while (v22 < ((_DWORD)a2 - v12));
  }
  *(_DWORD *)(a1 + 44) = v13;
  v39 = (-1640531535 * *(_DWORD *)(v12 + v13 + 8)) >> (24 - v10);
  v40 = (v39 >> 2) & 0x3FFFFFC0;
  _X17 = v5 + 4 * v40;
  __asm
  {
    PRFM            #0, [X17]
    PRFM            #0, [X17,#0x40]
  }
  _X15 = v7 + 2 * v40;
  __asm
  {
    PRFM            #0, [X15]
    PRFM            #0, [X15,#0x40]
  }
  v47 = *(unsigned int *)(v9 + 4 * (v13 & 7));
  *(_DWORD *)(v9 + 4 * (v13 & 7)) = v39;
  v48 = (v47 >> 2) & 0x3FFFFFC0;
  v49 = (char *)(v7 + 2 * v48);
  v51 = v49 + 16;
  v50 = *v49;
  v52 = v5 + 4 * v48;
  memset(v117, 0, sizeof(v117));
  v119 = vld4q_s8(v51);
  v53 = vdupq_n_s8(v47);
  v119.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v119.val[3], v53), vceqq_s8(v119.val[2], v53), 1uLL), vsriq_n_s8(vceqq_s8(v119.val[1], v53), vceqq_s8(v119.val[0], v53), 1uLL), 2uLL);
  v54 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v119.val[0], v119.val[0], 4uLL), 4uLL);
  if (v54)
  {
    v55 = 0;
    v56 = __ROR8__(*(_QWORD *)&v54, v50);
    v57 = (1 << v19) - 1;
    while (1)
    {
      v58 = *(unsigned int *)(v52 + 4 * ((__clz(__rbit64(v56)) + v50) & 0x3F));
      if (v58 < v18)
        break;
      if (v58 >= v15)
        v59 = v12;
      else
        v59 = v11;
      _X3 = v59 + v58;
      __asm { PRFM            #0, [X3] }
      v62 = v55 + 1;
      *((_DWORD *)v117 + v55) = v58;
      v56 &= v56 - 1;
      if (v56)
      {
        _ZF = v57 == (_DWORD)v55++;
        if (!_ZF)
          continue;
      }
      goto LABEL_25;
    }
    v62 = v55;
  }
  else
  {
    v62 = 0;
  }
LABEL_25:
  v63 = (v50 - 1) & 0x3F;
  *v49 = v63;
  v49[v63 + 16] = v47;
  v64 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v64 + 1;
  *(_DWORD *)(v52 + 4 * v63) = v64;
  if (v62)
  {
    v65 = 0;
    v115 = (_QWORD *)(v12 + v15);
    v114 = (char *)(v11 + v15);
    v66 = a3 - 7;
    v111 = a3 - 1;
    v112 = a3 - 3;
    v113 = v13 + 2;
    v109 = a2 + 1;
    v110 = v12 + 8;
    v67 = 3;
    while (1)
    {
      v68 = *((unsigned int *)v117 + v65);
      if (v68 >= v15)
      {
        v76 = (_QWORD *)(v12 + v68);
        if (*(unsigned __int8 *)(v12 + v68 + v67) != *((unsigned __int8 *)a2 + v67))
          goto LABEL_47;
        if (v66 <= (unint64_t)a2)
        {
          v78 = a2;
        }
        else
        {
          v77 = *a2 ^ *v76;
          if (v77)
          {
            result = __clz(__rbit64(v77)) >> 3;
            goto LABEL_45;
          }
          v79 = 0;
          while (1)
          {
            v78 = &v109[v79];
            if ((unint64_t)&v109[v79] >= v66)
              break;
            v80 = *(_QWORD *)(v110 + v68 + v79 * 8);
            ++v79;
            v81 = *v78 ^ v80;
            if (v81)
            {
              result = v79 * 8 + (__clz(__rbit64(v81)) >> 3);
              goto LABEL_45;
            }
          }
          v76 = (_QWORD *)(v110 + v68 + v79 * 8);
        }
        if ((unint64_t)v78 < v112 && *(_DWORD *)v76 == *(_DWORD *)v78)
        {
          v78 = (_QWORD *)((char *)v78 + 4);
          v76 = (_QWORD *)((char *)v76 + 4);
        }
        if ((unint64_t)v78 < v111 && *(unsigned __int16 *)v76 == *(unsigned __int16 *)v78)
        {
          v78 = (_QWORD *)((char *)v78 + 2);
          v76 = (_QWORD *)((char *)v76 + 2);
        }
        if ((unint64_t)v78 < a3 && *(unsigned __int8 *)v76 == *(unsigned __int8 *)v78)
          v78 = (_QWORD *)((char *)v78 + 1);
        result = (char *)v78 - (char *)a2;
      }
      else
      {
        v69 = v11 + v68;
        if (*(_DWORD *)(v11 + v68) != *(_DWORD *)a2)
          goto LABEL_47;
        v70 = v15;
        v71 = v11;
        v72 = v12;
        v73 = a3;
        v74 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v69 + 4), a3, v114, v115);
        a3 = v73;
        v12 = v72;
        v11 = v71;
        v15 = v70;
        result = v74 + 4;
      }
LABEL_45:
      if (result > v67)
      {
        *a4 = v113 - v68;
        v67 = result;
        if ((_QWORD *)((char *)a2 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_47:
      ++v65;
      result = v67;
      if (v65 == v62)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_extDict_5_4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t *v46;
  __int8 v47;
  int16x8_t v48;
  uint64x2_t v49;
  uint64x2_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t result;
  _QWORD *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  char *v106;
  _QWORD *v107;
  _OWORD v109[16];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = (_DWORD)a2 - v12;
  v14 = 1 << *(_DWORD *)(a1 + 240);
  v15 = *(unsigned int *)(a1 + 24);
  v16 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v12 - *(_DWORD *)(a1 + 28) > v14 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v18 = (_DWORD)a2 - v12 - v14;
  else
    v18 = *(_DWORD *)(a1 + 28);
  v19 = *(_DWORD *)(a1 + 252);
  if (v19 >= 4)
    LOBYTE(v19) = 4;
  if (v13 - v16 >= 0x181)
  {
    if (v16 <= 0xFFFFFF9F)
    {
      v78 = v16 + 96;
      do
      {
        v79 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v12 + 8 + v16)) >> (56 - v10);
        v80 = (v79 >> 4) & 0xFFFFFF0;
        _X6 = v5 + 4 * v80;
        __asm { PRFM            #0, [X6] }
        _X5 = v7 + 2 * v80;
        __asm { PRFM            #0, [X5] }
        v85 = *(unsigned int *)(v9 + 4 * (v16 & 7));
        *(_DWORD *)(v9 + 4 * (v16 & 7)) = v79;
        v86 = (v85 >> 4) & 0xFFFFFF0;
        v87 = v5 + 4 * v86;
        v88 = (_BYTE *)(v7 + 2 * v86);
        v89 = (*v88 - 1) & 0xF;
        *v88 = v89;
        v88[v89 + 16] = v85;
        *(_DWORD *)(v87 + 4 * v89) = v16++;
      }
      while (v16 < v78);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v90 = v13 - 32;
    LODWORD(v16) = v13 - 32;
    v91 = (_DWORD)a2 + 1 - (v12 + v90);
    if ((v91 + 1) < 8)
      v92 = v91 + 1;
    else
      v92 = 8;
    if ((unint64_t)a2 + 1 >= v12 + v90)
      v93 = v92;
    else
      v93 = 0;
    if (v90 < v93 + (int)v90)
    {
      v94 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v95 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v12 + v90)) >> v94;
        v96 = (v95 >> 4) & 0xFFFFFF0;
        _X19 = v6 + 4 * v96;
        __asm { PRFM            #0, [X19] }
        _X7 = v8 + 2 * v96;
        __asm { PRFM            #0, [X7] }
        *(_DWORD *)(a1 + 4 * (v90++ & 7) + 64) = v95;
        --v93;
      }
      while (v93);
    }
  }
  if (v16 < v13)
  {
    v20 = *(_QWORD *)(a1 + 8) + 8;
    v21 = 56 - *(_DWORD *)(a1 + 52);
    v22 = v16;
    do
    {
      v23 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v20 + v22)) >> v21;
      v24 = (v23 >> 4) & 0xFFFFFF0;
      _X19 = v6 + 4 * v24;
      __asm { PRFM            #0, [X19] }
      _X7 = v8 + 2 * v24;
      __asm { PRFM            #0, [X7] }
      v32 = *(unsigned int *)(v9 + 4 * (v22 & 7));
      *(_DWORD *)(v9 + 4 * (v22 & 7)) = v23;
      v33 = (v32 >> 4) & 0xFFFFFF0;
      v34 = v6 + 4 * v33;
      v35 = (_BYTE *)(v8 + 2 * v33);
      v36 = (*v35 - 1) & 0xF;
      *v35 = v36;
      v35[v36 + 16] = v32;
      *(_DWORD *)(v34 + 4 * v36) = v22++;
    }
    while (v22 < ((_DWORD)a2 - v12));
  }
  *(_DWORD *)(a1 + 44) = v13;
  v37 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v12 + v13 + 8)) >> (56 - v10);
  v38 = (v37 >> 4) & 0xFFFFFF0;
  _X17 = v5 + 4 * v38;
  __asm { PRFM            #0, [X17] }
  _X15 = v7 + 2 * v38;
  __asm { PRFM            #0, [X15] }
  v43 = *(unsigned int *)(v9 + 4 * (v13 & 7));
  *(_DWORD *)(v9 + 4 * (v13 & 7)) = v37;
  v44 = (v43 >> 4) & 0xFFFFFF0;
  v45 = v5 + 4 * v44;
  v46 = (int8x16_t *)(v7 + 2 * v44);
  v47 = v46->i8[0];
  memset(v109, 0, sizeof(v109));
  v48 = vshlq_n_s16((int16x8_t)vceqq_s8(v46[1], vdupq_n_s8(v43)), 7uLL);
  v49 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v48, v48, 0xEuLL), 0xEuLL);
  v50 = vsraq_n_u64(v49, v49, 0x1CuLL);
  if (v50.u8[0] | (unsigned __int16)(v50.u8[8] << 8))
  {
    v51 = 0;
    v52 = ((unsigned __int16)(v50.u8[0] | (v50.u8[8] << 8)) >> (v47 & 0xF)) | (unsigned __int16)((v50.u8[0] | (v50.u8[8] << 8)) << (-v47 & 0xF));
    v53 = (1 << v19) - 1;
    while (1)
    {
      v54 = *(unsigned int *)(v45 + 4 * ((__clz(__rbit64(v52)) + v47) & 0xF));
      if (v54 < v18)
        break;
      if (v54 >= v15)
        v55 = v12;
      else
        v55 = v11;
      _X3 = v55 + v54;
      __asm { PRFM            #0, [X3] }
      v58 = v51 + 1;
      *((_DWORD *)v109 + v51) = v54;
      v52 &= v52 - 1;
      if (v52)
      {
        _ZF = v53 == (_DWORD)v51++;
        if (!_ZF)
          continue;
      }
      goto LABEL_25;
    }
    v58 = v51;
  }
  else
  {
    v58 = 0;
  }
LABEL_25:
  v59 = (v47 - 1) & 0xF;
  v46->i8[0] = v59;
  v46[1].i8[v59] = v43;
  v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v45 + 4 * v59) = v60;
  if (v58)
  {
    v61 = 0;
    v107 = (_QWORD *)(v12 + v15);
    v106 = (char *)(v11 + v15);
    v62 = a3 - 7;
    v103 = a3 - 1;
    v104 = a3 - 3;
    v105 = v13 + 2;
    v101 = a2 + 1;
    v102 = v12 + 8;
    v63 = 3;
    while (1)
    {
      v64 = *((unsigned int *)v109 + v61);
      if (v64 >= v15)
      {
        v72 = (_QWORD *)(v12 + v64);
        if (*(unsigned __int8 *)(v12 + v64 + v63) != *((unsigned __int8 *)a2 + v63))
          goto LABEL_47;
        if (v62 <= (unint64_t)a2)
        {
          v74 = a2;
        }
        else
        {
          v73 = *a2 ^ *v72;
          if (v73)
          {
            result = __clz(__rbit64(v73)) >> 3;
            goto LABEL_45;
          }
          v75 = 0;
          while (1)
          {
            v74 = &v101[v75];
            if ((unint64_t)&v101[v75] >= v62)
              break;
            v76 = *(_QWORD *)(v102 + v64 + v75 * 8);
            ++v75;
            v77 = *v74 ^ v76;
            if (v77)
            {
              result = v75 * 8 + (__clz(__rbit64(v77)) >> 3);
              goto LABEL_45;
            }
          }
          v72 = (_QWORD *)(v102 + v64 + v75 * 8);
        }
        if ((unint64_t)v74 < v104 && *(_DWORD *)v72 == *(_DWORD *)v74)
        {
          v74 = (_QWORD *)((char *)v74 + 4);
          v72 = (_QWORD *)((char *)v72 + 4);
        }
        if ((unint64_t)v74 < v103 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v74)
        {
          v74 = (_QWORD *)((char *)v74 + 2);
          v72 = (_QWORD *)((char *)v72 + 2);
        }
        if ((unint64_t)v74 < a3 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v74)
          v74 = (_QWORD *)((char *)v74 + 1);
        result = (char *)v74 - (char *)a2;
      }
      else
      {
        v65 = v11 + v64;
        if (*(_DWORD *)(v11 + v64) != *(_DWORD *)a2)
          goto LABEL_47;
        v66 = v15;
        v67 = v11;
        v68 = v12;
        v69 = a3;
        v70 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v65 + 4), a3, v106, v107);
        a3 = v69;
        v12 = v68;
        v11 = v67;
        v15 = v66;
        result = v70 + 4;
      }
LABEL_45:
      if (result > v63)
      {
        *a4 = v105 - v64;
        v63 = result;
        if ((_QWORD *)((char *)a2 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_47:
      ++v61;
      result = v63;
      if (v61 == v58)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_extDict_5_5(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char v49;
  const __int16 *v50;
  int8x16_t v51;
  unsigned __int32 v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t result;
  _QWORD *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int v109;
  char *v110;
  _QWORD *v111;
  _OWORD v113[16];
  uint64_t v114;
  int16x8x2_t v115;

  v114 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = (_DWORD)a2 - v12;
  v14 = 1 << *(_DWORD *)(a1 + 240);
  v15 = *(unsigned int *)(a1 + 24);
  v16 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v12 - *(_DWORD *)(a1 + 28) > v14 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v18 = (_DWORD)a2 - v12 - v14;
  else
    v18 = *(_DWORD *)(a1 + 28);
  v19 = *(_DWORD *)(a1 + 252);
  if (v19 >= 5)
    LOBYTE(v19) = 5;
  if (v13 - v16 >= 0x181)
  {
    if (v16 <= 0xFFFFFF9F)
    {
      v80 = v16 + 96;
      do
      {
        v81 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v12 + 8 + v16)) >> (56 - v10);
        v82 = (v81 >> 3) & 0x1FFFFFE0;
        _X6 = v5 + 4 * v82;
        __asm
        {
          PRFM            #0, [X6]
          PRFM            #0, [X6,#0x40]
        }
        _X5 = v7 + 2 * v82;
        __asm { PRFM            #0, [X5] }
        v88 = *(unsigned int *)(v9 + 4 * (v16 & 7));
        *(_DWORD *)(v9 + 4 * (v16 & 7)) = v81;
        v89 = (v88 >> 3) & 0x1FFFFFE0;
        v90 = v5 + 4 * v89;
        v91 = (_BYTE *)(v7 + 2 * v89);
        v92 = (*v91 - 1) & 0x1F;
        *v91 = v92;
        v91[v92 + 16] = v88;
        *(_DWORD *)(v90 + 4 * v92) = v16++;
      }
      while (v16 < v80);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v93 = v13 - 32;
    LODWORD(v16) = v13 - 32;
    v94 = (_DWORD)a2 + 1 - (v12 + v93);
    if ((v94 + 1) < 8)
      v95 = v94 + 1;
    else
      v95 = 8;
    if ((unint64_t)a2 + 1 >= v12 + v93)
      v96 = v95;
    else
      v96 = 0;
    if (v93 < v96 + (int)v93)
    {
      v97 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v98 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v12 + v93)) >> v97;
        v99 = (v98 >> 3) & 0x1FFFFFE0;
        _X19 = v6 + 4 * v99;
        __asm
        {
          PRFM            #0, [X19]
          PRFM            #0, [X19,#0x40]
        }
        _X7 = v8 + 2 * v99;
        __asm { PRFM            #0, [X7] }
        *(_DWORD *)(a1 + 4 * (v93++ & 7) + 64) = v98;
        --v96;
      }
      while (v96);
    }
  }
  if (v16 < v13)
  {
    v20 = *(_QWORD *)(a1 + 8) + 8;
    v21 = 56 - *(_DWORD *)(a1 + 52);
    v22 = v16;
    do
    {
      v23 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v20 + v22)) >> v21;
      v24 = (v23 >> 3) & 0x1FFFFFE0;
      _X19 = v6 + 4 * v24;
      __asm
      {
        PRFM            #0, [X19]
        PRFM            #0, [X19,#0x40]
      }
      _X7 = v8 + 2 * v24;
      __asm { PRFM            #0, [X7] }
      v33 = *(unsigned int *)(v9 + 4 * (v22 & 7));
      *(_DWORD *)(v9 + 4 * (v22 & 7)) = v23;
      v34 = (v33 >> 3) & 0x1FFFFFE0;
      v35 = v6 + 4 * v34;
      v36 = (_BYTE *)(v8 + 2 * v34);
      v37 = (*v36 - 1) & 0x1F;
      *v36 = v37;
      v36[v37 + 16] = v33;
      *(_DWORD *)(v35 + 4 * v37) = v22++;
    }
    while (v22 < ((_DWORD)a2 - v12));
  }
  *(_DWORD *)(a1 + 44) = v13;
  v38 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v12 + v13 + 8)) >> (56 - v10);
  v39 = (v38 >> 3) & 0x1FFFFFE0;
  _X17 = v5 + 4 * v39;
  __asm
  {
    PRFM            #0, [X17]
    PRFM            #0, [X17,#0x40]
  }
  _X15 = v7 + 2 * v39;
  __asm { PRFM            #0, [X15] }
  v45 = *(unsigned int *)(v9 + 4 * (v13 & 7));
  *(_DWORD *)(v9 + 4 * (v13 & 7)) = v38;
  v46 = (v45 >> 3) & 0x1FFFFFE0;
  v47 = v5 + 4 * v46;
  v48 = (char *)(v7 + 2 * v46);
  v50 = (const __int16 *)(v48 + 16);
  v49 = *v48;
  v115 = vld2q_s16(v50);
  memset(v113, 0, sizeof(v113));
  v51 = vdupq_n_s8(v45);
  *(int8x8_t *)v115.val[0].i8 = vqmovn_s16((int16x8_t)vceqq_s8(v51, (int8x16_t)v115.val[0]));
  *(int8x8_t *)v51.i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v51, (int8x16_t)v115.val[1])), *(int8x8_t *)v115.val[0].i8, 2uLL);
  v52 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v115.val[0].i8), vuzp1_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v115.val[0].i8), 4uLL).u32[0];
  if (v52)
  {
    v53 = 0;
    v54 = __ROR4__(v52, v49);
    v55 = (1 << v19) - 1;
    while (1)
    {
      v56 = *(unsigned int *)(v47 + 4 * ((__clz(__rbit64(v54)) + v49) & 0x1F));
      if (v56 < v18)
        break;
      if (v56 >= v15)
        v57 = v12;
      else
        v57 = v11;
      _X3 = v57 + v56;
      __asm { PRFM            #0, [X3] }
      v60 = v53 + 1;
      *((_DWORD *)v113 + v53) = v56;
      v54 &= v54 - 1;
      if (v54)
      {
        _ZF = v55 == (_DWORD)v53++;
        if (!_ZF)
          continue;
      }
      goto LABEL_25;
    }
    v60 = v53;
  }
  else
  {
    v60 = 0;
  }
LABEL_25:
  v61 = (v49 - 1) & 0x1F;
  *v48 = v61;
  v48[v61 + 16] = v45;
  v62 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v62 + 1;
  *(_DWORD *)(v47 + 4 * v61) = v62;
  if (v60)
  {
    v63 = 0;
    v111 = (_QWORD *)(v12 + v15);
    v110 = (char *)(v11 + v15);
    v64 = a3 - 7;
    v107 = a3 - 1;
    v108 = a3 - 3;
    v109 = v13 + 2;
    v105 = a2 + 1;
    v106 = v12 + 8;
    v65 = 3;
    while (1)
    {
      v66 = *((unsigned int *)v113 + v63);
      if (v66 >= v15)
      {
        v74 = (_QWORD *)(v12 + v66);
        if (*(unsigned __int8 *)(v12 + v66 + v65) != *((unsigned __int8 *)a2 + v65))
          goto LABEL_47;
        if (v64 <= (unint64_t)a2)
        {
          v76 = a2;
        }
        else
        {
          v75 = *a2 ^ *v74;
          if (v75)
          {
            result = __clz(__rbit64(v75)) >> 3;
            goto LABEL_45;
          }
          v77 = 0;
          while (1)
          {
            v76 = &v105[v77];
            if ((unint64_t)&v105[v77] >= v64)
              break;
            v78 = *(_QWORD *)(v106 + v66 + v77 * 8);
            ++v77;
            v79 = *v76 ^ v78;
            if (v79)
            {
              result = v77 * 8 + (__clz(__rbit64(v79)) >> 3);
              goto LABEL_45;
            }
          }
          v74 = (_QWORD *)(v106 + v66 + v77 * 8);
        }
        if ((unint64_t)v76 < v108 && *(_DWORD *)v74 == *(_DWORD *)v76)
        {
          v76 = (_QWORD *)((char *)v76 + 4);
          v74 = (_QWORD *)((char *)v74 + 4);
        }
        if ((unint64_t)v76 < v107 && *(unsigned __int16 *)v74 == *(unsigned __int16 *)v76)
        {
          v76 = (_QWORD *)((char *)v76 + 2);
          v74 = (_QWORD *)((char *)v74 + 2);
        }
        if ((unint64_t)v76 < a3 && *(unsigned __int8 *)v74 == *(unsigned __int8 *)v76)
          v76 = (_QWORD *)((char *)v76 + 1);
        result = (char *)v76 - (char *)a2;
      }
      else
      {
        v67 = v11 + v66;
        if (*(_DWORD *)(v11 + v66) != *(_DWORD *)a2)
          goto LABEL_47;
        v68 = v15;
        v69 = v11;
        v70 = v12;
        v71 = a3;
        v72 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v67 + 4), a3, v110, v111);
        a3 = v71;
        v12 = v70;
        v11 = v69;
        v15 = v68;
        result = v72 + 4;
      }
LABEL_45:
      if (result > v65)
      {
        *a4 = v109 - v66;
        v65 = result;
        if ((_QWORD *)((char *)a2 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_47:
      ++v63;
      result = v65;
      if (v63 == v60)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_extDict_5_6(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  const char *v51;
  uint64_t v52;
  int8x16_t v53;
  int8x8_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t result;
  _QWORD *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  char *v114;
  _QWORD *v115;
  _OWORD v117[16];
  uint64_t v118;
  int8x16x4_t v119;

  v118 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = (_DWORD)a2 - v12;
  v14 = 1 << *(_DWORD *)(a1 + 240);
  v15 = *(unsigned int *)(a1 + 24);
  v16 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v12 - *(_DWORD *)(a1 + 28) > v14 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v18 = (_DWORD)a2 - v12 - v14;
  else
    v18 = *(_DWORD *)(a1 + 28);
  v19 = *(_DWORD *)(a1 + 252);
  if (v19 >= 6)
    LOBYTE(v19) = 6;
  if (v13 - v16 >= 0x181)
  {
    if (v16 <= 0xFFFFFF9F)
    {
      v82 = v16 + 96;
      do
      {
        v83 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v12 + 8 + v16)) >> (56 - v10);
        v84 = (v83 >> 2) & 0x3FFFFFC0;
        _X6 = v5 + 4 * v84;
        __asm
        {
          PRFM            #0, [X6]
          PRFM            #0, [X6,#0x40]
        }
        _X5 = v7 + 2 * v84;
        __asm
        {
          PRFM            #0, [X5]
          PRFM            #0, [X5,#0x40]
        }
        v91 = *(unsigned int *)(v9 + 4 * (v16 & 7));
        *(_DWORD *)(v9 + 4 * (v16 & 7)) = v83;
        v92 = (v91 >> 2) & 0x3FFFFFC0;
        v93 = v5 + 4 * v92;
        v94 = (_BYTE *)(v7 + 2 * v92);
        v95 = (*v94 - 1) & 0x3F;
        *v94 = v95;
        v94[v95 + 16] = v91;
        *(_DWORD *)(v93 + 4 * v95) = v16++;
      }
      while (v16 < v82);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v96 = v13 - 32;
    LODWORD(v16) = v13 - 32;
    v97 = (_DWORD)a2 + 1 - (v12 + v96);
    if ((v97 + 1) < 8)
      v98 = v97 + 1;
    else
      v98 = 8;
    if ((unint64_t)a2 + 1 >= v12 + v96)
      v99 = v98;
    else
      v99 = 0;
    if (v96 < v99 + (int)v96)
    {
      v100 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v101 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v12 + v96)) >> v100;
        v102 = (v101 >> 2) & 0x3FFFFFC0;
        _X19 = v6 + 4 * v102;
        __asm
        {
          PRFM            #0, [X19]
          PRFM            #0, [X19,#0x40]
        }
        _X7 = v8 + 2 * v102;
        __asm
        {
          PRFM            #0, [X7]
          PRFM            #0, [X7,#0x40]
        }
        *(_DWORD *)(a1 + 4 * (v96++ & 7) + 64) = v101;
        --v99;
      }
      while (v99);
    }
  }
  if (v16 < v13)
  {
    v20 = *(_QWORD *)(a1 + 8) + 8;
    v21 = 56 - *(_DWORD *)(a1 + 52);
    v22 = v16;
    do
    {
      v23 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v20 + v22)) >> v21;
      v24 = (v23 >> 2) & 0x3FFFFFC0;
      _X19 = v6 + 4 * v24;
      __asm
      {
        PRFM            #0, [X19]
        PRFM            #0, [X19,#0x40]
      }
      _X7 = v8 + 2 * v24;
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X7,#0x40]
      }
      v34 = *(unsigned int *)(v9 + 4 * (v22 & 7));
      *(_DWORD *)(v9 + 4 * (v22 & 7)) = v23;
      v35 = (v34 >> 2) & 0x3FFFFFC0;
      v36 = v6 + 4 * v35;
      v37 = (_BYTE *)(v8 + 2 * v35);
      v38 = (*v37 - 1) & 0x3F;
      *v37 = v38;
      v37[v38 + 16] = v34;
      *(_DWORD *)(v36 + 4 * v38) = v22++;
    }
    while (v22 < ((_DWORD)a2 - v12));
  }
  *(_DWORD *)(a1 + 44) = v13;
  v39 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v12 + v13 + 8)) >> (56 - v10);
  v40 = (v39 >> 2) & 0x3FFFFFC0;
  _X17 = v5 + 4 * v40;
  __asm
  {
    PRFM            #0, [X17]
    PRFM            #0, [X17,#0x40]
  }
  _X15 = v7 + 2 * v40;
  __asm
  {
    PRFM            #0, [X15]
    PRFM            #0, [X15,#0x40]
  }
  v47 = *(unsigned int *)(v9 + 4 * (v13 & 7));
  *(_DWORD *)(v9 + 4 * (v13 & 7)) = v39;
  v48 = (v47 >> 2) & 0x3FFFFFC0;
  v49 = (char *)(v7 + 2 * v48);
  v51 = v49 + 16;
  v50 = *v49;
  v52 = v5 + 4 * v48;
  memset(v117, 0, sizeof(v117));
  v119 = vld4q_s8(v51);
  v53 = vdupq_n_s8(v47);
  v119.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v119.val[3], v53), vceqq_s8(v119.val[2], v53), 1uLL), vsriq_n_s8(vceqq_s8(v119.val[1], v53), vceqq_s8(v119.val[0], v53), 1uLL), 2uLL);
  v54 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v119.val[0], v119.val[0], 4uLL), 4uLL);
  if (v54)
  {
    v55 = 0;
    v56 = __ROR8__(*(_QWORD *)&v54, v50);
    v57 = (1 << v19) - 1;
    while (1)
    {
      v58 = *(unsigned int *)(v52 + 4 * ((__clz(__rbit64(v56)) + v50) & 0x3F));
      if (v58 < v18)
        break;
      if (v58 >= v15)
        v59 = v12;
      else
        v59 = v11;
      _X3 = v59 + v58;
      __asm { PRFM            #0, [X3] }
      v62 = v55 + 1;
      *((_DWORD *)v117 + v55) = v58;
      v56 &= v56 - 1;
      if (v56)
      {
        _ZF = v57 == (_DWORD)v55++;
        if (!_ZF)
          continue;
      }
      goto LABEL_25;
    }
    v62 = v55;
  }
  else
  {
    v62 = 0;
  }
LABEL_25:
  v63 = (v50 - 1) & 0x3F;
  *v49 = v63;
  v49[v63 + 16] = v47;
  v64 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v64 + 1;
  *(_DWORD *)(v52 + 4 * v63) = v64;
  if (v62)
  {
    v65 = 0;
    v115 = (_QWORD *)(v12 + v15);
    v114 = (char *)(v11 + v15);
    v66 = a3 - 7;
    v111 = a3 - 1;
    v112 = a3 - 3;
    v113 = v13 + 2;
    v109 = a2 + 1;
    v110 = v12 + 8;
    v67 = 3;
    while (1)
    {
      v68 = *((unsigned int *)v117 + v65);
      if (v68 >= v15)
      {
        v76 = (_QWORD *)(v12 + v68);
        if (*(unsigned __int8 *)(v12 + v68 + v67) != *((unsigned __int8 *)a2 + v67))
          goto LABEL_47;
        if (v66 <= (unint64_t)a2)
        {
          v78 = a2;
        }
        else
        {
          v77 = *a2 ^ *v76;
          if (v77)
          {
            result = __clz(__rbit64(v77)) >> 3;
            goto LABEL_45;
          }
          v79 = 0;
          while (1)
          {
            v78 = &v109[v79];
            if ((unint64_t)&v109[v79] >= v66)
              break;
            v80 = *(_QWORD *)(v110 + v68 + v79 * 8);
            ++v79;
            v81 = *v78 ^ v80;
            if (v81)
            {
              result = v79 * 8 + (__clz(__rbit64(v81)) >> 3);
              goto LABEL_45;
            }
          }
          v76 = (_QWORD *)(v110 + v68 + v79 * 8);
        }
        if ((unint64_t)v78 < v112 && *(_DWORD *)v76 == *(_DWORD *)v78)
        {
          v78 = (_QWORD *)((char *)v78 + 4);
          v76 = (_QWORD *)((char *)v76 + 4);
        }
        if ((unint64_t)v78 < v111 && *(unsigned __int16 *)v76 == *(unsigned __int16 *)v78)
        {
          v78 = (_QWORD *)((char *)v78 + 2);
          v76 = (_QWORD *)((char *)v76 + 2);
        }
        if ((unint64_t)v78 < a3 && *(unsigned __int8 *)v76 == *(unsigned __int8 *)v78)
          v78 = (_QWORD *)((char *)v78 + 1);
        result = (char *)v78 - (char *)a2;
      }
      else
      {
        v69 = v11 + v68;
        if (*(_DWORD *)(v11 + v68) != *(_DWORD *)a2)
          goto LABEL_47;
        v70 = v15;
        v71 = v11;
        v72 = v12;
        v73 = a3;
        v74 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v69 + 4), a3, v114, v115);
        a3 = v73;
        v12 = v72;
        v11 = v71;
        v15 = v70;
        result = v74 + 4;
      }
LABEL_45:
      if (result > v67)
      {
        *a4 = v113 - v68;
        v67 = result;
        if ((_QWORD *)((char *)a2 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_47:
      ++v65;
      result = v67;
      if (v65 == v62)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_extDict_6_4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t *v46;
  __int8 v47;
  int16x8_t v48;
  uint64x2_t v49;
  uint64x2_t v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t result;
  _QWORD *v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  char *v106;
  _QWORD *v107;
  _OWORD v109[16];
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = (_DWORD)a2 - v12;
  v14 = 1 << *(_DWORD *)(a1 + 240);
  v15 = *(unsigned int *)(a1 + 24);
  v16 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v12 - *(_DWORD *)(a1 + 28) > v14 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v18 = (_DWORD)a2 - v12 - v14;
  else
    v18 = *(_DWORD *)(a1 + 28);
  v19 = *(_DWORD *)(a1 + 252);
  if (v19 >= 4)
    LOBYTE(v19) = 4;
  if (v13 - v16 >= 0x181)
  {
    if (v16 <= 0xFFFFFF9F)
    {
      v78 = v16 + 96;
      do
      {
        v79 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v12 + 8 + v16)) >> (56 - v10);
        v80 = (v79 >> 4) & 0xFFFFFF0;
        _X6 = v5 + 4 * v80;
        __asm { PRFM            #0, [X6] }
        _X5 = v7 + 2 * v80;
        __asm { PRFM            #0, [X5] }
        v85 = *(unsigned int *)(v9 + 4 * (v16 & 7));
        *(_DWORD *)(v9 + 4 * (v16 & 7)) = v79;
        v86 = (v85 >> 4) & 0xFFFFFF0;
        v87 = v5 + 4 * v86;
        v88 = (_BYTE *)(v7 + 2 * v86);
        v89 = (*v88 - 1) & 0xF;
        *v88 = v89;
        v88[v89 + 16] = v85;
        *(_DWORD *)(v87 + 4 * v89) = v16++;
      }
      while (v16 < v78);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v90 = v13 - 32;
    LODWORD(v16) = v13 - 32;
    v91 = (_DWORD)a2 + 1 - (v12 + v90);
    if ((v91 + 1) < 8)
      v92 = v91 + 1;
    else
      v92 = 8;
    if ((unint64_t)a2 + 1 >= v12 + v90)
      v93 = v92;
    else
      v93 = 0;
    if (v90 < v93 + (int)v90)
    {
      v94 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v95 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v12 + v90)) >> v94;
        v96 = (v95 >> 4) & 0xFFFFFF0;
        _X19 = v6 + 4 * v96;
        __asm { PRFM            #0, [X19] }
        _X7 = v8 + 2 * v96;
        __asm { PRFM            #0, [X7] }
        *(_DWORD *)(a1 + 4 * (v90++ & 7) + 64) = v95;
        --v93;
      }
      while (v93);
    }
  }
  if (v16 < v13)
  {
    v20 = *(_QWORD *)(a1 + 8) + 8;
    v21 = 56 - *(_DWORD *)(a1 + 52);
    v22 = v16;
    do
    {
      v23 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v20 + v22)) >> v21;
      v24 = (v23 >> 4) & 0xFFFFFF0;
      _X19 = v6 + 4 * v24;
      __asm { PRFM            #0, [X19] }
      _X7 = v8 + 2 * v24;
      __asm { PRFM            #0, [X7] }
      v32 = *(unsigned int *)(v9 + 4 * (v22 & 7));
      *(_DWORD *)(v9 + 4 * (v22 & 7)) = v23;
      v33 = (v32 >> 4) & 0xFFFFFF0;
      v34 = v6 + 4 * v33;
      v35 = (_BYTE *)(v8 + 2 * v33);
      v36 = (*v35 - 1) & 0xF;
      *v35 = v36;
      v35[v36 + 16] = v32;
      *(_DWORD *)(v34 + 4 * v36) = v22++;
    }
    while (v22 < ((_DWORD)a2 - v12));
  }
  *(_DWORD *)(a1 + 44) = v13;
  v37 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v12 + v13 + 8)) >> (56 - v10);
  v38 = (v37 >> 4) & 0xFFFFFF0;
  _X17 = v5 + 4 * v38;
  __asm { PRFM            #0, [X17] }
  _X15 = v7 + 2 * v38;
  __asm { PRFM            #0, [X15] }
  v43 = *(unsigned int *)(v9 + 4 * (v13 & 7));
  *(_DWORD *)(v9 + 4 * (v13 & 7)) = v37;
  v44 = (v43 >> 4) & 0xFFFFFF0;
  v45 = v5 + 4 * v44;
  v46 = (int8x16_t *)(v7 + 2 * v44);
  v47 = v46->i8[0];
  memset(v109, 0, sizeof(v109));
  v48 = vshlq_n_s16((int16x8_t)vceqq_s8(v46[1], vdupq_n_s8(v43)), 7uLL);
  v49 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v48, v48, 0xEuLL), 0xEuLL);
  v50 = vsraq_n_u64(v49, v49, 0x1CuLL);
  if (v50.u8[0] | (unsigned __int16)(v50.u8[8] << 8))
  {
    v51 = 0;
    v52 = ((unsigned __int16)(v50.u8[0] | (v50.u8[8] << 8)) >> (v47 & 0xF)) | (unsigned __int16)((v50.u8[0] | (v50.u8[8] << 8)) << (-v47 & 0xF));
    v53 = (1 << v19) - 1;
    while (1)
    {
      v54 = *(unsigned int *)(v45 + 4 * ((__clz(__rbit64(v52)) + v47) & 0xF));
      if (v54 < v18)
        break;
      if (v54 >= v15)
        v55 = v12;
      else
        v55 = v11;
      _X3 = v55 + v54;
      __asm { PRFM            #0, [X3] }
      v58 = v51 + 1;
      *((_DWORD *)v109 + v51) = v54;
      v52 &= v52 - 1;
      if (v52)
      {
        _ZF = v53 == (_DWORD)v51++;
        if (!_ZF)
          continue;
      }
      goto LABEL_25;
    }
    v58 = v51;
  }
  else
  {
    v58 = 0;
  }
LABEL_25:
  v59 = (v47 - 1) & 0xF;
  v46->i8[0] = v59;
  v46[1].i8[v59] = v43;
  v60 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v60 + 1;
  *(_DWORD *)(v45 + 4 * v59) = v60;
  if (v58)
  {
    v61 = 0;
    v107 = (_QWORD *)(v12 + v15);
    v106 = (char *)(v11 + v15);
    v62 = a3 - 7;
    v103 = a3 - 1;
    v104 = a3 - 3;
    v105 = v13 + 2;
    v101 = a2 + 1;
    v102 = v12 + 8;
    v63 = 3;
    while (1)
    {
      v64 = *((unsigned int *)v109 + v61);
      if (v64 >= v15)
      {
        v72 = (_QWORD *)(v12 + v64);
        if (*(unsigned __int8 *)(v12 + v64 + v63) != *((unsigned __int8 *)a2 + v63))
          goto LABEL_47;
        if (v62 <= (unint64_t)a2)
        {
          v74 = a2;
        }
        else
        {
          v73 = *a2 ^ *v72;
          if (v73)
          {
            result = __clz(__rbit64(v73)) >> 3;
            goto LABEL_45;
          }
          v75 = 0;
          while (1)
          {
            v74 = &v101[v75];
            if ((unint64_t)&v101[v75] >= v62)
              break;
            v76 = *(_QWORD *)(v102 + v64 + v75 * 8);
            ++v75;
            v77 = *v74 ^ v76;
            if (v77)
            {
              result = v75 * 8 + (__clz(__rbit64(v77)) >> 3);
              goto LABEL_45;
            }
          }
          v72 = (_QWORD *)(v102 + v64 + v75 * 8);
        }
        if ((unint64_t)v74 < v104 && *(_DWORD *)v72 == *(_DWORD *)v74)
        {
          v74 = (_QWORD *)((char *)v74 + 4);
          v72 = (_QWORD *)((char *)v72 + 4);
        }
        if ((unint64_t)v74 < v103 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v74)
        {
          v74 = (_QWORD *)((char *)v74 + 2);
          v72 = (_QWORD *)((char *)v72 + 2);
        }
        if ((unint64_t)v74 < a3 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v74)
          v74 = (_QWORD *)((char *)v74 + 1);
        result = (char *)v74 - (char *)a2;
      }
      else
      {
        v65 = v11 + v64;
        if (*(_DWORD *)(v11 + v64) != *(_DWORD *)a2)
          goto LABEL_47;
        v66 = v15;
        v67 = v11;
        v68 = v12;
        v69 = a3;
        v70 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v65 + 4), a3, v106, v107);
        a3 = v69;
        v12 = v68;
        v11 = v67;
        v15 = v66;
        result = v70 + 4;
      }
LABEL_45:
      if (result > v63)
      {
        *a4 = v105 - v64;
        v63 = result;
        if ((_QWORD *)((char *)a2 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_47:
      ++v61;
      result = v63;
      if (v61 == v58)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_extDict_6_5(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char v49;
  const __int16 *v50;
  int8x16_t v51;
  unsigned __int32 v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t result;
  _QWORD *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unsigned int v109;
  char *v110;
  _QWORD *v111;
  _OWORD v113[16];
  uint64_t v114;
  int16x8x2_t v115;

  v114 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = (_DWORD)a2 - v12;
  v14 = 1 << *(_DWORD *)(a1 + 240);
  v15 = *(unsigned int *)(a1 + 24);
  v16 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v12 - *(_DWORD *)(a1 + 28) > v14 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v18 = (_DWORD)a2 - v12 - v14;
  else
    v18 = *(_DWORD *)(a1 + 28);
  v19 = *(_DWORD *)(a1 + 252);
  if (v19 >= 5)
    LOBYTE(v19) = 5;
  if (v13 - v16 >= 0x181)
  {
    if (v16 <= 0xFFFFFF9F)
    {
      v80 = v16 + 96;
      do
      {
        v81 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v12 + 8 + v16)) >> (56 - v10);
        v82 = (v81 >> 3) & 0x1FFFFFE0;
        _X6 = v5 + 4 * v82;
        __asm
        {
          PRFM            #0, [X6]
          PRFM            #0, [X6,#0x40]
        }
        _X5 = v7 + 2 * v82;
        __asm { PRFM            #0, [X5] }
        v88 = *(unsigned int *)(v9 + 4 * (v16 & 7));
        *(_DWORD *)(v9 + 4 * (v16 & 7)) = v81;
        v89 = (v88 >> 3) & 0x1FFFFFE0;
        v90 = v5 + 4 * v89;
        v91 = (_BYTE *)(v7 + 2 * v89);
        v92 = (*v91 - 1) & 0x1F;
        *v91 = v92;
        v91[v92 + 16] = v88;
        *(_DWORD *)(v90 + 4 * v92) = v16++;
      }
      while (v16 < v80);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v93 = v13 - 32;
    LODWORD(v16) = v13 - 32;
    v94 = (_DWORD)a2 + 1 - (v12 + v93);
    if ((v94 + 1) < 8)
      v95 = v94 + 1;
    else
      v95 = 8;
    if ((unint64_t)a2 + 1 >= v12 + v93)
      v96 = v95;
    else
      v96 = 0;
    if (v93 < v96 + (int)v93)
    {
      v97 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v98 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v12 + v93)) >> v97;
        v99 = (v98 >> 3) & 0x1FFFFFE0;
        _X19 = v6 + 4 * v99;
        __asm
        {
          PRFM            #0, [X19]
          PRFM            #0, [X19,#0x40]
        }
        _X7 = v8 + 2 * v99;
        __asm { PRFM            #0, [X7] }
        *(_DWORD *)(a1 + 4 * (v93++ & 7) + 64) = v98;
        --v96;
      }
      while (v96);
    }
  }
  if (v16 < v13)
  {
    v20 = *(_QWORD *)(a1 + 8) + 8;
    v21 = 56 - *(_DWORD *)(a1 + 52);
    v22 = v16;
    do
    {
      v23 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v20 + v22)) >> v21;
      v24 = (v23 >> 3) & 0x1FFFFFE0;
      _X19 = v6 + 4 * v24;
      __asm
      {
        PRFM            #0, [X19]
        PRFM            #0, [X19,#0x40]
      }
      _X7 = v8 + 2 * v24;
      __asm { PRFM            #0, [X7] }
      v33 = *(unsigned int *)(v9 + 4 * (v22 & 7));
      *(_DWORD *)(v9 + 4 * (v22 & 7)) = v23;
      v34 = (v33 >> 3) & 0x1FFFFFE0;
      v35 = v6 + 4 * v34;
      v36 = (_BYTE *)(v8 + 2 * v34);
      v37 = (*v36 - 1) & 0x1F;
      *v36 = v37;
      v36[v37 + 16] = v33;
      *(_DWORD *)(v35 + 4 * v37) = v22++;
    }
    while (v22 < ((_DWORD)a2 - v12));
  }
  *(_DWORD *)(a1 + 44) = v13;
  v38 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v12 + v13 + 8)) >> (56 - v10);
  v39 = (v38 >> 3) & 0x1FFFFFE0;
  _X17 = v5 + 4 * v39;
  __asm
  {
    PRFM            #0, [X17]
    PRFM            #0, [X17,#0x40]
  }
  _X15 = v7 + 2 * v39;
  __asm { PRFM            #0, [X15] }
  v45 = *(unsigned int *)(v9 + 4 * (v13 & 7));
  *(_DWORD *)(v9 + 4 * (v13 & 7)) = v38;
  v46 = (v45 >> 3) & 0x1FFFFFE0;
  v47 = v5 + 4 * v46;
  v48 = (char *)(v7 + 2 * v46);
  v50 = (const __int16 *)(v48 + 16);
  v49 = *v48;
  v115 = vld2q_s16(v50);
  memset(v113, 0, sizeof(v113));
  v51 = vdupq_n_s8(v45);
  *(int8x8_t *)v115.val[0].i8 = vqmovn_s16((int16x8_t)vceqq_s8(v51, (int8x16_t)v115.val[0]));
  *(int8x8_t *)v51.i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v51, (int8x16_t)v115.val[1])), *(int8x8_t *)v115.val[0].i8, 2uLL);
  v52 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v115.val[0].i8), vuzp1_s8(*(int8x8_t *)v51.i8, *(int8x8_t *)v115.val[0].i8), 4uLL).u32[0];
  if (v52)
  {
    v53 = 0;
    v54 = __ROR4__(v52, v49);
    v55 = (1 << v19) - 1;
    while (1)
    {
      v56 = *(unsigned int *)(v47 + 4 * ((__clz(__rbit64(v54)) + v49) & 0x1F));
      if (v56 < v18)
        break;
      if (v56 >= v15)
        v57 = v12;
      else
        v57 = v11;
      _X3 = v57 + v56;
      __asm { PRFM            #0, [X3] }
      v60 = v53 + 1;
      *((_DWORD *)v113 + v53) = v56;
      v54 &= v54 - 1;
      if (v54)
      {
        _ZF = v55 == (_DWORD)v53++;
        if (!_ZF)
          continue;
      }
      goto LABEL_25;
    }
    v60 = v53;
  }
  else
  {
    v60 = 0;
  }
LABEL_25:
  v61 = (v49 - 1) & 0x1F;
  *v48 = v61;
  v48[v61 + 16] = v45;
  v62 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v62 + 1;
  *(_DWORD *)(v47 + 4 * v61) = v62;
  if (v60)
  {
    v63 = 0;
    v111 = (_QWORD *)(v12 + v15);
    v110 = (char *)(v11 + v15);
    v64 = a3 - 7;
    v107 = a3 - 1;
    v108 = a3 - 3;
    v109 = v13 + 2;
    v105 = a2 + 1;
    v106 = v12 + 8;
    v65 = 3;
    while (1)
    {
      v66 = *((unsigned int *)v113 + v63);
      if (v66 >= v15)
      {
        v74 = (_QWORD *)(v12 + v66);
        if (*(unsigned __int8 *)(v12 + v66 + v65) != *((unsigned __int8 *)a2 + v65))
          goto LABEL_47;
        if (v64 <= (unint64_t)a2)
        {
          v76 = a2;
        }
        else
        {
          v75 = *a2 ^ *v74;
          if (v75)
          {
            result = __clz(__rbit64(v75)) >> 3;
            goto LABEL_45;
          }
          v77 = 0;
          while (1)
          {
            v76 = &v105[v77];
            if ((unint64_t)&v105[v77] >= v64)
              break;
            v78 = *(_QWORD *)(v106 + v66 + v77 * 8);
            ++v77;
            v79 = *v76 ^ v78;
            if (v79)
            {
              result = v77 * 8 + (__clz(__rbit64(v79)) >> 3);
              goto LABEL_45;
            }
          }
          v74 = (_QWORD *)(v106 + v66 + v77 * 8);
        }
        if ((unint64_t)v76 < v108 && *(_DWORD *)v74 == *(_DWORD *)v76)
        {
          v76 = (_QWORD *)((char *)v76 + 4);
          v74 = (_QWORD *)((char *)v74 + 4);
        }
        if ((unint64_t)v76 < v107 && *(unsigned __int16 *)v74 == *(unsigned __int16 *)v76)
        {
          v76 = (_QWORD *)((char *)v76 + 2);
          v74 = (_QWORD *)((char *)v74 + 2);
        }
        if ((unint64_t)v76 < a3 && *(unsigned __int8 *)v74 == *(unsigned __int8 *)v76)
          v76 = (_QWORD *)((char *)v76 + 1);
        result = (char *)v76 - (char *)a2;
      }
      else
      {
        v67 = v11 + v66;
        if (*(_DWORD *)(v11 + v66) != *(_DWORD *)a2)
          goto LABEL_47;
        v68 = v15;
        v69 = v11;
        v70 = v12;
        v71 = a3;
        v72 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v67 + 4), a3, v110, v111);
        a3 = v71;
        v12 = v70;
        v11 = v69;
        v15 = v68;
        result = v72 + 4;
      }
LABEL_45:
      if (result > v65)
      {
        *a4 = v109 - v66;
        v65 = result;
        if ((_QWORD *)((char *)a2 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_47:
      ++v63;
      result = v65;
      if (v63 == v60)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_extDict_6_6(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  const char *v51;
  uint64_t v52;
  int8x16_t v53;
  int8x8_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t result;
  _QWORD *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unsigned int v113;
  char *v114;
  _QWORD *v115;
  _OWORD v117[16];
  uint64_t v118;
  int8x16x4_t v119;

  v118 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v13 = (_DWORD)a2 - v12;
  v14 = 1 << *(_DWORD *)(a1 + 240);
  v15 = *(unsigned int *)(a1 + 24);
  v16 = *(unsigned int *)(a1 + 44);
  _ZF = (int)a2 - (int)v12 - *(_DWORD *)(a1 + 28) > v14 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v18 = (_DWORD)a2 - v12 - v14;
  else
    v18 = *(_DWORD *)(a1 + 28);
  v19 = *(_DWORD *)(a1 + 252);
  if (v19 >= 6)
    LOBYTE(v19) = 6;
  if (v13 - v16 >= 0x181)
  {
    if (v16 <= 0xFFFFFF9F)
    {
      v82 = v16 + 96;
      do
      {
        v83 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v12 + 8 + v16)) >> (56 - v10);
        v84 = (v83 >> 2) & 0x3FFFFFC0;
        _X6 = v5 + 4 * v84;
        __asm
        {
          PRFM            #0, [X6]
          PRFM            #0, [X6,#0x40]
        }
        _X5 = v7 + 2 * v84;
        __asm
        {
          PRFM            #0, [X5]
          PRFM            #0, [X5,#0x40]
        }
        v91 = *(unsigned int *)(v9 + 4 * (v16 & 7));
        *(_DWORD *)(v9 + 4 * (v16 & 7)) = v83;
        v92 = (v91 >> 2) & 0x3FFFFFC0;
        v93 = v5 + 4 * v92;
        v94 = (_BYTE *)(v7 + 2 * v92);
        v95 = (*v94 - 1) & 0x3F;
        *v94 = v95;
        v94[v95 + 16] = v91;
        *(_DWORD *)(v93 + 4 * v95) = v16++;
      }
      while (v16 < v82);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v96 = v13 - 32;
    LODWORD(v16) = v13 - 32;
    v97 = (_DWORD)a2 + 1 - (v12 + v96);
    if ((v97 + 1) < 8)
      v98 = v97 + 1;
    else
      v98 = 8;
    if ((unint64_t)a2 + 1 >= v12 + v96)
      v99 = v98;
    else
      v99 = 0;
    if (v96 < v99 + (int)v96)
    {
      v100 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v101 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v12 + v96)) >> v100;
        v102 = (v101 >> 2) & 0x3FFFFFC0;
        _X19 = v6 + 4 * v102;
        __asm
        {
          PRFM            #0, [X19]
          PRFM            #0, [X19,#0x40]
        }
        _X7 = v8 + 2 * v102;
        __asm
        {
          PRFM            #0, [X7]
          PRFM            #0, [X7,#0x40]
        }
        *(_DWORD *)(a1 + 4 * (v96++ & 7) + 64) = v101;
        --v99;
      }
      while (v99);
    }
  }
  if (v16 < v13)
  {
    v20 = *(_QWORD *)(a1 + 8) + 8;
    v21 = 56 - *(_DWORD *)(a1 + 52);
    v22 = v16;
    do
    {
      v23 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v20 + v22)) >> v21;
      v24 = (v23 >> 2) & 0x3FFFFFC0;
      _X19 = v6 + 4 * v24;
      __asm
      {
        PRFM            #0, [X19]
        PRFM            #0, [X19,#0x40]
      }
      _X7 = v8 + 2 * v24;
      __asm
      {
        PRFM            #0, [X7]
        PRFM            #0, [X7,#0x40]
      }
      v34 = *(unsigned int *)(v9 + 4 * (v22 & 7));
      *(_DWORD *)(v9 + 4 * (v22 & 7)) = v23;
      v35 = (v34 >> 2) & 0x3FFFFFC0;
      v36 = v6 + 4 * v35;
      v37 = (_BYTE *)(v8 + 2 * v35);
      v38 = (*v37 - 1) & 0x3F;
      *v37 = v38;
      v37[v38 + 16] = v34;
      *(_DWORD *)(v36 + 4 * v38) = v22++;
    }
    while (v22 < ((_DWORD)a2 - v12));
  }
  *(_DWORD *)(a1 + 44) = v13;
  v39 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v12 + v13 + 8)) >> (56 - v10);
  v40 = (v39 >> 2) & 0x3FFFFFC0;
  _X17 = v5 + 4 * v40;
  __asm
  {
    PRFM            #0, [X17]
    PRFM            #0, [X17,#0x40]
  }
  _X15 = v7 + 2 * v40;
  __asm
  {
    PRFM            #0, [X15]
    PRFM            #0, [X15,#0x40]
  }
  v47 = *(unsigned int *)(v9 + 4 * (v13 & 7));
  *(_DWORD *)(v9 + 4 * (v13 & 7)) = v39;
  v48 = (v47 >> 2) & 0x3FFFFFC0;
  v49 = (char *)(v7 + 2 * v48);
  v51 = v49 + 16;
  v50 = *v49;
  v52 = v5 + 4 * v48;
  memset(v117, 0, sizeof(v117));
  v119 = vld4q_s8(v51);
  v53 = vdupq_n_s8(v47);
  v119.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v119.val[3], v53), vceqq_s8(v119.val[2], v53), 1uLL), vsriq_n_s8(vceqq_s8(v119.val[1], v53), vceqq_s8(v119.val[0], v53), 1uLL), 2uLL);
  v54 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v119.val[0], v119.val[0], 4uLL), 4uLL);
  if (v54)
  {
    v55 = 0;
    v56 = __ROR8__(*(_QWORD *)&v54, v50);
    v57 = (1 << v19) - 1;
    while (1)
    {
      v58 = *(unsigned int *)(v52 + 4 * ((__clz(__rbit64(v56)) + v50) & 0x3F));
      if (v58 < v18)
        break;
      if (v58 >= v15)
        v59 = v12;
      else
        v59 = v11;
      _X3 = v59 + v58;
      __asm { PRFM            #0, [X3] }
      v62 = v55 + 1;
      *((_DWORD *)v117 + v55) = v58;
      v56 &= v56 - 1;
      if (v56)
      {
        _ZF = v57 == (_DWORD)v55++;
        if (!_ZF)
          continue;
      }
      goto LABEL_25;
    }
    v62 = v55;
  }
  else
  {
    v62 = 0;
  }
LABEL_25:
  v63 = (v50 - 1) & 0x3F;
  *v49 = v63;
  v49[v63 + 16] = v47;
  v64 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v64 + 1;
  *(_DWORD *)(v52 + 4 * v63) = v64;
  if (v62)
  {
    v65 = 0;
    v115 = (_QWORD *)(v12 + v15);
    v114 = (char *)(v11 + v15);
    v66 = a3 - 7;
    v111 = a3 - 1;
    v112 = a3 - 3;
    v113 = v13 + 2;
    v109 = a2 + 1;
    v110 = v12 + 8;
    v67 = 3;
    while (1)
    {
      v68 = *((unsigned int *)v117 + v65);
      if (v68 >= v15)
      {
        v76 = (_QWORD *)(v12 + v68);
        if (*(unsigned __int8 *)(v12 + v68 + v67) != *((unsigned __int8 *)a2 + v67))
          goto LABEL_47;
        if (v66 <= (unint64_t)a2)
        {
          v78 = a2;
        }
        else
        {
          v77 = *a2 ^ *v76;
          if (v77)
          {
            result = __clz(__rbit64(v77)) >> 3;
            goto LABEL_45;
          }
          v79 = 0;
          while (1)
          {
            v78 = &v109[v79];
            if ((unint64_t)&v109[v79] >= v66)
              break;
            v80 = *(_QWORD *)(v110 + v68 + v79 * 8);
            ++v79;
            v81 = *v78 ^ v80;
            if (v81)
            {
              result = v79 * 8 + (__clz(__rbit64(v81)) >> 3);
              goto LABEL_45;
            }
          }
          v76 = (_QWORD *)(v110 + v68 + v79 * 8);
        }
        if ((unint64_t)v78 < v112 && *(_DWORD *)v76 == *(_DWORD *)v78)
        {
          v78 = (_QWORD *)((char *)v78 + 4);
          v76 = (_QWORD *)((char *)v76 + 4);
        }
        if ((unint64_t)v78 < v111 && *(unsigned __int16 *)v76 == *(unsigned __int16 *)v78)
        {
          v78 = (_QWORD *)((char *)v78 + 2);
          v76 = (_QWORD *)((char *)v76 + 2);
        }
        if ((unint64_t)v78 < a3 && *(unsigned __int8 *)v76 == *(unsigned __int8 *)v78)
          v78 = (_QWORD *)((char *)v78 + 1);
        result = (char *)v78 - (char *)a2;
      }
      else
      {
        v69 = v11 + v68;
        if (*(_DWORD *)(v11 + v68) != *(_DWORD *)a2)
          goto LABEL_47;
        v70 = v15;
        v71 = v11;
        v72 = v12;
        v73 = a3;
        v74 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v69 + 4), a3, v114, v115);
        a3 = v73;
        v12 = v72;
        v11 = v71;
        v15 = v70;
        result = v74 + 4;
      }
LABEL_45:
      if (result > v67)
      {
        *a4 = v113 - v68;
        v67 = result;
        if ((_QWORD *)((char *)a2 + result) == (_QWORD *)a3)
          return result;
      }
LABEL_47:
      ++v65;
      result = v67;
      if (v65 == v62)
        return result;
    }
  }
  return 3;
}

unint64_t ZSTD_RowFindBestMatch_dictMatchState_4_4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t *v53;
  __int8 v54;
  int16x8_t v55;
  uint64x2_t v56;
  uint64x2_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  char *v80;
  uint64_t v81;
  __int8 v82;
  int16x8_t v83;
  uint64x2_t v84;
  uint64x2_t v85;
  BOOL v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v93;
  int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v102;
  unsigned int v103;
  unsigned int v104;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  int v125;
  _QWORD *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v16 = (_DWORD)a2 - v11 - v13;
  else
    v16 = *(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 252) >= 4u)
    v17 = 4;
  else
    v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = (-1640531535 * *(_DWORD *)a2) >> (24 - *(_DWORD *)(v18 + 52));
  v20 = (v19 >> 4) & 0xFFFFFF0;
  _X13 = (int8x16_t *)(*(_QWORD *)(v18 + 56) + 2 * v20);
  _X10 = *(_QWORD *)(v18 + 96) + 4 * v20;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X13]
  }
  v28 = *(unsigned int *)(a1 + 44);
  if (v12 - v28 >= 0x181)
  {
    if (v28 <= 0xFFFFFF9F)
    {
      v102 = v28 + 96;
      do
      {
        v103 = (-1640531535 * *(_DWORD *)(v11 + 8 + v28)) >> (24 - v10);
        v104 = (v103 >> 4) & 0xFFFFFF0;
        _X24 = v5 + 4 * v104;
        __asm { PRFM            #0, [X24] }
        _X23 = v7 + 2 * v104;
        __asm { PRFM            #0, [X23] }
        v109 = *(unsigned int *)(v9 + 4 * (v28 & 7));
        *(_DWORD *)(v9 + 4 * (v28 & 7)) = v103;
        v110 = (v109 >> 4) & 0xFFFFFF0;
        v111 = v5 + 4 * v110;
        v112 = (_BYTE *)(v7 + 2 * v110);
        v113 = (*v112 - 1) & 0xF;
        *v112 = v113;
        v112[v113 + 16] = v109;
        *(_DWORD *)(v111 + 4 * v113) = v28++;
      }
      while (v28 < v102);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v114 = v12 - 32;
    LODWORD(v28) = v12 - 32;
    v115 = (_DWORD)a2 + 1 - (v11 + v114);
    if ((v115 + 1) < 8)
      v116 = v115 + 1;
    else
      v116 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v114)
      v117 = v116;
    else
      v117 = 0;
    if (v114 < v117 + (int)v114)
    {
      v118 = 24 - *(_DWORD *)(a1 + 52);
      do
      {
        v119 = (-1640531535 * *(_DWORD *)(v11 + v114)) >> v118;
        v120 = (v119 >> 4) & 0xFFFFFF0;
        _X26 = v6 + 4 * v120;
        __asm { PRFM            #0, [X26] }
        _X25 = v8 + 2 * v120;
        __asm { PRFM            #0, [X25] }
        *(_DWORD *)(a1 + 4 * (v114++ & 7) + 64) = v119;
        --v117;
      }
      while (v117);
    }
  }
  v29 = 1 << v17;
  if (v28 < v12)
  {
    v30 = *(_QWORD *)(a1 + 8) + 8;
    v31 = 24 - *(_DWORD *)(a1 + 52);
    v32 = v28;
    do
    {
      v33 = (-1640531535 * *(_DWORD *)(v30 + v32)) >> v31;
      v34 = (v33 >> 4) & 0xFFFFFF0;
      _X25 = v6 + 4 * v34;
      __asm { PRFM            #0, [X25] }
      _X24 = v8 + 2 * v34;
      __asm { PRFM            #0, [X24] }
      v39 = *(unsigned int *)(v9 + 4 * (v32 & 7));
      *(_DWORD *)(v9 + 4 * (v32 & 7)) = v33;
      v40 = (v39 >> 4) & 0xFFFFFF0;
      v41 = v6 + 4 * v40;
      v42 = (_BYTE *)(v8 + 2 * v40);
      v43 = (*v42 - 1) & 0xF;
      *v42 = v43;
      v42[v43 + 16] = v39;
      *(_DWORD *)(v41 + 4 * v43) = v32++;
    }
    while (v32 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v44 = (-1640531535 * *(_DWORD *)(v11 + v12 + 8)) >> (24 - v10);
  v45 = (v44 >> 4) & 0xFFFFFF0;
  _X5 = v5 + 4 * v45;
  __asm { PRFM            #0, [X5] }
  _X5 = v7 + 2 * v45;
  __asm { PRFM            #0, [X5] }
  v50 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v44;
  v51 = (v50 >> 4) & 0xFFFFFF0;
  v52 = v5 + 4 * v51;
  v53 = (int8x16_t *)(v7 + 2 * v51);
  v54 = v53->i8[0];
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  v55 = vshlq_n_s16((int16x8_t)vceqq_s8(v53[1], vdupq_n_s8(v50)), 7uLL);
  v56 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v55, v55, 0xEuLL), 0xEuLL);
  v57 = vsraq_n_u64(v56, v56, 0x1CuLL);
  if (v57.u8[0] | (unsigned __int16)(v57.u8[8] << 8))
  {
    v58 = 0;
    v59 = ((unsigned __int16)(v57.u8[0] | (v57.u8[8] << 8)) >> (v54 & 0xF)) | (unsigned __int16)((v57.u8[0] | (unsigned __int16)(v57.u8[8] << 8)) << (-v54 & 0xF));
    v60 = v29;
    while (1)
    {
      v61 = *(unsigned int *)(v52 + 4 * ((__clz(__rbit64(v59)) + v54) & 0xF));
      if (v61 < v16)
        break;
      _X17 = v11 + v61;
      __asm { PRFM            #0, [X17] }
      v64 = v58 + 1;
      *((_DWORD *)&v128 + v58) = v61;
      v29 = v60 - 1;
      v59 &= v59 - 1;
      if (v59)
      {
        ++v58;
        if (--v60)
          continue;
      }
      goto LABEL_22;
    }
    v29 = v60;
    v64 = v58;
  }
  else
  {
    v64 = 0;
  }
LABEL_22:
  v65 = (v54 - 1) & 0xF;
  v53->i8[0] = v65;
  v53[1].i8[v65] = v50;
  v66 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v66 + 1;
  *(_DWORD *)(v52 + 4 * v65) = v66;
  if (v64)
  {
    v67 = 0;
    v68 = a3 - 7;
    v69 = a2 + 1;
    v70 = v11 + 8;
    v71 = 3;
    while (1)
    {
      v72 = *((unsigned int *)&v128 + v67);
      v73 = (_QWORD *)(v11 + v72);
      if (*(unsigned __int8 *)(v11 + v72 + v71) != *((unsigned __int8 *)a2 + v71))
        goto LABEL_41;
      if (v68 <= (unint64_t)a2)
      {
        v76 = a2;
      }
      else
      {
        v74 = *a2 ^ *v73;
        if (v74)
        {
          v75 = __clz(__rbit64(v74)) >> 3;
          goto LABEL_39;
        }
        while (1)
        {
          v76 = (_QWORD *)((char *)v69 + v74);
          if ((unint64_t)v69 + v74 >= v68)
            break;
          v77 = *(_QWORD *)(v70 + v72 + v74);
          v74 += 8;
          v78 = *v76 ^ v77;
          if (v78)
          {
            v75 = v74 + (__clz(__rbit64(v78)) >> 3);
            goto LABEL_39;
          }
        }
        v73 = (_QWORD *)(v70 + v72 + v74);
      }
      if ((unint64_t)v76 < a3 - 3 && *(_DWORD *)v73 == *(_DWORD *)v76)
      {
        v76 = (_QWORD *)((char *)v76 + 4);
        v73 = (_QWORD *)((char *)v73 + 4);
      }
      if ((unint64_t)v76 < a3 - 1 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v76)
      {
        v76 = (_QWORD *)((char *)v76 + 2);
        v73 = (_QWORD *)((char *)v73 + 2);
      }
      if ((unint64_t)v76 < a3 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v76)
        v76 = (_QWORD *)((char *)v76 + 1);
      v75 = (char *)v76 - (char *)a2;
LABEL_39:
      if (v75 > v71)
      {
        *a4 = v12 + 2 - v72;
        v71 = v75;
        if ((_QWORD *)((char *)a2 + v75) == (_QWORD *)a3)
          goto LABEL_48;
      }
LABEL_41:
      ++v67;
      v75 = v71;
      if (v67 == v64)
        goto LABEL_48;
    }
  }
  v75 = 3;
LABEL_48:
  v79 = *(_DWORD *)(v18 + 24);
  v80 = *(char **)v18;
  v81 = *(_QWORD *)(v18 + 8);
  v82 = _X13->i8[0];
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  v83 = vshlq_n_s16((int16x8_t)vceqq_s8(_X13[1], vdupq_n_s8(v19)), 7uLL);
  v84 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v83, v83, 0xEuLL), 0xEuLL);
  v85 = vsraq_n_u64(v84, v84, 0x1CuLL);
  if (v85.u8[0] | (unsigned __int16)(v85.u8[8] << 8))
    v86 = v29 == 0;
  else
    v86 = 1;
  if (!v86)
  {
    v87 = 0;
    v127 = (_QWORD *)(v11 + v14);
    v88 = ((unsigned __int16)(v85.u8[0] | (v85.u8[8] << 8)) >> (v82 & 0xF)) | (unsigned __int16)((v85.u8[0] | (v85.u8[8] << 8)) << (-v82 & 0xF));
    v89 = v29 - 1;
    while (1)
    {
      v90 = *(unsigned int *)(_X10 + 4 * ((__clz(__rbit64(v88)) + v82) & 0xF));
      if (v90 < v79)
        break;
      _X1 = v81 + v90;
      __asm { PRFM            #0, [X1] }
      v93 = v87 + 1;
      *((_DWORD *)&v128 + v87) = v90;
      v88 &= v88 - 1;
      if (v88)
      {
        _ZF = v89 == (_DWORD)v87++;
        if (!_ZF)
          continue;
      }
      goto LABEL_59;
    }
    v93 = v87;
    if (!v87)
      return v75;
LABEL_59:
    v94 = *(_DWORD *)a2;
    v125 = v12 - v14 + (_DWORD)v80 - v81 + 2;
    v95 = (unsigned int *)&v128;
    do
    {
      v97 = *v95++;
      v96 = v97;
      v98 = v81 + v97;
      if (*(_DWORD *)v98 == v94)
      {
        v99 = a3;
        v100 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v98 + 4), a3, v80, v127);
        a3 = v99;
        if (v100 + 4 > v75)
        {
          *a4 = v125 - v96;
          v75 = v100 + 4;
          if ((_QWORD *)((char *)a2 + v100 + 4) == (_QWORD *)v99)
            break;
        }
      }
      --v93;
    }
    while (v93);
  }
  return v75;
}

unint64_t ZSTD_RowFindBestMatch_dictMatchState_4_5(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char v57;
  const __int16 *v58;
  int8x16_t v59;
  unsigned __int32 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82;
  char *v83;
  uint64_t v84;
  const __int16 *v85;
  char v86;
  char v87;
  int8x16_t v88;
  int8x8_t v89;
  unsigned __int32 v90;
  BOOL v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v99;
  int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v108;
  unsigned int v109;
  unsigned int v110;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  int v133;
  _QWORD *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  int16x8x2_t v153;
  int16x8x2_t v154;

  v152 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v16 = (_DWORD)a2 - v11 - v13;
  else
    v16 = *(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 252) >= 5u)
    v17 = 5;
  else
    v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = (-1640531535 * *(_DWORD *)a2) >> (24 - *(_DWORD *)(v18 + 52));
  v20 = (v19 >> 3) & 0x1FFFFFE0;
  _X13 = (_BYTE *)(*(_QWORD *)(v18 + 56) + 2 * v20);
  _X10 = *(_QWORD *)(v18 + 96) + 4 * v20;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X10,#0x40]
    PRFM            #0, [X13]
  }
  v29 = *(unsigned int *)(a1 + 44);
  if (v12 - v29 >= 0x181)
  {
    if (v29 <= 0xFFFFFF9F)
    {
      v108 = v29 + 96;
      do
      {
        v109 = (-1640531535 * *(_DWORD *)(v11 + 8 + v29)) >> (24 - v10);
        v110 = (v109 >> 3) & 0x1FFFFFE0;
        _X24 = v5 + 4 * v110;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x40]
        }
        _X23 = v7 + 2 * v110;
        __asm { PRFM            #0, [X23] }
        v116 = *(unsigned int *)(v9 + 4 * (v29 & 7));
        *(_DWORD *)(v9 + 4 * (v29 & 7)) = v109;
        v117 = (v116 >> 3) & 0x1FFFFFE0;
        v118 = v5 + 4 * v117;
        v119 = (_BYTE *)(v7 + 2 * v117);
        v120 = (*v119 - 1) & 0x1F;
        *v119 = v120;
        v119[v120 + 16] = v116;
        *(_DWORD *)(v118 + 4 * v120) = v29++;
      }
      while (v29 < v108);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v121 = v12 - 32;
    LODWORD(v29) = v12 - 32;
    v122 = (_DWORD)a2 + 1 - (v11 + v121);
    if ((v122 + 1) < 8)
      v123 = v122 + 1;
    else
      v123 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v121)
      v124 = v123;
    else
      v124 = 0;
    if (v121 < v124 + (int)v121)
    {
      v125 = 24 - *(_DWORD *)(a1 + 52);
      do
      {
        v126 = (-1640531535 * *(_DWORD *)(v11 + v121)) >> v125;
        v127 = (v126 >> 3) & 0x1FFFFFE0;
        _X26 = v6 + 4 * v127;
        __asm
        {
          PRFM            #0, [X26]
          PRFM            #0, [X26,#0x40]
        }
        _X25 = v8 + 2 * v127;
        __asm { PRFM            #0, [X25] }
        *(_DWORD *)(a1 + 4 * (v121++ & 7) + 64) = v126;
        --v124;
      }
      while (v124);
    }
  }
  v30 = 1 << v17;
  if (v29 < v12)
  {
    v31 = *(_QWORD *)(a1 + 8) + 8;
    v32 = 24 - *(_DWORD *)(a1 + 52);
    v33 = v29;
    do
    {
      v34 = (-1640531535 * *(_DWORD *)(v31 + v33)) >> v32;
      v35 = (v34 >> 3) & 0x1FFFFFE0;
      _X25 = v6 + 4 * v35;
      __asm
      {
        PRFM            #0, [X25]
        PRFM            #0, [X25,#0x40]
      }
      _X24 = v8 + 2 * v35;
      __asm { PRFM            #0, [X24] }
      v41 = *(unsigned int *)(v9 + 4 * (v33 & 7));
      *(_DWORD *)(v9 + 4 * (v33 & 7)) = v34;
      v42 = (v41 >> 3) & 0x1FFFFFE0;
      v43 = v6 + 4 * v42;
      v44 = (_BYTE *)(v8 + 2 * v42);
      v45 = (*v44 - 1) & 0x1F;
      *v44 = v45;
      v44[v45 + 16] = v41;
      *(_DWORD *)(v43 + 4 * v45) = v33++;
    }
    while (v33 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v46 = (-1640531535 * *(_DWORD *)(v11 + v12 + 8)) >> (24 - v10);
  v47 = (v46 >> 3) & 0x1FFFFFE0;
  _X5 = v5 + 4 * v47;
  __asm
  {
    PRFM            #0, [X5]
    PRFM            #0, [X5,#0x40]
  }
  _X5 = v7 + 2 * v47;
  __asm { PRFM            #0, [X5] }
  v53 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v46;
  v54 = (v53 >> 3) & 0x1FFFFFE0;
  v55 = v5 + 4 * v54;
  v56 = (char *)(v7 + 2 * v54);
  v58 = (const __int16 *)(v56 + 16);
  v57 = *v56;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v153 = vld2q_s16(v58);
  v136 = 0u;
  v137 = 0u;
  v59 = vdupq_n_s8(v53);
  *(int8x8_t *)v153.val[0].i8 = vqmovn_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v153.val[0]));
  *(int8x8_t *)v59.i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v153.val[1])), *(int8x8_t *)v153.val[0].i8, 2uLL);
  v60 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v59.i8, *(int8x8_t *)v153.val[0].i8), vuzp1_s8(*(int8x8_t *)v59.i8, *(int8x8_t *)v153.val[0].i8), 4uLL).u32[0];
  if (v60)
  {
    v61 = 0;
    v62 = __ROR4__(v60, v57);
    v63 = v30;
    while (1)
    {
      v64 = *(unsigned int *)(v55 + 4 * ((__clz(__rbit64(v62)) + v57) & 0x1F));
      if (v64 < v16)
        break;
      _X17 = v11 + v64;
      __asm { PRFM            #0, [X17] }
      v67 = v61 + 1;
      *((_DWORD *)&v136 + v61) = v64;
      v30 = v63 - 1;
      v62 &= v62 - 1;
      if (v62)
      {
        ++v61;
        if (--v63)
          continue;
      }
      goto LABEL_22;
    }
    v30 = v63;
    v67 = v61;
  }
  else
  {
    v67 = 0;
  }
LABEL_22:
  v68 = (v57 - 1) & 0x1F;
  *v56 = v68;
  v56[v68 + 16] = v53;
  v69 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v69 + 1;
  *(_DWORD *)(v55 + 4 * v68) = v69;
  if (v67)
  {
    v70 = 0;
    v71 = a3 - 7;
    v72 = a2 + 1;
    v73 = v11 + 8;
    v74 = 3;
    while (1)
    {
      v75 = *((unsigned int *)&v136 + v70);
      v76 = (_QWORD *)(v11 + v75);
      if (*(unsigned __int8 *)(v11 + v75 + v74) != *((unsigned __int8 *)a2 + v74))
        goto LABEL_41;
      if (v71 <= (unint64_t)a2)
      {
        v79 = a2;
      }
      else
      {
        v77 = *a2 ^ *v76;
        if (v77)
        {
          v78 = __clz(__rbit64(v77)) >> 3;
          goto LABEL_39;
        }
        while (1)
        {
          v79 = (_QWORD *)((char *)v72 + v77);
          if ((unint64_t)v72 + v77 >= v71)
            break;
          v80 = *(_QWORD *)(v73 + v75 + v77);
          v77 += 8;
          v81 = *v79 ^ v80;
          if (v81)
          {
            v78 = v77 + (__clz(__rbit64(v81)) >> 3);
            goto LABEL_39;
          }
        }
        v76 = (_QWORD *)(v73 + v75 + v77);
      }
      if ((unint64_t)v79 < a3 - 3 && *(_DWORD *)v76 == *(_DWORD *)v79)
      {
        v79 = (_QWORD *)((char *)v79 + 4);
        v76 = (_QWORD *)((char *)v76 + 4);
      }
      if ((unint64_t)v79 < a3 - 1 && *(unsigned __int16 *)v76 == *(unsigned __int16 *)v79)
      {
        v79 = (_QWORD *)((char *)v79 + 2);
        v76 = (_QWORD *)((char *)v76 + 2);
      }
      if ((unint64_t)v79 < a3 && *(unsigned __int8 *)v76 == *(unsigned __int8 *)v79)
        v79 = (_QWORD *)((char *)v79 + 1);
      v78 = (char *)v79 - (char *)a2;
LABEL_39:
      if (v78 > v74)
      {
        *a4 = v12 + 2 - v75;
        v74 = v78;
        if ((_QWORD *)((char *)a2 + v78) == (_QWORD *)a3)
          goto LABEL_48;
      }
LABEL_41:
      ++v70;
      v78 = v74;
      if (v70 == v67)
        goto LABEL_48;
    }
  }
  v78 = 3;
LABEL_48:
  v82 = *(_DWORD *)(v18 + 24);
  v83 = *(char **)v18;
  v84 = *(_QWORD *)(v18 + 8);
  v87 = *_X13;
  v85 = (const __int16 *)(_X13 + 16);
  v86 = v87;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v154 = vld2q_s16(v85);
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v88 = vdupq_n_s8(v19);
  v136 = 0u;
  v137 = 0u;
  v89 = vqmovn_s16((int16x8_t)vceqq_s8(v88, (int8x16_t)v154.val[0]));
  *(int8x8_t *)v154.val[0].i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v88, (int8x16_t)v154.val[1])), v89, 2uLL);
  v90 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v154.val[0].i8, v89), vuzp1_s8(*(int8x8_t *)v154.val[0].i8, v89), 4uLL).u32[0];
  if (v90)
    v91 = v30 == 0;
  else
    v91 = 1;
  if (!v91)
  {
    v92 = 0;
    v135 = (_QWORD *)(v11 + v14);
    v93 = v86 & 0x1F;
    v94 = __ROR4__(v90, v86 & 0x1F);
    v95 = v30 - 1;
    while (1)
    {
      v96 = *(unsigned int *)(_X10 + 4 * ((__clz(__rbit64(v94)) + v93) & 0x1F));
      if (v96 < v82)
        break;
      _X1 = v84 + v96;
      __asm { PRFM            #0, [X1] }
      v99 = v92 + 1;
      *((_DWORD *)&v136 + v92) = v96;
      v94 &= v94 - 1;
      if (v94)
      {
        _ZF = v95 == (_DWORD)v92++;
        if (!_ZF)
          continue;
      }
      goto LABEL_59;
    }
    v99 = v92;
    if (!v92)
      return v78;
LABEL_59:
    v100 = *(_DWORD *)a2;
    v133 = v12 - v14 + (_DWORD)v83 - v84 + 2;
    v101 = (unsigned int *)&v136;
    do
    {
      v103 = *v101++;
      v102 = v103;
      v104 = v84 + v103;
      if (*(_DWORD *)v104 == v100)
      {
        v105 = a3;
        v106 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v104 + 4), a3, v83, v135);
        a3 = v105;
        if (v106 + 4 > v78)
        {
          *a4 = v133 - v102;
          v78 = v106 + 4;
          if ((_QWORD *)((char *)a2 + v106 + 4) == (_QWORD *)v105)
            break;
        }
      }
      --v99;
    }
    while (v99);
  }
  return v78;
}

unint64_t ZSTD_RowFindBestMatch_dictMatchState_4_6(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char v59;
  const char *v60;
  uint64_t v61;
  int8x16_t v62;
  int8x8_t v63;
  int8x8_t v64;
  int8x8_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  char *v86;
  uint64_t v87;
  const char *v88;
  char v89;
  char v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x8_t v93;
  BOOL v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v101;
  int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  int v137;
  _QWORD *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  int8x16x4_t v157;
  int8x16x4_t v158;

  v156 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v16 = (_DWORD)a2 - v11 - v13;
  else
    v16 = *(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 252) >= 6u)
    v17 = 6;
  else
    v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = (-1640531535 * *(_DWORD *)a2) >> (24 - *(_DWORD *)(v18 + 52));
  v20 = (v19 >> 2) & 0x3FFFFFC0;
  _X13 = (_BYTE *)(*(_QWORD *)(v18 + 56) + 2 * v20);
  _X10 = *(_QWORD *)(v18 + 96) + 4 * v20;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X10,#0x40]
    PRFM            #0, [X13]
    PRFM            #0, [X13,#0x40]
  }
  v30 = *(unsigned int *)(a1 + 44);
  if (v12 - v30 >= 0x181)
  {
    if (v30 <= 0xFFFFFF9F)
    {
      v110 = v30 + 96;
      do
      {
        v111 = (-1640531535 * *(_DWORD *)(v11 + 8 + v30)) >> (24 - v10);
        v112 = (v111 >> 2) & 0x3FFFFFC0;
        _X24 = v5 + 4 * v112;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x40]
        }
        _X23 = v7 + 2 * v112;
        __asm
        {
          PRFM            #0, [X23]
          PRFM            #0, [X23,#0x40]
        }
        v119 = *(unsigned int *)(v9 + 4 * (v30 & 7));
        *(_DWORD *)(v9 + 4 * (v30 & 7)) = v111;
        v120 = (v119 >> 2) & 0x3FFFFFC0;
        v121 = v5 + 4 * v120;
        v122 = (_BYTE *)(v7 + 2 * v120);
        v123 = (*v122 - 1) & 0x3F;
        *v122 = v123;
        v122[v123 + 16] = v119;
        *(_DWORD *)(v121 + 4 * v123) = v30++;
      }
      while (v30 < v110);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v124 = v12 - 32;
    LODWORD(v30) = v12 - 32;
    v125 = (_DWORD)a2 + 1 - (v11 + v124);
    if ((v125 + 1) < 8)
      v126 = v125 + 1;
    else
      v126 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v124)
      v127 = v126;
    else
      v127 = 0;
    if (v124 < v127 + (int)v124)
    {
      v128 = 24 - *(_DWORD *)(a1 + 52);
      do
      {
        v129 = (-1640531535 * *(_DWORD *)(v11 + v124)) >> v128;
        v130 = (v129 >> 2) & 0x3FFFFFC0;
        _X26 = v6 + 4 * v130;
        __asm
        {
          PRFM            #0, [X26]
          PRFM            #0, [X26,#0x40]
        }
        _X25 = v8 + 2 * v130;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        *(_DWORD *)(a1 + 4 * (v124++ & 7) + 64) = v129;
        --v127;
      }
      while (v127);
    }
  }
  v31 = 1 << v17;
  if (v30 < v12)
  {
    v32 = *(_QWORD *)(a1 + 8) + 8;
    v33 = 24 - *(_DWORD *)(a1 + 52);
    v34 = v30;
    do
    {
      v35 = (-1640531535 * *(_DWORD *)(v32 + v34)) >> v33;
      v36 = (v35 >> 2) & 0x3FFFFFC0;
      _X25 = v6 + 4 * v36;
      __asm
      {
        PRFM            #0, [X25]
        PRFM            #0, [X25,#0x40]
      }
      _X24 = v8 + 2 * v36;
      __asm
      {
        PRFM            #0, [X24]
        PRFM            #0, [X24,#0x40]
      }
      v43 = *(unsigned int *)(v9 + 4 * (v34 & 7));
      *(_DWORD *)(v9 + 4 * (v34 & 7)) = v35;
      v44 = (v43 >> 2) & 0x3FFFFFC0;
      v45 = v6 + 4 * v44;
      v46 = (_BYTE *)(v8 + 2 * v44);
      v47 = (*v46 - 1) & 0x3F;
      *v46 = v47;
      v46[v47 + 16] = v43;
      *(_DWORD *)(v45 + 4 * v47) = v34++;
    }
    while (v34 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v48 = (-1640531535 * *(_DWORD *)(v11 + v12 + 8)) >> (24 - v10);
  v49 = (v48 >> 2) & 0x3FFFFFC0;
  _X5 = v5 + 4 * v49;
  __asm
  {
    PRFM            #0, [X5]
    PRFM            #0, [X5,#0x40]
  }
  _X5 = v7 + 2 * v49;
  __asm
  {
    PRFM            #0, [X5]
    PRFM            #0, [X5,#0x40]
  }
  v56 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v48;
  v57 = (v56 >> 2) & 0x3FFFFFC0;
  v58 = (char *)(v7 + 2 * v57);
  v60 = v58 + 16;
  v59 = *v58;
  v61 = v5 + 4 * v57;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v157 = vld4q_s8(v60);
  v62 = vdupq_n_s8(v56);
  v157.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v157.val[3], v62), vceqq_s8(v157.val[2], v62), 1uLL), vsriq_n_s8(vceqq_s8(v157.val[1], v62), vceqq_s8(v157.val[0], v62), 1uLL), 2uLL);
  v63 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v157.val[0], v157.val[0], 4uLL), 4uLL);
  v64 = v63;
  if (v63)
  {
    v65 = 0;
    v66 = __ROR8__(*(_QWORD *)&v63, v59);
    v67 = v31;
    while (1)
    {
      v68 = *(unsigned int *)(v61 + 4 * ((__clz(__rbit64(v66)) + v59) & 0x3F));
      if (v68 < v16)
        break;
      _X17 = v11 + v68;
      __asm { PRFM            #0, [X17] }
      v64 = (int8x8_t)(*(_QWORD *)&v65 + 1);
      *((_DWORD *)&v140 + *(_QWORD *)&v65) = v68;
      v31 = v67 - 1;
      v66 &= v66 - 1;
      if (v66)
      {
        ++*(_QWORD *)&v65;
        if (--v67)
          continue;
      }
      goto LABEL_21;
    }
    v31 = v67;
    v64 = v65;
  }
LABEL_21:
  v71 = (v59 - 1) & 0x3F;
  *v58 = v71;
  v58[v71 + 16] = v56;
  v72 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v72 + 1;
  *(_DWORD *)(v61 + 4 * v71) = v72;
  if (v64)
  {
    v73 = 0;
    v74 = a3 - 7;
    v75 = a2 + 1;
    v76 = v11 + 8;
    v77 = 3;
    while (1)
    {
      v78 = *((unsigned int *)&v140 + v73);
      v79 = (_QWORD *)(v11 + v78);
      if (*(unsigned __int8 *)(v11 + v78 + v77) != *((unsigned __int8 *)a2 + v77))
        goto LABEL_40;
      if (v74 <= (unint64_t)a2)
      {
        v82 = a2;
      }
      else
      {
        v80 = *a2 ^ *v79;
        if (v80)
        {
          v81 = __clz(__rbit64(v80)) >> 3;
          goto LABEL_38;
        }
        while (1)
        {
          v82 = (_QWORD *)((char *)v75 + v80);
          if ((unint64_t)v75 + v80 >= v74)
            break;
          v83 = *(_QWORD *)(v76 + v78 + v80);
          v80 += 8;
          v84 = *v82 ^ v83;
          if (v84)
          {
            v81 = v80 + (__clz(__rbit64(v84)) >> 3);
            goto LABEL_38;
          }
        }
        v79 = (_QWORD *)(v76 + v78 + v80);
      }
      if ((unint64_t)v82 < a3 - 3 && *(_DWORD *)v79 == *(_DWORD *)v82)
      {
        v82 = (_QWORD *)((char *)v82 + 4);
        v79 = (_QWORD *)((char *)v79 + 4);
      }
      if ((unint64_t)v82 < a3 - 1 && *(unsigned __int16 *)v79 == *(unsigned __int16 *)v82)
      {
        v82 = (_QWORD *)((char *)v82 + 2);
        v79 = (_QWORD *)((char *)v79 + 2);
      }
      if ((unint64_t)v82 < a3 && *(unsigned __int8 *)v79 == *(unsigned __int8 *)v82)
        v82 = (_QWORD *)((char *)v82 + 1);
      v81 = (char *)v82 - (char *)a2;
LABEL_38:
      if (v81 > v77)
      {
        *a4 = v12 + 2 - v78;
        v77 = v81;
        if ((_QWORD *)((char *)a2 + v81) == (_QWORD *)a3)
          goto LABEL_47;
      }
LABEL_40:
      ++v73;
      v81 = v77;
      if (v73 == *(_QWORD *)&v64)
        goto LABEL_47;
    }
  }
  v81 = 3;
LABEL_47:
  v85 = *(_DWORD *)(v18 + 24);
  v86 = *(char **)v18;
  v87 = *(_QWORD *)(v18 + 8);
  v90 = *_X13;
  v88 = _X13 + 16;
  v89 = v90;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v158 = vld4q_s8(v88);
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v91 = vdupq_n_s8(v19);
  v92 = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v158.val[3], v91), vceqq_s8(v158.val[2], v91), 1uLL), vsriq_n_s8(vceqq_s8(v158.val[1], v91), vceqq_s8(v158.val[0], v91), 1uLL), 2uLL);
  v93 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v92, v92, 4uLL), 4uLL);
  if (v93)
    v94 = v31 == 0;
  else
    v94 = 1;
  if (!v94)
  {
    v95 = 0;
    v139 = (_QWORD *)(v11 + v14);
    v96 = __ROR8__(*(_QWORD *)&v93, v89);
    v97 = v31 - 1;
    while (1)
    {
      v98 = *(unsigned int *)(_X10 + 4 * ((__clz(__rbit64(v96)) + v89) & 0x3F));
      if (v98 < v85)
        break;
      _X1 = v87 + v98;
      __asm { PRFM            #0, [X1] }
      v101 = v95 + 1;
      *((_DWORD *)&v140 + v95) = v98;
      v96 &= v96 - 1;
      if (v96)
      {
        _ZF = v97 == (_DWORD)v95++;
        if (!_ZF)
          continue;
      }
      goto LABEL_58;
    }
    v101 = v95;
    if (!v95)
      return v81;
LABEL_58:
    v102 = *(_DWORD *)a2;
    v137 = v12 - v14 + (_DWORD)v86 - v87 + 2;
    v103 = (unsigned int *)&v140;
    do
    {
      v105 = *v103++;
      v104 = v105;
      v106 = v87 + v105;
      if (*(_DWORD *)v106 == v102)
      {
        v107 = a3;
        v108 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v106 + 4), a3, v86, v139);
        a3 = v107;
        if (v108 + 4 > v81)
        {
          *a4 = v137 - v104;
          v81 = v108 + 4;
          if ((_QWORD *)((char *)a2 + v108 + 4) == (_QWORD *)v107)
            break;
        }
      }
      --v101;
    }
    while (v101);
  }
  return v81;
}

unint64_t ZSTD_RowFindBestMatch_dictMatchState_5_4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t *v53;
  __int8 v54;
  int16x8_t v55;
  uint64x2_t v56;
  uint64x2_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  char *v80;
  uint64_t v81;
  __int8 v82;
  int16x8_t v83;
  uint64x2_t v84;
  uint64x2_t v85;
  BOOL v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v93;
  int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  int v125;
  _QWORD *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v16 = (_DWORD)a2 - v11 - v13;
  else
    v16 = *(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 252) >= 4u)
    v17 = 4;
  else
    v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = (0xCF1BBCDCBB000000 * *a2) >> (56 - *(_DWORD *)(v18 + 52));
  v20 = (v19 >> 4) & 0xFFFFFF0;
  _X13 = (int8x16_t *)(*(_QWORD *)(v18 + 56) + 2 * v20);
  _X10 = *(_QWORD *)(v18 + 96) + 4 * v20;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X13]
  }
  v28 = *(unsigned int *)(a1 + 44);
  if (v12 - v28 >= 0x181)
  {
    if (v28 <= 0xFFFFFF9F)
    {
      v102 = v28 + 96;
      do
      {
        v103 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + 8 + v28)) >> (56 - v10);
        v104 = (v103 >> 4) & 0xFFFFFF0;
        _X24 = v5 + 4 * v104;
        __asm { PRFM            #0, [X24] }
        _X23 = v7 + 2 * v104;
        __asm { PRFM            #0, [X23] }
        v109 = *(unsigned int *)(v9 + 4 * (v28 & 7));
        *(_DWORD *)(v9 + 4 * (v28 & 7)) = v103;
        v110 = (v109 >> 4) & 0xFFFFFF0;
        v111 = v5 + 4 * v110;
        v112 = (_BYTE *)(v7 + 2 * v110);
        v113 = (*v112 - 1) & 0xF;
        *v112 = v113;
        v112[v113 + 16] = v109;
        *(_DWORD *)(v111 + 4 * v113) = v28++;
      }
      while (v28 < v102);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v114 = v12 - 32;
    LODWORD(v28) = v12 - 32;
    v115 = (_DWORD)a2 + 1 - (v11 + v114);
    if ((v115 + 1) < 8)
      v116 = v115 + 1;
    else
      v116 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v114)
      v117 = v116;
    else
      v117 = 0;
    if (v114 < v117 + (int)v114)
    {
      v118 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v119 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + v114)) >> v118;
        v120 = (v119 >> 4) & 0xFFFFFF0;
        _X26 = v6 + 4 * v120;
        __asm { PRFM            #0, [X26] }
        _X25 = v8 + 2 * v120;
        __asm { PRFM            #0, [X25] }
        *(_DWORD *)(a1 + 4 * (v114++ & 7) + 64) = v119;
        --v117;
      }
      while (v117);
    }
  }
  v29 = 1 << v17;
  if (v28 < v12)
  {
    v30 = *(_QWORD *)(a1 + 8) + 8;
    v31 = 56 - *(_DWORD *)(a1 + 52);
    v32 = v28;
    do
    {
      v33 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v30 + v32)) >> v31;
      v34 = (v33 >> 4) & 0xFFFFFF0;
      _X25 = v6 + 4 * v34;
      __asm { PRFM            #0, [X25] }
      _X24 = v8 + 2 * v34;
      __asm { PRFM            #0, [X24] }
      v39 = *(unsigned int *)(v9 + 4 * (v32 & 7));
      *(_DWORD *)(v9 + 4 * (v32 & 7)) = v33;
      v40 = (v39 >> 4) & 0xFFFFFF0;
      v41 = v6 + 4 * v40;
      v42 = (_BYTE *)(v8 + 2 * v40);
      v43 = (*v42 - 1) & 0xF;
      *v42 = v43;
      v42[v43 + 16] = v39;
      *(_DWORD *)(v41 + 4 * v43) = v32++;
    }
    while (v32 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v44 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + v12 + 8)) >> (56 - v10);
  v45 = (v44 >> 4) & 0xFFFFFF0;
  _X5 = v5 + 4 * v45;
  __asm { PRFM            #0, [X5] }
  _X5 = v7 + 2 * v45;
  __asm { PRFM            #0, [X5] }
  v50 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v44;
  v51 = (v50 >> 4) & 0xFFFFFF0;
  v52 = v5 + 4 * v51;
  v53 = (int8x16_t *)(v7 + 2 * v51);
  v54 = v53->i8[0];
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  v55 = vshlq_n_s16((int16x8_t)vceqq_s8(v53[1], vdupq_n_s8(v50)), 7uLL);
  v56 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v55, v55, 0xEuLL), 0xEuLL);
  v57 = vsraq_n_u64(v56, v56, 0x1CuLL);
  if (v57.u8[0] | (unsigned __int16)(v57.u8[8] << 8))
  {
    v58 = 0;
    v59 = ((unsigned __int16)(v57.u8[0] | (v57.u8[8] << 8)) >> (v54 & 0xF)) | (unsigned __int16)((v57.u8[0] | (unsigned __int16)(v57.u8[8] << 8)) << (-v54 & 0xF));
    v60 = v29;
    while (1)
    {
      v61 = *(unsigned int *)(v52 + 4 * ((__clz(__rbit64(v59)) + v54) & 0xF));
      if (v61 < v16)
        break;
      _X17 = v11 + v61;
      __asm { PRFM            #0, [X17] }
      v64 = v58 + 1;
      *((_DWORD *)&v128 + v58) = v61;
      v29 = v60 - 1;
      v59 &= v59 - 1;
      if (v59)
      {
        ++v58;
        if (--v60)
          continue;
      }
      goto LABEL_22;
    }
    v29 = v60;
    v64 = v58;
  }
  else
  {
    v64 = 0;
  }
LABEL_22:
  v65 = (v54 - 1) & 0xF;
  v53->i8[0] = v65;
  v53[1].i8[v65] = v50;
  v66 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v66 + 1;
  *(_DWORD *)(v52 + 4 * v65) = v66;
  if (v64)
  {
    v67 = 0;
    v68 = a3 - 7;
    v69 = a2 + 1;
    v70 = v11 + 8;
    v71 = 3;
    while (1)
    {
      v72 = *((unsigned int *)&v128 + v67);
      v73 = (_QWORD *)(v11 + v72);
      if (*(unsigned __int8 *)(v11 + v72 + v71) != *((unsigned __int8 *)a2 + v71))
        goto LABEL_41;
      if (v68 <= (unint64_t)a2)
      {
        v76 = a2;
      }
      else
      {
        v74 = *a2 ^ *v73;
        if (v74)
        {
          v75 = __clz(__rbit64(v74)) >> 3;
          goto LABEL_39;
        }
        while (1)
        {
          v76 = (_QWORD *)((char *)v69 + v74);
          if ((unint64_t)v69 + v74 >= v68)
            break;
          v77 = *(_QWORD *)(v70 + v72 + v74);
          v74 += 8;
          v78 = *v76 ^ v77;
          if (v78)
          {
            v75 = v74 + (__clz(__rbit64(v78)) >> 3);
            goto LABEL_39;
          }
        }
        v73 = (_QWORD *)(v70 + v72 + v74);
      }
      if ((unint64_t)v76 < a3 - 3 && *(_DWORD *)v73 == *(_DWORD *)v76)
      {
        v76 = (_QWORD *)((char *)v76 + 4);
        v73 = (_QWORD *)((char *)v73 + 4);
      }
      if ((unint64_t)v76 < a3 - 1 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v76)
      {
        v76 = (_QWORD *)((char *)v76 + 2);
        v73 = (_QWORD *)((char *)v73 + 2);
      }
      if ((unint64_t)v76 < a3 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v76)
        v76 = (_QWORD *)((char *)v76 + 1);
      v75 = (char *)v76 - (char *)a2;
LABEL_39:
      if (v75 > v71)
      {
        *a4 = v12 + 2 - v72;
        v71 = v75;
        if ((_QWORD *)((char *)a2 + v75) == (_QWORD *)a3)
          goto LABEL_48;
      }
LABEL_41:
      ++v67;
      v75 = v71;
      if (v67 == v64)
        goto LABEL_48;
    }
  }
  v75 = 3;
LABEL_48:
  v79 = *(_DWORD *)(v18 + 24);
  v80 = *(char **)v18;
  v81 = *(_QWORD *)(v18 + 8);
  v82 = _X13->i8[0];
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  v83 = vshlq_n_s16((int16x8_t)vceqq_s8(_X13[1], vdupq_n_s8(v19)), 7uLL);
  v84 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v83, v83, 0xEuLL), 0xEuLL);
  v85 = vsraq_n_u64(v84, v84, 0x1CuLL);
  if (v85.u8[0] | (unsigned __int16)(v85.u8[8] << 8))
    v86 = v29 == 0;
  else
    v86 = 1;
  if (!v86)
  {
    v87 = 0;
    v127 = (_QWORD *)(v11 + v14);
    v88 = ((unsigned __int16)(v85.u8[0] | (v85.u8[8] << 8)) >> (v82 & 0xF)) | (unsigned __int16)((v85.u8[0] | (v85.u8[8] << 8)) << (-v82 & 0xF));
    v89 = v29 - 1;
    while (1)
    {
      v90 = *(unsigned int *)(_X10 + 4 * ((__clz(__rbit64(v88)) + v82) & 0xF));
      if (v90 < v79)
        break;
      _X1 = v81 + v90;
      __asm { PRFM            #0, [X1] }
      v93 = v87 + 1;
      *((_DWORD *)&v128 + v87) = v90;
      v88 &= v88 - 1;
      if (v88)
      {
        _ZF = v89 == (_DWORD)v87++;
        if (!_ZF)
          continue;
      }
      goto LABEL_59;
    }
    v93 = v87;
    if (!v87)
      return v75;
LABEL_59:
    v94 = *(_DWORD *)a2;
    v125 = v12 - v14 + (_DWORD)v80 - v81 + 2;
    v95 = (unsigned int *)&v128;
    do
    {
      v97 = *v95++;
      v96 = v97;
      v98 = v81 + v97;
      if (*(_DWORD *)v98 == v94)
      {
        v99 = (_QWORD *)a3;
        v100 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v98 + 4), a3, v80, v127);
        a3 = (unint64_t)v99;
        if (v100 + 4 > v75)
        {
          *a4 = v125 - v96;
          v75 = v100 + 4;
          if ((_QWORD *)((char *)a2 + v100 + 4) == v99)
            break;
        }
      }
      --v93;
    }
    while (v93);
  }
  return v75;
}

unint64_t ZSTD_RowFindBestMatch_dictMatchState_5_5(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char v57;
  const __int16 *v58;
  int8x16_t v59;
  unsigned __int32 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82;
  char *v83;
  uint64_t v84;
  const __int16 *v85;
  char v86;
  char v87;
  int8x16_t v88;
  int8x8_t v89;
  unsigned __int32 v90;
  BOOL v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v99;
  int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  int v133;
  _QWORD *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  int16x8x2_t v153;
  int16x8x2_t v154;

  v152 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v16 = (_DWORD)a2 - v11 - v13;
  else
    v16 = *(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 252) >= 5u)
    v17 = 5;
  else
    v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = (0xCF1BBCDCBB000000 * *a2) >> (56 - *(_DWORD *)(v18 + 52));
  v20 = (v19 >> 3) & 0x1FFFFFE0;
  _X13 = (_BYTE *)(*(_QWORD *)(v18 + 56) + 2 * v20);
  _X10 = *(_QWORD *)(v18 + 96) + 4 * v20;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X10,#0x40]
    PRFM            #0, [X13]
  }
  v29 = *(unsigned int *)(a1 + 44);
  if (v12 - v29 >= 0x181)
  {
    if (v29 <= 0xFFFFFF9F)
    {
      v108 = v29 + 96;
      do
      {
        v109 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + 8 + v29)) >> (56 - v10);
        v110 = (v109 >> 3) & 0x1FFFFFE0;
        _X24 = v5 + 4 * v110;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x40]
        }
        _X23 = v7 + 2 * v110;
        __asm { PRFM            #0, [X23] }
        v116 = *(unsigned int *)(v9 + 4 * (v29 & 7));
        *(_DWORD *)(v9 + 4 * (v29 & 7)) = v109;
        v117 = (v116 >> 3) & 0x1FFFFFE0;
        v118 = v5 + 4 * v117;
        v119 = (_BYTE *)(v7 + 2 * v117);
        v120 = (*v119 - 1) & 0x1F;
        *v119 = v120;
        v119[v120 + 16] = v116;
        *(_DWORD *)(v118 + 4 * v120) = v29++;
      }
      while (v29 < v108);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v121 = v12 - 32;
    LODWORD(v29) = v12 - 32;
    v122 = (_DWORD)a2 + 1 - (v11 + v121);
    if ((v122 + 1) < 8)
      v123 = v122 + 1;
    else
      v123 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v121)
      v124 = v123;
    else
      v124 = 0;
    if (v121 < v124 + (int)v121)
    {
      v125 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v126 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + v121)) >> v125;
        v127 = (v126 >> 3) & 0x1FFFFFE0;
        _X26 = v6 + 4 * v127;
        __asm
        {
          PRFM            #0, [X26]
          PRFM            #0, [X26,#0x40]
        }
        _X25 = v8 + 2 * v127;
        __asm { PRFM            #0, [X25] }
        *(_DWORD *)(a1 + 4 * (v121++ & 7) + 64) = v126;
        --v124;
      }
      while (v124);
    }
  }
  v30 = 1 << v17;
  if (v29 < v12)
  {
    v31 = *(_QWORD *)(a1 + 8) + 8;
    v32 = 56 - *(_DWORD *)(a1 + 52);
    v33 = v29;
    do
    {
      v34 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v31 + v33)) >> v32;
      v35 = (v34 >> 3) & 0x1FFFFFE0;
      _X25 = v6 + 4 * v35;
      __asm
      {
        PRFM            #0, [X25]
        PRFM            #0, [X25,#0x40]
      }
      _X24 = v8 + 2 * v35;
      __asm { PRFM            #0, [X24] }
      v41 = *(unsigned int *)(v9 + 4 * (v33 & 7));
      *(_DWORD *)(v9 + 4 * (v33 & 7)) = v34;
      v42 = (v41 >> 3) & 0x1FFFFFE0;
      v43 = v6 + 4 * v42;
      v44 = (_BYTE *)(v8 + 2 * v42);
      v45 = (*v44 - 1) & 0x1F;
      *v44 = v45;
      v44[v45 + 16] = v41;
      *(_DWORD *)(v43 + 4 * v45) = v33++;
    }
    while (v33 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v46 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + v12 + 8)) >> (56 - v10);
  v47 = (v46 >> 3) & 0x1FFFFFE0;
  _X5 = v5 + 4 * v47;
  __asm
  {
    PRFM            #0, [X5]
    PRFM            #0, [X5,#0x40]
  }
  _X5 = v7 + 2 * v47;
  __asm { PRFM            #0, [X5] }
  v53 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v46;
  v54 = (v53 >> 3) & 0x1FFFFFE0;
  v55 = v5 + 4 * v54;
  v56 = (char *)(v7 + 2 * v54);
  v58 = (const __int16 *)(v56 + 16);
  v57 = *v56;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v153 = vld2q_s16(v58);
  v136 = 0u;
  v137 = 0u;
  v59 = vdupq_n_s8(v53);
  *(int8x8_t *)v153.val[0].i8 = vqmovn_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v153.val[0]));
  *(int8x8_t *)v59.i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v153.val[1])), *(int8x8_t *)v153.val[0].i8, 2uLL);
  v60 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v59.i8, *(int8x8_t *)v153.val[0].i8), vuzp1_s8(*(int8x8_t *)v59.i8, *(int8x8_t *)v153.val[0].i8), 4uLL).u32[0];
  if (v60)
  {
    v61 = 0;
    v62 = __ROR4__(v60, v57);
    v63 = v30;
    while (1)
    {
      v64 = *(unsigned int *)(v55 + 4 * ((__clz(__rbit64(v62)) + v57) & 0x1F));
      if (v64 < v16)
        break;
      _X17 = v11 + v64;
      __asm { PRFM            #0, [X17] }
      v67 = v61 + 1;
      *((_DWORD *)&v136 + v61) = v64;
      v30 = v63 - 1;
      v62 &= v62 - 1;
      if (v62)
      {
        ++v61;
        if (--v63)
          continue;
      }
      goto LABEL_22;
    }
    v30 = v63;
    v67 = v61;
  }
  else
  {
    v67 = 0;
  }
LABEL_22:
  v68 = (v57 - 1) & 0x1F;
  *v56 = v68;
  v56[v68 + 16] = v53;
  v69 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v69 + 1;
  *(_DWORD *)(v55 + 4 * v68) = v69;
  if (v67)
  {
    v70 = 0;
    v71 = a3 - 7;
    v72 = a2 + 1;
    v73 = v11 + 8;
    v74 = 3;
    while (1)
    {
      v75 = *((unsigned int *)&v136 + v70);
      v76 = (_QWORD *)(v11 + v75);
      if (*(unsigned __int8 *)(v11 + v75 + v74) != *((unsigned __int8 *)a2 + v74))
        goto LABEL_41;
      if (v71 <= (unint64_t)a2)
      {
        v79 = a2;
      }
      else
      {
        v77 = *a2 ^ *v76;
        if (v77)
        {
          v78 = __clz(__rbit64(v77)) >> 3;
          goto LABEL_39;
        }
        while (1)
        {
          v79 = (_QWORD *)((char *)v72 + v77);
          if ((unint64_t)v72 + v77 >= v71)
            break;
          v80 = *(_QWORD *)(v73 + v75 + v77);
          v77 += 8;
          v81 = *v79 ^ v80;
          if (v81)
          {
            v78 = v77 + (__clz(__rbit64(v81)) >> 3);
            goto LABEL_39;
          }
        }
        v76 = (_QWORD *)(v73 + v75 + v77);
      }
      if ((unint64_t)v79 < a3 - 3 && *(_DWORD *)v76 == *(_DWORD *)v79)
      {
        v79 = (_QWORD *)((char *)v79 + 4);
        v76 = (_QWORD *)((char *)v76 + 4);
      }
      if ((unint64_t)v79 < a3 - 1 && *(unsigned __int16 *)v76 == *(unsigned __int16 *)v79)
      {
        v79 = (_QWORD *)((char *)v79 + 2);
        v76 = (_QWORD *)((char *)v76 + 2);
      }
      if ((unint64_t)v79 < a3 && *(unsigned __int8 *)v76 == *(unsigned __int8 *)v79)
        v79 = (_QWORD *)((char *)v79 + 1);
      v78 = (char *)v79 - (char *)a2;
LABEL_39:
      if (v78 > v74)
      {
        *a4 = v12 + 2 - v75;
        v74 = v78;
        if ((_QWORD *)((char *)a2 + v78) == (_QWORD *)a3)
          goto LABEL_48;
      }
LABEL_41:
      ++v70;
      v78 = v74;
      if (v70 == v67)
        goto LABEL_48;
    }
  }
  v78 = 3;
LABEL_48:
  v82 = *(_DWORD *)(v18 + 24);
  v83 = *(char **)v18;
  v84 = *(_QWORD *)(v18 + 8);
  v87 = *_X13;
  v85 = (const __int16 *)(_X13 + 16);
  v86 = v87;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v154 = vld2q_s16(v85);
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v88 = vdupq_n_s8(v19);
  v136 = 0u;
  v137 = 0u;
  v89 = vqmovn_s16((int16x8_t)vceqq_s8(v88, (int8x16_t)v154.val[0]));
  *(int8x8_t *)v154.val[0].i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v88, (int8x16_t)v154.val[1])), v89, 2uLL);
  v90 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v154.val[0].i8, v89), vuzp1_s8(*(int8x8_t *)v154.val[0].i8, v89), 4uLL).u32[0];
  if (v90)
    v91 = v30 == 0;
  else
    v91 = 1;
  if (!v91)
  {
    v92 = 0;
    v135 = (_QWORD *)(v11 + v14);
    v93 = v86 & 0x1F;
    v94 = __ROR4__(v90, v86 & 0x1F);
    v95 = v30 - 1;
    while (1)
    {
      v96 = *(unsigned int *)(_X10 + 4 * ((__clz(__rbit64(v94)) + v93) & 0x1F));
      if (v96 < v82)
        break;
      _X1 = v84 + v96;
      __asm { PRFM            #0, [X1] }
      v99 = v92 + 1;
      *((_DWORD *)&v136 + v92) = v96;
      v94 &= v94 - 1;
      if (v94)
      {
        _ZF = v95 == (_DWORD)v92++;
        if (!_ZF)
          continue;
      }
      goto LABEL_59;
    }
    v99 = v92;
    if (!v92)
      return v78;
LABEL_59:
    v100 = *(_DWORD *)a2;
    v133 = v12 - v14 + (_DWORD)v83 - v84 + 2;
    v101 = (unsigned int *)&v136;
    do
    {
      v103 = *v101++;
      v102 = v103;
      v104 = v84 + v103;
      if (*(_DWORD *)v104 == v100)
      {
        v105 = (_QWORD *)a3;
        v106 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v104 + 4), a3, v83, v135);
        a3 = (unint64_t)v105;
        if (v106 + 4 > v78)
        {
          *a4 = v133 - v102;
          v78 = v106 + 4;
          if ((_QWORD *)((char *)a2 + v106 + 4) == v105)
            break;
        }
      }
      --v99;
    }
    while (v99);
  }
  return v78;
}

unint64_t ZSTD_RowFindBestMatch_dictMatchState_5_6(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char v59;
  const char *v60;
  uint64_t v61;
  int8x16_t v62;
  int8x8_t v63;
  int8x8_t v64;
  int8x8_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  char *v86;
  uint64_t v87;
  const char *v88;
  char v89;
  char v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x8_t v93;
  BOOL v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v101;
  int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  int v137;
  _QWORD *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  int8x16x4_t v157;
  int8x16x4_t v158;

  v156 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v16 = (_DWORD)a2 - v11 - v13;
  else
    v16 = *(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 252) >= 6u)
    v17 = 6;
  else
    v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = (0xCF1BBCDCBB000000 * *a2) >> (56 - *(_DWORD *)(v18 + 52));
  v20 = (v19 >> 2) & 0x3FFFFFC0;
  _X13 = (_BYTE *)(*(_QWORD *)(v18 + 56) + 2 * v20);
  _X10 = *(_QWORD *)(v18 + 96) + 4 * v20;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X10,#0x40]
    PRFM            #0, [X13]
    PRFM            #0, [X13,#0x40]
  }
  v30 = *(unsigned int *)(a1 + 44);
  if (v12 - v30 >= 0x181)
  {
    if (v30 <= 0xFFFFFF9F)
    {
      v110 = v30 + 96;
      do
      {
        v111 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + 8 + v30)) >> (56 - v10);
        v112 = (v111 >> 2) & 0x3FFFFFC0;
        _X24 = v5 + 4 * v112;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x40]
        }
        _X23 = v7 + 2 * v112;
        __asm
        {
          PRFM            #0, [X23]
          PRFM            #0, [X23,#0x40]
        }
        v119 = *(unsigned int *)(v9 + 4 * (v30 & 7));
        *(_DWORD *)(v9 + 4 * (v30 & 7)) = v111;
        v120 = (v119 >> 2) & 0x3FFFFFC0;
        v121 = v5 + 4 * v120;
        v122 = (_BYTE *)(v7 + 2 * v120);
        v123 = (*v122 - 1) & 0x3F;
        *v122 = v123;
        v122[v123 + 16] = v119;
        *(_DWORD *)(v121 + 4 * v123) = v30++;
      }
      while (v30 < v110);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v124 = v12 - 32;
    LODWORD(v30) = v12 - 32;
    v125 = (_DWORD)a2 + 1 - (v11 + v124);
    if ((v125 + 1) < 8)
      v126 = v125 + 1;
    else
      v126 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v124)
      v127 = v126;
    else
      v127 = 0;
    if (v124 < v127 + (int)v124)
    {
      v128 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v129 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + v124)) >> v128;
        v130 = (v129 >> 2) & 0x3FFFFFC0;
        _X26 = v6 + 4 * v130;
        __asm
        {
          PRFM            #0, [X26]
          PRFM            #0, [X26,#0x40]
        }
        _X25 = v8 + 2 * v130;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        *(_DWORD *)(a1 + 4 * (v124++ & 7) + 64) = v129;
        --v127;
      }
      while (v127);
    }
  }
  v31 = 1 << v17;
  if (v30 < v12)
  {
    v32 = *(_QWORD *)(a1 + 8) + 8;
    v33 = 56 - *(_DWORD *)(a1 + 52);
    v34 = v30;
    do
    {
      v35 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v32 + v34)) >> v33;
      v36 = (v35 >> 2) & 0x3FFFFFC0;
      _X25 = v6 + 4 * v36;
      __asm
      {
        PRFM            #0, [X25]
        PRFM            #0, [X25,#0x40]
      }
      _X24 = v8 + 2 * v36;
      __asm
      {
        PRFM            #0, [X24]
        PRFM            #0, [X24,#0x40]
      }
      v43 = *(unsigned int *)(v9 + 4 * (v34 & 7));
      *(_DWORD *)(v9 + 4 * (v34 & 7)) = v35;
      v44 = (v43 >> 2) & 0x3FFFFFC0;
      v45 = v6 + 4 * v44;
      v46 = (_BYTE *)(v8 + 2 * v44);
      v47 = (*v46 - 1) & 0x3F;
      *v46 = v47;
      v46[v47 + 16] = v43;
      *(_DWORD *)(v45 + 4 * v47) = v34++;
    }
    while (v34 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v48 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + v12 + 8)) >> (56 - v10);
  v49 = (v48 >> 2) & 0x3FFFFFC0;
  _X5 = v5 + 4 * v49;
  __asm
  {
    PRFM            #0, [X5]
    PRFM            #0, [X5,#0x40]
  }
  _X5 = v7 + 2 * v49;
  __asm
  {
    PRFM            #0, [X5]
    PRFM            #0, [X5,#0x40]
  }
  v56 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v48;
  v57 = (v56 >> 2) & 0x3FFFFFC0;
  v58 = (char *)(v7 + 2 * v57);
  v60 = v58 + 16;
  v59 = *v58;
  v61 = v5 + 4 * v57;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v157 = vld4q_s8(v60);
  v62 = vdupq_n_s8(v56);
  v157.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v157.val[3], v62), vceqq_s8(v157.val[2], v62), 1uLL), vsriq_n_s8(vceqq_s8(v157.val[1], v62), vceqq_s8(v157.val[0], v62), 1uLL), 2uLL);
  v63 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v157.val[0], v157.val[0], 4uLL), 4uLL);
  v64 = v63;
  if (v63)
  {
    v65 = 0;
    v66 = __ROR8__(*(_QWORD *)&v63, v59);
    v67 = v31;
    while (1)
    {
      v68 = *(unsigned int *)(v61 + 4 * ((__clz(__rbit64(v66)) + v59) & 0x3F));
      if (v68 < v16)
        break;
      _X17 = v11 + v68;
      __asm { PRFM            #0, [X17] }
      v64 = (int8x8_t)(*(_QWORD *)&v65 + 1);
      *((_DWORD *)&v140 + *(_QWORD *)&v65) = v68;
      v31 = v67 - 1;
      v66 &= v66 - 1;
      if (v66)
      {
        ++*(_QWORD *)&v65;
        if (--v67)
          continue;
      }
      goto LABEL_21;
    }
    v31 = v67;
    v64 = v65;
  }
LABEL_21:
  v71 = (v59 - 1) & 0x3F;
  *v58 = v71;
  v58[v71 + 16] = v56;
  v72 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v72 + 1;
  *(_DWORD *)(v61 + 4 * v71) = v72;
  if (v64)
  {
    v73 = 0;
    v74 = a3 - 7;
    v75 = a2 + 1;
    v76 = v11 + 8;
    v77 = 3;
    while (1)
    {
      v78 = *((unsigned int *)&v140 + v73);
      v79 = (_QWORD *)(v11 + v78);
      if (*(unsigned __int8 *)(v11 + v78 + v77) != *((unsigned __int8 *)a2 + v77))
        goto LABEL_40;
      if (v74 <= (unint64_t)a2)
      {
        v82 = a2;
      }
      else
      {
        v80 = *a2 ^ *v79;
        if (v80)
        {
          v81 = __clz(__rbit64(v80)) >> 3;
          goto LABEL_38;
        }
        while (1)
        {
          v82 = (_QWORD *)((char *)v75 + v80);
          if ((unint64_t)v75 + v80 >= v74)
            break;
          v83 = *(_QWORD *)(v76 + v78 + v80);
          v80 += 8;
          v84 = *v82 ^ v83;
          if (v84)
          {
            v81 = v80 + (__clz(__rbit64(v84)) >> 3);
            goto LABEL_38;
          }
        }
        v79 = (_QWORD *)(v76 + v78 + v80);
      }
      if ((unint64_t)v82 < a3 - 3 && *(_DWORD *)v79 == *(_DWORD *)v82)
      {
        v82 = (_QWORD *)((char *)v82 + 4);
        v79 = (_QWORD *)((char *)v79 + 4);
      }
      if ((unint64_t)v82 < a3 - 1 && *(unsigned __int16 *)v79 == *(unsigned __int16 *)v82)
      {
        v82 = (_QWORD *)((char *)v82 + 2);
        v79 = (_QWORD *)((char *)v79 + 2);
      }
      if ((unint64_t)v82 < a3 && *(unsigned __int8 *)v79 == *(unsigned __int8 *)v82)
        v82 = (_QWORD *)((char *)v82 + 1);
      v81 = (char *)v82 - (char *)a2;
LABEL_38:
      if (v81 > v77)
      {
        *a4 = v12 + 2 - v78;
        v77 = v81;
        if ((_QWORD *)((char *)a2 + v81) == (_QWORD *)a3)
          goto LABEL_47;
      }
LABEL_40:
      ++v73;
      v81 = v77;
      if (v73 == *(_QWORD *)&v64)
        goto LABEL_47;
    }
  }
  v81 = 3;
LABEL_47:
  v85 = *(_DWORD *)(v18 + 24);
  v86 = *(char **)v18;
  v87 = *(_QWORD *)(v18 + 8);
  v90 = *_X13;
  v88 = _X13 + 16;
  v89 = v90;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v158 = vld4q_s8(v88);
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v91 = vdupq_n_s8(v19);
  v92 = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v158.val[3], v91), vceqq_s8(v158.val[2], v91), 1uLL), vsriq_n_s8(vceqq_s8(v158.val[1], v91), vceqq_s8(v158.val[0], v91), 1uLL), 2uLL);
  v93 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v92, v92, 4uLL), 4uLL);
  if (v93)
    v94 = v31 == 0;
  else
    v94 = 1;
  if (!v94)
  {
    v95 = 0;
    v139 = (_QWORD *)(v11 + v14);
    v96 = __ROR8__(*(_QWORD *)&v93, v89);
    v97 = v31 - 1;
    while (1)
    {
      v98 = *(unsigned int *)(_X10 + 4 * ((__clz(__rbit64(v96)) + v89) & 0x3F));
      if (v98 < v85)
        break;
      _X1 = v87 + v98;
      __asm { PRFM            #0, [X1] }
      v101 = v95 + 1;
      *((_DWORD *)&v140 + v95) = v98;
      v96 &= v96 - 1;
      if (v96)
      {
        _ZF = v97 == (_DWORD)v95++;
        if (!_ZF)
          continue;
      }
      goto LABEL_58;
    }
    v101 = v95;
    if (!v95)
      return v81;
LABEL_58:
    v102 = *(_DWORD *)a2;
    v137 = v12 - v14 + (_DWORD)v86 - v87 + 2;
    v103 = (unsigned int *)&v140;
    do
    {
      v105 = *v103++;
      v104 = v105;
      v106 = v87 + v105;
      if (*(_DWORD *)v106 == v102)
      {
        v107 = (_QWORD *)a3;
        v108 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v106 + 4), a3, v86, v139);
        a3 = (unint64_t)v107;
        if (v108 + 4 > v81)
        {
          *a4 = v137 - v104;
          v81 = v108 + 4;
          if ((_QWORD *)((char *)a2 + v108 + 4) == v107)
            break;
        }
      }
      --v101;
    }
    while (v101);
  }
  return v81;
}

unint64_t ZSTD_RowFindBestMatch_dictMatchState_6_4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int8x16_t *v53;
  __int8 v54;
  int16x8_t v55;
  uint64x2_t v56;
  uint64x2_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  char *v80;
  uint64_t v81;
  __int8 v82;
  int16x8_t v83;
  uint64x2_t v84;
  uint64x2_t v85;
  BOOL v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v93;
  int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  uint64_t v98;
  _QWORD *v99;
  unint64_t v100;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  int v125;
  _QWORD *v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v16 = (_DWORD)a2 - v11 - v13;
  else
    v16 = *(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 252) >= 4u)
    v17 = 4;
  else
    v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = (0xCF1BBCDCBF9B0000 * *a2) >> (56 - *(_DWORD *)(v18 + 52));
  v20 = (v19 >> 4) & 0xFFFFFF0;
  _X13 = (int8x16_t *)(*(_QWORD *)(v18 + 56) + 2 * v20);
  _X10 = *(_QWORD *)(v18 + 96) + 4 * v20;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X13]
  }
  v28 = *(unsigned int *)(a1 + 44);
  if (v12 - v28 >= 0x181)
  {
    if (v28 <= 0xFFFFFF9F)
    {
      v102 = v28 + 96;
      do
      {
        v103 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + 8 + v28)) >> (56 - v10);
        v104 = (v103 >> 4) & 0xFFFFFF0;
        _X24 = v5 + 4 * v104;
        __asm { PRFM            #0, [X24] }
        _X23 = v7 + 2 * v104;
        __asm { PRFM            #0, [X23] }
        v109 = *(unsigned int *)(v9 + 4 * (v28 & 7));
        *(_DWORD *)(v9 + 4 * (v28 & 7)) = v103;
        v110 = (v109 >> 4) & 0xFFFFFF0;
        v111 = v5 + 4 * v110;
        v112 = (_BYTE *)(v7 + 2 * v110);
        v113 = (*v112 - 1) & 0xF;
        *v112 = v113;
        v112[v113 + 16] = v109;
        *(_DWORD *)(v111 + 4 * v113) = v28++;
      }
      while (v28 < v102);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v114 = v12 - 32;
    LODWORD(v28) = v12 - 32;
    v115 = (_DWORD)a2 + 1 - (v11 + v114);
    if ((v115 + 1) < 8)
      v116 = v115 + 1;
    else
      v116 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v114)
      v117 = v116;
    else
      v117 = 0;
    if (v114 < v117 + (int)v114)
    {
      v118 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v119 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + v114)) >> v118;
        v120 = (v119 >> 4) & 0xFFFFFF0;
        _X26 = v6 + 4 * v120;
        __asm { PRFM            #0, [X26] }
        _X25 = v8 + 2 * v120;
        __asm { PRFM            #0, [X25] }
        *(_DWORD *)(a1 + 4 * (v114++ & 7) + 64) = v119;
        --v117;
      }
      while (v117);
    }
  }
  v29 = 1 << v17;
  if (v28 < v12)
  {
    v30 = *(_QWORD *)(a1 + 8) + 8;
    v31 = 56 - *(_DWORD *)(a1 + 52);
    v32 = v28;
    do
    {
      v33 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v30 + v32)) >> v31;
      v34 = (v33 >> 4) & 0xFFFFFF0;
      _X25 = v6 + 4 * v34;
      __asm { PRFM            #0, [X25] }
      _X24 = v8 + 2 * v34;
      __asm { PRFM            #0, [X24] }
      v39 = *(unsigned int *)(v9 + 4 * (v32 & 7));
      *(_DWORD *)(v9 + 4 * (v32 & 7)) = v33;
      v40 = (v39 >> 4) & 0xFFFFFF0;
      v41 = v6 + 4 * v40;
      v42 = (_BYTE *)(v8 + 2 * v40);
      v43 = (*v42 - 1) & 0xF;
      *v42 = v43;
      v42[v43 + 16] = v39;
      *(_DWORD *)(v41 + 4 * v43) = v32++;
    }
    while (v32 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v44 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + v12 + 8)) >> (56 - v10);
  v45 = (v44 >> 4) & 0xFFFFFF0;
  _X5 = v5 + 4 * v45;
  __asm { PRFM            #0, [X5] }
  _X5 = v7 + 2 * v45;
  __asm { PRFM            #0, [X5] }
  v50 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v44;
  v51 = (v50 >> 4) & 0xFFFFFF0;
  v52 = v5 + 4 * v51;
  v53 = (int8x16_t *)(v7 + 2 * v51);
  v54 = v53->i8[0];
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  v55 = vshlq_n_s16((int16x8_t)vceqq_s8(v53[1], vdupq_n_s8(v50)), 7uLL);
  v56 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v55, v55, 0xEuLL), 0xEuLL);
  v57 = vsraq_n_u64(v56, v56, 0x1CuLL);
  if (v57.u8[0] | (unsigned __int16)(v57.u8[8] << 8))
  {
    v58 = 0;
    v59 = ((unsigned __int16)(v57.u8[0] | (v57.u8[8] << 8)) >> (v54 & 0xF)) | (unsigned __int16)((v57.u8[0] | (unsigned __int16)(v57.u8[8] << 8)) << (-v54 & 0xF));
    v60 = v29;
    while (1)
    {
      v61 = *(unsigned int *)(v52 + 4 * ((__clz(__rbit64(v59)) + v54) & 0xF));
      if (v61 < v16)
        break;
      _X17 = v11 + v61;
      __asm { PRFM            #0, [X17] }
      v64 = v58 + 1;
      *((_DWORD *)&v128 + v58) = v61;
      v29 = v60 - 1;
      v59 &= v59 - 1;
      if (v59)
      {
        ++v58;
        if (--v60)
          continue;
      }
      goto LABEL_22;
    }
    v29 = v60;
    v64 = v58;
  }
  else
  {
    v64 = 0;
  }
LABEL_22:
  v65 = (v54 - 1) & 0xF;
  v53->i8[0] = v65;
  v53[1].i8[v65] = v50;
  v66 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v66 + 1;
  *(_DWORD *)(v52 + 4 * v65) = v66;
  if (v64)
  {
    v67 = 0;
    v68 = a3 - 7;
    v69 = a2 + 1;
    v70 = v11 + 8;
    v71 = 3;
    while (1)
    {
      v72 = *((unsigned int *)&v128 + v67);
      v73 = (_QWORD *)(v11 + v72);
      if (*(unsigned __int8 *)(v11 + v72 + v71) != *((unsigned __int8 *)a2 + v71))
        goto LABEL_41;
      if (v68 <= (unint64_t)a2)
      {
        v76 = a2;
      }
      else
      {
        v74 = *a2 ^ *v73;
        if (v74)
        {
          v75 = __clz(__rbit64(v74)) >> 3;
          goto LABEL_39;
        }
        while (1)
        {
          v76 = (_QWORD *)((char *)v69 + v74);
          if ((unint64_t)v69 + v74 >= v68)
            break;
          v77 = *(_QWORD *)(v70 + v72 + v74);
          v74 += 8;
          v78 = *v76 ^ v77;
          if (v78)
          {
            v75 = v74 + (__clz(__rbit64(v78)) >> 3);
            goto LABEL_39;
          }
        }
        v73 = (_QWORD *)(v70 + v72 + v74);
      }
      if ((unint64_t)v76 < a3 - 3 && *(_DWORD *)v73 == *(_DWORD *)v76)
      {
        v76 = (_QWORD *)((char *)v76 + 4);
        v73 = (_QWORD *)((char *)v73 + 4);
      }
      if ((unint64_t)v76 < a3 - 1 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v76)
      {
        v76 = (_QWORD *)((char *)v76 + 2);
        v73 = (_QWORD *)((char *)v73 + 2);
      }
      if ((unint64_t)v76 < a3 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v76)
        v76 = (_QWORD *)((char *)v76 + 1);
      v75 = (char *)v76 - (char *)a2;
LABEL_39:
      if (v75 > v71)
      {
        *a4 = v12 + 2 - v72;
        v71 = v75;
        if ((_QWORD *)((char *)a2 + v75) == (_QWORD *)a3)
          goto LABEL_48;
      }
LABEL_41:
      ++v67;
      v75 = v71;
      if (v67 == v64)
        goto LABEL_48;
    }
  }
  v75 = 3;
LABEL_48:
  v79 = *(_DWORD *)(v18 + 24);
  v80 = *(char **)v18;
  v81 = *(_QWORD *)(v18 + 8);
  v82 = _X13->i8[0];
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  v83 = vshlq_n_s16((int16x8_t)vceqq_s8(_X13[1], vdupq_n_s8(v19)), 7uLL);
  v84 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v83, v83, 0xEuLL), 0xEuLL);
  v85 = vsraq_n_u64(v84, v84, 0x1CuLL);
  if (v85.u8[0] | (unsigned __int16)(v85.u8[8] << 8))
    v86 = v29 == 0;
  else
    v86 = 1;
  if (!v86)
  {
    v87 = 0;
    v127 = (_QWORD *)(v11 + v14);
    v88 = ((unsigned __int16)(v85.u8[0] | (v85.u8[8] << 8)) >> (v82 & 0xF)) | (unsigned __int16)((v85.u8[0] | (v85.u8[8] << 8)) << (-v82 & 0xF));
    v89 = v29 - 1;
    while (1)
    {
      v90 = *(unsigned int *)(_X10 + 4 * ((__clz(__rbit64(v88)) + v82) & 0xF));
      if (v90 < v79)
        break;
      _X1 = v81 + v90;
      __asm { PRFM            #0, [X1] }
      v93 = v87 + 1;
      *((_DWORD *)&v128 + v87) = v90;
      v88 &= v88 - 1;
      if (v88)
      {
        _ZF = v89 == (_DWORD)v87++;
        if (!_ZF)
          continue;
      }
      goto LABEL_59;
    }
    v93 = v87;
    if (!v87)
      return v75;
LABEL_59:
    v94 = *(_DWORD *)a2;
    v125 = v12 - v14 + (_DWORD)v80 - v81 + 2;
    v95 = (unsigned int *)&v128;
    do
    {
      v97 = *v95++;
      v96 = v97;
      v98 = v81 + v97;
      if (*(_DWORD *)v98 == v94)
      {
        v99 = (_QWORD *)a3;
        v100 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v98 + 4), a3, v80, v127);
        a3 = (unint64_t)v99;
        if (v100 + 4 > v75)
        {
          *a4 = v125 - v96;
          v75 = v100 + 4;
          if ((_QWORD *)((char *)a2 + v100 + 4) == v99)
            break;
        }
      }
      --v93;
    }
    while (v93);
  }
  return v75;
}

unint64_t ZSTD_RowFindBestMatch_dictMatchState_6_5(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char v57;
  const __int16 *v58;
  int8x16_t v59;
  unsigned __int32 v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82;
  char *v83;
  uint64_t v84;
  const __int16 *v85;
  char v86;
  char v87;
  int8x16_t v88;
  int8x8_t v89;
  unsigned __int32 v90;
  BOOL v91;
  uint64_t v92;
  char v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v99;
  int v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  int v133;
  _QWORD *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  int16x8x2_t v153;
  int16x8x2_t v154;

  v152 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v16 = (_DWORD)a2 - v11 - v13;
  else
    v16 = *(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 252) >= 5u)
    v17 = 5;
  else
    v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = (0xCF1BBCDCBF9B0000 * *a2) >> (56 - *(_DWORD *)(v18 + 52));
  v20 = (v19 >> 3) & 0x1FFFFFE0;
  _X13 = (_BYTE *)(*(_QWORD *)(v18 + 56) + 2 * v20);
  _X10 = *(_QWORD *)(v18 + 96) + 4 * v20;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X10,#0x40]
    PRFM            #0, [X13]
  }
  v29 = *(unsigned int *)(a1 + 44);
  if (v12 - v29 >= 0x181)
  {
    if (v29 <= 0xFFFFFF9F)
    {
      v108 = v29 + 96;
      do
      {
        v109 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + 8 + v29)) >> (56 - v10);
        v110 = (v109 >> 3) & 0x1FFFFFE0;
        _X24 = v5 + 4 * v110;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x40]
        }
        _X23 = v7 + 2 * v110;
        __asm { PRFM            #0, [X23] }
        v116 = *(unsigned int *)(v9 + 4 * (v29 & 7));
        *(_DWORD *)(v9 + 4 * (v29 & 7)) = v109;
        v117 = (v116 >> 3) & 0x1FFFFFE0;
        v118 = v5 + 4 * v117;
        v119 = (_BYTE *)(v7 + 2 * v117);
        v120 = (*v119 - 1) & 0x1F;
        *v119 = v120;
        v119[v120 + 16] = v116;
        *(_DWORD *)(v118 + 4 * v120) = v29++;
      }
      while (v29 < v108);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v121 = v12 - 32;
    LODWORD(v29) = v12 - 32;
    v122 = (_DWORD)a2 + 1 - (v11 + v121);
    if ((v122 + 1) < 8)
      v123 = v122 + 1;
    else
      v123 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v121)
      v124 = v123;
    else
      v124 = 0;
    if (v121 < v124 + (int)v121)
    {
      v125 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v126 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + v121)) >> v125;
        v127 = (v126 >> 3) & 0x1FFFFFE0;
        _X26 = v6 + 4 * v127;
        __asm
        {
          PRFM            #0, [X26]
          PRFM            #0, [X26,#0x40]
        }
        _X25 = v8 + 2 * v127;
        __asm { PRFM            #0, [X25] }
        *(_DWORD *)(a1 + 4 * (v121++ & 7) + 64) = v126;
        --v124;
      }
      while (v124);
    }
  }
  v30 = 1 << v17;
  if (v29 < v12)
  {
    v31 = *(_QWORD *)(a1 + 8) + 8;
    v32 = 56 - *(_DWORD *)(a1 + 52);
    v33 = v29;
    do
    {
      v34 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v31 + v33)) >> v32;
      v35 = (v34 >> 3) & 0x1FFFFFE0;
      _X25 = v6 + 4 * v35;
      __asm
      {
        PRFM            #0, [X25]
        PRFM            #0, [X25,#0x40]
      }
      _X24 = v8 + 2 * v35;
      __asm { PRFM            #0, [X24] }
      v41 = *(unsigned int *)(v9 + 4 * (v33 & 7));
      *(_DWORD *)(v9 + 4 * (v33 & 7)) = v34;
      v42 = (v41 >> 3) & 0x1FFFFFE0;
      v43 = v6 + 4 * v42;
      v44 = (_BYTE *)(v8 + 2 * v42);
      v45 = (*v44 - 1) & 0x1F;
      *v44 = v45;
      v44[v45 + 16] = v41;
      *(_DWORD *)(v43 + 4 * v45) = v33++;
    }
    while (v33 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v46 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + v12 + 8)) >> (56 - v10);
  v47 = (v46 >> 3) & 0x1FFFFFE0;
  _X5 = v5 + 4 * v47;
  __asm
  {
    PRFM            #0, [X5]
    PRFM            #0, [X5,#0x40]
  }
  _X5 = v7 + 2 * v47;
  __asm { PRFM            #0, [X5] }
  v53 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v46;
  v54 = (v53 >> 3) & 0x1FFFFFE0;
  v55 = v5 + 4 * v54;
  v56 = (char *)(v7 + 2 * v54);
  v58 = (const __int16 *)(v56 + 16);
  v57 = *v56;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v153 = vld2q_s16(v58);
  v136 = 0u;
  v137 = 0u;
  v59 = vdupq_n_s8(v53);
  *(int8x8_t *)v153.val[0].i8 = vqmovn_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v153.val[0]));
  *(int8x8_t *)v59.i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v59, (int8x16_t)v153.val[1])), *(int8x8_t *)v153.val[0].i8, 2uLL);
  v60 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v59.i8, *(int8x8_t *)v153.val[0].i8), vuzp1_s8(*(int8x8_t *)v59.i8, *(int8x8_t *)v153.val[0].i8), 4uLL).u32[0];
  if (v60)
  {
    v61 = 0;
    v62 = __ROR4__(v60, v57);
    v63 = v30;
    while (1)
    {
      v64 = *(unsigned int *)(v55 + 4 * ((__clz(__rbit64(v62)) + v57) & 0x1F));
      if (v64 < v16)
        break;
      _X17 = v11 + v64;
      __asm { PRFM            #0, [X17] }
      v67 = v61 + 1;
      *((_DWORD *)&v136 + v61) = v64;
      v30 = v63 - 1;
      v62 &= v62 - 1;
      if (v62)
      {
        ++v61;
        if (--v63)
          continue;
      }
      goto LABEL_22;
    }
    v30 = v63;
    v67 = v61;
  }
  else
  {
    v67 = 0;
  }
LABEL_22:
  v68 = (v57 - 1) & 0x1F;
  *v56 = v68;
  v56[v68 + 16] = v53;
  v69 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v69 + 1;
  *(_DWORD *)(v55 + 4 * v68) = v69;
  if (v67)
  {
    v70 = 0;
    v71 = a3 - 7;
    v72 = a2 + 1;
    v73 = v11 + 8;
    v74 = 3;
    while (1)
    {
      v75 = *((unsigned int *)&v136 + v70);
      v76 = (_QWORD *)(v11 + v75);
      if (*(unsigned __int8 *)(v11 + v75 + v74) != *((unsigned __int8 *)a2 + v74))
        goto LABEL_41;
      if (v71 <= (unint64_t)a2)
      {
        v79 = a2;
      }
      else
      {
        v77 = *a2 ^ *v76;
        if (v77)
        {
          v78 = __clz(__rbit64(v77)) >> 3;
          goto LABEL_39;
        }
        while (1)
        {
          v79 = (_QWORD *)((char *)v72 + v77);
          if ((unint64_t)v72 + v77 >= v71)
            break;
          v80 = *(_QWORD *)(v73 + v75 + v77);
          v77 += 8;
          v81 = *v79 ^ v80;
          if (v81)
          {
            v78 = v77 + (__clz(__rbit64(v81)) >> 3);
            goto LABEL_39;
          }
        }
        v76 = (_QWORD *)(v73 + v75 + v77);
      }
      if ((unint64_t)v79 < a3 - 3 && *(_DWORD *)v76 == *(_DWORD *)v79)
      {
        v79 = (_QWORD *)((char *)v79 + 4);
        v76 = (_QWORD *)((char *)v76 + 4);
      }
      if ((unint64_t)v79 < a3 - 1 && *(unsigned __int16 *)v76 == *(unsigned __int16 *)v79)
      {
        v79 = (_QWORD *)((char *)v79 + 2);
        v76 = (_QWORD *)((char *)v76 + 2);
      }
      if ((unint64_t)v79 < a3 && *(unsigned __int8 *)v76 == *(unsigned __int8 *)v79)
        v79 = (_QWORD *)((char *)v79 + 1);
      v78 = (char *)v79 - (char *)a2;
LABEL_39:
      if (v78 > v74)
      {
        *a4 = v12 + 2 - v75;
        v74 = v78;
        if ((_QWORD *)((char *)a2 + v78) == (_QWORD *)a3)
          goto LABEL_48;
      }
LABEL_41:
      ++v70;
      v78 = v74;
      if (v70 == v67)
        goto LABEL_48;
    }
  }
  v78 = 3;
LABEL_48:
  v82 = *(_DWORD *)(v18 + 24);
  v83 = *(char **)v18;
  v84 = *(_QWORD *)(v18 + 8);
  v87 = *_X13;
  v85 = (const __int16 *)(_X13 + 16);
  v86 = v87;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v154 = vld2q_s16(v85);
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v88 = vdupq_n_s8(v19);
  v136 = 0u;
  v137 = 0u;
  v89 = vqmovn_s16((int16x8_t)vceqq_s8(v88, (int8x16_t)v154.val[0]));
  *(int8x8_t *)v154.val[0].i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v88, (int8x16_t)v154.val[1])), v89, 2uLL);
  v90 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v154.val[0].i8, v89), vuzp1_s8(*(int8x8_t *)v154.val[0].i8, v89), 4uLL).u32[0];
  if (v90)
    v91 = v30 == 0;
  else
    v91 = 1;
  if (!v91)
  {
    v92 = 0;
    v135 = (_QWORD *)(v11 + v14);
    v93 = v86 & 0x1F;
    v94 = __ROR4__(v90, v86 & 0x1F);
    v95 = v30 - 1;
    while (1)
    {
      v96 = *(unsigned int *)(_X10 + 4 * ((__clz(__rbit64(v94)) + v93) & 0x1F));
      if (v96 < v82)
        break;
      _X1 = v84 + v96;
      __asm { PRFM            #0, [X1] }
      v99 = v92 + 1;
      *((_DWORD *)&v136 + v92) = v96;
      v94 &= v94 - 1;
      if (v94)
      {
        _ZF = v95 == (_DWORD)v92++;
        if (!_ZF)
          continue;
      }
      goto LABEL_59;
    }
    v99 = v92;
    if (!v92)
      return v78;
LABEL_59:
    v100 = *(_DWORD *)a2;
    v133 = v12 - v14 + (_DWORD)v83 - v84 + 2;
    v101 = (unsigned int *)&v136;
    do
    {
      v103 = *v101++;
      v102 = v103;
      v104 = v84 + v103;
      if (*(_DWORD *)v104 == v100)
      {
        v105 = (_QWORD *)a3;
        v106 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v104 + 4), a3, v83, v135);
        a3 = (unint64_t)v105;
        if (v106 + 4 > v78)
        {
          *a4 = v133 - v102;
          v78 = v106 + 4;
          if ((_QWORD *)((char *)a2 + v106 + 4) == v105)
            break;
        }
      }
      --v99;
    }
    while (v99);
  }
  return v78;
}

unint64_t ZSTD_RowFindBestMatch_dictMatchState_6_6(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char v59;
  const char *v60;
  uint64_t v61;
  int8x16_t v62;
  int8x8_t v63;
  int8x8_t v64;
  int8x8_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  char *v86;
  uint64_t v87;
  const char *v88;
  char v89;
  char v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x8_t v93;
  BOOL v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v101;
  int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  int v137;
  _QWORD *v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  int8x16x4_t v157;
  int8x16x4_t v158;

  v156 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (_ZF)
    v16 = (_DWORD)a2 - v11 - v13;
  else
    v16 = *(_DWORD *)(a1 + 28);
  if (*(_DWORD *)(a1 + 252) >= 6u)
    v17 = 6;
  else
    v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = (0xCF1BBCDCBF9B0000 * *a2) >> (56 - *(_DWORD *)(v18 + 52));
  v20 = (v19 >> 2) & 0x3FFFFFC0;
  _X13 = (_BYTE *)(*(_QWORD *)(v18 + 56) + 2 * v20);
  _X10 = *(_QWORD *)(v18 + 96) + 4 * v20;
  __asm
  {
    PRFM            #0, [X10]
    PRFM            #0, [X10,#0x40]
    PRFM            #0, [X13]
    PRFM            #0, [X13,#0x40]
  }
  v30 = *(unsigned int *)(a1 + 44);
  if (v12 - v30 >= 0x181)
  {
    if (v30 <= 0xFFFFFF9F)
    {
      v110 = v30 + 96;
      do
      {
        v111 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + 8 + v30)) >> (56 - v10);
        v112 = (v111 >> 2) & 0x3FFFFFC0;
        _X24 = v5 + 4 * v112;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x40]
        }
        _X23 = v7 + 2 * v112;
        __asm
        {
          PRFM            #0, [X23]
          PRFM            #0, [X23,#0x40]
        }
        v119 = *(unsigned int *)(v9 + 4 * (v30 & 7));
        *(_DWORD *)(v9 + 4 * (v30 & 7)) = v111;
        v120 = (v119 >> 2) & 0x3FFFFFC0;
        v121 = v5 + 4 * v120;
        v122 = (_BYTE *)(v7 + 2 * v120);
        v123 = (*v122 - 1) & 0x3F;
        *v122 = v123;
        v122[v123 + 16] = v119;
        *(_DWORD *)(v121 + 4 * v123) = v30++;
      }
      while (v30 < v110);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v124 = v12 - 32;
    LODWORD(v30) = v12 - 32;
    v125 = (_DWORD)a2 + 1 - (v11 + v124);
    if ((v125 + 1) < 8)
      v126 = v125 + 1;
    else
      v126 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v124)
      v127 = v126;
    else
      v127 = 0;
    if (v124 < v127 + (int)v124)
    {
      v128 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v129 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + v124)) >> v128;
        v130 = (v129 >> 2) & 0x3FFFFFC0;
        _X26 = v6 + 4 * v130;
        __asm
        {
          PRFM            #0, [X26]
          PRFM            #0, [X26,#0x40]
        }
        _X25 = v8 + 2 * v130;
        __asm
        {
          PRFM            #0, [X25]
          PRFM            #0, [X25,#0x40]
        }
        *(_DWORD *)(a1 + 4 * (v124++ & 7) + 64) = v129;
        --v127;
      }
      while (v127);
    }
  }
  v31 = 1 << v17;
  if (v30 < v12)
  {
    v32 = *(_QWORD *)(a1 + 8) + 8;
    v33 = 56 - *(_DWORD *)(a1 + 52);
    v34 = v30;
    do
    {
      v35 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v32 + v34)) >> v33;
      v36 = (v35 >> 2) & 0x3FFFFFC0;
      _X25 = v6 + 4 * v36;
      __asm
      {
        PRFM            #0, [X25]
        PRFM            #0, [X25,#0x40]
      }
      _X24 = v8 + 2 * v36;
      __asm
      {
        PRFM            #0, [X24]
        PRFM            #0, [X24,#0x40]
      }
      v43 = *(unsigned int *)(v9 + 4 * (v34 & 7));
      *(_DWORD *)(v9 + 4 * (v34 & 7)) = v35;
      v44 = (v43 >> 2) & 0x3FFFFFC0;
      v45 = v6 + 4 * v44;
      v46 = (_BYTE *)(v8 + 2 * v44);
      v47 = (*v46 - 1) & 0x3F;
      *v46 = v47;
      v46[v47 + 16] = v43;
      *(_DWORD *)(v45 + 4 * v47) = v34++;
    }
    while (v34 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v48 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + v12 + 8)) >> (56 - v10);
  v49 = (v48 >> 2) & 0x3FFFFFC0;
  _X5 = v5 + 4 * v49;
  __asm
  {
    PRFM            #0, [X5]
    PRFM            #0, [X5,#0x40]
  }
  _X5 = v7 + 2 * v49;
  __asm
  {
    PRFM            #0, [X5]
    PRFM            #0, [X5,#0x40]
  }
  v56 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v48;
  v57 = (v56 >> 2) & 0x3FFFFFC0;
  v58 = (char *)(v7 + 2 * v57);
  v60 = v58 + 16;
  v59 = *v58;
  v61 = v5 + 4 * v57;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v157 = vld4q_s8(v60);
  v62 = vdupq_n_s8(v56);
  v157.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v157.val[3], v62), vceqq_s8(v157.val[2], v62), 1uLL), vsriq_n_s8(vceqq_s8(v157.val[1], v62), vceqq_s8(v157.val[0], v62), 1uLL), 2uLL);
  v63 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v157.val[0], v157.val[0], 4uLL), 4uLL);
  v64 = v63;
  if (v63)
  {
    v65 = 0;
    v66 = __ROR8__(*(_QWORD *)&v63, v59);
    v67 = v31;
    while (1)
    {
      v68 = *(unsigned int *)(v61 + 4 * ((__clz(__rbit64(v66)) + v59) & 0x3F));
      if (v68 < v16)
        break;
      _X17 = v11 + v68;
      __asm { PRFM            #0, [X17] }
      v64 = (int8x8_t)(*(_QWORD *)&v65 + 1);
      *((_DWORD *)&v140 + *(_QWORD *)&v65) = v68;
      v31 = v67 - 1;
      v66 &= v66 - 1;
      if (v66)
      {
        ++*(_QWORD *)&v65;
        if (--v67)
          continue;
      }
      goto LABEL_21;
    }
    v31 = v67;
    v64 = v65;
  }
LABEL_21:
  v71 = (v59 - 1) & 0x3F;
  *v58 = v71;
  v58[v71 + 16] = v56;
  v72 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v72 + 1;
  *(_DWORD *)(v61 + 4 * v71) = v72;
  if (v64)
  {
    v73 = 0;
    v74 = a3 - 7;
    v75 = a2 + 1;
    v76 = v11 + 8;
    v77 = 3;
    while (1)
    {
      v78 = *((unsigned int *)&v140 + v73);
      v79 = (_QWORD *)(v11 + v78);
      if (*(unsigned __int8 *)(v11 + v78 + v77) != *((unsigned __int8 *)a2 + v77))
        goto LABEL_40;
      if (v74 <= (unint64_t)a2)
      {
        v82 = a2;
      }
      else
      {
        v80 = *a2 ^ *v79;
        if (v80)
        {
          v81 = __clz(__rbit64(v80)) >> 3;
          goto LABEL_38;
        }
        while (1)
        {
          v82 = (_QWORD *)((char *)v75 + v80);
          if ((unint64_t)v75 + v80 >= v74)
            break;
          v83 = *(_QWORD *)(v76 + v78 + v80);
          v80 += 8;
          v84 = *v82 ^ v83;
          if (v84)
          {
            v81 = v80 + (__clz(__rbit64(v84)) >> 3);
            goto LABEL_38;
          }
        }
        v79 = (_QWORD *)(v76 + v78 + v80);
      }
      if ((unint64_t)v82 < a3 - 3 && *(_DWORD *)v79 == *(_DWORD *)v82)
      {
        v82 = (_QWORD *)((char *)v82 + 4);
        v79 = (_QWORD *)((char *)v79 + 4);
      }
      if ((unint64_t)v82 < a3 - 1 && *(unsigned __int16 *)v79 == *(unsigned __int16 *)v82)
      {
        v82 = (_QWORD *)((char *)v82 + 2);
        v79 = (_QWORD *)((char *)v79 + 2);
      }
      if ((unint64_t)v82 < a3 && *(unsigned __int8 *)v79 == *(unsigned __int8 *)v82)
        v82 = (_QWORD *)((char *)v82 + 1);
      v81 = (char *)v82 - (char *)a2;
LABEL_38:
      if (v81 > v77)
      {
        *a4 = v12 + 2 - v78;
        v77 = v81;
        if ((_QWORD *)((char *)a2 + v81) == (_QWORD *)a3)
          goto LABEL_47;
      }
LABEL_40:
      ++v73;
      v81 = v77;
      if (v73 == *(_QWORD *)&v64)
        goto LABEL_47;
    }
  }
  v81 = 3;
LABEL_47:
  v85 = *(_DWORD *)(v18 + 24);
  v86 = *(char **)v18;
  v87 = *(_QWORD *)(v18 + 8);
  v90 = *_X13;
  v88 = _X13 + 16;
  v89 = v90;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v158 = vld4q_s8(v88);
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v91 = vdupq_n_s8(v19);
  v92 = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v158.val[3], v91), vceqq_s8(v158.val[2], v91), 1uLL), vsriq_n_s8(vceqq_s8(v158.val[1], v91), vceqq_s8(v158.val[0], v91), 1uLL), 2uLL);
  v93 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v92, v92, 4uLL), 4uLL);
  if (v93)
    v94 = v31 == 0;
  else
    v94 = 1;
  if (!v94)
  {
    v95 = 0;
    v139 = (_QWORD *)(v11 + v14);
    v96 = __ROR8__(*(_QWORD *)&v93, v89);
    v97 = v31 - 1;
    while (1)
    {
      v98 = *(unsigned int *)(_X10 + 4 * ((__clz(__rbit64(v96)) + v89) & 0x3F));
      if (v98 < v85)
        break;
      _X1 = v87 + v98;
      __asm { PRFM            #0, [X1] }
      v101 = v95 + 1;
      *((_DWORD *)&v140 + v95) = v98;
      v96 &= v96 - 1;
      if (v96)
      {
        _ZF = v97 == (_DWORD)v95++;
        if (!_ZF)
          continue;
      }
      goto LABEL_58;
    }
    v101 = v95;
    if (!v95)
      return v81;
LABEL_58:
    v102 = *(_DWORD *)a2;
    v137 = v12 - v14 + (_DWORD)v86 - v87 + 2;
    v103 = (unsigned int *)&v140;
    do
    {
      v105 = *v103++;
      v104 = v105;
      v106 = v87 + v105;
      if (*(_DWORD *)v106 == v102)
      {
        v107 = (_QWORD *)a3;
        v108 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v106 + 4), a3, v86, v139);
        a3 = (unint64_t)v107;
        if (v108 + 4 > v81)
        {
          *a4 = v137 - v104;
          v81 = v108 + 4;
          if ((_QWORD *)((char *)a2 + v108 + 4) == v107)
            break;
        }
      }
      --v101;
    }
    while (v101);
  }
  return v81;
}

unint64_t ZSTD_RowFindBestMatch_dedicatedDictSearch_4_4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t *v52;
  __int8 v53;
  int16x8_t v54;
  uint64x2_t v55;
  uint64x2_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v85;
  uint64_t v86;
  unint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  uint64_t v132;
  unint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  int v137;
  int v138;
  char *v140;
  _QWORD *v141;
  _OWORD v142[16];
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  v15 = (_DWORD)a2 - v11 - v13;
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v15 = *(_DWORD *)(a1 + 28);
  v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = v17 - 4;
  if (v17 >= 4)
    v20 = 4;
  else
    v20 = *(_DWORD *)(a1 + 252);
  v21 = (-1640531535 * *(_DWORD *)a2) >> (34 - *(_BYTE *)(v18 + 248));
  _X11 = *(_QWORD *)(v18 + 96) + 16 * v21;
  __asm { PRFM            #0, [X11] }
  v27 = 1 << v19;
  if (!(!_ZF & _CF))
    v27 = 0;
  v28 = *(unsigned int *)(a1 + 44);
  if (v12 - v28 >= 0x181)
  {
    if (v28 <= 0xFFFFFF9F)
    {
      v109 = v28 + 96;
      do
      {
        v110 = (-1640531535 * *(_DWORD *)(v11 + 8 + v28)) >> (24 - v10);
        v111 = (v110 >> 4) & 0xFFFFFF0;
        _X22 = v5 + 4 * v111;
        __asm { PRFM            #0, [X22] }
        _X20 = v7 + 2 * v111;
        __asm { PRFM            #0, [X20] }
        v116 = *(unsigned int *)(v9 + 4 * (v28 & 7));
        *(_DWORD *)(v9 + 4 * (v28 & 7)) = v110;
        v117 = (v116 >> 4) & 0xFFFFFF0;
        v118 = v5 + 4 * v117;
        v119 = (_BYTE *)(v7 + 2 * v117);
        v120 = (*v119 - 1) & 0xF;
        *v119 = v120;
        v119[v120 + 16] = v116;
        *(_DWORD *)(v118 + 4 * v120) = v28++;
      }
      while (v28 < v109);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v121 = v12 - 32;
    LODWORD(v28) = v12 - 32;
    v122 = (_DWORD)a2 + 1 - (v11 + v121);
    if ((v122 + 1) < 8)
      v123 = v122 + 1;
    else
      v123 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v121)
      v124 = v123;
    else
      v124 = 0;
    if (v121 < v124 + (int)v121)
    {
      v125 = 24 - *(_DWORD *)(a1 + 52);
      do
      {
        v126 = (-1640531535 * *(_DWORD *)(v11 + v121)) >> v125;
        v127 = (v126 >> 4) & 0xFFFFFF0;
        _X24 = v6 + 4 * v127;
        __asm { PRFM            #0, [X24] }
        _X23 = v8 + 2 * v127;
        __asm { PRFM            #0, [X23] }
        *(_DWORD *)(a1 + 4 * (v121++ & 7) + 64) = v126;
        --v124;
      }
      while (v124);
    }
  }
  v29 = 1 << v20;
  if (v28 < v12)
  {
    v30 = *(_QWORD *)(a1 + 8) + 8;
    v31 = 24 - *(_DWORD *)(a1 + 52);
    v28 = v28;
    do
    {
      v32 = (-1640531535 * *(_DWORD *)(v30 + v28)) >> v31;
      v33 = (v32 >> 4) & 0xFFFFFF0;
      _X23 = v6 + 4 * v33;
      __asm { PRFM            #0, [X23] }
      _X22 = v8 + 2 * v33;
      __asm { PRFM            #0, [X22] }
      v38 = *(unsigned int *)(v9 + 4 * (v28 & 7));
      *(_DWORD *)(v9 + 4 * (v28 & 7)) = v32;
      v39 = (v38 >> 4) & 0xFFFFFF0;
      v40 = v6 + 4 * v39;
      v41 = (_BYTE *)(v8 + 2 * v39);
      v42 = (*v41 - 1) & 0xF;
      *v41 = v42;
      v41[v42 + 16] = v38;
      *(_DWORD *)(v40 + 4 * v42) = v28++;
    }
    while (v28 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v43 = (-1640531535 * *(_DWORD *)(v11 + v12 + 8)) >> (24 - v10);
  v44 = (v43 >> 4) & 0xFFFFFF0;
  _X3 = v5 + 4 * v44;
  __asm { PRFM            #0, [X3] }
  _X1 = v7 + 2 * v44;
  __asm { PRFM            #0, [X1] }
  v49 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v43;
  v50 = (v49 >> 4) & 0xFFFFFF0;
  v51 = v5 + 4 * v50;
  v52 = (int8x16_t *)(v7 + 2 * v50);
  v53 = v52->i8[0];
  memset(v142, 0, sizeof(v142));
  v54 = vshlq_n_s16((int16x8_t)vceqq_s8(v52[1], vdupq_n_s8(v49)), 7uLL);
  v55 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v54, v54, 0xEuLL), 0xEuLL);
  v56 = vsraq_n_u64(v55, v55, 0x1CuLL);
  if (v56.u8[0] | (unsigned __int16)(v56.u8[8] << 8))
  {
    v57 = 0;
    v58 = ((unsigned __int16)(v56.u8[0] | (v56.u8[8] << 8)) >> (v53 & 0xF)) | (unsigned __int16)((v56.u8[0] | (unsigned __int16)(v56.u8[8] << 8)) << (-v53 & 0xF));
    v59 = v29;
    while (1)
    {
      v60 = *(unsigned int *)(v51 + 4 * ((__clz(__rbit64(v58)) + v53) & 0xF));
      if (v60 < v15)
        break;
      _X15 = v11 + v60;
      __asm { PRFM            #0, [X15] }
      v63 = v57 + 1;
      *((_DWORD *)v142 + v57) = v60;
      v29 = v59 - 1;
      v58 &= v58 - 1;
      if (v58)
      {
        ++v57;
        if (--v59)
          continue;
      }
      goto LABEL_23;
    }
    v29 = v59;
    v63 = v57;
  }
  else
  {
    v63 = 0;
  }
LABEL_23:
  v141 = (_QWORD *)(v11 + v14);
  v64 = (v53 - 1) & 0xF;
  v52->i8[0] = v64;
  v52[1].i8[v64] = v49;
  v65 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v65 + 1;
  *(_DWORD *)(v51 + 4 * v64) = v65;
  if (v63)
  {
    v66 = 0;
    v67 = a3 - 7;
    v68 = a2 + 1;
    v69 = v11 + 8;
    v70 = 3;
    while (1)
    {
      v71 = *((unsigned int *)v142 + v66);
      v72 = (_QWORD *)(v11 + v71);
      if (*(unsigned __int8 *)(v11 + v71 + v70) != *((unsigned __int8 *)a2 + v70))
        goto LABEL_42;
      if (v67 <= (unint64_t)a2)
      {
        v75 = a2;
      }
      else
      {
        v73 = *a2 ^ *v72;
        if (v73)
        {
          v74 = __clz(__rbit64(v73)) >> 3;
          goto LABEL_40;
        }
        v76 = 0;
        while (1)
        {
          v75 = &v68[v76];
          if ((unint64_t)&v68[v76] >= v67)
            break;
          v77 = *(_QWORD *)(v69 + v71 + v76 * 8);
          ++v76;
          v78 = *v75 ^ v77;
          if (v78)
          {
            v74 = v76 * 8 + (__clz(__rbit64(v78)) >> 3);
            goto LABEL_40;
          }
        }
        v72 = (_QWORD *)(v69 + v71 + v76 * 8);
      }
      if ((unint64_t)v75 < a3 - 3 && *(_DWORD *)v72 == *(_DWORD *)v75)
      {
        v75 = (_QWORD *)((char *)v75 + 4);
        v72 = (_QWORD *)((char *)v72 + 4);
      }
      if ((unint64_t)v75 < a3 - 1 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v75)
      {
        v75 = (_QWORD *)((char *)v75 + 2);
        v72 = (_QWORD *)((char *)v72 + 2);
      }
      if ((unint64_t)v75 < a3 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v75)
        v75 = (_QWORD *)((char *)v75 + 1);
      v74 = (char *)v75 - (char *)a2;
LABEL_40:
      if (v74 > v70)
      {
        *a4 = v12 + 2 - v71;
        v70 = v74;
        if ((_QWORD *)((char *)a2 + v74) == (_QWORD *)a3)
          goto LABEL_50;
      }
LABEL_42:
      ++v66;
      v74 = v70;
      if (v66 == v63)
        goto LABEL_50;
    }
  }
  v74 = 3;
LABEL_50:
  v79 = 0;
  v80 = *(_QWORD *)(v18 + 8);
  v140 = *(char **)v18;
  v81 = *(_QWORD *)v18 - v80 - v14;
  v82 = *(_QWORD *)(v18 + 96);
  do
  {
    _X16 = v80 + *(unsigned int *)(v82 + 16 * v21 + v79);
    __asm { PRFM            #0, [X16] }
    v79 += 4;
  }
  while (v79 != 12);
  v85 = v29 + v27;
  if ((v29 + v27) >= 3)
    v86 = 3;
  else
    v86 = v85;
  v135 = (_DWORD)a2 - v11;
  v136 = *(unsigned int *)(v82 + ((16 * v21) | 0xC));
  v132 = *(_QWORD *)(v18 + 112);
  v133 = v136 >> 8;
  _X9 = v132 + 4 * (v136 >> 8);
  __asm { PRFM            #0, [X9] }
  v89 = a3;
  v134 = v81;
  v137 = v86;
  if ((_DWORD)v86)
  {
    v138 = v12 + v81 + 2;
    v90 = (unsigned int *)(v82 + 16 * v21);
    v91 = v86;
    do
    {
      v93 = *v90++;
      v92 = v93;
      if (!v93)
        return v74;
      if (*(_DWORD *)(v80 + v92) == *(_DWORD *)a2)
      {
        v94 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v80 + v92 + 4), a3, v140, v141);
        a3 = v89;
        v95 = v94 + 4;
        if (v94 + 4 > v74)
        {
          *a4 = (v138 - v92);
          v74 = v94 + 4;
          if ((_QWORD *)((char *)a2 + v95) == (_QWORD *)v89)
            return v95;
        }
      }
    }
    while (--v91);
  }
  if (v85 - v137 >= v136)
    v96 = v136;
  else
    v96 = v85 - v137;
  if (!v96)
    return v74;
  v97 = 4 * v96;
  v98 = (unsigned int *)(v132 + 4 * v133);
  do
  {
    v99 = *v98++;
    _X10 = v80 + v99;
    __asm { PRFM            #0, [X10] }
    v97 -= 4;
  }
  while (v97);
  v102 = *(_DWORD *)a2;
  v103 = (unsigned int *)(v132 + 4 * v133);
  v95 = v74;
  do
  {
    v105 = *v103++;
    v104 = v105;
    v106 = v80 + v105;
    if (*(_DWORD *)v106 == v102)
    {
      v107 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v106 + 4), a3, v140, v141);
      a3 = v89;
      if (v107 + 4 > v95)
      {
        *a4 = v135 + v134 + 2 - v104;
        v95 = v107 + 4;
        if ((_QWORD *)((char *)a2 + v107 + 4) == (_QWORD *)v89)
          break;
      }
    }
    --v96;
  }
  while (v96);
  return v95;
}

unint64_t ZSTD_RowFindBestMatch_dedicatedDictSearch_4_5(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  const __int16 *v56;
  int8x16_t v57;
  unsigned __int32 v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unsigned int v87;
  uint64_t v88;
  unint64_t v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v111;
  unsigned int v112;
  unsigned int v113;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v136;
  unint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  int v141;
  int v142;
  char *v144;
  _QWORD *v145;
  _OWORD v146[16];
  uint64_t v147;
  int16x8x2_t v148;

  v147 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  v15 = (_DWORD)a2 - v11 - v13;
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v15 = *(_DWORD *)(a1 + 28);
  v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = v17 - 5;
  if (v17 >= 5)
    v20 = 5;
  else
    v20 = *(_DWORD *)(a1 + 252);
  v21 = (-1640531535 * *(_DWORD *)a2) >> (34 - *(_BYTE *)(v18 + 248));
  _X11 = *(_QWORD *)(v18 + 96) + 16 * v21;
  __asm { PRFM            #0, [X11] }
  v27 = 1 << v19;
  if (!(!_ZF & _CF))
    v27 = 0;
  v28 = *(unsigned int *)(a1 + 44);
  if (v12 - v28 >= 0x181)
  {
    if (v28 <= 0xFFFFFF9F)
    {
      v111 = v28 + 96;
      do
      {
        v112 = (-1640531535 * *(_DWORD *)(v11 + 8 + v28)) >> (24 - v10);
        v113 = (v112 >> 3) & 0x1FFFFFE0;
        _X22 = v5 + 4 * v113;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v7 + 2 * v113;
        __asm { PRFM            #0, [X20] }
        v119 = *(unsigned int *)(v9 + 4 * (v28 & 7));
        *(_DWORD *)(v9 + 4 * (v28 & 7)) = v112;
        v120 = (v119 >> 3) & 0x1FFFFFE0;
        v121 = v5 + 4 * v120;
        v122 = (_BYTE *)(v7 + 2 * v120);
        v123 = (*v122 - 1) & 0x1F;
        *v122 = v123;
        v122[v123 + 16] = v119;
        *(_DWORD *)(v121 + 4 * v123) = v28++;
      }
      while (v28 < v111);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v124 = v12 - 32;
    LODWORD(v28) = v12 - 32;
    v125 = (_DWORD)a2 + 1 - (v11 + v124);
    if ((v125 + 1) < 8)
      v126 = v125 + 1;
    else
      v126 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v124)
      v127 = v126;
    else
      v127 = 0;
    if (v124 < v127 + (int)v124)
    {
      v128 = 24 - *(_DWORD *)(a1 + 52);
      do
      {
        v129 = (-1640531535 * *(_DWORD *)(v11 + v124)) >> v128;
        v130 = (v129 >> 3) & 0x1FFFFFE0;
        _X24 = v6 + 4 * v130;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x40]
        }
        _X23 = v8 + 2 * v130;
        __asm { PRFM            #0, [X23] }
        *(_DWORD *)(a1 + 4 * (v124++ & 7) + 64) = v129;
        --v127;
      }
      while (v127);
    }
  }
  v29 = 1 << v20;
  if (v28 < v12)
  {
    v30 = *(_QWORD *)(a1 + 8) + 8;
    v31 = 24 - *(_DWORD *)(a1 + 52);
    v28 = v28;
    do
    {
      v32 = (-1640531535 * *(_DWORD *)(v30 + v28)) >> v31;
      v33 = (v32 >> 3) & 0x1FFFFFE0;
      _X23 = v6 + 4 * v33;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X23,#0x40]
      }
      _X22 = v8 + 2 * v33;
      __asm { PRFM            #0, [X22] }
      v39 = *(unsigned int *)(v9 + 4 * (v28 & 7));
      *(_DWORD *)(v9 + 4 * (v28 & 7)) = v32;
      v40 = (v39 >> 3) & 0x1FFFFFE0;
      v41 = v6 + 4 * v40;
      v42 = (_BYTE *)(v8 + 2 * v40);
      v43 = (*v42 - 1) & 0x1F;
      *v42 = v43;
      v42[v43 + 16] = v39;
      *(_DWORD *)(v41 + 4 * v43) = v28++;
    }
    while (v28 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v44 = (-1640531535 * *(_DWORD *)(v11 + v12 + 8)) >> (24 - v10);
  v45 = (v44 >> 3) & 0x1FFFFFE0;
  _X3 = v5 + 4 * v45;
  __asm
  {
    PRFM            #0, [X3]
    PRFM            #0, [X3,#0x40]
  }
  _X1 = v7 + 2 * v45;
  __asm { PRFM            #0, [X1] }
  v51 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v44;
  v52 = (v51 >> 3) & 0x1FFFFFE0;
  v53 = v5 + 4 * v52;
  v54 = (char *)(v7 + 2 * v52);
  v56 = (const __int16 *)(v54 + 16);
  v55 = *v54;
  v148 = vld2q_s16(v56);
  memset(v146, 0, sizeof(v146));
  v57 = vdupq_n_s8(v51);
  *(int8x8_t *)v148.val[0].i8 = vqmovn_s16((int16x8_t)vceqq_s8(v57, (int8x16_t)v148.val[0]));
  *(int8x8_t *)v57.i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v57, (int8x16_t)v148.val[1])), *(int8x8_t *)v148.val[0].i8, 2uLL);
  v58 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v57.i8, *(int8x8_t *)v148.val[0].i8), vuzp1_s8(*(int8x8_t *)v57.i8, *(int8x8_t *)v148.val[0].i8), 4uLL).u32[0];
  if (v58)
  {
    v59 = 0;
    v60 = __ROR4__(v58, v55);
    v61 = v29;
    while (1)
    {
      v62 = *(unsigned int *)(v53 + 4 * ((__clz(__rbit64(v60)) + v55) & 0x1F));
      if (v62 < v15)
        break;
      _X15 = v11 + v62;
      __asm { PRFM            #0, [X15] }
      v65 = v59 + 1;
      *((_DWORD *)v146 + v59) = v62;
      v29 = v61 - 1;
      v60 &= v60 - 1;
      if (v60)
      {
        ++v59;
        if (--v61)
          continue;
      }
      goto LABEL_23;
    }
    v29 = v61;
    v65 = v59;
  }
  else
  {
    v65 = 0;
  }
LABEL_23:
  v145 = (_QWORD *)(v11 + v14);
  v66 = (v55 - 1) & 0x1F;
  *v54 = v66;
  v54[v66 + 16] = v51;
  v67 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v67 + 1;
  *(_DWORD *)(v53 + 4 * v66) = v67;
  if (v65)
  {
    v68 = 0;
    v69 = a3 - 7;
    v70 = a2 + 1;
    v71 = v11 + 8;
    v72 = 3;
    while (1)
    {
      v73 = *((unsigned int *)v146 + v68);
      v74 = (_QWORD *)(v11 + v73);
      if (*(unsigned __int8 *)(v11 + v73 + v72) != *((unsigned __int8 *)a2 + v72))
        goto LABEL_42;
      if (v69 <= (unint64_t)a2)
      {
        v77 = a2;
      }
      else
      {
        v75 = *a2 ^ *v74;
        if (v75)
        {
          v76 = __clz(__rbit64(v75)) >> 3;
          goto LABEL_40;
        }
        v78 = 0;
        while (1)
        {
          v77 = &v70[v78];
          if ((unint64_t)&v70[v78] >= v69)
            break;
          v79 = *(_QWORD *)(v71 + v73 + v78 * 8);
          ++v78;
          v80 = *v77 ^ v79;
          if (v80)
          {
            v76 = v78 * 8 + (__clz(__rbit64(v80)) >> 3);
            goto LABEL_40;
          }
        }
        v74 = (_QWORD *)(v71 + v73 + v78 * 8);
      }
      if ((unint64_t)v77 < a3 - 3 && *(_DWORD *)v74 == *(_DWORD *)v77)
      {
        v77 = (_QWORD *)((char *)v77 + 4);
        v74 = (_QWORD *)((char *)v74 + 4);
      }
      if ((unint64_t)v77 < a3 - 1 && *(unsigned __int16 *)v74 == *(unsigned __int16 *)v77)
      {
        v77 = (_QWORD *)((char *)v77 + 2);
        v74 = (_QWORD *)((char *)v74 + 2);
      }
      if ((unint64_t)v77 < a3 && *(unsigned __int8 *)v74 == *(unsigned __int8 *)v77)
        v77 = (_QWORD *)((char *)v77 + 1);
      v76 = (char *)v77 - (char *)a2;
LABEL_40:
      if (v76 > v72)
      {
        *a4 = v12 + 2 - v73;
        v72 = v76;
        if ((_QWORD *)((char *)a2 + v76) == (_QWORD *)a3)
          goto LABEL_50;
      }
LABEL_42:
      ++v68;
      v76 = v72;
      if (v68 == v65)
        goto LABEL_50;
    }
  }
  v76 = 3;
LABEL_50:
  v81 = 0;
  v82 = *(_QWORD *)(v18 + 8);
  v144 = *(char **)v18;
  v83 = *(_QWORD *)v18 - v82 - v14;
  v84 = *(_QWORD *)(v18 + 96);
  do
  {
    _X16 = v82 + *(unsigned int *)(v84 + 16 * v21 + v81);
    __asm { PRFM            #0, [X16] }
    v81 += 4;
  }
  while (v81 != 12);
  v87 = v29 + v27;
  if ((v29 + v27) >= 3)
    v88 = 3;
  else
    v88 = v87;
  v139 = (_DWORD)a2 - v11;
  v140 = *(unsigned int *)(v84 + ((16 * v21) | 0xC));
  v136 = *(_QWORD *)(v18 + 112);
  v137 = v140 >> 8;
  _X9 = v136 + 4 * (v140 >> 8);
  __asm { PRFM            #0, [X9] }
  v91 = a3;
  v138 = v83;
  v141 = v88;
  if ((_DWORD)v88)
  {
    v142 = v12 + v83 + 2;
    v92 = (unsigned int *)(v84 + 16 * v21);
    v93 = v88;
    do
    {
      v95 = *v92++;
      v94 = v95;
      if (!v95)
        return v76;
      if (*(_DWORD *)(v82 + v94) == *(_DWORD *)a2)
      {
        v96 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v82 + v94 + 4), a3, v144, v145);
        a3 = v91;
        v97 = v96 + 4;
        if (v96 + 4 > v76)
        {
          *a4 = (v142 - v94);
          v76 = v96 + 4;
          if ((_QWORD *)((char *)a2 + v97) == (_QWORD *)v91)
            return v97;
        }
      }
    }
    while (--v93);
  }
  if (v87 - v141 >= v140)
    v98 = v140;
  else
    v98 = v87 - v141;
  if (!v98)
    return v76;
  v99 = 4 * v98;
  v100 = (unsigned int *)(v136 + 4 * v137);
  do
  {
    v101 = *v100++;
    _X10 = v82 + v101;
    __asm { PRFM            #0, [X10] }
    v99 -= 4;
  }
  while (v99);
  v104 = *(_DWORD *)a2;
  v105 = (unsigned int *)(v136 + 4 * v137);
  v97 = v76;
  do
  {
    v107 = *v105++;
    v106 = v107;
    v108 = v82 + v107;
    if (*(_DWORD *)v108 == v104)
    {
      v109 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v108 + 4), a3, v144, v145);
      a3 = v91;
      if (v109 + 4 > v97)
      {
        *a4 = v139 + v138 + 2 - v106;
        v97 = v109 + 4;
        if ((_QWORD *)((char *)a2 + v109 + 4) == (_QWORD *)v91)
          break;
      }
    }
    --v98;
  }
  while (v98);
  return v97;
}

unint64_t ZSTD_RowFindBestMatch_dedicatedDictSearch_4_6(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  const char *v56;
  char v57;
  uint64_t v58;
  int8x16_t v59;
  int8x8_t v60;
  int8x8_t v61;
  int8x8_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v89;
  uint64_t v90;
  unint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v140;
  unint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  int v145;
  int v146;
  char *v148;
  _QWORD *v149;
  _OWORD v150[16];
  uint64_t v151;
  int8x16x4_t v152;

  v151 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  v15 = (_DWORD)a2 - v11 - v13;
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v15 = *(_DWORD *)(a1 + 28);
  v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = v17 - 6;
  if (v17 >= 6)
    v20 = 6;
  else
    v20 = *(_DWORD *)(a1 + 252);
  v21 = (-1640531535 * *(_DWORD *)a2) >> (34 - *(_BYTE *)(v18 + 248));
  _X11 = *(_QWORD *)(v18 + 96) + 16 * v21;
  __asm { PRFM            #0, [X11] }
  v27 = 1 << v19;
  if (!(!_ZF & _CF))
    v27 = 0;
  v28 = *(unsigned int *)(a1 + 44);
  if (v12 - v28 >= 0x181)
  {
    if (v28 <= 0xFFFFFF9F)
    {
      v113 = v28 + 96;
      do
      {
        v114 = (-1640531535 * *(_DWORD *)(v11 + 8 + v28)) >> (24 - v10);
        v115 = (v114 >> 2) & 0x3FFFFFC0;
        _X22 = v5 + 4 * v115;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v7 + 2 * v115;
        __asm
        {
          PRFM            #0, [X20]
          PRFM            #0, [X20,#0x40]
        }
        v122 = *(unsigned int *)(v9 + 4 * (v28 & 7));
        *(_DWORD *)(v9 + 4 * (v28 & 7)) = v114;
        v123 = (v122 >> 2) & 0x3FFFFFC0;
        v124 = v5 + 4 * v123;
        v125 = (_BYTE *)(v7 + 2 * v123);
        v126 = (*v125 - 1) & 0x3F;
        *v125 = v126;
        v125[v126 + 16] = v122;
        *(_DWORD *)(v124 + 4 * v126) = v28++;
      }
      while (v28 < v113);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v127 = v12 - 32;
    LODWORD(v28) = v12 - 32;
    v128 = (_DWORD)a2 + 1 - (v11 + v127);
    if ((v128 + 1) < 8)
      v129 = v128 + 1;
    else
      v129 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v127)
      v130 = v129;
    else
      v130 = 0;
    if (v127 < v130 + (int)v127)
    {
      v131 = 24 - *(_DWORD *)(a1 + 52);
      do
      {
        v132 = (-1640531535 * *(_DWORD *)(v11 + v127)) >> v131;
        v133 = (v132 >> 2) & 0x3FFFFFC0;
        _X24 = v6 + 4 * v133;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x40]
        }
        _X23 = v8 + 2 * v133;
        __asm
        {
          PRFM            #0, [X23]
          PRFM            #0, [X23,#0x40]
        }
        *(_DWORD *)(a1 + 4 * (v127++ & 7) + 64) = v132;
        --v130;
      }
      while (v130);
    }
  }
  v29 = 1 << v20;
  if (v28 < v12)
  {
    v30 = *(_QWORD *)(a1 + 8) + 8;
    v31 = 24 - *(_DWORD *)(a1 + 52);
    v28 = v28;
    do
    {
      v32 = (-1640531535 * *(_DWORD *)(v30 + v28)) >> v31;
      v33 = (v32 >> 2) & 0x3FFFFFC0;
      _X23 = v6 + 4 * v33;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X23,#0x40]
      }
      _X22 = v8 + 2 * v33;
      __asm
      {
        PRFM            #0, [X22]
        PRFM            #0, [X22,#0x40]
      }
      v40 = *(unsigned int *)(v9 + 4 * (v28 & 7));
      *(_DWORD *)(v9 + 4 * (v28 & 7)) = v32;
      v41 = (v40 >> 2) & 0x3FFFFFC0;
      v42 = v6 + 4 * v41;
      v43 = (_BYTE *)(v8 + 2 * v41);
      v44 = (*v43 - 1) & 0x3F;
      *v43 = v44;
      v43[v44 + 16] = v40;
      *(_DWORD *)(v42 + 4 * v44) = v28++;
    }
    while (v28 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v45 = (-1640531535 * *(_DWORD *)(v11 + v12 + 8)) >> (24 - v10);
  v46 = (v45 >> 2) & 0x3FFFFFC0;
  _X3 = v5 + 4 * v46;
  __asm
  {
    PRFM            #0, [X3]
    PRFM            #0, [X3,#0x40]
  }
  _X1 = v7 + 2 * v46;
  __asm
  {
    PRFM            #0, [X1]
    PRFM            #0, [X1,#0x40]
  }
  v53 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v45;
  v54 = (v53 >> 2) & 0x3FFFFFC0;
  v55 = (char *)(v7 + 2 * v54);
  v56 = v55 + 16;
  v57 = *v55;
  v58 = v5 + 4 * v54;
  memset(v150, 0, sizeof(v150));
  v152 = vld4q_s8(v56);
  v59 = vdupq_n_s8(v53);
  v152.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v152.val[3], v59), vceqq_s8(v152.val[2], v59), 1uLL), vsriq_n_s8(vceqq_s8(v152.val[1], v59), vceqq_s8(v152.val[0], v59), 1uLL), 2uLL);
  v60 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v152.val[0], v152.val[0], 4uLL), 4uLL);
  v61 = v60;
  if (v60)
  {
    v62 = 0;
    v63 = __ROR8__(*(_QWORD *)&v60, v57);
    v64 = v29;
    while (1)
    {
      v65 = *(unsigned int *)(v58 + 4 * ((__clz(__rbit64(v63)) + v57) & 0x3F));
      if (v65 < v15)
        break;
      _X15 = v11 + v65;
      __asm { PRFM            #0, [X15] }
      v61 = (int8x8_t)(*(_QWORD *)&v62 + 1);
      *((_DWORD *)v150 + *(_QWORD *)&v62) = v65;
      v29 = v64 - 1;
      v63 &= v63 - 1;
      if (v63)
      {
        ++*(_QWORD *)&v62;
        if (--v64)
          continue;
      }
      goto LABEL_22;
    }
    v29 = v64;
    v61 = v62;
  }
LABEL_22:
  v149 = (_QWORD *)(v11 + v14);
  v68 = (v57 - 1) & 0x3F;
  *v55 = v68;
  v55[v68 + 16] = v53;
  v69 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v69 + 1;
  *(_DWORD *)(v58 + 4 * v68) = v69;
  if (v61)
  {
    v70 = 0;
    v71 = a3 - 7;
    v72 = a2 + 1;
    v73 = v11 + 8;
    v74 = 3;
    while (1)
    {
      v75 = *((unsigned int *)v150 + v70);
      v76 = (_QWORD *)(v11 + v75);
      if (*(unsigned __int8 *)(v11 + v75 + v74) != *((unsigned __int8 *)a2 + v74))
        goto LABEL_41;
      if (v71 <= (unint64_t)a2)
      {
        v79 = a2;
      }
      else
      {
        v77 = *a2 ^ *v76;
        if (v77)
        {
          v78 = __clz(__rbit64(v77)) >> 3;
          goto LABEL_39;
        }
        v80 = 0;
        while (1)
        {
          v79 = &v72[v80];
          if ((unint64_t)&v72[v80] >= v71)
            break;
          v81 = *(_QWORD *)(v73 + v75 + v80 * 8);
          ++v80;
          v82 = *v79 ^ v81;
          if (v82)
          {
            v78 = v80 * 8 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_39;
          }
        }
        v76 = (_QWORD *)(v73 + v75 + v80 * 8);
      }
      if ((unint64_t)v79 < a3 - 3 && *(_DWORD *)v76 == *(_DWORD *)v79)
      {
        v79 = (_QWORD *)((char *)v79 + 4);
        v76 = (_QWORD *)((char *)v76 + 4);
      }
      if ((unint64_t)v79 < a3 - 1 && *(unsigned __int16 *)v76 == *(unsigned __int16 *)v79)
      {
        v79 = (_QWORD *)((char *)v79 + 2);
        v76 = (_QWORD *)((char *)v76 + 2);
      }
      if ((unint64_t)v79 < a3 && *(unsigned __int8 *)v76 == *(unsigned __int8 *)v79)
        v79 = (_QWORD *)((char *)v79 + 1);
      v78 = (char *)v79 - (char *)a2;
LABEL_39:
      if (v78 > v74)
      {
        *a4 = v12 + 2 - v75;
        v74 = v78;
        if ((_QWORD *)((char *)a2 + v78) == (_QWORD *)a3)
          goto LABEL_49;
      }
LABEL_41:
      ++v70;
      v78 = v74;
      if (v70 == *(_QWORD *)&v61)
        goto LABEL_49;
    }
  }
  v78 = 3;
LABEL_49:
  v83 = 0;
  v84 = *(_QWORD *)(v18 + 8);
  v148 = *(char **)v18;
  v85 = *(_QWORD *)v18 - v84 - v14;
  v86 = *(_QWORD *)(v18 + 96);
  do
  {
    _X16 = v84 + *(unsigned int *)(v86 + 16 * v21 + v83);
    __asm { PRFM            #0, [X16] }
    v83 += 4;
  }
  while (v83 != 12);
  v89 = v29 + v27;
  if ((v29 + v27) >= 3)
    v90 = 3;
  else
    v90 = v89;
  v143 = (_DWORD)a2 - v11;
  v144 = *(unsigned int *)(v86 + ((16 * v21) | 0xC));
  v140 = *(_QWORD *)(v18 + 112);
  v141 = v144 >> 8;
  _X9 = v140 + 4 * (v144 >> 8);
  __asm { PRFM            #0, [X9] }
  v93 = a3;
  v142 = v85;
  v145 = v90;
  if ((_DWORD)v90)
  {
    v146 = v12 + v85 + 2;
    v94 = (unsigned int *)(v86 + 16 * v21);
    v95 = v90;
    do
    {
      v97 = *v94++;
      v96 = v97;
      if (!v97)
        return v78;
      if (*(_DWORD *)(v84 + v96) == *(_DWORD *)a2)
      {
        v98 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v84 + v96 + 4), a3, v148, v149);
        a3 = v93;
        v99 = v98 + 4;
        if (v98 + 4 > v78)
        {
          *a4 = (v146 - v96);
          v78 = v98 + 4;
          if ((_QWORD *)((char *)a2 + v99) == (_QWORD *)v93)
            return v99;
        }
      }
    }
    while (--v95);
  }
  if (v89 - v145 >= v144)
    v100 = v144;
  else
    v100 = v89 - v145;
  if (!v100)
    return v78;
  v101 = 4 * v100;
  v102 = (unsigned int *)(v140 + 4 * v141);
  do
  {
    v103 = *v102++;
    _X10 = v84 + v103;
    __asm { PRFM            #0, [X10] }
    v101 -= 4;
  }
  while (v101);
  v106 = *(_DWORD *)a2;
  v107 = (unsigned int *)(v140 + 4 * v141);
  v99 = v78;
  do
  {
    v109 = *v107++;
    v108 = v109;
    v110 = v84 + v109;
    if (*(_DWORD *)v110 == v106)
    {
      v111 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v110 + 4), a3, v148, v149);
      a3 = v93;
      if (v111 + 4 > v99)
      {
        *a4 = v143 + v142 + 2 - v108;
        v99 = v111 + 4;
        if ((_QWORD *)((char *)a2 + v111 + 4) == (_QWORD *)v93)
          break;
      }
    }
    --v100;
  }
  while (v100);
  return v99;
}

unint64_t ZSTD_RowFindBestMatch_dedicatedDictSearch_5_4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t *v52;
  __int8 v53;
  int16x8_t v54;
  uint64x2_t v55;
  uint64x2_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v85;
  uint64_t v86;
  _QWORD *v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v132;
  unint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  int v137;
  int v138;
  char *v140;
  _QWORD *v141;
  _OWORD v142[16];
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  v15 = (_DWORD)a2 - v11 - v13;
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v15 = *(_DWORD *)(a1 + 28);
  v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = v17 - 4;
  if (v17 >= 4)
    v20 = 4;
  else
    v20 = *(_DWORD *)(a1 + 252);
  v21 = (0xCF1BBCDCBB000000 * *a2) >> (66 - *(_BYTE *)(v18 + 248));
  _X11 = *(_QWORD *)(v18 + 96) + 16 * v21;
  __asm { PRFM            #0, [X11] }
  v27 = 1 << v19;
  if (!(!_ZF & _CF))
    v27 = 0;
  v28 = *(unsigned int *)(a1 + 44);
  if (v12 - v28 >= 0x181)
  {
    if (v28 <= 0xFFFFFF9F)
    {
      v109 = v28 + 96;
      do
      {
        v110 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + 8 + v28)) >> (56 - v10);
        v111 = (v110 >> 4) & 0xFFFFFF0;
        _X22 = v5 + 4 * v111;
        __asm { PRFM            #0, [X22] }
        _X20 = v7 + 2 * v111;
        __asm { PRFM            #0, [X20] }
        v116 = *(unsigned int *)(v9 + 4 * (v28 & 7));
        *(_DWORD *)(v9 + 4 * (v28 & 7)) = v110;
        v117 = (v116 >> 4) & 0xFFFFFF0;
        v118 = v5 + 4 * v117;
        v119 = (_BYTE *)(v7 + 2 * v117);
        v120 = (*v119 - 1) & 0xF;
        *v119 = v120;
        v119[v120 + 16] = v116;
        *(_DWORD *)(v118 + 4 * v120) = v28++;
      }
      while (v28 < v109);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v121 = v12 - 32;
    LODWORD(v28) = v12 - 32;
    v122 = (_DWORD)a2 + 1 - (v11 + v121);
    if ((v122 + 1) < 8)
      v123 = v122 + 1;
    else
      v123 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v121)
      v124 = v123;
    else
      v124 = 0;
    if (v121 < v124 + (int)v121)
    {
      v125 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v126 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + v121)) >> v125;
        v127 = (v126 >> 4) & 0xFFFFFF0;
        _X24 = v6 + 4 * v127;
        __asm { PRFM            #0, [X24] }
        _X23 = v8 + 2 * v127;
        __asm { PRFM            #0, [X23] }
        *(_DWORD *)(a1 + 4 * (v121++ & 7) + 64) = v126;
        --v124;
      }
      while (v124);
    }
  }
  v29 = 1 << v20;
  if (v28 < v12)
  {
    v30 = *(_QWORD *)(a1 + 8) + 8;
    v31 = 56 - *(_DWORD *)(a1 + 52);
    v28 = v28;
    do
    {
      v32 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v30 + v28)) >> v31;
      v33 = (v32 >> 4) & 0xFFFFFF0;
      _X23 = v6 + 4 * v33;
      __asm { PRFM            #0, [X23] }
      _X22 = v8 + 2 * v33;
      __asm { PRFM            #0, [X22] }
      v38 = *(unsigned int *)(v9 + 4 * (v28 & 7));
      *(_DWORD *)(v9 + 4 * (v28 & 7)) = v32;
      v39 = (v38 >> 4) & 0xFFFFFF0;
      v40 = v6 + 4 * v39;
      v41 = (_BYTE *)(v8 + 2 * v39);
      v42 = (*v41 - 1) & 0xF;
      *v41 = v42;
      v41[v42 + 16] = v38;
      *(_DWORD *)(v40 + 4 * v42) = v28++;
    }
    while (v28 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v43 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + v12 + 8)) >> (56 - v10);
  v44 = (v43 >> 4) & 0xFFFFFF0;
  _X3 = v5 + 4 * v44;
  __asm { PRFM            #0, [X3] }
  _X1 = v7 + 2 * v44;
  __asm { PRFM            #0, [X1] }
  v49 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v43;
  v50 = (v49 >> 4) & 0xFFFFFF0;
  v51 = v5 + 4 * v50;
  v52 = (int8x16_t *)(v7 + 2 * v50);
  v53 = v52->i8[0];
  memset(v142, 0, sizeof(v142));
  v54 = vshlq_n_s16((int16x8_t)vceqq_s8(v52[1], vdupq_n_s8(v49)), 7uLL);
  v55 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v54, v54, 0xEuLL), 0xEuLL);
  v56 = vsraq_n_u64(v55, v55, 0x1CuLL);
  if (v56.u8[0] | (unsigned __int16)(v56.u8[8] << 8))
  {
    v57 = 0;
    v58 = ((unsigned __int16)(v56.u8[0] | (v56.u8[8] << 8)) >> (v53 & 0xF)) | (unsigned __int16)((v56.u8[0] | (unsigned __int16)(v56.u8[8] << 8)) << (-v53 & 0xF));
    v59 = v29;
    while (1)
    {
      v60 = *(unsigned int *)(v51 + 4 * ((__clz(__rbit64(v58)) + v53) & 0xF));
      if (v60 < v15)
        break;
      _X15 = v11 + v60;
      __asm { PRFM            #0, [X15] }
      v63 = v57 + 1;
      *((_DWORD *)v142 + v57) = v60;
      v29 = v59 - 1;
      v58 &= v58 - 1;
      if (v58)
      {
        ++v57;
        if (--v59)
          continue;
      }
      goto LABEL_23;
    }
    v29 = v59;
    v63 = v57;
  }
  else
  {
    v63 = 0;
  }
LABEL_23:
  v141 = (_QWORD *)(v11 + v14);
  v64 = (v53 - 1) & 0xF;
  v52->i8[0] = v64;
  v52[1].i8[v64] = v49;
  v65 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v65 + 1;
  *(_DWORD *)(v51 + 4 * v64) = v65;
  if (v63)
  {
    v66 = 0;
    v67 = a3 - 7;
    v68 = a2 + 1;
    v69 = v11 + 8;
    v70 = 3;
    while (1)
    {
      v71 = *((unsigned int *)v142 + v66);
      v72 = (_QWORD *)(v11 + v71);
      if (*(unsigned __int8 *)(v11 + v71 + v70) != *((unsigned __int8 *)a2 + v70))
        goto LABEL_42;
      if (v67 <= (unint64_t)a2)
      {
        v75 = a2;
      }
      else
      {
        v73 = *a2 ^ *v72;
        if (v73)
        {
          v74 = __clz(__rbit64(v73)) >> 3;
          goto LABEL_40;
        }
        v76 = 0;
        while (1)
        {
          v75 = &v68[v76];
          if ((unint64_t)&v68[v76] >= v67)
            break;
          v77 = *(_QWORD *)(v69 + v71 + v76 * 8);
          ++v76;
          v78 = *v75 ^ v77;
          if (v78)
          {
            v74 = v76 * 8 + (__clz(__rbit64(v78)) >> 3);
            goto LABEL_40;
          }
        }
        v72 = (_QWORD *)(v69 + v71 + v76 * 8);
      }
      if ((unint64_t)v75 < a3 - 3 && *(_DWORD *)v72 == *(_DWORD *)v75)
      {
        v75 = (_QWORD *)((char *)v75 + 4);
        v72 = (_QWORD *)((char *)v72 + 4);
      }
      if ((unint64_t)v75 < a3 - 1 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v75)
      {
        v75 = (_QWORD *)((char *)v75 + 2);
        v72 = (_QWORD *)((char *)v72 + 2);
      }
      if ((unint64_t)v75 < a3 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v75)
        v75 = (_QWORD *)((char *)v75 + 1);
      v74 = (char *)v75 - (char *)a2;
LABEL_40:
      if (v74 > v70)
      {
        *a4 = v12 + 2 - v71;
        v70 = v74;
        if ((_QWORD *)((char *)a2 + v74) == (_QWORD *)a3)
          goto LABEL_50;
      }
LABEL_42:
      ++v66;
      v74 = v70;
      if (v66 == v63)
        goto LABEL_50;
    }
  }
  v74 = 3;
LABEL_50:
  v79 = 0;
  v80 = *(_QWORD *)(v18 + 8);
  v140 = *(char **)v18;
  v81 = *(_QWORD *)v18 - v80 - v14;
  v82 = *(_QWORD *)(v18 + 96);
  do
  {
    _X16 = v80 + *(unsigned int *)(v82 + 16 * v21 + v79);
    __asm { PRFM            #0, [X16] }
    v79 += 4;
  }
  while (v79 != 12);
  v85 = v29 + v27;
  if ((v29 + v27) >= 3)
    v86 = 3;
  else
    v86 = v85;
  v135 = (_DWORD)a2 - v11;
  v136 = *(unsigned int *)(v82 + ((16 * v21) | 0xC));
  v132 = *(_QWORD *)(v18 + 112);
  v133 = v136 >> 8;
  _X8 = v132 + 4 * (v136 >> 8);
  __asm { PRFM            #0, [X8] }
  v89 = (_QWORD *)a3;
  v134 = v81;
  v137 = v86;
  if ((_DWORD)v86)
  {
    v138 = v12 + v81 + 2;
    v90 = (unsigned int *)(v82 + 16 * v21);
    v91 = v86;
    do
    {
      v93 = *v90++;
      v92 = v93;
      if (!v93)
        return v74;
      if (*(_DWORD *)(v80 + v92) == *(_DWORD *)a2)
      {
        v94 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v80 + v92 + 4), a3, v140, v141);
        a3 = (unint64_t)v89;
        v95 = v94 + 4;
        if (v94 + 4 > v74)
        {
          *a4 = (v138 - v92);
          v74 = v94 + 4;
          if ((_QWORD *)((char *)a2 + v95) == v89)
            return v95;
        }
      }
    }
    while (--v91);
  }
  if (v85 - v137 >= v136)
    v96 = v136;
  else
    v96 = v85 - v137;
  if (!v96)
    return v74;
  v97 = 4 * v96;
  v98 = (unsigned int *)(v132 + 4 * v133);
  do
  {
    v99 = *v98++;
    _X10 = v80 + v99;
    __asm { PRFM            #0, [X10] }
    v97 -= 4;
  }
  while (v97);
  v102 = *(_DWORD *)a2;
  v103 = (unsigned int *)(v132 + 4 * v133);
  v95 = v74;
  do
  {
    v105 = *v103++;
    v104 = v105;
    v106 = v80 + v105;
    if (*(_DWORD *)v106 == v102)
    {
      v107 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v106 + 4), a3, v140, v141);
      a3 = (unint64_t)v89;
      if (v107 + 4 > v95)
      {
        *a4 = v135 + v134 + 2 - v104;
        v95 = v107 + 4;
        if ((_QWORD *)((char *)a2 + v107 + 4) == v89)
          break;
      }
    }
    --v96;
  }
  while (v96);
  return v95;
}

unint64_t ZSTD_RowFindBestMatch_dedicatedDictSearch_5_5(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  const __int16 *v56;
  int8x16_t v57;
  unsigned __int32 v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unsigned int v87;
  uint64_t v88;
  _QWORD *v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v136;
  unint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  int v141;
  int v142;
  char *v144;
  _QWORD *v145;
  _OWORD v146[16];
  uint64_t v147;
  int16x8x2_t v148;

  v147 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  v15 = (_DWORD)a2 - v11 - v13;
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v15 = *(_DWORD *)(a1 + 28);
  v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = v17 - 5;
  if (v17 >= 5)
    v20 = 5;
  else
    v20 = *(_DWORD *)(a1 + 252);
  v21 = (0xCF1BBCDCBB000000 * *a2) >> (66 - *(_BYTE *)(v18 + 248));
  _X11 = *(_QWORD *)(v18 + 96) + 16 * v21;
  __asm { PRFM            #0, [X11] }
  v27 = 1 << v19;
  if (!(!_ZF & _CF))
    v27 = 0;
  v28 = *(unsigned int *)(a1 + 44);
  if (v12 - v28 >= 0x181)
  {
    if (v28 <= 0xFFFFFF9F)
    {
      v111 = v28 + 96;
      do
      {
        v112 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + 8 + v28)) >> (56 - v10);
        v113 = (v112 >> 3) & 0x1FFFFFE0;
        _X22 = v5 + 4 * v113;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v7 + 2 * v113;
        __asm { PRFM            #0, [X20] }
        v119 = *(unsigned int *)(v9 + 4 * (v28 & 7));
        *(_DWORD *)(v9 + 4 * (v28 & 7)) = v112;
        v120 = (v119 >> 3) & 0x1FFFFFE0;
        v121 = v5 + 4 * v120;
        v122 = (_BYTE *)(v7 + 2 * v120);
        v123 = (*v122 - 1) & 0x1F;
        *v122 = v123;
        v122[v123 + 16] = v119;
        *(_DWORD *)(v121 + 4 * v123) = v28++;
      }
      while (v28 < v111);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v124 = v12 - 32;
    LODWORD(v28) = v12 - 32;
    v125 = (_DWORD)a2 + 1 - (v11 + v124);
    if ((v125 + 1) < 8)
      v126 = v125 + 1;
    else
      v126 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v124)
      v127 = v126;
    else
      v127 = 0;
    if (v124 < v127 + (int)v124)
    {
      v128 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v129 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + v124)) >> v128;
        v130 = (v129 >> 3) & 0x1FFFFFE0;
        _X24 = v6 + 4 * v130;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x40]
        }
        _X23 = v8 + 2 * v130;
        __asm { PRFM            #0, [X23] }
        *(_DWORD *)(a1 + 4 * (v124++ & 7) + 64) = v129;
        --v127;
      }
      while (v127);
    }
  }
  v29 = 1 << v20;
  if (v28 < v12)
  {
    v30 = *(_QWORD *)(a1 + 8) + 8;
    v31 = 56 - *(_DWORD *)(a1 + 52);
    v28 = v28;
    do
    {
      v32 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v30 + v28)) >> v31;
      v33 = (v32 >> 3) & 0x1FFFFFE0;
      _X23 = v6 + 4 * v33;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X23,#0x40]
      }
      _X22 = v8 + 2 * v33;
      __asm { PRFM            #0, [X22] }
      v39 = *(unsigned int *)(v9 + 4 * (v28 & 7));
      *(_DWORD *)(v9 + 4 * (v28 & 7)) = v32;
      v40 = (v39 >> 3) & 0x1FFFFFE0;
      v41 = v6 + 4 * v40;
      v42 = (_BYTE *)(v8 + 2 * v40);
      v43 = (*v42 - 1) & 0x1F;
      *v42 = v43;
      v42[v43 + 16] = v39;
      *(_DWORD *)(v41 + 4 * v43) = v28++;
    }
    while (v28 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v44 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + v12 + 8)) >> (56 - v10);
  v45 = (v44 >> 3) & 0x1FFFFFE0;
  _X3 = v5 + 4 * v45;
  __asm
  {
    PRFM            #0, [X3]
    PRFM            #0, [X3,#0x40]
  }
  _X1 = v7 + 2 * v45;
  __asm { PRFM            #0, [X1] }
  v51 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v44;
  v52 = (v51 >> 3) & 0x1FFFFFE0;
  v53 = v5 + 4 * v52;
  v54 = (char *)(v7 + 2 * v52);
  v56 = (const __int16 *)(v54 + 16);
  v55 = *v54;
  v148 = vld2q_s16(v56);
  memset(v146, 0, sizeof(v146));
  v57 = vdupq_n_s8(v51);
  *(int8x8_t *)v148.val[0].i8 = vqmovn_s16((int16x8_t)vceqq_s8(v57, (int8x16_t)v148.val[0]));
  *(int8x8_t *)v57.i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v57, (int8x16_t)v148.val[1])), *(int8x8_t *)v148.val[0].i8, 2uLL);
  v58 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v57.i8, *(int8x8_t *)v148.val[0].i8), vuzp1_s8(*(int8x8_t *)v57.i8, *(int8x8_t *)v148.val[0].i8), 4uLL).u32[0];
  if (v58)
  {
    v59 = 0;
    v60 = __ROR4__(v58, v55);
    v61 = v29;
    while (1)
    {
      v62 = *(unsigned int *)(v53 + 4 * ((__clz(__rbit64(v60)) + v55) & 0x1F));
      if (v62 < v15)
        break;
      _X15 = v11 + v62;
      __asm { PRFM            #0, [X15] }
      v65 = v59 + 1;
      *((_DWORD *)v146 + v59) = v62;
      v29 = v61 - 1;
      v60 &= v60 - 1;
      if (v60)
      {
        ++v59;
        if (--v61)
          continue;
      }
      goto LABEL_23;
    }
    v29 = v61;
    v65 = v59;
  }
  else
  {
    v65 = 0;
  }
LABEL_23:
  v145 = (_QWORD *)(v11 + v14);
  v66 = (v55 - 1) & 0x1F;
  *v54 = v66;
  v54[v66 + 16] = v51;
  v67 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v67 + 1;
  *(_DWORD *)(v53 + 4 * v66) = v67;
  if (v65)
  {
    v68 = 0;
    v69 = a3 - 7;
    v70 = a2 + 1;
    v71 = v11 + 8;
    v72 = 3;
    while (1)
    {
      v73 = *((unsigned int *)v146 + v68);
      v74 = (_QWORD *)(v11 + v73);
      if (*(unsigned __int8 *)(v11 + v73 + v72) != *((unsigned __int8 *)a2 + v72))
        goto LABEL_42;
      if (v69 <= (unint64_t)a2)
      {
        v77 = a2;
      }
      else
      {
        v75 = *a2 ^ *v74;
        if (v75)
        {
          v76 = __clz(__rbit64(v75)) >> 3;
          goto LABEL_40;
        }
        v78 = 0;
        while (1)
        {
          v77 = &v70[v78];
          if ((unint64_t)&v70[v78] >= v69)
            break;
          v79 = *(_QWORD *)(v71 + v73 + v78 * 8);
          ++v78;
          v80 = *v77 ^ v79;
          if (v80)
          {
            v76 = v78 * 8 + (__clz(__rbit64(v80)) >> 3);
            goto LABEL_40;
          }
        }
        v74 = (_QWORD *)(v71 + v73 + v78 * 8);
      }
      if ((unint64_t)v77 < a3 - 3 && *(_DWORD *)v74 == *(_DWORD *)v77)
      {
        v77 = (_QWORD *)((char *)v77 + 4);
        v74 = (_QWORD *)((char *)v74 + 4);
      }
      if ((unint64_t)v77 < a3 - 1 && *(unsigned __int16 *)v74 == *(unsigned __int16 *)v77)
      {
        v77 = (_QWORD *)((char *)v77 + 2);
        v74 = (_QWORD *)((char *)v74 + 2);
      }
      if ((unint64_t)v77 < a3 && *(unsigned __int8 *)v74 == *(unsigned __int8 *)v77)
        v77 = (_QWORD *)((char *)v77 + 1);
      v76 = (char *)v77 - (char *)a2;
LABEL_40:
      if (v76 > v72)
      {
        *a4 = v12 + 2 - v73;
        v72 = v76;
        if ((_QWORD *)((char *)a2 + v76) == (_QWORD *)a3)
          goto LABEL_50;
      }
LABEL_42:
      ++v68;
      v76 = v72;
      if (v68 == v65)
        goto LABEL_50;
    }
  }
  v76 = 3;
LABEL_50:
  v81 = 0;
  v82 = *(_QWORD *)(v18 + 8);
  v144 = *(char **)v18;
  v83 = *(_QWORD *)v18 - v82 - v14;
  v84 = *(_QWORD *)(v18 + 96);
  do
  {
    _X16 = v82 + *(unsigned int *)(v84 + 16 * v21 + v81);
    __asm { PRFM            #0, [X16] }
    v81 += 4;
  }
  while (v81 != 12);
  v87 = v29 + v27;
  if ((v29 + v27) >= 3)
    v88 = 3;
  else
    v88 = v87;
  v139 = (_DWORD)a2 - v11;
  v140 = *(unsigned int *)(v84 + ((16 * v21) | 0xC));
  v136 = *(_QWORD *)(v18 + 112);
  v137 = v140 >> 8;
  _X8 = v136 + 4 * (v140 >> 8);
  __asm { PRFM            #0, [X8] }
  v91 = (_QWORD *)a3;
  v138 = v83;
  v141 = v88;
  if ((_DWORD)v88)
  {
    v142 = v12 + v83 + 2;
    v92 = (unsigned int *)(v84 + 16 * v21);
    v93 = v88;
    do
    {
      v95 = *v92++;
      v94 = v95;
      if (!v95)
        return v76;
      if (*(_DWORD *)(v82 + v94) == *(_DWORD *)a2)
      {
        v96 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v82 + v94 + 4), a3, v144, v145);
        a3 = (unint64_t)v91;
        v97 = v96 + 4;
        if (v96 + 4 > v76)
        {
          *a4 = (v142 - v94);
          v76 = v96 + 4;
          if ((_QWORD *)((char *)a2 + v97) == v91)
            return v97;
        }
      }
    }
    while (--v93);
  }
  if (v87 - v141 >= v140)
    v98 = v140;
  else
    v98 = v87 - v141;
  if (!v98)
    return v76;
  v99 = 4 * v98;
  v100 = (unsigned int *)(v136 + 4 * v137);
  do
  {
    v101 = *v100++;
    _X10 = v82 + v101;
    __asm { PRFM            #0, [X10] }
    v99 -= 4;
  }
  while (v99);
  v104 = *(_DWORD *)a2;
  v105 = (unsigned int *)(v136 + 4 * v137);
  v97 = v76;
  do
  {
    v107 = *v105++;
    v106 = v107;
    v108 = v82 + v107;
    if (*(_DWORD *)v108 == v104)
    {
      v109 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v108 + 4), a3, v144, v145);
      a3 = (unint64_t)v91;
      if (v109 + 4 > v97)
      {
        *a4 = v139 + v138 + 2 - v106;
        v97 = v109 + 4;
        if ((_QWORD *)((char *)a2 + v109 + 4) == v91)
          break;
      }
    }
    --v98;
  }
  while (v98);
  return v97;
}

unint64_t ZSTD_RowFindBestMatch_dedicatedDictSearch_5_6(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  const char *v56;
  char v57;
  uint64_t v58;
  int8x16_t v59;
  int8x8_t v60;
  int8x8_t v61;
  int8x8_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v89;
  uint64_t v90;
  _QWORD *v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v140;
  unint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  int v145;
  int v146;
  char *v148;
  _QWORD *v149;
  _OWORD v150[16];
  uint64_t v151;
  int8x16x4_t v152;

  v151 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  v15 = (_DWORD)a2 - v11 - v13;
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v15 = *(_DWORD *)(a1 + 28);
  v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = v17 - 6;
  if (v17 >= 6)
    v20 = 6;
  else
    v20 = *(_DWORD *)(a1 + 252);
  v21 = (0xCF1BBCDCBB000000 * *a2) >> (66 - *(_BYTE *)(v18 + 248));
  _X11 = *(_QWORD *)(v18 + 96) + 16 * v21;
  __asm { PRFM            #0, [X11] }
  v27 = 1 << v19;
  if (!(!_ZF & _CF))
    v27 = 0;
  v28 = *(unsigned int *)(a1 + 44);
  if (v12 - v28 >= 0x181)
  {
    if (v28 <= 0xFFFFFF9F)
    {
      v113 = v28 + 96;
      do
      {
        v114 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + 8 + v28)) >> (56 - v10);
        v115 = (v114 >> 2) & 0x3FFFFFC0;
        _X22 = v5 + 4 * v115;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v7 + 2 * v115;
        __asm
        {
          PRFM            #0, [X20]
          PRFM            #0, [X20,#0x40]
        }
        v122 = *(unsigned int *)(v9 + 4 * (v28 & 7));
        *(_DWORD *)(v9 + 4 * (v28 & 7)) = v114;
        v123 = (v122 >> 2) & 0x3FFFFFC0;
        v124 = v5 + 4 * v123;
        v125 = (_BYTE *)(v7 + 2 * v123);
        v126 = (*v125 - 1) & 0x3F;
        *v125 = v126;
        v125[v126 + 16] = v122;
        *(_DWORD *)(v124 + 4 * v126) = v28++;
      }
      while (v28 < v113);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v127 = v12 - 32;
    LODWORD(v28) = v12 - 32;
    v128 = (_DWORD)a2 + 1 - (v11 + v127);
    if ((v128 + 1) < 8)
      v129 = v128 + 1;
    else
      v129 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v127)
      v130 = v129;
    else
      v130 = 0;
    if (v127 < v130 + (int)v127)
    {
      v131 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v132 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + v127)) >> v131;
        v133 = (v132 >> 2) & 0x3FFFFFC0;
        _X24 = v6 + 4 * v133;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x40]
        }
        _X23 = v8 + 2 * v133;
        __asm
        {
          PRFM            #0, [X23]
          PRFM            #0, [X23,#0x40]
        }
        *(_DWORD *)(a1 + 4 * (v127++ & 7) + 64) = v132;
        --v130;
      }
      while (v130);
    }
  }
  v29 = 1 << v20;
  if (v28 < v12)
  {
    v30 = *(_QWORD *)(a1 + 8) + 8;
    v31 = 56 - *(_DWORD *)(a1 + 52);
    v28 = v28;
    do
    {
      v32 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v30 + v28)) >> v31;
      v33 = (v32 >> 2) & 0x3FFFFFC0;
      _X23 = v6 + 4 * v33;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X23,#0x40]
      }
      _X22 = v8 + 2 * v33;
      __asm
      {
        PRFM            #0, [X22]
        PRFM            #0, [X22,#0x40]
      }
      v40 = *(unsigned int *)(v9 + 4 * (v28 & 7));
      *(_DWORD *)(v9 + 4 * (v28 & 7)) = v32;
      v41 = (v40 >> 2) & 0x3FFFFFC0;
      v42 = v6 + 4 * v41;
      v43 = (_BYTE *)(v8 + 2 * v41);
      v44 = (*v43 - 1) & 0x3F;
      *v43 = v44;
      v43[v44 + 16] = v40;
      *(_DWORD *)(v42 + 4 * v44) = v28++;
    }
    while (v28 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v45 = (0xCF1BBCDCBB000000 * *(_QWORD *)(v11 + v12 + 8)) >> (56 - v10);
  v46 = (v45 >> 2) & 0x3FFFFFC0;
  _X3 = v5 + 4 * v46;
  __asm
  {
    PRFM            #0, [X3]
    PRFM            #0, [X3,#0x40]
  }
  _X1 = v7 + 2 * v46;
  __asm
  {
    PRFM            #0, [X1]
    PRFM            #0, [X1,#0x40]
  }
  v53 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v45;
  v54 = (v53 >> 2) & 0x3FFFFFC0;
  v55 = (char *)(v7 + 2 * v54);
  v56 = v55 + 16;
  v57 = *v55;
  v58 = v5 + 4 * v54;
  memset(v150, 0, sizeof(v150));
  v152 = vld4q_s8(v56);
  v59 = vdupq_n_s8(v53);
  v152.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v152.val[3], v59), vceqq_s8(v152.val[2], v59), 1uLL), vsriq_n_s8(vceqq_s8(v152.val[1], v59), vceqq_s8(v152.val[0], v59), 1uLL), 2uLL);
  v60 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v152.val[0], v152.val[0], 4uLL), 4uLL);
  v61 = v60;
  if (v60)
  {
    v62 = 0;
    v63 = __ROR8__(*(_QWORD *)&v60, v57);
    v64 = v29;
    while (1)
    {
      v65 = *(unsigned int *)(v58 + 4 * ((__clz(__rbit64(v63)) + v57) & 0x3F));
      if (v65 < v15)
        break;
      _X15 = v11 + v65;
      __asm { PRFM            #0, [X15] }
      v61 = (int8x8_t)(*(_QWORD *)&v62 + 1);
      *((_DWORD *)v150 + *(_QWORD *)&v62) = v65;
      v29 = v64 - 1;
      v63 &= v63 - 1;
      if (v63)
      {
        ++*(_QWORD *)&v62;
        if (--v64)
          continue;
      }
      goto LABEL_22;
    }
    v29 = v64;
    v61 = v62;
  }
LABEL_22:
  v149 = (_QWORD *)(v11 + v14);
  v68 = (v57 - 1) & 0x3F;
  *v55 = v68;
  v55[v68 + 16] = v53;
  v69 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v69 + 1;
  *(_DWORD *)(v58 + 4 * v68) = v69;
  if (v61)
  {
    v70 = 0;
    v71 = a3 - 7;
    v72 = a2 + 1;
    v73 = v11 + 8;
    v74 = 3;
    while (1)
    {
      v75 = *((unsigned int *)v150 + v70);
      v76 = (_QWORD *)(v11 + v75);
      if (*(unsigned __int8 *)(v11 + v75 + v74) != *((unsigned __int8 *)a2 + v74))
        goto LABEL_41;
      if (v71 <= (unint64_t)a2)
      {
        v79 = a2;
      }
      else
      {
        v77 = *a2 ^ *v76;
        if (v77)
        {
          v78 = __clz(__rbit64(v77)) >> 3;
          goto LABEL_39;
        }
        v80 = 0;
        while (1)
        {
          v79 = &v72[v80];
          if ((unint64_t)&v72[v80] >= v71)
            break;
          v81 = *(_QWORD *)(v73 + v75 + v80 * 8);
          ++v80;
          v82 = *v79 ^ v81;
          if (v82)
          {
            v78 = v80 * 8 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_39;
          }
        }
        v76 = (_QWORD *)(v73 + v75 + v80 * 8);
      }
      if ((unint64_t)v79 < a3 - 3 && *(_DWORD *)v76 == *(_DWORD *)v79)
      {
        v79 = (_QWORD *)((char *)v79 + 4);
        v76 = (_QWORD *)((char *)v76 + 4);
      }
      if ((unint64_t)v79 < a3 - 1 && *(unsigned __int16 *)v76 == *(unsigned __int16 *)v79)
      {
        v79 = (_QWORD *)((char *)v79 + 2);
        v76 = (_QWORD *)((char *)v76 + 2);
      }
      if ((unint64_t)v79 < a3 && *(unsigned __int8 *)v76 == *(unsigned __int8 *)v79)
        v79 = (_QWORD *)((char *)v79 + 1);
      v78 = (char *)v79 - (char *)a2;
LABEL_39:
      if (v78 > v74)
      {
        *a4 = v12 + 2 - v75;
        v74 = v78;
        if ((_QWORD *)((char *)a2 + v78) == (_QWORD *)a3)
          goto LABEL_49;
      }
LABEL_41:
      ++v70;
      v78 = v74;
      if (v70 == *(_QWORD *)&v61)
        goto LABEL_49;
    }
  }
  v78 = 3;
LABEL_49:
  v83 = 0;
  v84 = *(_QWORD *)(v18 + 8);
  v148 = *(char **)v18;
  v85 = *(_QWORD *)v18 - v84 - v14;
  v86 = *(_QWORD *)(v18 + 96);
  do
  {
    _X16 = v84 + *(unsigned int *)(v86 + 16 * v21 + v83);
    __asm { PRFM            #0, [X16] }
    v83 += 4;
  }
  while (v83 != 12);
  v89 = v29 + v27;
  if ((v29 + v27) >= 3)
    v90 = 3;
  else
    v90 = v89;
  v143 = (_DWORD)a2 - v11;
  v144 = *(unsigned int *)(v86 + ((16 * v21) | 0xC));
  v140 = *(_QWORD *)(v18 + 112);
  v141 = v144 >> 8;
  _X8 = v140 + 4 * (v144 >> 8);
  __asm { PRFM            #0, [X8] }
  v93 = (_QWORD *)a3;
  v142 = v85;
  v145 = v90;
  if ((_DWORD)v90)
  {
    v146 = v12 + v85 + 2;
    v94 = (unsigned int *)(v86 + 16 * v21);
    v95 = v90;
    do
    {
      v97 = *v94++;
      v96 = v97;
      if (!v97)
        return v78;
      if (*(_DWORD *)(v84 + v96) == *(_DWORD *)a2)
      {
        v98 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v84 + v96 + 4), a3, v148, v149);
        a3 = (unint64_t)v93;
        v99 = v98 + 4;
        if (v98 + 4 > v78)
        {
          *a4 = (v146 - v96);
          v78 = v98 + 4;
          if ((_QWORD *)((char *)a2 + v99) == v93)
            return v99;
        }
      }
    }
    while (--v95);
  }
  if (v89 - v145 >= v144)
    v100 = v144;
  else
    v100 = v89 - v145;
  if (!v100)
    return v78;
  v101 = 4 * v100;
  v102 = (unsigned int *)(v140 + 4 * v141);
  do
  {
    v103 = *v102++;
    _X10 = v84 + v103;
    __asm { PRFM            #0, [X10] }
    v101 -= 4;
  }
  while (v101);
  v106 = *(_DWORD *)a2;
  v107 = (unsigned int *)(v140 + 4 * v141);
  v99 = v78;
  do
  {
    v109 = *v107++;
    v108 = v109;
    v110 = v84 + v109;
    if (*(_DWORD *)v110 == v106)
    {
      v111 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v110 + 4), a3, v148, v149);
      a3 = (unint64_t)v93;
      if (v111 + 4 > v99)
      {
        *a4 = v143 + v142 + 2 - v108;
        v99 = v111 + 4;
        if ((_QWORD *)((char *)a2 + v111 + 4) == v93)
          break;
      }
    }
    --v100;
  }
  while (v100);
  return v99;
}

unint64_t ZSTD_RowFindBestMatch_dedicatedDictSearch_6_4(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int8x16_t *v52;
  __int8 v53;
  int16x8_t v54;
  uint64x2_t v55;
  uint64x2_t v56;
  uint64_t v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int v85;
  uint64_t v86;
  _QWORD *v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  int v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BYTE *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v132;
  unint64_t v133;
  int v134;
  int v135;
  unint64_t v136;
  int v137;
  int v138;
  char *v140;
  _QWORD *v141;
  _OWORD v142[16];
  uint64_t v143;

  v143 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  v15 = (_DWORD)a2 - v11 - v13;
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v15 = *(_DWORD *)(a1 + 28);
  v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = v17 - 4;
  if (v17 >= 4)
    v20 = 4;
  else
    v20 = *(_DWORD *)(a1 + 252);
  v21 = (0xCF1BBCDCBF9B0000 * *a2) >> (66 - *(_BYTE *)(v18 + 248));
  _X11 = *(_QWORD *)(v18 + 96) + 16 * v21;
  __asm { PRFM            #0, [X11] }
  v27 = 1 << v19;
  if (!(!_ZF & _CF))
    v27 = 0;
  v28 = *(unsigned int *)(a1 + 44);
  if (v12 - v28 >= 0x181)
  {
    if (v28 <= 0xFFFFFF9F)
    {
      v109 = v28 + 96;
      do
      {
        v110 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + 8 + v28)) >> (56 - v10);
        v111 = (v110 >> 4) & 0xFFFFFF0;
        _X22 = v5 + 4 * v111;
        __asm { PRFM            #0, [X22] }
        _X20 = v7 + 2 * v111;
        __asm { PRFM            #0, [X20] }
        v116 = *(unsigned int *)(v9 + 4 * (v28 & 7));
        *(_DWORD *)(v9 + 4 * (v28 & 7)) = v110;
        v117 = (v116 >> 4) & 0xFFFFFF0;
        v118 = v5 + 4 * v117;
        v119 = (_BYTE *)(v7 + 2 * v117);
        v120 = (*v119 - 1) & 0xF;
        *v119 = v120;
        v119[v120 + 16] = v116;
        *(_DWORD *)(v118 + 4 * v120) = v28++;
      }
      while (v28 < v109);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v121 = v12 - 32;
    LODWORD(v28) = v12 - 32;
    v122 = (_DWORD)a2 + 1 - (v11 + v121);
    if ((v122 + 1) < 8)
      v123 = v122 + 1;
    else
      v123 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v121)
      v124 = v123;
    else
      v124 = 0;
    if (v121 < v124 + (int)v121)
    {
      v125 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v126 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + v121)) >> v125;
        v127 = (v126 >> 4) & 0xFFFFFF0;
        _X24 = v6 + 4 * v127;
        __asm { PRFM            #0, [X24] }
        _X23 = v8 + 2 * v127;
        __asm { PRFM            #0, [X23] }
        *(_DWORD *)(a1 + 4 * (v121++ & 7) + 64) = v126;
        --v124;
      }
      while (v124);
    }
  }
  v29 = 1 << v20;
  if (v28 < v12)
  {
    v30 = *(_QWORD *)(a1 + 8) + 8;
    v31 = 56 - *(_DWORD *)(a1 + 52);
    v28 = v28;
    do
    {
      v32 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v30 + v28)) >> v31;
      v33 = (v32 >> 4) & 0xFFFFFF0;
      _X23 = v6 + 4 * v33;
      __asm { PRFM            #0, [X23] }
      _X22 = v8 + 2 * v33;
      __asm { PRFM            #0, [X22] }
      v38 = *(unsigned int *)(v9 + 4 * (v28 & 7));
      *(_DWORD *)(v9 + 4 * (v28 & 7)) = v32;
      v39 = (v38 >> 4) & 0xFFFFFF0;
      v40 = v6 + 4 * v39;
      v41 = (_BYTE *)(v8 + 2 * v39);
      v42 = (*v41 - 1) & 0xF;
      *v41 = v42;
      v41[v42 + 16] = v38;
      *(_DWORD *)(v40 + 4 * v42) = v28++;
    }
    while (v28 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v43 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + v12 + 8)) >> (56 - v10);
  v44 = (v43 >> 4) & 0xFFFFFF0;
  _X3 = v5 + 4 * v44;
  __asm { PRFM            #0, [X3] }
  _X1 = v7 + 2 * v44;
  __asm { PRFM            #0, [X1] }
  v49 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v43;
  v50 = (v49 >> 4) & 0xFFFFFF0;
  v51 = v5 + 4 * v50;
  v52 = (int8x16_t *)(v7 + 2 * v50);
  v53 = v52->i8[0];
  memset(v142, 0, sizeof(v142));
  v54 = vshlq_n_s16((int16x8_t)vceqq_s8(v52[1], vdupq_n_s8(v49)), 7uLL);
  v55 = (uint64x2_t)vshrq_n_u32((uint32x4_t)vsriq_n_s16(v54, v54, 0xEuLL), 0xEuLL);
  v56 = vsraq_n_u64(v55, v55, 0x1CuLL);
  if (v56.u8[0] | (unsigned __int16)(v56.u8[8] << 8))
  {
    v57 = 0;
    v58 = ((unsigned __int16)(v56.u8[0] | (v56.u8[8] << 8)) >> (v53 & 0xF)) | (unsigned __int16)((v56.u8[0] | (unsigned __int16)(v56.u8[8] << 8)) << (-v53 & 0xF));
    v59 = v29;
    while (1)
    {
      v60 = *(unsigned int *)(v51 + 4 * ((__clz(__rbit64(v58)) + v53) & 0xF));
      if (v60 < v15)
        break;
      _X15 = v11 + v60;
      __asm { PRFM            #0, [X15] }
      v63 = v57 + 1;
      *((_DWORD *)v142 + v57) = v60;
      v29 = v59 - 1;
      v58 &= v58 - 1;
      if (v58)
      {
        ++v57;
        if (--v59)
          continue;
      }
      goto LABEL_23;
    }
    v29 = v59;
    v63 = v57;
  }
  else
  {
    v63 = 0;
  }
LABEL_23:
  v141 = (_QWORD *)(v11 + v14);
  v64 = (v53 - 1) & 0xF;
  v52->i8[0] = v64;
  v52[1].i8[v64] = v49;
  v65 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v65 + 1;
  *(_DWORD *)(v51 + 4 * v64) = v65;
  if (v63)
  {
    v66 = 0;
    v67 = a3 - 7;
    v68 = a2 + 1;
    v69 = v11 + 8;
    v70 = 3;
    while (1)
    {
      v71 = *((unsigned int *)v142 + v66);
      v72 = (_QWORD *)(v11 + v71);
      if (*(unsigned __int8 *)(v11 + v71 + v70) != *((unsigned __int8 *)a2 + v70))
        goto LABEL_42;
      if (v67 <= (unint64_t)a2)
      {
        v75 = a2;
      }
      else
      {
        v73 = *a2 ^ *v72;
        if (v73)
        {
          v74 = __clz(__rbit64(v73)) >> 3;
          goto LABEL_40;
        }
        v76 = 0;
        while (1)
        {
          v75 = &v68[v76];
          if ((unint64_t)&v68[v76] >= v67)
            break;
          v77 = *(_QWORD *)(v69 + v71 + v76 * 8);
          ++v76;
          v78 = *v75 ^ v77;
          if (v78)
          {
            v74 = v76 * 8 + (__clz(__rbit64(v78)) >> 3);
            goto LABEL_40;
          }
        }
        v72 = (_QWORD *)(v69 + v71 + v76 * 8);
      }
      if ((unint64_t)v75 < a3 - 3 && *(_DWORD *)v72 == *(_DWORD *)v75)
      {
        v75 = (_QWORD *)((char *)v75 + 4);
        v72 = (_QWORD *)((char *)v72 + 4);
      }
      if ((unint64_t)v75 < a3 - 1 && *(unsigned __int16 *)v72 == *(unsigned __int16 *)v75)
      {
        v75 = (_QWORD *)((char *)v75 + 2);
        v72 = (_QWORD *)((char *)v72 + 2);
      }
      if ((unint64_t)v75 < a3 && *(unsigned __int8 *)v72 == *(unsigned __int8 *)v75)
        v75 = (_QWORD *)((char *)v75 + 1);
      v74 = (char *)v75 - (char *)a2;
LABEL_40:
      if (v74 > v70)
      {
        *a4 = v12 + 2 - v71;
        v70 = v74;
        if ((_QWORD *)((char *)a2 + v74) == (_QWORD *)a3)
          goto LABEL_50;
      }
LABEL_42:
      ++v66;
      v74 = v70;
      if (v66 == v63)
        goto LABEL_50;
    }
  }
  v74 = 3;
LABEL_50:
  v79 = 0;
  v80 = *(_QWORD *)(v18 + 8);
  v140 = *(char **)v18;
  v81 = *(_QWORD *)v18 - v80 - v14;
  v82 = *(_QWORD *)(v18 + 96);
  do
  {
    _X16 = v80 + *(unsigned int *)(v82 + 16 * v21 + v79);
    __asm { PRFM            #0, [X16] }
    v79 += 4;
  }
  while (v79 != 12);
  v85 = v29 + v27;
  if ((v29 + v27) >= 3)
    v86 = 3;
  else
    v86 = v85;
  v135 = (_DWORD)a2 - v11;
  v136 = *(unsigned int *)(v82 + ((16 * v21) | 0xC));
  v132 = *(_QWORD *)(v18 + 112);
  v133 = v136 >> 8;
  _X8 = v132 + 4 * (v136 >> 8);
  __asm { PRFM            #0, [X8] }
  v89 = (_QWORD *)a3;
  v134 = v81;
  v137 = v86;
  if ((_DWORD)v86)
  {
    v138 = v12 + v81 + 2;
    v90 = (unsigned int *)(v82 + 16 * v21);
    v91 = v86;
    do
    {
      v93 = *v90++;
      v92 = v93;
      if (!v93)
        return v74;
      if (*(_DWORD *)(v80 + v92) == *(_DWORD *)a2)
      {
        v94 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v80 + v92 + 4), a3, v140, v141);
        a3 = (unint64_t)v89;
        v95 = v94 + 4;
        if (v94 + 4 > v74)
        {
          *a4 = (v138 - v92);
          v74 = v94 + 4;
          if ((_QWORD *)((char *)a2 + v95) == v89)
            return v95;
        }
      }
    }
    while (--v91);
  }
  if (v85 - v137 >= v136)
    v96 = v136;
  else
    v96 = v85 - v137;
  if (!v96)
    return v74;
  v97 = 4 * v96;
  v98 = (unsigned int *)(v132 + 4 * v133);
  do
  {
    v99 = *v98++;
    _X10 = v80 + v99;
    __asm { PRFM            #0, [X10] }
    v97 -= 4;
  }
  while (v97);
  v102 = *(_DWORD *)a2;
  v103 = (unsigned int *)(v132 + 4 * v133);
  v95 = v74;
  do
  {
    v105 = *v103++;
    v104 = v105;
    v106 = v80 + v105;
    if (*(_DWORD *)v106 == v102)
    {
      v107 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v106 + 4), a3, v140, v141);
      a3 = (unint64_t)v89;
      if (v107 + 4 > v95)
      {
        *a4 = v135 + v134 + 2 - v104;
        v95 = v107 + 4;
        if ((_QWORD *)((char *)a2 + v107 + 4) == v89)
          break;
      }
    }
    --v96;
  }
  while (v96);
  return v95;
}

unint64_t ZSTD_RowFindBestMatch_dedicatedDictSearch_6_5(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  const __int16 *v56;
  int8x16_t v57;
  unsigned __int32 v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  unsigned int v87;
  uint64_t v88;
  _QWORD *v91;
  unsigned int *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  int v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  int v126;
  int v127;
  int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v136;
  unint64_t v137;
  int v138;
  int v139;
  unint64_t v140;
  int v141;
  int v142;
  char *v144;
  _QWORD *v145;
  _OWORD v146[16];
  uint64_t v147;
  int16x8x2_t v148;

  v147 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  v15 = (_DWORD)a2 - v11 - v13;
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v15 = *(_DWORD *)(a1 + 28);
  v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = v17 - 5;
  if (v17 >= 5)
    v20 = 5;
  else
    v20 = *(_DWORD *)(a1 + 252);
  v21 = (0xCF1BBCDCBF9B0000 * *a2) >> (66 - *(_BYTE *)(v18 + 248));
  _X11 = *(_QWORD *)(v18 + 96) + 16 * v21;
  __asm { PRFM            #0, [X11] }
  v27 = 1 << v19;
  if (!(!_ZF & _CF))
    v27 = 0;
  v28 = *(unsigned int *)(a1 + 44);
  if (v12 - v28 >= 0x181)
  {
    if (v28 <= 0xFFFFFF9F)
    {
      v111 = v28 + 96;
      do
      {
        v112 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + 8 + v28)) >> (56 - v10);
        v113 = (v112 >> 3) & 0x1FFFFFE0;
        _X22 = v5 + 4 * v113;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v7 + 2 * v113;
        __asm { PRFM            #0, [X20] }
        v119 = *(unsigned int *)(v9 + 4 * (v28 & 7));
        *(_DWORD *)(v9 + 4 * (v28 & 7)) = v112;
        v120 = (v119 >> 3) & 0x1FFFFFE0;
        v121 = v5 + 4 * v120;
        v122 = (_BYTE *)(v7 + 2 * v120);
        v123 = (*v122 - 1) & 0x1F;
        *v122 = v123;
        v122[v123 + 16] = v119;
        *(_DWORD *)(v121 + 4 * v123) = v28++;
      }
      while (v28 < v111);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v124 = v12 - 32;
    LODWORD(v28) = v12 - 32;
    v125 = (_DWORD)a2 + 1 - (v11 + v124);
    if ((v125 + 1) < 8)
      v126 = v125 + 1;
    else
      v126 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v124)
      v127 = v126;
    else
      v127 = 0;
    if (v124 < v127 + (int)v124)
    {
      v128 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v129 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + v124)) >> v128;
        v130 = (v129 >> 3) & 0x1FFFFFE0;
        _X24 = v6 + 4 * v130;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x40]
        }
        _X23 = v8 + 2 * v130;
        __asm { PRFM            #0, [X23] }
        *(_DWORD *)(a1 + 4 * (v124++ & 7) + 64) = v129;
        --v127;
      }
      while (v127);
    }
  }
  v29 = 1 << v20;
  if (v28 < v12)
  {
    v30 = *(_QWORD *)(a1 + 8) + 8;
    v31 = 56 - *(_DWORD *)(a1 + 52);
    v28 = v28;
    do
    {
      v32 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v30 + v28)) >> v31;
      v33 = (v32 >> 3) & 0x1FFFFFE0;
      _X23 = v6 + 4 * v33;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X23,#0x40]
      }
      _X22 = v8 + 2 * v33;
      __asm { PRFM            #0, [X22] }
      v39 = *(unsigned int *)(v9 + 4 * (v28 & 7));
      *(_DWORD *)(v9 + 4 * (v28 & 7)) = v32;
      v40 = (v39 >> 3) & 0x1FFFFFE0;
      v41 = v6 + 4 * v40;
      v42 = (_BYTE *)(v8 + 2 * v40);
      v43 = (*v42 - 1) & 0x1F;
      *v42 = v43;
      v42[v43 + 16] = v39;
      *(_DWORD *)(v41 + 4 * v43) = v28++;
    }
    while (v28 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v44 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + v12 + 8)) >> (56 - v10);
  v45 = (v44 >> 3) & 0x1FFFFFE0;
  _X3 = v5 + 4 * v45;
  __asm
  {
    PRFM            #0, [X3]
    PRFM            #0, [X3,#0x40]
  }
  _X1 = v7 + 2 * v45;
  __asm { PRFM            #0, [X1] }
  v51 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v44;
  v52 = (v51 >> 3) & 0x1FFFFFE0;
  v53 = v5 + 4 * v52;
  v54 = (char *)(v7 + 2 * v52);
  v56 = (const __int16 *)(v54 + 16);
  v55 = *v54;
  v148 = vld2q_s16(v56);
  memset(v146, 0, sizeof(v146));
  v57 = vdupq_n_s8(v51);
  *(int8x8_t *)v148.val[0].i8 = vqmovn_s16((int16x8_t)vceqq_s8(v57, (int8x16_t)v148.val[0]));
  *(int8x8_t *)v57.i8 = vsri_n_s8(vqmovn_s16((int16x8_t)vceqq_s8(v57, (int8x16_t)v148.val[1])), *(int8x8_t *)v148.val[0].i8, 2uLL);
  v58 = vsri_n_s8(vuzp2_s8(*(int8x8_t *)v57.i8, *(int8x8_t *)v148.val[0].i8), vuzp1_s8(*(int8x8_t *)v57.i8, *(int8x8_t *)v148.val[0].i8), 4uLL).u32[0];
  if (v58)
  {
    v59 = 0;
    v60 = __ROR4__(v58, v55);
    v61 = v29;
    while (1)
    {
      v62 = *(unsigned int *)(v53 + 4 * ((__clz(__rbit64(v60)) + v55) & 0x1F));
      if (v62 < v15)
        break;
      _X15 = v11 + v62;
      __asm { PRFM            #0, [X15] }
      v65 = v59 + 1;
      *((_DWORD *)v146 + v59) = v62;
      v29 = v61 - 1;
      v60 &= v60 - 1;
      if (v60)
      {
        ++v59;
        if (--v61)
          continue;
      }
      goto LABEL_23;
    }
    v29 = v61;
    v65 = v59;
  }
  else
  {
    v65 = 0;
  }
LABEL_23:
  v145 = (_QWORD *)(v11 + v14);
  v66 = (v55 - 1) & 0x1F;
  *v54 = v66;
  v54[v66 + 16] = v51;
  v67 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v67 + 1;
  *(_DWORD *)(v53 + 4 * v66) = v67;
  if (v65)
  {
    v68 = 0;
    v69 = a3 - 7;
    v70 = a2 + 1;
    v71 = v11 + 8;
    v72 = 3;
    while (1)
    {
      v73 = *((unsigned int *)v146 + v68);
      v74 = (_QWORD *)(v11 + v73);
      if (*(unsigned __int8 *)(v11 + v73 + v72) != *((unsigned __int8 *)a2 + v72))
        goto LABEL_42;
      if (v69 <= (unint64_t)a2)
      {
        v77 = a2;
      }
      else
      {
        v75 = *a2 ^ *v74;
        if (v75)
        {
          v76 = __clz(__rbit64(v75)) >> 3;
          goto LABEL_40;
        }
        v78 = 0;
        while (1)
        {
          v77 = &v70[v78];
          if ((unint64_t)&v70[v78] >= v69)
            break;
          v79 = *(_QWORD *)(v71 + v73 + v78 * 8);
          ++v78;
          v80 = *v77 ^ v79;
          if (v80)
          {
            v76 = v78 * 8 + (__clz(__rbit64(v80)) >> 3);
            goto LABEL_40;
          }
        }
        v74 = (_QWORD *)(v71 + v73 + v78 * 8);
      }
      if ((unint64_t)v77 < a3 - 3 && *(_DWORD *)v74 == *(_DWORD *)v77)
      {
        v77 = (_QWORD *)((char *)v77 + 4);
        v74 = (_QWORD *)((char *)v74 + 4);
      }
      if ((unint64_t)v77 < a3 - 1 && *(unsigned __int16 *)v74 == *(unsigned __int16 *)v77)
      {
        v77 = (_QWORD *)((char *)v77 + 2);
        v74 = (_QWORD *)((char *)v74 + 2);
      }
      if ((unint64_t)v77 < a3 && *(unsigned __int8 *)v74 == *(unsigned __int8 *)v77)
        v77 = (_QWORD *)((char *)v77 + 1);
      v76 = (char *)v77 - (char *)a2;
LABEL_40:
      if (v76 > v72)
      {
        *a4 = v12 + 2 - v73;
        v72 = v76;
        if ((_QWORD *)((char *)a2 + v76) == (_QWORD *)a3)
          goto LABEL_50;
      }
LABEL_42:
      ++v68;
      v76 = v72;
      if (v68 == v65)
        goto LABEL_50;
    }
  }
  v76 = 3;
LABEL_50:
  v81 = 0;
  v82 = *(_QWORD *)(v18 + 8);
  v144 = *(char **)v18;
  v83 = *(_QWORD *)v18 - v82 - v14;
  v84 = *(_QWORD *)(v18 + 96);
  do
  {
    _X16 = v82 + *(unsigned int *)(v84 + 16 * v21 + v81);
    __asm { PRFM            #0, [X16] }
    v81 += 4;
  }
  while (v81 != 12);
  v87 = v29 + v27;
  if ((v29 + v27) >= 3)
    v88 = 3;
  else
    v88 = v87;
  v139 = (_DWORD)a2 - v11;
  v140 = *(unsigned int *)(v84 + ((16 * v21) | 0xC));
  v136 = *(_QWORD *)(v18 + 112);
  v137 = v140 >> 8;
  _X8 = v136 + 4 * (v140 >> 8);
  __asm { PRFM            #0, [X8] }
  v91 = (_QWORD *)a3;
  v138 = v83;
  v141 = v88;
  if ((_DWORD)v88)
  {
    v142 = v12 + v83 + 2;
    v92 = (unsigned int *)(v84 + 16 * v21);
    v93 = v88;
    do
    {
      v95 = *v92++;
      v94 = v95;
      if (!v95)
        return v76;
      if (*(_DWORD *)(v82 + v94) == *(_DWORD *)a2)
      {
        v96 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v82 + v94 + 4), a3, v144, v145);
        a3 = (unint64_t)v91;
        v97 = v96 + 4;
        if (v96 + 4 > v76)
        {
          *a4 = (v142 - v94);
          v76 = v96 + 4;
          if ((_QWORD *)((char *)a2 + v97) == v91)
            return v97;
        }
      }
    }
    while (--v93);
  }
  if (v87 - v141 >= v140)
    v98 = v140;
  else
    v98 = v87 - v141;
  if (!v98)
    return v76;
  v99 = 4 * v98;
  v100 = (unsigned int *)(v136 + 4 * v137);
  do
  {
    v101 = *v100++;
    _X10 = v82 + v101;
    __asm { PRFM            #0, [X10] }
    v99 -= 4;
  }
  while (v99);
  v104 = *(_DWORD *)a2;
  v105 = (unsigned int *)(v136 + 4 * v137);
  v97 = v76;
  do
  {
    v107 = *v105++;
    v106 = v107;
    v108 = v82 + v107;
    if (*(_DWORD *)v108 == v104)
    {
      v109 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v108 + 4), a3, v144, v145);
      a3 = (unint64_t)v91;
      if (v109 + 4 > v97)
      {
        *a4 = v139 + v138 + 2 - v106;
        v97 = v109 + 4;
        if ((_QWORD *)((char *)a2 + v109 + 4) == v91)
          break;
      }
    }
    --v98;
  }
  while (v98);
  return v97;
}

unint64_t ZSTD_RowFindBestMatch_dedicatedDictSearch_6_6(uint64_t a1, _QWORD *a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  int v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  const char *v56;
  char v57;
  uint64_t v58;
  int8x16_t v59;
  int8x8_t v60;
  int8x8_t v61;
  int8x8_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned int v89;
  uint64_t v90;
  _QWORD *v93;
  unsigned int *v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v140;
  unint64_t v141;
  int v142;
  int v143;
  unint64_t v144;
  int v145;
  int v146;
  char *v148;
  _QWORD *v149;
  _OWORD v150[16];
  uint64_t v151;
  int8x16x4_t v152;

  v151 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 96);
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = v7;
  v9 = a1 + 64;
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (_DWORD)a2 - v11;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v14 = *(unsigned int *)(a1 + 24);
  v15 = (_DWORD)a2 - v11 - v13;
  _ZF = (int)a2 - (int)v11 - *(_DWORD *)(a1 + 28) > v13 && *(_DWORD *)(a1 + 40) == 0;
  if (!_ZF)
    v15 = *(_DWORD *)(a1 + 28);
  v17 = *(_DWORD *)(a1 + 252);
  v18 = *(_QWORD *)(a1 + 232);
  v19 = v17 - 6;
  if (v17 >= 6)
    v20 = 6;
  else
    v20 = *(_DWORD *)(a1 + 252);
  v21 = (0xCF1BBCDCBF9B0000 * *a2) >> (66 - *(_BYTE *)(v18 + 248));
  _X11 = *(_QWORD *)(v18 + 96) + 16 * v21;
  __asm { PRFM            #0, [X11] }
  v27 = 1 << v19;
  if (!(!_ZF & _CF))
    v27 = 0;
  v28 = *(unsigned int *)(a1 + 44);
  if (v12 - v28 >= 0x181)
  {
    if (v28 <= 0xFFFFFF9F)
    {
      v113 = v28 + 96;
      do
      {
        v114 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + 8 + v28)) >> (56 - v10);
        v115 = (v114 >> 2) & 0x3FFFFFC0;
        _X22 = v5 + 4 * v115;
        __asm
        {
          PRFM            #0, [X22]
          PRFM            #0, [X22,#0x40]
        }
        _X20 = v7 + 2 * v115;
        __asm
        {
          PRFM            #0, [X20]
          PRFM            #0, [X20,#0x40]
        }
        v122 = *(unsigned int *)(v9 + 4 * (v28 & 7));
        *(_DWORD *)(v9 + 4 * (v28 & 7)) = v114;
        v123 = (v122 >> 2) & 0x3FFFFFC0;
        v124 = v5 + 4 * v123;
        v125 = (_BYTE *)(v7 + 2 * v123);
        v126 = (*v125 - 1) & 0x3F;
        *v125 = v126;
        v125[v126 + 16] = v122;
        *(_DWORD *)(v124 + 4 * v126) = v28++;
      }
      while (v28 < v113);
      v6 = *(_QWORD *)(a1 + 96);
      v8 = *(_QWORD *)(a1 + 56);
    }
    v127 = v12 - 32;
    LODWORD(v28) = v12 - 32;
    v128 = (_DWORD)a2 + 1 - (v11 + v127);
    if ((v128 + 1) < 8)
      v129 = v128 + 1;
    else
      v129 = 8;
    if ((unint64_t)a2 + 1 >= v11 + v127)
      v130 = v129;
    else
      v130 = 0;
    if (v127 < v130 + (int)v127)
    {
      v131 = 56 - *(_DWORD *)(a1 + 52);
      do
      {
        v132 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + v127)) >> v131;
        v133 = (v132 >> 2) & 0x3FFFFFC0;
        _X24 = v6 + 4 * v133;
        __asm
        {
          PRFM            #0, [X24]
          PRFM            #0, [X24,#0x40]
        }
        _X23 = v8 + 2 * v133;
        __asm
        {
          PRFM            #0, [X23]
          PRFM            #0, [X23,#0x40]
        }
        *(_DWORD *)(a1 + 4 * (v127++ & 7) + 64) = v132;
        --v130;
      }
      while (v130);
    }
  }
  v29 = 1 << v20;
  if (v28 < v12)
  {
    v30 = *(_QWORD *)(a1 + 8) + 8;
    v31 = 56 - *(_DWORD *)(a1 + 52);
    v28 = v28;
    do
    {
      v32 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v30 + v28)) >> v31;
      v33 = (v32 >> 2) & 0x3FFFFFC0;
      _X23 = v6 + 4 * v33;
      __asm
      {
        PRFM            #0, [X23]
        PRFM            #0, [X23,#0x40]
      }
      _X22 = v8 + 2 * v33;
      __asm
      {
        PRFM            #0, [X22]
        PRFM            #0, [X22,#0x40]
      }
      v40 = *(unsigned int *)(v9 + 4 * (v28 & 7));
      *(_DWORD *)(v9 + 4 * (v28 & 7)) = v32;
      v41 = (v40 >> 2) & 0x3FFFFFC0;
      v42 = v6 + 4 * v41;
      v43 = (_BYTE *)(v8 + 2 * v41);
      v44 = (*v43 - 1) & 0x3F;
      *v43 = v44;
      v43[v44 + 16] = v40;
      *(_DWORD *)(v42 + 4 * v44) = v28++;
    }
    while (v28 < ((_DWORD)a2 - v11));
  }
  *(_DWORD *)(a1 + 44) = v12;
  v45 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)(v11 + v12 + 8)) >> (56 - v10);
  v46 = (v45 >> 2) & 0x3FFFFFC0;
  _X3 = v5 + 4 * v46;
  __asm
  {
    PRFM            #0, [X3]
    PRFM            #0, [X3,#0x40]
  }
  _X1 = v7 + 2 * v46;
  __asm
  {
    PRFM            #0, [X1]
    PRFM            #0, [X1,#0x40]
  }
  v53 = *(unsigned int *)(v9 + 4 * (v12 & 7));
  *(_DWORD *)(v9 + 4 * (v12 & 7)) = v45;
  v54 = (v53 >> 2) & 0x3FFFFFC0;
  v55 = (char *)(v7 + 2 * v54);
  v56 = v55 + 16;
  v57 = *v55;
  v58 = v5 + 4 * v54;
  memset(v150, 0, sizeof(v150));
  v152 = vld4q_s8(v56);
  v59 = vdupq_n_s8(v53);
  v152.val[0] = vsriq_n_s8(vsriq_n_s8(vceqq_s8(v152.val[3], v59), vceqq_s8(v152.val[2], v59), 1uLL), vsriq_n_s8(vceqq_s8(v152.val[1], v59), vceqq_s8(v152.val[0], v59), 1uLL), 2uLL);
  v60 = vshrn_n_s16((int16x8_t)vsriq_n_s8(v152.val[0], v152.val[0], 4uLL), 4uLL);
  v61 = v60;
  if (v60)
  {
    v62 = 0;
    v63 = __ROR8__(*(_QWORD *)&v60, v57);
    v64 = v29;
    while (1)
    {
      v65 = *(unsigned int *)(v58 + 4 * ((__clz(__rbit64(v63)) + v57) & 0x3F));
      if (v65 < v15)
        break;
      _X15 = v11 + v65;
      __asm { PRFM            #0, [X15] }
      v61 = (int8x8_t)(*(_QWORD *)&v62 + 1);
      *((_DWORD *)v150 + *(_QWORD *)&v62) = v65;
      v29 = v64 - 1;
      v63 &= v63 - 1;
      if (v63)
      {
        ++*(_QWORD *)&v62;
        if (--v64)
          continue;
      }
      goto LABEL_22;
    }
    v29 = v64;
    v61 = v62;
  }
LABEL_22:
  v149 = (_QWORD *)(v11 + v14);
  v68 = (v57 - 1) & 0x3F;
  *v55 = v68;
  v55[v68 + 16] = v53;
  v69 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 44) = v69 + 1;
  *(_DWORD *)(v58 + 4 * v68) = v69;
  if (v61)
  {
    v70 = 0;
    v71 = a3 - 7;
    v72 = a2 + 1;
    v73 = v11 + 8;
    v74 = 3;
    while (1)
    {
      v75 = *((unsigned int *)v150 + v70);
      v76 = (_QWORD *)(v11 + v75);
      if (*(unsigned __int8 *)(v11 + v75 + v74) != *((unsigned __int8 *)a2 + v74))
        goto LABEL_41;
      if (v71 <= (unint64_t)a2)
      {
        v79 = a2;
      }
      else
      {
        v77 = *a2 ^ *v76;
        if (v77)
        {
          v78 = __clz(__rbit64(v77)) >> 3;
          goto LABEL_39;
        }
        v80 = 0;
        while (1)
        {
          v79 = &v72[v80];
          if ((unint64_t)&v72[v80] >= v71)
            break;
          v81 = *(_QWORD *)(v73 + v75 + v80 * 8);
          ++v80;
          v82 = *v79 ^ v81;
          if (v82)
          {
            v78 = v80 * 8 + (__clz(__rbit64(v82)) >> 3);
            goto LABEL_39;
          }
        }
        v76 = (_QWORD *)(v73 + v75 + v80 * 8);
      }
      if ((unint64_t)v79 < a3 - 3 && *(_DWORD *)v76 == *(_DWORD *)v79)
      {
        v79 = (_QWORD *)((char *)v79 + 4);
        v76 = (_QWORD *)((char *)v76 + 4);
      }
      if ((unint64_t)v79 < a3 - 1 && *(unsigned __int16 *)v76 == *(unsigned __int16 *)v79)
      {
        v79 = (_QWORD *)((char *)v79 + 2);
        v76 = (_QWORD *)((char *)v76 + 2);
      }
      if ((unint64_t)v79 < a3 && *(unsigned __int8 *)v76 == *(unsigned __int8 *)v79)
        v79 = (_QWORD *)((char *)v79 + 1);
      v78 = (char *)v79 - (char *)a2;
LABEL_39:
      if (v78 > v74)
      {
        *a4 = v12 + 2 - v75;
        v74 = v78;
        if ((_QWORD *)((char *)a2 + v78) == (_QWORD *)a3)
          goto LABEL_49;
      }
LABEL_41:
      ++v70;
      v78 = v74;
      if (v70 == *(_QWORD *)&v61)
        goto LABEL_49;
    }
  }
  v78 = 3;
LABEL_49:
  v83 = 0;
  v84 = *(_QWORD *)(v18 + 8);
  v148 = *(char **)v18;
  v85 = *(_QWORD *)v18 - v84 - v14;
  v86 = *(_QWORD *)(v18 + 96);
  do
  {
    _X16 = v84 + *(unsigned int *)(v86 + 16 * v21 + v83);
    __asm { PRFM            #0, [X16] }
    v83 += 4;
  }
  while (v83 != 12);
  v89 = v29 + v27;
  if ((v29 + v27) >= 3)
    v90 = 3;
  else
    v90 = v89;
  v143 = (_DWORD)a2 - v11;
  v144 = *(unsigned int *)(v86 + ((16 * v21) | 0xC));
  v140 = *(_QWORD *)(v18 + 112);
  v141 = v144 >> 8;
  _X8 = v140 + 4 * (v144 >> 8);
  __asm { PRFM            #0, [X8] }
  v93 = (_QWORD *)a3;
  v142 = v85;
  v145 = v90;
  if ((_DWORD)v90)
  {
    v146 = v12 + v85 + 2;
    v94 = (unsigned int *)(v86 + 16 * v21);
    v95 = v90;
    do
    {
      v97 = *v94++;
      v96 = v97;
      if (!v97)
        return v78;
      if (*(_DWORD *)(v84 + v96) == *(_DWORD *)a2)
      {
        v98 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v84 + v96 + 4), a3, v148, v149);
        a3 = (unint64_t)v93;
        v99 = v98 + 4;
        if (v98 + 4 > v78)
        {
          *a4 = (v146 - v96);
          v78 = v98 + 4;
          if ((_QWORD *)((char *)a2 + v99) == v93)
            return v99;
        }
      }
    }
    while (--v95);
  }
  if (v89 - v145 >= v144)
    v100 = v144;
  else
    v100 = v89 - v145;
  if (!v100)
    return v78;
  v101 = 4 * v100;
  v102 = (unsigned int *)(v140 + 4 * v141);
  do
  {
    v103 = *v102++;
    _X10 = v84 + v103;
    __asm { PRFM            #0, [X10] }
    v101 -= 4;
  }
  while (v101);
  v106 = *(_DWORD *)a2;
  v107 = (unsigned int *)(v140 + 4 * v141);
  v99 = v78;
  do
  {
    v109 = *v107++;
    v108 = v109;
    v110 = v84 + v109;
    if (*(_DWORD *)v110 == v106)
    {
      v111 = ZSTD_count_2segments((_QWORD *)((char *)a2 + 4), (char *)(v110 + 4), a3, v148, v149);
      a3 = (unint64_t)v93;
      if (v111 + 4 > v99)
      {
        *a4 = v143 + v142 + 2 - v108;
        v99 = v111 + 4;
        if ((_QWORD *)((char *)a2 + v111 + 4) == v93)
          break;
      }
    }
    --v100;
  }
  while (v100);
  return v99;
}

uint64_t ZSTD_fseBitCost(unsigned __int16 *a1, unsigned int *a2, unsigned int a3)
{
  int v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v3 = *a1;
  if (*a1)
    v4 = 1 << (v3 - 1);
  else
    v4 = 1;
  if (a1[1] < a3)
    return -1;
  v6 = 0;
  v7 = a3 + 1;
  v8 = &a1[2 * v4 + 4];
  do
  {
    v10 = *(_DWORD *)v8;
    v8 += 4;
    v9 = v10;
    v12 = *a2++;
    v11 = v12;
    if (v12)
    {
      v13 = ((HIWORD(v9) + 1) << 8) - ((((HIWORD(v9) + 1) << 24) - ((v9 + (1 << v3)) << 8)) >> v3);
      if (v13 >= (v3 << 8) + 256)
        return -1;
      v6 += v11 * (unint64_t)v13;
    }
    --v7;
  }
  while (v7);
  return v6 >> 8;
}

unint64_t ZSTD_crossEntropyCost(unsigned __int16 *a1, char a2, int *a3, int a4)
{
  unint64_t v4;
  uint64_t v5;
  __int16 v6;
  int v7;
  int v8;

  v4 = 0;
  if ((a4 + 1) > 1)
    v5 = (a4 + 1);
  else
    v5 = 1;
  do
  {
    v7 = *a1++;
    v6 = v7;
    if (v7 == 0xFFFF)
      v6 = 1;
    v8 = *a3++;
    v4 += (kInverseProbabilityLog256[v6 << (8 - a2)] * v8);
    --v5;
  }
  while (v5);
  return v4 >> 8;
}

uint64_t ZSTD_selectEncodingType(_DWORD *a1, unsigned int *a2, unsigned int a3, unint64_t a4, unint64_t a5, unsigned int a6, unsigned __int16 *a7, unsigned __int16 *a8, char a9, int a10, unsigned int a11)
{
  uint64_t result;
  unsigned int *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  __int16 v21;
  int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v34;
  unint64_t v35;
  _OWORD v36[7];
  _OWORD v37[32];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (a4 != a5)
  {
    if (a11 > 3)
    {
      v17 = a2;
      if (a10)
      {
        v18 = 0;
        if (a3 + 1 > 1)
          v19 = a3 + 1;
        else
          v19 = 1;
        v20 = a2;
        do
        {
          v22 = *a8++;
          v21 = v22;
          if (v22 == 0xFFFF)
            v21 = 1;
          v23 = *v20++;
          v18 += (kInverseProbabilityLog256[v21 << (8 - a9)] * v23);
          --v19;
        }
        while (v19);
        v24 = v18 >> 8;
      }
      else
      {
        v24 = -1;
      }
      if (*a1)
        v25 = ZSTD_fseBitCost(a7, a2, a3);
      else
        v25 = -1;
      memset(v37, 0, sizeof(v37));
      memset(v36, 0, 106);
      v26 = FSE_optimalTableLog(a6, a5, a3);
      v27 = FSE_normalizeCount((__int16 *)v36, v26, v17, a5, a3, a5 > 0x7FF);
      if (v27 <= 0xFFFFFFFFFFFFFF88)
        v27 = FSE_writeNCount(v37, 0x200uLL, (uint64_t)v36, a3, v26);
      v28 = 0;
      if (a3 + 1 > 1)
        v29 = a3 + 1;
      else
        v29 = 1;
      do
      {
        v31 = *v17++;
        v30 = v31;
        v32 = v31 << 8;
        if (v32 >= a5 || v30 == 0)
          v34 = v32 / a5;
        else
          v34 = 1;
        v28 += kInverseProbabilityLog256[v34] * v30;
        --v29;
      }
      while (v29);
      v35 = (v28 >> 8) + 8 * v27;
      if (v24 <= v25 && v24 <= v35)
        goto LABEL_42;
      if (v25 <= v35)
        return 3;
    }
    else if (a10)
    {
      if (a5 > 0x3E7 || *a1 != 2)
      {
        if (a5 >= (unint64_t)(10 - a11) << a9 >> 3 && a5 >> (a9 - 1) <= a4)
          goto LABEL_44;
LABEL_42:
        result = 0;
        *a1 = 0;
        return result;
      }
      return 3;
    }
LABEL_44:
    *a1 = 1;
    return 2;
  }
  *a1 = 0;
  return a4 > 2 || a10 == 0;
}

unint64_t ZSTD_buildCTable(_WORD *a1, unint64_t a2, _WORD *__dst, unsigned int a4, int a5, unsigned int *a6, unsigned int a7, _BYTE *a8, uint64_t a9, __int16 *a10, int a11, int a12, const void *a13, size_t a14, __int16 *a15, unint64_t a16)
{
  unint64_t v21;
  unint64_t v22;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;

  switch(a5)
  {
    case 0:
      v21 = FSE_buildCTable_wksp(__dst, a10, a12, a11, a15, a16);
      if (v21 >= 0xFFFFFFFFFFFFFF89)
        v22 = v21;
      else
        v22 = 0;
      break;
    case 1:
      v22 = FSE_buildCTable_rle((uint64_t)__dst, a7);
      if (v22 <= 0xFFFFFFFFFFFFFF88)
      {
        if (a2)
        {
          *(_BYTE *)a1 = *a8;
          v22 = 1;
        }
        else
        {
          v22 = -70;
        }
      }
      break;
    case 2:
      v24 = a9;
      v25 = FSE_optimalTableLog(a4, a9, a7);
      v26 = a8[a9 - 1];
      v27 = a6[v26];
      if (v27 >= 2)
      {
        a6[v26] = v27 - 1;
        v24 = a9 - 1;
      }
      v22 = FSE_normalizeCount(a15, v25, a6, v24, a7, v24 > 0x7FF);
      if (v22 <= 0xFFFFFFFFFFFFFF88)
      {
        v22 = FSE_writeNCount(a1, a2, (uint64_t)a15, a7, v25);
        if (v22 <= 0xFFFFFFFFFFFFFF88)
        {
          v28 = FSE_buildCTable_wksp(__dst, a15, a7, v25, a15 + 54, 0x474uLL);
          if (v28 >= 0xFFFFFFFFFFFFFF89)
            v22 = v28;
        }
      }
      break;
    case 3:
      memcpy(__dst, a13, a14);
      v22 = 0;
      break;
    default:
      v22 = -1;
      break;
  }
  return v22;
}

uint64_t ZSTD_encodeSequences(unint64_t *a1, unint64_t a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, unsigned __int16 *a7, uint64_t a8, uint64_t a9, unint64_t a10, int a11)
{
  unint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t result;
  unint64_t v42;
  unsigned int v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unsigned __int16 *v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  unsigned __int16 *v65;
  unint64_t v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t *v86;
  int v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t *v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t *v96;
  int v97;
  uint64_t v98;
  unsigned int v99;
  unint64_t *v100;
  uint64_t v101;
  unint64_t *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned __int16 *v106;

  if (a2 < 9)
    return -70;
  v12 = a10 - 1;
  v13 = *(unsigned __int8 *)(a4 + a10 - 1);
  v15 = *a3;
  v14 = a3 + 2;
  v16 = 1 << (v15 - 1);
  v105 = v15;
  if (!v15)
    v16 = 1;
  v106 = &v14[2 * v16];
  v17 = v14[((unint64_t)(((*(_DWORD *)&v106[4 * v13 + 2] + 0x8000) & 0xFFFF0000) - *(_DWORD *)&v106[4 * v13 + 2]) >> ((*(_DWORD *)&v106[4 * v13 + 2] + 0x8000) >> 16))
          + *(int *)&v106[4 * v13]];
  v18 = (char *)a1 + a2;
  v19 = *(unsigned __int8 *)(a6 + v12);
  v22 = *a5;
  v20 = a5 + 2;
  v21 = v22;
  v23 = 1 << (v22 - 1);
  if (!v22)
    v23 = 1;
  v24 = &v20[2 * v23];
  v25 = v20[((unint64_t)(((*(_DWORD *)&v24[4 * v19 + 2] + 0x8000) & 0xFFFF0000)
                              - *(_DWORD *)&v24[4 * v19 + 2]) >> ((*(_DWORD *)&v24[4 * v19 + 2]
                                                                                             + 0x8000) >> 16))
          + *(int *)&v24[4 * v19]];
  v26 = *(unsigned __int8 *)(a8 + v12);
  v27 = (unint64_t *)(v18 - 8);
  v30 = *a7;
  v28 = a7 + 2;
  v29 = v30;
  v31 = 1 << (v30 - 1);
  if (!v30)
    v31 = 1;
  v32 = &v28[2 * v31];
  v33 = v28[((unint64_t)(((*(_DWORD *)&v32[4 * v26 + 2] + 0x8000) & 0xFFFF0000) - *(_DWORD *)&v32[4 * v26 + 2]) >> ((*(_DWORD *)&v32[4 * v26 + 2] + 0x8000) >> 16))
          + *(int *)&v32[4 * v26]];
  v34 = (unsigned int *)(a9 + 8 * v12);
  v35 = LL_bits_2[v26];
  v36 = ML_bits_2[v13];
  v37 = ((unint64_t)(BIT_mask_0[v36] & *((unsigned __int16 *)v34 + 3)) << v35) | BIT_mask_0[v35] & *((unsigned __int16 *)v34 + 2);
  v38 = v36 + v35;
  if (a11)
  {
    if (v19 > 0x37)
    {
      v40 = *v34;
      v39 = v19 - 56;
      if ((_DWORD)v19 != 56)
      {
        v45 = ((unint64_t)(BIT_mask_0[v39] & v40) << v38) | v37;
        v19 = (v38 + v39) >> 3;
        *a1 = v45;
        if ((unint64_t *)((char *)a1 + v19) <= v27)
          v44 = (unint64_t *)((char *)a1 + v19);
        else
          v44 = v27;
        v38 = ((_BYTE)v38 + (_BYTE)v39) & 7;
        v37 = v45 >> (8 * v19);
        LODWORD(v19) = 56;
        goto LABEL_20;
      }
      LODWORD(v19) = 56;
    }
    else
    {
      LOBYTE(v39) = 0;
      v40 = *v34;
    }
    v44 = a1;
LABEL_20:
    v42 = ((unint64_t)(BIT_mask_0[v19] & (v40 >> v39)) << v38) | v37;
    v43 = v38 + v19;
    goto LABEL_21;
  }
  v42 = ((unint64_t)(BIT_mask_0[v19] & *v34) << v38) | v37;
  v43 = v38 + v19;
  v44 = a1;
LABEL_21:
  v46 = v43 >> 3;
  *v44 = v42;
  v47 = (unint64_t *)((char *)v44 + v46);
  if ((unint64_t *)((char *)v44 + v46) > v27)
    v47 = v27;
  v48 = v42 >> (8 * v46);
  v49 = v43 & 7;
  v50 = a10 - 2;
  v102 = a1;
  v103 = v29;
  v104 = v21;
  if (a10 >= 2)
  {
    v51 = a9 + 8 * a10 - 16;
    do
    {
      v52 = *(unsigned __int8 *)(a8 + v50);
      v53 = *(unsigned __int8 *)(a6 + v50);
      v54 = *(unsigned __int8 *)(a4 + v50);
      v55 = LL_bits_2[v52];
      v56 = ML_bits_2[v54];
      v57 = (v25 + *(unsigned int *)&v24[4 * v53 + 2]) >> 16;
      v58 = (unint64_t)(v25 & BIT_mask_0[v57]) << v49;
      v59 = v49 + v57;
      v25 = v20[(v25 >> ((v25 + *(_DWORD *)&v24[4 * v53 + 2]) >> 16)) + *(int *)&v24[4 * v53]];
      v60 = &v106[4 * v54];
      v61 = *(_DWORD *)v60;
      v62 = (v17 + *((unsigned int *)v60 + 1)) >> 16;
      v63 = (unint64_t)(v17 & BIT_mask_0[v62]) << v59;
      v64 = v59 + v62;
      v17 = v14[(v17 >> v62) + v61];
      v65 = &v32[4 * v52];
      LODWORD(v62) = *(_DWORD *)v65;
      v66 = (v33 + *((unsigned int *)v65 + 1)) >> 16;
      v67 = v58 | v48 | v63 | ((unint64_t)(v33 & BIT_mask_0[v66]) << v64);
      v68 = v64 + v66;
      v33 = v28[(v33 >> v66) + (int)v62];
      v69 = v55 + v53 + v56;
      if (v69 >= 0x1F)
      {
        v70 = v68 >> 3;
        *v47 = v67;
        if ((unint64_t *)((char *)v47 + v70) <= v27)
          v47 = (unint64_t *)((char *)v47 + v70);
        else
          v47 = v27;
        v68 &= 7u;
        v67 >>= 8 * v70;
      }
      v71 = v68 + v55;
      v72 = ((unint64_t)(BIT_mask_0[v55] & *(unsigned __int16 *)(v51 + 4)) << v68) | v67 | ((unint64_t)(BIT_mask_0[v56] & *(unsigned __int16 *)(v51 + 6)) << (v68 + v55));
      v73 = v71 + v56;
      if (v69 >= 0x39)
      {
        v74 = v73 >> 3;
        *v47 = v72;
        if ((unint64_t *)((char *)v47 + v74) <= v27)
          v47 = (unint64_t *)((char *)v47 + v74);
        else
          v47 = v27;
        v73 &= 7u;
        v72 >>= 8 * v74;
      }
      if (a11)
      {
        if (v53 > 0x37)
        {
          v76 = *(_DWORD *)v51;
          v75 = v53 - 56;
          if ((_DWORD)v53 != 56)
          {
            v79 = ((unint64_t)(BIT_mask_0[v75] & v76) << v73) | v72;
            v80 = (v73 + v75) >> 3;
            *v47 = v79;
            if ((unint64_t *)((char *)v47 + v80) <= v27)
              v47 = (unint64_t *)((char *)v47 + v80);
            else
              v47 = v27;
            v73 = ((_BYTE)v73 + (_BYTE)v75) & 7;
            v72 = v79 >> (8 * v80);
          }
          LODWORD(v53) = 56;
        }
        else
        {
          LOBYTE(v75) = 0;
          v76 = *(_DWORD *)v51;
        }
        v77 = v76 >> v75;
        v78 = BIT_mask_0[v53];
      }
      else
      {
        v77 = *(_DWORD *)v51;
        v78 = BIT_mask_0[v53];
      }
      v81 = ((unint64_t)(v78 & v77) << v73) | v72;
      v82 = (v73 + v53) >> 3;
      *v47 = v81;
      if ((unint64_t *)((char *)v47 + v82) <= v27)
        v47 = (unint64_t *)((char *)v47 + v82);
      else
        v47 = v27;
      v48 = v81 >> (8 * v82);
      --v50;
      v49 = ((_BYTE)v73 + (_BYTE)v53) & 7;
      v51 -= 8;
    }
    while (v50 < a10);
  }
  v83 = ((unint64_t)(v17 & BIT_mask_0[v105]) << v49) | v48;
  v84 = v49 + v105;
  v85 = v84 >> 3;
  *v47 = v83;
  v86 = (unint64_t *)((char *)v47 + v85);
  if ((unint64_t *)((char *)v47 + v85) > v27)
    v86 = v27;
  v87 = v84 & 7;
  v88 = ((unint64_t)(v25 & BIT_mask_0[v104]) << v87) | (v83 >> (8 * v85));
  v89 = v87 + v104;
  v90 = v89 >> 3;
  *v86 = v88;
  v91 = (unint64_t *)((char *)v86 + v90);
  if (v91 > v27)
    v91 = v27;
  v92 = v89 & 7;
  v93 = ((unint64_t)(v33 & BIT_mask_0[v103]) << v92) | (v88 >> (8 * v90));
  v94 = v92 + v103;
  v95 = v94 >> 3;
  *v91 = v93;
  v96 = (uint64_t *)((char *)v91 + v95);
  if (v96 > (uint64_t *)v27)
    v96 = (uint64_t *)v27;
  v97 = v94 & 7;
  v98 = (v93 >> (8 * v95)) | (1 << v97);
  v99 = v97 + 1;
  *v96 = v98;
  v100 = (unint64_t *)((char *)v96 + (v99 >> 3));
  if (v27 <= v100)
    return -70;
  v101 = (v99 & 7) != 0 ? (uint64_t)v100 + 1 : (uint64_t)v96 + (v99 >> 3);
  result = v101 - (_QWORD)v102;
  if ((unint64_t *)v101 == v102)
    return -70;
  return result;
}

unint64_t ZSTD_compressBound(unint64_t a1)
{
  unint64_t v1;

  v1 = (0x20000 - a1) >> 11;
  if (a1 >= 0x20000)
    v1 = 0;
  return a1 + (a1 >> 8) + v1;
}

uint64_t ZSTD_createCCtx()
{
  return ZSTD_createCCtx_advanced(ZSTD_defaultCMem_0);
}

uint64_t ZSTD_createCCtx_advanced(_QWORD *a1)
{
  uint64_t v1;
  void *v3;
  __int128 v5;
  uint64_t v6;

  if ((*a1 == 0) != (a1[1] == 0))
    return 0;
  v5 = *(_OWORD *)a1;
  v6 = a1[2];
  v3 = ZSTD_customMalloc(0x13C8uLL, (uint64_t)&v5);
  v1 = (uint64_t)v3;
  if (v3)
  {
    v5 = *(_OWORD *)a1;
    v6 = a1[2];
    bzero(v3, 0x13C8uLL);
    *(_OWORD *)(v1 + 744) = v5;
    *(_QWORD *)(v1 + 760) = v6;
    ZSTD_CCtx_reset(v1, 2);
  }
  return v1;
}

unint64_t ZSTD_freeCCtx(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  __int128 v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 776))
      return -64;
    if (*(_QWORD *)(result + 560) <= result)
    {
      v2 = *(_QWORD *)(result + 568);
      ZSTD_freeCCtxContent(result);
      if (v2 >= v1)
        return 0;
    }
    else
    {
      ZSTD_freeCCtxContent(result);
    }
    v4 = *(_QWORD *)(v1 + 760);
    v3 = *(_OWORD *)(v1 + 744);
    ZSTD_customFree((void *)v1, (uint64_t)&v3);
    return 0;
  }
  return result;
}

void ZSTD_freeCCtxContent(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  __int128 v5;
  uint64_t v6;

  v2 = a1 + 3496;
  v3 = *(void **)(a1 + 3496);
  v5 = *(_OWORD *)(a1 + 744);
  v6 = *(_QWORD *)(a1 + 760);
  ZSTD_customFree(v3, (uint64_t)&v5);
  ZSTD_freeCDict(*(_QWORD *)(v2 + 32));
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_QWORD *)(a1 + 3560) = 0;
  v5 = *(_OWORD *)(a1 + 744);
  v6 = *(_QWORD *)(a1 + 760);
  v4 = *(void **)(a1 + 560);
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  ZSTD_customFree(v4, (uint64_t)&v5);
}

uint64_t ZSTD_getSeqStore(uint64_t a1)
{
  return a1 + 824;
}

double ZSTD_CCtx_refCDict(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  double result;
  __int128 v7;
  uint64_t v8;

  if (!*(_DWORD *)(a1 + 3456))
  {
    v4 = a1 + 3496;
    v5 = *(void **)(a1 + 3496);
    v7 = *(_OWORD *)(a1 + 744);
    v8 = *(_QWORD *)(a1 + 760);
    ZSTD_customFree(v5, (uint64_t)&v7);
    ZSTD_freeCDict(*(_QWORD *)(v4 + 32));
    result = 0.0;
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_QWORD *)(a1 + 3560) = 0;
    *(_QWORD *)(a1 + 3536) = a2;
  }
  return result;
}

double ZSTD_CCtx_reset(uint64_t a1, int a2)
{
  _OWORD *v3;
  void *v4;
  double result;
  __int128 v6;
  uint64_t v7;

  if ((a2 & 0xFFFFFFFD) == 1)
  {
    *(_DWORD *)(a1 + 3456) = 0;
    *(_QWORD *)(a1 + 632) = 0;
  }
  if ((a2 & 0xFFFFFFFE) == 2 && !*(_DWORD *)(a1 + 3456))
  {
    v3 = (_OWORD *)(a1 + 3496);
    v4 = *(void **)(a1 + 3496);
    v6 = *(_OWORD *)(a1 + 744);
    v7 = *(_QWORD *)(a1 + 760);
    ZSTD_customFree(v4, (uint64_t)&v6);
    ZSTD_freeCDict(*(_QWORD *)(a1 + 3528));
    result = 0.0;
    *v3 = 0u;
    *(_OWORD *)(a1 + 3512) = 0u;
    *(_OWORD *)(a1 + 3528) = 0u;
    *(_OWORD *)(a1 + 3544) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_DWORD *)(a1 + 60) = 3;
    *(_DWORD *)(a1 + 48) = 1;
    *(_QWORD *)(a1 + 3560) = 0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
  }
  return result;
}

__n128 ZSTD_adjustCParams_internal@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  __n128 result;

  if (a3)
    v5 = a2 == -1;
  else
    v5 = 0;
  v6 = 513;
  if (!v5)
    v6 = a2;
  if (a4 != 2)
    v6 = a2;
  if (a4 == 1)
    v7 = 0;
  else
    v7 = a3;
  if (a4 == 1)
    v8 = a2;
  else
    v8 = v6;
  if ((v8 | v7) >> 30)
  {
    v11 = *(_DWORD *)a1;
    if (v8 == -1)
      goto LABEL_34;
  }
  else
  {
    v9 = __clz(v8 + v7 - 1) ^ 0x1F;
    if ((v8 + v7) >= 0x40)
      v10 = v9 + 1;
    else
      v10 = 6;
    v11 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 > v10)
    {
      *(_DWORD *)a1 = v10;
      v11 = v10;
    }
  }
  v12 = (1 << v11) + v7;
  v13 = v8 + v7;
  v14 = v12 >> 31;
  v15 = __clz(v12 - 1) ^ 0x1F;
  if (v14)
    v16 = 31;
  else
    v16 = v15 + 1;
  if (1 << v11 < v13)
    v17 = v16;
  else
    v17 = v11;
  if (v7)
    v18 = v17;
  else
    v18 = v11;
  v19 = *(_DWORD *)(a1 + 4);
  v20 = v19 - (*(_DWORD *)(a1 + 24) > 5u);
  if (*(_DWORD *)(a1 + 8) > v18 + 1)
    *(_DWORD *)(a1 + 8) = v18 + 1;
  if (v20 > v18)
    *(_DWORD *)(a1 + 4) = v19 + v18 - v20;
LABEL_34:
  if (v11 <= 9)
    *(_DWORD *)a1 = 10;
  *(_OWORD *)a5 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 12);
  *(__n128 *)(a5 + 12) = result;
  return result;
}

double ZSTD_getCParamsFromCCtxParams@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  double result;
  _OWORD v11[2];
  _OWORD v12[2];

  v7 = a2;
  if (a2 == -1)
  {
    if ((int)a1[16] <= 0)
      v7 = -1;
    else
      v7 = a1[16];
  }
  memset(v12, 0, 28);
  ZSTD_getCParams_internal(a1[11], v7, a3, a4, (uint64_t)v12);
  if (a1[24] == 1)
    LODWORD(v12[0]) = 27;
  ZSTD_overrideCParams(v12, a1 + 1);
  v11[0] = v12[0];
  *(_OWORD *)((char *)v11 + 12) = *(_OWORD *)((char *)v12 + 12);
  *(_QWORD *)&result = ZSTD_adjustCParams_internal((uint64_t)v11, v7, a3, a4, a5).n128_u64[0];
  return result;
}

double ZSTD_getCParams_internal@<D0>(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  double result;
  __int128 v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  if (a4 == 1)
    v7 = 0;
  else
    v7 = a3;
  v8 = -1;
  if (a2 != -1 || v7)
  {
    if (v7)
      v9 = a2 == -1;
    else
      v9 = 0;
    v10 = 500;
    if (!v9)
      v10 = 0;
    v8 = v7 + a2 + v10;
  }
  v25 = v5;
  v26 = v6;
  v11 = 3;
  if (a1 >= 0x16)
    v12 = 22;
  else
    v12 = a1;
  if (a1 < 0)
    v12 = 0;
  if (a1)
    v11 = v12;
  v13 = v8 < 0x40001;
  if (v8 <= 0x20000)
    ++v13;
  if (v8 > 0x4000)
    v14 = v13;
  else
    v14 = v13 + 1;
  v15 = (char *)&ZSTD_defaultCParameters + 644 * v14 + 28 * v11;
  v21 = *(_OWORD *)v15;
  v16 = *((_DWORD *)v15 + 4);
  v17 = *((_DWORD *)v15 + 5);
  v18 = *((_DWORD *)v15 + 6);
  if (a1 <= 0xFFFE0000)
    v19 = -131072;
  else
    v19 = a1;
  if (a1 < 0)
    v17 = -v19;
  v22 = v16;
  v23 = v17;
  v24 = v18;
  *(_QWORD *)&result = ZSTD_adjustCParams_internal((uint64_t)&v21, a2, a3, a4, a5).n128_u64[0];
  return result;
}

_DWORD *ZSTD_overrideCParams(_DWORD *result, _DWORD *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  if (*a2)
    *result = *a2;
  v2 = a2[2];
  if (v2)
    result[2] = v2;
  v3 = a2[1];
  if (v3)
    result[1] = v3;
  v4 = a2[3];
  if (v4)
    result[3] = v4;
  v5 = a2[4];
  if (v5)
    result[4] = v5;
  v6 = a2[5];
  if (v6)
    result[5] = v6;
  v7 = a2[6];
  if (v7)
    result[6] = v7;
  return result;
}

uint64_t ZSTD_estimateCCtxSize_usingCCtxParams_internal(int *a1, __int128 *a2, int a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t matched;
  uint64_t TableSize;
  unint64_t MaxNbSeq;
  unint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;

  v11 = 1 << *a1;
  if (v11 >= a7)
    v11 = a7;
  if (v11 >= 0x20000)
    v11 = 0x20000;
  if (a7)
    v12 = v11;
  else
    v12 = 1;
  if (a1[4] == 3)
    v13 = 3;
  else
    v13 = 4;
  v14 = v12 / v13;
  matched = ZSTD_sizeof_matchState(a1, a4, 0, 1);
  v21 = *a2;
  v22 = *((_QWORD *)a2 + 2);
  TableSize = ZSTD_ldm_getTableSize(&v21);
  v21 = *a2;
  v22 = *((_QWORD *)a2 + 2);
  MaxNbSeq = ZSTD_ldm_getMaxNbSeq(&v21, v12);
  if (*(_DWORD *)a2 == 1)
    v18 = (12 * MaxNbSeq + 63) & 0xFFFFFFFFFFFFFFC0;
  else
    v18 = 0;
  v19 = 25248;
  if (!a3)
    v19 = 20184;
  return a5
       + a6
       + v19
       + matched
       + v12
       + ((8 * v14 + 63) & 0xFFFFFFFC0)
       + v14
       + 2 * v14
       + TableSize
       + v18
       + 32;
}

uint64_t ZSTD_seqToCodes(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v2 = *(_QWORD *)(result + 32);
  v1 = *(_QWORD *)(result + 40);
  v3 = *(_QWORD *)(result + 8) - *(_QWORD *)result;
  if ((v3 & 0x7FFFFFFF8) != 0)
  {
    v4 = (v3 >> 3);
    v5 = (unsigned __int16 *)(*(_QWORD *)result + 6);
    v6 = *(_BYTE **)(result + 48);
    v7 = *(_BYTE **)(result + 40);
    v8 = *(_BYTE **)(result + 32);
    do
    {
      v9 = *(v5 - 1);
      if (v9 < 0x40)
        LOBYTE(v10) = ZSTD_LLcode_LL_Code[*(v5 - 1)];
      else
        v10 = 50 - __clz(v9);
      v11 = *v5;
      *v8 = v10;
      *v6 = __clz(*(_DWORD *)(v5 - 3)) ^ 0x1F;
      if (v11 < 0x80)
        LOBYTE(v11) = ZSTD_MLcode_ML_Code[v11];
      else
        v11 = 67 - __clz(v11);
      *v7++ = v11;
      v5 += 4;
      ++v8;
      ++v6;
      --v4;
    }
    while (v4);
  }
  v12 = *(_DWORD *)(result + 72);
  if (v12 == 1)
  {
    *(_BYTE *)(v2 + *(unsigned int *)(result + 76)) = 35;
    v12 = *(_DWORD *)(result + 72);
  }
  if (v12 == 2)
    *(_BYTE *)(v1 + *(unsigned int *)(result + 76)) = 52;
  return result;
}

uint64_t (*ZSTD_selectBlockCompressor(int a1, int a2, int a3))()
{
  unsigned int v3;
  BOOL v4;
  uint64_t (**v5)();

  v3 = a1 - 3;
  v4 = a2 != 1 || v3 > 2;
  v5 = &ZSTD_selectBlockCompressor_rowBasedBlockCompressors[3 * a3] + v3;
  if (v4)
    v5 = &ZSTD_selectBlockCompressor_blockCompressor[10 * a3] + a1;
  return *v5;
}

uint64_t ZSTD_resetSeqStore(uint64_t result)
{
  *(_QWORD *)(result + 24) = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 8) = *(_QWORD *)result;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

uint64_t ZSTD_buildBlockEntropyStats(_QWORD *a1, char *__src, void *__dst, _DWORD *a4, uint64_t a5, char *a6, unint64_t a7)
{
  unint64_t v7;
  uint64_t v14;
  unsigned int *v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _BOOL4 v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unint64_t v39;
  uint64_t v40;

  v7 = a7;
  v15 = (unsigned int *)a1[2];
  v14 = a1[3];
  v16 = a4[18];
  if (v16 == 1)
    goto LABEL_8;
  if (v16 == 2)
  {
    LODWORD(v37) = 255;
    memcpy(__dst, __src, 0x810uLL);
    goto LABEL_4;
  }
  if (a4[7] != 1)
  {
LABEL_8:
    v18 = a7;
    LODWORD(v37) = 255;
    v20 = __src + 2056;
    v35 = *((_DWORD *)__src + 514);
    memcpy(__dst, __src, 0x810uLL);
  }
  else
  {
    v18 = a7;
    v19 = a4[6];
    LODWORD(v37) = 255;
    v35 = *((_DWORD *)__src + 514);
    memcpy(__dst, __src, 0x810uLL);
    if (v19)
    {
LABEL_15:
      v17 = 0;
      v7 = v18;
      goto LABEL_16;
    }
    v20 = __src + 2056;
  }
  v21 = v14 - (_QWORD)v15;
  v22 = 63;
  if (*v20 == 2)
    v22 = 6;
  if (v22 >= v21)
    goto LABEL_15;
  v7 = v18;
  v23 = HIST_count_wksp(a6, (unsigned int *)&v37, v15, v21, a6, v18);
  v24 = v23;
  if (v23 > 0xFFFFFFFFFFFFFF88)
    goto LABEL_37;
  if (v23 == v21)
  {
    v17 = 1;
    goto LABEL_16;
  }
  if (v23 <= (v21 >> 7) + 4)
  {
LABEL_4:
    v17 = 0;
LABEL_16:
    *(_DWORD *)a5 = v17;
    *(_QWORD *)(a5 + 136) = 0;
    goto LABEL_17;
  }
  v34 = v18;
  v30 = v35;
  if (v35 == 1)
    v30 = HUF_validateCTable((uint64_t)__src, (int *)a6, v37);
  bzero(__dst, 0x808uLL);
  v31 = HUF_optimalTableLog(0xBu, v21, v37);
  v24 = HUF_buildCTable_wksp((uint64_t *)__dst, (unsigned int *)a6, v37, v31, (uint64_t)(a6 + 1024), v18 - 1024);
  if (v24 > 0xFFFFFFFFFFFFFF88)
  {
LABEL_37:
    *(_QWORD *)(a5 + 136) = v24;
    return v24;
  }
  v36 = v18 - 1024;
  v32 = HUF_estimateCompressedSize((uint64_t)__dst, (unsigned int *)a6, v37);
  v24 = HUF_writeCTable_wksp(a5 + 4, 0x80uLL, (uint64_t)__dst, v37, v24, (uint64_t)(a6 + 1024), v36);
  if (v30)
  {
    v33 = HUF_estimateCompressedSize((uint64_t)__src, (unsigned int *)a6, v37);
    if (v33 < v21 && (v24 + 12 >= v21 || v33 <= v24 + v32))
    {
      memcpy(__dst, __src, 0x810uLL);
      v17 = 3;
      goto LABEL_40;
    }
  }
  if (v24 + v32 >= v21)
  {
    memcpy(__dst, __src, 0x810uLL);
    v17 = 0;
LABEL_40:
    v7 = v34;
    goto LABEL_16;
  }
  *(_DWORD *)a5 = 2;
  *((_DWORD *)__dst + 514) = 1;
  *(_QWORD *)(a5 + 136) = v24;
  v7 = v34;
  if (v24 > 0xFFFFFFFFFFFFFF88)
    return v24;
LABEL_17:
  v25 = a1[1] - *a1;
  if (v25)
  {
    ZSTD_buildSequencesStatistics(a1, v25 >> 3, (uint64_t)(__src + 2064), (uint64_t)__dst + 2064, (char *)(a5 + 156), a5 + 289, a4[7], a6, (uint64_t)&v37, a6 + 212, v7 - 212);
    v25 = v39;
    if (v39 > 0xFFFFFFFFFFFFFF88)
      goto LABEL_22;
    v26 = v37;
    v27 = v38;
    v28 = v40;
  }
  else
  {
    v28 = 0;
    v27 = 0;
    *((_DWORD *)__dst + 1401) = 0;
    v26 = 0;
    *((_QWORD *)__dst + 701) = 0;
  }
  *(_QWORD *)(a5 + 144) = v26;
  *(_DWORD *)(a5 + 152) = v27;
  *(_QWORD *)(a5 + 304) = v28;
LABEL_22:
  *(_QWORD *)(a5 + 296) = v25;
  if ((unint64_t)v25 >= 0xFFFFFFFFFFFFFF89)
    return v25;
  else
    return 0;
}

uint64_t ZSTD_compressContinue_internal(uint64_t a1, char *a2, unint64_t a3, char *__src, size_t __n, int a6, int a7)
{
  unint64_t v11;
  char *v12;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  unint64_t v22;
  char *v24;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  size_t v34;
  char *v35;
  _DWORD *v36;
  _BOOL4 v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  _DWORD *v49;
  unint64_t v50;
  unsigned int v51;
  char v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned __int16 *v69;
  unsigned int v70;
  size_t v71;
  int v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  char v77;
  int v78;
  __int16 v79;
  int v80;
  size_t v81;
  unint64_t v82;
  int v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  size_t v88;
  int v89;
  uint64_t *v90;
  unsigned int *v91;
  size_t v92;
  uint64_t *v93;
  int v94;
  char *v95;
  uint32x2_t *v96;
  _OWORD *v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  unint64_t v103;

  if (!*(_DWORD *)a1)
    return -60;
  v11 = a3;
  v12 = a2;
  v14 = 0;
  if (a6 && *(_DWORD *)a1 == 1)
  {
    v15 = ZSTD_writeFrameHeader(a2, a3, (_DWORD *)(a1 + 192), *(_QWORD *)(a1 + 632) - 1, *(_DWORD *)(a1 + 544));
    v14 = v15;
    if (v15 > 0xFFFFFFFFFFFFFF88)
      return v14;
    v11 -= v15;
    v12 += v15;
    *(_DWORD *)a1 = 2;
  }
  if (!__n)
    return v14;
  v96 = (uint32x2_t *)(a1 + 3088);
  v16 = *(char **)(a1 + 3088);
  if (*(_DWORD *)(a1 + 3208))
    v17 = 0;
  else
    v17 = v16 == __src;
  v18 = !v17;
  if (v17)
  {
    v19 = *(_QWORD *)(a1 + 3104);
    v21 = *(_DWORD *)(a1 + 3116);
    LODWORD(v20) = *(_DWORD *)(a1 + 3112);
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 3096);
    v20 = &v16[-v19];
    v21 = *(_DWORD *)(a1 + 3112);
    *(_DWORD *)(a1 + 3116) = v21;
    *(_DWORD *)(a1 + 3112) = (_DWORD)v20;
    *(_QWORD *)(a1 + 3104) = v19;
    *(_QWORD *)(a1 + 3096) = __src - v20;
    if (v20 - v21 <= 7)
    {
      *(_DWORD *)(a1 + 3116) = (_DWORD)v20;
      v21 = v20;
    }
  }
  v24 = &__src[__n];
  *v96 = (uint32x2_t)&__src[__n];
  if ((unint64_t)&__src[__n] > v19 + (unint64_t)v21
    && v19 + (unint64_t)v20 > (unint64_t)__src)
  {
    v26 = (uint64_t)&v24[-v19];
    if (v26 > v20)
      LODWORD(v26) = (_DWORD)v20;
    *(_DWORD *)(a1 + 3116) = v26;
  }
  if (v18)
  {
    *(_DWORD *)(a1 + 3208) = 0;
    *(_DWORD *)(a1 + 3132) = (_DWORD)v20;
  }
  if (*(_DWORD *)(a1 + 288) == 1)
  {
    v27 = *(char **)(a1 + 904);
    if (v27 == __src)
    {
      v28 = *(_QWORD *)(a1 + 920);
      v30 = *(_DWORD *)(a1 + 932);
      LODWORD(v29) = *(_DWORD *)(a1 + 928);
    }
    else
    {
      v28 = *(_QWORD *)(a1 + 912);
      v29 = &v27[-v28];
      v30 = *(_DWORD *)(a1 + 928);
      *(_DWORD *)(a1 + 932) = v30;
      *(_DWORD *)(a1 + 928) = (_DWORD)v29;
      *(_QWORD *)(a1 + 920) = v28;
      *(_QWORD *)(a1 + 912) = __src - v29;
      if (v29 - v30 <= 7)
      {
        *(_DWORD *)(a1 + 932) = (_DWORD)v29;
        v30 = v29;
      }
    }
    *(_QWORD *)(a1 + 904) = v24;
    if ((unint64_t)v24 > v28 + (unint64_t)v30
      && v28 + (unint64_t)v29 > (unint64_t)__src)
    {
      v31 = (uint64_t)&v24[-v28];
      if (v31 > v29)
        LODWORD(v31) = (_DWORD)v29;
      *(_DWORD *)(a1 + 932) = v31;
    }
  }
  if (!a6)
  {
    ZSTD_overflowCorrectIfNeeded(v96, (_QWORD *)(a1 + 560), (_DWORD *)(a1 + 192), (int)__src, (int)v24);
    v22 = ZSTD_compressBlock_internal(a1, v12, v11, __src, __n, 0);
    goto LABEL_125;
  }
  v87 = v14;
  v32 = *(_QWORD *)(a1 + 624);
  v33 = *(_DWORD *)(a1 + 196);
  if (*(_DWORD *)(a1 + 228))
    ZSTD_XXH64_update(a1 + 656, __src, __n);
  v90 = (uint64_t *)(a1 + 824);
  v91 = (unsigned int *)(a1 + 3968);
  v97 = (_OWORD *)(a1 + 3888);
  v93 = (uint64_t *)(a1 + 3808);
  v86 = (unint64_t)v12;
  v88 = __n;
  v34 = __n;
  v35 = v12;
  v36 = (_DWORD *)(a1 + 192);
  v94 = 1 << v33;
  do
  {
    v37 = v32 >= v34;
    if (v11 < 6)
      return -70;
    if (v34 < v32)
      v32 = v34;
    ZSTD_overflowCorrectIfNeeded(v96, (_QWORD *)(a1 + 560), v36, (int)__src, (_DWORD)__src + v32);
    v38 = *(_QWORD *)(a1 + 3096);
    v99 = &__src[v32];
    v39 = *(_DWORD *)(a1 + 3128);
    if (v39 + v94 < ((_DWORD)__src + v32 - v38))
    {
      v39 = 0;
      *(_DWORD *)(a1 + 3128) = 0;
      *(_QWORD *)(a1 + 3320) = 0;
    }
    v40 = (_DWORD)__src - v38;
    v41 = *(_DWORD *)(a1 + 3116);
    if (v39 + v94 < v40)
    {
      if (v41 < v40 - v94)
      {
        *(_DWORD *)(a1 + 3116) = v40 - v94;
        v41 = v40 - v94;
      }
      if (*(_DWORD *)(a1 + 3112) < v41)
        *(_DWORD *)(a1 + 3112) = v41;
      *(_DWORD *)(a1 + 3128) = 0;
      *(_QWORD *)(a1 + 3320) = 0;
    }
    if (*(_DWORD *)(a1 + 3132) < v41)
      *(_DWORD *)(a1 + 3132) = v41;
    v42 = v37 & a7;
    if (*(_QWORD *)(a1 + 248))
    {
      v43 = ZSTD_buildSeqStore((uint32x2_t *)a1, (unint64_t)__src, v32);
      v22 = v43;
      if (v43 > 0xFFFFFFFFFFFFFF88)
        return v22;
      if (!v43)
      {
        if (!*(_DWORD *)(a1 + 816)
          && *(_QWORD *)(a1 + 832) - *(_QWORD *)(a1 + 824) <= 0x1FuLL
          && *(_QWORD *)(a1 + 848) - *(_QWORD *)(a1 + 840) <= 9uLL
          && ZSTD_isRLE(__src, v32))
        {
          v77 = *__src;
          *(_WORD *)v35 = v42 | (8 * v32) | 2;
          v35[2] = v32 >> 13;
          v35[3] = v77;
          v22 = 4;
LABEL_64:
          v45 = *(_QWORD *)(a1 + 3072);
          if (*(_DWORD *)(v45 + 5604) == 2)
            *(_DWORD *)(v45 + 5604) = 1;
          goto LABEL_115;
        }
        v44 = ZSTD_compressSuperBlock(a1, v35, v11, __src, v32, v42);
        if (v44 != -70)
        {
          v22 = v44;
          if (v44 > 0xFFFFFFFFFFFFFF88)
            return v22;
          v51 = *(_DWORD *)(a1 + 220);
          v52 = v51 <= 7 ? 6 : v51 - 1;
          if (v44 && v44 < v32 - (v32 >> v52) + 1)
          {
            *(int8x16_t *)(a1 + 3072) = vextq_s8(*(int8x16_t *)(a1 + 3072), *(int8x16_t *)(a1 + 3072), 8uLL);
            goto LABEL_64;
          }
        }
      }
      v22 = v32 + 3;
      if (v32 + 3 > v11)
        return -70;
      *(_WORD *)v35 = v42 | (8 * v32);
      v35[2] = v32 >> 13;
      memcpy(v35 + 3, __src, v32);
      if (v22 > 0xFFFFFFFFFFFFFF88)
        return v22;
      goto LABEL_64;
    }
    v95 = v35;
    if (*(_DWORD *)(a1 + 332) != 1)
    {
      v49 = v35 + 3;
      v50 = ZSTD_compressBlock_internal(a1, v49, v11 - 3, __src, v32, 1);
      v22 = v50;
      if (v50 > 0xFFFFFFFFFFFFFF88)
        return v22;
      if (v50 == 1)
      {
        v78 = 8 * v32;
        v79 = 2;
LABEL_114:
        v35 = v95;
        v80 = v42 | v78;
        *(_WORD *)v95 = v80 | v79;
        v95[2] = BYTE2(v80);
        v22 = v50 + 3;
        goto LABEL_115;
      }
      if (v50)
      {
        v78 = v42;
        v42 = 8 * v50;
        v79 = 4;
        goto LABEL_114;
      }
      v22 = v32 + 3;
      if (v32 + 3 > v11)
        return -70;
      *(_WORD *)v95 = v42 | (8 * v32);
      v95[2] = v32 >> 13;
      v48 = v49;
      v35 = v95;
      goto LABEL_78;
    }
    v46 = ZSTD_buildSeqStore((uint32x2_t *)a1, (unint64_t)__src, v32);
    v22 = v46;
    if (v46 > 0xFFFFFFFFFFFFFF88)
      return v22;
    if (v46 == 1)
    {
      v47 = *(_QWORD *)(a1 + 3072);
      if (*(_DWORD *)(v47 + 5604) == 2)
        *(_DWORD *)(v47 + 5604) = 1;
      v22 = v32 + 3;
      if (v32 + 3 > v11)
        return -70;
      *(_WORD *)v35 = v42 | (8 * v32);
      v35[2] = v32 >> 13;
      v48 = v35 + 3;
LABEL_78:
      memcpy(v48, __src, v32);
      goto LABEL_79;
    }
    v53 = 0;
    v54 = *(_QWORD *)(a1 + 832) - *(_QWORD *)(a1 + 824);
    v55 = v54 >> 3;
    v102 = a1 + 3968;
    v103 = 0;
    if ((v54 >> 3) >= 5)
    {
      ZSTD_deriveBlockSplitsHelper((unint64_t)&v102, 0, (v54 >> 3), a1, v90);
      v53 = v103;
      *(_DWORD *)(v102 + 4 * v103) = v55;
    }
    v56 = *(_QWORD *)(a1 + 3072);
    v102 = *(_QWORD *)(v56 + 5616);
    LODWORD(v103) = *(_DWORD *)(v56 + 5624);
    v100 = v102;
    v101 = v103;
    *v97 = 0u;
    *(_OWORD *)(a1 + 3904) = 0u;
    *(_OWORD *)(a1 + 3920) = 0u;
    *(_OWORD *)(a1 + 3936) = 0u;
    *(_OWORD *)(a1 + 3952) = 0u;
    if (v53)
    {
      v98 = v53;
      v89 = v42;
      v84 = a7;
      ZSTD_deriveSeqStoreChunk((uint64_t)v93, v90, 0, *v91);
      v57 = a1 + 3808;
      v58 = 0;
      v59 = v11;
      v60 = 0;
      v22 = 0;
      v61 = (uint64_t)v35;
      v85 = v59;
      v92 = v34;
      while (1)
      {
        v62 = ZSTD_countSeqStoreLiteralsBytes(v57);
        v63 = *(_QWORD *)(a1 + 3816);
        v64 = *(_QWORD *)(a1 + 3808);
        v65 = v63 - v64;
        if (v63 == v64)
        {
          v66 = 0;
        }
        else
        {
          v66 = 0;
          v67 = v65 >> 3;
          v68 = *(unsigned int *)(a1 + 3884);
          if (v67 <= 1)
            v67 = 1;
          v69 = (unsigned __int16 *)(v64 + 6);
          do
          {
            v70 = *v69;
            v69 += 4;
            v66 += v70 + 3;
            if (!v68 && *(_DWORD *)(a1 + 3880) == 2)
              v66 += 0x10000;
            --v68;
            --v67;
          }
          while (v67);
        }
        v71 = v66 + v62;
        v58 += v66 + v62;
        if (v60 == v98)
        {
          v71 = v71 + v32 - v58;
          v72 = v89;
        }
        else
        {
          ZSTD_deriveSeqStoreChunk((uint64_t)v97, v90, v91[v60], v91[v60 + 1]);
          v72 = 0;
        }
        v73 = ZSTD_compressSeqStore_singleBlock(a1, v93, &v102, (int *)&v100, v61, v59, __src, v71, v72, 1);
        if (v73 > 0xFFFFFFFFFFFFFF88)
          break;
        __src += v71;
        v61 += v73;
        v59 -= v73;
        v22 += v73;
        v74 = *(_OWORD *)(a1 + 3936);
        *(_OWORD *)(a1 + 3840) = *(_OWORD *)(a1 + 3920);
        *(_OWORD *)(a1 + 3856) = v74;
        *(_OWORD *)(a1 + 3872) = *(_OWORD *)(a1 + 3952);
        v75 = *(_OWORD *)(a1 + 3904);
        *(_OWORD *)v93 = *v97;
        *(_OWORD *)(a1 + 3824) = v75;
        ++v60;
        v35 = v95;
        v57 = a1 + 3808;
        v34 = v92;
        if (v60 > v98)
        {
          v76 = *(_QWORD *)(a1 + 3072);
          *(_QWORD *)(v76 + 5616) = v102;
          *(_DWORD *)(v76 + 5624) = v103;
          v11 = v85;
          a7 = v84;
          v36 = (_DWORD *)(a1 + 192);
          goto LABEL_79;
        }
      }
      v22 = v73;
      v11 = v85;
      a7 = v84;
      v36 = (_DWORD *)(a1 + 192);
      v35 = v95;
      v34 = v92;
    }
    else
    {
      v22 = ZSTD_compressSeqStore_singleBlock(a1, v90, &v102, (int *)&v100, (uint64_t)v35, v11, __src, v32, v42, 0);
    }
LABEL_79:
    if (v22 >= 0xFFFFFFFFFFFFFF89)
      return v22;
LABEL_115:
    v35 += v22;
    v11 -= v22;
    *(_DWORD *)(a1 + 816) = 0;
    __src = v99;
    v34 -= v32;
  }
  while (v34);
  if (a7 && (unint64_t)v35 > v86)
    *(_DWORD *)a1 = 3;
  v22 = (unint64_t)&v35[-v86];
  v14 = v87;
  __n = v88;
LABEL_125:
  if (v22 <= 0xFFFFFFFFFFFFFF88)
  {
    v81 = *(_QWORD *)(a1 + 640) + __n;
    *(_QWORD *)(a1 + 640) = v81;
    *(_QWORD *)(a1 + 648) += v22 + v14;
    v82 = *(_QWORD *)(a1 + 632);
    if (v81 + 1 <= v82 || v82 == 0)
      v22 += v14;
    else
      return -72;
  }
  return v22;
}

uint64_t ZSTD_compressBlock(uint64_t a1, char *a2, unint64_t a3, char *a4, size_t a5)
{
  unint64_t v5;

  LODWORD(v5) = 1 << *(_DWORD *)(a1 + 196);
  if (v5 >= 0x20000)
    v5 = 0x20000;
  else
    v5 = v5;
  if (v5 >= a5)
    return ZSTD_compressContinue_internal(a1, a2, a3, a4, a5, 0, 0);
  else
    return -72;
}

uint64_t ZSTD_loadCEntropy(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  unsigned int v30;
  int v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v35;
  unint64_t v36;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _WORD v46[13];
  __int16 v47[36];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  memset(v47, 0, 64);
  v8 = a3 + 8;
  *(_DWORD *)(a1 + 2056) = 1;
  v40 = 31;
  LODWORD(v41) = 255;
  v39 = 1;
  v9 = HUF_readCTable((_QWORD *)a1, &v41, (char *)(a3 + 8), a4 - 8, &v39);
  if (!v39)
    *(_DWORD *)(a1 + 2056) = 2;
  if (v9 < 0xFFFFFFFFFFFFFF89 && v41 > 0xFE)
    v10 = v9;
  else
    v10 = 0;
  if (v9 < 0xFFFFFFFFFFFFFF89 && v41 > 0xFE)
  {
    v11 = a3 + a4;
    v12 = v8 + v10;
    LODWORD(v41) = 0;
    v13 = FSE_readNCount(v47, &v40, &v41, v8 + v10, v11 - (v8 + v10));
    if (v13 <= 0xFFFFFFFFFFFFFF88 && v41 < 9)
    {
      v14 = v13;
      v15 = FSE_buildCTable_wksp((_WORD *)(a1 + 2064), v47, 31, v41, a2, 0x2200uLL);
      v16 = v12 + v14;
      v17 = v15 >= 0xFFFFFFFFFFFFFF89 ? v12 : v12 + v14;
      if (v15 <= 0xFFFFFFFFFFFFFF88)
      {
        v45 = 0u;
        memset(v46, 0, sizeof(v46));
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v38 = 0;
        v39 = 52;
        v18 = FSE_readNCount(&v41, &v39, &v38, v16, v11 - v16);
        if (v18 <= 0xFFFFFFFFFFFFFF88 && v38 <= 9)
        {
          v19 = v18;
          if ((unint64_t)FSE_buildCTable_wksp((_WORD *)(a1 + 2836), (__int16 *)&v41, v39, v38, a2, 0x2200uLL) <= 0xFFFFFFFFFFFFFF88)
          {
            if (v39 >= 0x34)
            {
              v21 = 0;
              while (*(_WORD *)((char *)&v41 + v21))
              {
                v21 += 2;
                if (v21 == 106)
                {
                  v20 = 2;
                  goto LABEL_22;
                }
              }
            }
            v20 = 1;
LABEL_22:
            *(_DWORD *)(a1 + 5608) = v20;
            v22 = v17 + v19;
            *(_QWORD *)&v45 = 0;
            v43 = 0u;
            v44 = 0u;
            v41 = 0u;
            v42 = 0u;
            v38 = 0;
            v39 = 35;
            v23 = FSE_readNCount(&v41, &v39, &v38, v22, v11 - v22);
            if (v23 <= 0xFFFFFFFFFFFFFF88 && v38 <= 9)
            {
              v24 = v23;
              if ((unint64_t)FSE_buildCTable_wksp((_WORD *)(a1 + 4288), (__int16 *)&v41, v39, v38, a2, 0x2200uLL) <= 0xFFFFFFFFFFFFFF88)
              {
                if (v39 >= 0x23)
                {
                  v26 = 0;
                  while (*(_WORD *)((char *)&v41 + v26))
                  {
                    v26 += 2;
                    if (v26 == 72)
                    {
                      v25 = 2;
                      goto LABEL_31;
                    }
                  }
                }
                v25 = 1;
LABEL_31:
                *(_DWORD *)(a1 + 5612) = v25;
                v27 = (_DWORD *)(v22 + v24);
                v28 = v22 + v24 + 12;
                if (v28 <= v11)
                {
                  *(_DWORD *)(a1 + 5616) = *v27;
                  *(_DWORD *)(a1 + 5620) = v27[1];
                  *(_DWORD *)(a1 + 5624) = v27[2];
                  v30 = __clz(v11 - v28 + 0x20000) ^ 0x1F;
                  if (v11 - v28 >= 0xFFFE0000)
                    v30 = 31;
                  if (v40 >= v30)
                  {
                    v32 = v30 + 1;
                    v33 = (unsigned __int16 *)v47;
                    while (*v33++)
                    {
                      if (!--v32)
                      {
                        v31 = 2;
                        goto LABEL_41;
                      }
                    }
                  }
                  v31 = 1;
LABEL_41:
                  v35 = 0;
                  *(_DWORD *)(a1 + 5604) = v31;
                  while (1)
                  {
                    v36 = *(unsigned int *)(a1 + 5616 + v35);
                    if (!(_DWORD)v36 || v11 - v28 < v36)
                      break;
                    v35 += 4;
                    if (v35 == 12)
                      return v28 - a3;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return -30;
}

unint64_t ZSTD_compressBegin_internal(uint64_t a1, _DWORD *a2, unint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, unint64_t a8, int a9)
{
  unint64_t v13;
  int v14;
  unint64_t result;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  int v42;
  size_t v43;
  int v44;
  int v45;
  int v46;
  size_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[32];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  int v64;
  int v65;

  if (!a6)
  {
    v13 = a3;
    result = ZSTD_resetCCtx_internal(a1, (__int128 *)a7, a8, a3, 0, a9);
    if (result >= 0xFFFFFFFFFFFFFF89)
      return result;
    result = ZSTD_compress_insertDictionary(*(_QWORD *)(a1 + 3072), (uint32x2_t *)(a1 + 3088), a1 + 904, (_QWORD *)(a1 + 560), (_DWORD *)(a1 + 192), a2, v13, a4, a5, *(_WORD **)(a1 + 3368));
    goto LABEL_12;
  }
  v13 = *(_QWORD *)(a6 + 8);
  if (!v13
    || a8 >= 0x20000 && a8 != -1 && 6 * v13 <= a8 && *(_DWORD *)(a6 + 6036)
    || (v14 = *(_DWORD *)(a7 + 68), v14 == 3))
  {
    result = ZSTD_resetCCtx_internal(a1, (__int128 *)a7, a8, *(_QWORD *)(a6 + 8), 0, a9);
    if (result >= 0xFFFFFFFFFFFFFF89)
      return result;
    result = ZSTD_compress_insertDictionary(*(_QWORD *)(a1 + 3072), (uint32x2_t *)(a1 + 3088), a1 + 904, (_QWORD *)(a1 + 560), (_DWORD *)(a1 + 192), *(_DWORD **)a6, *(_QWORD *)(a6 + 8), *(_DWORD *)(a6 + 16), a5, *(_WORD **)(a1 + 3368));
LABEL_12:
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    *(_DWORD *)(a1 + 544) = result;
    *(_QWORD *)(a1 + 552) = v13;
    return 0;
  }
  v18 = *(_DWORD *)(a6 + 220);
  v19 = *(unsigned int *)(a6 + 360);
  if (!v18)
  {
    if (a8 == -1 || attachDictSizeCutoffs[v19] >= a8)
    {
      if (v14 == 2)
        goto LABEL_34;
    }
    else if (v14 != 1)
    {
      goto LABEL_34;
    }
    if (!*(_DWORD *)(a7 + 48))
      goto LABEL_15;
LABEL_34:
    v33 = *(_OWORD *)(a7 + 128);
    v34 = *(_OWORD *)(a7 + 144);
    v35 = *(_OWORD *)(a7 + 96);
    v57 = *(_OWORD *)(a7 + 112);
    v58 = v33;
    v36 = *(_OWORD *)(a7 + 160);
    v59 = v34;
    v60 = v36;
    v37 = *(_OWORD *)(a7 + 64);
    v38 = *(_OWORD *)(a7 + 80);
    v39 = *(_OWORD *)(a7 + 32);
    v53 = *(_OWORD *)(a7 + 48);
    v54 = v37;
    v55 = v38;
    v56 = v35;
    v40 = *(_OWORD *)(a7 + 16);
    *(_OWORD *)v51 = *(_OWORD *)a7;
    *(_OWORD *)&v51[16] = v40;
    v41 = *(_DWORD *)&v51[4];
    *(_OWORD *)&v51[4] = *(_OWORD *)(a6 + 336);
    *(_OWORD *)&v51[16] = *(_OWORD *)(a6 + 348);
    v52 = v39;
    *(_DWORD *)&v51[4] = v41;
    LODWORD(v59) = *(_DWORD *)(a6 + 6040);
    result = ZSTD_resetCCtx_internal(a1, (__int128 *)v51, a8, 0, 1, a9);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(a1 + 576);
    v42 = *(_DWORD *)(a6 + 360);
    if (v42 == 1 || (v42 - 3) <= 2 && *(_DWORD *)(a6 + 6040) == 1)
      v43 = 0;
    else
      v43 = 4 << *(_DWORD *)(a6 + 340);
    v44 = *(_DWORD *)(a6 + 344);
    memcpy(*(void **)(a1 + 3184), *(const void **)(a6 + 192), 4 << v44);
    v45 = *(_DWORD *)(a1 + 220);
    if (v45 != 1 && ((v45 - 3) > 2 || *(_DWORD *)(a1 + 336) != 1))
      memcpy(*(void **)(a1 + 3200), *(const void **)(a6 + 208), v43);
    if ((*(_DWORD *)(a6 + 360) - 6) >= 0xFFFFFFFD && *(_DWORD *)(a6 + 6040) == 1)
      memcpy(*(void **)(a1 + 3144), *(const void **)(a6 + 152), 2 << v44);
    v46 = *(_DWORD *)(a1 + 3136);
    if (v46)
      v47 = 4 << v46;
    else
      v47 = 0;
    bzero(*(void **)(a1 + 3192), v47);
    v48 = *(_QWORD *)(a1 + 584);
    if (*(_QWORD *)(a1 + 592) < v48)
      *(_QWORD *)(a1 + 592) = v48;
    v49 = *(_OWORD *)(a6 + 96);
    v50 = *(_OWORD *)(a6 + 112);
    *(_QWORD *)(a1 + 3120) = *(_QWORD *)(a6 + 128);
    *(_OWORD *)(a1 + 3088) = v49;
    *(_OWORD *)(a1 + 3104) = v50;
    *(_QWORD *)(a1 + 3128) = *(_QWORD *)(a6 + 136);
    goto LABEL_53;
  }
LABEL_15:
  v20 = *(_OWORD *)(a7 + 144);
  v58 = *(_OWORD *)(a7 + 128);
  v59 = v20;
  v60 = *(_OWORD *)(a7 + 160);
  v21 = *(_OWORD *)(a7 + 80);
  v54 = *(_OWORD *)(a7 + 64);
  v55 = v21;
  v22 = *(_OWORD *)(a7 + 112);
  v56 = *(_OWORD *)(a7 + 96);
  v57 = v22;
  v23 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)v51 = *(_OWORD *)a7;
  *(_OWORD *)&v51[16] = v23;
  v24 = *(_OWORD *)(a7 + 48);
  v52 = *(_OWORD *)(a7 + 32);
  v53 = v24;
  v25 = a6 + 96;
  v26 = *(_DWORD *)&v51[4];
  v27 = *(_DWORD *)(a6 + 344) - 2;
  if (v27 <= 6)
    v27 = 6;
  if ((v19 - 3) >= 3 || v18 == 0)
    v29 = *(_DWORD *)(a6 + 344);
  else
    v29 = v27;
  v61 = *(_QWORD *)(a6 + 336);
  v62 = v29;
  v63 = *(_QWORD *)(a6 + 348);
  v64 = *(_DWORD *)(a6 + 356);
  v65 = v19;
  ZSTD_adjustCParams_internal((uint64_t)&v61, a8, v13, 1, (uint64_t)&v51[4]);
  v30 = *(_DWORD *)(a6 + 6040);
  *(_DWORD *)&v51[4] = v26;
  LODWORD(v59) = v30;
  result = ZSTD_resetCCtx_internal(a1, (__int128 *)v51, a8, 0, 0, a9);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v31 = *(_QWORD *)(a6 + 96) - *(_QWORD *)(a6 + 104);
    if (*(_DWORD *)(a6 + 120) != (_DWORD)v31)
    {
      *(_QWORD *)(a1 + 3320) = v25;
      v32 = *(_DWORD *)(a1 + 3112);
      if (v32 < v31)
      {
        *(_QWORD *)(a1 + 3088) = *(_QWORD *)(a1 + 3096) + v31;
        *(_DWORD *)(a1 + 3116) = v31;
        *(_DWORD *)(a1 + 3112) = v31;
        v32 = v31;
      }
      *(_DWORD *)(a1 + 3128) = v32;
    }
LABEL_53:
    *(_DWORD *)(a1 + 544) = *(_DWORD *)(a6 + 6032);
    *(_QWORD *)(a1 + 552) = *(_QWORD *)(a6 + 8);
    memcpy(*(void **)(a1 + 3072), (const void *)(a6 + 376), 0x1600uLL);
    return 0;
  }
  return result;
}

unint64_t ZSTD_compressEnd(uint64_t a1, char *a2, unint64_t a3, char *a4, size_t a5)
{
  unint64_t result;
  int v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  uint64_t v16;

  result = ZSTD_compressContinue_internal(a1, a2, a3, a4, a5, 1, 1);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v9 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1)
    return -60;
  v10 = result;
  v11 = &a2[result];
  v12 = a3 - result;
  if (v9 == 3)
  {
    v14 = v11;
  }
  else
  {
    if (v9 == 1)
    {
      result = ZSTD_writeFrameHeader(v11, v12, (_DWORD *)(a1 + 192), 0, 0);
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      v12 -= result;
      v13 = &v11[result];
      *(_DWORD *)a1 = 2;
    }
    else
    {
      v13 = v11;
    }
    if (v12 < 4)
      return -70;
    *(_DWORD *)v13 = 1;
    v14 = v13 + 3;
    v12 -= 3;
  }
  if (!*(_DWORD *)(a1 + 228))
    goto LABEL_15;
  v15 = ZSTD_XXH64_digest((_QWORD *)(a1 + 656));
  if (v12 < 4)
    return -70;
  *(_DWORD *)v14 = v15;
  v14 += 4;
LABEL_15:
  *(_DWORD *)a1 = 0;
  result = v14 - v11;
  if ((unint64_t)(v14 - v11) <= 0xFFFFFFFFFFFFFF88)
  {
    v16 = *(_QWORD *)(a1 + 632);
    if (v16 && v16 != *(_QWORD *)(a1 + 640) + 1)
      return -72;
    else
      result += v10;
  }
  return result;
}

unint64_t ZSTD_sizeof_matchState(int *a1, int a2, int a3, int a4)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1[6];
  if ((!a3 || a4) && (v4 == 1 || a2 == 1 && v4 - 3 < 3))
    v5 = 0;
  else
    v5 = 4 << a1[1];
  v6 = a1[2];
  if (a4 && a1[4] == 3)
  {
    v7 = *a1;
    if (*a1 >= 0x11)
      v7 = 17;
  }
  else
  {
    v7 = 0;
  }
  v8 = v4 >= 6;
  v9 = v4 - 6;
  v10 = v9 == 0 || !v8 || a4 == 0;
  v11 = 64;
  if (!v10)
    v11 = 149248;
  v12 = v9 >= 0xFFFFFFFD && a2 == 1;
  v13 = ((2 << v6) + 63) & 0xFFFFFFFFFFFFFFC0;
  v14 = 4 << v6;
  if (!v12)
    v13 = 0;
  if (v7)
    v15 = 4 << v7;
  else
    v15 = 0;
  return v11 + v5 + v14 + v13 + v15;
}

unint64_t ZSTD_createCDict_advanced(const void *a1, unint64_t a2, int a3, int a4, _OWORD *a5, __int128 *a6)
{
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  memset(v9, 0, sizeof(v9));
  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  *(_OWORD *)((char *)v9 + 4) = *a5;
  v9[1] = *(_OWORD *)((char *)a5 + 12);
  v10 = 0u;
  LODWORD(v10) = 1;
  v18 = *a6;
  v19 = *((_QWORD *)a6 + 2);
  v7 = *a6;
  v8 = *((_QWORD *)a6 + 2);
  return ZSTD_createCDict_advanced2(a1, a2, a3, a4, v9, (uint64_t *)&v7);
}

unint64_t ZSTD_createCDict_advanced2(const void *a1, unint64_t a2, int a3, int a4, _OWORD *a5, uint64_t *a6)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  int v19;
  int v20;
  int v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x8_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  unint64_t matched;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _BYTE v34[32];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[32];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v6 = a5[9];
  v51 = a5[8];
  v52 = v6;
  v53 = a5[10];
  v7 = a5[5];
  v47 = a5[4];
  v48 = v7;
  v8 = a5[7];
  v49 = a5[6];
  v50 = v8;
  v9 = a5[1];
  *(_OWORD *)v44 = *a5;
  *(_OWORD *)&v44[16] = v9;
  v10 = a5[3];
  v11 = *a6;
  v12 = a6[1];
  v13 = *a6 == 0;
  v45 = a5[2];
  v46 = v10;
  if (((v13 ^ (v12 == 0)) & 1) != 0)
    return 0;
  v19 = DWORD2(v50);
  if (DWORD2(v50))
  {
    memset(v34, 0, 28);
    ZSTD_getCParams_internal(SHIDWORD(v45), 0, a2, 2, (uint64_t)v34);
    v20 = *(_DWORD *)&v34[24];
    if ((*(_DWORD *)&v34[24] - 3) >= 3)
      v21 = *(_DWORD *)&v34[8];
    else
      v21 = *(_DWORD *)&v34[8] + 2;
    v22.i64[0] = *(_QWORD *)v34;
    v22.i32[2] = v21;
    v22.i32[3] = *(_DWORD *)((unint64_t)v34 | 0xC);
    v23 = vbslq_s8((int8x16_t)vceqzq_s32(*(int32x4_t *)&v44[4]), v22, *(int8x16_t *)&v44[4]);
    v24 = vbsl_s8((int8x8_t)vceqz_s32(*(int32x2_t *)&v44[20]), *(int8x8_t *)&v34[16], *(int8x8_t *)&v44[20]);
    if (*(_DWORD *)&v44[28])
      v20 = *(_DWORD *)&v44[28];
  }
  else
  {
    ZSTD_getCParamsFromCCtxParams(v44, -1, a2, 2, (uint64_t)v34);
    v23 = *(int8x16_t *)v34;
    v24 = *(int8x8_t *)&v34[16];
    v20 = *(_DWORD *)&v34[24];
  }
  if ((v20 - 6) < 0xFFFFFFFD
    || (v23.i32[2] > (unsigned __int32)v23.i32[1] ? (v25 = v23.i32[1] >= 0x19u) : (v25 = 1), v25))
  {
    DWORD2(v50) = 0;
    ZSTD_getCParamsFromCCtxParams(v44, -1, a2, 2, (uint64_t)v34);
    v19 = 0;
    v23 = *(int8x16_t *)v34;
    v24 = *(int8x8_t *)&v34[16];
    v20 = *(_DWORD *)&v34[24];
  }
  *(int8x16_t *)&v44[4] = v23;
  *(int8x8_t *)&v44[20] = v24;
  *(_DWORD *)&v44[28] = v20;
  v26 = v52;
  if (!(_DWORD)v52)
  {
    if ((v20 - 6) >= 0xFFFFFFFD)
    {
      if (v23.i32[0] > 0xEu)
        v26 = 1;
      else
        v26 = 2;
    }
    else
    {
      v26 = 2;
    }
  }
  LODWORD(v52) = v26;
  *(_OWORD *)v34 = *(_OWORD *)&v44[4];
  *(_OWORD *)&v34[12] = *(_OWORD *)&v44[16];
  v27 = a6[2];
  matched = ZSTD_sizeof_matchState((int *)v34, v26, v19, 0);
  v29 = ((a2 + 7) & 0xFFFFFFFFFFFFFFF8) + 14752;
  if (a3 == 1)
    v29 = 14752;
  v30 = matched + v29;
  v54 = v11;
  v55 = v12;
  v56 = v27;
  v31 = ZSTD_customMalloc(matched + v29, (uint64_t)&v54);
  v32 = (unint64_t)v31;
  if (v31)
  {
    v31[4] = v31;
    v31[5] = (char *)v31 + v30;
    v31[6] = v31 + 756;
    v31[7] = v31 + 756;
    v31[8] = v31 + 756;
    v31[9] = (char *)v31 + v30;
    v31[10] = 0;
    v31[11] = 0;
    v31[751] = v11;
    v31[752] = v12;
    v31[753] = v27;
    *((_DWORD *)v31 + 1509) = 0;
    *((_DWORD *)v31 + 1510) = v26;
  }
  else
  {
    v54 = v11;
    v55 = v12;
    v56 = v27;
    ZSTD_customFree(0, (uint64_t)&v54);
  }
  v41 = v51;
  v42 = v52;
  v43 = v53;
  v37 = v47;
  v38 = v48;
  v39 = v49;
  v40 = v50;
  *(_OWORD *)v34 = *(_OWORD *)v44;
  *(_OWORD *)&v34[16] = *(_OWORD *)&v44[16];
  v35 = v45;
  v36 = v46;
  if (ZSTD_initCDict_internal(v32, a1, a2, a3, a4, (uint64_t)v34) >= 0xFFFFFFFFFFFFFF89)
  {
    ZSTD_freeCDict(v32);
    return 0;
  }
  return v32;
}

unint64_t ZSTD_initCDict_internal(uint64_t a1, const void *a2, size_t __n, int a4, int a5, uint64_t a6)
{
  uint32x2_t *v10;
  __int128 v11;
  void *v12;
  size_t v13;
  size_t v14;
  unint64_t result;
  uint64_t v16;
  uint64_t v17;

  v10 = (uint32x2_t *)(a1 + 96);
  v11 = *(_OWORD *)(a6 + 4);
  *(_OWORD *)(a1 + 348) = *(_OWORD *)(a6 + 16);
  *(_OWORD *)(a1 + 336) = v11;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a6 + 120);
  if (__n && a2 && a4 != 1)
  {
    if (*(_DWORD *)(a1 + 88)
      || (v13 = *(_QWORD *)(a1 + 40),
          v12 = *(void **)(a1 + 48),
          v14 = (size_t)v12 + ((__n + 7) & 0xFFFFFFFFFFFFFFF8),
          v14 > v13))
    {
      *(_BYTE *)(a1 + 80) = 1;
      return -64;
    }
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    if (!v12)
      return -64;
    *(_QWORD *)a1 = v12;
    memcpy(v12, a2, __n);
  }
  else
  {
    *(_QWORD *)a1 = a2;
  }
  *(_QWORD *)(a1 + 8) = __n;
  *(_DWORD *)(a1 + 16) = a5;
  if (*(_DWORD *)(a1 + 88)
    || (v16 = *(_QWORD *)(a1 + 48), v17 = v16 + 8704, (unint64_t)(v16 + 8704) > *(_QWORD *)(a1 + 40)))
  {
    v16 = 0;
    *(_BYTE *)(a1 + 80) = 1;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v17;
    *(_QWORD *)(a1 + 56) = v17;
    *(_QWORD *)(a1 + 64) = v17;
  }
  *(_QWORD *)(a1 + 24) = v16;
  *(_QWORD *)(a1 + 5992) = 0x400000001;
  *(_DWORD *)(a1 + 6000) = 8;
  *(_DWORD *)(a1 + 2432) = 0;
  *(_DWORD *)(a1 + 5980) = 0;
  *(_QWORD *)(a1 + 5984) = 0;
  result = ZSTD_reset_matchState((uint64_t)v10, a1 + 32, (_DWORD *)(a6 + 4), *(_DWORD *)(a6 + 144), 0, 1, 0);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    *(_DWORD *)(a6 + 44) = 3;
    *(_DWORD *)(a6 + 32) = 1;
    result = ZSTD_compress_insertDictionary(a1 + 376, v10, 0, (_QWORD *)(a1 + 32), (_DWORD *)a6, *(_DWORD **)a1, *(_QWORD *)(a1 + 8), a5, 1, *(_WORD **)(a1 + 24));
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      *(_DWORD *)(a1 + 6032) = result;
      return 0;
    }
  }
  return result;
}

uint64_t ZSTD_freeCDict(unint64_t a1)
{
  unint64_t v2;
  void *v3;
  _OWORD *v4;
  unint64_t v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;

  if (a1)
  {
    v2 = a1 + 6008;
    v8 = *(_QWORD *)(a1 + 6024);
    v7 = *(_OWORD *)(a1 + 6008);
    v4 = (_OWORD *)(a1 + 32);
    v3 = *(void **)(a1 + 32);
    if ((unint64_t)v3 > a1)
    {
      v4[2] = 0u;
      v4[3] = 0u;
      *v4 = 0u;
      v4[1] = 0u;
      v9 = *(_OWORD *)v2;
      v10 = *(_QWORD *)(v2 + 16);
      ZSTD_customFree(v3, (uint64_t)&v9);
LABEL_5:
      v9 = v7;
      v10 = v8;
      ZSTD_customFree((void *)a1, (uint64_t)&v9);
      return 0;
    }
    v5 = *(_QWORD *)(a1 + 40);
    v4[2] = 0u;
    v4[3] = 0u;
    *v4 = 0u;
    v4[1] = 0u;
    v9 = *(_OWORD *)v2;
    v10 = *(_QWORD *)(v2 + 16);
    ZSTD_customFree(v3, (uint64_t)&v9);
    if (v5 < a1)
      goto LABEL_5;
  }
  return 0;
}

unint64_t ZSTD_createCDict(const void *a1, unint64_t a2, int a3)
{
  unint64_t result;
  int v7;
  _OWORD v8[2];
  int v9;
  _BYTE v10[28];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  memset(v8, 0, 28);
  ZSTD_getCParams_internal(a3, -1, a2, 2, (uint64_t)v8);
  v9 = 0;
  v18 = 0;
  v19 = 0;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  *(_OWORD *)v10 = v8[0];
  *(_OWORD *)&v10[12] = *(_OWORD *)((char *)v8 + 12);
  v11 = 0u;
  LODWORD(v11) = 1;
  v20 = 0;
  v21 = 0;
  result = ZSTD_createCDict_advanced2(a1, a2, 0, 0, &v9, ZSTD_defaultCMem_0);
  if (result)
  {
    if (a3)
      v7 = a3;
    else
      v7 = 3;
    *(_DWORD *)(result + 6036) = v7;
  }
  return result;
}

unint64_t ZSTD_compressBegin_usingCDict_internal(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  unint64_t v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  __int128 v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE v25[20];
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  if (!a2)
    return -32;
  if (a5 < 0x20000 || a5 == -1 || (v16 = *(_QWORD *)(a2 + 8), 6 * v16 > a5) || (v12 = *(_DWORD *)(a2 + 6036)) == 0)
  {
    v10 = *(_DWORD *)(a2 + 336);
    v23 = *(_DWORD *)(a2 + 356);
    v22 = *(_OWORD *)(a2 + 340);
    v11 = *(_DWORD *)(a2 + 360);
    v12 = *(_DWORD *)(a2 + 6036);
  }
  else
  {
    ZSTD_getCParams_internal(*(_DWORD *)(a2 + 6036), a5, v16, 3, (uint64_t)&v24);
    v10 = v24;
    v22 = *(_OWORD *)v25;
    v11 = v26;
    v23 = *(_DWORD *)&v25[16];
  }
  v24 = 0;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  *(_DWORD *)v25 = v10;
  *(_OWORD *)&v25[4] = v22;
  v26 = v23;
  v27 = v11;
  v28 = a3;
  v29 = a4;
  v30 = v12;
  if (v11 - 6 > 0xFFFFFFFC)
  {
    if (v10 > 0xE)
      v17 = 1;
    else
      v17 = 2;
    v13 = 2;
    LODWORD(v37) = v17;
  }
  else
  {
    v13 = 2;
    LODWORD(v37) = 2;
    if (v11 > 6)
    {
      if (v10 > 0x10)
        v14 = 1;
      else
        v14 = 2;
      HIDWORD(v36) = v14;
      if (v10 > 0x1A)
        v13 = 1;
      else
        v13 = 2;
      goto LABEL_22;
    }
  }
  HIDWORD(v36) = 2;
LABEL_22:
  LODWORD(v34) = v13;
  if (a5 != -1)
  {
    v18 = 0x80000;
    if (a5 < 0x80000)
      v18 = a5;
    v19 = v18 > 1;
    v20 = __clz(v18 - 1) ^ 0x1F;
    if (v19)
      v21 = v20 + 1;
    else
      v21 = 1;
    if (v10 <= v21)
      v10 = v21;
    *(_DWORD *)v25 = v10;
  }
  return ZSTD_compressBegin_internal(a1, 0, 0, 0, 0, a2, (uint64_t)&v24, a5, 0);
}

unint64_t ZSTD_compressBegin_usingCDict(uint64_t a1, uint64_t a2)
{
  return ZSTD_compressBegin_usingCDict_internal(a1, a2, 0, 0, 0xFFFFFFFFFFFFFFFFLL);
}

unint64_t ZSTD_compress_usingCDict_internal(uint64_t a1, char *a2, unint64_t a3, char *a4, unint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  unint64_t result;

  result = ZSTD_compressBegin_usingCDict_internal(a1, a6, a7, a8, a5);
  if (result <= 0xFFFFFFFFFFFFFF88)
    return ZSTD_compressEnd(a1, a2, a3, a4, a5);
  return result;
}

unint64_t ZSTD_compress_usingCDict(uint64_t a1, char *a2, unint64_t a3, char *a4, unint64_t a5, uint64_t a6)
{
  return ZSTD_compress_usingCDict_internal(a1, a2, a3, a4, a5, a6, 1, 0);
}

void ZSTD_initCStream(uint64_t a1, int a2)
{
  unint64_t v4;

  *(_DWORD *)(a1 + 3456) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  ZSTD_CCtx_refCDict(a1, 0);
  if (v4 <= 0xFFFFFFFFFFFFFF88)
  {
    if (*(_DWORD *)(a1 + 3456))
      *(_DWORD *)(a1 + 4) = 1;
    if (a2 >= -131072)
    {
      if (a2 <= 22)
      {
        if (!a2)
          a2 = 3;
      }
      else
      {
        a2 = 22;
      }
    }
    else
    {
      a2 = -131072;
    }
    *(_DWORD *)(a1 + 60) = a2;
  }
}

unint64_t ZSTD_compressStream2(uint64_t a1, uint64_t *a2, __int128 *a3, unsigned int a4)
{
  unint64_t result;
  unint64_t v6;
  uint64_t v7;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  int v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  BOOL v28;
  _BOOL4 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  size_t v36;
  __int128 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;

  if (a2[2] > (unint64_t)a2[1])
    return -70;
  v7 = (uint64_t)a3 + 8;
  v6 = *((_QWORD *)a3 + 1);
  if (*(_QWORD *)(v7 + 8) > v6)
    return -72;
  if (a4 > 2)
    return -42;
  if (*(_DWORD *)(a1 + 3456))
  {
    v11 = *(_DWORD *)(a1 + 316);
  }
  else
  {
    result = ZSTD_CCtx_init_compressStream2(a1, a4, v6);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    v11 = *(_DWORD *)(a1 + 316);
    if (v11 == 1)
    {
      v37 = *a3;
      *(_QWORD *)(a1 + 3480) = *((_QWORD *)a3 + 2);
      *(_OWORD *)(a1 + 3464) = v37;
    }
    if (*(_DWORD *)(a1 + 320) == 1)
      *(_QWORD *)(a1 + 3488) = a2[1] - a2[2];
  }
  if (v11 != 1)
    goto LABEL_14;
  if (*(_QWORD *)(a1 + 3464) != *(_QWORD *)a3 || *(_QWORD *)(a1 + 3480) != *((_QWORD *)a3 + 2))
    return -105;
  result = -105;
  if (a4 == 2 && *(_QWORD *)(a1 + 3472) == *((_QWORD *)a3 + 1))
  {
LABEL_14:
    v12 = a2[1];
    v13 = a2[2];
    if (*(_DWORD *)(a1 + 320) == 1 && *(_QWORD *)(a1 + 3488) != v12 - v13)
      return -104;
    v43 = *(_QWORD *)a3;
    v44 = (char *)(*(_QWORD *)a3 + *((_QWORD *)a3 + 1));
    v14 = (char *)(*(_QWORD *)a3 + *((_QWORD *)a3 + 2));
    v45 = *a2 + v12;
    v42 = *a2;
    v15 = (char *)(*a2 + v13);
    while (2)
    {
      v16 = *(_DWORD *)(a1 + 3456);
      while (1)
      {
        if (!v16)
          return -62;
        if (v16 == 1)
          break;
        if (v16 == 2)
        {
          result = *(_QWORD *)(a1 + 3440);
          v17 = *(_QWORD *)(a1 + 3448);
          goto LABEL_71;
        }
      }
      if (a4 == 2)
      {
        v18 = v45 - (_QWORD)v15;
        v19 = (unint64_t)(0x20000 - (v44 - v14)) >> 11;
        if ((unint64_t)(v44 - v14) >= 0x20000)
          v19 = 0;
        if ((v18 >= v44 - v14 + ((unint64_t)(v44 - v14) >> 8) + v19 || *(_DWORD *)(a1 + 320) == 1)
          && !*(_QWORD *)(a1 + 3408))
        {
          result = ZSTD_compressEnd(a1, v15, v18, v14, v44 - v14);
          if (result > 0xFFFFFFFFFFFFFF88)
            return result;
          v15 += result;
          *(_DWORD *)(a1 + 3460) = 1;
          v14 = v44;
          goto LABEL_97;
        }
      }
      if (*(_DWORD *)(a1 + 316))
      {
        v20 = v45 - (_QWORD)v15;
        break;
      }
      v21 = *(_QWORD *)(a1 + 3408);
      if (*(_QWORD *)(a1 + 3416) - v21 >= (unint64_t)(v44 - v14))
        v22 = v44 - v14;
      else
        v22 = *(_QWORD *)(a1 + 3416) - v21;
      if (v22)
      {
        memcpy((void *)(*(_QWORD *)(a1 + 3384) + v21), v14, v22);
        v21 = *(_QWORD *)(a1 + 3408);
      }
      v23 = v21 + v22;
      *(_QWORD *)(a1 + 3408) = v23;
      v14 += v22;
      if (a4 == 1)
      {
        if (v23 == *(_QWORD *)(a1 + 3400))
        {
LABEL_90:
          v38 = *(_DWORD *)(a1 + 3460);
          *((_QWORD *)a3 + 2) = &v14[-v43];
          a2[2] = (uint64_t)&v15[-v42];
          if (v38)
            goto LABEL_98;
          v39 = *(_QWORD *)(a1 + 3416);
          v40 = *(_QWORD *)(a1 + 3408);
          result = v39 - v40;
          if (v39 == v40)
            result = *(_QWORD *)(a1 + 624);
          if (result <= 0xFFFFFFFFFFFFFF88)
            goto LABEL_98;
          return result;
        }
      }
      else if (!a4 && v23 < *(_QWORD *)(a1 + 3416))
      {
        goto LABEL_90;
      }
      v20 = v45 - (_QWORD)v15;
      if (!*(_DWORD *)(a1 + 316))
      {
        v25 = v23 - *(_QWORD *)(a1 + 3400);
        v24 = 1;
LABEL_44:
        v26 = (0x20000 - v25) >> 11;
        if (v25 >= 0x20000)
          v26 = 0;
        if (v20 >= v25 + (v25 >> 8) + v26)
        {
          v27 = v15;
        }
        else
        {
          v27 = v15;
          if (*(_DWORD *)(a1 + 320) != 1)
          {
            v27 = *(char **)(a1 + 3424);
            v20 = *(_QWORD *)(a1 + 3432);
          }
        }
        if (v24)
        {
          v28 = a4 == 2 && v14 == v44;
          v29 = v28;
          v30 = (char *)(*(_QWORD *)(a1 + 3384) + *(_QWORD *)(a1 + 3400));
          if (v28)
            result = ZSTD_compressEnd(a1, v27, v20, v30, v25);
          else
            result = ZSTD_compressContinue_internal(a1, v27, v20, v30, v25, 1, 0);
          if (result > 0xFFFFFFFFFFFFFF88)
            return result;
          *(_DWORD *)(a1 + 3460) = v29;
          v32 = *(_QWORD *)(a1 + 3408);
          v33 = *(_QWORD *)(a1 + 624);
          *(_QWORD *)(a1 + 3416) = v33 + v32;
          if ((unint64_t)(v33 + v32) > *(_QWORD *)(a1 + 3392))
          {
            v32 = 0;
            *(_QWORD *)(a1 + 3408) = 0;
            *(_QWORD *)(a1 + 3416) = v33;
          }
          *(_QWORD *)(a1 + 3400) = v32;
        }
        else
        {
          v31 = &v14[v25];
          v29 = &v14[v25] == v44;
          if (&v14[v25] == v44)
            result = ZSTD_compressEnd(a1, v27, v20, v14, v25);
          else
            result = ZSTD_compressContinue_internal(a1, v27, v20, v14, v25, 1, 0);
          if (result > 0xFFFFFFFFFFFFFF88)
            return result;
          *(_DWORD *)(a1 + 3460) = v29;
          v14 = v31;
        }
        if (v27 == v15)
        {
          v15 += result;
          if (!v29)
            continue;
          goto LABEL_97;
        }
        v17 = 0;
        *(_QWORD *)(a1 + 3440) = result;
        *(_QWORD *)(a1 + 3448) = 0;
        *(_DWORD *)(a1 + 3456) = 2;
LABEL_71:
        v34 = result - v17;
        v35 = v45 - (_QWORD)v15;
        if (v45 - (uint64_t)v15 >= result - v17)
          v36 = result - v17;
        else
          v36 = v45 - (_QWORD)v15;
        if (v36)
        {
          memcpy(v15, (const void *)(*(_QWORD *)(a1 + 3424) + v17), v36);
          v17 = *(_QWORD *)(a1 + 3448);
        }
        v15 += v36;
        *(_QWORD *)(a1 + 3448) = v17 + v36;
        if (v34 <= v35)
        {
          *(_QWORD *)(a1 + 3440) = 0;
          *(_QWORD *)(a1 + 3448) = 0;
          if (!*(_DWORD *)(a1 + 3460))
          {
            *(_DWORD *)(a1 + 3456) = 1;
            continue;
          }
LABEL_97:
          *(_DWORD *)(a1 + 3456) = 0;
          *(_QWORD *)(a1 + 632) = 0;
          *((_QWORD *)a3 + 2) = &v14[-v43];
          a2[2] = (uint64_t)&v15[-v42];
LABEL_98:
          if (*(_DWORD *)(a1 + 316) == 1)
          {
            v41 = *a3;
            *(_QWORD *)(a1 + 3480) = *((_QWORD *)a3 + 2);
            *(_OWORD *)(a1 + 3464) = v41;
          }
          if (*(_DWORD *)(a1 + 320) == 1)
            *(_QWORD *)(a1 + 3488) = a2[1] - a2[2];
          return *(_QWORD *)(a1 + 3440) - *(_QWORD *)(a1 + 3448);
        }
        goto LABEL_90;
      }
      break;
    }
    v24 = 0;
    if ((unint64_t)(v44 - v14) >= *(_QWORD *)(a1 + 624))
      v25 = *(_QWORD *)(a1 + 624);
    else
      v25 = v44 - v14;
    goto LABEL_44;
  }
  return result;
}

unint64_t ZSTD_CCtx_init_compressStream2(uint64_t a1, int a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _DWORD *v11;
  unint64_t v12;
  int v13;
  const void *v14;
  unint64_t v15;
  int v16;
  unint64_t CDict_advanced2;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t result;
  uint64_t v26;
  _BYTE v27[28];
  _BYTE v28[32];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v6 = *(_OWORD *)(a1 + 160);
  v35 = *(_OWORD *)(a1 + 144);
  v36 = v6;
  v37 = *(_OWORD *)(a1 + 176);
  v7 = *(_OWORD *)(a1 + 96);
  v31 = *(_OWORD *)(a1 + 80);
  v32 = v7;
  v8 = *(_OWORD *)(a1 + 128);
  v33 = *(_OWORD *)(a1 + 112);
  v34 = v8;
  v9 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)v28 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v28[16] = v9;
  v10 = *(_OWORD *)(a1 + 64);
  v29 = *(_OWORD *)(a1 + 48);
  v30 = v10;
  v11 = *(_DWORD **)(a1 + 3544);
  v12 = *(_QWORD *)(a1 + 3552);
  v13 = *(_DWORD *)(a1 + 3560);
  v14 = *(const void **)(a1 + 3504);
  if (v14 && !*(_QWORD *)(a1 + 3528))
  {
    v15 = *(_QWORD *)(a1 + 3512);
    v16 = *(_DWORD *)(a1 + 3520);
    *(_OWORD *)v27 = *(_OWORD *)(a1 + 744);
    *(_QWORD *)&v27[16] = *(_QWORD *)(a1 + 760);
    CDict_advanced2 = ZSTD_createCDict_advanced2(v14, v15, 1, v16, (_OWORD *)(a1 + 16), (uint64_t *)v27);
    *(_QWORD *)(a1 + 3528) = CDict_advanced2;
    if (!CDict_advanced2)
      return -64;
    *(_QWORD *)(a1 + 3536) = CDict_advanced2;
  }
  *(_QWORD *)(a1 + 3544) = 0;
  *(_QWORD *)(a1 + 3552) = 0;
  *(_QWORD *)(a1 + 3560) = 0;
  v18 = *(_QWORD *)(a1 + 3536);
  if (v18 && !*(_QWORD *)(a1 + 3528))
    HIDWORD(v29) = *(_DWORD *)(v18 + 6036);
  if (a2 == 2)
    *(_QWORD *)(a1 + 632) = a3 + 1;
  if (v11)
  {
    v19 = *(_QWORD *)(a1 + 632) - 1;
    v20 = v12;
    if (!v18)
      goto LABEL_24;
  }
  else
  {
    if (!v18)
    {
      v20 = 0;
      v19 = *(_QWORD *)(a1 + 632) - 1;
      goto LABEL_24;
    }
    v20 = *(_QWORD *)(v18 + 8);
    v19 = *(_QWORD *)(a1 + 632) - 1;
  }
  if (!*(_DWORD *)(v18 + 220))
  {
    if (v19 == -1 || attachDictSizeCutoffs[*(unsigned int *)(v18 + 360)] >= v19)
    {
      if (DWORD1(v31) == 2)
        goto LABEL_24;
    }
    else if (DWORD1(v31) != 1)
    {
      goto LABEL_24;
    }
    if (!(_DWORD)v30)
      goto LABEL_16;
LABEL_24:
    v21 = 0;
    goto LABEL_25;
  }
LABEL_16:
  v21 = 1;
LABEL_25:
  ZSTD_getCParamsFromCCtxParams(v28, v19, v20, v21, (uint64_t)v27);
  *(_OWORD *)&v28[4] = *(_OWORD *)v27;
  *(_OWORD *)&v28[16] = *(_OWORD *)&v27[12];
  v22 = HIDWORD(v35);
  if (!HIDWORD(v35))
  {
    if (*(_DWORD *)&v28[28] < 7u)
    {
      v22 = 2;
    }
    else if (*(_DWORD *)&v28[4] > 0x10u)
    {
      v22 = 1;
    }
    else
    {
      v22 = 2;
    }
  }
  HIDWORD(v35) = v22;
  v23 = v33;
  if (!(_DWORD)v33)
  {
    if (*(_DWORD *)&v28[28] < 7u)
    {
      v23 = 2;
    }
    else if (*(_DWORD *)&v28[4] > 0x1Au)
    {
      v23 = 1;
    }
    else
    {
      v23 = 2;
    }
  }
  LODWORD(v33) = v23;
  v24 = v36;
  if (!(_DWORD)v36)
  {
    if ((*(_DWORD *)&v28[28] - 6) >= 0xFFFFFFFD)
    {
      if (*(_DWORD *)&v28[4] > 0xEu)
        v24 = 1;
      else
        v24 = 2;
    }
    else
    {
      v24 = 2;
    }
  }
  LODWORD(v36) = v24;
  result = ZSTD_compressBegin_internal(a1, v11, v12, v13, 0, v18, (uint64_t)v28, v19, 1);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    *(_OWORD *)(a1 + 3400) = 0u;
    if (*(_DWORD *)(a1 + 316))
    {
      v26 = 0;
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 624);
      if (v26 == v19)
        ++v26;
    }
    result = 0;
    *(_QWORD *)(a1 + 3416) = v26;
    *(_OWORD *)(a1 + 3440) = 0uLL;
    *(_QWORD *)(a1 + 3456) = 1;
  }
  return result;
}

uint64_t ZSTD_writeFrameHeader(_DWORD *a1, unint64_t a2, _DWORD *a3, unint64_t a4, unsigned int a5)
{
  int v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v5 = a5 > 0xFF;
  if (a5)
    ++v5;
  if ((a5 & 0xFFFF0000) != 0)
    ++v5;
  if (a3[10])
    v6 = 0;
  else
    v6 = v5;
  v7 = a3[1];
  v8 = a3[8];
  if (v8)
    v9 = 1 << v7 >= a4;
  else
    v9 = 0;
  v10 = v9;
  v11 = a4 >> 8 > 0x100;
  if (a4 > 0xFF)
    ++v11;
  if (a4 > 0xFFFFFFFE)
    ++v11;
  if (v8)
    v12 = v11;
  else
    v12 = 0;
  if (v10)
    v13 = 32;
  else
    v13 = 0;
  if (a2 < 0x12)
    return -70;
  v15 = v13 | (v6 + 4 * (a3[9] > 0)) | ((_BYTE)v12 << 6);
  if (*a3)
  {
    v16 = 0;
  }
  else
  {
    *a1 = -47205080;
    v16 = 1;
  }
  v14 = (v16 * 4) | 1;
  LOBYTE(a1[v16]) = v15;
  if ((v10 & 1) == 0)
  {
    *((_BYTE *)a1 + v14) = 8 * v7 - 80;
    v14 = (v16 * 4) | 2;
  }
  switch(v6)
  {
    case 3:
      *(_DWORD *)((char *)a1 + v14) = a5;
      v14 += 4;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v14) = a5;
      v14 += 2;
      break;
    case 1:
      *((_BYTE *)a1 + v14++) = a5;
      break;
  }
  switch(v12)
  {
    case 1:
      *(_WORD *)((char *)a1 + v14) = a4 - 256;
      v14 += 2;
      break;
    case 2:
      *(_DWORD *)((char *)a1 + v14) = a4;
      v14 += 4;
      break;
    case 3:
      *(_QWORD *)((char *)a1 + v14) = a4;
      v14 += 8;
      break;
    default:
      if (v10)
        *((_BYTE *)a1 + v14++) = a4;
      break;
  }
  return v14;
}

double ZSTD_getParams@<D0>(int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double result;
  _BYTE v6[28];

  *(_OWORD *)v6 = 0uLL;
  if (!a2)
    a2 = -1;
  *(_DWORD *)&v6[24] = 0;
  *(_QWORD *)&v6[16] = 0;
  ZSTD_getCParams_internal(a1, a2, a3, 3, (uint64_t)v6);
  *(_QWORD *)(a4 + 32) = 0;
  *(_OWORD *)a4 = *(_OWORD *)v6;
  result = *(double *)&v6[12];
  *(_OWORD *)(a4 + 12) = *(_OWORD *)&v6[12];
  *(_DWORD *)(a4 + 28) = 1;
  return result;
}

uint64_t ZSTD_resetCCtx_internal(uint64_t a1, __int128 *a2, unint64_t a3, unint64_t a4, int a5, int a6)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  size_t matched;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _BOOL4 v32;
  _OWORD *v33;
  _DWORD *v34;
  unsigned int v35;
  _BYTE *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  size_t v49;
  void *v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _BYTE *v58;
  unint64_t v59;
  size_t v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _DWORD *v73;
  uint64_t v74;
  unint64_t MaxNbSeq;
  unsigned int v77;
  __int128 v78;
  uint64_t v79;

  *(_DWORD *)(a1 + 816) = 1;
  v10 = *a2;
  v11 = a2[2];
  *(_OWORD *)(a1 + 208) = a2[1];
  *(_OWORD *)(a1 + 224) = v11;
  *(_OWORD *)(a1 + 192) = v10;
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[6];
  *(_OWORD *)(a1 + 272) = a2[5];
  *(_OWORD *)(a1 + 288) = v14;
  *(_OWORD *)(a1 + 240) = v12;
  *(_OWORD *)(a1 + 256) = v13;
  v15 = a2[7];
  v16 = a2[8];
  v17 = a2[10];
  *(_OWORD *)(a1 + 336) = a2[9];
  *(_OWORD *)(a1 + 352) = v17;
  *(_OWORD *)(a1 + 304) = v15;
  *(_OWORD *)(a1 + 320) = v16;
  v18 = a1 + 288;
  if (*(_DWORD *)(a1 + 288) == 1)
    ZSTD_ldm_adjustParameters((_DWORD *)(a1 + 288), (unsigned int *)(a1 + 196));
  v19 = 1 << *(_DWORD *)(a1 + 196);
  if (v19 >= a3)
    v19 = a3;
  if (!a3)
    v19 = 1;
  if (v19 >= 0x20000)
    v20 = 0x20000;
  else
    v20 = v19;
  if (*(_DWORD *)(a1 + 212) == 3)
    v21 = 3;
  else
    v21 = 4;
  v77 = v21;
  if (a6 == 1)
  {
    v22 = (0x20000 - v20) >> 11;
    if (v19 >= 0x20000)
      v22 = 0;
    v23 = v20 + (v20 >> 8) + v22;
    if (*(_DWORD *)(a1 + 320))
      v24 = 0;
    else
      v24 = v23 + 1;
    v25 = v20 + v19;
    if (*(_DWORD *)(a1 + 316))
      v26 = 0;
    else
      v26 = v25;
  }
  else
  {
    v24 = 0;
    v26 = 0;
  }
  v78 = *(_OWORD *)v18;
  v79 = *(_QWORD *)(v18 + 16);
  v27 = 1;
  MaxNbSeq = ZSTD_ldm_getMaxNbSeq(&v78, v20);
  if (!(a4 >> 29) && *(_QWORD *)(a1 + 3088) - *(_QWORD *)(a1 + 3096) <= 0xDF000000uLL)
    v27 = *(_DWORD *)(a1 + 820) == 0;
  matched = ZSTD_estimateCCtxSize_usingCCtxParams_internal((int *)(a1 + 196), (__int128 *)v18, *(_QWORD *)(a1 + 776) != 0, *(_DWORD *)(a1 + 336), v26, v24, a3);
  if (matched > 0xFFFFFFFFFFFFFF88)
    return matched;
  v29 = *(_QWORD *)(a1 + 776);
  if (!v29)
    ++*(_DWORD *)(a1 + 612);
  v30 = *(_QWORD *)(a1 + 568);
  v31 = *(void **)(a1 + 560);
  v32 = *(_QWORD *)(a1 + 600) - *(_QWORD *)(a1 + 584) >= 3 * matched && *(_DWORD *)(a1 + 612) > 128;
  v33 = (_OWORD *)(a1 + 560);
  if (v30 - (uint64_t)v31 < matched || v32)
  {
    if (!v29)
    {
      v79 = *(_QWORD *)(a1 + 760);
      v78 = *(_OWORD *)(a1 + 744);
      *v33 = 0u;
      *(_OWORD *)(a1 + 576) = 0u;
      *(_OWORD *)(a1 + 592) = 0u;
      *(_OWORD *)(a1 + 608) = 0u;
      ZSTD_customFree(v31, (uint64_t)&v78);
      v78 = *(_OWORD *)(a1 + 744);
      v79 = *(_QWORD *)(a1 + 760);
      v45 = (char *)ZSTD_customMalloc(matched, (uint64_t)&v78);
      if (v45)
      {
        *(_QWORD *)(a1 + 560) = v45;
        v46 = &v45[matched];
        *(_QWORD *)(a1 + 568) = &v45[matched];
        *(_QWORD *)(a1 + 576) = v45;
        *(_QWORD *)(a1 + 592) = v45;
        *(_QWORD *)(a1 + 616) = 0;
        *(_QWORD *)(a1 + 584) = v45;
        *(_QWORD *)(a1 + 600) = &v45[matched];
        *(_BYTE *)(a1 + 608) = 0;
        *(_DWORD *)(a1 + 612) = 0;
        if ((uint64_t)matched > 5631)
        {
          *(_QWORD *)(a1 + 576) = v45 + 5632;
          *(_QWORD *)(a1 + 584) = v45 + 5632;
          *(_QWORD *)(a1 + 592) = v45 + 5632;
          *(_QWORD *)(a1 + 3072) = v45;
          if (matched >> 10 > 0xA)
          {
            *(_QWORD *)(a1 + 576) = v45 + 11264;
            *(_QWORD *)(a1 + 584) = v45 + 11264;
            *(_QWORD *)(a1 + 592) = v45 + 11264;
            *(_QWORD *)(a1 + 3080) = v45 + 5632;
            if (matched >> 3 > 0x9DA)
            {
              *(_QWORD *)(a1 + 576) = v45 + 20184;
              v34 = (_DWORD *)(a1 + 616);
              *(_QWORD *)(a1 + 592) = v45 + 20184;
              v36 = (_BYTE *)(a1 + 608);
              *(_QWORD *)(a1 + 3368) = v45 + 11264;
              *(_QWORD *)(a1 + 584) = v45 + 20184;
              *(_QWORD *)(a1 + 600) = v46;
              *(_BYTE *)(a1 + 608) = 0;
              v27 = 1;
              v33 = (_OWORD *)(a1 + 560);
              goto LABEL_36;
            }
            *(_BYTE *)(a1 + 608) = 1;
            *(_QWORD *)(a1 + 3368) = 0;
          }
          else
          {
            *(_BYTE *)(a1 + 608) = 1;
            *(_QWORD *)(a1 + 3080) = 0;
          }
        }
        else
        {
          *(_BYTE *)(a1 + 608) = 1;
          *(_QWORD *)(a1 + 3072) = 0;
        }
      }
    }
    return -64;
  }
  v34 = (_DWORD *)(a1 + 616);
  v35 = *(_DWORD *)(a1 + 616);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 600) = v30;
  v36 = (_BYTE *)(a1 + 608);
  *(_BYTE *)(a1 + 608) = 0;
  if (v35 >= 2)
    *v34 = 1;
LABEL_36:
  v73 = v34;
  v74 = (uint64_t)v33;
  *(_OWORD *)(a1 + 3328) = *(_OWORD *)(a1 + 196);
  *(_OWORD *)(a1 + 3340) = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a1 + 640) = 0u;
  *(_QWORD *)(a1 + 632) = a3 + 1;
  if (a3 == -1)
    *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 624) = v20;
  ZSTD_XXH64_reset(a1 + 656, 0);
  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  v37 = *(_QWORD *)(a1 + 3072);
  *(_DWORD *)(v37 + 5624) = 8;
  *(_QWORD *)(v37 + 5616) = 0x400000001;
  *(_DWORD *)(v37 + 2056) = 0;
  *(_DWORD *)(v37 + 5604) = 0;
  *(_QWORD *)(v37 + 5608) = 0;
  if (!*(_DWORD *)(a1 + 616))
  {
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(a1 + 576);
    *(_DWORD *)(a1 + 616) = 1;
  }
  v38 = *(_QWORD *)(a1 + 600);
  v39 = v38 - v20 - 32;
  v40 = *(_QWORD *)(a1 + 584);
  if (v39 >= v40)
  {
    if (v39 < *(_QWORD *)(a1 + 592))
      *(_QWORD *)(a1 + 592) = v39;
    *(_QWORD *)(a1 + 600) = v39;
    v41 = v38 - v20 - 32;
  }
  else
  {
    v41 = 0;
    *v36 = 1;
    v39 = v38;
  }
  *(_QWORD *)(a1 + 840) = v41;
  *(_QWORD *)(a1 + 888) = v20;
  *(_DWORD *)(a1 + 3376) = a6;
  *(_QWORD *)(a1 + 3392) = v26;
  v42 = v20 / v77;
  if (!v26)
  {
    v44 = 0;
    goto LABEL_51;
  }
  v43 = v39 - v26;
  if (v39 - v26 < v40)
  {
    v44 = 0;
    *v36 = 1;
LABEL_51:
    v43 = v39;
    goto LABEL_58;
  }
  if (v43 < *(_QWORD *)(a1 + 592))
    *(_QWORD *)(a1 + 592) = v43;
  *(_QWORD *)(a1 + 600) = v43;
  v44 = v39 - v26;
LABEL_58:
  *(_QWORD *)(a1 + 3384) = v44;
  *(_QWORD *)(a1 + 3432) = v24;
  if (!v24)
  {
    v48 = 0;
    goto LABEL_62;
  }
  v47 = v43 - v24;
  if (v43 - v24 < v40)
  {
    v48 = 0;
    *v36 = 1;
LABEL_62:
    v47 = v43;
    goto LABEL_66;
  }
  if (v47 < *(_QWORD *)(a1 + 592))
    *(_QWORD *)(a1 + 592) = v47;
  *(_QWORD *)(a1 + 600) = v47;
  v48 = v43 - v24;
LABEL_66:
  *(_QWORD *)(a1 + 3424) = v48;
  if (*(_DWORD *)(a1 + 288) != 1)
    goto LABEL_74;
  v49 = 1 << (*(_BYTE *)(a1 + 292) - *(_BYTE *)(a1 + 296));
  v50 = (void *)(v47 - v49);
  if (v47 - v49 >= v40)
  {
    if ((unint64_t)v50 < *(_QWORD *)(a1 + 592))
      *(_QWORD *)(a1 + 592) = v50;
    *(_QWORD *)(a1 + 600) = v50;
  }
  else
  {
    v50 = 0;
    *v36 = 1;
  }
  *(_QWORD *)(a1 + 960) = v50;
  bzero(v50, v49);
  if (*(_DWORD *)a1 == 1 && *(_DWORD *)v18 != 1)
  {
LABEL_74:
    *(_QWORD *)(a1 + 3064) = 0;
    *(_OWORD *)(a1 + 3032) = 0u;
    *(_OWORD *)(a1 + 3048) = 0u;
  }
  *(_QWORD *)(a1 + 880) = v42;
  v51 = *(_DWORD *)(a1 + 616);
  if (!v51)
  {
    *(_QWORD *)(a1 + 592) = *(_QWORD *)(a1 + 576);
    v51 = 1;
    *(_DWORD *)(a1 + 616) = 1;
  }
  if (v77 <= v20)
  {
    v53 = *(_QWORD *)(a1 + 600) - v42;
    if (v53 >= *(_QWORD *)(a1 + 584))
    {
      if (v53 < *(_QWORD *)(a1 + 592))
        *(_QWORD *)(a1 + 592) = v53;
      *(_QWORD *)(a1 + 600) = v53;
    }
    else
    {
      v53 = 0;
      *v36 = 1;
    }
    *(_QWORD *)(a1 + 856) = v53;
    v54 = *(_QWORD *)(a1 + 600) - v42;
    if (v54 >= *(_QWORD *)(a1 + 584))
    {
      if (v54 < *(_QWORD *)(a1 + 592))
        *(_QWORD *)(a1 + 592) = v54;
      *(_QWORD *)(a1 + 600) = v54;
    }
    else
    {
      v54 = 0;
      *v36 = 1;
    }
    *(_QWORD *)(a1 + 864) = v54;
    v52 = *(_QWORD *)(a1 + 600) - v42;
    if (v52 >= *(_QWORD *)(a1 + 584))
    {
      if (v52 < *(_QWORD *)(a1 + 592))
        *(_QWORD *)(a1 + 592) = v52;
      *(_QWORD *)(a1 + 600) = v52;
    }
    else
    {
      v52 = 0;
      *v36 = 1;
    }
  }
  else
  {
    v52 = 0;
    *(_QWORD *)(a1 + 864) = 0;
    *(_QWORD *)(a1 + 856) = 0;
  }
  *(_QWORD *)(a1 + 872) = v52;
  if (v51 <= 1)
  {
    v55 = *(_QWORD *)(a1 + 600) + (-*(_DWORD *)(a1 + 600) | 0xFFFFFFFFFFFFFFC0);
    if (v55 < *(_QWORD *)(a1 + 584))
    {
LABEL_105:
      v59 = 0;
      v58 = v36;
      *v36 = 1;
      goto LABEL_110;
    }
    v56 = *(_QWORD *)(a1 + 592);
    if (v55 < v56)
    {
      *(_QWORD *)(a1 + 592) = v55;
      v56 = v55;
    }
    *(_QWORD *)(a1 + 600) = v55;
    v57 = *(_QWORD *)(a1 + 576) + (-*(_BYTE *)(a1 + 576) & 0x3F);
    if (v57 > *(_QWORD *)(a1 + 568))
    {
      v58 = v36;
      v59 = 0;
      goto LABEL_110;
    }
    *(_QWORD *)(a1 + 576) = v57;
    *(_QWORD *)(a1 + 584) = v57;
    if (v56 < v57)
      *(_QWORD *)(a1 + 592) = v57;
    *v73 = 2;
  }
  v59 = (8 * v42 + 63) & 0xFFFFFFFC0;
  if (v59)
  {
    v59 = *(_QWORD *)(a1 + 600) - v59;
    if (v59 < *(_QWORD *)(a1 + 584))
      goto LABEL_105;
    v58 = v36;
    if (v59 < *(_QWORD *)(a1 + 592))
      *(_QWORD *)(a1 + 592) = v59;
    *(_QWORD *)(a1 + 600) = v59;
  }
  else
  {
    v58 = v36;
  }
LABEL_110:
  *(_QWORD *)(a1 + 824) = v59;
  matched = ZSTD_reset_matchState(a1 + 3088, v74, (_DWORD *)(a1 + 196), *(_DWORD *)(a1 + 336), a5, v27, 1);
  if (matched <= 0xFFFFFFFFFFFFFF88)
  {
    if (*(_DWORD *)v18 != 1)
    {
LABEL_151:
      matched = 0;
      *(_DWORD *)(a1 + 820) = 1;
      return matched;
    }
    v60 = 8 << *(_DWORD *)(a1 + 292);
    v61 = *(_DWORD *)(a1 + 616);
    if (v61 <= 1)
    {
      if (!v61)
        *(_QWORD *)(a1 + 592) = *(_QWORD *)(a1 + 576);
      v62 = *(_QWORD *)(a1 + 600) + (-*(_DWORD *)(a1 + 600) | 0xFFFFFFFFFFFFFFC0);
      if (v62 < *(_QWORD *)(a1 + 584))
        goto LABEL_124;
      v63 = *(_QWORD *)(a1 + 592);
      if (v62 < v63)
      {
        *(_QWORD *)(a1 + 592) = v62;
        v63 = v62;
      }
      *(_QWORD *)(a1 + 600) = v62;
      v64 = *(_QWORD *)(a1 + 576) + (-*(_BYTE *)(a1 + 576) & 0x3F);
      if (v64 > *(_QWORD *)(a1 + 568))
        goto LABEL_127;
      *(_QWORD *)(a1 + 576) = v64;
      *(_QWORD *)(a1 + 584) = v64;
      if (v63 < v64)
        *(_QWORD *)(a1 + 592) = v64;
      *v73 = 2;
    }
    v65 = (v60 + 63) & 0xFFFFFFFFFFFFFFC0;
    if (v65)
    {
      v66 = (void *)(*(_QWORD *)(a1 + 600) - v65);
      if ((unint64_t)v66 < *(_QWORD *)(a1 + 584))
      {
LABEL_124:
        v66 = 0;
        *v58 = 1;
        goto LABEL_133;
      }
      if ((unint64_t)v66 < *(_QWORD *)(a1 + 592))
        *(_QWORD *)(a1 + 592) = v66;
      *(_QWORD *)(a1 + 600) = v66;
LABEL_133:
      *(_QWORD *)(a1 + 944) = v66;
      bzero(v66, v60);
      v67 = *(_DWORD *)(a1 + 616);
      if (v67 <= 1)
      {
        if (!v67)
          *(_QWORD *)(a1 + 592) = *(_QWORD *)(a1 + 576);
        v68 = *(_QWORD *)(a1 + 600) + (-*(_DWORD *)(a1 + 600) | 0xFFFFFFFFFFFFFFC0);
        if (v68 < *(_QWORD *)(a1 + 584))
          goto LABEL_146;
        v69 = *(_QWORD *)(a1 + 592);
        if (v68 < v69)
        {
          *(_QWORD *)(a1 + 592) = v68;
          v69 = v68;
        }
        *(_QWORD *)(a1 + 600) = v68;
        v70 = *(_QWORD *)(a1 + 576) + (-*(_BYTE *)(a1 + 576) & 0x3F);
        if (v70 > *(_QWORD *)(a1 + 568))
        {
          v71 = 0;
LABEL_150:
          *(_QWORD *)(a1 + 3016) = v71;
          *(_QWORD *)(a1 + 3024) = MaxNbSeq;
          *(_QWORD *)(a1 + 936) = 0;
          *(_QWORD *)(a1 + 912) = " ";
          *(_QWORD *)(a1 + 920) = " ";
          *(_QWORD *)(a1 + 928) = 0x200000002;
          *(_QWORD *)(a1 + 904) = "WARNING: The maximum dictionary size %u is too large compared to the source size %u! s"
                                  "ize(source)/size(dictionary) = %f, but it should be >= 10! This may lead to a subpar d"
                                  "ictionary! We recommend training on sources at least 10x, and preferably 100x the size"
                                  " of the dictionary! \n";
          *(_DWORD *)(a1 + 952) = 0;
          goto LABEL_151;
        }
        *(_QWORD *)(a1 + 576) = v70;
        *(_QWORD *)(a1 + 584) = v70;
        if (v69 < v70)
          *(_QWORD *)(a1 + 592) = v70;
        *v73 = 2;
      }
      v71 = (12 * MaxNbSeq + 63) & 0xFFFFFFFFFFFFFFC0;
      if (!v71)
        goto LABEL_150;
      v71 = *(_QWORD *)(a1 + 600) - v71;
      if (v71 >= *(_QWORD *)(a1 + 584))
      {
        if (v71 < *(_QWORD *)(a1 + 592))
          *(_QWORD *)(a1 + 592) = v71;
        *(_QWORD *)(a1 + 600) = v71;
        goto LABEL_150;
      }
LABEL_146:
      v71 = 0;
      *v58 = 1;
      goto LABEL_150;
    }
LABEL_127:
    v66 = 0;
    goto LABEL_133;
  }
  return matched;
}

uint64_t ZSTD_reset_matchState(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, int a5, int a6, int a7)
{
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  const char *v16;
  const char *v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  __int128 v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;

  v12 = a3[6];
  if ((a7 || !*(_DWORD *)(a1 + 124)) && (v12 == 1 || a4 == 1 && (v12 - 3) < 3))
    v13 = 0;
  else
    v13 = 4 << a3[1];
  if (a7 == 1 && a3[4] == 3)
  {
    if (*a3 >= 0x11u)
      v14 = 17;
    else
      v14 = *a3;
  }
  else
  {
    v14 = 0;
  }
  v15 = a3[2];
  if (a6 == 1)
  {
    *(_QWORD *)(a1 + 32) = 0;
    v16 = " ";
    *(_QWORD *)(a1 + 8) = " ";
    *(_QWORD *)(a1 + 16) = " ";
    v17 = "WARNING: The maximum dictionary size %u is too large compared to the source size %u! size(source)/size(diction"
          "ary) = %f, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at l"
          "east 10x, and preferably 100x the size of the dictionary! \n";
    *(_QWORD *)a1 = "WARNING: The maximum dictionary size %u is too large compared to the source size %u! size(source)/si"
                    "ze(dictionary) = %f, but it should be >= 10! This may lead to a subpar dictionary! We recommend trai"
                    "ning on sources at least 10x, and preferably 100x the size of the dictionary! \n";
    v18 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 32) = v18;
  }
  else
  {
    v17 = *(const char **)a1;
    v16 = *(const char **)(a1 + 8);
    v18 = *(_QWORD *)(a2 + 16);
  }
  v19 = (_DWORD)v17 - (_DWORD)v16;
  *(_DWORD *)(a1 + 24) = v19;
  *(_DWORD *)(a1 + 28) = v19;
  *(_DWORD *)(a1 + 44) = v19;
  *(_DWORD *)(a1 + 48) = v14;
  *(_DWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a2 + 24) = v18;
  v20 = *(_DWORD *)(a2 + 56);
  if (v20 >= 2)
  {
    v22 = *(_QWORD *)(a2 + 40);
    v23 = v18;
LABEL_51:
    v26 = v23 + (4 << v15);
    if (v26 <= v22)
    {
      *(_QWORD *)(a2 + 24) = v26;
    }
    else
    {
      *(_BYTE *)(a2 + 48) = 1;
      v26 = v23;
      v23 = 0;
    }
    *(_QWORD *)(a1 + 96) = v23;
    goto LABEL_55;
  }
  if (!v20)
    *(_QWORD *)(a2 + 32) = v18;
  v21 = *(_QWORD *)(a2 + 40);
  v22 = v21 + (-*(_DWORD *)(a2 + 40) | 0xFFFFFFFFFFFFFFC0);
  if (v22 < v18)
  {
    *(_BYTE *)(a2 + 48) = 1;
    goto LABEL_27;
  }
  v24 = *(_QWORD *)(a2 + 32);
  if (v22 < v24)
  {
    *(_QWORD *)(a2 + 32) = v22;
    v24 = v22;
  }
  *(_QWORD *)(a2 + 40) = v22;
  v23 = v18 + (-(int)v18 & 0x3FLL);
  if (v23 <= *(_QWORD *)(a2 + 8))
  {
    *(_QWORD *)(a2 + 16) = v23;
    *(_QWORD *)(a2 + 24) = v23;
    if (v24 < v23)
      *(_QWORD *)(a2 + 32) = v23;
    *(_DWORD *)(a2 + 56) = 2;
    goto LABEL_51;
  }
  v21 = v22;
LABEL_27:
  *(_QWORD *)(a1 + 96) = 0;
  if (!v20)
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 16);
  v22 = v21 + (-(int)v21 | 0xFFFFFFFFFFFFFFC0);
  if (v22 >= v18)
  {
    v25 = *(_QWORD *)(a2 + 32);
    if (v22 < v25)
    {
      *(_QWORD *)(a2 + 32) = v22;
      v25 = v21 + (-(int)v21 | 0xFFFFFFFFFFFFFFC0);
    }
    *(_QWORD *)(a2 + 40) = v22;
    v26 = *(_QWORD *)(a2 + 16) + (-*(_BYTE *)(a2 + 16) & 0x3F);
    if (v26 > *(_QWORD *)(a2 + 8))
    {
      v21 = v22;
      goto LABEL_35;
    }
    *(_QWORD *)(a2 + 16) = v26;
    *(_QWORD *)(a2 + 24) = v26;
    if (v25 < v26)
      *(_QWORD *)(a2 + 32) = v26;
    *(_DWORD *)(a2 + 56) = 2;
LABEL_55:
    v28 = v26 + v13;
    if (v28 <= v22)
    {
      *(_QWORD *)(a2 + 24) = v28;
    }
    else
    {
      *(_BYTE *)(a2 + 48) = 1;
      v28 = v26;
      v26 = 0;
    }
    *(_QWORD *)(a1 + 112) = v26;
    if (v14)
      v27 = 4 << v14;
    else
      v27 = 0;
    goto LABEL_61;
  }
  *(_BYTE *)(a2 + 48) = 1;
LABEL_35:
  *(_QWORD *)(a1 + 112) = 0;
  if (v14)
    v27 = 4 << v14;
  else
    v27 = 0;
  if (!v20)
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 16);
  v22 = v21 + (-(int)v21 | 0xFFFFFFFFFFFFFFC0);
  if (v22 < v18)
  {
    v28 = 0;
    *(_BYTE *)(a2 + 48) = 1;
    goto LABEL_65;
  }
  v29 = *(_QWORD *)(a2 + 32);
  if (v22 < v29)
  {
    *(_QWORD *)(a2 + 32) = v22;
    v29 = v21 + (-(int)v21 | 0xFFFFFFFFFFFFFFC0);
  }
  *(_QWORD *)(a2 + 40) = v22;
  v28 = *(_QWORD *)(a2 + 16) + (-*(_BYTE *)(a2 + 16) & 0x3F);
  if (v28 > *(_QWORD *)(a2 + 8))
    goto LABEL_63;
  *(_QWORD *)(a2 + 16) = v28;
  *(_QWORD *)(a2 + 24) = v28;
  if (v29 < v28)
    *(_QWORD *)(a2 + 32) = v28;
  *(_DWORD *)(a2 + 56) = 2;
LABEL_61:
  v18 = v28 + v27;
  if (v28 + v27 > v22)
  {
    *(_BYTE *)(a2 + 48) = 1;
    v18 = v28;
LABEL_63:
    v28 = 0;
    goto LABEL_65;
  }
  *(_QWORD *)(a2 + 24) = v18;
LABEL_65:
  *(_QWORD *)(a1 + 104) = v28;
  if (*(_BYTE *)(a2 + 48))
    return -64;
  if (a5 != 1)
  {
    v31 = *(void **)(a2 + 32);
    if ((unint64_t)v31 < v18)
    {
      bzero(v31, v18 - (_QWORD)v31);
      v18 = *(_QWORD *)(a2 + 24);
      v31 = *(void **)(a2 + 32);
    }
    if ((unint64_t)v31 < v18)
      *(_QWORD *)(a2 + 32) = v18;
  }
  v32 = a3[6];
  if (a7 != 1 || v32 < 7)
  {
    if (a4 != 1 || v32 - 6 < 0xFFFFFFFD)
      goto LABEL_166;
    v36 = *(_DWORD *)(a2 + 56);
    if (v36 <= 1)
    {
      if (!v36)
        *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 16);
      v37 = *(_QWORD *)(a2 + 40) + (-*(_DWORD *)(a2 + 40) | 0xFFFFFFFFFFFFFFC0);
      if (v37 < v18)
        goto LABEL_93;
      v38 = *(_QWORD *)(a2 + 32);
      if (v37 < v38)
      {
        *(_QWORD *)(a2 + 32) = v37;
        v38 = v37;
      }
      *(_QWORD *)(a2 + 40) = v37;
      v18 = *(_QWORD *)(a2 + 16) + (-*(_BYTE *)(a2 + 16) & 0x3F);
      if (v18 > *(_QWORD *)(a2 + 8))
        goto LABEL_94;
      *(_QWORD *)(a2 + 16) = v18;
      *(_QWORD *)(a2 + 24) = v18;
      if (v38 < v18)
        *(_QWORD *)(a2 + 32) = v18;
      *(_DWORD *)(a2 + 56) = 2;
    }
    v39 = ((2 << v15) + 63) & 0xFFFFFFFFFFFFFFC0;
    if (!v39)
    {
LABEL_94:
      *(_QWORD *)(a1 + 56) = 0;
LABEL_95:
      v41 = a3[3];
      if (v41 >= 6)
        v41 = 6;
      if (v41 <= 4)
        v41 = 4;
      *(_DWORD *)(a1 + 52) = a3[2] - v41;
      goto LABEL_166;
    }
    v40 = (void *)(*(_QWORD *)(a2 + 40) - v39);
    if ((unint64_t)v40 >= v18)
    {
      if ((unint64_t)v40 < *(_QWORD *)(a2 + 32))
        *(_QWORD *)(a2 + 32) = v40;
      *(_QWORD *)(a2 + 40) = v40;
      *(_QWORD *)(a1 + 56) = v40;
      bzero(v40, 2 << v15);
      goto LABEL_95;
    }
LABEL_93:
    *(_BYTE *)(a2 + 48) = 1;
    goto LABEL_94;
  }
  v33 = *(_DWORD *)(a2 + 56);
  if (v33 >= 2)
  {
    v35 = *(_QWORD *)(a2 + 40);
    v42 = v18;
LABEL_130:
    v44 = v35 - 1024;
    if (v35 - 1024 >= v42)
    {
      if (v44 < *(_QWORD *)(a2 + 32))
        *(_QWORD *)(a2 + 32) = v44;
      *(_QWORD *)(a2 + 40) = v44;
      v49 = v35 - 1024;
    }
    else
    {
      v49 = 0;
      *(_BYTE *)(a2 + 48) = 1;
      v44 = v35;
    }
    *(_QWORD *)(a1 + 128) = v49;
    goto LABEL_136;
  }
  if (!v33)
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 16);
  v34 = *(_QWORD *)(a2 + 40);
  v35 = v34 + (-*(_DWORD *)(a2 + 40) | 0xFFFFFFFFFFFFFFC0);
  if (v35 < v18)
  {
    *(_BYTE *)(a2 + 48) = 1;
    v35 = v34;
    goto LABEL_107;
  }
  v43 = *(_QWORD *)(a2 + 32);
  if (v35 < v43)
  {
    *(_QWORD *)(a2 + 32) = v35;
    v43 = v35;
  }
  *(_QWORD *)(a2 + 40) = v35;
  v42 = *(_QWORD *)(a2 + 16) + (-*(_BYTE *)(a2 + 16) & 0x3F);
  if (v42 <= *(_QWORD *)(a2 + 8))
  {
    *(_QWORD *)(a2 + 16) = v42;
    *(_QWORD *)(a2 + 24) = v42;
    if (v43 < v42)
      *(_QWORD *)(a2 + 32) = v42;
    *(_DWORD *)(a2 + 56) = 2;
    goto LABEL_130;
  }
LABEL_107:
  *(_QWORD *)(a1 + 128) = 0;
  if (!v33)
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 16);
  v44 = v35 + (-(int)v35 | 0xFFFFFFFFFFFFFFC0);
  if (v44 < v18)
  {
    *(_BYTE *)(a2 + 48) = 1;
    goto LABEL_115;
  }
  v45 = *(_QWORD *)(a2 + 32);
  if (v44 < v45)
  {
    *(_QWORD *)(a2 + 32) = v44;
    v45 = v44;
  }
  *(_QWORD *)(a2 + 40) = v44;
  v42 = *(_QWORD *)(a2 + 16) + (-*(_BYTE *)(a2 + 16) & 0x3F);
  if (v42 <= *(_QWORD *)(a2 + 8))
  {
    *(_QWORD *)(a2 + 16) = v42;
    *(_QWORD *)(a2 + 24) = v42;
    if (v45 < v42)
      *(_QWORD *)(a2 + 32) = v42;
    *(_DWORD *)(a2 + 56) = 2;
LABEL_136:
    v46 = v44 - 192;
    if (v44 - 192 >= v42)
    {
      if (v46 < *(_QWORD *)(a2 + 32))
        *(_QWORD *)(a2 + 32) = v46;
      *(_QWORD *)(a2 + 40) = v46;
      v50 = v44 - 192;
    }
    else
    {
      v50 = 0;
      *(_BYTE *)(a2 + 48) = 1;
      v46 = v44;
    }
    *(_QWORD *)(a1 + 136) = v50;
    goto LABEL_142;
  }
  v35 = v44;
LABEL_115:
  *(_QWORD *)(a1 + 136) = 0;
  if (!v33)
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 16);
  v46 = v35 + (-(int)v35 | 0xFFFFFFFFFFFFFFC0);
  if (v46 < v18)
  {
    *(_BYTE *)(a2 + 48) = 1;
    goto LABEL_123;
  }
  v47 = *(_QWORD *)(a2 + 32);
  if (v46 < v47)
  {
    *(_QWORD *)(a2 + 32) = v46;
    v47 = v46;
  }
  *(_QWORD *)(a2 + 40) = v46;
  v42 = *(_QWORD *)(a2 + 16) + (-*(_BYTE *)(a2 + 16) & 0x3F);
  if (v42 <= *(_QWORD *)(a2 + 8))
  {
    *(_QWORD *)(a2 + 16) = v42;
    *(_QWORD *)(a2 + 24) = v42;
    if (v47 < v42)
      *(_QWORD *)(a2 + 32) = v42;
    *(_DWORD *)(a2 + 56) = 2;
LABEL_142:
    v48 = v46 - 256;
    if (v46 - 256 >= v42)
    {
      if (v48 < *(_QWORD *)(a2 + 32))
        *(_QWORD *)(a2 + 32) = v48;
      *(_QWORD *)(a2 + 40) = v48;
      v51 = v46 - 256;
    }
    else
    {
      v51 = 0;
      *(_BYTE *)(a2 + 48) = 1;
      v48 = v46;
    }
    *(_QWORD *)(a1 + 144) = v51;
    goto LABEL_148;
  }
  v35 = v46;
LABEL_123:
  *(_QWORD *)(a1 + 144) = 0;
  if (!v33)
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 16);
  v48 = v35 + (-(int)v35 | 0xFFFFFFFFFFFFFFC0);
  if (v48 < v18)
  {
    *(_BYTE *)(a2 + 48) = 1;
    goto LABEL_173;
  }
  v58 = *(_QWORD *)(a2 + 32);
  if (v48 < v58)
  {
    *(_QWORD *)(a2 + 32) = v48;
    v58 = v48;
  }
  *(_QWORD *)(a2 + 40) = v48;
  v42 = *(_QWORD *)(a2 + 16) + (-*(_BYTE *)(a2 + 16) & 0x3F);
  if (v42 <= *(_QWORD *)(a2 + 8))
  {
    *(_QWORD *)(a2 + 16) = v42;
    *(_QWORD *)(a2 + 24) = v42;
    if (v58 < v42)
      *(_QWORD *)(a2 + 32) = v42;
    *(_DWORD *)(a2 + 56) = 2;
LABEL_148:
    v52 = v48 - 128;
    if (v48 - 128 >= v42)
    {
      if (v52 < *(_QWORD *)(a2 + 32))
        *(_QWORD *)(a2 + 32) = v52;
      *(_QWORD *)(a2 + 40) = v52;
      v53 = v48 - 128;
    }
    else
    {
      v53 = 0;
      *(_BYTE *)(a2 + 48) = 1;
      v52 = v48;
    }
    *(_QWORD *)(a1 + 152) = v53;
    goto LABEL_154;
  }
  v35 = v48;
LABEL_173:
  *(_QWORD *)(a1 + 152) = 0;
  if (!v33)
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 16);
  v52 = v35 + (-(int)v35 | 0xFFFFFFFFFFFFFFC0);
  if (v52 < v18)
  {
    *(_BYTE *)(a2 + 48) = 1;
    goto LABEL_187;
  }
  v59 = *(_QWORD *)(a2 + 32);
  if (v52 < v59)
  {
    *(_QWORD *)(a2 + 32) = v52;
    v59 = v52;
  }
  *(_QWORD *)(a2 + 40) = v52;
  v42 = *(_QWORD *)(a2 + 16) + (-*(_BYTE *)(a2 + 16) & 0x3F);
  if (v42 <= *(_QWORD *)(a2 + 8))
  {
    *(_QWORD *)(a2 + 16) = v42;
    *(_QWORD *)(a2 + 24) = v42;
    if (v59 < v42)
      *(_QWORD *)(a2 + 32) = v42;
    *(_DWORD *)(a2 + 56) = 2;
LABEL_154:
    v54 = v52 - 32832;
    if (v52 - 32832 >= v42)
    {
      if (v54 < *(_QWORD *)(a2 + 32))
        *(_QWORD *)(a2 + 32) = v54;
      *(_QWORD *)(a2 + 40) = v54;
      v55 = v52 - 32832;
    }
    else
    {
      v55 = 0;
      *(_BYTE *)(a2 + 48) = 1;
      v54 = v52;
    }
    *(_QWORD *)(a1 + 160) = v55;
LABEL_160:
    v56 = v54 - 114752;
    if (v54 - 114752 >= v42)
    {
      if (v56 < *(_QWORD *)(a2 + 32))
        *(_QWORD *)(a2 + 32) = v56;
      *(_QWORD *)(a2 + 40) = v56;
      goto LABEL_165;
    }
    goto LABEL_161;
  }
  v35 = v52;
LABEL_187:
  *(_QWORD *)(a1 + 160) = 0;
  if (!v33)
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 16);
  v54 = v35 + (-(int)v35 | 0xFFFFFFFFFFFFFFC0);
  if (v54 >= v18)
  {
    v60 = *(_QWORD *)(a2 + 32);
    if (v54 < v60)
    {
      *(_QWORD *)(a2 + 32) = v54;
      v60 = v35 + (-(int)v35 | 0xFFFFFFFFFFFFFFC0);
    }
    *(_QWORD *)(a2 + 40) = v54;
    v42 = *(_QWORD *)(a2 + 16) + (-*(_BYTE *)(a2 + 16) & 0x3F);
    if (v42 > *(_QWORD *)(a2 + 8))
    {
      v56 = 0;
      goto LABEL_165;
    }
    *(_QWORD *)(a2 + 16) = v42;
    *(_QWORD *)(a2 + 24) = v42;
    if (v60 < v42)
      *(_QWORD *)(a2 + 32) = v42;
    *(_DWORD *)(a2 + 56) = 2;
    goto LABEL_160;
  }
LABEL_161:
  v56 = 0;
  *(_BYTE *)(a2 + 48) = 1;
LABEL_165:
  *(_QWORD *)(a1 + 168) = v56;
LABEL_166:
  v57 = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 252) = *(_OWORD *)(a3 + 3);
  *(_OWORD *)(a1 + 240) = v57;
  if (*(_BYTE *)(a2 + 48))
    return -64;
  else
    return 0;
}

unint64_t ZSTD_buildSequencesStatistics@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, unsigned int a7@<W6>, void *a8@<X7>, uint64_t a9@<X8>, char *a10, unint64_t a11)
{
  unsigned __int8 *v18;
  unint64_t v19;
  int v20;
  unint64_t result;
  char *v22;
  unint64_t v23;
  unsigned int v24;
  int v25;
  char *v26;
  unint64_t v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  _WORD *__dst;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;

  __dst = (_WORD *)(a4 + 2224);
  v18 = (unsigned __int8 *)a1[4];
  v29 = (unsigned __int8 *)a1[6];
  v30 = (unsigned __int8 *)a1[5];
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  ZSTD_seqToCodes((uint64_t)a1);
  v37 = 35;
  v19 = HIST_countFast_wksp(a8, &v37, v18, a2, a10, a11);
  *(_DWORD *)(a4 + 3548) = *(_DWORD *)(a3 + 3548);
  v31 = a3;
  a3 += 2224;
  v32 = a7;
  v20 = ZSTD_selectEncodingType((_DWORD *)(a4 + 3548), (unsigned int *)a8, v37, v19, a2, 9u, (unsigned __int16 *)a3, LL_defaultNorm_0, 6, 1, a7);
  *(_DWORD *)a9 = v20;
  result = ZSTD_buildCTable(a5, a6 - (_QWORD)a5, __dst, 9u, v20, (unsigned int *)a8, v37, v18, a2, (__int16 *)LL_defaultNorm_0, 6, 35, (const void *)a3, 0x524uLL, (__int16 *)a10, a11);
  if (result > 0xFFFFFFFFFFFFFF88)
    goto LABEL_11;
  if (v20 == 2)
    *(_QWORD *)(a9 + 24) = result;
  v22 = &a5[result];
  v36 = 31;
  v23 = HIST_countFast_wksp(a8, &v36, v29, a2, a10, a11);
  v24 = v36;
  *(_DWORD *)(a4 + 3540) = *(_DWORD *)(v31 + 3540);
  v25 = ZSTD_selectEncodingType((_DWORD *)(a4 + 3540), (unsigned int *)a8, v24, v23, a2, 8u, (unsigned __int16 *)v31, OF_defaultNorm_0, 5, v24 < 0x1D, v32);
  *(_DWORD *)(a9 + 4) = v25;
  result = ZSTD_buildCTable(v22, a6 - (_QWORD)v22, (_WORD *)a4, 8u, v25, (unsigned int *)a8, v36, v29, a2, (__int16 *)OF_defaultNorm_0, 5, 28, (const void *)v31, 0x304uLL, (__int16 *)a10, a11);
  if (result > 0xFFFFFFFFFFFFFF88)
    goto LABEL_11;
  if (v25 == 2)
    *(_QWORD *)(a9 + 24) = result;
  v26 = &v22[result];
  v35 = 52;
  v27 = HIST_countFast_wksp(a8, &v35, v30, a2, a10, a11);
  *(_DWORD *)(a4 + 3544) = *(_DWORD *)(v31 + 3544);
  v28 = ZSTD_selectEncodingType((_DWORD *)(a4 + 3544), (unsigned int *)a8, v35, v27, a2, 9u, (unsigned __int16 *)(v31 + 772), ML_defaultNorm_0, 6, 1, v32);
  *(_DWORD *)(a9 + 8) = v28;
  result = ZSTD_buildCTable(v26, a6 - (_QWORD)v26, (_WORD *)(a4 + 772), 9u, v28, (unsigned int *)a8, v35, v30, a2, (__int16 *)ML_defaultNorm_0, 6, 52, (const void *)(v31 + 772), 0x5ACuLL, (__int16 *)a10, a11);
  if (result > 0xFFFFFFFFFFFFFF88)
  {
LABEL_11:
    *(_QWORD *)(a9 + 16) = result;
  }
  else
  {
    if (v28 == 2)
      *(_QWORD *)(a9 + 24) = result;
    *(_QWORD *)(a9 + 16) = &v26[result] - a5;
  }
  return result;
}

uint32x2_t *ZSTD_overflowCorrectIfNeeded(uint32x2_t *result, _QWORD *a2, _DWORD *a3, int a4, int a5)
{
  uint32x2_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint32x2_t v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint32x2_t v19;
  int v20;
  uint32x4_t v21;
  int32x4_t v22;
  uint64_t i;
  int v24;
  uint32x2_t v25;
  int v26;
  int v27;
  int v28;
  uint32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  uint64_t v32;
  uint64_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int v36;
  int v37;
  uint32x4_t v38;
  int32x4_t v39;
  uint64_t j;
  __int32 v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint32x2_t v46;
  int v47;
  uint32x4_t v48;
  int32x4_t v49;
  uint64_t k;
  unint64_t v51;
  unsigned int v52;
  BOOL v53;
  __int32 v54;

  v5 = result[1];
  if ((a5 - v5.i32[0]) >= 0xE0000001)
  {
    v6 = a3[7];
    v7 = 1 << a3[1];
    v8 = 1 << (a3[2] - (v6 > 5));
    v9 = (v8 - 1) & (a4 - v5.i32[0]);
    if (v8 <= 2)
      v10 = 2;
    else
      v10 = 1 << (a3[2] - (v6 > 5));
    if (v9 >= 2)
      v10 = 0;
    if (v8 > v7)
      v7 = 1 << (a3[2] - (v6 > 5));
    v11 = a4 - v5.i32[0] - (v7 + v9) - v10;
    v12 = (uint32x2_t)(*(_QWORD *)&result[2] + v11);
    result[1] = (uint32x2_t)(*(_QWORD *)&v5 + v11);
    result[2] = v12;
    v13 = v11 + 2;
    result[3] = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)vdup_n_s32((int)v11 + 2), result[3]), (int8x8_t)0x200000002, (int8x8_t)vsub_s32((int32x2_t)result[3], vdup_n_s32(v11)));
    ++result[4].i32[0];
    v14 = a2[2];
    a2[4] = v14;
    v15 = 1 << a3[3];
    if (v15 >= 0)
      v16 = 1 << a3[3];
    else
      v16 = v15 + 15;
    if (v15 >= 16)
    {
      v17 = 0;
      v18 = 0;
      v19 = result[12];
      v20 = v16 >> 4;
      v21 = (uint32x4_t)vdupq_n_s32(v13);
      v22 = vdupq_n_s32(v11);
      do
      {
        for (i = 0; i != 64; i += 16)
          *(int8x16_t *)(*(_QWORD *)&v19 + 4 * v18 + i) = vbicq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)(*(_QWORD *)&v19 + 4 * v18 + i), v22), (int8x16_t)vcgtq_u32(v21, *(uint32x4_t *)(*(_QWORD *)&v19+ 4 * v18+ i)));
        v18 += 16;
        ++v17;
      }
      while (v17 != v20);
    }
    if (result[15].i32[1] || v6 != 1 && (v6 - 3 > 2 || a3[36] != 1))
    {
      v24 = 1 << a3[2];
      v25 = result[14];
      v26 = v24 / 16;
      if (v6 == 6)
      {
        if (v24 >= 16)
        {
          v27 = 0;
          v28 = 0;
          v29 = (uint32x4_t)vdupq_n_s32(v13);
          v30 = vdupq_n_s32(v11);
          v31.i64[0] = 0x100000001;
          v31.i64[1] = 0x100000001;
          do
          {
            v32 = 0;
            v33 = *(_QWORD *)&v25 + 4 * v28;
            do
            {
              v34 = *(int32x4_t *)(v33 + v32);
              v35 = vceqq_s32(v34, v31);
              *(int32x4_t *)(v33 + v32) = vsubq_s32((int32x4_t)vbicq_s8(vbicq_s8((int8x16_t)vsubq_s32(v34, v30), (int8x16_t)vcgtq_u32(v29, (uint32x4_t)v34)), (int8x16_t)v35), v35);
              v32 += 16;
            }
            while (v32 != 64);
            v28 += 16;
            ++v27;
          }
          while (v27 != v26);
        }
      }
      else if (v24 >= 16)
      {
        v36 = 0;
        v37 = 0;
        v38 = (uint32x4_t)vdupq_n_s32(v13);
        v39 = vdupq_n_s32(v11);
        do
        {
          for (j = 0; j != 64; j += 16)
            *(int8x16_t *)(*(_QWORD *)&v25 + 4 * v37 + j) = vbicq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)(*(_QWORD *)&v25+ 4 * v37+ j), v39), (int8x16_t)vcgtq_u32(v38, *(uint32x4_t *)(*(_QWORD *)&v25+ 4 * v37+ j)));
          v37 += 16;
          ++v36;
        }
        while (v36 != v26);
      }
    }
    v41 = result[6].i32[0];
    if (v41)
    {
      v42 = 1 << v41;
      v43 = v42 >= 0 ? v42 : v42 + 15;
      if (v42 >= 16)
      {
        v44 = 0;
        v45 = 0;
        v46 = result[13];
        v47 = v43 >> 4;
        v48 = (uint32x4_t)vdupq_n_s32(v13);
        v49 = vdupq_n_s32(v11);
        do
        {
          for (k = 0; k != 64; k += 16)
            *(int8x16_t *)(*(_QWORD *)&v46 + 4 * v45 + k) = vbicq_s8((int8x16_t)vsubq_s32(*(int32x4_t *)(*(_QWORD *)&v46+ 4 * v45+ k), v49), (int8x16_t)vcgtq_u32(v48, *(uint32x4_t *)(*(_QWORD *)&v46+ 4 * v45+ k)));
          v45 += 16;
          ++v44;
        }
        while (v44 != v47);
      }
    }
    v51 = a2[3];
    if (v14 < v51)
      a2[4] = v51;
    v52 = result[5].u32[1];
    v53 = v52 >= v11;
    v54 = v52 - v11;
    if (!v53)
      v54 = 0;
    result[5].i32[0] = 0;
    result[5].i32[1] = v54;
    result[29] = 0;
  }
  return result;
}

uint64_t ZSTD_compressBlock_internal(uint64_t a1, _DWORD *a2, size_t a3, _QWORD *a4, unint64_t a5, int a6)
{
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;

  v12 = ZSTD_buildSeqStore((uint32x2_t *)a1, (unint64_t)a4, a5);
  v13 = 4 * (v12 == 1);
  if (v12 >= 0xFFFFFFFFFFFFFF89)
    v13 = 1;
  if (v13 == 4)
  {
    v14 = 0;
  }
  else
  {
    v14 = v12;
    if (v13)
      return v14;
    if (*(_DWORD *)(a1 + 784))
    {
      ZSTD_copyBlockSequences(a1);
      v14 = 0;
      *(int8x16_t *)(a1 + 3072) = vextq_s8(*(int8x16_t *)(a1 + 3072), *(int8x16_t *)(a1 + 3072), 8uLL);
      return v14;
    }
    v17 = ZSTD_entropyCompressSeqStore((uint64_t *)(a1 + 824), *(char **)(a1 + 3072), *(unsigned __int16 **)(a1 + 3080), (_DWORD *)(a1 + 192), a2, a3, a5, *(char **)(a1 + 3368), *(_DWORD *)(a1 + 8));
    v14 = v17;
    if (a6 && !*(_DWORD *)(a1 + 816) && v17 <= 0x18 && ZSTD_isRLE(a4, a5))
    {
      *(_BYTE *)a2 = *(_BYTE *)a4;
      v14 = 1;
    }
    else if ((unint64_t)(v14 - 2) <= 0xFFFFFFFFFFFFFF86)
    {
      *(int8x16_t *)(a1 + 3072) = vextq_s8(*(int8x16_t *)(a1 + 3072), *(int8x16_t *)(a1 + 3072), 8uLL);
    }
  }
  v15 = *(_QWORD *)(a1 + 3072);
  if (*(_DWORD *)(v15 + 5604) == 2)
    *(_DWORD *)(v15 + 5604) = 1;
  return v14;
}

unint64_t ZSTD_buildSeqStore(uint32x2_t *a1, unint64_t a2, unint64_t a3)
{
  unsigned int v5;
  uint64_t *v6;
  uint32x2_t v8;
  unsigned int v9;
  __int32 v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t result;
  BOOL v14;
  uint64_t v15;
  uint32x2_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  int v20;
  size_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t (**v25)();
  uint64_t (**v26)();
  uint64_t (*v27)();
  size_t v28;
  _QWORD v29[5];

  if (a3 > 6)
  {
    a1[106] = a1[105];
    a1[104] = a1[103];
    a1[112].i32[0] = 0;
    v8 = a1[384];
    a1[413] = v8;
    a1[414].i32[0] = a1[33].i32[0];
    v9 = a2 - a1[387].i32[0];
    v10 = a1[391].i32[1];
    if (v10 + 384 < v9)
    {
      v11 = v9 - v10 - 384;
      if (v11 >= 0xC0)
        v11 = 192;
      a1[391].i32[1] = v9 - v11;
    }
    if (a1[389].i32[1] >= (unsigned __int32)a1[389].i32[0])
    {
      v12 = (uint64_t)a1[415];
      if (v12)
      {
        v14 = *(_DWORD *)(v12 + 124) == 0;
        v12 = 2;
        if (!v14)
          v12 = 3;
      }
    }
    else
    {
      v12 = 1;
    }
    v15 = 0;
    v16 = a1[385];
    v17 = *(_QWORD *)&v8 + 5616;
    do
    {
      *(_DWORD *)(*(_QWORD *)&v16 + 5616 + v15) = *(_DWORD *)(v17 + v15);
      v15 += 4;
    }
    while (v15 != 12);
    if (*(_QWORD *)&a1[380] >= *(_QWORD *)&a1[382])
    {
      if (a1[36].i32[0] != 1)
      {
        v22 = a1[27].i32[1];
        v23 = v22 - 3;
        v24 = a1[42].i32[0] != 1 || v23 > 2;
        v25 = &ZSTD_selectBlockCompressor_rowBasedBlockCompressors[3 * v12] + v23;
        v26 = &ZSTD_selectBlockCompressor_blockCompressor[10 * v12] + v22;
        if (!v24)
          v26 = v25;
        v27 = *v26;
        a1[420] = 0;
        v21 = ((uint64_t (*)(uint32x2_t *, uint32x2_t *, uint64_t, unint64_t, unint64_t))v27)(&a1[386], &a1[103], *(_QWORD *)&v16 + 5616, a2, a3);
        goto LABEL_29;
      }
      v29[0] = a1[377];
      memset(&v29[1], 0, 24);
      v29[4] = a1[378];
      result = ZSTD_ldm_generateSequences(a1 + 113, v29, &a1[36], a2, a3);
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      v19 = (_QWORD *)(*(_QWORD *)&a1[385] + 5616);
      v20 = a1[42].i32[0];
      v18 = v29;
    }
    else
    {
      v18 = (uint64_t *)&a1[379];
      v19 = (_QWORD *)(*(_QWORD *)&v16 + 5616);
      v20 = a1[42].i32[0];
    }
    v21 = ZSTD_ldm_blockCompress(v18, (uint64_t)&a1[386], (uint64_t)&a1[103], v19, v20, a2, a3);
LABEL_29:
    v28 = v21;
    memcpy(*(void **)&a1[106], (const void *)(a2 + a3 - v21), v21);
    result = 0;
    *(_QWORD *)&a1[106] += v28;
    return result;
  }
  v5 = a1[27].u32[1];
  v6 = (uint64_t *)&a1[379];
  if (v5 < 7)
    ZSTD_ldm_skipSequences(v6, a3, a1[26].u32[1]);
  else
    ZSTD_ldm_skipRawSeqStoreBytes((uint64_t)v6, a3);
  return 1;
}

uint64_t ZSTD_isRLE(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  char *v3;
  char *v4;
  _DWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  BOOL v15;

  if (a2 == 1)
    return 1;
  v2 = a2 & 0x1F;
  if ((a2 & 0x1F) != 0)
  {
    v3 = (char *)a1 + v2;
    v4 = (char *)a1 + 1;
    v5 = a1;
    if (v2 >= 9)
    {
      v6 = *(_QWORD *)((char *)a1 + 1) ^ *a1;
      if (v6)
      {
        v7 = __clz(__rbit64(v6)) >> 3;
        goto LABEL_21;
      }
      v8 = 0;
      while (1)
      {
        v9 = &a1[v8];
        v4 = (char *)&a1[v8 + 1] + 1;
        if (v4 >= v3 - 7)
          break;
        ++v8;
        v10 = *(_QWORD *)v4 ^ v9[1];
        if (v10)
        {
          v7 = v8 * 8 + (__clz(__rbit64(v10)) >> 3);
          goto LABEL_21;
        }
      }
      v5 = v9 + 1;
    }
    if (v4 < v3 - 3 && *v5 == *(_DWORD *)v4)
    {
      v4 += 4;
      ++v5;
    }
    if (v4 < v3 - 1 && *(unsigned __int16 *)v5 == *(unsigned __int16 *)v4)
    {
      v4 += 2;
      v5 = (_DWORD *)((char *)v5 + 2);
    }
    if (v4 < v3 && *(unsigned __int8 *)v5 == *v4)
      ++v4;
    v7 = v4 - ((char *)a1 + 1);
LABEL_21:
    if (v7 != v2 - 1)
      return 0;
  }
  if (a2 < 0x20)
    return 1;
  v12 = 0x101010101010101 * *(unsigned __int8 *)a1;
  v13 = (char *)a1 + v2;
  result = 1;
LABEL_25:
  v14 = 0;
  while (*(_QWORD *)&v13[v14] == v12)
  {
    v15 = v14 > 0x17;
    v14 += 8;
    if (v15)
    {
      v2 += 32;
      v13 += 32;
      if (v2 != a2)
        goto LABEL_25;
      return result;
    }
  }
  return 0;
}

uint64_t ZSTD_compressSeqStore_singleBlock(uint64_t a1, uint64_t *a2, uint64_t *a3, int *a4, uint64_t a5, unint64_t a6, _QWORD *a7, size_t a8, int a9, int a10)
{
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int *v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  int v39;
  char v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;

  v44 = *a3;
  v45 = *((_DWORD *)a3 + 2);
  if (a10)
  {
    v16 = *a2;
    v17 = a2[1] - *a2;
    if ((v17 & 0x7FFFFFFF8) != 0)
    {
      v18 = (v17 >> 3);
      while (1)
      {
        v19 = *(_WORD *)(v16 + 4) == 0;
        v20 = *(_DWORD *)v16;
        v21 = *(_DWORD *)v16 - 1;
        v22 = *(_DWORD *)v16;
        if (v21 <= 2)
        {
          v23 = v21 + v19;
          if (v21 + v19 == 3)
          {
            v24 = *(_DWORD *)a3 - 1;
            v25 = *a4 - 1;
          }
          else
          {
            v24 = *((_DWORD *)a3 + v23);
            v25 = a4[v23];
          }
          v26 = v20 - 1;
          if (v24 == v25)
            break;
          v22 = v25 + 3;
          *(_DWORD *)v16 = v25 + 3;
          v26 = v25 + 2;
          if (v25 == 0 || v25 >= 0xFFFFFFFE)
            break;
        }
        *(uint64_t *)((char *)a3 + 4) = *a3;
        *(_DWORD *)a3 = v22 - 3;
        if (v21 <= 2)
        {
          v23 = v21 + v19;
          goto LABEL_17;
        }
        *(_QWORD *)(a4 + 1) = *(_QWORD *)a4;
        v27 = v20 - 3;
LABEL_31:
        *a4 = v27;
LABEL_32:
        v16 += 8;
        if (!--v18)
          goto LABEL_33;
      }
      v28 = v26 + v19;
      if (v28)
      {
        if (v28 == 3)
        {
          v29 = *(_DWORD *)a3;
          v30 = *(_DWORD *)a3 - 1;
        }
        else
        {
          v30 = *((_DWORD *)a3 + v28);
          v29 = *(_DWORD *)a3;
        }
        if (v28 <= 1)
          v31 = 8;
        else
          v31 = 4;
        v32 = *(_DWORD *)((char *)a3 + v31);
        *((_DWORD *)a3 + 1) = v29;
        *((_DWORD *)a3 + 2) = v32;
        *(_DWORD *)a3 = v30;
        if (!v23)
          goto LABEL_32;
      }
      else
      {
LABEL_17:
        if (!v23)
          goto LABEL_32;
      }
      if (v23 == 3)
      {
        v33 = *a4;
        v27 = *a4 - 1;
      }
      else
      {
        v27 = a4[v23];
        v33 = *a4;
      }
      if (v23 <= 1)
        v34 = a4 + 2;
      else
        v34 = a4 + 1;
      a4[2] = *v34;
      a4[1] = v33;
      goto LABEL_31;
    }
  }
LABEL_33:
  v35 = a6 - 3;
  if (a6 < 3)
    return -70;
  v37 = ZSTD_entropyCompressSeqStore(a2, *(char **)(a1 + 3072), *(unsigned __int16 **)(a1 + 3080), (_DWORD *)(a1 + 192), (_DWORD *)(a5 + 3), v35, a8, *(char **)(a1 + 3368), *(_DWORD *)(a1 + 8));
  v36 = v37;
  if (v37 > 0xFFFFFFFFFFFFFF88)
    return v36;
  if (v37 <= 0x18 && !*(_DWORD *)(a1 + 816) && ZSTD_isRLE(a7, a8))
    v36 = 1;
  if (*(_DWORD *)(a1 + 784))
  {
    ZSTD_copyBlockSequences(a1);
    v36 = 0;
    *(int8x16_t *)(a1 + 3072) = vextq_s8(*(int8x16_t *)(a1 + 3072), *(int8x16_t *)(a1 + 3072), 8uLL);
    return v36;
  }
  if (v36 == 1)
  {
    if (a6 < 4)
      return -70;
    v40 = *(_BYTE *)a7;
    v41 = a9 + 8 * a8 + 2;
    *(_WORD *)a5 = v41;
    *(_BYTE *)(a5 + 2) = BYTE2(v41);
    *(_BYTE *)(a5 + 3) = v40;
    *a3 = v44;
    *((_DWORD *)a3 + 2) = v45;
    v36 = 4;
  }
  else
  {
    if (!v36)
    {
      v36 = a8 + 3;
      if (a8 + 3 <= a6)
      {
        v39 = a9 + 8 * a8;
        *(_WORD *)a5 = v39;
        *(_BYTE *)(a5 + 2) = BYTE2(v39);
        memcpy((void *)(a5 + 3), a7, a8);
        if (v36 > 0xFFFFFFFFFFFFFF88)
          return v36;
        *a3 = v44;
        *((_DWORD *)a3 + 2) = v45;
        goto LABEL_51;
      }
      return -70;
    }
    *(int8x16_t *)(a1 + 3072) = vextq_s8(*(int8x16_t *)(a1 + 3072), *(int8x16_t *)(a1 + 3072), 8uLL);
    v42 = a9 + 8 * v36 + 4;
    *(_WORD *)a5 = v42;
    *(_BYTE *)(a5 + 2) = BYTE2(v42);
    v36 += 3;
  }
LABEL_51:
  v43 = *(_QWORD *)(a1 + 3072);
  if (*(_DWORD *)(v43 + 5604) == 2)
    *(_DWORD *)(v43 + 5604) = 1;
  return v36;
}

uint64_t ZSTD_deriveSeqStoreChunk(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v8 = a2[3];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v9 = *((_OWORD *)a2 + 1);
  v10 = *((_OWORD *)a2 + 2);
  v11 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 64) = v11;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = v10;
  if (a3)
  {
    *(_QWORD *)(a1 + 8) = *a2 + 8 * a3;
    v12 = ZSTD_countSeqStoreLiteralsBytes(a1);
  }
  else
  {
    v12 = 0;
  }
  if (*((_DWORD *)a2 + 18))
  {
    v13 = *((unsigned int *)a2 + 19);
    if (v13 < a3 || v13 > a4)
      *(_DWORD *)(a1 + 72) = 0;
    else
      *(_DWORD *)(a1 + 76) -= a3;
  }
  *(_QWORD *)a1 = *a2 + 8 * a3;
  v14 = *a2;
  *(_QWORD *)(a1 + 8) = *a2 + 8 * a4;
  result = ZSTD_countSeqStoreLiteralsBytes(a1);
  v16 = *(_QWORD *)(a1 + 16) + v12;
  if (a4 == (a2[1] - v14) >> 3)
    v17 = v8;
  else
    v17 = v16 + result;
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(a1 + 24) = v17;
  v18 = *(_QWORD *)(a1 + 40) + a3;
  *(_QWORD *)(a1 + 32) += a3;
  *(_QWORD *)(a1 + 40) = v18;
  *(_QWORD *)(a1 + 48) += a3;
  return result;
}

uint64_t ZSTD_countSeqStoreLiteralsBytes(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = v1 - *(_QWORD *)a1;
  if (v1 == *(_QWORD *)a1)
    return 0;
  v3 = 0;
  v4 = v2 >> 3;
  v5 = *(unsigned int *)(a1 + 76);
  if (v4 <= 1)
    v4 = 1;
  v6 = (unsigned __int16 *)(*(_QWORD *)a1 + 4);
  do
  {
    v7 = *v6;
    v6 += 4;
    v3 += v7;
    if (!v5 && *(_DWORD *)(a1 + 72) == 1)
      v3 += 0x10000;
    --v5;
    --v4;
  }
  while (v4);
  return v3;
}

unint64_t ZSTD_deriveBlockSplitsHelper(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if (a3 - a2 >= 0x12C)
  {
    v8 = a2;
    v9 = (_QWORD *)result;
    v17 = (_QWORD *)(a4 + 3568);
    v10 = (_QWORD *)(a4 + 3648);
    v11 = (_QWORD *)(a4 + 3728);
    v12 = *(_QWORD *)(result + 8);
    do
    {
      if (v12 > 0xC3)
        break;
      v13 = (v8 + a3) >> 1;
      ZSTD_deriveSeqStoreChunk((uint64_t)v17, a5, v8, a3);
      ZSTD_deriveSeqStoreChunk((uint64_t)v10, a5, v8, v13);
      ZSTD_deriveSeqStoreChunk((uint64_t)v11, a5, v13, a3);
      v14 = ZSTD_buildEntropyStatisticsAndEstimateSubBlockSize(v17, a4);
      v15 = ZSTD_buildEntropyStatisticsAndEstimateSubBlockSize(v10, a4);
      result = ZSTD_buildEntropyStatisticsAndEstimateSubBlockSize(v11, a4);
      if (v14 > 0xFFFFFFFFFFFFFF88)
        break;
      if (v15 > 0xFFFFFFFFFFFFFF88)
        break;
      if (result > 0xFFFFFFFFFFFFFF88)
        break;
      if (result + v15 >= v14)
        break;
      result = ZSTD_deriveBlockSplitsHelper(v9, v8, (v8 + a3) >> 1, a4, a5);
      v16 = v9[1];
      *(_DWORD *)(*v9 + 4 * v16) = v13;
      v12 = v16 + 1;
      v9[1] = v16 + 1;
      v8 = (v8 + a3) >> 1;
    }
    while (a3 - v13 > 0x12B);
  }
  return result;
}

unint64_t ZSTD_buildEntropyStatisticsAndEstimateSubBlockSize(_QWORD *a1, uint64_t a2)
{
  unint64_t result;
  unsigned int *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  unsigned int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;

  result = ZSTD_buildBlockEntropyStats(a1, *(char **)(a2 + 3072), *(void **)(a2 + 3080), (_DWORD *)(a2 + 192), a2 + 4752, *(char **)(a2 + 3368), 0x22D8uLL);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v5 = (unsigned int *)a1[2];
    v6 = a1[3] - (_QWORD)v5;
    v7 = (unsigned __int8 *)a1[5];
    v8 = (unsigned __int8 *)a1[6];
    v9 = (unsigned __int8 *)a1[4];
    v10 = a1[1] - *a1;
    v11 = *(unsigned __int16 **)(a2 + 3080);
    v12 = *(unsigned int **)(a2 + 3368);
    v13 = *(_DWORD *)(a2 + 4752);
    v24 = 255;
    v14 = 3;
    if (v6 > 0x3FF)
      v14 = 4;
    if ((v6 & 0xFFFFFFFFFFFFC000) != 0)
      v15 = v14 + 1;
    else
      v15 = v14;
    v23 = v7;
    if ((v13 - 2) < 2)
    {
      if ((unint64_t)HIST_count_wksp(v12, (unsigned int *)&v24, v5, v6, (char *)v12, 0x22D8uLL) <= 0xFFFFFFFFFFFFFF88)
      {
        v16 = HUF_estimateCompressedSize((uint64_t)v11, v12, v24);
        if (v13 == 2)
          v16 += *(_QWORD *)(a2 + 4888);
        v17 = v16 + 6;
        if (v6 < 0x100)
          v17 = v16;
        v6 = v15 + v17;
      }
    }
    else if (v13)
    {
      v6 = v13 == 1;
    }
    v18 = ZSTD_estimateBlockSize_symbolType(*(_DWORD *)(a2 + 4900), v8, v10 >> 3, 0x1Fu, v11 + 1032, 0, OF_defaultNorm_0, 5, v12);
    v19 = ZSTD_estimateBlockSize_symbolType(*(_DWORD *)(a2 + 4896), v9, v10 >> 3, 0x23u, v11 + 2144, (uint64_t)&LL_bits_3, LL_defaultNorm_0, 6, v12);
    v20 = ZSTD_estimateBlockSize_symbolType(*(_DWORD *)(a2 + 4904), v23, v10 >> 3, 0x34u, v11 + 1418, (uint64_t)&ML_bits_3, ML_defaultNorm_0, 6, v12);
    v21 = 2;
    if ((unint64_t)v10 > 0x3F8)
      v21 = 3;
    v22 = 3;
    if ((unint64_t)v10 > 0x3F7F8)
      v22 = 4;
    return v22 + v21 + v6 + v18 + v19 + v20 + *(_QWORD *)(a2 + 5048);
  }
  return result;
}

unint64_t ZSTD_estimateBlockSize_symbolType(int a1, unsigned __int8 *a2, int64_t a3, unsigned int a4, unsigned __int16 *a5, uint64_t a6, unsigned __int16 *a7, char a8, void *a9)
{
  unsigned __int8 *v14;
  unint64_t v16;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;

  v14 = a2;
  v20 = a4;
  HIST_countFast_wksp(a9, &v20, a2, a3, (char *)a9, 0x22D8uLL);
  if (a1 == 1)
    goto LABEL_8;
  if (!a1)
  {
    v16 = ZSTD_crossEntropyCost(a7, a8, (int *)a9, v20);
    goto LABEL_6;
  }
  if ((a1 & 0xFFFFFFFE) != 2)
  {
LABEL_8:
    v16 = 0;
    goto LABEL_9;
  }
  v16 = ZSTD_fseBitCost(a5, (unsigned int *)a9, v20);
LABEL_6:
  if (v16 > 0xFFFFFFFFFFFFFF88)
    return 10 * a3;
LABEL_9:
  if (a3 >= 1)
  {
    v18 = &v14[a3];
    do
    {
      v19 = v14;
      if (a6)
        v19 = (unsigned __int8 *)(a6 + *v14);
      v16 += *v19;
      ++v14;
    }
    while (v14 < v18);
  }
  return v16 >> 3;
}

unint64_t ZSTD_entropyCompressSeqStore(uint64_t *a1, char *__src, unsigned __int16 *__dst, _DWORD *a4, _DWORD *a5, size_t a6, size_t a7, char *a8, int a9)
{
  unsigned int v16;
  uint64_t v17;
  _BYTE *v18;
  size_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  int v23;
  _BOOL4 v24;
  unint64_t result;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unsigned int v36;
  char v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v45;
  size_t v46;
  int v47;
  int v48;
  int v49;
  unint64_t v50;
  uint64_t v51;

  v16 = a4[7];
  v17 = a1[1];
  v18 = (_BYTE *)a1[2];
  v19 = a1[3] - (_QWORD)v18;
  v45 = *a1;
  v20 = v17 - *a1;
  v21 = (uint64_t)v20 >> 3;
  v22 = v17 == *a1 || v19 / v21 > 0x13;
  v23 = a4[18];
  v46 = a7;
  v42 = a4[1] > 0x39u;
  v43 = a1[1];
  if (v23 == 1)
    goto LABEL_9;
  if (v23 == 2)
  {
    v24 = 1;
    goto LABEL_10;
  }
  if (v16 != 1)
LABEL_9:
    v24 = 0;
  else
    v24 = a4[6] != 0;
LABEL_10:
  v40 = a1[6];
  v41 = a1[4];
  v39 = a1[5];
  result = ZSTD_compressLiterals(__src, __dst, v16, v24, a5, a6, v18, v19, (uint64_t)(a8 + 212), 0x2204uLL, a9, v22);
  if (result > 0xFFFFFFFFFFFFFF88)
    goto LABEL_28;
  v26 = a8 + 212;
  v27 = a8;
  v28 = (char *)a5 + a6;
  v29 = (char *)a5 + result;
  if ((uint64_t)(a6 - result) < 4)
  {
    if (v46 <= a6)
      return 0;
    else
      return -70;
  }
  v30 = __src;
  v31 = (char *)(__dst + 1032);
  if (v20 > 0x3FF)
  {
    v33 = v43;
    if (v20 >> 11 > 0x7E)
    {
      *v29 = -1;
      *(_WORD *)(v29 + 1) = (v20 >> 3) - 32512;
      v32 = v29 + 3;
    }
    else
    {
      *v29 = BYTE1(v21) ^ 0x80;
      v29[1] = v20 >> 3;
      v32 = v29 + 2;
    }
  }
  else
  {
    *v29 = v20 >> 3;
    v32 = v29 + 1;
    v33 = v43;
  }
  v38 = a5;
  if (v33 == v45)
  {
    memcpy(v31, v30 + 2064, 0xDE0uLL);
  }
  else
  {
    ZSTD_buildSequencesStatistics(a1, v21, (uint64_t)(v30 + 2064), (uint64_t)v31, v32 + 1, (uint64_t)a5 + a6, v16, v27, (uint64_t)&v47, v26, 0x2204uLL);
    result = v50;
    if (v50 > 0xFFFFFFFFFFFFFF88)
      goto LABEL_28;
    v34 = v51;
    *v32 = ((_BYTE)v47 << 6) + 16 * v48 + 4 * v49;
    v35 = (unint64_t *)&v32[result + 1];
    result = ZSTD_encodeSequences(v35, v28 - (char *)v35, __dst + 1418, v39, (unsigned __int16 *)v31, v40, __dst + 2144, v41, v45, v21, v42);
    if (result > 0xFFFFFFFFFFFFFF88)
      goto LABEL_28;
    if (v34 && result + v34 < 4)
      return 0;
    v32 = (char *)v35 + result;
  }
  result = v32 - v38;
  if (v32 == v38)
    return result;
LABEL_28:
  if (v46 <= a6 && result == -70)
    return 0;
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v36 = a4[7];
    if (v36 <= 7)
      v37 = 6;
    else
      v37 = v36 - 1;
    if (result >= v46 - (v46 >> v37) - 2)
      return 0;
  }
  return result;
}

uint64_t ZSTD_copyBlockSequences(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;

  v1 = *(_QWORD *)(result + 824);
  v2 = *(_QWORD *)(result + 832);
  v3 = *(_QWORD *)(result + 848);
  v4 = *(_QWORD *)(result + 840);
  v5 = *(_QWORD *)(result + 800);
  v6 = *(_QWORD *)(result + 792) + 16 * v5;
  v7 = *(_QWORD *)(result + 3072);
  v31 = *(_QWORD *)(v7 + 5616);
  v32 = *(_DWORD *)(v7 + 5624);
  v9 = v2 - v1;
  v8 = v9 == 0;
  v10 = v9 >> 3;
  v11 = 0;
  if (!v8)
  {
    v12 = *(unsigned int *)(result + 900);
    v13 = v31;
    v14 = HIDWORD(v31);
    if (v10 <= 1)
      v15 = 1;
    else
      v15 = v10;
    v16 = v6 + 8;
    v17 = v32;
    v18 = (unsigned __int16 *)(v1 + 6);
    v19 = v15;
    while (1)
    {
      v20 = *(_DWORD *)(v18 - 3);
      v21 = *(v18 - 1);
      *(_DWORD *)(v16 - 4) = v21;
      v22 = *v18;
      *(_QWORD *)v16 = (v22 + 3);
      if (v12)
        goto LABEL_7;
      v26 = *(_DWORD *)(result + 896);
      if (v26 == 2)
        break;
      v23 = v21;
      if (v26 == 1)
      {
        v23 = v21 | 0x10000;
        *(_DWORD *)(v16 - 4) = v21 | 0x10000;
      }
LABEL_8:
      if (v20 >= 4)
      {
        *(_DWORD *)(v16 - 8) = v20 - 3;
        v25 = v20 - 1;
LABEL_21:
        HIDWORD(v31) = v13;
        v32 = v14;
        v27 = v25 - 2;
        goto LABEL_32;
      }
      *(_DWORD *)(v16 + 4) = v20;
      if (v23)
      {
        v24 = --v20;
      }
      else
      {
        if (v20 == 3)
        {
          *(_DWORD *)(v16 - 8) = v13 - 1;
          v24 = 2;
          goto LABEL_22;
        }
        v24 = v20 - 1;
      }
      *(_DWORD *)(v16 - 8) = *((_DWORD *)&v31 + v20);
      if (v24 >= 3)
      {
        v25 = -1;
        goto LABEL_21;
      }
LABEL_22:
      if (v21)
        v28 = v24;
      else
        v28 = v24 + 1;
      if (!v28)
        goto LABEL_33;
      if (v28 == 3)
        v27 = v13 - 1;
      else
        v27 = *((_DWORD *)&v31 + v28);
      if (v28 <= 1)
        v14 = v17;
      HIDWORD(v31) = v13;
      v32 = v14;
LABEL_32:
      LODWORD(v31) = v27;
      v17 = v14;
      v14 = v13;
      v13 = v27;
LABEL_33:
      v18 += 4;
      v11 += v23;
      --v12;
      v16 += 16;
      if (!--v19)
        goto LABEL_36;
    }
    *(_DWORD *)v16 = v22 + 65539;
LABEL_7:
    v23 = v21;
    goto LABEL_8;
  }
  v15 = 0;
LABEL_36:
  v29 = v3 - (v11 + v4);
  v30 = v6 + 16 * v15;
  *(_DWORD *)v30 = 0;
  *(_DWORD *)(v30 + 4) = v29;
  *(_QWORD *)(v30 + 8) = 0;
  *(_QWORD *)(result + 800) = v10 + v5 + 1;
  return result;
}

unint64_t ZSTD_compress_insertDictionary(uint64_t a1, uint32x2_t *a2, unint64_t a3, _QWORD *a4, _DWORD *a5, _DWORD *a6, unint64_t a7, int a8, int a9, _WORD *a10)
{
  unint64_t result;
  uint64_t v16;

  if (a6 && a7 > 7)
  {
    *(_DWORD *)(a1 + 5624) = 8;
    *(_QWORD *)(a1 + 5616) = 0x400000001;
    *(_DWORD *)(a1 + 2056) = 0;
    *(_DWORD *)(a1 + 5604) = 0;
    *(_QWORD *)(a1 + 5608) = 0;
    if (a8 == 1)
    {
LABEL_4:
      ZSTD_loadDictionaryContent(a2, a3, a4, a5, (unint64_t)a6, a7, a9);
      return 0;
    }
    if (*a6 != -332356553)
    {
      if (a8 == 2)
        return -32;
      if (!a8)
        goto LABEL_4;
    }
    if (a5[10])
      v16 = 0;
    else
      v16 = a6[1];
    result = ZSTD_loadCEntropy(a1, a10, (uint64_t)a6, a7);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      ZSTD_loadDictionaryContent(a2, 0, a4, a5, (unint64_t)a6 + result, a7 - result, a9);
      return v16;
    }
  }
  else if (a8 == 2)
  {
    return -32;
  }
  else
  {
    return 0;
  }
  return result;
}

uint32x2_t *ZSTD_loadDictionaryContent(uint32x2_t *result, unint64_t a2, _QWORD *a3, _DWORD *a4, unint64_t a5, unint64_t a6, int a7)
{
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  BOOL v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint32x2_t v17;
  uint64_t v18;
  unsigned __int32 v19;
  uint64_t v20;
  int v21;
  __int32 v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;

  v10 = (uint64_t)result;
  v11 = a5 + a6;
  v12 = a4 + 24;
  if (a2)
    v13 = a4[24] == 1;
  else
    v13 = 0;
  v14 = v13;
  v15 = 3758096383;
  if (a6 < 0xDFFFFFFF)
    v15 = a6;
  if (!(a6 >> 29))
    v15 = a6;
  if (a6 >> 29 <= 6)
    v16 = a5;
  else
    v16 = v11 - 3758096383u;
  if (v15)
  {
    if (*result == v16)
    {
      v17 = result[2];
      LODWORD(v18) = result[3].i32[0];
      v19 = result[3].u32[1];
    }
    else
    {
      v17 = result[1];
      v18 = *(_QWORD *)result - *(_QWORD *)&v17;
      v19 = result[3].u32[0];
      result[3].i32[0] = v18;
      result[3].i32[1] = v19;
      result[1] = (uint32x2_t)(v16 - v18);
      result[2] = v17;
      if (v18 - v19 <= 7)
      {
        result[3].i32[1] = v18;
        v19 = v18;
      }
    }
    *result = (uint32x2_t)(v16 + v15);
    if (v16 + v15 > *(_QWORD *)&v17 + (unint64_t)v19
      && *(_QWORD *)&v17 + (unint64_t)v18 > v16)
    {
      v20 = v16 + v15 - *(_QWORD *)&v17;
      if (v20 > v18)
        LODWORD(v20) = v18;
      result[3].i32[1] = v20;
    }
  }
  v21 = a4[12];
  if (v21)
    v22 = 0;
  else
    v22 = v11 - result[1].i32[0];
  result[5].i32[0] = v22;
  result[15].i32[0] = a4[37];
  if (!v14)
  {
    if (v15 < 9)
      return result;
    result = ZSTD_overflowCorrectIfNeeded(result, a3, a4, v16, (int)a5 + (int)a6);
    goto LABEL_45;
  }
  if (v15)
  {
    if (*(_QWORD *)a2 == v16)
    {
      v23 = *(_QWORD *)(a2 + 16);
      LODWORD(v24) = *(_DWORD *)(a2 + 24);
      v25 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v23 = *(_QWORD *)(a2 + 8);
      v24 = *(_QWORD *)a2 - v23;
      v25 = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = v24;
      *(_DWORD *)(a2 + 28) = v25;
      *(_QWORD *)(a2 + 8) = v16 - v24;
      *(_QWORD *)(a2 + 16) = v23;
      if (v24 - v25 <= 7)
      {
        *(_DWORD *)(a2 + 28) = v24;
        v25 = v24;
      }
    }
    *(_QWORD *)a2 = v16 + v15;
    if (v16 + v15 > v23 + (unint64_t)v25 && v23 + (unint64_t)v24 > v16)
    {
      v26 = v16 + v15 - v23;
      if (v26 > v24)
        LODWORD(v26) = v24;
      *(_DWORD *)(a2 + 28) = v26;
    }
  }
  if (v21)
    v27 = 0;
  else
    v27 = v11 - *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 48) = v27;
  if (v15 >= 9)
  {
    ZSTD_overflowCorrectIfNeeded(result, a3, a4, v16, a5 + a6);
    result = (uint32x2_t *)ZSTD_ldm_fillHashTable(a2, v16, v11, v12);
LABEL_45:
    switch(a4[7])
    {
      case 1:
        result = (uint32x2_t *)ZSTD_fillHashTable(v10, v11, a7);
        break;
      case 2:
        result = (uint32x2_t *)ZSTD_fillDoubleHashTable(v10, v11, a7);
        break;
      case 3:
      case 4:
      case 5:
        if (*(_DWORD *)(v10 + 124))
        {
          result = (uint32x2_t *)ZSTD_dedicatedDictSearch_lazy_loadDictionary(v10, (int)v11 - 8);
        }
        else if (a4[36] == 1)
        {
          bzero(*(void **)(v10 + 56), 2 << a4[3]);
          result = (uint32x2_t *)ZSTD_row_update(v10, (int)v11 - 8);
        }
        else
        {
          result = (uint32x2_t *)ZSTD_insertAndFindFirstIndex(v10, (uint64_t *)(v11 - 8));
        }
        break;
      case 6:
      case 7:
      case 8:
      case 9:
        result = (uint32x2_t *)ZSTD_updateTree(v10, (int)v11 - 8, v11);
        break;
      default:
        break;
    }
    *(_DWORD *)(v10 + 44) = v11 - *(_DWORD *)(v10 + 8);
  }
  return result;
}

uint64_t COVER_sum(uint64_t *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  if (!a2)
    return 0;
  result = 0;
  v4 = a2;
  do
  {
    v5 = *a1++;
    result += v5;
    --v4;
  }
  while (v4);
  return result;
}

unint64_t COVER_warnOnSmallCorpus(unint64_t result, unint64_t a2, int a3)
{
  FILE **v3;

  if (a3 >= 1 && (double)a2 / (double)result < 10.0)
  {
    v3 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "WARNING: The maximum dictionary size %u is too large compared to the source size %u! size(source)/size(dictionary) = %f, but it should be >= 10! This may lead to a subpar dictionary! We recommend training on sources at least 10x, and preferably 100x the size of the dictionary! \n", result, a2, (double)a2 / (double)result);
    return fflush(*v3);
  }
  return result;
}

unint64_t COVER_computeEpochs(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v4 = 10 * a3;
  if (a1 / a3 >= a4)
    v5 = a1 / a3 / a4;
  else
    v5 = 1;
  v6 = a2 / v5;
  if (v6 < v4)
  {
    if (v4 >= a2)
      v6 = a2;
    else
      v6 = v4;
    v5 = a2 / v6;
  }
  return v5 | (unint64_t)(v6 << 32);
}

uint64_t COVER_checkTotalCompressedSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, const void *a7, unint64_t a8)
{
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  uint64_t CCtx;
  unint64_t CDict;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;

  v14 = 0;
  if (*(double *)(a1 + 16) >= 1.0)
    v15 = 0;
  else
    v15 = a5;
  v16 = a6 - v15;
  if (a6 > v15)
  {
    v14 = 0;
    v17 = (unint64_t *)(a2 + 8 * v15);
    do
    {
      v19 = *v17++;
      v18 = v19;
      if (v19 > v14)
        v14 = v18;
      --v16;
    }
    while (v16);
  }
  v20 = ZSTD_compressBound(v14);
  v21 = (char *)malloc_type_malloc(v20, 0x1C3DD92EuLL);
  CCtx = ZSTD_createCCtx();
  CDict = ZSTD_createCDict(a7, a8, *(_DWORD *)(a1 + 32));
  v24 = CDict;
  v25 = -1;
  if (v21 && CCtx && CDict)
  {
    if (*(double *)(a1 + 16) >= 1.0)
      v26 = 0;
    else
      v26 = a5;
    v27 = a6 - v26;
    if (a6 <= v26)
    {
      v25 = a8;
    }
    else
    {
      v28 = (unint64_t *)(a2 + 8 * v26);
      v25 = a8;
      v29 = (uint64_t *)(a4 + 8 * v26);
      while (1)
      {
        v30 = *v29++;
        v31 = (char *)(a3 + v30);
        v32 = *v28++;
        v33 = ZSTD_compress_usingCDict(CCtx, v21, v20, v31, v32, v24);
        if (v33 > 0xFFFFFFFFFFFFFF88)
          break;
        v25 += v33;
        if (!--v27)
          goto LABEL_22;
      }
      v25 = v33;
    }
  }
LABEL_22:
  ZSTD_freeCCtx(CCtx);
  ZSTD_freeCDict(v24);
  if (v21)
    free(v21);
  return v25;
}

double COVER_best_init(uint64_t a1)
{
  double result;

  if (a1)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 80) = -1;
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
  }
  return result;
}

uint64_t COVER_best_wait(uint64_t result)
{
  if (result && *(_QWORD *)(result + 8))
  {
    while (1)
      ;
  }
  return result;
}

void COVER_best_destroy(uint64_t a1)
{
  void *v1;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 8))
    {
      while (1)
        ;
    }
    v1 = *(void **)(a1 + 16);
    if (v1)
      free(v1);
  }
}

uint64_t COVER_best_start(uint64_t result)
{
  if (result)
    ++*(_QWORD *)(result + 8);
  return result;
}

_QWORD *COVER_best_finish(_QWORD *result, _OWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  size_t v4;
  unint64_t v5;
  const void *v6;
  __int128 v8;
  __int128 v9;

  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(a3 + 8);
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(const void **)a3;
    --result[1];
    if (v5 < result[10])
    {
      result = (_QWORD *)result[2];
      if (result)
      {
        if (v3[3] >= v4)
        {
LABEL_7:
          if (v6)
          {
            result = memcpy(result, v6, v4);
            v3[3] = v4;
            v9 = a2[1];
            v8 = a2[2];
            *((_OWORD *)v3 + 2) = *a2;
            *((_OWORD *)v3 + 3) = v9;
            *((_OWORD *)v3 + 4) = v8;
            v3[10] = v5;
          }
          return result;
        }
        free(result);
      }
      result = malloc_type_malloc(v4, 0x41048DB7uLL);
      v3[2] = result;
      if (!result)
      {
        v3[10] = -1;
        v3[3] = 0;
        return result;
      }
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t COVER_dictSelectionError@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = result;
  return result;
}

BOOL COVER_dictSelectionIsError(_QWORD *a1)
{
  return a1[2] > 0xFFFFFFFFFFFFFF88 || *a1 == 0;
}

void COVER_dictSelectionFree(void **a1)
{
  free(*a1);
}

void COVER_selectDict(size_t size@<X1>, char *a2@<X0>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, unint64_t a7@<X6>, unint64_t a8@<X7>, _QWORD *a9@<X8>, __int128 *a10, uint64_t a11)
{
  unint64_t v11;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  unint64_t i;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v18 = malloc_type_malloc(size, 0x5166AA6EuLL);
  v19 = malloc_type_malloc(size, 0xBEF57454uLL);
  v20 = v19;
  if (!v18 || !v19)
  {
LABEL_14:
    free(v18);
    free(v20);
    *a9 = 0;
    a9[1] = 0;
    a9[2] = a3;
    return;
  }
  v35 = a7;
  LODWORD(v11) = *((_DWORD *)a10 + 7);
  memcpy(v18, a2, a3);
  v22 = ZDICT_finalizeDictionary((char *)v18, size, (uint64_t *)a2, a3, a4, a5, a6, v21, *((_QWORD *)a10 + 4), HIDWORD(*((_QWORD *)a10 + 4)), *((_DWORD *)a10 + 10));
  if (ZDICT_isError(v22))
  {
    free(v18);
    free(v20);
    *a9 = 0;
    a9[1] = 0;
    a9[2] = v22;
    return;
  }
  v23 = a10[1];
  v39 = *a10;
  v40 = v23;
  v41 = a10[2];
  v24 = COVER_checkTotalCompressedSize((uint64_t)&v39, a5, a4, a11, v35, a8, v18, v22);
  v25 = v24;
  if (v24 >= 0xFFFFFFFFFFFFFF89)
  {
    free(v18);
    free(v20);
    *a9 = 0;
    a9[1] = 0;
    a9[2] = v25;
  }
  else
  {
    if (*((_DWORD *)a10 + 6))
    {
      v33 = v24;
      if (v22 >= 0x101)
      {
        v34 = &a2[a3];
        v26 = ((double)v11 / 100.0 + 1.0) * (double)v24;
        for (i = 256; i < v22; i = 2 * a3)
        {
          memcpy(v20, v18, v22);
          v25 = v25 & 0xFFFFFFFF00000000 | *((unsigned int *)a10 + 10);
          a3 = ZDICT_finalizeDictionary((char *)v20, size, (uint64_t *)&v34[-i], i, a4, a5, a6, v28, *((_QWORD *)a10 + 4), HIDWORD(*((_QWORD *)a10 + 4)), v25);
          if (ZDICT_isError(a3))
            goto LABEL_14;
          v29 = a10[1];
          v39 = *a10;
          v40 = v29;
          v41 = a10[2];
          v30 = COVER_checkTotalCompressedSize((uint64_t)&v39, a5, a4, a11, v35, a8, v20, a3);
          v31 = v30;
          if (v30 >= 0xFFFFFFFFFFFFFF89)
          {
            free(v18);
            free(v20);
            *a9 = 0;
            a9[1] = 0;
            a9[2] = v31;
            return;
          }
          if (v26 >= (double)v30)
          {
            *a9 = v20;
            a9[1] = a3;
            a9[2] = v30;
            v32 = v18;
            goto LABEL_18;
          }
        }
      }
      *a9 = v18;
      a9[1] = v22;
      a9[2] = v33;
    }
    else
    {
      *a9 = v18;
      a9[1] = v22;
      a9[2] = v24;
    }
    v32 = v20;
LABEL_18:
    free(v32);
  }
}

uint64_t HUF_optimalTableLog(unsigned int a1, unsigned int a2, unsigned int a3)
{
  return FSE_optimalTableLog_internal(a1, a2, a3, 1);
}

unint64_t HUF_writeCTable_wksp(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  unsigned int v26;

  v7 = -(int)a6 & 3;
  v8 = a7 - v7;
  if (a7 >= v7)
  {
    v9 = a6 + v7;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if (v8 < 0x2EC)
    return -1;
  if (a4 > 0xFF)
    return -46;
  *(_BYTE *)(v9 + 480) = 0;
  v14 = (a5 + 1);
  if (v14 >= 2)
  {
    v15 = (_BYTE *)(v9 + 481);
    v16 = v14 - 1;
    do
      *v15++ = v16--;
    while (v16);
  }
  if (a4)
  {
    v17 = (unsigned __int8 *)(a3 + 8);
    v18 = a4;
    v19 = (_BYTE *)(v9 + 493);
    do
    {
      v20 = *v17;
      v17 += 8;
      *v19++ = *(_BYTE *)(v9 + v20 + 480);
      --v18;
    }
    while (v18);
  }
  if (!a2)
    return -70;
  v26 = 12;
  if ((-(int)v9 & 3) != 0)
    return -1;
  if (a4 >= 2)
  {
    v21 = HIST_count_simple((void *)(v9 + 400), &v26, (unsigned __int8 *)(v9 + 493), a4);
    if (v21 != 1 && v21 != a4)
    {
      v22 = FSE_optimalTableLog(6u, a4, v26);
      result = FSE_normalizeCount((__int16 *)(v9 + 452), v22, (unsigned int *)(v9 + 400), a4, v26, 0);
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      result = FSE_writeNCount((_WORD *)(a1 + 1), a2 - 1, v9 + 452, v26, v22);
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      v23 = result;
      result = FSE_buildCTable_wksp((_WORD *)v9, (__int16 *)(v9 + 452), v26, v22, (_WORD *)(v9 + 236), 0xA4uLL);
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      result = FSE_compress_usingCTable((unint64_t *)(a1 + 1 + v23), a2 - (v23 + 1), v9 + 493, a4, (unsigned __int16 *)v9);
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      if (result)
      {
        result += v23;
        if (result > 0xFFFFFFFFFFFFFF88)
          return result;
        if (result >= 2 && result < a4 >> 1)
        {
          *(_BYTE *)a1 = result++;
          return result;
        }
      }
    }
  }
  if (a4 > 0x80)
    return -1;
  result = ((a4 + 1) >> 1) + 1;
  if (result > a2)
    return -70;
  *(_BYTE *)a1 = a4 + 127;
  *(_BYTE *)(v9 + a4 + 493) = 0;
  if (a4)
  {
    v24 = 0;
    v25 = (_BYTE *)(a1 + 1);
    do
    {
      *v25++ = *(_BYTE *)(v9 + v24 + 494) + 16 * *(_BYTE *)(v9 + v24 + 493);
      v24 += 2;
    }
    while (v24 < a4);
  }
  return result;
}

unint64_t HUF_writeCTable(uint64_t a1, unint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  _BYTE v11[748];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  bzero(v11, 0x2ECuLL);
  return HUF_writeCTable_wksp(a1, a2, a3, a4, a5, (uint64_t)v11, 0x2ECuLL);
}

unint64_t HUF_readCTable(_QWORD *a1, _DWORD *a2, char *a3, unint64_t a4, _DWORD *a5)
{
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  __int16 v24;
  _WORD *v25;
  __int16 *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _OWORD v41[3];
  int v42;
  _BYTE v43[264];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  memset(v43, 0, 256);
  v42 = 0;
  memset(v41, 0, sizeof(v41));
  v32 = 0;
  result = HUF_readStats(v43, 0x100uLL, (uint64_t)v41, &v32, (_DWORD *)&v32 + 1, a3, a4);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    *a5 = LODWORD(v41[0]) != 0;
    v9 = HIDWORD(v32);
    if (HIDWORD(v32) <= 0xC)
    {
      v10 = v32;
      if (v32 <= *a2 + 1)
      {
        v11 = a1 + 1;
        *a1 = HIDWORD(v32);
        if ((_DWORD)v9)
        {
          v12 = 0;
          v13 = 0;
          do
          {
            v14 = *((_DWORD *)v41 + v12 + 1) << v12;
            *((_DWORD *)v41 + v12 + 1) = v13;
            v13 += v14;
            ++v12;
          }
          while (v9 != v12);
        }
        if ((_DWORD)v10)
        {
          v15 = v43;
          v16 = v10;
          v17 = a1 + 1;
          do
          {
            v18 = *v15++;
            v19 = v9 + 1 - v18;
            if (v18)
              v20 = v19;
            else
              v20 = 0;
            *v17++ = v20;
            --v16;
          }
          while (v16);
          v37 = 0;
          v38 = 0;
          v40 = 0;
          v39 = 0;
          v33 = 0;
          v34 = 0;
          v36 = 0;
          v21 = v10;
          v22 = (unsigned __int8 *)(a1 + 1);
          v35 = 0;
          do
          {
            v23 = *v22;
            v22 += 8;
            ++*((_WORD *)&v37 + v23);
            --v21;
          }
          while (v21);
        }
        else
        {
          v37 = 0;
          v38 = 0;
          v40 = 0;
          v39 = 0;
          v33 = 0;
          v34 = 0;
          v36 = 0;
          v35 = 0;
        }
        *((_WORD *)&v33 + (v9 + 1)) = 0;
        if ((_DWORD)v9)
        {
          v24 = 0;
          v25 = (_WORD *)&v33 + v9;
          v26 = (__int16 *)&v37 + v9;
          do
          {
            *v25-- = v24;
            v27 = *v26--;
            v24 = (unsigned __int16)(v27 + v24) >> 1;
            LODWORD(v9) = v9 - 1;
          }
          while ((_DWORD)v9);
        }
        if ((_DWORD)v10)
        {
          v28 = v10;
          do
          {
            v29 = *v11;
            v30 = *v11;
            v31 = *((unsigned __int16 *)&v33 + v30);
            *((_WORD *)&v33 + v30) = v31 + 1;
            if (v30)
              *v11 = (v31 << -(char)v30) | v29;
            ++v11;
            --v28;
          }
          while (v28);
        }
        *a2 = v10 - 1;
      }
      else
      {
        return -48;
      }
    }
    else
    {
      return -44;
    }
  }
  return result;
}

uint64_t HUF_getNbBitsFromCTable(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + 8 * a2 + 8);
}

uint64_t HUF_buildCTable_wksp(uint64_t *a1, unsigned int *a2, uint64_t a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t result;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  _DWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  _WORD *v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  unint64_t v43;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  BOOL v55;
  _BOOL4 v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  BOOL v61;
  int v62;
  _DWORD *v63;
  _DWORD *v64;
  int v65;
  _BYTE *v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  unsigned int v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  signed int v85;
  __int128 v86;
  unsigned __int8 *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  unsigned int v103;
  unsigned __int8 *v104;
  unsigned int v105;
  __int16 v106;
  uint64_t *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  int v119;
  unsigned __int8 *v120;
  int v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  unint64_t v125;
  _QWORD v126[3];
  __int16 v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v6 = -(int)a5 & 3;
  v7 = a6 - v6;
  if (a6 >= v6)
  {
    v8 = (_DWORD *)(a5 + v6);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  if (v7 >> 8 < 0x13)
    return -66;
  if (a3 > 0xFF)
    return -46;
  v14 = v8 + 2;
  v15 = v8 + 1024;
  v16 = (a3 + 1);
  bzero(v8, 0x1300uLL);
  v17 = a2;
  v18 = (a3 + 1);
  do
  {
    v20 = *v17++;
    v19 = v20;
    v21 = (__clz(v20) ^ 0x1F) + 158;
    if (v20 >= 0xA5)
      v19 = v21;
    ++LOWORD(v15[v19]);
    --v18;
  }
  while (v18);
  v22 = 0;
  v23 = *((unsigned __int16 *)v8 + 2430);
  do
  {
    v24 = &v8[v22];
    v23 += LOWORD(v8[v22 + 1214]);
    *((_WORD *)v24 + 2428) = v23;
    *((_WORD *)v24 + 2429) = v23;
    --v22;
  }
  while (v22 != -191);
  v25 = 0;
  do
  {
    v26 = a2[v25];
    v27 = (__clz(v26) ^ 0x1F) + 158;
    if (v26 < 0xA5)
      v27 = a2[v25];
    v28 = &v15[v27 + 1];
    v29 = *((unsigned __int16 *)v28 + 1);
    *((_WORD *)v28 + 1) = v29 + 1;
    v30 = &v14[2 * v29];
    *v30 = v26;
    *((_BYTE *)v30 + 6) = v25++;
  }
  while (v16 != v25);
  v31 = 0x3FFFFFFFFFFFFFE6;
  do
  {
    v32 = LOWORD(v8[v31 + 1215]);
    v33 = HIWORD(v8[v31 + 1215]) - (_DWORD)v32;
    if (v33 >= 2)
      HUF_simpleQuickSort((uint64_t)&v14[2 * v32], 0, v33 - 1);
    ++v31;
  }
  while (v31 * 4);
  v34 = 0;
  v35 = a3 << 32;
  v36 = a3 + 1;
  v37 = &v8[2 * (int)a3 + 5];
  v38 = -1;
  do
  {
    --v34;
    v39 = *((_DWORD *)v37 - 3);
    v35 -= 0x100000000;
    --v36;
    v37 -= 4;
    --v38;
  }
  while (!v39);
  if (a4)
    v40 = a4;
  else
    v40 = 11;
  v41 = a3 + v34;
  v42 = a3 + v34 + 1;
  v43 = (a3 + v34 + 256);
  v44 = (char *)v14 + (v35 >> 29);
  v8[514] = *(_DWORD *)v44 + v39;
  *((_WORD *)v44 + 2) = 256;
  *v37 = 256;
  if (v42 >= 2)
  {
    v45 = a3 + v38;
    v46 = 257;
    if (v43 > 0x101)
      v46 = (v41 + 256);
    v47 = 8 * v46;
    v48 = 2048;
    do
    {
      v8[(unint64_t)v48 / 4 + 4] = 0x40000000;
      v48 += 8;
    }
    while (v47 != v48);
    *v8 = 0x80000000;
    if ((int)v43 <= 257)
      v49 = 257;
    else
      v49 = v43;
    v50 = v8 + 516;
    v51 = 256;
    v52 = 256;
    do
    {
      v53 = v14[2 * v45];
      ++v51;
      v54 = v14[2 * v52];
      v55 = v53 >= v54;
      v56 = v53 < v54;
      if (v55)
        v57 = v52 + 1;
      else
        v57 = v52;
      if (!v55)
        v52 = v45;
      v58 = v45 - v56;
      v59 = v14[2 * v58];
      v60 = v14[2 * v57];
      v61 = v59 >= v60;
      if (v59 >= v60)
        v62 = v57;
      else
        v62 = v58;
      v63 = &v14[2 * v52];
      v64 = &v14[2 * v62];
      *v50 = *v64 + *v63;
      v50 += 2;
      v65 = !v61;
      if (v61)
        v52 = v57 + 1;
      else
        v52 = v57;
      v45 = v58 - v65;
      *((_WORD *)v64 + 2) = v51;
      *((_WORD *)v63 + 2) = v51;
    }
    while (v49 != v51);
    HIBYTE(v14[2 * (int)v43 + 1]) = 0;
    v66 = (char *)&v8[2 * (v41 + 255) + 3] + 3;
    do
    {
      *v66 = HIBYTE(v14[2 * *(unsigned __int16 *)(v66 - 3) + 1]) + 1;
      v66 -= 8;
      LODWORD(v43) = v43 - 1;
    }
    while ((int)v43 > 256);
  }
  else
  {
    *v8 = 0x80000000;
    HIBYTE(v14[2 * (int)v43 + 1]) = 0;
  }
  v67 = (v41 + 2);
  if ((v42 & 0x80000000) == 0)
  {
    v68 = (char *)v8 + 15;
    v69 = v67;
    do
    {
      *v68 = HIBYTE(v14[2 * *(unsigned __int16 *)(v68 - 3) + 1]) + 1;
      v68 += 8;
      --v69;
    }
    while (v69);
  }
  v70 = HIBYTE(v14[2 * v36 + 1]);
  LODWORD(v71) = v70;
  v72 = v70 - v40;
  if (v70 > v40)
  {
    LODWORD(v71) = v40;
    v73 = v35 + 0x100000000;
    v74 = *((unsigned __int8 *)v14 + ((v35 + 0x100000000) >> 29) + 7);
    if (v40 >= v74)
    {
      v75 = 0;
      v80 = v73 >> 32;
      LODWORD(v76) = a3 + v34 + 1;
    }
    else
    {
      v75 = 0;
      v76 = (a3 + v34 + 1);
      v77 = (char *)&v8[2 * (int)v76 + 3] + 3;
      v78 = v76 << 32;
      do
      {
        v75 += (1 << v72) + (-1 << (v70 - v74));
        *v77 = v40;
        v79 = *(v77 - 8);
        v77 -= 8;
        LOBYTE(v74) = v79;
        v78 -= 0x100000000;
        LODWORD(v76) = v76 - 1;
      }
      while (v40 < v79);
      v80 = v78 >> 32;
    }
    v81 = v76 + 1;
    v82 = v80 + 1;
    v83 = (unsigned __int8 *)&v8[2 * v80 + 3] + 3;
    do
    {
      v84 = *v83;
      v83 -= 8;
      --v81;
      --v82;
    }
    while (v40 == v84);
    v85 = v75 >> v72;
    v125 = 0xF0F0F0F0F0F0F0F0;
    *(_QWORD *)&v86 = 0xF0F0F0F0F0F0F0F0;
    *((_QWORD *)&v86 + 1) = 0xF0F0F0F0F0F0F0F0;
    v123 = v86;
    v124 = v86;
    v122 = v86;
    if ((v82 & 0x80000000) == 0)
    {
      v87 = (unsigned __int8 *)&v8[2 * v81 + 3] + 3;
      v88 = v40;
      do
      {
        v90 = *v87;
        v87 -= 8;
        v89 = v90;
        if (v88 <= v90)
        {
          v91 = v81;
        }
        else
        {
          *((_DWORD *)&v122 + v40 - v89) = v81;
          v91 = v81;
          v88 = v89;
        }
        --v81;
      }
      while (v91 > 0);
    }
    if (v85 >= 1)
    {
      do
      {
        v92 = __clz(v85);
        if (v92 == 31)
        {
LABEL_78:
          LODWORD(v93) = 1;
        }
        else
        {
          v93 = 32 - v92;
          while (1)
          {
            v94 = *((unsigned int *)&v122 + v93);
            v95 = v93 - 1;
            if ((_DWORD)v94 != -252645136)
            {
              v96 = *((unsigned int *)&v122 + v95);
              if ((_DWORD)v96 == -252645136 || v14[2 * v94] <= (2 * v14[2 * v96]))
                break;
            }
            --v93;
            if ((v95 & 0xFFFFFFFE) == 0)
              goto LABEL_78;
          }
          if (v93 > 0xC)
            goto LABEL_84;
        }
        v97 = 4 * v93;
        while (*(_DWORD *)((char *)&v122 + v97) == -252645136)
        {
          LODWORD(v93) = v93 + 1;
          v97 += 4;
          if (v97 == 52)
          {
            LODWORD(v93) = 13;
            break;
          }
        }
LABEL_84:
        v98 = v93 - 1;
        v99 = *((unsigned int *)&v122 + v93);
        v100 = *((_DWORD *)&v122 + (v93 - 1));
        ++HIBYTE(v14[2 * v99 + 1]);
        if (v100 == -252645136)
          v101 = v99;
        else
          v101 = v100;
        *((_DWORD *)&v122 + v98) = v101;
        v102 = -252645136;
        if ((_DWORD)v99)
        {
          v103 = v99 - 1;
          if (v40 - (_DWORD)v93 == HIBYTE(v14[2 * v103 + 1]))
            v102 = v103;
          else
            v102 = -252645136;
        }
        v85 += -1 << v98;
        *((_DWORD *)&v122 + v93) = v102;
      }
      while (v85 > 0);
    }
    if (v85 < 0)
    {
      v116 = DWORD1(v122);
      do
      {
        if (v85 < 0)
          v117 = -1;
        else
          v117 = v85;
        v118 = v117 + 1;
        v119 = v85;
        while (v116 != -252645136)
        {
          --HIBYTE(v14[2 * ++v116 + 1]);
          if (v118 == ++v119)
            goto LABEL_93;
        }
        v116 = v82 + 2;
        v120 = (unsigned __int8 *)&v8[2 * v82++ + 3] + 3;
        do
        {
          v121 = *v120;
          v120 -= 8;
          --v82;
          --v116;
        }
        while (v40 == v121);
        --HIBYTE(v14[2 * v116 + 1]);
        v85 = v119 + 1;
      }
      while (v119 <= -2);
    }
  }
LABEL_93:
  if (v71 > 0xC)
    return -1;
  v122 = 0uLL;
  WORD4(v123) = 0;
  *(_QWORD *)&v123 = 0;
  memset(v126, 0, sizeof(v126));
  v127 = 0;
  if ((v42 & 0x80000000) == 0)
  {
    v104 = (unsigned __int8 *)v8 + 15;
    do
    {
      v105 = *v104;
      v104 += 8;
      ++*((_WORD *)&v122 + v105);
      --v67;
    }
    while (v67);
  }
  result = v71;
  if ((int)v71 >= 1)
  {
    v106 = 0;
    v71 = v71;
    do
    {
      *((_WORD *)v126 + v71) = v106;
      v106 = (unsigned __int16)(*((_WORD *)&v122 + v71) + v106) >> 1;
    }
    while (v71-- > 1);
  }
  if ((a3 & 0x80000000) == 0)
  {
    v108 = a1 + 1;
    v109 = (unsigned __int8 *)v8 + 15;
    v110 = (a3 + 1);
    do
    {
      v111 = *(v109 - 1);
      v112 = *v109;
      v109 += 8;
      v108[v111] = v112;
      --v110;
    }
    while (v110);
    do
    {
      v113 = *v108;
      v114 = *v108;
      v115 = *((unsigned __int16 *)v126 + v114);
      *((_WORD *)v126 + v114) = v115 + 1;
      if (v114)
        *v108 = (v115 << -(char)v114) | v113;
      ++v108;
      --v16;
    }
    while (v16);
  }
  *a1 = result;
  return result;
}

unint64_t HUF_estimateCompressedSize(uint64_t a1, unsigned int *a2, int a3)
{
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  if (a3 < 0)
    return 0;
  v3 = 0;
  v4 = (unsigned __int8 *)(a1 + 8);
  v5 = (a3 + 1);
  do
  {
    v7 = *v4;
    v4 += 8;
    v6 = v7;
    v8 = *a2++;
    v3 += v6 * (unint64_t)v8;
    --v5;
  }
  while (v5);
  return v3 >> 3;
}

BOOL HUF_validateCTable(uint64_t a1, int *a2, int a3)
{
  int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;

  if (a3 < 0)
    return 1;
  v3 = 0;
  v4 = (unsigned __int8 *)(a1 + 8);
  v5 = (a3 + 1);
  do
  {
    v6 = *a2++;
    v9 = v6 == 0;
    v8 = *v4;
    v4 += 8;
    v7 = v8;
    v9 = !v9 && v7 == 0;
    v10 = v9;
    v3 |= v10;
    --v5;
  }
  while (v5);
  return v3 == 0;
}

uint64_t HUF_compress1X_usingCTable_internal(unint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  int v12;
  int v13;
  unsigned __int8 v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  int v24;
  unsigned __int8 v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t j;
  uint64_t v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  char v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  BOOL v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  char *v58;
  unsigned __int8 v59;
  unsigned __int8 *v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  unsigned __int8 v64;
  unsigned __int8 *v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  unsigned __int8 v69;
  unsigned __int8 *v70;
  unsigned int v71;
  int v72;
  uint64_t v73;
  unsigned __int8 v74;
  unsigned __int8 *v75;
  unsigned int v76;
  int v77;
  uint64_t v78;
  unsigned __int8 v79;
  unsigned __int8 *v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  uint64_t k;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t m;
  uint64_t v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  unint64_t *v100;
  uint64_t v101;
  char v102;
  unsigned __int8 v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t i7;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t i8;
  uint64_t v114;
  char v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unsigned __int8 v119;
  uint64_t i9;
  uint64_t v121;
  unint64_t *v122;
  uint64_t v123;
  char v124;
  unsigned __int8 v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t n;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t ii;
  uint64_t v136;
  char v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int8 v141;
  uint64_t jj;
  uint64_t v143;
  unint64_t *v144;
  uint64_t v145;
  char v146;
  unsigned __int8 v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t kk;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t mm;
  uint64_t v158;
  char v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unsigned __int8 v163;
  uint64_t nn;
  uint64_t v165;
  unint64_t *v166;
  uint64_t v167;
  char v168;
  unsigned __int8 v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t i1;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t i2;
  uint64_t v180;
  char v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unsigned __int8 v185;
  uint64_t i3;
  uint64_t v187;
  unint64_t *v188;
  uint64_t v189;
  char v190;
  unsigned __int8 v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t i4;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t i5;
  uint64_t v202;
  char v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unsigned __int8 v207;
  uint64_t i6;
  uint64_t v209;
  unint64_t *v210;
  uint64_t v211;
  char v212;
  unsigned __int8 v213;
  unint64_t v214;
  unint64_t v215;

  if (a2 <= 8)
    return 0;
  v9 = *a5;
  v7 = a5 + 1;
  v8 = v9;
  v10 = (unint64_t)a1 + a2 - 8;
  if ((((unint64_t)v9 * a4) >> 3) + 8 > a2 || v8 >= 0xC)
  {
    if ((int)a4 <= 0)
      v12 = -(-(int)a4 & 3);
    else
      v12 = a4 & 3;
    v13 = v12 - 1;
    if (v12 < 1)
    {
      v15 = 0;
      v20 = 0;
      v22 = a1;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      v16 = (unsigned __int8 *)(a3 + (int)a4 - 1);
      v17 = v12 + 1;
      do
      {
        v18 = *v16--;
        v19 = v7[v18];
        v15 = (v15 >> v19) | v19 & 0xFFFFFFFFFFFFFF00;
        v14 += v19;
        --v17;
      }
      while (v17 > 1);
      LODWORD(a4) = ~v13 + a4;
      v20 = v14 & 7;
      *a1 = v15 >> -v14;
      v21 = (unint64_t *)((char *)a1 + ((unint64_t)v14 >> 3));
      if ((unint64_t)v21 <= v10)
        v22 = v21;
      else
        v22 = (unint64_t *)((char *)a1 + a2 - 8);
    }
    if ((a4 & 7) != 0)
    {
      for (i = 0; i != -3; --i)
      {
        v31 = v7[*(unsigned __int8 *)(a3 + (int)a4 - 1 + i)];
        v15 = (v15 >> v31) | v31;
        LOBYTE(v20) = v31 + v20;
      }
      a4 = (int)a4 - 4;
      v32 = v7[*(unsigned __int8 *)(a3 + a4)];
      v15 = (v15 >> v32) | v32 & 0xFFFFFFFFFFFFFF00;
      LOBYTE(v32) = v32 + v20;
      v20 = v32 & 7;
      *v22 = v15 >> -(char)v32;
      v33 = (_QWORD *)((char *)v22 + ((unint64_t)v32 >> 3));
      if ((unint64_t)v33 <= v10)
        v22 = v33;
      else
        v22 = (unint64_t *)((char *)a1 + a2 - 8);
    }
    if ((int)a4 >= 1)
    {
      v34 = a4;
      v35 = a3 + a4;
      v36 = v35 - 1;
      v37 = v35 - 5;
      do
      {
        for (j = 0; j != -3; --j)
        {
          v39 = v7[*(unsigned __int8 *)(v36 + j)];
          v15 = (v15 >> v39) | v39;
          LOBYTE(v20) = v39 + v20;
        }
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = v7[*(unsigned __int8 *)(v34 + a3 - 4)];
        v44 = (v15 >> v43) | v43 & 0xFFFFFFFFFFFFFF00;
        v45 = v43 + v20;
        *v22 = v44 >> -v45;
        v46 = (_QWORD *)((char *)v22 + ((unint64_t)v45 >> 3));
        do
        {
          v47 = v7[*(unsigned __int8 *)(v37 + v40)];
          v42 = (v42 >> v47) | v47;
          v41 += v47;
          --v40;
        }
        while (v40 != -3);
        v48 = v45 & 7;
        if ((unint64_t)v46 <= v10)
          v49 = v46;
        else
          v49 = (_QWORD *)v10;
        v50 = v7[*(unsigned __int8 *)(a3 + v34 - 8)];
        v51 = v50 + v41;
        v52 = v51 + v48;
        v53 = v52;
        v22 = (_QWORD *)((char *)v49 + ((unint64_t)v52 >> 3));
        if ((unint64_t)v22 > v10)
          v22 = (_QWORD *)v10;
        v36 -= 8;
        v37 -= 8;
        v15 = (v42 >> v50) | v50 & 0xFFFFFFFFFFFFFF00 | (v44 >> v51);
        v20 = v52 & 7;
        *v49 = v15 >> -v53;
        v54 = v34 <= 8;
        v34 -= 8;
      }
      while (!v54);
    }
  }
  else
  {
    switch(v8)
    {
      case 7u:
        if ((int)a4 <= 0)
          v23 = -(-(int)a4 & 7);
        else
          v23 = a4 & 7;
        v24 = v23 - 1;
        if (v23 < 1)
        {
          v15 = 0;
          v20 = 0;
          v22 = a1;
        }
        else
        {
          v25 = 0;
          v15 = 0;
          v26 = (unsigned __int8 *)(a3 + (int)a4 - 1);
          v27 = v23 + 1;
          do
          {
            v28 = *v26--;
            v29 = v7[v28];
            v15 = (v15 >> v29) | v29 & 0xFFFFFFFFFFFFFF00;
            v25 += v29;
            --v27;
          }
          while (v27 > 1);
          LODWORD(a4) = ~v24 + a4;
          v20 = v25 & 7;
          *a1 = v15 >> -v25;
          v22 = (unint64_t *)((char *)a1 + ((unint64_t)v25 >> 3));
        }
        if ((a4 & 0xF) != 0)
        {
          for (k = 0; k != -7; --k)
          {
            v85 = v7[*(unsigned __int8 *)(a3 + (int)a4 - 1 + k)];
            v15 = (v15 >> v85) | v85;
            LOBYTE(v20) = v85 + v20;
          }
          a4 = (int)a4 - 8;
          v86 = v7[*(unsigned __int8 *)(a3 + a4)];
          v15 = (v15 >> v86) | v86 & 0xFFFFFFFFFFFFFF00;
          LOBYTE(v86) = v86 + v20;
          v20 = v86 & 7;
          *v22 = v15 >> -(char)v86;
          v22 = (_QWORD *)((char *)v22 + ((unint64_t)v86 >> 3));
        }
        if ((int)a4 >= 1)
        {
          v87 = a4;
          v88 = a3 + a4;
          v89 = v88 - 1;
          v90 = v88 - 9;
          do
          {
            for (m = 0; m != -7; --m)
            {
              v92 = v7[*(unsigned __int8 *)(v89 + m)];
              v15 = (v15 >> v92) | v92;
              LOBYTE(v20) = v92 + v20;
            }
            v93 = 0;
            v94 = 0;
            v95 = 0;
            v96 = v7[*(unsigned __int8 *)(v87 + a3 - 8)];
            v97 = (v15 >> v96) | v96 & 0xFFFFFFFFFFFFFF00;
            v98 = v96 + v20;
            *v22 = v97 >> -v98;
            do
            {
              v99 = v7[*(unsigned __int8 *)(v90 + v93)];
              v95 = (v95 >> v99) | v99;
              v94 += v99;
              --v93;
            }
            while (v93 != -7);
            v100 = (_QWORD *)((char *)v22 + ((unint64_t)v98 >> 3));
            v89 -= 16;
            v90 -= 16;
            v54 = v87 <= 16;
            v87 -= 16;
            v101 = v7[*(unsigned __int8 *)(a3 + v87)];
            v102 = v101 + v94;
            v15 = (v95 >> v101) | v101 & 0xFFFFFFFFFFFFFF00 | (v97 >> v102);
            v103 = v102 + (v98 & 7);
            v104 = v103;
            v105 = v15 >> -v103;
            v20 = v103 & 7;
            *v100 = v105;
            v22 = (unint64_t *)((char *)v100 + (v104 >> 3));
          }
          while (!v54);
        }
        break;
      case 8u:
        if ((int)a4 % 7 < 1)
        {
          v15 = 0;
          v20 = 0;
          v22 = a1;
        }
        else
        {
          v64 = 0;
          v15 = 0;
          v65 = (unsigned __int8 *)(a3 + (int)a4 - 1);
          v66 = (int)a4 % 7 + 1;
          do
          {
            v67 = *v65--;
            v68 = v7[v67];
            v15 = (v15 >> v68) | v68 & 0xFFFFFFFFFFFFFF00;
            v64 += v68;
            --v66;
          }
          while (v66 > 1);
          LODWORD(a4) = a4 - (int)a4 % 7;
          v20 = v64 & 7;
          *a1 = v15 >> -v64;
          v22 = (unint64_t *)((char *)a1 + ((unint64_t)v64 >> 3));
        }
        HIDWORD(v128) = -1227133513 * a4 + 306783378;
        LODWORD(v128) = HIDWORD(v128);
        if ((v128 >> 1) >= 0x12492493)
        {
          v129 = (int)a4;
          for (n = -1; n != -7; --n)
          {
            v131 = v7[*(unsigned __int8 *)(a3 + (int)a4 + n)];
            v15 = (v15 >> v131) | v131;
            LOBYTE(v20) = v131 + v20;
          }
          LODWORD(a4) = a4 - 7;
          v132 = v7[*(unsigned __int8 *)(a3 + v129 - 7)];
          v15 = (v15 >> v132) | v132 & 0xFFFFFFFFFFFFFF00;
          LOBYTE(v132) = v132 + v20;
          v20 = v132 & 7;
          *v22 = v15 >> -(char)v132;
          v22 = (_QWORD *)((char *)v22 + ((unint64_t)v132 >> 3));
        }
        if ((int)a4 >= 1)
        {
          v133 = a4;
          v134 = a3 + a4;
          do
          {
            for (ii = -1; ii != -7; --ii)
            {
              v136 = v7[*(unsigned __int8 *)(v134 + ii)];
              v15 = (v15 >> v136) | v136;
              LOBYTE(v20) = v136 + v20;
            }
            v137 = 0;
            v138 = 0;
            v139 = v7[*(unsigned __int8 *)(v133 + a3 - 7)];
            v140 = (v15 >> v139) | v139 & 0xFFFFFFFFFFFFFF00;
            v141 = v139 + v20;
            *v22 = v140 >> -v141;
            for (jj = -8; jj != -14; --jj)
            {
              v143 = v7[*(unsigned __int8 *)(v134 + jj)];
              v138 = (v138 >> v143) | v143;
              v137 += v143;
            }
            v144 = (_QWORD *)((char *)v22 + ((unint64_t)v141 >> 3));
            v134 -= 14;
            v54 = v133 <= 14;
            v133 -= 14;
            v145 = v7[*(unsigned __int8 *)(a3 + v133)];
            v146 = v145 + v137;
            v15 = (v138 >> v145) | v145 & 0xFFFFFFFFFFFFFF00 | (v140 >> v146);
            v147 = v146 + (v141 & 7);
            v148 = v147;
            v149 = v15 >> -v147;
            v20 = v147 & 7;
            *v144 = v149;
            v22 = (unint64_t *)((char *)v144 + (v148 >> 3));
          }
          while (!v54);
        }
        break;
      case 9u:
        if ((int)a4 % 6 < 1)
        {
          v15 = 0;
          v20 = 0;
          v22 = a1;
        }
        else
        {
          v69 = 0;
          v15 = 0;
          v70 = (unsigned __int8 *)(a3 + (int)a4 - 1);
          v71 = (int)a4 % 6 + 1;
          do
          {
            v72 = *v70--;
            v73 = v7[v72];
            v15 = (v15 >> v73) | v73 & 0xFFFFFFFFFFFFFF00;
            v69 += v73;
            --v71;
          }
          while (v71 > 1);
          LODWORD(a4) = a4 - (int)a4 % 6;
          v20 = v69 & 7;
          *a1 = v15 >> -v69;
          v22 = (unint64_t *)((char *)a1 + ((unint64_t)v69 >> 3));
        }
        HIDWORD(v150) = -1431655765 * a4 + 715827880;
        LODWORD(v150) = HIDWORD(v150);
        if ((v150 >> 2) >= 0x15555555)
        {
          v151 = (int)a4;
          for (kk = -1; kk != -6; --kk)
          {
            v153 = v7[*(unsigned __int8 *)(a3 + (int)a4 + kk)];
            v15 = (v15 >> v153) | v153;
            LOBYTE(v20) = v153 + v20;
          }
          LODWORD(a4) = a4 - 6;
          v154 = v7[*(unsigned __int8 *)(a3 + v151 - 6)];
          v15 = (v15 >> v154) | v154 & 0xFFFFFFFFFFFFFF00;
          LOBYTE(v154) = v154 + v20;
          v20 = v154 & 7;
          *v22 = v15 >> -(char)v154;
          v22 = (_QWORD *)((char *)v22 + ((unint64_t)v154 >> 3));
        }
        if ((int)a4 >= 1)
        {
          v155 = a4;
          v156 = a3 + a4;
          do
          {
            for (mm = -1; mm != -6; --mm)
            {
              v158 = v7[*(unsigned __int8 *)(v156 + mm)];
              v15 = (v15 >> v158) | v158;
              LOBYTE(v20) = v158 + v20;
            }
            v159 = 0;
            v160 = 0;
            v161 = v7[*(unsigned __int8 *)(v155 + a3 - 6)];
            v162 = (v15 >> v161) | v161 & 0xFFFFFFFFFFFFFF00;
            v163 = v161 + v20;
            *v22 = v162 >> -v163;
            for (nn = -7; nn != -12; --nn)
            {
              v165 = v7[*(unsigned __int8 *)(v156 + nn)];
              v160 = (v160 >> v165) | v165;
              v159 += v165;
            }
            v166 = (_QWORD *)((char *)v22 + ((unint64_t)v163 >> 3));
            v156 -= 12;
            v54 = v155 <= 12;
            v155 -= 12;
            v167 = v7[*(unsigned __int8 *)(a3 + v155)];
            v168 = v167 + v159;
            v15 = (v160 >> v167) | v167 & 0xFFFFFFFFFFFFFF00 | (v162 >> v168);
            v169 = v168 + (v163 & 7);
            v170 = v169;
            v171 = v15 >> -v169;
            v20 = v169 & 7;
            *v166 = v171;
            v22 = (unint64_t *)((char *)v166 + (v170 >> 3));
          }
          while (!v54);
        }
        break;
      case 0xAu:
        if ((int)a4 % 5 < 1)
        {
          v15 = 0;
          v20 = 0;
          v22 = a1;
        }
        else
        {
          v74 = 0;
          v15 = 0;
          v75 = (unsigned __int8 *)(a3 + (int)a4 - 1);
          v76 = (int)a4 % 5 + 1;
          do
          {
            v77 = *v75--;
            v78 = v7[v77];
            v15 = (v15 >> v78) | v78 & 0xFFFFFFFFFFFFFF00;
            v74 += v78;
            --v76;
          }
          while (v76 > 1);
          LODWORD(a4) = a4 - (int)a4 % 5;
          v20 = v74 & 7;
          *a1 = v15 >> -v74;
          v22 = (unint64_t *)((char *)a1 + ((unint64_t)v74 >> 3));
        }
        HIDWORD(v172) = -858993459 * a4 + 429496728;
        LODWORD(v172) = HIDWORD(v172);
        if ((v172 >> 1) >= 0x19999999)
        {
          v173 = (int)a4;
          for (i1 = -1; i1 != -5; --i1)
          {
            v175 = v7[*(unsigned __int8 *)(a3 + (int)a4 + i1)];
            v15 = (v15 >> v175) | v175;
            LOBYTE(v20) = v175 + v20;
          }
          LODWORD(a4) = a4 - 5;
          v176 = v7[*(unsigned __int8 *)(a3 + v173 - 5)];
          v15 = (v15 >> v176) | v176;
          LOBYTE(v176) = v176 + v20;
          v20 = v176 & 7;
          *v22 = v15 >> -(char)v176;
          v22 = (_QWORD *)((char *)v22 + ((unint64_t)v176 >> 3));
        }
        if ((int)a4 >= 1)
        {
          v177 = a4;
          v178 = a3 + a4;
          do
          {
            for (i2 = -1; i2 != -5; --i2)
            {
              v180 = v7[*(unsigned __int8 *)(v178 + i2)];
              v15 = (v15 >> v180) | v180;
              LOBYTE(v20) = v180 + v20;
            }
            v181 = 0;
            v182 = 0;
            v183 = v7[*(unsigned __int8 *)(v177 + a3 - 5)];
            v184 = (v15 >> v183) | v183;
            v185 = v183 + v20;
            *v22 = v184 >> -v185;
            for (i3 = -6; i3 != -10; --i3)
            {
              v187 = v7[*(unsigned __int8 *)(v178 + i3)];
              v182 = (v182 >> v187) | v187;
              v181 += v187;
            }
            v188 = (_QWORD *)((char *)v22 + ((unint64_t)v185 >> 3));
            v178 -= 10;
            v54 = v177 <= 10;
            v177 -= 10;
            v189 = v7[*(unsigned __int8 *)(a3 + v177)];
            v190 = v189 + v181;
            v15 = (v182 >> v189) | (v184 >> v190) | v189;
            v191 = v190 + (v185 & 7);
            v192 = v191;
            v193 = v15 >> -v191;
            v20 = v191 & 7;
            *v188 = v193;
            v22 = (unint64_t *)((char *)v188 + (v192 >> 3));
          }
          while (!v54);
        }
        break;
      case 0xBu:
        if ((int)a4 % 5 < 1)
        {
          v15 = 0;
          v20 = 0;
          v22 = a1;
        }
        else
        {
          v79 = 0;
          v15 = 0;
          v80 = (unsigned __int8 *)(a3 + (int)a4 - 1);
          v81 = (int)a4 % 5 + 1;
          do
          {
            v82 = *v80--;
            v83 = v7[v82];
            v15 = (v15 >> v83) | v83 & 0xFFFFFFFFFFFFFF00;
            v79 += v83;
            --v81;
          }
          while (v81 > 1);
          LODWORD(a4) = a4 - (int)a4 % 5;
          v20 = v79 & 7;
          *a1 = v15 >> -v79;
          v22 = (unint64_t *)((char *)a1 + ((unint64_t)v79 >> 3));
        }
        HIDWORD(v194) = -858993459 * a4 + 429496728;
        LODWORD(v194) = HIDWORD(v194);
        if ((v194 >> 1) >= 0x19999999)
        {
          v195 = (int)a4;
          for (i4 = -1; i4 != -5; --i4)
          {
            v197 = v7[*(unsigned __int8 *)(a3 + (int)a4 + i4)];
            v15 = (v15 >> v197) | v197;
            LOBYTE(v20) = v197 + v20;
          }
          LODWORD(a4) = a4 - 5;
          v198 = v7[*(unsigned __int8 *)(a3 + v195 - 5)];
          v15 = (v15 >> v198) | v198 & 0xFFFFFFFFFFFFFF00;
          LOBYTE(v198) = v198 + v20;
          v20 = v198 & 7;
          *v22 = v15 >> -(char)v198;
          v22 = (_QWORD *)((char *)v22 + ((unint64_t)v198 >> 3));
        }
        if ((int)a4 >= 1)
        {
          v199 = a4;
          v200 = a3 + a4;
          do
          {
            for (i5 = -1; i5 != -5; --i5)
            {
              v202 = v7[*(unsigned __int8 *)(v200 + i5)];
              v15 = (v15 >> v202) | v202;
              LOBYTE(v20) = v202 + v20;
            }
            v203 = 0;
            v204 = 0;
            v205 = v7[*(unsigned __int8 *)(v199 + a3 - 5)];
            v206 = (v15 >> v205) | v205 & 0xFFFFFFFFFFFFFF00;
            v207 = v205 + v20;
            *v22 = v206 >> -v207;
            for (i6 = -6; i6 != -10; --i6)
            {
              v209 = v7[*(unsigned __int8 *)(v200 + i6)];
              v204 = (v204 >> v209) | v209;
              v203 += v209;
            }
            v210 = (_QWORD *)((char *)v22 + ((unint64_t)v207 >> 3));
            v200 -= 10;
            v54 = v199 <= 10;
            v199 -= 10;
            v211 = v7[*(unsigned __int8 *)(a3 + v199)];
            v212 = v211 + v203;
            v15 = (v204 >> v211) | v211 & 0xFFFFFFFFFFFFFF00 | (v206 >> v212);
            v213 = v212 + (v207 & 7);
            v214 = v213;
            v215 = v15 >> -v213;
            v20 = v213 & 7;
            *v210 = v215;
            v22 = (unint64_t *)((char *)v210 + (v214 >> 3));
          }
          while (!v54);
        }
        break;
      default:
        if ((int)a4 % 9 < 1)
        {
          v15 = 0;
          v20 = 0;
          v22 = a1;
        }
        else
        {
          v59 = 0;
          v15 = 0;
          v60 = (unsigned __int8 *)(a3 + (int)a4 - 1);
          v61 = (int)a4 % 9 + 1;
          do
          {
            v62 = *v60--;
            v63 = v7[v62];
            v15 = (v15 >> v63) | v63 & 0xFFFFFFFFFFFFFF00;
            v59 += v63;
            --v61;
          }
          while (v61 > 1);
          LODWORD(a4) = a4 - (int)a4 % 9;
          v20 = v59 & 7;
          *a1 = v15 >> -v59;
          v22 = (unint64_t *)((char *)a1 + ((unint64_t)v59 >> 3));
        }
        HIDWORD(v106) = 954437177 * a4 + 238609294;
        LODWORD(v106) = HIDWORD(v106);
        if ((v106 >> 1) >= 0xE38E38F)
        {
          v107 = (int)a4;
          for (i7 = -1; i7 != -9; --i7)
          {
            v109 = v7[*(unsigned __int8 *)(a3 + (int)a4 + i7)];
            v15 = (v15 >> v109) | v109;
            LOBYTE(v20) = v109 + v20;
          }
          LODWORD(a4) = a4 - 9;
          v110 = v7[*(unsigned __int8 *)(a3 + v107 - 9)];
          v15 = (v15 >> v110) | v110;
          LOBYTE(v110) = v110 + v20;
          v20 = v110 & 7;
          *v22 = v15 >> -(char)v110;
          v22 = (_QWORD *)((char *)v22 + ((unint64_t)v110 >> 3));
        }
        if ((int)a4 >= 1)
        {
          v111 = a4;
          v112 = a3 + a4;
          do
          {
            for (i8 = -1; i8 != -9; --i8)
            {
              v114 = v7[*(unsigned __int8 *)(v112 + i8)];
              v15 = (v15 >> v114) | v114;
              LOBYTE(v20) = v114 + v20;
            }
            v115 = 0;
            v116 = 0;
            v117 = v7[*(unsigned __int8 *)(v111 + a3 - 9)];
            v118 = (v15 >> v117) | v117;
            v119 = v117 + v20;
            *v22 = v118 >> -v119;
            for (i9 = -10; i9 != -18; --i9)
            {
              v121 = v7[*(unsigned __int8 *)(v112 + i9)];
              v116 = (v116 >> v121) | v121;
              v115 += v121;
            }
            v122 = (_QWORD *)((char *)v22 + ((unint64_t)v119 >> 3));
            v112 -= 18;
            v54 = v111 <= 18;
            v111 -= 18;
            v123 = v7[*(unsigned __int8 *)(a3 + v111)];
            v124 = v123 + v115;
            v15 = (v116 >> v123) | (v118 >> v124) | v123;
            v125 = v124 + (v119 & 7);
            v126 = v125;
            v127 = v15 >> -v125;
            v20 = v125 & 7;
            *v122 = v127;
            v22 = (unint64_t *)((char *)v122 + (v126 >> 3));
          }
          while (!v54);
        }
        break;
    }
  }
  v5 = 0;
  v55 = (v15 >> 1) | 0x8000000000000000;
  v56 = v20 + 1;
  v57 = (v20 - 0x7FFFFFFFFFFFFFFFLL) & 0xF;
  *v22 = v55 >> -(char)v57;
  v58 = (char *)v22 + (v57 >> 3);
  if (v10 > (unint64_t)v58)
  {
    v5 = v58 - (char *)a1;
    if ((v56 & 7) != 0)
      ++v5;
  }
  return v5;
}

unint64_t HUF_compress4X_usingCTable_internal(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  unint64_t result;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;

  result = 0;
  if (a2 >= 0x11 && a4 >= 0xC)
  {
    v11 = (a4 + 3) >> 2;
    v12 = a1 + 6;
    result = HUF_compress1X_usingCTable_internal((unint64_t *)(a1 + 6), a2 - 6, a3, v11, a5);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      if (result - 0x10000 >= 0xFFFFFFFFFFFF0001)
      {
        v13 = a1 + a2;
        *(_WORD *)a1 = result;
        v14 = v12 + result;
        result = HUF_compress1X_usingCTable_internal((unint64_t *)(v12 + result), v13 - (v12 + result), a3 + v11, (a4 + 3) >> 2, a5);
        if (result > 0xFFFFFFFFFFFFFF88)
          return result;
        if (result - 0x10000 >= 0xFFFFFFFFFFFF0001)
        {
          *(_WORD *)(a1 + 2) = result;
          v15 = (unint64_t *)(v14 + result);
          result = HUF_compress1X_usingCTable_internal(v15, v13 - (_QWORD)v15, a3 + v11 + v11, (a4 + 3) >> 2, a5);
          if (result > 0xFFFFFFFFFFFFFF88)
            return result;
          if (result - 0x10000 >= 0xFFFFFFFFFFFF0001)
          {
            v16 = a3 + a4;
            *(_WORD *)(a1 + 4) = result;
            v17 = (char *)v15 + result;
            result = HUF_compress1X_usingCTable_internal((unint64_t *)((char *)v15 + result), v13 - ((_QWORD)v15 + result), a3 + v11 + v11 + v11, v16 - (a3 + v11 + v11 + v11), a5);
            if (result > 0xFFFFFFFFFFFFFF88)
              return result;
            if (result - 0x10000 >= 0xFFFFFFFFFFFF0001)
              return (unint64_t)&v17[result - a1];
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t HUF_compress_internal(unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned int a5, unsigned int a6, int a7, uint64_t a8, unint64_t a9, uint64_t *a10, int *a11, int a12, int a13)
{
  unint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  char *v22;
  int v23;
  BOOL v24;
  char v25;
  unsigned int v27;
  unint64_t v28;
  int v29;
  int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  int v38;
  char v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t *v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  unsigned int v61;
  char *v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;

  v65 = a5;
  v13 = -(int)a8 & 7;
  v14 = a9 - v13;
  if (a9 >= v13)
  {
    v15 = (char *)(a8 + v13);
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  if (v14 >> 3 >= 0x3E1)
  {
    v16 = 0;
    if (!a2 || !a4)
      return v16;
    if (a4 > 0x20000)
      return -72;
    if (a6 > 0xC)
      return -44;
    if (a5 > 0xFF)
      return -46;
    v22 = (char *)a1 + a2;
    if (!a5)
    {
      a5 = 255;
      v65 = 255;
    }
    if (a6)
      v23 = a6;
    else
      v23 = 11;
    if (a11)
      v24 = a12 == 0;
    else
      v24 = 1;
    v25 = v24;
    if (!v24 && *a11 == 2)
      return HUF_compressCTable_internal((uint64_t)a1, a1, (uint64_t)a1 + a2, (uint64_t)a3, a4, a7, a10);
    v59 = v25;
    v61 = v23;
    if (a4 >= 0xA000)
    {
      if (a13)
      {
        v64 = a5;
        v27 = HIST_count_simple(v15, &v64, a3, 4096);
        v63 = v65;
        if (HIST_count_simple(v15, &v63, &a3[a4 - 4096], 4096) + (unint64_t)v27 < 0x45)
          return 0;
      }
    }
    v58 = (uint64_t)v22;
    v28 = HIST_count_wksp(v15, &v65, (unsigned int *)a3, a4, v15 + 3080, 0x1000uLL);
    v16 = v28;
    if (v28 > 0xFFFFFFFFFFFFFF88)
      return v16;
    if (v28 == a4)
    {
      *(_BYTE *)a1 = *a3;
      return 1;
    }
    if (v28 <= (a4 >> 7) + 4)
      return 0;
    if (a11)
    {
      v29 = *a11;
      if (*a11 == 1)
      {
        if ((v65 & 0x80000000) == 0)
        {
          v30 = 0;
          v31 = (unsigned __int8 *)(a10 + 1);
          v32 = v65 + 1;
          v33 = v15;
          do
          {
            v34 = *(_DWORD *)v33;
            v33 += 4;
            v24 = v34 == 0;
            v36 = *v31;
            v31 += 8;
            v35 = v36;
            v38 = !v24 && v35 == 0;
            v30 |= v38;
            --v32;
          }
          while (v32);
          if (v30)
          {
            *a11 = 0;
            goto LABEL_53;
          }
        }
        v29 = 1;
      }
      v24 = v29 == 0;
      v39 = v59;
      if (v24)
        v39 = 1;
      if ((v39 & 1) == 0)
        goto LABEL_64;
    }
LABEL_53:
    v40 = FSE_optimalTableLog_internal(v61, a4, v65, 1);
    v62 = v15 + 1024;
    v16 = HUF_buildCTable_wksp((uint64_t *)v15 + 128, (unsigned int *)v15, v65, v40, (uint64_t)(v15 + 3080), 0x1300uLL);
    if (v16 > 0xFFFFFFFFFFFFFF88)
      return v16;
    v60 = v65;
    bzero(&v62[8 * v65 + 16], 2056 - 8 * (v65 + 2));
    v41 = HUF_writeCTable_wksp((uint64_t)a1, a2, (uint64_t)v62, v60, v16, (uint64_t)(v15 + 3080), 0x2ECuLL);
    v16 = v41;
    if (v41 > 0xFFFFFFFFFFFFFF88)
      return v16;
    if (a11)
    {
      if (*a11)
      {
        if ((v65 & 0x80000000) != 0)
          goto LABEL_64;
        v42 = 0;
        v43 = (unsigned __int8 *)(a10 + 1);
        v44 = v15;
        v45 = v65 + 1;
        do
        {
          v47 = *v43;
          v43 += 8;
          v46 = v47;
          v48 = *(_DWORD *)v44;
          v44 += 4;
          v42 += v46 * (unint64_t)v48;
          --v45;
        }
        while (v45);
        v49 = 0;
        v50 = 0;
        do
        {
          v50 += v15[8 * v49 + 1032] * (unint64_t)*(unsigned int *)&v15[4 * v49];
          ++v49;
        }
        while (v65 + 1 != v49);
        if (v41 + 12 >= a4 || v42 >> 3 <= v41 + (v50 >> 3))
        {
LABEL_64:
          v51 = (uint64_t)a1;
          v52 = a1;
          v53 = v58;
          v54 = (uint64_t)a3;
          v55 = a4;
          v56 = a7;
          v57 = a10;
          return HUF_compressCTable_internal(v51, v52, v53, v54, v55, v56, v57);
        }
        goto LABEL_68;
      }
      if (v41 + 12 < a4)
      {
LABEL_68:
        *a11 = 0;
        goto LABEL_69;
      }
    }
    else if (v41 + 12 < a4)
    {
LABEL_69:
      if (a10)
        memcpy(a10, v62, 0x808uLL);
      v51 = (uint64_t)a1;
      v52 = (unint64_t *)((char *)a1 + v16);
      v53 = v58;
      v54 = (uint64_t)a3;
      v55 = a4;
      v56 = a7;
      v57 = (uint64_t *)(v15 + 1024);
      return HUF_compressCTable_internal(v51, v52, v53, v54, v55, v56, v57);
    }
    return 0;
  }
  return -66;
}

uint64_t HUF_compress1X_repeat(unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unint64_t a8, uint64_t *a9, int *a10, int a11, int a12, int a13)
{
  return HUF_compress_internal(a1, a2, a3, a4, a5, a6, 0, a7, a8, a9, a10, a11, a13);
}

uint64_t HUF_compress4X_repeat(unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unint64_t a8, uint64_t *a9, int *a10, int a11, int a12, int a13)
{
  return HUF_compress_internal(a1, a2, a3, a4, a5, a6, 1, a7, a8, a9, a10, a11, a13);
}

uint64_t HUF_buildCTable(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t *v8;
  _BYTE v10[4864];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = (uint64_t *)v1;
  bzero(v10, 0x1300uLL);
  return HUF_buildCTable_wksp(v8, v7, v5, v3, (uint64_t)v10, 0x1300uLL);
}

uint64_t HUF_simpleQuickSort(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a2;
  v4 = result;
  v5 = a3 - a2;
  if ((int)a3 - (int)a2 >= 8)
  {
    v13 = a3;
    if ((int)a3 > (int)a2)
    {
      do
      {
        v14 = (unsigned int *)(v4 + 8 * (int)v13);
        v15 = *v14;
        v16 = (v3 - 1);
        v17 = (int)v13 - (uint64_t)(int)v3;
        v18 = 8 * (int)v3;
        do
        {
          if (*(_DWORD *)(v4 + v18) > v15)
          {
            v16 = (v16 + 1);
            v19 = *(_QWORD *)(v4 + 8 * (int)v16);
            *(_QWORD *)(v4 + 8 * (int)v16) = *(_QWORD *)(v4 + v18);
            *(_QWORD *)(v4 + v18) = v19;
          }
          v18 += 8;
          --v17;
        }
        while (v17);
        v20 = *(_QWORD *)(v4 + 8 * ((int)v16 + 1));
        *(_QWORD *)(v4 + 8 * ((int)v16 + 1)) = *(_QWORD *)v14;
        *(_QWORD *)v14 = v20;
        if ((int)v16 + 1 - (int)v3 >= (int)v13 - ((int)v16 + 1))
        {
          result = HUF_simpleQuickSort(v4, (v16 + 2), v13);
          v13 = v16;
        }
        else
        {
          result = HUF_simpleQuickSort(v4, v3, v16);
          v3 = (v16 + 2);
        }
      }
      while ((int)v3 < (int)v13);
    }
  }
  else if (v5 >= 1)
  {
    v6 = result + 8 * (int)a2;
    v7 = (v5 + 1);
    v8 = 1;
    do
    {
      v9 = *(_QWORD *)(v6 + 8 * v8);
      v10 = v8;
      while (1)
      {
        v11 = v10 - 1;
        v12 = (_DWORD *)(v6 + 8 * (v10 - 1));
        if (*v12 >= v9)
          break;
        *(_QWORD *)(v6 + 8 * v10--) = *(_QWORD *)v12;
        if (v11 + 1 <= 1)
        {
          LODWORD(v10) = 0;
          break;
        }
      }
      *(_QWORD *)(v6 + 8 * (int)v10) = v9;
      ++v8;
    }
    while (v8 != v7);
  }
  return result;
}

unint64_t HUF_compressCTable_internal(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6, uint64_t *a7)
{
  unint64_t v10;
  unint64_t result;
  unint64_t v12;

  v10 = a3 - (_QWORD)a2;
  if (a6)
    result = HUF_compress4X_usingCTable_internal((uint64_t)a2, v10, a4, a5, a7);
  else
    result = HUF_compress1X_usingCTable_internal(a2, v10, a4, a5, a7);
  v12 = (unint64_t)a2 + result - a1;
  if (v12 >= a5 - 1)
    v12 = 0;
  if (!result)
    v12 = 0;
  if (result <= 0xFFFFFFFFFFFFFF88)
    return v12;
  return result;
}

uint64_t FSE_buildCTable_wksp(_WORD *a1, __int16 *a2, int a3, int a4, _WORD *a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  __int16 *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  int i;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  _DWORD *v41;
  int v42;
  int v43;
  unsigned int v45;

  v6 = (1 << a4);
  LODWORD(v7) = v6 >> 1;
  if (a4)
    v7 = v7;
  else
    v7 = 1;
  v8 = (a3 + 2);
  if (((2 * ((1 << a4) + v8)) & 0xFFFFFFFFFFFFFFFCLL) + 8 > a6)
    return -44;
  v10 = (v6 - 1);
  v11 = (v6 >> 3) + (v6 >> 1) + 3;
  *a1 = a4;
  v12 = &a5[v8];
  a1[1] = a3;
  *a5 = 0;
  v13 = (a3 + 1);
  if (a3 == -1)
  {
    a5[v13] = v6 + 1;
    v24 = (char *)v12 + v6;
  }
  else
  {
    v14 = 0;
    if (v8 <= 2)
      v15 = 2;
    else
      v15 = v8;
    v16 = v15 - 1;
    v17 = v6 - 1;
    do
    {
      v18 = (unsigned __int16)a2[v14];
      v19 = &a5[v14];
      v20 = *v19;
      if (v18 == 0xFFFF)
      {
        v19[1] = v20 + 1;
        *((_BYTE *)v12 + v17--) = v14;
      }
      else
      {
        v19[1] = v20 + v18;
      }
      ++v14;
    }
    while (v16 != v14);
    a5[v13] = v6 + 1;
    if (v17 != (_DWORD)v10)
    {
      v32 = 0;
      v33 = 0;
      do
      {
        v34 = a2[v32];
        if (v34 >= 1)
        {
          for (i = 0; i != v34; ++i)
          {
            *((_BYTE *)v12 + v33) = v32;
            do
              v33 = (v33 + v11) & v10;
            while (v33 > v17);
          }
        }
        ++v32;
      }
      while (v32 != v13);
      goto LABEL_33;
    }
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = (char *)v12 + v6;
    v25 = (uint64_t)&a5[v8 + 4] + v6;
    do
    {
      v26 = a2[v21];
      v27 = (unsigned __int16)a2[v21];
      *(_QWORD *)&v24[v23] = v22;
      if (v26 >= 9)
      {
        v28 = 0;
        do
        {
          *(_QWORD *)(v25 + v23 + v28) = v22;
          v29 = v28 + 16;
          v28 += 8;
        }
        while (v29 < v27);
      }
      v23 += (__int16)v27;
      ++v21;
      v22 += 0x101010101010101;
    }
    while (v21 != v13);
  }
  v30 = 0;
  v31 = 0;
  do
  {
    *((_BYTE *)v12 + (v31 & v10)) = v24[v30];
    *((_BYTE *)v12 + (((_DWORD)v31 + v11) & v10)) = v24[v30 + 1];
    v31 = ((_DWORD)v31 + 2 * v11) & v10;
    v30 += 2;
  }
  while (v30 < v6);
LABEL_33:
  v36 = 0;
  do
  {
    v37 = *((unsigned __int8 *)v12 + v36);
    v38 = (unsigned __int16)a5[v37];
    a5[v37] = v38 + 1;
    a1[v38 + 2] = v6 + v36++;
  }
  while (v6 != v36);
  v39 = 0;
  v40 = (a4 << 16) - v6;
  if (v13 <= 1)
    v13 = 1;
  else
    v13 = v13;
  v41 = &a1[2 * v7 + 4];
  do
  {
    v43 = *a2++;
    v42 = v43;
    if (v43 == -1 || v42 == 1)
    {
      *(v41 - 1) = v39 - 1;
      *v41 = v40;
      ++v39;
    }
    else if (v42)
    {
      v45 = a4 + 1 + (__clz(v42 - 1) ^ 0xFFFFFFE0);
      *v41 = (v45 << 16) - (v42 << v45);
      *(v41 - 1) = v39 - v42;
      v39 += v42;
    }
    else
    {
      *v41 = v40 + 0x10000;
    }
    v41 += 2;
    --v13;
  }
  while (v13);
  return 0;
}

uint64_t FSE_writeNCount(_WORD *a1, unint64_t a2, uint64_t a3, int a4, unsigned int a5)
{
  unint64_t v6;

  if (a5 > 0xC)
    return -44;
  if (a5 < 5)
    return -1;
  LODWORD(v6) = ((a5 + a5 * a4 + 6) >> 3) + 3;
  if (a4)
    v6 = v6;
  else
    v6 = 512;
  return FSE_writeNCount_generic(a1, a2, a3, a4, a5, v6 <= a2);
}

uint64_t FSE_writeNCount_generic(_WORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6;
  _BOOL4 v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  _WORD *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BOOL4 v28;
  int v29;
  uint64_t v30;
  BOOL v31;
  int v32;
  int v33;

  v6 = (a4 + 1);
  if (a4 == -1)
    return -1;
  v8 = 0;
  v9 = 0;
  v10 = 1 << a5;
  v11 = (1 << a5) + 1;
  v12 = a5 - 5;
  v13 = (a5 + 1);
  v14 = (unint64_t)a1 + a2 - 2;
  v15 = 4;
  v16 = a1;
  while (1)
  {
    if (!v8)
    {
      LODWORD(v17) = v9;
      goto LABEL_25;
    }
    LODWORD(v17) = v9;
    if (v9 < v6)
    {
      v17 = v9;
      while (!*(_WORD *)(a3 + 2 * v17))
      {
        if (v6 == ++v17)
          goto LABEL_43;
      }
    }
    if ((_DWORD)v17 == (_DWORD)v6)
      break;
    if (v17 >= v9 + 24)
    {
      while (a6 || (unint64_t)v16 <= v14)
      {
        v19 = v12 + (0xFFFF << v15);
        *v16++ = v19;
        v12 = HIWORD(v19);
        v18 = v9 + 24;
        v20 = v9 + 48;
        v9 += 24;
        if (v17 < v20)
          goto LABEL_17;
      }
      return -70;
    }
    v18 = v9;
LABEL_17:
    v21 = v18 + 3;
    while (v17 >= v21)
    {
      v12 += 3 << v15;
      v15 += 2;
      v21 = v18 + 6;
      v18 += 3;
    }
    v12 += ((_DWORD)v17 - v18) << v15;
    if (v15 < 15)
    {
      v15 += 2;
    }
    else
    {
      if (!a6 && (unint64_t)v16 > v14)
        return -70;
      *v16++ = v12;
      v12 >>= 16;
      v15 -= 14;
    }
LABEL_25:
    v22 = *(__int16 *)(a3 + 2 * v17);
    v23 = ~v11 + 2 * v10;
    if (v22 >= 0)
      v24 = *(__int16 *)(a3 + 2 * v17);
    else
      v24 = -v22;
    v11 -= v24;
    v25 = v22 + 1;
    if (v25 >= v10)
      v26 = v23;
    else
      v26 = 0;
    v27 = v26 + v25;
    v28 = v26 + v25 < v23;
    v8 = v27 == 1;
    if (v11 < 1)
      return -1;
    if (v11 >= v10)
    {
      v30 = v13;
    }
    else
    {
      v29 = v10;
      LODWORD(v30) = v13;
      do
      {
        v30 = (v30 - 1);
        v10 = v29 >> 1;
        v31 = v11 < v29 >> 1;
        v29 >>= 1;
      }
      while (v31);
    }
    v12 += v27 << v15;
    v15 = v15 + v13 - v28;
    if (v15 >= 17)
    {
      if (!a6 && (unint64_t)v16 > v14)
        return -70;
      *v16++ = v12;
      v12 >>= 16;
      v15 -= 16;
    }
    v9 = v17 + 1;
    if ((int)v17 + 1 < v6)
    {
      v13 = v30;
      if (v11 > 1)
        continue;
    }
    break;
  }
LABEL_43:
  if (v11 != 1)
    return -1;
  if (!a6 && (unint64_t)v16 > v14)
    return -70;
  *v16 = v12;
  v32 = v15 + 7;
  v31 = v15 < -7;
  v33 = v15 + 14;
  if (v31)
    v32 = v33;
  return (char *)v16 + (v32 >> 3) - (char *)a1;
}

uint64_t FSE_optimalTableLog_internal(unsigned int a1, unsigned int a2, unsigned int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v4 = (__clz(a2 - 1) ^ 0x1F) - a4;
  v5 = __clz(a2) ^ 0x1F;
  v6 = (__clz(a3) ^ 0x1F) + 2;
  if (v5 + 1 < v6)
    v7 = v5 + 1;
  else
    v7 = v6;
  if (a1)
    v8 = a1;
  else
    v8 = 11;
  if (v4 >= v8)
    v4 = v8;
  if (v7 > v4)
    v4 = v7;
  if (v4 <= 5)
    v4 = 5;
  if (v4 >= 0xC)
    return 12;
  else
    return v4;
}

uint64_t FSE_optimalTableLog(unsigned int a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v3 = (__clz(a2 - 1) ^ 0x1F) - 2;
  v4 = __clz(a2) ^ 0x1F;
  v5 = (__clz(a3) ^ 0x1F) + 2;
  if (v4 + 1 < v5)
    v6 = v4 + 1;
  else
    v6 = v5;
  if (a1)
    v7 = a1;
  else
    v7 = 11;
  if (v3 >= v7)
    v3 = v7;
  if (v6 > v3)
    v3 = v6;
  if (v3 <= 5)
    v3 = 5;
  if (v3 >= 0xC)
    return 12;
  else
    return v3;
}

uint64_t FSE_normalizeCount(__int16 *a1, unsigned int a2, unsigned int *a3, unint64_t a4, unsigned int a5, int a6)
{
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned __int16 v11;
  int v12;
  unsigned int v13;
  __int16 v14;
  char v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int16 *v23;
  __int16 v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  __int16 *v30;
  uint64_t v31;
  unsigned int v32;
  __int16 *v33;
  uint64_t v34;
  unsigned int *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;

  if (a2)
    result = a2;
  else
    result = 11;
  if (result < 5)
    return -1;
  if (result > 0xC)
    return -44;
  v8 = __clz(a4) ^ 0x1F;
  v9 = (__clz(a5) ^ 0x1F) + 2;
  v10 = v8 + 1 < v9 ? v8 + 1 : v9;
  if (result < v10)
    return -1;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  if (a6)
    v14 = -1;
  else
    v14 = 1;
  v15 = 62 - result;
  v16 = 1 << result;
  v17 = a4 >> result;
  LODWORD(v18) = 1 << result;
  do
  {
    v19 = a3[v13];
    if (v19 == a4)
      return 0;
    v20 = v13;
    if ((_DWORD)v19)
    {
      if (v19 <= v17)
      {
        a1[v13] = v14;
        LODWORD(v18) = v18 - 1;
      }
      else
      {
        v21 = 0x4000000000000000uLL / a4 * v19;
        v22 = v21 >> v15;
        if (((v21 >> v15) & 0xFFF8) == 0
          && v21 - ((unint64_t)(unsigned __int16)(v21 >> v15) << v15) > (unint64_t)FSE_normalizeCount_rtbTable[(unsigned __int16)(v21 >> v15)] << (42 - result))
        {
          LOWORD(v22) = v22 + 1;
        }
        if ((unsigned __int16)v22 > v11)
        {
          v12 = v20;
          v11 = v22;
        }
        a1[v20] = v22;
        LODWORD(v18) = v18 - (unsigned __int16)v22;
      }
    }
    else
    {
      a1[v13] = 0;
    }
    v13 = v20 + 1;
  }
  while ((int)v20 + 1 <= a5);
  v23 = &a1[v12];
  v24 = *v23;
  if (-(int)v18 < *v23 >> 1)
  {
LABEL_53:
    *v23 = v24 + v18;
    return result;
  }
  v25 = 0;
  v26 = (3 * a4) >> (result + 1);
  v27 = a5 + 1;
  v28 = a3;
  v29 = v27;
  v30 = a1;
  do
  {
    v32 = *v28++;
    v31 = v32;
    if (v32)
    {
      if (v31 <= v17)
      {
        *v30 = v14;
      }
      else
      {
        if (v31 > v26)
        {
          *v30 = -2;
          goto LABEL_38;
        }
        *v30 = 1;
      }
      ++v25;
      a4 -= v31;
    }
    else
    {
      *v30 = 0;
    }
LABEL_38:
    ++v30;
    --v29;
  }
  while (v29);
  v18 = (v16 - v25);
  if (v16 != v25)
  {
    if (a4 / v18 > v26)
    {
      v33 = a1;
      v34 = a5 + 1;
      v35 = a3;
      v36 = 3 * a4 / (2 * v18);
      do
      {
        if (*v33 == -2)
        {
          v37 = *v35;
          if (v37 <= v36)
          {
            *v33 = 1;
            ++v25;
            a4 -= v37;
          }
        }
        ++v35;
        ++v33;
        --v34;
      }
      while (v34);
      LODWORD(v18) = v16 - v25;
    }
    if (v25 == (_DWORD)v27)
    {
      v38 = 0;
      v39 = 0;
      v40 = 0;
      do
      {
        if (a3[v38] > v39)
        {
          v40 = v38;
          v39 = a3[v38];
        }
        ++v38;
      }
      while (v27 != v38);
      v23 = &a1[v40];
      v24 = *v23;
      goto LABEL_53;
    }
    if (a4)
    {
      v41 = 0;
      v42 = ~(-1 << (61 - result));
      v43 = (((unint64_t)v18 << v15) + v42) / a4;
      while (1)
      {
        v44 = v41;
        if (a1[v41] == -2)
        {
          v45 = v42 + v43 * a3[v41];
          v46 = (v45 >> v15) - (v42 >> v15);
          if (!v46)
            return -1;
          a1[v44] = v46;
          v42 = v45;
        }
        v41 = v44 + 1;
        if ((int)v44 + 1 > a5)
          return result;
      }
    }
    if ((_DWORD)v18)
    {
      v47 = 0;
      do
      {
        v48 = v47;
        v49 = a1[v47];
        if (v49 >= 1)
        {
          LODWORD(v18) = v18 - 1;
          a1[v48] = v49 + 1;
        }
        if ((_DWORD)v48 == a5)
          v47 = 0;
        else
          v47 = v48 + 1;
      }
      while ((_DWORD)v18);
    }
  }
  return result;
}

uint64_t FSE_buildCTable_rle(uint64_t a1, unsigned int a2)
{
  *(_WORD *)a1 = 0;
  *(_WORD *)(a1 + 2) = a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 8 * a2 + 8) = 0;
  return 0;
}

uint64_t FSE_compress_usingCTable(unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int16 *a5)
{
  return FSE_compress_usingCTable_generic(a1, a2, a3, a4, a5, a4 + (a4 >> 7) + 12 <= a2);
}

uint64_t FSE_compress_usingCTable_generic(unint64_t *a1, unint64_t a2, unint64_t a3, unint64_t a4, unsigned __int16 *a5, int a6)
{
  unint64_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int16 *v19;
  unsigned int v20;
  _QWORD *v21;
  unint64_t v22;
  int v23;
  unsigned __int16 *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int v31;
  unsigned __int16 *v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned __int16 *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unsigned __int16 *v43;
  int v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  unsigned __int16 *v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  unsigned int v72;
  char *v73;

  if (a4 < 3 || a2 < 9)
    return 0;
  v6 = a3 + a4;
  v7 = (unint64_t)a1 + a2 - 8;
  v10 = *a5;
  v8 = a5 + 2;
  v9 = v10;
  v11 = 1 << (v10 - 1);
  if (!v10)
    v11 = 1;
  v12 = &v8[2 * v11];
  v13 = &v12[4 * *(unsigned __int8 *)(a3 + a4 - 1)];
  v14 = v8[((unint64_t)(((*((_DWORD *)v13 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v13 + 1)) >> ((*((_DWORD *)v13 + 1) + 0x8000) >> 16))
         + *(int *)v13];
  if ((a4 & 1) != 0)
  {
    v23 = *(unsigned __int8 *)(v6 - 3);
    v17 = (unsigned __int8 *)(v6 - 3);
    v24 = &v12[4 * v17[1]];
    LODWORD(v22) = v8[((unint64_t)(((*((_DWORD *)v24 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v24 + 1)) >> ((*((_DWORD *)v24 + 1) + 0x8000) >> 16))
                    + *(int *)v24];
    v25 = *(unsigned int *)&v12[4 * v23 + 2] + v14;
    v26 = v25 >> 16;
    v27 = BIT_mask_1[v25 >> 16] & v14;
    v20 = v8[(v14 >> SBYTE2(v25)) + *(int *)&v12[4 * v23]];
    v28 = v25 >> 19;
    *a1 = v27;
    v29 = (unint64_t *)((char *)a1 + (v25 >> 19));
    if ((unint64_t)v29 <= v7)
      v21 = (unint64_t *)((char *)a1 + (v25 >> 19));
    else
      v21 = (_QWORD *)v7;
    v15 = v26 & 7;
    v16 = v27 >> (8 * v28);
    if (a6)
      v21 = v29;
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v18 = *(unsigned __int8 *)(v6 - 2);
    v17 = (unsigned __int8 *)(v6 - 2);
    v19 = &v12[4 * v18];
    v20 = v8[((unint64_t)(((*((_DWORD *)v19 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v19 + 1)) >> ((*((_DWORD *)v19 + 1) + 0x8000) >> 16))
           + *(int *)v19];
    v21 = a1;
    LODWORD(v22) = v8[((unint64_t)(((*((_DWORD *)v13 + 1) + 0x8000) & 0xFFFF0000) - *((_DWORD *)v13 + 1)) >> ((*((_DWORD *)v13 + 1) + 0x8000) >> 16))
                    + *(int *)v13];
  }
  v22 = v22;
  v30 = v20;
  if ((a4 & 2) == 0)
  {
    v31 = *(v17 - 2);
    v17 -= 2;
    v32 = &v12[4 * v17[1]];
    v33 = *(_DWORD *)v32;
    v34 = (*((unsigned int *)v32 + 1) + (unint64_t)v22) >> 16;
    v35 = (unint64_t)(BIT_mask_1[v34] & v22) << v15;
    v36 = v15 + v34;
    v22 = v8[(v22 >> v34) + (uint64_t)v33];
    v37 = &v12[4 * v31];
    LODWORD(v34) = *(_DWORD *)v37;
    v38 = (*((unsigned int *)v37 + 1) + v30) >> 16;
    v39 = v35 | ((unint64_t)(BIT_mask_1[v38] & v30) << v36) | v16;
    v40 = v36 + v38;
    v30 = v8[(v30 >> v38) + (int)v34];
    v41 = v40 >> 3;
    *v21 = v39;
    v21 = (_QWORD *)((char *)v21 + v41);
    if (!a6 && (unint64_t)v21 > v7)
      v21 = (_QWORD *)v7;
    v15 = v40 & 7;
    v16 = v39 >> (8 * v41);
  }
  if ((unint64_t)v17 <= a3)
  {
    v60 = v21;
  }
  else
  {
    do
    {
      v42 = *(v17 - 4);
      v17 -= 4;
      v43 = &v12[4 * v17[3]];
      v44 = *(_DWORD *)v43;
      v45 = (v22 + *((unsigned int *)v43 + 1)) >> 16;
      v46 = v15 + ((v22 + *((_DWORD *)v43 + 1)) >> 16);
      v47 = v8[(v22 >> v45) + v44];
      v48 = &v12[4 * v17[2]];
      v49 = (v30 + *((unsigned int *)v48 + 1)) >> 16;
      v50 = v15 + v45 + v49;
      v51 = v8[(v30 >> ((v30 + *((_DWORD *)v48 + 1)) >> 16)) + *(int *)v48];
      v52 = (*(unsigned int *)&v12[4 * v17[1] + 2] + v47) >> 16;
      v53 = *(int *)&v12[4 * v42];
      v54 = (*(unsigned int *)&v12[4 * v42 + 2] + v51) >> 16;
      v55 = v50 + v52 + v54;
      v56 = v55 >> 3;
      v57 = (unint64_t)v21 + v56 > v7 && a6 == 0;
      v58 = (unint64_t)(v22 & BIT_mask_1[v45]) << v15;
      v22 = v8[(v47 >> ((*(_DWORD *)&v12[4 * v17[1] + 2] + v47) >> 16)) + *(int *)&v12[4 * v17[1]]];
      v59 = v58 | v16 | ((unint64_t)(v30 & BIT_mask_1[v49]) << v46) | ((unint64_t)(BIT_mask_1[v52] & v47) << v50) | ((unint64_t)(BIT_mask_1[v54] & v51) << (v50 + ((*(_DWORD *)&v12[4 * v17[1] + 2] + v47) >> 16)));
      v30 = v8[(v51 >> v54) + v53];
      if (v57)
        v60 = (_QWORD *)v7;
      else
        v60 = (_QWORD *)((char *)v21 + v56);
      *v21 = v59;
      v16 = v59 >> (8 * v56);
      v15 = v55 & 7;
      v21 = v60;
    }
    while ((unint64_t)v17 > a3);
  }
  v61 = BIT_mask_1[v9];
  v62 = ((v22 & v61) << v15) | v16;
  v63 = (v15 + v9) >> 3;
  *v60 = v62;
  v64 = (_QWORD *)((char *)v60 + v63);
  if ((unint64_t)v60 + v63 > v7)
    v64 = (_QWORD *)v7;
  v65 = ((_BYTE)v15 + (_BYTE)v9) & 7;
  v66 = ((v30 & v61) << v65) | (v62 >> (8 * v63));
  v67 = v65 + v9;
  v68 = v67 >> 3;
  *v64 = v66;
  v69 = (_QWORD *)((char *)v64 + v68);
  if ((unint64_t)v64 + v68 > v7)
    v69 = (_QWORD *)v7;
  v70 = v67 & 7;
  v71 = (v66 >> (8 * v68)) | (1 << v70);
  v72 = v70 + 1;
  *v69 = v71;
  v73 = (char *)v69 + (v72 >> 3);
  if (v7 <= (unint64_t)v73)
    return 0;
  if ((v72 & 7) != 0)
    return v73 - (char *)a1 + 1;
  return v73 - (char *)a1;
}

unint64_t FSE_readNCount_bmi2(void *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, size_t a5)
{
  unint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  signed int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  _DWORD *v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  if (a5 > 7)
  {
    v12 = (*a2 + 1);
    bzero(a1, 2 * v12);
    v13 = *a4 & 0xF;
    if (v13 > 0xA)
      return -44;
    v14 = 0;
    v15 = *a4 >> 4;
    *a3 = v13 + 5;
    v16 = 32 << v13;
    v17 = (32 << v13) | 1;
    v18 = v13 + 6;
    v19 = (unint64_t)a4 + a5 - 7;
    v20 = (unint64_t)a4 + a5 - 4;
    v21 = 4;
    v22 = a4;
    while (1)
    {
      v30 = 2 * v16 - 1;
      v31 = v30 - v17;
      v32 = v15 & (v16 - 1);
      v33 = v15 & v30;
      if (v33 >= v16)
        v34 = v30 - v17;
      else
        v34 = 0;
      v35 = v33 - v34;
      v36 = v18 - 1;
      if (v32 < v31)
        v35 = v32;
      else
        v36 = v18;
      v28 = v36 + v21;
      v37 = v35 - 1;
      if (v35 <= 0)
        v38 = v35 - 1;
      else
        v38 = 1 - v35;
      v17 += v38;
      *((_WORD *)a1 + v14++) = v37;
      v39 = v37 != 0;
      if (v17 < v16)
      {
        if (v17 < 2)
          goto LABEL_43;
        v40 = __clz(v17);
        v18 = 32 - v40;
        v16 = 1 << (v40 ^ 0x1F);
      }
      if (v14 >= v12)
        break;
      v41 = (uint64_t)v28 >> 3;
      if ((unint64_t)v22 <= v19 || (unint64_t)v22 + v41 <= v20)
      {
        v22 = (_DWORD *)((char *)v22 + v41);
        v21 = v28 & 7;
      }
      else
      {
        v21 = ((_BYTE)v28 + 8 * ((_BYTE)v22 - (_BYTE)v20)) & 0x1F;
        v22 = (_DWORD *)((char *)a4 + a5 - 4);
      }
      v15 = *v22 >> v21;
      if (!v39)
      {
        v23 = __clz(__rbit32(~v15 | 0x80000000));
        if (v23 >= 0x18)
        {
          do
          {
            v24 = ((_BYTE)v21 + 8 * ((_BYTE)v22 - (_BYTE)v19)) & 0x1F;
            v25 = (unint64_t)v22 > v19;
            if ((unint64_t)v22 <= v19)
              v22 = (_DWORD *)((char *)v22 + 3);
            else
              v22 = (_DWORD *)((char *)a4 + a5 - 4);
            if (v25)
              v21 = v24;
            v15 = *v22 >> v21;
            v23 = __clz(__rbit32(~v15 | 0x80000000));
            v14 += 36;
          }
          while (v23 > 0x17);
        }
        v26 = 3 * (v23 >> 1);
        v27 = v23 & 0x1E;
        v14 += v26 + ((v15 >> v27) & 3);
        v28 = v21 + v27 + 2;
        if (v14 >= v12)
          goto LABEL_43;
        v29 = v28 >> 3;
        if ((unint64_t)v22 <= v19 || (unint64_t)v22 + v29 <= v20)
        {
          v22 = (_DWORD *)((char *)v22 + v29);
          v21 = v28 & 7;
        }
        else
        {
          v21 = ((_BYTE)v28 + 8 * ((_BYTE)v22 - (_BYTE)v20)) & 0x1F;
          v22 = (_DWORD *)((char *)a4 + a5 - 4);
        }
        v15 = *v22 >> v21;
      }
    }
    if (v17 != 1)
      return -20;
LABEL_43:
    if (v14 > v12)
      return -48;
    if (v28 <= 32)
    {
      *a2 = v14 - 1;
      return (char *)v22 + ((v28 + 7) >> 3) - (char *)a4;
    }
    else
    {
      return -20;
    }
  }
  else
  {
    v42[0] = 0;
    memcpy(v42, a4, a5);
    result = FSE_readNCount_bmi2(a1, a2, a3, v42, 8);
    if (result > a5 && result < 0xFFFFFFFFFFFFFF89)
      return -20;
  }
  return result;
}

uint64_t HUF_readStats(_BYTE *a1, unint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, char *a6, unint64_t a7)
{
  unsigned __int16 v15[436];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  bzero(v15, 0x368uLL);
  return HUF_readStats_wksp(a1, a2, a3, a4, a5, a6, a7, v15, 0x368uLL);
}

uint64_t HUF_readStats_wksp(_BYTE *a1, unint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, char *a6, unint64_t a7, unsigned __int16 *a8, unint64_t a9)
{
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _BYTE *v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;

  if (!a7)
    return -72;
  v13 = *a6;
  if (*a6 < 0)
  {
    v15 = (v13 - 126) >> 1;
    if (v15 < a7)
    {
      v14 = v13 - 127;
      if (v13 - 127 < a2)
      {
        if (v13 != 127)
        {
          v17 = 0;
          v18 = a6 + 1;
          do
          {
            v19 = &a1[v17];
            *v19 = *v18 >> 4;
            v20 = *v18++;
            v19[1] = v20 & 0xF;
            v17 += 2;
          }
          while (v17 < (v13 - 127));
LABEL_12:
          *(_DWORD *)(a3 + 48) = 0;
          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
          if (v14)
          {
            v21 = 0;
            v22 = 0;
            v23 = 1;
            while (1)
            {
              v24 = a1[v21];
              if (v24 > 0xC)
                break;
              ++*(_DWORD *)(a3 + 4 * v24);
              v22 += 1 << a1[v21] >> 1;
              v21 = v23;
              if (v14 <= v23++)
              {
                if (!v22)
                  return -20;
                v26 = __clz(v22);
                if ((v26 ^ 0x1F) > 0xB)
                  return -20;
                *a5 = 32 - v26;
                v27 = (2 << (v26 ^ 0x1F)) - v22;
                v28 = __clz(v27) ^ 0x1F;
                if (1 << v28 != v27)
                  return -20;
                v29 = v28 + 1;
                a1[v14] = v29;
                ++*(_DWORD *)(a3 + 4 * v29);
                v30 = *(_DWORD *)(a3 + 4);
                v16 = -20;
                if (v30 >= 2 && (v30 & 1) == 0)
                {
                  *a4 = v14 + 1;
                  return v15 + 1;
                }
                return v16;
              }
            }
          }
          return -20;
        }
        *(_DWORD *)(a3 + 48) = 0;
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
      }
      return -20;
    }
  }
  else if (v13 < a7)
  {
    v14 = FSE_decompress_wksp_bmi2(a1, a2 - 1, a6 + 1, *a6, 6u, a8, a9);
    v15 = v13;
    v16 = v14;
    if (v14 > 0xFFFFFFFFFFFFFF88)
      return v16;
    goto LABEL_12;
  }
  return -72;
}

BOOL FASTCOVER_checkParameters(double *a1, unint64_t a2, int a3, int a4)
{
  unsigned int v4;
  unint64_t v6;
  BOOL v7;
  _BOOL8 result;
  double v9;

  v4 = *((_DWORD *)a1 + 1);
  if (!v4)
    return 0;
  v6 = *(unsigned int *)a1;
  if (!(_DWORD)v6)
    return 0;
  v7 = v4 == 8 || v4 == 6;
  if (!v7 || v6 > a2)
    return 0;
  result = 0;
  if ((a3 - 32) >= 0xFFFFFFE1 && v4 <= v6)
  {
    v9 = a1[2];
    if (v9 <= 0.0 || v9 > 1.0)
      return 0;
    return (a4 - 1) < 0xA;
  }
  return result;
}

uint64_t FASTCOVER_ctx_init(uint64_t *a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7, double a8)
{
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  FILE **v22;
  uint64_t v23;
  FILE **v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  FILE **v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t *v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  FILE **v46;
  FILE *v47;
  const char *v48;
  void *v49;

  v11 = a3;
  v12 = COVER_sum(a3, a4);
  v13 = v12;
  v14 = ((double)a4 * a8);
  if (a8 >= 1.0)
    v15 = 0;
  else
    v15 = ((double)a4 * a8);
  v16 = a4 - v15;
  if (a8 >= 1.0)
    v17 = a4;
  else
    v17 = v14;
  v18 = v12;
  v19 = v12;
  if (a8 < 1.0)
  {
    v18 = COVER_sum(v11, ((double)a4 * a8));
    v19 = COVER_sum(&v11[v14], a4 - v15);
  }
  if (a5 <= 8)
    v20 = 8;
  else
    v20 = a5;
  if (v13 < v20 || v13 >= 0xFFFFFFFF)
  {
    if (g_displayLevel >= 1)
    {
      v22 = (FILE **)MEMORY[0x1E0C80C10];
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Total samples size is too large (%u MB), maximum size is %u MB\n");
LABEL_25:
      fflush(*v22);
    }
    return -72;
  }
  if (v17 <= 4)
  {
    if (g_displayLevel >= 1)
    {
      v22 = (FILE **)MEMORY[0x1E0C80C10];
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Total number of training samples is %u and is invalid\n");
      goto LABEL_25;
    }
    return -72;
  }
  if (a4 == v15)
  {
    if (g_displayLevel >= 1)
    {
      v22 = (FILE **)MEMORY[0x1E0C80C10];
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Total number of testing samples is %u and is invalid.\n");
      goto LABEL_25;
    }
    return -72;
  }
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  if (g_displayLevel >= 2)
  {
    v25 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Training on %u samples of total size %u\n", v17, v18);
    fflush(*v25);
    if (g_displayLevel >= 2)
    {
      fprintf(*v25, "Testing on %u samples of total size %u\n", v16, v19);
      fflush(*v25);
    }
  }
  *a1 = a2;
  a1[2] = (uint64_t)v11;
  a1[3] = a4;
  a1[4] = v17;
  a1[5] = v16;
  a1[6] = v18 - v20 + 1;
  *((_DWORD *)a1 + 16) = a5;
  *((_DWORD *)a1 + 17) = a6;
  v26 = a4 + 1;
  a1[9] = a7;
  v27 = malloc_type_calloc(a4 + 1, 8uLL, 0x100004000313F17uLL);
  a1[1] = (uint64_t)v27;
  if (!v27)
  {
    if (g_displayLevel < 1)
    {
LABEL_58:
      v49 = (void *)a1[7];
LABEL_59:
      free(v49);
      a1[7] = 0;
      free((void *)a1[1]);
      a1[1] = 0;
      return -64;
    }
    v46 = (FILE **)MEMORY[0x1E0C80C10];
    v47 = (FILE *)*MEMORY[0x1E0C80C10];
    v48 = "Failed to allocate scratch buffers \n";
LABEL_57:
    fwrite(v48, 0x24uLL, 1uLL, v47);
    fflush(*v46);
    goto LABEL_58;
  }
  *v27 = 0;
  if (a4)
  {
    v28 = 0;
    if (v26 <= 2)
      v29 = 2;
    else
      v29 = v26;
    v30 = v27 + 1;
    v31 = v29 - 1;
    do
    {
      v32 = *v11++;
      v28 += v32;
      *v30++ = v28;
      --v31;
    }
    while (v31);
  }
  v33 = malloc_type_calloc(1 << a6, 4uLL, 0x100004052888210uLL);
  a1[7] = (uint64_t)v33;
  if (!v33)
  {
    if (g_displayLevel < 1)
    {
      v49 = 0;
      goto LABEL_59;
    }
    v46 = (FILE **)MEMORY[0x1E0C80C10];
    v47 = (FILE *)*MEMORY[0x1E0C80C10];
    v48 = "Failed to allocate frequency table \n";
    goto LABEL_57;
  }
  if (g_displayLevel >= 2)
  {
    v34 = (FILE **)MEMORY[0x1E0C80C10];
    fwrite("Computing frequencies\n", 0x16uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    fflush(*v34);
    v33 = (_DWORD *)a1[7];
  }
  v35 = a1[4];
  if (!v35)
    return 0;
  v36 = 0;
  v37 = *((_DWORD *)a1 + 16);
  if (v37 <= 8)
    v38 = 8;
  else
    v38 = v37;
  v39 = (unint64_t *)a1[1];
  v40 = 64 - *((_DWORD *)a1 + 17);
  v41 = 0xCF1BBCDCBF9B0000;
  if (v37 != 6)
    v41 = 0xCF1BBCDCB7A56463;
  v42 = *((unsigned int *)a1 + 19) + 1;
  v43 = *v39;
  do
  {
    v44 = v39[++v36];
    if (v43 + v38 <= v44)
    {
      v45 = *a1;
      do
      {
        ++v33[(*(_QWORD *)(v45 + v43) * v41) >> v40];
        v43 += v42;
      }
      while (v38 + v43 <= v44);
    }
    v23 = 0;
    v43 = v44;
  }
  while (v36 != v35);
  return v23;
}

size_t FASTCOVER_buildDictionary(uint64_t *a1, uint64_t a2, uint64_t a3, size_t a4, unsigned int *a5, uint64_t a6)
{
  unint64_t v12;
  unint64_t v13;
  FILE **v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __int16 v36;
  BOOL v37;
  BOOL v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  BOOL v45;
  unint64_t v46;
  unsigned int v47;
  size_t v48;
  size_t v49;
  size_t v50;
  FILE **v51;
  FILE **v52;
  size_t v54;
  unint64_t v55;

  v12 = COVER_computeEpochs(a4, *((_DWORD *)a1 + 12), *a5, 1u);
  v13 = HIDWORD(v12);
  if (g_displayLevel >= 2)
  {
    v14 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Breaking content into %u epochs of size %u\n", v12, HIDWORD(v12));
    fflush(*v14);
  }
  if (a4)
  {
    v15 = 0;
    v16 = 0;
    v54 = a4;
    v55 = v12;
    v17 = a4;
    while (1)
    {
      v18 = v15 * v13;
      v19 = v15 * v13 + v13;
      v20 = a5[1];
      v21 = *((_DWORD *)a1 + 17);
      if (v19 <= (int)v15 * (int)v13)
      {
        v24 = 0;
        v23 = 0;
        v22 = 0;
      }
      else
      {
        v22 = 0;
        v23 = 0;
        LODWORD(v24) = 0;
        v25 = 0;
        v26 = *a1;
        v27 = 64 - v21;
        v28 = 0xCF1BBCDCB7A56463;
        if (v20 == 6)
          v28 = 0xCF1BBCDCBF9B0000;
        v29 = (v15 * v13) - (unint64_t)v19;
        v30 = *a5 - v20 + 1;
        v31 = (uint64_t *)(v26 + v18);
        v32 = v15 * v13;
        do
        {
          v33 = *v31;
          v31 = (uint64_t *)((char *)v31 + 1);
          v34 = (v33 * v28) >> v27;
          if (!*(_WORD *)(a6 + 2 * v34))
            v25 += *(_DWORD *)(a2 + 4 * v34);
          ++*(_WORD *)(a6 + 2 * v34);
          if (v30 + v32 == v18)
          {
            v35 = (*(_QWORD *)(v26 + v32) * v28) >> v27;
            v36 = *(_WORD *)(a6 + 2 * v35) - 1;
            *(_WORD *)(a6 + 2 * v35) = v36;
            if (!v36)
              v25 -= *(_DWORD *)(a2 + 4 * v35);
            ++v32;
          }
          ++v18;
          v37 = v25 > v24;
          if (v25 <= v24)
            v24 = v24;
          else
            v24 = v25;
          if (v37)
          {
            v23 = v18;
            v22 = v32;
          }
          v38 = __CFADD__(v29++, 1);
        }
        while (!v38);
        v18 = v32;
      }
      if (v18 < v19)
      {
        v39 = 0xCF1BBCDCB7A56463;
        if (v20 == 6)
          v39 = 0xCF1BBCDCBF9B0000;
        v40 = v18 - (unint64_t)v19;
        v41 = (uint64_t *)(*a1 + v18);
        do
        {
          v42 = *v41;
          v41 = (uint64_t *)((char *)v41 + 1);
          --*(_WORD *)(a6 + 2 * ((v42 * v39) >> (64 - v21)));
          v38 = __CFADD__(v40++, 1);
        }
        while (!v38);
      }
      if (v22 != v23)
      {
        v43 = *a1;
        v44 = 64 - v21;
        v45 = v20 == 6;
        v46 = 0xCF1BBCDCB7A56463;
        if (v45)
          v46 = 0xCF1BBCDCBF9B0000;
        v47 = v22;
        do
          *(_DWORD *)(a2 + 4 * ((*(_QWORD *)(v43 + v47++) * v46) >> v44)) = 0;
        while (v23 != v47);
      }
      if (v24)
      {
        v48 = a5[1];
        v49 = v23 + ~v22 + v48;
        if (v17 >= v49)
          v50 = v49;
        else
          v50 = v17;
        if (v50 < v48)
          goto LABEL_50;
        v17 -= v50;
        memcpy((void *)(a3 + v17), (const void *)(*a1 + v22), v50);
        if (g_displayLevel >= 2 && (clock() - g_time > 0x249F0 || g_displayLevel >= 4))
        {
          g_time = clock();
          v51 = (FILE **)MEMORY[0x1E0C80C10];
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "\r%u%%       ", 100 * (v54 - v17) / v54);
          fflush(*v51);
        }
        v16 = 0;
      }
      else
      {
        if (v16 > 8)
          goto LABEL_50;
        ++v16;
      }
      v15 = (v15 + 1) % v55;
      if (!v17)
        goto LABEL_50;
    }
  }
  v17 = 0;
LABEL_50:
  if (g_displayLevel >= 2)
  {
    v52 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "\r%79s\r", "");
    fflush(*v52);
  }
  return v17;
}

uint64_t ZDICT_optimizeTrainFromBuffer_fastCover(void *a1, unint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6)
{
  double v6;
  int v7;
  unsigned int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  FILE **v20;
  FILE *v21;
  const char *v22;
  size_t v23;
  uint64_t v24;
  FILE **v27;
  FILE **v28;
  void *v30;
  int v31;
  FILE **v32;
  unsigned int v33;
  FILE **v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  __int128 v39;
  FILE **v40;
  unint64_t v41;
  unsigned int v42;
  char *v43;
  FILE **v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  __int128 v48;
  FILE **v49;
  FILE **v50;
  FILE **v51;
  FILE **v52;
  uint64_t v54;
  unsigned int v55;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  int v65;
  _OWORD v66[3];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _OWORD v70[2];
  unint64_t v71;
  _OWORD v72[3];
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (*(double *)(a6 + 24) <= 0.0)
    v6 = 0.75;
  else
    v6 = *(double *)(a6 + 24);
  v8 = *(_DWORD *)a6;
  v7 = *(_DWORD *)(a6 + 4);
  v9 = v7 == 0;
  if (v7)
    v10 = *(_DWORD *)(a6 + 4);
  else
    v10 = 6;
  if (v7)
    v11 = *(_DWORD *)(a6 + 4);
  else
    v11 = 8;
  if (*(_DWORD *)(a6 + 12))
    v12 = *(_DWORD *)(a6 + 12);
  else
    v12 = 40;
  if (v8)
    v13 = *(_DWORD *)a6;
  else
    v13 = 50;
  if (v8)
    v14 = *(_DWORD *)a6;
  else
    v14 = 2000;
  if (v8)
    v15 = 0;
  else
    v15 = 1950;
  if (v15 / v12 <= 1)
    v16 = 1;
  else
    v16 = v15 / v12;
  if (*(_DWORD *)(a6 + 8))
    v17 = *(_DWORD *)(a6 + 8);
  else
    v17 = 20;
  if (*(_DWORD *)(a6 + 32) <= 1u)
    v18 = 1;
  else
    v18 = *(_DWORD *)(a6 + 32);
  v19 = *(_DWORD *)(a6 + 48);
  if (v6 <= 0.0 || v6 > 1.0)
  {
    if (v19 >= 1)
    {
      v20 = (FILE **)MEMORY[0x1E0C80C10];
      v21 = (FILE *)*MEMORY[0x1E0C80C10];
      v22 = "Incorrect splitPoint\n";
      v23 = 21;
      goto LABEL_38;
    }
    return -42;
  }
  if (v18 >= 0xB)
  {
    if (v19 >= 1)
    {
      v20 = (FILE **)MEMORY[0x1E0C80C10];
      v21 = (FILE *)*MEMORY[0x1E0C80C10];
      v22 = "Incorrect accel\n";
      v23 = 16;
LABEL_38:
      fwrite(v22, v23, 1uLL, v21);
      fflush(*v20);
      return -42;
    }
    return -42;
  }
  if (v13 < v11 || v14 < v13)
  {
    if (v19 < 1)
      return -42;
    v20 = (FILE **)MEMORY[0x1E0C80C10];
    v21 = (FILE *)*MEMORY[0x1E0C80C10];
    v22 = "Incorrect k\n";
    v23 = 12;
    goto LABEL_38;
  }
  if (!a5)
  {
    if (v19 >= 1)
    {
      v28 = (FILE **)MEMORY[0x1E0C80C10];
      fwrite("FASTCOVER must have at least one input file\n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      fflush(*v28);
    }
    return -72;
  }
  if (a2 <= 0xFF)
  {
    if (v19 >= 1)
    {
      v27 = (FILE **)MEMORY[0x1E0C80C10];
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "dictBufferCapacity must be at least %u\n", 256);
      fflush(*v27);
    }
    return -70;
  }
  v59 = v17;
  v60 = v11;
  v55 = v13;
  if (*(_DWORD *)(a6 + 16) < 2u)
  {
    v30 = 0;
  }
  else
  {
    v30 = POOL_create();
    if (!v30)
      return -64;
  }
  v71 = 0;
  memset(v70, 0, sizeof(v70));
  v68 = 0u;
  v69 = 0u;
  v61 = (v15 / v16 + 1) << v9;
  v62 = (uint64_t)v30;
  v67 = 0u;
  COVER_best_init((uint64_t)&v67);
  v63 = *(_DWORD *)(a6 + 16);
  v72[0] = *(_OWORD *)(a6 + 40);
  v75 = *(_QWORD *)((char *)v72 + 4);
  v54 = FASTCOVER_defaultAccelParameters[v18];
  v76 = HIDWORD(v72[0]);
  v31 = v19 - 1;
  if (!v19)
    v31 = 0;
  g_displayLevel = v31;
  if (v19 >= 2)
  {
    v32 = (FILE **)MEMORY[0x1E0C80C10];
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Trying %u different sets of parameters\n", v61);
    fflush(*v32);
  }
  v33 = v10;
  if (v10 > v60)
    goto LABEL_62;
  v38 = 1;
  v39 = 0uLL;
  v65 = 1;
  while (2)
  {
    v73 = v39;
    v74 = v39;
    v72[1] = v39;
    v72[2] = v39;
    v72[0] = v39;
    v64 = v33;
    if (v19 >= 3)
    {
      v40 = (FILE **)MEMORY[0x1E0C80C10];
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "d=%u\n", v33);
      fflush(*v40);
      v33 = v64;
    }
    v41 = FASTCOVER_ctx_init((uint64_t *)v72, a3, a4, a5, v33, v59, v54, v6);
    if (v41 < 0xFFFFFFFFFFFFFF89)
    {
      if ((v38 & 1) != 0)
        COVER_warnOnSmallCorpus(a2, v73, v19);
      v42 = v55;
      do
      {
        v43 = (char *)malloc_type_malloc(0x48uLL, 0x1060040023D7745uLL);
        if (v19 >= 3)
        {
          v44 = (FILE **)MEMORY[0x1E0C80C10];
          fprintf((FILE *)*MEMORY[0x1E0C80C10], "k=%u\n", v42);
          fflush(*v44);
        }
        if (!v43)
        {
          if (v19 >= 1)
          {
            v51 = (FILE **)MEMORY[0x1E0C80C10];
            fwrite("Failed to allocate parameters\n", 0x1EuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            fflush(*v51);
          }
          COVER_best_destroy((uint64_t)&v67);
          free(*((void **)&v73 + 1));
          *((_QWORD *)&v73 + 1) = 0;
          free(*((void **)&v72[0] + 1));
          *((_QWORD *)&v72[0] + 1) = 0;
          v24 = -64;
          goto LABEL_95;
        }
        v45 = v16;
        *(_QWORD *)v43 = v72;
        *((_QWORD *)v43 + 1) = &v67;
        *((_QWORD *)v43 + 2) = a2;
        v46 = v75;
        *((_QWORD *)v43 + 8) = v76;
        *((_DWORD *)v43 + 6) = v42;
        *((_DWORD *)v43 + 7) = v64;
        *((double *)v43 + 5) = v6;
        *((_DWORD *)v43 + 8) = v12;
        *((_DWORD *)v43 + 9) = v63;
        *((_QWORD *)v43 + 6) = 0;
        *((_QWORD *)v43 + 7) = v46;
        v47 = g_displayLevel;
        *((_DWORD *)v43 + 15) = g_displayLevel;
        v48 = *(_OWORD *)(v43 + 40);
        v66[0] = *(_OWORD *)(v43 + 24);
        v66[1] = v48;
        v66[2] = *(_OWORD *)(v43 + 56);
        if (FASTCOVER_checkParameters((double *)v66, a2, SDWORD1(v74), v18))
        {
          COVER_best_start((uint64_t)&v67);
          if (v62)
            POOL_add(v62, (uint64_t (*)(uint64_t))FASTCOVER_tryParameters, (uint64_t)v43);
          else
            FASTCOVER_tryParameters(v43);
          v16 = v45;
          if (v19 >= 2 && (clock() - g_time > 0x249F0 || v19 >= 4))
          {
            g_time = clock();
            v50 = (FILE **)MEMORY[0x1E0C80C10];
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "\r%u%%       ", 100 * v65 / v61);
            fflush(*v50);
          }
          ++v65;
        }
        else
        {
          if (v47 >= 1)
          {
            v49 = (FILE **)MEMORY[0x1E0C80C10];
            fwrite("FASTCOVER parameters incorrect\n", 0x1FuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            fflush(*v49);
          }
          free(v43);
          v16 = v45;
        }
        v42 += v16;
      }
      while (v42 <= v14);
      COVER_best_wait((uint64_t)&v67);
      free(*((void **)&v73 + 1));
      *((_QWORD *)&v73 + 1) = 0;
      free(*((void **)&v72[0] + 1));
      v38 = 0;
      v33 = v64 + 2;
      v39 = 0uLL;
      if (v64 + 2 <= v60)
        continue;
LABEL_62:
      if (v19 >= 2)
      {
        v34 = (FILE **)MEMORY[0x1E0C80C10];
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "\r%79s\r", "");
        fflush(*v34);
      }
      v24 = v71;
      if (v71 < 0xFFFFFFFFFFFFFF89)
      {
        v72[0] = *(_OWORD *)((char *)v70 + 12);
        v35 = *((_QWORD *)&v69 + 1);
        *(_QWORD *)a6 = v69;
        v36 = *(_QWORD *)&v70[0];
        v37 = DWORD2(v70[0]);
        *(_QWORD *)(a6 + 12) = v35;
        *(_QWORD *)(a6 + 24) = v36;
        *(_DWORD *)(a6 + 8) = v59;
        *(_QWORD *)(a6 + 44) = *(_QWORD *)((char *)v72 + 4);
        *(_DWORD *)(a6 + 52) = HIDWORD(v72[0]);
        *(_DWORD *)(a6 + 32) = v18;
        *(_DWORD *)(a6 + 36) = v37;
        v24 = *((_QWORD *)&v68 + 1);
        memcpy(a1, (const void *)v68, *((size_t *)&v68 + 1));
      }
      goto LABEL_66;
    }
    break;
  }
  v24 = v41;
  if (v19 >= 1)
  {
    v52 = (FILE **)MEMORY[0x1E0C80C10];
    fwrite("Failed to initialize context\n", 0x1DuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    fflush(*v52);
  }
LABEL_66:
  COVER_best_destroy((uint64_t)&v67);
LABEL_95:
  POOL_free(v62);
  return v24;
}

void FASTCOVER_tryParameters(char *a1)
{
  uint64_t v2;
  __int128 v3;
  size_t v4;
  void *v5;
  char *v6;
  void *v7;
  void *v8;
  BOOL v9;
  FILE *v11;
  const char *v12;
  size_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 IsError;
  _QWORD *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v2 = *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 40);
  v30 = *(_OWORD *)(a1 + 24);
  v31 = v3;
  v32 = *(_OWORD *)(a1 + 56);
  v4 = *((_QWORD *)a1 + 2);
  v5 = malloc_type_calloc(1 << *(_DWORD *)(v2 + 68), 2uLL, 0x1000040BDFB0063uLL);
  v6 = (char *)malloc_type_malloc(v4, 0x20369D6uLL);
  v28 = 0uLL;
  v29 = 0;
  COVER_dictSelectionError(-1, &v28);
  v7 = malloc_type_malloc(4 << *(_DWORD *)(v2 + 68), 0x39F7B7B6uLL);
  v8 = v7;
  if (v5)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (v9 || v7 == 0)
  {
    if (g_displayLevel >= 1)
    {
      v11 = (FILE *)*MEMORY[0x1E0C80C10];
      v12 = "Failed to allocate buffers: out of memory\n";
      v13 = 42;
LABEL_14:
      fwrite(v12, v13, 1uLL, v11);
      fflush((FILE *)*MEMORY[0x1E0C80C10]);
    }
  }
  else
  {
    memcpy(v7, *(const void **)(v2 + 56), 4 << *(_DWORD *)(v2 + 68));
    v25 = v30;
    v26 = v31;
    v27 = v32;
    v14 = FASTCOVER_buildDictionary((uint64_t *)v2, (uint64_t)v8, (uint64_t)v6, v4, (unsigned int *)&v25, (uint64_t)v5);
    v16 = *(_QWORD *)(v2 + 24);
    v15 = *(_QWORD *)(v2 + 32);
    v17 = v15 * *(unsigned int *)(v2 + 72) / 0x64;
    v19 = *(_QWORD *)(v2 + 8);
    v18 = *(_QWORD *)(v2 + 16);
    v20 = *(_QWORD *)v2;
    v25 = v30;
    v26 = v31;
    v27 = v32;
    COVER_selectDict(v4, &v6[v14], v4 - v14, v20, v18, v17, v15, v16, &v23, &v25, v19);
    v28 = v23;
    v29 = v24;
    v25 = v23;
    *(_QWORD *)&v26 = v24;
    IsError = COVER_dictSelectionIsError(&v25);
    if (IsError && g_displayLevel >= 1)
    {
      v11 = (FILE *)*MEMORY[0x1E0C80C10];
      v12 = "Failed to select dictionary\n";
      v13 = 28;
      goto LABEL_14;
    }
  }
  free(v6);
  v22 = (_QWORD *)*((_QWORD *)a1 + 1);
  v25 = v30;
  v26 = v31;
  v27 = v32;
  v23 = v28;
  v24 = v29;
  COVER_best_finish(v22, &v25, (uint64_t)&v23);
  free(a1);
  free(v5);
  v25 = v28;
  *(_QWORD *)&v26 = v29;
  COVER_dictSelectionFree((void **)&v25);
  free(v8);
}

uint64_t HIST_count_simple(void *a1, unsigned int *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t result;
  unsigned int v15;

  v8 = *a2;
  bzero(a1, 4 * (*a2 + 1));
  if (a4)
  {
    if (a4 >= 1)
    {
      v9 = &a3[a4];
      do
      {
        v10 = *a3++;
        ++*((_DWORD *)a1 + v10);
      }
      while (a3 < v9);
    }
    do
      v11 = v8;
    while (!*((_DWORD *)a1 + v8--));
    v13 = 0;
    LODWORD(result) = 0;
    *a2 = v8 + 1;
    do
    {
      v15 = *((_DWORD *)a1 + v13);
      if (v15 <= result)
        result = result;
      else
        result = v15;
    }
    while (v13++ < v11);
  }
  else
  {
    result = 0;
    *a2 = 0;
  }
  return result;
}

uint64_t HIST_countFast_wksp(void *a1, unsigned int *a2, unsigned __int8 *a3, unint64_t a4, char *a5, unint64_t a6)
{
  if (a4 <= 0x5DB)
    return HIST_count_simple(a1, a2, a3, a4);
  if ((a5 & 3) != 0)
    return -1;
  if (a6 >= 0x1000)
    return HIST_count_parallel_wksp(a1, a2, (unsigned int *)a3, a4, 0, a5);
  return -66;
}

uint64_t HIST_count_parallel_wksp(void *a1, unsigned int *a2, unsigned int *a3, uint64_t a4, int a5, char *a6)
{
  uint64_t v6;
  size_t v9;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  char *v16;
  char *v17;
  char *v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char *v24;
  int v25;
  uint64_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  unsigned int v29;

  v6 = a4;
  v9 = 4 * (*a2 + 1);
  if (a4)
  {
    v13 = (unsigned int *)((char *)a3 + a4);
    bzero(a6, 0x1000uLL);
    v14 = a3;
    v15 = a3;
    if (v6 >= 20)
    {
      v16 = a6 + 1024;
      v17 = a6 + 2048;
      v18 = a6 + 3072;
      v19 = *a3;
      v14 = a3;
      v15 = a3;
      do
      {
        v20 = v15[1];
        ++*(_DWORD *)&a6[4 * v19];
        ++*(_DWORD *)&v16[4 * BYTE1(v19)];
        ++*(_DWORD *)&v17[4 * BYTE2(v19)];
        ++*(_DWORD *)&v18[4 * HIBYTE(v19)];
        v21 = v15[2];
        ++*(_DWORD *)&a6[4 * v20];
        ++*(_DWORD *)&v16[4 * BYTE1(v20)];
        ++*(_DWORD *)&v17[4 * BYTE2(v20)];
        ++*(_DWORD *)&v18[(v20 >> 22) & 0x3FC];
        v22 = v15[3];
        ++*(_DWORD *)&a6[4 * v21];
        ++*(_DWORD *)&v16[4 * BYTE1(v21)];
        ++*(_DWORD *)&v17[4 * BYTE2(v21)];
        ++*(_DWORD *)&v18[(v21 >> 22) & 0x3FC];
        v23 = v15[4];
        v15 += 4;
        v19 = v23;
        ++*(_DWORD *)&a6[4 * v22];
        ++*(_DWORD *)&v16[4 * BYTE1(v22)];
        ++*(_DWORD *)&v17[4 * BYTE2(v22)];
        ++*(_DWORD *)&v18[(v22 >> 22) & 0x3FC];
        v14 += 4;
      }
      while (v15 + 1 < (unsigned int *)((char *)a3 + v6 - 15));
    }
    if (v15 < v13)
    {
      v24 = (char *)((char *)a3 + v6 - (char *)v14);
      do
      {
        v25 = *(unsigned __int8 *)v15;
        v15 = (unsigned int *)((char *)v15 + 1);
        ++*(_DWORD *)&a6[4 * v25];
        --v24;
      }
      while (v24);
    }
    v26 = 0;
    v27 = 0uLL;
    do
    {
      v28 = (uint32x4_t)vaddq_s32(vaddq_s32(*(int32x4_t *)&a6[v26 + 2048], *(int32x4_t *)&a6[v26 + 1024]), vaddq_s32(*(int32x4_t *)&a6[v26 + 3072], *(int32x4_t *)&a6[v26]));
      *(uint32x4_t *)&a6[v26] = v28;
      v27 = vmaxq_u32(v28, v27);
      v26 += 16;
    }
    while (v26 != 1024);
    v6 = vmaxvq_u32(v27);
    v29 = 256;
    do
      --v29;
    while (!*(_DWORD *)&a6[4 * v29]);
    if (a5 && v29 > *a2)
    {
      return -48;
    }
    else
    {
      *a2 = v29;
      memmove(a1, a6, v9);
    }
  }
  else
  {
    bzero(a1, 4 * (*a2 + 1));
    *a2 = 0;
  }
  return v6;
}

uint64_t HIST_count_wksp(void *a1, unsigned int *a2, unsigned int *a3, unint64_t a4, char *a5, unint64_t a6)
{
  if ((a5 & 3) != 0)
    return -1;
  if (a6 < 0x1000)
    return -66;
  if (*a2 <= 0xFE)
    return HIST_count_parallel_wksp(a1, a2, a3, a4, 1, a5);
  *a2 = 255;
  return HIST_countFast_wksp(a1, a2, (unsigned __int8 *)a3, a4, a5, a6);
}

uint64_t HUF_readDTableX1_wksp_bmi2(int *a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  _BYTE *v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _DWORD *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int *v34;
  int v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t j;
  uint64_t v42;
  int v43;
  char v44;
  _BYTE *v45;
  uint64_t v46;
  char *v47;
  char v48;
  char *v49;
  uint64_t v50;
  _BYTE *v51;
  char v52;
  uint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unint64_t *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v68;

  v68 = 0;
  if (a5 < 0x5D0)
    return -44;
  v8 = (_BYTE *)(a4 + 1232);
  v5 = HUF_readStats_wksp((_BYTE *)(a4 + 1232), 0x100uLL, a4, &v68, (_DWORD *)&v68 + 1, a2, a3, (unsigned __int16 *)(a4 + 104), 0x368uLL);
  if (v5 > 0xFFFFFFFFFFFFFF88)
    return v5;
  v9 = *a1;
  v10 = *a1;
  v11 = v10 + 1;
  if ((v10 + 1) < 0xB)
    v12 = v10 + 1;
  else
    v12 = 11;
  v14 = v68;
  v13 = HIDWORD(v68);
  v15 = HIDWORD(v68) - v12;
  if (HIDWORD(v68) <= v12)
  {
    if (HIDWORD(v68) < v12)
    {
      v16 = v12 - HIDWORD(v68);
      if ((_DWORD)v68)
      {
        v17 = v68;
        do
        {
          if (*v8)
            v18 = v16;
          else
            v18 = 0;
          *v8++ += v18;
          --v17;
        }
        while (v17);
      }
      if (v16 < v12)
      {
        v19 = (_DWORD *)(a4 + 4 * v12);
        v20 = v12;
        do
          *v19-- = *(_DWORD *)(a4 + 4 * (v15 + v20--));
        while (v16 < v20);
      }
      if (v12 != v13)
        bzero((void *)(a4 + 4 * (v16 - (v12 + ~v13))), 4 * (v12 + ~v13) + 4);
    }
  }
  else
  {
    v12 = HIDWORD(v68);
    if (HIDWORD(v68) > v11)
      return -44;
  }
  *(_BYTE *)a1 = v9;
  *((_BYTE *)a1 + 1) = 0;
  *((_BYTE *)a1 + 2) = v12;
  *((_BYTE *)a1 + 3) = HIBYTE(v9);
  if ((v12 & 0x80000000) == 0)
  {
    v21 = 0;
    v22 = v12 + 1;
    v23 = (int *)a4;
    do
    {
      v24 = *v23;
      v23[13] = v21;
      v21 += v24;
      ++v23;
      --v22;
    }
    while (v22);
  }
  if ((int)v14 < 4)
  {
    LODWORD(v25) = 0;
  }
  else
  {
    v25 = 0;
    v26 = a4 + 1232;
    do
    {
      for (i = 0; i != 4; ++i)
      {
        v28 = a4 + 4 * *(unsigned __int8 *)(v26 + i);
        v29 = *(unsigned int *)(v28 + 52);
        *(_DWORD *)(v28 + 52) = v29 + 1;
        *(_BYTE *)(a4 + v29 + 976) = i + v25;
      }
      v25 += 4;
      v26 += 4;
    }
    while (v25 < (v14 - 3));
  }
  if ((int)v25 < (int)v14)
  {
    v25 = v25;
    do
    {
      v30 = a4 + 4 * *(unsigned __int8 *)(a4 + 1232 + v25);
      v31 = *(unsigned int *)(v30 + 52);
      *(_DWORD *)(v30 + 52) = v31 + 1;
      *(_BYTE *)(a4 + v31 + 976) = v25++;
    }
    while (v14 != v25);
  }
  v32 = v12 + 1;
  if (v32 >= 2)
  {
    v33 = 0;
    v34 = a1 + 3;
    v35 = *(_DWORD *)a4;
    v36 = a4 + 976;
    v37 = a1 + 1;
    v38 = (uint64_t)a1 + 7;
    v39 = (uint64_t)a1 + 5;
    v40 = a1 + 5;
    for (j = 1; j != v32; ++j)
    {
      v42 = *(unsigned int *)(a4 + 4 * j);
      v43 = 1 << j >> 1;
      v44 = v32 - j;
      switch(v43)
      {
        case 1:
          if ((int)v42 >= 1)
          {
            v45 = (_BYTE *)(v39 + 2 * v33);
            v46 = *(unsigned int *)(a4 + 4 * j);
            v47 = (char *)(v36 + v35);
            do
            {
              v48 = *v47++;
              *(v45 - 1) = v44;
              *v45 = v48;
              v45 += 2;
              --v46;
            }
            while (v46);
          }
          break;
        case 2:
          if ((int)v42 >= 1)
          {
            v49 = (char *)(v36 + v35);
            v50 = *(unsigned int *)(a4 + 4 * j);
            v51 = (_BYTE *)(v38 + 2 * v33);
            do
            {
              v52 = *v49++;
              *(v51 - 3) = v44;
              *(v51 - 2) = v52;
              *(v51 - 1) = v44;
              *v51 = v52;
              v51 += 4;
              --v50;
            }
            while (v50);
          }
          break;
        case 4:
          if ((int)v42 >= 1)
          {
            v58 = (_QWORD *)((char *)v37 + 2 * v33);
            v59 = *(unsigned int *)(a4 + 4 * j);
            v60 = (unsigned __int8 *)(v36 + v35);
            do
            {
              v61 = *v60++;
              *v58++ = 0x1000100010001 * ((v32 - j) | ((unint64_t)v61 << 8));
              --v59;
            }
            while (v59);
          }
          break;
        case 8:
          if ((int)v42 >= 1)
          {
            v62 = (unint64_t *)((char *)v34 + 2 * v33);
            v63 = *(unsigned int *)(a4 + 4 * j);
            v64 = (unsigned __int8 *)(v36 + v35);
            do
            {
              v65 = *v64++;
              v66 = 0x1000100010001 * ((v32 - j) | ((unint64_t)v65 << 8));
              *(v62 - 1) = v66;
              *v62 = v66;
              v62 += 2;
              --v63;
            }
            while (v63);
          }
          break;
        default:
          if ((int)v42 >= 1)
          {
            v53 = 0;
            v54 = (unint64_t *)((char *)v40 + 2 * v33);
            do
            {
              if (1 << j >= 2)
              {
                v55 = 0;
                v56 = 0x1000100010001
                    * ((v32 - j) | ((unint64_t)*(unsigned __int8 *)(a4 + v53 + v35 + 976) << 8));
                v57 = v54;
                do
                {
                  *(v57 - 2) = v56;
                  *(v57 - 1) = v56;
                  *v57 = v56;
                  v57[1] = v56;
                  v57 += 4;
                  v55 += 16;
                }
                while (v55 < v43);
              }
              ++v53;
              v54 = (unint64_t *)((char *)v54 + 2 * v43);
            }
            while (v53 != v42);
          }
          break;
      }
      v35 += v42;
      v33 += v42 * v43;
    }
  }
  return v5;
}

uint64_t HUF_decompress1X1_usingDTable_internal(_BYTE *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  char *v17;
  _BOOL4 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned __int8 v26;
  int v27;
  uint64_t v28;
  unsigned __int8 *v29;

  if (!a4)
    return -72;
  v5 = (unint64_t)&a1[a2];
  v6 = a5 + 4;
  v7 = *(unsigned __int16 *)(a5 + 2);
  v8 = a4 - 8;
  if ((unint64_t)a4 < 8)
  {
    v10 = *a3;
    switch(a4)
    {
      case 2:
        goto LABEL_18;
      case 3:
        goto LABEL_17;
      case 4:
        goto LABEL_16;
      case 5:
        goto LABEL_15;
      case 6:
        goto LABEL_14;
      case 7:
        v10 |= (unint64_t)a3[6] << 48;
LABEL_14:
        v10 += (unint64_t)a3[5] << 40;
LABEL_15:
        v10 += (unint64_t)a3[4] << 32;
LABEL_16:
        v10 += (unint64_t)a3[3] << 24;
LABEL_17:
        v10 += (unint64_t)a3[2] << 16;
LABEL_18:
        v10 += (unint64_t)a3[1] << 8;
        break;
      default:
        break;
    }
    if (!a3[a4 - 1])
      return -20;
    v11 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
    if (a2 < 4)
    {
      v9 = a3;
      goto LABEL_39;
    }
    v8 = 0;
    v9 = a3;
LABEL_22:
    v14 = -v7 & 0x3F;
    v15 = a1;
    while (1)
    {
      if (v8 >= 8)
      {
        v18 = 0;
        LODWORD(v16) = v11 >> 3;
        v11 &= 7u;
      }
      else
      {
        if (!v8)
          break;
        v16 = v11 >> 3;
        v17 = (char *)&v9[-v16];
        v18 = v17 < (char *)a3;
        if (v17 < (char *)a3)
          LODWORD(v16) = v8;
        v11 -= 8 * v16;
      }
      v8 -= v16;
      v9 = &a3[v8];
      v10 = *(_QWORD *)&a3[v8];
      if ((unint64_t)v15 >= v5 - 3 || v18)
        break;
      v19 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v11) >> v14));
      v20 = v11 + *v19;
      *v15 = v19[1];
      v21 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v20) >> v14));
      v22 = v20 + *v21;
      v15[1] = v21[1];
      v23 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v22) >> v14));
      v24 = v22 + *v23;
      v15[2] = v23[1];
      v25 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v24) >> v14));
      v26 = v25[1];
      v11 = v24 + *v25;
      v12 = v15 + 4;
      v15[3] = v26;
      v15 += 4;
      if (v11 > 0x40)
        goto LABEL_40;
    }
    v12 = v15;
    goto LABEL_40;
  }
  if (!a3[a4 - 1])
    return -1;
  if ((unint64_t)a4 <= 0xFFFFFFFFFFFFFF88)
  {
    v9 = &a3[v8];
    v10 = *(_QWORD *)&a3[v8];
    v11 = __clz(a3[a4 - 1]) - 23;
    if (a2 <= 3)
    {
      if (a4 >= 16)
      {
        LODWORD(v13) = v11 >> 3;
        v11 &= 7u;
      }
      else
      {
        v12 = a1;
        if (!v8)
        {
LABEL_40:
          if ((unint64_t)v12 < v5)
          {
            v27 = -v7 & 0x3F;
            v28 = &a1[a2] - v12;
            do
            {
              v29 = (unsigned __int8 *)(v6 + 2 * ((unint64_t)(v10 << v11) >> v27));
              v11 += *v29;
              *v12++ = v29[1];
              --v28;
            }
            while (v28);
          }
          if (v11 == 64 && v9 == a3)
            return a2;
          else
            return -20;
        }
        v13 = v11 >> 3;
        if (&v9[-v13] < a3)
          LODWORD(v13) = v8;
        v11 -= 8 * v13;
      }
      v9 -= v13;
      v10 = *(_QWORD *)v9;
LABEL_39:
      v12 = a1;
      goto LABEL_40;
    }
    goto LABEL_22;
  }
  return a4;
}

uint64_t HUF_decompress4X1_usingDTable_internal(unsigned __int8 *a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned int v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned int v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned __int8 *v62;
  unsigned __int8 v63;
  unsigned __int8 *v64;
  int v65;
  unsigned __int8 *v66;
  int v67;
  unsigned __int8 *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  int v79;
  uint64_t v80;
  _BOOL4 v81;
  unsigned __int8 *v82;
  unsigned __int8 v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unsigned __int8 v87;
  unsigned __int8 *v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unint64_t v91;
  unsigned __int8 *v92;
  int v93;
  uint64_t v94;
  char *v95;
  _BOOL4 v96;
  int v97;
  unsigned __int8 *v98;
  unsigned __int8 v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  unsigned __int8 v103;
  unsigned __int8 *v104;
  uint64_t v105;
  unsigned __int8 *i;
  unsigned __int8 *v107;
  int v108;
  uint64_t v109;
  _BOOL4 v110;
  unsigned int v111;
  int v112;
  unsigned __int8 *v113;
  int v114;
  unsigned __int8 *v115;
  int v116;
  unsigned __int8 *v117;
  int v118;
  unsigned __int8 *v119;
  unsigned __int8 v120;
  unsigned __int8 *v121;
  uint64_t v122;
  unsigned __int8 *j;
  unsigned __int8 *v124;
  char v125;
  int v126;
  unsigned __int8 *v127;
  uint64_t v128;
  _BOOL4 v129;
  unsigned __int8 *v130;
  unsigned __int8 v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  uint64_t v136;
  int64_t v137;
  unsigned __int8 *v138;
  BOOL v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;

  if (a4 < 0xA)
    return -20;
  v6 = (unint64_t)&a1[a2];
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = v7 + 6;
  v11 = v7 + 6 + v8 + v9;
  v12 = a4 >= v11;
  v5 = a4 - v11;
  v13 = (unint64_t)&a1[(unint64_t)(a2 + 3) >> 2];
  v14 = v13 + ((unint64_t)(a2 + 3) >> 2);
  v15 = v14 + ((unint64_t)(a2 + 3) >> 2);
  if (!v12 || v15 > v6)
    return -20;
  if (!*a3)
    return -72;
  if (v7 < 8)
  {
    v18 = *((unsigned __int8 *)a3 + 6);
    switch(*a3)
    {
      case 2u:
        goto LABEL_20;
      case 3u:
        goto LABEL_19;
      case 4u:
        goto LABEL_18;
      case 5u:
        goto LABEL_17;
      case 6u:
        goto LABEL_16;
      case 7u:
        v18 |= (unint64_t)*((unsigned __int8 *)a3 + 12) << 48;
LABEL_16:
        v18 += (unint64_t)*((unsigned __int8 *)a3 + 11) << 40;
LABEL_17:
        v18 += (unint64_t)*((unsigned __int8 *)a3 + 10) << 32;
LABEL_18:
        v18 += (unint64_t)*((unsigned __int8 *)a3 + 9) << 24;
LABEL_19:
        v18 += (unint64_t)*((unsigned __int8 *)a3 + 8) << 16;
LABEL_20:
        v18 += (unint64_t)*((unsigned __int8 *)a3 + 7) << 8;
        break;
      default:
        break;
    }
    if (!*((_BYTE *)a3 + v7 + 5))
      return -20;
    v19 = __clz(*((unsigned __int8 *)a3 + v7 + 5)) - 8 * v7 + 41;
    v17 = 6;
    if (!a3[1])
      return -72;
  }
  else
  {
    v17 = v7 - 2;
    v18 = *(_QWORD *)((char *)a3 + v17);
    if (!HIBYTE(v18))
      return -1;
    v19 = __clz(HIBYTE(v18)) - 23;
    if (!a3[1])
      return -72;
  }
  v20 = (unsigned __int8 *)a3 + v10;
  if (v8 < 8)
  {
    v22 = *v20;
    switch(a3[1])
    {
      case 2u:
        goto LABEL_32;
      case 3u:
        goto LABEL_31;
      case 4u:
        goto LABEL_30;
      case 5u:
        goto LABEL_29;
      case 6u:
        goto LABEL_28;
      case 7u:
        v22 |= (unint64_t)v20[6] << 48;
LABEL_28:
        v22 += (unint64_t)v20[5] << 40;
LABEL_29:
        v22 += (unint64_t)v20[4] << 32;
LABEL_30:
        v22 += (unint64_t)v20[3] << 24;
LABEL_31:
        v22 += (unint64_t)v20[2] << 16;
LABEL_32:
        v22 += (unint64_t)v20[1] << 8;
        break;
      default:
        break;
    }
    if (!v20[v8 - 1])
      return -20;
    v21 = 0;
    v23 = __clz(v20[v8 - 1]) - 8 * v8 + 41;
  }
  else
  {
    v21 = v8 - 8;
    v22 = *(_QWORD *)&v20[v8 - 8];
    if (!HIBYTE(v22))
      return -1;
    v23 = __clz(HIBYTE(v22)) - 23;
  }
  if (!a3[2])
    return -72;
  v24 = &v20[v8];
  if (v9 >= 8)
  {
    v25 = v9 - 8;
    v26 = *(_QWORD *)&v24[v9 - 8];
    if (HIBYTE(v26))
    {
      v27 = __clz(HIBYTE(v26)) - 23;
      goto LABEL_48;
    }
    return -1;
  }
  v26 = *v24;
  switch(a3[2])
  {
    case 2u:
      goto LABEL_45;
    case 3u:
      goto LABEL_44;
    case 4u:
      goto LABEL_43;
    case 5u:
      goto LABEL_42;
    case 6u:
      goto LABEL_41;
    case 7u:
      v26 |= (unint64_t)v24[6] << 48;
LABEL_41:
      v26 += (unint64_t)v24[5] << 40;
LABEL_42:
      v26 += (unint64_t)v24[4] << 32;
LABEL_43:
      v26 += (unint64_t)v24[3] << 24;
LABEL_44:
      v26 += (unint64_t)v24[2] << 16;
LABEL_45:
      v26 += (unint64_t)v24[1] << 8;
      break;
    default:
      break;
  }
  if (!v24[v9 - 1])
    return -20;
  v25 = 0;
  v27 = __clz(v24[v9 - 1]) - 8 * v9 + 41;
LABEL_48:
  if (!v5)
    return -72;
  v28 = &v24[v9];
  v29 = v5 - 8;
  v150 = &v24[v9];
  if (v5 < 8)
  {
    v30 = *v28;
    switch(v5)
    {
      case 2uLL:
        goto LABEL_62;
      case 3uLL:
        goto LABEL_61;
      case 4uLL:
        goto LABEL_60;
      case 5uLL:
        goto LABEL_59;
      case 6uLL:
        goto LABEL_58;
      case 7uLL:
        v30 |= (unint64_t)v28[6] << 48;
LABEL_58:
        v30 += (unint64_t)v28[5] << 40;
LABEL_59:
        v30 += (unint64_t)v28[4] << 32;
LABEL_60:
        v30 += (unint64_t)v28[3] << 24;
LABEL_61:
        v30 += (unint64_t)v28[2] << 16;
LABEL_62:
        v30 += (unint64_t)v28[1] << 8;
        break;
      default:
        break;
    }
    if (v28[v5 - 1])
    {
      v29 = 0;
      v31 = __clz(v28[v5 - 1]) - 8 * v5 + 41;
      goto LABEL_65;
    }
    return -20;
  }
  if (!v28[v5 - 1])
    return -1;
  if (v5 > 0xFFFFFFFFFFFFFF88)
    return v5;
  v30 = *(_QWORD *)&v150[v29];
  v31 = __clz(v28[v5 - 1]) - 23;
LABEL_65:
  v33 = a5 + 4;
  v148 = (unint64_t)(a2 + 3) >> 2;
  v149 = &v20[v8];
  v146 = *(unsigned __int16 *)(a5 + 2);
  v147 = v6 - 3;
  if (v6 - v15 < 8 || v15 >= v6 - 3)
  {
    v75 = a1;
    v76 = &a1[(unint64_t)(a2 + 3) >> 2];
    v77 = (unsigned __int8 *)(v13 + ((unint64_t)(a2 + 3) >> 2));
    v78 = (unsigned __int8 *)(v14 + ((unint64_t)(a2 + 3) >> 2));
  }
  else
  {
    v34 = -*(unsigned __int16 *)(a5 + 2) & 0x3F;
    v35 = a1;
    do
    {
      v36 = v35;
      v37 = &v35[3 * v148];
      v38 = &v35[2 * v148];
      v39 = &v36[v148];
      v40 = (unsigned __int8 *)(v33 + 2 * (v18 << v19 >> v34));
      v41 = v40[1];
      LODWORD(v40) = v19 + *v40;
      *v36 = v41;
      v42 = (unsigned __int8 *)(v33 + 2 * (v22 << v23 >> v34));
      v43 = v23 + *v42;
      *v39 = v42[1];
      v44 = (unsigned __int8 *)(v33 + 2 * (v26 << v27 >> v34));
      v45 = v27 + *v44;
      *v38 = v44[1];
      v46 = (unsigned __int8 *)(v33 + 2 * ((unint64_t)(v30 << v31) >> v34));
      v47 = v31 + *v46;
      *v37 = v46[1];
      v48 = (unsigned __int8 *)(v33 + 2 * (v18 << (char)v40 >> v34));
      LODWORD(v40) = (_DWORD)v40 + *v48;
      v36[1] = v48[1];
      v49 = (unsigned __int8 *)(v33 + 2 * (v22 << v43 >> v34));
      v50 = v43 + *v49;
      v39[1] = v49[1];
      v51 = (unsigned __int8 *)(v33 + 2 * (v26 << v45 >> v34));
      v52 = v45 + *v51;
      v38[1] = v51[1];
      v53 = (unsigned __int8 *)(v33 + 2 * ((unint64_t)(v30 << v47) >> v34));
      v54 = v47 + *v53;
      v37[1] = v53[1];
      v55 = (unsigned __int8 *)(v33 + 2 * (v18 << (char)v40 >> v34));
      LODWORD(v40) = (_DWORD)v40 + *v55;
      v36[2] = v55[1];
      v56 = (unsigned __int8 *)(v33 + 2 * (v22 << v50 >> v34));
      v57 = v50 + *v56;
      v39[2] = v56[1];
      v58 = (unsigned __int8 *)(v33 + 2 * (v26 << v52 >> v34));
      v59 = v52 + *v58;
      v38[2] = v58[1];
      v60 = (unsigned __int8 *)(v33 + 2 * ((unint64_t)(v30 << v54) >> v34));
      v61 = v54 + *v60;
      v37[2] = v60[1];
      v62 = (unsigned __int8 *)(v33 + 2 * (v18 << (char)v40 >> v34));
      v63 = v62[1];
      v19 = (_DWORD)v40 + *v62;
      v36[3] = v63;
      v64 = (unsigned __int8 *)(v33 + 2 * (v22 << v57 >> v34));
      v65 = *v64;
      v39[3] = v64[1];
      v66 = (unsigned __int8 *)(v33 + 2 * (v26 << v59 >> v34));
      v67 = *v66;
      v38[3] = v66[1];
      v68 = (unsigned __int8 *)(v33 + 2 * ((unint64_t)(v30 << v61) >> v34));
      v69 = *v68;
      v37[3] = v68[1];
      if (v17 < 14)
      {
        v70 = 3;
      }
      else
      {
        v70 = 0;
        v17 -= v19 >> 3;
        v19 &= 7u;
        v18 = *(_QWORD *)((char *)a3 + v17);
      }
      v23 = v57 + v65;
      if (v21 < 8)
      {
        v71 = 3;
      }
      else
      {
        v71 = 0;
        v21 -= v23 >> 3;
        v23 &= 7u;
        v22 = *(_QWORD *)&v20[v21];
      }
      v27 = v59 + v67;
      if (v25 < 8)
      {
        v72 = 3;
      }
      else
      {
        v72 = 0;
        v25 -= v27 >> 3;
        v27 &= 7u;
        v26 = *(_QWORD *)&v149[v25];
      }
      v31 = v61 + v69;
      if (v29 < 8)
      {
        v73 = 3;
      }
      else
      {
        v73 = 0;
        v29 -= v31 >> 3;
        v31 &= 7u;
        v30 = *(_QWORD *)&v150[v29];
      }
      if ((unint64_t)(v37 + 4) >= v147)
        break;
      v74 = v71 | v70 | v72;
      v35 = v36 + 4;
    }
    while (!(v74 | v73));
    v75 = v36 + 4;
    v24 = v149;
    v78 = &v75[3 * v148];
    v77 = &v75[2 * v148];
    v76 = &v75[v148];
  }
  v5 = -20;
  if ((unint64_t)v75 <= v13 && (unint64_t)v76 <= v14 && (unint64_t)v77 <= v15)
  {
    if ((uint64_t)(v13 - (_QWORD)v75) < 4)
    {
      if (v19 > 0x40)
        goto LABEL_112;
      if (v17 >= 14)
      {
        v17 -= v19 >> 3;
        v19 &= 7u;
      }
      else
      {
        if (v17 == 6)
          goto LABEL_112;
        v89 = v19 >> 3;
        if (v17 - v89 >= 6)
          v89 = v89;
        else
          v89 = (v17 - 6);
        v17 -= v89;
        v19 -= 8 * v89;
      }
      v18 = *(_QWORD *)((char *)a3 + v17);
    }
    else if (v19 <= 0x40)
    {
      v79 = -v146 & 0x3F;
      while (1)
      {
        if (v17 >= 14)
        {
          v81 = 0;
          LODWORD(v80) = v19 >> 3;
          v19 &= 7u;
        }
        else
        {
          if (v17 == 6)
            break;
          v80 = v19 >> 3;
          v81 = v17 - v80 < 6;
          if (v17 - v80 < 6)
            LODWORD(v80) = v17 - 6;
          v24 = v149;
          v19 -= 8 * v80;
        }
        v17 -= v80;
        v18 = *(_QWORD *)((char *)a3 + v17);
        if ((unint64_t)v75 >= v13 - 3 || v81)
          break;
        v82 = (unsigned __int8 *)(v33 + 2 * (v18 << v19 >> v79));
        v83 = v82[1];
        LODWORD(v82) = v19 + *v82;
        *v75 = v83;
        v84 = (unsigned __int8 *)(v33 + 2 * (v18 << (char)v82 >> v79));
        LODWORD(v82) = (_DWORD)v82 + *v84;
        v75[1] = v84[1];
        v85 = (unsigned __int8 *)(v33 + 2 * (v18 << (char)v82 >> v79));
        LODWORD(v82) = (_DWORD)v82 + *v85;
        v75[2] = v85[1];
        v86 = (unsigned __int8 *)(v33 + 2 * (v18 << (char)v82 >> v79));
        v87 = v86[1];
        v19 = (_DWORD)v82 + *v86;
        v88 = v75 + 4;
        v75[3] = v87;
        v24 = v149;
        v75 += 4;
        if (v19 > 0x40)
          goto LABEL_111;
      }
      v88 = v75;
LABEL_111:
      v75 = v88;
    }
LABEL_112:
    v90 = &v20[v21];
    if ((unint64_t)v75 < v13)
    {
      v91 = &a1[v148] - v75;
      do
      {
        v92 = (unsigned __int8 *)(v33 + 2 * (v18 << v19 >> (-(char)v146 & 0x3F)));
        v19 += *v92;
        *v75++ = v92[1];
        --v91;
      }
      while (v91);
    }
    if ((uint64_t)(v14 - (_QWORD)v76) < 4)
    {
      if (v23 <= 0x40)
      {
        if (v21 >= 8)
        {
          LODWORD(v105) = v23 >> 3;
          v97 = v23 & 7;
        }
        else
        {
          if (!v21)
            goto LABEL_129;
          v105 = v23 >> 3;
          if (&v90[-v105] < v20)
            LODWORD(v105) = v21;
          v97 = v23 - 8 * v105;
        }
        v90 -= v105;
        v22 = *(_QWORD *)v90;
        goto LABEL_138;
      }
    }
    else if (v23 <= 0x40)
    {
      v93 = -v146 & 0x3F;
      while (1)
      {
        if (v21 >= 8)
        {
          v96 = 0;
          LODWORD(v94) = v23 >> 3;
          v97 = v23 & 7;
        }
        else
        {
          v90 = &v20[v21];
          if (!v21)
            goto LABEL_129;
          v94 = v23 >> 3;
          v95 = (char *)&v90[-v94];
          v12 = v95 >= (char *)v20;
          v96 = v95 < (char *)v20;
          if (!v12)
            LODWORD(v94) = v21;
          v97 = v23 - 8 * v94;
        }
        v21 -= v94;
        v22 = *(_QWORD *)&v20[v21];
        if ((unint64_t)v76 >= v14 - 3 || v96)
          break;
        v98 = (unsigned __int8 *)(v33 + 2 * (v22 << v97 >> v93));
        v99 = v98[1];
        LODWORD(v98) = v97 + *v98;
        *v76 = v99;
        v100 = (unsigned __int8 *)(v33 + 2 * (v22 << (char)v98 >> v93));
        LODWORD(v98) = (_DWORD)v98 + *v100;
        v76[1] = v100[1];
        v101 = (unsigned __int8 *)(v33 + 2 * (v22 << (char)v98 >> v93));
        LODWORD(v98) = (_DWORD)v98 + *v101;
        v76[2] = v101[1];
        v102 = (unsigned __int8 *)(v33 + 2 * (v22 << (char)v98 >> v93));
        v103 = v102[1];
        v23 = (_DWORD)v98 + *v102;
        v104 = v76 + 4;
        v76[3] = v103;
        v76 += 4;
        if (v23 > 0x40)
        {
          v90 = &v20[v21];
          v97 = v23;
          v76 = v104;
          goto LABEL_138;
        }
      }
      v90 = &v20[v21];
LABEL_138:
      for (i = &v24[v25]; (unint64_t)v76 < v14; ++v76)
      {
        v107 = (unsigned __int8 *)(v33 + 2 * (v22 << v97 >> (-(char)v146 & 0x3F)));
        v97 += *v107;
        *v76 = v107[1];
      }
      if ((uint64_t)(v15 - (_QWORD)v77) < 4)
      {
        if (v27 <= 0x40)
        {
          if (v25 >= 8)
          {
            LODWORD(v122) = v27 >> 3;
            v112 = v27 & 7;
          }
          else
          {
            if (!v25)
              goto LABEL_155;
            v122 = v27 >> 3;
            if (&i[-v122] < v24)
              LODWORD(v122) = v25;
            v112 = v27 - 8 * v122;
          }
          i -= v122;
          v26 = *(_QWORD *)i;
          goto LABEL_164;
        }
      }
      else if (v27 <= 0x40)
      {
        v108 = -v146 & 0x3F;
        while (1)
        {
          if (v25 >= 8)
          {
            v110 = 0;
            v111 = v27 >> 3;
            v112 = v27 & 7;
          }
          else
          {
            i = &v24[v25];
            if (!v25)
              goto LABEL_155;
            v109 = v27 >> 3;
            v110 = &i[-v109] < v24;
            v111 = &i[-v109] >= v24 ? v27 >> 3 : v25;
            v112 = v27 - 8 * v111;
          }
          v25 -= v111;
          v26 = *(_QWORD *)&v24[v25];
          if ((unint64_t)v77 >= v15 - 3 || v110)
            break;
          v113 = (unsigned __int8 *)(v33 + 2 * (v26 << v112 >> v108));
          v114 = v112 + *v113;
          *v77 = v113[1];
          v115 = (unsigned __int8 *)(v33 + 2 * (v26 << v114 >> v108));
          v116 = v114 + *v115;
          v77[1] = v115[1];
          v117 = (unsigned __int8 *)(v33 + 2 * (v26 << v116 >> v108));
          v118 = v116 + *v117;
          v77[2] = v117[1];
          v119 = (unsigned __int8 *)(v33 + 2 * (v26 << v118 >> v108));
          v120 = v119[1];
          v27 = v118 + *v119;
          v121 = v77 + 4;
          v77[3] = v120;
          v77 += 4;
          if (v27 > 0x40)
          {
            i = &v24[v25];
            v112 = v27;
            v77 = v121;
            goto LABEL_164;
          }
        }
        i = &v24[v25];
LABEL_164:
        for (j = &v150[v29]; (unint64_t)v77 < v15; ++v77)
        {
          v124 = (unsigned __int8 *)(v33 + 2 * (v26 << v112 >> (-(char)v146 & 0x3F)));
          v112 += *v124;
          *v77 = v124[1];
        }
        if ((uint64_t)(v6 - (_QWORD)v78) < 4)
        {
          if (v31 <= 0x40)
          {
            v125 = v146;
            if (v29 >= 8)
            {
              j -= v31 >> 3;
              v31 &= 7u;
            }
            else
            {
              if (!v29)
                goto LABEL_190;
              v136 = v31 >> 3;
              if (&j[-v136] >= v150)
                v136 = v136;
              else
                v136 = v29;
              j -= v136;
              v31 -= 8 * v136;
            }
            v30 = *(_QWORD *)j;
            goto LABEL_190;
          }
        }
        else if (v31 <= 0x40)
        {
          v125 = v146;
          v126 = -v146 & 0x3F;
          while (1)
          {
            if (v29 >= 8)
            {
              v129 = 0;
              LODWORD(v128) = v31 >> 3;
              v31 &= 7u;
              v127 = v150;
            }
            else
            {
              v127 = v150;
              j = &v150[v29];
              if (!v29)
                goto LABEL_190;
              v128 = v31 >> 3;
              v129 = &j[-v128] < v150;
              if (&j[-v128] < v150)
                LODWORD(v128) = v29;
              v31 -= 8 * v128;
            }
            v29 -= v128;
            v30 = *(_QWORD *)&v127[v29];
            if ((unint64_t)v78 >= v147 || v129)
              break;
            v130 = (unsigned __int8 *)(v33 + 2 * ((unint64_t)(v30 << v31) >> v126));
            v131 = v130[1];
            LODWORD(v130) = v31 + *v130;
            *v78 = v131;
            v132 = (unsigned __int8 *)(v33 + 2 * ((unint64_t)(v30 << (char)v130) >> v126));
            LODWORD(v130) = (_DWORD)v130 + *v132;
            v78[1] = v132[1];
            v133 = (unsigned __int8 *)(v33 + 2 * ((unint64_t)(v30 << (char)v130) >> v126));
            LODWORD(v130) = (_DWORD)v130 + *v133;
            v78[2] = v133[1];
            v134 = (unsigned __int8 *)(v33 + 2 * ((unint64_t)(v30 << (char)v130) >> v126));
            v31 = (_DWORD)v130 + *v134;
            v135 = v78 + 4;
            v78[3] = v134[1];
            v78 += 4;
            if (v31 > 0x40)
            {
              j = &v150[v29];
              v78 = v135;
              goto LABEL_190;
            }
          }
          j = &v150[v29];
          goto LABEL_190;
        }
        v125 = v146;
LABEL_190:
        if ((unint64_t)v78 < v6)
        {
          v137 = &a1[a2] - v78;
          do
          {
            v138 = (unsigned __int8 *)(v33 + 2 * ((unint64_t)(v30 << v31) >> (-v125 & 0x3F)));
            v31 += *v138;
            *v78++ = v138[1];
            --v137;
          }
          while (v137);
        }
        v145 = v31 == 64 && j == v150 && v112 == 64 && i == v24 && v97 == 64 && v90 == v20 && v19 == 64 && v17 == 6;
        v5 = -20;
        if (v145)
          return a2;
        return v5;
      }
LABEL_155:
      v112 = v27;
      goto LABEL_164;
    }
LABEL_129:
    v97 = v23;
    goto LABEL_138;
  }
  return v5;
}

unint64_t HUF_decompress4X1_DCtx_wksp_bmi2(int *a1, unsigned __int8 *a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t result;

  result = HUF_readDTableX1_wksp_bmi2(a1, a4, a5, a6, a7);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
      return -72;
    else
      return HUF_decompress4X1_usingDTable_internal(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (uint64_t)a1);
  }
  return result;
}

unint64_t HUF_readDTableX2_wksp(int *a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  return HUF_readDTableX2_wksp_bmi2(a1, a2, a3, a4, a5);
}

unint64_t HUF_readDTableX2_wksp_bmi2(int *a1, char *a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  int v10;
  _DWORD *v11;
  unsigned int v12;
  int v13;
  _DWORD *v14;
  _BOOL4 v16;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  _DWORD *v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  _QWORD v84[14];

  if (a5 < 0x848)
    return -1;
  v84[12] = v5;
  v84[13] = v6;
  v11 = a1 + 1;
  v10 = *a1;
  *(_OWORD *)(a4 + 704) = 0u;
  *(_OWORD *)(a4 + 720) = 0u;
  *(_OWORD *)(a4 + 672) = 0u;
  *(_OWORD *)(a4 + 688) = 0u;
  *(_OWORD *)(a4 + 640) = 0u;
  *(_OWORD *)(a4 + 656) = 0u;
  *(_OWORD *)(a4 + 624) = 0u;
  if (v10 <= 0xCu)
  {
    v84[0] = 0;
    result = HUF_readStats_wksp((_BYTE *)(a4 + 992), 0x100uLL, a4 + 624, v84, (_DWORD *)v84 + 1, a2, a3, (unsigned __int16 *)(a4 + 1248), 0x368uLL);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    v12 = HIDWORD(v84[0]);
    if (HIDWORD(v84[0]) <= v10)
    {
      v59 = result;
      v60 = v10;
      v13 = 0;
      v68 = a4 + 676;
      v14 = (_DWORD *)(a4 + 680);
      v16 = HIDWORD(v84[0]) < 0xC && v10 > 0xBu;
      v69 = HIDWORD(v84[0]) + 1;
      while (!*(_DWORD *)(a4 + 4 * (HIDWORD(v84[0]) + v13--) + 624))
        ;
      v18 = 0;
      if (v16)
        v10 = 11;
      else
        v10 = v10;
      v19 = HIDWORD(v84[0]) + v13;
      v20 = (HIDWORD(v84[0]) + v13 + 2);
      if ((HIDWORD(v84[0]) + v13) < 0xFFFFFFFE)
      {
        v21 = 0;
        v22 = (_DWORD *)(a4 + 684);
        v23 = v20 - 1;
        do
        {
          v18 = *(v22 - 14) + v21;
          *v22++ = v21;
          v21 = v18;
          --v23;
        }
        while (v23);
      }
      *v14 = v18;
      v14[v20] = v18;
      v24 = LODWORD(v84[0]);
      if (LODWORD(v84[0]))
      {
        v25 = 0;
        do
        {
          v26 = *(unsigned __int8 *)(a4 + 992 + v25);
          v27 = v14[v26];
          v14[v26] = v27 + 1;
          *(_BYTE *)(a4 + v27 + 736) = v25++;
        }
        while (v24 != v25);
      }
      *v14 = 0;
      if (v20 >= 2)
      {
        v28 = 0;
        v29 = v10 - v12;
        v30 = v20 - 1;
        v31 = a4;
        do
        {
          *(_DWORD *)(v31 + 4) = v28;
          v31 += 4;
          v28 += *(_DWORD *)(v31 + 624) << v29++;
          --v30;
        }
        while (v30);
      }
      v80 = v19 + 1;
      v32 = v10 + v13 + 1;
      v67 = -v13;
      if (-v13 < v32)
      {
        v33 = -v13;
        v34 = 13 * v33;
        do
        {
          if (v20 >= 2)
          {
            v35 = v20 - 1;
            v36 = (_DWORD *)(a4 + 4);
            do
            {
              v36[v34] = *v36 >> v33;
              ++v36;
              --v35;
            }
            while (v35);
          }
          ++v33;
          v34 += 13;
        }
        while (v32 != v33);
      }
      v64 = a4;
      v61 = a1;
      if (v80 < 1)
      {
LABEL_60:
        *(_BYTE *)v61 = v60;
        *((_BYTE *)v61 + 1) = 1;
        *((_BYTE *)v61 + 2) = v10;
        *((_BYTE *)v61 + 3) = HIBYTE(v60);
        return v59;
      }
      v37 = a4 + 736;
      v63 = v69 - v10;
      v65 = a1 + 5;
      v66 = v20;
      v74 = (2 * v12) | 1;
      LODWORD(v38) = v74 - v10;
      v62 = (int)v20;
      v39 = 1;
      v79 = v11;
      while (1)
      {
        v40 = v38 - 1;
        v38 = (int)v38 <= 1 ? 1 : v38;
        v41 = *(int *)(v68 + 4 * v39);
        v42 = *(int *)(v68 + 4 * (v39 + 1));
        v43 = v69 - v39;
        v44 = v10 - (v69 - v39);
        v72 = v40;
        v73 = v12;
        v71 = v39 + 1;
        if (v44 >= v67)
          break;
        HUF_fillDTableX2ForWeight((uint64_t)&v11[*(unsigned int *)(v64 + 4 * v39)], (unsigned __int8 *)(v37 + v41), (unsigned __int8 *)(v37 + v42), v43, v10, 0, 1);
LABEL_59:
        v12 = v73 - 1;
        --v74;
        v39 = v71;
        LODWORD(v38) = v72;
        if (v71 == v66)
          goto LABEL_60;
      }
      if ((_DWORD)v41 == (_DWORD)v42)
        goto LABEL_59;
      v45 = 52 * v12;
      v78 = v64 + 4 * v38;
      v77 = v74 - v38;
      v76 = v62 - v38;
      v46 = 1 << v44;
      if ((int)(v63 + v43) <= 1)
        v47 = 1;
      else
        v47 = v63 + v43;
      v48 = *(_DWORD *)(v64 + 4 * v39);
      v70 = v64 + 52 * v43;
      v75 = (v43 << 16) + 0x1000000;
      v83 = *(_DWORD *)(v68 + 4 * (v39 + 1));
      v82 = 1 << v44;
      v81 = v47;
      while (1)
      {
        v49 = *(unsigned __int8 *)(v37 + v41);
        v50 = (unint64_t *)&v11[v48];
        if (v47 >= 2)
        {
          v51 = v75 | v49 | ((unint64_t)(v75 | v49) << 32);
          if (v46 == 2)
          {
            v52 = (unint64_t *)&v11[v48];
          }
          else
          {
            if (v46 != 4)
            {
              v53 = *(unsigned int *)(v70 + 4 * v47);
              if ((int)v53 >= 1)
              {
                v54 = 0;
                v55 = (unint64_t *)&v65[v48];
                do
                {
                  *(v55 - 2) = v51;
                  *(v55 - 1) = v51;
                  *v55 = v51;
                  v55[1] = v51;
                  v55 += 4;
                  v54 += 8;
                }
                while (v54 < v53);
              }
              goto LABEL_55;
            }
            *v50 = v51;
            v52 = v50 + 1;
          }
          *v52 = v51;
        }
LABEL_55:
        if ((int)v47 <= v80)
        {
          v56 = v76;
          v57 = v77;
          v58 = v78;
          do
          {
            HUF_fillDTableX2ForWeight((uint64_t)v50 + 4 * *(unsigned int *)(v58 + v45), (unsigned __int8 *)(v37 + *(int *)(v58 + 676)), (unsigned __int8 *)(v37 + *(int *)(v58 + 680)), v57, v10, v49, 2);
            v58 += 4;
            --v57;
            --v56;
          }
          while (v56);
        }
        v46 = v82;
        v48 += v82;
        ++v41;
        v11 = v79;
        v47 = v81;
        if (v83 == (_DWORD)v41)
          goto LABEL_59;
      }
    }
  }
  return -44;
}

uint64_t HUF_decompress1X2_usingDTable_internal(char *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char *v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  char *v15;
  _DWORD *v16;
  unint64_t v17;
  unsigned __int8 *v18;
  _BOOL4 v19;
  unsigned int v20;
  _DWORD *v21;
  unsigned int v22;
  char *v23;
  _DWORD *v24;
  unsigned int v25;
  char *v26;
  _DWORD *v27;
  unsigned int v28;
  char *v29;
  _DWORD *v30;
  unsigned int v31;
  char *v32;
  _DWORD *v33;
  unint64_t v34;
  unsigned __int8 *v35;
  _BOOL4 v36;
  unsigned int v37;
  _DWORD *v38;
  unsigned int v39;
  char *v40;
  _DWORD *v41;
  unsigned int v42;
  char *v43;
  _DWORD *v44;
  unsigned int v45;
  char *v46;
  _DWORD *v47;
  unint64_t v48;
  int v49;
  unsigned __int8 *v50;
  _BOOL4 v51;
  unsigned int v52;
  _DWORD *v53;
  _DWORD *v54;
  unint64_t v55;
  char *v56;
  unsigned int v57;

  if (!a4)
    return -72;
  v5 = a4 - 8;
  if ((unint64_t)a4 < 8)
  {
    v6 = *a3;
    switch(a4)
    {
      case 2:
        goto LABEL_18;
      case 3:
        goto LABEL_17;
      case 4:
        goto LABEL_16;
      case 5:
        goto LABEL_15;
      case 6:
        goto LABEL_14;
      case 7:
        v6 |= (unint64_t)a3[6] << 48;
LABEL_14:
        v6 += (unint64_t)a3[5] << 40;
LABEL_15:
        v6 += (unint64_t)a3[4] << 32;
LABEL_16:
        v6 += (unint64_t)a3[3] << 24;
LABEL_17:
        v6 += (unint64_t)a3[2] << 16;
LABEL_18:
        v6 += (unint64_t)a3[1] << 8;
        break;
      default:
        break;
    }
    if (!a3[a4 - 1])
      return -20;
    v5 = 0;
    v7 = __clz(a3[a4 - 1]) - 8 * a4 + 41;
    v8 = &a1[a2];
    v9 = a5 + 1;
    v10 = *a5;
    v11 = HIWORD(*a5);
    if (a2 < 8)
      goto LABEL_51;
    goto LABEL_21;
  }
  if (!a3[a4 - 1])
    return -1;
  if ((unint64_t)a4 <= 0xFFFFFFFFFFFFFF88)
  {
    v6 = *(_QWORD *)&a3[v5];
    v7 = __clz(a3[a4 - 1]) - 23;
    v8 = &a1[a2];
    v9 = a5 + 1;
    v10 = *a5;
    v11 = HIWORD(*a5);
    if (a2 <= 7)
    {
      if (a4 >= 16)
      {
        LODWORD(v12) = v7 >> 3;
        v7 &= 7u;
      }
      else
      {
        if (a4 == 8)
        {
LABEL_51:
          if ((unint64_t)(v8 - a1) >= 2)
          {
            v48 = (unint64_t)(v8 - 2);
            v49 = -v11 & 0x3F;
            while (v7 <= 0x40)
            {
              if (v5 >= 8)
              {
                v51 = 0;
                v52 = v7 >> 3;
                v7 &= 7u;
              }
              else
              {
                if (!v5)
                  break;
                v50 = &a3[v5 - (v7 >> 3)];
                v51 = v50 < a3;
                v52 = v50 >= a3 ? v7 >> 3 : v5;
                v7 -= 8 * v52;
              }
              v5 -= v52;
              v6 = *(_QWORD *)&a3[v5];
              if ((unint64_t)a1 > v48 || v51)
                break;
              v53 = &v9[(unint64_t)(v6 << v7) >> v49];
              *(_WORD *)a1 = *(_WORD *)v53;
              v7 += *((unsigned __int8 *)v53 + 2);
              a1 += *((unsigned __int8 *)v53 + 3);
            }
            while ((unint64_t)a1 <= v48)
            {
              v54 = &v9[(unint64_t)(v6 << v7) >> v49];
              *(_WORD *)a1 = *(_WORD *)v54;
              v7 += *((unsigned __int8 *)v54 + 2);
              a1 += *((unsigned __int8 *)v54 + 3);
            }
          }
          if (a1 < v8)
          {
            v55 = (unint64_t)(v6 << v7) >> -(char)v11;
            v56 = (char *)&v9[v55];
            *a1 = *v56;
            if (v56[3] == 1)
            {
              v7 += v56[2];
            }
            else if (v7 <= 0x3F)
            {
              v57 = v7 + BYTE2(v9[v55]);
              if (v57 >= 0x40)
                v7 = 64;
              else
                v7 = v57;
            }
          }
          if (v7 == 64 && v5 == 0)
            return a2;
          else
            return -20;
        }
        v12 = v7 >> 3;
        if (&a3[v5 - v12] < a3)
          LODWORD(v12) = a4 - 8;
        v7 -= 8 * v12;
      }
      v5 -= v12;
      v6 = *(_QWORD *)&a3[v5];
      goto LABEL_51;
    }
LABEL_21:
    v13 = v10 & 0xFC0000;
    v14 = -v11 & 0x3F;
    v15 = &a1[a2];
    v16 = a5 + 1;
    if (v13 >= 0xC0000)
    {
      v34 = (unint64_t)(v15 - 7);
      do
      {
        if (v5 >= 8)
        {
          v36 = 0;
          v37 = v7 >> 3;
          v7 &= 7u;
        }
        else
        {
          if (!v5)
            goto LABEL_51;
          v35 = &a3[v5 - (v7 >> 3)];
          v36 = v35 < a3;
          if (v35 >= a3)
            v37 = v7 >> 3;
          else
            v37 = v5;
          v7 -= 8 * v37;
        }
        v5 -= v37;
        v6 = *(_QWORD *)&a3[v5];
        if ((unint64_t)a1 >= v34)
          break;
        if (v36)
          break;
        v38 = &v16[(unint64_t)(v6 << v7) >> v14];
        *(_WORD *)a1 = *(_WORD *)v38;
        v39 = v7 + *((unsigned __int8 *)v38 + 2);
        v40 = &a1[*((unsigned __int8 *)v38 + 3)];
        v41 = &v16[(unint64_t)(v6 << v39) >> v14];
        *(_WORD *)v40 = *(_WORD *)v41;
        v42 = v39 + *((unsigned __int8 *)v41 + 2);
        v43 = &v40[*((unsigned __int8 *)v41 + 3)];
        v44 = &v16[(unint64_t)(v6 << v42) >> v14];
        *(_WORD *)v43 = *(_WORD *)v44;
        v45 = v42 + *((unsigned __int8 *)v44 + 2);
        v46 = &v43[*((unsigned __int8 *)v44 + 3)];
        v47 = &v16[(unint64_t)(v6 << v45) >> v14];
        *(_WORD *)v46 = *(_WORD *)v47;
        v7 = v45 + *((unsigned __int8 *)v47 + 2);
        a1 = &v46[*((unsigned __int8 *)v47 + 3)];
      }
      while (v7 <= 0x40);
    }
    else
    {
      v17 = (unint64_t)(v15 - 9);
      do
      {
        if (v5 >= 8)
        {
          v19 = 0;
          v20 = v7 >> 3;
          v7 &= 7u;
        }
        else
        {
          if (!v5)
            goto LABEL_51;
          v18 = &a3[v5 - (v7 >> 3)];
          v19 = v18 < a3;
          if (v18 >= a3)
            v20 = v7 >> 3;
          else
            v20 = v5;
          v7 -= 8 * v20;
        }
        v5 -= v20;
        v6 = *(_QWORD *)&a3[v5];
        if ((unint64_t)a1 >= v17)
          break;
        if (v19)
          break;
        v21 = &v16[(unint64_t)(v6 << v7) >> v14];
        *(_WORD *)a1 = *(_WORD *)v21;
        v22 = v7 + *((unsigned __int8 *)v21 + 2);
        v23 = &a1[*((unsigned __int8 *)v21 + 3)];
        v24 = &v16[(unint64_t)(v6 << v22) >> v14];
        *(_WORD *)v23 = *(_WORD *)v24;
        v25 = v22 + *((unsigned __int8 *)v24 + 2);
        v26 = &v23[*((unsigned __int8 *)v24 + 3)];
        v27 = &v16[(unint64_t)(v6 << v25) >> v14];
        *(_WORD *)v26 = *(_WORD *)v27;
        v28 = v25 + *((unsigned __int8 *)v27 + 2);
        v29 = &v26[*((unsigned __int8 *)v27 + 3)];
        v30 = &v16[(unint64_t)(v6 << v28) >> v14];
        *(_WORD *)v29 = *(_WORD *)v30;
        v31 = v28 + *((unsigned __int8 *)v30 + 2);
        v32 = &v29[*((unsigned __int8 *)v30 + 3)];
        v33 = &v16[(unint64_t)(v6 << v31) >> v14];
        *(_WORD *)v32 = *(_WORD *)v33;
        v7 = v31 + *((unsigned __int8 *)v33 + 2);
        a1 = &v32[*((unsigned __int8 *)v33 + 3)];
      }
      while (v7 <= 0x40);
    }
    goto LABEL_51;
  }
  return a4;
}

uint64_t HUF_decompress4X2_usingDTable_internal(char *a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4, unsigned int *a5)
{
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v35;
  _WORD *v36;
  char *v37;
  char *v38;
  _DWORD *v39;
  unsigned int v40;
  char *v41;
  _DWORD *v42;
  unsigned int v43;
  char *v44;
  _DWORD *v45;
  unsigned int v46;
  char *v47;
  _DWORD *v48;
  unsigned int v49;
  _WORD *v50;
  _DWORD *v51;
  unsigned int v52;
  uint64_t v53;
  _DWORD *v54;
  unsigned int v55;
  char *v56;
  _DWORD *v57;
  unsigned int v58;
  char *v59;
  _DWORD *v60;
  _WORD *v61;
  char *v62;
  _DWORD *v63;
  unsigned int v64;
  char *v65;
  _DWORD *v66;
  unsigned int v67;
  char *v68;
  _DWORD *v69;
  uint64_t v70;
  unsigned int v71;
  char *v72;
  _DWORD *v73;
  int v74;
  _WORD *v75;
  _DWORD *v76;
  uint64_t v77;
  _DWORD *v78;
  int v79;
  uint64_t v80;
  _DWORD *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  BOOL v100;
  unsigned int v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  uint64_t v105;
  unsigned int v106;
  int v107;
  _DWORD *v108;
  unsigned int v109;
  char *v110;
  _DWORD *v111;
  unsigned int v112;
  char *v113;
  _DWORD *v114;
  unsigned int v115;
  char *v116;
  _DWORD *v117;
  unsigned int v118;
  char *v119;
  _DWORD *v120;
  uint64_t v121;
  _BOOL4 v122;
  int v124;
  _DWORD *v125;
  unsigned int v126;
  char *v127;
  _DWORD *v128;
  unsigned int v129;
  char *v130;
  _DWORD *v131;
  unsigned int v132;
  char *v133;
  _DWORD *v134;
  uint64_t v135;
  _BOOL4 v136;
  BOOL v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  _BOOL4 v141;
  _DWORD *v142;
  _DWORD *v143;
  unint64_t v144;
  char *v145;
  char *v146;
  int v147;
  unsigned int v148;
  unsigned int v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int v152;
  int v153;
  uint64_t v154;
  _DWORD *v155;
  unsigned int v156;
  char *v157;
  _DWORD *v158;
  unsigned int v159;
  char *v160;
  _DWORD *v161;
  unsigned int v162;
  char *v163;
  _DWORD *v164;
  unsigned int v165;
  char *v166;
  _DWORD *v167;
  uint64_t v168;
  char *v169;
  _BOOL4 v170;
  int v172;
  int v173;
  _DWORD *v174;
  int v175;
  char *v176;
  _DWORD *v177;
  int v178;
  char *v179;
  _DWORD *v180;
  int v181;
  char *v182;
  _DWORD *v183;
  uint64_t v184;
  char *v185;
  _BOOL4 v186;
  BOOL v187;
  char *v188;
  unint64_t v189;
  int v190;
  unsigned int i;
  uint64_t v192;
  _BOOL4 v193;
  _DWORD *v194;
  _DWORD *v195;
  unint64_t v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unsigned __int8 *v201;
  int v202;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  uint64_t v206;
  unint64_t v207;
  int v208;
  _DWORD *v209;
  unsigned int v210;
  char *v211;
  _DWORD *v212;
  unsigned int v213;
  char *v214;
  _DWORD *v215;
  unsigned int v216;
  char *v217;
  _DWORD *v218;
  unsigned int v219;
  char *v220;
  _DWORD *v221;
  uint64_t v222;
  unsigned __int8 *v223;
  _BOOL4 v224;
  int v226;
  int v227;
  _DWORD *v228;
  int v229;
  char *v230;
  _DWORD *v231;
  int v232;
  char *v233;
  _DWORD *v234;
  int v235;
  char *v236;
  _DWORD *v237;
  uint64_t v238;
  unsigned __int8 *v239;
  _BOOL4 v240;
  BOOL v241;
  uint64_t v242;
  unsigned __int8 *v243;
  unint64_t v244;
  int v245;
  uint64_t v246;
  _BOOL4 v247;
  _DWORD *v248;
  _DWORD *v249;
  unint64_t v250;
  char *v251;
  unsigned __int8 *v252;
  unsigned __int8 *v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned __int8 *v258;
  unint64_t v259;
  int v260;
  uint64_t v261;
  _BOOL4 v262;
  _DWORD *v263;
  uint64_t v264;
  int v265;
  int v266;
  _DWORD *v267;
  unint64_t v268;
  _BYTE *v269;
  unsigned int v270;
  BOOL v277;
  int v278;
  _DWORD *v279;
  unsigned int v280;
  _WORD *v281;
  _DWORD *v282;
  unsigned int v283;
  _WORD *v284;
  _DWORD *v285;
  unsigned int v286;
  _WORD *v287;
  _DWORD *v288;
  unsigned int v289;
  _WORD *v290;
  _DWORD *v291;
  uint64_t v292;
  unsigned __int8 *v293;
  _BOOL4 v294;
  int v296;
  _DWORD *v297;
  int v298;
  _WORD *v299;
  _DWORD *v300;
  int v301;
  _WORD *v302;
  _DWORD *v303;
  int v304;
  _WORD *v305;
  _DWORD *v306;
  unint64_t v307;
  _BOOL4 v308;
  unsigned int v309;
  BOOL v310;
  unsigned __int8 v311;
  char *v312;
  unsigned int v313;
  unint64_t v314;
  unsigned __int8 *v315;
  unsigned __int8 *v316;
  char *v317;
  uint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t v321;

  if (a4 < 0xA)
    return -20;
  v6 = &a1[a2];
  v7 = *a3;
  v8 = a3[1];
  v9 = a3[2];
  v10 = v7 + 6 + v8 + v9;
  v11 = a4 >= v10;
  v5 = a4 - v10;
  v12 = &a1[(unint64_t)(a2 + 3) >> 2];
  v13 = (unint64_t)&v12[(unint64_t)(a2 + 3) >> 2];
  v14 = v13 + ((unint64_t)(a2 + 3) >> 2);
  if (!v11 || v14 > (unint64_t)v6)
    return -20;
  if (!*a3)
    return -72;
  v18 = *a5;
  v16 = a5 + 1;
  v17 = v18;
  if (v7 < 8)
  {
    v20 = *((unsigned __int8 *)a3 + 6);
    switch(*a3)
    {
      case 2u:
        goto LABEL_20;
      case 3u:
        goto LABEL_19;
      case 4u:
        goto LABEL_18;
      case 5u:
        goto LABEL_17;
      case 6u:
        goto LABEL_16;
      case 7u:
        v20 |= (unint64_t)*((unsigned __int8 *)a3 + 12) << 48;
LABEL_16:
        v20 += (unint64_t)*((unsigned __int8 *)a3 + 11) << 40;
LABEL_17:
        v20 += (unint64_t)*((unsigned __int8 *)a3 + 10) << 32;
LABEL_18:
        v20 += (unint64_t)*((unsigned __int8 *)a3 + 9) << 24;
LABEL_19:
        v20 += (unint64_t)*((unsigned __int8 *)a3 + 8) << 16;
LABEL_20:
        v20 += (unint64_t)*((unsigned __int8 *)a3 + 7) << 8;
        break;
      default:
        break;
    }
    if (!*((_BYTE *)a3 + v7 + 5))
      return -20;
    v21 = __clz(*((unsigned __int8 *)a3 + v7 + 5)) - 8 * v7 + 41;
    v19 = 6;
    if (!a3[1])
      return -72;
  }
  else
  {
    v19 = v7 - 2;
    v20 = *(_QWORD *)((char *)a3 + v7 - 2);
    if (!HIBYTE(v20))
      return -1;
    v21 = __clz(HIBYTE(v20)) - 23;
    if (!a3[1])
      return -72;
  }
  v22 = (unsigned __int8 *)a3 + v7 + 6;
  if (v8 < 8)
  {
    v24 = *v22;
    switch(a3[1])
    {
      case 2u:
        goto LABEL_32;
      case 3u:
        goto LABEL_31;
      case 4u:
        goto LABEL_30;
      case 5u:
        goto LABEL_29;
      case 6u:
        goto LABEL_28;
      case 7u:
        v24 |= (unint64_t)v22[6] << 48;
LABEL_28:
        v24 += (unint64_t)v22[5] << 40;
LABEL_29:
        v24 += (unint64_t)v22[4] << 32;
LABEL_30:
        v24 += (unint64_t)v22[3] << 24;
LABEL_31:
        v24 += (unint64_t)v22[2] << 16;
LABEL_32:
        v24 += (unint64_t)v22[1] << 8;
        break;
      default:
        break;
    }
    if (!v22[v8 - 1])
      return -20;
    v23 = 0;
    v25 = __clz(v22[v8 - 1]) - 8 * v8 + 41;
  }
  else
  {
    v23 = v8 - 8;
    v24 = *(_QWORD *)&v22[v8 - 8];
    if (!HIBYTE(v24))
      return -1;
    v25 = __clz(HIBYTE(v24)) - 23;
  }
  if (!a3[2])
    return -72;
  v26 = &v22[v8];
  if (v9 >= 8)
  {
    v27 = v9 - 8;
    v28 = *(_QWORD *)&v26[v9 - 8];
    if (HIBYTE(v28))
    {
      v29 = __clz(HIBYTE(v28)) - 23;
      goto LABEL_48;
    }
    return -1;
  }
  v28 = *v26;
  switch(a3[2])
  {
    case 2u:
      goto LABEL_45;
    case 3u:
      goto LABEL_44;
    case 4u:
      goto LABEL_43;
    case 5u:
      goto LABEL_42;
    case 6u:
      goto LABEL_41;
    case 7u:
      v28 |= (unint64_t)v26[6] << 48;
LABEL_41:
      v28 += (unint64_t)v26[5] << 40;
LABEL_42:
      v28 += (unint64_t)v26[4] << 32;
LABEL_43:
      v28 += (unint64_t)v26[3] << 24;
LABEL_44:
      v28 += (unint64_t)v26[2] << 16;
LABEL_45:
      v28 += (unint64_t)v26[1] << 8;
      break;
    default:
      break;
  }
  if (!v26[v9 - 1])
    return -20;
  v27 = 0;
  v29 = __clz(v26[v9 - 1]) - 8 * v9 + 41;
LABEL_48:
  if (!v5)
    return -72;
  v320 = v23;
  v30 = &v26[v9];
  v31 = v5 - 8;
  if (v5 < 8)
  {
    v321 = v27;
    v32 = *v30;
    switch(v5)
    {
      case 2uLL:
        goto LABEL_62;
      case 3uLL:
        goto LABEL_61;
      case 4uLL:
        goto LABEL_60;
      case 5uLL:
        goto LABEL_59;
      case 6uLL:
        goto LABEL_58;
      case 7uLL:
        v32 |= (unint64_t)v30[6] << 48;
LABEL_58:
        v32 += (unint64_t)v30[5] << 40;
LABEL_59:
        v32 += (unint64_t)v30[4] << 32;
LABEL_60:
        v32 += (unint64_t)v30[3] << 24;
LABEL_61:
        v32 += (unint64_t)v30[2] << 16;
LABEL_62:
        v32 += (unint64_t)v30[1] << 8;
        break;
      default:
        break;
    }
    if (v30[v5 - 1])
    {
      v319 = v28;
      v31 = 0;
      v33 = __clz(v30[v5 - 1]) - 8 * v5 + 41;
      goto LABEL_65;
    }
    return -20;
  }
  if (!v30[v5 - 1])
    return -1;
  v319 = v28;
  v321 = v27;
  if (v5 > 0xFFFFFFFFFFFFFF88)
    return v5;
  v32 = *(_QWORD *)&v30[v31];
  v33 = __clz(v30[v5 - 1]) - 23;
LABEL_65:
  v313 = HIWORD(v17);
  v316 = v26;
  v317 = (char *)a3 + v7 + 6;
  v314 = (unint64_t)(v6 - 7);
  v315 = &v26[v9];
  v318 = v31;
  v312 = &a1[a2];
  v311 = BYTE2(v17);
  if ((unint64_t)&v6[-v14] < 8 || v14 >= (unint64_t)(v6 - 7))
  {
    v38 = &a1[(unint64_t)(a2 + 3) >> 2];
    v37 = &v12[(unint64_t)(a2 + 3) >> 2];
    v36 = (_WORD *)(v13 + ((unint64_t)(a2 + 3) >> 2));
  }
  else
  {
    v35 = -v313 & 0x3F;
    v36 = (_WORD *)(v13 + ((unint64_t)(a2 + 3) >> 2));
    v37 = &v12[(unint64_t)(a2 + 3) >> 2];
    v38 = &a1[(unint64_t)(a2 + 3) >> 2];
    do
    {
      v39 = &v16[v20 << v21 >> v35];
      *(_WORD *)a1 = *(_WORD *)v39;
      v40 = v21 + *((unsigned __int8 *)v39 + 2);
      v41 = &a1[*((unsigned __int8 *)v39 + 3)];
      v42 = &v16[v24 << v25 >> v35];
      *(_WORD *)v38 = *(_WORD *)v42;
      v43 = v25 + *((unsigned __int8 *)v42 + 2);
      v44 = &v38[*((unsigned __int8 *)v42 + 3)];
      v45 = &v16[v319 << v29 >> v35];
      *(_WORD *)v37 = *(_WORD *)v45;
      v46 = v29 + *((unsigned __int8 *)v45 + 2);
      v47 = &v37[*((unsigned __int8 *)v45 + 3)];
      v48 = &v16[(unint64_t)(v32 << v33) >> v35];
      *v36 = *(_WORD *)v48;
      v49 = v33 + *((unsigned __int8 *)v48 + 2);
      v50 = (_WORD *)((char *)v36 + *((unsigned __int8 *)v48 + 3));
      v51 = &v16[v20 << v40 >> v35];
      *(_WORD *)v41 = *(_WORD *)v51;
      v52 = v40 + *((unsigned __int8 *)v51 + 2);
      v53 = *((unsigned __int8 *)v51 + 3);
      v54 = &v16[v24 << v43 >> v35];
      *(_WORD *)v44 = *(_WORD *)v54;
      v55 = v43 + *((unsigned __int8 *)v54 + 2);
      v56 = &v44[*((unsigned __int8 *)v54 + 3)];
      v57 = &v16[v319 << v46 >> v35];
      *(_WORD *)v47 = *(_WORD *)v57;
      v58 = v46 + *((unsigned __int8 *)v57 + 2);
      v59 = &v47[*((unsigned __int8 *)v57 + 3)];
      v60 = &v16[(unint64_t)(v32 << v49) >> v35];
      *v50 = *(_WORD *)v60;
      LODWORD(v57) = v49 + *((unsigned __int8 *)v60 + 2);
      v61 = (_WORD *)((char *)v50 + *((unsigned __int8 *)v60 + 3));
      v62 = &v41[v53];
      v63 = &v16[v20 << v52 >> v35];
      *(_WORD *)v62 = *(_WORD *)v63;
      v64 = v52 + *((unsigned __int8 *)v63 + 2);
      v65 = &v62[*((unsigned __int8 *)v63 + 3)];
      v66 = &v16[v24 << v55 >> v35];
      *(_WORD *)v56 = *(_WORD *)v66;
      v67 = v55 + *((unsigned __int8 *)v66 + 2);
      v68 = &v56[*((unsigned __int8 *)v66 + 3)];
      v69 = &v16[v319 << v58 >> v35];
      *(_WORD *)v59 = *(_WORD *)v69;
      v70 = v32;
      v71 = v58 + *((unsigned __int8 *)v69 + 2);
      v72 = &v59[*((unsigned __int8 *)v69 + 3)];
      v73 = &v16[(unint64_t)(v70 << (char)v57) >> v35];
      *v61 = *(_WORD *)v73;
      v74 = (_DWORD)v57 + *((unsigned __int8 *)v73 + 2);
      v75 = (_WORD *)((char *)v61 + *((unsigned __int8 *)v73 + 3));
      v76 = &v16[v20 << v64 >> v35];
      *(_WORD *)v65 = *(_WORD *)v76;
      v21 = v64 + *((unsigned __int8 *)v76 + 2);
      v77 = *((unsigned __int8 *)v76 + 3);
      v78 = &v16[v24 << v67 >> v35];
      *(_WORD *)v68 = *(_WORD *)v78;
      v79 = *((unsigned __int8 *)v78 + 2);
      v80 = *((unsigned __int8 *)v78 + 3);
      v81 = &v16[v319 << v71 >> v35];
      *(_WORD *)v72 = *(_WORD *)v81;
      v82 = *((unsigned __int8 *)v81 + 2);
      v83 = *((unsigned __int8 *)v81 + 3);
      v84 = v70;
      v85 = &v16[(unint64_t)(v70 << v74) >> v35];
      *v75 = *(_WORD *)v85;
      if (v19 < 14)
      {
        v88 = v19;
        v86 = 3;
      }
      else
      {
        v86 = 0;
        v87 = v19 - (v21 >> 3);
        v21 &= 7u;
        v88 = v87;
        v20 = *(_QWORD *)((char *)a3 + v87);
      }
      v89 = v67 + v79;
      v90 = *((unsigned __int8 *)v85 + 2);
      v91 = *((unsigned __int8 *)v85 + 3);
      if (v320 < 8)
      {
        v92 = 3;
      }
      else
      {
        v92 = 0;
        v93 = v320 - (v89 >> 3);
        v89 &= 7u;
        v320 = v93;
        v24 = *(_QWORD *)&v317[v93];
      }
      v94 = v88;
      v29 = v71 + v82;
      if (v321 < 8)
      {
        v95 = 3;
      }
      else
      {
        v95 = 0;
        v96 = v321 - (v29 >> 3);
        v29 &= 7u;
        v321 = v96;
        v319 = *(_QWORD *)&v316[v96];
      }
      v33 = v74 + v90;
      if (v318 < 8)
      {
        v97 = 3;
        v32 = v84;
      }
      else
      {
        v97 = 0;
        v98 = v318 - (v33 >> 3);
        v33 &= 7u;
        v318 = v98;
        v32 = *(_QWORD *)&v315[v98];
      }
      a1 = &v65[v77];
      v38 = &v68[v80];
      v37 = &v72[v83];
      v36 = (_WORD *)((char *)v75 + v91);
      v99 = v92 | v86 | v95 | v97;
      v100 = (unint64_t)v75 + v91 < v314 && v99 == 0;
      v19 = v94;
      v25 = v89;
    }
    while (v100);
  }
  v5 = -20;
  if (a1 > v12 || (unint64_t)v38 > v13 || (unint64_t)v37 > v14)
    return v5;
  if ((unint64_t)(v12 - a1) < 8)
  {
    v101 = v313;
    v102 = v320;
    if (v21 <= 0x40)
    {
      if (v19 >= 14)
      {
        v106 = v21 >> 3;
        v104 = v21 & 7;
      }
      else
      {
        if (v19 == 6)
          goto LABEL_93;
        if (v19 - (v21 >> 3) >= 6)
          v106 = v21 >> 3;
        else
          v106 = v19 - 6;
        v104 = v21 - 8 * v106;
      }
      v19 -= v106;
      v20 = *(_QWORD *)((char *)a3 + v19);
      goto LABEL_140;
    }
LABEL_93:
    v104 = v21;
    goto LABEL_140;
  }
  v101 = v313;
  v102 = v320;
  if (v21 > 0x40)
    goto LABEL_91;
  if (v19 >= 14)
  {
    v103 = 0;
    LODWORD(v105) = v21 >> 3;
    v21 &= 7u;
  }
  else
  {
    if (v19 == 6)
    {
LABEL_91:
      v103 = 3;
      goto LABEL_107;
    }
    v105 = v21 >> 3;
    v103 = v19 - v105 < 6;
    if (v19 - v105 < 6)
      LODWORD(v105) = v19 - 6;
    v21 -= 8 * v105;
  }
  v19 -= v105;
  v20 = *(_QWORD *)((char *)a3 + v19);
LABEL_107:
  if (v311 < 0xCu)
  {
    if (a1 < v12 - 9 && !v103)
    {
      v107 = -v313 & 0x3F;
      v104 = v21;
      do
      {
        v108 = &v16[v20 << v104 >> v107];
        *(_WORD *)a1 = *(_WORD *)v108;
        v109 = v104 + *((unsigned __int8 *)v108 + 2);
        v110 = &a1[*((unsigned __int8 *)v108 + 3)];
        v111 = &v16[v20 << v109 >> v107];
        *(_WORD *)v110 = *(_WORD *)v111;
        v112 = v109 + *((unsigned __int8 *)v111 + 2);
        v113 = &v110[*((unsigned __int8 *)v111 + 3)];
        v114 = &v16[v20 << v112 >> v107];
        *(_WORD *)v113 = *(_WORD *)v114;
        v115 = v112 + *((unsigned __int8 *)v114 + 2);
        v116 = &v113[*((unsigned __int8 *)v114 + 3)];
        v117 = &v16[v20 << v115 >> v107];
        *(_WORD *)v116 = *(_WORD *)v117;
        v118 = v115 + *((unsigned __int8 *)v117 + 2);
        v119 = &v116[*((unsigned __int8 *)v117 + 3)];
        v120 = &v16[v20 << v118 >> v107];
        *(_WORD *)v119 = *(_WORD *)v120;
        v104 = v118 + *((unsigned __int8 *)v120 + 2);
        a1 = &v119[*((unsigned __int8 *)v120 + 3)];
        if (v104 > 0x40)
          break;
        if (v19 >= 14)
        {
          v122 = 0;
          LODWORD(v121) = v104 >> 3;
          v104 &= 7u;
        }
        else
        {
          if (v19 == 6)
            goto LABEL_140;
          v121 = v104 >> 3;
          v122 = v19 - v121 < 6;
          if (v19 - v121 < 6)
            LODWORD(v121) = v19 - 6;
          v104 -= 8 * v121;
        }
        v19 -= v121;
        v20 = *(_QWORD *)((char *)a3 + v19);
      }
      while (a1 < v12 - 9 && !v122);
      goto LABEL_140;
    }
    goto LABEL_93;
  }
  if (a1 >= v12 - 7 || v103)
    goto LABEL_93;
  v124 = -v313 & 0x3F;
  do
  {
    v125 = &v16[v20 << v21 >> v124];
    *(_WORD *)a1 = *(_WORD *)v125;
    v126 = v21 + *((unsigned __int8 *)v125 + 2);
    v127 = &a1[*((unsigned __int8 *)v125 + 3)];
    v128 = &v16[v20 << v126 >> v124];
    *(_WORD *)v127 = *(_WORD *)v128;
    v129 = v126 + *((unsigned __int8 *)v128 + 2);
    v130 = &v127[*((unsigned __int8 *)v128 + 3)];
    v131 = &v16[v20 << v129 >> v124];
    *(_WORD *)v130 = *(_WORD *)v131;
    v132 = v129 + *((unsigned __int8 *)v131 + 2);
    v133 = &v130[*((unsigned __int8 *)v131 + 3)];
    v134 = &v16[v20 << v132 >> v124];
    *(_WORD *)v133 = *(_WORD *)v134;
    v104 = v132 + *((unsigned __int8 *)v134 + 2);
    a1 = &v133[*((unsigned __int8 *)v134 + 3)];
    if (v104 > 0x40)
      break;
    if (v19 >= 14)
    {
      v136 = 0;
      LODWORD(v135) = v104 >> 3;
      v21 = v104 & 7;
    }
    else
    {
      if (v19 == 6)
        break;
      v135 = v104 >> 3;
      v136 = v19 - v135 < 6;
      if (v19 - v135 < 6)
        LODWORD(v135) = v19 - 6;
      v21 = v104 - 8 * v135;
    }
    v19 -= v135;
    v20 = *(_QWORD *)((char *)a3 + v19);
    v137 = a1 < v12 - 7 && !v136;
    v104 = v21;
  }
  while (v137);
LABEL_140:
  if ((unint64_t)(v12 - a1) >= 2)
  {
    v138 = (unint64_t)(v12 - 2);
    v139 = -v101 & 0x3F;
    while (v104 <= 0x40)
    {
      if (v19 >= 14)
      {
        v141 = 0;
        LODWORD(v140) = v104 >> 3;
        v104 &= 7u;
      }
      else
      {
        if (v19 == 6)
          break;
        v140 = v104 >> 3;
        v141 = v19 - v140 < 6;
        if (v19 - v140 < 6)
          LODWORD(v140) = v19 - 6;
        v104 -= 8 * v140;
      }
      v19 -= v140;
      v20 = *(_QWORD *)((char *)a3 + v19);
      if ((unint64_t)a1 > v138 || v141)
        break;
      v142 = &v16[v20 << v104 >> v139];
      *(_WORD *)a1 = *(_WORD *)v142;
      v104 += *((unsigned __int8 *)v142 + 2);
      a1 += *((unsigned __int8 *)v142 + 3);
    }
    while ((unint64_t)a1 <= v138)
    {
      v143 = &v16[v20 << v104 >> v139];
      *(_WORD *)a1 = *(_WORD *)v143;
      v104 += *((unsigned __int8 *)v143 + 2);
      a1 += *((unsigned __int8 *)v143 + 3);
    }
  }
  if (a1 < v12)
  {
    v144 = v20 << v104 >> -(char)v101;
    v145 = (char *)&v16[v144];
    *a1 = *v145;
    if (v145[3] == 1)
    {
      v104 += v145[2];
    }
    else if (v104 <= 0x3F)
    {
      v104 += BYTE2(v16[v144]);
      if (v104 >= 0x40)
        v104 = 64;
    }
  }
  v146 = &v317[v102];
  if (v13 - (unint64_t)v38 >= 8)
  {
    if (v25 > 0x40)
    {
LABEL_162:
      v147 = 3;
      goto LABEL_178;
    }
    if (v102 >= 8)
    {
      v147 = 0;
      LODWORD(v150) = v25 >> 3;
      v25 &= 7u;
    }
    else
    {
      if (!v102)
        goto LABEL_162;
      v150 = v25 >> 3;
      v151 = (unint64_t)&v146[-v150];
      v11 = v151 >= (unint64_t)v317;
      v147 = v151 < (unint64_t)v317;
      if (!v11)
        LODWORD(v150) = v102;
      v25 -= 8 * v150;
    }
    v102 -= v150;
    v24 = *(_QWORD *)&v317[v102];
LABEL_178:
    if (v311 >= 0xCu)
    {
      if ((unint64_t)v38 < v13 - 7)
      {
        v148 = v29;
        if (!v147)
        {
          v172 = -v101 & 0x3F;
          v173 = v25;
          while (1)
          {
            v154 = v102;
            v174 = &v16[v24 << v173 >> v172];
            *(_WORD *)v38 = *(_WORD *)v174;
            v175 = v173 + *((unsigned __int8 *)v174 + 2);
            v176 = &v38[*((unsigned __int8 *)v174 + 3)];
            v177 = &v16[v24 << v175 >> v172];
            *(_WORD *)v176 = *(_WORD *)v177;
            v178 = v175 + *((unsigned __int8 *)v177 + 2);
            v179 = &v176[*((unsigned __int8 *)v177 + 3)];
            v180 = &v16[v24 << v178 >> v172];
            *(_WORD *)v179 = *(_WORD *)v180;
            v181 = v178 + *((unsigned __int8 *)v180 + 2);
            v182 = &v179[*((unsigned __int8 *)v180 + 3)];
            v183 = &v16[v24 << v181 >> v172];
            *(_WORD *)v182 = *(_WORD *)v183;
            v149 = v181 + *((unsigned __int8 *)v183 + 2);
            v38 = &v182[*((unsigned __int8 *)v183 + 3)];
            if (v149 > 0x40)
              goto LABEL_213;
            if (v102 >= 8)
            {
              v186 = 0;
              LODWORD(v184) = v149 >> 3;
              v173 = v149 & 7;
            }
            else
            {
              if (!v102)
                goto LABEL_214;
              v184 = v149 >> 3;
              v185 = &v317[v102 - v184];
              v11 = v185 >= v317;
              v186 = v185 < v317;
              if (!v11)
                LODWORD(v184) = v102;
              v173 = v149 - 8 * v184;
            }
            v102 -= v184;
            v24 = *(_QWORD *)&v317[v102];
            v187 = (unint64_t)v38 < v13 - 7 && !v186;
            v149 = v173;
            if (!v187)
              goto LABEL_214;
          }
        }
LABEL_212:
        v149 = v25;
        goto LABEL_214;
      }
    }
    else if ((unint64_t)v38 < v13 - 9)
    {
      v148 = v29;
      if (!v147)
      {
        v153 = -v101 & 0x3F;
        v149 = v25;
        while (1)
        {
          v154 = v102;
          v155 = &v16[v24 << v149 >> v153];
          *(_WORD *)v38 = *(_WORD *)v155;
          v156 = v149 + *((unsigned __int8 *)v155 + 2);
          v157 = &v38[*((unsigned __int8 *)v155 + 3)];
          v158 = &v16[v24 << v156 >> v153];
          *(_WORD *)v157 = *(_WORD *)v158;
          v159 = v156 + *((unsigned __int8 *)v158 + 2);
          v160 = &v157[*((unsigned __int8 *)v158 + 3)];
          v161 = &v16[v24 << v159 >> v153];
          *(_WORD *)v160 = *(_WORD *)v161;
          v162 = v159 + *((unsigned __int8 *)v161 + 2);
          v163 = &v160[*((unsigned __int8 *)v161 + 3)];
          v164 = &v16[v24 << v162 >> v153];
          *(_WORD *)v163 = *(_WORD *)v164;
          v165 = v162 + *((unsigned __int8 *)v164 + 2);
          v166 = &v163[*((unsigned __int8 *)v164 + 3)];
          v167 = &v16[v24 << v165 >> v153];
          *(_WORD *)v166 = *(_WORD *)v167;
          v149 = v165 + *((unsigned __int8 *)v167 + 2);
          v38 = &v166[*((unsigned __int8 *)v167 + 3)];
          if (v149 > 0x40)
            break;
          if (v102 >= 8)
          {
            v170 = 0;
            LODWORD(v168) = v149 >> 3;
            v149 &= 7u;
          }
          else
          {
            if (!v102)
              goto LABEL_214;
            v168 = v149 >> 3;
            v169 = &v317[v102 - v168];
            v11 = v169 >= v317;
            v170 = v169 < v317;
            if (!v11)
              LODWORD(v168) = v102;
            v149 -= 8 * v168;
          }
          v102 -= v168;
          v24 = *(_QWORD *)&v317[v102];
          if ((unint64_t)v38 >= v13 - 9 || v170)
            goto LABEL_214;
        }
LABEL_213:
        v102 = v154;
        goto LABEL_214;
      }
      goto LABEL_212;
    }
    v148 = v29;
    goto LABEL_212;
  }
  v148 = v29;
  v149 = v25;
  if (v25 <= 0x40)
  {
    if (v102 >= 8)
    {
      v152 = v25 >> 3;
      v149 = v25 & 7;
    }
    else
    {
      if (!v102)
        goto LABEL_212;
      if (&v146[-(v25 >> 3)] >= v317)
        v152 = v25 >> 3;
      else
        v152 = v102;
      v149 = v25 - 8 * v152;
    }
    v102 -= v152;
    v24 = *(_QWORD *)&v317[v102];
  }
LABEL_214:
  v188 = &v317[v102];
  if (v13 - (unint64_t)v38 < 2)
  {
    i = v148;
  }
  else
  {
    v189 = v13 - 2;
    v190 = -v101 & 0x3F;
    for (i = v148; v149 <= 0x40; v38 += *((unsigned __int8 *)v194 + 3))
    {
      if (v102 >= 8)
      {
        v193 = 0;
        LODWORD(v192) = v149 >> 3;
        v149 &= 7u;
      }
      else
      {
        if (!v102)
          break;
        v192 = v149 >> 3;
        v193 = &v188[-v192] < v317;
        if (&v188[-v192] < v317)
          LODWORD(v192) = v102;
        v149 -= 8 * v192;
      }
      v102 -= v192;
      v188 = &v317[v102];
      v24 = *(_QWORD *)&v317[v102];
      if ((unint64_t)v38 > v189)
        break;
      if (v193)
        break;
      v194 = &v16[v24 << v149 >> v190];
      *(_WORD *)v38 = *(_WORD *)v194;
      v149 += *((unsigned __int8 *)v194 + 2);
    }
    while ((unint64_t)v38 <= v189)
    {
      v195 = &v16[v24 << v149 >> v190];
      *(_WORD *)v38 = *(_WORD *)v195;
      v149 += *((unsigned __int8 *)v195 + 2);
      v38 += *((unsigned __int8 *)v195 + 3);
    }
  }
  if ((unint64_t)v38 >= v13)
    goto LABEL_232;
  v196 = v24 << v149 >> -(char)v101;
  v197 = (char *)&v16[v196];
  *v38 = *v197;
  if (v197[3] == 1)
  {
    v149 += v197[2];
LABEL_232:
    v198 = v318;
    v199 = v319;
    v200 = (unint64_t)v312;
    goto LABEL_233;
  }
  v198 = v318;
  v199 = v319;
  v200 = (unint64_t)v312;
  if (v149 <= 0x3F)
  {
    v205 = v149 + BYTE2(v16[v196]);
    if (v205 >= 0x40)
      v149 = 64;
    else
      v149 = v205;
  }
LABEL_233:
  v201 = &v316[v321];
  if (v14 - (unint64_t)v37 < 8)
  {
    v203 = v32;
    if (i > 0x40)
      goto LABEL_290;
    if (v321 >= 8)
    {
      v204 = i >> 3;
      i &= 7u;
    }
    else
    {
      if (!v321)
      {
        v321 = 0;
        goto LABEL_290;
      }
      if (&v201[-(i >> 3)] >= v316)
        v204 = i >> 3;
      else
        v204 = v321;
      i -= 8 * v204;
    }
    v321 -= v204;
    v199 = *(_QWORD *)&v316[v321];
    goto LABEL_290;
  }
  if (i > 0x40)
    goto LABEL_235;
  if (v321 >= 8)
  {
    v202 = 0;
    LODWORD(v206) = i >> 3;
    i &= 7u;
  }
  else
  {
    if (!v321)
    {
      v321 = 0;
LABEL_235:
      v202 = 3;
      goto LABEL_256;
    }
    v206 = i >> 3;
    v207 = (unint64_t)&v201[-v206];
    v11 = v207 >= (unint64_t)v316;
    v202 = v207 < (unint64_t)v316;
    if (!v11)
      LODWORD(v206) = v321;
    i -= 8 * v206;
  }
  v321 -= v206;
  v199 = *(_QWORD *)&v316[v321];
LABEL_256:
  if (v311 < 0xCu)
  {
    if ((unint64_t)v37 < v14 - 9)
    {
      v203 = v32;
      if (!v202)
      {
        v208 = -v101 & 0x3F;
        do
        {
          v209 = &v16[v199 << i >> v208];
          *(_WORD *)v37 = *(_WORD *)v209;
          v210 = i + *((unsigned __int8 *)v209 + 2);
          v211 = &v37[*((unsigned __int8 *)v209 + 3)];
          v212 = &v16[v199 << v210 >> v208];
          *(_WORD *)v211 = *(_WORD *)v212;
          v213 = v210 + *((unsigned __int8 *)v212 + 2);
          v214 = &v211[*((unsigned __int8 *)v212 + 3)];
          v215 = &v16[v199 << v213 >> v208];
          *(_WORD *)v214 = *(_WORD *)v215;
          v216 = v213 + *((unsigned __int8 *)v215 + 2);
          v217 = &v214[*((unsigned __int8 *)v215 + 3)];
          v218 = &v16[v199 << v216 >> v208];
          *(_WORD *)v217 = *(_WORD *)v218;
          v219 = v216 + *((unsigned __int8 *)v218 + 2);
          v220 = &v217[*((unsigned __int8 *)v218 + 3)];
          v221 = &v16[v199 << v219 >> v208];
          *(_WORD *)v220 = *(_WORD *)v221;
          i = v219 + *((unsigned __int8 *)v221 + 2);
          v37 = &v220[*((unsigned __int8 *)v221 + 3)];
          if (i > 0x40)
            break;
          if (v321 >= 8)
          {
            v224 = 0;
            LODWORD(v222) = i >> 3;
            i &= 7u;
          }
          else
          {
            if (!v321)
              goto LABEL_288;
            v222 = i >> 3;
            v223 = &v316[v321 - v222];
            v11 = v223 >= v316;
            v224 = v223 < v316;
            if (!v11)
              LODWORD(v222) = v321;
            i -= 8 * v222;
          }
          v321 -= v222;
          v199 = *(_QWORD *)&v316[v321];
        }
        while ((unint64_t)v37 < v14 - 9 && !v224);
      }
      goto LABEL_290;
    }
LABEL_287:
    v203 = v32;
    goto LABEL_290;
  }
  if ((unint64_t)v37 >= v14 - 7)
    goto LABEL_287;
  v203 = v32;
  if (!v202)
  {
    v226 = -v101 & 0x3F;
    v227 = i;
    do
    {
      v228 = &v16[v199 << v227 >> v226];
      *(_WORD *)v37 = *(_WORD *)v228;
      v229 = v227 + *((unsigned __int8 *)v228 + 2);
      v230 = &v37[*((unsigned __int8 *)v228 + 3)];
      v231 = &v16[v199 << v229 >> v226];
      *(_WORD *)v230 = *(_WORD *)v231;
      v232 = v229 + *((unsigned __int8 *)v231 + 2);
      v233 = &v230[*((unsigned __int8 *)v231 + 3)];
      v234 = &v16[v199 << v232 >> v226];
      *(_WORD *)v233 = *(_WORD *)v234;
      v235 = v232 + *((unsigned __int8 *)v234 + 2);
      v236 = &v233[*((unsigned __int8 *)v234 + 3)];
      v237 = &v16[v199 << v235 >> v226];
      *(_WORD *)v236 = *(_WORD *)v237;
      i = v235 + *((unsigned __int8 *)v237 + 2);
      v37 = &v236[*((unsigned __int8 *)v237 + 3)];
      if (i > 0x40)
        break;
      if (v321 >= 8)
      {
        v240 = 0;
        LODWORD(v238) = i >> 3;
        v227 = i & 7;
      }
      else
      {
        if (!v321)
        {
LABEL_288:
          v321 = 0;
          break;
        }
        v238 = i >> 3;
        v239 = &v316[v321 - v238];
        v11 = v239 >= v316;
        v240 = v239 < v316;
        if (!v11)
          LODWORD(v238) = v321;
        v227 = i - 8 * v238;
      }
      v321 -= v238;
      v199 = *(_QWORD *)&v316[v321];
      v241 = (unint64_t)v37 < v14 - 7 && !v240;
      i = v227;
    }
    while (v241);
  }
LABEL_290:
  v242 = v321;
  v243 = &v316[v321];
  if (v14 - (unint64_t)v37 >= 2)
  {
    v244 = v14 - 2;
    v245 = -v101 & 0x3F;
    while (i <= 0x40)
    {
      if (v242 >= 8)
      {
        v247 = 0;
        LODWORD(v246) = i >> 3;
        i &= 7u;
      }
      else
      {
        if (!v242)
          break;
        v246 = i >> 3;
        v247 = &v243[-v246] < v316;
        if (&v243[-v246] < v316)
          LODWORD(v246) = v242;
        i -= 8 * v246;
      }
      v242 -= v246;
      v243 = &v316[v242];
      v199 = *(_QWORD *)&v316[v242];
      if ((unint64_t)v37 > v244 || v247)
        break;
      v248 = &v16[v199 << i >> v245];
      *(_WORD *)v37 = *(_WORD *)v248;
      i += *((unsigned __int8 *)v248 + 2);
      v37 += *((unsigned __int8 *)v248 + 3);
    }
    while ((unint64_t)v37 <= v244)
    {
      v249 = &v16[v199 << i >> v245];
      *(_WORD *)v37 = *(_WORD *)v249;
      i += *((unsigned __int8 *)v249 + 2);
      v37 += *((unsigned __int8 *)v249 + 3);
    }
  }
  if ((unint64_t)v37 >= v14)
    goto LABEL_307;
  v250 = v199 << i >> -(char)v101;
  v251 = (char *)&v16[v250];
  *v37 = *v251;
  if (v251[3] == 1)
  {
    i += v251[2];
LABEL_307:
    v252 = v315;
    goto LABEL_308;
  }
  v252 = v315;
  if (i <= 0x3F)
  {
    v257 = i + BYTE2(v16[v250]);
    if (v257 >= 0x40)
      i = 64;
    else
      i = v257;
  }
LABEL_308:
  v253 = &v252[v198];
  if (v200 - (unint64_t)v36 < 8)
  {
    if (v33 <= 0x40)
    {
      if (v198 >= 8)
      {
        v256 = v33 >> 3;
        v33 &= 7u;
      }
      else
      {
        if (!v198)
          goto LABEL_332;
        if (&v253[-(v33 >> 3)] >= v252)
          v256 = v33 >> 3;
        else
          v256 = v198;
        v33 -= 8 * v256;
      }
      v198 -= v256;
      v203 = *(_QWORD *)&v252[v198];
    }
  }
  else if (v311 >= 0xCu)
  {
    if (v33 <= 0x40)
    {
      if (v198 >= 8)
      {
        LODWORD(v264) = v33 >> 3;
        v266 = v33 & 7;
        v265 = 1;
      }
      else
      {
        if (!v198)
          goto LABEL_332;
        v264 = v33 >> 3;
        v11 = &v253[-v264] >= v252;
        v265 = v11;
        if (!v11)
          LODWORD(v264) = v198;
        v266 = v33 - 8 * v264;
      }
      v198 -= v264;
      v203 = *(_QWORD *)&v252[v198];
      if ((unint64_t)v36 < v314 && v265)
      {
        v296 = -v101 & 0x3F;
        do
        {
          v297 = &v16[(unint64_t)(v203 << v266) >> v296];
          *v36 = *(_WORD *)v297;
          v298 = v266 + *((unsigned __int8 *)v297 + 2);
          v299 = (_WORD *)((char *)v36 + *((unsigned __int8 *)v297 + 3));
          v300 = &v16[(unint64_t)(v203 << v298) >> v296];
          *v299 = *(_WORD *)v300;
          v301 = v298 + *((unsigned __int8 *)v300 + 2);
          v302 = (_WORD *)((char *)v299 + *((unsigned __int8 *)v300 + 3));
          v303 = &v16[(unint64_t)(v203 << v301) >> v296];
          *v302 = *(_WORD *)v303;
          v304 = v301 + *((unsigned __int8 *)v303 + 2);
          v305 = (_WORD *)((char *)v302 + *((unsigned __int8 *)v303 + 3));
          v306 = &v16[(unint64_t)(v203 << v304) >> v296];
          *v305 = *(_WORD *)v306;
          v33 = v304 + *((unsigned __int8 *)v306 + 2);
          v36 = (_WORD *)((char *)v305 + *((unsigned __int8 *)v306 + 3));
          if (v33 > 0x40)
            break;
          if (v198 >= 8)
          {
            v308 = 0;
            v309 = v33 >> 3;
            v266 = v33 & 7;
          }
          else
          {
            if (!v198)
              break;
            v307 = (unint64_t)&v252[v198 - (v33 >> 3)];
            v11 = v307 >= (unint64_t)v252;
            v308 = v307 < (unint64_t)v252;
            v309 = v11 ? v33 >> 3 : v198;
            v266 = v33 - 8 * v309;
          }
          v198 -= v309;
          v203 = *(_QWORD *)&v252[v198];
          v310 = (unint64_t)v36 < v314 && !v308;
          v33 = v266;
        }
        while (v310);
      }
      else
      {
        v33 = v266;
      }
    }
  }
  else if (v33 <= 0x40)
  {
    if (v198 >= 8)
    {
      v255 = v33 >> 3;
      v33 &= 7u;
      v254 = 1;
      goto LABEL_383;
    }
    if (v198)
    {
      v11 = &v253[-(v33 >> 3)] >= v252;
      v254 = v11;
      if (v11)
        v255 = v33 >> 3;
      else
        v255 = v198;
      v33 -= 8 * v255;
LABEL_383:
      v198 -= v255;
      v203 = *(_QWORD *)&v252[v198];
      if ((unint64_t)v36 < v200 - 9 && v254)
      {
        v278 = -v101 & 0x3F;
        while (1)
        {
          v279 = &v16[(unint64_t)(v203 << v33) >> v278];
          *v36 = *(_WORD *)v279;
          v280 = v33 + *((unsigned __int8 *)v279 + 2);
          v281 = (_WORD *)((char *)v36 + *((unsigned __int8 *)v279 + 3));
          v282 = &v16[(unint64_t)(v203 << v280) >> v278];
          *v281 = *(_WORD *)v282;
          v283 = v280 + *((unsigned __int8 *)v282 + 2);
          v284 = (_WORD *)((char *)v281 + *((unsigned __int8 *)v282 + 3));
          v285 = &v16[(unint64_t)(v203 << v283) >> v278];
          *v284 = *(_WORD *)v285;
          v286 = v283 + *((unsigned __int8 *)v285 + 2);
          v287 = (_WORD *)((char *)v284 + *((unsigned __int8 *)v285 + 3));
          v288 = &v16[(unint64_t)(v203 << v286) >> v278];
          *v287 = *(_WORD *)v288;
          v289 = v286 + *((unsigned __int8 *)v288 + 2);
          v290 = (_WORD *)((char *)v287 + *((unsigned __int8 *)v288 + 3));
          v291 = &v16[(unint64_t)(v203 << v289) >> v278];
          *v290 = *(_WORD *)v291;
          v33 = v289 + *((unsigned __int8 *)v291 + 2);
          v36 = (_WORD *)((char *)v290 + *((unsigned __int8 *)v291 + 3));
          if (v33 > 0x40)
            break;
          v101 = v313;
          if (v198 >= 8)
          {
            v294 = 0;
            LODWORD(v292) = v33 >> 3;
            v33 &= 7u;
          }
          else
          {
            if (!v198)
              goto LABEL_332;
            v292 = v33 >> 3;
            v293 = &v252[v198 - v292];
            v11 = v293 >= v252;
            v294 = v293 < v252;
            if (!v11)
              LODWORD(v292) = v198;
            v33 -= 8 * v292;
          }
          v198 -= v292;
          v203 = *(_QWORD *)&v252[v198];
          if ((unint64_t)v36 >= v200 - 9 || v294)
            goto LABEL_332;
        }
        v101 = v313;
      }
    }
  }
LABEL_332:
  v258 = &v252[v198];
  if (v200 - (unint64_t)v36 >= 2)
  {
    v259 = v200 - 2;
    v260 = -v101 & 0x3F;
    while (v33 <= 0x40)
    {
      if (v198 >= 8)
      {
        v262 = 0;
        LODWORD(v261) = v33 >> 3;
        v33 &= 7u;
      }
      else
      {
        if (!v198)
          break;
        v261 = v33 >> 3;
        v262 = &v258[-v261] < v252;
        if (&v258[-v261] < v252)
          LODWORD(v261) = v198;
        v33 -= 8 * v261;
      }
      v198 -= v261;
      v258 = &v252[v198];
      v203 = *(_QWORD *)&v252[v198];
      if ((unint64_t)v36 > v259 || v262)
        break;
      v263 = &v16[(unint64_t)(v203 << v33) >> v260];
      *v36 = *(_WORD *)v263;
      v33 += *((unsigned __int8 *)v263 + 2);
      v36 = (_WORD *)((char *)v36 + *((unsigned __int8 *)v263 + 3));
    }
    while ((unint64_t)v36 <= v259)
    {
      v267 = &v16[(unint64_t)(v203 << v33) >> v260];
      *v36 = *(_WORD *)v267;
      v33 += *((unsigned __int8 *)v267 + 2);
      v36 = (_WORD *)((char *)v36 + *((unsigned __int8 *)v267 + 3));
    }
  }
  if ((unint64_t)v36 < v200)
  {
    v268 = (unint64_t)(v203 << v33) >> -(char)v101;
    v269 = &v16[v268];
    *(_BYTE *)v36 = *v269;
    if (v269[3] == 1)
    {
      v33 += v269[2];
    }
    else if (v33 <= 0x3F)
    {
      v270 = v33 + BYTE2(v16[v268]);
      if (v270 >= 0x40)
        v33 = 64;
      else
        v33 = v270;
    }
  }
  v277 = v33 == 64 && v258 == v252 && i == 64 && v243 == v316 && v149 == 64 && v188 == v317 && v104 == 64 && v19 == 6;
  v5 = -20;
  if (v277)
    return a2;
  return v5;
}

unint64_t HUF_decompress4X2_DCtx_wksp_bmi2(int *a1, char *a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t result;

  result = HUF_readDTableX2_wksp_bmi2(a1, a4, a5, a6, a7);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
      return -72;
    else
      return HUF_decompress4X2_usingDTable_internal(a2, a3, (unsigned __int16 *)&a4[result], a5 - result, (unsigned int *)a1);
  }
  return result;
}

BOOL HUF_selectDecoder(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  unsigned int v4;

  if (a2 >= a1)
    v2 = 15;
  else
    v2 = (16 * a2 / a1);
  v3 = (_DWORD *)((char *)&algoTime + 16 * v2);
  v4 = *v3 + v3[1] * (a1 >> 8);
  LODWORD(v3) = v3[2] + v3[3] * (a1 >> 8);
  return v3 + (v3 >> 5) < v4;
}

uint64_t HUF_decompress1X_usingDTable_bmi2(char *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, int *a5)
{
  if (*((_BYTE *)a5 + 1))
    return HUF_decompress1X2_usingDTable_internal(a1, a2, a3, a4, a5);
  else
    return HUF_decompress1X1_usingDTable_internal(a1, a2, a3, a4, (uint64_t)a5);
}

unint64_t HUF_decompress1X1_DCtx_wksp_bmi2(int *a1, _BYTE *a2, uint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t result;

  result = HUF_readDTableX1_wksp_bmi2(a1, a4, a5, a6, a7);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (a5 <= result)
      return -72;
    else
      return HUF_decompress1X1_usingDTable_internal(a2, a3, (unsigned __int8 *)&a4[result], a5 - result, (uint64_t)a1);
  }
  return result;
}

uint64_t HUF_decompress4X_usingDTable_bmi2(char *a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4, unsigned int *a5)
{
  if (*((_BYTE *)a5 + 1))
    return HUF_decompress4X2_usingDTable_internal(a1, a2, a3, a4, a5);
  else
    return HUF_decompress4X1_usingDTable_internal((unsigned __int8 *)a1, a2, a3, a4, (uint64_t)a5);
}

uint64_t HUF_decompress4X_hufOnly_wksp_bmi2(int *a1, char *a2, unint64_t a3, char *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  if (!a3)
    return -70;
  if (!a5)
    return -20;
  if (HUF_selectDecoder(a3, a5))
    return HUF_decompress4X2_DCtx_wksp_bmi2(a1, a2, a3, a4, a5, a6, a7);
  return HUF_decompress4X1_DCtx_wksp_bmi2(a1, (unsigned __int8 *)a2, a3, a4, a5, a6, a7);
}

uint64_t HUF_fillDTableX2ForWeight(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3, int a4, char a5, int a6, int a7)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unint64_t *v15;
  int v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;

  v7 = (1 << (a5 - a4));
  switch((int)v7)
  {
    case 1:
      for (; a2 != a3; result += 4)
      {
        v9 = *a2++;
        v8 = v9;
        v10 = a6 + (v9 << 8);
        if (a7 != 1)
          v8 = v10;
        *(_DWORD *)result = (a7 << 24) + (a4 << 16) + v8;
      }
      break;
    case 2:
      for (; a2 != a3; result += 8)
      {
        v12 = *a2++;
        v11 = v12;
        v13 = a6 + (v12 << 8);
        if (a7 != 1)
          v11 = v13;
        v14 = (a7 << 24) + (a4 << 16) + v11;
        *(_DWORD *)result = v14;
        *(_DWORD *)(result + 4) = v14;
      }
      break;
    case 4:
      for (; a2 != a3; result += 16)
      {
        v19 = *a2++;
        v18 = v19;
        v20 = a6 + (v19 << 8);
        if (a7 != 1)
          v18 = v20;
        v21 = ((a7 << 24) + (a4 << 16) + v18) | ((unint64_t)((a7 << 24)
                                                                                              + (a4 << 16)
                                                                                              + v18) << 32);
        *(_QWORD *)result = v21;
        *(_QWORD *)(result + 8) = v21;
      }
      break;
    case 8:
      for (; a2 != a3; result += 32)
      {
        v23 = *a2++;
        v22 = v23;
        v24 = a6 + (v23 << 8);
        if (a7 != 1)
          v22 = v24;
        v25 = ((a7 << 24) + (a4 << 16) + v22) | ((unint64_t)((a7 << 24)
                                                                                              + (a4 << 16)
                                                                                              + v22) << 32);
        *(_QWORD *)result = v25;
        *(_QWORD *)(result + 8) = v25;
        *(_QWORD *)(result + 16) = v25;
        *(_QWORD *)(result + 24) = v25;
      }
      break;
    default:
      for (; a2 != a3; ++a2)
      {
        v15 = (unint64_t *)result;
        v16 = *a2;
        if (a7 != 1)
          v16 = a6 + (v16 << 8);
        v17 = ((a7 << 24) + (a4 << 16) + v16) | ((unint64_t)((a7 << 24)
                                                                                              + (a4 << 16)
                                                                                              + v16) << 32);
        result += 4 * v7;
        do
        {
          *v15 = v17;
          v15[1] = v17;
          v15[2] = v17;
          v15[3] = v17;
          v15 += 4;
        }
        while (v15 != (unint64_t *)result);
      }
      break;
  }
  return result;
}

uint64_t FSE_buildDTable_internal(_WORD *a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  _WORD *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int i;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;

  v6 = -46;
  if (a3 <= 0xFF)
  {
    v7 = a3 + 1;
    if ((1 << a4) + 2 * (unint64_t)v7 + 8 <= a6)
    {
      if (a4 <= 0xC)
      {
        v8 = 0;
        v9 = a1 + 2;
        v10 = a5 + 2 * a3;
        v11 = (1 << a4);
        v12 = (v11 - 1);
        v13 = 1;
        v14 = v11 - 1;
        v15 = a3;
        do
        {
          v16 = *(__int16 *)(a2 + 2 * v8);
          if (v16 == -1)
          {
            v18 = &v9[2 * v14--];
            *((_BYTE *)v18 + 2) = v8;
            v17 = 1;
          }
          else
          {
            v17 = *(_WORD *)(a2 + 2 * v8);
            if (0x8000 << a4 >> 16 <= v16)
              v13 = 0;
          }
          *(_WORD *)(a5 + 2 * v8++) = v17;
        }
        while (v7 != v8);
        *a1 = a4;
        a1[1] = v13;
        v19 = v11 >> 1;
        if (v14 == (_DWORD)v12)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v23 = v19 + (v11 >> 3) + 3;
          v24 = a5 + 2 * v15;
          do
          {
            v25 = *(__int16 *)(a2 + 2 * v20);
            v26 = *(unsigned __int16 *)(a2 + 2 * v20);
            *(_QWORD *)(v10 + 2 + v22) = v21;
            if (v25 >= 9)
            {
              v27 = 10;
              do
              {
                *(_QWORD *)(v24 + v22 + v27) = v21;
                v28 = v27 + 6;
                v27 += 8;
              }
              while (v28 < v26);
            }
            v22 += (__int16)v26;
            ++v20;
            v21 += 0x101010101010101;
          }
          while (v20 != v7);
          v29 = 0;
          v30 = 0;
          do
          {
            LOBYTE(v9[2 * (v30 & v12) + 1]) = *(_BYTE *)(v10 + v29 + 2);
            LOBYTE(v9[2 * (((_DWORD)v30 + v23) & v12) + 1]) = *(_BYTE *)(v10 + v29 + 3);
            v30 = ((_DWORD)v30 + 2 * v23) & v12;
            v29 += 2;
          }
          while (v29 < v11);
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            v33 = *(__int16 *)(a2 + 2 * v31);
            if (v33 >= 1)
            {
              for (i = 0; i != v33; ++i)
              {
                LOBYTE(v9[2 * v32 + 1]) = v31;
                do
                  v32 = (v19 + (v11 >> 3) + 3 + v32) & v12;
                while (v32 > v14);
              }
            }
            ++v31;
          }
          while (v31 != v7);
          if (v32)
            return -1;
        }
        v35 = (char *)a1 + 7;
        v36 = (1 << a4);
        do
        {
          v37 = *(v35 - 1);
          v38 = *(unsigned __int16 *)(a5 + 2 * v37);
          *(_WORD *)(a5 + 2 * v37) = v38 + 1;
          LOBYTE(v37) = a4 + 1 + (__clz(v38) ^ 0xE0);
          *v35 = v37;
          *(_WORD *)(v35 - 3) = ((_WORD)v38 << v37) - v11;
          v35 += 4;
          --v36;
        }
        while (v36);
        return 0;
      }
      else
      {
        return -44;
      }
    }
  }
  return v6;
}

unint64_t FSE_decompress_wksp_bmi2(_BYTE *a1, uint64_t a2, _DWORD *a3, size_t a4, unsigned int a5, unsigned __int16 *a6, unint64_t a7)
{
  unint64_t result;
  int v15;
  unint64_t v16;
  unsigned __int16 *v17;
  unsigned __int8 *v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _WORD *v39;
  unsigned int v40;
  unint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  _BOOL4 v51;
  unsigned int v52;
  unsigned __int16 *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unsigned __int16 *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unsigned __int16 *v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  int v69;
  unsigned __int16 *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  unsigned __int16 *v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  int v85;
  unint64_t v86;
  unsigned __int16 *v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  _BYTE *v94;
  uint64_t v95;
  _BOOL4 v96;
  unsigned __int16 *v97;
  uint64_t v98;
  char v99;
  unint64_t v100;
  uint64_t v101;
  unsigned __int16 *v102;
  uint64_t v103;
  char v104;
  unint64_t v105;
  uint64_t v106;
  unsigned __int16 *v107;
  uint64_t v108;
  char v109;
  unint64_t v110;
  unsigned __int16 *v111;
  uint64_t v112;
  char v113;
  unint64_t v114;
  unint64_t v115;
  unsigned __int16 *v116;
  uint64_t v117;
  char v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unint64_t v123;
  unsigned __int16 *v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  _BYTE *v128;
  unsigned int v129;
  unsigned int v130;

  v129 = 255;
  if (a7 < 0x204)
    return -1;
  v130 = 0;
  result = FSE_readNCount_bmi2(a6, &v129, &v130, a3, a4);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  if (v130 > a5)
    return -44;
  v15 = (1 << v130) + 1;
  if ((((1 << v130) + 4 * v15 + 2 * (v129 + 1) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 516 > a7)
    return -44;
  v16 = result;
  v17 = a6 + 256;
  result = FSE_buildDTable_internal(a6 + 256, (uint64_t)a6, v129, v130, (uint64_t)&a6[2 * v15 + 256], a7 - 4 * v15 - 516);
  if (result > 0xFFFFFFFFFFFFFF88)
    return result;
  v18 = (unsigned __int8 *)a3 + v16;
  result = a4 - v16;
  v19 = &a1[a2];
  v20 = (unint64_t)&a1[a2 - 3];
  if (!a6[257])
  {
    if (!result)
      return -72;
    v24 = result - 8;
    if (result < 8)
    {
      v25 = *v18;
      switch(result)
      {
        case 2uLL:
          goto LABEL_38;
        case 3uLL:
          goto LABEL_37;
        case 4uLL:
          goto LABEL_36;
        case 5uLL:
          goto LABEL_35;
        case 6uLL:
          goto LABEL_34;
        case 7uLL:
          v25 |= (unint64_t)v18[6] << 48;
LABEL_34:
          v25 += (unint64_t)v18[5] << 40;
LABEL_35:
          v25 += (unint64_t)v18[4] << 32;
LABEL_36:
          v25 += (unint64_t)v18[3] << 24;
LABEL_37:
          v25 += (unint64_t)v18[2] << 16;
LABEL_38:
          v25 += (unint64_t)v18[1] << 8;
          break;
        default:
          break;
      }
      if (!v18[result - 1])
        return -20;
      v24 = 0;
      v26 = __clz(v18[result - 1]) - 8 * result + 41;
    }
    else
    {
      if (!v18[result - 1])
        return -1;
      if (result > 0xFFFFFFFFFFFFFF88)
        return result;
      v25 = *(_QWORD *)&v18[v24];
      v26 = __clz(v18[result - 1]) - 23;
    }
    v33 = *v17;
    v34 = v26 + v33;
    v35 = BIT_mask_2[v33];
    v36 = (v25 >> -(char)(v26 + v33)) & v35;
    if (v26 + v33 <= 0x40)
    {
      if (v24 >= 8)
      {
        v37 = v34 >> 3;
        v34 &= 7u;
      }
      else
      {
        if (!v24)
          goto LABEL_68;
        if (&v18[v24 - (v34 >> 3)] >= v18)
          v37 = v34 >> 3;
        else
          v37 = v24;
        v34 -= 8 * v37;
      }
      v24 -= v37;
      v25 = *(_QWORD *)&v18[v24];
    }
LABEL_68:
    v39 = a6 + 258;
    v45 = v34 + v33;
    v41 = (v25 >> -(char)v45) & v35;
    if (v45 > 0x40)
    {
LABEL_69:
      v46 = a1;
LABEL_89:
      v74 = (unint64_t)(v19 - 2);
      if (v46 > v19 - 2)
        return -70;
      v75 = (_BYTE *)(v46 - a1);
      v76 = v46 + 1;
      v77 = 2;
      while (1)
      {
        v78 = &v39[2 * v36];
        v79 = *v78;
        v80 = *((_BYTE *)v78 + 2);
        v81 = *((unsigned __int8 *)v78 + 3);
        v82 = v45 + v81;
        v83 = BIT_mask_2[v81];
        *(v76 - 1) = v80;
        if (v82 > 0x40)
        {
LABEL_154:
          *v76 = v39[2 * v41 + 1];
          return (unint64_t)&v75[v77];
        }
        if (v24 >= 8)
          break;
        if (v24)
        {
          if (&v18[v24 - (v82 >> 3)] >= v18)
            v84 = v82 >> 3;
          else
            v84 = v24;
          v85 = v82 - 8 * v84;
          goto LABEL_99;
        }
        v85 = v82;
        v86 = v25;
LABEL_100:
        if ((unint64_t)v76 > v74)
          return -70;
        v36 = ((v25 >> -(char)v82) & v83) + v79;
        v87 = &v39[2 * v41];
        v88 = *v87;
        v89 = *((_BYTE *)v87 + 2);
        v90 = *((unsigned __int8 *)v87 + 3);
        v91 = v85 + v90;
        v92 = BIT_mask_2[v90];
        *v76 = v89;
        if (v91 > 0x40)
        {
          ++v76;
          v77 = 3;
          v41 = v36;
          goto LABEL_154;
        }
        if (v24 >= 8)
        {
          v93 = v91 >> 3;
          v45 = v91 & 7;
        }
        else
        {
          if (!v24)
          {
            v45 = v91;
            v25 = v86;
            goto LABEL_110;
          }
          if (&v18[v24 - (v91 >> 3)] >= v18)
            v93 = v91 >> 3;
          else
            v93 = v24;
          v45 = v91 - 8 * v93;
        }
        v24 -= v93;
        v25 = *(_QWORD *)&v18[v24];
LABEL_110:
        v41 = ((v86 >> -(char)v91) & v92) + v88;
        v75 += 2;
        v94 = v76 + 1;
        v76 += 2;
        result = -70;
        if ((unint64_t)v94 > v74)
          return result;
      }
      v84 = v82 >> 3;
      v85 = v82 & 7;
LABEL_99:
      v24 -= v84;
      v86 = *(_QWORD *)&v18[v24];
      goto LABEL_100;
    }
    if (v24 >= 8)
    {
      v49 = v45 >> 3;
      v45 &= 7u;
      v24 -= v49;
      v25 = *(_QWORD *)&v18[v24];
    }
    else if (v24)
    {
      v47 = v45 >> 3;
      v48 = &v18[v24 - v47] >= v18 ? v47 : v24;
      v45 -= 8 * v48;
      v24 -= v48;
      v25 = *(_QWORD *)&v18[v24];
      if (v45 > 0x40)
        goto LABEL_69;
    }
    v46 = a1;
    do
    {
      if (v24 >= 8)
      {
        v51 = 0;
        v52 = v45 >> 3;
        v45 &= 7u;
      }
      else
      {
        if (!v24)
          goto LABEL_89;
        v50 = &v18[v24 - (v45 >> 3)];
        v51 = v50 < v18;
        if (v50 >= v18)
          v52 = v45 >> 3;
        else
          v52 = v24;
        v45 -= 8 * v52;
      }
      v24 -= v52;
      v25 = *(_QWORD *)&v18[v24];
      if ((unint64_t)v46 >= v20)
        break;
      if (v51)
        break;
      v53 = &v39[2 * v36];
      v54 = *v53;
      v55 = *((_BYTE *)v53 + 2);
      v56 = *((unsigned __int8 *)v53 + 3);
      v57 = v45 + v56;
      v58 = ((v25 >> -(char)v57) & BIT_mask_2[v56]) + v54;
      *v46 = v55;
      v59 = &v39[2 * v41];
      v60 = *v59;
      v61 = *((_BYTE *)v59 + 2);
      v62 = *((unsigned __int8 *)v59 + 3);
      v63 = v57 + v62;
      v64 = ((v25 >> -(char)v63) & BIT_mask_2[v62]) + v60;
      v46[1] = v61;
      v65 = &v39[2 * v58];
      v66 = *v65;
      v67 = *((_BYTE *)v65 + 2);
      v68 = *((unsigned __int8 *)v65 + 3);
      v69 = v63 + v68;
      v36 = ((v25 >> -(char)v69) & BIT_mask_2[v68]) + v66;
      v46[2] = v67;
      v70 = &v39[2 * v64];
      v71 = *v70;
      v72 = *((_BYTE *)v70 + 2);
      v73 = *((unsigned __int8 *)v70 + 3);
      v45 = v69 + v73;
      v41 = ((v25 >> -(char)v45) & BIT_mask_2[v73]) + v71;
      v46[3] = v72;
      v46 += 4;
    }
    while (v45 <= 0x40);
    goto LABEL_89;
  }
  if (!result)
    return -72;
  if (result < 8)
  {
    v21 = *v18;
    switch(result)
    {
      case 2uLL:
        goto LABEL_27;
      case 3uLL:
        goto LABEL_26;
      case 4uLL:
        goto LABEL_25;
      case 5uLL:
        goto LABEL_24;
      case 6uLL:
        goto LABEL_23;
      case 7uLL:
        v21 |= (unint64_t)v18[6] << 48;
LABEL_23:
        v21 += (unint64_t)v18[5] << 40;
LABEL_24:
        v21 += (unint64_t)v18[4] << 32;
LABEL_25:
        v21 += (unint64_t)v18[3] << 24;
LABEL_26:
        v21 += (unint64_t)v18[2] << 16;
LABEL_27:
        v21 += (unint64_t)v18[1] << 8;
        break;
      default:
        break;
    }
    if (v18[result - 1])
    {
      v23 = __clz(v18[result - 1]) - 8 * result + 41;
      v22 = (unsigned __int8 *)a3 + v16;
LABEL_30:
      v27 = v18 + 8;
      v28 = *v17;
      v29 = v23 + v28;
      v30 = BIT_mask_2[v28];
      v31 = (v21 >> -(char)(v23 + v28)) & v30;
      if (v29 > 0x40)
      {
        v32 = v22;
        goto LABEL_56;
      }
      if (v22 >= v27)
      {
        LODWORD(v38) = v29 >> 3;
        v29 &= 7u;
      }
      else
      {
        v32 = (unsigned __int8 *)a3 + v16;
        if (v22 == v18)
          goto LABEL_56;
        v38 = v29 >> 3;
        if (&v22[-v38] < v18)
          LODWORD(v38) = (_DWORD)v22 - (_DWORD)v18;
        v29 -= 8 * v38;
      }
      v32 = &v22[-v38];
      v21 = *(_QWORD *)v32;
LABEL_56:
      v39 = a6 + 258;
      v40 = v29 + v28;
      v41 = (v21 >> -(char)v40) & v30;
      if (v40 >= 0x41)
      {
LABEL_57:
        v42 = a1;
        goto LABEL_128;
      }
      if (v32 >= v27)
      {
        v44 = v40 >> 3;
        v40 &= 7u;
        v32 -= v44;
        v21 = *(_QWORD *)v32;
      }
      else if (v32 == v18)
      {
        v32 = (unsigned __int8 *)a3 + v16;
      }
      else
      {
        v43 = v40 >> 3;
        if (&v32[-v43] >= v18)
          v43 = v43;
        else
          v43 = ((_DWORD)v32 - (_DWORD)v18);
        v40 -= 8 * v43;
        v32 -= v43;
        v21 = *(_QWORD *)v32;
        if (v40 > 0x40)
          goto LABEL_57;
      }
      v42 = a1;
      while (1)
      {
        if (v32 >= v27)
        {
          v96 = 0;
          LODWORD(v95) = v40 >> 3;
          v40 &= 7u;
        }
        else
        {
          if (v32 == v18)
          {
            v32 = (unsigned __int8 *)a3 + v16;
LABEL_128:
            v115 = (unint64_t)(v19 - 2);
            if (v42 > v19 - 2)
              return -70;
            v75 = (_BYTE *)(v42 - a1);
            v76 = v42 + 1;
            v77 = 2;
            while (2)
            {
              v116 = &v39[2 * v31];
              v117 = *v116;
              v118 = *((_BYTE *)v116 + 2);
              v119 = *((unsigned __int8 *)v116 + 3);
              v120 = v40 + v119;
              *(v76 - 1) = v118;
              if (v40 + v119 > 0x40)
                goto LABEL_154;
              if (v32 >= v27)
              {
                LODWORD(v121) = v120 >> 3;
                v120 &= 7u;
                goto LABEL_138;
              }
              if (v32 == v18)
              {
                v122 = (unsigned __int8 *)a3 + v16;
                v123 = v21;
              }
              else
              {
                v121 = v120 >> 3;
                if (&v32[-v121] < v18)
                  LODWORD(v121) = (_DWORD)v32 - (_DWORD)v18;
                v120 -= 8 * v121;
LABEL_138:
                v122 = &v32[-v121];
                v123 = *(_QWORD *)v122;
              }
              if ((unint64_t)v76 > v115)
                return -70;
              v31 = (v21 << v40 >> -(char)v119) + v117;
              v124 = &v39[2 * v41];
              v125 = *v124;
              v126 = *((unsigned __int8 *)v124 + 3);
              v40 = v120 + v126;
              *v76 = *((_BYTE *)v124 + 2);
              if (v120 + v126 > 0x40)
              {
                ++v76;
                v77 = 3;
                v41 = v31;
                goto LABEL_154;
              }
              if (v122 < v27)
              {
                if (v122 == v18)
                {
                  v32 = (unsigned __int8 *)a3 + v16;
                  v21 = v123;
                }
                else
                {
                  v127 = v40 >> 3;
                  if (&v122[-v127] < v18)
                    LODWORD(v127) = (_DWORD)v122 - (_DWORD)v18;
                  v40 -= 8 * v127;
LABEL_147:
                  v32 = &v122[-v127];
                  v21 = *(_QWORD *)v32;
                }
                v41 = (v123 << v120 >> -(char)v126) + v125;
                v75 += 2;
                v128 = v76 + 1;
                v76 += 2;
                result = -70;
                if ((unint64_t)v128 > v115)
                  return result;
                continue;
              }
              break;
            }
            LODWORD(v127) = v40 >> 3;
            v40 &= 7u;
            goto LABEL_147;
          }
          v95 = v40 >> 3;
          v96 = &v32[-v95] < v18;
          if (&v32[-v95] < v18)
            LODWORD(v95) = (_DWORD)v32 - (_DWORD)v18;
          v40 -= 8 * v95;
        }
        v32 -= v95;
        v21 = *(_QWORD *)v32;
        if ((unint64_t)v42 < v20 && !v96)
        {
          v97 = &v39[2 * v31];
          v98 = *v97;
          v99 = *((_BYTE *)v97 + 2);
          LODWORD(v97) = *((unsigned __int8 *)v97 + 3);
          v100 = v21 << v40 >> -(char)v97;
          LODWORD(v97) = v40 + (_DWORD)v97;
          v101 = v100 + v98;
          *v42 = v99;
          v102 = &v39[2 * v41];
          v103 = *v102;
          v104 = *((_BYTE *)v102 + 2);
          LODWORD(v102) = *((unsigned __int8 *)v102 + 3);
          v105 = v21 << (char)v97 >> -(char)v102;
          LODWORD(v97) = (_DWORD)v97 + (_DWORD)v102;
          v106 = v105 + v103;
          v42[1] = v104;
          v107 = &v39[2 * v101];
          v108 = *v107;
          v109 = *((_BYTE *)v107 + 2);
          LODWORD(v107) = *((unsigned __int8 *)v107 + 3);
          v110 = v21 << (char)v97 >> -(char)v107;
          LODWORD(v107) = (_DWORD)v97 + (_DWORD)v107;
          v31 = v110 + v108;
          v42[2] = v109;
          v111 = &v39[2 * v106];
          v112 = *v111;
          v113 = *((_BYTE *)v111 + 2);
          LODWORD(v111) = *((unsigned __int8 *)v111 + 3);
          v114 = v21 << (char)v107 >> -(char)v111;
          v40 = (_DWORD)v107 + (_DWORD)v111;
          v41 = v114 + v112;
          v42[3] = v113;
          v42 += 4;
          if (v40 <= 0x40)
            continue;
        }
        goto LABEL_128;
      }
    }
    return -20;
  }
  if (!v18[result - 1])
    return -1;
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    v22 = (unsigned __int8 *)a3 + a4 - 8;
    v21 = *(_QWORD *)v22;
    v23 = __clz(v18[result - 1]) - 23;
    goto LABEL_30;
  }
  return result;
}

unint64_t ZSTD_XXH64(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = a1;
  if (a2 < 0x20)
  {
    v13 = a3 + 0x27D4EB2F165667C5;
  }
  else
  {
    v5 = (unint64_t)a1 + a2 - 31;
    v6 = a3 + 0x60EA27EEADC0B5D6;
    v7 = a3 - 0x3D4D51C2D82B14B1;
    v8 = a3 + 0x61C8864E7A143579;
    do
    {
      v9 = __ROR8__(v6 - 0x3D4D51C2D82B14B1 * *v4, 33);
      v6 = 0x9E3779B185EBCA87 * v9;
      v10 = __ROR8__(v7 - 0x3D4D51C2D82B14B1 * v4[1], 33);
      v7 = 0x9E3779B185EBCA87 * v10;
      v11 = __ROR8__(a3 - 0x3D4D51C2D82B14B1 * v4[2], 33);
      a3 = 0x9E3779B185EBCA87 * v11;
      v12 = __ROR8__(v8 - 0x3D4D51C2D82B14B1 * v4[3], 33);
      v8 = 0x9E3779B185EBCA87 * v12;
      v4 += 4;
    }
    while ((unint64_t)v4 < v5);
    v13 = 0x9E3779B185EBCA87
        * ((0x9E3779B185EBCA87
          * ((0x9E3779B185EBCA87
            * ((0x9E3779B185EBCA87
              * ((__ROR8__(v7, 57) + __ROR8__(v6, 63) + __ROR8__(a3, 52) + __ROR8__(v8, 46)) ^ (0x9E3779B185EBCA87
                                                                                              * __ROR8__(0xDEF35B010F796CA9* v9, 33)))- 0x7A1435883D4D519DLL) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v10, 33)))- 0x7A1435883D4D519DLL) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v11, 33)))- 0x7A1435883D4D519DLL) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v12, 33)))- 0x7A1435883D4D519DLL;
  }
  return XXH64_finalize(v13 + a2, v4, a2);
}

uint64_t ZSTD_XXH64_reset(uint64_t a1, unint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(int64x2_t *)(a1 + 8) = vaddq_s64(vdupq_n_s64(a2), (int64x2_t)xmmword_1B862AF90);
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a2 + 0x61C8864E7A143579;
  return 0;
}

uint64_t ZSTD_XXH64_update(uint64_t a1, char *__src, size_t __n)
{
  int v3;
  char *v4;
  uint64_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  if (__src)
  {
    v3 = __n;
    v4 = __src;
    *(_QWORD *)a1 += __n;
    v6 = *(unsigned int *)(a1 + 72);
    if (v6 + __n <= 0x1F)
    {
      memcpy((void *)(a1 + v6 + 40), __src, __n);
      LODWORD(v7) = *(_DWORD *)(a1 + 72) + v3;
LABEL_11:
      *(_DWORD *)(a1 + 72) = v7;
      return 0;
    }
    v8 = &__src[__n];
    if ((_DWORD)v6)
    {
      memcpy((void *)(a1 + 40 + v6), __src, (32 - v6));
      v9 = __ROR8__(*(_QWORD *)(a1 + 16) - 0x3D4D51C2D82B14B1 * *(_QWORD *)(a1 + 48), 33);
      *(_QWORD *)(a1 + 8) = 0x9E3779B185EBCA87
                          * __ROR8__(*(_QWORD *)(a1 + 8) - 0x3D4D51C2D82B14B1 * *(_QWORD *)(a1 + 40), 33);
      *(_QWORD *)(a1 + 16) = 0x9E3779B185EBCA87 * v9;
      v10 = 0x9E3779B185EBCA87 * __ROR8__(*(_QWORD *)(a1 + 32) - 0x3D4D51C2D82B14B1 * *(_QWORD *)(a1 + 64), 33);
      *(_QWORD *)(a1 + 24) = 0x9E3779B185EBCA87
                           * __ROR8__(*(_QWORD *)(a1 + 24) - 0x3D4D51C2D82B14B1 * *(_QWORD *)(a1 + 56), 33);
      *(_QWORD *)(a1 + 32) = v10;
      v4 += (32 - *(_DWORD *)(a1 + 72));
      *(_DWORD *)(a1 + 72) = 0;
    }
    if (v4 + 32 <= v8)
    {
      v11 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_QWORD *)(a1 + 24);
      v14 = *(_QWORD *)(a1 + 32);
      do
      {
        v11 = 0x9E3779B185EBCA87 * __ROR8__(v11 - 0x3D4D51C2D82B14B1 * *(_QWORD *)v4, 33);
        *(_QWORD *)(a1 + 8) = v11;
        v12 = 0x9E3779B185EBCA87 * __ROR8__(v12 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 1), 33);
        *(_QWORD *)(a1 + 16) = v12;
        v13 = 0x9E3779B185EBCA87 * __ROR8__(v13 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 2), 33);
        *(_QWORD *)(a1 + 24) = v13;
        v14 = 0x9E3779B185EBCA87 * __ROR8__(v14 - 0x3D4D51C2D82B14B1 * *((_QWORD *)v4 + 3), 33);
        *(_QWORD *)(a1 + 32) = v14;
        v4 += 32;
      }
      while (v4 <= v8 - 32);
    }
    if (v4 < v8)
    {
      v7 = v8 - v4;
      memcpy((void *)(a1 + 40), v4, v7);
      goto LABEL_11;
    }
  }
  return 0;
}

unint64_t ZSTD_XXH64_digest(_QWORD *a1)
{
  uint64_t v1;

  if (*a1 < 0x20uLL)
    v1 = a1[3] + 0x27D4EB2F165667C5;
  else
    v1 = 0x9E3779B185EBCA87
       * ((0x9E3779B185EBCA87
         * ((0x9E3779B185EBCA87
           * ((0x9E3779B185EBCA87
             * ((__ROR8__(a1[2], 57) + __ROR8__(a1[1], 63) + __ROR8__(a1[3], 52) + __ROR8__(a1[4], 46)) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[1], 33)))
             - 0x7A1435883D4D519DLL) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[2], 33)))
           - 0x7A1435883D4D519DLL) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[3], 33)))
         - 0x7A1435883D4D519DLL) ^ (0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * a1[4], 33)))
       - 0x7A1435883D4D519DLL;
  return XXH64_finalize(v1 + *a1, a1 + 5, *a1);
}

unint64_t XXH64_finalize(unint64_t a1, uint64_t *a2, char a3)
{
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;

  v3 = a3 & 0x1F;
  if (v3 >= 8)
  {
    do
    {
      v4 = *a2++;
      a1 = 0x85EBCA77C2B2AE63
         - 0x61C8864E7A143579 * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * v4, 33)) ^ a1, 37);
      v3 -= 8;
    }
    while (v3 > 7);
  }
  if (v3 >= 4)
  {
    v5 = *(_DWORD *)a2;
    a2 = (uint64_t *)((char *)a2 + 4);
    a1 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * v5) ^ a1, 41);
    v3 -= 4;
  }
  for (; v3; --v3)
  {
    v6 = *(unsigned __int8 *)a2;
    a2 = (uint64_t *)((char *)a2 + 1);
    a1 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v6) ^ a1, 53);
  }
  v7 = 0x165667B19E3779F9
     * ((0xC2B2AE3D27D4EB4FLL * (a1 ^ (a1 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (a1 ^ (a1 >> 33))) >> 29));
  return v7 ^ HIDWORD(v7);
}

uint64_t ZSTD_updateTree(uint64_t result, int a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  int v8;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = a2 - v4;
  v6 = *(_DWORD *)(result + 44);
  if (v6 < a2 - (int)v4)
  {
    v8 = *(_DWORD *)(result + 256);
    do
    {
      result = ZSTD_insertBt1(v3, (_QWORD *)(v4 + v6), a3, v5, v8, 0);
      v6 += result;
    }
    while (v6 < v5);
  }
  *(_DWORD *)(v3 + 44) = v5;
  return result;
}

int64_t ZSTD_compressBlock_btopt(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return ZSTD_compressBlock_opt0(a1, a2, a3, a4, a5, 0);
}

int64_t ZSTD_compressBlock_opt0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned int a6)
{
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned __int8 *v17;
  int v18;
  _DWORD *v19;
  __int128 *v20;
  __int128 v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  int v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  unsigned int v40;
  int *v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  _DWORD *v50;
  unsigned int v51;
  unsigned int v52;
  int *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  int v59;
  int *v60;
  _DWORD *v61;
  int v62;
  int v63;
  _DWORD *v64;
  _DWORD *v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  unint64_t v70;
  _DWORD *v71;
  int v72;
  _DWORD *v73;
  _DWORD *v74;
  int v75;
  unsigned int v76;
  int v77;
  int *v78;
  _DWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  signed int *v83;
  unsigned int v84;
  unsigned int v85;
  signed int v86;
  uint64_t v87;
  int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unint64_t v93;
  signed int v94;
  uint64_t v95;
  _DWORD *v96;
  signed int *v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  int *v106;
  _DWORD *v107;
  unsigned int v108;
  _DWORD *v109;
  unsigned int v110;
  _OWORD *v111;
  __int128 v112;
  BOOL v113;
  unsigned int v114;
  unsigned __int8 *v115;
  unsigned int v116;
  _DWORD *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  _OWORD *v125;
  unsigned __int8 *v126;
  _BYTE *v127;
  uint64_t v128;
  _OWORD *v129;
  unint64_t v130;
  __int128 *v131;
  __int128 v132;
  unsigned __int8 *v133;
  __int128 v134;
  char v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  int v139;
  _DWORD *v140;
  uint64_t v141;
  _DWORD *v143;
  int v144;
  unsigned int v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t (*v149)(void);
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unsigned __int8 *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned __int8 *v160;
  unsigned int v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  v10 = *(_DWORD *)(a1 + 256);
  v11 = v10 - 6;
  v12 = v10 >= 3;
  v13 = v10 - 3;
  if (v12)
    v14 = 3;
  else
    v14 = 0;
  if ((_DWORD)v13)
    v15 = 4;
  else
    v15 = 3;
  v162 = v15;
  if (v11 < 0xFFFFFFFD)
    v13 = v14;
  v149 = *(&off_1E6E2C5D8[4 * a6] + v13);
  v16 = (uint64_t *)(a1 + 128);
  v150 = &a4[a5];
  v151 = a4;
  v17 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 260) >= 0xFFFu)
    v18 = 4095;
  else
    v18 = *(_DWORD *)(a1 + 260);
  v145 = v18;
  v167 = *(_DWORD *)(a1 + 44);
  v19 = *(_DWORD **)(a1 + 168);
  v154 = *(_QWORD *)(a1 + 160);
  v155 = (unint64_t)&a4[a5 - 8];
  v171 = 0;
  v170 = 0;
  v166 = 0;
  v164 = 0u;
  v165 = 0u;
  v163 = 0u;
  v20 = *(__int128 **)(a1 + 272);
  if (v20)
  {
    v21 = v20[1];
    v163 = *v20;
    v164 = v21;
    *(_QWORD *)&v165 = *((_QWORD *)v20 + 4);
  }
  else
  {
    *(_QWORD *)&v165 = 0;
    v163 = 0uLL;
    v164 = 0uLL;
  }
  LODWORD(v166) = 0;
  *((_QWORD *)&v165 + 1) = 0;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t)&v163, 0, a5);
  ZSTD_rescaleFreqs((uint64_t)v16, v151, a5, 0);
  if (v17 == v151)
    v22 = v151 + 1;
  else
    v22 = v151;
  if ((unint64_t)v22 < v155)
  {
    v144 = 0;
    v23 = v151;
    v153 = a2;
    v24 = v154;
    v146 = a3;
    while (1)
    {
      v152 = v23;
      v25 = (_DWORD)v22 - (_DWORD)v23;
      LODWORD(v168) = 0;
      v26 = v24;
      LODWORD(v168) = v149();
      ZSTD_optLdm_processMatchCandidate((uint64_t)&v163, v26, &v168, (_DWORD)v22 - (_DWORD)v151, (_DWORD)v150 - (_DWORD)v22);
      v27 = v168;
      if (!(_DWORD)v168)
      {
        ++v22;
        goto LABEL_152;
      }
      v156 = v22;
      for (i = 0; i != 3; ++i)
        v19[i + 4] = *(_DWORD *)(a3 + i * 4);
      v19[2] = 0;
      v19[3] = v25;
      v29 = ZSTD_litLengthPrice(v25, (uint64_t)v16, 0);
      *v19 = v29;
      v30 = (v27 - 1);
      v31 = *(_DWORD *)(v154 + 8 * v30 + 4);
      v32 = v150 - 32;
      if (v31 > v145)
      {
        v33 = 0;
        v34 = *(_DWORD *)(v154 + 8 * v30);
        goto LABEL_106;
      }
      v35 = v29;
      v36 = ZSTD_litLengthPrice(0, (uint64_t)v16, 0);
      v37 = v162 - 1;
      v38 = v19 + 7;
      do
      {
        *v38 = 0x40000000;
        v38 += 7;
        --v37;
      }
      while (v37);
      v39 = v36 + v35;
      v40 = v162;
      do
      {
        v41 = (int *)(v154 + 8 * v37);
        v42 = v41[1];
        if (v40 <= v42)
        {
          v43 = *v41;
          v44 = __clz(v43 + 1) ^ 0x1F;
          v45 = *(_DWORD *)(a1 + 208);
          v46 = ((_DWORD)v44 << 9) - 9675;
          if (v44 <= 0x13)
            v46 = 53;
          do
          {
            if (v45 == 1)
            {
              v47 = ((_DWORD)v44 << 8) + 4096 + ((__clz(v40 - 2) << 8) ^ 0x1F00);
            }
            else
            {
              v48 = v40 - 3;
              if (v40 - 3 < 0x80)
                v49 = ZSTD_MLcode_ML_Code_0[v48];
              else
                v49 = 67 - __clz(v48);
              v47 = v46
                  + *(_DWORD *)(a1 + 204)
                  + ((__clz(*(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v44) + 1) << 8) ^ 0xFFFFE0FF)
                  + *(_DWORD *)(a1 + 200)
                  + (((_DWORD)v44 + ML_bits_4[v49]) << 8)
                  + ((__clz(*(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v49) + 1) << 8) ^ 0xFFFFE0FF);
            }
            v50 = &v19[7 * v40];
            v50[2] = v40;
            v50[3] = v25;
            *v50 = v39 + v47;
            v50[1] = v43;
            ++v40;
          }
          while (v40 <= v42);
        }
        ++v37;
      }
      while (v37 != v27);
      v51 = v40 - 1;
      if (v40 == 1)
      {
LABEL_103:
        v98 = &v19[7 * v51];
        v34 = v98[1];
        v144 = *v98;
        v31 = v98[2];
        v25 = v98[3];
        v170 = *((_QWORD *)v98 + 2);
        v171 = v98[6];
        v33 = v51 - (v25 + v31);
        if (v51 < v25 + v31)
          v33 = 0;
        v99 = v146;
        if (!v31)
          goto LABEL_160;
LABEL_106:
        v100 = &v19[7 * v33];
        v168 = *((_QWORD *)v100 + 2);
        v169 = v100[6];
        if (v34 >= 3)
        {
          v101 = HIDWORD(v168);
          HIDWORD(v168) = v168;
          v102 = v34 - 2;
          v103 = v146;
          goto LABEL_120;
        }
        if (v25)
          v104 = v34;
        else
          v104 = v34 + 1;
        if (v104 == 3)
        {
          v105 = v168;
          v102 = v168 - 1;
          v103 = v146;
        }
        else
        {
          v103 = v146;
          if (!v104)
          {
            v101 = v169;
            goto LABEL_121;
          }
          v102 = *((_DWORD *)&v168 + v104);
          v105 = v168;
        }
        if (v104 <= 1)
          v106 = &v169;
        else
          v106 = (int *)&v168 + 1;
        v101 = *v106;
        HIDWORD(v168) = v105;
LABEL_120:
        LODWORD(v168) = v102;
LABEL_121:
        *(_QWORD *)v103 = v168;
        *(_DWORD *)(v103 + 8) = v101;
        goto LABEL_122;
      }
      v52 = 1;
      while (1)
      {
        v53 = &v19[7 * v52 - 7];
        if (v53[2])
          v54 = 1;
        else
          v54 = v19[7 * v52 - 4] + 1;
        v157 = v52 - 1;
        v160 = &v22[v52];
        if (*(_DWORD *)(a1 + 224) == 2)
        {
          v55 = 2048;
        }
        else if (*(_DWORD *)(a1 + 208) == 1)
        {
          v55 = 1536;
        }
        else
        {
          v55 = *(_DWORD *)(a1 + 192)
              + ((__clz(*(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v22[v52 - 1]) + 1) << 8) ^ 0xFFFFE0FF)
              + 1;
        }
        v56 = v52;
        v57 = *v53;
        v58 = v55 + ZSTD_litLengthPrice(v54, (uint64_t)v16, 0) + v57;
        v59 = ZSTD_litLengthPrice(v54 - 1, (uint64_t)v16, 0);
        v60 = &v19[7 * v56];
        v63 = *v60;
        v61 = v60 + 2;
        v62 = v63;
        if (v58 - v59 <= v63)
        {
          v71 = &v19[7 * v56];
          v71[1] = 0;
          v71[2] = 0;
          v71[3] = v54;
          *v71 = v58 - v59;
          v62 = v58 - v59;
          v32 = v150 - 32;
LABEL_55:
          v72 = 0;
          v73 = &v19[7 * v56];
          v70 = (unint64_t)v160;
          v74 = &v19[7 * v157];
          *((_QWORD *)v73 + 2) = *((_QWORD *)v74 + 2);
          v73[6] = v74[6];
          v75 = 1;
          a2 = v153;
          goto LABEL_70;
        }
        v32 = v150 - 32;
        if (!*v61)
          goto LABEL_55;
        v64 = &v19[7 * (v56 - *v61)];
        v65 = &v19[7 * v56];
        v66 = v65[1];
        v67 = v65[3];
        v168 = *((_QWORD *)v64 + 2);
        v169 = v64[6];
        if (v66 >= 3)
        {
          v68 = HIDWORD(v168);
          HIDWORD(v168) = v168;
          v69 = v66 - 2;
          a2 = v153;
          v70 = (unint64_t)v160;
LABEL_68:
          LODWORD(v168) = v69;
          goto LABEL_69;
        }
        if (v67)
          v76 = v66;
        else
          v76 = v66 + 1;
        if (v76 == 3)
        {
          v77 = v168;
          v69 = v168 - 1;
          a2 = v153;
          v70 = (unint64_t)v160;
LABEL_64:
          if (v76 <= 1)
            v78 = &v169;
          else
            v78 = (int *)&v168 + 1;
          v68 = *v78;
          HIDWORD(v168) = v77;
          goto LABEL_68;
        }
        a2 = v153;
        v70 = (unint64_t)v160;
        if (v76)
        {
          v69 = *((_DWORD *)&v168 + v76);
          v77 = v168;
          goto LABEL_64;
        }
        v68 = v169;
LABEL_69:
        v75 = 0;
        v79 = &v19[7 * v56];
        *((_QWORD *)v79 + 2) = v168;
        v79[6] = v68;
        v72 = 1;
LABEL_70:
        if (v70 > v155)
        {
          v52 = v56 + 1;
          goto LABEL_100;
        }
        if (v56 == v51)
        {
          v22 = v156;
          goto LABEL_103;
        }
        v52 = v56 + 1;
        if (v19[7 * v56 + 7] > v62 + 128)
          break;
LABEL_100:
        v22 = v156;
        if (v52 > v51)
          goto LABEL_103;
      }
      v148 = v62;
      v143 = v61;
      v158 = v72;
      if (v75)
        v25 = v19[7 * v56 + 3];
      else
        v25 = 0;
      v147 = ZSTD_litLengthPrice(0, (uint64_t)v16, 0);
      LODWORD(v168) = 0;
      LODWORD(v168) = ((uint64_t (*)(uint64_t, uint64_t, int *, unint64_t, unsigned __int8 *, _DWORD *, _QWORD, uint64_t))v149)(v154, a1, &v167, v70, v150, &v19[7 * v56 + 4], v158, v162);
      ZSTD_optLdm_processMatchCandidate((uint64_t)&v163, v154, &v168, v70 - (_DWORD)v151, (_DWORD)v150 - v70);
      v80 = v168;
      if (!(_DWORD)v168)
      {
LABEL_99:
        v32 = v150 - 32;
        v52 = v56 + 1;
        goto LABEL_100;
      }
      v81 = (v168 - 1);
      v31 = *(_DWORD *)(v154 + 8 * v81 + 4);
      if (v31 <= v145 && v31 + v56 <= 0xFFF)
      {
        v82 = 0;
        do
        {
          v83 = (signed int *)(v154 + 8 * v82);
          v84 = v162;
          if (v82)
            v84 = *(v83 - 1) + 1;
          v85 = v83[1];
          if (v85 >= v84)
          {
            v86 = *v83;
            v87 = __clz(v86 + 1) ^ 0x1F;
            v88 = *(_DWORD *)(a1 + 208);
            v89 = ((_DWORD)v87 << 9) - 9675;
            if (v87 <= 0x13)
              v89 = 53;
            do
            {
              if (v88 == 1)
              {
                v90 = ((_DWORD)v87 << 8) + 4096 + ((__clz(v85 - 2) << 8) ^ 0x1F00);
              }
              else
              {
                v91 = v85 - 3;
                if (v85 - 3 < 0x80)
                  v92 = ZSTD_MLcode_ML_Code_0[v91];
                else
                  v92 = 67 - __clz(v91);
                v90 = v89
                    + *(_DWORD *)(a1 + 204)
                    + ((__clz(*(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v87) + 1) << 8) ^ 0xFFFFE0FF)
                    + *(_DWORD *)(a1 + 200)
                    + (((_DWORD)v87 + ML_bits_4[v92]) << 8)
                    + ((__clz(*(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v92) + 1) << 8) ^ 0xFFFFE0FF);
              }
              v93 = v85 + v56;
              v94 = v147 + v148 + v90;
              if (v93 <= v51)
              {
                if (v94 >= v19[7 * v93])
                  break;
              }
              else
              {
                v95 = 0;
                v96 = &v19[7 * v51 + 7];
                do
                {
                  *v96 = 0x40000000;
                  v96 += 7;
                  ++v95;
                }
                while ((unint64_t)v51 + v95 < v93);
                v51 += v95;
              }
              v97 = &v19[7 * v93];
              v97[2] = v85;
              v97[3] = v25;
              *v97 = v94;
              v97[1] = v86;
              --v85;
            }
            while (v85 >= v84);
          }
          ++v82;
        }
        while (v82 != v80);
        goto LABEL_99;
      }
      if (*v143)
        v139 = 0;
      else
        v139 = v19[7 * v56 + 3];
      v99 = v146;
      v34 = *(_DWORD *)(v154 + 8 * v81);
      v33 = v56 - v139;
      if (v33 > 0x1000)
        v33 = 0;
      v22 = v156;
      v32 = v150 - 32;
      if (v31)
        goto LABEL_106;
LABEL_160:
      v140 = &v19[7 * v33];
      v141 = *((_QWORD *)v140 + 2);
      *(_DWORD *)(v99 + 8) = v140[6];
      *(_QWORD *)v99 = v141;
LABEL_122:
      v159 = v33 + 1;
      v107 = &v19[7 * v33 + 7];
      *v107 = v144;
      v107[1] = v34;
      v107[2] = v31;
      v107[3] = v25;
      *((_QWORD *)v107 + 2) = v170;
      v107[6] = v171;
      v108 = v33;
      if (!v33)
      {
        v114 = 1;
LABEL_129:
        v115 = v152;
        while (2)
        {
          v116 = v114;
          v117 = &v19[7 * v114];
          v119 = v117[2];
          v118 = v117[3];
          if ((_DWORD)v119)
          {
            v161 = v116;
            v120 = v19[7 * v116 + 1];
            v121 = a2;
            v122 = v32;
            v123 = v115;
            ZSTD_updateStats(v16, v118, v115, v120, v119);
            v124 = v123;
            v32 = v122;
            a2 = v121;
            v125 = *(_OWORD **)(v121 + 24);
            if (&v124[v118] > v32)
            {
              if (v124 <= v32)
              {
                v127 = (char *)v125 + v32 - v124;
                v133 = v124;
                v116 = v161;
                do
                {
                  v134 = *(_OWORD *)v133;
                  v133 += 16;
                  *v125++ = v134;
                }
                while (v125 < (_OWORD *)v127);
                v126 = v32;
              }
              else
              {
                v126 = v124;
                v127 = *(_BYTE **)(v121 + 24);
                v116 = v161;
              }
              while (v126 < &v124[v118])
              {
                v135 = *v126++;
                *v127++ = v135;
              }
              goto LABEL_144;
            }
            *v125 = *(_OWORD *)v124;
            v128 = *(_QWORD *)(v121 + 24);
            if (v118 <= 0x10)
            {
              *(_QWORD *)(v121 + 24) = v128 + v118;
              v136 = *(_QWORD *)(v121 + 8);
              v116 = v161;
            }
            else
            {
              v129 = (_OWORD *)(v128 + 16);
              v130 = v128 + v118;
              v131 = (__int128 *)(v124 + 16);
              v116 = v161;
              do
              {
                v132 = *v131++;
                *v129++ = v132;
              }
              while ((unint64_t)v129 < v130);
LABEL_144:
              *(_QWORD *)(v121 + 24) += v118;
              v136 = *(_QWORD *)(v121 + 8);
              if (v118 >= 0x10000)
              {
                v137 = (unint64_t)(v136 - *(_QWORD *)v121) >> 3;
                *(_DWORD *)(v121 + 72) = 1;
                *(_DWORD *)(v121 + 76) = v137;
              }
            }
            *(_WORD *)(v136 + 4) = v118;
            *(_DWORD *)v136 = v120 + 1;
            if ((unint64_t)(v119 - 3) >= 0x10000)
            {
              v138 = (unint64_t)(v136 - *(_QWORD *)v121) >> 3;
              *(_DWORD *)(v121 + 72) = 2;
              *(_DWORD *)(v121 + 76) = v138;
            }
            *(_WORD *)(v136 + 6) = v119 - 3;
            *(_QWORD *)(v121 + 8) = v136 + 8;
            v115 = &v124[(v119 + v118)];
            v22 = v115;
          }
          else
          {
            v22 = &v115[v118];
          }
          v114 = v116 + 1;
          if (v116 + 1 > v159)
            goto LABEL_151;
          continue;
        }
      }
      do
      {
        v109 = &v19[7 * v108];
        v110 = v109[3] + v109[2];
        v111 = &v19[7 * v33];
        v112 = *(_OWORD *)v109;
        *(_OWORD *)((char *)v111 + 12) = *(_OWORD *)(v109 + 3);
        *v111 = v112;
        --v33;
        v12 = v108 >= v110;
        v108 -= v110;
        v113 = v108 != 0 && v12;
        if (!v12)
          v108 = 0;
      }
      while (v113);
      v114 = v33 + 1;
      if (v114 <= v159)
        goto LABEL_129;
      v115 = v152;
LABEL_151:
      v152 = v115;
      ZSTD_setBasePrices((int32x2_t *)v16, 0);
      a3 = v146;
LABEL_152:
      v24 = v154;
      v23 = v152;
      if ((unint64_t)v22 >= v155)
      {
        v151 = v152;
        return v150 - v151;
      }
    }
  }
  return v150 - v151;
}

int64_t ZSTD_compressBlock_btultra(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return ZSTD_compressBlock_opt2(a1, a2, a3, a4, a5, 0);
}

int64_t ZSTD_compressBlock_opt2(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned int a6)
{
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned __int8 *v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t i;
  int v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int8 *v33;
  int v34;
  int v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  unsigned int v39;
  int *v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  _DWORD *v55;
  unsigned int v56;
  unsigned int v57;
  int *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int *v67;
  _DWORD *v68;
  int v69;
  int v70;
  uint64_t v71;
  _DWORD *v72;
  _DWORD *v73;
  unsigned int v74;
  int v75;
  int v76;
  unsigned int v77;
  unint64_t v78;
  _DWORD *v79;
  int v80;
  _DWORD *v81;
  _DWORD *v82;
  int v83;
  unsigned int v84;
  int v85;
  int *v86;
  _DWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int *v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  _DWORD *v109;
  int *v110;
  _DWORD *v111;
  uint64_t v112;
  _DWORD *v113;
  int v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  int v118;
  int *v119;
  _DWORD *v120;
  unsigned int v121;
  _DWORD *v122;
  unsigned int v123;
  _OWORD *v124;
  __int128 v125;
  BOOL v126;
  unsigned int v127;
  int v128;
  _DWORD *v129;
  uint64_t v130;
  unsigned int v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unsigned __int8 *v136;
  _OWORD *v137;
  unsigned __int8 *v138;
  _BYTE *v139;
  uint64_t v140;
  _OWORD *v141;
  unint64_t v142;
  __int128 *v143;
  __int128 v144;
  unsigned __int8 *v145;
  __int128 v146;
  char v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v152;
  int v153;
  uint64_t v154;
  _DWORD *v155;
  unsigned int v156;
  int v157;
  uint64_t (*v158)(uint64_t, uint64_t, int *, unsigned __int8 *, unsigned __int8 *, uint64_t, BOOL, uint64_t);
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  uint64_t v161;
  unint64_t v162;
  unsigned __int8 *v163;
  uint64_t v164;
  unsigned int v165;
  int v166;
  unsigned int v167;
  unsigned __int8 *v168;
  unint64_t v169;
  unsigned __int8 *v171;
  unsigned int v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;

  v182 = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)(a1 + 256);
  v10 = v9 - 6;
  v11 = v9 >= 3;
  v12 = v9 - 3;
  if (v11)
    v13 = 3;
  else
    v13 = 0;
  if ((_DWORD)v12)
    v14 = 4;
  else
    v14 = 3;
  if (v10 < 0xFFFFFFFD)
    v12 = v13;
  v158 = (uint64_t (*)(uint64_t, uint64_t, int *, unsigned __int8 *, unsigned __int8 *, uint64_t, BOOL, uint64_t))*(&off_1E6E2C5D8[4 * a6] + v12);
  v15 = (uint64_t *)(a1 + 128);
  v159 = &a4[a5];
  v160 = a4;
  v162 = (unint64_t)&a4[a5 - 8];
  v16 = (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + *(unsigned int *)(a1 + 24));
  if (*(_DWORD *)(a1 + 260) >= 0xFFFu)
    v17 = 4095;
  else
    v17 = *(_DWORD *)(a1 + 260);
  v156 = v17;
  v177 = *(_DWORD *)(a1 + 44);
  v19 = *(_QWORD *)(a1 + 160);
  v18 = *(_DWORD **)(a1 + 168);
  v181 = 0;
  v180 = 0;
  v176 = 0;
  v174 = 0u;
  v175 = 0u;
  v173 = 0u;
  v20 = *(__int128 **)(a1 + 272);
  if (v20)
  {
    v21 = v20[1];
    v173 = *v20;
    v174 = v21;
    *(_QWORD *)&v175 = *((_QWORD *)v20 + 4);
  }
  else
  {
    *(_QWORD *)&v175 = 0;
    v173 = 0uLL;
    v174 = 0uLL;
  }
  LODWORD(v176) = 0;
  *((_QWORD *)&v175 + 1) = 0;
  ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t)&v173, 0, a5);
  ZSTD_rescaleFreqs((uint64_t)v15, v160, a5, 2);
  if (v16 == v160)
    v22 = v160 + 1;
  else
    v22 = v160;
  if ((unint64_t)v22 < v162)
  {
    v153 = 0;
    v169 = (unint64_t)(v159 - 32);
    v23 = v14;
    v152 = v14 - 1;
    v24 = v160;
    v161 = v14;
    v164 = v19;
    v154 = a3;
    while (1)
    {
      v171 = v24;
      v25 = (_DWORD)v22 - (_DWORD)v24;
      LODWORD(v178) = 0;
      LODWORD(v178) = v158(v19, a1, &v177, v22, v159, a3, (_DWORD)v22 == (_DWORD)v24, v23);
      ZSTD_optLdm_processMatchCandidate((uint64_t)&v173, v19, &v178, (_DWORD)v22 - (_DWORD)v160, (_DWORD)v159 - (_DWORD)v22);
      v26 = v178;
      if (!(_DWORD)v178)
      {
        ++v22;
        v23 = v161;
        goto LABEL_156;
      }
      v163 = v22;
      for (i = 0; i != 3; ++i)
        v18[i + 4] = *(_DWORD *)(a3 + i * 4);
      v18[2] = 0;
      v18[3] = v25;
      v28 = ZSTD_litLengthPrice(v25, (uint64_t)v15, 2);
      *v18 = v28;
      v29 = (v26 - 1);
      v30 = *(_DWORD *)(v19 + 8 * v29 + 4);
      if (v30 > v156)
      {
        v31 = 0;
        v32 = *(_DWORD *)(v19 + 8 * v29);
        v33 = v171;
        goto LABEL_104;
      }
      v34 = v28;
      v35 = ZSTD_litLengthPrice(0, (uint64_t)v15, 2);
      v36 = v152;
      v37 = v18 + 7;
      do
      {
        *v37 = 0x40000000;
        v37 += 7;
        --v36;
      }
      while (v36);
      v38 = v35 + v34;
      v39 = v161;
      do
      {
        v40 = (int *)(v19 + 8 * v36);
        v41 = v40[1];
        if (v39 <= v41)
        {
          v42 = *v40;
          v43 = __clz(v42 + 1) ^ 0x1F;
          v44 = *(_DWORD *)(a1 + 208);
          v45 = (v39 << 8) - 512;
          do
          {
            if (v44 == 1)
            {
              v46 = __clz(v39 - 2) ^ 0x1F;
              v47 = (v45 >> v46) + ((v46 + (_DWORD)v43) << 8) + 4096;
            }
            else
            {
              v48 = v39 - 3;
              if (v39 - 3 < 0x80)
                v49 = ZSTD_MLcode_ML_Code_0[v48];
              else
                v49 = 67 - __clz(v48);
              v50 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v43) + 1;
              v51 = __clz(v50) ^ 0x1F;
              v52 = ML_bits_4[v49];
              v53 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v49) + 1;
              v54 = __clz(v53) ^ 0x1F;
              v47 = *(_DWORD *)(a1 + 204)
                  + *(_DWORD *)(a1 + 200)
                  - (v50 << 8 >> v51)
                  - (v53 << 8 >> v54)
                  + (((_DWORD)v43 + v52 - v51 - v54) << 8)
                  + 51;
            }
            v55 = &v18[7 * v39];
            v55[2] = v39;
            v55[3] = v25;
            *v55 = v38 + v47;
            v55[1] = v42;
            ++v39;
            v45 += 256;
          }
          while (v39 <= v41);
        }
        ++v36;
      }
      while (v36 != v26);
      v56 = v39 - 1;
      if (v39 == 1)
      {
        v33 = v171;
LABEL_100:
        v22 = v163;
LABEL_101:
        v111 = &v18[7 * v56];
        v32 = v111[1];
        v153 = *v111;
        v30 = v111[2];
        v25 = v111[3];
        v180 = *((_QWORD *)v111 + 2);
        v181 = v111[6];
        v31 = v56 - (v25 + v30);
        if (v56 < v25 + v30)
          v31 = 0;
        v112 = v154;
        if (!v30)
          goto LABEL_132;
LABEL_104:
        v113 = &v18[7 * v31];
        v178 = *((_QWORD *)v113 + 2);
        v179 = v113[6];
        if (v32 >= 3)
        {
          v114 = HIDWORD(v178);
          HIDWORD(v178) = v178;
          v115 = v32 - 2;
          v116 = v154;
          goto LABEL_118;
        }
        if (v25)
          v117 = v32;
        else
          v117 = v32 + 1;
        if (v117 == 3)
        {
          v118 = v178;
          v115 = v178 - 1;
          v116 = v154;
        }
        else
        {
          v116 = v154;
          if (!v117)
          {
            v114 = v179;
            goto LABEL_119;
          }
          v115 = *((_DWORD *)&v178 + v117);
          v118 = v178;
        }
        if (v117 <= 1)
          v119 = &v179;
        else
          v119 = (int *)&v178 + 1;
        v114 = *v119;
        HIDWORD(v178) = v118;
LABEL_118:
        LODWORD(v178) = v115;
LABEL_119:
        *(_QWORD *)v116 = v178;
        *(_DWORD *)(v116 + 8) = v114;
        goto LABEL_120;
      }
      v57 = 1;
      while (1)
      {
        v58 = &v18[7 * v57 - 7];
        if (v58[2])
          v59 = 1;
        else
          v59 = v18[7 * v57 - 4] + 1;
        v168 = &v22[v57];
        v165 = v57 - 1;
        if (*(_DWORD *)(a1 + 224) == 2)
        {
          v60 = 2048;
        }
        else if (*(_DWORD *)(a1 + 208) == 1)
        {
          v60 = 1536;
        }
        else
        {
          v61 = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v22[v57 - 1]) + 1;
          v62 = __clz(v61);
          v60 = *(_DWORD *)(a1 + 192) - ((v61 << 8 >> (v62 ^ 0x1F)) + ((v62 ^ 0x1F) << 8));
        }
        v63 = v57;
        v64 = *v58;
        v65 = v60 + ZSTD_litLengthPrice(v59, (uint64_t)v15, 2) + v64;
        v66 = ZSTD_litLengthPrice(v59 - 1, (uint64_t)v15, 2);
        v67 = &v18[7 * v63];
        v70 = *v67;
        v68 = v67 + 2;
        v69 = v70;
        if (v65 - v66 <= v70)
        {
          v79 = &v18[7 * v63];
          v79[1] = 0;
          v79[2] = 0;
          v79[3] = v59;
          *v79 = v65 - v66;
          v69 = v65 - v66;
          v71 = v164;
LABEL_54:
          v80 = 0;
          v81 = &v18[7 * v63];
          v82 = &v18[7 * v165];
          *((_QWORD *)v81 + 2) = *((_QWORD *)v82 + 2);
          v81[6] = v82[6];
          v83 = 1;
          v33 = v171;
          v78 = (unint64_t)v168;
          goto LABEL_69;
        }
        v71 = v164;
        if (!*v68)
          goto LABEL_54;
        v72 = &v18[7 * (v63 - *v68)];
        v73 = &v18[7 * v63];
        v74 = v73[1];
        v75 = v73[3];
        v178 = *((_QWORD *)v72 + 2);
        v179 = v72[6];
        if (v74 >= 3)
        {
          v76 = HIDWORD(v178);
          HIDWORD(v178) = v178;
          v77 = v74 - 2;
          v33 = v171;
          v78 = (unint64_t)v168;
LABEL_67:
          LODWORD(v178) = v77;
          goto LABEL_68;
        }
        if (v75)
          v84 = v74;
        else
          v84 = v74 + 1;
        if (v84 == 3)
        {
          v85 = v178;
          v77 = v178 - 1;
          v33 = v171;
          v78 = (unint64_t)v168;
LABEL_63:
          if (v84 <= 1)
            v86 = &v179;
          else
            v86 = (int *)&v178 + 1;
          v76 = *v86;
          HIDWORD(v178) = v85;
          goto LABEL_67;
        }
        v33 = v171;
        v78 = (unint64_t)v168;
        if (v84)
        {
          v77 = *((_DWORD *)&v178 + v84);
          v85 = v178;
          goto LABEL_63;
        }
        v76 = v179;
LABEL_68:
        v83 = 0;
        v87 = &v18[7 * v63];
        *((_QWORD *)v87 + 2) = v178;
        v87[6] = v76;
        v80 = 1;
LABEL_69:
        if (v78 <= v162)
          break;
LABEL_97:
        v57 = v63 + 1;
        v22 = v163;
        if (v63 + 1 > v56)
          goto LABEL_101;
      }
      if (v63 == v56)
        goto LABEL_100;
      v155 = v68;
      v166 = v69;
      v167 = v80;
      if (v83)
        v25 = v18[7 * v63 + 3];
      else
        v25 = 0;
      v157 = ZSTD_litLengthPrice(0, (uint64_t)v15, 2);
      LODWORD(v178) = 0;
      LODWORD(v178) = v158(v71, a1, &v177, (unsigned __int8 *)v78, v159, (uint64_t)&v18[7 * v63 + 4], v167, v161);
      ZSTD_optLdm_processMatchCandidate((uint64_t)&v173, v164, &v178, v78 - (_DWORD)v160, (_DWORD)v159 - v78);
      v88 = v178;
      if (!(_DWORD)v178)
      {
LABEL_96:
        v33 = v171;
        goto LABEL_97;
      }
      v89 = (v178 - 1);
      v30 = *(_DWORD *)(v164 + 8 * v89 + 4);
      if (v30 <= v156 && v30 + v63 <= 0xFFF)
      {
        v90 = 0;
        while (1)
        {
          v91 = (int *)(v164 + 8 * v90);
          v92 = v161;
          if (v90)
            v92 = *(v91 - 1) + 1;
          v93 = v91[1];
          if (v93 >= v92)
            break;
LABEL_95:
          if (++v90 == v88)
            goto LABEL_96;
        }
        v94 = *v91;
        v95 = __clz(v94 + 1) ^ 0x1F;
        v96 = *(_DWORD *)(a1 + 208);
        while (2)
        {
          if (v96 == 1)
          {
            v97 = __clz(v93 - 2) ^ 0x1F;
            v98 = ((v93 - 2) << 8 >> v97) + ((v97 + (_DWORD)v95) << 8) + 4096;
          }
          else
          {
            v99 = v93 - 3;
            if (v93 - 3 < 0x80)
              v100 = ZSTD_MLcode_ML_Code_0[v99];
            else
              v100 = 67 - __clz(v99);
            v101 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v95) + 1;
            v102 = __clz(v101);
            v103 = ML_bits_4[v100];
            v104 = *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v100) + 1;
            v105 = __clz(v104);
            v98 = *(_DWORD *)(a1 + 204)
                + *(_DWORD *)(a1 + 200)
                - (v101 << 8 >> (v102 ^ 0x1F))
                - (v104 << 8 >> (v105 ^ 0x1F))
                + (((_DWORD)v95 + v103 - (v102 ^ 0x1F) - (v105 ^ 0x1F)) << 8)
                + 51;
          }
          v106 = v93 + v63;
          v107 = v157 + v166 + v98;
          if (v106 <= v56)
          {
            if (v107 < v18[7 * v106])
              goto LABEL_93;
          }
          else
          {
            v108 = 0;
            v109 = &v18[7 * v56 + 7];
            do
            {
              *v109 = 0x40000000;
              v109 += 7;
              ++v108;
            }
            while ((unint64_t)v56 + v108 < v106);
            v56 += v108;
LABEL_93:
            v110 = &v18[7 * v106];
            v110[2] = v93;
            v110[3] = v25;
            *v110 = v107;
            v110[1] = v94;
          }
          if (--v93 < v92)
            goto LABEL_95;
          continue;
        }
      }
      if (*v155)
        v128 = 0;
      else
        v128 = v18[7 * v63 + 3];
      v112 = v154;
      v33 = v171;
      v32 = *(_DWORD *)(v164 + 8 * v89);
      v31 = v63 - v128;
      if (v31 > 0x1000)
        v31 = 0;
      v22 = v163;
      if (v30)
        goto LABEL_104;
LABEL_132:
      v129 = &v18[7 * v31];
      v130 = *((_QWORD *)v129 + 2);
      *(_DWORD *)(v112 + 8) = v129[6];
      *(_QWORD *)v112 = v130;
LABEL_120:
      v172 = v31 + 1;
      v120 = &v18[7 * v31 + 7];
      *v120 = v153;
      v120[1] = v32;
      v120[2] = v30;
      v120[3] = v25;
      *((_QWORD *)v120 + 2) = v180;
      v120[6] = v181;
      v121 = v31;
      if (v31)
      {
        do
        {
          v122 = &v18[7 * v121];
          v123 = v122[3] + v122[2];
          v124 = &v18[7 * v31];
          v125 = *(_OWORD *)v122;
          *(_OWORD *)((char *)v124 + 12) = *(_OWORD *)(v122 + 3);
          *v124 = v125;
          --v31;
          v11 = v121 >= v123;
          v121 -= v123;
          v126 = v121 != 0 && v11;
          if (!v11)
            v121 = 0;
        }
        while (v126);
        v127 = v31 + 1;
        goto LABEL_133;
      }
      v127 = 1;
      while (2)
      {
        v131 = v127;
        v132 = &v18[7 * v127];
        v134 = v132[2];
        v133 = v132[3];
        if ((_DWORD)v134)
        {
          v135 = v18[7 * v131 + 1];
          v136 = v33;
          ZSTD_updateStats(v15, v133, v33, v135, v134);
          v137 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)&v136[v133] > v169)
          {
            if ((unint64_t)v136 <= v169)
            {
              v139 = (char *)v137 + v169 - (_QWORD)v136;
              v145 = v136;
              do
              {
                v146 = *(_OWORD *)v145;
                v145 += 16;
                *v137++ = v146;
              }
              while (v137 < (_OWORD *)v139);
              v138 = v159 - 32;
            }
            else
            {
              v138 = v136;
              v139 = *(_BYTE **)(a2 + 24);
            }
            while (v138 < &v136[v133])
            {
              v147 = *v138++;
              *v139++ = v147;
            }
            goto LABEL_148;
          }
          *v137 = *(_OWORD *)v136;
          v140 = *(_QWORD *)(a2 + 24);
          if (v133 <= 0x10)
          {
            *(_QWORD *)(a2 + 24) = v140 + v133;
            v148 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            v141 = (_OWORD *)(v140 + 16);
            v142 = v140 + v133;
            v143 = (__int128 *)(v136 + 16);
            do
            {
              v144 = *v143++;
              *v141++ = v144;
            }
            while ((unint64_t)v141 < v142);
LABEL_148:
            *(_QWORD *)(a2 + 24) += v133;
            v148 = *(_QWORD *)(a2 + 8);
            if (v133 >= 0x10000)
            {
              v149 = (unint64_t)(v148 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v149;
            }
          }
          *(_WORD *)(v148 + 4) = v133;
          *(_DWORD *)v148 = v135 + 1;
          if ((unint64_t)(v134 - 3) >= 0x10000)
          {
            v150 = (unint64_t)(v148 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v150;
          }
          *(_WORD *)(v148 + 6) = v134 - 3;
          *(_QWORD *)(a2 + 8) = v148 + 8;
          v33 = &v136[(v134 + v133)];
          v22 = v33;
        }
        else
        {
          v22 = &v33[v133];
        }
        v127 = v131 + 1;
LABEL_133:
        if (v127 <= v172)
          continue;
        break;
      }
      v171 = v33;
      ZSTD_setBasePrices((int32x2_t *)v15, 2);
      a3 = v154;
      v23 = v161;
      v19 = v164;
LABEL_156:
      v24 = v171;
      if ((unint64_t)v22 >= v162)
      {
        v160 = v171;
        return v159 - v160;
      }
    }
  }
  return v159 - v160;
}

int64_t ZSTD_compressBlock_btultra2(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  int v10;
  int v11;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 180) && a2[1] == *a2)
  {
    v10 = *(_DWORD *)(a1 + 24);
    if (v10 == *(_DWORD *)(a1 + 28) && a5 >= 0x401 && v10 == (_DWORD)a4 - *(_DWORD *)(a1 + 8))
    {
      v13 = *(_QWORD *)a3;
      v14 = *(_DWORD *)(a3 + 8);
      ZSTD_compressBlock_opt2(a1, (uint64_t)a2, (uint64_t)&v13, a4, a5, 0);
      ZSTD_resetSeqStore((uint64_t)a2);
      *(_QWORD *)(a1 + 8) -= a5;
      v11 = *(_DWORD *)(a1 + 24) + a5;
      *(_DWORD *)(a1 + 24) = v11;
      *(_DWORD *)(a1 + 28) = v11;
      *(_DWORD *)(a1 + 44) = v11;
    }
  }
  return ZSTD_compressBlock_opt2(a1, (uint64_t)a2, a3, a4, a5, 0);
}

int64_t ZSTD_compressBlock_btopt_dictMatchState(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return ZSTD_compressBlock_opt0(a1, a2, a3, a4, a5, 2u);
}

int64_t ZSTD_compressBlock_btultra_dictMatchState(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return ZSTD_compressBlock_opt2(a1, a2, a3, a4, a5, 2u);
}

int64_t ZSTD_compressBlock_btopt_extDict(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return ZSTD_compressBlock_opt0(a1, a2, a3, a4, a5, 1u);
}

int64_t ZSTD_compressBlock_btultra_extDict(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, unint64_t a5)
{
  return ZSTD_compressBlock_opt2(a1, a2, a3, a4, a5, 1u);
}

uint64_t ZSTD_insertBt1(uint64_t a1, _QWORD *a2, unint64_t a3, int a4, int a5, int a6)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  _QWORD *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  int v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  _DWORD *v51;
  int v52;
  unsigned int *v53;
  int v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  char *v69;
  unint64_t v70;
  unsigned int v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  _DWORD v81[3];

  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_DWORD *)(a1 + 248);
  switch(a5)
  {
    case 5:
      v9 = *a2;
      v10 = -1157627904;
      goto LABEL_7;
    case 6:
      v9 = *a2;
      v10 = -1080360960;
      goto LABEL_7;
    case 7:
      v9 = *a2;
      v10 = -1079680256;
      goto LABEL_7;
    case 8:
      v9 = *a2;
      v10 = -1213897629;
LABEL_7:
      v11 = (v9 * (v10 | 0xCF1BBCDC00000000)) >> -(char)v8;
      break;
    default:
      v11 = (-1640531535 * *(_DWORD *)a2) >> -(char)v8;
      break;
  }
  v12 = *(_QWORD *)(a1 + 112);
  v13 = *(_DWORD *)(a1 + 240);
  v14 = -1 << (*(_DWORD *)(a1 + 244) - 1);
  v15 = ~v14;
  v16 = *(_DWORD *)(v7 + 4 * v11);
  v18 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 16);
  v19 = (_DWORD)a2 - v18;
  if ((int)a2 - (int)v18 >= v15)
    v20 = (_DWORD)a2 - v18 + v14 + 1;
  else
    v20 = 0;
  v21 = (_QWORD *)(v12 + 8 * (v19 & ~v14));
  v81[0] = 0;
  v22 = 1 << v13;
  v24 = *(unsigned int *)(a1 + 24);
  v23 = *(_DWORD *)(a1 + 28);
  if (a4 - v23 > v22 && *(_DWORD *)(a1 + 40) == 0)
    v23 = a4 - v22;
  v26 = v19 + 9;
  v27 = *(_DWORD *)(a1 + 252);
  *(_DWORD *)(v7 + 4 * v11) = v19;
  if (v16 < v23)
  {
    v28 = 0;
    *v21 = 0;
    goto LABEL_67;
  }
  v77 = v23;
  v62 = (_DWORD)a2 - v18;
  v29 = 0;
  v30 = 0;
  v69 = (char *)(v17 + v24);
  v70 = v24;
  v68 = (_QWORD *)(v18 + v24);
  v31 = (unsigned int *)v21 + 1;
  v32 = 1 << v27;
  v33 = a3 - 7;
  v65 = a3 - 1;
  v66 = a3 - 3;
  v63 = v18 + 8;
  v64 = a2 + 1;
  v34 = 8;
  v72 = a2;
  v71 = v20;
  v67 = a3 - 7;
  while (1)
  {
    if (v30 >= v29)
      v35 = v29;
    else
      v35 = v30;
    v36 = (char *)a2 + v35;
    v78 = v30;
    v79 = v29;
    v80 = v32;
    if (!a6 || v35 + v16 >= v24)
    {
      v47 = v18 + v16;
      v48 = (_QWORD *)(v47 + v35);
      if (v33 <= (unint64_t)v36)
      {
        v51 = (_DWORD *)((char *)a2 + v35);
      }
      else
      {
        v49 = *(_QWORD *)v36 ^ *v48;
        if (v49)
        {
          v50 = __clz(__rbit64(v49)) >> 3;
LABEL_41:
          v29 = v50 + v35;
          goto LABEL_42;
        }
        v55 = 0;
        v56 = (char *)v64 + v35;
        while (1)
        {
          v57 = &v56[v55];
          if ((unint64_t)&v56[v55] >= v33)
            break;
          v58 = *(_QWORD *)(v63 + v35 + v16 + v55);
          v55 += 8;
          v59 = *(_QWORD *)v57 ^ v58;
          if (v59)
          {
            v50 = v55 + (__clz(__rbit64(v59)) >> 3);
            goto LABEL_41;
          }
        }
        v51 = (_DWORD *)((char *)v64 + v35 + v55);
        v48 = (_QWORD *)(v63 + v35 + v16 + v55);
      }
      if ((unint64_t)v51 < v66 && *(_DWORD *)v48 == *v51)
      {
        ++v51;
        v48 = (_QWORD *)((char *)v48 + 4);
      }
      if ((unint64_t)v51 < v65 && *(unsigned __int16 *)v48 == *(unsigned __int16 *)v51)
      {
        v51 = (_DWORD *)((char *)v51 + 2);
        v48 = (_QWORD *)((char *)v48 + 2);
      }
      if ((unint64_t)v51 < a3 && *(unsigned __int8 *)v48 == *(unsigned __int8 *)v51)
        v51 = (_DWORD *)((char *)v51 + 1);
      v50 = (char *)v51 - v36;
      goto LABEL_41;
    }
    v37 = v17 + v16;
    v38 = (char *)(v37 + v35);
    v73 = v35;
    v74 = v16;
    v39 = a3;
    v76 = v31;
    v40 = v15;
    v41 = v12;
    v42 = v21;
    v75 = v16;
    v43 = v26;
    v44 = v17;
    v45 = v34;
    v46 = ZSTD_count_2segments(v36, v38, a3, v69, v68);
    v31 = v76;
    v34 = v45;
    v17 = v44;
    v24 = v70;
    v26 = v43;
    v16 = v75;
    v15 = v40;
    v21 = v42;
    v20 = v71;
    v12 = v41;
    v33 = v67;
    a2 = v72;
    a3 = v39;
    v29 = v46 + v73;
    v47 = v46 + v73 + v74 >= v70 ? v18 + v74 : v37;
LABEL_42:
    v52 = v16 + v29;
    if (v29 <= v26 - v16)
      v52 = v26;
    if (v29 > v34)
    {
      v26 = v52;
      v34 = v29;
    }
    if ((_QWORD *)((char *)a2 + v29) == (_QWORD *)a3)
      goto LABEL_62;
    v53 = (unsigned int *)(v12 + 8 * (v16 & v15));
    if (*(unsigned __int8 *)(v47 + v29) >= *((unsigned __int8 *)a2 + v29))
      break;
    *(_DWORD *)v21 = v16;
    v54 = v80;
    if (v16 <= v20)
    {
      v21 = v81;
      goto LABEL_62;
    }
    ++v53;
    v30 = v29;
    v21 = v53;
    v29 = v79;
LABEL_52:
    v32 = v54 - 1;
    if (v32)
    {
      v16 = *v53;
      if (*v53 >= v77)
        continue;
    }
    goto LABEL_62;
  }
  *v31 = v16;
  v54 = v80;
  if (v16 > v20)
  {
    v31 = (unsigned int *)(v12 + 8 * (v16 & v15));
    v30 = v78;
    goto LABEL_52;
  }
  v31 = v81;
LABEL_62:
  *v31 = 0;
  *(_DWORD *)v21 = 0;
  v28 = v34 - 384;
  if ((v34 - 384) >= 0xC0)
    v28 = 192;
  if (v34 <= 0x180)
    v28 = 0;
  v19 = v62;
LABEL_67:
  v60 = v26 - v19 - 8;
  if (v28 <= v60)
    return v60;
  else
    return v28;
}

uint64_t ZSTD_opt_getNextMatchAndUpdateSeqStore(uint64_t result, int a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  int *v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;

  v3 = *(_QWORD *)(result + 24);
  if (!v3 || (v4 = *(_QWORD *)(result + 8), v4 >= v3))
  {
    *(_QWORD *)(result + 40) = -1;
    return result;
  }
  v5 = (int *)(*(_QWORD *)result + 12 * v4);
  v6 = v5[1];
  v7 = *(_QWORD *)(result + 16);
  v8 = v6 - v7;
  if (v7 >= v6)
    v9 = 0;
  else
    v9 = v6 - v7;
  if (v9)
    v8 = 0;
  if (v9 >= a3)
  {
    *(_QWORD *)(result + 40) = -1;
  }
  else
  {
    v10 = v8 + v5[2];
    v11 = *v5;
    v12 = v10 + v9 + a2;
    *(_DWORD *)(result + 40) = v9 + a2;
    *(_DWORD *)(result + 44) = v12;
    *(_DWORD *)(result + 48) = v11;
    if (v12 <= a3 + a2)
    {
      v13 = v10 + v9;
      return ZSTD_ldm_skipRawSeqStoreBytes(result, v13);
    }
    *(_DWORD *)(result + 44) = a3 + a2;
  }
  v13 = a3;
  return ZSTD_ldm_skipRawSeqStoreBytes(result, v13);
}

int32x2_t *ZSTD_rescaleFreqs(uint64_t a1, unsigned __int8 *a2, unint64_t a3, int a4)
{
  int v6;
  uint64_t v7;
  int32x2_t v8;
  int32x4_t v9;
  unsigned int v10;
  uint64_t v11;
  int32x4_t v12;
  uint32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  int32x4_t v18;
  unsigned int v19;
  uint64_t v20;
  int32x4_t v21;
  uint32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int32x4_t v33;
  unsigned int v34;
  uint64_t v35;
  int32x4_t v36;
  uint32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  int NbBitsFromCTable;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int32x2_t v66;
  int32x4_t v67;
  uint32x4_t v68;
  int32x4_t v69;
  _OWORD *v70;
  _OWORD *v71;
  unsigned int v73;

  v6 = *(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 80) = 0;
  if (*(_DWORD *)(a1 + 52))
  {
    if (v6 != 2)
    {
      v7 = 0;
      v8 = *(int32x2_t *)a1;
      v9 = 0uLL;
      do
      {
        v9 = vaddq_s32(*(int32x4_t *)(*(_QWORD *)&v8 + v7), v9);
        v7 += 16;
      }
      while (v7 != 1024);
      v10 = vaddvq_s32(v9);
      if (v10 >= 0x2000)
      {
        v11 = 0;
        v12 = 0uLL;
        v13 = (uint32x4_t)vnegq_s32(vdupq_n_s32(__clz(v10 >> 12) ^ 0x1F));
        v14.i64[0] = 0x100000001;
        v14.i64[1] = 0x100000001;
        do
        {
          v15 = vaddq_s32((int32x4_t)vshlq_u32(*(uint32x4_t *)(*(_QWORD *)&v8 + v11), v13), v14);
          *(int32x4_t *)(*(_QWORD *)&v8 + v11) = v15;
          v12 = vaddq_s32(v15, v12);
          v11 += 16;
        }
        while (v11 != 1024);
        v10 = vaddvq_s32(v12);
      }
      *(_DWORD *)(a1 + 48) = v10;
    }
    v16 = 0;
    v17 = *(_QWORD *)(a1 + 8);
    v18 = 0uLL;
    do
    {
      v18 = vaddq_s32(*(int32x4_t *)(v17 + v16), v18);
      v16 += 16;
    }
    while (v16 != 144);
    v19 = vaddvq_s32(v18);
    if (v19 >= 0x1000)
    {
      v20 = 0;
      v21 = 0uLL;
      v22 = (uint32x4_t)vnegq_s32(vdupq_n_s32(__clz(v19 >> 11) ^ 0x1F));
      v23.i64[0] = 0x100000001;
      v23.i64[1] = 0x100000001;
      do
      {
        v24 = vaddq_s32((int32x4_t)vshlq_u32(*(uint32x4_t *)(v17 + v20), v22), v23);
        *(int32x4_t *)(v17 + v20) = v24;
        v21 = vaddq_s32(v24, v21);
        v20 += 16;
      }
      while (v20 != 144);
      v19 = vaddvq_s32(v21);
    }
    v25 = 0;
    v26 = 0;
    *(_DWORD *)(a1 + 52) = v19;
    v27 = *(_QWORD *)(a1 + 16);
    do
    {
      v26 += *(_DWORD *)(v27 + v25);
      v25 += 4;
    }
    while (v25 != 212);
    if (v26 >= 0x1000)
    {
      v28 = 0;
      v29 = __clz(v26 >> 11) ^ 0x1F;
      v26 = 0;
      do
      {
        v30 = (*(_DWORD *)(v27 + v28) >> v29) + 1;
        *(_DWORD *)(v27 + v28) = v30;
        v26 += v30;
        v28 += 4;
      }
      while (v28 != 212);
    }
    v31 = 0;
    *(_DWORD *)(a1 + 56) = v26;
    v32 = *(_QWORD *)(a1 + 24);
    v33 = 0uLL;
    do
    {
      v33 = vaddq_s32(*(int32x4_t *)(v32 + v31), v33);
      v31 += 16;
    }
    while (v31 != 128);
    v34 = vaddvq_s32(v33);
    if (v34 >= 0x1000)
    {
      v35 = 0;
      v36 = 0uLL;
      v37 = (uint32x4_t)vnegq_s32(vdupq_n_s32(__clz(v34 >> 11) ^ 0x1F));
      v38.i64[0] = 0x100000001;
      v38.i64[1] = 0x100000001;
      do
      {
        v39 = vaddq_s32((int32x4_t)vshlq_u32(*(uint32x4_t *)(v32 + v35), v37), v38);
        *(int32x4_t *)(v32 + v35) = v39;
        v36 = vaddq_s32(v39, v36);
        v35 += 16;
      }
      while (v35 != 128);
      v34 = vaddvq_s32(v36);
    }
LABEL_63:
    *(_DWORD *)(a1 + 60) = v34;
    return ZSTD_setBasePrices((int32x2_t *)a1, a4);
  }
  if (a3 <= 0x400)
    *(_DWORD *)(a1 + 80) = 1;
  v40 = *(_QWORD *)(a1 + 88);
  if (*(_DWORD *)(v40 + 2056) != 2)
  {
    if (v6 != 2)
    {
      v73 = 255;
      HIST_count_simple(*(void **)a1, &v73, a2, a3);
      v65 = 0;
      v66 = *(int32x2_t *)a1;
      v67 = 0uLL;
      do
      {
        v68.i64[0] = 0x100000001;
        v68.i64[1] = 0x100000001;
        v69 = (int32x4_t)vsraq_n_u32(v68, *(uint32x4_t *)(*(_QWORD *)&v66 + v65), 8uLL);
        *(int32x4_t *)(*(_QWORD *)&v66 + v65) = v69;
        v67 = vaddq_s32(v69, v67);
        v65 += 16;
      }
      while (v65 != 1024);
      *(_DWORD *)(a1 + 48) = vaddvq_s32(v67);
    }
    v70 = *(_OWORD **)(a1 + 8);
    v70[6] = xmmword_1B862B004;
    v70[7] = unk_1B862B014;
    v70[8] = xmmword_1B862B024;
    v70[2] = xmmword_1B862AFC4;
    v70[3] = unk_1B862AFD4;
    v70[4] = xmmword_1B862AFE4;
    v70[5] = unk_1B862AFF4;
    *v70 = xmmword_1B862AFA4;
    v70[1] = unk_1B862AFB4;
    *(_DWORD *)(a1 + 52) = 40;
    memset_pattern16(*(void **)(a1 + 16), &unk_1B8629270, 0xD4uLL);
    v34 = 53;
    *(_DWORD *)(a1 + 56) = 53;
    v71 = *(_OWORD **)(a1 + 24);
    v71[4] = xmmword_1B862B074;
    v71[5] = unk_1B862B084;
    v71[6] = xmmword_1B862B094;
    v71[7] = unk_1B862B0A4;
    *v71 = xmmword_1B862B034;
    v71[1] = unk_1B862B044;
    v71[2] = xmmword_1B862B054;
    v71[3] = unk_1B862B064;
    goto LABEL_63;
  }
  *(_DWORD *)(a1 + 80) = 0;
  if (v6 != 2)
  {
    v41 = 0;
    *(_DWORD *)(a1 + 48) = 0;
    do
    {
      NbBitsFromCTable = HUF_getNbBitsFromCTable(*(_QWORD *)(a1 + 88), v41);
      v43 = 1 << (11 - NbBitsFromCTable);
      if (!NbBitsFromCTable)
        v43 = 1;
      *(_DWORD *)(*(_QWORD *)a1 + 4 * v41) = v43;
      *(_DWORD *)(a1 + 48) += v43;
      ++v41;
    }
    while (v41 != 256);
    v40 = *(_QWORD *)(a1 + 88);
  }
  v44 = 0;
  v45 = 1 << (*(_WORD *)(v40 + 4288) - 1);
  if (!*(_WORD *)(v40 + 4288))
    v45 = 1;
  *(_DWORD *)(a1 + 52) = 0;
  v46 = *(_QWORD *)(a1 + 8);
  v47 = (int *)(v40 + 4 * v45 + 4296);
  do
  {
    v48 = *v47;
    v47 += 2;
    v49 = 1 << (10 - ((v48 + 0xFFFF) >> 16));
    if ((v48 + 0xFFFF) < 0x10000)
      v50 = 1;
    else
      v50 = v49;
    *(_DWORD *)(v46 + v44) = v50;
    *(_DWORD *)(a1 + 52) += v50;
    v44 += 4;
  }
  while (v44 != 144);
  v51 = 0;
  v52 = 1 << (*(_WORD *)(v40 + 2836) - 1);
  if (!*(_WORD *)(v40 + 2836))
    v52 = 1;
  *(_DWORD *)(a1 + 56) = 0;
  v53 = *(_QWORD *)(a1 + 16);
  v54 = (int *)(v40 + 4 * v52 + 2844);
  do
  {
    v55 = *v54;
    v54 += 2;
    v56 = 1 << (10 - ((v55 + 0xFFFF) >> 16));
    if ((v55 + 0xFFFF) < 0x10000)
      v57 = 1;
    else
      v57 = v56;
    *(_DWORD *)(v53 + v51) = v57;
    *(_DWORD *)(a1 + 56) += v57;
    v51 += 4;
  }
  while (v51 != 212);
  v58 = 0;
  v59 = 1 << (*(_WORD *)(v40 + 2064) - 1);
  if (!*(_WORD *)(v40 + 2064))
    v59 = 1;
  *(_DWORD *)(a1 + 60) = 0;
  v60 = *(_QWORD *)(a1 + 24);
  v61 = (int *)(v40 + 4 * v59 + 2072);
  do
  {
    v62 = *v61;
    v61 += 2;
    v63 = 1 << (10 - ((v62 + 0xFFFF) >> 16));
    if ((v62 + 0xFFFF) < 0x10000)
      v64 = 1;
    else
      v64 = v63;
    *(_DWORD *)(v60 + v58) = v64;
    *(_DWORD *)(a1 + 60) += v64;
    v58 += 4;
  }
  while (v58 != 128);
  return ZSTD_setBasePrices((int32x2_t *)a1, a4);
}

uint64_t ZSTD_optLdm_processMatchCandidate(uint64_t result, uint64_t a2, _DWORD *a3, unsigned int a4, unsigned int a5)
{
  unint64_t v5;
  _DWORD *v6;
  unsigned int v10;
  unsigned int v12;
  uint64_t v15;
  int v16;

  v5 = *(_QWORD *)(result + 24);
  if (v5)
  {
    v6 = (_DWORD *)result;
    if (*(_QWORD *)(result + 8) < v5)
    {
      v10 = *(_DWORD *)(result + 44);
      if (a4 >= v10)
      {
        if (a4 > v10)
          ZSTD_ldm_skipRawSeqStoreBytes(result, a4 - v10);
        result = ZSTD_opt_getNextMatchAndUpdateSeqStore((uint64_t)v6, a4, a5);
        v10 = v6[11];
      }
      v12 = v10 - a4;
      if (v6[10] <= a4 && v10 > a4 && v12 >= 3)
      {
        v15 = *a3;
        if (!(_DWORD)v15 || v15 <= 0xFFF && v12 > *(_DWORD *)(a2 + 8 * (v15 - 1) + 4))
        {
          v16 = v6[12] + 2;
          *(_DWORD *)(a2 + 8 * v15 + 4) = v12;
          *(_DWORD *)(a2 + 8 * (*a3)++) = v16;
        }
      }
    }
  }
  return result;
}

uint64_t ZSTD_litLengthPrice(unsigned int a1, uint64_t a2, int a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  if (*(_DWORD *)(a2 + 80) == 1)
  {
    v3 = __clz(a1 + 1);
    v4 = (v3 << 8) ^ 0x1F00;
    v5 = ((a1 + 1) << 8 >> (v3 ^ 0x1F)) + ((v3 ^ 0x1F) << 8);
    v6 = 0;
    if (!a3)
      v5 = v4;
  }
  else
  {
    v6 = -256;
    do
    {
      v7 = a1;
      v6 += 256;
      a1 = 0x1FFFFu;
    }
    while (v7 == 0x20000);
    if (v7 < 0x40)
      v8 = ZSTD_LLcode_LL_Code_0[v7];
    else
      v8 = 50 - __clz(v7);
    v9 = *(_DWORD *)(a2 + 68) + (LL_bits_4[v8] << 8);
    v10 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v8) + 1;
    v11 = __clz(v10);
    v12 = -((v10 << 8 >> (v11 ^ 0x1F)) + ((v11 ^ 0x1F) << 8));
    if (!a3)
      v12 = ((v11 << 8) ^ 0xFFFFE0FF) + 1;
    v5 = v9 + v12;
  }
  return v5 + v6;
}

uint64_t *ZSTD_updateStats(uint64_t *result, unsigned int a2, unsigned __int8 *a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  if (*((_DWORD *)result + 24) != 2)
  {
    if (a2)
    {
      v5 = *result;
      v6 = a2;
      do
      {
        v7 = *a3++;
        *(_DWORD *)(v5 + 4 * v7) += 2;
        --v6;
      }
      while (v6);
    }
    *((_DWORD *)result + 12) += 2 * a2;
  }
  if (a2 < 0x40)
    v8 = ZSTD_LLcode_LL_Code_0[a2];
  else
    v8 = 50 - __clz(a2);
  ++*(_DWORD *)(result[1] + 4 * v8);
  ++*((_DWORD *)result + 13);
  v9 = __clz(a4 + 1);
  ++*(_DWORD *)(result[3] + 4 * (v9 ^ 0x1F));
  ++*((_DWORD *)result + 15);
  v10 = a5 - 3;
  if ((a5 - 3) < 0x80)
    v11 = ZSTD_MLcode_ML_Code_0[v10];
  else
    v11 = 67 - __clz(v10);
  ++*(_DWORD *)(result[2] + 4 * v11);
  ++*((_DWORD *)result + 14);
  return result;
}

int32x2_t *ZSTD_setBasePrices(int32x2_t *result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int32x2_t v8;
  int32x2_t v9;
  int32x2_t v10;

  if (result[12].i32[0] != 2)
  {
    v2 = result[6].i32[0] + 1;
    v3 = __clz(v2);
    v4 = (v2 << 8 >> (v3 ^ 0x1F)) + ((v3 ^ 0x1F) << 8);
    if (!a2)
      v4 = (v3 << 8) ^ 0x1F00;
    result[8].i32[0] = v4;
  }
  v5 = result[6].i32[1] + 1;
  v6 = __clz(v5);
  if (a2)
  {
    v7 = (v5 << 8 >> (v6 ^ 0x1F)) + ((v6 ^ 0x1F) << 8);
    v8 = vadd_s32(result[7], (int32x2_t)0x100000001);
    v9 = (int32x2_t)veor_s8((int8x8_t)vclz_s32(v8), (int8x8_t)0x1F0000001FLL);
    v10 = vadd_s32(vshl_n_s32(v9, 8uLL), (int32x2_t)vshl_u32((uint32x2_t)vshl_n_s32(v8, 8uLL), (uint32x2_t)vneg_s32(v9)));
  }
  else
  {
    v7 = (v6 << 8) ^ 0x1F00;
    v10 = (int32x2_t)veor_s8((int8x8_t)vshl_n_s32(vclz_s32(vadd_s32(result[7], (int32x2_t)0x100000001)), 8uLL), (int8x8_t)0x1F0000001F00);
  }
  result[8].i32[1] = v7;
  result[9] = v10;
  return result;
}

uint64_t ZSTD_btGetAllMatches_noDict_3(_DWORD *a1, uint64_t a2, _DWORD *a3, int *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int FirstIndexHash3;
  int v52;
  _QWORD *v53;
  unint64_t v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  unint64_t v63;
  unint64_t v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  _DWORD *v74;
  unint64_t v75;
  _DWORD *v76;
  BOOL v77;
  unsigned int *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  int *v84;
  int *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int v100;
  int v101;

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v17 = a1;
  v18 = (_DWORD)a4 - v8;
  v19 = (_DWORD)a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = ZSTD_insertBt1(a2, (_QWORD *)(v8 + v9), a5, v18, 3, 0) + v9;
    while (v9 < v18);
    v8 = *(_QWORD *)(a2 + 8);
    v19 = (_DWORD)a4 - v8;
    v17 = a1;
  }
  *(_DWORD *)(a2 + 44) = v18;
  if (*(_DWORD *)(a2 + 260) >= 0xFFFu)
    v20 = 4095;
  else
    v20 = *(_DWORD *)(a2 + 260);
  v21 = *a4;
  v22 = *(_DWORD *)(a2 + 252);
  v23 = (-1640531535 * *a4) >> -*(_BYTE *)(a2 + 248);
  v94 = *(_QWORD *)(a2 + 96);
  v24 = *(_DWORD *)(v94 + 4 * v23);
  v25 = *(_DWORD *)(a2 + 240);
  v26 = -1 << (*(_DWORD *)(a2 + 244) - 1);
  v96 = ~v26;
  v27 = v19 + v26 + 1;
  if (v19 < ~v26)
    v27 = 0;
  v97 = v27;
  v28 = *(_DWORD *)(a2 + 24);
  v29 = v19 - *(_DWORD *)(a2 + 28) > 1 << v25 && *(_DWORD *)(a2 + 40) == 0;
  v30 = *(_QWORD *)(a2 + 112);
  v31 = v19 - (1 << v25);
  if (!v29)
    v31 = *(_DWORD *)(a2 + 28);
  if (v31 <= 1)
    v32 = 1;
  else
    v32 = v31;
  v101 = 0;
  v33 = (a8 - 1);
  v90 = v22;
  v93 = v23;
  v92 = v26;
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v34 = v19 - v28;
    v35 = (_QWORD *)((char *)a4 + 3);
    v36 = a5 - 7;
    v37 = (char *)a4 + 11;
    v38 = a7;
    while (1)
    {
      if (v38 == 3)
        v39 = *a6 - 1;
      else
        v39 = a6[v38];
      if (v39 - 1 >= v34
        || (v19 - v39 >= v31 ? (v40 = ((*(int *)((char *)a4 - v39) ^ v21) & 0xFFFFFF) == 0) : (v40 = 0), !v40))
      {
        v41 = 0;
        goto LABEL_45;
      }
      v42 = -(uint64_t)v39;
      v43 = (char *)v35 - v39;
      if (v36 <= (unint64_t)v35)
        break;
      v44 = *v35 ^ *(_QWORD *)v43;
      if (!v44)
      {
        v47 = 0;
        while (1)
        {
          v45 = &v37[v47];
          if ((unint64_t)&v37[v47] >= v36)
            break;
          v48 = *(_QWORD *)&v37[v42 + v47];
          v47 += 8;
          v49 = *(_QWORD *)v45 ^ v48;
          if (v49)
          {
            v45 = (char *)(v47 + (__clz(__rbit64(v49)) >> 3));
            goto LABEL_44;
          }
        }
        v43 = &v45[v42];
        goto LABEL_34;
      }
      v45 = (char *)(__clz(__rbit64(v44)) >> 3);
LABEL_44:
      v41 = (_DWORD)v45 + 3;
LABEL_45:
      if (v33 < v41)
      {
        v46 = &v17[2 * v10];
        *v46 = v38 - a7;
        v46[1] = v41;
        v10 = (v10 + 1);
        if (v41 > v20)
          return v10;
        v33 = v41;
        if ((int *)((char *)a4 + v41) == (int *)a5)
          return v10;
      }
      if (++v38 >= (unint64_t)(a7 + 3))
        goto LABEL_55;
    }
    v45 = (char *)a4 + 3;
LABEL_34:
    if ((unint64_t)v45 < a5 - 3 && *(_DWORD *)v43 == *(_DWORD *)v45)
    {
      v45 += 4;
      v43 += 4;
    }
    if ((unint64_t)v45 < a5 - 1 && *(unsigned __int16 *)v43 == *(unsigned __int16 *)v45)
    {
      v45 += 2;
      v43 += 2;
    }
    if ((unint64_t)v45 < a5 && *v43 == *v45)
      LODWORD(v45) = (_DWORD)v45 + 1;
    LODWORD(v45) = (_DWORD)v45 - (_DWORD)v35;
    goto LABEL_44;
  }
LABEL_55:
  v98 = v30;
  v100 = v32;
  if (v33 > 2)
  {
    v52 = ~v26;
  }
  else
  {
    v50 = v20;
    FirstIndexHash3 = ZSTD_insertAndFindFirstIndexHash3(a2, a3, a4);
    v32 = v100;
    v52 = v96;
    if (FirstIndexHash3 < v100)
    {
      v57 = v97;
      v30 = v98;
      goto LABEL_63;
    }
    v30 = v98;
    if (!((v19 - FirstIndexHash3) >> 18))
    {
      v53 = (_QWORD *)(v8 + FirstIndexHash3);
      if (a5 - 7 <= (unint64_t)a4)
      {
        v84 = a4;
        v55 = v50;
      }
      else
      {
        v54 = *(_QWORD *)a4 ^ *v53;
        v55 = v50;
        if (v54)
        {
          v56 = __clz(__rbit64(v54)) >> 3;
          v57 = v97;
          goto LABEL_117;
        }
        v86 = a4 + 2;
        v57 = v97;
        while (1)
        {
          v87 = (_QWORD *)((char *)v86 + v54);
          if ((unint64_t)v86 + v54 >= a5 - 7)
            break;
          v88 = *(_QWORD *)(FirstIndexHash3 + v8 + 8 + v54);
          v54 += 8;
          v89 = *v87 ^ v88;
          if (v89)
          {
            v56 = v54 + (__clz(__rbit64(v89)) >> 3);
            goto LABEL_117;
          }
        }
        v84 = (int *)((char *)a4 + v54 + 8);
        v53 = (_QWORD *)(FirstIndexHash3 + v8 + v54 + 8);
      }
      if ((unint64_t)v84 < a5 - 3 && *(_DWORD *)v53 == *v84)
      {
        ++v84;
        v53 = (_QWORD *)((char *)v53 + 4);
      }
      v57 = v97;
      if ((unint64_t)v84 < a5 - 1 && *(unsigned __int16 *)v53 == *(unsigned __int16 *)v84)
      {
        v84 = (int *)((char *)v84 + 2);
        v53 = (_QWORD *)((char *)v53 + 2);
      }
      if ((unint64_t)v84 < a5 && *(unsigned __int8 *)v53 == *(unsigned __int8 *)v84)
        v84 = (int *)((char *)v84 + 1);
      v56 = (char *)v84 - (char *)a4;
LABEL_117:
      if (v56 >= 3)
      {
        *v17 = v19 - FirstIndexHash3 + 2;
        v17[1] = v56;
        if (v56 > v55 || (int *)((char *)a4 + v56) == (int *)a5)
        {
          v61 = v19 + 1;
          v10 = 1;
          goto LABEL_65;
        }
        v10 = 1;
        v33 = v56;
      }
      goto LABEL_63;
    }
  }
  v57 = v97;
LABEL_63:
  v58 = (unsigned int *)(v30 + 8 * (v19 & ~v92));
  v59 = v58 + 1;
  v60 = v19 + 9;
  *(_DWORD *)(v94 + 4 * v93) = v19;
  if (v24 < v32)
    goto LABEL_64;
  v63 = 0;
  v64 = 0;
  v65 = 1 << v90;
  v66 = a5 - 7;
  v95 = a4 + 2;
  v67 = v8 + 8;
  while (1)
  {
    v68 = v64 >= v63 ? v63 : v64;
    v69 = v8 + v24;
    v70 = (char *)a4 + v68;
    v71 = (_QWORD *)(v69 + v68);
    if (v66 <= (unint64_t)a4 + v68)
    {
      v74 = (int *)((char *)a4 + v68);
    }
    else
    {
      v72 = *(_QWORD *)v70 ^ *v71;
      if (v72)
      {
        v73 = __clz(__rbit64(v72)) >> 3;
        goto LABEL_85;
      }
      v79 = 0;
      v80 = (char *)v95 + v68;
      while (1)
      {
        v81 = &v80[v79];
        if ((unint64_t)&v80[v79] >= v66)
          break;
        v82 = *(_QWORD *)(v67 + v68 + v24 + v79);
        v79 += 8;
        v83 = *(_QWORD *)v81 ^ v82;
        if (v83)
        {
          v73 = v79 + (__clz(__rbit64(v83)) >> 3);
          v52 = v96;
          v57 = v97;
          v30 = v98;
          goto LABEL_85;
        }
      }
      v74 = (int *)((char *)v95 + v68 + v79);
      v71 = (_QWORD *)(v67 + v68 + v24 + v79);
      v52 = v96;
      v57 = v97;
    }
    if ((unint64_t)v74 < a5 - 3 && *(_DWORD *)v71 == *v74)
    {
      ++v74;
      v71 = (_QWORD *)((char *)v71 + 4);
    }
    if ((unint64_t)v74 < a5 - 1 && *(unsigned __int16 *)v71 == *(unsigned __int16 *)v74)
    {
      v74 = (_DWORD *)((char *)v74 + 2);
      v71 = (_QWORD *)((char *)v71 + 2);
    }
    if ((unint64_t)v74 < a5 && *(unsigned __int8 *)v71 == *(unsigned __int8 *)v74)
      v74 = (_DWORD *)((char *)v74 + 1);
    v30 = v98;
    v73 = (char *)v74 - v70;
LABEL_85:
    v75 = v73 + v68;
    if (v75 > v33)
    {
      if (v75 > v60 - v24)
        v60 = v24 + v75;
      v76 = &v17[2 * v10];
      *v76 = v19 + 2 - v24;
      v76[1] = v75;
      v10 = (v10 + 1);
      v77 = v75 > 0x1000 || (int *)((char *)a4 + v75) == (int *)a5;
      v33 = v75;
      if (v77)
        goto LABEL_64;
    }
    v78 = (unsigned int *)(v30 + 8 * (v24 & v52));
    if (*(unsigned __int8 *)(v69 + v75) >= *((unsigned __int8 *)a4 + v75))
      break;
    *v58 = v24;
    if (v24 <= v57)
    {
      v58 = (unsigned int *)&v101;
      goto LABEL_64;
    }
    ++v78;
    v64 = v75;
    v58 = v78;
LABEL_97:
    if (--v65)
    {
      v24 = *v78;
      if (*v78 >= v100)
        continue;
    }
    goto LABEL_64;
  }
  *v59 = v24;
  if (v24 > v57)
  {
    v63 = v75;
    v59 = (unsigned int *)(v30 + 8 * (v24 & v52));
    goto LABEL_97;
  }
  v59 = (unsigned int *)&v101;
LABEL_64:
  *v59 = 0;
  *v58 = 0;
  v61 = v60 - 8;
LABEL_65:
  *(_DWORD *)(a2 + 44) = v61;
  return v10;
}

uint64_t ZSTD_btGetAllMatches_noDict_4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  unint64_t v36;
  _DWORD *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  _DWORD *v65;
  unint64_t v66;
  _DWORD *v67;
  BOOL v68;
  unsigned int *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _DWORD *v80;
  unsigned int v81;
  unsigned int v82;
  int v83;

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v18 = (_DWORD)a4 - v8;
  v19 = (_DWORD)a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = ZSTD_insertBt1(a2, (_QWORD *)(v8 + v9), a5, v18, 4, 0) + v9;
    while (v9 < v18);
    v8 = *(_QWORD *)(a2 + 8);
    v19 = (_DWORD)a4 - v8;
  }
  *(_DWORD *)(a2 + 44) = v18;
  if (*(_DWORD *)(a2 + 260) >= 0xFFFu)
    v20 = 4095;
  else
    v20 = *(_DWORD *)(a2 + 260);
  v21 = *a4;
  v75 = *(_DWORD *)(a2 + 252);
  v77 = (-1640531535 * *a4) >> -(char)*(_DWORD *)(a2 + 248);
  v79 = *(_QWORD *)(a2 + 96);
  v22 = *(_DWORD *)(v79 + 4 * v77);
  v23 = *(_DWORD *)(a2 + 240);
  v76 = -1 << (*(_DWORD *)(a2 + 244) - 1);
  v24 = ~v76;
  v25 = v19 + v76 + 1;
  if (v19 < ~v76)
    v25 = 0;
  v81 = v25;
  v26 = 1 << v23;
  v27 = *(_DWORD *)(a2 + 24);
  v28 = v19 - *(_DWORD *)(a2 + 28) > 1 << v23 && *(_DWORD *)(a2 + 40) == 0;
  v29 = *(_QWORD *)(a2 + 112);
  v30 = v19 - v26;
  if (v28)
    v31 = v30;
  else
    v31 = *(_DWORD *)(a2 + 28);
  if (v31 <= 1)
    v32 = 1;
  else
    v32 = v31;
  v83 = 0;
  v33 = (a8 - 1);
  if (a7 <= 0xFFFFFFFC)
  {
    result = 0;
    v34 = v19 - v27;
    v35 = a4 + 1;
    v36 = a5 - 7;
    v37 = a4 + 3;
    v38 = a7;
    while (1)
    {
      if (v38 == 3)
        v39 = *a6 - 1;
      else
        v39 = a6[v38];
      if (v39 - 1 >= v34 || (v19 - v39 >= v31 ? (v40 = v21 == *(_DWORD *)((char *)a4 - v39)) : (v40 = 0), !v40))
      {
        v41 = 0;
        goto LABEL_46;
      }
      v42 = -(uint64_t)v39;
      v43 = (_QWORD *)((char *)v35 + v42);
      if (v36 <= (unint64_t)v35)
        break;
      v44 = *v35 ^ *v43;
      if (!v44)
      {
        v48 = 0;
        while (1)
        {
          v46 = &v37[v48];
          if ((unint64_t)&v37[v48] >= v36)
            break;
          v49 = *(_QWORD *)((char *)v37 + v42 + v48 * 4);
          v48 += 2;
          v50 = *v46 ^ v49;
          if (v50)
          {
            v45 = v48 * 4 + (__clz(__rbit64(v50)) >> 3);
            goto LABEL_45;
          }
        }
        v43 = (_QWORD *)((char *)v46 + v42);
        goto LABEL_35;
      }
      v45 = __clz(__rbit64(v44)) >> 3;
LABEL_45:
      v41 = v45 + 4;
LABEL_46:
      if (v33 < v41)
      {
        v47 = (_DWORD *)(a1 + 8 * result);
        *v47 = v38 - a7;
        v47[1] = v41;
        result = (result + 1);
        if (v41 > v20)
          return result;
        v33 = v41;
        if ((_DWORD *)((char *)a4 + v41) == (_DWORD *)a5)
          return result;
      }
      if (++v38 >= (unint64_t)(a7 + 3))
        goto LABEL_57;
    }
    v46 = a4 + 1;
LABEL_35:
    if ((unint64_t)v46 < a5 - 3 && *(_DWORD *)v43 == *(_DWORD *)v46)
    {
      v46 = (_QWORD *)((char *)v46 + 4);
      v43 = (_QWORD *)((char *)v43 + 4);
    }
    if ((unint64_t)v46 < a5 - 1 && *(unsigned __int16 *)v43 == *(unsigned __int16 *)v46)
    {
      v46 = (_QWORD *)((char *)v46 + 2);
      v43 = (_QWORD *)((char *)v43 + 2);
    }
    if ((unint64_t)v46 < a5 && *(unsigned __int8 *)v43 == *(unsigned __int8 *)v46)
      LODWORD(v46) = (_DWORD)v46 + 1;
    LODWORD(v45) = (_DWORD)v46 - (_DWORD)v35;
    goto LABEL_45;
  }
  result = 0;
LABEL_57:
  v51 = (unsigned int *)(v29 + 8 * (v19 & ~v76));
  v52 = v51 + 1;
  v53 = v19 + 9;
  *(_DWORD *)(v79 + 4 * v77) = v19;
  if (v22 < v32)
    goto LABEL_58;
  v54 = 0;
  v55 = 0;
  v56 = 1 << v75;
  v57 = a5 - 7;
  v82 = v19 + 2;
  v80 = a4 + 2;
  v78 = v8 + 8;
  v58 = v25;
  while (1)
  {
    v59 = v55 >= v54 ? v54 : v55;
    v60 = v8 + v22;
    v61 = (char *)a4 + v59;
    v62 = (_QWORD *)(v60 + v59);
    if (v57 <= (unint64_t)a4 + v59)
    {
      v65 = (_DWORD *)((char *)a4 + v59);
    }
    else
    {
      v63 = *(_QWORD *)v61 ^ *v62;
      if (v63)
      {
        v64 = __clz(__rbit64(v63)) >> 3;
        goto LABEL_78;
      }
      v70 = 0;
      v71 = (char *)v80 + v59;
      while (1)
      {
        v72 = &v71[v70];
        if ((unint64_t)&v71[v70] >= v57)
          break;
        v73 = *(_QWORD *)(v78 + v59 + v22 + v70);
        v70 += 8;
        v74 = *(_QWORD *)v72 ^ v73;
        if (v74)
        {
          v64 = v70 + (__clz(__rbit64(v74)) >> 3);
          v58 = v81;
          goto LABEL_78;
        }
      }
      v65 = (_DWORD *)((char *)v80 + v59 + v70);
      v62 = (_QWORD *)(v78 + v59 + v22 + v70);
      v58 = v81;
    }
    if ((unint64_t)v65 < a5 - 3 && *(_DWORD *)v62 == *v65)
    {
      ++v65;
      v62 = (_QWORD *)((char *)v62 + 4);
    }
    if ((unint64_t)v65 < a5 - 1 && *(unsigned __int16 *)v62 == *(unsigned __int16 *)v65)
    {
      v65 = (_DWORD *)((char *)v65 + 2);
      v62 = (_QWORD *)((char *)v62 + 2);
    }
    if ((unint64_t)v65 < a5 && *(unsigned __int8 *)v62 == *(unsigned __int8 *)v65)
      v65 = (_DWORD *)((char *)v65 + 1);
    v64 = (char *)v65 - v61;
LABEL_78:
    v66 = v64 + v59;
    if (v66 > v33)
    {
      if (v66 > v53 - v22)
        v53 = v22 + v66;
      v67 = (_DWORD *)(a1 + 8 * result);
      *v67 = v82 - v22;
      v67[1] = v66;
      result = (result + 1);
      v68 = v66 > 0x1000 || (_DWORD *)((char *)a4 + v66) == (_DWORD *)a5;
      v33 = v66;
      if (v68)
        goto LABEL_58;
    }
    v69 = (unsigned int *)(v29 + 8 * (v22 & v24));
    if (*(unsigned __int8 *)(v60 + v66) >= *((unsigned __int8 *)a4 + v66))
      break;
    *v51 = v22;
    if (v22 <= v58)
    {
      v51 = (unsigned int *)&v83;
      goto LABEL_58;
    }
    ++v69;
    v55 = v66;
    v51 = v69;
LABEL_90:
    if (--v56)
    {
      v22 = *v69;
      if (*v69 >= v32)
        continue;
    }
    goto LABEL_58;
  }
  *v52 = v22;
  if (v22 > v58)
  {
    v54 = v66;
    v52 = (unsigned int *)(v29 + 8 * (v22 & v24));
    goto LABEL_90;
  }
  v52 = (unsigned int *)&v83;
LABEL_58:
  *v52 = 0;
  *v51 = 0;
  *(_DWORD *)(a2 + 44) = v53 - 8;
  return result;
}

uint64_t ZSTD_btGetAllMatches_noDict_5(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  _DWORD *v65;
  unint64_t v66;
  _DWORD *v67;
  BOOL v68;
  unsigned int *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v18 = (_DWORD)a4 - v8;
  v19 = (_DWORD)a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = ZSTD_insertBt1(a2, (_QWORD *)(v8 + v9), a5, v18, 5, 0) + v9;
    while (v9 < v18);
    v8 = *(_QWORD *)(a2 + 8);
    v19 = (_DWORD)a4 - v8;
  }
  *(_DWORD *)(a2 + 44) = v18;
  if (*(_DWORD *)(a2 + 260) >= 0xFFFu)
    v20 = 4095;
  else
    v20 = *(_DWORD *)(a2 + 260);
  v78 = *(_QWORD *)(a2 + 96);
  v75 = *(_DWORD *)(a2 + 252);
  v76 = (0xCF1BBCDCBB000000 * *a4) >> -*(_BYTE *)(a2 + 248);
  v21 = *(_DWORD *)(v78 + 4 * v76);
  v22 = *(_DWORD *)(a2 + 240);
  v23 = -1 << (*(_DWORD *)(a2 + 244) - 1);
  v24 = ~v23;
  v25 = v19 + v23 + 1;
  if (v19 < ~v23)
    v25 = 0;
  v80 = v25;
  v26 = 1 << v22;
  v27 = *(_DWORD *)(a2 + 24);
  v28 = v19 - *(_DWORD *)(a2 + 28) > 1 << v22 && *(_DWORD *)(a2 + 40) == 0;
  v29 = *(_QWORD *)(a2 + 112);
  v30 = v19 - v26;
  if (v28)
    v31 = v30;
  else
    v31 = *(_DWORD *)(a2 + 28);
  if (v31 <= 1)
    v32 = 1;
  else
    v32 = v31;
  v82 = 0;
  v33 = (a8 - 1);
  if (a7 <= 0xFFFFFFFC)
  {
    result = 0;
    v34 = v19 - v27;
    v35 = (_QWORD *)((char *)a4 + 4);
    v36 = a5 - 7;
    v37 = (char *)a4 + 12;
    v38 = a7;
    while (1)
    {
      if (v38 == 3)
        v39 = *a6 - 1;
      else
        v39 = a6[v38];
      if (v39 - 1 >= v34
        || (v19 - v39 >= v31 ? (v40 = *(_DWORD *)a4 == *(_DWORD *)((char *)a4 - v39)) : (v40 = 0), !v40))
      {
        v41 = 0;
        goto LABEL_46;
      }
      v42 = -(uint64_t)v39;
      v43 = (char *)v35 - v39;
      if (v36 <= (unint64_t)v35)
        break;
      v44 = *v35 ^ *(_QWORD *)v43;
      if (!v44)
      {
        v48 = 0;
        while (1)
        {
          v46 = &v37[v48];
          if ((unint64_t)&v37[v48] >= v36)
            break;
          v49 = *(_QWORD *)&v37[v42 + v48];
          v48 += 8;
          v50 = *(_QWORD *)v46 ^ v49;
          if (v50)
          {
            v45 = v48 + (__clz(__rbit64(v50)) >> 3);
            goto LABEL_45;
          }
        }
        v43 = &v46[v42];
        goto LABEL_35;
      }
      v45 = __clz(__rbit64(v44)) >> 3;
LABEL_45:
      v41 = v45 + 4;
LABEL_46:
      if (v33 < v41)
      {
        v47 = (_DWORD *)(a1 + 8 * result);
        *v47 = v38 - a7;
        v47[1] = v41;
        result = (result + 1);
        if (v41 > v20)
          return result;
        v33 = v41;
        if ((_QWORD *)((char *)a4 + v41) == (_QWORD *)a5)
          return result;
      }
      if (++v38 >= (unint64_t)(a7 + 3))
        goto LABEL_57;
    }
    v46 = (char *)a4 + 4;
LABEL_35:
    if ((unint64_t)v46 < a5 - 3 && *(_DWORD *)v43 == *(_DWORD *)v46)
    {
      v46 += 4;
      v43 += 4;
    }
    if ((unint64_t)v46 < a5 - 1 && *(unsigned __int16 *)v43 == *(unsigned __int16 *)v46)
    {
      v46 += 2;
      v43 += 2;
    }
    if ((unint64_t)v46 < a5 && *v43 == *v46)
      LODWORD(v46) = (_DWORD)v46 + 1;
    LODWORD(v45) = (_DWORD)v46 - (_DWORD)v35;
    goto LABEL_45;
  }
  result = 0;
LABEL_57:
  v51 = (unsigned int *)(v29 + 8 * (v19 & ~v23));
  v52 = v51 + 1;
  v53 = v19 + 9;
  *(_DWORD *)(v78 + 4 * v76) = v19;
  if (v21 < v32)
    goto LABEL_58;
  v54 = 0;
  v55 = 0;
  v56 = 1 << v75;
  v57 = a5 - 7;
  v81 = v19 + 2;
  v79 = a4 + 1;
  v77 = v8 + 8;
  v58 = v25;
  while (1)
  {
    v59 = v55 >= v54 ? v54 : v55;
    v60 = v8 + v21;
    v61 = (char *)a4 + v59;
    v62 = (_QWORD *)(v60 + v59);
    if (v57 <= (unint64_t)a4 + v59)
    {
      v65 = (_DWORD *)((char *)a4 + v59);
    }
    else
    {
      v63 = *(_QWORD *)v61 ^ *v62;
      if (v63)
      {
        v64 = __clz(__rbit64(v63)) >> 3;
        goto LABEL_78;
      }
      v70 = 0;
      v71 = (char *)v79 + v59;
      while (1)
      {
        v72 = &v71[v70];
        if ((unint64_t)&v71[v70] >= v57)
          break;
        v73 = *(_QWORD *)(v77 + v59 + v21 + v70);
        v70 += 8;
        v74 = *(_QWORD *)v72 ^ v73;
        if (v74)
        {
          v64 = v70 + (__clz(__rbit64(v74)) >> 3);
          v58 = v80;
          goto LABEL_78;
        }
      }
      v65 = (_DWORD *)((char *)v79 + v59 + v70);
      v62 = (_QWORD *)(v77 + v59 + v21 + v70);
      v58 = v80;
    }
    if ((unint64_t)v65 < a5 - 3 && *(_DWORD *)v62 == *v65)
    {
      ++v65;
      v62 = (_QWORD *)((char *)v62 + 4);
    }
    if ((unint64_t)v65 < a5 - 1 && *(unsigned __int16 *)v62 == *(unsigned __int16 *)v65)
    {
      v65 = (_DWORD *)((char *)v65 + 2);
      v62 = (_QWORD *)((char *)v62 + 2);
    }
    if ((unint64_t)v65 < a5 && *(unsigned __int8 *)v62 == *(unsigned __int8 *)v65)
      v65 = (_DWORD *)((char *)v65 + 1);
    v64 = (char *)v65 - v61;
LABEL_78:
    v66 = v64 + v59;
    if (v66 > v33)
    {
      if (v66 > v53 - v21)
        v53 = v21 + v66;
      v67 = (_DWORD *)(a1 + 8 * result);
      *v67 = v81 - v21;
      v67[1] = v66;
      result = (result + 1);
      v68 = v66 > 0x1000 || (_QWORD *)((char *)a4 + v66) == (_QWORD *)a5;
      v33 = v66;
      if (v68)
        goto LABEL_58;
    }
    v69 = (unsigned int *)(v29 + 8 * (v21 & v24));
    if (*(unsigned __int8 *)(v60 + v66) >= *((unsigned __int8 *)a4 + v66))
      break;
    *v51 = v21;
    if (v21 <= v58)
    {
      v51 = (unsigned int *)&v82;
      goto LABEL_58;
    }
    ++v69;
    v55 = v66;
    v51 = v69;
LABEL_90:
    if (--v56)
    {
      v21 = *v69;
      if (*v69 >= v32)
        continue;
    }
    goto LABEL_58;
  }
  *v52 = v21;
  if (v21 > v58)
  {
    v54 = v66;
    v52 = (unsigned int *)(v29 + 8 * (v21 & v24));
    goto LABEL_90;
  }
  v52 = (unsigned int *)&v82;
LABEL_58:
  *v52 = 0;
  *v51 = 0;
  *(_DWORD *)(a2 + 44) = v53 - 8;
  return result;
}

uint64_t ZSTD_btGetAllMatches_noDict_6(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unsigned int v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  _DWORD *v65;
  unint64_t v66;
  _DWORD *v67;
  BOOL v68;
  unsigned int *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  unsigned int v80;
  unsigned int v81;
  int v82;

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v18 = (_DWORD)a4 - v8;
  v19 = (_DWORD)a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = ZSTD_insertBt1(a2, (_QWORD *)(v8 + v9), a5, v18, 6, 0) + v9;
    while (v9 < v18);
    v8 = *(_QWORD *)(a2 + 8);
    v19 = (_DWORD)a4 - v8;
  }
  *(_DWORD *)(a2 + 44) = v18;
  if (*(_DWORD *)(a2 + 260) >= 0xFFFu)
    v20 = 4095;
  else
    v20 = *(_DWORD *)(a2 + 260);
  v78 = *(_QWORD *)(a2 + 96);
  v75 = *(_DWORD *)(a2 + 252);
  v76 = (0xCF1BBCDCBF9B0000 * *a4) >> -*(_BYTE *)(a2 + 248);
  v21 = *(_DWORD *)(v78 + 4 * v76);
  v22 = *(_DWORD *)(a2 + 240);
  v23 = -1 << (*(_DWORD *)(a2 + 244) - 1);
  v24 = ~v23;
  v25 = v19 + v23 + 1;
  if (v19 < ~v23)
    v25 = 0;
  v80 = v25;
  v26 = 1 << v22;
  v27 = *(_DWORD *)(a2 + 24);
  v28 = v19 - *(_DWORD *)(a2 + 28) > 1 << v22 && *(_DWORD *)(a2 + 40) == 0;
  v29 = *(_QWORD *)(a2 + 112);
  v30 = v19 - v26;
  if (v28)
    v31 = v30;
  else
    v31 = *(_DWORD *)(a2 + 28);
  if (v31 <= 1)
    v32 = 1;
  else
    v32 = v31;
  v82 = 0;
  v33 = (a8 - 1);
  if (a7 <= 0xFFFFFFFC)
  {
    result = 0;
    v34 = v19 - v27;
    v35 = (_QWORD *)((char *)a4 + 4);
    v36 = a5 - 7;
    v37 = (char *)a4 + 12;
    v38 = a7;
    while (1)
    {
      if (v38 == 3)
        v39 = *a6 - 1;
      else
        v39 = a6[v38];
      if (v39 - 1 >= v34
        || (v19 - v39 >= v31 ? (v40 = *(_DWORD *)a4 == *(_DWORD *)((char *)a4 - v39)) : (v40 = 0), !v40))
      {
        v41 = 0;
        goto LABEL_46;
      }
      v42 = -(uint64_t)v39;
      v43 = (char *)v35 - v39;
      if (v36 <= (unint64_t)v35)
        break;
      v44 = *v35 ^ *(_QWORD *)v43;
      if (!v44)
      {
        v48 = 0;
        while (1)
        {
          v46 = &v37[v48];
          if ((unint64_t)&v37[v48] >= v36)
            break;
          v49 = *(_QWORD *)&v37[v42 + v48];
          v48 += 8;
          v50 = *(_QWORD *)v46 ^ v49;
          if (v50)
          {
            v45 = v48 + (__clz(__rbit64(v50)) >> 3);
            goto LABEL_45;
          }
        }
        v43 = &v46[v42];
        goto LABEL_35;
      }
      v45 = __clz(__rbit64(v44)) >> 3;
LABEL_45:
      v41 = v45 + 4;
LABEL_46:
      if (v33 < v41)
      {
        v47 = (_DWORD *)(a1 + 8 * result);
        *v47 = v38 - a7;
        v47[1] = v41;
        result = (result + 1);
        if (v41 > v20)
          return result;
        v33 = v41;
        if ((_QWORD *)((char *)a4 + v41) == (_QWORD *)a5)
          return result;
      }
      if (++v38 >= (unint64_t)(a7 + 3))
        goto LABEL_57;
    }
    v46 = (char *)a4 + 4;
LABEL_35:
    if ((unint64_t)v46 < a5 - 3 && *(_DWORD *)v43 == *(_DWORD *)v46)
    {
      v46 += 4;
      v43 += 4;
    }
    if ((unint64_t)v46 < a5 - 1 && *(unsigned __int16 *)v43 == *(unsigned __int16 *)v46)
    {
      v46 += 2;
      v43 += 2;
    }
    if ((unint64_t)v46 < a5 && *v43 == *v46)
      LODWORD(v46) = (_DWORD)v46 + 1;
    LODWORD(v45) = (_DWORD)v46 - (_DWORD)v35;
    goto LABEL_45;
  }
  result = 0;
LABEL_57:
  v51 = (unsigned int *)(v29 + 8 * (v19 & ~v23));
  v52 = v51 + 1;
  v53 = v19 + 9;
  *(_DWORD *)(v78 + 4 * v76) = v19;
  if (v21 < v32)
    goto LABEL_58;
  v54 = 0;
  v55 = 0;
  v56 = 1 << v75;
  v57 = a5 - 7;
  v81 = v19 + 2;
  v79 = a4 + 1;
  v77 = v8 + 8;
  v58 = v25;
  while (1)
  {
    v59 = v55 >= v54 ? v54 : v55;
    v60 = v8 + v21;
    v61 = (char *)a4 + v59;
    v62 = (_QWORD *)(v60 + v59);
    if (v57 <= (unint64_t)a4 + v59)
    {
      v65 = (_DWORD *)((char *)a4 + v59);
    }
    else
    {
      v63 = *(_QWORD *)v61 ^ *v62;
      if (v63)
      {
        v64 = __clz(__rbit64(v63)) >> 3;
        goto LABEL_78;
      }
      v70 = 0;
      v71 = (char *)v79 + v59;
      while (1)
      {
        v72 = &v71[v70];
        if ((unint64_t)&v71[v70] >= v57)
          break;
        v73 = *(_QWORD *)(v77 + v59 + v21 + v70);
        v70 += 8;
        v74 = *(_QWORD *)v72 ^ v73;
        if (v74)
        {
          v64 = v70 + (__clz(__rbit64(v74)) >> 3);
          v58 = v80;
          goto LABEL_78;
        }
      }
      v65 = (_DWORD *)((char *)v79 + v59 + v70);
      v62 = (_QWORD *)(v77 + v59 + v21 + v70);
      v58 = v80;
    }
    if ((unint64_t)v65 < a5 - 3 && *(_DWORD *)v62 == *v65)
    {
      ++v65;
      v62 = (_QWORD *)((char *)v62 + 4);
    }
    if ((unint64_t)v65 < a5 - 1 && *(unsigned __int16 *)v62 == *(unsigned __int16 *)v65)
    {
      v65 = (_DWORD *)((char *)v65 + 2);
      v62 = (_QWORD *)((char *)v62 + 2);
    }
    if ((unint64_t)v65 < a5 && *(unsigned __int8 *)v62 == *(unsigned __int8 *)v65)
      v65 = (_DWORD *)((char *)v65 + 1);
    v64 = (char *)v65 - v61;
LABEL_78:
    v66 = v64 + v59;
    if (v66 > v33)
    {
      if (v66 > v53 - v21)
        v53 = v21 + v66;
      v67 = (_DWORD *)(a1 + 8 * result);
      *v67 = v81 - v21;
      v67[1] = v66;
      result = (result + 1);
      v68 = v66 > 0x1000 || (_QWORD *)((char *)a4 + v66) == (_QWORD *)a5;
      v33 = v66;
      if (v68)
        goto LABEL_58;
    }
    v69 = (unsigned int *)(v29 + 8 * (v21 & v24));
    if (*(unsigned __int8 *)(v60 + v66) >= *((unsigned __int8 *)a4 + v66))
      break;
    *v51 = v21;
    if (v21 <= v58)
    {
      v51 = (unsigned int *)&v82;
      goto LABEL_58;
    }
    ++v69;
    v55 = v66;
    v51 = v69;
LABEL_90:
    if (--v56)
    {
      v21 = *v69;
      if (*v69 >= v32)
        continue;
    }
    goto LABEL_58;
  }
  *v52 = v21;
  if (v21 > v58)
  {
    v54 = v66;
    v52 = (unsigned int *)(v29 + 8 * (v21 & v24));
    goto LABEL_90;
  }
  v52 = (unsigned int *)&v82;
LABEL_58:
  *v52 = 0;
  *v51 = 0;
  *(_DWORD *)(a2 + 44) = v53 - 8;
  return result;
}

uint64_t ZSTD_btGetAllMatches_extDict_3(_DWORD *a1, uint64_t a2, _DWORD *a3, int *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  char *v44;
  BOOL v45;
  uint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int FirstIndexHash3;
  unsigned int v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v67;
  unint64_t v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  _DWORD *v86;
  _DWORD *v87;
  unsigned int *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  int *v96;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  unint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unsigned int v109;
  int *v110;
  int v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  _QWORD *v118;
  char *v119;
  unint64_t v120;
  unsigned int v121;
  int v122;
  uint64_t v123;
  _DWORD *v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *v127;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  int *v132;
  unsigned int v133;
  int v134;
  unint64_t v135;
  _DWORD v136[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v14 = (_DWORD)a4 - v8;
  v15 = (_DWORD)a4 - v8;
  v132 = a4;
  v126 = a7;
  v124 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = ZSTD_insertBt1(a2, (_QWORD *)(v8 + v9), a5, v14, 3, 1) + v9;
    while (v9 < v14);
    v8 = *(_QWORD *)(a2 + 8);
    a4 = v132;
    v15 = (_DWORD)v132 - v8;
    a7 = v126;
    a6 = v124;
  }
  *(_DWORD *)(a2 + 44) = v14;
  if (*(_DWORD *)(a2 + 260) >= 0xFFFu)
    v16 = 4095;
  else
    v16 = *(_DWORD *)(a2 + 260);
  v17 = *a4;
  v102 = *(_DWORD *)(a2 + 252);
  v116 = *(_QWORD *)(a2 + 96);
  v113 = (-1640531535 * *a4) >> -(char)*(_DWORD *)(a2 + 248);
  v18 = *(_DWORD *)(v116 + 4 * v113);
  v129 = *(_QWORD *)(a2 + 112);
  v111 = -1 << (*(_DWORD *)(a2 + 244) - 1);
  v20 = *(unsigned int *)(a2 + 24);
  v19 = *(_DWORD *)(a2 + 28);
  v123 = *(_QWORD *)(a2 + 16);
  v119 = (char *)(v123 + v20);
  v122 = ~v111;
  v21 = v15 + v111 + 1;
  if (v15 < ~v111)
    v21 = 0;
  v121 = v21;
  v22 = 1 << *(_DWORD *)(a2 + 240);
  v115 = a2;
  v23 = v15 - v19 > v22 && *(_DWORD *)(a2 + 40) == 0;
  v130 = v8;
  v118 = (_QWORD *)(v8 + v20);
  v24 = v15 - v22;
  if (v23)
    v25 = v24;
  else
    v25 = v19;
  if (v25 <= 1)
    v26 = 1;
  else
    v26 = v25;
  v131 = v26;
  v136[0] = 0;
  v27 = (a8 - 1);
  v120 = v20;
  v133 = v15;
  v135 = a5;
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v28 = a7 + 3;
    v29 = v15 - v20;
    v30 = v15 - v25;
    v31 = (_QWORD *)((char *)a4 + 3);
    v32 = a5 - 7;
    v33 = a5 - 3;
    v34 = a5 - 1;
    v35 = (char *)a4 + 11;
    v36 = a7;
    v37 = a1;
    v109 = v15 - v25;
    v107 = v16;
    v105 = (_QWORD *)((char *)a4 + 3);
    v106 = v33;
    v104 = v32;
    while (1)
    {
      v38 = v36 == 3 ? *a6 - 1 : a6[v36];
      v39 = v15 - v38;
      if (v38 - 1 < v29)
        break;
      v45 = v38 - 1 < v30 && v20 + ~v39 >= 3;
      if (!v45 || (v46 = v123 + v39, ((*(_DWORD *)v46 ^ v17) & 0xFFFFFF) != 0))
      {
LABEL_40:
        v47 = 0;
        goto LABEL_54;
      }
      v48 = v31;
      v49 = v34;
      v50 = v35;
      v51 = v25;
      v52 = v28;
      v53 = ZSTD_count_2segments(v48, (char *)(v46 + 3), v135, v119, v118);
      v28 = v52;
      v35 = v50;
      v34 = v49;
      v31 = v105;
      v33 = v106;
      v25 = v51;
      v32 = v104;
      a6 = v124;
      a7 = v126;
      v15 = v133;
      v20 = v120;
      a4 = v132;
      v47 = v53 + 3;
      v30 = v109;
      v16 = v107;
      v37 = a1;
LABEL_54:
      if (v27 < v47)
      {
        v54 = &v37[2 * v10];
        *v54 = v36 - a7;
        v54[1] = v47;
        v10 = (v10 + 1);
        if (v47 > v16)
          return v10;
        v27 = v47;
        if ((int *)((char *)a4 + v47) == (int *)v135)
          return v10;
      }
      if (++v36 >= v28)
        goto LABEL_65;
    }
    if (v39 < v25 || ((*(int *)((char *)a4 - v38) ^ v17) & 0xFFFFFF) != 0)
      goto LABEL_40;
    v41 = -(uint64_t)v38;
    v42 = (char *)v31 - v38;
    if (v32 <= (unint64_t)v31)
    {
      v44 = (char *)v31;
    }
    else
    {
      v43 = *v31 ^ *(_QWORD *)v42;
      if (v43)
      {
        v44 = (char *)(__clz(__rbit64(v43)) >> 3);
LABEL_52:
        v47 = (_DWORD)v44 + 3;
        goto LABEL_54;
      }
      v55 = 0;
      while (1)
      {
        v44 = &v35[v55];
        if ((unint64_t)&v35[v55] >= v32)
          break;
        v56 = *(_QWORD *)&v35[v41 + v55];
        v55 += 8;
        v57 = *(_QWORD *)v44 ^ v56;
        if (v57)
        {
          v44 = (char *)(v55 + (__clz(__rbit64(v57)) >> 3));
          goto LABEL_52;
        }
      }
      v42 = &v44[v41];
    }
    if ((unint64_t)v44 < v33 && *(_DWORD *)v42 == *(_DWORD *)v44)
    {
      v44 += 4;
      v42 += 4;
    }
    if ((unint64_t)v44 < v34 && *(unsigned __int16 *)v42 == *(unsigned __int16 *)v44)
    {
      v44 += 2;
      v42 += 2;
    }
    if ((unint64_t)v44 < v135 && *v42 == *v44)
      LODWORD(v44) = (_DWORD)v44 + 1;
    LODWORD(v44) = (_DWORD)v44 - (_DWORD)v31;
    goto LABEL_52;
  }
  v37 = a1;
LABEL_65:
  if (v27 > 2)
  {
    v61 = v135;
    v62 = v130;
  }
  else
  {
    v58 = v16;
    FirstIndexHash3 = ZSTD_insertAndFindFirstIndexHash3(v115, a3, a4);
    if (FirstIndexHash3 < v131)
    {
      v61 = v135;
      a4 = v132;
      v62 = v130;
      v20 = v120;
      v15 = v133;
    }
    else
    {
      v15 = v133;
      v60 = v133 - FirstIndexHash3;
      v61 = v135;
      v62 = v130;
      v20 = v120;
      if (!((v133 - FirstIndexHash3) >> 18))
      {
        if (FirstIndexHash3 < v120)
        {
          v63 = ZSTD_count_2segments(v132, (char *)(v123 + FirstIndexHash3), v135, v119, v118);
          v15 = v133;
          v20 = v120;
          a4 = v132;
          v37 = a1;
          goto LABEL_138;
        }
        v94 = (_QWORD *)(v130 + FirstIndexHash3);
        a4 = v132;
        if (v135 - 7 <= (unint64_t)v132)
        {
          v96 = v132;
        }
        else
        {
          v95 = *(_QWORD *)v132 ^ *v94;
          if (v95)
          {
            v63 = __clz(__rbit64(v95)) >> 3;
            goto LABEL_138;
          }
          v98 = v132 + 2;
          while (1)
          {
            v99 = (_QWORD *)((char *)v98 + v95);
            if ((unint64_t)v98 + v95 >= v135 - 7)
              break;
            v100 = *(_QWORD *)(FirstIndexHash3 + v130 + 8 + v95);
            v95 += 8;
            v101 = *v99 ^ v100;
            if (v101)
            {
              v63 = v95 + (__clz(__rbit64(v101)) >> 3);
              goto LABEL_138;
            }
          }
          v96 = (int *)((char *)v132 + v95 + 8);
          v94 = (_QWORD *)(FirstIndexHash3 + v130 + v95 + 8);
        }
        if ((unint64_t)v96 < v135 - 3 && *(_DWORD *)v94 == *v96)
        {
          ++v96;
          v94 = (_QWORD *)((char *)v94 + 4);
        }
        if ((unint64_t)v96 < v135 - 1 && *(unsigned __int16 *)v94 == *(unsigned __int16 *)v96)
        {
          v96 = (int *)((char *)v96 + 2);
          v94 = (_QWORD *)((char *)v94 + 2);
        }
        if ((unint64_t)v96 < v135 && *(unsigned __int8 *)v94 == *(unsigned __int8 *)v96)
          v96 = (int *)((char *)v96 + 1);
        v63 = (char *)v96 - (char *)v132;
LABEL_138:
        if (v63 >= 3)
        {
          *v37 = v60 + 2;
          v37[1] = v63;
          if (v63 > v58 || (int *)((char *)a4 + v63) == (int *)v135)
          {
            v65 = v15 + 1;
            v10 = 1;
            goto LABEL_73;
          }
          v10 = 1;
          v27 = v63;
        }
        goto LABEL_71;
      }
      a4 = v132;
    }
  }
LABEL_71:
  v127 = (unsigned int *)(v129 + 8 * (v15 & ~v111));
  v125 = v127 + 1;
  v64 = v15 + 9;
  *(_DWORD *)(v116 + 4 * v113) = v15;
  if (v18 < v131)
    goto LABEL_72;
  v67 = 0;
  v68 = 0;
  v69 = 1 << v102;
  v70 = v61 - 7;
  v112 = v61 - 1;
  v114 = v61 - 3;
  v117 = v15 + 2;
  v108 = v62 + 8;
  v110 = a4 + 2;
  while (1)
  {
    if (v68 >= v67)
      v71 = v67;
    else
      v71 = v68;
    v72 = v18;
    v73 = (char *)a4 + v71;
    v134 = v69;
    if (v71 + v18 >= v20)
    {
      v82 = v130 + v18;
      v83 = (_QWORD *)(v82 + v71);
      if (v70 <= (unint64_t)v73)
      {
        v86 = (int *)((char *)a4 + v71);
      }
      else
      {
        v84 = *(_QWORD *)v73 ^ *v83;
        if (v84)
        {
          v85 = __clz(__rbit64(v84)) >> 3;
LABEL_98:
          v81 = v85 + v71;
          goto LABEL_99;
        }
        v89 = 0;
        v90 = (char *)v110 + v71;
        while (1)
        {
          v91 = &v90[v89];
          if ((unint64_t)&v90[v89] >= v70)
            break;
          v92 = *(_QWORD *)(v108 + v71 + v18 + v89);
          v89 += 8;
          v93 = *(_QWORD *)v91 ^ v92;
          if (v93)
          {
            v85 = v89 + (__clz(__rbit64(v93)) >> 3);
            goto LABEL_98;
          }
        }
        v86 = (int *)((char *)v110 + v71 + v89);
        v83 = (_QWORD *)(v108 + v71 + v18 + v89);
      }
      if ((unint64_t)v86 < v114 && *(_DWORD *)v83 == *v86)
      {
        ++v86;
        v83 = (_QWORD *)((char *)v83 + 4);
      }
      if ((unint64_t)v86 < v112 && *(unsigned __int16 *)v83 == *(unsigned __int16 *)v86)
      {
        v86 = (_DWORD *)((char *)v86 + 2);
        v83 = (_QWORD *)((char *)v83 + 2);
      }
      if ((unint64_t)v86 < v135 && *(unsigned __int8 *)v83 == *(unsigned __int8 *)v86)
        v86 = (_DWORD *)((char *)v86 + 1);
      v85 = (char *)v86 - v73;
      goto LABEL_98;
    }
    v74 = v123 + v18;
    v75 = v18;
    v76 = v10;
    v77 = v27;
    v78 = v64;
    v79 = v67;
    v80 = ZSTD_count_2segments(v73, (char *)(v74 + v71), v135, v119, v118);
    v64 = v78;
    v27 = v77;
    v10 = v76;
    v18 = v75;
    v67 = v79;
    v20 = v120;
    v81 = v80 + v71;
    v82 = v80 + v71 + v72 >= v120 ? v130 + v72 : v74;
    v37 = a1;
LABEL_99:
    if (v81 <= v27)
    {
      a4 = v132;
    }
    else
    {
      if (v81 <= v64 - v18)
        v64 = v64;
      else
        v64 = v18 + v81;
      v87 = &v37[2 * v10];
      *v87 = v117 - v18;
      v87[1] = v81;
      v10 = (v10 + 1);
      if (v81 > 0x1000)
        goto LABEL_72;
      a4 = v132;
      v27 = v81;
      if ((int *)((char *)v132 + v81) == (int *)v135)
        goto LABEL_72;
    }
    v88 = (unsigned int *)(v129 + 8 * (v18 & v122));
    if (*(unsigned __int8 *)(v82 + v81) >= *((unsigned __int8 *)a4 + v81))
      break;
    *v127 = v18;
    if (v18 <= v121)
    {
      v127 = v136;
      goto LABEL_72;
    }
    ++v88;
    v68 = v81;
    v127 = v88;
LABEL_112:
    v69 = v134 - 1;
    if (v134 != 1)
    {
      v18 = *v88;
      if (*v88 >= v131)
        continue;
    }
    goto LABEL_72;
  }
  *v125 = v18;
  if (v18 > v121)
  {
    v67 = v81;
    v125 = (unsigned int *)(v129 + 8 * (v18 & v122));
    goto LABEL_112;
  }
  v125 = v136;
LABEL_72:
  *v125 = 0;
  *v127 = 0;
  v65 = v64 - 8;
LABEL_73:
  *(_DWORD *)(v115 + 44) = v65;
  return v10;
}

uint64_t ZSTD_btGetAllMatches_extDict_4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v13;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  _QWORD *v34;
  unint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unsigned int *v44;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  _DWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v58;
  unint64_t v59;
  int v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  _DWORD *v78;
  _DWORD *v79;
  unsigned int *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  unint64_t v99;
  unsigned int v100;
  _QWORD *v101;
  char *v102;
  unint64_t v103;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unsigned int *v110;
  _DWORD *v111;
  unsigned int *v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  int v116;
  _DWORD v117[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v13 = a4;
  v15 = a1;
  v16 = (_DWORD)a4 - v8;
  v17 = v16;
  v115 = a7;
  v111 = a6;
  if (v9 < v16)
  {
    do
      LODWORD(v9) = ZSTD_insertBt1(a2, (_QWORD *)(v8 + v9), a5, v16, 4, 1) + v9;
    while (v9 < v16);
    v8 = *(_QWORD *)(a2 + 8);
    v17 = (_DWORD)v13 - v8;
    v15 = a1;
    a7 = v115;
    a6 = v111;
  }
  *(_DWORD *)(a2 + 44) = v16;
  v18 = *(_DWORD *)(a2 + 260);
  if (v18 >= 0xFFF)
    v19 = 4095;
  else
    v19 = v18;
  v20 = *(_QWORD *)(a2 + 96);
  v21 = *v13;
  v86 = *(_DWORD *)(a2 + 252);
  v87 = (-1640531535 * v21) >> -*(_BYTE *)(a2 + 248);
  v22 = *(_DWORD *)(v20 + 4 * v87);
  v113 = *(_QWORD *)(a2 + 112);
  v88 = -1 << (*(_DWORD *)(a2 + 244) - 1);
  v23 = *(unsigned int *)(a2 + 24);
  v107 = *(_QWORD *)(a2 + 16);
  v108 = v8;
  v24 = v17 + v88 + 1;
  if (v17 < ~v88)
    v24 = 0;
  v106 = v24;
  v25 = 1 << *(_DWORD *)(a2 + 240);
  v89 = a2;
  v26 = v17 - *(_DWORD *)(a2 + 28) > v25 && *(_DWORD *)(a2 + 40) == 0;
  v101 = (_QWORD *)(v8 + v23);
  v102 = (char *)(v107 + v23);
  v27 = v17 - v25;
  if (v26)
    v28 = v27;
  else
    v28 = *(_DWORD *)(a2 + 28);
  if (v28 <= 1)
    v29 = 1;
  else
    v29 = v28;
  v109 = v29;
  v117[0] = 0;
  v30 = (a8 - 1);
  v103 = v23;
  v114 = v13;
  v90 = v20;
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v31 = a7 + 3;
    v32 = v17 - v23;
    v33 = v17 - v28;
    v34 = v13 + 1;
    v35 = a5 - 7;
    v36 = v13 + 3;
    v37 = a7;
    v99 = v31;
    v97 = v17 - v23;
    v95 = v17 - v28;
    v93 = v17;
    v91 = v13 + 3;
    while (1)
    {
      if (v37 == 3)
        v38 = *a6 - 1;
      else
        v38 = a6[v37];
      v39 = v17 - v38;
      if (v38 - 1 >= v32)
      {
        if (v38 - 1 < v33 && v23 + ~v39 >= 3)
        {
          v46 = v107 + v39;
          if ((_DWORD)v21 == *(_DWORD *)v46)
          {
            v47 = v34;
            v48 = v19;
            v49 = v21;
            v50 = ZSTD_count_2segments(v34, (char *)(v46 + 4), a5, v102, v101);
            v34 = v47;
            v33 = v95;
            v13 = v114;
            v32 = v97;
            v17 = v93;
            v21 = v49;
            v19 = v48;
            v36 = v91;
            a6 = v111;
            a7 = v115;
            v23 = v103;
            v15 = a1;
            v51 = v50 + 4;
            v31 = v99;
            goto LABEL_54;
          }
        }
LABEL_41:
        v51 = 0;
        goto LABEL_54;
      }
      if (v39 < v28 || (_DWORD)v21 != *(unsigned int *)((char *)v13 - v38))
        goto LABEL_41;
      v41 = -(uint64_t)v38;
      v42 = (_QWORD *)((char *)v34 - v38);
      if (v35 <= (unint64_t)v34)
        break;
      v43 = *v34 ^ *v42;
      if (!v43)
      {
        v53 = 0;
        while (1)
        {
          v44 = &v36[v53];
          if ((unint64_t)&v36[v53] >= v35)
            break;
          v54 = *(_QWORD *)((char *)v36 + v41 + v53 * 4);
          v53 += 2;
          v55 = *(_QWORD *)v44 ^ v54;
          if (v55)
          {
            v44 = (unsigned int *)(v53 * 4 + (__clz(__rbit64(v55)) >> 3));
            goto LABEL_53;
          }
        }
        v42 = (_QWORD *)((char *)v44 + v41);
        goto LABEL_43;
      }
      v44 = (unsigned int *)(__clz(__rbit64(v43)) >> 3);
LABEL_53:
      v51 = (_DWORD)v44 + 4;
LABEL_54:
      if (v30 < v51)
      {
        v52 = (_DWORD *)(v15 + 8 * v10);
        *v52 = v37 - a7;
        v52[1] = v51;
        v10 = (v10 + 1);
        if (v51 > v19)
          return v10;
        v30 = v51;
        if ((unsigned int *)((char *)v13 + v51) == (unsigned int *)a5)
          return v10;
      }
      if (++v37 >= v31)
        goto LABEL_64;
    }
    v44 = (unsigned int *)v34;
LABEL_43:
    if ((unint64_t)v44 < a5 - 3 && *(_DWORD *)v42 == *v44)
    {
      ++v44;
      v42 = (_QWORD *)((char *)v42 + 4);
    }
    if ((unint64_t)v44 < a5 - 1 && *(unsigned __int16 *)v42 == *(unsigned __int16 *)v44)
    {
      v44 = (unsigned int *)((char *)v44 + 2);
      v42 = (_QWORD *)((char *)v42 + 2);
    }
    if ((unint64_t)v44 < a5 && *(unsigned __int8 *)v42 == *(unsigned __int8 *)v44)
      LODWORD(v44) = (_DWORD)v44 + 1;
    LODWORD(v44) = (_DWORD)v44 - (_DWORD)v34;
    goto LABEL_53;
  }
LABEL_64:
  v112 = (unsigned int *)(v113 + 8 * (v17 & ~v88));
  v110 = v112 + 1;
  v56 = v17 + 9;
  *(_DWORD *)(v90 + 4 * v87) = v17;
  if (v22 < v109)
    goto LABEL_65;
  v58 = 0;
  v59 = 0;
  v60 = 1 << v86;
  v61 = a5 - 7;
  v96 = a5 - 1;
  v98 = a5 - 3;
  v100 = v17 + 2;
  v92 = v108 + 8;
  v94 = v13 + 2;
  v105 = a5;
  while (1)
  {
    if (v59 >= v58)
      v62 = v58;
    else
      v62 = v59;
    v63 = v22;
    v64 = (char *)v13 + v62;
    v116 = v60;
    if (v62 + v22 >= v23)
    {
      v74 = v108 + v22;
      v75 = (_QWORD *)(v74 + v62);
      if (v61 <= (unint64_t)v64)
      {
        v78 = (unsigned int *)((char *)v13 + v62);
      }
      else
      {
        v76 = *(_QWORD *)v64 ^ *v75;
        if (v76)
        {
          v77 = __clz(__rbit64(v76)) >> 3;
LABEL_89:
          v73 = v77 + v62;
          goto LABEL_90;
        }
        v81 = 0;
        v82 = (char *)v94 + v62;
        while (1)
        {
          v83 = &v82[v81];
          if ((unint64_t)&v82[v81] >= v61)
            break;
          v84 = *(_QWORD *)(v92 + v62 + v22 + v81);
          v81 += 8;
          v85 = *(_QWORD *)v83 ^ v84;
          if (v85)
          {
            v77 = v81 + (__clz(__rbit64(v85)) >> 3);
            goto LABEL_89;
          }
        }
        v78 = (unsigned int *)((char *)v94 + v62 + v81);
        v75 = (_QWORD *)(v92 + v62 + v22 + v81);
      }
      if ((unint64_t)v78 < v98 && *(_DWORD *)v75 == *v78)
      {
        ++v78;
        v75 = (_QWORD *)((char *)v75 + 4);
      }
      if ((unint64_t)v78 < v96 && *(unsigned __int16 *)v75 == *(unsigned __int16 *)v78)
      {
        v78 = (_DWORD *)((char *)v78 + 2);
        v75 = (_QWORD *)((char *)v75 + 2);
      }
      if ((unint64_t)v78 < a5 && *(unsigned __int8 *)v75 == *(unsigned __int8 *)v78)
        v78 = (_DWORD *)((char *)v78 + 1);
      v77 = (char *)v78 - v64;
      goto LABEL_89;
    }
    v65 = v107 + v22;
    v66 = a5;
    v67 = v22;
    v68 = v10;
    v69 = v30;
    v70 = v61;
    v71 = v58;
    v72 = ZSTD_count_2segments(v64, (char *)(v65 + v62), v66, v102, v101);
    v58 = v71;
    v61 = v70;
    v30 = v69;
    v10 = v68;
    v22 = v67;
    v23 = v103;
    v15 = a1;
    v73 = v72 + v62;
    v74 = v72 + v62 + v63 >= v103 ? v108 + v63 : v65;
LABEL_90:
    if (v73 <= v30)
    {
      v13 = v114;
      a5 = v105;
    }
    else
    {
      if (v73 > v56 - v22)
        v56 = v22 + v73;
      v79 = (_DWORD *)(v15 + 8 * v10);
      *v79 = v100 - v22;
      v79[1] = v73;
      v10 = (v10 + 1);
      v13 = v114;
      a5 = v105;
      if (v73 > 0x1000)
        goto LABEL_65;
      v30 = v73;
      if ((unsigned int *)((char *)v114 + v73) == (unsigned int *)v105)
        goto LABEL_65;
    }
    v80 = (unsigned int *)(v113 + 8 * (v22 & ~v88));
    if (*(unsigned __int8 *)(v74 + v73) >= *((unsigned __int8 *)v13 + v73))
      break;
    *v112 = v22;
    if (v22 <= v106)
    {
      v112 = v117;
      goto LABEL_65;
    }
    ++v80;
    v59 = v73;
    v112 = v80;
LABEL_102:
    v60 = v116 - 1;
    if (v116 != 1)
    {
      v22 = *v80;
      if (*v80 >= v109)
        continue;
    }
    goto LABEL_65;
  }
  *v110 = v22;
  if (v22 > v106)
  {
    v58 = v73;
    v110 = (unsigned int *)(v113 + 8 * (v22 & ~v88));
    goto LABEL_102;
  }
  v110 = v117;
LABEL_65:
  *v110 = 0;
  *v112 = 0;
  *(_DWORD *)(v89 + 44) = v56 - 8;
  return v10;
}

uint64_t ZSTD_btGetAllMatches_extDict_5(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  unsigned int *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unsigned int v95;
  unsigned int v96;
  _QWORD *v98;
  char *v99;
  unint64_t v100;
  unsigned int v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unint64_t v110;
  unsigned int *v111;
  _DWORD *v112;
  unsigned int *v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  unint64_t v117;
  _DWORD v118[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v13 = a4;
  v15 = (_DWORD)a4 - v8;
  v16 = v15;
  v115 = a7;
  v112 = a6;
  if (v9 < v15)
  {
    do
      LODWORD(v9) = ZSTD_insertBt1(a2, (_QWORD *)(v8 + v9), a5, v15, 5, 1) + v9;
    while (v9 < v15);
    v8 = *(_QWORD *)(a2 + 8);
    v16 = (_DWORD)v13 - v8;
    a7 = v115;
    a6 = v112;
  }
  *(_DWORD *)(a2 + 44) = v15;
  v17 = *(_DWORD *)(a2 + 260);
  if (v17 >= 0xFFF)
    v18 = 4095;
  else
    v18 = v17;
  v19 = *(_QWORD *)(a2 + 96);
  v20 = *(_DWORD *)(a2 + 252);
  v21 = (0xCF1BBCDCBB000000 * *v13) >> -*(_BYTE *)(a2 + 248);
  v22 = *(_DWORD *)(v19 + 4 * v21);
  v114 = *(_QWORD *)(a2 + 112);
  v23 = -1 << (*(_DWORD *)(a2 + 244) - 1);
  v24 = *(unsigned int *)(a2 + 24);
  v107 = *(_QWORD *)(a2 + 16);
  v108 = v8;
  v106 = ~v23;
  v25 = v16 + v23 + 1;
  if (v16 < ~v23)
    v25 = 0;
  v105 = v25;
  v26 = 1 << *(_DWORD *)(a2 + 240);
  v89 = a2;
  v27 = v16 - *(_DWORD *)(a2 + 28) > v26 && *(_DWORD *)(a2 + 40) == 0;
  v98 = (_QWORD *)(v8 + v24);
  v99 = (char *)(v107 + v24);
  v28 = v16 - v26;
  if (v27)
    v29 = v28;
  else
    v29 = *(_DWORD *)(a2 + 28);
  if (v29 <= 1)
    v30 = 1;
  else
    v30 = v29;
  v109 = v30;
  v118[0] = 0;
  v117 = (a8 - 1);
  v100 = v24;
  v86 = v21;
  v87 = v19;
  v84 = v20;
  v85 = v23;
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v31 = a7 + 3;
    v32 = v16 - v24;
    v33 = v16 - v29;
    v34 = (_QWORD *)((char *)v13 + 4);
    v35 = a5 - 7;
    v110 = a5 - 3;
    v103 = a5 - 1;
    v36 = (char *)v13 + 12;
    v37 = a7;
    v38 = a1;
    v101 = v29;
    v95 = v16;
    v93 = v16 - v29;
    v90 = a5 - 7;
    while (1)
    {
      if (v37 == 3)
        v39 = *a6 - 1;
      else
        v39 = a6[v37];
      v40 = v16 - v39;
      if (v39 - 1 >= v32)
      {
        if (v39 - 1 < v33 && v24 + ~v40 >= 3)
        {
          v47 = v107 + v40;
          if (*(_DWORD *)v13 == *(_DWORD *)v47)
          {
            v48 = a5;
            v49 = v18;
            v50 = v38;
            v51 = a5;
            v52 = v32;
            v53 = ZSTD_count_2segments((_QWORD *)((char *)v13 + 4), (char *)(v47 + 4), v48, v99, v98);
            v35 = v90;
            v36 = (char *)v13 + 12;
            v33 = v93;
            v32 = v52;
            a5 = v51;
            v16 = v95;
            v38 = v50;
            v18 = v49;
            a6 = v112;
            a7 = v115;
            v24 = v100;
            v54 = v53 + 4;
            v29 = v101;
            goto LABEL_54;
          }
        }
LABEL_41:
        v54 = 0;
        goto LABEL_54;
      }
      if (v40 < v29 || *(_DWORD *)v13 != *(_DWORD *)((char *)v13 - v39))
        goto LABEL_41;
      v42 = -(uint64_t)v39;
      v43 = (char *)v34 - v39;
      if (v35 <= (unint64_t)v34)
        break;
      v44 = *v34 ^ *(_QWORD *)v43;
      if (!v44)
      {
        v56 = 0;
        while (1)
        {
          v45 = &v36[v56];
          if ((unint64_t)&v36[v56] >= v35)
            break;
          v57 = *(_QWORD *)&v36[v42 + v56];
          v56 += 8;
          v58 = *(_QWORD *)v45 ^ v57;
          if (v58)
          {
            v45 = (char *)(v56 + (__clz(__rbit64(v58)) >> 3));
            goto LABEL_53;
          }
        }
        v43 = &v45[v42];
        goto LABEL_43;
      }
      v45 = (char *)(__clz(__rbit64(v44)) >> 3);
LABEL_53:
      v54 = (_DWORD)v45 + 4;
LABEL_54:
      if (v117 < v54)
      {
        v55 = (_DWORD *)(v38 + 8 * v10);
        *v55 = v37 - a7;
        v55[1] = v54;
        v10 = (v10 + 1);
        if (v54 > v18)
          return v10;
        v117 = v54;
        if ((_QWORD *)((char *)v13 + v54) == (_QWORD *)a5)
          return v10;
      }
      if (++v37 >= v31)
        goto LABEL_65;
    }
    v45 = (char *)v13 + 4;
LABEL_43:
    if ((unint64_t)v45 < v110 && *(_DWORD *)v43 == *(_DWORD *)v45)
    {
      v45 += 4;
      v43 += 4;
    }
    if ((unint64_t)v45 < v103 && *(unsigned __int16 *)v43 == *(unsigned __int16 *)v45)
    {
      v45 += 2;
      v43 += 2;
    }
    if ((unint64_t)v45 < a5 && *v43 == *v45)
      LODWORD(v45) = (_DWORD)v45 + 1;
    LODWORD(v45) = (_DWORD)v45 - (_DWORD)v34;
    goto LABEL_53;
  }
  v38 = a1;
LABEL_65:
  v113 = (unsigned int *)(v114 + 8 * (v16 & ~v85));
  v111 = v113 + 1;
  v59 = v16 + 9;
  *(_DWORD *)(v87 + 4 * v86) = v16;
  if (v22 < v109)
    goto LABEL_66;
  v61 = 0;
  v62 = 0;
  v63 = 1 << v84;
  v64 = a5 - 7;
  v92 = a5 - 1;
  v94 = a5 - 3;
  v96 = v16 + 2;
  v91 = v13 + 1;
  v88 = v108 + 8;
  v102 = v13;
  v104 = a5;
  while (1)
  {
    if (v62 >= v61)
      v65 = v61;
    else
      v65 = v62;
    v66 = (char *)v13 + v65;
    v116 = v63;
    if (v65 + v22 >= v24)
    {
      v72 = v108 + v22;
      v73 = (_QWORD *)(v72 + v65);
      if (v64 <= (unint64_t)v66)
      {
        v76 = (_DWORD *)((char *)v13 + v65);
      }
      else
      {
        v74 = *(_QWORD *)v66 ^ *v73;
        if (v74)
        {
          v75 = __clz(__rbit64(v74)) >> 3;
LABEL_91:
          v71 = v75 + v65;
          goto LABEL_92;
        }
        v79 = 0;
        v80 = (char *)v91 + v65;
        while (1)
        {
          v81 = &v80[v79];
          if ((unint64_t)&v80[v79] >= v64)
            break;
          v82 = *(_QWORD *)(v88 + v65 + v22 + v79);
          v79 += 8;
          v83 = *(_QWORD *)v81 ^ v82;
          if (v83)
          {
            v75 = v79 + (__clz(__rbit64(v83)) >> 3);
            goto LABEL_91;
          }
        }
        v76 = (_DWORD *)((char *)v91 + v65 + v79);
        v73 = (_QWORD *)(v88 + v65 + v22 + v79);
      }
      if ((unint64_t)v76 < v94 && *(_DWORD *)v73 == *v76)
      {
        ++v76;
        v73 = (_QWORD *)((char *)v73 + 4);
      }
      if ((unint64_t)v76 < v92 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v76)
      {
        v76 = (_DWORD *)((char *)v76 + 2);
        v73 = (_QWORD *)((char *)v73 + 2);
      }
      if ((unint64_t)v76 < a5 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v76)
        v76 = (_DWORD *)((char *)v76 + 1);
      v75 = (char *)v76 - v66;
      goto LABEL_91;
    }
    v67 = v59;
    v68 = a5;
    v69 = v64;
    v70 = ZSTD_count_2segments(v66, (char *)(v107 + v22 + v65), v68, v99, v98);
    v59 = v67;
    v64 = v69;
    v24 = v100;
    v71 = v70 + v65;
    v72 = v70 + v65 + v22 >= v100 ? v108 + v22 : v107 + v22;
    v38 = a1;
LABEL_92:
    if (v71 <= v117)
    {
      v13 = v102;
      a5 = v104;
    }
    else
    {
      if (v71 <= v59 - v22)
        v59 = v59;
      else
        v59 = v22 + v71;
      v77 = (_DWORD *)(v38 + 8 * v10);
      *v77 = v96 - v22;
      v77[1] = v71;
      v10 = (v10 + 1);
      v13 = v102;
      a5 = v104;
      if (v71 > 0x1000)
        goto LABEL_66;
      v117 = v71;
      if ((_QWORD *)((char *)v102 + v71) == (_QWORD *)v104)
        goto LABEL_66;
    }
    v78 = (unsigned int *)(v114 + 8 * (v22 & v106));
    if (*(unsigned __int8 *)(v72 + v71) >= *((unsigned __int8 *)v13 + v71))
      break;
    *v113 = v22;
    if (v22 <= v105)
    {
      v113 = v118;
      goto LABEL_66;
    }
    ++v78;
    v62 = v71;
    v113 = v78;
LABEL_105:
    v63 = v116 - 1;
    if (v116 != 1)
    {
      v22 = *v78;
      if (*v78 >= v109)
        continue;
    }
    goto LABEL_66;
  }
  *v111 = v22;
  if (v22 > v105)
  {
    v61 = v71;
    v111 = (unsigned int *)(v114 + 8 * (v22 & v106));
    goto LABEL_105;
  }
  v111 = v118;
LABEL_66:
  *v111 = 0;
  *v113 = 0;
  *(_DWORD *)(v89 + 44) = v59 - 8;
  return v10;
}

uint64_t ZSTD_btGetAllMatches_extDict_6(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  _DWORD *v76;
  _DWORD *v77;
  unsigned int *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  int v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  unint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unsigned int v95;
  unsigned int v96;
  _QWORD *v98;
  char *v99;
  unint64_t v100;
  unsigned int v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  unint64_t v110;
  unsigned int *v111;
  _DWORD *v112;
  unsigned int *v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  unint64_t v117;
  _DWORD v118[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v13 = a4;
  v15 = (_DWORD)a4 - v8;
  v16 = v15;
  v115 = a7;
  v112 = a6;
  if (v9 < v15)
  {
    do
      LODWORD(v9) = ZSTD_insertBt1(a2, (_QWORD *)(v8 + v9), a5, v15, 6, 1) + v9;
    while (v9 < v15);
    v8 = *(_QWORD *)(a2 + 8);
    v16 = (_DWORD)v13 - v8;
    a7 = v115;
    a6 = v112;
  }
  *(_DWORD *)(a2 + 44) = v15;
  v17 = *(_DWORD *)(a2 + 260);
  if (v17 >= 0xFFF)
    v18 = 4095;
  else
    v18 = v17;
  v19 = *(_QWORD *)(a2 + 96);
  v20 = *(_DWORD *)(a2 + 252);
  v21 = (0xCF1BBCDCBF9B0000 * *v13) >> -*(_BYTE *)(a2 + 248);
  v22 = *(_DWORD *)(v19 + 4 * v21);
  v114 = *(_QWORD *)(a2 + 112);
  v23 = -1 << (*(_DWORD *)(a2 + 244) - 1);
  v24 = *(unsigned int *)(a2 + 24);
  v107 = *(_QWORD *)(a2 + 16);
  v108 = v8;
  v106 = ~v23;
  v25 = v16 + v23 + 1;
  if (v16 < ~v23)
    v25 = 0;
  v105 = v25;
  v26 = 1 << *(_DWORD *)(a2 + 240);
  v89 = a2;
  v27 = v16 - *(_DWORD *)(a2 + 28) > v26 && *(_DWORD *)(a2 + 40) == 0;
  v98 = (_QWORD *)(v8 + v24);
  v99 = (char *)(v107 + v24);
  v28 = v16 - v26;
  if (v27)
    v29 = v28;
  else
    v29 = *(_DWORD *)(a2 + 28);
  if (v29 <= 1)
    v30 = 1;
  else
    v30 = v29;
  v109 = v30;
  v118[0] = 0;
  v117 = (a8 - 1);
  v100 = v24;
  v86 = v21;
  v87 = v19;
  v84 = v20;
  v85 = v23;
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v31 = a7 + 3;
    v32 = v16 - v24;
    v33 = v16 - v29;
    v34 = (_QWORD *)((char *)v13 + 4);
    v35 = a5 - 7;
    v110 = a5 - 3;
    v103 = a5 - 1;
    v36 = (char *)v13 + 12;
    v37 = a7;
    v38 = a1;
    v101 = v29;
    v95 = v16;
    v93 = v16 - v29;
    v90 = a5 - 7;
    while (1)
    {
      if (v37 == 3)
        v39 = *a6 - 1;
      else
        v39 = a6[v37];
      v40 = v16 - v39;
      if (v39 - 1 >= v32)
      {
        if (v39 - 1 < v33 && v24 + ~v40 >= 3)
        {
          v47 = v107 + v40;
          if (*(_DWORD *)v13 == *(_DWORD *)v47)
          {
            v48 = a5;
            v49 = v18;
            v50 = v38;
            v51 = a5;
            v52 = v32;
            v53 = ZSTD_count_2segments((_QWORD *)((char *)v13 + 4), (char *)(v47 + 4), v48, v99, v98);
            v35 = v90;
            v36 = (char *)v13 + 12;
            v33 = v93;
            v32 = v52;
            a5 = v51;
            v16 = v95;
            v38 = v50;
            v18 = v49;
            a6 = v112;
            a7 = v115;
            v24 = v100;
            v54 = v53 + 4;
            v29 = v101;
            goto LABEL_54;
          }
        }
LABEL_41:
        v54 = 0;
        goto LABEL_54;
      }
      if (v40 < v29 || *(_DWORD *)v13 != *(_DWORD *)((char *)v13 - v39))
        goto LABEL_41;
      v42 = -(uint64_t)v39;
      v43 = (char *)v34 - v39;
      if (v35 <= (unint64_t)v34)
        break;
      v44 = *v34 ^ *(_QWORD *)v43;
      if (!v44)
      {
        v56 = 0;
        while (1)
        {
          v45 = &v36[v56];
          if ((unint64_t)&v36[v56] >= v35)
            break;
          v57 = *(_QWORD *)&v36[v42 + v56];
          v56 += 8;
          v58 = *(_QWORD *)v45 ^ v57;
          if (v58)
          {
            v45 = (char *)(v56 + (__clz(__rbit64(v58)) >> 3));
            goto LABEL_53;
          }
        }
        v43 = &v45[v42];
        goto LABEL_43;
      }
      v45 = (char *)(__clz(__rbit64(v44)) >> 3);
LABEL_53:
      v54 = (_DWORD)v45 + 4;
LABEL_54:
      if (v117 < v54)
      {
        v55 = (_DWORD *)(v38 + 8 * v10);
        *v55 = v37 - a7;
        v55[1] = v54;
        v10 = (v10 + 1);
        if (v54 > v18)
          return v10;
        v117 = v54;
        if ((_QWORD *)((char *)v13 + v54) == (_QWORD *)a5)
          return v10;
      }
      if (++v37 >= v31)
        goto LABEL_65;
    }
    v45 = (char *)v13 + 4;
LABEL_43:
    if ((unint64_t)v45 < v110 && *(_DWORD *)v43 == *(_DWORD *)v45)
    {
      v45 += 4;
      v43 += 4;
    }
    if ((unint64_t)v45 < v103 && *(unsigned __int16 *)v43 == *(unsigned __int16 *)v45)
    {
      v45 += 2;
      v43 += 2;
    }
    if ((unint64_t)v45 < a5 && *v43 == *v45)
      LODWORD(v45) = (_DWORD)v45 + 1;
    LODWORD(v45) = (_DWORD)v45 - (_DWORD)v34;
    goto LABEL_53;
  }
  v38 = a1;
LABEL_65:
  v113 = (unsigned int *)(v114 + 8 * (v16 & ~v85));
  v111 = v113 + 1;
  v59 = v16 + 9;
  *(_DWORD *)(v87 + 4 * v86) = v16;
  if (v22 < v109)
    goto LABEL_66;
  v61 = 0;
  v62 = 0;
  v63 = 1 << v84;
  v64 = a5 - 7;
  v92 = a5 - 1;
  v94 = a5 - 3;
  v96 = v16 + 2;
  v91 = v13 + 1;
  v88 = v108 + 8;
  v102 = v13;
  v104 = a5;
  while (1)
  {
    if (v62 >= v61)
      v65 = v61;
    else
      v65 = v62;
    v66 = (char *)v13 + v65;
    v116 = v63;
    if (v65 + v22 >= v24)
    {
      v72 = v108 + v22;
      v73 = (_QWORD *)(v72 + v65);
      if (v64 <= (unint64_t)v66)
      {
        v76 = (_DWORD *)((char *)v13 + v65);
      }
      else
      {
        v74 = *(_QWORD *)v66 ^ *v73;
        if (v74)
        {
          v75 = __clz(__rbit64(v74)) >> 3;
LABEL_91:
          v71 = v75 + v65;
          goto LABEL_92;
        }
        v79 = 0;
        v80 = (char *)v91 + v65;
        while (1)
        {
          v81 = &v80[v79];
          if ((unint64_t)&v80[v79] >= v64)
            break;
          v82 = *(_QWORD *)(v88 + v65 + v22 + v79);
          v79 += 8;
          v83 = *(_QWORD *)v81 ^ v82;
          if (v83)
          {
            v75 = v79 + (__clz(__rbit64(v83)) >> 3);
            goto LABEL_91;
          }
        }
        v76 = (_DWORD *)((char *)v91 + v65 + v79);
        v73 = (_QWORD *)(v88 + v65 + v22 + v79);
      }
      if ((unint64_t)v76 < v94 && *(_DWORD *)v73 == *v76)
      {
        ++v76;
        v73 = (_QWORD *)((char *)v73 + 4);
      }
      if ((unint64_t)v76 < v92 && *(unsigned __int16 *)v73 == *(unsigned __int16 *)v76)
      {
        v76 = (_DWORD *)((char *)v76 + 2);
        v73 = (_QWORD *)((char *)v73 + 2);
      }
      if ((unint64_t)v76 < a5 && *(unsigned __int8 *)v73 == *(unsigned __int8 *)v76)
        v76 = (_DWORD *)((char *)v76 + 1);
      v75 = (char *)v76 - v66;
      goto LABEL_91;
    }
    v67 = v59;
    v68 = a5;
    v69 = v64;
    v70 = ZSTD_count_2segments(v66, (char *)(v107 + v22 + v65), v68, v99, v98);
    v59 = v67;
    v64 = v69;
    v24 = v100;
    v71 = v70 + v65;
    v72 = v70 + v65 + v22 >= v100 ? v108 + v22 : v107 + v22;
    v38 = a1;
LABEL_92:
    if (v71 <= v117)
    {
      v13 = v102;
      a5 = v104;
    }
    else
    {
      if (v71 <= v59 - v22)
        v59 = v59;
      else
        v59 = v22 + v71;
      v77 = (_DWORD *)(v38 + 8 * v10);
      *v77 = v96 - v22;
      v77[1] = v71;
      v10 = (v10 + 1);
      v13 = v102;
      a5 = v104;
      if (v71 > 0x1000)
        goto LABEL_66;
      v117 = v71;
      if ((_QWORD *)((char *)v102 + v71) == (_QWORD *)v104)
        goto LABEL_66;
    }
    v78 = (unsigned int *)(v114 + 8 * (v22 & v106));
    if (*(unsigned __int8 *)(v72 + v71) >= *((unsigned __int8 *)v13 + v71))
      break;
    *v113 = v22;
    if (v22 <= v105)
    {
      v113 = v118;
      goto LABEL_66;
    }
    ++v78;
    v62 = v71;
    v113 = v78;
LABEL_105:
    v63 = v116 - 1;
    if (v116 != 1)
    {
      v22 = *v78;
      if (*v78 >= v109)
        continue;
    }
    goto LABEL_66;
  }
  *v111 = v22;
  if (v22 > v105)
  {
    v61 = v71;
    v111 = (unsigned int *)(v114 + 8 * (v22 & v106));
    goto LABEL_105;
  }
  v111 = v118;
LABEL_66:
  *v111 = 0;
  *v113 = 0;
  *(_DWORD *)(v89 + 44) = v59 - 8;
  return v10;
}

uint64_t ZSTD_btGetAllMatches_dictMatchState_3(_DWORD *a1, uint64_t a2, _DWORD *a3, int *a4, unint64_t a5, _DWORD *a6, unsigned int a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v13;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  BOOL v59;
  uint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int *v68;
  unint64_t v69;
  char *v70;
  int v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int FirstIndexHash3;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  int *v85;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int *v93;
  char *v94;
  unsigned int v95;
  int *v96;
  uint64_t v97;
  int v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  int *v105;
  unint64_t v106;
  _DWORD *v107;
  unsigned int *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  unsigned int v115;
  unint64_t v116;
  unint64_t v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _DWORD *v123;
  unsigned int v124;
  unsigned int v125;
  _BOOL4 v126;
  int *v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  unsigned int v132;
  _DWORD *v133;
  unint64_t v134;
  _QWORD *v135;
  unsigned int v136;
  unint64_t v137;
  uint64_t v138;
  unsigned int v139;
  char v140;
  uint64_t v141;
  int v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  _DWORD *v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  int v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int v162;
  char *v164;
  _QWORD *v165;
  unsigned int v166;
  unint64_t v167;
  _DWORD v168[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v13 = a4;
  v16 = (_DWORD)a4 - v8;
  v17 = (_DWORD)a4 - v8;
  v152 = a7;
  v151 = a6;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = ZSTD_insertBt1(a2, (_QWORD *)(v8 + v9), a5, v16, 3, 0) + v9;
    while (v9 < v16);
    v8 = *(_QWORD *)(a2 + 8);
    v17 = (_DWORD)v13 - v8;
    a7 = v152;
    a6 = v151;
  }
  v148 = v8;
  *(_DWORD *)(a2 + 44) = v16;
  v18 = *(_DWORD *)(a2 + 260);
  if (v18 >= 0xFFF)
    v18 = 4095;
  v153 = v18;
  v19 = *(_QWORD *)(a2 + 96);
  v20 = *v13;
  v21 = *(_DWORD *)(a2 + 252);
  v22 = (-1640531535 * v20) >> -*(_BYTE *)(a2 + 248);
  v23 = *(_DWORD *)(v19 + 4 * v22);
  v146 = *(_QWORD *)(a2 + 112);
  v24 = -1 << (*(_DWORD *)(a2 + 244) - 1);
  v150 = ~v24;
  v25 = *(unsigned int *)(a2 + 24);
  v26 = *(_DWORD *)(a2 + 28);
  v165 = (_QWORD *)(v8 + v25);
  v27 = v17 + v24 + 1;
  if (v17 < ~v24)
    v27 = 0;
  v158 = v27;
  v28 = 1 << *(_DWORD *)(a2 + 240);
  if (v17 - v26 > v28 && *(_DWORD *)(a2 + 40) == 0)
    v30 = v17 - v28;
  else
    v30 = v26;
  if (v30 <= 1)
    v31 = 1;
  else
    v31 = v30;
  v168[0] = 0;
  v32 = *(_QWORD *)(a2 + 232);
  v33 = *(_QWORD *)(v32 + 8);
  v164 = *(char **)v32;
  v34 = *(_QWORD *)v32 - v33;
  v35 = *(_DWORD *)(v32 + 28);
  v36 = v30 - (*(_QWORD *)v32 - v33);
  v141 = v32;
  v37 = v34 + (-1 << (*(_DWORD *)(v32 + 244) - 1)) + 1;
  if ((int)v34 - v35 <= ~(-1 << (*(_DWORD *)(v32 + 244) - 1)))
    v37 = *(_DWORD *)(v32 + 28);
  v159 = ~(-1 << (*(_DWORD *)(v32 + 244) - 1));
  v160 = v37;
  v38 = (a8 - 1);
  v149 = a2;
  v167 = a5;
  v156 = v17;
  v166 = v31;
  v161 = *(_QWORD *)(v32 + 8);
  v162 = *(_DWORD *)(v32 + 28);
  v155 = v30 - (*(_QWORD *)v32 - v33);
  v132 = *(_DWORD *)v32 - v33;
  v133 = a3;
  v140 = *(_DWORD *)(v32 + 248);
  v144 = v22;
  v145 = v19;
  v143 = v21;
  v142 = v24;
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v39 = a7 + 3;
    v40 = v17 - v25;
    v41 = v17 - v35 - v36;
    v42 = (_QWORD *)((char *)v13 + 3);
    v43 = a5 - 7;
    v44 = a5 - 3;
    v45 = a5 - 1;
    v46 = (char *)v13 + 11;
    v47 = v33 - v36;
    v48 = a7;
    v49 = v153;
    v50 = v30;
    v51 = a1;
    v139 = v23;
    v137 = v39;
    v138 = v47;
    v136 = v17 - v25;
    v134 = a5 - 7;
    v135 = (_QWORD *)((char *)v13 + 3);
    while (1)
    {
      v52 = v48 == 3 ? *a6 - 1 : a6[v48];
      v53 = v17 - v52;
      if (v52 - 1 < v40)
        break;
      v59 = v52 - 1 < v41 && v25 + ~v53 >= 3;
      if (!v59 || (v60 = v47 + v53, ((*(_DWORD *)v60 ^ v20) & 0xFFFFFF) != 0))
      {
LABEL_41:
        v61 = 0;
        goto LABEL_55;
      }
      v62 = v42;
      v63 = v20;
      v64 = v25;
      v65 = v50;
      v66 = v41;
      v67 = v44;
      v147 = v38;
      v68 = v13;
      v69 = v45;
      v70 = v46;
      v71 = ZSTD_count_2segments(v62, (char *)(v60 + 3), v167, v164, v165);
      v39 = v137;
      v46 = v70;
      v45 = v69;
      v13 = v68;
      v38 = v147;
      v23 = v139;
      v44 = v67;
      v41 = v66;
      v50 = v65;
      v43 = v134;
      v42 = v135;
      v25 = v64;
      a7 = v152;
      v49 = v153;
      v20 = v63;
      v40 = v136;
      a6 = v151;
      v31 = v166;
      v17 = v156;
      v51 = a1;
      v61 = v71 + 3;
      v47 = v138;
LABEL_55:
      if (v38 < v61)
      {
        v72 = &v51[2 * v10];
        *v72 = v48 - a7;
        v72[1] = v61;
        v10 = (v10 + 1);
        if (v61 > v49)
          return v10;
        v38 = v61;
        if ((int *)((char *)v13 + v61) == (int *)v167)
          return v10;
      }
      if (++v48 >= v39)
        goto LABEL_66;
    }
    if (v53 < v50 || ((*(int *)((char *)v13 - v52) ^ v20) & 0xFFFFFF) != 0)
      goto LABEL_41;
    v55 = -(uint64_t)v52;
    v56 = (char *)v42 - v52;
    if (v43 <= (unint64_t)v42)
    {
      v58 = (char *)v42;
    }
    else
    {
      v57 = *v42 ^ *(_QWORD *)v56;
      if (v57)
      {
        v58 = (char *)(__clz(__rbit64(v57)) >> 3);
LABEL_53:
        v61 = (_DWORD)v58 + 3;
        goto LABEL_55;
      }
      v73 = 0;
      while (1)
      {
        v58 = &v46[v73];
        if ((unint64_t)&v46[v73] >= v43)
          break;
        v74 = *(_QWORD *)&v46[v55 + v73];
        v73 += 8;
        v75 = *(_QWORD *)v58 ^ v74;
        if (v75)
        {
          v58 = (char *)(v73 + (__clz(__rbit64(v75)) >> 3));
          goto LABEL_53;
        }
      }
      v56 = &v58[v55];
    }
    if ((unint64_t)v58 < v44 && *(_DWORD *)v56 == *(_DWORD *)v58)
    {
      v58 += 4;
      v56 += 4;
    }
    if ((unint64_t)v58 < v45 && *(unsigned __int16 *)v56 == *(unsigned __int16 *)v58)
    {
      v58 += 2;
      v56 += 2;
    }
    if ((unint64_t)v58 < v167 && *v56 == *v58)
      LODWORD(v58) = (_DWORD)v58 + 1;
    LODWORD(v58) = (_DWORD)v58 - (_DWORD)v42;
    goto LABEL_53;
  }
  v51 = a1;
LABEL_66:
  if (v38 > 2)
  {
    v78 = (int *)v167;
    v79 = v148;
    v80 = v146;
    v81 = v158;
  }
  else
  {
    v76 = v149;
    FirstIndexHash3 = ZSTD_insertAndFindFirstIndexHash3(v149, v133, v13);
    v31 = v166;
    v78 = (int *)v167;
    v79 = v148;
    v80 = v146;
    v81 = v158;
    if (FirstIndexHash3 < v166)
    {
      v51 = a1;
      v17 = v156;
    }
    else
    {
      v17 = v156;
      v51 = a1;
      if (!((v156 - FirstIndexHash3) >> 18))
      {
        v82 = (_QWORD *)(v148 + FirstIndexHash3);
        if (v167 - 7 <= (unint64_t)v13)
        {
          v85 = v13;
        }
        else
        {
          v83 = *(_QWORD *)v13 ^ *v82;
          if (v83)
          {
            v84 = __clz(__rbit64(v83)) >> 3;
            goto LABEL_85;
          }
          v128 = v13 + 2;
          while (1)
          {
            v129 = (_QWORD *)((char *)v128 + v83);
            if ((unint64_t)v128 + v83 >= v167 - 7)
              break;
            v130 = *(_QWORD *)(FirstIndexHash3 + v148 + 8 + v83);
            v83 += 8;
            v131 = *v129 ^ v130;
            if (v131)
            {
              v84 = v83 + (__clz(__rbit64(v131)) >> 3);
              goto LABEL_85;
            }
          }
          v85 = (int *)((char *)v13 + v83 + 8);
          v82 = (_QWORD *)(FirstIndexHash3 + v148 + v83 + 8);
        }
        if ((unint64_t)v85 < v167 - 3 && *(_DWORD *)v82 == *v85)
        {
          ++v85;
          v82 = (_QWORD *)((char *)v82 + 4);
        }
        if ((unint64_t)v85 < v167 - 1 && *(unsigned __int16 *)v82 == *(unsigned __int16 *)v85)
        {
          v85 = (int *)((char *)v85 + 2);
          v82 = (_QWORD *)((char *)v82 + 2);
        }
        if ((unint64_t)v85 < v167 && *(unsigned __int8 *)v82 == *(unsigned __int8 *)v85)
          v85 = (int *)((char *)v85 + 1);
        v84 = (char *)v85 - (char *)v13;
LABEL_85:
        if (v84 >= 3)
        {
          *a1 = v156 - FirstIndexHash3 + 2;
          a1[1] = v84;
          if (v84 > v153 || (int *)((char *)v13 + v84) == (int *)v167)
          {
            v87 = v156 + 1;
            v10 = 1;
            goto LABEL_158;
          }
          v10 = 1;
          v38 = v84;
        }
      }
    }
  }
  v88 = (unsigned int *)(v80 + 8 * (v17 & ~v142));
  v89 = v17 + 9;
  v90 = 1 << v143;
  *(_DWORD *)(v145 + 4 * v144) = v17;
  if (v23 < v31)
  {
    *(_QWORD *)v88 = 0;
    goto LABEL_137;
  }
  v91 = 0;
  v92 = 0;
  v93 = v88 + 1;
  v94 = (char *)v78 - 7;
  v95 = v17 + 2;
  v96 = v13 + 2;
  v97 = v79 + 8;
  v98 = v150;
  while (1)
  {
    v99 = v92 >= v91 ? v91 : v92;
    v100 = v79 + v23;
    v101 = (char *)v13 + v99;
    v102 = (_QWORD *)(v100 + v99);
    if (v94 <= (char *)v13 + v99)
    {
      v105 = (int *)((char *)v13 + v99);
    }
    else
    {
      v103 = *(_QWORD *)v101 ^ *v102;
      if (v103)
      {
        v104 = __clz(__rbit64(v103)) >> 3;
        goto LABEL_112;
      }
      v110 = 0;
      v111 = (char *)v96 + v99;
      while (1)
      {
        v112 = &v111[v110];
        if (&v111[v110] >= v94)
          break;
        v113 = *(_QWORD *)(v97 + v99 + v23 + v110);
        v110 += 8;
        v114 = *(_QWORD *)v112 ^ v113;
        if (v114)
        {
          v104 = v110 + (__clz(__rbit64(v114)) >> 3);
          v98 = v150;
          v81 = v158;
          v31 = v166;
          goto LABEL_112;
        }
      }
      v105 = (int *)((char *)v96 + v99 + v110);
      v102 = (_QWORD *)(v97 + v99 + v23 + v110);
      v98 = v150;
      v81 = v158;
    }
    if (v105 < (int *)((char *)v78 - 3) && *(_DWORD *)v102 == *v105)
    {
      ++v105;
      v102 = (_QWORD *)((char *)v102 + 4);
    }
    if (v105 < (int *)((char *)v78 - 1) && *(unsigned __int16 *)v102 == *(unsigned __int16 *)v105)
    {
      v105 = (int *)((char *)v105 + 2);
      v102 = (_QWORD *)((char *)v102 + 2);
    }
    if (v105 < v78 && *(unsigned __int8 *)v102 == *(unsigned __int8 *)v105)
      v105 = (int *)((char *)v105 + 1);
    v31 = v166;
    v104 = (char *)v105 - v101;
LABEL_112:
    v106 = v104 + v99;
    if (v106 > v38)
    {
      if (v106 > v89 - v23)
        v89 = v23 + v106;
      v107 = &v51[2 * v10];
      *v107 = v95 - v23;
      v107[1] = v106;
      v10 = (v10 + 1);
      if (v106 > 0x1000 || (int *)((char *)v13 + v106) == v78)
      {
        *v93 = 0;
        *v88 = 0;
        goto LABEL_157;
      }
      v38 = v106;
    }
    v109 = (unsigned int *)(v80 + 8 * (v23 & v98));
    if (*(unsigned __int8 *)(v100 + v106) >= *((unsigned __int8 *)v13 + v106))
      break;
    *v88 = v23;
    if (v23 <= v81)
    {
      v88 = v168;
      goto LABEL_136;
    }
    ++v109;
    v92 = v106;
    v88 = v109;
LABEL_125:
    if (--v90)
    {
      v23 = *v109;
      if (*v109 >= v31)
        continue;
    }
    goto LABEL_136;
  }
  *v93 = v23;
  if (v23 > v81)
  {
    v91 = v106;
    v93 = (unsigned int *)(v80 + 8 * (v23 & v98));
    goto LABEL_125;
  }
  v93 = v168;
LABEL_136:
  *v93 = 0;
  *v88 = 0;
  v17 = v156;
  if (v90)
  {
LABEL_137:
    v115 = *(_DWORD *)(*(_QWORD *)(v141 + 96) + 4 * ((-1640531535 * *v13) >> -v140));
    if (v115 > v162)
    {
      v116 = 0;
      v117 = 0;
      v157 = *(_QWORD *)(v141 + 112);
      v154 = v17 + 2;
      v118 = v90 - 1;
      do
      {
        if (v117 >= v116)
          v119 = v116;
        else
          v119 = v117;
        v120 = ZSTD_count_2segments((int *)((char *)v13 + v119), (char *)(v161 + v115 + v119), v167, v164, v165);
        v121 = v120 + v119;
        if (v120 + v119 + v115 >= v132)
          v122 = v148 + v155 + v115;
        else
          v122 = v161 + v115;
        if (v121 > v38)
        {
          if (v121 > v89 - (v115 + v155))
            v89 = v115 + v155 + v121;
          v123 = &a1[2 * v10];
          *v123 = v154 - (v115 + v155);
          v123[1] = v121;
          v10 = (v10 + 1);
          if (v121 > 0x1000)
            break;
          v38 = v120 + v119;
          if ((int *)((char *)v13 + v121) == (int *)v167)
            break;
        }
        if (v115 <= v160)
          break;
        v124 = *(unsigned __int8 *)(v122 + v121);
        v125 = *((unsigned __int8 *)v13 + v121);
        v59 = v124 >= v125;
        v126 = v124 < v125;
        if (v59)
          v116 = v120 + v119;
        else
          v117 = v120 + v119;
        v59 = v118-- != 0;
        if (!v59)
          break;
        v115 = *(_DWORD *)(v157 + 8 * (v115 & v159) + 4 * v126);
      }
      while (v115 > v162);
    }
  }
LABEL_157:
  v87 = v89 - 8;
  v76 = v149;
LABEL_158:
  *(_DWORD *)(v76 + 44) = v87;
  return v10;
}

uint64_t ZSTD_btGetAllMatches_dictMatchState_4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unint64_t a5, _DWORD *a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  _QWORD *v49;
  BOOL v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  unsigned int *v72;
  unint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  _DWORD *v82;
  unint64_t v83;
  _DWORD *v84;
  unsigned int *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t v93;
  unint64_t v94;
  int v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  unsigned int v101;
  unsigned int v102;
  _BOOL4 v103;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  _DWORD *v116;
  unint64_t v117;
  _QWORD *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int v124;
  unint64_t v125;
  unsigned int v126;
  unsigned int v127;
  _DWORD *v129;
  _DWORD *v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  char *v136;
  _QWORD *v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _DWORD v142[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v14 = a4;
  v129 = a6;
  v16 = (_DWORD)a4 - v8;
  v17 = (_DWORD)a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = ZSTD_insertBt1(a2, (_QWORD *)(v8 + v9), a5, v16, 4, 0) + v9;
    while (v9 < v16);
    v8 = *(_QWORD *)(a2 + 8);
    v17 = (_DWORD)v14 - v8;
    a6 = v129;
  }
  *(_DWORD *)(a2 + 44) = v16;
  v18 = *(_DWORD *)(a2 + 260);
  if (v18 >= 0xFFF)
    v19 = 4095;
  else
    v19 = v18;
  v20 = *v14;
  v110 = *(_DWORD *)(a2 + 252);
  v111 = (-1640531535 * v20) >> -*(_BYTE *)(a2 + 248);
  v21 = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 4 * v111);
  v112 = *(_QWORD *)(a2 + 96);
  v113 = *(_QWORD *)(a2 + 112);
  v109 = -1 << (*(_DWORD *)(a2 + 244) - 1);
  v22 = *(unsigned int *)(a2 + 24);
  v139 = v8;
  v137 = (_QWORD *)(v8 + v22);
  v106 = ~v109;
  v23 = v17 + v109 + 1;
  if (v17 < ~v109)
    v23 = 0;
  v124 = v23;
  v24 = 1 << *(_DWORD *)(a2 + 240);
  if (v17 - *(_DWORD *)(a2 + 28) > v24 && *(_DWORD *)(a2 + 40) == 0)
    v26 = v17 - v24;
  else
    v26 = *(_DWORD *)(a2 + 28);
  if (v26 <= 1)
    v27 = 1;
  else
    v27 = v26;
  v138 = v27;
  v142[0] = 0;
  v114 = a2;
  v28 = *(_QWORD *)(a2 + 232);
  v29 = *(_QWORD *)(v28 + 8);
  v136 = *(char **)v28;
  v30 = *(_DWORD *)(v28 + 28);
  v31 = v26 - (*(_QWORD *)v28 - v29);
  v107 = *(_DWORD *)(v28 + 248);
  v108 = v28;
  v132 = ~(-1 << (*(_DWORD *)(v28 + 244) - 1));
  v105 = *(_QWORD *)v28 - v29;
  v32 = v105 + (-1 << (*(_DWORD *)(v28 + 244) - 1)) + 1;
  if (*(_QWORD *)v28 - v29 - v30 <= v132)
    v32 = *(_DWORD *)(v28 + 28);
  v133 = v32;
  v33 = (a8 - 1);
  v141 = a5;
  v134 = *(_QWORD *)(v28 + 8);
  v135 = *(_DWORD *)(v28 + 28);
  v127 = v26 - (*(_QWORD *)v28 - v29);
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v34 = (a7 + 3);
    v35 = v17 - v22;
    v36 = v17 - v30 - v31;
    v37 = v14 + 1;
    v38 = a5 - 7;
    v122 = a5 - 1;
    v123 = a5 - 3;
    v39 = v14 + 3;
    v40 = v29 - v31;
    v41 = a7;
    v42 = a1;
    v120 = v36;
    v121 = v26;
    v119 = v17 - v22;
    v117 = a5 - 7;
    v118 = v14 + 1;
    v116 = v14;
    v115 = v21;
    while (1)
    {
      if (v41 == 3)
        v43 = *a6 - 1;
      else
        v43 = a6[v41];
      v44 = v17 - v43;
      if (v43 - 1 >= v35)
      {
        v50 = v43 - 1 < v36 && v22 + ~v44 >= 3;
        if (v50)
        {
          v51 = v40 + v44;
          if ((_DWORD)v20 == *(_DWORD *)v51)
          {
            v52 = a5;
            v53 = a7;
            v54 = v42;
            v55 = v19;
            v126 = v10;
            v125 = v33;
            v56 = v20;
            v57 = v22;
            v58 = v34;
            v59 = v39;
            v60 = v40;
            v61 = ZSTD_count_2segments(v37, (char *)(v51 + 4), v52, v136, v137);
            v40 = v60;
            v39 = v59;
            v38 = v117;
            v37 = v118;
            v35 = v119;
            v36 = v120;
            v34 = v58;
            v21 = v115;
            v22 = v57;
            v20 = v56;
            v14 = v116;
            a5 = v141;
            v33 = v125;
            v10 = v126;
            v19 = v55;
            a6 = v129;
            v42 = v54;
            a7 = v53;
            v62 = v61 + 4;
            v26 = v121;
            goto LABEL_56;
          }
        }
LABEL_43:
        v62 = 0;
        goto LABEL_56;
      }
      if (v44 < v26 || (_DWORD)v20 != *(_DWORD *)((char *)v14 - v43))
        goto LABEL_43;
      v46 = -(uint64_t)v43;
      v47 = (_QWORD *)((char *)v37 - v43);
      if (v38 <= (unint64_t)v37)
        break;
      v48 = *v37 ^ *v47;
      if (!v48)
      {
        v64 = 0;
        while (1)
        {
          v49 = &v39[v64];
          if ((unint64_t)&v39[v64] >= v38)
            break;
          v65 = *(_QWORD *)((char *)v39 + v46 + v64 * 4);
          v64 += 2;
          v66 = *v49 ^ v65;
          if (v66)
          {
            v49 = (_QWORD *)(v64 * 4 + (__clz(__rbit64(v66)) >> 3));
            goto LABEL_55;
          }
        }
        v47 = (_QWORD *)((char *)v49 + v46);
        goto LABEL_45;
      }
      v49 = (_QWORD *)(__clz(__rbit64(v48)) >> 3);
LABEL_55:
      v62 = (_DWORD)v49 + 4;
LABEL_56:
      if (v33 < v62)
      {
        v63 = (_DWORD *)(v42 + 8 * v10);
        *v63 = v41 - a7;
        v63[1] = v62;
        v10 = (v10 + 1);
        if (v62 > v19)
          return v10;
        v33 = v62;
        if ((_DWORD *)((char *)v14 + v62) == (_DWORD *)a5)
          return v10;
      }
      if (++v41 >= v34)
        goto LABEL_67;
    }
    v49 = v37;
LABEL_45:
    if ((unint64_t)v49 < v123 && *(_DWORD *)v47 == *(_DWORD *)v49)
    {
      v49 = (_QWORD *)((char *)v49 + 4);
      v47 = (_QWORD *)((char *)v47 + 4);
    }
    if ((unint64_t)v49 < v122 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v49)
    {
      v49 = (_QWORD *)((char *)v49 + 2);
      v47 = (_QWORD *)((char *)v47 + 2);
    }
    if ((unint64_t)v49 < a5 && *(unsigned __int8 *)v47 == *(unsigned __int8 *)v49)
      LODWORD(v49) = (_DWORD)v49 + 1;
    LODWORD(v49) = (_DWORD)v49 - (_DWORD)v37;
    goto LABEL_55;
  }
  v42 = a1;
LABEL_67:
  v67 = (unsigned int *)(v113 + 8 * (v17 & ~v109));
  v68 = v17 + 9;
  v69 = 1 << v110;
  *(_DWORD *)(v112 + 4 * v111) = v17;
  if (v21 < v138)
  {
    *(_QWORD *)v67 = 0;
    goto LABEL_112;
  }
  v70 = 0;
  v71 = 0;
  v72 = v67 + 1;
  v73 = a5 - 7;
  v130 = v14 + 2;
  v74 = v139 + 8;
  v75 = v124;
  while (1)
  {
    v76 = v71 >= v70 ? v70 : v71;
    v77 = v139 + v21;
    v78 = (char *)v14 + v76;
    v79 = (_QWORD *)(v77 + v76);
    if (v73 <= (unint64_t)v14 + v76)
    {
      v82 = (_DWORD *)((char *)v14 + v76);
    }
    else
    {
      v80 = *(_QWORD *)v78 ^ *v79;
      if (v80)
      {
        v81 = __clz(__rbit64(v80)) >> 3;
        goto LABEL_87;
      }
      v87 = 0;
      v88 = (char *)v130 + v76;
      while (1)
      {
        v89 = &v88[v87];
        if ((unint64_t)&v88[v87] >= v73)
          break;
        v90 = *(_QWORD *)(v74 + v76 + v21 + v87);
        v87 += 8;
        v91 = *(_QWORD *)v89 ^ v90;
        if (v91)
        {
          v81 = v87 + (__clz(__rbit64(v91)) >> 3);
          v75 = v124;
          goto LABEL_87;
        }
      }
      v82 = (_DWORD *)((char *)v130 + v76 + v87);
      v79 = (_QWORD *)(v74 + v76 + v21 + v87);
      v75 = v124;
    }
    if ((unint64_t)v82 < a5 - 3 && *(_DWORD *)v79 == *v82)
    {
      ++v82;
      v79 = (_QWORD *)((char *)v79 + 4);
    }
    if ((unint64_t)v82 < a5 - 1 && *(unsigned __int16 *)v79 == *(unsigned __int16 *)v82)
    {
      v82 = (_DWORD *)((char *)v82 + 2);
      v79 = (_QWORD *)((char *)v79 + 2);
    }
    if ((unint64_t)v82 < a5 && *(unsigned __int8 *)v79 == *(unsigned __int8 *)v82)
      v82 = (_DWORD *)((char *)v82 + 1);
    v81 = (char *)v82 - v78;
LABEL_87:
    v83 = v81 + v76;
    if (v83 > v33)
    {
      if (v83 > v68 - v21)
        v68 = v21 + v83;
      v84 = (_DWORD *)(v42 + 8 * v10);
      *v84 = v17 + 2 - v21;
      v84[1] = v83;
      v10 = (v10 + 1);
      if (v83 > 0x1000 || (_DWORD *)((char *)v14 + v83) == (_DWORD *)a5)
      {
        *v72 = 0;
        *v67 = 0;
        goto LABEL_132;
      }
      v33 = v83;
    }
    v86 = (unsigned int *)(v113 + 8 * (v21 & v106));
    if (*(unsigned __int8 *)(v77 + v83) >= *((unsigned __int8 *)v14 + v83))
      break;
    *v67 = v21;
    if (v21 <= v75)
    {
      v67 = v142;
      goto LABEL_111;
    }
    ++v86;
    v71 = v83;
    v67 = v86;
LABEL_100:
    if (--v69)
    {
      v21 = *v86;
      if (*v86 >= v138)
        continue;
    }
    goto LABEL_111;
  }
  *v72 = v21;
  if (v21 > v75)
  {
    v70 = v83;
    v72 = (unsigned int *)(v113 + 8 * (v21 & v106));
    goto LABEL_100;
  }
  v72 = v142;
LABEL_111:
  *v72 = 0;
  *v67 = 0;
  if (v69)
  {
LABEL_112:
    v92 = *(_DWORD *)(*(_QWORD *)(v108 + 96) + 4 * ((-1640531535 * *v14) >> -(char)v107));
    if (v92 > v135)
    {
      v93 = 0;
      v94 = 0;
      v131 = *(_QWORD *)(v108 + 112);
      v95 = v69 - 1;
      v140 = v139 + v127;
      do
      {
        if (v94 >= v93)
          v96 = v93;
        else
          v96 = v94;
        v97 = ZSTD_count_2segments((_DWORD *)((char *)v14 + v96), (char *)(v134 + v92 + v96), v141, v136, v137);
        v98 = v97 + v96;
        if (v97 + v96 + v92 >= v105)
          v99 = v140 + v92;
        else
          v99 = v134 + v92;
        if (v98 > v33)
        {
          if (v98 > v68 - (v92 + v127))
            v68 = v92 + v127 + v98;
          v100 = (_DWORD *)(a1 + 8 * v10);
          *v100 = v17 + 2 - (v92 + v127);
          v100[1] = v98;
          v10 = (v10 + 1);
          if (v98 > 0x1000)
            break;
          v33 = v97 + v96;
          if ((_DWORD *)((char *)v14 + v98) == (_DWORD *)v141)
            break;
        }
        if (v92 <= v133)
          break;
        v101 = *(unsigned __int8 *)(v99 + v98);
        v102 = *((unsigned __int8 *)v14 + v98);
        v50 = v101 >= v102;
        v103 = v101 < v102;
        if (v50)
          v93 = v97 + v96;
        else
          v94 = v97 + v96;
        v50 = v95-- != 0;
        if (!v50)
          break;
        v92 = *(_DWORD *)(v131 + 8 * (v92 & v132) + 4 * v103);
      }
      while (v92 > v135);
    }
  }
LABEL_132:
  *(_DWORD *)(v114 + 44) = v68 - 8;
  return v10;
}

uint64_t ZSTD_btGetAllMatches_dictMatchState_5(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _DWORD *a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  BOOL v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  _DWORD *v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  _DWORD *v83;
  unint64_t v84;
  _DWORD *v85;
  unsigned int *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  unsigned int v102;
  unsigned int v103;
  _BOOL4 v104;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  _QWORD *v119;
  unsigned int v120;
  unsigned int v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int v125;
  unint64_t v126;
  unsigned int v127;
  unsigned int v128;
  _DWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  char *v137;
  _QWORD *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _DWORD v143[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v14 = a4;
  v130 = a6;
  v16 = (_DWORD)a4 - v8;
  v17 = (_DWORD)a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = ZSTD_insertBt1(a2, (_QWORD *)(v8 + v9), a5, v16, 5, 0) + v9;
    while (v9 < v16);
    v8 = *(_QWORD *)(a2 + 8);
    v17 = (_DWORD)v14 - v8;
    a6 = v130;
  }
  *(_DWORD *)(a2 + 44) = v16;
  v18 = *(_DWORD *)(a2 + 260);
  if (v18 >= 0xFFF)
    v19 = 4095;
  else
    v19 = v18;
  v110 = 0xCF1BBCDCBB000000 * *v14;
  v112 = *(_DWORD *)(a2 + 252);
  v113 = v110 >> -*(_BYTE *)(a2 + 248);
  v20 = *(unsigned int *)(*(_QWORD *)(a2 + 96) + 4 * v113);
  v114 = *(_QWORD *)(a2 + 96);
  v115 = *(_QWORD *)(a2 + 112);
  v111 = -1 << (*(_DWORD *)(a2 + 244) - 1);
  v22 = *(unsigned int *)(a2 + 24);
  v21 = *(_DWORD *)(a2 + 28);
  v140 = v8;
  v138 = (_QWORD *)(v8 + v22);
  v107 = ~v111;
  v23 = v17 + v111 + 1;
  if (v17 < ~v111)
    v23 = 0;
  v125 = v23;
  v24 = 1 << *(_DWORD *)(a2 + 240);
  if (v17 - v21 > v24 && *(_DWORD *)(a2 + 40) == 0)
    v26 = v17 - v24;
  else
    v26 = v21;
  if (v26 <= 1)
    v27 = 1;
  else
    v27 = v26;
  v139 = v27;
  v143[0] = 0;
  v116 = a2;
  v28 = *(_QWORD *)(a2 + 232);
  v29 = *(_QWORD *)(v28 + 8);
  v137 = *(char **)v28;
  v30 = *(_DWORD *)(v28 + 28);
  v31 = v26 - (*(_QWORD *)v28 - v29);
  v108 = *(_DWORD *)(v28 + 248);
  v109 = v28;
  v133 = ~(-1 << (*(_DWORD *)(v28 + 244) - 1));
  v106 = *(_QWORD *)v28 - v29;
  v32 = v106 + (-1 << (*(_DWORD *)(v28 + 244) - 1)) + 1;
  if (*(_QWORD *)v28 - v29 - v30 <= v133)
    v32 = *(_DWORD *)(v28 + 28);
  v134 = v32;
  v33 = (a8 - 1);
  v142 = a5;
  v135 = *(_QWORD *)(v28 + 8);
  v136 = *(_DWORD *)(v28 + 28);
  v128 = v26 - (*(_QWORD *)v28 - v29);
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v34 = (a7 + 3);
    v35 = v17 - v22;
    v36 = v17 - v30 - v31;
    v37 = (_QWORD *)((char *)v14 + 4);
    v38 = a5 - 7;
    v123 = a5 - 1;
    v124 = a5 - 3;
    v39 = (char *)v14 + 12;
    v40 = v29 - v31;
    v41 = a7;
    v42 = a1;
    v122 = v14;
    v120 = v17 - v22;
    v121 = v36;
    v118 = a5 - 7;
    v119 = (_QWORD *)((char *)v14 + 4);
    v117 = (char *)v14 + 12;
    while (1)
    {
      if (v41 == 3)
        v43 = *a6 - 1;
      else
        v43 = a6[v41];
      v44 = v17 - v43;
      if (v43 - 1 >= v35)
      {
        v50 = v43 - 1 < v36 && v22 + ~v44 >= 3;
        if (v50)
        {
          v51 = v40 + v44;
          if (*(_DWORD *)v14 == *(_DWORD *)v51)
          {
            v52 = v37;
            v53 = a5;
            v54 = a7;
            v55 = v42;
            v56 = v19;
            v127 = v10;
            v126 = v33;
            v57 = v22;
            v58 = v26;
            v59 = v20;
            v60 = v34;
            v61 = v40;
            v62 = ZSTD_count_2segments(v52, (char *)(v51 + 4), v53, v137, v138);
            v40 = v61;
            v39 = v117;
            v38 = v118;
            v37 = v119;
            v34 = v60;
            v20 = v59;
            v26 = v58;
            v22 = v57;
            a5 = v142;
            v14 = v122;
            v33 = v126;
            v10 = v127;
            v19 = v56;
            a6 = v130;
            v42 = v55;
            a7 = v54;
            v63 = v62 + 4;
            v35 = v120;
            v36 = v121;
            goto LABEL_56;
          }
        }
LABEL_43:
        v63 = 0;
        goto LABEL_56;
      }
      if (v44 < v26 || *(_DWORD *)v14 != *(_DWORD *)((char *)v14 - v43))
        goto LABEL_43;
      v46 = -(uint64_t)v43;
      v47 = (char *)v37 - v43;
      if (v38 <= (unint64_t)v37)
        break;
      v48 = *v37 ^ *(_QWORD *)v47;
      if (!v48)
      {
        v65 = 0;
        while (1)
        {
          v49 = &v39[v65];
          if ((unint64_t)&v39[v65] >= v38)
            break;
          v66 = *(_QWORD *)&v39[v46 + v65];
          v65 += 8;
          v67 = *(_QWORD *)v49 ^ v66;
          if (v67)
          {
            v49 = (char *)(v65 + (__clz(__rbit64(v67)) >> 3));
            goto LABEL_55;
          }
        }
        v47 = &v49[v46];
        goto LABEL_45;
      }
      v49 = (char *)(__clz(__rbit64(v48)) >> 3);
LABEL_55:
      v63 = (_DWORD)v49 + 4;
LABEL_56:
      if (v33 < v63)
      {
        v64 = (_DWORD *)(v42 + 8 * v10);
        *v64 = v41 - a7;
        v64[1] = v63;
        v10 = (v10 + 1);
        if (v63 > v19)
          return v10;
        v33 = v63;
        if ((_QWORD *)((char *)v14 + v63) == (_QWORD *)a5)
          return v10;
      }
      if (++v41 >= v34)
        goto LABEL_67;
    }
    v49 = (char *)v37;
LABEL_45:
    if ((unint64_t)v49 < v124 && *(_DWORD *)v47 == *(_DWORD *)v49)
    {
      v49 += 4;
      v47 += 4;
    }
    if ((unint64_t)v49 < v123 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v49)
    {
      v49 += 2;
      v47 += 2;
    }
    if ((unint64_t)v49 < a5 && *v47 == *v49)
      LODWORD(v49) = (_DWORD)v49 + 1;
    LODWORD(v49) = (_DWORD)v49 - (_DWORD)v37;
    goto LABEL_55;
  }
  v42 = a1;
LABEL_67:
  v68 = (unsigned int *)(v115 + 8 * (v17 & ~v111));
  v69 = v17 + 9;
  v70 = 1 << v112;
  *(_DWORD *)(v114 + 4 * v113) = v17;
  if (v20 < v139)
  {
    *(_QWORD *)v68 = 0;
    goto LABEL_112;
  }
  v71 = 0;
  v72 = 0;
  v73 = v68 + 1;
  v74 = a5 - 7;
  v131 = v14 + 1;
  v75 = v140 + 8;
  v76 = v125;
  while (1)
  {
    v77 = v72 >= v71 ? v71 : v72;
    v78 = v140 + v20;
    v79 = (char *)v14 + v77;
    v80 = (_QWORD *)(v78 + v77);
    if (v74 <= (unint64_t)v14 + v77)
    {
      v83 = (_DWORD *)((char *)v14 + v77);
    }
    else
    {
      v81 = *(_QWORD *)v79 ^ *v80;
      if (v81)
      {
        v82 = __clz(__rbit64(v81)) >> 3;
        goto LABEL_87;
      }
      v88 = 0;
      v89 = (char *)v131 + v77;
      while (1)
      {
        v90 = &v89[v88];
        if ((unint64_t)&v89[v88] >= v74)
          break;
        v91 = *(_QWORD *)(v75 + v77 + v20 + v88);
        v88 += 8;
        v92 = *(_QWORD *)v90 ^ v91;
        if (v92)
        {
          v82 = v88 + (__clz(__rbit64(v92)) >> 3);
          v76 = v125;
          goto LABEL_87;
        }
      }
      v83 = (_DWORD *)((char *)v131 + v77 + v88);
      v80 = (_QWORD *)(v75 + v77 + v20 + v88);
      v76 = v125;
    }
    if ((unint64_t)v83 < a5 - 3 && *(_DWORD *)v80 == *v83)
    {
      ++v83;
      v80 = (_QWORD *)((char *)v80 + 4);
    }
    if ((unint64_t)v83 < a5 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
    {
      v83 = (_DWORD *)((char *)v83 + 2);
      v80 = (_QWORD *)((char *)v80 + 2);
    }
    if ((unint64_t)v83 < a5 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83)
      v83 = (_DWORD *)((char *)v83 + 1);
    v82 = (char *)v83 - v79;
LABEL_87:
    v84 = v82 + v77;
    if (v84 > v33)
    {
      if (v84 > v69 - v20)
        v69 = v20 + v84;
      v85 = (_DWORD *)(v42 + 8 * v10);
      *v85 = v17 + 2 - v20;
      v85[1] = v84;
      v10 = (v10 + 1);
      if (v84 > 0x1000 || (_QWORD *)((char *)v14 + v84) == (_QWORD *)a5)
      {
        *v73 = 0;
        *v68 = 0;
        goto LABEL_132;
      }
      v33 = v84;
    }
    v87 = (unsigned int *)(v115 + 8 * (v20 & v107));
    if (*(unsigned __int8 *)(v78 + v84) >= *((unsigned __int8 *)v14 + v84))
      break;
    *v68 = v20;
    if (v20 <= v76)
    {
      v68 = v143;
      goto LABEL_111;
    }
    ++v87;
    v72 = v84;
    v68 = v87;
LABEL_100:
    if (--v70)
    {
      LODWORD(v20) = *v87;
      if (*v87 >= v139)
        continue;
    }
    goto LABEL_111;
  }
  *v73 = v20;
  if (v20 > v76)
  {
    v71 = v84;
    v73 = (_DWORD *)(v115 + 8 * (v20 & v107));
    goto LABEL_100;
  }
  v73 = v143;
LABEL_111:
  *v73 = 0;
  *v68 = 0;
  if (v70)
  {
LABEL_112:
    v93 = *(_DWORD *)(*(_QWORD *)(v109 + 96) + 4 * (v110 >> -(char)v108));
    if (v93 > v136)
    {
      v94 = 0;
      v95 = 0;
      v132 = *(_QWORD *)(v109 + 112);
      v96 = v70 - 1;
      v141 = v140 + v128;
      do
      {
        if (v95 >= v94)
          v97 = v94;
        else
          v97 = v95;
        v98 = ZSTD_count_2segments((_QWORD *)((char *)v14 + v97), (char *)(v135 + v93 + v97), v142, v137, v138);
        v99 = v98 + v97;
        if (v98 + v97 + v93 >= v106)
          v100 = v141 + v93;
        else
          v100 = v135 + v93;
        if (v99 > v33)
        {
          if (v99 > v69 - (v93 + v128))
            v69 = v93 + v128 + v99;
          v101 = (_DWORD *)(a1 + 8 * v10);
          *v101 = v17 + 2 - (v93 + v128);
          v101[1] = v99;
          v10 = (v10 + 1);
          if (v99 > 0x1000)
            break;
          v33 = v98 + v97;
          if ((_QWORD *)((char *)v14 + v99) == (_QWORD *)v142)
            break;
        }
        if (v93 <= v134)
          break;
        v102 = *(unsigned __int8 *)(v100 + v99);
        v103 = *((unsigned __int8 *)v14 + v99);
        v50 = v102 >= v103;
        v104 = v102 < v103;
        if (v50)
          v94 = v98 + v97;
        else
          v95 = v98 + v97;
        v50 = v96-- != 0;
        if (!v50)
          break;
        v93 = *(_DWORD *)(v132 + 8 * (v93 & v133) + 4 * v104);
      }
      while (v93 > v136);
    }
  }
LABEL_132:
  *(_DWORD *)(v116 + 44) = v69 - 8;
  return v10;
}

uint64_t ZSTD_btGetAllMatches_dictMatchState_6(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, unint64_t a5, _DWORD *a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  BOOL v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int *v68;
  unsigned int v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  _DWORD *v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  _DWORD *v83;
  unint64_t v84;
  _DWORD *v85;
  unsigned int *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  unsigned int v102;
  unsigned int v103;
  _BOOL4 v104;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  int v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t v118;
  _QWORD *v119;
  unsigned int v120;
  unsigned int v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  unsigned int v125;
  unint64_t v126;
  unsigned int v127;
  unsigned int v128;
  _DWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  char *v137;
  _QWORD *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  _DWORD v143[3];

  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(unsigned int *)(a2 + 44);
  if (v8 + v9 > (unint64_t)a4)
    return 0;
  v14 = a4;
  v130 = a6;
  v16 = (_DWORD)a4 - v8;
  v17 = (_DWORD)a4 - v8;
  if (v9 < (int)a4 - (int)v8)
  {
    do
      LODWORD(v9) = ZSTD_insertBt1(a2, (_QWORD *)(v8 + v9), a5, v16, 6, 0) + v9;
    while (v9 < v16);
    v8 = *(_QWORD *)(a2 + 8);
    v17 = (_DWORD)v14 - v8;
    a6 = v130;
  }
  *(_DWORD *)(a2 + 44) = v16;
  v18 = *(_DWORD *)(a2 + 260);
  if (v18 >= 0xFFF)
    v19 = 4095;
  else
    v19 = v18;
  v110 = 0xCF1BBCDCBF9B0000 * *v14;
  v112 = *(_DWORD *)(a2 + 252);
  v113 = v110 >> -*(_BYTE *)(a2 + 248);
  v20 = *(unsigned int *)(*(_QWORD *)(a2 + 96) + 4 * v113);
  v114 = *(_QWORD *)(a2 + 96);
  v115 = *(_QWORD *)(a2 + 112);
  v111 = -1 << (*(_DWORD *)(a2 + 244) - 1);
  v22 = *(unsigned int *)(a2 + 24);
  v21 = *(_DWORD *)(a2 + 28);
  v140 = v8;
  v138 = (_QWORD *)(v8 + v22);
  v107 = ~v111;
  v23 = v17 + v111 + 1;
  if (v17 < ~v111)
    v23 = 0;
  v125 = v23;
  v24 = 1 << *(_DWORD *)(a2 + 240);
  if (v17 - v21 > v24 && *(_DWORD *)(a2 + 40) == 0)
    v26 = v17 - v24;
  else
    v26 = v21;
  if (v26 <= 1)
    v27 = 1;
  else
    v27 = v26;
  v139 = v27;
  v143[0] = 0;
  v116 = a2;
  v28 = *(_QWORD *)(a2 + 232);
  v29 = *(_QWORD *)(v28 + 8);
  v137 = *(char **)v28;
  v30 = *(_DWORD *)(v28 + 28);
  v31 = v26 - (*(_QWORD *)v28 - v29);
  v108 = *(_DWORD *)(v28 + 248);
  v109 = v28;
  v133 = ~(-1 << (*(_DWORD *)(v28 + 244) - 1));
  v106 = *(_QWORD *)v28 - v29;
  v32 = v106 + (-1 << (*(_DWORD *)(v28 + 244) - 1)) + 1;
  if (*(_QWORD *)v28 - v29 - v30 <= v133)
    v32 = *(_DWORD *)(v28 + 28);
  v134 = v32;
  v33 = (a8 - 1);
  v142 = a5;
  v135 = *(_QWORD *)(v28 + 8);
  v136 = *(_DWORD *)(v28 + 28);
  v128 = v26 - (*(_QWORD *)v28 - v29);
  v10 = 0;
  if (a7 <= 0xFFFFFFFC)
  {
    v34 = (a7 + 3);
    v35 = v17 - v22;
    v36 = v17 - v30 - v31;
    v37 = (_QWORD *)((char *)v14 + 4);
    v38 = a5 - 7;
    v123 = a5 - 1;
    v124 = a5 - 3;
    v39 = (char *)v14 + 12;
    v40 = v29 - v31;
    v41 = a7;
    v42 = a1;
    v122 = v14;
    v120 = v17 - v22;
    v121 = v36;
    v118 = a5 - 7;
    v119 = (_QWORD *)((char *)v14 + 4);
    v117 = (char *)v14 + 12;
    while (1)
    {
      if (v41 == 3)
        v43 = *a6 - 1;
      else
        v43 = a6[v41];
      v44 = v17 - v43;
      if (v43 - 1 >= v35)
      {
        v50 = v43 - 1 < v36 && v22 + ~v44 >= 3;
        if (v50)
        {
          v51 = v40 + v44;
          if (*(_DWORD *)v14 == *(_DWORD *)v51)
          {
            v52 = v37;
            v53 = a5;
            v54 = a7;
            v55 = v42;
            v56 = v19;
            v127 = v10;
            v126 = v33;
            v57 = v22;
            v58 = v26;
            v59 = v20;
            v60 = v34;
            v61 = v40;
            v62 = ZSTD_count_2segments(v52, (char *)(v51 + 4), v53, v137, v138);
            v40 = v61;
            v39 = v117;
            v38 = v118;
            v37 = v119;
            v34 = v60;
            v20 = v59;
            v26 = v58;
            v22 = v57;
            a5 = v142;
            v14 = v122;
            v33 = v126;
            v10 = v127;
            v19 = v56;
            a6 = v130;
            v42 = v55;
            a7 = v54;
            v63 = v62 + 4;
            v35 = v120;
            v36 = v121;
            goto LABEL_56;
          }
        }
LABEL_43:
        v63 = 0;
        goto LABEL_56;
      }
      if (v44 < v26 || *(_DWORD *)v14 != *(_DWORD *)((char *)v14 - v43))
        goto LABEL_43;
      v46 = -(uint64_t)v43;
      v47 = (char *)v37 - v43;
      if (v38 <= (unint64_t)v37)
        break;
      v48 = *v37 ^ *(_QWORD *)v47;
      if (!v48)
      {
        v65 = 0;
        while (1)
        {
          v49 = &v39[v65];
          if ((unint64_t)&v39[v65] >= v38)
            break;
          v66 = *(_QWORD *)&v39[v46 + v65];
          v65 += 8;
          v67 = *(_QWORD *)v49 ^ v66;
          if (v67)
          {
            v49 = (char *)(v65 + (__clz(__rbit64(v67)) >> 3));
            goto LABEL_55;
          }
        }
        v47 = &v49[v46];
        goto LABEL_45;
      }
      v49 = (char *)(__clz(__rbit64(v48)) >> 3);
LABEL_55:
      v63 = (_DWORD)v49 + 4;
LABEL_56:
      if (v33 < v63)
      {
        v64 = (_DWORD *)(v42 + 8 * v10);
        *v64 = v41 - a7;
        v64[1] = v63;
        v10 = (v10 + 1);
        if (v63 > v19)
          return v10;
        v33 = v63;
        if ((_QWORD *)((char *)v14 + v63) == (_QWORD *)a5)
          return v10;
      }
      if (++v41 >= v34)
        goto LABEL_67;
    }
    v49 = (char *)v37;
LABEL_45:
    if ((unint64_t)v49 < v124 && *(_DWORD *)v47 == *(_DWORD *)v49)
    {
      v49 += 4;
      v47 += 4;
    }
    if ((unint64_t)v49 < v123 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v49)
    {
      v49 += 2;
      v47 += 2;
    }
    if ((unint64_t)v49 < a5 && *v47 == *v49)
      LODWORD(v49) = (_DWORD)v49 + 1;
    LODWORD(v49) = (_DWORD)v49 - (_DWORD)v37;
    goto LABEL_55;
  }
  v42 = a1;
LABEL_67:
  v68 = (unsigned int *)(v115 + 8 * (v17 & ~v111));
  v69 = v17 + 9;
  v70 = 1 << v112;
  *(_DWORD *)(v114 + 4 * v113) = v17;
  if (v20 < v139)
  {
    *(_QWORD *)v68 = 0;
    goto LABEL_112;
  }
  v71 = 0;
  v72 = 0;
  v73 = v68 + 1;
  v74 = a5 - 7;
  v131 = v14 + 1;
  v75 = v140 + 8;
  v76 = v125;
  while (1)
  {
    v77 = v72 >= v71 ? v71 : v72;
    v78 = v140 + v20;
    v79 = (char *)v14 + v77;
    v80 = (_QWORD *)(v78 + v77);
    if (v74 <= (unint64_t)v14 + v77)
    {
      v83 = (_DWORD *)((char *)v14 + v77);
    }
    else
    {
      v81 = *(_QWORD *)v79 ^ *v80;
      if (v81)
      {
        v82 = __clz(__rbit64(v81)) >> 3;
        goto LABEL_87;
      }
      v88 = 0;
      v89 = (char *)v131 + v77;
      while (1)
      {
        v90 = &v89[v88];
        if ((unint64_t)&v89[v88] >= v74)
          break;
        v91 = *(_QWORD *)(v75 + v77 + v20 + v88);
        v88 += 8;
        v92 = *(_QWORD *)v90 ^ v91;
        if (v92)
        {
          v82 = v88 + (__clz(__rbit64(v92)) >> 3);
          v76 = v125;
          goto LABEL_87;
        }
      }
      v83 = (_DWORD *)((char *)v131 + v77 + v88);
      v80 = (_QWORD *)(v75 + v77 + v20 + v88);
      v76 = v125;
    }
    if ((unint64_t)v83 < a5 - 3 && *(_DWORD *)v80 == *v83)
    {
      ++v83;
      v80 = (_QWORD *)((char *)v80 + 4);
    }
    if ((unint64_t)v83 < a5 - 1 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v83)
    {
      v83 = (_DWORD *)((char *)v83 + 2);
      v80 = (_QWORD *)((char *)v80 + 2);
    }
    if ((unint64_t)v83 < a5 && *(unsigned __int8 *)v80 == *(unsigned __int8 *)v83)
      v83 = (_DWORD *)((char *)v83 + 1);
    v82 = (char *)v83 - v79;
LABEL_87:
    v84 = v82 + v77;
    if (v84 > v33)
    {
      if (v84 > v69 - v20)
        v69 = v20 + v84;
      v85 = (_DWORD *)(v42 + 8 * v10);
      *v85 = v17 + 2 - v20;
      v85[1] = v84;
      v10 = (v10 + 1);
      if (v84 > 0x1000 || (_QWORD *)((char *)v14 + v84) == (_QWORD *)a5)
      {
        *v73 = 0;
        *v68 = 0;
        goto LABEL_132;
      }
      v33 = v84;
    }
    v87 = (unsigned int *)(v115 + 8 * (v20 & v107));
    if (*(unsigned __int8 *)(v78 + v84) >= *((unsigned __int8 *)v14 + v84))
      break;
    *v68 = v20;
    if (v20 <= v76)
    {
      v68 = v143;
      goto LABEL_111;
    }
    ++v87;
    v72 = v84;
    v68 = v87;
LABEL_100:
    if (--v70)
    {
      LODWORD(v20) = *v87;
      if (*v87 >= v139)
        continue;
    }
    goto LABEL_111;
  }
  *v73 = v20;
  if (v20 > v76)
  {
    v71 = v84;
    v73 = (_DWORD *)(v115 + 8 * (v20 & v107));
    goto LABEL_100;
  }
  v73 = v143;
LABEL_111:
  *v73 = 0;
  *v68 = 0;
  if (v70)
  {
LABEL_112:
    v93 = *(_DWORD *)(*(_QWORD *)(v109 + 96) + 4 * (v110 >> -(char)v108));
    if (v93 > v136)
    {
      v94 = 0;
      v95 = 0;
      v132 = *(_QWORD *)(v109 + 112);
      v96 = v70 - 1;
      v141 = v140 + v128;
      do
      {
        if (v95 >= v94)
          v97 = v94;
        else
          v97 = v95;
        v98 = ZSTD_count_2segments((_QWORD *)((char *)v14 + v97), (char *)(v135 + v93 + v97), v142, v137, v138);
        v99 = v98 + v97;
        if (v98 + v97 + v93 >= v106)
          v100 = v141 + v93;
        else
          v100 = v135 + v93;
        if (v99 > v33)
        {
          if (v99 > v69 - (v93 + v128))
            v69 = v93 + v128 + v99;
          v101 = (_DWORD *)(a1 + 8 * v10);
          *v101 = v17 + 2 - (v93 + v128);
          v101[1] = v99;
          v10 = (v10 + 1);
          if (v99 > 0x1000)
            break;
          v33 = v98 + v97;
          if ((_QWORD *)((char *)v14 + v99) == (_QWORD *)v142)
            break;
        }
        if (v93 <= v134)
          break;
        v102 = *(unsigned __int8 *)(v100 + v99);
        v103 = *((unsigned __int8 *)v14 + v99);
        v50 = v102 >= v103;
        v104 = v102 < v103;
        if (v50)
          v94 = v98 + v97;
        else
          v95 = v98 + v97;
        v50 = v96-- != 0;
        if (!v50)
          break;
        v93 = *(_DWORD *)(v132 + 8 * (v93 & v133) + 4 * v104);
      }
      while (v93 > v136);
    }
  }
LABEL_132:
  *(_DWORD *)(v116 + 44) = v69 - 8;
  return v10;
}

uint64_t ZSTD_insertAndFindFirstIndexHash3(uint64_t a1, _DWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  int v7;

  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  v6 = *a3;
  v7 = 32 - *(_DWORD *)(a1 + 48);
  if (v5 < (int)a3 - (int)v4)
  {
    do
    {
      *(_DWORD *)(v3 + 4 * ((900185344 * *(_DWORD *)(v4 + v5)) >> v7)) = v5;
      ++v5;
    }
    while (v5 < ((_DWORD)a3 - v4));
  }
  *a2 = (_DWORD)a3 - v4;
  return *(unsigned int *)(v3 + 4 * ((900185344 * v6) >> v7));
}

size_t ZSTD_noCompressLiterals(_DWORD *a1, size_t a2, void *__src, size_t __n)
{
  uint64_t v4;
  size_t v5;

  if (__n <= 0x1F)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = 2;
  if (__n <= 0xFFF)
    v4 = v4;
  else
    v4 = (v4 + 1);
  v5 = v4 + __n;
  if (v4 + __n > a2)
    return -70;
  switch((_DWORD)v4)
  {
    case 3:
      *a1 = (16 * __n) | 0xC;
      break;
    case 2:
      *(_WORD *)a1 = (16 * __n) | 4;
      break;
    case 1:
      *(_BYTE *)a1 = 8 * __n;
      break;
  }
  memcpy((char *)a1 + v4, __src, __n);
  return v5;
}

uint64_t ZSTD_compressRleLiteralsBlock(_DWORD *a1, uint64_t a2, _BYTE *a3, unint64_t a4)
{
  uint64_t v4;

  if (a4 <= 0x1F)
    v4 = 1;
  else
    v4 = 2;
  if (a4 > 0xFFF)
    ++v4;
  switch((_DWORD)v4)
  {
    case 3:
      *a1 = (16 * a4) | 0xD;
      break;
    case 2:
      *(_WORD *)a1 = (16 * a4) | 5;
      break;
    case 1:
      *(_BYTE *)a1 = (8 * a4) | 1;
      break;
  }
  *((_BYTE *)a1 + v4) = *a3;
  return (v4 + 1);
}

uint64_t ZSTD_compressLiterals(void *__src, void *__dst, unsigned int a3, int a4, _DWORD *a5, size_t a6, _BYTE *a7, size_t a8, uint64_t a9, unint64_t a10, int a11, int a12)
{
  char v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  _DWORD *v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _BOOL4 v31;
  _BOOL4 v34;
  unint64_t *v35;
  unint64_t v36;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;

  if (a3 <= 7)
    v20 = 6;
  else
    v20 = a3 - 1;
  v21 = 3;
  if (a8 > 0x3FF)
    v21 = 4;
  if ((a8 & 0xFFFFFFFFFFFFC000) != 0)
    v22 = v21 + 1;
  else
    v22 = v21;
  memcpy(__dst, __src, 0x810uLL);
  if (a4)
  {
    v23 = a5;
    return ZSTD_noCompressLiterals(v23, a6, a7, a8);
  }
  v24 = v22;
  v25 = a5;
  v26 = *((_DWORD *)__src + 514);
  v27 = 63;
  if (v26 == 2)
    v27 = 6;
  if (v27 >= a8)
  {
    v23 = a5;
    return ZSTD_noCompressLiterals(v23, a6, a7, a8);
  }
  v28 = a6 - v24;
  if (a6 <= v24)
    return -70;
  v29 = v24;
  v31 = a3 < 4 && a8 < 0x401;
  v42 = *((_DWORD *)__src + 514);
  v34 = v26 == 2 && v24 == 3 || a8 < 0x100;
  v35 = (unint64_t *)((char *)v25 + v24);
  if (v34)
    v36 = HUF_compress1X_repeat(v35, v28, a7, a8, 0xFFu, 0xBu, a9, a10, (uint64_t *)__dst, &v42, v31, a11, a12);
  else
    v36 = HUF_compress4X_repeat(v35, v28, a7, a8, 0xFFu, 0xBu, a9, a10, (uint64_t *)__dst, &v42, v31, a11, a12);
  if (v42)
    v38 = 3;
  else
    v38 = 2;
  if (v36 - 1 > 0xFFFFFFFFFFFFFF87 || v36 >= a8 - (a8 >> v20) - 2)
  {
    memcpy(__dst, __src, 0x810uLL);
    return ZSTD_noCompressLiterals(v25, a6, a7, a8);
  }
  else if (v36 == 1)
  {
    memcpy(__dst, __src, 0x810uLL);
    return ZSTD_compressRleLiteralsBlock(v25, v39, a7, a8);
  }
  else
  {
    if (!v42)
      *((_DWORD *)__dst + 514) = 1;
    switch(v29)
    {
      case 5uLL:
        *v25 = (((_DWORD)v36 << 22) + 16 * a8) | v38 | 0xC;
        *((_BYTE *)v25 + 4) = v36 >> 10;
        break;
      case 4uLL:
        *v25 = (((_DWORD)v36 << 18) + 16 * a8) | v38 | 8;
        break;
      case 3uLL:
        if (v34)
          v40 = 4;
        else
          v40 = 0;
        v41 = ((v38 | v40 | (16 * a8)) ^ 4) + ((_DWORD)v36 << 14);
        *(_WORD *)v25 = v41;
        *((_BYTE *)v25 + 2) = BYTE2(v41);
        break;
    }
    return v36 + v29;
  }
}

void caching_hot_shard_alloc(uint64_t *a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_DWORD *)v2 = -1;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_QWORD *)(v2 + 72) = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 8) = 0u;
  std::vector<long long>::reserve((void **)(v2 + 8), 0x100AuLL);
  std::vector<unsigned long>::reserve(v2 + 32);
  std::vector<unsigned long>::reserve(v2 + 56);
  *a1 = v2;
}

void std::vector<long long>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    v7 = &v4[8 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<unsigned long>::reserve(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;

  v1 = *(_BYTE **)a1;
  if ((*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4 <= 0x804uLL)
  {
    v3 = *(_BYTE **)(a1 + 8);
    v4 = (char *)operator new(0x8050uLL);
    v5 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
    v6 = v5;
    if (v3 != v1)
    {
      v6 = &v4[(v3 - v1) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v7 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        *((_QWORD *)v6 - 1) = v7;
        v6 -= 8;
      }
      while (v3 != v1);
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4 + 32848;
    if (v1)
      operator delete(v1);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a1);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

uint64_t CachingHotShard::Bind(CachingHotShard *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  off_t file_size;
  _QWORD v8[5];

  if (*(_DWORD *)this != -1)
  {
    *((_QWORD *)this + 2) = *((_QWORD *)this + 1);
    *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
    *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
  }
  v4 = MEMORY[0x1E0C809B0];
  *(_DWORD *)this = a2;
  v8[0] = v4;
  v8[1] = 0x40000000;
  v8[2] = ___ZN15CachingHotShard4BindEi_block_invoke;
  v8[3] = &__block_descriptor_tmp;
  v8[4] = this;
  v5 = hot_shard_for_each_region(a2, (uint64_t)v8);
  if ((_DWORD)v5 || (file_size = get_file_size(a2), *((_QWORD *)this + 10) = file_size, file_size < 0))
  {
    *((_QWORD *)this + 2) = *((_QWORD *)this + 1);
    *((_QWORD *)this + 5) = *((_QWORD *)this + 4);
    *((_QWORD *)this + 8) = *((_QWORD *)this + 7);
    *(_DWORD *)this = -1;
  }
  return v5;
}

uint64_t ___ZN15CachingHotShard4BindEi_block_invoke(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CachingHotShard::cache_put(*(CachingHotShard **)(a1 + 32), a2, a6 - a5 + a7, a5);
  return 0;
}

void CachingHotShard::cache_put(CachingHotShard *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;

  v10 = (char *)this + 8;
  v8 = (char *)*((_QWORD *)this + 1);
  v9 = (char *)*((_QWORD *)v10 + 1);
  v11 = (v9 - v8) >> 3;
  if ((int)v11 < 1)
  {
LABEL_5:
    v13 = *((_QWORD *)this + 3);
    if ((unint64_t)v9 >= v13)
    {
      v15 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        goto LABEL_52;
      v16 = v13 - (_QWORD)v8;
      if (v16 >> 2 > v15)
        v15 = v16 >> 2;
      v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8;
      v18 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v17)
        v18 = v15;
      if (v18)
      {
        v18 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v18);
        v8 = (char *)*((_QWORD *)this + 1);
        v9 = (char *)*((_QWORD *)this + 2);
      }
      else
      {
        v19 = 0;
      }
      v20 = (_QWORD *)(v18 + 8 * v11);
      v21 = v18 + 8 * v19;
      *v20 = a2;
      v14 = v20 + 1;
      while (v9 != v8)
      {
        v22 = *((_QWORD *)v9 - 1);
        v9 -= 8;
        *--v20 = v22;
      }
      *((_QWORD *)this + 1) = v20;
      *((_QWORD *)this + 2) = v14;
      *((_QWORD *)this + 3) = v21;
      if (v8)
        operator delete(v8);
    }
    else
    {
      *(_QWORD *)v9 = a2;
      v14 = v9 + 8;
    }
    *((_QWORD *)this + 2) = v14;
    v24 = (char *)*((_QWORD *)this + 5);
    v23 = *((_QWORD *)this + 6);
    if ((unint64_t)v24 >= v23)
    {
      v26 = (char *)*((_QWORD *)this + 4);
      v27 = (v24 - v26) >> 3;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61)
        goto LABEL_52;
      v29 = v23 - (_QWORD)v26;
      if (v29 >> 2 > v28)
        v28 = v29 >> 2;
      v17 = (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8;
      v30 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v17)
        v30 = v28;
      if (v30)
      {
        v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v30);
        v26 = (char *)*((_QWORD *)this + 4);
        v24 = (char *)*((_QWORD *)this + 5);
      }
      else
      {
        v31 = 0;
      }
      v32 = (_QWORD *)(v30 + 8 * v27);
      v33 = v30 + 8 * v31;
      *v32 = a3;
      v25 = v32 + 1;
      while (v24 != v26)
      {
        v34 = *((_QWORD *)v24 - 1);
        v24 -= 8;
        *--v32 = v34;
      }
      *((_QWORD *)this + 4) = v32;
      *((_QWORD *)this + 5) = v25;
      *((_QWORD *)this + 6) = v33;
      if (v26)
        operator delete(v26);
    }
    else
    {
      *(_QWORD *)v24 = a3;
      v25 = v24 + 8;
    }
    *((_QWORD *)this + 5) = v25;
    v36 = (char *)*((_QWORD *)this + 8);
    v35 = *((_QWORD *)this + 9);
    if ((unint64_t)v36 < v35)
    {
      *(_QWORD *)v36 = a4;
      v37 = v36 + 8;
LABEL_51:
      *((_QWORD *)this + 8) = v37;
      return;
    }
    v38 = (char *)*((_QWORD *)this + 7);
    v39 = (v36 - v38) >> 3;
    v40 = v39 + 1;
    if (!((unint64_t)(v39 + 1) >> 61))
    {
      v41 = v35 - (_QWORD)v38;
      if (v41 >> 2 > v40)
        v40 = v41 >> 2;
      v17 = (unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8;
      v42 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v17)
        v42 = v40;
      if (v42)
      {
        v42 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v42);
        v38 = (char *)*((_QWORD *)this + 7);
        v36 = (char *)*((_QWORD *)this + 8);
      }
      else
      {
        v43 = 0;
      }
      v44 = (_QWORD *)(v42 + 8 * v39);
      v45 = v42 + 8 * v43;
      *v44 = a4;
      v37 = v44 + 1;
      while (v36 != v38)
      {
        v46 = *((_QWORD *)v36 - 1);
        v36 -= 8;
        *--v44 = v46;
      }
      *((_QWORD *)this + 7) = v44;
      *((_QWORD *)this + 8) = v37;
      *((_QWORD *)this + 9) = v45;
      if (v38)
        operator delete(v38);
      goto LABEL_51;
    }
LABEL_52:
    abort();
  }
  v12 = 0;
  while (*(_QWORD *)&v8[8 * v12] != a2)
  {
    if (((unint64_t)(v9 - v8) >> 3) == ++v12)
      goto LABEL_5;
  }
  *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v12) = a3;
  *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v12) = a4;
}

uint64_t CachingHotShard::WriteDocs(CachingHotShard *this, int a2, const uint64_t *a3, const char *a4, const char **a5, const unint64_t *a6)
{
  int *v6;
  unint64_t *v7;
  unsigned __int8 *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  unint64_t *v14;
  int *v15;
  uint64_t v16;
  off_t v17;
  off_t v18;
  unint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  off_t v38;
  unint64_t v39;
  size_t v40;
  unsigned __int8 *v42;
  iovec v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE __buf[4104];
  uint64_t v61;

  v6 = (int *)MEMORY[0x1E0C80A78](this);
  v61 = *MEMORY[0x1E0C80C00];
  if (*v6 == -1)
    return 4294967287;
  v11 = v10;
  v12 = v9;
  v13 = v8;
  v14 = v7;
  v15 = v6;
  v16 = *v6;
  v17 = lseek(*v6, 0, 2);
  if (v17 < 0)
  {
    v23 = __error();
    v24 = 0;
    v22 = -*v23;
    if (*v23)
      return v22;
  }
  else
  {
    v18 = v17;
    bzero(__buf, 0x1000uLL);
    v42 = __buf;
    v43.iov_base = __buf;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v19 = *v14;
    v20 = *v13;
    if (*v14 >= 0x80)
    {
      if (v19 >= 0x4000)
      {
        v21 = 3;
        v25 = 4;
        v26 = 5;
        v27 = 6;
        v28 = 7;
        v29 = 8;
        if (HIBYTE(v19))
          v29 = 9;
        if (v19 >> 49)
          v28 = v29;
        if (v19 >> 42)
          v27 = v28;
        if (v19 >> 35)
          v26 = v27;
        if (v19 >> 28)
          v25 = v26;
        if (v19 >= 0x200000)
          v21 = v25;
      }
      else
      {
        v21 = 2;
      }
    }
    else
    {
      v21 = 1;
    }
    v2_writeVInt64((unint64_t **)&v42, *v11 + v21 + 1);
    v2_writeVInt64((unint64_t **)&v42, v19);
    v30 = (int)v42;
    *v42 = v20;
    v31 = (int)(v30 - __buf + 1);
    v24 = v18 + v31;
    v32 = *v12;
    v43.iov_len = v31;
    v44 = v32;
    v45 = *v11;
    if (v45 >= 0x1FF9D)
    {
      ftruncate(v16, v18);
      return 4294967256;
    }
    v22 = writevall(v16, &v43, 2);
    if ((_DWORD)v22)
    {
      ftruncate(v16, v18);
      return v22;
    }
    hot_shard_update_logical_size(v16);
  }
  v33 = *v14;
  v34 = *((_QWORD *)v15 + 1);
  v35 = *((_QWORD *)v15 + 2) - v34;
  if ((int)(v35 >> 3) >= 1)
  {
    v36 = 0;
    v37 = (v35 >> 3);
    while (*(_QWORD *)(v34 + 8 * v36) != v33)
    {
      if (v37 == ++v36)
        goto LABEL_41;
    }
    v38 = *(_QWORD *)(*((_QWORD *)v15 + 4) + 8 * v36);
    v39 = *(_QWORD *)(*((_QWORD *)v15 + 7) + 8 * v36);
    memset(__buf, 0, 256);
    if (v39)
    {
      do
      {
        if (v39 >= 0x100)
          v40 = 256;
        else
          v40 = v39;
        if (!pwrite(*v15, __buf, v40, v38) || *__error() != 4)
        {
          v39 -= v40;
          v38 += v40;
        }
      }
      while (v39);
      v33 = *v14;
    }
  }
LABEL_41:
  CachingHotShard::cache_put((CachingHotShard *)v15, v33, v24, *v11);
  return 0;
}

_QWORD *TokenMatchNew(const __CFAllocator *a1)
{
  _QWORD *v2;
  _QWORD v4[5];

  v2 = CFAllocatorAllocate(a1, 48, 0);
  *v2 = a1;
  v2[1] = a1;
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = 0;
  v2[5] = a1;
  v4[4] = v2 + 5;
  v4[0] = CFAllocatorAllocate(a1, 448, 0);
  v4[1] = v4[0];
  v4[2] = v4[0];
  v4[3] = v4[0] + 448;
  std::vector<TokenMatch::entry,CFBridgeAllocator<TokenMatch::entry>>::__swap_out_circular_buffer(v2 + 2, v4);
  std::__split_buffer<TokenMatch::entry,CFBridgeAllocator<TokenMatch::entry> &>::~__split_buffer((uint64_t)v4);
  return v2;
}

uint64_t *std::vector<TokenMatch::entry,CFBridgeAllocator<TokenMatch::entry>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_QWORD *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = *(_OWORD *)(v2 + v5 - 56);
      *(_QWORD *)(v6 - 40) = v8;
      *(_QWORD *)(v6 - 32) = 0;
      *(_QWORD *)(v6 - 24) = 0;
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_OWORD *)(v6 - 32) = *(_OWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v6 - 16) = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<TokenMatch::entry,CFBridgeAllocator<TokenMatch::entry> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 56;
    v4 = *(void **)(v2 - 32);
    if (v4)
    {
      *(_QWORD *)(v2 - 24) = v4;
      CFAllocatorDeallocate(*(CFAllocatorRef *)(v2 - 8), v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 56;
    }
  }
  if (*(_QWORD *)a1)
    CFAllocatorDeallocate(**(CFAllocatorRef **)(a1 + 32), *(void **)a1);
  return a1;
}

void TokenMatchTrack(uint64_t a1, char *__s, const char *a3, char a4, char a5, char a6)
{
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  int64x2_t v29;
  CFAllocatorRef v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  __int128 v53;
  int64x2_t v54;
  void *v55;
  size_t v56;
  _BYTE v57[24];
  void *ptr[2];
  CFAllocatorRef allocator[2];
  char *v60;
  int64x2_t v61;
  CFAllocatorRef v62;
  CFAllocatorRef *v63;

  if (!__s || !a3)
    return;
  v12 = strlen(__s);
  v56 = strlen(a3);
  v14 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  while (1)
  {
    if (v14 == v13)
    {
      *(_QWORD *)v57 = *(_QWORD *)a1;
      *(_OWORD *)allocator = 0u;
      v63 = &allocator[1];
      ptr[0] = CFAllocatorAllocate(0, 96, 0);
      ptr[1] = ptr[0];
      v61 = vdupq_n_s64(0);
      allocator[0] = (CFAllocatorRef)((char *)ptr[0] + 96);
      v62 = 0;
      v60 = (char *)v61.i64[0];
      std::__split_buffer<SnippetTerm,CFBridgeAllocator<SnippetTerm> &>::~__split_buffer((uint64_t)&v60);
      v15 = ptr[0];
      *(_QWORD *)&v57[8] = __s;
      *(_QWORD *)&v57[16] = v12;
      if (ptr[0] >= (char *)ptr[0] + 96)
      {
        v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)ptr[1] - (char *)ptr[0]) >> 3);
        v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_58;
        if (0x5555555555555556 * (((char *)allocator[0] - (char *)ptr[0]) >> 3) > v18)
          v18 = 0x5555555555555556 * (((char *)allocator[0] - (char *)ptr[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)allocator[0] - (char *)ptr[0]) >> 3) >= 0x555555555555555)
          v19 = 0xAAAAAAAAAAAAAAALL;
        else
          v19 = v18;
        v63 = &allocator[1];
        if (v19)
          v20 = (char *)CFAllocatorAllocate(allocator[1], 24 * v19, 0);
        else
          v20 = 0;
        v24 = &v20[8 * (((char *)ptr[1] - (char *)ptr[0]) >> 3)];
        *(_QWORD *)v24 = a3;
        *((_QWORD *)v24 + 1) = v56;
        v24[16] = a4;
        v24[17] = a5;
        v24[18] = a6;
        v25 = (char *)ptr[0];
        v26 = (char *)ptr[1];
        if (ptr[1] == ptr[0])
        {
          v29 = vdupq_n_s64((unint64_t)ptr[1]);
          v27 = &v20[24 * v17];
        }
        else
        {
          v27 = &v20[24 * v17];
          do
          {
            v28 = *(_OWORD *)(v26 - 24);
            *(_DWORD *)(v27 - 9) = *(_DWORD *)(v26 - 9);
            *(_OWORD *)(v27 - 24) = v28;
            v27 -= 24;
            v26 -= 24;
          }
          while (v26 != v25);
          v29 = *(int64x2_t *)ptr;
        }
        v16 = v24 + 24;
        ptr[0] = v27;
        ptr[1] = v24 + 24;
        v61 = v29;
        v30 = allocator[0];
        allocator[0] = (CFAllocatorRef)&v20[24 * v19];
        v62 = v30;
        v60 = (char *)v29.i64[0];
        std::__split_buffer<SnippetTerm,CFBridgeAllocator<SnippetTerm> &>::~__split_buffer((uint64_t)&v60);
      }
      else
      {
        *(_QWORD *)ptr[1] = a3;
        v15[1] = v56;
        *((_BYTE *)v15 + 16) = a4;
        *((_BYTE *)v15 + 17) = a5;
        v16 = v15 + 3;
        *((_BYTE *)v15 + 18) = a6;
      }
      ptr[1] = v16;
      v32 = *(_QWORD *)(a1 + 24);
      v31 = *(_QWORD *)(a1 + 32);
      if (v32 >= v31)
      {
        v35 = *(_QWORD *)(a1 + 16);
        v36 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v32 - v35) >> 3);
        if ((unint64_t)(v36 + 1) > 0x492492492492492)
          goto LABEL_58;
        v37 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v31 - v35) >> 3);
        v38 = 2 * v37;
        if (2 * v37 <= v36 + 1)
          v38 = v36 + 1;
        if (v37 >= 0x249249249249249)
          v39 = 0x492492492492492;
        else
          v39 = v38;
        v63 = (CFAllocatorRef *)(a1 + 40);
        if (v39)
          v40 = (char *)CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 40), 56 * v39, 0);
        else
          v40 = 0;
        v41 = &v40[56 * v36];
        v60 = v40;
        v61.i64[0] = (uint64_t)v41;
        v62 = (CFAllocatorRef)&v40[56 * v39];
        v42 = *(_OWORD *)v57;
        *((_QWORD *)v41 + 2) = *(_QWORD *)&v57[16];
        *(_OWORD *)v41 = v42;
        std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::vector((_QWORD *)v41 + 3, (uint64_t)ptr);
        v61.i64[1] = (uint64_t)(v41 + 56);
        std::vector<TokenMatch::entry,CFBridgeAllocator<TokenMatch::entry>>::__swap_out_circular_buffer((uint64_t *)(a1 + 16), &v60);
        v34 = *(_QWORD *)(a1 + 24);
        std::__split_buffer<TokenMatch::entry,CFBridgeAllocator<TokenMatch::entry> &>::~__split_buffer((uint64_t)&v60);
      }
      else
      {
        v33 = *(_OWORD *)v57;
        *(_QWORD *)(v32 + 16) = *(_QWORD *)&v57[16];
        *(_OWORD *)v32 = v33;
        std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::vector((_QWORD *)(v32 + 24), (uint64_t)ptr);
        v34 = v32 + 56;
      }
      *(_QWORD *)(a1 + 24) = v34;
      if (ptr[0])
      {
        ptr[1] = ptr[0];
        CFAllocatorDeallocate(allocator[1], ptr[0]);
      }
      return;
    }
    if (*(_QWORD *)(v14 + 16) == v12 && !memcmp(*(const void **)(v14 + 8), __s, v12))
      break;
    v14 += 56;
  }
  v22 = *(_QWORD *)(v14 + 32);
  v21 = *(_QWORD *)(v14 + 40);
  if (v22 < v21)
  {
    *(_QWORD *)v22 = a3;
    *(_QWORD *)(v22 + 8) = v56;
    *(_BYTE *)(v22 + 16) = a4;
    *(_BYTE *)(v22 + 17) = a5;
    v23 = (char *)(v22 + 24);
    *(_BYTE *)(v22 + 18) = a6;
    goto LABEL_56;
  }
  v43 = *(_QWORD *)(v14 + 24);
  v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - v43) >> 3);
  if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_58:
    abort();
  v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - v43) >> 3);
  v46 = 2 * v45;
  if (2 * v45 <= v44 + 1)
    v46 = v44 + 1;
  if (v45 >= 0x555555555555555)
    v47 = 0xAAAAAAAAAAAAAAALL;
  else
    v47 = v46;
  ptr[1] = (void *)(v14 + 48);
  if (v47)
    v48 = (char *)CFAllocatorAllocate(*(CFAllocatorRef *)(v14 + 48), 24 * v47, 0);
  else
    v48 = 0;
  v49 = &v48[24 * v44];
  *(_QWORD *)v49 = a3;
  *((_QWORD *)v49 + 1) = v56;
  v49[16] = a4;
  v49[17] = a5;
  v49[18] = a6;
  v50 = *(_QWORD *)(v14 + 24);
  v51 = *(_QWORD *)(v14 + 32);
  if (v51 == v50)
  {
    v54 = vdupq_n_s64(v51);
    v52 = &v48[24 * v44];
  }
  else
  {
    v52 = &v48[24 * v44];
    do
    {
      v53 = *(_OWORD *)(v51 - 24);
      *(_DWORD *)(v52 - 9) = *(_DWORD *)(v51 - 9);
      *(_OWORD *)(v52 - 24) = v53;
      v52 -= 24;
      v51 -= 24;
    }
    while (v51 != v50);
    v54 = *(int64x2_t *)(v14 + 24);
  }
  v23 = v49 + 24;
  *(_QWORD *)(v14 + 24) = v52;
  *(_QWORD *)(v14 + 32) = v49 + 24;
  *(int64x2_t *)&v57[8] = v54;
  v55 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = &v48[24 * v47];
  ptr[0] = v55;
  *(_QWORD *)v57 = v54.i64[0];
  std::__split_buffer<SnippetTerm,CFBridgeAllocator<SnippetTerm> &>::~__split_buffer((uint64_t)v57);
LABEL_56:
  *(_QWORD *)(v14 + 32) = v23;
}

uint64_t std::__split_buffer<SnippetTerm,CFBridgeAllocator<SnippetTerm> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a1 + 8))
    *(_QWORD *)(a1 + 16) = (v2 - *(_QWORD *)(a1 + 8) - 24) % 0x18uLL + *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1)
    CFAllocatorDeallocate(**(CFAllocatorRef **)(a1 + 32), *(void **)a1);
  return a1;
}

_QWORD *std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::vector(_QWORD *a1, uint64_t a2)
{
  const __CFAllocator *v3;
  uint64_t v4;
  const void *v5;
  CFIndex v6;
  char *v7;
  char *v8;

  *a1 = 0;
  a1[1] = 0;
  v3 = *(const __CFAllocator **)(a2 + 24);
  a1[2] = 0;
  a1[3] = v3;
  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v6 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v7 = (char *)CFAllocatorAllocate(v3, v6, 0);
    *a1 = v7;
    a1[1] = v7;
    v8 = &v7[8 * (v6 >> 3)];
    a1[2] = v8;
    memmove(v7, v5, v6 - 5);
    a1[1] = v8;
  }
  return a1;
}

void TokenMatchFree(void *ptr)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *((_QWORD *)ptr + 2);
  if (v2)
  {
    v3 = *((_QWORD *)ptr + 3);
    v4 = (void *)*((_QWORD *)ptr + 2);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 32);
        if (v5)
        {
          *(_QWORD *)(v3 - 24) = v5;
          CFAllocatorDeallocate(*(CFAllocatorRef *)(v3 - 8), v5);
        }
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)ptr + 2);
    }
    *((_QWORD *)ptr + 3) = v2;
    CFAllocatorDeallocate(*((CFAllocatorRef *)ptr + 5), v4);
  }
  CFAllocatorDeallocate(*(CFAllocatorRef *)ptr, ptr);
}

void TokenMatchConvertToSnippetHints(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = *(uint64_t **)(a1 + 16);
  v3 = *(uint64_t **)(a1 + 24);
  v4 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (v3 - v2));
  if (v3 == v2)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *,false>(v2, v3, v5, 1);
  v7 = *(_QWORD *)(a1 + 16);
  for (i = *(_QWORD *)(a1 + 24); v7 != i; v7 += 56)
  {
    v8 = *(_QWORD *)(v7 + 24);
    v9 = *(_QWORD *)(v7 + 32);
    v10 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v8) >> 3));
    if (v9 == v8)
      v11 = 0;
    else
      v11 = v10;
    std::__introsort<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*,false>(v8, v9, v11, 1);
  }
}

double std::__introsort<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  _BOOL4 v26;
  uint64_t *v27;
  BOOL v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  void *v34;
  BOOL v35;
  double result;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  _BOOL4 v42;
  uint64_t *v43;
  void *v44;
  uint64_t *v45;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  int64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  int64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  void *v82;
  unint64_t v83;
  unint64_t v84;
  __int128 v85;
  uint64_t v86;
  _QWORD *v87;
  void *v88;
  void *v89;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  BOOL v100;
  void *v101;
  uint64_t *v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v111;
  _OWORD *v112;
  __int128 v113;
  __int128 v114;
  int64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  _BYTE v119[24];
  __int128 v120;
  uint64_t v121;
  uint64_t v122;

LABEL_1:
  v7 = (uint64_t)a1;
  v102 = a1 + 14;
  v103 = a1 + 7;
  v112 = a1 + 1;
  v8 = a1 + 3;
  while (2)
  {
    v9 = (uint64_t)a2 - v7;
    v10 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - v7) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()((uint64_t *)*(a2 - 6), *(a2 - 5), v7))
          *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>((uint64_t *)v7, a2 - 7).n128_u64[0];
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>((uint64_t *)v7, v7 + 56, (uint64_t)(a2 - 7));
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>((uint64_t *)v7, v7 + 56, v7 + 112, (uint64_t)(a2 - 7));
      case 5:
        return std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>((uint64_t *)v7, v7 + 56, v7 + 112, v7 + 168, (uint64_t)(a2 - 7));
      default:
        if (v9 > 1343)
        {
          if (!a3)
          {
            if ((uint64_t *)v7 != a2)
            {
              v105 = a2;
              v115 = (unint64_t)(v10 - 2) >> 1;
              v60 = v115;
              do
              {
                v61 = v60;
                if (v115 >= v60)
                {
                  v62 = (2 * v60) | 1;
                  v63 = v7 + 56 * v62;
                  if (2 * v60 + 2 < v10
                    && TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(v63 + 8), *(_QWORD *)(v63 + 16), v63 + 56))
                  {
                    v63 += 56;
                    v62 = 2 * v61 + 2;
                  }
                  v64 = v7 + 56 * v61;
                  if (!TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(v63 + 8), *(_QWORD *)(v63 + 16), v64))
                  {
                    v65 = *(_OWORD *)v64;
                    *(_QWORD *)&v119[16] = *(_QWORD *)(v64 + 16);
                    *(_OWORD *)v119 = v65;
                    v66 = v7 + 56 * v61;
                    v122 = *(_QWORD *)(v66 + 48);
                    v120 = *(_OWORD *)(v66 + 24);
                    v121 = *(_QWORD *)(v66 + 40);
                    *(_QWORD *)(v66 + 24) = 0;
                    *(_QWORD *)(v66 + 32) = 0;
                    *(_QWORD *)(v66 + 40) = 0;
                    do
                    {
                      v67 = v63;
                      *(_QWORD *)v64 = *(_QWORD *)v63;
                      *(_OWORD *)(v64 + 8) = *(_OWORD *)(v63 + 8);
                      v68 = (_QWORD *)(v63 + 24);
                      std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::__move_assign(v64 + 24, (__n128 *)(v63 + 24));
                      if (v115 < v62)
                        break;
                      v69 = (2 * v62) | 1;
                      v63 = v7 + 56 * v69;
                      v70 = 2 * v62 + 2;
                      if (v70 < v10
                        && TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(v63 + 8), *(_QWORD *)(v63 + 16), v63 + 56))
                      {
                        v63 += 56;
                        v69 = v70;
                      }
                      v64 = v67;
                      v62 = v69;
                    }
                    while (!TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(v63 + 8), *(_QWORD *)(v63 + 16), (uint64_t)v119));
                    *(_QWORD *)v67 = *(_QWORD *)v119;
                    *(_OWORD *)(v67 + 8) = *(_OWORD *)&v119[8];
                    v71 = *(void **)(v67 + 24);
                    if (v71)
                    {
                      *(_QWORD *)(v67 + 32) = v71;
                      CFAllocatorDeallocate(*(CFAllocatorRef *)(v67 + 48), v71);
                      *v68 = 0;
                      v68[1] = 0;
                      v68[2] = 0;
                    }
                    result = *(double *)&v120;
                    *(_OWORD *)(v67 + 24) = v120;
                    *(_QWORD *)(v67 + 40) = v121;
                  }
                }
                v60 = v61 - 1;
              }
              while (v61);
              v72 = v9 / 0x38uLL;
              v73 = v105;
              do
              {
                if (v72 >= 2)
                {
                  v106 = v73;
                  v74 = 0;
                  v75 = *(_QWORD *)v7;
                  v118 = *(_OWORD *)(v7 + 8);
                  v111 = *(_OWORD *)(v7 + 24);
                  v116 = *(_QWORD *)(v7 + 40);
                  *(_QWORD *)(v7 + 32) = 0;
                  *(_QWORD *)(v7 + 40) = 0;
                  *(_QWORD *)(v7 + 24) = 0;
                  v76 = v7;
                  do
                  {
                    v77 = v76 + 56 * v74 + 56;
                    v78 = (2 * v74) | 1;
                    v79 = 2 * v74 + 2;
                    if (v79 < v72
                      && TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(v76 + 56 * v74 + 64), *(_QWORD *)(v76 + 56 * v74 + 72), v76 + 56 * v74 + 112))
                    {
                      v77 += 56;
                      v78 = v79;
                    }
                    *(_QWORD *)v76 = *(_QWORD *)v77;
                    *(_OWORD *)(v76 + 8) = *(_OWORD *)(v77 + 8);
                    std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::__move_assign(v76 + 24, (__n128 *)(v77 + 24));
                    v76 = v77;
                    v74 = v78;
                  }
                  while (v78 <= (uint64_t)((unint64_t)(v72 - 2) >> 1));
                  v80 = (_OWORD *)(v77 + 8);
                  if ((uint64_t *)v77 == v106 - 7)
                  {
                    *(_QWORD *)v77 = v75;
                    *v80 = v118;
                    v89 = *(void **)(v77 + 24);
                    if (v89)
                    {
                      *(_QWORD *)(v77 + 32) = v89;
                      CFAllocatorDeallocate(*(CFAllocatorRef *)(v77 + 48), v89);
                    }
                    result = *(double *)&v111;
                    *(_OWORD *)(v77 + 24) = v111;
                    *(_QWORD *)(v77 + 40) = v116;
                  }
                  else
                  {
                    *(_QWORD *)v77 = *(v106 - 7);
                    v81 = v77 + 56;
                    *v80 = *((_OWORD *)v106 - 3);
                    std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::__move_assign(v77 + 24, (__n128 *)v106 - 2);
                    *(v106 - 7) = v75;
                    *((_OWORD *)v106 - 3) = v118;
                    v82 = (void *)*(v106 - 4);
                    if (v82)
                    {
                      *(v106 - 3) = (uint64_t)v82;
                      CFAllocatorDeallocate((CFAllocatorRef)*(v106 - 1), v82);
                    }
                    result = *(double *)&v111;
                    *((_OWORD *)v106 - 2) = v111;
                    *(v106 - 2) = v116;
                    if (v81 - v7 >= 57)
                    {
                      v83 = (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v81 - v7) >> 3) - 2) >> 1;
                      v84 = v7 + 56 * v83;
                      if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(v84 + 8), *(_QWORD *)(v84 + 16), v77))
                      {
                        v85 = *(_OWORD *)v77;
                        *(_QWORD *)&v119[16] = *(_QWORD *)(v77 + 16);
                        *(_OWORD *)v119 = v85;
                        v122 = *(_QWORD *)(v77 + 48);
                        v120 = *(_OWORD *)(v77 + 24);
                        v121 = *(_QWORD *)(v77 + 40);
                        *(_QWORD *)(v77 + 24) = 0;
                        *(_QWORD *)(v77 + 32) = 0;
                        *(_QWORD *)(v77 + 40) = 0;
                        do
                        {
                          v86 = v84;
                          *(_QWORD *)v77 = *(_QWORD *)v84;
                          *(_OWORD *)(v77 + 8) = *(_OWORD *)(v84 + 8);
                          v87 = (_QWORD *)(v84 + 24);
                          std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::__move_assign(v77 + 24, (__n128 *)(v84 + 24));
                          if (!v83)
                            break;
                          v83 = (v83 - 1) >> 1;
                          v84 = v7 + 56 * v83;
                          v77 = v86;
                        }
                        while (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(v84 + 8), *(_QWORD *)(v84 + 16), (uint64_t)v119));
                        *(_QWORD *)v86 = *(_QWORD *)v119;
                        *(_OWORD *)(v86 + 8) = *(_OWORD *)&v119[8];
                        v88 = *(void **)(v86 + 24);
                        if (v88)
                        {
                          *(_QWORD *)(v86 + 32) = v88;
                          CFAllocatorDeallocate(*(CFAllocatorRef *)(v86 + 48), v88);
                          *v87 = 0;
                          v87[1] = 0;
                          v87[2] = 0;
                        }
                        result = *(double *)&v120;
                        *(_OWORD *)(v86 + 24) = v120;
                        *(_QWORD *)(v86 + 40) = v121;
                      }
                    }
                  }
                  v73 = v106;
                }
                v73 -= 7;
              }
              while ((unint64_t)v72-- > 2);
            }
            return result;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = (uint64_t *)(v7 + 56 * ((unint64_t)v10 >> 1));
          v13 = (uint64_t)(a2 - 7);
          if ((unint64_t)v9 < 0x1C01)
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(v12, v7, (uint64_t)(a2 - 7));
          }
          else
          {
            v108 = a3;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>((uint64_t *)v7, (uint64_t)v12, (uint64_t)(a2 - 7));
            v14 = a2;
            v15 = v7 + 56 * v11;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(v103, v15 - 56, (uint64_t)(v14 - 14));
            v16 = v14;
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(v102, v15 + 56, (uint64_t)(v14 - 21));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>((uint64_t *)(v15 - 56), (uint64_t)v12, v15 + 56);
            v17 = *(_QWORD *)v7;
            *(_OWORD *)v119 = *v112;
            v107 = *(_OWORD *)(v7 + 24);
            v18 = *(_QWORD *)(v7 + 40);
            v8[1] = 0;
            v8[2] = 0;
            *v8 = 0;
            *(_QWORD *)v7 = *v12;
            *v112 = *(_OWORD *)(v15 + 8);
            std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::__move_assign((uint64_t)v8, (__n128 *)(v15 + 24));
            *v12 = v17;
            *(_OWORD *)(v15 + 8) = *(_OWORD *)v119;
            v19 = *(void **)(v15 + 24);
            if (v19)
            {
              v20 = v7 + 56 * v11;
              *(_QWORD *)(v20 + 32) = v19;
              CFAllocatorDeallocate(*(CFAllocatorRef *)(v20 + 48), v19);
              *(_QWORD *)(v15 + 40) = 0;
            }
            *(_OWORD *)(v15 + 24) = v107;
            *(_QWORD *)(v7 + 56 * v11 + 40) = v18;
            a2 = v16;
            a3 = v108;
          }
          --a3;
          if ((a4 & 1) != 0
            || TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(v7 - 48), *(_QWORD *)(v7 - 40), v7))
          {
            v21 = *(_OWORD *)v7;
            *(_QWORD *)&v119[16] = *(_QWORD *)(v7 + 16);
            *(_OWORD *)v119 = v21;
            v122 = *(_QWORD *)(v7 + 48);
            v120 = *(_OWORD *)(v7 + 24);
            v121 = *(_QWORD *)(v7 + 40);
            *v8 = 0;
            v8[1] = 0;
            v8[2] = 0;
            v22 = (uint64_t *)v7;
            do
            {
              v23 = v22;
              v22 += 7;
            }
            while (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()((uint64_t *)v23[8], v23[9], (uint64_t)v119));
            v24 = a2;
            if (v23 == (uint64_t *)v7)
            {
              v27 = a2;
              while (v22 < v27)
              {
                v25 = v27 - 7;
                v28 = TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()((uint64_t *)*(v27 - 6), *(v27 - 5), (uint64_t)v119);
                v27 = v25;
                if (v28)
                  goto LABEL_22;
              }
              v25 = v27;
            }
            else
            {
              do
              {
                v25 = v24 - 7;
                v26 = TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()((uint64_t *)*(v24 - 6), *(v24 - 5), (uint64_t)v119);
                v24 = v25;
              }
              while (!v26);
            }
LABEL_22:
            if (v22 >= v25)
            {
              a1 = v22;
            }
            else
            {
              v29 = v25;
              a1 = v22;
              do
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>(a1, v29);
                do
                {
                  v30 = (uint64_t *)a1[8];
                  v31 = a1[9];
                  a1 += 7;
                }
                while (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(v30, v31, (uint64_t)v119));
                do
                {
                  v32 = (uint64_t *)*(v29 - 6);
                  v33 = *(v29 - 5);
                  v29 -= 7;
                }
                while (!TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(v32, v33, (uint64_t)v119));
              }
              while (a1 < v29);
            }
            if (a1 - 7 != (uint64_t *)v7)
            {
              *(_QWORD *)v7 = *(a1 - 7);
              *v112 = *((_OWORD *)a1 - 3);
              std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::__move_assign((uint64_t)v8, (__n128 *)a1 - 2);
            }
            v34 = (void *)*(a1 - 4);
            *(a1 - 7) = *(_QWORD *)v119;
            *((_OWORD *)a1 - 3) = *(_OWORD *)&v119[8];
            if (v34)
            {
              *(a1 - 3) = (uint64_t)v34;
              CFAllocatorDeallocate((CFAllocatorRef)*(a1 - 1), v34);
              *(a1 - 4) = 0;
              *(a1 - 3) = 0;
              *(a1 - 2) = 0;
            }
            *((_OWORD *)a1 - 2) = v120;
            *(a1 - 2) = v121;
            if (v22 >= v25)
            {
              v35 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>((uint64_t *)v7, a1 - 7);
              if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(a1, a2))
              {
                a2 = a1 - 7;
                if (!v35)
                  continue;
                return result;
              }
              if (v35)
                goto LABEL_1;
            }
            std::__introsort<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *,false>(v7, a1 - 7, a3, a4 & 1);
            a4 = 0;
            goto LABEL_1;
          }
          v37 = a2;
          v38 = *(_QWORD *)v7;
          v39 = *(uint64_t **)(v7 + 8);
          v40 = *(_QWORD *)(v7 + 16);
          v113 = *(_OWORD *)(v7 + 24);
          v109 = *(_QWORD *)(v7 + 40);
          *(_QWORD *)(v7 + 24) = 0;
          *(_QWORD *)(v7 + 32) = 0;
          *(_QWORD *)(v7 + 40) = 0;
          if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(v39, v40, v13))
          {
            a1 = (uint64_t *)v7;
            do
              a1 += 7;
            while (!TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(v39, v40, (uint64_t)a1));
          }
          else
          {
            v41 = v7 + 56;
            do
            {
              a1 = (uint64_t *)v41;
              if (v41 >= (unint64_t)v37)
                break;
              v42 = TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(v39, v40, v41);
              v41 = (unint64_t)(a1 + 7);
            }
            while (!v42);
          }
          v43 = v37;
          if (a1 < v37)
          {
            v43 = v37;
            do
              v43 -= 7;
            while (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(v39, v40, (uint64_t)v43));
          }
          while (a1 < v43)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>(a1, v43);
            do
              a1 += 7;
            while (!TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(v39, v40, (uint64_t)a1));
            do
              v43 -= 7;
            while (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(v39, v40, (uint64_t)v43));
          }
          if (a1 - 7 != (uint64_t *)v7)
          {
            *(_QWORD *)v7 = *(a1 - 7);
            *(_OWORD *)(v7 + 8) = *((_OWORD *)a1 - 3);
            std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::__move_assign(v7 + 24, (__n128 *)a1 - 2);
          }
          *(a1 - 7) = v38;
          *(a1 - 6) = (uint64_t)v39;
          *(a1 - 5) = v40;
          v44 = (void *)*(a1 - 4);
          if (v44)
          {
            *(a1 - 3) = (uint64_t)v44;
            CFAllocatorDeallocate((CFAllocatorRef)*(a1 - 1), v44);
          }
          a4 = 0;
          result = *(double *)&v113;
          *((_OWORD *)a1 - 2) = v113;
          *(a1 - 2) = v109;
          a2 = v37;
          goto LABEL_1;
        }
        v45 = (uint64_t *)(v7 + 56);
        v47 = (uint64_t *)v7 == a2 || v45 == a2;
        if ((a4 & 1) != 0)
        {
          if (!v47)
          {
            v48 = 0;
            v49 = v7;
            v104 = a2;
            do
            {
              v50 = v45;
              if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()((uint64_t *)v45[1], v45[2], v49))
              {
                v52 = *v50;
                v51 = (uint64_t *)v50[1];
                v53 = v50[2];
                v114 = *(_OWORD *)(v49 + 80);
                v54 = *(_QWORD *)(v49 + 96);
                *(_QWORD *)(v49 + 80) = 0;
                *(_QWORD *)(v49 + 88) = 0;
                v55 = v48;
                *(_QWORD *)(v49 + 96) = 0;
                while (1)
                {
                  v56 = v55;
                  v57 = v7 + v55;
                  *(_QWORD *)(v57 + 56) = *(_QWORD *)(v7 + v55);
                  *(_OWORD *)(v57 + 64) = *(_OWORD *)(v7 + v55 + 8);
                  std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::__move_assign(v7 + v55 + 80, (__n128 *)(v7 + v55 + 24));
                  if (!v55)
                    break;
                  v55 -= 56;
                  if (!TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(v51, v53, v56 - 56 + v7))
                  {
                    v57 = v7 + v56;
                    v58 = v7 + v56;
                    goto LABEL_82;
                  }
                }
                v58 = v7;
LABEL_82:
                *(_QWORD *)v58 = v52;
                *(_QWORD *)(v57 + 8) = v51;
                *(_QWORD *)(v57 + 16) = v53;
                v59 = *(void **)(v57 + 24);
                if (v59)
                {
                  *(_QWORD *)(v58 + 32) = v59;
                  CFAllocatorDeallocate(*(CFAllocatorRef *)(v58 + 48), v59);
                  *(_QWORD *)(v57 + 40) = 0;
                }
                result = *(double *)&v114;
                *(_OWORD *)(v57 + 24) = v114;
                *(_QWORD *)(v58 + 40) = v54;
                a2 = v104;
              }
              v45 = v50 + 7;
              v48 += 56;
              v49 = (uint64_t)v50;
            }
            while (v50 + 7 != a2);
          }
        }
        else if (!v47)
        {
          v91 = v7 + 80;
          do
          {
            v92 = v45;
            if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()((uint64_t *)v45[1], v45[2], v7))
            {
              v93 = a2;
              v95 = *v92;
              v94 = (uint64_t *)v92[1];
              v96 = v92[2];
              v117 = *(_OWORD *)(v7 + 80);
              v97 = *(_QWORD *)(v7 + 96);
              *(_QWORD *)(v7 + 80) = 0;
              *(_QWORD *)(v7 + 88) = 0;
              v98 = v91;
              *(_QWORD *)(v7 + 96) = 0;
              do
              {
                *(_QWORD *)(v98 - 24) = *(_QWORD *)(v98 - 80);
                *(_OWORD *)(v98 - 16) = *(_OWORD *)(v98 - 72);
                std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::__move_assign(v98, (__n128 *)(v98 - 56));
                v100 = TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(v94, v96, v98 - 136);
                v99 = v98 - 56;
                v98 -= 56;
              }
              while (v100);
              *(_QWORD *)(v99 - 24) = v95;
              *(_QWORD *)(v99 - 16) = v94;
              *(_QWORD *)(v99 - 8) = v96;
              v101 = *(void **)v99;
              if (*(_QWORD *)v99)
              {
                *(_QWORD *)(v99 + 8) = v101;
                CFAllocatorDeallocate(*(CFAllocatorRef *)(v99 + 24), v101);
              }
              result = *(double *)&v117;
              *(_OWORD *)v99 = v117;
              *(_QWORD *)(v99 + 16) = v97;
              a2 = v93;
            }
            v45 = v92 + 7;
            v91 += 56;
            v7 = (uint64_t)v92;
          }
          while (v92 + 7 != a2);
        }
        return result;
    }
  }
}

  v9 = (__n128 *)(a2 - 32);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = (uint64_t)(a2 - v10) >> 5;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return a5.n128_f64[0];
      case 2uLL:
        v61 = *(_QWORD *)(a2 - 32);
        v64 = v61 == *(_QWORD *)v10;
        v62 = v61 < *(_QWORD *)v10;
        if (v64)
          v62 = *(unsigned __int8 *)(a2 - 8) > *(unsigned __int8 *)(v10 + 24);
        if (v62)
        {
          *(_OWORD *)v136 = *(_OWORD *)v10;
          *(_OWORD *)&v136[16] = *(_OWORD *)(v10 + 16);
          a5 = *v9;
          *(_OWORD *)(v10 + 10) = *(_OWORD *)(a2 - 22);
          *(__n128 *)v10 = a5;
          a5.n128_u64[0] = *(_QWORD *)v136;
          *(_OWORD *)(a2 - 22) = *(_OWORD *)&v136[10];
          *v9 = *(__n128 *)v136;
        }
        return a5.n128_f64[0];
      case 3uLL:
        a5.n128_u64[0] = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,DocMeta *>((__int128 *)v10, (uint64_t *)(v10 + 32), (__int128 *)(a2 - 32), a5).n128_u64[0];
        return a5.n128_f64[0];
      case 4uLL:
        a5.n128_u64[0] = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,DocMeta *>(v10, (__int128 *)(v10 + 32), (__int128 *)(v10 + 64), (__int128 *)(a2 - 32), a5).n128_u64[0];
        return a5.n128_f64[0];
      case 5uLL:
        a5.n128_u64[0] = std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,DocMeta *>(v10, v10 + 32, v10 + 64, v10 + 96, a2 - 32, a5).n128_u64[0];
        return a5.n128_f64[0];
      default:
        if (v11 <= 767)
        {
          v63 = v10 + 32;
          v64 = v10 == a2 || v63 == a2;
          v65 = v64;
          if ((a4 & 1) != 0)
          {
            if ((v65 & 1) == 0)
            {
              v66 = 0;
              v67 = v10;
              do
              {
                v68 = v63;
                v69 = *(_QWORD *)(v67 + 32);
                v70 = *(unsigned __int8 *)(v67 + 56);
                v71 = v69 < *(_QWORD *)v67;
                if (v69 == *(_QWORD *)v67)
                  v71 = v70 > *(unsigned __int8 *)(v67 + 24);
                if (v71)
                {
                  v137 = *(_OWORD *)(v67 + 40);
                  v72 = *(_BYTE *)(v67 + 57);
                  v73 = v66;
                  while (1)
                  {
                    v74 = v10 + v73;
                    *(_OWORD *)(v74 + 32) = *(_OWORD *)(v10 + v73);
                    *(_OWORD *)(v74 + 42) = *(_OWORD *)(v10 + v73 + 10);
                    if (!v73)
                      break;
                    v75 = *(_QWORD *)(v74 - 32);
                    v76 = v70 > *(unsigned __int8 *)(v74 - 8);
                    v64 = v69 == v75;
                    v77 = v69 < v75;
                    if (!v64)
                      v76 = v77;
                    v73 -= 32;
                    if (!v76)
                    {
                      v78 = v10 + v73 + 32;
                      goto LABEL_106;
                    }
                  }
                  v78 = v10;
LABEL_106:
                  *(_QWORD *)v78 = v69;
                  a5.n128_u64[0] = v137;
                  *(_OWORD *)(v78 + 8) = v137;
                  *(_BYTE *)(v78 + 24) = v70;
                  *(_BYTE *)(v78 + 25) = v72;
                }
                v63 = v68 + 32;
                v66 += 32;
                v67 = v68;
              }
              while (v68 + 32 != a2);
            }
          }
          else if ((v65 & 1) == 0)
          {
            do
            {
              v119 = v63;
              v120 = *(_QWORD *)(a1 + 32);
              v121 = *(unsigned __int8 *)(a1 + 56);
              v122 = v120 < *(_QWORD *)a1;
              if (v120 == *(_QWORD *)a1)
                v122 = v121 > *(unsigned __int8 *)(a1 + 24);
              if (v122)
              {
                v140 = *(_OWORD *)(a1 + 40);
                v123 = *(_BYTE *)(a1 + 57);
                v124 = v119;
                do
                {
                  *(_OWORD *)v124 = *(_OWORD *)(v124 - 32);
                  *(_OWORD *)(v124 + 10) = *(_OWORD *)(v124 - 22);
                  v125 = *(_QWORD *)(v124 - 64);
                  v126 = *(unsigned __int8 *)(v124 - 40);
                  v124 -= 32;
                  v127 = v121 > v126;
                  v64 = v120 == v125;
                  v128 = v120 < v125;
                  if (v64)
                    v128 = v127;
                }
                while (v128);
                *(_QWORD *)v124 = v120;
                a5.n128_u64[0] = v140;
                *(_OWORD *)(v124 + 8) = v140;
                *(_BYTE *)(v124 + 24) = v121;
                *(_BYTE *)(v124 + 25) = v123;
              }
              v63 = v119 + 32;
              a1 = v119;
            }
            while (v119 + 32 != a2);
          }
          return a5.n128_f64[0];
        }
        if (!a3)
        {
          if (v10 != a2)
          {
            v79 = (v12 - 2) >> 1;
            v80 = v79;
            do
            {
              v81 = v80;
              if (v79 >= v80)
              {
                v82 = (2 * v80) | 1;
                v83 = v10 + 32 * v82;
                if (2 * v81 + 2 >= (uint64_t)v12)
                {
                  v84 = *(_QWORD *)v83;
                }
                else
                {
                  v84 = *(_QWORD *)(v83 + 32);
                  v85 = *(unsigned __int8 *)(v83 + 24) > *(unsigned __int8 *)(v83 + 56);
                  if (*(_QWORD *)v83 != v84)
                    v85 = *(_QWORD *)v83 < v84;
                  if (v85)
                    v83 += 32;
                  else
                    v84 = *(_QWORD *)v83;
                  if (v85)
                    v82 = 2 * v81 + 2;
                }
                v86 = v10 + 32 * v81;
                v87 = *(_QWORD *)v86;
                v88 = *(unsigned __int8 *)(v86 + 24);
                v64 = v84 == *(_QWORD *)v86;
                v89 = v84 < *(_QWORD *)v86;
                if (v64)
                  v89 = *(unsigned __int8 *)(v83 + 24) > v88;
                if (!v89)
                {
                  v138 = *(_OWORD *)(v86 + 8);
                  v90 = *(_BYTE *)(v86 + 25);
                  do
                  {
                    v91 = v83;
                    v92 = *(_OWORD *)v83;
                    *(_OWORD *)(v86 + 10) = *(_OWORD *)(v83 + 10);
                    *(_OWORD *)v86 = v92;
                    if (v79 < v82)
                      break;
                    v93 = (2 * v82) | 1;
                    v83 = v10 + 32 * v93;
                    v82 = 2 * v82 + 2;
                    if (v82 >= (uint64_t)v12)
                    {
                      v94 = *(_QWORD *)v83;
                      v82 = v93;
                    }
                    else
                    {
                      v94 = *(_QWORD *)(v83 + 32);
                      v95 = *(unsigned __int8 *)(v83 + 24) > *(unsigned __int8 *)(v83 + 56);
                      if (*(_QWORD *)v83 != v94)
                        v95 = *(_QWORD *)v83 < v94;
                      if (v95)
                        v83 += 32;
                      else
                        v94 = *(_QWORD *)v83;
                      if (!v95)
                        v82 = v93;
                    }
                    v64 = v94 == v87;
                    v96 = v94 < v87;
                    if (v64)
                      v96 = *(unsigned __int8 *)(v83 + 24) > v88;
                    v86 = v91;
                  }
                  while (!v96);
                  *(_QWORD *)v91 = v87;
                  *(_OWORD *)(v91 + 8) = v138;
                  *(_BYTE *)(v91 + 24) = v88;
                  *(_BYTE *)(v91 + 25) = v90;
                }
              }
              v80 = v81 - 1;
            }
            while (v81);
            v97 = (unint64_t)v11 >> 5;
            do
            {
              v98 = 0;
              *(_OWORD *)v139 = *(_OWORD *)v10;
              *(_OWORD *)&v139[16] = *(_OWORD *)(v10 + 16);
              v99 = v97 - 2;
              if (v97 < 2)
                v99 = v97 - 1;
              v100 = v99 >> 1;
              v101 = (_OWORD *)v10;
              do
              {
                v102 = &v101[2 * v98 + 2];
                v103 = (2 * v98) | 1;
                v104 = 2 * v98 + 2;
                if (v104 < v97)
                {
                  v105 = *((_QWORD *)v102 + 4);
                  v106 = *(_QWORD *)v102 < v105;
                  if (*(_QWORD *)v102 == v105)
                    v106 = *((unsigned __int8 *)v102 + 24) > *((unsigned __int8 *)v102 + 56);
                  if (v106)
                  {
                    v102 += 2;
                    v103 = v104;
                  }
                }
                v107 = *v102;
                *(_OWORD *)((char *)v101 + 10) = *(_OWORD *)((char *)v102 + 10);
                *v101 = v107;
                v101 = v102;
                v98 = v103;
              }
              while (v103 <= v100);
              a2 -= 32;
              if (v102 == (_OWORD *)a2)
              {
                a5.n128_u64[0] = *(_QWORD *)v139;
                *(_OWORD *)((char *)v102 + 10) = *(_OWORD *)&v139[10];
                *v102 = *(_OWORD *)v139;
              }
              else
              {
                a5 = *(__n128 *)a2;
                *(_OWORD *)((char *)v102 + 10) = *(_OWORD *)(a2 + 10);
                *v102 = a5;
                a5.n128_u64[0] = *(_QWORD *)v139;
                *(_OWORD *)(a2 + 10) = *(_OWORD *)&v139[10];
                *(_OWORD *)a2 = *(_OWORD *)v139;
                v108 = (uint64_t)v102 - v10 + 32;
                if (v108 >= 33)
                {
                  v109 = (unint64_t)((v108 >> 5) - 2) >> 1;
                  v110 = v10 + 32 * v109;
                  v111 = *(_QWORD *)v102;
                  v112 = *((unsigned __int8 *)v102 + 24);
                  v113 = *(_QWORD *)v110 < *(_QWORD *)v102;
                  if (*(_QWORD *)v110 == *(_QWORD *)v102)
                    v113 = *(unsigned __int8 *)(v110 + 24) > v112;
                  if (v113)
                  {
                    v132 = *(_OWORD *)((char *)v102 + 8);
                    v114 = *((_BYTE *)v102 + 25);
                    do
                    {
                      v115 = v110;
                      v116 = *(_OWORD *)v110;
                      *(_OWORD *)((char *)v102 + 10) = *(_OWORD *)(v110 + 10);
                      *v102 = v116;
                      if (!v109)
                        break;
                      v109 = (v109 - 1) >> 1;
                      v110 = v10 + 32 * v109;
                      v117 = *(unsigned __int8 *)(v110 + 24) > v112;
                      if (*(_QWORD *)v110 != v111)
                        v117 = *(_QWORD *)v110 < v111;
                      v102 = (_OWORD *)v115;
                    }
                    while (v117);
                    *(_QWORD *)v115 = v111;
                    a5.n128_u64[0] = v132;
                    *(_OWORD *)(v115 + 8) = v132;
                    *(_BYTE *)(v115 + 24) = v112;
                    *(_BYTE *)(v115 + 25) = v114;
                  }
                }
              }
            }
            while (v97-- > 2);
          }
          return a5.n128_f64[0];
        }
        v13 = v12 >> 1;
        v14 = v10 + 32 * (v12 >> 1);
        if ((unint64_t)v11 <= 0x1000)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,DocMeta *>((__int128 *)(a1 + 32 * (v12 >> 1)), (uint64_t *)a1, (__int128 *)(a2 - 32), a5);
        }
        else
        {
          v15 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,DocMeta *>((__int128 *)a1, (uint64_t *)(a1 + 32 * (v12 >> 1)), (__int128 *)(a2 - 32), a5);
          v16 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,DocMeta *>((__int128 *)(a1 + 32), (uint64_t *)(v14 - 32), (__int128 *)(a2 - 64), v15);
          v17 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,DocMeta *>((__int128 *)(a1 + 64), (uint64_t *)(a1 + 32 + 32 * v13), (__int128 *)(a2 - 96), v16);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,DocMeta *>((__int128 *)(v14 - 32), (uint64_t *)v14, (__int128 *)(a1 + 32 + 32 * v13), v17);
          *(_OWORD *)v133 = *(_OWORD *)a1;
          *(_OWORD *)&v133[16] = *(_OWORD *)(a1 + 16);
          v18 = *(_OWORD *)(v14 + 10);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *(_OWORD *)(a1 + 10) = v18;
          *(_OWORD *)(v14 + 10) = *(_OWORD *)&v133[10];
          *(_OWORD *)v14 = *(_OWORD *)v133;
        }
        --a3;
        v19 = *(_QWORD *)a1;
        if ((a4 & 1) == 0)
        {
          v21 = *(_QWORD *)(a1 - 32);
          v20 = *(unsigned __int8 *)(a1 + 24);
          v64 = v21 == v19;
          v22 = v21 < v19;
          if (v64)
            v22 = *(unsigned __int8 *)(a1 - 8) > v20;
          if (v22)
            goto LABEL_13;
          v131 = *(__n128 *)(a1 + 8);
          v43 = *(_QWORD *)(a2 - 32);
          v64 = v19 == v43;
          v44 = v19 < v43;
          if (v64)
            v44 = v20 > *(unsigned __int8 *)(a2 - 8);
          if (v44)
          {
            v10 = a1;
            do
            {
              v45 = *(_QWORD *)(v10 + 32);
              v10 += 32;
              v46 = v19 < v45;
              if (v19 == v45)
                v46 = v20 > *(unsigned __int8 *)(v10 + 24);
            }
            while (!v46);
          }
          else
          {
            v47 = (uint64_t *)(a1 + 32);
            do
            {
              v10 = (unint64_t)v47;
              if ((unint64_t)v47 >= a2)
                break;
              v48 = *v47;
              v49 = v20 > *(unsigned __int8 *)(v10 + 24);
              v64 = v19 == v48;
              v50 = v19 < v48;
              if (!v64)
                v49 = v50;
              v47 = (uint64_t *)(v10 + 32);
            }
            while (!v49);
          }
          v51 = a2;
          if (v10 < a2)
          {
            v51 = a2;
            do
            {
              v52 = *(_QWORD *)(v51 - 32);
              v51 -= 32;
              v53 = v19 < v52;
              if (v19 == v52)
                v53 = v20 > *(unsigned __int8 *)(v51 + 24);
            }
            while (v53);
          }
          v54 = *(_BYTE *)(a1 + 25);
          while (v10 < v51)
          {
            *(_OWORD *)v135 = *(_OWORD *)v10;
            *(_OWORD *)&v135[16] = *(_OWORD *)(v10 + 16);
            v55 = *(_OWORD *)v51;
            *(_OWORD *)(v10 + 10) = *(_OWORD *)(v51 + 10);
            *(_OWORD *)v10 = v55;
            *(_OWORD *)(v51 + 10) = *(_OWORD *)&v135[10];
            *(_OWORD *)v51 = *(_OWORD *)v135;
            do
            {
              v56 = *(_QWORD *)(v10 + 32);
              v10 += 32;
              v57 = v19 < v56;
              if (v19 == v56)
                v57 = v20 > *(unsigned __int8 *)(v10 + 24);
            }
            while (!v57);
            do
            {
              v58 = *(_QWORD *)(v51 - 32);
              v51 -= 32;
              v59 = v19 < v58;
              if (v19 == v58)
                v59 = v20 > *(unsigned __int8 *)(v51 + 24);
            }
            while (v59);
          }
          if (v10 - 32 != a1)
          {
            v60 = *(_OWORD *)(v10 - 32);
            *(_OWORD *)(a1 + 10) = *(_OWORD *)(v10 - 22);
            *(_OWORD *)a1 = v60;
          }
          a4 = 0;
          *(_QWORD *)(v10 - 32) = v19;
          a5 = v131;
          *(__n128 *)(v10 - 24) = v131;
          *(_BYTE *)(v10 - 8) = v20;
          *(_BYTE *)(v10 - 7) = v54;
          continue;
        }
        v20 = *(unsigned __int8 *)(a1 + 24);
LABEL_13:
        v130 = *(__n128 *)(a1 + 8);
        v23 = *(_BYTE *)(a1 + 25);
        v24 = a1;
        do
        {
          v25 = v24;
          v26 = *(_QWORD *)(v24 + 32);
          v24 += 32;
          v27 = v26 < v19;
          if (v26 == v19)
            v27 = *(unsigned __int8 *)(v25 + 56) > v20;
        }
        while (v27);
        v28 = a2;
        if (v25 == a1)
        {
          v28 = a2;
          do
          {
            if (v24 >= v28)
              break;
            v31 = *(_QWORD *)(v28 - 32);
            v28 -= 32;
            v32 = v31 < v19;
            if (v31 == v19)
              v32 = *(unsigned __int8 *)(v28 + 24) > v20;
          }
          while (!v32);
        }
        else
        {
          do
          {
            v29 = *(_QWORD *)(v28 - 32);
            v28 -= 32;
            v30 = v29 < v19;
            if (v29 == v19)
              v30 = *(unsigned __int8 *)(v28 + 24) > v20;
          }
          while (!v30);
        }
        if (v24 >= v28)
        {
          v10 = v24;
        }
        else
        {
          v33 = v28;
          v10 = v24;
          do
          {
            *(_OWORD *)v134 = *(_OWORD *)v10;
            v34 = *(_OWORD *)v10;
            *(_OWORD *)&v134[16] = *(_OWORD *)(v10 + 16);
            v35 = *(_OWORD *)(v33 + 10);
            *(_OWORD *)v10 = *(_OWORD *)v33;
            *(_OWORD *)(v10 + 10) = v35;
            *(_OWORD *)(v33 + 10) = *(_OWORD *)&v134[10];
            *(_OWORD *)v33 = v34;
            do
            {
              v36 = *(_QWORD *)(v10 + 32);
              v10 += 32;
              v37 = v36 < v19;
              if (v36 == v19)
                v37 = *(unsigned __int8 *)(v10 + 24) > v20;
            }
            while (v37);
            do
            {
              v38 = *(_QWORD *)(v33 - 32);
              v33 -= 32;
              v39 = v38 < v19;
              if (v38 == v19)
                v39 = *(unsigned __int8 *)(v33 + 24) > v20;
            }
            while (!v39);
          }
          while (v10 < v33);
        }
        if (v10 - 32 != a1)
        {
          v40 = *(_OWORD *)(v10 - 32);
          *(_OWORD *)(a1 + 10) = *(_OWORD *)(v10 - 22);
          *(_OWORD *)a1 = v40;
        }
        *(_QWORD *)(v10 - 32) = v19;
        *(__n128 *)(v10 - 24) = v130;
        *(_BYTE *)(v10 - 8) = v20;
        *(_BYTE *)(v10 - 7) = v23;
        if (v24 < v28)
        {
LABEL_44:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,DocMeta *,false>(a1, v10 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,DocMeta *>(a1, v10 - 32, v130);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,DocMeta *>(v10, a2, v42))
        {
          if (v41)
            continue;
          goto LABEL_44;
        }
        a2 = v10 - 32;
        if (!v41)
          goto LABEL_1;
        return a5.n128_f64[0];
    }
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*,false>(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t k;
  unsigned int v31;
  BOOL v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  BOOL v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  int v52;
  unint64_t v54;
  __int128 v55;
  unint64_t v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned int v64;
  BOOL v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  int v70;
  __int128 v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  BOOL v77;
  int v78;
  unint64_t v79;
  unsigned int v80;
  BOOL v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  unsigned int v88;
  BOOL v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  int v94;
  unint64_t j;
  BOOL v96;
  int v97;
  int v98;
  uint64_t v99;
  __int128 v100;
  unint64_t v101;
  unsigned int v102;
  BOOL v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  BOOL v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  uint64_t v114;
  int v115;
  __int128 v116;
  unsigned int v117;
  unsigned int v118;
  BOOL v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  BOOL v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  BOOL v139;
  unsigned int v140;
  unsigned int v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int v145;
  BOOL v146;
  unsigned int v147;
  unsigned int v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  int64_t v154;
  int64_t v155;
  int64_t v156;
  uint64_t v157;
  unint64_t v158;
  unsigned int v159;
  unsigned int v160;
  BOOL v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  unsigned int v173;
  BOOL v174;
  unsigned int v175;
  unsigned int v176;
  uint64_t v177;
  int v178;
  int v179;
  __int128 v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  unsigned int v185;
  BOOL v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  BOOL v194;
  unsigned int v195;
  unsigned int v196;
  uint64_t v197;
  int v198;
  int v199;
  __int128 v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  int v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  BOOL v213;
  unsigned int v214;
  unsigned int v215;
  int v216;
  uint64_t i;
  unsigned int v218;
  BOOL v219;
  unsigned int v220;
  unsigned int v221;
  int v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  int v227;
  int64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  int64_t v235;
  unsigned int v236;
  unsigned int v237;
  BOOL v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  uint64_t v243;
  int v244;
  __int128 v245;
  uint64_t v246;
  __int128 v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  BOOL v257;
  unsigned int v258;
  unsigned int v259;
  uint64_t v260;
  int v261;
  int v262;
  __int128 v263;
  uint64_t v264;
  unint64_t v265;
  unsigned int v266;
  BOOL v267;
  unsigned int v268;
  unsigned int v269;
  uint64_t v270;
  int v271;
  int v272;
  __int128 v273;
  int v274;
  _BYTE v275[31];
  _BYTE v276[31];
  _BYTE v277[31];
  _BYTE v278[31];
  _BYTE v279[24];

  v7 = result;
LABEL_2:
  v8 = (__int128 *)(a2 - 24);
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 3);
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v117 = *(unsigned __int8 *)(a2 - 8);
        v118 = *(unsigned __int8 *)(v9 + 16);
        v119 = v117 > v118;
        if (v117 == v118
          && (v120 = *(unsigned __int8 *)(a2 - 7), v121 = *(unsigned __int8 *)(v9 + 17),
                                                   v119 = v120 > v121,
                                                   v120 == v121)
          && (v122 = *(unsigned __int8 *)(a2 - 6), v123 = *(unsigned __int8 *)(v9 + 18),
                                                   v119 = v122 > v123,
                                                   v122 == v123))
        {
          v124 = *(_QWORD *)(a2 - 16);
          v125 = *(_QWORD *)(v9 + 8);
          if (v124)
            v126 = *(unsigned __int8 *)(v124 + *(_QWORD *)(a2 - 24) - 1) != 42;
          else
            v126 = -1;
          if (v125)
            v274 = *(unsigned __int8 *)(v125 + *(_QWORD *)v9 - 1) != 42;
          else
            v274 = -1;
          if (v126 <= v274)
            return result;
        }
        else if (!v119)
        {
          return result;
        }
        *(_QWORD *)&v278[16] = *(_QWORD *)(v9 + 16);
        *(_OWORD *)v278 = *(_OWORD *)v9;
        v205 = *v8;
        *(_DWORD *)(v9 + 15) = *(_DWORD *)(a2 - 9);
        *(_OWORD *)v9 = v205;
        *(_DWORD *)(a2 - 9) = *(_DWORD *)&v278[15];
        *v8 = *(_OWORD *)v278;
        return result;
      case 3:
        return (uint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>((__int128 *)v9, (uint64_t *)(v9 + 24), (__int128 *)(a2 - 24));
      case 4:
        return (uint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>(v9, (__int128 *)(v9 + 24), (__int128 *)(v9 + 48), (__int128 *)(a2 - 24));
      case 5:
        return (uint64_t)std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>(v9, v9 + 24, v9 + 48, v9 + 72, a2 - 24);
      default:
        if (v10 <= 575)
        {
          v127 = v9 + 24;
          v129 = v9 == a2 || v127 == a2;
          if ((a4 & 1) != 0)
          {
            if (v129)
              return result;
            v130 = 0;
            v131 = v9;
            while (1)
            {
              v132 = v131;
              v131 = v127;
              v133 = *(_QWORD *)(v132 + 24);
              v134 = *(_QWORD *)(v132 + 32);
              v135 = *(unsigned __int8 *)(v132 + 40);
              v136 = *(unsigned __int8 *)(v132 + 41);
              v137 = *(unsigned __int8 *)(v132 + 42);
              v138 = *(unsigned __int8 *)(v132 + 16);
              v139 = v135 > v138;
              if (v135 == v138
                && (v140 = *(unsigned __int8 *)(v132 + 17), v139 = v136 > v140, v136 == v140)
                && (v141 = *(unsigned __int8 *)(v132 + 18), v139 = v137 > v141, v137 == v141))
              {
                if (v134)
                  v142 = *(unsigned __int8 *)(v134 + v133 - 1) != 42;
                else
                  v142 = -1;
                v152 = *(_QWORD *)(v132 + 8);
                if (v152)
                {
                  result = *(_QWORD *)v132;
                  v153 = *(unsigned __int8 *)(v152 + *(_QWORD *)v132 - 1) != 42;
                }
                else
                {
                  v153 = -1;
                }
                if (v142 <= v153)
                  goto LABEL_238;
              }
              else if (!v139)
              {
                goto LABEL_238;
              }
              *(_OWORD *)v131 = *(_OWORD *)v132;
              *(_DWORD *)(v131 + 15) = *(_DWORD *)(v132 + 15);
              v143 = v9;
              if (v132 == v9)
                goto LABEL_237;
              v144 = v130;
              while (1)
              {
                result = v9 + v144;
                v145 = *(unsigned __int8 *)(v9 + v144 - 8);
                v146 = v135 > v145;
                if (v135 != v145
                  || (v147 = *(unsigned __int8 *)(result - 7), v146 = v136 > v147, v136 != v147)
                  || (v148 = *(unsigned __int8 *)(result - 6), v146 = v137 > v148, v137 != v148))
                {
                  if (!v146)
                  {
                    v143 = v132;
                    goto LABEL_237;
                  }
                  goto LABEL_229;
                }
                v149 = v134 ? *(_BYTE *)(v133 + v134 - 1) != 42 : -1;
                v150 = *(_QWORD *)(result - 16);
                v151 = v150 ? *(_BYTE *)(v150 + *(_QWORD *)(v9 + v144 - 24) - 1) != 42 : -1;
                if (v149 <= v151)
                  break;
LABEL_229:
                v132 -= 24;
                *(_OWORD *)result = *(_OWORD *)(v9 + v144 - 24);
                *(_DWORD *)(result + 15) = *(_DWORD *)(v9 + v144 - 9);
                v144 -= 24;
                if (!v144)
                {
                  v143 = v9;
                  goto LABEL_237;
                }
              }
              v143 = v9 + v144;
LABEL_237:
              *(_QWORD *)v143 = v133;
              *(_QWORD *)(v143 + 8) = v134;
              *(_BYTE *)(v143 + 16) = v135;
              *(_BYTE *)(v143 + 17) = v136;
              *(_BYTE *)(v143 + 18) = v137;
LABEL_238:
              v127 = v131 + 24;
              v130 += 24;
              if (v131 + 24 == a2)
                return result;
            }
          }
          if (v129)
            return result;
LABEL_312:
          v206 = v7;
          v7 = v127;
          v207 = *(_QWORD *)(v206 + 24);
          v208 = *(_QWORD *)(v206 + 32);
          v209 = *(unsigned __int8 *)(v206 + 40);
          v210 = *(unsigned __int8 *)(v206 + 41);
          v211 = *(unsigned __int8 *)(v206 + 42);
          v212 = *(unsigned __int8 *)(v206 + 16);
          v213 = v209 > v212;
          if (v209 == v212
            && (v214 = *(unsigned __int8 *)(v206 + 17), v213 = v210 > v214, v210 == v214)
            && (v215 = *(unsigned __int8 *)(v206 + 18), v213 = v211 > v215, v211 == v215))
          {
            if (v208)
              v216 = *(unsigned __int8 *)(v208 + v207 - 1) != 42;
            else
              v216 = -1;
            v226 = *(_QWORD *)(v206 + 8);
            if (v226)
              v227 = *(unsigned __int8 *)(v226 + *(_QWORD *)v206 - 1) != 42;
            else
              v227 = -1;
            if (v216 <= v227)
              goto LABEL_334;
          }
          else if (!v213)
          {
            goto LABEL_334;
          }
          for (i = v7; ; i -= 24)
          {
            *(_OWORD *)i = *(_OWORD *)(i - 24);
            *(_DWORD *)(i + 15) = *(_DWORD *)(i - 9);
            v218 = *(unsigned __int8 *)(i - 32);
            v219 = v209 > v218;
            if (v209 == v218
              && (v220 = *(unsigned __int8 *)(i - 31), v219 = v210 > v220, v210 == v220)
              && (v221 = *(unsigned __int8 *)(i - 30), v219 = v211 > v221, v211 == v221))
            {
              if (v208)
                v222 = *(unsigned __int8 *)(v207 + v208 - 1) != 42;
              else
                v222 = -1;
              v223 = *(_QWORD *)(i - 40);
              if (v223)
                v224 = *(unsigned __int8 *)(v223 + *(_QWORD *)(i - 48) - 1) != 42;
              else
                v224 = -1;
              if (v222 <= v224)
              {
LABEL_333:
                v225 = i - 24;
                *(_QWORD *)(i - 24) = v207;
                *(_QWORD *)(v225 + 8) = v208;
                *(_BYTE *)(v225 + 16) = v209;
                *(_BYTE *)(v225 + 17) = v210;
                *(_BYTE *)(v225 + 18) = v211;
LABEL_334:
                v127 = v7 + 24;
                if (v7 + 24 == a2)
                  return result;
                goto LABEL_312;
              }
            }
            else if (!v219)
            {
              goto LABEL_333;
            }
          }
        }
        if (!a3)
        {
          if (v9 == a2)
            return result;
          v154 = (unint64_t)(v11 - 2) >> 1;
          v155 = v154;
          while (1)
          {
            v156 = v155;
            if (v154 < v155)
              goto LABEL_296;
            v157 = (2 * v155) | 1;
            v158 = v9 + 24 * v157;
            if (2 * v156 + 2 < v11)
            {
              v159 = *(unsigned __int8 *)(v158 + 16);
              v160 = *(unsigned __int8 *)(v158 + 40);
              v161 = v159 > v160;
              if (v159 != v160
                || (v162 = *(unsigned __int8 *)(v158 + 17),
                    v163 = *(unsigned __int8 *)(v158 + 41),
                    v161 = v162 > v163,
                    v162 != v163)
                || (v164 = *(unsigned __int8 *)(v158 + 18),
                    v165 = *(unsigned __int8 *)(v158 + 42),
                    v161 = v164 > v165,
                    v164 != v165))
              {
                if (!v161)
                  goto LABEL_258;
LABEL_257:
                v158 += 24;
                v157 = 2 * v156 + 2;
                goto LABEL_258;
              }
              v166 = *(_QWORD *)(v158 + 8);
              if (v166)
                v167 = *(unsigned __int8 *)(v166 + *(_QWORD *)v158 - 1) != 42;
              else
                v167 = -1;
              v203 = *(_QWORD *)(v158 + 32);
              if (v203)
                v204 = *(unsigned __int8 *)(v203 + *(_QWORD *)(v158 + 24) - 1) != 42;
              else
                v204 = -1;
              if (v167 > v204)
                goto LABEL_257;
            }
LABEL_258:
            v168 = v9 + 24 * v156;
            v169 = *(unsigned __int8 *)(v158 + 16);
            v170 = *(_QWORD *)v168;
            v171 = *(_QWORD *)(v168 + 8);
            v172 = *(unsigned __int8 *)(v168 + 16);
            result = *(unsigned __int8 *)(v168 + 17);
            v173 = *(unsigned __int8 *)(v168 + 18);
            v174 = v169 > v172;
            if (v169 == v172)
            {
              v175 = *(unsigned __int8 *)(v158 + 17);
              v174 = v175 > result;
              if (v175 == (_DWORD)result)
              {
                v176 = *(unsigned __int8 *)(v158 + 18);
                v174 = v176 > v173;
                if (v176 == v173)
                {
                  v177 = *(_QWORD *)(v158 + 8);
                  if (v177)
                  {
                    v178 = *(unsigned __int8 *)(v177 + *(_QWORD *)v158 - 1) != 42;
                    if (v171)
                      goto LABEL_263;
LABEL_299:
                    v179 = -1;
                  }
                  else
                  {
                    v178 = -1;
                    if (!v171)
                      goto LABEL_299;
LABEL_263:
                    v179 = *(unsigned __int8 *)(v171 + v170 - 1) != 42;
                  }
                  if (v178 > v179)
                    goto LABEL_296;
                  goto LABEL_265;
                }
              }
            }
            if (v174)
              goto LABEL_296;
LABEL_265:
            v180 = *(_OWORD *)v158;
            *(_DWORD *)(v168 + 15) = *(_DWORD *)(v158 + 15);
            *(_OWORD *)v168 = v180;
            if (v154 < v157)
              goto LABEL_295;
            while (1)
            {
              v181 = v158;
              v182 = 2 * v157;
              v157 = (2 * v157) | 1;
              v158 = v9 + 24 * v157;
              v183 = v182 + 2;
              if (v183 < v11)
              {
                v184 = *(unsigned __int8 *)(v158 + 16);
                v185 = *(unsigned __int8 *)(v158 + 40);
                v186 = v184 > v185;
                if (v184 != v185
                  || (v187 = *(unsigned __int8 *)(v158 + 17),
                      v188 = *(unsigned __int8 *)(v158 + 41),
                      v186 = v187 > v188,
                      v187 != v188)
                  || (v189 = *(unsigned __int8 *)(v158 + 18),
                      v190 = *(unsigned __int8 *)(v158 + 42),
                      v186 = v189 > v190,
                      v189 != v190))
                {
                  if (!v186)
                    goto LABEL_275;
LABEL_274:
                  v158 += 24;
                  v157 = v183;
                  goto LABEL_275;
                }
                v191 = *(_QWORD *)(v158 + 8);
                if (v191)
                  v192 = *(unsigned __int8 *)(v191 + *(_QWORD *)v158 - 1) != 42;
                else
                  v192 = -1;
                v201 = *(_QWORD *)(v158 + 32);
                if (v201)
                  v202 = *(unsigned __int8 *)(v201 + *(_QWORD *)(v158 + 24) - 1) != 42;
                else
                  v202 = -1;
                if (v192 > v202)
                  goto LABEL_274;
              }
LABEL_275:
              v193 = *(unsigned __int8 *)(v158 + 16);
              v194 = v193 > v172;
              if (v193 != v172
                || (v195 = *(unsigned __int8 *)(v158 + 17), v194 = v195 > result, v195 != (_DWORD)result)
                || (v196 = *(unsigned __int8 *)(v158 + 18), v194 = v196 > v173, v196 != v173))
              {
                if (v194)
                  break;
                goto LABEL_282;
              }
              v197 = *(_QWORD *)(v158 + 8);
              if (v197)
              {
                v198 = *(unsigned __int8 *)(v197 + *(_QWORD *)v158 - 1) != 42;
                if (v171)
                  goto LABEL_280;
              }
              else
              {
                v198 = -1;
                if (v171)
                {
LABEL_280:
                  v199 = *(unsigned __int8 *)(v170 + v171 - 1) != 42;
                  goto LABEL_286;
                }
              }
              v199 = -1;
LABEL_286:
              if (v198 > v199)
                break;
LABEL_282:
              v200 = *(_OWORD *)v158;
              *(_DWORD *)(v181 + 15) = *(_DWORD *)(v158 + 15);
              *(_OWORD *)v181 = v200;
              if (v154 < v157)
                goto LABEL_295;
            }
            v158 = v181;
LABEL_295:
            *(_QWORD *)v158 = v170;
            *(_QWORD *)(v158 + 8) = v171;
            *(_BYTE *)(v158 + 16) = v172;
            *(_BYTE *)(v158 + 17) = result;
            *(_BYTE *)(v158 + 18) = v173;
LABEL_296:
            v155 = v156 - 1;
            if (!v156)
            {
              v228 = v10 / 0x18uLL;
              while (1)
              {
                v229 = 0;
                *(_QWORD *)&v279[16] = *(_QWORD *)(v9 + 16);
                *(_OWORD *)v279 = *(_OWORD *)v9;
                v230 = v228 - 2;
                if (v228 < 2)
                  v230 = v228 - 1;
                v231 = v230 >> 1;
                v232 = v9;
                do
                {
                  v233 = v232;
                  v232 += 24 * v229 + 24;
                  v234 = 2 * v229;
                  v229 = (2 * v229) | 1;
                  v235 = v234 + 2;
                  if (v235 >= v228)
                    goto LABEL_354;
                  v236 = *(unsigned __int8 *)(v232 + 16);
                  result = *(_QWORD *)(v232 + 24);
                  v237 = *(unsigned __int8 *)(v232 + 40);
                  v238 = v236 > v237;
                  if (v236 == v237
                    && (v239 = *(unsigned __int8 *)(v232 + 17),
                        v240 = *(unsigned __int8 *)(v232 + 41),
                        v238 = v239 > v240,
                        v239 == v240)
                    && (v241 = *(unsigned __int8 *)(v232 + 18),
                        v242 = *(unsigned __int8 *)(v232 + 42),
                        v238 = v241 > v242,
                        v241 == v242))
                  {
                    v243 = *(_QWORD *)(v232 + 8);
                    if (v243)
                      v244 = *(unsigned __int8 *)(v243 + *(_QWORD *)v232 - 1) != 42;
                    else
                      v244 = -1;
                    v246 = *(_QWORD *)(v232 + 32);
                    if (v246)
                      result = *(unsigned __int8 *)(v246 + result - 1) != 42;
                    else
                      result = 0xFFFFFFFFLL;
                    if (v244 > (int)result)
                    {
LABEL_353:
                      v232 += 24;
                      v229 = v235;
                    }
                  }
                  else if (v238)
                  {
                    goto LABEL_353;
                  }
LABEL_354:
                  v245 = *(_OWORD *)v232;
                  *(_DWORD *)(v233 + 15) = *(_DWORD *)(v232 + 15);
                  *(_OWORD *)v233 = v245;
                }
                while (v229 <= v231);
                a2 -= 24;
                if (v232 == a2)
                {
                  *(_DWORD *)(v232 + 15) = *(_DWORD *)&v279[15];
                  *(_OWORD *)v232 = *(_OWORD *)v279;
                  goto LABEL_376;
                }
                v247 = *(_OWORD *)a2;
                *(_DWORD *)(v232 + 15) = *(_DWORD *)(a2 + 15);
                *(_OWORD *)v232 = v247;
                *(_DWORD *)(a2 + 15) = *(_DWORD *)&v279[15];
                *(_OWORD *)a2 = *(_OWORD *)v279;
                v248 = v232 - v9 + 24;
                if (v248 >= 25)
                {
                  v249 = 0xAAAAAAAAAAAAAAABLL * (v248 >> 3) - 2;
                  v250 = v249 >> 1;
                  result = v9 + 24 * (v249 >> 1);
                  v251 = *(unsigned __int8 *)(result + 16);
                  v252 = *(_QWORD *)v232;
                  v253 = *(_QWORD *)(v232 + 8);
                  v254 = *(unsigned __int8 *)(v232 + 16);
                  v255 = *(unsigned __int8 *)(v232 + 17);
                  v256 = *(unsigned __int8 *)(v232 + 18);
                  v257 = v251 > v254;
                  if (v251 == v254
                    && (v258 = *(unsigned __int8 *)(result + 17), v257 = v258 > v255, v258 == v255)
                    && (v259 = *(unsigned __int8 *)(result + 18), v257 = v259 > v256, v259 == v256))
                  {
                    v260 = *(_QWORD *)(result + 8);
                    if (v260)
                    {
                      v261 = *(unsigned __int8 *)(v260 + *(_QWORD *)result - 1) != 42;
                      if (v253)
                        goto LABEL_369;
LABEL_394:
                      v262 = -1;
                    }
                    else
                    {
                      v261 = -1;
                      if (!v253)
                        goto LABEL_394;
LABEL_369:
                      v262 = *(unsigned __int8 *)(v253 + v252 - 1) != 42;
                    }
                    if (v261 <= v262)
                      goto LABEL_376;
                  }
                  else if (!v257)
                  {
                    goto LABEL_376;
                  }
                  v263 = *(_OWORD *)result;
                  *(_DWORD *)(v232 + 15) = *(_DWORD *)(result + 15);
                  *(_OWORD *)v232 = v263;
                  if (v249 < 2)
                  {
LABEL_374:
                    v264 = result;
LABEL_375:
                    *(_QWORD *)v264 = v252;
                    *(_QWORD *)(v264 + 8) = v253;
                    *(_BYTE *)(v264 + 16) = v254;
                    *(_BYTE *)(v264 + 17) = v255;
                    *(_BYTE *)(v264 + 18) = v256;
                    goto LABEL_376;
                  }
                  while (2)
                  {
                    v265 = v250 - 1;
                    v250 = (v250 - 1) >> 1;
                    v264 = v9 + 24 * v250;
                    v266 = *(unsigned __int8 *)(v264 + 16);
                    v267 = v266 > v254;
                    if (v266 == v254
                      && (v268 = *(unsigned __int8 *)(v264 + 17), v267 = v268 > v255, v268 == v255)
                      && (v269 = *(unsigned __int8 *)(v264 + 18), v267 = v269 > v256, v269 == v256))
                    {
                      v270 = *(_QWORD *)(v264 + 8);
                      if (v270)
                      {
                        v271 = *(unsigned __int8 *)(v270 + *(_QWORD *)v264 - 1) != 42;
                        if (v253)
                          goto LABEL_384;
LABEL_390:
                        v272 = -1;
                      }
                      else
                      {
                        v271 = -1;
                        if (!v253)
                          goto LABEL_390;
LABEL_384:
                        v272 = *(unsigned __int8 *)(v252 + v253 - 1) != 42;
                      }
                      if (v271 <= v272)
                        goto LABEL_374;
                    }
                    else if (!v267)
                    {
                      goto LABEL_374;
                    }
                    v273 = *(_OWORD *)v264;
                    *(_DWORD *)(result + 15) = *(_DWORD *)(v264 + 15);
                    *(_OWORD *)result = v273;
                    result = v9 + 24 * v250;
                    if (v265 <= 1)
                      goto LABEL_375;
                    continue;
                  }
                }
LABEL_376:
                v32 = v228-- <= 2;
                if (v32)
                  return result;
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = v9 + 24 * ((unint64_t)v11 >> 1);
        if ((unint64_t)v10 < 0xC01)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>((__int128 *)(v7 + 24 * v12), (uint64_t *)v7, (__int128 *)(a2 - 24));
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>((__int128 *)v7, (uint64_t *)(v7 + 24 * v12), (__int128 *)(a2 - 24));
          v14 = 3 * v12;
          v15 = (uint64_t *)(v7 + 24 * v12 - 24);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>((__int128 *)(v7 + 24), v15, (__int128 *)(a2 - 48));
          v16 = (uint64_t *)(v7 + 24 + 8 * v14);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>((__int128 *)(v7 + 48), v16, (__int128 *)(a2 - 72));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>((__int128 *)v15, (uint64_t *)v13, (__int128 *)v16);
          *(_QWORD *)&v275[16] = *(_QWORD *)(v7 + 16);
          *(_OWORD *)v275 = *(_OWORD *)v7;
          v17 = *(_DWORD *)(v13 + 15);
          *(_OWORD *)v7 = *(_OWORD *)v13;
          *(_DWORD *)(v7 + 15) = v17;
          *(_DWORD *)(v13 + 15) = *(_DWORD *)&v275[15];
          *(_OWORD *)v13 = *(_OWORD *)v275;
        }
        --a3;
        v18 = *(_QWORD *)v7;
        if ((a4 & 1) != 0)
        {
          v19 = *(_QWORD *)(v7 + 8);
          v20 = *(unsigned __int8 *)(v7 + 16);
          v21 = *(unsigned __int8 *)(v7 + 17);
          v22 = *(unsigned __int8 *)(v7 + 18);
          goto LABEL_29;
        }
        v23 = *(unsigned __int8 *)(v7 - 8);
        v19 = *(_QWORD *)(v7 + 8);
        v20 = *(unsigned __int8 *)(v7 + 16);
        v21 = *(unsigned __int8 *)(v7 + 17);
        v22 = *(unsigned __int8 *)(v7 + 18);
        if (v23 != v20)
        {
          if (v23 > v20)
            goto LABEL_29;
          goto LABEL_105;
        }
        v24 = *(unsigned __int8 *)(v7 - 7);
        if (v24 != v21)
        {
          if (v24 > v21)
            goto LABEL_28;
          goto LABEL_105;
        }
        v25 = *(unsigned __int8 *)(v7 - 6);
        if (v25 != v22)
        {
          if (v25 > v22)
            goto LABEL_27;
LABEL_105:
          v73 = *(_QWORD *)(a2 - 24);
          v74 = *(_QWORD *)(a2 - 16);
          result = *(unsigned __int8 *)(a2 - 8);
          v75 = *(unsigned __int8 *)(a2 - 7);
          v76 = *(unsigned __int8 *)(a2 - 6);
          v77 = v20 > result;
          if (v20 == (_DWORD)result && (v77 = v21 > v75, v21 == v75) && (v77 = v22 > v76, v22 == v76))
          {
            if (v19)
              v78 = *(unsigned __int8 *)(v19 + v18 - 1) != 42;
            else
              v78 = -1;
            if (v74)
              v87 = *(unsigned __int8 *)(v74 + v73 - 1) != 42;
            else
              v87 = -1;
            if (v78 <= v87)
            {
LABEL_132:
              v9 = v7 + 24;
              if (v7 + 24 < a2)
              {
                while (1)
                {
                  v88 = *(unsigned __int8 *)(v9 + 16);
                  v89 = v20 > v88;
                  if (v20 == v88
                    && (v90 = *(unsigned __int8 *)(v9 + 17), v89 = v21 > v90, v21 == v90)
                    && (v91 = *(unsigned __int8 *)(v9 + 18), v89 = v22 > v91, v22 == v91))
                  {
                    if (v19)
                      v92 = *(unsigned __int8 *)(v18 + v19 - 1) != 42;
                    else
                      v92 = -1;
                    v93 = *(_QWORD *)(v9 + 8);
                    if (v93)
                      v94 = *(unsigned __int8 *)(v93 + *(_QWORD *)v9 - 1) != 42;
                    else
                      v94 = -1;
                    if (v92 > v94)
                      goto LABEL_146;
                  }
                  else if (v89)
                  {
                    goto LABEL_146;
                  }
                  v9 += 24;
                  if (v9 >= a2)
                    goto LABEL_146;
                }
              }
              goto LABEL_146;
            }
          }
          else if (!v77)
          {
            goto LABEL_132;
          }
          v79 = v7 + 24;
          do
          {
            while (1)
            {
              v9 = v79;
              v80 = *(unsigned __int8 *)(v79 + 16);
              v79 += 24;
              v81 = v20 > v80;
              if (v20 == v80)
              {
                v82 = *(unsigned __int8 *)(v9 + 17);
                v81 = v21 > v82;
                if (v21 == v82)
                {
                  v83 = *(unsigned __int8 *)(v9 + 18);
                  v81 = v22 > v83;
                  if (v22 == v83)
                    break;
                }
              }
              if (v81)
                goto LABEL_146;
            }
            if (v19)
              v84 = *(unsigned __int8 *)(v18 + v19 - 1) != 42;
            else
              v84 = -1;
            v85 = *(_QWORD *)(v9 + 8);
            if (v85)
              v86 = *(unsigned __int8 *)(v85 + *(_QWORD *)v9 - 1) != 42;
            else
              v86 = -1;
          }
          while (v84 <= v86);
LABEL_146:
          j = a2;
          if (v9 < a2)
          {
            for (j = a2 - 24; ; v76 = *(unsigned __int8 *)(j + 18))
            {
              v96 = v20 > result;
              if (v20 != (_DWORD)result || (v96 = v21 > v75, v21 != v75) || (v96 = v22 > v76, v22 != v76))
              {
                if (!v96)
                  break;
                goto LABEL_156;
              }
              if (v19)
              {
                v97 = *(unsigned __int8 *)(v18 + v19 - 1) != 42;
                if (v74)
                  goto LABEL_153;
              }
              else
              {
                v97 = -1;
                if (v74)
                {
LABEL_153:
                  v98 = *(unsigned __int8 *)(v74 + v73 - 1) != 42;
                  goto LABEL_159;
                }
              }
              v98 = -1;
LABEL_159:
              if (v97 <= v98)
                break;
LABEL_156:
              v73 = *(_QWORD *)(j - 24);
              v74 = *(_QWORD *)(j - 16);
              j -= 24;
              result = *(unsigned __int8 *)(j + 16);
              v75 = *(unsigned __int8 *)(j + 17);
            }
          }
          if (v9 < j)
          {
            v99 = v19 - 1;
            do
            {
              *(_QWORD *)&v277[16] = *(_QWORD *)(v9 + 16);
              *(_OWORD *)v277 = *(_OWORD *)v9;
              v100 = *(_OWORD *)j;
              *(_DWORD *)(v9 + 15) = *(_DWORD *)(j + 15);
              *(_OWORD *)v9 = v100;
              *(_DWORD *)(j + 15) = *(_DWORD *)&v277[15];
              *(_OWORD *)j = *(_OWORD *)v277;
              v101 = v9 + 24;
              do
              {
                while (1)
                {
                  v9 = v101;
                  v102 = *(unsigned __int8 *)(v101 + 16);
                  v101 += 24;
                  v103 = v20 > v102;
                  if (v20 == v102)
                  {
                    v104 = *(unsigned __int8 *)(v9 + 17);
                    v103 = v21 > v104;
                    if (v21 == v104)
                    {
                      v105 = *(unsigned __int8 *)(v9 + 18);
                      v103 = v22 > v105;
                      if (v22 == v105)
                        break;
                    }
                  }
                  if (v103)
                    goto LABEL_176;
                }
                if (v19)
                  v106 = *(unsigned __int8 *)(v18 + v99) != 42;
                else
                  v106 = -1;
                v107 = *(_QWORD *)(v9 + 8);
                if (v107)
                {
                  result = *(_QWORD *)v9;
                  v108 = *(unsigned __int8 *)(v107 + *(_QWORD *)v9 - 1) != 42;
                }
                else
                {
                  v108 = -1;
                }
              }
              while (v106 <= v108);
              do
              {
LABEL_176:
                while (1)
                {
                  j -= 24;
                  v109 = *(unsigned __int8 *)(j + 16);
                  v110 = v20 > v109;
                  if (v20 == v109)
                  {
                    v111 = *(unsigned __int8 *)(j + 17);
                    v110 = v21 > v111;
                    if (v21 == v111)
                    {
                      v112 = *(unsigned __int8 *)(j + 18);
                      v110 = v22 > v112;
                      if (v22 == v112)
                        break;
                    }
                  }
                  if (!v110)
                    goto LABEL_188;
                }
                if (v19)
                  v113 = *(unsigned __int8 *)(v18 + v99) != 42;
                else
                  v113 = -1;
                v114 = *(_QWORD *)(j + 8);
                if (v114)
                  v115 = *(unsigned __int8 *)(v114 + *(_QWORD *)j - 1) != 42;
                else
                  v115 = -1;
              }
              while (v113 > v115);
LABEL_188:
              ;
            }
            while (v9 < j);
          }
          if (v9 - 24 != v7)
          {
            v116 = *(_OWORD *)(v9 - 24);
            *(_DWORD *)(v7 + 15) = *(_DWORD *)(v9 - 9);
            *(_OWORD *)v7 = v116;
          }
          a4 = 0;
          *(_QWORD *)(v9 - 24) = v18;
          *(_QWORD *)(v9 - 16) = v19;
          *(_BYTE *)(v9 - 8) = v20;
          *(_BYTE *)(v9 - 7) = v21;
          *(_BYTE *)(v9 - 6) = v22;
          continue;
        }
        v26 = *(_QWORD *)(v7 - 16);
        if (v26)
        {
          v27 = *(unsigned __int8 *)(v26 + *(_QWORD *)(v7 - 24) - 1) != 42;
          if (v19)
            goto LABEL_16;
        }
        else
        {
          v27 = -1;
          if (v19)
          {
LABEL_16:
            v28 = *(unsigned __int8 *)(v19 + v18 - 1) != 42;
            goto LABEL_25;
          }
        }
        v28 = -1;
LABEL_25:
        if (v27 <= v28)
          goto LABEL_105;
        v22 = *(unsigned __int8 *)(v7 - 6);
LABEL_27:
        v21 = *(unsigned __int8 *)(v7 - 7);
LABEL_28:
        v20 = *(unsigned __int8 *)(v7 - 8);
LABEL_29:
        v29 = v19 - 1;
        for (k = v7 + 24; ; k += 24)
        {
          v31 = *(unsigned __int8 *)(k + 16);
          v32 = v31 > v20;
          if (v31 == v20)
          {
            v33 = *(unsigned __int8 *)(k + 17);
            v32 = v33 > v21;
            if (v33 == v21)
            {
              v34 = *(unsigned __int8 *)(k + 18);
              v32 = v34 > v22;
              if (v34 == v22)
                break;
            }
          }
          if (!v32)
            goto LABEL_42;
LABEL_38:
          ;
        }
        v35 = *(_QWORD *)(k + 8);
        if (v35)
        {
          v36 = *(unsigned __int8 *)(v35 + *(_QWORD *)k - 1) != 42;
          if (v19)
            goto LABEL_35;
        }
        else
        {
          v36 = -1;
          if (v19)
          {
LABEL_35:
            v37 = *(unsigned __int8 *)(v18 + v29) != 42;
            goto LABEL_41;
          }
        }
        v37 = -1;
LABEL_41:
        if (v36 > v37)
          goto LABEL_38;
LABEL_42:
        v38 = a2 - 24;
        if (k - 24 != v7)
        {
          while (2)
          {
            v39 = *(unsigned __int8 *)(v38 + 16);
            v40 = v39 > v20;
            if (v39 == v20
              && (v41 = *(unsigned __int8 *)(v38 + 17), v40 = v41 > v21, v41 == v21)
              && (v42 = *(unsigned __int8 *)(v38 + 18), v40 = v42 > v22, v42 == v22))
            {
              v43 = *(_QWORD *)(v38 + 8);
              if (v43)
              {
                v44 = *(unsigned __int8 *)(v43 + *(_QWORD *)v38 - 1) != 42;
                if (v19)
                  goto LABEL_48;
LABEL_52:
                v45 = -1;
              }
              else
              {
                v44 = -1;
                if (!v19)
                  goto LABEL_52;
LABEL_48:
                v45 = *(unsigned __int8 *)(v18 + v29) != 42;
              }
              if (v44 > v45)
                goto LABEL_72;
            }
            else if (v40)
            {
              goto LABEL_72;
            }
            v38 -= 24;
            continue;
          }
        }
        v38 = a2;
        if (k < a2)
        {
          v38 = a2 - 24;
          while (2)
          {
            v46 = *(unsigned __int8 *)(v38 + 16);
            v47 = v46 > v20;
            if (v46 == v20
              && (v48 = *(unsigned __int8 *)(v38 + 17), v47 = v48 > v21, v48 == v21)
              && (v49 = *(unsigned __int8 *)(v38 + 18), v47 = v49 > v22, v49 == v22))
            {
              v50 = *(_QWORD *)(v38 + 8);
              if (v50)
              {
                v51 = *(unsigned __int8 *)(v50 + *(_QWORD *)v38 - 1) != 42;
                if (v19)
                  goto LABEL_62;
LABEL_69:
                v52 = -1;
              }
              else
              {
                v51 = -1;
                if (!v19)
                  goto LABEL_69;
LABEL_62:
                v52 = *(unsigned __int8 *)(v18 + v29) != 42;
              }
              if (v51 > v52 || k >= v38)
                break;
            }
            else if (v47 || k >= v38)
            {
              break;
            }
            v38 -= 24;
            continue;
          }
        }
LABEL_72:
        v9 = k;
        if (k >= v38)
          goto LABEL_99;
        v9 = k;
        v54 = v38;
        while (2)
        {
          *(_QWORD *)&v276[16] = *(_QWORD *)(v9 + 16);
          *(_OWORD *)v276 = *(_OWORD *)v9;
          v55 = *(_OWORD *)v54;
          *(_DWORD *)(v9 + 15) = *(_DWORD *)(v54 + 15);
          *(_OWORD *)v9 = v55;
          *(_DWORD *)(v54 + 15) = *(_DWORD *)&v276[15];
          *(_OWORD *)v54 = *(_OWORD *)v276;
          v56 = v9 + 24;
          while (2)
          {
            while (1)
            {
              v9 = v56;
              v57 = *(unsigned __int8 *)(v56 + 16);
              v56 += 24;
              v58 = v57 > v20;
              if (v57 == v20)
              {
                v59 = *(unsigned __int8 *)(v9 + 17);
                v58 = v59 > v21;
                if (v59 == v21)
                {
                  v60 = *(unsigned __int8 *)(v9 + 18);
                  v58 = v60 > v22;
                  if (v60 == v22)
                    break;
                }
              }
              if (!v58)
                goto LABEL_86;
            }
            v61 = *(_QWORD *)(v9 + 8);
            if (v61)
            {
              v62 = *(unsigned __int8 *)(v61 + *(_QWORD *)v9 - 1) != 42;
              if (v19)
                goto LABEL_80;
LABEL_84:
              v63 = -1;
            }
            else
            {
              v62 = -1;
              if (!v19)
                goto LABEL_84;
LABEL_80:
              v63 = *(unsigned __int8 *)(v18 + v29) != 42;
            }
            if (v62 > v63)
              continue;
            break;
          }
LABEL_86:
          while (2)
          {
            while (1)
            {
              v54 -= 24;
              v64 = *(unsigned __int8 *)(v54 + 16);
              v65 = v64 > v20;
              if (v64 == v20)
              {
                v66 = *(unsigned __int8 *)(v54 + 17);
                v65 = v66 > v21;
                if (v66 == v21)
                {
                  v67 = *(unsigned __int8 *)(v54 + 18);
                  v65 = v67 > v22;
                  if (v67 == v22)
                    break;
                }
              }
              if (v65)
                goto LABEL_98;
            }
            v68 = *(_QWORD *)(v54 + 8);
            if (v68)
            {
              v69 = *(unsigned __int8 *)(v68 + *(_QWORD *)v54 - 1) != 42;
              if (v19)
                goto LABEL_91;
LABEL_96:
              v70 = -1;
            }
            else
            {
              v69 = -1;
              if (!v19)
                goto LABEL_96;
LABEL_91:
              v70 = *(unsigned __int8 *)(v18 + v29) != 42;
            }
            if (v69 <= v70)
              continue;
            break;
          }
LABEL_98:
          if (v9 < v54)
            continue;
          break;
        }
LABEL_99:
        if (v9 - 24 != v7)
        {
          v71 = *(_OWORD *)(v9 - 24);
          *(_DWORD *)(v7 + 15) = *(_DWORD *)(v9 - 9);
          *(_OWORD *)v7 = v71;
        }
        *(_QWORD *)(v9 - 24) = v18;
        *(_QWORD *)(v9 - 16) = v19;
        *(_BYTE *)(v9 - 8) = v20;
        *(_BYTE *)(v9 - 7) = v21;
        *(_BYTE *)(v9 - 6) = v22;
        if (k < v38)
        {
LABEL_104:
          result = std::__introsort<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*,false>(v7, v9 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v72 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>(v7, v9 - 24);
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>(v9, a2);
        if (!(_DWORD)result)
        {
          if (v72)
            continue;
          goto LABEL_104;
        }
        a2 = v9 - 24;
        if (!v72)
          goto LABEL_2;
        return result;
    }
  }
}

__int128 *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>(__int128 *result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  __int128 v22;
  int v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  __int128 v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  _BYTE v60[24];
  _BYTE v61[24];
  _BYTE v62[24];
  _BYTE v63[24];

  v3 = *a2;
  v4 = a2[1];
  v5 = *((unsigned __int8 *)a2 + 16);
  v6 = *((unsigned __int8 *)a2 + 17);
  v7 = *((unsigned __int8 *)a2 + 18);
  v8 = *((unsigned __int8 *)result + 16);
  v9 = v5 > v8;
  if (v5 != v8
    || (v10 = *((unsigned __int8 *)result + 17), v9 = v6 > v10, v6 != v10)
    || (v11 = *((unsigned __int8 *)result + 18), v9 = v7 > v11, v7 != v11))
  {
    if (!v9)
      goto LABEL_21;
    goto LABEL_9;
  }
  v12 = *((_QWORD *)result + 1);
  if (v4)
  {
    v13 = *(unsigned __int8 *)(v4 + v3 - 1) != 42;
    if (v12)
    {
LABEL_6:
      v14 = *(unsigned __int8 *)(v12 + *(_QWORD *)result - 1) != 42;
      goto LABEL_20;
    }
  }
  else
  {
    v13 = -1;
    if (v12)
      goto LABEL_6;
  }
  v14 = -1;
LABEL_20:
  if (v13 <= v14)
  {
LABEL_21:
    v24 = *((unsigned __int8 *)a3 + 16);
    v25 = v24 > v5;
    if (v24 != v5
      || (v26 = *((unsigned __int8 *)a3 + 17), v25 = v26 > v6, v26 != v6)
      || (v27 = *((unsigned __int8 *)a3 + 18), v25 = v27 > v7, v27 != v7))
    {
      if (!v25)
        return result;
      goto LABEL_29;
    }
    v28 = *((_QWORD *)a3 + 1);
    if (v28)
    {
      v29 = *(unsigned __int8 *)(v28 + *(_QWORD *)a3 - 1) != 42;
      if (v4)
      {
LABEL_26:
        v30 = *(unsigned __int8 *)(v4 + v3 - 1) != 42;
        goto LABEL_51;
      }
    }
    else
    {
      v29 = -1;
      if (v4)
        goto LABEL_26;
    }
    v30 = -1;
LABEL_51:
    if (v29 <= v30)
      return result;
LABEL_29:
    *(_OWORD *)v61 = *(_OWORD *)a2;
    v31 = *(_OWORD *)a2;
    *(_QWORD *)&v61[16] = a2[2];
    v32 = *(_DWORD *)((char *)a3 + 15);
    *(_OWORD *)a2 = *a3;
    *(_DWORD *)((char *)a2 + 15) = v32;
    *a3 = v31;
    *(_DWORD *)((char *)a3 + 15) = *(_DWORD *)&v61[15];
    v33 = *((unsigned __int8 *)a2 + 16);
    v34 = *((unsigned __int8 *)result + 16);
    v35 = v33 > v34;
    if (v33 == v34
      && (v36 = *((unsigned __int8 *)a2 + 17), v37 = *((unsigned __int8 *)result + 17), v35 = v36 > v37, v36 == v37)
      && (v38 = *((unsigned __int8 *)a2 + 18), v39 = *((unsigned __int8 *)result + 18), v35 = v38 > v39, v38 == v39))
    {
      v40 = a2[1];
      v41 = *((_QWORD *)result + 1);
      if (v40)
        v42 = *(unsigned __int8 *)(v40 + *a2 - 1) != 42;
      else
        v42 = -1;
      if (v41)
        v58 = *(unsigned __int8 *)(v41 + *(_QWORD *)result - 1) != 42;
      else
        v58 = -1;
      if (v42 <= v58)
        return result;
    }
    else if (!v35)
    {
      return result;
    }
    *(_OWORD *)v62 = *result;
    v43 = *result;
    *(_QWORD *)&v62[16] = *((_QWORD *)result + 2);
    v44 = *(_DWORD *)((char *)a2 + 15);
    *result = *(_OWORD *)a2;
    *(_DWORD *)((char *)result + 15) = v44;
    *(_OWORD *)a2 = v43;
    *(_DWORD *)((char *)a2 + 15) = *(_DWORD *)&v62[15];
    return result;
  }
LABEL_9:
  v15 = *((unsigned __int8 *)a3 + 16);
  v16 = v15 > v5;
  if (v15 != v5
    || (v17 = *((unsigned __int8 *)a3 + 17), v16 = v17 > v6, v17 != v6)
    || (v18 = *((unsigned __int8 *)a3 + 18), v16 = v18 > v7, v18 != v7))
  {
    if (!v16)
      goto LABEL_40;
LABEL_17:
    v22 = *result;
    *(_OWORD *)v60 = *result;
    *(_QWORD *)&v60[16] = *((_QWORD *)result + 2);
    v23 = *(_DWORD *)((char *)a3 + 15);
    *result = *a3;
    *(_DWORD *)((char *)result + 15) = v23;
LABEL_48:
    *a3 = v22;
    *(_DWORD *)((char *)a3 + 15) = *(_DWORD *)&v60[15];
    return result;
  }
  v19 = *((_QWORD *)a3 + 1);
  if (v19)
  {
    v20 = *(unsigned __int8 *)(v19 + *(_QWORD *)a3 - 1) != 42;
    if (v4)
    {
LABEL_14:
      v21 = *(unsigned __int8 *)(v4 + v3 - 1) != 42;
      goto LABEL_39;
    }
  }
  else
  {
    v20 = -1;
    if (v4)
      goto LABEL_14;
  }
  v21 = -1;
LABEL_39:
  if (v20 > v21)
    goto LABEL_17;
LABEL_40:
  *(_OWORD *)v63 = *result;
  v45 = *result;
  *(_QWORD *)&v63[16] = *((_QWORD *)result + 2);
  v46 = *(_DWORD *)((char *)a2 + 15);
  *result = *(_OWORD *)a2;
  *(_DWORD *)((char *)result + 15) = v46;
  *(_OWORD *)a2 = v45;
  *(_DWORD *)((char *)a2 + 15) = *(_DWORD *)&v63[15];
  v47 = *((unsigned __int8 *)a3 + 16);
  v48 = *((unsigned __int8 *)a2 + 16);
  v49 = v47 > v48;
  if (v47 != v48
    || (v50 = *((unsigned __int8 *)a3 + 17), v51 = *((unsigned __int8 *)a2 + 17), v49 = v50 > v51, v50 != v51)
    || (v52 = *((unsigned __int8 *)a3 + 18), v53 = *((unsigned __int8 *)a2 + 18), v49 = v52 > v53, v52 != v53))
  {
    if (!v49)
      return result;
    goto LABEL_47;
  }
  v54 = *((_QWORD *)a3 + 1);
  v55 = a2[1];
  if (v54)
    v56 = *(unsigned __int8 *)(v54 + *(_QWORD *)a3 - 1) != 42;
  else
    v56 = -1;
  if (v55)
    v59 = *(unsigned __int8 *)(v55 + *a2 - 1) != 42;
  else
    v59 = -1;
  if (v56 > v59)
  {
LABEL_47:
    v22 = *(_OWORD *)a2;
    *(_OWORD *)v60 = *(_OWORD *)a2;
    *(_QWORD *)&v60[16] = a2[2];
    v57 = *(_DWORD *)((char *)a3 + 15);
    *(_OWORD *)a2 = *a3;
    *(_DWORD *)((char *)a2 + 15) = v57;
    goto LABEL_48;
  }
  return result;
}

__int128 *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 *result;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  __int128 v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  int v46;
  int v47;
  _BYTE v48[24];
  _BYTE v49[24];
  _BYTE v50[24];

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>((__int128 *)a1, (uint64_t *)a2, a3);
  v9 = *((unsigned __int8 *)a4 + 16);
  v10 = *((unsigned __int8 *)a3 + 16);
  v11 = v9 > v10;
  if (v9 != v10
    || (v12 = *((unsigned __int8 *)a4 + 17), v13 = *((unsigned __int8 *)a3 + 17), v11 = v12 > v13, v12 != v13)
    || (v14 = *((unsigned __int8 *)a4 + 18), v15 = *((unsigned __int8 *)a3 + 18), v11 = v14 > v15, v14 != v15))
  {
    if (!v11)
      return result;
    goto LABEL_9;
  }
  v16 = *((_QWORD *)a4 + 1);
  v17 = *((_QWORD *)a3 + 1);
  if (v16)
  {
    v18 = *(unsigned __int8 *)(v16 + *(_QWORD *)a4 - 1) != 42;
    if (v17)
    {
LABEL_6:
      v19 = *(unsigned __int8 *)(v17 + *(_QWORD *)a3 - 1) != 42;
      goto LABEL_27;
    }
  }
  else
  {
    v18 = -1;
    if (v17)
      goto LABEL_6;
  }
  v19 = -1;
LABEL_27:
  if (v18 <= v19)
    return result;
LABEL_9:
  *(_OWORD *)v48 = *a3;
  v20 = *a3;
  *(_QWORD *)&v48[16] = *((_QWORD *)a3 + 2);
  v21 = *(_DWORD *)((char *)a4 + 15);
  *a3 = *a4;
  *(_DWORD *)((char *)a3 + 15) = v21;
  *a4 = v20;
  *(_DWORD *)((char *)a4 + 15) = *(_DWORD *)&v48[15];
  v22 = *((unsigned __int8 *)a3 + 16);
  v23 = *((unsigned __int8 *)a2 + 16);
  v24 = v22 > v23;
  if (v22 != v23
    || (v25 = *((unsigned __int8 *)a3 + 17), v26 = *((unsigned __int8 *)a2 + 17), v24 = v25 > v26, v25 != v26)
    || (v27 = *((unsigned __int8 *)a3 + 18), v28 = *((unsigned __int8 *)a2 + 18), v24 = v27 > v28, v27 != v28))
  {
    if (!v24)
      return result;
    goto LABEL_17;
  }
  v29 = *((_QWORD *)a3 + 1);
  v30 = *((_QWORD *)a2 + 1);
  if (v29)
  {
    v31 = *(unsigned __int8 *)(v29 + *(_QWORD *)a3 - 1) != 42;
    if (v30)
    {
LABEL_14:
      v32 = *(unsigned __int8 *)(v30 + *(_QWORD *)a2 - 1) != 42;
      goto LABEL_31;
    }
  }
  else
  {
    v31 = -1;
    if (v30)
      goto LABEL_14;
  }
  v32 = -1;
LABEL_31:
  if (v31 <= v32)
    return result;
LABEL_17:
  *(_OWORD *)v49 = *a2;
  v33 = *a2;
  *(_QWORD *)&v49[16] = *((_QWORD *)a2 + 2);
  v34 = *(_DWORD *)((char *)a3 + 15);
  *a2 = *a3;
  *(_DWORD *)((char *)a2 + 15) = v34;
  *a3 = v33;
  *(_DWORD *)((char *)a3 + 15) = *(_DWORD *)&v49[15];
  v35 = *((unsigned __int8 *)a2 + 16);
  v36 = *(unsigned __int8 *)(a1 + 16);
  v37 = v35 > v36;
  if (v35 != v36
    || (v38 = *((unsigned __int8 *)a2 + 17), v39 = *(unsigned __int8 *)(a1 + 17), v37 = v38 > v39, v38 != v39)
    || (v40 = *((unsigned __int8 *)a2 + 18), v41 = *(unsigned __int8 *)(a1 + 18), v37 = v40 > v41, v40 != v41))
  {
    if (!v37)
      return result;
LABEL_24:
    *(_OWORD *)v50 = *(_OWORD *)a1;
    v45 = *(_OWORD *)a1;
    *(_QWORD *)&v50[16] = *(_QWORD *)(a1 + 16);
    v46 = *(_DWORD *)((char *)a2 + 15);
    *(_OWORD *)a1 = *a2;
    *(_DWORD *)(a1 + 15) = v46;
    *a2 = v45;
    *(_DWORD *)((char *)a2 + 15) = *(_DWORD *)&v50[15];
    return result;
  }
  v42 = *((_QWORD *)a2 + 1);
  v43 = *(_QWORD *)(a1 + 8);
  if (v42)
    v44 = *(unsigned __int8 *)(v42 + *(_QWORD *)a2 - 1) != 42;
  else
    v44 = -1;
  if (v43)
    v47 = *(unsigned __int8 *)(v43 + *(_QWORD *)a1 - 1) != 42;
  else
    v47 = -1;
  if (v44 > v47)
    goto LABEL_24;
  return result;
}

__int128 *std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 *result;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  __int128 v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  __int128 v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  BOOL v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  __int128 v59;
  int v60;
  int v61;
  int v62;
  _BYTE v63[24];
  _BYTE v64[24];
  _BYTE v65[24];
  _BYTE v66[24];

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>(a1, (__int128 *)a2, (__int128 *)a3, (__int128 *)a4);
  v11 = *(unsigned __int8 *)(a5 + 16);
  v12 = *(unsigned __int8 *)(a4 + 16);
  v13 = v11 > v12;
  if (v11 != v12
    || (v14 = *(unsigned __int8 *)(a5 + 17), v15 = *(unsigned __int8 *)(a4 + 17), v13 = v14 > v15, v14 != v15)
    || (v16 = *(unsigned __int8 *)(a5 + 18), v17 = *(unsigned __int8 *)(a4 + 18), v13 = v16 > v17, v16 != v17))
  {
    if (!v13)
      return result;
    goto LABEL_9;
  }
  v18 = *(_QWORD *)(a5 + 8);
  v19 = *(_QWORD *)(a4 + 8);
  if (v18)
  {
    v20 = *(unsigned __int8 *)(v18 + *(_QWORD *)a5 - 1) != 42;
    if (v19)
    {
LABEL_6:
      v21 = *(unsigned __int8 *)(v19 + *(_QWORD *)a4 - 1) != 42;
      goto LABEL_34;
    }
  }
  else
  {
    v20 = -1;
    if (v19)
      goto LABEL_6;
  }
  v21 = -1;
LABEL_34:
  if (v20 <= v21)
    return result;
LABEL_9:
  *(_OWORD *)v63 = *(_OWORD *)a4;
  v22 = *(_OWORD *)a4;
  *(_QWORD *)&v63[16] = *(_QWORD *)(a4 + 16);
  v23 = *(_DWORD *)(a5 + 15);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_DWORD *)(a4 + 15) = v23;
  *(_OWORD *)a5 = v22;
  *(_DWORD *)(a5 + 15) = *(_DWORD *)&v63[15];
  v24 = *(unsigned __int8 *)(a4 + 16);
  v25 = *(unsigned __int8 *)(a3 + 16);
  v26 = v24 > v25;
  if (v24 != v25
    || (v27 = *(unsigned __int8 *)(a4 + 17), v28 = *(unsigned __int8 *)(a3 + 17), v26 = v27 > v28, v27 != v28)
    || (v29 = *(unsigned __int8 *)(a4 + 18), v30 = *(unsigned __int8 *)(a3 + 18), v26 = v29 > v30, v29 != v30))
  {
    if (!v26)
      return result;
    goto LABEL_17;
  }
  v31 = *(_QWORD *)(a4 + 8);
  v32 = *(_QWORD *)(a3 + 8);
  if (v31)
  {
    v33 = *(unsigned __int8 *)(v31 + *(_QWORD *)a4 - 1) != 42;
    if (v32)
    {
LABEL_14:
      v34 = *(unsigned __int8 *)(v32 + *(_QWORD *)a3 - 1) != 42;
      goto LABEL_38;
    }
  }
  else
  {
    v33 = -1;
    if (v32)
      goto LABEL_14;
  }
  v34 = -1;
LABEL_38:
  if (v33 <= v34)
    return result;
LABEL_17:
  *(_OWORD *)v64 = *(_OWORD *)a3;
  v35 = *(_OWORD *)a3;
  *(_QWORD *)&v64[16] = *(_QWORD *)(a3 + 16);
  v36 = *(_DWORD *)(a4 + 15);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_DWORD *)(a3 + 15) = v36;
  *(_OWORD *)a4 = v35;
  *(_DWORD *)(a4 + 15) = *(_DWORD *)&v64[15];
  v37 = *(unsigned __int8 *)(a3 + 16);
  v38 = *(unsigned __int8 *)(a2 + 16);
  v39 = v37 > v38;
  if (v37 != v38
    || (v40 = *(unsigned __int8 *)(a3 + 17), v41 = *(unsigned __int8 *)(a2 + 17), v39 = v40 > v41, v40 != v41)
    || (v42 = *(unsigned __int8 *)(a3 + 18), v43 = *(unsigned __int8 *)(a2 + 18), v39 = v42 > v43, v42 != v43))
  {
    if (!v39)
      return result;
LABEL_24:
    *(_OWORD *)v65 = *(_OWORD *)a2;
    v47 = *(_OWORD *)a2;
    *(_QWORD *)&v65[16] = *(_QWORD *)(a2 + 16);
    v48 = *(_DWORD *)(a3 + 15);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_DWORD *)(a2 + 15) = v48;
    *(_OWORD *)a3 = v47;
    *(_DWORD *)(a3 + 15) = *(_DWORD *)&v65[15];
    v49 = *(unsigned __int8 *)(a2 + 16);
    v50 = *(unsigned __int8 *)(a1 + 16);
    v51 = v49 > v50;
    if (v49 == v50
      && (v52 = *(unsigned __int8 *)(a2 + 17), v53 = *(unsigned __int8 *)(a1 + 17), v51 = v52 > v53, v52 == v53)
      && (v54 = *(unsigned __int8 *)(a2 + 18), v55 = *(unsigned __int8 *)(a1 + 18), v51 = v54 > v55, v54 == v55))
    {
      v56 = *(_QWORD *)(a2 + 8);
      v57 = *(_QWORD *)(a1 + 8);
      if (v56)
        v58 = *(unsigned __int8 *)(v56 + *(_QWORD *)a2 - 1) != 42;
      else
        v58 = -1;
      if (v57)
        v62 = *(unsigned __int8 *)(v57 + *(_QWORD *)a1 - 1) != 42;
      else
        v62 = -1;
      if (v58 <= v62)
        return result;
    }
    else if (!v51)
    {
      return result;
    }
    *(_OWORD *)v66 = *(_OWORD *)a1;
    v59 = *(_OWORD *)a1;
    *(_QWORD *)&v66[16] = *(_QWORD *)(a1 + 16);
    v60 = *(_DWORD *)(a2 + 15);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 15) = v60;
    *(_OWORD *)a2 = v59;
    *(_DWORD *)(a2 + 15) = *(_DWORD *)&v66[15];
    return result;
  }
  v44 = *(_QWORD *)(a3 + 8);
  v45 = *(_QWORD *)(a2 + 8);
  if (v44)
    v46 = *(unsigned __int8 *)(v44 + *(_QWORD *)a3 - 1) != 42;
  else
    v46 = -1;
  if (v45)
    v61 = *(unsigned __int8 *)(v45 + *(_QWORD *)a2 - 1) != 42;
  else
    v61 = -1;
  if (v46 > v61)
    goto LABEL_24;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  int v43;
  int v44;
  _BYTE v45[24];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 24);
      v7 = *(unsigned __int8 *)(a2 - 8);
      v8 = *(unsigned __int8 *)(a1 + 16);
      v9 = v7 > v8;
      if (v7 != v8
        || (v10 = *(unsigned __int8 *)(a2 - 7), v11 = *(unsigned __int8 *)(a1 + 17), v9 = v10 > v11, v10 != v11)
        || (v12 = *(unsigned __int8 *)(a2 - 6), v13 = *(unsigned __int8 *)(a1 + 18), v9 = v12 > v13, v12 != v13))
      {
        if (!v9)
          return result;
        goto LABEL_49;
      }
      v14 = *(_QWORD *)(a2 - 16);
      v15 = *(_QWORD *)(a1 + 8);
      if (v14)
        v16 = *(unsigned __int8 *)(v14 + *(_QWORD *)(a2 - 24) - 1) != 42;
      else
        v16 = -1;
      if (v15)
        v44 = *(unsigned __int8 *)(v15 + *(_QWORD *)a1 - 1) != 42;
      else
        v44 = -1;
      if (v16 > v44)
      {
LABEL_49:
        *(_OWORD *)v45 = *(_OWORD *)a1;
        v42 = *(_OWORD *)a1;
        *(_QWORD *)&v45[16] = *(_QWORD *)(a1 + 16);
        v43 = *(_DWORD *)(a2 - 9);
        *(_OWORD *)a1 = *v6;
        *(_DWORD *)(a1 + 15) = v43;
        *v6 = v42;
        *(_DWORD *)(a2 - 9) = *(_DWORD *)&v45[15];
      }
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>((__int128 *)a1, (uint64_t *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>(a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), (__int128 *)(a2 - 24));
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v17 = a1 + 48;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::{lambda(SnippetTerm,SnippetTerm)#1} &,SnippetTerm*>((__int128 *)a1, (uint64_t *)(a1 + 24), (__int128 *)(a1 + 48));
      v18 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v19 = 0;
      v20 = 0;
      break;
  }
LABEL_9:
  v22 = *(_QWORD *)v18;
  v21 = *(_QWORD *)(v18 + 8);
  v23 = *(unsigned __int8 *)(v18 + 16);
  v24 = *(unsigned __int8 *)(v18 + 17);
  v25 = *(unsigned __int8 *)(v18 + 18);
  v26 = *(unsigned __int8 *)(v17 + 16);
  v27 = v23 > v26;
  if (v23 == v26
    && (v28 = *(unsigned __int8 *)(v17 + 17), v27 = v24 > v28, v24 == v28)
    && (v29 = *(unsigned __int8 *)(v17 + 18), v27 = v25 > v29, v25 == v29))
  {
    if (v21)
      v30 = *(unsigned __int8 *)(v21 + v22 - 1) != 42;
    else
      v30 = -1;
    v40 = *(_QWORD *)(v17 + 8);
    if (v40)
      v41 = *(unsigned __int8 *)(v40 + *(_QWORD *)v17 - 1) != 42;
    else
      v41 = -1;
    if (v30 <= v41)
      goto LABEL_34;
  }
  else if (!v27)
  {
    goto LABEL_34;
  }
  *(_OWORD *)v18 = *(_OWORD *)v17;
  *(_DWORD *)(v18 + 15) = *(_DWORD *)(v17 + 15);
  v31 = a1;
  if (v17 == a1)
    goto LABEL_33;
  v32 = v19;
  while (1)
  {
    v33 = *(unsigned __int8 *)(a1 + v32 + 40);
    v34 = v23 > v33;
    if (v23 == v33
      && (v35 = *(unsigned __int8 *)(a1 + v32 + 41), v34 = v24 > v35, v24 == v35)
      && (v36 = *(unsigned __int8 *)(a1 + v32 + 42), v34 = v25 > v36, v25 == v36))
    {
      if (v21)
        v37 = *(unsigned __int8 *)(v22 + v21 - 1) != 42;
      else
        v37 = -1;
      v38 = *(_QWORD *)(a1 + v32 + 32);
      if (v38)
        v39 = *(unsigned __int8 *)(v38 + *(_QWORD *)(a1 + v32 + 24) - 1) != 42;
      else
        v39 = -1;
      if (v37 <= v39)
      {
        v31 = a1 + v32 + 48;
LABEL_33:
        *(_QWORD *)v31 = v22;
        *(_QWORD *)(v31 + 8) = v21;
        *(_BYTE *)(v31 + 16) = v23;
        *(_BYTE *)(v31 + 17) = v24;
        ++v20;
        *(_BYTE *)(v31 + 18) = v25;
        if (v20 == 8)
          return v18 + 24 == a2;
LABEL_34:
        v17 = v18;
        v19 += 24;
        v18 += 24;
        if (v18 == a2)
          return 1;
        goto LABEL_9;
      }
    }
    else if (!v34)
    {
      v31 = v17;
      goto LABEL_33;
    }
    v17 -= 24;
    *(_OWORD *)(a1 + v32 + 48) = *(_OWORD *)(a1 + v32 + 24);
    *(_DWORD *)(a1 + v32 + 63) = *(_DWORD *)(a1 + v32 + 39);
    v32 -= 24;
    if (v32 == -48)
    {
      v31 = a1;
      goto LABEL_33;
    }
  }
}

BOOL TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = 0;
  validAttributeForSnippet(a1, a2, (_DWORD *)&v5 + 1);
  validAttributeForSnippet(*(uint64_t **)(a3 + 8), *(_QWORD *)(a3 + 16), &v5);
  return *((float *)&v5 + 1) > *(float *)&v5;
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __n128 result;
  __n128 v7;
  __int128 v8;

  v3 = *a1;
  v7 = *(__n128 *)(a1 + 3);
  v8 = *(_OWORD *)(a1 + 1);
  v4 = a1[5];
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *a1 = *a2;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::__move_assign((uint64_t)(a1 + 3), (__n128 *)(a2 + 3));
  *a2 = v3;
  *(_OWORD *)(a2 + 1) = v8;
  v5 = (void *)a2[3];
  if (v5)
  {
    a2[4] = (uint64_t)v5;
    CFAllocatorDeallocate((CFAllocatorRef)a2[6], v5);
  }
  result = v7;
  *(__n128 *)(a2 + 3) = v7;
  a2[5] = v4;
  return result;
}

double std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  _BOOL4 v7;
  double result;
  uint64_t *v9;

  v6 = TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)a1);
  v7 = TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(a3 + 8), *(_QWORD *)(a3 + 16), a2);
  if (v6)
  {
    if (v7)
    {
      v9 = a1;
    }
    else
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>(a1, (uint64_t *)a2);
      if (!TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(a3 + 8), *(_QWORD *)(a3 + 16), a2))return result;
      v9 = (uint64_t *)a2;
    }
    *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>(v9, (uint64_t *)a3).n128_u64[0];
  }
  else if (v7)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>((uint64_t *)a2, (uint64_t *)a3);
    if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)a1))
    {
      *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>(a1, (uint64_t *)a2).n128_u64[0];
    }
  }
  return result;
}

double std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(a1, a2, a3);
  if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(a4 + 8), *(_QWORD *)(a4 + 16), a3))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>((uint64_t *)a3, (uint64_t *)a4);
    if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(a3 + 8), *(_QWORD *)(a3 + 16), a2))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>((uint64_t *)a2, (uint64_t *)a3);
      if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)a1))
      {
        *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>(a1, (uint64_t *)a2).n128_u64[0];
      }
    }
  }
  return result;
}

double std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(a1, a2, a3, a4);
  if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(a5 + 8), *(_QWORD *)(a5 + 16), a4))
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>((uint64_t *)a4, (uint64_t *)a5);
    if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(a4 + 8), *(_QWORD *)(a4 + 16), a3))
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>((uint64_t *)a3, (uint64_t *)a4);
      if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(a3 + 8), *(_QWORD *)(a3 + 16), a2))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>((uint64_t *)a2, (uint64_t *)a3);
        if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(*(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)a1))
        {
          *(_QWORD *)&result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>(a1, (uint64_t *)a2).n128_u64[0];
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 *v15;
  BOOL v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;

  v4 = 0x6DB6DB6DB6DB6DB7 * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()((uint64_t *)*(a2 - 6), *(a2 - 5), (uint64_t)a1))
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<TokenMatch::entry *&,TokenMatch::entry *&>(a1, a2 - 7);
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(a1, (uint64_t)(a1 + 7), (uint64_t)(a2 - 7));
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(a1, (uint64_t)(a1 + 7), (uint64_t)(a1 + 14), (uint64_t)(a2 - 7));
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(a1, (uint64_t)(a1 + 7), (uint64_t)(a1 + 14), (uint64_t)(a1 + 21), (uint64_t)(a2 - 7));
      return 1;
    default:
      v6 = (uint64_t)(a1 + 14);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,TokenMatch::convertToSnippetHint(BOOL)::compare_attributes &,TokenMatch::entry *>(a1, (uint64_t)(a1 + 7), (uint64_t)(a1 + 14));
      v7 = a1 + 21;
      if (a1 + 21 == a2)
        return 1;
      v8 = 0;
      v9 = 0;
      break;
  }
  while (1)
  {
    if (TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()((uint64_t *)v7[1], v7[2], v6))
    {
      v10 = (uint64_t *)v7[1];
      v11 = v7[2];
      v24 = *(__n128 *)(v7 + 3);
      v22 = *v7;
      v23 = v7[5];
      v7[4] = 0;
      v7[5] = 0;
      v12 = v8;
      v7[3] = 0;
      while (1)
      {
        v13 = v12;
        v14 = (char *)a1 + v12;
        *((_QWORD *)v14 + 21) = *(uint64_t *)((char *)a1 + v12 + 112);
        *((_OWORD *)v14 + 11) = *(_OWORD *)((char *)a1 + v12 + 120);
        v15 = (__n128 *)((char *)a1 + v12 + 136);
        std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::__move_assign((uint64_t)a1 + v12 + 192, v15);
        if (v13 == -112)
          break;
        v16 = TokenMatch::convertToSnippetHint(BOOL)::compare_attributes::operator()(v10, v11, (uint64_t)(v14 + 56));
        v12 = v13 - 56;
        if (!v16)
        {
          v17 = (char *)a1 + v13;
          v18 = (uint64_t)a1 + v13 + 112;
          v19 = (uint64_t)a1 + v12 + 168;
          v15 = (__n128 *)(v17 + 136);
          v20 = (uint64_t **)(v17 + 120);
          goto LABEL_12;
        }
      }
      v18 = (uint64_t)(v14 + 112);
      v20 = (uint64_t **)(v14 + 120);
      v19 = (uint64_t)a1;
LABEL_12:
      *(_QWORD *)v19 = v22;
      *v20 = v10;
      *(_QWORD *)(v18 + 16) = v11;
      v21 = (void *)v15->n128_u64[0];
      if (v15->n128_u64[0])
      {
        *(_QWORD *)(v19 + 32) = v21;
        CFAllocatorDeallocate(*(CFAllocatorRef *)(v19 + 48), v21);
        *(_QWORD *)(v18 + 40) = 0;
      }
      *v15 = v24;
      *(_QWORD *)(v19 + 40) = v23;
      if (++v9 == 8)
        return v7 + 7 == a2;
    }
    v6 = (uint64_t)v7;
    v8 += 56;
    v7 += 7;
    if (v7 == a2)
      return 1;
  }
}

__n128 std::vector<SnippetTerm,CFBridgeAllocator<SnippetTerm>>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 24), v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

float validAttributeForSnippet(uint64_t *a1, unint64_t a2, _DWORD *a3)
{
  unsigned __int8 v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *i;
  unint64_t v15;
  uint64_t v16;

  {
    v16 = 0;
    attributeImportance(void)::attributeImportanceScores = 0u;
    *(_OWORD *)&qword_1EDBBDA00 = 0u;
    dword_1EDBBDA10 = 1065353216;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string_view,float>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,float>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,float>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,float>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>((uint64_t *)(&off_1E6E2C658)[v16], (unint64_t)(&off_1E6E2C658)[v16 + 1], (uint64_t)&(&off_1E6E2C658)[v16]);
      v16 += 3;
    }
    while (v16 != 42);
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string_view,float>::~unordered_map[abi:nn180100], &attributeImportance(void)::attributeImportanceScores, &dword_1B8270000);
  }
  v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](a1, a2);
  v9 = *((_QWORD *)&attributeImportance(void)::attributeImportanceScores + 1);
  if (*((_QWORD *)&attributeImportance(void)::attributeImportanceScores + 1))
  {
    v10 = v7;
    v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&attributeImportance(void)::attributeImportanceScores + 8));
    v8.i16[0] = vaddlv_u8(v8);
    v11 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= *((_QWORD *)&attributeImportance(void)::attributeImportanceScores + 1))
        v12 = v7 % *((_QWORD *)&attributeImportance(void)::attributeImportanceScores + 1);
    }
    else
    {
      v12 = (*((_QWORD *)&attributeImportance(void)::attributeImportanceScores + 1) - 1) & v7;
    }
    v13 = *(uint64_t ***)(attributeImportance(void)::attributeImportanceScores + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = (uint64_t *)*i)
      {
        v15 = i[1];
        if (v10 == v15)
        {
          if (i[3] == a2 && !memcmp((const void *)i[2], a1, a2))
          {
            v8.i32[0] = *((_DWORD *)i + 8);
            *a3 = v8.i32[0];
            return *(float *)v8.i32;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12)
            return *(float *)v8.i32;
        }
      }
    }
  }
  return *(float *)v8.i32;
}

void std::__hash_table<std::__hash_value_type<std::string_view,float>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,float>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,float>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,float>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,float> const&>(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t ***v12;
  uint64_t **i;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  void *v22;
  uint64_t v23;
  _QWORD **v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *j;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;

  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](a1, a2);
  v7 = v6;
  v8 = *((_QWORD *)&attributeImportance(void)::attributeImportanceScores + 1);
  if (*((_QWORD *)&attributeImportance(void)::attributeImportanceScores + 1))
  {
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&attributeImportance(void)::attributeImportanceScores + 8));
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= *((_QWORD *)&attributeImportance(void)::attributeImportanceScores + 1))
        v11 = v6 % *((_QWORD *)&attributeImportance(void)::attributeImportanceScores + 1);
    }
    else
    {
      v11 = (*((_QWORD *)&attributeImportance(void)::attributeImportanceScores + 1) - 1) & v6;
    }
    v12 = *(uint64_t ****)(attributeImportance(void)::attributeImportanceScores + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = (uint64_t **)*i)
      {
        v14 = (unint64_t)i[1];
        if (v14 == v7)
        {
          if (i[3] == (uint64_t *)a2 && !memcmp(i[2], a1, a2))
            return;
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v8)
              v14 %= v8;
          }
          else
          {
            v14 &= v8 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  else
  {
    v11 = 0;
  }
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v7;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  v15[4] = *(_QWORD *)(a3 + 16);
  v16 = (float)(unint64_t)(qword_1EDBBDA08 + 1);
  if (!v8 || (float)(*(float *)&dword_1EDBBDA10 * (float)v8) < v16)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v16 / *(float *)&dword_1EDBBDA10);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v8 = *((_QWORD *)&attributeImportance(void)::attributeImportanceScores + 1);
    }
    if (*(_QWORD *)&prime > v8)
      goto LABEL_31;
    if (*(_QWORD *)&prime < v8)
    {
      v27 = vcvtps_u32_f32((float)(unint64_t)qword_1EDBBDA08 / *(float *)&dword_1EDBBDA10);
      if (v8 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *((_QWORD *)&attributeImportance(void)::attributeImportanceScores + 1);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = (void *)attributeImportance(void)::attributeImportanceScores;
          *(_QWORD *)&attributeImportance(void)::attributeImportanceScores = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)&attributeImportance(void)::attributeImportanceScores + 1) = prime;
          do
            *(_QWORD *)(attributeImportance(void)::attributeImportanceScores + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD **)qword_1EDBBDA00;
          if (qword_1EDBBDA00)
          {
            v25 = *(_QWORD *)(qword_1EDBBDA00 + 8);
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(attributeImportance(void)::attributeImportanceScores + 8 * v25) = &qword_1EDBBDA00;
            for (j = *v24; j; v25 = v31)
            {
              v31 = j[1];
              if (v26.u32[0] > 1uLL)
              {
                if (v31 >= *(_QWORD *)&prime)
                  v31 %= *(_QWORD *)&prime;
              }
              else
              {
                v31 &= *(_QWORD *)&prime - 1;
              }
              if (v31 != v25)
              {
                if (!*(_QWORD *)(attributeImportance(void)::attributeImportanceScores + 8 * v31))
                {
                  *(_QWORD *)(attributeImportance(void)::attributeImportanceScores + 8 * v31) = v24;
                  goto LABEL_56;
                }
                *v24 = (_QWORD *)*j;
                *j = **(_QWORD **)(attributeImportance(void)::attributeImportanceScores + 8 * v31);
                **(_QWORD **)(attributeImportance(void)::attributeImportanceScores + 8 * v31) = j;
                j = v24;
              }
              v31 = v25;
LABEL_56:
              v24 = (_QWORD **)j;
              j = (_QWORD *)*j;
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_60;
        }
        v36 = (void *)attributeImportance(void)::attributeImportanceScores;
        *(_QWORD *)&attributeImportance(void)::attributeImportanceScores = 0;
        if (v36)
          operator delete(v36);
        v8 = 0;
        *((_QWORD *)&attributeImportance(void)::attributeImportanceScores + 1) = 0;
      }
    }
LABEL_60:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v11 = v7 % v8;
      else
        v11 = v7;
    }
    else
    {
      v11 = (v8 - 1) & v7;
    }
  }
  v32 = attributeImportance(void)::attributeImportanceScores;
  v33 = *(_QWORD **)(attributeImportance(void)::attributeImportanceScores + 8 * v11);
  if (v33)
  {
    *v15 = *v33;
LABEL_73:
    *v33 = v15;
    goto LABEL_74;
  }
  v34 = qword_1EDBBDA00;
  *v15 = qword_1EDBBDA00;
  qword_1EDBBDA00 = (uint64_t)v15;
  *(_QWORD *)(v32 + 8 * v11) = &qword_1EDBBDA00;
  if (v34)
  {
    v35 = *(_QWORD *)(v34 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8)
        v35 %= v8;
    }
    else
    {
      v35 &= v8 - 1;
    }
    v33 = (_QWORD *)(attributeImportance(void)::attributeImportanceScores + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++qword_1EDBBDA08;
}

uint64_t std::unordered_map<std::string_view,float>::~unordered_map[abi:nn180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v72;
  unint64_t v73;

  if (a2 > 0x20)
  {
    if (a2 <= 0x40)
    {
      v5 = *(uint64_t *)((char *)a1 + a2 - 16);
      v6 = *a1 - 0x3C5A37A36834CED9 * (v5 + a2);
      v8 = a1[2];
      v7 = a1[3];
      v9 = __ROR8__(v6 + v7, 52);
      v10 = v6 + a1[1];
      v11 = __ROR8__(v10, 7);
      v12 = v10 + v8;
      v13 = *(uint64_t *)((char *)a1 + a2 - 32) + v8;
      v14 = *(uint64_t *)((char *)a1 + a2 - 8) + v7;
      v15 = __ROR8__(v14 + v13, 52);
      v16 = v11 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v5 + a2), 37) + v9;
      v17 = __ROR8__(v13, 37);
      v18 = *(uint64_t *)((char *)a1 + a2 - 24) + v13;
      v19 = __ROR8__(v18, 7);
      v20 = v16 + __ROR8__(v12, 31);
      v21 = v18 + v5;
      v22 = v21 + v14;
      v23 = 0x9AE16A3B2F90404FLL;
      v24 = 0xC3A5C85C97CB3127 * (v22 + v20) - 0x651E95C4D06FBFB1 * (v12 + v7 + v17 + v19 + v15 + __ROR8__(v21, 31));
      v25 = v20 - 0x3C5A37A36834CED9 * (v24 ^ (v24 >> 47));
      return (v25 ^ (v25 >> 47)) * v23;
    }
    v4 = 0x9DDFEA08EB382D69;
    v32 = *(uint64_t *)((char *)a1 + a2 - 48);
    v33 = *(uint64_t *)((char *)a1 + a2 - 40);
    v34 = *(uint64_t *)((char *)a1 + a2 - 24);
    v36 = *(uint64_t *)((char *)a1 + a2 - 64);
    v35 = *(uint64_t *)((char *)a1 + a2 - 56);
    v37 = *(uint64_t *)((char *)a1 + a2 - 16);
    v38 = *(uint64_t *)((char *)a1 + a2 - 8);
    v39 = v35 + v37;
    v40 = 0x9DDFEA08EB382D69
        * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v34 ^ (v32 + a2))));
    v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v40 >> 47));
    v42 = v36 + a2 + v35 + v32;
    v43 = v42 + v33;
    v44 = __ROR8__(v42, 44) + v36 + a2 + __ROR8__(v33 + v36 + a2 - 0x622015F714C7D297 * (v40 ^ (v40 >> 47)), 21);
    v45 = v35 + v37 + *(uint64_t *)((char *)a1 + a2 - 32) - 0x4B6D499041670D8DLL;
    v46 = v45 + v34 + v37;
    v47 = __ROR8__(v46, 44);
    v48 = v46 + v38;
    v49 = v47 + v45 + __ROR8__(v45 + v33 + v38, 21);
    v51 = *a1;
    v50 = a1 + 4;
    v52 = v51 - 0x4B6D499041670D8DLL * v33;
    v53 = -(uint64_t)((a2 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      v54 = *(v50 - 3);
      v55 = v52 + v43 + v39 + v54;
      v56 = v50[2];
      v57 = v50[3];
      v58 = v50[1];
      v39 = v58 + v43 - 0x4B6D499041670D8DLL * __ROR8__(v39 + v44 + v56, 42);
      v59 = v41 + v48;
      v60 = *(v50 - 2);
      v61 = *(v50 - 1);
      v62 = *(v50 - 4) - 0x4B6D499041670D8DLL * v44;
      v63 = v62 + v48 + v61;
      v64 = v62 + v54 + v60;
      v43 = v64 + v61;
      v65 = __ROR8__(v64, 44) + v62;
      v66 = (0xB492B66FBE98F273 * __ROR8__(v55, 37)) ^ v49;
      v52 = 0xB492B66FBE98F273 * __ROR8__(v59, 33);
      v44 = v65 + __ROR8__(v63 + v66, 21);
      v67 = v52 + v49 + *v50;
      v48 = v67 + v58 + v56 + v57;
      v49 = __ROR8__(v67 + v58 + v56, 44) + v67 + __ROR8__(v39 + v60 + v67 + v57, 21);
      v50 += 8;
      v41 = v66;
      v53 += 64;
    }
    while (v53);
    v68 = v52
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v49 ^ ((0x9DDFEA08EB382D69 * (v49 ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (v49 ^ v44)))) >> 47));
    v69 = 0x9DDFEA08EB382D69
        * (v68 ^ (v66
                - 0x4B6D499041670D8DLL * (v39 ^ (v39 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) ^ ((0x9DDFEA08EB382D69 * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v43)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v43)))) >> 47))));
    v70 = 0x9DDFEA08EB382D69 * (v68 ^ (v69 >> 47) ^ v69);
    goto LABEL_13;
  }
  if (a2 > 0x10)
  {
    v26 = a1[1];
    v27 = 0xB492B66FBE98F273 * *a1;
    v28 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8), 30) + __ROR8__(v27 - v26, 43);
    v29 = v27 + a2 + __ROR8__(v26 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a1 + a2 - 8);
    v23 = 0x9DDFEA08EB382D69;
    v30 = 0x9DDFEA08EB382D69 * (v29 ^ (v28 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a1 + a2 - 16)));
    v31 = v29 ^ (v30 >> 47) ^ v30;
LABEL_8:
    v25 = 0x9DDFEA08EB382D69 * v31;
    return (v25 ^ (v25 >> 47)) * v23;
  }
  if (a2 < 9)
  {
    if (a2 >= 4)
    {
      v72 = *(unsigned int *)((char *)a1 + a2 - 4);
      v23 = 0x9DDFEA08EB382D69;
      v73 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a1) + a2) ^ v72);
      v31 = v72 ^ (v73 >> 47) ^ v73;
      goto LABEL_8;
    }
    v4 = 0x9AE16A3B2F90404FLL;
    if (!a2)
      return v4;
    v70 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                   * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
LABEL_13:
    v4 *= v70 ^ (v70 >> 47);
    return v4;
  }
  v2 = *(uint64_t *)((char *)a1 + a2 - 8);
  v3 = __ROR8__(v2 + a2, a2);
  return (0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v3 ^ *a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v3 ^ *a1)))) >> 47))) ^ v2;
}

uint64_t keycompare(uint64_t a1, int a2, const char *a3, int a4, const char *a5)
{
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;

  v5 = *(_DWORD *)a3;
  v6 = *(_DWORD *)a5;
  if (a2 == 4)
  {
    v7 = v5 - v6;
    if (v7)
      v8 = v7;
    else
      v8 = -1;
    if (a4 == 4)
      return v7;
    else
      return v8;
  }
  else if (a4 == 4)
  {
    v10 = v5 - v6;
    if (v10)
      return v10;
    else
      return 1;
  }
  else
  {
    result = (v5 - v6);
    if (v5 == v6)
      return strcmp(a3 + 10, a5 + 10);
  }
  return result;
}

void release_persistent_id_store(uint64_t a1)
{
  int *v2;
  int v3;
  NSObject *v4;
  int v5;
  const char *v6;
  uint64_t *v7;
  int v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = (int *)(a1 + 32);
  if (*(_DWORD *)(a1 + 32) > 0x63u)
  {
    if (!_sqlite_insert((uint64_t *)a1, (char *)&master_fid_rec, master_fid_rec_size, (char *)(a1 + 32), 4, 0))goto LABEL_7;
    v3 = *__error();
    v4 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v8 = *v2;
      v9 = 136315650;
      v10 = "release_persistent_id_store";
      v11 = 1024;
      v12 = 298;
      v13 = 1024;
      v14 = v8;
      v6 = "%s:%d: psid-release: Failed to update the master fid! (0x%x)\n";
      goto LABEL_13;
    }
  }
  else
  {
    v3 = *__error();
    v4 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *v2;
      v9 = 136315650;
      v10 = "release_persistent_id_store";
      v11 = 1024;
      v12 = 285;
      v13 = 1024;
      v14 = v5;
      v6 = "%s:%d: release_psid_store: danger! master_fid %d looks bad.\n";
LABEL_13:
      _os_log_error_impl(&dword_1B8270000, v4, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v9, 0x18u);
    }
  }
  *__error() = v3;
LABEL_7:
  v7 = *(uint64_t **)(a1 + 16);
  if (v7)
    sqlite3BtreeCloseCursor(v7);
  if (*(_QWORD *)a1)
    sqlite3BtreeClose(*(uint64_t **)a1);
  free((void *)a1);
}

uint64_t _sqlite_insert(uint64_t *a1, char *a2, unint64_t a3, char *a4, int a5, char a6)
{
  uint64_t v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  os_log_type_t v19;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((a6 & 1) != 0 || (v12 = _sqlite_bulkBegin((uint64_t)a1), !(_DWORD)v12))
  {
    v12 = sqlite3BtreeInsert(a1[2], a2, a3, a4, a5);
    if ((_DWORD)v12)
    {
      v13 = *__error();
      v14 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v21 = 136315650;
        v22 = "_sqlite_insert";
        v23 = 1024;
        v24 = 1061;
        v25 = 1024;
        v26 = v12;
        _os_log_error_impl(&dword_1B8270000, v14, OS_LOG_TYPE_ERROR, "%s:%d: sqlite3BtreeInsert failed; rc = %d\n",
          (uint8_t *)&v21,
          0x18u);
      }
      *__error() = v13;
    }
    if ((a6 & 1) == 0)
    {
      v15 = _sqlite_bulkEnd(a1);
      if (!(_DWORD)v12)
      {
        v16 = v15;
        if ((_DWORD)v15)
        {
          v17 = *__error();
          v18 = _SILogForLogForCategory(4);
          v19 = 2 * (dword_1EF19FC9C < 4);
          if (os_log_type_enabled(v18, v19))
          {
            v21 = 67109120;
            LODWORD(v22) = v16;
            _os_log_impl(&dword_1B8270000, v18, v19, "sqlite3BtreeInsert failed in _sqlite_bulkEnd; rc = %d\n",
              (uint8_t *)&v21,
              8u);
          }
          *__error() = v17;
          return v16;
        }
      }
    }
  }
  return v12;
}

uint64_t _sqlite_bulkBegin(uint64_t a1)
{
  uint64_t **v2;
  uint64_t v3;

  v2 = (uint64_t **)(a1 + 16);
  if (*(_QWORD *)(a1 + 16)
    || (v3 = sqlite3BtreeCursor(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), 1, *(uint64_t (**)(int, int, void *, int, void *))(a1 + 24), v2), !(_DWORD)v3))
  {
    v3 = sqlite3BtreeBeginTrans(*(_QWORD *)a1);
    if ((_DWORD)v3)
    {
      sqlite3BtreeCloseCursor(*v2);
      *v2 = 0;
    }
  }
  return v3;
}

uint64_t _sqlite_bulkEnd(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  NSObject *v3;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!a1[2])
    return 0;
  v1 = sqlite3BtreeCommit(*a1);
  if ((_DWORD)v1)
  {
    v2 = *__error();
    v3 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v5 = 136315650;
      v6 = "_sqlite_bulkEnd";
      v7 = 1024;
      v8 = 1153;
      v9 = 1024;
      v10 = v1;
      _os_log_error_impl(&dword_1B8270000, v3, OS_LOG_TYPE_ERROR, "%s:%d: sqlite3BtreeCommit failed; rc = %d\n",
        (uint8_t *)&v5,
        0x18u);
    }
    *__error() = v2;
  }
  return v1;
}

uint64_t get_id_for_path(uint64_t a1, _BYTE *a2, int *a3, _DWORD *a4, char a5)
{
  _BYTE *v8;
  int v10;
  int v11;
  int v12;
  _BYTE *v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t result;
  int v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  int v23;
  _DWORD v24[65];
  uint64_t v25;
  uint8_t buf[4];
  int v27;
  uint64_t v28;

  v8 = a2;
  v28 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  v25 = 0;
  memset(&v24[1], 0, 256);
  v24[0] = 2;
  *a3 = 0;
  if (a4)
    *a4 = 2;
  v10 = *a2;
  if (*a2)
  {
    v11 = 2;
    do
    {
      while (v10 == 47)
      {
        v12 = *++v8;
        v10 = v12;
      }
      v13 = v8;
      if (!v10)
        break;
      do
      {
        if (v10 == 47)
          break;
        v14 = *++v13;
        v10 = v14;
      }
      while (v14);
      v15 = (_WORD)v13 - (_WORD)v8;
      if (((v13 - v8) & 0xFF00) != 0)
        v15 = 255;
      LOWORD(v24[2]) = v15;
      __strncpy_chk();
      v16 = LOWORD(v24[2]);
      ++LOWORD(v24[2]);
      *((_BYTE *)&v24[2] + v16 + 2) = 0;
      v24[1] = 0;
      if (*v13 == 47)
        v8 = v13 + 1;
      else
        v8 = v13;
      if (psid_lookup(a1, (uint64_t)v24, &v23))
      {
        if ((a5 & 1) == 0)
          return 2;
        v17 = *(_DWORD *)(a1 + 32);
        if (v17 != 2 && v17 <= 0x63)
        {
          v19 = *__error();
          v20 = _SILogForLogForCategory(4);
          v21 = 2 * (dword_1EF19FC9C < 4);
          if (os_log_type_enabled(v20, v21))
          {
            v22 = *(_DWORD *)(a1 + 32);
            *(_DWORD *)buf = 67109120;
            v27 = v22;
            _os_log_impl(&dword_1B8270000, v20, v21, "psid_insert: master fid corrupted (%d)\n", buf, 8u);
          }
          *__error() = v19;
          return 22;
        }
        v23 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v17 + 1;
        result = _psid_insert(a1, (uint64_t)v24, (char *)&v23);
        if ((_DWORD)result)
          return result;
      }
      if (a4)
        *a4 = v24[0];
      v11 = v23;
      v24[0] = v23;
      v10 = *v8;
    }
    while (*v8);
  }
  else
  {
    v11 = 2;
  }
  result = 0;
  *a3 = v11;
  return result;
}

uint64_t psid_lookup(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;

  v4 = *(unsigned __int16 *)(a2 + 8) + 12;
  v7 = 0;
  v6 = 4;
  result = _sqlite_get_psid(a1, a2, v4, (char *)&v7, (int *)&v6);
  if ((_DWORD)result)
    return 2;
  *a3 = v7;
  return result;
}

uint64_t _psid_insert(uint64_t a1, uint64_t a2, char *a3)
{
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  const char *v11;
  int *v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  int v21;
  int v22;
  _BYTE v23[14];
  __int16 v24;
  _BYTE v25[14];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (_sqlite_bulkBegin(a1))
    return 22;
  v7 = *(unsigned __int16 *)(a2 + 8) + 12;
  if (_sqlite_insert((uint64_t *)a1, (char *)a2, *(unsigned __int16 *)(a2 + 8) + 12, a3, 4, 1))
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_DWORD *)(a1 + 32);
      v22 = 136315906;
      *(_QWORD *)v23 = "_psid_insert_locked";
      *(_WORD *)&v23[8] = 1024;
      *(_DWORD *)&v23[10] = 413;
      v24 = 1024;
      *(_DWORD *)v25 = v10;
      *(_WORD *)&v25[4] = 2080;
      *(_QWORD *)&v25[6] = a2 + 10;
      v11 = "%s:%d: psid-insert: failed to store fid 0x%x for path %s\n";
LABEL_21:
      _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v22, 0x22u);
      goto LABEL_9;
    }
    goto LABEL_9;
  }
  v12 = (int *)&unk_1EF19F000;
  if (dword_1EF19FC9C >= 5)
  {
    v17 = *__error();
    v18 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_DWORD *)(a1 + 32);
      v22 = 67109378;
      *(_DWORD *)v23 = v19;
      *(_WORD *)&v23[4] = 2080;
      *(_QWORD *)&v23[6] = a2 + 10;
      _os_log_impl(&dword_1B8270000, v18, OS_LOG_TYPE_DEFAULT, "psid-insert: fid 0x%x for path %s\n", (uint8_t *)&v22, 0x12u);
    }
    *__error() = v17;
    v12 = (_DWORD *)&unk_1EF19F000;
  }
  if (_sqlite_insert((uint64_t *)a1, a3, 4uLL, (char *)a2, v7, 1))
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_DWORD *)(a1 + 32);
      v22 = 136315906;
      *(_QWORD *)v23 = "_psid_insert_locked";
      *(_WORD *)&v23[8] = 1024;
      *(_DWORD *)&v23[10] = 419;
      v24 = 2080;
      *(_QWORD *)v25 = a2 + 10;
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)&v25[10] = v16;
      v11 = "%s:%d: psid-insert: failed to store path %s for fid 0x%x\n";
      goto LABEL_21;
    }
LABEL_9:
    v13 = 22;
    goto LABEL_10;
  }
  if (v12[807] < 5)
  {
    v13 = 0;
    goto LABEL_11;
  }
  v8 = *__error();
  v20 = _SILogForLogForCategory(4);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *(_DWORD *)(a1 + 32);
    v22 = 136315394;
    *(_QWORD *)v23 = a2 + 10;
    *(_WORD *)&v23[8] = 1024;
    *(_DWORD *)&v23[10] = v21;
    _os_log_impl(&dword_1B8270000, v20, OS_LOG_TYPE_DEFAULT, "psid-insert: store path %s for fid 0x%x\n", (uint8_t *)&v22, 0x12u);
  }
  v13 = 0;
LABEL_10:
  *__error() = v8;
LABEL_11:
  v14 = _sqlite_bulkEnd((uint64_t *)a1);
  if (v13)
    v15 = v13;
  else
    v15 = 22;
  if (v14)
    return v15;
  else
    return v13;
}

uint64_t _sqlite_get_psid(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int *a5)
{
  uint64_t *v10;
  uint64_t **v11;
  uint64_t result;
  _BOOL4 v13;
  int v14;

  v11 = (uint64_t **)(a1 + 16);
  v10 = *(uint64_t **)(a1 + 16);
  if (!v10)
  {
    LODWORD(result) = sqlite3BtreeCursor(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), 1, *(uint64_t (**)(int, int, void *, int, void *))(a1 + 24), v11);
    if ((_DWORD)result)
      goto LABEL_5;
    v10 = *v11;
  }
  v14 = 0;
  LODWORD(result) = sqlite3BtreeMoveto((uint64_t)v10, a2, a3, &v14);
  if (!(result | v14))
  {
    LODWORD(result) = getPayload((uint64_t)*v11, *a5, a4, 1);
    v13 = result == 0;
    goto LABEL_6;
  }
LABEL_5:
  v13 = 0;
LABEL_6:
  if ((_DWORD)result)
    v13 = 1;
  if (v13)
    return result;
  else
    return 0xFFFFFFFFLL;
}

uint64_t _sqlite_get(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, unint64_t *a5)
{
  uint64_t *v10;
  uint64_t **v11;
  uint64_t result;
  uint64_t *v13;
  int v14;
  unint64_t v15;
  int v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t v19[12];
  int v20;

  v11 = (uint64_t **)(a1 + 16);
  v10 = *(uint64_t **)(a1 + 16);
  if (!v10)
  {
    LODWORD(result) = sqlite3BtreeCursor(*(_QWORD *)a1, *(_DWORD *)(a1 + 8), 1, *(uint64_t (**)(int, int, void *, int, void *))(a1 + 24), v11);
    if ((_DWORD)result)
      goto LABEL_10;
    v10 = *v11;
  }
  v20 = 0;
  LODWORD(result) = sqlite3BtreeMoveto((uint64_t)v10, a2, a3, &v20);
  if (result | v20)
  {
LABEL_10:
    v14 = 0;
    goto LABEL_16;
  }
  v13 = *v11;
  v14 = *((unsigned __int8 *)*v11 + 97);
  if (!*((_BYTE *)*v11 + 97))
  {
LABEL_13:
    LODWORD(result) = 0;
    goto LABEL_16;
  }
  getCellInfo((uint64_t)*v11);
  v15 = *((unsigned int *)v13 + 20);
  if (!(_DWORD)v15)
  {
    v14 = 0;
    goto LABEL_13;
  }
  if (*a5 >= v15)
  {
    *a5 = v15;
  }
  else
  {
    v16 = *__error();
    v17 = _SILogForLogForCategory(4);
    v18 = 2 * (dword_1EF19FC9C < 4);
    if (os_log_type_enabled(v17, v18))
    {
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1B8270000, v17, v18, "_sqlite_get: buffer is too small\n", v19, 2u);
    }
    *__error() = v16;
    LODWORD(v15) = *(_DWORD *)a5;
  }
  LODWORD(result) = getPayload((uint64_t)*v11, v15, a4, 1);
  v14 = result == 0;
LABEL_16:
  if (result | v14)
    return result;
  else
    return 0xFFFFFFFFLL;
}

uint64_t get_path_for_id(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, int a5)
{
  uint64_t v7;
  int v8;
  uint64_t result;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint32_t v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  NSObject *v26;
  os_log_type_t v27;
  unint64_t v29;
  int v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  _BYTE v36[14];
  _OWORD v37[17];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v30 = a2;
  v7 = a5;
  *(_BYTE *)(a4 + a5 - 1) = 0;
  if (a2 == 2)
  {
    v8 = 1;
  }
  else
  {
    v11 = a5 + 1;
    v8 = 1;
    memset(v37, 0, 268);
    while (1)
    {
      v29 = 268;
      if (_sqlite_get(a1, (uint64_t)&v30, 4, (char *)v37, &v29))
        return 2;
      v12 = WORD4(v37[0]);
      if (WORD4(v37[0]) >= a5)
      {
        v16 = *__error();
        v17 = _SILogForLogForCategory(4);
        v18 = 2 * (dword_1EF19FC9C < 4);
        if (os_log_type_enabled(v17, v18))
        {
          *(_DWORD *)buf = 67109890;
          v32 = WORD4(v37[0]);
          v33 = 1024;
          v34 = v37[0];
          v35 = 1024;
          *(_DWORD *)v36 = DWORD1(v37[0]);
          *(_WORD *)&v36[4] = 2080;
          *(_QWORD *)&v36[6] = (unint64_t)v37 | 0xA;
          v19 = "get_path_for_id: bogus part len %d (%d/%d/%s)\n";
          v20 = v17;
          v21 = v18;
          v22 = 30;
          goto LABEL_22;
        }
LABEL_23:
        *__error() = v16;
        return 22;
      }
      if (LODWORD(v37[0]) != 2 && LODWORD(v37[0]) <= 0x63)
      {
        v13 = *__error();
        v14 = _SILogForLogForCategory(4);
        v15 = 2 * (dword_1EF19FC9C < 4);
        if (os_log_type_enabled(v14, v15))
        {
          *(_DWORD *)buf = 67109634;
          v32 = v30;
          v33 = 1024;
          v34 = v37[0];
          v35 = 2080;
          *(_QWORD *)v36 = (unint64_t)v37 | 0xA;
          _os_log_impl(&dword_1B8270000, v14, v15, "get_path_for_id: bogus looking part fid (cur fid %d, part fid %d name %s)\n", buf, 0x18u);
        }
        *__error() = v13;
        v12 = WORD4(v37[0]);
      }
      if (v8 + v12 + 1 >= a5)
      {
        *(_BYTE *)(a4 + v8) = 0;
        v16 = *__error();
        v23 = _SILogForLogForCategory(4);
        v24 = 2 * (dword_1EF19FC9C < 4);
        if (os_log_type_enabled(v23, v24))
        {
          *(_DWORD *)buf = 67109634;
          v32 = v8;
          v33 = 1024;
          v34 = WORD4(v37[0]);
          v35 = 2080;
          *(_QWORD *)v36 = a4;
          v19 = "get_path_for_id: path index too large! (%d %d : %s)\n";
          v20 = v23;
          v21 = v24;
          v22 = 24;
LABEL_22:
          _os_log_impl(&dword_1B8270000, v20, v21, v19, buf, v22);
        }
        goto LABEL_23;
      }
      strncpy((char *)(a4 + v11 - (v8 + v12)), (const char *)((unint64_t)v37 | 0xA), v12 - 1);
      v8 += v12;
      *(_BYTE *)(a4 + v7 - v8) = 47;
      if (v30 == 100 && LODWORD(v37[0]) != 2)
        break;
      v30 = v37[0];
      if (LODWORD(v37[0]) == 2)
        goto LABEL_3;
    }
    v25 = *__error();
    v26 = _SILogForLogForCategory(4);
    v27 = 2 * (dword_1EF19FC9C < 4);
    if (os_log_type_enabled(v26, v27))
    {
      *(_DWORD *)buf = 67109376;
      v32 = v30;
      v33 = 1024;
      v34 = v37[0];
      _os_log_impl(&dword_1B8270000, v26, v27, "get_path_for_id: cur fid %d should have parent fid 2 but part->fid == %d\n", buf, 0xEu);
    }
    *__error() = v25;
  }
LABEL_3:
  result = 0;
  *a3 = a4 + v7 - v8;
  return result;
}

uint64_t remove_path(uint64_t *a1, char *a2)
{
  uint64_t result;
  int v5;
  NSObject *v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  _OWORD v17[17];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  result = _sqlite_bulkBegin((uint64_t)a1);
  if (!(_DWORD)result)
  {
    memset(v17, 0, 268);
    v10 = 0;
    if (!get_id_for_path((uint64_t)a1, a2, (int *)v17, &v10, 0))
    {
      if (_sqlite_delete((uint64_t)a1, (uint64_t)v17, 4))
      {
        v5 = *__error();
        v6 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v12 = "remove_path_locked";
          v13 = 1024;
          v14 = 747;
          v15 = 1024;
          v16 = v17[0];
          _os_log_error_impl(&dword_1B8270000, v6, OS_LOG_TYPE_ERROR, "%s:%d: psid-remove: Could not delete the file-fid record for fid %d\n", buf, 0x18u);
        }
        *__error() = v5;
      }
      memset((char *)v17 + 4, 0, 264);
      LODWORD(v17[0]) = v10;
      v7 = strrchr(a2, 47);
      v8 = a2 - 1;
      if (v7)
        v8 = v7;
      v9 = strncpy((char *)((unint64_t)v17 | 0xA), v8 + 1, 0x100uLL);
      BYTE9(v17[16]) = 0;
      WORD4(v17[0]) = strlen(v9) + 1;
      _sqlite_delete((uint64_t)a1, (uint64_t)v17, WORD4(v17[0]) + 12);
    }
    return _sqlite_bulkEnd(a1);
  }
  return result;
}

uint64_t _sqlite_delete(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t inserted;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;
  NSObject *v11;
  os_log_type_t v12;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  void *v21;
  void *v22;
  int v23;
  int v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[16];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  inserted = sqlite3BtreeMoveto(*(_QWORD *)(a1 + 16), a2, a3, &v23);
  if (inserted | v23)
    return inserted;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)v5;
  if (*(_BYTE *)(*(_QWORD *)v5 + 24) != 2)
  {
    if (*(_BYTE *)(v6 + 26))
      inserted = 8;
    else
      inserted = 1;
    goto LABEL_17;
  }
  v7 = *(_QWORD *)(v5 + 48);
  if (*(_DWORD *)(v5 + 56) >= (int)*(unsigned __int16 *)(v7 + 20))
  {
    inserted = 1;
    goto LABEL_17;
  }
  if (!*(_BYTE *)(v5 + 96))
  {
    inserted = 3;
    goto LABEL_17;
  }
  if (checkReadLocks(*(_QWORD *)(v6 + 8), *(_DWORD *)(v5 + 40), v5))
  {
    inserted = 6;
    goto LABEL_17;
  }
  inserted = sqlite3pager_write(*(_QWORD **)(v7 + 112));
  if (!(_DWORD)inserted)
  {
    v8 = (unsigned int *)(*(_QWORD *)(v7 + 112)
                        + __rev16(*(unsigned __int16 *)(*(_QWORD *)(v7 + 112)
                                                      + *(unsigned __int16 *)(v7 + 14)
                                                      + 2 * *(int *)(v5 + 56))));
    v9 = *(_BYTE *)(v7 + 4) ? 0 : bswap32(*v8);
    inserted = clearCell(v7, (uint64_t)v8);
    if (!(_DWORD)inserted)
    {
      if (*(_BYTE *)(v7 + 4))
      {
        v14 = *(_DWORD *)(v5 + 56);
        *(_OWORD *)buf = 0u;
        v28 = 0u;
        parseCellPtr(v7, (uint64_t)v8, (uint64_t)buf);
        dropCell(v7, v14, WORD5(v28));
        inserted = balance(v7, 0);
      }
      else
      {
        v33 = 0;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        *(_OWORD *)buf = 0u;
        v28 = 0u;
        getTempCursor((uint64_t *)v5, (uint64_t)buf);
        v15 = sqlite3BtreeNext((uint64_t)buf, &v24);
        if (v15)
        {
          if (v15 == 7)
            inserted = 7;
          else
            inserted = 11;
          goto LABEL_17;
        }
        v16 = v30;
        inserted = sqlite3pager_write(*(_QWORD **)(v30 + 112));
        if ((_DWORD)inserted)
          goto LABEL_17;
        v17 = *(_DWORD *)(v5 + 56);
        v25 = 0u;
        v26 = 0u;
        parseCellPtr(v7, (uint64_t)v8, (uint64_t)&v25);
        dropCell(v7, v17, WORD5(v26));
        v18 = DWORD2(v30);
        v19 = *(_QWORD *)(v16 + 112)
            + __rev16(*(unsigned __int16 *)(*(_QWORD *)(v16 + 112) + *(unsigned __int16 *)(v16 + 14)
                                                                   + 2 * SDWORD2(v30)));
        v25 = 0u;
        v26 = 0u;
        parseCellPtr(v16, v19, (uint64_t)&v25);
        v20 = WORD5(v26);
        v21 = sqlite3MallocRaw(*(unsigned __int16 *)(v6 + 32) - 8);
        if (!v21)
        {
          inserted = 7;
          goto LABEL_17;
        }
        v22 = v21;
        inserted = insertCell(v7, *(_DWORD *)(v5 + 56), v19 - 4, v20 + 4, (uint64_t)v21, 0);
        if ((_DWORD)inserted)
          goto LABEL_17;
        *(_DWORD *)findOverflowCell(v7, *(_DWORD *)(v5 + 56)) = bswap32(v9);
        inserted = balance(v7, 0);
        free(v22);
        if ((_DWORD)inserted)
          goto LABEL_17;
        dropCell(v16, v18, v20);
        inserted = balance(v16, 0);
        sqlite3pager_unref(*(_QWORD *)(v16 + 112));
      }
      moveToRoot(v5);
      if (!(_DWORD)inserted)
        return inserted;
    }
  }
LABEL_17:
  v10 = *__error();
  v11 = _SILogForLogForCategory(4);
  v12 = 2 * (dword_1EF19FC9C < 4);
  if (os_log_type_enabled(v11, v12))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = inserted;
    _os_log_impl(&dword_1B8270000, v11, v12, "sqlite3BtreeDelete failed; rc = %d\n", buf, 8u);
  }
  *__error() = v10;
  return inserted;
}

uint64_t storage_window_munmap(uint64_t a1, void *a2, size_t a3)
{
  _QWORD v6[6];
  uint8_t buf[4];
  void *v8;
  __int16 v9;
  size_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 0x40000000;
    v6[2] = __storage_window_munmap_block_invoke;
    v6[3] = &__block_descriptor_tmp_23;
    v6[4] = a2;
    v6[5] = a3;
    return (*(uint64_t (**)(uint64_t, _QWORD *))(a1 + 16))(a1, v6);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v8 = a2;
      v9 = 2048;
      v10 = a3;
      _os_log_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "unmap: %p %ld", buf, 0x16u);
    }
    return munmap(a2, a3);
  }
}

uint64_t __storage_window_munmap_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v2 = *(_QWORD *)(a1 + 32);
    v3 = *(_QWORD *)(a1 + 40);
    v5 = 134218240;
    v6 = v2;
    v7 = 2048;
    v8 = v3;
    _os_log_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "safe unmap: %p %ld", (uint8_t *)&v5, 0x16u);
  }
  return munmap(*(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

void storageWindowsClose(uint64_t a1)
{
  char *v2;
  int v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  float v7;
  const void *v8;
  _DWORD v9[2];
  __int16 v10;
  double v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(char **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    v3 = *__error();
    v4 = _SILogForLogForCategory(10);
    v5 = 2 * (dword_1EF19FCB4 < 4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (double)*(unint64_t *)(a1 + 16) * 100.0 / (double)v6;
      v9[0] = 67109376;
      v9[1] = v6 >> 10;
      v10 = 2048;
      v11 = v7;
      _os_log_impl(&dword_1B8270000, v4, v5, "Memsize: %uKB %f%% used", (uint8_t *)v9, 0x12u);
    }
    *__error() = v3;
    fd_release(v2);
  }
  v8 = *(const void **)(a1 + 32);
  if (v8)
  {
    _Block_release(v8);
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void storageWindowRelease(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  unsigned int v4;
  void *v5;

  v1 = *a1;
  if (*a1)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v1);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v1));
    if (!v4)
    {
      v5 = *(void **)(v1 + 8);
      if ((unint64_t)v5 + 1 >= 2)
        storage_window_munmap(*(_QWORD *)(v1 + 32), v5, *(_QWORD *)(v1 + 24) - *(_QWORD *)(v1 + 16));
      free((void *)v1);
    }
    *a1 = 0;
  }
}

void storageWindowReleaseImmediate(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v3;
  unsigned int v4;
  void *v5;

  v1 = *a1;
  if (*a1)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v1);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v1));
    if (!v4)
    {
      v5 = *(void **)(v1 + 8);
      if (v5)
        munmap(v5, *(_QWORD *)(v1 + 24) - *(_QWORD *)(v1 + 16));
      free((void *)v1);
    }
    *a1 = 0;
  }
}

_QWORD *storageWindowSync(_QWORD *result, int a2)
{
  _QWORD *v2;
  size_t v3;
  int v4;

  if (result)
  {
    v2 = result;
    result = (_QWORD *)result[1];
    if (result)
    {
      if (!*((_BYTE *)v2 + 40))
      {
        v3 = v2[3] - v2[2];
        if (a2)
          v4 = 1;
        else
          v4 = 16;
        return (_QWORD *)msync(result, v3, v4);
      }
    }
  }
  return result;
}

void _windowsMapInit(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  char *v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  char *v21;
  const char *v22;

  v4 = 0;
  v5 = 0;
  v6 = a1 + 48;
  do
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v5 >= v7)
      goto LABEL_19;
    v8 = *(unsigned int **)(v6 + 8 * v4);
    v9 = *(unsigned __int8 *)(a1 + 40);
    v10 = 1 << v9;
    if (v4)
    {
      if (v7 <= (v9 > 1))
      {
        v17 = __si_assert_copy_extra(0);
        v18 = v17;
        v19 = "";
        if (v17)
          v19 = v17;
        __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 442, "windows->_size > (1<windows->offset_shift)", v19);
        free(v18);
        if (__valid_fs(-1))
          v20 = 2989;
        else
          v20 = 3072;
        *(_DWORD *)v20 = -559038737;
        abort();
      }
      *(_DWORD *)(a1 + 24) = v4 + 1;
      if (v7 <= v10)
      {
        v13 = __si_assert_copy_extra(0);
        v14 = v13;
        v15 = "";
        if (v13)
          v15 = v13;
        __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 447, "windows->_size>(1ull<<windows->offset_shift) || windows->count <= 1", v15);
LABEL_25:
        free(v14);
        if (__valid_fs(-1))
          v16 = 2989;
        else
          v16 = 3072;
        *(_DWORD *)v16 = -559038737;
        abort();
      }
      v5 = (v4 + 1) << v9;
      if (!v8)
      {
LABEL_7:
        v11 = *(_BYTE *)(a1 + 28);
        v12 = *(_QWORD *)(a1 + 32);
        v8 = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0x10800408BF3291EuLL);
        atomic_store(1u, v8);
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = 0;
        *((_BYTE *)v8 + 40) = v11;
        *((_QWORD *)v8 + 3) = 0;
        *((_QWORD *)v8 + 4) = v12;
        *(_QWORD *)(v6 + 8 * v4) = v8;
      }
    }
    else
    {
      if (v7 >= v10)
        v7 = 1 << v9;
      if (*(_BYTE *)(a1 + 29))
        v5 = 1 << v9;
      else
        v5 = v7;
      *(_DWORD *)(a1 + 24) = 1;
      if (!v8)
        goto LABEL_7;
    }
    if (!*((_QWORD *)v8 + 1))
      _initWindow(v8, (_DWORD **)a1, v4 << v9, v5, a2);
    ++v4;
  }
  while (v4 != 512);
  v7 = *(_QWORD *)(a1 + 8);
LABEL_19:
  if (v7 <= 1 << *(_BYTE *)(a1 + 40) && *(int *)(a1 + 24) >= 2)
  {
    v21 = __si_assert_copy_extra(0);
    v14 = v21;
    v22 = "";
    if (v21)
      v22 = v21;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 461, "windows->_size>(1ull<<windows->offset_shift) || windows->count <= 1", v22);
    goto LABEL_25;
  }
}

char *__si_assert_copy_extra(_DWORD *a1)
{
  const char *v2;
  char *v3;
  const char *v4;
  const char *v5;
  char *v7;
  char v8[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  bzero(v8, 0x400uLL);
  if (!a1 || (v2 = fd_realpath(a1, v8)) == 0)
  {
    v3 = getcwd(v8, 0x400uLL);
    if (v3)
      v2 = v3;
    else
      v2 = "";
  }
  v7 = 0;
  v4 = (const char *)pthread_getspecific(__THREAD_STR_DATA_KEY);
  if (v4)
    v5 = v4;
  else
    v5 = "";
  asprintf(&v7, "%s %s", v2, v5);
  return v7;
}

void __message_assert(char *a1, ...)
{
  xpc_object_t v1;
  xpc_object_t v2;
  char *string[2];
  xpc_object_t values;
  _BYTE keys[24];
  uint64_t v6;
  va_list va;

  va_start(va, a1);
  v6 = *MEMORY[0x1E0C80C00];
  string[0] = 0;
  va_copy((va_list)&string[1], va);
  vasprintf(string, a1, va);
  SISetCrashCStr(string[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)keys = 136315138;
    *(char **)&keys[4] = string[0];
    _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%s", keys, 0xCu);
  }
  *(_QWORD *)keys = "crash_string";
  v1 = xpc_string_create(string[0]);
  values = v1;
  v2 = xpc_dictionary_create((const char *const *)keys, &values, 1uLL);
  analytics_send_event();
  xpc_release(v2);
  xpc_release(v1);
  free(string[0]);
}

{
  void *v1[2];
  uint8_t buf[4];
  void *v3;
  uint64_t v4;
  va_list va;

  va_start(va, a1);
  v4 = *MEMORY[0x1E0C80C00];
  v1[0] = 0;
  va_copy((va_list)&v1[1], va);
  vasprintf((char **)v1, a1, va);
  SISetCrashCStr((const char *)v1[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v3 = v1[0];
    _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }
  free(v1[0]);
}

double _initWindow(_QWORD *a1, _DWORD **a2, unint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v10;
  uint64_t v11;
  double result;
  int v13;
  _DWORD *v14;
  char *v15;
  char *v16;
  const char *v17;
  char *v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  const char *v27;
  uint64_t v28;

  v5 = a1[2];
  if (v5)
    v6 = v5 == a3;
  else
    v6 = 1;
  if (!v6 || a1[1])
  {
    v15 = __si_assert_copy_extra(0);
    v16 = v15;
    v17 = "";
    if (v15)
      v17 = v15;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 373, "(window->mappedStart==0||window->mappedStart==mapStart)&&window->mappedMemory==((void *)0)", v17);
LABEL_28:
    free(v16);
    if (__valid_fs(-1))
      v24 = 2989;
    else
      v24 = 3072;
    *(_DWORD *)v24 = -559038737;
    abort();
  }
  if (*((_BYTE *)a2 + 29) && !((a4 - a3) >> *((_BYTE *)a2 + 40)))
  {
    v22 = __si_assert_copy_extra(0);
    v16 = v22;
    v23 = "";
    if (v22)
      v23 = v22;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 375, "(1ull<<parentWindows->offset_shift) <= mapEnd-mapStart", v23);
    goto LABEL_28;
  }
  a1[2] = a3;
  if ((unint64_t)a2[1] < a3)
  {
    v18 = __si_assert_copy_extra(0);
    v19 = v18;
    v20 = "";
    if (v18)
      v20 = v18;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 379, "mapStart <= parentWindows->_size", v20);
    free(v19);
    if (__valid_fs(-1))
      v21 = 2989;
    else
      v21 = 3072;
    *(_DWORD *)v21 = -559038737;
    abort();
  }
  v10 = *MEMORY[0x1E0C85AD8];
  if (*MEMORY[0x1E0C85AD8] <= ((*MEMORY[0x1E0C85AD8] + ((a4 - a3) >> 5) - 1) & -*MEMORY[0x1E0C85AD8]))
    v10 = (*MEMORY[0x1E0C85AD8] + ((a4 - a3) >> 5) - 1) & -*MEMORY[0x1E0C85AD8];
  a1[3] = v10 + a4;
  v11 = fd_mmap((uint64_t)*a2);
  a1[1] = v11;
  if (v11 == -1)
  {
    v13 = *__error();
    a1[1] = 0;
    if (a5)
    {
      if (v13 != 1)
      {
        v14 = mmap(0, 4uLL, 0, 4098, -50331648, 0);
        a1[1] = v14;
        if (v14 == (_DWORD *)-1)
        {
          v25 = __si_assert_copy_extra(*a2);
          v26 = v25;
          v27 = "";
          if (v25)
            v27 = v25;
          __message_assert("%s:%u: failed assertion '%s' %s mmap(%p, offset: %llx, size: %lld) error:%d, fSize:%lld", "storage_window.c", 400, "false", v27, a2, 0, a1[3] - a1[2], v13, a2[2]);
          free(v26);
          if (__valid_fsp(*a2))
            v28 = 2989;
          else
            v28 = 3072;
          *(_DWORD *)v28 = -559038737;
          abort();
        }
        result = 0.0;
        *((_OWORD *)a1 + 1) = xmmword_1B8631B50;
        *v14 = 1;
      }
    }
  }
  return result;
}

uint64_t _windowsGetPtr(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t result;

  v3 = a2 >> *(_BYTE *)(a1 + 40);
  if (v3 >= *(int *)(a1 + 24))
    return 0;
  v5 = *(_QWORD **)(a1 + 8 * v3 + 48);
  if (!v5)
    return 0;
  v6 = v5[1];
  if ((unint64_t)(v6 + 1) < 2)
    return 0;
  v7 = v5[2];
  v8 = a2 >= v7;
  v9 = a2 - v7;
  if (!v8)
    return 0;
  result = 0;
  if (a3 + a2 <= *(_QWORD *)(a1 + 8) && v5[3] >= a3 + a2)
    return v6 + v9;
  return result;
}

char *_moveWindows(uint64_t *a1, unint64_t a2, unint64_t a3, int a4, __n128 a5, __n128 a6)
{
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  Class v13;
  Class v14;
  char *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  uint64_t *v25;
  unsigned int *v26;
  int v27;
  char v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  char v40;
  unint64_t v41;
  unsigned int *v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  char v49;
  unsigned int *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t *v60;
  int *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  objc_class *isa;
  unint64_t *v73;
  uint64_t v74;
  Class v75;
  Class v76;
  _QWORD *v77;
  unint64_t v78;
  char v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  os_log_t v87;
  NSObject *v88;
  int v89;
  uint64_t v90;
  NSObject *v91;
  int v92;
  _QWORD *v93;
  char v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  Class v100;
  Class v101;
  char *v102;
  NSObject *v103;
  const char *v104;
  int v105;
  char *v106;
  char *v107;
  const char *v108;
  uint64_t v109;
  int v110;
  int v111;
  NSObject *v112;
  objc_class *v113;
  uint64_t v115;
  char *v116;
  char *v117;
  const char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  const char *v122;
  uint64_t v123;
  char *v124;
  const char *v125;
  char *v126;
  const char *v127;
  char *v128;
  const char *v129;
  char *v130;
  const char *v131;
  char *v132;
  const char *v133;
  char *v134;
  const char *v135;
  char *v136;
  const char *v137;
  char *v138;
  char *v139;
  const char *v140;
  uint64_t v141;
  NSObject *v142;
  NSObject *log;
  os_log_t loga;
  int v145;
  os_log_t v146;
  int v147;
  NSObject *v148;
  __n128 v149;
  __n128 v150;
  os_log_t v151;
  os_log_t v152;
  os_log_t v153;
  char v154;
  os_log_t v155;
  int v156;
  os_log_t v157;
  NSObject *v158;
  int v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t *v164;
  unint64_t v165;
  uint64_t *v166;
  int v167;
  NSObject *v168;
  os_log_t v169;
  os_unfair_lock_s *v170;
  NSObject *v171;
  uint64_t v172;
  uint8_t buf[4];
  const char *v174;
  __int16 v175;
  _BYTE v176[40];
  _BYTE v177[10];
  unint64_t v178;
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  a5.n128_u64[0] = 134217984;
  a6.n128_u64[0] = 134219520;
  while (1)
  {
    v10 = a3 + a2;
    if (!a2)
      goto LABEL_4;
LABEL_3:
    if (a1[2] <= a2)
    {
      v106 = __si_assert_copy_extra((_DWORD *)*a1);
      v107 = v106;
      v108 = "";
      if (v106)
        v108 = v106;
      __message_assert("%s:%u: failed assertion '%s' %s offset: 0x%llx, freeRegion: 0x%llx", "storage_window.c", 471, "inOffset==0 || inOffset < windows->_freeRegion", v108, a2, a1[2]);
      free(v107);
      if (__valid_fsp((_DWORD *)*a1))
        v109 = 2989;
      else
        v109 = 3072;
      *(_DWORD *)v109 = -559038737;
      abort();
    }
    while (1)
    {
LABEL_4:
      v11 = a2 >> *((_BYTE *)a1 + 40);
      if (v11 < *((int *)a1 + 6))
      {
        v12 = (_QWORD *)a1[v11 + 6];
        if (v12)
        {
          v13 = (Class)v12[1];
          if ((unint64_t)v13 + 1 >= 2)
          {
            v14 = (Class)v12[2];
            if ((unint64_t)v14 <= a2 && v12[3] >= v10)
              return (char *)v13 + a2 - (_QWORD)v14;
          }
        }
      }
      v149 = a6;
      v150 = a5;
      v15 = CICleanUpThreadLoc();
      v16 = a1[1];
      v17 = *((unsigned __int8 *)a1 + 40);
      v18 = 1 << v17;
      if (v16 <= 1 << v17 && *((int *)a1 + 6) >= 2)
      {
        v116 = __si_assert_copy_extra(0);
        v117 = v116;
        v118 = "";
        if (v116)
          v118 = v116;
        __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 518, "windows->_size>(1ull<<windows->offset_shift) || windows->count <= 1", v118);
        goto LABEL_171;
      }
      v165 = (*MEMORY[0x1E0C85AD8] + v16) & ~*MEMORY[0x1E0C85AC0];
      v172 = (uint64_t)v15;
      if (v165 <= v18 && !*((_BYTE *)a1 + 29))
      {
        if (dword_1EF19FCB4 >= 5)
        {
          v105 = *__error();
          v171 = _SILogForLogForCategory(10);
          if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = v150.n128_u32[0];
            v174 = (const char *)v11;
            _os_log_impl(&dword_1B8270000, v171, OS_LOG_TYPE_DEFAULT, "00: %lld", buf, 0xCu);
          }
          *__error() = v105;
        }
        os_unfair_lock_lock((os_unfair_lock_t)&windowLock);
        CIOnThreadCleanUpPush(v172, (uint64_t)MEMORY[0x1E0C849B0], (uint64_t)&windowLock);
        v42 = (unsigned int *)a1[6];
        if (*((_DWORD *)a1 + 6))
        {
          if (!v42)
            goto LABEL_78;
LABEL_75:
          v59 = (void *)*((_QWORD *)v42 + 1);
          if ((unint64_t)v59 + 1 < 2)
          {
LABEL_78:
            v47 = v172;
            goto LABEL_79;
          }
          if (!*((_BYTE *)a1 + 29))
          {
            storage_window_munmap(*((_QWORD *)v42 + 4), v59, *((_QWORD *)v42 + 3) - *((_QWORD *)v42 + 2));
            *((_QWORD *)v42 + 1) = 0;
            goto LABEL_78;
          }
          v130 = __si_assert_copy_extra(0);
          v121 = v130;
          v131 = "";
          if (v130)
            v131 = v130;
          __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 562, "!windows->stableMappings", v131);
        }
        else
        {
          if (v42)
          {
            v48 = 0;
          }
          else
          {
            v49 = *((_BYTE *)a1 + 28);
            v169 = (os_log_t)a1[4];
            v50 = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0x10800408BF3291EuLL);
            atomic_store(1u, v50);
            *((_QWORD *)v50 + 1) = 0;
            *((_QWORD *)v50 + 2) = 0;
            *((_BYTE *)v50 + 40) = v49;
            v42 = v50;
            *((_QWORD *)v50 + 3) = 0;
            *((_QWORD *)v50 + 4) = v169;
            v48 = *((_DWORD *)a1 + 6);
          }
          v51 = *((_BYTE *)a1 + 40);
          v52 = (uint64_t)v48 << v51;
          *((_QWORD *)v42 + 2) = v52;
          if (v52 > a1[1])
          {
            v128 = __si_assert_copy_extra(0);
            v121 = v128;
            v129 = "";
            if (v128)
              v129 = v128;
            __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 532, "window->mappedStart <= windows->_size", v129);
          }
          else
          {
            v53 = *MEMORY[0x1E0C85AD8];
            v54 = *MEMORY[0x1E0C85AD8] - 1;
            v55 = -*MEMORY[0x1E0C85AD8];
            v56 = (v54 + ((unint64_t)(1 << v51) >> 5)) & v55;
            if (*MEMORY[0x1E0C85AD8] > v56)
              v56 = *MEMORY[0x1E0C85AD8];
            v57 = v56 + (1 << v51);
            *((_QWORD *)v42 + 3) = v57;
            *((_QWORD *)v42 + 1) = 0;
            if (!*((_BYTE *)a1 + 29) || (*(_QWORD *)(a1[6] + 24) - *(_QWORD *)(a1[6] + 16)) >> v51)
            {
              v58 = (v54 + ((v57 - v52) >> 5)) & v55;
              if (v53 > v58)
                v58 = v53;
              *((_QWORD *)v42 + 3) = v58 + v57;
              OSMemoryBarrier();
              a1[6] = (uint64_t)v42;
              ++*((_DWORD *)a1 + 6);
              goto LABEL_75;
            }
            v132 = __si_assert_copy_extra(0);
            v121 = v132;
            v133 = "";
            if (v132)
              v133 = v132;
            __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 538, "(1ull<<windows->offset_shift) <= windows->windows[0]->mappedEnd-windows->windows[0]->mappedStart", v133);
          }
        }
LABEL_176:
        free(v121);
        if (__valid_fs(-1))
          v123 = 2989;
        else
          v123 = 3072;
        *(_DWORD *)v123 = -559038737;
        abort();
      }
      v19 = *((_DWORD *)a1 + 6);
      if (v16 <= v18 && v19 >= 2)
      {
        v120 = __si_assert_copy_extra(0);
        v121 = v120;
        v122 = "";
        if (v120)
          v122 = v120;
        __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 577, "windows->_size>(1ull<<windows->offset_shift) || windows->count <= 1", v122);
        goto LABEL_176;
      }
      if (v11 >= v19)
      {
        if (dword_1EF19FCB4 >= 5)
        {
          v39 = *__error();
          v168 = _SILogForLogForCategory(10);
          if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = v150.n128_u32[0];
            v174 = (const char *)v11;
            _os_log_impl(&dword_1B8270000, v168, OS_LOG_TYPE_DEFAULT, "1: %lld", buf, 0xCu);
          }
          *__error() = v39;
          v16 = a1[1];
          v17 = *((unsigned __int8 *)a1 + 40);
        }
        if (v16 <= (v17 > 1))
        {
          v134 = __si_assert_copy_extra(0);
          v117 = v134;
          v135 = "";
          if (v134)
            v135 = v134;
          __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 639, "windows->_size > (1<windows->offset_shift)", v135);
        }
        else
        {
          v24 = *((_DWORD *)a1 + 6);
          if (v16 > 1 << v17 || v24 < 2)
          {
            v161 = v24;
            if (v11 < v24)
              goto LABEL_80;
            v167 = *((_DWORD *)a1 + 6);
            while (1)
            {
              storage_windows_pushLock(v172, v161);
              if (v167 != *((_DWORD *)a1 + 6))
                goto LABEL_25;
              v25 = &a1[v161];
              v26 = (unsigned int *)v25[6];
              v162 = v25 + 6;
              v27 = v167;
              if (!v26)
              {
                v28 = *((_BYTE *)a1 + 28);
                v152 = (os_log_t)a1[4];
                v26 = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0x10800408BF3291EuLL);
                atomic_store(1u, v26);
                *((_QWORD *)v26 + 1) = 0;
                *((_QWORD *)v26 + 2) = 0;
                *((_BYTE *)v26 + 40) = v28;
                *((_QWORD *)v26 + 3) = 0;
                *((_QWORD *)v26 + 4) = v152;
                *v162 = (uint64_t)v26;
                v27 = *((_DWORD *)a1 + 6);
              }
              v29 = *((_BYTE *)a1 + 40);
              v30 = (uint64_t)v27 << v29;
              v31 = 1 << v29;
              v32 = (uint64_t)(v167 + 1) << v29;
              v33 = *MEMORY[0x1E0C85AD8];
              v34 = *MEMORY[0x1E0C85AD8] - 1;
              v35 = -*MEMORY[0x1E0C85AD8];
              v36 = (v34 + (v31 >> 5)) & v35;
              if (*MEMORY[0x1E0C85AD8] > v36)
                v36 = *MEMORY[0x1E0C85AD8];
              *((_QWORD *)v26 + 2) = v30;
              *((_QWORD *)v26 + 3) = v36 + v32;
              *((_QWORD *)v26 + 1) = 0;
              v37 = *(_QWORD *)(*v162 + 24);
              if (v33 <= ((v34 + ((unint64_t)(v37 - *(_QWORD *)(*v162 + 16)) >> 5)) & v35))
                v33 = (v34 + ((unint64_t)(v37 - *(_QWORD *)(*v162 + 16)) >> 5)) & v35;
              *(_QWORD *)(*v162 + 24) = v33 + v37;
              v38 = v27 + 1;
              *((_DWORD *)a1 + 6) = v27 + 1;
              CIOnThreadCleanUpPop(v172);
              v161 = v38;
              v167 = v38;
              if (v11 < v38)
                goto LABEL_80;
            }
          }
          v136 = __si_assert_copy_extra(0);
          v117 = v136;
          v137 = "";
          if (v136)
            v137 = v136;
          __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 640, "windows->_size>(1ull<<windows->offset_shift) || windows->count <= 1", v137);
        }
LABEL_171:
        free(v117);
        if (__valid_fs(-1))
          v119 = 2989;
        else
          v119 = 3072;
        *(_DWORD *)v119 = -559038737;
        abort();
      }
      v20 = &a1[v11];
      v21 = (_QWORD *)v20[6];
      v166 = v20 + 6;
      if (v21)
      {
        v151 = (os_log_t)v21[1];
        v21 = (_QWORD *)(v21[3] - v21[2]);
      }
      else
      {
        v151 = 0;
      }
      v160 = (unint64_t)v21;
      if (dword_1EF19FCB4 >= 5)
      {
        v145 = *__error();
        log = _SILogForLogForCategory(10);
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v150.n128_u32[0];
          v174 = (const char *)v11;
          _os_log_impl(&dword_1B8270000, log, OS_LOG_TYPE_DEFAULT, "0: %lld", buf, 0xCu);
        }
        *__error() = v145;
      }
      os_unfair_lock_lock((os_unfair_lock_t)&windowLock + v11);
      CIOnThreadCleanUpPush(v172, (uint64_t)MEMORY[0x1E0C849B0], (uint64_t)&windowLock + 4 * v11);
      v22 = *v166;
      if (!*v166)
        goto LABEL_54;
      v23 = *(NSObject **)(v22 + 8);
      if ((unint64_t)&v23->isa + 1 < 2)
      {
        v40 = *((_BYTE *)a1 + 40);
        v41 = *(_QWORD *)(v22 + 16);
        goto LABEL_55;
      }
      if (v160 == *(_QWORD *)(v22 + 24) - *(_QWORD *)(v22 + 16) && !(v160 >> *((_BYTE *)a1 + 40)) && v151 == v23)
        break;
LABEL_25:
      CIOnThreadCleanUpPop(v172);
      a6 = v149;
      a5 = v150;
      if (a2)
        goto LABEL_3;
    }
    storageWindowRelease(v166);
LABEL_54:
    v43 = *((_BYTE *)a1 + 28);
    v163 = a1[4];
    v22 = (uint64_t)malloc_type_calloc(1uLL, 0x30uLL, 0x10800408BF3291EuLL);
    atomic_store(1u, (unsigned int *)v22);
    *(_QWORD *)(v22 + 8) = 0;
    *(_QWORD *)(v22 + 16) = 0;
    *(_BYTE *)(v22 + 40) = v43;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)(v22 + 32) = v163;
    *v166 = v22;
    v40 = *((_BYTE *)a1 + 40);
    v41 = v11 << v40;
    *(_QWORD *)(v22 + 16) = v11 << v40;
LABEL_55:
    v44 = (v11 + 1) << v40;
    v45 = (*MEMORY[0x1E0C85AD8] + ((v44 - v41) >> 5) - 1) & -*MEMORY[0x1E0C85AD8];
    if (*MEMORY[0x1E0C85AD8] > v45)
      v45 = *MEMORY[0x1E0C85AD8];
    v46 = v45 + v44;
    *(_QWORD *)(v22 + 24) = v46;
    v47 = v172;
    if (v46 <= a2)
    {
      v124 = __si_assert_copy_extra(0);
      v121 = v124;
      v125 = "";
      if (v124)
        v125 = v124;
      __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 623, "window->mappedEnd > inOffset", v125);
      goto LABEL_176;
    }
    if (a4)
    {
      if (v46 < v10)
      {
        v126 = __si_assert_copy_extra(0);
        v121 = v126;
        v127 = "";
        if (v126)
          v127 = v126;
        __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 625, "window->mappedEnd >= inOffset +inSize", v127);
        goto LABEL_176;
      }
    }
    else
    {
      if (v46 < v10)
        a3 = v46 - a2;
      v10 = a3 + a2;
    }
LABEL_79:
    CIOnThreadCleanUpPop(v47);
LABEL_80:
    loga = (os_log_t)(v11 + 1);
    v60 = &a1[v11 + 6];
    v170 = (os_unfair_lock_s *)((char *)&windowLock + 4 * v11);
    v61 = (int *)&unk_1EF19F000;
    v164 = v60;
LABEL_81:
    if (v11 >= *((int *)a1 + 6))
    {
      v156 = *__error();
      v91 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = v150.n128_u32[0];
        v174 = (const char *)v11;
        _os_log_impl(&dword_1B8270000, v91, OS_LOG_TYPE_DEFAULT, "3: %lld", buf, 0xCu);
      }
      *__error() = v156;
      v92 = *((_DWORD *)a1 + 6);
      if (v11 >= v92)
      {
        v157 = (os_log_t)v92;
        do
        {
          os_unfair_lock_lock((os_unfair_lock_t)&windowLock + (_QWORD)v157);
          CIOnThreadCleanUpPush(v172, (uint64_t)MEMORY[0x1E0C849B0], (uint64_t)&windowLock + 4 * (_QWORD)v157);
          if (v92 == *((_DWORD *)a1 + 6))
          {
            v93 = (_QWORD *)a1[(_QWORD)v157 + 6];
            v94 = *((_BYTE *)a1 + 40);
            v95 = (*MEMORY[0x1E0C85AD8] + ((unint64_t)(1 << v94) >> 5) - 1) & -*MEMORY[0x1E0C85AD8];
            v96 = v11 << v94;
            v97 = (_QWORD)loga << v94;
            if (*MEMORY[0x1E0C85AD8] > v95)
              v95 = *MEMORY[0x1E0C85AD8];
            v93[2] = v96;
            v93[3] = v95 + v97;
            v93[1] = 0;
            *((_DWORD *)a1 + 6) = v92 + 1;
          }
          CIOnThreadCleanUpPop(v172);
          v92 = *((_DWORD *)a1 + 6);
          v157 = (os_log_t)v92;
        }
        while (v11 >= v92);
      }
      v155 = (os_log_t)*v164;
      if (!*(_QWORD *)(*v164 + 16))
        v155[2].isa = (Class)(v11 << *((_BYTE *)a1 + 40));
      goto LABEL_124;
    }
    if (v61[813] >= 5)
    {
      v98 = *__error();
      v158 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = v150.n128_u32[0];
        v174 = (const char *)v11;
        _os_log_impl(&dword_1B8270000, v158, OS_LOG_TYPE_DEFAULT, "2: %lld", buf, 0xCu);
      }
      *__error() = v98;
      v60 = &a1[v11 + 6];
    }
    v62 = (_QWORD *)*v60;
    if (*v60)
    {
      v13 = (Class)v62[1];
      if ((unint64_t)v13 + 1 >= 2)
      {
        v14 = (Class)v62[2];
        if ((unint64_t)v14 <= a2 && v62[3] >= v10 && a1[1] >= v10)
          return (char *)v13 + a2 - (_QWORD)v14;
      }
      v153 = (os_log_t)(v62[3] - v62[2]);
    }
    else
    {
      v153 = 0;
      v13 = 0;
    }
    os_unfair_lock_lock(v170);
    CIOnThreadCleanUpPush(v172, (uint64_t)MEMORY[0x1E0C849B0], (uint64_t)v170);
    v70 = (uint64_t)&a1[v11 + 6];
    v71 = *v164;
    if (!*v164)
      goto LABEL_105;
    isa = v71[1].isa;
    if ((unint64_t)isa + 1 < 2)
    {
      v73 = (unint64_t *)MEMORY[0x1E0C85AD8];
      if (v11)
      {
        v74 = v172;
        if (!v71[2].isa)
          v71[2].isa = (Class)(v11 << *((_BYTE *)a1 + 40));
      }
      else
      {
        v74 = v172;
      }
      goto LABEL_109;
    }
    v76 = v71[2].isa;
    v75 = v71[3].isa;
    if (v153 == (os_log_t)(v75 - v76)
      && !((unint64_t)v153 >> *((_BYTE *)a1 + 40))
      && v13 == isa
      && ((unint64_t)v76 > a2 || (unint64_t)v75 < v10 || a1[1] < v10))
    {
      break;
    }
    CIOnThreadCleanUpPop(v172);
    a6 = v149;
    a5 = v150;
  }
  if (*((_BYTE *)a1 + 29))
    si_analytics_log((uint64_t)v71, v63, v64, v65, v66, v67, v68, v69, (char)v71);
  storageWindowRelease(v164);
  v70 = (uint64_t)&a1[v11 + 6];
LABEL_105:
  v154 = *((_BYTE *)a1 + 28);
  v146 = (os_log_t)a1[4];
  v77 = (_QWORD *)v70;
  v71 = malloc_type_calloc(1uLL, 0x30uLL, 0x10800408BF3291EuLL);
  atomic_store(1u, (unsigned int *)v71);
  v71[1].isa = 0;
  v71[2].isa = 0;
  LOBYTE(v71[5].isa) = v154;
  v71[3].isa = 0;
  v71[4].isa = (Class)v146;
  *v77 = v71;
  if (v11)
    v71[2].isa = (Class)(v11 << *((_BYTE *)a1 + 40));
  v74 = v172;
  v73 = (unint64_t *)MEMORY[0x1E0C85AD8];
LABEL_109:
  v78 = (unint64_t)v71[3].isa;
  if (v10 > v78)
  {
    v79 = *((_BYTE *)a1 + 40);
    v80 = 1 << v79;
    v81 = (_QWORD)loga << v79;
    v82 = (*v73 + (v80 >> 5) - 1) & -(uint64_t)*v73;
    if (*v73 > v82)
      v82 = *v73;
    v78 = v82 + v81;
    v71[3].isa = (Class)v78;
  }
  if (v78 > a1[1])
  {
    if (dword_1EF19FCB4 >= 5)
    {
      v103 = v71;
      v159 = *__error();
      v148 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
      {
        v104 = (const char *)v103[3].isa;
        *(_DWORD *)buf = v150.n128_u32[0];
        v174 = v104;
        _os_log_impl(&dword_1B8270000, v148, OS_LOG_TYPE_DEFAULT, "2.1: %lld", buf, 0xCu);
      }
      *__error() = v159;
      v74 = v172;
      v73 = (unint64_t *)MEMORY[0x1E0C85AD8];
      v71 = v103;
    }
    if (*((_BYTE *)a1 + 29))
    {
      v83 = *((_BYTE *)a1 + 40);
      v84 = 1 << v83;
      v85 = (_QWORD)loga << v83;
    }
    else
    {
      v84 = a1[1];
      v85 = v84;
    }
    v86 = (*v73 + (v84 >> 5) - 1) & -(uint64_t)*v73;
    if (*v73 > v86)
      v86 = *v73;
    v71[3].isa = (Class)(v86 + v85);
  }
  if (!v71[2].isa)
    v71[2].isa = (Class)(v11 << *((_BYTE *)a1 + 40));
  v155 = v71;
  CIOnThreadCleanUpPop(v74);
LABEL_124:
  os_unfair_lock_lock(v170);
  CIOnThreadCleanUpPush(v172, (uint64_t)MEMORY[0x1E0C849B0], (uint64_t)v170);
  v87 = v155;
  if (!v155[2].isa)
    v155[2].isa = (Class)(v11 << *((_BYTE *)a1 + 40));
  v87[1].isa = (Class)fd_mmap(*a1);
  v88 = v155 + 1;
  v89 = *__error();
  if (dword_1EF19FCB4 >= 5)
  {
    v147 = v89;
    v99 = *__error();
    v142 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
    {
      v100 = v155[1].isa;
      v101 = v155[2].isa;
      v102 = (char *)(v155[3].isa - v101);
      *(_DWORD *)buf = v149.n128_u32[0];
      v174 = (const char *)a1;
      v175 = 2048;
      *(_QWORD *)v176 = v155;
      *(_WORD *)&v176[8] = 2048;
      *(_QWORD *)&v176[10] = v100;
      *(_WORD *)&v176[18] = 2048;
      *(_QWORD *)&v176[20] = v101;
      *(_WORD *)&v176[28] = 2048;
      *(_QWORD *)&v176[30] = v102;
      *(_WORD *)&v176[38] = 2048;
      *(_QWORD *)v177 = a2;
      *(_WORD *)&v177[8] = 2048;
      v178 = v10;
      _os_log_impl(&dword_1B8270000, v142, OS_LOG_TYPE_DEFAULT, "mmap (%p/%p) %p 0x%llx-0x%llx (0x%llx-0x%llx)", buf, 0x48u);
    }
    *__error() = v99;
    v89 = v147;
    v88 = v155 + 1;
  }
  v90 = v172;
  if (v88->isa != (Class)-1)
    goto LABEL_166;
  v88->isa = 0;
  v88[1].isa = 0;
  v88[2].isa = 0;
  if (v89 == 12 && v165 >= 0x200000)
  {
    v165 >>= 1;
    CIOnThreadCleanUpPop(v172);
    v61 = (_DWORD *)&unk_1EF19F000;
    v60 = &a1[v11 + 6];
    goto LABEL_81;
  }
  if (v89)
  {
    v110 = v89;
    v111 = *__error();
    v112 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
    {
      v115 = a1[2];
      *(_DWORD *)buf = 136316674;
      v174 = "_moveWindows";
      v175 = 1024;
      *(_DWORD *)v176 = 868;
      *(_WORD *)&v176[4] = 2048;
      *(_QWORD *)&v176[6] = a1;
      *(_WORD *)&v176[14] = 2048;
      *(_QWORD *)&v176[16] = a2;
      *(_WORD *)&v176[24] = 2048;
      *(_QWORD *)&v176[26] = a3;
      *(_WORD *)&v176[34] = 1024;
      *(_DWORD *)&v176[36] = v110;
      *(_WORD *)v177 = 2048;
      *(_QWORD *)&v177[2] = v115;
      _os_log_error_impl(&dword_1B8270000, v112, OS_LOG_TYPE_ERROR, "%s:%d: mmap(%p, offset: %llx, size: %ld) error:%d, fSize:%lld", buf, 0x40u);
    }
    *__error() = v111;
    v113 = (objc_class *)mmap(0, 4uLL, 0, 4098, -50331648, 0);
    v88->isa = v113;
    if (v113 == (objc_class *)-1)
    {
      v138 = __si_assert_copy_extra((_DWORD *)*a1);
      v139 = v138;
      v140 = "";
      if (v138)
        v140 = v138;
      __message_assert("%s:%u: failed assertion '%s' %s mmap(%p, offset: %llx, size: %ld) error:%d, fSize:%lld", "storage_window.c", 879, "false", v140, a1, a2, a3, v110, a1[2]);
      free(v139);
      if (__valid_fsp((_DWORD *)*a1))
        v141 = 2989;
      else
        v141 = 3072;
      *(_DWORD *)v141 = -559038737;
      abort();
    }
    *(_OWORD *)&v155[2].isa = xmmword_1B8631B50;
    *(_DWORD *)v113 = 1;
    v90 = v172;
  }
LABEL_166:
  CIOnThreadCleanUpPop(v90);
  v13 = v155[1].isa;
  v14 = v155[2].isa;
  return (char *)v13 + a2 - (_QWORD)v14;
}

uint64_t storage_windows_pushLock(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v3;

  v3 = (os_unfair_lock_s *)((char *)&windowLock + 4 * a2);
  os_unfair_lock_lock(v3);
  return CIOnThreadCleanUpPush(a1, (uint64_t)MEMORY[0x1E0C849B0], (uint64_t)v3);
}

void si_analytics_log(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  xpc_object_t v9;
  xpc_object_t v10;
  char *string[2];
  xpc_object_t values;
  _BYTE keys[24];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  string[0] = 0;
  string[1] = &a9;
  vasprintf(string, "Deallocating window for stable mapping %p (%p %lld %lld) (%lld  %zu)", &a9);
  SISetCrashCStr(string[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)keys = 136315138;
    *(char **)&keys[4] = string[0];
    _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "%s", keys, 0xCu);
  }
  *(_QWORD *)keys = "crash_string";
  v9 = xpc_string_create(string[0]);
  values = v9;
  v10 = xpc_dictionary_create((const char *const *)keys, &values, 1uLL);
  analytics_send_event();
  xpc_release(v10);
  xpc_release(v9);
  free(string[0]);
}

unint64_t _windowsResolvePtr(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t result;
  __n128 v9;
  __n128 v10;
  char *v11;
  char *v12;
  const char *v13;
  char *v14;
  BOOL v15;
  int v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  const char *v22;
  uint64_t v23;

  v6 = a2 >> *(_BYTE *)(a1 + 40);
  if (v6 < *(int *)(a1 + 24))
  {
    v7 = *(_QWORD **)(a1 + 8 * v6 + 48);
    if (v7)
    {
      if (v7[2] <= a2 && v7[3] >= a3 + a2 && *(_QWORD *)(a1 + 8) >= a3 + a2 && !v7[1])
      {
        v14 = CICleanUpThreadLoc();
        storage_windows_pushLock((uint64_t)v14, v6);
        if (!v7[1])
        {
          if (a2)
            v15 = 0;
          else
            v15 = a3 == 1;
          v16 = !v15;
          _windowsMapInit(a1, v16);
        }
        CIOnThreadCleanUpPop((uint64_t)v14);
      }
    }
  }
  result = _windowsGetPtr(a1, a2, a3);
  if (result)
  {
    if (result == a2)
    {
      v17 = __si_assert_copy_extra(0);
      v12 = v17;
      v18 = "";
      if (v17)
        v18 = v17;
      __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 930, "(offset_t)(intptr_t)ptr !=inOffset", v18);
LABEL_27:
      free(v12);
      if (__valid_fs(-1))
        v19 = 2989;
      else
        v19 = 3072;
      *(_DWORD *)v19 = -559038737;
      abort();
    }
    if (*MEMORY[0x1E0C85AD8] >= result)
    {
      v11 = __si_assert_copy_extra(0);
      v12 = v11;
      v13 = "";
      if (v11)
        v13 = v11;
      __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 935, "vm_page_size < (uintptr_t)ptr", v13);
      goto LABEL_27;
    }
  }
  else
  {
    result = (unint64_t)_moveWindows((uint64_t *)a1, a2, a3, 1, v9, v10);
    if (*MEMORY[0x1E0C85AD8] >= result)
    {
      v20 = __si_assert_copy_extra(0);
      v21 = v20;
      v22 = "";
      if (v20)
        v22 = v20;
      __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 940, "vm_page_size < (uintptr_t)ptr", v22);
      free(v21);
      if (__valid_fs(-1))
        v23 = 2989;
      else
        v23 = 3072;
      *(_DWORD *)v23 = -559038737;
      abort();
    }
  }
  return result;
}

uint64_t _storageWindowsExpandBacking(_DWORD **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  const char *v22;
  int v23;
  int v24;
  NSObject *v25;
  int *v26;
  uint64_t result;
  const char *v28;
  const char *v29;
  int v30;
  char *v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  uint8_t v39[4];
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t)a1[1];
  v4 = 1 << *((_BYTE *)a1 + 40);
  if (v3 <= v4 && *((int *)a1 + 6) >= 2)
  {
    v31 = __si_assert_copy_extra(0);
    v32 = v31;
    v33 = "";
    if (v31)
      v33 = v31;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 951, "windows->_size>(1ull<<windows->offset_shift) || windows->count <= 1", v33);
    free(v32);
    if (__valid_fs(-1))
      v34 = 2989;
    else
      v34 = 3072;
    *(_DWORD *)v34 = -559038737;
    abort();
  }
  v5 = (char *)a1[2] + a2;
  if (v3 >> 30)
  {
    if ((unint64_t)(v5 + 1) > v3 + 0x40000000)
      v6 = v5 + 1;
    else
      v6 = (char *)(v3 + 0x40000000);
    v7 = ((unint64_t)&v6[~v3] & 0xFFFFFFFFC0000000) + 0x40000000;
  }
  else
  {
    v8 = 4096;
    if (v3)
      v8 = (uint64_t)a1[1];
    do
    {
      v7 = v8;
      v9 = v8 + v3;
      v8 *= 2;
    }
    while ((unint64_t)v5 >= v9);
  }
  LODWORD(v10) = *((_DWORD *)a1 + 6);
  if ((_DWORD)v10)
  {
    v11 = a1[6];
    if (v11)
    {
      v12 = *((_QWORD *)v11 + 1);
      if ((int)v10 >= 1 && v12 != 0)
      {
        v14 = 0;
        do
        {
          storageWindowSync(a1[v14++ + 6], 1);
          v10 = *((int *)a1 + 6);
        }
        while (v14 < v10);
        v3 = (unint64_t)a1[1];
        v4 = 1 << *((_BYTE *)a1 + 40);
      }
    }
    if (v3 <= v4 && (int)v10 >= 2)
    {
      v35 = __si_assert_copy_extra(0);
      v36 = v35;
      v37 = "";
      if (v35)
        v37 = v35;
      __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 982, "windows->_size>(1ull<<windows->offset_shift) || windows->count <= 1", v37);
      free(v36);
      if (__valid_fs(-1))
        v38 = 2989;
      else
        v38 = 3072;
      *(_DWORD *)v38 = -559038737;
      abort();
    }
  }
  *__error() = 0;
  if (v7 && (v15 = (unint64_t)a1[1] + v7, v15 >= (unint64_t)v5))
  {
    v16 = "unknown";
    while (1)
    {
      v17 = (uint64_t)*a1;
      if (fd_truncate((uint64_t)*a1, v15) != -1)
      {
        a1[1] = (_DWORD *)v15;
        return 1;
      }
      v18 = *__error();
      v19 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v22 = v16;
        if (v17)
          v16 = (const char *)fd_name_ptr(v17);
        v23 = *__error();
        *(_DWORD *)buf = 136316162;
        v48 = "_storageWindowsExpandBacking";
        v49 = 1024;
        v50 = 996;
        v51 = 2080;
        v52 = (unint64_t)v16;
        v53 = 2048;
        v54 = v15;
        v55 = 1024;
        v56 = v23;
        _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: ftruncate %s (%lld) error:%d", buf, 0x2Cu);
        v16 = v22;
      }
      *__error() = v18;
      if (*__error() != 28)
        return 0;
      v20 = *__error();
      v21 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        v48 = "_storageWindowsExpandBacking";
        v49 = 1024;
        v50 = 999;
        v51 = 2048;
        v52 = v7 >> 1;
        _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: ftruncate(%lld) growing size", buf, 0x1Cu);
      }
      *__error() = v20;
      if (v7 >= 2)
      {
        v15 = (unint64_t)a1[1] + (v7 >> 1);
        v7 >>= 1;
        if (v15 >= (unint64_t)v5)
          continue;
      }
      goto LABEL_36;
    }
  }
  else
  {
LABEL_36:
    bzero(buf, 0x400uLL);
    v24 = *__error();
    v25 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v28 = fd_realpath(*a1, buf);
      if (v28)
        v29 = v28;
      else
        v29 = "";
      v30 = *__error();
      *(_DWORD *)v39 = 136315906;
      v40 = "_storageWindowsExpandBacking";
      v41 = 1024;
      v42 = 990;
      v43 = 2080;
      v44 = v29;
      v45 = 1024;
      v46 = v30;
      _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, "%s:%d: _storageExpand %s error:%d", v39, 0x22u);
    }
    v26 = __error();
    result = 0;
    *v26 = v24;
  }
  return result;
}

uint64_t _storageWindowsSetFileSize(_DWORD **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  off_t v5;
  int v6;
  NSObject *v7;
  BOOL v8;
  int v9;
  int v10;
  NSObject *v11;
  int *v12;
  uint64_t result;
  const char *v14;
  const char *v15;
  int v16;
  char *v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  uint8_t v21[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  off_t v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t)a1[1];
  if (v3 <= 1 << *((_BYTE *)a1 + 40) && *((int *)a1 + 6) >= 2)
  {
    v17 = __si_assert_copy_extra(0);
    v18 = v17;
    v19 = "";
    if (v17)
      v19 = v17;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage_window.c", 1017, "windows->_size>(1ull<<windows->offset_shift) || windows->count <= 1", v19);
    free(v18);
    if (__valid_fs(-1))
      v20 = 2989;
    else
      v20 = 3072;
    *(_DWORD *)v20 = -559038737;
    abort();
  }
  v4 = a2 - v3;
  *__error() = 0;
  if (v4)
  {
    v5 = (off_t)a1[1] + v4;
    while (fd_truncate((uint64_t)*a1, v5) == -1)
    {
      v6 = *__error();
      v7 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v9 = *__error();
        *(_DWORD *)buf = 136315906;
        v30 = "_storageWindowsSetFileSize";
        v31 = 1024;
        v32 = 1046;
        v33 = 2048;
        v34 = v5;
        v35 = 1024;
        v36 = v9;
        _os_log_error_impl(&dword_1B8270000, v7, OS_LOG_TYPE_ERROR, "%s:%d: ftruncate(%lld) error:%d", buf, 0x22u);
      }
      *__error() = v6;
      v5 = (off_t)a1[1] + (v4 >> 1);
      v8 = v4 > 1;
      v4 >>= 1;
      if (!v8)
        goto LABEL_9;
    }
    a1[1] = (_DWORD *)v5;
    return 1;
  }
  else
  {
LABEL_9:
    bzero(buf, 0x400uLL);
    v10 = *__error();
    v11 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v14 = fd_realpath(*a1, buf);
      if (v14)
        v15 = v14;
      else
        v15 = "";
      v16 = *__error();
      *(_DWORD *)v21 = 136315906;
      v22 = "_storageWindowsSetFileSize";
      v23 = 1024;
      v24 = 1042;
      v25 = 2080;
      v26 = v15;
      v27 = 1024;
      v28 = v16;
      _os_log_error_impl(&dword_1B8270000, v11, OS_LOG_TYPE_ERROR, "%s:%d: _storageExpand %s error:%d", v21, 0x22u);
    }
    v12 = __error();
    result = 0;
    *v12 = v10;
  }
  return result;
}

BOOL storage_windows_contains_address(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;

  v2 = *(unsigned int *)(a1 + 24);
  if ((int)v2 < 1)
  {
    return 0;
  }
  else
  {
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = *(_QWORD **)(a1 + 48 + 8 * v3);
      if (v5)
      {
        v6 = v5[1];
        v7 = !v6 || v6 > a2;
        if (!v7 && v5[3] + v6 - v5[2] >= a2)
          break;
      }
      v4 = ++v3 < v2;
    }
    while (v2 != v3);
  }
  return v4;
}

void _release_read_window(OSQueueHead *a1, unsigned int *a2)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t i;

  if (a2)
  {
    v4 = a2 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      for (i = 144; i != 1168; i += 2)
        storageWindowReleaseImmediate((uint64_t *)&a2[i]);
      OSAtomicEnqueue(a1, a2, 0);
    }
  }
}

BOOL setupReaderOwnedWindow(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  char v9;
  uint64_t v10;
  _BOOL8 v11;
  int v12;
  int v13;
  NSObject *v14;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v6 = a1;
  *(_BYTE *)(a2 + a1 + 12) = 1;
  v18 = 0;
  v7 = *(_QWORD *)(a3 + 32);
  v8 = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0x10800408BF3291EuLL);
  atomic_store(1u, v8);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_BYTE *)v8 + 40) = 1;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = v7;
  v18 = v8;
  v9 = *(_BYTE *)(a3 + 40);
  *((_QWORD *)v8 + 2) = v6 << v9;
  *((_QWORD *)v8 + 3) = (uint64_t)(a1 + 1) << v9;
  v10 = fd_mmap(*(_QWORD *)a3);
  *((_QWORD *)v8 + 1) = v10;
  v11 = v10 != -1;
  if (v10 == -1)
  {
    v12 = *__error();
    v13 = *__error();
    v14 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v16 = *((_QWORD *)v8 + 3) - *((_QWORD *)v8 + 2);
      v17 = *(_QWORD *)(a3 + 16);
      *(_DWORD *)buf = 136316674;
      v20 = "setupReaderOwnedWindow";
      v21 = 1024;
      v22 = 1171;
      v23 = 2048;
      v24 = a3;
      v25 = 2048;
      v26 = 0;
      v27 = 2048;
      v28 = v16;
      v29 = 1024;
      v30 = v12;
      v31 = 2048;
      v32 = v17;
      _os_log_error_impl(&dword_1B8270000, v14, OS_LOG_TYPE_ERROR, "%s:%d: mmap(%p, offset: %llx, size: %ld) error:%d, fSize:%lld", buf, 0x40u);
    }
    *__error() = v13;
    storageWindowRelease((uint64_t *)&v18);
  }
  else
  {
    __dmb(0xBu);
    *(_QWORD *)(a2 + 8 * v6 + 576) = v8;
  }
  return v11;
}

uint64_t _windowsAddressOffset(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 24);
  if ((int)v2 < 1)
    return -1;
  v3 = 6;
  do
  {
    v4 = *(_QWORD **)(a1 + 8 * v3);
    if (v4 && (v5 = v4[1], v5 + 1 >= 2) && v5 <= a2 && (v6 = v4[2], v5 - v6 + v4[3] > a2))
      v7 = a2 - v5 + v6;
    else
      v7 = -1;
    if (v3 - 5 >= v2)
      break;
    ++v3;
  }
  while (v7 == -1);
  return v7;
}

uint64_t allocateReaderWindowAtSlot(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  unsigned int *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  v8 = *a4;
  if (!*a4)
  {
    v9 = *(_BYTE *)(*(_QWORD *)a1 + 556);
    v10 = *(_QWORD *)(a2 + 32);
    v8 = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0x10800408BF3291EuLL);
    atomic_store(1u, v8);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *((_BYTE *)v8 + 40) = v9;
    *((_QWORD *)v8 + 3) = 0;
    *((_QWORD *)v8 + 4) = v10;
    *a4 = v8;
    *(_BYTE *)(*(_QWORD *)a1 + a3 + 12) = 1;
  }
  v11 = *(_QWORD *)(a2 + 8 * a3 + 48);
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 16);
    v13 = *(_QWORD *)(v11 + 24);
  }
  else
  {
    v12 = (1 << *(_BYTE *)(a2 + 40)) * a3;
    v13 = v12 + (1 << *(_BYTE *)(a2 + 40));
  }
  *((_QWORD *)v8 + 2) = v12;
  *((_QWORD *)v8 + 3) = v13;
  result = fd_mmap(*(_QWORD *)a2);
  *((_QWORD *)*a4 + 1) = result;
  __dmb(0xBu);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * a3 + 576) = *a4;
  *(_DWORD *)(*(_QWORD *)a1 + 552) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t compress_data_to_file(uint64_t a1, uint64_t a2, char *a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  int v11;
  CFNumberRef v12;
  uint64_t v13;
  CFDictionaryRef v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int valuePtr;
  void *keys;
  uint64_t v23;
  uint64_t v24;
  _BYTE values[24];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = 22;
  if (!a1)
    return v5;
  v6 = a2;
  if (!a2 || !a3)
    return v5;
  v10 = a1;
  v11 = a4;
  if (a4 == -1)
  {
    v11 = open(a3, 1537, 384);
    if (v11 == -1)
    {
      v5 = *__error();
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)values = 67109378;
        *(_DWORD *)&values[4] = v5;
        *(_WORD *)&values[8] = 2080;
        *(_QWORD *)&values[10] = a3;
        _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "open %d with %s", values, 0x12u);
      }
      return v5;
    }
  }
  if (a5)
  {
    valuePtr = 9;
    v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    *(_QWORD *)values = *MEMORY[0x1E0C9AE50];
    *(_QWORD *)&values[8] = v12;
    *(_QWORD *)&values[16] = *(_QWORD *)values;
    v13 = *MEMORY[0x1E0CFCE88];
    keys = (void *)*MEMORY[0x1E0CFCEA0];
    v23 = v13;
    v24 = *MEMORY[0x1E0CFCE98];
    v14 = CFDictionaryCreate(0, (const void **)&keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (v12)
      CFRelease(v12);
    if (!v14)
      goto LABEL_25;
  }
  else
  {
    *(_QWORD *)values = *MEMORY[0x1E0C9AE50];
    *(_QWORD *)&values[8] = *(_QWORD *)values;
    v15 = *MEMORY[0x1E0CFCE98];
    keys = (void *)*MEMORY[0x1E0CFCEA0];
    v23 = v15;
    v14 = CFDictionaryCreate(0, (const void **)&keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v14)
    {
LABEL_25:
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)values = 136315138;
        *(_QWORD *)&values[4] = a3;
        _os_log_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "no stream_compressor_queue for %s", values, 0xCu);
      }
      return 0;
    }
  }
  if (!CreateStreamCompressorQueueWithOptions())
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)values = 0;
      _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "CreateStreamCompressorQueueWithOptions failed", values, 2u);
    }
    CFRelease(v14);
    goto LABEL_25;
  }
  CFRelease(v14);
  if (CreateStreamCompressor())
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)values = 134218242;
      *(_QWORD *)&values[4] = v6;
      *(_WORD *)&values[12] = 2080;
      *(_QWORD *)&values[14] = a3;
      _os_log_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "compressing %ld bytes to %s", values, 0x16u);
    }
    v16 = MEMORY[0x1E0C81028];
    while (1)
    {
      v17 = WriteToStreamCompressor();
      if (v17 <= 0)
        break;
      v18 = v17;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)values = 134217984;
        *(_QWORD *)&values[4] = v18;
        _os_log_debug_impl(&dword_1B8270000, v16, OS_LOG_TYPE_DEBUG, "WriteToStreamCompressor wrote %lld bytes", values, 0xCu);
      }
      v10 += v18;
      v6 -= v18;
      if (!v6)
      {
        v5 = 0;
        goto LABEL_38;
      }
    }
    v19 = *__error();
    if (v19)
      v5 = v19;
    else
      v5 = 22;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)values = 67109378;
      *(_DWORD *)&values[4] = v5;
      *(_WORD *)&values[8] = 2080;
      *(_QWORD *)&values[10] = a3;
      _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "WriteToStreamCompressor error %d for %s", values, 0x12u);
    }
LABEL_38:
    if (CloseStreamCompressor() == -1)
    {
      v5 = *__error();
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)values = 67109120;
        *(_DWORD *)&values[4] = v5;
        _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "CloseStreamCompressor error %d", values, 8u);
      }
    }
    if (FinishStreamCompressorQueue() == -1
      && (v5 = *__error(), os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR)))
    {
      *(_DWORD *)values = 67109120;
      *(_DWORD *)&values[4] = v5;
      _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "FinishStreamCompressorQueue error %d", values, 8u);
      if (!(_DWORD)v5)
      {
LABEL_45:
        if (a4 == -1)
          close(v11);
        return v5;
      }
    }
    else if (!(_DWORD)v5)
    {
      goto LABEL_45;
    }
    unlink(a3);
    goto LABEL_45;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)values = 136315138;
    *(_QWORD *)&values[4] = a3;
    _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "CreateStreamCompressor error %s", values, 0xCu);
  }
  return 22;
}

uint64_t compress_file_in_place(const std::__fs::filesystem::path *a1, int a2)
{
  uint64_t v4;
  off_t st_size;
  int v7;
  int v8;
  CFAbsoluteTime Current;
  void *v10;
  void *v11;
  std::error_code *v12;
  NSObject *v13;
  const char *v14;
  int v15;
  uint32_t v16;
  std::__fs::filesystem::path *__from;
  stat v18;
  uint8_t buf[4];
  _BYTE v20[20];
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  memset(&v18, 0, sizeof(v18));
  if (stat((const char *)a1, &v18))
  {
    v4 = *__error();
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v4;
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v20 = v4;
    *(_WORD *)&v20[4] = 2080;
    *(_QWORD *)&v20[6] = a1;
    v13 = MEMORY[0x1E0C81028];
    v14 = "stat error %d with %s";
    goto LABEL_22;
  }
  st_size = v18.st_size;
  if (v18.st_size <= 0)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return 22;
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)v20 = st_size;
    *(_WORD *)&v20[8] = 2080;
    *(_QWORD *)&v20[10] = a1;
    v13 = MEMORY[0x1E0C81028];
    v14 = "file too small %ld %s";
    v4 = 22;
    v16 = 22;
LABEL_23:
    _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, v14, buf, v16);
    return v4;
  }
  v7 = open((const char *)a1, 0);
  if (v7 == -1)
  {
    v4 = *__error();
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      return v4;
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v20 = v4;
    *(_WORD *)&v20[4] = 2080;
    *(_QWORD *)&v20[6] = a1;
    v13 = MEMORY[0x1E0C81028];
    v14 = "open %d with %s";
LABEL_22:
    v16 = 18;
    goto LABEL_23;
  }
  v8 = v7;
  __from = 0;
  Current = CFAbsoluteTimeGetCurrent();
  asprintf((char **)&__from, "%s.%ld.tmp", (const char *)a1, (uint64_t)Current);
  v10 = mmap(0, v18.st_size, 1, 1, v8, 0);
  if (v10 == (void *)-1)
  {
    v4 = *__error();
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v20 = v4;
      _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "mmap error %d", buf, 8u);
    }
  }
  else
  {
    v11 = v10;
    v4 = compress_data_to_file((uint64_t)v10, v18.st_size, (char *)__from, -1, a2);
    munmap(v11, v18.st_size);
  }
  if ((_DWORD)v4)
  {
    unlink((const char *)__from);
  }
  else
  {
    rename(__from, a1, v12);
    if (v15 == -1)
    {
      v4 = *__error();
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v20 = v4;
        _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "rename error %d", buf, 8u);
      }
    }
    else
    {
      if (!queryCompressionInfo() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)v20 = 0;
        *(_WORD *)&v20[4] = 1024;
        *(_DWORD *)&v20[6] = 0;
        *(_WORD *)&v20[10] = 2048;
        *(_QWORD *)&v20[12] = 0;
        v21 = 2048;
        v22 = 0;
        v23 = 2048;
        v24 = 0;
        _os_log_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "compressionType: 0x%x compressionOverhead: %u compressedSize: %lld uncompressedSize: %lld decmpfsFlags: 0x%llx", buf, 0x2Cu);
      }
      v4 = 0;
    }
  }
  free(__from);
  close(v8);
  return v4;
}

_WORD *pommesQUQueryTree(CFDictionaryRef theDict, CFArrayRef theArray, void *a3, uint64_t a4)
{
  const __CFArray *v5;
  const void *v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *RankingAttributeScores;
  CFIndex v13;
  CFIndex v14;
  CFIndex v15;
  _QWORD *v16;
  const __CFDictionary *v17;
  const void *v18;
  void *v19;
  void *v20;
  int v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  const char *NodeForToken;
  _QWORD *query_node_with_ann;
  int v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  _WORD *v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const void *v53;
  const __CFArray *Value;
  const __CFArray *v55;
  int v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  CFIndex Count;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const void *v63;
  void *v64;
  void *LLMTokenDescription;
  int v66;
  int v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *matched;
  BOOL v72;
  int v73;
  NSObject *v74;
  _BOOL4 v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *RetrievalNodeFromQueryString;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  CFIndex v86;
  void *v87;
  void *v88;
  const __CFDictionary *v89;
  const void *v90;
  const void *v91;
  const void *v92;
  const void *v93;
  const void *v94;
  NSUInteger v95;
  NSUInteger v96;
  int v97;
  NSObject *v98;
  uint64_t v99;
  uint64_t v100;
  NSString *v101;
  int v102;
  int v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  const void *v107;
  const __CFString *v108;
  const __CFString *v109;
  void *v110;
  _BOOL4 v111;
  char v112;
  BOOL v113;
  int v114;
  int v115;
  NSObject *v116;
  uint64_t v117;
  uint64_t v118;
  int *v119;
  NSObject *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  const __CFArray *v128;
  int v129;
  NSObject *v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  NSObject *v134;
  uint64_t v135;
  uint64_t v136;
  CFIndex Length;
  NSObject *v138;
  uint64_t v139;
  uint64_t v140;
  unsigned __int8 *v141;
  void *v142;
  char *v143;
  int v144;
  NSObject *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  void *v149;
  _QWORD *v150;
  int v151;
  NSObject *v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  NSObject *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  int v160;
  int v161;
  NSObject *v162;
  uint64_t v163;
  uint64_t v164;
  unsigned __int8 v165;
  CFIndex v166;
  __int128 *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  void *v171;
  const __CFDictionary *v172;
  const void *v173;
  const void *v174;
  const void *v175;
  const void *v176;
  const void *v177;
  NSUInteger v178;
  NSUInteger v179;
  int v180;
  NSObject *v181;
  const __CFArray *v182;
  _WORD *v183;
  uint64_t v184;
  uint64_t v185;
  NSString *v186;
  int v187;
  int v188;
  NSObject *v189;
  uint64_t v190;
  uint64_t v191;
  const void *v192;
  void *v193;
  void *v194;
  unsigned int v195;
  _BOOL4 v196;
  char v197;
  int v198;
  char v200;
  _QWORD *v201;
  int v202;
  NSObject *v203;
  uint64_t v204;
  uint64_t v205;
  const char *QueryNode;
  _QWORD *v207;
  const char *v208;
  _QWORD *v209;
  int v210;
  NSObject *v211;
  uint64_t v212;
  uint64_t v213;
  NSObject *v214;
  uint64_t v215;
  uint64_t v216;
  int *v217;
  int v218;
  NSObject *v219;
  uint64_t v220;
  uint64_t v221;
  NSObject *v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  NSObject *v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  NSObject *v230;
  uint64_t v231;
  uint64_t v232;
  int *v233;
  NSObject *v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  NSObject *v238;
  uint64_t v239;
  uint64_t v240;
  NSObject *v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  NSObject *v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  NSObject *v249;
  uint64_t v250;
  uint64_t v251;
  unsigned __int8 v252;
  int v253;
  NSObject *v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  NSObject *v258;
  uint64_t v259;
  uint64_t v260;
  int *v261;
  int v262;
  NSObject *v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  NSObject *v267;
  uint64_t v268;
  uint64_t v269;
  int v270;
  NSObject *v271;
  uint64_t v272;
  uint64_t v273;
  const __CFData *v275;
  const __CFDictionary *v276;
  const __CFDictionary *v277;
  unint64_t v278;
  int v279;
  NSObject *v280;
  uint64_t v281;
  uint64_t v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  _DWORD *v291;
  unint64_t v292;
  unsigned int v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  NSObject *v297;
  uint64_t v298;
  uint64_t v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  _WORD *v303;
  unint64_t v304;
  int v305;
  NSObject *v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  NSObject *v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  int v315;
  __int128 *v316;
  int v317;
  CFIndex v318;
  __int128 *IndexAttributeScores;
  void *v320;
  void *v321;
  CFIndex v322;
  NSAttributedString *v323;
  NSAttributedString *v324;
  NSAttributedString *v325;
  int v326;
  const __CFArray *theArraya;
  NSAttributedString *theArrayb;
  void *__p[2];
  uint64_t v331;
  const __CFString *v332;
  int v333;
  int v334[4];
  __int128 v335;
  uint64_t v336;
  void *v337[2];
  char v338;
  void *v339[2];
  void *v340[2];
  unint64_t WildCardAllowedFields;
  uint64_t v342;
  _BYTE v343[32];
  uint64_t v344;
  __int128 v345;
  __int128 v346;
  uint64_t v347;
  __int128 v348;
  __int128 v349;
  uint64_t v350;
  _BYTE buf[24];
  void *v352;
  _BYTE v353[24];
  uint64_t v354;
  NSRange v355;
  NSRange v356;

  v5 = theArray;
  v354 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a4 + 12))
  {
    if (*(_BYTE *)(a4 + 23))
    {
      if (theDict && CFDictionaryGetCount(theDict))
      {
        v53 = (const void *)getkQPQUOutputTokenInfoKey();
        Value = (const __CFArray *)CFDictionaryGetValue(theDict, v53);
        if (Value)
        {
          v55 = Value;
          theArrayb = (NSAttributedString *)CFDictionaryGetValue(theDict, CFSTR("attributedParse"));
          v56 = *__error();
          v57 = _SILogForLogForCategory(17);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            v58 = *(_QWORD *)a4;
            v59 = *(_QWORD *)(a4 + 24);
            *(_DWORD *)buf = 134218498;
            *(_QWORD *)&buf[4] = v58;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v59;
            *(_WORD *)&buf[22] = 2112;
            v352 = theArrayb;
            _os_log_impl(&dword_1B8270000, v57, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s] Use LLM for query with QPParse:'%@'", buf, 0x20u);
          }
          *__error() = v56;
          IndexAttributeScores = getIndexAttributeScores(1024);
          Count = CFArrayGetCount(v55);
          if (Count < 1)
          {
            v324 = 0;
          }
          else
          {
            v324 = 0;
            for (i = 0; i != Count; ++i)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v55, i);
              v63 = (const void *)getkQPQUOutputTokenKey();
              v64 = (void *)CFDictionaryGetValue(ValueAtIndex, v63);
              LODWORD(v339[0]) = -1;
              LLMTokenDescription = (void *)fetchLLMTokenDescription((int *)v339, ValueAtIndex, theArrayb);
              v66 = (int)v339[0];
              if (isLLMOptionalArgId((int)v339[0]))
              {
                v67 = *__error();
                v68 = _SILogForLogForCategory(17);
                if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
                {
                  v69 = *(_QWORD *)a4;
                  v70 = *(_QWORD *)(a4 + 24);
                  *(_DWORD *)buf = 134218754;
                  *(_QWORD *)&buf[4] = v69;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = v70;
                  *(_WORD *)&buf[22] = 2048;
                  v352 = (void *)i;
                  *(_WORD *)v353 = 1024;
                  *(_DWORD *)&v353[2] = v66;
                  _os_log_impl(&dword_1B8270000, v68, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s][tokenIdx=%lu] Skipping tokenID %d (it is optional)", buf, 0x26u);
                }
                *__error() = v67;
              }
              else
              {
                matched = defaultMatchQueryNodeForQURetrieval((char *)objc_msgSend(v64, "UTF8String"), 112, *((uint64_t **)IndexAttributeScores + 2), a4, Count - 1 == i);
                v72 = objc_msgSend(LLMTokenDescription, "length") == 0;
                v73 = *__error();
                v74 = _SILogForLogForCategory(17);
                v75 = os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT);
                if (v72)
                {
                  if (v75)
                  {
                    v79 = *(_QWORD *)a4;
                    v80 = *(_QWORD *)(a4 + 24);
                    *(_DWORD *)buf = 134218754;
                    *(_QWORD *)&buf[4] = v79;
                    *(_WORD *)&buf[12] = 2080;
                    *(_QWORD *)&buf[14] = v80;
                    *(_WORD *)&buf[22] = 2048;
                    v352 = (void *)i;
                    *(_WORD *)v353 = 1024;
                    *(_DWORD *)&v353[2] = v66;
                    _os_log_impl(&dword_1B8270000, v74, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s][tokenIdx=%lu] Not adding parsed query tree for tokenID %d because tokenDescription is empty", buf, 0x26u);
                  }
                  v81 = __error();
                  RetrievalNodeFromQueryString = 0;
                  *v81 = v73;
                }
                else
                {
                  if (v75)
                  {
                    v76 = *(_QWORD *)a4;
                    v77 = *(_QWORD *)(a4 + 24);
                    *(_DWORD *)buf = 134218754;
                    *(_QWORD *)&buf[4] = v76;
                    *(_WORD *)&buf[12] = 2080;
                    *(_QWORD *)&buf[14] = v77;
                    *(_WORD *)&buf[22] = 2048;
                    v352 = (void *)i;
                    *(_WORD *)v353 = 1024;
                    *(_DWORD *)&v353[2] = v66;
                    _os_log_impl(&dword_1B8270000, v74, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s][tokenIdx=%lu] Adding parsed query tree for tokenID %d", buf, 0x26u);
                  }
                  *__error() = v73;
                  RetrievalNodeFromQueryString = makeRetrievalNodeFromQueryString((char *)objc_msgSend(LLMTokenDescription, "UTF8String"));
                }
                v82 = makeOrNode((uint64_t)matched, (uint64_t)RetrievalNodeFromQueryString);
                v324 = (NSAttributedString *)makeAndNode((uint64_t)v324, (uint64_t)v82);
              }
            }
          }
          if (CFDictionaryContainsKey(theDict, CFSTR("kQPQueryEmbeddingEncodedData")))
          {
            v275 = (const __CFData *)CFDictionaryGetValue(theDict, CFSTR("kQPQueryEmbeddingEncodedData"));
            if (v275)
            {
              v276 = decodeEmbeddingData(v275);
              if (v276)
              {
                v277 = v276;
                v278 = -[__CFDictionary length](v276, "length");
                if (v278 > 1)
                {
                  v290 = -[__CFDictionary bytes](v277, "bytes");
                  if (v290)
                  {
                    v291 = malloc_type_calloc(1uLL, 0x130uLL, 0x10B20407DF6C093uLL);
                    v292 = v278 >> 1;
                    *(_QWORD *)v291 = strdup("_kMDItemPrimaryTextEmbedding");
                    v291[6] = 15;
                    v293 = v291[15] & 0xFFFFFFF0;
                    if (v278 >> 1 == 256)
                    {
                      v294 = v293 | 4;
                    }
                    else if (v292 == 512)
                    {
                      v294 = v293 | 5;
                    }
                    else if (v292 == 768)
                    {
                      v294 = v293 | 6;
                    }
                    else
                    {
                      v294 = v293 | 7;
                    }
                    v291[15] = v294 & 0xFE00000F | 0x640;
                    v291[16] = 1064346583;
                    v291[10] = 5;
                    v291[40] |= 0x10000u;
                    v300 = malloc_type_malloc(v278 & 0xFFFFFFFFFFFFFFFELL, 0x1000040BDFB0063uLL);
                    v301 = 0;
                    *((_QWORD *)v291 + 37) = v300;
                    if (v292 <= 1)
                      v302 = 1;
                    else
                      v302 = v278 >> 1;
                    do
                    {
                      *(_WORD *)(*((_QWORD *)v291 + 37) + 2 * v301) = *(_WORD *)(v290 + 2 * v301);
                      ++v301;
                    }
                    while (v302 != v301);
                    v303 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E0040D742DA1DuLL);
                    v303[20] = 4;
                    *((_QWORD *)v303 + 2) = v291;
                    v304 = -[__CFDictionary length](v277, "length");
                    v305 = *__error();
                    v306 = _SILogForLogForCategory(17);
                    if (os_log_type_enabled(v306, OS_LOG_TYPE_DEFAULT))
                    {
                      v307 = *(_QWORD *)a4;
                      v308 = *(_QWORD *)(a4 + 24);
                      *(_DWORD *)buf = 134219010;
                      *(_QWORD *)&buf[4] = v307;
                      *(_WORD *)&buf[12] = 2080;
                      *(_QWORD *)&buf[14] = v308;
                      *(_WORD *)&buf[22] = 2048;
                      v352 = (void *)(v304 >> 1);
                      *(_WORD *)v353 = 2048;
                      *(_QWORD *)&v353[2] = 0x3FEE147AE0000000;
                      *(_WORD *)&v353[10] = 2048;
                      *(_QWORD *)&v353[12] = 100;
                      _os_log_impl(&dword_1B8270000, v306, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s] Created ANN node (dim: %lu, thresh: %f, num results: %lld)", buf, 0x34u);
                    }
                    *__error() = v305;
                    v309 = *__error();
                    v310 = _SILogForLogForCategory(17);
                    if (os_log_type_enabled(v310, OS_LOG_TYPE_DEFAULT))
                    {
                      v311 = *(_QWORD *)a4;
                      v312 = *(_QWORD *)(a4 + 24);
                      *(_DWORD *)buf = 134218242;
                      *(_QWORD *)&buf[4] = v311;
                      *(_WORD *)&buf[12] = 2080;
                      *(_QWORD *)&buf[14] = v312;
                      _os_log_impl(&dword_1B8270000, v310, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s] Adding Dense Node to retrieval tree", buf, 0x16u);
                    }
                    *__error() = v309;
                    v47 = makeOrNode((uint64_t)v324, (uint64_t)v303);
                    if (v47)
                      return v47;
                    goto LABEL_296;
                  }
                  v279 = *__error();
                  v280 = _SILogForLogForCategory(17);
                  if (!os_log_type_enabled(v280, OS_LOG_TYPE_DEFAULT))
                  {
LABEL_295:
                    *__error() = v279;
                    v47 = v324;
                    if (v324)
                      return v47;
LABEL_296:
                    v47 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E0040D742DA1DuLL);
                    v47[20] = 16;
                    v257 = *__error();
                    v297 = _SILogForLogForCategory(18);
                    if (os_log_type_enabled(v297, OS_LOG_TYPE_DEFAULT))
                    {
                      v298 = *(_QWORD *)a4;
                      v299 = *(_QWORD *)(a4 + 24);
                      *(_DWORD *)buf = 134218242;
                      *(_QWORD *)&buf[4] = v298;
                      *(_WORD *)&buf[12] = 2080;
                      *(_QWORD *)&buf[14] = v299;
                      _os_log_impl(&dword_1B8270000, v297, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s] Got an empty retrieval query tree (using ALWAYS_FALSE_NODE)", buf, 0x16u);
                    }
                    v261 = __error();
                    goto LABEL_259;
                  }
                  v295 = *(_QWORD *)a4;
                  v296 = *(_QWORD *)(a4 + 24);
                  *(_DWORD *)buf = 134218242;
                  *(_QWORD *)&buf[4] = v295;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = v296;
                  v283 = "[POMMES][QU][LLM][qid=%lld][%s] Skipping ann node (ERROR: Failed to get byte from embedding)";
                }
                else
                {
                  v279 = *__error();
                  v280 = _SILogForLogForCategory(17);
                  if (!os_log_type_enabled(v280, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_295;
                  v281 = *(_QWORD *)a4;
                  v282 = *(_QWORD *)(a4 + 24);
                  *(_DWORD *)buf = 134218242;
                  *(_QWORD *)&buf[4] = v281;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = v282;
                  v283 = "[POMMES][QU][LLM][qid=%lld][%s] Skipping ann node (ERROR: embedding has 0 dimensionality)";
                }
              }
              else
              {
                v279 = *__error();
                v280 = _SILogForLogForCategory(17);
                if (!os_log_type_enabled(v280, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_295;
                v288 = *(_QWORD *)a4;
                v289 = *(_QWORD *)(a4 + 24);
                *(_DWORD *)buf = 134218242;
                *(_QWORD *)&buf[4] = v288;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v289;
                v283 = "[POMMES][QU][LLM][qid=%lld][%s] Skipping ANN node (ERROR: decoded query embedding in null)";
              }
            }
            else
            {
              v279 = *__error();
              v280 = _SILogForLogForCategory(17);
              if (!os_log_type_enabled(v280, OS_LOG_TYPE_DEFAULT))
                goto LABEL_295;
              v286 = *(_QWORD *)a4;
              v287 = *(_QWORD *)(a4 + 24);
              *(_DWORD *)buf = 134218242;
              *(_QWORD *)&buf[4] = v286;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v287;
              v283 = "[POMMES][QU][LLM][qid=%lld][%s] Skipping ANN node (ERROR: encoded query embedding in null)";
            }
          }
          else
          {
            v279 = *__error();
            v280 = _SILogForLogForCategory(17);
            if (!os_log_type_enabled(v280, OS_LOG_TYPE_DEFAULT))
              goto LABEL_295;
            v284 = *(_QWORD *)a4;
            v285 = *(_QWORD *)(a4 + 24);
            *(_DWORD *)buf = 134218242;
            *(_QWORD *)&buf[4] = v284;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v285;
            v283 = "[POMMES][QU][LLM][qid=%lld][%s] Skipping ANN node (ERROR: missing query embedding)";
          }
          _os_log_impl(&dword_1B8270000, v280, OS_LOG_TYPE_DEFAULT, v283, buf, 0x16u);
          goto LABEL_295;
        }
        v270 = *__error();
        v271 = _SILogForLogForCategory(17);
        if (os_log_type_enabled(v271, OS_LOG_TYPE_DEFAULT))
        {
          v272 = *(_QWORD *)a4;
          v273 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v272;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v273;
          *(_WORD *)&buf[22] = 2112;
          v352 = 0;
          _os_log_impl(&dword_1B8270000, v271, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s] Not using LLM but rule based QP for query with QPParse:'%@'", buf, 0x20u);
        }
        *__error() = v270;
      }
      v47 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E0040D742DA1DuLL);
      v47[20] = 16;
      return v47;
    }
    *(_OWORD *)v339 = 0u;
    *(_OWORD *)v340 = 0u;
    WildCardAllowedFields = 1065353216;
    v166 = CFArrayGetCount(theArray);
    v167 = getIndexAttributeScores(*(unsigned __int16 *)(a4 + 10));
    v168 = 112;
    if (v166 == 1)
      v168 = 1073741936;
    if (v166 < 1)
    {
      v47 = 0;
      v170 = 0;
      v187 = 0;
      v252 = 1;
      goto LABEL_261;
    }
    v314 = v168;
    v316 = v167;
    v321 = a3;
    v47 = 0;
    v169 = 1;
    v326 = 1;
    v318 = v166;
    while (1)
    {
      v170 = (void *)v169;
      v171 = (void *)(v169 - 1);
      v172 = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v169 - 1);
      v173 = (const void *)getkQPQUOutputTokenRangeKey();
      if (!CFDictionaryContainsKey(v172, v173)
        || (v174 = (const void *)getkQPQUOutputTokenArgIdsKey(), !CFDictionaryContainsKey(v172, v174))
        || (v175 = (const void *)getkQPQUOutputTokenArgScoresKey(), !CFDictionaryContainsKey(v172, v175))
        || (v176 = (const void *)getkQPQUOutputTokenKey(), !CFDictionaryContainsKey(v172, v176)))
      {
        v188 = *__error();
        v189 = _SILogForLogForCategory(17);
        if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
        {
          v190 = *(_QWORD *)a4;
          v191 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v190;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v191;
          *(_WORD *)&buf[22] = 2048;
          v352 = v171;
          _os_log_impl(&dword_1B8270000, v189, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping token (ERROR: token info is missing essential keys)", buf, 0x20u);
        }
        v187 = 0;
        *__error() = v188;
        goto LABEL_177;
      }
      v177 = (const void *)getkQPQUOutputTokenRangeKey();
      if (objc_msgSend((id)CFDictionaryGetValue(v172, v177), "rangeValue") == 0x7FFFFFFFFFFFFFFFLL)
      {
        v179 = v178;
        v180 = *__error();
        v181 = _SILogForLogForCategory(17);
        if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
        {
          v182 = v5;
          v183 = v47;
          v184 = *(_QWORD *)a4;
          v185 = *(_QWORD *)(a4 + 24);
          v356.location = 0x7FFFFFFFFFFFFFFFLL;
          v356.length = v179;
          v186 = NSStringFromRange(v356);
          *(_DWORD *)buf = 134218754;
          *(_QWORD *)&buf[4] = v184;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v185;
          *(_WORD *)&buf[22] = 2048;
          v352 = v171;
          *(_WORD *)v353 = 2112;
          *(_QWORD *)&v353[2] = v186;
          _os_log_impl(&dword_1B8270000, v181, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping tokenID (ERROR: invalid range: %@)", buf, 0x2Au);
          v47 = v183;
          v5 = v182;
          v166 = v318;
        }
        v187 = 0;
        *__error() = v180;
        goto LABEL_177;
      }
      v350 = 1065353216;
      v348 = 0u;
      v349 = 0u;
      LODWORD(v345) = -1;
      v192 = (const void *)getkQPQUOutputTokenKey();
      v193 = (void *)CFDictionaryGetValue(v172, v192);
      if (!objc_msgSend(v193, "length"))
      {
        v210 = *__error();
        v211 = _SILogForLogForCategory(17);
        if (os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT))
        {
          v212 = *(_QWORD *)a4;
          v213 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134218754;
          *(_QWORD *)&buf[4] = v212;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v213;
          *(_WORD *)&buf[22] = 2048;
          v352 = v171;
          *(_WORD *)v353 = 1024;
          *(_DWORD *)&v353[2] = -1;
          _os_log_impl(&dword_1B8270000, v211, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping tokenID %d (ERROR: nil / empty token length)", buf, 0x26u);
        }
LABEL_233:
        v217 = __error();
LABEL_234:
        v187 = 0;
        *v217 = v210;
        goto LABEL_235;
      }
      v194 = (void *)populateU2LabelsAndDescriptions((int *)&v345, (float *)&v348, v172, v321);
      if (v166 != 1
        && std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>(&v348, 0)&& !v194)
      {
        v210 = *__error();
        v214 = _SILogForLogForCategory(17);
        if (os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT))
        {
          v215 = *(_QWORD *)a4;
          v216 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134218754;
          *(_QWORD *)&buf[4] = v215;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v216;
          *(_WORD *)&buf[22] = 2048;
          v352 = v171;
          *(_WORD *)v353 = 1024;
          *(_DWORD *)&v353[2] = v345;
          _os_log_impl(&dword_1B8270000, v214, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping tokenID %d (it is optional)", buf, 0x26u);
        }
        v217 = __error();
        v326 = 0;
        goto LABEL_234;
      }
      v195 = v345;
      v196 = isKeywordArgId(v345);
      if (objc_msgSend(v194, "length"))
        v197 = 1;
      else
        v197 = v196;
      if ((v197 & 1) == 0)
      {
        v218 = *__error();
        v219 = _SILogForLogForCategory(17);
        if (os_log_type_enabled(v219, OS_LOG_TYPE_DEFAULT))
        {
          v220 = *(_QWORD *)a4;
          v221 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134218754;
          *(_QWORD *)&buf[4] = v220;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v221;
          *(_WORD *)&buf[22] = 2048;
          v352 = v171;
          *(_WORD *)v353 = 1024;
          *(_DWORD *)&v353[2] = v195;
          _os_log_impl(&dword_1B8270000, v219, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping non-keyword tokenID %d (ERROR: nil / empty token description length)", buf, 0x26u);
        }
        goto LABEL_213;
      }
      v198 = v326;
      if ((v326 & 1) != 0 && !v196)
        v198 = 0;
      v326 = v198;
      if (*((_QWORD *)&v349 + 1))
        v200 = 1;
      else
        v200 = v196;
      if ((v200 & 1) == 0)
      {
        v218 = *__error();
        v222 = _SILogForLogForCategory(17);
        if (os_log_type_enabled(v222, OS_LOG_TYPE_DEFAULT))
        {
          v223 = *(_QWORD *)a4;
          v224 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134218754;
          *(_QWORD *)&buf[4] = v223;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v224;
          *(_WORD *)&buf[22] = 2048;
          v352 = v171;
          *(_WORD *)v353 = 1024;
          *(_DWORD *)&v353[2] = v195;
          _os_log_impl(&dword_1B8270000, v222, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping non-keyword tokenID %d (ERROR: no IDs or scores found)", buf, 0x26u);
        }
        goto LABEL_213;
      }
      if (v195 - 51 > 1)
      {
        if (!v196)
        {
          v209 = makeRetrievalNodeFromQueryString((char *)objc_msgSend(v194, "UTF8String"));
          v229 = *__error();
          v234 = _SILogForLogForCategory(17);
          if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
          {
            v235 = *(_QWORD *)a4;
            v236 = *(_QWORD *)(a4 + 24);
            *(_DWORD *)buf = 134219010;
            *(_QWORD *)&buf[4] = v235;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v236;
            *(_WORD *)&buf[22] = 2048;
            v352 = v171;
            *(_WORD *)v353 = 1024;
            *(_DWORD *)&v353[2] = v195;
            *(_WORD *)&v353[6] = 1024;
            *(_DWORD *)&v353[8] = v209 == 0;
            _os_log_impl(&dword_1B8270000, v234, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Adding parsed query tree for tokenID %d (invalid: %d)", buf, 0x2Cu);
          }
          v233 = __error();
          v207 = 0;
          goto LABEL_226;
        }
        v209 = defaultMatchQueryNodeForQURetrieval((char *)objc_msgSend(v193, "UTF8String"), v314, *((uint64_t **)v316 + 2), a4, v166 == (_QWORD)v170);
        v225 = *__error();
        v226 = _SILogForLogForCategory(17);
        if (os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT))
        {
          v227 = *(_QWORD *)a4;
          v228 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134219010;
          *(_QWORD *)&buf[4] = v227;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v228;
          *(_WORD *)&buf[22] = 2048;
          v352 = v171;
          *(_WORD *)v353 = 1024;
          *(_DWORD *)&v353[2] = v195;
          *(_WORD *)&v353[6] = 1024;
          *(_DWORD *)&v353[8] = v209 == 0;
          _os_log_impl(&dword_1B8270000, v226, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Including keyword match for retrieval for tokenID %d (invalid: %d)", buf, 0x2Cu);
        }
        *__error() = v225;
        v207 = 0;
        if (v194 && v195 <= 9 && ((1 << v195) & 0x302) != 0)
        {
          v207 = makeRetrievalNodeFromQueryString((char *)objc_msgSend(v194, "UTF8String"));
          v209 = makeOrNode((uint64_t)v209, (uint64_t)v207);
          v229 = *__error();
          v230 = _SILogForLogForCategory(17);
          if (os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT))
          {
            v231 = *(_QWORD *)a4;
            v232 = *(_QWORD *)(a4 + 24);
            *(_DWORD *)buf = 134219010;
            *(_QWORD *)&buf[4] = v231;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v232;
            *(_WORD *)&buf[22] = 2048;
            v352 = v171;
            *(_WORD *)v353 = 1024;
            *(_DWORD *)&v353[2] = v195;
            *(_WORD *)&v353[6] = 1024;
            *(_DWORD *)&v353[8] = v207 == 0;
            _os_log_impl(&dword_1B8270000, v230, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Adding parsed query tree for tokenID %d (invalid: %d)", buf, 0x2Cu);
          }
          v233 = __error();
LABEL_226:
          *v233 = v229;
        }
      }
      else
      {
        if (!v194)
        {
          v218 = *__error();
          v241 = _SILogForLogForCategory(17);
          if (os_log_type_enabled(v241, OS_LOG_TYPE_DEFAULT))
          {
            v242 = *(_QWORD *)a4;
            v243 = *(_QWORD *)(a4 + 24);
            *(_DWORD *)buf = 134218754;
            *(_QWORD *)&buf[4] = v242;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v243;
            *(_WORD *)&buf[22] = 2048;
            v352 = v171;
            *(_WORD *)v353 = 1024;
            *(_DWORD *)&v353[2] = v195;
            _os_log_impl(&dword_1B8270000, v241, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping earliest/latest tokenID %d (ERROR: no IDs or scores found)", buf, 0x26u);
          }
LABEL_213:
          *__error() = v218;
          v187 = 1;
          goto LABEL_235;
        }
        v201 = makeRetrievalNodeFromQueryString((char *)objc_msgSend(v194, "UTF8String"));
        v202 = *__error();
        v203 = _SILogForLogForCategory(17);
        if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
        {
          v204 = *(_QWORD *)a4;
          v205 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134219010;
          *(_QWORD *)&buf[4] = v204;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v205;
          *(_WORD *)&buf[22] = 2048;
          v352 = v171;
          *(_WORD *)v353 = 1024;
          *(_DWORD *)&v353[2] = v195;
          *(_WORD *)&v353[6] = 1024;
          *(_DWORD *)&v353[8] = v201 == 0;
          _os_log_impl(&dword_1B8270000, v203, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Adding parsed query tree for earliest/latest tokenID %d (invalid: %d)", buf, 0x2Cu);
        }
        *__error() = v202;
        if (!v201)
        {
LABEL_231:
          v210 = *__error();
          v238 = _SILogForLogForCategory(17);
          if (os_log_type_enabled(v238, OS_LOG_TYPE_DEFAULT))
          {
            v239 = *(_QWORD *)a4;
            v240 = *(_QWORD *)(a4 + 24);
            *(_DWORD *)buf = 134218754;
            *(_QWORD *)&buf[4] = v239;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v240;
            *(_WORD *)&buf[22] = 2048;
            v352 = v171;
            *(_WORD *)v353 = 1024;
            *(_DWORD *)&v353[2] = v195;
            _os_log_impl(&dword_1B8270000, v238, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Got an empty retrieval tree for tokenID %d", buf, 0x26u);
          }
          goto LABEL_233;
        }
        QueryNode = createQueryNode("_kMDItemBundleID", "com.apple.mobilecal", 0, 1, 0, 0.0, 0.0);
        v207 = makeAndNode((uint64_t)v201, (uint64_t)QueryNode);
        v208 = createQueryNode("_kMDItemBundleID", "com.apple.mobilecal", 0, 5, 0, 0.0, 0.0);
        v209 = makeOrNode((uint64_t)v207, (uint64_t)v208);
      }
      if (!v209)
        goto LABEL_231;
      v47 = makeAndNode((uint64_t)v47, (uint64_t)v209);
      v187 = 0;
      v237 = v326;
      if ((v326 & (v207 != 0)) != 0)
        v237 = 0;
      v326 = v237;
LABEL_235:
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table((uint64_t)&v348);
      if ((v187 & 1) != 0)
      {
LABEL_250:
        v252 = v326;
        if ((((v326 & 1) == 0) & ~v187) != 0)
        {
          if (!v47)
            goto LABEL_264;
          goto LABEL_267;
        }
LABEL_261:
        v262 = *__error();
        v263 = _SILogForLogForCategory(17);
        if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
        {
          v264 = *(_QWORD *)a4;
          v265 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134219010;
          *(_QWORD *)&buf[4] = v264;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v265;
          *(_WORD *)&buf[22] = 2048;
          v352 = v170;
          *(_WORD *)v353 = 1024;
          *(_DWORD *)&v353[2] = v187;
          *(_WORD *)&v353[6] = 1024;
          *(_DWORD *)&v353[8] = v252;
          _os_log_impl(&dword_1B8270000, v263, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][lastIdx=%lu] Skipping non-Photos QU tree: {malformed=%d, allKeyword=%d}", buf, 0x2Cu);
        }
        *__error() = v262;
        db_free_query_node(v47);
LABEL_264:
        v266 = *__error();
        v267 = _SILogForLogForCategory(17);
        if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
        {
          v268 = *(_QWORD *)a4;
          v269 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v268;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v269;
          _os_log_impl(&dword_1B8270000, v267, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s] Got an empty retrieval query tree (using ALWAYS_FALSE_NODE)", buf, 0x16u);
        }
        *__error() = v266;
        v47 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E0040D742DA1DuLL);
        v47[20] = 16;
LABEL_267:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v340[0]);
        v52 = v339[0];
        if (!v339[0])
          return v47;
LABEL_268:
        operator delete(v52);
        return v47;
      }
LABEL_177:
      v169 = (uint64_t)v170 + 1;
      if ((uint64_t)v170 >= v166)
        goto LABEL_250;
    }
  }
  if (*(_BYTE *)(a4 + 23))
  {
    if (theDict && CFDictionaryGetCount(theDict))
    {
      v7 = (const void *)getkQPQUOutputTokenInfoKey();
      theArraya = (const __CFArray *)CFDictionaryGetValue(theDict, v7);
      if (theArraya)
      {
        v323 = (NSAttributedString *)CFDictionaryGetValue(theDict, CFSTR("attributedParse"));
        v8 = *__error();
        v9 = _SILogForLogForCategory(18);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = *(_QWORD *)a4;
          v11 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v10;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v11;
          *(_WORD *)&buf[22] = 2112;
          v352 = v323;
          _os_log_impl(&dword_1B8270000, v9, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s] Use LLM for query with QPParse:'%@'", buf, 0x20u);
        }
        *__error() = v8;
        RankingAttributeScores = (_QWORD *)getRankingAttributeScores(*(unsigned __int16 *)(a4 + 10));
        WildCardAllowedFields = 0;
        v342 = 0;
        v339[0] = (void *)112;
        v339[1] = (void *)1065353216;
        std::string::basic_string[abi:nn180100]<0>(&v345, "");
        v340[0] = &v345;
        v340[1] = (void *)1;
        WildCardAllowedFields = getWildCardAllowedFields(*(unsigned __int16 *)(a4 + 10));
        v13 = CFArrayGetCount(theArraya);
        v14 = v13 - 1;
        if (v13 < 1)
          goto LABEL_38;
        v15 = 0;
        v16 = 0;
        do
        {
          v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArraya, v15);
          v18 = (const void *)getkQPQUOutputTokenKey();
          v19 = (void *)CFDictionaryGetValue(v17, v18);
          v334[0] = -1;
          v20 = (void *)fetchLLMTokenDescription(v334, v17, v323);
          v21 = v334[0];
          if (isLLMOptionalArgId(v334[0]))
          {
            v22 = *__error();
            v23 = _SILogForLogForCategory(18);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              v24 = *(_QWORD *)a4;
              v25 = *(_QWORD *)(a4 + 24);
              *(_DWORD *)buf = 134219010;
              *(_QWORD *)&buf[4] = v24;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v25;
              *(_WORD *)&buf[22] = 2048;
              v352 = (void *)v15;
              *(_WORD *)v353 = 2048;
              *(_QWORD *)&v353[2] = 0x3810000000000000;
              *(_WORD *)&v353[10] = 1024;
              *(_DWORD *)&v353[12] = v21;
              _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s][tokenIdx=%lu] noMatchScore=%lf for tokenID %d (it is optional)", buf, 0x30u);
            }
            *__error() = v22;
            v26 = 0x800000;
          }
          else
          {
            v27 = *__error();
            v28 = _SILogForLogForCategory(18);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              v29 = *(_QWORD *)a4;
              v30 = *(_QWORD *)(a4 + 24);
              *(_DWORD *)buf = 134219010;
              *(_QWORD *)&buf[4] = v29;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v30;
              *(_WORD *)&buf[22] = 2048;
              v352 = (void *)v15;
              *(_WORD *)v353 = 2048;
              *(_QWORD *)&v353[2] = 0;
              *(_WORD *)&v353[10] = 1024;
              *(_DWORD *)&v353[12] = v21;
              _os_log_impl(&dword_1B8270000, v28, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s][tokenIdx=%lu] noMatchScore=%lf for tokenID %d", buf, 0x30u);
            }
            *__error() = v27;
            v26 = 0;
          }
          BYTE5(v342) = v14 == v15;
          HIDWORD(v339[1]) = v26;
          memset(v343, 0, 24);
          std::string::basic_string[abi:nn180100]<0>(v343, (char *)objc_msgSend(v19, "UTF8String"));
          if (v14 == v15)
            std::string::append((std::string *)v343, "*");
          if (v343[23] >= 0)
            v31 = v343;
          else
            v31 = *(char **)v343;
          NodeForToken = queryNodeForToken(v31, RankingAttributeScores, (uint64_t)v339, (_BYTE *)a4);
          if (objc_msgSend(v20, "length"))
          {
            query_node_with_ann = db_make_query_node_with_ann((char *)objc_msgSend(v20, "UTF8String"), 0);
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = ___ZL16llmQURankingNodePKcffRKNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEfNS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_fEEEEEE_block_invoke;
            v352 = &__block_descriptor_48_e84__v16__0__query_node___query_node___query_node___query_piece_____v_v__vSIb8b1b1b1Qf_8l;
            *(_QWORD *)v353 = RankingAttributeScores;
            *(_DWORD *)&v353[8] = 1065353216;
            *(_DWORD *)&v353[12] = v26;
            *(_QWORD *)&v348 = MEMORY[0x1E0C809B0];
            *((_QWORD *)&v348 + 1) = 0x40000000;
            *(_QWORD *)&v349 = __db_query_tree_apply_block_block_invoke;
            *((_QWORD *)&v349 + 1) = &unk_1E6E377F8;
            v350 = (uint64_t)buf;
            db_query_tree_apply_block_with_meta(query_node_with_ann, (uint64_t)&v348, 0);
            v34 = *__error();
            v35 = _SILogForLogForCategory(18);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            {
              v36 = *(_QWORD *)a4;
              v37 = *(_QWORD *)(a4 + 24);
              *(_DWORD *)buf = 134219010;
              *(_QWORD *)&buf[4] = v36;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v37;
              *(_WORD *)&buf[22] = 2048;
              v352 = (void *)v15;
              *(_WORD *)v353 = 1024;
              *(_DWORD *)&v353[2] = v21;
              *(_WORD *)&v353[6] = 1024;
              *(_DWORD *)&v353[8] = query_node_with_ann == 0;
              _os_log_impl(&dword_1B8270000, v35, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s][tokenIdx=%lu] Adding parsed query tree for tokenID %d (invalid: %d)", buf, 0x2Cu);
            }
            v38 = __error();
          }
          else
          {
            v34 = *__error();
            v39 = _SILogForLogForCategory(18);
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            {
              v40 = *(_QWORD *)a4;
              v41 = *(_QWORD *)(a4 + 24);
              *(_DWORD *)buf = 134218754;
              *(_QWORD *)&buf[4] = v40;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v41;
              *(_WORD *)&buf[22] = 2048;
              v352 = (void *)v15;
              *(_WORD *)v353 = 1024;
              *(_DWORD *)&v353[2] = v21;
              _os_log_impl(&dword_1B8270000, v39, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s][tokenIdx=%lu] Not adding parsed query tree for tokenID %d because tokenDescription is empty", buf, 0x26u);
            }
            v38 = __error();
            query_node_with_ann = 0;
          }
          *v38 = v34;
          v42 = makeOrNode((uint64_t)NodeForToken, (uint64_t)query_node_with_ann);
          if (v42)
          {
            v16 = makeAndNode((uint64_t)v16, (uint64_t)v42);
          }
          else
          {
            v43 = *__error();
            v44 = _SILogForLogForCategory(18);
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              v45 = *(_QWORD *)a4;
              v46 = *(_QWORD *)(a4 + 24);
              *(_DWORD *)buf = 134218754;
              *(_QWORD *)&buf[4] = v45;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v46;
              *(_WORD *)&buf[22] = 2048;
              v352 = (void *)v15;
              *(_WORD *)v353 = 1024;
              *(_DWORD *)&v353[2] = v21;
              _os_log_impl(&dword_1B8270000, v44, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s][tokenIdx=%lu] Got an empty ranking tree for tokenID %d", buf, 0x26u);
            }
            *__error() = v43;
          }
          if ((v343[23] & 0x80000000) != 0)
            operator delete(*(void **)v343);
          ++v15;
        }
        while (v13 != v15);
        v47 = v16;
        if (!v16)
        {
LABEL_38:
          v47 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E0040D742DA1DuLL);
          v47[20] = 16;
          v48 = *__error();
          v49 = _SILogForLogForCategory(18);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
          {
            v50 = *(_QWORD *)a4;
            v51 = *(_QWORD *)(a4 + 24);
            *(_DWORD *)buf = 134218242;
            *(_QWORD *)&buf[4] = v50;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v51;
            _os_log_impl(&dword_1B8270000, v49, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s] Got an empty ranking query tree (using ALWAYS_FALSE_NODE)", buf, 0x16u);
          }
          *__error() = v48;
        }
        if ((SBYTE7(v346) & 0x80000000) == 0)
          return v47;
        v52 = (void *)v345;
        goto LABEL_268;
      }
      v253 = *__error();
      v254 = _SILogForLogForCategory(18);
      if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
      {
        v255 = *(_QWORD *)a4;
        v256 = *(_QWORD *)(a4 + 24);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v255;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v256;
        *(_WORD *)&buf[22] = 2112;
        v352 = 0;
        _os_log_impl(&dword_1B8270000, v254, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s] Not using LLM but rule based QP for query with QPParse:'%@'.", buf, 0x20u);
      }
      *__error() = v253;
    }
    v47 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E0040D742DA1DuLL);
    v47[20] = 16;
    v257 = *__error();
    v258 = _SILogForLogForCategory(18);
    if (os_log_type_enabled(v258, OS_LOG_TYPE_DEFAULT))
    {
      v259 = *(_QWORD *)a4;
      v260 = *(_QWORD *)(a4 + 24);
      *(_DWORD *)buf = 134218242;
      *(_QWORD *)&buf[4] = v259;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v260;
      _os_log_impl(&dword_1B8270000, v258, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][LLM][qid=%lld][%s] Got no LLM parse (using ALWAYS_FALSE_NODE)", buf, 0x16u);
    }
    v261 = __error();
LABEL_259:
    *v261 = v257;
    return v47;
  }
  v345 = 0u;
  v346 = 0u;
  v347 = 1065353216;
  v83 = getRankingAttributeScores(*(unsigned __int16 *)(a4 + 10));
  memset(v343, 0, sizeof(v343));
  v344 = 1065353216;
  v340[1] = 0;
  WildCardAllowedFields = 0;
  v342 = 0;
  v322 = CFArrayGetCount(v5);
  v84 = 112;
  if (v322 == 1)
    v84 = 1073741936;
  v339[0] = (void *)v84;
  v339[1] = (void *)1065353216;
  std::string::basic_string[abi:nn180100]<0>(v337, "");
  v340[0] = v337;
  LODWORD(v340[1]) = 1;
  BYTE4(v340[1]) = 0;
  WildCardAllowedFields = getWildCardAllowedFields(*(unsigned __int16 *)(a4 + 10));
  LODWORD(v342) = 0;
  *(_DWORD *)((char *)&v342 + 3) = 0;
  if (v322 < 1)
  {
    v87 = 0;
    v102 = 0;
    v325 = 0;
    v165 = 1;
    goto LABEL_241;
  }
  v313 = (_QWORD *)v83;
  v320 = a3;
  v325 = 0;
  v85 = 1;
  v317 = 1;
  v86 = v322;
  do
  {
    v87 = (void *)v85;
    v88 = (void *)(v85 - 1);
    v89 = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v85 - 1);
    v90 = (const void *)getkQPQUOutputTokenRangeKey();
    if (!CFDictionaryContainsKey(v89, v90)
      || (v91 = (const void *)getkQPQUOutputTokenArgIdsKey(), !CFDictionaryContainsKey(v89, v91))
      || (v92 = (const void *)getkQPQUOutputTokenArgScoresKey(), !CFDictionaryContainsKey(v89, v92))
      || (v93 = (const void *)getkQPQUOutputTokenKey(), !CFDictionaryContainsKey(v89, v93)))
    {
      v103 = *__error();
      v104 = _SILogForLogForCategory(18);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
      {
        v105 = *(_QWORD *)a4;
        v106 = *(_QWORD *)(a4 + 24);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v105;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v106;
        *(_WORD *)&buf[22] = 2048;
        v352 = v88;
        _os_log_impl(&dword_1B8270000, v104, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping token (ERROR: token info is missing essential keys)", buf, 0x20u);
      }
      v102 = 0;
      *__error() = v103;
      goto LABEL_80;
    }
    v94 = (const void *)getkQPQUOutputTokenRangeKey();
    if (objc_msgSend((id)CFDictionaryGetValue(v89, v94), "rangeValue") == 0x7FFFFFFFFFFFFFFFLL)
    {
      v96 = v95;
      v97 = *__error();
      v98 = _SILogForLogForCategory(18);
      if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
      {
        v99 = *(_QWORD *)a4;
        v100 = *(_QWORD *)(a4 + 24);
        v355.location = 0x7FFFFFFFFFFFFFFFLL;
        v355.length = v96;
        v101 = NSStringFromRange(v355);
        *(_DWORD *)buf = 134218754;
        *(_QWORD *)&buf[4] = v99;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v100;
        *(_WORD *)&buf[22] = 2048;
        v352 = v88;
        *(_WORD *)v353 = 2112;
        *(_QWORD *)&v353[2] = v101;
        _os_log_impl(&dword_1B8270000, v98, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping token (ERROR: invalid range: %@)", buf, 0x2Au);
        v86 = v322;
      }
      v102 = 0;
      *__error() = v97;
      goto LABEL_80;
    }
    *(_OWORD *)v334 = 0u;
    v335 = 0u;
    v336 = 1065353216;
    v333 = -1;
    v107 = (const void *)getkQPQUOutputTokenKey();
    v108 = (const __CFString *)CFDictionaryGetValue(v89, v107);
    v109 = v108;
    v332 = v108;
    if (!v108 || !CFStringGetLength(v108))
    {
      v115 = *__error();
      v116 = _SILogForLogForCategory(18);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
      {
        v117 = *(_QWORD *)a4;
        v118 = *(_QWORD *)(a4 + 24);
        *(_DWORD *)buf = 134218754;
        *(_QWORD *)&buf[4] = v117;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v118;
        *(_WORD *)&buf[22] = 2048;
        v352 = v88;
        *(_WORD *)v353 = 1024;
        *(_DWORD *)&v353[2] = -1;
        _os_log_impl(&dword_1B8270000, v116, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping tokenID %d (ERROR: nil / empty token length)", buf, 0x26u);
      }
      goto LABEL_96;
    }
    v110 = (void *)populateU2LabelsAndDescriptions(&v333, (float *)v334, v89, v320);
    if (v86 != 1
      && std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>(v334, 0)&& !v110)
    {
      v115 = *__error();
      v120 = _SILogForLogForCategory(18);
      if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
      {
        v121 = *(_QWORD *)a4;
        v122 = *(_QWORD *)(a4 + 24);
        *(_DWORD *)buf = 134218754;
        *(_QWORD *)&buf[4] = v121;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v122;
        *(_WORD *)&buf[22] = 2048;
        v352 = v88;
        *(_WORD *)v353 = 1024;
        *(_DWORD *)&v353[2] = v333;
        _os_log_impl(&dword_1B8270000, v120, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping tokenID %d (it is optional)", buf, 0x26u);
      }
      v119 = __error();
      v317 = 0;
      goto LABEL_97;
    }
    v315 = v333;
    v111 = isKeywordArgId(v333);
    if (objc_msgSend(v110, "length"))
      v112 = 1;
    else
      v112 = v111;
    if ((v112 & 1) == 0)
    {
      v123 = *__error();
      v124 = _SILogForLogForCategory(18);
      if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
      {
        v125 = *(_QWORD *)a4;
        v126 = *(_QWORD *)(a4 + 24);
        *(_DWORD *)buf = 134218754;
        *(_QWORD *)&buf[4] = v125;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v126;
        *(_WORD *)&buf[22] = 2048;
        v352 = v88;
        *(_WORD *)v353 = 1024;
        *(_DWORD *)&v353[2] = v315;
        _os_log_impl(&dword_1B8270000, v124, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping non-keyword tokenID %d (ERROR: nil / empty token description length)", buf, 0x26u);
      }
      goto LABEL_123;
    }
    if (objc_msgSend(v110, "length"))
      v113 = v111;
    else
      v113 = 0;
    if (v113)
    {
      v114 = 0x800000;
    }
    else
    {
      v127 = (v317 & 1) == 0 || v111;
      v114 = 0;
      if ((v127 & 1) == 0)
      {
        v128 = v5;
        v129 = *__error();
        v130 = _SILogForLogForCategory(17);
        if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
        {
          v131 = *(_QWORD *)a4;
          v132 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v131;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v132;
          *(_WORD *)&buf[22] = 2048;
          v352 = v88;
          _os_log_impl(&dword_1B8270000, v130, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Non-photos QU tree is not *all* keywords.", buf, 0x20u);
        }
        v317 = 0;
        *__error() = v129;
        v5 = v128;
      }
    }
    if (*((_QWORD *)&v335 + 1))
      v133 = 1;
    else
      v133 = v111;
    if ((v133 & 1) == 0)
    {
      v123 = *__error();
      v138 = _SILogForLogForCategory(18);
      if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
      {
        v139 = *(_QWORD *)a4;
        v140 = *(_QWORD *)(a4 + 24);
        *(_DWORD *)buf = 134218754;
        *(_QWORD *)&buf[4] = v139;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v140;
        *(_WORD *)&buf[22] = 2048;
        v352 = v88;
        *(_WORD *)v353 = 1024;
        *(_DWORD *)&v353[2] = v315;
        _os_log_impl(&dword_1B8270000, v138, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping non-keyword tokenID %d (ERROR: no IDs or scores found)", buf, 0x26u);
      }
LABEL_123:
      *__error() = v123;
      v102 = 1;
      goto LABEL_124;
    }
    if (hasOnlyOptionalSpecialChar(v109))
    {
      v115 = *__error();
      v134 = _SILogForLogForCategory(18);
      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
      {
        v135 = *(_QWORD *)a4;
        v136 = *(_QWORD *)(a4 + 24);
        Length = CFStringGetLength(v109);
        *(_DWORD *)buf = 134219010;
        *(_QWORD *)&buf[4] = v135;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v136;
        *(_WORD *)&buf[22] = 2048;
        v352 = v88;
        *(_WORD *)v353 = 1024;
        *(_DWORD *)&v353[2] = v315;
        *(_WORD *)&v353[6] = 2048;
        *(_QWORD *)&v353[8] = Length;
        _os_log_impl(&dword_1B8270000, v134, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Skipping all special chars tokenID %d with length: %ld", buf, 0x30u);
        v86 = v322;
      }
LABEL_96:
      v119 = __error();
LABEL_97:
      v102 = 0;
      *v119 = v115;
      goto LABEL_124;
    }
    __p[0] = 0;
    __p[1] = 0;
    v331 = 0;
    utf8QueryString((const __CFString **)__p, (uint64_t)&v332, 1, 0);
    v141 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(*(uint64_t *)v343, *(unint64_t *)&v343[8], (uint64_t)__p);
    if (!v141 || *((_DWORD *)v141 + 10) != v315)
    {
      if (v111)
      {
        HIDWORD(v339[1]) = v114;
        v348 = 0uLL;
        *(_QWORD *)&v349 = 0;
        BYTE5(v342) = v86 == (_QWORD)v87;
        if ((void *)v86 == v87)
        {
          std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v348, (const void **)__p, "*");
        }
        else if (SHIBYTE(v331) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v348, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v348 = *(_OWORD *)__p;
          *(_QWORD *)&v349 = v331;
        }
        if ((SBYTE7(v349) & 0x80u) == 0)
          v143 = (char *)&v348;
        else
          v143 = (char *)v348;
        v142 = (void *)queryNodeForToken(v143, v313, (uint64_t)v339, (_BYTE *)a4);
        v144 = *__error();
        v145 = _SILogForLogForCategory(18);
        if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
        {
          v146 = *(_QWORD *)a4;
          v147 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134219010;
          *(_QWORD *)&buf[4] = v146;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v147;
          *(_WORD *)&buf[22] = 2048;
          v352 = v88;
          *(_WORD *)v353 = 1024;
          *(_DWORD *)&v353[2] = v315;
          *(_WORD *)&v353[6] = 1024;
          *(_DWORD *)&v353[8] = v142 == 0;
          _os_log_impl(&dword_1B8270000, v145, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Including keyword match for ranking for tokenID %d (invalid: %d)", buf, 0x2Cu);
        }
        *__error() = v144;
        if (SBYTE7(v349) < 0)
          operator delete((void *)v348);
      }
      else
      {
        v142 = 0;
      }
      if (objc_msgSend(v110, "length"))
      {
        v148 = (char *)objc_msgSend(v110, "UTF8String");
        v149 = v339[1];
        v150 = db_make_query_node_with_ann(v148, 0);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZL13QURankingNodePKcRKNSt3__113unordered_mapIifNS1_4hashIiEENS1_8equal_toIiEENS1_9allocatorINS1_4pairIKifEEEEEEffRKNS2_INS1_12basic_stringIcNS1_11char_traitsIcEENS7_IcEEEEfNS3_ISJ_EENS5_ISJ_EENS7_INS8_IKSJ_fEEEEEE_block_invoke;
        v352 = &__block_descriptor_56_e84__v16__0__query_node___query_node___query_node___query_piece_____v_v__vSIb8b1b1b1Qf_8l;
        *(_QWORD *)&v353[16] = v149;
        *(_QWORD *)v353 = v313;
        *(_QWORD *)&v353[8] = v334;
        *(_QWORD *)&v348 = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v348 + 1) = 0x40000000;
        *(_QWORD *)&v349 = __db_query_tree_apply_block_block_invoke;
        *((_QWORD *)&v349 + 1) = &unk_1E6E377F8;
        v350 = (uint64_t)buf;
        db_query_tree_apply_block_with_meta(v150, (uint64_t)&v348, 0);
        v142 = makeAndNode((uint64_t)v142, (uint64_t)v150);
        v151 = *__error();
        v152 = _SILogForLogForCategory(18);
        if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
        {
          v153 = *(_QWORD *)a4;
          v154 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134219010;
          *(_QWORD *)&buf[4] = v153;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v154;
          *(_WORD *)&buf[22] = 2048;
          v352 = v88;
          *(_WORD *)v353 = 1024;
          *(_DWORD *)&v353[2] = v315;
          *(_WORD *)&v353[6] = 1024;
          *(_DWORD *)&v353[8] = v150 == 0;
          _os_log_impl(&dword_1B8270000, v152, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Adding parsed query tree for tokenID %d (invalid: %d)", buf, 0x2Cu);
        }
        *__error() = v151;
      }
      else
      {
        v155 = *__error();
        v156 = _SILogForLogForCategory(18);
        if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
        {
          v157 = *(_QWORD *)a4;
          v158 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134218754;
          *(_QWORD *)&buf[4] = v157;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v158;
          *(_WORD *)&buf[22] = 2048;
          v352 = v88;
          *(_WORD *)v353 = 1024;
          *(_DWORD *)&v353[2] = v315;
          _os_log_impl(&dword_1B8270000, v156, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Not adding parsed query tree for tokenID %d because tokenDescription is empty", buf, 0x26u);
        }
        v150 = 0;
        *__error() = v155;
      }
      if (v142)
      {
        v159 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v343, (uint64_t)__p, (uint64_t)__p);
        v160 = v317;
        if ((v317 & (v150 != 0)) != 0)
          v160 = 0;
        v317 = v160;
        *((_DWORD *)v159 + 10) = v315;
        v325 = (NSAttributedString *)makeAndNode((uint64_t)v325, (uint64_t)v142);
      }
      else
      {
        v161 = *__error();
        v162 = _SILogForLogForCategory(18);
        if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
        {
          v163 = *(_QWORD *)a4;
          v164 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)buf = 134218754;
          *(_QWORD *)&buf[4] = v163;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v164;
          *(_WORD *)&buf[22] = 2048;
          v352 = v88;
          *(_WORD *)v353 = 1024;
          *(_DWORD *)&v353[2] = v315;
          _os_log_impl(&dword_1B8270000, v162, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][tokenIdx=%lu] Got an empty ranking tree for tokenID %d", buf, 0x26u);
        }
        *__error() = v161;
      }
    }
    if (SHIBYTE(v331) < 0)
      operator delete(__p[0]);
    v102 = 0;
LABEL_124:
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table((uint64_t)v334);
    if ((v102 & 1) != 0)
      break;
LABEL_80:
    v85 = (uint64_t)v87 + 1;
  }
  while ((uint64_t)v87 < v86);
  v165 = v317;
  if ((((v317 & 1) == 0) & ~v102) != 0)
  {
    v47 = v325;
    if (!v325)
      goto LABEL_244;
    goto LABEL_247;
  }
LABEL_241:
  v244 = *__error();
  v245 = _SILogForLogForCategory(18);
  if (os_log_type_enabled(v245, OS_LOG_TYPE_DEFAULT))
  {
    v246 = *(_QWORD *)a4;
    v247 = *(_QWORD *)(a4 + 24);
    *(_DWORD *)buf = 134219010;
    *(_QWORD *)&buf[4] = v246;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v247;
    *(_WORD *)&buf[22] = 2048;
    v352 = v87;
    *(_WORD *)v353 = 1024;
    *(_DWORD *)&v353[2] = v102;
    *(_WORD *)&v353[6] = 1024;
    *(_DWORD *)&v353[8] = v165;
    _os_log_impl(&dword_1B8270000, v245, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s][lastIdx=%lu] Skipping non-Photos QU tree: {malformed=%d, allKeyword=%d}", buf, 0x2Cu);
  }
  *__error() = v244;
  db_free_query_node(v325);
LABEL_244:
  v248 = *__error();
  v249 = _SILogForLogForCategory(18);
  if (os_log_type_enabled(v249, OS_LOG_TYPE_DEFAULT))
  {
    v250 = *(_QWORD *)a4;
    v251 = *(_QWORD *)(a4 + 24);
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)&buf[4] = v250;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v251;
    _os_log_impl(&dword_1B8270000, v249, OS_LOG_TYPE_DEFAULT, "[POMMES][QU][qid=%lld][%s] Got an empty ranking query tree (using ALWAYS_FALSE_NODE)", buf, 0x16u);
  }
  *__error() = v248;
  v47 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E0040D742DA1DuLL);
  v47[20] = 16;
LABEL_247:
  if (v338 < 0)
    operator delete(v337[0]);
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)v343);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table((uint64_t)&v345);
  return v47;
}

void sub_1B8374CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  if (a33 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table((uint64_t)&a36);
  if (a46 < 0)
    operator delete(a41);
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)&a53);
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t getkQPQUOutputTokenInfoKey(void)
{
  void *v0;
  void *ParserLibrary;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkQPQUOutputTokenInfoKeySymbolLoc(void)::ptr;
  v7 = getkQPQUOutputTokenInfoKeySymbolLoc(void)::ptr;
  if (!getkQPQUOutputTokenInfoKeySymbolLoc(void)::ptr)
  {
    ParserLibrary = QueryParserLibrary();
    v0 = dlsym(ParserLibrary, "kQPQUOutputTokenInfoKey");
    v5[3] = (uint64_t)v0;
    getkQPQUOutputTokenInfoKeySymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
    return *(_QWORD *)v0;
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  result = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef  _Nullable getkQPQUOutputTokenInfoKey()"), CFSTR("PRQueryQUProcessor.mm"), 26, CFSTR("%s"), dlerror());
  __break(1u);
  return result;
}

void sub_1B8374F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

uint64_t getkQPQUOutputTokenKey(void)
{
  void *v0;
  void *ParserLibrary;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkQPQUOutputTokenKeySymbolLoc(void)::ptr;
  v7 = getkQPQUOutputTokenKeySymbolLoc(void)::ptr;
  if (!getkQPQUOutputTokenKeySymbolLoc(void)::ptr)
  {
    ParserLibrary = QueryParserLibrary();
    v0 = dlsym(ParserLibrary, "kQPQUOutputTokenKey");
    v5[3] = (uint64_t)v0;
    getkQPQUOutputTokenKeySymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
    return *(_QWORD *)v0;
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  result = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef  _Nullable getkQPQUOutputTokenKey()"), CFSTR("PRQueryQUProcessor.mm"), 23, CFSTR("%s"), dlerror());
  __break(1u);
  return result;
}

void sub_1B83750C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL16llmQURankingNodePKcffRKNSt3__113unordered_mapINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEfNS1_4hashIS8_EENS1_8equal_toIS8_EENS6_INS1_4pairIKS8_fEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  char **v3;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  float v8;
  float v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  if (a2)
  {
    v3 = *(char ***)(a2 + 16);
    if (v3)
    {
      v5 = *(_QWORD **)(a1 + 32);
      std::string::basic_string[abi:nn180100]<0>(v14, *v3);
      if (std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::find<std::string>(v5, (uint64_t)v14))
      {
        v6 = *(_QWORD **)(a1 + 32);
        std::string::basic_string[abi:nn180100]<0>(__p, **(char ***)(a2 + 16));
        v7 = std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::find<std::string>(v6, (uint64_t)__p);
        if (!v7)
          abort();
        v8 = *((float *)v7 + 10);
        if (v13 < 0)
          operator delete(__p[0]);
        v9 = v8 + v8;
      }
      else
      {
        v9 = 1.0;
      }
      if (v15 < 0)
        operator delete(v14[0]);
      v10 = *(_QWORD *)(a2 + 16);
      *(float *)(v10 + 52) = (float)(v9 * *(float *)(a1 + 40)) + (float)(v9 * *(float *)(a1 + 40));
      *(float *)(v10 + 56) = v9 * *(float *)(a1 + 44);
    }
  }
  return a2;
}

void sub_1B83751C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t getkQPQUOutputTokenRangeKey(void)
{
  void *v0;
  void *ParserLibrary;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkQPQUOutputTokenRangeKeySymbolLoc(void)::ptr;
  v7 = getkQPQUOutputTokenRangeKeySymbolLoc(void)::ptr;
  if (!getkQPQUOutputTokenRangeKeySymbolLoc(void)::ptr)
  {
    ParserLibrary = QueryParserLibrary();
    v0 = dlsym(ParserLibrary, "kQPQUOutputTokenRangeKey");
    v5[3] = (uint64_t)v0;
    getkQPQUOutputTokenRangeKeySymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
    return *(_QWORD *)v0;
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  result = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef  _Nullable getkQPQUOutputTokenRangeKey()"), CFSTR("PRQueryQUProcessor.mm"), 27, CFSTR("%s"), dlerror());
  __break(1u);
  return result;
}

void sub_1B83752C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkQPQUOutputTokenArgIdsKey(void)
{
  void *v0;
  void *ParserLibrary;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkQPQUOutputTokenArgIdsKeySymbolLoc(void)::ptr;
  v7 = getkQPQUOutputTokenArgIdsKeySymbolLoc(void)::ptr;
  if (!getkQPQUOutputTokenArgIdsKeySymbolLoc(void)::ptr)
  {
    ParserLibrary = QueryParserLibrary();
    v0 = dlsym(ParserLibrary, "kQPQUOutputTokenArgIdsKey");
    v5[3] = (uint64_t)v0;
    getkQPQUOutputTokenArgIdsKeySymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
    return *(_QWORD *)v0;
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  result = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef  _Nullable getkQPQUOutputTokenArgIdsKey()"), CFSTR("PRQueryQUProcessor.mm"), 24, CFSTR("%s"), dlerror());
  __break(1u);
  return result;
}

void sub_1B83753AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkQPQUOutputTokenArgScoresKey(void)
{
  void *v0;
  void *ParserLibrary;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkQPQUOutputTokenArgScoresKeySymbolLoc(void)::ptr;
  v7 = getkQPQUOutputTokenArgScoresKeySymbolLoc(void)::ptr;
  if (!getkQPQUOutputTokenArgScoresKeySymbolLoc(void)::ptr)
  {
    ParserLibrary = QueryParserLibrary();
    v0 = dlsym(ParserLibrary, "kQPQUOutputTokenArgScoresKey");
    v5[3] = (uint64_t)v0;
    getkQPQUOutputTokenArgScoresKeySymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
    return *(_QWORD *)v0;
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  result = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef  _Nullable getkQPQUOutputTokenArgScoresKey()"), CFSTR("PRQueryQUProcessor.mm"), 25, CFSTR("%s"), dlerror());
  __break(1u);
  return result;
}

void sub_1B8375494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>(_QWORD *a1, int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = (v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;

  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a3;
  else
    v7 = *(uint64_t **)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  if (!a2)
    return 0;
  v10 = v9;
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v11.i16[0] = vaddlv_u8(v11);
  v12 = v11.u32[0];
  if (v11.u32[0] > 1uLL)
  {
    v13 = v9;
    if (v9 >= a2)
      v13 = v9 % a2;
  }
  else
  {
    v13 = (a2 - 1) & v9;
  }
  v14 = *(unsigned __int8 ***)(a1 + 8 * v13);
  if (!v14)
    return 0;
  for (i = *v14; i; i = *(unsigned __int8 **)i)
  {
    v16 = *((_QWORD *)i + 1);
    if (v16 == v10)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a3))
        return i;
    }
    else
    {
      if (v12 > 1)
      {
        if (v16 >= a2)
          v16 %= a2;
      }
      else
      {
        v16 &= a2 - 1;
      }
      if (v16 != v13)
        return 0;
    }
  }
  return i;
}

uint64_t std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, const void **a2, char *__s)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  result = std::string::basic_string[abi:nn180100]((uint64_t)a1, v6 + v7);
  if (*((char *)a1 + 23) < 0)
    a1 = (_QWORD *)*a1;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a1, v9, v6);
  }
  v10 = (char *)a1 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t ___ZL13QURankingNodePKcRKNSt3__113unordered_mapIifNS1_4hashIiEENS1_8equal_toIiEENS1_9allocatorINS1_4pairIKifEEEEEEffRKNS2_INS1_12basic_stringIcNS1_11char_traitsIcEENS7_IcEEEEfNS3_ISJ_EENS5_ISJ_EENS7_INS8_IKSJ_fEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  char **v3;
  _QWORD *v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  float v8;
  float v9;
  float v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  int *v18;
  int *v19;
  _QWORD *v20;
  float v21;
  int *v22;
  uint64_t *v23;
  float v24;
  void *__p[2];
  char v27;
  void *v28[2];
  char v29;

  if (a2)
  {
    v3 = *(char ***)(a2 + 16);
    if (v3)
    {
      v5 = *(_QWORD **)(a1 + 32);
      std::string::basic_string[abi:nn180100]<0>(v28, *v3);
      if (std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::find<std::string>(v5, (uint64_t)v28))
      {
        v6 = *(_QWORD **)(a1 + 32);
        std::string::basic_string[abi:nn180100]<0>(__p, **(char ***)(a2 + 16));
        v7 = std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::find<std::string>(v6, (uint64_t)__p);
        if (!v7)
          abort();
        v8 = *((float *)v7 + 10);
        if (v27 < 0)
          operator delete(__p[0]);
        v9 = v8 + v8;
      }
      else
      {
        v9 = 1.0;
      }
      if (v29 < 0)
        operator delete(v28[0]);
      v10 = v9 * *(float *)(a1 + 48);
      v11 = *(_QWORD *)(a2 + 16);
      *(float *)(v11 + 52) = v10;
      *(_DWORD *)(v11 + 56) = *(_DWORD *)(a1 + 52);
      if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) && *(_QWORD *)v11)
      {
        std::string::basic_string[abi:nn180100]<0>(__p, *(char **)v11);
        if ((v12 & 1) == 0
        {
          SpotlightU2AttributesToArgIDs(void)::_spotlightU2AttributesToArgIDs = 0u;
          *(_OWORD *)&qword_1EF1AD1E0 = 0u;
          dword_1EF1AD1F0 = 1065353216;
          __cxa_atexit((void (*)(void *))std::unordered_map<std::string,std::vector<int>>::~unordered_map[abi:nn180100], &SpotlightU2AttributesToArgIDs(void)::_spotlightU2AttributesToArgIDs, &dword_1B8270000);
        }
        if (SpotlightU2AttributesToArgIDs(void)::onceToken != -1)
          dispatch_once(&SpotlightU2AttributesToArgIDs(void)::onceToken, &__block_literal_global_59);
        v13 = std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::find<std::string>((uint64_t)__p);
        if (!v13)
        {
          std::string::basic_string[abi:nn180100]<0>(v28, "default");
          v14 = std::__hash_table<std::__hash_value_type<std::string,std::vector<int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<int>>>>::find<std::string>((uint64_t)v28);
          if (!v14)
            abort();
          v13 = v14;
          if (v29 < 0)
            operator delete(v28[0]);
        }
        v16 = (_BYTE *)*((_QWORD *)v13 + 5);
        v15 = (_BYTE *)*((_QWORD *)v13 + 6);
        v17 = v15 - v16;
        if (v15 == v16)
        {
          v18 = 0;
          v19 = 0;
        }
        else
        {
          if (v15 - v16 < 0)
            abort();
          v18 = (int *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v17 >> 2);
          memmove(v18, v16, v17);
          v19 = &v18[v17 >> 2];
        }
        if (v27 < 0)
          operator delete(__p[0]);
        if (v18 != v19)
        {
          v20 = *(_QWORD **)(a1 + 40);
          v21 = 0.0;
          v22 = v18;
          do
          {
            v23 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>(v20, *v22);
            if (v23 && v21 < *((float *)v23 + 5))
              v21 = *((float *)v23 + 5);
            ++v22;
          }
          while (v22 != v19);
          if (v21 > 0.0)
          {
            v24 = v21 * 0.1 + 0.9;
            *(float *)(*(_QWORD *)(a2 + 16) + 52) = v10 * (float)(v24 + v24);
          }
        }
        if (v18)
          operator delete(v18);
      }
    }
  }
  return a2;
}

void sub_1B8375A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

char *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  char *v16;
  unint64_t v17;
  std::string *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      v16 = (char *)*v15;
      if (*v15)
      {
        do
        {
          v17 = *((_QWORD *)v16 + 1);
          if (v17 == v10)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v16 + 16, (unsigned __int8 *)a2))
            {
              return v16;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v17 >= v11)
                v17 %= v11;
            }
            else
            {
              v17 &= v11 - 1;
            }
            if (v17 != v14)
              break;
          }
          v16 = *(char **)v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v16 = (char *)operator new(0x30uLL);
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v10;
  v18 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v16 + 10) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)v16 = *v26;
LABEL_47:
    *v26 = v16;
    goto LABEL_48;
  }
  *(_QWORD *)v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)v16)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_47;
  }
LABEL_48:
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

void sub_1B8375CF4(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:nn180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *defaultMatchQueryNodeForQURetrieval(char *__s, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t *v6;
  _QWORD *v9;
  int v10;
  const char *v11;
  void *QueryNode;
  const char *v13;

  if (!a3)
    return 0;
  v6 = a3;
  v9 = 0;
  v10 = a5 << 31 >> 31;
  do
  {
    v11 = (const char *)(v6 + 2);
    if (*((char *)v6 + 39) < 0)
      v11 = *(const char **)v11;
    QueryNode = (void *)createQueryNode(v11, __s, a2, 1, v10, *((float *)v6 + 10), *((float *)v6 + 10));
    if (*(_BYTE *)(a4 + 20) && !strcmp(v11, "kMDItemTextContent"))
    {
      v13 = createQueryNode("_kMDItemBundleID", "com.apple.mobilesafari", 0, 5, 0, 0.0, 0.0);
      QueryNode = makeAndNode((uint64_t)QueryNode, (uint64_t)v13);
    }
    v9 = makeOrNode((uint64_t)v9, (uint64_t)QueryNode);
    v6 = (uint64_t *)*v6;
  }
  while (v6);
  return v9;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(void **__p)
{
  void **v1;
  void **v2;

  if (__p)
  {
    v1 = __p;
    do
    {
      v2 = (void **)*v1;
      if (*((char *)v1 + 39) < 0)
        operator delete(v1[2]);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

BOOL std::equal_to<std::string>::operator()[abi:nn180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:nn180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::find<std::string>(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  int8x8_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (uint64_t *)a2;
  else
    v5 = *(uint64_t **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v5, v6);
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
  v9 = v7;
  v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  v11 = v10.u32[0];
  if (v10.u32[0] > 1uLL)
  {
    v12 = v7;
    if (v7 >= *(_QWORD *)&v8)
      v12 = v7 % *(_QWORD *)&v8;
  }
  else
  {
    v12 = (*(_QWORD *)&v8 - 1) & v7;
  }
  v13 = *(unsigned __int8 ***)(*a1 + 8 * v12);
  if (!v13)
    return 0;
  for (i = *v13; i; i = *(unsigned __int8 **)i)
  {
    v15 = *((_QWORD *)i + 1);
    if (v9 == v15)
    {
      if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
        return i;
    }
    else
    {
      if (v11 > 1)
      {
        if (v15 >= *(_QWORD *)&v8)
          v15 %= *(_QWORD *)&v8;
      }
      else
      {
        v15 &= *(_QWORD *)&v8 - 1;
      }
      if (v15 != v12)
        return 0;
    }
  }
  return i;
}

char *std::vector<int>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(4 * a1);
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void *QueryParserLibrary(void)
{
  void *v0;
  void *v2;

  if (!QueryParserLibraryCore(char **)::frameworkLibrary)
    QueryParserLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = (void *)QueryParserLibraryCore(char **)::frameworkLibrary;
  if (!QueryParserLibraryCore(char **)::frameworkLibrary)
  {
    v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
    v2 = (void *)objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *QueryParserLibrary()"), CFSTR("PRQueryQUProcessor.mm"), 22, CFSTR("%s"), 0);
    __break(1u);
    free(v2);
  }
  return v0;
}

uint64_t si_oid64psid_transient_path_to_oid()
{
  *__error() = 45;
  return 0;
}

uint64_t si_transient_oid64psid_oid_to_path()
{
  *__error() = 45;
  return 0;
}

void si_oid64psid_destruct(uint64_t a1)
{
  free(*(void **)(a1 + 16));
}

char *si_oid64psid_oid_to_path(uint64_t a1, uint64_t a2, char *a3)
{
  char *v3;
  uint64_t v6;
  ssize_t v7;
  int v10;
  NSObject *v11;
  int32_t v12;
  uint64_t st_ino;
  stat v14;
  fsid_t f_fsid;
  char __s1[779];
  statfs v17;
  uint64_t v18;

  v3 = a3;
  v18 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 16);
  if (fsgetpath(a3, 0x400uLL, (fsid_t *)(v6 + 4), a2) < 2)
  {
    if (dword_1EF19FCA4 >= 5)
    {
      v10 = *__error();
      v11 = _SILogForLogForCategory(6);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v12 = *(_DWORD *)(v6 + 16);
        v17.f_bsize = 67109376;
        v17.f_iosize = v12;
        LOWORD(v17.f_blocks) = 2048;
        *(uint64_t *)((char *)&v17.f_blocks + 2) = a2;
        _os_log_impl(&dword_1B8270000, v11, OS_LOG_TYPE_DEFAULT, "fsgetpath like %d/%llx\n", (uint8_t *)&v17, 0x12u);
      }
      v3 = 0;
      *__error() = v10;
    }
    else
    {
      return 0;
    }
  }
  else if (*(_QWORD *)(a1 + 168)
         && (strstr(v3, ".migratedphotolibrary/")
          || strstr(v3, ".migratedaplibrary/")
          || strstr(v3, ".photolibrary/")
          || strstr(v3, ".aplibrary/")))
  {
    memset(&v14, 0, sizeof(v14));
    bzero(&v17, 0x878uLL);
    if (!stat(v3, &v14) && (v14.st_mode & 0xF000) == 0x8000 && v14.st_nlink >= 2u && !statfs(v3, &v17))
    {
      st_ino = v14.st_ino;
      do
      {
        bzero(__s1, 0x400uLL);
        f_fsid = v17.f_fsid;
        if ((*(unsigned int (**)(uint64_t, uint64_t *))(a1 + 168))(a1, &st_ino))
          break;
        v7 = fsgetpath(__s1, 0x400uLL, &f_fsid, st_ino);
        if (v7 > 2 && strstr(__s1, ".photoslibrary/"))
        {
          strlcpy(v3, __s1, 0x400uLL);
          return v3;
        }
      }
      while (v7 >= 2 && st_ino != 0);
    }
  }
  return v3;
}

char *si_oid64psid_fast_oid_to_path(uint64_t a1, uint64_t a2, char *a3)
{
  char *v3;
  uint64_t v4;
  statfs v6;
  uint64_t v7;

  v3 = a3;
  v7 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 == 2)
  {
    bzero(&v6, 0x878uLL);
    if (fstatfs(*(_DWORD *)(v4 + 24), &v6))
      return 0;
    else
      strlcpy(v3, v6.f_mntonname, 0x400uLL);
  }
  else if ((*(_WORD *)(v4 + 20) & 0x10) != 0)
  {
    sprintf(a3, "/.vol/%llu/%llu", *(int *)(v4 + 16), a2);
  }
  else
  {
    v3 = 0;
    *__error() = 45;
  }
  return v3;
}

__darwin_ino64_t si_oid64psid_path_to_oid(int a1, char *a2, uint64_t a3)
{
  stat v4;

  if (!a3)
  {
    memset(&v4, 0, sizeof(v4));
    if (md_stat_real(a2, &v4))
      return 0;
    else
      return v4.st_ino;
  }
  return a3;
}

uint64_t si_oid64psid_path_to_oid_path(uint64_t a1)
{
  _BYTE *v1;
  __darwin_ino64_t *v2;
  int v3;
  _BYTE *v4;
  int v5;
  __darwin_ino64_t *v6;
  _BYTE *v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  _BOOL8 v14;
  uint64_t v15;
  int v16;
  char *v17;
  __darwin_ino64_t st_ino;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  dev_t st_dev;
  uint64_t v27;
  char *v29;
  stat v30;
  _QWORD v31[513];
  char v32[1024];
  _QWORD v33[130];

  MEMORY[0x1E0C80A78](a1);
  v33[128] = *MEMORY[0x1E0C80C00];
  if (v1)
  {
    v4 = v1;
    if (*v1 == 47)
    {
      v5 = v3;
      v6 = v2;
      v7 = v33;
      bzero(v33, 0x400uLL);
      v8 = 0;
      v9 = 0;
      v10 = 47;
      while (v9 != 1024)
      {
        v11 = v10;
        v12 = v10 == 47;
        if (v10 != 47 || !v8)
          *v7++ = v10;
        v10 = v4[++v9];
        v8 = v12;
        if (!v10)
        {
          v14 = v11 == 47 && v7 - (_BYTE *)v33 > 1;
          v7[-v14] = 0;
          v15 = &v7[!v14] - (_BYTE *)v33;
          bzero(v32, 0x400uLL);
          v16 = 0;
          v17 = &v32[v15];
          memset(&v30, 0, sizeof(v30));
          while (1)
          {
            __memcpy_chk();
            if (md_stat_real(v32, &v30))
            {
              st_ino = 0;
              v19 = 0;
            }
            else
            {
              st_ino = v30.st_ino;
              if (v5)
              {
                *v6 = v30.st_ino;
                v19 = 1;
              }
              else
              {
                v19 = 0;
              }
              v25 = v17;
              if (v15 >= 1)
              {
                v25 = v17;
                while (*v25 != 47)
                {
                  if (--v25 <= v32)
                    goto LABEL_40;
                }
                *v25 = 0;
              }
LABEL_40:
              if (v25 != v32)
              {
                v29 = v17;
                st_dev = v30.st_dev;
                v19 = v19;
                while (!md_stat_real(v32, &v30) && v30.st_dev == st_dev)
                {
                  v6[v19] = v30.st_ino;
                  if (v25 > v32)
                  {
                    while (*v25 != 47)
                    {
                      if (--v25 <= v32)
                      {
                        v25 = v32;
                        goto LABEL_49;
                      }
                    }
                    *v25 = 0;
                  }
LABEL_49:
                  ++v19;
                  if (v25 == v32)
                  {
                    v17 = v29;
                    goto LABEL_53;
                  }
                }
                v17 = v29;
              }
              if ((_DWORD)v19)
              {
LABEL_53:
                if (v6[(int)v19 - 1] != 2)
                {
                  v27 = (int)v19;
                  v19 = (v19 + 1);
                  v6[v27] = 2;
                }
              }
            }
            v20 = (_DWORD)v19 ? v5 : 1;
            if ((int)v19 <= 1 && (v20 & 1) != 0)
              return v19;
            bzero(v31, 0x1008uLL);
            __memcpy_chk();
            if ((v5 & 1) == 0)
              v31[(int)v19] = st_ino;
            v21 = v19 + (v5 ^ 1);
            qsort_oids((uint64_t)v31, (int)v21);
            if ((int)v21 < 2)
              return v19;
            v22 = v31[0];
            v23 = 1;
            while (1)
            {
              v24 = v31[v23];
              if (v24 == v22)
                break;
              ++v23;
              v22 = v24;
              if (v21 == v23)
                return v19;
            }
            if (v16 == 100)
              return 0;
            ++v16;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t si_oid64psid_close(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  result = *(unsigned int *)(v1 + 24);
  if ((result & 0x80000000) == 0)
  {
    result = close(result);
    *(_DWORD *)(v1 + 24) = -1;
  }
  return result;
}

void si_psid_destruct(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  pthread_mutex_destroy((pthread_mutex_t *)(v1 + 2080));
  free(*(void **)(v1 + 2072));
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
  {
    if (*(_BYTE *)(v1 + 2))
      release_persistent_id_64_store(v2);
    else
      release_persistent_id_store(v2);
  }
  _Block_release(*(const void **)(v1 + 2144));
  free((void *)v1);
}

void *si_psid_oid_to_path(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  pthread_mutex_t *v6;
  uint64_t v7;
  int path_for_id_64;
  void *v9;
  uint64_t v10;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v14 = 0;
  v6 = (pthread_mutex_t *)(v5 + 2080);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 2080));
  if (*(_BYTE *)v5)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (*(_BYTE *)(v5 + 2))
      path_for_id_64 = get_path_for_id_64(v7, a2, &v14, a3 + *(unsigned int *)(v5 + 2064), 1024 - *(_DWORD *)(v5 + 2064));
    else
      path_for_id_64 = get_path_for_id(v7, a2, &v14, a3 + *(unsigned int *)(v5 + 2064), 1024 - *(_DWORD *)(v5 + 2064));
    if (path_for_id_64)
    {
      v9 = 0;
      *__error() = path_for_id_64;
    }
    else
    {
      v10 = *(int *)(v5 + 2064);
      if (*(_BYTE *)(v5 + 16 + v10 - 1) == 47)
        LODWORD(v10) = v10 - 1;
      v9 = (void *)(v14 - (int)v10);
      memcpy(v9, (const void *)(v5 + 16), (int)v10);
    }
  }
  else
  {
    v9 = 0;
  }
  if (dword_1EF19FCA4 >= 5)
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(6);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v16 = v9;
      v17 = 2048;
      v18 = a2;
      _os_log_impl(&dword_1B8270000, v13, OS_LOG_TYPE_DEFAULT, "found %s for %llx\n", buf, 0x16u);
    }
    *__error() = v12;
  }
  pthread_mutex_unlock(v6);
  return v9;
}

uint64_t si_psid_path_to_oid(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  const char *v8;
  size_t v9;
  size_t v10;
  int id_for_path;
  int v13;
  int v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  const char *v18;
  int v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 16);
  v22 = 0;
  v23 = 0;
  pthread_mutex_lock((pthread_mutex_t *)(v7 + 2080));
  if (a5)
  {
    if (!*(_BYTE *)v7)
      goto LABEL_18;
    v8 = (const char *)(v7 + 16);
    v9 = *(unsigned int *)(v7 + 2064);
    if (!strncmp(a2, (const char *)(v7 + 16), v9))
    {
      if (*(_BYTE *)(v7 + 2))
      {
        if (!get_id_for_path_64(*(_QWORD *)(v7 + 8), &a2[v9], &v23, &v22, 1, *(_QWORD *)(v7 + 2144)))
          goto LABEL_18;
      }
      else
      {
        *(_DWORD *)buf = 0;
        v21 = 0;
        id_for_path = get_id_for_path(*(_QWORD *)(v7 + 8), &a2[v9], (int *)buf, &v21, 1);
        v23 = *(unsigned int *)buf;
        v22 = v21;
        if (!id_for_path)
          goto LABEL_18;
      }
      if (dword_1EF19FCA4 >= 5)
      {
        v19 = *__error();
        v20 = _SILogForLogForCategory(6);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v20, OS_LOG_TYPE_DEFAULT, "Got error\n", buf, 2u);
        }
        *__error() = v19;
      }
LABEL_17:
      v23 = 0;
      goto LABEL_18;
    }
    goto LABEL_9;
  }
  if (!*(_BYTE *)v7)
    goto LABEL_18;
  v8 = (const char *)(v7 + 16);
  v9 = *(unsigned int *)(v7 + 2064);
  if (strncmp(a2, (const char *)(v7 + 16), v9))
  {
LABEL_9:
    v10 = strlen(a2);
    if (v10 == (_DWORD)v9 - 1 && !strncmp(a2, v8, v10))
      v23 = 2;
    goto LABEL_18;
  }
  if (*(_BYTE *)(v7 + 2))
  {
    if (get_id_for_path_64(*(_QWORD *)(v7 + 8), &a2[v9], &v23, &v22, 0, *(_QWORD *)(v7 + 2144)))
      goto LABEL_17;
  }
  else
  {
    *(_DWORD *)buf = 0;
    v21 = 0;
    v13 = get_id_for_path(*(_QWORD *)(v7 + 8), &a2[v9], (int *)buf, &v21, 0);
    v23 = *(unsigned int *)buf;
    v22 = v21;
    if (v13)
      goto LABEL_17;
  }
LABEL_18:
  pthread_mutex_unlock((pthread_mutex_t *)(v7 + 2080));
  if (dword_1EF19FCA4 >= 5)
  {
    v14 = *__error();
    v15 = _SILogForLogForCategory(6);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218242;
      v25 = v23;
      v26 = 2080;
      v27 = a2;
      _os_log_impl(&dword_1B8270000, v15, OS_LOG_TYPE_DEFAULT, "found %llx for %s\n", buf, 0x16u);
    }
    *__error() = v14;
    if (dword_1EF19FCA4 >= 5)
    {
      v16 = *__error();
      v17 = _SILogForLogForCategory(6);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v18 = &a2[*(unsigned int *)(v7 + 2064)];
        *(_DWORD *)buf = 134218242;
        v25 = v23;
        v26 = 2080;
        v27 = v18;
        _os_log_impl(&dword_1B8270000, v17, OS_LOG_TYPE_DEFAULT, "found %llx for %s\n", buf, 0x16u);
      }
      *__error() = v16;
    }
  }
  return v23;
}

uint64_t si_psid_path_to_oid_path(uint64_t a1, const char *a2, uint64_t a3, _QWORD *a4, char a5, uint64_t a6, char a7)
{
  uint64_t v11;
  const char *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  int v18;
  uint64_t v19;
  size_t v20;
  uint64_t v21;

  v11 = *(_QWORD *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v11 + 2080));
  if ((a7 & 1) == 0)
  {
    if (*(_BYTE *)v11)
    {
      v12 = (const char *)(v11 + 16);
      v13 = *(unsigned int *)(v11 + 2064);
      if (!strncmp(a2, (const char *)(v11 + 16), v13))
      {
        v14 = *(_QWORD *)(v11 + 8);
        v15 = (uint64_t)&a2[v13];
        v16 = a4;
        v17 = a5;
        v18 = 0;
        if (*(_BYTE *)(v11 + 2))
        {
LABEL_5:
          v19 = psid64_oidPathForPath(v14, v15, v16, v17, v18);
LABEL_13:
          v21 = v19;
          goto LABEL_14;
        }
LABEL_12:
        v19 = psid32_oidPathForPath(v14, v15, v16, v17, v18);
        goto LABEL_13;
      }
      goto LABEL_8;
    }
LABEL_10:
    v21 = 0;
    goto LABEL_14;
  }
  if (!*(_BYTE *)v11)
    goto LABEL_10;
  v12 = (const char *)(v11 + 16);
  v13 = *(unsigned int *)(v11 + 2064);
  if (!strncmp(a2, (const char *)(v11 + 16), v13))
  {
    v14 = *(_QWORD *)(v11 + 8);
    v15 = (uint64_t)&a2[v13];
    v16 = a4;
    v17 = a5;
    v18 = 1;
    if (*(_BYTE *)(v11 + 2))
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_8:
  v20 = strlen(a2);
  if (v20 != (_DWORD)v13 - 1)
    goto LABEL_10;
  v21 = 2 * (strncmp(a2, v12, v20) == 0);
LABEL_14:
  pthread_mutex_unlock((pthread_mutex_t *)(v11 + 2080));
  return v21;
}

uint64_t si_psid_set_root_path(uint64_t a1, const char *a2)
{
  return si_psid_set_root_path2(a1, a2, a2);
}

BOOL si_psid_check_perms(uint64_t a1, int64_t a2, uint64_t a3, void *a4, uint64_t a5, _BYTE *a6, uint64_t a7, int a8)
{
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char v18;
  int v19;
  stat v21;
  uint64_t v22;
  _BYTE v23[1024];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  bzero(v23, 0x400uLL);
  if (a2 >= 1)
  {
    v14 = 0;
    v15 = 0;
    v16 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      if (!*((_BYTE *)a4 + v15))
      {
        if (a6 && *a6)
        {
          memset(a4, 1, a2);
          return v14;
        }
        v17 = (const char *)si_psid_oid_to_path(a1, *(_QWORD *)(a3 + 8 * v15), (uint64_t)v23);
        if (v17)
        {
          if (*(_BYTE *)(v16 + 1) && (a8 & 1) == 0)
          {
            v22 = 0;
            *(_OWORD *)&v21.st_dev = xmmword_1B862C198;
            *(_QWORD *)&v21.st_uid = 0;
            if (getattrlist(v17, &v21, &v22, 8uLL, 0))
            {
LABEL_18:
              if (*__error() == 2)
                v18 = 2;
              else
                v18 = 1;
            }
            else
            {
              v18 = (v22 & 0x400000000) == 0;
            }
            *((_BYTE *)a4 + v15) = v18;
            goto LABEL_22;
          }
          if (a8)
          {
            memset(&v21, 0, sizeof(v21));
            if (stat(v17, &v21) < 0)
              goto LABEL_18;
          }
          else
          {
            v19 = open(v17, 0);
            if (v19 < 0)
              goto LABEL_18;
            close(v19);
          }
          *((_BYTE *)a4 + v15) = 0;
        }
        else
        {
          *((_BYTE *)a4 + v15) = 2;
        }
      }
LABEL_22:
      v14 = ++v15 >= a2;
      if (a2 == v15)
        return v14;
    }
  }
  return 1;
}

uint64_t si_psid_sync(uint64_t a1)
{
  uint64_t v1;
  pthread_mutex_t *v2;
  uint64_t *v3;
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  const char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 16);
  v2 = (pthread_mutex_t *)(v1 + 2080);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 2080));
  if (*(_BYTE *)v1)
  {
    v3 = *(uint64_t **)(v1 + 8);
    if (*(_BYTE *)(v1 + 2))
    {
      if ((unint64_t)v3[4] <= 0x7FFFFFFFFFFFFFFELL)
      {
        v4 = *__error();
        v5 = _SILogForLogForCategory(4);
        v6 = 2 * (dword_1EF19FC9C < 4);
        if (os_log_type_enabled(v5, v6))
        {
          v7 = (const char *)v3[4];
          *(_DWORD *)buf = 134217984;
          v35 = v7;
          v8 = "sync_psid_64_store: danger! master_fid %lld looks bad. not syncing.\n";
          v9 = v5;
          v10 = v6;
          v11 = 12;
LABEL_10:
          _os_log_impl(&dword_1B8270000, v9, v10, v8, buf, v11);
          goto LABEL_11;
        }
        goto LABEL_11;
      }
      v33 = v3[4];
      v16 = _sqlite_insert(v3, (char *)&master_fid_rec_3560, master_fid_rec_size_3562, (char *)&v33, 8, 0);
      if ((_DWORD)v16)
      {
        v12 = v16;
        v4 = *__error();
        v17 = _SILogForLogForCategory(4);
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          goto LABEL_36;
        v18 = v3[4];
        *(_DWORD *)buf = 136315650;
        v35 = "sync_persistent_id_64_store";
        v36 = 1024;
        v37 = 331;
        v38 = 2048;
        v39 = v18;
        v19 = "%s:%d: psid-sync: Failed to update the master fid! (0x%llx)\n";
        v20 = v17;
        v21 = 28;
LABEL_18:
        _os_log_error_impl(&dword_1B8270000, v20, OS_LOG_TYPE_ERROR, v19, buf, v21);
        goto LABEL_36;
      }
      v25 = (uint64_t *)v3[2];
      if (v25)
      {
        sqlite3BtreeCloseCursor(v25);
        v3[2] = 0;
      }
      v26 = sqlite3BtreeSync(*v3);
      if ((_DWORD)v26)
      {
        v12 = v26;
        v4 = *__error();
        v27 = _SILogForLogForCategory(4);
        v28 = 2 * (dword_1EF19FC9C < 4);
        if (!os_log_type_enabled(v27, v28))
          goto LABEL_36;
        *(_DWORD *)buf = 67109120;
        LODWORD(v35) = v12;
        v29 = "Couldn't sync btree; rc = %d\n";
LABEL_35:
        _os_log_impl(&dword_1B8270000, v27, v28, v29, buf, 8u);
        goto LABEL_36;
      }
      v12 = sqlite3BtreeCommit(*v3);
      if ((_DWORD)v12)
      {
        v4 = *__error();
        v27 = _SILogForLogForCategory(4);
        v28 = 2 * (dword_1EF19FC9C < 4);
        if (!os_log_type_enabled(v27, v28))
          goto LABEL_36;
        *(_DWORD *)buf = 67109120;
        LODWORD(v35) = v12;
        v29 = "Couldn't commit; rc = %d\n";
        goto LABEL_35;
      }
    }
    else
    {
      if (*((_DWORD *)v3 + 8) <= 0x63u)
      {
        v4 = *__error();
        v13 = _SILogForLogForCategory(4);
        v14 = 2 * (dword_1EF19FC9C < 4);
        if (os_log_type_enabled(v13, v14))
        {
          v15 = *((_DWORD *)v3 + 8);
          *(_DWORD *)buf = 67109120;
          LODWORD(v35) = v15;
          v8 = "sync_psid_store: danger! master_fid %d looks bad. not syncing.\n";
          v9 = v13;
          v10 = v14;
          v11 = 8;
          goto LABEL_10;
        }
LABEL_11:
        v12 = 22;
LABEL_36:
        *__error() = v4;
        goto LABEL_37;
      }
      LODWORD(v33) = *((_DWORD *)v3 + 8);
      v22 = _sqlite_insert(v3, (char *)&master_fid_rec, master_fid_rec_size, (char *)&v33, 4, 0);
      if ((_DWORD)v22)
      {
        v12 = v22;
        v4 = *__error();
        v23 = _SILogForLogForCategory(4);
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          goto LABEL_36;
        v24 = *((_DWORD *)v3 + 8);
        *(_DWORD *)buf = 136315650;
        v35 = "sync_persistent_id_store";
        v36 = 1024;
        v37 = 331;
        v38 = 1024;
        LODWORD(v39) = v24;
        v19 = "%s:%d: psid-sync: Failed to update the master fid! (0x%x)\n";
        v20 = v23;
        v21 = 24;
        goto LABEL_18;
      }
      v30 = (uint64_t *)v3[2];
      if (v30)
      {
        sqlite3BtreeCloseCursor(v30);
        v3[2] = 0;
      }
      v31 = sqlite3BtreeSync(*v3);
      if ((_DWORD)v31)
      {
        v12 = v31;
        v4 = *__error();
        v27 = _SILogForLogForCategory(4);
        v28 = 2 * (dword_1EF19FC9C < 4);
        if (!os_log_type_enabled(v27, v28))
          goto LABEL_36;
        *(_DWORD *)buf = 67109120;
        LODWORD(v35) = v12;
        v29 = "Couldn't sync btree; rc = %d\n";
        goto LABEL_35;
      }
      v12 = sqlite3BtreeCommit(*v3);
      if ((_DWORD)v12)
      {
        v4 = *__error();
        v27 = _SILogForLogForCategory(4);
        v28 = 2 * (dword_1EF19FC9C < 4);
        if (!os_log_type_enabled(v27, v28))
          goto LABEL_36;
        *(_DWORD *)buf = 67109120;
        LODWORD(v35) = v12;
        v29 = "Couldn't commit; rc = %d\n";
        goto LABEL_35;
      }
    }
  }
  else
  {
    v12 = 0xFFFFFFFFLL;
  }
LABEL_37:
  pthread_mutex_unlock(v2);
  return v12;
}

uint64_t si_psid_rename(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v5;
  pthread_mutex_t *v6;
  size_t v7;
  uint64_t *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  NSObject *v18;
  const char *v19;
  unint64_t v20;
  int v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  char *v25;
  char *v26;
  int v27;
  NSObject *v28;
  int v29;
  int v30;
  int v32;
  uint64_t v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  _BYTE v41[10];
  __int16 v42;
  unint64_t v43;
  char __dst[1024];
  _DWORD v45[70];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (pthread_mutex_t *)(v5 + 2080);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 2080));
  if (*(_BYTE *)v5)
  {
    v7 = *(unsigned int *)(v5 + 2064);
    if (!strncmp(a2, (const char *)(v5 + 16), v7) && !strncmp(a3, (const char *)(v5 + 16), v7))
    {
      v8 = *(uint64_t **)(v5 + 8);
      v9 = (char *)&a2[v7];
      v10 = (char *)&a3[v7];
      if (*(_BYTE *)(v5 + 2))
      {
        rename_path_64(*(uint64_t **)(v5 + 8), v9, v10, *(_QWORD *)(v5 + 2144));
        return pthread_mutex_unlock(v6);
      }
      v33 = 0;
      remove_path(v8, v10);
      if (!get_id_for_path((uint64_t)v8, v9, (int *)&v33 + 1, &v33, 0))
      {
        strncpy(__dst, v10, 0x400uLL);
        __dst[1023] = 0;
        v11 = strrchr(__dst, 47);
        if (v11)
        {
          v12 = v11;
          *v11 = 0;
        }
        else
        {
          v12 = &__dst[-(__dst[0] != 47)];
        }
        v32 = 0;
        if (!get_id_for_path((uint64_t)v8, __dst, &v32, 0, 1))
        {
          memset(v45, 0, 268);
          v13 = strncpy((char *)((unint64_t)v45 | 0xA), v12 + 1, 0x100uLL);
          BYTE1(v45[66]) = 0;
          v14 = strlen(v13);
          v45[0] = v32;
          LOWORD(v45[2]) = v14 + 1;
          v15 = _sqlite_bulkBegin((uint64_t)v8);
          if (v15)
          {
            v16 = v15;
            v17 = *__error();
            v18 = _SILogForLogForCategory(4);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              v35 = "rename_path";
              v36 = 1024;
              v37 = 913;
              v38 = 1024;
              v39 = v16;
              v40 = 1024;
              *(_DWORD *)v41 = HIDWORD(v33);
              *(_WORD *)&v41[4] = 1024;
              *(_DWORD *)&v41[6] = v45[0];
              v42 = 2080;
              v43 = (unint64_t)v45 | 0xA;
              v19 = "%s:%d: psid-rename: begin error %d updating the file-fid record for fid %d pid %d / %s. \n";
LABEL_32:
              _os_log_error_impl(&dword_1B8270000, v18, OS_LOG_TYPE_ERROR, v19, buf, 0x2Eu);
              goto LABEL_29;
            }
            goto LABEL_29;
          }
          v20 = v14 + 13;
          if (_sqlite_insert(v8, (char *)&v33 + 4, 4uLL, (char *)v45, v14 + 13, 1))
          {
            v21 = *__error();
            v22 = _SILogForLogForCategory(4);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              v35 = "rename_path";
              v36 = 1024;
              v37 = 921;
              v38 = 1024;
              v39 = HIDWORD(v33);
              _os_log_error_impl(&dword_1B8270000, v22, OS_LOG_TYPE_ERROR, "%s:%d: psid-rename: Could not update the file-fid record for fid %d\n", buf, 0x18u);
            }
            *__error() = v21;
          }
          if (_sqlite_insert(v8, (char *)v45, v20, (char *)&v33 + 4, 4, 1))
          {
            v23 = *__error();
            v24 = _SILogForLogForCategory(4);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315906;
              v35 = "rename_path";
              v36 = 1024;
              v37 = 929;
              v38 = 1024;
              v39 = v45[0];
              v40 = 2080;
              *(_QWORD *)v41 = (unint64_t)v45 | 0xA;
              _os_log_error_impl(&dword_1B8270000, v24, OS_LOG_TYPE_ERROR, "%s:%d: psid-rename: failed to insert new record for %d / %s.\n", buf, 0x22u);
            }
            *__error() = v23;
          }
          v45[0] = v33;
          v25 = strrchr(v9, 47);
          if (v25)
          {
            v26 = strncpy((char *)((unint64_t)v45 | 0xA), v25 + 1, 0x100uLL);
            BYTE1(v45[66]) = 0;
            LOWORD(v45[2]) = strlen(v26) + 1;
            if (_sqlite_delete((uint64_t)v8, (uint64_t)v45, LOWORD(v45[2]) + 12))
            {
              v27 = *__error();
              v28 = _SILogForLogForCategory(4);
              if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315906;
                v35 = "rename_path";
                v36 = 1024;
                v37 = 951;
                v38 = 1024;
                v39 = v45[0];
                v40 = 2080;
                *(_QWORD *)v41 = (unint64_t)v45 | 0xA;
                _os_log_error_impl(&dword_1B8270000, v28, OS_LOG_TYPE_ERROR, "%s:%d: psid-rename: failed to delete old record for %d / %s\n", buf, 0x22u);
              }
              *__error() = v27;
            }
          }
          v29 = _sqlite_bulkEnd(v8);
          if (v29)
          {
            v30 = v29;
            v17 = *__error();
            v18 = _SILogForLogForCategory(4);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316418;
              v35 = "rename_path";
              v36 = 1024;
              v37 = 957;
              v38 = 1024;
              v39 = v30;
              v40 = 1024;
              *(_DWORD *)v41 = HIDWORD(v33);
              *(_WORD *)&v41[4] = 1024;
              *(_DWORD *)&v41[6] = v45[0];
              v42 = 2080;
              v43 = (unint64_t)v45 | 0xA;
              v19 = "%s:%d: psid-rename: end error %d updating the file-fid record for fid %d pid %d / %s. \n";
              goto LABEL_32;
            }
LABEL_29:
            *__error() = v17;
          }
        }
      }
    }
  }
  return pthread_mutex_unlock(v6);
}

uint64_t si_psid_delete(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  _BYTE v7[1024];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  v6 = 0;
  bzero(v7, 0x400uLL);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 2080));
  if (*(_BYTE *)v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (*(_BYTE *)(v3 + 2))
    {
      if (!get_path_for_id_64(v4, a2, &v6, (uint64_t)&v7[*(unsigned int *)(v3 + 2064)], 1024 - *(_DWORD *)(v3 + 2064)))remove_path_64(*(uint64_t **)(v3 + 8), v6);
    }
    else if (!get_path_for_id(v4, a2, &v6, (uint64_t)&v7[*(unsigned int *)(v3 + 2064)], 1024 - *(_DWORD *)(v3 + 2064)))
    {
      remove_path(*(uint64_t **)(v3 + 8), v6);
    }
  }
  return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 2080));
}

uint64_t si_psid_close(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 2080));
  v2 = *(_QWORD *)(v1 + 8);
  if (*(_BYTE *)(v1 + 2))
    release_persistent_id_64_store(v2);
  else
    release_persistent_id_store(v2);
  *(_QWORD *)(v1 + 8) = 0;
  *(_BYTE *)v1 = 0;
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 2080));
}

uint64_t si_oid_to_parent(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  int v8;
  NSObject *v9;
  unint64_t v10;
  unint64_t v11;
  uint8_t buf[32];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[2];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
    return 0;
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (pthread_mutex_t *)(v4 + 2080);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 2080));
  if (!*(_BYTE *)v4)
    goto LABEL_9;
  v6 = *(_QWORD *)(v4 + 8);
  if (!*(_BYTE *)(v4 + 2))
  {
    LODWORD(v10) = a2;
    v25 = 0u;
    memset(v26, 0, 28);
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    memset(buf, 0, sizeof(buf));
    v11 = 268;
    if (!_sqlite_get(v6, (uint64_t)&v10, 4, (char *)buf, &v11))
    {
      v2 = *(unsigned int *)buf;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  memset(v26, 0, sizeof(v26));
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  memset(buf, 0, sizeof(buf));
  v10 = 272;
  v11 = a2;
  if (_sqlite_get(v6, (uint64_t)&v11, 8, (char *)buf, &v10))
  {
LABEL_8:
    *__error() = 2;
LABEL_9:
    v2 = -1;
    goto LABEL_10;
  }
  v2 = *(_QWORD *)buf;
LABEL_10:
  if (dword_1EF19FCA4 >= 5)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(6);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a2;
      _os_log_impl(&dword_1B8270000, v9, OS_LOG_TYPE_DEFAULT, "found %lld for %llx\n", buf, 0x16u);
    }
    *__error() = v8;
  }
  pthread_mutex_unlock(v5);
  return v2;
}

uint64_t si_psid_check_sandbox(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *__error();
  v4 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 134217984;
    v7 = a2;
    _os_log_impl(&dword_1B8270000, v4, OS_LOG_TYPE_DEFAULT, "======^^^^^ si_psid_check_sandbox sandbox (NOT IMPLEMENTED!) count:%ld", (uint8_t *)&v6, 0xCu);
  }
  *__error() = v3;
  return 1;
}

void *si_psid_oid_to_firm_path(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  pthread_mutex_t *v6;
  uint64_t v7;
  int path_for_id_64;
  void *v9;
  uint64_t v10;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint8_t buf[4];
  void *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v14 = 0;
  v6 = (pthread_mutex_t *)(v5 + 2080);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 2080));
  if (*(_BYTE *)v5)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (*(_BYTE *)(v5 + 2))
      path_for_id_64 = get_path_for_id_64(v7, a2, &v14, a3 + *(unsigned int *)(v5 + 2068), 1024 - *(_DWORD *)(v5 + 2068));
    else
      path_for_id_64 = get_path_for_id(v7, a2, &v14, a3 + *(unsigned int *)(v5 + 2068), 1024 - *(_DWORD *)(v5 + 2068));
    if (path_for_id_64)
    {
      v9 = 0;
      *__error() = path_for_id_64;
    }
    else
    {
      v10 = *(int *)(v5 + 2068);
      if (*(_BYTE *)(v5 + 1040 + v10 - 1) == 47)
        LODWORD(v10) = v10 - 1;
      v9 = (void *)(v14 - (int)v10);
      memcpy(v9, (const void *)(v5 + 1040), (int)v10);
    }
  }
  else
  {
    v9 = 0;
  }
  if (dword_1EF19FCA4 >= 5)
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(6);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v16 = v9;
      v17 = 2048;
      v18 = a2;
      _os_log_impl(&dword_1B8270000, v13, OS_LOG_TYPE_DEFAULT, "found %s for %llx\n", buf, 0x16u);
    }
    *__error() = v12;
  }
  pthread_mutex_unlock(v6);
  return v9;
}

uint64_t si_psid_set_root_path2(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v5 = *(_QWORD *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 2080));
  if (*(_BYTE *)v5)
  {
    v6 = strlen(a2);
    *(_DWORD *)(v5 + 2064) = v6;
    v7 = strlen(a3);
    *(_DWORD *)(v5 + 2068) = v7;
    v8 = 0xFFFFFFFFLL;
    if (v6 <= 0x3FF && v7 <= 0x3FF)
    {
      memcpy((void *)(v5 + 16), a2, v6);
      memcpy((void *)(v5 + 1040), a3, *(unsigned int *)(v5 + 2068));
      v8 = 0;
    }
  }
  else
  {
    v8 = 0xFFFFFFFFLL;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v5 + 2080));
  return v8;
}

uint64_t si_psid_set_path_to_oid(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  pthread_mutex_t *v6;
  size_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  int v11;
  NSObject *v12;
  os_log_type_t v13;
  int v15;
  char *v16;
  int v17;
  const char *v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  int v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  NSObject *v29;
  char *v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint8_t v34[4];
  unsigned int v35;
  __int16 v36;
  char *v37;
  uint8_t buf[4];
  _OWORD v39[16];
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (pthread_mutex_t *)(v5 + 2080);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 2080));
  if (*(_BYTE *)v5)
  {
    if (dword_1EF19FCA4 >= 5)
    {
      v28 = *__error();
      v29 = _SILogForLogForCategory(6);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&v39[0] = a3;
        WORD4(v39[0]) = 2080;
        *(_QWORD *)((char *)v39 + 10) = a2;
        _os_log_impl(&dword_1B8270000, v29, OS_LOG_TYPE_DEFAULT, "%lld -> %s", buf, 0x16u);
      }
      *__error() = v28;
    }
    v7 = *(unsigned int *)(v5 + 2064);
    if (!strncmp(a2, (const char *)(v5 + 16), v7))
    {
      v8 = *(_QWORD *)(v5 + 8);
      v9 = &a2[v7];
      if (*(_BYTE *)(v5 + 2))
      {
        v10 = set_id_for_path_64(*(_QWORD *)(v5 + 8));
        goto LABEL_8;
      }
      v32 = 0;
      v33 = a3;
      v31 = 268;
      if (_sqlite_get(v8, (uint64_t)&v33, 4, (char *)buf, &v31))
      {
        v10 = 22;
        goto LABEL_8;
      }
      v40 = 0;
      memset(v39, 0, sizeof(v39));
      *(_DWORD *)buf = 2;
      v15 = *(unsigned __int8 *)v9;
      if (!*v9)
      {
        v10 = 17;
LABEL_8:
        if (v10)
        {
          v11 = *__error();
          v12 = _SILogForLogForCategory(6);
          v13 = 2 * (dword_1EF19FCA4 < 4);
          if (os_log_type_enabled(v12, v13))
          {
            *(_DWORD *)buf = 134218242;
            *(_QWORD *)&v39[0] = a3;
            WORD4(v39[0]) = 2080;
            *(_QWORD *)((char *)v39 + 10) = a2;
            _os_log_impl(&dword_1B8270000, v12, v13, "Failed %lld -> %s", buf, 0x16u);
          }
          *__error() = v11;
        }
        return pthread_mutex_unlock(v6);
      }
      v16 = (char *)v39 + 6;
      v10 = 17;
      while (1)
      {
        while (v15 == 47)
        {
          v17 = *(unsigned __int8 *)++v9;
          v15 = v17;
        }
        v18 = v9;
        if (!v15)
          goto LABEL_8;
        do
        {
          if (v15 == 47)
            break;
          v19 = *(unsigned __int8 *)++v18;
          v15 = v19;
        }
        while (v19);
        v20 = (_WORD)v18 - (_WORD)v9;
        if (((v18 - v9) & 0xFF00) != 0)
          v20 = 255;
        WORD2(v39[0]) = v20;
        __strncpy_chk();
        v21 = WORD2(v39[0]);
        ++WORD2(v39[0]);
        *((_BYTE *)v39 + v21 + 6) = 0;
        LODWORD(v39[0]) = 0;
        v9 = *v18 == 47 ? v18 + 1 : v18;
        if (psid_lookup(v8, (uint64_t)buf, &v32))
          break;
LABEL_37:
        *(_DWORD *)buf = v32;
        v15 = *(unsigned __int8 *)v9;
        if (!*v9)
          goto LABEL_8;
      }
      if (*v9)
      {
        v10 = 2;
        goto LABEL_8;
      }
      v30 = v16;
      if (v33 == 2 || v33 > 0x63)
      {
        if (!_psid_insert(v8, (uint64_t)buf, (char *)&v33))
        {
          v10 = 0;
LABEL_36:
          v16 = v30;
          goto LABEL_37;
        }
      }
      else
      {
        v22 = *__error();
        v23 = _SILogForLogForCategory(4);
        v24 = 2 * (dword_1EF19FC9C < 4);
        if (os_log_type_enabled(v23, v24))
        {
          *(_DWORD *)v34 = 67109120;
          v35 = v33;
          _os_log_impl(&dword_1B8270000, v23, v24, "psid_insert_with_id: fid %d not valid!\n", v34, 8u);
        }
        *__error() = v22;
      }
      v25 = *__error();
      v26 = _SILogForLogForCategory(4);
      v27 = 2 * (dword_1EF19FC9C < 4);
      if (os_log_type_enabled(v26, v27))
      {
        *(_DWORD *)v34 = 67109378;
        v35 = v33;
        v36 = 2080;
        v37 = v30;
        _os_log_impl(&dword_1B8270000, v26, v27, "set_id_for_path: Failed to insert fid %d for %s\n", v34, 0x12u);
      }
      *__error() = v25;
      goto LABEL_36;
    }
  }
  return pthread_mutex_unlock(v6);
}

uint64_t si_psid_iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  pthread_mutex_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  int v10;
  NSObject *v11;
  os_log_type_t v12;
  int *v13;
  char *v14;
  int v16;
  uint64_t v17;
  uint64_t Payload;
  int v19;
  NSObject *v20;
  os_log_type_t v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  uint32_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  int v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  int v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[17];
  uint8_t buf[4];
  _BYTE v43[14];
  __int16 v44;
  unint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (pthread_mutex_t *)(v4 + 2080);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 2080));
  if (!*(_BYTE *)(v4 + 2))
  {
    v7 = 78;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v4 + 8);
  v38 = 0;
  v39 = 0;
  memset(v41, 0, sizeof(v41));
  v7 = sqlite3BtreeCursor(*(_QWORD *)v6, *(_DWORD *)(v6 + 8), 1, *(uint64_t (**)(int, int, void *, int, void *))(v6 + 24), &v38);
  if (!(_DWORD)v7)
  {
    v8 = v38;
    v9 = moveToRoot((uint64_t)v38);
    if (v9)
      goto LABEL_4;
    v16 = *((unsigned __int8 *)v8 + 97);
    if (*((_BYTE *)v8 + 97))
    {
      v9 = moveToLeftmost((uint64_t)v8);
      v37 = 0;
      if (!v9 && v16)
      {
        while (1)
        {
          if (*((_BYTE *)v8 + 97))
          {
            getCellInfo((uint64_t)v8);
            v17 = v8[9];
            if (v17 == 8)
            {
              Payload = getPayload((uint64_t)v8, 8, (char *)&v39, 0);
              if ((_DWORD)Payload)
                goto LABEL_36;
              v19 = *__error();
              v20 = _SILogForLogForCategory(4);
              v21 = 2 * (dword_1EF19FC9C < 4);
              if (os_log_type_enabled(v20, v21))
              {
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)v43 = v39;
                v22 = v20;
                v23 = v21;
                v24 = "key: %lld # ";
                v25 = 12;
LABEL_22:
                _os_log_impl(&dword_1B8270000, v22, v23, v24, buf, v25);
                goto LABEL_23;
              }
              goto LABEL_23;
            }
          }
          else
          {
            LODWORD(v17) = 0;
          }
          Payload = getPayload((uint64_t)v8, v17, (char *)v41, 0);
          if ((_DWORD)Payload)
            goto LABEL_36;
          v19 = *__error();
          v26 = _SILogForLogForCategory(4);
          v27 = 2 * (dword_1EF19FC9C < 4);
          if (os_log_type_enabled(v26, v27))
          {
            *(_DWORD *)buf = 134218498;
            *(_QWORD *)v43 = *(_QWORD *)&v41[0];
            *(_WORD *)&v43[8] = 1024;
            *(_DWORD *)&v43[10] = DWORD2(v41[0]);
            v44 = 2080;
            v45 = (unint64_t)v41 | 0xE;
            v22 = v26;
            v23 = v27;
            v24 = "key: %lld / %d / %s # value: ";
            v25 = 28;
            goto LABEL_22;
          }
LABEL_23:
          *__error() = v19;
          if (!*((_BYTE *)v8 + 97))
          {
            v28 = 0;
LABEL_31:
            Payload = getPayload((uint64_t)v8, v28, (char *)v41, 1);
            if ((_DWORD)Payload)
              goto LABEL_36;
            v34 = *__error();
            v35 = _SILogForLogForCategory(4);
            v36 = 2 * (dword_1EF19FC9C < 4);
            if (os_log_type_enabled(v35, v36))
            {
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)v43 = *(_QWORD *)&v41[0];
              *(_WORD *)&v43[8] = 1024;
              *(_DWORD *)&v43[10] = DWORD2(v41[0]);
              v44 = 2080;
              v45 = (unint64_t)v41 | 0xE;
              _os_log_impl(&dword_1B8270000, v35, v36, "value: %lld / %d / %s\n", buf, 0x1Cu);
            }
            *__error() = v34;
            goto LABEL_35;
          }
          getCellInfo((uint64_t)v8);
          v28 = *((_DWORD *)v8 + 20);
          if (v28 != 8)
            goto LABEL_31;
          Payload = getPayload((uint64_t)v8, 8, (char *)&v39, 1);
          if ((_DWORD)Payload)
            goto LABEL_36;
          v29 = *__error();
          v30 = _SILogForLogForCategory(4);
          v31 = 2 * (dword_1EF19FC9C < 4);
          v32 = os_log_type_enabled(v30, v31);
          v33 = v39;
          if (v32)
          {
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)v43 = v39;
            _os_log_impl(&dword_1B8270000, v30, v31, "value: %lld\n", buf, 0xCu);
          }
          *__error() = v29;
          bzero(buf, 0x400uLL);
          v40 = 0;
          if (!get_path_for_id_64(v6, v33, &v40, (uint64_t)buf, 1024))
            (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, v33, v40);
LABEL_35:
          Payload = sqlite3BtreeNext((uint64_t)v8, &v37);
          if (Payload | v37)
          {
LABEL_36:
            v7 = Payload;
            goto LABEL_7;
          }
        }
      }
    }
    else
    {
      v9 = 0;
      v37 = 1;
    }
LABEL_4:
    v10 = *__error();
    v11 = _SILogForLogForCategory(4);
    v12 = 2 * (dword_1EF19FC9C < 4);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = __error();
      v14 = strerror(*v13);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v43 = v9;
      *(_WORD *)&v43[4] = 2080;
      *(_QWORD *)&v43[6] = v14;
      _os_log_impl(&dword_1B8270000, v11, v12, "psid_dump: failed to go to the beginning of the db! (%d / %s)\n", buf, 0x12u);
    }
    *__error() = v10;
    v7 = 2;
LABEL_7:
    sqlite3BtreeCloseCursor(v8);
  }
LABEL_9:
  pthread_mutex_unlock(v5);
  return v7;
}

uint64_t psid64_oidPathForPath(uint64_t a1, uint64_t a2, _QWORD *a3, char a4, int a5)
{
  size_t i;
  int id_for_path_64;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char __s[1024];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  bzero(__s, 0x400uLL);
  __strlcpy_chk();
  v18 = 0;
  if ((a4 & 1) != 0)
  {
    for (i = strlen(__s); i; __s[--i] = 0)
    {
      if (__s[i - 1] != 47)
        break;
    }
  }
  else
  {
    id_for_path_64 = get_id_for_path_64(a1, __s, &v17, &v18, a5, 0);
    if (id_for_path_64)
    {
      *__error() = id_for_path_64;
      return 0xFFFFFFFFLL;
    }
    v12 = strrchr(__s, 47);
    if (v12)
    {
      if (v12 == __s)
      {
        *a3 = v18;
        return 1;
      }
      *v12 = 0;
    }
  }
  v11 = 0;
  do
  {
    v17 = 0;
    get_id_for_path_64(a1, __s, &v17, &v18, a5, 0);
    v13 = v17;
    if (v17)
    {
      a3[(int)v11] = v17;
      v11 = (v11 + 1);
    }
    v14 = strrchr(__s, 47);
    if (!v14)
      break;
    if (v14 == __s)
      break;
    *v14 = 0;
  }
  while (v13);
  if ((_DWORD)v11 && a3[(int)v11 - 1] != 2)
  {
    v15 = (int)v11;
    v11 = (v11 + 1);
    a3[v15] = 2;
  }
  return v11;
}

uint64_t psid32_oidPathForPath(uint64_t a1, uint64_t a2, _QWORD *a3, char a4, char a5)
{
  size_t i;
  int id_for_path;
  uint64_t v11;
  char *v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  unsigned int v17;
  unsigned int v18;
  char __s[1024];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  bzero(__s, 0x400uLL);
  __strlcpy_chk();
  v18 = 0;
  if ((a4 & 1) != 0)
  {
    for (i = strlen(__s); i; __s[--i] = 0)
    {
      if (__s[i - 1] != 47)
        break;
    }
  }
  else
  {
    id_for_path = get_id_for_path(a1, __s, (int *)&v17, &v18, a5);
    if (id_for_path)
    {
      *__error() = id_for_path;
      return 0xFFFFFFFFLL;
    }
    v12 = strrchr(__s, 47);
    if (v12)
    {
      if (v12 == __s)
      {
        *a3 = v18;
        return 1;
      }
      *v12 = 0;
    }
  }
  v11 = 0;
  do
  {
    v17 = 0;
    get_id_for_path(a1, __s, (int *)&v17, &v18, a5);
    v13 = v17;
    if (v17)
    {
      a3[(int)v11] = v17;
      v11 = (v11 + 1);
    }
    v14 = strrchr(__s, 47);
    if (!v14)
      break;
    if (v14 == __s)
      break;
    *v14 = 0;
  }
  while (v13);
  if ((_DWORD)v11 && a3[(int)v11 - 1] != 2)
  {
    v15 = (int)v11;
    v11 = (v11 + 1);
    a3[v15] = 2;
  }
  return v11;
}

uint64_t si_init_posix_psid(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5)
{
  _BYTE *v10;
  _BYTE *v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  int v29;
  int v30;
  int v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  int v35;
  int v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t *v39;
  int v40;
  int v41;
  NSObject *v42;
  os_log_type_t v43;
  int v44;
  NSObject *v45;
  os_log_type_t v46;
  _WORD *v47;
  int v48;
  int v49;
  int v50;
  NSObject *v51;
  os_log_type_t v52;
  int v53;
  NSObject *v54;
  os_log_type_t v55;
  _WORD *v56;
  int v57;
  uint64_t Payload;
  NSObject *v59;
  os_log_type_t v60;
  const char *v61;
  __int16 v62;
  int v63;
  NSObject *v64;
  os_log_type_t v65;
  int v66;
  uint64_t v67;
  int v68;
  NSObject *v69;
  os_log_type_t v70;
  const char *v71;
  int *v72;
  uint64_t Table;
  uint64_t v74;
  __int16 v75;
  int v76;
  NSObject *v77;
  os_log_type_t v78;
  int v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  const char *v88;
  NSObject *v89;
  os_log_type_t v90;
  uint32_t v91;
  int v92;
  unint64_t v93;
  unsigned int v94;
  NSObject *v95;
  os_log_type_t v96;
  int v97;
  int v98;
  int v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  unint64_t v112;
  int v113;
  const void *v114;
  const void *v115;
  _OWORD v116[3];
  __int128 v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t *v120;
  int v121;
  uint64_t v122;
  _BYTE v123[28];
  __int16 v124;
  int v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v10 = malloc_type_calloc(1uLL, 0x868uLL, 0x10A00403F30FE2CuLL);
  v11 = v10;
  if ((a4 & 0x8000) != 0)
    v10[2] = 1;
  v12 = malloc_type_malloc(0x28uLL, 0x100004090BE4F35uLL);
  *((_QWORD *)v11 + 259) = v12;
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 16);
  *v12 = *(_OWORD *)a2;
  v12[1] = v14;
  *((_QWORD *)v12 + 4) = v13;
  *(_OWORD *)(a1 + 64) = xmmword_1E6E29A30;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)&off_1E6E29A40;
  *(_OWORD *)(a1 + 32) = SI_PersistentIDStore_PSID_TEMPLATE;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)&off_1E6E29A20;
  *(_OWORD *)(a1 + 128) = xmmword_1E6E29A70;
  *(_OWORD *)(a1 + 144) = unk_1E6E29A80;
  *(_OWORD *)(a1 + 96) = xmmword_1E6E29A50;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)&off_1E6E29A60;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)&off_1E6E29AC0;
  *(_OWORD *)(a1 + 224) = xmmword_1E6E29AD0;
  *(_OWORD *)(a1 + 160) = xmmword_1E6E29A90;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)&off_1E6E29AA0;
  *(_OWORD *)(a1 + 192) = xmmword_1E6E29AB0;
  if (v11[2])
    *(_QWORD *)(a1 + 232) = si_psid_clone_and_reset;
  v119 = 0;
  if ((fd_setDir(a3, (int *)&v119) & 1) == 0)
  {
    v20 = 0xFFFFFFFFLL;
LABEL_26:
    free(*((void **)v11 + 259));
    free(v11);
    return v20;
  }
  v15 = (a4 >> 1) & 3 ^ 1;
  if (v11[2])
  {
    v16 = malloc_type_calloc(0x28uLL, 1uLL, 0xEDC04C19uLL);
    if (v16)
    {
      v17 = (uint64_t)v16;
      v16[3] = keycompare_3559;
      master_fid_rec_3560 = -1;
      word_1EF1AE374 = 17;
      __strlcpy_chk();
      v18 = (unsigned __int16)word_1EF1AE374 + 16;
      master_fid_rec_size_3562 = v18;
      v122 = 0;
      v19 = sqlite3BtreeOpen(v17);
      if ((_DWORD)v19)
      {
        v20 = v19;
        v21 = *__error();
        v22 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v123 = 136315906;
          *(_QWORD *)&v123[4] = "get_persistent_id_64_store";
          *(_WORD *)&v123[12] = 1024;
          *(_DWORD *)&v123[14] = 164;
          *(_WORD *)&v123[18] = 2080;
          *(_QWORD *)&v123[20] = "psid.db";
          v124 = 1024;
          v125 = v20;
LABEL_86:
          _os_log_error_impl(&dword_1B8270000, v22, OS_LOG_TYPE_ERROR, "%s:%d: sqlite3BtreeOpen failed; dbname:%s; rc = %d\n",
            v123,
            0x22u);
          goto LABEL_15;
        }
        goto LABEL_15;
      }
      v120 = 0;
      v121 = 0;
      v29 = sqlite3BtreeCursor(*(_QWORD *)v17, 2, 0, (uint64_t (*)(int, int, void *, int, void *))keycompare_3559, &v120);
      if (v29)
      {
        v30 = v29;
        v112 = v18;
        v114 = a5;
        v31 = *__error();
        v32 = _SILogForLogForCategory(4);
        v33 = 2 * (dword_1EF19FC9C < 4);
        if (os_log_type_enabled(v32, v33))
        {
          *(_DWORD *)v123 = 67109120;
          *(_DWORD *)&v123[4] = v30;
          _os_log_impl(&dword_1B8270000, v32, v33, "sqlite3BtreeCursor failed; rc = %d\n", v123, 8u);
        }
        *__error() = v31;
        goto LABEL_43;
      }
      v39 = v120;
      v40 = sqlite3BtreeMoveto((uint64_t)v120, (uint64_t)&master_fid_rec_3560, v18, &v121);
      if (v40 | v121)
      {
        v41 = v40;
        v112 = v18;
        v114 = a5;
        v111 = *__error();
        v42 = _SILogForLogForCategory(4);
        v43 = 2 * (dword_1EF19FC9C < 4);
        if (os_log_type_enabled(v42, v43))
        {
          *(_DWORD *)v123 = 67109120;
          *(_DWORD *)&v123[4] = v41;
          _os_log_impl(&dword_1B8270000, v42, v43, "sqlite3BtreeMoveto failed at open (need to create table); rc = %d\n",
            v123,
            8u);
        }
        *__error() = v111;
        sqlite3BtreeCloseCursor(v39);
LABEL_43:
        a5 = v114;
        if ((v15 & 1) == 0)
        {
          v44 = *__error();
          v45 = _SILogForLogForCategory(4);
          v46 = 2 * (dword_1EF19FC9C < 4);
          if (os_log_type_enabled(v45, v46))
          {
            *(_DWORD *)v123 = 136315138;
            *(_QWORD *)&v123[4] = "psid.db";
            _os_log_impl(&dword_1B8270000, v45, v46, "psid: creating db: %s\n", v123, 0xCu);
          }
          *__error() = v44;
          v47 = *(_WORD **)v17;
          if (*(_BYTE *)(*(_QWORD *)v17 + 30))
          {
            v48 = 8;
          }
          else
          {
            v48 = 0;
            v62 = v47[18] - v47[16];
            *((_DWORD *)v47 + 8) = 268439552;
            *(_QWORD *)(*(_QWORD *)v47 + 224) = 0x100000001000;
            v47[18] = v62 + 4096;
          }
          v63 = *__error();
          v64 = _SILogForLogForCategory(4);
          v65 = 2 * (dword_1EF19FC9C < 4);
          if (os_log_type_enabled(v64, v65))
          {
            v66 = *(unsigned __int16 *)(*(_QWORD *)v17 + 32);
            *(_DWORD *)v123 = 67109376;
            *(_DWORD *)&v123[4] = v48;
            *(_WORD *)&v123[8] = 1024;
            *(_DWORD *)&v123[10] = v66;
            _os_log_impl(&dword_1B8270000, v64, v65, "(%d), page size %d\n", v123, 0xEu);
          }
          *__error() = v63;
          v67 = sqlite3BtreeBeginTrans(*(_QWORD *)v17);
          if ((_DWORD)v67)
          {
            v20 = v67;
            v68 = *__error();
            v69 = _SILogForLogForCategory(4);
            v70 = 2 * (dword_1EF19FC9C < 4);
            if (os_log_type_enabled(v69, v70))
            {
              *(_DWORD *)v123 = 67109120;
              *(_DWORD *)&v123[4] = v20;
              v71 = "Couldn't begin transaction; rc = %d\n";
LABEL_117:
              _os_log_impl(&dword_1B8270000, v69, v70, v71, v123, 8u);
              goto LABEL_118;
            }
            goto LABEL_118;
          }
          v72 = (int *)(v17 + 8);
          Table = sqlite3BtreeCreateTable(*(_QWORD *)v17, (unsigned int *)(v17 + 8));
          if ((_DWORD)Table)
          {
            v20 = Table;
            v21 = *__error();
            v59 = _SILogForLogForCategory(4);
            v60 = 2 * (dword_1EF19FC9C < 4);
            if (!os_log_type_enabled(v59, v60))
              goto LABEL_15;
            *(_DWORD *)v123 = 67109120;
            *(_DWORD *)&v123[4] = v20;
            v61 = "Couldn't create table; rc = %d\n";
            goto LABEL_107;
          }
          if (*v72 == 2)
          {
            v92 = 2;
            v93 = v112;
          }
          else
          {
            v99 = *__error();
            v100 = _SILogForLogForCategory(4);
            v93 = v112;
            if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
            {
              v109 = *v72;
              *(_DWORD *)v123 = 136315906;
              *(_QWORD *)&v123[4] = "get_persistent_id_64_store";
              *(_WORD *)&v123[12] = 1024;
              *(_DWORD *)&v123[14] = 230;
              *(_WORD *)&v123[18] = 2080;
              *(_QWORD *)&v123[20] = "psid.db";
              v124 = 1024;
              v125 = v109;
              _os_log_error_impl(&dword_1B8270000, v100, OS_LOG_TYPE_ERROR, "%s:%d: psid: %s : danger! ps store table id %d looks bad! resetting\n", v123, 0x22u);
            }
            *__error() = v99;
            v92 = *v72;
          }
          v101 = sqlite3BtreeCursor(*(_QWORD *)v17, v92, 1, (uint64_t (*)(int, int, void *, int, void *))keycompare_3559, (uint64_t **)(v17 + 16));
          if ((_DWORD)v101)
          {
            v20 = v101;
            v21 = *__error();
            v59 = _SILogForLogForCategory(4);
            v60 = 2 * (dword_1EF19FC9C < 4);
            if (!os_log_type_enabled(v59, v60))
              goto LABEL_15;
            *(_DWORD *)v123 = 67109120;
            *(_DWORD *)&v123[4] = v20;
            v61 = "Couldn't create cursor; rc = %d\n";
            goto LABEL_107;
          }
          *(_QWORD *)(v17 + 32) = 0x7FFFFFFFFFFFFFFFLL;
          v122 = 0x7FFFFFFFFFFFFFFFLL;
          v102 = sqlite3BtreeInsert(*(_QWORD *)(v17 + 16), (char *)&master_fid_rec_3560, v93, (char *)&v122, 8);
          if ((_DWORD)v102)
          {
            v20 = v102;
            v21 = *__error();
            v59 = _SILogForLogForCategory(4);
            v60 = 2 * (dword_1EF19FC9C < 4);
            if (!os_log_type_enabled(v59, v60))
              goto LABEL_15;
            *(_DWORD *)v123 = 67109120;
            *(_DWORD *)&v123[4] = v20;
            v61 = "Couldn't insert key; rc = %d\n";
            goto LABEL_107;
          }
          sqlite3BtreeCloseCursor(*(uint64_t **)(v17 + 16));
          *(_QWORD *)(v17 + 16) = 0;
          v20 = sqlite3BtreeSync(*(_QWORD *)v17);
          if ((_DWORD)v20)
            goto LABEL_16;
          v107 = sqlite3BtreeCommit(*(_QWORD *)v17);
          if ((_DWORD)v107)
          {
            v20 = v107;
            v21 = *__error();
            v59 = _SILogForLogForCategory(4);
            v60 = 2 * (dword_1EF19FC9C < 4);
            if (!os_log_type_enabled(v59, v60))
              goto LABEL_15;
            *(_DWORD *)v123 = 67109120;
            *(_DWORD *)&v123[4] = v20;
            v61 = "Couldn't commit btree; rc = %d\n";
            goto LABEL_107;
          }
LABEL_95:
          v20 = 0;
LABEL_21:
          *((_QWORD *)v11 + 1) = v17;
          goto LABEL_23;
        }
        goto LABEL_57;
      }
      *(_DWORD *)(v17 + 8) = 2;
      Payload = getPayload((uint64_t)v39, 8, (char *)&v122, 1);
      if ((_DWORD)Payload)
      {
        v20 = Payload;
        v21 = *__error();
        v59 = _SILogForLogForCategory(4);
        v60 = 2 * (dword_1EF19FC9C < 4);
        if (!os_log_type_enabled(v59, v60))
          goto LABEL_15;
        *(_DWORD *)v123 = 67109120;
        *(_DWORD *)&v123[4] = v20;
        v61 = "psid: could not find master fid; rc = %d\n";
LABEL_107:
        _os_log_impl(&dword_1B8270000, v59, v60, v61, v123, 8u);
        goto LABEL_15;
      }
      v83 = v122;
      *(_QWORD *)(v17 + 32) = v122;
      if (v83 > 0x7FFFFFFFFFFFFFFELL)
      {
LABEL_94:
        sqlite3BtreeCloseCursor(v39);
        goto LABEL_95;
      }
      v84 = *__error();
      v85 = _SILogForLogForCategory(4);
      v86 = 2 * (dword_1EF19FC9C < 4);
      if (!os_log_type_enabled(v85, v86))
      {
LABEL_93:
        *__error() = v84;
        goto LABEL_94;
      }
      v87 = *(_QWORD *)(v17 + 32);
      *(_DWORD *)v123 = 136315394;
      *(_QWORD *)&v123[4] = "psid.db";
      *(_WORD *)&v123[12] = 2048;
      *(_QWORD *)&v123[14] = v87;
      v88 = "psid: %s : danger! master fid %lld looks bad! resetting\n";
      v89 = v85;
      v90 = v86;
      v91 = 22;
LABEL_92:
      _os_log_impl(&dword_1B8270000, v89, v90, v88, v123, v91);
      goto LABEL_93;
    }
  }
  else
  {
    v23 = malloc_type_calloc(0x28uLL, 1uLL, 0xB74F51DAuLL);
    if (v23)
    {
      v17 = (uint64_t)v23;
      v23[3] = keycompare;
      master_fid_rec = -1;
      word_1EF1AD7A8 = 17;
      __strlcpy_chk();
      v24 = (unsigned __int16)word_1EF1AD7A8 + 12;
      master_fid_rec_size = v24;
      LODWORD(v120) = 0;
      v25 = sqlite3BtreeOpen(v17);
      if ((_DWORD)v25)
      {
        v20 = v25;
        v21 = *__error();
        v22 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v123 = 136315906;
          *(_QWORD *)&v123[4] = "get_persistent_id_store";
          *(_WORD *)&v123[12] = 1024;
          *(_DWORD *)&v123[14] = 164;
          *(_WORD *)&v123[18] = 2080;
          *(_QWORD *)&v123[20] = "psid.db";
          v124 = 1024;
          v125 = v20;
          goto LABEL_86;
        }
LABEL_15:
        *__error() = v21;
LABEL_16:
        v26 = *(uint64_t **)(v17 + 16);
        if (v26)
          sqlite3BtreeCloseCursor(v26);
        if (*(_QWORD *)v17)
          sqlite3BtreeClose(*(uint64_t **)v17);
        free((void *)v17);
        v17 = 0;
        goto LABEL_21;
      }
      v122 = 0;
      v121 = 0;
      v34 = sqlite3BtreeCursor(*(_QWORD *)v17, 2, 0, (uint64_t (*)(int, int, void *, int, void *))keycompare, (uint64_t **)&v122);
      if (v34)
      {
        v35 = v34;
        v115 = a5;
        v36 = *__error();
        v37 = _SILogForLogForCategory(4);
        v38 = 2 * (dword_1EF19FC9C < 4);
        if (os_log_type_enabled(v37, v38))
        {
          *(_DWORD *)v123 = 67109120;
          *(_DWORD *)&v123[4] = v35;
          _os_log_impl(&dword_1B8270000, v37, v38, "sqlite3BtreeCursor failed; rc = %d\n", v123, 8u);
        }
        *__error() = v36;
      }
      else
      {
        v39 = (uint64_t *)v122;
        v49 = sqlite3BtreeMoveto(v122, (uint64_t)&master_fid_rec, v24, &v121);
        if (!(v49 | v121))
        {
          *(_DWORD *)(v17 + 8) = 2;
          v74 = getPayload((uint64_t)v39, 4, (char *)&v120, 1);
          if ((_DWORD)v74)
          {
            v20 = v74;
            v21 = *__error();
            v59 = _SILogForLogForCategory(4);
            v60 = 2 * (dword_1EF19FC9C < 4);
            if (!os_log_type_enabled(v59, v60))
              goto LABEL_15;
            *(_DWORD *)v123 = 67109120;
            *(_DWORD *)&v123[4] = v20;
            v61 = "psid: could not find master fid; rc = %d\n";
            goto LABEL_107;
          }
          v94 = v120;
          *(_DWORD *)(v17 + 32) = (_DWORD)v120;
          if (v94 > 0x63)
            goto LABEL_94;
          v84 = *__error();
          v95 = _SILogForLogForCategory(4);
          v96 = 2 * (dword_1EF19FC9C < 4);
          if (!os_log_type_enabled(v95, v96))
            goto LABEL_93;
          v97 = *(_DWORD *)(v17 + 32);
          *(_DWORD *)v123 = 136315394;
          *(_QWORD *)&v123[4] = "psid.db";
          *(_WORD *)&v123[12] = 1024;
          *(_DWORD *)&v123[14] = v97;
          v88 = "psid: %s : danger! master fid %d looks bad! resetting\n";
          v89 = v95;
          v90 = v96;
          v91 = 18;
          goto LABEL_92;
        }
        v50 = v49;
        v115 = a5;
        v113 = *__error();
        v51 = _SILogForLogForCategory(4);
        v52 = 2 * (dword_1EF19FC9C < 4);
        if (os_log_type_enabled(v51, v52))
        {
          *(_DWORD *)v123 = 67109120;
          *(_DWORD *)&v123[4] = v50;
          _os_log_impl(&dword_1B8270000, v51, v52, "sqlite3BtreeMoveto failed; rc = %d\n", v123, 8u);
        }
        *__error() = v113;
        sqlite3BtreeCloseCursor(v39);
      }
      a5 = v115;
      if ((v15 & 1) == 0)
      {
        v53 = *__error();
        v54 = _SILogForLogForCategory(4);
        v55 = 2 * (dword_1EF19FC9C < 4);
        if (os_log_type_enabled(v54, v55))
        {
          *(_DWORD *)v123 = 136315138;
          *(_QWORD *)&v123[4] = "psid.db";
          _os_log_impl(&dword_1B8270000, v54, v55, "psid: creating db: %s\n", v123, 0xCu);
        }
        *__error() = v53;
        v56 = *(_WORD **)v17;
        if (*(_BYTE *)(*(_QWORD *)v17 + 30))
        {
          v57 = 8;
        }
        else
        {
          v57 = 0;
          v75 = v56[18] - v56[16];
          *((_DWORD *)v56 + 8) = 268439552;
          *(_QWORD *)(*(_QWORD *)v56 + 224) = 0x100000001000;
          v56[18] = v75 + 4096;
        }
        v76 = *__error();
        v77 = _SILogForLogForCategory(4);
        v78 = 2 * (dword_1EF19FC9C < 4);
        if (os_log_type_enabled(v77, v78))
        {
          v79 = *(unsigned __int16 *)(*(_QWORD *)v17 + 32);
          *(_DWORD *)v123 = 67109376;
          *(_DWORD *)&v123[4] = v57;
          *(_WORD *)&v123[8] = 1024;
          *(_DWORD *)&v123[10] = v79;
          _os_log_impl(&dword_1B8270000, v77, v78, "(%d), page size %d\n", v123, 0xEu);
        }
        *__error() = v76;
        v80 = sqlite3BtreeBeginTrans(*(_QWORD *)v17);
        if ((_DWORD)v80)
        {
          v20 = v80;
          v68 = *__error();
          v69 = _SILogForLogForCategory(4);
          v70 = 2 * (dword_1EF19FC9C < 4);
          a5 = v115;
          if (os_log_type_enabled(v69, v70))
          {
            *(_DWORD *)v123 = 67109120;
            *(_DWORD *)&v123[4] = v20;
            v71 = "Couldn't begin transaction; rc = %d\n";
            goto LABEL_117;
          }
LABEL_118:
          *__error() = v68;
          goto LABEL_16;
        }
        v81 = (int *)(v17 + 8);
        v82 = sqlite3BtreeCreateTable(*(_QWORD *)v17, (unsigned int *)(v17 + 8));
        a5 = v115;
        if ((_DWORD)v82)
        {
          v20 = v82;
          v68 = *__error();
          v69 = _SILogForLogForCategory(4);
          v70 = 2 * (dword_1EF19FC9C < 4);
          if (os_log_type_enabled(v69, v70))
          {
            *(_DWORD *)v123 = 67109120;
            *(_DWORD *)&v123[4] = v20;
            v71 = "Couldn't create table; rc = %d\n";
            goto LABEL_117;
          }
          goto LABEL_118;
        }
        if (*v81 == 2)
        {
          v98 = 2;
        }
        else
        {
          v103 = *__error();
          v104 = _SILogForLogForCategory(4);
          if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
          {
            v110 = *v81;
            *(_DWORD *)v123 = 136315906;
            *(_QWORD *)&v123[4] = "get_persistent_id_store";
            *(_WORD *)&v123[12] = 1024;
            *(_DWORD *)&v123[14] = 230;
            *(_WORD *)&v123[18] = 2080;
            *(_QWORD *)&v123[20] = "psid.db";
            v124 = 1024;
            v125 = v110;
            _os_log_error_impl(&dword_1B8270000, v104, OS_LOG_TYPE_ERROR, "%s:%d: psid: %s : danger! ps store table id %d looks bad! resetting\n", v123, 0x22u);
          }
          *__error() = v103;
          v98 = *v81;
        }
        v105 = sqlite3BtreeCursor(*(_QWORD *)v17, v98, 1, (uint64_t (*)(int, int, void *, int, void *))keycompare, (uint64_t **)(v17 + 16));
        if ((_DWORD)v105)
        {
          v20 = v105;
          v68 = *__error();
          v69 = _SILogForLogForCategory(4);
          v70 = 2 * (dword_1EF19FC9C < 4);
          if (os_log_type_enabled(v69, v70))
          {
            *(_DWORD *)v123 = 67109120;
            *(_DWORD *)&v123[4] = v20;
            v71 = "Couldn't create cursor; rc = %d\n";
            goto LABEL_117;
          }
          goto LABEL_118;
        }
        *(_DWORD *)(v17 + 32) = 100;
        LODWORD(v120) = 100;
        v106 = sqlite3BtreeInsert(*(_QWORD *)(v17 + 16), (char *)&master_fid_rec, v24, (char *)&v120, 4);
        if ((_DWORD)v106)
        {
          v20 = v106;
          v68 = *__error();
          v69 = _SILogForLogForCategory(4);
          v70 = 2 * (dword_1EF19FC9C < 4);
          if (os_log_type_enabled(v69, v70))
          {
            *(_DWORD *)v123 = 67109120;
            *(_DWORD *)&v123[4] = v20;
            v71 = "Couldn't insert key; rc = %d\n";
            goto LABEL_117;
          }
          goto LABEL_118;
        }
        sqlite3BtreeCloseCursor(*(uint64_t **)(v17 + 16));
        *(_QWORD *)(v17 + 16) = 0;
        v20 = sqlite3BtreeSync(*(_QWORD *)v17);
        if ((_DWORD)v20)
          goto LABEL_16;
        v108 = sqlite3BtreeCommit(*(_QWORD *)v17);
        if ((_DWORD)v108)
        {
          v20 = v108;
          v68 = *__error();
          v69 = _SILogForLogForCategory(4);
          v70 = 2 * (dword_1EF19FC9C < 4);
          if (!os_log_type_enabled(v69, v70))
            goto LABEL_118;
          *(_DWORD *)v123 = 67109120;
          *(_DWORD *)&v123[4] = v20;
          v71 = "Couldn't commit btree; rc = %d\n";
          goto LABEL_117;
        }
        goto LABEL_95;
      }
LABEL_57:
      v20 = 2;
      goto LABEL_16;
    }
  }
  v20 = 12;
LABEL_23:
  v27 = v119;
  MEMORY[0x1BCCB1484](v119);
  if ((v27 & 0x80000000) == 0)
    close(v27);
  if ((_DWORD)v20)
    goto LABEL_26;
  v11[1] = 0;
  v118 = 0;
  v117 = xmmword_1B862C180;
  memset(v116, 0, 44);
  if (!fgetattrlist(*(_DWORD *)(a2 + 4), &v117, v116, 0x2CuLL, 0))
    v11[1] = (DWORD1(v116[0]) & 0x200000) != 0;
  *(_QWORD *)v123 = 0;
  *(_QWORD *)&v123[8] = 0;
  pthread_mutexattr_init((pthread_mutexattr_t *)v123);
  pthread_mutex_init((pthread_mutex_t *)(v11 + 2080), (const pthread_mutexattr_t *)v123);
  pthread_mutexattr_destroy((pthread_mutexattr_t *)v123);
  *v11 = 1;
  v20 = 0;
  *((_QWORD *)v11 + 268) = _Block_copy(a5);
  *(_QWORD *)(a1 + 16) = v11;
  return v20;
}

_QWORD *si_psid_clone_and_reset(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *Instance;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(v2 + 2))
  {
    if (!__kSI_PersistentIDStoreTypeID)
      __kSI_PersistentIDStoreTypeID = _CFRuntimeRegisterClass();
    Instance = (_QWORD *)_CFRuntimeCreateInstance();
    unlinkat(a2, "psid.db", 0);
    if (!si_init_posix_psid(Instance, *(_QWORD *)(v2 + 2072), a2, 32770, *(_QWORD *)(v2 + 2144)))
    {
      si_psid_set_root_path2((uint64_t)Instance, (const char *)(v2 + 16), (const char *)(v2 + 16));
      *(_QWORD *)(a1 + 16) = Instance[2];
      Instance[2] = v2;
      return Instance;
    }
    CFRelease(Instance);
  }
  return 0;
}

void ___Z27DefaultIndexAttributeScoresv_block_invoke()
{
  void *__p[2];
  char v1;

  std::string::basic_string[abi:nn180100]<0>(__p, "*");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&DefaultIndexAttributeScores(void)::_indexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTextContent");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&DefaultIndexAttributeScores(void)::_indexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_1B837A4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(void **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_QWORD *)i + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_DWORD *)i + 10) = 0;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v25)
  {
    *(_QWORD *)i = *v25;
LABEL_44:
    *v25 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v24 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v26 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11)
        v26 %= v11;
    }
    else
    {
      v26 &= v11 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B837A718(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void ___Z26SafariIndexAttributeScoresv_block_invoke()
{
  void *__p[2];
  char v1;

  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemContentURL");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariIndexAttributeScores(void)::_safariIndexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariIndexAttributeScores(void)::_safariIndexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "redirectSourceTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariIndexAttributeScores(void)::_safariIndexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "redirectSourceURL");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariIndexAttributeScores(void)::_safariIndexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "bookmarkTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariIndexAttributeScores(void)::_safariIndexAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_1B837A868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *getIndexAttributeScores(int a1)
{
  unsigned __int8 v1;
  unsigned __int8 v3;

  if (a1 == 4)
  {
    if ((v1 & 1) == 0
    {
      SafariIndexAttributeScores(void)::_safariIndexAttributeScores = 0u;
      unk_1EF1A8D40 = 0u;
      dword_1EF1A8D50 = 1065353216;
      __cxa_atexit((void (*)(void *))std::unordered_map<std::string,float>::~unordered_map[abi:nn180100], &SafariIndexAttributeScores(void)::_safariIndexAttributeScores, &dword_1B8270000);
    }
    if (SafariIndexAttributeScores(void)::onceToken != -1)
      dispatch_once(&SafariIndexAttributeScores(void)::onceToken, &__block_literal_global_3);
    return &SafariIndexAttributeScores(void)::_safariIndexAttributeScores;
  }
  else
  {
    if ((v3 & 1) == 0
    {
      DefaultIndexAttributeScores(void)::_indexAttributeScores = 0u;
      unk_1EDBBD8F8 = 0u;
      dword_1EDBBD908 = 1065353216;
      __cxa_atexit((void (*)(void *))std::unordered_map<std::string,float>::~unordered_map[abi:nn180100], &DefaultIndexAttributeScores(void)::_indexAttributeScores, &dword_1B8270000);
    }
    if (DefaultIndexAttributeScores(void)::onceToken[0] != -1)
      dispatch_once(DefaultIndexAttributeScores(void)::onceToken, &__block_literal_global);
    return &DefaultIndexAttributeScores(void)::_indexAttributeScores;
  }
}

void CalendarRankingAttributeScores(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    CalendarRankingAttributeScores(void)::_calendarAttributeScores = 0u;
    unk_1EDBBD938 = 0u;
    dword_1EDBBD948 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,float>::~unordered_map[abi:nn180100], &CalendarRankingAttributeScores(void)::_calendarAttributeScores, &dword_1B8270000);
  }
  if (CalendarRankingAttributeScores(void)::onceToken[0] != -1)
    dispatch_once(CalendarRankingAttributeScores(void)::onceToken, &__block_literal_global_9);
}

void ___Z30CalendarRankingAttributeScoresv_block_invoke()
{
  void *__p[2];
  char v1;

  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthors");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&CalendarRankingAttributeScores(void)::_calendarAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthorEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&CalendarRankingAttributeScores(void)::_calendarAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1061997773;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemRecipients");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&CalendarRankingAttributeScores(void)::_calendarAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPrimaryRecipientEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&CalendarRankingAttributeScores(void)::_calendarAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&CalendarRankingAttributeScores(void)::_calendarAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1061997773;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_1B837ABB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MessagesRankingAttributeScores(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    MessagesRankingAttributeScores(void)::_messagesAttributeScores = 0u;
    *(_OWORD *)algn_1EDBBD9B0 = 0u;
    dword_1EDBBD9C0 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,float>::~unordered_map[abi:nn180100], &MessagesRankingAttributeScores(void)::_messagesAttributeScores, &dword_1B8270000);
  }
  if (MessagesRankingAttributeScores(void)::onceToken != -1)
    dispatch_once(&MessagesRankingAttributeScores(void)::onceToken, &__block_literal_global_14);
}

void ___Z30MessagesRankingAttributeScoresv_block_invoke()
{
  void *__p[2];
  char v1;

  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthors");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MessagesRankingAttributeScores(void)::_messagesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTextContent");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MessagesRankingAttributeScores(void)::_messagesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1056964608;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthorEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MessagesRankingAttributeScores(void)::_messagesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1061997773;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemRecipients");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MessagesRankingAttributeScores(void)::_messagesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPrimaryRecipientEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MessagesRankingAttributeScores(void)::_messagesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_1B837ADD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void FilesRankingAttributeScores(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    FilesRankingAttributeScores(void)::_filesAttributeScores = 0u;
    unk_1EF1ACFD8 = 0u;
    dword_1EF1ACFE8 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,float>::~unordered_map[abi:nn180100], &FilesRankingAttributeScores(void)::_filesAttributeScores, &dword_1B8270000);
  }
  if (FilesRankingAttributeScores(void)::onceToken != -1)
    dispatch_once(&FilesRankingAttributeScores(void)::onceToken, &__block_literal_global_15);
}

void ___Z27FilesRankingAttributeScoresv_block_invoke()
{
  void *__p[2];
  char v1;

  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemDisplayName");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&FilesRankingAttributeScores(void)::_filesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemFilename");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&FilesRankingAttributeScores(void)::_filesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "FPFilename");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&FilesRankingAttributeScores(void)::_filesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAlternateNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&FilesRankingAttributeScores(void)::_filesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemLastEditorName");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&FilesRankingAttributeScores(void)::_filesAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1061997773;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_1B837AFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MailRankingAttributeScores(void)
{
  unsigned __int8 v0;

  {
    MailRankingAttributeScores(void)::_mailAttributeScores = 0u;
    unk_1EDBBD8C0 = 0u;
    dword_1EDBBD8D0 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,float>::~unordered_map[abi:nn180100], &MailRankingAttributeScores(void)::_mailAttributeScores, &dword_1B8270000);
  }
  if (MailRankingAttributeScores(void)::onceToken != -1)
    dispatch_once(&MailRankingAttributeScores(void)::onceToken, &__block_literal_global_21);
}

void ___Z26MailRankingAttributeScoresv_block_invoke()
{
  void *__p[2];
  char v1;

  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthors");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthorEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1061997773;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemSubject");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1063675494;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTextContent");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1056964608;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemRecipients");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemRecipientEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemEmailAddresses");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1053609165;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAttachmentTypes");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1045220557;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAttachmentNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1045220557;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_1B837B2F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___Z30MailRankingNameAttributeScoresv_block_invoke()
{
  void *__p[2];
  char v1;

  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAuthors");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingNameAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemRecipients");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&MailRankingNameAttributeScores(void)::_mailAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_1B837B3D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PhotosRankingAttributeScores(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    PhotosRankingAttributeScores(void)::_phRankingAttrScores = 0u;
    *(_OWORD *)algn_1EF1AE0D0 = 0u;
    dword_1EF1AE0E0 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,float>::~unordered_map[abi:nn180100], &PhotosRankingAttributeScores(void)::_phRankingAttrScores, &dword_1B8270000);
  }
  if (PhotosRankingAttributeScores(void)::onceToken != -1)
    dispatch_once(&PhotosRankingAttributeScores(void)::onceToken, &__block_literal_global_28);
}

void ___Z28PhotosRankingAttributeScoresv_block_invoke()
{
  void *__p[2];
  char v1;

  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosPeopleNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhotosRankingAttributeScores(void)::_phRankingAttrScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065772646;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSceneClassificationLabels");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhotosRankingAttributeScores(void)::_phRankingAttrScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065688760;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSceneClassificationSynonyms");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhotosRankingAttributeScores(void)::_phRankingAttrScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065688760;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosLocationKeywords");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhotosRankingAttributeScores(void)::_phRankingAttrScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065604874;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_1B837B5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SafariRankingAttributeScores(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    SafariRankingAttributeScores(void)::_safariAttributeScores = 0u;
    unk_1EF1A8D78 = 0u;
    dword_1EF1A8D88 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,float>::~unordered_map[abi:nn180100], &SafariRankingAttributeScores(void)::_safariAttributeScores, &dword_1B8270000);
  }
  if (SafariRankingAttributeScores(void)::onceToken != -1)
    dispatch_once(&SafariRankingAttributeScores(void)::onceToken, &__block_literal_global_33);
}

void ___Z28SafariRankingAttributeScoresv_block_invoke()
{
  void *__p[2];
  char v1;

  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemComment");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariRankingAttributeScores(void)::_safariAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1065353216;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariRankingAttributeScores(void)::_safariAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1061997773;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "bookmarkTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariRankingAttributeScores(void)::_safariAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1063675494;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPath");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariRankingAttributeScores(void)::_safariAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1053609165;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "redirectSourceTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariRankingAttributeScores(void)::_safariAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "redirectSourceURL");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&SafariRankingAttributeScores(void)::_safariAttributeScores, (uint64_t)__p, (uint64_t)__p)+ 10) = 1045220557;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_1B837B7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t getRankingAttributeScores(int a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  _QWORD v5[5];

  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &getRankingAttributeScores(PRBundleIDType)::mu, &dword_1B8270000);
  }
  if (!getRankingAttributeScores(PRBundleIDType)::ans[a1])
  {
    std::mutex::lock(&getRankingAttributeScores(PRBundleIDType)::mu);
    if (!getRankingAttributeScores(PRBundleIDType)::ans[a1])
    {
      v3 = operator new();
      *(_OWORD *)v3 = 0u;
      *(_OWORD *)(v3 + 16) = 0u;
      *(_DWORD *)(v3 + 32) = 1065353216;
      if ((a1 & 0x400) != 0)
      {
        PhotosRankingAttributeScores();
        std::unordered_map<std::string,float>::unordered_map((uint64_t)v5, (uint64_t)&PhotosRankingAttributeScores(void)::_phRankingAttrScores);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_handle_merge_unique[abi:nn180100]<std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>>(v3, v5);
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)v5);
        CalendarRankingAttributeScores();
        std::unordered_map<std::string,float>::unordered_map((uint64_t)v5, (uint64_t)&CalendarRankingAttributeScores(void)::_calendarAttributeScores);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_handle_merge_unique[abi:nn180100]<std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>>(v3, v5);
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)v5);
        MessagesRankingAttributeScores();
        std::unordered_map<std::string,float>::unordered_map((uint64_t)v5, (uint64_t)&MessagesRankingAttributeScores(void)::_messagesAttributeScores);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_handle_merge_unique[abi:nn180100]<std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>>(v3, v5);
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)v5);
        MailRankingAttributeScores();
        std::unordered_map<std::string,float>::unordered_map((uint64_t)v5, (uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_handle_merge_unique[abi:nn180100]<std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>>(v3, v5);
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)v5);
        FilesRankingAttributeScores();
        std::unordered_map<std::string,float>::unordered_map((uint64_t)v5, (uint64_t)&FilesRankingAttributeScores(void)::_filesAttributeScores);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_handle_merge_unique[abi:nn180100]<std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>>(v3, v5);
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)v5);
      }
      if ((a1 & 8) != 0)
      {
        PhotosRankingAttributeScores();
        std::unordered_map<std::string,float>::unordered_map((uint64_t)v5, (uint64_t)&PhotosRankingAttributeScores(void)::_phRankingAttrScores);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_handle_merge_unique[abi:nn180100]<std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>>(v3, v5);
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)v5);
      }
      if ((a1 & 0x10) != 0)
      {
        CalendarRankingAttributeScores();
        std::unordered_map<std::string,float>::unordered_map((uint64_t)v5, (uint64_t)&CalendarRankingAttributeScores(void)::_calendarAttributeScores);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_handle_merge_unique[abi:nn180100]<std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>>(v3, v5);
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)v5);
      }
      if ((a1 & 0x20) != 0)
      {
        MessagesRankingAttributeScores();
        std::unordered_map<std::string,float>::unordered_map((uint64_t)v5, (uint64_t)&MessagesRankingAttributeScores(void)::_messagesAttributeScores);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_handle_merge_unique[abi:nn180100]<std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>>(v3, v5);
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)v5);
      }
      if ((a1 & 3) != 0)
      {
        MailRankingAttributeScores();
        std::unordered_map<std::string,float>::unordered_map((uint64_t)v5, (uint64_t)&MailRankingAttributeScores(void)::_mailAttributeScores);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_handle_merge_unique[abi:nn180100]<std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>>(v3, v5);
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)v5);
      }
      if ((a1 & 4) != 0)
      {
        SafariRankingAttributeScores();
        std::unordered_map<std::string,float>::unordered_map((uint64_t)v5, (uint64_t)&SafariRankingAttributeScores(void)::_safariAttributeScores);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_handle_merge_unique[abi:nn180100]<std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>>(v3, v5);
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)v5);
      }
      if ((a1 & 0x40) != 0)
      {
        FilesRankingAttributeScores();
        std::unordered_map<std::string,float>::unordered_map((uint64_t)v5, (uint64_t)&FilesRankingAttributeScores(void)::_filesAttributeScores);
        std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_handle_merge_unique[abi:nn180100]<std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>>(v3, v5);
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)v5);
      }
      atomic_store(v3, &getRankingAttributeScores(PRBundleIDType)::ans[a1]);
    }
    std::mutex::unlock(&getRankingAttributeScores(PRBundleIDType)::mu);
  }
  return getRankingAttributeScores(PRBundleIDType)::ans[a1];
}

void sub_1B837BAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)va);
  std::mutex::unlock(&getRankingAttributeScores(PRBundleIDType)::mu);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,float>::unordered_map(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v4 = *(uint64_t **)(a2 + 16);
  if (v4)
  {
    v5 = (_QWORD *)(a1 + 16);
    do
    {
      v6 = *((char *)v4 + 39);
      if (v6 >= 0)
        v7 = v4 + 2;
      else
        v7 = (uint64_t *)v4[2];
      if (v6 >= 0)
        v8 = *((unsigned __int8 *)v4 + 39);
      else
        v8 = v4[3];
      v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
      v10 = v9;
      v11 = *(_QWORD *)(a1 + 8);
      if (v11)
      {
        v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        v13 = v12.u32[0];
        if (v12.u32[0] > 1uLL)
        {
          v14 = v9;
          if (v9 >= v11)
            v14 = v9 % v11;
        }
        else
        {
          v14 = (v11 - 1) & v9;
        }
        v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v14);
        if (v15)
        {
          for (i = *v15; i; i = *(unsigned __int8 **)i)
          {
            v17 = *((_QWORD *)i + 1);
            if (v17 == v10)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)v4 + 16))
                goto LABEL_51;
            }
            else
            {
              if (v13 > 1)
              {
                if (v17 >= v11)
                  v17 %= v11;
              }
              else
              {
                v17 &= v11 - 1;
              }
              if (v17 != v14)
                break;
            }
          }
        }
      }
      else
      {
        v14 = 0;
      }
      v18 = (char *)operator new(0x30uLL);
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = v10;
      v19 = (std::string *)(v18 + 16);
      if (*((char *)v4 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v19, (const std::string::value_type *)v4[2], v4[3]);
      }
      else
      {
        v20 = *((_OWORD *)v4 + 1);
        *((_QWORD *)v18 + 4) = v4[4];
        *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
      }
      *((_DWORD *)v18 + 10) = *((_DWORD *)v4 + 10);
      v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v22 = *(float *)(a1 + 32);
      if (!v11 || (float)(v22 * (float)v11) < v21)
      {
        v23 = (v11 & (v11 - 1)) != 0;
        if (v11 < 3)
          v23 = 1;
        v24 = v23 | (2 * v11);
        v25 = vcvtps_u32_f32(v21 / v22);
        if (v24 <= v25)
          v26 = v25;
        else
          v26 = v24;
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v26);
        v11 = *(_QWORD *)(a1 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11)
            v14 = v10 % v11;
          else
            v14 = v10;
        }
        else
        {
          v14 = (v11 - 1) & v10;
        }
      }
      v27 = *(_QWORD *)a1;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
      if (v28)
      {
        *(_QWORD *)v18 = *v28;
      }
      else
      {
        *(_QWORD *)v18 = *v5;
        *v5 = v18;
        *(_QWORD *)(v27 + 8 * v14) = v5;
        if (!*(_QWORD *)v18)
          goto LABEL_50;
        v29 = *(_QWORD *)(*(_QWORD *)v18 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v29 >= v11)
            v29 %= v11;
        }
        else
        {
          v29 &= v11 - 1;
        }
        v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
      }
      *v28 = v18;
LABEL_50:
      ++*(_QWORD *)(a1 + 24);
LABEL_51:
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  return a1;
}

void sub_1B837BDE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__node_handle_merge_unique[abi:nn180100]<std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>>(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  int v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  int8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  int8x8_t v32;
  uint8x8_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;

  v2 = (uint64_t *)a2[2];
  v38 = a2 + 2;
  if (v2)
  {
    v37 = a1 + 16;
    while (1)
    {
      v5 = *((char *)v2 + 39);
      if (v5 >= 0)
        v6 = v2 + 2;
      else
        v6 = (uint64_t *)v2[2];
      if (v5 >= 0)
        v7 = *((unsigned __int8 *)v2 + 39);
      else
        v7 = v2[3];
      v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v6, v7);
      v9 = v8;
      v10 = *(_QWORD *)(a1 + 8);
      if (v10)
      {
        v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        v12 = v11.u32[0];
        if (v11.u32[0] > 1uLL)
        {
          v13 = v8;
          if (v10 <= v8)
            v13 = v8 % v10;
        }
        else
        {
          v13 = (v10 - 1) & v8;
        }
        v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v13);
        if (v14)
        {
          for (i = *v14; i; i = *(unsigned __int8 **)i)
          {
            v16 = *((_QWORD *)i + 1);
            if (v16 == v9)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)v2 + 16))
              {
                v36 = (uint64_t *)*v2;
                goto LABEL_73;
              }
            }
            else
            {
              if (v12 > 1)
              {
                if (v16 >= v10)
                  v16 %= v10;
              }
              else
              {
                v16 &= v10 - 1;
              }
              if (v16 != v13)
                break;
            }
          }
        }
      }
      v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v18 = *(float *)(a1 + 32);
      if (!v10 || (float)(v18 * (float)v10) < v17)
      {
        v19 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3)
          v19 = 1;
        v20 = v19 | (2 * v10);
        v21 = vcvtps_u32_f32(v17 / v18);
        if (v20 <= v21)
          v22 = v21;
        else
          v22 = v20;
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v22);
      }
      v23 = (int8x8_t)a2[1];
      v36 = (uint64_t *)*v2;
      v24 = v2[1];
      v25 = (uint8x8_t)vcnt_s8(v23);
      v25.i16[0] = vaddlv_u8(v25);
      if (v25.u32[0] > 1uLL)
      {
        if (v24 >= *(_QWORD *)&v23)
          v24 %= *(_QWORD *)&v23;
      }
      else
      {
        v24 &= *(_QWORD *)&v23 - 1;
      }
      v26 = *(uint64_t **)(*a2 + 8 * v24);
      do
      {
        v27 = v26;
        v26 = (uint64_t *)*v26;
      }
      while (v26 != v2);
      if (v27 != v38)
      {
        v28 = v27[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v28 >= *(_QWORD *)&v23)
            v28 %= *(_QWORD *)&v23;
        }
        else
        {
          v28 &= *(_QWORD *)&v23 - 1;
        }
        v29 = (uint64_t *)*v2;
        if (v28 == v24)
          goto LABEL_52;
      }
      if (!v36)
        break;
      v30 = v36[1];
      if (v25.u32[0] > 1uLL)
      {
        if (v30 >= *(_QWORD *)&v23)
          v30 %= *(_QWORD *)&v23;
      }
      else
      {
        v30 &= *(_QWORD *)&v23 - 1;
      }
      v29 = (uint64_t *)*v2;
      if (v30 != v24)
        break;
LABEL_53:
      v31 = v29[1];
      if (v25.u32[0] > 1uLL)
      {
        if (v31 >= *(_QWORD *)&v23)
          v31 %= *(_QWORD *)&v23;
      }
      else
      {
        v31 &= *(_QWORD *)&v23 - 1;
      }
      if (v31 != v24)
      {
        *(_QWORD *)(*a2 + 8 * v31) = v27;
        v29 = (uint64_t *)*v2;
      }
LABEL_59:
      *v27 = (uint64_t)v29;
      --a2[3];
      *v2 = 0;
      v2[1] = v9;
      v32 = *(int8x8_t *)(a1 + 8);
      v33 = (uint8x8_t)vcnt_s8(v32);
      v33.i16[0] = vaddlv_u8(v33);
      if (v33.u32[0] > 1uLL)
      {
        if (v9 >= *(_QWORD *)&v32)
          v9 %= *(_QWORD *)&v32;
      }
      else
      {
        v9 &= *(_QWORD *)&v32 - 1;
      }
      v34 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v9);
      if (v34)
      {
        *v2 = *v34;
      }
      else
      {
        *v2 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v2;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v37;
        if (!*v2)
          goto LABEL_72;
        v35 = *(_QWORD *)(*v2 + 8);
        if (v33.u32[0] > 1uLL)
        {
          if (v35 >= *(_QWORD *)&v32)
            v35 %= *(_QWORD *)&v32;
        }
        else
        {
          v35 &= *(_QWORD *)&v32 - 1;
        }
        v34 = (uint64_t *)(*(_QWORD *)a1 + 8 * v35);
      }
      *v34 = (uint64_t)v2;
LABEL_72:
      ++*(_QWORD *)(a1 + 24);
LABEL_73:
      v2 = v36;
      if (!v36)
        return;
    }
    *(_QWORD *)(*a2 + 8 * v24) = 0;
    v29 = (uint64_t *)*v2;
LABEL_52:
    if (!v29)
      goto LABEL_59;
    goto LABEL_53;
  }
}

unint64_t getWildCardAllowedFields(unsigned int a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t i;
  int v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 *j;
  unint64_t v18;
  char *v19;
  std::string *v20;
  __int128 v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t *v30;
  int v31;
  uint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 **v40;
  unsigned __int8 *k;
  unint64_t v42;
  float v43;
  float v44;
  _BOOL8 v45;
  unint64_t v46;
  unint64_t v47;
  size_t v48;
  unint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  __int128 *v52;
  __int128 *v53;
  unint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  int8x8_t v58;
  uint8x8_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  float v67;

  {
    __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE4AB8], &getWildCardAllowedFields(PRBundleIDType)::mu, &dword_1B8270000);
  }
  v3 = a1;
  if (!getWildCardAllowedFields(PRBundleIDType)::ans[a1])
  {
    std::mutex::lock(&getWildCardAllowedFields(PRBundleIDType)::mu);
    if (!getWildCardAllowedFields(PRBundleIDType)::ans[a1])
    {
      v4 = operator new();
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *(_DWORD *)(v4 + 32) = 1065353216;
      if ((a1 & 3) != 0)
      {
        if ((v5 & 1) == 0
        {
          *(_OWORD *)&MailWildCardAllowedFields(void)::_mailWildCardAllowedFields = 0u;
          *(_OWORD *)&qword_1EDBBDA38 = 0u;
          dword_1EDBBDA48 = 1065353216;
          __cxa_atexit((void (*)(void *))std::unordered_map<std::string,int>::~unordered_map[abi:nn180100], &MailWildCardAllowedFields(void)::_mailWildCardAllowedFields, &dword_1B8270000);
        }
        if (MailWildCardAllowedFields(void)::onceToken[0] != -1)
          dispatch_once(MailWildCardAllowedFields(void)::onceToken, &__block_literal_global_36);
        v65 = 0u;
        v66 = 0u;
        v67 = *(float *)&dword_1EDBBDA48;
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>((uint64_t)&v65, qword_1EDBBDA30);
        v64 = a1;
        for (i = qword_1EDBBDA38; i; i = *(_QWORD *)i)
        {
          v7 = *(char *)(i + 39);
          if (v7 >= 0)
            v8 = (uint64_t *)(i + 16);
          else
            v8 = *(uint64_t **)(i + 16);
          if (v7 >= 0)
            v9 = *(unsigned __int8 *)(i + 39);
          else
            v9 = *(_QWORD *)(i + 24);
          v10 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v8, v9);
          v11 = v10;
          v12 = *((_QWORD *)&v65 + 1);
          if (*((_QWORD *)&v65 + 1))
          {
            v13 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v65 + 8));
            v13.i16[0] = vaddlv_u8(v13);
            v14 = v13.u32[0];
            if (v13.u32[0] > 1uLL)
            {
              v15 = v10;
              if (v10 >= *((_QWORD *)&v65 + 1))
                v15 = v10 % *((_QWORD *)&v65 + 1);
            }
            else
            {
              v15 = (*((_QWORD *)&v65 + 1) - 1) & v10;
            }
            v16 = *(unsigned __int8 ***)(v65 + 8 * v15);
            if (v16)
            {
              for (j = *v16; j; j = *(unsigned __int8 **)j)
              {
                v18 = *((_QWORD *)j + 1);
                if (v18 == v11)
                {
                  if (std::equal_to<std::string>::operator()[abi:nn180100](j + 16, (unsigned __int8 *)(i + 16)))
                    goto LABEL_57;
                }
                else
                {
                  if (v14 > 1)
                  {
                    if (v18 >= v12)
                      v18 %= v12;
                  }
                  else
                  {
                    v18 &= v12 - 1;
                  }
                  if (v18 != v15)
                    break;
                }
              }
            }
          }
          else
          {
            v15 = 0;
          }
          v19 = (char *)operator new(0x30uLL);
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = v11;
          v20 = (std::string *)(v19 + 16);
          if (*(char *)(i + 39) < 0)
          {
            std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)(i + 16), *(_QWORD *)(i + 24));
          }
          else
          {
            v21 = *(_OWORD *)(i + 16);
            *((_QWORD *)v19 + 4) = *(_QWORD *)(i + 32);
            *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          }
          *((_DWORD *)v19 + 10) = *(_DWORD *)(i + 40);
          v22 = (float)(unint64_t)(*((_QWORD *)&v66 + 1) + 1);
          if (!v12 || (float)(v67 * (float)v12) < v22)
          {
            v23 = (v12 & (v12 - 1)) != 0;
            if (v12 < 3)
              v23 = 1;
            v24 = v23 | (2 * v12);
            v25 = vcvtps_u32_f32(v22 / v67);
            if (v24 <= v25)
              v26 = v25;
            else
              v26 = v24;
            std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>((uint64_t)&v65, v26);
            v12 = *((_QWORD *)&v65 + 1);
            if ((*((_QWORD *)&v65 + 1) & (*((_QWORD *)&v65 + 1) - 1)) != 0)
            {
              if (v11 >= *((_QWORD *)&v65 + 1))
                v15 = v11 % *((_QWORD *)&v65 + 1);
              else
                v15 = v11;
            }
            else
            {
              v15 = (*((_QWORD *)&v65 + 1) - 1) & v11;
            }
          }
          v27 = v65;
          v28 = *(_QWORD **)(v65 + 8 * v15);
          if (v28)
          {
            *(_QWORD *)v19 = *v28;
          }
          else
          {
            *(_QWORD *)v19 = v66;
            *(_QWORD *)&v66 = v19;
            *(_QWORD *)(v27 + 8 * v15) = &v66;
            if (!*(_QWORD *)v19)
              goto LABEL_56;
            v29 = *(_QWORD *)(*(_QWORD *)v19 + 8);
            if ((v12 & (v12 - 1)) != 0)
            {
              if (v29 >= v12)
                v29 %= v12;
            }
            else
            {
              v29 &= v12 - 1;
            }
            v28 = (_QWORD *)(v65 + 8 * v29);
          }
          *v28 = v19;
LABEL_56:
          ++*((_QWORD *)&v66 + 1);
LABEL_57:
          ;
        }
        v30 = (uint64_t *)v66;
        if ((_QWORD)v66)
        {
          while (1)
          {
            v31 = *((char *)v30 + 39);
            if (v31 >= 0)
              v32 = v30 + 2;
            else
              v32 = (uint64_t *)v30[2];
            if (v31 >= 0)
              v33 = *((unsigned __int8 *)v30 + 39);
            else
              v33 = v30[3];
            v34 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v32, v33);
            v35 = v34;
            v36 = *(_QWORD *)(v4 + 8);
            if (v36)
            {
              v37 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
              v37.i16[0] = vaddlv_u8(v37);
              v38 = v37.u32[0];
              if (v37.u32[0] > 1uLL)
              {
                v39 = v34;
                if (v36 <= v34)
                  v39 = v34 % v36;
              }
              else
              {
                v39 = (v36 - 1) & v34;
              }
              v40 = *(unsigned __int8 ***)(*(_QWORD *)v4 + 8 * v39);
              if (v40)
              {
                for (k = *v40; k; k = *(unsigned __int8 **)k)
                {
                  v42 = *((_QWORD *)k + 1);
                  if (v42 == v35)
                  {
                    if (std::equal_to<std::string>::operator()[abi:nn180100](k + 16, (unsigned __int8 *)v30 + 16))
                    {
                      v62 = (uint64_t *)*v30;
                      goto LABEL_129;
                    }
                  }
                  else
                  {
                    if (v38 > 1)
                    {
                      if (v42 >= v36)
                        v42 %= v36;
                    }
                    else
                    {
                      v42 &= v36 - 1;
                    }
                    if (v42 != v39)
                      break;
                  }
                }
              }
            }
            v43 = (float)(unint64_t)(*(_QWORD *)(v4 + 24) + 1);
            v44 = *(float *)(v4 + 32);
            if (!v36 || (float)(v44 * (float)v36) < v43)
            {
              v45 = (v36 & (v36 - 1)) != 0;
              if (v36 < 3)
                v45 = 1;
              v46 = v45 | (2 * v36);
              v47 = vcvtps_u32_f32(v43 / v44);
              if (v46 <= v47)
                v48 = v47;
              else
                v48 = v46;
              std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(v4, v48);
            }
            v49 = *((_QWORD *)&v65 + 1);
            v50 = v30[1];
            v51 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v65 + 8));
            v51.i16[0] = vaddlv_u8(v51);
            if (v51.u32[0] > 1uLL)
            {
              if (v50 >= *((_QWORD *)&v65 + 1))
                v50 %= *((_QWORD *)&v65 + 1);
            }
            else
            {
              v50 &= *((_QWORD *)&v65 + 1) - 1;
            }
            v62 = (uint64_t *)*v30;
            v52 = *(__int128 **)(v65 + 8 * v50);
            do
            {
              v53 = v52;
              v52 = *(__int128 **)v52;
            }
            while (v52 != (__int128 *)v30);
            if (v53 != &v66)
            {
              v54 = *((_QWORD *)v53 + 1);
              if (v51.u32[0] > 1uLL)
              {
                if (v54 >= *((_QWORD *)&v65 + 1))
                  v54 %= *((_QWORD *)&v65 + 1);
              }
              else
              {
                v54 &= *((_QWORD *)&v65 + 1) - 1;
              }
              v55 = (uint64_t *)*v30;
              if (v54 == v50)
                goto LABEL_108;
            }
            if (!v62)
              break;
            v56 = v62[1];
            if (v51.u32[0] > 1uLL)
            {
              if (v56 >= *((_QWORD *)&v65 + 1))
                v56 %= *((_QWORD *)&v65 + 1);
            }
            else
            {
              v56 &= *((_QWORD *)&v65 + 1) - 1;
            }
            v55 = (uint64_t *)*v30;
            if (v56 != v50)
              break;
LABEL_109:
            v57 = v55[1];
            if (v51.u32[0] > 1uLL)
            {
              if (v57 >= v49)
                v57 %= v49;
            }
            else
            {
              v57 &= v49 - 1;
            }
            if (v57 != v50)
            {
              *(_QWORD *)(v65 + 8 * v57) = v53;
              v55 = (uint64_t *)*v30;
            }
LABEL_115:
            *(_QWORD *)v53 = v55;
            *v30 = 0;
            --*((_QWORD *)&v66 + 1);
            v30[1] = v35;
            v58 = *(int8x8_t *)(v4 + 8);
            v59 = (uint8x8_t)vcnt_s8(v58);
            v59.i16[0] = vaddlv_u8(v59);
            if (v59.u32[0] > 1uLL)
            {
              if (v35 >= *(_QWORD *)&v58)
                v35 %= *(_QWORD *)&v58;
            }
            else
            {
              v35 &= *(_QWORD *)&v58 - 1;
            }
            v60 = *(uint64_t **)(*(_QWORD *)v4 + 8 * v35);
            if (v60)
            {
              *v30 = *v60;
            }
            else
            {
              *v30 = *(_QWORD *)(v4 + 16);
              *(_QWORD *)(v4 + 16) = v30;
              *(_QWORD *)(*(_QWORD *)v4 + 8 * v35) = v4 + 16;
              if (!*v30)
                goto LABEL_128;
              v61 = *(_QWORD *)(*v30 + 8);
              if (v59.u32[0] > 1uLL)
              {
                if (v61 >= *(_QWORD *)&v58)
                  v61 %= *(_QWORD *)&v58;
              }
              else
              {
                v61 &= *(_QWORD *)&v58 - 1;
              }
              v60 = (uint64_t *)(*(_QWORD *)v4 + 8 * v61);
            }
            *v60 = (uint64_t)v30;
LABEL_128:
            ++*(_QWORD *)(v4 + 24);
LABEL_129:
            v30 = v62;
            if (!v62)
              goto LABEL_130;
          }
          *(_QWORD *)(v65 + 8 * v50) = 0;
          v55 = (uint64_t *)*v30;
LABEL_108:
          if (!v55)
            goto LABEL_115;
          goto LABEL_109;
        }
LABEL_130:
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)&v65);
        v3 = v64;
      }
      atomic_store(v4, &getWildCardAllowedFields(PRBundleIDType)::ans[v3]);
    }
    std::mutex::unlock(&getWildCardAllowedFields(PRBundleIDType)::mu);
  }
  return getWildCardAllowedFields(PRBundleIDType)::ans[v3];
}

void sub_1B837C8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table((uint64_t)va);
  std::mutex::unlock(&getWildCardAllowedFields(PRBundleIDType)::mu);
  _Unwind_Resume(a1);
}

void ___ZL25MailWildCardAllowedFieldsv_block_invoke()
{
  void *__p[2];
  char v1;

  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemSubject");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemTextContent");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (uint64_t)__p)+ 10) = 0;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_1B837C98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  void **v12;
  void *i;
  unint64_t v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v3 = (unsigned __int8 *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else
  {
    a1 = *(_QWORD *)a1;
    v5 = v4;
  }
  v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v5);
  v7 = v6;
  v8 = qword_1EDBBDA30;
  if (qword_1EDBBDA30)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)qword_1EDBBDA30);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= qword_1EDBBDA30)
        v11 = v6 % qword_1EDBBDA30;
    }
    else
    {
      v11 = (qword_1EDBBDA30 - 1) & v6;
    }
    v12 = *(void ***)(MailWildCardAllowedFields(void)::_mailWildCardAllowedFields + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(void **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v7)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)i + 16, v3))
            return i;
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= v8)
              v14 %= v8;
          }
          else
          {
            v14 &= v8 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  else
  {
    v11 = 0;
  }
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v7;
  *((_OWORD *)i + 1) = *(_OWORD *)a2;
  *((_QWORD *)i + 4) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *((_DWORD *)i + 10) = 0;
  v15 = (float)(unint64_t)(qword_1EDBBDA40 + 1);
  if (!v8 || (float)(*(float *)&dword_1EDBBDA48 * (float)v8) < v15)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v15 / *(float *)&dword_1EDBBDA48);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>((uint64_t)&MailWildCardAllowedFields(void)::_mailWildCardAllowedFields, v19);
    v8 = qword_1EDBBDA30;
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= qword_1EDBBDA30)
        v11 = v7 % qword_1EDBBDA30;
      else
        v11 = v7;
    }
    else
    {
      v11 = (qword_1EDBBDA30 - 1) & v7;
    }
  }
  v20 = MailWildCardAllowedFields(void)::_mailWildCardAllowedFields;
  v21 = *(_QWORD **)(MailWildCardAllowedFields(void)::_mailWildCardAllowedFields + 8 * v11);
  if (v21)
  {
    *(_QWORD *)i = *v21;
LABEL_41:
    *v21 = i;
    goto LABEL_42;
  }
  *(_QWORD *)i = qword_1EDBBDA38;
  qword_1EDBBDA38 = (uint64_t)i;
  *(_QWORD *)(v20 + 8 * v11) = &qword_1EDBBDA38;
  if (*(_QWORD *)i)
  {
    v22 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(MailWildCardAllowedFields(void)::_mailWildCardAllowedFields + 8 * v22);
    goto LABEL_41;
  }
LABEL_42:
  ++qword_1EDBBDA40;
  return i;
}

void sub_1B837CC08(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,int>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_freeTextCandidate>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    std::default_delete<_freeTextCandidate>::operator()[abi:nn180100](v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::default_delete<_freeTextCandidate>::operator()[abi:nn180100](uint64_t a1)
{
  std::__tree<long long>::destroy(*(_QWORD **)(a1 + 48));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1BCCB06A4);
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(std::string **a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  std::allocator<std::string> *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  int64x2_t v17;
  std::string *v18;
  std::string *v19;
  std::__split_buffer<std::string> v21;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v6 = (std::allocator<std::string> *)(a1 + 2);
  if (0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3) > v3)
    v3 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v21.__end_cap_.__value_ = v6;
  if (v7)
  {
    v8 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v7);
    v10 = v9;
  }
  else
  {
    v8 = 0;
    v10 = 0;
  }
  v11 = (std::string *)&v8[24 * v2];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v14 = *a1;
  v13 = (unint64_t)a1[1];
  if ((std::string *)v13 == *a1)
  {
    v17 = vdupq_n_s64(v13);
    v15 = v11;
  }
  else
  {
    v15 = v11;
    do
    {
      v16 = *(_OWORD *)(v13 - 24);
      v15[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 - 8);
      *(_OWORD *)&v15[-1].__r_.__value_.__l.__data_ = v16;
      --v15;
      *(_QWORD *)(v13 - 16) = 0;
      *(_QWORD *)(v13 - 8) = 0;
      *(_QWORD *)(v13 - 24) = 0;
      v13 -= 24;
    }
    while ((std::string *)v13 != v14);
    v17 = *(int64x2_t *)a1;
  }
  v18 = v11 + 1;
  *a1 = v15;
  a1[1] = v18;
  *(int64x2_t *)&v21.__begin_ = v17;
  v19 = a1[2];
  a1[2] = (std::string *)&v8[24 * v10];
  v21.__end_cap_.__value_ = v19;
  v21.__first_ = (std::__split_buffer<std::string>::pointer)v17.i64[0];
  std::__split_buffer<std::string>::~__split_buffer(&v21);
  return v18;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(24 * a1);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v4;

  begin = this->__begin_;
  end = this->__end_;
  if (end != begin)
  {
    do
    {
      v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        v4 = this->__end_;
      }
      end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_)
    operator delete(this->__first_);
}

void _peopleMatchInfo::_peopleMatchInfo(_peopleMatchInfo *this, unint64_t a2)
{
  char *v4;
  char **v5;
  char **v6;
  char *v7;
  _BYTE *v8;
  _BYTE *v9;

  v4 = (char *)this + 24;
  v5 = (char **)((char *)this + 80);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  v6 = (char **)((char *)this + 56);
  MEMORY[0x1BCCB03B0]();
  MEMORY[0x1BCCB03B0](v4, "");
  *((_QWORD *)this + 6) = 0;
  std::vector<CFRange>::resize(v6, a2);
  std::vector<CFRange>::resize(v5, a2);
  v7 = (char *)*((_QWORD *)this + 8);
  if (*v6 != v7)
    bzero(*v6, ((v7 - *v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
  v8 = (_BYTE *)*((_QWORD *)this + 10);
  v9 = (_BYTE *)*((_QWORD *)this + 11);
  if (v8 != v9)
    bzero(v8, ((v9 - v8 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_QWORD *)((char *)this + 117) = 0;
}

void std::vector<CFRange>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v18 = &v3[16 * a2];
    goto LABEL_17;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 4)
  {
    bzero(a1[1], 16 * v6);
    v18 = &v4[16 * v6];
LABEL_17:
    a1[1] = v18;
    return;
  }
  if (a2 >> 60)
    abort();
  v8 = v7 - v3;
  v9 = v8 >> 3;
  if (v8 >> 3 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CFRange>>(v10);
  v12 = &v11[16 * v5];
  v14 = &v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[16 * v6];
  v17 = *a1;
  v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      *((_OWORD *)v12 - 1) = *((_OWORD *)v16 - 1);
      v12 -= 16;
      v16 -= 16;
    }
    while (v16 != v17);
    v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
    operator delete(v16);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<CFRange>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  char *v16;
  unint64_t v17;
  std::string *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      v16 = (char *)*v15;
      if (*v15)
      {
        do
        {
          v17 = *((_QWORD *)v16 + 1);
          if (v17 == v10)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v16 + 16, (unsigned __int8 *)a2))
            {
              return v16;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v17 >= v11)
                v17 %= v11;
            }
            else
            {
              v17 &= v11 - 1;
            }
            if (v17 != v14)
              break;
          }
          v16 = *(char **)v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v16 = (char *)operator new(0x30uLL);
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v10;
  v18 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v16 + 10) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *(_QWORD *)v16 = *v26;
LABEL_47:
    *v26 = v16;
    goto LABEL_48;
  }
  *(_QWORD *)v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (*(_QWORD *)v16)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v27 >= v11)
        v27 %= v11;
    }
    else
    {
      v27 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_47;
  }
LABEL_48:
  ++*(_QWORD *)(a1 + 24);
  return v16;
}

uint64_t *std::__tree<long long>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_topicCandidate>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_peopleCandidate>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    std::default_delete<_peopleCandidate>::operator()[abi:nn180100](v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::default_delete<_peopleCandidate>::operator()[abi:nn180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::~__hash_table(a1 + 88);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  JUMPOUT(0x1BCCB06A4);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_photosCandidate>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    MEMORY[0x1BCCB06A4](v2, 0x1000C403E1C8BA9);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_topicCandidate>>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    std::default_delete<_topicCandidate>::operator()[abi:nn180100](v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::default_delete<_topicCandidate>::operator()[abi:nn180100](uint64_t a1)
{
  std::__tree<std::string>::destroy(*(char **)(a1 + 176));
  std::__tree<long long>::destroy(*(_QWORD **)(a1 + 152));
  JUMPOUT(0x1BCCB06A4);
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(_QWORD *)a1);
    std::__tree<std::string>::destroy(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t unigramsMatch(uint64_t a1, uint64_t a2, const char *a3, int a4, int a5, _QWORD *a6, const __CFDictionary *a7, const __CFLocale *a8, std::string::value_type **a9)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  const __CFLocale *v13;
  const __CFDictionary *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v20;
  const __CFAllocator *v21;
  _QWORD *v22;
  _QWORD *v23;
  size_t v24;
  __CFString *Mutable;
  const __CFArray *Value;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  uint64_t v31;
  char *v32;
  __CFString *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  std::string *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  std::string::value_type *v46;
  __int128 v47;
  unint64_t v48;
  std::string::value_type *v49;
  std::string::value_type *v50;
  __int128 v51;
  int64x2_t v52;
  std::string *v53;
  uint64_t v55;
  const __CFAllocator *v56;
  uint64_t v57;
  const __CFLocale *v58;
  __CFString *v59;
  int v60;
  std::allocator<std::string> *v61;
  _QWORD *v62;
  const __CFDictionary *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  int v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::__split_buffer<std::string> v73;
  uint64_t v74;

  v68 = a5;
  v66 = a3;
  v67 = a2;
  v65 = 0;
  v74 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 32);
  v10 = (_QWORD *)*a6;
  v11 = a6[1] - *a6;
  v71 = 0;
  v72 = 0;
  if (v9 == v11 >> 4)
  {
    if (v9)
      v12 = a4 == 0;
    else
      v12 = 1;
    if (v12)
    {
      if (v9)
      {
        v13 = a8;
        v14 = a7;
        v15 = a6;
        v65 = 0;
        v16 = 0;
        v17 = *(_QWORD *)(a1 + 40);
        if (a7)
          v18 = a9 == 0;
        else
          v18 = 1;
        v20 = !v18 && a8 != 0;
        v60 = v20;
        v21 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v61 = (std::allocator<std::string> *)(a9 + 2);
        v62 = a6;
        v63 = a7;
        v64 = v9;
        v58 = a8;
        v57 = v17;
        v56 = v21;
        do
        {
          v69 = 0uLL;
          v70 = 0;
          std::string::basic_string[abi:nn180100]<0>(&v69, *(char **)(v17 + 8 * v16));
          if (*(_QWORD *)(v17 + 8 * v16) && icu_search_context_create())
          {
            v22 = (_QWORD *)(*v15 + 16 * v16);
            *v22 = 0;
            v22[1] = 0;
            if (icu_search_match())
            {
              v23 = (_QWORD *)(*v15 + 16 * v16);
              *v23 = v72;
              v23[1] = v71;
              ++v65;
              goto LABEL_36;
            }
            if (v60)
            {
              v24 = strlen(*(const char **)(v17 + 8 * v16));
              Mutable = CFStringCreateMutable(v21, v24);
              CFStringAppendCString(Mutable, *(const char **)(v17 + 8 * v16), 0x8000100u);
              CFStringLowercase(Mutable, v13);
              CFStringNormalize(Mutable, kCFStringNormalizationFormD);
              if (!CFDictionaryContainsKey(v14, Mutable))
              {
                v33 = Mutable;
                if (Mutable)
                  goto LABEL_35;
                goto LABEL_36;
              }
              v59 = Mutable;
              Value = (const __CFArray *)CFDictionaryGetValue(v14, Mutable);
              for (i = 0; ; ++i)
              {
                if (i >= CFArrayGetCount(Value))
                {
                  v13 = v58;
                  v15 = v62;
                  v14 = v63;
                  goto LABEL_34;
                }
                ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Value, i);
                Length = CFStringGetLength(ValueAtIndex);
                MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
                MEMORY[0x1E0C80A78](MaximumSizeForEncoding);
                v32 = (char *)&v55 - v31;
                bzero((char *)&v55 - v31, MaximumSizeForEncoding + 1);
                CFStringGetCString(ValueAtIndex, v32, MaximumSizeForEncoding + 1, 0x8000100u);
                v32[MaximumSizeForEncoding] = 0;
                if (icu_search_context_create())
                {
                  if ((icu_search_match() & 1) != 0)
                  {
                    v15 = v62;
                    v34 = (_QWORD *)(*v62 + 16 * v16);
                    *v34 = v72;
                    v34[1] = v71;
                    ++v65;
                    MEMORY[0x1BCCB03B0](&v69, v32);
                    icu_ctx_release();
                    v13 = v58;
                    v14 = v63;
LABEL_34:
                    v9 = v64;
                    v17 = v57;
                    v21 = v56;
                    v33 = v59;
                    if (v59)
LABEL_35:
                      CFRelease(v33);
                    break;
                  }
                  icu_ctx_release();
                }
              }
            }
LABEL_36:
            icu_ctx_release();
          }
          if (a9)
          {
            v36 = (unint64_t)a9[1];
            v35 = (unint64_t)a9[2];
            if (v36 >= v35)
            {
              v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (_QWORD)*a9) >> 3);
              v39 = v38 + 1;
              if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
                abort();
              v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (_QWORD)*a9) >> 3);
              if (2 * v40 > v39)
                v39 = 2 * v40;
              if (v40 >= 0x555555555555555)
                v41 = 0xAAAAAAAAAAAAAAALL;
              else
                v41 = v39;
              v73.__end_cap_.__value_ = v61;
              if (v41)
              {
                v42 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v41);
                v44 = v43;
              }
              else
              {
                v42 = 0;
                v44 = 0;
              }
              v46 = &v42->__r_.__value_.__s.__data_[24 * v38];
              if (SHIBYTE(v70) < 0)
              {
                std::string::__init_copy_ctor_external(v42 + v38, (const std::string::value_type *)v69, *((std::string::size_type *)&v69 + 1));
              }
              else
              {
                v47 = v69;
                *((_QWORD *)v46 + 2) = v70;
                *(_OWORD *)v46 = v47;
              }
              v49 = *a9;
              v48 = (unint64_t)a9[1];
              if ((std::string::value_type *)v48 == *a9)
              {
                v52 = vdupq_n_s64(v48);
                v50 = &v42->__r_.__value_.__s.__data_[24 * v38];
              }
              else
              {
                v50 = &v42->__r_.__value_.__s.__data_[24 * v38];
                do
                {
                  v51 = *(_OWORD *)(v48 - 24);
                  *((_QWORD *)v50 - 1) = *(_QWORD *)(v48 - 8);
                  *(_OWORD *)(v50 - 24) = v51;
                  v50 -= 24;
                  *(_QWORD *)(v48 - 16) = 0;
                  *(_QWORD *)(v48 - 8) = 0;
                  *(_QWORD *)(v48 - 24) = 0;
                  v48 -= 24;
                }
                while ((std::string::value_type *)v48 != v49);
                v52 = *(int64x2_t *)a9;
              }
              v45 = v46 + 24;
              *a9 = v50;
              a9[1] = v46 + 24;
              *(int64x2_t *)&v73.__begin_ = v52;
              v53 = (std::string *)a9[2];
              a9[2] = (std::string::value_type *)&v42[v44];
              v73.__end_cap_.__value_ = v53;
              v73.__first_ = (std::__split_buffer<std::string>::pointer)v52.i64[0];
              std::__split_buffer<std::string>::~__split_buffer(&v73);
              v15 = v62;
              v14 = v63;
            }
            else
            {
              if (SHIBYTE(v70) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)a9[1], (const std::string::value_type *)v69, *((std::string::size_type *)&v69 + 1));
              }
              else
              {
                v37 = v69;
                *(_QWORD *)(v36 + 16) = v70;
                *(_OWORD *)v36 = v37;
              }
              v45 = (char *)(v36 + 24);
            }
            a9[1] = v45;
            v9 = v64;
          }
          if (SHIBYTE(v70) < 0)
            operator delete((void *)v69);
          ++v16;
        }
        while (v16 != v9);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      *v10 = 0;
      v10[1] = strlen(v66);
      return 1;
    }
  }
  return v65;
}

uint64_t tokenIsStopWord(uint64_t a1, uint64_t a2)
{
  int TokenType;
  const __CFString *v4;
  uint64_t result;
  const __CFString *v6;

  SILocalizationLoad();
  SILanguagesIsCJK();
  TokenType = SILocalizationGetTokenType();
  v4 = (const __CFString *)MEMORY[0x1BCCAF7B0](a2);
  if (TokenType == 5)
    return 1;
  v6 = v4;
  if (CFStringHasPrefix(v4, CFSTR("fr")) || (result = CFStringHasPrefix(v6, CFSTR("es")), (_DWORD)result))
  {
    CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("en"));
    SILocalizationLoad();
    return SILocalizationGetTokenType() == 5;
  }
  return result;
}

BOOL tokenIsValid(char *src, int32_t srcLength, uint64_t a3, uint64_t a4, int a5, int a6)
{
  _BOOL8 result;
  uint64_t v13;
  char v14;
  UErrorCode pErrorCode[2];
  UChar dest[8];
  __int128 v17;
  _DWORD v18[7];
  uint64_t v19;

  result = 0;
  v19 = *MEMORY[0x1E0C80C00];
  if (src && (srcLength - 30) >= 0xFFFFFFE3)
  {
    if (_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::onceToken[0] != -1)
      dispatch_once(_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::onceToken, &__block_literal_global_193);
    v17 = 0u;
    memset(v18, 0, sizeof(v18));
    *(_OWORD *)dest = 0u;
    *(_QWORD *)pErrorCode = 0;
    u_strFromUTF8(dest, 30, (int32_t *)&pErrorCode[1], src, srcLength, pErrorCode);
    if (pErrorCode[1] && pErrorCode[0] != U_BUFFER_OVERFLOW_ERROR)
    {
      if (pErrorCode[1] >= U_ILLEGAL_ARGUMENT_ERROR)
      {
        v13 = 0;
        v14 = 1;
        while (!CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::controlSet, dest[v13])&& !CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::newlineSet, dest[v13])&& !CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::whitespaceSet, dest[v13])&& !CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::otherUnwantedSet, dest[v13])&& (!a6|| !CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::decimalDigitSet, dest[v13]))&& (v13 && v13 != pErrorCode[1] - 1|| !CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::punctuationSet, dest[v13])
              && !CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::symbolSet, dest[v13])))
        {
          if (!CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::punctuationSet, dest[v13]))v14 &= CFCharacterSetIsCharacterMember((CFCharacterSetRef)_tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::symbolSet, dest[v13]) != 0;
          if (++v13 >= (int)pErrorCode[1])
          {
            if ((v14 & 1) != 0)
              return 0;
            return !a5 || (tokenIsStopWord(*(_QWORD *)(a3 + 16), a4) & 1) == 0;
          }
        }
      }
      return 0;
    }
    return !a5 || (tokenIsStopWord(*(_QWORD *)(a3 + 16), a4) & 1) == 0;
  }
  return result;
}

CFCharacterSetRef ___ZL39_tokenIsAllPunctuationOrHasUnwantedCharPhib_block_invoke()
{
  CFCharacterSetRef result;

  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::punctuationSet = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::symbolSet = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetSymbol);
  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::decimalDigitSet = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::controlSet = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetControl);
  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::newlineSet = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetNewline);
  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::whitespaceSet = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  result = CFCharacterSetCreateWithCharactersInString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR(""));
  _tokenIsAllPunctuationOrHasUnwantedChar(unsigned char *,int,BOOL)::otherUnwantedSet = (uint64_t)result;
  return result;
}

void postProcessCJKSuggestions(std::string *a1, uint64_t a2)
{
  _BYTE *v2;
  unsigned int v3;
  std::string::size_type v6;
  char v7;
  BOOL v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  char v15;
  int isUWhiteSpace;
  BOOL v17;
  char v18;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v21;
  std::string __p;
  char v23;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a2 + 23) >= 0)
    v2 = (_BYTE *)a2;
  else
    v2 = *(_BYTE **)a2;
  v3 = *v2;
  if (*v2)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      if ((v3 & 0x80) != 0)
      {
        v9 = (unint64_t)v3 >> 4;
        v10 = ~(_BYTE)v9;
        v11 = utf8_byte_length(unsigned char)::utf8_len_table[v9];
        v12 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v11] & v3;
        if ((v10 & 0xC) != 0)
        {
          v3 &= utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v11];
        }
        else
        {
          if (v11 <= 2)
            v11 = 2;
          else
            v11 = v11;
          v13 = v11 - 1;
          v14 = v2 + 1;
          do
          {
            v15 = *v14++;
            v3 = v15 & 0x3F | (v12 << 6);
            v12 = v3;
            --v13;
          }
          while (v13);
        }
      }
      isUWhiteSpace = u_isUWhiteSpace(v3);
      v17 = isUWhiteSpace != 0;
      if (!isUWhiteSpace)
      {
        if (v3 >> 8 < 0x11
          || (v18 = 1, v3 - 65376 >= 0x50) && (v3 & 0xFFFFFF00) != 0x1100 && (v3 - 11904) >> 7 >= 0x197)
        {
          if (!(v7 & 1 | !v8))
            std::string::push_back(a1, 32);
          v18 = 0;
        }
        std::string::basic_string(&__p, (const std::string *)a2, v6, utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v2 >> 4], (std::allocator<char> *)&v23);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::string::append(a1, (const std::string::value_type *)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v7 = v18;
      }
      v21 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v2 >> 4];
      v6 += v21;
      v2 += v21;
      v3 = *v2;
      v8 = v17;
    }
    while (*v2);
  }
}

uint64_t _SIPommesSuggestionsProcessRawText(uint64_t result, os_unfair_lock_s *a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, const char *a7, int32_t a8, double a9, uint64_t a10, char *__s2, char a12, char a13, uint64_t *a14, char a15, CFArrayRef theArray)
{
  uint64_t v20;
  _BOOL4 v21;
  unsigned __int8 v22;
  uint64_t v23;
  const char *v24;
  size_t v25;
  size_t v26;
  _BOOL4 v27;
  size_t v28;
  size_t v29;
  char v30;
  int v31;
  unsigned int v32;
  const __CFAllocator *v33;
  CFIndex Count;
  CFIndex v35;
  void *ValueAtIndex;
  CFMutableStringRef MutableCopy;
  CFIndex v38;
  __CFArray *Mutable;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t i;
  void *v44;
  const __CFString *v45;
  const __CFString *v46;
  __CFString *v47;
  const __CFString *v48;
  const __CFLocale *v49;
  CFStringRef v50;
  uint64_t UTF8StringDecomposed;
  _BYTE *v52;
  char *v53;
  uint64_t v54;
  _BYTE *v55;
  __CFDictionary *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  const std::string::value_type *v66;
  std::string::size_type v67;
  uint64_t v68;
  _BOOL4 v69;
  char *v71;
  uint64_t v72;
  void *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  BOOL v78;
  int v79;
  uint64_t v80;
  char v81;
  size_t v82;
  size_t v83;
  BOOL v84;
  const char **v85;
  const char *v86;
  const char **v87;
  const char *v88;
  const char *v89;
  size_t v90;
  size_t v91;
  unint64_t j;
  int v93;
  _BOOL4 v94;
  size_t v95;
  unint64_t k;
  int v97;
  uint64_t v98;
  unint64_t v99;
  BOOL v100;
  BOOL v101;
  size_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  std::string *v106;
  unint64_t v107;
  _BOOL4 v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  std::string *v112;
  size_t v113;
  size_t v114;
  BOOL v115;
  unsigned int v116;
  BOOL v117;
  int v118;
  unsigned __int8 *v119;
  int v120;
  BOOL v121;
  std::string::size_type v122;
  uint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t m;
  int v127;
  _BOOL4 v128;
  unsigned __int8 *v129;
  int32_t v130;
  uint64_t v131;
  uint64_t v132;
  const char **v133;
  size_t v134;
  BOOL v135;
  BOOL v136;
  os_unfair_lock_s *v137;
  uint64_t *v138;
  char v139;
  unsigned __int8 *v140;
  char v141;
  char *v142;
  int v143;
  CFAllocatorRef n;
  char v145;
  int v146;
  int v147;
  uint64_t v148;
  char *v149;
  int v150;
  char *v151;
  BOOL v152;
  uint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  float v158;
  void *v159;
  double v160;
  float v161;
  float v162;
  std::string::size_type size;
  _OWORD *v164;
  std::string *v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  std::string::value_type *v175;
  unsigned int v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  std::string *p_buf;
  std::string::size_type v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint8x8_t v185;
  unint64_t v186;
  unint64_t v187;
  unsigned __int8 **v188;
  unsigned __int8 *v189;
  unint64_t v190;
  uint64_t v191;
  std::string *v192;
  int v193;
  __int128 v194;
  std::string *v195;
  std::string::size_type v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint8x8_t v200;
  unint64_t v201;
  unint64_t v202;
  unsigned __int8 **v203;
  unsigned __int8 *ii;
  unint64_t v205;
  _QWORD *v206;
  std::string *v207;
  float v208;
  float v209;
  _BOOL8 v210;
  unint64_t v211;
  unint64_t v212;
  size_t v213;
  uint64_t v214;
  _QWORD *v215;
  unint64_t v216;
  char v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  uint64_t v221;
  void **v222;
  char *v223;
  unint64_t v224;
  std::string *v225;
  float v226;
  float v227;
  _BOOL8 v229;
  unint64_t v230;
  unint64_t v231;
  size_t v232;
  uint64_t v233;
  _QWORD *v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  uint64_t **v238;
  uint64_t **v239;
  uint64_t v240;
  uint64_t *v241;
  char v242;
  BOOL v244;
  int v245;
  int v246;
  NSObject *v247;
  void *v249;
  CFStringRef cf;
  uint64_t v251;
  const __CFLocale *v252;
  char *__s;
  size_t v254;
  _BOOL4 v255;
  uint64_t v256;
  uint64_t v257;
  std::string::size_type v258;
  const std::string::value_type *v259;
  std::string *v260;
  __CFDictionary *theDict;
  size_t v262;
  int v263;
  _BOOL4 v264;
  uint64_t *__sz;
  _QWORD *v266;
  unint64_t v267;
  uint64_t v269;
  unsigned __int8 *v270;
  unint64_t v271;
  _BOOL4 v272;
  int v274;
  uint64_t *v275;
  unint64_t v276;
  int v277;
  uint64_t v278;
  unsigned int v279;
  uint64_t v280;
  int32x2_t v281;
  int v282;
  int v283;
  uint64_t v284;
  char v286;
  unint64_t v288;
  unint64_t v289;
  const __CFAllocator *allocator;
  CFAllocatorRef allocatora;
  CFIndex v292;
  CFLocaleRef v293;
  std::string v294;
  std::string v295;
  std::string v296;
  std::string v297;
  _QWORD v298[2];
  char v299;
  void *v300;
  uint64_t v301;
  uint64_t v302;
  std::string v303;
  std::string v304;
  std::string __p;
  _BYTE v306[3];
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  std::string::value_type *v310;
  __int128 *v311;
  uint64_t v312;
  _QWORD v313[3];
  std::string v314;
  int v315;
  std::string v316;
  std::string v317;
  std::string buf;
  _BYTE __dst[32];
  __int128 v320;
  __int128 v321;
  _BYTE v322[1024];
  uint64_t v323;

  v323 = *MEMORY[0x1E0C80C00];
  if (!a4 || !*(_QWORD *)(a4 + 32) || !*(_QWORD *)a4)
    return result;
  v20 = result;
  v289 = *(_QWORD *)(a4 + 32);
  if (__s2)
  {
    v21 = strncmp("ja", __s2, 2uLL) == 0;
    v272 = strncmp("zh", __s2, 2uLL) == 0;
  }
  else
  {
    v21 = 0;
    v272 = 0;
  }
  v22 = a12;
  v315 = 0;
  v23 = operator new();
  bzero((void *)(v23 + 16), 0xF280uLL);
  *(_QWORD *)v23 = *(_QWORD *)(a4 + 88);
  *(_QWORD *)(v23 + 8) = __s2;
  v280 = v23;
  *(_BYTE *)(v23 + 62088) = v21;
  v24 = *(const char **)(a4 + 16);
  memset(&v314, 0, sizeof(v314));
  v25 = strlen(v24);
  v284 = v20;
  if (!v25)
  {
    v251 = 0;
    v32 = 4;
    goto LABEL_25;
  }
  v26 = v25;
  v27 = v21;
  v28 = 0;
  v29 = v25 - 1;
  v30 = 1;
  do
  {
    while (1)
    {
      v31 = v24[v28];
      if (v28 >= v29 || v31 != 42)
        break;
      std::string::append(&v314, "\\*");
      v30 = 0;
      v78 = v29 == v28++;
      if (v78)
        goto LABEL_19;
    }
    ++v28;
    std::string::push_back(&v314, v31);
  }
  while (v26 != v28);
  if ((v30 & 1) != 0)
  {
    v251 = 0;
    v32 = 4;
    v21 = v27;
    goto LABEL_24;
  }
LABEL_19:
  if ((SHIBYTE(v314.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v21 = v27;
LABEL_22:
    v251 = icu_search_context_create();
    goto LABEL_23;
  }
  v21 = v27;
  if (v314.__r_.__value_.__r.__words[0])
    goto LABEL_22;
  v251 = 0;
LABEL_23:
  v32 = 12;
LABEL_24:
  v22 = a12;
LABEL_25:
  pommesSuggestionsTokenizeString(a3, a7, a8, (unsigned __int16 *)&v315 + 1, (unsigned __int16 *)&v315, v280, 0, 1, v22, (uint64_t)pommesSuggestionsGetTokenCallback, (uint64_t)pommesSuggestionsGetSentenceCallback, v32);
  if (!HIWORD(v315))
    goto LABEL_520;
  v264 = v21;
  v33 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    theDict = CFDictionaryCreateMutable(v33, Count, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v292 = CFArrayGetCount(theArray);
    if (v292 >= 1)
    {
      v35 = 0;
      allocator = v33;
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, v35);
        MutableCopy = CFStringCreateMutableCopy(v33, 0, (CFStringRef)objc_msgSend(ValueAtIndex, "originalToken"));
        CFStringNormalize(MutableCopy, kCFStringNormalizationFormD);
        if (MutableCopy)
        {
          if (CFStringGetLength(MutableCopy) && objc_msgSend((id)objc_msgSend(ValueAtIndex, "variations"), "count"))
          {
            v38 = objc_msgSend((id)objc_msgSend(ValueAtIndex, "variations"), "count");
            Mutable = CFArrayCreateMutable(allocator, v38, MEMORY[0x1E0C9B378]);
            v320 = 0u;
            v321 = 0u;
            memset(__dst, 0, sizeof(__dst));
            v40 = (void *)objc_msgSend(ValueAtIndex, "variations");
            v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", __dst, v322, 16);
            if (v41)
            {
              v42 = **(_QWORD **)&__dst[16];
              do
              {
                for (i = 0; i != v41; ++i)
                {
                  if (**(_QWORD **)&__dst[16] != v42)
                    objc_enumerationMutation(v40);
                  v44 = *(void **)(*(_QWORD *)&__dst[8] + 8 * i);
                  v45 = (const __CFString *)objc_msgSend(v44, "variation");
                  if (objc_msgSend(v44, "type") == 2 && CFStringGetLength(v45))
                    CFArrayAppendValue(Mutable, v45);
                }
                v41 = objc_msgSend(v40, "countByEnumeratingWithState:objects:count:", __dst, v322, 16);
              }
              while (v41);
            }
            v20 = v284;
            if (CFArrayGetCount(Mutable) >= 1)
            {
              CFDictionarySetValue(theDict, MutableCopy, Mutable);
              v46 = CFStringCreateWithFormat(allocator, 0, CFSTR("%@*"), MutableCopy);
              v47 = CFStringCreateMutableCopy(allocator, 0, v46);
              CFStringNormalize(v47, kCFStringNormalizationFormD);
              CFDictionarySetValue(theDict, v47, Mutable);
              if (v47)
                CFRelease(v47);
              if (v46)
                CFRelease(v46);
            }
            if (Mutable)
              CFRelease(Mutable);
          }
          CFRelease(MutableCopy);
          v33 = allocator;
        }
        ++v35;
      }
      while (v35 != v292);
    }
  }
  else
  {
    theDict = 0;
  }
  v48 = CFStringCreateWithCString(0, __s2, 0x8000100u);
  v293 = CFLocaleCreate(v33, v48);
  v49 = (const __CFLocale *)CFRetain(v293);
  if (!v49)
    v49 = CFLocaleCreate(v33, CFSTR("en"));
  v252 = v49;
  v50 = CFStringCreateWithCString(0, *(const char **)a4, 0x8000100u);
  bzero(v322, 0x400uLL);
  cf = v50;
  UTF8StringDecomposed = CreateUTF8StringDecomposed();
  if (v289 >> 60)
    abort();
  v52 = (_BYTE *)UTF8StringDecomposed;
  v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CFRange>>(v289);
  v313[0] = v53;
  v313[2] = &v53[16 * v54];
  bzero(v53, 16 * v289);
  if (v52 == v322)
    v55 = 0;
  else
    v55 = v52;
  v249 = v55;
  v313[1] = &v53[16 * v289];
  v311 = 0;
  v310 = 0;
  v312 = 0;
  v56 = theDict;
  v57 = unigramsMatch(a4, (uint64_t)__s2, (const char *)(v280 + 42066), 0, 0, v313, theDict, v252, &v310);
  v58 = v289;
  v59 = v289 - 1;
  if (!*(_QWORD *)&v53[16 * v289 - 8])
  {
    *(_QWORD *)__dst = &v310;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)__dst);
    goto LABEL_511;
  }
  v60 = v57;
  if (theDict)
  {
    v308 = 0;
    v307 = 0;
    v309 = 0;
    std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(&v307, (__int128 *)v310, v311, 0xAAAAAAAAAAAAAAABLL * (((char *)v311 - v310) >> 3));
    memset(__dst, 0, 24);
    v61 = v307;
    if (v308 == v307)
    {
      v69 = 1;
    }
    else
    {
      v62 = 0;
      v63 = 0;
      do
      {
        v64 = v61 + v62;
        v65 = *(char *)(v64 + 23);
        if (v65 >= 0)
          v66 = (const std::string::value_type *)v64;
        else
          v66 = *(const std::string::value_type **)v64;
        if (v65 >= 0)
          v67 = *(unsigned __int8 *)(v64 + 23);
        else
          v67 = *(_QWORD *)(v64 + 8);
        std::string::append((std::string *)__dst, v66, v67);
        if (v63 == -1 - 0x5555555555555555 * ((v308 - v307) >> 3))
          break;
        std::string::append((std::string *)__dst, " ");
        ++v63;
        v61 = v307;
        v62 += 24;
      }
      while (v63 < 0xAAAAAAAAAAAAAAABLL * ((v308 - v307) >> 3));
      v68 = __dst[23];
      if (__dst[23] < 0)
        v68 = *(_QWORD *)&__dst[8];
      v69 = v68 == 0;
      v20 = v284;
    }
    if (v69 && dword_1EF19FCC4 >= 5)
    {
      v246 = *__error();
      v247 = _SILogForLogForCategory(14);
      if (os_log_type_enabled(v247, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1B8270000, v247, OS_LOG_TYPE_DEFAULT, "Empty rewritten query", (uint8_t *)&buf, 2u);
      }
      *__error() = v246;
      v20 = v284;
    }
    v71 = (char *)operator new[]();
    __s = v71;
    if ((__dst[23] & 0x80000000) != 0)
    {
      v73 = *(void **)__dst;
      v74 = strcpy(v71, *(const char **)__dst);
      v74[*(_QWORD *)&__dst[8]] = 0;
      operator delete(v73);
    }
    else
    {
      v72 = __dst[23];
      strcpy(v71, __dst)[v72] = 0;
    }
    *(_QWORD *)__dst = &v307;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)__dst);
    v58 = v289;
  }
  else
  {
    __s = 0;
  }
  v75 = *a14;
  if (a14[1] == *a14)
  {
    v254 = 0;
    v81 = 0;
    LOBYTE(v79) = 0;
    v82 = 0;
    v77 = v58 > 1;
    goto LABEL_120;
  }
  if (!*(_BYTE *)(v75 + 123))
  {
    v81 = 0;
    v254 = 0;
    v77 = v58 > 1;
    if (v58 >= 2 && (a13 & 1) == 0)
    {
      v81 = 0;
      v83 = 0;
      if (*(_BYTE *)(v75 + 122))
        v84 = 0;
      else
        v84 = theDict == 0;
      v79 = v84;
      goto LABEL_115;
    }
    LOBYTE(v79) = 0;
    v82 = 0;
LABEL_120:
    v80 = a4;
    goto LABEL_121;
  }
  v76 = *(_QWORD *)(v75 + 128);
  v77 = v58 > 1;
  if (v58 < 2 || (a13 & 1) != 0)
  {
    v81 = 0;
    v80 = a4;
    if (!v76)
    {
      v254 = 0;
      v82 = 0;
      LOBYTE(v79) = 0;
      goto LABEL_121;
    }
    v79 = 0;
  }
  else
  {
    if (*(_BYTE *)(v75 + 122))
      v78 = 0;
    else
      v78 = theDict == 0;
    v79 = v78;
    if (!v76)
    {
      v81 = 0;
      v83 = 0;
      goto LABEL_115;
    }
    v80 = a4;
  }
  v83 = 0;
  v85 = *(const char ***)(v80 + 40);
  do
  {
    v86 = *v85++;
    v83 += strlen(v86) + 1;
    --v76;
  }
  while (v76);
  v81 = 1;
LABEL_115:
  v82 = 0;
  v254 = v83;
  if (!v79)
    goto LABEL_120;
  v80 = a4;
  if (v289 != 1)
  {
    v82 = 0;
    v87 = *(const char ***)(a4 + 40);
    do
    {
      v88 = *v87++;
      v82 += strlen(v88) + 1;
      --v59;
    }
    while (v59);
    v77 = 1;
    goto LABEL_120;
  }
LABEL_121:
  v262 = v82;
  v89 = *(const char **)v80;
  v90 = strlen(*(const char **)v80);
  v91 = v90;
  if (v90)
  {
    for (j = 0; j < v90; ++j)
    {
      v93 = v89[j];
      if (j < v90 - 1 && v93 == 92)
      {
        v94 = 0;
        ++j;
      }
      else
      {
        v94 = v93 == 42;
      }
    }
  }
  else
  {
    v94 = 0;
  }
  if (theDict)
  {
    v95 = strlen(__s);
    v91 = v95;
    if (v95)
    {
      for (k = 0; k < v95; ++k)
      {
        v97 = __s[k];
        if (k < v95 - 1 && v97 == 92)
        {
          v94 = 0;
          ++k;
        }
        else
        {
          v94 = v97 == 42;
        }
      }
    }
    else
    {
      v94 = 0;
    }
  }
  if ((_os_feature_enabled_impl() & v264 & 1) != 0)
  {
    v98 = a5[2];
    v99 = v98 + *a5 + a5[1] + a5[3];
    v100 = v99 > 2;
    v271 = v99;
    v101 = v99 != 0;
    if (v98)
      v100 = v101;
  }
  else
  {
    v271 = v91 - v94;
    v100 = v271 > 2;
  }
  v102 = v262;
  v103 = v60 == v289 && (v77 || v100);
  v306[0] = v103;
  v306[1] = v81;
  v306[2] = v79;
  if (v52)
    v104 = icu_search_context_create();
  else
    v104 = 0;
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:nn180100]<0>(&__p, "");
  v105 = v251;
  if (v251)
  {
    if ((v314.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v106 = &v314;
    else
      v106 = (std::string *)v314.__r_.__value_.__r.__words[0];
  }
  else
  {
    v106 = *(std::string **)(a4 + 16);
    v105 = a6;
  }
  v107 = 0;
  v108 = theDict != 0;
  if (theDict)
    v109 = 0;
  else
    v109 = v105;
  v256 = v109;
  v110 = (double)v60 * a9;
  v275 = (uint64_t *)(v20 + 24);
  v278 = v20 + 104;
  if (!__s)
    v108 = 0;
  v255 = v108;
  v266 = (_QWORD *)(v20 + 40);
  v260 = v106;
  v269 = v104;
  do
  {
    if (!v306[v107])
      goto LABEL_503;
    if (v107)
    {
      if (v107 == 1)
      {
        if (v106)
        {
          v111 = icu_search_context_create();
          v112 = v106;
          v113 = v254;
LABEL_170:
          std::string::basic_string[abi:nn180100](__dst, v112, v113);
LABEL_174:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = *(std::string *)__dst;
          goto LABEL_177;
        }
        v114 = v254;
      }
      else
      {
        if (v106)
        {
          v111 = icu_search_context_create();
          v112 = v106;
          v113 = v102;
          goto LABEL_170;
        }
        v114 = v102;
      }
      std::string::basic_string[abi:nn180100](__dst, 0, v114);
      v111 = 0;
      goto LABEL_174;
    }
    v111 = v256;
    if (v255)
      v111 = icu_search_context_create();
LABEL_177:
    memset(&v304, 0, sizeof(v304));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_)
      {
        std::string::__init_copy_ctor_external(&v303, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
LABEL_182:
        v115 = stringToLowerCase((uint64_t *)&v303, &v304, 0) == 0;
        if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v303.__r_.__value_.__l.__data_);
        goto LABEL_185;
      }
    }
    else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      v303 = __p;
      goto LABEL_182;
    }
    v115 = 0;
LABEL_185:
    if (v115 || !v111)
      goto LABEL_500;
    v116 = 0;
    v276 = v107 - 1;
    v288 = v107;
    if (v107)
      v117 = 1;
    else
      v117 = v104 == 0;
    v118 = !v117;
    v274 = v118;
    v119 = (unsigned __int8 *)(v280 + 42066);
    while (1)
    {
      *(_QWORD *)__dst = 0;
      buf.__r_.__value_.__r.__words[0] = 0;
      v120 = icu_search_match();
      v121 = 0;
      if (!v120)
        goto LABEL_485;
      v122 = buf.__r_.__value_.__r.__words[0];
      if (!buf.__r_.__value_.__r.__words[0])
        goto LABEL_485;
      v279 = v116;
      v123 = *(_QWORD *)__dst;
      v277 = v120;
      if (v274)
      {
        *(_QWORD *)__dst = 0;
        buf.__r_.__value_.__r.__words[0] = 0;
        v283 = icu_search_match() ^ 1;
      }
      else
      {
        v283 = 0;
      }
      v124 = &v119[v123 - 1 + v122];
      v125 = 0;
      if (v119)
      {
        for (m = (uint64_t)&v119[v123 - 1 + v122]; ; ++m)
        {
          v127 = *(unsigned __int8 *)m;
          if ((v127 | 0x20) == 0x20)
            break;
          v125 = -1;
        }
        v121 = v127 == 0;
        v125 += m;
      }
      else
      {
        v121 = 1;
      }
      v128 = 0;
      allocatora = (CFAllocatorRef)v125;
      if (v122 == 1 && v124 == (unsigned __int8 *)v125)
        v128 = *v124 != 0;
      if (v276 > 1)
        break;
      v129 = (unsigned __int8 *)v125;
      v130 = v125 - (v123 + (_DWORD)v119) + 1;
      if (tokenIsValid((char *)&v119[v123], v130, v284, (uint64_t)v293, 1, 0))
      {
        v131 = *(_QWORD *)(a4 + 32);
        v132 = v131 - 1;
        if (v131 == 1)
          break;
        v133 = *(const char ***)(a4 + 40);
        while (1)
        {
          v134 = strlen(*v133);
          v135 = !*v133 || v119 == 0;
          v136 = !v135 && v134 == v130;
          if (v136 && !strncasecmp((const char *)&v119[v123], *v133, v130))
            break;
          ++v133;
          if (!--v132)
            goto LABEL_222;
        }
        v119 = (unsigned __int8 *)allocatora + v128;
      }
      else
      {
        if (allocatora)
          v242 = v121;
        else
          v242 = 1;
        v102 = v262;
        v107 = v288;
        if ((v242 & 1) != 0 || (*v129 | 0x20) == 0x20 || !v129[1])
          goto LABEL_499;
        v121 = v129[2] == 0;
        v119 = v129 + 2;
      }
      v116 = v279;
LABEL_484:
      v120 = v277;
LABEL_485:
      if (v120)
      {
        if (!v121 && v116++ < 2 * *(_DWORD *)(v280 + 20))
          continue;
      }
      goto LABEL_491;
    }
LABEL_222:
    v137 = a2;
    v138 = (uint64_t *)v284;
    if (v121)
      goto LABEL_223;
    v139 = 0;
    v286 = 0;
    v140 = &v119[v123];
    v141 = 1;
    v142 = (char *)allocatora;
    v270 = &v119[v123];
    while (2)
    {
      if ((v141 & 1) != 0)
      {
        if (allocatora)
        {
          v143 = *(unsigned __int8 *)allocatora;
          if ((v143 | 0x20) != 0x20)
          {
            for (n = allocatora;
                  (v143 | 0x20) != 0x20 && n >= (CFAllocatorRef)v119;
                  n = (CFAllocatorRef)((char *)n - 1))
            {
              v145 = *((_BYTE *)n - 1);
              LOBYTE(v143) = v145;
            }
          }
        }
        v152 = 0;
        if ((tokenIsStopWord(v138[2], (uint64_t)v293) & 1) != 0)
        {
          v286 = 1;
          goto LABEL_420;
        }
      }
      else if (v142[1])
      {
        v147 = v142[2];
        v142 += 2;
        v146 = v147;
        if (v147)
        {
          v148 = 0;
          v149 = v142;
          while ((v146 | 0x20) != 0x20)
          {
            v150 = *++v149;
            v146 = v150;
            v148 = -1;
          }
          v151 = &v149[v148];
          if (!tokenIsValid(v142, (_DWORD)v149 + v148 - (_DWORD)v142 + 1, (uint64_t)v138, (uint64_t)v293, 0, 1))
            break;
          v152 = v146 == 0;
          if ((tokenIsStopWord(v138[2], (uint64_t)v293) & 1) != 0)
            break;
          v142 = v151;
        }
        else
        {
          v152 = 1;
        }
      }
      else
      {
        v152 = 1;
        ++v142;
      }
      if (v142 - (char *)v140 < 0)
        goto LABEL_420;
      v301 = 0;
      v300 = 0;
      v302 = 0;
      std::string::basic_string[abi:nn180100](&v300, v140, v142 - (char *)v140 + 1);
      if ((SHIBYTE(v302) & 0x80000000) == 0)
      {
        v153 = HIBYTE(v302);
        v154 = v288;
        if (!*(&v299 + HIBYTE(v302)))
          goto LABEL_254;
        goto LABEL_257;
      }
      v155 = v300;
      v156 = v301;
      v154 = v288;
      if (!*((char *)v300 + v301 - 1))
      {
LABEL_253:
        v157 = v156 - 1;
        v301 = v157;
        while (2)
        {
          v155[v157] = 0;
          if ((SHIBYTE(v302) & 0x80000000) == 0)
          {
            v153 = HIBYTE(v302);
LABEL_257:
            if (*(&v299 + v153) == 32)
            {
LABEL_254:
              v157 = v153 - 1;
              HIBYTE(v302) = (v153 - 1) & 0x7F;
              v155 = &v300;
              continue;
            }
            goto LABEL_260;
          }
          break;
        }
      }
      v155 = v300;
      v156 = v301;
      if (*((char *)v300 + v301 - 1) == 32)
        goto LABEL_253;
LABEL_260:
      if (a15)
      {
        std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(v298, (const void **)&v304.__r_.__value_.__l.__data_, (const void **)&v300);
        v158 = v110 * MATCH_TYPE_WEIGHTS[v154];
        _AccumulatePhotosCandidates(v278, v137, (uint64_t)v298, 9, v158);
        if (v299 < 0)
        {
          v159 = (void *)v298[0];
          goto LABEL_417;
        }
        goto LABEL_418;
      }
      v160 = v110 * MATCH_TYPE_WEIGHTS[v154];
      *(float *)&v160 = v160;
      if ((v286 & 1) != 0)
      {
        v161 = *(float *)&v160 * 0.1;
        *(float *)&v160 = v161;
      }
      if (v283)
      {
        v162 = *(float *)&v160 * 0.15;
        *(float *)&v160 = v162;
      }
      v281 = *(int32x2_t *)&v160;
      memset(&v297, 0, sizeof(v297));
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v297, (const void **)&v304.__r_.__value_.__l.__data_, (const void **)&v300);
      memset(&v296, 0, sizeof(v296));
      std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v296, (const void **)&v304.__r_.__value_.__l.__data_, (const void **)&v300);
      if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v296.__r_.__value_.__r.__words[2]);
      else
        size = v296.__r_.__value_.__l.__size_;
      if (_os_feature_enabled_impl())
      {
        if (v272)
        {
          postProcessCJKSuggestions((std::string *)__dst, (uint64_t)&v297);
          if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v296.__r_.__value_.__l.__data_);
          v296 = *(std::string *)__dst;
          size = (__dst[23] & 0x80000000) != 0 ? v296.__r_.__value_.__l.__size_ : __dst[23];
        }
        else if (v264)
        {
          postProcessCJKSuggestions((std::string *)__dst, (uint64_t)&v297);
          if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v296.__r_.__value_.__l.__data_);
          v296 = *(std::string *)__dst;
          if (*MEMORY[0x1E0C85AD8] <= 0x1FuLL)
            ++sTotal;
          v164 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x20uLL, 0x31F9A007uLL);
          if (!v164)
            _log_fault_for_malloc_failure();
          v165 = &v296;
          if ((v296.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v165 = (std::string *)v296.__r_.__value_.__r.__words[0];
          *v164 = 0u;
          v164[1] = 0u;
          v166 = v165->__r_.__value_.__s.__data_[0];
          if (v165->__r_.__value_.__s.__data_[0])
          {
            v167 = 0;
            v168 = 0;
            v169 = 0;
            v170 = 0;
            do
            {
              if ((v166 & 0x80) == 0)
                goto LABEL_298;
              v171 = (unint64_t)v166 >> 4;
              if ((~(_BYTE)v171 & 0xC) != 0)
                goto LABEL_298;
              v172 = utf8_byte_length(unsigned char)::utf8_len_table[v171];
              v173 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v172] & v166;
              v172 = v172 <= 2 ? 2 : v172;
              v174 = v172 - 1;
              v175 = &v165->__r_.__value_.__s.__data_[1];
              do
              {
                v176 = v173;
                v177 = *v175++;
                v173 = v177 & 0x3F | (v173 << 6);
                --v174;
              }
              while (v174);
              if (v173 >> 8 >= 0x11
                && ((v176 & 0x3FFFFFC) == 0x44 || ((v176 << 6) - 11904) >> 7 < 0x197 || v173 - 65376 <= 0x4F))
              {
                if (v173 - 12448 > 0x5F)
                {
                  if (v173 - 12352 > 0x5F)
                    *((_QWORD *)v164 + 2) = ++v170;
                  else
                    *((_QWORD *)v164 + 1) = ++v169;
                }
                else
                {
                  *(_QWORD *)v164 = ++v168;
                }
              }
              else
              {
LABEL_298:
                *((_QWORD *)v164 + 3) = ++v167;
              }
              v165 = (std::string *)((char *)v165
                                   + utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)v165->__r_.__value_.__s.__data_[0] >> 4]);
              v166 = v165->__r_.__value_.__s.__data_[0];
            }
            while (v165->__r_.__value_.__s.__data_[0]);
            size = v169 + v168 + v170 + v167;
          }
          else
          {
            size = 0;
          }
          free(v164);
        }
        if (size < v271)
          goto LABEL_413;
      }
      if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v295, v296.__r_.__value_.__l.__data_, v296.__r_.__value_.__l.__size_);
      else
        v295 = v296;
      if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v294, v297.__r_.__value_.__l.__data_, v297.__r_.__value_.__l.__size_);
      else
        v294 = v297;
      memset(&buf, 0, sizeof(buf));
      if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v295.__r_.__value_.__l.__size_ || (unint64_t)v138[6] > 0x1F4)
          goto LABEL_407;
        std::string::__init_copy_ctor_external(&v317, v295.__r_.__value_.__l.__data_, v295.__r_.__value_.__l.__size_);
      }
      else
      {
        if (!*((_BYTE *)&v295.__r_.__value_.__s + 23) || (unint64_t)v138[6] > 0x1F4)
          goto LABEL_407;
        v317 = v295;
      }
      v178 = stringToLowerCase((uint64_t *)&v317, &buf, 1);
      v179 = v178;
      if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v317.__r_.__value_.__l.__data_);
        if (!v179)
          goto LABEL_407;
      }
      else if (!v178)
      {
        goto LABEL_407;
      }
      os_unfair_lock_lock(v137);
      v263 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
      v258 = buf.__r_.__value_.__l.__size_;
      v259 = (const std::string::value_type *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v181 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      else
        v181 = buf.__r_.__value_.__l.__size_;
      __sz = (uint64_t *)p_buf;
      v182 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)p_buf, v181);
      v183 = v138[4];
      if (!v183)
        goto LABEL_350;
      v184 = v182;
      v185 = (uint8x8_t)vcnt_s8((int8x8_t)v183);
      v185.i16[0] = vaddlv_u8(v185);
      v186 = v185.u32[0];
      if (v185.u32[0] > 1uLL)
      {
        v187 = v182;
        if (v182 >= v183)
          v187 = v182 % v183;
      }
      else
      {
        v187 = (v183 - 1) & v182;
      }
      v257 = *v275;
      v188 = *(unsigned __int8 ***)(*v275 + 8 * v187);
      if (!v188 || (v189 = *v188) == 0)
      {
LABEL_350:
        v191 = operator new();
        if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v316, v294.__r_.__value_.__l.__data_, v294.__r_.__value_.__l.__size_);
        else
          v316 = v294;
        *(_DWORD *)v191 = v281.i32[0];
        *(_DWORD *)(v191 + 4) = v281.i32[0];
        *(_QWORD *)(v191 + 8) = v288;
        v192 = (std::string *)(v191 + 16);
        v193 = SHIBYTE(v316.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v316.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v192, v316.__r_.__value_.__l.__data_, v316.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v192->__r_.__value_.__l.__data_ = *(_OWORD *)&v316.__r_.__value_.__l.__data_;
          *(_QWORD *)(v191 + 32) = *((_QWORD *)&v316.__r_.__value_.__l + 2);
        }
        *(_QWORD *)(v191 + 48) = 0;
        *(_QWORD *)(v191 + 40) = v191 + 48;
        *(_QWORD *)(v191 + 56) = 0;
        std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>((uint64_t **)(v191 + 40), (uint64_t *)(v191 + 48), a10, a10);
        if (v193 < 0)
          operator delete(v316.__r_.__value_.__l.__data_);
        v194 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        v282 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v195 = &buf;
        else
          v195 = (std::string *)buf.__r_.__value_.__r.__words[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v196 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        else
          v196 = buf.__r_.__value_.__l.__size_;
        v197 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)v195, v196);
        v198 = v197;
        v199 = *(_QWORD *)(v284 + 32);
        if (v199)
        {
          v200 = (uint8x8_t)vcnt_s8((int8x8_t)v199);
          v200.i16[0] = vaddlv_u8(v200);
          v201 = v200.u32[0];
          if (v200.u32[0] > 1uLL)
          {
            v202 = v197;
            if (v197 >= v199)
              v202 = v197 % v199;
          }
          else
          {
            v202 = (v199 - 1) & v197;
          }
          v203 = *(unsigned __int8 ***)(*v275 + 8 * v202);
          if (v203)
          {
            for (ii = *v203; ii; ii = *(unsigned __int8 **)ii)
            {
              v205 = *((_QWORD *)ii + 1);
              if (v205 == v198)
              {
                if (std::equal_to<std::string>::operator()[abi:nn180100](ii + 16, (unsigned __int8 *)&buf))
                {
                  std::default_delete<_freeTextCandidate>::operator()[abi:nn180100](v191);
                  v137 = a2;
                  v138 = (uint64_t *)v284;
                  goto LABEL_406;
                }
              }
              else
              {
                if (v201 > 1)
                {
                  if (v205 >= v199)
                    v205 %= v199;
                }
                else
                {
                  v205 &= v199 - 1;
                }
                if (v205 != v202)
                  break;
              }
            }
          }
        }
        else
        {
          v202 = 0;
        }
        *(_QWORD *)&__dst[16] = 0;
        v206 = operator new(0x30uLL);
        *(_QWORD *)__dst = v206;
        *(_QWORD *)&__dst[8] = v266;
        *v206 = 0;
        v206[1] = v198;
        v207 = (std::string *)(v206 + 2);
        if (v282 < 0)
        {
          std::string::__init_copy_ctor_external(v207, (const std::string::value_type *)v194, *((std::string::size_type *)&v194 + 1));
        }
        else
        {
          *(_OWORD *)&v207->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          v206[4] = *((_QWORD *)&buf.__r_.__value_.__l + 2);
        }
        v206[5] = v191;
        __dst[16] = 1;
        v208 = (float)(unint64_t)(*(_QWORD *)(v284 + 48) + 1);
        v209 = *(float *)(v284 + 56);
        v137 = a2;
        if (!v199 || (float)(v209 * (float)v199) < v208)
        {
          v210 = (v199 & (v199 - 1)) != 0;
          if (v199 < 3)
            v210 = 1;
          v211 = v210 | (2 * v199);
          v212 = vcvtps_u32_f32(v208 / v209);
          if (v211 <= v212)
            v213 = v212;
          else
            v213 = v211;
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>((uint64_t)v275, v213);
          v199 = *(_QWORD *)(v284 + 32);
          if ((v199 & (v199 - 1)) != 0)
          {
            if (v198 >= v199)
              v202 = v198 % v199;
            else
              v202 = v198;
          }
          else
          {
            v202 = (v199 - 1) & v198;
          }
        }
        v214 = *v275;
        v215 = *(_QWORD **)(*v275 + 8 * v202);
        if (v215)
        {
          *v206 = *v215;
          v138 = (uint64_t *)v284;
          goto LABEL_404;
        }
        *v206 = *v266;
        *v266 = v206;
        *(_QWORD *)(v214 + 8 * v202) = v266;
        v138 = (uint64_t *)v284;
        if (*v206)
        {
          v216 = *(_QWORD *)(*v206 + 8);
          if ((v199 & (v199 - 1)) != 0)
          {
            if (v216 >= v199)
              v216 %= v199;
          }
          else
          {
            v216 &= v199 - 1;
          }
          v215 = (_QWORD *)(*v275 + 8 * v216);
LABEL_404:
          *v215 = v206;
        }
        *(_QWORD *)__dst = 0;
        ++v138[6];
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_freeTextCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_freeTextCandidate>>,void *>>>>::reset[abi:nn180100]((uint64_t)__dst);
        goto LABEL_406;
      }
      v267 = v183 - 1;
      while (2)
      {
        v190 = *((_QWORD *)v189 + 1);
        if (v190 != v184)
        {
          if (v186 > 1)
          {
            if (v190 >= v183)
              v190 %= v183;
          }
          else
          {
            v190 &= v267;
          }
          if (v190 != v187)
            goto LABEL_350;
LABEL_349:
          v189 = *(unsigned __int8 **)v189;
          if (!v189)
            goto LABEL_350;
          continue;
        }
        break;
      }
      if (!std::equal_to<std::string>::operator()[abi:nn180100](v189 + 16, (unsigned __int8 *)&buf))
        goto LABEL_349;
      v218 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](__sz, v181);
      v219 = v218;
      if (v186 > 1)
      {
        v220 = v218;
        v221 = v257;
        if (v218 >= v183)
          v220 = v218 % v183;
      }
      else
      {
        v220 = v267 & v218;
        v221 = v257;
      }
      v222 = *(void ***)(v221 + 8 * v220);
      if (v222)
      {
        v223 = (char *)*v222;
        if (*v222)
        {
          do
          {
            v224 = *((_QWORD *)v223 + 1);
            if (v224 == v219)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v223 + 16, (unsigned __int8 *)&buf))
              {
                v138 = (uint64_t *)v284;
                v137 = a2;
                goto LABEL_465;
              }
            }
            else
            {
              if (v186 > 1)
              {
                if (v224 >= v183)
                  v224 %= v183;
              }
              else
              {
                v224 &= v267;
              }
              if (v224 != v220)
                break;
            }
            v223 = *(char **)v223;
          }
          while (v223);
        }
      }
      *(_QWORD *)&__dst[16] = 0;
      v223 = (char *)operator new(0x30uLL);
      *(_QWORD *)__dst = v223;
      *(_QWORD *)&__dst[8] = v266;
      *(_QWORD *)v223 = 0;
      *((_QWORD *)v223 + 1) = v219;
      v225 = (std::string *)(v223 + 16);
      if (v263 < 0)
      {
        std::string::__init_copy_ctor_external(v225, v259, v258);
      }
      else
      {
        *(_OWORD *)&v225->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *((_QWORD *)v223 + 4) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
      }
      *((_QWORD *)v223 + 5) = 0;
      v226 = (float)(unint64_t)(*(_QWORD *)(v284 + 48) + 1);
      __dst[16] = 1;
      v227 = *(float *)(v284 + 56);
      if ((float)(v227 * (float)v183) < v226)
      {
        v229 = v183 < 3 || v186 > 1;
        v230 = v229 | (2 * v183);
        v231 = vcvtps_u32_f32(v226 / v227);
        if (v230 <= v231)
          v232 = v231;
        else
          v232 = v230;
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>((uint64_t)v275, v232);
        v183 = *(_QWORD *)(v284 + 32);
        if ((v183 & (v183 - 1)) != 0)
        {
          if (v219 >= v183)
            v220 = v219 % v183;
          else
            v220 = v219;
        }
        else
        {
          v220 = (v183 - 1) & v219;
        }
      }
      v233 = *v275;
      v234 = *(_QWORD **)(*v275 + 8 * v220);
      if (v234)
      {
        *(_QWORD *)v223 = *v234;
        v138 = (uint64_t *)v284;
        v137 = a2;
        goto LABEL_463;
      }
      *(_QWORD *)v223 = *v266;
      *v266 = v223;
      *(_QWORD *)(v233 + 8 * v220) = v266;
      v138 = (uint64_t *)v284;
      v137 = a2;
      if (*(_QWORD *)v223)
      {
        v235 = *(_QWORD *)(*(_QWORD *)v223 + 8);
        if ((v183 & (v183 - 1)) != 0)
        {
          if (v235 >= v183)
            v235 %= v183;
        }
        else
        {
          v235 &= v183 - 1;
        }
        v234 = (_QWORD *)(*v275 + 8 * v235);
LABEL_463:
        *v234 = v223;
      }
      *(_QWORD *)__dst = 0;
      ++v138[6];
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_freeTextCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_freeTextCandidate>>,void *>>>>::reset[abi:nn180100]((uint64_t)__dst);
LABEL_465:
      v236 = *((_QWORD *)v223 + 5);
      *(float32x2_t *)v236 = vadd_f32((float32x2_t)vdup_lane_s32(v281, 0), *(float32x2_t *)v236);
      v238 = (uint64_t **)(v236 + 48);
      v237 = *(uint64_t **)(v236 + 48);
      if (v237)
      {
        while (1)
        {
          while (1)
          {
            v239 = (uint64_t **)v237;
            v240 = v237[4];
            if (v240 <= a10)
              break;
            v237 = *v239;
            v238 = v239;
            if (!*v239)
              goto LABEL_473;
          }
          if (v240 >= a10)
            break;
          v237 = v239[1];
          if (!v237)
          {
            v238 = v239 + 1;
            goto LABEL_473;
          }
        }
      }
      else
      {
        v239 = (uint64_t **)(v236 + 48);
LABEL_473:
        v241 = (uint64_t *)operator new(0x28uLL);
        v241[4] = a10;
        std::__tree<long long>::__insert_node_at((uint64_t **)(v236 + 40), (uint64_t)v239, v238, v241);
      }
      if (*(_QWORD *)(v236 + 8) > v288)
        *(_QWORD *)(v236 + 8) = v288;
LABEL_406:
      os_unfair_lock_unlock(v137);
      v140 = v270;
LABEL_407:
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (SHIBYTE(v294.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v294.__r_.__value_.__l.__data_);
      if (SHIBYTE(v295.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v295.__r_.__value_.__l.__data_);
LABEL_413:
      if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v296.__r_.__value_.__l.__data_);
      if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
      {
        v159 = (void *)v297.__r_.__value_.__r.__words[0];
LABEL_417:
        operator delete(v159);
      }
LABEL_418:
      if (SHIBYTE(v302) < 0)
        operator delete(v300);
LABEL_420:
      v141 = 0;
      v217 = v139 | v152;
      v139 = 1;
      if ((v217 & 1) == 0)
        continue;
      break;
    }
LABEL_223:
    v104 = v269;
    v116 = v279;
    if (allocatora && (*(unsigned __int8 *)allocatora | 0x20) != 0x20 && *((_BYTE *)allocatora + 1))
    {
      v119 = (unsigned __int8 *)allocatora + 2;
      v121 = *((_BYTE *)allocatora + 2) == 0;
      goto LABEL_484;
    }
LABEL_491:
    v102 = v262;
    v107 = v288;
    if (theDict)
      v244 = v288 == 0;
    else
      v244 = 0;
    v245 = v244;
    if (v276 < 2 || v245)
LABEL_499:
      icu_ctx_release();
LABEL_500:
    if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v304.__r_.__value_.__l.__data_);
    v106 = v260;
LABEL_503:
    ++v107;
  }
  while (v107 != 3);
  if (v251)
    icu_ctx_release();
  v56 = theDict;
  if (v104)
    icu_ctx_release();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  free(__s);
  v53 = (char *)v313[0];
  *(_QWORD *)__dst = &v310;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)__dst);
  if (v53)
LABEL_511:
    operator delete(v53);
  free(v249);
  if (cf)
    CFRelease(cf);
  if (v252)
    CFRelease(v252);
  if (v293)
    CFRelease(v293);
  if (v56)
    CFRelease(v56);
LABEL_520:
  if (SHIBYTE(v314.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v314.__r_.__value_.__l.__data_);
  return MEMORY[0x1BCCB06A4](v280, 0x1070C40BE69B347);
}

void sub_1B8380230(_Unwind_Exception *exception_object)
{
  const void *v1;
  const void *v2;

  if (v1)
    CFRelease(v1);
  if (v2)
    CFRelease(v2);
  _Unwind_Resume(exception_object);
}

char *std::vector<CFRange>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CFRange>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v7;
  __int128 v8;

  if (a4)
  {
    std::vector<std::string>::__vallocate[abi:nn180100](a1, a4);
    v7 = (std::string *)a1[1];
    while (a2 != a3)
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v8 = *a2;
        v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      a2 = (__int128 *)((char *)a2 + 24);
      ++v7;
    }
    a1[1] = v7;
  }
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

uint64_t stringToLowerCase(uint64_t *a1, std::string *a2, int a3)
{
  uint64_t v6;
  UErrorCode v7;
  int v8;
  UChar *v9;
  UChar *v10;
  _BYTE *v11;
  UChar *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  UChar *v18;
  UChar *v19;
  unsigned int v20;
  unsigned int v21;
  _BYTE *v22;
  int v23;
  unsigned int v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  std::string *v28;
  std::string::size_type size;
  std::string::size_type v31;
  __int128 __dst;
  std::string::size_type v34;
  UErrorCode pErrorCode[2];
  _BYTE __src[1024];
  UChar v37[512];
  UChar dest[512];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1BCCB03B0](a2, "");
  if (*((char *)a1 + 23) < 0)
  {
    if ((unint64_t)(a1[1] - 513) >= 0xFFFFFFFFFFFFFE00)
    {
      bzero(dest, 0x400uLL);
      bzero(v37, 0x400uLL);
      *(_QWORD *)pErrorCode = 0;
      a1 = (uint64_t *)*a1;
      goto LABEL_7;
    }
    return 0;
  }
  if (!*((_BYTE *)a1 + 23))
    return 0;
  bzero(dest, 0x400uLL);
  bzero(v37, 0x400uLL);
  *(_QWORD *)pErrorCode = 0;
LABEL_7:
  u_strFromUTF8(dest, 512, (int32_t *)&pErrorCode[1], (const char *)a1, -1, pErrorCode);
  v6 = 0;
  if (pErrorCode[1])
  {
    if (pErrorCode[0] != U_BUFFER_OVERFLOW_ERROR)
    {
      pErrorCode[0] = U_ZERO_ERROR;
      v7 = u_strToLower(v37, 512, dest, pErrorCode[1], 0, pErrorCode);
      v6 = 0;
      pErrorCode[1] = v7;
      if (v7)
      {
        if (pErrorCode[0] != U_BUFFER_OVERFLOW_ERROR)
        {
          v8 = v7;
          if (a3)
            normalizePunctuations((__int16 *)v37, v7);
          bzero(__src, 0x400uLL);
          v9 = &v37[v8];
          if ((unint64_t)(4 * v8) > 0x400)
          {
            if (v8 >= 1)
            {
              v17 = 0;
              v18 = v37;
              v11 = __src;
              v19 = v37;
              while (1)
              {
                v21 = *v19++;
                v20 = v21;
                if (v21 > 0x7F)
                {
                  if (v20 > 0x7FF)
                  {
                    if ((v20 & 0xF800) == 0xD800)
                    {
                      if ((v20 & 0x400) == 0 && v19 < v9)
                      {
                        v23 = *v19;
                        if ((v23 & 0xFC00) == 0xDC00)
                        {
                          if (v17 > 1020)
                            goto LABEL_47;
                          v19 = v18 + 2;
                          v24 = v23 + (v20 << 10) - 56613888;
                          *v11 = (v24 >> 18) | 0xF0;
                          v25 = &__src[v17];
                          v25[1] = (v24 >> 12) & 0x3F | 0x80;
                          v25[2] = (v24 >> 6) & 0x3F | 0x80;
                          v17 += 4;
                          v25[3] = v23 & 0x3F | 0x80;
                        }
                      }
                    }
                    else
                    {
                      if (v17 > 1021)
                      {
LABEL_47:
                        v11 = &__src[v17];
                        goto LABEL_48;
                      }
                      *v11 = (v20 >> 12) | 0xE0;
                      v26 = &__src[v17];
                      v26[1] = (v20 >> 6) & 0x3F | 0x80;
                      v17 += 3;
                      v26[2] = v20 & 0x3F | 0x80;
                    }
                  }
                  else
                  {
                    if (v17 > 1022)
                      goto LABEL_47;
                    v22 = &__src[v17];
                    *v11 = (v20 >> 6) | 0xC0;
                    v17 += 2;
                    v22[1] = v20 & 0x3F | 0x80;
                  }
                }
                else
                {
                  if (v17 > 1023)
                    goto LABEL_47;
                  ++v17;
                  *v11 = v20;
                }
                v11 = &__src[v17];
                v18 = v19;
                if (v19 >= v9)
                  goto LABEL_48;
              }
            }
          }
          else if (v8 >= 1)
          {
            v10 = v37;
            v11 = __src;
            v12 = v37;
            do
            {
              v14 = *v12++;
              v13 = v14;
              if (v14 > 0x7F)
              {
                if (v13 > 0x7FF)
                {
                  if ((v13 & 0xF800) == 0xD800)
                  {
                    if ((v13 & 0x400) == 0 && v12 < v9)
                    {
                      v15 = *v12;
                      if ((v15 & 0xFC00) == 0xDC00)
                      {
                        v12 = v10 + 2;
                        v16 = v15 + (v13 << 10) - 56613888;
                        *v11 = (v16 >> 18) | 0xF0;
                        v11[1] = (v16 >> 12) & 0x3F | 0x80;
                        v11[2] = (v16 >> 6) & 0x3F | 0x80;
                        v11[3] = v15 & 0x3F | 0x80;
                        v11 += 4;
                      }
                    }
                  }
                  else
                  {
                    *v11 = (v13 >> 12) | 0xE0;
                    v11[1] = (v13 >> 6) & 0x3F | 0x80;
                    v11[2] = v13 & 0x3F | 0x80;
                    v11 += 3;
                  }
                }
                else
                {
                  *v11 = (v13 >> 6) | 0xC0;
                  v11[1] = v13 & 0x3F | 0x80;
                  v11 += 2;
                }
              }
              else
              {
                *v11++ = v13;
              }
              v10 = v12;
            }
            while (v12 < v9);
            goto LABEL_48;
          }
          v11 = __src;
LABEL_48:
          v6 = v11 - __src;
          std::string::basic_string[abi:nn180100](&__dst, __src, v11 - __src);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
            operator delete(a2->__r_.__value_.__l.__data_);
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = __dst;
          a2->__r_.__value_.__r.__words[2] = v34;
          if (a3)
          {
            v27 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
            if (v27 >= 0)
              v28 = a2;
            else
              v28 = (std::string *)a2->__r_.__value_.__r.__words[0];
            if (v27 >= 0)
              size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
            else
              size = a2->__r_.__value_.__l.__size_;
            while (size)
            {
              if (!memchr(" \n\r\t", v28->__r_.__value_.__s.__data_[--size], 4uLL))
              {
                v31 = size + 1;
                goto LABEL_61;
              }
            }
            v31 = 0;
LABEL_61:
            std::string::erase(a2, v31, 0xFFFFFFFFFFFFFFFFLL);
          }
        }
      }
    }
  }
  return v6;
}

uint64_t std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, const void **a2, const void **a3)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (*((char *)a3 + 23) >= 0)
    v6 = *((unsigned __int8 *)a3 + 23);
  else
    v6 = (size_t)a3[1];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  result = std::string::basic_string[abi:nn180100]((uint64_t)a1, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a3 + 23) >= 0)
      v11 = a3;
    else
      v11 = *a3;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void _AccumulatePhotosCandidates(uint64_t a1, os_unfair_lock_t lock, uint64_t a3, int a4, float a5)
{
  char v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned __int8 **v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 **v33;
  unsigned __int8 *i;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::string *v38;
  float v39;
  float v40;
  _BOOL8 v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  os_unfair_lock_s *v51;
  void **v52;
  char *v53;
  unint64_t v54;
  _QWORD *v55;
  std::string *v56;
  float v57;
  float v58;
  _BOOL8 v60;
  unint64_t v61;
  unint64_t v62;
  size_t v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  float v69;
  std::string::size_type v70;
  const std::string::value_type *v71;
  int v72;
  unint64_t v73;
  std::string::size_type __sza;
  char *v77;
  uint64_t v78;
  uint64_t v79;

  os_unfair_lock_lock(lock);
  v8 = *(_BYTE *)(a3 + 23);
  v72 = v8;
  v70 = *(_QWORD *)(a3 + 8);
  v71 = *(const std::string::value_type **)a3;
  if (v8 >= 0)
    v9 = (uint64_t *)a3;
  else
    v9 = *(uint64_t **)a3;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a3 + 23);
  else
    v10 = *(_QWORD *)(a3 + 8);
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v9, v10);
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12)
    goto LABEL_24;
  v13 = v11;
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = v11;
    if (v11 >= v12)
      v16 = v11 % v12;
  }
  else
  {
    v16 = (v12 - 1) & v11;
  }
  v17 = *(_QWORD *)a1;
  v18 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v16);
  if (!v18 || (v19 = *v18) == 0)
  {
LABEL_24:
    v21 = operator new();
    *(float *)v21 = a5;
    *(_DWORD *)(v21 + 4) = 1;
    *(_DWORD *)(v21 + 8) = a4;
    v22 = *(char *)(a3 + 23);
    v23 = *(const std::string::value_type **)a3;
    v24 = *(_QWORD *)(a3 + 8);
    if (v22 >= 0)
      v25 = (uint64_t *)a3;
    else
      v25 = *(uint64_t **)a3;
    if (v22 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    v27 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v25, v26);
    v28 = v27;
    v29 = *(_QWORD *)(a1 + 8);
    __sza = v24;
    if (v29)
    {
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.u32[0];
      if (v30.u32[0] > 1uLL)
      {
        v32 = v27;
        if (v27 >= v29)
          v32 = v27 % v29;
      }
      else
      {
        v32 = (v29 - 1) & v27;
      }
      v33 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v32);
      if (v33)
      {
        for (i = *v33; i; i = *(unsigned __int8 **)i)
        {
          v35 = *((_QWORD *)i + 1);
          if (v35 == v28)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a3))
            {
              MEMORY[0x1BCCB06A4](v21, 0x1000C403E1C8BA9);
              v51 = lock;
              goto LABEL_72;
            }
          }
          else
          {
            if (v31 > 1)
            {
              if (v35 >= v29)
                v35 %= v29;
            }
            else
            {
              v35 &= v29 - 1;
            }
            if (v35 != v32)
              break;
          }
        }
      }
    }
    else
    {
      v32 = 0;
    }
    v36 = (_QWORD *)(a1 + 16);
    v79 = 0;
    v37 = operator new(0x30uLL);
    v77 = (char *)v37;
    v78 = a1 + 16;
    *v37 = 0;
    v37[1] = v28;
    v38 = (std::string *)(v37 + 2);
    if (v22 < 0)
    {
      std::string::__init_copy_ctor_external(v38, v23, __sza);
    }
    else
    {
      *(_OWORD *)&v38->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v37[4] = *(_QWORD *)(a3 + 16);
    }
    v37[5] = v21;
    LOBYTE(v79) = 1;
    v39 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v40 = *(float *)(a1 + 32);
    if (!v29 || (float)(v40 * (float)v29) < v39)
    {
      v41 = 1;
      if (v29 >= 3)
        v41 = (v29 & (v29 - 1)) != 0;
      v42 = v41 | (2 * v29);
      v43 = vcvtps_u32_f32(v39 / v40);
      if (v42 <= v43)
        v44 = v43;
      else
        v44 = v42;
      std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v44);
      v29 = *(_QWORD *)(a1 + 8);
      if ((v29 & (v29 - 1)) != 0)
      {
        if (v28 >= v29)
          v32 = v28 % v29;
        else
          v32 = v28;
      }
      else
      {
        v32 = (v29 - 1) & v28;
      }
    }
    v45 = *(_QWORD *)a1;
    v46 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v32);
    if (v46)
    {
      *v37 = *v46;
      v51 = lock;
    }
    else
    {
      *v37 = *v36;
      *v36 = v37;
      *(_QWORD *)(v45 + 8 * v32) = v36;
      v51 = lock;
      if (!*v37)
      {
LABEL_71:
        v77 = 0;
        ++*(_QWORD *)(a1 + 24);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_photosCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_photosCandidate>>,void *>>>>::reset[abi:nn180100]((uint64_t)&v77);
        goto LABEL_72;
      }
      v47 = *(_QWORD *)(*v37 + 8);
      if ((v29 & (v29 - 1)) != 0)
      {
        if (v47 >= v29)
          v47 %= v29;
      }
      else
      {
        v47 &= v29 - 1;
      }
      v46 = (_QWORD *)(*(_QWORD *)a1 + 8 * v47);
    }
    *v46 = v37;
    goto LABEL_71;
  }
  v73 = v12 - 1;
  while (1)
  {
    v20 = *((_QWORD *)v19 + 1);
    if (v20 == v13)
      break;
    if (v15 > 1)
    {
      if (v20 >= v12)
        v20 %= v12;
    }
    else
    {
      v20 &= v73;
    }
    if (v20 != v16)
      goto LABEL_24;
LABEL_23:
    v19 = *(unsigned __int8 **)v19;
    if (!v19)
      goto LABEL_24;
  }
  if (!std::equal_to<std::string>::operator()[abi:nn180100](v19 + 16, (unsigned __int8 *)a3))
    goto LABEL_23;
  v48 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v9, v10);
  v49 = v48;
  if (v15 > 1)
  {
    v50 = v48;
    v51 = lock;
    if (v48 >= v12)
      v50 = v48 % v12;
  }
  else
  {
    v51 = lock;
    v50 = v73 & v48;
  }
  v52 = *(void ***)(v17 + 8 * v50);
  if (v52)
  {
    v53 = (char *)*v52;
    if (*v52)
    {
      do
      {
        v54 = *((_QWORD *)v53 + 1);
        if (v54 == v49)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v53 + 16, (unsigned __int8 *)a3))
            goto LABEL_116;
        }
        else
        {
          if (v15 > 1)
          {
            if (v54 >= v12)
              v54 %= v12;
          }
          else
          {
            v54 &= v73;
          }
          if (v54 != v50)
            break;
        }
        v53 = *(char **)v53;
      }
      while (v53);
    }
  }
  v55 = (_QWORD *)(a1 + 16);
  v79 = 0;
  v53 = (char *)operator new(0x30uLL);
  v77 = v53;
  v78 = a1 + 16;
  *(_QWORD *)v53 = 0;
  *((_QWORD *)v53 + 1) = v49;
  v56 = (std::string *)(v53 + 16);
  if (v72 < 0)
  {
    std::string::__init_copy_ctor_external(v56, v71, v70);
  }
  else
  {
    *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v53 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_QWORD *)v53 + 5) = 0;
  v57 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  LOBYTE(v79) = 1;
  v58 = *(float *)(a1 + 32);
  if ((float)(v58 * (float)v12) < v57)
  {
    v60 = v12 < 3 || v15 > 1;
    v61 = v60 | (2 * v12);
    v62 = vcvtps_u32_f32(v57 / v58);
    if (v61 <= v62)
      v63 = v62;
    else
      v63 = v61;
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v63);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v49 >= v12)
        v50 = v49 % v12;
      else
        v50 = v49;
    }
    else
    {
      v50 = (v12 - 1) & v49;
    }
  }
  v64 = *(_QWORD *)a1;
  v65 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v50);
  if (v65)
  {
    *(_QWORD *)v53 = *v65;
    goto LABEL_114;
  }
  *(_QWORD *)v53 = *v55;
  *v55 = v53;
  *(_QWORD *)(v64 + 8 * v50) = v55;
  if (*(_QWORD *)v53)
  {
    v66 = *(_QWORD *)(*(_QWORD *)v53 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v66 >= v12)
        v66 %= v12;
    }
    else
    {
      v66 &= v12 - 1;
    }
    v65 = (_QWORD *)(*(_QWORD *)a1 + 8 * v66);
LABEL_114:
    *v65 = v53;
  }
  v77 = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_photosCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_photosCandidate>>,void *>>>>::reset[abi:nn180100]((uint64_t)&v77);
LABEL_116:
  v67 = *((_QWORD *)v53 + 5);
  v68 = *(_DWORD *)(v67 + 8);
  ++*(_DWORD *)(v67 + 4);
  v69 = *(float *)v67;
  if (*(float *)v67 < a5)
    v69 = a5;
  *(float *)v67 = v69;
  if (v68 != a4)
    *(_DWORD *)(v67 + 8) = 9;
LABEL_72:
  os_unfair_lock_unlock(v51);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_freeTextCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_freeTextCandidate>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_freeTextCandidate>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t *std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t v22;

  v5 = a2;
  v7 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || (v8 = a2[4], v8 > a3))
  {
    v9 = *a2;
    if (*a1 == a2)
    {
      v11 = (uint64_t **)a2;
LABEL_16:
      if (v9)
        v14 = v11;
      else
        v14 = (uint64_t **)a2;
      if (v9)
        v12 = v11 + 1;
      else
        v12 = (uint64_t **)a2;
      goto LABEL_22;
    }
    if (v9)
    {
      v10 = (uint64_t **)*a2;
      do
      {
        v11 = v10;
        v10 = (uint64_t **)v10[1];
      }
      while (v10);
    }
    else
    {
      v16 = a2;
      do
      {
        v11 = (uint64_t **)v16[2];
        v17 = *v11 == v16;
        v16 = (uint64_t *)v11;
      }
      while (v17);
    }
    if ((uint64_t)v11[4] < a3)
      goto LABEL_16;
    v18 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v18;
          v19 = v18[4];
          if (v19 <= a3)
            break;
          v18 = *v14;
          v7 = v14;
          if (!*v14)
            goto LABEL_44;
        }
        if (v19 >= a3)
          break;
        v7 = v14 + 1;
        v18 = v14[1];
        if (!v18)
          goto LABEL_44;
      }
LABEL_46:
      v12 = v7;
      goto LABEL_22;
    }
    goto LABEL_43;
  }
  if (v8 >= a3)
    return v5;
  v12 = (uint64_t **)(a2 + 1);
  v13 = (uint64_t *)a2[1];
  if (v13)
  {
    do
    {
      v12 = (uint64_t **)v13;
      v13 = (uint64_t *)*v13;
      v14 = v12;
      v15 = v12;
    }
    while (v13);
  }
  else
  {
    v15 = (uint64_t **)a2;
    do
    {
      v20 = v15;
      v15 = (uint64_t **)v15[2];
    }
    while (*v15 != (uint64_t *)v20);
    v14 = (uint64_t **)a2;
  }
  if (v15 != v7 && (uint64_t)v15[4] <= a3)
  {
    v21 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          v14 = (uint64_t **)v21;
          v22 = v21[4];
          if (v22 <= a3)
            break;
          v21 = *v14;
          v7 = v14;
          if (!*v14)
            goto LABEL_44;
        }
        if (v22 >= a3)
          goto LABEL_46;
        v7 = v14 + 1;
        v21 = v14[1];
        if (!v21)
          goto LABEL_44;
      }
    }
LABEL_43:
    v14 = a1 + 1;
LABEL_44:
    v5 = (uint64_t *)operator new(0x28uLL);
    v5[4] = a4;
    std::__tree<long long>::__insert_node_at(a1, (uint64_t)v14, v7, v5);
    return v5;
  }
LABEL_22:
  v5 = *v12;
  v7 = v12;
  if (!*v12)
    goto LABEL_44;
  return v5;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_photosCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_photosCandidate>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_photosCandidate>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

char *std::vector<std::string>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void SIPommesSuggestionsProcessDBO(const void *a1, int *a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 *a11, int a12, char *__s1, const char **a14, uint64_t a15, char a16, uint64_t a17)
{
  int v21;
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;
  int field;
  const char *v27;
  BOOL v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  const char *v32;
  char v33;
  BOOL v34;
  __int128 v35;
  __int128 v36;
  const char *v37;
  BOOL v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  const char *v43;
  BOOL v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  int v50;
  __int128 *v51;
  _QWORD *v52;
  int v53;
  NSObject *v54;
  os_log_type_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  int v61;
  _QWORD *v62;
  const char *v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  int v68;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[5];
  _OWORD v79[5];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85[5];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91[5];
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  const char *v106;
  double v107;
  int v108;
  int v109;
  char v110;
  char v111;
  char v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  double v131;
  int v132;
  int v133;
  char v134;
  char v135;
  char v136;
  char v137;
  uint64_t v138;
  __int16 v139;
  int v140;
  BOOL v141;
  uint64_t v142;
  BOOL v143;
  const char *v144;
  char v145;
  int v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t (*v149)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t);
  void *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const char *v162;
  double v163;
  int v164;
  int v165;
  char v166;
  char v167;
  char v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  _BYTE buf[24];
  void *v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  const char *v188;
  double v189;
  unint64_t v190;
  int v191;
  int v192;
  char v193;
  char v194;
  char v195;
  BOOL v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  if (!__s1)
    return;
  v21 = strcmp(__s1, "com.apple.mobilemail");
  v22 = strcmp(__s1, "com.apple.mobileslideshow");
  v23 = *(_DWORD *)(a7 + 8);
  if ((v23 & 0x80) != 0)
  {
    if (!v22)
    {
      v39 = a11[3];
      v91[2] = a11[2];
      v91[3] = v39;
      v91[4] = a11[4];
      v40 = a11[1];
      v91[0] = *a11;
      v91[1] = v40;
      SIPommesSpotlightPhotosSuggestionsProcessDBO(a1, a2, a3, a7, a8, a4, a5, a9, a14, a12, v91, a17);
      return;
    }
    v29 = a11[3];
    v88 = a11[2];
    v89 = v29;
    v90 = a11[4];
    v30 = a11[1];
    v86 = *a11;
    v87 = v30;
    if (!a9)
      return;
    if (!a8)
      return;
    v31 = *(_QWORD *)(a9 + 24);
    if (!v31)
      return;
    if (a14)
    {
      v32 = *a14;
      if (*a14)
      {
        if (!strncmp("ja", *a14, 2uLL))
        {
          v33 = 1;
        }
        else
        {
          if (strncmp("zh", v32, 2uLL))
          {
            v33 = 0;
            v34 = strncmp("ko", v32, 2uLL) == 0;
LABEL_58:
            if (*(_QWORD *)(a9 + 16))
            {
              v58 = icu_search_context_create();
              if (v58)
              {
                v59 = v58;
                LODWORD(v144) = 0;
                LOBYTE(v142) = 0;
                LOBYTE(v138) = 0;
                v60 = (*(double (**)(uint64_t, const char **, uint64_t *, uint64_t *))(a17 + 16))(a17, &v144, &v138, &v142);
                v61 = *(_DWORD *)(a7 + 8);
                *(_QWORD *)&v113 = 0;
                *((_QWORD *)&v113 + 1) = &v113;
                v114 = 0x2000000000;
                v115 = -1;
                if ((v61 & 0x4000) != 0)
                {
                  *(_OWORD *)buf = xmmword_1B86321C0;
                  v92 = xmmword_1B86321D0;
                  v174 = xmmword_1B86321E0;
                  v173 = xmmword_1B86321F0;
                  v147 = (uint64_t *)MEMORY[0x1E0C809B0];
                  v148 = 0x40000000;
                  v149 = ___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke;
                  v150 = &unk_1E6E2C918;
                  v156 = &v113;
                  v157 = a7;
                  v158 = a7 + 4;
                  v159 = a8;
                  v160 = a9;
                  v161 = v59;
                  v162 = v32;
                  v166 = v33;
                  v155 = v90;
                  v154 = v89;
                  v153 = v88;
                  v151 = v86;
                  v152 = v87;
                  v164 = a12;
                  v165 = (int)v144;
                  v167 = v142;
                  v168 = v138;
                  v163 = v60;
                  SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)buf, (int *)&v92, (int *)&v174, (int *)&v173, a4, a5, (uint64_t)&v147);
                  v172 = xmmword_1B8632200;
                  v171 = xmmword_1B8632210;
                  v170 = xmmword_1B8632220;
                  v169 = xmmword_1B8632230;
                  *(_QWORD *)(*((_QWORD *)&v113 + 1) + 24) = -1;
                  *(_QWORD *)&v116 = MEMORY[0x1E0C809B0];
                  *((_QWORD *)&v116 + 1) = 0x40000000;
                  v117 = (uint64_t)___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2;
                  v118 = (uint64_t)&unk_1E6E2C940;
                  v124 = &v113;
                  v125 = a7;
                  v126 = a7 + 4;
                  v127 = a8;
                  v128 = a9;
                  v129 = v59;
                  v130 = v32;
                  v134 = v33;
                  v121 = v88;
                  v122 = v89;
                  v123 = v90;
                  v119 = v86;
                  v120 = v87;
                  v132 = a12;
                  v133 = (int)v144;
                  v135 = v142;
                  v136 = v138;
                  v131 = v60;
                  SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v172, (int *)&v171, (int *)&v170, (int *)&v169, a4, a5, (uint64_t)&v116);
                }
                LODWORD(v171) = 0;
                v174 = xmmword_1B86320D0;
                SIPommesDBOGetIntValue(a2, a3, (int *)&v174, a4, a5, &v171);
                if ((int)v171 >= 8)
                {
                  *(_OWORD *)buf = xmmword_1B86320E0;
                  v173 = xmmword_1B86320F0;
                  *(_QWORD *)(*((_QWORD *)&v113 + 1) + 24) = -1;
                  *(_QWORD *)&v92 = MEMORY[0x1E0C809B0];
                  *((_QWORD *)&v92 + 1) = 0x40000000;
                  v93 = (uint64_t)___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_3;
                  v94 = (uint64_t)&unk_1E6E2C968;
                  v100 = &v113;
                  v101 = a7;
                  v102 = a7 + 4;
                  v103 = a8;
                  v104 = a9;
                  v105 = v59;
                  v106 = v32;
                  v110 = v33;
                  v97 = v88;
                  v98 = v89;
                  v99 = v90;
                  v95 = v86;
                  v96 = v87;
                  v108 = a12;
                  v109 = (int)v144;
                  v111 = v142;
                  v112 = v138;
                  v107 = v60;
                  SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)buf, (int *)&v173, 0, 0, a4, a5, (uint64_t)&v92);
                }
                v173 = xmmword_1B8632100;
                v172 = xmmword_1B8632110;
                *(_QWORD *)(*((_QWORD *)&v113 + 1) + 24) = -1;
                *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                *(_QWORD *)&buf[8] = 0x40000000;
                *(_QWORD *)&buf[16] = ___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_4;
                v176 = &unk_1E6E2C990;
                v184 = a7;
                v185 = a7 + 4;
                v186 = a8;
                v187 = a9;
                v188 = (const char *)v59;
                v189 = *(double *)&v32;
                v193 = v33;
                v179 = v88;
                v180 = v89;
                v181 = v90;
                v178 = v87;
                v177 = v86;
                v191 = a12;
                v192 = (int)v144;
                v194 = v142;
                v195 = v138;
                v190 = *(_QWORD *)&v60;
                v196 = v34;
                v183 = v31;
                v182 = &v113;
                SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v173, (int *)&v172, 0, 0, a4, a5, (uint64_t)buf);
                icu_ctx_release();
                v51 = &v113;
                goto LABEL_65;
              }
            }
            return;
          }
          v33 = 0;
        }
        v34 = 1;
        goto LABEL_58;
      }
      v33 = 0;
    }
    else
    {
      v33 = 0;
      v32 = 0;
    }
    v34 = 0;
    goto LABEL_58;
  }
  if ((v23 & 0x1000) == 0)
  {
    if (!v22)
    {
      v41 = a11[3];
      v79[2] = a11[2];
      v79[3] = v41;
      v79[4] = a11[4];
      v42 = a11[1];
      v79[0] = *a11;
      v79[1] = v42;
      v147 = a3;
      *(_QWORD *)&v116 = a6;
      *(_QWORD *)&v92 = a7;
      *(_QWORD *)&v113 = a8;
      *(_QWORD *)&v174 = a9;
      LODWORD(v170) = a12;
      if (a8 && a9)
      {
        *(_QWORD *)&v173 = 0;
        v44 = a14 && (v43 = *a14, (*(_QWORD *)&v173 = v43) != 0) && strncmp("ja", v43, 2uLL) == 0;
        LOBYTE(v169) = v44;
        if (*(_QWORD *)(a9 + 16))
        {
          *(_QWORD *)&v172 = icu_search_context_create();
          if ((_QWORD)v172)
          {
            *(_QWORD *)&v171 = a7 + 4;
            v52 = operator new(0x60uLL);
            *v52 = &unk_1E6E2AAE8;
            v52[1] = &v92;
            v52[2] = &v171;
            v52[3] = &v113;
            v52[4] = &v174;
            v52[5] = &v172;
            v52[6] = v79;
            v52[7] = &v147;
            v52[8] = &v170;
            v52[9] = &v116;
            v52[10] = &v173;
            v52[11] = &v169;
            v176 = v52;
            SIPommesDBOFieldIterator((uint64_t)&SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::photosAttributes, 0x10u, a1, a2, a3, a4, a5, (uint64_t)buf);
            (*(void (**)(_QWORD *))(*v52 + 40))(v52);
            icu_ctx_release();
          }
        }
      }
      return;
    }
    if (v21)
      return;
    v24 = a11[3];
    v78[2] = a11[2];
    v78[3] = v24;
    v78[4] = a11[4];
    v25 = a11[1];
    v78[0] = *a11;
    v78[1] = v25;
    *(_QWORD *)&v113 = a3;
    *(_QWORD *)&v174 = a6;
    *(_QWORD *)&v173 = a7;
    *(_QWORD *)&v172 = a8;
    *(_QWORD *)&v171 = a9;
    *(_QWORD *)&v170 = a10;
    v146 = a12;
    *(_QWORD *)&v169 = a15;
    v145 = a16;
    if (a8 && a9)
    {
      field = db_get_field(a2, (uint64_t)a3, "kMDItemContentURL", 0, 0);
      if (field == 2)
      {
        v144 = 0;
        v28 = a14 && (v27 = *a14, (v144 = v27) != 0) && strncmp("ja", v27, 2uLL) == 0;
        v143 = v28;
        if (*(_QWORD *)(a9 + 16))
        {
          v142 = icu_search_context_create();
          if (v142)
          {
            v141 = strcmp(*(const char **)(a9 + 16), "*") == 0;
            v148 = 0;
            v147 = 0;
            v149 = 0;
            v116 = 0uLL;
            v117 = 0;
            v140 = 0;
            v139 = 0;
            *(_QWORD *)&v92 = (*(double (**)(uint64_t, int *, __int16 *, char *))(a17 + 16))(a17, &v140, &v139, (char *)&v139 + 1);
            v138 = a7 + 4;
            v137 = 0;
            v62 = operator new(0xA8uLL);
            *v62 = &off_1E6E2AAA0;
            v62[1] = &v147;
            v62[2] = &v171;
            v62[3] = &v173;
            v62[4] = &v138;
            v62[5] = &v172;
            v62[6] = &v170;
            v62[7] = &v142;
            v62[8] = v78;
            v62[9] = &v113;
            v62[10] = &v146;
            v62[11] = &v174;
            v62[12] = &v144;
            v62[13] = &v143;
            v62[14] = &v141;
            v62[15] = &v116;
            v62[16] = &v92;
            v62[17] = &v139;
            v62[18] = &v145;
            v62[19] = &v169;
            v62[20] = &v137;
            v176 = v62;
            SIPommesDBOFieldIterator((uint64_t)&SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::mailAttributes, 6u, a1, a2, a3, a4, a5, (uint64_t)buf);
            (*(void (**)(_QWORD *))(*v62 + 40))(v62);
            icu_ctx_release();
            *(_QWORD *)&v92 = &v116;
            std::vector<_peopleMatchInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v92);
            *(_QWORD *)&v116 = &v147;
            std::vector<_peopleMatchInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)&v116);
          }
        }
      }
      else
      {
        v53 = field;
        v68 = *__error();
        v54 = _SILogForLogForCategory(14);
        v55 = 2 * (dword_1EF19FCC4 < 4);
        v56 = v54;
        if (os_log_type_enabled(v54, v55))
        {
          v57 = *a3;
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v53;
          *(_WORD *)&buf[8] = 2048;
          *(_QWORD *)&buf[10] = v57;
          _os_log_impl(&dword_1B8270000, v56, v55, "[Pommes_Suggestions]mail_debug: Skipping attachment. rc:%d for oid %lld.", buf, 0x12u);
        }
        *__error() = v68;
      }
    }
    if ((v23 & 0x4000) == 0)
      return;
    v75 = a11[2];
    v76 = a11[3];
    v77 = a11[4];
    v73 = *a11;
    v74 = a11[1];
    if (!a9 || !a8 || !*(_QWORD *)(a9 + 24))
      return;
    if (a14)
    {
      v63 = *a14;
      if (*a14)
      {
        v64 = strncmp("ja", *a14, 2uLL) == 0;
LABEL_79:
        if (*(_QWORD *)(a9 + 16))
        {
          v65 = icu_search_context_create();
          if (v65)
          {
            v66 = v65;
            LODWORD(v144) = 0;
            LOBYTE(v142) = 0;
            LOBYTE(v138) = 0;
            v67 = (*(double (**)(uint64_t, const char **, uint64_t *, uint64_t *))(a17 + 16))(a17, &v144, &v138, &v142);
            *(_QWORD *)&v116 = 0;
            *((_QWORD *)&v116 + 1) = &v116;
            v117 = 0x2000000000;
            v118 = -1;
            v92 = xmmword_1B86321C0;
            v113 = xmmword_1B86321D0;
            v174 = xmmword_1B86321E0;
            v173 = xmmword_1B86321F0;
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = ___ZL42SIPommesSpotlightMailSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke;
            v176 = &unk_1E6E2CA30;
            v182 = &v116;
            v183 = a7;
            v184 = a7 + 4;
            v185 = a8;
            v186 = a9;
            v187 = v66;
            v188 = v63;
            LOBYTE(v191) = v64;
            v181 = v77;
            v180 = v76;
            v179 = v75;
            v177 = v73;
            v178 = v74;
            v190 = __PAIR64__(v144, a12);
            BYTE1(v191) = v142;
            BYTE2(v191) = v138;
            v189 = v67;
            SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v92, (int *)&v113, (int *)&v174, (int *)&v173, a4, a5, (uint64_t)buf);
            v172 = xmmword_1B8632200;
            v171 = xmmword_1B8632210;
            v170 = xmmword_1B8632220;
            v169 = xmmword_1B8632230;
            *(_QWORD *)(*((_QWORD *)&v116 + 1) + 24) = -1;
            v147 = (uint64_t *)MEMORY[0x1E0C809B0];
            v148 = 0x40000000;
            v149 = ___ZL42SIPommesSpotlightMailSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2;
            v150 = &unk_1E6E2CA58;
            v156 = &v116;
            v157 = a7;
            v158 = a7 + 4;
            v159 = a8;
            v160 = a9;
            v161 = v66;
            v162 = v63;
            v166 = v64;
            v153 = v75;
            v154 = v76;
            v155 = v77;
            v152 = v74;
            v151 = v73;
            v164 = a12;
            v165 = (int)v144;
            v167 = v142;
            v168 = v138;
            v163 = v67;
            SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v172, (int *)&v171, (int *)&v170, (int *)&v169, a4, a5, (uint64_t)&v147);
            icu_ctx_release();
            v51 = &v116;
LABEL_65:
            _Block_object_dispose(v51, 8);
            return;
          }
        }
        return;
      }
    }
    else
    {
      v63 = 0;
    }
    v64 = 0;
    goto LABEL_79;
  }
  if (!v22)
  {
    v45 = a11[3];
    v85[2] = a11[2];
    v85[3] = v45;
    v85[4] = a11[4];
    v46 = a11[1];
    v85[0] = *a11;
    v85[1] = v46;
    SIPommesSpotlightPhotosSuggestionsProcessDBO(a1, a2, a3, a7, a8, a4, a5, a9, a14, a12, v85, a17);
    return;
  }
  v35 = a11[3];
  v82 = a11[2];
  v83 = v35;
  v84 = a11[4];
  v36 = a11[1];
  v80 = *a11;
  v81 = v36;
  if (a9 && a8 && *(_QWORD *)(a9 + 24))
  {
    if (a14)
    {
      v37 = *a14;
      if (*a14)
      {
        v38 = strncmp("ja", *a14, 2uLL) == 0;
LABEL_41:
        if (*(_QWORD *)(a9 + 16))
        {
          v47 = icu_search_context_create();
          if (v47)
          {
            v48 = v47;
            LODWORD(v144) = 0;
            LOBYTE(v142) = 0;
            LOBYTE(v138) = 0;
            v49 = (*(double (**)(uint64_t, const char **, uint64_t *, uint64_t *))(a17 + 16))(a17, &v144, &v138, &v142);
            v50 = *(_DWORD *)(a7 + 8);
            *(_QWORD *)&v92 = 0;
            *((_QWORD *)&v92 + 1) = &v92;
            v93 = 0x2000000000;
            v94 = -1;
            if ((v50 & 0x4000) != 0)
            {
              v116 = xmmword_1B8632120;
              v113 = xmmword_1B8632130;
              v174 = xmmword_1B8632140;
              v173 = xmmword_1B8631D70;
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = ___ZL44SIPommesSpotlightSearchSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke;
              v176 = &unk_1E6E2C9B8;
              v182 = &v92;
              v183 = a7;
              v184 = a7 + 4;
              v185 = a8;
              v186 = a9;
              v187 = v48;
              v188 = v37;
              LOBYTE(v191) = v38;
              v181 = v84;
              v180 = v83;
              v179 = v82;
              v177 = v80;
              v178 = v81;
              v190 = __PAIR64__(v144, a12);
              BYTE1(v191) = v142;
              BYTE2(v191) = v138;
              v189 = v49;
              SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v116, (int *)&v113, (int *)&v174, (int *)&v173, a4, a5, (uint64_t)buf);
              v172 = xmmword_1B8632150;
              v171 = xmmword_1B8632160;
              v170 = xmmword_1B8632170;
              v169 = xmmword_1B8632180;
              *(_QWORD *)(*((_QWORD *)&v92 + 1) + 24) = -1;
              v147 = (uint64_t *)MEMORY[0x1E0C809B0];
              v148 = 0x40000000;
              v149 = ___ZL44SIPommesSpotlightSearchSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2;
              v150 = &unk_1E6E2C9E0;
              v156 = &v92;
              v157 = a7;
              v158 = a7 + 4;
              v159 = a8;
              v160 = a9;
              v161 = v48;
              v162 = v37;
              v166 = v38;
              v153 = v82;
              v154 = v83;
              v155 = v84;
              v152 = v81;
              v151 = v80;
              v164 = a12;
              v165 = (int)v144;
              v167 = v142;
              v168 = v138;
              v163 = v49;
              SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v172, (int *)&v171, (int *)&v170, (int *)&v169, a4, a5, (uint64_t)&v147);
            }
            LODWORD(v172) = 0;
            v113 = xmmword_1B8632190;
            SIPommesDBOGetIntValue(a2, a3, (int *)&v113, a4, a5, &v172);
            if ((int)v172 >= 8)
            {
              v174 = xmmword_1B86321A0;
              v173 = xmmword_1B86321B0;
              *(_QWORD *)(*((_QWORD *)&v92 + 1) + 24) = -1;
              *(_QWORD *)&v116 = MEMORY[0x1E0C809B0];
              *((_QWORD *)&v116 + 1) = 0x40000000;
              v117 = (uint64_t)___ZL44SIPommesSpotlightSearchSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_3;
              v118 = (uint64_t)&unk_1E6E2CA08;
              v124 = &v92;
              v125 = a7;
              v126 = a7 + 4;
              v127 = a8;
              v128 = a9;
              v129 = v48;
              v130 = v37;
              v134 = v38;
              v121 = v82;
              v122 = v83;
              v123 = v84;
              v119 = v80;
              v120 = v81;
              v132 = a12;
              v133 = (int)v144;
              v135 = v142;
              v136 = v138;
              v131 = v49;
              SIPommesDBOScoredTopicFieldIterator(a2, a3, (int *)&v174, (int *)&v173, 0, 0, a4, a5, (uint64_t)&v116);
            }
            icu_ctx_release();
            v51 = &v92;
            goto LABEL_65;
          }
        }
        return;
      }
    }
    else
    {
      v37 = 0;
    }
    v38 = 0;
    goto LABEL_41;
  }
}

void SIPommesSpotlightPhotosSuggestionsProcessDBO(const void *a1, int *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, const char **a9, int a10, __int128 *a11, uint64_t a12)
{
  uint64_t v14;
  BOOL v21;
  const char *v22;
  uint64_t v23;
  double v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  int *v28;
  NSObject *v29;
  os_log_type_t v30;
  NSObject *v31;
  uint64_t v32;
  int v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  int *v37;
  NSObject *v38;
  os_log_type_t v39;
  NSObject *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _QWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  __int128 *v56;
  const void *v57;
  int *v58;
  BOOL v59;
  int v60;
  _QWORD v61[4];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  double v74;
  int v75;
  int v76;
  BOOL v77;
  char v78;
  char v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  int v83;
  _QWORD v84[4];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint8_t *v90;
  unint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  double v100;
  int v101;
  int v102;
  int v103;
  BOOL v104;
  char v105;
  char v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  unint64_t v111[3];
  char v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  double v116;
  __int16 v117;
  int v118;
  uint64_t v119;
  BOOL v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126[24];
  _QWORD *v127;
  uint8_t buf[8];
  __int128 v129;
  uint64_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x1E0C80C00];
  v124 = a5;
  v125 = a4;
  v123 = a8;
  if (a8)
  {
    v14 = *(_QWORD *)(a8 + 24);
    v122 = v14;
    if (a5)
    {
      if (v14)
      {
        v21 = (char)a9;
        v121 = 0;
        v60 = a10;
        if (a9)
        {
          v121 = *a9;
          v22 = v121;
          v21 = v121 && strncmp("ja", v121, 2uLL) == 0;
        }
        else
        {
          v22 = 0;
        }
        v59 = v21;
        v120 = v21;
        if (*(_QWORD *)(a8 + 16))
        {
          v23 = icu_search_context_create();
          v119 = v23;
          if (v23)
          {
            v55 = v23;
            v56 = a11;
            v118 = 0;
            v117 = 0;
            v24 = (*(double (**)(uint64_t, int *, __int16 *, char *))(a12 + 16))(a12, &v118, &v117, (char *)&v117 + 1);
            v116 = v24;
            v115 = a4 + 4;
            v114 = 0;
            v57 = a1;
            v58 = a2;
            if (a7 <= 18)
            {
              v51 = *__error();
              v25 = _SILogForLogForCategory(14);
              v26 = 2 * (dword_1EF19FCC4 < 4);
              if (os_log_type_enabled(v25, v26))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = 19;
                LOWORD(v129) = 1024;
                *(_DWORD *)((char *)&v129 + 2) = a7;
                _os_log_impl(&dword_1B8270000, v25, v26, "%d index greater than fetched attribute count %d", buf, 0xEu);
              }
              v52 = a6;
              *__error() = v51;
              v113 = 0;
              v27 = 0;
              goto LABEL_25;
            }
            v28 = *(int **)(a6 + 152);
            if (v28)
            {
              v111[0] = 0;
              *(_QWORD *)&v110 = 0;
              if (db_get_field_by_id(a2, (uint64_t)a3, v28, (unint64_t *)&v110, v111)
                || *(_WORD *)v110 != 9)
              {
                v53 = *__error();
                v29 = _SILogForLogForCategory(14);
                v30 = 2 * (dword_1EF19FCC4 < 4);
                v31 = v29;
                if (os_log_type_enabled(v29, v30))
                {
                  v32 = *a3;
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&buf[4] = 19;
                  LOWORD(v129) = 2048;
                  *(_QWORD *)((char *)&v129 + 2) = v32;
                  _os_log_impl(&dword_1B8270000, v31, v30, "[Pommes_Suggestions]debug: Cannot get/process attribute %d for oid %lld.", buf, 0x12u);
                }
                *__error() = v53;
                v27 = 0;
                a2 = v58;
              }
              else
              {
                v27 = *(_DWORD *)v111[0];
                v114 = *(_DWORD *)v111[0];
              }
            }
            else
            {
              v27 = 0;
            }
            v113 = 0;
            if (a7 <= 0x13)
            {
              v52 = a6;
LABEL_25:
              v33 = *__error();
              v34 = _SILogForLogForCategory(14);
              v35 = 2 * (dword_1EF19FCC4 < 4);
              if (os_log_type_enabled(v34, v35))
              {
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = 20;
                LOWORD(v129) = 1024;
                *(_DWORD *)((char *)&v129 + 2) = a7;
                _os_log_impl(&dword_1B8270000, v34, v35, "%d index greater than fetched attribute count %d", buf, 0xEu);
              }
              *__error() = v33;
              v36 = 0;
              a6 = v52;
              goto LABEL_36;
            }
            v37 = *(int **)(a6 + 160);
            if (v37)
            {
              v111[0] = 0;
              *(_QWORD *)&v110 = 0;
              if (!db_get_field_by_id(a2, (uint64_t)a3, v37, (unint64_t *)&v110, v111)
                && *(_WORD *)v110 == 10)
              {
                v36 = *(_QWORD *)v111[0];
                v113 = *(_QWORD *)v111[0];
LABEL_36:
                *(_QWORD *)buf = 0;
                *(_QWORD *)&v129 = buf;
                *((_QWORD *)&v129 + 1) = 0x2000000000;
                v130 = -1;
                v111[0] = 0;
                v111[1] = (unint64_t)v111;
                v111[2] = 0x2000000000;
                v112 = 0;
                v109 = xmmword_1B86320A0;
                v110 = xmmword_1B8632090;
                v107 = xmmword_1B86320C0;
                v108 = xmmword_1B86320B0;
                v84[0] = MEMORY[0x1E0C809B0];
                v84[1] = 0x40000000;
                v84[2] = ___ZL44SIPommesSpotlightPhotosSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke;
                v84[3] = &unk_1E6E2C8C8;
                v92 = v36;
                v101 = v27;
                v90 = buf;
                v91 = v111;
                v93 = v14;
                v94 = a4;
                v95 = a4 + 4;
                v96 = a5;
                v97 = a8;
                v98 = v55;
                v99 = v22;
                v104 = v59;
                v42 = *v56;
                v43 = v56[1];
                v44 = v56[4];
                v88 = v56[3];
                v89 = v44;
                v45 = v56[2];
                v86 = v43;
                v87 = v45;
                v85 = v42;
                v102 = v60;
                v103 = v118;
                v105 = HIBYTE(v117);
                v106 = v117;
                v100 = v24;
                SIPommesDBOScoredTopicFieldIterator(v58, a3, (int *)&v110, (int *)&v109, (int *)&v108, (int *)&v107, a6, a7, (uint64_t)v84);
                v46 = operator new(0x88uLL);
                *v46 = &off_1E6E2AB30;
                v46[1] = &v122;
                v46[2] = &v113;
                v46[3] = &v114;
                v46[4] = &v125;
                v46[5] = &v115;
                v46[6] = &v124;
                v46[7] = &v123;
                v46[8] = &v119;
                v46[9] = &v121;
                v46[10] = &v120;
                v46[11] = v56;
                v46[12] = &a10;
                v46[13] = &v118;
                v46[14] = (char *)&v117 + 1;
                v46[15] = &v117;
                v46[16] = &v116;
                v127 = v46;
                SIPommesDBOFieldIterator((uint64_t)"\n", 8u, v57, v58, a3, a6, a7, (uint64_t)v126);
                (*(void (**)(_QWORD *))(*v46 + 40))(v46);
                v83 = 0;
                v82 = xmmword_1B86320D0;
                SIPommesDBOGetIntValue(v58, a3, (int *)&v82, a6, a7, &v83);
                if (v83 >= 8)
                {
                  v80 = xmmword_1B86320F0;
                  v81 = xmmword_1B86320E0;
                  *(_QWORD *)(v129 + 24) = -1;
                  v61[0] = MEMORY[0x1E0C809B0];
                  v61[1] = 0x40000000;
                  v61[2] = ___ZL44SIPommesSpotlightPhotosSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2;
                  v61[3] = &unk_1E6E2C8F0;
                  v67 = buf;
                  v68 = v125;
                  v69 = v115;
                  v70 = v124;
                  v71 = v123;
                  v72 = v119;
                  v73 = v121;
                  v77 = v120;
                  v47 = *v56;
                  v48 = v56[1];
                  v49 = v56[4];
                  v65 = v56[3];
                  v66 = v49;
                  v50 = v56[2];
                  v63 = v48;
                  v64 = v50;
                  v62 = v47;
                  v75 = a10;
                  v76 = v118;
                  v78 = HIBYTE(v117);
                  v79 = v117;
                  v74 = v116;
                  SIPommesDBOScoredTopicFieldIterator(v58, a3, (int *)&v81, (int *)&v80, 0, 0, a6, a7, (uint64_t)v61);
                }
                icu_ctx_release();
                _Block_object_dispose(v111, 8);
                _Block_object_dispose(buf, 8);
                return;
              }
              v54 = *__error();
              v38 = _SILogForLogForCategory(14);
              v39 = 2 * (dword_1EF19FCC4 < 4);
              v40 = v38;
              if (os_log_type_enabled(v38, v39))
              {
                v41 = *a3;
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&buf[4] = 20;
                LOWORD(v129) = 2048;
                *(_QWORD *)((char *)&v129 + 2) = v41;
                _os_log_impl(&dword_1B8270000, v40, v39, "[Pommes_Suggestions]debug: Cannot get/process attribute %d for oid %lld.", buf, 0x12u);
              }
              *__error() = v54;
            }
            v36 = 0;
            goto LABEL_36;
          }
        }
      }
    }
  }
}

uint64_t ___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[5];

  v6 = *(_QWORD *)(*(_QWORD *)(result + 112) + 8);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 != -1 && v7 >= a6)
  {
    if (a5)
    {
      v11 = *(_QWORD *)(result + 128);
      v12 = *(_QWORD *)(result + 120) + 264;
      v13 = *(_QWORD *)(result + 136);
      v14 = *(_QWORD *)(result + 144);
      v15 = *(_QWORD *)(result + 152);
      v16 = *(_QWORD *)(result + 160);
      v17 = *(_BYTE *)(result + 184);
      v18 = *(_OWORD *)(result + 80);
      v20[2] = *(_OWORD *)(result + 64);
      v20[3] = v18;
      v20[4] = *(_OWORD *)(result + 96);
      v19 = *(_OWORD *)(result + 48);
      v20[0] = *(_OWORD *)(result + 32);
      v20[1] = v19;
      return _SIPommesSuggestionsProcessTopicAttribute(v12, v11, v13, v14, v15, a4, a5, 0, 0, v16, v17, 0, 21, v20, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
    }
  }
  else
  {
    *(_QWORD *)(v6 + 24) = a6;
  }
  return result;
}

int *SIPommesDBOScoredTopicFieldIterator(int *result, uint64_t *a2, int *a3, int *a4, int *a5, int *a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v11;
  int v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  int *v18;
  uint64_t v19;
  int v20;
  int *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  const char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint32_t v35;
  const char *v36;
  uint64_t *v37;
  uint64_t v38;
  int *v39;
  int v40;
  NSObject *v41;
  os_log_type_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  size_t v55;
  uint64_t v56;
  int *v57;
  int v58;
  size_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  unsigned __int16 *v65;
  uint64_t *v66;
  unsigned __int16 *v67;
  const char *v68;
  unsigned __int16 *v69;
  unint64_t v70;
  unsigned __int16 *v71;
  char *__s;
  uint8_t buf[4];
  int v74;
  __int16 v75;
  uint64_t v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return result;
  v11 = *a3;
  if ((int)v11 > a8)
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(14);
    v14 = 2 * (dword_1EF19FCC4 < 4);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = *a3;
      *(_DWORD *)buf = 67109376;
      v74 = v15;
      v75 = 1024;
      LODWORD(v76) = a8;
LABEL_10:
      _os_log_impl(&dword_1B8270000, v13, v14, "%d index greater than fetched attribute count %d", buf, 0xEu);
      goto LABEL_11;
    }
    goto LABEL_11;
  }
  if (!a4)
    return result;
  v18 = *(int **)(a7 + 8 * v11);
  if (!v18)
    return result;
  v19 = *a4;
  if ((int)v19 > a8)
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(14);
    v14 = 2 * (dword_1EF19FCC4 < 4);
    if (os_log_type_enabled(v13, v14))
    {
      v20 = *a4;
      *(_DWORD *)buf = 67109376;
      v74 = v20;
      v75 = 1024;
      LODWORD(v76) = a8;
      goto LABEL_10;
    }
LABEL_11:
    result = __error();
    *result = v12;
    return result;
  }
  if (!*(_QWORD *)(a7 + 8 * v19))
    return result;
  v24 = result;
  if (a5)
  {
    v25 = *a5;
    if ((int)v25 > a8)
    {
      v12 = *__error();
      v13 = _SILogForLogForCategory(14);
      v14 = 2 * (dword_1EF19FCC4 < 4);
      if (!os_log_type_enabled(v13, v14))
        goto LABEL_11;
      v26 = *a5;
      *(_DWORD *)buf = 67109376;
      v74 = v26;
      v75 = 1024;
      LODWORD(v76) = a8;
      goto LABEL_10;
    }
    if (!*(_QWORD *)(a7 + 8 * v25))
      return result;
  }
  if (a6)
  {
    v27 = *a6;
    if ((int)v27 > a8)
    {
      v28 = *__error();
      v29 = _SILogForLogForCategory(14);
      v30 = 2 * (dword_1EF19FCC4 < 4);
      if (!os_log_type_enabled(v29, v30))
      {
LABEL_24:
        result = __error();
        *result = v28;
        return result;
      }
      v31 = *a6;
      *(_DWORD *)buf = 67109376;
      v74 = v31;
      v75 = 1024;
      LODWORD(v76) = a8;
      v32 = "%d index greater than fetched attribute count %d";
      v33 = v29;
      v34 = v30;
      v35 = 14;
LABEL_23:
      _os_log_impl(&dword_1B8270000, v33, v34, v32, buf, v35);
      goto LABEL_24;
    }
    if (!*(_QWORD *)(a7 + 8 * v27))
      return result;
  }
  v71 = 0;
  __s = 0;
  v69 = 0;
  v70 = 0;
  v67 = 0;
  v68 = 0;
  v65 = 0;
  v66 = 0;
  if (db_get_field_by_id(result, (uint64_t)a2, v18, (unint64_t *)&v71, (unint64_t *)&__s)
    || a3[2] != *v71)
  {
    v40 = *__error();
    v41 = _SILogForLogForCategory(14);
    v42 = 2 * (dword_1EF19FCC4 < 4);
    if (!os_log_type_enabled(v41, v42))
    {
LABEL_52:
      result = __error();
      *result = v40;
      return result;
    }
    v43 = *a3;
    v44 = *a2;
    *(_DWORD *)buf = 67109376;
    v74 = v43;
    v75 = 2048;
    v76 = v44;
LABEL_51:
    _os_log_impl(&dword_1B8270000, v41, v42, "[Pommes_Suggestions]debug: Cannot get/process attribute %d for oid %lld.", buf, 0x12u);
    goto LABEL_52;
  }
  result = (int *)db_get_field_by_id(v24, (uint64_t)a2, *(int **)(a7 + 8 * *a4), (unint64_t *)&v69, &v70);
  if ((_DWORD)result || a4[2] != *v69)
  {
    v40 = *__error();
    v41 = _SILogForLogForCategory(14);
    v42 = 2 * (dword_1EF19FCC4 < 4);
    if (!os_log_type_enabled(v41, v42))
      goto LABEL_52;
    v45 = *a4;
    v46 = *a2;
    *(_DWORD *)buf = 67109376;
    v74 = v45;
    v75 = 2048;
    v76 = v46;
    goto LABEL_51;
  }
  if (a5)
  {
    result = (int *)db_get_field_by_id(v24, (uint64_t)a2, *(int **)(a7 + 8 * *a5), (unint64_t *)&v67, (unint64_t *)&v68);
    if ((_DWORD)result || a5[2] != *v67)
    {
      v40 = *__error();
      v41 = _SILogForLogForCategory(14);
      v42 = 2 * (dword_1EF19FCC4 < 4);
      if (!os_log_type_enabled(v41, v42))
        goto LABEL_52;
      v47 = *a5;
      v48 = *a2;
      *(_DWORD *)buf = 67109376;
      v74 = v47;
      v75 = 2048;
      v76 = v48;
      goto LABEL_51;
    }
  }
  if (a6)
  {
    result = (int *)db_get_field_by_id(v24, (uint64_t)a2, *(int **)(a7 + 8 * *a6), (unint64_t *)&v65, (unint64_t *)&v66);
    if ((_DWORD)result || a6[2] != *v65)
    {
      v28 = *__error();
      v49 = _SILogForLogForCategory(14);
      v50 = 2 * (dword_1EF19FCC4 < 4);
      if (!os_log_type_enabled(v49, v50))
        goto LABEL_24;
      v51 = *a6;
      v52 = *a2;
      *(_DWORD *)buf = 67109376;
      v74 = v51;
      v75 = 2048;
      v76 = v52;
      v32 = "[Pommes_Suggestions]debug: Cannot get/process attribute %d for oid %lld.";
      v33 = v49;
      v34 = v50;
      v35 = 18;
      goto LABEL_23;
    }
  }
  if (v71)
  {
    if ((v71[1] & 0x20) != 0)
    {
      if (v69)
      {
        if ((v69[1] & 0x20) != 0)
        {
          v36 = v68;
          if (!v68 || (v67[1] & 0x20) != 0)
          {
            v37 = v66;
            if (!v66 || (v65[1] & 0x20) != 0)
            {
              buf[0] = 0;
              v38 = *((unsigned int *)v71 + 2);
              if ((_DWORD)v38)
              {
                if (*v71 == 11 && *v69 == 10)
                {
                  v39 = (int *)__s;
                  v63 = v70;
                  if (v68)
                    v62 = (unint64_t)&v68[*((unsigned int *)v67 + 2)];
                  else
                    v62 = 0;
                  v53 = 0;
                  v64 = &__s[v38];
                  while (1)
                  {
                    if (v39 >= (int *)v64)
                      return result;
                    v54 = *(double *)(v63 + 8 * v53);
                    if ((v71[1] & 0x10) != 0)
                    {
                      result = (int *)db_get_string_for_id_locked(v24, *v39);
                      if (!result)
                        return result;
                      v57 = result;
                      v55 = strlen((const char *)result);
                      v56 = 4;
                    }
                    else
                    {
                      v55 = strlen((const char *)v39);
                      v56 = v55 + 1;
                      v57 = v39;
                    }
                    result = (int *)(*(uint64_t (**)(uint64_t, int *, size_t, _QWORD, _QWORD, uint64_t, uint8_t *, double))(a9 + 16))(a9, v57, v55, 0, 0, v53, buf, v54);
                    v58 = buf[0];
                    if (buf[0])
                      return result;
                    if (v36 && v37 && (unint64_t)v36 < v62)
                      break;
LABEL_77:
                    v39 = (int *)((char *)v39 + v56);
                    ++v53;
                    if (v58)
                      return result;
                  }
                  if (*v37 >= 1)
                  {
                    if ((v67[1] & 0x10) == 0)
                    {
                      v59 = strlen(v36);
                      v60 = v59 + 1;
                      v61 = (void *)v36;
LABEL_75:
                      v36 += v60;
                      result = (int *)(*(uint64_t (**)(uint64_t, int *, size_t, void *, size_t, uint64_t, uint8_t *, double))(a9 + 16))(a9, v57, v55, v61, v59, v53, buf, v54);
                      goto LABEL_76;
                    }
                    result = (int *)db_get_string_for_id_locked(v24, *(_DWORD *)v36);
                    if (result)
                    {
                      v61 = result;
                      v59 = strlen((const char *)result);
                      v60 = 4;
                      goto LABEL_75;
                    }
                  }
LABEL_76:
                  ++v37;
                  v58 = buf[0];
                  goto LABEL_77;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[5];

  v6 = *(_QWORD *)(*(_QWORD *)(result + 112) + 8);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 != -1 && v7 >= a6)
  {
    if (a5)
    {
      v11 = *(_QWORD *)(result + 128);
      v12 = *(_QWORD *)(result + 120) + 264;
      v13 = *(_QWORD *)(result + 136);
      v14 = *(_QWORD *)(result + 144);
      v15 = *(_QWORD *)(result + 152);
      v16 = *(_QWORD *)(result + 160);
      v17 = *(_BYTE *)(result + 184);
      v18 = *(_OWORD *)(result + 80);
      v20[2] = *(_OWORD *)(result + 64);
      v20[3] = v18;
      v20[4] = *(_OWORD *)(result + 96);
      v19 = *(_OWORD *)(result + 48);
      v20[0] = *(_OWORD *)(result + 32);
      v20[1] = v19;
      return _SIPommesSuggestionsProcessTopicAttribute(v12, v11, v13, v14, v15, a4, a5, 0, 0, v16, v17, 0, 22, v20, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
    }
  }
  else
  {
    *(_QWORD *)(v6 + 24) = a6;
  }
  return result;
}

int *SIPommesDBOGetIntValue(int *result, uint64_t *a2, int *a3, uint64_t a4, int a5, _DWORD *a6)
{
  uint64_t v8;
  int v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  int *v17;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  _WORD *v24;
  _DWORD *v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a3 || (v8 = *a3, (int)v8 > a5))
  {
    v9 = *__error();
    v10 = _SILogForLogForCategory(14);
    v11 = 2 * (dword_1EF19FCC4 < 4);
    if (!os_log_type_enabled(v10, v11))
    {
LABEL_6:
      result = __error();
      *result = v9;
      return result;
    }
    v12 = *a3;
    *(_DWORD *)buf = 67109376;
    v27 = v12;
    v28 = 1024;
    LODWORD(v29) = a5;
    v13 = "%d index greater than fetched attribute count %d";
    v14 = v10;
    v15 = v11;
    v16 = 14;
LABEL_5:
    _os_log_impl(&dword_1B8270000, v14, v15, v13, buf, v16);
    goto LABEL_6;
  }
  v17 = *(int **)(a4 + 8 * v8);
  if (v17)
  {
    v24 = 0;
    v25 = 0;
    result = (int *)db_get_field_by_id(result, (uint64_t)a2, v17, (unint64_t *)&v24, (unint64_t *)&v25);
    if ((_DWORD)result || *v24 != 7)
    {
      v9 = *__error();
      v20 = _SILogForLogForCategory(14);
      v21 = 2 * (dword_1EF19FCC4 < 4);
      if (!os_log_type_enabled(v20, v21))
        goto LABEL_6;
      v22 = *a3;
      v23 = *a2;
      *(_DWORD *)buf = 67109376;
      v27 = v22;
      v28 = 2048;
      v29 = v23;
      v13 = "[Pommes_Suggestions]debug: Cannot get/process attribute %d for oid %lld.";
      v14 = v20;
      v15 = v21;
      v16 = 18;
      goto LABEL_5;
    }
    if (a6)
      *a6 = *v25;
  }
  return result;
}

uint64_t ___ZL38SIPommesSpotlightSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_3(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[5];

  v6 = *(_QWORD *)(*(_QWORD *)(result + 112) + 8);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 == -1 || v7 < a6)
  {
    *(_QWORD *)(v6 + 24) = a6;
    v12 = *(_QWORD *)(result + 128);
    v13 = *(_QWORD *)(result + 120) + 304;
    v14 = *(_QWORD *)(result + 136);
    v15 = *(_QWORD *)(result + 144);
    v16 = *(_QWORD *)(result + 152);
    v17 = *(_QWORD *)(result + 160);
    v18 = *(_BYTE *)(result + 184);
    v19 = *(_OWORD *)(result + 80);
    v21[2] = *(_OWORD *)(result + 64);
    v21[3] = v19;
    v21[4] = *(_OWORD *)(result + 96);
    v20 = *(_OWORD *)(result + 48);
    v21[0] = *(_OWORD *)(result + 32);
    v21[1] = v20;
    return _SIPommesSuggestionsProcessTopicAttribute(v13, v12, v14, v15, v16, a2, a3, a4, a5, v17, v18, 0, 23, v21, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
  }
  return result;
}

uint64_t ___ZL44SIPommesSpotlightSearchSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[5];

  v6 = *(_QWORD *)(*(_QWORD *)(result + 112) + 8);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 != -1 && v7 >= a6)
  {
    if (a5)
    {
      v11 = *(_QWORD *)(result + 128);
      v12 = *(_QWORD *)(result + 120) + 264;
      v13 = *(_QWORD *)(result + 136);
      v14 = *(_QWORD *)(result + 144);
      v15 = *(_QWORD *)(result + 152);
      v16 = *(_QWORD *)(result + 160);
      v17 = *(_BYTE *)(result + 184);
      v18 = *(_OWORD *)(result + 80);
      v20[2] = *(_OWORD *)(result + 64);
      v20[3] = v18;
      v20[4] = *(_OWORD *)(result + 96);
      v19 = *(_OWORD *)(result + 48);
      v20[0] = *(_OWORD *)(result + 32);
      v20[1] = v19;
      return _SIPommesSuggestionsProcessTopicAttribute(v12, v11, v13, v14, v15, a4, a5, 0, 0, v16, v17, 0, 21, v20, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
    }
  }
  else
  {
    *(_QWORD *)(v6 + 24) = a6;
  }
  return result;
}

uint64_t ___ZL44SIPommesSpotlightSearchSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[5];

  v6 = *(_QWORD *)(*(_QWORD *)(result + 112) + 8);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 != -1 && v7 >= a6)
  {
    if (a5)
    {
      v11 = *(_QWORD *)(result + 128);
      v12 = *(_QWORD *)(result + 120) + 264;
      v13 = *(_QWORD *)(result + 136);
      v14 = *(_QWORD *)(result + 144);
      v15 = *(_QWORD *)(result + 152);
      v16 = *(_QWORD *)(result + 160);
      v17 = *(_BYTE *)(result + 184);
      v18 = *(_OWORD *)(result + 80);
      v20[2] = *(_OWORD *)(result + 64);
      v20[3] = v18;
      v20[4] = *(_OWORD *)(result + 96);
      v19 = *(_OWORD *)(result + 48);
      v20[0] = *(_OWORD *)(result + 32);
      v20[1] = v19;
      return _SIPommesSuggestionsProcessTopicAttribute(v12, v11, v13, v14, v15, a4, a5, 0, 0, v16, v17, 0, 22, v20, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
    }
  }
  else
  {
    *(_QWORD *)(v6 + 24) = a6;
  }
  return result;
}

uint64_t ___ZL44SIPommesSpotlightSearchSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_3(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[5];

  v6 = *(_QWORD *)(*(_QWORD *)(result + 112) + 8);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 == -1 || v7 < a6)
  {
    *(_QWORD *)(v6 + 24) = a6;
    v12 = *(_QWORD *)(result + 128);
    v13 = *(_QWORD *)(result + 120) + 304;
    v14 = *(_QWORD *)(result + 136);
    v15 = *(_QWORD *)(result + 144);
    v16 = *(_QWORD *)(result + 152);
    v17 = *(_QWORD *)(result + 160);
    v18 = *(_BYTE *)(result + 184);
    v19 = *(_OWORD *)(result + 80);
    v21[2] = *(_OWORD *)(result + 64);
    v21[3] = v19;
    v21[4] = *(_OWORD *)(result + 96);
    v20 = *(_OWORD *)(result + 48);
    v21[0] = *(_OWORD *)(result + 32);
    v21[1] = v20;
    return _SIPommesSuggestionsProcessTopicAttribute(v13, v12, v14, v15, v16, a2, a3, a4, a5, v17, v18, 0, 23, v21, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
  }
  return result;
}

void SIPommesDBOFieldIterator(uint64_t a1, unsigned int a2, const void *a3, int *a4, uint64_t *a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v12;
  int *v13;
  __int128 v14;
  int *v15;
  int v16;
  int v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  size_t v25;
  size_t v26;
  size_t v27;
  int v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  int v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  const char *v40;
  int v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  unsigned __int16 v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  int *v50;
  size_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  size_t v55;
  BOOL v56;
  unint64_t v57;
  char *v58;
  char v59;
  char *v60;
  int v61;
  const char *string_for_id_locked;
  char *v63;
  uint8_t v64;
  int v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  _QWORD v69[2];
  __int128 v70;
  int v71;
  int *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  size_t v78;
  char *__s;
  unsigned __int16 *v80;
  uint8_t v81[1000];
  uint8_t buf[4];
  _BYTE v83[14];
  uint64_t v84;

  v72 = a4;
  v73 = a8;
  v75 = a5;
  v77 = a1;
  v69[1] = v69;
  v84 = *MEMORY[0x1E0C80C00];
  __s = 0;
  v80 = 0;
  bzero(v81, 0x3E8uLL);
  v12 = 0;
  v13 = 0;
  v76 = a2;
  *(_QWORD *)&v14 = 67109376;
  v74 = v14;
  *(_QWORD *)&v14 = 134217984;
  v70 = v14;
  v71 = a7;
  do
  {
    v15 = (int *)(v77 + 16 * v12);
    v16 = *v15;
    if (*v15 > a7)
    {
      v17 = *__error();
      v18 = _SILogForLogForCategory(14);
      v19 = 2 * (dword_1EF19FCC4 < 4);
      if (os_log_type_enabled(v18, v19))
      {
        *(_DWORD *)buf = v74;
        *(_DWORD *)v83 = v16;
        *(_WORD *)&v83[4] = 1024;
        *(_DWORD *)&v83[6] = a7;
        _os_log_impl(&dword_1B8270000, v18, v19, "%d index greater than fetched attribute count %d", buf, 0xEu);
      }
      *__error() = v17;
      goto LABEL_62;
    }
    v20 = v16;
    v21 = *(int **)(a6 + 8 * v16);
    if (!v21)
      goto LABEL_62;
    v22 = v15[2];
    v23 = *((_BYTE *)v15 + 12);
    if (a3 && (v15[1] & 1) != 0)
    {
      v78 = 0;
      __s = (char *)v81;
      if (!doc_store_get_document(a3, *v75, (uint64_t)v81, (uint64_t)&v78))
      {
        if (v78)
        {
          v41 = (char)v81[v78 - 1];
          if (v41 < 0)
          {
            if ((v41 + 62) > 0x32u)
            {
              if (v81[v78 - 1] <= 0xBFu)
              {
                v57 = v81[v78 - 2];
                if ((v57 + 32) > 0x14u)
                {
                  if ((char)v57 <= -65)
                  {
                    v64 = v81[v78 - 3];
                    if ((v64 + 16) <= 4u && ((byte_1B86307F2[v57 >> 4] >> (v64 & 7)) & 1) != 0)
                      v78 -= 3;
                  }
                }
                else
                {
                  v56 = v57 > 0xEF;
                  v58 = (char *)&byte_1B86307F2[(unint64_t)v81[v78 - 1] >> 4];
                  v59 = v57 & 7;
                  v60 = &a00000000000000[v57 & 0xF];
                  v61 = v81[v78 - 1] >> 5;
                  if (v56)
                    LOBYTE(v61) = v59;
                  else
                    v58 = v60;
                  if (((*v58 >> v61) & 1) != 0)
                    v78 -= 2;
                }
              }
            }
            else
            {
              --v78;
            }
          }
        }
        v65 = *__error();
        v66 = _SILogForLogForCategory(8);
        v67 = 2 * (dword_1EF19FCAC < 4);
        if (os_log_type_enabled(v66, v67))
        {
          v68 = *v75;
          *(_DWORD *)buf = v70;
          *(_QWORD *)v83 = v68;
          _os_log_impl(&dword_1B8270000, v66, v67, "Get snippet from doc store for oid %lld", buf, 0xCu);
        }
        *__error() = v65;
        v26 = v78;
        v47 = __s;
        v46 = *(_QWORD *)(v73 + 24);
        goto LABEL_61;
      }
      v21 = *(int **)(a6 + 8 * v16);
    }
    if (db_get_field_by_id(v72, (uint64_t)v75, v21, (unint64_t *)&v80, (unint64_t *)&__s)
      || (v24 = v80, v22 != *v80))
    {
      v32 = a3;
      v33 = a6;
      v34 = *__error();
      v35 = _SILogForLogForCategory(14);
      v36 = 2 * (dword_1EF19FCC4 < 4);
      if (!os_log_type_enabled(v35, v36))
      {
LABEL_22:
        *__error() = v34;
        if ((v23 & 1) != 0)
          std::function<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(*(_QWORD *)(v73 + 24), (uint64_t)v13, 0, v16, 0);
        a6 = v33;
        a3 = v32;
        a7 = v71;
        goto LABEL_62;
      }
      v37 = *v75;
      *(_DWORD *)buf = v74;
      *(_DWORD *)v83 = v16;
      *(_WORD *)&v83[4] = 2048;
      *(_QWORD *)&v83[6] = v37;
      v38 = v35;
      v39 = v36;
      v40 = "[Pommes_Suggestions]debug: Cannot get/process attribute %d for oid %lld.";
LABEL_21:
      _os_log_impl(&dword_1B8270000, v38, v39, v40, buf, 0x12u);
      goto LABEL_22;
    }
    v25 = strlen(__s);
    if (!v25)
    {
      v32 = a3;
      v33 = a6;
      v34 = *__error();
      v42 = _SILogForLogForCategory(14);
      v43 = 2 * (dword_1EF19FCC4 < 4);
      if (!os_log_type_enabled(v42, v43))
        goto LABEL_22;
      v44 = *v75;
      *(_DWORD *)buf = v74;
      *(_DWORD *)v83 = v16;
      *(_WORD *)&v83[4] = 2048;
      *(_QWORD *)&v83[6] = v44;
      v38 = v42;
      v39 = v43;
      v40 = "[Pommes_Suggestions]debug: Cannot get attribute %d for oid %lld.";
      goto LABEL_21;
    }
    v26 = v25;
    if (v16 == 5)
    {
      v27 = v25;
      v28 = *__error();
      v29 = _SILogForLogForCategory(8);
      v30 = 2 * (dword_1EF19FCAC < 4);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = *v75;
        *(_DWORD *)buf = v70;
        *(_QWORD *)v83 = v31;
        _os_log_impl(&dword_1B8270000, v29, v30, "Get snippet from SDB for oid %lld", buf, 0xCu);
      }
      *__error() = v28;
      v13 = (int *)__s;
      v24 = v80;
      v26 = v27;
      if (!v80)
        goto LABEL_34;
    }
    else
    {
      v13 = (int *)__s;
    }
    v45 = v24[1];
    if ((v45 & 0x20) == 0)
    {
      if ((v45 & 0x10) != 0)
      {
        string_for_id_locked = (const char *)db_get_string_for_id_locked(v72, *(_DWORD *)((char *)v24 + 13));
        if (!string_for_id_locked)
          goto LABEL_62;
        v63 = (char *)string_for_id_locked;
        v26 = strlen(string_for_id_locked);
        v46 = *(_QWORD *)(v73 + 24);
        v47 = v63;
      }
      else
      {
LABEL_34:
        v46 = *(_QWORD *)(v73 + 24);
        v47 = (char *)v13;
      }
LABEL_61:
      std::function<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(v46, (uint64_t)v47, v26, v20, 0);
      goto LABEL_62;
    }
    v48 = *((unsigned int *)v24 + 2);
    if ((_DWORD)v48)
    {
      v49 = 0;
      v50 = (int *)((char *)v13 + v48);
      do
      {
        if ((v80[1] & 0x10) != 0)
        {
          v53 = (const char *)db_get_string_for_id_locked(v72, *v13);
          if (!v53)
            break;
          v54 = (uint64_t)v53;
          v55 = strlen(v53);
          std::function<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(*(_QWORD *)(v73 + 24), v54, v55, v20, v49);
          v52 = 4;
        }
        else
        {
          v51 = strlen((const char *)v13);
          std::function<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(*(_QWORD *)(v73 + 24), (uint64_t)v13, v51, v20, v49);
          v52 = v51 + 1;
        }
        v13 = (int *)((char *)v13 + v52);
        if (v13 >= v50)
          break;
        v56 = v49++ > 0x63;
      }
      while (!v56);
    }
LABEL_62:
    ++v12;
  }
  while (v12 != v76);
}

void std::vector<_peopleMatchInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::allocator<_peopleMatchInfo>::destroy[abi:nn180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t ___ZL42SIPommesSpotlightMailSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[5];

  v6 = *(_QWORD *)(*(_QWORD *)(result + 112) + 8);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 != -1 && v7 >= a6)
  {
    if (a5)
    {
      v11 = *(_QWORD *)(result + 128);
      v12 = *(_QWORD *)(result + 120) + 264;
      v13 = *(_QWORD *)(result + 136);
      v14 = *(_QWORD *)(result + 144);
      v15 = *(_QWORD *)(result + 152);
      v16 = *(_QWORD *)(result + 160);
      v17 = *(_BYTE *)(result + 184);
      v18 = *(_OWORD *)(result + 80);
      v20[2] = *(_OWORD *)(result + 64);
      v20[3] = v18;
      v20[4] = *(_OWORD *)(result + 96);
      v19 = *(_OWORD *)(result + 48);
      v20[0] = *(_OWORD *)(result + 32);
      v20[1] = v19;
      return _SIPommesSuggestionsProcessTopicAttribute(v12, v11, v13, v14, v15, a4, a5, 0, 0, v16, v17, 0, 21, v20, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
    }
  }
  else
  {
    *(_QWORD *)(v6 + 24) = a6;
  }
  return result;
}

uint64_t ___ZL42SIPommesSpotlightMailSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[5];

  v6 = *(_QWORD *)(*(_QWORD *)(result + 112) + 8);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 != -1 && v7 >= a6)
  {
    if (a5)
    {
      v11 = *(_QWORD *)(result + 128);
      v12 = *(_QWORD *)(result + 120) + 264;
      v13 = *(_QWORD *)(result + 136);
      v14 = *(_QWORD *)(result + 144);
      v15 = *(_QWORD *)(result + 152);
      v16 = *(_QWORD *)(result + 160);
      v17 = *(_BYTE *)(result + 184);
      v18 = *(_OWORD *)(result + 80);
      v20[2] = *(_OWORD *)(result + 64);
      v20[3] = v18;
      v20[4] = *(_OWORD *)(result + 96);
      v19 = *(_OWORD *)(result + 48);
      v20[0] = *(_OWORD *)(result + 32);
      v20[1] = v19;
      return _SIPommesSuggestionsProcessTopicAttribute(v12, v11, v13, v14, v15, a4, a5, 0, 0, v16, v17, 0, 22, v20, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
    }
  }
  else
  {
    *(_QWORD *)(v6 + 24) = a6;
  }
  return result;
}

uint64_t _SIPommesSuggestionsProcessTopicAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12, int a13, _OWORD *a14, unsigned int a15, char a16, char a17)
{
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  int32_t v25;
  char *v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  void **v44;
  __int128 v45;
  __int128 v46;
  __int128 v48;
  __int128 v49;
  os_unfair_lock_s *lock;
  char *v51;
  uint64_t v52;
  _OWORD v53[5];
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  _OWORD v58[5];
  void *__p[2];
  char v60;
  _QWORD v61[2];
  char v62;
  _OWORD v63[5];
  void *v64[2];
  char v65;
  _QWORD v66[2];
  char v67;
  _OWORD v68[5];
  void *v69[2];
  char v70;
  _QWORD v71[2];
  char v72;
  _DWORD v73[3];
  uint64_t v74;
  _QWORD v75[3];
  _BYTE v76[62072];
  uint64_t v77;

  v17 = MEMORY[0x1E0C80A78](a1);
  v25 = v23;
  v26 = v22;
  v27 = v20;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v34 = v18;
  v35 = v17;
  v77 = *MEMORY[0x1E0C80C00];
  if ((a12 & 1) != 0)
  {
    if (v23 && a9)
    {
      v36 = v24;
      std::string::basic_string[abi:nn180100]<0>(v61, v22);
      std::string::basic_string[abi:nn180100]<0>(__p, v36);
      v37 = a14[3];
      v58[2] = a14[2];
      v58[3] = v37;
      v58[4] = a14[4];
      v38 = a14[1];
      v58[0] = *a14;
      v58[1] = v38;
      _AccumulateTopicCandidates(v35, v34, (uint64_t)v61, (uint64_t)__p, a13, (uint64_t)v58, *(_QWORD *)(v27 + 24), a15, v33, v31, v29, a16, a17, 1);
      if (v60 < 0)
        operator delete(__p[0]);
      if ((v62 & 0x80000000) == 0)
        return 1;
      v39 = (void *)v61[0];
    }
    else
    {
      if (!v23)
        return 1;
      std::string::basic_string[abi:nn180100]<0>(v56, v22);
      std::string::basic_string[abi:nn180100]<0>(v54, "");
      v45 = a14[3];
      v53[2] = a14[2];
      v53[3] = v45;
      v53[4] = a14[4];
      v46 = a14[1];
      v53[0] = *a14;
      v53[1] = v46;
      _AccumulateTopicCandidates(v35, v34, (uint64_t)v56, (uint64_t)v54, a13, (uint64_t)v53, *(_QWORD *)(v27 + 24), a15, v33, v31, v29, a16, a17, 1);
      if (v55 < 0)
        operator delete(v54[0]);
      if ((v57 & 0x80000000) == 0)
        return 1;
      v39 = v56[0];
    }
LABEL_22:
    operator delete(v39);
    return 1;
  }
  if (*(_QWORD *)(v20 + 32))
  {
    v40 = v21;
    v41 = v19;
    v51 = v24;
    v52 = v17;
    lock = v18;
    v73[0] = 0;
    bzero(v76, 0xF278uLL);
    v75[0] = *(_QWORD *)(v27 + 88);
    v75[1] = a10;
    v75[2] = 0;
    v76[62064] = a11;
    pommesSuggestionsTokenizeString(v41, v26, v25, (unsigned __int16 *)v73 + 1, (unsigned __int16 *)v73, (uint64_t)v75, 1, 1, 0, (uint64_t)pommesSuggestionsGetTokenCallback, 0, 4u);
    if (HIWORD(v73[0]))
    {
      v74 = 0;
      *(_QWORD *)&v73[1] = 0;
      if (v40 && icu_search_match())
      {
        std::string::basic_string[abi:nn180100]<0>(v71, v26);
        std::string::basic_string[abi:nn180100]<0>(v69, "");
        v42 = a14[3];
        v68[2] = a14[2];
        v68[3] = v42;
        v68[4] = a14[4];
        v43 = a14[1];
        v68[0] = *a14;
        v68[1] = v43;
        _AccumulateTopicCandidates(v52, lock, (uint64_t)v71, (uint64_t)v69, a13, (uint64_t)v68, *(_QWORD *)(v27 + 24), a15, v33, v31, v29, a16, a17, HIWORD(v73[0]));
        if (v70 < 0)
          operator delete(v69[0]);
        if ((v72 & 0x80000000) == 0)
          return 1;
        v44 = (void **)v71;
        goto LABEL_16;
      }
      if (v51)
      {
        if (a9)
        {
          pommesSuggestionsTokenizeString(v41, v51, a9, (unsigned __int16 *)v73 + 1, (unsigned __int16 *)v73, (uint64_t)v75, 1, 1, 0, (uint64_t)pommesSuggestionsGetTokenCallback, 0, 4u);
          if (HIWORD(v73[0]))
          {
            v74 = 0;
            *(_QWORD *)&v73[1] = 0;
            if (v40)
            {
              if (icu_search_match())
              {
                std::string::basic_string[abi:nn180100]<0>(v66, v26);
                std::string::basic_string[abi:nn180100]<0>(v64, v51);
                v48 = a14[3];
                v63[2] = a14[2];
                v63[3] = v48;
                v63[4] = a14[4];
                v49 = a14[1];
                v63[0] = *a14;
                v63[1] = v49;
                _AccumulateTopicCandidates(v52, lock, (uint64_t)v66, (uint64_t)v64, a13, (uint64_t)v63, *(_QWORD *)(v27 + 24), a15, v33, v31, v29, a16, a17, HIWORD(v73[0]));
                if (v65 < 0)
                  operator delete(v64[0]);
                if ((v67 & 0x80000000) == 0)
                  return 1;
                v44 = (void **)v66;
LABEL_16:
                v39 = *v44;
                goto LABEL_22;
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

void _AccumulateTopicCandidates(uint64_t a1, os_unfair_lock_t lock, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, unsigned int a8, double a9, double a10, double a11, char a12, char a13, uint64_t a14)
{
  char v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 **v45;
  unsigned __int8 *i;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  std::string *v50;
  float v51;
  float v52;
  _BOOL8 v53;
  unint64_t v54;
  unint64_t v55;
  size_t v56;
  uint64_t v57;
  _QWORD *v58;
  os_unfair_lock_s *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void **v65;
  char *v66;
  unint64_t v67;
  _QWORD *v68;
  std::string *v69;
  float v70;
  float v71;
  _BOOL8 v73;
  unint64_t v74;
  unint64_t v75;
  size_t v76;
  uint64_t v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  float64x2_t v81;
  unint64_t v82;
  unint64_t v83;
  _OWORD *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  std::string::size_type v89;
  const std::string::value_type *v90;
  int v91;
  unint64_t v92;
  std::string::size_type v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;

  os_unfair_lock_lock(lock);
  v18 = *(_BYTE *)(a3 + 23);
  v91 = v18;
  v89 = *(_QWORD *)(a3 + 8);
  v90 = *(const std::string::value_type **)a3;
  if (v18 >= 0)
    v19 = (uint64_t *)a3;
  else
    v19 = *(uint64_t **)a3;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a3 + 23);
  else
    v20 = *(_QWORD *)(a3 + 8);
  v21 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v19, v20);
  v22 = *(_QWORD *)(a1 + 8);
  if (!v22)
    goto LABEL_24;
  v23 = v21;
  v24 = (uint8x8_t)vcnt_s8((int8x8_t)v22);
  v24.i16[0] = vaddlv_u8(v24);
  v25 = v24.u32[0];
  if (v24.u32[0] > 1uLL)
  {
    v26 = v21;
    if (v21 >= v22)
      v26 = v21 % v22;
  }
  else
  {
    v26 = (v22 - 1) & v21;
  }
  v88 = *(_QWORD *)a1;
  v27 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v26);
  if (!v27 || (v28 = *v27) == 0)
  {
LABEL_24:
    v30 = operator new();
    *(_QWORD *)(v30 + 152) = 0;
    *(_QWORD *)(v30 + 144) = v30 + 152;
    *(_QWORD *)(v30 + 160) = 0;
    *(_QWORD *)(v30 + 176) = 0;
    *(_QWORD *)(v30 + 168) = v30 + 176;
    *(_QWORD *)(v30 + 184) = 0;
    *(_DWORD *)(v30 + 112) = 1;
    *(_DWORD *)(v30 + 136) = a5;
    *(_QWORD *)(v30 + 128) = a14;
    v31 = *(_OWORD *)(a6 + 48);
    *(_OWORD *)(v30 + 32) = *(_OWORD *)(a6 + 32);
    *(_OWORD *)(v30 + 48) = v31;
    *(_OWORD *)(v30 + 64) = *(_OWORD *)(a6 + 64);
    v32 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)v30 = *(_OWORD *)a6;
    *(_OWORD *)(v30 + 16) = v32;
    *(_BYTE *)(v30 + 80) = a12;
    *(_BYTE *)(v30 + 81) = a13;
    *(double *)(v30 + 96) = a10;
    *(double *)(v30 + 104) = a11;
    *(double *)(v30 + 88) = a9;
    if (*(char *)(a3 + 23) < 0)
      v33 = *(_QWORD *)(a3 + 8);
    else
      LODWORD(v33) = *(unsigned __int8 *)(a3 + 23);
    *(_DWORD *)(v30 + 116) = v33;
    *(_QWORD *)(v30 + 120) = a7;
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)(v30 + 144), a8, a8);
    if (*(char *)(a4 + 23) < 0)
    {
      if (!*(_QWORD *)(a4 + 8))
      {
LABEL_30:
        v34 = *(char *)(a3 + 23);
        v35 = *(const std::string::value_type **)a3;
        v36 = *(_QWORD *)(a3 + 8);
        if (v34 >= 0)
          v37 = (uint64_t *)a3;
        else
          v37 = *(uint64_t **)a3;
        if (v34 >= 0)
          v38 = *(unsigned __int8 *)(a3 + 23);
        else
          v38 = *(_QWORD *)(a3 + 8);
        v39 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v37, v38);
        v40 = v39;
        v41 = *(_QWORD *)(a1 + 8);
        v100 = v36;
        if (v41)
        {
          v42 = (uint8x8_t)vcnt_s8((int8x8_t)v41);
          v42.i16[0] = vaddlv_u8(v42);
          v43 = v42.u32[0];
          if (v42.u32[0] > 1uLL)
          {
            v44 = v39;
            if (v39 >= v41)
              v44 = v39 % v41;
          }
          else
          {
            v44 = (v41 - 1) & v39;
          }
          v45 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v44);
          if (v45)
          {
            for (i = *v45; i; i = *(unsigned __int8 **)i)
            {
              v47 = *((_QWORD *)i + 1);
              if (v47 == v40)
              {
                if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a3))
                  std::default_delete<_topicCandidate>::operator()[abi:nn180100](v30);
              }
              else
              {
                if (v43 > 1)
                {
                  if (v47 >= v41)
                    v47 %= v41;
                }
                else
                {
                  v47 &= v41 - 1;
                }
                if (v47 != v44)
                  break;
              }
            }
          }
        }
        else
        {
          v44 = 0;
        }
        v48 = (_QWORD *)(a1 + 16);
        v103 = 0;
        v49 = operator new(0x30uLL);
        v101 = (char *)v49;
        v102 = a1 + 16;
        *v49 = 0;
        v49[1] = v40;
        v50 = (std::string *)(v49 + 2);
        if (v34 < 0)
        {
          std::string::__init_copy_ctor_external(v50, v35, v100);
        }
        else
        {
          *(_OWORD *)&v50->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
          v49[4] = *(_QWORD *)(a3 + 16);
        }
        v49[5] = v30;
        LOBYTE(v103) = 1;
        v51 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
        v52 = *(float *)(a1 + 32);
        if (!v41 || (float)(v52 * (float)v41) < v51)
        {
          v53 = 1;
          if (v41 >= 3)
            v53 = (v41 & (v41 - 1)) != 0;
          v54 = v53 | (2 * v41);
          v55 = vcvtps_u32_f32(v51 / v52);
          if (v54 <= v55)
            v56 = v55;
          else
            v56 = v54;
          std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v56);
          v41 = *(_QWORD *)(a1 + 8);
          if ((v41 & (v41 - 1)) != 0)
          {
            if (v40 >= v41)
              v44 = v40 % v41;
            else
              v44 = v40;
          }
          else
          {
            v44 = (v41 - 1) & v40;
          }
        }
        v57 = *(_QWORD *)a1;
        v58 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v44);
        if (v58)
        {
          *v49 = *v58;
          v59 = lock;
        }
        else
        {
          *v49 = *v48;
          *v48 = v49;
          *(_QWORD *)(v57 + 8 * v44) = v48;
          v59 = lock;
          if (!*v49)
          {
LABEL_79:
            v101 = 0;
            ++*(_QWORD *)(a1 + 24);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,void *>>>>::reset[abi:nn180100]((uint64_t)&v101);
            goto LABEL_80;
          }
          v60 = *(_QWORD *)(*v49 + 8);
          if ((v41 & (v41 - 1)) != 0)
          {
            if (v60 >= v41)
              v60 %= v41;
          }
          else
          {
            v60 &= v41 - 1;
          }
          v58 = (_QWORD *)(*(_QWORD *)a1 + 8 * v60);
        }
        *v58 = v49;
        goto LABEL_79;
      }
    }
    else if (!*(_BYTE *)(a4 + 23))
    {
      goto LABEL_30;
    }
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v30 + 168), (_QWORD *)a4, a4);
    goto LABEL_30;
  }
  v92 = v22 - 1;
  while (1)
  {
    v29 = *((_QWORD *)v28 + 1);
    if (v29 == v23)
      break;
    if (v25 > 1)
    {
      if (v29 >= v22)
        v29 %= v22;
    }
    else
    {
      v29 &= v92;
    }
    if (v29 != v26)
      goto LABEL_24;
LABEL_23:
    v28 = *(unsigned __int8 **)v28;
    if (!v28)
      goto LABEL_24;
  }
  if (!std::equal_to<std::string>::operator()[abi:nn180100](v28 + 16, (unsigned __int8 *)a3))
    goto LABEL_23;
  v61 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v19, v20);
  v62 = v61;
  if (v25 > 1)
  {
    v63 = v61;
    v59 = lock;
    v64 = v88;
    if (v61 >= v22)
      v63 = v61 % v22;
  }
  else
  {
    v63 = v92 & v61;
    v59 = lock;
    v64 = v88;
  }
  v65 = *(void ***)(v64 + 8 * v63);
  if (v65)
  {
    v66 = (char *)*v65;
    if (*v65)
    {
      do
      {
        v67 = *((_QWORD *)v66 + 1);
        if (v67 == v62)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v66 + 16, (unsigned __int8 *)a3))
            goto LABEL_124;
        }
        else
        {
          if (v25 > 1)
          {
            if (v67 >= v22)
              v67 %= v22;
          }
          else
          {
            v67 &= v92;
          }
          if (v67 != v63)
            break;
        }
        v66 = *(char **)v66;
      }
      while (v66);
    }
  }
  v68 = (_QWORD *)(a1 + 16);
  v103 = 0;
  v66 = (char *)operator new(0x30uLL);
  v101 = v66;
  v102 = a1 + 16;
  *(_QWORD *)v66 = 0;
  *((_QWORD *)v66 + 1) = v62;
  v69 = (std::string *)(v66 + 16);
  if (v91 < 0)
  {
    std::string::__init_copy_ctor_external(v69, v90, v89);
  }
  else
  {
    *(_OWORD *)&v69->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v66 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_QWORD *)v66 + 5) = 0;
  v70 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  LOBYTE(v103) = 1;
  v71 = *(float *)(a1 + 32);
  if ((float)(v71 * (float)v22) < v70)
  {
    v73 = v22 < 3 || v25 > 1;
    v74 = v73 | (2 * v22);
    v75 = vcvtps_u32_f32(v70 / v71);
    if (v74 <= v75)
      v76 = v75;
    else
      v76 = v74;
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v76);
    v22 = *(_QWORD *)(a1 + 8);
    if ((v22 & (v22 - 1)) != 0)
    {
      if (v62 >= v22)
        v63 = v62 % v22;
      else
        v63 = v62;
    }
    else
    {
      v63 = (v22 - 1) & v62;
    }
  }
  v77 = *(_QWORD *)a1;
  v78 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v63);
  if (v78)
  {
    *(_QWORD *)v66 = *v78;
    goto LABEL_122;
  }
  *(_QWORD *)v66 = *v68;
  *v68 = v66;
  *(_QWORD *)(v77 + 8 * v63) = v68;
  if (*(_QWORD *)v66)
  {
    v79 = *(_QWORD *)(*(_QWORD *)v66 + 8);
    if ((v22 & (v22 - 1)) != 0)
    {
      if (v79 >= v22)
        v79 %= v22;
    }
    else
    {
      v79 &= v22 - 1;
    }
    v78 = (_QWORD *)(*(_QWORD *)a1 + 8 * v79);
LABEL_122:
    *v78 = v66;
  }
  v101 = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,void *>>>>::reset[abi:nn180100]((uint64_t)&v101);
LABEL_124:
  v80 = *((_QWORD *)v66 + 5);
  ++*(_DWORD *)(v80 + 112);
  v81.f64[0] = a9;
  v81.f64[1] = a10;
  *(int8x16_t *)(v80 + 88) = vbslq_s8((int8x16_t)vcgtq_f64(v81, *(float64x2_t *)(v80 + 88)), (int8x16_t)v81, *(int8x16_t *)(v80 + 88));
  if (a12)
    *(_BYTE *)(v80 + 80) = a12;
  if (a13)
    *(_BYTE *)(v80 + 81) = a13;
  std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)(v80 + 144), a8, a8);
  if (*(char *)(a4 + 23) < 0)
  {
    if (*(_QWORD *)(a4 + 8))
LABEL_130:
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(v80 + 168), (_QWORD *)a4, a4);
  }
  else if (*(_BYTE *)(a4 + 23))
  {
    goto LABEL_130;
  }
  if (*(_DWORD *)(v80 + 136) != a5)
    *(_DWORD *)(v80 + 136) = 1;
  v82 = (unint64_t)log((double)*(unint64_t *)(a6 + 8));
  v83 = (unint64_t)log((double)*(unint64_t *)(v80 + 8));
  if (v83 + (unint64_t)log((double)*(unint64_t *)v80) >= 2 * v82)
    v84 = (_OWORD *)v80;
  else
    v84 = (_OWORD *)a6;
  v85 = v84[4];
  v87 = v84[1];
  v86 = v84[2];
  *(_OWORD *)(v80 + 48) = v84[3];
  *(_OWORD *)(v80 + 64) = v85;
  *(_OWORD *)(v80 + 16) = v87;
  *(_OWORD *)(v80 + 32) = v86;
  *(_OWORD *)v80 = *v84;
LABEL_80:
  os_unfair_lock_unlock(v59);
}

uint64_t *std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(uint64_t *result, unsigned int a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  _QWORD *v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = result;
  v6 = (uint64_t **)(result + 1);
  v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (_QWORD *)v5;
        v8 = *(_DWORD *)(v5 + 28);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = result + 1;
LABEL_9:
    v9 = operator new(0x20uLL);
    v9[7] = a3;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v7;
    *v6 = (uint64_t *)v9;
    v10 = *(_QWORD *)*v4;
    if (v10)
    {
      *v4 = v10;
      v11 = *v6;
    }
    else
    {
      v11 = (uint64_t *)v9;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t *result;
  uint64_t *v11;
  std::string *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = v5 + 4;
        if (!std::less<std::string>::operator()[abi:nn180100](a2, v5 + 4))
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      result = (uint64_t *)std::less<std::string>::operator()[abi:nn180100](v8, a2);
      if (!(_DWORD)result)
        break;
      v9 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v11 = (uint64_t *)operator new(0x38uLL);
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v6;
    *v9 = v11;
    v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      v11 = *v9;
    }
    result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_topicCandidate>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

BOOL std::less<std::string>::operator()[abi:nn180100](_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

void std::allocator<_peopleMatchInfo>::destroy[abi:nn180100](uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 56);
  if (v3)
  {
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__function::__func<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x1BCCB06A4);
}

__n128 std::__function::__func<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0xA8uLL);
  *(_QWORD *)v2 = &off_1E6E2AAA0;
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)a2 = &off_1E6E2AAA0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  result = *(__n128 *)(a1 + 104);
  v7 = *(_OWORD *)(a1 + 120);
  v8 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 136) = v8;
  *(_OWORD *)(a2 + 120) = v7;
  *(__n128 *)(a2 + 104) = result;
  return result;
}

void std::__function::__func<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesMailSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,unsigned long const*,ci_rankingbits_s,unsigned int,char const*,char const**,__CFArray const*,BOOL,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(uint64_t a1, char **a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  int v20;
  double v21;
  int v22;
  CFArrayRef *v23;
  int v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  unint64_t v28;
  uint8_t buf[16];
  void *v30[2];
  __int128 v31;
  void *v32[2];
  __int128 v33;
  void *__p[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = *a3;
  v8 = *a4;
  v9 = *a5;
  v10 = *(_QWORD *)(a1 + 8);
  if (!(*a4 | *a3) && *(_QWORD *)(v10 + 8) == *(_QWORD *)v10)
  {
    v37 = 0;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    *(_OWORD *)__p = 0u;
    v31 = 0u;
    *(_OWORD *)v32 = 0u;
    *(_OWORD *)buf = 0u;
    *(_OWORD *)v30 = 0u;
    _peopleMatchInfo::_peopleMatchInfo((_peopleMatchInfo *)buf, *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32));
    MEMORY[0x1BCCB03B0](buf, "");
    std::vector<_peopleMatchInfo>::push_back[abi:nn180100](*(char ***)(a1 + 8), (__int128 *)buf);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v32[1])
    {
      *(void **)&v33 = v32[1];
      operator delete(v32[1]);
    }
    if (SHIBYTE(v31) < 0)
      operator delete(v30[1]);
    if (SHIBYTE(v30[0]) < 0)
      operator delete(*(void **)buf);
  }
  else
  {
    v11 = **(_QWORD **)(a1 + 24);
    v12 = **(os_unfair_lock_s ***)(a1 + 32);
    v13 = **(_QWORD **)(a1 + 40);
    v14 = **(_QWORD ***)(a1 + 16);
    v15 = **(_QWORD ***)(a1 + 48);
    v16 = **(_QWORD **)(a1 + 56);
    v17 = ***(_QWORD ***)(a1 + 72);
    v18 = **(char ***)(a1 + 96);
    v19 = **(unsigned __int8 **)(a1 + 104);
    v20 = **(unsigned __int8 **)(a1 + 112);
    v21 = **(double **)(a1 + 128);
    v22 = **(unsigned __int8 **)(a1 + 136);
    v23 = *(CFArrayRef **)(a1 + 152);
    v24 = **(unsigned __int8 **)(a1 + 144);
    switch(v8)
    {
      case 0uLL:
        _SIPommesSuggestionsProcessName(v13, v14, v6, v7, (uint64_t)v18, v19 != 0, v20 != 0, (char **)v10, v21, v22 != 0, *v23);
        return;
      case 1uLL:
        _SIPommesSuggestionsProcessEmailAddress(**(_QWORD **)(a1 + 40), **(_QWORD **)(a1 + 16), v6, v7, v9, (uint64_t *)v10, v22 != 0, v20 != 0, v21);
        return;
      case 2uLL:
        _SIPommesSuggestionsProcessName(v13, v14, v6, v7, (uint64_t)v18, v19 != 0, v20 != 0, *(char ***)(a1 + 120), v21, v22 != 0, *v23);
        return;
      case 3uLL:
        _SIPommesSuggestionsProcessEmailAddress(**(_QWORD **)(a1 + 40), **(_QWORD **)(a1 + 16), v6, v7, v9, *(uint64_t **)(a1 + 120), v22 != 0, v20 != 0, v21);
        goto LABEL_22;
      case 4uLL:
        _SIPommesSuggestionsProcessRawText(v11, v12, v13, (uint64_t)v14, v15, v16, v6, v7, 0.8, v17, v18, 0, v24 != 0, (uint64_t *)v10, 0, *v23);
        goto LABEL_22;
      case 5uLL:
        _SIPommesSuggestionsProcessRawText(v11, v12, v13, (uint64_t)v14, v15, v16, v6, v7, 0.2, v17, v18, v7 > 0x118, v24 != 0, (uint64_t *)v10, 0, *v23);
        goto LABEL_22;
      default:
        if (dword_1EF19FCC4 >= 5)
        {
          v28 = v8;
          v25 = *(_QWORD *)(**(_QWORD **)(a1 + 88) + 8 * v8);
          v26 = *__error();
          v27 = _SILogForLogForCategory(14);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v25;
            _os_log_impl(&dword_1B8270000, v27, OS_LOG_TYPE_DEFAULT, "Pommes Suggestions cannot handle field %s.", buf, 0xCu);
          }
          *__error() = v26;
          v8 = v28;
        }
        if (v8 < 3)
          return;
LABEL_22:
        if (!**(_BYTE **)(a1 + 160))
        {
          _SIPommesSuggestionsAddPeopleCandidate(**(_QWORD **)(a1 + 24), **(os_unfair_lock_t **)(a1 + 32), **(_QWORD **)(a1 + 16), **(_BYTE **)(a1 + 112), **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), 1);
          _SIPommesSuggestionsAddPeopleCandidate(**(_QWORD **)(a1 + 24), **(os_unfair_lock_t **)(a1 + 32), **(_QWORD **)(a1 + 16), **(_BYTE **)(a1 + 112), **(_QWORD **)(a1 + 120), *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8), 0);
          **(_BYTE **)(a1 + 160) = 1;
        }
        break;
    }
  }
}

void std::vector<_peopleMatchInfo>::push_back[abi:nn180100](char **a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  std::string::value_type *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  std::string *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  char *v24;

  v5 = (unint64_t)a1[1];
  v4 = (unint64_t)a1[2];
  if (v5 < v4)
  {
    std::allocator<_peopleMatchInfo>::construct[abi:nn180100]<_peopleMatchInfo,_peopleMatchInfo const&>((std::string *)a1[1], a2);
    v6 = (std::string::value_type *)(v5 + 136);
    goto LABEL_21;
  }
  v7 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5 - (_QWORD)*a1) >> 3);
  if (v7 + 1 > 0x1E1E1E1E1E1E1E1)
    abort();
  v8 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v4 - (_QWORD)*a1) >> 3);
  v9 = 2 * v8;
  if (2 * v8 <= v7 + 1)
    v9 = v7 + 1;
  if (v8 >= 0xF0F0F0F0F0F0F0)
    v10 = 0x1E1E1E1E1E1E1E1;
  else
    v10 = v9;
  if (v10)
  {
    if (v10 > 0x1E1E1E1E1E1E1E1)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v11 = (char *)operator new(136 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = (std::string *)&v11[136 * v7];
  v13 = &v11[136 * v10];
  std::allocator<_peopleMatchInfo>::construct[abi:nn180100]<_peopleMatchInfo,_peopleMatchInfo const&>(v12, a2);
  v6 = &v12[5].__r_.__value_.__s.__data_[16];
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = (char *)v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v15)
      goto LABEL_21;
    goto LABEL_20;
  }
  v16 = 0;
  do
  {
    v17 = (char *)v12 + v16;
    v18 = &v15[v16];
    v19 = *(_OWORD *)&v15[v16 - 136];
    *((_QWORD *)v17 - 15) = *(_QWORD *)&v15[v16 - 120];
    *(_OWORD *)(v17 - 136) = v19;
    *((_QWORD *)v18 - 16) = 0;
    *((_QWORD *)v18 - 15) = 0;
    *((_QWORD *)v18 - 17) = 0;
    v20 = *(_OWORD *)&v15[v16 - 112];
    *((_QWORD *)v17 - 12) = *(_QWORD *)&v15[v16 - 96];
    *((_OWORD *)v17 - 7) = v20;
    *((_QWORD *)v18 - 13) = 0;
    *((_QWORD *)v18 - 12) = 0;
    *((_QWORD *)v18 - 14) = 0;
    v21 = *(_QWORD *)&v15[v16 - 88];
    *((_QWORD *)v17 - 9) = 0;
    *((_QWORD *)v17 - 8) = 0;
    *((_QWORD *)v17 - 11) = v21;
    *((_QWORD *)v17 - 10) = 0;
    *((_OWORD *)v17 - 5) = *(_OWORD *)&v15[v16 - 80];
    *((_QWORD *)v17 - 8) = *(_QWORD *)&v15[v16 - 64];
    *((_QWORD *)v18 - 10) = 0;
    *((_QWORD *)v18 - 9) = 0;
    *((_QWORD *)v18 - 8) = 0;
    *((_QWORD *)v17 - 7) = 0;
    *((_QWORD *)v17 - 6) = 0;
    *((_QWORD *)v17 - 5) = 0;
    *(_OWORD *)(v17 - 56) = *(_OWORD *)&v15[v16 - 56];
    *((_QWORD *)v17 - 5) = *(_QWORD *)&v15[v16 - 40];
    *((_QWORD *)v18 - 7) = 0;
    *((_QWORD *)v18 - 6) = 0;
    *((_QWORD *)v18 - 5) = 0;
    v22 = *(_OWORD *)&v15[v16 - 16];
    *((_OWORD *)v17 - 2) = *(_OWORD *)&v15[v16 - 32];
    *((_OWORD *)v17 - 1) = v22;
    v16 -= 136;
  }
  while (&v15[v16] != v14);
  v23 = (char *)v12 + v16;
  v24 = *a1;
  v15 = a1[1];
  *a1 = v23;
  a1[1] = v6;
  a1[2] = v13;
  if (v15 != v24)
  {
    do
    {
      v15 -= 136;
      std::allocator<_peopleMatchInfo>::destroy[abi:nn180100]((uint64_t)v15);
    }
    while (v15 != v24);
    v15 = v24;
  }
  if (v15)
LABEL_20:
    operator delete(v15);
LABEL_21:
  a1[1] = v6;
}

void _SIPommesSuggestionsProcessName(uint64_t a1, _QWORD *a2, char *a3, int32_t a4, uint64_t a5, char a6, int a7, char **a8, double a9, char a10, CFArrayRef theArray)
{
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  float v24;
  unint64_t v25;
  int v26;
  __int128 v27;
  void *v28;
  void *__p[2];
  void *v30[2];
  __int128 v31;
  void *v32[2];
  __int128 v33;
  void *v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  v37 = 0;
  v36 = 0u;
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  *(_OWORD *)v32 = 0u;
  v33 = 0u;
  *(_OWORD *)v30 = 0u;
  v31 = 0u;
  *(_OWORD *)__p = 0u;
  _peopleMatchInfo::_peopleMatchInfo((_peopleMatchInfo *)__p, a2[4]);
  if (!a3 || !*a3)
  {
    MEMORY[0x1BCCB03B0](__p, "");
LABEL_12:
    std::vector<_peopleMatchInfo>::push_back[abi:nn180100](a8, (__int128 *)__p);
    goto LABEL_27;
  }
  std::string::basic_string[abi:nn180100]<0>(&v27, a3);
  if (SHIBYTE(v30[0]) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = v27;
  v30[0] = v28;
  if (!a2[4])
    goto LABEL_12;
  v25 = a2[4];
  v26 = 0;
  v20 = operator new();
  bzero((void *)(v20 + 16), 0xF280uLL);
  *(_QWORD *)v20 = a2[11];
  *(_QWORD *)(v20 + 8) = a5;
  *(_BYTE *)(v20 + 62088) = a6;
  pommesSuggestionsTokenizeString(a1, a3, a4, (unsigned __int16 *)&v26 + 1, (unsigned __int16 *)&v26, v20, 1, 0, 0, (uint64_t)pommesSuggestionsLiteralGetTokenCallback, 0, 8u);
  if (HIWORD(v26))
  {
    if (theArray)
    {
      if (CFArrayGetCount(theArray) <= 0)
        v21 = 0;
      else
        v21 = 72;
    }
    else
    {
      v21 = 0;
    }
    v22 = unigramsMatch((uint64_t)a2, a5, (const char *)(v20 + 42066), a7, v21, &v32[1], 0, 0, 0);
    if (!a2[2] || !icu_search_context_create())
      goto LABEL_26;
    if ((a7 & 1) != 0 || (*(_QWORD *)&v27 = 0, v38 = 0, icu_search_match()))
    {
      v24 = 1.0;
      if (v25 == HIWORD(v26))
        v24 = 2.0;
    }
    else
    {
      LOWORD(v23) = HIWORD(v26);
      v24 = (float)(unint64_t)v22 / fmaxf((float)v25, (float)v23);
    }
    *(float *)v32 = v24;
    icu_ctx_release();
    if (*(float *)v32 >= 1.0)
      BYTE10(v36) = 1;
    *((double *)&v35 + 1) = a9;
    BYTE8(v36) = a10;
  }
  std::vector<_peopleMatchInfo>::push_back[abi:nn180100](a8, (__int128 *)__p);
LABEL_26:
  MEMORY[0x1BCCB06A4](v20, 0x1070C40BE69B347);
LABEL_27:
  if (v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }
  if (v32[1])
  {
    *(void **)&v33 = v32[1];
    operator delete(v32[1]);
  }
  if (SHIBYTE(v31) < 0)
    operator delete(v30[1]);
  if (SHIBYTE(v30[0]) < 0)
    operator delete(__p[0]);
}

void _SIPommesSuggestionsProcessEmailAddress(uint64_t a1, uint64_t a2, char *__s, int32_t a4, unint64_t a5, uint64_t *a6, char a7, int a8, double a9)
{
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  CFStringRef v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  unint64_t v26;
  int v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  CFStringRef v38;
  uint64_t v39;
  char matched;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  BOOL v52;
  char v53;
  size_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  int v60;
  NSObject *v61;
  char *v62;
  const __CFAllocator *alloc;
  CFAllocatorRef alloca;
  char v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint8_t buf[16];
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  if (0xF0F0F0F0F0F0F0F1 * ((a6[1] - *a6) >> 3) <= a5)
  {
    if (dword_1EF19FCC4 >= 5)
    {
      v27 = *__error();
      v28 = _SILogForLogForCategory(14);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a5;
        _os_log_impl(&dword_1B8270000, v28, OS_LOG_TYPE_DEFAULT, "Invalid index %ld for matchInfoArray.", buf, 0xCu);
      }
      *__error() = v27;
    }
  }
  else if (__s && *__s)
  {
    std::string::basic_string[abi:nn180100]<0>(buf, __s);
    v18 = *a6 + 136 * a5;
    v19 = v18 + 24;
    if (*(char *)(v18 + 47) < 0)
      operator delete(*(void **)v19);
    v20 = *(_OWORD *)buf;
    *(_QWORD *)(v19 + 16) = v71;
    *(_OWORD *)v19 = v20;
    *(_DWORD *)(*a6 + 136 * a5 + 52) = 0;
    if (a2 && *(_QWORD *)(a2 + 32))
    {
      v66 = *(_QWORD *)(a2 + 32);
      v65 = a7;
      v68 = 0;
      alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v21 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], "en-US", 0x8000100u);
      v22 = operator new();
      bzero((void *)(v22 + 16), 0xF280uLL);
      *(_QWORD *)v22 = v21;
      *(_QWORD *)(v22 + 8) = "en-US";
      pommesSuggestionsTokenizeString(a1, __s, a4, (unsigned __int16 *)&v68 + 1, (unsigned __int16 *)&v68, v22, 1, 0, 0, (uint64_t)pommesSuggestionsEmailAddressGetTokenCallback, 0, 4u);
      CFRelease(v21);
      v23 = HIWORD(v68);
      if (!HIWORD(v68))
        goto LABEL_16;
      v24 = strrchr((char *)(v22 + 42066), 64);
      if (v24)
      {
        if (!strncmp(v24, "@ privaterelay appleid com", 0x1AuLL))
          goto LABEL_16;
      }
      v62 = (char *)(v22 + 42066);
      v25 = (_QWORD *)(v22 + 46080);
      while (1)
      {
        if (*v25 == 1)
        {
          v26 = *(v25 - 1);
          if (*(_BYTE *)(v22 + v26 + 42066) == 64)
            break;
        }
        v25 += 2;
        if (!--v23)
          goto LABEL_15;
      }
      if (!v26)
      {
LABEL_15:
        if (dword_1EF19FCC4 >= 5)
        {
          v60 = *__error();
          v61 = _SILogForLogForCategory(14);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1B8270000, v61, OS_LOG_TYPE_DEFAULT, "Cannot find @ in email address.", buf, 2u);
          }
          *__error() = v60;
        }
        goto LABEL_16;
      }
      v30 = *a6 + 136 * a5;
      v31 = (_QWORD *)(v30 + 24);
      v32 = *(char *)(v30 + 47);
      v33 = *(unsigned __int8 *)(v30 + 47);
      if (v32 < 0)
      {
        v34 = v31[1];
        if (v34)
        {
LABEL_28:
          while (1)
          {
            LOWORD(v34) = v34 - 1;
            if (!(_WORD)v34)
              break;
            v35 = (unsigned __int16)v34;
            if ((v33 & 0x80) != 0)
              v36 = *(unsigned __int8 *)(*v31 + (unsigned __int16)v34);
            else
              v36 = *((unsigned __int8 *)v31 + (unsigned __int16)v34);
            if (v36 == 46)
              goto LABEL_35;
          }
        }
      }
      else if (v33)
      {
        LOWORD(v34) = v33;
        goto LABEL_28;
      }
      v35 = 0;
LABEL_35:
      v37 = unigramsMatch(a2, (uint64_t)"en-US", v62, a8, 0, (_QWORD *)(*a6 + 136 * a5 + 80), 0, 0, 0);
      if (v66 == 1 && !v37)
      {
        v68 = 0;
        v38 = CFStringCreateWithCString(alloc, "en-US", 0x8000100u);
        *(_QWORD *)v22 = v38;
        *(_QWORD *)(v22 + 8) = "en-US";
        *(_QWORD *)(v22 + 16) = 0;
        *v62 = 0;
        *(_BYTE *)(v22 + 62088) = 0;
        pommesSuggestionsTokenizeString(a1, __s, a4, (unsigned __int16 *)&v68 + 1, (unsigned __int16 *)&v68, v22, 1, 0, 0, (uint64_t)pommesSuggestionsLiteralGetTokenCallback, 0, 8u);
        CFRelease(v38);
        if (HIWORD(v68))
        {
          if (**(_QWORD **)(a2 + 40))
          {
            v39 = icu_search_context_create();
            if (v39)
            {
              matched = _matchOnce(v39, v62, a8, *(_QWORD **)(*a6 + 136 * a5 + 80));
              icu_ctx_release();
              if ((matched & 1) != 0)
              {
                v41 = *a6;
                v42 = *a6 + 136 * a5;
                *(_DWORD *)(v42 + 52) = 1065353216;
                *(_BYTE *)(v42 + 122) = 1;
                goto LABEL_42;
              }
            }
          }
        }
LABEL_16:
        MEMORY[0x1BCCB06A4](v22, 0x1070C40BE69B347);
        return;
      }
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      if (v66 <= 1)
        v49 = 1;
      else
        v49 = v66;
      while (2)
      {
        v50 = (uint64_t *)(*(_QWORD *)(*a6 + 136 * a5 + 80) + 16 * v44 + 8);
        while (*v50 >= 1)
        {
          v51 = *(v50 - 1);
          if (v51 < v26)
          {
            v45 += *v50;
            if (*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8 * v44))
            {
              alloca = (CFAllocatorRef)v49;
              v67 = v45;
              if (icu_search_context_create())
              {
                if ((a8 & 1) != 0)
                {
                  v53 = 1;
                }
                else
                {
                  v69 = 0;
                  *(_QWORD *)buf = 0;
                  v53 = icu_search_match();
                }
                v47 |= v53;
                icu_ctx_release();
              }
              v48 = 1;
              v45 = v67;
              v49 = (uint64_t)alloca;
            }
            else
            {
              v48 = 1;
            }
            break;
          }
          if (v35)
            v52 = v51 > v35;
          else
            v52 = 0;
          v46 = v52;
          ++v44;
          v50 += 2;
          v47 = 1;
          if (v49 == v44)
            goto LABEL_67;
        }
        if (++v44 != v49)
          continue;
        break;
      }
      if ((v47 & 1) == 0)
      {
        if ((v48 & 1) != 0)
        {
          v41 = *a6;
          if (v26 == 1)
            v58 = *(float *)(v41 + 136 * a5 + 52);
          else
            v58 = fmin((float)((float)v45 / (float)(v26 - 1)), 1.0);
          v59 = v58 * 0.8;
          *(float *)(v41 + 136 * a5 + 52) = v59;
        }
        else
        {
          v41 = *a6;
          *(_DWORD *)(*a6 + 136 * a5 + 52) = 0;
        }
LABEL_42:
        v43 = v65;
LABEL_74:
        v57 = v41 + 136 * a5;
        *(double *)(v57 + 112) = a9;
        *(_BYTE *)(v57 + 121) = v43;
        goto LABEL_16;
      }
LABEL_67:
      if ((a8 & 1) != 0 || (v46 & 1) == 0)
      {
        v41 = *a6;
        v43 = v65;
      }
      else
      {
        v54 = strlen(*(const char **)(a2 + 16));
        v41 = *a6;
        v43 = v65;
        if (v54 < 4)
        {
          v55 = 1028443341;
LABEL_73:
          v56 = v41 + 136 * a5;
          *(_DWORD *)(v56 + 52) = v55;
          *(_BYTE *)(v56 + 124) = 1;
          goto LABEL_74;
        }
      }
      v55 = 1064514355;
      goto LABEL_73;
    }
  }
  else
  {
    v29 = 17 * a5;
    MEMORY[0x1BCCB03B0](*a6 + 136 * a5 + 24, "");
    *(_DWORD *)(*a6 + 8 * v29 + 52) = 0;
  }
}

void _SIPommesSuggestionsAddPeopleCandidate(uint64_t a1, os_unfair_lock_t lock, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v22;
  float v23;
  double v24;
  double v25;
  uint64_t v26;
  _OWORD *v27;
  int v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  unint64_t v36;
  unsigned __int8 **v37;
  unsigned __int8 *v38;
  unint64_t v39;
  uint64_t v40;
  std::string *v41;
  int v42;
  double v43;
  double v44;
  uint64_t v45;
  char v46;
  int v47;
  std::string *v48;
  uint64_t v49;
  int v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int8 **v59;
  unsigned __int8 *v60;
  unint64_t v61;
  _QWORD *v62;
  std::string *v63;
  float v64;
  float v65;
  _BOOL8 v66;
  unint64_t v67;
  unint64_t v68;
  size_t v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void **v76;
  char *v77;
  unint64_t v78;
  std::string *v79;
  float v80;
  float v81;
  _BOOL8 v83;
  unint64_t v84;
  unint64_t v85;
  size_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  int8x8_t v95;
  unint64_t v96;
  uint8x8_t v97;
  unint64_t v98;
  unint64_t v99;
  unsigned __int8 **v100;
  unsigned __int8 *i;
  unint64_t v102;
  double v103;
  double v104;
  float v106;
  uint64_t v107;
  char v108;
  unint64_t v112;
  _QWORD *v114;
  uint64_t *v116;
  char *v117;
  _QWORD *v118;
  uint64_t v119;

  if (!a3)
    return;
  v7 = a6;
  v8 = a5;
  if (a5 == a6)
    return;
  v9 = a7;
  v10 = a4;
  v11 = lock;
  v12 = a1;
  v13 = *(_QWORD *)(a3 + 32);
  v116 = (uint64_t *)(a1 + 64);
  v114 = (_QWORD *)(a1 + 80);
  v108 = a7 ^ 1;
  do
  {
    v14 = *(unsigned __int8 *)(v8 + 47);
    if (*(char *)(v8 + 47) < 0)
    {
      if (!*(_QWORD *)(v8 + 32))
        goto LABEL_119;
    }
    else if (!*(_BYTE *)(v8 + 47))
    {
      goto LABEL_119;
    }
    *(_QWORD *)(v8 + 128) = 0;
    *(_BYTE *)(v8 + 123) = 0;
    v15 = 0;
    if (v13)
    {
      v16 = (uint64_t *)(*(_QWORD *)(v8 + 80) + 8);
      v17 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 8);
      while (1)
      {
        v19 = *v17;
        v17 += 2;
        v18 = v19;
        v20 = *v16;
        v16 += 2;
        if (v20 <= 0 && v18 < 1)
          break;
        if (v13 == ++v15)
        {
          v22 = *(float *)(v8 + 48);
          goto LABEL_20;
        }
      }
      *(_QWORD *)(v8 + 128) = v15;
      if (v15)
        *(_BYTE *)(v8 + 123) = 1;
    }
    v22 = *(float *)(v8 + 48);
    if (v15 < v13 && v22 < 1.0)
      goto LABEL_119;
LABEL_20:
    v23 = 0.0;
    if ((v10 & 1) == 0)
    {
      v24 = v22;
      v25 = *(float *)(v8 + 52);
      if (v9)
      {
        v23 = v25 + v24 * 0.9;
        if (v23 < 0.1)
          return;
      }
      else
      {
        v23 = v25 * 0.05 + v24 * 0.1;
        if (v23 < 0.05)
          return;
      }
    }
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(v8 + 32);
    if (!v14 || *(_QWORD *)(v12 + 88) > 0x3E8uLL)
      goto LABEL_119;
    v26 = v12;
    v27 = (_OWORD *)(v8 + 24);
    os_unfair_lock_lock(v11);
    v28 = *(char *)(v8 + 47);
    if (v28 >= 0)
      v29 = (uint64_t *)(v8 + 24);
    else
      v29 = *(uint64_t **)(v8 + 24);
    if (v28 >= 0)
      v30 = *(unsigned __int8 *)(v8 + 47);
    else
      v30 = *(_QWORD *)(v8 + 32);
    v31 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v29, v30);
    v32 = *(_QWORD *)(v26 + 72);
    if (!v32)
      goto LABEL_52;
    v33 = v31;
    v34 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
    v34.i16[0] = vaddlv_u8(v34);
    v35 = v34.u32[0];
    if (v34.u32[0] > 1uLL)
    {
      v36 = v31;
      if (v31 >= v32)
        v36 = v31 % v32;
    }
    else
    {
      v36 = (v32 - 1) & v31;
    }
    v107 = *v116;
    v37 = *(unsigned __int8 ***)(*v116 + 8 * v36);
    if (!v37 || (v38 = *v37) == 0)
    {
LABEL_52:
      v40 = operator new();
      *(_OWORD *)(v40 + 40) = 0u;
      v41 = (std::string *)(v40 + 40);
      *(_OWORD *)(v40 + 56) = 0u;
      *(_OWORD *)(v40 + 72) = 0u;
      *(_OWORD *)(v40 + 104) = 0u;
      *(_OWORD *)(v40 + 88) = 0u;
      *(_DWORD *)(v40 + 120) = 1065353216;
      *(_QWORD *)(v40 + 136) = 0;
      *(_QWORD *)(v40 + 144) = 0;
      *(_QWORD *)(v40 + 128) = 0;
      *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40 + 88, v8, v8)+ 10) = v23;
      v42 = *(_DWORD *)(v8 + 52);
      *(_BYTE *)(v40 + 29) = *(_BYTE *)(v8 + 124);
      *(_DWORD *)(v40 + 4) = v42;
      *(float *)(v40 + 8) = v23;
      v43 = *(double *)(v8 + 104);
      v44 = *(double *)(v8 + 112);
      if (fabs(v43) <= 0.000000100000001)
        *(double *)(v40 + 16) = v44;
      if (fabs(v44) <= 0.000000100000001)
        *(double *)(v40 + 16) = v43;
      if (v43 > 0.000000100000001 && v44 > 0.000000100000001)
        *(double *)(v40 + 16) = fmin(v43, v44);
      *(_BYTE *)(v40 + 24) = (*(unsigned __int8 *)(v8 + 120) | *(unsigned __int8 *)(v8 + 121)) != 0;
      *(_BYTE *)(v40 + 25) = *(_BYTE *)(v8 + 122);
      v45 = *(unsigned __int8 *)(v8 + 23);
      if ((v45 & 0x80u) != 0)
        v45 = *(_QWORD *)(v8 + 8);
      v9 = a7;
      if (v45)
      {
        std::string::operator=(v41, (const std::string *)v8);
        v46 = 0;
        v47 = *(_DWORD *)(v8 + 48);
      }
      else
      {
        MEMORY[0x1BCCB03B0](v41, "");
        v46 = 1;
        v47 = 0;
      }
      v48 = (std::string *)(v40 + 64);
      *(_DWORD *)v40 = v47;
      *(_BYTE *)(v40 + 26) = v46;
      v49 = *(unsigned __int8 *)(v8 + 47);
      if ((v49 & 0x80u) != 0)
        v49 = *(_QWORD *)(v8 + 32);
      if (v49)
        std::string::operator=(v48, (const std::string *)(v8 + 24));
      else
        MEMORY[0x1BCCB03B0](v48, "");
      *(_BYTE *)(v40 + 27) = a7;
      *(_BYTE *)(v40 + 28) = v108;
      *(_DWORD *)(v40 + 32) = 0;
      v50 = *(char *)(v8 + 47);
      if (v50 >= 0)
        v51 = (uint64_t *)(v8 + 24);
      else
        v51 = *(uint64_t **)(v8 + 24);
      if (v50 >= 0)
        v52 = *(unsigned __int8 *)(v8 + 47);
      else
        v52 = *(_QWORD *)(v8 + 32);
      v53 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v51, v52);
      v54 = v53;
      v55 = *(_QWORD *)(a1 + 72);
      if (!v55)
      {
        v58 = 0;
        goto LABEL_93;
      }
      v56 = (uint8x8_t)vcnt_s8((int8x8_t)v55);
      v56.i16[0] = vaddlv_u8(v56);
      v57 = v56.u32[0];
      if (v56.u32[0] > 1uLL)
      {
        v58 = v53;
        if (v53 >= v55)
          v58 = v53 % v55;
      }
      else
      {
        v58 = (v55 - 1) & v53;
      }
      v59 = *(unsigned __int8 ***)(*v116 + 8 * v58);
      if (v59)
      {
        v60 = *v59;
        if (*v59)
        {
          while (1)
          {
            v61 = *((_QWORD *)v60 + 1);
            if (v61 == v54)
            {
              if (std::equal_to<std::string>::operator()[abi:nn180100](v60 + 16, (unsigned __int8 *)(v8 + 24)))
              {
                std::default_delete<_peopleCandidate>::operator()[abi:nn180100](v40);
                v9 = a7;
                v7 = a6;
                v10 = a4;
                v11 = lock;
                v12 = a1;
                goto LABEL_118;
              }
            }
            else
            {
              if (v57 > 1)
              {
                if (v61 >= v55)
                  v61 %= v55;
              }
              else
              {
                v61 &= v55 - 1;
              }
              if (v61 != v58)
              {
LABEL_92:
                v9 = a7;
                break;
              }
            }
            v60 = *(unsigned __int8 **)v60;
            if (!v60)
              goto LABEL_92;
          }
        }
      }
LABEL_93:
      v119 = 0;
      v62 = operator new(0x30uLL);
      v117 = (char *)v62;
      v118 = v114;
      *v62 = 0;
      v62[1] = v54;
      v63 = (std::string *)(v62 + 2);
      if (*(char *)(v8 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v63, *(const std::string::value_type **)(v8 + 24), *(_QWORD *)(v8 + 32));
      }
      else
      {
        *(_OWORD *)&v63->__r_.__value_.__l.__data_ = *v27;
        v62[4] = *(_QWORD *)(v8 + 40);
      }
      v62[5] = v40;
      LOBYTE(v119) = 1;
      v12 = a1;
      v64 = (float)(unint64_t)(*(_QWORD *)(a1 + 88) + 1);
      v65 = *(float *)(a1 + 96);
      v7 = a6;
      if (!v55 || (float)(v65 * (float)v55) < v64)
      {
        v66 = (v55 & (v55 - 1)) != 0;
        if (v55 < 3)
          v66 = 1;
        v67 = v66 | (2 * v55);
        v68 = vcvtps_u32_f32(v64 / v65);
        if (v67 <= v68)
          v69 = v68;
        else
          v69 = v67;
        std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>((uint64_t)v116, v69);
        v55 = *(_QWORD *)(a1 + 72);
        if ((v55 & (v55 - 1)) != 0)
        {
          if (v54 >= v55)
            v58 = v54 % v55;
          else
            v58 = v54;
        }
        else
        {
          v58 = (v55 - 1) & v54;
        }
      }
      v70 = *v116;
      v71 = *(_QWORD **)(*v116 + 8 * v58);
      if (v71)
      {
        *v62 = *v71;
        v11 = lock;
      }
      else
      {
        *v62 = *v114;
        *v114 = v62;
        *(_QWORD *)(v70 + 8 * v58) = v114;
        v11 = lock;
        if (!*v62)
        {
LABEL_117:
          v117 = 0;
          ++*(_QWORD *)(a1 + 88);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_peopleCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_peopleCandidate>>,void *>>>>::reset[abi:nn180100]((uint64_t)&v117);
          v10 = a4;
          goto LABEL_118;
        }
        v72 = *(_QWORD *)(*v62 + 8);
        if ((v55 & (v55 - 1)) != 0)
        {
          if (v72 >= v55)
            v72 %= v55;
        }
        else
        {
          v72 &= v55 - 1;
        }
        v71 = (_QWORD *)(*v116 + 8 * v72);
      }
      *v71 = v62;
      goto LABEL_117;
    }
    v112 = v32 - 1;
    while (1)
    {
      v39 = *((_QWORD *)v38 + 1);
      if (v39 == v33)
        break;
      if (v35 > 1)
      {
        if (v39 >= v32)
          v39 %= v32;
      }
      else
      {
        v39 &= v112;
      }
      if (v39 != v36)
        goto LABEL_52;
LABEL_51:
      v38 = *(unsigned __int8 **)v38;
      if (!v38)
        goto LABEL_52;
    }
    if (!std::equal_to<std::string>::operator()[abi:nn180100](v38 + 16, (unsigned __int8 *)(v8 + 24)))
      goto LABEL_51;
    v73 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v29, v30);
    v74 = v73;
    if (v35 > 1)
    {
      v75 = v73;
      if (v73 >= v32)
        v75 = v73 % v32;
    }
    else
    {
      v75 = v112 & v73;
    }
    v76 = *(void ***)(v107 + 8 * v75);
    if (v76)
    {
      v77 = (char *)*v76;
      if (*v76)
      {
        do
        {
          v78 = *((_QWORD *)v77 + 1);
          if (v78 == v74)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v77 + 16, (unsigned __int8 *)(v8 + 24)))
            {
              goto LABEL_164;
            }
          }
          else
          {
            if (v35 > 1)
            {
              if (v78 >= v32)
                v78 %= v32;
            }
            else
            {
              v78 &= v112;
            }
            if (v78 != v75)
              break;
          }
          v77 = *(char **)v77;
        }
        while (v77);
      }
    }
    v119 = 0;
    v77 = (char *)operator new(0x30uLL);
    v117 = v77;
    v118 = v114;
    *(_QWORD *)v77 = 0;
    *((_QWORD *)v77 + 1) = v74;
    v79 = (std::string *)(v77 + 16);
    if (*(char *)(v8 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(v79, *(const std::string::value_type **)(v8 + 24), *(_QWORD *)(v8 + 32));
    }
    else
    {
      *(_OWORD *)&v79->__r_.__value_.__l.__data_ = *v27;
      *((_QWORD *)v77 + 4) = *(_QWORD *)(v8 + 40);
    }
    *((_QWORD *)v77 + 5) = 0;
    v80 = (float)(unint64_t)(*(_QWORD *)(a1 + 88) + 1);
    LOBYTE(v119) = 1;
    v81 = *(float *)(a1 + 96);
    if ((float)(v81 * (float)v32) < v80)
    {
      v83 = v32 < 3 || v35 > 1;
      v84 = v83 | (2 * v32);
      v85 = vcvtps_u32_f32(v80 / v81);
      if (v84 <= v85)
        v86 = v85;
      else
        v86 = v84;
      std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>((uint64_t)v116, v86);
      v32 = *(_QWORD *)(a1 + 72);
      if ((v32 & (v32 - 1)) != 0)
      {
        if (v74 >= v32)
          v75 = v74 % v32;
        else
          v75 = v74;
      }
      else
      {
        v75 = (v32 - 1) & v74;
      }
    }
    v87 = *v116;
    v88 = *(_QWORD **)(*v116 + 8 * v75);
    if (v88)
    {
      *(_QWORD *)v77 = *v88;
      goto LABEL_162;
    }
    *(_QWORD *)v77 = *v114;
    *v114 = v77;
    *(_QWORD *)(v87 + 8 * v75) = v114;
    if (*(_QWORD *)v77)
    {
      v89 = *(_QWORD *)(*(_QWORD *)v77 + 8);
      if ((v32 & (v32 - 1)) != 0)
      {
        if (v89 >= v32)
          v89 %= v32;
      }
      else
      {
        v89 &= v32 - 1;
      }
      v88 = (_QWORD *)(*v116 + 8 * v89);
LABEL_162:
      *v88 = v77;
    }
    v117 = 0;
    ++*(_QWORD *)(a1 + 88);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_peopleCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_peopleCandidate>>,void *>>>>::reset[abi:nn180100]((uint64_t)&v117);
LABEL_164:
    v90 = *((_QWORD *)v77 + 5);
    v91 = *(char *)(v8 + 23);
    if (v91 >= 0)
      v92 = (uint64_t *)v8;
    else
      v92 = *(uint64_t **)v8;
    if (v91 >= 0)
      v93 = *(unsigned __int8 *)(v8 + 23);
    else
      v93 = *(_QWORD *)(v8 + 8);
    v94 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v92, v93);
    v95 = *(int8x8_t *)(v90 + 96);
    if (v95)
    {
      v96 = v94;
      v97 = (uint8x8_t)vcnt_s8(v95);
      v97.i16[0] = vaddlv_u8(v97);
      v98 = v97.u32[0];
      if (v97.u32[0] > 1uLL)
      {
        v99 = v94;
        if (v94 >= *(_QWORD *)&v95)
          v99 = v94 % *(_QWORD *)&v95;
      }
      else
      {
        v99 = (*(_QWORD *)&v95 - 1) & v94;
      }
      v100 = *(unsigned __int8 ***)(*(_QWORD *)(v90 + 88) + 8 * v99);
      if (v100)
      {
        for (i = *v100; i; i = *(unsigned __int8 **)i)
        {
          v102 = *((_QWORD *)i + 1);
          if (v102 == v96)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)v8))
            {
              v106 = *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90 + 88, v8, v8)+ 10)+ v23;
              *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90 + 88, v8, v8)+ 10) = v106;
              v9 = a7;
              v7 = a6;
              v10 = a4;
              v11 = lock;
              if (v106 > *(float *)(v90 + 8))
              {
                *(float *)(v90 + 8) = v106;
                *(_DWORD *)v90 = *(_DWORD *)(v8 + 48);
                std::string::operator=((std::string *)(v90 + 40), (const std::string *)v8);
LABEL_188:
                *(_BYTE *)(v90 + 26) = 0;
              }
              goto LABEL_189;
            }
          }
          else
          {
            if (v98 > 1)
            {
              if (v102 >= *(_QWORD *)&v95)
                v102 %= *(_QWORD *)&v95;
            }
            else
            {
              v102 &= *(_QWORD *)&v95 - 1;
            }
            if (v102 != v99)
              break;
          }
        }
      }
    }
    *((float *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v90 + 88, v8, v8)+ 10) = v23;
    v9 = a7;
    v7 = a6;
    v10 = a4;
    v11 = lock;
    if (*(float *)(v90 + 8) < v23)
    {
      *(float *)(v90 + 8) = v23;
      *(_DWORD *)v90 = *(_DWORD *)(v8 + 48);
      goto LABEL_188;
    }
LABEL_189:
    v103 = *(double *)(v8 + 104);
    if (v103 > 0.000000100000001)
    {
      v104 = *(double *)(v90 + 16);
      if (v104 <= 0.000000100000001 || v103 < v104)
      {
        *(double *)(v90 + 16) = v103;
        std::string::operator=((std::string *)(v90 + 40), (const std::string *)v8);
      }
    }
    *(_BYTE *)(v90 + 24) = (*(unsigned __int8 *)(v90 + 24) | *(unsigned __int8 *)(v8 + 120)) != 0;
    *(_BYTE *)(v90 + 25) = (*(unsigned __int8 *)(v90 + 25) | *(unsigned __int8 *)(v8 + 122)) != 0;
    v12 = a1;
    if (v9)
      *(_BYTE *)(v90 + 27) = 1;
    else
      *(_BYTE *)(v90 + 28) = 1;
LABEL_118:
    os_unfair_lock_unlock(v11);
LABEL_119:
    v8 += 136;
  }
  while (v8 != v7);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_peopleCandidate>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<_peopleCandidate>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_peopleCandidate>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t _matchOnce(int a1, char *__s, int a3, _QWORD *a4)
{
  size_t v5;
  uint64_t result;

  if (a3)
  {
    *a4 = 0;
    v5 = strlen(__s);
    result = 1;
  }
  else
  {
    result = icu_search_match();
    *a4 = 0;
    v5 = 0;
  }
  a4[1] = v5;
  return result;
}

__n128 std::allocator<_peopleMatchInfo>::construct[abi:nn180100]<_peopleMatchInfo,_peopleMatchInfo const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;
  __n128 result;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 6);
  std::vector<CFRange>::vector(&this[2].__r_.__value_.__l.__size_, (uint64_t)a2 + 56);
  std::vector<CFRange>::vector(&this[3].__r_.__value_.__l.__size_, (uint64_t)(a2 + 5));
  result = *(__n128 *)((char *)a2 + 104);
  *(_OWORD *)&this[5].__r_.__value_.__l.__data_ = *(__int128 *)((char *)a2 + 120);
  *(__n128 *)&this[4].__r_.__value_.__r.__words[1] = result;
  return result;
}

_QWORD *std::vector<CFRange>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<CFRange>::__vallocate[abi:nn180100](a1, v5 >> 4);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

void std::function<void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v5 = a5;
  if (a1)
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v8, &v7, &v6, &v5);
  }
  else
  {
    std::__throw_bad_function_call[abi:nn180100]();
    std::__throw_bad_function_call[abi:nn180100]();
  }
}

void std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  JUMPOUT(0x1B8386DF8);
}

void std::__function::__func<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0,std::allocator<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x1BCCB06A4);
}

__n128 std::__function::__func<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0,std::allocator<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &unk_1E6E2AAE8;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0,std::allocator<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &unk_1E6E2AAE8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

void std::__function::__func<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0,std::allocator<SIPommesPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,unsigned int const**,int,char const**,_SuggestionsModel *,CITokenizer *,si_completion_pattern_s *,ci_rankingbits_s,unsigned int,char const*,char const**)::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(uint64_t a1, const char **a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  uint32_t v22;
  BOOL v23;
  int v24;
  CFIndex v25;
  const __CFLocale *v26;
  const __CFLocale *v27;
  __CFDateFormatter *v28;
  __CFDateFormatter *v29;
  const __CFArray *v30;
  CFIndex Count;
  const __CFString *ValueAtIndex;
  const __CFString *v33;
  int CString;
  char *v35;
  const __CFLocale *v36;
  const __CFLocale *v37;
  CFDateFormatterRef v38;
  __CFDateFormatter *v39;
  const char *v40;
  __CFCalendar *v41;
  const __CFDate *v42;
  const __CFString *StringWithDate;
  char v44;
  size_t v45;
  int v46;
  NSObject *v47;
  NSObject *v48;
  char v49;
  int v50;
  const __CFString *cf;
  const __CFDate *v52;
  __CFCalendar *v53;
  char *v54;
  const char *v55;
  const __CFArray *theArray;
  CFArrayRef theArraya;
  _BYTE at[12];
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  char buffer[1008];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 72) + 8 * *a4);
  v5 = *a2;
  v6 = *a3;
  v7 = **(_QWORD **)(a1 + 8);
  v8 = **(os_unfair_lock_s ***)(a1 + 16);
  v9 = **(_QWORD **)(a1 + 24);
  v10 = **(_QWORD **)(a1 + 32);
  v11 = **(_QWORD **)(a1 + 40);
  v12 = **(char ***)(a1 + 80);
  v13 = **(unsigned __int8 **)(a1 + 88);
  switch(*a4)
  {
    case 5:
      v16 = ***(_QWORD ***)(a1 + 56);
      memset(buffer, 0, 24);
      _SIPommesSuggestionsProcessRawText(v7, v8, v9, v10, 0, v11, v5, v6, 0.2, v16, v12, 0, 0, (uint64_t *)buffer, 1, 0);
      *(_QWORD *)at = buffer;
      std::vector<_peopleMatchInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)at);
      return;
    case 0xALL:
      v23 = v13 != 0;
      v24 = 11;
      goto LABEL_10;
    case 0xBLL:
      v23 = v13 != 0;
      v24 = 12;
LABEL_10:
      v50 = v24;
      v49 = v23;
      goto LABEL_16;
    case 0xCLL:
      v50 = 16;
      v49 = v13 != 0;
      goto LABEL_16;
    case 0xELL:
      v14 = v13 != 0;
      v15 = 17;
      goto LABEL_3;
    case 0x11:
      v50 = 18;
      v49 = v13 != 0;
      goto LABEL_16;
    case 0x15:
      v14 = v13 != 0;
      v15 = 13;
      goto LABEL_3;
    case 0x16:
      v50 = 15;
      v49 = v13 != 0;
      goto LABEL_16;
    case 0x17:
    case 0x19:
    case 0x1ALL:
      v50 = 9;
      v49 = v13 != 0;
      goto LABEL_16;
    case 0x18:
      v14 = v13 != 0;
      v15 = 14;
      goto LABEL_3;
    case 0x1BLL:
    case 0x1CLL:
    case 0x1DLL:
    case 0x1ELL:
      v14 = v13 != 0;
      v15 = 9;
LABEL_3:
      v50 = v15;
      v49 = v14;
LABEL_16:
      _SIPommesSuggestionsProcessPhotoAttribute(v7, (uint64_t)v8, v9, v10, v11, (uint64_t)v5, v6, (uint64_t)v12, v49, v50);
      return;
    case 0x29:
      bzero(buffer, 0x3E8uLL);
      v25 = *(unsigned int *)v5;
      v26 = CFLocaleCopyCurrent();
      if (!v26)
        goto LABEL_47;
      v27 = v26;
      v28 = CFDateFormatterCreate(0, v26, kCFDateFormatterLongStyle, kCFDateFormatterNoStyle);
      if (v28)
      {
        v29 = v28;
        v30 = (const __CFArray *)CFDateFormatterCopyProperty(v28, (CFDateFormatterKey)*MEMORY[0x1E0C9AF50]);
        if (v30)
        {
          theArray = v30;
          Count = CFArrayGetCount(v30);
          v54 = 0;
          if ((_DWORD)v25 && Count >= v25)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, (v25 - 1));
            if (ValueAtIndex)
            {
              v33 = ValueAtIndex;
              CString = CFStringGetCString(ValueAtIndex, buffer, 1000, 0x8000100u);
              v35 = buffer;
              if (!CString)
                v35 = 0;
              v54 = v35;
              CFRelease(v33);
            }
            else
            {
              v54 = 0;
            }
          }
          CFRelease(theArray);
          v40 = v54;
        }
        else
        {
          v40 = 0;
        }
        CFRelease(v29);
        CFRelease(v27);
        if (v40)
        {
          v44 = v13 != 0;
          v45 = strlen(v40);
          v46 = 19;
          goto LABEL_55;
        }
      }
      else
      {
        CFRelease(v27);
      }
LABEL_47:
      v17 = *__error();
      v47 = _SILogForLogForCategory(14);
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        goto LABEL_57;
      *(_DWORD *)at = 136315394;
      *(_QWORD *)&at[4] = "_SIPommesSuggestionsProcessPhotosAttribute";
      v59 = 1024;
      v60 = 1717;
      v19 = "%s:%d: converting month to string returned null";
      v20 = at;
      v21 = v47;
      v22 = 18;
      goto LABEL_59;
    case 0x2ALL:
      bzero(buffer, 0x3E8uLL);
      theArraya = (CFArrayRef)*(unsigned int *)v5;
      v36 = CFLocaleCopyCurrent();
      if (!v36)
        goto LABEL_56;
      v37 = v36;
      v38 = CFDateFormatterCreate(0, v36, kCFDateFormatterLongStyle, kCFDateFormatterNoStyle);
      if (v38)
      {
        v39 = v38;
        v40 = (const char *)CFStringCreateWithCString(0, "y", 0x8000100u);
        CFDateFormatterSetFormat(v39, (CFStringRef)v40);
        if (v40)
        {
          *(_QWORD *)at = 0;
          v41 = CFCalendarCopyCurrent();
          v55 = v40;
          if (v41)
          {
            v53 = v41;
            if (CFCalendarComposeAbsoluteTime(v41, (CFAbsoluteTime *)at, "y", theArraya)
              && (v42 = CFDateCreate(0, *(CFAbsoluteTime *)at)) != 0)
            {
              v52 = v42;
              StringWithDate = CFDateFormatterCreateStringWithDate(0, v39, v42);
              if (StringWithDate)
              {
                v40 = buffer;
                cf = StringWithDate;
                if (!CFStringGetCString(StringWithDate, buffer, 1000, 0x8000100u))
                  v40 = 0;
                CFRelease(cf);
              }
              else
              {
                v40 = 0;
              }
              CFRelease(v52);
            }
            else
            {
              v40 = 0;
            }
            CFRelease(v53);
          }
          else
          {
            v40 = 0;
          }
          CFRelease(v55);
        }
        CFRelease(v39);
        CFRelease(v37);
        if (v40)
        {
          v44 = v13 != 0;
          v45 = strlen(v40);
          v46 = 20;
LABEL_55:
          _SIPommesSuggestionsProcessPhotoAttribute(v7, (uint64_t)v8, v9, v10, v11, (uint64_t)v40, v45, (uint64_t)v12, v44, v46);
          return;
        }
      }
      else
      {
        CFRelease(v37);
      }
LABEL_56:
      v17 = *__error();
      v48 = _SILogForLogForCategory(14);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)at = 136315650;
        *(_QWORD *)&at[4] = "_SIPommesSuggestionsProcessPhotosAttribute";
        v59 = 1024;
        v60 = 1727;
        v61 = 1024;
        v62 = (int)theArraya;
        v19 = "%s:%d: converting year to string returned null for %d";
        v20 = at;
        v21 = v48;
        v22 = 24;
LABEL_59:
        _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, v19, (uint8_t *)v20, v22);
      }
LABEL_57:
      *__error() = v17;
      return;
    default:
      v17 = *__error();
      v18 = _SILogForLogForCategory(14);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        goto LABEL_57;
      *(_DWORD *)buffer = 136315650;
      *(_QWORD *)&buffer[4] = "_SIPommesSuggestionsProcessPhotosAttribute";
      *(_WORD *)&buffer[12] = 1024;
      *(_DWORD *)&buffer[14] = 1752;
      *(_WORD *)&buffer[18] = 2080;
      *(_QWORD *)&buffer[20] = v4;
      v19 = "%s:%d: Pommes Photos Suggestions cannot handle field %s";
      v20 = buffer;
      v21 = v18;
      v22 = 28;
      goto LABEL_59;
  }
}

void _SIPommesSuggestionsProcessPhotoAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, int a10)
{
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int32_t v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  int32_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  void *__p[2];
  char v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];
  _BYTE v34[62072];
  uint64_t v35;

  v10 = MEMORY[0x1E0C80A78](a1);
  v35 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(v13 + 32))
  {
    v19 = v18;
    v20 = v17;
    v21 = v16;
    v22 = v15;
    v23 = v14;
    v24 = v13;
    v25 = v12;
    v26 = v11;
    v27 = v10;
    v30 = 0;
    bzero(v34, 0xF278uLL);
    v33[0] = *(_QWORD *)(v24 + 88);
    v33[1] = v20;
    v33[2] = 0;
    v34[62064] = a9;
    pommesSuggestionsTokenizeString(v25, v22, v21, (unsigned __int16 *)&v30 + 1, (unsigned __int16 *)&v30, (uint64_t)v33, 1, 1, 0, (uint64_t)pommesSuggestionsGetTokenCallback, 0, 4u);
    if (HIWORD(v30))
    {
      v31 = 0;
      v32 = 0;
      if (v23)
      {
        if (icu_search_match())
        {
          std::string::basic_string[abi:nn180100]<0>(__p, v22);
          _AccumulatePhotosCandidates(v27 + 104, v26, (uint64_t)__p, a10, v19);
          if (v29 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
}

uint64_t ___ZL44SIPommesSpotlightPhotosSuggestionsProcessDBOP8DocStoreP14datastore_infoP6db_objP17_SuggestionsModelP11CITokenizerPPKjiPPKcP23si_completion_pattern_sSE_j16ci_rankingbits_sU13block_pointerFdPjPbSJ_E_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[5];

  v6 = *(_QWORD *)(*(_QWORD *)(result + 112) + 8);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 == -1 || v7 < a6)
  {
    *(_QWORD *)(v6 + 24) = a6;
    v12 = *(_QWORD *)(result + 128);
    v13 = *(_QWORD *)(result + 120) + 304;
    v14 = *(_QWORD *)(result + 136);
    v15 = *(_QWORD *)(result + 144);
    v16 = *(_QWORD *)(result + 152);
    v17 = *(_QWORD *)(result + 160);
    v18 = *(_BYTE *)(result + 184);
    v19 = *(_OWORD *)(result + 80);
    v21[2] = *(_OWORD *)(result + 64);
    v21[3] = v19;
    v21[4] = *(_OWORD *)(result + 96);
    v20 = *(_OWORD *)(result + 48);
    v21[0] = *(_OWORD *)(result + 32);
    v21[1] = v20;
    return _SIPommesSuggestionsProcessTopicAttribute(v13, v12, v14, v15, v16, a2, a3, a4, a5, v17, v18, 0, 23, v21, *(_DWORD *)(result + 180), *(_WORD *)(result + 185), HIBYTE(*(_WORD *)(result + 185)));
  }
  return result;
}

void std::__function::__func<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::~__func()
{
  JUMPOUT(0x1BCCB06A4);
}

__n128 std::__function::__func<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x88uLL);
  *(_QWORD *)v2 = &off_1E6E2AB30;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a2 = &off_1E6E2AB30;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 72);
  v6 = *(_OWORD *)(a1 + 88);
  v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

uint64_t std::__function::__func<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0,std::allocator<SIPommesSpotlightPhotosSuggestionsProcessDBO(DocStore *,datastore_info *,db_obj *,_SuggestionsModel *,CITokenizer *,unsigned int const**,int,char const**,si_completion_pattern_s *,char const**,unsigned int,ci_rankingbits_s,double({block_pointer})(unsigned int *,BOOL *,BOOL *))::$_0>,void ()(unsigned char const*,unsigned long,unsigned long,unsigned long)>::operator()(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  char v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[5];

  v3 = **(_QWORD **)(result + 8);
  if (v3 >= 5)
  {
    v4 = *a3;
    if ((double)(int)*a3 * 0.3 <= (double)v3)
    {
      v5 = *a2;
      v6 = **(_QWORD **)(result + 32) + 184;
      v7 = **(_QWORD **)(result + 40);
      v8 = **(_QWORD **)(result + 48);
      v9 = **(_QWORD **)(result + 56);
      v10 = **(_QWORD **)(result + 64);
      v11 = **(_QWORD **)(result + 72);
      v12 = *(_OWORD **)(result + 88);
      v13 = **(_BYTE **)(result + 80);
      v14 = v12[3];
      v16[2] = v12[2];
      v16[3] = v14;
      v16[4] = v12[4];
      v15 = v12[1];
      v16[0] = *v12;
      v16[1] = v15;
      return _SIPommesSuggestionsProcessTopicAttribute(v6, v7, v8, v9, v10, v5, v4, 0, 0, v11, v13, 0, 6, v16, **(_DWORD **)(result + 104), **(_BYTE **)(result + 112), **(_BYTE **)(result + 120));
    }
  }
  return result;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
            return;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v18 = operator new(0x28uLL);
  v18[1] = v10;
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  v18[4] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v26)
  {
    *v18 = *v26;
LABEL_44:
    *v26 = v18;
    goto LABEL_45;
  }
  v27 = *(_QWORD *)(a1 + 16);
  *v18 = v27;
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v25 + 8 * v14) = a1 + 16;
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
}

_QWORD *std::getline[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  v11 = 0;
  MEMORY[0x1BCCB0464](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    ++v6;
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void joinStringArrayWithDelim(uint64_t *a1, std::string *this)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v5 = *a1;
  v4 = a1[1];
  while (v5 != v4)
  {
    v6 = *(char *)(v5 + 23);
    if (v6 >= 0)
      v7 = (const std::string::value_type *)v5;
    else
      v7 = *(const std::string::value_type **)v5;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(v5 + 23);
    else
      v8 = *(_QWORD *)(v5 + 8);
    std::string::append(this, v7, v8);
    v4 = a1[1];
    if (v5 != v4 - 24)
    {
      std::string::push_back(this, 32);
      v4 = a1[1];
    }
    v5 += 24;
  }
}

BOOL std::__includes[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__less<void,void> &,std::__identity,std::__identity>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a3 == a4;
  if (a3 != a4 && a1 != a2)
  {
    while (1)
    {
      v5 = a3[4];
      v6 = a1[4];
      if (v5 < v6)
        break;
      if (v6 >= v5)
      {
        v8 = (_QWORD *)a3[1];
        if (v8)
        {
          do
          {
            v7 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)a3[2];
            v9 = *v7 == (_QWORD)a3;
            a3 = v7;
          }
          while (!v9);
        }
      }
      else
      {
        v7 = a3;
      }
      v10 = (_QWORD *)a1[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)a1[2];
          v9 = *v11 == (_QWORD)a1;
          a1 = v11;
        }
        while (!v9);
      }
      v4 = v7 == a4;
      if (v7 != a4)
      {
        a1 = v11;
        a3 = v7;
        if (v11 != a2)
          continue;
      }
      return v4;
    }
    return 0;
  }
  return v4;
}

double std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::insert_iterator<std::set<long long>>>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  double result;
  __int128 v12;

  v5 = a2;
  *(_QWORD *)&v12 = a4;
  *((_QWORD *)&v12 + 1) = a5;
  if (a2 != a3)
  {
    do
    {
      std::insert_iterator<std::set<long long>>::operator=[abi:nn180100]((uint64_t)&v12, v5[4]);
      v8 = (_QWORD *)v5[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v5[2];
          v10 = *v9 == (_QWORD)v5;
          v5 = v9;
        }
        while (!v10);
      }
      v5 = v9;
    }
    while (v9 != a3);
    v5 = a3;
  }
  *(_QWORD *)a1 = v5;
  result = *(double *)&v12;
  *(_OWORD *)(a1 + 8) = v12;
  return result;
}

uint64_t std::insert_iterator<std::set<long long>>::operator=[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  BOOL v6;

  v3 = std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), a2, a2);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      v5 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (uint64_t *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (!v6);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a1;
}

void dedupSuggestions(uint64_t *a1, int64x2_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  std::__split_buffer<std::string>::pointer end;
  char *v12;
  std::string *value;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64x2_t v18;
  std::string *v19;
  uint64_t v20;
  void **v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  std::__compressed_pair<std::string *> v29;
  unint64_t v30;
  uint64_t v31;
  std::string *v32;
  std::string *v33;
  uint64_t v34;
  std::ios_base *v35;
  std::allocator<std::string> *v36;
  unint64_t v37;
  std::string::size_type v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  const char *p_s;
  char *v43;
  char *v44;
  _OWORD *size;
  __int128 v46;
  _OWORD *v47;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  std::string *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string::size_type v63;
  __int128 v64;
  int64x2_t v65;
  std::string::size_type v66;
  std::string *v67;
  std::string::size_type v68;
  std::string::value_type *v69;
  __int128 v70;
  std::string::size_type v71;
  std::string::size_type v72;
  std::string::size_type v73;
  __int128 v74;
  int64x2_t v75;
  std::string *v76;
  int v77;
  NSObject *v78;
  std::string *v79;
  int v80;
  std::string *v81;
  std::string::size_type v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint8x8_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unsigned __int8 **v90;
  unsigned __int8 *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  std::__split_buffer<std::string>::pointer v103;
  char *v104;
  std::string *v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  int64x2_t v110;
  std::string *v111;
  _OWORD *v112;
  __int128 v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  std::string *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  std::string::value_type *v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  std::string::value_type *v125;
  __int128 v126;
  int64x2_t v127;
  std::string *v128;
  int64x2_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  void **v133;
  char *v134;
  unint64_t v135;
  std::string *v136;
  float v137;
  _BOOL8 v139;
  unint64_t v140;
  unint64_t v141;
  size_t v142;
  uint64_t v143;
  _QWORD *v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  std::__split_buffer<std::string>::pointer v160;
  char *v161;
  std::string *v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  int64x2_t v167;
  std::string *v168;
  _OWORD *v169;
  __int128 v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  std::string *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  std::string::value_type *v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  std::string::value_type *v182;
  __int128 v183;
  int64x2_t v184;
  std::string *v185;
  int64x2_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  std::string *v194;
  std::vector<std::string> *v195;
  char *v196;
  __int128 v197;
  std::string *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  _QWORD *v208;
  _QWORD *v209;
  __int128 *v210;
  unint64_t v211;
  char *v212;
  std::string::size_type v213;
  std::string::size_type v214;
  int64_t v215;
  unint64_t v216;
  std::string *v217;
  uint64_t v218;
  __int128 v219;
  __int128 *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  _QWORD *v230;
  BOOL v231;
  _QWORD *v232;
  uint64_t v233;
  _QWORD *v234;
  _QWORD *v235;
  uint64_t v236;
  float v237;
  __int128 *v238;
  unint64_t v239;
  char *v240;
  std::__split_buffer<std::string>::pointer begin;
  std::__split_buffer<std::string>::pointer v242;
  uint64_t v243;
  uint64_t v244;
  std::__split_buffer<std::string>::pointer first;
  std::string *v246;
  std::string *v247;
  void *v248;
  std::string::size_type v250;
  const std::string::value_type *v251;
  std::string *v252;
  std::string *v253;
  std::string *v254;
  std::string *v255;
  std::string *v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  _QWORD **v260;
  _QWORD *v261;
  uint64_t v262;
  _QWORD **v263;
  _QWORD *v264;
  uint64_t v265;
  _QWORD *v266;
  _QWORD *v267[2];
  _QWORD *v268;
  _QWORD *v269[2];
  _QWORD **v270;
  _QWORD *v271[2];
  std::string v272;
  std::string v273;
  int64x2_t v274;
  std::string *v275;
  void *v276;
  std::string *v277;
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  int64x2_t v282;
  _QWORD v283[2];
  int64x2_t v284;
  std::string *v285;
  std::string __p;
  std::__split_buffer<std::string> v287;
  __int128 __s;
  int64_t v289;
  std::__split_buffer<std::string> buf;
  std::__compressed_pair<std::string *> v291;
  std::__compressed_pair<std::string *> v292;
  _BYTE v293[48];
  _QWORD v294[2];
  std::__compressed_pair<std::string *> v295;
  std::__compressed_pair<std::string *> v296;
  std::__compressed_pair<std::string *> v297;
  std::__compressed_pair<std::string *> v298;
  std::__compressed_pair<std::string *> v299;
  std::__compressed_pair<std::string *> v300;
  std::__compressed_pair<std::string *> v301;
  std::__compressed_pair<std::string *> v302;
  uint64_t v303;
  uint64_t v304;

  v304 = *MEMORY[0x1E0C80C00];
  v284 = 0uLL;
  v285 = 0;
  v2 = *a1;
  if (*a1 == a1[1])
  {
    v23 = 0;
    v22 = 0;
  }
  else
  {
    do
    {
      v4 = v284.i64[1];
      if (v284.i64[1] >= (unint64_t)v285)
      {
        v6 = (v284.i64[1] - v284.i64[0]) >> 5;
        if ((unint64_t)(v6 + 1) >> 59)
          goto LABEL_396;
        v7 = ((uint64_t)v285 - v284.i64[0]) >> 4;
        if (v7 <= v6 + 1)
          v7 = v6 + 1;
        if ((unint64_t)v285 - v284.i64[0] >= 0x7FFFFFFFFFFFFFE0)
          v8 = 0x7FFFFFFFFFFFFFFLL;
        else
          v8 = v7;
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v285;
        if (v8)
        {
          v10 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v8);
        }
        else
        {
          v10 = 0;
          v9 = 0;
        }
        v12 = (char *)&v10[4 * v6];
        value = (std::string *)&v10[4 * v9];
        buf.__end_cap_.__value_ = value;
        if (*(char *)(v2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v10[4 * v6], *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
        }
        else
        {
          v14 = *(_OWORD *)v2;
          *((_QWORD *)v12 + 2) = *(_QWORD *)(v2 + 16);
          *(_OWORD *)v12 = v14;
        }
        buf.__begin_ = 0;
        buf.__first_ = 0;
        v10[4 * v6 + 3] = *(_QWORD *)(v2 + 24);
        end = (std::__split_buffer<std::string>::pointer)(v12 + 32);
        buf.__end_ = (std::__split_buffer<std::string>::pointer)(v12 + 32);
        v15 = v284.i64[1];
        v16 = v284.i64[0];
        if (v284.i64[1] == v284.i64[0])
        {
          v18 = vdupq_n_s64(v284.u64[1]);
        }
        else
        {
          do
          {
            v17 = *(_OWORD *)(v15 - 32);
            *((_QWORD *)v12 - 2) = *(_QWORD *)(v15 - 16);
            *((_OWORD *)v12 - 2) = v17;
            *(_QWORD *)(v15 - 24) = 0;
            *(_QWORD *)(v15 - 16) = 0;
            *(_QWORD *)(v15 - 32) = 0;
            *((_QWORD *)v12 - 1) = *(_QWORD *)(v15 - 8);
            v12 -= 32;
            v15 -= 32;
          }
          while (v15 != v16);
          v18 = v284;
          end = buf.__end_;
          value = buf.__end_cap_.__value_;
        }
        v284.i64[0] = (uint64_t)v12;
        v284.i64[1] = (uint64_t)end;
        *(int64x2_t *)&buf.__begin_ = v18;
        v19 = v285;
        v285 = value;
        buf.__end_cap_.__value_ = v19;
        buf.__first_ = (std::__split_buffer<std::string>::pointer)v18.i64[0];
        std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)&buf);
      }
      else
      {
        if (*(char *)(v2 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v284.i64[1], *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
        }
        else
        {
          v5 = *(_OWORD *)v2;
          *(_QWORD *)(v284.i64[1] + 16) = *(_QWORD *)(v2 + 16);
          *(_OWORD *)v4 = v5;
        }
        *(_QWORD *)(v4 + 24) = *(_QWORD *)(v2 + 24);
        end = (std::__split_buffer<std::string>::pointer)(v4 + 32);
      }
      v284.i64[1] = (uint64_t)end;
      std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(*a1, a1[1], (a1[1] - *a1) >> 5);
      v20 = a1[1];
      v21 = (void **)(v20 - 32);
      if (*(char *)(v20 - 9) < 0)
        operator delete(*v21);
      a1[1] = (uint64_t)v21;
      v2 = *a1;
    }
    while ((void **)*a1 != v21);
    v23 = v284.i64[1];
    v22 = v284.i64[0];
    if (v284.i64[0] != v284.i64[1])
    {
      v24 = v284.i64[1] - 32;
      if ((unint64_t)(v284.i64[1] - 32) > v284.i64[0])
      {
        do
        {
          v25 = *(_QWORD *)(v22 + 16);
          v26 = *(_OWORD *)v22;
          v27 = *(_QWORD *)(v24 + 16);
          *(_OWORD *)v22 = *(_OWORD *)v24;
          *(_QWORD *)(v22 + 16) = v27;
          *(_OWORD *)v24 = v26;
          *(_QWORD *)(v24 + 16) = v25;
          v28 = *(_QWORD *)(v22 + 24);
          *(_QWORD *)(v22 + 24) = *(_QWORD *)(v24 + 24);
          *(_QWORD *)(v24 + 24) = v28;
          v22 += 32;
          v24 -= 32;
        }
        while (v22 < v24);
        v23 = v284.i64[1];
        v22 = v284.i64[0];
      }
    }
  }
  v282 = 0uLL;
  v283[0] = 0;
  v29 = (std::__compressed_pair<std::string *>)0;
  v279 = 0u;
  v280 = 0u;
  v281 = 1065353216;
  v276 = 0;
  v277 = 0;
  v278 = 0;
  v274 = 0uLL;
  v275 = 0;
  if (v23 == v22)
  {
    memset(&v287, 0, 32);
    v287.__end_cap_.__value_ = (std::allocator<std::string> *)1065353216;
    goto LABEL_381;
  }
  v30 = 0;
  v256 = *(std::string **)(MEMORY[0x1E0DE4F58] + 8);
  v253 = (std::string *)*MEMORY[0x1E0DE4F58];
  v252 = *(std::string **)(MEMORY[0x1E0DE4F58] + 24);
  v255 = *(std::string **)(MEMORY[0x1E0DE4F58] + 16);
  v254 = (std::string *)(MEMORY[0x1E0DE4FB8] + 16);
  do
  {
    v31 = *(_QWORD *)(v22 + 32 * v30 + 24);
    memset(&v273, 0, sizeof(v273));
    v258 = v31;
    v32 = (std::string *)(v31 + 16);
    memset(&v272, 0, sizeof(v272));
    v303 = 0;
    v301 = v29;
    v302 = v29;
    v299 = v29;
    v300 = v29;
    v297 = v29;
    v298 = v29;
    v295 = v29;
    v296 = v29;
    *(std::__compressed_pair<std::string *> *)&v293[32] = v29;
    v294[1] = v29.std::__1::__compressed_pair_elem<std::allocator<std::string> &, 1, false>::__value_;
    *(std::__compressed_pair<std::string *> *)v293 = v29;
    *(std::__compressed_pair<std::string *> *)&v293[16] = v29;
    v291 = v29;
    v292 = v29;
    *(std::__compressed_pair<std::string *> *)&buf.__begin_ = v29;
    buf.__end_cap_ = v29;
    v33 = (std::string *)MEMORY[0x1E0DE4FD8];
    v34 = MEMORY[0x1E0DE4FD8] + 64;
    v294[0] = MEMORY[0x1E0DE4FD8] + 64;
    buf.__first_ = v256;
    *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + v256[-1].__r_.__value_.__r.__words[0]) = v255;
    buf.__begin_ = 0;
    v35 = (std::ios_base *)((char *)&buf + buf.__first_[-1].__r_.__value_.__r.__words[0]);
    std::ios_base::init(v35, &buf.__end_);
    v35[1].__vftable = 0;
    v35[1].__fmtflags_ = -1;
    buf.__first_ = v33 + 1;
    v294[0] = v34;
    std::streambuf::basic_streambuf();
    buf.__end_ = v254;
    v36 = (std::allocator<std::string> *)&v293[8];
    memset(&v293[8], 0, 32);
    *(_DWORD *)&v293[40] = 8;
    std::string::operator=((std::string *)&v293[8], v32);
    *(_QWORD *)&v293[32] = 0;
    if (v293[31] >= 0)
    {
      v37 = v293[31];
    }
    else
    {
      v36 = *(std::allocator<std::string> **)&v293[8];
      v37 = *(_QWORD *)&v293[16];
    }
    if ((v293[40] & 8) != 0)
    {
      buf.__end_cap_.__value_ = v36;
      v291.std::__1::__compressed_pair_elem<std::string *, 0, false>::__value_ = (std::string *)v36;
      *(_QWORD *)&v293[32] = (char *)v36 + v37;
      v291.std::__1::__compressed_pair_elem<std::allocator<std::string> &, 1, false>::__value_ = (std::allocator<std::string> *)((char *)v36 + v37);
    }
    if ((v293[40] & 0x10) != 0)
    {
      *(_QWORD *)&v293[32] = (char *)v36 + v37;
      if (v293[31] >= 0)
        v38 = 22;
      else
        v38 = (*(_QWORD *)&v293[24] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      std::string::resize((std::string *)&v293[8], v38, 0);
      v39 = v293[31];
      if (v293[31] < 0)
        v39 = *(_QWORD *)&v293[16];
      v292.std::__1::__compressed_pair_elem<std::allocator<std::string> &, 1, false>::__value_ = v36;
      v292.std::__1::__compressed_pair_elem<std::string *, 0, false>::__value_ = (std::string *)v36;
      *(_QWORD *)v293 = (char *)v36 + v39;
      if ((v293[40] & 3) != 0)
      {
        if (v37 >> 31)
        {
          v40 = ((v37 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
          v41 = 0x7FFFFFFF * ((v40 + ((v37 - 0x80000000 - v40) >> 1)) >> 30);
          v36 = (std::allocator<std::string> *)((char *)v36 + v41 + 0x7FFFFFFF);
          v37 = v37 - v41 - 0x7FFFFFFF;
          v292.std::__1::__compressed_pair_elem<std::allocator<std::string> &, 1, false>::__value_ = v36;
        }
        if (v37)
          v292.std::__1::__compressed_pair_elem<std::allocator<std::string> &, 1, false>::__value_ = (std::allocator<std::string> *)((char *)v36 + v37);
      }
    }
    __s = 0uLL;
    v289 = 0;
    while (1)
    {
      std::getline[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&buf, (uint64_t)&__s, 0x20u);
      if ((*((_BYTE *)&buf.__end_cap_.__value_ + buf.__first_[-1].__r_.__value_.__r.__words[0]) & 5) != 0)
        break;
      if (v289 >= 0)
        p_s = (const char *)&__s;
      else
        p_s = (const char *)__s;
      v43 = PRPommesStemWordWithCString(p_s, 100, 1);
      if (v43)
      {
        v44 = v43;
        std::string::basic_string[abi:nn180100]<0>(&__p, v43);
        size = (_OWORD *)v272.__r_.__value_.__l.__size_;
        if (v272.__r_.__value_.__l.__size_ >= v272.__r_.__value_.__r.__words[2])
        {
          v49 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v272.__r_.__value_.__l.__size_ - v272.__r_.__value_.__r.__words[0]) >> 3);
          v50 = v49 + 1;
          if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_396;
          if (0x5555555555555556
             * ((uint64_t)(v272.__r_.__value_.__r.__words[2] - v272.__r_.__value_.__r.__words[0]) >> 3) > v50)
            v50 = 0x5555555555555556
                * ((uint64_t)(v272.__r_.__value_.__r.__words[2] - v272.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v272.__r_.__value_.__r.__words[2] - v272.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            v51 = 0xAAAAAAAAAAAAAAALL;
          else
            v51 = v50;
          v287.__end_cap_.__value_ = (std::allocator<std::string> *)&v272.__r_.__value_.__r.__words[2];
          if (v51)
            v51 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v51);
          else
            v52 = 0;
          v59 = v51 + 24 * v49;
          v60 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v59 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v59 = v60;
          memset(&__p, 0, sizeof(__p));
          v61 = v272.__r_.__value_.__l.__size_;
          v62 = v272.__r_.__value_.__r.__words[0];
          if (v272.__r_.__value_.__l.__size_ == v272.__r_.__value_.__r.__words[0])
          {
            v65 = vdupq_n_s64(v272.__r_.__value_.__l.__size_);
            v63 = v51 + 24 * v49;
          }
          else
          {
            v63 = v51 + 24 * v49;
            do
            {
              v64 = *(_OWORD *)(v61 - 24);
              *(_QWORD *)(v63 - 8) = *(_QWORD *)(v61 - 8);
              *(_OWORD *)(v63 - 24) = v64;
              v63 -= 24;
              *(_QWORD *)(v61 - 16) = 0;
              *(_QWORD *)(v61 - 8) = 0;
              *(_QWORD *)(v61 - 24) = 0;
              v61 -= 24;
            }
            while (v61 != v62);
            v65 = *(int64x2_t *)&v272.__r_.__value_.__l.__data_;
          }
          v66 = v59 + 24;
          v272.__r_.__value_.__r.__words[0] = v63;
          v272.__r_.__value_.__l.__size_ = v59 + 24;
          *(int64x2_t *)&v287.__begin_ = v65;
          v67 = (std::string *)v272.__r_.__value_.__r.__words[2];
          v272.__r_.__value_.__r.__words[2] = v51 + 24 * v52;
          v287.__end_cap_.__value_ = v67;
          v287.__first_ = (std::__split_buffer<std::string>::pointer)v65.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v287);
          v272.__r_.__value_.__l.__size_ = v66;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v46 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v272.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *size = v46;
          memset(&__p, 0, sizeof(__p));
          v272.__r_.__value_.__l.__size_ = (std::string::size_type)size + 24;
        }
        free(v44);
      }
      else
      {
        v47 = (_OWORD *)v272.__r_.__value_.__l.__size_;
        if (v272.__r_.__value_.__l.__size_ >= v272.__r_.__value_.__r.__words[2])
        {
          v53 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v272.__r_.__value_.__l.__size_ - v272.__r_.__value_.__r.__words[0]) >> 3);
          v54 = v53 + 1;
          if (v53 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_396;
          if (0x5555555555555556
             * ((uint64_t)(v272.__r_.__value_.__r.__words[2] - v272.__r_.__value_.__r.__words[0]) >> 3) > v54)
            v54 = 0x5555555555555556
                * ((uint64_t)(v272.__r_.__value_.__r.__words[2] - v272.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v272.__r_.__value_.__r.__words[2] - v272.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            v55 = 0xAAAAAAAAAAAAAAALL;
          else
            v55 = v54;
          v287.__end_cap_.__value_ = (std::allocator<std::string> *)&v272.__r_.__value_.__r.__words[2];
          if (v55)
          {
            v56 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v55);
            v58 = v57;
          }
          else
          {
            v56 = 0;
            v58 = 0;
          }
          v69 = &v56->__r_.__value_.__s.__data_[24 * v53];
          if (SHIBYTE(v289) < 0)
          {
            std::string::__init_copy_ctor_external(v56 + v53, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
          }
          else
          {
            v70 = __s;
            *((_QWORD *)v69 + 2) = v289;
            *(_OWORD *)v69 = v70;
          }
          v71 = v272.__r_.__value_.__l.__size_;
          v72 = v272.__r_.__value_.__r.__words[0];
          if (v272.__r_.__value_.__l.__size_ == v272.__r_.__value_.__r.__words[0])
          {
            v75 = vdupq_n_s64(v272.__r_.__value_.__l.__size_);
            v73 = (std::string::size_type)(v56 + v53);
          }
          else
          {
            v73 = (std::string::size_type)(v56 + v53);
            do
            {
              v74 = *(_OWORD *)(v71 - 24);
              *(_QWORD *)(v73 - 8) = *(_QWORD *)(v71 - 8);
              *(_OWORD *)(v73 - 24) = v74;
              v73 -= 24;
              *(_QWORD *)(v71 - 16) = 0;
              *(_QWORD *)(v71 - 8) = 0;
              *(_QWORD *)(v71 - 24) = 0;
              v71 -= 24;
            }
            while (v71 != v72);
            v75 = *(int64x2_t *)&v272.__r_.__value_.__l.__data_;
          }
          v68 = (std::string::size_type)(v69 + 24);
          v272.__r_.__value_.__r.__words[0] = v73;
          v272.__r_.__value_.__l.__size_ = (std::string::size_type)(v69 + 24);
          *(int64x2_t *)&v287.__begin_ = v75;
          v76 = (std::string *)v272.__r_.__value_.__r.__words[2];
          v272.__r_.__value_.__r.__words[2] = (std::string::size_type)&v56[v58];
          v287.__end_cap_.__value_ = v76;
          v287.__first_ = (std::__split_buffer<std::string>::pointer)v75.i64[0];
          std::__split_buffer<std::string>::~__split_buffer(&v287);
        }
        else
        {
          if (SHIBYTE(v289) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v272.__r_.__value_.__l.__size_, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
          }
          else
          {
            v48 = __s;
            *(_QWORD *)(v272.__r_.__value_.__l.__size_ + 16) = v289;
            *v47 = v48;
          }
          v68 = (std::string::size_type)v47 + 24;
        }
        v272.__r_.__value_.__l.__size_ = v68;
      }
    }
    if (SHIBYTE(v289) < 0)
      operator delete((void *)__s);
    buf.__first_ = v253;
    *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + v253[-1].__r_.__value_.__r.__words[0]) = v252;
    buf.__end_ = (std::__split_buffer<std::string>::pointer)(MEMORY[0x1E0DE4FB8] + 16);
    if ((v293[31] & 0x80000000) != 0)
      operator delete(*(void **)&v293[8]);
    v259 = v30;
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x1BCCB0650](v294);
    joinStringArrayWithDelim((uint64_t *)&v272, &v273);
    v77 = *__error();
    v78 = _SILogForLogForCategory(14);
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v258 + 39) < 0)
        v32 = (std::string *)v32->__r_.__value_.__r.__words[0];
      v79 = &v273;
      if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v79 = (std::string *)v273.__r_.__value_.__r.__words[0];
      LODWORD(buf.__first_) = 136315394;
      *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = v32;
      WORD2(buf.__begin_) = 2080;
      *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__begin_ + 6) = v79;
      _os_log_impl(&dword_1B8270000, v78, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_debug: stemmed '%s' -> '%s'", (uint8_t *)&buf, 0x16u);
    }
    *__error() = v77;
    v80 = SHIBYTE(v273.__r_.__value_.__r.__words[2]);
    v250 = v273.__r_.__value_.__l.__size_;
    v251 = (const std::string::value_type *)v273.__r_.__value_.__r.__words[0];
    if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v81 = &v273;
    else
      v81 = (std::string *)v273.__r_.__value_.__r.__words[0];
    if ((v273.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v82 = HIBYTE(v273.__r_.__value_.__r.__words[2]);
    else
      v82 = v273.__r_.__value_.__l.__size_;
    v83 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)v81, v82);
    v84 = *((_QWORD *)&v279 + 1);
    if (!*((_QWORD *)&v279 + 1))
      goto LABEL_132;
    v85 = v83;
    v86 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v279 + 8));
    v86.i16[0] = vaddlv_u8(v86);
    v87 = v86.u32[0];
    if (v86.u32[0] > 1uLL)
    {
      v88 = v83;
      if (v83 >= *((_QWORD *)&v279 + 1))
        v88 = v83 % *((_QWORD *)&v279 + 1);
    }
    else
    {
      v88 = (*((_QWORD *)&v279 + 1) - 1) & v83;
    }
    v89 = v279;
    v90 = *(unsigned __int8 ***)(v279 + 8 * v88);
    if (!v90 || (v91 = *v90) == 0)
    {
LABEL_132:
      v93 = v284.i64[0];
      v94 = v259;
      v95 = v284.i64[0] + 32 * v259;
      v96 = v282.i64[1];
      if (v282.i64[1] >= v283[0])
      {
        v98 = (v282.i64[1] - v282.i64[0]) >> 5;
        if ((unint64_t)(v98 + 1) >> 59)
          goto LABEL_396;
        v99 = (v283[0] - v282.i64[0]) >> 4;
        if (v99 <= v98 + 1)
          v99 = v98 + 1;
        if (v283[0] - v282.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v100 = 0x7FFFFFFFFFFFFFFLL;
        else
          v100 = v99;
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)v283;
        if (v100)
        {
          v102 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v100);
        }
        else
        {
          v102 = 0;
          v101 = 0;
        }
        v104 = (char *)&v102[4 * v98];
        v105 = (std::string *)&v102[4 * v101];
        buf.__end_cap_.__value_ = v105;
        if (*(char *)(v95 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v102[4 * v98], *(const std::string::value_type **)v95, *(_QWORD *)(v95 + 8));
        }
        else
        {
          v106 = *(_OWORD *)v95;
          *((_QWORD *)v104 + 2) = *(_QWORD *)(v95 + 16);
          *(_OWORD *)v104 = v106;
        }
        buf.__begin_ = 0;
        buf.__first_ = 0;
        v102[4 * v98 + 3] = *(_QWORD *)(v93 + 32 * v259 + 24);
        v103 = (std::__split_buffer<std::string>::pointer)(v104 + 32);
        buf.__end_ = (std::__split_buffer<std::string>::pointer)(v104 + 32);
        v107 = v282.i64[1];
        v108 = v282.i64[0];
        if (v282.i64[1] == v282.i64[0])
        {
          v110 = vdupq_n_s64(v282.u64[1]);
        }
        else
        {
          do
          {
            v109 = *(_OWORD *)(v107 - 32);
            *((_QWORD *)v104 - 2) = *(_QWORD *)(v107 - 16);
            *((_OWORD *)v104 - 2) = v109;
            *(_QWORD *)(v107 - 24) = 0;
            *(_QWORD *)(v107 - 16) = 0;
            *(_QWORD *)(v107 - 32) = 0;
            *((_QWORD *)v104 - 1) = *(_QWORD *)(v107 - 8);
            v104 -= 32;
            v107 -= 32;
          }
          while (v107 != v108);
          v110 = v282;
          v103 = buf.__end_;
          v105 = buf.__end_cap_.__value_;
        }
        v282.i64[0] = (uint64_t)v104;
        v282.i64[1] = (uint64_t)v103;
        *(int64x2_t *)&buf.__begin_ = v110;
        v111 = (std::string *)v283[0];
        v283[0] = v105;
        buf.__end_cap_.__value_ = v111;
        buf.__first_ = (std::__split_buffer<std::string>::pointer)v110.i64[0];
        std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)&buf);
        v94 = v259;
      }
      else
      {
        if (*(char *)(v95 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v282.i64[1], *(const std::string::value_type **)v95, *(_QWORD *)(v95 + 8));
        }
        else
        {
          v97 = *(_OWORD *)v95;
          *(_QWORD *)(v282.i64[1] + 16) = *(_QWORD *)(v95 + 16);
          *(_OWORD *)v96 = v97;
        }
        *(_QWORD *)(v96 + 24) = *(_QWORD *)(v93 + 32 * v259 + 24);
        v103 = (std::__split_buffer<std::string>::pointer)(v96 + 32);
      }
      v282.i64[1] = (uint64_t)v103;
      std::vector<std::vector<std::string>>::push_back[abi:nn180100]((char **)&v276, (__int128 **)&v272);
      v112 = (_OWORD *)v274.i64[1];
      if (v274.i64[1] < (unint64_t)v275)
      {
        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v274.i64[1], v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
        }
        else
        {
          v113 = *(_OWORD *)&v273.__r_.__value_.__l.__data_;
          *(_QWORD *)(v274.i64[1] + 16) = *((_QWORD *)&v273.__r_.__value_.__l + 2);
          *v112 = v113;
        }
        v120 = (char *)v112 + 24;
LABEL_177:
        v274.i64[1] = (uint64_t)v120;
        v129 = v282;
        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&buf, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&buf.__first_ = *(_OWORD *)&v273.__r_.__value_.__l.__data_;
          buf.__end_ = (std::__split_buffer<std::string>::pointer)v273.__r_.__value_.__r.__words[2];
        }
        buf.__end_cap_.__value_ = (std::string *)(((v129.i64[1] - v129.i64[0]) >> 5) - 1);
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned long>>((uint64_t)&v279, (uint64_t)&buf, (__int128 *)&buf);
        if (SHIBYTE(buf.__end_) < 0)
          operator delete(buf.__first_);
        goto LABEL_182;
      }
      v114 = 0xAAAAAAAAAAAAAAABLL * ((v274.i64[1] - v274.i64[0]) >> 3);
      v115 = v114 + 1;
      if (v114 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        if (0x5555555555555556 * (((uint64_t)v275 - v274.i64[0]) >> 3) > v115)
          v115 = 0x5555555555555556 * (((uint64_t)v275 - v274.i64[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v275 - v274.i64[0]) >> 3) >= 0x555555555555555)
          v116 = 0xAAAAAAAAAAAAAAALL;
        else
          v116 = v115;
        buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v275;
        if (v116)
        {
          v117 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v116);
          v119 = v118;
        }
        else
        {
          v117 = 0;
          v119 = 0;
        }
        v121 = &v117->__r_.__value_.__s.__data_[24 * v114];
        if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v117 + v114, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
        }
        else
        {
          v122 = *(_OWORD *)&v273.__r_.__value_.__l.__data_;
          *((_QWORD *)v121 + 2) = *((_QWORD *)&v273.__r_.__value_.__l + 2);
          *(_OWORD *)v121 = v122;
        }
        v123 = v274.i64[1];
        v124 = v274.i64[0];
        if (v274.i64[1] == v274.i64[0])
        {
          v127 = vdupq_n_s64(v274.u64[1]);
          v125 = &v117->__r_.__value_.__s.__data_[24 * v114];
        }
        else
        {
          v125 = &v117->__r_.__value_.__s.__data_[24 * v114];
          do
          {
            v126 = *(_OWORD *)(v123 - 24);
            *((_QWORD *)v125 - 1) = *(_QWORD *)(v123 - 8);
            *(_OWORD *)(v125 - 24) = v126;
            v125 -= 24;
            *(_QWORD *)(v123 - 16) = 0;
            *(_QWORD *)(v123 - 8) = 0;
            *(_QWORD *)(v123 - 24) = 0;
            v123 -= 24;
          }
          while (v123 != v124);
          v127 = v274;
        }
        v120 = v121 + 24;
        v274.i64[0] = (uint64_t)v125;
        v274.i64[1] = (uint64_t)(v121 + 24);
        *(int64x2_t *)&buf.__begin_ = v127;
        v128 = v275;
        v275 = &v117[v119];
        buf.__end_cap_.__value_ = v128;
        buf.__first_ = (std::__split_buffer<std::string>::pointer)v127.i64[0];
        std::__split_buffer<std::string>::~__split_buffer(&buf);
        goto LABEL_177;
      }
LABEL_396:
      abort();
    }
    v257 = *((_QWORD *)&v279 + 1) - 1;
    while (1)
    {
      v92 = *((_QWORD *)v91 + 1);
      if (v92 == v85)
        break;
      if (v87 > 1)
      {
        if (v92 >= v84)
          v92 %= v84;
      }
      else
      {
        v92 &= v257;
      }
      if (v92 != v88)
        goto LABEL_132;
LABEL_131:
      v91 = *(unsigned __int8 **)v91;
      if (!v91)
        goto LABEL_132;
    }
    if (!std::equal_to<std::string>::operator()[abi:nn180100](v91 + 16, (unsigned __int8 *)&v273))
      goto LABEL_131;
    v130 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)v81, v82);
    v131 = v130;
    if (v87 > 1)
    {
      v132 = v130;
      if (v130 >= v84)
        v132 = v130 % v84;
    }
    else
    {
      v132 = v257 & v130;
    }
    v133 = *(void ***)(v89 + 8 * v132);
    if (v133)
    {
      v134 = (char *)*v133;
      if (*v133)
      {
        do
        {
          v135 = *((_QWORD *)v134 + 1);
          if (v135 == v131)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v134 + 16, (unsigned __int8 *)&v273))
            {
              v94 = v259;
              v159 = v258;
              goto LABEL_229;
            }
          }
          else
          {
            if (v87 > 1)
            {
              if (v135 >= v84)
                v135 %= v84;
            }
            else
            {
              v135 &= v257;
            }
            if (v135 != v132)
              break;
          }
          v134 = *(char **)v134;
        }
        while (v134);
      }
    }
    v134 = (char *)operator new(0x30uLL);
    *(_QWORD *)v134 = 0;
    *((_QWORD *)v134 + 1) = v131;
    v136 = (std::string *)(v134 + 16);
    if (v80 < 0)
    {
      std::string::__init_copy_ctor_external(v136, v251, v250);
    }
    else
    {
      *(_OWORD *)&v136->__r_.__value_.__l.__data_ = *(_OWORD *)&v273.__r_.__value_.__l.__data_;
      *((_QWORD *)v134 + 4) = *((_QWORD *)&v273.__r_.__value_.__l + 2);
    }
    v137 = (float)(unint64_t)(*((_QWORD *)&v280 + 1) + 1);
    *((_QWORD *)v134 + 5) = 0;
    v94 = v259;
    if ((float)(*(float *)&v281 * (float)v84) < v137)
    {
      v139 = v84 < 3 || v87 > 1;
      v140 = v139 | (2 * v84);
      v141 = vcvtps_u32_f32(v137 / *(float *)&v281);
      if (v140 <= v141)
        v142 = v141;
      else
        v142 = v140;
      std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>((uint64_t)&v279, v142);
      v84 = *((_QWORD *)&v279 + 1);
      if ((*((_QWORD *)&v279 + 1) & (*((_QWORD *)&v279 + 1) - 1)) != 0)
      {
        if (v131 >= *((_QWORD *)&v279 + 1))
          v132 = v131 % *((_QWORD *)&v279 + 1);
        else
          v132 = v131;
      }
      else
      {
        v132 = (*((_QWORD *)&v279 + 1) - 1) & v131;
      }
    }
    v143 = v279;
    v144 = *(_QWORD **)(v279 + 8 * v132);
    if (v144)
    {
      *(_QWORD *)v134 = *v144;
      v159 = v258;
      goto LABEL_227;
    }
    *(_QWORD *)v134 = v280;
    *(_QWORD *)&v280 = v134;
    *(_QWORD *)(v143 + 8 * v132) = &v280;
    v159 = v258;
    if (*(_QWORD *)v134)
    {
      v145 = *(_QWORD *)(*(_QWORD *)v134 + 8);
      if ((v84 & (v84 - 1)) != 0)
      {
        if (v145 >= v84)
          v145 %= v84;
      }
      else
      {
        v145 &= v84 - 1;
      }
      v144 = (_QWORD *)(v279 + 8 * v145);
LABEL_227:
      *v144 = v134;
    }
    ++*((_QWORD *)&v280 + 1);
LABEL_229:
    v146 = *((_QWORD *)v134 + 5);
    if (*(char *)(v159 + 39) < 0)
      v147 = *(_QWORD *)(v159 + 24);
    else
      v147 = *(unsigned __int8 *)(v159 + 39);
    v148 = *(_QWORD *)(v282.i64[0] + 32 * v146 + 24);
    if (*(char *)(v148 + 39) < 0)
      v149 = *(_QWORD *)(v148 + 24);
    else
      v149 = *(unsigned __int8 *)(v148 + 39);
    if (v147 >= v149)
      goto LABEL_182;
    v150 = v284.i64[0];
    v151 = v284.i64[0] + 32 * v94;
    v152 = v282.i64[1];
    if (v282.i64[1] < v283[0])
    {
      if (*(char *)(v151 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v282.i64[1], *(const std::string::value_type **)v151, *(_QWORD *)(v151 + 8));
      }
      else
      {
        v153 = *(_OWORD *)v151;
        *(_QWORD *)(v282.i64[1] + 16) = *(_QWORD *)(v151 + 16);
        *(_OWORD *)v152 = v153;
      }
      *(_QWORD *)(v152 + 24) = *(_QWORD *)(v150 + 32 * v94 + 24);
      v160 = (std::__split_buffer<std::string>::pointer)(v152 + 32);
      goto LABEL_258;
    }
    v154 = (v282.i64[1] - v282.i64[0]) >> 5;
    if ((unint64_t)(v154 + 1) >> 59)
      goto LABEL_396;
    v155 = (v283[0] - v282.i64[0]) >> 4;
    if (v155 <= v154 + 1)
      v155 = v154 + 1;
    if (v283[0] - v282.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
      v156 = 0x7FFFFFFFFFFFFFFLL;
    else
      v156 = v155;
    buf.__end_cap_.__value_ = (std::allocator<std::string> *)v283;
    if (v156)
    {
      v158 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v156);
    }
    else
    {
      v158 = 0;
      v157 = 0;
    }
    v161 = (char *)&v158[4 * v154];
    v162 = (std::string *)&v158[4 * v157];
    buf.__end_cap_.__value_ = v162;
    if (*(char *)(v151 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v158[4 * v154], *(const std::string::value_type **)v151, *(_QWORD *)(v151 + 8));
    }
    else
    {
      v163 = *(_OWORD *)v151;
      *((_QWORD *)v161 + 2) = *(_QWORD *)(v151 + 16);
      *(_OWORD *)v161 = v163;
    }
    buf.__begin_ = 0;
    buf.__first_ = 0;
    v158[4 * v154 + 3] = *(_QWORD *)(v150 + 32 * v259 + 24);
    v160 = (std::__split_buffer<std::string>::pointer)(v161 + 32);
    buf.__end_ = (std::__split_buffer<std::string>::pointer)(v161 + 32);
    v164 = v282.i64[1];
    v165 = v282.i64[0];
    if (v282.i64[1] == v282.i64[0])
    {
      v167 = vdupq_n_s64(v282.u64[1]);
    }
    else
    {
      do
      {
        v166 = *(_OWORD *)(v164 - 32);
        *((_QWORD *)v161 - 2) = *(_QWORD *)(v164 - 16);
        *((_OWORD *)v161 - 2) = v166;
        *(_QWORD *)(v164 - 24) = 0;
        *(_QWORD *)(v164 - 16) = 0;
        *(_QWORD *)(v164 - 32) = 0;
        *((_QWORD *)v161 - 1) = *(_QWORD *)(v164 - 8);
        v161 -= 32;
        v164 -= 32;
      }
      while (v164 != v165);
      v167 = v282;
      v160 = buf.__end_;
      v162 = buf.__end_cap_.__value_;
    }
    v282.i64[0] = (uint64_t)v161;
    v282.i64[1] = (uint64_t)v160;
    *(int64x2_t *)&buf.__begin_ = v167;
    v168 = (std::string *)v283[0];
    v283[0] = v162;
    buf.__end_cap_.__value_ = v168;
    buf.__first_ = (std::__split_buffer<std::string>::pointer)v167.i64[0];
    std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)&buf);
    v94 = v259;
LABEL_258:
    v282.i64[1] = (uint64_t)v160;
    std::vector<std::vector<std::string>>::push_back[abi:nn180100]((char **)&v276, (__int128 **)&v272);
    v169 = (_OWORD *)v274.i64[1];
    if (v274.i64[1] < (unint64_t)v275)
    {
      if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v274.i64[1], v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
      }
      else
      {
        v170 = *(_OWORD *)&v273.__r_.__value_.__l.__data_;
        *(_QWORD *)(v274.i64[1] + 16) = *((_QWORD *)&v273.__r_.__value_.__l + 2);
        *v169 = v170;
      }
      v177 = (char *)v169 + 24;
      goto LABEL_281;
    }
    v171 = 0xAAAAAAAAAAAAAAABLL * ((v274.i64[1] - v274.i64[0]) >> 3);
    v172 = v171 + 1;
    if (v171 + 1 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_396;
    if (0x5555555555555556 * (((uint64_t)v275 - v274.i64[0]) >> 3) > v172)
      v172 = 0x5555555555555556 * (((uint64_t)v275 - v274.i64[0]) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v275 - v274.i64[0]) >> 3) >= 0x555555555555555)
      v173 = 0xAAAAAAAAAAAAAAALL;
    else
      v173 = v172;
    buf.__end_cap_.__value_ = (std::allocator<std::string> *)&v275;
    if (v173)
    {
      v174 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v173);
      v176 = v175;
    }
    else
    {
      v174 = 0;
      v176 = 0;
    }
    v178 = &v174->__r_.__value_.__s.__data_[24 * v171];
    if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v174 + v171, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
    }
    else
    {
      v179 = *(_OWORD *)&v273.__r_.__value_.__l.__data_;
      *((_QWORD *)v178 + 2) = *((_QWORD *)&v273.__r_.__value_.__l + 2);
      *(_OWORD *)v178 = v179;
    }
    v180 = v274.i64[1];
    v181 = v274.i64[0];
    if (v274.i64[1] == v274.i64[0])
    {
      v184 = vdupq_n_s64(v274.u64[1]);
      v182 = &v174->__r_.__value_.__s.__data_[24 * v171];
    }
    else
    {
      v182 = &v174->__r_.__value_.__s.__data_[24 * v171];
      do
      {
        v183 = *(_OWORD *)(v180 - 24);
        *((_QWORD *)v182 - 1) = *(_QWORD *)(v180 - 8);
        *(_OWORD *)(v182 - 24) = v183;
        v182 -= 24;
        *(_QWORD *)(v180 - 16) = 0;
        *(_QWORD *)(v180 - 8) = 0;
        *(_QWORD *)(v180 - 24) = 0;
        v180 -= 24;
      }
      while (v180 != v181);
      v184 = v274;
    }
    v177 = v178 + 24;
    v274.i64[0] = (uint64_t)v182;
    v274.i64[1] = (uint64_t)(v178 + 24);
    *(int64x2_t *)&buf.__begin_ = v184;
    v185 = v275;
    v275 = &v174[v176];
    buf.__end_cap_.__value_ = v185;
    buf.__first_ = (std::__split_buffer<std::string>::pointer)v184.i64[0];
    std::__split_buffer<std::string>::~__split_buffer(&buf);
LABEL_281:
    v274.i64[1] = (uint64_t)v177;
    v186 = v282;
    if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&buf, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&buf.__first_ = *(_OWORD *)&v273.__r_.__value_.__l.__data_;
      buf.__end_ = (std::__split_buffer<std::string>::pointer)v273.__r_.__value_.__r.__words[2];
    }
    buf.__end_cap_.__value_ = (std::string *)(((v186.i64[1] - v186.i64[0]) >> 5) - 1);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned long>>((uint64_t)&v279, (uint64_t)&buf, (__int128 *)&buf);
    if (SHIBYTE(buf.__end_) < 0)
      operator delete(buf.__first_);
    v187 = v282.i64[1];
    v188 = v282.i64[0] + 32 * v146;
    v189 = v188 + 32;
    if (v188 + 32 != v282.i64[1])
    {
      do
      {
        if (*(char *)(v188 + 23) < 0)
          operator delete(*(void **)v188);
        *(_OWORD *)v188 = *(_OWORD *)(v188 + 32);
        v190 = *(_QWORD *)(v188 + 48);
        *(_BYTE *)(v188 + 55) = 0;
        *(_BYTE *)(v188 + 32) = 0;
        v191 = v188 + 32;
        v192 = *(_QWORD *)(v188 + 56);
        *(_QWORD *)(v188 + 16) = v190;
        *(_QWORD *)(v188 + 24) = v192;
        v193 = v188 + 64;
        v188 += 32;
      }
      while (v193 != v187);
      v189 = v282.i64[1];
      v188 = v191;
    }
    while (v189 != v188)
    {
      if (*(char *)(v189 - 9) < 0)
        operator delete(*(void **)(v189 - 32));
      v189 -= 32;
    }
    v282.i64[1] = v188;
    v194 = v277;
    v195 = (std::vector<std::string> *)((char *)v276 + 24 * v146);
    if (&v195[1] != (std::vector<std::string> *)v277)
    {
      v196 = (char *)v276 + 24 * v146;
      do
      {
        std::vector<std::string>::__vdeallocate(v195);
        v197 = *(_OWORD *)(v196 + 24);
        v196 += 24;
        *(_OWORD *)&v195->__begin_ = v197;
        v195->__end_cap_.__value_ = v195[1].__end_cap_.__value_;
        v195[1].__end_ = 0;
        v195[1].__end_cap_.__value_ = 0;
        *(_QWORD *)v196 = 0;
        v198 = (std::string *)&v195[2];
        v195 = (std::vector<std::string> *)v196;
      }
      while (v198 != v194);
      v195 = (std::vector<std::string> *)v196;
    }
    while (v194 != (std::string *)v195)
    {
      buf.__first_ = --v194;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
    }
    v277 = (std::string *)v195;
    v199 = v274.i64[1];
    v200 = v274.i64[0] + 24 * v146;
    v201 = v200 + 24;
    if (v200 + 24 != v274.i64[1])
    {
      do
      {
        if (*(char *)(v200 + 23) < 0)
          operator delete(*(void **)v200);
        *(_OWORD *)v200 = *(_OWORD *)(v200 + 24);
        *(_QWORD *)(v200 + 16) = *(_QWORD *)(v200 + 40);
        *(_BYTE *)(v200 + 47) = 0;
        v202 = v200 + 48;
        *(_BYTE *)(v200 + 24) = 0;
        v200 += 24;
      }
      while (v202 != v199);
      v201 = v274.i64[1];
    }
    for (; v201 != v200; v201 -= 24)
    {
      if (*(char *)(v201 - 1) < 0)
        operator delete(*(void **)(v201 - 24));
    }
    v274.i64[1] = v200;
LABEL_182:
    buf.__first_ = &v272;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
    if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v273.__r_.__value_.__l.__data_);
    v30 = v94 + 1;
    v22 = v284.i64[0];
    v29 = (std::__compressed_pair<std::string *>)0;
  }
  while (v30 < (v284.i64[1] - v284.i64[0]) >> 5);
  v203 = v282.i64[0];
  memset(&v287, 0, 32);
  v287.__end_cap_.__value_ = (std::allocator<std::string> *)1065353216;
  if (v282.i64[1] != v282.i64[0])
  {
    v204 = 0;
    do
    {
      v205 = *(_QWORD *)(v203 + 32 * v204 + 24);
      memset(&__p, 0, sizeof(__p));
      v206 = v274.i64[0] + 24 * v204;
      if (*(char *)(v206 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v206, *(_QWORD *)(v206 + 8));
      else
        __p = *(std::string *)v206;
      memset(&v273, 0, sizeof(v273));
      std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(&v273, *((__int128 **)v276 + 3 * v204), *((__int128 **)v276 + 3 * v204 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v276 + 3 * v204 + 1) - *((_QWORD *)v276 + 3 * v204)) >> 3));
      if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((uint64_t)v287.__first_, (unint64_t)v287.__begin_, (uint64_t)&__p))
      {
        v269[0] = 0;
        v269[1] = 0;
        v268 = v269;
        std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>((uint64_t *)&v268, *(_QWORD **)(v205 + 40), (_QWORD *)(v205 + 48));
        v207 = std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v287, (uint64_t)&__p, (uint64_t)&__p);
        v267[0] = 0;
        v267[1] = 0;
        v266 = v267;
        std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>((uint64_t *)&v266, *((_QWORD **)v207 + 5), (_QWORD *)v207 + 6);
        v208 = v266;
        v209 = v268;
        if (std::__includes[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__less<void,void> &,std::__identity,std::__identity>(v266, v267, v268, v269)|| std::__includes[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__less<void,void> &,std::__identity,std::__identity>(v209, v269, v208, v267))
        {
          std::__tree<long long>::destroy(v267[0]);
          std::__tree<long long>::destroy(v269[0]);
        }
        else
        {
          v220 = &__s;
          v264 = 0;
          v265 = 0;
          v263 = &v264;
          std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>((uint64_t *)&v263, *(_QWORD **)(v205 + 40), (_QWORD *)(v205 + 48));
          v221 = std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v287, (uint64_t)&__p, (uint64_t)&__p);
          v261 = 0;
          v262 = 0;
          v260 = &v261;
          std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>((uint64_t *)&v260, *((_QWORD **)v221 + 5), (_QWORD *)v221 + 6);
          v222 = (char *)&__s + 8;
          v223 = (uint64_t)v260;
          *((_QWORD *)&__s + 1) = 0;
          v289 = 0;
          *(_QWORD *)&__s = (char *)&__s + 8;
          v224 = (uint64_t)v263;
          v272.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s;
          v272.__r_.__value_.__l.__size_ = (std::string::size_type)&__s + 8;
          if (v263 == &v264)
          {
LABEL_363:
            v234 = (_QWORD *)v223;
            v235 = &v261;
            v236 = (uint64_t)v220;
          }
          else
          {
            while ((_QWORD **)v223 != &v261)
            {
              v225 = *(_QWORD *)(v224 + 32);
              v226 = *(_QWORD *)(v223 + 32);
              if (v225 >= v226)
              {
                if (v226 >= v225)
                {
                  v230 = *(_QWORD **)(v224 + 8);
                  if (v230)
                  {
                    do
                    {
                      v229 = v230;
                      v230 = (_QWORD *)*v230;
                    }
                    while (v230);
                  }
                  else
                  {
                    do
                    {
                      v229 = *(_QWORD **)(v224 + 16);
                      v231 = *v229 == v224;
                      v224 = (uint64_t)v229;
                    }
                    while (!v231);
                  }
                }
                else
                {
                  std::insert_iterator<std::set<long long>>::operator=[abi:nn180100]((uint64_t)&v272, v226);
                  v229 = (_QWORD *)v224;
                }
                v232 = *(_QWORD **)(v223 + 8);
                if (v232)
                {
                  do
                  {
                    v223 = (uint64_t)v232;
                    v232 = (_QWORD *)*v232;
                  }
                  while (v232);
                }
                else
                {
                  do
                  {
                    v233 = v223;
                    v223 = *(_QWORD *)(v223 + 16);
                  }
                  while (*(_QWORD *)v223 != v233);
                }
                v224 = (uint64_t)v229;
              }
              else
              {
                std::insert_iterator<std::set<long long>>::operator=[abi:nn180100]((uint64_t)&v272, *(_QWORD *)(v224 + 32));
                v227 = *(_QWORD **)(v224 + 8);
                if (v227)
                {
                  do
                  {
                    v224 = (uint64_t)v227;
                    v227 = (_QWORD *)*v227;
                  }
                  while (v227);
                }
                else
                {
                  do
                  {
                    v228 = v224;
                    v224 = *(_QWORD *)(v224 + 16);
                  }
                  while (*(_QWORD *)v224 != v228);
                }
              }
              if ((_QWORD **)v224 == &v264)
              {
                v222 = (char *)v272.__r_.__value_.__l.__size_;
                v220 = (__int128 *)v272.__r_.__value_.__r.__words[0];
                goto LABEL_363;
              }
            }
            v222 = (char *)v272.__r_.__value_.__l.__size_;
            v236 = v272.__r_.__value_.__r.__words[0];
            v234 = (_QWORD *)v224;
            v235 = &v264;
          }
          std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>,std::insert_iterator<std::set<long long>>>((uint64_t)&buf, v234, v235, v236, (uint64_t)v222);
          v237 = 1.0;
          if (v265 + v262)
            v237 = (double)(unint64_t)v289 / (double)(unint64_t)(v262 + v265);
          std::__tree<long long>::destroy(*((_QWORD **)&__s + 1));
          std::__tree<long long>::destroy(v261);
          std::__tree<long long>::destroy(v264);
          std::__tree<long long>::destroy(v267[0]);
          std::__tree<long long>::destroy(v269[0]);
          if (v237 > 0.3)
          {
            v238 = (__int128 *)(v282.i64[0] + 32 * v204);
            v239 = a2->u64[1];
            if (v239 >= a2[1].i64[0])
            {
              v240 = std::vector<std::pair<std::string,_freeTextCandidate *>>::__push_back_slow_path<std::pair<std::string,_freeTextCandidate *> const&>(a2, v238);
            }
            else
            {
              std::vector<std::pair<std::string,_freeTextCandidate *>>::__construct_one_at_end[abi:nn180100]<std::pair<std::string,_freeTextCandidate *> const&>((uint64_t)a2, v238);
              v240 = (char *)(v239 + 32);
            }
            a2->i64[1] = (uint64_t)v240;
          }
        }
      }
      else
      {
        *((_QWORD *)&__s + 1) = 0;
        v289 = 0;
        *(_QWORD *)&__s = (char *)&__s + 8;
        std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>((uint64_t *)&__s, *(_QWORD **)(v205 + 40), (_QWORD *)(v205 + 48));
        std::pair<std::string,std::set<long long>>::pair[abi:nn180100]<std::string&,std::set<long long>,0>((std::string *)&buf, (__int128 *)&__p, (std::string::size_type *)&__s);
        std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<long long>>>((uint64_t)&v287, (uint64_t)&buf, (uint64_t)&buf);
        std::__tree<long long>::destroy(buf.__end_cap_.__value_);
        if (SHIBYTE(buf.__end_) < 0)
          operator delete(buf.__first_);
        std::__tree<long long>::destroy(*((_QWORD **)&__s + 1));
        v210 = (__int128 *)(v282.i64[0] + 32 * v204);
        v211 = a2->u64[1];
        if (v211 >= a2[1].i64[0])
        {
          v212 = std::vector<std::pair<std::string,_freeTextCandidate *>>::__push_back_slow_path<std::pair<std::string,_freeTextCandidate *> const&>(a2, v210);
        }
        else
        {
          std::vector<std::pair<std::string,_freeTextCandidate *>>::__construct_one_at_end[abi:nn180100]<std::pair<std::string,_freeTextCandidate *> const&>((uint64_t)a2, v210);
          v212 = (char *)(v211 + 32);
        }
        a2->i64[1] = (uint64_t)v212;
        v213 = v273.__r_.__value_.__r.__words[0];
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v273.__r_.__value_.__l.__size_ - v273.__r_.__value_.__r.__words[0]) >> 3) >= 3)
        {
          v214 = v273.__r_.__value_.__l.__size_ - 24;
          __s = 0uLL;
          v289 = 0;
          v215 = v273.__r_.__value_.__l.__size_ - 24 - v273.__r_.__value_.__r.__words[0];
          if (v215)
          {
            v216 = 0xAAAAAAAAAAAAAAABLL * (v215 >> 3);
            if (v216 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_396;
            v217 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v216);
            *(_QWORD *)&__s = v217;
            *((_QWORD *)&__s + 1) = v217;
            v289 = (int64_t)&v217[v218];
            do
            {
              if (*(char *)(v213 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v217, *(const std::string::value_type **)v213, *(_QWORD *)(v213 + 8));
              }
              else
              {
                v219 = *(_OWORD *)v213;
                v217->__r_.__value_.__r.__words[2] = *(_QWORD *)(v213 + 16);
                *(_OWORD *)&v217->__r_.__value_.__l.__data_ = v219;
              }
              v213 += 24;
              ++v217;
            }
            while (v213 != v214);
            *((_QWORD *)&__s + 1) = v217;
          }
          memset(&v272, 0, sizeof(v272));
          joinStringArrayWithDelim((uint64_t *)&__s, &v272);
          if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((uint64_t)v287.__first_, (unint64_t)v287.__begin_, (uint64_t)&v272))
          {
            v271[0] = 0;
            v271[1] = 0;
            v270 = v271;
            std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>((uint64_t *)&v270, *(_QWORD **)(v205 + 40), (_QWORD *)(v205 + 48));
            std::pair<std::string,std::set<long long>>::pair[abi:nn180100]<std::string&,std::set<long long>,0>((std::string *)&buf, (__int128 *)&v272, (std::string::size_type *)&v270);
            std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<long long>>>((uint64_t)&v287, (uint64_t)&buf, (uint64_t)&buf);
            std::__tree<long long>::destroy(buf.__end_cap_.__value_);
            if (SHIBYTE(buf.__end_) < 0)
              operator delete(buf.__first_);
            std::__tree<long long>::destroy(v271[0]);
          }
          if (SHIBYTE(v272.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v272.__r_.__value_.__l.__data_);
          buf.__first_ = (std::__split_buffer<std::string>::pointer)&__s;
          std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
        }
      }
      buf.__first_ = &v273;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v204;
      v203 = v282.i64[0];
    }
    while (v204 < (v282.i64[1] - v282.i64[0]) >> 5);
    if (v287.__end_cap_.__value_)
    {
      std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__deallocate_node(v287.__end_->__r_.__value_.__r.__words);
      v287.__end_ = 0;
      begin = v287.__begin_;
      if (v287.__begin_)
      {
        v242 = 0;
        do
        {
          v287.__first_->__r_.__value_.__r.__words[(_QWORD)v242] = 0;
          v242 = (std::__split_buffer<std::string>::pointer)((char *)v242 + 1);
        }
        while (begin != v242);
      }
      v287.__end_cap_.__value_ = 0;
    }
  }
LABEL_381:
  if (*((_QWORD *)&v280 + 1))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v280);
    *(_QWORD *)&v280 = 0;
    v243 = *((_QWORD *)&v279 + 1);
    if (*((_QWORD *)&v279 + 1))
    {
      v244 = 0;
      do
        *(_QWORD *)(v279 + 8 * v244++) = 0;
      while (v243 != v244);
    }
    *((_QWORD *)&v280 + 1) = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__deallocate_node(v287.__end_->__r_.__value_.__r.__words);
  first = v287.__first_;
  v287.__first_ = 0;
  if (first)
    operator delete(first);
  buf.__first_ = (std::__split_buffer<std::string>::pointer)&v274;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
  v246 = (std::string *)v276;
  if (v276)
  {
    v247 = v277;
    while (v247 != v246)
    {
      buf.__first_ = --v247;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
    }
    operator delete(v246);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v280);
  v248 = (void *)v279;
  *(_QWORD *)&v279 = 0;
  if (v248)
    operator delete(v248);
  buf.__first_ = (std::__split_buffer<std::string>::pointer)&v282;
  std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
  buf.__first_ = (std::__split_buffer<std::string>::pointer)&v284;
  std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)&buf);
}

char *std::vector<std::pair<std::string,_freeTextCandidate *>>::__push_back_slow_path<std::pair<std::string,_freeTextCandidate *> const&>(int64x2_t *a1, __int128 *a2)
{
  uint64_t v2;
  unint64_t v3;
  int64x2_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  uint64_t v21;
  int64x2_t v22;
  char *v23;
  uint64_t *v24;

  v2 = (a1->i64[1] - a1->i64[0]) >> 5;
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59)
    abort();
  v6 = a1 + 1;
  v7 = a1[1].i64[0] - a1->i64[0];
  if (v7 >> 4 > v3)
    v3 = v7 >> 4;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0)
    v8 = 0x7FFFFFFFFFFFFFFLL;
  else
    v8 = v3;
  v24 = (uint64_t *)v6;
  if (v8)
  {
    v10 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v8);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v11 = (char *)&v10[4 * v2];
  v12 = (char *)&v10[4 * v9];
  v23 = v12;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v10[4 * v2], *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v13 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v13;
  }
  v22.i64[0] = 0;
  v10[4 * v2 + 3] = *((_QWORD *)a2 + 3);
  v14 = v11 + 32;
  v22.i64[1] = (uint64_t)(v11 + 32);
  v16 = a1->i64[0];
  v15 = a1->u64[1];
  if (v15 == a1->i64[0])
  {
    v18 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      v17 = *(_OWORD *)(v15 - 32);
      *((_QWORD *)v11 - 2) = *(_QWORD *)(v15 - 16);
      *((_OWORD *)v11 - 2) = v17;
      *(_QWORD *)(v15 - 24) = 0;
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v15 - 32) = 0;
      *((_QWORD *)v11 - 1) = *(_QWORD *)(v15 - 8);
      v11 -= 32;
      v15 -= 32;
    }
    while (v15 != v16);
    v18 = *a1;
    v14 = (char *)v22.i64[1];
    v12 = v23;
  }
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)v14;
  v22 = v18;
  v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v12;
  v23 = v19;
  v21 = v18.i64[0];
  std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)&v21);
  return v14;
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void **v16;
  int v17;
  __int128 v18;
  _BYTE v19[15];

  if (a3 >= 2)
  {
    v6 = 0;
    v7 = *(_QWORD *)a1;
    *(_QWORD *)v19 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v19[7] = *(_QWORD *)(a1 + 15);
    v8 = *(_BYTE *)(a1 + 23);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = (unint64_t)(a3 - 2) >> 1;
    v11 = a1;
    do
    {
      v12 = v11 + 32 * (v6 + 1);
      v13 = 2 * v6;
      v6 = (2 * v6) | 1;
      v14 = v13 + 2;
      if (v14 < a3 && *(float *)(*(_QWORD *)(v12 + 24) + 4) > *(float *)(*(_QWORD *)(v12 + 56) + 4))
      {
        v12 += 32;
        v6 = v14;
      }
      if (*(char *)(v11 + 23) < 0)
        operator delete(*(void **)v11);
      v15 = *(_OWORD *)v12;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
      *(_OWORD *)v11 = v15;
      *(_BYTE *)(v12 + 23) = 0;
      *(_BYTE *)v12 = 0;
      *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
      v11 = v12;
    }
    while (v6 <= v10);
    v16 = (void **)(a2 - 32);
    v17 = *(char *)(v12 + 23);
    if (a2 - 32 == v12)
    {
      if (v17 < 0)
        operator delete(*(void **)v12);
      *(_QWORD *)v12 = v7;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)v19;
      *(_QWORD *)(v12 + 15) = *(_QWORD *)&v19[7];
      *(_BYTE *)(v12 + 23) = v8;
      *(_QWORD *)(v12 + 24) = v9;
    }
    else
    {
      if (v17 < 0)
        operator delete(*(void **)v12);
      v18 = *(_OWORD *)v16;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 - 16);
      *(_OWORD *)v12 = v18;
      *(_BYTE *)(a2 - 9) = 0;
      *(_BYTE *)(a2 - 32) = 0;
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(a2 - 8);
      if (*(char *)(a2 - 9) < 0)
        operator delete(*v16);
      *(_QWORD *)(a2 - 32) = v7;
      *(_QWORD *)(a2 - 24) = *(_QWORD *)v19;
      *(_QWORD *)(a2 - 17) = *(_QWORD *)&v19[7];
      *(_BYTE *)(a2 - 9) = v8;
      *(_QWORD *)(a2 - 8) = v9;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText &,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(a1, v12 + 32, (v12 + 32 - a1) >> 5);
    }
  }
}

void std::vector<std::vector<std::string>>::push_back[abi:nn180100](char **a1, __int128 **a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  void **v18;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    *((_QWORD *)v5 + 2) = 0;
    std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
    v6 = v5 + 24;
    goto LABEL_20;
  }
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)*a1) >> 3);
  v9 = 2 * v8;
  if (2 * v8 <= v7 + 1)
    v9 = v7 + 1;
  if (v8 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v9;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v11 = (char *)operator new(24 * v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = &v11[24 * v7];
  v13 = &v11[24 * v10];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(v12, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v6 = v12 + 24;
  v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v12;
    a1[1] = v6;
    a1[2] = v13;
    if (!v15)
      goto LABEL_20;
    goto LABEL_19;
  }
  do
  {
    *((_QWORD *)v12 - 3) = 0;
    *((_QWORD *)v12 - 2) = 0;
    v12 -= 24;
    *((_QWORD *)v12 + 2) = 0;
    v16 = *(_OWORD *)(v15 - 24);
    v15 -= 24;
    *(_OWORD *)v12 = v16;
    *((_QWORD *)v12 + 2) = *((_QWORD *)v15 + 2);
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = 0;
  }
  while (v15 != v14);
  v17 = *a1;
  v15 = a1[1];
  *a1 = v12;
  a1[1] = v6;
  a1[2] = v13;
  if (v15 != v17)
  {
    do
    {
      v15 -= 24;
      v18 = (void **)v15;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v18);
    }
    while (v15 != v17);
    v15 = v17;
  }
  if (v15)
LABEL_19:
    operator delete(v15);
LABEL_20:
  a1[1] = v6;
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string,unsigned long>>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
            return;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v18 = operator new(0x30uLL);
  v19 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v20 = *((_QWORD *)a3 + 2);
  v21 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 2) = 0;
  v18[1] = v10;
  *((_OWORD *)v18 + 1) = v19;
  v18[4] = v20;
  v18[5] = v21;
  v22 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    v24 = 1;
    if (v11 >= 3)
      v24 = (v11 & (v11 - 1)) != 0;
    v25 = v24 | (2 * v11);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      v27 = v26;
    else
      v27 = v25;
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v27);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v28 = *(_QWORD *)a1;
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v29)
  {
    *v18 = *v29;
LABEL_44:
    *v29 = v18;
    goto LABEL_45;
  }
  v30 = *(_QWORD *)(a1 + 16);
  *v18 = v30;
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v28 + 8 * v14) = a1 + 16;
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v29 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
}

void std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0)
          operator delete(*(v4 - 4));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::set<long long>::insert[abi:nn180100]<std::__tree_const_iterator<long long,std::__tree_node<long long,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<long long>::__emplace_hint_unique_key_args<long long,long long const&>(v5, v6, v4[4], v4[4]);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

std::string *std::pair<std::string,std::set<long long>>::pair[abi:nn180100]<std::string&,std::set<long long>,0>(std::string *this, __int128 *a2, std::string::size_type *a3)
{
  __int128 v5;
  _QWORD *v6;
  std::string::size_type v7;
  std::string::value_type *v8;
  std::string::size_type v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = *a3;
  v6 = a3 + 1;
  v7 = a3[1];
  this[1].__r_.__value_.__l.__size_ = v7;
  v8 = &this[1].__r_.__value_.__s.__data_[8];
  v9 = a3[2];
  this[1].__r_.__value_.__r.__words[2] = v9;
  if (v9)
  {
    *(_QWORD *)(v7 + 16) = v8;
    *a3 = (std::string::size_type)v6;
    *v6 = 0;
    a3[2] = 0;
  }
  else
  {
    this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  }
  return this;
}

void std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::set<long long>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _QWORD v36[2];
  uint64_t v37;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
            return;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v18 = (_QWORD *)(a1 + 16);
  v37 = 0;
  v19 = operator new(0x40uLL);
  v20 = v19;
  v36[0] = v19;
  v36[1] = a1 + 16;
  *v19 = 0;
  v19[1] = v10;
  *((_OWORD *)v19 + 1) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v21 = *(_QWORD *)(a3 + 16);
  v22 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = 0;
  v23 = (_QWORD *)(a3 + 32);
  v24 = *(_QWORD *)(a3 + 32);
  v19[4] = v21;
  v19[5] = v22;
  v19[6] = v24;
  v25 = (char *)(v19 + 6);
  v26 = *(_QWORD *)(a3 + 40);
  v19[7] = v26;
  if (v26)
  {
    *(_QWORD *)(v24 + 16) = v25;
    *(_QWORD *)(a3 + 24) = v23;
    *v23 = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  else
  {
    v19[5] = v25;
  }
  LOBYTE(v37) = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v29 = 1;
    if (v11 >= 3)
      v29 = (v11 & (v11 - 1)) != 0;
    v30 = v29 | (2 * v11);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      v32 = v31;
    else
      v32 = v30;
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v32);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v33 = *(_QWORD *)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v34)
  {
    *v20 = *v34;
LABEL_47:
    *v34 = v20;
    goto LABEL_48;
  }
  *v20 = *v18;
  *v18 = v20;
  *(_QWORD *)(v33 + 8 * v14) = v18;
  if (*v20)
  {
    v35 = *(_QWORD *)(*v20 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11)
        v35 %= v11;
    }
    else
    {
      v35 &= v11 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_47;
  }
LABEL_48:
  v36[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<long long>>,void *>>>>::reset[abi:nn180100]((uint64_t)v36);
}

void std::vector<std::pair<std::string,_freeTextCandidate *>>::__construct_one_at_end[abi:nn180100]<std::pair<std::string,_freeTextCandidate *> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  *(_QWORD *)(v4 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 8) = v4 + 32;
}

char *std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  char *v16;
  unint64_t v17;
  _QWORD *v18;
  std::string *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  uint64_t v31;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      v16 = (char *)*v15;
      if (*v15)
      {
        do
        {
          v17 = *((_QWORD *)v16 + 1);
          if (v17 == v10)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v16 + 16, (unsigned __int8 *)a2))
            {
              return v16;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v17 >= v11)
                v17 %= v11;
            }
            else
            {
              v17 &= v11 - 1;
            }
            if (v17 != v14)
              break;
          }
          v16 = *(char **)v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v18 = (_QWORD *)(a1 + 16);
  v31 = 0;
  v16 = (char *)operator new(0x40uLL);
  v30[0] = v16;
  v30[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v10;
  v19 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_QWORD *)v16 + 6) = 0;
  *((_QWORD *)v16 + 7) = 0;
  *((_QWORD *)v16 + 5) = v16 + 48;
  LOBYTE(v31) = 1;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v27)
  {
    *(_QWORD *)v16 = *v27;
LABEL_47:
    *v27 = v16;
    goto LABEL_48;
  }
  *(_QWORD *)v16 = *v18;
  *v18 = v16;
  *(_QWORD *)(v26 + 8 * v14) = v18;
  if (*(_QWORD *)v16)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_47;
  }
LABEL_48:
  v30[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<long long>>,void *>>>>::reset[abi:nn180100]((uint64_t)v30);
  return v16;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::set<long long>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::set<long long>>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::set<long long>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::set<long long>>,0>(uint64_t a1)
{
  std::__tree<long long>::destroy(*(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::set<long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::set<long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::set<long long>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::set<long long>>,0>((uint64_t)(v1 + 2));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText &,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  char v9;
  __int128 *v10;
  __int128 v11;
  _BYTE v12[15];

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = v3 >> 1;
    v6 = *(_QWORD *)(a2 - 8);
    if (*(float *)(*(_QWORD *)(a1 + 32 * (v3 >> 1) + 24) + 4) > *(float *)(v6 + 4))
    {
      v8 = *(_QWORD *)(a2 - 32);
      v7 = (__int128 *)(a2 - 32);
      *(_QWORD *)v12 = *(_QWORD *)(a2 - 24);
      *(_QWORD *)&v12[7] = *(_QWORD *)(a2 - 17);
      v9 = *(_BYTE *)(a2 - 9);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = 0;
      do
      {
        if (*((char *)v7 + 23) < 0)
          operator delete(*(void **)v7);
        v10 = (__int128 *)(a1 + 32 * v5);
        v11 = *v10;
        *((_QWORD *)v7 + 2) = *((_QWORD *)v10 + 2);
        *v7 = v11;
        *((_BYTE *)v10 + 23) = 0;
        *(_BYTE *)v10 = 0;
        *((_QWORD *)v7 + 3) = *((_QWORD *)v10 + 3);
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v7 = v10;
      }
      while (*(float *)(*(_QWORD *)(a1 + 32 * v5 + 24) + 4) > *(float *)(v6 + 4));
      if (*((char *)v10 + 23) < 0)
        operator delete(*(void **)v10);
      *(_QWORD *)v10 = v8;
      *((_QWORD *)v10 + 1) = *(_QWORD *)v12;
      *(_QWORD *)((char *)v10 + 15) = *(_QWORD *)&v12[7];
      *((_BYTE *)v10 + 23) = v9;
      *((_QWORD *)v10 + 3) = v6;
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(32 * a1);
}

uint64_t std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void SIPommesEnumerateSuggestions(uint64_t a1, uint64_t a2, int a3, char a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int64x2_t v43;
  uint64_t v44;
  void **v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  const char *v55;
  CFStringRef v56;
  CFStringRef v57;
  uint64_t v58;
  int v59;
  unint64_t v62;
  BOOL v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  __darwin_ct_rune_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v83;
  std::string *v84;
  uint64_t v85;
  int v86;
  NSObject *v87;
  int v88;
  NSObject *v89;
  std::string::size_type size;
  uint64_t v91;
  __int128 *i;
  uint64_t v93;
  int v94;
  uint64_t v95;
  __int128 *v96;
  uint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint8x8_t v103;
  unint64_t v104;
  unint64_t v105;
  unsigned __int8 **v106;
  unsigned __int8 *v107;
  unint64_t v108;
  unint64_t v109;
  __int128 v110;
  std::string *v111;
  uint64_t v112;
  unint64_t v113;
  __int128 v114;
  std::string *v115;
  float v116;
  double v117;
  double v118;
  BOOL v120;
  BOOL v121;
  BOOL v122;
  int v123;
  NSObject *v124;
  int v125;
  char v126;
  _BOOL4 v127;
  const std::string::value_type *v128;
  uint64_t v129;
  int v130;
  const std::string::value_type *v131;
  uint64_t v132;
  int v133;
  _QWORD *v134;
  char v135;
  char v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  NSObject *v141;
  uint64_t v142;
  NSObject *v143;
  const char *v144;
  uint32_t v145;
  unint64_t v146;
  std::string::size_type v147;
  NSObject *v148;
  __int128 v149;
  uint64_t p_size;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  uint64_t v155;
  std::string *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  __int128 v160;
  int64x2_t v161;
  NSObject *v162;
  NSObject *v163;
  uint64_t v164;
  __int128 *v165;
  uint64_t v166;
  __int128 v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  char *v173;
  char *v174;
  char *v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  int64x2_t v180;
  char *v181;
  __int128 v182;
  uint64_t v183;
  void **v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  std::string *v194;
  uint64_t v195;
  __int128 v196;
  std::string *v197;
  std::string::pointer data;
  int v199;
  int v200;
  NSObject *v201;
  int v202;
  NSObject *v203;
  uint64_t v204;
  int v205;
  NSObject *v206;
  const char *v207;
  uint64_t v208;
  uint64_t *v209;
  const std::string::value_type **v210;
  uint64_t v211;
  std::string::size_type v212;
  uint64_t v213;
  int v214;
  std::string::size_type v215;
  const std::string::value_type *v216;
  std::string *p_s1;
  std::string *v218;
  uint64_t v219;
  int v220;
  NSObject *v221;
  NSObject *v222;
  const char *v223;
  NSObject *v224;
  std::string::size_type v225;
  unint64_t v226;
  std::string::size_type v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  char *v232;
  uint64_t v233;
  std::string *v234;
  unint64_t v235;
  uint64_t v236;
  std::string *v237;
  __int128 v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  __int128 v243;
  int64x2_t v244;
  uint64_t v245;
  __int128 *v246;
  uint64_t v247;
  __int128 v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  __int128 v257;
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  int64x2_t v261;
  unint64_t v262;
  void **v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  __int128 v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  const CFArrayCallBacks *v273;
  const char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  CFStringRef v279;
  __CFArray *Mutable;
  uint64_t v281;
  uint64_t v282;
  const char *v283;
  CFStringRef v284;
  CFStringRef v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  int v289;
  NSObject *v290;
  uint64_t v291;
  uint64_t v292;
  double v293;
  double v294;
  double v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  int v299;
  int v300;
  int v301;
  int v302;
  uint64_t j;
  uint64_t v304;
  const char *v305;
  CFStringRef v306;
  CFStringRef v307;
  int v308;
  NSObject *v309;
  double v310;
  uint64_t v311;
  double v312;
  double v313;
  uint64_t v314;
  void **v315;
  void **v316;
  void *v317;
  void *v318;
  std::string *v319;
  std::string::pointer v320;
  std::string *p_str;
  int64_t v322;
  unint64_t v323;
  _BYTE *v324;
  std::string *v325;
  _BYTE *v326;
  std::string *v327;
  uint64_t v328;
  std::string *v329;
  std::string::pointer v330;
  void *v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  char v336;
  uint64_t v337;
  std::string *v340[4];
  int64x2_t v341;
  unint64_t v342;
  std::string *v343;
  std::string *v344;
  char *v345;
  std::string v346;
  std::string __str;
  std::string::size_type v348;
  std::string v349;
  void *v350[2];
  void *__p[2];
  uint64_t v352;
  _BYTE v353[32];
  uint64_t v354;
  int64x2_t v355;
  char *v356;
  std::string v357;
  std::string __s1;
  std::string v359[5];
  _BYTE v360[32];
  __int16 v361;
  double v362;
  __int16 v363;
  uint64_t v364;
  __int16 v365;
  unint64_t v366;
  __int16 v367;
  uint64_t v368;
  __int16 v369;
  int v370;
  __int16 v371;
  int v372;
  __int16 v373;
  uint64_t v374;
  __int16 v375;
  int v376;
  __int16 v377;
  int v378;
  _BYTE buf[32];
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  uint64_t v393;

  v393 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return;
  if (!a2)
    return;
  v9 = *(char **)(a2 + 16);
  if (!v9)
    return;
  v10 = a1;
  if (*(_QWORD *)(a1 + 128))
  {
    memset(v360, 0, sizeof(v360));
    v11 = *(uint64_t **)(a1 + 120);
    if (!v11)
    {
      memset(v353, 0, 24);
      goto LABEL_122;
    }
    while (1)
    {
      v12 = *(_QWORD *)&v360[8];
      if (*(_QWORD *)&v360[8] - *(_QWORD *)v360 != 320)
        goto LABEL_11;
      if (**(float **)(*(_QWORD *)v360 + 24) <= *(float *)v11[5])
        break;
LABEL_29:
      v11 = (uint64_t *)*v11;
      if (!v11)
      {
        v28 = *(__int128 **)v360;
        memset(v353, 0, 24);
        if (*(_QWORD *)v360 == *(_QWORD *)&v360[8])
          goto LABEL_122;
        do
        {
          v29 = *(_QWORD *)&v353[8];
          if (*(_QWORD *)&v353[8] >= *(_QWORD *)&v353[16])
          {
            v31 = (uint64_t)(*(_QWORD *)&v353[8] - *(_QWORD *)v353) >> 5;
            if ((unint64_t)(v31 + 1) >> 59)
              goto LABEL_556;
            v32 = (uint64_t)(*(_QWORD *)&v353[16] - *(_QWORD *)v353) >> 4;
            if (v32 <= v31 + 1)
              v32 = v31 + 1;
            if (*(_QWORD *)&v353[16] - *(_QWORD *)v353 >= 0x7FFFFFFFFFFFFFE0uLL)
              v33 = 0x7FFFFFFFFFFFFFFLL;
            else
              v33 = v32;
            *(_QWORD *)&v380 = &v353[16];
            if (v33)
            {
              v35 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v33);
            }
            else
            {
              v35 = 0;
              v34 = 0;
            }
            v37 = (char *)&v35[4 * v31];
            v38 = (char *)&v35[4 * v34];
            *(_QWORD *)&buf[24] = v38;
            if (*((char *)v28 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v35[4 * v31], *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
            }
            else
            {
              v39 = *v28;
              *((_QWORD *)v37 + 2) = *((_QWORD *)v28 + 2);
              *(_OWORD *)v37 = v39;
            }
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)buf = 0;
            v35[4 * v31 + 3] = *((_QWORD *)v28 + 3);
            v36 = v37 + 32;
            *(_QWORD *)&buf[16] = v37 + 32;
            v40 = *(_QWORD *)&v353[8];
            v41 = *(_QWORD *)v353;
            if (*(_QWORD *)&v353[8] == *(_QWORD *)v353)
            {
              v43 = vdupq_n_s64(*(unint64_t *)&v353[8]);
            }
            else
            {
              do
              {
                v42 = *(_OWORD *)(v40 - 32);
                *((_QWORD *)v37 - 2) = *(_QWORD *)(v40 - 16);
                *((_OWORD *)v37 - 2) = v42;
                *(_QWORD *)(v40 - 24) = 0;
                *(_QWORD *)(v40 - 16) = 0;
                *(_QWORD *)(v40 - 32) = 0;
                *((_QWORD *)v37 - 1) = *(_QWORD *)(v40 - 8);
                v37 -= 32;
                v40 -= 32;
              }
              while (v40 != v41);
              v43 = *(int64x2_t *)v353;
              v36 = *(char **)&buf[16];
              v38 = *(char **)&buf[24];
            }
            *(_QWORD *)v353 = v37;
            *(_QWORD *)&v353[8] = v36;
            *(int64x2_t *)&buf[8] = v43;
            v44 = *(_QWORD *)&v353[16];
            *(_QWORD *)&v353[16] = v38;
            *(_QWORD *)&buf[24] = v44;
            *(_QWORD *)buf = v43.i64[0];
            std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            if (*((char *)v28 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)&v353[8], *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
            }
            else
            {
              v30 = *v28;
              *(_QWORD *)(*(_QWORD *)&v353[8] + 16) = *((_QWORD *)v28 + 2);
              *(_OWORD *)v29 = v30;
            }
            *(_QWORD *)(v29 + 24) = *((_QWORD *)v28 + 3);
            v36 = (char *)(v29 + 32);
          }
          *(_QWORD *)&v353[8] = v36;
          std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_comparePhoto,std::__wrap_iter<std::pair<std::string,_photosCandidate *> *>>(*(uint64_t *)v360, *(uint64_t *)&v360[8], (uint64_t)(*(_QWORD *)&v360[8] - *(_QWORD *)v360) >> 5);
          v45 = (void **)(*(_QWORD *)&v360[8] - 32);
          if (*(char *)(*(_QWORD *)&v360[8] - 9) < 0)
            operator delete(*v45);
          *(_QWORD *)&v360[8] = v45;
          v28 = *(__int128 **)v360;
        }
        while (*(void ***)v360 != v45);
        v46 = *(_QWORD *)&v353[8];
        v47 = *(_QWORD *)v353;
        if (*(_QWORD *)v353 != *(_QWORD *)&v353[8])
        {
          v48 = *(_QWORD *)&v353[8] - 32;
          if ((unint64_t)(*(_QWORD *)&v353[8] - 32) > *(_QWORD *)v353)
          {
            do
            {
              v49 = *(_QWORD *)(v47 + 16);
              v50 = *(_OWORD *)v47;
              v51 = *(_QWORD *)(v48 + 16);
              *(_OWORD *)v47 = *(_OWORD *)v48;
              *(_QWORD *)(v47 + 16) = v51;
              *(_OWORD *)v48 = v50;
              *(_QWORD *)(v48 + 16) = v49;
              v52 = *(_QWORD *)(v47 + 24);
              *(_QWORD *)(v47 + 24) = *(_QWORD *)(v48 + 24);
              *(_QWORD *)(v48 + 24) = v52;
              v47 += 32;
              v48 -= 32;
            }
            while (v47 < v48);
            v46 = *(_QWORD *)&v353[8];
            v47 = *(_QWORD *)v353;
          }
        }
        LOBYTE(v350[0]) = 0;
        if (v47 == v46)
          goto LABEL_122;
        v53 = 0;
        v54 = 0;
        v337 = v46;
        while (2)
        {
          v55 = (const char *)v47;
          if (*(char *)(v47 + 23) < 0)
            v55 = *(const char **)v47;
          v56 = CFStringCreateWithCString(0, v55, 0x8000100u);
          if (!v56)
            goto LABEL_108;
          v57 = v56;
          v58 = *(_QWORD *)v353;
          v59 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v353 + 32 * v53 + 24) + 8);
          if (v59 != 18 && v59 != 9 || v53 == 0)
            goto LABEL_105;
          v62 = 0;
          v63 = 1;
LABEL_73:
          v64 = v58 + 32 * v53;
          v65 = *(unsigned __int8 *)(v64 + 23);
          if (*(char *)(v64 + 23) < 0)
            v66 = *(_QWORD *)(v64 + 8);
          else
            v66 = *(unsigned __int8 *)(v64 + 23);
          v67 = v58 + 32 * v62;
          v68 = *(unsigned __int8 *)(v67 + 23);
          if (*(char *)(v67 + 23) < 0)
            v69 = *(_QWORD *)(v67 + 8);
          else
            v69 = *(unsigned __int8 *)(v67 + 23);
          if (v69 >= v66)
            v70 = v66;
          else
            v70 = v69;
          if ((v65 & 0x80) != 0)
          {
            v65 = *(_QWORD *)(v64 + 8);
            if ((v68 & 0x80) != 0)
              goto LABEL_97;
          }
          else
          {
            if ((v68 & 0x80) == 0)
              goto LABEL_84;
LABEL_97:
            v68 = *(_QWORD *)(v67 + 8);
          }
LABEL_84:
          if (v65 <= v68)
            v71 = v68;
          else
            v71 = v65;
          if (v70)
          {
            v72 = 0;
            v73 = 0.0;
            do
            {
              v74 = *(_QWORD *)v353 + 32 * v53;
              if (*(char *)(v74 + 23) < 0)
                v74 = *(_QWORD *)v74;
              v75 = __tolower(*(char *)(v74 + v72));
              v76 = *(_QWORD *)v353 + 32 * v62;
              if (*(char *)(v76 + 23) < 0)
                v76 = *(_QWORD *)v76;
              if (v75 != __tolower(*(char *)(v76 + v72)))
                break;
              v73 = v73 + 1.0;
              ++v72;
            }
            while (v70 != v72);
            v58 = *(_QWORD *)v353;
          }
          else
          {
            v73 = 0.0;
          }
          if (*(_DWORD *)(*(_QWORD *)(v58 + 32 * v53 + 24) + 4) == *(_DWORD *)(*(_QWORD *)(v58 + 32 * v62 + 24) + 4))
            v77 = v70;
          else
            v77 = v71;
          if ((float)(v73 / (float)v77) >= 0.75 || (++v62, v63 = v62 < v53, v62 == v53))
          {
            v46 = v337;
            if (!v63)
            {
LABEL_105:
              v78 = *(_QWORD *)(v47 + 24);
              if ((*(_DWORD *)(v78 + 8) - 17) <= 1)
                *(_DWORD *)(v78 + 8) = 9;
              v391 = 0u;
              v392 = 0u;
              v389 = 0u;
              v390 = 0u;
              v388 = 0u;
              v385 = 0u;
              v386 = 0u;
              v383 = 0u;
              v384 = 0u;
              v381 = 0u;
              v382 = 0u;
              v380 = 0u;
              memset(buf, 0, sizeof(buf));
              v387 = (unint64_t)v57;
              v79 = *(_QWORD *)(v47 + 24);
              *(double *)&v391 = *(float *)v79;
              HIDWORD(v391) = *(_DWORD *)(v79 + 8);
              (*(void (**)(uint64_t, _BYTE *, void **))(a8 + 16))(a8, buf, v350);
              CFRelease(v57);
              ++v54;
            }
LABEL_108:
            v47 += 32;
            if (v47 == v46 || (++v53, v54 >= 7))
            {
LABEL_122:
              *(_QWORD *)buf = v353;
              std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
              *(_QWORD *)buf = v360;
              std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
              return;
            }
            continue;
          }
          goto LABEL_73;
        }
      }
    }
    std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_comparePhoto,std::__wrap_iter<std::pair<std::string,_photosCandidate *> *>>(*(uint64_t *)v360, *(uint64_t *)&v360[8], 10);
    v12 = *(_QWORD *)&v360[8] - 32;
    if (*(char *)(*(_QWORD *)&v360[8] - 9) < 0)
      operator delete(*(void **)v12);
    *(_QWORD *)&v360[8] = v12;
LABEL_11:
    v13 = v11[5];
    if (*((char *)v11 + 39) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v353, (const std::string::value_type *)v11[2], v11[3]);
      v12 = *(_QWORD *)&v360[8];
    }
    else
    {
      *(_OWORD *)v353 = *((_OWORD *)v11 + 1);
      *(_QWORD *)&v353[16] = v11[4];
    }
    *(_QWORD *)&v353[24] = v13;
    if (v12 >= *(_QWORD *)&v360[16])
    {
      v16 = (uint64_t)(v12 - *(_QWORD *)v360) >> 5;
      if ((unint64_t)(v16 + 1) >> 59)
        goto LABEL_556;
      v17 = (uint64_t)(*(_QWORD *)&v360[16] - *(_QWORD *)v360) >> 4;
      if (v17 <= v16 + 1)
        v17 = v16 + 1;
      if (*(_QWORD *)&v360[16] - *(_QWORD *)v360 >= 0x7FFFFFFFFFFFFFE0uLL)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      *(_QWORD *)&v380 = &v360[16];
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v18);
      v21 = &v19[32 * v16];
      *((_QWORD *)v21 + 2) = *(_QWORD *)&v353[16];
      *(_OWORD *)v21 = *(_OWORD *)v353;
      memset(v353, 0, 24);
      *((_QWORD *)v21 + 3) = v13;
      v22 = *(_QWORD *)&v360[8];
      v23 = *(_QWORD *)v360;
      if (*(_QWORD *)&v360[8] == *(_QWORD *)v360)
      {
        v26 = vdupq_n_s64(*(unint64_t *)&v360[8]);
        v24 = &v19[32 * v16];
      }
      else
      {
        v24 = &v19[32 * v16];
        do
        {
          v25 = *(_OWORD *)(v22 - 32);
          *((_QWORD *)v24 - 2) = *(_QWORD *)(v22 - 16);
          *((_OWORD *)v24 - 2) = v25;
          *(_QWORD *)(v22 - 24) = 0;
          *(_QWORD *)(v22 - 16) = 0;
          *(_QWORD *)(v22 - 32) = 0;
          *((_QWORD *)v24 - 1) = *(_QWORD *)(v22 - 8);
          v24 -= 32;
          v22 -= 32;
        }
        while (v22 != v23);
        v26 = *(int64x2_t *)v360;
      }
      v15 = (uint64_t)(v21 + 32);
      *(_QWORD *)v360 = v24;
      *(_QWORD *)&v360[8] = v21 + 32;
      *(int64x2_t *)&buf[8] = v26;
      v27 = *(_QWORD *)&v360[16];
      *(_QWORD *)&v360[16] = &v19[32 * v20];
      *(_QWORD *)&buf[24] = v27;
      *(_QWORD *)buf = v26.i64[0];
      std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)buf);
    }
    else
    {
      v14 = *(_OWORD *)v353;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)&v353[16];
      *(_OWORD *)v12 = v14;
      memset(v353, 0, 24);
      *(_QWORD *)(v12 + 24) = *(_QWORD *)&v353[24];
      v15 = v12 + 32;
    }
    *(_QWORD *)&v360[8] = v15;
    std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_comparePhoto &,std::__wrap_iter<std::pair<std::string,_photosCandidate *> *>>(*(uint64_t *)v360, v15, (v15 - *(_QWORD *)v360) >> 5);
    goto LABEL_29;
  }
  if (*(_QWORD *)(a1 + 168)
    || *(_QWORD *)(a1 + 208)
    || *(_QWORD *)(a1 + 248)
    || *(_QWORD *)(a1 + 288)
    || *(_QWORD *)(a1 + 328))
  {
    _SIPommesSpotlightEnumerateTopicSuggestions(*(uint64_t **)(a1 + 160), *(_QWORD *)(a1 + 168), 1uLL, a8);
    _SIPommesSpotlightEnumerateTopicSuggestions(*(uint64_t **)(v10 + 200), *(_QWORD *)(v10 + 208), 1uLL, a8);
    _SIPommesSpotlightEnumerateTopicSuggestions(*(uint64_t **)(v10 + 240), *(_QWORD *)(v10 + 248), 3uLL, a8);
    _SIPommesSpotlightEnumerateTopicSuggestions(*(uint64_t **)(v10 + 280), *(_QWORD *)(v10 + 288), 3uLL, a8);
    _SIPommesSpotlightEnumerateTopicSuggestions(*(uint64_t **)(v10 + 320), *(_QWORD *)(v10 + 328), 0xAuLL, a8);
    v9 = *(char **)(a2 + 16);
  }
  v336 = a4;
  memset(v359, 0, 24);
  std::string::basic_string[abi:nn180100]<0>(v359, v9);
  memset(&__s1, 0, sizeof(__s1));
  if (SHIBYTE(v359[0].__r_.__value_.__r.__words[2]) < 0)
  {
    if (v359[0].__r_.__value_.__l.__size_ < 2)
      goto LABEL_132;
    v84 = (std::string *)v359[0].__r_.__value_.__r.__words[0];
    if (*(_BYTE *)(v359[0].__r_.__value_.__r.__words[0] + v359[0].__r_.__value_.__l.__size_ - 1) != 42)
      goto LABEL_132;
    v83 = --v359[0].__r_.__value_.__l.__size_;
  }
  else
  {
    if (HIBYTE(v359[0].__r_.__value_.__r.__words[2]) < 2u
      || v359[0].__r_.__value_.__s.__data_[HIBYTE(v359[0].__r_.__value_.__r.__words[2]) - 1] != 42)
    {
      goto LABEL_132;
    }
    v83 = HIBYTE(v359[0].__r_.__value_.__r.__words[2]) - 1;
    *((_BYTE *)&v359[0].__r_.__value_.__s + 23) = (*((_BYTE *)&v359[0].__r_.__value_.__s + 23) - 1) & 0x7F;
    v84 = v359;
  }
  v84->__r_.__value_.__s.__data_[v83] = 0;
  if (SHIBYTE(v359[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v357, v359[0].__r_.__value_.__l.__data_, v359[0].__r_.__value_.__l.__size_);
  else
    v357 = v359[0];
  v85 = stringToLowerCase((uint64_t *)&v357, &__s1, 1);
  if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v357.__r_.__value_.__l.__data_);
  if (v85)
  {
LABEL_132:
    v86 = *__error();
    v87 = _SILogForLogForCategory(14);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v87, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]----------New Request----------", buf, 2u);
    }
    *__error() = v86;
    v88 = *__error();
    v89 = _SILogForLogForCategory(14);
    if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
    {
      size = HIBYTE(v359[0].__r_.__value_.__r.__words[2]);
      if ((v359[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v359[0].__r_.__value_.__l.__size_;
      v91 = *(_QWORD *)(a2 + 32);
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = size;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v91;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = a7;
      _os_log_impl(&dword_1B8270000, v89, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_query_info: ss_len:%ld sc_qf_count:%ld lang:%s ", buf, 0x20u);
    }
    *__error() = v88;
    v355 = 0uLL;
    v356 = 0;
    memset(v353, 0, sizeof(v353));
    v354 = 1065353216;
    *(_OWORD *)v350 = 0u;
    *(_OWORD *)__p = 0u;
    v352 = 1065353216;
    if (*(_QWORD *)(v10 + 88))
    {
      v332 = a2;
      v333 = a5;
      v334 = v10;
      for (i = *(__int128 **)(v10 + 80); i; i = *(__int128 **)i)
      {
        v93 = *((_QWORD *)i + 5);
        if (v93)
        {
          v94 = *(char *)(v93 + 63);
          if (v94 < 0)
            v95 = *(_QWORD *)(v93 + 48);
          else
            v95 = *(unsigned __int8 *)(v93 + 63);
          v96 = i + 1;
          if (!v95)
          {
            std::string::operator=((std::string *)(v93 + 40), (const std::string *)(i + 1));
            *(_BYTE *)(v93 + 26) = 1;
            LOBYTE(v94) = *(_BYTE *)(v93 + 63);
          }
          memset(buf, 0, 24);
          if ((v94 & 0x80) != 0)
            std::string::__init_copy_ctor_external(&v349, *(const std::string::value_type **)(v93 + 40), *(_QWORD *)(v93 + 48));
          else
            v349 = *(std::string *)(v93 + 40);
          v97 = stringToLowerCase((uint64_t *)&v349, (std::string *)buf, 0);
          if (SHIBYTE(v349.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v349.__r_.__value_.__l.__data_);
          if (v97)
          {
            if (buf[23] >= 0)
              v98 = (uint64_t *)buf;
            else
              v98 = *(uint64_t **)buf;
            if (buf[23] >= 0)
              v99 = buf[23];
            else
              v99 = *(_QWORD *)&buf[8];
            v100 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v98, v99);
            v101 = (unint64_t)v350[1];
            if (!v350[1])
              goto LABEL_174;
            v102 = v100;
            v103 = (uint8x8_t)vcnt_s8((int8x8_t)v350[1]);
            v103.i16[0] = vaddlv_u8(v103);
            v104 = v103.u32[0];
            if (v103.u32[0] > 1uLL)
            {
              v105 = v100;
              if ((void *)v100 >= v350[1])
                v105 = v100 % (unint64_t)v350[1];
            }
            else
            {
              v105 = ((unint64_t)v350[1] - 1) & v100;
            }
            v106 = (unsigned __int8 **)*((_QWORD *)v350[0] + v105);
            if (!v106 || (v107 = *v106) == 0)
            {
LABEL_174:
              v109 = *(_QWORD *)(v93 + 136);
              if (v109 >= *(_QWORD *)(v93 + 144))
              {
                v111 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::string **)(v93 + 128), i + 1);
              }
              else
              {
                if (*((char *)i + 39) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(v93 + 136), *((const std::string::value_type **)i + 2), *((_QWORD *)i + 3));
                }
                else
                {
                  v110 = *v96;
                  *(_QWORD *)(v109 + 16) = *((_QWORD *)i + 4);
                  *(_OWORD *)v109 = v110;
                }
                v111 = (std::string *)(v109 + 24);
              }
              *(_QWORD *)(v93 + 136) = v111;
              *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,_peopleCandidate *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,_peopleCandidate *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,_peopleCandidate *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,_peopleCandidate *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)v350, (uint64_t)buf, (uint64_t)buf)+ 5) = v93;
              goto LABEL_181;
            }
            while (1)
            {
              v108 = *((_QWORD *)v107 + 1);
              if (v108 == v102)
              {
                if (std::equal_to<std::string>::operator()[abi:nn180100](v107 + 16, buf))
                {
                  v112 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,_peopleCandidate *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,_peopleCandidate *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,_peopleCandidate *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,_peopleCandidate *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)v350, (uint64_t)buf, (uint64_t)buf)+ 5);
                  if (v112)
                  {
                    v113 = *(_QWORD *)(v112 + 136);
                    if (v113 >= *(_QWORD *)(v112 + 144))
                    {
                      v115 = std::vector<std::string>::__push_back_slow_path<std::string const&>((std::string **)(v112 + 128), i + 1);
                    }
                    else
                    {
                      if (*((char *)i + 39) < 0)
                      {
                        std::string::__init_copy_ctor_external(*(std::string **)(v112 + 136), *((const std::string::value_type **)i + 2), *((_QWORD *)i + 3));
                      }
                      else
                      {
                        v114 = *v96;
                        *(_QWORD *)(v113 + 16) = *((_QWORD *)i + 4);
                        *(_OWORD *)v113 = v114;
                      }
                      v115 = (std::string *)(v113 + 24);
                    }
                    *(_QWORD *)(v112 + 136) = v115;
                    v116 = *(float *)(v93 + 8);
                    if (v116 > *(float *)(v112 + 8))
                    {
                      *(float *)(v112 + 8) = v116;
                      std::string::operator=((std::string *)(v112 + 64), (const std::string *)(v93 + 64));
                    }
                    v117 = *(double *)(v93 + 16);
                    if (v117 > 0.000000100000001)
                    {
                      v118 = *(double *)(v112 + 16);
                      if (v118 <= 0.000000100000001 || v117 < v118)
                      {
                        *(double *)(v112 + 16) = v117;
                        std::string::operator=((std::string *)(v112 + 40), (const std::string *)(v93 + 40));
                      }
                    }
                    if (*(_BYTE *)(v112 + 24))
                      v120 = 1;
                    else
                      v120 = *(_BYTE *)(v93 + 24) != 0;
                    *(_BYTE *)(v112 + 24) = v120;
                    if (*(_BYTE *)(v112 + 27))
                      v121 = 1;
                    else
                      v121 = *(_BYTE *)(v93 + 27) != 0;
                    *(_BYTE *)(v112 + 27) = v121;
                    if (*(_BYTE *)(v112 + 28))
                      v122 = 1;
                    else
                      v122 = *(_BYTE *)(v93 + 28) != 0;
                    *(_BYTE *)(v112 + 28) = v122;
                  }
                  break;
                }
              }
              else
              {
                if (v104 > 1)
                {
                  if (v108 >= v101)
                    v108 %= v101;
                }
                else
                {
                  v108 &= v101 - 1;
                }
                if (v108 != v105)
                  goto LABEL_174;
              }
              v107 = *(unsigned __int8 **)v107;
              if (!v107)
                goto LABEL_174;
            }
          }
LABEL_181:
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
      }
      v123 = *__error();
      v124 = _SILogForLogForCategory(14);
      if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(void **)&buf[4] = __p[1];
        _os_log_impl(&dword_1B8270000, v124, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_debug: PPL candidates size: %ld.", buf, 0xCu);
      }
      v125 = 0;
      *__error() = v123;
      memset(v360, 0, sizeof(v360));
      v126 = a3;
      if (a3)
      {
        v127 = 0;
        if (__p[1] >= (void *)3)
        {
          v128 = (const std::string::value_type *)__p[0];
          if (__p[0])
          {
            do
            {
              memset(buf, 0, sizeof(buf));
              if (v128[39] < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)buf, *((const std::string::value_type **)v128 + 2), *((_QWORD *)v128 + 3));
              }
              else
              {
                *(_OWORD *)buf = *((_OWORD *)v128 + 1);
                *(_QWORD *)&buf[16] = *((_QWORD *)v128 + 4);
              }
              v129 = *((_QWORD *)v128 + 5);
              v130 = *(unsigned __int8 *)(v129 + 27);
              v127 = *(_BYTE *)(v129 + 27) != 0;
              if ((buf[23] & 0x80000000) != 0)
                operator delete(*(void **)buf);
              if (v130)
                break;
              v128 = *(const std::string::value_type **)v128;
            }
            while (v128);
            v131 = (const std::string::value_type *)__p[0];
            if (__p[0])
            {
              LOBYTE(v128) = 0;
              do
              {
                memset(buf, 0, sizeof(buf));
                if (v131[39] < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)buf, *((const std::string::value_type **)v131 + 2), *((_QWORD *)v131 + 3));
                }
                else
                {
                  *(_OWORD *)buf = *((_OWORD *)v131 + 1);
                  *(_QWORD *)&buf[16] = *((_QWORD *)v131 + 4);
                }
                v132 = *((_QWORD *)v131 + 5);
                if (*(_BYTE *)(v132 + 24) && *(double *)(v132 + 16) <= 47304000.0)
                {
                  v133 = 0;
                  LOBYTE(v128) = 1;
                }
                else
                {
                  v133 = 1;
                }
                if ((buf[23] & 0x80000000) != 0)
                  operator delete(*(void **)buf);
                if (!v133)
                  break;
                v131 = *(const std::string::value_type **)v131;
              }
              while (v131);
            }
            else
            {
              LOBYTE(v128) = 0;
            }
          }
          else
          {
            v127 = 0;
          }
          v125 = v128 & 1;
          v126 = a3;
        }
      }
      else
      {
        v127 = 0;
      }
      v134 = __p[0];
      if (__p[0])
      {
        v135 = v336 ^ 1 | v126;
        v136 = v126 ^ 1 | v336;
        while (1)
        {
          if (v127)
          {
            v137 = v134[5];
            if (*(_BYTE *)(v137 + 28))
            {
              if (!*(_BYTE *)(v137 + 27))
                break;
            }
          }
          if ((v135 & 1) == 0 && !*(_BYTE *)(v134[5] + 28))
          {
            v140 = *__error();
            v148 = _SILogForLogForCategory(14);
            if (!os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
              goto LABEL_287;
            *(_WORD *)buf = 0;
            v143 = v148;
            v144 = "[Pommes_Suggestions]mail_debug: 1 PPL suggestion skipped. Reason: scope is recipientOnly and candidat"
                   "e is not a recipient.";
            goto LABEL_285;
          }
          if ((v136 & 1) == 0 && !*(_BYTE *)(v134[5] + 27))
          {
            v140 = *__error();
            v162 = _SILogForLogForCategory(14);
            if (!os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
              goto LABEL_287;
            *(_WORD *)buf = 0;
            v143 = v162;
            v144 = "[Pommes_Suggestions]mail_debug: 1 PPL suggestion skipped. Reason: scope is authorsOnly and candidate "
                   "is not an author.";
            goto LABEL_285;
          }
          if (__p[1] > (void *)2)
            v138 = v125;
          else
            v138 = 0;
          if (v138 == 1)
          {
            v139 = v134[5];
            if (!*(_BYTE *)(v139 + 24) && *(double *)(v139 + 16) > 47304000.0)
            {
              v140 = *__error();
              v141 = _SILogForLogForCategory(14);
              if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
              {
                v142 = *(_QWORD *)(v134[5] + 16);
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = v142;
                v143 = v141;
                v144 = "[Pommes_Suggestions]mail_debug: 1 PPL suggestion thresholded. Reason: not used and age %f.";
                v145 = 12;
                goto LABEL_286;
              }
              goto LABEL_287;
            }
          }
          v146 = *(_QWORD *)&v360[8];
          if (*(_QWORD *)&v360[8] - *(_QWORD *)v360 != 160)
            goto LABEL_264;
          if (*(float *)(*(_QWORD *)(*(_QWORD *)v360 + 24) + 8) <= *(float *)(v134[5] + 8))
          {
            std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_comparePeople,std::__wrap_iter<std::pair<std::string,_peopleCandidate *> *>>(*(uint64_t *)v360, *(uint64_t *)&v360[8], 5);
            v146 = *(_QWORD *)&v360[8] - 32;
            if (*(char *)(*(_QWORD *)&v360[8] - 9) < 0)
              operator delete(*(void **)v146);
            *(_QWORD *)&v360[8] = v146;
LABEL_264:
            v147 = v134[5];
            if (*(char *)(v147 + 63) < 0)
            {
              std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v147 + 40), *(_QWORD *)(v147 + 48));
              v147 = v134[5];
              v146 = *(_QWORD *)&v360[8];
            }
            else
            {
              __str = *(std::string *)(v147 + 40);
            }
            v348 = v147;
            if (v146 >= *(_QWORD *)&v360[16])
            {
              v151 = (uint64_t)(v146 - *(_QWORD *)v360) >> 5;
              if ((unint64_t)(v151 + 1) >> 59)
                goto LABEL_556;
              v152 = (uint64_t)(*(_QWORD *)&v360[16] - *(_QWORD *)v360) >> 4;
              if (v152 <= v151 + 1)
                v152 = v151 + 1;
              if (*(_QWORD *)&v360[16] - *(_QWORD *)v360 >= 0x7FFFFFFFFFFFFFE0uLL)
                v153 = 0x7FFFFFFFFFFFFFFLL;
              else
                v153 = v152;
              *(_QWORD *)&v380 = &v360[16];
              v154 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v153);
              v156 = (std::string *)&v154[32 * v151];
              *v156 = __str;
              memset(&__str, 0, sizeof(__str));
              v156[1].__r_.__value_.__r.__words[0] = v147;
              v157 = *(_QWORD *)&v360[8];
              v158 = *(_QWORD *)v360;
              if (*(_QWORD *)&v360[8] == *(_QWORD *)v360)
              {
                v161 = vdupq_n_s64(*(unint64_t *)&v360[8]);
                v159 = &v154[32 * v151];
              }
              else
              {
                v159 = &v154[32 * v151];
                do
                {
                  v160 = *(_OWORD *)(v157 - 32);
                  *((_QWORD *)v159 - 2) = *(_QWORD *)(v157 - 16);
                  *((_OWORD *)v159 - 2) = v160;
                  *(_QWORD *)(v157 - 24) = 0;
                  *(_QWORD *)(v157 - 16) = 0;
                  *(_QWORD *)(v157 - 32) = 0;
                  *((_QWORD *)v159 - 1) = *(_QWORD *)(v157 - 8);
                  v159 -= 32;
                  v157 -= 32;
                }
                while (v157 != v158);
                v161 = *(int64x2_t *)v360;
              }
              p_size = (uint64_t)&v156[1].__r_.__value_.__l.__size_;
              *(_QWORD *)v360 = v159;
              *(_QWORD *)&v360[8] = (char *)v156 + 32;
              *(int64x2_t *)&buf[8] = v161;
              v164 = *(_QWORD *)&v360[16];
              *(_QWORD *)&v360[16] = &v154[32 * v155];
              *(_QWORD *)&buf[24] = v164;
              *(_QWORD *)buf = v161.i64[0];
              std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              v149 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
              *(_QWORD *)(v146 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
              *(_OWORD *)v146 = v149;
              memset(&__str, 0, sizeof(__str));
              *(_QWORD *)(v146 + 24) = v348;
              p_size = v146 + 32;
            }
            *(_QWORD *)&v360[8] = p_size;
            std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_comparePeople &,std::__wrap_iter<std::pair<std::string,_peopleCandidate *> *>>(*(uint64_t *)v360, p_size, (p_size - *(_QWORD *)v360) >> 5);
          }
LABEL_291:
          v134 = (_QWORD *)*v134;
          if (!v134)
            goto LABEL_292;
        }
        v140 = *__error();
        v163 = _SILogForLogForCategory(14);
        if (!os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
          goto LABEL_287;
        *(_WORD *)buf = 0;
        v143 = v163;
        v144 = "[Pommes_Suggestions]mail_debug: 1 PPL suggestion thresholded. Reason: is recipient and we have author candidates.";
LABEL_285:
        v145 = 2;
LABEL_286:
        _os_log_impl(&dword_1B8270000, v143, OS_LOG_TYPE_DEFAULT, v144, buf, v145);
LABEL_287:
        *__error() = v140;
        goto LABEL_291;
      }
LABEL_292:
      v165 = *(__int128 **)v360;
      if (*(_QWORD *)v360 != *(_QWORD *)&v360[8])
      {
        do
        {
          v166 = v355.i64[1];
          if (v355.i64[1] >= (unint64_t)v356)
          {
            v168 = (v355.i64[1] - v355.i64[0]) >> 5;
            if ((unint64_t)(v168 + 1) >> 59)
              goto LABEL_556;
            v169 = (uint64_t)&v356[-v355.i64[0]] >> 4;
            if (v169 <= v168 + 1)
              v169 = v168 + 1;
            if ((unint64_t)&v356[-v355.i64[0]] >= 0x7FFFFFFFFFFFFFE0)
              v170 = 0x7FFFFFFFFFFFFFFLL;
            else
              v170 = v169;
            *(_QWORD *)&v380 = &v356;
            if (v170)
            {
              v172 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v170);
            }
            else
            {
              v172 = 0;
              v171 = 0;
            }
            v174 = (char *)&v172[4 * v168];
            v175 = (char *)&v172[4 * v171];
            *(_QWORD *)&buf[24] = v175;
            if (*((char *)v165 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&v172[4 * v168], *(const std::string::value_type **)v165, *((_QWORD *)v165 + 1));
            }
            else
            {
              v176 = *v165;
              *((_QWORD *)v174 + 2) = *((_QWORD *)v165 + 2);
              *(_OWORD *)v174 = v176;
            }
            *(_QWORD *)&buf[8] = 0;
            *(_QWORD *)buf = 0;
            v172[4 * v168 + 3] = *((_QWORD *)v165 + 3);
            v173 = v174 + 32;
            *(_QWORD *)&buf[16] = v174 + 32;
            v177 = v355.i64[1];
            v178 = v355.i64[0];
            if (v355.i64[1] == v355.i64[0])
            {
              v180 = vdupq_n_s64(v355.u64[1]);
            }
            else
            {
              do
              {
                v179 = *(_OWORD *)(v177 - 32);
                *((_QWORD *)v174 - 2) = *(_QWORD *)(v177 - 16);
                *((_OWORD *)v174 - 2) = v179;
                *(_QWORD *)(v177 - 24) = 0;
                *(_QWORD *)(v177 - 16) = 0;
                *(_QWORD *)(v177 - 32) = 0;
                *((_QWORD *)v174 - 1) = *(_QWORD *)(v177 - 8);
                v174 -= 32;
                v177 -= 32;
              }
              while (v177 != v178);
              v180 = v355;
              v173 = *(char **)&buf[16];
              v175 = *(char **)&buf[24];
            }
            v355.i64[0] = (uint64_t)v174;
            v355.i64[1] = (uint64_t)v173;
            *(int64x2_t *)&buf[8] = v180;
            v181 = v356;
            v356 = v175;
            *(_QWORD *)&buf[24] = v181;
            *(_QWORD *)buf = v180.i64[0];
            std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            if (*((char *)v165 + 23) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v355.i64[1], *(const std::string::value_type **)v165, *((_QWORD *)v165 + 1));
            }
            else
            {
              v167 = *v165;
              *(_QWORD *)(v355.i64[1] + 16) = *((_QWORD *)v165 + 2);
              *(_OWORD *)v166 = v167;
            }
            *(_QWORD *)(v166 + 24) = *((_QWORD *)v165 + 3);
            v173 = (char *)(v166 + 32);
          }
          v355.i64[1] = (uint64_t)v173;
          memset(buf, 0, 24);
          if (*(char *)(*(_QWORD *)v360 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v346, **(const std::string::value_type ***)v360, *(_QWORD *)(*(_QWORD *)v360 + 8));
          }
          else
          {
            v182 = **(_OWORD **)v360;
            v346.__r_.__value_.__r.__words[2] = *(_QWORD *)(*(_QWORD *)v360 + 16);
            *(_OWORD *)&v346.__r_.__value_.__l.__data_ = v182;
          }
          v183 = stringToLowerCase((uint64_t *)&v346, (std::string *)buf, 0);
          if (SHIBYTE(v346.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v346.__r_.__value_.__l.__data_);
          if (v183)
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v353, (uint64_t)buf, (uint64_t)buf);
          std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_comparePeople,std::__wrap_iter<std::pair<std::string,_peopleCandidate *> *>>(*(uint64_t *)v360, *(uint64_t *)&v360[8], (uint64_t)(*(_QWORD *)&v360[8] - *(_QWORD *)v360) >> 5);
          v184 = (void **)(*(_QWORD *)&v360[8] - 32);
          if (*(char *)(*(_QWORD *)&v360[8] - 9) < 0)
            operator delete(*v184);
          *(_QWORD *)&v360[8] = v184;
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            v184 = *(void ***)&v360[8];
          }
          v165 = *(__int128 **)v360;
        }
        while (*(void ***)v360 != v184);
      }
      v185 = v355.i64[0];
      if (v355.i64[0] != v355.i64[1])
      {
        v186 = v355.i64[1] - 32;
        if ((unint64_t)(v355.i64[1] - 32) > v355.i64[0])
        {
          do
          {
            v187 = *(_QWORD *)(v185 + 16);
            v188 = *(_OWORD *)v185;
            v189 = *(_QWORD *)(v186 + 16);
            *(_OWORD *)v185 = *(_OWORD *)v186;
            *(_QWORD *)(v185 + 16) = v189;
            *(_OWORD *)v186 = v188;
            *(_QWORD *)(v186 + 16) = v187;
            v190 = *(_QWORD *)(v185 + 24);
            *(_QWORD *)(v185 + 24) = *(_QWORD *)(v186 + 24);
            *(_QWORD *)(v186 + 24) = v190;
            v185 += 32;
            v186 -= 32;
          }
          while (v185 < v186);
        }
      }
      *(_QWORD *)buf = v360;
      std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
      v192 = v355.i64[1];
      v191 = v355.i64[0];
      v344 = 0;
      v345 = 0;
      v343 = 0;
      v193 = v355.i64[1] - v355.i64[0];
      v10 = v334;
      a5 = v333;
      if (v355.i64[1] != v355.i64[0])
      {
        if (v193 < 0)
LABEL_556:
          abort();
        v194 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v193 >> 5);
        v343 = v194;
        v344 = v194;
        v345 = (char *)v194 + 32 * v195;
        do
        {
          if (*(char *)(v191 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v194, *(const std::string::value_type **)v191, *(_QWORD *)(v191 + 8));
          }
          else
          {
            v196 = *(_OWORD *)v191;
            v194->__r_.__value_.__r.__words[2] = *(_QWORD *)(v191 + 16);
            *(_OWORD *)&v194->__r_.__value_.__l.__data_ = v196;
          }
          v194[1].__r_.__value_.__r.__words[0] = *(_QWORD *)(v191 + 24);
          v191 += 32;
          v194 = (std::string *)((char *)v194 + 32);
        }
        while (v191 != v192);
        v344 = v194;
        if (v194 != v343)
        {
          if (_os_feature_enabled_impl() && strlen(*(const char **)v332) <= 3)
          {
            v197 = v343;
          }
          else
          {
            v197 = v343;
            data = v343[1].__r_.__value_.__l.__data_;
            if (data[25] && data[27] && data[28])
            {
              v199 = 1;
LABEL_345:
              *(_QWORD *)buf = &v343;
              std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
              v200 = *__error();
              v201 = _SILogForLogForCategory(14);
              if (os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v199;
                _os_log_impl(&dword_1B8270000, v201, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_debug: intent_is_people: %d.", buf, 8u);
              }
              *__error() = v200;
              v202 = *__error();
              v203 = _SILogForLogForCategory(14);
              if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
              {
                v204 = *(_QWORD *)(v10 + 48);
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = v204;
                _os_log_impl(&dword_1B8270000, v203, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_debug: FT candidates size: %ld.", buf, 0xCu);
              }
              *__error() = v202;
              v341 = 0uLL;
              v342 = 0;
              if (!*(_QWORD *)(v10 + 48))
                goto LABEL_454;
              memset(v360, 0, sizeof(v360));
              if ((v199 | a5 ^ 1) == 1)
              {
                v205 = *__error();
                v206 = _SILogForLogForCategory(14);
                if (os_log_type_enabled(v206, OS_LOG_TYPE_DEFAULT))
                {
                  v207 = "free-text are not included";
                  v208 = *(_QWORD *)(v10 + 48);
                  if (v199)
                    v207 = "intent is people";
                  *(_DWORD *)buf = 134218242;
                  *(_QWORD *)&buf[4] = v208;
                  *(_WORD *)&buf[12] = 2080;
                  *(_QWORD *)&buf[14] = v207;
                  _os_log_impl(&dword_1B8270000, v206, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_debug: %ld FT suggestion candidates are thresholded. Reason: %s.", buf, 0x16u);
                }
                *__error() = v205;
LABEL_453:
                *(_QWORD *)buf = v360;
                std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
LABEL_454:
                __str.__r_.__value_.__s.__data_[0] = 0;
                v271 = v355.i64[1];
                v270 = v355.i64[0];
                if (v355.i64[0] != v355.i64[1])
                {
                  v272 = 0;
                  v273 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
                  while (1)
                  {
                    v274 = (const char *)v270;
                    if (*(char *)(v270 + 23) < 0)
                      v274 = *(const char **)v270;
                    v275 = *(_QWORD *)(v270 + 24);
                    v277 = *(_QWORD *)(v275 + 128);
                    v276 = *(_QWORD *)(v275 + 136);
                    v278 = (v276 - v277) / 24;
                    v279 = CFStringCreateWithCString(0, v274, 0x8000100u);
                    Mutable = CFArrayCreateMutable(0, v278, v273);
                    if (v276 != v277)
                    {
                      v281 = 0;
                      if (v278 <= 1)
                        v282 = 1;
                      else
                        v282 = v278;
                      do
                      {
                        v283 = (const char *)(*(_QWORD *)(*(_QWORD *)(v270 + 24) + 128) + v281);
                        if (v283[23] < 0)
                          v283 = *(const char **)v283;
                        v284 = CFStringCreateWithCString(0, v283, 0x8000100u);
                        if (v284)
                        {
                          v285 = v284;
                          CFArrayAppendValue(Mutable, v284);
                          CFRelease(v285);
                        }
                        v281 += 24;
                        --v282;
                      }
                      while (v282);
                    }
                    v286 = *(_QWORD *)(v270 + 24);
                    if (*(_BYTE *)(v286 + 27))
                    {
                      *(_DWORD *)(v286 + 32) = 0;
                      if (v279)
                        goto LABEL_474;
                    }
                    else
                    {
                      if (*(_BYTE *)(v286 + 28))
                        v287 = 1;
                      else
                        v287 = 2;
                      *(_DWORD *)(v286 + 32) = v287;
                      if (v279)
                      {
LABEL_474:
                        if (Mutable)
                        {
                          v391 = 0u;
                          v392 = 0u;
                          v389 = 0u;
                          v390 = 0u;
                          v387 = 0u;
                          v388 = 0u;
                          v385 = 0u;
                          v386 = 0u;
                          v383 = 0u;
                          v384 = 0u;
                          v381 = 0u;
                          v382 = 0u;
                          v380 = 0u;
                          memset(buf, 0, sizeof(buf));
                          v288 = *(_QWORD *)(v270 + 24);
                          *((_QWORD *)&v380 + 1) = *(_QWORD *)(v288 + 16);
                          *(_QWORD *)&v387 = v279;
                          *((_QWORD *)&v389 + 1) = Mutable;
                          *(double *)&v391 = *(float *)(v288 + 8);
                          HIDWORD(v391) = 10;
                          BYTE2(v392) = *(_BYTE *)(v288 + 24);
                          BYTE3(v392) = *(_BYTE *)(v288 + 26);
                          DWORD1(v392) = *(_DWORD *)(v288 + 32);
                          v289 = *__error();
                          v290 = _SILogForLogForCategory(14);
                          if (os_log_type_enabled(v290, OS_LOG_TYPE_DEFAULT))
                          {
                            v291 = *(_QWORD *)(v270 + 24);
                            if (*(char *)(v291 + 63) < 0)
                              v292 = *(_QWORD *)(v291 + 48);
                            else
                              v292 = *(unsigned __int8 *)(v291 + 63);
                            v293 = *(float *)(v291 + 8);
                            v294 = *(float *)v291;
                            v295 = *(float *)(v291 + 4);
                            v296 = *(_QWORD *)(v291 + 112);
                            v297 = 0xAAAAAAAAAAAAAAABLL
                                 * ((uint64_t)(*(_QWORD *)(v291 + 136) - *(_QWORD *)(v291 + 128)) >> 3);
                            v298 = *(_QWORD *)(v291 + 16);
                            v299 = *(unsigned __int8 *)(v291 + 24);
                            v300 = *(unsigned __int8 *)(v291 + 25);
                            v301 = *(unsigned __int8 *)(v291 + 26);
                            v302 = *(_DWORD *)(v291 + 32);
                            *(_DWORD *)v360 = 134220800;
                            *(_QWORD *)&v360[4] = v272;
                            *(_WORD *)&v360[12] = 2048;
                            *(double *)&v360[14] = v293;
                            *(_WORD *)&v360[22] = 2048;
                            *(double *)&v360[24] = v294;
                            v361 = 2048;
                            v362 = v295;
                            v363 = 2048;
                            v364 = v296;
                            v365 = 2048;
                            v366 = v297;
                            v367 = 2048;
                            v368 = v298;
                            v369 = 1024;
                            v370 = v299;
                            v371 = 1024;
                            v372 = v300;
                            v373 = 2048;
                            v374 = v292;
                            v375 = 1024;
                            v376 = v301;
                            v377 = 1024;
                            v378 = v302;
                            _os_log_impl(&dword_1B8270000, v290, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_sugg_ppl: pos:%ld sc_final:%f sc_best_name:%f sc_email_address:%f n_names:%ld n_emailaddresses:%ld t_since_use_creation:%f item_used:%d strong_name:%d len_best_name:%ld missing_name:%d default_scope:%d ", v360, 0x6Au);
                          }
                          *__error() = v289;
                          (*(void (**)(uint64_t, _BYTE *, std::string *))(a8 + 16))(a8, buf, &__str);
                          ++v272;
                        }
                        CFRelease(v279);
                      }
                    }
                    if (Mutable)
                      CFRelease(Mutable);
                    v270 += 32;
                    if (v270 == v271)
                      goto LABEL_487;
                  }
                }
                v272 = 0;
LABEL_487:
                v304 = v341.i64[1];
                for (j = v341.i64[0]; j != v304; j += 32)
                {
                  v305 = (const char *)j;
                  if (*(char *)(j + 23) < 0)
                    v305 = *(const char **)j;
                  v306 = CFStringCreateWithCString(0, v305, 0x8000100u);
                  if (v306)
                  {
                    v307 = v306;
                    v391 = 0u;
                    v392 = 0u;
                    v389 = 0u;
                    v390 = 0u;
                    v388 = 0u;
                    v385 = 0u;
                    v386 = 0u;
                    v383 = 0u;
                    v384 = 0u;
                    v381 = 0u;
                    v382 = 0u;
                    v380 = 0u;
                    memset(buf, 0, sizeof(buf));
                    v387 = (unint64_t)v306;
                    *(double *)&v391 = *(float *)(*(_QWORD *)(j + 24) + 4);
                    HIDWORD(v391) = 9;
                    v308 = *__error();
                    v309 = _SILogForLogForCategory(14);
                    if (os_log_type_enabled(v309, OS_LOG_TYPE_DEFAULT))
                    {
                      if (*(char *)(j + 23) < 0)
                        v310 = *(double *)(j + 8);
                      else
                        *(_QWORD *)&v310 = *(unsigned __int8 *)(j + 23);
                      v311 = *(_QWORD *)(j + 24);
                      v312 = *(float *)(v311 + 4);
                      v313 = *(float *)v311;
                      v314 = *(_QWORD *)(v311 + 8);
                      *(_DWORD *)v360 = 134219008;
                      *(_QWORD *)&v360[4] = v272;
                      *(_WORD *)&v360[12] = 2048;
                      *(double *)&v360[14] = v312;
                      *(_WORD *)&v360[22] = 2048;
                      *(double *)&v360[24] = v313;
                      v361 = 2048;
                      v362 = v310;
                      v363 = 2048;
                      v364 = v314;
                      _os_log_impl(&dword_1B8270000, v309, OS_LOG_TYPE_DEFAULT, "[Pommes_Suggestions]mail_sugg_ft: pos:%ld sc_final:%f sc_topicality:%f len_ft:%ld match_type:%ld ", v360, 0x34u);
                    }
                    *__error() = v308;
                    (*(void (**)(uint64_t, _BYTE *, std::string *))(a8 + 16))(a8, buf, &__str);
                    ++v272;
                    CFRelease(v307);
                  }
                }
                *(_QWORD *)buf = &v341;
                std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
                v315 = (void **)__p[0];
                if (__p[0])
                {
                  do
                  {
                    v316 = (void **)*v315;
                    if (*((char *)v315 + 39) < 0)
                      operator delete(v315[2]);
                    operator delete(v315);
                    v315 = v316;
                  }
                  while (v316);
                }
                v317 = v350[0];
                v350[0] = 0;
                if (v317)
                  operator delete(v317);
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&v353[16]);
                v318 = *(void **)v353;
                *(_QWORD *)v353 = 0;
                if (v318)
                  operator delete(v318);
                *(_QWORD *)buf = &v355;
                std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
                goto LABEL_507;
              }
              v209 = *(uint64_t **)(v10 + 40);
              if (!v209)
              {
LABEL_421:
                if (!_os_feature_enabled_impl() || a6)
                {
                  v246 = *(__int128 **)v360;
                  if (*(_QWORD *)v360 != *(_QWORD *)&v360[8])
                  {
                    do
                    {
                      v247 = v341.i64[1];
                      if (v341.i64[1] >= v342)
                      {
                        v249 = (v341.i64[1] - v341.i64[0]) >> 5;
                        if ((unint64_t)(v249 + 1) >> 59)
                          goto LABEL_556;
                        v250 = (uint64_t)(v342 - v341.i64[0]) >> 4;
                        if (v250 <= v249 + 1)
                          v250 = v249 + 1;
                        if (v342 - v341.i64[0] >= 0x7FFFFFFFFFFFFFE0)
                          v251 = 0x7FFFFFFFFFFFFFFLL;
                        else
                          v251 = v250;
                        *(_QWORD *)&v380 = &v342;
                        if (v251)
                        {
                          v253 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v251);
                        }
                        else
                        {
                          v253 = 0;
                          v252 = 0;
                        }
                        v255 = (uint64_t)&v253[4 * v249];
                        v256 = (char *)&v253[4 * v252];
                        *(_QWORD *)&buf[24] = v256;
                        if (*((char *)v246 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)&v253[4 * v249], *(const std::string::value_type **)v246, *((_QWORD *)v246 + 1));
                        }
                        else
                        {
                          v257 = *v246;
                          *(_QWORD *)(v255 + 16) = *((_QWORD *)v246 + 2);
                          *(_OWORD *)v255 = v257;
                        }
                        *(_QWORD *)&buf[8] = 0;
                        *(_QWORD *)buf = 0;
                        v253[4 * v249 + 3] = *((_QWORD *)v246 + 3);
                        v254 = v255 + 32;
                        *(_QWORD *)&buf[16] = v255 + 32;
                        v258 = v341.i64[1];
                        v259 = v341.i64[0];
                        if (v341.i64[1] == v341.i64[0])
                        {
                          v261 = vdupq_n_s64(v341.u64[1]);
                        }
                        else
                        {
                          do
                          {
                            v260 = *(_OWORD *)(v258 - 32);
                            *(_QWORD *)(v255 - 16) = *(_QWORD *)(v258 - 16);
                            *(_OWORD *)(v255 - 32) = v260;
                            *(_QWORD *)(v258 - 24) = 0;
                            *(_QWORD *)(v258 - 16) = 0;
                            *(_QWORD *)(v258 - 32) = 0;
                            *(_QWORD *)(v255 - 8) = *(_QWORD *)(v258 - 8);
                            v255 -= 32;
                            v258 -= 32;
                          }
                          while (v258 != v259);
                          v261 = v341;
                          v254 = *(_QWORD *)&buf[16];
                          v256 = *(char **)&buf[24];
                        }
                        v341.i64[0] = v255;
                        v341.i64[1] = v254;
                        *(int64x2_t *)&buf[8] = v261;
                        v262 = v342;
                        v342 = (unint64_t)v256;
                        *(_QWORD *)&buf[24] = v262;
                        *(_QWORD *)buf = v261.i64[0];
                        std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)buf);
                      }
                      else
                      {
                        if (*((char *)v246 + 23) < 0)
                        {
                          std::string::__init_copy_ctor_external((std::string *)v341.i64[1], *(const std::string::value_type **)v246, *((_QWORD *)v246 + 1));
                        }
                        else
                        {
                          v248 = *v246;
                          *(_QWORD *)(v341.i64[1] + 16) = *((_QWORD *)v246 + 2);
                          *(_OWORD *)v247 = v248;
                        }
                        *(_QWORD *)(v247 + 24) = *((_QWORD *)v246 + 3);
                        v254 = v247 + 32;
                      }
                      v341.i64[1] = v254;
                      std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(*(uint64_t *)v360, *(uint64_t *)&v360[8], (uint64_t)(*(_QWORD *)&v360[8] - *(_QWORD *)v360) >> 5);
                      v263 = (void **)(*(_QWORD *)&v360[8] - 32);
                      if (*(char *)(*(_QWORD *)&v360[8] - 9) < 0)
                        operator delete(*v263);
                      *(_QWORD *)&v360[8] = v263;
                      v246 = *(__int128 **)v360;
                    }
                    while (*(void ***)v360 != v263);
                  }
                  v264 = v341.i64[0];
                  if (v341.i64[0] != v341.i64[1])
                  {
                    v265 = v341.i64[1] - 32;
                    if ((unint64_t)(v341.i64[1] - 32) > v341.i64[0])
                    {
                      do
                      {
                        v266 = *(_QWORD *)(v264 + 16);
                        v267 = *(_OWORD *)v264;
                        v268 = *(_QWORD *)(v265 + 16);
                        *(_OWORD *)v264 = *(_OWORD *)v265;
                        *(_QWORD *)(v264 + 16) = v268;
                        *(_OWORD *)v265 = v267;
                        *(_QWORD *)(v265 + 16) = v266;
                        v269 = *(_QWORD *)(v264 + 24);
                        *(_QWORD *)(v264 + 24) = *(_QWORD *)(v265 + 24);
                        *(_QWORD *)(v265 + 24) = v269;
                        v264 += 32;
                        v265 -= 32;
                      }
                      while (v264 < v265);
                    }
                  }
                }
                else
                {
                  memset(v340, 0, 24);
                  std::vector<std::pair<std::string,_freeTextCandidate *>>::__init_with_size[abi:nn180100]<std::pair<std::string,_freeTextCandidate *>*,std::pair<std::string,_freeTextCandidate *>*>(v340, *(__int128 **)v360, *(__int128 **)&v360[8], (uint64_t)(*(_QWORD *)&v360[8] - *(_QWORD *)v360) >> 5);
                  dedupSuggestions((uint64_t *)v340, &v341);
                  *(_QWORD *)buf = v340;
                  std::vector<std::pair<std::string,_freeTextCandidate *>>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
                }
                goto LABEL_453;
              }
              while (1)
              {
                v210 = (const std::string::value_type **)(v209 + 2);
                v211 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
                if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v212 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
                else
                  v212 = __s1.__r_.__value_.__l.__size_;
                v213 = *((unsigned __int8 *)v209 + 39);
                v214 = (char)v213;
                v215 = v209[3];
                if ((v213 & 0x80u) != 0)
                  v213 = v209[3];
                if (v212 == v213)
                {
                  if (v214 >= 0)
                    v216 = (const std::string::value_type *)(v209 + 2);
                  else
                    v216 = *v210;
                  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    if (!memcmp(__s1.__r_.__value_.__l.__data_, v216, __s1.__r_.__value_.__l.__size_))
                    {
LABEL_381:
                      v220 = *__error();
                      v224 = _SILogForLogForCategory(14);
                      if (!os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
                        goto LABEL_384;
                      *(_WORD *)buf = 0;
                      v222 = v224;
                      v223 = "[Pommes_Suggestions]mail_debug: 1 FT suggestion thresholded. Reason: same as query.";
LABEL_383:
                      _os_log_impl(&dword_1B8270000, v222, OS_LOG_TYPE_DEFAULT, v223, buf, 2u);
                      goto LABEL_384;
                    }
                  }
                  else
                  {
                    if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
                      goto LABEL_381;
                    p_s1 = &__s1;
                    while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v216)
                    {
                      p_s1 = (std::string *)((char *)p_s1 + 1);
                      ++v216;
                      if (!--v211)
                        goto LABEL_381;
                    }
                  }
                }
                v218 = *(std::string **)&v360[8];
                v219 = *(_QWORD *)v360;
                if (*(_QWORD *)&v360[8] - *(_QWORD *)v360 != 96)
                {
                  if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(*(uint64_t *)v353, *(unint64_t *)&v353[8], (uint64_t)(v209 + 2)))
                  {
                    v225 = v209[5];
                    if (v214 < 0)
                    {
                      std::string::__init_copy_ctor_external(&__str, *v210, v215);
                      v218 = *(std::string **)&v360[8];
                    }
                    else
                    {
                      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v210;
                      __str.__r_.__value_.__r.__words[2] = v209[4];
                    }
                    v348 = v225;
                    if ((unint64_t)v218 < *(_QWORD *)&v360[16])
                    {
                      *v218 = __str;
                      v218[1].__r_.__value_.__r.__words[0] = v225;
                      memset(&__str, 0, sizeof(__str));
                      v228 = (uint64_t)&v218[1].__r_.__value_.__l.__size_;
LABEL_419:
                      *(_QWORD *)&v360[8] = v228;
                      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText &,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(*(uint64_t *)v360, v228, (v228 - *(_QWORD *)v360) >> 5);
                      goto LABEL_420;
                    }
                    v229 = ((uint64_t)v218 - *(_QWORD *)v360) >> 5;
                    if ((unint64_t)(v229 + 1) >> 59)
                      goto LABEL_556;
                    v230 = (uint64_t)(*(_QWORD *)&v360[16] - *(_QWORD *)v360) >> 4;
                    if (v230 <= v229 + 1)
                      v230 = v229 + 1;
                    if (*(_QWORD *)&v360[16] - *(_QWORD *)v360 >= 0x7FFFFFFFFFFFFFE0uLL)
                      v231 = 0x7FFFFFFFFFFFFFFLL;
                    else
                      v231 = v230;
                    *(_QWORD *)&v380 = &v360[16];
                    v232 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v231);
                    v234 = (std::string *)&v232[32 * v229];
                    *v234 = __str;
                    memset(&__str, 0, sizeof(__str));
                    v234[1].__r_.__value_.__r.__words[0] = v225;
                    v235 = *(_QWORD *)&v360[8];
                    v236 = *(_QWORD *)v360;
                    if (*(_QWORD *)&v360[8] != *(_QWORD *)v360)
                    {
                      v237 = (std::string *)&v232[32 * v229];
                      do
                      {
                        v238 = *(_OWORD *)(v235 - 32);
                        v237[-1].__r_.__value_.__l.__size_ = *(_QWORD *)(v235 - 16);
                        *(_OWORD *)&v237[-2].__r_.__value_.__r.__words[2] = v238;
                        *(_QWORD *)(v235 - 24) = 0;
                        *(_QWORD *)(v235 - 16) = 0;
                        *(_QWORD *)(v235 - 32) = 0;
                        v237[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v235 - 8);
                        v237 = (std::string *)((char *)v237 - 32);
                        v235 -= 32;
                      }
                      while (v235 != v236);
LABEL_416:
                      v244 = *(int64x2_t *)v360;
LABEL_418:
                      v228 = (uint64_t)&v234[1].__r_.__value_.__l.__size_;
                      *(_QWORD *)v360 = v237;
                      *(_QWORD *)&v360[8] = (char *)v234 + 32;
                      *(int64x2_t *)&buf[8] = v244;
                      v245 = *(_QWORD *)&v360[16];
                      *(_QWORD *)&v360[16] = &v232[32 * v233];
                      *(_QWORD *)&buf[24] = v245;
                      *(_QWORD *)buf = v244.i64[0];
                      std::__split_buffer<std::pair<std::string,_freeTextCandidate *>>::~__split_buffer((uint64_t)buf);
                      goto LABEL_419;
                    }
LABEL_417:
                    v244 = vdupq_n_s64(v235);
                    v237 = v234;
                    goto LABEL_418;
                  }
                  v220 = *__error();
                  v221 = _SILogForLogForCategory(14);
                  if (!os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_384;
LABEL_377:
                  *(_WORD *)buf = 0;
                  v222 = v221;
                  v223 = "[Pommes_Suggestions]mail_debug: 1 FT suggestion thresholded. Reason: same as people candidate.";
                  goto LABEL_383;
                }
                if (*(float *)(*(_QWORD *)(*(_QWORD *)v360 + 24) + 4) <= *(float *)(v209[5] + 4))
                {
                  if (!std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(*(uint64_t *)v353, *(unint64_t *)&v353[8], (uint64_t)(v209 + 2)))
                  {
                    std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareFreeText,std::__wrap_iter<std::pair<std::string,_freeTextCandidate *> *>>(v219, (uint64_t)v218, 3);
                    v226 = *(_QWORD *)&v360[8] - 32;
                    if (*(char *)(*(_QWORD *)&v360[8] - 9) < 0)
                      operator delete(*(void **)v226);
                    *(_QWORD *)&v360[8] = v226;
                    v227 = v209[5];
                    if (*((char *)v209 + 39) < 0)
                    {
                      std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v209[2], v209[3]);
                      v226 = *(_QWORD *)&v360[8];
                    }
                    else
                    {
                      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v210;
                      __str.__r_.__value_.__r.__words[2] = v209[4];
                    }
                    v348 = v227;
                    if (v226 < *(_QWORD *)&v360[16])
                    {
                      *(std::string *)v226 = __str;
                      *(_QWORD *)(v226 + 24) = v227;
                      memset(&__str, 0, sizeof(__str));
                      v228 = v226 + 32;
                      goto LABEL_419;
                    }
                    v239 = (uint64_t)(v226 - *(_QWORD *)v360) >> 5;
                    if ((unint64_t)(v239 + 1) >> 59)
                      goto LABEL_556;
                    v240 = (uint64_t)(*(_QWORD *)&v360[16] - *(_QWORD *)v360) >> 4;
                    if (v240 <= v239 + 1)
                      v240 = v239 + 1;
                    if (*(_QWORD *)&v360[16] - *(_QWORD *)v360 >= 0x7FFFFFFFFFFFFFE0uLL)
                      v241 = 0x7FFFFFFFFFFFFFFLL;
                    else
                      v241 = v240;
                    *(_QWORD *)&v380 = &v360[16];
                    v232 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(v241);
                    v234 = (std::string *)&v232[32 * v239];
                    *v234 = __str;
                    memset(&__str, 0, sizeof(__str));
                    v234[1].__r_.__value_.__r.__words[0] = v227;
                    v235 = *(_QWORD *)&v360[8];
                    v242 = *(_QWORD *)v360;
                    if (*(_QWORD *)&v360[8] != *(_QWORD *)v360)
                    {
                      v237 = (std::string *)&v232[32 * v239];
                      do
                      {
                        v243 = *(_OWORD *)(v235 - 32);
                        v237[-1].__r_.__value_.__l.__size_ = *(_QWORD *)(v235 - 16);
                        *(_OWORD *)&v237[-2].__r_.__value_.__r.__words[2] = v243;
                        *(_QWORD *)(v235 - 24) = 0;
                        *(_QWORD *)(v235 - 16) = 0;
                        *(_QWORD *)(v235 - 32) = 0;
                        v237[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v235 - 8);
                        v237 = (std::string *)((char *)v237 - 32);
                        v235 -= 32;
                      }
                      while (v235 != v242);
                      goto LABEL_416;
                    }
                    goto LABEL_417;
                  }
                  v220 = *__error();
                  v221 = _SILogForLogForCategory(14);
                  if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_377;
LABEL_384:
                  *__error() = v220;
                }
LABEL_420:
                v209 = (uint64_t *)*v209;
                if (!v209)
                  goto LABEL_421;
              }
            }
          }
          memset(buf, 0, sizeof(buf));
          *(_QWORD *)&v380 = 1065353216;
          v319 = v344;
          if (v197 == v344)
          {
            v327 = v197;
          }
          else
          {
            do
            {
              v320 = v197[1].__r_.__value_.__l.__data_;
              if (v320[87] < 0)
                std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v320 + 8), *((_QWORD *)v320 + 9));
              else
                __str = *(std::string *)(v320 + 64);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_str = &__str;
              else
                p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v322 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              else
                v322 = __str.__r_.__value_.__l.__size_;
              v323 = v322 - 1;
              if (v322 >= 1)
              {
                v324 = (char *)p_str + v322;
                v325 = p_str;
                do
                {
                  v326 = memchr(v325, 64, v322);
                  if (!v326)
                    break;
                  if (*v326 == 64)
                  {
                    if (v326 != v324 && v326 - (_BYTE *)p_str < v323)
                    {
                      std::string::basic_string((std::string *)v360, &__str, v326 - (_BYTE *)p_str + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v341);
                      goto LABEL_533;
                    }
                    break;
                  }
                  v325 = (std::string *)(v326 + 1);
                  v322 = v324 - (_BYTE *)v325;
                }
                while (v324 - (_BYTE *)v325 >= 1);
              }
              std::string::basic_string[abi:nn180100]<0>(v360, "");
LABEL_533:
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)buf, (uint64_t)v360, (uint64_t)v360);
              if ((v360[23] & 0x80000000) != 0)
                operator delete(*(void **)v360);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              v197 = (std::string *)((char *)v197 + 32);
            }
            while (v197 != v319);
            v197 = v343;
            v327 = v344;
            v10 = v334;
            a5 = v333;
          }
          v328 = (char *)v327 - (char *)v197;
          if ((unint64_t)v328 > 0x60 && *(_QWORD *)&buf[24] >= (unint64_t)((v328 >> 5) - 1))
            goto LABEL_553;
          if (!_os_feature_enabled_impl())
            goto LABEL_548;
          if (v343 != v344)
          {
            v329 = v343;
            while (!*(_BYTE *)(v329[1].__r_.__value_.__r.__words[0] + 29))
            {
              v329 = (std::string *)((char *)v329 + 32);
              if (v329 == v344)
                goto LABEL_547;
            }
            goto LABEL_553;
          }
LABEL_547:
          if (*(_QWORD *)(v332 + 32) <= 3uLL)
          {
LABEL_548:
            v330 = v343[1].__r_.__value_.__l.__data_;
            if (v330[25] || (*(float *)v330 > 0.0 || *((float *)v330 + 1) > 0.0) && v330[24])
            {
              v199 = 1;
              goto LABEL_554;
            }
          }
LABEL_553:
          v199 = 0;
LABEL_554:
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&buf[16]);
          v331 = *(void **)buf;
          *(_QWORD *)buf = 0;
          if (v331)
            operator delete(v331);
          goto LABEL_345;
        }
      }
    }
    else
    {
      v343 = 0;
      v344 = 0;
      v345 = 0;
    }
    v199 = 0;
    goto LABEL_345;
  }
LABEL_507:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  if (SHIBYTE(v359[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v359[0].__r_.__value_.__l.__data_);
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_comparePhoto,std::__wrap_iter<std::pair<std::string,_photosCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void **v16;
  int v17;
  __int128 v18;
  _BYTE v19[15];

  if (a3 >= 2)
  {
    v6 = 0;
    v7 = *(_QWORD *)a1;
    *(_QWORD *)v19 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v19[7] = *(_QWORD *)(a1 + 15);
    v8 = *(_BYTE *)(a1 + 23);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = (unint64_t)(a3 - 2) >> 1;
    v11 = a1;
    do
    {
      v12 = v11 + 32 * (v6 + 1);
      v13 = 2 * v6;
      v6 = (2 * v6) | 1;
      v14 = v13 + 2;
      if (v14 < a3 && **(float **)(v12 + 24) > **(float **)(v12 + 56))
      {
        v12 += 32;
        v6 = v14;
      }
      if (*(char *)(v11 + 23) < 0)
        operator delete(*(void **)v11);
      v15 = *(_OWORD *)v12;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
      *(_OWORD *)v11 = v15;
      *(_BYTE *)(v12 + 23) = 0;
      *(_BYTE *)v12 = 0;
      *(_QWORD *)(v11 + 24) = *(_QWORD *)(v12 + 24);
      v11 = v12;
    }
    while (v6 <= v10);
    v16 = (void **)(a2 - 32);
    v17 = *(char *)(v12 + 23);
    if (a2 - 32 == v12)
    {
      if (v17 < 0)
        operator delete(*(void **)v12);
      *(_QWORD *)v12 = v7;
      *(_QWORD *)(v12 + 8) = *(_QWORD *)v19;
      *(_QWORD *)(v12 + 15) = *(_QWORD *)&v19[7];
      *(_BYTE *)(v12 + 23) = v8;
      *(_QWORD *)(v12 + 24) = v9;
    }
    else
    {
      if (v17 < 0)
        operator delete(*(void **)v12);
      v18 = *(_OWORD *)v16;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)(a2 - 16);
      *(_OWORD *)v12 = v18;
      *(_BYTE *)(a2 - 9) = 0;
      *(_BYTE *)(a2 - 32) = 0;
      *(_QWORD *)(v12 + 24) = *(_QWORD *)(a2 - 8);
      if (*(char *)(a2 - 9) < 0)
        operator delete(*v16);
      *(_QWORD *)(a2 - 32) = v7;
      *(_QWORD *)(a2 - 24) = *(_QWORD *)v19;
      *(_QWORD *)(a2 - 17) = *(_QWORD *)&v19[7];
      *(_BYTE *)(a2 - 9) = v8;
      *(_QWORD *)(a2 - 8) = v9;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_comparePhoto &,std::__wrap_iter<std::pair<std::string,_photosCandidate *> *>>(a1, v12 + 32, (v12 + 32 - a1) >> 5);
    }
  }
}

void _SIPommesSpotlightEnumerateTopicSuggestions(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t *v5;
  __int128 v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int64x2_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  const char *v32;
  CFStringRef v33;
  CFStringRef v34;
  uint64_t v35;
  CFIndex v36;
  __CFArray *Mutable;
  __int128 *v38;
  _QWORD *v39;
  const char *v40;
  CFStringRef v41;
  _QWORD *v42;
  _QWORD *v43;
  BOOL v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  void **v53;
  void **v54;
  void *allocator;
  const __CFAllocator *allocatora;
  __int128 v59;
  __int128 v60;
  int64x2_t v61;
  __int128 v62;
  __int128 v63;
  _BYTE v64[32];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _BYTE v78[32];
  _BYTE v79[9];

  v79[0] = 0;
  if (a2)
  {
    v4 = a3;
    v5 = a1;
    v6 = 0uLL;
    if (a1)
    {
      v7 = 0;
      while (1)
      {
        v8 = *((_QWORD *)&v6 + 1);
        v9 = v6;
        if (*((_QWORD *)&v6 + 1) - (_QWORD)v6 != 320)
          goto LABEL_9;
        v59 = v6;
        v10 = _topicCandidate::computedScore(*(_topicCandidate **)(v6 + 24));
        if (v10 >= _topicCandidate::computedScore((_topicCandidate *)v5[5]))
          break;
LABEL_35:
        v6 = v59;
        v5 = (uint64_t *)*v5;
        if (!v5)
          goto LABEL_36;
      }
      std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareTopic,std::__wrap_iter<std::pair<std::string,_topicCandidate *> *>>(v9, v8, 10);
      if (*(char *)(v8 - 9) < 0)
        operator delete(*(void **)(v8 - 32));
      *(_QWORD *)&v6 = v59;
      *((_QWORD *)&v6 + 1) = v8 - 32;
LABEL_9:
      v11 = v5[5];
      if (*((char *)v5 + 39) < 0)
      {
        v60 = v6;
        std::string::__init_copy_ctor_external((std::string *)v64, (const std::string::value_type *)v5[2], v5[3]);
        v6 = v60;
      }
      else
      {
        *(_OWORD *)v64 = *((_OWORD *)v5 + 1);
        *(_QWORD *)&v64[16] = v5[4];
      }
      *(_QWORD *)&v64[24] = v11;
      v12 = *((_QWORD *)&v6 + 1);
      if (*((_QWORD *)&v6 + 1) >= (unint64_t)v7)
      {
        v15 = v6;
        v16 = (uint64_t)(*((_QWORD *)&v6 + 1) - v6) >> 5;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 59)
          abort();
        v61 = (int64x2_t)v6;
        if ((uint64_t)&v7[-v6] >> 4 > v17)
          v17 = (uint64_t)&v7[-v6] >> 4;
        if ((unint64_t)&v7[-v6] >= 0x7FFFFFFFFFFFFFE0)
          v18 = 0x7FFFFFFFFFFFFFFLL;
        else
          v18 = v17;
        if (v18 >> 59)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v19 = (char *)operator new(32 * v18);
        v20 = &v19[32 * v16];
        *(_OWORD *)v20 = *(_OWORD *)v64;
        v21 = *(_QWORD *)&v64[16];
        memset(v64, 0, 24);
        *((_QWORD *)v20 + 2) = v21;
        *((_QWORD *)v20 + 3) = v11;
        if (v12 == v15)
        {
          v23 = vdupq_laneq_s64(v61, 1);
          v22 = v20;
        }
        else
        {
          v22 = v20;
          v23 = v61;
          do
          {
            v24 = *(_OWORD *)(v12 - 32);
            *((_QWORD *)v22 - 2) = *(_QWORD *)(v12 - 16);
            *((_OWORD *)v22 - 2) = v24;
            *(_QWORD *)(v12 - 24) = 0;
            *(_QWORD *)(v12 - 16) = 0;
            *(_QWORD *)(v12 - 32) = 0;
            *((_QWORD *)v22 - 1) = *(_QWORD *)(v12 - 8);
            v22 -= 32;
            v12 -= 32;
          }
          while (v12 != v15);
        }
        v26 = *(_OWORD *)&v23 >> 64;
        allocator = (void *)*(_OWORD *)&v23;
        v25 = v23.i64[0];
        while (v26 != v25)
        {
          if (*(char *)(v26 - 9) < 0)
            operator delete(*(void **)(v26 - 32));
          v26 -= 32;
        }
        v14 = (uint64_t)(v20 + 32);
        v7 = &v19[32 * v18];
        *(_QWORD *)&v6 = v22;
        if (allocator)
        {
          operator delete(allocator);
          *(_QWORD *)&v6 = v22;
        }
        v4 = a3;
      }
      else
      {
        v13 = *(_OWORD *)v64;
        *(_QWORD *)(*((_QWORD *)&v6 + 1) + 16) = *(_QWORD *)&v64[16];
        **((_OWORD **)&v6 + 1) = v13;
        memset(v64, 0, 24);
        *(_QWORD *)(*((_QWORD *)&v6 + 1) + 24) = *(_QWORD *)&v64[24];
        v14 = *((_QWORD *)&v6 + 1) + 32;
      }
      *(_QWORD *)&v27 = v6;
      *((_QWORD *)&v27 + 1) = v14;
      v59 = v27;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_compareTopic &,std::__wrap_iter<std::pair<std::string,_topicCandidate *> *>>(v6, v14, (v14 - (uint64_t)v6) >> 5);
      goto LABEL_35;
    }
LABEL_36:
    v28 = 0;
    allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v30 = *((_QWORD *)&v6 + 1);
      v29 = v6;
      if ((_QWORD)v6 == *((_QWORD *)&v6 + 1))
        break;
      v62 = v6;
      memset(v78, 0, sizeof(v78));
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v78, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
      }
      else
      {
        v31 = *(_OWORD *)v6;
        *(_QWORD *)&v78[16] = *(_QWORD *)(v6 + 16);
        *(_OWORD *)v78 = v31;
      }
      *(_QWORD *)&v78[24] = *(_QWORD *)(v29 + 24);
      if (v78[23] >= 0)
        v32 = v78;
      else
        v32 = *(const char **)v78;
      v33 = CFStringCreateWithCString(0, v32, 0x8000100u);
      if (v33)
      {
        v34 = v33;
        v35 = *(_QWORD *)&v78[24];
        v36 = *(_QWORD *)(*(_QWORD *)&v78[24] + 184);
        if (v36)
        {
          Mutable = CFArrayCreateMutable(allocatora, v36, MEMORY[0x1E0C9B378]);
          v38 = *(__int128 **)&v78[24];
          v39 = *(_QWORD **)(*(_QWORD *)&v78[24] + 168);
          if (v39 != (_QWORD *)(*(_QWORD *)&v78[24] + 176))
          {
            do
            {
              memset(v64, 0, 24);
              if (*((char *)v39 + 55) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v64, (const std::string::value_type *)v39[4], v39[5]);
              }
              else
              {
                *(_OWORD *)v64 = *((_OWORD *)v39 + 2);
                *(_QWORD *)&v64[16] = v39[6];
              }
              if (v64[23] >= 0)
                v40 = v64;
              else
                v40 = *(const char **)v64;
              v41 = CFStringCreateWithCString(0, v40, 0x8000100u);
              CFArrayAppendValue(Mutable, v41);
              CFRelease(v41);
              if ((v64[23] & 0x80000000) != 0)
                operator delete(*(void **)v64);
              v42 = (_QWORD *)v39[1];
              if (v42)
              {
                do
                {
                  v43 = v42;
                  v42 = (_QWORD *)*v42;
                }
                while (v42);
              }
              else
              {
                do
                {
                  v43 = (_QWORD *)v39[2];
                  v44 = *v43 == (_QWORD)v39;
                  v39 = v43;
                }
                while (!v44);
              }
              v38 = *(__int128 **)&v78[24];
              v39 = v43;
            }
            while (v43 != (_QWORD *)(*(_QWORD *)&v78[24] + 176));
          }
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v65 = 0u;
          memset(v64, 0, sizeof(v64));
          *(_QWORD *)&v65 = *((_QWORD *)v38 + 16);
          v45 = *((_QWORD *)v38 + 13);
          *((_QWORD *)&v65 + 1) = *((_QWORD *)v38 + 11);
          *(_QWORD *)&v66 = v45;
          v67 = *v38;
          v46 = v38[1];
          v47 = v38[2];
          v48 = v38[4];
          v70 = v38[3];
          v71 = v48;
          v68 = v46;
          v69 = v47;
          v73 = 0uLL;
          LODWORD(v74) = 0;
          v72 = (unint64_t)v34;
          *((_QWORD *)&v74 + 1) = Mutable;
          *(_QWORD *)&v75 = *((_QWORD *)v38 + 12);
          *(_QWORD *)&v76 = _topicCandidate::computedScore((_topicCandidate *)v38);
          HIDWORD(v76) = *((_DWORD *)v38 + 34);
          BYTE1(v77) = *((_QWORD *)v38 + 20) == 1;
          BYTE2(v77) = *((_BYTE *)v38 + 81);
          DWORD1(v77) = 0;
          BYTE8(v77) = *((_BYTE *)v38 + 80);
          BYTE9(v77) = *((_DWORD *)v38 + 28) > 1;
          (*(void (**)(uint64_t, _BYTE *, _BYTE *))(a4 + 16))(a4, v64, v79);
          CFRelease(Mutable);
          v4 = a3;
        }
        else
        {
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v65 = 0u;
          memset(v64, 0, sizeof(v64));
          *(_QWORD *)&v65 = *(_QWORD *)(*(_QWORD *)&v78[24] + 128);
          v49 = *(_QWORD *)(*(_QWORD *)&v78[24] + 104);
          *((_QWORD *)&v65 + 1) = *(_QWORD *)(*(_QWORD *)&v78[24] + 88);
          *(_QWORD *)&v66 = v49;
          v67 = **(_OWORD **)&v78[24];
          v50 = *(_OWORD *)(*(_QWORD *)&v78[24] + 16);
          v51 = *(_OWORD *)(*(_QWORD *)&v78[24] + 32);
          v52 = *(_OWORD *)(*(_QWORD *)&v78[24] + 64);
          v70 = *(_OWORD *)(*(_QWORD *)&v78[24] + 48);
          v71 = v52;
          v68 = v50;
          v69 = v51;
          v72 = (unint64_t)v33;
          v73 = 0uLL;
          LODWORD(v74) = 0;
          *(_QWORD *)&v75 = *(_QWORD *)(*(_QWORD *)&v78[24] + 96);
          *(_QWORD *)&v76 = _topicCandidate::computedScore(*(_topicCandidate **)&v78[24]);
          HIDWORD(v76) = *(_DWORD *)(v35 + 136);
          BYTE1(v77) = *(_QWORD *)(v35 + 160) == 1;
          BYTE2(v77) = *(_BYTE *)(v35 + 81);
          DWORD1(v77) = 0;
          BYTE8(v77) = *(_BYTE *)(v35 + 80);
          BYTE9(v77) = *(_DWORD *)(v35 + 112) > 1;
          (*(void (**)(uint64_t, _BYTE *, _BYTE *))(a4 + 16))(a4, v64, v79);
        }
        CFRelease(v34);
        ++v28;
      }
      if (v28 >= v4)
      {
        v6 = v62;
      }
      else
      {
        std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareTopic,std::__wrap_iter<std::pair<std::string,_topicCandidate *> *>>(v29, v30, (v30 - v29) >> 5);
        if (*(char *)(v30 - 9) < 0)
          operator delete(*(void **)(v30 - 32));
        *(_QWORD *)&v6 = v62;
        *((_QWORD *)&v6 + 1) = v30 - 32;
      }
      if ((v78[23] & 0x80000000) != 0)
      {
        v63 = v6;
        operator delete(*(void **)v78);
        v6 = v63;
      }
      if (v28 >= v4)
      {
        v29 = v6;
        break;
      }
    }
    if (v29)
    {
      v54 = (void **)*((_QWORD *)&v6 + 1);
      v53 = (void **)v6;
      while (v54 != v53)
      {
        if (*((char *)v54 - 9) < 0)
          operator delete(*(v54 - 4));
        v54 -= 4;
      }
      operator delete(v53);
    }
  }
}

char *std::__hash_table<std::__hash_value_type<std::string,_peopleCandidate *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,_peopleCandidate *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,_peopleCandidate *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,_peopleCandidate *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  char *v16;
  unint64_t v17;
  _QWORD *v18;
  std::string *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v41;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = a1[1];
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(void ***)(*a1 + 8 * v14);
    if (v15)
    {
      v16 = (char *)*v15;
      if (*v15)
      {
        do
        {
          v17 = *((_QWORD *)v16 + 1);
          if (v17 == v10)
          {
            if (std::equal_to<std::string>::operator()[abi:nn180100]((unsigned __int8 *)v16 + 16, (unsigned __int8 *)a2))
            {
              return v16;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v17 >= v11)
                v17 %= v11;
            }
            else
            {
              v17 &= v11 - 1;
            }
            if (v17 != v14)
              break;
          }
          v16 = *(char **)v16;
        }
        while (v16);
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v18 = a1 + 2;
  v16 = (char *)operator new(0x30uLL);
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v10;
  v19 = (std::string *)(v16 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_QWORD *)v16 + 5) = 0;
  v20 = (float)(unint64_t)(a1[3] + 1);
  v21 = *((float *)a1 + 8);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v11 = a1[1];
    if (*(_QWORD *)&prime > v11)
      goto LABEL_39;
    if (*(_QWORD *)&prime < v11)
    {
      v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v11 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v11)
      {
        v11 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v18;
          if (*v18)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v30) = v18;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v36))
                  {
                    *(_QWORD *)(*a1 + 8 * v36) = v29;
                    goto LABEL_64;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*a1 + 8 * v36);
                  **(_QWORD **)(*a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_64:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v11 = (unint64_t)prime;
          goto LABEL_68;
        }
        v41 = (void *)*a1;
        *a1 = 0;
        if (v41)
          operator delete(v41);
        v11 = 0;
        a1[1] = 0;
      }
    }
LABEL_68:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v37 = *a1;
  v38 = *(_QWORD **)(*a1 + 8 * v14);
  if (v38)
  {
    *(_QWORD *)v16 = *v38;
LABEL_81:
    *v38 = v16;
    goto LABEL_82;
  }
  *(_QWORD *)v16 = *v18;
  *v18 = v16;
  *(_QWORD *)(v37 + 8 * v14) = v18;
  if (*(_QWORD *)v16)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v39 >= v11)
        v39 %= v11;
    }
    else
    {
      v39 &= v11 - 1;
    }
    v38 = (_QWORD *)(*a1 + 8 * v39);
    goto LABEL_81;
  }
LABEL_82:
  ++a1[3];
  return v16;
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_comparePeople,std::__wrap_iter<std::pair<std::string,_peopleCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  void **v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  _BYTE v19[15];

  if (a3 >= 2)
  {
    v6 = 0;
    v17 = *(_QWORD *)a1;
    *(_QWORD *)v19 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v19[7] = *(_QWORD *)(a1 + 15);
    v18 = *(_BYTE *)(a1 + 23);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v7 = *(_QWORD *)(a1 + 24);
    v8 = (unint64_t)(a3 - 2) >> 1;
    v9 = a1;
    do
    {
      v10 = v9 + 32 * v6 + 32;
      v11 = 2 * v6;
      v6 = (2 * v6) | 1;
      v12 = v11 + 2;
      if (v11 + 2 < a3 && _comparePeople::operator()((_QWORD *)v10, (_QWORD *)(v10 + 32)))
      {
        v10 += 32;
        v6 = v12;
      }
      if (*(char *)(v9 + 23) < 0)
        operator delete(*(void **)v9);
      v13 = *(_OWORD *)v10;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v10 + 16);
      *(_OWORD *)v9 = v13;
      *(_BYTE *)(v10 + 23) = 0;
      *(_BYTE *)v10 = 0;
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      v9 = v10;
    }
    while (v6 <= v8);
    v14 = (void **)(a2 - 32);
    v15 = *(char *)(v10 + 23);
    if (a2 - 32 == v10)
    {
      if (v15 < 0)
        operator delete(*(void **)v10);
      *(_QWORD *)v10 = v17;
      *(_QWORD *)(v10 + 8) = *(_QWORD *)v19;
      *(_QWORD *)(v10 + 15) = *(_QWORD *)&v19[7];
      *(_BYTE *)(v10 + 23) = v18;
      *(_QWORD *)(v10 + 24) = v7;
    }
    else
    {
      if (v15 < 0)
        operator delete(*(void **)v10);
      v16 = *(_OWORD *)v14;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(a2 - 16);
      *(_OWORD *)v10 = v16;
      *(_BYTE *)(a2 - 9) = 0;
      *(_BYTE *)(a2 - 32) = 0;
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(a2 - 8);
      if (*(char *)(a2 - 9) < 0)
        operator delete(*v14);
      *(_QWORD *)(a2 - 32) = v17;
      *(_QWORD *)(a2 - 24) = *(_QWORD *)v19;
      *(_QWORD *)(a2 - 17) = *(_QWORD *)&v19[7];
      *(_BYTE *)(a2 - 9) = v18;
      *(_QWORD *)(a2 - 8) = v7;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_comparePeople &,std::__wrap_iter<std::pair<std::string,_peopleCandidate *> *>>(a1, v10 + 32, (v10 + 32 - a1) >> 5);
    }
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  _QWORD *v18;
  std::string *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;

  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (uint64_t *)a2;
  else
    v7 = *(uint64_t **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v7, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v14 = v9;
      if (v9 >= v11)
        v14 = v9 % v11;
    }
    else
    {
      v14 = (v11 - 1) & v9;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:nn180100](i + 16, (unsigned __int8 *)a2))
            return;
        }
        else
        {
          if (v13 > 1)
          {
            if (v17 >= v11)
              v17 %= v11;
          }
          else
          {
            v17 &= v11 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  v18 = operator new(0x28uLL);
  v18[1] = v10;
  v19 = (std::string *)(v18 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v18[4] = *(_QWORD *)(a3 + 16);
  }
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v14 = v10 % v11;
      else
        v14 = v10;
    }
    else
    {
      v14 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v14);
  if (v27)
  {
    *v18 = *v27;
LABEL_47:
    *v27 = v18;
    goto LABEL_48;
  }
  v28 = *(_QWORD *)(a1 + 16);
  *v18 = v28;
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(v26 + 8 * v14) = a1 + 16;
  if (v28)
  {
    v29 = *(_QWORD *)(v28 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11)
        v29 %= v11;
    }
    else
    {
      v29 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_47;
  }
LABEL_48:
  ++*(_QWORD *)(a1 + 24);
}

void std::vector<std::pair<std::string,_freeTextCandidate *>>::__init_with_size[abi:nn180100]<std::pair<std::string,_freeTextCandidate *>*,std::pair<std::string,_freeTextCandidate *>*>(std::string **a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v7;
  uint64_t v8;
  __int128 v9;

  if (a4)
  {
    if (a4 >> 59)
      abort();
    v7 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<std::string,_freeTextCandidate *>>>(a4);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = (std::string *)((char *)v7 + 32 * v8);
    while (a2 != a3)
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v9 = *a2;
        v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      v7[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
      a2 += 2;
      v7 = (std::string *)((char *)v7 + 32);
    }
    a1[1] = v7;
  }
}

double std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_comparePeople &,std::__wrap_iter<std::pair<std::string,_peopleCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  double result;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = a3 - 2;
  if (a3 >= 2)
  {
    v20 = v3;
    v21 = v4;
    v8 = v5 >> 1;
    v9 = (__int128 *)(a1 + 32 * (v5 >> 1));
    v10 = (__int128 *)(a2 - 32);
    if (_comparePeople::operator()(v9, (_QWORD *)(a2 - 32)))
    {
      v17 = *v10;
      v12 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      v13 = *(_QWORD *)(a2 - 8);
      v18 = v12;
      v19 = v13;
      do
      {
        v14 = v9;
        if (*((char *)v10 + 23) < 0)
          operator delete(*(void **)v10);
        v15 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v15;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        *((_QWORD *)v10 + 3) = *((_QWORD *)v9 + 3);
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 32 * v8);
        v10 = v14;
      }
      while (_comparePeople::operator()(v9, &v17));
      if (*((char *)v14 + 23) < 0)
        operator delete(*(void **)v14);
      result = *(double *)&v17;
      *v14 = v17;
      v16 = v19;
      *((_QWORD *)v14 + 2) = v18;
      *((_QWORD *)v14 + 3) = v16;
    }
  }
  return result;
}

BOOL _comparePeople::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  unsigned int v7;
  unsigned int v8;
  double v9;
  double v10;
  int v11;
  int v12;
  size_t v13;
  size_t v14;
  size_t v15;
  int v16;

  v2 = a1[3];
  v3 = *(float *)(v2 + 8);
  v4 = a2[3];
  v5 = *(float *)(v4 + 8);
  if (v3 != v5)
    return v3 > v5;
  v7 = *(unsigned __int8 *)(v2 + 24);
  v8 = *(unsigned __int8 *)(v4 + 24);
  if (v7 != v8)
    return v7 > v8;
  v9 = *(double *)(v2 + 16);
  if (v9 > 0.000000100000001)
  {
    v10 = *(double *)(v4 + 16);
    if (v10 > 0.000000100000001)
      return v9 < v10;
  }
  v11 = *((char *)a2 + 23);
  v12 = *((char *)a1 + 23);
  if (v12 >= 0)
    v13 = *((unsigned __int8 *)a1 + 23);
  else
    v13 = a1[1];
  if (v12 < 0)
    a1 = (_QWORD *)*a1;
  if (v11 >= 0)
    v14 = *((unsigned __int8 *)a2 + 23);
  else
    v14 = a2[1];
  if (v11 < 0)
    a2 = (_QWORD *)*a2;
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = memcmp(a1, a2, v15);
  if (v16)
    return v16 < 0;
  else
    return v13 < v14;
}

double _topicCandidate::computedScore(_topicCandidate *this)
{
  unint64_t v2;
  unint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v14;
  double v15;
  double v16;
  double v17;

  v3 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  v4 = 0.0;
  v5 = 0.0;
  if (v2)
    v5 = log((double)v2) * 18.9648897;
  if (v3)
    v4 = log((double)v3);
  v6 = *((int *)this + 29);
  v7 = 0.0;
  v8 = *((double *)this + 13);
  v9 = (v5 + v4) * 0.25
     + 0.0
     + (double)*((int *)this + 28) * 2.5
     + (double)(int)v6 * 2.5
     + *((double *)this + 12) * 0.25;
  if (v8 != 0.0)
  {
    v10 = fabs(v8);
    v11 = v9 - v10 * 0.25;
    v9 = v9 + v10 * 0.25;
    if (v10 < 5.0)
      v9 = v11;
    v12 = *((_QWORD *)this + 15);
    if ((unint64_t)(v6 - v12) < 4 && v6 != v12)
      v9 = v9 + (double)(unint64_t)(v6 - v12) * 5.0;
  }
  v14 = *((double *)this + 11);
  if (v14 <= 40996800.0)
    v14 = -0.0;
  v15 = v9 + v14 - (double)*((unint64_t *)this + 20);
  v16 = 0.5;
  if (!*((_BYTE *)this + 80))
    v16 = 0.0;
  v17 = v15 + v16;
  if (*((_BYTE *)this + 81))
    v7 = 2.0;
  return -(v17 + v7);
}

void std::__pop_heap[abi:nn180100]<std::_ClassicAlgPolicy,_compareTopic,std::__wrap_iter<std::pair<std::string,_topicCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  __int128 v15;
  void **v16;
  int v17;
  __int128 v18;
  char v19;
  _BYTE v20[15];

  if (a3 >= 2)
  {
    v6 = 0;
    v7 = *(_QWORD *)a1;
    *(_QWORD *)v20 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v20[7] = *(_QWORD *)(a1 + 15);
    v19 = *(_BYTE *)(a1 + 23);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = (unint64_t)(a3 - 2) >> 1;
    v10 = a1;
    do
    {
      v11 = v10 + 32 * v6 + 32;
      v12 = 2 * v6;
      v6 = (2 * v6) | 1;
      v13 = v12 + 2;
      if (v12 + 2 < a3)
      {
        v14 = _compareTopic::operator()(*(_topicCandidate **)(v11 + 24), *(_topicCandidate **)(v11 + 56));
        v11 += 32 * v14;
        if (v14)
          v6 = v13;
      }
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      v15 = *(_OWORD *)v11;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v11 + 16);
      *(_OWORD *)v10 = v15;
      *(_BYTE *)(v11 + 23) = 0;
      *(_BYTE *)v11 = 0;
      *(_QWORD *)(v10 + 24) = *(_QWORD *)(v11 + 24);
      v10 = v11;
    }
    while (v6 <= v9);
    v16 = (void **)(a2 - 32);
    v17 = *(char *)(v11 + 23);
    if (a2 - 32 == v11)
    {
      if (v17 < 0)
        operator delete(*(void **)v11);
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)v20;
      *(_QWORD *)(v11 + 15) = *(_QWORD *)&v20[7];
      *(_BYTE *)(v11 + 23) = v19;
      *(_QWORD *)(v11 + 24) = v8;
    }
    else
    {
      if (v17 < 0)
        operator delete(*(void **)v11);
      v18 = *(_OWORD *)v16;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 - 16);
      *(_OWORD *)v11 = v18;
      *(_BYTE *)(a2 - 9) = 0;
      *(_BYTE *)(a2 - 32) = 0;
      *(_QWORD *)(v11 + 24) = *(_QWORD *)(a2 - 8);
      if (*(char *)(a2 - 9) < 0)
        operator delete(*v16);
      *(_QWORD *)(a2 - 32) = v7;
      *(_QWORD *)(a2 - 24) = *(_QWORD *)v20;
      *(_QWORD *)(a2 - 17) = *(_QWORD *)&v20[7];
      *(_BYTE *)(a2 - 9) = v19;
      *(_QWORD *)(a2 - 8) = v8;
      std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_compareTopic &,std::__wrap_iter<std::pair<std::string,_topicCandidate *> *>>(a1, v11 + 32, (v11 + 32 - a1) >> 5);
    }
  }
}

__n128 std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_compareTopic &,std::__wrap_iter<std::pair<std::string,_topicCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  __int128 *v7;
  _topicCandidate *v8;
  __n128 result;
  __n128 *v10;
  __n128 *v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v6 = v3 >> 1;
    v7 = (__int128 *)(a1 + 32 * (v3 >> 1));
    v8 = *(_topicCandidate **)(a2 - 8);
    if (_compareTopic::operator()(*((_topicCandidate **)v7 + 3), v8))
    {
      v10 = (__n128 *)(a2 - 32);
      v13 = *(__n128 *)(a2 - 32);
      v14 = *(_QWORD *)(a2 - 16);
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 32) = 0;
      do
      {
        v11 = (__n128 *)v7;
        if (v10[1].n128_i8[7] < 0)
          operator delete((void *)v10->n128_u64[0]);
        v12 = (__n128)*v7;
        v10[1].n128_u64[0] = *((_QWORD *)v7 + 2);
        *v10 = v12;
        *((_BYTE *)v7 + 23) = 0;
        *(_BYTE *)v7 = 0;
        v10[1].n128_u64[1] = *((_QWORD *)v7 + 3);
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = (__int128 *)(a1 + 32 * v6);
        v10 = v11;
      }
      while (_compareTopic::operator()(*((_topicCandidate **)v7 + 3), v8));
      if (v11[1].n128_i8[7] < 0)
        operator delete((void *)v11->n128_u64[0]);
      result = v13;
      *v11 = v13;
      v11[1].n128_u64[0] = v14;
      v11[1].n128_u64[1] = (unint64_t)v8;
    }
  }
  return result;
}

BOOL _compareTopic::operator()(_topicCandidate *a1, _topicCandidate *a2)
{
  int v2;
  int v3;
  double v5;

  v2 = *((_DWORD *)a1 + 34);
  v3 = *((_DWORD *)a2 + 34);
  if (v2 != v3)
    return v2 < v3;
  v5 = _topicCandidate::computedScore(a1);
  return v5 > _topicCandidate::computedScore(a2);
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,_comparePhoto &,std::__wrap_iter<std::pair<std::string,_photosCandidate *> *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  float *v6;
  __int128 *v7;
  uint64_t v8;
  char v9;
  __int128 *v10;
  __int128 v11;
  _BYTE v12[15];

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = v3 >> 1;
    v6 = *(float **)(a2 - 8);
    if (**(float **)(a1 + 32 * (v3 >> 1) + 24) > *v6)
    {
      v8 = *(_QWORD *)(a2 - 32);
      v7 = (__int128 *)(a2 - 32);
      *(_QWORD *)v12 = *(_QWORD *)(a2 - 24);
      *(_QWORD *)&v12[7] = *(_QWORD *)(a2 - 17);
      v9 = *(_BYTE *)(a2 - 9);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = 0;
      do
      {
        if (*((char *)v7 + 23) < 0)
          operator delete(*(void **)v7);
        v10 = (__int128 *)(a1 + 32 * v5);
        v11 = *v10;
        *((_QWORD *)v7 + 2) = *((_QWORD *)v10 + 2);
        *v7 = v11;
        *((_BYTE *)v10 + 23) = 0;
        *(_BYTE *)v10 = 0;
        *((_QWORD *)v7 + 3) = *((_QWORD *)v10 + 3);
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v7 = v10;
      }
      while (**(float **)(a1 + 32 * v5 + 24) > *v6);
      if (*((char *)v10 + 23) < 0)
        operator delete(*(void **)v10);
      *(_QWORD *)v10 = v8;
      *((_QWORD *)v10 + 1) = *(_QWORD *)v12;
      *(_QWORD *)((char *)v10 + 15) = *(_QWORD *)&v12[7];
      *((_BYTE *)v10 + 23) = v9;
      *((_QWORD *)v10 + 3) = v6;
    }
  }
}

__int16 *normalizePunctuations(__int16 *result, int a2)
{
  uint64_t v2;
  unsigned int v3;
  __int16 v4;
  char v5;

  if (result && a2 >= 1)
  {
    v2 = a2;
    while (1)
    {
      v3 = (unsigned __int16)*result;
      v4 = 39;
      if (v3 <= 0x200F)
      {
        if (v3 - 697 <= 0xF && ((1 << (v3 + 71)) & 0x8009) != 0)
          goto LABEL_17;
        if (v3 != 173)
        {
          if (v3 != 180)
            goto LABEL_18;
          goto LABEL_17;
        }
        goto LABEL_7;
      }
      v5 = v3 - 16;
      if (v3 - 8208 > 0x22)
        goto LABEL_20;
      if (((1 << v5) & 0x1F) == 0)
        break;
LABEL_7:
      v4 = 45;
LABEL_17:
      *result = v4;
LABEL_18:
      ++result;
      if (!--v2)
        return result;
    }
    if (((1 << v5) & 0x400000B00) != 0)
      goto LABEL_17;
LABEL_20:
    if (v3 != 8722)
      goto LABEL_18;
    goto LABEL_7;
  }
  return result;
}

void pommesSuggestionsTokenizeString(uint64_t a1, const char *a2, int32_t a3, unsigned __int16 *a4, unsigned __int16 *a5, uint64_t a6, char a7, int a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, unsigned int a12)
{
  int v19;
  int32_t v20;
  int v21;
  int32_t v22;
  int v23;
  uint64_t v24;
  int v25;
  CFIndex v26;
  CFStringRef v27;
  uint64_t v28;
  CFStringRef v29;
  _BOOL4 v30;
  uint64_t v32;
  unsigned int v33;
  unsigned __int16 v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned __int16 v37;
  uint64_t v38;
  __int16 v39;
  unsigned __int16 v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  _BYTE *v47;
  uint64_t v48;
  unsigned __int16 *v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  char v53;
  unsigned __int16 v54;
  unsigned __int16 v55;
  unsigned __int16 *v56;
  unint64_t v57;
  uint64_t v59;
  int32_t pDestLength;
  UErrorCode pErrorCode[2];
  UChar dest[4];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v19 = *(unsigned __int8 *)(a6 + 62088);
  if (_normalizeUnicodeString_onceToken != -1)
    dispatch_once(&_normalizeUnicodeString_onceToken, &__block_literal_global_257);
  pErrorCode[0] = U_ZERO_ERROR;
  *(_DWORD *)(a6 + 16) = 0;
  bzero(dest, 0x7D0uLL);
  pDestLength = 0;
  v20 = 1000;
  u_strFromUTF8(dest, 1000, &pDestLength, a2, a3, pErrorCode);
  if (pErrorCode[0] == U_BUFFER_OVERFLOW_ERROR)
  {
    pDestLength = 1000;
    pErrorCode[0] = U_ZERO_ERROR;
  }
  else
  {
    v20 = pDestLength;
    if (!pDestLength)
      goto LABEL_17;
  }
  if (_normalizeUnicodeString_norm2 && (v19 || (v21 = unorm2_quickCheck(), v20 = pDestLength, v21 != 1)))
  {
    v25 = unorm2_normalize();
    if (pErrorCode[0] == U_BUFFER_OVERFLOW_ERROR)
      v23 = 1000;
    else
      v23 = v25;
  }
  else
  {
    v22 = u_strToLower((UChar *)(a6 + 40064), 1000, dest, v20, 0, pErrorCode);
    v23 = v22;
    pDestLength = v22;
    v24 = v22;
    if (pErrorCode[0] == U_BUFFER_OVERFLOW_ERROR)
      memcpy((void *)(a6 + 40064), dest, 2 * v22);
    *(_WORD *)(a6 + 2 * v24 + 40064) = 0;
  }
  *(_DWORD *)(a6 + 16) = v23;
  if (a8)
    normalizePunctuations((__int16 *)(a6 + 40064), pDestLength);
LABEL_17:
  v26 = *(int *)(a6 + 16);
  if ((_DWORD)v26
    && (v27 = CFStringCreateWithCharactersNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UniChar *)(a6 + 40064), v26, (CFAllocatorRef)*MEMORY[0x1E0C9AE20])) != 0)
  {
    v56 = a5;
    v67 = 0u;
    v68 = 0u;
    *(_QWORD *)dest = a1;
    v63 = a6 + 40064;
    v28 = *(int *)(a6 + 16);
    v29 = v27;
    v64 = a6 + 40064 + 2 * v28;
    v65 = a6 + 16040;
    v66 = a6 + 32056;
    LOWORD(v67) = 1000;
    *(_QWORD *)&v68 = a6 + 24;
    BYTE10(v68) = a7;
    v30 = SIStringContainsNewlineCharacters(a6 + 40064, v28);
    if (v30)
      a10 = 0;
    if (v30)
      v32 = a11;
    else
      v32 = 0;
    CITokenizerGetTokensNew(a1, (uint64_t)v29, *(_QWORD *)a6, a12, 0, a10, 0, v32, (uint64_t)dest);
    v33 = WORD1(v67);
    if (a10)
    {
      v34 = WORD4(v68);
      if (*((uint64_t *)&v67 + 1) < WORD1(v67))
      {
        v35 = WORD2(v67);
        if (WORD2(v67))
        {
          v36 = (_QWORD *)(v68 + 16 * WORD4(v68));
          *v36 = *((_QWORD *)&v67 + 1);
          v36[1] = v35;
          WORD4(v68) = ++v34;
        }
      }
    }
    else
    {
      v34 = WORD4(v68);
    }
    v38 = a6 + 42066;
    if (v33 > 1)
      v39 = a9;
    else
      v39 = 0;
    v40 = v33 - v39;
    if (v34 < 2u)
      v41 = 1;
    else
      v41 = a7;
    if ((v41 & 1) != 0)
      v42 = 0;
    else
      v42 = *(_QWORD *)(v68 + 8) - 1;
    v55 = v40;
    if (v40)
    {
      v43 = 0;
      v44 = 0;
      v54 = v34;
      v57 = v34;
      v59 = v40;
      v45 = 4001;
      v46 = (_QWORD *)a6;
      v47 = (_BYTE *)(a6 + 42066);
      do
      {
        v48 = v46[2006];
        if (v45 <= 4 * v48)
          break;
        v49 = (unsigned __int16 *)(a6 + 40064 + 2 * v46[2005]);
        *(_QWORD *)pErrorCode = 0;
        if (utf8_encodestr(v49, 2 * v48, v47, pErrorCode, v45))
          v50 = 0;
        else
          v50 = *(_QWORD *)pErrorCode;
        v46[5759] = &v47[-v38];
        v46[5760] = v50;
        v51 = v45 - v50;
        v52 = &v47[v50];
        if (v51 < 2)
        {
          v47 = v52;
          break;
        }
        *v52 = 32;
        v47 = v52 + 1;
        v45 = v51 - 1;
        if (v43 == v42)
          v53 = v41;
        else
          v53 = 1;
        if ((v53 & 1) == 0)
        {
          if (v45 < 3)
            break;
          *(_WORD *)(v52 + 1) = 8238;
          v47 = v52 + 3;
          v45 = v51 - 3;
          if (++v44 >= v57)
            v42 = v43;
          else
            v42 = *(_QWORD *)(v68 + 16 * v44 + 8) + v43;
        }
        ++v43;
        v46 += 2;
      }
      while (v59 != v43);
      a5 = v56;
      v34 = v54;
    }
    else
    {
      v47 = (_BYTE *)(a6 + 42066);
    }
    *v47 = 0;
    *(_DWORD *)(a6 + 20) = (_DWORD)v47 - v38;
    CFRelease(v29);
    v37 = v55;
  }
  else
  {
    v34 = 0;
    v37 = 0;
  }
  if (a4)
    *a4 = v37;
  if (a5)
    *a5 = v34;
}

uint64_t ___normalizeUnicodeString_block_invoke()
{
  uint64_t result;

  result = unorm2_getNFCInstance();
  _normalizeUnicodeString_norm2 = result;
  return result;
}

BOOL pommesSuggestionsGetTokenCallback(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;

  v4 = *(_QWORD *)(a4 + 8);
  if (v4 <= a1 && a1 + 2 * a2 <= *(_QWORD *)(a4 + 16))
  {
    if ((a3 & 0x10) != 0)
    {
      if (a2 >= 1)
      {
        v6 = 0;
        v5 = (uint64_t)(a1 - v4) >> 1;
        do
        {
          v7 = 0;
          while (*(_WORD *)(a1 + 2 * v6 + 2 * v7) != 45)
          {
            ++v7;
            if (!(v6 - a2 + v7))
            {
              a3 = 0;
              a2 -= v6;
              goto LABEL_16;
            }
          }
          v8 = *(unsigned __int16 *)(a4 + 42);
          v10 = *(_QWORD *)(a4 + 24);
          v9 = *(_QWORD *)(a4 + 32);
          v11 = *(_WORD *)(a4 + 44);
          if (v7)
          {
            v12 = (uint64_t *)(v10 + 16 * v8);
            *v12 = v5;
            v12[1] = v7;
            *(_QWORD *)(v9 + 8 * v8) = 0;
            LOWORD(v8) = v8 + 1;
            ++v11;
          }
          v13 = v6 + v7;
          v14 = v5 + v7;
          v15 = (uint64_t *)(v10 + 16 * (unsigned __int16)v8);
          *v15 = v14;
          v15[1] = 1;
          *(_QWORD *)(v9 + 8 * (unsigned __int16)v8) = 32;
          *(_WORD *)(a4 + 42) = v8 + 1;
          *(_WORD *)(a4 + 44) = v11 + 1;
          v5 = v14 + 1;
          v6 = v13 + 1;
        }
        while (v6 != a2);
      }
    }
    else if ((a3 & 0x20000800) == 0)
    {
      v5 = (uint64_t)(a1 - v4) >> 1;
LABEL_16:
      v16 = *(unsigned __int16 *)(a4 + 42);
      v17 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * v16);
      *v17 = v5;
      v17[1] = a2;
      *(_QWORD *)(*(_QWORD *)(a4 + 32) + 8 * v16) = a3;
      *(_WORD *)(a4 + 42) = v16 + 1;
      ++*(_WORD *)(a4 + 44);
    }
  }
  return *(unsigned __int16 *)(a4 + 42) >= *(unsigned __int16 *)(a4 + 40)
      || *(unsigned __int16 *)(a4 + 64) > 0x3E7u;
}

BOOL pommesSuggestionsEmailAddressGetTokenCallback(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  v4 = *(_QWORD *)(a4 + 8);
  if (v4 <= (unint64_t)a1 && (unint64_t)&a1[a2] <= *(_QWORD *)(a4 + 16))
  {
    v5 = (uint64_t)((uint64_t)a1 - v4) >> 1;
    if ((a3 & 0x30) == 0)
    {
      v21 = *(unsigned __int16 *)(a4 + 42);
      v22 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * v21);
      *v22 = v5;
      v6 = a2;
      goto LABEL_22;
    }
    if (a2 >= 1)
    {
      v6 = 0;
      while (1)
      {
        v8 = *a1++;
        v7 = v8;
        v9 = (v8 - 33);
        if (v9 > 0x3F)
          goto LABEL_12;
        if (((1 << v9) & 0xE00000005000767DLL) != 0)
          goto LABEL_13;
        if (v9 == 31)
        {
          v10 = *(unsigned __int16 *)(a4 + 42);
          v12 = *(_QWORD *)(a4 + 24);
          v11 = *(_QWORD *)(a4 + 32);
          v13 = *(_WORD *)(a4 + 44);
          if (v6)
          {
            v14 = (uint64_t *)(v12 + 16 * v10);
            *v14 = v5;
            v14[1] = v6;
            *(_QWORD *)(v11 + 8 * v10) = 0;
            LOWORD(v10) = v10 + 1;
            ++v13;
          }
          v15 = v5 + v6;
          v16 = (uint64_t *)(v12 + 16 * (unsigned __int16)v10);
          *v16 = v15;
          v16[1] = 1;
          *(_QWORD *)(v11 + 8 * (unsigned __int16)v10) = 32;
          *(_WORD *)(a4 + 42) = v10 + 1;
          *(_WORD *)(a4 + 44) = v13 + 1;
          v5 = v15 + 1;
          v6 = 0;
        }
        else
        {
LABEL_12:
          if ((v7 - 123) < 4)
          {
LABEL_13:
            if (v6)
            {
              v17 = *(unsigned __int16 *)(a4 + 42);
              v18 = *(_QWORD *)(a4 + 32);
              v19 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * v17);
              *v19 = v5;
              v19[1] = v6;
              *(_QWORD *)(v18 + 8 * v17) = 0;
              *(_WORD *)(a4 + 42) = v17 + 1;
              ++*(_WORD *)(a4 + 44);
            }
            v20 = v6 + v5;
            v6 = 0;
            v5 = v20 + 1;
            goto LABEL_16;
          }
          ++v6;
        }
LABEL_16:
        if (!--a2)
        {
          if (v6)
          {
            a3 = 0;
            v21 = *(unsigned __int16 *)(a4 + 42);
            v22 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * v21);
            *v22 = v5;
LABEL_22:
            v22[1] = v6;
            *(_QWORD *)(*(_QWORD *)(a4 + 32) + 8 * v21) = a3;
            *(_WORD *)(a4 + 42) = v21 + 1;
            ++*(_WORD *)(a4 + 44);
          }
          return *(unsigned __int16 *)(a4 + 42) >= *(unsigned __int16 *)(a4 + 40);
        }
      }
    }
  }
  return *(unsigned __int16 *)(a4 + 42) >= *(unsigned __int16 *)(a4 + 40);
}

BOOL pommesSuggestionsLiteralGetTokenCallback(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v4 = *(_QWORD *)(a4 + 8);
  if (v4 <= a1 && a1 + 2 * a2 <= *(_QWORD *)(a4 + 16))
  {
    v5 = *(unsigned __int16 *)(a4 + 42);
    v6 = *(_QWORD *)(a4 + 32);
    v7 = (uint64_t *)(*(_QWORD *)(a4 + 24) + 16 * v5);
    *v7 = (uint64_t)(a1 - v4) >> 1;
    v7[1] = a2;
    *(_QWORD *)(v6 + 8 * v5) = a3;
    *(_WORD *)(a4 + 42) = v5 + 1;
    ++*(_WORD *)(a4 + 44);
  }
  return *(unsigned __int16 *)(a4 + 42) >= *(unsigned __int16 *)(a4 + 40);
}

BOOL pommesSuggestionsGetSentenceCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  if (a4 < 1)
  {
LABEL_18:
    if (!*(_BYTE *)(a5 + 66))
    {
      v21 = *(unsigned __int16 *)(a5 + 44);
      if (*(_WORD *)(a5 + 44))
      {
        v22 = *(unsigned __int16 *)(a5 + 64);
        v23 = (_QWORD *)(*(_QWORD *)(a5 + 56) + 16 * v22);
        *v23 = *(_QWORD *)(a5 + 48);
        v23[1] = v21;
        *(_WORD *)(a5 + 64) = v22 + 1;
        *(_QWORD *)(a5 + 48) = *(unsigned __int16 *)(a5 + 42);
        *(_WORD *)(a5 + 44) = 0;
      }
    }
    if (*(unsigned __int16 *)(a5 + 42) < *(unsigned __int16 *)(a5 + 40))
      return *(unsigned __int16 *)(a5 + 64) > 0x3E7u;
  }
  else
  {
    v5 = 0;
    v6 = *(unsigned __int16 *)(a5 + 40);
    v7 = *(unsigned __int16 *)(a5 + 42);
    while (1)
    {
      v8 = (uint64_t *)(a2 + 16 * v5);
      v10 = *v8;
      v9 = v8[1];
      v11 = *(_QWORD *)(a3 + 8 * v5);
      if ((v11 & 0x10) != 0)
      {
        if (v9 >= 1)
        {
          for (i = 0; i != v9; i += v13 + 1)
          {
            v13 = 0;
            while (*(_WORD *)(a1 + 2 * i + 2 * v13) != 45)
            {
              ++v13;
              if (!(i - v9 + v13))
              {
                v11 = 0;
                v9 -= i;
                goto LABEL_14;
              }
            }
            v15 = *(_QWORD *)(a5 + 24);
            v14 = *(_QWORD *)(a5 + 32);
            v16 = *(_WORD *)(a5 + 44);
            if (v13)
            {
              v17 = (_QWORD *)(v15 + 16 * (unsigned __int16)v7);
              *v17 = v10;
              v17[1] = v13;
              *(_QWORD *)(v14 + 8 * (unsigned __int16)v7++) = 0;
              ++v16;
            }
            v18 = v13 + v10;
            v19 = (_QWORD *)(v15 + 16 * (unsigned __int16)v7);
            *v19 = v18;
            v19[1] = 1;
            *(_QWORD *)(v14 + 8 * (unsigned __int16)v7++) = 32;
            *(_WORD *)(a5 + 42) = v7;
            *(_WORD *)(a5 + 44) = v16 + 1;
            v10 = v18 + 1;
          }
        }
      }
      else
      {
LABEL_14:
        v20 = (_QWORD *)(*(_QWORD *)(a5 + 24) + 16 * (unsigned __int16)v7);
        *v20 = v10;
        v20[1] = v9;
        *(_QWORD *)(*(_QWORD *)(a5 + 32) + 8 * (unsigned __int16)v7++) = v11;
        *(_WORD *)(a5 + 42) = v7;
        ++*(_WORD *)(a5 + 44);
      }
      if (v6 <= (unsigned __int16)v7 || *(unsigned __int16 *)(a5 + 64) >= 0x3E8u)
        break;
      if (++v5 == a4)
        goto LABEL_18;
    }
  }
  return 1;
}

void freeOverlayDir(uint64_t a1)
{
  unint64_t *v1;
  size_t v2;
  unint64_t v4;
  _QWORD *v5;

  v1 = *(unint64_t **)(a1 + 8);
  if (v1)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v2 = malloc_size(v1);
    if (v2 >= 0x10 && v2 >= ((32 * *v1) | 0x10) && *v1 != 0)
    {
      v4 = 0;
      v5 = v1 + 2;
      do
      {
        freeOverlayDir(v5);
        ++v4;
        v5 += 4;
      }
      while (v4 < *v1);
    }
    free(v1);
  }
}

uint64_t directoryOverlayProcessPaths(uint64_t a1, uint64_t a2)
{
  pthread_rwlock_t *v4;
  uint64_t **i;

  v4 = (pthread_rwlock_t *)(a1 + 8);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 8));
  for (i = *(uint64_t ***)(a1 + 456); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t, _QWORD, uint64_t *, _QWORD, uint64_t **))(a2 + 16))(a2, *((int *)i + 2), (uint64_t *)i + 2, *((unsigned int *)i + 3), &i[*((int *)i + 2) + 2]);
  return pthread_rwlock_unlock(v4);
}

uint64_t getBestDirectory(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t Child;
  uint64_t v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  if (*(uint64_t *)a1 <= 1)
  {
    v14 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21, (char)"FileTree_Overlay.c");
    free(v14);
    if (__valid_fs(-1))
      v22 = 2989;
    else
      v22 = 3072;
    *(_DWORD *)v22 = -559038737;
    abort();
  }
  v8 = a1;
  if (a2 == -1)
  {
    if (*(_DWORD *)(a1 + 16))
    {
      *a5 = 0;
      *a4 = -1;
    }
    checkDirectory((_QWORD *)a1);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 8);
    if (v9 && (v23 = 0, (Child = findChild(v9, *(_QWORD *)(a3 + 8 * a2), &v23)) != 0))
    {
      v12 = Child;
      checkDirectory((_QWORD *)v8);
      if (*(_DWORD *)(v8 + 16))
      {
        *a5 = v8;
        *a4 = a2;
      }
      return getBestDirectory(v12, (a2 - 1), a3, a4, a5);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

_QWORD *directoryDumpDirectoryPaths(_QWORD *result, int *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  if (result[3])
    result = overlayPathsAddDirectory(a2, (size_t)result);
  v4 = v3[1];
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = v4 + 32 * v5;
      v8 = *(_QWORD *)(v7 + 16);
      result = (_QWORD *)(v7 + 16);
      if (v8 >= 2)
      {
        result = (_QWORD *)directoryDumpDirectoryPaths(result, a2);
        v4 = v3[1];
      }
      v5 = v6;
    }
    while (*(_QWORD *)(v4 + 8) > (unint64_t)v6++);
  }
  return result;
}

void *overlayPathsAddDirectory(int *a1, size_t a2)
{
  size_t v2;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;
  char *v8;
  char *v9;
  void *result;

  v2 = a2;
  v4 = *(_DWORD *)(a2 + 16);
  v5 = *a1;
  LODWORD(a2) = a1[1];
  v6 = *a1 + 8 * v4 + 16;
  if (v6 <= a2)
  {
    v8 = (char *)*((_QWORD *)a1 + 1);
  }
  else
  {
    do
    {
      v7 = v6 > 2 * (int)a2;
      a2 = (2 * a2);
    }
    while (v7);
    a1[1] = a2;
    v8 = (char *)reallocf(*((void **)a1 + 1), a2);
    *((_QWORD *)a1 + 1) = v8;
    v5 = *a1;
    v4 = *(_DWORD *)(v2 + 16);
  }
  v9 = &v8[v5];
  *(_DWORD *)v9 = v4 + 1;
  *((_QWORD *)v9 + 1) = *(_QWORD *)v2;
  result = memcpy(v9 + 16, *(const void **)(v2 + 24), 8 * *(int *)(v2 + 16));
  *a1 += 8 * *(_DWORD *)(v2 + 16) + 16;
  return result;
}

char *__si_assert_copy_extra_268()
{
  char *v0;
  const char *v1;
  const char *v2;
  const char *v3;
  char *v5;
  char v6[1024];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  bzero(v6, 0x400uLL);
  v0 = getcwd(v6, 0x400uLL);
  if (v0)
    v1 = v0;
  else
    v1 = "";
  v5 = 0;
  v2 = (const char *)pthread_getspecific(__THREAD_STR_DATA_KEY);
  if (v2)
    v3 = v2;
  else
    v3 = "";
  asprintf(&v5, "%s %s", v1, v3);
  return v5;
}

void __message_assert_272(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  xpc_object_t v9;
  xpc_object_t v10;
  char *string[2];
  xpc_object_t values;
  _BYTE keys[24];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  string[0] = 0;
  string[1] = &a9;
  vasprintf(string, "%s:%u: failed assertion '%s' %s ", &a9);
  SISetCrashCStr(string[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)keys = 136315138;
    *(char **)&keys[4] = string[0];
    _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%s", keys, 0xCu);
  }
  *(_QWORD *)keys = "crash_string";
  v9 = xpc_string_create(string[0]);
  values = v9;
  v10 = xpc_dictionary_create((const char *const *)keys, &values, 1uLL);
  analytics_send_event();
  xpc_release(v10);
  xpc_release(v9);
  free(string[0]);
}

_QWORD *checkDirectory(_QWORD *result)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!*result)
  {
    v2 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9, (char)"FileTree_Overlay.c");
    free(v2);
    if (__valid_fs(-1))
      v10 = 2989;
    else
      v10 = 3072;
    *(_DWORD *)v10 = -559038737;
    abort();
  }
  v1 = (_QWORD *)result[1];
  if (v1 && *v1 >= (unint64_t)(v1[1] - 1))
  {
    v11 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, (char)"FileTree_Overlay.c");
    free(v11);
    if (__valid_fs(-1))
      v19 = 2989;
    else
      v19 = 3072;
    *(_DWORD *)v19 = -559038737;
    abort();
  }
  return result;
}

uint64_t findChild(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  BOOL v20;
  int v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  _BOOL4 v28;

  v3 = HIDWORD(a2) - a2 - 8;
  v4 = (a2 - (HIDWORD(a2) - a2) - 1640531527) ^ (v3 << 8);
  v5 = (16 - (HIDWORD(a2) - a2) - v4) ^ (v4 >> 13);
  v6 = (v3 - v4 - v5) ^ (v5 >> 12);
  v7 = (v4 - v5 - v6) ^ (v6 << 16);
  v8 = (v5 - v6 - v7) ^ (v7 >> 5);
  v9 = (v6 - v7 - v8) ^ (v8 >> 3);
  v10 = (v8 - v9 - ((v7 - v8 - v9) ^ (v9 << 10))) ^ (((v7 - v8 - v9) ^ (v9 << 10)) >> 15);
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (v11 - 1) & v10;
  if (v12 <= 1)
    v12 = 1;
  v13 = v12 - 1;
  v14 = a1 + 32 * v13;
  v17 = *(_QWORD *)(v14 + 16);
  v15 = v14 + 16;
  v16 = v17;
  if (!v17 || ((v18 = v11 - 1, v19 = v11 != 0, v16 != a2) ? (v20 = !v19) : (v20 = 1), v20))
  {
    v22 = -1;
  }
  else
  {
    v22 = -1;
    v23 = v18;
    do
    {
      if (v22 == -1 && v16 == 1)
        v22 = v13;
      if (v18 > (v13 + 1))
        v13 = (v13 + 1);
      else
        v13 = 0;
      v25 = a1 + 32 * v13;
      v26 = *(_QWORD *)(v25 + 16);
      v15 = v25 + 16;
      v16 = v26;
      if (!v26)
        break;
      v27 = v23-- != 0;
      v28 = v27;
    }
    while (v16 != a2 && v28);
  }
  if (v16 == a2)
  {
    if (!a3)
      return v15;
    goto LABEL_16;
  }
  v15 = 0;
  if (a3)
  {
    if (v22 != -1)
      LODWORD(v13) = v22;
LABEL_16:
    *a3 = v13;
  }
  return v15;
}

uint64_t directoryOverlay_unlock(uint64_t a1)
{
  return pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 240));
}

uint64_t negativeFindChild(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t result;
  int v17;
  int v18;
  BOOL v20;
  _BOOL4 v21;

  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0;
  v4 = HIDWORD(a2) - a2 - 8;
  v5 = (a2 - (HIDWORD(a2) - a2) - 1640531527) ^ (v4 << 8);
  v6 = (16 - (HIDWORD(a2) - a2) - v5) ^ (v5 >> 13);
  v7 = (v4 - v5 - v6) ^ (v6 >> 12);
  v8 = (v5 - v6 - v7) ^ (v7 << 16);
  v9 = (v6 - v7 - v8) ^ (v8 >> 5);
  v10 = (v7 - v8 - v9) ^ (v9 >> 3);
  v11 = *(_DWORD *)a1 - 1;
  v12 = v11 & ((v9 - v10 - ((v8 - v9 - v10) ^ (v10 << 10))) ^ (((v8 - v9 - v10) ^ (v10 << 10)) >> 15));
  if (v12 <= 1)
    v12 = 1;
  v13 = v12 - 1;
  v14 = *(_QWORD *)(v3 + 16 * v13);
  if (!v14 || (v14 != a2 ? (v15 = *(_DWORD *)a1 == 0) : (v15 = 1), v15))
  {
    v17 = -1;
  }
  else
  {
    v17 = -1;
    v18 = *(_DWORD *)a1 - 1;
    do
    {
      if (v17 == -1 && v14 == 1)
        v17 = v13;
      if ((int)v13 + 1 < v11)
        v13 = (v13 + 1);
      else
        v13 = 0;
      v14 = *(_QWORD *)(v3 + 16 * v13);
      if (!v14)
        break;
      v20 = v18-- != 0;
      v21 = v20;
    }
    while (v14 != a2 && v21);
  }
  if (v14 != a2)
  {
    if (a3)
    {
      result = 0;
      if (v17 != -1)
        LODWORD(v13) = v17;
      goto LABEL_17;
    }
    return 0;
  }
  result = v3 + 16 * v13;
  if (a3)
LABEL_17:
    *a3 = v13;
  return result;
}

uint64_t doInsertItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v17 = 0;
  result = negativeFindChild(a1, a2, &v17);
  if (result)
  {
    v8 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15, (char)"FileTree_Overlay.c");
    free(v8);
    if (__valid_fs(-1))
      v16 = 2989;
    else
      v16 = 3072;
    *(_DWORD *)v16 = -559038737;
    abort();
  }
  v7 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 16 * v17);
  *v7 = a2;
  v7[1] = a3;
  ++*(_DWORD *)(a1 + 4);
  return result;
}

uint64_t getDirectory(_QWORD *a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t Child;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];

  if ((uint64_t)*a1 <= 1)
  {
    v18 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25, (char)"FileTree_Overlay.c");
    free(v18);
    if (__valid_fs(-1))
      v26 = 2989;
    else
      v26 = 3072;
    *(_DWORD *)v26 = -559038737;
    abort();
  }
  v5 = a1;
  if (a2 != -1)
  {
    v8 = a1[1];
    if (v8)
    {
      LODWORD(v27[0]) = 0;
      v9 = *(_QWORD *)(a3 + 8 * a2);
      Child = findChild(v8, v9, v27);
      if (Child)
      {
        v11 = Child;
        checkDirectory(v5);
        v12 = (a2 - 1);
        v13 = (_QWORD *)v11;
        return getDirectory(v13, v12, a3, a4);
      }
      if ((a4 & 1) != 0)
      {
        v14 = LODWORD(v27[0]);
        goto LABEL_11;
      }
    }
    else if ((_DWORD)a4)
    {
      v14 = 0;
      v9 = *(_QWORD *)(a3 + 8 * a2);
LABEL_11:
      memset(&v27[1], 0, 24);
      checkDirectory(v5);
      v27[0] = v9;
      insertDirectory(v5, v14, (uint64_t)v27);
      v16 = v15;
      checkDirectory(v15);
      v12 = (a2 - 1);
      v13 = v16;
      return getDirectory(v13, v12, a3, a4);
    }
    return 0;
  }
  checkDirectory(a1);
  return (uint64_t)v5;
}

void insertDirectory(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (*(uint64_t *)a3 <= 2 || *(_QWORD *)a3 == *a1)
  {
    v18 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25, (char)"FileTree_Overlay.c");
    free(v18);
    if (__valid_fs(-1))
      v26 = 2989;
    else
      v26 = 3072;
    *(_DWORD *)v26 = -559038737;
    abort();
  }
  checkDirectory(a1);
  checkDirectory((_QWORD *)a3);
  v6 = (_QWORD *)a1[1];
  if (v6)
  {
    v7 = v6[1];
    if (5 * *v6 + 5 >= (unint64_t)(4 * v7 - 4))
    {
      v6[1] = 2 * v7;
      v13 = malloc_type_calloc(1uLL, v7 << 6, 0x1030040D6482CB5uLL);
      a1[1] = v13;
      v13[1] = v6[1];
      v14 = v6[1] >> 1;
      v6[1] = v14;
      if (v14 != 1)
      {
        v15 = 0;
        v16 = 1;
        do
        {
          if ((uint64_t)v6[4 * v15 + 2] >= 2)
          {
            doInsertDirectory((_QWORD *)a1[1], (uint64_t)&v6[4 * v15 + 2]);
            v14 = v6[1];
          }
          v15 = v16;
        }
        while (v14 - 1 > (unint64_t)v16++);
        v13 = (_QWORD *)a1[1];
      }
      doInsertDirectory(v13, a3);
      free(v6);
    }
    else
    {
      v8 = &v6[4 * a2];
      v10 = v8[2];
      v9 = v8 + 2;
      if (v10 >= 2)
      {
        v27 = __si_assert_copy_extra_268();
        __message_assert_272((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, (char)"FileTree_Overlay.c");
        free(v27);
        if (__valid_fs(-1))
          v35 = 2989;
        else
          v35 = 3072;
        *(_DWORD *)v35 = -559038737;
        abort();
      }
      v11 = *(_OWORD *)(a3 + 16);
      *v9 = *(_OWORD *)a3;
      v9[1] = v11;
      ++*(_QWORD *)a1[1];
      checkDirectory(a1);
    }
  }
  else
  {
    v12 = malloc_type_calloc(1uLL, 0x80uLL, 0x1030040D6482CB5uLL);
    a1[1] = v12;
    v12[1] = 4;
    doInsertDirectory(v12, a3);
  }
}

__n128 doInsertDirectory(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __n128 result;
  __int128 v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;

  v16 = 0;
  if (findChild((uint64_t)a1, *(_QWORD *)a2, &v16))
  {
    v7 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, (char)"FileTree_Overlay.c");
    free(v7);
    if (__valid_fs(-1))
      v15 = 2989;
    else
      v15 = 3072;
    *(_DWORD *)v15 = -559038737;
    abort();
  }
  v4 = &a1[4 * v16];
  result = *(__n128 *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v4 + 2) = v6;
  ++*a1;
  return result;
}

uint64_t directoryOverlayMoveDirectory(uint64_t a1, unsigned int a2, uint64_t *a3, unsigned int a4, _QWORD *a5)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _QWORD *Directory;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 *Child;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void *v25;
  _DWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  pthread_rwlock_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  size_t v47;
  char *v48;
  void *v49;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  void *__src;
  void *v73;
  unsigned int v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  unsigned int v79;
  _DWORD v80[3];

  v9 = (_QWORD *)(a1 + 208);
  v8 = *(_QWORD *)(a1 + 208);
  if (a3[a2 - 1] == v8)
    v10 = a2 - 1;
  else
    v10 = a2;
  if (a5[a4 - 1] == v8)
    v11 = a4 - 1;
  else
    v11 = a4;
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 8));
  v79 = 0;
  v12 = v10 - 1;
  v77 = 0u;
  v78 = 0u;
  v73 = a3 + 1;
  Directory = (_QWORD *)getDirectory(v9, v10 - 2, (uint64_t)(a3 + 1), 0);
  *(_QWORD *)&v75 = Directory;
  v74 = v10 - 1;
  if (Directory)
  {
    v14 = Directory;
    v15 = (_QWORD *)Directory[1];
    if (v15 && *v15)
    {
      checkDirectory(Directory);
      v80[0] = 0;
      v16 = (_QWORD *)v14[1];
      v17 = *a3;
      Child = (__int128 *)findChild((uint64_t)v16, *a3, v80);
      if (Child)
      {
        v19 = Child[1];
        v77 = *Child;
        v78 = v19;
        v20 = &v16[4 * v80[0]];
        v22 = v20[2];
        v21 = v20 + 2;
        if (v22 != v17)
        {
          v60 = __si_assert_copy_extra_268();
          __message_assert_272((uint64_t)v60, v61, v62, v63, v64, v65, v66, v67, (char)"FileTree_Overlay.c");
          free(v60);
          if (__valid_fs(-1))
            v68 = 2989;
          else
            v68 = 3072;
          *(_DWORD *)v68 = -559038737;
          abort();
        }
        --*v16;
        *v21 = 1;
        checkDirectory(v14);
        goto LABEL_19;
      }
      v12 = v10 - 1;
    }
    v23 = *((_DWORD *)v14 + 4);
    if (v23)
    {
      v79 = v10 - 2;
      v24 = *v14;
      v25 = (void *)v14[3];
LABEL_18:
      __src = v25;
      goto LABEL_20;
    }
  }
  getBestDirectory((uint64_t)v9, v12, (uint64_t)a3, &v79, &v75);
  if ((_QWORD)v75)
  {
    v24 = *(_QWORD *)v75;
    v23 = *(_DWORD *)(v75 + 16);
    v25 = *(void **)(v75 + 24);
    goto LABEL_18;
  }
LABEL_19:
  v24 = 0;
  v23 = 0;
  __src = 0;
LABEL_20:
  v26 = malloc_type_malloc(8 * (v11 + v10) + 16, 0x810A14A5uLL);
  v26[2] = v10;
  v26[3] = v11;
  *(_QWORD *)v26 = 0;
  memcpy(v26 + 4, a3, 8 * v10);
  memcpy(&v26[2 * v10 + 4], a5, 8 * v11);
  if (*(_QWORD *)(a1 + 456))
  {
    v27 = (_QWORD *)(a1 + 464);
    **(_QWORD **)(a1 + 464) = v26;
  }
  else
  {
    *(_QWORD *)(a1 + 456) = v26;
    v27 = (_QWORD *)(a1 + 464);
  }
  *v27 = v26;
  v28 = v77;
  if (!(_QWORD)v77)
  {
    v33 = getDirectory(v9, v11 - 1, (uint64_t)a5, 1);
    v80[0] = 0;
    v34 = *(_QWORD *)(v33 + 8);
    if (v34)
    {
      if (findChild(v34, *a3, v80))
      {
LABEL_49:
        v31 = (pthread_rwlock_t *)(v9 - 25);
        return pthread_rwlock_unlock(v31);
      }
      v35 = v80[0];
    }
    else
    {
      v35 = 0;
    }
    pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 240));
    v36 = *a3;
    if (*a3 <= 2)
    {
      v51 = __si_assert_copy_extra_268();
      __message_assert_272((uint64_t)v51, v52, v53, v54, v55, v56, v57, v58, (char)"FileTree_Overlay.c");
      free(v51);
      if (__valid_fs(-1))
        v59 = 2989;
      else
        v59 = 3072;
      *(_DWORD *)v59 = -559038737;
      abort();
    }
    v37 = a3[1];
    v38 = *(uint64_t **)(a1 + 448);
    v70 = v35;
    v71 = (_QWORD *)v33;
    if (v38)
    {
      v39 = *(unsigned int *)(a1 + 440);
      if (5 * *(_DWORD *)(a1 + 444) + 5 >= (4 * v39 - 4))
      {
        v69 = a3[1];
        *(_DWORD *)(a1 + 440) = 2 * v39;
        *(_QWORD *)(a1 + 448) = malloc_type_calloc(1uLL, 32 * (2 * v39), 0x1030040D6482CB5uLL);
        if ((_DWORD)v39)
        {
          v40 = v38 + 1;
          do
          {
            v41 = *(v40 - 1);
            if (v41 >= 2)
              doInsertItem(a1 + 440, v41, *v40);
            v40 += 2;
            --v39;
          }
          while (v39);
        }
        free(v38);
        v37 = v69;
      }
    }
    else
    {
      v42 = a3[1];
      v43 = malloc_type_calloc(1uLL, 0x40uLL, 0x1000040451B5BE8uLL);
      v37 = v42;
      *(_QWORD *)(a1 + 448) = v43;
      *(_DWORD *)(a1 + 440) = 4;
    }
    doInsertItem(a1 + 440, v36, v37);
    pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 240));
    v44 = v74 - v79;
    if (v24)
      v45 = v74 - v79 + v23;
    else
      v45 = v74;
    v46 = *a3;
    v47 = 8 * (int)v45;
    v48 = (char *)malloc_type_malloc(v47, 0x100004000313F17uLL);
    v49 = v48;
    v77 = (unint64_t)v46;
    LODWORD(v78) = v45;
    *((_QWORD *)&v78 + 1) = v48;
    if (v24)
    {
      v47 = 8 * (int)v44;
      memcpy(&v48[v47], __src, 8 * v23);
    }
    memcpy(v49, v73, v47);
    v75 = v77;
    v76 = v78;
    insertDirectory(v71, v70, (uint64_t)&v75);
    goto LABEL_49;
  }
  checkDirectory(&v77);
  v29 = (_QWORD *)getDirectory(v9, v11 - 1, (uint64_t)a5, 1);
  checkDirectory(v29);
  v80[0] = 0;
  v30 = v29[1];
  if (!v30)
  {
    v32 = 0;
    v31 = (pthread_rwlock_t *)(v9 - 25);
    goto LABEL_31;
  }
  v31 = (pthread_rwlock_t *)(v9 - 25);
  if (!findChild(v30, v28, v80))
  {
    v32 = v80[0];
LABEL_31:
    checkDirectory(v29);
    v75 = v77;
    v76 = v78;
    insertDirectory(v29, v32, (uint64_t)&v75);
  }
  return pthread_rwlock_unlock(v31);
}

uint64_t getDirectory_290(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t Child;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  _QWORD v24[4];

  if ((uint64_t)*a1 <= 1)
  {
    v22 = __si_assert_copy_extra_268();
    v19 = v22;
    v23 = "";
    if (v22)
      v23 = v22;
    __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 134, "directory->fileid>=2", v23);
    goto LABEL_19;
  }
  v5 = a1;
  if (a2 != -1)
  {
    if ((a2 & 0x80000000) == 0)
    {
      v8 = a1[1];
      if (v8)
      {
        LODWORD(v24[0]) = 0;
        v9 = *(_QWORD *)(a3 + 8 * a2);
        Child = findChild(v8, v9, v24);
        if (Child)
        {
          v11 = Child;
          checkDirectory_297(v5);
          v12 = a2 - 1;
          v13 = (_QWORD *)v11;
          return getDirectory_290(v13, v12, a3, a4);
        }
        if ((a4 & 1) != 0)
        {
          v14 = LODWORD(v24[0]);
          goto LABEL_12;
        }
      }
      else if ((_DWORD)a4)
      {
        v14 = 0;
        v9 = *(_QWORD *)(a3 + 8 * a2);
LABEL_12:
        memset(&v24[1], 0, 24);
        checkDirectory_297(v5);
        v24[0] = v9;
        insertDirectory_300(v5, v14, v24);
        v16 = v15;
        checkDirectory_297(v15);
        v12 = a2 - 1;
        v13 = v16;
        return getDirectory_290(v13, v12, a3, a4);
      }
      return 0;
    }
    v18 = __si_assert_copy_extra_268();
    v19 = v18;
    v20 = "";
    if (v18)
      v20 = v18;
    __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 139, "depth >= 0", v20);
LABEL_19:
    free(v19);
    if (__valid_fs(-1))
      v21 = 2989;
    else
      v21 = 3072;
    *(_DWORD *)v21 = -559038737;
    abort();
  }
  checkDirectory_297(a1);
  return (uint64_t)v5;
}

uint64_t getAllPostings(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  if (*(_DWORD *)(result + 24))
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, result + 16);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 && *(_QWORD *)(v4 + 8) != 1)
  {
    v5 = 0;
    v6 = 1;
    do
    {
      v7 = v4 + 32 * v5;
      v8 = *(_QWORD *)(v7 + 16);
      result = v7 + 16;
      if (v8 >= 2)
      {
        result = getAllPostings(result, a2);
        v4 = *(_QWORD *)(v3 + 8);
      }
      v5 = v6;
    }
    while (*(_QWORD *)(v4 + 8) - 1 > (unint64_t)v6++);
  }
  return result;
}

_QWORD *checkDirectory_297(_QWORD *result)
{
  _QWORD *v1;
  char *v2;
  char *v3;
  const char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  const char *v8;
  uint64_t v9;

  if (!*result)
  {
    v2 = __si_assert_copy_extra_268();
    v3 = v2;
    v4 = "";
    if (v2)
      v4 = v2;
    __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 117, "directory->fileid", v4);
    free(v3);
    if (__valid_fs(-1))
      v5 = 2989;
    else
      v5 = 3072;
    *(_DWORD *)v5 = -559038737;
    abort();
  }
  v1 = (_QWORD *)result[1];
  if (v1 && *v1 >= (unint64_t)(v1[1] - 1))
  {
    v6 = __si_assert_copy_extra_268();
    v7 = v6;
    v8 = "";
    if (v6)
      v8 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 119, "directory->children->childCount < directory->children->pageSize-1", v8);
    free(v7);
    if (__valid_fs(-1))
      v9 = 2989;
    else
      v9 = 3072;
    *(_DWORD *)v9 = -559038737;
    abort();
  }
  return result;
}

void insertDirectory_300(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  char *v18;
  char *v19;
  const char *v20;
  char *v21;
  char *v22;
  char *v23;
  const char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  uint64_t v29;

  if ((uint64_t)*a3 <= 2)
  {
    v18 = __si_assert_copy_extra_268();
    v19 = v18;
    v20 = "";
    if (v18)
      v20 = v18;
    __message_assert("%s:%u: failed assertion '%s' %s got file id %lld", "FileTree_UpdateSet.c", 79, "newDirectory.fileid >2", v20, *a3);
    v21 = v19;
LABEL_21:
    free(v21);
    if (__valid_fs(-1))
      v25 = 2989;
    else
      v25 = 3072;
    *(_DWORD *)v25 = -559038737;
    abort();
  }
  if (*a3 == *a1)
  {
    v22 = __si_assert_copy_extra_268();
    v23 = v22;
    v24 = "";
    if (v22)
      v24 = v22;
    __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 80, "newDirectory.fileid != directory->fileid", v24);
    v21 = v23;
    goto LABEL_21;
  }
  checkDirectory_297(a1);
  checkDirectory_297(a3);
  v6 = (_QWORD *)a1[1];
  if (v6)
  {
    v7 = v6[1];
    if (5 * *v6 + 5 >= (unint64_t)(4 * v7 - 4))
    {
      v6[1] = 2 * v7;
      v13 = malloc_type_calloc(1uLL, v7 << 6, 0x1020040D49128EBuLL);
      a1[1] = v13;
      v13[1] = v6[1];
      v14 = v6[1] >> 1;
      v6[1] = v14;
      if (v14 != 1)
      {
        v15 = 0;
        v16 = 1;
        do
        {
          if ((uint64_t)v6[4 * v15 + 2] >= 2)
          {
            doInsertDirectory_304((_QWORD *)a1[1], (uint64_t)&v6[4 * v15 + 2]);
            v14 = v6[1];
          }
          v15 = v16;
        }
        while (v14 - 1 > (unint64_t)v16++);
        v13 = (_QWORD *)a1[1];
      }
      doInsertDirectory_304(v13, (uint64_t)a3);
      free(v6);
    }
    else
    {
      v8 = &v6[4 * a2];
      v10 = v8[2];
      v9 = v8 + 2;
      if (v10 >= 2)
      {
        v26 = __si_assert_copy_extra_268();
        v27 = v26;
        v28 = "";
        if (v26)
          v28 = v26;
        __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 106, "directory->children->nodes[slot].fileid<=1", v28);
        free(v27);
        if (__valid_fs(-1))
          v29 = 2989;
        else
          v29 = 3072;
        *(_DWORD *)v29 = -559038737;
        abort();
      }
      v11 = *((_OWORD *)a3 + 1);
      *v9 = *(_OWORD *)a3;
      v9[1] = v11;
      ++*(_QWORD *)a1[1];
      checkDirectory_297(a1);
    }
  }
  else
  {
    v12 = malloc_type_calloc(1uLL, 0x80uLL, 0x1020040D49128EBuLL);
    a1[1] = v12;
    v12[1] = 4;
    doInsertDirectory_304(v12, (uint64_t)a3);
  }
}

__n128 doInsertDirectory_304(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  __n128 result;
  __int128 v6;
  char *v7;
  char *v8;
  const char *v9;
  uint64_t v10;
  unsigned int v11;

  v11 = 0;
  if (findChild((uint64_t)a1, *(_QWORD *)a2, &v11))
  {
    v7 = __si_assert_copy_extra_268();
    v8 = v7;
    v9 = "";
    if (v7)
      v9 = v7;
    __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 72, "dir==0", v9);
    free(v8);
    if (__valid_fs(-1))
      v10 = 2989;
    else
      v10 = 3072;
    *(_DWORD *)v10 = -559038737;
    abort();
  }
  v4 = &a1[4 * v11];
  result = *(__n128 *)a2;
  v6 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v4 + 2) = v6;
  ++*a1;
  return result;
}

uint64_t doChildFile(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  const void *v18;
  int v19;
  int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  size_t v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  unsigned int v34;

  v10 = a3 - 1;
  v11 = *(_QWORD *)(a4 + 8 * (a3 - 1));
  if (v11 == 2 || v11 == *a2)
  {
    --a3;
    if (!v10)
    {
      LODWORD(v14) = -1;
      goto LABEL_16;
    }
  }
  v13 = 0;
  do
  {
    if (*(uint64_t *)(a4 + 8 * v13) <= 0)
    {
      v28 = __si_assert_copy_extra_268();
      __message_assert("%s:%u: failed assertion '%s' %s Got parent[%d] with id %lld depth: %d");
      goto LABEL_31;
    }
    ++v13;
  }
  while (a3 != v13);
  v14 = (a3 - 1);
  if (a3 >= 3)
  {
    v15 = 0;
    do
    {
      if (*(_QWORD *)(a4 + 8 * v15) <= 2uLL)
      {
        v30 = __si_assert_copy_extra_268();
        v31 = v30;
        v32 = "";
        if (v30)
          v32 = v30;
        __message_assert("%s:%u: failed assertion '%s' %s Got parent with id %lld", "FileTree_UpdateSet.c", 217, "(uint64_t)parents[i-1] > 2", v32, *(_QWORD *)(a4 + 8 * v15));
        free(v31);
        if (__valid_fs(-1))
          v33 = 2989;
        else
          v33 = 3072;
        *(_DWORD *)v33 = -559038737;
        abort();
      }
      ++v15;
    }
    while (v14 - 1 != v15);
  }
LABEL_16:
  result = getDirectory_290(a2, v14, a4, 1);
  v17 = result;
  v18 = (const void *)(result + 16);
  v19 = *(_DWORD *)(result + 16) & 1;
  if (*(_DWORD *)(result + 24))
  {
    if (v19)
      v20 = 2;
    else
      v20 = 1;
    v21 = (unsigned int *)(a1 + 12);
    v22 = atomic_load((unsigned int *)(a1 + 12));
    v23 = v22 + v20;
    v24 = *(unsigned int *)(a1 + 8);
    if (v23 >= v24)
    {
      v34 = 2 * v24;
      if (!(_DWORD)v24)
        v34 = 0x4000;
      *(_DWORD *)(a1 + 8) = v34;
      if (my_vm_reallocate((void **)a1, 12 * v24, 12 * v34, 243, *(_QWORD *)(a1 + 16)))
      {
        v28 = __si_assert_copy_extra_268();
        __message_assert("%s:%u: failed assertion '%s' %s ");
LABEL_31:
        free(v28);
        if (__valid_fs(-1))
          v29 = 2989;
        else
          v29 = 3072;
        *(_DWORD *)v29 = -559038737;
        abort();
      }
    }
    do
      v25 = __ldaxr(v21);
    while (__stlxr(v25 + v20, v21));
    if (v19)
      v26 = 16;
    else
      v26 = 12;
    result = (uint64_t)memcpy((void *)(*(_QWORD *)a1 + 12 * v25), v18, v26);
    v19 = 2 * v25;
  }
  if (a6)
  {
    *(_QWORD *)(v17 + 24) = a5;
    *(_DWORD *)(v17 + 16) = v19 | 1;
    v27 = 2 * (a6 != 2);
  }
  else
  {
    *(_DWORD *)(v17 + 24) = a5;
    *(_DWORD *)(v17 + 16) = v19 & 0xFFFFFFFE;
    v27 = 1;
  }
  *(_DWORD *)(v17 + 20) = v27;
  return result;
}

void moveDirectory(uint64_t *a1, int a2, uint64_t *a3, int a4, uint64_t a5)
{
  int v6;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *Directory_290;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 *Child;
  __int128 v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  _OWORD v31[2];
  unsigned int v32;
  __int128 v33;
  __int128 v34;

  v6 = a4;
  v9 = a2 - 1;
  v10 = *a1;
  v11 = a4 - 1;
  v12 = *(_QWORD *)(a5 + 8 * (a4 - 1));
  if (a3[a2 - 1] != *a1)
    v9 = a2;
  v33 = 0u;
  v34 = 0u;
  Directory_290 = (_QWORD *)getDirectory_290(a1, v9 - 2, (uint64_t)(a3 + 1), 0);
  if (Directory_290)
  {
    v14 = Directory_290;
    v15 = (_QWORD *)Directory_290[1];
    if (v15)
    {
      if (*v15)
      {
        checkDirectory_297(Directory_290);
        LODWORD(v31[0]) = 0;
        v16 = (_QWORD *)v14[1];
        v17 = *a3;
        Child = (__int128 *)findChild((uint64_t)v16, v17, v31);
        if (Child)
        {
          v19 = Child[1];
          v33 = *Child;
          v34 = v19;
          v20 = &v16[4 * LODWORD(v31[0])];
          v22 = v20[2];
          v21 = v20 + 2;
          if (v22 != v17)
          {
            v27 = __si_assert_copy_extra_268();
            v28 = v27;
            v29 = "";
            if (v27)
              v29 = v27;
            __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 286, "directory->children->nodes[slot].fileid==p1[0]", v29);
            free(v28);
            if (__valid_fs(-1))
              v30 = 2989;
            else
              v30 = 3072;
            *(_DWORD *)v30 = -559038737;
            abort();
          }
          --*v16;
          *v21 = 1;
          checkDirectory_297(v14);
          v23 = v33;
          if ((_QWORD)v33)
          {
            if (v12 == v10)
              v6 = v11;
            checkDirectory_297(&v33);
            v24 = (_QWORD *)getDirectory_290(a1, v6 - 1, a5, 1);
            checkDirectory_297(v24);
            v32 = 0;
            v25 = v24[1];
            if (v25)
            {
              if (findChild(v25, v23, &v32))
                return;
              v26 = v32;
            }
            else
            {
              v26 = 0;
            }
            checkDirectory_297(v24);
            v31[0] = v33;
            v31[1] = v34;
            insertDirectory_300(v24, v26, v31);
          }
        }
      }
    }
  }
}

uint64_t storeDirStoreUpdateSet(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  size_t v19;
  char *v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  __int128 __src;
  __int128 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  v7 = a3[5];
  if ((unint64_t)(a3[4] - v7) < 0xB)
  {
    __src = 0u;
    v25 = 0u;
    v18 = writeVInt64((uint64_t)&__src, 0, v6);
    result = store_stream_write_bytes((uint64_t)a3, (char *)&__src, v18);
  }
  else
  {
    result = writeVInt64(a3[6], v7, v6);
    a3[5] = result;
  }
  if (*(_DWORD *)(a2 + 24))
  {
    result = CIWritePostings((uint64_t)a3, a1, 0, (unsigned int *)(a2 + 16), 0, 0);
  }
  else
  {
    v9 = a3[5];
    if ((unint64_t)(a3[4] - v9) < 0xB)
    {
      __src = 0u;
      v25 = 0u;
      result = store_stream_write_bytes((uint64_t)a3, (char *)&__src, 1uLL);
    }
    else
    {
      *(_BYTE *)(a3[6] + v9) = 0;
      a3[5] = v9 + 1;
    }
  }
  v10 = *(unint64_t **)(a2 + 8);
  if (v10)
  {
    v11 = *v10;
    v12 = a3[5];
    if ((unint64_t)(a3[4] - v12) < 0xB)
    {
      __src = 0u;
      v25 = 0u;
      v19 = writeVInt64((uint64_t)&__src, 0, v11);
      result = store_stream_write_bytes((uint64_t)a3, (char *)&__src, v19);
    }
    else
    {
      result = writeVInt64(a3[6], v12, v11);
      a3[5] = result;
    }
    v13 = *(_QWORD *)(a2 + 8);
    if (*(_QWORD *)(v13 + 8) == 1)
    {
      v14 = 0;
    }
    else
    {
      v14 = 0;
      v16 = 0;
      v17 = 16;
      do
      {
        if (*(uint64_t *)(v13 + v17) >= 2)
        {
          result = storeDirStoreUpdateSet(a1);
          ++v14;
          v13 = *(_QWORD *)(a2 + 8);
        }
        ++v16;
        v17 += 32;
      }
      while (v16 < *(_QWORD *)(v13 + 8) - 1);
    }
    if (v14 != *(_DWORD *)v13)
    {
      v20 = __si_assert_copy_extra_268();
      v21 = v20;
      v22 = "";
      if (v20)
        v22 = v20;
      __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 373, "(uint32_t)outChildren == (uint32_t)root->children->childCount", v22);
      free(v21);
      if (__valid_fs(-1))
        v23 = 2989;
      else
        v23 = 3072;
      *(_DWORD *)v23 = -559038737;
      abort();
    }
  }
  else
  {
    v15 = a3[5];
    if ((unint64_t)(a3[4] - v15) < 6)
    {
      __src = 0u;
      v25 = 0u;
      return store_stream_write_bytes((uint64_t)a3, (char *)&__src, 1uLL);
    }
    else
    {
      *(_BYTE *)(a3[6] + v15) = 0;
      a3[5] = v15 + 1;
    }
  }
  return result;
}

uint64_t writeVInt64(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _BYTE *v3;
  uint64_t v4;
  uint64x2_t v5;
  int32x2_t v6;
  _BYTE *v7;
  uint64x2_t v8;
  int32x2_t v9;
  int8x8_t *v10;
  char v11;
  uint64_t v12;
  uint64x2_t v13;
  int16x8_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64x2_t v17;
  int16x8_t v18;

  if (HIDWORD(a3))
  {
    if ((a3 & 0x8000000000000000) != 0)
    {
      v8 = (uint64x2_t)vdupq_n_s64(a3);
      v9.i32[0] = a3;
      v10 = (int8x8_t *)(a1 + a2);
      v9.i32[1] = a3 >> 7;
      *v10 = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v9, (int64x2_t)vshlq_u64(v8, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
      v4 = a2 + 9;
      v10[1].i8[0] = HIBYTE(a3) | 0x80;
      LOBYTE(a3) = 1;
    }
    else if ((a3 & 0x7F00000000000000) != 0)
    {
      v5 = (uint64x2_t)vdupq_n_s64(a3);
      v6.i32[0] = a3;
      v4 = a2 + 8;
      v6.i32[1] = a3 >> 7;
      *(int8x8_t *)(a1 + a2) = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v6, (int64x2_t)vshlq_u64(v5, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v5, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v5, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
      a3 = (a3 & 0x7F00000000000000) >> 56;
    }
    else
    {
      v11 = a3 | 0x80;
      if ((a3 & 0xFE000000000000) != 0)
      {
        v12 = a1 + a2;
        *(_BYTE *)v12 = v11;
        v13 = (uint64x2_t)vdupq_n_s64(a3);
        v14 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_1B8631B90));
        v14.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v14) | 0x80008000800080;
        *(_DWORD *)(v12 + 1) = vmovn_s16(v14).u32[0];
        *(_BYTE *)(v12 + 5) = (a3 >> 35) | 0x80;
        v4 = a2 + 7;
        *(_BYTE *)(v12 + 6) = (a3 >> 42) | 0x80;
        a3 = (a3 & 0xFE000000000000) >> 49;
      }
      else
      {
        v16 = a1 + a2;
        *(_BYTE *)v16 = v11;
        v17 = (uint64x2_t)vdupq_n_s64(a3);
        v4 = a2 + 5;
        v18 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v17, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v17, (uint64x2_t)xmmword_1B8631B90));
        v18.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v18) | 0x80008000800080;
        *(_DWORD *)(v16 + 1) = vmovn_s16(v18).u32[0];
        if ((a3 & 0x1FC0000000000) != 0)
        {
          *(_BYTE *)(a1 + v4) = (a3 >> 35) | 0x80;
          v4 = a2 + 6;
          a3 = (a3 & 0x1FC0000000000) >> 42;
        }
        else
        {
          a3 = (a3 >> 35) & 0x7F;
        }
      }
    }
  }
  else if ((a3 & 0x7F0000000) != 0)
  {
    v3 = (_BYTE *)(a1 + a2);
    *v3 = a3 | 0x80;
    v3[1] = (a3 >> 7) | 0x80;
    v3[2] = (a3 >> 14) | 0x80;
    v4 = a2 + 4;
    v3[3] = (a3 >> 21) | 0x80;
    a3 = (a3 & 0x7F0000000) >> 28;
  }
  else if ((a3 & 0xFE00000) != 0)
  {
    v7 = (_BYTE *)(a1 + a2);
    *v7 = a3 | 0x80;
    v7[1] = (a3 >> 7) | 0x80;
    v4 = a2 + 3;
    v7[2] = (a3 >> 14) | 0x80;
    a3 = (a3 & 0xFE00000) >> 21;
  }
  else if ((a3 & 0x1FC000) != 0)
  {
    v15 = (_BYTE *)(a1 + a2);
    *v15 = a3 | 0x80;
    v4 = a2 + 2;
    v15[1] = (a3 >> 7) | 0x80;
    a3 = (a3 & 0x1FC000) >> 14;
  }
  else if ((a3 & 0x3F80) != 0)
  {
    v4 = a2 + 1;
    *(_BYTE *)(a1 + a2) = a3 | 0x80;
    a3 = (a3 & 0x3F80) >> 7;
  }
  else
  {
    v4 = a2;
  }
  *(_BYTE *)(a1 + v4) = a3;
  return v4 + 1;
}

uint64_t store_stream_write_bytes(uint64_t a1, char *__src, size_t __n)
{
  size_t v3;
  uint64_t v6;
  size_t v7;
  size_t i;
  size_t v9;
  uint64_t result;

  v3 = __n;
  v7 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  for (i = v6 + __n; i >= v7; i = v6 + v3)
  {
    v9 = v7 - v6;
    memcpy((void *)(*(_QWORD *)(a1 + 48) + v6), __src, v7 - v6);
    *(_QWORD *)(a1 + 40) += v9;
    result = store_stream_flush((unsigned int *)a1, 0);
    if ((_DWORD)result)
      return result;
    __src += v9;
    v3 -= v9;
    v7 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
  }
  result = (uint64_t)memcpy((void *)(*(_QWORD *)(a1 + 48) + v6), __src, v3);
  *(_QWORD *)(a1 + 40) += v3;
  return result;
}

uint64_t restoreDirStoreUpdateSet(unsigned int *a1, __int128 *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  BOOL v9;
  int vint32;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 *p_dst;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  _QWORD *v54;
  __int128 v56;
  int v57;
  int v58;
  char *v59;
  char *v60;
  const char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  const char *v65;
  uint64_t v66;
  unint64_t v67;
  __int128 *v68;
  size_t v69;
  unint64_t __nbyte;
  unsigned int v71;
  int v72;
  __int128 *v73;
  int *v74;
  int v75;
  __int128 __dst;
  __int128 v78;

  v5 = *((_QWORD *)a3 + 5);
  if ((unint64_t)(*((_QWORD *)a3 + 4) - v5) < 0xB)
  {
    v57 = 0;
    v7 = 0;
    LOBYTE(__dst) = 0;
    while (store_stream_read_bytes(a3, (char *)&__dst) == 1)
    {
      v7 |= (unint64_t)(__dst & 0x7F) << v57;
      v57 += 7;
      if ((__dst & 0x80) == 0)
        goto LABEL_7;
    }
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_BYTE *)(*((_QWORD *)a3 + 6) + v5++);
      v7 |= (unint64_t)(v8 & 0x7F) << v6;
      if ((v8 & 0x80) == 0)
        break;
      v9 = v6 == 63;
      v6 += 7;
    }
    while (!v9);
    *((_QWORD *)a3 + 5) = v5;
  }
LABEL_7:
  *(_QWORD *)a2 = v7;
  if (v7)
  {
    if (v7 < 2)
      return 0;
  }
  else
  {
    if (*((_QWORD *)a3 + 4))
      return 0;
    *(_QWORD *)a2 = 2;
  }
  vint32 = store_stream_read_vint32((uint64_t)a3);
  if (!vint32)
    goto LABEL_66;
  v11 = vint32;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = a1;
  v17 = a1 + 3;
  v73 = a2;
  v74 = (int *)(a2 + 1);
  v75 = vint32;
  do
  {
    v18 = *((_QWORD *)a3 + 5);
    if ((unint64_t)(*((_QWORD *)a3 + 4) - v18) < 0xB)
    {
      v33 = 0;
      v20 = 0;
      LOBYTE(__dst) = 0;
      v71 = v14;
      while (1)
      {
        v34 = *((_QWORD *)a3 + 5);
        if ((unint64_t)(v34 + 1) > *((_QWORD *)a3 + 4))
        {
          __nbyte = *((_QWORD *)a3 + 4);
          v35 = 0;
          p_dst = &__dst;
          v38 = *((_QWORD *)a3 + 5);
          v37 = 1;
          while (1)
          {
            v67 = v20;
            v68 = p_dst;
            v39 = v12;
            v40 = (char *)*((_QWORD *)a3 + 6);
            v69 = __nbyte - v38;
            if (__nbyte != v38)
            {
              memcpy(p_dst, &v40[v38], v69);
              *((_QWORD *)a3 + 5) = __nbyte;
            }
            __nbyte = prot_pread(*a3, v40, __nbyte, *((_QWORD *)a3 + 3));
            if (__nbyte == -1)
            {
              v37 = 0;
              a3[4] = *__error();
              goto LABEL_57;
            }
            v41 = *((_QWORD *)a3 + 3) + __nbyte;
            *((_QWORD *)a3 + 4) = __nbyte;
            *((_QWORD *)a3 + 5) = 0;
            *((_QWORD *)a3 + 3) = v41;
            if (!__nbyte)
              break;
            v34 = 0;
            v38 = 0;
            p_dst = (__int128 *)((char *)v68 + v69);
            v37 -= v69;
            v35 += v69;
            v12 = v39;
            v20 = v67;
            if (v37 <= __nbyte)
              goto LABEL_44;
          }
          v37 = v69;
LABEL_57:
          v12 = v39;
          v20 = v67;
        }
        else
        {
          v35 = 0;
          p_dst = &__dst;
          v37 = 1;
LABEL_44:
          memcpy(p_dst, (const void *)(*((_QWORD *)a3 + 6) + v34), v37);
          *((_QWORD *)a3 + 5) = v34 + v37;
        }
        v16 = a1;
        v11 = v75;
        v14 = v71;
        if (v37 + v35 != 1)
          break;
        v20 |= (unint64_t)(__dst & 0x7F) << v33;
        v33 += 7;
        if ((__dst & 0x80) == 0)
          goto LABEL_20;
      }
      v20 = 0;
    }
    else
    {
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = *(_BYTE *)(*((_QWORD *)a3 + 6) + v18++);
        v20 |= (unint64_t)(v21 & 0x7F) << v19;
        if ((v21 & 0x80) == 0)
          break;
        v9 = v19 == 63;
        v19 += 7;
      }
      while (!v9);
      *((_QWORD *)a3 + 5) = v18;
    }
LABEL_20:
    if (v12)
      v22 = v12 - (v20 >> 2);
    else
      v22 = v20 >> 2;
    if ((v20 & 2) == 0)
      v12 = v22;
    if ((v20 & 1) != 0)
    {
      v25 = 1;
      if (!v13)
      {
LABEL_39:
        v15 = v74;
        if ((v20 & 2) == 0)
          goto LABEL_35;
        goto LABEL_40;
      }
    }
    else
    {
      v23 = v14;
      v24 = store_stream_read_vint32((uint64_t)a3);
      v14 = v23;
      v11 = v75;
      v16 = a1;
      v25 = v24;
      if (!v13)
        goto LABEL_39;
    }
    if ((v20 & 2) != 0)
      v26 = 2;
    else
      v26 = 1;
    v27 = atomic_load(v16 + 3);
    v28 = v27 + v26;
    v29 = v16[2];
    if (v28 >= v29)
    {
      v42 = 2 * v29;
      if (!(_DWORD)v29)
        v42 = 0x4000;
      v16[2] = v42;
      v72 = v14;
      v43 = my_vm_reallocate((void **)v16, 12 * v29, 12 * v42, 243, *((_QWORD *)v16 + 2));
      LODWORD(v14) = v72;
      v11 = v75;
      v16 = a1;
      if (v43)
      {
        v63 = __si_assert_copy_extra_268();
        v64 = v63;
        v65 = "";
        if (v63)
          v65 = v63;
        __message_assert("%s:%u: failed assertion '%s' %s ", "DocPosting.h", 250, "0 == kr", v65);
        free(v64);
        if (__valid_fs(-1))
          v66 = 2989;
        else
          v66 = 3072;
        *(_DWORD *)v66 = -559038737;
        abort();
      }
    }
    do
      v30 = __ldaxr(v17);
    while (__stlxr(v30 + v26, v17));
    if ((_DWORD)v14)
      v15 = (int *)(*(_QWORD *)v16 + 12 * v14);
    if (!(_DWORD)v30)
    {
      *v15 &= 1u;
      v59 = __si_assert_copy_extra_268();
      v60 = v59;
      v61 = "";
      if (v59)
        v61 = v59;
      __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree_UpdateSet.c", 428, "lastPosting", v61);
      free(v60);
      if (__valid_fs(-1))
        v62 = 2989;
      else
        v62 = 3072;
      *(_DWORD *)v62 = -559038737;
      abort();
    }
    v31 = *(char **)v16;
    *v15 = *v15 & 1 | (2 * v30);
    v15 = (int *)&v31[12 * v30];
    v14 = v30;
    if ((v20 & 2) == 0)
    {
LABEL_35:
      v32 = 0;
      v15[2] = v22;
      goto LABEL_36;
    }
LABEL_40:
    *((_QWORD *)v15 + 1) = v20 >> 2;
    v32 = 1;
LABEL_36:
    *v15 = v32;
    v15[1] = v25;
    ++v13;
  }
  while (v13 != v11);
  v44 = store_stream_read_vint32((uint64_t)a3);
  a2 = v73;
  if (v44)
    return 0;
LABEL_66:
  v46 = *((_QWORD *)a3 + 5);
  if ((unint64_t)(*((_QWORD *)a3 + 4) - v46) < 0xB)
  {
    v58 = 0;
    v48 = 0;
    LOBYTE(__dst) = 0;
    while (store_stream_read_bytes(a3, (char *)&__dst) == 1)
    {
      v48 |= (unint64_t)(__dst & 0x7F) << v58;
      v58 += 7;
      if ((__dst & 0x80) == 0)
        goto LABEL_72;
    }
    v48 = 0;
  }
  else
  {
    v47 = 0;
    v48 = 0;
    do
    {
      v49 = *(_BYTE *)(*((_QWORD *)a3 + 6) + v46++);
      v48 |= (unint64_t)(v49 & 0x7F) << v47;
      if ((v49 & 0x80) == 0)
        break;
      v9 = v47 == 63;
      v47 += 7;
    }
    while (!v9);
    *((_QWORD *)a3 + 5) = v46;
  }
LABEL_72:
  if (!v48)
    return 1;
  v50 = 4;
  do
  {
    v51 = v50;
    v52 = 4 * v50 - 4;
    v50 *= 2;
  }
  while (5 * v48 >= v52);
  v53 = 1;
  v54 = malloc_type_calloc(1uLL, 32 * v51, 0x1020040D49128EBuLL);
  *((_QWORD *)a2 + 1) = v54;
  v54[1] = v51;
  while (1)
  {
    __dst = 0u;
    v78 = 0u;
    if (!restoreDirStoreUpdateSet(a1, &__dst, a3))
      break;
    doInsertDirectory_304(*((_QWORD **)a2 + 1), (uint64_t)&__dst);
    if (v48 <= v53++)
      return 1;
  }
  v56 = a2[1];
  __dst = *a2;
  v78 = v56;
  freeDirectory((uint64_t)&__dst);
  result = 0;
  *((_QWORD *)a2 + 1) = 0;
  return result;
}

uint64_t store_stream_read_bytes(unsigned int *a1, char *__dst)
{
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  size_t v8;
  uint64_t v10;
  unint64_t v11;

  v4 = *((_QWORD *)a1 + 4);
  v5 = *((_QWORD *)a1 + 5);
  if (v5 + 1 > v4)
  {
    v6 = 0;
    v7 = 1;
    v10 = *((_QWORD *)a1 + 5);
    while (1)
    {
      v8 = v4 - v10;
      if (v4 != v10)
      {
        memcpy(__dst, (const void *)(*((_QWORD *)a1 + 6) + v10), v4 - v10);
        v4 = *((_QWORD *)a1 + 4);
        *((_QWORD *)a1 + 5) += v8;
      }
      v11 = prot_pread(*a1, *((void **)a1 + 6), v4, *((_QWORD *)a1 + 3));
      if (v11 == -1)
        break;
      v4 = v11;
      *((_QWORD *)a1 + 4) = v11;
      *((_QWORD *)a1 + 5) = 0;
      *((_QWORD *)a1 + 3) += v11;
      if (!v11)
        return v8 + v6;
      v5 = 0;
      v10 = 0;
      __dst += v8;
      v7 -= v8;
      v6 += v8;
      if (v7 <= v11)
        goto LABEL_3;
    }
    v8 = 0;
    a1[4] = *__error();
  }
  else
  {
    v6 = 0;
    v7 = 1;
LABEL_3:
    memcpy(__dst, (const void *)(*((_QWORD *)a1 + 6) + v5), v7);
    *((_QWORD *)a1 + 5) += v7;
    v8 = v7;
  }
  return v8 + v6;
}

uint64_t store_stream_read_vint32(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  int v16;
  int v17;
  char __dst;

  v2 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)(*(_QWORD *)(a1 + 32) - v2) < 6)
  {
    v17 = 0;
    LODWORD(v5) = 0;
    __dst = 0;
    while (store_stream_read_bytes((unsigned int *)a1, &__dst) == 1)
    {
      v5 = ((__dst & 0x7F) << v17) | v5;
      v17 += 7;
      if ((__dst & 0x80) == 0)
        return v5;
    }
    return 0;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = v2 + 1;
    v5 = *(unsigned __int8 *)(v3 + v2);
    if ((*(char *)(v3 + v2) & 0x80000000) == 0)
    {
      v6 = v2 + 1;
LABEL_11:
      *(_QWORD *)(a1 + 40) = v6;
      return v5;
    }
    v6 = v2 + 2;
    v7 = *(char *)(v3 + v4);
    v8 = *(unsigned __int8 *)(v3 + v4);
    if ((v7 & 0x80000000) == 0)
    {
      v5 = v5 & 0x7F | (v8 << 7);
      goto LABEL_11;
    }
    v9 = v2 + 3;
    v10 = *(char *)(v3 + v6);
    v11 = v10;
    if ((v10 & 0x80000000) == 0)
    {
      v12 = ((v8 & 0x7F) << 7) | (v10 << 14) | (v5 & 0x7F);
      v6 = v9;
LABEL_10:
      v5 = v12;
      goto LABEL_11;
    }
    v6 = v2 + 4;
    v13 = *(char *)(v3 + v9);
    v14 = *(unsigned __int8 *)(v3 + v9);
    if ((v13 & 0x80000000) == 0)
    {
      v12 = ((v11 & 0x7F) << 14) | (v14 << 21) | ((v8 & 0x7F) << 7) | (v5 & 0x7F);
      goto LABEL_10;
    }
    v16 = *(char *)(v3 + v6);
    *(_QWORD *)(a1 + 40) = v2 + 5;
    if (v16 < 0)
    {
      return ((v14 & 0x7F) << 21) | (v16 << 28) | ((v11 & 0x7F) << 14) | ((v8 & 0x7F) << 7) | (v5 & 0x7F);
    }
    else
    {
      v5 = 0;
      *(_DWORD *)(a1 + 16) = 22;
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v17;
  char __dst;

  v2 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)(*(_QWORD *)(a1 + 32) - v2) < 6)
  {
    v17 = 0;
    LODWORD(v5) = 0;
    __dst = 0;
    while (store_stream_read_bytes((unsigned int *)a1, &__dst) == 1)
    {
      v5 = ((__dst & 0x7F) << v17) | v5;
      v17 += 7;
      if ((__dst & 0x80) == 0)
        return v5;
    }
    return 0;
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 48);
    v4 = v2 + 1;
    v5 = *(unsigned __int8 *)(v3 + v2);
    if (*(char *)(v3 + v2) < 0)
    {
      v6 = v2 + 2;
      v7 = *(char *)(v3 + v4);
      v8 = *(unsigned __int8 *)(v3 + v4);
      if (v7 < 0)
      {
        v9 = v2 + 3;
        v10 = *(char *)(v3 + v6);
        v11 = v10;
        if (v10 < 0)
        {
          v12 = v2 + 4;
          v13 = *(char *)(v3 + v9);
          v14 = *(unsigned __int8 *)(v3 + v9);
          if (v13 < 0)
          {
            v15 = *(char *)(v3 + v12);
            *(_QWORD *)(a1 + 40) = v2 + 5;
            if (v15 < 0)
            {
              return ((v14 & 0x7F) << 21) | (v15 << 28) | ((v11 & 0x7F) << 14) | ((v8 & 0x7F) << 7) | (v5 & 0x7F);
            }
            else
            {
              v5 = 0;
              *(_DWORD *)(a1 + 16) = 22;
            }
          }
          else
          {
            v5 = ((v11 & 0x7F) << 14) | (v14 << 21) | ((v8 & 0x7F) << 7) | (v5 & 0x7F);
            *(_QWORD *)(a1 + 40) = v12;
          }
        }
        else
        {
          v5 = ((v8 & 0x7F) << 7) | (v10 << 14) | (v5 & 0x7F);
          *(_QWORD *)(a1 + 40) = v9;
        }
      }
      else
      {
        v5 = v5 & 0x7F | (v8 << 7);
        *(_QWORD *)(a1 + 40) = v6;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 40) = v4;
    }
  }
  return v5;
}

uint64_t countInUpdates(uint64_t a1, unint64_t a2)
{
  uint64_t Slot;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  char *v14;
  const char *v15;

  if (*(_QWORD *)(a1 + 24) > *(_QWORD *)(a1 + 8))
  {
    v10 = __si_assert_copy_extra_268();
    v11 = v10;
    v12 = "";
    if (v10)
      v12 = v10;
    __message_assert(v10, "ChangeHolder.cpp", 104, "changes->hole <= changes->count", v12);
    goto LABEL_14;
  }
  Slot = findSlotT<PayloadIterator__Changes,DocID_Count_Pair>((unint64_t **)a1, a2);
  v5 = 0;
  if ((Slot & 0x8000000000000000) == 0)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (Slot < v6)
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 24);
      if (Slot >= v8 && Slot < v6 - v7 + v8)
        return 0;
      if (*(_QWORD *)(*(_QWORD *)a1 + 16 * Slot) == a2)
        return *(unsigned int *)(*(_QWORD *)a1 + 16 * Slot + 8);
      if (v8 <= v7)
        return 0;
      v14 = __si_assert_copy_extra_268();
      v11 = v14;
      v15 = "";
      if (v14)
        v15 = v14;
      __message_assert(v14, "ChangeHolder.cpp", 119, "changes->hole <= changes->count", v15);
LABEL_14:
      free(v11);
      if (__valid_fs(-1))
        v13 = 2989;
      else
        v13 = 3072;
      *(_DWORD *)v13 = -559038737;
      abort();
    }
  }
  return v5;
}

void __message_assert(const char *a1, ...)
{
  void *v1[2];
  uint8_t buf[4];
  void *v3;
  uint64_t v4;
  va_list va;

  va_start(va, a1);
  v4 = *MEMORY[0x1E0C80C00];
  v1[0] = 0;
  va_copy((va_list)&v1[1], va);
  vasprintf((char **)v1, "%s:%u: failed assertion '%s' %s ", va);
  SISetCrashCStr((const char *)v1[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v3 = v1[0];
    _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }
  free(v1[0]);
}

uint64_t findSlotT<PayloadIterator__Changes,DocID_Count_Pair>(unint64_t **a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  const char *v23;
  uint64_t v24;

  v2 = (uint64_t)a1[1];
  if (!v2)
    return -1;
  v4 = (uint64_t)a1[3];
  v5 = *a1;
  if (v4 == v2)
  {
    v6 = v5[2 * v2 - 2];
    result = (uint64_t)a1[1];
  }
  else
  {
    result = (uint64_t)a1[2] - 1;
    v6 = v5[2 * result];
  }
  if (v6 <= a2)
  {
    if (v2 > 31)
    {
      v15 = __OFSUB__(v4, v2);
      v16 = v4 - v2;
      if (!((v16 < 0) ^ v15 | (v16 == 0)))
      {
        v21 = __si_assert_copy_extra_268();
        v22 = v21;
        v23 = "";
        if (v21)
          v23 = v21;
        __message_assert(v21, "ChangeHolder.cpp", 53, "changes->hole <= changes->count", v23);
        free(v22);
        if (__valid_fs(-1))
          v24 = 2989;
        else
          v24 = 3072;
        *(_DWORD *)v24 = -559038737;
        abort();
      }
      if (v4 && (v17 = v4 - 1, v5[2 * v17] <= a2))
      {
        result = 0;
      }
      else
      {
        v18 = a1[2];
        result = (uint64_t)v18 + v16;
        v17 = (uint64_t)v18 - 1;
      }
      while (result <= v17)
      {
        v19 = result + ((v17 - result) >> 1);
        v20 = v5[2 * v19];
        if (v20 == a2)
        {
          result += (v17 - result) >> 1;
          return result;
        }
        if (v20 <= a2)
          v17 = v19 - 1;
        else
          result = v19 + 1;
      }
    }
    else
    {
      v8 = a1[2];
      if (v4 < 1)
      {
LABEL_12:
        v11 = (uint64_t)v8 + v4 - v2;
        if (v11 >= (uint64_t)v8)
        {
          return (uint64_t)v8 - 1;
        }
        else
        {
          v12 = v2 - v4;
          v13 = &v5[2 * v11];
          while (1)
          {
            v14 = *v13;
            v13 += 2;
            if (v14 <= a2)
              break;
            if (!--v12)
              return (uint64_t)v8 - 1;
          }
          return (uint64_t)v8 - v12;
        }
      }
      else
      {
        result = 0;
        v9 = v5;
        while (1)
        {
          v10 = *v9;
          v9 += 2;
          if (v10 <= a2)
            break;
          if (v4 == ++result)
            goto LABEL_12;
        }
      }
    }
  }
  return result;
}

uint64_t weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(uint64_t result, uint64_t a2)
{
  char *v2;
  char *v3;
  const char *v4;
  uint64_t v5;

  if (a2 > result)
  {
    v2 = __si_assert_copy_extra_268();
    v3 = v2;
    v4 = "";
    if (v2)
      v4 = v2;
    __message_assert(v2, "ChangeHolder.cpp", 129, "changes->hole<=changes->count", v4);
    free(v3);
    if (__valid_fs(-1))
      v5 = 2989;
    else
      v5 = 3072;
    *(_DWORD *)v5 = -559038737;
    abort();
  }
  return result;
}

uint64_t changeHolderMoveHoleToIndex<PayloadIterator__Changes,DocID_Count_Pair>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  const char *v16;
  char *v18;
  const char *v19;
  char *v20;
  const char *v21;
  uint64_t v22;

  v5 = a1 + 1;
  v4 = a1[1];
  v6 = a1[3];
  v7 = v6 - v4 + v5[1];
  weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v4, v6);
  v8 = a2 - v7;
  if (a2 >= v7)
  {
    if (a2 != v7)
      memmove((void *)(*a1 + 16 * a1[3]), (const void *)(*a1 + 16 * v7), 16 * v8);
    a2 = a1[3] + v8;
    a1[3] = a2;
    v13 = a1[1];
    if (a2 <= v13)
      return weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v13, a2);
    v20 = __si_assert_copy_extra_268();
    v15 = v20;
    v21 = "";
    if (v20)
      v21 = v20;
    __message_assert(v20, "ChangeHolder.cpp", 179, "changes->hole <= changes->count", v21);
LABEL_19:
    free(v15);
    if (__valid_fs(-1))
      v22 = 2989;
    else
      v22 = 3072;
    *(_DWORD *)v22 = -559038737;
    abort();
  }
  v9 = a1[3];
  v10 = v9 == a2;
  v11 = v9 < a2;
  v12 = v9 - a2;
  if (v11)
  {
    v18 = __si_assert_copy_extra_268();
    v15 = v18;
    v19 = "";
    if (v18)
      v19 = v18;
    __message_assert(v18, "ChangeHolder.cpp", 183, "i <= changes->hole", v19);
    goto LABEL_19;
  }
  if (!v10)
  {
    memmove((void *)(*a1 + 16 * (v7 - v12)), (const void *)(*a1 + 16 * a2), 16 * v12);
    a1[3] = a2;
  }
  v13 = a1[1];
  if (v13 < a2)
  {
    v14 = __si_assert_copy_extra_268();
    v15 = v14;
    v16 = "";
    if (v14)
      v16 = v14;
    __message_assert(v14, "ChangeHolder.cpp", 189, "changes->hole <= changes->count", v16);
    goto LABEL_19;
  }
  return weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v13, a2);
}

void *query_realloc(void *ptr, size_t size)
{
  void *v2;
  void *v3;

  if (ptr)
    v2 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, ptr, size, 0xECA6AA46uLL);
  else
    v2 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, size, 0x8DDAA030uLL);
  v3 = v2;
  if (!v2)
    _log_fault_for_malloc_failure();
  return v3;
}

uint64_t changesSetMinCount(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t Slot;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t v16;
  unint64_t *v17;
  _DWORD *v18;
  int v19;
  char *v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  Slot = findSlotT<PayloadIterator__Changes,DocID_Count_Pair>((unint64_t **)a1, a2);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  result = weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v7, v9);
  if (Slot < 0)
  {
    v11 = *(_QWORD *)(a1 + 16);
    v14 = *(unint64_t **)a1;
    goto LABEL_19;
  }
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = Slot >= v8 - v7 + v9 || Slot < v12;
  v14 = *(unint64_t **)a1;
  if (!v13 || Slot >= v11)
    goto LABEL_19;
  v16 = v14[2 * Slot];
  if (v16 == a2)
  {
    v17 = &v14[2 * Slot];
    v19 = *((_DWORD *)v17 + 2);
    v18 = v17 + 1;
    if (v19 > a3)
    {
      *v18 = a3;
      v12 = *(_QWORD *)(a1 + 24);
    }
    if (v12 > *(_QWORD *)(a1 + 8))
    {
      v20 = __si_assert_copy_extra_268();
      v21 = v20;
      v22 = "";
      if (v20)
        v22 = v20;
      __message_assert(v20, "ChangeHolder.cpp", 300, "changes->hole <= changes->count", v22);
      free(v21);
      if (__valid_fs(-1))
        v23 = 2989;
      else
        v23 = 3072;
      *(_DWORD *)v23 = -559038737;
      abort();
    }
    return result;
  }
  if (v16 >= a2)
  {
LABEL_19:
    v24 = *(_QWORD *)(a1 + 8);
    if (v24 < v11 && v14)
    {
      v25 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v26 = 2 * v11;
      if (!v11)
        v26 = 16;
      *(_QWORD *)(a1 + 8) = v11;
      *(_QWORD *)(a1 + 16) = v26;
      if (v14)
        v27 = (unint64_t *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v14, 16 * v26, 0xECA6AA46uLL);
      else
        v27 = (unint64_t *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 16 * v26, 0x8DDAA030uLL);
      v14 = v27;
      if (v27)
      {
        *(_QWORD *)a1 = v27;
      }
      else
      {
        _log_fault_for_malloc_failure();
        v14 = *(unint64_t **)a1;
      }
      v25 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 24) = v25;
      v24 = v25;
    }
    memmove(&v14[2 * v25], &v14[2 * (v11 - (v24 - v25))], 16 * (v24 - v25));
    v35 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 24) = v35;
    result = weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v35, v35);
    *(_DWORD *)(*(_QWORD *)a1 + 16 * *(_QWORD *)(a1 + 8) + 8) = a3;
    v36 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(*(_QWORD *)a1 + 16 * v36) = a2;
    *(_QWORD *)(a1 + 8) = v36 + 1;
    ++*(_QWORD *)(a1 + 24);
    return result;
  }
  if (*(_QWORD *)(a1 + 8) >= v11)
  {
    *(_QWORD *)(a1 + 16) = 2 * v11;
    v37 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v14, 32 * v11, 0xECA6AA46uLL);
    if (!v37)
      _log_fault_for_malloc_failure();
    *(_QWORD *)a1 = v37;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 8);
  }
  result = changeHolderMoveHoleToIndex<PayloadIterator__Changes,DocID_Count_Pair>((_QWORD *)a1, Slot);
  v28 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(*(_QWORD *)a1 + 16 * v28 + 8) = a3;
  v29 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(*(_QWORD *)a1 + 16 * v28) = a2;
  v30 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v30 + 1;
  *(_QWORD *)(a1 + 8) = v29 + 1;
  if (v30 > v29)
  {
    v31 = __si_assert_copy_extra_268();
    v32 = v31;
    v33 = "";
    if (v31)
      v33 = v31;
    __message_assert(v31, "ChangeHolder.cpp", 318, "changes->hole <= changes->count", v33);
    free(v32);
    if (__valid_fs(-1))
      v34 = 2989;
    else
      v34 = 3072;
    *(_DWORD *)v34 = -559038737;
    abort();
  }
  return result;
}

uint64_t distanceHolderSetMinDistance(uint64_t a1, unint64_t a2, float a3)
{
  uint64_t Slot;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t v16;
  unint64_t *v17;
  float *v18;
  float v19;
  char *v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  const char *v48;
  char *v49;
  const char *v50;

  Slot = findSlotT<PayloadIterator__Changes,DocID_Count_Pair>((unint64_t **)a1, a2);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  result = weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v7, v9);
  if (Slot < 0)
  {
    v12 = *(_QWORD *)(a1 + 16);
    v14 = *(unint64_t **)a1;
    goto LABEL_20;
  }
  v12 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v13 = Slot >= v8 - v7 + v9 || Slot < v11;
  v14 = *(unint64_t **)a1;
  if (!v13 || Slot >= v12)
    goto LABEL_20;
  v16 = v14[2 * Slot];
  if (v16 != a2)
  {
    if (v16 < a2)
    {
      v28 = *(_QWORD *)(a1 + 8);
      if (v28 >= v12)
      {
        *(_QWORD *)(a1 + 16) = 2 * v12;
        v46 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v14, 32 * v12, 0xECA6AA46uLL);
        if (!v46)
          _log_fault_for_malloc_failure();
        *(_QWORD *)a1 = v46;
        v11 = *(_QWORD *)(a1 + 8);
        v12 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 24) = v11;
        v28 = v11;
      }
      v29 = v11 - v28 + v12;
      weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v28, v11);
      v30 = Slot - v29;
      if (Slot >= v29)
      {
        if (Slot != v29)
          memmove((void *)(*(_QWORD *)a1 + 16 * *(_QWORD *)(a1 + 24)), (const void *)(*(_QWORD *)a1 + 16 * v29), 16 * v30);
        Slot = *(_QWORD *)(a1 + 24) + v30;
        *(_QWORD *)(a1 + 24) = Slot;
        v34 = *(_QWORD *)(a1 + 8);
        if (Slot <= v34)
          goto LABEL_47;
        v49 = __si_assert_copy_extra_268();
        v21 = v49;
        v50 = "";
        if (v49)
          v50 = v49;
        __message_assert(v49, "ChangeHolder.cpp", 179, "changes->hole <= changes->count", v50);
      }
      else
      {
        v31 = *(_QWORD *)(a1 + 24);
        v32 = v31 == Slot;
        v13 = v31 < Slot;
        v33 = v31 - Slot;
        if (!v13)
        {
          if (!v32)
          {
            memmove((void *)(*(_QWORD *)a1 + 16 * (v29 - v33)), (const void *)(*(_QWORD *)a1 + 16 * Slot), 16 * v33);
            *(_QWORD *)(a1 + 24) = Slot;
          }
          v34 = *(_QWORD *)(a1 + 8);
          if (v34 < Slot)
          {
            v35 = __si_assert_copy_extra_268();
            v21 = v35;
            v36 = "";
            if (v35)
              v36 = v35;
            __message_assert(v35, "ChangeHolder.cpp", 189, "changes->hole <= changes->count", v36);
            goto LABEL_17;
          }
LABEL_47:
          result = weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v34, Slot);
          v39 = *(_QWORD *)(a1 + 24);
          *(float *)(*(_QWORD *)a1 + 16 * v39 + 8) = a3;
          v40 = *(_QWORD *)(a1 + 8);
          *(_QWORD *)(*(_QWORD *)a1 + 16 * v39) = a2;
          v41 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v41 + 1;
          *(_QWORD *)(a1 + 8) = v40 + 1;
          if (v41 > v40)
          {
            v42 = __si_assert_copy_extra_268();
            v43 = v42;
            v44 = "";
            if (v42)
              v44 = v42;
            __message_assert(v42, "ChangeHolder.cpp", 318, "changes->hole <= changes->count", v44);
            free(v43);
            if (__valid_fs(-1))
              v45 = 2989;
            else
              v45 = 3072;
            *(_DWORD *)v45 = -559038737;
            abort();
          }
          return result;
        }
        v47 = __si_assert_copy_extra_268();
        v21 = v47;
        v48 = "";
        if (v47)
          v48 = v47;
        __message_assert(v47, "ChangeHolder.cpp", 183, "i <= changes->hole", v48);
      }
LABEL_17:
      free(v21);
      if (__valid_fs(-1))
        v23 = 2989;
      else
        v23 = 3072;
      *(_DWORD *)v23 = -559038737;
      abort();
    }
LABEL_20:
    v24 = *(_QWORD *)(a1 + 8);
    if (v24 < v12 && v14)
    {
      v25 = *(_QWORD *)(a1 + 24);
    }
    else
    {
      v26 = 2 * v12;
      if (!v12)
        v26 = 16;
      *(_QWORD *)(a1 + 8) = v12;
      *(_QWORD *)(a1 + 16) = v26;
      if (v14)
        v27 = (unint64_t *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v14, 16 * v26, 0xECA6AA46uLL);
      else
        v27 = (unint64_t *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 16 * v26, 0x8DDAA030uLL);
      v14 = v27;
      if (v27)
      {
        *(_QWORD *)a1 = v27;
      }
      else
      {
        _log_fault_for_malloc_failure();
        v14 = *(unint64_t **)a1;
      }
      v25 = *(_QWORD *)(a1 + 8);
      v12 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 24) = v25;
      v24 = v25;
    }
    memmove(&v14[2 * v25], &v14[2 * (v12 - (v24 - v25))], 16 * (v24 - v25));
    v37 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 24) = v37;
    result = weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v37, v37);
    *(float *)(*(_QWORD *)a1 + 16 * *(_QWORD *)(a1 + 8) + 8) = a3;
    v38 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(*(_QWORD *)a1 + 16 * v38) = a2;
    *(_QWORD *)(a1 + 8) = v38 + 1;
    ++*(_QWORD *)(a1 + 24);
    return result;
  }
  v17 = &v14[2 * Slot];
  v19 = *((float *)v17 + 2);
  v18 = (float *)(v17 + 1);
  if (v19 > a3)
  {
    *v18 = a3;
    v11 = *(_QWORD *)(a1 + 24);
  }
  if (v11 > *(_QWORD *)(a1 + 8))
  {
    v20 = __si_assert_copy_extra_268();
    v21 = v20;
    v22 = "";
    if (v20)
      v22 = v20;
    __message_assert(v20, "ChangeHolder.cpp", 300, "changes->hole <= changes->count", v22);
    goto LABEL_17;
  }
  return result;
}

float distanceHolderGetMinDistance(uint64_t a1, unint64_t a2, _BYTE *a3)
{
  uint64_t Slot;
  float result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  char *v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  char *v16;
  const char *v17;

  *a3 = 0;
  if (*(_QWORD *)(a1 + 24) > *(_QWORD *)(a1 + 8))
  {
    v12 = __si_assert_copy_extra_268();
    v13 = v12;
    v14 = "";
    if (v12)
      v14 = v12;
    __message_assert(v12, "ChangeHolder.cpp", 104, "changes->hole <= changes->count", v14);
LABEL_13:
    free(v13);
    if (__valid_fs(-1))
      v15 = 2989;
    else
      v15 = 3072;
    *(_DWORD *)v15 = -559038737;
    abort();
  }
  Slot = findSlotT<PayloadIterator__Changes,DocID_Count_Pair>((unint64_t **)a1, a2);
  result = 0.0;
  if ((Slot & 0x8000000000000000) == 0)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (Slot < v8)
    {
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_QWORD *)(a1 + 24);
      if (Slot < v10 || Slot >= v8 - v9 + v10)
      {
        v11 = *(unint64_t **)a1;
        if (*(_QWORD *)(*(_QWORD *)a1 + 16 * Slot) == a2)
        {
          *a3 = 1;
          return *(float *)&v11[2 * Slot + 1];
        }
        if (v10 > v9)
        {
          v16 = __si_assert_copy_extra_268();
          v13 = v16;
          v17 = "";
          if (v16)
            v17 = v16;
          __message_assert(v16, "ChangeHolder.cpp", 119, "changes->hole <= changes->count", v17);
          goto LABEL_13;
        }
      }
    }
  }
  return result;
}

uint64_t checkAgainstChangeHolder(uint64_t a1, unint64_t a2)
{
  uint64_t Slot;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  char *v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  char *v17;
  const char *v18;
  char *v19;
  const char *v20;

  if (*(_QWORD *)(a1 + 24) > *(_QWORD *)(a1 + 8))
  {
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    v15 = "";
    if (v13)
      v15 = v13;
    __message_assert(v13, "ChangeHolder.cpp", 362, "changes->hole <= changes->count", v15);
    goto LABEL_17;
  }
  Slot = findSlotT<PayloadIterator__Changes,DocID_Count_Pair>((unint64_t **)a1, a2);
  v5 = 0;
  if (Slot < 0)
    return v5;
  v6 = *(_QWORD *)(a1 + 16);
  if (Slot >= v6)
    return v5;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 24);
  if (Slot >= v8 && Slot < v6 - v7 + v8)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)a1 + 16 * Slot) != a2)
  {
    if (v8 <= v7)
      return 0;
    v17 = __si_assert_copy_extra_268();
    v14 = v17;
    v18 = "";
    if (v17)
      v18 = v17;
    __message_assert(v17, "ChangeHolder.cpp", 386, "changes->hole <= changes->count", v18);
LABEL_17:
    free(v14);
    if (__valid_fs(-1))
      v16 = 2989;
    else
      v16 = 3072;
    *(_DWORD *)v16 = -559038737;
    abort();
  }
  v9 = *(_QWORD *)a1 + 16 * Slot;
  v10 = *(_DWORD *)(v9 + 8);
  v5 = v10 >> 31;
  *(_DWORD *)(v9 + 8) = (v10 + 1) & (v10 >> 31);
  if (*(_DWORD *)(*(_QWORD *)a1 + 16 * Slot + 8))
  {
    v11 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    changeHolderMoveHoleToIndex<PayloadIterator__Changes,DocID_Count_Pair>((_QWORD *)a1, Slot);
    v11 = *(_QWORD *)(a1 + 8) - 1;
    *(_QWORD *)(a1 + 8) = v11;
  }
  if (*(_QWORD *)(a1 + 24) > v11)
  {
    v19 = __si_assert_copy_extra_268();
    v14 = v19;
    v20 = "";
    if (v19)
      v20 = v19;
    __message_assert(v19, "ChangeHolder.cpp", 383, "changes->hole <= changes->count", v20);
    goto LABEL_17;
  }
  return v5;
}

void ReleaseEmbeddingDistances(void **a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)(a1 + 4);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    free(*a1);
    free(a1);
  }
}

unint64_t utf8_prev_char_start(unint64_t a1, unint64_t a2)
{
  int v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t i;

  do
  {
    if (a2 <= a1)
      break;
    do
    {
      v3 = *(unsigned __int8 *)--a2;
      v2 = v3;
      v4 = (unint64_t)v3 >> 4;
      v5 = v4 & 0xC;
    }
    while (v5 == 8);
    if ((v2 & 0x80) != 0)
    {
      v6 = utf8_byte_length(unsigned char)::utf8_len_table[v4];
      v7 = (utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v6] & v2);
      if (v5 == 12)
      {
        if (v6 <= 2)
          v8 = 2;
        else
          v8 = v6;
        for (i = 1; i != v8; ++i)
        {
          v2 = *(_BYTE *)(a2 + i) & 0x3F | (v7 << 6);
          v7 = v2;
        }
      }
      else
      {
        v2 = (utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v6] & v2);
      }
    }
  }
  while ((v2 - 880) > 0xFFFFFF8F);
  return a2;
}

unint64_t utf8_to_code_point(unsigned __int8 *a1)
{
  int v2;
  unint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;

  v2 = (char)*a1;
  result = *a1;
  if (v2 < 0)
  {
    v4 = utf8_byte_length(unsigned char)::utf8_len_table[result >> 4];
    v5 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v4] & result;
    if ((~(result >> 4) & 0xC) != 0)
    {
      return utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v4] & result;
    }
    else
    {
      if (v4 <= 2)
        v6 = 2;
      else
        v6 = utf8_byte_length(unsigned char)::utf8_len_table[result >> 4];
      v7 = v6 - 1;
      v8 = (char *)(a1 + 1);
      do
      {
        v9 = *v8++;
        result = v9 & 0x3F | (v5 << 6);
        v5 = v9 & 0x3F | (v5 << 6);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

ssize_t file_scanner_read(ssize_t result)
{
  char *v1;
  ssize_t v2;
  FILE *v3;
  int *v4;
  int v5;

  v1 = (char *)(result + 16);
  *(_QWORD *)(result + 4120) = result + 16;
  *(_QWORD *)(result + 4112) = result + 16;
  if (!*(_DWORD *)(result + 4128))
  {
    v2 = result;
    result = pread(*(_DWORD *)result, v1, 0x1000uLL, *(_QWORD *)(result + 8));
    if (result == -1)
    {
      v3 = (FILE *)*MEMORY[0x1E0C80C10];
      v4 = __error();
      v5 = *v4;
      *(_DWORD *)(v2 + 4128) = *v4;
      return fprintf(v3, "\npread error(%d) offset: 0x%llx \n", v5, *(_QWORD *)(v2 + 8));
    }
    else
    {
      *(_QWORD *)(v2 + 8) += result;
      *(_QWORD *)(v2 + 4112) = v1;
      *(_QWORD *)(v2 + 4120) = &v1[result];
      if (!result)
        *(_DWORD *)(v2 + 4128) = -1;
    }
  }
  return result;
}

uint64_t file_scanner_read_vint(ssize_t a1)
{
  char *v2;
  int v3;
  uint64_t result;
  char *v5;
  char v6;
  uint64_t v7;
  char *v8;
  int v9;
  int v10;
  char *v11;
  char v12;
  _OWORD v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(char **)(a1 + 4112);
  if ((uint64_t)(*(_QWORD *)(a1 + 4120) - (_QWORD)v2) < 11)
  {
    v7 = 0;
    memset(v13, 0, sizeof(v13));
    while (1)
    {
      if ((unint64_t)v2 >= *(_QWORD *)(a1 + 4120))
      {
        file_scanner_read(a1);
        v2 = *(char **)(a1 + 4112);
      }
      v8 = v2 + 1;
      *(_QWORD *)(a1 + 4112) = v2 + 1;
      v9 = *v2;
      *((_BYTE *)v13 + v7) = v9;
      if ((v9 & 0x80000000) == 0)
        break;
      ++v7;
      v2 = v8;
      if ((_DWORD)v7 == 11)
        return 0;
    }
    result = 0;
    if (v7 <= 9)
    {
      v10 = *(_DWORD *)(a1 + 4128);
      if (!v10)
      {
        result = 0;
        v11 = (char *)v13;
        do
        {
          v12 = *v11++;
          result |= (unint64_t)(v12 & 0x7F) << v10;
          v10 += 7;
        }
        while (v12 < 0);
      }
    }
  }
  else
  {
    v3 = 0;
    result = 0;
    v5 = v2 + 1;
    do
    {
      v6 = *(v5 - 1);
      *(_QWORD *)(a1 + 4112) = v5;
      result |= (unint64_t)(v6 & 0x7F) << v3;
      v3 += 7;
      ++v5;
    }
    while (v6 < 0);
  }
  return result;
}

uint64_t file_scanner_read_vint32(ssize_t a1)
{
  _QWORD *v1;
  char *v2;
  uint64_t result;
  uint64_t v5;
  char *v6;
  int v7;
  char *v8;
  _OWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)(a1 + 4112);
  v2 = *(char **)(a1 + 4112);
  if ((uint64_t)(*(_QWORD *)(a1 + 4120) - (_QWORD)v2) >= 11)
    return restoreVInt32((char **)(a1 + 4112));
  v5 = 0;
  memset(v9, 0, sizeof(v9));
  v8 = (char *)v9;
  while (1)
  {
    if ((unint64_t)v2 >= *(_QWORD *)(a1 + 4120))
    {
      file_scanner_read(a1);
      v2 = *(char **)(a1 + 4112);
    }
    v6 = v2 + 1;
    *v1 = v2 + 1;
    v7 = *v2;
    *((_BYTE *)v9 + v5) = v7;
    if ((v7 & 0x80000000) == 0)
      break;
    ++v5;
    v2 = v6;
    if ((_DWORD)v5 == 11)
      return 0;
  }
  result = 0;
  if (v5 <= 9 && !*(_DWORD *)(a1 + 4128))
  {
    v8 = (char *)v9;
    return restoreVInt32(&v8);
  }
  return result;
}

uint64_t restoreVInt32(char **a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *a1;
  v2 = **a1;
  if ((**a1 & 0x80000000) == 0)
  {
    v3 = 1;
    goto LABEL_10;
  }
  v4 = v1[1];
  if ((v1[1] & 0x80000000) == 0)
  {
    v2 = v2 & 0x7F | (v4 << 7);
    v3 = 2;
    goto LABEL_10;
  }
  v5 = v1[2];
  if ((v1[2] & 0x80000000) == 0)
  {
    v6 = ((v4 & 0x7F) << 7) | (v5 << 14) | (v2 & 0x7F);
    v3 = 3;
LABEL_9:
    v2 = v6;
    goto LABEL_10;
  }
  v7 = v1[3];
  if ((v1[3] & 0x80000000) == 0)
  {
    v6 = ((v5 & 0x7F) << 14) | (v7 << 21) | ((v4 & 0x7F) << 7) | (v2 & 0x7F);
    v3 = 4;
    goto LABEL_9;
  }
  v9 = v1[4];
  if (v9 < 0)
  {
    v11 = __si_assert_copy_extra_268();
    __message_assert_346((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, (char)"VIntUtils.h");
    free(v11);
    if (__valid_fs(-1))
      v19 = 2989;
    else
      v19 = 3072;
    *(_DWORD *)v19 = -559038737;
    abort();
  }
  v10 = ((v7 & 0x7F) << 21) | (v9 << 28) | ((v5 & 0x7F) << 14) | ((v4 & 0x7F) << 7) | (v2 & 0x7F);
  v3 = 5;
  v2 = v10;
LABEL_10:
  *a1 = &v1[v3];
  return v2;
}

void __message_assert_346(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  void *v9[2];
  uint8_t buf[4];
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v9[0] = 0;
  v9[1] = &a9;
  vasprintf((char **)v9, "%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", &a9);
  SISetCrashCStr((const char *)v9[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v11 = v9[0];
    _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }
  free(v9[0]);
}

void setOneLocalizedFieldWithFlags(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  const __CFDictionary *v8;
  const __CFDictionary *v9;
  const __CFString *v10;
  const __CFString *v11;
  uint64_t *v12;
  int *v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;
  unsigned int v18;
  CFIndex Count;
  _BYTE *v20;
  size_t v21;
  CFIndex v22;
  size_t v23;
  CFIndex v24;
  size_t v25;
  const __CFDictionary *MutableCopy;
  size_t v27;
  const void **v28;
  size_t v29;
  uint64_t v30;
  BOOL v31;
  _BYTE *v32;
  _BYTE *v33;
  const __CFString *v34;
  const __CFString *Value;
  const __CFString *v36;
  CFTypeID v37;
  char *v38;
  char *v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  int *v48;
  __int16 v49;
  unsigned int v50;
  __int16 v51;
  char v52;
  __int16 v53;
  _BOOL4 v54;
  int v55;
  uint64_t id_for_string;
  int v57;
  uint64_t v58;
  unsigned int v59;
  int32x4_t *v60;
  int32x4_t v61;
  uint64_t v62;
  int32x4_t v63;
  uint64_t v64;
  char *v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  char v69;
  char v70;
  unint64_t v71;
  _BYTE *v72;
  unsigned __int32 v73;
  const char *v74;
  int v75;
  size_t v76;
  _QWORD *v77;
  uint64_t v78;
  __n128 v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  NSObject *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  const char *v99;
  char *v100;
  const char *v101;
  _BYTE v102[4];
  unsigned int v103;
  _BYTE *v104;
  char *v105;
  uint64_t *v106;
  char **v107;
  _QWORD *v108;
  _QWORD *v109;
  char *v110;
  char *v111;
  int *v112;
  int v113;
  uint64_t *v114;
  _BYTE *v115;
  _BYTE *v116;
  size_t v117;
  int32x4_t *v118;
  const void **v119;
  const __CFDictionary *v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE v123[32768];
  _BYTE v124[131072];
  void (**v125)(UTF8Str *__hidden);
  char *v126;
  uint64_t v127;
  char v128[1024];
  void (**v129)(UTF8Str *__hidden);
  char *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD v133[3];
  __int16 v134;
  const __CFDictionary *v135;
  __int16 v136;
  uint64_t v137;
  uint64_t v138;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v114 = v12;
  v13 = (int *)v1;
  v138 = *MEMORY[0x1E0C80C00];
  bzero(&v126, 0x410uLL);
  v125 = &off_1E6E2A318;
  v14 = v128;
  v15 = fastUTF8String(v11, &v127, v128);
  v126 = v15;
  if (!v15)
  {
    v88 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v88, v89, v90, v91, v92, v93, v94, v95, (char)"SIIndexInternals.cpp");
    free(v88);
    if (!__valid_fs(-1))
    {
      v96 = 3072;
LABEL_105:
      *(_DWORD *)v96 = -559038737;
      abort();
    }
LABEL_103:
    v96 = 2989;
    goto LABEL_105;
  }
  v16 = v15;
  v17 = 1;
  if ((v5 & 1) == 0 && (v3 & 1) == 0)
  {
    v17 = db_corespotlight_store((uint64_t)v13);
    v16 = v126;
  }
  if (db_delete_field_weak(v13, v114, v16, v17) == 1)
    goto LABEL_99;
  v112 = v13;
  if (v5)
    v18 = v7 | 0x1000;
  else
    v18 = v7;
  bzero(v124, 0x20000uLL);
  bzero(v123, 0x8000uLL);
  Count = CFDictionaryGetCount(v9);
  v20 = v102;
  MEMORY[0x1E0C80A78](Count);
  v116 = &v102[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v116, v21);
  v22 = CFDictionaryGetCount(v9);
  MEMORY[0x1E0C80A78](v22);
  v118 = (int32x4_t *)&v102[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v118, v23);
  v24 = CFDictionaryGetCount(v9);
  MEMORY[0x1E0C80A78](v24);
  v115 = &v102[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v115, v25);
  MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v9);
  v27 = CFDictionaryGetCount(MutableCopy);
  v28 = (const void **)malloc_type_malloc(8 * v27, 0xC0040B8AA526DuLL);
  v120 = MutableCopy;
  CFDictionaryGetKeysAndValues(MutableCopy, v28, 0);
  v119 = v28;
  qsort_b(v28, v27, 8uLL, &__block_literal_global_382);
  v117 = v27;
  if (!v27)
  {
    v113 = 0;
    v31 = 0;
    v46 = 0;
    goto LABEL_29;
  }
  v103 = v18;
  v104 = v102;
  v105 = v128;
  v29 = 0;
  v30 = 0;
  v122 = 0;
  v113 = 0;
  v108 = &v133[2];
  v109 = &v133[1];
  v106 = &v131;
  v107 = &v130;
  v110 = (char *)&v132;
  v111 = (char *)&v134;
  v31 = 1;
  v32 = v124;
  v33 = v123;
  while (1)
  {
    v34 = (const __CFString *)v119[v29];
    Value = (const __CFString *)CFDictionaryGetValue(v120, v34);
    if (Value)
      break;
LABEL_21:
    ++v29;
    v33 = &v123[v30];
    v32 = &v124[v122];
    v31 = v29 < v117;
    if (v117 == v29)
    {
      v31 = 0;
      v46 = 0;
      v20 = v104;
      v14 = v105;
      v18 = v103;
      goto LABEL_29;
    }
  }
  v36 = Value;
  v121 = v30;
  v37 = CFGetTypeID(Value);
  if (v37 != CFStringGetTypeID())
  {
    v30 = v121;
    goto LABEL_21;
  }
  bzero(v109, 0x410uLL);
  v133[0] = &off_1E6E2A318;
  v133[1] = fastUTF8String(v36, v108, v111);
  bzero(v107, 0x410uLL);
  v129 = &off_1E6E2A318;
  v38 = fastUTF8String(v34, v106, v110);
  v39 = v38;
  v130 = v38;
  v40 = v133[2] - 1;
  v122 += v133[2] - 1;
  if (v122 <= 0x20000)
  {
    v41 = v131;
    v42 = v131 - 1 + v121;
    if (v42 <= 0x8000)
    {
      v43 = v113;
      *(_QWORD *)&v116[8 * v113] = v32;
      v118->i32[v43] = v40;
      v44 = (char *)v133[1];
      memcpy(v32, (const void *)v133[1], v40);
      *(_QWORD *)&v115[8 * v43] = v33;
      memcpy(v33, v39, v41 - 1);
      v123[v42] = 0;
      v129 = &off_1E6E2A318;
      if (v39 != v110)
      {
        free(v39);
        v44 = (char *)v133[1];
      }
      v45 = v121;
      v133[0] = &off_1E6E2A318;
      if (v44 != v111)
        free(v44);
      v30 = v41 + v45;
      v113 = v43 + 1;
      goto LABEL_21;
    }
  }
  v129 = &off_1E6E2A318;
  if (v38 != v110)
    free(v38);
  v133[0] = &off_1E6E2A318;
  v20 = v104;
  v14 = v105;
  v18 = v103;
  if ((char *)v133[1] != v111)
    free((void *)v133[1]);
  v46 = 7;
LABEL_29:
  free(v119);
  CFRelease(v120);
  v120 = (const __CFDictionary *)v126;
  if (v31)
    goto LABEL_96;
  if ((v18 & 0x10) != 0)
  {
    v48 = v112;
    v47 = v113;
  }
  else
  {
    v47 = v113;
    v48 = v112;
    if (v113 >= 2
      && (!strcmp((const char *)v120, "kMDItemDisplayName")
       || !strcmp((const char *)v120, "_kMDItemDisplayNameWithExtensions")))
    {
      v18 |= 0x10u;
    }
  }
  if (*v48 != 1685287992)
  {
    v97 = __si_assert_copy_extra_268();
    v98 = v97;
    v99 = "";
    if (v97)
      v99 = v97;
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 347, v99);
    goto LABEL_112;
  }
  if ((v18 & 0x400) != 0)
    v49 = 0;
  else
    v49 = 11;
  if ((v18 & 0x10) != 0)
    v49 = 15;
  v50 = v48[201];
  LODWORD(v122) = v18 | 0xA0;
  v51 = ((v18 | 0xA0) >> 5) & 0xFF80;
  if ((v18 & 0x400) != 0)
    v49 = 0;
  if ((v50 & 4) != 0)
    v52 = 7;
  else
    v52 = 6;
  if ((v50 & 4) != 0)
    v53 = -128;
  else
    v53 = 32;
  if ((v50 & 4) != 0)
    v51 = (v18 >> 8) & 0x20;
  LOWORD(v133[0]) = v49 | (((v18 >> 1) & 4 | (v18 >> 3) & 0x40 | ((v18 | 0xA0) >> 5) & 8 | (unsigned __int16)(v51 | v53 & (v18 >> v52))) << 8) | 0x300;
  v54 = ((v50 >> 3) & 1) == 0;
  v55 = strlen((const char *)v120);
  id_for_string = _get_id_for_string((unint64_t)v48, 0, (char *)v120, v55, v54, v133);
  if (*v48 != 1685287992)
  {
    v100 = __si_assert_copy_extra_268();
    v98 = v100;
    v101 = "";
    if (v100)
      v101 = v100;
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 359, v101);
LABEL_112:
    free(v98);
    goto LABEL_103;
  }
  v129 = 0;
  if ((v18 & 0x10) == 0)
  {
    v57 = v48[238];
    if (v57 == (_DWORD)id_for_string || v48[237] == (_DWORD)id_for_string)
    {
      if (!v47)
        goto LABEL_99;
      if (v47 <= 7)
      {
        v58 = 0;
        v59 = 0;
        goto LABEL_62;
      }
      v58 = v47 & 0xFFFFFFF8;
      v60 = v118 + 1;
      v61 = 0uLL;
      v62 = v58;
      v63 = 0uLL;
      do
      {
        v61 = vaddq_s32(v60[-1], v61);
        v63 = vaddq_s32(*v60, v63);
        v60 += 2;
        v62 -= 8;
      }
      while (v62);
      v59 = vaddvq_s32(vaddq_s32(v63, v61));
      if (v58 != v47)
      {
LABEL_62:
        v64 = v47 - v58;
        v65 = &v118->i8[4 * v58];
        do
        {
          v66 = *(_DWORD *)v65;
          v65 += 4;
          v59 += v66;
          --v64;
        }
        while (v64);
      }
      if (v59 > 0x4000)
      {
        if (v48[237] == (_DWORD)id_for_string)
        {
          id_for_string = v48[239];
        }
        else if (v57 == (_DWORD)id_for_string)
        {
          id_for_string = v48[240];
        }
        LODWORD(v122) = v18 | 0xB0;
      }
    }
  }
  if (!v47)
    goto LABEL_99;
  v121 = id_for_string;
  v104 = v20;
  v105 = v14;
  v67 = v47;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v71 = v67;
  while (2)
  {
    v72 = *(_BYTE **)&v116[8 * v68];
    v73 = v118->u32[v68];
    if (!v73 || v72[v73 - 1])
      ++v73;
    v74 = *(const char **)&v115[8 * v68];
    v75 = strlen(v74);
    v76 = v73 + v75 + 3;
    if ((int)v76 >= 1025)
    {
      v77 = malloc_type_malloc(v76, 0x41C3E2E2uLL);
      if (v77)
        goto LABEL_78;
      v80 = 12;
    }
    else
    {
      v77 = v133;
LABEL_78:
      bzero(v133, 0x400uLL);
      memcpy(v77, v72, v73);
      *(_WORD *)((char *)v77 + v73 - 1) = 534;
      v78 = (int)v73 + 2;
      memcpy((char *)v77 + (int)v78 - 1, v74, v75);
      *((_BYTE *)v77 + v78 + v75 - 1) = 0;
      v80 = db2_add_field_with_cache((unint64_t)v112, (_DWORD **)v114, 2u, 0, v121, v122, 11, (unsigned __int8 *)v77, v79, (int)v78 + v75, &v129);
      if (v77 != v133)
        free(v77);
    }
    if (v80 == 7)
      v81 = 0;
    else
      v81 = v80;
    v70 |= v80 == 7;
    v69 |= v80 != 7;
    if (!v81 && ++v68 < v71)
      continue;
    break;
  }
  if ((v69 & 1) != 0)
    v82 = v81;
  else
    v82 = 7;
  if ((v70 & 1) != 0)
    v83 = v82;
  else
    v83 = v81;
  v14 = v105;
  if (v83)
  {
    v84 = db_delete_field(v112, v114, (char *)v120);
    if ((v84 & 0xD) != 0)
      v46 = v84;
    else
      v46 = v83;
LABEL_96:
    v85 = *__error();
    v86 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
    {
      v87 = *(_QWORD *)*v114;
      LODWORD(v133[0]) = 136316162;
      *(_QWORD *)((char *)v133 + 4) = "setOneLocalizedFieldWithFlags";
      WORD2(v133[1]) = 1024;
      *(_DWORD *)((char *)&v133[1] + 6) = 290;
      WORD1(v133[2]) = 1024;
      HIDWORD(v133[2]) = v46;
      v134 = 2080;
      v135 = v120;
      v136 = 2048;
      v137 = v87;
      _os_log_error_impl(&dword_1B8270000, v86, OS_LOG_TYPE_ERROR, "%s:%d: Error:%d setting field:%s for oid:%lld", (uint8_t *)v133, 0x2Cu);
    }
    *__error() = v85;
  }
LABEL_99:
  v125 = &off_1E6E2A318;
  if (v126 != v14)
    free(v126);
}

CFComparisonResult __setOneLocalizedFieldWithFlags_block_invoke(uint64_t a1, CFStringRef *a2, CFStringRef *a3)
{
  return CFStringCompare(*a2, *a3, 0);
}

void UTF8Str::~UTF8Str(UTF8Str *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E6E2A318;
  v2 = (char *)*((_QWORD *)this + 1);
  if (v2 != (char *)this + 24)
  {
    free(v2);
    *((_QWORD *)this + 1) = 0;
  }
  *(_QWORD *)this = &off_1E6E2A338;
}

{
  char *v2;

  *(_QWORD *)this = &off_1E6E2A318;
  v2 = (char *)*((_QWORD *)this + 1);
  if (v2 != (char *)this + 24)
  {
    free(v2);
    *((_QWORD *)this + 1) = 0;
  }
  *(_QWORD *)this = &off_1E6E2A338;
  JUMPOUT(0x1BCCB06A4);
}

void Converter::~Converter(Converter *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E6E2A338;
  v2 = (char *)*((_QWORD *)this + 1);
  if (v2 != (char *)this + 24)
    free(v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E6E2A338;
  v2 = (char *)*((_QWORD *)this + 1);
  if (v2 != (char *)this + 24)
    free(v2);
  JUMPOUT(0x1BCCB06A4);
}

void setDatastoreLocalizedAttributes(uint64_t a1, int a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, CFDictionaryRef theDict, int a8, char a9)
{
  const void *v15;
  __int128 v16;
  uint64_t v17;
  void *value[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (setDatastoreLocalizedAttributes::onceToken != -1)
    dispatch_once(&setDatastoreLocalizedAttributes::onceToken, &__block_literal_global_20);
  if (!a6)
    a6 = gDefaultSchema;
  value[0] = 0;
  value[1] = 0;
  v19 = 0;
  if (a6)
  {
    v20 = xmmword_1E6E2CA98;
    v21 = 0;
    _MDPlistContainerGetPlistObjectAtKeyArray();
  }
  v20 = *(_OWORD *)value;
  v21 = v19;
  if (a5 >= 1)
  {
    do
    {
      v15 = *a3;
      value[0] = 0;
      if (!theDict || !CFDictionaryGetValueIfPresent(theDict, v15, (const void **)value))
      {
        if (a6)
        {
          v16 = v20;
          v17 = v21;
          getFlagsFromAttributes((uint64_t)&v16);
        }
      }
      setOneLocalizedFieldWithFlags(a1);
      a4 += 8;
      ++a3;
      --a5;
    }
    while (a5);
  }
}

CFArrayRef __setDatastoreLocalizedAttributes_block_invoke()
{
  CFArrayRef result;

  result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&setDatastoreLocalizedAttributes::defaultLanguages, 1, MEMORY[0x1E0C9B378]);
  setDatastoreLocalizedAttributes::defaultLanguageOrder = (uint64_t)result;
  return result;
}

uint64_t computeFlags(const char *__s1, int *a2, int a3, char a4, char a5)
{
  int v7;
  int v8;
  uint64_t result;
  BOOL v10;
  int v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v7 = *a2;
  v8 = *a2 & 0x800;
  result = 8;
  if ((a4 & 1) != 0 || (a5 & 1) != 0)
    goto LABEL_19;
  if (v8)
    v10 = a3 == 0;
  else
    v10 = 1;
  if (!v10)
  {
LABEL_7:
    v14 = __si_assert_copy_extra_268();
    v22 = v14;
    __message_assert_272((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21, (char)"SIIndexInternals.cpp");
    free(v22);
    if (__valid_fs(-1))
      v23 = 2989;
    else
      v23 = 3072;
    *(_DWORD *)v23 = -559038737;
    abort();
  }
  if (strcmp(__s1, "kMDItemUserTags"))
  {
    if (!strcmp(__s1, "kMDItemFinderComment"))
    {
      v12 = v7 | 0x800;
      if (a3)
        v12 = v7;
      *a2 = v12 | 0x200;
      v8 = v12 & 0x800;
    }
    else if (strcmp(__s1, "_kMDItemFinderLabel")
           && strcmp(__s1, "_kMDItemSizingIsNeeded")
           && strcmp(__s1, "kMDItemSubject"))
    {
      result = 1;
      goto LABEL_19;
    }
  }
  result = 8;
  if (v8 && a3)
  {
    v24 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v24, v25, v26, v27, v28, v29, v30, v31, (char)"SIIndexInternals.cpp");
    free(v24);
    if (__valid_fs(-1))
      v32 = 2989;
    else
      v32 = 3072;
    *(_DWORD *)v32 = -559038737;
    abort();
  }
LABEL_19:
  if (v8)
    v13 = a3 == 0;
  else
    v13 = 1;
  if (!v13)
    goto LABEL_7;
  return result;
}

uint64_t isVectorDictionary(const void *a1, _DWORD *a2, _DWORD *a3, _WORD *a4, const void **a5)
{
  CFTypeID v10;
  uint64_t result;
  unint64_t Length;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *value;

  v10 = CFGetTypeID(a1);
  if (isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::onceToken != -1)
    dispatch_once(&isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::onceToken, &__block_literal_global_73);
  if (v10 != isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sDictionaryTypeID)
    return 0;
  result = CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, CFSTR("vec_data"), a5);
  if (!(_DWORD)result)
    return result;
  if (CFGetTypeID(*a5) != isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sDataTypeID)
    return 0;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  value = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, CFSTR("vec_dim"), (const void **)&value)
    && CFGetTypeID(value) == isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sNumberTypeID)
  {
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, a2);
  }
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, CFSTR("vec_format"), (const void **)&value)
    && CFGetTypeID(value) == isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sNumberTypeID)
  {
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt8Type, a3);
  }
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, CFSTR("vec_version"), (const void **)&value)
    && CFGetTypeID(value) == isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sNumberTypeID)
  {
    CFNumberGetValue((CFNumberRef)value, kCFNumberSInt16Type, a4);
  }
  Length = CFDataGetLength((CFDataRef)*a5);
  v13 = *a2;
  v14 = -1;
  if ((int)v13 <= 2)
  {
    v15 = *a3;
    if ((int)v15 <= 2)
      v14 = (vector_dimension_vec_sizes_10743[v13] * vector_size_elem_sizes_10742[v15]);
  }
  return v14 <= Length;
}

void *appendVector(size_t a1, unint64_t *a2, char **a3, unint64_t *a4, CFDataRef theData)
{
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  const UInt8 *BytePtr;

  v7 = *a2;
  v8 = *a2 + a1;
  *a2 = v8;
  v9 = *a3;
  if (v8 > *a4)
  {
    v11 = (v8 - 1) | ((v8 - 1) >> 1) | (((v8 - 1) | ((v8 - 1) >> 1)) >> 2);
    v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
    v13 = (v12 | (v12 >> 16) | ((v12 | (v12 >> 16)) >> 32)) + 1;
    *a4 = v13;
    v9 = (char *)malloc_type_realloc(v9, v13, 0xA8BFA577uLL);
    *a3 = v9;
  }
  v14 = &v9[v7];
  BytePtr = CFDataGetBytePtr(theData);
  return memcpy(v14, BytePtr, a1);
}

CFTypeID ___ZL18isVectorDictionaryPK14__CFDictionaryP14vec_dimensionsP15vec_data_formatPtPPK8__CFDatabS4_S2__block_invoke()
{
  CFTypeID result;

  isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sDictionaryTypeID = CFDictionaryGetTypeID();
  isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sDataTypeID = CFDataGetTypeID();
  result = CFNumberGetTypeID();
  isVectorDictionary(__CFDictionary const*,vec_dimensions *,vec_data_format *,unsigned short *,__CFData const**,BOOL,vec_data_format,vec_dimensions)::sNumberTypeID = result;
  return result;
}

void DBTypeConverter::~DBTypeConverter(DBTypeConverter *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E6E2A338;
  v2 = (char *)*((_QWORD *)this + 1);
  if (v2 != (char *)this + 24)
    free(v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E6E2A338;
  v2 = (char *)*((_QWORD *)this + 1);
  if (v2 != (char *)this + 24)
    free(v2);
  JUMPOUT(0x1BCCB06A4);
}

BOOL ___ZL13getAttributesP4__SIxP13CatInfoGottenP14__MDPlistBytesPPKclP11__SIUserCtx_block_invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return plistBlock(a2, a3, a4, a6);
}

uint64_t runCannedHelper(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, void *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  int v12;
  NSObject *v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  result = a1(a2, a6, a3, a4, a5, a7, a8, 0, &__block_literal_global_63, a9);
  if ((result & 1) == 0)
  {
    if (dword_1EF19FCA0 >= 5)
    {
      v12 = *__error();
      v13 = _SILogForLogForCategory(5);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v15 = a6;
        v16 = 2048;
        v17 = a4;
        _os_log_impl(&dword_1B8270000, v13, OS_LOG_TYPE_DEFAULT, "No attribute %s for %llx", buf, 0x16u);
      }
      *__error() = v12;
    }
    return _MDPlistBytesAddNull();
  }
  return result;
}

BOOL __runCannedHelper_block_invoke(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return plistBlock(a2, a3, a4, a6);
}

uint64_t _qpPostcheckMatch(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (***a5)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;

  v9 = *a2;
  if (!v9)
  {
    ((void (*)(uint64_t, uint64_t *))a2[1])(a1, a2);
    v9 = *a2;
  }
  return (**a5)(a5, v9, a3, a4);
}

uint64_t _qpContentIndexMatch(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD *v9;
  uint64_t result;

  v9 = (_DWORD *)*a2;
  if (!v9)
  {
    ((void (*)(uint64_t, _QWORD *))a2[1])(a1, a2);
    v9 = (_DWORD *)*a2;
  }
  result = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a5 + 48))(a5, v9, a3, a4, *(_QWORD *)(a3 + 72));
  if ((_DWORD)result)
  {
    if (*a2)
      *(_DWORD *)(*a2 + 40) |= 0x8000u;
  }
  return result;
}

uint64_t _qpPathMatch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(_BYTE *)(a3 + 34) & 0x10) != 0)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a5 + 56))(a5, a1, a2, a3, a4);
}

void ___ZN11SISearchCtxC2Ev_block_invoke()
{
  int v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  CFAbsoluteTimeGetCurrent();
  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  v10 = 0;
  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v6 = 0;
  md_deadline_once_run_block_with_lock();
  if (!*((_BYTE *)v8 + 24))
  {
    v0 = *((_DWORD *)v4 + 6);
    v1 = operator new();
    *(_OWORD *)(v1 + 24) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    *(_DWORD *)(v1 + 56) = 1065353216;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 80) = 0u;
    *(_DWORD *)(v1 + 96) = 1065353216;
    *(_OWORD *)(v1 + 104) = 0u;
    *(_OWORD *)(v1 + 120) = 0u;
    *(_DWORD *)(v1 + 136) = 1065353216;
    *(_OWORD *)(v1 + 144) = 0u;
    *(_OWORD *)(v1 + 160) = 0u;
    *(_DWORD *)(v1 + 176) = 1065353216;
    *(_OWORD *)(v1 + 184) = 0u;
    *(_OWORD *)(v1 + 200) = 0u;
    *(_DWORD *)(v1 + 216) = 1065353216;
    *(_OWORD *)(v1 + 224) = 0u;
    *(_OWORD *)(v1 + 240) = 0u;
    *(_DWORD *)(v1 + 256) = 1065353216;
    *(_OWORD *)(v1 + 264) = 0u;
    *(_OWORD *)(v1 + 280) = 0u;
    *(_DWORD *)(v1 + 296) = 1065353216;
    *(_OWORD *)(v1 + 304) = 0u;
    *(_OWORD *)(v1 + 320) = 0u;
    *(_DWORD *)(v1 + 336) = 1065353216;
    atomic_store(0, (unsigned int *)v1);
    *(_DWORD *)(v1 + 4) = 0;
    *(_DWORD *)(v1 + 8) = v0 & 0xFFFFFFEF;
    *(_QWORD *)(v1 + 16) = SILocalizationCreateWithOptions();
    do
      v2 = __ldaxr((unsigned int *)v1);
    while (__stlxr(v2 + 1, (unsigned int *)v1));
    md_deadline_once_run_block_with_lock();
  }
  _Block_object_dispose(&v3, 8);
  _Block_object_dispose(&v7, 8);
}

void SISearchCtx_METADATA::SISearchCtx_METADATA(SISearchCtx_METADATA *this, char a2, char a3)
{
  *(_QWORD *)this = off_1E6E29FF0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 81) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 148) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 30) = -1;
  *((_DWORD *)this + 62) = 0;
  *((_DWORD *)this + 76) = 0;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_QWORD *)this + 36) = md_deadline_once_create();
  *((_QWORD *)this + 37) = dispatch_time(0, 500000000);
  *(_QWORD *)this = &off_1E6E2A138;
  *((_DWORD *)this + 90) = 9;
  *((_OWORD *)this + 23) = 0u;
  *((_DWORD *)this + 96) = 0;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_QWORD *)this + 64) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_WORD *)this + 296) = 0;
  *(_OWORD *)((char *)this + 596) = 0u;
  *(_OWORD *)((char *)this + 612) = 0u;
  *(_OWORD *)((char *)this + 628) = 0u;
  *(_QWORD *)((char *)this + 642) = 0;
  *((_BYTE *)this + 650) = a2;
  *((_DWORD *)this + 163) = 0;
  *((_BYTE *)this + 656) = a3;
  *((_QWORD *)this + 83) = 0;
  *((_DWORD *)this + 168) = 0;
  *((_QWORD *)this + 105) = 0;
  *((_DWORD *)this + 212) = 0;
  *((_QWORD *)this + 145) = 0;
  *((_DWORD *)this + 292) = 0;
  *((_QWORD *)this + 147) = 0;
  *((_BYTE *)this + 1184) = 0;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 820) = 0u;
  *((_WORD *)this + 564) = 0;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *((_DWORD *)this + 288) = 0;
  *((_OWORD *)this + 71) = 0u;
}

uint64_t PartialQueryResults::PartialQueryResults(uint64_t a1, CFArrayRef theArray, const void *a3, uint64_t a4, const __CFArray *a5, const void *a6, int a7, uint64_t a8, double a9, int a10, unsigned int *a11, unsigned int *a12, uint64_t a13, int a14)
{
  CFIndex Count;
  __int128 v21;
  CFIndex v22;
  unsigned int v23;
  CFAbsoluteTime Current;
  unsigned int v25;
  void *Mutable;
  uint64_t i;
  _OWORD *v28;
  uint64_t v29;
  _QWORD *v30;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = theArray;
  *(_QWORD *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  if (theArray)
    Count = CFArrayGetCount(theArray);
  else
    Count = 0;
  *(_QWORD *)(a1 + 232) = Count;
  *(_QWORD *)(a1 + 240) = 0;
  if (a3)
    CFRetain(a3);
  *(_QWORD *)(a1 + 248) = a3;
  *(_QWORD *)(a1 + 256) = a8;
  v21 = 0uLL;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(double *)(a1 + 304) = a9;
  *(_QWORD *)(a1 + 312) = a13;
  *(_DWORD *)(a1 + 320) = a10;
  *(_QWORD *)(a1 + 352) = 0;
  if (a5)
  {
    v22 = CFArrayGetCount(a5);
    v21 = 0uLL;
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)(a1 + 360) = v22;
  *(_QWORD *)(a1 + 368) = a5;
  *(_WORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 376) = v21;
  *(_OWORD *)(a1 + 392) = v21;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_DWORD *)(a1 + 3536) = a14;
  *(_DWORD *)(a1 + 4568) = 0;
  if (a11)
  {
    do
      v23 = __ldaxr(a11);
    while (__stlxr(v23 + 1, a11));
    *(_QWORD *)(a1 + 328) = a11;
  }
  else
  {
    *(_QWORD *)(a1 + 328) = 0;
  }
  *(_QWORD *)(a1 + 336) = md_deadline_once_create();
  Current = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)(a1 + 344) = dispatch_time(0, (uint64_t)((a9 - Current) * 1000000000.0 + 100000000.0));
  if (a12)
  {
    do
      v25 = __ldaxr(a12);
    while (__stlxr(v25 + 1, a12));
  }
  *(_QWORD *)(a1 + 424) = a12;
  if (a7 >= 4)
  {
    if (a6)
      Mutable = (void *)CFRetain(a6);
    else
      Mutable = CFDictionaryCreateMutable((CFAllocatorRef)kCIQueryZoneAllocator, 0, 0, MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 112) = Mutable;
  }
  *(_BYTE *)(a1 + 88) = 0;
  if (a14)
  {
    if (a14 == 1)
    {
      for (i = 0; i != a14; ++i)
      {
LABEL_26:
        v30 = (_QWORD *)(a1 + 8 * i);
        v30[58] = 0;
        v30[443] = 0;
        v30[186] = 0;
        v30[314] = 0;
      }
      return a1;
    }
    i = a14 & 0xFFFFFFFE;
    v28 = (_OWORD *)a1;
    v29 = i;
    do
    {
      v28[29] = 0uLL;
      *(_OWORD *)((char *)v28 + 3544) = 0uLL;
      v28[93] = 0uLL;
      v28[157] = 0uLL;
      ++v28;
      v29 -= 2;
    }
    while (v29);
    if (i != a14)
      goto LABEL_26;
  }
  return a1;
}

const __CFArray *PartialQueryResults::attributeVector(PartialQueryResults *this)
{
  CFIndex *v2;
  uint64_t v3;
  char **v4;
  const __CFArray *v5;
  const __CFArray *result;
  char **v7;
  BOOL v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  CFIndex v17;
  size_t v18;

  v2 = (CFIndex *)((char *)this + 232);
  v3 = *((_QWORD *)this + 29);
  if (*(_BYTE *)this)
  {
    if (v3)
    {
      v4 = (char **)((char *)this + 104);
      if (!*((_QWORD *)this + 13))
      {
        v5 = (const __CFArray *)*((_QWORD *)this + 16);
        if (v5)
        {
          v18 = 0;
          SIFlattenArrayToCStringVector(v5, v4, &v18, &v17);
        }
      }
    }
    return (const __CFArray *)*((_QWORD *)this + 13);
  }
  else
  {
    v7 = (char **)((char *)this + 96);
    result = (const __CFArray *)*((_QWORD *)this + 12);
    if (v3)
      v8 = result == 0;
    else
      v8 = 0;
    if (v8)
    {
      result = (const __CFArray *)*((_QWORD *)this + 15);
      if (result)
      {
        SIFlattenArrayToCStringVector(result, v7, (size_t *)this + 30, v2);
        result = (const __CFArray *)*((_QWORD *)this + 12);
        if (!result)
        {
          v9 = __si_assert_copy_extra_268();
          __message_assert_272((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, (char)"SISearchCtx.h");
          free(v9);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
      }
    }
  }
  return result;
}

void ___ZN19PartialQueryResultsC2EPK9__CFArrayPK13__CFBitVectorS2_S2_P14__CFDictionary11SIQueryKindPK13__RLEOIDArraydb19SICompletionOptionsP16_CompletionModelP17_SuggestionsModelP23si_completion_pattern_sj_block_invoke()
{
  PartialQueryResults::populateCompletionModel();
}

void PartialQueryResults::populateCompletionModel()
{
  int v0;
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  uint64_t Instance;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v11 = 0;
  v12 = &v11;
  v13 = 0x2000000000;
  v14 = 0;
  v7 = 0;
  v8 = &v7;
  v10 = 0;
  v9 = 0x2000000000;
  md_deadline_once_run_block_with_lock();
  if (!*((_BYTE *)v12 + 24))
  {
    v0 = *((_DWORD *)v8 + 6);
    v1 = (unsigned int *)malloc_type_malloc(0x38uLL, 0x10200403802FF21uLL);
    v2 = v1;
    if (v1)
    {
      atomic_store(0, v1);
      *((_QWORD *)v1 + 1) = 0;
      if (v0 == 1)
      {
        v3 = 1;
      }
      else
      {
        *((_QWORD *)v1 + 1) = SILanguageModelGetDefaultModel();
        v3 = v0 & 0xFFFFFFEF;
      }
      *((_OWORD *)v2 + 1) = 0u;
      v2[1] = v3;
      *((_OWORD *)v2 + 2) = 0u;
      v2[12] = 0;
      if (SIWordTrieGetTypeID::once[0] != -1)
        dispatch_once(SIWordTrieGetTypeID::once, &__block_literal_global_4441);
      Instance = _CFRuntimeCreateInstance();
      *(_OWORD *)(Instance + 16) = 0u;
      *(_OWORD *)(Instance + 32) = 0u;
      *(_DWORD *)(Instance + 48) = 1065353216;
      if ((v3 & 1) != 0)
      {
        *((_QWORD *)v2 + 2) = Instance;
      }
      else
      {
        *((_QWORD *)v2 + 3) = Instance;
        if (SIWordTrieGetTypeID::once[0] != -1)
          dispatch_once(SIWordTrieGetTypeID::once, &__block_literal_global_4441);
        v5 = _CFRuntimeCreateInstance();
        *(_OWORD *)(v5 + 16) = 0u;
        *(_OWORD *)(v5 + 32) = 0u;
        *(_DWORD *)(v5 + 48) = 1065353216;
        *((_QWORD *)v2 + 4) = v5;
      }
      do
        v6 = __ldaxr(v2);
      while (__stlxr(v6 + 1, v2));
    }
    md_deadline_once_run_block_with_lock();
  }
  _Block_object_dispose(&v7, 8);
  _Block_object_dispose(&v11, 8);
}

void ___ZN19PartialQueryResults23populateCompletionModelEP18md_deadline_once_s_block_invoke_2(uint64_t a1, int a2)
{
  if (a2)
    SICompletionModelRelease(*(unsigned int **)(a1 + 40));
  else
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 328) = *(_QWORD *)(a1 + 40);
}

uint64_t QueryFunctionCallbackContext::postCheck()
{
  return 2;
}

void QueryFunctionCallbackContext_LIVE::~QueryFunctionCallbackContext_LIVE(QueryFunctionCallbackContext_LIVE *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_1E6E2A268;
  v1 = *((_QWORD *)this + 5);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_1E6E2A268;
  v1 = *((_QWORD *)this + 5);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1BCCB06A4);
}

BOOL QueryFunctionCallbackContext_LIVE::matchPath(QueryFunctionCallbackContext_LIVE *this, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *((unsigned int *)this + 9);
  if ((int)v2 < 1)
    return 0;
  v3 = (_QWORD *)*((_QWORD *)this + 6);
  if (*v3 == a2)
    return 1;
  v5 = 0;
  v6 = v3 + 1;
  while (v2 - 1 != v5)
  {
    v7 = v6[v5++];
    if (v7 == a2)
      return v5 < v2;
  }
  v5 = *((unsigned int *)this + 9);
  return v5 < v2;
}

uint64_t QueryFunctionCallbackContext_LIVE::gotten(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int v7;

  result = a1[5];
  if (!result)
  {
    result = operator new();
    v5 = a1[1];
    v6 = a1[3];
    *(_QWORD *)(result + 16) = v5;
    *(_QWORD *)(result + 24) = v6;
    *(_BYTE *)(result + 32) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_QWORD *)(result + 80) = 0;
    if (v5)
      v7 = (*(unsigned __int8 *)(v5 + 6586) >> 1) & 1;
    else
      LOBYTE(v7) = 1;
    *(_BYTE *)(result + 88) = v7;
    *(_WORD *)(result + 89) = 0;
    *(_QWORD *)result = &off_1E6E2A0F8;
    *(_QWORD *)(result + 40) = a2;
    a1[5] = result;
  }
  return result;
}

uint64_t QueryFunctionCallbackContext_LIVE::gotten(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_QWORD *)a3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  if (*(_QWORD *)a3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  else
    return 0;
}

uint64_t QueryFunctionCallbackContext_LIVE::findContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  const UInt8 *v20;
  size_t v21;
  const __CFAllocator *v22;
  const UInt8 *v23;
  const __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = *(unsigned __int8 *)(a1 + 33);
  if (!*(_BYTE *)(a1 + 33))
    return v4 ^ ((*(_DWORD *)(a3 + 24) - 5) < 2);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(v7 + 1384);
  v10 = *(unsigned int *)(v9 + 8);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)v9 - 8;
    while (1)
    {
      v12 = *(_QWORD *)(v11 + 8 * v10);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 72);
        if (v13 < v8 && v13 + *(unsigned int *)(v12 + 60) > v8)
          break;
      }
      if (v10-- <= 1)
        goto LABEL_9;
    }
  }
  else
  {
LABEL_9:
    v14 = *(_QWORD *)(v7 + 1392);
    v15 = *(unsigned int *)(v14 + 8);
    if (!(_DWORD)v15)
    {
LABEL_18:
      v4 = 0;
      return v4 ^ ((*(_DWORD *)(a3 + 24) - 5) < 2);
    }
    v16 = *(_QWORD *)v14 - 8;
    while (1)
    {
      v12 = *(_QWORD *)(v16 + 8 * v15);
      if (v12)
      {
        v17 = *(_QWORD *)(v12 + 72);
        if (v17 < v8 && v17 + *(unsigned int *)(v12 + 60) > v8)
          break;
      }
      if (v15-- < 2)
        goto LABEL_18;
    }
  }
  v19 = (unint64_t *)(a3 + 120);
  v18 = *(_QWORD *)(a3 + 120);
  if (v18)
  {
    if (*(void (**)(char *))(a3 + 128) == ContentIndexQueryNodeDispose)
      goto LABEL_33;
LABEL_35:
    v30 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v30, v31, v32, v33, v34, v35, v36, v37, (char)"SIQuery.cpp");
    free(v30);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v20 = *(const UInt8 **)(a3 + 72);
  if (v20)
  {
    v21 = strlen(*(const char **)(a3 + 72));
    v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v23 = v20;
  }
  else
  {
    v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v23 = 0;
    v21 = 0;
  }
  v24 = CFStringCreateWithBytes(v22, v23, v21, 0x8000100u, 0);
  v25 = *(_QWORD *)(a1 + 24);
  if (v25)
    v26 = *(_QWORD *)(v25 + 144);
  else
    v26 = 0;
  v27 = _CIQueryNodeForString(v12, v24, 0, (*(_DWORD *)(a3 + 32) >> 1) & 0x20 | (*(_DWORD *)(a3 + 32) >> 4) & 3 | (((*(_DWORD *)(a3 + 32) >> 15) & 1) << 25) | (*(_DWORD *)(a3 + 32) >> 1) & 0x4000000 | (*(_DWORD *)(a3 + 32) >> 11) & 8u, v26, (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 6584) >> 19) & 3, 0, *(_DWORD *)(a3 + 60));
  v18 = (uint64_t)v27;
  do
  {
    if (__ldaxr(v19))
    {
      __clrex();
      ContentIndexQueryNodeDispose((char *)v27);
      if (*(void (**)(char *))(a3 + 128) == ContentIndexQueryNodeDispose)
      {
        v18 = *(_QWORD *)(a3 + 120);
        goto LABEL_31;
      }
      goto LABEL_35;
    }
  }
  while (__stlxr((unint64_t)v27, v19));
  *(_QWORD *)(a3 + 120) = v27;
  *(_QWORD *)(a3 + 128) = ContentIndexQueryNodeDispose;
LABEL_31:
  if (v24)
    CFRelease(v24);
LABEL_33:
  v4 = _CIMatchesNodeByDocId(v12, v18, *(_QWORD *)(a2 + 32), *(_BYTE *)(a1 + 32)) != 0;
  return v4 ^ ((*(_DWORD *)(a3 + 24) - 5) < 2);
}

uint64_t QueryFunctionCallbackContext::findPath(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;

  v7 = **(_QWORD **)(a4 + 288);
  if ((*(_BYTE *)(a4 + 34) & 8) != 0
    || ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, **(_QWORD **)(a4 + 288)) & 1) == 0)
  {
    v9 = *a3;
    if (*a3 || (((void (*)(uint64_t, uint64_t *))a3[1])(a2, a3), (v9 = *a3) != 0))
    {
      v9 = *(_QWORD *)(v9 + 24);
      v8 = v9 != v7;
      LODWORD(v9) = v9 == v7;
    }
    else
    {
      v8 = 1;
    }
  }
  else
  {
    v8 = 0;
    LODWORD(v9) = 1;
  }
  if (*(_DWORD *)(a4 + 24) == 5)
    return v8;
  else
    return v9;
}

uint64_t QueryFunctionCallbackContext::getDocSet()
{
  return 0;
}

void SIQueryAddResults(uint64_t a1)
{
  const void *v1;
  const void *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  dispatch_time_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  const void *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)();
  void *v54;
  _BYTE *v55;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v8 = v7;
  bzero(v10, 0x11E0uLL);
  v10[0] = 0;
  v33 = 0;
  v40 = 0;
  v41 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0;
  v32 = 0;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v48 = 1;
  v50 = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  if (v2)
    CFRetain(v2);
  v46 = v2;
  if (v4)
    CFRetain(v4);
  v49 = 0;
  v45 = v4;
  v47 = 0;
  v51 = MEMORY[0x1E0C809B0];
  v52 = 0x40000000;
  v53 = ___ZN19PartialQueryResultsC2EPK17__MDStoreOIDArrayPK14__MDPlistBytes_block_invoke;
  v54 = &__block_descriptor_tmp_23_445;
  v55 = v10;
  v34 = md_deadline_once_create();
  v35 = dispatch_time(0, 100000000);
  v9 = _MDStoreOIDArrayGetVectorCount() < 2;
  si_querypipe_addresults(*(_QWORD *)(v6 + 24), (uint64_t)v10, 0, v9, v8);
  PartialQueryResults::~PartialQueryResults((PartialQueryResults *)v10);
}

void ___ZN19PartialQueryResultsC2EPK17__MDStoreOIDArrayPK14__MDPlistBytes_block_invoke()
{
  PartialQueryResults::populateCompletionModel();
}

_QWORD *makeNodeForAttribute(const __CFString *cf2)
{
  _QWORD *query_node_with_ann;
  char *v4;
  char *v5;
  uint64_t v6;
  char v7[1024];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (CFEqual(CFSTR("_kMDItemDisplayNameWithExtensionsSynth"), cf2))
    return db_make_query_node_with_ann("true", 0);
  query_node_with_ann = db_make_query_node_with_ann("*=*", 0);
  free(*(void **)query_node_with_ann[2]);
  bzero(&v5, 0x410uLL);
  v4 = fastUTF8String(cf2, &v6, v7);
  v5 = v4;
  *(_QWORD *)query_node_with_ann[2] = strdup(v4);
  if (v4 != v7)
    free(v4);
  return query_node_with_ann;
}

uint64_t SIUINT32SetGetTypeID()
{
  uint64_t result;

  result = __kSIUINT32SetTypeID;
  if (!__kSIUINT32SetTypeID)
  {
    result = _CFRuntimeRegisterClass();
    __kSIUINT32SetTypeID = result;
  }
  return result;
}

double __SIUINT32SetInit(const void *a1)
{
  const __CFAllocator *v2;
  void *v3;
  double result;

  v2 = CFGetAllocator(a1);
  *((_QWORD *)a1 + 2) = 0;
  *((_QWORD *)a1 + 4) = 0;
  *((_QWORD *)a1 + 5) = v2;
  v3 = CFAllocatorAllocate(v2, 8072, 0);
  bzero(v3, 0x1F88uLL);
  *((_QWORD *)a1 + 3) = v3;
  result = 0.0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_BYTE *)a1 + 176) = 1;
  return result;
}

void __SIUINT32SetFinalize(const void *a1)
{
  void **v2;

  SIValueSet<unsigned int>::_SIValueSetInnerDealloc((_QWORD *)a1 + 6, *((const __CFAllocator **)a1 + 5));
  v2 = (void **)*((_QWORD *)a1 + 3);
  if (v2)
  {
    SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_s::clear(v2, *((const __CFAllocator **)a1 + 5), *((_QWORD *)a1 + 4));
    CFAllocatorDeallocate(*((CFAllocatorRef *)a1 + 5), *((void **)a1 + 3));
    *((_QWORD *)a1 + 3) = 0;
  }
}

void SIValueSet<unsigned int>::_SIValueSetInnerDealloc(_QWORD *a1, const __CFAllocator *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v4 = (void *)*a1;
  if (*a1)
  {
    if ((v4 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v4 + 72))(*a1);
      CFAllocatorDeallocate(a2, v4);
    }
    *a1 = 0;
  }
  v5 = (void *)a1[1];
  if (v5)
  {
    if ((v5 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v5 + 72))(a1[1]);
      CFAllocatorDeallocate(a2, v5);
    }
    a1[1] = 0;
  }
  v6 = (void *)a1[2];
  if (v6)
  {
    if ((v6 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v6 + 72))(a1[2]);
      CFAllocatorDeallocate(a2, v6);
    }
    a1[2] = 0;
  }
  v7 = (void *)a1[3];
  if (v7)
  {
    if ((v7 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v7 + 72))(a1[3]);
      CFAllocatorDeallocate(a2, v7);
    }
    a1[3] = 0;
  }
  v8 = (void *)a1[4];
  if (v8)
  {
    if ((v8 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v8 + 72))(a1[4]);
      CFAllocatorDeallocate(a2, v8);
    }
    a1[4] = 0;
  }
  v9 = (void *)a1[5];
  if (v9)
  {
    if ((v9 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v9 + 72))(a1[5]);
      CFAllocatorDeallocate(a2, v9);
    }
    a1[5] = 0;
  }
  v10 = (void *)a1[6];
  if (v10)
  {
    if ((v10 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v10 + 72))(a1[6]);
      CFAllocatorDeallocate(a2, v10);
    }
    a1[6] = 0;
  }
  v11 = (void *)a1[7];
  if (v11)
  {
    if ((v11 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v11 + 72))(a1[7]);
      CFAllocatorDeallocate(a2, v11);
    }
    a1[7] = 0;
  }
  v12 = (void *)a1[8];
  if (v12)
  {
    if ((v12 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v12 + 72))(a1[8]);
      CFAllocatorDeallocate(a2, v12);
    }
    a1[8] = 0;
  }
  v13 = (void *)a1[9];
  if (v13)
  {
    if ((v13 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v13 + 72))(a1[9]);
      CFAllocatorDeallocate(a2, v13);
    }
    a1[9] = 0;
  }
  v14 = (void *)a1[10];
  if (v14)
  {
    if ((v14 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v14 + 72))(a1[10]);
      CFAllocatorDeallocate(a2, v14);
    }
    a1[10] = 0;
  }
  v15 = (void *)a1[11];
  if (v15)
  {
    if ((v15 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v15 + 72))(a1[11]);
      CFAllocatorDeallocate(a2, v15);
    }
    a1[11] = 0;
  }
  v16 = (void *)a1[12];
  if (v16)
  {
    if ((v16 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v16 + 72))(a1[12]);
      CFAllocatorDeallocate(a2, v16);
    }
    a1[12] = 0;
  }
  v17 = (void *)a1[13];
  if (v17)
  {
    if ((v17 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v17 + 72))(a1[13]);
      CFAllocatorDeallocate(a2, v17);
    }
    a1[13] = 0;
  }
  v18 = (void *)a1[14];
  if (v18)
  {
    if ((v18 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v18 + 72))(a1[14]);
      CFAllocatorDeallocate(a2, v18);
    }
    a1[14] = 0;
  }
  v19 = (void *)a1[15];
  if (v19)
  {
    if ((v19 & 1) == 0)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v19 + 72))(a1[15]);
      CFAllocatorDeallocate(a2, v19);
    }
    a1[15] = 0;
  }
}

uint64_t SIUINT32SetCreate()
{
  if (!__kSIUINT32SetTypeID)
    __kSIUINT32SetTypeID = _CFRuntimeRegisterClass();
  return _CFRuntimeCreateInstance();
}

uint64_t SIUINT32SetContainsValue(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  int v5;

  if (*(_BYTE *)(a1 + 176))
    return 0;
  v3 = *(_DWORD *)(a1 + 20);
  if (v3)
  {
    if ((*(_DWORD *)(a1 + 16) ^ a2) >> (-4 * v3))
      return 0;
  }
  v4 = *(_QWORD *)(a1 + 8 * ((a2 >> (28 - 4 * v3)) & 0xF) + 48);
  if ((v4 & 1) != 0)
  {
    v5 = v3 + 2;
    do
      v4 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((a2 >> (32 - 4 * v5++)) & 0xF));
    while ((v4 & 1) != 0);
  }
  if (!v4)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
}

uint64_t SIUINT32SetAddValue(uint64_t a1, uint64_t a2)
{
  return SIValueSet<unsigned int>::SIValueSetInsert((unsigned int *)(a1 + 16), a2);
}

uint64_t SIValueSet<unsigned int>::SIValueSetInsert(unsigned int *a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  _OWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  int v18;
  char *v19;
  char *v20;
  const char *v21;
  char *v23;
  char *v24;
  const char *v25;
  uint64_t v26;

  v4 = a1[1];
  if (v4)
  {
    v5 = 4 * v4;
    v6 = *a1;
    if ((*a1 ^ a2) >> (-4 * v4))
    {
      v7 = a1 + 8;
      do
      {
        v17 = a1[1];
        a1[1] = v17 - 1;
        if (v17 <= 0)
        {
          v23 = __si_assert_copy_extra_268();
          v24 = v23;
          v25 = "";
          if (v23)
            v25 = v23;
          __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 1650, "s->sharedDepth>=0", v25);
          free(v24);
          if (__valid_fs(-1))
            v26 = 2989;
          else
            v26 = 3072;
          *(_DWORD *)v26 = -559038737;
          abort();
        }
        if (v17 == 1)
          v18 = 0;
        else
          v18 = -1 << (-4 * (v17 - 1));
        *a1 = v6 & v18;
        v9 = *((_QWORD *)a1 + 2);
        if (v9 == 63 || (v8 = (_QWORD *)*((_QWORD *)a1 + 1)) == 0)
        {
          v8 = CFAllocatorAllocate(*((CFAllocatorRef *)a1 + 3), 8072, 0);
          *v8 = *((_QWORD *)a1 + 1);
          bzero(v8 + 1, 0x1F80uLL);
          v9 = 0;
          *((_QWORD *)a1 + 1) = v8;
        }
        *((_QWORD *)a1 + 2) = v9 + 1;
        v10 = *v7;
        v11 = *((_OWORD *)a1 + 3);
        v12 = *((_OWORD *)a1 + 4);
        v13 = &v8[16 * v9];
        *(_OWORD *)(v13 + 7) = *((_OWORD *)a1 + 5);
        *(_OWORD *)(v13 + 5) = v12;
        *(_OWORD *)(v13 + 3) = v11;
        *(_OWORD *)(v13 + 1) = v10;
        v14 = *((_OWORD *)a1 + 6);
        v15 = *((_OWORD *)a1 + 7);
        v16 = *((_OWORD *)a1 + 8);
        *(_OWORD *)(v13 + 15) = *((_OWORD *)a1 + 9);
        *(_OWORD *)(v13 + 13) = v16;
        *(_OWORD *)(v13 + 11) = v15;
        *(_OWORD *)(v13 + 9) = v14;
        *((_OWORD *)a1 + 4) = 0u;
        *((_OWORD *)a1 + 5) = 0u;
        *((_OWORD *)a1 + 6) = 0u;
        *((_OWORD *)a1 + 7) = 0u;
        *((_OWORD *)a1 + 8) = 0u;
        *((_OWORD *)a1 + 9) = 0u;
        *v7 = 0u;
        *((_OWORD *)a1 + 3) = 0u;
        *((_QWORD *)v7 + ((v6 >> ((32 - 4 * v17) & 0xFC)) & 0xF)) = (unint64_t)(v13 + 1) | 1;
        v6 = *a1;
      }
      while (*a1 != (v18 & a2));
      v4 = a1[1];
      v5 = 4 * v4;
    }
    if ((v5 - 29) <= 0xFFFFFFDE)
    {
      v19 = __si_assert_copy_extra_268();
      v20 = v19;
      v21 = "";
      if (v19)
        v21 = v19;
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 1670, "((sizeof(ValueType) * 8) -4*(1+(s->sharedDepth))) <= sizeof(ValueType)*8", v21);
      free(v20);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
  }
  else if (*((_BYTE *)a1 + 160))
  {
    v4 = 4;
    *a1 = a2 & 0xFFFF0000;
    a1[1] = 4;
  }
  else
  {
    v4 = 0;
  }
  *((_BYTE *)a1 + 160) = 0;
  return SIValueSet<unsigned int>::_SIValueSetInnerInsert((unint64_t)(a1 + 8), a2, v4, (uint64_t)(a1 + 2));
}

uint64_t SIValueSet<unsigned int>::_SIValueSetInnerInsert(unint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v5;
  unsigned __int16 v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (**v12)();
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFAllocator *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t i;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int *v40;
  int v41;
  int v42;
  uint64_t j;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  unsigned __int16 v47;
  __int16 v48;
  uint64_t v49;
  __int16 *v50;
  int v51;
  uint64_t k;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  uint64_t v58;
  unsigned int v59;
  unint64_t v60;
  _QWORD *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;

  v5 = a3;
  v94 = *MEMORY[0x1E0C80C00];
  v7 = 28 - 4 * a3;
  v8 = 28 - 4 * a3;
  v9 = (a2 >> v8) & 0xF;
  v10 = *(_QWORD *)(a1 + 8 * v9);
  if ((v10 & 1) != 0)
  {
    do
    {
      v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      v7 = 24 - 4 * v5;
      v8 = 24 - 4 * v5;
      v9 = (a2 >> v8) & 0xF;
      v10 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * v9);
      ++v5;
    }
    while ((v10 & 1) != 0);
  }
  else
  {
    v11 = a1;
  }
  if ((__int16)v7 < 13)
  {
    if (!v10)
    {
      v10 = (unint64_t)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
      *(_QWORD *)v10 = off_1E6E2A388;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 120) = 0u;
      *(_OWORD *)(v10 + 136) = 0u;
      *(_OWORD *)(v10 + 152) = 0u;
      *(_OWORD *)(v10 + 168) = 0u;
      *(_OWORD *)(v10 + 184) = 0u;
      *(_OWORD *)(v10 + 200) = 0u;
      *(_OWORD *)(v10 + 216) = 0u;
      *(_OWORD *)(v10 + 232) = 0u;
      *(_OWORD *)(v10 + 248) = 0u;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_OWORD *)(v10 + 264) = 0u;
      *(_OWORD *)(v10 + 280) = 0u;
      *(_OWORD *)(v10 + 296) = 0u;
      *(_OWORD *)(v10 + 312) = 0u;
      *(_OWORD *)(v10 + 328) = 0u;
      *(_OWORD *)(v10 + 344) = 0u;
      *(_OWORD *)(v10 + 360) = 0u;
      *(_OWORD *)(v10 + 376) = 0u;
      *(_OWORD *)(v10 + 392) = 0u;
      *(_OWORD *)(v10 + 408) = 0u;
      *(_OWORD *)(v10 + 424) = 0u;
      *(_OWORD *)(v10 + 440) = 0u;
      *(_OWORD *)(v10 + 456) = 0u;
      *(_OWORD *)(v10 + 472) = 0u;
      *(_OWORD *)(v10 + 488) = 0u;
      *(_OWORD *)(v10 + 504) = 0u;
      *(_QWORD *)(v11 + 8 * v9) = v10;
    }
    v13 = a2 & ~(-1 << v8);
    v14 = (__int16)v13 >> 6;
    v15 = 1 << v13;
    v16 = (char *)(v10 + 8 * (__int16)v14);
    v19 = *((_QWORD *)v16 + 1);
    v17 = (uint64_t *)(v16 + 8);
    v18 = v19;
    if ((v19 & v15) != 0)
      return 0;
    *v17 = v18 | v15;
    return 1;
  }
  if (v10)
  {
    v12 = *(uint64_t (***)())v10;
  }
  else
  {
    if (v7 < 0x20u)
    {
      v21 = *(const __CFAllocator **)(a4 + 16);
      if (v7 < 0x10u)
      {
        v10 = (unint64_t)CFAllocatorAllocate(v21, 136, 0);
        v12 = off_1E6E2A4C8;
        *(_QWORD *)v10 = off_1E6E2A4C8;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 40) = 0u;
        *(_OWORD *)(v10 + 56) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        *(_OWORD *)(v10 + 88) = 0u;
        *(_OWORD *)(v10 + 104) = 0u;
        *(_OWORD *)(v10 + 120) = 0u;
      }
      else
      {
        v10 = (unint64_t)CFAllocatorAllocate(v21, 264, 0);
        v12 = off_1E6E2A428;
        *(_QWORD *)v10 = off_1E6E2A428;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 40) = 0u;
        *(_OWORD *)(v10 + 56) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        *(_OWORD *)(v10 + 88) = 0u;
        *(_OWORD *)(v10 + 104) = 0u;
        *(_OWORD *)(v10 + 120) = 0u;
        *(_OWORD *)(v10 + 136) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 168) = 0u;
        *(_OWORD *)(v10 + 184) = 0u;
        *(_OWORD *)(v10 + 200) = 0u;
        *(_OWORD *)(v10 + 216) = 0u;
        *(_OWORD *)(v10 + 232) = 0u;
        *(_OWORD *)(v10 + 248) = 0u;
      }
    }
    else
    {
      v10 = (unint64_t)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
      v12 = off_1E6E2A568;
      *(_QWORD *)v10 = off_1E6E2A568;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 120) = 0u;
      *(_OWORD *)(v10 + 136) = 0u;
      *(_OWORD *)(v10 + 152) = 0u;
      *(_OWORD *)(v10 + 168) = 0u;
      *(_OWORD *)(v10 + 184) = 0u;
      *(_OWORD *)(v10 + 200) = 0u;
      *(_OWORD *)(v10 + 216) = 0u;
      *(_OWORD *)(v10 + 232) = 0u;
      *(_OWORD *)(v10 + 248) = 0u;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_OWORD *)(v10 + 264) = 0u;
      *(_OWORD *)(v10 + 280) = 0u;
      *(_OWORD *)(v10 + 296) = 0u;
      *(_OWORD *)(v10 + 312) = 0u;
      *(_OWORD *)(v10 + 328) = 0u;
      *(_OWORD *)(v10 + 344) = 0u;
      *(_OWORD *)(v10 + 360) = 0u;
      *(_OWORD *)(v10 + 376) = 0u;
      *(_OWORD *)(v10 + 392) = 0u;
      *(_OWORD *)(v10 + 408) = 0u;
      *(_OWORD *)(v10 + 424) = 0u;
      *(_OWORD *)(v10 + 440) = 0u;
      *(_OWORD *)(v10 + 456) = 0u;
      *(_OWORD *)(v10 + 472) = 0u;
      *(_OWORD *)(v10 + 488) = 0u;
      *(_OWORD *)(v10 + 504) = 0u;
    }
    *(_QWORD *)(v11 + 8 * v9) = v10;
  }
  v20 = ((uint64_t (*)(unint64_t, uint64_t, _QWORD))*v12)(v10, a2, ~(-1 << v8));
  if ((unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 56))(v10) < 0x3E)
    return v20;
  v22 = *(_QWORD *)(a4 + 8);
  if (v22 == 63 || (v23 = *(_QWORD **)a4) == 0)
  {
    v23 = CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 8072, 0);
    *v23 = *(_QWORD *)a4;
    bzero(v23 + 1, 0x1F80uLL);
    v22 = 0;
    *(_QWORD *)a4 = v23;
  }
  *(_QWORD *)(a4 + 8) = v22 + 1;
  v24 = &v23[16 * v22];
  *(_OWORD *)(v24 + 1) = 0u;
  v25 = (unint64_t)(v24 + 1);
  *(_OWORD *)(v25 + 96) = 0u;
  *(_OWORD *)(v25 + 112) = 0u;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_OWORD *)(v25 + 48) = 0u;
  v26 = (v5 + 1);
  v27 = 32 - 4 * v26;
  *(_OWORD *)(v25 + 16) = 0u;
  if (v27 >= 32)
  {
    v28 = *(_QWORD *)(v10 + 8);
    if (v28 > 0x3F)
      goto LABEL_85;
    v58 = (uint64_t)&v58;
    v59 = v20;
    LODWORD(v29) = 0;
    v30 = 0;
    v31 = 0;
    v92 = 0uLL;
    v93 = 0uLL;
    v60 = v10 + 16 + 8 * v28;
    v61 = (_QWORD *)(v10 + 16);
    v90 = 0uLL;
    v91 = 0uLL;
    v88 = 0uLL;
    v89 = 0uLL;
    v86 = 0uLL;
    v87 = 0uLL;
    v84 = 0uLL;
    v85 = 0uLL;
    v82 = 0uLL;
    v83 = 0uLL;
    v80 = 0uLL;
    v81 = 0uLL;
    v78 = 0uLL;
    v79 = 0uLL;
    v76 = 0uLL;
    v77 = 0uLL;
    v74 = 0uLL;
    v75 = 0uLL;
    v72 = 0uLL;
    v73 = 0uLL;
    v70 = 0uLL;
    v71 = 0uLL;
    v68 = 0uLL;
    v69 = 0uLL;
    v66 = 0uLL;
    v67 = 0uLL;
    v64 = 0uLL;
    v65 = 0uLL;
    v62 = 0uLL;
    v63 = 0uLL;
    while (1)
    {
      if (v30)
      {
        --v30;
        LODWORD(v29) = v29 + 1;
      }
      else
      {
        if ((unint64_t)v61 >= v60)
        {
          v20 = v59;
          if (v31)
          {
            v44 = (unsigned int *)&v62;
            do
            {
              v45 = *v44++;
              SIValueSet<unsigned int>::_SIValueSetInnerInsert(v25, v45, v26, a4);
              --v31;
            }
            while (v31);
          }
          goto LABEL_85;
        }
        v32 = v61 + 1;
        v29 = *v61;
        if ((unint64_t)(v61 + 1) >= v60)
        {
          v30 = 0;
          ++v61;
        }
        else
        {
          v33 = *v32 & 0x7FFFFFFFFFFFFFFFLL;
          v34 = *v32 >= 0;
          if ((uint64_t)*v32 < 0)
            v32 = v61 + 2;
          v61 = v32;
          if (v34)
            v30 = 0;
          else
            v30 = v33;
        }
      }
      *((_DWORD *)&v62 + v31++) = v29;
      if (v31 == 128)
      {
        for (i = 0; i != 512; i += 4)
          SIValueSet<unsigned int>::_SIValueSetInnerInsert(v25, *(unsigned int *)((char *)&v62 + i), v26, a4);
        v31 = 0;
      }
    }
  }
  if (v27 >= 16)
  {
    v36 = *(unsigned int *)(v10 + 8);
    if (v36 > 0x3F)
      goto LABEL_85;
    v58 = (uint64_t)&v58;
    v59 = v20;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v92 = 0uLL;
    v93 = 0uLL;
    v60 = v10 + 12 + 4 * v36;
    v61 = (_QWORD *)(v10 + 12);
    v90 = 0uLL;
    v91 = 0uLL;
    v88 = 0uLL;
    v89 = 0uLL;
    v86 = 0uLL;
    v87 = 0uLL;
    v84 = 0uLL;
    v85 = 0uLL;
    v82 = 0uLL;
    v83 = 0uLL;
    v80 = 0uLL;
    v81 = 0uLL;
    v78 = 0uLL;
    v79 = 0uLL;
    v76 = 0uLL;
    v77 = 0uLL;
    v74 = 0uLL;
    v75 = 0uLL;
    v72 = 0uLL;
    v73 = 0uLL;
    v70 = 0uLL;
    v71 = 0uLL;
    v68 = 0uLL;
    v69 = 0uLL;
    v66 = 0uLL;
    v67 = 0uLL;
    v64 = 0uLL;
    v65 = 0uLL;
    v62 = 0uLL;
    v63 = 0uLL;
    while (1)
    {
      if (v38)
      {
        --v38;
        ++v37;
      }
      else
      {
        if ((unint64_t)v61 >= v60)
        {
          v20 = v59;
          if (v39)
          {
            v53 = (unsigned int *)&v62;
            do
            {
              v54 = *v53++;
              SIValueSet<unsigned int>::_SIValueSetInnerInsert(v25, v54, v26, a4);
              --v39;
            }
            while (v39);
          }
          goto LABEL_85;
        }
        v40 = (int *)v61 + 1;
        v37 = *(_DWORD *)v61;
        if ((unint64_t)v61 + 4 >= v60)
        {
          v38 = 0;
          v61 = (_QWORD *)((char *)v61 + 4);
        }
        else
        {
          v41 = *v40;
          v42 = *v40 & 0x7FFFFFFF;
          if (*v40 < 0)
            v40 = (int *)(v61 + 1);
          v61 = v40;
          if (v41 < 0)
            v38 = v42;
          else
            v38 = 0;
        }
      }
      *((_DWORD *)&v62 + v39++) = v37;
      if (v39 == 128)
      {
        for (j = 0; j != 512; j += 4)
          SIValueSet<unsigned int>::_SIValueSetInnerInsert(v25, *(unsigned int *)((char *)&v62 + j), v26, a4);
        v39 = 0;
      }
    }
  }
  v46 = *(unsigned __int16 *)(v10 + 8);
  if (v46 > 0x3F)
    goto LABEL_85;
  v58 = (uint64_t)&v58;
  v59 = v20;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v92 = 0uLL;
  v93 = 0uLL;
  v60 = v10 + 10 + 2 * v46;
  v61 = (_QWORD *)(v10 + 10);
  v90 = 0uLL;
  v91 = 0uLL;
  v88 = 0uLL;
  v89 = 0uLL;
  v86 = 0uLL;
  v87 = 0uLL;
  v84 = 0uLL;
  v85 = 0uLL;
  v82 = 0uLL;
  v83 = 0uLL;
  v80 = 0uLL;
  v81 = 0uLL;
  v78 = 0uLL;
  v79 = 0uLL;
  v76 = 0uLL;
  v77 = 0uLL;
  v74 = 0uLL;
  v75 = 0uLL;
  v72 = 0uLL;
  v73 = 0uLL;
  v70 = 0uLL;
  v71 = 0uLL;
  v68 = 0uLL;
  v69 = 0uLL;
  v66 = 0uLL;
  v67 = 0uLL;
  v64 = 0uLL;
  v65 = 0uLL;
  v62 = 0uLL;
  v63 = 0uLL;
  while (1)
  {
    if (v48)
    {
      --v48;
      ++v47;
      goto LABEL_74;
    }
    if ((unint64_t)v61 >= v60)
      break;
    v50 = (__int16 *)v61 + 1;
    v47 = *(_WORD *)v61;
    if ((unint64_t)v61 + 2 >= v60)
    {
      v48 = 0;
    }
    else
    {
      v51 = *v50;
      if (v51 < 0)
        v48 = v51 & 0x7FFF;
      else
        v48 = 0;
      if (v51 < 0)
        v50 = (__int16 *)v61 + 2;
    }
    v61 = v50;
LABEL_74:
    *((_DWORD *)&v62 + v49++) = v47;
    if (v49 == 128)
    {
      for (k = 0; k != 512; k += 4)
        SIValueSet<unsigned int>::_SIValueSetInnerInsert(v25, *(unsigned int *)((char *)&v62 + k), v26, a4);
      v49 = 0;
    }
  }
  v20 = v59;
  if (v49)
  {
    v55 = (unsigned int *)&v62;
    do
    {
      v56 = *v55++;
      SIValueSet<unsigned int>::_SIValueSetInnerInsert(v25, v56, v26, a4);
      --v49;
    }
    while (v49);
  }
LABEL_85:
  (*(void (**)(unint64_t))(*(_QWORD *)v10 + 72))(v10);
  CFAllocatorDeallocate(*(CFAllocatorRef *)(a4 + 16), (void *)v10);
  *(_QWORD *)(v11 + 8 * v9) = v25 | 1;
  return v20;
}

BOOL SIValueSet<unsigned int>::BitmapHolder::AddKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = 1 << (a3 & a2);
  v4 = a1 + ((uint64_t)((unint64_t)((a3 & a2) << 16 >> 22) << 48) >> 45);
  v7 = *(_QWORD *)(v4 + 8);
  v5 = (uint64_t *)(v4 + 8);
  v6 = v7;
  v8 = v7 & v3;
  if ((v7 & v3) == 0)
    *v5 = v6 | v3;
  return v8 == 0;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::AddSortedKeysWithContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v3;
  unsigned int Key;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(int **)a2;
  if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8))
  {
    if (a3)
    {
      do
      {
        if ((*(_DWORD *)(a2 + 20) & *v3) != *(_DWORD *)(a2 + 16))
          break;
        Key = SIValueSet<unsigned int>::FlatContextWithPfx::nextKey((int **)a2);
        v8 = 1 << Key;
        v9 = a1 + ((uint64_t)((unint64_t)((__int16)Key >> 6) << 48) >> 45);
        v12 = *(_QWORD *)(v9 + 8);
        v10 = (uint64_t *)(v9 + 8);
        v11 = v12;
        if (((1 << Key) & v12) == 0)
          goto LABEL_11;
        SIValueSet<unsigned int>::SIValueSetInsert(*(unsigned int **)(a3 + 8), *(_DWORD *)a3 | Key);
        v3 = *(int **)a2;
      }
      while (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8));
    }
    else
    {
      while ((*(_DWORD *)(a2 + 20) & *v3) == *(_DWORD *)(a2 + 16))
      {
        v13 = SIValueSet<unsigned int>::FlatContextWithPfx::nextKey((int **)a2);
        v8 = 1 << v13;
        v14 = a1 + ((uint64_t)((unint64_t)(v13 >> 6) << 48) >> 45);
        v15 = *(_QWORD *)(v14 + 8);
        v10 = (uint64_t *)(v14 + 8);
        v11 = v15;
        if (((1 << v13) & v15) == 0)
        {
LABEL_11:
          *v10 = v8 | v11;
          return 1;
        }
        v3 = *(int **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
          return 0;
      }
    }
  }
  return 0;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::ContainsKey(uint64_t a1, int a2, int a3)
{
  return (*(_QWORD *)(a1 + 8 * ((a3 & a2) << 16 >> 22) + 8) >> (a3 & a2)) & 1;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::CloseKey(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;

  if (((*(_QWORD *)(a1 + 8 * ((__int16)(a3 & a2) >> 6) + 8) >> (a3 & a2)) & 1) != 0)
    return a2;
  LODWORD(v4) = a2;
  LOWORD(v5) = a3 & a2;
  while (1)
  {
    v5 = (__int16)(v5 + 1);
    if (v5 >= 64)
      break;
    v4 = (v4 + 1);
    if (((*(_QWORD *)(a1 + 8 * (v5 >> 6) + 8) >> v5) & 1) != 0)
      return v4;
  }
  v6 = (unsigned __int16)(a3 & a2);
  LODWORD(v4) = a2;
  while ((__int16)v6 >= 1)
  {
    --v6;
    v4 = (v4 - 1);
    if (((*(_QWORD *)(a1 + 8 * (v6 >> 6) + 8) >> v6) & 1) != 0)
      return v4;
  }
  return 0;
}

BOOL SIValueSet<unsigned int>::BitmapHolder::RemoveKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = 1 << (a3 & a2);
  v4 = a1 + 8 * ((a3 & a2) << 16 >> 22);
  v7 = *(_QWORD *)(v4 + 8);
  v5 = (uint64_t *)(v4 + 8);
  v6 = v7;
  v8 = v7 & v3;
  if ((v7 & v3) != 0)
    *v5 = v6 ^ v3;
  return v8 != 0;
}

void SIValueSet<unsigned int>::BitmapHolder::Apply(uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  size_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  char v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v11, v10);
  v12 = 0;
  v13 = 0;
  v14 = a1 + 8;
  do
  {
    while (1)
    {
      v15 = *(_QWORD *)(v14 + 8 * ((__int16)v13 >> 6));
      if (v15)
        break;
LABEL_2:
      v13 = (__int16)(v13 + 64);
      if (v13 >= 4096)
        goto LABEL_16;
    }
    v16 = v13 & 0x3F;
    v17 = v13 & 0xFFC0;
    while (((v15 >> v16) & 1) == 0)
    {
      ++v13;
      if (++v16 == 64)
      {
        LOWORD(v13) = v17;
        goto LABEL_2;
      }
    }
    if ((__int16)v13 > 4095)
    {
LABEL_11:
      v18 = 0;
    }
    else
    {
      while (1)
      {
        v18 = (__int16)v13;
        if (*(_QWORD *)(v14 + 8 * ((__int16)v13 >> 6)))
          break;
        v13 += 64;
        if (v18 >= 4032)
          goto LABEL_11;
      }
      ++v13;
    }
    *(_DWORD *)&v11[4 * v12++] = v18 | a3;
    if (v12 == a2)
    {
      v19 = a4(v11, a2, a5);
      v12 = 0;
      if ((v19 & 1) != 0)
        break;
    }
  }
  while ((__int16)v13 < 4096);
LABEL_16:
  if (v12)
    a4(v11, v12, a5);
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::IsEmpty(uint64_t a1)
{
  int v1;
  unint64_t v2;
  uint64_t v3;

  LOWORD(v1) = 0;
  while (1)
  {
    v2 = *(_QWORD *)(a1 + 8 + 8 * ((__int16)v1 >> 6));
    if (v2)
      break;
LABEL_2:
    v1 = (__int16)(v1 + 64);
    if (v1 >= 4096)
      return 1;
  }
  v3 = v1 & 0x3F;
  LOWORD(v1) = v1 & 0xFFC0;
  while (((v2 >> v3) & 1) == 0)
  {
    if (++v3 == 64)
      goto LABEL_2;
  }
  return 0;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::GetRawCount()
{
  return 61;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 8))(a2, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1 + 8, 512);
}

void SIValueSet<unsigned int>::BitmapHolder::~BitmapHolder()
{
  JUMPOUT(0x1BCCB06A4);
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::valueIterator(uint64_t a1, int a2, uint64_t a3)
{
  *(_QWORD *)a3 = off_1E6E2A358;
  *(_DWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = a1 + 8;
  *(_WORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = a2;
  return a3;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::BitmapIterator::nextKey(uint64_t a1)
{
  unsigned int v1;
  int v2;
  uint64_t v3;
  int v4;
  int v6;

  v1 = *(_DWORD *)(a1 + 32);
  v2 = *(__int16 *)(a1 + 24);
  if (v2 > 4095)
    return v1;
  v3 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v4 = (__int16)v2;
    if (*(_QWORD *)(v3 + 8 * ((__int16)v2 >> 6)))
      break;
    LOWORD(v2) = v2 + 64;
    *(_WORD *)(a1 + 24) = v2;
    if (v4 >= 4032)
      return v1;
  }
  v6 = *(_DWORD *)(a1 + 8);
  *(_WORD *)(a1 + 24) = v2 + 1;
  return v6 | (__int16)v2 | v1;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::BitmapIterator::hasMore(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(__int16 *)(a1 + 24);
  if (v1 > 4095)
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v3 = *(_QWORD *)(v2 + 8 * ((__int16)v1 >> 6));
    if (v3)
      break;
    v1 += 64;
    *(_WORD *)(a1 + 24) = v1;
LABEL_9:
    if ((__int16)v1 >= 4096)
      return 0;
  }
  v4 = v1 & 0x3F;
  while (((v3 >> v4) & 1) == 0)
  {
    *(_WORD *)(a1 + 24) = ++v1;
    if (++v4 == 64)
      goto LABEL_9;
  }
  return 1;
}

void SIValueSet<unsigned int>::BitmapHolder::BitmapIterator::~BitmapIterator()
{
  JUMPOUT(0x1BCCB06A4);
}

uint64_t SIValueSet<unsigned int>::FlatContextWithPfx::nextKey(int **a1)
{
  int v1;
  int v2;
  char *v4;
  char *v5;
  const char *v6;

  v1 = *(*a1)++;
  v2 = *((_DWORD *)a1 + 5);
  if ((v2 & v1) != *((_DWORD *)a1 + 4))
  {
    v4 = __si_assert_copy_extra_268();
    v5 = v4;
    v6 = "";
    if (v4)
      v6 = v4;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 172, "(key & fMask) == fPfx", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v1 & ~v2;
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::AddKey(uint64_t a1, int a2, int a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  __int16 *v6;
  uint64_t v7;
  unint64_t v8;
  __int16 *v9;
  int v10;
  __int16 v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  __int16 *v17;
  int v18;
  unsigned __int16 v19;
  uint64_t v20;
  __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  BOOL v27;
  unsigned int v28;
  unint64_t v29;
  char v30;
  int *v31;
  uint64_t v32;
  int *v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  int v40;
  int *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  int v48;
  int v49;
  BOOL v50;
  _WORD *v51;
  unint64_t v52;
  char *v53;
  char *v54;
  const char *v55;
  char *v56;
  const char *v57;
  int v58;
  int v59;
  char *v61;
  char *v62;
  const char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  const char *v67;
  int v68;
  _WORD *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  __int16 *v74;
  __int16 *v75;
  int v76;

  LOWORD(v3) = a3 & a2;
  v76 = a3 & a2;
  v4 = *(unsigned __int16 *)(a1 + 8);
  v5 = a1 + 10 + 2 * v4;
  v6 = (__int16 *)(a1 + 10);
  if (v4 >= 3)
  {
    v7 = 2 * v4;
    v8 = a1 + 10 + 2 * v4;
    v6 = (__int16 *)(a1 + 10);
    do
    {
      v9 = &v6[v7 >> 2];
      v10 = *v9;
      if (v10 < 0)
      {
        v11 = *--v9;
        LOWORD(v10) = v11;
      }
      if (v9 <= v6)
        break;
      if ((unsigned __int16)v10 == (unsigned __int16)v3)
      {
        v6 = v9;
        break;
      }
      if ((unsigned __int16)v10 > (unsigned __int16)v3)
        v8 = (unint64_t)v9;
      else
        v6 = v9;
      v7 = v8 - (_QWORD)v6;
    }
    while (v8 > (unint64_t)v6 && (unint64_t)v7 > 5);
  }
  v68 = a1 + 10;
  v13 = 0;
  v14 = 0;
  v15 = a1 + 136;
  v16 = &v76;
  v17 = v6;
  v18 = 1;
  while (2)
  {
    v19 = 0;
    v20 = 0;
    v21 = v6;
    while (2)
    {
      if ((unint64_t)v21 >= v5)
      {
        v41 = v16++;
        if (!v20)
          goto LABEL_73;
LABEL_61:
        v42 = v20 + v19;
        if (v42 < (unsigned __int16)v3 || (unint64_t)(unsigned __int16)v3 + 1 < v19)
        {
          v40 = 1;
          v16 = v41;
          goto LABEL_81;
        }
        v43 = v19;
        v44 = v20 + v19 - 1;
        v45 = v44 + (unsigned __int16)v3;
        if (v19 > (unsigned __int16)v3)
          v19 = v3;
        if (v43 <= (unsigned __int16)v3)
        {
          v46 = 0;
        }
        else
        {
          v20 = v44;
          v46 = 1;
        }
        if (v43 > (unsigned __int16)v3)
          v42 = v45;
        if (v42 > (unsigned __int16)v3)
        {
          v47 = v46;
        }
        else
        {
          v20 = v20 + (unsigned __int16)v3 + 1 - v42;
          v47 = 1;
        }
        while (*(unsigned __int16 *)v41 == (unsigned __int16)v3)
        {
          v14 += v47;
          if (v41 >= &v76)
          {
            v40 = 0;
            v13 = (v13 + 1);
            goto LABEL_81;
          }
          v48 = *v16++;
          LOWORD(v3) = v48;
          ++v18;
          v13 = (v13 + 1);
          v41 = v16 - 1;
          if (v20)
            goto LABEL_61;
LABEL_73:
          v20 = 1;
          v19 = v3;
          v47 = 1;
        }
LABEL_110:
        v53 = __si_assert_copy_extra_268();
        v54 = v53;
        v55 = "";
        if (v53)
          v55 = v53;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v55);
LABEL_113:
        free(v54);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v28 = (unsigned __int16)*v21;
      if (v28 <= (unsigned __int16)v3)
      {
        v40 = 1;
        goto LABEL_83;
      }
      v31 = v16 + 1;
      v32 = v13;
      while (1)
      {
        v13 = v32;
        v16 = v31;
        v33 = v31 - 1;
        if (!v20)
        {
          v20 = 1;
          v19 = v3;
          v39 = 1;
          goto LABEL_56;
        }
        v34 = v20 + v19;
        if (v34 < (unsigned __int16)v3 || (unint64_t)(unsigned __int16)v3 + 1 < v19)
          break;
        v35 = v19;
        v36 = v20 + v19 - 1;
        v37 = v36 + (unsigned __int16)v3;
        if (v19 > (unsigned __int16)v3)
          v19 = v3;
        if (v35 <= (unsigned __int16)v3)
        {
          v38 = 0;
        }
        else
        {
          v20 = v36;
          v38 = 1;
        }
        if (v35 > (unsigned __int16)v3)
          v34 = v37;
        if (v34 > (unsigned __int16)v3)
        {
          v39 = v38;
        }
        else
        {
          v20 = v20 + (unsigned __int16)v3 + 1 - v34;
          v39 = 1;
        }
LABEL_56:
        if (*(unsigned __int16 *)v33 != (unsigned __int16)v3)
          goto LABEL_110;
        v14 += v39;
        if (v33 >= &v76)
        {
          v40 = 0;
          v13 = (v13 + 1);
          goto LABEL_81;
        }
        v31 = v16 + 1;
        v3 = *v16;
        ++v18;
        v32 = (v13 + 1);
        if (v28 <= (unsigned __int16)*v16)
        {
          v40 = 1;
          v13 = (v13 + 1);
          goto LABEL_81;
        }
      }
      v40 = 1;
      v16 = v33;
LABEL_81:
      if ((unint64_t)v21 >= v5)
        goto LABEL_94;
      v28 = (unsigned __int16)*v21;
LABEL_83:
      if ((unint64_t)(v21 + 1) >= v5)
      {
        v22 = 1;
        v23 = 1;
        if (!v20)
          goto LABEL_35;
      }
      else
      {
        v49 = v21[1];
        v50 = v49 >= 0;
        if (v49 < 0)
          v22 = 2;
        else
          v22 = 1;
        if (v50)
          v23 = 1;
        else
          v23 = (v21[1] & 0x7FFF) + 1;
        if (!v20)
          goto LABEL_35;
      }
      v24 = v23 + v28;
      if (v20 + (unint64_t)v19 < v28 || v24 < v19)
      {
LABEL_94:
        LOWORD(v28) = v19;
        v23 = v20;
        break;
      }
      v26 = v20 - v23 + v19 + v28;
      v27 = v19 > v28;
      if (v19 < v28)
        v28 = v19;
      if (v27)
      {
        v20 = v20 - v23 + v19;
        v29 = v26;
      }
      else
      {
        v29 = v20 + v19;
      }
      if (v24 > v29)
        v23 = v20 + v24 - v29;
      else
        v23 = v20;
LABEL_35:
      v21 += v22;
      if (v23 + (unint64_t)v28 >= (unsigned __int16)v3)
        v30 = v40;
      else
        v30 = 0;
      v19 = v28;
      v20 = v23;
      if ((v30 & 1) != 0)
        continue;
      break;
    }
    if (v23 == 1)
    {
      if (v17 < v21)
      {
        v6 = v21;
      }
      else
      {
        if (v5 + 4 > v15)
        {
LABEL_132:
          v65 = __si_assert_copy_extra_268();
          v66 = v65;
          if (v65)
            v67 = v65;
          else
            v67 = "";
          __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v67);
          free(v66);
          goto LABEL_129;
        }
        v6 = (__int16 *)(v15 - (v5 - (_QWORD)v21));
        if ((__int16 *)v5 == v21)
        {
          v5 = v15;
        }
        else
        {
          v72 = (void *)(v15 - (v5 - (_QWORD)v21));
          v74 = v17;
          v52 = v15;
          memmove(v72, v21, v5 - (_QWORD)v21);
          v6 = (__int16 *)v72;
          v17 = v74;
          v15 = v52;
          v5 = v52;
        }
      }
      *v17++ = v28;
      if (!v40)
        goto LABEL_116;
      goto LABEL_19;
    }
    if (v23)
    {
      v51 = v17 + 1;
      if (v17 + 1 < v21)
      {
        v6 = v21;
        goto LABEL_107;
      }
      if (v5 + 4 > v15)
        goto LABEL_132;
      v6 = (__int16 *)(v15 - (v5 - (_QWORD)v21));
      if ((__int16 *)v5 != v21)
      {
        v73 = (void *)(v15 - (v5 - (_QWORD)v21));
        v75 = v17;
        v70 = v17 + 1;
        v71 = v15;
        memmove(v73, v21, v5 - (_QWORD)v21);
        v51 = v70;
        v15 = v71;
        v6 = (__int16 *)v73;
        v17 = v75;
      }
      v5 = v15;
LABEL_107:
      *v17 = v28;
      v17[1] = (v23 - 1) | 0x8000;
      v17 = v51 + 1;
      if (!v40)
      {
LABEL_116:
        v21 = v6;
        goto LABEL_122;
      }
LABEL_19:
      if ((unint64_t)v17 + v5 - (_QWORD)v6 + 4 > v15)
        goto LABEL_118;
      continue;
    }
    break;
  }
  v6 = v21;
  if (!v40)
  {
LABEL_122:
    v6 = v21;
    if ((_DWORD)v13 == v18)
      goto LABEL_123;
    v61 = __si_assert_copy_extra_268();
    v62 = v61;
    v63 = "";
    if (v61)
      v63 = v61;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v63);
    free(v62);
    if (!__valid_fs(-1))
    {
      v64 = 3072;
LABEL_131:
      *(_DWORD *)v64 = -559038737;
      abort();
    }
LABEL_129:
    v64 = 2989;
    goto LABEL_131;
  }
LABEL_118:
  if ((int)v13 >= v18)
  {
    v56 = __si_assert_copy_extra_268();
    v54 = v56;
    v57 = "";
    if (v56)
      v57 = v56;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v57);
    goto LABEL_113;
  }
LABEL_123:
  v58 = v5 - (_DWORD)v6;
  if (v5 > (unint64_t)v6)
  {
    v59 = (int)v17;
    memmove(v17, v6, v5 - (_QWORD)v6);
    LODWORD(v17) = v59 + v58;
  }
  *(_WORD *)(a1 + 8) = ((_DWORD)v17 - v68) >> 1;
  return v14 != 0;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::AddSortedKeysWithContext(uint64_t a1, int **a2, uint64_t a3)
{
  unsigned __int16 v6;
  unsigned __int16 v7;
  unint64_t v8;
  unint64_t v9;
  __int16 *v10;
  uint64_t v11;
  unint64_t v12;
  __int16 *v13;
  int v14;
  __int16 v15;
  uint64_t result;
  int v18;
  unint64_t v19;
  __int16 *v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  __int16 *v25;
  char v26;
  uint64_t v27;
  unsigned __int16 v28;
  unint64_t v29;
  int v30;
  int v31;
  int *v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  _WORD *v48;
  __int16 *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  const char *v53;
  char *v54;
  char *v55;
  const char *v56;
  uint64_t v57;
  char *v58;
  const char *v59;
  int v60;
  uint64_t v61;
  char *v62;
  const char *v63;
  char *v64;
  char *v65;
  const char *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  __int16 *v71;
  uint64_t v72;

  if (*a2 >= a2[1] || (*((_DWORD *)a2 + 5) & **a2) != *((_DWORD *)a2 + 4))
    return 0;
  v6 = SIValueSet<unsigned int>::FlatContextWithPfx::peek(a2);
  v7 = v6;
  v8 = *(unsigned __int16 *)(a1 + 8);
  v9 = a1 + 10 + 2 * v8;
  v10 = (__int16 *)(a1 + 10);
  if (v8 >= 3)
  {
    v11 = 2 * v8;
    v12 = a1 + 10 + 2 * v8;
    v10 = (__int16 *)(a1 + 10);
    do
    {
      v13 = &v10[v11 >> 2];
      v14 = *v13;
      if (v14 < 0)
      {
        v15 = *--v13;
        LOWORD(v14) = v15;
      }
      if (v13 <= v10)
        break;
      if ((unsigned __int16)v14 == v6)
      {
        v10 = v13;
        break;
      }
      if ((unsigned __int16)v14 > v6)
        v12 = (unint64_t)v13;
      else
        v10 = v13;
      v11 = v12 - (_QWORD)v10;
    }
    while (v12 > (unint64_t)v10 && (unint64_t)v11 > 5);
  }
  v67 = a1;
  v68 = a1 + 10;
  v18 = 0;
  result = 0;
  v19 = a1 + 136;
  v20 = v10;
  v21 = 1;
  v72 = a3;
  v70 = v19;
  while (2)
  {
    v71 = v20;
    LOWORD(v23) = 0;
    v24 = 0;
    v25 = v10;
    while (1)
    {
      v27 = v24;
      v28 = v23;
      if ((unint64_t)v25 >= v9)
        break;
LABEL_29:
      v23 = (unsigned __int16)*v25;
      if (v23 > v7)
        break;
      v30 = 1;
LABEL_53:
      if ((unint64_t)(v25 + 1) >= v9)
      {
        v42 = 1;
        v24 = 1;
        if (v27)
          goto LABEL_60;
      }
      else
      {
        v39 = v25[1];
        v40 = v39 & 0x7FFF;
        v41 = v39 >= 0;
        v42 = 2;
        if (v41)
        {
          v42 = 1;
          v24 = 1;
        }
        else
        {
          v24 = v40 + 1;
        }
        if (v27)
        {
LABEL_60:
          v43 = v24 + v23;
          if (v27 + (unint64_t)v28 < v23 || v43 < v28)
            goto LABEL_73;
          v45 = v27 - v24 + v28;
          v46 = v45 + v23;
          v47 = v28 > v23;
          if (v28 < v23)
            v23 = v28;
          if (!v47)
          {
            v45 = v27;
            v46 = v27 + v28;
          }
          if (v43 > v46)
            v24 = v45 + v43 - v46;
          else
            v24 = v45;
        }
      }
      v25 += v42;
      if (v24 + (unint64_t)v23 >= v7)
        v26 = v30;
      else
        v26 = 0;
      if ((v26 & 1) == 0)
        goto LABEL_74;
    }
    while (2)
    {
      if (!v27)
      {
        v27 = 1;
        v28 = v7;
LABEL_39:
        v31 = 1;
        goto LABEL_40;
      }
      v29 = v27 + v28;
      v30 = 1;
      if (v29 < v7 || (unint64_t)v7 + 1 < v28)
        goto LABEL_51;
      if (v28 <= v7)
      {
        v31 = 0;
        if (v29 > v7)
          goto LABEL_40;
        goto LABEL_38;
      }
      v27 = v27 + v28 - 1;
      v29 = v27 + v7;
      v31 = 1;
      v28 = v7;
      if (v29 <= v7)
      {
LABEL_38:
        v27 = v27 + v7 + 1 - v29;
        goto LABEL_39;
      }
LABEL_40:
      v32 = *a2 + 1;
      v33 = **a2;
      *a2 = v32;
      v34 = *((_DWORD *)a2 + 5);
      if ((v34 & v33) != *((_DWORD *)a2 + 4))
      {
        v51 = __si_assert_copy_extra_268();
        v52 = v51;
        v53 = "";
        if (v51)
          v53 = v51;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 172, "(key & fMask) == fPfx", v53);
LABEL_92:
        free(v52);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (v7 != (unsigned __int16)(v33 & ~(_WORD)v34))
      {
        v54 = __si_assert_copy_extra_268();
        v55 = v54;
        v56 = "";
        if (v54)
          v56 = v54;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v56);
        goto LABEL_97;
      }
      if (v31)
      {
        ++result;
      }
      else if (v72)
      {
        v35 = result;
        v36 = v9;
        SIValueSet<unsigned int>::SIValueSetInsert(*(unsigned int **)(v72 + 8), *(_DWORD *)v72 | v7);
        result = v35;
        v9 = v36;
        v32 = *a2;
      }
      if (v32 < a2[1])
      {
        v37 = *v32;
        v38 = *((_DWORD *)a2 + 5);
        if ((v38 & v37) == *((_DWORD *)a2 + 4))
        {
          v7 = v37 & ~(_WORD)v38;
          ++v21;
          ++v18;
          if ((unint64_t)v25 < v9)
            goto LABEL_29;
          continue;
        }
      }
      break;
    }
    v30 = 0;
    ++v18;
LABEL_51:
    if ((unint64_t)v25 < v9)
    {
      v23 = (unsigned __int16)*v25;
      goto LABEL_53;
    }
LABEL_73:
    LOWORD(v23) = v28;
    v24 = v27;
LABEL_74:
    if (v24 == 1)
    {
      v49 = v71;
      if (v71 >= v25)
      {
        if (v9 + 4 > v70)
          goto LABEL_114;
        v10 = (__int16 *)(v70 - (v9 - (_QWORD)v25));
        if ((__int16 *)v9 != v25)
        {
          v50 = result;
          memmove((void *)(v70 - (v9 - (_QWORD)v25)), v25, v9 - (_QWORD)v25);
          result = v50;
          v49 = v71;
        }
        v9 = v70;
        v22 = v70;
      }
      else
      {
        v10 = v25;
        v22 = v70;
      }
      *v49 = v23;
      v20 = v49 + 1;
      if (v30)
        goto LABEL_22;
      goto LABEL_88;
    }
    v20 = v71;
    if (v24)
    {
      v48 = v71 + 1;
      if (v71 + 1 < v25)
      {
        v10 = v25;
        v22 = v70;
        goto LABEL_21;
      }
      if (v9 + 4 <= v70)
      {
        v10 = (__int16 *)(v70 - (v9 - (_QWORD)v25));
        if ((__int16 *)v9 != v25)
        {
          v69 = result;
          memmove((void *)(v70 - (v9 - (_QWORD)v25)), v25, v9 - (_QWORD)v25);
          v48 = v71 + 1;
          result = v69;
        }
        v9 = v70;
        v22 = v70;
LABEL_21:
        *v71 = v23;
        v71[1] = (v24 - 1) | 0x8000;
        v20 = v48 + 1;
        if (v30)
        {
LABEL_22:
          if ((unint64_t)v20 + v9 - (_QWORD)v10 + 4 > v22)
            goto LABEL_103;
          continue;
        }
LABEL_88:
        v25 = v10;
LABEL_107:
        v10 = v25;
        if (v18 == v21)
          goto LABEL_108;
        v62 = __si_assert_copy_extra_268();
        v55 = v62;
        v63 = "";
        if (v62)
          v63 = v62;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v63);
LABEL_97:
        free(v55);
        if (__valid_fs(-1))
LABEL_98:
          v57 = 2989;
        else
          v57 = 3072;
        *(_DWORD *)v57 = -559038737;
        abort();
      }
LABEL_114:
      v64 = __si_assert_copy_extra_268();
      v65 = v64;
      if (v64)
        v66 = v64;
      else
        v66 = "";
      __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v66);
      free(v65);
      goto LABEL_98;
    }
    break;
  }
  v10 = v25;
  if (!v30)
    goto LABEL_107;
LABEL_103:
  if (v18 >= v21)
  {
    v58 = __si_assert_copy_extra_268();
    v52 = v58;
    v59 = "";
    if (v58)
      v59 = v58;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v59);
    goto LABEL_92;
  }
LABEL_108:
  v60 = v9 - (_DWORD)v10;
  if (v9 > (unint64_t)v10)
  {
    v61 = result;
    memmove(v20, v10, v9 - (_QWORD)v10);
    result = v61;
    LODWORD(v20) = (_DWORD)v20 + v60;
  }
  *(_WORD *)(v67 + 8) = ((_DWORD)v20 - v68) >> 1;
  return result;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::ContainsKey(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  unsigned int v3;
  __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int16 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v13;
  uint64_t result;
  unsigned __int16 *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  v3 = a2 & a3 & 0x7FFF;
  v4 = (__int16 *)(a1 + 10);
  v5 = *(unsigned __int16 *)(a1 + 8);
  v6 = a1 + 10 + 2 * v5;
  if (v5 < 3)
  {
LABEL_15:
    if ((unint64_t)v4 >= v6)
      return 0;
  }
  else
  {
    v7 = 2 * v5;
    v8 = a1 + 10 + 2 * v5;
    while (1)
    {
      v9 = &v4[v7 >> 2];
      if (*v9 < 0)
      {
        v11 = (unsigned __int16)*--v9;
        v10 = v11;
        if (v9 <= v4)
          goto LABEL_15;
      }
      else
      {
        v10 = (unsigned __int16)*v9;
        if (v9 <= v4)
          goto LABEL_15;
      }
      if (v10 == v3)
        break;
      if (v10 > v3)
        v8 = (unint64_t)v9;
      else
        v4 = v9;
      v7 = v8 - (_QWORD)v4;
      if (v8 <= (unint64_t)v4 || (unint64_t)v7 <= 5)
        goto LABEL_15;
    }
    v4 = v9;
    if ((unint64_t)v9 >= v6)
      return 0;
  }
  v13 = (unsigned __int16)*v4;
  if (v3 != v13)
  {
    v15 = (unsigned __int16 *)(v4 + 1);
    do
    {
      if ((v13 & 0x8000) != 0)
      {
        v17 = *(v15 - 2);
        v18 = v17 + (v13 & 0x7FFF);
        if (v3 >= v17 && v3 <= v18)
          return 1;
        if ((unint64_t)v15 >= v6)
          return 0;
      }
      else
      {
        result = 0;
        if (v3 < v13 || (unint64_t)v15 >= v6)
          return result;
      }
      v16 = *v15++;
      v13 = v16;
    }
    while (v3 != v16);
  }
  return 1;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::CloseKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  __int16 *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int16 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;

  v3 = *(unsigned __int16 *)(a1 + 8);
  if (!*(_WORD *)(a1 + 8))
    return 0;
  v4 = a2 & a3 & 0x7FFF;
  v5 = (__int16 *)(a1 + 10);
  v6 = a1 + 10 + 2 * v3;
  if (v3 < 3)
  {
LABEL_16:
    if ((unint64_t)v5 >= v6)
    {
LABEL_31:
      v20 = a1 + 2 * v3;
      v17 = *(unsigned __int16 *)(v20 + 8);
      if (*(__int16 *)(v20 + 8) < 0)
        return (v17 & 0x7FFF) + *(unsigned __int16 *)(v20 + 6);
      else
        return v17;
    }
  }
  else
  {
    v7 = 2 * v3;
    v8 = a1 + 10 + 2 * v3;
    while (1)
    {
      v9 = &v5[v7 >> 2];
      if (*v9 < 0)
      {
        v11 = (unsigned __int16)*--v9;
        v10 = v11;
        if (v9 <= v5)
          goto LABEL_16;
      }
      else
      {
        v10 = (unsigned __int16)*v9;
        if (v9 <= v5)
          goto LABEL_16;
      }
      if (v10 == v4)
        break;
      if (v10 > v4)
        v8 = (unint64_t)v9;
      else
        v5 = v9;
      v7 = v8 - (_QWORD)v5;
      if (v8 <= (unint64_t)v5 || (unint64_t)v7 <= 5)
        goto LABEL_16;
    }
    v5 = v9;
    if ((unint64_t)v9 >= v6)
      goto LABEL_31;
  }
  v13 = (unsigned __int16 *)v5;
  while (1)
  {
    v18 = *v13++;
    v17 = v18;
    if (v4 == v18)
      return a2 & a3 & 0x7FFF;
    if ((v17 & 0x8000) != 0)
    {
      v14 = (unsigned __int16)*(v5 - 1);
      v15 = v14 + (v17 & 0x7FFF);
      if (v4 >= v14 && v4 <= v15)
        return a2 & a3 & 0x7FFF;
    }
    else if (v4 < v17)
    {
      return v17;
    }
    v5 = (__int16 *)v13;
    if ((unint64_t)v13 >= v6)
      goto LABEL_31;
  }
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::RemoveKey(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int16 *v8;
  uint64_t v9;
  unint64_t v10;
  __int16 *v11;
  int v12;
  __int16 v13;
  unsigned int v15;
  _WORD *v16;
  unsigned int v17;
  uint64_t result;
  unsigned int v19;
  unsigned int v20;
  int v22;
  size_t v23;
  const void *v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  _WORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int16 v33;
  __int16 v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  const char *v39;

  v4 = a2 & a3 & 0x7FFF;
  v5 = a1 + 10;
  v6 = *(unsigned __int16 *)(a1 + 8);
  v7 = a1 + 10 + 2 * v6;
  if (v6 >= 3)
  {
    v9 = 2 * v6;
    v10 = a1 + 10 + 2 * v6;
    v8 = (__int16 *)(a1 + 10);
    do
    {
      v11 = &v8[v9 >> 2];
      v12 = *v11;
      if (v12 < 0)
      {
        v13 = *--v11;
        LOWORD(v12) = v13;
      }
      if (v11 <= v8)
        break;
      if (v4 == (unsigned __int16)v12)
      {
        v8 = v11;
        if ((unint64_t)v11 >= v7)
          return 0;
        goto LABEL_17;
      }
      if ((unsigned __int16)v12 > v4)
        v10 = (unint64_t)v11;
      else
        v8 = v11;
      v9 = v10 - (_QWORD)v8;
    }
    while (v10 > (unint64_t)v8 && (unint64_t)v9 > 5);
    if ((unint64_t)v8 >= v7)
      return 0;
  }
  else
  {
    v8 = (__int16 *)(a1 + 10);
    if (v5 >= v7)
      return 0;
  }
LABEL_17:
  v16 = v8 + 1;
  v15 = (unsigned __int16)*v8;
  if (v4 == v15)
  {
    if ((unint64_t)v16 >= v7)
      goto LABEL_46;
    goto LABEL_35;
  }
  while (1)
  {
    if ((v15 & 0x8000) == 0)
    {
      result = 0;
      if (v4 < v15 || (unint64_t)v16 >= v7)
        return result;
      goto LABEL_20;
    }
    v19 = (unsigned __int16)*(v16 - 2);
    v20 = (unsigned __int16)(v19 + (v15 & 0x7FFF));
    if (v4 > v19 && v4 <= v20)
      break;
    if ((unint64_t)v16 >= v7)
      return 0;
LABEL_20:
    v17 = (unsigned __int16)*v16++;
    v15 = v17;
    if (v4 == v17)
    {
      v8 = v16 - 1;
      if ((unint64_t)v16 >= v7)
        goto LABEL_46;
LABEL_35:
      v22 = (__int16)*v16;
      if ((v22 & 0x80000000) == 0)
      {
        v23 = v7 - (_QWORD)v16;
        v24 = v16;
LABEL_39:
        memmove(v8, v24, v23);
        v25 = *(_WORD *)(a1 + 8) - 1;
        goto LABEL_47;
      }
      *v8 = v15 + 1;
      if ((v22 & 0x7FFF) == 1)
      {
        v24 = v8 + 2;
        v23 = v7 - (_QWORD)(v8 + 2);
        v8 = v16;
        goto LABEL_39;
      }
      v26 = v22 - 1;
      goto LABEL_41;
    }
  }
  v28 = v16 - 1;
  if ((v15 & 0x7FFF) != 1)
  {
    if (v4 == v20)
    {
      *v28 = (v15 - 1) | 0x8000;
      return 1;
    }
    if (v4 == v19 + 1)
    {
      *v28 = v4 + 1;
      if (!(~v4 + v20))
        return 1;
      v29 = *(unsigned __int16 *)(a1 + 8);
      if (v29 < 0x3F)
      {
        v30 = (uint64_t)((uint64_t)v16 - v5) >> 1;
        if (v29 != v30)
        {
          memmove(v16 + 1, v16, 2 * (v29 - v30));
          LOWORD(v29) = *(_WORD *)(a1 + 8);
        }
        *(_WORD *)(a1 + 8) = v29 + 1;
        v26 = v20 + ~(_WORD)v4;
LABEL_41:
        v27 = v26 | 0x8000;
LABEL_42:
        *v16 = v27;
        return 1;
      }
    }
    else
    {
      *(v16 - 1) = (v4 + ~(_WORD)v19) | 0x8000;
      v31 = *(unsigned __int16 *)(a1 + 8);
      if (v31 < 0x3F)
      {
        v32 = (uint64_t)((uint64_t)v16 - v5) >> 1;
        if (v31 != v32)
        {
          memmove(v16 + 1, v16, 2 * (v31 - v32));
          LOWORD(v31) = *(_WORD *)(a1 + 8);
        }
        *(_WORD *)(a1 + 8) = v31 + 1;
        *v16 = v4 + 1;
        v33 = ~(_WORD)v4;
        v34 = v20 + ~(_WORD)v4;
        if (!((_WORD)v20 + v33))
          return 1;
        v35 = *(unsigned __int16 *)(a1 + 8);
        if (v35 < 0x3F)
        {
          ++v16;
          v36 = (uint64_t)((uint64_t)v28 - v5 + 4) >> 1;
          if (v35 != v36)
          {
            memmove(v28 + 3, v28 + 2, 2 * (v35 - v36));
            LOWORD(v35) = *(_WORD *)(a1 + 8);
          }
          *(_WORD *)(a1 + 8) = v35 + 1;
          v27 = v34 | 0x8000;
          goto LABEL_42;
        }
      }
    }
    v37 = __si_assert_copy_extra_268();
    v38 = v37;
    if (v37)
      v39 = v37;
    else
      v39 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 649, v39);
    free(v38);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if ((unint64_t)v16 < v7)
  {
    memmove(v16 - 1, v16, v7 - (_QWORD)v16);
    LOWORD(v6) = *(_WORD *)(a1 + 8);
  }
LABEL_46:
  v25 = v6 - 1;
LABEL_47:
  *(_WORD *)(a1 + 8) = v25;
  return 1;
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::Apply(uint64_t a1, uint64_t a2, int a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v9;
  size_t v10;
  char *v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unint64_t v14;
  unsigned __int16 v15;
  __int16 v16;
  uint64_t v17;
  int v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v9 = MEMORY[0x1E0C80A78](a1);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(unsigned __int16 *)(v9 + 8);
  if (v12 > 0x3F)
    return;
  v13 = (unsigned __int16 *)(v9 + 10);
  v14 = v9 + 10 + 2 * v12;
  bzero((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v15 = 0;
  v16 = 0;
LABEL_3:
  v17 = 0;
  while (v16)
  {
    --v16;
    ++v15;
LABEL_15:
    *(_DWORD *)&v11[4 * v17++] = v15 | a3;
    if (v17 == a2)
    {
      a4(v11, a2, a5);
      goto LABEL_3;
    }
  }
  if ((unint64_t)v13 < v14)
  {
    v15 = *v13;
    if ((unint64_t)(v13 + 1) >= v14)
    {
      v16 = 0;
      ++v13;
    }
    else
    {
      v18 = (__int16)v13[1];
      if (v18 < 0)
        v16 = v18 & 0x7FFF;
      else
        v16 = 0;
      if (v18 < 0)
        v13 += 2;
      else
        ++v13;
    }
    goto LABEL_15;
  }
  if (v17)
    a4(v11, v17, a5);
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::IsEmpty(uint64_t a1)
{
  return *(_WORD *)(a1 + 8) == 0;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::GetRawCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8);
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, 2);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 8))(a2, *(unsigned __int16 *)(a1 + 8));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1 + 10, 2 * *(unsigned __int16 *)(a1 + 8));
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::~RLEKeyHolder()
{
  JUMPOUT(0x1BCCB06A4);
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::valueIterator(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(unsigned __int16 *)(a1 + 8);
  *(_QWORD *)a3 = off_1E6E2A498;
  *(_QWORD *)(a3 + 8) = a1 + 10;
  *(_QWORD *)(a3 + 16) = a1 + 10 + 2 * v3;
  *(_DWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = a2;
  return a3;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::RLEKeyIterator::nextKey(uint64_t a1)
{
  int v1;
  unsigned __int16 v2;
  unsigned __int16 *v3;
  unint64_t v4;
  int v5;

  v1 = *(_DWORD *)(a1 + 32);
  if (*(_WORD *)(a1 + 26))
  {
    --*(_WORD *)(a1 + 26);
    v2 = *(_WORD *)(a1 + 24) + 1;
    *(_WORD *)(a1 + 24) = v2;
  }
  else
  {
    v3 = *(unsigned __int16 **)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 16);
    v2 = *v3;
    *(_QWORD *)(a1 + 8) = v3 + 1;
    *(_WORD *)(a1 + 24) = v2;
    if ((unint64_t)(v3 + 1) < v4)
    {
      v5 = (__int16)v3[1];
      if (v5 < 0)
      {
        *(_QWORD *)(a1 + 8) = v3 + 2;
        *(_WORD *)(a1 + 26) = v5 & 0x7FFF;
      }
    }
  }
  return v1 | v2;
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::RLEKeyIterator::hasMore(uint64_t a1)
{
  return *(_WORD *)(a1 + 26) || *(_QWORD *)(a1 + 8) < *(_QWORD *)(a1 + 16);
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::RLEKeyIterator::~RLEKeyIterator()
{
  JUMPOUT(0x1BCCB06A4);
}

uint64_t SIValueSet<unsigned int>::FlatContextWithPfx::peek(int **a1)
{
  int v1;
  int v2;
  char *v4;
  char *v5;
  const char *v6;

  v1 = **a1;
  v2 = *((_DWORD *)a1 + 5);
  if ((v2 & v1) != *((_DWORD *)a1 + 4))
  {
    v4 = __si_assert_copy_extra_268();
    v5 = v4;
    v6 = "";
    if (v4)
      v6 = v4;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 164, "(key & fMask) == fPfx", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v1 & ~v2;
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::AddKey(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  unsigned int *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  int *v33;
  uint64_t v34;
  int *v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int *v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  BOOL v55;
  _DWORD *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  const char *v60;
  char *v61;
  const char *v62;
  unint64_t v63;
  unsigned int *v64;
  char *v66;
  char *v67;
  const char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  const char *v72;
  uint64_t v73;
  _DWORD *v75;
  unint64_t v76;
  void *v77;
  void *v78;
  unsigned int *v79;
  unsigned int *v80;
  int v81;

  v3 = a3 & a2;
  v81 = a3 & a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = a1 + 12 + 4 * v4;
  if (v4 >= 3)
  {
    v7 = 4 * v4;
    v8 = a1 + 12 + 4 * v4;
    v6 = (unsigned int *)(a1 + 12);
    do
    {
      v9 = &v6[v7 >> 3];
      v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        v11 = *--v9;
        v10 = v11;
      }
      if (v9 <= v6)
        break;
      if (v10 == v3)
      {
        v6 = v9;
        break;
      }
      if (v10 > v3)
        v8 = (unint64_t)v9;
      else
        v6 = v9;
      v7 = v8 - (_QWORD)v6;
    }
    while (v8 > (unint64_t)v6 && (unint64_t)v7 > 0xB);
  }
  else
  {
    v6 = (unsigned int *)(a1 + 12);
  }
  v73 = a1 + 12;
  v13 = 0;
  v14 = 0;
  v15 = a1 + 264;
  v16 = &v81;
  v17 = v6;
  v18 = 1;
  while (2)
  {
    v19 = 0;
    v20 = 0;
    v21 = v6;
    while (1)
    {
      if ((unint64_t)v21 >= v5)
      {
        v44 = v16++;
        if (!v20)
        {
          while (1)
          {
            v20 = 1;
            v19 = v3;
            v51 = 1;
LABEL_82:
            if (*v44 != v3)
              break;
            v14 += v51;
            if (v44 >= &v81)
            {
              v43 = 0;
              v34 = (v13 + 1);
              if ((unint64_t)v21 >= v5)
                goto LABEL_105;
              goto LABEL_95;
            }
            v52 = *v16++;
            v3 = v52;
            ++v18;
            v13 = (v13 + 1);
            v44 = v16 - 1;
            if (v20)
              goto LABEL_67;
          }
LABEL_122:
          v58 = __si_assert_copy_extra_268();
          v59 = v58;
          v60 = "";
          if (v58)
            v60 = v58;
          __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v60);
LABEL_125:
          free(v59);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
LABEL_67:
        v45 = v3 + 1;
        v46 = v20 + v19;
        if (v46 >= v3 && v45 >= v19)
        {
          v48 = v19 > v3;
          if (v19 <= v3)
          {
            v49 = 0;
          }
          else
          {
            v19 = v3;
            v20 = v46 - 1;
            v49 = 1;
          }
          if (v48)
            v46 = v46 - 1 + v3;
          v50 = v20 + v45 - v46;
          if (v46 > v3)
          {
            v51 = v49;
          }
          else
          {
            v20 = v50;
            v51 = 1;
          }
          goto LABEL_82;
        }
        v43 = 1;
        v16 = v44;
        v34 = v13;
        if ((unint64_t)v21 >= v5)
          goto LABEL_105;
      }
      else
      {
        v29 = *v21;
        if (v3 >= *v21)
        {
          v43 = 1;
          goto LABEL_96;
        }
        v33 = v16 + 1;
        while (1)
        {
          v34 = v13;
          v16 = v33;
          v35 = v33 - 1;
          if (v20)
          {
            v36 = v3 + 1;
            v37 = v20 + v19;
            if (v37 < v3 || v36 < v19)
            {
              v43 = 1;
              v16 = v35;
              if ((unint64_t)v21 >= v5)
                goto LABEL_105;
              goto LABEL_95;
            }
            v39 = v19 > v3;
            if (v19 <= v3)
            {
              v40 = 0;
            }
            else
            {
              v19 = v3;
              v20 = v37 - 1;
              v40 = 1;
            }
            if (v39)
              v37 = v37 - 1 + v3;
            v41 = v20 + v36 - v37;
            if (v37 > v3)
            {
              v42 = v40;
            }
            else
            {
              v20 = v41;
              v42 = 1;
            }
          }
          else
          {
            v20 = 1;
            v19 = v3;
            v42 = 1;
          }
          if (*v35 != v3)
            goto LABEL_122;
          v14 += v42;
          if (v35 >= &v81)
            break;
          v33 = v16 + 1;
          v3 = *v16;
          ++v18;
          v13 = (v13 + 1);
          if (*v16 >= v29)
          {
            v43 = 1;
            goto LABEL_92;
          }
        }
        v43 = 0;
LABEL_92:
        v34 = (v34 + 1);
        if ((unint64_t)v21 >= v5)
        {
LABEL_105:
          v13 = v34;
          goto LABEL_106;
        }
      }
LABEL_95:
      v29 = *v21;
      v13 = v34;
LABEL_96:
      if ((unint64_t)(v21 + 1) < v5)
        break;
      v22 = 1;
      v23 = 1;
      if (v20)
        goto LABEL_23;
LABEL_39:
      v21 += v22;
      if (v23 + (unint64_t)v29 >= v3)
        v32 = v43;
      else
        v32 = 0;
      v19 = v29;
      v20 = v23;
      if ((v32 & 1) == 0)
        goto LABEL_107;
    }
    v53 = v21[1];
    v54 = v53 & 0x7FFFFFFF;
    v55 = v53 >= 0;
    if (v53 < 0)
      v22 = 2;
    else
      v22 = 1;
    if (v55)
      v23 = 1;
    else
      v23 = v54 + 1;
    if (!v20)
      goto LABEL_39;
LABEL_23:
    v24 = v23 + v29;
    v25 = v20 + v19;
    if (v25 >= v29 && v24 >= v19)
    {
      v27 = v20 - v23 + v19 + v29;
      v28 = v19 > v29;
      if (v19 < v29)
        v29 = v19;
      if (v28)
        v30 = v20 - v23 + v19;
      else
        v30 = v20;
      if (v28)
        v31 = v27;
      else
        v31 = v25;
      if (v24 > v31)
        v23 = v30 + v24 - v31;
      else
        v23 = v30;
      goto LABEL_39;
    }
LABEL_106:
    v29 = v19;
    v23 = v20;
LABEL_107:
    if (v23 == 1)
    {
      if (v17 < v21)
      {
        v6 = v21;
        goto LABEL_19;
      }
      if (v5 + 8 <= v15)
      {
        v6 = (unsigned int *)(v15 - (v5 - (_QWORD)v21));
        if ((unsigned int *)v5 == v21)
        {
          v5 = v15;
        }
        else
        {
          v77 = (void *)(v15 - (v5 - (_QWORD)v21));
          v79 = v17;
          v57 = v15;
          memmove(v77, v21, v5 - (_QWORD)v21);
          v6 = (unsigned int *)v77;
          v17 = v79;
          v15 = v57;
          v5 = v57;
        }
LABEL_19:
        *v17++ = v29;
        if (!v43)
          goto LABEL_128;
        goto LABEL_20;
      }
LABEL_144:
      v70 = __si_assert_copy_extra_268();
      v71 = v70;
      if (v70)
        v72 = v70;
      else
        v72 = "";
      __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v72);
      free(v71);
LABEL_141:
      v69 = 2989;
LABEL_143:
      *(_DWORD *)v69 = -559038737;
      abort();
    }
    if (v23)
    {
      v56 = v17 + 1;
      if (v17 + 1 < v21)
      {
        v6 = v21;
        goto LABEL_119;
      }
      if (v5 + 8 > v15)
        goto LABEL_144;
      v6 = (unsigned int *)(v15 - (v5 - (_QWORD)v21));
      if ((unsigned int *)v5 != v21)
      {
        v78 = (void *)(v15 - (v5 - (_QWORD)v21));
        v80 = v17;
        v75 = v17 + 1;
        v76 = v15;
        memmove(v78, v21, v5 - (_QWORD)v21);
        v56 = v75;
        v15 = v76;
        v6 = (unsigned int *)v78;
        v17 = v80;
      }
      v5 = v15;
LABEL_119:
      *v17 = v29;
      v17[1] = (v23 - 1) | 0x80000000;
      v17 = v56 + 1;
      if (!v43)
      {
LABEL_128:
        v21 = v6;
        goto LABEL_134;
      }
LABEL_20:
      if ((unint64_t)v17 + v5 - (_QWORD)v6 + 8 > v15)
        goto LABEL_130;
      continue;
    }
    break;
  }
  v6 = v21;
  if (v43)
  {
LABEL_130:
    if ((int)v13 >= v18)
    {
      v61 = __si_assert_copy_extra_268();
      v59 = v61;
      v62 = "";
      if (v61)
        v62 = v61;
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v62);
      goto LABEL_125;
    }
  }
  else
  {
LABEL_134:
    v6 = v21;
    if ((_DWORD)v13 != v18)
    {
      v66 = __si_assert_copy_extra_268();
      v67 = v66;
      v68 = "";
      if (v66)
        v68 = v66;
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v68);
      free(v67);
      if (__valid_fs(-1))
        goto LABEL_141;
      v69 = 3072;
      goto LABEL_143;
    }
  }
  v63 = v5 - (_QWORD)v6;
  if (v5 > (unint64_t)v6)
  {
    v64 = v17;
    memmove(v17, v6, v5 - (_QWORD)v6);
    v17 = (unsigned int *)((char *)v64 + v63);
  }
  *(_DWORD *)(a1 + 8) = ((unint64_t)v17 - v73) >> 2;
  return v14 != 0;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::AddSortedKeysWithContext(uint64_t a1, int **a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v18;
  unint64_t v19;
  unsigned int *v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  char v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  int v31;
  int *v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  signed int v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  _DWORD *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  const char *v52;
  char *v53;
  char *v54;
  const char *v55;
  uint64_t v56;
  char *v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  const char *v62;
  char *v63;
  char *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int *v70;
  uint64_t v71;

  if (*a2 >= a2[1] || (*((_DWORD *)a2 + 5) & **a2) != *((_DWORD *)a2 + 4))
    return 0;
  v6 = SIValueSet<unsigned int>::FlatContextWithPfx::peek(a2);
  v7 = v6;
  v8 = (unsigned int *)(a1 + 12);
  v9 = *(unsigned int *)(a1 + 8);
  v10 = a1 + 12 + 4 * v9;
  v67 = a1 + 12;
  if (v9 >= 3)
  {
    v11 = 4 * v9;
    v12 = a1 + 12 + 4 * v9;
    do
    {
      v13 = (char *)&v8[v11 >> 3];
      v14 = *(_DWORD *)v13;
      if ((*(_DWORD *)v13 & 0x80000000) != 0)
      {
        v15 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        v14 = v15;
      }
      if (v13 <= (char *)v8)
        break;
      if (v14 == v6)
      {
        v8 = (unsigned int *)v13;
        break;
      }
      if (v14 > v6)
        v12 = (unint64_t)v13;
      else
        v8 = (unsigned int *)v13;
      v11 = v12 - (_QWORD)v8;
    }
    while (v12 > (unint64_t)v8 && (unint64_t)v11 > 0xB);
  }
  v71 = a3;
  v18 = 0;
  result = 0;
  v66 = a1;
  v19 = a1 + 264;
  v20 = v8;
  v21 = 1;
  v69 = v19;
  while (2)
  {
    v70 = v20;
    v23 = 0;
    v24 = 0;
    v25 = v8;
    while (1)
    {
      v27 = v24;
      v28 = v23;
      if ((unint64_t)v25 >= v10)
        break;
LABEL_29:
      v23 = *v25;
      if (v7 < *v25)
        break;
      v30 = 1;
LABEL_53:
      if ((unint64_t)(v25 + 1) >= v10)
      {
        v42 = 1;
        v24 = 1;
        if (v27)
          goto LABEL_60;
      }
      else
      {
        v39 = v25[1];
        v40 = v39 & 0x7FFFFFFF;
        v41 = v39 >= 0;
        v42 = 2;
        if (v41)
        {
          v42 = 1;
          v24 = 1;
        }
        else
        {
          v24 = v40 + 1;
        }
        if (v27)
        {
LABEL_60:
          v43 = v24 + v23;
          if (v27 + (unint64_t)v28 < v23 || v43 < v28)
            goto LABEL_73;
          v45 = v27 - v24 + v28;
          v46 = v45 + v23;
          v47 = v28 > v23;
          if (v28 < v23)
            v23 = v28;
          if (!v47)
          {
            v45 = v27;
            v46 = v27 + v28;
          }
          if (v43 > v46)
            v24 = v45 + v43 - v46;
          else
            v24 = v45;
        }
      }
      v25 += v42;
      if (v24 + (unint64_t)v23 >= v7)
        v26 = v30;
      else
        v26 = 0;
      if ((v26 & 1) == 0)
        goto LABEL_74;
    }
    while (2)
    {
      if (!v27)
      {
        v27 = 1;
        v28 = v7;
LABEL_39:
        v31 = 1;
        goto LABEL_40;
      }
      v29 = v27 + v28;
      v30 = 1;
      if (v29 < v7 || (unint64_t)v7 + 1 < v28)
        goto LABEL_51;
      if (v28 <= v7)
      {
        v31 = 0;
        if (v29 > v7)
          goto LABEL_40;
        goto LABEL_38;
      }
      v27 = v27 + v28 - 1;
      v29 = v27 + v7;
      v31 = 1;
      v28 = v7;
      if (v29 <= v7)
      {
LABEL_38:
        v27 = v27 + v7 + 1 - v29;
        goto LABEL_39;
      }
LABEL_40:
      v32 = *a2 + 1;
      v33 = **a2;
      *a2 = v32;
      v34 = *((_DWORD *)a2 + 5);
      if ((v34 & v33) != *((_DWORD *)a2 + 4))
      {
        v50 = __si_assert_copy_extra_268();
        v51 = v50;
        v52 = "";
        if (v50)
          v52 = v50;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 172, "(key & fMask) == fPfx", v52);
LABEL_92:
        free(v51);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if ((v33 & ~v34) != v7)
      {
        v53 = __si_assert_copy_extra_268();
        v54 = v53;
        v55 = "";
        if (v53)
          v55 = v53;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v55);
        goto LABEL_97;
      }
      if (v31)
      {
        ++result;
      }
      else if (v71)
      {
        v35 = result;
        v36 = v10;
        SIValueSet<unsigned int>::SIValueSetInsert(*(unsigned int **)(v71 + 8), *(_DWORD *)v71 | v7);
        result = v35;
        v10 = v36;
        v32 = *a2;
      }
      if (v32 < a2[1])
      {
        v37 = *v32;
        v38 = *((_DWORD *)a2 + 5);
        if ((v38 & v37) == *((_DWORD *)a2 + 4))
        {
          v7 = v37 & ~v38;
          ++v21;
          ++v18;
          if ((unint64_t)v25 < v10)
            goto LABEL_29;
          continue;
        }
      }
      break;
    }
    v30 = 0;
    ++v18;
LABEL_51:
    if ((unint64_t)v25 < v10)
    {
      v23 = *v25;
      goto LABEL_53;
    }
LABEL_73:
    v23 = v28;
    v24 = v27;
LABEL_74:
    if (v24 == 1)
    {
      if (v70 >= v25)
      {
        v22 = v69;
        if (v10 + 8 > v69)
          goto LABEL_114;
        v8 = (unsigned int *)(v69 - (v10 - (_QWORD)v25));
        if ((unsigned int *)v10 != v25)
        {
          v49 = result;
          memmove((void *)(v69 - (v10 - (_QWORD)v25)), v25, v10 - (_QWORD)v25);
          result = v49;
          v22 = v69;
        }
        v10 = v22;
      }
      else
      {
        v8 = v25;
        v22 = v69;
      }
      *v70 = v23;
      v20 = v70 + 1;
      if (v30)
        goto LABEL_22;
      goto LABEL_88;
    }
    v20 = v70;
    if (v24)
    {
      v48 = v70 + 1;
      if (v70 + 1 < v25)
      {
        v8 = v25;
        goto LABEL_21;
      }
      if (v10 + 8 <= v69)
      {
        v8 = (unsigned int *)(v69 - (v10 - (_QWORD)v25));
        if ((unsigned int *)v10 != v25)
        {
          v68 = result;
          memmove((void *)(v69 - (v10 - (_QWORD)v25)), v25, v10 - (_QWORD)v25);
          v48 = v70 + 1;
          result = v68;
        }
        v10 = v69;
LABEL_21:
        *v70 = v23;
        v70[1] = (v24 - 1) | 0x80000000;
        v22 = v69;
        v20 = v48 + 1;
        if (v30)
        {
LABEL_22:
          if ((unint64_t)v20 + v10 - (_QWORD)v8 + 8 > v22)
            goto LABEL_103;
          continue;
        }
LABEL_88:
        v25 = v8;
LABEL_107:
        v8 = v25;
        if (v18 == v21)
          goto LABEL_108;
        v61 = __si_assert_copy_extra_268();
        v54 = v61;
        v62 = "";
        if (v61)
          v62 = v61;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v62);
LABEL_97:
        free(v54);
        if (__valid_fs(-1))
LABEL_98:
          v56 = 2989;
        else
          v56 = 3072;
        *(_DWORD *)v56 = -559038737;
        abort();
      }
LABEL_114:
      v63 = __si_assert_copy_extra_268();
      v64 = v63;
      if (v63)
        v65 = v63;
      else
        v65 = "";
      __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v65);
      free(v64);
      goto LABEL_98;
    }
    break;
  }
  v8 = v25;
  if (!v30)
    goto LABEL_107;
LABEL_103:
  if (v18 >= v21)
  {
    v57 = __si_assert_copy_extra_268();
    v51 = v57;
    v58 = "";
    if (v57)
      v58 = v57;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v58);
    goto LABEL_92;
  }
LABEL_108:
  v59 = v10 - (_QWORD)v8;
  if (v10 > (unint64_t)v8)
  {
    v60 = result;
    memmove(v20, v8, v10 - (_QWORD)v8);
    result = v60;
    v20 = (unsigned int *)((char *)v20 + v59);
  }
  *(_DWORD *)(v66 + 8) = ((unint64_t)v20 - v67) >> 2;
  return result;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::ContainsKey(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v13;
  uint64_t result;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  v3 = a2 & a3 & 0x7FFFFFFF;
  v4 = (unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8);
  v6 = a1 + 12 + 4 * v5;
  if (v5 >= 3)
  {
    v7 = 4 * v5;
    v8 = a1 + 12 + 4 * v5;
    do
    {
      v9 = &v4[v7 >> 3];
      v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        v11 = *--v9;
        v10 = v11;
      }
      if (v9 <= v4)
        break;
      if (v10 == v3)
      {
        v4 = v9;
        if ((unint64_t)v9 < v6)
          goto LABEL_15;
        return 0;
      }
      if (v10 > v3)
        v8 = (unint64_t)v9;
      else
        v4 = v9;
      v7 = v8 - (_QWORD)v4;
    }
    while (v8 > (unint64_t)v4 && (unint64_t)v7 > 0xB);
  }
  if ((unint64_t)v4 >= v6)
    return 0;
LABEL_15:
  v13 = *v4;
  if (*v4 != v3)
  {
    v15 = v4 + 1;
    do
    {
      if ((v13 & 0x80000000) != 0)
      {
        v17 = *(v15 - 2);
        v18 = v17 + (v13 & 0x7FFFFFFF);
        if (v3 >= v17 && v3 <= v18)
          return 1;
        if ((unint64_t)v15 >= v6)
          return 0;
      }
      else
      {
        result = 0;
        if (v13 > v3 || (unint64_t)v15 >= v6)
          return result;
      }
      v16 = *v15++;
      v13 = v16;
    }
    while (v16 != v3);
  }
  return 1;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::CloseKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  unsigned int v18;

  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v4 = a2 & a3 & 0x7FFFFFFF;
  v5 = (unsigned int *)(a1 + 12);
  v6 = a1 + 12 + 4 * v3;
  if (v3 >= 3)
  {
    v7 = 4 * v3;
    v8 = a1 + 12 + 4 * v3;
    do
    {
      v9 = &v5[v7 >> 3];
      v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        v11 = *--v9;
        v10 = v11;
      }
      if (v9 <= v5)
        break;
      if (v10 == v4)
      {
        v5 = v9;
        if ((unint64_t)v9 < v6)
          goto LABEL_16;
        goto LABEL_30;
      }
      if (v10 > v4)
        v8 = (unint64_t)v9;
      else
        v5 = v9;
      v7 = v8 - (_QWORD)v5;
    }
    while (v8 > (unint64_t)v5 && (unint64_t)v7 > 0xB);
  }
  if ((unint64_t)v5 >= v6)
  {
LABEL_30:
    v17 = *(unsigned int *)(a1 + 4 * (v3 - 1) + 12);
    if ((v17 & 0x80000000) != 0)
      return *(_DWORD *)(a1 + 4 * (v3 - 2) + 12) + (v17 & 0x7FFFFFFF);
    else
      return v17;
  }
  else
  {
LABEL_16:
    v13 = v5;
    while (1)
    {
      v18 = *v13++;
      v17 = v18;
      if (v18 == v4)
        return a2 & a3 & 0x7FFFFFFF;
      if ((v17 & 0x80000000) != 0)
      {
        v14 = *(v5 - 1);
        v15 = v14 + (v17 & 0x7FFFFFFF);
        if (v4 >= v14 && v4 <= v15)
          return a2 & a3 & 0x7FFFFFFF;
      }
      else if (v17 > v4)
      {
        return v17;
      }
      v5 = v13;
      if ((unint64_t)v13 >= v6)
        goto LABEL_30;
    }
  }
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::RemoveKey(uint64_t a1, int a2, int a3)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t result;
  unsigned int v19;
  unsigned int v20;
  unsigned int v22;
  size_t v23;
  unsigned int *v24;
  int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  const char *v38;

  v4 = a2 & a3 & 0x7FFFFFFF;
  v5 = a1 + 12;
  v6 = *(unsigned int *)(a1 + 8);
  v7 = a1 + 12 + 4 * v6;
  if (v6 >= 3)
  {
    v9 = 4 * v6;
    v10 = a1 + 12 + 4 * v6;
    v8 = (unsigned int *)(a1 + 12);
    do
    {
      v11 = &v8[v9 >> 3];
      v12 = *v11;
      if ((*v11 & 0x80000000) != 0)
      {
        v13 = *--v11;
        v12 = v13;
      }
      if (v11 <= v8)
        break;
      if (v12 == v4)
      {
        v8 = v11;
        if ((unint64_t)v11 >= v7)
          return 0;
        goto LABEL_17;
      }
      if (v12 > v4)
        v10 = (unint64_t)v11;
      else
        v8 = v11;
      v9 = v10 - (_QWORD)v8;
    }
    while (v10 > (unint64_t)v8 && (unint64_t)v9 > 0xB);
    if ((unint64_t)v8 >= v7)
      return 0;
  }
  else
  {
    v8 = (unsigned int *)(a1 + 12);
    if (v5 >= v7)
      return 0;
  }
LABEL_17:
  v16 = v8 + 1;
  v15 = *v8;
  if (*v8 == v4)
  {
    if ((unint64_t)v16 >= v7)
      goto LABEL_43;
    goto LABEL_35;
  }
  while (1)
  {
    if ((v15 & 0x80000000) == 0)
    {
      result = 0;
      if (v15 > v4 || (unint64_t)v16 >= v7)
        return result;
      goto LABEL_20;
    }
    v19 = *(v16 - 2);
    v20 = v19 + (v15 & 0x7FFFFFFF);
    if (v4 > v19 && v4 <= v20)
      break;
    if ((unint64_t)v16 >= v7)
      return 0;
LABEL_20:
    v17 = *v16++;
    v15 = v17;
    if (v17 == v4)
    {
      v8 = v16 - 1;
      if ((unint64_t)v16 >= v7)
        goto LABEL_43;
LABEL_35:
      v22 = *v16;
      if ((*v16 & 0x80000000) == 0)
      {
        v23 = v7 - (_QWORD)v16;
        v24 = v16;
LABEL_39:
        memmove(v8, v24, v23);
        v25 = *(_DWORD *)(a1 + 8) - 1;
        goto LABEL_44;
      }
      *v8 = v4 + 1;
      if ((v22 & 0x7FFFFFFF) == 1)
      {
        v24 = v8 + 2;
        v23 = v7 - (_QWORD)(v8 + 2);
        v8 = v16;
        goto LABEL_39;
      }
      v27 = (v22 - 1) | 0x80000000;
LABEL_48:
      *v16 = v27;
      return 1;
    }
  }
  v26 = v16 - 1;
  if ((v15 & 0x7FFFFFFF) != 1)
  {
    if (v4 == v20)
    {
      *v26 = (v15 - 1) | 0x80000000;
      return 1;
    }
    if (v4 == v19 + 1)
    {
      *v26 = v4 + 1;
      v28 = v20 + ~v4;
      if (!v28)
        return 1;
      v29 = *(unsigned int *)(a1 + 8);
      if (v29 < 0x3F)
      {
        v30 = (uint64_t)((uint64_t)v16 - v5) >> 2;
        if (v29 != v30)
        {
          v31 = v29 - v30;
          v32 = v16 + 1;
LABEL_63:
          memmove(v32, v16, 4 * v31);
          LODWORD(v29) = *(_DWORD *)(a1 + 8);
          goto LABEL_64;
        }
        goto LABEL_64;
      }
    }
    else
    {
      *(v16 - 1) = (v4 + ~v19) | 0x80000000;
      v33 = *(unsigned int *)(a1 + 8);
      if (v33 < 0x3F)
      {
        v34 = (uint64_t)((uint64_t)v16 - v5) >> 2;
        if (v33 != v34)
        {
          memmove(v16 + 1, v16, 4 * (v33 - v34));
          LODWORD(v33) = *(_DWORD *)(a1 + 8);
        }
        *(_DWORD *)(a1 + 8) = v33 + 1;
        *v16 = v4 + 1;
        v28 = v20 + ~v4;
        if (!v28)
          return 1;
        v29 = *(unsigned int *)(a1 + 8);
        if (v29 < 0x3F)
        {
          ++v16;
          v35 = (uint64_t)((uint64_t)v26 - v5 + 8) >> 2;
          if (v29 != v35)
          {
            v31 = v29 - v35;
            v32 = v26 + 3;
            goto LABEL_63;
          }
LABEL_64:
          *(_DWORD *)(a1 + 8) = v29 + 1;
          v27 = v28 | 0x80000000;
          goto LABEL_48;
        }
      }
    }
    v36 = __si_assert_copy_extra_268();
    v37 = v36;
    if (v36)
      v38 = v36;
    else
      v38 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 649, v38);
    free(v37);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if ((unint64_t)v16 < v7)
  {
    memmove(v16 - 1, v16, v7 - (_QWORD)v16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
LABEL_43:
  v25 = v6 - 1;
LABEL_44:
  *(_DWORD *)(a1 + 8) = v25;
  return 1;
}

