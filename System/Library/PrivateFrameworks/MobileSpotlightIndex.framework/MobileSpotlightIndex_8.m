void BulkPullback(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  __int128 v31;
  __int128 v32;
  _OWORD v33[2];

  v4 = *(_QWORD *)(a1 + 3328);
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_DWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_DWORD *)(a2 + 148);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 24) = 0;
  PositionIterator_Resplit((_QWORD *)a2, v4);
  if (v5)
  {
    *(_QWORD *)&v31 = v5;
    *((_QWORD *)&v31 + 1) = v6;
    *(_QWORD *)&v32 = v7;
    *((_QWORD *)&v32 + 1) = v8;
    LODWORD(v33[0]) = v9;
    memset((char *)v33 + 4, 0, 20);
    pullback(a2, (uint64_t)&v31);
  }
  if (*(int *)(a2 + 188) >= 1)
  {
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = (__int128 *)(*(_QWORD *)(a2 + 176) + v10);
      v13 = v12[1];
      v31 = *v12;
      v32 = v13;
      v33[0] = v12[2];
      *(_QWORD *)&v33[1] = *((_QWORD *)v12 + 6);
      pullback(a2, (uint64_t)&v31);
      ++v11;
      v10 += 56;
    }
    while (v11 < *(int *)(a2 + 188));
  }
  *(_DWORD *)(a2 + 188) = 0;
  v14 = *(_QWORD *)(a2 + 8);
  if (v14)
  {
    v15 = *(_QWORD *)(a2 + 136);
    v16 = v15 <= 1 ? 1 : *(_QWORD *)(a2 + 136);
    if (v15 >= 2)
    {
      v17 = 2 * v14;
      v18 = (unint64_t *)(*(_QWORD *)(a2 + 120) + 56);
      v19 = v16 - 1;
      while (1)
      {
        v20 = *v18;
        v18 += 7;
        if (v20 > v17)
          break;
        if (!--v19)
          goto LABEL_14;
      }
      v23 = __si_assert_copy_extra(0);
      v24 = v23;
      v25 = "";
      if (v23)
        v25 = v23;
      __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 2222, "iter->futureOffsets._offsets[i].offset<=iter->split*2", v25);
LABEL_26:
      free(v24);
      if (__valid_fs(-1))
        v26 = 2989;
      else
        v26 = 3072;
      *(_DWORD *)v26 = -559038737;
      abort();
    }
  }
LABEL_14:
  PositionIterator_GetNext(a2);
  v21 = *(_QWORD *)(a1 + 3328);
  if ((*(_QWORD *)a2 & 0x3FFFFFFFFFFFFFFFLL) != 0)
  {
    if (v21 && (*(_QWORD *)a2 & 0x3FFFFFFFFFFFFFFFuLL) > 2 * v21)
    {
      v27 = __si_assert_copy_extra(0);
      v24 = v27;
      v28 = "";
      if (v27)
        v28 = v27;
      __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 4988, "!iterator->split ||(((iter->ptr) & 0x3FFFFFFFFFFFFFFF)) <= 2*iterator->split", v28);
      goto LABEL_26;
    }
    ipqpush(a1, a2);
    if (!*(_QWORD *)(a1 + 3328) && *(uint64_t *)(a1 + 3336) >= 1)
      printf("renedebug");
  }
  else
  {
    if (!v21)
    {
      v29 = __si_assert_copy_extra(0);
      v24 = v29;
      v30 = "";
      if (v29)
        v30 = v29;
      __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 4992, "iterator->split != 0", v30);
      goto LABEL_26;
    }
    v22 = *(_QWORD *)(a1 + 3336);
    *(_QWORD *)(a1 + 3336) = v22 + 1;
    *(_QWORD *)(a1 + 8 * v22 + 3352) = a2;
  }
}

void _deferredArrayCleanup(uint64_t a1)
{
  uint64_t v2;

  if (*(int *)(a1 + 12) >= 1)
  {
    v2 = 0;
    do
      BulkPullback(*(_QWORD *)(a1 + 16), *(_QWORD *)(*(_QWORD *)a1 + 8 * v2++));
    while (v2 < *(int *)(a1 + 12));
  }
  free(*(void **)a1);
  free((void *)a1);
}

double pullback(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  BOOL v5;
  __int128 v6;
  double result;
  __int128 v8;
  char *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a1 + 112);
  if (*(_QWORD *)a2 <= v4)
  {
    v8 = *(_OWORD *)(a2 + 16);
    v13 = *(_OWORD *)a2;
    v14 = v8;
    v15 = *(_OWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)&result = check_oqpush_AnnotatedPositionOffset_t(a1 + 56, (uint64_t *)&v13).n128_u64[0];
  }
  else
  {
    if (v4)
      v5 = *(_QWORD *)a2 > 2 * v4;
    else
      v5 = 0;
    if (v5)
    {
      v9 = __si_assert_copy_extra(0);
      v10 = v9;
      v11 = "";
      if (v9)
        v11 = v9;
      __message_assert("%s:%u: failed assertion '%s' %s splitPoint is %lld, offset is %lld", "PayloadIterator.c", 2173, "!iter->initialOffsets.splitPoint || tmp.offset <= 2 * iter->initialOffsets.splitPoint", v11, *(_QWORD *)(a1 + 112), *(_QWORD *)a2);
      free(v10);
      if (__valid_fs(-1))
        v12 = 2989;
      else
        v12 = 3072;
      *(_DWORD *)v12 = -559038737;
      abort();
    }
    v6 = *(_OWORD *)(a2 + 16);
    v13 = *(_OWORD *)a2;
    v14 = v6;
    v15 = *(_OWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)&result = check_pqpush_AnnotatedPositionOffset_t(a1 + 120, &v13).n128_u64[0];
  }
  return result;
}

uint64_t pointerHash(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  unsigned int v8;

  v2 = 0;
  v3 = -1789642873;
  v4 = 718793509;
  v5 = -1759636613;
  do
  {
    v3 = 5 * v3 + 2071795100;
    v4 = 5 * v4 + 1808688022;
    HIDWORD(v7) = v3 * *(_DWORD *)(a1 + v2);
    LODWORD(v7) = HIDWORD(v7);
    v6 = v7 >> 21;
    HIDWORD(v7) = v5;
    LODWORD(v7) = v5;
    v5 = (v6 * v4) ^ (5 * (v7 >> 19) + 1390208809);
    v2 += 4;
  }
  while (v2 != 8);
  v8 = -1028477387 * ((-2048144789 * (v5 ^ 8)) ^ ((-2048144789 * (v5 ^ 8u)) >> 13));
  return (v8 ^ HIWORD(v8)) % a2;
}

uint64_t SharedStateGetBuffer(uint64_t a1, uint64_t a2, unsigned int a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v7 = a3;
  v8 = a1 + 8 * a3;
  v11 = *(char **)(v8 + 192);
  v10 = v8 + 192;
  v9 = v11;
  if (v11)
  {
    v12 = *(unsigned int *)(a1 + 4 * a3 + 320);
  }
  else
  {
    v9 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x4000uLL, 0x6085D6BuLL);
    if (!v9)
      _log_fault_for_malloc_failure();
    v12 = 0;
    *(_QWORD *)v10 = v9;
    *(_DWORD *)(a1 + 4 * v7 + 320) = 0;
  }
  v13 = a1 + 4 * v7;
  *(_QWORD *)&v9[4 * v12] = a2;
  v14 = *(_DWORD *)(v13 + 320) + 2;
  *(_DWORD *)(v13 + 320) = v14;
  *a4 = v14;
  return *(_QWORD *)v10;
}

void _issueBuffer(NSObject *a1, NSObject *a2, uint64_t a3, uint64_t a4, int a5, char a6)
{
  _QWORD v12[7];
  int v13;
  char v14;

  dispatch_semaphore_wait(a1, 0xFFFFFFFFFFFFFFFFLL);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___innerIssueBuffer_block_invoke;
  v12[3] = &__block_descriptor_tmp_63;
  v13 = a5;
  v12[4] = a3;
  v12[5] = a4;
  v14 = a6;
  v12[6] = a1;
  dispatch_async(a2, v12);
}

uint64_t SharedStateResetBuffer(uint64_t a1, uint64_t a2, unsigned int a3, int *a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v8 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x4000uLL, 0x6085D6BuLL);
  if (!v8)
    _log_fault_for_malloc_failure();
  v9 = a1 + 8 * a3;
  *(_QWORD *)(v9 + 192) = v8;
  v10 = a1 + 4 * a3;
  *(_DWORD *)(v10 + 320) = 0;
  *v8 = a2;
  v11 = *(_DWORD *)(v10 + 320) + 2;
  *(_DWORD *)(v10 + 320) = v11;
  *a4 = v11;
  return *(_QWORD *)(v9 + 192);
}

__n128 deferPosition(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  char *v6;
  int v7;
  void *v8;
  size_t v9;
  char *v10;
  char *v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v5 = *(_DWORD *)(a1 + 184);
  v4 = *(_DWORD *)(a1 + 188);
  if (v4 >= v5)
  {
    v7 = 2 * v5;
    if (!v5)
      v7 = 4;
    *(_DWORD *)(a1 + 184) = v7;
    v8 = *(void **)(a1 + 176);
    v9 = 56 * v7;
    if (v8)
      v10 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v8, v9, 0xECA6AA46uLL);
    else
      v10 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v9, 0x8DDAA030uLL);
    v6 = v10;
    if (!v10)
      _log_fault_for_malloc_failure();
    *(_QWORD *)(a1 + 176) = v6;
    v4 = *(_DWORD *)(a1 + 188);
  }
  else
  {
    v6 = *(char **)(a1 + 176);
  }
  *(_DWORD *)(a1 + 188) = v4 + 1;
  v11 = &v6[56 * v4];
  result = *(__n128 *)a2;
  v13 = *(_OWORD *)(a2 + 16);
  v14 = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *((_OWORD *)v11 + 1) = v13;
  *((_OWORD *)v11 + 2) = v14;
  *(__n128 *)v11 = result;
  return result;
}

uint64_t PositionIterate_Compressed(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned int a5, int a6, _BYTE *a7)
{
  _BYTE *v7;
  unsigned int v8;
  uint64_t v11;
  uint64_t *v13;
  uint64_t result;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  BOOL v20;
  unint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unint64_t v25;
  size_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;
  size_t v30;
  BOOL v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t *v34;
  size_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  size_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  signed int v47;
  unint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int8x8_t v56;
  int v57;
  BOOL v58;
  size_t v59;
  unsigned __int8 *v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  unint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  BOOL v75;
  void *v76;
  size_t v77;
  char *v78;
  char *v79;
  int v80;
  size_t v81;
  unsigned __int8 *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  int v88;
  unint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  char IsLooping;
  uint64_t v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unint64_t v103;
  unsigned __int8 *v104;
  size_t v105;
  unsigned __int8 *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  int v111;
  int8x8_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  size_t v117;
  unsigned __int8 *v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  void *v125;
  size_t v126;
  char *v127;
  char *v128;
  _DWORD *v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  NSObject *v135;
  NSObject *v136;
  unsigned int v137;
  unsigned __int8 *v138;
  unsigned int v139;
  uint64_t v140;
  int v141;
  size_t v142;
  unsigned __int8 *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  int v147;
  unsigned int v148;
  BOOL v149;
  int v150;
  NSObject *v151;
  int v152;
  NSObject *v153;
  unsigned int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD *v164;
  _QWORD *v165;
  char *v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  __int128 *v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  int8x8_t v180;
  unsigned int v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  size_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int8 *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unsigned int v195;
  unsigned int locked;
  uint64_t v197;
  unsigned int v198;
  void *v199;
  size_t v200;
  char *v201;
  char *v202;
  _DWORD *v203;
  unsigned int v204;
  uint64_t Buffer;
  int v206;
  uint64_t v207;
  NSObject *v208;
  NSObject *v209;
  unsigned int v210;
  unsigned int v211;
  uint64_t v212;
  _BYTE *v213;
  int v214;
  int v215;
  unsigned int v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  int v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  NSObject *v227;
  int v228;
  NSObject *v229;
  int v230;
  NSObject *v231;
  char *v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  int v245;
  NSObject *v246;
  uint64_t v247;
  int v248;
  NSObject *v249;
  uint64_t v250;
  int v251;
  NSObject *v252;
  uint64_t v253;
  int v254;
  NSObject *v255;
  NSObject *log;
  unint64_t v257;
  uint64_t v258;
  int v259;
  unsigned int v260;
  unsigned int v261;
  NSObject *queue;
  unsigned int v263;
  uint64_t v264;
  unsigned __int8 *v266;
  _BYTE *v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  uint64_t v272;
  uint64_t *v273;
  uint64_t *v274;
  _DWORD *cf;
  _DWORD *cfa;
  _DWORD *cfb;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  unsigned int v283;
  uint64_t v284;
  unint64_t v285;
  _BYTE block[56];
  int v287;
  char v288;
  uint64_t v289;

  v7 = a7;
  v8 = a5;
  v11 = a2;
  v289 = *MEMORY[0x1E0C80C00];
  v13 = *(uint64_t **)(a3 + 384);
  if (*((_BYTE *)v13 + 19))
  {
    if (*a7)
      return 0;
    v22 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v23 = *(unsigned __int8 **)a3;
      v24 = *v13;
      if (dword_1EF19FCB4 >= 5)
      {
        v248 = *__error();
        v249 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v249, OS_LOG_TYPE_DEFAULT))
        {
          v250 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)block = 134218496;
          *(_QWORD *)&block[4] = a1;
          *(_WORD *)&block[12] = 2048;
          *(_QWORD *)&block[14] = v22;
          *(_WORD *)&block[22] = 2048;
          *(_QWORD *)&block[24] = v250;
          _os_log_impl(&dword_1B8270000, v249, OS_LOG_TYPE_DEFAULT, "%p %llu %p", block, 0x20u);
        }
        *__error() = v248;
        v13 = *(uint64_t **)(a3 + 384);
        v11 = a2;
        v8 = a5;
      }
      v25 = *(_QWORD *)(a3 + 8);
      v26 = v13[1];
      if (v22 < v25 || (v26 + v25 > v22 ? (v27 = v22 + 30 > v26 + v25) : (v27 = 1), v27))
      {
        *(_QWORD *)(a3 + 8) = v22 & 0x3FFFFFFFFFFFF000;
        if (fd_pread(*(_DWORD **)(v24 + 4480), v23, v26, v22 & 0x3FFFFFFFFFFFF000) == -1 || *v7)
          return 0;
        v263 = v8;
        *(_DWORD *)(a3 + 28) = 0;
        v25 = *(_QWORD *)(a3 + 8);
      }
      else
      {
        v263 = v8;
        ++*(_DWORD *)(a3 + 28);
      }
      v32 = v22 - v25;
      v285 = v22 - v25;
      *(_QWORD *)(a3 + 176) = 0;
      *(_QWORD *)(a3 + 184) = 0;
      v33 = (unint64_t *)(a3 + 176);
      v279 = 0uLL;
      *(_QWORD *)&v280 = 0;
      _CIIndexSetInitializeEnumeratorForRange(*(_DWORD **)(a1 + 24), (uint64_t)&v279, 0, *(_DWORD *)(a3 + 20));
      v284 = v32;
      if (*(_BYTE *)(a1 + 156))
      {
        if (*(unsigned __int8 *)(a1 + 156) >= 0x1Du)
        {
LABEL_361:
          v243 = __si_assert_copy_extra(0);
          __message_assert("%s:%u: failed assertion '%s' %s ");
          goto LABEL_362;
        }
        v34 = *(uint64_t **)(a3 + 384);
        v35 = v34[1];
        if ((int)v32 + 4 < v35)
        {
          ++*(_DWORD *)(a3 + 28);
          v36 = v32;
          goto LABEL_138;
        }
        v98 = *v34;
        v99 = *(unsigned __int8 **)a3;
        v100 = *(_QWORD *)(a3 + 8) + v32;
        *(_QWORD *)(a3 + 8) = v100 & 0x3FFFFFFFFFFFF000;
        v101 = fd_pread(*(_DWORD **)(v98 + 4480), v99, v35, v100 & 0x3FFFFFFFFFFFF000);
        *(_DWORD *)(a3 + 28) = 0;
        if (v101 != -1)
        {
          v36 = v100 - *(_QWORD *)(a3 + 8);
LABEL_138:
          __asm { BR              X13 }
        }
        *(_BYTE *)(a1 + 156) = 0;
        v33 = (unint64_t *)(a3 + 176);
      }
      if (*v7)
        goto LABEL_244;
      v177 = 0;
      v261 = 0;
      v259 = a6;
      v274 = (uint64_t *)v11;
      cfb = a4;
      v257 = v22;
      while (1)
      {
        v271 = _CIIndexSetEnumeratorNext((unsigned int *)&v279);
        if (!v271)
          goto LABEL_244;
        if (v271 < v263)
        {
          v217 = *(_QWORD *)(a3 + 8);
          v218 = *(_DWORD *)(a1 + 48);
          v219 = *(_QWORD *)(a1 + 40);
          v220 = *(_DWORD *)(a1 + 148);
          v221 = *(_DWORD *)(a1 + 152);
          v222 = *(_QWORD *)(a1 + 16);
          v223 = *(_QWORD *)(a1 + 24);
          v224 = *(_QWORD *)(a3 + 176);
          if (v224)
          {
            LOBYTE(v224) = *(_BYTE *)(a3 + 184);
            v225 = v284;
          }
          else
          {
            v225 = v285;
            *(_QWORD *)(a3 + 184) = 0;
          }
          *(_QWORD *)block = v225 + v217;
          *(_QWORD *)&block[8] = v223;
          *(_QWORD *)&block[16] = v218;
          *(_QWORD *)&block[24] = v219;
          *(_DWORD *)&block[32] = v220;
          *(_DWORD *)&block[36] = v221 + 1;
          block[40] = v224;
          *(_DWORD *)&block[41] = 0;
          *(_DWORD *)&block[44] = 0;
          *(_QWORD *)&block[48] = v222;
          deferPosition(a1, (uint64_t)block);
          goto LABEL_245;
        }
        if (*v7)
          goto LABEL_244;
        v178 = readCompactPosition_9290(a3, (uint64_t *)&v285, &v284);
        if (v178 == -1)
          goto LABEL_244;
        v179 = v178;
        if (!v178)
          break;
        if (!CIIndexSetHasIndex((uint64_t)a4, v271))
        {
          if (*v7)
            goto LABEL_244;
          v182 = *v33;
          v184 = v284;
          v183 = v285;
          v185 = *v33;
          while (v185)
          {
            if (v182 >= 0x1D)
              goto LABEL_361;
            --v185;
            v186 = *(_QWORD *)(a3 + 184);
            *(_QWORD *)(a3 + 176) = v185;
            *(_QWORD *)(a3 + 184) = v186 + 1;
            if (!*(_DWORD *)(a3 + 4 * v186 + 60))
            {
              v284 = v184;
              v285 = v183;
              if (!v185)
              {
                *(_QWORD *)(a3 + 184) = 0;
                v284 = v183;
              }
              v195 = v271;
              goto LABEL_330;
            }
          }
          v187 = *(uint64_t **)(a3 + 384);
          v188 = v187[1];
          if ((int)v183 + 4 >= v188)
          {
            v190 = *v187;
            v191 = *(unsigned __int8 **)a3;
            v192 = *(_QWORD *)(a3 + 8) + v183;
            *(_QWORD *)(a3 + 8) = v192 & 0x3FFFFFFFFFFFF000;
            v193 = fd_pread(*(_DWORD **)(v190 + 4480), v191, v188, v192 & 0x3FFFFFFFFFFFF000);
            *(_DWORD *)(a3 + 28) = 0;
            if (v193 == -1)
              goto LABEL_244;
            v189 = v192 - *(_QWORD *)(a3 + 8);
          }
          else
          {
            ++*(_DWORD *)(a3 + 28);
            v189 = v183;
          }
          v194 = *(unsigned int *)(*(_QWORD *)a3 + v189);
          *(_DWORD *)(a3 + 60) = 0;
          __asm { BR              X13 }
        }
        if (v177)
        {
          if (v177 - v271 == 1)
            v181 = v261;
          else
            v181 = lockedCountItemsInRange(a4, v271 + 1, v177 - 1, v180) + v261;
          locked = v181 + 1;
        }
        else
        {
          locked = lockedCountItemsInRange(a4, v271 + 1, *(_DWORD *)(a3 + 24), v180);
        }
        v197 = *(unsigned int *)(a1 + 168);
        if (locked >= v197)
        {
          v198 = *(_DWORD *)(a1 + 168);
          if (!(_DWORD)v197)
          {
            v198 = 1 << -(char)__clz(locked);
            if (locked <= 4)
              v198 = 4;
            *(_DWORD *)(a1 + 168) = v198;
          }
          if (locked + 1 >= v198)
          {
            do
            {
              v75 = locked + 1 >= 2 * v198;
              v198 *= 2;
            }
            while (v75);
            *(_DWORD *)(a1 + 168) = v198;
          }
          v199 = *(void **)(a1 + 160);
          v200 = 8 * v198;
          if (v199)
            v201 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v199, v200, 0xECA6AA46uLL);
          else
            v201 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v200, 0x8DDAA030uLL);
          v202 = v201;
          if (!v201)
            _log_fault_for_malloc_failure();
          *(_QWORD *)(a1 + 160) = v202;
          bzero(&v202[8 * v197], 8 * (*(unsigned int *)(a1 + 168) - v197));
        }
        v203 = *(_DWORD **)(*(_QWORD *)(a1 + 160) + 8 * locked);
        if (!v203)
        {
          v203 = CIIndexSetCreateWithRangeWithCache(0, 0x400u, v11);
          *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * locked) = v203;
        }
        v261 = locked;
        v283 = 0;
        v204 = pointerHash((uint64_t)v203, *(_DWORD *)(*(_QWORD *)(a3 + 384) + 20));
        Buffer = SharedStateGetBuffer(a3, (uint64_t)v203, v204, (int *)&v283);
        v206 = 0;
        v207 = *(_QWORD *)(a3 + 384);
        v208 = *(NSObject **)(v207 + 160);
        v269 = v204;
        v209 = *(NSObject **)(v207 + 8 * v204 + 32);
        v210 = v283++;
        do
        {
          if (*v7)
            break;
          if (v206 < 0)
            goto LABEL_361;
          v179 += v206;
          if (dword_1EF19FC90 >= 5)
          {
            v215 = *__error();
            log = _SILogForLogForCategory(1);
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)block = 134218496;
              *(_QWORD *)&block[4] = a1;
              *(_WORD *)&block[12] = 1024;
              *(_DWORD *)&block[14] = v271;
              *(_WORD *)&block[18] = 1024;
              *(_DWORD *)&block[20] = v179;
              _os_log_impl(&dword_1B8270000, log, OS_LOG_TYPE_DEFAULT, "Iter: %p Doc: %d Pos: %d", block, 0x18u);
            }
            *__error() = v215;
          }
          v211 = v283;
          if (v283 == 4096)
          {
            *(_DWORD *)(Buffer + 4 * v210) = 4095 - v210;
            v212 = *v274;
            v213 = v7;
            v214 = v283;
            dispatch_semaphore_wait(v208, 0xFFFFFFFFFFFFFFFFLL);
            *(_QWORD *)block = MEMORY[0x1E0C809B0];
            *(_QWORD *)&block[8] = 0x40000000;
            *(_QWORD *)&block[16] = ___innerIssueBuffer_block_invoke;
            *(_QWORD *)&block[24] = &__block_descriptor_tmp_63;
            v287 = v214;
            v7 = v213;
            *(_QWORD *)&block[32] = v212;
            *(_QWORD *)&block[40] = Buffer;
            v288 = 0;
            *(_QWORD *)&block[48] = v208;
            dispatch_async(v209, block);
            Buffer = SharedStateResetBuffer(a3, (uint64_t)v203, v269, (int *)&v283);
            v210 = v283;
            v211 = v283 + 1;
          }
          v283 = v211 + 1;
          *(_DWORD *)(Buffer + 4 * v211) = v179;
          v206 = readCompactPosition_9290(a3, (uint64_t *)&v285, &v284);
        }
        while ((v206 + 1) > 1);
        *(_DWORD *)(Buffer + 4 * v210) = v283 + ~v210;
        v33 = (unint64_t *)(a3 + 176);
        if (!*v7)
        {
          if (v283 - 4092 > 0xFFFFEFFF)
          {
            *(_DWORD *)(a3 + 4 * v269 + 320) = v283;
          }
          else
          {
            _issueBuffer(v208, v209, *v274, Buffer, v283, 0);
            *(_DWORD *)(a3 + 4 * v269 + 320) = 0;
            *(_QWORD *)(a3 + 8 * v269 + 192) = 0;
          }
        }
        v11 = (uint64_t)v274;
        a4 = cfb;
        a6 = v259;
        v22 = v257;
        v195 = v271;
        v177 = v271;
LABEL_330:
        v216 = *(_DWORD *)(a3 + 56);
        if (v216 >= v195)
          v216 = v195;
        *(_DWORD *)(a3 + 56) = v216;
        if (*v7)
          goto LABEL_244;
      }
      *v7 = 1;
      v226 = *__error();
      v227 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v227, OS_LOG_TYPE_ERROR))
      {
        v237 = v285 + *(_QWORD *)(a3 + 8);
        v238 = *(_QWORD *)(**(_QWORD **)(a3 + 384) + 24);
        v239 = *(_QWORD *)(**(_QWORD **)(a3 + 384) + 32);
        *(_DWORD *)block = 136316674;
        *(_QWORD *)&block[4] = "_CIPositionIterate_NewCompressed";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 2838;
        *(_WORD *)&block[18] = 1024;
        *(_DWORD *)&block[20] = v271;
        *(_WORD *)&block[24] = 2048;
        *(_QWORD *)&block[26] = v237;
        *(_WORD *)&block[34] = 2048;
        *(_QWORD *)&block[36] = v239;
        *(_WORD *)&block[44] = 2048;
        *(_QWORD *)&block[46] = v238;
        *(_WORD *)&block[54] = 1024;
        v287 = 1;
        _os_log_error_impl(&dword_1B8270000, v227, OS_LOG_TYPE_ERROR, "%s:%d: Rogue nil position at docID %d off %llu size %llu(%llu), Rogue nil count %d. Canceling", block, 0x3Cu);
      }
      *__error() = v226;
      if (dword_1EF19FCB4 >= 5)
      {
        v228 = *__error();
        v229 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v229, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)block = 0x104000100;
          _os_log_impl(&dword_1B8270000, v229, OS_LOG_TYPE_DEFAULT, "%d rogue nil positions were found (use debug log level to see them all)", block, 8u);
        }
        *__error() = v228;
        a6 = v259;
      }
LABEL_244:
      instr_release(*(CFTypeRef *)(a1 + 24));
LABEL_245:
      result = 0;
      *(_DWORD *)(a1 + 148) = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      if (*v7)
        return result;
    }
    PositionIterator_GetNext(a1);
    if (*(_DWORD *)(a1 + 152) <= a6)
    {
      if (*(_QWORD *)a1 || (v155 = *(_DWORD *)(a1 + 188)) == 0)
      {
        v175 = (uint64_t *)a1;
        v176 = v22;
        goto LABEL_268;
      }
    }
    else
    {
      v155 = *(_DWORD *)(a1 + 188);
    }
    if (v155 >= 1)
    {
      v156 = 0;
      do
      {
        v157 = *(_QWORD *)(a1 + 176) + 56 * v156;
        v158 = *(_OWORD *)(v157 + 16);
        v279 = *(_OWORD *)v157;
        v280 = v158;
        v281 = *(_OWORD *)(v157 + 32);
        v282 = *(_QWORD *)(v157 + 48);
        v159 = *(_QWORD *)(a1 + 128);
        v160 = *(_QWORD *)(a1 + 136);
        v161 = *(char **)(a1 + 120);
        if ((uint64_t)(v160 + 2) >= v159)
        {
          if (v159 >= 4)
            v163 = 2 * v159;
          else
            v163 = 4;
          *(_QWORD *)(a1 + 128) = v163;
          if (v161)
            v164 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v161, 56 * v163 + 112, 0xECA6AA46uLL);
          else
            v164 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 56 * v163 + 112, 0x8DDAA030uLL);
          v165 = v164;
          if (!v164)
            _log_fault_for_malloc_failure();
          *(_QWORD *)(a1 + 120) = v165;
          v165[6] = 0;
          *((_OWORD *)v165 + 1) = 0u;
          *((_OWORD *)v165 + 2) = 0u;
          *(_OWORD *)v165 = 0u;
          v162 = *(_QWORD *)(a1 + 136);
          v161 = *(char **)(a1 + 120);
        }
        else
        {
          v162 = *(_QWORD *)(a1 + 136);
        }
        *(_QWORD *)(a1 + 136) = v162 + 1;
        v166 = &v161[56 * v160];
        v167 = v280;
        *(_OWORD *)v166 = v279;
        *((_OWORD *)v166 + 1) = v167;
        *((_OWORD *)v166 + 2) = v281;
        *((_QWORD *)v166 + 6) = v282;
        if ((uint64_t)v160 >= 2)
        {
          do
          {
            v168 = *(_QWORD *)(a1 + 120);
            v169 = v168 + 56 * v160;
            v170 = (__int128 *)(v168 + 56 * (v160 >> 1));
            if (*(_QWORD *)v169 > *(_QWORD *)v170)
              break;
            *(_OWORD *)block = *(_OWORD *)v169;
            *(_OWORD *)&block[16] = *(_OWORD *)(v169 + 16);
            *(_OWORD *)&block[32] = *(_OWORD *)(v169 + 32);
            *(_QWORD *)&block[48] = *(_QWORD *)(v169 + 48);
            v172 = v170[1];
            v171 = v170[2];
            v173 = *v170;
            *(_QWORD *)(v169 + 48) = *((_QWORD *)v170 + 6);
            *(_OWORD *)(v169 + 16) = v172;
            *(_OWORD *)(v169 + 32) = v171;
            *(_OWORD *)v169 = v173;
            v174 = *(_QWORD *)(a1 + 120) + 56 * (v160 >> 1);
            *(_OWORD *)v174 = *(_OWORD *)block;
            *(_OWORD *)(v174 + 16) = *(_OWORD *)&block[16];
            *(_OWORD *)(v174 + 32) = *(_OWORD *)&block[32];
            *(_QWORD *)(v174 + 48) = *(_QWORD *)&block[48];
            v20 = v160 > 3;
            v160 >>= 1;
          }
          while (v20);
        }
        ++v156;
      }
      while (v156 < *(int *)(a1 + 188));
    }
    *(_DWORD *)(a1 + 188) = 0;
    PositionIterator_GetNext(a1);
    return 2;
  }
  if (!*((_BYTE *)v13 + 18))
  {
    if (a5 == 1)
    {
      if (*a7)
        return 0;
      v28 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        v266 = *(unsigned __int8 **)a3;
        v270 = *v13;
        if (dword_1EF19FCB4 >= 5)
        {
          v251 = *__error();
          v252 = _SILogForLogForCategory(10);
          if (os_log_type_enabled(v252, OS_LOG_TYPE_DEFAULT))
          {
            v253 = *(_QWORD *)(a1 + 24);
            *(_DWORD *)block = 134218496;
            *(_QWORD *)&block[4] = a1;
            *(_WORD *)&block[12] = 2048;
            *(_QWORD *)&block[14] = v28;
            *(_WORD *)&block[22] = 2048;
            *(_QWORD *)&block[24] = v253;
            _os_log_impl(&dword_1B8270000, v252, OS_LOG_TYPE_DEFAULT, "%p %llu %p", block, 0x20u);
          }
          *__error() = v251;
          v13 = *(uint64_t **)(a3 + 384);
        }
        v29 = *(_QWORD *)(a3 + 8);
        v30 = v13[1];
        if (v28 < v29 || (v30 + v29 > v28 ? (v31 = v28 + 30 > v30 + v29) : (v31 = 1), v31))
        {
          *(_QWORD *)(a3 + 8) = v28 & 0x3FFFFFFFFFFFF000;
          if (fd_pread(*(_DWORD **)(v270 + 4480), v266, v30, v28 & 0x3FFFFFFFFFFFF000) == -1 || *v7)
            return 0;
          v258 = v28;
          *(_DWORD *)(a3 + 28) = 0;
          v29 = *(_QWORD *)(a3 + 8);
        }
        else
        {
          v258 = v28;
          ++*(_DWORD *)(a3 + 28);
        }
        v279 = 0uLL;
        *(_QWORD *)&v280 = 0;
        _CIIndexSetInitializeEnumeratorForRange(*(_DWORD **)(a1 + 24), (uint64_t)&v279, *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20));
        v102 = 0;
        v260 = 0;
        v103 = v258 - v29;
        v104 = v266;
        v273 = (uint64_t *)v11;
        cfa = a4;
        v267 = v7;
LABEL_140:
        v268 = _CIIndexSetEnumeratorNext((unsigned int *)&v279);
        if (!v268 || *v7)
          goto LABEL_347;
        v105 = *(_QWORD *)(*(_QWORD *)(a3 + 384) + 8);
        if ((int)v103 + 5 >= v105)
        {
          v106 = *(unsigned __int8 **)a3;
          v107 = *(_QWORD *)(a3 + 8) + v103;
          *(_QWORD *)(a3 + 8) = v107 & 0x3FFFFFFFFFFFF000;
          v108 = fd_pread(*(_DWORD **)(v270 + 4480), v106, v105, v107 & 0x3FFFFFFFFFFFF000);
          *(_DWORD *)(a3 + 28) = 0;
          if (v108 == -1)
            goto LABEL_347;
          v103 = v107 - *(_QWORD *)(a3 + 8);
        }
        else
        {
          ++*(_DWORD *)(a3 + 28);
        }
        v109 = v103 + 1;
        v110 = v104[v103];
        if ((char)v104[v103] < 0)
        {
          if (v110 > 0xBF)
          {
            if (v110 > 0xDF)
            {
              if (v110 > 0xEF)
              {
                v110 = *(_DWORD *)&v104[v109];
                v109 = v103 + 5;
              }
              else
              {
                v110 = ((v110 & 0xF) << 24) | (v104[v109] << 16) | (v104[v103 + 2] << 8) | v104[v103 + 3];
                v109 = v103 + 4;
              }
            }
            else
            {
              v110 = ((v110 & 0x1F) << 16) | (v104[v109] << 8) | v104[v103 + 2];
              v109 = v103 + 3;
            }
          }
          else
          {
            v111 = v104[v109] | ((v110 & 0x3F) << 8);
            v109 = v103 + 2;
            v110 = v111;
          }
        }
        if (v110)
        {
          if ((CIIndexSetHasIndex((uint64_t)a4, v268) & 1) == 0)
          {
            v114 = *v7;
            if (*v7)
            {
LABEL_160:
              v115 = 0;
              v116 = v268;
              goto LABEL_224;
            }
            while (1)
            {
              v58 = __OFSUB__(v110, v114);
              v110 -= v114;
              if ((v110 < 0) ^ v58 | (v110 == 0) || v110 <= 0)
                goto LABEL_361;
              v117 = *(_QWORD *)(*(_QWORD *)(a3 + 384) + 8);
              if ((int)v109 + 5 >= v117)
              {
                v118 = *(unsigned __int8 **)a3;
                v119 = *(_QWORD *)(a3 + 8) + v109;
                *(_QWORD *)(a3 + 8) = v119 & 0x3FFFFFFFFFFFF000;
                v120 = fd_pread(*(_DWORD **)(v270 + 4480), v118, v117, v119 & 0x3FFFFFFFFFFFF000);
                *(_DWORD *)(a3 + 28) = 0;
                if (v120 == -1)
                {
                  v154 = *(_DWORD *)(a3 + 56);
                  if (v154 >= v268)
                    v154 = v268;
                  *(_DWORD *)(a3 + 56) = v154;
                  goto LABEL_347;
                }
                v109 = v119 - *(_QWORD *)(a3 + 8);
              }
              else
              {
                ++*(_DWORD *)(a3 + 28);
              }
              v121 = v109 + 1;
              v114 = v104[v109];
              if ((char)v104[v109] < 0)
              {
                if (v114 > 0xBF)
                {
                  if (v114 > 0xDF)
                  {
                    if (v114 > 0xEF)
                    {
                      v114 = *(_DWORD *)&v104[v121];
                      v109 += 5;
                    }
                    else
                    {
                      v114 = ((v114 & 0xF) << 24) | (v104[v121] << 16) | (v104[v109 + 2] << 8) | v104[v109 + 3];
                      v109 += 4;
                    }
                  }
                  else
                  {
                    v114 = ((v114 & 0x1F) << 16) | (v104[v121] << 8) | v104[v109 + 2];
                    v109 += 3;
                  }
                }
                else
                {
                  v109 += 2;
                  v114 = v104[v121] | ((v114 & 0x3F) << 8);
                }
              }
              else
              {
                ++v109;
              }
              if (!v114 || *v7)
                goto LABEL_160;
            }
          }
          if (v102)
          {
            if (v102 - v268 == 1)
              v113 = v260;
            else
              v113 = lockedCountItemsInRange(a4, v268 + 1, v102 - 1, v112) + v260;
            v122 = v113 + 1;
          }
          else
          {
            v122 = lockedCountItemsInRange(a4, v268 + 1, *(_DWORD *)(a3 + 24), v112);
          }
          v123 = *(unsigned int *)(a1 + 168);
          if (v122 >= v123)
          {
            v124 = *(_DWORD *)(a1 + 168);
            if (!(_DWORD)v123)
            {
              v124 = 1 << -(char)__clz(v122);
              if (v122 <= 4)
                v124 = 4;
              *(_DWORD *)(a1 + 168) = v124;
            }
            if (v122 + 1 >= v124)
            {
              do
              {
                v75 = v122 + 1 >= 2 * v124;
                v124 *= 2;
              }
              while (v75);
              *(_DWORD *)(a1 + 168) = v124;
            }
            v125 = *(void **)(a1 + 160);
            v126 = 8 * v124;
            if (v125)
              v127 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v125, v126, 0xECA6AA46uLL);
            else
              v127 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v126, 0x8DDAA030uLL);
            v128 = v127;
            if (!v127)
              _log_fault_for_malloc_failure();
            *(_QWORD *)(a1 + 160) = v128;
            bzero(&v128[8 * v123], 8 * (*(unsigned int *)(a1 + 168) - v123));
          }
          v129 = *(_DWORD **)(*(_QWORD *)(a1 + 160) + 8 * v122);
          if (!v129)
          {
            v129 = CIIndexSetCreateWithRangeWithCache(0, 0x400u, v11);
            *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v122) = v129;
          }
          v260 = v122;
          LODWORD(v285) = 0;
          v130 = pointerHash((uint64_t)v129, *(_DWORD *)(*(_QWORD *)(a3 + 384) + 20));
          v131 = SharedStateGetBuffer(a3, (uint64_t)v129, v130, (int *)&v285);
          v132 = v131;
          v133 = v285;
          v134 = *(_QWORD *)(a3 + 384);
          v135 = *(NSObject **)(v134 + 160);
          v136 = *(NSObject **)(v134 + 8 * v130 + 32);
          LODWORD(v285) = v285 + 1;
          v137 = *v267;
          if (*v267)
          {
            v115 = 0;
            *(_DWORD *)(v131 + 4 * v133) = 0;
            goto LABEL_222;
          }
          queue = v136;
          v264 = v130;
          v138 = v266;
          while (1)
          {
            v58 = __OFSUB__(v110, v137);
            v110 -= v137;
            if ((v110 < 0) ^ v58 | (v110 == 0) || v110 <= 0)
            {
LABEL_352:
              v232 = __si_assert_copy_extra(0);
              goto LABEL_353;
            }
            v139 = v285;
            if ((_DWORD)v285 == 4096)
            {
              *(_DWORD *)(v132 + 4 * v133) = 4095 - v133;
              v140 = *v273;
              v141 = v285;
              dispatch_semaphore_wait(v135, 0xFFFFFFFFFFFFFFFFLL);
              *(_QWORD *)block = MEMORY[0x1E0C809B0];
              *(_QWORD *)&block[8] = 0x40000000;
              *(_QWORD *)&block[16] = ___innerIssueBuffer_block_invoke;
              *(_QWORD *)&block[24] = &__block_descriptor_tmp_63;
              v287 = v141;
              v138 = v266;
              *(_QWORD *)&block[32] = v140;
              *(_QWORD *)&block[40] = v132;
              v288 = 1;
              *(_QWORD *)&block[48] = v135;
              dispatch_async(queue, block);
              v132 = SharedStateResetBuffer(a3, (uint64_t)v129, v264, (int *)&v285);
              LODWORD(v133) = v285;
              v139 = v285 + 1;
            }
            LODWORD(v285) = v139 + 1;
            *(_DWORD *)(v132 + 4 * v139) = v110;
            v142 = *(_QWORD *)(*(_QWORD *)(a3 + 384) + 8);
            if ((int)v109 + 5 >= v142)
            {
              v143 = *(unsigned __int8 **)a3;
              v144 = *(_QWORD *)(a3 + 8) + v109;
              *(_QWORD *)(a3 + 8) = v144 & 0x3FFFFFFFFFFFF000;
              v145 = fd_pread(*(_DWORD **)(v270 + 4480), v143, v142, v144 & 0x3FFFFFFFFFFFF000);
              *(_DWORD *)(a3 + 28) = 0;
              v109 = v144 - *(_QWORD *)(a3 + 8);
              if (v145 == -1)
              {
                v147 = *v267;
                v115 = -1;
LABEL_221:
                *(_DWORD *)(v132 + 4 * v133) = v285 + ~(_DWORD)v133;
                if (v147)
                {
LABEL_222:
                  a4 = cfa;
                }
                else
                {
                  a4 = cfa;
                  if ((v285 - 4092) > 0xFFFFEFFF)
                  {
                    *(_DWORD *)(a3 + 4 * v264 + 320) = v285;
                  }
                  else
                  {
                    _issueBuffer(v135, queue, *v273, v132, v285, 1);
                    *(_DWORD *)(a3 + 4 * v264 + 320) = 0;
                    *(_QWORD *)(a3 + 8 * v264 + 192) = 0;
                  }
                }
                v116 = v268;
                v102 = v268;
                v7 = v267;
                v11 = (uint64_t)v273;
LABEL_224:
                v148 = *(_DWORD *)(a3 + 56);
                if (v148 >= v116)
                  v148 = v116;
                *(_DWORD *)(a3 + 56) = v148;
                v103 = v109;
                v149 = v115 == -1;
                v104 = v266;
                if (v149)
                  goto LABEL_347;
                goto LABEL_140;
              }
            }
            else
            {
              ++*(_DWORD *)(a3 + 28);
            }
            v146 = v109 + 1;
            v137 = v138[v109];
            if ((char)v138[v109] < 0)
            {
              if (v137 > 0xBF)
              {
                if (v137 > 0xDF)
                {
                  if (v137 > 0xEF)
                  {
                    v137 = *(_DWORD *)&v138[v146];
                    v109 += 5;
                  }
                  else
                  {
                    v137 = ((v137 & 0xF) << 24) | (v138[v146] << 16) | (v138[v109 + 2] << 8) | v138[v109 + 3];
                    v109 += 4;
                  }
                }
                else
                {
                  v137 = ((v137 & 0x1F) << 16) | (v138[v146] << 8) | v138[v109 + 2];
                  v109 += 3;
                }
              }
              else
              {
                v109 += 2;
                v137 = v138[v146] | ((v137 & 0x3F) << 8);
              }
            }
            else
            {
              ++v109;
            }
            v147 = *v267;
            if (!v137)
            {
              v115 = 0;
              goto LABEL_221;
            }
            if (*v267)
            {
              v115 = 0;
              *(_DWORD *)(v132 + 4 * v133) = v285 + ~(_DWORD)v133;
              goto LABEL_222;
            }
          }
        }
        *v7 = 1;
        v230 = *__error();
        v231 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v231, OS_LOG_TYPE_ERROR))
        {
          v240 = *(_QWORD *)(a3 + 8) + v109;
          v241 = *(_QWORD *)(**(_QWORD **)(a3 + 384) + 24);
          v242 = *(_QWORD *)(**(_QWORD **)(a3 + 384) + 32);
          *(_DWORD *)block = 136316674;
          *(_QWORD *)&block[4] = "_CIPositionIterate_Compressed";
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 3127;
          *(_WORD *)&block[18] = 1024;
          *(_DWORD *)&block[20] = v268;
          *(_WORD *)&block[24] = 2048;
          *(_QWORD *)&block[26] = v240;
          *(_WORD *)&block[34] = 2048;
          *(_QWORD *)&block[36] = v242;
          *(_WORD *)&block[44] = 2048;
          *(_QWORD *)&block[46] = v241;
          *(_WORD *)&block[54] = 1024;
          v287 = 1;
          _os_log_error_impl(&dword_1B8270000, v231, OS_LOG_TYPE_ERROR, "%s:%d: Rogue nil position at docID %d off %llu size %llu(%llu), Rogue nil count %d. Canceling _CIPositionIterate_NewCompressed", block, 0x3Cu);
        }
        *__error() = v230;
        if (dword_1EF19FCB4 >= 5)
        {
          v254 = *__error();
          v255 = _SILogForLogForCategory(10);
          if (os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)block = 0x104000100;
            _os_log_impl(&dword_1B8270000, v255, OS_LOG_TYPE_DEFAULT, "%d rogue nil positions were found (use debug log level to see them all)", block, 8u);
          }
          *__error() = v254;
        }
LABEL_347:
        instr_release(*(CFTypeRef *)(a1 + 24));
        result = 0;
        *(_DWORD *)(a1 + 148) = 0;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        if (*v7)
          return result;
        PositionIterator_GetNext(a1);
        v175 = (uint64_t *)a1;
        v176 = v258;
LABEL_268:
        if ((iterationIsLooping(v175, v176) & 1) == 0)
          return *(_QWORD *)a1 != 0;
        return 0;
      }
LABEL_40:
      PositionIterator_GetNext(a1);
      *(_QWORD *)(a1 + 32) = 0;
      return *(_QWORD *)a1 != 0;
    }
LABEL_359:
    v232 = __si_assert_copy_extra(0);
LABEL_353:
    __message_assert("%s:%u: failed assertion '%s' %s ");
LABEL_354:
    free(v232);
    if (__valid_fs(-1))
      v233 = 2989;
    else
      v233 = 3072;
    *(_DWORD *)v233 = -559038737;
    abort();
  }
  if (a5 != 1)
    goto LABEL_359;
  v15 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_40;
  v16 = *(unsigned __int8 **)a3;
  v17 = *v13;
  if (dword_1EF19FCB4 >= 5)
  {
    v245 = *__error();
    v246 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT))
    {
      v247 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)block = 134218496;
      *(_QWORD *)&block[4] = a1;
      *(_WORD *)&block[12] = 2048;
      *(_QWORD *)&block[14] = v15;
      *(_WORD *)&block[22] = 2048;
      *(_QWORD *)&block[24] = v247;
      _os_log_impl(&dword_1B8270000, v246, OS_LOG_TYPE_DEFAULT, "%p %llu %p", block, 0x20u);
    }
    *__error() = v245;
    v13 = *(uint64_t **)(a3 + 384);
  }
  v18 = *(_QWORD *)(a3 + 8);
  v19 = v13[1];
  if (v15 < v18 || (v19 + v18 > v15 ? (v20 = v15 + 30 > v19 + v18) : (v20 = 1), v20))
  {
    *(_QWORD *)(a3 + 8) = v15 & 0x3FFFFFFFFFFFF000;
    if (fd_pread(*(_DWORD **)(v17 + 4480), v16, v19, v15 & 0x3FFFFFFFFFFFF000) == -1)
      return 0;
    cf = a4;
    *(_DWORD *)(a3 + 28) = 0;
    v18 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    cf = a4;
    ++*(_DWORD *)(a3 + 28);
  }
  v272 = v15;
  v37 = v15 - v18;
  v279 = 0uLL;
  *(_QWORD *)&v280 = 0;
  _CIIndexSetInitializeEnumeratorForRange(*(_DWORD **)(a1 + 24), (uint64_t)&v279, *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20));
  v38 = 0;
  v39 = 0;
  while (1)
  {
    v40 = _CIIndexSetEnumeratorNext((unsigned int *)&v279);
    if (!v40)
      goto LABEL_134;
    v41 = v40;
    v42 = *(_QWORD *)(*(_QWORD *)(a3 + 384) + 8);
    if ((int)v37 + 5 >= v42)
    {
      v43 = *(unsigned __int8 **)a3;
      v44 = *(_QWORD *)(a3 + 8) + v37;
      *(_QWORD *)(a3 + 8) = v44 & 0x3FFFFFFFFFFFF000;
      v45 = fd_pread(*(_DWORD **)(v17 + 4480), v43, v42, v44 & 0x3FFFFFFFFFFFF000);
      *(_DWORD *)(a3 + 28) = 0;
      if (v45 == -1)
        goto LABEL_134;
      v37 = v44 - *(_QWORD *)(a3 + 8);
    }
    else
    {
      ++*(_DWORD *)(a3 + 28);
    }
    v46 = v37 + 1;
    v47 = v16[v37];
    if (((char)v16[v37] & 0x80000000) == 0)
    {
      v48 = v37 + 1;
      goto LABEL_61;
    }
    v48 = v37 + 2;
    v49 = (char)v16[v46];
    v50 = v16[v46];
    if ((v49 & 0x80000000) == 0)
    {
      v47 = v47 & 0x7F | (v50 << 7);
      goto LABEL_61;
    }
    v51 = v37 + 3;
    v52 = v16[v48];
    if (((char)v16[v48] & 0x80000000) == 0)
    {
      v48 = v37 + 3;
      v47 = ((v50 & 0x7F) << 7) | (v52 << 14) | v47 & 0x7F;
      goto LABEL_61;
    }
    v48 = v37 + 4;
    v53 = (char)v16[v51];
    v54 = v16[v51];
    if ((v53 & 0x80000000) == 0)
    {
      v47 = ((v52 & 0x7F) << 14) | (v54 << 21) | ((v50 & 0x7F) << 7) | v47 & 0x7F;
      goto LABEL_61;
    }
    v55 = (char)v16[v48];
    if (v55 < 0)
    {
LABEL_373:
      v232 = __si_assert_copy_extra(0);
      __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
      goto LABEL_354;
    }
    v48 = v37 + 5;
    v47 = ((v54 & 0x7F) << 21) | (v55 << 28) | ((v52 & 0x7F) << 14) | ((v50 & 0x7F) << 7) | v47 & 0x7F;
LABEL_61:
    if (!v47)
      break;
    if ((CIIndexSetHasIndex((uint64_t)cf, v41) & 1) != 0)
    {
      if (v38)
      {
        if (v38 - v41 != 1)
          v39 += lockedCountItemsInRange(cf, v41 + 1, v38 - 1, v56);
        ++v39;
      }
      else
      {
        v39 = lockedCountItemsInRange(cf, v41 + 1, *(_DWORD *)(a3 + 24), v56);
      }
      v73 = *(unsigned int *)(a1 + 168);
      if (v39 >= v73)
      {
        v74 = *(_DWORD *)(a1 + 168);
        if (!(_DWORD)v73)
        {
          v74 = 1 << -(char)__clz(v39);
          if (v39 <= 4)
            v74 = 4;
          *(_DWORD *)(a1 + 168) = v74;
        }
        if (v39 + 1 >= v74)
        {
          do
          {
            v75 = v39 + 1 >= 2 * v74;
            v74 *= 2;
          }
          while (v75);
          *(_DWORD *)(a1 + 168) = v74;
        }
        v76 = *(void **)(a1 + 160);
        v77 = 8 * v74;
        if (v76)
          v78 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v76, v77, 0xECA6AA46uLL);
        else
          v78 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v77, 0x8DDAA030uLL);
        v79 = v78;
        if (!v78)
          _log_fault_for_malloc_failure();
        *(_QWORD *)(a1 + 160) = v79;
        bzero(&v79[8 * v73], 8 * (*(unsigned int *)(a1 + 168) - v73));
      }
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v39))
        *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v39) = CIIndexSetCreateWithRange(0, 0x400u, 1);
      v80 = 0;
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                v58 = __OFSUB__(v47, v80);
                v47 -= v80;
                if ((v47 < 0) ^ v58 | (v47 == 0) || v47 <= 0)
                  goto LABEL_352;
                CIIndexSetAddIndexExpandingRange(*(const void ***)(*(_QWORD *)(a1 + 160) + 8 * v39), v47, v56);
                v81 = *(_QWORD *)(*(_QWORD *)(a3 + 384) + 8);
                if ((int)v48 + 5 >= v81)
                {
                  v82 = *(unsigned __int8 **)a3;
                  v83 = *(_QWORD *)(a3 + 8) + v48;
                  *(_QWORD *)(a3 + 8) = v83 & 0x3FFFFFFFFFFFF000;
                  v84 = fd_pread(*(_DWORD **)(v17 + 4480), v82, v81, v83 & 0x3FFFFFFFFFFFF000);
                  *(_DWORD *)(a3 + 28) = 0;
                  if (v84 == -1)
                    goto LABEL_131;
                  v48 = v83 - *(_QWORD *)(a3 + 8);
                }
                else
                {
                  ++*(_DWORD *)(a3 + 28);
                }
                v85 = v48 + 1;
                v80 = v16[v48];
                if ((char)v16[v48] < 0)
                  break;
                ++v48;
                if (!v80)
                  goto LABEL_127;
              }
              v86 = v48 + 2;
              v87 = (char)v16[v85];
              v88 = v16[v85];
              if (v87 < 0)
                break;
              v80 = v80 & 0x7F | (v88 << 7);
              v48 += 2;
              if (!v80)
                goto LABEL_127;
            }
            v89 = v48 + 3;
            v90 = (char)v16[v86];
            v91 = v16[v86];
            if (v90 < 0)
              break;
            v48 += 3;
            v80 = ((v88 & 0x7F) << 7) | (v91 << 14) | v80 & 0x7F;
            if (!v80)
              goto LABEL_127;
          }
          v92 = (char)v16[v89];
          v93 = v16[v89];
          if (v92 < 0)
            break;
          v48 += 4;
          v80 = ((v91 & 0x7F) << 14) | (v93 << 21) | ((v88 & 0x7F) << 7) | v80 & 0x7F;
          if (!v80)
            goto LABEL_127;
        }
        v94 = (char)v16[v48 + 4];
        if (v94 < 0)
          break;
        v48 += 5;
        v80 = ((v93 & 0x7F) << 21) | (v94 << 28) | ((v91 & 0x7F) << 14) | ((v88 & 0x7F) << 7) | v80 & 0x7F;
        if (!v80)
        {
LABEL_127:
          v38 = v41;
          goto LABEL_128;
        }
      }
      v243 = __si_assert_copy_extra(0);
      __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
LABEL_362:
      free(v243);
      if (__valid_fs(-1))
        v244 = 2989;
      else
        v244 = 3072;
      *(_DWORD *)v244 = -559038737;
      abort();
    }
    v57 = 0;
    do
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              v58 = __OFSUB__(v47, v57);
              v47 -= v57;
              if ((v47 < 0) ^ v58 | (v47 == 0))
                goto LABEL_361;
              if (v47 <= 0)
                goto LABEL_352;
              v59 = *(_QWORD *)(*(_QWORD *)(a3 + 384) + 8);
              if ((int)v48 + 5 >= v59)
              {
                v60 = *(unsigned __int8 **)a3;
                v61 = *(_QWORD *)(a3 + 8) + v48;
                *(_QWORD *)(a3 + 8) = v61 & 0x3FFFFFFFFFFFF000;
                v62 = fd_pread(*(_DWORD **)(v17 + 4480), v60, v59, v61 & 0x3FFFFFFFFFFFF000);
                *(_DWORD *)(a3 + 28) = 0;
                if (v62 == -1)
                {
LABEL_131:
                  v96 = *(_DWORD *)(a3 + 56);
                  if (v96 >= v41)
                    v96 = v41;
                  *(_DWORD *)(a3 + 56) = v96;
                  goto LABEL_134;
                }
                v48 = v61 - *(_QWORD *)(a3 + 8);
              }
              else
              {
                ++*(_DWORD *)(a3 + 28);
              }
              v63 = v48 + 1;
              v57 = v16[v48];
              if ((char)v16[v48] < 0)
                break;
              ++v48;
              if (!v57)
                goto LABEL_128;
            }
            v64 = v48 + 2;
            v65 = (char)v16[v63];
            v66 = v16[v63];
            if (v65 < 0)
              break;
            v57 = v57 & 0x7F | (v66 << 7);
            v48 += 2;
            if (!v57)
              goto LABEL_128;
          }
          v67 = v48 + 3;
          v68 = (char)v16[v64];
          v69 = v16[v64];
          if (v68 < 0)
            break;
          v48 += 3;
          v57 = ((v66 & 0x7F) << 7) | (v69 << 14) | v57 & 0x7F;
          if (!v57)
            goto LABEL_128;
        }
        v70 = (char)v16[v67];
        v71 = v16[v67];
        if (v70 < 0)
          break;
        v48 += 4;
        v57 = ((v69 & 0x7F) << 14) | (v71 << 21) | ((v66 & 0x7F) << 7) | v57 & 0x7F;
        if (!v57)
          goto LABEL_128;
      }
      v72 = (char)v16[v48 + 4];
      if (v72 < 0)
        goto LABEL_373;
      v48 += 5;
      v57 = ((v71 & 0x7F) << 21) | (v72 << 28) | ((v69 & 0x7F) << 14) | ((v66 & 0x7F) << 7) | v57 & 0x7F;
    }
    while (v57);
LABEL_128:
    v95 = *(_DWORD *)(a3 + 56);
    if (v95 >= v41)
      v95 = v41;
    *(_DWORD *)(a3 + 56) = v95;
    v37 = v48;
  }
  v150 = *__error();
  v151 = _SILogForLogForCategory(10);
  if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
  {
    v234 = *(_QWORD *)(a3 + 8) + v48;
    v235 = *(_QWORD *)(**(_QWORD **)(a3 + 384) + 24);
    v236 = *(_QWORD *)(**(_QWORD **)(a3 + 384) + 32);
    *(_DWORD *)block = 136316418;
    *(_QWORD *)&block[4] = "_SLPositionIterate_Compressed";
    *(_WORD *)&block[12] = 1024;
    *(_DWORD *)&block[14] = 3396;
    *(_WORD *)&block[18] = 1024;
    *(_DWORD *)&block[20] = v41;
    *(_WORD *)&block[24] = 2048;
    *(_QWORD *)&block[26] = v234;
    *(_WORD *)&block[34] = 2048;
    *(_QWORD *)&block[36] = v236;
    *(_WORD *)&block[44] = 2048;
    *(_QWORD *)&block[46] = v235;
    _os_log_error_impl(&dword_1B8270000, v151, OS_LOG_TYPE_ERROR, "%s:%d: Rogue nil position at docID %d off %llu size %llu(%llu)", block, 0x36u);
  }
  *__error() = v150;
  if (dword_1EF19FCB4 >= 5)
  {
    v152 = *__error();
    v153 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)block = 0x104000100;
      _os_log_impl(&dword_1B8270000, v153, OS_LOG_TYPE_DEFAULT, "%d rogue nil positions were found (use debug log level to see them all)", block, 8u);
    }
    *__error() = v152;
  }
LABEL_134:
  instr_release(*(CFTypeRef *)(a1 + 24));
  *(_DWORD *)(a1 + 148) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  PositionIterator_GetNext(a1);
  IsLooping = iterationIsLooping((uint64_t *)a1, v272);
  result = 0;
  if ((IsLooping & 1) == 0)
    return *(_QWORD *)a1 != 0;
  return result;
}

uint64_t readCompactPosition_9290(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t *v9;
  size_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  const char *v18;
  uint64_t v19;

  v4 = *(_QWORD *)(a1 + 176);
  if (!v4)
  {
    v8 = *a2;
    v9 = *(uint64_t **)(a1 + 384);
    v10 = v9[1];
    if (*a2 + 4 >= v10)
    {
      v11 = *v9;
      v12 = *(void **)a1;
      v13 = *(_QWORD *)(a1 + 8) + v8;
      *(_QWORD *)(a1 + 8) = v13 & 0x3FFFFFFFFFFFF000;
      v14 = fd_pread(*(_DWORD **)(v11 + 4480), v12, v10, v13 & 0x3FFFFFFFFFFFF000);
      *(_DWORD *)(a1 + 28) = 0;
      if (v14 == -1)
        return 0xFFFFFFFFLL;
      v8 = v13 - *(_QWORD *)(a1 + 8);
    }
    else
    {
      ++*(_DWORD *)(a1 + 28);
    }
    v15 = *(unsigned int *)(*(_QWORD *)a1 + v8);
    *a3 = v8;
    __asm { BR              X13 }
  }
  if (v4 >= 0x1D)
  {
    v16 = __si_assert_copy_extra(0);
    v17 = v16;
    v18 = "";
    if (v16)
      v18 = v16;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 2408, "context->readAheadAvailable <= 28", v18);
    free(v17);
    if (__valid_fs(-1))
      v19 = 2989;
    else
      v19 = 3072;
    *(_DWORD *)v19 = -559038737;
    abort();
  }
  v5 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v4 - 1;
  *(_QWORD *)(a1 + 184) = v5 + 1;
  return *(unsigned int *)(a1 + 4 * v5 + 60);
}

BOOL isStopWord(char *a1)
{
  size_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t ***v9;
  uint64_t **i;
  unint64_t v11;

  StopWords();
  v2 = strlen(a1);
  v3 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)a1, v2);
  v4 = *((_QWORD *)&StopWords(void)::_stopWords + 1);
  if (!*((_QWORD *)&StopWords(void)::_stopWords + 1))
    goto LABEL_19;
  v5 = v3;
  v6 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&StopWords(void)::_stopWords + 8));
  v6.i16[0] = vaddlv_u8(v6);
  v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    v8 = v3;
    if (v3 >= *((_QWORD *)&StopWords(void)::_stopWords + 1))
      v8 = v3 % *((_QWORD *)&StopWords(void)::_stopWords + 1);
  }
  else
  {
    v8 = (*((_QWORD *)&StopWords(void)::_stopWords + 1) - 1) & v3;
  }
  v9 = *(uint64_t ****)(StopWords(void)::_stopWords + 8 * v8);
  if (v9)
  {
    for (i = *v9; i; i = (uint64_t **)*i)
    {
      v11 = (unint64_t)i[1];
      if (v11 == v5)
      {
        if (i[3] == (uint64_t *)v2 && !memcmp(i[2], a1, v2))
          break;
      }
      else
      {
        if (v7 > 1)
        {
          if (v11 >= v4)
            v11 %= v4;
        }
        else
        {
          v11 &= v4 - 1;
        }
        if (v11 != v8)
          goto LABEL_19;
      }
    }
  }
  else
  {
LABEL_19:
    i = 0;
  }
  StopWords();
  return i != 0;
}

void StopWords(void)
{
  unsigned __int8 v0;

  {
    StopWords(void)::_stopWords = 0u;
    *(_OWORD *)&qword_1EDBBDAF0 = 0u;
    dword_1EDBBDB00 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_set<std::string_view>::~unordered_set[abi:nn180100], &StopWords(void)::_stopWords, &dword_1B8270000);
  }
  if (StopWords(void)::onceToken != -1)
    dispatch_once(&StopWords(void)::onceToken, &__block_literal_global_9318);
}

uint64_t ___ZL9StopWordsv_block_invoke()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char **v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ***v11;
  uint64_t **i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v44;
  void *__p[2];
  __int128 v46;
  float v47;

  v0 = 0;
  v1 = 0;
  v2 = 0;
  *(_OWORD *)__p = 0u;
  v46 = 0u;
  v47 = 1.0;
  do
  {
    v3 = &(&off_1E6E36248)[2 * v2];
    v4 = (uint64_t *)*v3;
    v5 = (unint64_t)v3[1];
    v6 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100]((uint64_t *)*v3, v5);
    v7 = v6;
    if (v0)
    {
      v8 = (uint8x8_t)vcnt_s8((int8x8_t)v0);
      v8.i16[0] = vaddlv_u8(v8);
      v9 = v8.u32[0];
      if (v8.u32[0] > 1uLL)
      {
        v10 = v6;
        if (v6 >= v0)
          v10 = v6 % v0;
      }
      else
      {
        v10 = (v0 - 1) & v6;
      }
      v11 = (uint64_t ***)*((_QWORD *)__p[0] + v10);
      if (v11)
      {
        v44 = v2;
        for (i = *v11; i; i = (uint64_t **)*i)
        {
          v13 = (unint64_t)i[1];
          if (v13 == v7)
          {
            if (i[3] == (uint64_t *)v5 && !memcmp(i[2], v4, v5))
            {
              v2 = v44;
              goto LABEL_77;
            }
          }
          else
          {
            if (v9 > 1)
            {
              if (v13 >= v0)
                v13 %= v0;
            }
            else
            {
              v13 &= v0 - 1;
            }
            if (v13 != v10)
              break;
          }
        }
        v2 = v44;
      }
    }
    else
    {
      v10 = 0;
    }
    v14 = operator new(0x20uLL);
    *v14 = 0;
    v14[1] = v7;
    *((_OWORD *)v14 + 1) = *(_OWORD *)v3;
    v15 = (float)(unint64_t)(v1 + 1);
    if (!v0 || (float)(v47 * (float)v0) < v15)
    {
      v16 = (v0 & (v0 - 1)) != 0;
      if (v0 < 3)
        v16 = 1;
      v17 = v16 | (2 * v0);
      v18 = vcvtps_u32_f32(v15 / v47);
      if (v17 <= v18)
        prime = (int8x8_t)v18;
      else
        prime = (int8x8_t)v17;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v0 = (unint64_t)__p[1];
      }
      if (*(_QWORD *)&prime > v0)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v0)
      {
        v26 = vcvtps_u32_f32((float)*((unint64_t *)&v46 + 1) / v47);
        if (v0 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v0), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
        {
          v26 = std::__next_prime(v26);
        }
        else
        {
          v28 = 1 << -(char)__clz(v26 - 1);
          if (v26 >= 2)
            v26 = v28;
        }
        if (*(_QWORD *)&prime <= v26)
          prime = (int8x8_t)v26;
        if (*(_QWORD *)&prime >= v0)
        {
          v0 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v20 = operator new(8 * *(_QWORD *)&prime);
            v21 = __p[0];
            __p[0] = v20;
            if (v21)
              operator delete(v21);
            v22 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v22++) = 0;
            while (*(_QWORD *)&prime != v22);
            v23 = (_QWORD **)v46;
            if ((_QWORD)v46)
            {
              v24 = *(_QWORD *)(v46 + 8);
              v25 = (uint8x8_t)vcnt_s8(prime);
              v25.i16[0] = vaddlv_u8(v25);
              if (v25.u32[0] > 1uLL)
              {
                if (v24 >= *(_QWORD *)&prime)
                  v24 %= *(_QWORD *)&prime;
              }
              else
              {
                v24 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v24) = &v46;
              for (j = *v23; j; v24 = v30)
              {
                v30 = j[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*((_QWORD *)__p[0] + v30))
                  {
                    *((_QWORD *)__p[0] + v30) = v23;
                    goto LABEL_58;
                  }
                  *v23 = (_QWORD *)*j;
                  *j = **((_QWORD **)__p[0] + v30);
                  **((_QWORD **)__p[0] + v30) = j;
                  j = v23;
                }
                v30 = v24;
LABEL_58:
                v23 = (_QWORD **)j;
                j = (_QWORD *)*j;
              }
            }
            v0 = (unint64_t)prime;
            goto LABEL_62;
          }
          v34 = __p[0];
          __p[0] = 0;
          if (v34)
            operator delete(v34);
          v0 = 0;
          __p[1] = 0;
        }
      }
LABEL_62:
      if ((v0 & (v0 - 1)) != 0)
      {
        if (v7 >= v0)
          v10 = v7 % v0;
        else
          v10 = v7;
      }
      else
      {
        v10 = (v0 - 1) & v7;
      }
    }
    v31 = __p[0];
    v32 = (_QWORD *)*((_QWORD *)__p[0] + v10);
    if (v32)
    {
      *v14 = *v32;
LABEL_75:
      *v32 = v14;
      goto LABEL_76;
    }
    *v14 = v46;
    *(_QWORD *)&v46 = v14;
    v31[v10] = &v46;
    if (*v14)
    {
      v33 = *(_QWORD *)(*v14 + 8);
      if ((v0 & (v0 - 1)) != 0)
      {
        if (v33 >= v0)
          v33 %= v0;
      }
      else
      {
        v33 &= v0 - 1;
      }
      v32 = (char *)__p[0] + 8 * v33;
      goto LABEL_75;
    }
LABEL_76:
    v1 = ++*((_QWORD *)&v46 + 1);
LABEL_77:
    ++v2;
  }
  while (v2 != 200);
  if (*((_QWORD *)&xmmword_1EDBBDAF0 + 1))
  {
    v35 = (_QWORD *)xmmword_1EDBBDAF0;
    if ((_QWORD)xmmword_1EDBBDAF0)
    {
      do
      {
        v36 = (_QWORD *)*v35;
        operator delete(v35);
        v35 = v36;
      }
      while (v36);
    }
    *(_QWORD *)&xmmword_1EDBBDAF0 = 0;
    v37 = *((_QWORD *)&StopWords(void)::_stopWords + 1);
    if (*((_QWORD *)&StopWords(void)::_stopWords + 1))
    {
      v38 = 0;
      do
        *(_QWORD *)(StopWords(void)::_stopWords + 8 * v38++) = 0;
      while (v37 != v38);
    }
    *((_QWORD *)&xmmword_1EDBBDAF0 + 1) = 0;
  }
  v39 = __p[0];
  __p[0] = 0;
  v40 = (void *)StopWords(void)::_stopWords;
  *(_QWORD *)&StopWords(void)::_stopWords = v39;
  if (v40)
    operator delete(v40);
  v41 = (unint64_t)__p[1];
  __p[1] = 0;
  xmmword_1EDBBDAF0 = v46;
  dword_1EDBBDB00 = LODWORD(v47);
  *((_QWORD *)&StopWords(void)::_stopWords + 1) = v41;
  if (*((_QWORD *)&v46 + 1))
  {
    v42 = *(_QWORD *)(v46 + 8);
    if ((v41 & (v41 - 1)) != 0)
    {
      if (v42 >= v41)
        v42 %= v41;
    }
    else
    {
      v42 &= v41 - 1;
    }
    *(_QWORD *)(StopWords(void)::_stopWords + 8 * v42) = &xmmword_1EDBBDAF0;
    v46 = 0uLL;
  }
  return std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table((uint64_t)__p);
}

const __CFDictionary *decodeEmbeddingData(CFDataRef data)
{
  const __CFArray *v1;
  const __CFArray *v2;
  CFTypeID v3;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v5;
  CFTypeID v6;
  const void *Value;

  v1 = (const __CFArray *)CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], data, 0, 0, 0);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = CFGetTypeID(v1);
  if (v3 != CFArrayGetTypeID() || !CFArrayGetCount(v2))
    goto LABEL_8;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v2, 0);
  v5 = ValueAtIndex;
  if (ValueAtIndex)
  {
    v6 = CFGetTypeID(ValueAtIndex);
    if (v6 == CFDictionaryGetTypeID())
    {
      Value = CFDictionaryGetValue(v5, CFSTR("vec_data"));
      if (Value)
      {
        v5 = (const __CFDictionary *)CFRetain(Value);
        goto LABEL_9;
      }
    }
LABEL_8:
    v5 = 0;
  }
LABEL_9:
  CFRelease(v2);
  return v5;
}

uint64_t MDUnicodeConverterGetTypeID()
{
  if (MDUnicodeConverterGetTypeID_once != -1)
    dispatch_once(&MDUnicodeConverterGetTypeID_once, &__block_literal_global_9528);
  return __kMDUnicodeConverterTypeID;
}

double __MDUnicodeConverterInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void __MDUnicodeConverterFinalize(uint64_t a1)
{
  free(*(void **)(a1 + 16));
}

unint64_t MDUnicodeConverterConvert(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v5;
  _WORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = a2;
  *a3 = a1[2];
  if (a2)
  {
    v5 = a1[3];
    if (v5 > a2)
    {
      v6 = (_WORD *)a1[2];
      if ((v6[v5 - a2] & 0xF800) == 0xD800)
        v3 = a2 + 1;
      v7 = 2 * v5 - 2 * v3;
      v8 = v3;
      do
      {
        *v6 = *(_WORD *)((char *)v6 + v7);
        ++v6;
        --v8;
      }
      while (v8);
    }
  }
  if (a1[5])
  {
    if ((CFStringEncodingBytesToUnicode() & 0xFFFFFFFD) != 0)
    {
      v9 = 0;
      v3 = 0;
    }
    else
    {
      v10 = a1[5];
      a1[4] = a1[4];
      v9 = v10;
    }
    a1[5] = v9;
  }
  return v3;
}

BOOL MDUnicodeConverterIsFinal(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) == 0;
}

char *copyLocTermFromNumber(const void *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;
  const char *v8;
  uint64_t v9;
  char __s1;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[31];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((int)a2 <= 0)
  {
    v6 = __si_assert_copy_extra_268();
    v7 = v6;
    v8 = "";
    if (v6)
      v8 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 134, "field >= 1", v8);
    free(v7);
    if (__valid_fs(-1))
      v9 = 2989;
    else
      v9 = 3072;
    *(_DWORD *)v9 = -559038737;
    abort();
  }
  memset(v25, 0, sizeof(v25));
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  __s1 = 4;
  v2 = a2 >> 28;
  v11 = 0u;
  if (a2 >> 28)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    BYTE2(v11) = (a2 >> 14) | 0x80;
    BYTE3(v11) = (a2 >> 21) | 0x80;
    v3 = 6;
    v4 = 5;
  }
  else if ((a2 & 0xFE00000) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    BYTE2(v11) = (a2 >> 14) | 0x80;
    v2 = (a2 & 0xFE00000) >> 21;
    v3 = 5;
    v4 = 4;
  }
  else if ((a2 & 0x1FC000) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    v2 = (a2 & 0x1FC000) >> 14;
    v3 = 4;
    v4 = 3;
  }
  else if ((a2 & 0x3F80) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    v2 = (unsigned __int16)(a2 & 0x3F80) >> 7;
    v3 = 3;
    v4 = 2;
  }
  else
  {
    v3 = 2;
    v4 = 1;
    LOBYTE(v2) = a2;
  }
  *(&__s1 + v4) = v2;
  FlattenCFTypeToBuffer(a1, &__s1 + v3);
  return strdup(&__s1);
}

_BYTE *copyQueryTerm(const char *a1, unsigned int a2)
{
  size_t v4;
  size_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = strlen(a1);
  v5 = v4;
  v6 = 5;
  v7 = a2 >> 28;
  v8 = 1;
  if ((a2 & 0x3F80) != 0)
    v8 = 2;
  if ((a2 & 0x1FC000) != 0)
    v8 = 3;
  if ((a2 & 0xFE00000) != 0)
    v8 = 4;
  if (!v7)
    v6 = v8;
  v9 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v4 + v6 + 3, 0x6085D6BuLL);
  if (!v9)
    _log_fault_for_malloc_failure();
  if ((int)a2 < 2)
  {
    memcpy(v9, a1, v5);
  }
  else
  {
    *v9 = 1;
    if (v7)
    {
      v9[1] = a2 | 0x80;
      v9[2] = (a2 >> 7) | 0x80;
      v9[3] = (a2 >> 14) | 0x80;
      v9[4] = (a2 >> 21) | 0x80;
      v10 = 6;
      v11 = 5;
    }
    else if ((a2 & 0xFE00000) != 0)
    {
      v9[1] = a2 | 0x80;
      v9[2] = (a2 >> 7) | 0x80;
      v9[3] = (a2 >> 14) | 0x80;
      v7 = (a2 & 0xFE00000) >> 21;
      v10 = 5;
      v11 = 4;
    }
    else if ((a2 & 0x1FC000) != 0)
    {
      v9[1] = a2 | 0x80;
      v9[2] = (a2 >> 7) | 0x80;
      v7 = (a2 & 0x1FC000) >> 14;
      v10 = 4;
      v11 = 3;
    }
    else if ((a2 & 0x3F80) != 0)
    {
      v9[1] = a2 | 0x80;
      v7 = (unsigned __int16)(a2 & 0x3F80) >> 7;
      v10 = 3;
      v11 = 2;
    }
    else
    {
      v10 = 2;
      v11 = 1;
      LOBYTE(v7) = a2;
    }
    v9[v11] = v7;
    memcpy(&v9[v10], a1, v5);
    v5 += v10;
  }
  v9[v5] = 0;
  return v9;
}

CFNumberRef copyCFNumberFloatTermFromString(char *a1)
{
  const char *v1;
  uint64_t v2;
  char *v3;
  unsigned int v4;
  char *v6;
  char *v7;
  const char *v8;
  uint64_t v9;
  float valuePtr;
  char *v11;

  v1 = a1;
  if (*a1 == 1)
  {
    if (a1[1] < 0)
    {
      if (a1[2] < 0)
      {
        if (a1[3] < 0)
        {
          if (a1[4] < 0)
          {
            if (a1[5] < 0)
            {
              v6 = __si_assert_copy_extra_268();
              v7 = v6;
              v8 = "";
              if (v6)
                v8 = v6;
              __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", "VIntUtils.h", 341, "(b4 & 0x80) == 0", v8);
              free(v7);
              if (__valid_fs(-1))
                v9 = 2989;
              else
                v9 = 3072;
              *(_DWORD *)v9 = -559038737;
              abort();
            }
            v2 = 5;
          }
          else
          {
            v2 = 4;
          }
        }
        else
        {
          v2 = 3;
        }
      }
      else
      {
        v2 = 2;
      }
    }
    else
    {
      v2 = 1;
    }
    v1 = &a1[v2 + 1];
  }
  v11 = 0;
  valuePtr = strtof(v1, &v11);
  v3 = v11;
  if (v11 == v1)
    return 0;
  v4 = *v11;
  if (v4 == 42)
  {
    ++v11;
    v4 = v3[1];
  }
  if (v4 > 1)
    return 0;
  else
    return CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
}

void oqdispose_PositionOffset_t(unsigned __int8 *a1)
{
  uint64_t v1;
  int v2;

  v2 = *a1;
  v1 = (uint64_t)(a1 + 8);
  if (v2)
    oqdispose_PositionOffsetWithMeta_t(v1);
  else
    oqdispose_JustPositionOffset_t(v1);
}

__n128 oqpush_AnnotatedPositionOffset_t(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  size_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  char *v20;
  uint64_t v21;

  if (*(_DWORD *)(a1 + 48))
  {
    if (*(_QWORD *)(a1 + 56) < *(_QWORD *)a2)
    {
      v20 = __si_assert_copy_extra_268();
      v6 = v20;
      v7 = "";
      if (v20)
        v7 = v20;
      v8 = "!queue->split || queue->splitPoint >= AnnotatedPositionOffset_t_GET_VALUE(value)";
LABEL_20:
      __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.h", 25, v8, v7);
      free(v6);
      if (__valid_fs(-1))
        v21 = 2989;
      else
        v21 = 3072;
      *(_DWORD *)v21 = -559038737;
      abort();
    }
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= *(_QWORD *)(a1 + 16))
    {
      v5 = __si_assert_copy_extra_268();
      v6 = v5;
      v7 = "";
      if (v5)
        v7 = v5;
      v8 = "!queue->split";
      goto LABEL_20;
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= v9)
    {
      v10 = 2 * v9;
      if (!v9)
        v10 = 4;
      *(_QWORD *)(a1 + 16) = v10;
      v11 = *(void **)(a1 + 8);
      v12 = 56 * v10;
      if (v11)
        v13 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v11, v12, 0xECA6AA46uLL);
      else
        v13 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v12, 0x8DDAA030uLL);
      v14 = v13;
      if (!v13)
        _log_fault_for_malloc_failure();
      *(_QWORD *)(a1 + 8) = v14;
      v4 = *(_QWORD *)(a1 + 24);
    }
  }
  v15 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 24) = v4 + 1;
  v16 = v15 + 56 * v4;
  result = *(__n128 *)a2;
  v18 = *(_OWORD *)(a2 + 16);
  v19 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(v16 + 16) = v18;
  *(_OWORD *)(v16 + 32) = v19;
  *(__n128 *)v16 = result;
  return result;
}

void oqdispose(uint64_t a1)
{
  free(*(void **)(a1 + 16));
}

uint64_t TermTrieMatchRangeChars(uint64_t result, uint64_t a2, uint64_t a3, __CFSet *a4, uint64_t a5, int a6)
{
  uint64_t v10;
  int8x8_t *v11;
  uint64_t v12;
  uint64_t v13;
  int8x8_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint8x8_t v17;
  uint8x8_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  if ((result & 3) == 1)
  {
    v21 = 0;
    v22 = a6;
    v23 = a6 + 1;
    v24 = (result & 0xFFFFFFFFFFFFFFFCLL) + 8;
    do
    {
      if (*(_QWORD *)(v24 + 8 * v21))
      {
        *(_BYTE *)(a5 + v22) = tcmr[v21];
        *(_BYTE *)(a5 + v23) = 0;
        result = _TermTrieMatchRangeChars(*(_QWORD *)(v24 + 8 * v21), a2, a3, a4, a5, v23);
      }
      ++v21;
    }
    while (v21 != 256);
  }
  else if ((result & 3) == 2)
  {
    v10 = 0;
    v11 = (int8x8_t *)(result & 0xFFFFFFFFFFFFFFFCLL);
    v12 = a6;
    v13 = a6 + 1;
    v14 = (int8x8_t *)((result & 0xFFFFFFFFFFFFFFFCLL) + 8);
    while ((((unsigned __int32)v11[1].i32[v10 >> 5] >> v10) & 1) == 0)
    {
LABEL_12:
      if (++v10 == 256)
        return result;
    }
    v15 = 0;
    *(_BYTE *)(a5 + v12) = tcmr[v10];
    *(_BYTE *)(a5 + v13) = 0;
    v16 = v10 >> 6;
    if (v10 >> 6 != 1)
    {
      if (v16 != 2)
      {
        if (v16 != 3)
        {
LABEL_11:
          v20 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v14[v16] & ~(-1 << v10)));
          v20.i16[0] = vaddlv_u8(v20);
          result = _TermTrieMatchRangeChars(*(_QWORD *)&v11[v20.u32[0] + 6 + v15], a2, a3, a4, a5, v13);
          goto LABEL_12;
        }
        v17 = (uint8x8_t)vcnt_s8(v11[3]);
        v17.i16[0] = vaddlv_u8(v17);
        v15 = v17.u32[0];
      }
      v18 = (uint8x8_t)vcnt_s8(v11[2]);
      v18.i16[0] = vaddlv_u8(v18);
      v15 += v18.u32[0];
    }
    v19 = (uint8x8_t)vcnt_s8(*v14);
    v19.i16[0] = vaddlv_u8(v19);
    v15 += v19.u32[0];
    goto LABEL_11;
  }
  return result;
}

void __termUpdateSetResolveQueryInfo_block_invoke(uint64_t a1, const void **a2, int a3)
{
  const void ***v3;
  __CFSet *v5;
  const void *v6;

  v3 = (const void ***)a2;
  if (a3 != 1)
  {
    if (a3 != 2)
    {
      if (a3 != 3)
        return;
      v5 = *(__CFSet **)(a1 + 32);
      goto LABEL_9;
    }
    v6 = *a2;
    if (!*v3)
      return;
    CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), v6);
  }
  a2 = *v3;
  if (!*v3)
    return;
  v5 = *(__CFSet **)(a1 + 32);
LABEL_9:
  CFSetAddValue(v5, a2);
}

void __termUpdateSetResolveQueryInfo_block_invoke_2(uint64_t a1, const void *a2)
{
  CFSetAddValue(**(CFMutableSetRef **)(a1 + 104), a2);
}

void __termUpdateSetResolveQueryInfo_block_invoke_3(uint64_t a1, const void *a2)
{
  CFSetAddValue(**(CFMutableSetRef **)(a1 + 104), a2);
}

void __term_trie_resolve_fuzzy_transition_block_invoke(uint64_t a1, uint64_t a2)
{
  CFSetAddValue(**(CFMutableSetRef **)(a1 + 32), (const void *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
}

void __term_trie_resolve_fuzzy_transition_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  char *v11;
  void *v12;
  size_t v13;
  char *v14;
  char *v15;

  if (a3)
  {
    v5 = la_new_state_from_state_with_char_at_index(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), (*(_BYTE *)(a3 + 16) + *(_QWORD *)(a1 + 64)));
    v7 = v6;
    if (!v5)
      return;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a1 + 40);
    if (!v5)
      return;
  }
  if ((~(_BYTE)a2 & 3) != 0)
  {
    v8 = *(int **)(a1 + 80);
    v10 = *v8;
    v9 = v8[1];
    if (v9 >= *v8)
    {
      *v8 = 2 * v10;
      v12 = (void *)*((_QWORD *)v8 + 1);
      v13 = 48 * v10;
      if (v12)
        v14 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v12, v13, 0xECA6AA46uLL);
      else
        v14 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v13, 0x8DDAA030uLL);
      v11 = v14;
      if (!v14)
        _log_fault_for_malloc_failure();
      *((_QWORD *)v8 + 1) = v11;
      v9 = v8[1];
    }
    else
    {
      v11 = (char *)*((_QWORD *)v8 + 1);
    }
    v15 = &v11[24 * v9];
    *(_QWORD *)v15 = a2;
    *((_QWORD *)v15 + 1) = v5;
    *((_QWORD *)v15 + 2) = v7;
    ++v8[1];
  }
  else
  {
    CFSetAddValue(**(CFMutableSetRef **)(a1 + 72), (const void *)(a2 & 0xFFFFFFFFFFFFFFFCLL));
  }
}

uint64_t _term_trie_resolve_sub_trie(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  int8x8_t *v14;
  uint64_t *i;
  uint64_t *v16;
  uint8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8x8_t v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  int8x8_t *v24;
  int8x8_t *v25;
  uint64_t v26;
  int8x8_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  uint8x8_t v33;

  if (result)
  {
    v7 = result;
    if (a2 && *(_BYTE *)(a2 + 18))
    {
      if (*(unsigned __int8 *)(a2 + 16) != 255)
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, result, a2);
      if ((~(_DWORD)v7 & 3) == 0)
        return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, v7);
      if ((a3 & 1) != 0)
      {
        v10 = 0;
        v11 = 0;
        v12 = v7 & 3;
        v13 = v7 & 0xFFFFFFFFFFFFFFFCLL;
        v14 = (int8x8_t *)(v13 + 8);
        for (i = (uint64_t *)(v13 + 8); ; ++i)
        {
          if (v12 == 2)
          {
            if (((*(_DWORD *)(v13 + 4 * (v10 >> 5) + 8) >> v10) & 1) == 0)
              goto LABEL_18;
            if (v10 >> 6 == 1)
            {
              v17 = (uint8x8_t)vcnt_s8(*v14);
              v17.i16[0] = vaddlv_u8(v17);
              v18 = v17.u32[0];
            }
            else
            {
              v18 = 0;
            }
            v20 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v14[v10 >> 6] & ~(-1 << v10)));
            v20.i16[0] = vaddlv_u8(v20);
            v16 = (uint64_t *)(v13 + 8 * (v20.u32[0] + v18) + 48);
          }
          else if (v12 != 1 || (v16 = i, !v13))
          {
LABEL_18:
            v19 = 0;
            goto LABEL_22;
          }
          v19 = *v16;
LABEL_22:
          if (v11 < *(unsigned __int8 *)(a2 + 18) && v10 == *(unsigned __int8 *)(*(_QWORD *)a2 + v11))
          {
            if (v19)
              result = _term_trie_resolve_sub_trie(v19, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v11), 1, a4, a5);
            ++v11;
          }
          else if (v19)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a5 + 16))(a5, v19, 0);
          }
          if (++v10 == 128)
            return result;
        }
      }
      v21 = *(unsigned __int8 *)(a2 + 18);
      if (*(_BYTE *)(a2 + 18))
      {
        v22 = 0;
        v23 = v7 & 3;
        v24 = (int8x8_t *)(v7 & 0xFFFFFFFFFFFFFFFCLL);
        v25 = v24 + 1;
        do
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)a2 + v22);
          if (v23 == 2)
          {
            if ((((unsigned __int32)v24[1].i32[v26 >> 5] >> v26) & 1) != 0)
            {
              v28 = 0;
              v29 = v26 >> 6;
              if (v26 >> 6 == 1)
                goto LABEL_43;
              if (v29 == 2)
                goto LABEL_42;
              if (v29 == 3)
              {
                v30 = (uint8x8_t)vcnt_s8(v24[3]);
                v30.i16[0] = vaddlv_u8(v30);
                v28 = v30.u32[0];
LABEL_42:
                v31 = (uint8x8_t)vcnt_s8(v24[2]);
                v31.i16[0] = vaddlv_u8(v31);
                v28 += v31.u32[0];
LABEL_43:
                v32 = (uint8x8_t)vcnt_s8(*v25);
                v32.i16[0] = vaddlv_u8(v32);
                v28 += v32.u32[0];
              }
              v33 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v25[v29] & ~(-1 << v26)));
              v33.i16[0] = vaddlv_u8(v33);
              v27 = &v24[v33.u32[0] + 6 + v28];
LABEL_45:
              result = (uint64_t)*v27;
              if (*v27)
              {
                result = _term_trie_resolve_sub_trie(result, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * v22), 0, a4, a5);
                v21 = *(unsigned __int8 *)(a2 + 18);
              }
            }
          }
          else if (v23 == 1 && v24)
          {
            v27 = &v24[v26 + 1];
            goto LABEL_45;
          }
          ++v22;
        }
        while (v22 < v21);
      }
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, result, a2);
    }
  }
  return result;
}

void term_trie_resolve_combining(int8x8_t *a1, CFMutableSetRef theSet, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint8x8_t v14;
  uint64_t v15;
  unsigned int v16;
  int8x8_t v17;
  unint64_t v18;
  uint64_t v19;
  uint8x8_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  int8x8_t *v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int8x8_t *v28;
  unint64_t v29;
  uint8x8_t v30;
  uint8x8_t v31;
  uint8x8_t v32;
  uint8x8_t v33;
  unint64_t v34;
  int v35;
  uint8x8_t v36;
  uint64_t v37;
  uint8x8_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint8x8_t v43;
  uint64_t v44;
  uint8x8_t v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  int8x8_t v50;
  char v51;
  char v52;
  int8x8_t *v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  int8x8_t *v57;
  unint64_t v58;
  uint8x8_t v59;
  uint8x8_t v60;
  uint8x8_t v61;
  uint8x8_t v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  int8x8_t v66;
  char v67;
  char v68;
  int8x8_t *v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  int8x8_t *v73;
  unint64_t v74;
  uint8x8_t v75;
  uint8x8_t v76;
  uint8x8_t v77;
  uint8x8_t v78;
  unsigned int v79;
  _BYTE v80[3];
  __int128 v81;
  int8x8_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  *(_WORD *)&v80[1] = 0;
  v80[0] = -52;
  v6 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL;
  v7 = *(_QWORD *)a1 & 3;
  if ((_DWORD)v7 == 1)
  {
    v9 = *(_QWORD *)(v6 + 272);
    if (!v9)
      goto LABEL_12;
    goto LABEL_7;
  }
  if ((_DWORD)v7 == 2 && (*(_BYTE *)(v6 + 12) & 2) != 0)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(v6 + 8) & 0x1FFFFFFFFLL));
    v8.i16[0] = vaddlv_u8(v8);
    v9 = *(_QWORD *)(v6 + 8 * v8.u32[0] + 48);
    if (v9)
    {
LABEL_7:
      if ((~(_BYTE)v9 & 3) != 0)
      {
        v10 = 128;
        do
        {
          v80[1] = v10;
          v81 = *(_OWORD *)a1->i8;
          v82 = a1[2];
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          _term_trie_resolve_sub_string_ignore_diacritics((int8x8_t *)&v81, v80, 2, a3, theSet, (uint64_t)&v83, 0);
          v11 = v10++ >= 0xBF;
        }
        while (!v11);
      }
      else
      {
        CFSetAddValue(theSet, (const void *)(v9 & 0xFFFFFFFFFFFFFFFCLL));
      }
    }
  }
LABEL_12:
  v80[0] = -51;
  v12 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL;
  v13 = *(_QWORD *)a1 & 3;
  if ((_DWORD)v13 == 1)
  {
    v15 = *(_QWORD *)(v12 + 280);
    if (!v15)
      goto LABEL_23;
    goto LABEL_18;
  }
  if ((_DWORD)v13 == 2 && (*(_BYTE *)(v12 + 12) & 4) != 0)
  {
    v14 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(v12 + 8) & 0x3FFFFFFFFLL));
    v14.i16[0] = vaddlv_u8(v14);
    v15 = *(_QWORD *)(v12 + 8 * v14.u32[0] + 48);
    if (v15)
    {
LABEL_18:
      if ((~(_BYTE)v15 & 3) != 0)
      {
        v16 = 128;
        do
        {
          v80[1] = v16;
          v81 = *(_OWORD *)a1->i8;
          v82 = a1[2];
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          _term_trie_resolve_sub_string_ignore_diacritics((int8x8_t *)&v81, v80, 2, a3, theSet, (uint64_t)&v83, 0);
          v11 = v16++ >= 0xDF;
        }
        while (!v11);
      }
      else
      {
        CFSetAddValue(theSet, (const void *)(v15 & 0xFFFFFFFFFFFFFFFCLL));
      }
    }
  }
LABEL_23:
  v80[0] = 45;
  v17 = *a1;
  v18 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL;
  v19 = *(_QWORD *)a1 & 3;
  if ((_DWORD)v19 != 1)
  {
    if ((_DWORD)v19 != 2)
      goto LABEL_31;
    if ((*(_BYTE *)(v18 + 12) & 8) == 0)
      goto LABEL_31;
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(v18 + 8) & 0x7FFFFFFFFLL));
    v20.i16[0] = vaddlv_u8(v20);
    v21 = *(_QWORD *)(v18 + 8 * v20.u32[0] + 48);
    if (!v21)
      goto LABEL_31;
LABEL_29:
    if ((~(_BYTE)v21 & 3) == 0)
    {
      CFSetAddValue(theSet, (const void *)(v21 & 0xFFFFFFFFFFFFFFFCLL));
      v17 = *a1;
    }
    goto LABEL_31;
  }
  v21 = *(_QWORD *)(v18 + 288);
  if (v21)
    goto LABEL_29;
LABEL_31:
  v22 = 0;
  *(_WORD *)v80 = -32542;
  v80[2] = -112;
  v23 = v17;
  while (1)
  {
    v24 = (int8x8_t *)(*(_QWORD *)&v23 & 0xFFFFFFFFFFFFFFFCLL);
    v25 = v23.i8[0] & 3;
    if (v25 == 1)
    {
      v23 = v24[*((unsigned __int8 *)&tcm + v80[v22]) + 1];
      if (!*(_QWORD *)&v23)
        goto LABEL_51;
      goto LABEL_44;
    }
    if (v25 != 2)
      break;
    v26 = *((unsigned __int8 *)&tcm + v80[v22]);
    if (((*(unsigned __int32 *)((char *)v24[1].i32 + ((v26 >> 3) & 0x1C)) >> v26) & 1) == 0)
      goto LABEL_51;
    v27 = 0;
    v28 = v24 + 1;
    v29 = v26 >> 6;
    if ((v26 >> 6) != 1)
    {
      if ((_DWORD)v29 != 2)
      {
        if ((_DWORD)v29 != 3)
          goto LABEL_41;
        v30 = (uint8x8_t)vcnt_s8(v24[3]);
        v30.i16[0] = vaddlv_u8(v30);
        v27 = v30.u32[0];
      }
      v31 = (uint8x8_t)vcnt_s8(v24[2]);
      v31.i16[0] = vaddlv_u8(v31);
      v27 += v31.u32[0];
    }
    v32 = (uint8x8_t)vcnt_s8(*v28);
    v32.i16[0] = vaddlv_u8(v32);
    v27 += v32.u32[0];
LABEL_41:
    v33 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v28[v29] & ~(-1 << v26)));
    v33.i16[0] = vaddlv_u8(v33);
    v23 = v24[v33.u32[0] + 6 + v27];
    if (!*(_QWORD *)&v23)
      goto LABEL_51;
LABEL_44:
    if (++v22 == 3)
      goto LABEL_49;
  }
  if (v25 != 3 || !(_DWORD)v22)
    goto LABEL_51;
  *(_QWORD *)&v23 |= 3uLL;
LABEL_49:
  if ((~v23.i8[0] & 3) == 0)
  {
    CFSetAddValue(theSet, (const void *)(*(_QWORD *)&v23 & 0xFFFFFFFFFFFFFFFCLL));
    v17 = *a1;
  }
LABEL_51:
  v80[0] = -42;
  v34 = *(_QWORD *)&v17 & 0xFFFFFFFFFFFFFFFCLL;
  v35 = v17.i8[0] & 3;
  if (v35 == 1)
  {
    v39 = *(_QWORD *)(v34 + 1720);
    if (!v39)
      goto LABEL_62;
    goto LABEL_57;
  }
  if (v35 == 2 && (*(_BYTE *)(v34 + 34) & 0x40) != 0)
  {
    v36 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v34 + 8));
    v36.i16[0] = vaddlv_u8(v36);
    v37 = v36.u32[0]
        + vaddvq_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v34 + 16))))));
    v38 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(v34 + 32) & 0x3FFFFFLL));
    v38.i16[0] = vaddlv_u8(v38);
    v39 = *(_QWORD *)(v34 + 8 * (v38.u32[0] + v37) + 48);
    if (v39)
    {
LABEL_57:
      if ((~(_BYTE)v39 & 3) != 0)
      {
        v40 = 145;
        do
        {
          v80[1] = v40;
          v81 = *(_OWORD *)a1->i8;
          v82 = a1[2];
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          _term_trie_resolve_sub_string_ignore_diacritics((int8x8_t *)&v81, v80, 2, a3, theSet, (uint64_t)&v83, 0);
          v11 = v40++ >= 0xBF;
        }
        while (!v11);
      }
      else
      {
        CFSetAddValue(theSet, (const void *)(v39 & 0xFFFFFFFFFFFFFFFCLL));
      }
    }
  }
LABEL_62:
  v80[0] = -41;
  v41 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFCLL;
  v42 = *(_QWORD *)a1 & 3;
  if ((_DWORD)v42 == 1)
  {
    v46 = *(_QWORD *)(v41 + 1728);
    if (!v46)
      goto LABEL_73;
    goto LABEL_68;
  }
  if ((_DWORD)v42 == 2 && (*(_BYTE *)(v41 + 34) & 0x80) != 0)
  {
    v43 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v41 + 8));
    v43.i16[0] = vaddlv_u8(v43);
    v44 = v43.u32[0]
        + vaddvq_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v41 + 16))))));
    v45 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(v41 + 32) & 0x7FFFFFLL));
    v45.i16[0] = vaddlv_u8(v45);
    v46 = *(_QWORD *)(v41 + 8 * (v45.u32[0] + v44) + 48);
    if (v46)
    {
LABEL_68:
      if ((~(_BYTE)v46 & 3) != 0)
      {
        v47 = 128;
        do
        {
          v80[1] = v47;
          v81 = *(_OWORD *)a1->i8;
          v82 = a1[2];
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          _term_trie_resolve_sub_string_ignore_diacritics((int8x8_t *)&v81, v80, 2, a3, theSet, (uint64_t)&v83, 0);
          v11 = v47++ >= 0x84;
        }
        while (!v11);
      }
      else
      {
        CFSetAddValue(theSet, (const void *)(v46 & 0xFFFFFFFFFFFFFFFCLL));
      }
    }
  }
LABEL_73:
  v48 = 0;
  v49 = 0;
  *(_WORD *)v80 = -32029;
  v50 = *a1;
  v51 = 1;
  while (1)
  {
    v52 = v48;
    v53 = (int8x8_t *)(*(_QWORD *)&v50 & 0xFFFFFFFFFFFFFFFCLL);
    v54 = v50.i8[0] & 3;
    if (v54 == 1)
    {
      v50 = v53[*((unsigned __int8 *)&tcm + v80[v49]) + 1];
      if (!*(_QWORD *)&v50)
        goto LABEL_96;
      goto LABEL_86;
    }
    if (v54 != 2)
      break;
    v55 = *((unsigned __int8 *)&tcm + v80[v49]);
    if (((*(unsigned __int32 *)((char *)v53[1].i32 + ((v55 >> 3) & 0x1C)) >> v55) & 1) == 0)
      goto LABEL_96;
    v56 = 0;
    v57 = v53 + 1;
    v58 = v55 >> 6;
    if ((v55 >> 6) != 1)
    {
      if ((_DWORD)v58 != 2)
      {
        if ((_DWORD)v58 != 3)
          goto LABEL_83;
        v59 = (uint8x8_t)vcnt_s8(v53[3]);
        v59.i16[0] = vaddlv_u8(v59);
        v56 = v59.u32[0];
      }
      v60 = (uint8x8_t)vcnt_s8(v53[2]);
      v60.i16[0] = vaddlv_u8(v60);
      v56 += v60.u32[0];
    }
    v61 = (uint8x8_t)vcnt_s8(*v57);
    v61.i16[0] = vaddlv_u8(v61);
    v56 += v61.u32[0];
LABEL_83:
    v62 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v57[v58] & ~(-1 << v55)));
    v62.i16[0] = vaddlv_u8(v62);
    v50 = v53[v62.u32[0] + 6 + v56];
    if (!*(_QWORD *)&v50)
      goto LABEL_96;
LABEL_86:
    v51 = 0;
    v48 = 1;
    v49 = 1;
    if ((v52 & 1) != 0)
    {
      if ((~v50.i8[0] & 3) != 0)
      {
        v63 = 153;
        do
        {
          v80[2] = v63;
          v81 = *(_OWORD *)a1->i8;
          v82 = a1[2];
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          _term_trie_resolve_sub_string_ignore_diacritics((int8x8_t *)&v81, v80, 3, a3, theSet, (uint64_t)&v83, 0);
          v11 = v63++ >= 0x9C;
        }
        while (!v11);
        goto LABEL_96;
      }
LABEL_95:
      CFSetAddValue(theSet, (const void *)(*(_QWORD *)&v50 & 0xFFFFFFFFFFFFFFFCLL));
      goto LABEL_96;
    }
  }
  if (v54 == 3 && (v51 & 1) == 0)
  {
    *(_QWORD *)&v50 |= 3uLL;
    goto LABEL_95;
  }
LABEL_96:
  v64 = 0;
  v65 = 0;
  *(_WORD *)v80 = -16657;
  v66 = *a1;
  v67 = 1;
  while (2)
  {
    v68 = v64;
    v69 = (int8x8_t *)(*(_QWORD *)&v66 & 0xFFFFFFFFFFFFFFFCLL);
    v70 = v66.i8[0] & 3;
    if (v70 == 1)
    {
      v66 = v69[*((unsigned __int8 *)&tcm + v80[v65]) + 1];
      if (!*(_QWORD *)&v66)
        return;
      goto LABEL_109;
    }
    if (v70 == 2)
    {
      v71 = *((unsigned __int8 *)&tcm + v80[v65]);
      if (((*(unsigned __int32 *)((char *)v69[1].i32 + ((v71 >> 3) & 0x1C)) >> v71) & 1) == 0)
        return;
      v72 = 0;
      v73 = v69 + 1;
      v74 = v71 >> 6;
      if ((v71 >> 6) == 1)
        goto LABEL_105;
      if ((_DWORD)v74 == 2)
        goto LABEL_104;
      if ((_DWORD)v74 == 3)
      {
        v75 = (uint8x8_t)vcnt_s8(v69[3]);
        v75.i16[0] = vaddlv_u8(v75);
        v72 = v75.u32[0];
LABEL_104:
        v76 = (uint8x8_t)vcnt_s8(v69[2]);
        v76.i16[0] = vaddlv_u8(v76);
        v72 += v76.u32[0];
LABEL_105:
        v77 = (uint8x8_t)vcnt_s8(*v73);
        v77.i16[0] = vaddlv_u8(v77);
        v72 += v77.u32[0];
      }
      v78 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v73[v74] & ~(-1 << v71)));
      v78.i16[0] = vaddlv_u8(v78);
      v66 = v69[v78.u32[0] + 6 + v72];
      if (!*(_QWORD *)&v66)
        return;
LABEL_109:
      v67 = 0;
      v64 = 1;
      v65 = 1;
      if ((v68 & 1) != 0)
      {
        if ((~v66.i8[0] & 3) != 0)
        {
          v79 = 158;
          do
          {
            v80[2] = v79;
            v81 = *(_OWORD *)a1->i8;
            v82 = a1[2];
            v97 = 0u;
            v98 = 0u;
            v95 = 0u;
            v96 = 0u;
            v93 = 0u;
            v94 = 0u;
            v91 = 0u;
            v92 = 0u;
            v89 = 0u;
            v90 = 0u;
            v87 = 0u;
            v88 = 0u;
            v85 = 0u;
            v86 = 0u;
            v83 = 0u;
            v84 = 0u;
            _term_trie_resolve_sub_string_ignore_diacritics((int8x8_t *)&v81, v80, 3, a3, theSet, (uint64_t)&v83, 0);
            v11 = v79++ >= 0x9F;
          }
          while (!v11);
          return;
        }
LABEL_118:
        CFSetAddValue(theSet, (const void *)(*(_QWORD *)&v66 & 0xFFFFFFFFFFFFFFFCLL));
        return;
      }
      continue;
    }
    break;
  }
  if (v70 == 3 && (v67 & 1) == 0)
  {
    *(_QWORD *)&v66 |= 3uLL;
    goto LABEL_118;
  }
}

void __termUpdateSetResolveQueryInfo_block_invoke_36(uint64_t a1, const void *a2)
{
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

void __termUpdateSetResolveQueryInfo_block_invoke_2_38(uint64_t a1, const void *a2)
{
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 32), a2);
}

void term_trie_resolve_sub_string(uint64_t a1, uint64_t a2, int a3, int *a4, CFMutableSetRef theSet, __n128 a6)
{
  uint64_t i;
  int8x8_t *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  int8x8_t *v14;
  unint64_t v15;
  uint8x8_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  uint8x8_t v19;
  int v20;
  int v21;
  char *v22;
  void *v23;
  size_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  __n128 v31;

  if (a3 >= 1)
  {
    for (i = 0; a3 != i; ++i)
    {
      v10 = (int8x8_t *)(a1 & 0xFFFFFFFFFFFFFFFCLL);
      v11 = a1 & 3;
      if (v11 == 1)
      {
        a1 = (uint64_t)v10[*((unsigned __int8 *)&tcm + *(unsigned __int8 *)(a2 + i)) + 1];
        if (!a1)
          return;
        continue;
      }
      if (v11 != 2)
      {
        if (v11 != 3)
          return;
        a1 |= 3uLL;
        if (!(_DWORD)i)
          return;
        goto LABEL_17;
      }
      v12 = *((unsigned __int8 *)&tcm + *(unsigned __int8 *)(a2 + i));
      if (((*(unsigned __int32 *)((char *)v10[1].i32 + ((v12 >> 3) & 0x1C)) >> v12) & 1) == 0)
        return;
      v13 = 0;
      v14 = v10 + 1;
      v15 = v12 >> 6;
      if ((v12 >> 6) != 1)
      {
        if ((_DWORD)v15 != 2)
        {
          if ((_DWORD)v15 != 3)
            goto LABEL_12;
          v16 = (uint8x8_t)vcnt_s8(v10[3]);
          v16.i16[0] = vaddlv_u8(v16);
          v13 = v16.u32[0];
        }
        v17 = (uint8x8_t)vcnt_s8(v10[2]);
        v17.i16[0] = vaddlv_u8(v17);
        v13 += v17.u32[0];
      }
      v18 = (uint8x8_t)vcnt_s8(*v14);
      v18.i16[0] = vaddlv_u8(v18);
      v13 += v18.u32[0];
LABEL_12:
      v19 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v14[v15] & ~(-1 << v12)));
      v19.i16[0] = vaddlv_u8(v19);
      a1 = (uint64_t)v10[v19.u32[0] + 6 + v13];
      if (!a1)
        return;
    }
  }
  LODWORD(i) = a3;
  if (!a3)
    return;
LABEL_17:
  if ((~(_BYTE)a1 & 3) != 0)
  {
    if ((_DWORD)i != a3)
    {
      v27 = __si_assert_copy_extra_268();
      v28 = v27;
      v29 = "";
      if (v27)
        v29 = v27;
      __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.h", 423, "str_len==resolve_len", v29);
      free(v28);
      if (__valid_fs(-1))
        v30 = 2989;
      else
        v30 = 3072;
      *(_DWORD *)v30 = -559038737;
      abort();
    }
    v21 = *a4;
    v20 = a4[1];
    if (v20 >= *a4)
    {
      v31 = a6;
      *a4 = 2 * v21;
      v23 = (void *)*((_QWORD *)a4 + 1);
      v24 = 48 * v21;
      if (v23)
        v25 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v23, v24, 0xECA6AA46uLL);
      else
        v25 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v24, 0x8DDAA030uLL);
      v22 = v25;
      a6 = v31;
      if (!v25)
      {
        _log_fault_for_malloc_failure();
        a6 = v31;
      }
      *((_QWORD *)a4 + 1) = v22;
      v20 = a4[1];
    }
    else
    {
      v22 = (char *)*((_QWORD *)a4 + 1);
    }
    v26 = &v22[24 * v20];
    *(_QWORD *)v26 = a1;
    *(__n128 *)(v26 + 8) = a6;
    ++a4[1];
  }
  else
  {
    CFSetAddValue(theSet, (const void *)(a1 & 0xFFFFFFFFFFFFFFFCLL));
  }
}

void _term_trie_resolve_sub_string_ignore_diacritics(int8x8_t *a1, unsigned __int8 *a2, int a3, int *a4, __CFSet *a5, uint64_t a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  int8x8_t v13;
  int8x8_t *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  int8x8_t *v18;
  unint64_t v19;
  uint8x8_t v20;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  int v24;
  const void *v25;
  __CFSet *v26;
  int *v27;
  int v28;
  int v29;
  char *v30;
  _BYTE *v31;
  unint64_t v32;
  int v33;
  uint8x8_t v34;
  int8x8_t v35;
  void *v36;
  size_t v37;
  char *v38;
  int8x8_t *v39;
  uint64_t v40;
  int8x8_t *v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  int8x8_t *v45;
  unint64_t v46;
  uint8x8_t v47;
  uint8x8_t v48;
  uint8x8_t v49;
  uint8x8_t v50;
  int8x8_t v51;
  uint8x8_t v52;
  int8x8_t v53;
  int v54;
  uint64_t v55;
  int8x8_t *v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  int8x8_t *v60;
  unint64_t v61;
  uint8x8_t v62;
  uint8x8_t v63;
  uint8x8_t v64;
  uint8x8_t v65;
  int8x8_t v66;
  uint8x8_t v67;
  int8x8_t v68;
  uint64_t v69;
  uint64_t v70;
  int8x8_t *v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  int8x8_t *v75;
  unint64_t v76;
  uint8x8_t v77;
  uint8x8_t v78;
  uint8x8_t v79;
  uint8x8_t v80;
  uint8x8_t v81;
  uint64_t v82;
  uint8x8_t v83;
  int8x8_t v84;
  uint64_t v85;
  int8x8_t *v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  int8x8_t *v90;
  unint64_t v91;
  uint8x8_t v92;
  uint8x8_t v93;
  uint8x8_t v94;
  uint8x8_t v95;
  int8x8_t v96;
  uint8x8_t v97;
  uint64_t v98;
  uint8x8_t v99;
  int8x8_t v100;
  uint64_t v101;
  int8x8_t *v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  int8x8_t *v106;
  unint64_t v107;
  uint8x8_t v108;
  uint8x8_t v109;
  uint8x8_t v110;
  uint8x8_t v111;
  int8x8_t v112;
  int v113;
  __int128 v116;
  int8x8_t v117;

  if (!a3)
    return;
  v11 = 0;
  v12 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*a2 >> 4];
  v13 = *a1;
  while (1)
  {
    v14 = (int8x8_t *)(*(_QWORD *)&v13 & 0xFFFFFFFFFFFFFFFCLL);
    v15 = v13.i8[0] & 3;
    if (v15 == 1)
    {
      v13 = v14[*((unsigned __int8 *)&tcm + a2[v11]) + 1];
      if (!*(_QWORD *)&v13)
        return;
      goto LABEL_15;
    }
    if (v15 != 2)
      break;
    v16 = *((unsigned __int8 *)&tcm + a2[v11]);
    if (((*(unsigned __int32 *)((char *)v14[1].i32 + ((v16 >> 3) & 0x1C)) >> v16) & 1) == 0)
      return;
    v17 = 0;
    v18 = v14 + 1;
    v19 = v16 >> 6;
    if ((v16 >> 6) != 1)
    {
      if ((_DWORD)v19 != 2)
      {
        if ((_DWORD)v19 != 3)
          goto LABEL_12;
        v20 = (uint8x8_t)vcnt_s8(v14[3]);
        v20.i16[0] = vaddlv_u8(v20);
        v17 = v20.u32[0];
      }
      v21 = (uint8x8_t)vcnt_s8(v14[2]);
      v21.i16[0] = vaddlv_u8(v21);
      v17 += v21.u32[0];
    }
    v22 = (uint8x8_t)vcnt_s8(*v18);
    v22.i16[0] = vaddlv_u8(v22);
    v17 += v22.u32[0];
LABEL_12:
    v23 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v18[v19] & ~(-1 << v16)));
    v23.i16[0] = vaddlv_u8(v23);
    v13 = v14[v23.u32[0] + 6 + v17];
    if (!*(_QWORD *)&v13)
      return;
LABEL_15:
    if (v12 == ++v11)
    {
      v24 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*a2 >> 4];
      if (!utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*a2 >> 4])
        return;
      goto LABEL_20;
    }
  }
  if (v15 != 3)
    return;
  *(_QWORD *)&v13 |= 3uLL;
  v24 = v11;
  if (!(_DWORD)v11)
    return;
LABEL_20:
  memcpy((void *)(a6 + a7), a2, v24);
  if ((~v13.i8[0] & 3) == 0)
  {
    v25 = (const void *)(*(_QWORD *)&v13 & 0xFFFFFFFFFFFFFFFCLL);
    v26 = a5;
LABEL_22:
    CFSetAddValue(v26, v25);
    return;
  }
  v27 = a4;
  if (v24 != (_DWORD)v12)
    return;
  if (a3 == (_DWORD)v12)
  {
    v29 = *a4;
    v28 = a4[1];
    if (v28 >= *a4)
    {
      *a4 = 2 * v29;
      v36 = (void *)*((_QWORD *)a4 + 1);
      v37 = 48 * v29;
      if (v36)
        v38 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v36, v37, 0xECA6AA46uLL);
      else
        v38 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v37, 0x8DDAA030uLL);
      v27 = a4;
      v30 = v38;
      if (!v38)
      {
        _log_fault_for_malloc_failure();
        v27 = a4;
      }
      *((_QWORD *)v27 + 1) = v30;
      v28 = v27[1];
    }
    else
    {
      v30 = (char *)*((_QWORD *)a4 + 1);
    }
    v39 = (int8x8_t *)&v30[24 * v28];
    v39[1] = 0;
    v39[2] = 0;
    *v39 = v13;
    ++v27[1];
    return;
  }
  *a1 = v13;
  v116 = *(_OWORD *)a1->i8;
  v117 = a1[2];
  v113 = v24 + a7;
  _term_trie_resolve_sub_string_ignore_diacritics(&v116);
  v31 = (_BYTE *)(a6 + v24 + (uint64_t)a7);
  *v31 = -52;
  v32 = *(_QWORD *)&v13 & 0xFFFFFFFFFFFFFFFCLL;
  v33 = v13.i8[0] & 3;
  if (v33 == 1)
  {
    v35 = *(int8x8_t *)(v32 + 272);
    v26 = a5;
    if (!*(_QWORD *)&v35)
    {
      *v31 = -51;
LABEL_69:
      v53 = *(int8x8_t *)(v32 + 280);
      if (!*(_QWORD *)&v53)
      {
        *v31 = 45;
        v54 = v113;
LABEL_98:
        v68 = *(int8x8_t *)(v32 + 288);
        if (!*(_QWORD *)&v68)
          goto LABEL_103;
        goto LABEL_99;
      }
      goto LABEL_70;
    }
    goto LABEL_35;
  }
  v26 = a5;
  if (v33 != 2)
    goto LABEL_63;
  if ((*(_BYTE *)(v32 + 12) & 2) != 0)
  {
    v34 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(v32 + 8) & 0x1FFFFFFFFLL));
    v34.i16[0] = vaddlv_u8(v34);
    v35 = *(int8x8_t *)(v32 + 8 * v34.u32[0] + 48);
    if (v35)
    {
LABEL_35:
      if ((~v35.i8[0] & 3) == 0)
      {
        CFSetAddValue(v26, (const void *)(*(_QWORD *)&v35 & 0xFFFFFFFFFFFFFFFCLL));
        v26 = a5;
LABEL_63:
        *v31 = -51;
        if (v33 != 1)
        {
          if (v33 == 2)
            goto LABEL_65;
LABEL_92:
          *v31 = 45;
          v54 = v113;
          if (v33 != 1)
          {
            if (v33 == 2)
              goto LABEL_94;
            goto LABEL_103;
          }
          goto LABEL_98;
        }
        goto LABEL_69;
      }
      v40 = 0x80u;
      while (1)
      {
        *(_BYTE *)(a6 + v113 + 1) = v40;
        v41 = (int8x8_t *)(*(_QWORD *)&v35 & 0xFFFFFFFFFFFFFFFCLL);
        v42 = v35.i8[0] & 3;
        if (v42 != 1)
          break;
        v51 = v41[*((unsigned __int8 *)&tcm + v40) + 1];
        if (v51)
        {
LABEL_57:
          if ((~v51.i8[0] & 3) != 0)
          {
            *a1 = v51;
            v116 = *(_OWORD *)a1->i8;
            v117 = a1[2];
            _term_trie_resolve_sub_string_ignore_diacritics(&v116);
          }
          else
          {
            CFSetAddValue(v26, (const void *)(*(_QWORD *)&v51 & 0xFFFFFFFFFFFFFFFCLL));
          }
          v26 = a5;
          v35 = v51;
        }
LABEL_62:
        if (++v40 == 192)
          goto LABEL_63;
      }
      if (v42 == 3)
      {
        *(_QWORD *)&v35 |= 3uLL;
        goto LABEL_62;
      }
      if (v42 != 2)
        goto LABEL_62;
      v43 = *((unsigned __int8 *)&tcm + v40);
      if (((*(unsigned __int32 *)((char *)v41[1].i32 + ((v43 >> 3) & 0x1C)) >> v43) & 1) == 0)
        goto LABEL_62;
      v44 = 0;
      v45 = v41 + 1;
      v46 = v43 >> 6;
      if ((v43 >> 6) != 1)
      {
        if ((_DWORD)v46 != 2)
        {
          if ((_DWORD)v46 != 3)
            goto LABEL_54;
          v47 = (uint8x8_t)vcnt_s8(v41[3]);
          v47.i16[0] = vaddlv_u8(v47);
          v44 = v47.u32[0];
        }
        v48 = (uint8x8_t)vcnt_s8(v41[2]);
        v48.i16[0] = vaddlv_u8(v48);
        v44 += v48.u32[0];
      }
      v49 = (uint8x8_t)vcnt_s8(*v45);
      v49.i16[0] = vaddlv_u8(v49);
      v44 += v49.u32[0];
LABEL_54:
      v50 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v45[v46] & ~(-1 << v43)));
      v50.i16[0] = vaddlv_u8(v50);
      v51 = v41[v50.u32[0] + 6 + v44];
      if (v51)
        goto LABEL_57;
      goto LABEL_62;
    }
  }
  *v31 = -51;
LABEL_65:
  if ((*(_BYTE *)(v32 + 12) & 4) != 0)
  {
    v52 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(v32 + 8) & 0x3FFFFFFFFLL));
    v52.i16[0] = vaddlv_u8(v52);
    v53 = *(int8x8_t *)(v32 + 8 * v52.u32[0] + 48);
    if (v53)
    {
LABEL_70:
      if ((~v53.i8[0] & 3) == 0)
      {
        CFSetAddValue(v26, (const void *)(*(_QWORD *)&v53 & 0xFFFFFFFFFFFFFFFCLL));
        v26 = a5;
        goto LABEL_92;
      }
      v55 = 0x80u;
      while (1)
      {
        *(_BYTE *)(a6 + v113 + 1) = v55;
        v56 = (int8x8_t *)(*(_QWORD *)&v53 & 0xFFFFFFFFFFFFFFFCLL);
        v57 = v53.i8[0] & 3;
        if (v57 != 1)
          break;
        v66 = v56[*((unsigned __int8 *)&tcm + v55) + 1];
        if (v66)
        {
LABEL_86:
          if ((~v66.i8[0] & 3) != 0)
          {
            *a1 = v66;
            v116 = *(_OWORD *)a1->i8;
            v117 = a1[2];
            _term_trie_resolve_sub_string_ignore_diacritics(&v116);
          }
          else
          {
            CFSetAddValue(v26, (const void *)(*(_QWORD *)&v66 & 0xFFFFFFFFFFFFFFFCLL));
          }
          v26 = a5;
          v53 = v66;
        }
LABEL_91:
        if (++v55 == 224)
          goto LABEL_92;
      }
      if (v57 == 3)
      {
        *(_QWORD *)&v53 |= 3uLL;
        goto LABEL_91;
      }
      if (v57 != 2)
        goto LABEL_91;
      v58 = *((unsigned __int8 *)&tcm + v55);
      if (((*(unsigned __int32 *)((char *)v56[1].i32 + ((v58 >> 3) & 0x1C)) >> v58) & 1) == 0)
        goto LABEL_91;
      v59 = 0;
      v60 = v56 + 1;
      v61 = v58 >> 6;
      if ((v58 >> 6) != 1)
      {
        if ((_DWORD)v61 != 2)
        {
          if ((_DWORD)v61 != 3)
            goto LABEL_83;
          v62 = (uint8x8_t)vcnt_s8(v56[3]);
          v62.i16[0] = vaddlv_u8(v62);
          v59 = v62.u32[0];
        }
        v63 = (uint8x8_t)vcnt_s8(v56[2]);
        v63.i16[0] = vaddlv_u8(v63);
        v59 += v63.u32[0];
      }
      v64 = (uint8x8_t)vcnt_s8(*v60);
      v64.i16[0] = vaddlv_u8(v64);
      v59 += v64.u32[0];
LABEL_83:
      v65 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v60[v61] & ~(-1 << v58)));
      v65.i16[0] = vaddlv_u8(v65);
      v66 = v56[v65.u32[0] + 6 + v59];
      if (v66)
        goto LABEL_86;
      goto LABEL_91;
    }
  }
  *v31 = 45;
  v54 = v113;
LABEL_94:
  if ((*(_BYTE *)(v32 + 12) & 8) != 0)
  {
    v67 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(v32 + 8) & 0x7FFFFFFFFLL));
    v67.i16[0] = vaddlv_u8(v67);
    v68 = *(int8x8_t *)(v32 + 8 * v67.u32[0] + 48);
    if (v68)
    {
LABEL_99:
      if ((~v68.i8[0] & 3) != 0)
      {
        *a1 = v68;
        v116 = *(_OWORD *)a1->i8;
        v117 = a1[2];
        _term_trie_resolve_sub_string_ignore_diacritics(&v116);
      }
      else
      {
        CFSetAddValue(v26, (const void *)(*(_QWORD *)&v68 & 0xFFFFFFFFFFFFFFFCLL));
      }
      v26 = a5;
    }
  }
LABEL_103:
  v69 = 0;
  *v31 = -30;
  v70 = v54 + 1;
  *(_WORD *)(a6 + v70) = -28544;
  while (1)
  {
    v71 = (int8x8_t *)(*(_QWORD *)&v13 & 0xFFFFFFFFFFFFFFFCLL);
    v72 = v13.i8[0] & 3;
    if (v72 == 1)
    {
      v13 = v71[*((unsigned __int8 *)&tcm + v31[v69]) + 1];
      if (!*(_QWORD *)&v13)
        goto LABEL_125;
      goto LABEL_116;
    }
    if (v72 != 2)
      break;
    v73 = *((unsigned __int8 *)&tcm + v31[v69]);
    if (((*(unsigned __int32 *)((char *)v71[1].i32 + ((v73 >> 3) & 0x1C)) >> v73) & 1) == 0)
      goto LABEL_125;
    v74 = 0;
    v75 = v71 + 1;
    v76 = v73 >> 6;
    if ((v73 >> 6) != 1)
    {
      if ((_DWORD)v76 != 2)
      {
        if ((_DWORD)v76 != 3)
          goto LABEL_113;
        v77 = (uint8x8_t)vcnt_s8(v71[3]);
        v77.i16[0] = vaddlv_u8(v77);
        v74 = v77.u32[0];
      }
      v78 = (uint8x8_t)vcnt_s8(v71[2]);
      v78.i16[0] = vaddlv_u8(v78);
      v74 += v78.u32[0];
    }
    v79 = (uint8x8_t)vcnt_s8(*v75);
    v79.i16[0] = vaddlv_u8(v79);
    v74 += v79.u32[0];
LABEL_113:
    v80 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v75[v76] & ~(-1 << v73)));
    v80.i16[0] = vaddlv_u8(v80);
    v13 = v71[v80.u32[0] + 6 + v74];
    if (!*(_QWORD *)&v13)
      goto LABEL_125;
LABEL_116:
    if (++v69 == 3)
      goto LABEL_121;
  }
  if (v72 != 3 || !(_DWORD)v69)
    goto LABEL_125;
  *(_QWORD *)&v13 |= 3uLL;
LABEL_121:
  if ((~v13.i8[0] & 3) != 0)
  {
    *a1 = v13;
    v116 = *(_OWORD *)a1->i8;
    v117 = a1[2];
    _term_trie_resolve_sub_string_ignore_diacritics(&v116);
  }
  else
  {
    CFSetAddValue(v26, (const void *)(*(_QWORD *)&v13 & 0xFFFFFFFFFFFFFFFCLL));
  }
  v26 = a5;
LABEL_125:
  *v31 = -42;
  if (v33 == 1)
  {
    v84 = *(int8x8_t *)(v32 + 1720);
    if (!*(_QWORD *)&v84)
    {
      *v31 = -41;
LABEL_159:
      v100 = *(int8x8_t *)(v32 + 1728);
      if (!*(_QWORD *)&v100)
        return;
      goto LABEL_160;
    }
    goto LABEL_131;
  }
  if (v33 != 2)
    goto LABEL_153;
  if ((*(_BYTE *)(v32 + 34) & 0x40) != 0)
  {
    v81 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v32 + 8));
    v81.i16[0] = vaddlv_u8(v81);
    v82 = v81.u32[0]
        + vaddvq_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v32 + 16))))));
    v83 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(v32 + 32) & 0x3FFFFFLL));
    v83.i16[0] = vaddlv_u8(v83);
    v84 = *(int8x8_t *)(v32 + 8 * (v83.u32[0] + v82) + 48);
    if (v84)
    {
LABEL_131:
      if ((~v84.i8[0] & 3) == 0)
      {
        CFSetAddValue(v26, (const void *)(*(_QWORD *)&v84 & 0xFFFFFFFFFFFFFFFCLL));
        v26 = a5;
LABEL_153:
        *v31 = -41;
        if (v33 != 1)
        {
          if (v33 == 2)
            goto LABEL_155;
          return;
        }
        goto LABEL_159;
      }
      v85 = 0x91u;
      while (1)
      {
        *(_BYTE *)(a6 + v70) = v85;
        v86 = (int8x8_t *)(*(_QWORD *)&v84 & 0xFFFFFFFFFFFFFFFCLL);
        v87 = v84.i8[0] & 3;
        if (v87 != 1)
          break;
        v96 = v86[*((unsigned __int8 *)&tcm + v85) + 1];
        if (v96)
        {
LABEL_147:
          if ((~v96.i8[0] & 3) != 0)
          {
            *a1 = v96;
            v116 = *(_OWORD *)a1->i8;
            v117 = a1[2];
            _term_trie_resolve_sub_string_ignore_diacritics(&v116);
          }
          else
          {
            CFSetAddValue(v26, (const void *)(*(_QWORD *)&v96 & 0xFFFFFFFFFFFFFFFCLL));
          }
          v26 = a5;
          v84 = v96;
        }
LABEL_152:
        if (++v85 == 192)
          goto LABEL_153;
      }
      if (v87 == 3)
      {
        *(_QWORD *)&v84 |= 3uLL;
        goto LABEL_152;
      }
      if (v87 != 2)
        goto LABEL_152;
      v88 = *((unsigned __int8 *)&tcm + v85);
      if (((*(unsigned __int32 *)((char *)v86[1].i32 + ((v88 >> 3) & 0x1C)) >> v88) & 1) == 0)
        goto LABEL_152;
      v89 = 0;
      v90 = v86 + 1;
      v91 = v88 >> 6;
      if ((v88 >> 6) != 1)
      {
        if ((_DWORD)v91 != 2)
        {
          if ((_DWORD)v91 != 3)
            goto LABEL_144;
          v92 = (uint8x8_t)vcnt_s8(v86[3]);
          v92.i16[0] = vaddlv_u8(v92);
          v89 = v92.u32[0];
        }
        v93 = (uint8x8_t)vcnt_s8(v86[2]);
        v93.i16[0] = vaddlv_u8(v93);
        v89 += v93.u32[0];
      }
      v94 = (uint8x8_t)vcnt_s8(*v90);
      v94.i16[0] = vaddlv_u8(v94);
      v89 += v94.u32[0];
LABEL_144:
      v95 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v90[v91] & ~(-1 << v88)));
      v95.i16[0] = vaddlv_u8(v95);
      v96 = v86[v95.u32[0] + 6 + v89];
      if (v96)
        goto LABEL_147;
      goto LABEL_152;
    }
  }
  *v31 = -41;
LABEL_155:
  if ((*(_BYTE *)(v32 + 34) & 0x80) != 0)
  {
    v97 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v32 + 8));
    v97.i16[0] = vaddlv_u8(v97);
    v98 = v97.u32[0]
        + vaddvq_s64((int64x2_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*(int8x16_t *)(v32 + 16))))));
    v99 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)(v32 + 32) & 0x7FFFFFLL));
    v99.i16[0] = vaddlv_u8(v99);
    v100 = *(int8x8_t *)(v32 + 8 * (v99.u32[0] + v98) + 48);
    if (v100)
    {
LABEL_160:
      if ((~v100.i8[0] & 3) == 0)
      {
        v25 = (const void *)(*(_QWORD *)&v100 & 0xFFFFFFFFFFFFFFFCLL);
        goto LABEL_22;
      }
      v101 = 0x80u;
      while (1)
      {
        *(_BYTE *)(a6 + v70) = v101;
        v102 = (int8x8_t *)(*(_QWORD *)&v100 & 0xFFFFFFFFFFFFFFFCLL);
        v103 = v100.i8[0] & 3;
        if (v103 != 1)
          break;
        v112 = v102[*((unsigned __int8 *)&tcm + v101) + 1];
        if (v112)
        {
LABEL_176:
          if ((~v112.i8[0] & 3) != 0)
          {
            *a1 = v112;
            v116 = *(_OWORD *)a1->i8;
            v117 = a1[2];
            _term_trie_resolve_sub_string_ignore_diacritics(&v116);
          }
          else
          {
            CFSetAddValue(v26, (const void *)(*(_QWORD *)&v112 & 0xFFFFFFFFFFFFFFFCLL));
          }
          v26 = a5;
          v100 = v112;
        }
LABEL_181:
        if (++v101 == 133)
          return;
      }
      if (v103 == 3)
      {
        *(_QWORD *)&v100 |= 3uLL;
        goto LABEL_181;
      }
      if (v103 != 2)
        goto LABEL_181;
      v104 = *((unsigned __int8 *)&tcm + v101);
      if (((*(unsigned __int32 *)((char *)v102[1].i32 + ((v104 >> 3) & 0x1C)) >> v104) & 1) == 0)
        goto LABEL_181;
      v105 = 0;
      v106 = v102 + 1;
      v107 = v104 >> 6;
      if ((v104 >> 6) != 1)
      {
        if ((_DWORD)v107 != 2)
        {
          if ((_DWORD)v107 != 3)
            goto LABEL_173;
          v108 = (uint8x8_t)vcnt_s8(v102[3]);
          v108.i16[0] = vaddlv_u8(v108);
          v105 = v108.u32[0];
        }
        v109 = (uint8x8_t)vcnt_s8(v102[2]);
        v109.i16[0] = vaddlv_u8(v109);
        v105 += v109.u32[0];
      }
      v110 = (uint8x8_t)vcnt_s8(*v106);
      v110.i16[0] = vaddlv_u8(v110);
      v105 += v110.u32[0];
LABEL_173:
      v111 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v106[v107] & ~(-1 << v104)));
      v111.i16[0] = vaddlv_u8(v111);
      v112 = v102[v111.u32[0] + 6 + v105];
      if (v112)
        goto LABEL_176;
      goto LABEL_181;
    }
  }
}

uint64_t flat_levels_cf_set_applier2(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  _OWORD v9[8];
  uint64_t v10;

  v3 = result;
  v4 = 0;
  v10 = *MEMORY[0x1E0C80C00];
  memset(v9, 0, sizeof(v9));
  do
  {
    for (; v3; v3 = *(_QWORD *)v3 & 0x7FFFFFFFFFFFFFFFLL)
    {
      if (*(_DWORD *)(a2 + 8) == *(_DWORD *)(v3 + 24))
      {
        v7 = *(_QWORD *)(v3 + 16);
        v5 = *(unsigned int *)(v3 + 28);
        v8 = *(_DWORD *)(v3 + 24);
        LODWORD(v7) = 0;
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *, uint64_t, _QWORD))a2)(*(unsigned __int16 *)(v3 + 32), v3 + 34, &v7, v5, *(_QWORD *)(a2 + 16));
      }
      if ((*(_QWORD *)(v3 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        *((_QWORD *)v9 + v4++) = *(_QWORD *)(v3 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    }
    v6 = __OFSUB__(v4--, 1);
    if (v4 < 0 != v6)
      break;
    v3 = *((_QWORD *)v9 + v4);
  }
  while (v3);
  return result;
}

uint64_t __termUpdateSetResolveQueryInfo_block_invoke_3_49(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, float, char))(*(_QWORD *)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32), a2, *(_QWORD *)(a1 + 40), 0, 0, 0, *(unsigned int *)(a1 + 96), 0, 0.0, v3);
}

uint64_t __termUpdateSetResolveQueryInfo_block_invoke_4(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a1 + 40) + 56))(*(_QWORD *)(a1 + 40));
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t localizedFieldTermMatch_9606(uint64_t a1, int a2, unsigned __int8 *a3, int a4, int a5)
{
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  _BOOL4 v29;
  int v30;

  if (a2)
  {
    if (a2 == 1 && (a5 & 8) == 0)
    {
      if (*a3 >= 4u)
      {
        v6 = a4;
        v7 = a3[a4 - 1];
        if ((a5 & 0x800) == 0)
        {
          if (v7 != 1)
          {
            if (v7 != 3)
              return 0;
            v8 = &a3[a4];
            if (*(v8 - 2) != 1)
              return 0;
            goto LABEL_40;
          }
LABEL_41:
          v16 = a3[v6 - 2];
LABEL_42:
          if (v16 != 1)
            return 0;
          return icu_search_match();
        }
        if (v7 == 4)
          goto LABEL_41;
        if (v7 != 3)
          return 0;
        v8 = &a3[a4];
        if (*(v8 - 2) != 4)
          return 0;
LABEL_40:
        v16 = *(v8 - 3);
        goto LABEL_42;
      }
      return 0;
    }
    if (a2 == 5)
    {
      if ((a5 & 0x800) != 0)
      {
        v6 = a4;
        v10 = a3[a4 - 1];
        if (v10 == 5)
          goto LABEL_41;
        if (v10 != 3)
          return 0;
        v8 = &a3[a4];
        if (*(v8 - 2) != 5)
          return 0;
        goto LABEL_40;
      }
      return 0;
    }
    if (*a3 != 1)
      return 0;
    if (a3[1] == 2)
    {
      v11 = 2;
    }
    else
    {
      if ((a5 & 8) != 0)
        return 0;
      if (a4 > 2)
      {
        v17 = a3[a4 - 1];
        if (v17 == 3)
        {
          if (a3[a4 - 2] == 1 && a3[a4 - 3] == 1)
            return 0;
          v11 = 1;
          goto LABEL_58;
        }
        v11 = 1;
LABEL_56:
        if (v17 == 1 && a3[a4 - 2] == 1)
          return 0;
LABEL_58:
        v19 = v11 + 1;
        v20 = a3[v11];
        if (((char)a3[v11] & 0x80000000) == 0)
        {
          if (!a3[v11])
            return 0;
          goto LABEL_70;
        }
        v21 = (char)a3[v19];
        v22 = a3[v19];
        if ((v21 & 0x80000000) == 0)
        {
          v20 = v20 & 0x7F | (v22 << 7);
          if (!v20)
            return 0;
          goto LABEL_70;
        }
        v23 = v11 + 3;
        v24 = a3[v11 + 2];
        if ((char)a3[v11 + 2] < 0)
        {
          v26 = (char)a3[v23];
          v27 = a3[v23];
          if (v26 < 0)
          {
            v20 = ((v27 & 0x7F) << 21) | (a3[v11 | 4] << 28) | ((v24 & 0x7F) << 14) | ((v22 & 0x7F) << 7) | v20 & 0x7F;
            if (!v20)
              return 0;
            goto LABEL_70;
          }
          v25 = ((v24 & 0x7F) << 14) | (v27 << 21) | ((v22 & 0x7F) << 7) | v20 & 0x7F;
        }
        else
        {
          v25 = ((v22 & 0x7F) << 7) | (v24 << 14) | v20 & 0x7F;
        }
        v20 = v25;
        if (!v25)
          return 0;
LABEL_70:
        v18 = 0;
        v29 = a2 == 1 || v20 == a2;
        if (v20 >= 6 && v29)
        {
          if (a2 != 1)
            return icu_search_match();
          if ((a5 & 8) == 0)
            return icu_search_match();
          v30 = a3[a4 - 1];
          if (v30 == 1)
            return icu_search_match();
          v18 = 0;
          if (a4 >= 3 && v30 == 3)
          {
            if (a3[a4 - 2] != 1 || a3[a4 - 3] != 1)
              return 0;
            return icu_search_match();
          }
        }
        return v18;
      }
      v11 = 1;
    }
    if (a4 < 2)
      goto LABEL_58;
    v17 = a3[a4 - 1];
    goto LABEL_56;
  }
  if (*a3 < 4u)
    return 0;
  v9 = a3[a4 - 1];
  if ((a5 & 0x800) != 0)
  {
    if (v9 != 1)
      return 0;
    v12 = a3[a4-- - 2];
    if (v12 == 1)
      return 0;
  }
  else
  {
    if (v9 == 1)
      return 0;
    if (v9 == 2 && a3[a4 - 2] == 1)
    {
      if ((a5 & 0x3180) != 0)
        return 0;
      a4 -= 2;
    }
  }
  v13 = a3[a4 - 1];
  if (v13 == 5)
  {
    v14 = &a3[a4];
    v15 = *(v14 - 2);
    if ((v15 - 6) < 0xFFFFFFFC || *(v14 - 3) != 1)
      return 0;
    if ((a5 & 0x78000000) != 0)
    {
      switch(v15)
      {
        case 4:
          if ((a5 & 0x20000000) == 0)
            return 0;
          break;
        case 3:
          if ((a5 & 0x10000000) == 0)
            return 0;
          break;
        case 2:
          if ((a5 & 0x8000000) == 0)
            return 0;
          break;
        default:
          if ((a5 & 0x40000000) == 0)
            return 0;
          break;
      }
    }
    return icu_search_match();
  }
  v18 = 0;
  if ((a5 & 0x78000000) == 0 && v13 > 4)
    return icu_search_match();
  return v18;
}

uint64_t termPropertyID_9607(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t result;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  char *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  BOOL v18;
  char *v19;
  int v20;
  unsigned int v21;
  int v22;
  char *v23;
  char *v24;
  const char *v25;
  uint64_t v26;

  if (a2 < 2)
    return 0;
  if (*a1 > 3u)
  {
    v13 = &a1[a2];
    v14 = v13 - 6;
    if (a2 < 6)
      v14 = a1 + 1;
    v15 = (char)*(v13 - 1);
    if (v15 < 0)
      return 0;
    v17 = *(v13 - 2);
    v16 = v13 - 2;
    v18 = v17 == 1 && v15 == 3;
    v19 = (char *)(v18 ? v16 - 1 : v16);
    if (v19 <= (char *)v14)
    {
LABEL_27:
      v20 = *v19;
    }
    else
    {
      while (*v19 < 0)
      {
        if (--v19 <= (char *)v14)
        {
          v19 = (char *)v14;
          goto LABEL_27;
        }
      }
      v20 = *v19;
    }
    if (v20 != 1)
      return 0;
    result = v19[1];
    if (v19[1] < 0)
    {
      v5 = v19[2];
      if (v19[2] < 0)
      {
        v6 = v19[3];
        if (v19[3] < 0)
        {
          v7 = v19[4];
          if (v19[4] < 0)
          {
            v8 = v19[5];
            if (v8 < 0)
            {
              v23 = __si_assert_copy_extra_268();
              v24 = v23;
              v25 = "";
              if (v23)
                v25 = v23;
              __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", "VIntUtils.h", 341, "(b4 & 0x80) == 0", v25);
              free(v24);
              if (__valid_fs(-1))
                v26 = 2989;
              else
                v26 = 3072;
              *(_DWORD *)v26 = -559038737;
              abort();
            }
            goto LABEL_38;
          }
LABEL_36:
          v22 = ((v6 & 0x7F) << 14) | (v7 << 21);
LABEL_39:
          v21 = v22 & 0xFFFFC07F | ((v5 & 0x7F) << 7);
          return v21 & 0xFFFFFF80 | result & 0x7F;
        }
LABEL_34:
        v21 = ((v5 & 0x7F) << 7) | (v6 << 14);
        return v21 & 0xFFFFFF80 | result & 0x7F;
      }
      return result & 0x7F | (v5 << 7);
    }
  }
  else
  {
    v4 = (char)a1[1];
    result = a1[1];
    if (v4 < 0)
    {
      v5 = a1[2];
      if ((char)a1[2] < 0)
      {
        v6 = a1[3];
        if ((char)a1[3] < 0)
        {
          v7 = a1[4];
          if ((char)a1[4] < 0)
          {
            v8 = (char)a1[5];
            if (v8 < 0)
            {
              v9 = __si_assert_copy_extra_268();
              v10 = v9;
              v11 = "";
              if (v9)
                v11 = v9;
              __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", "VIntUtils.h", 341, "(b4 & 0x80) == 0", v11);
              free(v10);
              if (__valid_fs(-1))
                v12 = 2989;
              else
                v12 = 3072;
              *(_DWORD *)v12 = -559038737;
              abort();
            }
LABEL_38:
            v22 = ((v7 & 0x7F) << 21) | (v8 << 28) | ((v6 & 0x7F) << 14);
            goto LABEL_39;
          }
          goto LABEL_36;
        }
        goto LABEL_34;
      }
      return result & 0x7F | (v5 << 7);
    }
  }
  return result;
}

uint64_t _TermTrieMatchRangeChars(uint64_t result, uint64_t a2, uint64_t a3, CFMutableSetRef theSet, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  const void *v19;

  v11 = result;
  v12 = 0;
  do
  {
    v13 = *(unsigned __int8 *)(a5 + v12);
    if (!*(_BYTE *)(a5 + v12))
      break;
    v14 = *(unsigned __int8 *)(a2 + v12);
    if (!*(_BYTE *)(a2 + v12))
      break;
    if (v13 < v14)
      return result;
    ++v12;
  }
  while (v13 <= v14);
  v15 = 0;
  do
  {
    v16 = *(unsigned __int8 *)(a5 + v15);
    if (!*(_BYTE *)(a5 + v15))
      break;
    v17 = *(unsigned __int8 *)(a3 + v15);
    if (v16 > v17)
      return result;
    ++v15;
  }
  while (v16 >= v17);
  v18 = result & 3;
  switch(v18)
  {
    case 1:
      goto LABEL_13;
    case 3:
      v19 = (const void *)(result & 0xFFFFFFFFFFFFFFFCLL);
      if ((result & 0xFFFFFFFFFFFFFFFCLL) == 0)
        return TermTrieMatchRangeChars(v11, a2, a3, theSet, a5, a6);
      goto LABEL_14;
    case 2:
LABEL_13:
      v19 = *(const void **)(result & 0xFFFFFFFFFFFFFFFCLL);
      if (v19)
LABEL_14:
        CFSetAddValue(theSet, v19);
      break;
  }
  return TermTrieMatchRangeChars(v11, a2, a3, theSet, a5, a6);
}

uint64_t _CIMatchesNodeByDocId(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a2;
  v27 = 0;
  v26 = 0;
  v6 = __CIMatchQueryNodesLazy(a1, 0, 1, (uint64_t)&v28, &v26, a3, 0, a4, &v27);
  if (!v6)
    return 0;
  v7 = (unsigned int *)v6;
  v21 = 0u;
  v25 = 0u;
  v16 = xmmword_1B8631D10;
  v17 = 0u;
  DWORD2(v17) = 0;
  v18 = 0xFFDD0F0FuLL;
  v19 = 0;
  v20 = 4292677391;
  DWORD2(v21) = 0;
  v22 = 0xFFDD0F0FuLL;
  v23 = 0;
  v24 = 4292677391;
  DWORD2(v25) = 0;
  v8 = v26;
  v29 = v26;
  v9 = (uint64_t *)ContentIndexDocSetsCreateIterator(&v29, 1, v6, 0, 0, (uint64_t)&v16);
  ContentIndexDocSetContextRelease(v7);
  if (v9)
  {
    v29 = 0;
    v15 = 0;
    v10 = a3 - *(_QWORD *)(a1 + 72);
    ContentIndexDocSet_Step((uint64_t)v9, &v29, &v15);
    do
    {
      v11 = *((unsigned int *)v9 + 11);
      if ((_DWORD)v11)
        v12 = v10 >= v11;
      else
        v12 = 1;
    }
    while (v12 && ContentIndexDocSet_Step((uint64_t)v9, &v29, &v15));
    if (v29)
      v13 = ContentIndexDocSetContainsDocId(v8, a3);
    else
      v13 = 0;
    if (*((_BYTE *)v9 + 58))
      *(_BYTE *)(a1 + 16440) = 1;
    ContentIndexDocSetIteratorDispose(v9);
  }
  else
  {
    v13 = 0;
  }
  ContentIndexDocSetDispose(v8);
  CIIndexSetClearCache((uint64_t)&v16);
  return v13;
}

void _CITermUpdateSetFindTokens(uint64_t a1)
{
  uint64_t v1;
  const char **v2;
  int *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  unsigned __int8 *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int8x8_t *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  int8x8_t *v30;
  unint64_t v31;
  uint8x8_t v32;
  uint8x8_t v33;
  uint8x8_t v34;
  uint8x8_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  int8x8_t *v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  int8x8_t *v44;
  unint64_t v45;
  uint8x8_t v46;
  uint8x8_t v47;
  uint8x8_t v48;
  uint8x8_t v49;
  int v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  unsigned int v54;
  int v55;
  NSObject *v56;
  char *v57;
  char *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  _DWORD *v62;
  uint64_t v63;
  BOOL v64;
  CFMutableSetRef theSet;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];
  uint64_t (*v69)(_QWORD *, _DWORD *, unsigned int);
  void *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE v87[2048];
  _QWORD v88[2];
  _DWORD v89[508];
  _OWORD context[2];
  _QWORD *v91;
  CFMutableSetRef v92;
  int *v93;
  uint64_t v94;

  v1 = MEMORY[0x1E0C80A78](a1);
  v5 = v4;
  v6 = v1;
  v94 = *MEMORY[0x1E0C80C00];
  v64 = v7 != 0;
  if (v7)
    v8 = "loc ";
  else
    v8 = "";
  v9 = (_DWORD *)*v4;
  if (!*v4)
  {
    v9 = TokenDataCreate(*v2, *v3);
    if (!v9)
      return;
  }
  v61 = v8;
  v83 = 0;
  v84 = &v83;
  v85 = 0x2000000000;
  v86 = v87;
  v79 = 0;
  v80 = &v79;
  v81 = 0x2000000000;
  v10 = 32;
  v82 = 32;
  v75 = 0;
  v76 = &v75;
  v77 = 0x2000000000;
  v78 = 0;
  bzero(v89, 0x7F0uLL);
  bzero(v87, 0x800uLL);
  v11 = v9[4];
  v12 = v9[5];
  v13 = v11 >> 1;
  if ((v11 & 1) != 0)
    v14 = 2056;
  else
    v14 = 8;
  v66 = v6;
  v63 = v6 + 304;
  v15 = v88;
  v16 = 1;
  v88[0] = *((_QWORD *)v9 + 1);
  v88[1] = v88[0];
  v89[0] = v14 & 0xFBFFFFFF | ((v13 & 1) << 26);
  v89[10] = v12;
  v62 = v9;
  do
  {
    v67 = v16;
    if (dword_1EF19FC90 >= 5)
    {
      v55 = *__error();
      v56 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(context[0]) = 136315394;
        *(_QWORD *)((char *)context + 4) = v61;
        WORD6(context[0]) = 1024;
        *(_DWORD *)((char *)context + 14) = v67;
        _os_log_impl(&dword_1B8270000, v56, OS_LOG_TYPE_DEFAULT, "### %supdateset processing - %d ###", (uint8_t *)context, 0x12u);
      }
      *__error() = v55;
    }
    v68[0] = MEMORY[0x1E0C809B0];
    v68[1] = 0x40000000;
    v69 = __termUpdateSetFindTokens_block_invoke;
    v70 = &unk_1E6E37080;
    v71 = &v75;
    v72 = &v79;
    v73 = &v83;
    v74 = v9;
    memset(context, 0, sizeof(context));
    *(_QWORD *)&context[1] = v66;
    BYTE8(context[1]) = v64;
    theSet = CFSetCreateMutable(0, 0, 0);
    v92 = theSet;
    v93 = 0;
    db_read_lock(v63);
    v17 = v66;
    v18 = 0;
    v19 = v67;
    do
    {
      v20 = (int *)&v15[8 * v18];
      v93 = v20;
      v21 = *(unsigned __int8 **)v20;
      v22 = v20[14];
      v23 = (*(_QWORD *)(v17 + 24) + 32) | 1;
      if (v20[5] < 7 || *v21 != 1)
        goto LABEL_41;
      if (v21[1] == 2)
      {
        if ((char)v21[2] < 0)
        {
          if ((char)v21[3] < 0)
          {
            if ((char)v21[4] < 0)
            {
              if ((char)v21[5] < 0)
              {
                if ((char)v21[6] < 0)
                {
                  v57 = __si_assert_copy_extra_268();
                  v58 = v57;
                  v59 = "";
                  if (v57)
                    v59 = v57;
                  __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", "VIntUtils.h", 341, "(b4 & 0x80) == 0", v59);
                  free(v58);
                  if (__valid_fs(-1))
                    v60 = 2989;
                  else
                    v60 = 3072;
                  *(_DWORD *)v60 = -559038737;
                  abort();
                }
                v24 = 7;
              }
              else
              {
                v24 = 6;
              }
            }
            else
            {
              v24 = 5;
            }
          }
          else
          {
            v24 = 4;
          }
        }
        else
        {
          v24 = 3;
        }
      }
      else
      {
        v24 = 2;
      }
      if (v24 > v22)
      {
LABEL_41:
        v36 = *(unsigned __int8 **)v20;
        goto LABEL_42;
      }
      v25 = 0;
      while (1)
      {
        v26 = (int8x8_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
        v27 = v23 & 3;
        if (v27 == 1)
        {
          v23 = (uint64_t)v26[*((unsigned __int8 *)&tcm + v21[v25]) + 1];
          if (!v23)
            goto LABEL_41;
          goto LABEL_32;
        }
        if (v27 != 2)
          break;
        v28 = *((unsigned __int8 *)&tcm + v21[v25]);
        if (((*(unsigned __int32 *)((char *)v26[1].i32 + ((v28 >> 3) & 0x1C)) >> v28) & 1) == 0)
          goto LABEL_40;
        v29 = 0;
        v30 = v26 + 1;
        v31 = v28 >> 6;
        if ((v28 >> 6) != 1)
        {
          if ((_DWORD)v31 != 2)
          {
            if ((_DWORD)v31 != 3)
              goto LABEL_29;
            v32 = (uint8x8_t)vcnt_s8(v26[3]);
            v32.i16[0] = vaddlv_u8(v32);
            v29 = v32.u32[0];
          }
          v33 = (uint8x8_t)vcnt_s8(v26[2]);
          v33.i16[0] = vaddlv_u8(v33);
          v29 += v33.u32[0];
        }
        v34 = (uint8x8_t)vcnt_s8(*v30);
        v34.i16[0] = vaddlv_u8(v34);
        v29 += v34.u32[0];
LABEL_29:
        v35 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v30[v31] & ~(-1 << v28)));
        v35.i16[0] = vaddlv_u8(v35);
        v23 = (uint64_t)v26[v35.u32[0] + 6 + v29];
        if (!v23)
          goto LABEL_41;
LABEL_32:
        if (v24 == ++v25)
        {
          LODWORD(v25) = v24;
          goto LABEL_38;
        }
      }
      if (v27 != 3)
      {
LABEL_40:
        v23 = 0;
        goto LABEL_41;
      }
      v23 |= 3uLL;
      if (!(_DWORD)v25)
        goto LABEL_41;
LABEL_38:
      v36 = &v21[(int)v25];
      if ((~(_BYTE)v23 & 3) == 0)
      {
        CFSetAddValue(theSet, (const void *)(v23 & 0xFFFFFFFFFFFFFFFCLL));
        v17 = v66;
        v19 = v67;
      }
LABEL_42:
      v37 = &v21[v22];
      if (v36 >= v37)
        goto LABEL_73;
      while (2)
      {
        v38 = 0;
        v39 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v36 >> 4];
        while (2)
        {
          v40 = (int8x8_t *)(v23 & 0xFFFFFFFFFFFFFFFCLL);
          v41 = v23 & 3;
          if (v41 == 1)
          {
            v23 = (uint64_t)v40[*((unsigned __int8 *)&tcm + v36[v38]) + 1];
            if (!v23)
              goto LABEL_73;
            goto LABEL_56;
          }
          if (v41 == 2)
          {
            v42 = *((unsigned __int8 *)&tcm + v36[v38]);
            if (((*(unsigned __int32 *)((char *)v40[1].i32 + ((v42 >> 3) & 0x1C)) >> v42) & 1) == 0)
              goto LABEL_73;
            v43 = 0;
            v44 = v40 + 1;
            v45 = v42 >> 6;
            if ((v42 >> 6) == 1)
              goto LABEL_52;
            if ((_DWORD)v45 == 2)
              goto LABEL_51;
            if ((_DWORD)v45 == 3)
            {
              v46 = (uint8x8_t)vcnt_s8(v40[3]);
              v46.i16[0] = vaddlv_u8(v46);
              v43 = v46.u32[0];
LABEL_51:
              v47 = (uint8x8_t)vcnt_s8(v40[2]);
              v47.i16[0] = vaddlv_u8(v47);
              v43 += v47.u32[0];
LABEL_52:
              v48 = (uint8x8_t)vcnt_s8(*v44);
              v48.i16[0] = vaddlv_u8(v48);
              v43 += v48.u32[0];
            }
            v49 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v44[v45] & ~(-1 << v42)));
            v49.i16[0] = vaddlv_u8(v49);
            v23 = (uint64_t)v40[v49.u32[0] + 6 + v43];
            if (!v23)
              goto LABEL_73;
LABEL_56:
            if (v39 == ++v38)
            {
              if (!utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v36 >> 4])
                goto LABEL_73;
              goto LABEL_61;
            }
            continue;
          }
          break;
        }
        if (v41 != 3)
          break;
        v23 |= 3uLL;
        LODWORD(v39) = v38;
        if (!(_DWORD)v38)
          break;
LABEL_61:
        v36 += (int)v39;
        v50 = v23 & 3;
        switch(v50)
        {
          case 1:
LABEL_64:
            if (!*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFFCLL) && (v36 != v37 || (v15[8 * v18 + 2] & 0x800) == 0))
              break;
            v69(v68, &v15[8 * v18], (_DWORD)v36 - (_DWORD)v21);
            goto LABEL_67;
          case 3:
            CFSetAddValue(theSet, (const void *)(v23 & 0xFFFFFFFFFFFFFFFCLL));
LABEL_67:
            v17 = v66;
            v19 = v67;
            break;
          case 2:
            goto LABEL_64;
        }
        if (v36 < v37)
          continue;
        break;
      }
LABEL_73:
      ++v18;
    }
    while (v18 != v19);
    LODWORD(context[0]) = v19;
    *((_QWORD *)&context[0] + 1) = v15;
    v91 = v68;
    v51 = v17;
    CFSetApplyFunction(theSet, (CFSetApplierFunction)resolveTokensSetCallback, context);
    _TermUpdateSetReadUnlock(v51);
    CFRelease(v92);
    v52 = (_QWORD *)v84[3];
    v84[3] = (uint64_t)v15;
    v53 = v80;
    v54 = *((_DWORD *)v80 + 6);
    *((_DWORD *)v80 + 6) = v10;
    v16 = *((unsigned int *)v76 + 6);
    *((_DWORD *)v76 + 6) = 0;
    v15 = v52;
    v10 = v54;
    v9 = v62;
  }
  while ((_DWORD)v16);
  if (v54 >= 0x21)
  {
    free(v52);
    v53 = v80;
  }
  if (*((_DWORD *)v53 + 6) >= 0x21u)
    free((void *)v84[3]);
  _Block_object_dispose(&v75, 8);
  _Block_object_dispose(&v79, 8);
  _Block_object_dispose(&v83, 8);
  if (!*v5)
  {
    if (v62[6])
      *v5 = v62;
    else
      TokenDataDispose((void **)v62);
  }
}

uint64_t __termUpdateSetFindTokens_block_invoke(_QWORD *a1, _DWORD *a2, unsigned int a3)
{
  int v6;
  unsigned int v7;
  size_t v8;
  void *v10;
  uint64_t result;

  v6 = *a2 - a2[2];
  v7 = *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24) + 1 >= v7)
  {
    v8 = 2 * v7;
    if (((v7 >> 13) & 0x3FFFF) == 0 && 8 * (unint64_t)(2 * v7) > *MEMORY[0x1E0C85AD8])
      ++sTotal_9538;
    v10 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, v8, 8uLL, 0x31F9A007uLL);
    if (!v10)
      _log_fault_for_malloc_failure();
    memcpy(v10, *(const void **)(*(_QWORD *)(a1[6] + 8) + 24), 8 * *(unsigned int *)(*(_QWORD *)(a1[5] + 8) + 24));
    if (*(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) >= 0x21u)
      free(*(void **)(*(_QWORD *)(a1[6] + 8) + 24));
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = v10;
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v8;
  }
  result = TokenDataAddRange(a1[7], (unsigned __int16)v6 | ((unsigned __int16)a3 << 16));
  if ((_DWORD)result)
  {
    if (v6 + a3 < *(_DWORD *)(a1[7] + 20))
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24)
                + ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24) << 6)) = *(_QWORD *)a2 + a3;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24)
                + ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24) << 6)
                + 56) = a2[14] - a3;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24)
                + ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1[4] + 8) + 24) << 6)
                + 8) = *((_QWORD *)a2 + 1);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24)
                + ((unint64_t)(*(_DWORD *)(*(_QWORD *)(a1[4] + 8) + 24))++ << 6)
                + 16) = a2[4];
    }
  }
  return result;
}

uint64_t resolveTokensSetCallback(uint64_t result, unsigned int *a2)
{
  uint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  char *v27;
  unsigned int v28;
  char v29;
  BOOL v30;
  BOOL v31;
  unsigned __int8 *i;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned __int8 v56[1045];
  unsigned __int8 v57[1045];
  _QWORD v58[20];

  v3 = result;
  v58[17] = *MEMORY[0x1E0C80C00];
  memset(v58, 0, 128);
  v4 = 0;
  do
  {
    v51 = v4;
    if (v3)
    {
      v5 = *a2;
      v6 = v5;
      while (!v6)
      {
LABEL_79:
        if ((*(_QWORD *)(v3 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
          v58[v51++] = *(_QWORD *)(v3 + 8) & 0x7FFFFFFFFFFFFFFFLL;
        v3 = *(_QWORD *)v3 & 0x7FFFFFFFFFFFFFFFLL;
        if (!v3)
          goto LABEL_82;
      }
      v7 = 0;
      v8 = (unsigned __int8 *)(v3 + 34);
      v52 = (unsigned __int8 *)(v3 + 34);
      v53 = v3;
      while (1)
      {
        v9 = *(unsigned __int16 *)(v3 + 32);
        if ((v9 - 1044) < 0xFFFFFBED)
          goto LABEL_78;
        if (*v8 < 6u)
          goto LABEL_78;
        v10 = *((_QWORD *)a2 + 1);
        v11 = *(_BYTE **)(v10 + (v7 << 6));
        if (v9 >= 4
          && *(_BYTE *)(v3 + (v9 - 1) + 34) == 51
          && *(unsigned __int8 *)(v3 + (v9 - 2) + 34) >= 3u
          && *(_BYTE *)(v3 + (v9 - 3) + 34) == 1)
        {
          goto LABEL_78;
        }
        bzero(v56, 0x415uLL);
        v12 = *(unsigned __int16 *)(v3 + 32);
        if (*(_WORD *)(v3 + 32))
        {
          v13 = v56;
          v14 = v8;
          do
          {
            v15 = *v14++;
            *v13++ = tcmr[v15];
            --v12;
          }
          while (v12);
        }
        v55 = 0;
        v56[v9] = 0;
        if ((char)v56[0] < 0)
        {
          if ((~((unint64_t)v56[0] >> 4) & 0xC) != 0)
            goto LABEL_37;
          v16 = utf8_byte_length(unsigned char)::utf8_len_table[(unint64_t)v56[0] >> 4];
          v17 = (v56[0] & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v16]);
          v18 = v16 <= 2
              ? 2
              : utf8_byte_length(unsigned char)::utf8_len_table[(unint64_t)v56[0] >> 4];
          v19 = v18 - 1;
          v20 = v57;
          do
          {
            v21 = v17;
            v22 = *v20++;
            v17 = v22 & 0x3F | (v17 << 6);
            --v19;
          }
          while (v19);
          if (v17 >> 8 < 0x11 || (v21 & 0x3FFFFFC) != 0x44 && ((v21 << 6) - 11904) >> 7 >= 0x197 && v17 - 65376 > 0x4F)
            goto LABEL_37;
          if (((char)*v11 & 0x80000000) == 0)
            goto LABEL_37;
          v23 = *v11;
          if ((~(v23 >> 4) & 0xC) != 0)
            goto LABEL_37;
          v24 = utf8_byte_length(unsigned char)::utf8_len_table[v23 >> 4];
          v25 = v23 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v24];
          v24 = v24 <= 2 ? 2 : v24;
          v26 = v24 - 1;
          v27 = v11 + 1;
          do
          {
            v28 = v25;
            v29 = *v27++;
            v25 = v29 & 0x3F | (v25 << 6);
            --v26;
          }
          while (v26);
          if (v25 >> 8 < 0x11
            || (v55 = 1, (v28 & 0x3FFFFFC) != 0x44) && ((v28 << 6) - 11904) >> 7 >= 0x197 && v25 - 65376 >= 0x50)
          {
LABEL_37:
            v55 = 0;
          }
        }
        result = termPropertyID_9607(v56, v9);
        if (*((_BYTE *)a2 + 24))
        {
          if ((int)result <= 2)
            break;
          goto LABEL_77;
        }
        if ((_DWORD)result == 2)
        {
          if (v56[(v9 - 1)] != 1)
            break;
          goto LABEL_77;
        }
        if (v55)
          break;
LABEL_77:
        v5 = *a2;
        v8 = v52;
        v3 = v53;
LABEL_78:
        ++v7;
        v6 = v5;
        if (v7 >= v5)
          goto LABEL_79;
      }
      v30 = 0;
      v31 = 0;
      v54 = v10 + (v7 << 6) + 16;
      for (i = v56; ; i += v49)
      {
        v33 = *v11;
        v34 = *v11 >> 4;
        if ((char)*v11 < 0)
        {
          v35 = utf8_byte_length(unsigned char)::utf8_len_table[v34];
          v36 = (utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v35] & v33);
          if ((~(_BYTE)v34 & 0xC) != 0)
          {
            v33 = (utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v35] & v33);
          }
          else
          {
            if (v35 <= 2)
              v37 = 2;
            else
              v37 = utf8_byte_length(unsigned char)::utf8_len_table[v34];
            v38 = v37 - 1;
            v39 = v11 + 1;
            do
            {
              v40 = *v39++;
              v33 = v40 & 0x3F | (v36 << 6);
              v36 = v33;
              --v38;
            }
            while (v38);
          }
        }
        v41 = *i;
        v42 = v41 >> 4;
        if ((v41 & 0x80) != 0)
        {
          v43 = utf8_byte_length(unsigned char)::utf8_len_table[v42];
          v44 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v43] & v41;
          if ((~(v41 >> 4) & 0xC) != 0)
          {
            LODWORD(v41) = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v43] & v41;
          }
          else
          {
            if (v43 <= 2)
              v45 = 2;
            else
              v45 = utf8_byte_length(unsigned char)::utf8_len_table[v42];
            v46 = v45 - 1;
            v47 = (char *)(i + 1);
            do
            {
              v48 = *v47++;
              LODWORD(v41) = v48 & 0x3F | (v44 << 6);
              v44 = v41;
              --v46;
            }
            while (v46);
          }
        }
        v49 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[v42];
        v50 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[v34];
        if (v41 < 2)
          break;
        if (!v33)
        {
          if ((v55 & 1) == 0 && (*(_BYTE *)(v54 + 1) & 8) == 0)
            goto LABEL_77;
LABEL_73:
          result = (*(uint64_t (**)(void))(*((_QWORD *)a2 + 4) + 16))();
        }
        if (!v33 || v33 != (_DWORD)v41)
          goto LABEL_77;
        v30 = (v33 - 12448) < 0x60;
        v31 = (v33 - 12352) < 0x60;
        v11 += v50;
      }
      if (v30 && v33 != 0 && (v33 - 12448) < 0x60
        || v31 && v33 != 0 && (v33 - 12352) < 0x60)
      {
        goto LABEL_77;
      }
      goto LABEL_73;
    }
LABEL_82:
    v4 = v51 - 1;
    if (v51 < 1)
      break;
    v3 = v58[v4];
  }
  while (v3);
  return result;
}

void _CIDocSetIteratorProcessPositionsUpdates(uint64_t *a1, int a2, int a3, int a4, int a5, char a6)
{
  uint64_t v10;
  __CFSet *Mutable;
  uint64_t v13;
  CFIndex Count;
  size_t v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  _QWORD block[6];
  int v24;
  int v25;
  int v26;
  char v27;
  char v28;
  uint64_t v29;

  LODWORD(v10) = a2;
  v29 = *MEMORY[0x1E0C80C00];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  if ((_DWORD)v10)
  {
    v10 = v10;
    do
    {
      v13 = *a1++;
      ContentIndexDocSetIteratorFlatten(v13, Mutable, 0, 0);
      --v10;
    }
    while (v10);
  }
  Count = CFSetGetCount(Mutable);
  v15 = Count;
  MEMORY[0x1E0C80A78](Count);
  v17 = (char *)&block[-1] - ((v16 + 15) & 0xFFFFFFFF0);
  bzero(v17, v16);
  CFSetGetValues(Mutable, (const void **)v17);
  v28 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___CIDocSetIteratorProcessPositionsUpdates_block_invoke;
  block[3] = &__block_descriptor_tmp_10_9640;
  v24 = a3;
  v25 = a4;
  v26 = a5;
  v27 = a6;
  block[4] = v17;
  block[5] = &v28;
  dispatch_apply(v15, 0, block);
  CFRelease(Mutable);
  if ((v28 & 1) != 0)
  {
    v18 = __si_assert_copy_extra_268();
    v19 = v18;
    v20 = "";
    if (v18)
      v20 = v18;
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 2985, "__c11_atomic_load(didAssertPtr, memory_order_relaxed)==0", v20);
    free(v19);
    if (__valid_fs(-1))
      v21 = 2989;
    else
      v21 = 3072;
    *(_DWORD *)v21 = -559038737;
    abort();
  }
}

_DWORD *_CIDocSetIteratorProcessPositionsUpdatesForNode(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  _DWORD *result;
  char v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD);
  int v23;
  NSObject *v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_QWORD);
  __int128 v33;
  __int128 v34;
  _DWORD *v35;
  int v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  void (*v42)(_QWORD);
  int v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  unsigned int *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  int locked;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t (*v75)(_QWORD);
  uint64_t v76;
  char *v77;
  _DWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  int8x8_t v95;
  unsigned int v96;
  int8x8_t v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  unsigned int *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v109;
  unsigned int v110;
  _DWORD *v111;
  int8x8_t v112;
  int v113;
  int8x8_t v114;
  _DWORD *v115;
  uint64_t v116;
  char *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned __int8 *v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const void **v129;
  int8x8_t v130;
  uint64_t v131;
  unsigned int i;
  uint64_t v133;
  unsigned int v134;
  int v135;
  uint64_t v136;
  int v137;
  unsigned int v138;
  NSObject *v139;
  int v140;
  NSObject *v141;
  unint64_t v142;
  size_t v143;
  unsigned __int8 *v144;
  _DWORD *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  BOOL v151;
  uint64_t v152;
  int64_t VInt64;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  off_t v163;
  off_t v164;
  unint64_t v165;
  unsigned int v166;
  int v167;
  int v168;
  unint64_t v169;
  int v170;
  unint64_t v171;
  unsigned int v172;
  int v173;
  unint64_t v174;
  _DWORD *v175;
  unsigned int v176;
  unsigned int v177;
  int8x8_t v178;
  uint64_t v179;
  int8x8_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  signed int v185;
  int v186;
  BOOL v187;
  uint64_t v188;
  const void **v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unsigned int v193;
  int v194;
  int v195;
  unint64_t v196;
  int v197;
  off_t v198;
  unint64_t v199;
  off_t v200;
  uint64_t v201;
  off_t v202;
  unint64_t v203;
  unsigned int v204;
  int v205;
  int v206;
  unint64_t v207;
  int v208;
  NSObject *v209;
  int v210;
  NSObject *v211;
  int v212;
  NSObject *v213;
  int v215;
  NSObject *v216;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  int v228;
  int v229;
  unsigned int v230;
  unsigned int v231;
  int8x8_t v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  char HasIndex;
  int v238;
  int v239;
  unint64_t v240;
  unsigned int v241;
  char v242;
  unsigned int *v243;
  uint64_t v244;
  char j;
  unsigned int v246;
  unsigned int *v247;
  int8x8_t v248;
  uint64_t v249;
  uint64_t v250;
  unsigned int *v251;
  int v252;
  NSObject *v253;
  int v254;
  char v255;
  uint64_t v256;
  char v257;
  unint64_t v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  unsigned int v267;
  uint64_t v268;
  void (*v269)(_QWORD);
  char *v270;
  char *v271;
  const char *v272;
  uint64_t v273;
  char *v274;
  char *v275;
  const char *v276;
  const char *v277;
  int v278;
  char *v279;
  const char *v280;
  uint64_t v281;
  char *v282;
  char *v283;
  const char *v284;
  uint64_t v285;
  const char *v286;
  const char *v287;
  uint64_t v288;
  int v289;
  int v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  off_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unsigned __int8 *v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned int v311;
  int v312;
  unsigned int v313;
  unsigned int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  malloc_type_id_t v326;
  unsigned int *v327;
  _DWORD *v328;
  unsigned int v329;
  int v330;
  _DWORD *v331;
  int v332;
  int v333;
  int v334;
  int v335;
  int v336;
  uint64_t v337;
  unsigned int v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  unint64_t v346;
  uint8_t v347[8];
  uint64_t v348;
  uint64_t v349;
  uint8_t v350[4];
  unsigned int v351;
  uint8_t buf[24];
  uint64_t v353;

  v353 = *MEMORY[0x1E0C80C00];
  makeThreadId();
  result = CICleanUpThreadLoc();
  v11 = atomic_load((unsigned int *)(*(_QWORD *)(a1 + 56) + 28));
  v12 = *(_DWORD *)(a1 + 48);
  if (v12 < 9)
    goto LABEL_2;
  if (v12 != 9)
  {
    v282 = __si_assert_copy_extra_268();
    v283 = v282;
    v284 = "";
    if (v282)
      v284 = v282;
    __message_assert("%s:%u: failed assertion '%s' %s Expected valid doc set type. Got %d", "CIQuery.c", 2932, "0", v284, *(_DWORD *)(a1 + 48));
    free(v283);
    if (__valid_fs(-1))
      v285 = 2989;
    else
      v285 = 3072;
    *(_DWORD *)v285 = -559038737;
    abort();
  }
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(v13 + 8))
  {
    v43 = *__error();
    v44 = _SILogForLogForCategory(0);
    v45 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v44, v45))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v44, v45, "Skipping because index is shut down", buf, 2u);
    }
    result = __error();
    *result = v43;
    goto LABEL_2;
  }
  v14 = result;
  v337 = a1;
  v332 = a5;
  v331 = result;
  v330 = v11 & 0xC;
  do
  {
    v15 = __ldxr(exceptionSequenceNum);
    v16 = v15 + 1;
  }
  while (__stxr(v15 + 1, exceptionSequenceNum));
  v17 = setThreadIdAndInfo(-1, (__int128 *)sIndexExceptionCallbacks, v13, 0, v16);
  v346 = __PAIR64__(v17, HIDWORD(v17));
  v345 = __PAIR64__(v18, v19);
  v20 = *(_QWORD *)&threadData[18 * v17 + 2];
  v21 = v20 + 320 * HIDWORD(v17);
  *(_BYTE *)(v21 + 216) = 0;
  v335 = *(_DWORD *)(v21 + 312);
  v22 = *(void (**)(_QWORD))(v21 + 224);
  if (v22)
    v22(*(_QWORD *)(v20 + 320 * HIDWORD(v17) + 288));
  v336 = v16;
  v344 = v346;
  v343 = v345;
  if (_setjmp((int *)v21))
  {
    v23 = *__error();
    v24 = _SILogForLogForCategory(0);
    a1 = v337;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "_CIDocSetIteratorProcessPositionsUpdatesForNode";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2918;
      _os_log_error_impl(&dword_1B8270000, v24, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v23;
    *(_DWORD *)(v21 + 312) = v335;
    CIOnThreadCleanUpReset(v343);
    dropThreadId(HIDWORD(v344), 1, v336);
    result = (_DWORD *)CICleanUpReset(HIDWORD(v344), HIDWORD(v343));
    goto LABEL_2;
  }
  do
  {
    v25 = __ldxr(exceptionSequenceNum);
    v26 = v25 + 1;
  }
  while (__stxr(v25 + 1, exceptionSequenceNum));
  v27 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v26);
  v342 = __PAIR64__(v27, HIDWORD(v27));
  v341 = __PAIR64__(v28, v29);
  v30 = *(_QWORD *)&threadData[18 * v27 + 2];
  v31 = v30 + 320 * HIDWORD(v27);
  v333 = *(_DWORD *)(v31 + 312);
  v32 = *(void (**)(_QWORD))(v31 + 224);
  if (v32)
    v32(*(_QWORD *)(v30 + 320 * HIDWORD(v27) + 288));
  v340 = v342;
  v339 = v341;
  if (_setjmp((int *)v31))
  {
    v35 = (_DWORD *)(v31 + 312);
    v36 = *__error();
    v37 = _SILogForLogForCategory(0);
    a1 = v337;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "_CIDocSetIteratorProcessPositionsUpdatesForNode";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2917;
      _os_log_error_impl(&dword_1B8270000, v37, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v36;
    *v35 = v333;
    CIOnThreadCleanUpReset(v339);
    dropThreadId(HIDWORD(v340), 1, v26);
    CICleanUpReset(HIDWORD(v340), HIDWORD(v339));
    goto LABEL_21;
  }
  a1 = v337;
  v46 = **(_QWORD **)(v337 + 72);
  v47 = *(_QWORD *)(v46 + 80);
  if (v47)
    a2 = *(_DWORD *)(v47 + 16);
  v48 = a2;
  v49 = *(_QWORD *)(v46 + 88);
  v50 = a2;
  v51 = (uint64_t)v331;
  if (v49)
    v50 = *(_DWORD *)(v49 + 16);
  v329 = v50;
  if (!*(_QWORD *)(v337 + 80))
    *(_QWORD *)(v337 + 80) = CIIndexSetCreateWithRange(0, a4, 1);
  v52 = *(_DWORD *)(a1 + 128);
  v334 = v26;
  if (v52 < 0)
  {
    if ((v52 & 0x7FFFFFFF) != 0)
    {
      v55 = 0;
      do
      {
        v56 = ContentIndexDocSetGrabConstrainingVector(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v55));
        if (v56)
          CIIndexSetRemoveRange(*(unsigned int **)(a1 + 104), v56, a2, a3);
        ++v55;
      }
      while (v55 < (*(_DWORD *)(a1 + 128) & 0x7FFFFFFFu));
    }
  }
  else if (v52)
  {
    v53 = 0;
    do
    {
      v54 = (unsigned int *)ContentIndexDocSetGrabConstrainingVector(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v53));
      if (v54)
        CIIndexSetIntersectRanges(*(_DWORD **)(a1 + 104), v54, a2, a3);
      ++v53;
    }
    while (v53 < (*(_DWORD *)(a1 + 128) & 0x7FFFFFFFu));
  }
  v328 = *(_DWORD **)(a1 + 104);
  v327 = &threadData[18 * (_QWORD)v14 + 8];
  v326 = 101211499;
  *(_QWORD *)&v33 = 67109120;
  *(_QWORD *)&v34 = 67109120;
  v325 = v34;
  v324 = v34;
  v323 = v34;
  v322 = v34;
  v321 = v34;
  v320 = v34;
  v319 = v33;
  v318 = 0x8000;
  v317 = 3;
  v316 = 4;
  v57 = 0;
  v58 = 0;
  v59 = 1;
  do
  {
    v60 = v59;
    v61 = a3;
    a3 = v48;
    v62 = *(_QWORD *)(**(_QWORD **)(a1 + 72) + 8 * v57 + 80);
    if (!v62)
      goto LABEL_300;
    v63 = v57;
    v315 = v60;
    v309 = *(_QWORD *)(v62 + 256);
    v313 = *v327;
    v314 = v48;
    v311 = v61;
    locked = lockedCountItemsInRange(v328, v48, v61, *(int8x8_t *)&v33);
    v65 = (*(_DWORD *)(a1 + 96) * locked);
    v66 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * v65, v326);
    if (!v66)
      _log_fault_for_malloc_failure();
    v67 = (uint64_t)v66;
    CICleanUpPush(v51, (uint64_t)MEMORY[0x1E0C834A8], (uint64_t)v66);
    v68 = *(unsigned int *)(a1 + 96);
    v312 = locked;
    if (!(_DWORD)v68)
      goto LABEL_253;
    v292 = v66;
    v293 = v58;
    v310 = v63;
    v69 = v65;
    v308 = locked;
    v291 = locked;
    v70 = 0;
    v71 = 0;
    do
    {
      v72 = v68;
      if (locked >= 1)
      {
        v73 = &v292[8 * v70];
        v74 = v291;
        v75 = MEMORY[0x1E0C98BC0];
        do
        {
          v76 = v74;
          v77 = v73;
          v78 = CIIndexSetCreateWithRange(0, 0x400u, 1);
          *(_QWORD *)v77 = v78;
          CICleanUpPush(v51, (uint64_t)v75, (uint64_t)v78);
          v73 = v77 + 8;
          v74 = v76 - 1;
        }
        while (v76 != 1);
        v72 = *(unsigned int *)(v337 + 96);
        locked = v312;
      }
      ++v71;
      v70 += locked;
      v68 = v72;
    }
    while (v71 < v72);
    if (!v72)
    {
      v58 = v293;
      a1 = v337;
      goto LABEL_253;
    }
    v79 = 0;
    v80 = v293;
    a1 = v337;
    v81 = v310;
    do
    {
      v82 = v79;
      v306 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v79);
      v83 = *(uint64_t **)(*(_QWORD *)(v306 + 64) + 8 * v81 + 224);
      v307 = v82;
      if (!v83)
        goto LABEL_249;
      v84 = v83;
      v85 = v328;
      if (*v83 < 1)
        goto LABEL_249;
      v304 = v82 * v308;
      v303 = (locked * v82);
      v86 = 0;
      v87 = v80;
      v305 = v84;
      while (1)
      {
        v299 = v87;
        v88 = v86;
        memset(buf, 0, sizeof(buf));
        v89 = v84[2];
        v90 = v84;
        v302 = v88;
        v91 = 5 * v88;
        _CIIndexSetInitializeEnumeratorForRange(*(_DWORD **)(v89 + 40 * v88 + 32), (uint64_t)buf, v314, v311);
        v92 = v90[2] + 8 * v91;
        v93 = *(unsigned int *)(v92 + 4);
        if (!*(_DWORD *)v92)
        {
LABEL_75:
          v104 = v93;
          goto LABEL_86;
        }
        v94 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
        if (CIIndexSetHasIndex((uint64_t)v85, v94))
        {
          if (gSILogLevels[0] >= 5)
          {
            v212 = *__error();
            v213 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v347 = v321;
              *(_DWORD *)&v347[4] = v94;
              _os_log_impl(&dword_1B8270000, v213, OS_LOG_TYPE_DEFAULT, "LL: Read %u", v347, 8u);
            }
            *__error() = v212;
            a1 = v337;
            v85 = v328;
            locked = v312;
          }
          v96 = lockedCountItemsInRange(v85, v94, v311, v95) - 1;
          if (v304 + (unint64_t)v96 >= v69)
          {
            v80 = v299;
            v51 = (uint64_t)v331;
            goto LABEL_248;
          }
          if (!*(_DWORD *)(v92 + 8))
            goto LABEL_75;
          v98 = v96 + v303;
          if (*(_QWORD *)(v67 + 8 * v98)
            || (*(_QWORD *)(v67 + 8 * v98) = CIIndexSetCreateWithRange(0, *(_DWORD *)v92, 1),
                v104 = v93,
                *(_DWORD *)(v92 + 8)))
          {
            v99 = -1;
            v100 = 0;
            v101 = (unsigned int *)v92;
            while (1)
            {
              v102 = v99;
              CIIndexSetAddIndexExpandingRange(*(const void ***)(v67 + 8 * v98), *v101, v97);
              v99 = *v101;
              if (v102 <= *v101)
                break;
              v103 = v101[1];
              v104 = v103;
              if ((_DWORD)v103)
                v101 = (unsigned int *)(v309 + 8 * v103);
              else
                v101 = 0;
              if (++v100 >= *(_DWORD *)(v92 + 8))
                goto LABEL_86;
            }
            v274 = __si_assert_copy_extra_268();
            v275 = v274;
            v276 = "";
            if (v274)
              v276 = v274;
            v286 = "lastpos>info->position";
            v287 = v276;
            v277 = "CIQuery.c";
            v278 = 2634;
LABEL_328:
            __message_assert("%s:%u: failed assertion '%s' %s ", v277, v278, v286, v287);
            free(v275);
            if (__valid_fs(-1))
              v281 = 2989;
            else
              v281 = 3072;
            *(_DWORD *)v281 = -559038737;
            abort();
          }
        }
        else
        {
          if (gSILogLevels[0] >= 5)
          {
            v215 = *__error();
            v216 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v216, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v347 = v320;
              *(_DWORD *)&v347[4] = v94;
              _os_log_impl(&dword_1B8270000, v216, OS_LOG_TYPE_DEFAULT, "LL: Skip %u", v347, 8u);
            }
            *__error() = v215;
            a1 = v337;
            locked = v312;
          }
          v105 = *(_DWORD *)(v92 + 8);
          v104 = v93;
          if (v105)
          {
            v106 = 1;
            v107 = v92;
            do
            {
              v104 = *(unsigned int *)(v107 + 4);
              if (v106 >= v105)
                break;
              v107 = v309 + 8 * v104;
              ++v106;
            }
            while (v104 && v309 != 0);
          }
        }
LABEL_86:
        if ((v332 & 1) == 0)
          break;
        v80 = v299;
        v51 = (uint64_t)v331;
LABEL_238:
        v87 = v80;
        v86 = v302 + 1;
        v84 = v305;
        v85 = v328;
        if (*v305 <= v302 + 1)
          goto LABEL_249;
      }
      if (v104)
      {
        v109 = v104;
        while (1)
        {
          v110 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
          v111 = v328;
          if (CIIndexSetHasIndex((uint64_t)v328, v110))
            break;
          if (gSILogLevels[0] >= 5)
          {
            v140 = *__error();
            v141 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v347 = v322;
              *(_DWORD *)&v347[4] = v110;
              _os_log_impl(&dword_1B8270000, v141, OS_LOG_TYPE_DEFAULT, "MA: Skip %u", v347, 8u);
            }
            *__error() = v140;
          }
          v120 = (unsigned __int8 *)(v309 + 8 * v109 + *(unsigned int *)(v309 + 8 * v109) + 4);
LABEL_131:
          v109 = *(unsigned int *)v120;
          if (!(_DWORD)v109)
            goto LABEL_139;
        }
        v113 = lockedCountItemsInRange(v111, v110, v311, v112);
        if (gSILogLevels[0] >= 5)
        {
          v290 = *__error();
          v139 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v347 = v323;
            *(_DWORD *)&v347[4] = v110;
            _os_log_impl(&dword_1B8270000, v139, OS_LOG_TYPE_DEFAULT, "MA: Read %u", v347, 8u);
          }
          *__error() = v290;
        }
        v115 = (_DWORD *)(v309 + 8 * v109);
        v118 = *v115;
        v117 = (char *)(v115 + 1);
        v116 = v118;
        if (v330 == 8)
        {
          if (*v117 < 0)
          {
            v125 = *v117;
            if (v125 >= 0xC0)
            {
              v126 = v316;
              if (v125 >= 0xF0)
                v126 = v316 + 1;
              v157 = v125 >= 0xE0;
              v119 = v317;
              if (v157)
                v119 = v126;
            }
            else
            {
              v119 = 2;
            }
          }
          else
          {
            v119 = 1;
          }
        }
        else
        {
          v119 = 0;
        }
        v121 = v119 + 1;
        v122 = v117[v119];
        if (v117[v119] < 0)
        {
          if (v122 > 0xBF)
          {
            if (v122 > 0xDF)
            {
              if (v122 > 0xEF)
              {
                v123 = *(_DWORD *)&v117[v121];
                v124 = v119 + 5;
              }
              else
              {
                v123 = ((v122 & 0xF) << 24) | (v117[v121] << 16) | (v117[v119 + 2] << 8) | v117[v119 + 3];
                v124 = v119 + 4;
              }
            }
            else
            {
              v123 = ((v122 & 0x1F) << 16) | (v117[v121] << 8) | v117[v119 + 2];
              v124 = v119 + 3;
            }
          }
          else
          {
            v123 = v117[v121] | ((v122 & 0x3F) << 8);
            v124 = v119 + 2;
          }
        }
        else
        {
          v123 = v117[v119];
          v124 = v119 + 1;
        }
        v127 = (v113 - 1);
        if (v304 + v127 < v69)
        {
          v128 = v127 + v303;
          v129 = *(const void ***)(v67 + 8 * (v127 + v303));
          if (!v129)
          {
            v129 = (const void **)CIIndexSetCreateWithRange(0, v123, 1);
            *(_QWORD *)(v67 + 8 * v128) = v129;
          }
          CIIndexSetAddIndexExpandingRange(v129, v123, v114);
          v131 = v124;
          for (i = v123; ; i = v138)
          {
            v133 = v131 + 1;
            v134 = v117[v131];
            if (v117[v131] < 0)
            {
              if (v134 > 0xBF)
              {
                if (v134 > 0xDF)
                {
                  if (v134 > 0xEF)
                  {
                    v137 = *(_DWORD *)&v117[v133];
                    v136 = v131 + 5;
                  }
                  else
                  {
                    v137 = ((v134 & 0xF) << 24) | (v117[v133] << 16) | (v117[v131 + 2] << 8) | v117[v131 + 3];
                    v136 = v131 + 4;
                  }
                }
                else
                {
                  v137 = ((v134 & 0x1F) << 16) | (v117[v133] << 8) | v117[v131 + 2];
                  v136 = v131 + 3;
                }
              }
              else
              {
                v137 = v117[v133] | ((v134 & 0x3F) << 8);
                v136 = v131 + 2;
              }
              v135 = v137;
              if (!v137)
              {
LABEL_130:
                v120 = (unsigned __int8 *)&v117[v116];
                goto LABEL_131;
              }
            }
            else
            {
              v135 = v117[v131];
              v136 = v133;
              if (!v134)
                goto LABEL_130;
            }
            v138 = i - v135;
            CIIndexSetAddIndexExpandingRange(*(const void ***)(v67 + 8 * v128), i - v135, v130);
            v131 = v136;
          }
        }
      }
LABEL_139:
      v142 = *(_QWORD *)(v92 + 16);
      v301 = &v288;
      MEMORY[0x1E0C80A78](&v288);
      v300 = (unsigned __int8 *)(&v288 - 4096);
      bzero(&v288 - 4096, v143);
      v80 = v299;
      v51 = (uint64_t)v331;
      if (!v142)
      {
LABEL_237:
        locked = v312;
        goto LABEL_238;
      }
      v144 = v300;
      v145 = *(_DWORD **)(**(_QWORD **)(*(_QWORD *)(a1 + 112) + 408) + 4480);
      v80 = fd_pread(v145, v300, 0x8000uLL, v142 & 0x3FFFFFFFFFFFF000);
      if (v80 != -1)
      {
        v146 = v142;
        v147 = v142 & 0x3FFFFFFFFFFFF000;
        v148 = 0;
        v149 = v146;
        v150 = v147;
        while (1)
        {
          v151 = v149 - 32749 < 0xFFFFFFFFFFFF7FFFLL || v150 > v149;
          v152 = v150;
          if (v151)
          {
            v152 = v149 & 0x3FFFFFFFFFFFF000;
            v80 = fd_pread(v145, v144, 0x8000uLL, v149 & 0x3FFFFFFFFFFFF000);
            if (v80 == -1)
              goto LABEL_237;
          }
          *(_QWORD *)v347 = v149 - v152;
          VInt64 = v2_readVInt64((uint64_t)v144, (uint64_t *)v347);
          if ((VInt64 & 1) != 0)
          {
            v156 = VInt64 >> 1;
            v154 = v2_readVInt64((uint64_t)v144, (uint64_t *)v347);
            v155 = v156;
          }
          else
          {
            v154 = VInt64;
            v155 = 0;
          }
          if ((v154 & 1) != 0)
            break;
          if (!v155)
            v155 = v148;
          v157 = v154 >= 2;
          if (v154 >= 2)
            v158 = (uint64_t)v154 >> 1;
          else
            v158 = v155;
          v298 = v158;
          if (v157)
            v159 = v155;
          else
            v159 = 0;
          v297 = v159;
          v160 = *(_QWORD *)v347;
          v161 = v152;
          while (1)
          {
LABEL_161:
            if (v160 - 32749 > 0xFFFFFFFFFFFF7FFELL)
            {
              v51 = (uint64_t)v331;
            }
            else
            {
              v162 = v160 + v161;
              v163 = (v160 + v161) & 0x3FFFFFFFFFFFF000;
              v80 = fd_pread(v145, v144, 0x8000uLL, v163);
              a1 = v337;
              v51 = (uint64_t)v331;
              if (v80 == -1)
                goto LABEL_236;
              v160 = v162 & 0xC000000000000FFFLL;
              v161 = v163;
            }
            v164 = v161;
            if (v330 == 8)
            {
              v165 = v160 + 1;
              v166 = v144[v160];
              if ((char)v144[v160] < 0)
              {
                if (v166 > 0xBF)
                {
                  if (v166 > 0xDF)
                  {
                    if (v166 > 0xEF)
                    {
                      v168 = *(_DWORD *)&v144[v165];
                      v169 = v160 + 5;
                    }
                    else
                    {
                      v168 = ((v166 & 0xF) << 24) | (v144[v165] << 16) | (v300[v160 + 2] << 8) | v300[v160 + 3];
                      v169 = v160 + 4;
                    }
                  }
                  else
                  {
                    v168 = ((v166 & 0x1F) << 16) | (v144[v165] << 8) | v300[v160 + 2];
                    v169 = v160 + 3;
                  }
                }
                else
                {
                  v168 = v144[v165] | ((v166 & 0x3F) << 8);
                  v169 = v160 + 2;
                }
                v167 = v168;
                v165 = v169;
              }
              else
              {
                v167 = v144[v160];
              }
              v170 = v167;
              v160 = v165;
              if (!v170)
                break;
            }
            v171 = v160 + 1;
            v172 = v144[v160];
            if ((char)v144[v160] < 0)
            {
              v175 = v328;
              if (v172 > 0xBF)
              {
                if (v172 > 0xDF)
                {
                  if (v172 > 0xEF)
                  {
                    v173 = *(_DWORD *)&v144[v171];
                    v174 = v160 + 5;
                  }
                  else
                  {
                    v173 = ((v172 & 0xF) << 24) | (v144[v171] << 16) | (v300[v160 + 2] << 8) | v300[v160 + 3];
                    v174 = v160 + 4;
                  }
                }
                else
                {
                  v173 = ((v172 & 0x1F) << 16) | (v144[v171] << 8) | v300[v160 + 2];
                  v174 = v160 + 3;
                }
              }
              else
              {
                v173 = v144[v171] | ((v172 & 0x3F) << 8);
                v174 = v160 + 2;
              }
            }
            else
            {
              v173 = v144[v160];
              v174 = v160 + 1;
              v175 = v328;
            }
            if (!v173 || (v176 = _CIIndexSetEnumeratorNext((unsigned int *)buf)) == 0)
            {
              v80 = 0;
              v163 = v164;
              a1 = v337;
              v51 = (uint64_t)v331;
              goto LABEL_236;
            }
            v177 = v176;
            if ((CIIndexSetHasIndex((uint64_t)v175, v176) & 1) != 0)
            {
              v296 = v164;
              if (gSILogLevels[0] >= 5)
              {
                v289 = *__error();
                v209 = _SILogForLogForCategory(0);
                if (os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v350 = v325;
                  v351 = v177;
                  _os_log_impl(&dword_1B8270000, v209, OS_LOG_TYPE_DEFAULT, "DU: Read %u", v350, 8u);
                }
                *__error() = v289;
              }
              v179 = lockedCountItemsInRange(v175, v177, v311, v178) - 1;
              v181 = v304 + v179;
              v182 = v179 + v303;
              v183 = v174;
              v184 = v296;
              v185 = v173;
              v186 = 0;
              while (1)
              {
                v187 = __OFSUB__(v185, v186);
                v185 -= v186;
                if ((v185 < 0) ^ v187 | (v185 == 0))
                {
                  v270 = __si_assert_copy_extra_268();
                  v271 = v270;
                  v272 = "";
                  if (v270)
                    v272 = v270;
                  __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 2776, "last > nextPos", v272);
                  free(v271);
                  if (__valid_fs(-1))
                    v273 = 2989;
                  else
                    v273 = 3072;
                  *(_DWORD *)v273 = -559038737;
                  abort();
                }
                if (v181 >= v69)
                  break;
                v188 = v184;
                v189 = *(const void ***)(v67 + 8 * v182);
                if (!v189)
                {
                  v189 = (const void **)CIIndexSetCreateWithRange(0, v185, 1);
                  *(_QWORD *)(v67 + 8 * v182) = v189;
                }
                CIIndexSetAddIndexExpandingRange(v189, v185, v180);
                if (v183 - 32764 > 0xFFFFFFFFFFFF7FFELL
                  || (v190 = v183 + v188,
                      v188 = v190 & 0x3FFFFFFFFFFFF000,
                      v191 = fd_pread(v145, v144, 0x8000uLL, v190 & 0x3FFFFFFFFFFFF000),
                      v160 = v190 & 0xC000000000000FFFLL,
                      v183 = v190 & 0xC000000000000FFFLL,
                      v161 = v188,
                      v191 != -1))
                {
                  v184 = v188;
                  v192 = v183 + 1;
                  v193 = v144[v183];
                  if ((char)v144[v183] < 0)
                  {
                    if (v193 > 0xBF)
                    {
                      if (v193 > 0xDF)
                      {
                        if (v193 > 0xEF)
                        {
                          v195 = *(_DWORD *)&v144[v192];
                          v196 = v183 + 5;
                        }
                        else
                        {
                          v195 = ((v193 & 0xF) << 24) | (v144[v192] << 16) | (v300[v183 + 2] << 8) | v300[v183 + 3];
                          v196 = v183 + 4;
                        }
                      }
                      else
                      {
                        v195 = ((v193 & 0x1F) << 16) | (v144[v192] << 8) | v300[v183 + 2];
                        v196 = v183 + 3;
                      }
                    }
                    else
                    {
                      v195 = v144[v192] | ((v193 & 0x3F) << 8);
                      v196 = v183 + 2;
                    }
                    v194 = v195;
                    v192 = v196;
                  }
                  else
                  {
                    v194 = v144[v183];
                  }
                  v197 = v194;
                  v183 = v192;
                  v160 = v192;
                  v161 = v188;
                  v186 = v197;
                  if (v197)
                    continue;
                }
                goto LABEL_161;
              }
              v160 = v174;
              v161 = v296;
            }
            else
            {
              if (gSILogLevels[0] >= 5)
              {
                v210 = *__error();
                v211 = _SILogForLogForCategory(0);
                if (os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v350 = v324;
                  v351 = v177;
                  _os_log_impl(&dword_1B8270000, v211, OS_LOG_TYPE_DEFAULT, "DU: Skip %u", v350, 8u);
                }
                *__error() = v210;
              }
              v198 = v164;
              do
              {
                if (v174 - 32764 > 0xFFFFFFFFFFFF7FFELL)
                {
                  v202 = v198;
                }
                else
                {
                  v199 = v174 + v198;
                  v200 = (v174 + v198) & 0x3FFFFFFFFFFFF000;
                  v201 = fd_pread(v145, v144, 0x8000uLL, v200);
                  v160 = v199 & 0xC000000000000FFFLL;
                  v174 = v199 & 0xC000000000000FFFLL;
                  v161 = v200;
                  v202 = v200;
                  if (v201 == -1)
                    goto LABEL_161;
                }
                v198 = v202;
                v203 = v174 + 1;
                v204 = v144[v174];
                if ((char)v144[v174] < 0)
                {
                  if (v204 > 0xBF)
                  {
                    if (v204 > 0xDF)
                    {
                      if (v204 > 0xEF)
                      {
                        v206 = *(_DWORD *)&v144[v203];
                        v207 = v174 + 5;
                      }
                      else
                      {
                        v206 = ((v204 & 0xF) << 24) | (v144[v203] << 16) | (v300[v174 + 2] << 8) | v300[v174 + 3];
                        v207 = v174 + 4;
                      }
                    }
                    else
                    {
                      v206 = ((v204 & 0x1F) << 16) | (v144[v203] << 8) | v300[v174 + 2];
                      v207 = v174 + 3;
                    }
                  }
                  else
                  {
                    v206 = v144[v203] | ((v204 & 0x3F) << 8);
                    v207 = v174 + 2;
                  }
                  v205 = v206;
                  v203 = v207;
                }
                else
                {
                  v205 = v144[v174];
                }
                v208 = v205;
                v174 = v203;
                v160 = v203;
                v161 = v198;
              }
              while (v208);
            }
          }
          v80 = 0;
          v163 = v164;
          a1 = v337;
LABEL_236:
          v150 = v163;
          v148 = v297;
          v149 = v298;
          if (!v298)
            goto LABEL_237;
        }
        v279 = __si_assert_copy_extra_268();
        v275 = v279;
        v280 = "";
        if (v279)
          v280 = v279;
        v286 = "(value & 1) == 0";
        v287 = v280;
        v277 = "PayloadIterator.h";
        v278 = 279;
        goto LABEL_328;
      }
LABEL_248:
      locked = v312;
LABEL_249:
      v218 = v80;
      v81 = v310;
      v219 = v306 + 8 * v310;
      (*(void (**)(_QWORD))(v306 + 96))(*(_QWORD *)(v219 + 80));
      *(_QWORD *)(v219 + 80) = 0;
      v79 = v307 + 1;
      v58 = v218;
      v80 = v218;
    }
    while (v307 + 1 < (unint64_t)*(unsigned int *)(a1 + 96));
LABEL_253:
    if (v58 != -1)
    {
      v220 = locked;
      memset(buf, 0, sizeof(buf));
      _CIIndexSetInitializeEnumeratorForRange(*(_DWORD **)(a1 + 104), (uint64_t)buf, v314, v311);
      v221 = locked;
      v222 = 0;
      v295 = v221;
      v223 = v220;
      v224 = v58;
      while (1)
      {
        v225 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
        if (v225 - 1 >= 0xFFFFFFFE)
        {
          v51 = (uint64_t)v331;
          goto LABEL_299;
        }
        v226 = v225;
        v227 = v225;
        *(_QWORD *)v347 = 0;
        v348 = 0;
        v349 = 0;
        _CIIndexSetInitializeEnumeratorForRange(*(_DWORD **)(v67 + 8 * v222), (uint64_t)v347, 0, 0x7FFFFFFFu);
        v228 = *(_DWORD *)(a1 + 36);
        if (*(_DWORD *)(a1 + 48) == 9)
        {
          if (!v228)
            goto LABEL_269;
          if (v228 != 3)
          {
            v229 = *(_DWORD *)(a1 + 132);
            if (v229)
              v230 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * (v229 - 1));
            else
              v230 = 5;
            v294 = v226;
            v244 = 0xFFFFFFFFLL;
            for (j = 0; ; j = 1)
            {
              do
              {
                v246 = _CIIndexSetEnumeratorNext((unsigned int *)v347);
                if (v246 - 1 > 0xFFFFFFFD)
                  goto LABEL_276;
                v247 = 0;
                v338 = v244;
                if (*(_QWORD *)(a1 + 144))
                  v247 = &v338;
              }
              while (!checkNearness_9656(1u, v230, a1, v246, v67, v295, v222, v246, v246, v247, *(_DWORD *)(a1 + 36)));
              v249 = *(_QWORD *)(a1 + 144);
              if (v249)
              {
                v250 = v244;
                if (v338 >= v244)
                  goto LABEL_287;
                v244 = v338;
                changesSetMinCount(v249, v294, v338 + 1);
              }
              v250 = v244;
LABEL_287:
              v244 = v250;
              if ((j & 1) == 0)
              {
                if (dword_1EF19FCB4 >= 5)
                {
                  v252 = *__error();
                  v253 = _SILogForLogForCategory(10);
                  if (os_log_type_enabled(v253, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)v350 = v319;
                    v351 = v227;
                    _os_log_impl(&dword_1B8270000, v253, OS_LOG_TYPE_DEFAULT, "Yes: %d", v350, 8u);
                  }
                  *__error() = v252;
                }
                v251 = *(unsigned int **)(a1 + 80);
                *(_DWORD *)v350 = -1;
                _CIIndexSetAddIndex(v251, v227, 0, v350, v248);
              }
              if (!*(_QWORD *)(a1 + 144) || (_DWORD)v244 + 1 == *(_DWORD *)(a1 + 96))
              {
                v224 = 1;
                goto LABEL_276;
              }
              v224 = 1;
            }
          }
        }
        else if (v228 != 3)
        {
          goto LABEL_269;
        }
        if (*(_DWORD *)(a1 + 132))
        {
LABEL_263:
          v231 = _CIIndexSetEnumeratorNext((unsigned int *)v347);
          if (v231 - 1 > 0xFFFFFFFD)
            goto LABEL_276;
          v233 = 0;
          v234 = v223;
          v235 = v231;
          while (v233 + 1 < (unint64_t)*(unsigned int *)(a1 + 96))
          {
            if (*(_QWORD *)(v67 + 8 * v234))
            {
              v236 = *(_DWORD *)(*(_QWORD *)(a1 + 136) + 4 * v233) + v235;
              HasIndex = CIIndexSetHasIndex(*(_QWORD *)(v67 + 8 * v234), v236);
              v234 += v312;
              ++v233;
              v235 = v236;
              if ((HasIndex & 1) != 0)
                continue;
            }
            goto LABEL_263;
          }
          goto LABEL_275;
        }
LABEL_269:
        v238 = _CIIndexSetEnumeratorNext((unsigned int *)v347);
        if ((v238 - 1) > 0xFFFFFFFD)
          goto LABEL_276;
        v239 = v238;
        v240 = 1;
        v241 = v223;
        while (v240 < *(unsigned int *)(a1 + 96))
        {
          if (*(_QWORD *)(v67 + 8 * v241))
          {
            v242 = CIIndexSetHasIndex(*(_QWORD *)(v67 + 8 * v241), v239 + (int)v240++);
            v241 += v312;
            if ((v242 & 1) != 0)
              continue;
          }
          goto LABEL_269;
        }
LABEL_275:
        v243 = *(unsigned int **)(a1 + 80);
        *(_DWORD *)v350 = -1;
        _CIIndexSetAddIndex(v243, v227, 0, v350, v232);
LABEL_276:
        ++v222;
        ++v223;
      }
    }
    v224 = -1;
LABEL_299:
    CICleanUpReset(v51, v313);
    v58 = v224;
    LOBYTE(v60) = v315;
    a3 = v314;
LABEL_300:
    v57 = 1;
    v48 = v329;
    v59 = 0;
  }
  while ((v60 & 1) != 0);
  v254 = *(_DWORD *)(a1 + 96);
  v255 = 1;
  v256 = 0;
  do
  {
    v257 = v255;
    if (v254)
    {
      v258 = 0;
      do
      {
        v259 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v258) + 64) + 8 * v256;
        v260 = *(void **)(v259 + 224);
        *(_QWORD *)(v259 + 224) = 0;
        if (v260)
        {
          if (*(uint64_t *)v260 >= 1)
          {
            v261 = 32;
            v262 = 0;
            do
            {
              v263 = v262;
              v264 = v261;
              CFRelease(*(CFTypeRef *)(*((_QWORD *)v260 + 2) + v261));
              v262 = v263 + 1;
              v261 = v264 + 40;
            }
            while (*(_QWORD *)v260 > v263 + 1);
          }
          free(*((void **)v260 + 2));
          free(v260);
          a1 = v337;
        }
        ++v258;
      }
      while (v258 < *(unsigned int *)(a1 + 96));
      v265 = *(_DWORD *)(a1 + 96);
    }
    else
    {
      v265 = 0;
    }
    v254 = v265;
    v256 = 1;
    v255 = 0;
  }
  while ((v257 & 1) != 0);
  v266 = *(_QWORD *)&threadData[18 * HIDWORD(v340) + 2];
  v267 = v340;
  v268 = v266 + 320 * v340;
  *(_DWORD *)(v268 + 312) = v333;
  v269 = *(void (**)(_QWORD))(v268 + 232);
  if (v269)
    v269(*(_QWORD *)(v266 + 320 * v267 + 288));
  dropThreadId(HIDWORD(v340), 0, v334);
LABEL_21:
  v38 = v336;
  v39 = *(_QWORD *)&threadData[18 * HIDWORD(v344) + 2];
  v40 = v344;
  v41 = v39 + 320 * v344;
  *(_DWORD *)(v41 + 312) = v335;
  v42 = *(void (**)(_QWORD))(v41 + 232);
  if (v42)
    v42(*(_QWORD *)(v39 + 320 * v40 + 288));
  result = (_DWORD *)dropThreadId(HIDWORD(v344), 0, v38);
LABEL_2:
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t checkNearness_9656(unsigned int a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, unsigned int a9, unsigned int *a10, unsigned int a11)
{
  _DWORD *v12;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  char v31;
  _QWORD v33[3];

  v12 = *(_DWORD **)(a5 + 8 * (a7 + a1 * a6));
  if (v12)
  {
    memset(v33, 0, sizeof(v33));
    v19 = a2;
    if (*(_DWORD *)(a3 + 132) >= a1)
      v19 = *(_DWORD *)(*(_QWORD *)(a3 + 136) + 4 * (a1 - 1));
    v20 = ~v19 + a4;
    if (v19 + 1 >= a4)
      v20 = 1;
    if (a11 <= 1)
      v21 = v20;
    else
      v21 = a4;
    _CIIndexSetInitializeEnumeratorForRange(v12, (uint64_t)v33, v21, v19 + a4);
    if (a10)
      v22 = *a10;
    else
      v22 = -1;
    v23 = 0;
    v24 = a1 + 1;
LABEL_14:
    while (2)
    {
      v31 = v23;
      do
      {
        while (1)
        {
          v25 = _CIIndexSetEnumeratorNext((unsigned int *)v33);
          if ((v25 - 1) > 0xFFFFFFFD)
          {
            v23 = v31;
            return v23 & 1;
          }
          if ((_DWORD)v25 != a4)
          {
            v26 = v25 >= a8 ? a8 : v25;
            v27 = v25 <= a9 ? a9 : v25;
            v28 = v27 - v26;
            if (v27 - v26 <= v22)
              break;
          }
        }
        if (v24 >= *(_DWORD *)(a3 + 96))
        {
          v23 = 1;
          if (!a10)
            goto LABEL_14;
          LODWORD(v29) = *a10;
          if (*a10 >= v28)
            v29 = v28;
          else
            v29 = v29;
          *a10 = v29;
          goto LABEL_33;
        }
      }
      while (!checkNearness_9656(v24, a2, a3, v25, a5, a6, a7));
      if (!a10)
      {
        v23 = 1;
        return v23 & 1;
      }
      v29 = *a10;
      v23 = 1;
LABEL_33:
      if (v29 != a6)
        continue;
      break;
    }
  }
  else
  {
    v23 = 0;
  }
  return v23 & 1;
}

uint64_t CICompactPayloads(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, int a7, char a8, _DWORD *a9)
{
  unsigned int v11;
  double Current;
  int v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  pthread_key_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  int64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  unsigned int v50;
  char v51;
  int v52;
  NSObject *v53;
  os_log_type_t v54;
  float v55;
  BOOL v56;
  uint64_t result;
  char v58;
  int v59;
  NSObject *v60;
  int v61;
  uint64_t v62;
  pid_t v63;
  unsigned int v64;
  unsigned int v65;
  pid_t v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  double v70;
  _BYTE *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  size_t v75;
  unint64_t v76;
  int v77;
  NSObject *v78;
  os_log_type_t v79;
  float v80;
  int v81;
  double v82;
  _BYTE *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  size_t v87;
  unint64_t v88;
  unsigned int v89;
  BOOL v90;
  BOOL v91;
  unsigned int v92;
  BOOL v93;
  uint64_t v94;
  int v95;
  char *v96;
  char *v97;
  double v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  _BYTE *v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  _BYTE *v117;
  int v118;
  NSObject *v119;
  os_log_type_t v120;
  NSObject *v121;
  os_log_type_t v122;
  const char *v123;
  uint32_t v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  __CFBitVector *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t VInt64;
  char *v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unsigned int v142;
  unint64_t v143;
  unint64_t v144;
  uint8_t *v145;
  uint64_t v147;
  uint64_t v148;
  char v149;
  char *v150;
  _BYTE *v151;
  unint64_t v152;
  char *v153;
  unint64_t v154;
  unint64_t v155;
  unsigned int v156;
  uint8_t *v157;
  uint64_t v159;
  uint64_t v160;
  char v161;
  unint64_t v162;
  unint64_t v163;
  uint8_t *v164;
  uint64_t v165;
  uint64_t v166;
  size_t v167;
  _OWORD *v168;
  uint64_t v169;
  uint64_t v170;
  size_t v171;
  _OWORD *v172;
  uint64_t v173;
  uint64_t v174;
  size_t v175;
  uint64x2_t v176;
  int32x2_t v177;
  uint64x2_t v178;
  int32x2_t v179;
  unint64_t v180;
  uint64x2_t v181;
  int16x8_t v182;
  uint64x2_t v183;
  int16x8_t v184;
  unint64_t v185;
  unint64_t v186;
  uint8_t *v187;
  size_t v188;
  uint64_t v189;
  uint64_t v190;
  size_t v191;
  char *v192;
  char *v193;
  unint64_t v194;
  unint64_t v195;
  char *v196;
  unint64_t v197;
  _BYTE *v198;
  int v199;
  NSObject *v200;
  os_log_type_t v201;
  _QWORD *v202;
  int v203;
  NSObject *v204;
  os_log_type_t v205;
  float v206;
  unsigned int v207;
  BOOL v208;
  BOOL v209;
  int v210;
  NSObject *v211;
  os_log_type_t v212;
  _BOOL4 v213;
  int v214;
  int v215;
  CFAbsoluteTime v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  char *v221;
  char *v222;
  void *v223;
  unint64_t v224;
  unint64_t v225;
  unsigned int VInt32_v2;
  int v227;
  NSObject *v228;
  unint64_t v229;
  uint64_t v231;
  CFIndex v232;
  _QWORD *v233;
  CFIndex v234;
  CFIndex v235;
  const __CFBitVector *v236;
  __CFBitVector *MutableCopy;
  const void *v238;
  uint64_t v239;
  BOOL v240;
  int v241;
  int v242;
  CFAbsoluteTime v243;
  char *v244;
  uint64_t v245;
  char *v246;
  char *v247;
  const char *v248;
  char *v249;
  const char *v250;
  char *v251;
  const char *v252;
  char *v253;
  const char *v254;
  char *v255;
  const char *v256;
  char *v257;
  const char *v258;
  char *v259;
  const char *v260;
  char *v261;
  const char *v262;
  unint64_t v263;
  void *v264;
  int v265;
  unint64_t v266;
  const __CFAllocator *allocator;
  uint64_t v269;
  unint64_t v270;
  void *v272;
  uint64_t v274;
  unint64_t v275;
  unsigned int v276;
  CFMutableBitVectorRef bv;
  CFMutableBitVectorRef bva;
  CFMutableBitVectorRef bvb;
  unint64_t v280;
  uint64_t v281;
  int v282;
  int v283;
  uint64_t v284;
  unsigned int v285;
  _BYTE v287[24];
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  void *v291;
  char *v292;
  void *v293;
  uint64_t v294;
  unsigned int v295;
  _BYTE v296[12];
  unsigned int v297;
  unint64_t v298[2];
  uint64_t v299;
  uint8_t buf[16];
  __int128 v301;
  void *ptr[2];
  __int128 v303;
  void *v304[2];
  __int128 v305;
  void *v306[2];
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  char v314[1024];
  char __str[1024];
  uint8_t v316[32];
  __int16 v317;
  uint64_t v318;
  _BYTE __src[32];
  unint64_t v320;
  uint64_t v321;
  void *v322;
  char *v323;
  char *v324;
  uint64_t v325;
  _OWORD v326[2];
  _OWORD v327[2];
  uint64_t v328;

  v328 = *MEMORY[0x1E0C80C00];
  bzero(__str, 0x400uLL);
  bzero(v314, 0x400uLL);
  v11 = *(_DWORD *)(a5 + 4448);
  Current = CFAbsoluteTimeGetCurrent();
  v13 = *__error();
  v14 = _SILogForLogForCategory(10);
  v15 = 2 * (dword_1EF19FCB4 < 4);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = "position";
    if ((_DWORD)a2 == 1)
      v16 = "posting";
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v16;
    _os_log_impl(&dword_1B8270000, v14, v15, "Compacting %s payloads ", buf, 0xCu);
  }
  *__error() = v13;
  v312 = 0u;
  v313 = 0u;
  v310 = 0u;
  v311 = 0u;
  v308 = 0u;
  v309 = 0u;
  *(_OWORD *)v306 = 0u;
  v307 = 0u;
  *(_OWORD *)v304 = 0u;
  v305 = 0u;
  *(_OWORD *)ptr = 0u;
  v303 = 0u;
  *(_OWORD *)buf = 0u;
  v301 = 0u;
  v17 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v17 = __THREAD_SLOT_KEY;
  }
  v18 = pthread_getspecific(v17);
  if (!v18 || (unint64_t)v18 >= 0x801)
  {
    makeThreadId();
    v18 = pthread_getspecific(__THREAD_SLOT_KEY);
  }
  v19 = (uint64_t)v18 - 1;
  v280 = threadData[18 * v19 + 8];
  v281 = v19;
  CICleanUpPush(v19, (uint64_t)CICompactPayloadsCtxFree, (uint64_t)buf);
  v272 = (void *)(a5 + 32);
  allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v284 = a5;
  v285 = v11;
  while (2)
  {
    v312 = 0u;
    v313 = 0u;
    v310 = 0u;
    v311 = 0u;
    v308 = 0u;
    v309 = 0u;
    *(_OWORD *)v306 = 0u;
    v307 = 0u;
    *(_OWORD *)v304 = 0u;
    v305 = 0u;
    *(_OWORD *)ptr = 0u;
    v303 = 0u;
    *(_OWORD *)buf = 0u;
    v301 = 0u;
    HIDWORD(ptr[0]) = 64;
    ptr[1] = malloc_type_malloc(0x800uLL, 0x1000040F6D918ACuLL);
    v303 = xmmword_1B8632010;
    v304[0] = malloc_type_malloc(0x10000uLL, 0x3BBBB36BuLL);
    v20 = *(_QWORD *)(a5 + 24);
    *(_QWORD *)&v301 = *(_QWORD *)(a5 + 4480);
    *((_QWORD *)&v301 + 1) = v20;
    v325 = 0;
    *(_OWORD *)__src = *(_OWORD *)a5;
    *(_QWORD *)&__src[16] = v301;
    *(_QWORD *)&__src[24] = 0;
    v320 = v20;
    v321 = 4096;
    v21 = (char *)malloc_type_malloc(0x1000uLL, 0xFF2C3F96uLL);
    v322 = v21;
    v323 = v21;
    v324 = v21;
    LODWORD(v325) = 0;
    memset(v287, 0, 20);
    v22 = v21;
    while (1)
    {
      do
      {
        while (1)
        {
          do
          {
            while (1)
            {
              do
              {
                while (1)
                {
                  do
                  {
                    while (v22 < v21)
                    {
                      v323 = v22 + 1;
                      v287[0] = *v22++;
                      if (v287[0] == 255)
                        goto LABEL_14;
                    }
                    if (!_PayloadScannerReadNextChar((uint64_t)__src, v287))
                      goto LABEL_93;
                    v22 = v323;
                    v21 = v324;
                  }
                  while (v287[0] != 255);
LABEL_14:
                  if (v22 >= v21)
                    break;
                  v323 = v22 + 1;
                  v287[1] = *v22++;
                  if (v287[1] == 255)
                    goto LABEL_16;
                }
                if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[1]))
                  goto LABEL_93;
                v22 = v323;
                v21 = v324;
              }
              while (v287[1] != 255);
LABEL_16:
              if (v22 >= v21)
                break;
              v323 = v22 + 1;
              v287[2] = *v22++;
              if (v287[2] == 255)
                goto LABEL_18;
            }
            if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[2]))
              goto LABEL_93;
            v22 = v323;
            v21 = v324;
          }
          while (v287[2] != 255);
LABEL_18:
          if (v22 >= v21)
            break;
          v323 = v22 + 1;
          v287[3] = *v22++;
          if (v287[3] == 255)
            goto LABEL_20;
        }
        if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[3]))
          goto LABEL_93;
        v22 = v323;
        v21 = v324;
      }
      while (v287[3] != 255);
LABEL_20:
      if ((((_DWORD)v21 - (_DWORD)v22) & 0xFFFFFFF0) == 0)
        break;
      v23 = *(_OWORD *)v22;
      v22 += 16;
      *(_OWORD *)&v287[4] = v23;
      v323 = v22;
LABEL_22:
      if (*(_DWORD *)&v287[16] == -1)
      {
        v24 = *(_QWORD *)&__src[24];
        v25 = v322;
        v26 = *(_QWORD *)&v287[4];
        v27 = *(_DWORD *)&v287[12];
        v28 = (int)ptr[0];
        if (LODWORD(ptr[0]) == HIDWORD(ptr[0]))
        {
          HIDWORD(ptr[0]) = 2 * LODWORD(ptr[0]);
          v29 = (char *)malloc_type_realloc(ptr[1], 32 * (2 * LODWORD(ptr[0])), 0x1000040F6D918ACuLL);
          ptr[1] = v29;
          v28 = (int)ptr[0];
        }
        else
        {
          v29 = (char *)ptr[1];
        }
        v30 = &v22[v24] - v25;
        LODWORD(ptr[0]) = v28 + 1;
        v31 = &v29[32 * v28];
        *(_QWORD *)v31 = v30;
        *((_QWORD *)v31 + 1) = v26;
        *((_QWORD *)v31 + 3) = 0;
        *((_DWORD *)v31 + 4) = v27;
        *((_DWORD *)v31 + 5) = 0;
        v32 = v30 + v26;
        v33 = *(_QWORD *)&__src[24];
        v22 = (char *)v322;
        if (v32 >= *(_QWORD *)&__src[24]
          && (v21 = v324, (unint64_t)&v324[*(_QWORD *)&__src[24] - (_QWORD)v322] >= v32))
        {
          v34 = v322;
          v22 = (char *)v322 + v32 - *(_QWORD *)&__src[24];
          v323 = v22;
        }
        else
        {
          v324 = (char *)v322;
          v34 = v322;
          v33 = v32;
          v21 = (char *)v322;
          v323 = (char *)v322;
          *(_QWORD *)&__src[24] = v32;
        }
        if (v22 - v34 + v33 != v32)
        {
LABEL_461:
          v244 = __si_assert_copy_extra_1644(0);
          __message_assert("%s:%u: failed assertion '%s' %s ");
          goto LABEL_462;
        }
      }
      else
      {
        v21 = v324;
      }
    }
    if (v22 < v21)
    {
      v35 = v22 + 1;
      v323 = v22 + 1;
      v287[4] = *v22;
      if (v22 + 1 < v21)
        goto LABEL_46;
LABEL_63:
      if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[5]))
        goto LABEL_93;
      v36 = v323;
      v21 = v324;
      if (v323 >= v324)
        goto LABEL_65;
LABEL_47:
      v37 = v36 + 1;
      v323 = v36 + 1;
      v287[6] = *v36;
      if (v36 + 1 < v21)
        goto LABEL_48;
LABEL_67:
      if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[7]))
        goto LABEL_93;
      v38 = v323;
      v21 = v324;
      if (v323 >= v324)
        goto LABEL_69;
LABEL_49:
      v39 = v38 + 1;
      v323 = v38 + 1;
      v287[8] = *v38;
      if (v38 + 1 < v21)
        goto LABEL_50;
LABEL_71:
      if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[9]))
        goto LABEL_93;
      v40 = v323;
      v21 = v324;
      if (v323 >= v324)
        goto LABEL_73;
LABEL_51:
      v41 = v40 + 1;
      v323 = v40 + 1;
      v287[10] = *v40;
      if (v40 + 1 < v21)
        goto LABEL_52;
LABEL_75:
      if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[11]))
        goto LABEL_93;
      v42 = v323;
      v21 = v324;
      if (v323 >= v324)
        goto LABEL_77;
LABEL_53:
      v43 = v42 + 1;
      v323 = v42 + 1;
      v287[12] = *v42;
      if (v42 + 1 < v21)
        goto LABEL_54;
LABEL_79:
      if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[13]))
        goto LABEL_93;
      v44 = v323;
      v21 = v324;
      if (v323 >= v324)
        goto LABEL_81;
LABEL_55:
      v45 = v44 + 1;
      v323 = v44 + 1;
      v287[14] = *v44;
      if (v44 + 1 < v21)
        goto LABEL_56;
LABEL_83:
      if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[15]))
        goto LABEL_93;
      v46 = v323;
      v21 = v324;
      if (v323 >= v324)
        goto LABEL_85;
LABEL_57:
      v47 = v46 + 1;
      v323 = v46 + 1;
      v287[16] = *v46;
      if (v46 + 1 < v21)
        goto LABEL_58;
LABEL_87:
      if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[17]))
        goto LABEL_93;
      v48 = v323;
      v21 = v324;
      if (v323 >= v324)
        goto LABEL_89;
LABEL_59:
      v49 = v48 + 1;
      v323 = v48 + 1;
      v287[18] = *v48;
      if (v48 + 1 >= v21)
        goto LABEL_91;
      goto LABEL_60;
    }
    if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[4]))
      goto LABEL_93;
    v35 = v323;
    v21 = v324;
    if (v323 >= v324)
      goto LABEL_63;
LABEL_46:
    v36 = v35 + 1;
    v323 = v35 + 1;
    v287[5] = *v35;
    if (v35 + 1 < v21)
      goto LABEL_47;
LABEL_65:
    if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[6]))
      goto LABEL_93;
    v37 = v323;
    v21 = v324;
    if (v323 >= v324)
      goto LABEL_67;
LABEL_48:
    v38 = v37 + 1;
    v323 = v37 + 1;
    v287[7] = *v37;
    if (v37 + 1 < v21)
      goto LABEL_49;
LABEL_69:
    if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[8]))
      goto LABEL_93;
    v39 = v323;
    v21 = v324;
    if (v323 >= v324)
      goto LABEL_71;
LABEL_50:
    v40 = v39 + 1;
    v323 = v39 + 1;
    v287[9] = *v39;
    if (v39 + 1 < v21)
      goto LABEL_51;
LABEL_73:
    if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[10]))
      goto LABEL_93;
    v41 = v323;
    v21 = v324;
    if (v323 >= v324)
      goto LABEL_75;
LABEL_52:
    v42 = v41 + 1;
    v323 = v41 + 1;
    v287[11] = *v41;
    if (v41 + 1 < v21)
      goto LABEL_53;
LABEL_77:
    if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[12]))
      goto LABEL_93;
    v43 = v323;
    v21 = v324;
    if (v323 >= v324)
      goto LABEL_79;
LABEL_54:
    v44 = v43 + 1;
    v323 = v43 + 1;
    v287[13] = *v43;
    if (v43 + 1 < v21)
      goto LABEL_55;
LABEL_81:
    if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[14]))
      goto LABEL_93;
    v45 = v323;
    v21 = v324;
    if (v323 >= v324)
      goto LABEL_83;
LABEL_56:
    v46 = v45 + 1;
    v323 = v45 + 1;
    v287[15] = *v45;
    if (v45 + 1 < v21)
      goto LABEL_57;
LABEL_85:
    if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[16]))
      goto LABEL_93;
    v47 = v323;
    v21 = v324;
    if (v323 >= v324)
      goto LABEL_87;
LABEL_58:
    v48 = v47 + 1;
    v323 = v47 + 1;
    v287[17] = *v47;
    if (v47 + 1 < v21)
      goto LABEL_59;
LABEL_89:
    if (!_PayloadScannerReadNextChar((uint64_t)__src, &v287[18]))
      goto LABEL_93;
    v49 = v323;
    if (v323 < v324)
    {
LABEL_60:
      v22 = v49 + 1;
      v323 = v49 + 1;
      v287[19] = *v49;
      goto LABEL_22;
    }
LABEL_91:
    if (_PayloadScannerReadNextChar((uint64_t)__src, &v287[19]))
    {
      v22 = v323;
      goto LABEL_22;
    }
LABEL_93:
    if ((_DWORD)v325)
    {
      if (!HIDWORD(v304[1]))
        HIDWORD(v304[1]) = v325;
    }
    else
    {
      qsort_r(ptr[1], LODWORD(ptr[0]), 0x20uLL, v272, (int (__cdecl *)(void *, const void *, const void *))postingsOffsetCompare);
    }
    if (v322)
      free(v322);
    v50 = HIDWORD(v304[1]);
    if (HIDWORD(v304[1]))
      goto LABEL_100;
    v51 = 0;
    if (*a9)
    {
      v50 = 0;
      goto LABEL_101;
    }
    v50 = 0;
    if (!LODWORD(ptr[0]))
      goto LABEL_101;
    v61 = a7;
    if (a7 == -1)
    {
      v62 = *(_QWORD *)(a5 + 4480);
      if (v62)
        v61 = *(_DWORD *)(v62 + 44);
      else
        v61 = -1;
    }
    v63 = getpid();
    do
    {
      v64 = __ldxr(&CICompactPayloads_sUnique);
      v65 = v64 + 1;
    }
    while (__stxr(v65, &CICompactPayloads_sUnique));
    snprintf(__str, 0x400uLL, "%s.mds.%d.%d.compactPayloads1.idx", a6, v63, v65);
    *(_QWORD *)buf = fd_create_protected(v61, __str, 536873474, 0);
    if (!*(_QWORD *)buf)
      goto LABEL_401;
    v66 = getpid();
    do
    {
      v67 = __ldxr(&CICompactPayloads_sUnique);
      v68 = v67 + 1;
    }
    while (__stxr(v68, &CICompactPayloads_sUnique));
    snprintf(v314, 0x400uLL, "%s.mds.%d.%d.compactPayloads2.idx", a6, v66, v68);
    *(_QWORD *)&buf[8] = fd_create_protected(v61, v314, 536873474, 0);
    if (!*(_QWORD *)&buf[8])
    {
LABEL_401:
      v51 = 0;
      v50 = 0;
      goto LABEL_101;
    }
    v69 = *(_QWORD *)buf;
    LOBYTE(v304[1]) = a8;
    v70 = CFAbsoluteTimeGetCurrent();
    *(_QWORD *)&v305 = 0;
    HIDWORD(v308) = 0;
    v306[0] = (void *)0x4000000000;
    v306[1] = malloc_type_malloc(0x800uLL, 0x1000040F6D918ACuLL);
    v307 = xmmword_1B8632010;
    *(_QWORD *)&v308 = malloc_type_malloc(0x10000uLL, 0x3BBBB36BuLL);
    v305 = v69;
    *(_DWORD *)__src = -1;
    *(_QWORD *)&__src[4] = 0;
    v71 = __src;
    v72 = 20;
    *(_QWORD *)&__src[12] = 0xFFFFFFFF00000000;
    do
    {
      while (1)
      {
        v73 = *((_QWORD *)&v307 + 1);
        v74 = v307;
        if (*((_QWORD *)&v307 + 1) - (_QWORD)v307 >= v72)
          v75 = v72;
        else
          v75 = *((_QWORD *)&v307 + 1) - v307;
        if (v75)
        {
          memcpy((void *)(v308 + v307), v71, v75);
          v73 = *((_QWORD *)&v307 + 1);
          v74 = v307 + v75;
          *(_QWORD *)&v307 = v307 + v75;
          v71 += v75;
        }
        if (v74 == v73)
          break;
        v72 -= v75;
        if (!v72)
          goto LABEL_140;
      }
      PayloadPulsesWrite((int *)&v305);
      if (HIDWORD(v308))
        break;
      v72 -= v75;
    }
    while (v72);
LABEL_140:
    PayloadPulsesWrite((int *)&v305);
    v50 = PayloadPulsesReorder((uint64_t)&v301);
    free(ptr[1]);
    ptr[1] = 0;
    free(v304[0]);
    v301 = v305;
    *(_OWORD *)ptr = *(_OWORD *)v306;
    v303 = v307;
    *(_OWORD *)v304 = v308;
    v305 = 0u;
    *(_OWORD *)v306 = 0u;
    if (v69 == *(_QWORD *)buf)
      v76 = *(_QWORD *)&buf[8];
    else
      v76 = *(_QWORD *)buf;
    v307 = 0uLL;
    v308 = 0uLL;
    v77 = *__error();
    v78 = _SILogForLogForCategory(10);
    v79 = 2 * (dword_1EF19FCB4 < 4);
    if (os_log_type_enabled(v78, v79))
    {
      v80 = CFAbsoluteTimeGetCurrent() - v70;
      *(_DWORD *)__src = 134217984;
      *(double *)&__src[4] = v80;
      _os_log_impl(&dword_1B8270000, v78, v79, "Reorder time (%f)", __src, 0xCu);
    }
    *__error() = v77;
    if (v50)
    {
LABEL_100:
      v51 = 0;
      goto LABEL_101;
    }
    v81 = (int)ptr[0];
    if (!LODWORD(ptr[0]))
      goto LABEL_401;
    if (*a9 || LODWORD(ptr[0]) == 1)
      goto LABEL_400;
    v265 = 1;
    v276 = a2;
    while (2)
    {
      LOBYTE(v304[1]) = 0;
      *(_QWORD *)&v305 = 0;
      HIDWORD(v308) = 0;
      v306[0] = (void *)0x4000000000;
      v306[1] = malloc_type_malloc(0x800uLL, 0x1000040F6D918ACuLL);
      v307 = xmmword_1B8632010;
      *(_QWORD *)&v308 = malloc_type_malloc(0x10000uLL, 0x3BBBB36BuLL);
      v263 = v76;
      v305 = v76;
      v82 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)__src = -1;
      *(_QWORD *)&__src[4] = 0;
      v83 = __src;
      v84 = 20;
      *(_QWORD *)&__src[12] = 0xFFFFFFFF00000000;
      do
      {
        while (1)
        {
          v85 = *((_QWORD *)&v307 + 1);
          v86 = v307;
          if (*((_QWORD *)&v307 + 1) - (_QWORD)v307 >= v84)
            v87 = v84;
          else
            v87 = *((_QWORD *)&v307 + 1) - v307;
          if (v87)
          {
            memcpy((void *)(v308 + v307), v83, v87);
            v85 = *((_QWORD *)&v307 + 1);
            v86 = v307 + v87;
            *(_QWORD *)&v307 = v307 + v87;
            v83 += v87;
          }
          if (v86 == v85)
            break;
          v84 -= v87;
          if (!v84)
            goto LABEL_160;
        }
        PayloadPulsesWrite((int *)&v305);
        if (HIDWORD(v308))
          break;
        v84 -= v87;
      }
      while (v84);
LABEL_160:
      PayloadPulsesWrite((int *)&v305);
      v325 = 0;
      v294 = 0;
      *(_QWORD *)&__src[8] = 0;
      *(_QWORD *)__src = 0;
      *(_QWORD *)&__src[16] = v301;
      *(_QWORD *)&__src[24] = 0;
      v320 = *((_QWORD *)&v301 + 1);
      v321 = 0x1000000;
      v322 = malloc_type_malloc(0x1000000uLL, 0x2DD310F6uLL);
      v323 = (char *)v322;
      v324 = (char *)v322;
      *(_QWORD *)&v287[8] = 0;
      *(_QWORD *)v287 = 0;
      *(_QWORD *)&v287[16] = v301;
      v288 = 0;
      v289 = *((_QWORD *)&v301 + 1);
      v290 = 0x1000000;
      v291 = malloc_type_malloc(0x1000000uLL, 0x2DD310F6uLL);
      v292 = (char *)v291;
      v293 = v291;
      v264 = malloc_type_malloc(0x8000uLL, 0x9D8A9808uLL);
      v88 = 0;
      while (1)
      {
        if (*a9)
          v93 = 1;
        else
          v93 = v88 >= LODWORD(ptr[0]);
        if (v93)
          goto LABEL_373;
        v94 = *((_QWORD *)&v305 + 1);
        v95 = (int)v306[0];
        if (LODWORD(v306[0]) == HIDWORD(v306[0]))
        {
          HIDWORD(v306[0]) = 2 * LODWORD(v306[0]);
          v96 = (char *)malloc_type_realloc(v306[1], 32 * (2 * LODWORD(v306[0])), 0x1000040F6D918ACuLL);
          v306[1] = v96;
          v95 = (int)v306[0];
        }
        else
        {
          v96 = (char *)v306[1];
        }
        LODWORD(v306[0]) = v95 + 1;
        v97 = &v96[32 * v95];
        *((_QWORD *)v97 + 1) = 0;
        *((_QWORD *)v97 + 2) = 0;
        *(_QWORD *)v97 = v94;
        *((_QWORD *)v97 + 3) = 1;
        v98 = CFAbsoluteTimeGetCurrent();
        v99 = (char *)ptr[1] + 32 * v88;
        v100 = *(_QWORD *)v99;
        v101 = *((_QWORD *)v99 + 1);
        v102 = *((_DWORD *)v99 + 4);
        v103 = *((_DWORD *)v99 + 6);
        v104 = v101 + *(_QWORD *)v99;
        v320 = v104;
        v105 = *(_QWORD *)&__src[24];
        v106 = (char *)v322;
        if (v100 >= *(_QWORD *)&__src[24] && (unint64_t)&v324[*(_QWORD *)&__src[24] - (_QWORD)v322] >= v100)
        {
          v107 = v322;
          v106 = (char *)v322 + v100 - *(_QWORD *)&__src[24];
          v323 = v106;
        }
        else
        {
          v324 = (char *)v322;
          v107 = v322;
          v105 = v100;
          v323 = (char *)v322;
          *(_QWORD *)&__src[24] = v100;
        }
        if (v106 - v107 + v105 != v100)
        {
          v249 = __si_assert_copy_extra_1644(0);
          v247 = v249;
          v250 = "";
          if (v249)
            v250 = v249;
          __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 100, "PayloadScannerPosition(scanner) == position", v250);
LABEL_481:
          free(v247);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        v275 = v100;
        if (v100 >= v104)
          v108 = 0;
        else
          v108 = PayloadScannerReadVInt32_v2((uint64_t)__src) + v102;
        if (v108 >= v11)
          goto LABEL_461;
        v274 = v101;
        v109 = v88 + 1;
        if (v88 + 1 < LODWORD(ptr[0]))
          break;
        if ((_DWORD)v108)
        {
          PayloadPulsesWriteTermId((int *)&v305, v108);
          PayloadPulsesWriteBytesFromScanner((uint64_t)&v305, (uint64_t)__src, v323 - (_BYTE *)v322 + *(_QWORD *)&__src[24], v320 - (v323 - (_BYTE *)v322 + *(_QWORD *)&__src[24]));
        }
        v118 = *__error();
        v119 = _SILogForLogForCategory(10);
        v120 = 2 * (dword_1EF19FCB4 < 4);
        if (os_log_type_enabled(v119, v120))
        {
          *(_DWORD *)v316 = 134218240;
          *(_QWORD *)&v316[4] = v275;
          *(_WORD *)&v316[12] = 2048;
          *(_QWORD *)&v316[14] = v274;
          v121 = v119;
          v122 = v120;
          v123 = "Merge (offset: %llx, length: %llx)";
          v124 = 22;
          goto LABEL_370;
        }
LABEL_371:
        *__error() = v118;
        PayloadPulsesWrite((int *)&v305);
        v202 = (char *)v306[1] + 32 * (LODWORD(v306[0]) - 1);
        v202[1] = *((_QWORD *)&v305 + 1) - *v202;
        v202[2] = 0;
        v203 = *__error();
        v204 = _SILogForLogForCategory(10);
        v205 = 2 * (dword_1EF19FCB4 < 4);
        if (os_log_type_enabled(v204, v205))
        {
          v206 = CFAbsoluteTimeGetCurrent() - v98;
          *(_DWORD *)v316 = 134217984;
          *(double *)&v316[4] = v206;
          _os_log_impl(&dword_1B8270000, v204, v205, "Merge time (%f)", v316, 0xCu);
        }
        *__error() = v203;
        v89 = v325;
        if ((_DWORD)v294)
          v90 = (_DWORD)v325 == 0;
        else
          v90 = 0;
        if (v90)
          v89 = v294;
        if (v89)
          v91 = 1;
        else
          v91 = HIDWORD(v308) == 0;
        if (v91)
          v92 = v89;
        else
          v92 = HIDWORD(v308);
        v88 = v109;
        if (v92)
          goto LABEL_374;
      }
      v110 = (char *)ptr[1] + 32 * v109;
      if (v103 != *((_DWORD *)v110 + 6))
        goto LABEL_461;
      v111 = *(_QWORD *)v110;
      v112 = *((_QWORD *)v110 + 1);
      v113 = *((_DWORD *)v110 + 4);
      v114 = v112 + *(_QWORD *)v110;
      v289 = v114;
      v115 = v288;
      v116 = (char *)v291;
      if (v111 >= v288 && (unint64_t)v293 + v288 - (_QWORD)v291 >= v111)
      {
        v117 = v291;
        v116 = (char *)v291 + v111 - v288;
        v292 = v116;
      }
      else
      {
        v293 = v291;
        v117 = v291;
        v115 = v111;
        v292 = (char *)v291;
        v288 = v111;
      }
      if (v116 - v117 + v115 != v111)
        goto LABEL_461;
      v269 = v112;
      v270 = v111;
      v125 = v111 >= v114 ? 0 : PayloadScannerReadVInt32_v2((uint64_t)v287) + v113;
      if (v125 >= v11)
        goto LABEL_461;
      if (!(_DWORD)v108 || !v125)
        goto LABEL_364;
      v266 = v88;
      v282 = v103;
      while (2)
      {
        if (!*a9)
        {
          if ((_DWORD)v108 != v125)
          {
            if (v108 >= v125)
            {
              PayloadPulsesWriteTermId((int *)&v305, v125);
              PayloadPulsesAppend(v287, (uint64_t)&v305, a2, 0, v103 != 0);
              v142 = 0;
              if (&v292[v288] - (_BYTE *)v291 < v289)
                v142 = PayloadScannerReadVInt32_v2((uint64_t)v287) + v125;
              v132 = v108;
              v125 = v142;
              if (v142 >= v11)
                goto LABEL_468;
            }
            else
            {
              PayloadPulsesWriteTermId((int *)&v305, v108);
              PayloadPulsesAppend(__src, (uint64_t)&v305, a2, 0, v103 != 0);
              v132 = 0;
              if (&v323[*(_QWORD *)&__src[24]] - (_BYTE *)v322 < v320)
                v132 = PayloadScannerReadVInt32_v2((uint64_t)__src) + v108;
              if (v132 >= v11)
                goto LABEL_468;
            }
            goto LABEL_358;
          }
          PayloadPulsesWriteTermId((int *)&v305, v108);
          if ((_DWORD)a2 == 1)
          {
            memset(v316, 0, sizeof(v316));
            v299 = 0;
            memset(v298, 0, 12);
            v297 = 0;
            v126 = PayloadScannerFirstPostingIfLink(__src, (uint64_t)v298, &v297, &v299);
            memset(v296, 0, sizeof(v296));
            v295 = 0;
            v127 = PayloadScannerFirstPostingIfLink(v287, (uint64_t)v296, &v295, &v299);
            v128 = v127;
            v129 = *(_QWORD *)&v296[4];
            if (*(unint64_t *)((char *)v298 + 4)
              && *(_QWORD *)&v296[4]
              && *(unint64_t *)((char *)v298 + 4) <= *(_QWORD *)&v296[4]
              && !(v126 | v127))
            {
              goto LABEL_461;
            }
            memset(v327, 0, sizeof(v327));
            v130 = (__CFBitVector *)v297;
            if (v297)
            {
              if (*(unint64_t *)((char *)v298 + 4))
              {
                v251 = __si_assert_copy_extra_1644(0);
                v247 = v251;
                v252 = "";
                if (v251)
                  v252 = v251;
                __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 1219, "pe1.docId == 0", v252);
                goto LABEL_481;
              }
LABEL_217:
              v131 = 0;
            }
            else
            {
              if (!*(unint64_t *)((char *)v298 + 4))
                goto LABEL_217;
              v131 = packPostingChunkForSingleDocIDOfType((uint64_t)v327, *(unint64_t *)((char *)v298 + 4), v126);
            }
            memset(v326, 0, sizeof(v326));
            v154 = v295;
            if (v295)
            {
              if (v129)
              {
                v253 = __si_assert_copy_extra_1644(0);
                v247 = v253;
                v254 = "";
                if (v253)
                  v254 = v253;
                __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 1231, "pe2.docId == 0", v254);
                goto LABEL_481;
              }
            }
            else if (v129)
            {
              v129 = packPostingChunkForSingleDocIDOfType((uint64_t)v326, v129, v128);
            }
            v155 = v154;
            bva = v130;
            v156 = v131 + v129 + v154 + (_DWORD)v130;
            v316[0] = 1;
            v157 = v316;
            do
            {
              v159 = *((_QWORD *)&v307 + 1);
              v160 = v307;
              if (*((_QWORD *)&v307 + 1) != (_QWORD)v307)
              {
                v161 = *v157++;
                *(_BYTE *)(v308 + v307) = v161;
                *(_QWORD *)&v307 = v307 + 1;
                if ((_QWORD)v307 != *((_QWORD *)&v307 + 1))
                  break;
              }
              PayloadPulsesWrite((int *)&v305);
            }
            while (!HIDWORD(v308) && v159 == v160);
            if (v156 >> 28)
            {
              v316[0] = v156 | 0x80;
              v316[1] = (v156 >> 7) | 0x80;
              v316[2] = (v156 >> 14) | 0x80;
              v316[3] = (v156 >> 21) | 0x80;
              v316[4] = v156 >> 28;
              v162 = 5;
LABEL_263:
              v163 = v155;
            }
            else
            {
              if ((v156 & 0xFE00000) != 0)
              {
                v316[0] = v156 | 0x80;
                v316[1] = (v156 >> 7) | 0x80;
                v316[2] = (v156 >> 14) | 0x80;
                v316[3] = (v156 & 0xFE00000) >> 21;
                v162 = 4;
                goto LABEL_263;
              }
              v163 = v155;
              if ((v156 & 0x1FC000) != 0)
              {
                v316[0] = v156 | 0x80;
                v316[1] = (v156 >> 7) | 0x80;
                v316[2] = (v156 & 0x1FC000) >> 14;
                v162 = 3;
              }
              else if ((v156 & 0x3F80) != 0)
              {
                v316[0] = v156 | 0x80;
                v316[1] = (unsigned __int16)(v156 & 0x3F80) >> 7;
                v162 = 2;
              }
              else
              {
                v316[0] = v156;
                v162 = 1;
              }
            }
            v164 = v316;
            do
            {
              while (1)
              {
                v165 = *((_QWORD *)&v307 + 1);
                v166 = v307;
                if (*((_QWORD *)&v307 + 1) - (_QWORD)v307 >= v162)
                  v167 = v162;
                else
                  v167 = *((_QWORD *)&v307 + 1) - v307;
                if (v167)
                {
                  memcpy((void *)(v308 + v307), v164, v167);
                  v165 = *((_QWORD *)&v307 + 1);
                  v166 = v307 + v167;
                  *(_QWORD *)&v307 = v307 + v167;
                  v164 += v167;
                }
                if (v166 == v165)
                  break;
                v162 -= v167;
                if (!v162)
                  goto LABEL_274;
              }
              PayloadPulsesWrite((int *)&v305);
              if (HIDWORD(v308))
                break;
              v162 -= v167;
            }
            while (v162);
LABEL_274:
            if ((_DWORD)bva)
            {
              PayloadPulsesWriteBytesFromScanner((uint64_t)&v305, (uint64_t)__src, &v323[*(_QWORD *)&__src[24]] - (_BYTE *)v322, (unint64_t)bva);
              a5 = v284;
            }
            else
            {
              a5 = v284;
              if (v131)
              {
                v168 = v327;
                do
                {
                  while (1)
                  {
                    v169 = *((_QWORD *)&v307 + 1);
                    v170 = v307;
                    if (*((_QWORD *)&v307 + 1) - (_QWORD)v307 >= v131)
                      v171 = v131;
                    else
                      v171 = *((_QWORD *)&v307 + 1) - v307;
                    if (v171)
                    {
                      memcpy((void *)(v308 + v307), v168, v171);
                      v169 = *((_QWORD *)&v307 + 1);
                      v170 = v307 + v171;
                      *(_QWORD *)&v307 = v307 + v171;
                      v168 = (_OWORD *)((char *)v168 + v171);
                    }
                    if (v170 == v169)
                      break;
                    v131 -= v171;
                    if (!v131)
                      goto LABEL_276;
                  }
                  PayloadPulsesWrite((int *)&v305);
                  if (HIDWORD(v308))
                    break;
                  v131 -= v171;
                }
                while (v131);
              }
            }
LABEL_276:
            if ((_DWORD)v163)
            {
              PayloadPulsesWriteBytesFromScanner((uint64_t)&v305, (uint64_t)v287, &v292[v288] - (_BYTE *)v291, v163);
            }
            else if (v129)
            {
              v172 = v326;
              do
              {
                while (1)
                {
                  v173 = *((_QWORD *)&v307 + 1);
                  v174 = v307;
                  if (*((_QWORD *)&v307 + 1) - (_QWORD)v307 >= v129)
                    v175 = v129;
                  else
                    v175 = *((_QWORD *)&v307 + 1) - v307;
                  if (v175)
                  {
                    memcpy((void *)(v308 + v307), v172, v175);
                    v173 = *((_QWORD *)&v307 + 1);
                    v174 = v307 + v175;
                    *(_QWORD *)&v307 = v307 + v175;
                    v172 = (_OWORD *)((char *)v172 + v175);
                  }
                  if (v174 == v173)
                    break;
                  v129 -= v175;
                  if (!v129)
                    goto LABEL_278;
                }
                PayloadPulsesWrite((int *)&v305);
                if (HIDWORD(v308))
                  break;
                v129 -= v175;
              }
              while (v129);
            }
LABEL_278:
            v153 = v323;
            v150 = *(char **)&__src[24];
            v151 = v322;
            a2 = v276;
LABEL_350:
            if ((unint64_t)&v150[v153 - v151] >= v320)
              v132 = 0;
            else
              v132 = PayloadScannerReadVInt32_v2((uint64_t)__src) + v108;
            v11 = v285;
            v103 = v282;
            if (v132 >= v285)
              goto LABEL_461;
            v125 = &v292[v288] - (_BYTE *)v291 >= v289 ? 0 : PayloadScannerReadVInt32_v2((uint64_t)v287) + v108;
            if (v125 >= v285)
              goto LABEL_461;
LABEL_358:
            v199 = HIDWORD(v308);
            if (!(_DWORD)v132)
              goto LABEL_363;
            if (!v125)
              goto LABEL_363;
            v108 = v132;
            if (HIDWORD(v308))
              goto LABEL_363;
            continue;
          }
          if (!v103)
          {
            if ((PayloadScannerReadVInt64_v2((uint64_t)__src) & 1) != 0)
              PayloadScannerReadVInt64_v2((uint64_t)__src);
            v143 = v323 - (_BYTE *)v322 + *(_QWORD *)&__src[24];
            PayloadScannerSkipPositionsData((uint64_t)__src);
            v144 = v323 - (_BYTE *)v322 + *(_QWORD *)&__src[24];
            v316[0] = 0;
            v145 = v316;
            do
            {
              v147 = *((_QWORD *)&v307 + 1);
              v148 = v307;
              if (*((_QWORD *)&v307 + 1) != (_QWORD)v307)
              {
                v149 = *v145++;
                *(_BYTE *)(v308 + v307) = v149;
                *(_QWORD *)&v307 = v307 + 1;
                if ((_QWORD)v307 != *((_QWORD *)&v307 + 1))
                  break;
              }
              PayloadPulsesWrite((int *)&v305);
            }
            while (!HIDWORD(v308) && v147 == v148);
            PayloadPulsesWriteBytesFromScanner((uint64_t)&v305, (uint64_t)__src, v143, v144 + ~v143);
            v150 = *(char **)&__src[24];
            v151 = v322;
            v152 = v144 - *(_QWORD *)&__src[24];
            if (v144 >= *(_QWORD *)&__src[24] && (unint64_t)&v324[*(_QWORD *)&__src[24] - (_QWORD)v322] >= v144)
            {
              v153 = (char *)v322 + v152;
              v323 = (char *)v322 + v152;
            }
            else
            {
              v324 = (char *)v322;
              v153 = (char *)v322;
              v150 = (char *)v144;
              v323 = (char *)v322;
              *(_QWORD *)&__src[24] = v144;
            }
            if (&v150[v153 - (_BYTE *)v322] != (char *)v144)
              goto LABEL_461;
            if ((PayloadScannerReadVInt64_v2((uint64_t)v287) & 1) != 0)
              PayloadScannerReadVInt64_v2((uint64_t)v287);
            v180 = v292 - (_BYTE *)v291 + v288;
            PayloadScannerSkipPositionsData((uint64_t)v287);
            PayloadPulsesWriteBytesFromScanner((uint64_t)&v305, (uint64_t)v287, v180, &v292[v288] - (_BYTE *)v291 - v180);
            goto LABEL_350;
          }
          VInt64 = PayloadScannerReadVInt64((uint64_t)__src);
          v134 = v323;
          v135 = *(_QWORD *)&__src[24];
          v136 = v322;
          v137 = PayloadScannerReadVInt64((uint64_t)v287);
          v138 = v137;
          memset(v316, 0, sizeof(v316));
          v139 = VInt64 - 1;
          v140 = v137 + VInt64 - 1;
          bv = (CFMutableBitVectorRef)VInt64;
          if (HIDWORD(v140))
          {
            if ((v140 & 0x8000000000000000) != 0)
            {
              v178 = (uint64x2_t)vdupq_n_s64(v140);
              v179.i32[0] = v137 + VInt64 - 1;
              v179.i32[1] = v140 >> 7;
              *(int8x8_t *)v316 = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v179, (int64x2_t)vshlq_u64(v178, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v178, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v178, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
              v316[8] = HIBYTE(v140) | 0x80;
              LOBYTE(v140) = 1;
              v141 = 9;
            }
            else if ((v140 & 0x7F00000000000000) != 0)
            {
              v176 = (uint64x2_t)vdupq_n_s64(v140);
              v177.i32[0] = v137 + VInt64 - 1;
              v177.i32[1] = v140 >> 7;
              *(int8x8_t *)v316 = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v177, (int64x2_t)vshlq_u64(v176, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v176, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v176, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
              v140 = (v140 & 0x7F00000000000000) >> 56;
              v141 = 8;
            }
            else if ((v140 & 0xFE000000000000) != 0)
            {
              v316[0] = v140 | 0x80;
              v181 = (uint64x2_t)vdupq_n_s64(v140);
              v182 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v181, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v181, (uint64x2_t)xmmword_1B8631B90));
              v182.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v182) | 0x80008000800080;
              *(_DWORD *)&v316[1] = vmovn_s16(v182).u32[0];
              v316[5] = (v140 >> 35) | 0x80;
              v316[6] = (v140 >> 42) | 0x80;
              v140 = (v140 & 0xFE000000000000) >> 49;
              v141 = 7;
            }
            else
            {
              v316[0] = v140 | 0x80;
              v183 = (uint64x2_t)vdupq_n_s64(v140);
              v184 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v183, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v183, (uint64x2_t)xmmword_1B8631B90));
              v184.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v184) | 0x80008000800080;
              *(_DWORD *)&v316[1] = vmovn_s16(v184).u32[0];
              if ((v140 & 0x1FC0000000000) != 0)
              {
                v316[5] = (v140 >> 35) | 0x80;
                v140 = (v140 & 0x1FC0000000000) >> 42;
                v141 = 6;
              }
              else
              {
                v140 = (v140 >> 35) & 0x7F;
                v141 = 5;
              }
            }
          }
          else if ((v140 & 0x7F0000000) != 0)
          {
            v316[0] = v140 | 0x80;
            v316[1] = (v140 >> 7) | 0x80;
            v316[2] = (v140 >> 14) | 0x80;
            v316[3] = (v140 >> 21) | 0x80;
            v140 = (v140 & 0x7F0000000) >> 28;
            v141 = 4;
          }
          else if ((v140 & 0xFE00000) != 0)
          {
            v316[0] = v140 | 0x80;
            v316[1] = (v140 >> 7) | 0x80;
            v316[2] = (v140 >> 14) | 0x80;
            v140 = (v140 & 0xFE00000) >> 21;
            v141 = 3;
          }
          else if ((v140 & 0x1FC000) != 0)
          {
            v316[0] = v140 | 0x80;
            v316[1] = (v140 >> 7) | 0x80;
            v140 = (v140 & 0x1FC000) >> 14;
            v141 = 2;
          }
          else
          {
            v141 = v140 & 0x3F80;
            if ((v140 & 0x3F80) != 0)
            {
              v316[0] = v140 | 0x80;
              v140 = v141 >> 7;
              v141 = 1;
            }
          }
          v185 = v134 - v136 + v135;
          v186 = v292 - (_BYTE *)v291 + v288;
          v187 = v316;
          *(_BYTE *)((unint64_t)v316 | v141) = v140;
          v188 = v141 + 1;
          do
          {
            while (1)
            {
              v189 = *((_QWORD *)&v307 + 1);
              v190 = v307;
              if (*((_QWORD *)&v307 + 1) - (_QWORD)v307 >= v188)
                v191 = v188;
              else
                v191 = *((_QWORD *)&v307 + 1) - v307;
              if (v191)
              {
                memcpy((void *)(v308 + v307), v187, v191);
                v189 = *((_QWORD *)&v307 + 1);
                v190 = v307 + v191;
                *(_QWORD *)&v307 = v307 + v191;
                v187 += v191;
              }
              if (v190 == v189)
                break;
              v188 -= v191;
              if (!v188)
                goto LABEL_338;
            }
            PayloadPulsesWrite((int *)&v305);
            if (HIDWORD(v308))
              break;
            v188 -= v191;
          }
          while (v188);
LABEL_338:
          PayloadPulsesWriteBytesFromScanner((uint64_t)&v305, (uint64_t)__src, v185, v139);
          v192 = (char *)bv + v185;
          v150 = *(char **)&__src[24];
          v151 = v322;
          v193 = (char *)bv + v185 - *(_QWORD *)&__src[24];
          if ((unint64_t)bv + v185 < *(_QWORD *)&__src[24])
          {
            a5 = v284;
            goto LABEL_341;
          }
          a5 = v284;
          if (&v324[*(_QWORD *)&__src[24] - (_QWORD)v322] >= v192)
          {
            v153 = &v193[(_QWORD)v322];
            v323 = &v193[(_QWORD)v322];
          }
          else
          {
LABEL_341:
            v324 = (char *)v322;
            v153 = (char *)v322;
            v150 = v192;
            v323 = (char *)v322;
            *(_QWORD *)&__src[24] = v192;
          }
          if (&v150[v153 - (_BYTE *)v322] != v192)
            goto LABEL_461;
          PayloadPulsesWriteBytesFromScanner((uint64_t)&v305, (uint64_t)v287, v186, v138);
          v194 = v186 + v138;
          v195 = v288;
          v196 = (char *)v291;
          v197 = v186 + v138 - v288;
          if (v186 + v138 < v288)
          {
            a2 = v276;
            goto LABEL_347;
          }
          a2 = v276;
          if ((unint64_t)v293 + v288 - (_QWORD)v291 >= v194)
          {
            v198 = v291;
            v196 = (char *)v291 + v197;
            v292 = (char *)v291 + v197;
          }
          else
          {
LABEL_347:
            v293 = v291;
            v198 = v291;
            v195 = v194;
            v292 = (char *)v291;
            v288 = v194;
          }
          if (v196 - v198 + v195 != v194)
            goto LABEL_461;
          goto LABEL_350;
        }
        break;
      }
      v199 = HIDWORD(v308);
      LODWORD(v132) = v108;
LABEL_363:
      LODWORD(v108) = v132;
      v88 = v266;
      if (!(*a9 | v199))
      {
LABEL_364:
        if ((_DWORD)v108)
        {
          PayloadPulsesWriteTermId((int *)&v305, v108);
          PayloadPulsesWriteBytesFromScanner((uint64_t)&v305, (uint64_t)__src, v323 - (_BYTE *)v322 + *(_QWORD *)&__src[24], v320 - (v323 - (_BYTE *)v322 + *(_QWORD *)&__src[24]));
        }
        if (v125)
        {
          PayloadPulsesWriteTermId((int *)&v305, v125);
          PayloadPulsesWriteBytesFromScanner((uint64_t)&v305, (uint64_t)v287, v292 - (_BYTE *)v291 + v288, v289 - (v292 - (_BYTE *)v291 + v288));
        }
        v109 = v88 + 2;
        v118 = *__error();
        v200 = _SILogForLogForCategory(10);
        v201 = 2 * (dword_1EF19FCB4 < 4);
        if (os_log_type_enabled(v200, v201))
        {
          *(_DWORD *)v316 = 134218752;
          *(_QWORD *)&v316[4] = v275;
          *(_WORD *)&v316[12] = 2048;
          *(_QWORD *)&v316[14] = v274;
          *(_WORD *)&v316[22] = 2048;
          *(_QWORD *)&v316[24] = v270;
          v317 = 2048;
          v318 = v269;
          v121 = v200;
          v122 = v201;
          v123 = "Merge (offset: %llx, length: %llx) (offset: %llx, length: %llx)";
          v124 = 42;
LABEL_370:
          _os_log_impl(&dword_1B8270000, v121, v122, v123, v316, v124);
        }
        goto LABEL_371;
      }
LABEL_373:
      v92 = 0;
LABEL_374:
      free(v264);
      if (v291)
        free(v291);
      if (v322)
        free(v322);
      v207 = HIDWORD(v304[1]);
      if (HIDWORD(v304[1]))
        v208 = v92 == 0;
      else
        v208 = 0;
      if (!v208)
        v207 = v92;
      if (v207)
        v209 = 1;
      else
        v209 = HIDWORD(v308) == 0;
      if (v209)
        v50 = v207;
      else
        v50 = HIDWORD(v308);
      v210 = *__error();
      v211 = _SILogForLogForCategory(10);
      v212 = 2 * (dword_1EF19FCB4 < 4);
      v213 = os_log_type_enabled(v211, v212);
      if (v50)
      {
        if (v213)
        {
          v241 = (int)ptr[0];
          v242 = (int)v306[0];
          v243 = CFAbsoluteTimeGetCurrent();
          *(_DWORD *)__src = 67110144;
          *(float *)&v243 = v243 - v82;
          *(_DWORD *)&__src[4] = v265;
          *(_WORD *)&__src[8] = 1024;
          *(_DWORD *)&__src[10] = v241;
          *(_WORD *)&__src[14] = 1024;
          *(_DWORD *)&__src[16] = v242;
          v11 = v285;
          *(_WORD *)&__src[20] = 2048;
          *(double *)&__src[22] = *(float *)&v243;
          *(_WORD *)&__src[30] = 1024;
          LODWORD(v320) = v50;
          _os_log_impl(&dword_1B8270000, v211, v212, "Compact iteration:%d, src cnt:%d, new cnt:%d, time (%f) ERROR: %d", __src, 0x24u);
        }
        v51 = 0;
        *__error() = v210;
        goto LABEL_101;
      }
      if (v213)
      {
        v214 = (int)ptr[0];
        v215 = (int)v306[0];
        v216 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)__src = 67109888;
        *(float *)&v216 = v216 - v82;
        *(_DWORD *)&__src[4] = v265;
        *(_WORD *)&__src[8] = 1024;
        *(_DWORD *)&__src[10] = v214;
        *(_WORD *)&__src[14] = 1024;
        *(_DWORD *)&__src[16] = v215;
        *(_WORD *)&__src[20] = 2048;
        *(double *)&__src[22] = *(float *)&v216;
        _os_log_impl(&dword_1B8270000, v211, v212, "Compact iteration:%d, src cnt:%d, new cnt:%d, time (%f)", __src, 0x1Eu);
      }
      *__error() = v210;
      if (!*a9 && LODWORD(ptr[0]) <= LODWORD(v306[0]))
        goto LABEL_461;
      PayloadPulsesWrite((int *)&v305);
      v50 = HIDWORD(v308);
      free(ptr[1]);
      ptr[1] = 0;
      free(v304[0]);
      v301 = v305;
      *(_OWORD *)ptr = *(_OWORD *)v306;
      v303 = v307;
      *(_OWORD *)v304 = v308;
      v305 = 0u;
      *(_OWORD *)v306 = 0u;
      v307 = 0u;
      v308 = 0u;
      if (v50)
        goto LABEL_100;
      if (v263 == *(_QWORD *)buf)
        v76 = *(_QWORD *)&buf[8];
      else
        v76 = *(_QWORD *)buf;
      v81 = (int)ptr[0];
      if (!*a9)
      {
        ++v265;
        if (LODWORD(ptr[0]) >= 2)
          continue;
      }
      break;
    }
LABEL_400:
    if (*a9)
      goto LABEL_401;
    if (v81 != 1)
    {
      v257 = __si_assert_copy_extra_1644(0);
      v247 = v257;
      v258 = "";
      if (v257)
        v258 = v257;
      __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 1753, "PayloadPulsesCount(&ctx.src) == 1", v258);
      goto LABEL_481;
    }
    v217 = v301;
    if (*(_QWORD *)buf && *(_QWORD *)buf != (_QWORD)v301)
    {
      _fd_unlink_with_origin(*(uint64_t *)buf, 0);
      fd_release(*(char **)buf);
      *(_QWORD *)buf = 0;
      v217 = v301;
    }
    if (*(_QWORD *)&buf[8] && *(_QWORD *)&buf[8] != v217)
    {
      _fd_unlink_with_origin(*(uint64_t *)&buf[8], 0);
      fd_release(*(char **)&buf[8]);
      *(_QWORD *)&buf[8] = 0;
    }
    v283 = *((_DWORD *)ptr[1] + 6);
    *(_QWORD *)&v305 = 0;
    HIDWORD(v308) = 0;
    v306[0] = (void *)0x4000000000;
    v306[1] = malloc_type_malloc(0x800uLL, 0x1000040F6D918ACuLL);
    v307 = xmmword_1B8632010;
    *(_QWORD *)&v308 = malloc_type_malloc(0x10000uLL, 0x3BBBB36BuLL);
    v218 = *a1;
    *(_QWORD *)&v305 = a1[560];
    *((_QWORD *)&v305 + 1) = v218;
    v219 = (int)v306[0];
    v220 = a2;
    if (LODWORD(v306[0]) == HIDWORD(v306[0]))
    {
      HIDWORD(v306[0]) = 2 * LODWORD(v306[0]);
      v221 = (char *)malloc_type_realloc(v306[1], 32 * (2 * LODWORD(v306[0])), 0x1000040F6D918ACuLL);
      v306[1] = v221;
      v219 = (int)v306[0];
    }
    else
    {
      v221 = (char *)v306[1];
    }
    LODWORD(v306[0]) = v219 + 1;
    v222 = &v221[32 * v219];
    *(_QWORD *)v222 = v218;
    *((_QWORD *)v222 + 1) = 0;
    *((_QWORD *)v222 + 2) = 0;
    *((_QWORD *)v222 + 3) = 0;
    v309 = 0uLL;
    v310 = (unint64_t)v301;
    *(_QWORD *)&v311 = *((_QWORD *)&v301 + 1);
    *((_QWORD *)&v311 + 1) = 0x100000;
    v223 = malloc_type_malloc(0x100000uLL, 0x2DD310F6uLL);
    *(_QWORD *)&v312 = v223;
    *((_QWORD *)&v312 + 1) = v223;
    *(_QWORD *)&v313 = v223;
    DWORD2(v313) = 0;
    v224 = *(_QWORD *)ptr[1];
    v225 = *((_QWORD *)ptr[1] + 1) + *(_QWORD *)ptr[1];
    *(_QWORD *)&v311 = v225;
    if (*((_QWORD *)&v310 + 1) != v224)
      *((_QWORD *)&v310 + 1) = v224;
    *((_QWORD *)&v312 + 1) = v223;
    if (v224 >= v225)
      VInt32_v2 = 0;
    else
      VInt32_v2 = PayloadScannerReadVInt32_v2((uint64_t)&v309);
    if (VInt32_v2 >= v285)
    {
LABEL_468:
      v246 = __si_assert_copy_extra_1644(0);
      v247 = v246;
      v248 = "";
      if (v246)
        v248 = v246;
      __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 1300, "termId < maxTermId", v248);
      goto LABEL_481;
    }
    if ((_DWORD)v220 == 2 || VInt32_v2 <= 1)
    {
      while (VInt32_v2 && !*a9)
      {
        v229 = *((_QWORD *)&v312 + 1) - v312 + *((_QWORD *)&v310 + 1);
        if (v229 <= v224 || v229 >= v225)
        {
          v255 = __si_assert_copy_extra_1644(0);
          v247 = v255;
          v256 = "";
          if (v255)
            v256 = v255;
          __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 1804, "PayloadScannerPosition(&ctx.scanner) > p.offset && PayloadScannerPosition(&ctx.scanner) < p.offset+p.length", v256);
          goto LABEL_481;
        }
        v231 = v307 + *((_QWORD *)&v305 + 1);
        if (((_QWORD)v307 + *((_QWORD *)&v305 + 1)) >> 62)
        {
          v244 = __si_assert_copy_extra_1644(0);
          __message_assert("%s:%u: failed assertion '%s' %s write invalid offset %llu");
LABEL_462:
          free(v244);
          if (__valid_fs(-1))
            v245 = 2989;
          else
            v245 = 3072;
          *(_DWORD *)v245 = -559038737;
          abort();
        }
        v232 = 8 * (unint64_t)VInt32_v2 / *MEMORY[0x1E0C85AD8];
        v233 = a1;
        v234 = a1[558];
        if (v234 <= v232)
        {
          if (v234)
            v235 = a1[558];
          else
            v235 = 32;
          while (1)
          {
            v235 *= 2;
            if (v235 > v232)
              break;
            if (v235 <= v234)
            {
              v259 = __si_assert_copy_extra_1644(0);
              v247 = v259;
              v260 = "";
              if (v259)
                v260 = v259;
              __message_assert("%s:%u: failed assertion '%s' %s ", "bit_vector.h", 111, "newCapacity > bv->capacity", v260);
              goto LABEL_481;
            }
          }
          v236 = (const __CFBitVector *)a1[559];
          if (v236)
            MutableCopy = CFBitVectorCreateMutableCopy(allocator, v235, v236);
          else
            MutableCopy = CFBitVectorCreateMutable(allocator, v235);
          bvb = MutableCopy;
          if (!MutableCopy)
          {
            v261 = __si_assert_copy_extra_1644(0);
            v247 = v261;
            v262 = "";
            if (v261)
              v262 = v261;
            __message_assert("%s:%u: failed assertion '%s' %s ", "bit_vector.h", 115, "newBV", v262);
            goto LABEL_481;
          }
          CFBitVectorSetCount(MutableCopy, v235);
          v238 = (const void *)a1[559];
          if (v238)
            CFRelease(v238);
          v233 = a1;
          a1[559] = bvb;
          a1[558] = v235;
        }
        if (v233[557] <= v232)
          v233[557] = v232 + 1;
        CFBitVectorSetBitAtIndex((CFMutableBitVectorRef)v233[559], v232, 1u);
        *(_QWORD *)storageResolvePtr((uint64_t)(a1 + 5), 8 * VInt32_v2, 8uLL, 1) = v231;
        PayloadPulsesAppend(&v309, (uint64_t)&v305, v220, 1, v283 != 0);
        if (HIDWORD(v308))
          break;
        if (*((_QWORD *)&v310 + 1) + *((_QWORD *)&v312 + 1) - (_QWORD)v312 < (unint64_t)v311)
          VInt32_v2 += PayloadScannerReadVInt32_v2((uint64_t)&v309);
        else
          VInt32_v2 = 0;
        if (VInt32_v2 >= v285)
          goto LABEL_461;
      }
      PayloadPulsesWrite((int *)&v305);
      a1[1] = *a1;
      v239 = *((_QWORD *)&v305 + 1);
      a1[3] = *((_QWORD *)&v305 + 1);
      a1[4] = v239;
      if (HIDWORD(v308))
        v240 = DWORD2(v313) == 0;
      else
        v240 = 0;
      if (v240)
        v50 = HIDWORD(v308);
      else
        v50 = DWORD2(v313);
    }
    else
    {
      v227 = *__error();
      v228 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v228, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__src = 136315650;
        *(_QWORD *)&__src[4] = "CICompactPayloads";
        *(_WORD *)&__src[12] = 1024;
        *(_DWORD *)&__src[14] = 1797;
        *(_WORD *)&__src[18] = 1024;
        *(_DWORD *)&__src[20] = VInt32_v2;
        _os_log_error_impl(&dword_1B8270000, v228, OS_LOG_TYPE_ERROR, "%s:%d: expected term id 1%d", __src, 0x18u);
      }
      *__error() = v227;
      v50 = -1;
    }
    v51 = 1;
    a5 = v284;
    a2 = v220;
    v11 = v285;
LABEL_101:
    CICleanUpReset(v281, v280);
    v52 = *__error();
    v53 = _SILogForLogForCategory(10);
    v54 = 2 * (dword_1EF19FCB4 < 4);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = CFAbsoluteTimeGetCurrent() - Current;
      *(_DWORD *)__src = 134217984;
      *(double *)&__src[4] = v55;
      _os_log_impl(&dword_1B8270000, v53, v54, "Compacted payloads (%f)", __src, 0xCu);
    }
    *__error() = v52;
    if (v50)
      v56 = 1;
    else
      v56 = *a9 == 0;
    if (v56)
      result = v50;
    else
      result = 89;
    if (a7 == -1)
      v58 = 1;
    else
      v58 = v51;
    if ((_DWORD)result == 28 && (v58 & 1) == 0)
    {
      v59 = *__error();
      v60 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__src = 136315650;
        *(_QWORD *)&__src[4] = "CICompactPayloads";
        *(_WORD *)&__src[12] = 1024;
        *(_DWORD *)&__src[14] = 1852;
        *(_WORD *)&__src[18] = 1024;
        *(_DWORD *)&__src[20] = 28;
        _os_log_error_impl(&dword_1B8270000, v60, OS_LOG_TYPE_ERROR, "%s:%d: Error %d compacting, retrying", __src, 0x18u);
      }
      *__error() = v59;
      a7 = -1;
      continue;
    }
    return result;
  }
}

void CICompactPayloadsCtxFree(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  void *v4;

  v2 = *(char **)a1;
  if (v2)
  {
    _fd_unlink_with_origin((uint64_t)v2, 0);
    fd_release(*(char **)a1);
    *(_QWORD *)a1 = 0;
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    _fd_unlink_with_origin(v3, 0);
    fd_release(*(char **)(a1 + 8));
    *(_QWORD *)(a1 + 8) = 0;
  }
  v4 = *(void **)(a1 + 192);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a1 + 192) = 0;
  }
  free(*(void **)(a1 + 40));
  *(_QWORD *)(a1 + 40) = 0;
  free(*(void **)(a1 + 64));
  *(_QWORD *)(a1 + 64) = 0;
  free(*(void **)(a1 + 104));
  *(_QWORD *)(a1 + 104) = 0;
  free(*(void **)(a1 + 128));
  *(_QWORD *)(a1 + 128) = 0;
}

uint64_t _PayloadScannerReadNextChar(uint64_t a1, _BYTE *a2)
{
  _BYTE *v3;
  unint64_t v4;
  unint64_t v5;
  size_t v7;
  size_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  ssize_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  NSObject *v18;
  uint64_t result;
  int v20;
  NSObject *v21;
  int *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 72))
    return 0;
  v3 = *(_BYTE **)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (unint64_t)&v3[*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 48)];
  if (v5 >= v4)
    return 0;
  if ((unint64_t)v3 < *(_QWORD *)(a1 + 64))
  {
LABEL_29:
    *(_QWORD *)(a1 + 56) = v3 + 1;
    *a2 = *v3;
    return 1;
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 || *(_QWORD *)(a1 + 8))
  {
    if (v8 <= v5 && (v9 = *(_QWORD *)(a1 + 8), v5 <= v9))
    {
      *(_QWORD *)(a1 + 24) = v9;
      v5 = v9;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else if (v7 + v5 > v8 && v8 > v5)
    {
      v7 = v8 - v5;
    }
  }
  v26 = 0;
  v11 = _fd_acquire_fd(*(_QWORD *)(a1 + 16), &v26);
  if ((_DWORD)v11 != -1)
  {
    v12 = v11;
    if (v4 - v5 < v7)
      v7 = v4 - v5;
    v13 = *(void **)(a1 + 48);
    while (1)
    {
      v14 = pread(v12, v13, v7, v5);
      if (v14 != -1)
        break;
      v15 = g_prot_error_callback;
      if (!g_prot_error_callback)
        break;
      v16 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v15 + 16))(v15, v12, *v16, 4) & 1) == 0)
      {
        v14 = -1;
        break;
      }
    }
    if (v7 != -1 && v14 == -1)
    {
      *(_QWORD *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 72) = *__error();
      v17 = *__error();
      v18 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        v25 = *(_DWORD *)(a1 + 72);
        *(_DWORD *)buf = 136315650;
        v28 = "_PayloadScannerReadNextChar";
        v29 = 1024;
        v30 = 198;
        v31 = 1024;
        v32 = v25;
        _os_log_error_impl(&dword_1B8270000, v18, OS_LOG_TYPE_ERROR, "%s:%d: pread err: %d", buf, 0x18u);
      }
      v14 = 0;
      *__error() = v17;
    }
    _fd_release_fd(*(_DWORD **)(a1 + 16), v12, 0, v26);
    *(_QWORD *)(a1 + 24) = v5;
    v3 = *(_BYTE **)(a1 + 48);
    *(_QWORD *)(a1 + 56) = v3;
    *(_QWORD *)(a1 + 64) = &v3[v14];
    if (v14)
      goto LABEL_29;
    return 0;
  }
  *(_DWORD *)(a1 + 72) = *__error();
  v20 = *__error();
  v21 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    v24 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)buf = 136315650;
    v28 = "_PayloadScannerReadNextChar";
    v29 = 1024;
    v30 = 191;
    v31 = 1024;
    v32 = v24;
    _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: open err: %d", buf, 0x18u);
  }
  v22 = __error();
  result = 0;
  *v22 = v20;
  *(_QWORD *)(a1 + 24) = v5;
  v23 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 56) = v23;
  *(_QWORD *)(a1 + 64) = v23;
  return result;
}

uint64_t postingsOffsetCompare(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  BOOL v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v12;
  int v13;
  unsigned int v14;

  v3 = *a1;
  v4 = *a2;
  v5 = 0;
  v6 = *a2 > *a1 && v4 >= 2;
  if (v6)
  {
    v7 = *a2;
    do
    {
      ++v5;
      v6 = v7 >= 3;
      v8 = v7 == 3;
      v7 >>= 1;
    }
    while (!v8 && v6);
  }
  v9 = *a3;
  v6 = *a3 >= v3;
  v8 = *a3 == v3;
  v10 = 0;
  if (!v8 && v6 && v9 >= 2)
  {
    v12 = *a3;
    do
    {
      ++v10;
      v6 = v12 >= 3;
      v8 = v12 == 3;
      v12 >>= 1;
    }
    while (!v8 && v6);
  }
  v13 = v4 > v9;
  if (v5 > v10)
    v13 = -1;
  if (v4 >= v9)
    v14 = v13;
  else
    v14 = -1;
  if (v5 >= v10)
    return v14;
  else
    return 1;
}

int *PayloadPulsesWrite(int *result)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  BOOL v11;
  int v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!result[15])
  {
    v1 = result;
    if (*((_QWORD *)result + 4))
    {
      v18 = 0;
      v2 = _fd_acquire_fd(*(_QWORD *)result, &v18);
      if ((_DWORD)v2 == -1)
      {
        v1[15] = *__error();
        v12 = *__error();
        v13 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v16 = v1[15];
          *(_DWORD *)buf = 136315650;
          v20 = "PayloadPulsesWrite";
          v21 = 1024;
          v22 = 448;
          v23 = 1024;
          v24 = v16;
          _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: open err:%d", buf, 0x18u);
        }
        result = __error();
        v4 = 0;
        *result = v12;
      }
      else
      {
        v3 = v2;
        v4 = 0;
        v5 = *((_QWORD *)v1 + 6);
        v6 = *((_QWORD *)v1 + 4);
        v7 = *((_QWORD *)v1 + 1);
        do
        {
          while (1)
          {
            v8 = guarded_pwrite_np();
            if ((v8 & 0x8000000000000000) != 0)
              break;
            v4 += v8;
            v11 = v6 > v8;
            v6 -= v8;
            if (!v11)
              goto LABEL_13;
            v5 += v8;
            v7 += v8;
          }
          v9 = g_prot_error_callback;
          if (!g_prot_error_callback)
            break;
          v10 = __error();
        }
        while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v9 + 16))(v9, v3, *v10, 5) & 1) != 0);
        v4 = -1;
LABEL_13:
        result = _fd_release_fd(*(_DWORD **)v1, v3, 0, v18);
        if (v4 != *((_QWORD *)v1 + 4))
        {
          if (v4 == -1)
          {
            v1[15] = *__error();
            v14 = *__error();
            v15 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
            {
              v17 = v1[15];
              *(_DWORD *)buf = 136315650;
              v20 = "PayloadPulsesWrite";
              v21 = 1024;
              v22 = 455;
              v23 = 1024;
              v24 = v17;
              _os_log_error_impl(&dword_1B8270000, v15, OS_LOG_TYPE_ERROR, "%s:%d: pwrite err:%d", buf, 0x18u);
            }
            result = __error();
            *result = v14;
            v4 = -1;
          }
          else
          {
            v1[15] = -1;
          }
        }
      }
      *((_QWORD *)v1 + 1) += v4;
      *((_QWORD *)v1 + 4) = 0;
    }
  }
  return result;
}

uint64_t PayloadPulsesReorder(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  pthread_rwlock_t *v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD);
  int v26;
  NSObject *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  _DWORD *v31;
  _DWORD *v32;
  unsigned int v33;
  int v34;
  void *v36;
  void *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int *v40;
  _DWORD *v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;
  _QWORD *v45;
  int v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  unint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  char *v59;
  int v60;
  char *v61;
  unsigned int v62;
  unsigned int *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  unsigned int VInt32;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  NSObject *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  char *v92;
  unsigned int v93;
  int v94;
  int v95;
  int v96;
  char *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  int v101;
  int v102;
  unint64_t v103;
  int v104;
  char *v105;
  void *v106;
  char *v107;
  uint64_t v108;
  _DWORD *v109;
  unsigned int *v110;
  pid_t v111;
  unsigned int v112;
  unsigned int v113;
  char *v114;
  int v115;
  uint64_t v116;
  unsigned int *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  NSObject *v127;
  uint64_t v128;
  void *v129;
  int v130;
  NSObject *v131;
  unsigned int v132;
  NSObject *v133;
  const char *v134;
  NSObject *v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int *v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  __int128 v144;
  unint64_t v145;
  unint64_t VInt64_v2;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  BOOL v161;
  uint64_t v162;
  char *v163;
  unint64_t VInt64_1804;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  uint64_t v168;
  unsigned int v169;
  int v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  int v175;
  __int128 v176;
  uint64_t v177;
  unsigned int v178;
  int v179;
  int v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  unsigned int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  int v190;
  unint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  char *v198;
  char *v199;
  char *v200;
  unsigned int v201;
  unint64_t v202;
  unsigned int v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  unint64_t v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unsigned int VInt32_v2;
  unsigned int v223;
  _BYTE *v224;
  char *v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  _BYTE *v238;
  __int128 v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  uint64_t v244;
  int v245;
  char *v246;
  unsigned int v247;
  unsigned int v248;
  unint64_t v249;
  unint64_t v250;
  unint64_t v251;
  uint64x2_t v252;
  int32x2_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64x2_t v260;
  int32x2_t v261;
  uint64x2_t v262;
  int32x2_t v263;
  uint64x2_t v264;
  int32x2_t v265;
  uint64x2_t v266;
  int32x2_t v267;
  uint64x2_t v268;
  int32x2_t v269;
  uint64x2_t v270;
  int16x8_t v271;
  uint64x2_t v272;
  int32x2_t v273;
  uint64x2_t v274;
  int32x2_t v275;
  uint64x2_t v276;
  int16x8_t v277;
  uint64x2_t v278;
  int16x8_t v279;
  uint64x2_t v280;
  int16x8_t v281;
  unint64_t v282;
  uint64x2_t v283;
  int16x8_t v284;
  _OWORD *v285;
  size_t v286;
  uint64_t v287;
  uint64_t v288;
  size_t v289;
  uint64_t v290;
  size_t v291;
  uint64_t v292;
  char *v293;
  char *v294;
  size_t v295;
  uint64_t v296;
  uint64_t v297;
  size_t v298;
  uint64_t v299;
  size_t v300;
  uint64x2_t v301;
  int16x8_t v302;
  uint64x2_t v303;
  int16x8_t v304;
  uint64x2_t v305;
  int16x8_t v306;
  _OWORD *v307;
  size_t v308;
  uint64_t v309;
  uint64_t v310;
  size_t v311;
  uint64_t v312;
  size_t v313;
  char *v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  size_t v318;
  uint64_t v319;
  size_t v320;
  _OWORD *v321;
  size_t v322;
  uint64_t v323;
  uint64_t v324;
  size_t v325;
  uint64_t v326;
  size_t v327;
  char *v328;
  size_t v329;
  uint64_t v330;
  uint64_t v331;
  size_t v332;
  uint64_t v333;
  size_t v334;
  _OWORD *v335;
  size_t v336;
  uint64_t v337;
  uint64_t v338;
  size_t v339;
  uint64_t v340;
  size_t v341;
  size_t v342;
  uint64_t v343;
  void *v344;
  int v345;
  BOOL v346;
  int v347;
  unsigned int v348;
  NSObject *v349;
  const char *v350;
  int *v351;
  uint32_t v352;
  NSObject *v353;
  unsigned int v354;
  unsigned int v355;
  uint64_t v356;
  unsigned int v357;
  uint64_t v358;
  void (*v359)(_QWORD);
  unsigned int v360;
  BOOL v361;
  unsigned int v362;
  BOOL v363;
  char *v364;
  char *v365;
  const char *v366;
  char *v367;
  char *v368;
  const char *v369;
  char *v370;
  const char *v371;
  char *v372;
  const char *v373;
  char *v374;
  const char *v375;
  char *v376;
  const char *v377;
  char *v378;
  const char *v379;
  char *v380;
  const char *v381;
  char *v382;
  const char *v383;
  char *v384;
  const char *v385;
  char *v386;
  const char *v387;
  uint64_t v388;
  char *v389;
  const char *v390;
  char *v391;
  const char *v392;
  char *v393;
  const char *v394;
  char *v395;
  const char *v396;
  char *v397;
  const char *v398;
  char *v399;
  const char *v400;
  char *v401;
  const char *v402;
  char *v403;
  const char *v404;
  char *v405;
  const char *v406;
  char *v407;
  const char *v408;
  char *v409;
  const char *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  char *v416;
  unint64_t v417;
  unint64_t v418;
  int *v419;
  uint64_t v420;
  unsigned int v421;
  uint64_t v422;
  int v423;
  int v424;
  uint64_t v425;
  unsigned int v426;
  uint64_t v427;
  int v428;
  _DWORD *v429;
  int v430;
  _QWORD *v431;
  _QWORD v432[3];
  unint64_t v433;
  unint64_t v434;
  size_t v435;
  __int128 __src;
  __int128 v437;
  _QWORD *v438;
  unsigned int *v439;
  unint64_t v440;
  unsigned int v441;
  unsigned int v442;
  unint64_t v443;
  unsigned int v444;
  unsigned int v445;
  _BYTE v446[216];
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  __int16 v451;
  char v452;
  uint64_t v453;
  char v454;
  uint64_t v455;
  pthread_rwlock_t *v456;
  int v457;
  const char *v458;
  __int16 v459;
  int v460;
  __int16 v461;
  unsigned int v462;
  __int16 v463;
  int *v464;
  int v465;
  const char *v466;
  __int16 v467;
  int v468;
  __int16 v469;
  unsigned int v470;
  __int16 v471;
  int v472;
  __int16 v473;
  _OWORD *v474;
  _OWORD v475[2];
  uint64_t v476;
  uint64_t v477;

  v1 = (_QWORD *)MEMORY[0x1E0C80A78](a1);
  v429 = v6;
  v425 = v7;
  v424 = v8;
  v477 = *MEMORY[0x1E0C80C00];
  v426 = v3;
  if (v3 + 1 < 0x80000)
    v9 = v3 + 1;
  else
    v9 = 0x80000;
  v10 = *v1;
  if (!*v1)
    return 22;
  v11 = v2;
  v12 = v1;
  v427 = v4;
  v428 = v5;
  v13 = v9;
  bzero(v446, 0x1138uLL);
  v14 = (unsigned int *)(v10 + 32);
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v16 = v12[1];
  v451 = 1;
  v447 = v10;
  v448 = v16;
  v450 = 1;
  v453 = 0;
  v454 = 26;
  bzero(&v455, 0x1000uLL);
  v17 = (pthread_rwlock_t *)malloc_type_malloc(0xD0uLL, 0x1020040167D79A3uLL);
  v456 = v17;
  *(_OWORD *)&v17->__sig = 0u;
  *(_OWORD *)&v17->__opaque[8] = 0u;
  *(_OWORD *)&v17->__opaque[24] = 0u;
  *(_OWORD *)&v17->__opaque[40] = 0u;
  *(_OWORD *)&v17->__opaque[56] = 0u;
  *(_OWORD *)&v17->__opaque[72] = 0u;
  *(_OWORD *)&v17->__opaque[88] = 0u;
  *(_OWORD *)&v17->__opaque[104] = 0u;
  *(_OWORD *)&v17->__opaque[120] = 0u;
  *(_OWORD *)&v17->__opaque[136] = 0u;
  *(_OWORD *)&v17->__opaque[152] = 0u;
  *(_OWORD *)&v17->__opaque[168] = 0u;
  *(_QWORD *)&v17->__opaque[184] = 0;
  pthread_rwlock_init(v456, 0);
  v456[1].__sig = 0;
  v449 = v16;
  v452 = 0;
  do
  {
    v18 = __ldxr(exceptionSequenceNum);
    v19 = v18 + 1;
  }
  while (__stxr(v18 + 1, exceptionSequenceNum));
  v20 = setThreadIdAndInfo(-1, sStorageExceptionCallbacks, (uint64_t)v446, 0, v19);
  v444 = HIDWORD(v20);
  v445 = v20;
  v443 = __PAIR64__(v21, v22);
  v23 = *(_QWORD *)&threadData[18 * v20 + 2];
  v24 = v23 + 320 * HIDWORD(v20);
  v423 = *(_DWORD *)(v24 + 312);
  v25 = *(void (**)(_QWORD))(v24 + 224);
  if (v25)
    v25(*(_QWORD *)(v23 + 320 * HIDWORD(v20) + 288));
  v430 = v19;
  v442 = v445;
  v441 = v444;
  v440 = v443;
  if (!_setjmp((int *)v24))
  {
    if (__THREAD_SLOT_KEY)
    {
      v36 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (v36)
        goto LABEL_23;
    }
    else
    {
      makeThreadId();
      v36 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (v36)
      {
LABEL_23:
        v37 = v36;
        if ((unint64_t)v36 < 0x801)
          goto LABEL_24;
      }
    }
    makeThreadId();
    v37 = pthread_getspecific(__THREAD_SLOT_KEY);
LABEL_24:
    v38 = (uint64_t)v37 - 1;
    v421 = threadData[18 * ((uint64_t)v37 - 1) + 8];
    v439 = 0;
    v39 = (unsigned int *)malloc_type_malloc((12 * v9), 0x10000403E1C8BA9uLL);
    v422 = v38;
    if (!v39)
    {
      v46 = *__error();
      goto LABEL_529;
    }
    v40 = v39;
    v439 = v39;
    CICleanUpPush(v38, (uint64_t)PayloadReorderInfoFree, (uint64_t)&v439);
    v41 = malloc_type_malloc(0x18uLL, 0x102004024DAA5DEuLL);
    if (v41)
    {
      v42 = (uint64_t)v41;
      v41[2] = 256;
      v43 = malloc_type_malloc(0x1000uLL, 0x1000040451B5BE8uLL);
      *(_QWORD *)v42 = v43;
      if (v43)
      {
        *(_DWORD *)(v42 + 12) = 0;
        *(_QWORD *)(v42 + 16) = 0;
        CICleanUpPush(v38, (uint64_t)PositionRunInfoListFree, v42);
        v438 = 0;
        CICleanUpPush(v38, (uint64_t)PayloadReorderInfoDestroyScanner, (uint64_t)&v438);
        v44 = 0;
        v431 = v12;
        v419 = (int *)v11;
        v420 = v42;
        while (1)
        {
          if (*v429 || v44 >= *((unsigned int *)v12 + 4))
          {
            v46 = 0;
            goto LABEL_529;
          }
          v47 = v40;
          v48 = v13;
          v418 = v44;
          v49 = v12[3] + 32 * v44;
          v51 = *(_QWORD *)v49;
          v50 = *(_QWORD *)(v49 + 8);
          v52 = *(_QWORD *)v49;
          v53 = *(_DWORD *)(v49 + 16);
          __src = 0u;
          v437 = 0u;
          v54 = *v12;
          v432[0] = 0;
          v432[1] = 0;
          v432[2] = v54;
          v433 = 0;
          v434 = v50 + v51;
          v435 = v50;
          v55 = malloc_type_malloc(v50, 0x2DD310F6uLL);
          *(_QWORD *)&__src = v55;
          *(_QWORD *)&v437 = v55;
          DWORD2(v437) = 0;
          v438 = v432;
          v417 = v51;
          if (v433 != v51)
            v433 = v51;
          *((_QWORD *)&__src + 1) = v55;
          v56 = *(_QWORD *)(v11 + 8);
          v57 = *(_DWORD *)(v11 + 16);
          if (v57 == *(_DWORD *)(v11 + 20))
          {
            v58 = 2 * v57;
            *(_DWORD *)(v11 + 20) = v58;
            v59 = (char *)malloc_type_realloc(*(void **)(v11 + 24), 32 * v58, 0x1000040F6D918ACuLL);
            *(_QWORD *)(v11 + 24) = v59;
          }
          else
          {
            v59 = *(char **)(v11 + 24);
          }
          v60 = *(_DWORD *)(v11 + 16);
          *(_DWORD *)(v11 + 16) = v60 + 1;
          v61 = &v59[32 * v60];
          *((_QWORD *)v61 + 1) = 0;
          *((_QWORD *)v61 + 2) = 0;
          *(_QWORD *)v61 = v56;
          *((_QWORD *)v61 + 3) = 1;
          if (v433 + *((_QWORD *)&__src + 1) - (unint64_t)__src >= v434)
            v62 = 0;
          else
            v62 = PayloadScannerReadVInt32_v2((uint64_t)v432) + v53;
          if (v62 >= v426)
          {
LABEL_546:
            v367 = __si_assert_copy_extra_1644(0);
            v368 = v367;
            v369 = "";
            if (v367)
              v369 = v367;
            __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 1300, "termId < maxTermId", v369);
            goto LABEL_595;
          }
          if (v424 == 1)
          {
            v63 = v47;
            v64 = 0;
            v65 = v62;
            v66 = v48;
            while (1)
            {
              v40 = v63;
              if (!v65)
                break;
              v69 = __src;
              v68 = DWORD2(__src);
              v70 = v433;
              if ((PayloadScannerReadVInt64((uint64_t)v432) & 1) != 0)
              {
                VInt32 = PayloadScannerReadVInt32((uint64_t)v432);
                v72 = v433 + VInt32 + *((_QWORD *)&__src + 1) - __src;
                if (v72 > v434)
                {
                  v382 = __si_assert_copy_extra_1644(0);
                  v365 = v382;
                  v383 = "";
                  if (v382)
                    v383 = v382;
                  __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 732, "PayloadScannerPosition(s) + runLength <= s->end", v383);
                  goto LABEL_576;
                }
                v73 = VInt32 + *((_QWORD *)&__src + 1) - __src;
                if (v72 >= v433 && v433 - (unint64_t)__src + (unint64_t)v437 >= v72)
                {
                  *((_QWORD *)&__src + 1) += VInt32;
                  v74 = __src + v73;
                  v75 = v433 - __src;
                }
                else
                {
                  *((_QWORD *)&__src + 1) = __src;
                  *(_QWORD *)&v437 = __src;
                  v74 = __src;
                  v433 = v72;
                  v75 = v72 - __src;
                }
                if (v74 + v75 != v72)
                  goto LABEL_564;
              }
              else if ((PayloadScannerReadVInt64((uint64_t)v432) & 1) == 0
                     && !PayloadScannerReadVInt32((uint64_t)v432)
                     && PayloadScannerReadVInt32((uint64_t)v432) >= 3)
              {
                v393 = __si_assert_copy_extra_1644(0);
                v368 = v393;
                v394 = "";
                if (v393)
                  v394 = v393;
                __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 741, "type >= 0 && type <= 2", v394);
                goto LABEL_595;
              }
              if (v64 >= v66)
              {
                v66 = (2 * v66);
                v439 = 0;
                v88 = (unsigned int *)reallocf(v63, 12 * v66);
                v11 = (uint64_t)v419;
                if (!v88)
                  goto LABEL_598;
                v439 = v88;
                v63 = v88;
              }
              if (*(_DWORD *)(v427 + 4408) <= v65)
              {
                v378 = __si_assert_copy_extra(0);
                v365 = v378;
                v379 = "";
                if (v378)
                  v379 = v378;
                __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 1530, "position && position < inMap->count", v379);
                goto LABEL_576;
              }
              v76 = storageResolvePtr(v427, 4 * v65, 4uLL, 1);
              v77 = *(_DWORD *)v76;
              v63[3 * v64] = *(_DWORD *)v76;
              if (v77)
              {
                v78 = v68 - v69 + v70;
                v79 = __src;
                v80 = v433 + *((_QWORD *)&__src + 1);
                v81 = v433 + DWORD2(__src) - __src - v78;
                v82 = &v63[3 * v64];
                v83 = (v64 + 1);
                v82[1] = v78 - v52;
                v82[2] = v81;
                v84 = v80;
                v85 = v79;
              }
              else
              {
                v86 = *__error();
                v87 = _SILogForLogForCategory(10);
                if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(v475[0]) = 136315650;
                  *(_QWORD *)((char *)v475 + 4) = "PayloadPulsesReorder";
                  WORD6(v475[0]) = 1024;
                  *(_DWORD *)((char *)v475 + 14) = 1515;
                  WORD1(v475[1]) = 1024;
                  DWORD1(v475[1]) = v65;
                  _os_log_error_impl(&dword_1B8270000, v87, OS_LOG_TYPE_ERROR, "%s:%d: compact missing termID %u", (uint8_t *)v475, 0x18u);
                }
                *__error() = v86;
                v84 = v433 + *((_QWORD *)&__src + 1);
                v85 = __src;
                v83 = v64;
              }
              if (v84 - v85 < v434)
                v67 = PayloadScannerReadVInt32_v2((uint64_t)v432) + v65;
              else
                v67 = 0;
              v64 = v83;
              v65 = v67;
              if (v67 >= v426)
                goto LABEL_546;
            }
            if (DWORD2(v437))
            {
              v108 = v66;
              v12 = v431;
              v11 = (uint64_t)v419;
            }
            else
            {
              v116 = v64;
              mergesort(v63, v64, 0xCuLL, (int (__cdecl *)(const void *, const void *))PayloadReorderInfoCompare);
              v12 = v431;
              v11 = (uint64_t)v419;
              if ((_DWORD)v64)
              {
                v117 = v63 + 1;
                while (1)
                {
                  v118 = v417 + *v117;
                  v119 = v433;
                  if (v118 >= v433 && v433 + (unint64_t)v437 - (unint64_t)__src >= v118)
                  {
                    v120 = __src + v118 - v433;
                    *((_QWORD *)&__src + 1) = v120;
                  }
                  else
                  {
                    v119 = v417 + *v117;
                    *((_QWORD *)&__src + 1) = __src;
                    *(_QWORD *)&v437 = __src;
                    v433 = v118;
                    v120 = __src;
                  }
                  if (v119 + v120 - (_QWORD)__src != v118)
                    break;
                  PayloadPulsesWriteTermId(v419, *(v117 - 1));
                  v121 = *v117;
                  v122 = v117[1];
                  v117 += 3;
                  PayloadPulsesWriteBytesFromScanner((uint64_t)v419, (uint64_t)v432, v417 + v121, v122);
                  if (!--v116)
                    goto LABEL_99;
                }
LABEL_564:
                v380 = __si_assert_copy_extra_1644(0);
                v368 = v380;
                v381 = "";
                if (v380)
                  v381 = v380;
                __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 100, "PayloadScannerPosition(scanner) == position", v381);
                goto LABEL_595;
              }
LABEL_99:
              v108 = v66;
            }
            goto LABEL_513;
          }
          v89 = v47;
          v90 = 0;
          v91 = v48;
          while (1)
          {
            v92 = (char *)v89;
            if (!v62)
              break;
            v93 = v62;
            v95 = __src;
            v94 = DWORD2(__src);
            v96 = v433;
            if ((PayloadScannerReadVInt64_v2((uint64_t)v432) & 1) != 0)
              PayloadScannerReadVInt64_v2((uint64_t)v432);
            PayloadScannerSkipPositionsData((uint64_t)v432);
            if (v90 >= v91)
            {
              v106 = v92;
              v98 = (2 * v91);
              v439 = 0;
              v107 = (char *)reallocf(v106, 12 * v98);
              if (!v107)
              {
LABEL_598:
                v46 = *__error();
                v12 = v431;
                goto LABEL_529;
              }
              v439 = (unsigned int *)v107;
              v97 = v107;
            }
            else
            {
              v97 = v92;
              v98 = v91;
            }
            v99 = v97;
            if (*(_DWORD *)(v427 + 4408) <= v93)
            {
              v372 = __si_assert_copy_extra(0);
              v368 = v372;
              v373 = "";
              if (v372)
                v373 = v372;
              __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 1530, "position && position < inMap->count", v373);
              goto LABEL_595;
            }
            v100 = storageResolvePtr(v427, 4 * v93, 4uLL, 1);
            v101 = *(_DWORD *)v100;
            *(_DWORD *)&v99[12 * v90] = *(_DWORD *)v100;
            if (!v101)
            {
              v374 = __si_assert_copy_extra_1644(0);
              v365 = v374;
              v375 = "";
              if (v374)
                v375 = v374;
              __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 1550, "reorderInfo[reorderCount].newTermId", v375);
              goto LABEL_576;
            }
            v102 = v94 - v95 + v96;
            v103 = v433 + *((_QWORD *)&__src + 1) - __src;
            v104 = v433 + DWORD2(__src) - __src - v102;
            v105 = &v99[12 * v90];
            *((_DWORD *)v105 + 1) = v102 - v52;
            *((_DWORD *)v105 + 2) = v104;
            if (v103 < v434)
              v62 = PayloadScannerReadVInt32_v2((uint64_t)v432) + v93;
            else
              v62 = 0;
            ++v90;
            v89 = (unsigned int *)v99;
            v91 = v98;
            if (v62 >= v426)
            {
              v376 = __si_assert_copy_extra_1644(0);
              v365 = v376;
              v377 = "";
              if (v376)
                v377 = v376;
              __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 1300, "termId < maxTermId", v377);
              goto LABEL_576;
            }
          }
          if (DWORD2(v437))
            goto LABEL_82;
          if (!v425)
          {
            v123 = 0;
            goto LABEL_120;
          }
          v109 = malloc_type_malloc(0x28uLL, 0x108004020E64A48uLL);
          v109[4] = -1;
          *(_QWORD *)v109 = 0;
          *((_QWORD *)v109 + 1) = 0;
          *((_QWORD *)v109 + 3) = -1;
          v109[8] = 0;
          v110 = v109;
          bzero(v475, 0x400uLL);
          v111 = getpid();
          do
          {
            v112 = __ldxr(scratch_file_create_sCount);
            v113 = v112 + 1;
          }
          while (__stxr(v113, scratch_file_create_sCount));
          v114 = v92;
          if (v428 != -1)
            break;
          snprintf((char *)v475, 0x400uLL, "/mds_scratch.%d.%d", v111, v113);
          bzero(&v465, 0x400uLL);
          if (confstr(65537, (char *)&v465, 0x400uLL) - 1 <= 0x3FF && (unint64_t)__strlcat_chk() <= 0x400)
          {
            v124 = open((const char *)&v465, 2562, 384);
            v110[4] = v124;
            if (v124 != -1
              || (snprintf((char *)&v465, 0x400uLL, "/tmp/%s", (const char *)v475),
                  v125 = open((const char *)&v465, 2562, 384),
                  v110[4] = v125,
                  v125 != -1))
            {
              unlink((const char *)&v465);
              goto LABEL_108;
            }
            v110[8] = *__error();
            v126 = *__error();
            v353 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v353, OS_LOG_TYPE_ERROR))
            {
              v354 = v110[8];
              v457 = 136315906;
              v458 = "scratch_file_create";
              v459 = 1024;
              v460 = 1892;
              v461 = 1024;
              v462 = v354;
              v463 = 2080;
              v464 = &v465;
              v349 = v353;
              v350 = "%s:%d: open err:%d %s";
              v351 = &v457;
              v352 = 34;
LABEL_522:
              _os_log_error_impl(&dword_1B8270000, v349, OS_LOG_TYPE_ERROR, v350, (uint8_t *)v351, v352);
            }
LABEL_107:
            *__error() = v126;
          }
LABEL_108:
          v128 = v110[4];
          v92 = v114;
          if ((_DWORD)v128 != -1)
          {
            if (_fd_ftruncate(v128, 0x8000) == -1)
            {
              v110[8] = *__error();
              v130 = *__error();
              v131 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
              {
                v132 = v110[8];
                v465 = 136315906;
                v466 = "scratch_file_create";
                v467 = 1024;
                v468 = 1911;
                v469 = 1024;
                v470 = v132;
                v471 = 1024;
                v472 = 0x8000;
                v133 = v131;
                v134 = "%s:%d: ftruncate err:%d size:%d";
                goto LABEL_526;
              }
            }
            else
            {
              v129 = mmap(0, 0x8000uLL, 3, 1025, v110[4], 0);
              *((_QWORD *)v110 + 3) = v129;
              if (v129 != (void *)-1)
              {
                *(_QWORD *)v110 = 0x8000;
                goto LABEL_119;
              }
              v110[8] = *__error();
              v130 = *__error();
              v135 = _SILogForLogForCategory(0);
              if (!os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
                goto LABEL_115;
              v355 = v110[8];
              v465 = 136315906;
              v466 = "scratch_file_create";
              v467 = 1024;
              v468 = 1916;
              v469 = 1024;
              v470 = v355;
              v471 = 1024;
              v472 = 0x8000;
              v133 = v135;
              v134 = "%s:%d: mmap err:%d size:%d";
LABEL_526:
              _os_log_error_impl(&dword_1B8270000, v133, OS_LOG_TYPE_ERROR, v134, (uint8_t *)&v465, 0x1Eu);
            }
LABEL_115:
            *__error() = v130;
            v92 = v114;
          }
          if (!*(_QWORD *)v110)
          {
            close(v110[4]);
            v110[4] = -1;
            if (!v110[8])
              v110[8] = -1;
          }
LABEL_119:
          v136 = v110[8];
          v123 = (uint64_t)v110;
          if (v136)
            goto LABEL_505;
LABEL_120:
          v415 = v90;
          mergesort(v92, v90, 0xCuLL, (int (__cdecl *)(const void *, const void *))PayloadReorderInfoCompare);
          if (v90)
          {
            v137 = 0;
            v416 = v92;
            while (1)
            {
              v138 = v137;
              v139 = (unsigned int *)&v92[12 * v137];
              v140 = v417 + v139[1];
              v141 = v433;
              if (v140 >= v433 && v433 + (unint64_t)v437 - (unint64_t)__src >= v140)
              {
                v142 = __src + v140 - v433;
                *((_QWORD *)&__src + 1) = v142;
              }
              else
              {
                v141 = v417 + v139[1];
                *((_QWORD *)&__src + 1) = __src;
                *(_QWORD *)&v437 = __src;
                v433 = v140;
                v142 = __src;
              }
              if (v141 + v142 - (_QWORD)__src != v140)
                goto LABEL_589;
              PayloadPulsesWriteTermId((int *)v11, *v139);
              v414 = v138;
              v143 = *(unsigned int *)&v92[12 * v138 + 8];
              v144 = __src;
              v145 = v433;
              VInt64_v2 = PayloadScannerReadVInt64_v2((uint64_t)v432);
              if ((VInt64_v2 & 1) != 0)
                VInt64_v2 = PayloadScannerReadVInt64_v2((uint64_t)v432);
              v147 = *((_QWORD *)&__src + 1);
              v148 = v433;
              v149 = __src;
              v150 = v145 + v143 + *((_QWORD *)&v144 + 1) - v144;
              v151 = v150 - v433;
              if (v150 >= v433 && v433 - (unint64_t)__src + (unint64_t)v437 >= v150)
              {
                *((_QWORD *)&__src + 1) = __src + v151;
                v153 = __src + v151;
                v154 = v433 - __src;
                v155 = v437;
                v152 = v433;
              }
              else
              {
                v152 = v145 + v143 + *((_QWORD *)&v144 + 1) - v144;
                v153 = __src;
                *((_QWORD *)&__src + 1) = __src;
                *(_QWORD *)&v437 = __src;
                v154 = v150 - __src;
                v433 = v152;
                v155 = __src;
              }
              if (v153 + v154 != v150)
                goto LABEL_564;
              v156 = v147 - __src + v148;
              v157 = v156;
              v158 = v150 - v156;
              if (VInt64_v2 > 1)
              {
                v412 = v145 + v143 + *((_QWORD *)&v144 + 1) - v144;
                *(_DWORD *)(v420 + 12) = 0;
                *(_QWORD *)(v420 + 16) = 0;
                if (v158 >= 3)
                  PositionRunInfoListAdd((char **)v420, v156, v158 - 1);
                while (1)
                {
                  *(_QWORD *)&v475[0] = v446;
                  *((_QWORD *)&v475[0] + 1) = VInt64_v2 >> 1;
                  v163 = storageResolvePtr((uint64_t)v446, VInt64_v2 >> 1, 0x14uLL, 0);
                  v476 = 0;
                  v475[1] = (unint64_t)v163;
                  VInt64_1804 = v2_readVInt64_1804((uint64_t)v163, (uint64_t *)&v475[1] + 1);
                  if ((VInt64_1804 & 1) != 0)
                    break;
                  v165 = *((_QWORD *)&v475[1] + 1);
                  v166 = *((_QWORD *)&v475[1] + 1) + 1;
                  v167 = *(unsigned __int8 *)(*(_QWORD *)&v475[1] + *((_QWORD *)&v475[1] + 1));
                  if (*(char *)(*(_QWORD *)&v475[1] + *((_QWORD *)&v475[1] + 1)) < 0)
                  {
                    if (v167 > 0xBF)
                    {
                      if (v167 > 0xDF)
                      {
                        if (v167 > 0xEF)
                        {
                          v171 = *(_DWORD *)(*(_QWORD *)&v475[1] + v166);
                          v172 = *((_QWORD *)&v475[1] + 1) + 5;
                        }
                        else
                        {
                          v171 = ((v167 & 0xF) << 24) | (*(unsigned __int8 *)(*(_QWORD *)&v475[1] + v166) << 16) | (*(unsigned __int8 *)(*((_QWORD *)&v475[1] + 1) + *(_QWORD *)&v475[1] + 2) << 8) | *(unsigned __int8 *)(*((_QWORD *)&v475[1] + 1) + *(_QWORD *)&v475[1] + 3);
                          v172 = *((_QWORD *)&v475[1] + 1) + 4;
                        }
                      }
                      else
                      {
                        v171 = ((v167 & 0x1F) << 16) | (*(unsigned __int8 *)(*(_QWORD *)&v475[1] + v166) << 8) | *(unsigned __int8 *)(*((_QWORD *)&v475[1] + 1) + *(_QWORD *)&v475[1] + 2);
                        v172 = *((_QWORD *)&v475[1] + 1) + 3;
                      }
                    }
                    else
                    {
                      v171 = *(unsigned __int8 *)(*(_QWORD *)&v475[1] + v166) | ((v167 & 0x3F) << 8);
                      v172 = *((_QWORD *)&v475[1] + 1) + 2;
                    }
                    v167 = v171;
                    v166 = v172;
                    if (v167)
                    {
LABEL_150:
                      if (v425)
                      {
                        v168 = v166 + 1;
                        v169 = *(unsigned __int8 *)(*(_QWORD *)&v475[1] + v166);
                        if (*(char *)(*(_QWORD *)&v475[1] + v166) < 0)
                        {
                          if (v169 > 0xBF)
                          {
                            if (v169 > 0xDF)
                            {
                              if (v169 > 0xEF)
                              {
                                v170 = *(_DWORD *)(*(_QWORD *)&v475[1] + v168);
                                v168 = v166 + 5;
                              }
                              else
                              {
                                v170 = ((v169 & 0xF) << 24) | (*(unsigned __int8 *)(*(_QWORD *)&v475[1] + v168) << 16) | (*(unsigned __int8 *)(v166 + *(_QWORD *)&v475[1] + 2) << 8) | *(unsigned __int8 *)(v166 + *(_QWORD *)&v475[1] + 3);
                                v168 = v166 + 4;
                              }
                            }
                            else
                            {
                              v170 = ((v169 & 0x1F) << 16) | (*(unsigned __int8 *)(*(_QWORD *)&v475[1] + v168) << 8) | *(unsigned __int8 *)(v166 + *(_QWORD *)&v475[1] + 2);
                              v168 = v166 + 3;
                            }
                          }
                          else
                          {
                            v170 = *(unsigned __int8 *)(*(_QWORD *)&v475[1] + v168) | ((v169 & 0x3F) << 8);
                            v168 = v166 + 2;
                          }
                        }
                        else
                        {
                          v170 = *(unsigned __int8 *)(*(_QWORD *)&v475[1] + v166);
                        }
                        v166 = v168;
                        v167 = v170;
                        if (!v170)
                        {
                          v389 = __si_assert_copy_extra_1644(0);
                          v368 = v389;
                          v390 = "";
                          if (v389)
                            v390 = v389;
                          __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 877, "position != 0", v390);
                          goto LABEL_595;
                        }
                      }
                      v176 = v475[0];
                      v177 = v166;
                      v178 = v167;
                      while (2)
                      {
                        v182 = storageResolvePtr(v176, *((unint64_t *)&v176 + 1), v177 + 10, 0);
                        v183 = v177 + 1;
                        v184 = v182[v177];
                        if ((v184 & 0x80) == 0)
                        {
                          if (!v182[v177])
                            goto LABEL_191;
LABEL_178:
                          v179 = v178 - v184;
                          if (v178 < v184)
                          {
                            v364 = __si_assert_copy_extra_1644(0);
                            v365 = v364;
                            v366 = "";
                            if (v364)
                              v366 = v364;
                            __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 883, "delta <= position", v366);
                            goto LABEL_576;
                          }
LABEL_179:
                          v180 = v179;
                          v177 = v183;
                          v181 = v183;
                          v178 = v180;
                          if (!v180)
                            goto LABEL_217;
                          continue;
                        }
                        break;
                      }
                      if (v184 > 0xBF)
                      {
                        if (v184 > 0xDF)
                        {
                          if (v184 > 0xEF)
                          {
                            v185 = *(_DWORD *)&v182[v183];
                            v186 = v177 + 5;
                          }
                          else
                          {
                            v185 = ((v184 & 0xF) << 24) | (v182[v183] << 16) | (v182[v177 + 2] << 8) | v182[v177 + 3];
                            v186 = v177 + 4;
                          }
                        }
                        else
                        {
                          v185 = ((v184 & 0x1F) << 16) | (v182[v183] << 8) | v182[v177 + 2];
                          v186 = v177 + 3;
                        }
                      }
                      else
                      {
                        v185 = v182[v183] | ((v184 & 0x3F) << 8);
                        v186 = v177 + 2;
                      }
                      v184 = v185;
                      v183 = v186;
                      if (v184)
                        goto LABEL_178;
LABEL_191:
                      v187 = v183 + 1;
                      v188 = v182[v183];
                      if (v182[v183] < 0)
                      {
                        if (v188 <= 0xBF)
                        {
                          v183 += 2;
                          v188 = v182[v187] | ((v188 & 0x3F) << 8);
                          if (!v425)
                            goto LABEL_207;
                          goto LABEL_204;
                        }
                        if (v188 <= 0xDF)
                        {
                          v188 = ((v188 & 0x1F) << 16) | (v182[v187] << 8) | v182[v183 + 2];
                          v183 += 3;
                          if (!v425)
                            goto LABEL_207;
                          goto LABEL_204;
                        }
                        if (v188 <= 0xEF)
                        {
                          v188 = ((v188 & 0xF) << 24) | (v182[v187] << 16) | (v182[v183 + 2] << 8) | v182[v183 + 3];
                          v183 += 4;
                          if (!v425)
                            goto LABEL_207;
                          goto LABEL_204;
                        }
                        v188 = *(_DWORD *)&v182[v187];
                        v183 += 5;
                        if (v425)
                          goto LABEL_204;
                      }
                      else
                      {
                        ++v183;
                        if (!v425)
                          goto LABEL_207;
LABEL_204:
                        if (v188)
                        {
                          v189 = v183 + 1;
                          v188 = v182[v183];
                          if (v182[v183] < 0)
                          {
                            if (v188 > 0xBF)
                            {
                              if (v188 > 0xDF)
                              {
                                if (v188 > 0xEF)
                                {
                                  v179 = *(_DWORD *)&v182[v189];
                                  v183 += 5;
                                }
                                else
                                {
                                  v179 = ((v188 & 0xF) << 24) | (v182[v189] << 16) | (v182[v183 + 2] << 8) | v182[v183 + 3];
                                  v183 += 4;
                                }
                              }
                              else
                              {
                                v179 = ((v188 & 0x1F) << 16) | (v182[v189] << 8) | v182[v183 + 2];
                                v183 += 3;
                              }
                            }
                            else
                            {
                              v179 = v182[v189] | ((v188 & 0x3F) << 8);
                              v183 += 2;
                            }
                            goto LABEL_179;
                          }
                          ++v183;
                        }
                      }
LABEL_207:
                      v179 = v188;
                      goto LABEL_179;
                    }
                  }
                  else if (*(_BYTE *)(*(_QWORD *)&v475[1] + *((_QWORD *)&v475[1] + 1)))
                  {
                    goto LABEL_150;
                  }
                  v173 = v166 + 1;
                  v174 = *(unsigned __int8 *)(*(_QWORD *)&v475[1] + v166);
                  if (*(char *)(*(_QWORD *)&v475[1] + v166) < 0)
                  {
                    if (v174 > 0xBF)
                    {
                      if (v174 > 0xDF)
                      {
                        if (v174 > 0xEF)
                        {
                          v175 = *(_DWORD *)(*(_QWORD *)&v475[1] + v173);
                          v173 = v166 + 5;
                        }
                        else
                        {
                          v175 = ((v174 & 0xF) << 24) | (*(unsigned __int8 *)(*(_QWORD *)&v475[1] + v173) << 16) | (*(unsigned __int8 *)(v166 + *(_QWORD *)&v475[1] + 2) << 8) | *(unsigned __int8 *)(v166 + *(_QWORD *)&v475[1] + 3);
                          v173 = v166 + 4;
                        }
                      }
                      else
                      {
                        v175 = ((v174 & 0x1F) << 16) | (*(unsigned __int8 *)(*(_QWORD *)&v475[1] + v173) << 8) | *(unsigned __int8 *)(v166 + *(_QWORD *)&v475[1] + 2);
                        v173 = v166 + 3;
                      }
                    }
                    else
                    {
                      v175 = *(unsigned __int8 *)(*(_QWORD *)&v475[1] + v173) | ((v174 & 0x3F) << 8);
                      v173 = v166 + 2;
                    }
                  }
                  else
                  {
                    v175 = *(unsigned __int8 *)(*(_QWORD *)&v475[1] + v166);
                  }
                  v190 = v175;
                  v181 = v173;
                  if (v190)
                  {
                    v391 = __si_assert_copy_extra_1644(0);
                    v368 = v391;
                    v392 = "";
                    if (v391)
                      v392 = v391;
                    __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 873, "position == 0", v392);
                    goto LABEL_595;
                  }
LABEL_217:
                  v191 = v181 - v165;
                  if (v191 <= 1)
                  {
                    v386 = __si_assert_copy_extra_1644(0);
                    v365 = v386;
                    v387 = "";
                    if (v386)
                      v387 = v386;
                    __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 1015, "data_len >= 2", v387);
                    goto LABEL_576;
                  }
                  v192 = v165 + (VInt64_v2 >> 1);
                  if (VInt64_1804 <= 1)
                  {
                    if (v191 <= 2)
                    {
                      v405 = __si_assert_copy_extra_1644(0);
                      v365 = v405;
                      v406 = "";
                      if (v405)
                        v406 = v405;
                      __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 1017, "data_len > 2", v406);
                      goto LABEL_576;
                    }
                    v193 = (_QWORD *)v420;
                    PositionRunInfoListAdd((char **)v420, v192, v191);
                    if (v425)
                    {
                      if (*(_DWORD *)(v420 + 12))
                      {
                        v194 = 0;
                        do
                        {
                          v195 = v194;
                          v196 = (unint64_t *)(*v193 + 16 * v194);
                          v197 = v196[1];
                          v198 = storageResolvePtr((uint64_t)v446, *v196, v197, 1);
                          v199 = v198;
                          v200 = v198;
                          v201 = *v198;
                          v411 = v195;
                          if ((v201 & 0x80) != 0)
                          {
                            if (v201 > 0xBF)
                            {
                              if (v201 > 0xDF)
                              {
                                if (v201 > 0xEF)
                                {
                                  v201 = *(_DWORD *)(v198 + 1);
                                  v202 = 5;
                                  if (v201)
                                  {
LABEL_239:
                                    v203 = v201;
                                    while (1)
                                    {
                                      v204 = v202;
                                      v205 = v202;
                                      if (v202 < v197)
                                      {
                                        v206 = v202;
                                        while (1)
                                        {
                                          v210 = v200[v206];
                                          if (!v200[v206])
                                            break;
                                          if ((v210 & 0x80) != 0)
                                          {
                                            v207 = 3;
                                            v208 = 4;
                                            if (v210 >= 0xF0)
                                              v208 = 5;
                                            if (v210 >= 0xE0)
                                              v207 = v208;
                                            if (v210 >= 0xC0)
                                              v209 = v207;
                                            else
                                              v209 = 2;
                                          }
                                          else
                                          {
                                            v209 = 1;
                                          }
                                          v206 += v209;
                                          v205 = v206;
                                          if (v206 >= v197)
                                            goto LABEL_254;
                                        }
                                        v205 = v206 + 1;
                                      }
LABEL_254:
                                      if (*(_QWORD *)v425 > (uint64_t)v203
                                        && CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v425 + 16), v203))
                                      {
                                        if (!scratch_file_grow(v123, 2))
                                          break;
                                        *(_WORD *)(*(_QWORD *)(v123 + 24) + *(_QWORD *)(v123 + 8)) = 1;
                                        v211 = 2;
                                      }
                                      else
                                      {
                                        v211 = v205 - v204;
                                        if (!scratch_file_grow(v123, v205 - v204))
                                          break;
                                        memcpy((void *)(*(_QWORD *)(v123 + 24) + *(_QWORD *)(v123 + 8)), &v199[v204], v205 - v204);
                                      }
                                      *(_QWORD *)(v123 + 8) += v211;
                                      v212 = v205 + 1;
                                      v213 = v200[v205];
                                      if (v200[v205] < 0)
                                      {
                                        if (v213 > 0xBF)
                                        {
                                          if (v213 > 0xDF)
                                          {
                                            if (v213 > 0xEF)
                                            {
                                              v215 = *(_DWORD *)&v200[v212];
                                              v202 = v205 + 5;
                                            }
                                            else
                                            {
                                              v215 = ((v213 & 0xF) << 24) | (v200[v212] << 16) | (v199[v205 + 2] << 8) | v199[v205 + 3];
                                              v202 = v205 + 4;
                                            }
                                          }
                                          else
                                          {
                                            v215 = ((v213 & 0x1F) << 16) | (v200[v212] << 8) | v199[v205 + 2];
                                            v202 = v205 + 3;
                                          }
                                        }
                                        else
                                        {
                                          v215 = v200[v212] | ((v213 & 0x3F) << 8);
                                          v202 = v205 + 2;
                                        }
                                        v213 = v215;
                                        v161 = v203 >= v215;
                                        v214 = v203 - v215;
                                        if (v214 == 0 || !v161)
                                        {
LABEL_549:
                                          v370 = __si_assert_copy_extra_1644(0);
                                          v368 = v370;
                                          v371 = "";
                                          if (v370)
                                            v371 = v370;
                                          __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 1061, "!delta||delta<docId", v371);
                                          goto LABEL_595;
                                        }
                                      }
                                      else
                                      {
                                        v202 = v205 + 1;
                                        v214 = v203 - v213;
                                        if (v203 <= v213)
                                          goto LABEL_549;
                                      }
                                      if (v213)
                                      {
                                        v203 = v214;
                                        if (v214)
                                          continue;
                                      }
                                      break;
                                    }
                                  }
                                }
                                else
                                {
                                  v201 = ((v201 & 0xF) << 24) | (v198[1] << 16) | (v198[2] << 8) | v198[3];
                                  v202 = 4;
                                  if (v201)
                                    goto LABEL_239;
                                }
                              }
                              else
                              {
                                v201 = ((v201 & 0x1F) << 16) | (v198[1] << 8) | v198[2];
                                v202 = 3;
                                if (v201)
                                  goto LABEL_239;
                              }
                            }
                            else
                            {
                              v202 = 2;
                              v201 = v200[1] | ((v201 & 0x3F) << 8);
                              if (v201)
                                goto LABEL_239;
                            }
                          }
                          else
                          {
                            v202 = 1;
                            if (v201)
                              goto LABEL_239;
                          }
                          v194 = v411 + 1;
                          v193 = (_QWORD *)v420;
                        }
                        while (v411 + 1 < (unint64_t)*(unsigned int *)(v420 + 12));
                      }
                      if (scratch_file_grow(v123, 1))
                        *(_BYTE *)(*(_QWORD *)(v123 + 24) + (*(_QWORD *)(v123 + 8))++) = 0;
                      if (v433 + *((_QWORD *)&__src + 1) - (_QWORD)__src != v412)
                      {
                        v407 = __si_assert_copy_extra_1644(0);
                        v368 = v407;
                        v408 = "";
                        if (v407)
                          v408 = v407;
                        __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 1069, "processed==positionLen", v408);
                        goto LABEL_595;
                      }
                      memset(v475, 0, sizeof(v475));
                      v216 = *(_QWORD *)(v123 + 8);
                      LOBYTE(v217) = v216;
                      if (HIDWORD(v216))
                      {
                        if ((v216 & 0x8000000000000000) != 0)
                        {
                          v268 = (uint64x2_t)vdupq_n_s64(v216);
                          v269.i32[0] = *(_QWORD *)(v123 + 8);
                          v269.i32[1] = v216 >> 7;
                          *(int8x8_t *)&v475[0] = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v269, (int64x2_t)vshlq_u64(v268, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v268, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v268, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
                          BYTE8(v475[0]) = HIBYTE(v216) | 0x80;
                          LOBYTE(v217) = 1;
                          v218 = 9;
                        }
                        else if ((v216 & 0x7F00000000000000) != 0)
                        {
                          v260 = (uint64x2_t)vdupq_n_s64(v216);
                          v261.i32[0] = *(_QWORD *)(v123 + 8);
                          v261.i32[1] = v216 >> 7;
                          *(int8x8_t *)&v475[0] = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v261, (int64x2_t)vshlq_u64(v260, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v260, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v260, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
                          v217 = (v216 & 0x7F00000000000000) >> 56;
                          v218 = 8;
                        }
                        else if ((v216 & 0xFE000000000000) != 0)
                        {
                          v276 = (uint64x2_t)vdupq_n_s64(v216);
                          LOBYTE(v475[0]) = v216 | 0x80;
                          v277 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v276, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v276, (uint64x2_t)xmmword_1B8631B90));
                          v277.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v277) | 0x80008000800080;
                          *(_DWORD *)((char *)v475 + 1) = vmovn_s16(v277).u32[0];
                          BYTE5(v475[0]) = (v216 >> 35) | 0x80;
                          BYTE6(v475[0]) = (v216 >> 42) | 0x80;
                          v217 = (v216 & 0xFE000000000000) >> 49;
                          v218 = 7;
                        }
                        else
                        {
                          LOBYTE(v475[0]) = v216 | 0x80;
                          v301 = (uint64x2_t)vdupq_n_s64(v216);
                          v302 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v301, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v301, (uint64x2_t)xmmword_1B8631B90));
                          v302.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v302) | 0x80008000800080;
                          *(_DWORD *)((char *)v475 + 1) = vmovn_s16(v302).u32[0];
                          if ((v216 & 0x1FC0000000000) != 0)
                          {
                            BYTE5(v475[0]) = (v216 >> 35) | 0x80;
                            v217 = (v216 & 0x1FC0000000000) >> 42;
                            v218 = 6;
                          }
                          else
                          {
                            v217 = (v216 >> 35) & 0x7F;
                            v218 = 5;
                          }
                        }
                      }
                      else if ((v216 & 0x7F0000000) != 0)
                      {
                        LOBYTE(v475[0]) = v216 | 0x80;
                        BYTE1(v475[0]) = (v216 >> 7) | 0x80;
                        BYTE2(v475[0]) = (v216 >> 14) | 0x80;
                        BYTE3(v475[0]) = (v216 >> 21) | 0x80;
                        v217 = (v216 & 0x7F0000000) >> 28;
                        v218 = 4;
                      }
                      else if ((v216 & 0xFE00000) != 0)
                      {
                        LOBYTE(v475[0]) = v216 | 0x80;
                        BYTE1(v475[0]) = (v216 >> 7) | 0x80;
                        BYTE2(v475[0]) = (v216 >> 14) | 0x80;
                        v217 = (v216 & 0xFE00000) >> 21;
                        v218 = 3;
                      }
                      else if ((v216 & 0x1FC000) != 0)
                      {
                        LOBYTE(v475[0]) = v216 | 0x80;
                        BYTE1(v475[0]) = (v216 >> 7) | 0x80;
                        v217 = (v216 & 0x1FC000) >> 14;
                        v218 = 2;
                      }
                      else
                      {
                        v218 = v216 & 0x3F80;
                        if (v218)
                        {
                          LOBYTE(v475[0]) = v217 | 0x80;
                          v217 = v218 >> 7;
                          v218 = 1;
                        }
                      }
                      v321 = v475;
                      *(_BYTE *)((unint64_t)v475 | v218) = v217;
                      v322 = v218 + 1;
                      while (1)
                      {
                        v323 = *(_QWORD *)(v11 + 32);
                        v324 = *(_QWORD *)(v11 + 40);
                        if (v324 - v323 >= v322)
                          v325 = v322;
                        else
                          v325 = v324 - v323;
                        if (v325)
                        {
                          memcpy((void *)(*(_QWORD *)(v11 + 48) + v323), v321, v325);
                          v326 = *(_QWORD *)(v11 + 40);
                          v327 = *(_QWORD *)(v11 + 32) + v325;
                          *(_QWORD *)(v11 + 32) = v327;
                          v321 = (_OWORD *)((char *)v321 + v325);
                          if (v327 == v326)
                            goto LABEL_468;
                        }
                        else if (*(_QWORD *)(v11 + 32) == *(_QWORD *)(v11 + 40))
                        {
LABEL_468:
                          PayloadPulsesWrite((int *)v11);
                          if (!*(_DWORD *)(v11 + 60))
                          {
                            v322 -= v325;
                            if (v322)
                              continue;
                          }
LABEL_470:
                          if (!*(_QWORD *)(v123 + 8))
                            goto LABEL_495;
                          v328 = *(char **)(v123 + 24);
                          v329 = *(_QWORD *)(v123 + 8);
                          while (1)
                          {
                            v330 = *(_QWORD *)(v11 + 32);
                            v331 = *(_QWORD *)(v11 + 40);
                            if (v331 - v330 >= v329)
                              v332 = v329;
                            else
                              v332 = v331 - v330;
                            if (v332)
                            {
                              memcpy((void *)(*(_QWORD *)(v11 + 48) + v330), v328, v332);
                              v333 = *(_QWORD *)(v11 + 40);
                              v334 = *(_QWORD *)(v11 + 32) + v332;
                              *(_QWORD *)(v11 + 32) = v334;
                              v328 += v332;
                              if (v334 != v333)
                                goto LABEL_472;
                            }
                            else if (*(_QWORD *)(v11 + 32) != *(_QWORD *)(v11 + 40))
                            {
LABEL_472:
                              v329 -= v332;
                              if (!v329)
                                goto LABEL_495;
                              continue;
                            }
                            PayloadPulsesWrite((int *)v11);
                            if (!*(_DWORD *)(v11 + 60))
                            {
                              v329 -= v332;
                              if (v329)
                                continue;
                            }
                            goto LABEL_495;
                          }
                        }
                        v322 -= v325;
                        if (!v322)
                          goto LABEL_470;
                      }
                    }
                    memset(v475, 0, sizeof(v475));
                    v254 = *(_QWORD *)(v420 + 16);
                    LOBYTE(v255) = v254;
                    v256 = 6;
                    v257 = 7;
                    if (HIDWORD(v254))
                    {
                      if ((v254 & 0x8000000000000000) != 0)
                      {
                        v274 = (uint64x2_t)vdupq_n_s64(v254);
                        v275.i32[0] = *(_QWORD *)(v420 + 16);
                        v275.i32[1] = v254 >> 7;
                        *(int8x8_t *)&v475[0] = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v275, (int64x2_t)vshlq_u64(v274, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v274, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v274, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
                        BYTE8(v475[0]) = HIBYTE(v254) | 0x80;
                        LOBYTE(v255) = 1;
                        v259 = 9;
                      }
                      else
                      {
                        if ((v254 & 0x7F00000000000000) != 0)
                        {
                          v264 = (uint64x2_t)vdupq_n_s64(v254);
                          v265.i32[0] = *(_QWORD *)(v420 + 16);
                          v265.i32[1] = v254 >> 7;
                          *(int8x8_t *)&v475[0] = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v265, (int64x2_t)vshlq_u64(v264, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v264, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v264, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
                          v255 = (v254 & 0x7F00000000000000) >> 56;
                          v259 = 8;
                          goto LABEL_390;
                        }
                        if ((v254 & 0xFE000000000000) != 0)
                        {
                          v280 = (uint64x2_t)vdupq_n_s64(v254);
                          LOBYTE(v475[0]) = v254 | 0x80;
                          v281 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v280, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v280, (uint64x2_t)xmmword_1B8631B90));
                          v281.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v281) | 0x80008000800080;
                          *(_DWORD *)((char *)v475 + 1) = vmovn_s16(v281).u32[0];
                          BYTE5(v475[0]) = (v254 >> 35) | 0x80;
                          BYTE6(v475[0]) = (v254 >> 42) | 0x80;
                          v282 = (v254 & 0xFE000000000000) >> 49;
                          goto LABEL_389;
                        }
                        LOBYTE(v475[0]) = v254 | 0x80;
                        v305 = (uint64x2_t)vdupq_n_s64(v254);
                        v306 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v305, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v305, (uint64x2_t)xmmword_1B8631B90));
                        v306.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v306) | 0x80008000800080;
                        *(_DWORD *)((char *)v475 + 1) = vmovn_s16(v306).u32[0];
                        if ((v254 & 0x1FC0000000000) != 0)
                        {
                          BYTE5(v475[0]) = (v254 >> 35) | 0x80;
                          v258 = (v254 & 0x1FC0000000000) >> 42;
LABEL_349:
                          LOBYTE(v255) = v258;
                          v259 = v256;
                        }
                        else
                        {
                          v255 = (v254 >> 35) & 0x7F;
                          v259 = 5;
                        }
                      }
                    }
                    else
                    {
                      v256 = 4;
                      v257 = 2;
                      if ((v254 & 0x7F0000000) != 0)
                      {
                        LOBYTE(v475[0]) = v254 | 0x80;
                        BYTE1(v475[0]) = (v254 >> 7) | 0x80;
                        BYTE2(v475[0]) = (v254 >> 14) | 0x80;
                        BYTE3(v475[0]) = (v254 >> 21) | 0x80;
                        v258 = (v254 & 0x7F0000000) >> 28;
                        goto LABEL_349;
                      }
                      if ((v254 & 0xFE00000) != 0)
                      {
                        LOBYTE(v475[0]) = v254 | 0x80;
                        BYTE1(v475[0]) = (v254 >> 7) | 0x80;
                        BYTE2(v475[0]) = (v254 >> 14) | 0x80;
                        v255 = (v254 & 0xFE00000) >> 21;
                        v259 = 3;
                        goto LABEL_390;
                      }
                      if ((v254 & 0x1FC000) != 0)
                      {
                        LOBYTE(v475[0]) = v254 | 0x80;
                        BYTE1(v475[0]) = (v254 >> 7) | 0x80;
                        v282 = (v254 & 0x1FC000) >> 14;
LABEL_389:
                        LOBYTE(v255) = v282;
                        v259 = v257;
                      }
                      else
                      {
                        v259 = v254 & 0x3F80;
                        if (v259)
                        {
                          LOBYTE(v475[0]) = v255 | 0x80;
                          v255 = v259 >> 7;
                          v259 = 1;
                        }
                      }
                    }
LABEL_390:
                    v285 = v475;
                    *(_BYTE *)((unint64_t)v475 | v259) = v255;
                    v286 = v259 + 1;
                    while (1)
                    {
                      v287 = *(_QWORD *)(v11 + 32);
                      v288 = *(_QWORD *)(v11 + 40);
                      if (v288 - v287 >= v286)
                        v289 = v286;
                      else
                        v289 = v288 - v287;
                      if (v289)
                      {
                        memcpy((void *)(*(_QWORD *)(v11 + 48) + v287), v285, v289);
                        v290 = *(_QWORD *)(v11 + 40);
                        v291 = *(_QWORD *)(v11 + 32) + v289;
                        *(_QWORD *)(v11 + 32) = v291;
                        v285 = (_OWORD *)((char *)v285 + v289);
                        if (v291 != v290)
                          goto LABEL_391;
                      }
                      else if (*(_QWORD *)(v11 + 32) != *(_QWORD *)(v11 + 40))
                      {
LABEL_391:
                        v286 -= v289;
                        if (!v286)
                          goto LABEL_401;
                        continue;
                      }
                      PayloadPulsesWrite((int *)v11);
                      if (!*(_DWORD *)(v11 + 60))
                      {
                        v286 -= v289;
                        if (v286)
                          continue;
                      }
LABEL_401:
                      if (!*(_DWORD *)(v420 + 12))
                        goto LABEL_495;
                      v292 = 0;
                      while (1)
                      {
                        v293 = storageResolvePtr((uint64_t)v446, *(_QWORD *)(*(_QWORD *)v420 + 16 * v292), *(_QWORD *)(*(_QWORD *)v420 + 16 * v292 + 8), 1);
                        if (*(_QWORD *)(*(_QWORD *)v420 + 16 * v292 + 8))
                          break;
LABEL_403:
                        if (++v292 >= (unint64_t)*(unsigned int *)(v420 + 12))
                          goto LABEL_495;
                      }
                      v294 = v293;
                      v295 = *(_QWORD *)(*(_QWORD *)v420 + 16 * v292 + 8);
                      while (1)
                      {
                        v296 = *(_QWORD *)(v11 + 32);
                        v297 = *(_QWORD *)(v11 + 40);
                        if (v297 - v296 >= v295)
                          v298 = v295;
                        else
                          v298 = v297 - v296;
                        if (v298)
                        {
                          memcpy((void *)(*(_QWORD *)(v11 + 48) + v296), v294, v298);
                          v299 = *(_QWORD *)(v11 + 40);
                          v300 = *(_QWORD *)(v11 + 32) + v298;
                          *(_QWORD *)(v11 + 32) = v300;
                          v294 += v298;
                          if (v300 != v299)
                            goto LABEL_406;
                        }
                        else if (*(_QWORD *)(v11 + 32) != *(_QWORD *)(v11 + 40))
                        {
LABEL_406:
                          v295 -= v298;
                          if (!v295)
                            goto LABEL_403;
                          continue;
                        }
                        PayloadPulsesWrite((int *)v11);
                        if (!*(_DWORD *)(v11 + 60))
                        {
                          v295 -= v298;
                          if (v295)
                            continue;
                        }
                        goto LABEL_403;
                      }
                    }
                  }
                  if (v191 >= 3)
                    PositionRunInfoListAdd((char **)v420, v192, v191 - 1);
                  VInt64_v2 = VInt64_1804;
                }
                v384 = __si_assert_copy_extra_1644(0);
                v368 = v384;
                v385 = "";
                if (v384)
                  v385 = v384;
                __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 862, "!(next & 0x01)", v385);
LABEL_595:
                free(v368);
                if (__valid_fs(-1))
                {
                  MEMORY[0xBAD] = -559038737;
                  abort();
                }
                MEMORY[0xC00] = -559038737;
                abort();
              }
              if (v158 <= 2)
              {
                v403 = __si_assert_copy_extra_1644(0);
                v368 = v403;
                v404 = "";
                if (v403)
                  v404 = v403;
                __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 962, "positionLen > 2", v404);
                goto LABEL_595;
              }
              if (!v425)
                break;
              v159 = v154 + v155;
              v160 = v156 - v152;
              v161 = v156 >= v152 && v159 >= v156;
              if (v161)
              {
                v149 = __src + v160;
                v162 = __src + v160;
              }
              else
              {
                v162 = __src;
                *(_QWORD *)&v437 = __src;
                v433 = v156;
                v154 = v156 - __src;
              }
              v413 = v145 + v143 + *((_QWORD *)&v144 + 1) - v144;
              *((_QWORD *)&__src + 1) = v149;
              if (v162 + v154 != v156)
                goto LABEL_564;
              VInt32_v2 = PayloadScannerReadVInt32_v2((uint64_t)v432);
              if (!VInt32_v2)
                goto LABEL_336;
              v223 = VInt32_v2;
              while (2)
              {
                v224 = (_BYTE *)*((_QWORD *)&__src + 1);
                v225 = (char *)(*((_QWORD *)&__src + 1) - __src + v433);
                LOBYTE(v475[0]) = 0;
                while (1)
                {
                  if ((unint64_t)v224 < (unint64_t)v437)
                  {
                    *((_QWORD *)&__src + 1) = v224 + 1;
                    LOBYTE(v475[0]) = *v224;
                    v226 = LOBYTE(v475[0]);
                    if (!LOBYTE(v475[0]))
                      break;
                    goto LABEL_292;
                  }
                  if (!_PayloadScannerReadNextChar((uint64_t)v432, v475))
                    break;
                  v226 = LOBYTE(v475[0]);
                  if (!LOBYTE(v475[0]))
                    break;
LABEL_292:
                  if ((v226 & 0x80) != 0)
                  {
                    v227 = 2;
                    v228 = 3;
                    v229 = 4;
                    v230 = 5;
                    v231 = 6;
                    v232 = 7;
                    if (v226 == 255)
                      v232 = 8;
                    if (v226 >= 0xFE)
                      v231 = v232;
                    if (v226 >= 0xFC)
                      v230 = v231;
                    if (v226 >= 0xF8)
                      v229 = v230;
                    if (v226 >= 0xF0)
                      v228 = v229;
                    if (v226 >= 0xE0)
                      v227 = v228;
                    if (v226 >= 0xC0)
                      v233 = v227;
                    else
                      v233 = 1;
                    v224 = (_BYTE *)(*((_QWORD *)&__src + 1) + v233);
                    if ((unint64_t)v437 < *((_QWORD *)&__src + 1) + v233)
                    {
                      v234 = v433;
                      v235 = v233 + *((_QWORD *)&__src + 1) + v433 - __src;
                      v236 = v235 - v433;
                      if (v235 >= v433 && v433 + (unint64_t)v437 - (unint64_t)__src >= v235)
                      {
                        v237 = __src + v236;
                        *((_QWORD *)&__src + 1) = __src + v236;
                        v238 = (_BYTE *)(__src + v236);
                      }
                      else
                      {
                        v237 = __src;
                        v234 = v235;
                        *((_QWORD *)&__src + 1) = __src;
                        *(_QWORD *)&v437 = __src;
                        v238 = (_BYTE *)__src;
                        v433 = v235;
                      }
                      v224 = v238;
                      if (v237 - (_QWORD)__src + v234 != v235)
                        goto LABEL_564;
                    }
                    else
                    {
                      *((_QWORD *)&__src + 1) += v233;
                    }
                  }
                  else
                  {
                    v224 = (_BYTE *)*((_QWORD *)&__src + 1);
                  }
                }
                v239 = __src;
                v240 = v433;
                if (*(_QWORD *)v425 <= (uint64_t)v223 || !CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v425 + 16), v223))
                {
                  v242 = v240 + *((_QWORD *)&v239 + 1) - (_QWORD)&v225[v239];
                  v241 = v242;
                  if (!scratch_file_grow(v123, v242))
                    goto LABEL_336;
                  if ((unint64_t)v225 >= v433
                    && v433 - (unint64_t)__src + (unint64_t)v437 >= (unint64_t)v225)
                  {
                    v243 = &v225[__src - v433];
                    *((_QWORD *)&__src + 1) = v243;
                    v244 = __src;
                    v245 = v437;
                    v246 = (char *)v433;
                  }
                  else
                  {
                    *((_QWORD *)&__src + 1) = __src;
                    *(_QWORD *)&v437 = __src;
                    v243 = (char *)__src;
                    v244 = __src;
                    v245 = __src;
                    v246 = v225;
                    v433 = (unint64_t)v225;
                  }
                  if (&v243[(_QWORD)v246 - v244] != v225)
                  {
LABEL_589:
                    v395 = __si_assert_copy_extra_1644(0);
                    v365 = v395;
                    v396 = "";
                    if (v395)
                      v396 = v395;
                    __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 100, "PayloadScannerPosition(scanner) == position", v396);
                    goto LABEL_576;
                  }
                  if ((v245 - (_DWORD)v243) < v242)
                  {
                    _PayloadScannerReadBytes((uint64_t)v432, (_BYTE *)(*(_QWORD *)(v123 + 24) + *(_QWORD *)(v123 + 8)), v242);
                  }
                  else
                  {
                    memcpy((void *)(*(_QWORD *)(v123 + 24) + *(_QWORD *)(v123 + 8)), v243, v242);
                    *((_QWORD *)&__src + 1) += v242;
                  }
LABEL_331:
                  *(_QWORD *)(v123 + 8) += v241;
                  v247 = PayloadScannerReadVInt32_v2((uint64_t)v432);
                  v248 = v223 - v247;
                  if (v223 > v247)
                  {
                    if (!v247)
                      goto LABEL_336;
                    v223 -= v247;
                    if (!v248)
                      goto LABEL_336;
                    continue;
                  }
                  v397 = __si_assert_copy_extra_1644(0);
                  v368 = v397;
                  v398 = "";
                  if (v397)
                    v398 = v397;
                  __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 981, "!delta||delta<docId", v398);
                  goto LABEL_595;
                }
                break;
              }
              if (scratch_file_grow(v123, 2))
              {
                *(_WORD *)(*(_QWORD *)(v123 + 24) + *(_QWORD *)(v123 + 8)) = 1;
                v241 = 2;
                goto LABEL_331;
              }
LABEL_336:
              if (scratch_file_grow(v123, 1))
                *(_BYTE *)(*(_QWORD *)(v123 + 24) + (*(_QWORD *)(v123 + 8))++) = 0;
              if (v433 + *((_QWORD *)&__src + 1) - (_QWORD)__src != v413 && !*(_DWORD *)(v123 + 32))
              {
                v409 = __si_assert_copy_extra_1644(0);
                v368 = v409;
                v410 = "";
                if (v409)
                  v410 = v409;
                __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 988, "processed==positionLen||scratch->err", v410);
                goto LABEL_595;
              }
              memset(v475, 0, sizeof(v475));
              v249 = *(_QWORD *)(v123 + 8);
              LOBYTE(v250) = v249;
              if (HIDWORD(v249))
              {
                if ((v249 & 0x8000000000000000) != 0)
                {
                  v266 = (uint64x2_t)vdupq_n_s64(v249);
                  v267.i32[0] = *(_QWORD *)(v123 + 8);
                  v267.i32[1] = v249 >> 7;
                  *(int8x8_t *)&v475[0] = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v267, (int64x2_t)vshlq_u64(v266, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v266, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v266, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
                  BYTE8(v475[0]) = HIBYTE(v249) | 0x80;
                  LOBYTE(v250) = 1;
                  v251 = 9;
                }
                else if ((v249 & 0x7F00000000000000) != 0)
                {
                  v252 = (uint64x2_t)vdupq_n_s64(v249);
                  v253.i32[0] = *(_QWORD *)(v123 + 8);
                  v253.i32[1] = v249 >> 7;
                  *(int8x8_t *)&v475[0] = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v253, (int64x2_t)vshlq_u64(v252, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v252, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v252, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
                  v250 = (v249 & 0x7F00000000000000) >> 56;
                  v251 = 8;
                }
                else if ((v249 & 0xFE000000000000) != 0)
                {
                  v270 = (uint64x2_t)vdupq_n_s64(v249);
                  LOBYTE(v475[0]) = v249 | 0x80;
                  v271 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v270, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v270, (uint64x2_t)xmmword_1B8631B90));
                  v271.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v271) | 0x80008000800080;
                  *(_DWORD *)((char *)v475 + 1) = vmovn_s16(v271).u32[0];
                  BYTE5(v475[0]) = (v249 >> 35) | 0x80;
                  BYTE6(v475[0]) = (v249 >> 42) | 0x80;
                  v250 = (v249 & 0xFE000000000000) >> 49;
                  v251 = 7;
                }
                else
                {
                  LOBYTE(v475[0]) = v249 | 0x80;
                  v283 = (uint64x2_t)vdupq_n_s64(v249);
                  v284 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v283, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v283, (uint64x2_t)xmmword_1B8631B90));
                  v284.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v284) | 0x80008000800080;
                  *(_DWORD *)((char *)v475 + 1) = vmovn_s16(v284).u32[0];
                  if ((v249 & 0x1FC0000000000) != 0)
                  {
                    BYTE5(v475[0]) = (v249 >> 35) | 0x80;
                    v250 = (v249 & 0x1FC0000000000) >> 42;
                    v251 = 6;
                  }
                  else
                  {
                    v250 = (v249 >> 35) & 0x7F;
                    v251 = 5;
                  }
                }
              }
              else if ((v249 & 0x7F0000000) != 0)
              {
                LOBYTE(v475[0]) = v249 | 0x80;
                BYTE1(v475[0]) = (v249 >> 7) | 0x80;
                BYTE2(v475[0]) = (v249 >> 14) | 0x80;
                BYTE3(v475[0]) = (v249 >> 21) | 0x80;
                v250 = (v249 & 0x7F0000000) >> 28;
                v251 = 4;
              }
              else if ((v249 & 0xFE00000) != 0)
              {
                LOBYTE(v475[0]) = v249 | 0x80;
                BYTE1(v475[0]) = (v249 >> 7) | 0x80;
                BYTE2(v475[0]) = (v249 >> 14) | 0x80;
                v250 = (v249 & 0xFE00000) >> 21;
                v251 = 3;
              }
              else if ((v249 & 0x1FC000) != 0)
              {
                LOBYTE(v475[0]) = v249 | 0x80;
                BYTE1(v475[0]) = (v249 >> 7) | 0x80;
                v250 = (v249 & 0x1FC000) >> 14;
                v251 = 2;
              }
              else
              {
                v251 = v249 & 0x3F80;
                if (v251)
                {
                  LOBYTE(v475[0]) = v250 | 0x80;
                  v250 = v251 >> 7;
                  v251 = 1;
                }
              }
              v307 = v475;
              *(_BYTE *)((unint64_t)v475 | v251) = v250;
              v308 = v251 + 1;
              while (2)
              {
                while (2)
                {
                  v309 = *(_QWORD *)(v11 + 32);
                  v310 = *(_QWORD *)(v11 + 40);
                  if (v310 - v309 >= v308)
                    v311 = v308;
                  else
                    v311 = v310 - v309;
                  if (v311)
                  {
                    memcpy((void *)(*(_QWORD *)(v11 + 48) + v309), v307, v311);
                    v312 = *(_QWORD *)(v11 + 40);
                    v313 = *(_QWORD *)(v11 + 32) + v311;
                    *(_QWORD *)(v11 + 32) = v313;
                    v307 = (_OWORD *)((char *)v307 + v311);
                    if (v313 == v312)
                      break;
                    goto LABEL_435;
                  }
                  if (*(_QWORD *)(v11 + 32) != *(_QWORD *)(v11 + 40))
                  {
LABEL_435:
                    v308 -= v311;
                    if (!v308)
                      goto LABEL_445;
                    continue;
                  }
                  break;
                }
                PayloadPulsesWrite((int *)v11);
                if (!*(_DWORD *)(v11 + 60))
                {
                  v308 -= v311;
                  if (v308)
                    continue;
                }
                break;
              }
LABEL_445:
              if (*(_QWORD *)(v123 + 8))
              {
                v314 = *(char **)(v123 + 24);
                v315 = *(_QWORD *)(v123 + 8);
                while (1)
                {
                  while (1)
                  {
                    v316 = *(_QWORD *)(v11 + 32);
                    v317 = *(_QWORD *)(v11 + 40);
                    v318 = v317 - v316 >= v315 ? v315 : v317 - v316;
                    if (v318)
                      break;
                    if (*(_QWORD *)(v11 + 32) == *(_QWORD *)(v11 + 40))
                      goto LABEL_455;
LABEL_447:
                    v315 -= v318;
                    if (!v315)
                      goto LABEL_495;
                  }
                  memcpy((void *)(*(_QWORD *)(v11 + 48) + v316), v314, v318);
                  v319 = *(_QWORD *)(v11 + 40);
                  v320 = *(_QWORD *)(v11 + 32) + v318;
                  *(_QWORD *)(v11 + 32) = v320;
                  v314 += v318;
                  if (v320 != v319)
                    goto LABEL_447;
LABEL_455:
                  PayloadPulsesWrite((int *)v11);
                  if (!*(_DWORD *)(v11 + 60))
                  {
                    v315 -= v318;
                    if (v315)
                      continue;
                  }
                  break;
                }
              }
LABEL_495:
              v92 = v416;
              if (*(_DWORD *)(v11 + 60))
                goto LABEL_501;
              if (v425)
              {
                v136 = *(_DWORD *)(v123 + 32);
                if (v136)
                {
                  v110 = (unsigned int *)v123;
                  goto LABEL_505;
                }
                v342 = *(_QWORD *)(v123 + 8);
                if (v342 > 0x100000)
                  msync(*(void **)(v123 + 24), v342, 2);
                *(_QWORD *)(v123 + 8) = 0;
              }
              v137 = v414 + 1;
              if (v414 + 1 == v415)
                goto LABEL_501;
            }
            v219 = v150 - v156;
            memset(v475, 0, sizeof(v475));
            if (HIDWORD(v158))
            {
              if ((v158 & 0x8000000000000000) != 0)
              {
                v272 = (uint64x2_t)vdupq_n_s64(v158);
                v273.i32[0] = v150 - v156;
                v273.i32[1] = v158 >> 7;
                *(int8x8_t *)&v475[0] = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v273, (int64x2_t)vshlq_u64(v272, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v272, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v272, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
                BYTE8(v475[0]) = HIBYTE(v158) | 0x80;
                LOBYTE(v220) = 1;
                v221 = 9;
              }
              else if ((v158 & 0x7F00000000000000) != 0)
              {
                v262 = (uint64x2_t)vdupq_n_s64(v158);
                v263.i32[0] = v150 - v156;
                v263.i32[1] = v158 >> 7;
                *(int8x8_t *)&v475[0] = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v263, (int64x2_t)vshlq_u64(v262, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v262, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v262, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
                v220 = (v158 & 0x7F00000000000000) >> 56;
                v221 = 8;
              }
              else if ((v158 & 0xFE000000000000) != 0)
              {
                v278 = (uint64x2_t)vdupq_n_s64(v158);
                LOBYTE(v475[0]) = v158 | 0x80;
                v279 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v278, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v278, (uint64x2_t)xmmword_1B8631B90));
                v279.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v279) | 0x80008000800080;
                *(_DWORD *)((char *)v475 + 1) = vmovn_s16(v279).u32[0];
                BYTE5(v475[0]) = (v158 >> 35) | 0x80;
                BYTE6(v475[0]) = (v158 >> 42) | 0x80;
                v220 = (v158 & 0xFE000000000000) >> 49;
                v221 = 7;
              }
              else
              {
                LOBYTE(v475[0]) = v158 | 0x80;
                v303 = (uint64x2_t)vdupq_n_s64(v158);
                v304 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v303, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v303, (uint64x2_t)xmmword_1B8631B90));
                v304.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v304) | 0x80008000800080;
                *(_DWORD *)((char *)v475 + 1) = vmovn_s16(v304).u32[0];
                if ((v158 & 0x1FC0000000000) != 0)
                {
                  BYTE5(v475[0]) = (v158 >> 35) | 0x80;
                  v220 = (v158 & 0x1FC0000000000) >> 42;
                  v221 = 6;
                }
                else
                {
                  v220 = (v158 >> 35) & 0x7F;
                  v221 = 5;
                }
              }
            }
            else if ((v158 & 0x7F0000000) != 0)
            {
              LOBYTE(v475[0]) = v158 | 0x80;
              BYTE1(v475[0]) = (v158 >> 7) | 0x80;
              BYTE2(v475[0]) = (v158 >> 14) | 0x80;
              BYTE3(v475[0]) = (v158 >> 21) | 0x80;
              v220 = (v158 & 0x7F0000000) >> 28;
              v221 = 4;
            }
            else if ((v158 & 0xFE00000) != 0)
            {
              LOBYTE(v475[0]) = v158 | 0x80;
              BYTE1(v475[0]) = (v158 >> 7) | 0x80;
              BYTE2(v475[0]) = (v158 >> 14) | 0x80;
              v220 = (v158 & 0xFE00000) >> 21;
              v221 = 3;
            }
            else if ((v158 & 0x1FC000) != 0)
            {
              LOBYTE(v475[0]) = v158 | 0x80;
              BYTE1(v475[0]) = (v158 >> 7) | 0x80;
              v220 = (v158 & 0x1FC000) >> 14;
              v221 = 2;
            }
            else
            {
              LOBYTE(v220) = v150 - v156;
              v221 = v158 & 0x3F80;
              if (v221)
              {
                LOBYTE(v475[0]) = v219 | 0x80;
                v220 = v221 >> 7;
                v221 = 1;
              }
            }
            v335 = v475;
            *(_BYTE *)((unint64_t)v475 | v221) = v220;
            v336 = v221 + 1;
            while (1)
            {
              v337 = *(_QWORD *)(v11 + 32);
              v338 = *(_QWORD *)(v11 + 40);
              if (v338 - v337 >= v336)
                v339 = v336;
              else
                v339 = v338 - v337;
              if (v339)
              {
                memcpy((void *)(*(_QWORD *)(v11 + 48) + v337), v335, v339);
                v340 = *(_QWORD *)(v11 + 40);
                v341 = *(_QWORD *)(v11 + 32) + v339;
                *(_QWORD *)(v11 + 32) = v341;
                v335 = (_OWORD *)((char *)v335 + v339);
                if (v341 != v340)
                  goto LABEL_484;
              }
              else if (*(_QWORD *)(v11 + 32) != *(_QWORD *)(v11 + 40))
              {
LABEL_484:
                v336 -= v339;
                if (!v336)
                  goto LABEL_494;
                continue;
              }
              PayloadPulsesWrite((int *)v11);
              if (!*(_DWORD *)(v11 + 60))
              {
                v336 -= v339;
                if (v336)
                  continue;
              }
LABEL_494:
              PayloadPulsesWriteBytesFromScanner(v11, (uint64_t)v432, v157, v219);
              goto LABEL_495;
            }
          }
LABEL_501:
          if (v425)
          {
            v136 = *(_DWORD *)(v123 + 32);
            v110 = (unsigned int *)v123;
            v343 = v123;
            if (!v136)
            {
LABEL_508:
              v344 = *(void **)(v343 + 24);
              if (v344 != (void *)-1)
                munmap(v344, *(_QWORD *)v343);
              v345 = *(_DWORD *)(v343 + 16);
              v12 = v431;
              if (v345 != -1)
                close(v345);
              free((void *)v343);
              v40 = (unsigned int *)v92;
              v108 = v91;
              goto LABEL_513;
            }
LABEL_505:
            if (!*(_DWORD *)(v11 + 60))
              *(_DWORD *)(v11 + 60) = v136;
            v343 = (uint64_t)v110;
            goto LABEL_508;
          }
LABEL_82:
          v40 = (unsigned int *)v92;
          v108 = v91;
          v12 = v431;
LABEL_513:
          if (DWORD2(v437))
            v346 = 1;
          else
            v346 = *(_DWORD *)(v11 + 60) == 0;
          if (v346)
            v347 = DWORD2(v437);
          else
            v347 = *(_DWORD *)(v11 + 60);
          v438 = 0;
          if ((_QWORD)__src)
          {
            free((void *)__src);
            *(_QWORD *)&__src = 0;
          }
          PayloadPulsesWrite((int *)v11);
          v45 = (_QWORD *)(*(_QWORD *)(v11 + 24) + 32 * (*(_DWORD *)(v11 + 16) - 1));
          v45[1] = *(_QWORD *)(v11 + 8) - *v45;
          v45[2] = 0;
          v44 = v418 + 1;
          v13 = v108;
          v46 = v347;
          if (v347)
          {
LABEL_529:
            v34 = v46;
            CICleanUpReset(v422, v421);
            v356 = *(_QWORD *)&threadData[18 * v442 + 2];
            v357 = v441;
            v358 = v356 + 320 * v441;
            *(_DWORD *)(v358 + 312) = v423;
            v359 = *(void (**)(_QWORD))(v358 + 232);
            if (v359)
              v359(*(_QWORD *)(v356 + 320 * v357 + 288));
            dropThreadId(v442, 0, v430);
            goto LABEL_532;
          }
        }
        snprintf((char *)v475, 0x400uLL, "tmp.scratch.%d.%d", v111, v113);
        v115 = openat(v428, (const char *)v475, 536873474, 384);
        v110[4] = v115;
        if (v115 != -1)
        {
          unlinkat(v428, (const char *)v475, 0);
          goto LABEL_108;
        }
        v110[8] = *__error();
        v126 = *__error();
        v127 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
        {
          v348 = v110[8];
          v465 = 136316162;
          v466 = "scratch_file_create";
          v467 = 1024;
          v468 = 1875;
          v469 = 1024;
          v470 = v348;
          v471 = 1024;
          v472 = v428;
          v473 = 2080;
          v474 = v475;
          v349 = v127;
          v350 = "%s:%d: openat err:%d %d %s";
          v351 = &v465;
          v352 = 40;
          goto LABEL_522;
        }
        goto LABEL_107;
      }
      v401 = __si_assert_copy_extra_1644(0);
      v365 = v401;
      v402 = "";
      if (v401)
        v402 = v401;
      __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 914, "list->items", v402);
    }
    else
    {
      v399 = __si_assert_copy_extra_1644(0);
      v365 = v399;
      v400 = "";
      if (v399)
        v400 = v399;
      __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 911, "list", v400);
    }
LABEL_576:
    free(v365);
    if (__valid_fs(-1))
      v388 = 2989;
    else
      v388 = 3072;
    *(_DWORD *)v388 = -559038737;
    abort();
  }
  v26 = *__error();
  v27 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
  {
    LODWORD(v475[0]) = 136315394;
    *(_QWORD *)((char *)v475 + 4) = "PayloadPulsesReorder";
    WORD6(v475[0]) = 1024;
    *(_DWORD *)((char *)v475 + 14) = 1600;
    _os_log_error_impl(&dword_1B8270000, v27, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", (uint8_t *)v475, 0x12u);
  }
  *__error() = v26;
  *(_DWORD *)(v24 + 312) = v423;
  if (__THREAD_SLOT_KEY)
  {
    v28 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v28)
    {
LABEL_600:
      makeThreadId();
      v29 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_17;
    }
  }
  else
  {
    makeThreadId();
    v28 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v28)
      goto LABEL_600;
  }
  v29 = v28;
  if ((unint64_t)v28 >= 0x801)
    goto LABEL_600;
LABEL_17:
  v30 = (uint64_t)v29 - 1;
  v31 = &threadData[18 * ((uint64_t)v29 - 1)];
  v33 = v31[14];
  v32 = v31 + 14;
  if (v33 > v440)
  {
    do
      CIOnThreadCleanUpPop(v30);
    while (*v32 > v440);
  }
  dropThreadId(v442, 1, v430);
  CICleanUpReset(v442, HIDWORD(v440));
  v34 = -1;
LABEL_532:
  storageClose((uint64_t)v446);
  v360 = *((_DWORD *)v12 + 15);
  if (v34)
    v361 = 1;
  else
    v361 = v360 == 0;
  if (v361)
    v360 = v34;
  v362 = *(_DWORD *)(v11 + 60);
  if (v360)
    v363 = 1;
  else
    v363 = v362 == 0;
  if (v363)
    return v360;
  else
    return v362;
}

uint64_t PayloadScannerReadVInt32_v2(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD v9[2];

  memset(v9, 0, 5);
  v2 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v2 >= *(_QWORD *)(a1 + 64))
  {
    if (!_PayloadScannerReadNextChar(a1, v9))
      return 0;
    v3 = LOBYTE(v9[0]);
    if ((v9[0] & 0x80) == 0)
      goto LABEL_3;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v2 + 1;
    LOBYTE(v9[0]) = *v2;
    v3 = LOBYTE(v9[0]);
    if ((v9[0] & 0x80) == 0)
    {
LABEL_3:
      v4 = 0;
      v5 = *(_QWORD *)(a1 + 56);
      goto LABEL_14;
    }
  }
  v6 = 2;
  v7 = 3;
  if (v3 >= 0xF0)
    v7 = 4;
  if (v3 >= 0xE0)
    v6 = v7;
  if (v3 >= 0xC0)
    v4 = v6;
  else
    v4 = 1;
  v5 = *(_QWORD *)(a1 + 56);
  if ((*(_DWORD *)(a1 + 64) - v5) >= v4)
  {
LABEL_14:
    __memcpy_chk();
    *(_QWORD *)(a1 + 56) = v5 + v4;
    if ((v3 & 0x80) == 0)
      return v3;
    goto LABEL_15;
  }
  if (!_PayloadScannerReadBytes(a1, (_BYTE *)v9 + 1, v4))
    return 0;
  v3 = LOBYTE(v9[0]);
  if ((v9[0] & 0x80) == 0)
    return v3;
LABEL_15:
  if (v3 <= 0xBF)
    return BYTE1(v9[0]) | ((v3 & 0x3F) << 8);
  if (v3 <= 0xDF)
    return ((v3 & 0x1F) << 16) | (BYTE1(v9[0]) << 8) | BYTE2(v9[0]);
  if (v3 > 0xEF)
    return *(_DWORD *)((char *)v9 + 1);
  return ((v3 & 0xF) << 24) | (BYTE1(v9[0]) << 16) | (BYTE2(v9[0]) << 8) | HIBYTE(v9[0]);
}

int *PayloadPulsesWriteTermId(int *result, unsigned int a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  _OWORD *v11;
  size_t v12;
  uint64_t v13;
  size_t v14;
  _OWORD v15[2];
  uint64_t v16;

  v3 = result;
  v16 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 3);
  v5 = (result[4] - 1);
  v6 = v4 + 32 * v5;
  v8 = *(_DWORD *)(v6 + 16);
  v7 = (unsigned int *)(v6 + 16);
  if (v8)
  {
    v9 = a2 - *(_DWORD *)(v4 + 32 * v5 + 20);
  }
  else
  {
    *v7 = a2;
    v9 = a2;
  }
  memset(v15, 0, sizeof(v15));
  if (v9 > 0x7F)
  {
    if (v9 >> 14)
    {
      if (v9 >> 21)
      {
        if (v9 >> 28)
        {
          LOBYTE(v15[0]) = -16;
          *(_DWORD *)((char *)v15 + 1) = v9;
          v10 = 5;
        }
        else
        {
          LOBYTE(v15[0]) = HIBYTE(v9) | 0xE0;
          BYTE1(v15[0]) = BYTE2(v9);
          BYTE2(v15[0]) = BYTE1(v9);
          BYTE3(v15[0]) = v9;
          v10 = 4;
        }
      }
      else
      {
        LOBYTE(v15[0]) = BYTE2(v9) | 0xC0;
        BYTE1(v15[0]) = BYTE1(v9);
        BYTE2(v15[0]) = v9;
        v10 = 3;
      }
    }
    else
    {
      LOBYTE(v15[0]) = BYTE1(v9) | 0x80;
      BYTE1(v15[0]) = v9;
      v10 = 2;
    }
  }
  else
  {
    LOBYTE(v15[0]) = v9;
    v10 = 1;
  }
  v11 = v15;
  do
  {
    while (1)
    {
      v12 = *((_QWORD *)v3 + 4);
      v13 = *((_QWORD *)v3 + 5);
      v14 = v13 - v12 >= v10 ? v10 : v13 - v12;
      if (v14)
      {
        result = (int *)memcpy((void *)(*((_QWORD *)v3 + 6) + v12), v11, v14);
        v13 = *((_QWORD *)v3 + 5);
        v12 = *((_QWORD *)v3 + 4) + v14;
        *((_QWORD *)v3 + 4) = v12;
        v11 = (_OWORD *)((char *)v11 + v14);
      }
      if (v12 == v13)
        break;
      v10 -= v14;
      if (!v10)
        goto LABEL_23;
    }
    result = PayloadPulsesWrite(v3);
    if (v3[15])
      break;
    v10 -= v14;
  }
  while (v10);
LABEL_23:
  *(_DWORD *)(v4 + 32 * v5 + 20) = a2;
  return result;
}

uint64_t PayloadScannerFirstPostingIfLink(_QWORD *a1, uint64_t a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t VInt64;
  unint64_t v9;
  int v10;
  unsigned int VInt32;
  uint64_t v12;
  uint64_t v14;
  char *v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  const char *v21;

  VInt64 = PayloadScannerReadVInt64((uint64_t)a1);
  if ((VInt64 & 1) != 0)
  {
    VInt32 = PayloadScannerReadVInt32((uint64_t)a1);
    if (a1[3] + (unint64_t)VInt32 + a1[7] - a1[6] > a1[4])
    {
      v15 = __si_assert_copy_extra_1644(0);
      v16 = v15;
      v17 = "";
      if (v15)
        v17 = v15;
      __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 757, "PayloadScannerPosition(s) + remaining <= s->end", v17);
      free(v16);
      if (__valid_fs(-1))
        v18 = 2989;
      else
        v18 = 3072;
      *(_DWORD *)v18 = -559038737;
      abort();
    }
    goto LABEL_6;
  }
  v9 = PayloadScannerReadVInt64((uint64_t)a1);
  *(_DWORD *)a2 = 1;
  *(_QWORD *)(a2 + 4) = v9 >> 1;
  if ((v9 & 1) != 0 || (v10 = PayloadScannerReadVInt32((uint64_t)a1), (*(_DWORD *)a2 = v10) != 0))
  {
    VInt32 = 0;
LABEL_6:
    v12 = 0;
    goto LABEL_7;
  }
  v14 = PayloadScannerReadVInt32((uint64_t)a1);
  if (v14 >= 3)
  {
    v19 = __si_assert_copy_extra_1644(0);
    v20 = v19;
    v21 = "";
    if (v19)
      v21 = v19;
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 767, "_type >= 0 && _type <= 2", v21);
    free(v20);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v12 = v14;
  VInt32 = 0;
LABEL_7:
  *a3 = VInt32;
  *a4 = VInt64;
  return v12;
}

uint64_t packPostingChunkForSingleDocIDOfType(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64x2_t v8;
  int32x2_t v9;
  uint64x2_t v11;
  int32x2_t v12;
  uint64x2_t v13;
  int16x8_t v14;
  uint64x2_t v15;
  int16x8_t v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  _BYTE *v22;

  if (a3)
  {
    if (HIDWORD(a2))
    {
      if ((a2 & 0x8000000000000000) != 0)
      {
        v11 = (uint64x2_t)vdupq_n_s64(a2);
        v12.i32[0] = a2;
        v12.i32[1] = a2 >> 7;
        *(int8x8_t *)a1 = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v12, (int64x2_t)vshlq_u64(v11, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v11, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v11, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
        *(_BYTE *)(a1 + 8) = HIBYTE(a2) | 0x80;
        LOBYTE(v5) = 1;
        v6 = 9;
      }
      else if ((a2 & 0x7F00000000000000) != 0)
      {
        v8 = (uint64x2_t)vdupq_n_s64(a2);
        v9.i32[0] = a2;
        v9.i32[1] = a2 >> 7;
        *(int8x8_t *)a1 = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v9, (int64x2_t)vshlq_u64(v8, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v8, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
        v5 = (a2 & 0x7F00000000000000) >> 56;
        v6 = 8;
      }
      else if ((a2 & 0xFE000000000000) != 0)
      {
        *(_BYTE *)a1 = a2 | 0x80;
        v13 = (uint64x2_t)vdupq_n_s64(a2);
        v14 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_1B8631B90));
        v14.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v14) | 0x80008000800080;
        *(_DWORD *)(a1 + 1) = vmovn_s16(v14).u32[0];
        *(_BYTE *)(a1 + 5) = (a2 >> 35) | 0x80;
        *(_BYTE *)(a1 + 6) = (a2 >> 42) | 0x80;
        v5 = (a2 & 0xFE000000000000) >> 49;
        v6 = 7;
      }
      else
      {
        *(_BYTE *)a1 = a2 | 0x80;
        v15 = (uint64x2_t)vdupq_n_s64(a2);
        v16 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_1B8631B90));
        v16.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v16) | 0x80008000800080;
        *(_DWORD *)(a1 + 1) = vmovn_s16(v16).u32[0];
        if ((a2 & 0x1FC0000000000) != 0)
        {
          *(_BYTE *)(a1 + 5) = (a2 >> 35) | 0x80;
          v5 = (a2 & 0x1FC0000000000) >> 42;
          v6 = 6;
        }
        else
        {
          v5 = (a2 >> 35) & 0x7F;
          v6 = 5;
        }
      }
    }
    else if ((a2 & 0x7F0000000) != 0)
    {
      *(_BYTE *)a1 = a2 | 0x80;
      *(_BYTE *)(a1 + 1) = (a2 >> 7) | 0x80;
      *(_BYTE *)(a1 + 2) = (a2 >> 14) | 0x80;
      *(_BYTE *)(a1 + 3) = (a2 >> 21) | 0x80;
      v5 = (a2 & 0x7F0000000) >> 28;
      v6 = 4;
    }
    else if ((a2 & 0xFE00000) != 0)
    {
      *(_BYTE *)a1 = a2 | 0x80;
      *(_BYTE *)(a1 + 1) = (a2 >> 7) | 0x80;
      *(_BYTE *)(a1 + 2) = (a2 >> 14) | 0x80;
      v5 = (a2 & 0xFE00000) >> 21;
      v6 = 3;
    }
    else if ((a2 & 0x1FC000) != 0)
    {
      *(_BYTE *)a1 = a2 | 0x80;
      *(_BYTE *)(a1 + 1) = (a2 >> 7) | 0x80;
      v5 = (a2 & 0x1FC000) >> 14;
      v6 = 2;
    }
    else
    {
      v6 = a2 & 0x3F80;
      if ((a2 & 0x3F80) != 0)
      {
        *(_BYTE *)a1 = a2 | 0x80;
        v5 = v6 >> 7;
        v6 = 1;
      }
      else
      {
        LOBYTE(v5) = a2;
      }
    }
    *(_BYTE *)(a1 + v6) = v5;
    v17 = writeVInt64(a1, v6 + 1, a2);
    v18 = a3 >> 28;
    if (a3 >> 28)
    {
      v20 = (_BYTE *)(a1 + v17);
      *v20 = a3 | 0x80;
      v20[1] = (a3 >> 7) | 0x80;
      v20[2] = (a3 >> 14) | 0x80;
      v17 += 4;
      v20[3] = (a3 >> 21) | 0x80;
    }
    else if ((a3 & 0xFE00000) != 0)
    {
      v19 = (_BYTE *)(a1 + v17);
      *v19 = a3 | 0x80;
      v19[1] = (a3 >> 7) | 0x80;
      v17 += 3;
      v19[2] = (a3 >> 14) | 0x80;
      v18 = (a3 & 0xFE00000) >> 21;
    }
    else if ((a3 & 0x1FC000) != 0)
    {
      v22 = (_BYTE *)(a1 + v17);
      *v22 = a3 | 0x80;
      v17 += 2;
      v22[1] = (a3 >> 7) | 0x80;
      v18 = (a3 & 0x1FC000) >> 14;
    }
    else if ((a3 & 0x3F80) != 0)
    {
      *(_BYTE *)(a1 + v17++) = a3 | 0x80;
      v18 = (unsigned __int16)(a3 & 0x3F80) >> 7;
    }
    else
    {
      LOBYTE(v18) = a3;
    }
    v21 = (_BYTE *)(a1 + v17);
    *v21 = v18;
    v21[1] = 0;
    return v17 + 2;
  }
  else
  {
    if (a2 >> 28)
    {
      *(_BYTE *)a1 = a2 | 0x80;
      *(_BYTE *)(a1 + 1) = (a2 >> 7) | 0x80;
      *(_BYTE *)(a1 + 2) = (a2 >> 14) | 0x80;
      *(_BYTE *)(a1 + 3) = (a2 >> 21) | 0x80;
      *(_BYTE *)(a1 + 4) = a2 >> 28;
      v7 = 5;
    }
    else if ((a2 & 0xFE00000) != 0)
    {
      *(_BYTE *)a1 = a2 | 0x80;
      *(_BYTE *)(a1 + 1) = (a2 >> 7) | 0x80;
      *(_BYTE *)(a1 + 2) = (a2 >> 14) | 0x80;
      *(_BYTE *)(a1 + 3) = (a2 & 0xFE00000) >> 21;
      v7 = 4;
    }
    else if ((a2 & 0x1FC000) != 0)
    {
      *(_BYTE *)a1 = a2 | 0x80;
      *(_BYTE *)(a1 + 1) = (a2 >> 7) | 0x80;
      *(_BYTE *)(a1 + 2) = (a2 & 0x1FC000) >> 14;
      v7 = 3;
    }
    else if ((a2 & 0x3F80) != 0)
    {
      *(_BYTE *)a1 = a2 | 0x80;
      *(_BYTE *)(a1 + 1) = (unsigned __int16)(a2 & 0x3F80) >> 7;
      v7 = 2;
    }
    else
    {
      *(_BYTE *)a1 = a2;
      v7 = 1;
    }
    *(_BYTE *)(a1 + v7) = 0;
    return v7 + 1;
  }
}

uint64_t PayloadPulsesWriteBytesFromScanner(uint64_t result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  const void *v14;
  char *v15;
  char *v16;
  const char *v17;
  char *v18;
  char *v19;
  const char *v20;
  uint64_t v21;

  v4 = a4;
  v6 = result;
  v7 = *(_QWORD *)(a2 + 24);
  if (a3 < v7)
  {
    v8 = *(_QWORD *)(a2 + 48);
LABEL_4:
    *(_QWORD *)(a2 + 56) = v8;
    *(_QWORD *)(a2 + 64) = v8;
    v9 = v8;
    v7 = a3;
    *(_QWORD *)(a2 + 24) = a3;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a2 + 48);
  if (v7 + *(_QWORD *)(a2 + 64) - v8 < a3)
    goto LABEL_4;
  v9 = v8 + a3 - v7;
  *(_QWORD *)(a2 + 56) = v9;
LABEL_6:
  if (v7 + v9 - v8 != a3)
  {
    v18 = __si_assert_copy_extra_1644(0);
    v19 = v18;
    v20 = "";
    if (v18)
      v20 = v18;
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 100, "PayloadScannerPosition(scanner) == position", v20);
    free(v19);
    if (__valid_fs(-1))
      v21 = 2989;
    else
      v21 = 3072;
    *(_DWORD *)v21 = -559038737;
    abort();
  }
  if (a4)
  {
    while (!*(_DWORD *)(v6 + 60))
    {
      v10 = *(_QWORD *)(v6 + 32);
      v11 = *(_QWORD *)(v6 + 40);
      if (v11 - v10 >= v4)
        v12 = v4;
      else
        v12 = v11 - v10;
      if (v12)
      {
        v13 = (_BYTE *)(*(_QWORD *)(v6 + 48) + v10);
        v14 = *(const void **)(a2 + 56);
        if ((*(_DWORD *)(a2 + 64) - (_DWORD)v14) < v12)
        {
          result = _PayloadScannerReadBytes(a2, v13, v12);
          if ((result & 1) == 0)
          {
            if (!*(_DWORD *)(a2 + 72))
            {
              v15 = __si_assert_copy_extra_1644(*(_DWORD **)(a2 + 16));
              v16 = v15;
              v17 = "";
              if (v15)
                v17 = v15;
              __message_assert("%s:%u: failed assertion '%s' %s offset: %lld end: %lld", "CIPayloadCompact.c", 493, "false", v17, *(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 32));
              free(v16);
              if (__valid_fsp(*(_DWORD **)(a2 + 16)))
              {
                MEMORY[0xBAD] = -559038737;
                abort();
              }
              MEMORY[0xC00] = -559038737;
              abort();
            }
            return result;
          }
        }
        else
        {
          result = (uint64_t)memcpy(v13, v14, v12);
          *(_QWORD *)(a2 + 56) += v12;
        }
        v11 = *(_QWORD *)(v6 + 40);
        v10 = *(_QWORD *)(v6 + 32) + v12;
        *(_QWORD *)(v6 + 32) = v10;
      }
      if (v10 == v11)
        result = (uint64_t)PayloadPulsesWrite((int *)v6);
      v4 -= v12;
      if (!v4)
        return result;
    }
  }
  return result;
}

unint64_t PayloadScannerReadVInt64_v2(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v13 = 0;
  v2 = *(unsigned __int8 **)(a1 + 56);
  if ((unint64_t)v2 >= *(_QWORD *)(a1 + 64))
  {
    if (!_PayloadScannerReadNextChar(a1, &v13))
      return 0;
    v3 = v13;
    if ((v13 & 0x80) == 0)
      goto LABEL_3;
LABEL_6:
    if (v3 >= 0xC0)
    {
      v6 = 3;
      v7 = 4;
      v8 = 5;
      v9 = 6;
      v10 = 7;
      if (v3 == 255)
        v10 = 8;
      if (v3 >= 0xFE)
        v9 = v10;
      if (v3 >= 0xFC)
        v8 = v9;
      if (v3 >= 0xF8)
        v7 = v8;
      if (v3 >= 0xF0)
        v6 = v7;
      if (v3 >= 0xE0)
        v4 = v6;
      else
        v4 = 2;
    }
    else
    {
      v4 = 1;
    }
    v5 = *(_QWORD *)(a1 + 56);
    if ((*(_DWORD *)(a1 + 64) - v5) >= v4)
      goto LABEL_22;
    if (_PayloadScannerReadBytes(a1, (_BYTE *)&v13 + 1, v4))
      goto LABEL_23;
    return 0;
  }
  *(_QWORD *)(a1 + 56) = v2 + 1;
  v3 = *v2;
  LOBYTE(v13) = v3;
  if ((v3 & 0x80) != 0)
    goto LABEL_6;
LABEL_3:
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 56);
LABEL_22:
  __memcpy_chk();
  *(_QWORD *)(a1 + 56) = v5 + v4;
LABEL_23:
  v12 = 0;
  return v2_readVInt64_1804((uint64_t)&v13, &v12);
}

uint64_t PayloadScannerSkipPositionsData(uint64_t result)
{
  _QWORD *v1;
  unsigned __int8 *v2;
  unsigned int v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  const char *v15;
  unsigned __int8 v16;

  v1 = (_QWORD *)result;
  v16 = 0;
  while (1)
  {
    v2 = (unsigned __int8 *)v1[7];
    if ((unint64_t)v2 < v1[8])
      break;
    result = _PayloadScannerReadNextChar((uint64_t)v1, &v16);
    if (!(_DWORD)result)
      return result;
    v3 = v16;
    if (!v16)
      goto LABEL_4;
LABEL_6:
    if ((v3 & 0x80) != 0)
    {
      if (v3 >= 0xC0)
      {
        if (v3 >= 0xE0)
        {
          if (v3 >= 0xF0)
          {
            if (v3 >= 0xF8)
            {
              if (v3 == 255)
                v5 = 8;
              else
                v5 = 7;
              if (v3 < 0xFE)
                v5 = 6;
              if (v3 < 0xFC)
                v5 = 5;
            }
            else
            {
              v5 = 4;
            }
          }
          else
          {
            v5 = 3;
          }
        }
        else
        {
          v5 = 2;
        }
      }
      else
      {
        v5 = 1;
      }
      v7 = v1[7];
      v6 = v1[8];
      if (v6 < v7 + v5)
      {
        v8 = v1[3];
        v9 = v1[6];
        v10 = v5 + v7 + v8 - v9;
        v11 = v10 - v8;
        if (v10 >= v8 && v8 + v6 - v9 >= v10)
        {
          v12 = v9 + v11;
          v1[7] = v9 + v11;
        }
        else
        {
          v1[7] = v9;
          v1[8] = v9;
          v12 = v9;
          v8 = v10;
          v1[3] = v10;
        }
        if (v8 - v9 + v12 != v10)
        {
          v13 = __si_assert_copy_extra_1644(0);
          v14 = v13;
          v15 = "";
          if (v13)
            v15 = v13;
          __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 100, "PayloadScannerPosition(scanner) == position", v15);
          free(v14);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
      }
      else
      {
        v1[7] = v7 + v5;
      }
    }
  }
  v1[7] = v2 + 1;
  v3 = *v2;
  v16 = v3;
  if (v3)
    goto LABEL_6;
LABEL_4:
  v4 = (unsigned __int8 *)v1[7];
  if ((unint64_t)v4 < v1[8])
  {
    v1[7] = v4 + 1;
    v3 = *v4;
    v16 = v3;
    if (!v3)
      return result;
    goto LABEL_6;
  }
  result = _PayloadScannerReadNextChar((uint64_t)v1, &v16);
  if ((_DWORD)result)
  {
    v3 = v16;
    if (v16)
      goto LABEL_6;
  }
  return result;
}

uint64_t PayloadScannerReadVInt64(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  char *v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v21 = 0;
  v2 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v2 >= *(_QWORD *)(a1 + 64))
  {
    if (!_PayloadScannerReadNextChar(a1, &v21))
    {
      v15 = 0;
      goto LABEL_65;
    }
    if ((v21 & 0x80) == 0)
      goto LABEL_66;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v2 + 1;
    LOBYTE(v21) = *v2;
    if ((v21 & 0x80) == 0)
      goto LABEL_66;
  }
  v3 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 64))
  {
    if (!_PayloadScannerReadNextChar(a1, (_BYTE *)&v21 + 1))
    {
      v15 = 1;
      goto LABEL_65;
    }
    if ((v21 & 0x8000) == 0)
      goto LABEL_66;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v3 + 1;
    BYTE1(v21) = *v3;
    if ((v21 & 0x8000) == 0)
      goto LABEL_66;
  }
  v4 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v4 >= *(_QWORD *)(a1 + 64))
  {
    if (!_PayloadScannerReadNextChar(a1, (_BYTE *)&v21 + 2))
    {
      v15 = 2;
      goto LABEL_65;
    }
    if ((v21 & 0x800000) == 0)
      goto LABEL_66;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v4 + 1;
    BYTE2(v21) = *v4;
    if ((v21 & 0x800000) == 0)
      goto LABEL_66;
  }
  v5 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 64))
  {
    if (!_PayloadScannerReadNextChar(a1, (_BYTE *)&v21 + 3))
    {
      v15 = 3;
      goto LABEL_65;
    }
    if ((v21 & 0x80000000) == 0)
      goto LABEL_66;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v5 + 1;
    BYTE3(v21) = *v5;
    if ((v21 & 0x80000000) == 0)
      goto LABEL_66;
  }
  v6 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 64))
  {
    if (!_PayloadScannerReadNextChar(a1, (_BYTE *)&v21 + 4))
    {
      v15 = 4;
      goto LABEL_65;
    }
    if ((v21 & 0x8000000000) == 0)
      goto LABEL_66;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v6 + 1;
    BYTE4(v21) = *v6;
    if ((v21 & 0x8000000000) == 0)
      goto LABEL_66;
  }
  v7 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v7 >= *(_QWORD *)(a1 + 64))
  {
    if (!_PayloadScannerReadNextChar(a1, (_BYTE *)&v21 + 5))
    {
      v15 = 5;
      goto LABEL_65;
    }
    if ((v21 & 0x800000000000) == 0)
      goto LABEL_66;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v7 + 1;
    BYTE5(v21) = *v7;
    if ((v21 & 0x800000000000) == 0)
      goto LABEL_66;
  }
  v8 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v8 >= *(_QWORD *)(a1 + 64))
  {
    if (!_PayloadScannerReadNextChar(a1, (_BYTE *)&v21 + 6))
    {
      v15 = 6;
      goto LABEL_65;
    }
    if ((v21 & 0x80000000000000) == 0)
      goto LABEL_66;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v8 + 1;
    BYTE6(v21) = *v8;
    if ((v21 & 0x80000000000000) == 0)
      goto LABEL_66;
  }
  v9 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v9 >= *(_QWORD *)(a1 + 64))
  {
    if (!_PayloadScannerReadNextChar(a1, (_BYTE *)&v21 + 7))
    {
      v15 = 7;
      goto LABEL_65;
    }
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_66;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v9 + 1;
    HIBYTE(v21) = *v9;
    if ((v21 & 0x8000000000000000) == 0)
      goto LABEL_66;
  }
  v10 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v10 >= *(_QWORD *)(a1 + 64))
  {
    if (_PayloadScannerReadNextChar(a1, &v22))
    {
      if ((v22 & 0x80) == 0)
        goto LABEL_66;
      goto LABEL_19;
    }
    v15 = 8;
LABEL_65:
    *((_BYTE *)&v21 + v15) = 0;
    goto LABEL_66;
  }
  *(_QWORD *)(a1 + 56) = v10 + 1;
  LOBYTE(v22) = *v10;
  if ((v22 & 0x80) == 0)
    goto LABEL_66;
LABEL_19:
  v11 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v11 < *(_QWORD *)(a1 + 64))
  {
    *(_QWORD *)(a1 + 56) = v11 + 1;
    HIBYTE(v22) = *v11;
    if (v22 < 0)
      goto LABEL_21;
    goto LABEL_66;
  }
  if (!_PayloadScannerReadNextChar(a1, (_BYTE *)&v22 + 1))
  {
    v15 = 9;
    goto LABEL_65;
  }
  if (v22 < 0)
  {
LABEL_21:
    v12 = __si_assert_copy_extra_1644(0);
    v13 = v12;
    v14 = "";
    if (v12)
      v14 = v12;
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 329, "i < 10", v14);
    free(v13);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_66:
  v16 = 0;
  result = 0;
  v18 = (char *)&v21;
  do
  {
    v19 = *v18++;
    result |= (unint64_t)(v19 & 0x7F) << v16;
    if ((v19 & 0x80) == 0)
      break;
    v20 = v16 == 63;
    v16 += 7;
  }
  while (!v20);
  return result;
}

uint64_t PayloadPulsesAppend(_QWORD *a1, uint64_t a2, int a3, char a4, char a5)
{
  char VInt64;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unsigned int VInt32;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  const char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  const char *v45;
  char v46;
  char v47;
  char v48;

  if (a3 == 1)
  {
    VInt64 = PayloadScannerReadVInt64((uint64_t)a1);
    v8 = a1[7] - a1[6] + a1[3];
    if ((VInt64 & 1) != 0)
    {
      VInt32 = PayloadScannerReadVInt32((uint64_t)a1);
      if (a1[3] + (unint64_t)VInt32 + a1[7] - a1[6] > a1[4])
      {
        v39 = __si_assert_copy_extra_1644(0);
        v40 = v39;
        v41 = "";
        if (v39)
          v41 = v39;
        __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 786, "PayloadScannerPosition(s) + docInfoLength <= s->end", v41);
        free(v40);
        if (__valid_fs(-1))
          v42 = 2989;
        else
          v42 = 3072;
        *(_DWORD *)v42 = -559038737;
        abort();
      }
      v21 = 5;
      if ((VInt32 & 0x3F80) != 0)
        v22 = 2;
      else
        v22 = 1;
      if ((VInt32 & 0x1FC000) != 0)
        v22 = 3;
      if ((VInt32 & 0xFE00000) != 0)
        v22 = 4;
      if (!(VInt32 >> 28))
        v21 = v22;
      v9 = v21 + VInt32;
      v48 = 1;
      v23 = &v48;
      do
      {
        v26 = *(_QWORD *)(a2 + 32);
        v25 = *(_QWORD *)(a2 + 40);
        if (v25 != v26)
        {
          v27 = *v23++;
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v26) = v27;
          v28 = *(_QWORD *)(a2 + 40);
          v29 = *(_QWORD *)(a2 + 32) + 1;
          *(_QWORD *)(a2 + 32) = v29;
          if (v29 != v28)
            break;
        }
        PayloadPulsesWrite((int *)a2);
      }
      while (!*(_DWORD *)(a2 + 60) && v25 == v26);
    }
    else
    {
      if ((PayloadScannerReadVInt64((uint64_t)a1) & 1) == 0
        && !PayloadScannerReadVInt32((uint64_t)a1)
        && PayloadScannerReadVInt32((uint64_t)a1) >= 3)
      {
        v43 = __si_assert_copy_extra_1644(0);
        v44 = v43;
        v45 = "";
        if (v43)
          v45 = v43;
        __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 801, "_type >= 0 && _type <= 2", v45);
        free(v44);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v9 = a1[3] + a1[7] - a1[6] - v8;
      v47 = 0;
      v10 = &v47;
      do
      {
        v13 = *(_QWORD *)(a2 + 32);
        v12 = *(_QWORD *)(a2 + 40);
        if (v12 != v13)
        {
          v14 = *v10++;
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v13) = v14;
          v15 = *(_QWORD *)(a2 + 40);
          v16 = *(_QWORD *)(a2 + 32) + 1;
          *(_QWORD *)(a2 + 32) = v16;
          if (v16 != v15)
            break;
        }
        PayloadPulsesWrite((int *)a2);
      }
      while (!*(_DWORD *)(a2 + 60) && v12 == v13);
    }
    return PayloadPulsesWriteBytesFromScanner(a2, (uint64_t)a1, v8, v9);
  }
  v46 = 0;
  if ((a5 & 1) == 0)
  {
    if ((PayloadScannerReadVInt64_v2((uint64_t)a1) & 1) != 0)
      PayloadScannerReadVInt64_v2((uint64_t)a1);
    v8 = a1[7] - a1[6] + a1[3];
    PayloadScannerSkipPositionsData((uint64_t)a1);
    v9 = a1[3] + a1[7] - a1[6] - v8;
    if ((a4 & 1) == 0)
    {
      v30 = &v46;
      do
      {
        v33 = *(_QWORD *)(a2 + 32);
        v32 = *(_QWORD *)(a2 + 40);
        if (v32 != v33)
        {
          v34 = *v30++;
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v33) = v34;
          v35 = *(_QWORD *)(a2 + 40);
          v36 = *(_QWORD *)(a2 + 32) + 1;
          *(_QWORD *)(a2 + 32) = v36;
          if (v36 != v35)
            break;
        }
        PayloadPulsesWrite((int *)a2);
      }
      while (!*(_DWORD *)(a2 + 60) && v32 == v33);
    }
    return PayloadPulsesWriteBytesFromScanner(a2, (uint64_t)a1, v8, v9);
  }
  if ((a4 & 1) != 0)
  {
    v18 = PayloadScannerReadVInt64((uint64_t)a1);
    return PayloadPulsesWriteBytesFromScanner(a2, (uint64_t)a1, a1[3] + a1[7] - a1[6], v18);
  }
  else
  {
    v37 = a1[7] - a1[6] + a1[3];
    v38 = PayloadScannerReadVInt64((uint64_t)a1)
        + *((_DWORD *)a1 + 6)
        + *((_DWORD *)a1 + 14)
        - *((_DWORD *)a1 + 12)
        - (int)v37;
    return PayloadPulsesWriteBytesFromScanner(a2, (uint64_t)a1, v37, v38);
  }
}

uint64_t PayloadScannerReadVInt32(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  int v10;
  _BYTE v11[4];

  v11[0] = 0;
  v10 = 0;
  v2 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v2 >= *(_QWORD *)(a1 + 64))
  {
    if (!_PayloadScannerReadNextChar(a1, &v10))
    {
      v8 = 0;
LABEL_45:
      v11[v8 - 4] = 0;
      goto LABEL_11;
    }
    if ((v10 & 0x80) == 0)
      goto LABEL_11;
  }
  else
  {
    *(_QWORD *)(a1 + 56) = v2 + 1;
    LOBYTE(v10) = *v2;
    if ((v10 & 0x80) == 0)
      goto LABEL_11;
  }
  v3 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v3 < *(_QWORD *)(a1 + 64))
  {
    *(_QWORD *)(a1 + 56) = v3 + 1;
    BYTE1(v10) = *v3;
    if ((v10 & 0x8000) == 0)
      goto LABEL_11;
    goto LABEL_5;
  }
  if (!_PayloadScannerReadNextChar(a1, (_BYTE *)&v10 + 1))
  {
    v8 = 1;
    goto LABEL_45;
  }
  if ((v10 & 0x8000) == 0)
    goto LABEL_11;
LABEL_5:
  v4 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v4 < *(_QWORD *)(a1 + 64))
  {
    *(_QWORD *)(a1 + 56) = v4 + 1;
    BYTE2(v10) = *v4;
    if ((v10 & 0x800000) == 0)
      goto LABEL_11;
    goto LABEL_7;
  }
  if (!_PayloadScannerReadNextChar(a1, (_BYTE *)&v10 + 2))
  {
    v8 = 2;
    goto LABEL_45;
  }
  if ((v10 & 0x800000) == 0)
    goto LABEL_11;
LABEL_7:
  v5 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v5 < *(_QWORD *)(a1 + 64))
  {
    *(_QWORD *)(a1 + 56) = v5 + 1;
    HIBYTE(v10) = *v5;
    if ((v10 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_9;
  }
  if (!_PayloadScannerReadNextChar(a1, (_BYTE *)&v10 + 3))
  {
    v8 = 3;
    goto LABEL_45;
  }
  if ((v10 & 0x80000000) == 0)
    goto LABEL_11;
LABEL_9:
  v6 = *(_BYTE **)(a1 + 56);
  if ((unint64_t)v6 < *(_QWORD *)(a1 + 64))
  {
    *(_QWORD *)(a1 + 56) = v6 + 1;
    v11[0] = *v6;
    if ((v11[0] & 0x80) == 0)
      goto LABEL_11;
LABEL_42:
    v9 = __si_assert_copy_extra_1644(0);
    __message_assert("%s:%u: failed assertion '%s' %s ");
LABEL_38:
    free(v9);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (!_PayloadScannerReadNextChar(a1, v11))
  {
    v8 = 4;
    goto LABEL_45;
  }
  if ((v11[0] & 0x80) != 0)
    goto LABEL_42;
LABEL_11:
  result = v10;
  if (((char)v10 & 0x80000000) == 0)
    return result;
  if ((SBYTE1(v10) & 0x80000000) == 0)
    return v10 & 0x7F | (BYTE1(v10) << 7);
  if ((SBYTE2(v10) & 0x80000000) == 0)
    return ((BYTE1(v10) & 0x7F) << 7) | (BYTE2(v10) << 14) | v10 & 0x7Fu;
  if ((SHIBYTE(v10) & 0x80000000) == 0)
    return ((BYTE2(v10) & 0x7F) << 14) | (HIBYTE(v10) << 21) | ((BYTE1(v10) & 0x7F) << 7) | v10 & 0x7Fu;
  if ((v11[0] & 0x80000000) != 0)
  {
    v9 = __si_assert_copy_extra_1644(0);
    __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
    goto LABEL_38;
  }
  return ((HIBYTE(v10) & 0x7F) << 21) | (v11[0] << 28) | ((BYTE2(v10) & 0x7F) << 14) | ((BYTE1(v10) & 0x7F) << 7) | v10 & 0x7Fu;
}

uint64_t _PayloadScannerReadBytes(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t result;

  do
  {
    v6 = *(_BYTE **)(a1 + 56);
    if ((unint64_t)v6 >= *(_QWORD *)(a1 + 64))
    {
      result = _PayloadScannerReadNextChar(a1, a2);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v6 + 1;
      *a2 = *v6;
    }
    ++a2;
    --a3;
  }
  while (a3);
  return 1;
}

void PayloadReorderInfoFree(void **a1)
{
  if (a1)
    free(*a1);
}

void PositionRunInfoListFree(void **a1)
{
  if (a1)
  {
    free(*a1);
    free(a1);
  }
}

void PayloadReorderInfoDestroyScanner(uint64_t *a1)
{
  uint64_t v1;
  void *v2;

  if (a1)
  {
    v1 = *a1;
    if (*a1)
    {
      v2 = *(void **)(v1 + 48);
      if (v2)
      {
        free(v2);
        *(_QWORD *)(v1 + 48) = 0;
      }
    }
  }
}

uint64_t PayloadReorderInfoCompare(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

uint64_t scratch_file_grow(uint64_t a1, uint64_t a2)
{
  size_t v2;
  size_t v3;
  uint64_t result;
  void *v6;
  void *v8;
  int v9;
  NSObject *v10;
  int v11;
  const char *v12;
  int v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8) + a2;
  if (*(_QWORD *)a1 >= v3)
    return 1;
  if (*(_DWORD *)(a1 + 32))
    return 0;
  v6 = *(void **)(a1 + 24);
  if (v6 != (void *)-1)
  {
    munmap(v6, v2);
    v2 = *(_QWORD *)a1;
    v3 = *(_QWORD *)(a1 + 8) + a2;
  }
  *(_QWORD *)(a1 + 24) = -1;
  do
    v2 *= 2;
  while (v2 < v3);
  if (_fd_ftruncate(*(unsigned int *)(a1 + 16), v2) == -1)
  {
    *(_DWORD *)(a1 + 32) = *__error();
    v9 = *__error();
    v10 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
LABEL_15:
      *__error() = v9;
      close(*(_DWORD *)(a1 + 16));
      v2 = 0;
      result = 0;
      *(_DWORD *)(a1 + 16) = -1;
      goto LABEL_16;
    }
    v11 = *(_DWORD *)(a1 + 32);
    v14 = 136315906;
    v15 = "scratch_file_grow";
    v16 = 1024;
    v17 = 1946;
    v18 = 1024;
    v19 = v11;
    v20 = 1024;
    v21 = v2;
    v12 = "%s:%d: ftruncate err:%d size:%d";
LABEL_19:
    _os_log_error_impl(&dword_1B8270000, v10, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v14, 0x1Eu);
    goto LABEL_15;
  }
  v8 = mmap(0, v2, 3, 1025, *(_DWORD *)(a1 + 16), 0);
  *(_QWORD *)(a1 + 24) = v8;
  if (v8 == (void *)-1)
  {
    *(_DWORD *)(a1 + 32) = *__error();
    v9 = *__error();
    v10 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      goto LABEL_15;
    v13 = *(_DWORD *)(a1 + 32);
    v14 = 136315906;
    v15 = "scratch_file_grow";
    v16 = 1024;
    v17 = 1955;
    v18 = 1024;
    v19 = v13;
    v20 = 1024;
    v21 = v2;
    v12 = "%s:%d: mmap err:%d size:%d";
    goto LABEL_19;
  }
  result = 1;
LABEL_16:
  *(_QWORD *)a1 = v2;
  return result;
}

char *PositionRunInfoListAdd(char **a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  char *result;
  unsigned int v9;
  char *v10;
  char *v11;
  char *v12;
  const char *v13;

  v7 = *((_DWORD *)a1 + 2);
  v6 = *((_DWORD *)a1 + 3);
  result = *a1;
  if (v6 == v7)
  {
    v9 = 2 * v6;
    *((_DWORD *)a1 + 2) = v9;
    result = (char *)reallocf(result, 16 * v9);
    *a1 = result;
    if (!result)
    {
      v11 = __si_assert_copy_extra_1644(0);
      v12 = v11;
      v13 = "";
      if (v11)
        v13 = v11;
      __message_assert("%s:%u: failed assertion '%s' %s ", "CIPayloadCompact.c", 939, "list->items", v13);
      free(v12);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v6 = *((_DWORD *)a1 + 3);
  }
  *((_DWORD *)a1 + 3) = v6 + 1;
  v10 = &result[16 * v6];
  *(_QWORD *)v10 = a2;
  *((_QWORD *)v10 + 1) = a3;
  a1[2] += a3;
  return result;
}

char *PRPommesStemWordWithCString(const char *a1, int a2, int a3)
{
  int v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  signed int v11;
  int v12;
  uint64_t v13;
  const char *v14;
  int v15;
  int v16;
  char *v17;
  __int16 v18;
  int v19;
  int v20;
  int v21;
  int v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  unsigned int v30;
  char *v31;
  int v32;
  char *v33;
  uint64_t v34;

  if (!a1)
    return 0;
  v6 = strlen(a1);
  v7 = v6;
  if (v6 > a2)
    return 0;
  v8 = (char *)malloc_type_malloc(v6 + 1, 0x90E8D34CuLL);
  strcpy(v8, a1);
  v34 = 0;
  LODWORD(v9) = v7 - 1;
  if (v7 < 3)
    goto LABEL_107;
  v33 = v8;
  LODWORD(v34) = v7 - 1;
  if (v8[v9] == 115)
  {
    if (ends((uint64_t)&v33, "\x04sses") || ends((uint64_t)&v33, "\x02's"))
    {
      LODWORD(v10) = v34 - 2;
LABEL_8:
      LODWORD(v34) = v10;
      goto LABEL_9;
    }
    if (ends((uint64_t)&v33, "\x03ies"))
    {
      v19 = HIDWORD(v34);
      v33[SHIDWORD(v34) + 1] = 105;
      LODWORD(v10) = v19 + 1;
      goto LABEL_8;
    }
    v10 = (int)v34 - 1;
    if (v8[v10] != 115)
      goto LABEL_8;
  }
LABEL_9:
  if (!ends((uint64_t)&v33, "\x02s'"))
  {
    if (ends((uint64_t)&v33, "\x03eed"))
    {
      if ((int)m((uint64_t *)&v33) >= 1)
      {
        v11 = v34 - 1;
        goto LABEL_11;
      }
LABEL_129:
      LODWORD(v9) = v34;
      goto LABEL_12;
    }
    if (!ends((uint64_t)&v33, "\x02ed") && !ends((uint64_t)&v33, "\x03ing"))
      goto LABEL_129;
    v15 = HIDWORD(v34);
    if (!vowelinstem((uint64_t)v33, SHIDWORD(v34)))
      goto LABEL_129;
    LODWORD(v34) = v15;
    if (ends((uint64_t)&v33, "\x02at"))
    {
      v16 = HIDWORD(v34);
      v17 = &v33[SHIDWORD(v34)];
      v17[3] = 101;
      v18 = 29793;
    }
    else if (ends((uint64_t)&v33, "\x02bl"))
    {
      v16 = HIDWORD(v34);
      v17 = &v33[SHIDWORD(v34)];
      v17[3] = 101;
      v18 = 27746;
    }
    else
    {
      if (!ends((uint64_t)&v33, "\x02iz"))
      {
        v11 = v34;
        if (doublec(&v33, v34))
        {
          v9 = v11 - 1;
          LODWORD(v34) = v11 - 1;
          v30 = v8[v9] - 108;
          if (v30 > 0xE || ((1 << v30) & 0x4081) == 0)
            goto LABEL_12;
          goto LABEL_11;
        }
        if (m((uint64_t *)&v33) == 1 && cvc((uint64_t *)&v33, v11))
        {
          v32 = HIDWORD(v34);
          v33[SHIDWORD(v34) + 1] = 101;
          v11 = v32 + 1;
          goto LABEL_11;
        }
        goto LABEL_129;
      }
      v16 = HIDWORD(v34);
      v17 = &v33[SHIDWORD(v34)];
      v17[3] = 101;
      v18 = 31337;
    }
    *(_WORD *)(v17 + 1) = v18;
    v11 = v16 + 3;
    goto LABEL_11;
  }
  v11 = v34 - 2;
LABEL_11:
  LODWORD(v34) = v11;
  LODWORD(v9) = v11;
LABEL_12:
  if ((int)v9 < 1)
    goto LABEL_107;
  v12 = ends((uint64_t)&v33, "\x01y");
  v13 = (uint64_t)v33;
  if (v12 && vowelinstem((uint64_t)v33, SHIDWORD(v34)))
  {
    *(_BYTE *)(v13 + (int)v34) = 105;
    v13 = (uint64_t)v33;
  }
  switch(*(_BYTE *)((int)v34 + v13 - 1))
  {
    case 'a':
      if (ends((uint64_t)&v33, "\aational"))
        goto LABEL_57;
      if (ends((uint64_t)&v33, "\x06tional"))
      {
        v14 = "\x04tion";
        goto LABEL_58;
      }
      goto LABEL_60;
    case 'c':
      if (ends((uint64_t)&v33, "\x04enci"))
      {
        v14 = "\x04ence";
        goto LABEL_58;
      }
      if (ends((uint64_t)&v33, "\x04anci"))
      {
        v14 = "\x04ance";
        goto LABEL_58;
      }
      goto LABEL_60;
    case 'e':
      if (ends((uint64_t)&v33, "\x04izer"))
        goto LABEL_39;
      goto LABEL_60;
    case 'g':
      if (ends((uint64_t)&v33, "\x04logi"))
      {
        v14 = "\x03log";
        goto LABEL_58;
      }
      goto LABEL_60;
    case 'l':
      if (ends((uint64_t)&v33, "\x03bli"))
        goto LABEL_37;
      if (ends((uint64_t)&v33, "\x04alli"))
        goto LABEL_54;
      if (ends((uint64_t)&v33, "\x05entli"))
      {
        v14 = "\x03ent";
        goto LABEL_58;
      }
      if (ends((uint64_t)&v33, "\x03eli"))
      {
        v14 = "\x01e";
        goto LABEL_58;
      }
      v31 = "\x05ousli";
      goto LABEL_131;
    case 'o':
      if (ends((uint64_t)&v33, "\aization"))
      {
LABEL_39:
        v14 = "\x03ize";
        goto LABEL_58;
      }
      if (!ends((uint64_t)&v33, "\x05ation") && !ends((uint64_t)&v33, "\x04ator"))
        goto LABEL_60;
LABEL_57:
      v14 = "\x03ate";
      goto LABEL_58;
    case 's':
      if (ends((uint64_t)&v33, "\x05alism"))
        goto LABEL_54;
      if (ends((uint64_t)&v33, "\aiveness"))
        goto LABEL_46;
      if (ends((uint64_t)&v33, "\afulness"))
      {
        v14 = "\x03ful";
        goto LABEL_58;
      }
      v31 = "\aousness";
LABEL_131:
      if (!ends((uint64_t)&v33, v31))
        goto LABEL_60;
      v14 = "\x03ous";
      goto LABEL_58;
    case 't':
      if (ends((uint64_t)&v33, "\x05aliti"))
      {
LABEL_54:
        v14 = "\x02al";
      }
      else if (ends((uint64_t)&v33, "\x05iviti"))
      {
LABEL_46:
        v14 = "\x03ive";
      }
      else
      {
        if (!ends((uint64_t)&v33, "\x06biliti"))
          goto LABEL_60;
LABEL_37:
        v14 = "\x03ble";
      }
LABEL_58:
      if ((int)m((uint64_t *)&v33) >= 1)
      {
        v20 = *v14;
        v21 = HIDWORD(v34);
        memmove(&v33[SHIDWORD(v34) + 1], v14 + 1, *v14);
        LODWORD(v34) = v21 + v20;
      }
LABEL_60:
      v22 = v33[(int)v34];
      if (v22 > 107)
      {
        if (v22 == 108)
        {
          if (ends((uint64_t)&v33, "\x04ical"))
            goto LABEL_73;
          v23 = "\x03ful";
        }
        else
        {
          if (v22 != 115)
            goto LABEL_79;
          v23 = "\x04ness";
        }
        if (!ends((uint64_t)&v33, v23))
          goto LABEL_79;
        goto LABEL_76;
      }
      if (v22 != 101)
      {
        if (v22 != 105 || !ends((uint64_t)&v33, "\x05iciti"))
          goto LABEL_79;
        goto LABEL_73;
      }
      if (ends((uint64_t)&v33, "\x05icate"))
      {
LABEL_73:
        v24 = "\x02ic";
        goto LABEL_77;
      }
      if (ends((uint64_t)&v33, "\x05ative"))
      {
LABEL_76:
        v24 = &byte_1B8631A4C;
        goto LABEL_77;
      }
      if (!ends((uint64_t)&v33, "\x05alize"))
        goto LABEL_79;
      v24 = "\x02al";
LABEL_77:
      if ((int)m((uint64_t *)&v33) >= 1)
      {
        v25 = *v24;
        v26 = HIDWORD(v34);
        memcpy(&v33[SHIDWORD(v34) + 1], v24 + 1, *v24);
        LODWORD(v34) = v26 + v25;
      }
LABEL_79:
      if (a3)
      {
        step5((uint64_t)&v33);
      }
      else
      {
        switch(v33[(int)v34 - 1])
        {
          case 'a':
            v27 = "\x02al";
            break;
          case 'c':
            if (ends((uint64_t)&v33, "\x04ance"))
              goto LABEL_104;
            v27 = "\x04ence";
            break;
          case 'e':
            v27 = "\x02er";
            break;
          case 'i':
            v27 = "\x02ic";
            break;
          case 'l':
            if (ends((uint64_t)&v33, "\x04able"))
              goto LABEL_104;
            v27 = "\x04ible";
            break;
          case 'n':
            if (ends((uint64_t)&v33, "\x03ant")
              || ends((uint64_t)&v33, "\x05ement")
              || ends((uint64_t)&v33, "\x04ment"))
            {
              goto LABEL_104;
            }
            v27 = "\x03ent";
            break;
          case 'o':
            if (ends((uint64_t)&v33, "\x03ion")
              && (v34 & 0x8000000000000000) == 0
              && v33[HIDWORD(v34)] - 115 < 2)
            {
              goto LABEL_104;
            }
            v27 = "\x02ou";
            break;
          case 's':
            v27 = "\x03ism";
            break;
          case 't':
            if (ends((uint64_t)&v33, "\x03ate"))
              goto LABEL_104;
            v27 = "\x03iti";
            break;
          case 'u':
            v27 = "\x03ous";
            break;
          case 'v':
            v27 = "\x03ive";
            break;
          case 'z':
            v27 = "\x03ize";
            break;
          default:
            goto LABEL_106;
        }
        if (ends((uint64_t)&v33, v27))
        {
LABEL_104:
          if ((int)m((uint64_t *)&v33) >= 2)
            LODWORD(v34) = HIDWORD(v34);
        }
      }
LABEL_106:
      step5((uint64_t)&v33);
      LODWORD(v9) = v34;
LABEL_107:
      v28 = (int)v9 + 1;
      v8[v28] = 0;
      if (isStopWord(v8) || (int)v28 >= v7 + a3)
      {
        free(v8);
        return 0;
      }
      return v8;
    default:
      goto LABEL_60;
  }
}

void SQueueDestroy(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a1)
  {
    v2 = *(_QWORD **)(a1 + 24);
    if (v2)
    {
      do
      {
        v3 = (_QWORD *)v2[1];
        free(v2);
        v2 = v3;
      }
      while (v3);
    }
    free(*(void **)(a1 + 16));
    free((void *)a1);
  }
}

_QWORD *SQueueDropData(_QWORD *a1, unint64_t a2)
{
  _QWORD *result;
  unint64_t v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;

  result = (_QWORD *)a1[3];
  if (!result)
    __assert_rtn("SQueueDropData", "SlabQueue.c", 150, "squeue->firstSlab");
  v5 = result[3];
  v6 = gSlabs;
  while (1)
  {
    if (a2 >= v5)
      v7 = v5;
    else
      v7 = a2;
    result[3] = v5 - v7;
    a1[1] -= v7;
    a1[5] += v7;
    if (!result[3] && result != (_QWORD *)a1[4])
    {
      v8 = (_QWORD *)result[1];
      a1[3] = v8;
      a1[5] = 0;
      if (v8)
      {
        *v8 = 0;
        v8 = (_QWORD *)a1[3];
        a1[5] = v8 + 4;
      }
      if (a1[2])
      {
        free(result);
        gSlabs = --v6;
        result = (_QWORD *)a1[3];
      }
      else
      {
        a1[2] = result;
        result = v8;
      }
    }
    a2 -= v7;
    if (!a2)
      break;
    v5 = result[3];
    if (!v5)
      __assert_rtn("SQueueDropData", "SlabQueue.c", 182, "length == 0");
  }
  if (!result)
  {
    if (!a1[1])
      return result;
LABEL_21:
    __assert_rtn("SQueueDropData", "SlabQueue.c", 179, "(squeue->firstSlab == NULL && squeue->totalSize == 0) || (squeue->firstSlab != NULL && squeue->firstSlab->availableToRead == 0 && squeue->totalSize == 0) || (squeue->firstSlab != NULL && squeue->firstSlab->availableToRead <= squeue->totalSize)");
  }
  v9 = result[3];
  if (v9 && v9 > a1[1])
    goto LABEL_21;
  return result;
}

_QWORD *SQueueOpenPushData(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _QWORD *NewSlab;
  _QWORD *result;
  _QWORD *v8;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  if (v3)
    v5 = v3 == v4;
  else
    v5 = 0;
  if (v5)
  {
    if (!*(_QWORD *)(v3 + 24))
    {
      result = (_QWORD *)(v3 + 32);
      goto LABEL_11;
    }
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (!v4)
    {
      NewSlab = squeue_getNewSlab((unsigned int *)a1, a2);
      NewSlab[3] = 0;
      *NewSlab = 0;
      NewSlab[1] = 0;
      *(_QWORD *)(a1 + 24) = NewSlab;
      *(_QWORD *)(a1 + 32) = NewSlab;
      result = NewSlab + 4;
LABEL_11:
      *(_QWORD *)(a1 + 40) = result;
      goto LABEL_12;
    }
  }
  result = *(_QWORD **)(a1 + 48);
  if ((v3 - (_DWORD)result + *(_DWORD *)(v3 + 16) + 32) >= a2)
    return result;
  v8 = squeue_getNewSlab((unsigned int *)a1, a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v8;
  v8[3] = 0;
  *v8 = *(_QWORD *)(a1 + 32);
  v8[1] = 0;
  *(_QWORD *)(a1 + 32) = v8;
  result = v8 + 4;
LABEL_12:
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

_DWORD *squeue_getNewSlab(unsigned int *a1, unint64_t a2)
{
  _DWORD *result;
  unint64_t v4;
  unint64_t v5;

  result = (_DWORD *)*((_QWORD *)a1 + 2);
  if (result && result[4] >= a2)
  {
    *((_QWORD *)a1 + 2) = 0;
  }
  else
  {
    v4 = *a1;
    if (v4 <= a2)
      v5 = a2;
    else
      v5 = v4;
    result = malloc_type_malloc(v5 + 32, 0xCAB03470uLL);
    result[4] = v5;
    ++gSlabs;
  }
  return result;
}

double SQueueEmpty(_QWORD *a1)
{
  _QWORD *v2;
  _OWORD *v3;
  _QWORD *v4;
  double result;

  v3 = a1 + 3;
  v2 = (_QWORD *)a1[3];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)v2[1];
      if (a1[2])
      {
        free(v2);
        --gSlabs;
      }
      else
      {
        a1[2] = v2;
      }
      v2 = v4;
    }
    while (v4);
  }
  a1[1] = 0;
  result = 0.0;
  *v3 = 0u;
  v3[1] = 0u;
  return result;
}

BOOL equalDBO(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  BOOL v14;
  unint64_t v15;
  size_t v16;
  _QWORD __base[1024];
  _QWORD v18[1025];

  v1 = MEMORY[0x1E0C80A78](a1);
  v18[1024] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)v1 != *(_QWORD *)v2)
    return 0;
  v3 = v2;
  v4 = v1;
  if (*(_QWORD *)(v1 + 24) != *(_QWORD *)(v2 + 24))
    return 0;
  if (*(_QWORD *)(v1 + 32) != *(_QWORD *)(v2 + 32))
    return 0;
  if (*(_QWORD *)(v1 + 16) != *(_QWORD *)(v2 + 16))
    return 0;
  v5 = *(unsigned int *)(v1 + 12);
  if ((_DWORD)v5 != *(_DWORD *)(v2 + 12) || *(unsigned __int8 *)(v2 + 40) != *(unsigned __int8 *)(v1 + 40))
    return 0;
  bzero(v18, 0x2000uLL);
  bzero(__base, 0x2000uLL);
  if (v5 < 0x31)
  {
    LODWORD(v7) = 0;
  }
  else
  {
    v7 = 0;
    v8 = v4 + 48;
    do
    {
      v18[v7] = v8;
      v8 += *(unsigned int *)(v8 + 8) + 13;
      ++v7;
    }
    while (v8 < v4 + v5);
    v9 = 0;
    v10 = v3 + 48;
    do
    {
      __base[v9] = v10;
      v10 += *(unsigned int *)(v10 + 8) + 13;
      ++v9;
    }
    while (v10 < v3 + v5);
    if ((_DWORD)v9 != (_DWORD)v7)
      return 0;
  }
  v11 = v7;
  qsort_b(v18, v7, 8uLL, &__block_literal_global_9778);
  qsort_b(__base, v7, 8uLL, &__block_literal_global_9778);
  if ((_DWORD)v7)
  {
    v12 = (unsigned __int16 *)v18[0];
    v13 = (unsigned __int16 *)__base[0];
    if (*(_WORD *)v18[0] == *(_WORD *)__base[0])
    {
      v14 = 0;
      v15 = 1;
      do
      {
        v16 = *((unsigned int *)v12 + 2);
        if ((_DWORD)v16 != *((_DWORD *)v13 + 2))
          break;
        if (v12[1] != v13[1])
          break;
        if (*((_DWORD *)v12 + 1) != *((_DWORD *)v13 + 1))
          break;
        if (memcmp((char *)v12 + 13, (char *)v13 + 13, v16))
          break;
        v14 = v15 >= v11;
        if (v11 == v15)
          break;
        v12 = (unsigned __int16 *)v18[v15];
        v13 = (unsigned __int16 *)__base[v15++];
      }
      while (*v12 == *v13);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 1;
  }
  return v14;
}

uint64_t __equalDBO_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(_DWORD *)(*(_QWORD *)a2 + 4) - *(_DWORD *)(*(_QWORD *)a3 + 4));
}

_DWORD *getRawLocalizedUniquedField(uint64_t a1, int a2, _DWORD *a3, int a4)
{
  unsigned __int8 *string_and_length_for_id;
  unsigned __int8 *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  size_t v14;
  char *v16;
  char *v17;
  const char *v18;
  uint64_t v19;

  string_and_length_for_id = (unsigned __int8 *)get_string_and_length_for_id(a1, 4u, a2, a4);
  if (!string_and_length_for_id)
    return 0;
  v7 = string_and_length_for_id;
  v8 = *string_and_length_for_id;
  if ((char)*string_and_length_for_id < 0)
  {
    if (v8 > 0xBF)
    {
      if (v8 > 0xDF)
      {
        if (v8 > 0xEF)
        {
          v8 = *(_DWORD *)(string_and_length_for_id + 1);
          v9 = 5;
          if (v8)
            goto LABEL_4;
        }
        else
        {
          v8 = ((v8 & 0xF) << 24) | (string_and_length_for_id[1] << 16) | (string_and_length_for_id[2] << 8) | string_and_length_for_id[3];
          v9 = 4;
          if (v8)
            goto LABEL_4;
        }
      }
      else
      {
        v8 = ((v8 & 0x1F) << 16) | (string_and_length_for_id[1] << 8) | string_and_length_for_id[2];
        v9 = 3;
        if (v8)
          goto LABEL_4;
      }
    }
    else
    {
      v9 = 2;
      v8 = string_and_length_for_id[1] | ((v8 & 0x3F) << 8);
      if (v8)
        goto LABEL_4;
    }
    return 0;
  }
  v9 = 1;
  if (!*string_and_length_for_id)
    return 0;
LABEL_4:
  v10 = v9 + 1;
  v11 = string_and_length_for_id[v9];
  if ((char)string_and_length_for_id[v9] < 0)
  {
    if (v11 > 0xBF)
    {
      if (v11 > 0xDF)
      {
        if (v11 > 0xEF)
        {
          v11 = *(_DWORD *)&string_and_length_for_id[v10];
          v10 = v9 + 5;
        }
        else
        {
          v11 = ((v11 & 0xF) << 24) | (string_and_length_for_id[v10] << 16) | (string_and_length_for_id[v9 + 2] << 8) | string_and_length_for_id[v9 + 3];
          v10 = v9 + 4;
        }
      }
      else
      {
        v11 = ((v11 & 0x1F) << 16) | (string_and_length_for_id[v10] << 8) | string_and_length_for_id[v9 + 2];
        v10 = v9 + 3;
      }
    }
    else
    {
      v12 = string_and_length_for_id[v10] | ((v11 & 0x3F) << 8);
      v10 = v9 + 2;
      v11 = v12;
    }
  }
  v13 = v10 - v9;
  v14 = v8 - v13;
  if (v8 < v13)
  {
    v16 = __si_assert_copy_extra_1644(*(_DWORD **)(a1 + 848));
    v17 = v16;
    v18 = "";
    if (v16)
      v18 = v16;
    __message_assert("%s:%u: failed assertion '%s' %s %s", "ldb.c", 334, "len >= (off1-off)", v18, "len >= (off1-off)");
    free(v17);
    if (__valid_fsp(*(_DWORD **)(a1 + 848)))
      v19 = 2989;
    else
      v19 = 3072;
    *(_DWORD *)v19 = -559038737;
    abort();
  }
  if (v14 + 13 < 0x401 || (a3 = malloc_type_malloc(v14 + 13, 0x90C1ED28uLL)) != 0)
  {
    *a3 = 9437195;
    a3[1] = v11;
    a3[2] = v14;
    memcpy((char *)a3 + 13, &v7[v10], v14);
  }
  return a3;
}

void *copyDataForUniquedValue(uint64_t a1, unsigned int a2, void *a3, unsigned int *a4)
{
  unsigned __int8 *string_and_length_for_id;
  unsigned __int8 *v9;
  unsigned int v10;
  int v11;
  NSObject *v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char *v18;
  char *v19;
  const char *v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  string_and_length_for_id = (unsigned __int8 *)get_string_and_length_for_id(a1, 3u, a2, 1);
  if (string_and_length_for_id)
  {
    v9 = string_and_length_for_id;
    v10 = *string_and_length_for_id;
    if (((char)*string_and_length_for_id & 0x80000000) == 0)
    {
      if (!*string_and_length_for_id)
        goto LABEL_25;
      goto LABEL_17;
    }
    if (v10 > 0xBF)
    {
      if (v10 > 0xDF)
      {
        if (v10 > 0xEF)
        {
          v13 = *(_DWORD *)(string_and_length_for_id + 1);
          if (v13)
            goto LABEL_16;
        }
        else
        {
          v13 = ((v10 & 0xF) << 24) | (string_and_length_for_id[1] << 16) | (string_and_length_for_id[2] << 8) | string_and_length_for_id[3];
          if (v13)
            goto LABEL_16;
        }
LABEL_25:
        si_analytics_log_2520("Failed to fetch the SDB fLen for index:%d, nameId:%lu, dst->flags:0x%lx, dst->name:%s", 3, a2, *(int *)(a1 + 4), (const char *)(a1 + 324));
        return 0;
      }
      v13 = ((v10 & 0x1F) << 16) | (string_and_length_for_id[1] << 8) | string_and_length_for_id[2];
      if (!v13)
        goto LABEL_25;
    }
    else
    {
      v13 = string_and_length_for_id[1] | ((v10 & 0x3F) << 8);
      if (!v13)
        goto LABEL_25;
    }
LABEL_16:
    if ((v10 & 0x80) != 0)
    {
      v15 = v13;
      if (v10 > 0xBF)
      {
        if (v10 > 0xDF)
        {
          if (v10 > 0xEF)
          {
            v10 = *(_DWORD *)(string_and_length_for_id + 1);
            v14 = 5;
          }
          else
          {
            v10 = ((v10 & 0xF) << 24) | (string_and_length_for_id[1] << 16) | (string_and_length_for_id[2] << 8) | string_and_length_for_id[3];
            v14 = 4;
          }
        }
        else
        {
          v10 = ((v10 & 0x1F) << 16) | (string_and_length_for_id[1] << 8) | string_and_length_for_id[2];
          v14 = 3;
        }
      }
      else
      {
        v14 = 2;
        v10 = string_and_length_for_id[1] | ((v10 & 0x3F) << 8);
      }
      if (v14 > v13)
      {
        v18 = __si_assert_copy_extra_1644(*(_DWORD **)(a1 + 848));
        v19 = v18;
        v20 = "";
        if (v18)
          v20 = v18;
        si_analytics_log_2520("%s:%u: failure log '%s' %s Expected offset %ld to fit in size %ld, dst->flags:0x%lx, dst->name:%s", "ldb.c", 402, "fLen >= fOffset", v20, v14, v15, *(int *)(a1 + 4), (const char *)(a1 + 324));
        free(v19);
        return 0;
      }
      goto LABEL_18;
    }
LABEL_17:
    v14 = 1;
LABEL_18:
    if (a3 && (int)*a4 < (int)v10)
      a3 = malloc_type_malloc((int)v10, 0xA20395CCuLL);
    memcpy(a3, &v9[v14], (int)v10);
    *a4 = v10;
    return a3;
  }
  v11 = *__error();
  v12 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v17 = *(int *)(a1 + 4);
    *(_DWORD *)buf = 136316418;
    v22 = "copyDataForUniquedValue";
    v23 = 1024;
    v24 = 389;
    v25 = 1024;
    v26 = 3;
    v27 = 2048;
    v28 = a2;
    v29 = 2048;
    v30 = v17;
    v31 = 2080;
    v32 = a1 + 324;
    _os_log_error_impl(&dword_1B8270000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Failed to fetch the field for index:%d, nameId:%lu, dst->flags:0x%lx, dst->name:%s", buf, 0x36u);
  }
  a3 = 0;
  *__error() = v11;
  return a3;
}

unsigned __int8 *getDBFForUniquedValue(uint64_t a1, unsigned int a2, int a3, _QWORD *a4)
{
  unsigned __int8 *result;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  char *v13;
  char *v14;
  const char *v15;

  result = (unsigned __int8 *)get_string_and_length_for_id(a1, a2, a3, 1);
  if (result)
  {
    v8 = *result;
    if ((char)*result < 0)
    {
      if (v8 > 0xBF)
      {
        if (v8 > 0xDF)
        {
          if (v8 > 0xEF)
          {
            v8 = *(_DWORD *)(result + 1);
            v9 = 5;
          }
          else
          {
            v8 = ((v8 & 0xF) << 24) | (result[1] << 16) | (result[2] << 8) | result[3];
            v9 = 4;
          }
        }
        else
        {
          v8 = ((v8 & 0x1F) << 16) | (result[1] << 8) | result[2];
          v9 = 3;
        }
      }
      else
      {
        v9 = 2;
        v8 = result[1] | ((v8 & 0x3F) << 8);
      }
    }
    else
    {
      v9 = 1;
    }
    *a4 = v8;
    if (a2 == 4)
    {
      v10 = v9 + 1;
      v11 = result[v9];
      if ((char)result[v9] < 0)
      {
        if (v11 > 0xBF)
        {
          if (v11 > 0xDF)
          {
            if (v11 > 0xEF)
            {
              v11 = *(_DWORD *)&result[v10];
              v10 = v9 + 5;
            }
            else
            {
              v11 = ((v11 & 0xF) << 24) | (result[v10] << 16) | (result[v9 + 2] << 8) | result[v9 + 3];
              v10 = v9 + 4;
            }
          }
          else
          {
            v11 = ((v11 & 0x1F) << 16) | (result[v10] << 8) | result[v9 + 2];
            v10 = v9 + 3;
          }
        }
        else
        {
          v12 = result[v10] | ((v11 & 0x3F) << 8);
          v10 = v9 + 2;
          v11 = v12;
        }
      }
      if (!v11)
      {
        v13 = __si_assert_copy_extra_1644(*(_DWORD **)(a1 + 848));
        v14 = v13;
        v15 = "";
        if (v13)
          v15 = v13;
        si_analytics_log_2520("%s:%u: failure log '%s' %s Unexpected field 0 at %ld, dst->flags:0x%lx, dst->name:%s", "ldb.c", 369, "field", v15, v10, *(int *)(a1 + 4), (const char *)(a1 + 324));
        free(v14);
        return 0;
      }
    }
  }
  return result;
}

uint64_t ldbFlagsForTypeAndFieldFlags(int a1, unsigned int a2, char a3)
{
  int v4;
  int v5;
  int v6;
  char v8;
  unsigned __int8 v9;

  if ((a2 & 0x400) != 0)
    a1 = 0;
  v4 = (a2 >> 1) & 4 | (a2 >> 7) & 1 | (a2 >> 4) & 2 | (a2 >> 5) & 8 | (a2 >> 3) & 0x40;
  v5 = (a2 >> 8) & 0x20 | (a2 >> 7) & 0x180 | v4;
  v6 = (a2 >> 5) & 0x780 | (a2 >> 6) & 0x20 | v4;
  if (a1 == 14 && (a2 & 0x4000) != 0)
    v6 |= 0xFFFFFF80;
  if ((a3 & 1) != 0)
    v6 = v5;
  if ((a2 & 0x10) != 0)
    v8 = 15;
  else
    v8 = a1;
  if (a1 == 11)
    v9 = v8;
  else
    v9 = a1;
  return v9 | (v6 << 8);
}

uint64_t ldb_update_indexid(_DWORD **a1, unint64_t a2)
{
  _DWORD *v4;
  char *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  unint64_t v18;
  _DWORD *v19;
  char *v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  const char *v26;

  v4 = *a1;
  v5 = (char *)(*a1 + 1);
  if (*v5 < 0)
  {
    v7 = *v5;
    if (v7 >= 0xC0)
    {
      if (v7 >= 0xE0)
      {
        if (v7 >= 0xF0)
        {
          if (v7 >= 0xF8)
          {
            if (v7 >= 0xFC)
            {
              v8 = 8;
              if (v7 == 255)
                v8 = 9;
              if (v7 >= 0xFE)
                v6 = v8;
              else
                v6 = 7;
            }
            else
            {
              v6 = 6;
            }
          }
          else
          {
            v6 = 5;
          }
        }
        else
        {
          v6 = 4;
        }
      }
      else
      {
        v6 = 3;
      }
    }
    else
    {
      v6 = 2;
    }
  }
  else
  {
    v6 = 1;
  }
  if (v5[v6] < 0)
  {
    v10 = v5[v6];
    if (v10 >= 0xC0)
    {
      if (v10 >= 0xE0)
      {
        v24 = __si_assert_copy_extra_1644(0);
        v25 = v24;
        v26 = "";
        if (v24)
          v26 = v24;
        __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v26);
        free(v25);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v9 = 3;
    }
    else
    {
      v9 = 2;
    }
  }
  else
  {
    v9 = 1;
  }
  v11 = v6 + v9;
  v12 = v5[v6 + v9];
  if (v12 < 0)
  {
    if (v12 > 0xBFu)
    {
      if (v12 > 0xDFu)
      {
        if (v12 > 0xEFu)
        {
          if (v12 > 0xF7u)
          {
            if (v12 > 0xFBu)
            {
              if (v12 > 0xFDu)
              {
                if (v12 == 255)
                  v13 = v11 + 9;
                else
                  v13 = v11 + 8;
              }
              else
              {
                v13 = v11 + 7;
              }
            }
            else
            {
              v13 = v11 + 6;
            }
          }
          else
          {
            v13 = v11 + 5;
          }
        }
        else
        {
          v13 = v11 + 4;
        }
      }
      else
      {
        v13 = v11 + 3;
      }
    }
    else
    {
      v13 = v11 + 2;
    }
  }
  else
  {
    v13 = v11 + 1;
  }
  if (HIBYTE(a2))
  {
    v14 = 9;
  }
  else if ((a2 & 0xFE000000000000) != 0)
  {
    v14 = 8;
  }
  else if ((a2 & 0x1FC0000000000) != 0)
  {
    v14 = 7;
  }
  else if ((a2 & 0x3F800000000) != 0)
  {
    v14 = 6;
  }
  else if ((a2 & 0x7F0000000) != 0)
  {
    v14 = 5;
  }
  else if ((a2 & 0xFE00000) != 0)
  {
    v14 = 4;
  }
  else if ((a2 & 0x1FC000) != 0)
  {
    v14 = 3;
  }
  else if ((a2 & 0x3F80) != 0)
  {
    v14 = 2;
  }
  else
  {
    v14 = 1;
  }
  if (v14 >= v13 - v11)
  {
    if (v14 > v13 - v11)
    {
      v18 = v14 - (v13 - v11) + *v4;
      v19 = malloc_type_malloc(v18 + 4, 0xF1B73F97uLL);
      memcpy(v19, v4, v11 + 4);
      memcpy((char *)v19 + v11 + v14 + 4, &v5[v13], *v19 - v13);
      result = ldb_writeVInt64((uint64_t)(v19 + 1), v11, a2);
      *v19 = v18;
      *a1 = v19;
    }
    else
    {
      result = ldb_writeVInt64((uint64_t)(*a1 + 1), v11, a2);
      if (result != v13)
      {
        v20 = __si_assert_copy_extra_1644(0);
        v21 = v20;
        v22 = "";
        if (v20)
          v22 = v20;
        __message_assert("%s:%u: failed assertion '%s' %s %s", "ldb.c", 2044, "last_offset == pdbo_offset", v22, "last_offset == pdbo_offset");
        free(v21);
        if (__valid_fs(-1))
          v23 = 2989;
        else
          v23 = 3072;
        *(_DWORD *)v23 = -559038737;
        abort();
      }
    }
  }
  else
  {
    v15 = ldb_writeVInt64((uint64_t)(*a1 + 1), v11, a2);
    v16 = v15;
    result = (uint64_t)memmove(&v5[v15], &v5[v13], *v4 - v13);
    *v4 += v16 - v13;
  }
  return result;
}

uint64_t _enumerate_dbo(_DWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t i;
  int v11;

  v11 = 0;
  v9 = 0;
  for (i = 0; ; (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, i, v9))
  {
    result = db_next_field(a1, a2, a3, &v11, &i, &v9);
    if ((_DWORD)result != 35)
      break;
  }
  return result;
}

CFDictionaryRef decodeVector(const __CFAllocator *a1, uint64_t a2, const UInt8 **a3, unint64_t a4, void *a5, void *a6)
{
  CFDictionaryRef v6;
  uint64_t v11;
  CFDataRef v12;
  void *values[5];
  void *keys[2];
  __int128 v16;
  const __CFString *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)&(*a3)[a2] > a4)
    return 0;
  v11 = a2;
  v12 = CFDataCreate(a1, *a3, a2);
  *a3 += v11;
  *(_OWORD *)keys = xmmword_1E6E37120;
  v16 = xmmword_1E6E37130;
  v17 = CFSTR("vec_version");
  values[0] = a5;
  values[1] = a6;
  values[3] = 0;
  values[4] = 0;
  values[2] = v12;
  v6 = CFDictionaryCreate(a1, (const void **)keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFRelease(v12);
  return v6;
}

__CFArray *createScalarArray(int *a1, unsigned int a2, __int16 a3, const char *a4, int a5, int a6, CFAllocatorRef allocator)
{
  __CFArray *Mutable;
  uint64_t v15;
  CFDateRef Value;

  Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  if (a5)
  {
    v15 = SDBTypeSizes[a2];
    do
    {
      Value = createValue(a1, a2, a3, a4, a6, allocator);
      CFArrayAppendValue(Mutable, Value);
      if (Value)
        CFRelease(Value);
      a4 += v15;
      --a5;
    }
    while (a5);
  }
  return Mutable;
}

const __CFString *createString_9893(int *a1, char a2, const char **a3, int a4, CFAllocatorRef alloc)
{
  const char *v5;
  CFStringRef v8;
  uint64_t v9;
  int v10;
  uint64_t string_for_id_locked;
  const char *v12;
  int v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  int v18;
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a3;
  if (!*a3)
    return &stru_1E6E3A6D8;
  if ((a2 & 0x10) != 0)
  {
    v10 = *(_DWORD *)v5;
    if (a4)
      string_for_id_locked = db_get_string_for_id_locked(a1, v10);
    else
      string_for_id_locked = db_get_string_for_id(a1, v10);
    if (string_for_id_locked)
      v12 = (const char *)string_for_id_locked;
    else
      v12 = "";
    v8 = CFStringCreateWithCString(alloc, v12, 0x8000100u);
    v9 = (uint64_t)(*a3 + 4);
  }
  else
  {
    v8 = CFStringCreateWithCString(alloc, *a3, 0x8000100u);
    if (dword_1EF19FC9C >= 5)
    {
      v14 = *__error();
      v15 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v18 = 138412290;
        v19 = (void *)v8;
        _os_log_impl(&dword_1B8270000, v15, OS_LOG_TYPE_DEFAULT, "String: %@", (uint8_t *)&v18, 0xCu);
      }
      *__error() = v14;
      if (dword_1EF19FC9C >= 5)
      {
        v16 = *__error();
        v17 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v18 = 136315138;
          v19 = (void *)v5;
          _os_log_impl(&dword_1B8270000, v17, OS_LOG_TYPE_DEFAULT, "C String: %s", (uint8_t *)&v18, 0xCu);
        }
        *__error() = v16;
      }
    }
    v9 = (uint64_t)&v5[strlen(v5) + 1];
  }
  *a3 = (const char *)v9;
  return v8;
}

void _si_set_rebuild_reason(const char *a1, int a2)
{
  void *v4;
  void *v5;
  _QWORD *v6;
  size_t v7;

  if (a1 || a2)
  {
    if (!__si_index_rebuild_reason_key[0])
    {
      if (!a1)
        return;
      pthread_key_create(__si_index_rebuild_reason_key, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
      v5 = 0;
      goto LABEL_10;
    }
    v4 = pthread_getspecific(__si_index_rebuild_reason_key[0]);
    v5 = v4;
    if (a2 || !v4)
    {
      if (!a1)
      {
        v6 = 0;
LABEL_14:
        if (pthread_setspecific(__si_index_rebuild_reason_key[0], v6) == -1)
        {
          if (v6)
            free(v6);
        }
        else
        {
          free(v5);
        }
        return;
      }
LABEL_10:
      v7 = strlen(a1);
      if (a2)
      {
        v6 = malloc_type_malloc(v7 + 15, 0xFDC382EFuLL);
        strcpy((char *)v6, "Intentional: ");
      }
      else
      {
        v6 = malloc_type_malloc(v7 + 9, 0xF30FFB0BuLL);
        *v6 = 0x203A726F727245;
      }
      strcat((char *)v6, a1);
      goto LABEL_14;
    }
  }
}

const char *_SIGetErrorString()
{
  const char *result;

  result = (const char *)__si_error_str_key;
  if (__si_error_str_key)
    result = (const char *)pthread_getspecific(__si_error_str_key);
  if (!result)
    return "";
  return result;
}

const char *SIGetRebuildReason()
{
  const char *result;

  result = (const char *)__si_index_rebuild_reason_key[0];
  if (__si_index_rebuild_reason_key[0])
    result = (const char *)pthread_getspecific(__si_index_rebuild_reason_key[0]);
  if (!result)
    return "Error: unknown";
  return result;
}

xpc_object_t __db2_read_query_block_invoke(uint64_t a1)
{
  xpc_object_t empty;
  char *v3;
  const char *v4;

  empty = xpc_dictionary_create_empty();
  v3 = strstr((char *)(*(_QWORD *)(a1 + 32) + 324), "Library/Spotlight/CoreSpotlight");
  if (v3)
    v4 = v3;
  else
    v4 = "invalid";
  xpc_dictionary_set_string(empty, "name", v4);
  xpc_dictionary_set_uint64(empty, "pgoff", *(_QWORD *)(*(_QWORD *)(a1 + 40) + 2016));
  xpc_dictionary_set_uint64(empty, "pgsize", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16) + 44));
  xpc_dictionary_set_int64(empty, "signature", **(int **)(*(_QWORD *)(a1 + 40) + 2040));
  xpc_dictionary_set_uint64(empty, "size", *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 2040) + 4));
  xpc_dictionary_set_int64(empty, "used_bytes", *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 2040) + 8));
  xpc_dictionary_set_int64(empty, "flags", *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 2040) + 12));
  return empty;
}

void sdb2_die(uint64_t a1, const char *a2, const char *a3, int a4)
{
  int v8;
  NSObject *v9;
  char *v10;
  char *v11;
  const char *v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  const char *v24;

  v8 = *__error();
  v9 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316418;
    v14 = "sdb2_die";
    v15 = 1024;
    v16 = 411;
    v17 = 2080;
    v18 = a3;
    v19 = 1024;
    v20 = a4;
    v21 = 2080;
    v22 = a1 + 324;
    v23 = 2080;
    v24 = a2;
    _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: %s:%d : %s : %s\n", buf, 0x36u);
  }
  *__error() = v8;
  v10 = __si_assert_copy_extra_2151(*(_DWORD **)(a1 + 840), -1);
  v11 = v10;
  v12 = "";
  if (v10)
    v12 = v10;
  __message_assert("%s:%u: failed assertion '%s' %s %s:%d : %s : %s\n", "sdb2.c", 412, "0", v12, a3, a4, (const char *)(a1 + 324), a2);
  free(v11);
  if (__valid_fsp(*(_DWORD **)(a1 + 840)))
  {
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  MEMORY[0xC00] = -559038737;
  abort();
}

size_t db2_swap_page(size_t result)
{
  unsigned int v1;
  unsigned int *v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  size_t v8;
  unsigned int i;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result == 1684172850 || v1 == 846226020)
  {
    v3 = (unsigned int *)result;
    v4 = *(_DWORD *)(result + 12);
    if (v1 == 846226020)
      v5 = HIBYTE(*(_DWORD *)(result + 12));
    else
      v5 = *(_DWORD *)(result + 12);
    if ((v5 & 0xF0) != 0)
    {
      v6 = bswap32(*(_DWORD *)(result + 8));
      if (v1 == 846226020)
        v7 = v6;
      else
        v7 = *(_DWORD *)(result + 8);
      if (v7 >= 0x21)
      {
        v8 = result + 32;
        for (i = 32; i < v7; i += v10)
        {
          *(_DWORD *)v8 = bswap32(*(_DWORD *)v8);
          result = strlen((const char *)(v8 + 4));
          v10 = (result + 4);
          v8 += v10;
        }
        v4 = v3[3];
        v6 = bswap32(v3[2]);
        v1 = *v3;
      }
      v3[5] = bswap32(v3[5]);
      v11 = bswap32(v3[1]);
      *v3 = bswap32(v1);
      v3[1] = v11;
      v3[2] = v6;
    }
    else
    {
      *(_DWORD *)result = bswap32(v1);
      *(int8x8_t *)(result + 4) = vrev32_s8(*(int8x8_t *)(result + 4));
    }
    v12 = bswap32(v3[4]);
    v3[3] = bswap32(v4);
    v3[4] = v12;
  }
  return result;
}

void *dst_malloc(int a1, size_t size)
{
  return malloc_type_malloc(size, 0x9E3BE260uLL);
}

uint64_t _db2_synced_block_callback(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 824);
  if (v2)
    return (*(uint64_t (**)(void))(v2 + 16))();
  else
    return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

void _db2_unmap_callback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  dispatch_time_t v6;
  _QWORD v7[6];

  v5 = *(_QWORD *)(a1 + 816);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v5, a2, a3);
  }
  else
  {
    v6 = dispatch_time(0, 1000000000);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = ___db2_unmap_callback_block_invoke;
    v7[3] = &__block_descriptor_tmp_104;
    v7[4] = a2;
    v7[5] = a3;
    dispatch_after(v6, MEMORY[0x1E0C80D38], v7);
  }
}

uint64_t ___db2_unmap_callback_block_invoke(uint64_t a1)
{
  return munmap(*(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
}

_DWORD *db2_create_datastore_with_ctx(uint64_t a1)
{
  char *v2;
  unsigned int v3;
  int v4;
  _DWORD *v5;
  int v6;
  char *v7;
  char *v8;
  const char *v9;
  unsigned __int8 v10;
  _QWORD *v11;
  int8x16_t v12;
  pthread_key_t v13;
  void *v14;
  unsigned int v15;
  unint64_t v16;
  signed int v17;
  int v18;
  NSObject *v19;
  int *v20;
  char *v21;
  const char *v22;
  int v23;
  char *v24;
  _DWORD *v25;
  void *v26;
  int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int8x8_t *v32;
  unsigned int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  int8x8_t *v42;
  unsigned int v43;
  void *v44;
  char *v45;
  char *v46;
  unsigned int *v47;
  unsigned int i;
  unsigned int v50;
  pthread_override_s *v51;
  char v52;
  unint64_t v54;
  _DWORD *v55;
  uint64_t v56;
  _DWORD *v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  _OWORD *v61;
  __int128 v62;
  unsigned int v63;
  uint64_t v64;
  pthread_rwlock_t *v65;
  pthread_rwlock_t *v66;
  int v67;
  const char *v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  pthread_rwlock_t *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  _BOOL4 v76;
  int *v77;
  char *v78;
  int *v79;
  char *v80;
  uint8_t *v81;
  int *v82;
  char *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  int *v87;
  char *v88;
  _DWORD *v89;
  _DWORD *v90;
  int v91;
  int v92;
  _OWORD *v93;
  int *v94;
  char *v95;
  char *v96;
  char *v97;
  const char *v98;
  uint64_t v99;
  int v100;
  NSObject *v101;
  uint64_t v102;
  void *v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  unsigned int v107;
  _QWORD v108[2];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  int v112;
  unsigned int v113;
  const char *v114;
  __int16 v115;
  int v116;
  __int16 v117;
  _BYTE *v118;
  __int16 v119;
  char *v120;
  _BYTE __str[18];
  __int16 v122;
  _WORD *v123;
  __int16 v124;
  char *v125;
  char __dst[1024];
  _WORD v127[512];
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v107 = *(_DWORD *)a1;
  v2 = *(char **)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a1 + 32);
  if (sdb_map_zone_once != -1)
    dispatch_once(&sdb_map_zone_once, &__block_literal_global_106_9994);
  v5 = malloc_type_zone_calloc((malloc_zone_t *)sdb_map_zone, 0x1000uLL, 1uLL, 0xE2D1D58AuLL);
  if (v5)
  {
    bzero(v127, 0x400uLL);
    bzero(__dst, 0x400uLL);
    v5[246] = *(_DWORD *)(a1 + 20);
    if (fcntl(v107, 50, v127) < 0 || !LOBYTE(v127[0]))
      __strlcpy_chk();
    if (v127[0] != 47)
      __strlcat_chk();
    __strlcat_chk();
    v6 = *(_DWORD *)(a1 + 16);
    v7 = strrchr(v2, 47);
    if (v7)
    {
      v8 = v7;
      strlcpy(__dst, v2, v7 - v2 + 2);
      strlcat(__dst, ".", 0x400uLL);
      v9 = v8 + 1;
    }
    else
    {
      strcpy(__dst, ".");
      v9 = v2;
    }
    strlcat(__dst, v9, 0x400uLL);
    v10 = (v6 << 13 >> 31) & 3;
    *((_QWORD *)v5 + 105) = fd_create_protected(v107, v2, 1538, v10);
    v11 = fd_create_protected(v107, __dst, 1538, v10);
    *((_QWORD *)v5 + 106) = v11;
    if (!*((_QWORD *)v5 + 105) || !v11)
    {
      v18 = *__error();
      v19 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
LABEL_63:
        *__error() = v18;
        v44 = (void *)*((_QWORD *)v5 + 107);
        if (v44)
        {
          free(v44);
          *((_QWORD *)v5 + 107) = 0;
        }
        cleanup_string_tables((uint64_t)v5);
        v45 = (char *)*((_QWORD *)v5 + 105);
        if (v45)
        {
          fd_release(v45);
          *((_QWORD *)v5 + 105) = 0;
        }
        v46 = (char *)*((_QWORD *)v5 + 106);
        if (v46)
        {
          fd_release(v46);
          *((_QWORD *)v5 + 106) = 0;
        }
        v47 = (unsigned int *)*((_QWORD *)v5 + 116);
        if (v47)
        {
          db_cache_clear(*((unint64_t **)v5 + 116), (uint64_t)&__block_literal_global_10_11289);
          *(_QWORD *)&__str[8] = 0;
          *(_QWORD *)__str = *(_QWORD *)v47;
          if (atomic_load(v47 + 62))
          {
            for (i = 0; i < v50; ++i)
            {
              *(_DWORD *)&__str[8] = i;
              _cache_remove((uint64_t *)__str);
              v50 = atomic_load(v47 + 62);
            }
          }
          atomic_store(0, v47 + 62);
          free(v47);
          pthread_mutex_lock((pthread_mutex_t *)(v5 + 146));
          v5[197] = 0;
          v51 = (pthread_override_s *)*((_QWORD *)v5 + 95);
          *((_QWORD *)v5 + 96) = 0;
          *((_QWORD *)v5 + 95) = 0;
          v52 = v5[195] != 0;
          *((_BYTE *)v5 + 796) = 0;
          db_rwlock_wakeup((uint64_t)(v5 + 146), v52, 0);
          pthread_mutex_unlock((pthread_mutex_t *)(v5 + 146));
          if (v51)
            pthread_override_qos_class_end_np(v51);
          db_rwlock_destroy((pthread_mutex_t *)(v5 + 146));
        }
        free(v5);
        return 0;
      }
      v20 = __error();
      v21 = strerror(*v20);
      *(_DWORD *)__str = 136315906;
      *(_QWORD *)&__str[4] = "db2_create_datastore_with_ctx";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 6251;
      v122 = 2080;
      v123 = v127;
      v124 = 2080;
      v125 = v21;
      v22 = "%s:%d: db2_create_datastore: ERR: Can't create file (%s : %s)\n";
LABEL_117:
      v81 = __str;
LABEL_118:
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, v22, v81, 0x26u);
      goto LABEL_63;
    }
    *((_WORD *)v11 + 28) |= 4u;
    __strlcpy_chk();
    *v5 = 1685287992;
    v5[1] = v3 | 0x10;
    *(_QWORD *)(v5 + 7) = 1;
    v5[9] = 4096;
    v5[11] = 0x4000;
    v5[3] = 12;
    v12 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(v3), (uint32x4_t)xmmword_1B8632020), (int8x16_t)xmmword_1B8632030);
    *(int8x8_t *)v12.i8 = vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
    v5[201] = v12.i32[0] | v12.i32[1] | v3 & 8;
    if (((v12.i32[0] | v12.i32[1]) & 0x14) == 0 && sdb_string_zone_once != -1)
      dispatch_once(&sdb_string_zone_once, &__block_literal_global_110);
    if (sdb_map_zone_once != -1)
      dispatch_once(&sdb_map_zone_once, &__block_literal_global_106_9994);
    *((_QWORD *)v5 + 99) = 0;
    *(_OWORD *)(v5 + 190) = 0u;
    *(_OWORD *)(v5 + 194) = 0u;
    *(_OWORD *)(v5 + 182) = 0u;
    *(_OWORD *)(v5 + 186) = 0u;
    *(_OWORD *)(v5 + 174) = 0u;
    *(_OWORD *)(v5 + 178) = 0u;
    *(_OWORD *)(v5 + 166) = 0u;
    *(_OWORD *)(v5 + 170) = 0u;
    *(_OWORD *)(v5 + 158) = 0u;
    *(_OWORD *)(v5 + 162) = 0u;
    *(_OWORD *)(v5 + 150) = 0u;
    *(_OWORD *)(v5 + 154) = 0u;
    *(_OWORD *)(v5 + 146) = 0u;
    pthread_mutex_init((pthread_mutex_t *)(v5 + 146), 0);
    v13 = __THREAD_SLOT_KEY;
    if (!__THREAD_SLOT_KEY)
    {
      makeThreadId();
      v13 = __THREAD_SLOT_KEY;
    }
    v14 = pthread_getspecific(v13);
    HIDWORD(v16) = qos_class_self() - 9;
    LODWORD(v16) = HIDWORD(v16);
    v15 = v16 >> 2;
    if (v15 > 6)
      v17 = 0;
    else
      v17 = dword_1B8630ED0[v15];
    v23 = pthread_mutex_lock((pthread_mutex_t *)(v5 + 146));
    if (*((_QWORD *)v5 + 96) || v5[195] || *((_BYTE *)v5 + 796))
      goto LABEL_29;
    if (v17 <= 5)
    {
      if (*(_QWORD *)&v5[4 * v17 + 162])
      {
LABEL_29:
        db_rwlock_wait((uint64_t)(v5 + 146), v17, 2);
LABEL_30:
        v106 = (uint64_t)(v5 + 146);
        pthread_mutex_unlock((pthread_mutex_t *)(v5 + 146));
        if (v23)
        {
          v100 = *__error();
          v101 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__str = 136315650;
            *(_QWORD *)&__str[4] = "db2_create_datastore_with_ctx";
            *(_WORD *)&__str[12] = 1024;
            *(_DWORD *)&__str[14] = 6282;
            v122 = 1024;
            LODWORD(v123) = v23;
            _os_log_error_impl(&dword_1B8270000, v101, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", __str, 0x18u);
          }
          *__error() = v100;
          sdb2_die((uint64_t)v5, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 6282);
        }
        v105 = v4;
        if (v14)
          v104 = CIOnThreadCleanUpPush((uint64_t)v14 - 1, (uint64_t)db_write_unlock, v106);
        else
          v104 = -1;
        v24 = (char *)malloc_type_calloc(1uLL, 0x1D0uLL, 0x102004031B59A9BuLL);
        *(_QWORD *)v24 = v5;
        *((_QWORD *)v24 + 26) = 20;
        *(_QWORD *)(v24 + 220) = 0x400000002;
        pthread_rwlock_init((pthread_rwlock_t *)(v24 + 8), 0);
        page_cache_init((uint64_t)v24);
        *((_QWORD *)v5 + 116) = v24;
        v25 = malloc_type_zone_calloc((malloc_zone_t *)sdb_map_zone, 0x4000uLL, 1uLL, 0x17432EB6uLL);
        if (v25)
        {
          v26 = v25;
          if ((v5[1] & 0x100) != 0)
            v27 = 1684172082;
          else
            v27 = 1684172081;
          *v25 = v27;
          v25[1] = 0x4000;
          _add_dirty_chunk((uint64_t)v5, v5[9] >> v5[3], 0x4000u, 0);
          if ((v5[1] & 0x80) != 0)
          {
            v28 = (unsigned int *)*((_QWORD *)v5 + 107);
            v29 = v28[2];
            v30 = *v28;
            if (*v28 == 846029412 || (v31 = (int)v28[2], v30 == 829252196))
              v31 = bswap32(v29);
            if (v31 >= 1)
            {
              v32 = (int8x8_t *)(v28 + 7);
              do
              {
                v32[-1] = (int8x8_t)bswap64(*(_QWORD *)&v32[-1]);
                *v32 = vrev32_s8(*v32);
                v32 += 2;
                --v31;
              }
              while (v31);
            }
            v33 = bswap32(v28[1]);
            *v28 = bswap32(v30);
            v28[1] = v33;
            v28[2] = bswap32(v29);
            v28[4] = bswap32(v28[4]);
          }
          v34 = v5[9];
          if ((v34 & 0xFFF) != 0)
          {
            v96 = __si_assert_copy_extra_2151(0, -1);
            v97 = v96;
            v98 = "";
            if (v96)
              v98 = v96;
            __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 99, "(offset & ((1 << 12)-1)) == 0", v98);
            free(v97);
            if (__valid_fs(-1))
              v99 = 2989;
            else
              v99 = 3072;
            *(_DWORD *)v99 = -559038737;
            abort();
          }
          v35 = fd_pwrite(*((_QWORD *)v5 + 106), (uint64_t)v26, 0x4000uLL, v34);
          v36 = v5[1];
          if ((v36 & 0x80) != 0)
          {
            v37 = (unsigned int *)*((_QWORD *)v5 + 107);
            v38 = v37[2];
            v39 = *v37;
            v40 = *v37 == 846029412 || v39 == 829252196;
            v41 = bswap32(v38);
            if (!v40)
              v41 = (int)v37[2];
            if (v41 >= 1)
            {
              v42 = (int8x8_t *)(v37 + 7);
              do
              {
                v42[-1] = (int8x8_t)bswap64(*(_QWORD *)&v42[-1]);
                *v42 = vrev32_s8(*v42);
                v42 += 2;
                --v41;
              }
              while (v41);
            }
            v43 = bswap32(v37[1]);
            *v37 = bswap32(v39);
            v37[1] = v43;
            v37[2] = bswap32(v38);
            v37[4] = bswap32(v37[4]);
          }
          if (v35 == 0x4000)
          {
            v5[10] = 0x4000;
            *((_QWORD *)v5 + 107) = v26;
LABEL_78:
            v102 = (uint64_t)v14 - 1;
            v103 = v14;
            v54 = 0;
            v55 = v5 + 220;
            *((_QWORD *)v5 + 122) = *(_QWORD *)(a1 + 24);
            while (1)
            {
              while (v54 == 5 || (v5[201] & 0x14) != 0)
              {
                bzero(__str, 0x400uLL);
                v67 = strcmp(v2, "store.db");
                v68 = "db";
                if (v67)
                  v68 = v2;
                v69 = v54 + 1;
                snprintf(__str, 0x400uLL, "%sStr-%d.map", v68, v54 + 1);
                v109 = 0u;
                v110 = 0u;
                v111 = 0u;
                v108[0] = v107;
                v108[1] = __str;
                v70 = data_map_flags[v54] | 1;
                LODWORD(v109) = table_extra_bytes_10004[v54];
                DWORD1(v109) = v70;
                *(_QWORD *)&v110 = _db2_unmap_callback;
                *((_QWORD *)&v110 + 1) = v5;
                *(_QWORD *)&v111 = *((_QWORD *)v5 + 122);
                DWORD2(v111) = v54;
                v71 = data_map_init_with_ctx((uint64_t)v108);
                *(_QWORD *)&v55[2 * v54] = v71;
                if (!v71)
                {
                  v18 = *__error();
                  v19 = _SILogForLogForCategory(7);
                  if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                    goto LABEL_63;
                  v79 = __error();
                  v80 = strerror(*v79);
                  v113 = 136315906;
                  v114 = "db2_create_datastore_with_ctx";
                  v115 = 1024;
                  v116 = 6327;
                  v117 = 2080;
                  v118 = __str;
                  v119 = 2080;
                  v120 = v80;
                  v22 = "%s:%d: %s : ERR: can't init the string table! (%s)\n";
                  v81 = (uint8_t *)&v113;
                  goto LABEL_118;
                }
                ++v54;
                if (v69 == 6)
                {
LABEL_99:
                  if (fd_pwrite(*((_QWORD *)v5 + 105), (uint64_t)v5, 0x1000uLL, 0) == 4096)
                  {
                    v73 = *((_QWORD *)v5 + 105);
                    *(_QWORD *)__str = 0;
                    v74 = _fd_acquire_fd(v73, __str);
                    if ((_DWORD)v74 != -1)
                    {
                      v75 = v74;
                      if (v105)
                        v76 = (*(_WORD *)(v73 + 56) & 8) == 0;
                      else
                        v76 = 0;
                      prot_fsync(v74, v76);
                      _fd_release_fd((_DWORD *)v73, v75, 0, *(uint64_t *)__str);
                    }
                    if (fd_pwrite(*((_QWORD *)v5 + 106), (uint64_t)v5, 0x1000uLL, 0) == 4096)
                    {
                      v5[1] &= ~0x10u;
                      if (db_write_unlock(v106))
                        sdb2_die((uint64_t)v5, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 6366);
                      if (v103)
                      {
                        CIOnThreadCleanUpClearItem(v102, v104);
                        v89 = &threadData[18 * v102];
                        v92 = v89[14];
                        v90 = v89 + 14;
                        v91 = v92;
                        if (v104 + 1 == v92)
                          *v90 = v91 - 1;
                      }
                      v93 = malloc_type_malloc(0x48uLL, 0x10A004087A21FEBuLL);
                      *v93 = 0u;
                      v93[1] = 0u;
                      *((_DWORD *)v93 + 8) = 1065353216;
                      *(_OWORD *)((char *)v93 + 40) = 0u;
                      *(_OWORD *)((char *)v93 + 56) = 0u;
                      *((_QWORD *)v5 + 124) = v93;
                      db2_sync_datastore((uint64_t)v5, v105 != 0);
                      db_cache_clear_offset_hints(*((_QWORD *)v5 + 116));
                      *(_OWORD *)(v5 + 202) = 0u;
                      db2_set_garbage_collector(v5, &__block_literal_global_10012, &__block_literal_global_19_10013, &__block_literal_global_22_10014);
                      *((_QWORD *)v5 + 104) = 0;
                      return v5;
                    }
                    v18 = *__error();
                    v19 = _SILogForLogForCategory(7);
                    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                      goto LABEL_63;
                    v94 = __error();
                    v95 = strerror(*v94);
                    *(_DWORD *)__str = 136315906;
                    *(_QWORD *)&__str[4] = "db2_create_datastore_with_ctx";
                    *(_WORD *)&__str[12] = 1024;
                    *(_DWORD *)&__str[14] = 6348;
                    v122 = 2080;
                    v123 = v5 + 81;
                    v124 = 2080;
                    v125 = v95;
                    v22 = "%s:%d: %s : ERR: Can't write shadow DST header (%s)\n";
                  }
                  else
                  {
                    v18 = *__error();
                    v19 = _SILogForLogForCategory(7);
                    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                      goto LABEL_63;
                    v82 = __error();
                    v83 = strerror(*v82);
                    *(_DWORD *)__str = 136315906;
                    *(_QWORD *)&__str[4] = "db2_create_datastore_with_ctx";
                    *(_WORD *)&__str[12] = 1024;
                    *(_DWORD *)&__str[14] = 6342;
                    v122 = 2080;
                    v123 = v5 + 81;
                    v124 = 2080;
                    v125 = v83;
                    v22 = "%s:%d: %s : ERR: Can't write DST header (%s)\n";
                  }
                  goto LABEL_117;
                }
              }
              v56 = table_extra_bytes_10004[v54];
              *(_QWORD *)__str = 0;
              v113 = 0;
              v57 = malloc_type_zone_calloc((malloc_zone_t *)string_table_zone, 1uLL, 0x48uLL, 0x10B00402199480CuLL);
              *(_QWORD *)&v55[2 * v54] = v57;
              *v57 = -1;
              v58 = db_string_page_flags[v54];
              if (_page_alloc_fetch((uint64_t)v5, (int8x16_t **)__str, 0, &v113, (signed int *)v108, v58))
              {
                v18 = *__error();
                v19 = _SILogForLogForCategory(7);
                if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
                  goto LABEL_63;
                v77 = __error();
                v78 = strerror(*v77);
                *(_DWORD *)__str = 136315906;
                *(_QWORD *)&__str[4] = "db2_create_datastore_with_ctx";
                *(_WORD *)&__str[12] = 1024;
                *(_DWORD *)&__str[14] = 6334;
                v122 = 2080;
                v123 = v5 + 81;
                v124 = 2080;
                v125 = v78;
                v22 = "%s:%d: %s : ERR: can't init the string table! (%s)\n";
                goto LABEL_117;
              }
              v59 = *(_QWORD *)__str;
              v60 = *(_DWORD *)(*(_QWORD *)__str + 12) | v58;
              *(_DWORD *)(*(_QWORD *)__str + 8) = 32;
              *(_DWORD *)(v59 + 12) = v60;
              *(_DWORD *)(v59 + 20) = 0;
              *(_QWORD *)(v59 + 24) = 0;
              v61 = malloc_type_zone_valloc((malloc_zone_t *)string_table_zone, 0x4000uLL, 0x762D8CFFuLL);
              v62 = *(_OWORD *)(v59 + 16);
              *v61 = *(_OWORD *)v59;
              v61[1] = v62;
              *((_DWORD *)v61 + 1) = 0x4000;
              v63 = v113;
              page_release((uint64_t)v5, (_DWORD *)v59, v113, 1u, 0);
              v5[v54 + 12] = v63;
              v64 = *(_QWORD *)&v55[2 * v54];
              *(_DWORD *)(v64 + 60) = 1;
              *(_QWORD *)(v64 + 24) = v61;
              *(_QWORD *)(v64 + 48) = 16;
              *(_QWORD *)(v64 + 32) = malloc_type_zone_malloc((malloc_zone_t *)string_table_zone, 0x80uLL, 0x10040436913F5uLL);
              if (v54 > 1)
              {
                *(_DWORD *)(v64 + 56) = 1;
                if (sdb_uniquing_zone_once != -1)
                  dispatch_once(&sdb_uniquing_zone_once, &__block_literal_global_12_11027);
                v72 = (pthread_rwlock_t *)malloc_type_zone_calloc((malloc_zone_t *)sdb_uniquing_zone, 1uLL, 0x8E8uLL, 0x107004098C11689uLL);
                if (v72)
                {
                  v66 = v72;
                  v56 = 0;
                  goto LABEL_98;
                }
              }
              else
              {
                *(_QWORD *)(v64 + 40) = malloc_type_malloc(*(_QWORD *)(v64 + 48), 0x3C3D8087uLL);
                *(_DWORD *)(v64 + 56) = 1;
                if (sdb_uniquing_zone_once != -1)
                  dispatch_once(&sdb_uniquing_zone_once, &__block_literal_global_10996);
                v65 = (pthread_rwlock_t *)malloc_type_zone_calloc((malloc_zone_t *)sdb_uniquing_zone, 1uLL, 0x8E8uLL, 0x107004098C11689uLL);
                if (v65)
                {
                  v66 = v65;
LABEL_98:
                  pthread_rwlock_init(v66, 0);
                  v66[1].__sig = v56;
                  *(_DWORD *)&v66[11].__opaque[64] = 1024;
                  *(_QWORD *)&v66[11].__opaque[56] = malloc_type_zone_calloc((malloc_zone_t *)sdb_uniquing_zone, 1uLL, 0x4000uLL, 0x1050040DB1D6C16uLL);
                  *(_QWORD *)(v64 + 16) = v66;
                  goto LABEL_80;
                }
              }
              *(_QWORD *)(v64 + 16) = 0;
              free(v61);
              page_free((uint64_t)v5, v63, &v112, 0);
LABEL_80:
              *(_DWORD *)(v64 + 64) = 0;
              ++v54;
              v55 = v5 + 220;
              if (v54 == 6)
                goto LABEL_99;
            }
          }
          v5[1] = v36 | 2;
          free(v26);
          if (!*__error())
            *__error() = 22;
          v5[200] = *__error();
          if (!*__error())
            goto LABEL_78;
        }
        v18 = *__error();
        v19 = _SILogForLogForCategory(7);
        if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          goto LABEL_63;
        v87 = __error();
        v88 = strerror(*v87);
        *(_DWORD *)__str = 136315906;
        *(_QWORD *)&__str[4] = "db2_create_datastore_with_ctx";
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = 6294;
        v122 = 2080;
        v123 = v5 + 81;
        v124 = 2080;
        v125 = v88;
        v22 = "%s:%d: %s : ERR: can't init the map! (%s)\n";
        goto LABEL_117;
      }
      v84 = v17 - 1;
      v85 = (uint64_t *)&v5[4 * v17 + 166];
      while (v84 != 4)
      {
        v86 = *v85;
        v85 += 2;
        ++v84;
        if (v86)
        {
          if (v84 <= 4)
            goto LABEL_29;
          break;
        }
      }
    }
    *((_QWORD *)v5 + 96) = pthread_self();
    goto LABEL_30;
  }
  return v5;
}

int64_t _add_dirty_chunk(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int64_t result;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  _DWORD *v32;
  int v33;
  int v34;
  unsigned int v35;
  signed int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  int v40;
  int64_t v41;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  NSObject *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  const char *v55;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 804) & 8) != 0)
  {
    v49 = *__error();
    v50 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v57 = "_add_dirty_chunk";
      v58 = 1024;
      v59 = 485;
      v60 = 2080;
      v61 = a1 + 324;
      _os_log_error_impl(&dword_1B8270000, v50, OS_LOG_TYPE_ERROR, "%s:%d: %s: ERR: Can't add dirty chunks to a read-only db!", buf, 0x1Cu);
    }
    *__error() = v49;
    v51 = __si_assert_copy_extra_2151(*(_DWORD **)(a1 + 840), -1);
    __message_assert("%s:%u: failed assertion '%s' %s ERR: Can't add dirty chunks to a read-only db %s\n");
LABEL_76:
    free(v51);
    if (!__valid_fsp(*(_DWORD **)(a1 + 840)))
    {
      v52 = 3072;
LABEL_79:
      *(_DWORD *)v52 = -559038737;
      abort();
    }
LABEL_77:
    v52 = 2989;
    goto LABEL_79;
  }
  v5 = a3;
  if (!a3)
  {
    v51 = __si_assert_copy_extra_2151(*(_DWORD **)(a1 + 840), -1);
    __message_assert("%s:%u: failed assertion '%s' %s ERR: Chunk size is null\n");
    goto LABEL_76;
  }
  LODWORD(v6) = a2;
  result = _dirty_datastore_locked(a1, a4);
  if ((_DWORD)result)
    return result;
  v8 = *(_DWORD *)(a1 + 872);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v10 = *(unsigned int *)(a1 + 872);
    while (1)
    {
      v11 = ((int)v10 + v9) / 2;
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 864) + 8 * v11);
      v13 = v11;
      if (v12 <= v6)
      {
        if (v12 >= v6)
          goto LABEL_12;
        v9 = v11 + 1;
        v13 = v10;
      }
      v10 = v13;
      if (v9 >= (int)v13)
        goto LABEL_12;
    }
  }
  v11 = 0;
LABEL_12:
  v14 = v11 - (v11 > 0);
  if (!v8)
    goto LABEL_40;
  v15 = *(_DWORD *)(a1 + 12);
  v16 = *(_QWORD *)(a1 + 864);
  while (1)
  {
    v17 = (unint64_t)v6 << v15;
    v18 = v17 + v5;
    v19 = v14;
    v20 = (unsigned int *)(v16 + 4 + 8 * v14);
    while (1)
    {
      v21 = *(v20 - 1);
      v22 = *v20;
      v23 = v21 << v15;
      if (v17 >= v21 << v15 && v17 <= (v21 << v15) + v22)
        break;
      if (v23 <= v18 && v23 >= v17)
        break;
      if (v6 <= v21)
      {
        v14 = v19;
        goto LABEL_40;
      }
      v20 += 2;
      if (v8 <= ++v19)
      {
        if (v8 <= v14 + 1)
          ++v14;
        else
          v14 = *(_DWORD *)(a1 + 872);
        goto LABEL_40;
      }
    }
    result = *(_QWORD *)(v16 + 8 * v19);
    if (result >= v6)
      v26 = v6;
    else
      v26 = result;
    v27 = (unint64_t)*(_QWORD *)(v16 + 8 * v19) << v15;
    v28 = v27 + HIDWORD(result);
    if (v28 <= v18)
      v28 = v17 + v5;
    v29 = v28 - (v26 << v15);
    if (v29 <= 4294967294)
      break;
    if (v6 < result)
    {
      LODWORD(v5) = (unint64_t)(result - v6) << v15;
      v14 = v19;
      goto LABEL_40;
    }
    v5 = (v27 + v22 - v18);
    v6 = (uint64_t)(v27 + v22) >> v15;
    v14 = v19 + 1;
    if ((int)v19 + 1 >= v8)
    {
LABEL_40:
      v30 = *(_DWORD *)(a1 + 876);
      if (v8 + 1 < v30)
      {
        result = *(_QWORD *)(a1 + 864);
        goto LABEL_44;
      }
      *(_DWORD *)(a1 + 876) = v30 + 128;
      result = (int64_t)malloc_type_realloc(*(void **)(a1 + 864), 8 * (v30 + 128), 0x100004000313F17uLL);
      if (result)
      {
        *(_QWORD *)(a1 + 864) = result;
        v8 = *(_DWORD *)(a1 + 872);
LABEL_44:
        v31 = 8 * v14;
        result = (int64_t)memmove((void *)(result + v31 + 8), (const void *)(result + v31), 8 * (v8 - v14));
        v32 = (_DWORD *)(*(_QWORD *)(a1 + 864) + v31);
        *v32 = v6;
        v32[1] = v5;
        v33 = *(_DWORD *)(a1 + 872) + 1;
LABEL_45:
        *(_DWORD *)(a1 + 872) = v33;
      }
      else
      {
        *(_DWORD *)(a1 + 876) -= 128;
      }
      return result;
    }
  }
  *(_QWORD *)(v16 + 8 * v19) = v26 | (v29 << 32);
  v34 = v19 + 1;
  v35 = *(_DWORD *)(a1 + 872);
  if ((int)v19 + 1 >= v35)
    return result;
  v36 = v19 + 1;
  v37 = 8 * ((int)v19 + 1);
  while (1)
  {
    v38 = *(_QWORD *)(a1 + 864);
    v39 = (unsigned int *)(v38 + 8 * v19);
    v40 = *(_DWORD *)(a1 + 12);
    v41 = (unint64_t)*v39 << v40;
    result = (unint64_t)*(unsigned int *)(v38 + v37) << v40;
    if ((v41 < result || v41 > result + *(unsigned int *)(v38 + v37 + 4)) && (result < v41 || result > v41 + v39[1]))
      goto LABEL_70;
    v44 = *(_QWORD *)v39;
    result = *(_QWORD *)(v38 + v37);
    if (*(_QWORD *)v39 >= result)
      v45 = result;
    else
      v45 = v44;
    v46 = ((unint64_t)*(_QWORD *)v39 << v40) + HIDWORD(*(_QWORD *)v39);
    if (v46 <= (uint64_t)(((unint64_t)*(_QWORD *)(v38 + v37) << v40)
                        + HIDWORD(*(_QWORD *)(v38 + v37))))
      v46 = ((unint64_t)*(_QWORD *)(v38 + v37) << v40) + HIDWORD(*(_QWORD *)(v38 + v37));
    v47 = v46 - (v45 << v40);
    if (v47 > 4294967294)
      break;
    *(_QWORD *)v39 = v45 | (v47 << 32);
    ++v36;
    v35 = *(_DWORD *)(a1 + 872);
    v37 += 8;
    if (v35 <= v36)
      goto LABEL_70;
  }
  if (v44 >= result)
  {
    v53 = __si_assert_copy_extra_2151(0, -1);
    v54 = v53;
    if (v53)
      v55 = v53;
    else
      v55 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 537, v55);
    free(v54);
    goto LABEL_77;
  }
  *(_DWORD *)(v38 + 8 * v19 + 4) = (unint64_t)(result - v44) << v40;
LABEL_70:
  v48 = v34 - v36;
  if (v34 < v36)
  {
    result = (int64_t)memmove((void *)(*(_QWORD *)(a1 + 864) + 8 * v19 + 8), (const void *)(*(_QWORD *)(a1 + 864) + 8 * v36), 8 * (v35 - v36));
    v33 = v48 + *(_DWORD *)(a1 + 872);
    goto LABEL_45;
  }
  return result;
}

uint64_t _page_alloc_fetch(uint64_t a1, int8x16_t **a2, int a3, unsigned int *a4, signed int *a5, unsigned int a6)
{
  signed int v9;
  uint64_t v12;
  off_t v13;
  int v14;
  NSObject *v15;
  os_log_type_t v16;
  int8x16_t *v17;
  int8x16_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  NSObject *v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  _BYTE v34[18];
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  signed int v38;
  __int16 v39;
  off_t v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v9 = a3;
  v43 = *MEMORY[0x1E0C80C00];
  if (a3 <= 4095)
    v9 = *(_DWORD *)(a1 + 44);
  v12 = fd_lseek(*(_DWORD **)(a1 + 848), 0, 2);
  if (v12 == -1)
    return *__error();
  v13 = v12;
  if ((v12 & 0xFFF) != 0)
  {
    v14 = *__error();
    v15 = _SILogForLogForCategory(7);
    v16 = dword_1EF19FCA8 < 3;
    if (os_log_type_enabled(v15, (os_log_type_t)(dword_1EF19FCA8 < 3)))
    {
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1B8270000, v15, v16, "*warn* sdb not page-size aligned. Extending.", v34, 2u);
    }
    *__error() = v14;
    v13 = (v13 & 0xFFFFFFFFFFFFF000) + 4096;
    fd_truncate(*(_QWORD *)(a1 + 848), v13);
  }
  v17 = (int8x16_t *)malloc_type_calloc(v9, 1uLL, 0x30137CuLL);
  if (!v17)
  {
    *__error() = 12;
    return *__error();
  }
  v18 = v17;
  v17->i32[0] = 1684172850;
  v17->i32[1] = v9;
  v17->i32[2] = 20;
  v17->i32[3] = a6 | 1;
  if ((a6 & 4) != 0)
    v17[1].i32[0] = v9;
  _add_dirty_chunk(a1, v13 >> *(_DWORD *)(a1 + 12), v9, (a6 >> 14) & 1);
  if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
  {
    *v18 = vrev32q_s8(*v18);
    v18[1].i32[0] = bswap32(v18[1].u32[0]);
  }
  v19 = sdb_pwrite(*(_QWORD *)(a1 + 848), (uint64_t)v18, v9, v13);
  if (v19 != v9)
  {
    v20 = *__error();
    if ((*(_BYTE *)(a1 + 4) & 0x80) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  v20 = 0;
  if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
  {
LABEL_19:
    *v18 = vrev32q_s8(*v18);
    v18[1].i32[0] = bswap32(v18[1].u32[0]);
  }
LABEL_20:
  if (v19 == v9)
  {
    *a4 = v13 >> *(_DWORD *)(a1 + 12);
    *a5 = v9;
    v22 = *(_QWORD *)(a1 + 928);
    v23 = *a4;
    *(_QWORD *)v34 = 0;
    *(_QWORD *)&v34[8] = 0;
    v24 = atomic_load((unsigned int *)(v22 + 248));
    if (v24 > v23)
    {
      *(_QWORD *)&v34[8] = 0;
      *(_QWORD *)v34 = *(_QWORD *)v22;
      *(_DWORD *)&v34[8] = v23;
      _cache_remove((uint64_t *)v34);
    }
    v25 = *(unsigned int *)(v22 + 220);
    if ((int)v25 >= 1)
    {
      v26 = 0;
      v27 = (_DWORD *)(v22 + 252);
      while (*v27 != v23)
      {
        ++v26;
        ++v27;
        if (v25 == v26)
          goto LABEL_37;
      }
      v32 = v22 + 48 * v26;
      free(*(void **)(v32 + 280));
      free(*(void **)(v32 + 272));
      *(_OWORD *)(v32 + 288) = 0u;
      *(_OWORD *)(v32 + 304) = 0u;
      *(_OWORD *)(v32 + 272) = 0u;
      *v27 = 0;
    }
LABEL_37:
    v21 = 0;
    *a2 = v18;
  }
  else
  {
    *(_DWORD *)(a1 + 4) |= 2u;
    v28 = *__error();
    v29 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v34 = 136315394;
      *(_QWORD *)&v34[4] = "_page_alloc_fetch";
      *(_WORD *)&v34[12] = 1024;
      *(_DWORD *)&v34[14] = 2127;
      _os_log_error_impl(&dword_1B8270000, v29, OS_LOG_TYPE_ERROR, "%s:%d: Failed allocating page", v34, 0x12u);
    }
    *__error() = v28;
    *a4 = -1;
    free(v18);
    if (v20)
      v21 = v20;
    else
      v21 = 22;
    *(_DWORD *)(a1 + 800) = v21;
    v30 = *__error();
    v31 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v34 = 136316418;
      *(_QWORD *)&v34[4] = "_page_alloc_fetch";
      *(_WORD *)&v34[12] = 1024;
      *(_DWORD *)&v34[14] = 2135;
      v35 = 2080;
      v36 = a1 + 324;
      v37 = 1024;
      v38 = v9;
      v39 = 2048;
      v40 = v13;
      v41 = 1024;
      v42 = v21;
      _os_log_error_impl(&dword_1B8270000, v31, OS_LOG_TYPE_ERROR, "%s:%d: pwrite(%s, %d, %lld) error: %d", v34, 0x32u);
    }
    *__error() = v30;
  }
  return v21;
}

void page_free(uint64_t a1, unsigned int a2, _DWORD *a3, unsigned int a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  int v28;
  NSObject *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  int64_t v37;
  int *v38;
  int64_t v39;
  int64_t v40;
  NSObject *v42;
  os_log_type_t v43;
  int v44;
  int v45;
  int v46;
  NSObject *v47;
  unsigned int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  NSObject *v54;
  NSObject *v55;
  off_t v56;
  int v57;
  NSObject *v58;
  uint64_t v59;
  off_t v60;
  int v61;
  NSObject *v62;
  int v63;
  int v64;
  off_t v65;
  int *v66;
  char *v67;
  char *v68;
  char *v69;
  const char *v70;
  int v71;
  NSObject *v72;
  stat v73;
  _OWORD v74[2];
  _BYTE buf[18];
  __int16 v76;
  _BYTE v77[10];
  _BYTE v78[34];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  memset(v74, 0, 20);
  memset(&v73, 0, sizeof(v73));
  v8 = *(_QWORD *)(a1 + 928);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v9 = atomic_load((unsigned int *)(v8 + 248));
  if (v9 > a2)
  {
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = *(_QWORD *)v8;
    *(_DWORD *)&buf[8] = a2;
    _cache_remove((uint64_t *)buf);
  }
  v10 = *(_QWORD *)(a1 + 928);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v11 = atomic_load((unsigned int *)(v10 + 248));
  if (v11 > a2)
  {
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = *(_QWORD *)v10;
    *(_DWORD *)&buf[8] = a2;
    _cache_remove((uint64_t *)buf);
  }
  v12 = *(unsigned int *)(v10 + 220);
  if ((int)v12 < 1)
  {
LABEL_9:
    v15 = fd_pread(*(_DWORD **)(a1 + 848), v74, 0x14uLL, (unint64_t)a2 << *(_DWORD *)(a1 + 12));
    if (v15 != 20)
    {
      v17 = v15;
      v18 = *__error();
      v19 = *__error();
      v20 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "page_free";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2184;
        v76 = 1024;
        *(_DWORD *)v77 = a2;
        *(_WORD *)&v77[4] = 1024;
        *(_DWORD *)&v77[6] = v18;
        *(_WORD *)v78 = 2080;
        *(_QWORD *)&v78[2] = a1 + 324;
        *(_WORD *)&v78[10] = 2048;
        *(_QWORD *)&v78[12] = v17;
        *(_WORD *)&v78[20] = 2048;
        *(_QWORD *)&v78[22] = 20;
        _os_log_error_impl(&dword_1B8270000, v20, OS_LOG_TYPE_ERROR, "%s:%d: Failed reading pgnum %d error:%d (%s) %zd != %zd", buf, 0x3Cu);
      }
      *__error() = v19;
      *__error() = v18;
      *(_DWORD *)(a1 + 4) |= 4u;
      if (!*__error())
        *__error() = 22;
      __error();
      return;
    }
    v16 = v74[0];
    if ((*(_BYTE *)(a1 + 4) & 0x80) != 0 && LODWORD(v74[0]) == 846226020)
    {
      LODWORD(v74[0]) = 1684172850;
      *(int8x16_t *)((char *)v74 + 4) = vrev32q_s8(*(int8x16_t *)((char *)v74 + 4));
      if ((BYTE12(v74[0]) & 1) == 0)
        goto LABEL_24;
      goto LABEL_28;
    }
  }
  else
  {
    v13 = 0;
    v14 = (_DWORD *)(v10 + 252);
    while (*v14 != a2)
    {
      ++v13;
      ++v14;
      if (v12 == v13)
        goto LABEL_9;
    }
    v21 = v10 + 272;
    v22 = v10 + 272 + 48 * v13;
    v23 = *(_OWORD *)*(_QWORD *)v22;
    LODWORD(v74[1]) = *(_DWORD *)(*(_QWORD *)v22 + 16);
    v74[0] = v23;
    *v14 = 0;
    *(_DWORD *)(v22 + 16) = 0;
    *(_QWORD *)v22 = 0;
    v24 = v21 + 48 * v13;
    *(_QWORD *)(v24 + 24) = 0;
    *(_DWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 40) = 0;
    v27 = *(void **)(v22 + 8);
    v26 = (_QWORD *)(v22 + 8);
    v25 = v27;
    if (v27)
    {
      free(v25);
      *v26 = 0;
    }
    v16 = v74[0];
  }
  if (v16 != 1684172850 || (BYTE12(v74[0]) & 1) == 0)
  {
LABEL_24:
    v28 = *__error();
    v29 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "page_free";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2201;
      v76 = 2080;
      *(_QWORD *)v77 = a1 + 324;
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)v78 = a2;
      *(_WORD *)&v78[4] = 1024;
      *(_DWORD *)&v78[6] = v74[0];
      *(_WORD *)&v78[10] = 1024;
      strcpy(&v78[12], "2pbd");
      v78[17] = 4;
      *(_DWORD *)&v78[18] = HIDWORD(v74[0]);
      _os_log_error_impl(&dword_1B8270000, v29, OS_LOG_TYPE_ERROR, "%s:%d: %s : free: ERR: Danger! page num 0x%x looks bad (signature 0x%x expected 0x%x flags 0x%x)\n", buf, 0x34u);
    }
    goto LABEL_26;
  }
LABEL_28:
  v30 = *(_QWORD *)(a1 + 848);
  if (!v30)
    return;
  while (1)
  {
    v31 = fstatat(*(_DWORD *)(v30 + 44), *(const char **)(v30 + 72), &v73, 2048);
    v32 = g_prot_error_callback;
    if (v31 != -1 || g_prot_error_callback == 0)
      break;
    v34 = *(unsigned int *)(v30 + 40);
    v35 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v32 + 16))(v32, v34, *v35, 8) & 1) == 0)
      return;
  }
  if (v31)
    return;
  v36 = a2;
  v37 = (unint64_t)a2 << *(_DWORD *)(a1 + 12);
  v38 = (int *)v74 + 1;
  if ((BYTE12(v74[0]) & 4) != 0)
    v38 = (int *)&v74[1];
  v39 = v37 + *v38;
  v40 = (*(_DWORD *)(a1 + 40) + *(_DWORD *)(a1 + 36));
  if (v39 == v73.st_size && v37 >= v40)
  {
    *a3 = 1;
    if ((((unint64_t)a2 << *(_DWORD *)(a1 + 12)) & 0xFFF) != 0)
    {
      v68 = __si_assert_copy_extra_2151(0, -1);
      v69 = v68;
      v70 = "";
      if (v68)
        v70 = v68;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 2216, "(((off_t)(pgnum) << (dst->pg_shift)) & ((1 << 12)-1))==0", v70);
      free(v69);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
    *(_BYTE *)(a1 + 796) = 1;
    db_rwlock_wakeup(a1 + 584, 1, 1);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
    v44 = fd_truncate(*(_QWORD *)(a1 + 848), (unint64_t)a2 << *(_DWORD *)(a1 + 12));
    v45 = *__error();
    db_upgrade_lock(a1 + 584);
    if (v44)
    {
      v46 = *__error();
      v47 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
LABEL_49:
        *__error() = v46;
        return;
      }
      v59 = v36 << *(_DWORD *)(a1 + 12);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "page_free";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2227;
      v76 = 2080;
      *(_QWORD *)v77 = a1 + 324;
      *(_WORD *)&v77[8] = 2048;
      *(_QWORD *)v78 = v59;
      *(_WORD *)&v78[8] = 1024;
      *(_DWORD *)&v78[10] = v45;
LABEL_69:
      _os_log_error_impl(&dword_1B8270000, v47, OS_LOG_TYPE_ERROR, "%s:%d: ftruncate(%s, %lld) error: %d", buf, 0x2Cu);
      goto LABEL_49;
    }
    return;
  }
  if (v37 < v40)
  {
    v28 = *__error();
    v42 = _SILogForLogForCategory(7);
    v43 = 2 * (dword_1EF19FCA8 < 4);
    if (os_log_type_enabled(v42, v43))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_impl(&dword_1B8270000, v42, v43, "page_free: ERR: tried to free the first & only page of the file (pgnum 0x%x).\n", buf, 8u);
    }
LABEL_26:
    *__error() = v28;
    return;
  }
  *a3 = 1;
  v48 = (unsigned int *)malloc_type_valloc(0x4000uLL, 0x9BED8213uLL);
  v49 = fd_pread(*(_DWORD **)(a1 + 848), v48, 0x4000uLL, v73.st_size - 0x4000);
  if (v49 != 0x4000)
  {
    v51 = v49;
    v52 = *__error();
    v53 = *__error();
    v54 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "page_free";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2336;
      v76 = 2048;
      *(_QWORD *)v77 = v73.st_size - 0x4000;
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)v78 = v52;
      *(_WORD *)&v78[4] = 2080;
      *(_QWORD *)&v78[6] = a1 + 324;
      *(_WORD *)&v78[14] = 2048;
      *(_QWORD *)&v78[16] = v51;
      *(_WORD *)&v78[24] = 2048;
      *(_QWORD *)&v78[26] = 0x4000;
      _os_log_error_impl(&dword_1B8270000, v54, OS_LOG_TYPE_ERROR, "%s:%d: Failed reading pgnum %lld error:%d (%s) %zd != %zd", buf, 0x40u);
    }
    *__error() = v53;
    goto LABEL_60;
  }
  if (sdb_pwrite(*(_QWORD *)(a1 + 848), (uint64_t)v48, 0x4000uLL, (unint64_t)a2 << *(_DWORD *)(a1 + 12)) != 0x4000)
  {
    v52 = *__error();
    v55 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
    {
      v65 = v73.st_size - 0x4000;
      v66 = __error();
      v67 = strerror(*v66);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "page_free";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2272;
      v76 = 2048;
      *(_QWORD *)v77 = v65;
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)v78 = a2;
      *(_WORD *)&v78[4] = 2080;
      *(_QWORD *)&v78[6] = v67;
      _os_log_error_impl(&dword_1B8270000, v55, OS_LOG_TYPE_ERROR, "%s:%d: page_free: ERR: error moving page from %lld to %d (%s)\n", buf, 0x2Cu);
    }
LABEL_60:
    *__error() = v52;
    free(v48);
    return;
  }
  v50 = v48[3];
  if ((*(_BYTE *)(a1 + 4) & 0x80) != 0 && v50 >> 28)
  {
    v50 = bswap32(v50);
    free(v48);
    goto LABEL_62;
  }
  free(v48);
  if ((v50 & 0xF0) != 0)
  {
LABEL_62:
    v56 = (v73.st_size - 0x4000) >> *(_DWORD *)(a1 + 12);
    if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
    {
      if (dword_1EF19FCA8 >= 5)
      {
        v57 = *__error();
        v58 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v56;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = a2;
          _os_log_impl(&dword_1B8270000, v58, OS_LOG_TYPE_DEFAULT, "Skipping string page move from %d to %d -- no string table!", buf, 0xEu);
        }
        *__error() = v57;
      }
    }
    else
    {
      update_string_table(a1, (v73.st_size - 0x4000) >> *(_DWORD *)(a1 + 12), a2, v50);
    }
    goto LABEL_76;
  }
  v60 = (v73.st_size - 0x4000) >> *(_DWORD *)(a1 + 12);
  if (dword_1EF19FCA8 >= 5)
  {
    v71 = *__error();
    v72 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v60;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a2;
      _os_log_impl(&dword_1B8270000, v72, OS_LOG_TYPE_DEFAULT, "Object page move from %d to %d", buf, 0xEu);
    }
    *__error() = v71;
  }
  db_cache_move_page(*(_QWORD *)(a1 + 928), v60, a2);
  if (map_change_pgnum(a1, v60, a2))
  {
    v61 = *__error();
    v62 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "page_free";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2313;
      v76 = 2048;
      *(_QWORD *)v77 = v73.st_size - 0x4000;
      *(_WORD *)&v77[8] = 1024;
      *(_DWORD *)v78 = a2;
      _os_log_error_impl(&dword_1B8270000, v62, OS_LOG_TYPE_ERROR, "%s:%d: page_free: ERR: failed to change the map page offset from %lld to %d\n", buf, 0x22u);
    }
    *__error() = v61;
  }
  page_cache_move(*(_QWORD *)(a1 + 928), a2, (v73.st_size - 0x4000) >> *(_DWORD *)(a1 + 12));
LABEL_76:
  _add_dirty_chunk(a1, a2, 0x4000u, (a4 >> 14) & 1);
  db_downgrade_lock((pthread_mutex_t *)(a1 + 584));
  v63 = fd_truncate(*(_QWORD *)(a1 + 848), v73.st_size - 0x4000);
  v64 = *__error();
  db_upgrade_lock(a1 + 584);
  if (v63)
  {
    v46 = *__error();
    v47 = _SILogForLogForCategory(7);
    if (!os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      goto LABEL_49;
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "page_free";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2331;
    v76 = 2080;
    *(_QWORD *)v77 = a1 + 324;
    *(_WORD *)&v77[8] = 2048;
    *(_QWORD *)v78 = v73.st_size - 0x4000;
    *(_WORD *)&v78[8] = 1024;
    *(_DWORD *)&v78[10] = v64;
    goto LABEL_69;
  }
}

uint64_t db2_sync_datastore(uint64_t result, int a2)
{
  uint64_t v3;
  pthread_key_t v4;
  char *v5;
  unsigned int v6;
  unint64_t v7;
  signed int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  NSObject *v15;
  int v16;
  pthread_override_s *v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  int v38;
  int v39;
  NSObject *v40;
  int v41;
  pthread_override_s *v42;
  char v43;
  _DWORD *v44;
  _DWORD *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  NSObject *v51;
  int v52;
  int v53;
  NSObject *v54;
  int v55;
  char *v56;
  uint64_t v57;
  int v58;
  int v59;
  NSObject *v60;
  char *v61;
  int v62;
  NSObject *v63;
  NSObject *log;
  int v65;
  int v66;
  unint64_t v67;
  char *v68;
  uint8_t buf[4];
  _BYTE v70[10];
  int v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  char *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(result + 804) & 8) != 0)
    return result;
  v3 = result;
  v4 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v4 = __THREAD_SLOT_KEY;
  }
  v5 = (char *)pthread_getspecific(v4);
  HIDWORD(v7) = qos_class_self() - 9;
  LODWORD(v7) = HIDWORD(v7);
  v6 = v7 >> 2;
  if (v6 > 6)
    v8 = 0;
  else
    v8 = dword_1B8630ED0[v6];
  v9 = pthread_mutex_lock((pthread_mutex_t *)(v3 + 584));
  if (*(_QWORD *)(v3 + 768) || *(_DWORD *)(v3 + 780) || *(_BYTE *)(v3 + 796))
    goto LABEL_10;
  if (v8 <= 5)
  {
    if (*(_QWORD *)(v3 + 16 * v8 + 648))
    {
LABEL_10:
      db_rwlock_wait(v3 + 584, v8, 2);
      goto LABEL_11;
    }
    v19 = v8 - 1;
    v20 = (uint64_t *)(v3 + 16 * v8 + 664);
    while (v19 != 4)
    {
      v21 = *v20;
      v20 += 2;
      ++v19;
      if (v21)
      {
        if (v19 <= 4)
          goto LABEL_10;
        break;
      }
    }
  }
  *(_QWORD *)(v3 + 768) = pthread_self();
LABEL_11:
  pthread_mutex_unlock((pthread_mutex_t *)(v3 + 584));
  if (v9)
  {
    v62 = *__error();
    v63 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v70 = "db2_sync_datastore";
      *(_WORD *)&v70[8] = 1024;
      v71 = 8996;
      v72 = 1024;
      LODWORD(v73) = v9;
      _os_log_error_impl(&dword_1B8270000, v63, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
    }
    *__error() = v62;
    sdb2_die(v3, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 8996);
  }
  v10 = (uint64_t)(v5 - 1);
  if (v5)
  {
    v11 = CIOnThreadCleanUpPush((uint64_t)(v5 - 1), (uint64_t)db_write_unlock, v3 + 584);
    if ((*(_BYTE *)(v3 + 4) & 2) == 0)
      goto LABEL_14;
LABEL_21:
    v14 = *__error();
    v15 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v70 = "db2_sync_datastore";
      *(_WORD *)&v70[8] = 1024;
      v71 = 8999;
      v72 = 2080;
      v73 = v3 + 324;
      _os_log_error_impl(&dword_1B8270000, v15, OS_LOG_TYPE_ERROR, "%s:%d: %s : db2_sync_datastore: !WARNING! prior write-errors invalidate sync.\n", buf, 0x1Cu);
    }
    *__error() = v14;
    v16 = pthread_mutex_lock((pthread_mutex_t *)(v3 + 584));
    *(_DWORD *)(v3 + 788) = 0;
    v17 = *(pthread_override_s **)(v3 + 760);
    *(_QWORD *)(v3 + 768) = 0;
    *(_QWORD *)(v3 + 760) = 0;
    v18 = *(_DWORD *)(v3 + 780) != 0;
    *(_BYTE *)(v3 + 796) = 0;
    db_rwlock_wakeup(v3 + 584, v18, 0);
    result = pthread_mutex_unlock((pthread_mutex_t *)(v3 + 584));
    if (v17)
      result = pthread_override_qos_class_end_np(v17);
    if (v16)
      sdb2_die(v3, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 9000);
    goto LABEL_98;
  }
  v11 = -1;
  if ((*(_BYTE *)(v3 + 4) & 2) != 0)
    goto LABEL_21;
LABEL_14:
  if ((*(_BYTE *)(v3 + 804) & 0x14) != 0)
  {
    v12 = *(_QWORD *)(v3 + 880);
    if (v12)
    {
      v13 = *(_DWORD *)(v12 + 216);
      switch(v13)
      {
        case -270471200:
          _data_map_ext_sync_data(v12);
          break;
        case 1684300900:
          _data_map64_sync_data(v12);
          break;
        case 842150450:
          _data_map32_sync_data(v12, 1);
          break;
      }
    }
    if ((*(_BYTE *)(v3 + 804) & 0x14) != 0)
    {
      v22 = *(_QWORD *)(v3 + 888);
      if (v22)
      {
        v23 = *(_DWORD *)(v22 + 216);
        switch(v23)
        {
          case -270471200:
            _data_map_ext_sync_data(v22);
            break;
          case 1684300900:
            _data_map64_sync_data(v22);
            break;
          case 842150450:
            _data_map32_sync_data(v22, 1);
            break;
        }
      }
      if ((*(_BYTE *)(v3 + 804) & 0x14) != 0)
      {
        v24 = *(_QWORD *)(v3 + 896);
        if (v24)
        {
          v25 = *(_DWORD *)(v24 + 216);
          switch(v25)
          {
            case -270471200:
              _data_map_ext_sync_data(v24);
              break;
            case 1684300900:
              _data_map64_sync_data(v24);
              break;
            case 842150450:
              _data_map32_sync_data(v24, 1);
              break;
          }
        }
        if ((*(_BYTE *)(v3 + 804) & 0x14) != 0)
        {
          v26 = *(_QWORD *)(v3 + 904);
          if (v26)
          {
            v27 = *(_DWORD *)(v26 + 216);
            switch(v27)
            {
              case -270471200:
                _data_map_ext_sync_data(v26);
                break;
              case 1684300900:
                _data_map64_sync_data(v26);
                break;
              case 842150450:
                _data_map32_sync_data(v26, 1);
                break;
            }
          }
          if ((*(_BYTE *)(v3 + 804) & 0x14) != 0)
          {
            v28 = *(_QWORD *)(v3 + 912);
            if (v28)
            {
              v29 = *(_DWORD *)(v28 + 216);
              switch(v29)
              {
                case -270471200:
                  _data_map_ext_sync_data(v28);
                  break;
                case 1684300900:
                  _data_map64_sync_data(v28);
                  break;
                case 842150450:
                  _data_map32_sync_data(v28, 1);
                  break;
              }
            }
          }
        }
      }
    }
  }
  v30 = *(_QWORD *)(v3 + 920);
  if (v30)
  {
    v31 = *(_DWORD *)(v30 + 216);
    switch(v31)
    {
      case -270471200:
        _data_map_ext_sync_data(v30);
        break;
      case 1684300900:
        _data_map64_sync_data(v30);
        break;
      case 842150450:
        _data_map32_sync_data(v30, 1);
        break;
    }
  }
  v66 = a2;
  v67 = v11;
  v68 = v5;
  v32 = v5 - 1;
  for (i = 0; i != 6; ++i)
  {
    v34 = v3 + 8 * i;
    v35 = *(_QWORD *)(v34 + 880);
    if (i == 5 || (*(_DWORD *)(v3 + 804) & 0x14) != 0)
    {
      if (v35)
      {
        v38 = *(_DWORD *)(v35 + 216);
        switch(v38)
        {
          case -270471200:
            _data_map_ext_sync_data(v35);
            break;
          case 1684300900:
            _data_map64_sync_data(v35);
            break;
          case 842150450:
            _data_map32_sync_data(v35, 1);
            break;
        }
      }
    }
    else
    {
      v36 = *(_DWORD **)(v35 + 8);
      if (v36)
      {
        page_release(v3, v36, *(_DWORD *)v35, 5u, 0);
        if (dword_1EF19FCA8 >= 5)
        {
          v65 = *__error();
          log = _SILogForLogForCategory(7);
          if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
          {
            v37 = **(_DWORD **)(v34 + 880);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v70 = v37;
            *(_WORD *)&v70[4] = 1024;
            *(_DWORD *)&v70[6] = i;
            _os_log_impl(&dword_1B8270000, log, OS_LOG_TYPE_DEFAULT, "Push dirty string page %d to disk (%d)", buf, 0xEu);
          }
          *__error() = v65;
        }
      }
    }
  }
  v10 = (uint64_t)v32;
  v11 = v67;
  if (!_db2_flush_all_cache(v3, 0) && !map_write(v3))
  {
    v48 = *(_DWORD *)(v3 + 4);
    v5 = v68;
    if ((v48 & 1) != 0)
    {
      result = db_write_unlock(v3 + 584);
      if ((_DWORD)result)
        sdb2_die(v3, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 9033);
      goto LABEL_98;
    }
    if ((v48 & 2) == 0)
      *(_DWORD *)(v3 + 4) = v48 | 1;
    fd_sync(*(_QWORD *)(v3 + 848), v66);
    if ((*(_BYTE *)(v3 + 4) & 0x80) != 0)
    {
      *(int8x16_t *)v3 = vrev32q_s8(*(int8x16_t *)v3);
      *(_DWORD *)(v3 + 16) = bswap32(*(_DWORD *)(v3 + 16));
      *(int8x16_t *)(v3 + 20) = vrev64q_s8(*(int8x16_t *)(v3 + 20));
      *(int8x16_t *)(v3 + 36) = vrev32q_s8(*(int8x16_t *)(v3 + 36));
      *(int8x16_t *)(v3 + 52) = vrev32q_s8(*(int8x16_t *)(v3 + 52));
    }
    if (fd_pwrite(*(_QWORD *)(v3 + 848), v3, 0x1000uLL, 0) != 4096)
    {
      v52 = *__error();
      if ((*(_DWORD *)(v3 + 4) & 0x80000000) != 0)
      {
        *(int8x16_t *)v3 = vrev32q_s8(*(int8x16_t *)v3);
        *(_DWORD *)(v3 + 16) = bswap32(*(_DWORD *)(v3 + 16));
        *(int8x16_t *)(v3 + 20) = vrev64q_s8(*(int8x16_t *)(v3 + 20));
        *(int8x16_t *)(v3 + 36) = vrev32q_s8(*(int8x16_t *)(v3 + 36));
        *(int8x16_t *)(v3 + 52) = vrev32q_s8(*(int8x16_t *)(v3 + 52));
      }
      v53 = *__error();
      v54 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        v56 = strerror(v52);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)v70 = "db2_sync_datastore";
        *(_WORD *)&v70[8] = 1024;
        v71 = 9060;
        v72 = 2080;
        v73 = v3 + 324;
        v74 = 2080;
        v75 = v56;
        _os_log_error_impl(&dword_1B8270000, v54, OS_LOG_TYPE_ERROR, "%s:%d: %s : db2_sync_datastore: ERR: Can't write DST header (%s)\n", buf, 0x26u);
      }
      *__error() = v53;
      *(_DWORD *)(v3 + 4) |= 2u;
      *(_DWORD *)(v3 + 800) = v52;
      result = db_write_unlock(v3 + 584);
      if ((_DWORD)result)
        sdb2_die(v3, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 9063);
      goto LABEL_98;
    }
    if ((*(_BYTE *)(v3 + 804) & 0x14) != 0)
    {
      _data_map_sync_header(*(_QWORD *)(v3 + 880));
      if ((*(_BYTE *)(v3 + 804) & 0x14) != 0)
      {
        _data_map_sync_header(*(_QWORD *)(v3 + 888));
        if ((*(_BYTE *)(v3 + 804) & 0x14) != 0)
        {
          _data_map_sync_header(*(_QWORD *)(v3 + 896));
          if ((*(_BYTE *)(v3 + 804) & 0x14) != 0)
          {
            _data_map_sync_header(*(_QWORD *)(v3 + 904));
            if ((*(_BYTE *)(v3 + 804) & 0x14) != 0)
              _data_map_sync_header(*(_QWORD *)(v3 + 912));
          }
        }
      }
    }
    _data_map_sync_header(*(_QWORD *)(v3 + 920));
    v49 = fd_sync(*(_QWORD *)(v3 + 848), v66);
    if (v49 || (v49 = sync_dirty_chunks(v3)) != 0)
    {
      if ((*(_DWORD *)(v3 + 4) & 0x80000000) != 0)
      {
        *(int8x16_t *)v3 = vrev32q_s8(*(int8x16_t *)v3);
        *(_DWORD *)(v3 + 16) = bswap32(*(_DWORD *)(v3 + 16));
        *(int8x16_t *)(v3 + 20) = vrev64q_s8(*(int8x16_t *)(v3 + 20));
        *(int8x16_t *)(v3 + 36) = vrev32q_s8(*(int8x16_t *)(v3 + 36));
        *(int8x16_t *)(v3 + 52) = vrev32q_s8(*(int8x16_t *)(v3 + 52));
      }
      if (v49 == 28)
        goto LABEL_121;
      v50 = *__error();
      v51 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
LABEL_120:
        *__error() = v50;
        *(_DWORD *)(v3 + 4) |= 2u;
        *(_DWORD *)(v3 + 800) = v49;
LABEL_121:
        result = db_write_unlock(v3 + 584);
        if ((_DWORD)result)
          sdb2_die(v3, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 9113);
        goto LABEL_98;
      }
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v70 = "db2_sync_datastore";
      *(_WORD *)&v70[8] = 1024;
      v71 = 9107;
    }
    else
    {
      v55 = fd_sync(*(_QWORD *)(v3 + 840), v66);
      if (!v55)
      {
        v57 = fd_pwrite(*(_QWORD *)(v3 + 840), v3, 0x1000uLL, 0);
        v58 = *__error();
        if ((*(_DWORD *)(v3 + 4) & 0x80000000) != 0)
        {
          *(int8x16_t *)v3 = vrev32q_s8(*(int8x16_t *)v3);
          *(_DWORD *)(v3 + 16) = bswap32(*(_DWORD *)(v3 + 16));
          *(int8x16_t *)(v3 + 20) = vrev64q_s8(*(int8x16_t *)(v3 + 20));
          *(int8x16_t *)(v3 + 36) = vrev32q_s8(*(int8x16_t *)(v3 + 36));
          *(int8x16_t *)(v3 + 52) = vrev32q_s8(*(int8x16_t *)(v3 + 52));
        }
        if (v57 != 4096)
        {
          v59 = *__error();
          v60 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
          {
            v61 = strerror(v58);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)v70 = "db2_sync_datastore";
            *(_WORD *)&v70[8] = 1024;
            v71 = 9090;
            v72 = 2080;
            v73 = v3 + 324;
            v74 = 2080;
            v75 = v61;
            _os_log_error_impl(&dword_1B8270000, v60, OS_LOG_TYPE_ERROR, "%s:%d: %s : ERR: Can't write DST header (2: %s)\n", buf, 0x26u);
          }
          *__error() = v59;
          *(_DWORD *)(v3 + 4) |= 2u;
          *(_DWORD *)(v3 + 800) = v58;
        }
        fd_sync(*(_QWORD *)(v3 + 840), v66);
        goto LABEL_121;
      }
      v49 = v55;
      v50 = *__error();
      v51 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        goto LABEL_120;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v70 = "db2_sync_datastore";
      *(_WORD *)&v70[8] = 1024;
      v71 = 9097;
    }
    _os_log_error_impl(&dword_1B8270000, v51, OS_LOG_TYPE_ERROR, "%s:%d: Failed syncing db", buf, 0x12u);
    goto LABEL_120;
  }
  v39 = *__error();
  v40 = _SILogForLogForCategory(7);
  v5 = v68;
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)v70 = "db2_sync_datastore";
    *(_WORD *)&v70[8] = 1024;
    v71 = 9024;
    v72 = 2080;
    v73 = v3 + 324;
    _os_log_error_impl(&dword_1B8270000, v40, OS_LOG_TYPE_ERROR, "%s:%d: %s : db2_sync_datastore: !WARNING! write-errors flushing cache/writing map.\n", buf, 0x1Cu);
  }
  *__error() = v39;
  v41 = pthread_mutex_lock((pthread_mutex_t *)(v3 + 584));
  *(_DWORD *)(v3 + 788) = 0;
  v42 = *(pthread_override_s **)(v3 + 760);
  *(_QWORD *)(v3 + 768) = 0;
  *(_QWORD *)(v3 + 760) = 0;
  v43 = *(_DWORD *)(v3 + 780) != 0;
  *(_BYTE *)(v3 + 796) = 0;
  db_rwlock_wakeup(v3 + 584, v43, 0);
  result = pthread_mutex_unlock((pthread_mutex_t *)(v3 + 584));
  if (v42)
    result = pthread_override_qos_class_end_np(v42);
  if (v41)
    sdb2_die(v3, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 9025);
LABEL_98:
  if (v5)
  {
    result = CIOnThreadCleanUpClearItem(v10, v11);
    v44 = &threadData[18 * v10];
    v47 = v44[14];
    v45 = v44 + 14;
    v46 = v47;
    if (v11 + 1 == v47)
      *v45 = v46 - 1;
  }
  return result;
}

void db2_set_garbage_collector(_QWORD *a1, void *aBlock, void *a3, void *a4)
{
  void *v5;
  void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  v5 = a3;
  if (aBlock)
  {
    v7 = _Block_copy(aBlock);
    if (!v5)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = 0;
  if (a3)
LABEL_3:
    v5 = _Block_copy(v5);
LABEL_4:
  if (a4)
    a4 = _Block_copy(a4);
  v8 = (const void *)a1[101];
  if (v8)
    _Block_release(v8);
  v9 = (const void *)a1[102];
  if (v9)
    _Block_release(v9);
  v10 = (const void *)a1[103];
  if (v10)
    _Block_release(v10);
  a1[101] = v7;
  a1[102] = v5;
  a1[103] = a4;
}

void cleanup_string_tables(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
  {
    v2 = *(_QWORD *)(a1 + 880);
    if (v2)
    {
      data_map_destroy(v2);
      *(_QWORD *)(a1 + 880) = 0;
    }
  }
  else
  {
    destroy_string_table(a1, 0);
  }
  if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
  {
    v3 = *(_QWORD *)(a1 + 888);
    if (v3)
    {
      data_map_destroy(v3);
      *(_QWORD *)(a1 + 888) = 0;
    }
  }
  else
  {
    destroy_string_table(a1, 1u);
  }
  if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
  {
    v4 = *(_QWORD *)(a1 + 896);
    if (v4)
    {
      data_map_destroy(v4);
      *(_QWORD *)(a1 + 896) = 0;
    }
  }
  else
  {
    destroy_string_table(a1, 2u);
  }
  if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
  {
    v5 = *(_QWORD *)(a1 + 904);
    if (v5)
    {
      data_map_destroy(v5);
      *(_QWORD *)(a1 + 904) = 0;
    }
  }
  else
  {
    destroy_string_table(a1, 3u);
  }
  if ((*(_BYTE *)(a1 + 804) & 0x14) == 0)
  {
    destroy_string_table(a1, 4u);
    v7 = *(_QWORD *)(a1 + 920);
    if (!v7)
      return;
    goto LABEL_21;
  }
  v6 = *(_QWORD *)(a1 + 912);
  if (v6)
  {
    data_map_destroy(v6);
    *(_QWORD *)(a1 + 912) = 0;
  }
  v7 = *(_QWORD *)(a1 + 920);
  if (v7)
  {
LABEL_21:
    data_map_destroy(v7);
    *(_QWORD *)(a1 + 920) = 0;
  }
}

void destroy_string_table(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v2 = a1 + 880;
  v3 = *(_QWORD *)(a1 + 880 + 8 * a2);
  if (v3)
  {
    v4 = a2;
    v5 = *(_QWORD *)(v3 + 24);
    if (v5)
    {
      while (*(_DWORD *)(v5 + 20))
      {
        v6 = *(_QWORD *)(v5 + 24);
        free((void *)v5);
        v5 = v6;
        if (!v6)
          goto LABEL_7;
      }
      free((void *)v5);
LABEL_7:
      v3 = *(_QWORD *)(v2 + 8 * v4);
    }
    v7 = *(void ***)(v3 + 16);
    v8 = 8 * v4;
    if (v7)
    {
      pthread_rwlock_destroy(*(pthread_rwlock_t **)(v3 + 16));
      free(v7[283]);
      free(v7);
      *(_QWORD *)(*(_QWORD *)(v2 + v8) + 16) = 0;
      v3 = *(_QWORD *)(v2 + v8);
    }
    v9 = *(void **)(v3 + 32);
    if (v9)
    {
      free(v9);
      *(_QWORD *)(*(_QWORD *)(v2 + v8) + 32) = 0;
      v3 = *(_QWORD *)(v2 + v8);
    }
    v10 = *(void **)(v3 + 40);
    if (v10)
    {
      free(v10);
      *(_QWORD *)(*(_QWORD *)(v2 + v8) + 32) = 0;
      v3 = *(_QWORD *)(v2 + v8);
    }
    *(_QWORD *)(v3 + 24) = 0;
    *(_DWORD *)(*(_QWORD *)(v2 + v8) + 60) = 0;
    *(_DWORD *)(*(_QWORD *)(v2 + v8) + 56) = 0;
    free(*(void **)(v2 + v8));
    *(_QWORD *)(v2 + v8) = 0;
  }
}

uint64_t __db2_create_datastore_with_ctx_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t __db2_create_datastore_with_ctx_block_invoke_2(int a1, void *a2, size_t a3)
{
  return munmap(a2, a3);
}

void __db2_create_datastore_with_ctx_block_invoke(int a1, void *a2)
{
  free(a2);
}

uint64_t _db2_flush_all_cache(uint64_t a1, int a2)
{
  int v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t, unsigned int *);
  void *v21;
  uint64_t v22;
  int v23;
  _QWORD v24[8];
  int v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  _QWORD v35[3];
  int v36;
  _QWORD v37[3];
  int v38;
  _QWORD v39[3];
  int v40;

  v39[0] = 0;
  v39[1] = v39;
  v40 = 0;
  if (a2)
    v3 = 16385;
  else
    v3 = 0;
  v39[2] = 0x2000000000;
  v37[0] = 0;
  v37[1] = v37;
  v38 = 0;
  v37[2] = 0x2000000000;
  v35[0] = 0;
  v35[1] = v35;
  v36 = 0;
  v35[2] = 0x2000000000;
  if ((v3 & 1) != 0)
    v4 = 0x7FFFFFFF;
  else
    v4 = 2;
  v5 = *(_QWORD **)(a1 + 992);
  v6 = MEMORY[0x1E0C809B0];
  v27 = MEMORY[0x1E0C809B0];
  v28 = 0x40000000;
  *(_QWORD *)&v29 = __flush_updateset_locked_block_invoke;
  *((_QWORD *)&v29 + 1) = &unk_1E6E37628;
  v33 = v4;
  v34 = v3;
  *(_QWORD *)&v30 = v39;
  *((_QWORD *)&v30 + 1) = v35;
  v31 = v37;
  v32 = a1;
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 0x40000000;
  v24[2] = __flush_updateset_locked_block_invoke_118;
  v24[3] = &unk_1E6E37650;
  v24[4] = v39;
  v24[5] = v35;
  v24[6] = v37;
  v24[7] = a1;
  v25 = v4;
  v26 = v3;
  v7 = db_updateset_iterate(v5, (uint64_t)&v27, (uint64_t)v24);
  _Block_object_dispose(v35, 8);
  _Block_object_dispose(v37, 8);
  _Block_object_dispose(v39, 8);
  if (!(_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 928);
    v19[0] = v6;
    v19[1] = 0x40000000;
    v20 = ___db2_flush_all_cache_block_invoke;
    v21 = &__block_descriptor_tmp_134_10044;
    v22 = a1;
    v23 = v3;
    v9 = *(_DWORD *)(v8 + 220);
    if (v9 >= 1)
    {
      v10 = 0;
      v11 = v8 + 272;
      v12 = 0uLL;
      do
      {
        v13 = v8 + 4 * v10;
        v14 = *(_DWORD *)(v13 + 252);
        if (v14 && (v15 = *(_QWORD *)v11) != 0)
        {
          v16 = *(_DWORD *)(v11 + 16);
          if (v16)
          {
            v29 = v12;
            v30 = v12;
            v27 = __PAIR64__(DWORD1(v12), v14);
            v28 = v15;
            *(_QWORD *)&v29 = *(_QWORD *)(v11 + 8);
            DWORD2(v29) = v16;
            *(_QWORD *)&v30 = *(_QWORD *)(v11 + 24);
            DWORD2(v30) = *(_DWORD *)(v11 + 32);
            v31 = *(_QWORD **)(v11 + 40);
            v20((uint64_t)v19, (unsigned int *)&v27);
            if (v28)
            {
              *(_QWORD *)v11 = v28;
              *(_QWORD *)(v11 + 8) = v29;
              *(_DWORD *)(v11 + 16) = DWORD2(v29);
              *(_QWORD *)(v11 + 24) = v30;
              *(_DWORD *)(v11 + 32) = DWORD2(v30);
              *(_QWORD *)(v11 + 40) = v31;
              v17 = v27;
              v12 = 0uLL;
            }
            else
            {
              free((void *)v29);
              v17 = 0;
              v12 = 0uLL;
              *(_OWORD *)(v11 + 16) = 0u;
              *(_OWORD *)(v11 + 32) = 0u;
              *(_OWORD *)v11 = 0u;
            }
            *(_DWORD *)(v13 + 252) = v17;
            v9 = *(_DWORD *)(v8 + 220);
          }
        }
        else
        {
          *(_DWORD *)(v11 + 16) = 0;
        }
        ++v10;
        v11 += 48;
      }
      while (v10 < v9);
    }
    return 0;
  }
  return v7;
}

uint64_t map_write(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  int8x8_t *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int8x8_t *v17;
  unsigned int v18;
  int v20;
  NSObject *v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 856) + 12) & 1) == 0)
    return 0;
  _add_dirty_chunk(a1, *(_DWORD *)(a1 + 36) >> *(_DWORD *)(a1 + 12), *(_DWORD *)(a1 + 40), 1);
  v2 = *(unsigned int *)(a1 + 36);
  v3 = *(unsigned int **)(a1 + 856);
  v3[3] &= ~1u;
  if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
  {
    v4 = v3[2];
    v5 = *v3;
    v6 = *v3 == 846029412 || v5 == 829252196;
    v7 = bswap32(v4);
    if (!v6)
      v7 = (int)v3[2];
    if (v7 >= 1)
    {
      v8 = (int8x8_t *)(v3 + 7);
      do
      {
        v8[-1] = (int8x8_t)bswap64(*(_QWORD *)&v8[-1]);
        *v8 = vrev32_s8(*v8);
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    v9 = bswap32(v3[1]);
    *v3 = bswap32(v5);
    v3[1] = v9;
    v3[2] = bswap32(v4);
    v3[4] = bswap32(v3[4]);
  }
  v10 = sdb_pwrite(*(_QWORD *)(a1 + 848), (uint64_t)v3, *(unsigned int *)(a1 + 40), v2);
  v11 = *(_DWORD *)(a1 + 4);
  if ((v11 & 0x80) != 0)
  {
    v12 = *(unsigned int **)(a1 + 856);
    v13 = v12[2];
    v14 = *v12;
    v15 = *v12 == 846029412 || v14 == 829252196;
    v16 = bswap32(v13);
    if (!v15)
      v16 = (int)v12[2];
    if (v16 >= 1)
    {
      v17 = (int8x8_t *)(v12 + 7);
      do
      {
        v17[-1] = (int8x8_t)bswap64(*(_QWORD *)&v17[-1]);
        *v17 = vrev32_s8(*v17);
        v17 += 2;
        --v16;
      }
      while (v16);
    }
    v18 = bswap32(v12[1]);
    *v12 = bswap32(v14);
    v12[1] = v18;
    v12[2] = bswap32(v13);
    v12[4] = bswap32(v12[4]);
  }
  if (v10 == *(_DWORD *)(a1 + 40))
    return 0;
  *(_DWORD *)(a1 + 4) = v11 | 2;
  v20 = *__error();
  v21 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    v22 = 136315394;
    v23 = "map_write";
    v24 = 1024;
    v25 = 2045;
    _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: Failed writing map", (uint8_t *)&v22, 0x12u);
  }
  *__error() = v20;
  if (!*__error())
    *__error() = 22;
  *(_DWORD *)(a1 + 800) = *__error();
  return *__error();
}

uint64_t sync_dirty_chunks(uint64_t a1)
{
  off_t st_size;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  int *v22;
  int v23;
  NSObject *v24;
  os_log_type_t v25;
  dev_t v26;
  uint64_t v27;
  off_t v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  int v33;
  NSObject *v34;
  os_log_type_t v35;
  _QWORD *v36;
  unsigned int v37;
  int v38;
  unint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD);
  _DWORD *v45;
  int v46;
  NSObject *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  _DWORD *v51;
  unsigned int *v52;
  unsigned int v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  size_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(_QWORD);
  void *v69;
  void *v70;
  size_t v71;
  uint64_t v72;
  int v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  size_t v77;
  unsigned int v78;
  int v79;
  NSObject *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v85;
  int *v86;
  int v87;
  NSObject *v88;
  uint64_t v89;
  size_t v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  char *v96;
  char *v97;
  const char *v98;
  uint64_t v99;
  int v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  _QWORD *v109;
  _OWORD v110[3];
  uint8_t v111[4];
  const char *v112;
  __int16 v113;
  int v114;
  __int16 v115;
  uint64_t v116;
  stat buf;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
    *(_DWORD *)(a1 + 12) = bswap32(*(_DWORD *)(a1 + 12));
  st_size = fd_lseek(*(_DWORD **)(a1 + 848), 0, 2);
  if ((st_size & 0x8000000000000000) == 0)
  {
LABEL_4:
    v3 = fd_lseek(*(_DWORD **)(a1 + 840), 0, 2);
    if (v3 != -1)
    {
      v4 = *(unsigned int *)(a1 + 872);
      v5 = v4;
      memset(v110, 0, sizeof(v110));
      v108 = 0;
      v109 = v110;
      if (!(_DWORD)v4)
      {
        v23 = *__error();
        v24 = _SILogForLogForCategory(0);
        v25 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v24, v25))
        {
          LOWORD(buf.st_dev) = 0;
          _os_log_impl(&dword_1B8270000, v24, v25, "Skipping because index is shut down", (uint8_t *)&buf, 2u);
        }
        *__error() = v23;
        v26 = 0;
        v27 = -1;
        v28 = 0;
        v29 = -1;
LABEL_60:
        v69 = (void *)v29;
        if ((_DWORD)v4 != *(_DWORD *)(a1 + 872))
        {
          v96 = __si_assert_copy_extra_2151(0, -1);
          v97 = v96;
          v98 = "";
          if (v96)
            v98 = v96;
          __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 873, "num_chunks == dst->num_chunks", v98);
          free(v97);
          if (__valid_fs(-1))
            v99 = 2989;
          else
            v99 = 3072;
          *(_DWORD *)v99 = -559038737;
          abort();
        }
        v70 = (void *)v27;
        v71 = v28;
        v72 = fd_lseek(*(_DWORD **)(a1 + 840), 0, 2);
        if (v72 == -1)
          goto LABEL_70;
        if (v5 && v26 != *(_DWORD *)(a1 + 872))
        {
          v77 = v71;
          v78 = *__error();
          if (v78)
            v76 = v78;
          else
            v76 = 22;
          v79 = *__error();
          v80 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
          {
            v95 = *(_DWORD *)(a1 + 872);
            buf.st_dev = 136316418;
            *(_QWORD *)&buf.st_mode = "sync_dirty_chunks";
            WORD2(buf.st_ino) = 1024;
            *(_DWORD *)((char *)&buf.st_ino + 6) = 899;
            HIWORD(buf.st_uid) = 1024;
            buf.st_gid = v76;
            LOWORD(buf.st_rdev) = 1024;
            *(dev_t *)((char *)&buf.st_rdev + 2) = v26;
            *((_WORD *)&buf.st_rdev + 3) = 1024;
            LODWORD(buf.st_atimespec.tv_sec) = v95;
            WORD2(buf.st_atimespec.tv_sec) = 2080;
            *(__darwin_time_t *)((char *)&buf.st_atimespec.tv_sec + 6) = a1 + 324;
            _os_log_error_impl(&dword_1B8270000, v80, OS_LOG_TYPE_ERROR, "%s:%d: sync_dirty_chunks: ERR:%d count:%d expected %d! (%s)\n", (uint8_t *)&buf, 0x2Eu);
          }
          *__error() = v79;
          v71 = v77;
        }
        else
        {
          *(_DWORD *)(a1 + 872) = 0;
          if ((v72 & 0x8000000000000000) == 0)
          {
            if (v72 > st_size)
              goto LABEL_66;
            goto LABEL_89;
          }
          v101 = v69;
          memset(&buf, 0, sizeof(buf));
          v81 = *(_QWORD *)(a1 + 840);
          if (v81)
          {
            while (1)
            {
              v82 = fstatat(*(_DWORD *)(v81 + 44), *(const char **)(v81 + 72), &buf, 2048);
              v83 = g_prot_error_callback;
              if (v82 != -1 || g_prot_error_callback == 0)
                break;
              v85 = *(unsigned int *)(v81 + 40);
              v86 = __error();
              if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v83 + 16))(v83, v85, *v86, 8) & 1) == 0)goto LABEL_85;
            }
            if (!v82)
            {
              v69 = v101;
              if (buf.st_size > st_size)
              {
LABEL_66:
                if (fd_truncate(*(_QWORD *)(a1 + 840), st_size))
                {
                  v73 = *__error();
                  v74 = _SILogForLogForCategory(7);
                  v75 = 2 * (dword_1EF19FCA8 < 4);
                  if (os_log_type_enabled(v74, v75))
                  {
                    buf.st_dev = 134217984;
                    *(_QWORD *)&buf.st_mode = st_size;
                    _os_log_impl(&dword_1B8270000, v74, v75, "sync_dirty_chunks: ERR: Failed to truncate master fd to %lld\n", (uint8_t *)&buf, 0xCu);
                  }
                  *__error() = v73;
LABEL_70:
                  v76 = *__error();
                  goto LABEL_90;
                }
              }
LABEL_89:
              v76 = 0;
              goto LABEL_90;
            }
          }
LABEL_85:
          v87 = *__error();
          v88 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v111 = 136315650;
            v112 = "sync_dirty_chunks";
            v113 = 1024;
            v114 = 908;
            v115 = 2080;
            v116 = a1 + 324;
            _os_log_error_impl(&dword_1B8270000, v88, OS_LOG_TYPE_ERROR, "%s:%d: sync_dirty_chunks: ERR: Can't determine the master file size! (%s)\n", v111, 0x1Cu);
          }
          *__error() = v87;
          v76 = 22;
          v69 = v101;
        }
LABEL_90:
        v89 = v76;
        v57 = v76;
        v58 = v71;
        v59 = v70;
        v60 = v69;
        v90 = v71;
        v91 = v70;
        if (v69 == (void *)-1)
        {
LABEL_92:
          v94 = v89;
          if (v91 != (void *)-1)
            munmap(v91, v90);
          return v94;
        }
LABEL_91:
        v92 = v59;
        v93 = v57;
        munmap(v60, v58);
        v89 = v93;
        v90 = v58;
        v91 = v92;
        goto LABEL_92;
      }
      v6 = v3;
      v7 = fd_mmap(*(_QWORD *)(a1 + 848));
      if (v7 != -1)
      {
        v8 = v7;
        v9 = (void *)v7;
        v10 = fd_mmap(*(_QWORD *)(a1 + 840));
        if (v10 == -1)
        {
          v13 = *__error();
          v54 = _SILogForLogForCategory(7);
          v55 = 2 * (dword_1EF19FCA8 < 4);
          if (os_log_type_enabled(v54, v55))
          {
            LOWORD(buf.st_dev) = 0;
            _os_log_impl(&dword_1B8270000, v54, v55, "sync_dirty_chunks: ERR: Failed to map master", (uint8_t *)&buf, 2u);
          }
          v16 = -1;
          goto LABEL_47;
        }
        v11 = v10;
        v12 = v10;
        if (v6 != st_size && fd_truncate(*(_QWORD *)(a1 + 840), st_size))
        {
          v13 = *__error();
          v14 = _SILogForLogForCategory(7);
          v15 = 2 * (dword_1EF19FCA8 < 4);
          if (os_log_type_enabled(v14, v15))
          {
            buf.st_dev = 134217984;
            *(_QWORD *)&buf.st_mode = st_size;
            _os_log_impl(&dword_1B8270000, v14, v15, "sync_dirty_chunks: ERR: Failed to truncate master fd to %lld\n", (uint8_t *)&buf, 0xCu);
          }
          v16 = v12;
LABEL_47:
          v56 = v16;
          *__error() = v13;
          v57 = *__error();
          v58 = st_size;
          v59 = (void *)v56;
          v60 = v9;
          goto LABEL_91;
        }
        v36 = v109;
        v103 = (uint64_t)v9;
        *v109 = v9;
        v36[1] = st_size;
        v36[2] = *(_QWORD *)(a1 + 840);
        v36[3] = v12;
        v102 = v12;
        v36[4] = st_size;
        v36[5] = *(_QWORD *)(a1 + 848);
        v108 = 2;
        do
        {
          v37 = __ldxr(exceptionSequenceNum);
          v38 = v37 + 1;
        }
        while (__stxr(v37 + 1, exceptionSequenceNum));
        *(_DWORD *)v111 = 0;
        v39 = setThreadIdAndInfo(-1, (__int128 *)sMappingExceptionCallbacks, (uint64_t)&v108, 0x40000000, v38);
        *(_DWORD *)v111 = v39;
        v106 = v40;
        v107 = HIDWORD(v39);
        v105 = v41;
        v42 = *(_QWORD *)&threadData[18 * v39 + 2];
        v43 = v42 + 320 * HIDWORD(v39);
        *(_BYTE *)(v43 + 216) = 0;
        v100 = *(_DWORD *)(v43 + 312);
        v44 = *(void (**)(_QWORD))(v43 + 224);
        if (v44)
          v44(*(_QWORD *)(v42 + 320 * HIDWORD(v39) + 288));
        v104 = *(_DWORD *)v111;
        v5 = v4;
        if (!_setjmp((int *)v43))
        {
          v61 = 0;
          v62 = v4;
          do
          {
            v63 = *(_QWORD *)(a1 + 864);
            v64 = (unint64_t)*(unsigned int *)(v63 + v61) << *(_DWORD *)(a1 + 12);
            if (st_size > v64)
            {
              v65 = *(unsigned int *)(v63 + v61 + 4);
              if ((uint64_t)(v64 + v65) <= st_size)
                v65 = v65;
              else
                v65 = (st_size - v64);
              memcpy((void *)(v11 + v64), (const void *)(v8 + v64), v65);
            }
            v61 += 8;
            --v62;
          }
          while (v62);
          v66 = *(_QWORD *)&threadData[18 * v104 + 2];
          v67 = v66 + 320 * v107;
          *(_DWORD *)(v67 + 312) = v100;
          v68 = *(void (**)(_QWORD))(v67 + 232);
          if (v68)
            v68(*(_QWORD *)(v66 + 320 * v107 + 288));
          dropThreadId(v104, 0, v38);
          v26 = v4;
          v28 = st_size;
          v27 = v102;
          goto LABEL_59;
        }
        v45 = (_DWORD *)(v43 + 312);
        v46 = *__error();
        v47 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          buf.st_dev = 136315394;
          *(_QWORD *)&buf.st_mode = "sync_dirty_chunks";
          WORD2(buf.st_ino) = 1024;
          *(_DWORD *)((char *)&buf.st_ino + 6) = 869;
          _os_log_error_impl(&dword_1B8270000, v47, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", (uint8_t *)&buf, 0x12u);
        }
        *__error() = v46;
        *v45 = v100;
        if (__THREAD_SLOT_KEY)
        {
          v48 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v48)
            goto LABEL_102;
        }
        else
        {
          makeThreadId();
          v48 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v48)
            goto LABEL_102;
        }
        v49 = v48;
        if ((unint64_t)v48 < 0x801)
        {
LABEL_41:
          v50 = (uint64_t)v49 - 1;
          v51 = &threadData[18 * ((uint64_t)v49 - 1)];
          v53 = v51[14];
          v52 = v51 + 14;
          if (v53 > v105)
          {
            do
              CIOnThreadCleanUpPop(v50);
            while (*v52 > v105);
          }
          dropThreadId(v104, 1, v38);
          CICleanUpReset(v104, v106);
          v26 = 0;
          v28 = st_size;
          v27 = v12;
LABEL_59:
          v29 = v103;
          goto LABEL_60;
        }
LABEL_102:
        makeThreadId();
        v49 = pthread_getspecific(__THREAD_SLOT_KEY);
        goto LABEL_41;
      }
      v33 = *__error();
      v34 = _SILogForLogForCategory(7);
      v35 = 2 * (dword_1EF19FCA8 < 4);
      if (os_log_type_enabled(v34, v35))
      {
        LOWORD(buf.st_dev) = 0;
        _os_log_impl(&dword_1B8270000, v34, v35, "sync_dirty_chunks: ERR: Failed to map shadow", (uint8_t *)&buf, 2u);
      }
      *__error() = v33;
    }
    return *__error();
  }
  memset(&buf, 0, sizeof(buf));
  v17 = *(_QWORD *)(a1 + 848);
  if (v17)
  {
    while (1)
    {
      v18 = fstatat(*(_DWORD *)(v17 + 44), *(const char **)(v17 + 72), &buf, 2048);
      v19 = g_prot_error_callback;
      if (v18 != -1 || g_prot_error_callback == 0)
        break;
      v21 = *(unsigned int *)(v17 + 40);
      v22 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v19 + 16))(v19, v21, *v22, 8) & 1) == 0)
        goto LABEL_24;
    }
    if (!v18)
    {
      st_size = buf.st_size;
      goto LABEL_4;
    }
  }
LABEL_24:
  v30 = *__error();
  v31 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v111 = 136315650;
    v112 = "sync_dirty_chunks";
    v113 = 1024;
    v114 = 736;
    v115 = 2080;
    v116 = a1 + 324;
    _os_log_error_impl(&dword_1B8270000, v31, OS_LOG_TYPE_ERROR, "%s:%d: sync_dirty_chunks: ERR: Can't determine the shadow file size! (%s)\n", v111, 0x1Cu);
  }
  *__error() = v30;
  return 22;
}

uint64_t sdb_pwrite(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char *v5;
  char *v6;
  const char *v7;
  char *v8;
  const char *v9;

  if ((a3 & 0xFFF) != 0)
  {
    v5 = __si_assert_copy_extra_2151(0, -1);
    v6 = v5;
    v7 = "";
    if (v5)
      v7 = v5;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 98, "(write_size & ((1 << 12)-1)) == 0", v7);
LABEL_10:
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if ((a4 & 0xFFF) != 0)
  {
    v8 = __si_assert_copy_extra_2151(0, -1);
    v6 = v8;
    v9 = "";
    if (v8)
      v9 = v8;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 99, "(offset & ((1 << 12)-1)) == 0", v9);
    goto LABEL_10;
  }
  return fd_pwrite(a1, a2, a3, a4);
}

uint64_t __flush_updateset_locked_block_invoke(uint64_t a1, unint64_t a2, uint64_t a3, int a4, __int16 a5)
{
  uint64_t v6;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t inserted;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  BOOL v42;
  _BOOL4 v43;
  _BOOL4 v44;
  int v45;
  uint64_t v46;
  int v47;
  size_t v48;
  uint64_t updated;
  int v50;
  NSObject *v51;
  const char *v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  NSObject *v56;
  int v57;
  NSObject *v58;
  int v59;
  int v60;
  int v61;
  NSObject *v62;
  const char *v63;
  char *v64;
  char *v65;
  const char *v66;
  size_t __nbyte;
  _BYTE buf[12];
  __int16 v69;
  _BYTE v70[34];
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  int v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v6 + 4) & 2) != 0)
  {
    v14 = *__error();
    v15 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "flush_updateset_locked_block_invoke";
      v69 = 1024;
      *(_DWORD *)v70 = 8039;
      *(_WORD *)&v70[4] = 1024;
      *(_DWORD *)&v70[6] = v19;
      _os_log_error_impl(&dword_1B8270000, v15, OS_LOG_TYPE_ERROR, "%s:%d: Bad sdb in db_updateset_iterate at page %d", buf, 0x18u);
    }
    *__error() = v14;
    v16 = *(_DWORD *)(*(_QWORD *)(a1 + 56) + 800);
    if (v16)
      return v16;
    else
      return 22;
  }
  else
  {
    db_writer_yield_lock(v6 + 584);
    __nbyte = 0;
    v11 = a3 + 4;
    v12 = *(unsigned __int8 *)(a3 + 4);
    if ((v12 & 0x80) != 0)
    {
      if (v12 >= 0xC0)
      {
        if (v12 >= 0xE0)
        {
          if (v12 >= 0xF0)
          {
            v20 = 6;
            v21 = 7;
            v22 = 8;
            if (v12 == 255)
              v22 = 9;
            if (v12 >= 0xFE)
              v21 = v22;
            if (v12 >= 0xFC)
              v20 = v21;
            if (v12 >= 0xF8)
              v13 = v20;
            else
              v13 = 5;
          }
          else
          {
            v13 = 4;
          }
        }
        else
        {
          v13 = 3;
        }
      }
      else
      {
        v13 = 2;
      }
    }
    else
    {
      v13 = 1;
    }
    v23 = *(unsigned __int8 *)(v11 + v13);
    if (*(char *)(v11 + v13) < 0)
    {
      if (v23 >= 0xC0)
      {
        if (v23 >= 0xE0)
        {
          v64 = __si_assert_copy_extra_2151(0, -1);
          v65 = v64;
          v66 = "";
          if (v64)
            v66 = v64;
          __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v66);
          free(v65);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        v24 = v13 + 2;
      }
      else
      {
        v24 = v13 + 1;
      }
      v23 = *(unsigned __int8 *)(v11 + v24);
    }
    v25 = *(_QWORD *)(a1 + 56);
    v26 = *(_BYTE *)(v25 + 804) & (v23 >> 5) & 1;
    v27 = *(_QWORD *)(v25 + 856);
    v28 = *(unsigned int *)(v27 + 8);
    if ((_DWORD)v28)
    {
      v29 = *(int *)(v27 + 16);
      if ((int)v29 < (int)v28)
      {
        v30 = v27 + 16 * v29;
        if (*(_QWORD *)(v30 + 20) == a2)
        {
          v31 = *(_DWORD *)(v30 + 32);
          if ((_DWORD)v26 == v31 >> 28)
          {
            v32 = *(_DWORD *)(v27 + 16 * v29 + 28);
LABEL_62:
            LODWORD(__nbyte) = v31 & 0xFFFFFFF;
            HIDWORD(__nbyte) = v32;
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != v32)
              ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
LABEL_64:
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v32;
            ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
            v47 = *(_DWORD *)(a1 + 68) & 0x4000;
            if (a4)
            {
              v48 = __nbyte;
              updated = _real_page_update_obj(v25, (_DWORD *)a3, a2, v26, (unsigned __int16)v47 | a5, v32, __nbyte);
              if ((_DWORD)updated == 2)
              {
                if ((a5 & 8) != 0)
                {
                  inserted = _real_page_insert_obj(*(_QWORD *)(a1 + 56), a3, *(_DWORD *)(a1 + 68) & 0x4000, v32, v48);
                  if (!(_DWORD)inserted)
                    return inserted;
                  v50 = *__error();
                  v51 = _SILogForLogForCategory(7);
                  if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
                    goto LABEL_81;
                  *(_DWORD *)buf = 136316674;
                  *(_QWORD *)&buf[4] = "flush_updateset_locked_block_invoke";
                  v69 = 1024;
                  *(_DWORD *)v70 = 8086;
                  *(_WORD *)&v70[4] = 2048;
                  *(_QWORD *)&v70[6] = a2;
                  *(_WORD *)&v70[14] = 2048;
                  *(_QWORD *)&v70[16] = a2;
                  *(_WORD *)&v70[24] = 2048;
                  *(_QWORD *)&v70[26] = v26;
                  v71 = 2048;
                  v72 = v32;
                  v73 = 1024;
                  LODWORD(v74) = inserted;
                  v52 = "%s:%d: Failed insert, oid:0x%llx(%lld), type:%ld, pgnum:%ld, rc:%d";
                  goto LABEL_91;
                }
                return 0;
              }
            }
            else
            {
              v48 = __nbyte;
              updated = _real_page_insert_obj(v25, a3, v47, v32, __nbyte);
              if ((_DWORD)updated == 17)
              {
                if ((a5 & 8) != 0)
                {
                  inserted = _real_page_update_obj(*(_QWORD *)(a1 + 56), (_DWORD *)a3, a2, v26, *(_WORD *)(a1 + 68) & 0x4000u | a5, v32, v48);
                  if (!(_DWORD)inserted)
                    return inserted;
                  v50 = *__error();
                  v51 = _SILogForLogForCategory(7);
                  if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
                    goto LABEL_81;
                  *(_DWORD *)buf = 136316674;
                  *(_QWORD *)&buf[4] = "flush_updateset_locked_block_invoke";
                  v69 = 1024;
                  *(_DWORD *)v70 = 8098;
                  *(_WORD *)&v70[4] = 2048;
                  *(_QWORD *)&v70[6] = a2;
                  *(_WORD *)&v70[14] = 2048;
                  *(_QWORD *)&v70[16] = a2;
                  *(_WORD *)&v70[24] = 2048;
                  *(_QWORD *)&v70[26] = v26;
                  v71 = 2048;
                  v72 = v32;
                  v73 = 1024;
                  LODWORD(v74) = inserted;
                  v52 = "%s:%d: Failed update, oid:0x%llx(%lld), type:%ld, pgnum:%ld, rc:%d";
LABEL_91:
                  _os_log_error_impl(&dword_1B8270000, v51, OS_LOG_TYPE_ERROR, v52, buf, 0x40u);
LABEL_81:
                  *__error() = v50;
LABEL_82:
                  v57 = *__error();
                  v58 = _SILogForLogForCategory(7);
                  if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
                  {
                    v63 = "add";
                    *(_DWORD *)buf = 136316930;
                    *(_QWORD *)&buf[4] = "flush_updateset_locked_block_invoke";
                    *(_DWORD *)v70 = 8104;
                    v69 = 1024;
                    *(_WORD *)&v70[4] = 2080;
                    if (a4)
                      v63 = "update";
                    *(_QWORD *)&v70[6] = v63;
                    *(_WORD *)&v70[14] = 2048;
                    *(_QWORD *)&v70[16] = a2;
                    *(_WORD *)&v70[24] = 2048;
                    *(_QWORD *)&v70[26] = a2;
                    v71 = 2048;
                    v72 = v26;
                    v73 = 2048;
                    v74 = v32;
                    v75 = 1024;
                    v76 = inserted;
                    _os_log_error_impl(&dword_1B8270000, v58, OS_LOG_TYPE_ERROR, "%s:%d: Failed %s, oid:0x%llx(%lld), type:%ld, pgnum:%ld, rc:%d", buf, 0x4Au);
                  }
                  *__error() = v57;
                  v59 = _page_delete_obj_by_oid_and_type(*(_QWORD *)(a1 + 56), a2, v26, v32, v48, *(_DWORD *)(a1 + 68) & 0x4000);
                  v60 = db_updateset_delete_object(*(_QWORD **)(*(_QWORD *)(a1 + 56) + 992), a2, v26);
                  if (v59 | v60)
                  {
                    v61 = v60;
                    v62 = _SILogForLogForCategory(7);
                    if (os_log_type_enabled(v62, OS_LOG_TYPE_FAULT))
                    {
                      *(_DWORD *)buf = 134219264;
                      *(_QWORD *)&buf[4] = a2;
                      v69 = 2048;
                      *(_QWORD *)v70 = a2;
                      *(_WORD *)&v70[8] = 2048;
                      *(_QWORD *)&v70[10] = v26;
                      *(_WORD *)&v70[18] = 2048;
                      *(_QWORD *)&v70[20] = v32;
                      *(_WORD *)&v70[28] = 1024;
                      *(_DWORD *)&v70[30] = v59;
                      v71 = 1024;
                      LODWORD(v72) = v61;
                      _os_log_fault_impl(&dword_1B8270000, v62, OS_LOG_TYPE_FAULT, "Failed delete after failed add/update, oid:0x%llx(%lld), type:%ld, pgnum:%ld, pageRc:%d updateSetRc:%d", buf, 0x36u);
                    }
                  }
                  return inserted;
                }
                return 0;
              }
            }
            inserted = updated;
            if (!(_DWORD)updated)
              return inserted;
            goto LABEL_82;
          }
        }
      }
      v33 = (int)v28;
      if ((int)v28 < 1)
      {
        LODWORD(v38) = 0;
LABEL_57:
        v43 = 0;
LABEL_58:
        v44 = v33 - 1 > (int)v38 && v43;
        v45 = v38 + v44;
        *(_DWORD *)(v27 + 16) = v45;
        v46 = v27 + 16 * v45;
        v32 = *(_DWORD *)(v46 + 28);
        v31 = *(_DWORD *)(v46 + 32);
        goto LABEL_62;
      }
      v34 = 0;
      while (1)
      {
        if ((int)v28 + v34 < 0 != __OFADD__((_DWORD)v28, v34))
          v37 = v28 + v34 + 1;
        else
          v37 = v28 + v34;
        v38 = (v37 >> 1);
        v39 = v26 - (*(_DWORD *)(v27 + 16 * (int)v38 + 32) >> 28);
        if (v39)
        {
          v35 = v39;
          v36 = v38;
          if ((v35 & 0x8000000000000000) == 0)
            goto LABEL_39;
        }
        else
        {
          v35 = a2 - *(_QWORD *)(v27 + 16 * ((uint64_t)v37 >> 1) + 20);
          v36 = v38;
          if ((v35 & 0x8000000000000000) == 0)
          {
LABEL_39:
            if (!v35)
              goto LABEL_57;
            v34 = v38 + 1;
            v36 = v28;
          }
        }
        v28 = v36;
        if (v34 >= (int)v36)
        {
          v43 = v35 > 0;
          goto LABEL_58;
        }
      }
    }
    v40 = ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v41 = *(_DWORD *)(a1 + 64);
    if (v40 >= v41)
      return 0xFFFFFFFFLL;
    v42 = !v40 || v41 == 0x7FFFFFFF;
    if (!v42
      && (unint64_t)(*(_QWORD *)(*(_QWORD *)(v25 + 992) + 56)
                          + 16 * *(_QWORD *)(*(_QWORD *)(v25 + 992) + 48)) < 0x80000)
    {
      return 0xFFFFFFFFLL;
    }
    v53 = *(_DWORD *)(a1 + 68) & 0x4000 | 4;
    *(_QWORD *)buf = 0;
    v54 = _page_alloc_fetch(v25, (int8x16_t **)buf, 0, (unsigned int *)&__nbyte + 1, (signed int *)&__nbyte, v53);
    if (!(_DWORD)v54)
    {
      free(*(void **)buf);
      v32 = HIDWORD(__nbyte);
      v25 = *(_QWORD *)(a1 + 56);
      goto LABEL_64;
    }
    inserted = v54;
    v55 = *__error();
    v56 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316674;
      *(_QWORD *)&buf[4] = "flush_updateset_locked_block_invoke";
      v69 = 1024;
      *(_DWORD *)v70 = 8062;
      *(_WORD *)&v70[4] = 2048;
      *(_QWORD *)&v70[6] = a2;
      *(_WORD *)&v70[14] = 2048;
      *(_QWORD *)&v70[16] = a2;
      *(_WORD *)&v70[24] = 2048;
      *(_QWORD *)&v70[26] = v26;
      v71 = 2048;
      v72 = HIDWORD(__nbyte);
      v73 = 1024;
      LODWORD(v74) = inserted;
      _os_log_error_impl(&dword_1B8270000, v56, OS_LOG_TYPE_ERROR, "%s:%d: Failed page allocation, oid:0x%llx(%lld), type:%ld, pgnum:%ld, rc:%d", buf, 0x40u);
    }
    *__error() = v55;
  }
  return inserted;
}

uint64_t __flush_updateset_locked_block_invoke_118(uint64_t a1, int64_t a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  signed int v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  int v30;
  int v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int64_t v36;
  __int16 v37;
  int64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v4 + 4) & 2) != 0)
  {
    v20 = *__error();
    v21 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v30 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v31 = 136315650;
      v32 = "flush_updateset_locked_block_invoke";
      v33 = 1024;
      v34 = 8115;
      v35 = 1024;
      LODWORD(v36) = v30;
      _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: Bad sdb in db_updateset_iterate (delete) at page %d", (uint8_t *)&v31, 0x18u);
    }
    v22 = 22;
    goto LABEL_35;
  }
  db_writer_yield_lock(v4 + 584);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(v7 + 856);
  v9 = *(unsigned int *)(v8 + 8);
  if (!(_DWORD)v9)
    return 0;
  v10 = *(int *)(v8 + 16);
  if ((int)v10 >= (int)v9
    || (v11 = v8 + 16 * v10, *(_QWORD *)(v11 + 20) != a2)
    || (v12 = *(_DWORD *)(v11 + 32), a3 != v12 >> 28))
  {
    v13 = (int)v9;
    if ((int)v9 >= 1)
    {
      v14 = 0;
      while (1)
      {
        if ((int)v9 + v14 < 0 != __OFADD__((_DWORD)v9, v14))
          v17 = v9 + v14 + 1;
        else
          v17 = v9 + v14;
        v18 = (v17 >> 1);
        v19 = a3 - (*(_DWORD *)(v8 + 16 * (int)v18 + 32) >> 28);
        if (v19)
        {
          v15 = v19;
          v16 = v18;
          if ((v15 & 0x8000000000000000) == 0)
            goto LABEL_9;
        }
        else
        {
          v15 = a2 - *(_QWORD *)(v8 + 16 * ((uint64_t)v17 >> 1) + 20);
          v16 = v18;
          if ((v15 & 0x8000000000000000) == 0)
          {
LABEL_9:
            if (!v15)
              goto LABEL_23;
            v14 = v18 + 1;
            v16 = v9;
          }
        }
        v9 = v16;
        if (v14 >= (int)v16)
        {
          v23 = v15 > 0;
          goto LABEL_24;
        }
      }
    }
    LODWORD(v18) = 0;
LABEL_23:
    v23 = 0;
LABEL_24:
    v24 = v13 - 1 > (int)v18 && v23;
    v25 = v18 + v24;
    v10 = v25;
    *(_DWORD *)(v8 + 16) = v25;
    v12 = *(_DWORD *)(v8 + 16 * v25 + 32);
  }
  v26 = *(unsigned int *)(v8 + 16 * v10 + 28);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == (_DWORD)v26
    || (++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24),
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) < *(_DWORD *)(a1 + 64))
    || *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) <= 256)
  {
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v26;
    v27 = _page_delete_obj_by_oid_and_type(v7, a2, a3, v26, v12 & 0xFFFFFFF, *(_DWORD *)(a1 + 68) & 0x4000);
    if ((v27 & 0xFFFFFFFD) != 0)
    {
      v22 = v27;
      v20 = *__error();
      v28 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v31 = 136316674;
        v32 = "flush_updateset_locked_block_invoke";
        v33 = 1024;
        v34 = 8137;
        v35 = 2048;
        v36 = a2;
        v37 = 2048;
        v38 = a2;
        v39 = 2048;
        v40 = a3;
        v41 = 2048;
        v42 = v26;
        v43 = 1024;
        v44 = v22;
        _os_log_error_impl(&dword_1B8270000, v28, OS_LOG_TYPE_ERROR, "%s:%d: Failed delete, oid:0x%llx(%lld), type:%ld, pgnum:%ld, rc:%d", (uint8_t *)&v31, 0x40u);
      }
LABEL_35:
      *__error() = v20;
      return v22;
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t ___db2_flush_all_cache_block_invoke(uint64_t a1, unsigned int *a2)
{
  return _flush_cache_entry(*(_QWORD *)(a1 + 32), 0, a2, *(_DWORD *)(a1 + 40));
}

uint64_t _flush_cache_entry(uint64_t a1, size_t *a2, unsigned int *a3, unsigned int a4)
{
  unsigned int v6;
  uint64_t v7;
  size_t *v8;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  void **v15;
  int v16;
  size_t v17;
  uint64_t v18;
  int v19;
  int v20;
  size_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unsigned __int32 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  size_t v34;
  unint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  _DWORD *v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  size_t v59;
  int v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  uint64_t v64;
  NSObject *v65;
  unsigned int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  NSObject *v71;
  uint64_t v72;
  int v73;
  NSObject *v74;
  os_log_type_t v75;
  unsigned int v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  NSObject *v81;
  unsigned int v82;
  int v83;
  int v84;
  NSObject *v85;
  unsigned int v86;
  int v87;
  NSObject *v88;
  int v89;
  const char *v90;
  NSObject *v91;
  uint32_t v92;
  int v93;
  NSObject *v94;
  uint64_t v95;
  int v96;
  NSObject *v97;
  unsigned int v99;
  int v100;
  NSObject *v101;
  unsigned int v102;
  const char *v103;
  NSObject *v104;
  uint32_t v105;
  NSObject *v106;
  NSObject *v107;
  unsigned int v108;
  unsigned int v109;
  char *v110;
  char *v111;
  const char *v112;
  char *v113;
  const char *v114;
  uint64_t v115;
  int v116;
  NSObject *v117;
  int v119;
  NSObject *v120;
  int v121;
  NSObject *v122;
  int v123;
  int v124;
  int v125;
  unsigned int v126;
  int v127;
  char *v128;
  char *v129;
  const char *v130;
  uint64_t v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  int v135;
  unsigned __int32 v136;
  int v137;
  int v138;
  unint64_t v139;
  size_t v140;
  int v141;
  int v142;
  uint64_t v143;
  int8x16_t *v144;
  void *value_out;
  _BYTE buf[24];
  __int16 v147;
  int v148;
  __int16 v149;
  int v150;
  __int16 v151;
  int v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  if (!*a3 || (v8 = (size_t *)(a3 + 2), (v7 = *((_QWORD *)a3 + 1)) == 0) || !a3[6])
  {
    if (!a2)
      return 0;
    v17 = *((_QWORD *)a3 + 1);
    if (!v17)
      return 0;
    v18 = 0;
    *a2 = v17;
    *((_QWORD *)a3 + 1) = 0;
    return v18;
  }
  if ((*(_BYTE *)(a1 + 804) & 8) != 0)
  {
    v110 = __si_assert_copy_extra_2151(0, -1);
    v111 = v110;
    v112 = "";
    if (v110)
      v112 = v110;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 7880, "(dst->const_flags & 0x8) == 0", v112);
LABEL_150:
    free(v111);
    if (__valid_fs(-1))
      v115 = 2989;
    else
      v115 = 3072;
    *(_DWORD *)v115 = -559038737;
    abort();
  }
  v11 = 16;
  if ((*(_DWORD *)(v7 + 12) & 4) == 0)
    v11 = 4;
  v12 = *(int *)(v7 + v11);
  v13 = *(_QWORD *)(a1 + 928);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v14 = atomic_load((unsigned int *)(v13 + 248));
  if (v14 > v6)
  {
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = *(_QWORD *)v13;
    *(_DWORD *)&buf[8] = v6;
    _cache_remove((uint64_t *)buf);
  }
  v15 = (void **)(a3 + 4);
  if (*((_QWORD *)a3 + 2))
  {
    v16 = *a3;
    goto LABEL_116;
  }
  v19 = *(_DWORD *)(*v8 + 12);
  if ((v19 & 0xC) == 0 || (*(_BYTE *)(a1 + 804) & 8) != 0 || !*a3 || (v19 & 4) == 0 || !a3[6])
  {
LABEL_115:
    v16 = *a3;
    if (!*((_QWORD *)a3 + 2))
    {
      _add_dirty_chunk(a1, v16, v12, (a4 >> 14) & 1);
      if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
        db2_swap_page(*v8);
      v95 = sdb_pwrite(*(_QWORD *)(a1 + 848), *((_QWORD *)a3 + 1), v12, (unint64_t)*a3 << *(_DWORD *)(a1 + 12));
      if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
        db2_swap_page(*v8);
      goto LABEL_117;
    }
LABEL_116:
    _add_dirty_chunk(a1, v16, v12, (a4 >> 14) & 1);
    v95 = sdb_pwrite(*(_QWORD *)(a1 + 848), *((_QWORD *)a3 + 2), v12, (unint64_t)*a3 << *(_DWORD *)(a1 + 12));
LABEL_117:
    if (v95 == v12)
    {
      if (*v15)
      {
        free(*v15);
        *v15 = 0;
      }
      v18 = 0;
      if (a2)
      {
        *a2 = *v8;
        *v8 = 0;
      }
      else
      {
        a3[6] = 0;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 4) |= 2u;
      if (!*__error())
        *__error() = 22;
      v96 = *__error();
      v97 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
      {
        v99 = *a3;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "_flush_cache_entry";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7942;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v99;
        _os_log_error_impl(&dword_1B8270000, v97, OS_LOG_TYPE_ERROR, "%s:%d: Failed compressing/splitting page %d", buf, 0x18u);
      }
      *__error() = v96;
      *(_DWORD *)(a1 + 800) = *__error();
      return *__error();
    }
    return v18;
  }
  v131 = *(int *)(*v8 + 16);
  v132 = a4 & 0x4000;
  v134 = v12;
  v133 = a4;
  do
  {
    while (1)
    {
      v20 = (*(_DWORD *)(a1 + 804) >> 1) & 1;
      v21 = *v8;
      v22 = *(unsigned int *)(*v8 + 8);
      if ((int)v22 >= 21)
      {
        v23 = (*(_DWORD *)(v21 + 20) + 4);
        if (v21 + 20 + v23 >= v21 + v22 && v131 - 20 < v23)
          LOBYTE(v20) = ((*(_DWORD *)(a1 + 804) & 2) != 0) | 2;
      }
      v25 = page_compress(a1, v21, (int8x16_t **)v15, 0, v20);
      if ((_DWORD)v25 != 7)
      {
        v18 = v25;
        if ((_DWORD)v25)
        {
          v93 = *__error();
          v94 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
          {
            v126 = *a3;
            v127 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 8);
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "db_compress_cache";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 8247;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v18;
            v147 = 1024;
            v148 = v126;
            v149 = 1024;
            v150 = v127;
            v151 = 1024;
            v152 = v131;
            _os_log_error_impl(&dword_1B8270000, v94, OS_LOG_TYPE_ERROR, "%s:%d: ERR: page compression error %d with page %d used_bytes %d disk page size %d\n", buf, 0x2Au);
          }
          *__error() = v93;
          if ((_DWORD)v18)
            goto LABEL_159;
        }
        goto LABEL_115;
      }
      v144 = 0;
      value_out = 0;
      if ((*(_BYTE *)(*v8 + 12) & 4) == 0)
      {
        v100 = *__error();
        v101 = _SILogForLogForCategory(7);
        if (!os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
        {
LABEL_136:
          *__error() = v100;
LABEL_137:
          v18 = 22;
          goto LABEL_156;
        }
        v102 = *a3;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "db_split_page";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 8285;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v102;
        v103 = "%s:%d: Failed splitting compressed page %d";
        v104 = v101;
        v105 = 24;
LABEL_167:
        _os_log_error_impl(&dword_1B8270000, v104, OS_LOG_TYPE_ERROR, v103, buf, v105);
        goto LABEL_136;
      }
      if (*v15)
      {
        v100 = *__error();
        v106 = _SILogForLogForCategory(7);
        if (!os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
          goto LABEL_136;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "db_split_page";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 8291;
        v103 = "%s:%d: should not need to split a compressed cache";
        v104 = v106;
        v105 = 18;
        goto LABEL_167;
      }
      v140 = *v8;
      v143 = 0;
      *(_QWORD *)buf = 0;
      v26 = _page_alloc_fetch(a1, (int8x16_t **)buf, 0, (unsigned int *)&v143 + 1, (signed int *)&v143, v132 | 4);
      if ((_DWORD)v26)
      {
        v18 = v26;
        v116 = *__error();
        v107 = _SILogForLogForCategory(7);
        if (!os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
          goto LABEL_155;
        v108 = *a3;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "db_split_page";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 8304;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v108;
        v90 = "%s:%d: Failed page_alloc for %d";
LABEL_142:
        v91 = v107;
        v92 = 24;
LABEL_143:
        _os_log_error_impl(&dword_1B8270000, v91, OS_LOG_TYPE_ERROR, v90, buf, v92);
        goto LABEL_155;
      }
      free(*(void **)buf);
      v27 = HIDWORD(v143);
      v28 = _page_fetch_with_fd(a1, &value_out, SHIDWORD(v143), v143, v132 | 3, (int)buf, -1);
      if ((_DWORD)v28)
      {
        v18 = v28;
        v116 = *__error();
        v107 = _SILogForLogForCategory(7);
        if (!os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
          goto LABEL_155;
        v109 = *a3;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "db_split_page";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 8309;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v109;
        v90 = "%s:%d: Failed page_fetch for %d";
        goto LABEL_142;
      }
      v136 = v27;
      v32 = *v8;
      v33 = *(int *)(*v8 + 8);
      v34 = v140;
      if ((int)v33 >= 21)
        break;
LABEL_98:
      v73 = *__error();
      v74 = _SILogForLogForCategory(7);
      v75 = 2 * (dword_1EF19FCA8 < 4);
      if (os_log_type_enabled(v74, v75))
      {
        v76 = *a3;
        v77 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 8);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v76;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v77;
        _os_log_impl(&dword_1B8270000, v74, v75, "Nothing found on page %d used_bytes %d", buf, 0xEu);
      }
      *__error() = v73;
      page_release(a1, value_out, v136, 0, 0);
      v15 = (void **)(a3 + 4);
      v12 = v134;
      a4 = v133;
    }
    v135 = 0;
    v35 = 0;
    v36 = v32 + v33;
    v37 = (_DWORD *)(v32 + 20);
    v38 = (v33 + 1) >> 1;
    v39 = 2;
    v40 = 20;
    v139 = v32 + v33;
    while (1)
    {
      v41 = v33 - v40;
      if ((int)v33 - v40 > v38 - 8)
      {
        v42 = (*v37 + 4);
        v43 = (_DWORD *)((char *)v37 + v42);
        if ((unint64_t)v37 + v42 < v36)
        {
          v44 = v37;
          do
          {
            v37 = v43;
            v45 = v44 + 1;
            v35 = *((unsigned __int8 *)v44 + 4);
            if ((char)v44[1] < 0)
            {
              v47 = *((unsigned __int8 *)v44 + 4);
              if (v47 > 0xBF)
              {
                if (v47 > 0xDF)
                {
                  if (v47 > 0xEF)
                  {
                    if (v47 > 0xF7)
                    {
                      if (v47 > 0xFB)
                      {
                        if (v47 > 0xFD)
                        {
                          if (v47 == 255)
                          {
                            v35 = *(_QWORD *)((char *)v44 + 5);
                            v46 = 9;
                          }
                          else
                          {
                            v35 = ((unint64_t)*((unsigned __int8 *)v44 + 5) << 48) | ((unint64_t)*((unsigned __int8 *)v44 + 6) << 40) | ((unint64_t)*((unsigned __int8 *)v44 + 7) << 32) | ((unint64_t)*((unsigned __int8 *)v44 + 8) << 24) | ((unint64_t)*((unsigned __int8 *)v44 + 9) << 16) | ((unint64_t)*((unsigned __int8 *)v44 + 10) << 8) | *((unsigned __int8 *)v44 + 11);
                            v46 = 8;
                          }
                        }
                        else
                        {
                          v35 = ((v35 & 1) << 48) | ((unint64_t)*((unsigned __int8 *)v44 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v44 + 6) << 32) | ((unint64_t)*((unsigned __int8 *)v44 + 7) << 24) | ((unint64_t)*((unsigned __int8 *)v44 + 8) << 16) | ((unint64_t)*((unsigned __int8 *)v44 + 9) << 8) | *((unsigned __int8 *)v44 + 10);
                          v46 = 7;
                        }
                      }
                      else
                      {
                        v35 = ((v35 & 3) << 40) | ((unint64_t)*((unsigned __int8 *)v44 + 5) << 32) | ((unint64_t)*((unsigned __int8 *)v44 + 6) << 24) | ((unint64_t)*((unsigned __int8 *)v44 + 7) << 16) | ((unint64_t)*((unsigned __int8 *)v44 + 8) << 8) | *((unsigned __int8 *)v44 + 9);
                        v46 = 6;
                      }
                    }
                    else
                    {
                      v35 = ((v35 & 7) << 32) | ((unint64_t)*((unsigned __int8 *)v44 + 5) << 24) | ((unint64_t)*((unsigned __int8 *)v44 + 6) << 16) | ((unint64_t)*((unsigned __int8 *)v44 + 7) << 8) | *((unsigned __int8 *)v44 + 8);
                      v46 = 5;
                    }
                  }
                  else
                  {
                    v35 = ((v35 & 0xF) << 24) | ((unint64_t)*((unsigned __int8 *)v44 + 5) << 16) | ((unint64_t)*((unsigned __int8 *)v44 + 6) << 8) | *((unsigned __int8 *)v44 + 7);
                    v46 = 4;
                  }
                }
                else
                {
                  v35 = ((v35 & 0x1F) << 16) | ((unint64_t)*((unsigned __int8 *)v44 + 5) << 8) | *((unsigned __int8 *)v44 + 6);
                  v46 = 3;
                }
              }
              else
              {
                v35 = *((unsigned __int8 *)v44 + 5) | ((v35 & 0x3F) << 8);
                v46 = 2;
              }
            }
            else
            {
              v46 = 1;
            }
            v48 = *((unsigned __int8 *)v45 + v46);
            if (*((char *)v45 + v46) < 0)
            {
              if (v48 >= 0xC0)
              {
                if (v48 >= 0xE0)
                {
                  v128 = __si_assert_copy_extra_2151(0, -1);
                  v129 = v128;
                  v130 = "";
                  if (v128)
                    v130 = v128;
                  __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v130);
                  free(v129);
                  if (__valid_fs(-1))
                  {
                    MEMORY[0xBAD] = -559038737;
                    abort();
                  }
                  MEMORY[0xC00] = -559038737;
                  abort();
                }
                v49 = v46 + 2;
              }
              else
              {
                v49 = v46 + 1;
              }
              v48 = *((unsigned __int8 *)v45 + v49);
            }
            v40 += v42;
            v41 = v33 - v40;
            if ((int)v33 - v40 <= v38 - 8)
              break;
            v42 = (*v37 + 4);
            v43 = (_DWORD *)((char *)v37 + v42);
            v44 = v37;
          }
          while ((unint64_t)v37 + v42 < v36);
          v135 = *(_BYTE *)(a1 + 804) & (v48 >> 5) & 1;
        }
      }
      if (v34 != v32)
      {
        v113 = __si_assert_copy_extra_2151(0, -1);
        v111 = v113;
        v114 = "";
        if (v113)
          v114 = v113;
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 8346, "in_cached==entry->cache_dbps", v114);
        goto LABEL_150;
      }
      v32 = v34;
      if (v40 >= 21)
        break;
LABEL_94:
      v72 = 16;
      if ((*(_BYTE *)(v32 + 12) & 4) == 0)
        v72 = 4;
      if (v38 <= *(_DWORD *)(v32 + v72) / 2)
      {
        v83 = v38;
        v84 = *__error();
        v85 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          v86 = *a3;
          v87 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 8);
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&buf[4] = v86;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v87;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&buf[16] = v83;
          _os_log_impl(&dword_1B8270000, v85, OS_LOG_TYPE_DEFAULT, "Failure to split page %d used_bytes %d into pieces of size %d", buf, 0x14u);
        }
        *__error() = v84;
        page_release(a1, value_out, v136, 0, 0);
        goto LABEL_137;
      }
      LODWORD(v33) = *(_DWORD *)(v32 + 8);
      v38 = ((int)v33 + v39) / (v39 + 1);
      ++v39;
      if ((unint64_t)v37 >= v36)
        goto LABEL_98;
    }
    v141 = v39;
    v142 = v38;
    v50 = *(_DWORD *)(a1 + 804);
    v51 = page_resize(a1, &value_out, 1, *((_DWORD *)value_out + 2) + v41, 0, v29, v30, v31, 0);
    if ((_DWORD)v51)
    {
      v18 = v51;
      page_release(a1, value_out, v136, v132, 0);
      v116 = *__error();
      v88 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
        goto LABEL_155;
      v89 = *((_DWORD *)value_out + 2);
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "db_split_page";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 8355;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v18;
      v147 = 1024;
      v148 = v136;
      v149 = 1024;
      v150 = v89;
      v151 = 1024;
      v152 = v89 + v41;
      v90 = "%s:%d: ERR: page_resize error %d with page %d used_bytes %d new page size %d\n";
      v91 = v88;
      v92 = 42;
      goto LABEL_143;
    }
    v52 = (v50 >> 1) & 1;
    memcpy((char *)value_out + *((int *)value_out + 2), (const void *)(*v8 + v40), v41);
    v53 = value_out;
    v54 = *((_DWORD *)value_out + 2) + v41;
    *((_DWORD *)value_out + 2) = v54;
    if (v54 >= 21)
    {
      v55 = (unint64_t)v53 + v54;
      v56 = (v53[5] + 4);
      v57 = 4;
      if ((v53[3] & 4) == 0)
        v57 = 1;
      if ((int)v53[v57] - 20 < v56 && (unint64_t)v53 + v56 + 20 >= v55)
      {
        v59 = *v8;
        v60 = *(_DWORD *)(*v8 + 12) & 4;
        v62 = v142;
LABEL_79:
        LOBYTE(v52) = ((v50 & 2) != 0) | 2;
        goto LABEL_80;
      }
    }
    v59 = *v8;
    v60 = *(_DWORD *)(*v8 + 12) & 4;
    v61 = 16;
    if (!v60)
      v61 = 4;
    v62 = v142;
    if (v142 <= *(_DWORD *)(v59 + v61))
      goto LABEL_79;
LABEL_80:
    v63 = v60 == 0;
    v64 = 16;
    if (v63)
      v64 = 4;
    if (v62 <= *(_DWORD *)(v59 + v64) / 2)
    {
      v137 = *__error();
      v65 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        v66 = *a3;
        v67 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 8);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&buf[4] = v66;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v67;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&buf[16] = v142;
        _os_log_impl(&dword_1B8270000, v65, OS_LOG_TYPE_DEFAULT, "Forced to split page %d used_bytes %d into pieces of size %d", buf, 0x14u);
      }
      *__error() = v137;
      v53 = value_out;
    }
    v68 = page_compress(a1, (size_t)v53, &v144, 0, v52);
    v32 = *v8;
    if (v68)
    {
      v69 = 16;
      if ((*(_BYTE *)(v32 + 12) & 4) == 0)
        v69 = 4;
      v38 = v142;
      if (v142 <= *(_DWORD *)(v32 + v69) / 2)
      {
        v70 = v68;
        v138 = *__error();
        v71 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "db_split_page";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 8383;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v70;
          v147 = 1024;
          v148 = v41;
          v149 = 1024;
          v150 = v142;
          _os_log_error_impl(&dword_1B8270000, v71, OS_LOG_TYPE_ERROR, "%s:%d: Page compress failed with error %d at %d/%d", buf, 0x24u);
        }
        *__error() = v138;
        v32 = *v8;
        v38 = v142;
      }
      *((_DWORD *)value_out + 2) -= v41;
      v36 = v139;
      v34 = v140;
      v39 = v141;
      goto LABEL_94;
    }
    v78 = *(_DWORD *)(v32 + 4);
    *(_DWORD *)(v32 + 8) -= v41;
    page_resize(a1, (void **)a3 + 1, 1, v78 - v41, 0, v29, v30, v31, 0);
    if (dword_1EF19FCA8 >= 5)
    {
      v80 = *__error();
      v81 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
      {
        v82 = *a3;
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&buf[4] = v82;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v136;
        *(_WORD *)&buf[14] = 2048;
        *(_QWORD *)&buf[16] = v35;
        v147 = 1024;
        v148 = v135;
        _os_log_impl(&dword_1B8270000, v81, OS_LOG_TYPE_DEFAULT, "splitting map page %x, new page %x max_oid %llx type %d\n", buf, 0x1Eu);
      }
      *__error() = v80;
    }
    map_split(a1, (int *)a3, v35, v135, (uint64_t)value_out, v136);
    v79 = page_release_dirty_compressed(a1, (char *)value_out, v144, v136, v132);
    v15 = (void **)(a3 + 4);
    v12 = v134;
    a4 = v133;
  }
  while (!(_DWORD)v79);
  v18 = v79;
  v116 = *__error();
  v117 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "db_split_page";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 8424;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v136;
    v147 = 1024;
    v148 = v18;
    v90 = "%s:%d: Failed releasing dity compressed cache page %d with error %d";
    v91 = v117;
    v92 = 30;
    goto LABEL_143;
  }
LABEL_155:
  *__error() = v116;
LABEL_156:
  v119 = *__error();
  v120 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
  {
    v124 = *a3;
    v125 = *(_DWORD *)(*((_QWORD *)a3 + 1) + 8);
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "db_compress_cache";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 8255;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v18;
    v147 = 1024;
    v148 = v124;
    v149 = 1024;
    v150 = v125;
    v151 = 1024;
    v152 = v131;
    _os_log_error_impl(&dword_1B8270000, v120, OS_LOG_TYPE_ERROR, "%s:%d: ERR: db_split_page error %d with page %d used_bytes %d disk page size %d\n", buf, 0x2Au);
  }
  *__error() = v119;
LABEL_159:
  *(_DWORD *)(a1 + 4) |= 2u;
  v121 = *__error();
  v122 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR))
  {
    v123 = *a3;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "_flush_cache_entry";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 7903;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v123;
    v147 = 1024;
    v148 = v18;
    _os_log_error_impl(&dword_1B8270000, v122, OS_LOG_TYPE_ERROR, "%s:%d: Failed compressing/splitting page %d error %d", buf, 0x1Eu);
  }
  *__error() = v121;
  a3[6] = 0;
  *(_DWORD *)(a1 + 800) = v18;
  return v18;
}

uint64_t page_compress(uint64_t a1, size_t a2, int8x16_t **a3, __int32 *a4, char a5)
{
  uint64_t v5;
  int v9;
  uint64_t v10;
  __int32 v11;
  int8x16_t *v14;
  int8x16_t *v15;
  uint64_t v16;
  size_t v17;
  int v18;
  int v19;
  _BOOL4 v20;
  int v21;
  NSObject *v22;
  os_log_type_t v23;
  int8x16_t *v24;
  uLong v25;
  uint8_t *v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  BOOL v31;
  int v32;
  uLong v33;
  _BOOL4 v34;
  _BOOL4 v35;
  uLongf v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  __int32 v41;
  unint64_t v43;
  uLongf v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  uint8_t *v48;
  void *v49;
  uLongf v50;
  size_t v51;
  char *v52;
  char *v53;
  char *v54;
  const char *v55;
  int v56;
  NSObject *v57;
  int *v58;
  int v59;
  NSObject *v60;
  int *v61;
  uint64_t v62;
  uint8_t *v63;
  int8x16_t *v64;
  const uint8_t *v65;
  uint64_t v66;
  uLongf destLen;
  uint8_t buf[4];
  double v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v5 = 22;
  if (!a2 || !a3)
    return v5;
  v9 = *(_DWORD *)(a2 + 12);
  v10 = 16;
  if ((v9 & 4) == 0)
    v10 = 4;
  v11 = *(_DWORD *)(a2 + v10);
  if ((v9 & 0xC) != 0)
  {
    destLen = 0;
    if ((v9 & 8) == 0)
    {
      v14 = (int8x16_t *)malloc_type_valloc(v11 + 16, 0x183A7062uLL);
      if (!v14)
      {
        *a3 = 0;
        return 12;
      }
      v15 = v14;
      v16 = v11 - 20;
      destLen = v16;
      v17 = *(int *)(a2 + 8) - 20;
      if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
        db2_swap_page(a2);
      v66 = v11 - 20;
      if ((a5 & 1) != 0)
      {
        v24 = v15;
        v25 = v17;
        v64 = v24;
        v26 = &v24[1].u8[4];
        v27 = fast_compress_limitedOutput((const uint8_t *)(a2 + 20), &v24[1].u8[4], v25, v16);
        destLen = v27;
        if (!v27)
        {
          v63 = v26;
          v65 = (const uint8_t *)(a2 + 20);
          destLen = v11 - 20;
          if ((a5 & 2) == 0)
          {
            LOBYTE(v18) = 0;
            v19 = 0;
            v20 = 0;
            LODWORD(v65) = 0;
            v5 = 7;
            v15 = v64;
            goto LABEL_48;
          }
          if ((*(_BYTE *)(a1 + 804) & 4) != 0)
          {
            v47 = compression_encode_scratch_buffer_size(COMPRESSION_LZFSE);
            v48 = v63;
            v17 = v25;
            if (v47 <= 0xFA00)
            {
              v15 = v64;
              if (v47)
              {
                MEMORY[0x1E0C80A78](v47);
                v52 = (char *)&v62 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
                bzero(v52, v51);
              }
              else
              {
                v52 = 0;
              }
              v16 = v66;
              v50 = compression_encode_buffer(v48, v66, v65, v17, v52, COMPRESSION_LZFSE);
              destLen = v50;
            }
            else
            {
              v49 = malloc_type_malloc(v47, 0x3D17D826uLL);
              v16 = v66;
              v50 = compression_encode_buffer(v63, v66, v65, v17, v49, COMPRESSION_LZFSE);
              destLen = v50;
              free(v49);
              v15 = v64;
            }
            v20 = v50 != 0;
            if (v50)
              v29 = 0;
            else
              v29 = -5;
            v28 = 1;
          }
          else
          {
            v17 = v25;
            v29 = compress2(v63, &destLen, v65, v25, 3);
            v20 = 0;
            v28 = 1;
            v16 = v66;
            v15 = v64;
          }
          goto LABEL_30;
        }
        v20 = 0;
        LODWORD(v65) = 0;
        v18 = 1;
        v15 = v64;
      }
      else
      {
        if ((a5 & 2) == 0 && v17 > 12 * v16)
        {
          LOBYTE(v18) = 0;
          v19 = 0;
          v20 = 0;
          LODWORD(v65) = 0;
          v5 = 7;
LABEL_48:
          if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
          {
            v35 = v20;
            db2_swap_page(a2);
            v20 = v35;
          }
          if ((v18 & 1) != 0)
          {
            v15->i32[0] = 1684172850;
            v15->i32[1] = v11;
            v36 = destLen;
            v15->i32[2] = destLen + 20;
            if (v19)
              v37 = 4104;
            else
              v37 = 8;
            v38 = *(_DWORD *)(a2 + 12) & 0xFFFFEFF3 | v37;
            v39 = *(_DWORD *)(a2 + 12) & 0xFFFFCFF3 | v37 & 0xFFFFDFFF;
            v40 = v38 | 0x2000;
            if (!v20)
              v40 = v39;
            v15->i32[3] = v40;
            v15[1].i32[0] = *(_DWORD *)(a2 + 8);
            bzero((char *)v15[1].i64 + v36 + 4, v66 - v36);
            if (a4)
            {
              v41 = *(_DWORD *)(a2 + 8);
              if ((v65 & 1) == 0)
                v41 += 4 * (v15->i32[1] - v15->i32[2]);
              *a4 = v41;
            }
            if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
            {
              *v15 = vrev32q_s8(*v15);
              v15[1].i32[0] = bswap32(v15[1].u32[0]);
            }
            v5 = 0;
            *a3 = v15;
          }
          else
          {
            free(v15);
            *a3 = 0;
            if (*(_DWORD *)(a2 + 8) <= v11)
            {
              v5 = 0;
              if (a4)
                *a4 = v11;
            }
          }
          return v5;
        }
        v28 = a5 & 2;
        v29 = compress2(&v15[1].u8[4], &destLen, (const Bytef *)(a2 + 20), v17, 3);
        if (!dword_1EF19FCA8)
          goto LABEL_29;
        if (v29)
        {
          do
            v30 = __ldaxr((unint64_t *)&page_compress_failedCompressed);
          while (__stlxr(v30 + 1, (unint64_t *)&page_compress_failedCompressed));
          if (dword_1EF19FCA8 >= 5)
          {
            LODWORD(v65) = v29;
            v56 = *__error();
            v57 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              v69 = *(double *)&v17;
              _os_log_impl(&dword_1B8270000, v57, OS_LOG_TYPE_DEFAULT, "Zip Failed compressing %ld bytes\n", buf, 0xCu);
            }
            v58 = __error();
            v20 = 0;
            *v58 = v56;
            v29 = (int)v65;
            v16 = v66;
            goto LABEL_30;
          }
LABEL_29:
          v20 = 0;
LABEL_30:
          if (v28)
            v31 = v29 == -5;
          else
            v31 = 0;
          v32 = v31;
          if (v31)
          {
            destLen = v16;
            v33 = v17;
            v34 = v20;
            v29 = compress2(&v15[1].u8[4], &destLen, (const Bytef *)(a2 + 20), v33, 9);
            v20 = v34;
          }
          LODWORD(v65) = v32;
          v18 = 0;
          if (v29 == -4)
          {
            v19 = 0;
            v5 = 12;
            goto LABEL_48;
          }
          if (v29 == -5)
            v5 = 7;
          else
            v5 = 22;
          if (v29)
          {
            v19 = 0;
            goto LABEL_48;
          }
          goto LABEL_24;
        }
        do
          v43 = __ldaxr((unint64_t *)&page_compress_totalUncompressed);
        while (__stlxr(v43 + v17, (unint64_t *)&page_compress_totalUncompressed));
        v44 = destLen;
        do
          v45 = __ldaxr((unint64_t *)&page_compress_totalCompressed);
        while (__stlxr(v45 + v44, (unint64_t *)&page_compress_totalCompressed));
        do
          v46 = __ldaxr((unint64_t *)&page_compress_successCompressed);
        while (__stlxr(v46 + 1, (unint64_t *)&page_compress_successCompressed));
        if (dword_1EF19FCA8 >= 5)
        {
          v59 = *__error();
          v60 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218496;
            v69 = (double)page_compress_totalUncompressed / (double)page_compress_totalCompressed;
            v70 = 2048;
            v71 = page_compress_successCompressed;
            v72 = 2048;
            v73 = page_compress_failedCompressed;
            _os_log_impl(&dword_1B8270000, v60, OS_LOG_TYPE_DEFAULT, "Zip Compression ratio: %f good:%lld bad:%lld\n", buf, 0x20u);
          }
          v61 = __error();
          v18 = 0;
          v20 = 0;
          LODWORD(v65) = 0;
          *v61 = v59;
        }
        else
        {
          v18 = 0;
          v20 = 0;
          LODWORD(v65) = 0;
        }
      }
LABEL_24:
      v5 = 0;
      v19 = v18;
      LOBYTE(v18) = 1;
      goto LABEL_48;
    }
    v21 = *__error();
    v22 = _SILogForLogForCategory(7);
    v23 = 2 * (dword_1EF19FCA8 < 4);
    if (os_log_type_enabled(v22, v23))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v22, v23, "page_compress: ERR: page is already compressed!\n", buf, 2u);
    }
    *__error() = v21;
  }
  else
  {
    if (a4)
      *a4 = v11;
    if (*(_DWORD *)(a2 + 8) > v11)
    {
      v53 = __si_assert_copy_extra_2151(0, -1);
      v54 = v53;
      v55 = "";
      if (v53)
        v55 = v53;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 3010, "(size_t)dbp->used_bytes <= sz", v55);
      free(v54);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v5 = 0;
    *a3 = 0;
  }
  return v5;
}

double map_split(uint64_t a1, int *a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, __int32 a6)
{
  double result;
  int32x2_t *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int *v18;
  uint64_t v19;
  int v20;
  int *v21;
  int v22;
  int v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  int32x2_t *v27;
  uint64_t v28;
  int32x2_t v29;
  int32x2_t v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (map_check_size(a1))
    return result;
  v13 = *(int32x2_t **)(a1 + 856);
  v14 = *a2;
  v15 = v13[2].i32[0];
  v16 = v13[1].i32[0];
  if ((int)v16 <= (int)v15 || (int)v15 <= -1)
    v15 = 0;
  if (v15 >= v16)
  {
LABEL_12:
    if (v15 < 1)
    {
LABEL_16:
      v23 = *__error();
      v24 = _SILogForLogForCategory(7);
      v25 = 2 * (dword_1EF19FCA8 < 4);
      if (os_log_type_enabled(v24, v25))
      {
        v26 = *a2;
        v31 = 136315394;
        v32 = a1 + 324;
        v33 = 1024;
        v34 = v26;
        _os_log_impl(&dword_1B8270000, v24, v25, "%s : ERR: map_split_page: BAD NEWS! pgnum 0x%x not found\n", (uint8_t *)&v31, 0x12u);
      }
      *__error() = v23;
      return result;
    }
    v19 = 0;
    v21 = (int *)&v13[3] + 1;
    while (1)
    {
      v22 = *v21;
      v21 += 4;
      if (v22 == v14)
        break;
      if (v15 == ++v19)
        goto LABEL_16;
    }
  }
  else
  {
    v18 = (int *)&v13[2 * v15 + 3] + 1;
    v19 = v15;
    while (1)
    {
      v20 = *v18;
      v18 += 4;
      if (v20 == v14)
        break;
      if (v16 == ++v19)
        goto LABEL_12;
    }
  }
  v13[2].i32[0] = v19;
  v27 = &v13[2 * v19];
  memmove((char *)&v27[4] + 4, (char *)&v27[2] + 4, 16 * (v16 - v19));
  *(int32x2_t *)((char *)&v27[2] + 4) = (int32x2_t)a3;
  v27[4].i32[0] = v27[4].i32[0] & 0xFFFFFFF | (a4 << 28);
  v27[5].i32[1] = a6;
  v28 = 16;
  if ((*(_DWORD *)(a5 + 12) & 4) == 0)
    v28 = 4;
  v27[6].i32[0] = v27[6].i32[0] & 0xF0000000 | *(_DWORD *)(a5 + v28) & 0xFFFFFFF;
  v29 = v13[1];
  v30.i32[0] = vadd_s32(v29, (int32x2_t)0x100000001).u32[0];
  *(_QWORD *)&result = *(_QWORD *)&v29 | 0x100000001;
  v30.i32[1] = HIDWORD(result);
  v13[1] = v30;
  return result;
}

uint64_t page_release_dirty_compressed(uint64_t a1, char *value, void *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  unsigned int v11;
  unsigned int *v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  signed int v19;
  uint64_t result;
  int v21;
  NSObject *v22;
  int v23;
  NSObject *v24;
  char *v25;
  char *v26;
  const char *v27;
  char *v28;
  const char *v29;
  void *v30;
  _BYTE buf[18];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v30 = value;
  if (value)
  {
    if (a3)
    {
      v10 = *(_QWORD *)(a1 + 928);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v11 = atomic_load((unsigned int *)(v10 + 248));
      if (v11 > a4)
      {
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)buf = *(_QWORD *)v10;
        *(_DWORD *)&buf[8] = a4;
        _cache_remove((uint64_t *)buf);
      }
      v12 = *(unsigned int **)(a1 + 928);
      v13 = v12[55];
      if ((int)v13 < 1)
      {
LABEL_10:
        v18 = 16;
        if ((*((_DWORD *)value + 3) & 4) == 0)
          v18 = 4;
        v19 = *(_DWORD *)&value[v18];
        _add_dirty_chunk(a1, a4, v19, (a5 >> 14) & 1);
        page_cache_add(*(unsigned int **)(a1 + 928), (_DWORD **)&v30, a4, 0);
        if (sdb_pwrite(*(_QWORD *)(a1 + 848), (uint64_t)a3, v19, (unint64_t)a4 << *(_DWORD *)(a1 + 12)) == v19)
        {
          free(v30);
          free(a3);
          return 0;
        }
        else
        {
          *(_DWORD *)(a1 + 4) |= 2u;
          v23 = *__error();
          v24 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "page_release_dirty_compressed";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3526;
            _os_log_error_impl(&dword_1B8270000, v24, OS_LOG_TYPE_ERROR, "%s:%d: Failed writing page", buf, 0x12u);
          }
          *__error() = v23;
          if (!*__error())
            *__error() = 22;
          *(_DWORD *)(a1 + 800) = *__error();
          return *__error();
        }
      }
      else
      {
        v14 = v12 + 72;
        v15 = (int *)(v12 + 63);
        while (1)
        {
          v17 = *v15++;
          v16 = v17;
          if (*((char **)v14 - 2) == value)
            break;
          if (v16 == a4)
          {
            v25 = __si_assert_copy_extra_268();
            v26 = v25;
            v27 = "";
            if (v25)
              v27 = v25;
            __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1088, "cache->cache_pgnum[i] != pgnum", v27);
            goto LABEL_28;
          }
          v14 += 12;
          if (!--v13)
            goto LABEL_10;
        }
        if (v16 != a4)
        {
          v28 = __si_assert_copy_extra_268();
          v26 = v28;
          v29 = "";
          if (v28)
            v29 = v28;
          __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1080, "cache->cache_pgnum[i] == pgnum", v29);
LABEL_28:
          free(v26);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        free(*((void **)v14 - 1));
        result = 0;
        *((_QWORD *)v14 - 1) = a3;
        *v14 = 1;
      }
    }
    else
    {
      return page_release(a1, value, a4, 1u, 0);
    }
  }
  else
  {
    v21 = *__error();
    v22 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "page_release_dirty_compressed";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3487;
      _os_log_error_impl(&dword_1B8270000, v22, OS_LOG_TYPE_ERROR, "%s:%d: Failed releasing null page", buf, 0x12u);
    }
    *__error() = v21;
    return 22;
  }
  return result;
}

uint64_t map_check_size(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  size_t v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  int updated;
  uint64_t v16;
  int v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  int v37;
  NSObject *v38;
  int v39;
  char *v40;
  char *v41;
  const char *v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  signed int v49;
  _BYTE buf[12];
  __int16 v51;
  int v52;
  __int16 v53;
  _BYTE v54[10];
  _BYTE v55[20];
  __int16 v56;
  size_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v1 = *(int **)(a1 + 856);
  v2 = v1[2];
  if (v2 + 1 <= (uint64_t)((unint64_t)(v1[1] - 36) >> 4))
    return 0;
  if ((int)v2 < 1)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    v4 = 0;
    v5 = (unsigned int *)(v1 + 7);
    while (1)
    {
      v6 = *v5;
      v5 += 4;
      if ((unint64_t)v6 << *(_DWORD *)(a1 + 12) == *(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40))
        break;
      if (v1[2] == ++v4)
      {
        v7 = 0x4000;
        v8 = 1;
        goto LABEL_12;
      }
    }
  }
  if ((int)v4 >= (int)v2)
  {
    v7 = 0x4000;
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v7 = v1[4 * v4 + 8] & 0xFFFFFFF;
  }
  LODWORD(v2) = v4;
LABEL_12:
  v48 = 0;
  v9 = (*(_DWORD *)(a1 + 36) + *(_DWORD *)(a1 + 40)) >> *(_DWORD *)(a1 + 12);
  v10 = v7;
  v11 = malloc_type_malloc(v7, 0xBC0410BFuLL);
  v47 = v9;
  v12 = fd_pread(*(_DWORD **)(a1 + 848), v11, v10, v9 << *(_DWORD *)(a1 + 12));
  if (v12 == v10)
  {
    v13 = v11[3];
    if ((v13 & 0xF0) != 0)
      v14 = v8;
    else
      v14 = 1;
    if ((v14 & 1) == 0)
    {
      v40 = __si_assert_copy_extra_2151(0, -1);
      v41 = v40;
      v42 = "";
      if (v40)
        v42 = v40;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 1232, "do_string_update || (flags & 0x000000f0)==0", v42);
      free(v41);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    *(_QWORD *)buf = 0;
    if (_page_alloc_fetch(a1, (int8x16_t **)buf, v10, &v48, &v49, 0))
    {
      updated = 28;
      goto LABEL_45;
    }
    v43 = v13;
    v44 = (uint64_t)v11;
    v45 = v10;
    free(*(void **)buf);
    v20 = v48;
    v46 = v8;
    if ((v8 & 1) != 0 || (v21 = *(_QWORD *)(a1 + 928), v22 = *(_DWORD *)(v21 + 220), v22 < 1))
    {
LABEL_35:
      v11 = (_DWORD *)v44;
      LODWORD(v10) = v45;
      v31 = fd_pwrite(*(_QWORD *)(a1 + 848), v44, v45, v20 << *(_DWORD *)(a1 + 12));
      LOBYTE(v8) = v46;
      if (v31 == v45)
        v32 = v46;
      else
        v32 = 0;
      if (v31 == v45)
        updated = 0;
      else
        updated = 28;
      if (v32 == 1)
      {
        if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
          updated = 0;
        else
          updated = update_string_table(a1, v47, v20, v43);
      }
LABEL_45:
      free(v11);
      if (updated)
        return 28;
      goto LABEL_46;
    }
    v23 = 0;
    v24 = 0;
    v25 = 63;
    while (1)
    {
      v30 = *(_DWORD *)(v21 + 4 * v25);
      if (v30 == (_DWORD)v20)
      {
        *(_DWORD *)(v21 + 4 * v25) = 0;
        v26 = v21 + v23;
        *(_QWORD *)(v26 + 296) = 0;
        *(_DWORD *)(v26 + 304) = 0;
        *(_QWORD *)(v26 + 312) = 0;
        v27 = (void **)(v21 + v23 + 272);
        free(*(void **)(v21 + v23 + 280));
        *(_QWORD *)(v26 + 280) = 0;
        v28 = *v27;
      }
      else
      {
        if (v30 != v47)
          goto LABEL_30;
        *(_DWORD *)(v21 + 4 * v25) = v20;
        v28 = *(void **)(v21 + v23 + 280);
        if (!v28)
          goto LABEL_30;
        v27 = (void **)(v21 + 48 * v24 + 280);
      }
      free(v28);
      *v27 = 0;
      v22 = *(_DWORD *)(v21 + 220);
LABEL_30:
      ++v24;
      v29 = v25 - 62;
      ++v25;
      v23 += 48;
      if (v29 >= v22)
        goto LABEL_35;
    }
  }
  v16 = v12;
  *(_DWORD *)(a1 + 4) |= 4u;
  v17 = *__error();
  v18 = *__error();
  v19 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316674;
    *(_QWORD *)&buf[4] = "db_shove_page";
    v51 = 1024;
    v52 = 1221;
    v53 = 1024;
    *(_DWORD *)v54 = v47;
    *(_WORD *)&v54[4] = 1024;
    *(_DWORD *)&v54[6] = v17;
    *(_WORD *)v55 = 2080;
    *(_QWORD *)&v55[2] = a1 + 324;
    *(_WORD *)&v55[10] = 2048;
    *(_QWORD *)&v55[12] = v16;
    v56 = 2048;
    v57 = v10;
    _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: Failed reading pgnum %d error:%d (%s) %zd != %zd", buf, 0x3Cu);
  }
  *__error() = v18;
  *__error() = v17;
  if (!*__error())
    *__error() = 22;
  free(v11);
  if (*__error())
    return 28;
LABEL_46:
  v33 = malloc_type_zone_malloc((malloc_zone_t *)sdb_map_zone, (*(_DWORD *)(a1 + 40) + v10), 0x1C12B017uLL);
  if (v33)
  {
    v34 = v33;
    memcpy(v33, v1, *(unsigned int *)(a1 + 40));
    if ((v8 & 1) == 0)
      v34[4 * v2 + 7] = v48;
    *(_DWORD *)(a1 + 40) += v10;
    v34[1] += v10;
    free(v1);
    v34[3] |= 1u;
    *(_QWORD *)(a1 + 856) = v34;
    v35 = (((uint64_t)(int)v34[1] << 28) - 0x140000000) >> 32;
    if (v35 > (int)v34[2] + 1)
      return 0;
    v37 = *__error();
    v38 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v39 = v34[2] + 1;
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "map_check_size";
      v51 = 1024;
      v52 = 1411;
      v53 = 2080;
      *(_QWORD *)v54 = a1 + 324;
      *(_WORD *)&v54[8] = 1024;
      *(_DWORD *)v55 = v39;
      *(_WORD *)&v55[4] = 2048;
      *(_QWORD *)&v55[6] = v35;
      _os_log_error_impl(&dword_1B8270000, v38, OS_LOG_TYPE_ERROR, "%s:%d: %s : map_check_size: ERR FATAL: too many entries! %d / %ld\n", buf, 0x2Cu);
    }
    *__error() = v37;
  }
  return 28;
}

uint64_t update_string_table(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  char *v25;
  char *v26;
  const char *v27;
  int v28;
  NSObject *v29;
  int v30;
  NSObject *v31;
  NSObject *log;
  int v33;
  int v34;
  os_unfair_lock_s *lock;
  uint8_t buf[4];
  unsigned int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v8 = *__error();
  v9 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    v37 = a2;
    v38 = 1024;
    v39 = a3;
    _os_log_impl(&dword_1B8270000, v9, OS_LOG_TYPE_DEFAULT, "Moving string page from %d to %d", buf, 0xEu);
  }
  v34 = a3;
  v10 = 0;
  *__error() = v8;
  v11 = a1 + 880;
  do
  {
    if ((db_string_page_flags[v10] & a4) != 0)
    {
      v12 = a4;
      lock = (os_unfair_lock_s *)(*(_QWORD *)(v11 + 8 * v10) + 68);
      os_unfair_lock_lock(lock);
      v13 = *(int **)(v11 + 8 * v10);
      v14 = *((_QWORD *)v13 + 3);
      v15 = a1;
      v16 = a1 + 4 * v10;
      v19 = *(_DWORD *)(v16 + 48);
      v18 = (_DWORD *)(v16 + 48);
      v17 = v19;
      v20 = *v13;
      if (*v13 == a2)
      {
        *v13 = v34;
        if (dword_1EF19FCA8 >= 5)
        {
          v33 = *__error();
          log = _SILogForLogForCategory(7);
          if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            v37 = a2;
            v38 = 1024;
            v39 = v34;
            v40 = 1024;
            v41 = v10;
            _os_log_impl(&dword_1B8270000, log, OS_LOG_TYPE_DEFAULT, "Change dirty string page %d to %d (%d)", buf, 0x14u);
          }
          *__error() = v33;
        }
      }
      if (*v18 == a2)
      {
        *v18 = v34;
        if (dword_1EF19FCA8 >= 5)
        {
          v30 = *__error();
          v31 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109632;
            v37 = a2;
            v38 = 1024;
            v39 = v34;
            v40 = 1024;
            v41 = v10;
            _os_log_impl(&dword_1B8270000, v31, OS_LOG_TYPE_DEFAULT, "Change first string page %d to %d (%d)", buf, 0x14u);
          }
          v23 = 0;
          *__error() = v30;
        }
        else
        {
          v23 = 0;
        }
        goto LABEL_24;
      }
      if (v14)
      {
        while (1)
        {
          v21 = *(_DWORD *)(v14 + 20);
          if (v21 == a2)
            break;
          v14 = *(_QWORD *)(v14 + 24);
          if (!v14)
            goto LABEL_4;
          v17 = v21;
        }
        *(_DWORD *)(v14 + 20) = v34;
        v22 = *(_DWORD *)(v14 + 4);
        if (v22 == 0x4000)
          v22 = 0;
        else
          *(_DWORD *)(v14 + 4) = 0x4000;
        v23 = page_release(v15, (_DWORD *)v14, v17, 5u, v22);
        if (dword_1EF19FCA8 >= 5)
        {
          v28 = *__error();
          v29 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109376;
            v37 = v17;
            v38 = 1024;
            v39 = v10;
            _os_log_impl(&dword_1B8270000, v29, OS_LOG_TYPE_DEFAULT, "Push chain string page %d to disk (%d)", buf, 0xEu);
          }
          *__error() = v28;
          if (v22)
LABEL_23:
            *(_DWORD *)(v14 + 4) = v22;
        }
        else if (v22)
        {
          goto LABEL_23;
        }
LABEL_24:
        os_unfair_lock_unlock(lock);
        return v23;
      }
LABEL_4:
      if (v20 == a2)
      {
        v25 = __si_assert_copy_extra_2151(0, -1);
        v26 = v25;
        v27 = "";
        if (v25)
          v27 = v25;
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 10948, "!updatedDirty", v27);
        free(v26);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      os_unfair_lock_unlock(lock);
      a1 = v15;
      a4 = v12;
    }
    ++v10;
  }
  while (v10 != 5);
  return 2;
}

uint64_t ___page_fetch_with_fd_block_invoke(uint64_t a1, unsigned int *a2)
{
  return _flush_cache_entry(*(_QWORD *)(a1 + 32), 0, a2, *(_DWORD *)(a1 + 40) & 0x4000);
}

uint64_t __db_flush_cache_lru_block_invoke(uint64_t a1, unsigned int *a2)
{
  return _flush_cache_entry(*(_QWORD *)(a1 + 32), *(size_t **)(a1 + 40), a2, *(_DWORD *)(a1 + 48));
}

xpc_object_t ___page_fetch_with_fd_block_invoke_173(uint64_t a1)
{
  xpc_object_t empty;
  char *v3;
  const char *v4;

  empty = xpc_dictionary_create_empty();
  v3 = strstr((char *)(*(_QWORD *)(a1 + 32) + 324), "Library/Spotlight/CoreSpotlight");
  if (v3)
    v4 = v3;
  else
    v4 = "invalid";
  xpc_dictionary_set_string(empty, "name", v4);
  xpc_dictionary_set_uint64(empty, "pgoff", (unint64_t)*(unsigned int *)(a1 + 48) << *(_DWORD *)(*(_QWORD *)(a1 + 32) + 12));
  xpc_dictionary_set_uint64(empty, "pgsize", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 44));
  xpc_dictionary_set_int64(empty, "signature", **(int **)(a1 + 40));
  xpc_dictionary_set_uint64(empty, "size", *(int *)(*(_QWORD *)(a1 + 40) + 4));
  xpc_dictionary_set_int64(empty, "used_bytes", *(int *)(*(_QWORD *)(a1 + 40) + 8));
  xpc_dictionary_set_int64(empty, "flags", *(int *)(*(_QWORD *)(a1 + 40) + 12));
  return empty;
}

size_t fast_compress_limitedOutput(const uint8_t *a1, uint8_t *a2, int a3, int a4)
{
  size_t v4;
  size_t v9;
  uint8_t *v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  unint64_t v21;
  NSObject *v23;
  uint8_t buf[4];
  double v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (7 * a4 < a3)
    return 0;
  v9 = compression_encode_scratch_buffer_size(COMPRESSION_LZ4);
  v10 = &buf[-((MEMORY[0x1E0C80A78](v9) + 15) & 0xFFFFFFFFFFFFFFF0)];
  bzero(v10, v11);
  v12 = compression_encode_buffer(a2, a4, a1, a3, v10, COMPRESSION_LZ4);
  v4 = v12;
  if (!dword_1EF19FCA8)
    return v4;
  if ((_DWORD)v12)
  {
    do
      v13 = __ldaxr((unint64_t *)&fast_compress_limitedOutput_totalUncompressed);
    while (__stlxr(v13 + a3, (unint64_t *)&fast_compress_limitedOutput_totalUncompressed));
    do
      v14 = __ldaxr((unint64_t *)&fast_compress_limitedOutput_totalCompressed);
    while (__stlxr(v14 + (int)v12, (unint64_t *)&fast_compress_limitedOutput_totalCompressed));
    do
      v15 = __ldaxr((unint64_t *)&fast_compress_limitedOutput_successCompressed);
    while (__stlxr(v15 + 1, (unint64_t *)&fast_compress_limitedOutput_successCompressed));
    if (dword_1EF19FCA8 >= 5)
    {
      v16 = *__error();
      v17 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218496;
        v25 = (double)fast_compress_limitedOutput_totalUncompressed
            / (double)fast_compress_limitedOutput_totalCompressed;
        v26 = 2048;
        v27 = fast_compress_limitedOutput_successCompressed;
        v28 = 2048;
        v29 = fast_compress_limitedOutput_failedCompressed;
        v18 = "Compression ratio: %f good:%lld bad:%lld\n";
        v19 = v17;
        v20 = 32;
LABEL_16:
        _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  else
  {
    do
      v21 = __ldaxr((unint64_t *)&fast_compress_limitedOutput_failedCompressed);
    while (__stlxr(v21 + 1, (unint64_t *)&fast_compress_limitedOutput_failedCompressed));
    if (dword_1EF19FCA8 >= 5)
    {
      v16 = *__error();
      v23 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v25) = a3;
        v18 = "Failed compressing %d bytes\n";
        v19 = v23;
        v20 = 8;
        goto LABEL_16;
      }
LABEL_17:
      *__error() = v16;
    }
  }
  return v4;
}

uint64_t map_update(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, int a6, int a7, char a8)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _BOOL4 v28;
  _BOOL4 v29;
  int v30;
  int v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  int v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  int v41;
  const char *v42;
  __int16 v43;
  _BYTE v44[34];
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD **)(a1 + 856);
  v9 = v8[2];
  if (!(_DWORD)v9)
    return 2;
  v17 = (int)v8[4];
  if ((int)v17 >= (int)v9
    || (v18 = &v8[4 * v17], v19 = (uint64_t)(v18 + 5), *(_QWORD *)(v18 + 5) != a4)
    || a6 != v18[8] >> 28)
  {
    v20 = (int)v9;
    if ((int)v9 >= 1)
    {
      v21 = 0;
      while (1)
      {
        if ((int)v9 + v21 < 0 != __OFADD__((_DWORD)v9, v21))
          v22 = v9 + v21 + 1;
        else
          v22 = v9 + v21;
        v23 = (v22 >> 1);
        v24 = a6 - (v8[4 * (int)v23 + 8] >> 28);
        if (v24)
        {
          v25 = v24;
          v26 = v23;
          if ((v25 & 0x8000000000000000) == 0)
          {
LABEL_15:
            if (!v25)
              goto LABEL_20;
            v21 = v23 + 1;
            v26 = v9;
          }
        }
        else
        {
          v25 = a4 - *(_QWORD *)&v8[4 * ((uint64_t)v22 >> 1) + 5];
          v26 = v23;
          if ((v25 & 0x8000000000000000) == 0)
            goto LABEL_15;
        }
        v9 = v26;
        if (v21 >= (int)v26)
        {
          v28 = v25 > 0;
          goto LABEL_21;
        }
      }
    }
    LODWORD(v23) = 0;
LABEL_20:
    v28 = 0;
LABEL_21:
    v29 = v20 - 1 > (int)v23 && v28;
    v30 = v23 + v29;
    v8[4] = v30;
    v19 = (uint64_t)&v8[4 * v30 + 5];
  }
  if (*(_DWORD *)(v19 + 8) == a2)
  {
    if (*(_QWORD *)v19 == a4)
    {
LABEL_31:
      if (dword_1EF19FCA8 >= 5)
      {
        v39 = *__error();
        v40 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          v41 = 136315906;
          v42 = (const char *)(a1 + 324);
          v43 = 1024;
          *(_DWORD *)v44 = a2;
          *(_WORD *)&v44[4] = 2048;
          *(_QWORD *)&v44[6] = a4;
          *(_WORD *)&v44[14] = 2048;
          *(_QWORD *)&v44[16] = a5;
          _os_log_impl(&dword_1B8270000, v40, OS_LOG_TYPE_DEFAULT, "%s : map_update: update pgnum %d oid (%.16llx) to(%.16llx)\n", (uint8_t *)&v41, 0x26u);
        }
        *__error() = v39;
      }
      result = 0;
      *(_QWORD *)v19 = a5;
      *(_DWORD *)(v19 + 12) = *(_DWORD *)(v19 + 12) & 0xFFFFFFF | (a7 << 28);
      v8[3] |= 1u;
      return result;
    }
    v31 = *__error();
    v32 = _SILogForLogForCategory(7);
    v33 = v32;
    if ((a8 & 1) != 0)
    {
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        v34 = *(_QWORD *)v19;
        v41 = 136315906;
        v42 = (const char *)(a1 + 324);
        v43 = 2048;
        *(_QWORD *)v44 = a4;
        *(_WORD *)&v44[8] = 2048;
        *(_QWORD *)&v44[10] = v34;
        *(_WORD *)&v44[18] = 2048;
        *(_QWORD *)&v44[20] = a5;
        _os_log_impl(&dword_1B8270000, v33, OS_LOG_TYPE_DEFAULT, "%s : map_update: update end old oid %.16llx (%.16llx) to (%.16llx)\n", (uint8_t *)&v41, 0x2Au);
      }
      *__error() = v31;
      goto LABEL_31;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v38 = *(_QWORD *)v19;
      v41 = 136316418;
      v42 = "map_update";
      v43 = 1024;
      *(_DWORD *)v44 = 1751;
      *(_WORD *)&v44[4] = 2080;
      *(_QWORD *)&v44[6] = a1 + 324;
      *(_WORD *)&v44[14] = 2048;
      *(_QWORD *)&v44[16] = a4;
      *(_WORD *)&v44[24] = 2048;
      *(_QWORD *)&v44[26] = v38;
      v45 = 2048;
      v46 = a5;
      _os_log_error_impl(&dword_1B8270000, v33, OS_LOG_TYPE_ERROR, "%s:%d: %s : ERR: map_update: did not find old oid %.16llx (%.16llx) dropping update to (%.16llx)\n", (uint8_t *)&v41, 0x3Au);
    }
    *__error() = v31;
    return 2;
  }
  else
  {
    v35 = *__error();
    v36 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = *(_DWORD *)(v19 + 8);
      v41 = 136316162;
      v42 = "map_update";
      v43 = 1024;
      *(_DWORD *)v44 = 1739;
      *(_WORD *)&v44[4] = 2080;
      *(_QWORD *)&v44[6] = a1 + 324;
      *(_WORD *)&v44[14] = 1024;
      *(_DWORD *)&v44[16] = v37;
      *(_WORD *)&v44[20] = 1024;
      *(_DWORD *)&v44[22] = a2;
      _os_log_error_impl(&dword_1B8270000, v36, OS_LOG_TYPE_ERROR, "%s:%d: %s : ERR: map_update: page offset doesn't match! 0x%x != 0x%x\n", (uint8_t *)&v41, 0x28u);
    }
    *__error() = v35;
    rebuild_map_locked(a1);
    return map_force(a1, a2, a3, a5, a7);
  }
}

_QWORD *map_delete(_QWORD *result, uint64_t a2, int a3)
{
  int32x2_t *v3;
  int v4;
  _QWORD *v7;
  int v8;
  int32x2_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int32x2_t *v21;
  uint64_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  int v29;
  int v30;
  char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = (int32x2_t *)result[107];
  v4 = v3[1].i32[0];
  if (v4)
  {
    v7 = result;
    v8 = v3[2].i32[0];
    if (v8 >= v4
      || (v9 = &v3[2 * v8], v11 = *(uint64_t *)((char *)&v9[2] + 4), v10 = (uint64_t *)((char *)&v9[2] + 4), v11 != a2)
      || a3 != (unsigned __int32)v3[2 * v8 + 4].i32[0] >> 28)
    {
      if (v4 >= 1)
      {
        v12 = 0;
        v13 = v3[1].u32[0];
        while (1)
        {
          if ((int)v13 + v12 < 0 != __OFADD__((_DWORD)v13, v12))
            v14 = v13 + v12 + 1;
          else
            v14 = v13 + v12;
          v15 = (v14 >> 1);
          v16 = a3 - ((unsigned __int32)v3[2 * (int)v15 + 4].i32[0] >> 28);
          if (v16)
          {
            v17 = v16;
            v18 = v15;
            if ((v17 & 0x8000000000000000) == 0)
            {
LABEL_15:
              if (!v17)
                goto LABEL_19;
              v12 = v15 + 1;
              v18 = v13;
            }
          }
          else
          {
            v17 = a2 - *(_QWORD *)((char *)&v3[2 * ((uint64_t)v14 >> 1) + 2] + 4);
            v18 = v15;
            if ((v17 & 0x8000000000000000) == 0)
              goto LABEL_15;
          }
          v13 = v18;
          if (v12 >= (int)v18)
          {
            v19 = v17 > 0;
            goto LABEL_20;
          }
        }
      }
      LODWORD(v15) = 0;
LABEL_19:
      v19 = 0;
LABEL_20:
      v20 = v4 - 1 > (int)v15 && v19;
      v8 = v15 + v20;
      v3[2].i32[0] = v8;
      v21 = &v3[2 * v8];
      v22 = *(uint64_t *)((char *)&v21[2] + 4);
      v10 = (uint64_t *)((char *)&v21[2] + 4);
      if (v22 != a2)
        goto LABEL_26;
    }
    if (a3 == *((_DWORD *)v10 + 3) >> 28)
    {
      result = memmove((char *)&v3[2 * v8 + 2] + 4, (char *)&v3[2 * v8 + 4] + 4, 16 * (v4 + ~v8));
      v23 = v3[1];
      v24.i32[0] = vadd_s32(v23, (int32x2_t)-1).u32[0];
      v24.i32[1] = (*(_QWORD *)&v23 | 0x100000001uLL) >> 32;
      v3[1] = v24;
    }
    else
    {
LABEL_26:
      v25 = *__error();
      v26 = _SILogForLogForCategory(7);
      v27 = 2 * (dword_1EF19FCA8 < 4);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = *v10;
        v29 = *((_DWORD *)v10 + 3) >> 28;
        v30 = 136316162;
        v31 = (char *)v7 + 324;
        v32 = 2048;
        v33 = a2;
        v34 = 2048;
        v35 = v28;
        v36 = 1024;
        v37 = a3;
        v38 = 1024;
        v39 = v29;
        _os_log_impl(&dword_1B8270000, v26, v27, "%s : ERR: map_delete: trying to delete non-existent oid %.16llx (%.16llx), (%d, %d)\n", (uint8_t *)&v30, 0x2Cu);
      }
      result = __error();
      *(_DWORD *)result = v25;
    }
  }
  return result;
}

void rebuild_map_locked(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  off_t v6;
  int8x16_t *v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void (*v16)(_QWORD);
  _DWORD *v17;
  int v18;
  NSObject *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  unsigned int v25;
  int8x16_t *i;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int8x16_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  void (*v42)(_QWORD);
  _QWORD v43[2];
  uint64_t (*v44)(uint64_t, uint64_t);
  void *v45;
  uint64_t v46;
  int8x16_t *v47;
  int v48;
  unint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  void *v55;
  _BYTE buf[32];
  __int128 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v55 = 0;
  v2 = *(_QWORD *)(a1 + 856);
  *(_DWORD *)(v2 + 8) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  v3 = *(unsigned int *)(a1 + 36);
  v4 = *(unsigned int *)(a1 + 40);
  v5 = (int8x16_t *)malloc_type_valloc(*(unsigned int *)(a1 + 44), 0xC38BB2D0uLL);
  if (!v5)
    return;
  v6 = v4 + v3;
  v7 = v5;
  do
  {
    v8 = __ldxr(exceptionSequenceNum);
    v9 = v8 + 1;
  }
  while (__stxr(v8 + 1, exceptionSequenceNum));
  v10 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, a1, 0x40000000, v9);
  v53 = HIDWORD(v10);
  v54 = v10;
  v52 = __PAIR64__(v11, v12);
  v13 = *(_QWORD *)&threadData[18 * v10 + 2];
  v14 = v13 + 320 * HIDWORD(v10);
  *(_BYTE *)(v14 + 216) = 0;
  v15 = *(_DWORD *)(v14 + 312);
  v16 = *(void (**)(_QWORD))(v14 + 224);
  if (v16)
    v16(*(_QWORD *)(v13 + 320 * HIDWORD(v10) + 288));
  v51 = v54;
  v50 = v53;
  v49 = v52;
  if (_setjmp((int *)v14))
  {
    v17 = (_DWORD *)(v14 + 312);
    v18 = *__error();
    v19 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "rebuild_map_locked";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1709;
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v18;
    *v17 = v15;
    if (__THREAD_SLOT_KEY)
    {
      v20 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v20)
        goto LABEL_54;
    }
    else
    {
      makeThreadId();
      v20 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v20)
        goto LABEL_54;
    }
    v21 = v20;
    if ((unint64_t)v20 < 0x801)
    {
LABEL_12:
      v22 = (uint64_t)v21 - 1;
      v23 = &threadData[18 * ((uint64_t)v21 - 1)];
      v25 = v23[14];
      v24 = v23 + 14;
      if (v25 > v49)
      {
        do
          CIOnThreadCleanUpPop(v22);
        while (*v24 > v49);
      }
      dropThreadId(v51, 1, v9);
      CICleanUpReset(v51, HIDWORD(v49));
      goto LABEL_51;
    }
LABEL_54:
    makeThreadId();
    v21 = pthread_getspecific(__THREAD_SLOT_KEY);
    goto LABEL_12;
  }
  for (i = v7; ; v6 += i->i32[1])
  {
    while (1)
    {
      v27 = *(_QWORD *)(a1 + 928);
      v28 = *(unsigned int *)(v27 + 220);
      if ((int)v28 < 1)
        break;
      v29 = v6 >> *(_DWORD *)(a1 + 12);
      v30 = 63;
      do
      {
        v31 = *(_DWORD *)(v27 + 4 * v30);
        if (v30 - 62 >= v28)
          break;
        ++v30;
      }
      while (v31 != (_DWORD)v29);
      if (v31 != (_DWORD)v29)
        break;
LABEL_16:
      v6 += 0x4000;
    }
    v32 = fd_pread(*(_DWORD **)(a1 + 848), i, *(unsigned int *)(a1 + 44), v6);
    if (v32 <= 0)
      break;
    if (i->i32[0] != 846226020 && i->i32[0] != 1684172850)
      goto LABEL_16;
    if (db2_page_uncompress_swap(a1, i, &v55, 0))
      goto LABEL_39;
    if (v55)
      v34 = (int8x16_t *)v55;
    else
      v34 = i;
    i = v34;
    *(_QWORD *)buf = 0;
    v48 = 0;
    get_max_oid(a1, (uint64_t)v34, (unint64_t *)buf, &v48);
    if (*(_QWORD *)buf)
      map_force(a1, v6 >> *(_DWORD *)(a1 + 12), i[1].i32[0], *(uint64_t *)buf, v48);
    if (v55)
    {
      free(v55);
      v55 = 0;
      i = v7;
    }
  }
  if (v32 < 0)
    *(_DWORD *)(a1 + 4) |= 4u;
LABEL_39:
  v35 = *(_QWORD *)(a1 + 928);
  v43[0] = MEMORY[0x1E0C809B0];
  v43[1] = 0x40000000;
  v44 = __rebuild_map_locked_block_invoke;
  v45 = &__block_descriptor_tmp_129_10125;
  v46 = a1;
  v47 = i;
  v36 = (_QWORD *)(v35 + 312);
  v37 = 0;
  do
  {
    if (v37 >= *(int *)(v35 + 220))
      break;
    if (v37 == *(_DWORD *)(v35 + 224))
    {
      v38 = 0;
    }
    else
    {
      v38 = *(_DWORD *)(v35 + 4 * v37 + 252);
      if (v38)
      {
        *(_OWORD *)&buf[16] = 0u;
        v57 = 0u;
        *(_OWORD *)buf = 0u;
        *(_DWORD *)buf = v38;
        *(_OWORD *)&buf[8] = *(_OWORD *)(v36 - 5);
        *(_DWORD *)&buf[24] = *((_DWORD *)v36 - 6);
        *(_QWORD *)&v57 = *(v36 - 2);
        DWORD2(v57) = *((_DWORD *)v36 - 2);
        v58 = *v36;
        v38 = v44((uint64_t)v43, (uint64_t)buf);
      }
    }
    ++v37;
    v36 += 6;
  }
  while (!v38);
  v39 = *(_QWORD *)&threadData[18 * v51 + 2];
  v40 = v50;
  v41 = v39 + 320 * v50;
  *(_DWORD *)(v41 + 312) = v15;
  v42 = *(void (**)(_QWORD))(v41 + 232);
  if (v42)
    v42(*(_QWORD *)(v39 + 320 * v40 + 288));
  dropThreadId(v51, 0, v9);
  if (v55)
    free(v55);
LABEL_51:
  free(v7);
}

uint64_t map_force(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  uint64_t result;
  _DWORD *v11;
  int v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;

  result = map_check_size(a1);
  if (!(_DWORD)result)
  {
    v11 = *(_DWORD **)(a1 + 856);
    v12 = v11[2];
    if (!v12)
    {
      v13 = 0;
      v11[4] = 0;
      goto LABEL_19;
    }
    v13 = v11[4];
    if (v13 >= v12
      || (v14 = &v11[4 * v13], v16 = *(_QWORD *)(v14 + 5), v15 = (uint64_t)(v14 + 5), v16 != a4)
      || a5 != v11[4 * v13 + 8] >> 28)
    {
      if (v12 >= 1)
      {
        v17 = 0;
        v18 = v11[2];
        while (1)
        {
          if ((int)v18 + v17 < 0 != __OFADD__((_DWORD)v18, v17))
            v19 = v18 + v17 + 1;
          else
            v19 = v18 + v17;
          v20 = (v19 >> 1);
          v21 = a5 - (v11[4 * (int)v20 + 8] >> 28);
          if (v21)
          {
            v22 = v21;
            v23 = v20;
            if ((v22 & 0x8000000000000000) == 0)
            {
LABEL_16:
              if (!v22)
                goto LABEL_22;
              v17 = v20 + 1;
              v23 = v18;
            }
          }
          else
          {
            v22 = a4 - *(_QWORD *)&v11[4 * ((uint64_t)v19 >> 1) + 5];
            v23 = v20;
            if ((v22 & 0x8000000000000000) == 0)
              goto LABEL_16;
          }
          v18 = v23;
          if (v17 >= (int)v23)
          {
            v25 = v22 > 0;
            goto LABEL_23;
          }
        }
      }
      LODWORD(v20) = 0;
LABEL_22:
      v25 = 0;
LABEL_23:
      if (v12 - 1 <= (int)v20)
        v25 = 0;
      v13 = v20 + v25;
      v11[4] = v20 + v25;
      v15 = (uint64_t)&v11[4 * (int)v20 + 5 + 4 * v25];
    }
    LODWORD(v26) = a5 - (*(_DWORD *)(v15 + 12) >> 28);
    if ((_DWORD)v26)
    {
      v26 = (int)v26;
      if (v12 < 1)
      {
LABEL_32:
        if (*(_DWORD *)(v15 + 8) == a2)
        {
          v11[4 * v13 + 8] = v11[4 * v13 + 8] & 0xFFFFFFF | (a5 << 28);
          *(_QWORD *)v15 = a4;
          goto LABEL_34;
        }
        v27 = v13 + 1;
        if (v12 - 1 != v13 || v26 < 1)
        {
          memmove(&v11[4 * v27 + 5], &v11[4 * v13 + 5], 16 * (v12 - v13));
          v12 = v11[2];
        }
        else
        {
          v11[4] = v27;
          ++v13;
        }
LABEL_19:
        v24 = &v11[4 * v13];
        *(_QWORD *)(v24 + 5) = a4;
        v24[7] = a2;
        v24[8] = a3 & 0xFFFFFFF | (a5 << 28);
        v11[2] = v12 + 1;
LABEL_34:
        result = 0;
        v11[3] |= 1u;
        return result;
      }
    }
    else
    {
      v26 = a4 - *(_QWORD *)v15;
      if (v12 < 1)
        goto LABEL_32;
    }
    if (!v26)
      return 0;
    goto LABEL_32;
  }
  return result;
}

uint64_t get_max_oid(uint64_t result, uint64_t a2, unint64_t *a3, int *a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  char *v16;
  const char *v17;

  if (*(_DWORD *)a2 != 1684172850 || (*(_BYTE *)(a2 + 12) & 0xF0) != 0 || (v4 = *(int *)(a2 + 8), (int)v4 < 21))
  {
    v7 = 0;
  }
  else
  {
    v5 = a2 + v4;
    v6 = a2 + 20;
    do
    {
      v11 = v6 + 4;
      v12 = *(unsigned __int8 *)(v6 + 4);
      if (*(char *)(v6 + 4) < 0)
      {
        v14 = *(unsigned __int8 *)(v6 + 4);
        if (v14 > 0xBF)
        {
          if (v14 > 0xDF)
          {
            if (v14 > 0xEF)
            {
              if (v14 > 0xF7)
              {
                if (v14 > 0xFB)
                {
                  if (v14 > 0xFD)
                  {
                    if (v14 == 255)
                    {
                      v12 = *(_QWORD *)(v6 + 5);
                      v13 = 9;
                    }
                    else
                    {
                      v12 = ((unint64_t)*(unsigned __int8 *)(v6 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v6 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v6 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v6 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v6 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v6 + 10) << 8) | *(unsigned __int8 *)(v6 + 11);
                      v13 = 8;
                    }
                  }
                  else
                  {
                    v12 = ((v12 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v6 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v6 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(v6 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(v6 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(v6 + 9) << 8) | *(unsigned __int8 *)(v6 + 10);
                    v13 = 7;
                  }
                }
                else
                {
                  v12 = ((v12 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v6 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v6 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(v6 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(v6 + 8) << 8) | *(unsigned __int8 *)(v6 + 9);
                  v13 = 6;
                }
              }
              else
              {
                v12 = ((v12 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v6 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(v6 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v6 + 7) << 8) | *(unsigned __int8 *)(v6 + 8);
                v13 = 5;
              }
            }
            else
            {
              v12 = ((v12 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v6 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v6 + 6) << 8) | *(unsigned __int8 *)(v6 + 7);
              v13 = 4;
            }
          }
          else
          {
            v12 = ((v12 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v6 + 5) << 8) | *(unsigned __int8 *)(v6 + 6);
            v13 = 3;
          }
        }
        else
        {
          v12 = *(unsigned __int8 *)(v6 + 5) | ((v12 & 0x3F) << 8);
          v13 = 2;
        }
      }
      else
      {
        v13 = 1;
      }
      *a3 = v12;
      v7 = *(unsigned __int8 *)(v11 + v13);
      if (*(char *)(v11 + v13) < 0)
      {
        if (v7 < 0xC0)
        {
          v8 = v13 + 1;
        }
        else
        {
          if (v7 >= 0xE0)
          {
            v15 = __si_assert_copy_extra_2151(0, -1);
            v16 = v15;
            v17 = "";
            if (v15)
              v17 = v15;
            __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v17);
            free(v16);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          v8 = v13 + 2;
        }
        v7 = *(unsigned __int8 *)(v11 + v8);
      }
      v9 = (*(_DWORD *)v6 + 4);
      v6 += v9;
      if ((_DWORD)v9)
        v10 = v6 >= v5;
      else
        v10 = 1;
    }
    while (!v10);
  }
  *a4 = *(_DWORD *)(result + 804) & (v7 >> 5) & 1;
  return result;
}

uint64_t __rebuild_map_locked_block_invoke(uint64_t a1, uint64_t a2)
{
  int v5;
  uint64_t v6;

  v6 = 0;
  v5 = 0;
  get_max_oid(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 8), (unint64_t *)&v6, &v5);
  if (v6)
    map_force(*(_QWORD *)(a1 + 32), *(_DWORD *)a2, *(_DWORD *)(*(_QWORD *)(a1 + 40) + 16), v6, v5);
  return 0;
}

uint64_t _real_page_update_obj(uint64_t a1, _DWORD *a2, unint64_t a3, int a4, __int16 a5, unsigned int a6, size_t a7)
{
  uint64_t updated;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  signed int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  int v30;
  unsigned int v31;
  size_t v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 *v49;
  unint64_t v50;
  unsigned __int8 *v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unint64_t v54;
  unsigned __int8 *v55;
  _DWORD *v56;
  char *v57;
  char *v58;
  const char *v59;
  uint64_t v60;
  _DWORD *v61;

  updated = _page_update_obj(a1, (uint64_t)a2, a6, a7, a5);
  if ((_DWORD)updated == 2)
  {
    if ((*(_BYTE *)(a1 + 804) & 1) == 0)
      return 2;
    v61 = a2;
    v15 = a4 != 1;
    v16 = *(_QWORD *)(a1 + 856);
    v17 = *(unsigned int *)(v16 + 8);
    if (!(_DWORD)v17)
      return 2;
    v18 = *(int *)(v16 + 16);
    if ((int)v18 >= (int)v17
      || (v19 = v16 + 16 * v18, *(_QWORD *)(v19 + 20) != a3)
      || (v20 = *(_DWORD *)(v19 + 32), v15 != v20 >> 28))
    {
      v21 = (int)v17;
      if ((int)v17 >= 1)
      {
        v22 = 0;
        while (1)
        {
          if ((int)v17 + v22 < 0 != __OFADD__((_DWORD)v17, v22))
            v25 = v17 + v22 + 1;
          else
            v25 = v17 + v22;
          v26 = (v25 >> 1);
          v27 = v15 - (*(_DWORD *)(v16 + 16 * (int)v26 + 32) >> 28);
          if (v27)
          {
            v23 = v27;
            v24 = v26;
            if ((v23 & 0x8000000000000000) == 0)
              goto LABEL_10;
          }
          else
          {
            v23 = a3 - *(_QWORD *)(v16 + 16 * ((uint64_t)v25 >> 1) + 20);
            v24 = v26;
            if ((v23 & 0x8000000000000000) == 0)
            {
LABEL_10:
              if (!v23)
                goto LABEL_21;
              v22 = v26 + 1;
              v24 = v17;
            }
          }
          v17 = v24;
          if (v22 >= (int)v24)
          {
            v28 = v23 > 0;
            goto LABEL_22;
          }
        }
      }
      LODWORD(v26) = 0;
LABEL_21:
      v28 = 0;
LABEL_22:
      v29 = v21 - 1 > (int)v26 && v28;
      v30 = v26 + v29;
      v18 = (int)v26 + v29;
      *(_DWORD *)(v16 + 16) = v30;
      v20 = *(_DWORD *)(v16 + 16 * v30 + 32);
    }
    v31 = *(_DWORD *)(v16 + 16 * v18 + 28);
    v32 = v20 & 0xFFFFFFF;
    v60 = 0;
    if (page_find_oid_with_flags(a1, v31, v32, a3, v15, &v60, 0, 0))
      return 2;
    v34 = v60 + 4;
    v35 = *(unsigned __int8 *)(v60 + 4);
    if (*(char *)(v60 + 4) < 0)
    {
      v37 = *(unsigned __int8 *)(v60 + 4);
      if (v37 > 0xBF)
      {
        if (v37 > 0xDF)
        {
          if (v37 > 0xEF)
          {
            if (v37 > 0xF7)
            {
              if (v37 > 0xFB)
              {
                if (v37 > 0xFD)
                {
                  if (v37 == 255)
                  {
                    v35 = *(_QWORD *)(v60 + 5);
                    v36 = 9;
                  }
                  else
                  {
                    v35 = ((unint64_t)*(unsigned __int8 *)(v60 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v60 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v60 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v60 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v60 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v60 + 10) << 8) | *(unsigned __int8 *)(v60 + 11);
                    v36 = 8;
                  }
                }
                else
                {
                  v35 = ((v35 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v60 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v60 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(v60 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(v60 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(v60 + 9) << 8) | *(unsigned __int8 *)(v60 + 10);
                  v36 = 7;
                }
              }
              else
              {
                v35 = ((v35 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v60 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v60 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(v60 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(v60 + 8) << 8) | *(unsigned __int8 *)(v60 + 9);
                v36 = 6;
              }
            }
            else
            {
              v35 = ((v35 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v60 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(v60 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v60 + 7) << 8) | *(unsigned __int8 *)(v60 + 8);
              v36 = 5;
            }
          }
          else
          {
            v35 = ((v35 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v60 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v60 + 6) << 8) | *(unsigned __int8 *)(v60 + 7);
            v36 = 4;
          }
        }
        else
        {
          v35 = ((v35 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v60 + 5) << 8) | *(unsigned __int8 *)(v60 + 6);
          v36 = 3;
        }
      }
      else
      {
        v35 = *(unsigned __int8 *)(v60 + 5) | ((v35 & 0x3F) << 8);
        v36 = 2;
      }
    }
    else
    {
      v36 = 1;
    }
    v38 = v36 + 1;
    v39 = *(unsigned __int8 *)(v34 + v36);
    if (*(char *)(v34 + v36) < 0)
    {
      if (v39 >= 0xC0)
      {
        if (v39 >= 0xE0)
        {
          v57 = __si_assert_copy_extra_2151(0, -1);
          v58 = v57;
          v59 = "";
          if (v57)
            v59 = v57;
          __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v59);
          free(v58);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        v38 = v36 + 2;
        v40 = 3;
      }
      else
      {
        v40 = 2;
      }
      v39 = *(unsigned __int8 *)(v34 + v38);
      v38 = v36 + v40;
    }
    v41 = *(unsigned __int8 *)(v34 + v38);
    if (*(char *)(v34 + v38) < 0)
    {
      v42 = v38 + 1;
      v43 = *(unsigned __int8 *)(v34 + v38);
      if (v43 <= 0xBF)
      {
        v41 = *(unsigned __int8 *)(v34 + v42) | ((v41 & 0x3F) << 8);
        goto LABEL_69;
      }
      if (v43 <= 0xDF)
      {
        v41 = ((v41 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v34 + v42) << 8) | *(unsigned __int8 *)(v38 + v34 + 2);
        goto LABEL_69;
      }
      if (v43 > 0xEF)
      {
        if (v43 > 0xF7)
        {
          if (v43 > 0xFB)
          {
            if (v43 > 0xFD)
            {
              if (v43 == 255)
              {
                v41 = *(_QWORD *)(v34 + v42);
                goto LABEL_69;
              }
              v54 = (unint64_t)*(unsigned __int8 *)(v34 + v42) << 48;
              v55 = (unsigned __int8 *)(v38 + v34);
              v46 = v54 | ((unint64_t)v55[2] << 40) | ((unint64_t)v55[3] << 32) | ((unint64_t)v55[4] << 24) | ((unint64_t)v55[5] << 16) | ((unint64_t)v55[6] << 8);
              v47 = v55[7];
            }
            else
            {
              v52 = ((v41 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v34 + v42) << 40);
              v53 = (unsigned __int8 *)(v38 + v34);
              v46 = v52 | ((unint64_t)v53[2] << 32) | ((unint64_t)v53[3] << 24) | ((unint64_t)v53[4] << 16) | ((unint64_t)v53[5] << 8);
              v47 = v53[6];
            }
          }
          else
          {
            v50 = ((v41 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v34 + v42) << 32);
            v51 = (unsigned __int8 *)(v38 + v34);
            v46 = v50 | ((unint64_t)v51[2] << 24) | ((unint64_t)v51[3] << 16) | ((unint64_t)v51[4] << 8);
            v47 = v51[5];
          }
        }
        else
        {
          v48 = ((v41 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v34 + v42) << 24);
          v49 = (unsigned __int8 *)(v38 + v34);
          v46 = v48 | ((unint64_t)v49[2] << 16) | ((unint64_t)v49[3] << 8);
          v47 = v49[4];
        }
      }
      else
      {
        v44 = ((v41 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v34 + v42) << 16);
        v45 = v38 + v34;
        v46 = v44 | ((unint64_t)*(unsigned __int8 *)(v45 + 2) << 8);
        v47 = *(unsigned __int8 *)(v45 + 3);
      }
      v41 = v46 | v47;
    }
LABEL_69:
    v56 = a2;
    if ((a5 & 2) != 0)
    {
      ldb_update_indexid(&v61, v41);
      v56 = v61;
    }
    if (_page_delete_obj_by_oid_and_type(a1, v35, *(_DWORD *)(a1 + 804) & (v39 >> 5) & 1, v31, v32, a5 & 0x4000))
    {
      updated = 2;
      if (v56 == a2)
        return updated;
    }
    else
    {
      updated = _real_page_insert_obj(a1, (uint64_t)v56, a5, a6, a7);
      if (v56 == a2)
        return updated;
    }
    free(v56);
  }
  return updated;
}

uint64_t _real_page_insert_obj(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4, size_t __nbyte)
{
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  __n128 *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  __n128 *v32;
  unsigned __int32 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  int v39;
  char *v40;
  char *v41;
  int64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  size_t v50;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  NSObject *v60;
  char *v61;
  char *v62;
  const char *v63;
  int v64;
  NSObject *v65;
  char *v66;
  char *v67;
  const char *v68;
  uint64_t v69;
  int v70;
  NSObject *v71;
  char *v72;
  char *v73;
  const char *v74;
  int v75;
  NSObject *v76;
  char *v77;
  const char *v78;
  __n128 v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void *value_out;
  uint8_t buf[4];
  const char *v85;
  __int16 v86;
  int v87;
  __int16 v88;
  int64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  int64_t v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v82 = 0;
  value_out = 0;
  v80 = 0;
  v81 = 0;
  v9 = a3 & 0x4000;
  v10 = _page_fetch_with_fd(a1, &value_out, a4, __nbyte, v9, buf, 0xFFFFFFFFLL, 0);
  if ((_DWORD)v10)
    return v10;
  v11 = *((_DWORD *)value_out + 3);
  if ((v11 & 0xF0) != 0)
  {
    v70 = *__error();
    v71 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v85 = "_real_page_insert_obj";
      v86 = 1024;
      v87 = 5058;
      v88 = 1024;
      LODWORD(v89) = a4;
      _os_log_error_impl(&dword_1B8270000, v71, OS_LOG_TYPE_ERROR, "%s:%d: page_insert_obj: ERR: tried to read attr name table data! pgnum 0x%x\n", buf, 0x18u);
    }
    *__error() = v70;
    v72 = __si_assert_copy_extra_2151(0, -1);
    v73 = v72;
    v74 = "";
    if (v72)
      v74 = v72;
    __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5059, v74);
    goto LABEL_150;
  }
  if ((v11 & 8) != 0)
  {
    v75 = *__error();
    v76 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v85 = "_real_page_insert_obj";
      v86 = 1024;
      v87 = 5064;
      v88 = 1024;
      LODWORD(v89) = a4;
      _os_log_error_impl(&dword_1B8270000, v76, OS_LOG_TYPE_ERROR, "%s:%d: page_insert_obj: ERR: page is still compressed! pgnum 0x%x\n", buf, 0x18u);
    }
    *__error() = v75;
    v77 = __si_assert_copy_extra_2151(0, -1);
    v73 = v77;
    v78 = "";
    if (v77)
      v78 = v77;
    __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5065, v78);
LABEL_150:
    free(v73);
    goto LABEL_151;
  }
  v12 = a2 + 4;
  v13 = *(unsigned __int8 *)(a2 + 4);
  if (*(char *)(a2 + 4) < 0)
  {
    v15 = *(unsigned __int8 *)(a2 + 4);
    if (v15 > 0xBF)
    {
      if (v15 > 0xDF)
      {
        if (v15 > 0xEF)
        {
          if (v15 > 0xF7)
          {
            if (v15 > 0xFB)
            {
              if (v15 > 0xFD)
              {
                if (v15 == 255)
                {
                  v13 = *(_QWORD *)(a2 + 5);
                  v14 = 9;
                }
                else
                {
                  v13 = ((unint64_t)*(unsigned __int8 *)(a2 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 10) << 8) | *(unsigned __int8 *)(a2 + 11);
                  v14 = 8;
                }
              }
              else
              {
                v13 = ((unint64_t)(v13 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 9) << 8) | *(unsigned __int8 *)(a2 + 10);
                v14 = 7;
              }
            }
            else
            {
              v13 = ((unint64_t)(v13 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 8) << 8) | *(unsigned __int8 *)(a2 + 9);
              v14 = 6;
            }
          }
          else
          {
            v13 = ((unint64_t)(v13 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 7) << 8) | *(unsigned __int8 *)(a2 + 8);
            v14 = 5;
          }
        }
        else
        {
          v13 = ((unint64_t)(v13 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 6) << 8) | *(unsigned __int8 *)(a2 + 7);
          v14 = 4;
        }
      }
      else
      {
        v13 = ((unint64_t)(v13 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 5) << 8) | *(unsigned __int8 *)(a2 + 6);
        v14 = 3;
      }
    }
    else
    {
      v13 = *(unsigned __int8 *)(a2 + 5) | ((unint64_t)(v13 & 0x3F) << 8);
      v14 = 2;
    }
  }
  else
  {
    v14 = 1;
  }
  v16 = *(unsigned __int8 *)(v12 + v14);
  if (*(char *)(v12 + v14) < 0)
  {
    if (v16 >= 0xC0)
    {
      if (v16 >= 0xE0)
        goto LABEL_128;
      v17 = v14 + 2;
    }
    else
    {
      v17 = v14 + 1;
    }
    v16 = *(unsigned __int8 *)(v12 + v17);
  }
  v18 = *(_DWORD *)(a1 + 804) & (v16 >> 5) & 1;
  v81 = (char *)value_out + *((int *)value_out + 2);
  if (find_slot_for_oid_and_type(a1, (uint64_t)value_out, v13, v18, (unint64_t *)&v82, &v80, 2) == 17)
  {
    page_release(a1, value_out, a4, 0, 0);
    return 17;
  }
  v19 = (*(_DWORD *)a2 + 4);
  if ((int)__nbyte - 20 <= v19)
  {
    v21 = test_compress_obj(a1, __nbyte, (_DWORD *)a2);
    v20 = value_out;
    if ((_DWORD)v21)
    {
      v10 = v21;
      v22 = a1;
      v23 = a4;
      v24 = 0;
      goto LABEL_33;
    }
    *((_DWORD *)value_out + 3) |= 4u;
    LODWORD(v19) = *(_DWORD *)a2 + 4;
  }
  else
  {
    v20 = value_out;
  }
  if ((int)v19 > v20[1] - v20[2])
  {
    if ((v20[3] & 0xC) != 0)
    {
      if (a4)
      {
        v25 = *(__n128 **)(a1 + 928);
        v26 = v25[13].n128_u32[3];
        if ((int)v26 < 1)
        {
LABEL_42:
          v28 = &v25[14].n128_u32[1];
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 + 1, v28));
        }
        else
        {
          v27 = 0;
          while (v25[15].n128_u32[v27 + 3] != a4)
          {
            if (v26 == ++v27)
              goto LABEL_42;
          }
          v30 = &v25[13].n128_u32[2];
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 + 1, v30));
          v32 = &v25[3 * v27];
          v33 = v32[18].n128_u32[0];
          v79 = v32[17];
          db_cache_mru(v25, v27);
          if (v33)
            v37 = v79.n128_u64[1] == 0;
          else
            v37 = 0;
          if (v37
            || (*(_BYTE *)(v79.n128_u64[0] + 12) & 4) == 0
            || *(_DWORD *)(v79.n128_u64[0] + 4) <= *(_DWORD *)(v79.n128_u64[0] + 16))
          {
            v38 = *((_DWORD *)value_out + 2) + *(_DWORD *)a2 + 4;
            v39 = (*(_BYTE *)(a1 + 804) & 2) != 0 ? 114688 : 196608;
            if (v38 <= v39
              && !page_resize(a1, &value_out, 1, v38, (unint64_t *)&v82, v34, v35, v36, (uint64_t)&v81))
            {
              goto LABEL_59;
            }
          }
        }
      }
      v20 = value_out;
    }
    page_release(a1, v20, a4, 0, 0);
    return page_split(a1, (char *)a2, a4, __nbyte, v9);
  }
LABEL_59:
  v40 = v82;
  if (v82 >= v81)
    goto LABEL_92;
  v41 = v82 + 4;
  v42 = v82[4];
  if (v82[4] < 0)
  {
    v44 = v82[4];
    if (v44 > 0xBF)
    {
      if (v44 > 0xDF)
      {
        if (v44 > 0xEF)
        {
          if (v44 > 0xF7)
          {
            if (v44 > 0xFB)
            {
              if (v44 > 0xFD)
              {
                if (v44 == 255)
                {
                  v42 = *(_QWORD *)(v82 + 5);
                  v43 = 9;
                }
                else
                {
                  v42 = ((unint64_t)v82[5] << 48) | ((unint64_t)v82[6] << 40) | ((unint64_t)v82[7] << 32) | ((unint64_t)v82[8] << 24) | ((unint64_t)v82[9] << 16) | ((unint64_t)v82[10] << 8) | v82[11];
                  v43 = 8;
                }
              }
              else
              {
                v42 = ((unint64_t)(v42 & 1) << 48) | ((unint64_t)v82[5] << 40) | ((unint64_t)v82[6] << 32) | ((unint64_t)v82[7] << 24) | ((unint64_t)v82[8] << 16) | ((unint64_t)v82[9] << 8) | v82[10];
                v43 = 7;
              }
            }
            else
            {
              v42 = ((unint64_t)(v42 & 3) << 40) | ((unint64_t)v82[5] << 32) | ((unint64_t)v82[6] << 24) | ((unint64_t)v82[7] << 16) | ((unint64_t)v82[8] << 8) | v82[9];
              v43 = 6;
            }
          }
          else
          {
            v42 = ((unint64_t)(v42 & 7) << 32) | ((unint64_t)v82[5] << 24) | ((unint64_t)v82[6] << 16) | ((unint64_t)v82[7] << 8) | v82[8];
            v43 = 5;
          }
        }
        else
        {
          v42 = ((unint64_t)(v42 & 0xF) << 24) | ((unint64_t)v82[5] << 16) | ((unint64_t)v82[6] << 8) | v82[7];
          v43 = 4;
        }
      }
      else
      {
        v42 = ((unint64_t)(v42 & 0x1F) << 16) | ((unint64_t)v82[5] << 8) | v82[6];
        v43 = 3;
      }
    }
    else
    {
      v42 = v82[5] | ((unint64_t)(v42 & 0x3F) << 8);
      v43 = 2;
    }
  }
  else
  {
    v43 = 1;
  }
  v45 = v41[v43];
  if (v41[v43] < 0)
  {
    if (v45 < 0xC0)
    {
      v46 = v43 + 1;
LABEL_82:
      v45 = v41[v46];
      goto LABEL_83;
    }
    if (v45 < 0xE0)
    {
      v46 = v43 + 2;
      goto LABEL_82;
    }
LABEL_128:
    v61 = __si_assert_copy_extra_2151(0, -1);
    v62 = v61;
    v63 = "";
    if (v61)
      v63 = v61;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v63);
    free(v62);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_83:
  v47 = *(_BYTE *)(a1 + 804) & (v45 >> 5) & 1;
  if (v18 < v47 || (v18 == v47 ? (v48 = v13 < v42) : (v48 = 0), v48))
  {
    v49 = (*(_DWORD *)a2 + 4);
    if (&v81[v49] > (char *)value_out + *((int *)value_out + 1))
      goto LABEL_125;
    memmove(&v82[v49], v82, v81 - v82);
    v40 = v82;
  }
  else
  {
    v40 = &v82[*(_DWORD *)v82 + 4];
    v82 = v40;
    if (v40 > v81)
      goto LABEL_125;
  }
LABEL_92:
  v50 = (*(_DWORD *)a2 + 4);
  if (&v40[v50] <= (char *)value_out + *((int *)value_out + 1))
  {
    memcpy(v40, (const void *)a2, v50);
    *((_DWORD *)value_out + 2) += *(_DWORD *)a2 + 4;
    if (v82 < v81)
    {
      if (dword_1EF19FCA8 >= 5)
      {
        v64 = *__error();
        v65 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v85 = (const char *)(a1 + 324);
          v86 = 1024;
          v87 = a4;
          v88 = 2048;
          v89 = v13;
          _os_log_impl(&dword_1B8270000, v65, OS_LOG_TYPE_DEFAULT, "%s : no map update for inserting at pgnum %d (%.16llx)\n", buf, 0x1Cu);
        }
        *__error() = v64;
      }
      goto LABEL_95;
    }
    if (!v80)
    {
      v10 = map_insert(a1, a4, __nbyte, v13, v18);
      if ((_DWORD)v10)
        return v10;
      goto LABEL_95;
    }
    v52 = v80 + 4;
    v53 = *(unsigned __int8 *)(v80 + 4);
    if (*(char *)(v80 + 4) < 0)
    {
      v55 = *(unsigned __int8 *)(v80 + 4);
      if (v55 > 0xBF)
      {
        if (v55 > 0xDF)
        {
          if (v55 > 0xEF)
          {
            if (v55 > 0xF7)
            {
              if (v55 > 0xFB)
              {
                if (v55 > 0xFD)
                {
                  if (v55 == 255)
                  {
                    v53 = *(_QWORD *)(v80 + 5);
                    v54 = 9;
                  }
                  else
                  {
                    v53 = ((unint64_t)*(unsigned __int8 *)(v80 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v80 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v80 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v80 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v80 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + 10) << 8) | *(unsigned __int8 *)(v80 + 11);
                    v54 = 8;
                  }
                }
                else
                {
                  v53 = ((v53 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v80 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v80 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(v80 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(v80 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + 9) << 8) | *(unsigned __int8 *)(v80 + 10);
                  v54 = 7;
                }
              }
              else
              {
                v53 = ((v53 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v80 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v80 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(v80 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + 8) << 8) | *(unsigned __int8 *)(v80 + 9);
                v54 = 6;
              }
            }
            else
            {
              v53 = ((v53 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v80 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(v80 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + 7) << 8) | *(unsigned __int8 *)(v80 + 8);
              v54 = 5;
            }
          }
          else
          {
            v53 = ((v53 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v80 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + 6) << 8) | *(unsigned __int8 *)(v80 + 7);
            v54 = 4;
          }
        }
        else
        {
          v53 = ((v53 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + 5) << 8) | *(unsigned __int8 *)(v80 + 6);
          v54 = 3;
        }
      }
      else
      {
        v53 = *(unsigned __int8 *)(v80 + 5) | ((v53 & 0x3F) << 8);
        v54 = 2;
      }
    }
    else
    {
      v54 = 1;
    }
    v56 = *(unsigned __int8 *)(v52 + v54);
    if ((*(char *)(v52 + v54) & 0x80000000) == 0)
      goto LABEL_123;
    if (v56 < 0xC0)
    {
      v57 = v54 + 1;
LABEL_122:
      v56 = *(unsigned __int8 *)(v52 + v57);
LABEL_123:
      v58 = map_update(a1, a4, __nbyte, v53, v13, *(_DWORD *)(a1 + 804) & (v56 >> 5) & 1, v18, 1);
      if (!(_DWORD)v58)
      {
LABEL_95:
        set_offset_hint(a1, (uint64_t)value_out, (uint64_t)v82);
        ++*(_QWORD *)(a1 + 20);
        page_release(a1, value_out, a4, v9 | 1, 0);
        return 0;
      }
      v10 = v58;
      v20 = value_out;
      v22 = a1;
      v23 = a4;
      v24 = v9;
LABEL_33:
      page_release(v22, v20, v23, v24, 0);
      return v10;
    }
    if (v56 < 0xE0)
    {
      v57 = v54 + 2;
      goto LABEL_122;
    }
    v66 = __si_assert_copy_extra_2151(0, -1);
    v67 = v66;
    v68 = "";
    if (v66)
      v68 = v66;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v68);
    free(v67);
    if (!__valid_fs(-1))
    {
      v69 = 3072;
      goto LABEL_152;
    }
LABEL_151:
    v69 = 2989;
LABEL_152:
    *(_DWORD *)v69 = -559038737;
    abort();
  }
LABEL_125:
  v59 = *__error();
  v60 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316162;
    v85 = "_real_page_insert_obj";
    v86 = 1024;
    v87 = 5233;
    v88 = 2080;
    v89 = a1 + 324;
    v90 = 2048;
    v91 = a4;
    v92 = 2048;
    v93 = v82 - (_BYTE *)value_out;
    _os_log_error_impl(&dword_1B8270000, v60, OS_LOG_TYPE_ERROR, "%s:%d: %s: page_insert_obj, page pgnum:%ld has a bad object at offset:%p\n", buf, 0x30u);
  }
  *__error() = v59;
  page_release(a1, value_out, a4, 0, 0);
  return 6530;
}

uint64_t test_compress_obj(uint64_t a1, int a2, _DWORD *a3)
{
  int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  NSObject *v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v6 = *a3 + 24;
  v7 = malloc_type_malloc(v6, 0x8ED22FB2uLL);
  *v7 = 1684172850;
  v7[1] = v6;
  v7[2] = v6;
  v7[3] = 4;
  v7[4] = a2;
  memcpy(v7 + 5, a3, (*a3 + 4));
  if (!page_compress(a1, (size_t)v7, (int8x16_t **)&v18, 0, (*(_DWORD *)(a1 + 804) & 2) != 0)
    || (v8 = page_compress(a1, (size_t)v7, (int8x16_t **)&v18, 0, 2), !(_DWORD)v8))
  {
    free(v7);
    free(v18);
    return 0;
  }
  v9 = v8;
  if (dword_1EF19FCA8 >= 5)
  {
    v11 = *__error();
    v12 = _SILogForLogForCategory(7);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
LABEL_26:
      *__error() = v11;
      goto LABEL_4;
    }
    v13 = *((unsigned __int8 *)a3 + 4);
    if ((char)a3[1] < 0)
    {
      v14 = *((unsigned __int8 *)a3 + 4);
      if (v14 > 0xBF)
      {
        if (v14 > 0xDF)
        {
          if (v14 > 0xEF)
          {
            if (v14 > 0xF7)
            {
              if (v14 > 0xFB)
              {
                if (v14 > 0xFD)
                {
                  if (v14 == 255)
                  {
                    v13 = *(_QWORD *)((char *)a3 + 5);
                    goto LABEL_25;
                  }
                  v15 = ((unint64_t)*((unsigned __int8 *)a3 + 5) << 48) | ((unint64_t)*((unsigned __int8 *)a3 + 6) << 40) | ((unint64_t)*((unsigned __int8 *)a3 + 7) << 32) | ((unint64_t)*((unsigned __int8 *)a3 + 8) << 24) | ((unint64_t)*((unsigned __int8 *)a3 + 9) << 16) | ((unint64_t)*((unsigned __int8 *)a3 + 10) << 8);
                  v16 = *((unsigned __int8 *)a3 + 11);
                }
                else
                {
                  v15 = ((v13 & 1) << 48) | ((unint64_t)*((unsigned __int8 *)a3 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a3 + 6) << 32) | ((unint64_t)*((unsigned __int8 *)a3 + 7) << 24) | ((unint64_t)*((unsigned __int8 *)a3 + 8) << 16) | ((unint64_t)*((unsigned __int8 *)a3 + 9) << 8);
                  v16 = *((unsigned __int8 *)a3 + 10);
                }
              }
              else
              {
                v15 = ((v13 & 3) << 40) | ((unint64_t)*((unsigned __int8 *)a3 + 5) << 32) | ((unint64_t)*((unsigned __int8 *)a3 + 6) << 24) | ((unint64_t)*((unsigned __int8 *)a3 + 7) << 16) | ((unint64_t)*((unsigned __int8 *)a3 + 8) << 8);
                v16 = *((unsigned __int8 *)a3 + 9);
              }
            }
            else
            {
              v15 = ((v13 & 7) << 32) | ((unint64_t)*((unsigned __int8 *)a3 + 5) << 24) | ((unint64_t)*((unsigned __int8 *)a3 + 6) << 16) | ((unint64_t)*((unsigned __int8 *)a3 + 7) << 8);
              v16 = *((unsigned __int8 *)a3 + 8);
            }
          }
          else
          {
            v15 = ((v13 & 0xF) << 24) | ((unint64_t)*((unsigned __int8 *)a3 + 5) << 16) | ((unint64_t)*((unsigned __int8 *)a3 + 6) << 8);
            v16 = *((unsigned __int8 *)a3 + 7);
          }
        }
        else
        {
          v15 = ((v13 & 0x1F) << 16) | ((unint64_t)*((unsigned __int8 *)a3 + 5) << 8);
          v16 = *((unsigned __int8 *)a3 + 6);
        }
        v13 = v15 | v16;
        goto LABEL_25;
      }
      v13 = *((unsigned __int8 *)a3 + 5) | ((v13 & 0x3F) << 8);
    }
LABEL_25:
    v17 = *a3 + 4;
    *(_DWORD *)buf = 67109888;
    v20 = v9;
    v21 = 1024;
    v22 = 2;
    v23 = 2048;
    v24 = v13;
    v25 = 1024;
    v26 = v17;
    _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "test_compress_obj: ERR %d: compressing %d dbo with oid 0x%llx (%d bytes)", buf, 0x1Eu);
    goto LABEL_26;
  }
LABEL_4:
  free(v7);
  return v9;
}

uint64_t map_insert(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  uint64_t result;
  _DWORD *v11;
  int v12;
  int v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  NSObject *v30;
  os_log_type_t v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  result = map_check_size(a1);
  if (!(_DWORD)result)
  {
    v11 = *(_DWORD **)(a1 + 856);
    v12 = v11[4];
    v13 = v11[2];
    if (v12 >= v13
      || (v14 = &v11[4 * v12], v16 = *(_QWORD *)(v14 + 5), v15 = (uint64_t)(v14 + 5), v16 != a4)
      || a5 != v11[4 * v12 + 8] >> 28)
    {
      if (v13 >= 1)
      {
        v17 = 0;
        v18 = v11[2];
        while (1)
        {
          if ((int)v18 + v17 < 0 != __OFADD__((_DWORD)v18, v17))
            v19 = v18 + v17 + 1;
          else
            v19 = v18 + v17;
          v20 = (v19 >> 1);
          v21 = a5 - (v11[4 * (int)v20 + 8] >> 28);
          if (v21)
          {
            v22 = v21;
            v23 = v20;
            if ((v22 & 0x8000000000000000) == 0)
            {
LABEL_15:
              if (!v22)
                goto LABEL_19;
              v17 = v20 + 1;
              v23 = v18;
            }
          }
          else
          {
            v22 = a4 - *(_QWORD *)&v11[4 * ((uint64_t)v19 >> 1) + 5];
            v23 = v20;
            if ((v22 & 0x8000000000000000) == 0)
              goto LABEL_15;
          }
          v18 = v23;
          if (v17 >= (int)v23)
          {
            v24 = v22 > 0;
            goto LABEL_20;
          }
        }
      }
      LODWORD(v20) = 0;
LABEL_19:
      v24 = 0;
LABEL_20:
      if (v13 - 1 <= (int)v20)
        v24 = 0;
      v12 = v20 + v24;
      v11[4] = v20 + v24;
      v15 = (uint64_t)&v11[4 * (int)v20 + 5 + 4 * v24];
    }
    v25 = a5 - (*(_DWORD *)(v15 + 12) >> 28);
    if (v25)
    {
      v26 = v25;
LABEL_25:
      v27 = v12;
      if (v26 >= 1 && v13 - 1 == v12)
      {
        v11[4] = v12 + 1;
        v27 = v12 + 1;
LABEL_38:
        result = 0;
        v32 = &v11[4 * v27];
        *(_QWORD *)(v32 + 5) = a4;
        v32[7] = a2;
        v32[8] = a3 & 0xFFFFFFF | (a5 << 28);
        LODWORD(v32) = v11[3] | 1;
        v11[2] = v13 + 1;
        v11[3] = (_DWORD)v32;
        return result;
      }
LABEL_37:
      memmove(&v11[4 * v12 + 9], &v11[4 * v27 + 5], 16 * (v13 - v12));
      v13 = v11[2];
      goto LABEL_38;
    }
    v26 = a4 - *(_QWORD *)v15;
    if (v26)
      goto LABEL_25;
    if (v13 <= 0)
    {
      v27 = v12;
      goto LABEL_37;
    }
    v29 = *__error();
    v30 = _SILogForLogForCategory(7);
    v31 = 2 * (dword_1EF19FCA8 < 4);
    if (os_log_type_enabled(v30, v31))
    {
      v33 = 136315650;
      v34 = a1 + 324;
      v35 = 1024;
      v36 = v12;
      v37 = 2048;
      v38 = a4;
      _os_log_impl(&dword_1B8270000, v30, v31, "%s : ERR: map_insert: key already present! idx %d %.16llx\n", (uint8_t *)&v33, 0x1Cu);
    }
    *__error() = v29;
    return 22;
  }
  return result;
}

uint64_t page_split(uint64_t a1, char *a2, unsigned int a3, size_t a4, __int16 a5)
{
  int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  int v21;
  char *v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  char *v27;
  char *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  uint64_t v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  _BOOL4 v52;
  _BOOL4 v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  _BYTE *v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unsigned __int8 *v76;
  void *v77;
  int v78;
  _DWORD *v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  char *v92;
  char *v93;
  const char *v94;
  unsigned int v95;
  int v96;
  NSObject *v97;
  char *v98;
  char *v99;
  char *v100;
  const char *v101;
  uint64_t v102;
  int v103;
  NSObject *v104;
  char *v105;
  char *v106;
  const char *v107;
  int v108;
  unsigned int v109;
  _BOOL4 v110;
  __int16 v111;
  char *v112;
  void *value_out;
  char *v114;
  void *__src;
  unsigned int v116;
  int v117;
  _BYTE buf[12];
  __int16 v119;
  _BYTE v120[24];
  __int16 v121;
  void *v122;
  __int16 v123;
  char *v124;
  __int16 v125;
  char *v126;
  __int16 v127;
  void *v128;
  uint64_t v129;

  v6 = a4;
  v7 = a3;
  v9 = a1;
  v129 = *MEMORY[0x1E0C80C00];
  v116 = a4;
  v117 = a3;
  v114 = 0;
  __src = 0;
  value_out = 0;
  v10 = _page_fetch_with_fd(a1, &value_out, a3, a4, 0, buf, 0xFFFFFFFFLL, 0);
  if ((_DWORD)v10)
    return v10;
  v12 = (char *)value_out;
  if ((*((_BYTE *)value_out + 12) & 0xF0) != 0)
  {
    v103 = *__error();
    v104 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "page_split";
      v119 = 1024;
      *(_DWORD *)v120 = 4534;
      *(_WORD *)&v120[4] = 1024;
      *(_DWORD *)&v120[6] = v7;
      _os_log_error_impl(&dword_1B8270000, v104, OS_LOG_TYPE_ERROR, "%s:%d: page_split: ERR: tried to read attr name table data! pgnum 0x%x\n", buf, 0x18u);
    }
    *__error() = v103;
    v105 = __si_assert_copy_extra_2151(0, -1);
    v106 = v105;
    if (v105)
      v107 = v105;
    else
      v107 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 4535, v107);
    free(v106);
    goto LABEL_226;
  }
  v13 = *((int *)value_out + 2);
  v14 = (char *)value_out + v13;
  v114 = (char *)value_out + v13;
  v16 = a2 + 4;
  v15 = a2[4];
  if ((v15 & 0x80) != 0)
  {
    if (v15 > 0xBF)
    {
      if (v15 > 0xDF)
      {
        if (v15 > 0xEF)
        {
          if (v15 > 0xF7)
          {
            if (v15 > 0xFB)
            {
              if (v15 > 0xFD)
              {
                if ((_DWORD)v15 == 255)
                {
                  v15 = *(_QWORD *)(a2 + 5);
                  v17 = 9;
                }
                else
                {
                  v15 = ((unint64_t)a2[5] << 48) | ((unint64_t)a2[6] << 40) | ((unint64_t)a2[7] << 32) | ((unint64_t)a2[8] << 24) | ((unint64_t)a2[9] << 16) | ((unint64_t)a2[10] << 8) | a2[11];
                  v17 = 8;
                }
              }
              else
              {
                v15 = ((unint64_t)(v15 & 1) << 48) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 32) | ((unint64_t)a2[7] << 24) | ((unint64_t)a2[8] << 16) | ((unint64_t)a2[9] << 8) | a2[10];
                v17 = 7;
              }
            }
            else
            {
              v15 = ((unint64_t)(v15 & 3) << 40) | ((unint64_t)a2[5] << 32) | ((unint64_t)a2[6] << 24) | ((unint64_t)a2[7] << 16) | ((unint64_t)a2[8] << 8) | a2[9];
              v17 = 6;
            }
          }
          else
          {
            v15 = ((unint64_t)(v15 & 7) << 32) | ((unint64_t)a2[5] << 24) | ((unint64_t)a2[6] << 16) | ((unint64_t)a2[7] << 8) | a2[8];
            v17 = 5;
          }
        }
        else
        {
          v15 = ((unint64_t)(v15 & 0xF) << 24) | ((unint64_t)a2[5] << 16) | ((unint64_t)a2[6] << 8) | a2[7];
          v17 = 4;
        }
      }
      else
      {
        v15 = ((unint64_t)(v15 & 0x1F) << 16) | ((unint64_t)a2[5] << 8) | a2[6];
        v17 = 3;
      }
    }
    else
    {
      v15 = a2[5] | ((unint64_t)(v15 & 0x3F) << 8);
      v17 = 2;
    }
  }
  else
  {
    v17 = 1;
  }
  v18 = v16[v17];
  if (v16[v17] < 0)
  {
    if (v18 >= 0xC0)
    {
      if (v18 >= 0xE0)
        goto LABEL_215;
      v19 = v17 + 2;
    }
    else
    {
      v19 = v17 + 1;
    }
    v18 = v16[v19];
  }
  v20 = (char *)value_out + 20;
  v112 = a2;
  v111 = a5;
  if ((int)v13 < 21)
  {
    v25 = 0;
    v26 = 0;
    v27 = (char *)value_out + v13;
    v28 = (char *)value_out;
  }
  else
  {
    v21 = *(_DWORD *)(v9 + 804);
    v22 = (char *)value_out + 24;
    v23 = *((unsigned __int8 *)value_out + 24);
    if (*((char *)value_out + 24) < 0)
    {
      v29 = *((unsigned __int8 *)value_out + 24);
      if (v29 > 0xBF)
      {
        if (v29 > 0xDF)
        {
          if (v29 > 0xEF)
          {
            if (v29 > 0xF7)
            {
              if (v29 > 0xFB)
              {
                if (v29 > 0xFD)
                {
                  if (v29 == 255)
                  {
                    v23 = *(_QWORD *)((char *)value_out + 25);
                    v24 = 9;
                  }
                  else
                  {
                    v23 = ((unint64_t)*((unsigned __int8 *)value_out + 25) << 48) | ((unint64_t)*((unsigned __int8 *)value_out + 26) << 40) | ((unint64_t)*((unsigned __int8 *)value_out + 27) << 32) | ((unint64_t)*((unsigned __int8 *)value_out + 28) << 24) | ((unint64_t)*((unsigned __int8 *)value_out + 29) << 16) | ((unint64_t)*((unsigned __int8 *)value_out + 30) << 8) | *((unsigned __int8 *)value_out + 31);
                    v24 = 8;
                  }
                }
                else
                {
                  v23 = ((unint64_t)(v23 & 1) << 48) | ((unint64_t)*((unsigned __int8 *)value_out + 25) << 40) | ((unint64_t)*((unsigned __int8 *)value_out + 26) << 32) | ((unint64_t)*((unsigned __int8 *)value_out + 27) << 24) | ((unint64_t)*((unsigned __int8 *)value_out + 28) << 16) | ((unint64_t)*((unsigned __int8 *)value_out + 29) << 8) | *((unsigned __int8 *)value_out + 30);
                  v24 = 7;
                }
              }
              else
              {
                v23 = ((unint64_t)(v23 & 3) << 40) | ((unint64_t)*((unsigned __int8 *)value_out + 25) << 32) | ((unint64_t)*((unsigned __int8 *)value_out + 26) << 24) | ((unint64_t)*((unsigned __int8 *)value_out + 27) << 16) | ((unint64_t)*((unsigned __int8 *)value_out + 28) << 8) | *((unsigned __int8 *)value_out + 29);
                v24 = 6;
              }
            }
            else
            {
              v23 = ((unint64_t)(v23 & 7) << 32) | ((unint64_t)*((unsigned __int8 *)value_out + 25) << 24) | ((unint64_t)*((unsigned __int8 *)value_out + 26) << 16) | ((unint64_t)*((unsigned __int8 *)value_out + 27) << 8) | *((unsigned __int8 *)value_out + 28);
              v24 = 5;
            }
          }
          else
          {
            v23 = ((unint64_t)(v23 & 0xF) << 24) | ((unint64_t)*((unsigned __int8 *)value_out + 25) << 16) | ((unint64_t)*((unsigned __int8 *)value_out + 26) << 8) | *((unsigned __int8 *)value_out + 27);
            v24 = 4;
          }
        }
        else
        {
          v23 = ((unint64_t)(v23 & 0x1F) << 16) | ((unint64_t)*((unsigned __int8 *)value_out + 25) << 8) | *((unsigned __int8 *)value_out + 26);
          v24 = 3;
        }
      }
      else
      {
        v23 = *((unsigned __int8 *)value_out + 25) | ((unint64_t)(v23 & 0x3F) << 8);
        v24 = 2;
      }
    }
    else
    {
      v24 = 1;
    }
    v30 = v22[v24];
    if (v22[v24] < 0)
    {
      if (v30 >= 0xC0)
      {
        if (v30 >= 0xE0)
          goto LABEL_215;
        v31 = v24 + 2;
      }
      else
      {
        v31 = v24 + 1;
      }
      v30 = v22[v31];
    }
    v109 = v7;
    v25 = 0;
    v26 = 0;
    v32 = v21 & (v18 >> 5) & 1;
    v33 = v21 & (v30 >> 5) & 1;
    v34 = (char *)value_out + 20;
    while (v33 < v32 || v33 == v32 && v23 < v15)
    {
      v34 += (*(_DWORD *)v34 + 4);
      if (v34 >= v14)
        break;
      v37 = v34 + 4;
      v25 = v34[4];
      if (v34[4] < 0)
      {
        v39 = v34[4];
        if (v39 > 0xBF)
        {
          if (v39 > 0xDF)
          {
            if (v39 > 0xEF)
            {
              if (v39 > 0xF7)
              {
                if (v39 > 0xFB)
                {
                  if (v39 > 0xFD)
                  {
                    if (v39 == 255)
                    {
                      v25 = *(_QWORD *)(v34 + 5);
                      v38 = 9;
                    }
                    else
                    {
                      v25 = ((unint64_t)v34[5] << 48) | ((unint64_t)v34[6] << 40) | ((unint64_t)v34[7] << 32) | ((unint64_t)v34[8] << 24) | ((unint64_t)v34[9] << 16) | ((unint64_t)v34[10] << 8) | v34[11];
                      v38 = 8;
                    }
                  }
                  else
                  {
                    v25 = ((v25 & 1) << 48) | ((unint64_t)v34[5] << 40) | ((unint64_t)v34[6] << 32) | ((unint64_t)v34[7] << 24) | ((unint64_t)v34[8] << 16) | ((unint64_t)v34[9] << 8) | v34[10];
                    v38 = 7;
                  }
                }
                else
                {
                  v25 = ((v25 & 3) << 40) | ((unint64_t)v34[5] << 32) | ((unint64_t)v34[6] << 24) | ((unint64_t)v34[7] << 16) | ((unint64_t)v34[8] << 8) | v34[9];
                  v38 = 6;
                }
              }
              else
              {
                v25 = ((v25 & 7) << 32) | ((unint64_t)v34[5] << 24) | ((unint64_t)v34[6] << 16) | ((unint64_t)v34[7] << 8) | v34[8];
                v38 = 5;
              }
            }
            else
            {
              v25 = ((v25 & 0xF) << 24) | ((unint64_t)v34[5] << 16) | ((unint64_t)v34[6] << 8) | v34[7];
              v38 = 4;
            }
          }
          else
          {
            v25 = ((v25 & 0x1F) << 16) | ((unint64_t)v34[5] << 8) | v34[6];
            v38 = 3;
          }
        }
        else
        {
          v25 = v34[5] | ((v25 & 0x3F) << 8);
          v38 = 2;
        }
      }
      else
      {
        v38 = 1;
      }
      v36 = v37[v38];
      if (v37[v38] < 0)
      {
        if (v36 < 0xC0)
        {
          v35 = v38 + 1;
        }
        else
        {
          if (v36 >= 0xE0)
            goto LABEL_215;
          v35 = v38 + 2;
        }
        v36 = v37[v35];
      }
      v26 = v21 & (v36 >> 5) & 1;
      v23 = v25;
      v33 = v26;
    }
    if (v34 <= v14)
    {
      v27 = (char *)value_out + v13;
      v28 = (char *)value_out;
      v20 = v34;
      v7 = v109;
    }
    else
    {
      v108 = v6;
      v40 = v9;
      v41 = v13;
      v42 = a2 + 4;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v34;
        v119 = 2048;
        *(_QWORD *)v120 = v14;
        *(_WORD *)&v120[8] = 2048;
        *(_QWORD *)&v120[10] = v12 + 20;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "dbo %p beyond end of page at %p. Resetting to last at %p", buf, 0x20u);
        v28 = (char *)value_out;
        v27 = v114;
      }
      else
      {
        v27 = v14;
        v28 = v12;
      }
      v7 = v109;
      v16 = v42;
      a2 = v112;
      LODWORD(v13) = v41;
      v9 = v40;
      v6 = v108;
    }
  }
  v43 = (_DWORD)v20 - (_DWORD)v12;
  if (v20 >= v14)
    v43 = v13;
  v44 = v43;
  v45 = v27 - v28;
  if (*(_DWORD *)(*(_QWORD *)(v9 + 856) + 16) == *(_DWORD *)(*(_QWORD *)(v9 + 856) + 8) - 1 && v45 <= v43)
  {
    v50 = 4 * ((*((_DWORD *)v28 + 3) & 0xC) != 0);
    page_release(v9, v28, v7, 0, 0);
    *(_QWORD *)buf = 0;
    v51 = _page_alloc_fetch(v9, (int8x16_t **)buf, 0, (unsigned int *)&v117, (signed int *)&v116, v50);
    if ((_DWORD)v51)
      return v51;
    free(*(void **)buf);
    return _real_page_insert_obj(v9, (int)a2, v111 & 0x4000, v117, v116);
  }
  v47 = (unsigned __int8 *)&v28[v43];
  __src = &v28[v44];
  if (v45 <= v44)
  {
    v52 = 0;
    v53 = 1;
    goto LABEL_133;
  }
  v48 = v47[4];
  if ((char)v47[4] < 0)
  {
    v49 = v47[4];
    if (v49 <= 0xBF)
    {
      v48 = v47[5] | ((v48 & 0x3F) << 8);
      goto LABEL_115;
    }
    if (v49 > 0xDF)
    {
      if (v49 > 0xEF)
      {
        if (v49 > 0xF7)
        {
          if (v49 > 0xFB)
          {
            if (v49 > 0xFD)
            {
              if (v49 == 255)
              {
                v48 = *(_QWORD *)(v47 + 5);
                goto LABEL_115;
              }
              v54 = ((unint64_t)v47[5] << 48) | ((unint64_t)v47[6] << 40) | ((unint64_t)v47[7] << 32) | ((unint64_t)v47[8] << 24) | ((unint64_t)v47[9] << 16) | ((unint64_t)v47[10] << 8);
              v55 = v47[11];
            }
            else
            {
              v54 = ((v48 & 1) << 48) | ((unint64_t)v47[5] << 40) | ((unint64_t)v47[6] << 32) | ((unint64_t)v47[7] << 24) | ((unint64_t)v47[8] << 16) | ((unint64_t)v47[9] << 8);
              v55 = v47[10];
            }
          }
          else
          {
            v54 = ((v48 & 3) << 40) | ((unint64_t)v47[5] << 32) | ((unint64_t)v47[6] << 24) | ((unint64_t)v47[7] << 16) | ((unint64_t)v47[8] << 8);
            v55 = v47[9];
          }
        }
        else
        {
          v54 = ((v48 & 7) << 32) | ((unint64_t)v47[5] << 24) | ((unint64_t)v47[6] << 16) | ((unint64_t)v47[7] << 8);
          v55 = v47[8];
        }
      }
      else
      {
        v54 = ((v48 & 0xF) << 24) | ((unint64_t)v47[5] << 16) | ((unint64_t)v47[6] << 8);
        v55 = v47[7];
      }
    }
    else
    {
      v54 = ((v48 & 0x1F) << 16) | ((unint64_t)v47[5] << 8);
      v55 = v47[6];
    }
    v48 = v54 | v55;
  }
LABEL_115:
  v56 = *v16;
  if (*v16 < 0)
  {
    v57 = *v16;
    if (v57 > 0xBF)
    {
      if (v57 > 0xDF)
      {
        if (v57 > 0xEF)
        {
          if (v57 > 0xF7)
          {
            if (v57 > 0xFB)
            {
              if (v57 > 0xFD)
              {
                if (v57 == 255)
                {
                  v56 = *(_QWORD *)(a2 + 5);
                  goto LABEL_132;
                }
                v58 = ((unint64_t)a2[5] << 48) | ((unint64_t)a2[6] << 40) | ((unint64_t)a2[7] << 32) | ((unint64_t)a2[8] << 24) | ((unint64_t)a2[9] << 16) | ((unint64_t)a2[10] << 8);
                v59 = a2[11];
              }
              else
              {
                v58 = ((v56 & 1) << 48) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 32) | ((unint64_t)a2[7] << 24) | ((unint64_t)a2[8] << 16) | ((unint64_t)a2[9] << 8);
                v59 = a2[10];
              }
            }
            else
            {
              v58 = ((v56 & 3) << 40) | ((unint64_t)a2[5] << 32) | ((unint64_t)a2[6] << 24) | ((unint64_t)a2[7] << 16) | ((unint64_t)a2[8] << 8);
              v59 = a2[9];
            }
          }
          else
          {
            v58 = ((v56 & 7) << 32) | ((unint64_t)a2[5] << 24) | ((unint64_t)a2[6] << 16) | ((unint64_t)a2[7] << 8);
            v59 = a2[8];
          }
        }
        else
        {
          v58 = ((v56 & 0xF) << 24) | ((unint64_t)a2[5] << 16) | ((unint64_t)a2[6] << 8);
          v59 = a2[7];
        }
      }
      else
      {
        v58 = ((v56 & 0x1F) << 16) | ((unint64_t)a2[5] << 8);
        v59 = a2[6];
      }
      v56 = v58 | v59;
      goto LABEL_132;
    }
    v56 = a2[5] | ((v56 & 0x3F) << 8);
  }
LABEL_132:
  v52 = v48 == v56;
  v53 = v48 != v56;
LABEL_133:
  v110 = v53;
  v60 = v16;
  if (v6 - 20 <= (unint64_t)(*(_DWORD *)v112 + 4))
  {
    v61 = v7;
  }
  else
  {
    if (!try_push_insert_obj(v9, v28, v7, (unsigned __int8 *)v112, v44, v111 & 0x4000))
      return 0;
    v61 = v7;
    v28 = (char *)value_out;
  }
  v62 = *(_QWORD *)(v9 + 928);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(v62 + 8));
  v63 = *(unsigned int *)(v62 + 220);
  if ((int)v63 >= 1)
  {
    v64 = 0;
    v65 = (char **)(v62 + 272);
    while (*v65 != v28)
    {
      ++v64;
      v65 += 6;
      if (v63 == v64)
        goto LABEL_143;
    }
    v66 = v62 + 48 * v64;
    *(_QWORD *)(v66 + 296) = 0;
    *(_DWORD *)(v66 + 304) = 0;
    *(_QWORD *)(v66 + 312) = 0;
  }
LABEL_143:
  pthread_rwlock_unlock((pthread_rwlock_t *)(v62 + 8));
  v70 = *(_DWORD *)v112 + 4;
  if (v52)
  {
    v71 = __src;
    v72 = *(_DWORD *)__src + 4;
    v73 = v61;
    if (v70 <= v72)
      goto LABEL_148;
    v74 = *((_DWORD *)value_out + 2);
    if (v70 - v72 <= *((_DWORD *)value_out + 1) - v74)
      goto LABEL_148;
    v75 = page_resize(v9, &value_out, 1, *(_DWORD *)v112 - *(_DWORD *)__src + v74, (unint64_t *)&__src, v67, v68, v69, (uint64_t)&v114);
    if (!(_DWORD)v75)
    {
      v71 = __src;
      v70 = *(_DWORD *)v112 + 4;
      v72 = *(_DWORD *)__src + 4;
LABEL_148:
      memmove(&v71[v70], &v71[v72], v114 - &v71[v72]);
      v76 = (unsigned __int8 *)v112;
      v77 = __src;
      *((_DWORD *)value_out + 2) += *(_DWORD *)v112 - *(_DWORD *)__src;
      goto LABEL_155;
    }
LABEL_151:
    v10 = v75;
    v79 = value_out;
    v80 = v9;
    v81 = v73;
    v82 = 0;
LABEL_214:
    page_release(v80, v79, v81, v82, 0);
    return v10;
  }
  v78 = *((_DWORD *)value_out + 2);
  v73 = v61;
  if (v70 > *((_DWORD *)value_out + 1) - v78)
  {
    v75 = page_resize(v9, &value_out, 1, v78 + v70, (unint64_t *)&__src, v67, v68, v69, (uint64_t)&v114);
    if ((_DWORD)v75)
      goto LABEL_151;
    v70 = *(_DWORD *)v112 + 4;
  }
  memmove((char *)__src + v70, __src, v114 - (_BYTE *)__src);
  v76 = (unsigned __int8 *)v112;
  *((_DWORD *)value_out + 2) += *(_DWORD *)v112 + 4;
  v77 = __src;
LABEL_155:
  memcpy(v77, v76, (*(_DWORD *)v76 + 4));
  v83 = __src < v114 || v52;
  v84 = v76[4];
  if ((v83 & 1) != 0)
  {
    if ((v84 & 0x80) != 0)
    {
      if (v84 > 0xBF)
      {
        if (v84 > 0xDF)
        {
          if (v84 > 0xEF)
          {
            if (v84 > 0xF7)
            {
              if (v84 > 0xFB)
              {
                if (v84 > 0xFD)
                {
                  if ((_DWORD)v84 == 255)
                  {
                    v84 = *(_QWORD *)(v112 + 5);
                    v85 = 9;
                  }
                  else
                  {
                    v84 = ((unint64_t)v112[5] << 48) | ((unint64_t)v112[6] << 40) | ((unint64_t)v112[7] << 32) | ((unint64_t)v112[8] << 24) | ((unint64_t)v112[9] << 16) | ((unint64_t)v112[10] << 8) | v112[11];
                    v85 = 8;
                  }
                }
                else
                {
                  v84 = ((v84 & 1) << 48) | ((unint64_t)v112[5] << 40) | ((unint64_t)v112[6] << 32) | ((unint64_t)v112[7] << 24) | ((unint64_t)v112[8] << 16) | ((unint64_t)v112[9] << 8) | v112[10];
                  v85 = 7;
                }
              }
              else
              {
                v84 = ((v84 & 3) << 40) | ((unint64_t)v112[5] << 32) | ((unint64_t)v112[6] << 24) | ((unint64_t)v112[7] << 16) | ((unint64_t)v112[8] << 8) | v112[9];
                v85 = 6;
              }
            }
            else
            {
              v84 = ((v84 & 7) << 32) | ((unint64_t)v112[5] << 24) | ((unint64_t)v112[6] << 16) | ((unint64_t)v112[7] << 8) | v112[8];
              v85 = 5;
            }
          }
          else
          {
            v84 = ((v84 & 0xF) << 24) | ((unint64_t)v112[5] << 16) | ((unint64_t)v112[6] << 8) | v112[7];
            v85 = 4;
          }
        }
        else
        {
          v84 = ((v84 & 0x1F) << 16) | ((unint64_t)v112[5] << 8) | v112[6];
          v85 = 3;
        }
      }
      else
      {
        v84 = v112[5] | ((v84 & 0x3F) << 8);
        v85 = 2;
      }
    }
    else
    {
      v85 = 1;
    }
    if (v60[v85] < 0xE0u)
    {
      if (dword_1EF19FCA8 >= 5)
      {
        v95 = v73;
        v96 = *__error();
        v97 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
        {
          v98 = (char *)__src + *(unsigned int *)__src;
          *(_DWORD *)buf = 136316930;
          *(_QWORD *)&buf[4] = v9 + 324;
          v119 = 1024;
          *(_DWORD *)v120 = v95;
          *(_WORD *)&v120[4] = 2048;
          *(_QWORD *)&v120[6] = v25;
          *(_WORD *)&v120[14] = 2048;
          *(_QWORD *)&v120[16] = v84;
          v121 = 2048;
          v122 = __src;
          v123 = 2048;
          v124 = v114;
          v125 = 2048;
          v126 = v98;
          v127 = 2048;
          v128 = value_out;
          _os_log_impl(&dword_1B8270000, v97, OS_LOG_TYPE_DEFAULT, "%s : no map update for split at pgnum %d oid (%.16llx) to(%.16llx) dbo:%p end:%p next:%p dbp:%p\n", buf, 0x4Eu);
        }
        *__error() = v96;
        v73 = v95;
      }
      goto LABEL_194;
    }
    v99 = __si_assert_copy_extra_2151(0, -1);
    v100 = v99;
    v101 = "";
    if (v99)
      v101 = v99;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v101);
    free(v100);
    if (!__valid_fs(-1))
    {
      v102 = 3072;
LABEL_228:
      *(_DWORD *)v102 = -559038737;
      abort();
    }
LABEL_226:
    v102 = 2989;
    goto LABEL_228;
  }
  if ((v84 & 0x80) != 0)
  {
    if (v84 > 0xBF)
    {
      if (v84 > 0xDF)
      {
        if (v84 > 0xEF)
        {
          if (v84 > 0xF7)
          {
            if (v84 > 0xFB)
            {
              if (v84 > 0xFD)
              {
                if ((_DWORD)v84 == 255)
                {
                  v84 = *(_QWORD *)(v112 + 5);
                  v86 = 9;
                }
                else
                {
                  v84 = ((unint64_t)v112[5] << 48) | ((unint64_t)v112[6] << 40) | ((unint64_t)v112[7] << 32) | ((unint64_t)v112[8] << 24) | ((unint64_t)v112[9] << 16) | ((unint64_t)v112[10] << 8) | v112[11];
                  v86 = 8;
                }
              }
              else
              {
                v84 = ((v84 & 1) << 48) | ((unint64_t)v112[5] << 40) | ((unint64_t)v112[6] << 32) | ((unint64_t)v112[7] << 24) | ((unint64_t)v112[8] << 16) | ((unint64_t)v112[9] << 8) | v112[10];
                v86 = 7;
              }
            }
            else
            {
              v84 = ((v84 & 3) << 40) | ((unint64_t)v112[5] << 32) | ((unint64_t)v112[6] << 24) | ((unint64_t)v112[7] << 16) | ((unint64_t)v112[8] << 8) | v112[9];
              v86 = 6;
            }
          }
          else
          {
            v84 = ((v84 & 7) << 32) | ((unint64_t)v112[5] << 24) | ((unint64_t)v112[6] << 16) | ((unint64_t)v112[7] << 8) | v112[8];
            v86 = 5;
          }
        }
        else
        {
          v84 = ((v84 & 0xF) << 24) | ((unint64_t)v112[5] << 16) | ((unint64_t)v112[6] << 8) | v112[7];
          v86 = 4;
        }
      }
      else
      {
        v84 = ((v84 & 0x1F) << 16) | ((unint64_t)v112[5] << 8) | v112[6];
        v86 = 3;
      }
    }
    else
    {
      v84 = v112[5] | ((v84 & 0x3F) << 8);
      v86 = 2;
    }
  }
  else
  {
    v86 = 1;
  }
  v89 = v60[v86];
  if (v60[v86] < 0)
  {
    if (v89 < 0xC0)
    {
      v90 = v86 + 1;
LABEL_208:
      v89 = v60[v90];
      goto LABEL_209;
    }
    if (v89 < 0xE0)
    {
      v90 = v86 + 2;
      goto LABEL_208;
    }
LABEL_215:
    v92 = __si_assert_copy_extra_2151(0, -1);
    v93 = v92;
    v94 = "";
    if (v92)
      v94 = v92;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v94);
    free(v93);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
LABEL_209:
  v91 = *(unsigned __int8 *)(v9 + 804) & (v89 >> 5);
  if (!v25)
  {
    v10 = map_force(v9, v73, v6, v84, v91 & 1);
    if (!(_DWORD)v10)
      goto LABEL_194;
    goto LABEL_213;
  }
  v10 = map_update(v9, v73, v6, v25, v84, v26, v91 & 1, 1);
  if ((_DWORD)v10)
  {
LABEL_213:
    v79 = value_out;
    v82 = v111 & 0x4000;
    v80 = v9;
    v81 = v73;
    goto LABEL_214;
  }
LABEL_194:
  if ((*(_DWORD *)(v9 + 804) & 2) != 0)
    v87 = 114688;
  else
    v87 = 196608;
  if (*((_DWORD *)value_out + 2) <= v87)
    v88 = 1;
  else
    v88 = 3;
  page_release(v9, value_out, v73, v111 & 0x4000 | v88, 0);
  v10 = 0;
  if (v110)
  {
    v10 = 0;
    ++*(_QWORD *)(v9 + 20);
  }
  return v10;
}

uint64_t try_push_insert_obj(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned __int8 *a4, int a5, __int16 a6)
{
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t result;
  int *v26;
  unsigned int v27;
  size_t v28;
  unsigned int v29;
  size_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  unsigned int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v12 = *(int **)(a1 + 856);
  v13 = v12[4];
  v14 = v12[2];
  if ((int)v14 <= v13 || v13 <= -1)
    v16 = 0;
  else
    v16 = v12[4];
  if (v16 >= v14)
  {
LABEL_11:
    if (v16 < 1)
    {
LABEL_15:
      v22 = *__error();
      v23 = _SILogForLogForCategory(7);
      v24 = 2 * (dword_1EF19FCA8 < 4);
      if (os_log_type_enabled(v23, v24))
      {
        v32 = 136315394;
        v33 = a1 + 324;
        v34 = 1024;
        v35 = a3;
        _os_log_impl(&dword_1B8270000, v23, v24, "%s : ERR: try_push_insert_obj: BAD NEWS! pgnum 0x%x not found\n", (uint8_t *)&v32, 0x12u);
      }
      *__error() = v22;
      return 22;
    }
    v18 = 0;
    v20 = v12 + 7;
    while (1)
    {
      v21 = *v20;
      v20 += 4;
      if (v21 == a3)
        break;
      if (v16 == ++v18)
        goto LABEL_15;
    }
  }
  else
  {
    v17 = &v12[4 * v16 + 7];
    v18 = v16;
    while (1)
    {
      v19 = *v17;
      v17 += 4;
      if (v19 == a3)
        break;
      if (v14 == ++v18)
        goto LABEL_11;
    }
  }
  v12[4] = v18;
  if (v18 + 1 < v14)
  {
    v26 = &v12[4 * v18 + 4];
    v27 = v26[7];
    v28 = v26[8] & 0xFFFFFFF;
    if (v18 < 1)
      goto LABEL_21;
LABEL_24:
    v31 = &v12[4 * v18];
    v29 = v31[3];
    v30 = v31[4] & 0xFFFFFFF;
    if (!v27)
      goto LABEL_22;
LABEL_25:
    result = try_push_right(a1, a2, a3, a4, a5, v27, v28, a6 & 0x4000);
    if (!(_DWORD)result)
      return result;
    goto LABEL_26;
  }
  v27 = 0;
  v28 = 0;
  if (v18 >= 1)
    goto LABEL_24;
LABEL_21:
  v29 = 0;
  v30 = 0;
  if (v27)
    goto LABEL_25;
LABEL_22:
  result = 28;
LABEL_26:
  if (v29)
    return try_push_left(a1, a2, a3, a4, a5, v29, v30, a6 & 0x4000);
  return result;
}

uint64_t try_push_right(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned __int8 *a4, int a5, unsigned int a6, size_t __nbyte, unsigned int a8)
{
  int v9;
  uint64_t result;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  _DWORD *v47;
  int v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  NSObject *v53;
  os_log_type_t v54;
  char *v55;
  int v56;
  int v57;
  int v58;
  char *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  char v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  char *v68;
  char *v69;
  const char *v70;
  int v71;
  unint64_t v72;
  _DWORD *__src;
  unint64_t v74;
  size_t __n;
  unsigned int v76;
  void *v77;
  void *value_out;
  _BYTE buf[12];
  __int16 v80;
  char *v81;
  __int16 v82;
  int v83;
  uint64_t v84;

  v9 = __nbyte;
  v84 = *MEMORY[0x1E0C80C00];
  v77 = 0;
  value_out = 0;
  result = _page_fetch_with_fd(a1, &value_out, a6, __nbyte, 1, buf, 0xFFFFFFFFLL, 0);
  if ((_DWORD)result)
    return result;
  v76 = a8;
  if ((*((_BYTE *)value_out + 12) & 0xF0) != 0)
    goto LABEL_79;
  v17 = *((_DWORD *)value_out + 1);
  v18 = *((int *)value_out + 2);
  v19 = v17 - v18;
  if (v9 < 4 * (v17 - (int)v18))
    goto LABEL_79;
  v20 = (int)a2[2];
  if ((int)v20 <= a5)
    goto LABEL_79;
  v21 = (char *)a2 + a5;
  v22 = v21[4];
  if (v21[4] < 0)
  {
    v23 = v21[4];
    if (v23 <= 0xBF)
    {
      v22 = v21[5] | ((v22 & 0x3F) << 8);
      goto LABEL_22;
    }
    if (v23 > 0xDF)
    {
      if (v23 > 0xEF)
      {
        if (v23 > 0xF7)
        {
          if (v23 > 0xFB)
          {
            if (v23 > 0xFD)
            {
              if (v23 == 255)
              {
                v22 = *(_QWORD *)(v21 + 5);
                goto LABEL_22;
              }
              v24 = ((unint64_t)v21[5] << 48) | ((unint64_t)v21[6] << 40) | ((unint64_t)v21[7] << 32) | ((unint64_t)v21[8] << 24) | ((unint64_t)v21[9] << 16) | ((unint64_t)v21[10] << 8);
              v25 = v21[11];
            }
            else
            {
              v24 = ((v22 & 1) << 48) | ((unint64_t)v21[5] << 40) | ((unint64_t)v21[6] << 32) | ((unint64_t)v21[7] << 24) | ((unint64_t)v21[8] << 16) | ((unint64_t)v21[9] << 8);
              v25 = v21[10];
            }
          }
          else
          {
            v24 = ((v22 & 3) << 40) | ((unint64_t)v21[5] << 32) | ((unint64_t)v21[6] << 24) | ((unint64_t)v21[7] << 16) | ((unint64_t)v21[8] << 8);
            v25 = v21[9];
          }
        }
        else
        {
          v24 = ((v22 & 7) << 32) | ((unint64_t)v21[5] << 24) | ((unint64_t)v21[6] << 16) | ((unint64_t)v21[7] << 8);
          v25 = v21[8];
        }
      }
      else
      {
        v24 = ((v22 & 0xF) << 24) | ((unint64_t)v21[5] << 16) | ((unint64_t)v21[6] << 8);
        v25 = v21[7];
      }
    }
    else
    {
      v24 = ((v22 & 0x1F) << 16) | ((unint64_t)v21[5] << 8);
      v25 = v21[6];
    }
    v22 = v24 | v25;
  }
LABEL_22:
  v26 = a4[4];
  if ((char)a4[4] < 0)
  {
    v27 = a4[4];
    if (v27 > 0xBF)
    {
      if (v27 > 0xDF)
      {
        if (v27 > 0xEF)
        {
          if (v27 > 0xF7)
          {
            if (v27 > 0xFB)
            {
              if (v27 > 0xFD)
              {
                if (v27 == 255)
                {
                  v26 = *(_QWORD *)(a4 + 5);
                  goto LABEL_39;
                }
                v28 = ((unint64_t)a4[5] << 48) | ((unint64_t)a4[6] << 40) | ((unint64_t)a4[7] << 32) | ((unint64_t)a4[8] << 24) | ((unint64_t)a4[9] << 16) | ((unint64_t)a4[10] << 8);
                v29 = a4[11];
              }
              else
              {
                v28 = ((v26 & 1) << 48) | ((unint64_t)a4[5] << 40) | ((unint64_t)a4[6] << 32) | ((unint64_t)a4[7] << 24) | ((unint64_t)a4[8] << 16) | ((unint64_t)a4[9] << 8);
                v29 = a4[10];
              }
            }
            else
            {
              v28 = ((v26 & 3) << 40) | ((unint64_t)a4[5] << 32) | ((unint64_t)a4[6] << 24) | ((unint64_t)a4[7] << 16) | ((unint64_t)a4[8] << 8);
              v29 = a4[9];
            }
          }
          else
          {
            v28 = ((v26 & 7) << 32) | ((unint64_t)a4[5] << 24) | ((unint64_t)a4[6] << 16) | ((unint64_t)a4[7] << 8);
            v29 = a4[8];
          }
        }
        else
        {
          v28 = ((v26 & 0xF) << 24) | ((unint64_t)a4[5] << 16) | ((unint64_t)a4[6] << 8);
          v29 = a4[7];
        }
      }
      else
      {
        v28 = ((v26 & 0x1F) << 16) | ((unint64_t)a4[5] << 8);
        v29 = a4[6];
      }
      v26 = v28 | v29;
      goto LABEL_39;
    }
    v26 = a4[5] | ((v26 & 0x3F) << 8);
  }
LABEL_39:
  v30 = *(_DWORD *)a4;
  if (v22 == v26)
    v31 = v30 - *(_DWORD *)v21;
  else
    v31 = v30 + 4;
  if (!v31 || v31 >= v19)
    goto LABEL_79;
  v32 = 0;
  v33 = (char *)a2 + v20;
  v34 = a2[1];
  v35 = v34 / 10 >= v19 ? v17 - v18 : v34 / 10;
  v36 = v31 >= v34 / 10 ? v31 : v35;
  v37 = (char *)a2 + a5;
  v38 = v37;
  do
  {
    v39 = v37;
    v40 = (*(_DWORD *)v37 + 4);
    v32 += v40;
    v37 = &v39[v40];
    v41 = v37 < v33;
    if (v32 > v36 && v37 < v33 && v38 < v37)
    {
      do
      {
        v42 = (*(_DWORD *)v38 + 4);
        v32 -= v42;
        v38 += v42;
      }
      while (v32 > v36 && v38 < v37);
      v41 = 1;
    }
  }
  while (v41);
  if (v38 == v21)
  {
    v44 = (*(_DWORD *)v21 + 4);
    v32 -= v44;
    v38 = &v21[v44];
  }
  v45 = v32 < v36 && v32 < v31;
  if (v45)
    goto LABEL_79;
  if (v32 >= v19)
  {
    v46 = (*(_DWORD *)v38 + 4);
    v32 -= v46;
    if (v32 >= v19 || v32 < v31)
      goto LABEL_79;
    v38 += v46;
  }
  if (v33 - v38 != v32)
  {
    v52 = *__error();
    v53 = _SILogForLogForCategory(7);
    v54 = 2 * (dword_1EF19FCA8 < 4);
    if (os_log_type_enabled(v53, v54))
    {
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v33;
      v80 = 2048;
      v81 = v38;
      v82 = 1024;
      v83 = v32;
      _os_log_impl(&dword_1B8270000, v53, v54, "try_push_right: weird! end %p first %p but num_bytes %d\n", buf, 0x1Cu);
    }
    *__error() = v52;
    goto LABEL_79;
  }
  if (v32 + (int)v18 >= v17 || v31 + (int)v20 - v32 >= v34)
  {
LABEL_79:
    if (v77)
      free(v77);
    page_release(a1, value_out, a6, 0, 0);
    return 28;
  }
  v71 = v31;
  v72 = v26;
  __src = (_DWORD *)((char *)a2 + a5);
  v74 = v22;
  __n = v33 - v38;
  memmove((char *)value_out + v33 - v38 + 20, (char *)value_out + 20, v18 - 20);
  v47 = value_out;
  memcpy((char *)value_out + 20, v38, __n);
  v47[2] += v32;
  a2[2] -= v32;
  v48 = page_compress(a1, (size_t)v47, (int8x16_t **)&v77, 0, (*(_DWORD *)(a1 + 804) & 2) != 0);
  v49 = (int)a2[2];
  if (v48)
  {
    a2[2] = v49 + v32;
    v50 = (char *)value_out;
    v51 = *((int *)value_out + 2) - (uint64_t)v32;
    *((_DWORD *)value_out + 2) = v51;
    memmove(v50 + 20, &v50[__n + 20], v51 - 20);
    goto LABEL_79;
  }
  v55 = (char *)a2 + v49;
  if (v74 == v72)
  {
    memmove((char *)__src + (*__src + 4) + v71, (char *)__src + (*__src + 4), v55 - ((char *)__src + (*__src + 4)));
    memcpy(__src, a4, (*(_DWORD *)a4 + 4));
    v56 = v71;
    v57 = a2[2];
  }
  else
  {
    memmove((char *)__src + (*(_DWORD *)a4 + 4), __src, v55 - (char *)__src);
    memcpy(__src, a4, (*(_DWORD *)a4 + 4));
    v57 = *(_DWORD *)a4 + 4;
    v56 = a2[2];
  }
  v58 = v57 + v56;
  a2[2] = v58;
  v59 = (char *)a2 + v58;
  if (v58 <= a5 && v39 >= v59)
  {
    v68 = __si_assert_copy_extra_2151(0, -1);
    v69 = v68;
    v70 = "";
    if (v68)
      v70 = v68;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 4045, "dbo<end || prev_dbo<end", v70);
    free(v69);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v45 = v58 <= a5;
  v60 = (char *)a2 + a5;
  if (!v45)
  {
    do
    {
      v39 = v60;
      v60 += (*(_DWORD *)v60 + 4);
    }
    while (v60 < v59);
  }
  *(_QWORD *)buf = 0;
  v61 = v39[4];
  if (v39[4] < 0)
  {
    v63 = v39[4];
    if (v63 > 0xBF)
    {
      if (v63 > 0xDF)
      {
        if (v63 > 0xEF)
        {
          if (v63 > 0xF7)
          {
            if (v63 > 0xFB)
            {
              if (v63 > 0xFD)
              {
                if (v63 == 255)
                {
                  v61 = *(_QWORD *)(v39 + 5);
                  v62 = 9;
                }
                else
                {
                  v61 = ((unint64_t)v39[5] << 48) | ((unint64_t)v39[6] << 40) | ((unint64_t)v39[7] << 32) | ((unint64_t)v39[8] << 24) | ((unint64_t)v39[9] << 16) | ((unint64_t)v39[10] << 8) | v39[11];
                  v62 = 8;
                }
              }
              else
              {
                v61 = ((v61 & 1) << 48) | ((unint64_t)v39[5] << 40) | ((unint64_t)v39[6] << 32) | ((unint64_t)v39[7] << 24) | ((unint64_t)v39[8] << 16) | ((unint64_t)v39[9] << 8) | v39[10];
                v62 = 7;
              }
            }
            else
            {
              v61 = ((v61 & 3) << 40) | ((unint64_t)v39[5] << 32) | ((unint64_t)v39[6] << 24) | ((unint64_t)v39[7] << 16) | ((unint64_t)v39[8] << 8) | v39[9];
              v62 = 6;
            }
          }
          else
          {
            v61 = ((v61 & 7) << 32) | ((unint64_t)v39[5] << 24) | ((unint64_t)v39[6] << 16) | ((unint64_t)v39[7] << 8) | v39[8];
            v62 = 5;
          }
        }
        else
        {
          v61 = ((v61 & 0xF) << 24) | ((unint64_t)v39[5] << 16) | ((unint64_t)v39[6] << 8) | v39[7];
          v62 = 4;
        }
      }
      else
      {
        v61 = ((v61 & 0x1F) << 16) | ((unint64_t)v39[5] << 8) | v39[6];
        v62 = 3;
      }
    }
    else
    {
      v61 = v39[5] | ((v61 & 0x3F) << 8);
      v62 = 2;
    }
  }
  else
  {
    v62 = 1;
  }
  *(_QWORD *)buf = v62;
  v64 = *(_DWORD *)(a1 + 804) & (ldb_readVInt16((uint64_t)(v39 + 4), (uint64_t *)buf) >> 5);
  v65 = *(_QWORD *)(a1 + 856);
  v66 = *(_DWORD *)(v65 + 12);
  v67 = v65 + 16 * *(int *)(v65 + 16);
  *(_QWORD *)(v67 + 20) = v61;
  *(_DWORD *)(v67 + 32) = *(_DWORD *)(v67 + 32) & 0xFFFFFFF | ((v64 & 1) << 28);
  *(_DWORD *)(v65 + 12) = v66 | 1;
  if (v74 != v72)
    ++*(_QWORD *)(a1 + 20);
  db_cache_set_offset_hint(*(_QWORD *)(a1 + 928), (uint64_t)value_out, 0, 0, 0);
  db_cache_set_offset_hint(*(_QWORD *)(a1 + 928), (uint64_t)a2, 0, 0, 0);
  page_release(a1, a2, a3, 1u, 0);
  page_release_dirty_compressed(a1, (char *)value_out, v77, a6, v76);
  return 0;
}

uint64_t try_push_left(uint64_t a1, _DWORD *a2, unsigned int a3, unsigned __int8 *a4, int a5, unsigned int a6, size_t __nbyte, unsigned int a8)
{
  int v9;
  uint64_t result;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  char v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  uint64_t v40;
  char *v41;
  unsigned __int8 *v42;
  char *v43;
  unsigned __int8 *v45;
  uint64_t v46;
  BOOL v48;
  unsigned __int8 *v49;
  int v50;
  char *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unsigned __int8 v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  const char *v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  void *v80;
  int v81;
  char *v82;
  int v83;
  char *v84;
  size_t v85;
  char *v86;
  unsigned int v87;
  int v88;
  int v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  unsigned int v93;
  unint64_t v94;
  uint64_t v95;
  unsigned int VInt16;
  int v97;
  void *v98;
  int v99;
  int8x16_t *v100;
  int v101;
  unint64_t v102;
  int v103;
  NSObject *v104;
  os_log_type_t v105;
  char v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  int v115;
  int v116;
  int v117;
  unint64_t v118;
  int v119;
  char *v120;
  char *__src;
  int v122;
  _DWORD *v123;
  char *v124;
  unsigned __int8 *v125;
  unsigned int v126;
  int8x16_t *v127;
  void *value_out;
  uint8_t buf[8];
  __int16 v130;
  int v131;
  uint64_t v132;

  v9 = __nbyte;
  v132 = *MEMORY[0x1E0C80C00];
  v127 = 0;
  value_out = 0;
  result = _page_fetch_with_fd(a1, &value_out, a6, __nbyte, 1, buf, 0xFFFFFFFFLL, 0);
  if ((_DWORD)result)
    return result;
  v17 = value_out;
  if ((*((_BYTE *)value_out + 12) & 0xF0) != 0)
    goto LABEL_4;
  v18 = *((_DWORD *)value_out + 1);
  v19 = *((int *)value_out + 2);
  v20 = v18 - v19;
  if (v9 < 4 * (v18 - (int)v19))
    goto LABEL_4;
  v21 = (char *)a2 + a5;
  v22 = (int)a2[2];
  if ((int)v22 <= a5)
    goto LABEL_43;
  v23 = v21[4];
  if (v21[4] < 0)
  {
    v24 = v21[4];
    if (v24 <= 0xBF)
    {
      v23 = v21[5] | ((v23 & 0x3F) << 8);
      goto LABEL_24;
    }
    if (v24 > 0xDF)
    {
      if (v24 > 0xEF)
      {
        if (v24 > 0xF7)
        {
          if (v24 > 0xFB)
          {
            if (v24 > 0xFD)
            {
              if (v24 == 255)
              {
                v23 = *(_QWORD *)(v21 + 5);
                goto LABEL_24;
              }
              v25 = ((unint64_t)v21[5] << 48) | ((unint64_t)v21[6] << 40) | ((unint64_t)v21[7] << 32) | ((unint64_t)v21[8] << 24) | ((unint64_t)v21[9] << 16) | ((unint64_t)v21[10] << 8);
              v26 = v21[11];
            }
            else
            {
              v25 = ((v23 & 1) << 48) | ((unint64_t)v21[5] << 40) | ((unint64_t)v21[6] << 32) | ((unint64_t)v21[7] << 24) | ((unint64_t)v21[8] << 16) | ((unint64_t)v21[9] << 8);
              v26 = v21[10];
            }
          }
          else
          {
            v25 = ((v23 & 3) << 40) | ((unint64_t)v21[5] << 32) | ((unint64_t)v21[6] << 24) | ((unint64_t)v21[7] << 16) | ((unint64_t)v21[8] << 8);
            v26 = v21[9];
          }
        }
        else
        {
          v25 = ((v23 & 7) << 32) | ((unint64_t)v21[5] << 24) | ((unint64_t)v21[6] << 16) | ((unint64_t)v21[7] << 8);
          v26 = v21[8];
        }
      }
      else
      {
        v25 = ((v23 & 0xF) << 24) | ((unint64_t)v21[5] << 16) | ((unint64_t)v21[6] << 8);
        v26 = v21[7];
      }
    }
    else
    {
      v25 = ((v23 & 0x1F) << 16) | ((unint64_t)v21[5] << 8);
      v26 = v21[6];
    }
    v23 = v25 | v26;
  }
LABEL_24:
  v27 = a4[4];
  if (((char)a4[4] & 0x80000000) == 0)
    goto LABEL_41;
  v28 = a4[4];
  if (v28 <= 0xBF)
  {
    v27 = a4[5] | ((v27 & 0x3F) << 8);
    goto LABEL_41;
  }
  if (v28 > 0xDF)
  {
    if (v28 > 0xEF)
    {
      if (v28 > 0xF7)
      {
        if (v28 > 0xFB)
        {
          if (v28 > 0xFD)
          {
            if (v28 == 255)
            {
              v27 = *(_QWORD *)(a4 + 5);
              goto LABEL_41;
            }
            v29 = ((unint64_t)a4[5] << 48) | ((unint64_t)a4[6] << 40) | ((unint64_t)a4[7] << 32) | ((unint64_t)a4[8] << 24) | ((unint64_t)a4[9] << 16) | ((unint64_t)a4[10] << 8);
            v30 = a4[11];
          }
          else
          {
            v29 = ((v27 & 1) << 48) | ((unint64_t)a4[5] << 40) | ((unint64_t)a4[6] << 32) | ((unint64_t)a4[7] << 24) | ((unint64_t)a4[8] << 16) | ((unint64_t)a4[9] << 8);
            v30 = a4[10];
          }
        }
        else
        {
          v29 = ((v27 & 3) << 40) | ((unint64_t)a4[5] << 32) | ((unint64_t)a4[6] << 24) | ((unint64_t)a4[7] << 16) | ((unint64_t)a4[8] << 8);
          v30 = a4[9];
        }
      }
      else
      {
        v29 = ((v27 & 7) << 32) | ((unint64_t)a4[5] << 24) | ((unint64_t)a4[6] << 16) | ((unint64_t)a4[7] << 8);
        v30 = a4[8];
      }
    }
    else
    {
      v29 = ((v27 & 0xF) << 24) | ((unint64_t)a4[5] << 16) | ((unint64_t)a4[6] << 8);
      v30 = a4[7];
    }
  }
  else
  {
    v29 = ((v27 & 0x1F) << 16) | ((unint64_t)a4[5] << 8);
    v30 = a4[6];
  }
  v27 = v29 | v30;
LABEL_41:
  if (v23 == v27)
  {
    v31 = 0;
    v32 = *(_DWORD *)a4 - *(_DWORD *)v21;
    v33 = 1;
    goto LABEL_44;
  }
LABEL_43:
  v33 = 0;
  v32 = *(_DWORD *)a4 + 4;
  v31 = 1;
LABEL_44:
  if (!v32 || v32 >= v20)
    goto LABEL_4;
  if ((int)v19 >= v18 / 4 || (v20 >= 0 ? (v34 = v18 - v19) : (v34 = v20 + 1), v35 = (v34 >> 1) - v32, v32 >= v35))
  {
    v36 = a2[1] / 10;
    if (v36 >= v20)
      v37 = v18 - v19;
    else
      v37 = a2[1] / 10;
    if (v32 >= v36)
      v35 = v32;
    else
      v35 = v37;
  }
  if ((int)v22 < 21)
  {
    v74 = __si_assert_copy_extra_2151(0, -1);
    v75 = v74;
    v76 = "";
    if (v74)
      v76 = v74;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 4185, "copy_end < end", v76);
    free(v75);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v38 = 0;
  v39 = (char *)a2 + v22;
  v40 = (a2[5] + 4);
  v41 = (char *)a2 + v40 + 20;
  v42 = (unsigned __int8 *)(a2 + 5);
  v43 = (char *)(a2 + 5);
  if (v41 < (char *)a2 + v22 && v35 >= 1)
  {
    if ((v33 & 1) != 0)
    {
      if (v41 < v21)
      {
        v38 = a2[5] + 4;
        v42 = (unsigned __int8 *)(a2 + 5);
        v43 = (char *)a2 + v40 + 20;
        goto LABEL_71;
      }
      v38 = a2[5] + 4;
      v42 = (unsigned __int8 *)(a2 + 5);
      v43 = (char *)a2 + v40 + 20;
      if ((int)v40 + v32 < v20)
      {
LABEL_71:
        while (1)
        {
          v45 = (unsigned __int8 *)v43;
          v46 = (*(_DWORD *)v43 + 4);
          v43 += v46;
          if (v43 >= v39 || v38 >= v35)
            break;
          v38 += v46;
          v48 = v43 < v21 || v38 + v32 < v20;
          v42 = v45;
          if (!v48)
            goto LABEL_80;
        }
        v43 = (char *)v45;
      }
    }
    else
    {
      v38 = 0;
      v43 = (char *)(a2 + 5);
      do
      {
        v42 = (unsigned __int8 *)v43;
        v43 = v41;
        v38 += v40;
        v40 = (*(_DWORD *)v41 + 4);
        v41 += v40;
      }
      while (v41 < v39 && v38 < v35);
    }
  }
LABEL_80:
  if (v38 < v35 && v38 < v32 && v43 <= v21)
    goto LABEL_4;
  if (v38 >= v20)
  {
    v38 = v38 - *(_DWORD *)v42 - 4;
    if (v38 >= v20)
      goto LABEL_4;
    if (v38 < v32 && v42 <= (unsigned __int8 *)v21)
      goto LABEL_4;
    v126 = a8;
    v55 = (unsigned __int8 *)(a2 + 5);
    do
    {
      v49 = v55;
      v55 += (*(_DWORD *)v55 + 4);
    }
    while (v55 < v42);
    if (v49 == v42)
      goto LABEL_4;
  }
  else
  {
    v126 = a8;
    v49 = v42;
    v42 = (unsigned __int8 *)v43;
  }
  if (v38 + (int)v19 >= v18)
    goto LABEL_4;
  if (v42 > (unsigned __int8 *)v21)
  {
    if (v38 + v32 <= v20)
    {
      v117 = v38 + v32;
      v119 = (_DWORD)a2 + v22;
      v123 = (_DWORD *)((char *)a2 + a5);
      v50 = a5 - 20;
      v122 = v31;
      memcpy((char *)value_out + v19, a2 + 5, a5 - 20);
      v51 = (char *)value_out;
      v52 = *((int *)value_out + 2) + (uint64_t)(a5 - 20);
      *((_DWORD *)value_out + 2) = v52;
      memcpy(&v51[v52], a4, (*(_DWORD *)a4 + 4));
      *((_DWORD *)value_out + 2) += *(_DWORD *)a4 + 4;
      if ((v122 & 1) != 0)
      {
        v53 = (unsigned __int8 *)a2 + a5;
      }
      else
      {
        v57 = (*v123 + 4);
        v50 += v57;
        v53 = (unsigned __int8 *)v123 + v57;
      }
      v125 = v53;
      v113 = v50;
      if (v53 == v42)
      {
        v58 = (uint64_t)(a4 + 4);
        v59 = a4[4];
        if ((char)a4[4] < 0)
        {
          v65 = a4[4];
          if (v65 <= 0xBF)
          {
            v61 = a4[4];
            v62 = a4[5];
            goto LABEL_116;
          }
          if (v65 <= 0xDF)
          {
            v66 = ((v59 & 0x1F) << 16) | ((unint64_t)a4[5] << 8);
            v67 = a4[6];
            goto LABEL_123;
          }
          if (v65 <= 0xEF)
          {
            v68 = ((v59 & 0xF) << 24) | ((unint64_t)a4[5] << 16) | ((unint64_t)a4[6] << 8);
            v69 = a4[7];
            goto LABEL_130;
          }
          if (v65 <= 0xF7)
          {
            v70 = ((v59 & 7) << 32) | ((unint64_t)a4[5] << 24) | ((unint64_t)a4[6] << 16) | ((unint64_t)a4[7] << 8);
            v71 = a4[8];
            goto LABEL_137;
          }
          if (v65 <= 0xFB)
          {
            v72 = ((v59 & 3) << 40) | ((unint64_t)a4[5] << 32) | ((unint64_t)a4[6] << 24) | ((unint64_t)a4[7] << 16) | ((unint64_t)a4[8] << 8);
            v73 = a4[9];
            goto LABEL_148;
          }
          if (v65 <= 0xFD)
          {
            v77 = ((v59 & 1) << 48) | ((unint64_t)a4[5] << 40) | ((unint64_t)a4[6] << 32) | ((unint64_t)a4[7] << 24) | ((unint64_t)a4[8] << 16) | ((unint64_t)a4[9] << 8);
            v78 = a4[10];
            goto LABEL_156;
          }
          if (v65 == 255)
          {
            v59 = *(_QWORD *)(a4 + 5);
            goto LABEL_181;
          }
          v94 = ((unint64_t)a4[5] << 48) | ((unint64_t)a4[6] << 40) | ((unint64_t)a4[7] << 32) | ((unint64_t)a4[8] << 24) | ((unint64_t)a4[9] << 16) | ((unint64_t)a4[10] << 8);
          v95 = a4[11];
LABEL_186:
          v59 = v94 | v95;
          v64 = 8;
          goto LABEL_187;
        }
      }
      else
      {
        *(_QWORD *)buf = 0;
        v58 = (uint64_t)(v49 + 4);
        v59 = v49[4];
        if ((char)v49[4] < 0)
        {
          v60 = v49[4];
          if (v60 <= 0xBF)
          {
            v61 = v49[4];
            v62 = v49[5];
LABEL_116:
            v59 = v62 & 0xFFFFFFFFFFFFC0FFLL | ((unint64_t)(v61 & 0x3F) << 8);
            v64 = 2;
            goto LABEL_187;
          }
          if (v60 <= 0xDF)
          {
            v66 = ((v59 & 0x1F) << 16) | ((unint64_t)v49[5] << 8);
            v67 = v49[6];
LABEL_123:
            v59 = v66 | v67;
            v64 = 3;
            goto LABEL_187;
          }
          if (v60 <= 0xEF)
          {
            v68 = ((v59 & 0xF) << 24) | ((unint64_t)v49[5] << 16) | ((unint64_t)v49[6] << 8);
            v69 = v49[7];
LABEL_130:
            v59 = v68 | v69;
            v64 = 4;
            goto LABEL_187;
          }
          if (v60 <= 0xF7)
          {
            v70 = ((v59 & 7) << 32) | ((unint64_t)v49[5] << 24) | ((unint64_t)v49[6] << 16) | ((unint64_t)v49[7] << 8);
            v71 = v49[8];
LABEL_137:
            v59 = v70 | v71;
            v64 = 5;
            goto LABEL_187;
          }
          if (v60 <= 0xFB)
          {
            v72 = ((v59 & 3) << 40) | ((unint64_t)v49[5] << 32) | ((unint64_t)v49[6] << 24) | ((unint64_t)v49[7] << 16) | ((unint64_t)v49[8] << 8);
            v73 = v49[9];
LABEL_148:
            v59 = v72 | v73;
            v64 = 6;
            goto LABEL_187;
          }
          if (v60 <= 0xFD)
          {
            v77 = ((v59 & 1) << 48) | ((unint64_t)v49[5] << 40) | ((unint64_t)v49[6] << 32) | ((unint64_t)v49[7] << 24) | ((unint64_t)v49[8] << 16) | ((unint64_t)v49[9] << 8);
            v78 = v49[10];
LABEL_156:
            v59 = v77 | v78;
            v64 = 7;
            goto LABEL_187;
          }
          if (v60 == 255)
          {
            v59 = *(_QWORD *)(v49 + 5);
LABEL_181:
            v64 = 9;
            goto LABEL_187;
          }
          v94 = ((unint64_t)v49[5] << 48) | ((unint64_t)v49[6] << 40) | ((unint64_t)v49[7] << 32) | ((unint64_t)v49[8] << 24) | ((unint64_t)v49[9] << 16) | ((unint64_t)v49[10] << 8);
          v95 = v49[11];
          goto LABEL_186;
        }
      }
      v64 = 1;
LABEL_187:
      *(_QWORD *)buf = v64;
      VInt16 = ldb_readVInt16(v58, (uint64_t *)buf);
      v97 = *(_DWORD *)(a1 + 804);
      memcpy((char *)value_out + *((int *)value_out + 2), v125, (int)v42 - (int)v125);
      v98 = value_out;
      *((_DWORD *)value_out + 2) += (_DWORD)v42 - (_DWORD)v125;
      v99 = page_compress(a1, (size_t)v98, &v127, 0, (*(_DWORD *)(a1 + 804) & 2) != 0);
      v81 = v117;
      if (v99)
      {
LABEL_188:
        v100 = v127;
        v17 = value_out;
        *((_DWORD *)value_out + 2) -= v81;
        if (v100)
        {
          free(v100);
          v17 = value_out;
        }
        goto LABEL_4;
      }
      v89 = v97 & (VInt16 >> 5) & 1;
      v101 = v113 + (_DWORD)v42 - (_DWORD)v125;
      memmove(a2 + 5, v42, v119 - (int)v42);
      a2[2] -= v101;
      if (v101 != v38)
      {
        v116 = v89;
        v102 = v59;
        v103 = *__error();
        v104 = _SILogForLogForCategory(7);
        v105 = 2 * (dword_1EF19FCA8 < 4);
        if (os_log_type_enabled(v104, v105))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v101;
          v130 = 1024;
          v131 = v38;
          _os_log_impl(&dword_1B8270000, v104, v105, "try_push_left: issshhhn't dat strange? decrease %d num_bytes %d\n", buf, 0xEu);
        }
        *__error() = v103;
        v87 = v126;
        v90 = v122;
        v59 = v102;
        v89 = v116;
        goto LABEL_201;
      }
      v87 = v126;
      goto LABEL_200;
    }
LABEL_4:
    page_release(a1, v17, a6, 0, 0);
    return 28;
  }
  if (v32 + (int)v22 - v38 >= a2[1])
    goto LABEL_4;
  *(_QWORD *)buf = 0;
  v118 = v49[4];
  v120 = (char *)a2 + v22;
  v122 = v31;
  v124 = (char *)a2 + a5;
  __src = (char *)(a2 + 5);
  if ((char)v49[4] < 0)
  {
    v63 = v49[4];
    if (v63 > 0xBF)
    {
      if (v63 > 0xDF)
      {
        if (v63 > 0xEF)
        {
          if (v63 > 0xF7)
          {
            if (v63 > 0xFB)
            {
              if (v63 > 0xFD)
              {
                if (v63 == 255)
                {
                  v118 = *(_QWORD *)(v49 + 5);
                  v56 = 9;
                }
                else
                {
                  v118 = ((unint64_t)v49[5] << 48) | ((unint64_t)v49[6] << 40) | ((unint64_t)v49[7] << 32) | ((unint64_t)v49[8] << 24) | ((unint64_t)v49[9] << 16) | ((unint64_t)v49[10] << 8) | v49[11];
                  v56 = 8;
                }
              }
              else
              {
                v118 = ((v118 & 1) << 48) | ((unint64_t)v49[5] << 40) | ((unint64_t)v49[6] << 32) | ((unint64_t)v49[7] << 24) | ((unint64_t)v49[8] << 16) | ((unint64_t)v49[9] << 8) | v49[10];
                v56 = 7;
              }
            }
            else
            {
              v118 = ((v118 & 3) << 40) | ((unint64_t)v49[5] << 32) | ((unint64_t)v49[6] << 24) | ((unint64_t)v49[7] << 16) | ((unint64_t)v49[8] << 8) | v49[9];
              v56 = 6;
            }
          }
          else
          {
            v118 = ((v118 & 7) << 32) | ((unint64_t)v49[5] << 24) | ((unint64_t)v49[6] << 16) | ((unint64_t)v49[7] << 8) | v49[8];
            v56 = 5;
          }
        }
        else
        {
          v118 = ((v118 & 0xF) << 24) | ((unint64_t)v49[5] << 16) | ((unint64_t)v49[6] << 8) | v49[7];
          v56 = 4;
        }
      }
      else
      {
        v118 = ((v118 & 0x1F) << 16) | ((unint64_t)v49[5] << 8) | v49[6];
        v56 = 3;
      }
    }
    else
    {
      v118 = v49[5] | ((v118 & 0x3F) << 8);
      v56 = 2;
    }
  }
  else
  {
    v56 = 1;
  }
  *(_QWORD *)buf = v56;
  v114 = ldb_readVInt16((uint64_t)(v49 + 4), (uint64_t *)buf);
  v79 = *(_DWORD *)(a1 + 804);
  memcpy((char *)value_out + *((int *)value_out + 2), __src, v38);
  v80 = value_out;
  *((_DWORD *)value_out + 2) += v38;
  if (page_compress(a1, (size_t)v80, &v127, 0, (*(_DWORD *)(a1 + 804) & 2) != 0))
  {
    v81 = v38;
    goto LABEL_188;
  }
  v115 = v79 & (v114 >> 5) & 1;
  memmove(__src, v42, v124 - (char *)v42);
  v82 = &__src[v124 - (char *)v42];
  v83 = *(_DWORD *)v124;
  memcpy(v82, a4, (*(_DWORD *)a4 + 4));
  if ((v122 & 1) != 0)
  {
    v84 = &v82[*(_DWORD *)v82 + 4];
    v85 = v120 - v124;
    v86 = v124;
  }
  else
  {
    v86 = &v124[v83 + 4];
    v84 = &v82[*(_DWORD *)v82 + 4];
    v85 = v120 - v86;
  }
  memmove(v84, v86, v85);
  v87 = v126;
  v88 = a2[2] - v38 + v32;
  a2[2] = v88;
  v89 = v115;
  if (&v82[*(_DWORD *)v82 + 4] >= (char *)a2 + v88)
  {
    v91 = v82[4];
    v59 = v118;
    if (v82[4] < 0)
    {
      v93 = v82[4];
      if (v93 > 0xBF)
      {
        if (v93 > 0xDF)
        {
          if (v93 > 0xEF)
          {
            if (v93 > 0xF7)
            {
              if (v93 > 0xFB)
              {
                if (v93 > 0xFD)
                {
                  if (v93 == 255)
                  {
                    v91 = *(_QWORD *)(v82 + 5);
                    v92 = 9;
                  }
                  else
                  {
                    v91 = ((unint64_t)v82[5] << 48) | ((unint64_t)v82[6] << 40) | ((unint64_t)v82[7] << 32) | ((unint64_t)v82[8] << 24) | ((unint64_t)v82[9] << 16) | ((unint64_t)v82[10] << 8) | v82[11];
                    v92 = 8;
                  }
                }
                else
                {
                  v91 = ((v91 & 1) << 48) | ((unint64_t)v82[5] << 40) | ((unint64_t)v82[6] << 32) | ((unint64_t)v82[7] << 24) | ((unint64_t)v82[8] << 16) | ((unint64_t)v82[9] << 8) | v82[10];
                  v92 = 7;
                }
              }
              else
              {
                v91 = ((v91 & 3) << 40) | ((unint64_t)v82[5] << 32) | ((unint64_t)v82[6] << 24) | ((unint64_t)v82[7] << 16) | ((unint64_t)v82[8] << 8) | v82[9];
                v92 = 6;
              }
            }
            else
            {
              v91 = ((v91 & 7) << 32) | ((unint64_t)v82[5] << 24) | ((unint64_t)v82[6] << 16) | ((unint64_t)v82[7] << 8) | v82[8];
              v92 = 5;
            }
          }
          else
          {
            v91 = ((v91 & 0xF) << 24) | ((unint64_t)v82[5] << 16) | ((unint64_t)v82[6] << 8) | v82[7];
            v92 = 4;
          }
        }
        else
        {
          v91 = ((v91 & 0x1F) << 16) | ((unint64_t)v82[5] << 8) | v82[6];
          v92 = 3;
        }
        v59 = v118;
        v89 = v115;
      }
      else
      {
        v91 = v82[5] | ((v91 & 0x3F) << 8);
        v92 = 2;
      }
    }
    else
    {
      v92 = 1;
    }
    *(_QWORD *)buf = v92;
    v106 = *(_DWORD *)(a1 + 804) & (ldb_readVInt16((uint64_t)(v82 + 4), (uint64_t *)buf) >> 5);
    v107 = *(_QWORD *)(a1 + 856);
    v108 = *(_DWORD *)(v107 + 12);
    v109 = v107 + 16 * *(int *)(v107 + 16);
    *(_QWORD *)(v109 + 20) = v91;
    *(_DWORD *)(v109 + 32) = *(_DWORD *)(v109 + 32) & 0xFFFFFFF | ((v106 & 1) << 28);
    *(_DWORD *)(v107 + 12) = v108 | 1;
    v87 = v126;
LABEL_200:
    v90 = v122;
    goto LABEL_201;
  }
  v90 = v122;
  v59 = v118;
LABEL_201:
  v110 = *(_QWORD *)(a1 + 856);
  v111 = *(_DWORD *)(v110 + 12);
  v112 = v110 + 16 * *(int *)(v110 + 16);
  *(_QWORD *)(v112 + 4) = v59;
  *(_DWORD *)(v112 + 16) = *(_DWORD *)(v112 + 16) & 0xFFFFFFF | (v89 << 28);
  *(_DWORD *)(v110 + 12) = v111 | 1;
  if (v90)
    ++*(_QWORD *)(a1 + 20);
  db_cache_set_offset_hint(*(_QWORD *)(a1 + 928), (uint64_t)value_out, 0, 0, 0);
  db_cache_set_offset_hint(*(_QWORD *)(a1 + 928), (uint64_t)a2, 0, 0, 0);
  page_release(a1, a2, a3, 1u, 0);
  page_release_dirty_compressed(a1, (char *)value_out, v127, a6, v87);
  return 0;
}

uint64_t _page_update_obj(uint64_t a1, uint64_t a2, unsigned int a3, size_t a4, __int16 a5)
{
  char v5;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t slot_for_oid_and_type;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int8 *v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  _DWORD *v41;
  int v42;
  int *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  __n128 *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  char *v54;
  char *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unsigned int *v62;
  unsigned int v63;
  __n128 *v64;
  unsigned __int32 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  int v71;
  size_t v72;
  _DWORD *v73;
  char *v74;
  char *v75;
  const char *v76;
  int v77;
  NSObject *v78;
  os_log_type_t v79;
  int v80;
  NSObject *v81;
  char *v82;
  char *v83;
  const char *v84;
  uint64_t v85;
  int v86;
  NSObject *v87;
  char *v88;
  char *v89;
  const char *v90;
  int v91;
  NSObject *v92;
  char *v93;
  const char *v94;
  _DWORD *__src;
  int v96;
  __n128 v97;
  int *v98;
  int8x16_t *v99;
  __int32 v100;
  char *v101;
  char *v102;
  void *__dst;
  void *value_out;
  uint8_t buf[4];
  const char *v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int64_t v110;
  uint64_t v111;

  v5 = a5;
  v111 = *MEMORY[0x1E0C80C00];
  __dst = 0;
  value_out = 0;
  v101 = 0;
  v102 = 0;
  v100 = 0;
  v99 = 0;
  v10 = a5 & 0x4000;
  v11 = _page_fetch_with_fd(a1, &value_out, a3, a4, v10, buf, 0xFFFFFFFFLL, 0);
  if ((_DWORD)v11)
    return v11;
  if ((*((_BYTE *)value_out + 12) & 0xF0) != 0)
  {
    v86 = *__error();
    v87 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v106 = "_page_update_obj";
      v107 = 1024;
      v108 = 5381;
      v109 = 1024;
      LODWORD(v110) = a3;
      _os_log_error_impl(&dword_1B8270000, v87, OS_LOG_TYPE_ERROR, "%s:%d: page_update_obj: ERR: tried to read attr name table data! pgnum 0x%x\n", buf, 0x18u);
    }
    *__error() = v86;
    v88 = __si_assert_copy_extra_2151(0, -1);
    v89 = v88;
    v90 = "";
    if (v88)
      v90 = v88;
    __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5382, v90);
    goto LABEL_146;
  }
  v12 = a2 + 4;
  v13 = *(unsigned __int8 *)(a2 + 4);
  if (*(char *)(a2 + 4) < 0)
  {
    v15 = *(unsigned __int8 *)(a2 + 4);
    if (v15 > 0xBF)
    {
      if (v15 > 0xDF)
      {
        if (v15 > 0xEF)
        {
          if (v15 > 0xF7)
          {
            if (v15 > 0xFB)
            {
              if (v15 > 0xFD)
              {
                if (v15 == 255)
                {
                  v13 = *(_QWORD *)(a2 + 5);
                  v14 = 9;
                }
                else
                {
                  v13 = ((unint64_t)*(unsigned __int8 *)(a2 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 10) << 8) | *(unsigned __int8 *)(a2 + 11);
                  v14 = 8;
                }
              }
              else
              {
                v13 = ((v13 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 9) << 8) | *(unsigned __int8 *)(a2 + 10);
                v14 = 7;
              }
            }
            else
            {
              v13 = ((v13 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 8) << 8) | *(unsigned __int8 *)(a2 + 9);
              v14 = 6;
            }
          }
          else
          {
            v13 = ((v13 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 7) << 8) | *(unsigned __int8 *)(a2 + 8);
            v14 = 5;
          }
        }
        else
        {
          v13 = ((v13 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 6) << 8) | *(unsigned __int8 *)(a2 + 7);
          v14 = 4;
        }
      }
      else
      {
        v13 = ((v13 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 5) << 8) | *(unsigned __int8 *)(a2 + 6);
        v14 = 3;
      }
    }
    else
    {
      v13 = *(unsigned __int8 *)(a2 + 5) | ((v13 & 0x3F) << 8);
      v14 = 2;
    }
  }
  else
  {
    v14 = 1;
  }
  v16 = *(unsigned __int8 *)(v12 + v14);
  if (*(char *)(v12 + v14) < 0)
  {
    if (v16 >= 0xC0)
    {
      if (v16 >= 0xE0)
      {
        v74 = __si_assert_copy_extra_2151(0, -1);
        v75 = v74;
        v76 = "";
        if (v74)
          v76 = v74;
        __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v76);
        free(v75);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v17 = v14 + 2;
    }
    else
    {
      v17 = v14 + 1;
    }
    v16 = *(unsigned __int8 *)(v12 + v17);
  }
  v18 = *(_DWORD *)(a1 + 804) & (v16 >> 5) & 1;
  v102 = (char *)value_out + *((int *)value_out + 2);
  slot_for_oid_and_type = find_slot_for_oid_and_type(a1, (uint64_t)value_out, v13, v18, (unint64_t *)&__dst, 0, 1);
  if ((_DWORD)slot_for_oid_and_type)
  {
    v11 = slot_for_oid_and_type;
    page_release(a1, value_out, a3, 0, 0);
    return v11;
  }
  v98 = (int *)a2;
  if ((v5 & 2) != 0)
  {
    v20 = (char *)__dst + 4;
    if (*((char *)__dst + 4) < 0)
    {
      v22 = *((unsigned __int8 *)__dst + 4);
      if (v22 >= 0xC0)
      {
        if (v22 >= 0xE0)
        {
          if (v22 >= 0xF0)
          {
            if (v22 >= 0xF8)
            {
              if (v22 >= 0xFC)
              {
                if (v22 >= 0xFE)
                {
                  v69 = v22 == 255;
                  v21 = 8;
                  if (v69)
                    v21 = 9;
                }
                else
                {
                  v21 = 7;
                }
              }
              else
              {
                v21 = 6;
              }
            }
            else
            {
              v21 = 5;
            }
          }
          else
          {
            v21 = 4;
          }
        }
        else
        {
          v21 = 3;
        }
      }
      else
      {
        v21 = 2;
      }
    }
    else
    {
      v21 = 1;
    }
    if (v20[v21] < 0)
    {
      v24 = v20[v21];
      if (v24 >= 0xC0)
      {
        if (v24 >= 0xE0)
        {
          v82 = __si_assert_copy_extra_2151(0, -1);
          v83 = v82;
          v84 = "";
          if (v82)
            v84 = v82;
          __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v84);
          free(v83);
          if (!__valid_fs(-1))
          {
            v85 = 3072;
LABEL_135:
            *(_DWORD *)v85 = -559038737;
            abort();
          }
LABEL_133:
          v85 = 2989;
          goto LABEL_135;
        }
        v23 = 3;
      }
      else
      {
        v23 = 2;
      }
    }
    else
    {
      v23 = 1;
    }
    v25 = v21 + v23;
    v26 = v20[v25];
    if ((v20[v25] & 0x80000000) == 0)
      goto LABEL_68;
    v27 = v25 + 1;
    v28 = v20[v25];
    if (v28 > 0xBF)
    {
      if (v28 > 0xDF)
      {
        if (v28 > 0xEF)
        {
          if (v28 > 0xF7)
          {
            if (v28 > 0xFB)
            {
              if (v28 > 0xFD)
              {
                if (v28 == 255)
                {
                  v26 = *(_QWORD *)&v20[v27];
                  goto LABEL_68;
                }
                v39 = (unint64_t)v20[v27] << 48;
                v40 = (unsigned __int8 *)&v20[v25];
                v31 = v39 | ((unint64_t)v40[2] << 40) | ((unint64_t)v40[3] << 32) | ((unint64_t)v40[4] << 24) | ((unint64_t)v40[5] << 16) | ((unint64_t)v40[6] << 8);
                v32 = v40[7];
              }
              else
              {
                v37 = ((v26 & 1) << 48) | ((unint64_t)v20[v27] << 40);
                v38 = (unsigned __int8 *)&v20[v25];
                v31 = v37 | ((unint64_t)v38[2] << 32) | ((unint64_t)v38[3] << 24) | ((unint64_t)v38[4] << 16) | ((unint64_t)v38[5] << 8);
                v32 = v38[6];
              }
            }
            else
            {
              v35 = ((v26 & 3) << 40) | ((unint64_t)v20[v27] << 32);
              v36 = (unsigned __int8 *)&v20[v25];
              v31 = v35 | ((unint64_t)v36[2] << 24) | ((unint64_t)v36[3] << 16) | ((unint64_t)v36[4] << 8);
              v32 = v36[5];
            }
          }
          else
          {
            v33 = ((v26 & 7) << 32) | ((unint64_t)v20[v27] << 24);
            v34 = (unsigned __int8 *)&v20[v25];
            v31 = v33 | ((unint64_t)v34[2] << 16) | ((unint64_t)v34[3] << 8);
            v32 = v34[4];
          }
        }
        else
        {
          v29 = ((v26 & 0xF) << 24) | ((unint64_t)v20[v27] << 16);
          v30 = &v20[v25];
          v31 = v29 | ((unint64_t)v30[2] << 8);
          v32 = v30[3];
        }
        v26 = v31 | v32;
        goto LABEL_68;
      }
      v26 = ((v26 & 0x1F) << 16) | ((unint64_t)v20[v27] << 8) | v20[v25 + 2];
    }
    else
    {
      v26 = v20[v27] | ((v26 & 0x3F) << 8);
    }
LABEL_68:
    ldb_update_indexid(&v98, v26);
  }
  v41 = value_out;
  v42 = *((_DWORD *)value_out + 3);
  if ((v42 & 8) != 0)
  {
    v91 = *__error();
    v92 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v106 = "_page_update_obj";
      v107 = 1024;
      v108 = 5426;
      v109 = 1024;
      LODWORD(v110) = a3;
      _os_log_error_impl(&dword_1B8270000, v92, OS_LOG_TYPE_ERROR, "%s:%d: page_update_obj: ERR: page is still compressed! pgnum 0x%x\n", buf, 0x18u);
    }
    *__error() = v91;
    v93 = __si_assert_copy_extra_2151(0, -1);
    v89 = v93;
    v94 = "";
    if (v93)
      v94 = v93;
    __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5427, v94);
LABEL_146:
    free(v89);
    goto LABEL_133;
  }
  v43 = v98;
  v44 = *v98;
  if ((int)a4 - 20 <= (unint64_t)(*v98 + 4))
  {
    v45 = test_compress_obj(a1, a4, v98);
    v41 = value_out;
    if ((_DWORD)v45)
    {
      v11 = v45;
      page_release(a1, value_out, a3, 0, 0);
      goto LABEL_90;
    }
    v42 = *((_DWORD *)value_out + 3) | 4;
    *((_DWORD *)value_out + 3) = v42;
    v44 = *v43;
  }
  v46 = v44 - *(_DWORD *)__dst;
  v47 = v41[1];
  v48 = v41[2] + v46;
  if (v48 > v47)
  {
    if ((v42 & 0xC) != 0)
    {
      if (a3)
      {
        v49 = *(__n128 **)(a1 + 928);
        v50 = v49[13].n128_u32[3];
        if ((int)v50 < 1)
        {
LABEL_81:
          v52 = &v49[14].n128_u32[1];
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 + 1, v52));
        }
        else
        {
          v51 = 0;
          while (v49[15].n128_u32[v51 + 3] != a3)
          {
            if (v50 == ++v51)
              goto LABEL_81;
          }
          v62 = &v49[13].n128_u32[2];
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 + 1, v62));
          v64 = &v49[3 * v51];
          v65 = v64[18].n128_u32[0];
          v97 = v64[17];
          db_cache_mru(v49, v51);
          if (v65)
            v69 = v97.n128_u64[1] == 0;
          else
            v69 = 0;
          if (v69
            || (*(_BYTE *)(v97.n128_u64[0] + 12) & 4) == 0
            || *(_DWORD *)(v97.n128_u64[0] + 4) <= *(_DWORD *)(v97.n128_u64[0] + 16))
          {
            v70 = *((_DWORD *)value_out + 2);
            v43 = v98;
            v71 = (*(_BYTE *)(a1 + 804) & 2) != 0 ? 114688 : 196608;
            if (v70 + *v98 + 4 <= v71
              && !page_resize(a1, &value_out, 0, v70 + v46, (unint64_t *)&__dst, v66, v67, v68, (uint64_t)&v102))
            {
              v72 = (*(_DWORD *)__dst + 4);
              v54 = (char *)__dst + v72;
              v101 = (char *)__dst + v72;
              if ((char *)__dst + v72 <= v102)
              {
                v96 = v47;
                v73 = malloc_type_malloc(v72, 0xFE3BC7B1uLL);
                if (v73)
                {
                  __src = v73;
                  memcpy(v73, __dst, (*(_DWORD *)__dst + 4));
                  v55 = v102;
LABEL_86:
                  memmove(&v54[v46], v54, v55 - v54);
                  memcpy(__dst, v43, (*v43 + 4));
                  v56 = value_out;
                  *((_DWORD *)value_out + 2) += v46;
                  if (v48 > v96)
                  {
                    if (page_compress(a1, (size_t)v56, &v99, &v100, (*(_DWORD *)(a1 + 804) & 2) != 0))
                    {
                      memmove(v54, &v54[v46], v102 - v54);
                      memcpy(__dst, __src, (*__src + 4));
                      *((_DWORD *)value_out + 2) -= v46;
                      free(__src);
                      goto LABEL_89;
                    }
                    page_resize(a1, &value_out, 0, v100, (unint64_t *)&__dst, v57, v58, v59, (uint64_t)&v102);
                    v56 = value_out;
                  }
                  set_offset_hint(a1, (uint64_t)v56, (uint64_t)__dst);
                  if (dword_1EF19FCA8 >= 5)
                  {
                    v80 = *__error();
                    v81 = _SILogForLogForCategory(7);
                    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 136315394;
                      v106 = (const char *)(a1 + 324);
                      v107 = 1024;
                      v108 = a3;
                      _os_log_impl(&dword_1B8270000, v81, OS_LOG_TYPE_DEFAULT, "%s : update pgnum %d\n", buf, 0x12u);
                    }
                    *__error() = v80;
                    v60 = __src;
                    if (!__src)
                      goto LABEL_96;
                  }
                  else
                  {
                    v60 = __src;
                    if (!__src)
                    {
LABEL_96:
                      page_release_dirty_compressed(a1, (char *)value_out, v99, a3, v10);
                      if (v43 != (int *)a2)
                        free(v43);
                      return 0;
                    }
                  }
                  free(v60);
                  goto LABEL_96;
                }
              }
              goto LABEL_120;
            }
          }
        }
      }
      v43 = v98;
    }
LABEL_89:
    page_release(a1, value_out, a3, 0, 0);
    v11 = page_split(a1, (char *)v43, a3, a4, v10);
LABEL_90:
    if (v43 != (int *)a2)
      free(v43);
    return v11;
  }
  v96 = v41[1];
  v54 = (char *)__dst + (*(_DWORD *)__dst + 4);
  v101 = v54;
  v55 = v102;
  if (v54 <= v102)
  {
    __src = 0;
    goto LABEL_86;
  }
LABEL_120:
  v77 = *__error();
  v78 = _SILogForLogForCategory(7);
  v79 = 2 * (dword_1EF19FCA8 < 4);
  if (os_log_type_enabled(v78, v79))
  {
    *(_DWORD *)buf = 136315650;
    v106 = (const char *)(a1 + 324);
    v107 = 1024;
    v108 = a3;
    v109 = 2048;
    v110 = (_BYTE *)__dst - (_BYTE *)value_out;
    _os_log_impl(&dword_1B8270000, v78, v79, "%s : page_update_obj: ERR: page at num 0x%x has a bad object pgnum %p\n", buf, 0x1Cu);
  }
  *__error() = v77;
  if (v43 != (int *)a2)
    free(v43);
  page_release(a1, value_out, a3, 0, 0);
  return 22;
}

uint64_t map_change_pgnum(uint64_t a1, int a2, int a3)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t result;
  int v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = *(int **)(a1 + 856);
  v6 = v5[4];
  v7 = v5[2];
  if ((int)v6 >= (int)v7 || v5[4 * v6 + 7] != a2)
  {
    if ((int)v7 < 1)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      v8 = v5 + 7;
      while (1)
      {
        v9 = *v8;
        v8 += 4;
        if (v9 == a2)
          break;
        if (v7 == ++v6)
          goto LABEL_11;
      }
    }
  }
  if (v6 >= v7)
  {
LABEL_11:
    v11 = *__error();
    v12 = _SILogForLogForCategory(7);
    v13 = 2 * (dword_1EF19FCA8 < 4);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = 136315394;
      v15 = a1 + 324;
      v16 = 1024;
      v17 = a2;
      _os_log_impl(&dword_1B8270000, v12, v13, "%s : ERR: map_change_pgnum: BAD NEWS! pgnum 0x%x not found\n", (uint8_t *)&v14, 0x12u);
    }
    *__error() = v11;
    return 22;
  }
  else
  {
    result = 0;
    v5[4 * v6 + 7] = a3;
    v5[3] |= 1u;
  }
  return result;
}

uint64_t __page_release_block_invoke(uint64_t a1, uint64_t a2)
{
  return _flush_cache_entry(*(_QWORD *)(a1 + 32), 0, a2, 0);
}

void __sdb_string_zone_once_f_block_invoke()
{
  string_table_zone = (uint64_t)malloc_create_zone(0x10000uLL, 0);
  malloc_set_zone_name((malloc_zone_t *)string_table_zone, "sdb_string_table_zone");
}

malloc_zone_t *__sdb_map_zone_once_f_block_invoke()
{
  malloc_zone_t *result;

  result = malloc_default_zone();
  sdb_map_zone = (uint64_t)result;
  return result;
}

uint64_t update_db_header(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  int v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  NSObject *v21;
  unsigned int v22;
  int v23;
  NSObject *v24;
  int v25;
  NSObject *v26;
  int v28;
  NSObject *v29;
  unsigned int v30;
  int v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  _BYTE v36[10];
  _BYTE v37[10];
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int8x8_t v41;
  unsigned int v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  unsigned int v46;
  uint64_t v47;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v47 = *MEMORY[0x1E0C80C00];
  bzero(&v39, 0x1000uLL);
  v7 = (char *)fd_create_protected(v6, v5, 2, 0);
  v8 = v7;
  if (v7)
  {
    v9 = fd_pread(v7, &v39, 0x1000uLL, 0);
    if (v9 == 4096)
    {
      if (v39 == 947155812)
      {
        v39 = 1685287992;
        *(int8x8_t *)v10.i8 = v41;
        v10.i32[2] = v42;
        v11 = vrev32q_s8(v10);
        v42 = v11.u32[2];
        v41 = *(int8x8_t *)v11.i8;
        v43 = vrev64q_s8(v43);
        v44 = vrev32q_s8(v44);
        v45 = vrev32q_s8(v45);
        v12 = bswap32(v40 & 0x7FFFFF7F | 0x80000000);
      }
      else
      {
        v12 = v40 & 0x7FFFFF7F;
      }
      v40 = v12;
      v22 = (*(uint64_t (**)(uint64_t))(v3 + 16))(v3);
      if ((v22 & 0x42) != 0)
      {
        if (v46)
          v14 = v46;
        else
          v14 = 22;
        v23 = *__error();
        v24 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v31 = 136315650;
          v32 = "update_db_header";
          v33 = 1024;
          v34 = 6714;
          v35 = 2080;
          *(_QWORD *)v36 = v5;
          _os_log_error_impl(&dword_1B8270000, v24, OS_LOG_TYPE_ERROR, "%s:%d: update_db_header (%s) flags check failed", (uint8_t *)&v31, 0x1Cu);
        }
        *__error() = v23;
        v17 = 6711;
      }
      else
      {
        if (v22 == v40)
          goto LABEL_33;
        v40 = v22;
        if ((v22 & 0x80) != 0)
        {
          v39 = bswap32(v39);
          v40 = bswap32(v22);
          v41 = vrev32_s8(v41);
          v42 = bswap32(v42);
          v43 = vrev64q_s8(v43);
          v44 = vrev32q_s8(v44);
          v45 = vrev32q_s8(v45);
        }
        if (fd_pwrite((uint64_t)v8, (uint64_t)&v39, 0x1000uLL, 0) == 4096)
        {
LABEL_33:
          fd_release(v8);
          return 0;
        }
        v28 = *__error();
        v29 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          v31 = 136315650;
          v32 = "update_db_header";
          v33 = 1024;
          v34 = 6725;
          v35 = 2080;
          *(_QWORD *)v36 = v5;
          _os_log_error_impl(&dword_1B8270000, v29, OS_LOG_TYPE_ERROR, "%s:%d: update_db_header (%s) write failed", (uint8_t *)&v31, 0x1Cu);
        }
        *__error() = v28;
        v30 = *__error();
        if (v30)
          v14 = v30;
        else
          v14 = 0xFFFFFFFFLL;
        v17 = 6727;
      }
    }
    else
    {
      v18 = v9;
      v19 = *__error();
      if (v19)
        v14 = v19;
      else
        v14 = 0xFFFFFFFFLL;
      v20 = *__error();
      v21 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v31 = 136316162;
        v32 = "update_db_header";
        v33 = 1024;
        v34 = 6691;
        v35 = 2080;
        *(_QWORD *)v36 = v5;
        *(_WORD *)&v36[8] = 2048;
        *(_QWORD *)v37 = v18;
        *(_WORD *)&v37[8] = 2048;
        v38 = 4096;
        _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: update_db_header (%s) fd_pread %zd != %zd", (uint8_t *)&v31, 0x30u);
      }
      *__error() = v20;
      v17 = 6689;
    }
  }
  else
  {
    v13 = *__error();
    if (v13)
      v14 = v13;
    else
      v14 = 0xFFFFFFFFLL;
    v15 = *__error();
    v16 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v31 = 136315650;
      v32 = "update_db_header";
      v33 = 1024;
      v34 = 6683;
      v35 = 2080;
      *(_QWORD *)v36 = v5;
      _os_log_error_impl(&dword_1B8270000, v16, OS_LOG_TYPE_ERROR, "%s:%d: update_db_header (%s) fd_create failed", (uint8_t *)&v31, 0x1Cu);
    }
    *__error() = v15;
    v17 = 6681;
  }
  fd_release(v8);
  v25 = *__error();
  v26 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    v31 = 136316162;
    v32 = "update_db_header";
    v33 = 1024;
    v34 = 6736;
    v35 = 1024;
    *(_DWORD *)v36 = v14;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = v17;
    *(_WORD *)v37 = 2080;
    *(_QWORD *)&v37[2] = v5;
    _os_log_error_impl(&dword_1B8270000, v26, OS_LOG_TYPE_ERROR, "%s:%d: update_db_header failed err:%d at %d for %s", (uint8_t *)&v31, 0x28u);
  }
  *__error() = v25;
  return v14;
}

uint64_t __db2_update_datastore_state_block_invoke_5(uint64_t a1, int a2)
{
  return a2 & 0xFFFFF9FE | 1;
}

uint64_t __db2_update_datastore_state_block_invoke_4(uint64_t a1, int a2)
{
  return a2 & 0xFFFFF9FE | 1;
}

uint64_t __db2_update_datastore_state_block_invoke_3(uint64_t a1, int a2)
{
  return a2 & 0xFFFFF9FE | 0x201;
}

uint64_t __db2_update_datastore_state_block_invoke_2(uint64_t a1, int a2)
{
  return a2 & 0xFFFFF9FE | 0x401;
}

uint64_t __db2_update_datastore_state_block_invoke_26(uint64_t a1, int a2)
{
  return a2 & 0xFFFFF9FE | 1;
}

uint64_t __db2_update_datastore_state_block_invoke(uint64_t a1, int a2)
{
  return a2 & 0xFFFFF9BC;
}

uint64_t db2_get_datastore_with_ctx(unsigned int *a1)
{
  uint64_t v2;
  char *v3;
  unsigned int v4;
  char *v5;
  int8x16_t *v6;
  int8x16_t *v7;
  int v8;
  unsigned int v9;
  unsigned __int8 v10;
  char *v11;
  char *v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int8x16_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  NSObject *v32;
  int8x16_t v33;
  int v34;
  int v35;
  NSObject *v36;
  int v37;
  const char *v38;
  NSObject *v39;
  uint32_t v40;
  int v41;
  int v42;
  NSObject *v43;
  int8x16_t v44;
  void *v45;
  pthread_key_t v46;
  void *v47;
  unsigned int v48;
  unint64_t v49;
  signed int v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int j;
  unsigned int v56;
  int v57;
  pthread_override_s *v58;
  char v59;
  _DWORD *v60;
  _DWORD *v61;
  int v62;
  int v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  int v67;
  NSObject *v68;
  int v69;
  int v70;
  int v71;
  NSObject *v72;
  os_log_type_t v73;
  NSObject *v74;
  os_log_type_t v75;
  int v76;
  NSObject *v77;
  int v78;
  int v79;
  int v80;
  NSObject *v81;
  int v82;
  NSObject *v83;
  unsigned int v84;
  _OWORD *v85;
  int v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  NSObject *v112;
  int i;
  int v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  size_t v118;
  _BOOL4 v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  _DWORD *v126;
  _DWORD *v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  NSObject *v132;
  const char *v133;
  uint8_t *v134;
  NSObject *v135;
  uint32_t v136;
  int v137;
  NSObject *v138;
  int *v139;
  char *v140;
  int v141;
  NSObject *v142;
  uint64_t v143;
  unint64_t v144;
  const char *data;
  size_t v146;
  unint64_t v147;
  char v148;
  char v149;
  char *v150;
  char *v151;
  const char *v152;
  uint64_t v153;
  int *v154;
  char *v155;
  int v156;
  NSObject *v157;
  int v158;
  int v159;
  NSObject *v160;
  int v161;
  int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  _BYTE *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  void *__base;
  uint8_t v174[4];
  const char *v175;
  __int16 v176;
  int v177;
  __int16 v178;
  _BYTE *v179;
  __int16 v180;
  char *v181;
  _BYTE buf[18];
  __int16 v183;
  _BYTE v184[10];
  int v185;
  __int16 v186;
  uint64_t v187;
  char __dst[1024];
  char __s1[1024];
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (char *)*((_QWORD *)a1 + 1);
  v4 = a1[4];
  __base = 0;
  if (sdb_map_zone_once != -1)
    dispatch_once(&sdb_map_zone_once, &__block_literal_global_106_9994);
  bzero(__s1, 0x400uLL);
  bzero(__dst, 0x400uLL);
  v5 = (char *)malloc_type_zone_calloc((malloc_zone_t *)sdb_map_zone, 1uLL, 0x1000uLL, 0xC6F62503uLL);
  v6 = (int8x16_t *)malloc_type_zone_calloc((malloc_zone_t *)sdb_map_zone, 1uLL, 0x1000uLL, 0xA6860A5AuLL);
  v7 = v6;
  if (!v5 || !v6)
  {
    v18 = 0;
    v12 = 0;
    if (v5)
      goto LABEL_58;
    if (!v6)
      goto LABEL_13;
    goto LABEL_12;
  }
  v8 = ~(v4 >> 2) & 2;
  v9 = a1[5];
  *((_DWORD *)v5 + 246) = v9;
  v6[61].i32[2] = v9;
  v10 = ((int)(a1[4] << 13) >> 31) & 3;
  v11 = (char *)fd_create_protected(v2, v3, v8, v10);
  v12 = v11;
  if (!v11)
    goto LABEL_21;
  *(_QWORD *)buf = 0;
  v13 = _fd_acquire_fd((uint64_t)v11, buf);
  if ((v13 & 0x80000000) == 0)
  {
    v14 = v13;
    goto LABEL_8;
  }
  if ((v4 & 0x10000) == 0 || !v8 || (fd_make_readonly((uint64_t)v12), v21 = _fd_acquire_fd((uint64_t)v12, buf), v21 < 0))
  {
LABEL_21:
    v18 = 0;
    goto LABEL_58;
  }
  v14 = v21;
  v4 |= 8u;
LABEL_8:
  _fd_release_fd(v12, v14, 0, *(uint64_t *)buf);
  v15 = strrchr(v3, 47);
  if (v15)
  {
    v16 = v15;
    strlcpy(__dst, v3, v15 - v3 + 2);
    strlcat(__dst, ".", 0x400uLL);
    v17 = v16 + 1;
  }
  else
  {
    strcpy(__dst, ".");
    v17 = v3;
  }
  strlcat(__dst, v17, 0x400uLL);
  if ((v4 & 0x28) == 0x20)
    v22 = v8 | 0x200;
  else
    v22 = v8;
  v18 = (char *)fd_create_protected(v2, __dst, v22, v10);
  if (!v18)
    goto LABEL_58;
  v165 = v4 & 8;
  v23 = *((_QWORD *)v5 + 106);
  if (v23)
    *(_WORD *)(v23 + 56) |= 4u;
  *(_QWORD *)buf = 0;
  *__error() = 0;
  v24 = _fd_acquire_fd((uint64_t)v18, buf);
  if (v24 < 0)
  {
    if (*__error() != 2)
      goto LABEL_58;
    fd_release(v18);
    v18 = v12;
    if ((v4 & 8) == 0)
    {
      v18 = (char *)fd_create_protected(v2, __dst, 2562, v10);
      if (!v18)
        goto LABEL_58;
    }
  }
  else
  {
    _fd_release_fd(v18, v24, 0, *(uint64_t *)buf);
  }
  v25 = fd_pread(v12, v5, 0x1000uLL, 0);
  if (v25 != 4096)
  {
    v28 = v25;
    *(_QWORD *)buf = 0;
    v29 = _fd_acquire_fd((uint64_t)v12, buf);
    if (v29 != -1)
    {
      v30 = v29;
      fcntl(v29, 50, __s1);
      _fd_release_fd(v12, v30, 0, *(uint64_t *)buf);
    }
    if (strstr(__s1, "130162031.fixed"))
    {
      v150 = __si_assert_copy_extra_2151(v12, -1);
      v151 = v150;
      v152 = "";
      if (v150)
        v152 = v150;
      __message_assert("%s:%u: failed assertion '%s' %s should not try to read %s", "sdb2.c", 7228, "strstr(full_path, \"130162031.fixed\") == NULL", v152, __s1);
      free(v151);
      if (__valid_fsp(v12))
        v153 = 2989;
      else
        v153 = 3072;
      *(_DWORD *)v153 = -559038737;
      abort();
    }
    v31 = *__error();
    v32 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "db2_get_datastore_with_ctx";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7229;
      v183 = 2080;
      *(_QWORD *)v184 = __s1;
      *(_WORD *)&v184[8] = 1024;
      v185 = 4096;
      v186 = 2048;
      v187 = v28;
      _os_log_error_impl(&dword_1B8270000, v32, OS_LOG_TYPE_ERROR, "%s:%d: %s : db2_get_datastore: ERR: could not read %d bytes (read %zd bytes)\n", buf, 0x2Cu);
    }
    *__error() = v31;
    bzero(v5, 0x1000uLL);
    goto LABEL_58;
  }
  *(_OWORD *)(v5 + 968) = 0u;
  *(_OWORD *)(v5 + 984) = 0u;
  *(_OWORD *)(v5 + 936) = 0u;
  *(_OWORD *)(v5 + 952) = 0u;
  *(_OWORD *)(v5 + 904) = 0u;
  *(_OWORD *)(v5 + 920) = 0u;
  *(_OWORD *)(v5 + 872) = 0u;
  *(_OWORD *)(v5 + 888) = 0u;
  *(_OWORD *)(v5 + 840) = 0u;
  *(_OWORD *)(v5 + 856) = 0u;
  *(_OWORD *)(v5 + 808) = 0u;
  *(_OWORD *)(v5 + 824) = 0u;
  *(_OWORD *)(v5 + 776) = 0u;
  *(_OWORD *)(v5 + 792) = 0u;
  *(_OWORD *)(v5 + 744) = 0u;
  *(_OWORD *)(v5 + 760) = 0u;
  *(_OWORD *)(v5 + 712) = 0u;
  *(_OWORD *)(v5 + 728) = 0u;
  *(_OWORD *)(v5 + 680) = 0u;
  *(_OWORD *)(v5 + 696) = 0u;
  *(_OWORD *)(v5 + 648) = 0u;
  *(_OWORD *)(v5 + 664) = 0u;
  *(_OWORD *)(v5 + 616) = 0u;
  *(_OWORD *)(v5 + 632) = 0u;
  *(_OWORD *)(v5 + 584) = 0u;
  *(_OWORD *)(v5 + 600) = 0u;
  if (fd_pread(v18, v7, 0x1000uLL, 0) != 4096)
    bzero(v7, 0x1000uLL);
  *(int8x16_t *)((char *)&v7[60] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[61] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[58] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[59] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[56] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[57] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[54] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[55] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[52] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[53] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[50] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[51] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[48] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[49] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[46] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[47] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[44] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[45] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[42] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[43] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[40] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[41] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[38] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[39] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[36] + 8) = 0u;
  *(int8x16_t *)((char *)&v7[37] + 8) = 0u;
  *((_QWORD *)v5 + 105) = v12;
  *((_QWORD *)v5 + 106) = v18;
  *((_QWORD *)v5 + 107) = 0;
  v7[53].i64[1] = 0;
  if (*(_DWORD *)v5 == 947155812)
  {
    v26 = vrev32q_s8(*(int8x16_t *)v5);
    *(int8x16_t *)v5 = v26;
    *((_DWORD *)v5 + 4) = bswap32(*((_DWORD *)v5 + 4));
    *(int8x16_t *)(v5 + 20) = vrev64q_s8(*(int8x16_t *)(v5 + 20));
    *(int8x16_t *)(v5 + 36) = vrev32q_s8(*(int8x16_t *)(v5 + 36));
    *(int8x16_t *)(v5 + 52) = vrev32q_s8(*(int8x16_t *)(v5 + 52));
    v27 = v26.i32[1] & 0x7FFFFF7F | 0x80;
  }
  else
  {
    v27 = *((_DWORD *)v5 + 1) & 0x7FFFFF7F;
  }
  *((_DWORD *)v5 + 1) = v27;
  if (v7->i32[0] == 947155812)
  {
    v33 = vrev32q_s8(*v7);
    *v7 = v33;
    v7[1].i32[0] = bswap32(v7[1].u32[0]);
    *(int8x16_t *)((char *)v7 + 20) = vrev64q_s8(*(int8x16_t *)((char *)v7 + 20));
    *(int8x16_t *)((char *)v7 + 36) = vrev32q_s8(*(int8x16_t *)((char *)v7 + 36));
    *(int8x16_t *)((char *)v7 + 52) = vrev32q_s8(*(int8x16_t *)((char *)v7 + 52));
    v34 = v33.i32[1] & 0x7FFFFF7F | 0x80;
  }
  else
  {
    v34 = v7->i32[1] & 0x7FFFFF7F;
  }
  v7->i32[1] = v34;
  if (*(_DWORD *)v5 != 1685287992)
  {
    *(_QWORD *)buf = 0;
    v41 = _fd_acquire_fd((uint64_t)v12, buf);
    if (v41 != -1)
    {
      v42 = v41;
      fcntl(v41, 50, __s1);
      _fd_release_fd(v12, v42, 0, *(uint64_t *)buf);
    }
    v35 = *__error();
    v43 = _SILogForLogForCategory(7);
    if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      goto LABEL_57;
    v78 = *(_DWORD *)v5;
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "db2_get_datastore_with_ctx";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 7282;
    v183 = 2080;
    *(_QWORD *)v184 = __s1;
    *(_WORD *)&v184[8] = 1024;
    v185 = v78;
    v186 = 1024;
    LODWORD(v187) = 1685287992;
    v38 = "%s:%d: %s : db2_get_datastore: ERR: signature 0x%x != 0x%x. bailing out.\n";
    v39 = v43;
    v40 = 40;
    goto LABEL_116;
  }
  if (*((_DWORD *)v5 + 11) <= 0x13u)
  {
    fd_realpath(v12, __s1);
    v35 = *__error();
    v36 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = *((_DWORD *)v5 + 11);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "db2_get_datastore_with_ctx";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7289;
      v183 = 2080;
      *(_QWORD *)v184 = __s1;
      *(_WORD *)&v184[8] = 1024;
      v185 = v37;
      v38 = "%s:%d: %s : db2_get_datastore: ERR: bad page size %d bailing out.\n";
      v39 = v36;
      v40 = 34;
LABEL_116:
      _os_log_error_impl(&dword_1B8270000, v39, OS_LOG_TYPE_ERROR, v38, buf, v40);
    }
LABEL_57:
    *__error() = v35;
    goto LABEL_58;
  }
  if (v7->i32[0] != 1685287992 || v7[2].i32[3] <= 0x13u)
  {
    v67 = *__error();
    v68 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "db2_get_datastore_with_ctx";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7295;
      _os_log_error_impl(&dword_1B8270000, v68, OS_LOG_TYPE_ERROR, "%s:%d: bad shadow. recover.", buf, 0x12u);
    }
    *__error() = v67;
    bzero(v7, 0x1000uLL);
    v34 = 0;
  }
  if (((*((_DWORD *)v5 + 1) | v34) & 0x30) != 0)
    goto LABEL_58;
  *((_OWORD *)v5 + 54) = 0u;
  sdb_zone_init(*((_DWORD *)v5 + 201));
  v69 = v4 & 8;
  v70 = v7->i32[1];
  v164 = v165 >> 2;
  if ((v70 & 0x200) != 0)
  {
    v161 = *__error();
    v72 = _SILogForLogForCategory(7);
    v73 = 2 * (dword_1EF19FCA8 < 4);
    if (os_log_type_enabled(v72, v73))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v5 + 324;
      _os_log_impl(&dword_1B8270000, v72, v73, "%s : db2_get_datastore opening - clean needs shadow\n", buf, 0xCu);
    }
    *__error() = v161;
    if ((v4 & 0x20) == 0)
    {
      v162 = *__error();
      v74 = _SILogForLogForCategory(7);
      v75 = 2 * (dword_1EF19FCA8 < 4);
      if (os_log_type_enabled(v74, v75))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v5 + 324;
        _os_log_impl(&dword_1B8270000, v74, v75, "%s : db2_get_datastore open - shadow to master\n", buf, 0xCu);
      }
      *__error() = v162;
      if (isRegisteredForCloning(v2))
        v76 = fd_copyfile((uint64_t)v18, (uint64_t)v12, 1);
      else
        v76 = copy_datastore((uint64_t)v5, v18, (uint64_t)v12, 1);
      v79 = v76;
      v69 = v4 & 8;
      if (v76)
      {
        v80 = *__error();
        v81 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "db2_get_datastore_with_ctx";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7335;
          v183 = 2080;
          *(_QWORD *)v184 = v5 + 324;
          *(_WORD *)&v184[8] = 1024;
          v185 = v79;
          _os_log_error_impl(&dword_1B8270000, v81, OS_LOG_TYPE_ERROR, "%s:%d: %s : db2_get_datastore copyFile or copy_datastore err:%d\n", buf, 0x22u);
        }
        *__error() = v80;
        goto LABEL_58;
      }
      if ((v4 & 8) == 0)
      {
        db_store_dirty_chunk_info((uint64_t)v5, v2, 1, 0);
        v69 = 0;
        v164 = 0;
      }
      goto LABEL_131;
    }
    fd_realpath(v12, __s1);
    *__error() = 22;
    v35 = *__error();
    v77 = _SILogForLogForCategory(7);
    if (!os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      goto LABEL_57;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "db2_get_datastore_with_ctx";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 7322;
    v183 = 2080;
    *(_QWORD *)v184 = __s1;
    v38 = "%s:%d: %s : db2_get_datastore: ERR: requested recovery from dirty master.\n";
    goto LABEL_114;
  }
  if ((v70 & 0x400) != 0)
  {
    *(int8x16_t *)((char *)v7 + 840) = *(int8x16_t *)(v5 + 840);
    *((_QWORD *)v5 + 105) = 0;
    *((_QWORD *)v5 + 106) = 0;
    *((_QWORD *)v5 + 108) = 0;
    *((_QWORD *)v5 + 109) = 0;
    v19 = (uint64_t)v7;
    v7 = (int8x16_t *)v5;
    goto LABEL_132;
  }
  if ((v70 & 1) == 0)
  {
    if ((*((_WORD *)v5 + 2) & 0x201) != 0)
    {
      if (isRegisteredForCloning(v2))
        v71 = fd_copyfile((uint64_t)v12, (uint64_t)v18, 1);
      else
        v71 = copy_datastore((uint64_t)v5, v12, (uint64_t)v18, 0);
      v163 = v71;
      v82 = *__error();
      v83 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B8270000, v83, OS_LOG_TYPE_DEFAULT, "Open sdb, recover from shadow", buf, 2u);
      }
      *__error() = v82;
      if (v163)
        goto LABEL_58;
      v69 = v4 & 8;
      v164 |= 0x84u;
      goto LABEL_131;
    }
    fd_realpath(v12, __s1);
    v35 = *__error();
    v77 = _SILogForLogForCategory(7);
    if (!os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      goto LABEL_57;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "db2_get_datastore_with_ctx";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 7390;
    v183 = 2080;
    *(_QWORD *)v184 = __s1;
    v38 = "%s:%d: %s : db2_get_datastore: ERR: both shadow and master are dirty!  no recovery possible.\n";
LABEL_114:
    v39 = v77;
    v40 = 28;
    goto LABEL_116;
  }
LABEL_131:
  v19 = (uint64_t)v5;
LABEL_132:
  v84 = *(_DWORD *)(v19 + 4);
  *(_DWORD *)(v19 + 4) = v84 & 0xFFFFFFF7 | v69;
  *(_DWORD *)(v19 + 804) = (v84 >> 14) & 4 | (v84 >> 10) & 2 | (v84 >> 8) & 1 | (v84 >> 13) & 0x10 | v69;
  *(_OWORD *)(v19 + 864) = 0u;
  *(_OWORD *)(v19 + 880) = 0u;
  *(_OWORD *)(v19 + 896) = 0u;
  *(_OWORD *)(v19 + 912) = 0u;
  free(v7);
  *(_QWORD *)(v19 + 792) = 0;
  *(_OWORD *)(v19 + 760) = 0u;
  *(_OWORD *)(v19 + 776) = 0u;
  *(_OWORD *)(v19 + 728) = 0u;
  *(_OWORD *)(v19 + 744) = 0u;
  *(_OWORD *)(v19 + 696) = 0u;
  *(_OWORD *)(v19 + 712) = 0u;
  *(_OWORD *)(v19 + 664) = 0u;
  *(_OWORD *)(v19 + 680) = 0u;
  *(_OWORD *)(v19 + 632) = 0u;
  *(_OWORD *)(v19 + 648) = 0u;
  *(_OWORD *)(v19 + 600) = 0u;
  *(_OWORD *)(v19 + 616) = 0u;
  *(_OWORD *)(v19 + 584) = 0u;
  pthread_mutex_init((pthread_mutex_t *)(v19 + 584), 0);
  if (load_map(v19))
  {
LABEL_133:
    v7 = 0;
    v5 = (char *)v19;
    goto LABEL_58;
  }
  *(_QWORD *)(v19 + 928) = db_cache_alloc(v19);
  v85 = malloc_type_malloc(0x48uLL, 0x10A004087A21FEBuLL);
  *v85 = 0u;
  v85[1] = 0u;
  *((_DWORD *)v85 + 8) = 1065353216;
  *(_OWORD *)((char *)v85 + 40) = 0u;
  *(_OWORD *)((char *)v85 + 56) = 0u;
  *(_QWORD *)(v19 + 992) = v85;
  *(_OWORD *)(v19 + 808) = 0u;
  db2_set_garbage_collector((_QWORD *)v19, &__block_literal_global_41_10238, &__block_literal_global_43_10239, &__block_literal_global_45_10240);
  *(_QWORD *)(v19 + 832) = 0;
  *(_QWORD *)(v19 + 976) = *((_QWORD *)a1 + 3);
  if ((*(_BYTE *)(v19 + 6) & 3) != 0)
  {
    bzero(buf, 0x400uLL);
    v86 = strcmp(v3, "store.db");
    v87 = "db";
    if (v86)
      v87 = v3;
    snprintf(buf, 0x400uLL, "%sStr-%d.map", v87, 1);
    *((_QWORD *)&v171 + 1) = 0;
    v172 = 0u;
    v168 = v2;
    v169 = buf;
    LODWORD(v170) = 2;
    DWORD1(v170) = v164;
    *((_QWORD *)&v170 + 1) = _db2_synced_block_callback;
    *(_QWORD *)&v171 = _db2_unmap_callback;
    v88 = *(_QWORD *)(v19 + 976);
    *((_QWORD *)&v171 + 1) = v19;
    *(_QWORD *)&v172 = v88;
    v89 = data_map_init_with_ctx((uint64_t)&v168);
    *(_QWORD *)(v19 + 880) = v89;
    if (v89)
    {
      bzero(buf, 0x400uLL);
      v90 = strcmp(v3, "store.db");
      v91 = "db";
      if (v90)
        v91 = v3;
      snprintf(buf, 0x400uLL, "%sStr-%d.map", v91, 2);
      LODWORD(v170) = 0;
      v172 = 0u;
      v168 = v2;
      v169 = buf;
      DWORD1(v170) = v164;
      *((_QWORD *)&v170 + 1) = _db2_synced_block_callback;
      v171 = (unint64_t)_db2_unmap_callback;
      v92 = *(_QWORD *)(v19 + 976);
      *((_QWORD *)&v171 + 1) = v19;
      *(_QWORD *)&v172 = v92;
      DWORD2(v172) = 1;
      v93 = data_map_init_with_ctx((uint64_t)&v168);
      *(_QWORD *)(v19 + 888) = v93;
      if (v93)
      {
        bzero(buf, 0x400uLL);
        v94 = strcmp(v3, "store.db");
        v95 = "db";
        if (v94)
          v95 = v3;
        snprintf(buf, 0x400uLL, "%sStr-%d.map", v95, 3);
        LODWORD(v170) = 0;
        v172 = 0u;
        v168 = v2;
        v169 = buf;
        DWORD1(v170) = v164;
        *((_QWORD *)&v170 + 1) = _db2_synced_block_callback;
        v171 = (unint64_t)_db2_unmap_callback;
        v96 = *(_QWORD *)(v19 + 976);
        *((_QWORD *)&v171 + 1) = v19;
        *(_QWORD *)&v172 = v96;
        DWORD2(v172) = 2;
        v97 = data_map_init_with_ctx((uint64_t)&v168);
        *(_QWORD *)(v19 + 896) = v97;
        if (v97)
        {
          bzero(buf, 0x400uLL);
          v98 = strcmp(v3, "store.db");
          v99 = "db";
          if (v98)
            v99 = v3;
          snprintf(buf, 0x400uLL, "%sStr-%d.map", v99, 4);
          LODWORD(v170) = 0;
          v172 = 0u;
          v168 = v2;
          v169 = buf;
          DWORD1(v170) = v164;
          *((_QWORD *)&v170 + 1) = _db2_synced_block_callback;
          v171 = (unint64_t)_db2_unmap_callback;
          v100 = *(_QWORD *)(v19 + 976);
          *((_QWORD *)&v171 + 1) = v19;
          *(_QWORD *)&v172 = v100;
          DWORD2(v172) = 3;
          v101 = data_map_init_with_ctx((uint64_t)&v168);
          *(_QWORD *)(v19 + 904) = v101;
          if (v101)
          {
            bzero(buf, 0x400uLL);
            v102 = strcmp(v3, "store.db");
            v103 = "db";
            if (v102)
              v103 = v3;
            snprintf(buf, 0x400uLL, "%sStr-%d.map", v103, 5);
            LODWORD(v170) = 0;
            v172 = 0u;
            v168 = v2;
            v169 = buf;
            DWORD1(v170) = v164;
            *((_QWORD *)&v170 + 1) = _db2_synced_block_callback;
            v171 = (unint64_t)_db2_unmap_callback;
            v104 = *(_QWORD *)(v19 + 976);
            *((_QWORD *)&v171 + 1) = v19;
            *(_QWORD *)&v172 = v104;
            DWORD2(v172) = 4;
            v105 = data_map_init_with_ctx((uint64_t)&v168);
            *(_QWORD *)(v19 + 912) = v105;
            if (v105)
            {
              bzero(buf, 0x400uLL);
              v106 = strcmp(v3, "store.db");
              v107 = "db";
              if (v106)
                v107 = v3;
              snprintf(buf, 0x400uLL, "%sStr-%d.map", v107, 6);
              v172 = 0u;
              v168 = v2;
              v169 = buf;
              LODWORD(v170) = 4;
              DWORD1(v170) = v164 | 0x40;
              *((_QWORD *)&v170 + 1) = _db2_synced_block_callback;
              v171 = (unint64_t)_db2_unmap_callback;
              v108 = *(_QWORD *)(v19 + 976);
              *((_QWORD *)&v171 + 1) = v19;
              *(_QWORD *)&v172 = v108;
              DWORD2(v172) = 5;
              v109 = data_map_init_with_ctx((uint64_t)&v168);
              *(_QWORD *)(v19 + 920) = v109;
              if (v109)
                goto LABEL_187;
              if ((v4 & 8) != 0)
                goto LABEL_187;
              DWORD1(v170) = v164 | 0x41;
              v110 = data_map_init_with_ctx((uint64_t)&v168);
              *(_QWORD *)(v19 + 920) = v110;
              if (v110)
                goto LABEL_187;
            }
          }
        }
      }
    }
    v111 = *__error();
    v112 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
    {
      v139 = __error();
      v140 = strerror(*v139);
      *(_DWORD *)v174 = 136315906;
      v175 = "db2_get_datastore_with_ctx";
      v176 = 1024;
      v177 = 7485;
      v178 = 2080;
      v179 = buf;
      v180 = 2080;
      v181 = v140;
      v133 = "%s:%d: %s : ERR: can't init the string table! (%s)\n";
      v134 = v174;
      v135 = v112;
      v136 = 38;
LABEL_196:
      _os_log_error_impl(&dword_1B8270000, v135, OS_LOG_TYPE_ERROR, v133, v134, v136);
    }
    goto LABEL_156;
  }
  if (sdb_string_zone_once != -1)
    dispatch_once(&sdb_string_zone_once, &__block_literal_global_110);
  v166 = 16;
  v167 = 0;
  for (i = 1; i != 6; ++i)
  {
    if (load_string_table(v19, i - 1, v4, &__base, &v167, &v166))
    {
      if (v167)
      {
        destroy_string_table(v19, 0);
        if (i != 1)
        {
          destroy_string_table(v19, 1u);
          if (i != 2)
          {
            destroy_string_table(v19, 2u);
            if (i != 3)
            {
              destroy_string_table(v19, 3u);
              if (i != 4)
                destroy_string_table(v19, 4u);
            }
          }
        }
      }
      *(_OWORD *)(v19 + 896) = 0u;
      *(_OWORD *)(v19 + 912) = 0u;
      *(_OWORD *)(v19 + 880) = 0u;
      goto LABEL_133;
    }
  }
  bzero(buf, 0x400uLL);
  v114 = strcmp(v3, "store.db");
  v115 = "db";
  if (v114)
    v115 = v3;
  snprintf(buf, 0x400uLL, "%sStr-%d.map", v115, 6);
  v172 = 0u;
  v168 = v2;
  v169 = buf;
  v170 = 0x4100000004uLL;
  *(_QWORD *)&v171 = _db2_unmap_callback;
  *((_QWORD *)&v171 + 1) = v19;
  *(_QWORD *)&v172 = *(_QWORD *)(v19 + 976);
  DWORD2(v172) = 5;
  v116 = data_map_init_with_ctx((uint64_t)&v168);
  *(_QWORD *)(v19 + 920) = v116;
  if (!v116 && (v4 & 8) == 0)
  {
    DWORD1(v170) = 65;
    v117 = data_map_init_with_ctx((uint64_t)&v168);
    *(_QWORD *)(v19 + 920) = v117;
    if (!v117)
    {
      v137 = *__error();
      v138 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
      {
        v154 = __error();
        v155 = strerror(*v154);
        *(_DWORD *)v174 = 136315906;
        v175 = "db2_get_datastore_with_ctx";
        v176 = 1024;
        v177 = 7527;
        v178 = 2080;
        v179 = buf;
        v180 = 2080;
        v181 = v155;
        _os_log_error_impl(&dword_1B8270000, v138, OS_LOG_TYPE_ERROR, "%s:%d: %s : ERR: can't init the string table! (%s)\n", v174, 0x26u);
      }
      *__error() = v137;
      goto LABEL_133;
    }
  }
  v118 = v167;
  if (v167)
  {
    *(_DWORD *)(v19 + 4) |= 0x20000u;
    *(_DWORD *)(v19 + 804) |= 0x10u;
    db2_dirty_datastore(v19);
    qsort_b(__base, v118, 4uLL, &__block_literal_global_49_10245);
    v168 = 0;
    v119 = CICleanUpThreadLocGet(&v168);
    v120 = _db_write_lock(v19 + 584);
    if (v120)
    {
      v158 = v120;
      v159 = *__error();
      v160 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "db2_get_datastore_with_ctx";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7557;
        v183 = 1024;
        *(_DWORD *)v184 = v158;
        _os_log_error_impl(&dword_1B8270000, v160, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
      }
      *__error() = v159;
      sdb2_die(v19, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 7557);
    }
    if (v119)
      v121 = CIOnThreadCleanUpPush(v168, (uint64_t)db_write_unlock, v19 + 584);
    else
      v121 = -1;
    _dirty_datastore_locked(v19, 0);
    v122 = v167;
    if (v167)
    {
      v123 = (unsigned int *)__base;
      do
      {
        v124 = *v123++;
        page_free(v19, v124, buf, 0);
        --v122;
      }
      while (v122);
    }
    if (db_write_unlock(v19 + 584))
      sdb2_die(v19, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 7564);
    if (v119)
    {
      v125 = v168;
      CIOnThreadCleanUpClearItem(v168, v121);
      v126 = &threadData[18 * v125];
      v129 = v126[14];
      v127 = v126 + 14;
      v128 = v129;
      if (v121 + 1 == v129)
        *v127 = v128 - 1;
    }
  }
  free(__base);
LABEL_187:
  if (!v165 && (*(_BYTE *)(v19 + 804) & 0x14) != 0)
  {
    v130 = *(_QWORD *)(v19 + 880);
    v131 = _data_map_version(v130);
    if (_data_map_version(*(_QWORD *)(v19 + 888)) == 8)
    {
      v111 = *__error();
      v132 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "db2_get_datastore_with_ctx";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7579;
        v183 = 1024;
        *(_DWORD *)v184 = v131;
        *(_WORD *)&v184[4] = 1024;
        *(_DWORD *)&v184[6] = 8;
        v133 = "%s:%d: Invalid string table version (%d %d)";
        v134 = buf;
        v135 = v132;
        v136 = 30;
        goto LABEL_196;
      }
LABEL_156:
      v7 = 0;
      *__error() = v111;
      v5 = (char *)v19;
LABEL_58:
      v44 = vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(*((_DWORD *)v5 + 1)), (uint32x4_t)xmmword_1B8632020), (int8x16_t)xmmword_1B8632030);
      *(int8x8_t *)v44.i8 = vorr_s8(*(int8x8_t *)v44.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL));
      *((_DWORD *)v5 + 201) = v44.i32[0] | *((_DWORD *)v5 + 1) & 8 | v44.i32[1];
      v45 = (void *)*((_QWORD *)v5 + 107);
      if (v45)
      {
        free(v45);
        *((_QWORD *)v5 + 107) = 0;
      }
      if (*((_QWORD *)v5 + 116))
      {
        v46 = __THREAD_SLOT_KEY;
        if (!__THREAD_SLOT_KEY)
        {
          makeThreadId();
          v46 = __THREAD_SLOT_KEY;
        }
        v47 = pthread_getspecific(v46);
        HIDWORD(v49) = qos_class_self() - 9;
        LODWORD(v49) = HIDWORD(v49);
        v48 = v49 >> 2;
        if (v48 > 6)
          v50 = 0;
        else
          v50 = dword_1B8630ED0[v48];
        v51 = pthread_mutex_lock((pthread_mutex_t *)(v5 + 584));
        if (*((_QWORD *)v5 + 96) || *((_DWORD *)v5 + 195) || v5[796])
        {
LABEL_69:
          db_rwlock_wait((uint64_t)(v5 + 584), v50, 2);
        }
        else
        {
          if (v50 <= 5)
          {
            if (*(_QWORD *)&v5[16 * v50 + 648])
              goto LABEL_69;
            v64 = v50 - 1;
            v65 = &v5[16 * v50 + 664];
            while (v64 != 4)
            {
              v66 = *(_QWORD *)v65;
              v65 += 16;
              ++v64;
              if (v66)
              {
                if (v64 <= 4)
                  goto LABEL_69;
                break;
              }
            }
          }
          *((_QWORD *)v5 + 96) = pthread_self();
        }
        pthread_mutex_unlock((pthread_mutex_t *)(v5 + 584));
        if (v51)
        {
          v156 = *__error();
          v157 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "db2_get_datastore_with_ctx";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 7694;
            v183 = 1024;
            *(_DWORD *)v184 = v51;
            _os_log_error_impl(&dword_1B8270000, v157, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
          }
          *__error() = v156;
          sdb2_die((uint64_t)v5, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 7694);
        }
        if (v47)
          v52 = CIOnThreadCleanUpPush((uint64_t)v47 - 1, (uint64_t)db_write_unlock, (uint64_t)(v5 + 584));
        else
          v52 = -1;
        v53 = *((_QWORD *)v5 + 116);
        db_cache_clear((unint64_t *)v53, (uint64_t)&__block_literal_global_10_11289);
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)buf = *(_QWORD *)v53;
        if (atomic_load((unsigned int *)(v53 + 248)))
        {
          for (j = 0; j < v56; ++j)
          {
            *(_DWORD *)&buf[8] = j;
            _cache_remove((uint64_t *)buf);
            v56 = atomic_load((unsigned int *)(v53 + 248));
          }
        }
        atomic_store(0, (unsigned int *)(v53 + 248));
        free((void *)v53);
        v57 = pthread_mutex_lock((pthread_mutex_t *)(v5 + 584));
        *((_DWORD *)v5 + 197) = 0;
        v58 = (pthread_override_s *)*((_QWORD *)v5 + 95);
        *((_QWORD *)v5 + 96) = 0;
        *((_QWORD *)v5 + 95) = 0;
        v59 = *((_DWORD *)v5 + 195) != 0;
        v5[796] = 0;
        db_rwlock_wakeup((uint64_t)(v5 + 584), v59, 0);
        pthread_mutex_unlock((pthread_mutex_t *)(v5 + 584));
        if (v58)
          pthread_override_qos_class_end_np(v58);
        if (v57)
          sdb2_die((uint64_t)v5, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 7696);
        if (v47)
        {
          CIOnThreadCleanUpClearItem((uint64_t)v47 - 1, v52);
          v60 = &threadData[18 * ((uint64_t)v47 - 1)];
          v63 = v60[14];
          v61 = v60 + 14;
          v62 = v63;
          if (v52 + 1 == v63)
            *v61 = v62 - 1;
        }
      }
      cleanup_string_tables((uint64_t)v5);
      free(v5);
      if (!v7)
      {
LABEL_13:
        if (v12 != v18)
          fd_release(v18);
        fd_release(v12);
        free(__base);
        return 0;
      }
LABEL_12:
      free(v7);
      goto LABEL_13;
    }
    if (_data_map_version_is_current(v130))
      return v19;
    v141 = *__error();
    v142 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "db2_get_datastore_with_ctx";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7584;
      _os_log_error_impl(&dword_1B8270000, v142, OS_LOG_TYPE_ERROR, "%s:%d: Upgrading string flag data", buf, 0x12u);
    }
    *__error() = v141;
    v143 = data_map_count(v130);
    if (!v143)
    {
LABEL_229:
      _data_map_version_update(v130);
      return v19;
    }
    v144 = v143;
    while (2)
    {
      data = (const char *)data_map_get_data(v130, v144, 0);
      v146 = strlen(data);
      if (data)
      {
        v147 = v146;
        if (v146 < 0xF
          || strcmp(data, "_kMDItemRelatedObjects")
          && strcmp(data, "_kMDItemRelatedObjectsWithBundleID")
          && strcmp(data, "_kMDItemLaunchString")
          && strcmp(data, "_kMDItemActivityLaunchDates")
          && strcmp(data, "_kMDItemRankingLaunchStrings")
          && strcmp(data, "_kMDItemRankingLaunchDates")
          && strcmp(data, "_kMDItemGroupId")
          && strcmp(data, "_kMDItemShortcutLastUsedDate")
          && (v147 < 0x10
           || strcmp(data, "kMDItemAttributeChangeDate")
           && strcmp(data, "kMDItemLastUsedDate")
           && strcmp(data, "kMDItemLastUsedDate_Ranking")
           && strcmp(data, "kMDItemUsedDates")))
        {
          v148 = *(data - 1);
          if (!strcmp(data, "_kStoreMetadataVersion") || !strncmp(data, "kMDStore", 8uLL))
          {
            if ((v148 & 0x40) != 0)
            {
              v149 = v148 & 0xBF;
LABEL_202:
              *((_BYTE *)data - 1) = v149;
            }
          }
          else if ((v148 & 0x40) == 0)
          {
            v149 = v148 | 0x40;
            goto LABEL_202;
          }
        }
      }
      if (!--v144)
        goto LABEL_229;
      continue;
    }
  }
  return v19;
}

void sdb_zone_init(char a1)
{
  if ((a1 & 0x14) == 0 && sdb_string_zone_once != -1)
    dispatch_once(&sdb_string_zone_once, &__block_literal_global_110);
  if (sdb_map_zone_once != -1)
    dispatch_once(&sdb_map_zone_once, &__block_literal_global_106_9994);
}

uint64_t copy_datastore(uint64_t a1, _DWORD *a2, uint64_t a3, char a4)
{
  _DWORD *v6;
  _DWORD *v8;
  int v9;
  NSObject *v10;
  const char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int8x16_t v15;
  int v16;
  int8x16_t v17;
  int v18;
  int8x16_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  int *v27;
  int v28;
  NSObject *v29;
  size_t v31;
  int *v32;
  off_t i;
  int8x16_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int8x16_t *v38;
  int8x16_t *v39;
  off_t j;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  int v51;
  NSObject *v52;
  os_log_type_t v53;
  int v54;
  const char *v55;
  int v56;
  int v57;
  NSObject *v58;
  int v59;
  int v60;
  NSObject *v61;
  int v62;
  NSObject *v63;
  int v64;
  NSObject *v65;
  NSObject *v66;
  int v67;
  int *v68;
  char *v69;
  int *v70;
  char *v71;
  int *v72;
  char *v73;
  char *v74;
  char *v75;
  const char *v76;
  _BYTE buf[18];
  __int16 v78;
  _BYTE v79[24];
  uint64_t v80;

  v6 = a2;
  v80 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD **)(a1 + 840);
  if (v8 != a2 && *(_DWORD **)(a1 + 848) != a2)
  {
    v9 = *__error();
    v10 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "copy_datastore";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6512;
      v11 = "%s:%d: sdb: ERR: copy_datastore: source is not a valid fd";
LABEL_65:
      _os_log_error_impl(&dword_1B8270000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if (v8 != (_DWORD *)a3 && *(_QWORD *)(a1 + 848) != a3)
  {
    v9 = *__error();
    v10 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "copy_datastore";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6517;
      v11 = "%s:%d: sdb: ERR: copy_datastore: destination is not a valid fd";
      goto LABEL_65;
    }
LABEL_8:
    *__error() = v9;
    return 22;
  }
  v12 = (char *)malloc_type_malloc(0x4000uLL, 0x7DE35C46uLL);
  if (!v12)
  {
LABEL_19:
    v28 = *__error();
    v29 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "copy_datastore";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 6522;
      v78 = 2080;
      *(_QWORD *)v79 = a1 + 324;
      _os_log_error_impl(&dword_1B8270000, v29, OS_LOG_TYPE_ERROR, "%s:%d: sdb: ERR: invalid master datastore! (%s)\n", buf, 0x1Cu);
    }
    *__error() = v28;
    return 22;
  }
  v13 = v12;
  v14 = fd_pread(v6, v12, 0x1000uLL, 0);
  if (v14 != 4096)
  {
    v21 = v14;
    v22 = *__error();
    v23 = *__error();
    v24 = _SILogForLogForCategory(7);
    v25 = 2 * (dword_1EF19FCA8 < 4);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = *__error();
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = v21;
      v78 = 2048;
      *(_QWORD *)v79 = 4096;
      _os_log_impl(&dword_1B8270000, v24, v25, "sdb: validate_datastore: ERR: invalid datastore header size (%d) %zd != %zd", buf, 0x1Cu);
    }
    *__error() = v23;
    goto LABEL_16;
  }
  v16 = *(_DWORD *)v13;
  if (*(_DWORD *)v13 == 947155812)
  {
    v15.i64[0] = *((_QWORD *)v13 + 1);
    v15.i32[2] = *((_DWORD *)v13 + 4);
    v17 = vrev32q_s8(v15);
    *((_DWORD *)v13 + 4) = v17.i32[2];
    v18 = *((_DWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = v17.i64[0];
    *(int8x16_t *)(v13 + 20) = vrev64q_s8(*(int8x16_t *)(v13 + 20));
    v19 = vrev32q_s8(*(int8x16_t *)(v13 + 36));
    *(int8x16_t *)(v13 + 36) = v19;
    *(int8x16_t *)(v13 + 52) = vrev32q_s8(*(int8x16_t *)(v13 + 52));
    *(_DWORD *)v13 = 1685287992;
    *((_DWORD *)v13 + 1) = bswap32(v18 & 0x7FFFFF7F | 0x80000000);
    v20 = v19.u32[2];
    goto LABEL_25;
  }
  *((_DWORD *)v13 + 1) &= 0x7FFFFF7Fu;
  if (v16 != 1685287992)
  {
    v22 = *__error();
    v48 = _SILogForLogForCategory(7);
    v49 = 2 * (dword_1EF19FCA8 < 4);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = *(_DWORD *)v13;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v50;
      _os_log_impl(&dword_1B8270000, v48, v49, "sdb: validate_datastore: ERR: invalid datastore signature: 0x%x\n", buf, 8u);
    }
LABEL_16:
    *__error() = v22;
LABEL_17:
    v27 = (int *)v13;
LABEL_18:
    free(v27);
    goto LABEL_19;
  }
  v20 = *((_DWORD *)v13 + 11);
LABEL_25:
  if (v20 <= 0x14)
    v31 = 20;
  else
    v31 = v20;
  v32 = (int *)malloc_type_valloc(v31, 0x965D694EuLL);
  if (!v32)
    goto LABEL_17;
  v27 = v32;
  for (i = *((unsigned int *)v13 + 10) + (unint64_t)*((unsigned int *)v13 + 9); ; i += v27[v36])
  {
    v37 = fd_pread(v6, v27, 0x14uLL, i);
    if (v37 < 1)
      break;
    if (*v27 == 846226020)
    {
      *v27 = 1684172850;
      v34 = vrev32q_s8(*(int8x16_t *)(v27 + 1));
      *(int8x16_t *)(v27 + 1) = v34;
      LOBYTE(v35) = v34.i8[8];
    }
    else
    {
      if (*v27 != 1684172850)
      {
        v51 = *__error();
        v52 = _SILogForLogForCategory(7);
        v53 = 2 * (dword_1EF19FCA8 < 4);
        if (os_log_type_enabled(v52, v53))
        {
          v54 = *v27;
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = i;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v54;
          v55 = "sdb: validate_datastore: ERR: invalid page @ 0x%llx (sig: 0x%x)\n";
          goto LABEL_68;
        }
        goto LABEL_69;
      }
      v35 = v27[3];
    }
    if ((v35 & 4) != 0)
      v36 = 4;
    else
      v36 = 1;
  }
  if (v37 < 0)
  {
    v51 = *__error();
    v52 = _SILogForLogForCategory(7);
    v53 = 2 * (dword_1EF19FCA8 < 4);
    if (os_log_type_enabled(v52, v53))
    {
      v56 = *((_DWORD *)v13 + 11);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v56;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = i;
      v55 = "sdb: validate_datastore: ERR: failed to read %d bytes at offset 0x%llx\n";
LABEL_68:
      _os_log_impl(&dword_1B8270000, v52, v53, v55, buf, 0x12u);
    }
LABEL_69:
    *__error() = v51;
    free(v13);
    goto LABEL_18;
  }
  free(v13);
  free(v27);
  v38 = (int8x16_t *)malloc_type_malloc(0x10000uLL, 0x21DA870CuLL);
  if (!v38)
    return 12;
  v39 = v38;
  for (j = 0; ; j += v41)
  {
    v42 = fd_pread(v6, v39, 0x10000uLL, j);
    v43 = v42;
    if (!v42)
    {
      fd_truncate(a3, j);
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(a1 + 4) & 0xFFFFFDDE | 1;
      memcpy(v39, (const void *)a1, 0x1000uLL);
      if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
      {
        *v39 = vrev32q_s8(*v39);
        v39[1].i32[0] = bswap32(v39[1].u32[0]);
        *(int8x16_t *)((char *)v39 + 20) = vrev64q_s8(*(int8x16_t *)((char *)v39 + 20));
        *(int8x16_t *)((char *)v39 + 36) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 36));
        *(int8x16_t *)((char *)v39 + 52) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 52));
      }
      if (fd_pwrite(a3, (uint64_t)v39, 0x1000uLL, 0) != 4096)
      {
        v64 = *__error();
        v65 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        {
          v70 = __error();
          v71 = strerror(*v70);
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "copy_datastore";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 6616;
          v78 = 2080;
          *(_QWORD *)v79 = a1 + 324;
          *(_WORD *)&v79[8] = 2080;
          *(_QWORD *)&v79[10] = v71;
          _os_log_error_impl(&dword_1B8270000, v65, OS_LOG_TYPE_ERROR, "%s:%d: %s : copy_datastore: ERR: failed to update the header! (%s)\n", buf, 0x26u);
        }
        *__error() = v64;
        fd_sync(a3, 1);
        free(v39);
        goto LABEL_94;
      }
      fd_sync(a3, 1);
      if ((a4 & 1) == 0)
        goto LABEL_98;
      if (fd_pwrite((uint64_t)v6, (uint64_t)v39, 0x1000uLL, 0) == 4096)
      {
        v43 = 0;
        goto LABEL_89;
      }
      v62 = *__error();
      v66 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        v72 = __error();
        v73 = strerror(*v72);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "copy_datastore";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 6622;
        v78 = 2080;
        *(_QWORD *)v79 = a1 + 324;
        *(_WORD *)&v79[8] = 2080;
        *(_QWORD *)&v79[10] = v73;
        _os_log_error_impl(&dword_1B8270000, v66, OS_LOG_TYPE_ERROR, "%s:%d: %s : copy_datastore: ERR: failed to update the header 2! (%s)\n", buf, 0x26u);
      }
      v43 = -1;
      goto LABEL_88;
    }
    if ((v42 & 0x80000000) != 0)
      goto LABEL_80;
    if (j)
      break;
    v44 = *(_DWORD *)(a1 + 4);
    if (*(_QWORD *)(a1 + 840) == a3)
    {
      if ((v44 & 0x80) != 0)
      {
        *v39 = vrev32q_s8(*v39);
        v39[1].i32[0] = bswap32(v39[1].u32[0]);
        *(int8x16_t *)((char *)v39 + 20) = vrev64q_s8(*(int8x16_t *)((char *)v39 + 20));
        *(int8x16_t *)((char *)v39 + 36) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 36));
        *(int8x16_t *)((char *)v39 + 52) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 52));
        memcpy((void *)a1, v39, 0x248uLL);
        v44 = *(_DWORD *)(a1 + 4) | 0x80;
      }
      else
      {
        memcpy((void *)a1, v39, 0x248uLL);
        v44 = *(_DWORD *)(a1 + 4);
      }
    }
    *(_DWORD *)(a1 + 4) = v44 | 0x20;
    memcpy(v39, (const void *)a1, 0x3E8uLL);
    if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
    {
      *v39 = vrev32q_s8(*v39);
      v39[1].i32[0] = bswap32(v39[1].u32[0]);
      *(int8x16_t *)((char *)v39 + 20) = vrev64q_s8(*(int8x16_t *)((char *)v39 + 20));
      *(int8x16_t *)((char *)v39 + 36) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 36));
      *(int8x16_t *)((char *)v39 + 52) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 52));
    }
    if (!a3 || (*(_BYTE *)(a3 + 48) & 3) == 0)
    {
      v45 = *(_DWORD *)(a1 + 4);
      if ((v45 & 1) != 0)
      {
        *(_DWORD *)(a1 + 4) = v45 & 0xFFFFFFDF;
        *(_QWORD *)(a1 + 848) = v6;
        *(_QWORD *)(a1 + 840) = a3;
LABEL_98:
        free(v39);
        return 0;
      }
    }
    if ((v43 & 0xFFF) != 0)
    {
      v74 = __si_assert_copy_extra_2151(0, -1);
      v75 = v74;
      v76 = "";
      if (v74)
        v76 = v74;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 98, "(write_size & ((1 << 12)-1)) == 0", v76);
      free(v75);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v41 = v43;
    if (fd_pwrite(a3, (uint64_t)v39, v43, 0) != v43)
      goto LABEL_80;
    *(_QWORD *)buf = 0;
    v46 = _fd_acquire_fd(a3, buf);
    if ((_DWORD)v46 != -1)
    {
      v47 = v46;
      prot_fsync(v46, (*(_WORD *)(a3 + 56) & 8) == 0);
      _fd_release_fd((_DWORD *)a3, v47, 0, *(uint64_t *)buf);
    }
LABEL_43:
    ;
  }
  v41 = v42;
  if (sdb_pwrite(a3, (uint64_t)v39, v42, j) == v42)
    goto LABEL_43;
  v57 = *__error();
  v58 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "copy_datastore";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 6595;
    v78 = 2080;
    *(_QWORD *)v79 = a1 + 324;
    *(_WORD *)&v79[8] = 1024;
    *(_DWORD *)&v79[10] = v43;
    *(_WORD *)&v79[14] = 2048;
    *(_QWORD *)&v79[16] = j;
    _os_log_error_impl(&dword_1B8270000, v58, OS_LOG_TYPE_ERROR, "%s:%d: %s : ERR: 2: failed to write %d bytes at %lld to to_fdp\n", buf, 0x2Cu);
  }
  *__error() = v57;
LABEL_80:
  v59 = *__error();
  v60 = *__error();
  v61 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "copy_datastore";
    if (v59)
      v67 = v59;
    else
      v67 = 22;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 6634;
    v78 = 1024;
    *(_DWORD *)v79 = v67;
    *(_WORD *)&v79[4] = 2080;
    *(_QWORD *)&v79[6] = a1 + 324;
    _os_log_error_impl(&dword_1B8270000, v61, OS_LOG_TYPE_ERROR, "%s:%d: sdb: copy_datastore: ERR: %d %s: error restoring from master datastore.\n", buf, 0x22u);
  }
  *__error() = v60;
  *(_DWORD *)(a1 + 4) &= 0xFFFFFDDE;
  memcpy(v39, (const void *)a1, 0x1000uLL);
  if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
  {
    *v39 = vrev32q_s8(*v39);
    v39[1].i32[0] = bswap32(v39[1].u32[0]);
    *(int8x16_t *)((char *)v39 + 20) = vrev64q_s8(*(int8x16_t *)((char *)v39 + 20));
    *(int8x16_t *)((char *)v39 + 36) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 36));
    *(int8x16_t *)((char *)v39 + 52) = vrev32q_s8(*(int8x16_t *)((char *)v39 + 52));
  }
  if (fd_pwrite(a3, (uint64_t)v39, 0x1000uLL, 0) == 4096)
  {
    v6 = (_DWORD *)a3;
    goto LABEL_89;
  }
  v62 = *__error();
  v63 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
  {
    v68 = __error();
    v69 = strerror(*v68);
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "copy_datastore";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 6647;
    v78 = 2080;
    *(_QWORD *)v79 = a1 + 324;
    *(_WORD *)&v79[8] = 2080;
    *(_QWORD *)&v79[10] = v69;
    _os_log_error_impl(&dword_1B8270000, v63, OS_LOG_TYPE_ERROR, "%s:%d: %s : copy_datastore:2: ERR: failed to update the header! (%s)\n", buf, 0x26u);
  }
  v6 = (_DWORD *)a3;
LABEL_88:
  *__error() = v62;
LABEL_89:
  fd_sync((uint64_t)v6, 1);
  free(v39);
  if ((v43 & 0x80000000) == 0)
    return 0;
LABEL_94:
  if (!*__error())
    *__error() = 22;
  return *__error();
}

uint64_t load_map(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  NSObject *v8;
  uint64_t result;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  int v27;
  NSObject *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  _BYTE v45[30];
  uint64_t v46;
  __int16 v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v2 = fd_lseek(*(_DWORD **)(a1 + 848), 0, 2);
  v3 = v2;
  v4 = *(unsigned int *)(a1 + 40);
  if (v4 < 0x24
    || ((v5 = *(_DWORD *)(a1 + 36), v5 >= 0x3E8) ? (v6 = v2 < v5 + v4) : (v6 = 1), v6))
  {
    v7 = *__error();
    v8 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v30 = *(_DWORD *)(a1 + 36);
      v29 = *(_DWORD *)(a1 + 40);
      v40 = 136316162;
      v41 = "load_map";
      v42 = 1024;
      v43 = 1137;
      v44 = 1024;
      *(_DWORD *)v45 = v29;
      *(_WORD *)&v45[4] = 1024;
      *(_DWORD *)&v45[6] = v30;
      *(_WORD *)&v45[10] = 2048;
      *(_QWORD *)&v45[12] = v3;
      _os_log_error_impl(&dword_1B8270000, v8, OS_LOG_TYPE_ERROR, "%s:%d: Invalid header ms: %u hs: %u fs: %lld", (uint8_t *)&v40, 0x28u);
    }
    *__error() = v7;
    return 22;
  }
  v10 = (int *)malloc_type_zone_malloc((malloc_zone_t *)sdb_map_zone, v4, 0x73A8F564uLL);
  if (!v10)
    return 12;
  v11 = v10;
  v12 = fd_pread(*(_DWORD **)(a1 + 848), v10, *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 36));
  v13 = v12;
  if (v12 != *(_DWORD *)(a1 + 40))
  {
    *(_DWORD *)(a1 + 4) |= 4u;
    free(v11);
    if (!*__error())
      *__error() = 22;
    v26 = *__error();
    v27 = *__error();
    v28 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v31 = *(_DWORD *)(a1 + 40);
      v40 = 136316418;
      v41 = "load_map";
      v42 = 1024;
      v43 = 1155;
      v44 = 1024;
      *(_DWORD *)v45 = v26;
      *(_WORD *)&v45[4] = 2080;
      *(_QWORD *)&v45[6] = a1 + 324;
      *(_WORD *)&v45[14] = 2048;
      *(_QWORD *)&v45[16] = v13;
      *(_WORD *)&v45[24] = 1024;
      *(_DWORD *)&v45[26] = v31;
      _os_log_error_impl(&dword_1B8270000, v28, OS_LOG_TYPE_ERROR, "%s:%d: load_map error:%d (%s) %zu != %u", (uint8_t *)&v40, 0x32u);
    }
    *__error() = v27;
    *__error() = v26;
    return *__error();
  }
  v14 = v11[2];
  v15 = (unint64_t)v11 + v12;
  v16 = *v11;
  if ((*(_BYTE *)(a1 + 4) & 0x80) != 0 && (v16 == 846029412 || v16 == 829252196))
  {
    v14 = bswap32(v14);
    if ((v14 & 0x80000000) != 0 || (unint64_t)&v11[4 * v14 + 5] > v15)
      goto LABEL_42;
    *(_QWORD *)(a1 + 856) = v11;
    swap_map((unsigned int *)v11);
    *(_QWORD *)(a1 + 856) = 0;
    v16 = *v11;
  }
  if ((v16 - 1684172081) >= 2 || (v14 & 0x80000000) != 0 || (unint64_t)&v11[4 * v14 + 5] > v15)
  {
LABEL_42:
    free(v11);
    return 22;
  }
  v18 = v11[2];
  if ((int)v18 >= 2)
  {
    v19 = 1;
    v20 = 12;
    v21 = 9;
    v22 = 5;
    v23 = 8;
    while (1)
    {
      v24 = &v11[v22];
      LODWORD(v25) = (v11[v23] >> 28) - (v11[v23 + 4] >> 28);
      v25 = (_DWORD)v25 ? (int)v25 : *(_QWORD *)v24 - *(_QWORD *)&v11[v21];
      if (v25 >= 1)
        break;
      ++v19;
      v20 += 4;
      v21 += 4;
      v22 += 4;
      v23 += 4;
      if (v18 == v19)
        goto LABEL_32;
    }
    v32 = *__error();
    v33 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      v34 = *(_QWORD *)v24;
      v35 = *(_QWORD *)&v11[v21];
      v36 = v24[2];
      v37 = (unint64_t)v24[3] >> 28;
      v38 = v11[4 * v19 + 7];
      v39 = (unint64_t)v11[v20] >> 28;
      v40 = 136317442;
      v41 = "load_map";
      v42 = 1024;
      v43 = 1194;
      v44 = 2080;
      *(_QWORD *)v45 = a1 + 324;
      *(_WORD *)&v45[8] = 2048;
      *(_QWORD *)&v45[10] = v19;
      *(_WORD *)&v45[18] = 2048;
      *(_QWORD *)&v45[20] = v34;
      *(_WORD *)&v45[28] = 2048;
      v46 = v35;
      v47 = 2048;
      v48 = v37;
      v49 = 2048;
      v50 = v39;
      v51 = 2048;
      v52 = v36;
      v53 = 2048;
      v54 = v38;
      _os_log_error_impl(&dword_1B8270000, v33, OS_LOG_TYPE_ERROR, "%s:%d: %s : load_map, invalid entry at %ld, oid:0x%.16llx/0x%.16llx, type:0x%lx/0x%lx, pgnum:%ld/%ld\n", (uint8_t *)&v40, 0x62u);
    }
    *__error() = v32;
    goto LABEL_42;
  }
LABEL_32:
  result = 0;
  *(_QWORD *)(a1 + 856) = v11;
  return result;
}

uint64_t load_string_table(uint64_t a1, int a2, int a3, void **a4, unsigned int *a5, unsigned int *a6)
{
  uint64_t v8;
  char *v12;
  int v13;
  const char *v14;
  pthread_key_t v15;
  char *v16;
  unsigned int v17;
  unint64_t v18;
  signed int v19;
  void *v20;
  pthread_rwlock_t *v21;
  uint64_t v22;
  int v23;
  char *v24;
  void *v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  unint64_t v46;
  char *v47;
  const void *v48;
  uint64_t inserted;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  int v53;
  NSObject *v54;
  uint64_t v55;
  int v56;
  NSObject *v57;
  char v58;
  unsigned int i;
  unsigned int v60;
  char v61;
  char *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  int *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int v78;
  uint64_t v79;
  int *v80;
  int v81;
  int *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v87;
  unint64_t data_id;
  unint64_t v89;
  int v90;
  uint64_t v91;
  char *v92;
  unsigned int v93;
  int v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  void **v102;
  int v103;
  int v104;
  NSObject *v105;
  int v106;
  NSObject *v107;
  pthread_mutex_t *v108;
  int v109;
  pthread_override_s *v110;
  char v111;
  _DWORD *v112;
  _DWORD *v113;
  int v114;
  int v115;
  uint64_t v117;
  int v118;
  NSObject *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  int v123;
  NSObject *v124;
  os_log_type_t v125;
  NSObject *v126;
  int v127;
  const char *v128;
  NSObject *v129;
  uint32_t v130;
  NSObject *v131;
  int v132;
  NSObject *v133;
  int v134;
  NSObject *v135;
  os_log_type_t v136;
  NSObject *v137;
  int v138;
  const char *v139;
  NSObject *v140;
  uint32_t v141;
  char *v142;
  char *v143;
  const char *v144;
  char *v145;
  const char *v146;
  void *v147;
  int v148;
  NSObject *v149;
  char *v150;
  const char *v151;
  int v152;
  NSObject *v153;
  unsigned int *v154;
  unint64_t v155;
  int v156;
  int v157;
  uint64_t v158;
  void **v159;
  unsigned int v160;
  unsigned int *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  int *__ptr;
  int *__ptra;
  uint64_t v169;
  void *value_out;
  char __str[4];
  _BYTE v172[10];
  int v173;
  __int16 v174;
  _BYTE v175[10];
  int v176;
  __int16 v177;
  uint64_t v178;
  _BYTE buf[20];
  _BYTE v180[20];
  _DWORD v181[6];
  uint64_t v182;

  v182 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v169 = table_extra_bytes_10004[a2];
  if ((a3 & 0x20000) == 0 || (*(_DWORD *)(a1 + 4) & 8) != 0)
  {
    v20 = malloc_type_calloc(1uLL, 0x48uLL, 0x10B00402199480CuLL);
    *(_QWORD *)(a1 + 8 * v8 + 880) = v20;
    *(_QWORD *)buf = 0;
    *(_DWORD *)v20 = -1;
    *((_QWORD *)v20 + 6) = 64;
    if (a2 > 1)
    {
      if (sdb_uniquing_zone_once != -1)
        dispatch_once(&sdb_uniquing_zone_once, &__block_literal_global_12_11027);
      v21 = (pthread_rwlock_t *)malloc_type_zone_calloc((malloc_zone_t *)sdb_uniquing_zone, 1uLL, 0x8E8uLL, 0x107004098C11689uLL);
      if (!v21)
        goto LABEL_27;
      v22 = 0;
    }
    else
    {
      if (sdb_uniquing_zone_once != -1)
        dispatch_once(&sdb_uniquing_zone_once, &__block_literal_global_10996);
      v21 = (pthread_rwlock_t *)malloc_type_zone_calloc((malloc_zone_t *)sdb_uniquing_zone, 1uLL, 0x8E8uLL, 0x107004098C11689uLL);
      v22 = v169;
      if (!v21)
        goto LABEL_27;
    }
    pthread_rwlock_init(v21, 0);
    v21[1].__sig = v22;
    *(_DWORD *)&v21[11].__opaque[64] = 1024;
    *(_QWORD *)&v21[11].__opaque[56] = malloc_type_zone_calloc((malloc_zone_t *)sdb_uniquing_zone, 1uLL, 0x4000uLL, 0x1050040DB1D6C16uLL);
LABEL_27:
    *((_QWORD *)v20 + 2) = v21;
    *((_QWORD *)v20 + 4) = malloc_type_zone_malloc((malloc_zone_t *)string_table_zone, 8 * *((_QWORD *)v20 + 6), 0x2004093837F09uLL);
    if (a2 <= 1)
      *((_QWORD *)v20 + 5) = malloc_type_zone_malloc((malloc_zone_t *)string_table_zone, *((_QWORD *)v20 + 6), 0xDA02F94AuLL);
    v25 = malloc_type_malloc(0x40uLL, 0x100004052888210uLL);
    if (!*((_QWORD *)v20 + 2)
      || !*((_QWORD *)v20 + 4)
      || (!*((_QWORD *)v20 + 5) ? (v26 = a2 < 2) : (v26 = 0), v26 || !v25))
    {
      free(v25);
      free(*((void **)v20 + 5));
      free(*((void **)v20 + 4));
      free(*((void **)v20 + 2));
      return 12;
    }
    v27 = *(_DWORD *)(a1 + 4 * v8 + 48);
    if (!v27)
    {
      v117 = 0;
      v30 = 0;
      LODWORD(v31) = 1;
LABEL_193:
      *((_QWORD *)v20 + 3) = v117;
      *((_DWORD *)v20 + 14) = v31;
      *((_DWORD *)v20 + 15) = v30;
      if (dword_1EF19FCA8 >= 5)
      {
        v147 = v25;
        v148 = *__error();
        v149 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__str = 67109376;
          *(_DWORD *)v172 = v31;
          *(_WORD *)&v172[4] = 1024;
          *(_DWORD *)&v172[6] = a2;
          _os_log_impl(&dword_1B8270000, v149, OS_LOG_TYPE_DEFAULT, "Loaded %d strings for %d", (uint8_t *)__str, 0xEu);
        }
        *__error() = v148;
        v25 = v147;
      }
      *((_DWORD *)v20 + 16) = 0;
      free(v25);
      return 0;
    }
    __ptr = (int *)v25;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v160 = 16;
    v31 = 1;
    while (1)
    {
      v32 = v30;
      v165 = v30;
      v33 = __ptr;
      if (v30)
      {
        while (1)
        {
          v34 = *v33++;
          if (v27 == v34)
            break;
          if (!--v32)
            goto LABEL_41;
        }
        v118 = *__error();
        v119 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__str = 136315650;
          *(_QWORD *)v172 = "load_string_table";
          *(_WORD *)&v172[8] = 1024;
          v173 = 10399;
          v174 = 1024;
          *(_DWORD *)v175 = v27;
          v139 = "%s:%d: load_string_table: circular string table (pgnum %d)\n";
          v140 = v119;
          v141 = 24;
          goto LABEL_238;
        }
        goto LABEL_196;
      }
LABEL_41:
      *(_QWORD *)buf = malloc_type_zone_valloc((malloc_zone_t *)string_table_zone, 0x4000uLL, 0x8A84ADACuLL);
      if (!*(_QWORD *)buf)
      {
        v50 = 12;
        goto LABEL_230;
      }
      v35 = _page_fetch_with_fd(a1, (void **)buf, v27, 0x4000uLL, 7, __str, 0xFFFFFFFFLL, 0);
      if ((_DWORD)v35)
      {
        v50 = v35;
        v118 = *__error();
        v135 = _SILogForLogForCategory(7);
        v136 = 2 * (dword_1EF19FCA8 < 4);
        if (os_log_type_enabled(v135, v136))
        {
          *(_DWORD *)__str = 67109120;
          *(_DWORD *)v172 = v27;
          _os_log_impl(&dword_1B8270000, v135, v136, "sdb: load_string_table: ERR: failed to load page @ 0x%x\n", (uint8_t *)__str, 8u);
        }
        goto LABEL_229;
      }
      v36 = *(_QWORD *)buf;
      v37 = db_string_page_flags[v8];
      if ((v37 & ~*(_DWORD *)(*(_QWORD *)buf + 12)) != 0)
      {
        v118 = *__error();
        v137 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
        {
          v138 = *(_DWORD *)(*(_QWORD *)buf + 12);
          *(_DWORD *)__str = 136315906;
          *(_QWORD *)v172 = "load_string_table";
          *(_WORD *)&v172[8] = 1024;
          v173 = 10419;
          v174 = 1024;
          *(_DWORD *)v175 = v138;
          *(_WORD *)&v175[4] = 1024;
          *(_DWORD *)&v175[6] = v37;
          v139 = "%s:%d: load_string_table: unexpected page flags (%x %x)\n";
          v140 = v137;
          v141 = 30;
LABEL_238:
          _os_log_error_impl(&dword_1B8270000, v140, OS_LOG_TYPE_ERROR, v139, (uint8_t *)__str, v141);
          v50 = 22;
          goto LABEL_229;
        }
LABEL_196:
        v50 = 22;
        goto LABEL_229;
      }
      *(_QWORD *)(*(_QWORD *)buf + 24) = 0;
      if (v165 >= v160)
      {
        v160 *= 2;
        v66 = (int *)reallocf(__ptr, 4 * v160);
        if (!v66)
        {
          __ptr = 0;
          v50 = 12;
          goto LABEL_230;
        }
        v38 = v66;
        v36 = *(_QWORD *)buf;
      }
      else
      {
        v38 = __ptr;
      }
      __ptr = v38;
      v38[v165] = v27;
      v39 = v36;
      if (v29)
      {
        *(_QWORD *)(v29 + 24) = v36;
        v39 = v28;
      }
      v162 = v39;
      v40 = *(unsigned int *)(v36 + 8);
      if ((int)v40 < 33)
      {
        v29 = v36;
        goto LABEL_101;
      }
      v164 = v36 + v40;
      v41 = (int *)(v36 + 32);
      v42 = 32;
      do
      {
        v46 = *((_QWORD *)v20 + 6);
        if (v46 <= v31)
        {
          *((_QWORD *)v20 + 6) = 2 * v46;
          v64 = malloc_type_zone_realloc((malloc_zone_t *)string_table_zone, *((void **)v20 + 4), 16 * v46, 0x2004093837F09uLL);
          *((_QWORD *)v20 + 4) = v64;
          if (a2 <= 1)
          {
            v65 = malloc_type_zone_realloc((malloc_zone_t *)string_table_zone, *((void **)v20 + 5), *((_QWORD *)v20 + 6), 0xC2F729A5uLL);
            *((_QWORD *)v20 + 5) = v65;
            if (!v65)
              goto LABEL_255;
            v64 = (void *)*((_QWORD *)v20 + 4);
          }
          if (!v64)
          {
LABEL_255:
            v50 = 12;
            v28 = v162;
            goto LABEL_230;
          }
        }
        if (v31 != (*v41 & 0x7FFFFFFF))
        {
          v118 = *__error();
          v131 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
          {
            v132 = *v41 & 0x7FFFFFFF;
            *(_DWORD *)__str = 136316162;
            *(_QWORD *)v172 = "load_string_table";
            *(_WORD *)&v172[8] = 1024;
            v173 = 10471;
            v174 = 2048;
            *(_QWORD *)v175 = v41;
            *(_WORD *)&v175[8] = 1024;
            v176 = v132;
            v177 = 1024;
            LODWORD(v178) = v31;
            _os_log_error_impl(&dword_1B8270000, v131, OS_LOG_TYPE_ERROR, "%s:%d: load_string_table: string id mismatch: dstr (%tx) str_id (%d) str_index (%d)\n", (uint8_t *)__str, 0x28u);
          }
LABEL_228:
          v50 = 22;
          v28 = v162;
LABEL_229:
          *__error() = v118;
LABEL_230:
          *((_QWORD *)v20 + 3) = v28;
          cleanup_string_tables(a1);
          free(__ptr);
          return v50;
        }
        *(_QWORD *)(*((_QWORD *)v20 + 4) + 8 * v31) = v41;
        if (a2 <= 1)
        {
          v47 = (char *)v41 + v169 + 4;
          if (strnlen(v47, v164 - (_QWORD)v47) == v164 - (_QWORD)v47)
          {
            v118 = *__error();
            v133 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__str = 136315906;
              *(_QWORD *)v172 = "load_string_table";
              *(_WORD *)&v172[8] = 1024;
              v173 = 10483;
              v174 = 2048;
              *(_QWORD *)v175 = v41;
              *(_WORD *)&v175[8] = 1024;
              v176 = v31;
              _os_log_error_impl(&dword_1B8270000, v133, OS_LOG_TYPE_ERROR, "%s:%d: load_string_table: read past bound: dstr (%tx) str_index (%d)\n", (uint8_t *)__str, 0x22u);
            }
            goto LABEL_228;
          }
          if (a2)
            v48 = 0;
          else
            v48 = v41 + 1;
          inserted = hash_insert_extended(*((_QWORD *)v20 + 2), v47, v48, (char *)v41);
          if ((_DWORD)inserted == 17)
          {
            v56 = *__error();
            v57 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
            {
              v157 = *v41;
              if (a2)
                v62 = 0;
              else
                v62 = (char *)v41 + v169 + 4;
              v63 = hash_lookup_extended(*((_QWORD *)v20 + 2), v47, v62, 1);
              *(_DWORD *)__str = 136316162;
              *(_QWORD *)v172 = "load_string_table";
              *(_WORD *)&v172[8] = 1024;
              v173 = 10489;
              v174 = 2080;
              *(_QWORD *)v175 = (char *)v41 + v169 + 4;
              *(_WORD *)&v175[8] = 1024;
              v176 = v157;
              v177 = 2048;
              v178 = v63;
              _os_log_error_impl(&dword_1B8270000, v57, OS_LOG_TYPE_ERROR, "%s:%d: load_string_table: hash_insert: string %s (id %d) already exists (id %p)!\n", (uint8_t *)__str, 0x2Cu);
            }
            LODWORD(v50) = 0;
            *__error() = v56;
          }
          else
          {
            v50 = inserted;
            if ((_DWORD)inserted)
            {
LABEL_231:
              v28 = v162;
              goto LABEL_230;
            }
          }
          v58 = 0;
          for (i = v50; ; ++i)
          {
            if (*v47 == 22)
            {
              v58 = 1;
              LODWORD(v50) = i;
            }
            else if (!*v47)
            {
              if ((v58 & 1) != 0)
                v60 = v50;
              else
                v60 = i;
              v45 = v169 + 5 + i;
              if (v60 >= 0xFF)
                v61 = -1;
              else
                v61 = v60;
              *(_BYTE *)(*((_QWORD *)v20 + 5) + v31) = v61;
              goto LABEL_54;
            }
            ++v47;
          }
        }
        v51 = (char *)(v41 + 1);
        v52 = hash_field_insert(*((pthread_rwlock_t **)v20 + 2), (unsigned __int8 *)v41 + 4, (unsigned __int8 *)v41);
        if ((_DWORD)v52)
        {
          v50 = v52;
          if ((_DWORD)v52 != 17)
            goto LABEL_231;
          v53 = *__error();
          v54 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            v156 = *v41;
            v55 = hash_field_lookup(*((pthread_rwlock_t **)v20 + 2), (unsigned __int8 *)v41 + 4);
            *(_DWORD *)__str = 136316162;
            *(_QWORD *)v172 = "load_string_table";
            *(_WORD *)&v172[8] = 1024;
            v173 = 10498;
            v174 = 2080;
            *(_QWORD *)v175 = &v51[v169];
            *(_WORD *)&v175[8] = 1024;
            v176 = v156;
            v177 = 2048;
            v178 = v55;
            _os_log_error_impl(&dword_1B8270000, v54, OS_LOG_TYPE_ERROR, "%s:%d: load_string_table: hash_insert: string %s (id %d) already exists (id %p)!\n", (uint8_t *)__str, 0x2Cu);
          }
          *__error() = v53;
        }
        v43 = *v51;
        if (*v51 < 0)
        {
          if (v43 > 0xBF)
          {
            if (v43 > 0xDF)
            {
              if (v43 > 0xEF)
              {
                v43 = *(int *)((char *)v41 + 5);
                v44 = 5;
              }
              else
              {
                v43 = ((v43 & 0xF) << 24) | (*((unsigned __int8 *)v41 + 5) << 16) | (*((unsigned __int8 *)v41 + 6) << 8) | *((unsigned __int8 *)v41 + 7);
                v44 = 4;
              }
            }
            else
            {
              v43 = ((v43 & 0x1F) << 16) | (*((unsigned __int8 *)v41 + 5) << 8) | *((unsigned __int8 *)v41 + 6);
              v44 = 3;
            }
          }
          else
          {
            v44 = 2;
            v43 = *((unsigned __int8 *)v41 + 5) | ((v43 & 0x3F) << 8);
          }
        }
        else
        {
          v44 = 1;
        }
        v45 = v44 + v43 + 4;
LABEL_54:
        v41 = (int *)((char *)v41 + v45);
        ++v31;
        v42 += v45;
        v29 = *(_QWORD *)buf;
        LODWORD(v40) = *(_DWORD *)(*(_QWORD *)buf + 8);
      }
      while ((int)v40 > v42);
      v31 = v31;
LABEL_101:
      v30 = v165 + 1;
      v27 = *(_DWORD *)(v29 + 20);
      v28 = v162;
      if (!v27)
      {
        if (!*(_QWORD *)(v29 + 24))
        {
          if ((int)v40 <= 31)
            *(_DWORD *)(v29 + 8) = 32;
          v25 = __ptr;
          v117 = v162;
          goto LABEL_193;
        }
        v150 = __si_assert_copy_extra_2151(0, -1);
        v143 = v150;
        v151 = "";
        if (v150)
          v151 = v150;
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 10525, "prev_dnt->_next_ptr==0", v151);
LABEL_242:
        free(v143);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
    }
  }
  bzero(__str, 0x400uLL);
  v12 = fd_name(*(_QWORD *)(a1 + 840), __str, 0x400uLL);
  v13 = strcmp(v12, "store.db");
  v14 = "db";
  if (v13)
    v14 = v12;
  snprintf(__str, 0x400uLL, "%sStr-%d.map", v14, a2 + 1);
  v15 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v15 = __THREAD_SLOT_KEY;
  }
  v16 = (char *)pthread_getspecific(v15);
  HIDWORD(v18) = qos_class_self() - 9;
  LODWORD(v18) = HIDWORD(v18);
  v17 = v18 >> 2;
  if (v17 > 6)
    v19 = 0;
  else
    v19 = dword_1B8630ED0[v17];
  v23 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(_QWORD *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(_BYTE *)(a1 + 796))
    goto LABEL_18;
  if (v19 > 5)
  {
LABEL_203:
    *(_QWORD *)(a1 + 768) = pthread_self();
    goto LABEL_19;
  }
  if (!*(_QWORD *)(a1 + 16 * v19 + 648))
  {
    v120 = v19 - 1;
    v121 = (uint64_t *)(a1 + 16 * v19 + 664);
    while (v120 != 4)
    {
      v122 = *v121;
      v121 += 2;
      ++v120;
      if (v122)
      {
        if (v120 <= 4)
          goto LABEL_18;
        goto LABEL_203;
      }
    }
    goto LABEL_203;
  }
LABEL_18:
  db_rwlock_wait(a1 + 584, v19, 2);
LABEL_19:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v23)
  {
    v152 = *__error();
    v153 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "load_string_table";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 10553;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)v180 = v23;
      _os_log_error_impl(&dword_1B8270000, v153, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
    }
    *__error() = v152;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 10553);
  }
  v24 = v16 - 1;
  if (v16)
    v155 = CIOnThreadCleanUpPush((uint64_t)(v16 - 1), (uint64_t)db_write_unlock, a1 + 584);
  else
    v155 = -1;
  v67 = *(_QWORD *)(a1 + 848);
  v163 = v16;
  if (v67)
    v68 = *(_DWORD *)(v67 + 44);
  else
    v68 = -1;
  *(_DWORD *)&buf[4] = 0;
  *(_DWORD *)buf = v68;
  *(_QWORD *)&buf[8] = __str;
  *(_DWORD *)&buf[16] = v169;
  *(_DWORD *)v180 = 1;
  *(_OWORD *)&v180[4] = 0u;
  memset(v181, 0, sizeof(v181));
  v69 = a1 + 880;
  *(_QWORD *)(a1 + 880 + 8 * v8) = data_map32_init_with_ctx((uint64_t)buf);
  value_out = 0;
  v154 = a5;
  v70 = *a5;
  v71 = *a6;
  __ptra = (int *)*a4;
  if (!*a4)
  {
    if (v70)
    {
      v145 = __si_assert_copy_extra_2151(0, -1);
      v143 = v145;
      v146 = "";
      if (v145)
        v146 = v145;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 10564, "num_string_pages == 0", v146);
      goto LABEL_242;
    }
    __ptra = (int *)malloc_type_malloc(4 * v71, 0x100004052888210uLL);
  }
  v158 = (uint64_t)v24;
  v159 = a4;
  v161 = a6;
  v72 = *(_DWORD *)(a1 + 4 * v8 + 48);
  if (!v72)
  {
    v166 = v71;
    goto LABEL_170;
  }
  v73 = v169 + 5;
  v74 = 1;
  v166 = v71;
  do
  {
    v75 = v70;
    v76 = v70;
    v77 = __ptra;
    if (v70)
    {
      while (1)
      {
        v78 = *v77++;
        if (v72 == v78)
          break;
        if (!--v76)
          goto LABEL_118;
      }
      v104 = *__error();
      v105 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
        goto LABEL_177;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "load_string_table";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 10573;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)v180 = v72;
      v128 = "%s:%d: load_string_table: circular string table (pgnum %d)\n";
      v129 = v105;
      v130 = 24;
      goto LABEL_225;
    }
LABEL_118:
    value_out = malloc_type_valloc(0x4000uLL, 0x5C2F289FuLL);
    if (!value_out)
    {
      v50 = 12;
      goto LABEL_182;
    }
    v79 = _page_fetch_with_fd(a1, &value_out, v72, 0x4000uLL, 7, buf, 0xFFFFFFFFLL, 0);
    if ((_DWORD)v79)
    {
      v50 = v79;
      v123 = *__error();
      v124 = _SILogForLogForCategory(7);
      v125 = 2 * (dword_1EF19FCA8 < 4);
      v101 = v161;
      v108 = (pthread_mutex_t *)(a1 + 584);
      if (os_log_type_enabled(v124, v125))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v72;
        _os_log_impl(&dword_1B8270000, v124, v125, "sdb: load_string_table: ERR: failed to load page @ 0x%x\n", buf, 8u);
      }
      *__error() = v123;
      v102 = v159;
      goto LABEL_184;
    }
    v80 = (int *)value_out;
    v81 = db_string_page_flags[v8];
    if ((v81 & ~*((_DWORD *)value_out + 3)) != 0)
    {
      v104 = *__error();
      v126 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
      {
LABEL_177:
        *__error() = v104;
        v50 = 22;
LABEL_182:
        v101 = v161;
        v102 = v159;
LABEL_183:
        v108 = (pthread_mutex_t *)(a1 + 584);
        goto LABEL_184;
      }
      v127 = *((_DWORD *)value_out + 3);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "load_string_table";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 10593;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)v180 = v127;
      *(_WORD *)&v180[4] = 1024;
      *(_DWORD *)&v180[6] = v81;
      v128 = "%s:%d: load_string_table: unexpected page flags (%x %x)\n";
      v129 = v126;
      v130 = 30;
LABEL_225:
      _os_log_error_impl(&dword_1B8270000, v129, OS_LOG_TYPE_ERROR, v128, buf, v130);
      goto LABEL_177;
    }
    if (v75 >= v166)
    {
      v166 *= 2;
      __ptra = (int *)reallocf(__ptra, 4 * v166);
      if (!__ptra)
      {
        __ptra = 0;
        v50 = 12;
        goto LABEL_182;
      }
      v80 = (int *)value_out;
    }
    __ptra[v75] = v72;
    if (v80[2] < 33)
      goto LABEL_165;
    v82 = v80 + 8;
    v83 = 32;
    if (a2 < 2)
    {
      while (1)
      {
        if (v74 != (*v82 & 0x7FFFFFFF))
          goto LABEL_178;
        v84 = (char *)(v82 + 1);
        if (*((_BYTE *)v82 + v169 + 4))
          break;
        v87 = 0;
        data_id = *(_QWORD *)(v69 + 8 * v8);
        if (data_id)
          goto LABEL_131;
LABEL_138:
        if (data_id != v74)
          goto LABEL_239;
        v91 = (int)v73 + (int)v87;
        v82 = (int *)((char *)v82 + v91);
        ++v74;
        v83 += v91;
        v80 = (int *)value_out;
        if (*((_DWORD *)value_out + 2) <= (int)v83)
          goto LABEL_164;
      }
      v85 = 0;
      while (*((unsigned __int8 *)v82 + v73 + v85++))
        ;
      v87 = v85;
      data_id = *(_QWORD *)(v69 + 8 * v8);
      if (!data_id)
        goto LABEL_138;
LABEL_131:
      v89 = v169 + 1 + v87;
      v90 = *(_DWORD *)(data_id + 216);
      switch(v90)
      {
        case -270471200:
          data_id = _data_map_ext_get_data_id(data_id, *(_DWORD *)(data_id + 220), v84, v89, 1);
          break;
        case 1684300900:
          data_id = _data_map64_get_data_id(data_id, *(_DWORD *)(data_id + 220), v84, v89, 1);
          break;
        case 842150450:
          data_id = _data_map32_get_data_id(data_id, *(_DWORD *)(data_id + 220), v84, v89, 1);
          break;
        default:
          data_id = 0;
          break;
      }
      goto LABEL_138;
    }
    do
    {
      if (v74 != (*v82 & 0x7FFFFFFF))
      {
LABEL_178:
        v106 = *__error();
        v107 = _SILogForLogForCategory(7);
        v101 = v161;
        v108 = (pthread_mutex_t *)(a1 + 584);
        if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
        {
          v134 = *v82 & 0x7FFFFFFF;
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "load_string_table";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 10617;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)v180 = v82;
          *(_WORD *)&v180[8] = 1024;
          *(_DWORD *)&v180[10] = v134;
          *(_WORD *)&v180[14] = 1024;
          *(_DWORD *)&v180[16] = v74;
          _os_log_error_impl(&dword_1B8270000, v107, OS_LOG_TYPE_ERROR, "%s:%d: load_string_table: string id mismatch: dstr (%tx) str_id (%d) str_index (%d)\n", buf, 0x28u);
        }
        *__error() = v106;
        v50 = 22;
        v102 = v159;
        goto LABEL_184;
      }
      v92 = (char *)(v82 + 1);
      v93 = *((unsigned __int8 *)v82 + 4);
      if ((char)v82[1] < 0)
      {
        if (v93 >= 0xC0)
        {
          if (v93 >= 0xE0)
          {
            if (v93 >= 0xF0)
            {
              v93 = *(int *)((char *)v82 + 5);
              v94 = v93 + 5;
              v95 = *(_QWORD *)(v69 + 8 * v8);
              v96 = 5;
              if (!v95)
                goto LABEL_162;
            }
            else
            {
              v93 = ((v93 & 0xF) << 24) | (*((unsigned __int8 *)v82 + 5) << 16) | (*((unsigned __int8 *)v82 + 6) << 8) | *((unsigned __int8 *)v82 + 7);
              v94 = v93 + 4;
              v95 = *(_QWORD *)(v69 + 8 * v8);
              v96 = 4;
              if (!v95)
                goto LABEL_162;
            }
          }
          else
          {
            v93 = ((v93 & 0x1F) << 16) | (*((unsigned __int8 *)v82 + 5) << 8) | *((unsigned __int8 *)v82 + 6);
            v94 = v93 + 3;
            v95 = *(_QWORD *)(v69 + 8 * v8);
            v96 = 3;
            if (!v95)
              goto LABEL_162;
          }
        }
        else
        {
          v94 = (*((unsigned __int8 *)v82 + 5) | ((v93 & 0x3F) << 8)) + 2;
          v95 = *(_QWORD *)(v69 + 8 * v8);
          v93 = *((unsigned __int8 *)v82 + 5) | ((v93 & 0x3F) << 8);
          v96 = 2;
          if (!v95)
            goto LABEL_162;
        }
      }
      else
      {
        v94 = *((unsigned __int8 *)v82 + 4) + 1;
        v95 = *(_QWORD *)(v69 + 8 * v8);
        v96 = 1;
        if (!v95)
          goto LABEL_162;
      }
      v97 = v96 + v93;
      v98 = *(_DWORD *)(v95 + 216);
      switch(v98)
      {
        case -270471200:
          v95 = _data_map_ext_get_data_id(v95, *(_DWORD *)(v95 + 220), v92, v97, 1);
          break;
        case 1684300900:
          v95 = _data_map64_get_data_id(v95, *(_DWORD *)(v95 + 220), v92, v97, 1);
          break;
        case 842150450:
          v95 = _data_map32_get_data_id(v95, *(_DWORD *)(v95 + 220), v92, v97, 1);
          break;
        default:
          v95 = 0;
          break;
      }
LABEL_162:
      if (v74 != v95)
      {
LABEL_239:
        v142 = __si_assert_copy_extra_2151(0, -1);
        v143 = v142;
        v144 = "";
        if (v142)
          v144 = v142;
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 10632, "string_id == str_index", v144);
        goto LABEL_242;
      }
      v99 = v94 + 4;
      v82 = (int *)((char *)v82 + v99);
      ++v74;
      v83 += v99;
      v80 = (int *)value_out;
    }
    while (*((_DWORD *)value_out + 2) > (int)v83);
LABEL_164:
    v74 = v74;
LABEL_165:
    v70 = v75 + 1;
    v72 = v80[5];
    free(v80);
  }
  while (v72);
LABEL_170:
  *v154 = v70;
  if ((*(_BYTE *)(a1 + 804) & 0x14) == 0)
  {
    v50 = 0;
    goto LABEL_182;
  }
  v100 = *(_QWORD *)(v69 + 8 * v8);
  v101 = v161;
  v102 = v159;
  if (!v100)
  {
LABEL_212:
    v50 = 0;
    goto LABEL_183;
  }
  v103 = *(_DWORD *)(v100 + 216);
  switch(v103)
  {
    case -270471200:
      data_map_ext_flush(v100);
      goto LABEL_206;
    case 1684300900:
      data_map64_flush(v100);
LABEL_206:
      v100 = *(_QWORD *)(v69 + 8 * v8);
      if (v100)
      {
        v103 = *(_DWORD *)(v100 + 216);
        break;
      }
      goto LABEL_212;
    case 842150450:
      data_map32_flush(v100);
      goto LABEL_206;
  }
  v108 = (pthread_mutex_t *)(a1 + 584);
  switch(v103)
  {
    case -270471200:
      _data_map_ext_commit(v100);
      break;
    case 1684300900:
      _data_map64_commit(v100);
      break;
    case 842150450:
      _data_map32_commit(v100, 1);
      break;
  }
  v50 = 0;
LABEL_184:
  v109 = pthread_mutex_lock(v108);
  *(_DWORD *)(a1 + 788) = 0;
  v110 = *(pthread_override_s **)(a1 + 760);
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  v111 = *(_DWORD *)(a1 + 780) != 0;
  *(_BYTE *)(a1 + 796) = 0;
  db_rwlock_wakeup((uint64_t)v108, v111, 0);
  pthread_mutex_unlock(v108);
  if (v110)
    pthread_override_qos_class_end_np(v110);
  if (v109)
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 10650);
  if (v163)
  {
    CIOnThreadCleanUpClearItem(v158, v155);
    v112 = &threadData[18 * v158];
    v115 = v112[14];
    v113 = v112 + 14;
    v114 = v115;
    if (v155 + 1 == v115)
      *v113 = v114 - 1;
  }
  *v102 = __ptra;
  *v101 = v166;
  return v50;
}

uint64_t __db2_get_datastore_with_ctx_block_invoke_46(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return (*a3 - *a2);
}

uint64_t __db2_get_datastore_with_ctx_block_invoke_3(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t __db2_get_datastore_with_ctx_block_invoke_2(int a1, void *a2, size_t a3)
{
  return munmap(a2, a3);
}

void __db2_get_datastore_with_ctx_block_invoke(int a1, void *a2)
{
  free(a2);
}

unsigned int *swap_map(unsigned int *result)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  int8x8_t *v5;
  unsigned int v6;

  v1 = result[2];
  v2 = *result;
  v3 = *result == 846029412 || v2 == 829252196;
  v4 = bswap32(v1);
  if (!v3)
    v4 = (int)result[2];
  if (v4 >= 1)
  {
    v5 = (int8x8_t *)(result + 7);
    do
    {
      v5[-1] = (int8x8_t)bswap64(*(_QWORD *)&v5[-1]);
      *v5 = vrev32_s8(*v5);
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  v6 = bswap32(result[1]);
  *result = bswap32(v2);
  result[1] = v6;
  result[2] = bswap32(v1);
  result[4] = bswap32(result[4]);
  return result;
}

uint64_t __db2_shrink_cache_block_invoke(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;

  v3 = _flush_cache_entry(*(_QWORD *)(a1 + 32), 0, a2, 0);
  db_writer_yield_lock(*(_QWORD *)(a1 + 32) + 584);
  return v3;
}

void _db2_clear_cache_locked(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  unint64_t *v5;
  _QWORD v6[5];
  char v7;
  _QWORD v8[9];
  _QWORD v9[9];
  _QWORD v10[3];
  int v11;
  _QWORD v12[3];
  int v13;
  _QWORD v14[3];
  int v15;

  v14[0] = 0;
  v14[1] = v14;
  v15 = 0;
  v14[2] = 0x2000000000;
  v12[0] = 0;
  v12[1] = v12;
  v13 = 0;
  v12[2] = 0x2000000000;
  v10[0] = 0;
  v10[1] = v10;
  v11 = 0;
  v10[2] = 0x2000000000;
  v2 = *(_QWORD **)(a1 + 992);
  v3 = MEMORY[0x1E0C809B0];
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __flush_updateset_locked_block_invoke;
  v9[3] = &unk_1E6E37628;
  v9[8] = 0x17FFFFFFFLL;
  v9[4] = v14;
  v9[5] = v10;
  v9[6] = v12;
  v9[7] = a1;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __flush_updateset_locked_block_invoke_118;
  v8[3] = &unk_1E6E37650;
  v8[4] = v14;
  v8[5] = v10;
  v8[6] = v12;
  v8[7] = a1;
  v8[8] = 0x17FFFFFFFLL;
  v4 = db_updateset_iterate(v2, (uint64_t)v9, (uint64_t)v8);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v12, 8);
  _Block_object_dispose(v14, 8);
  if (!v4)
  {
    v5 = *(unint64_t **)(a1 + 928);
    v6[0] = v3;
    v6[1] = 0x40000000;
    v6[2] = ___db2_clear_cache_locked_block_invoke;
    v6[3] = &__block_descriptor_tmp_133_10312;
    v6[4] = a1;
    v7 = 0;
    db_cache_clear(v5, (uint64_t)v6);
  }
}

uint64_t ___db2_clear_cache_locked_block_invoke(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;

  v3 = _flush_cache_entry(*(_QWORD *)(a1 + 32), 0, a2, 0);
  if (*(_BYTE *)(a1 + 40))
    db_writer_yield_lock(*(_QWORD *)(a1 + 32) + 584);
  return v3;
}

void db2_release_datastore_no_sync(uint64_t a1)
{
  pthread_key_t v2;
  void *v3;
  unsigned int v4;
  unint64_t v5;
  signed int v6;
  int v7;
  uint64_t v8;
  unsigned int i;
  unsigned int v11;
  void *v12;
  void *v13;
  _DWORD *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  pthread_override_s *v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  NSObject *v33;
  _BYTE v34[18];
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v2 = __THREAD_SLOT_KEY;
  }
  v3 = pthread_getspecific(v2);
  HIDWORD(v5) = qos_class_self() - 9;
  LODWORD(v5) = HIDWORD(v5);
  v4 = v5 >> 2;
  if (v4 > 6)
    v6 = 0;
  else
    v6 = dword_1B8630ED0[v4];
  v7 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(_QWORD *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(_BYTE *)(a1 + 796))
    goto LABEL_9;
  if (v6 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v6 + 648))
    {
LABEL_9:
      db_rwlock_wait(a1 + 584, v6, 2);
      goto LABEL_10;
    }
    v29 = v6 - 1;
    v30 = (uint64_t *)(a1 + 16 * v6 + 664);
    while (v29 != 4)
    {
      v31 = *v30;
      v30 += 2;
      ++v29;
      if (v31)
      {
        if (v29 <= 4)
          goto LABEL_9;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 768) = pthread_self();
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v7)
  {
    v32 = *__error();
    v33 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v34 = 136315650;
      *(_QWORD *)&v34[4] = "db2_release_datastore_no_sync";
      *(_WORD *)&v34[12] = 1024;
      *(_DWORD *)&v34[14] = 8851;
      v35 = 1024;
      v36 = v7;
      _os_log_error_impl(&dword_1B8270000, v33, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", v34, 0x18u);
    }
    *__error() = v32;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 8851);
  }
  if (v3)
    CIOnThreadCleanUpPush((uint64_t)v3 - 1, (uint64_t)db_write_unlock, a1 + 584);
  v8 = *(_QWORD *)(a1 + 928);
  db_cache_clear((unint64_t *)v8, (uint64_t)&__block_literal_global_10_11289);
  *(_QWORD *)&v34[8] = 0;
  *(_QWORD *)v34 = *(_QWORD *)v8;
  if (atomic_load((unsigned int *)(v8 + 248)))
  {
    for (i = 0; i < v11; ++i)
    {
      *(_DWORD *)&v34[8] = i;
      _cache_remove((uint64_t *)v34);
      v11 = atomic_load((unsigned int *)(v8 + 248));
    }
  }
  atomic_store(0, (unsigned int *)(v8 + 248));
  free((void *)v8);
  v12 = *(void **)(a1 + 856);
  if (v12)
  {
    free(v12);
    *(_QWORD *)(a1 + 856) = 0;
  }
  cleanup_string_tables(a1);
  v13 = *(void **)(a1 + 864);
  if (v13)
  {
    free(v13);
    *(_QWORD *)(a1 + 864) = 0;
  }
  v14 = *(_DWORD **)(a1 + 848);
  if (v14 != *(_DWORD **)(a1 + 840))
  {
    fd_invalidate(v14);
    fd_release(*(char **)(a1 + 848));
    *(_QWORD *)(a1 + 848) = 0;
    v14 = *(_DWORD **)(a1 + 840);
  }
  fd_invalidate(v14);
  fd_release(*(char **)(a1 + 840));
  *(_QWORD *)(a1 + 840) = 0;
  v15 = *(const void **)(a1 + 808);
  if (v15)
    _Block_release(v15);
  v16 = *(const void **)(a1 + 816);
  if (v16)
    _Block_release(v16);
  v17 = *(const void **)(a1 + 824);
  if (v17)
    _Block_release(v17);
  *(_QWORD *)(a1 + 808) = 0;
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  v18 = *(const void **)(a1 + 832);
  if (v18)
    _Block_release(v18);
  *(_QWORD *)(a1 + 832) = 0;
  v19 = *(const void **)(a1 + 968);
  if (v19)
    _Block_release(v19);
  v20 = *(_QWORD *)(a1 + 992);
  v21 = *(uint64_t **)(v20 + 16);
  if (!v21)
    goto LABEL_43;
  do
  {
    v22 = *((_DWORD *)v21 + 6);
    if (v22)
      v23 = v22 == 3;
    else
      v23 = 1;
    if (!v23)
      free((void *)v21[4]);
    v21 = (uint64_t *)*v21;
  }
  while (v21);
  if (v20)
  {
    v24 = *(_QWORD **)(v20 + 16);
    if (v24)
    {
      do
      {
        v25 = (_QWORD *)*v24;
        operator delete(v24);
        v24 = v25;
      }
      while (v25);
    }
LABEL_43:
    v26 = *(void **)v20;
    *(_QWORD *)v20 = 0;
    if (v26)
      operator delete(v26);
    MEMORY[0x1BCCB06A4](v20, 0x10A0C4087A21FEBLL);
  }
  *(_QWORD *)(a1 + 992) = 0;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_DWORD *)(a1 + 788) = 0;
  v27 = *(pthread_override_s **)(a1 + 760);
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  v28 = *(_DWORD *)(a1 + 780) != 0;
  *(_BYTE *)(a1 + 796) = 0;
  db_rwlock_wakeup(a1 + 584, v28, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v27)
    pthread_override_qos_class_end_np(v27);
  db_rwlock_destroy((pthread_mutex_t *)(a1 + 584));
  free((void *)a1);
}

uint64_t db2_clear_docids(uint64_t a1, _DWORD *a2, _DWORD *a3, int a4, unsigned int (*a5)(_DWORD *, uint64_t), uint64_t a6)
{
  pthread_mutex_t *v12;
  unsigned int v13;
  unint64_t v14;
  signed int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t *v19;
  uint64_t v20;
  pthread_override_s *v21;
  char v22;
  pthread_override_s *v24;
  char v25;
  off_t v26;
  int8x16_t *v27;
  int v28;
  uint64_t v29;
  int v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  __int32 v35;
  __int32 v36;
  __int32 v37;
  __int32 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v44;
  uint64_t v45;
  int v46;
  int *v47;
  int v48;
  __int8 *v49;
  uint64_t v50;
  uint64_t v52;
  unsigned int *v53;
  char *v54;
  BOOL v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  const void *v65;
  size_t v66;
  unsigned int v67;
  __int32 v68;
  unint64_t v69;
  int8x16_t *v70;
  int v71;
  __int32 v72;
  int64_t v73;
  __int8 *v74;
  signed int v75;
  int v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  _BOOL4 v94;
  _BOOL4 v95;
  int v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  int v100;
  NSObject *v101;
  _BOOL4 v102;
  void *v103;
  int v104;
  char *v105;
  char *v106;
  const char *v107;
  int v108;
  _DWORD *v109;
  uint64_t v110;
  int v111;
  unsigned int (*v112)(_DWORD *, uint64_t);
  uint64_t v113;
  char v114;
  __int8 *v115;
  uint64_t v116;
  _DWORD *v117;
  int8x16_t *v118;
  void *v119;
  void *v120;
  _BYTE buf[14];
  _BYTE v122[6];
  char *v123;
  _BYTE v124[6];
  __int16 v125;
  _BYTE v126[14];
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  int v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v120 = 0;
  v12 = (pthread_mutex_t *)(a1 + 584);
  HIDWORD(v14) = qos_class_self() - 9;
  LODWORD(v14) = HIDWORD(v14);
  v13 = v14 >> 2;
  if (v13 > 6)
    v15 = 0;
  else
    v15 = dword_1B8630ED0[v13];
  pthread_mutex_lock(v12);
  if (*(_QWORD *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(_BYTE *)(a1 + 796))
    goto LABEL_7;
  if (v15 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v15 + 648))
    {
LABEL_7:
      db_rwlock_wait((uint64_t)v12, v15, 2);
      goto LABEL_8;
    }
    v97 = v15 - 1;
    v98 = (uint64_t *)(a1 + 16 * v15 + 664);
    while (v97 != 4)
    {
      v99 = *v98;
      v98 += 2;
      ++v97;
      if (v99)
      {
        if (v97 <= 4)
          goto LABEL_7;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 768) = pthread_self();
LABEL_8:
  pthread_mutex_unlock(v12);
  if (a2)
    *a2 = 1;
  if (a4)
    v16 = 32;
  else
    v16 = 0;
  *(_DWORD *)(a1 + 4) |= v16;
  _db2_flush_all_cache(a1, 0);
  v17 = *(unsigned int *)(a1 + 36);
  v18 = *(unsigned int *)(a1 + 40);
  v19 = (int8x16_t *)malloc_type_valloc(*(unsigned int *)(a1 + 44), 0x91FB03D5uLL);
  if (v19)
  {
    v118 = v19;
    if (*a3)
    {
LABEL_15:
      v20 = 89;
      goto LABEL_16;
    }
    v117 = a3;
    v112 = a5;
    v110 = 0;
    v26 = v18 + v17;
    v27 = v19;
    v113 = a6;
    while (1)
    {
      v29 = fd_pread(*(_DWORD **)(a1 + 848), v27, *(unsigned int *)(a1 + 44), v26);
      if (v29 <= 0)
        break;
      if (v27->i32[0] == 846226020 || v27->i32[0] == 1684172850)
      {
        if (db2_page_uncompress_swap(a1, v27, &v120, 0))
        {
          v20 = 0;
          goto LABEL_16;
        }
        if (v120)
          v27 = (int8x16_t *)v120;
        v31 = *__error();
        v32 = _SILogForLogForCategory(7);
        v33 = 2 * (dword_1EF19FCA8 < 4);
        if (os_log_type_enabled(v32, v33))
        {
          v34 = v26 >> *(_DWORD *)(a1 + 12);
          v35 = v27->i32[0];
          v36 = v27->i32[1];
          v37 = v27->i32[2];
          v38 = v27->i32[3];
          *(_DWORD *)buf = 67110144;
          *(_DWORD *)&buf[4] = v34;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v35;
          *(_WORD *)v122 = 1024;
          *(_DWORD *)&v122[2] = v36;
          LOWORD(v123) = 1024;
          *(_DWORD *)((char *)&v123 + 2) = v37;
          HIWORD(v123) = 1024;
          *(_DWORD *)v124 = v38;
          _os_log_impl(&dword_1B8270000, v32, v33, "Read page:%d sig:0x%4.4x sz:0x%4.4x used:0x%4.4x flags:0x%4.4x", buf, 0x20u);
        }
        *__error() = v31;
        if (v27->i32[0] == 1684172850)
        {
          if ((v27->i8[12] & 0xF0) != 0)
            goto LABEL_128;
          v39 = v26 >> *(_DWORD *)(a1 + 12);
          v40 = *(_QWORD *)(a1 + 856);
          v41 = *(int *)(v40 + 8);
          v42 = v110;
          if (v110 >= v41 || v110 <= -1)
            v42 = 0;
          if (v42 >= v41)
          {
LABEL_52:
            if (v42 >= 1)
            {
              v45 = 0;
              v47 = (int *)(v40 + 28);
              do
              {
                v48 = *v47;
                v47 += 4;
                if (v48 == (_DWORD)v39)
                  goto LABEL_59;
              }
              while (v42 != ++v45);
            }
          }
          else
          {
            v44 = (int *)(v40 + 16 * v42 + 28);
            v45 = v42;
            while (1)
            {
              v46 = *v44;
              v44 += 4;
              if (v46 == (_DWORD)v39)
                break;
              if (v41 == ++v45)
                goto LABEL_52;
            }
LABEL_59:
            v110 = v45 + 1;
            v41 = v45;
          }
          v49 = &v27[1].i8[4];
          v50 = v27->i32[2];
          v115 = &v27->i8[v50];
          if ((char *)v27[1].i64 + v27[1].u32[1] + 4 <= &v27->i8[v50] && (int)v50 >= 21)
          {
            v109 = a2;
            v111 = 0;
            v116 = 0;
            v114 = 0;
            v52 = v41 - 1;
            v108 = v16;
            v53 = &v27[1].u32[1];
            while (*v53 != -4)
            {
              v119 = 0;
              v56 = _inflateDBO(a1, v53, &v119, 0, 0x10000, 0);
              if ((_DWORD)v56)
              {
                v20 = v56;
                v100 = *__error();
                v101 = _SILogForLogForCategory(7);
                v102 = os_log_type_enabled(v101, OS_LOG_TYPE_ERROR);
                v103 = v119;
                if (v102)
                {
                  v104 = *v53 + 4;
                  *(_DWORD *)buf = 136316418;
                  *(_QWORD *)&buf[4] = "db2_clear_docids";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)v122 = 9603;
                  *(_WORD *)&v122[4] = 2080;
                  v123 = v49;
                  *(_WORD *)v124 = 1024;
                  *(_DWORD *)&v124[2] = v104;
                  v125 = 2048;
                  *(_QWORD *)v126 = v119;
                  *(_WORD *)&v126[8] = 1024;
                  *(_DWORD *)&v126[10] = v20;
                  _os_log_error_impl(&dword_1B8270000, v101, OS_LOG_TYPE_ERROR, "%s:%d: failed to inflate DBO: mark:%s size:%d mdbo:%p err:%d", buf, 0x32u);
                }
                *__error() = v100;
                if (v103)
                  free(v103);
                a2 = v109;
                v16 = v108;
                goto LABEL_16;
              }
              v57 = v119;
              if (*((_DWORD *)v119 + 3) <= 0x2Fu)
              {
                v105 = __si_assert_copy_extra_2151(0, -1);
                v106 = v105;
                v107 = "";
                if (v105)
                  v107 = v105;
                __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13332, "dbo->used_bytes >= sizeof(external_db_obj)", v107);
                free(v106);
                if (__valid_fs(-1))
                {
                  MEMORY[0xBAD] = -559038737;
                  abort();
                }
                MEMORY[0xC00] = -559038737;
                abort();
              }
              if (v41 < 1)
                goto LABEL_76;
              if ((*(_BYTE *)(a1 + 804) & 1) != 0)
              {
                v60 = (*((_DWORD *)v119 + 10) >> 5) & 1;
                v58 = *(_QWORD *)(a1 + 856);
                v59 = *(_DWORD *)(v58 + 16 * v52 + 32) >> 28;
                if (v60 == v59)
                {
LABEL_75:
                  if ((uint64_t)(*(_QWORD *)v119 - *(_QWORD *)(v58 + 16 * v52 + 20)) <= 0)
                    goto LABEL_80;
                  goto LABEL_76;
                }
              }
              else
              {
                v58 = *(_QWORD *)(a1 + 856);
                v59 = *(_DWORD *)(v58 + 16 * v52 + 32) >> 28;
                if (!v59)
                  goto LABEL_75;
                v60 = 0;
              }
              if (v60 - v59 <= 0)
              {
LABEL_80:
                v61 = *__error();
                v62 = _SILogForLogForCategory(7);
                if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
                {
                  if ((*(_BYTE *)(a1 + 804) & 1) != 0)
                    v76 = (v57[10] >> 5) & 1;
                  else
                    v76 = 0;
                  v77 = *(char **)v57;
                  v78 = *(_QWORD *)(a1 + 856) + 20;
                  v79 = v78 + 16 * (v41 - 1);
                  v80 = *(_QWORD *)v79;
                  v81 = v78 + 16 * v41;
                  v82 = *(_QWORD *)v81;
                  LODWORD(v79) = *(_DWORD *)(v79 + 12) >> 28;
                  LODWORD(v81) = *(_DWORD *)(v81 + 12) >> 28;
                  *(_DWORD *)buf = 136317442;
                  *(_QWORD *)&buf[4] = "db2_clear_docids";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)v122 = 9622;
                  *(_WORD *)&v122[4] = 2048;
                  v123 = v77;
                  *(_WORD *)v124 = 1024;
                  *(_DWORD *)&v124[2] = v76;
                  v125 = 1024;
                  *(_DWORD *)v126 = v41 - 1;
                  *(_WORD *)&v126[4] = 2048;
                  *(_QWORD *)&v126[6] = v80;
                  v127 = 1024;
                  v128 = v79;
                  v129 = 1024;
                  v130 = v41;
                  v131 = 2048;
                  v132 = v82;
                  v133 = 1024;
                  v134 = v81;
                  _os_log_error_impl(&dword_1B8270000, v62, OS_LOG_TYPE_ERROR, "%s:%d: invalid entry oid: 0x%llx type:%d, map[%d] oid:0x%llx type:%d, map[%d] oid:0x%llx type:%d", buf, 0x4Eu);
                }
                *__error() = v61;
                a6 = v113;
                if (v116)
                  goto LABEL_84;
LABEL_77:
                v116 = *(_QWORD *)v57;
                if ((*(_BYTE *)(a1 + 804) & 1) != 0)
                  v111 = (v57[10] >> 5) & 1;
                else
                  v111 = 0;
                goto LABEL_84;
              }
LABEL_76:
              if (!v116)
                goto LABEL_77;
LABEL_84:
              if ((v57[10] & 5) != 0 || !v112(v57, a6))
              {
                v63 = *v53 + 4;
                if ((v114 & 1) != 0)
                  memmove(v49, v53, *v53 + 4);
                v54 = (char *)v53 + v63;
                v49 += v63;
              }
              else
              {
                *((_QWORD *)v57 + 4) = 0;
                v64 = *v53 + 4;
                v54 = (char *)v53 + v64;
                *(_QWORD *)buf = 0;
                serializeDBO(a1);
                v65 = *(const void **)buf;
                v66 = (**(_DWORD **)buf + 4);
                v55 = v66 >= v64;
                v67 = v66 - v64;
                if (v67 != 0 && v55 && v67 > (int)v53 - (int)v49)
                {
                  v68 = v27->i32[2];
                  v69 = v27->i32[1];
                  v70 = v27;
                  if (v69 < v68 + v67)
                  {
                    if (v67 <= 0x1000)
                      v71 = 4096;
                    else
                      v71 = v67;
                    v72 = v69 + v71;
                    v27->i32[1] = v72;
                    v70 = (int8x16_t *)malloc_type_realloc(v27, v72, 0xFECB3565uLL);
                    v120 = v70;
                    v68 = v70->i32[2];
                  }
                  v73 = v54 - (char *)v27;
                  v74 = &v70->i8[v54 - (char *)v27];
                  v49 = &v70->i8[v49 - (__int8 *)v27];
                  v54 = &v74[v67];
                  memmove(v54, v74, v68 - v73 + 20);
                  v75 = v70->i32[2] + v67;
                  v70->i32[2] = v75;
                  v115 = &v70->i8[v75];
                  v65 = *(const void **)buf;
                  v27 = v70;
                }
                memmove(v49, v65, v66);
                v49 += v66;
                free(*(void **)buf);
                v114 = 1;
                a6 = v113;
              }
              free(v119);
              v53 = (unsigned int *)v54;
              v55 = v54 >= v115;
              v52 = v41 - 1;
              if (v55)
                break;
            }
            if ((v114 & 1) == 0)
            {
              a2 = v109;
              v16 = v108;
              goto LABEL_128;
            }
            v27->i32[2] = (_DWORD)v49 - (_DWORD)v27;
            v83 = *(_QWORD *)(a1 + 856);
            v84 = *(_DWORD *)(v83 + 8);
            a2 = v109;
            v16 = v108;
            if (v84)
            {
              v85 = *(int *)(v83 + 16);
              if ((int)v85 >= v84
                || (v86 = v83 + 16 * v85, *(_QWORD *)(v86 + 20) != v116)
                || v111 != *(_DWORD *)(v86 + 32) >> 28)
              {
                if (v84 >= 1)
                {
                  v87 = 0;
                  v88 = *(unsigned int *)(v83 + 8);
                  while (1)
                  {
                    if ((int)v88 + v87 < 0 != __OFADD__((_DWORD)v88, v87))
                      v91 = v88 + v87 + 1;
                    else
                      v91 = v88 + v87;
                    v92 = (v91 >> 1);
                    v93 = v111 - (*(_DWORD *)(v83 + 16 * (int)v92 + 32) >> 28);
                    if (v93)
                    {
                      v89 = v93;
                      v90 = v92;
                      if ((v89 & 0x8000000000000000) == 0)
                        goto LABEL_111;
                    }
                    else
                    {
                      v89 = v116 - *(_QWORD *)(v83 + 16 * ((uint64_t)v91 >> 1) + 20);
                      v90 = v92;
                      if ((v89 & 0x8000000000000000) == 0)
                      {
LABEL_111:
                        if (!v89)
                          goto LABEL_122;
                        v87 = v92 + 1;
                        v90 = v88;
                      }
                    }
                    v88 = v90;
                    if (v87 >= (int)v90)
                    {
                      v94 = v89 > 0;
                      goto LABEL_123;
                    }
                  }
                }
                LODWORD(v92) = 0;
LABEL_122:
                v94 = 0;
LABEL_123:
                v95 = v84 - 1 > (int)v92 && v94;
                v96 = v92 + v95;
                v85 = v96;
                *(_DWORD *)(v83 + 16) = v96;
              }
              page_release(a1, v27, *(_DWORD *)(v83 + 16 * v85 + 28), 5u, 0);
            }
          }
        }
        else if (v118->i32[0] != 1684172850)
        {
          v118->i32[1] = *(_DWORD *)(a1 + 44);
        }
LABEL_128:
        if (v120)
        {
          free(v120);
          v120 = 0;
          v27 = v118;
        }
        if ((~*(_DWORD *)(a1 + 4) & 0x60) == 0)
        {
          v20 = 22;
          goto LABEL_16;
        }
        v28 = v27->i32[1];
        goto LABEL_28;
      }
      v28 = 1 << *(_DWORD *)(a1 + 12);
LABEL_28:
      v26 += v28;
      if (*v117)
        goto LABEL_15;
    }
    v20 = v29;
    if (v29 < 0)
      *(_DWORD *)(a1 + 4) |= 4u;
LABEL_16:
    if (v120)
      free(v120);
    free(v118);
    *(_DWORD *)(a1 + 4) &= ~v16;
    pthread_mutex_lock(v12);
    *(_DWORD *)(a1 + 788) = 0;
    v21 = *(pthread_override_s **)(a1 + 760);
    *(_QWORD *)(a1 + 768) = 0;
    *(_QWORD *)(a1 + 760) = 0;
    v22 = *(_DWORD *)(a1 + 780) != 0;
    *(_BYTE *)(a1 + 796) = 0;
    db_rwlock_wakeup((uint64_t)v12, v22, 0);
    pthread_mutex_unlock(v12);
    if (v21)
      pthread_override_qos_class_end_np(v21);
    if (a2)
      goto LABEL_21;
  }
  else
  {
    *(_DWORD *)(a1 + 4) &= ~v16;
    pthread_mutex_lock(v12);
    *(_DWORD *)(a1 + 788) = 0;
    v24 = *(pthread_override_s **)(a1 + 760);
    *(_QWORD *)(a1 + 768) = 0;
    *(_QWORD *)(a1 + 760) = 0;
    v25 = *(_DWORD *)(a1 + 780) != 0;
    *(_BYTE *)(a1 + 796) = 0;
    db_rwlock_wakeup((uint64_t)v12, v25, 0);
    pthread_mutex_unlock(v12);
    if (v24)
      pthread_override_qos_class_end_np(v24);
    v20 = 12;
    if (a2)
LABEL_21:
      *a2 = 0;
  }
  return v20;
}

uint64_t _db_page_info_cmp(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > *a2;
}

uint64_t db2_apply(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, uint64_t), uint64_t a3)
{
  pthread_key_t v4;
  char *v5;
  unsigned int v6;
  unint64_t v7;
  signed int v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x16_t *v15;
  off_t v16;
  int8x16_t *v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD);
  int v26;
  _DWORD *v27;
  int v28;
  NSObject *v29;
  pthread_key_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  _DWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  void *v38;
  int v39;
  pthread_override_s *v40;
  char v41;
  uint64_t v42;
  uint64_t result;
  int v44;
  pthread_override_s *v45;
  char v46;
  _DWORD *v47;
  _DWORD *v48;
  int v49;
  int v50;
  uint64_t v51;
  off_t v52;
  int8x16_t *i;
  uint64_t v54;
  uint64_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  uint64_t v61;
  unsigned int *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int8x16_t *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(_QWORD);
  char *v79;
  char *v80;
  const char *v81;
  uint64_t v82;
  int v83;
  NSObject *v84;
  int v85;
  int v86;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  void *v97;
  _BYTE buf[12];
  __int16 v99;
  int v100;
  __int16 v101;
  int v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v97 = 0;
  v4 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v4 = __THREAD_SLOT_KEY;
  }
  v5 = (char *)pthread_getspecific(v4);
  HIDWORD(v7) = qos_class_self() - 9;
  LODWORD(v7) = HIDWORD(v7);
  v6 = v7 >> 2;
  if (v6 > 6)
    v8 = 0;
  else
    v8 = dword_1B8630ED0[v6];
  v9 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(_QWORD *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(_BYTE *)(a1 + 796))
    goto LABEL_9;
  if (v8 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v8 + 648))
    {
LABEL_9:
      db_rwlock_wait(a1 + 584, v8, 2);
      goto LABEL_10;
    }
    v72 = v8 - 1;
    v73 = (uint64_t *)(a1 + 16 * v8 + 664);
    while (v72 != 4)
    {
      v74 = *v73;
      v73 += 2;
      v75 = ++v72;
      if (v74)
      {
        if (v75 <= 4)
          goto LABEL_9;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 768) = pthread_self();
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v9)
  {
    v83 = *__error();
    v84 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "db2_apply";
      v99 = 1024;
      v100 = 10180;
      v101 = 1024;
      v102 = v9;
      _os_log_error_impl(&dword_1B8270000, v84, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
    }
    *__error() = v83;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 10180);
  }
  v10 = v5 - 1;
  v11 = (uint64_t)(v5 - 1);
  v90 = v5;
  if (v5)
    v12 = CIOnThreadCleanUpPush((uint64_t)(v5 - 1), (uint64_t)db_write_unlock, a1 + 584);
  else
    v12 = -1;
  v89 = v12;
  _db2_flush_all_cache(a1, 0);
  v13 = *(unsigned int *)(a1 + 36);
  v14 = *(unsigned int *)(a1 + 40);
  v15 = (int8x16_t *)malloc_type_valloc(*(unsigned int *)(a1 + 44), 0xBE0C4ADAuLL);
  if (v15)
  {
    v91 = v11;
    v92 = v10;
    v16 = v14 + v13;
    v17 = v15;
    do
    {
      v18 = __ldxr(exceptionSequenceNum);
      v19 = v18 + 1;
    }
    while (__stxr(v18 + 1, exceptionSequenceNum));
    v20 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, a1, 0x40000000, v19);
    v95 = HIDWORD(v20);
    v96 = v20;
    v93 = v22;
    v94 = v21;
    v23 = *(_QWORD *)&threadData[18 * v20 + 2];
    v24 = v23 + 320 * HIDWORD(v20);
    *(_BYTE *)(v24 + 216) = 0;
    v85 = *(_DWORD *)(v24 + 312);
    v25 = *(void (**)(_QWORD))(v24 + 224);
    if (v25)
      v25(*(_QWORD *)(v23 + 320 * HIDWORD(v20) + 288));
    if (_setjmp((int *)v24))
    {
      v26 = v19;
      v27 = (_DWORD *)(v24 + 312);
      v28 = *__error();
      v29 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "db2_apply";
        v99 = 1024;
        v100 = 10276;
        _os_log_error_impl(&dword_1B8270000, v29, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v28;
      *v27 = v85;
      v30 = __THREAD_SLOT_KEY;
      v11 = v91;
      if (!__THREAD_SLOT_KEY)
      {
        makeThreadId();
        v30 = __THREAD_SLOT_KEY;
      }
      v31 = pthread_getspecific(v30);
      v10 = v92;
      if (!v31 || (v32 = v31, (unint64_t)v31 >= 0x801))
      {
        makeThreadId();
        v32 = pthread_getspecific(__THREAD_SLOT_KEY);
      }
      v33 = (uint64_t)v32 - 1;
      v34 = &threadData[18 * ((uint64_t)v32 - 1)];
      v36 = v34[14];
      v35 = v34 + 14;
      if (v36 > v93)
      {
        do
          CIOnThreadCleanUpPop(v33);
        while (*v35 > v93);
      }
      dropThreadId(v96, 1, v26);
      CICleanUpReset(v96, v94);
      v37 = 0;
      v38 = v97;
      if (!v97)
        goto LABEL_30;
      goto LABEL_29;
    }
    v86 = v19;
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
    *(_BYTE *)(a1 + 796) = 1;
    db_rwlock_wakeup(a1 + 584, 1, 1);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
    v51 = 0;
    v52 = v16;
    for (i = v17; ; i = v57)
    {
      v54 = v51;
      v55 = fd_pread(*(_DWORD **)(a1 + 848), i, *(unsigned int *)(a1 + 44), v52);
      if (v55 <= 0)
      {
        v11 = v91;
        v10 = v92;
        v71 = v85;
        if (v55 < 0)
          *(_DWORD *)(a1 + 4) |= 4u;
        v37 = v55;
        goto LABEL_80;
      }
      if (db2_page_uncompress_swap(a1, i, &v97, 0))
      {
        v37 = v54;
LABEL_79:
        v11 = v91;
        v10 = v92;
        v71 = v85;
LABEL_80:
        v76 = *(_QWORD *)&threadData[18 * v96 + 2];
        v77 = v76 + 320 * v95;
        *(_DWORD *)(v77 + 312) = v71;
        v78 = *(void (**)(_QWORD))(v77 + 232);
        if (v78)
          v78(*(_QWORD *)(v76 + 320 * v95 + 288));
        dropThreadId(v96, 0, v86);
        v38 = v97;
        if (!v97)
        {
LABEL_30:
          free(v17);
          v39 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
          *(_DWORD *)(a1 + 788) = 0;
          v40 = *(pthread_override_s **)(a1 + 760);
          *(_QWORD *)(a1 + 768) = 0;
          *(_QWORD *)(a1 + 760) = 0;
          v41 = *(_DWORD *)(a1 + 780) != 0;
          *(_BYTE *)(a1 + 796) = 0;
          db_rwlock_wakeup(a1 + 584, v41, 0);
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
          if (v40)
            pthread_override_qos_class_end_np(v40);
          if (v39)
            sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 10284);
          v42 = v37;
          result = v37;
          if (!v90)
            return result;
LABEL_39:
          CIOnThreadCleanUpClearItem(v11, v89);
          v47 = &threadData[18 * (_QWORD)v10];
          v50 = v47[14];
          v48 = v47 + 14;
          v49 = v50;
          if (v89 + 1 == v50)
            *v48 = v49 - 1;
          return v42;
        }
LABEL_29:
        free(v38);
        goto LABEL_30;
      }
      v56 = (int8x16_t *)v97;
      if (!v97)
        v56 = i;
      v57 = v56;
      if (v56->i32[0] != 1684172850)
        break;
      if ((v56->i8[12] & 0xF0) != 0)
        goto LABEL_62;
      v58 = v56->i32[2];
      if ((int)v58 < 21)
        goto LABEL_62;
      v59 = (unsigned __int32 *)((char *)v56->u32 + v58);
      v60 = &v56[1].u32[1];
      v61 = v54;
      while (1)
      {
        v62 = v60;
        *(_QWORD *)buf = 0;
        _inflateDBO(a1, v60, (void **)buf, 0, 0, 0);
        v63 = *(void **)buf;
        if (*(_DWORD *)(*(_QWORD *)buf + 12) <= 0x2Fu)
        {
          v79 = __si_assert_copy_extra_2151(0, -1);
          v80 = v79;
          v81 = "";
          if (v79)
            v81 = v79;
          __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13332, "dbo->used_bytes >= sizeof(external_db_obj)", v81);
          free(v80);
          if (__valid_fs(-1))
            v82 = 2989;
          else
            v82 = 3072;
          *(_DWORD *)v82 = -559038737;
          abort();
        }
        if ((*(_BYTE *)(*(_QWORD *)buf + 40) & 5) != 0)
        {
          free(*(void **)buf);
          v64 = v61;
        }
        else
        {
          v65 = a2(a1, *(_QWORD *)buf, a3);
          v66 = v65;
          v67 = v17;
          v68 = v65;
          free(v63);
          v64 = v68;
          v17 = v67;
          if (!v66)
          {
            v37 = 0xFFFFFFFFLL;
            goto LABEL_79;
          }
        }
        if (*v62 == -4)
          break;
        v60 = (unsigned int *)((char *)v62 + *v62 + 4);
        v61 = v64;
        v69 = v64;
        if (v60 >= v59)
          goto LABEL_63;
      }
      v69 = v64;
      v70 = v97;
      if (v97)
        goto LABEL_64;
LABEL_44:
      v52 += v57->i32[1];
      v51 = v69;
    }
    if (v17->i32[0] != 1684172850)
      v17->i32[1] = *(_DWORD *)(a1 + 44);
LABEL_62:
    v69 = v54;
LABEL_63:
    v70 = v97;
    if (v97)
    {
LABEL_64:
      free(v70);
      v97 = 0;
      v57 = v17;
    }
    goto LABEL_44;
  }
  v44 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_DWORD *)(a1 + 788) = 0;
  v45 = *(pthread_override_s **)(a1 + 760);
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  v46 = *(_DWORD *)(a1 + 780) != 0;
  *(_BYTE *)(a1 + 796) = 0;
  db_rwlock_wakeup(a1 + 584, v46, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v45)
    pthread_override_qos_class_end_np(v45);
  if (v44)
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 10196);
  result = 12;
  v42 = 12;
  if (v90)
    goto LABEL_39;
  return result;
}

uint64_t get_string_and_length_for_id_10395(uint64_t a1, unsigned int a2, int a3, _DWORD *a4, int a5)
{
  uint64_t v5;
  _DWORD *v9;
  unint64_t v10;
  unint64_t data_locked;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  int v20;
  NSObject *v21;
  int v22;
  NSObject *v23;
  int v24;
  int v25;
  int v26;
  const char *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  unsigned int v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  const char *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v5 = a3 & 0x7FFFFFFF;
  if ((a3 & 0x7FFFFFFFu) > 0x7FFFFFFD)
    return 0;
  if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
  {
    v9 = *(_DWORD **)(a1 + 8 * a2 + 880);
    v30 = 0;
    v10 = v5;
    if (a5)
      data_locked = data_map_get_data_locked((uint64_t)v9, v5, &v30);
    else
      data_locked = (unint64_t)data_map_get_data((uint64_t)v9, v5, &v30);
    v15 = data_locked;
    if (data_locked)
    {
      if (a4)
      {
        v16 = v30;
        if (data_locked + v30 - 1 <= data_locked)
        {
          v17 = v30;
        }
        else
        {
          v17 = v30;
          do
          {
            if (*(_BYTE *)(data_locked + v16 - 1) == 22 && *(_BYTE *)(data_locked + v16) == 2)
            {
              v17 = v16 - 1;
              v30 = v16 - 1;
            }
            --v16;
          }
          while (data_locked + v16 - 1 > data_locked);
        }
        *a4 = v17;
      }
      return v15;
    }
    v19 = data_map_count((uint64_t)v9);
    if (v19 < v10)
    {
      v29 = v19;
      v20 = *__error();
      v21 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        v25 = *(_DWORD *)(a1 + 4);
        v26 = data_map_valid(v9);
        *(_DWORD *)buf = 136316930;
        v32 = "_get_string_and_length_for_id";
        v33 = 1024;
        v34 = 571;
        v27 = "y";
        if (!v26)
          v27 = "n";
        v35 = 2048;
        v36 = v10;
        v37 = 2048;
        v38 = v29;
        v39 = 1024;
        v40 = a2;
        v41 = 2080;
        v42 = a1 + 324;
        v43 = 1024;
        v44 = v25;
        v45 = 2080;
        v46 = v27;
        _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: Invalid string_id:%lu, map_count:%lu, index:%d, dst->name:%s, dst->flags:0x%x valid:%s", buf, 0x46u);
      }
      *__error() = v20;
      if ((*(_BYTE *)(a1 + 4) & 0x20) != 0)
      {
        v22 = *__error();
        v23 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          v28 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)buf = 136315906;
          v32 = "_get_string_and_length_for_id";
          v33 = 1024;
          v34 = 573;
          v35 = 2080;
          v36 = a1 + 324;
          v37 = 1024;
          LODWORD(v38) = v28;
          _os_log_error_impl(&dword_1B8270000, v23, OS_LOG_TYPE_ERROR, "%s:%d: marking invalid %s flags:0x%x", buf, 0x22u);
        }
        *__error() = v22;
        v24 = *(_DWORD *)(a1 + 4);
        goto LABEL_34;
      }
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 880 + 8 * a2);
    if (*(_DWORD *)(v12 + 56) > v5 && (v13 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 8 * v5)) != 0)
    {
      v14 = table_extra_bytes_10004[a2];
      if (a4)
      {
        *a4 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 40) + v5);
        v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 880 + 8 * a2) + 32) + 8 * v5);
      }
      return v13 + v14 + 4;
    }
    else
    {
      v24 = *(_DWORD *)(a1 + 4);
      if ((v24 & 0x20) != 0)
      {
        v15 = 0;
LABEL_34:
        *(_DWORD *)(a1 + 4) = v24 | 0x40;
        return v15;
      }
      if (SIIsAppleInternal_onceToken != -1)
        dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_4644);
      return 0;
    }
  }
  return v15;
}

uint64_t db2_get_vector_for_id(uint64_t a1, unint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v10 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  data_map_get_data_entry((uint64_t)&v7, a1, a2, &v10, 0);
  if (!v10)
    return 0;
  result = v7;
  *a3 = v8;
  *a4 = v9;
  return result;
}

uint64_t db2_get_vector_for_id_locked(uint64_t a1, unint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v10 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  data_map_get_data_entry((uint64_t)&v7, a1, a2, &v10, 1);
  if (!v10)
    return 0;
  result = v7;
  *a3 = v8;
  *a4 = v9;
  return result;
}

uint64_t grow_string_table_locked(uint64_t a1, int a2, const void *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  unsigned int v16;
  char *v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  const os_unfair_lock *v25;
  int v26;
  unsigned int v27;
  int v28;
  _DWORD *v29;
  unsigned int v30;
  unsigned int v31;
  _DWORD *v32;
  int v33;
  _DWORD *v35;
  uint64_t v37;
  int v38;
  char v39;
  const void *v40;
  int v41;
  NSObject *v42;
  int v43;
  NSObject *v44;
  int v45;
  NSObject *v46;
  char *v47;
  char *v48;
  const char *v49;
  char *v50;
  const char *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  _DWORD *value;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  void *value_out;
  _BYTE buf[14];
  unsigned int v64;
  __int16 v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v11 = a1 + 880;
  v12 = *(_QWORD *)(a1 + 880 + 8 * a2);
  v13 = a2;
  v14 = table_extra_bytes_10004[v13];
  v15 = *(_DWORD **)(v12 + 24);
  v61 = 0;
  value_out = 0;
  v16 = db_string_page_flags[v13];
  *(_QWORD *)buf = 0;
  if (_page_alloc_fetch(a1, (int8x16_t **)buf, 0x4000, (unsigned int *)&v61 + 1, (signed int *)&v61, v16))
    return 0xFFFFFFFFLL;
  v59 = a1;
  v57 = v14;
  value = v15;
  v56 = v11;
  v58 = v12;
  free(*(void **)buf);
  v17 = (char *)malloc_type_zone_valloc((malloc_zone_t *)string_table_zone, 0x4000uLL, 0xCCAA9367uLL);
  if (!v17)
  {
    v22 = HIDWORD(v61);
    v21 = a1;
    goto LABEL_6;
  }
  v18 = v17;
  v54 = a5;
  value_out = v17;
  v19 = HIDWORD(v61);
  v20 = v59;
  if (_page_fetch_with_fd(v59, &value_out, HIDWORD(v61), v61, 7, buf, 0xFFFFFFFFLL, 0))
  {
    free(v18);
    v21 = v59;
    v22 = v19;
LABEL_6:
    page_free(v21, v22, buf, 0);
    return 0xFFFFFFFFLL;
  }
  v23 = a6;
  *((_DWORD *)v18 + 8) = a6;
  *((_DWORD *)v18 + 3) |= v16;
  *(_QWORD *)(v18 + 4) = 0x2000004000;
  *((_DWORD *)v18 + 5) = 0;
  __memcpy_chk();
  v52 = (unsigned __int8 *)(v18 + 36);
  v53 = (unsigned __int8 *)(v18 + 32);
  v24 = &v18[v57 + 36];
  if (a2 > 1)
    memcpy(v24, a3, a4);
  else
    strlcpy(v24, (const char *)a3, (0x2000 - v57));
  v25 = (const os_unfair_lock *)v58;
  if (a2 >= 2)
    v26 = a4;
  else
    v26 = a4 + 1;
  *((_DWORD *)v18 + 2) += v26 + v57 + 4;
  v27 = v19;
  v28 = page_release(v59, v18, v19, 5u, 0);
  if (dword_1EF19FCA8 >= 5)
  {
    v43 = *__error();
    v44 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a2;
      _os_log_impl(&dword_1B8270000, v44, OS_LOG_TYPE_DEFAULT, "Push empty string page %d to disk (%d)", buf, 0xEu);
    }
    *__error() = v43;
    v27 = v19;
    v25 = (const os_unfair_lock *)v58;
    v20 = v59;
    v23 = a6;
  }
  os_unfair_lock_assert_owner(v25 + 16);
  if (v28 || grow_string_table_ptrs(v20, a2))
  {
LABEL_30:
    page_free(v20, v27, buf, 0);
    free(v18);
    return 0xFFFFFFFFLL;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(v56 + 8 * a2) + 68));
  v29 = value;
  v30 = value[5];
  if (v30)
  {
    do
    {
      v31 = v30;
      v29 = (_DWORD *)*((_QWORD *)v29 + 3);
      v30 = v29[5];
    }
    while (v30);
  }
  else
  {
    v31 = *(_DWORD *)(v20 + 4 * a2 + 48);
  }
  v29[5] = v27;
  *((_QWORD *)v29 + 3) = v18;
  v32 = v29;
  v33 = page_release(v20, v29, v31, 5u, 0);
  if (dword_1EF19FCA8 >= 5)
  {
    v45 = *__error();
    v46 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v32;
      *(_WORD *)&buf[12] = 1024;
      v64 = v31;
      v65 = 1024;
      v66 = a2;
      _os_log_impl(&dword_1B8270000, v46, OS_LOG_TYPE_DEFAULT, "Push old dirty string page %p %d to disk (%d)", buf, 0x18u);
    }
    *__error() = v45;
    v20 = v59;
    v23 = a6;
  }
  if (*(_DWORD *)v58 != v31 && *(_DWORD *)v58 != -1)
  {
    v47 = __si_assert_copy_extra_2151(0, -1);
    v48 = v47;
    v49 = "";
    if (v47)
      v49 = v47;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 10845, "string_table->dirty_pgnum==cur_pgnum || (int)string_table->dirty_pgnum==-1", v49);
    goto LABEL_64;
  }
  v35 = *(_DWORD **)(v58 + 8);
  if (v35 != v32 && v35)
  {
    v50 = __si_assert_copy_extra_2151(0, -1);
    v48 = v50;
    v51 = "";
    if (v50)
      v51 = v50;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 10846, "string_table->dirty_page==cur_dnt || string_table->dirty_page==0", v51);
LABEL_64:
    free(v48);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  *(_DWORD *)v58 = v19;
  *(_QWORD *)(v58 + 8) = v18;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(v56 + 8 * a2) + 68));
  if (v33)
  {
    v32[5] = 0;
    *((_QWORD *)v32 + 3) = 0;
    v27 = v19;
    goto LABEL_30;
  }
  *(int32x2_t *)(v58 + 56) = vadd_s32(*(int32x2_t *)(v58 + 56), (int32x2_t)0x100000001);
  *(_QWORD *)(*(_QWORD *)(v58 + 32) + 8 * (v23 & 0x7FFFFFFF)) = v53;
  if (a2 > 1)
  {
    hash_field_insert(*(pthread_rwlock_t **)(v58 + 16), v52, v53);
    goto LABEL_48;
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  while (1)
  {
    if (v52[v37] == 22)
    {
      v39 = 1;
      v38 = v37;
      goto LABEL_36;
    }
    if (!v52[v37])
      break;
LABEL_36:
    ++v37;
  }
  if ((v39 & 1) != 0)
    LODWORD(v37) = v38;
  if (v37 >= 0xFF)
    LOBYTE(v37) = -1;
  *(_BYTE *)(*(_QWORD *)(v58 + 40) + (v23 & 0x7FFFFFFF)) = v37;
  if (v54)
    v40 = v18 + 36;
  else
    v40 = 0;
  hash_insert_extended(*(_QWORD *)(v58 + 16), &v18[v57 + 36], v40, (char *)v53);
LABEL_48:
  if (dword_1EF19FCA8 >= 5)
  {
    v41 = *__error();
    v42 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a2;
      _os_log_impl(&dword_1B8270000, v42, OS_LOG_TYPE_DEFAULT, "New string table page %d (%d)", buf, 0xEu);
    }
    *__error() = v41;
    return a6;
  }
  return v23;
}

uint64_t grow_string_table(uint64_t a1, int a2, const void *a3, int a4, uint64_t a5, uint64_t a6)
{
  pthread_key_t v12;
  void *v13;
  unsigned int v14;
  unint64_t v15;
  signed int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  pthread_override_s *v21;
  char v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  int v26;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  int v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v12 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v12 = __THREAD_SLOT_KEY;
  }
  v13 = pthread_getspecific(v12);
  HIDWORD(v15) = qos_class_self() - 9;
  LODWORD(v15) = HIDWORD(v15);
  v14 = v15 >> 2;
  if (v14 > 6)
    v16 = 0;
  else
    v16 = dword_1B8630ED0[v14];
  v17 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(_QWORD *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(_BYTE *)(a1 + 796))
    goto LABEL_9;
  if (v16 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v16 + 648))
    {
LABEL_9:
      db_rwlock_wait(a1 + 584, v16, 2);
      goto LABEL_10;
    }
    v28 = v16 - 1;
    v29 = (uint64_t *)(a1 + 16 * v16 + 664);
    while (v28 != 4)
    {
      v30 = *v29;
      v29 += 2;
      ++v28;
      if (v30)
      {
        if (v28 <= 4)
          goto LABEL_9;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 768) = pthread_self();
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v17)
  {
    v31 = *__error();
    v32 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v33 = 136315650;
      v34 = "grow_string_table";
      v35 = 1024;
      v36 = 10890;
      v37 = 1024;
      v38 = v17;
      _os_log_error_impl(&dword_1B8270000, v32, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", (uint8_t *)&v33, 0x18u);
    }
    *__error() = v31;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 10890);
  }
  if (v13)
    v18 = CIOnThreadCleanUpPush((uint64_t)v13 - 1, (uint64_t)db_write_unlock, a1 + 584);
  else
    v18 = -1;
  v19 = grow_string_table_locked(a1, a2, a3, a4, a5, a6);
  v20 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_DWORD *)(a1 + 788) = 0;
  v21 = *(pthread_override_s **)(a1 + 760);
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  v22 = *(_DWORD *)(a1 + 780) != 0;
  *(_BYTE *)(a1 + 796) = 0;
  db_rwlock_wakeup(a1 + 584, v22, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v21)
    pthread_override_qos_class_end_np(v21);
  if (v20)
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 10892);
  if (v13)
  {
    CIOnThreadCleanUpClearItem((uint64_t)v13 - 1, v18);
    v23 = &threadData[18 * ((uint64_t)v13 - 1)];
    v26 = v23[14];
    v24 = v23 + 14;
    v25 = v26;
    if (v18 + 1 == v26)
      *v24 = v25 - 1;
  }
  return v19;
}

uint64_t grow_string_table_ptrs(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  void *v7;
  void *v8;
  size_t v9;
  void *v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 8 * a2 + 880);
  v3 = *(_QWORD *)(v2 + 48);
  if (v3 > (*(_DWORD *)(v2 + 56) + 1))
    return 0;
  v7 = malloc_type_zone_malloc((malloc_zone_t *)string_table_zone, 16 * v3, 0x10040436913F5uLL);
  if (v7)
  {
    v8 = v7;
    v9 = 2 * v3;
    if (a2 > 1)
    {
LABEL_7:
      memcpy(v8, *(const void **)(v2 + 32), 8 * *(_QWORD *)(v2 + 48));
      *(_QWORD *)(v2 + 32) = v8;
      (*(void (**)(void))(*(_QWORD *)(a1 + 808) + 16))();
      result = 0;
      *(_QWORD *)(v2 + 48) = v9;
      return result;
    }
    v10 = malloc_type_zone_malloc((malloc_zone_t *)string_table_zone, v9, 0x34A5ABFCuLL);
    if (v10)
    {
      v11 = v10;
      memcpy(v10, *(const void **)(v2 + 40), *(_QWORD *)(v2 + 48));
      *(_QWORD *)(v2 + 40) = v11;
      (*(void (**)(void))(*(_QWORD *)(a1 + 808) + 16))();
      goto LABEL_7;
    }
    free(v8);
    *(_QWORD *)(v2 + 32) = 0;
  }
  return 0xFFFFFFFFLL;
}

BOOL _page_obj_exists_by_oid_and_type(uint64_t a1, int64_t a2, unsigned int a3, unsigned int a4, size_t __nbyte)
{
  _BOOL8 v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char *v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  char *v26;
  char *v27;
  const char *v28;
  int v29;
  NSObject *v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  void *value_out;
  _BYTE buf[12];
  __int16 v36;
  int v37;
  __int16 v38;
  unsigned int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  value_out = 0;
  v9 = 0;
  if (_page_fetch_with_fd(a1, &value_out, a4, __nbyte, 0, buf, 0xFFFFFFFFLL, 0))
    return v9;
  v10 = *((_DWORD *)value_out + 3);
  if ((v10 & 0xF0) != 0)
  {
    v24 = *__error();
    v25 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "_page_obj_exists_by_oid_and_type";
      v36 = 1024;
      v37 = 5592;
      v38 = 1024;
      v39 = a4;
      _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, "%s:%d: page_delete_obj: ERR: tried to read attr name table data! pgnum 0x%x\n", buf, 0x18u);
    }
    *__error() = v24;
    v26 = __si_assert_copy_extra_2151(0, -1);
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5593, v28);
    goto LABEL_56;
  }
  if ((v10 & 8) != 0)
  {
    v29 = *__error();
    v30 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "_page_obj_exists_by_oid_and_type";
      v36 = 1024;
      v37 = 5598;
      v38 = 1024;
      v39 = a4;
      _os_log_error_impl(&dword_1B8270000, v30, OS_LOG_TYPE_ERROR, "%s:%d: page_delete_obj: ERR: page is still compressed! pgnum 0x%x\n", buf, 0x18u);
    }
    *__error() = v29;
    v31 = __si_assert_copy_extra_2151(0, -1);
    v27 = v31;
    v32 = "";
    if (v31)
      v32 = v31;
    __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5599, v32);
LABEL_56:
    free(v27);
    goto LABEL_43;
  }
  *(_QWORD *)buf = 0;
  if (find_slot_for_oid_and_type(a1, (uint64_t)value_out, a2, a3, (unint64_t *)buf, &v33, 1) == 2)
  {
    page_release(a1, value_out, a4, 0, 0);
    return 0;
  }
  v11 = *(_QWORD *)buf + 4;
  v12 = *(unsigned __int8 *)(*(_QWORD *)buf + 4);
  if (*(char *)(*(_QWORD *)buf + 4) < 0)
  {
    v14 = *(unsigned __int8 *)(*(_QWORD *)buf + 4);
    if (v14 > 0xBF)
    {
      if (v14 > 0xDF)
      {
        if (v14 > 0xEF)
        {
          if (v14 > 0xF7)
          {
            if (v14 > 0xFB)
            {
              if (v14 > 0xFD)
              {
                if (v14 == 255)
                {
                  v12 = *(_QWORD *)(*(_QWORD *)buf + 5);
                  v13 = 9;
                }
                else
                {
                  v12 = ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 10) << 8) | *(unsigned __int8 *)(*(_QWORD *)buf + 11);
                  v13 = 8;
                }
              }
              else
              {
                v12 = ((v12 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 9) << 8) | *(unsigned __int8 *)(*(_QWORD *)buf + 10);
                v13 = 7;
              }
            }
            else
            {
              v12 = ((v12 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 8) << 8) | *(unsigned __int8 *)(*(_QWORD *)buf + 9);
              v13 = 6;
            }
          }
          else
          {
            v12 = ((v12 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 7) << 8) | *(unsigned __int8 *)(*(_QWORD *)buf + 8);
            v13 = 5;
          }
        }
        else
        {
          v12 = ((v12 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 6) << 8) | *(unsigned __int8 *)(*(_QWORD *)buf + 7);
          v13 = 4;
        }
      }
      else
      {
        v12 = ((v12 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)buf + 5) << 8) | *(unsigned __int8 *)(*(_QWORD *)buf + 6);
        v13 = 3;
      }
    }
    else
    {
      v12 = *(unsigned __int8 *)(*(_QWORD *)buf + 5) | ((v12 & 0x3F) << 8);
      v13 = 2;
    }
  }
  else
  {
    v13 = 1;
  }
  v15 = *(unsigned __int8 *)(v11 + v13);
  if ((*(char *)(v11 + v13) & 0x80000000) == 0)
    goto LABEL_29;
  if (v15 >= 0xC0)
  {
    if (v15 < 0xE0)
    {
      v16 = v13 + 2;
      goto LABEL_28;
    }
    v20 = __si_assert_copy_extra_2151(0, -1);
    v21 = v20;
    v22 = "";
    if (v20)
      v22 = v20;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v22);
    free(v21);
    if (!__valid_fs(-1))
    {
      v23 = 3072;
LABEL_45:
      *(_DWORD *)v23 = -559038737;
      abort();
    }
LABEL_43:
    v23 = 2989;
    goto LABEL_45;
  }
  v16 = v13 + 1;
LABEL_28:
  v15 = *(unsigned __int8 *)(v11 + v16);
LABEL_29:
  v9 = *(_QWORD *)buf < (unint64_t)value_out + *((int *)value_out + 2)
    && (*(_DWORD *)(a1 + 804) & (v15 >> 5) & 1) == a3
    && v12 == a2;
  page_release(a1, value_out, a4, 0, 0);
  return v9;
}

uint64_t flush_updateset_locked(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD v4[9];
  _QWORD v5[9];
  _QWORD v6[3];
  int v7;
  _QWORD v8[3];
  int v9;
  _QWORD v10[3];
  int v11;

  v10[0] = 0;
  v10[1] = v10;
  v11 = 0;
  v10[2] = 0x2000000000;
  v8[0] = 0;
  v8[1] = v8;
  v9 = 0;
  v8[2] = 0x2000000000;
  v6[0] = 0;
  v6[1] = v6;
  v7 = 0;
  v6[2] = 0x2000000000;
  v1 = *(_QWORD **)(a1 + 992);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __flush_updateset_locked_block_invoke;
  v5[3] = &unk_1E6E37628;
  v5[8] = 2;
  v5[4] = v10;
  v5[5] = v6;
  v5[6] = v8;
  v5[7] = a1;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = __flush_updateset_locked_block_invoke_118;
  v4[3] = &unk_1E6E37650;
  v4[4] = v10;
  v4[5] = v6;
  v4[6] = v8;
  v4[7] = a1;
  v4[8] = 2;
  v2 = db_updateset_iterate(v1, (uint64_t)v5, (uint64_t)v4);
  _Block_object_dispose(v6, 8);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v10, 8);
  return v2;
}

uint64_t __subiter_do_lookups_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;

  v3 = *(unsigned __int8 *)(a2 + 20);
  v4 = *(unsigned __int8 *)(a3 + 20);
  if (v3 < v4)
    return 0xFFFFFFFFLL;
  if (v3 == v4)
    return (*(_DWORD *)(a2 + 16) - *(_DWORD *)(a3 + 16));
  return 1;
}

void subiter_fetch_next_page(uint64_t a1, int a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _QWORD block[5];
  int v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  if (a2 != -1)
  {
    v11 = v4;
    v12 = v5;
    v6 = *(NSObject **)(a1 + 88);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __subiter_fetch_next_page_block_invoke;
    block[3] = &__block_descriptor_tmp_188_10514;
    block[4] = a1;
    v8 = a2;
    v9 = a3;
    v10 = a4;
    dispatch_async(v6, block);
  }
}

uint64_t obj_iter_prefetch_page(uint64_t a1, unsigned int a2, int a3)
{
  int v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint8_t buf[8];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *__error();
  v7 = _SILogForLogForCategory(1);
  v8 = 2 * (dword_1EF19FC90 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&buf[4] = a2;
    LOWORD(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 2) = a3;
    HIWORD(v22) = 2048;
    v23 = v9;
    _os_log_impl(&dword_1B8270000, v7, v8, "Prefetch page %d(%d) for db %p", buf, 0x18u);
  }
  result = (uint64_t)__error();
  *(_DWORD *)result = v6;
  if (a2)
  {
    v11 = *(_QWORD *)(a1 + 24);
    result = db_cache_contains(*(_QWORD *)(v11 + 928), a2, 1);
    if ((result & 1) == 0)
    {
      v22 = 0;
      v12 = (unint64_t)a2 << *(_DWORD *)(v11 + 12);
      v20 = 0;
      *(_QWORD *)buf = v12;
      v22 = (a3 << 12);
      v13 = *(_DWORD **)(v11 + 848);
      v14 = _fd_acquire_fd((uint64_t)v13, &v20);
      do
      {
        v15 = fcntl(v14, 44, buf);
        v16 = g_prot_error_callback;
        if (v15 != -1 || g_prot_error_callback == 0)
          break;
        v18 = v13[10];
        v19 = __error();
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v16 + 16))(v16, v18, *v19, 12) & 1) != 0);
      return (uint64_t)_fd_release_fd(v13, v14, 0, v20);
    }
  }
  return result;
}

uint64_t __subiter_fetch_next_page_block_invoke(uint64_t a1)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(_QWORD);
  int v11;
  NSObject *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void (*v28)(_QWORD);
  uint64_t v29;
  _DWORD *v30;
  int v31;
  NSObject *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  _DWORD *v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  _DWORD *v40;
  unsigned int v41;
  size_t v42;
  char *v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  void (*v54)(_QWORD);
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  void (*v58)(_QWORD);
  char *v59;
  char *v60;
  const char *v61;
  int v62;
  char *v63;
  char *v64;
  const char *v65;
  char *v66;
  char *v67;
  const char *v68;
  uint64_t v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  _BYTE buf[12];
  __int16 v88;
  int v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  makeThreadId();
  do
  {
    v2 = __ldxr(exceptionSequenceNum);
    v3 = v2 + 1;
  }
  while (__stxr(v2 + 1, exceptionSequenceNum));
  v4 = setThreadIdAndInfo(*(_DWORD *)(**(_QWORD **)(a1 + 32) + 4), sFdExceptionCallbacks, 0, 1, v3);
  v85 = HIDWORD(v4);
  v86 = v4;
  v83 = v6;
  v84 = v5;
  v7 = *(_QWORD *)&threadData[18 * v4 + 2];
  v8 = v7 + 320 * HIDWORD(v4);
  *(_BYTE *)(v8 + 216) = 0;
  v9 = *(_DWORD *)(v8 + 312);
  v10 = *(void (**)(_QWORD))(v8 + 224);
  if (v10)
    v10(*(_QWORD *)(v7 + 320 * HIDWORD(v4) + 288));
  v82 = v86;
  v81 = v85;
  v80 = v84;
  v79 = v83;
  if (_setjmp((int *)v8))
  {
    v11 = *__error();
    v12 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "subiter_fetch_next_page_block_invoke";
      v88 = 1024;
      v89 = 12379;
      _os_log_error_impl(&dword_1B8270000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v11;
    *(_DWORD *)(v8 + 312) = v9;
    if (__THREAD_SLOT_KEY)
    {
      v13 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v13)
        goto LABEL_46;
    }
    else
    {
      makeThreadId();
      v13 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v13)
        goto LABEL_46;
    }
    v14 = v13;
    if ((unint64_t)v13 < 0x801)
    {
LABEL_11:
      v15 = (uint64_t)v14 - 1;
      v16 = &threadData[18 * ((uint64_t)v14 - 1)];
      v18 = v16[14];
      v17 = v16 + 14;
      if (v18 > v79)
      {
        do
          CIOnThreadCleanUpPop(v15);
        while (*v17 > v79);
      }
      dropThreadId(v82, 1, v3);
      return CICleanUpReset(v82, v80);
    }
LABEL_46:
    makeThreadId();
    v14 = pthread_getspecific(__THREAD_SLOT_KEY);
    goto LABEL_11;
  }
  do
  {
    v20 = __ldxr(exceptionSequenceNum);
    v21 = v20 + 1;
  }
  while (__stxr(v20 + 1, exceptionSequenceNum));
  v22 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, *(_QWORD *)(**(_QWORD **)(a1 + 32) + 24), 0x40000000, v21);
  v77 = HIDWORD(v22);
  v78 = v22;
  v75 = v24;
  v76 = v23;
  v25 = *(_QWORD *)&threadData[18 * v22 + 2];
  v26 = v25 + 320 * HIDWORD(v22);
  *(_BYTE *)(v26 + 216) = 0;
  v27 = *(_DWORD *)(v26 + 312);
  v28 = *(void (**)(_QWORD))(v26 + 224);
  if (v28)
    v28(*(_QWORD *)(v25 + 320 * HIDWORD(v22) + 288));
  v74 = v78;
  v73 = v77;
  v72 = v76;
  v71 = v75;
  v29 = _setjmp((int *)v26);
  if (!(_DWORD)v29)
  {
    v39 = *(_QWORD *)(a1 + 32);
    v40 = *(_DWORD **)(v39 + 32);
    if (v40)
    {
      v41 = *(_DWORD *)(v39 + 44);
      if (v41 == *(_DWORD *)(a1 + 40))
        goto LABEL_39;
      v29 = page_release(*(_QWORD *)(*(_QWORD *)v39 + 24), v40, v41, 0x18u, 0);
      *(_DWORD *)(v39 + 44) = -1;
      *(_QWORD *)(v39 + 32) = 0;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32))
      {
        v59 = __si_assert_copy_extra_2151(0, -1);
        v60 = v59;
        v61 = "";
        if (v59)
          v61 = v59;
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 12350, "iter->next_dbp == 0", v61);
        free(v60);
        v62 = -1;
        goto LABEL_59;
      }
    }
    *(_QWORD *)buf = 0;
    v70 = 0;
    MEMORY[0x1E0C80A78](v29);
    v43 = (char *)&v69 - v42;
    bzero((char *)&v69 - v42, v42);
    v44 = *(_QWORD *)(a1 + 32);
    v45 = (int *)(v44 + 120);
    *(_QWORD *)(v44 + 192) = v43;
    subiter_attempt_prefetch(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44));
    v46 = **(_QWORD **)(a1 + 32);
    if (*(_BYTE *)(v46 + 77))
      v47 = 57;
    else
      v47 = 25;
    if (!_page_fetch_with_fd(*(_QWORD *)(v46 + 24), (void **)buf, *(_DWORD *)(a1 + 40), (*(_DWORD *)(a1 + 44) << 12), v47 | (*(unsigned __int8 *)(a1 + 48) << 13), &v70, *(unsigned int *)(v46 + 4), v45))
    {
      v48 = *(_QWORD *)buf;
      if (*(_QWORD *)buf)
      {
        v49 = *(_DWORD *)(*(_QWORD *)buf + 12);
        if ((v49 & 8) != 0)
        {
          v63 = __si_assert_copy_extra_2151(0, -1);
          v64 = v63;
          v65 = "";
          if (v63)
            v65 = v63;
          __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: page came back compressed! pgnum 0x%x\n", "sdb2.c", 12369, "(dbp->flags & 0x00000008)==0", v65, *(_DWORD *)(a1 + 40));
          free(v64);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if ((v49 & 0xF0) == 0)
        {
          v50 = *(_QWORD *)(a1 + 32);
          if (v70)
            ++*(_QWORD *)(v50 + 104);
          *(_DWORD *)(v50 + 44) = *(_DWORD *)(a1 + 40);
          *(_QWORD *)(v50 + 32) = v48;
          goto LABEL_39;
        }
        v66 = __si_assert_copy_extra_2151(0, *(_DWORD *)(**(_QWORD **)(a1 + 32) + 4));
        v67 = v66;
        v68 = "";
        if (v66)
          v68 = v66;
        __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: tried to read attr name table data! pgnum 0x%x, flags 0x%x\n", "sdb2.c", 12372, "(dbp->flags & 0x000000f0)==0", v68, *(_DWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)buf + 12));
        free(v67);
        v62 = *(_DWORD *)(**(_QWORD **)(a1 + 32) + 4);
LABEL_59:
        if (__valid_fs(v62))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
    }
LABEL_39:
    v51 = *(_QWORD *)&threadData[18 * v74 + 2];
    v52 = v73;
    v53 = v51 + 320 * v73;
    *(_DWORD *)(v53 + 312) = v27;
    v54 = *(void (**)(_QWORD))(v53 + 232);
    if (v54)
      v54(*(_QWORD *)(v51 + 320 * v52 + 288));
    dropThreadId(v74, 0, v21);
    goto LABEL_42;
  }
  v30 = (_DWORD *)(v26 + 312);
  v31 = *__error();
  v32 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "subiter_fetch_next_page_block_invoke";
    v88 = 1024;
    v89 = 12378;
    _os_log_error_impl(&dword_1B8270000, v32, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
  }
  *__error() = v31;
  *v30 = v27;
  if (__THREAD_SLOT_KEY)
  {
    v33 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v33)
    {
LABEL_48:
      makeThreadId();
      v34 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_23;
    }
  }
  else
  {
    makeThreadId();
    v33 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v33)
      goto LABEL_48;
  }
  v34 = v33;
  if ((unint64_t)v33 >= 0x801)
    goto LABEL_48;
LABEL_23:
  v35 = (uint64_t)v34 - 1;
  v36 = &threadData[18 * ((uint64_t)v34 - 1)];
  v38 = v36[14];
  v37 = v36 + 14;
  if (v38 > v71)
  {
    do
      CIOnThreadCleanUpPop(v35);
    while (*v37 > v71);
  }
  dropThreadId(v74, 1, v21);
  CICleanUpReset(v74, v72);
LABEL_42:
  v55 = *(_QWORD *)&threadData[18 * v82 + 2];
  v56 = v81;
  v57 = v55 + 320 * v81;
  *(_DWORD *)(v57 + 312) = v9;
  v58 = *(void (**)(_QWORD))(v57 + 232);
  if (v58)
    v58(*(_QWORD *)(v55 + 320 * v56 + 288));
  return dropThreadId(v82, 0, v3);
}

uint64_t db2_obj_insert_from_prototype(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;
  _DWORD *v7;
  _DWORD *v8;

  result = db2_store_obj_preamble(*(_DWORD *)(a1 + 804), (uint64_t)a3, 0);
  if (!(_DWORD)result)
  {
    result = db2_store_obj_inner(a1, (uint64_t)a3, 0);
    if (!(_DWORD)result)
    {
      v7 = malloc_type_malloc((a3[3] + 512), 0x90594DFDuLL);
      v8 = v7;
      if (v7)
      {
        memcpy(v7, a3, a3[3]);
        v8[2] = a3[3] + 512;
      }
      result = 0;
      *a2 = v8;
    }
  }
  return result;
}

uint64_t __db2_get_offsets_for_fields_block_invoke(uint64_t a1, int a2, _DWORD *a3)
{
  return (a2 - *a3);
}

uint64_t __db2_get_localized_string_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = a3 + 2;
  if (!strcmp((const char *)(a3 + 2), *(const char **)(a1 + 72)))
  {
    **(_QWORD **)(a1 + 80) = a2;
    **(_QWORD **)(a1 + 88) = a3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v8 = *(_DWORD *)(v7 + 24);
  if (v8 >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    v9 = malloc_type_malloc(16 * v8, 0x10040436913F5uLL);
    if (!v9)
    {
      v14 = *(_QWORD *)(a1 + 32);
      v12 = a1 + 32;
      *(_BYTE *)(*(_QWORD *)(v14 + 8) + 24) = 1;
      return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v12 + 8) + 24);
    }
    v10 = v9;
    memcpy(v9, *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), 8 * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) != 128)
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v10;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) *= 2;
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(_DWORD *)(v7 + 24);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
  *(_DWORD *)(v7 + 24) = v8 + 1;
  *(_QWORD *)(v11 + 8 * v8) = v6;
  v12 = a1 + 32;
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)v12 + 8) + 24);
}

uint64_t db_iterate_localized_field(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  int *v5;
  uint64_t v6;
  unint64_t v7;
  int *i;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;

  v5 = (int *)(a2 + 13);
  v6 = *(unsigned int *)(a2 + 8);
  v7 = a2 + 13 + v6;
  if ((*(_WORD *)(a2 + 2) & 0x10) == 0)
  {
    if (!(_DWORD)v6)
      return result;
    while (1)
    {
      for (i = v5; *(_BYTE *)i != 22; i = (int *)((char *)i + 1))
      {
        if (!*(_BYTE *)i)
          return result;
LABEL_5:
        ;
      }
      if (*((_BYTE *)i + 1) != 2)
        goto LABEL_5;
      result = (*(uint64_t (**)(uint64_t, int *, int *))(a4 + 16))(a4, v5, i);
      if ((result & 1) == 0)
      {
        result = strlen((const char *)i);
        v5 = (int *)((char *)i + result + 1);
        if ((unint64_t)v5 < v7)
          continue;
      }
      return result;
    }
  }
  if ((_DWORD)v6)
  {
    v10 = result;
    do
    {
      v12 = 255;
      result = get_string_and_length_for_id_10395(v10, 1u, *v5, &v12, a3);
      if (result)
        v11 = v12 == 0;
      else
        v11 = 1;
      if (!v11 && *(_BYTE *)(result + v12) == 22 && *(_BYTE *)(result + v12 + 1) == 2)
      {
        result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, result);
        if ((_DWORD)result)
          break;
      }
      ++v5;
    }
    while ((unint64_t)v5 < v7);
  }
  return result;
}

uint64_t __db2_get_localized_string_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!strcmp((const char *)(a3 + 2), *(const char **)(a1 + 48)))
  {
    **(_QWORD **)(a1 + 56) = a2;
    **(_QWORD **)(a1 + 64) = a3;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
}

void *db2_garbage_collect_strings(uint64_t a1, char a2, _DWORD *a3)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  void *v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void (*v23)(_QWORD);
  int v24;
  NSObject *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  unsigned int v31;
  void *v32;
  unint64_t *v34;
  double v35;
  double v36;
  __n128 v37;
  unsigned int *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  void (*v47)(_QWORD);
  pthread_override_s *v48;
  char v49;
  unint64_t *v50;
  int v51;
  char v52;
  int v53;
  void *v54;
  _QWORD v55[2];
  uint64_t (*v56)(uint64_t, uint64_t, int);
  void *v57;
  uint64_t *v58;
  uint64_t *v59;
  void *v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  unsigned int v70;
  char v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  _BYTE *v83;
  _BYTE buf[24];
  int v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a1 + 804) & 0x14) == 0 || (*(_DWORD *)(a1 + 804) & 8) != 0)
    return 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2000000000;
  v85 = 0;
  v7 = MEMORY[0x1E0C809B0];
  v79 = MEMORY[0x1E0C809B0];
  v80 = 0x40000000;
  v81 = (uint64_t)__data_maps_garbage_collect_setup_block_invoke;
  v82 = &unk_1E6E34BC8;
  v83 = buf;
  if (!__data_maps_garbage_collect_setup_block_invoke((uint64_t)&v79, *(_QWORD *)(a1 + 880))
    && !((unsigned int (*)(uint64_t *, _QWORD, uint64_t))v81)(&v79, *(_QWORD *)(a1 + 888), 1)
    && !((unsigned int (*)(uint64_t *, _QWORD, uint64_t))v81)(&v79, *(_QWORD *)(a1 + 896), 2))
  {
    ((void (*)(uint64_t *, _QWORD, uint64_t))v81)(&v79, *(_QWORD *)(a1 + 904), 3);
  }
  v8 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
  v9 = v8 == 4 ? 0 : 22;
  v74 = v7;
  v75 = 0x40000000;
  v76 = (uint64_t)__data_maps_garbage_collect_setup_block_invoke_2;
  v77 = &__block_descriptor_tmp_11_6614;
  v78 = v9;
  v10 = v8;
  do
  {
    if ((int)v10 < 1)
      break;
    v11 = v10 - 1;
    v12 = ((uint64_t (*)(uint64_t *, _QWORD, uint64_t))v76)(&v74, *(_QWORD *)(a1 + 880 + 8 * (v10 - 1)), v10 - 1);
    v10 = v11;
  }
  while (!v12);
  _Block_object_dispose(buf, 8);
  if ((_DWORD)v8 != 4)
    return 0;
  v52 = a2;
  v13 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  *v13 = 0;
  v71 = 0;
  v14 = malloc_type_calloc(1uLL, 0x41C8uLL, 0x10B204011399CF9uLL);
  v79 = 0;
  v80 = (uint64_t)&v79;
  v54 = v14;
  v81 = 0x2000000000;
  LOBYTE(v82) = 0;
  v74 = 0;
  v75 = (uint64_t)&v74;
  LODWORD(v77) = 0;
  v76 = 0x2000000000;
  do
  {
    v15 = __ldxr(exceptionSequenceNum);
    v16 = v15 + 1;
  }
  while (__stxr(v15 + 1, exceptionSequenceNum));
  v17 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v16);
  v69 = HIDWORD(v17);
  v70 = v17;
  v68 = __PAIR64__(v18, v19);
  v20 = *(_QWORD *)&threadData[18 * v17 + 2];
  v21 = v20 + 320 * HIDWORD(v17);
  v22 = *(_DWORD *)(v21 + 312);
  v23 = *(void (**)(_QWORD))(v21 + 224);
  if (v23)
    v23(*(_QWORD *)(v20 + 320 * HIDWORD(v17) + 288));
  v53 = v16;
  v67 = v70;
  v66 = v69;
  v65 = v68;
  if (!_setjmp((int *)v21))
  {
    v51 = v22;
    v64 = 1;
    v34 = db_obj_iter_create_with_filter((int *)a1, 1uLL, (uint64_t)&v64, 0, 0, 0, 0, 0, 0);
    v38 = db_obj_iter_next((uint64_t)v34, &v63, 1, v35, v36, v37);
    if (v38)
    {
      v50 = v34;
      v73 = 0;
      v39 = (uint64_t)v38;
      *(_QWORD *)buf = 0;
      v72 = 0;
      while (db_next_field((_DWORD *)a1, v39, 0, &v73, (uint64_t *)buf, &v72) == 35)
      {
        if (*(_WORD *)v72 == 11 && (*(_WORD *)(v72 + 2) & 0x10) != 0)
        {
          v40 = *(unsigned int *)(v72 + 8);
          if (v40 >= 4)
          {
            v41 = v40 >> 2;
            v42 = (int *)(v72 + 13);
            do
            {
              v43 = *v42++;
              db_get_string_for_id((int *)a1, v43);
              --v41;
            }
            while (v41);
          }
        }
      }
      v34 = v50;
    }
    db_obj_iter_release((uint64_t)v34);
    v32 = v54;
    if (!db2_clear_docids(a1, v13, a3, 0, (unsigned int (*)(_DWORD *, uint64_t))_db2_validate_strings_for_dbo, a1))
    {
      v55[0] = v7;
      v55[1] = 0x40000000;
      v56 = __db2_garbage_collect_strings_block_invoke;
      v57 = &unk_1E6E37560;
      v62 = v52;
      v58 = &v74;
      v59 = &v79;
      v60 = v54;
      v61 = a1;
      if (!__db2_garbage_collect_strings_block_invoke((uint64_t)v55, *(_QWORD *)(a1 + 880), 0)
        && !v56((uint64_t)v55, *(_QWORD *)(a1 + 888), 1)
        && !v56((uint64_t)v55, *(_QWORD *)(a1 + 896), 2))
      {
        v56((uint64_t)v55, *(_QWORD *)(a1 + 904), 3);
      }
    }
    v71 = 1;
    v44 = *(_QWORD *)&threadData[18 * v67 + 2];
    v45 = v66;
    v46 = v44 + 320 * v66;
    *(_DWORD *)(v46 + 312) = v51;
    v47 = *(void (**)(_QWORD))(v46 + 232);
    if (v47)
      v47(*(_QWORD *)(v44 + 320 * v45 + 288));
    dropThreadId(v67, 0, v16);
    if (!v71)
      goto LABEL_52;
    goto LABEL_50;
  }
  v24 = *__error();
  v25 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "db2_garbage_collect_strings";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 15203;
    _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
  }
  *__error() = v24;
  *(_DWORD *)(v21 + 312) = v22;
  if (__THREAD_SLOT_KEY)
  {
    v26 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (v26)
      goto LABEL_26;
  }
  else
  {
    makeThreadId();
    v26 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (v26)
    {
LABEL_26:
      v27 = v26;
      if ((unint64_t)v26 < 0x801)
        goto LABEL_27;
    }
  }
  makeThreadId();
  v27 = pthread_getspecific(__THREAD_SLOT_KEY);
LABEL_27:
  v28 = (uint64_t)v27 - 1;
  v29 = &threadData[18 * ((uint64_t)v27 - 1)];
  v31 = v29[14];
  v30 = v29 + 14;
  if (v31 > v65)
  {
    do
      CIOnThreadCleanUpPop(v28);
    while (*v30 > v65);
  }
  dropThreadId(v67, 1, v53);
  CICleanUpReset(v67, HIDWORD(v65));
  v32 = v54;
  if (!v71)
    goto LABEL_52;
LABEL_50:
  if (*(_DWORD *)(v75 + 24) == 4 && *(_BYTE *)(v80 + 24))
    goto LABEL_56;
LABEL_52:
  if (v32)
  {
    if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
      data_maps_garbage_compact_collect_commit(a1 + 880, (uint64_t)v32, 1);
    free(v32);
    v32 = 0;
LABEL_56:
    if (!*v13)
      goto LABEL_61;
LABEL_59:
    *(_DWORD *)(a1 + 4) &= ~0x20u;
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
    *(_DWORD *)(a1 + 788) = 0;
    v48 = *(pthread_override_s **)(a1 + 760);
    *(_QWORD *)(a1 + 768) = 0;
    *(_QWORD *)(a1 + 760) = 0;
    v49 = *(_DWORD *)(a1 + 780) != 0;
    *(_BYTE *)(a1 + 796) = 0;
    db_rwlock_wakeup(a1 + 584, v49, 0);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
    if (v48)
      pthread_override_qos_class_end_np(v48);
    goto LABEL_61;
  }
  if (*v13)
    goto LABEL_59;
LABEL_61:
  free(v13);
  _Block_object_dispose(&v74, 8);
  _Block_object_dispose(&v79, 8);
  return v32;
}

uint64_t _db2_validate_strings_for_dbo(uint64_t a1, int *a2)
{
  unint64_t v4;
  unint64_t v5;
  int *v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v11 = 0;
  v9 = 0;
  v10 = 0;
  while (db_next_field(a2, a1, 0, &v11, &v10, &v9) == 35)
  {
    if (*(_WORD *)v9 == 11 && (*(_WORD *)(v9 + 2) & 0x10) != 0)
    {
      v4 = *(unsigned int *)(v9 + 8);
      if (v4 >= 4)
      {
        v5 = v4 >> 2;
        v6 = (int *)(v9 + 13);
        do
        {
          v7 = *v6++;
          db_get_string_for_id(a2, v7);
          --v5;
        }
        while (v5);
      }
    }
  }
  return 0;
}

uint64_t __db2_garbage_collect_strings_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  char v6;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t FirstIndexOfBit;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  NSObject *v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  int v29;
  NSObject *v30;
  NSObject *v31;
  char *v32;
  char *v33;
  int v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  size_t v39;
  size_t v40;
  size_t v41;
  size_t v42;
  size_t v43;
  NSObject *v44;
  char *v45;
  uint64_t v46;
  uint8_t *v47;
  NSObject *v48;
  const char *v49;
  uint32_t v50;
  NSObject *v51;
  char *v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  char *v61;
  char *v62;
  const char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  NSObject *v68;
  char *v69;
  uint64_t v70;
  NSObject *v71;
  const char *v72;
  int v73;
  NSObject *v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  int v79;
  NSObject *v80;
  NSObject *v81;
  const char *v82;
  uint32_t v83;
  char *v84;
  NSObject *v85;
  uint64_t v86;
  int v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  size_t v93;
  size_t v94;
  size_t v95;
  size_t v96;
  size_t v97;
  int v98;
  NSObject *v99;
  char *v100;
  uint64_t v101;
  uint8_t *v102;
  NSObject *v103;
  const char *v104;
  uint32_t v105;
  int v106;
  NSObject *v107;
  NSObject *v108;
  uint64_t v109;
  int v110;
  char *v111;
  NSObject *v112;
  NSObject *v113;
  const char *v114;
  uint32_t v115;
  char *v116;
  NSObject *v117;
  char *v118;
  int v119;
  NSObject *v120;
  os_log_type_t v121;
  char *v122;
  char *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  char v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  char v145;
  _BYTE v146[18];
  __int16 v147;
  char *v148;
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  uint8_t *v156;
  uint8_t buf[64];
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint8_t v167[48];
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  CFRange v182;
  CFRange v183;

  v181 = *MEMORY[0x1E0C80C00];
  if (a3)
    v5 = 1;
  else
    v5 = 30;
  if (*(_BYTE *)(a1 + 64))
    v6 = (8 * (a3 < 2)) | 6;
  else
    v6 = 8 * (a3 < 2);
  if (!a2)
    goto LABEL_84;
  v8 = *(_DWORD *)(a2 + 216);
  if (v8 == -270471200)
  {
    if (*(_QWORD *)(a2 + 448))
    {
      _data_map_ext_wrlock(a2);
      _data_map_ext_unlock(a2);
    }
    goto LABEL_84;
  }
  v9 = *(_QWORD *)(a1 + 48);
  if (v8 == 1684300900)
  {
    if (!*(_QWORD *)(a2 + 4552))
      goto LABEL_84;
    _data_map64_wrlock(a2);
    v16 = *(_QWORD *)(a2 + 4496);
    if (v16 - 1 <= v5)
      goto LABEL_76;
    v140 = v6;
    v183.length = v16 - v5;
    v142 = *(_QWORD *)(a2 + 4552);
    v183.location = v5;
    FirstIndexOfBit = CFBitVectorGetFirstIndexOfBit(*(CFBitVectorRef *)(v142 + 16), v183, 0);
    v14 = 0;
    if (FirstIndexOfBit < v5
      || (v18 = FirstIndexOfBit, v14 = 0, FirstIndexOfBit > v16 - 1)
      || FirstIndexOfBit >= *(_QWORD *)(a2 + 4496))
    {
LABEL_77:
      _data_map64_unlock(a2);
      if (!(_DWORD)v14)
        goto LABEL_84;
      return v14;
    }
    v130 = (_BYTE *)(a2 + 4561);
    v132 = a2 + 272;
    v19 = 16 * FirstIndexOfBit;
    v20 = v142;
    while (1)
    {
      if ((v18 & 0x8000000000000000) != 0)
      {
        v61 = __si_assert_copy_extra_268();
        v62 = v61;
        v63 = "";
        if (v61)
          v63 = v61;
        __message_assert(v61, "bit_vector.h", 96, "bitIndex >= 0", v63);
        free(v62);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (*(_QWORD *)v20 > (int64_t)v18 && CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v20 + 16), v18))
        goto LABEL_26;
      if (*(_QWORD *)(a2 + 4496) <= v18)
      {
        v179 = 0u;
        v180 = 0u;
        v177 = 0u;
        v178 = 0u;
        v175 = 0u;
        v176 = 0u;
        v173 = 0u;
        v174 = 0u;
        v171 = 0u;
        v172 = 0u;
        v169 = 0u;
        v170 = 0u;
        v168 = 0u;
        memset(v167, 0, sizeof(v167));
        v29 = *__error();
        v30 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          v134 = *(_QWORD *)(a2 + 4496);
          v32 = fd_name(*(_QWORD *)(a2 + 240), (char *)v167, 0x100uLL);
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "_data_map64_get_offset_entry";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 362;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v18;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v134;
          *(_WORD *)&buf[38] = 2048;
          *(_QWORD *)&buf[40] = a2;
          *(_WORD *)&buf[48] = 2080;
          *(_QWORD *)&buf[50] = v32;
          _os_log_error_impl(&dword_1B8270000, v30, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p %s", buf, 0x3Au);
        }
        *__error() = v29;
        goto LABEL_41;
      }
      v21 = *(_QWORD *)(a2 + 4440);
      if (!v21)
        goto LABEL_26;
      v22 = *(_QWORD *)(v21 + v19);
      if (v22 < 2)
        goto LABEL_26;
      *(_QWORD *)v146 = 0;
      *(_QWORD *)&v146[8] = 0;
      LOBYTE(v143) = 0;
      v23 = *(_QWORD *)(a2 + 288);
      if (v23 > v22)
        break;
      v179 = 0u;
      v180 = 0u;
      v177 = 0u;
      v178 = 0u;
      v175 = 0u;
      v176 = 0u;
      v173 = 0u;
      v174 = 0u;
      v171 = 0u;
      v172 = 0u;
      v169 = 0u;
      v170 = 0u;
      v168 = 0u;
      memset(v167, 0, sizeof(v167));
      v133 = *__error();
      v31 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        v127 = *(_QWORD *)(a2 + 288);
        v33 = fd_name(*(_QWORD *)(a2 + 240), (char *)v167, 0x100uLL);
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "_data_map64_get_data_entry";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 379;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v22;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v127;
        *(_WORD *)&buf[38] = 2048;
        *(_QWORD *)&buf[40] = a2;
        *(_WORD *)&buf[48] = 2080;
        *(_QWORD *)&buf[50] = v33;
        v27 = v31;
        v28 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
LABEL_43:
        _os_log_error_impl(&dword_1B8270000, v27, OS_LOG_TYPE_ERROR, v28, buf, 0x3Au);
      }
LABEL_40:
      *__error() = v133;
LABEL_41:
      v20 = v142;
LABEL_26:
      ++v18;
      v19 += 16;
      if (v16 == v18)
        goto LABEL_76;
    }
    data_entry_restore(v132, v22, v23, (unsigned int *)v146, &v143);
    if (!(_BYTE)v143)
    {
      if ((v140 & 4) == 0 && v9)
      {
        v14 = _data_map64_garbage_compact_collect(a2);
        goto LABEL_77;
      }
      v55 = *(_QWORD *)(a2 + 4496);
      if (v55 - 1 < v18)
      {
        LODWORD(v56) = 0;
LABEL_75:
        if ((v140 & 2) != 0)
        {
          v87 = *__error();
          v88 = _SILogForLogForCategory(0);
          v89 = 2 * (gSILogLevels[0] < 4);
          if (os_log_type_enabled(v88, v89))
          {
            *(_DWORD *)v167 = 67109376;
            *(_DWORD *)&v167[4] = v56;
            *(_WORD *)&v167[8] = 2048;
            *(_QWORD *)&v167[10] = a2;
            _os_log_impl(&dword_1B8270000, v88, v89, "Found %d deleted strings from %p", v167, 0x12u);
          }
          v14 = 0;
          *__error() = v87;
        }
        else
        {
LABEL_76:
          v14 = 0;
        }
        goto LABEL_77;
      }
      v56 = 0;
      v135 = *(_DWORD *)(a2 + 220);
      while (2)
      {
        if ((v18 & 0x8000000000000000) != 0)
        {
          v122 = __si_assert_copy_extra_268();
          v123 = v122;
          v124 = "";
          if (v122)
            v124 = v122;
          __message_assert(v122, "bit_vector.h", 96, "bitIndex >= 0", v124);
          free(v123);
          if (__valid_fs(-1))
            v125 = 2989;
          else
            v125 = 3072;
          *(_DWORD *)v125 = -559038737;
          abort();
        }
        if (*(_QWORD *)v20 > (int64_t)v18 && CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v20 + 16), v18))
        {
LABEL_96:
          ++v18;
          v19 += 16;
          if (v55 == v18)
            goto LABEL_75;
          continue;
        }
        break;
      }
      if (*(_QWORD *)(a2 + 4496) <= v18)
      {
        v179 = 0u;
        v180 = 0u;
        v177 = 0u;
        v178 = 0u;
        v175 = 0u;
        v176 = 0u;
        v173 = 0u;
        v174 = 0u;
        v171 = 0u;
        v172 = 0u;
        v169 = 0u;
        v170 = 0u;
        v168 = 0u;
        memset(v167, 0, sizeof(v167));
        v73 = *__error();
        v74 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
        {
          v137 = v56;
          v77 = *(_QWORD *)(a2 + 4496);
          v78 = fd_name(*(_QWORD *)(a2 + 240), (char *)v167, 0x100uLL);
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "_data_map64_get_offset_entry";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 362;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v18;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v77;
          v56 = v137;
          *(_WORD *)&buf[38] = 2048;
          *(_QWORD *)&buf[40] = a2;
          *(_WORD *)&buf[48] = 2080;
          *(_QWORD *)&buf[50] = v78;
          _os_log_error_impl(&dword_1B8270000, v74, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p %s", buf, 0x3Au);
        }
        *__error() = v73;
      }
      else
      {
        v64 = *(_QWORD *)(a2 + 4440);
        if (!v64)
          goto LABEL_96;
        v136 = v56;
        v65 = *(_QWORD *)(v64 + v19);
        if (v65 < 2)
        {
          v56 = v136;
          goto LABEL_96;
        }
        *(_QWORD *)v146 = 0;
        *(_QWORD *)&v146[8] = 0;
        LOBYTE(v143) = 0;
        v66 = *(_QWORD *)(a2 + 288);
        if (v66 <= v65)
        {
          v179 = 0u;
          v180 = 0u;
          v177 = 0u;
          v178 = 0u;
          v175 = 0u;
          v176 = 0u;
          v173 = 0u;
          v174 = 0u;
          v171 = 0u;
          v172 = 0u;
          v169 = 0u;
          v170 = 0u;
          v168 = 0u;
          memset(v167, 0, sizeof(v167));
          v67 = *__error();
          v75 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            v126 = *(_QWORD *)(a2 + 288);
            v84 = fd_name(*(_QWORD *)(a2 + 240), (char *)v167, 0x100uLL);
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "_data_map64_get_data_entry";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 379;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v65;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v126;
            *(_WORD *)&buf[38] = 2048;
            *(_QWORD *)&buf[40] = a2;
            *(_WORD *)&buf[48] = 2080;
            *(_QWORD *)&buf[50] = v84;
            v71 = v75;
            v72 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
LABEL_128:
            _os_log_error_impl(&dword_1B8270000, v71, OS_LOG_TYPE_ERROR, v72, buf, 0x3Au);
          }
LABEL_111:
          *__error() = v67;
          v76 = v136;
        }
        else
        {
          data_entry_restore(v132, v65, v66, (unsigned int *)v146, &v143);
          if ((_BYTE)v143)
          {
            v179 = 0u;
            v180 = 0u;
            v177 = 0u;
            v178 = 0u;
            v175 = 0u;
            v176 = 0u;
            v173 = 0u;
            v174 = 0u;
            v171 = 0u;
            v172 = 0u;
            v169 = 0u;
            v170 = 0u;
            v168 = 0u;
            memset(v167, 0, sizeof(v167));
            v67 = *__error();
            v68 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
            {
              v69 = fd_name(*(_QWORD *)(a2 + 240), (char *)v167, 0x100uLL);
              v70 = *(_QWORD *)(a2 + 288);
              *(_DWORD *)buf = 136316418;
              *(_QWORD *)&buf[4] = "_data_map64_get_data_entry";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 375;
              *(_WORD *)&buf[18] = 2080;
              *(_QWORD *)&buf[20] = v69;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v65;
              *(_WORD *)&buf[38] = 2048;
              *(_QWORD *)&buf[40] = v70;
              *(_WORD *)&buf[48] = 2048;
              *(_QWORD *)&buf[50] = *(unsigned int *)v146;
              v71 = v68;
              v72 = "%s:%d: data_entry_restore failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx";
              goto LABEL_128;
            }
            goto LABEL_111;
          }
          if ((v140 & 2) != 0)
          {
            if (a3 <= 1)
            {
              if (gSILogLevels[0] >= 5)
              {
                v79 = *__error();
                v85 = _SILogForLogForCategory(0);
                if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
                {
                  v86 = *(_QWORD *)&v146[8] + *(unsigned int *)(a2 + 220);
                  *(_DWORD *)v167 = 67109890;
                  *(_DWORD *)&v167[4] = v18;
                  *(_WORD *)&v167[8] = 1024;
                  *(_DWORD *)&v167[10] = *(_DWORD *)v146;
                  *(_WORD *)&v167[14] = 2080;
                  *(_QWORD *)&v167[16] = v86;
                  *(_WORD *)&v167[24] = 2048;
                  *(_QWORD *)&v167[26] = a2;
                  v81 = v85;
                  v82 = "Delete data for id:%d size:%d %s from %p";
                  v83 = 34;
LABEL_131:
                  _os_log_impl(&dword_1B8270000, v81, OS_LOG_TYPE_DEFAULT, v82, v167, v83);
                }
LABEL_132:
                *__error() = v79;
              }
            }
            else if (gSILogLevels[0] >= 5)
            {
              v79 = *__error();
              v80 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v167 = 67109632;
                *(_DWORD *)&v167[4] = v18;
                *(_WORD *)&v167[8] = 1024;
                *(_DWORD *)&v167[10] = *(_DWORD *)v146;
                *(_WORD *)&v167[14] = 2048;
                *(_QWORD *)&v167[16] = a2;
                v81 = v80;
                v82 = "Delete data for id:%d size:%d from %p";
                v83 = 24;
                goto LABEL_131;
              }
              goto LABEL_132;
            }
          }
          v76 = v136 + 1;
          if ((v140 & 4) == 0)
          {
            if (!v136)
            {
              if (!*v130)
              {
                _data_map64_dirty(a2);
                *v130 = 1;
              }
              if (!*(_BYTE *)(a2 + 4563))
              {
                _data_map64_dirty(a2);
                *(_BYTE *)(a2 + 4563) = 1;
              }
            }
            *(_OWORD *)(v64 + v19) = xmmword_1B8631BC0;
            bzero(*(void **)&v146[8], (*(_DWORD *)v146 + v135));
          }
        }
        v56 = v76;
      }
      v20 = v142;
      goto LABEL_96;
    }
    v179 = 0u;
    v180 = 0u;
    v177 = 0u;
    v178 = 0u;
    v175 = 0u;
    v176 = 0u;
    v173 = 0u;
    v174 = 0u;
    v171 = 0u;
    v172 = 0u;
    v169 = 0u;
    v170 = 0u;
    v168 = 0u;
    memset(v167, 0, sizeof(v167));
    v133 = *__error();
    v24 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      goto LABEL_40;
    v25 = fd_name(*(_QWORD *)(a2 + 240), (char *)v167, 0x100uLL);
    v26 = *(_QWORD *)(a2 + 288);
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "_data_map64_get_data_entry";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 375;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = v25;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = v22;
    *(_WORD *)&buf[38] = 2048;
    *(_QWORD *)&buf[40] = v26;
    *(_WORD *)&buf[48] = 2048;
    *(_QWORD *)&buf[50] = *(unsigned int *)v146;
    v27 = v24;
    v28 = "%s:%d: data_entry_restore failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx";
    goto LABEL_43;
  }
  if (v8 != 842150450 || !*(_QWORD *)(a2 + 424))
    goto LABEL_84;
  _data_map32_wrlock(a2);
  v10 = *(_DWORD *)(a2 + 364);
  v11 = v10 - 1;
  if (v10 - 1 <= v5)
    goto LABEL_82;
  v139 = v6;
  v182.length = (v10 - v5);
  v141 = *(_QWORD *)(a2 + 424);
  v182.location = v5;
  v12 = CFBitVectorGetFirstIndexOfBit(*(CFBitVectorRef *)(v141 + 16), v182, 0);
  v13 = v12;
  v14 = 0;
  if (v12 < v5)
    goto LABEL_83;
  v14 = 0;
  if (v11 < v12 || *(_DWORD *)(a2 + 364) <= v12)
    goto LABEL_83;
  v15 = v141;
  while (1)
  {
    if (*(_QWORD *)v15 > (uint64_t)v13 && CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v15 + 16), v13))
      goto LABEL_46;
    if (*(_DWORD *)(a2 + 364) > v13)
      break;
    v179 = 0u;
    v180 = 0u;
    v177 = 0u;
    v178 = 0u;
    v175 = 0u;
    v176 = 0u;
    v173 = 0u;
    v174 = 0u;
    v171 = 0u;
    v172 = 0u;
    v169 = 0u;
    v170 = 0u;
    v168 = 0u;
    memset(v167, 0, sizeof(v167));
    v34 = *__error();
    v35 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v53 = *(_DWORD *)(a2 + 364);
      v54 = fd_name(*(_QWORD *)(a2 + 240), (char *)v167, 0x100uLL);
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "_data_map32_get_offset_entry";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 421;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v13;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v53;
      *(_WORD *)&buf[30] = 2048;
      *(_QWORD *)&buf[32] = a2;
      *(_WORD *)&buf[40] = 2080;
      *(_QWORD *)&buf[42] = v54;
      v47 = buf;
      v48 = v35;
      v49 = "%s:%d: invalid data id %d max %d %p %s";
      v50 = 50;
      goto LABEL_65;
    }
LABEL_45:
    *__error() = v34;
    v15 = v141;
LABEL_46:
    if (++v13 > v11)
      goto LABEL_82;
  }
  v36 = *(_QWORD *)(a2 + 320);
  if (!v36)
    goto LABEL_46;
  v37 = *(unsigned int *)(v36 + 4 * v13);
  if (v37 < 2)
    goto LABEL_46;
  v143 = 0;
  v144 = 0;
  v145 = 0;
  v38 = *(_DWORD *)(a2 + 296);
  if (v38 <= v37)
  {
    v179 = 0u;
    v180 = 0u;
    v177 = 0u;
    v178 = 0u;
    v175 = 0u;
    v176 = 0u;
    v173 = 0u;
    v174 = 0u;
    v171 = 0u;
    v172 = 0u;
    v169 = 0u;
    v170 = 0u;
    v168 = 0u;
    memset(v167, 0, sizeof(v167));
    v34 = *__error();
    v51 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      v131 = *(unsigned int *)(a2 + 296);
      v52 = fd_name(*(_QWORD *)(a2 + 240), (char *)v167, 0x100uLL);
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "_data_map32_get_data_entry";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 445;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v37;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v131;
      *(_WORD *)&buf[38] = 2048;
      *(_QWORD *)&buf[40] = a2;
      *(_WORD *)&buf[48] = 2080;
      *(_QWORD *)&buf[50] = v52;
      v47 = buf;
      v48 = v51;
      v49 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
      v50 = 58;
LABEL_65:
      _os_log_error_impl(&dword_1B8270000, v48, OS_LOG_TYPE_ERROR, v49, v47, v50);
      goto LABEL_45;
    }
    goto LABEL_45;
  }
  data_entry_restore_12001(*(_QWORD *)(a2 + 288), v37, v38, (uint64_t)&v143, &v145);
  if (v145)
  {
    v166 = 0;
    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    v160 = 0u;
    v161 = 0u;
    v158 = 0u;
    v159 = 0u;
    memset(buf, 0, sizeof(buf));
    if (v37 < *(_DWORD *)(a2 + 296))
    {
      v39 = strlen((const char *)buf);
      sprintf((char *)&buf[v39], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a2 + 288) + v37));
      if (v37 + 1 < (unint64_t)*(unsigned int *)(a2 + 296))
      {
        v40 = strlen((const char *)buf);
        sprintf((char *)&buf[v40], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a2 + 288) + v37 + 1));
        if (v37 + 2 < (unint64_t)*(unsigned int *)(a2 + 296))
        {
          v41 = strlen((const char *)buf);
          sprintf((char *)&buf[v41], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a2 + 288) + v37 + 2));
          if (v37 + 3 < (unint64_t)*(unsigned int *)(a2 + 296))
          {
            v42 = strlen((const char *)buf);
            sprintf((char *)&buf[v42], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a2 + 288) + v37 + 3));
            if (v37 + 4 < (unint64_t)*(unsigned int *)(a2 + 296))
            {
              v43 = strlen((const char *)buf);
              sprintf((char *)&buf[v43], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a2 + 288) + v37 + 4));
            }
          }
        }
      }
    }
    v179 = 0u;
    v180 = 0u;
    v177 = 0u;
    v178 = 0u;
    v175 = 0u;
    v176 = 0u;
    v173 = 0u;
    v174 = 0u;
    v171 = 0u;
    v172 = 0u;
    v169 = 0u;
    v170 = 0u;
    v168 = 0u;
    memset(v167, 0, sizeof(v167));
    v34 = *__error();
    v44 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      goto LABEL_45;
    v45 = fd_name(*(_QWORD *)(a2 + 240), (char *)v167, 0x100uLL);
    v46 = *(unsigned int *)(a2 + 296);
    *(_DWORD *)v146 = 136316674;
    *(_QWORD *)&v146[4] = "_data_map32_get_data_entry";
    *(_WORD *)&v146[12] = 1024;
    *(_DWORD *)&v146[14] = 441;
    v147 = 2080;
    v148 = v45;
    v149 = 2048;
    v150 = v37;
    v151 = 2048;
    v152 = v46;
    v153 = 2048;
    v154 = v143;
    v155 = 2080;
    v156 = buf;
    v47 = v146;
    v48 = v44;
    v49 = "%s:%d: data_entry_restore failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
    v50 = 68;
    goto LABEL_65;
  }
  if (!v13)
    goto LABEL_82;
  if ((v139 & 4) == 0 && v9)
  {
    v14 = _data_map32_garbage_compact_collect(a2, v15, v13, v139, v9 + 4208 * a3);
    goto LABEL_83;
  }
  v57 = *(_DWORD *)(a2 + 364) - 1;
  if (v57 >= v13)
  {
    v58 = 0;
    v138 = *(_DWORD *)(a2 + 220);
    while (1)
    {
      if (*(_QWORD *)v141 <= (uint64_t)v13 || !CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v141 + 16), v13))
      {
        if (*(_DWORD *)(a2 + 364) <= v13)
        {
          v179 = 0u;
          v180 = 0u;
          v177 = 0u;
          v178 = 0u;
          v175 = 0u;
          v176 = 0u;
          v173 = 0u;
          v174 = 0u;
          v171 = 0u;
          v172 = 0u;
          v169 = 0u;
          v170 = 0u;
          v168 = 0u;
          memset(v167, 0, sizeof(v167));
          v106 = *__error();
          v107 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
          {
            v110 = *(_DWORD *)(a2 + 364);
            v111 = fd_name(*(_QWORD *)(a2 + 240), (char *)v167, 0x100uLL);
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "_data_map32_get_offset_entry";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 421;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v13;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v110;
            *(_WORD *)&buf[30] = 2048;
            *(_QWORD *)&buf[32] = a2;
            *(_WORD *)&buf[40] = 2080;
            *(_QWORD *)&buf[42] = v111;
            _os_log_error_impl(&dword_1B8270000, v107, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", buf, 0x32u);
          }
          *__error() = v106;
          goto LABEL_138;
        }
        v90 = *(_QWORD *)(a2 + 320);
        if (v90)
        {
          v91 = *(unsigned int *)(v90 + 4 * v13);
          if (v91 >= 2)
            break;
        }
      }
LABEL_138:
      if (++v13 > v57)
        goto LABEL_81;
    }
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v92 = *(_DWORD *)(a2 + 296);
    if (v92 <= v91)
    {
      v179 = 0u;
      v180 = 0u;
      v177 = 0u;
      v178 = 0u;
      v175 = 0u;
      v176 = 0u;
      v173 = 0u;
      v174 = 0u;
      v171 = 0u;
      v172 = 0u;
      v169 = 0u;
      v170 = 0u;
      v168 = 0u;
      memset(v167, 0, sizeof(v167));
      v98 = *__error();
      v108 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
      {
LABEL_157:
        *__error() = v98;
        v109 = v58;
LABEL_158:
        v58 = v109;
        goto LABEL_138;
      }
      v129 = *(unsigned int *)(a2 + 296);
      v116 = fd_name(*(_QWORD *)(a2 + 240), (char *)v167, 0x100uLL);
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "_data_map32_get_data_entry";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 445;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v91;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v129;
      *(_WORD *)&buf[38] = 2048;
      *(_QWORD *)&buf[40] = a2;
      *(_WORD *)&buf[48] = 2080;
      *(_QWORD *)&buf[50] = v116;
      v102 = buf;
      v103 = v108;
      v104 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
      v105 = 58;
LABEL_173:
      _os_log_error_impl(&dword_1B8270000, v103, OS_LOG_TYPE_ERROR, v104, v102, v105);
      goto LABEL_157;
    }
    data_entry_restore_12001(*(_QWORD *)(a2 + 288), v91, v92, (uint64_t)&v143, &v145);
    if (v145)
    {
      v166 = 0;
      v164 = 0u;
      v165 = 0u;
      v162 = 0u;
      v163 = 0u;
      v160 = 0u;
      v161 = 0u;
      v158 = 0u;
      v159 = 0u;
      memset(buf, 0, sizeof(buf));
      if (v91 < *(_DWORD *)(a2 + 296))
      {
        v93 = strlen((const char *)buf);
        sprintf((char *)&buf[v93], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a2 + 288) + v91));
        if (v91 + 1 < (unint64_t)*(unsigned int *)(a2 + 296))
        {
          v94 = strlen((const char *)buf);
          sprintf((char *)&buf[v94], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a2 + 288) + v91 + 1));
          if (v91 + 2 < (unint64_t)*(unsigned int *)(a2 + 296))
          {
            v95 = strlen((const char *)buf);
            sprintf((char *)&buf[v95], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a2 + 288) + v91 + 2));
            if (v91 + 3 < (unint64_t)*(unsigned int *)(a2 + 296))
            {
              v96 = strlen((const char *)buf);
              sprintf((char *)&buf[v96], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a2 + 288) + v91 + 3));
              if (v91 + 4 < (unint64_t)*(unsigned int *)(a2 + 296))
              {
                v97 = strlen((const char *)buf);
                sprintf((char *)&buf[v97], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a2 + 288) + v91 + 4));
              }
            }
          }
        }
      }
      v179 = 0u;
      v180 = 0u;
      v177 = 0u;
      v178 = 0u;
      v175 = 0u;
      v176 = 0u;
      v173 = 0u;
      v174 = 0u;
      v171 = 0u;
      v172 = 0u;
      v169 = 0u;
      v170 = 0u;
      v168 = 0u;
      memset(v167, 0, sizeof(v167));
      v98 = *__error();
      v99 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
        goto LABEL_157;
      v100 = fd_name(*(_QWORD *)(a2 + 240), (char *)v167, 0x100uLL);
      v101 = *(unsigned int *)(a2 + 296);
      *(_DWORD *)v146 = 136316674;
      *(_QWORD *)&v146[4] = "_data_map32_get_data_entry";
      *(_WORD *)&v146[12] = 1024;
      *(_DWORD *)&v146[14] = 441;
      v147 = 2080;
      v148 = v100;
      v149 = 2048;
      v150 = v91;
      v151 = 2048;
      v152 = v101;
      v153 = 2048;
      v154 = v143;
      v155 = 2080;
      v156 = buf;
      v102 = v146;
      v103 = v99;
      v104 = "%s:%d: data_entry_restore failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
      v105 = 68;
      goto LABEL_173;
    }
    if ((v139 & 2) == 0)
    {
LABEL_165:
      v109 = v58 + 1;
      if ((v139 & 4) == 0)
      {
        if (!v58)
        {
          if (!*(_BYTE *)(a2 + 433))
          {
            _data_map32_dirty(a2);
            *(_BYTE *)(a2 + 433) = 1;
          }
          if (!*(_BYTE *)(a2 + 435))
          {
            _data_map32_dirty(a2);
            *(_BYTE *)(a2 + 435) = 1;
          }
        }
        *(_DWORD *)(v90 + 4 * v13) = 1;
        bzero(v144, (v143 + v138));
      }
      goto LABEL_158;
    }
    if (a3 <= 1)
    {
      if (gSILogLevels[0] < 5)
        goto LABEL_165;
      v128 = *__error();
      v117 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
        goto LABEL_177;
      v118 = (char *)v144 + *(unsigned int *)(a2 + 220);
      *(_DWORD *)v167 = 67109890;
      *(_DWORD *)&v167[4] = v13;
      *(_WORD *)&v167[8] = 1024;
      *(_DWORD *)&v167[10] = v143;
      *(_WORD *)&v167[14] = 2080;
      *(_QWORD *)&v167[16] = v118;
      *(_WORD *)&v167[24] = 2048;
      *(_QWORD *)&v167[26] = a2;
      v113 = v117;
      v114 = "Delete data for id:%d size:%d %s from %p";
      v115 = 34;
    }
    else
    {
      if (gSILogLevels[0] < 5)
        goto LABEL_165;
      v128 = *__error();
      v112 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
        goto LABEL_177;
      *(_DWORD *)v167 = 67109632;
      *(_DWORD *)&v167[4] = v13;
      *(_WORD *)&v167[8] = 1024;
      *(_DWORD *)&v167[10] = v143;
      *(_WORD *)&v167[14] = 2048;
      *(_QWORD *)&v167[16] = a2;
      v113 = v112;
      v114 = "Delete data for id:%d size:%d from %p";
      v115 = 24;
    }
    _os_log_impl(&dword_1B8270000, v113, OS_LOG_TYPE_DEFAULT, v114, v167, v115);
LABEL_177:
    *__error() = v128;
    goto LABEL_165;
  }
  LODWORD(v58) = 0;
LABEL_81:
  if ((v139 & 2) != 0)
  {
    v119 = *__error();
    v120 = _SILogForLogForCategory(0);
    v121 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v120, v121))
    {
      *(_DWORD *)v167 = 67109376;
      *(_DWORD *)&v167[4] = v58;
      *(_WORD *)&v167[8] = 2048;
      *(_QWORD *)&v167[10] = a2;
      _os_log_impl(&dword_1B8270000, v120, v121, "Found %d deleted strings from %p", v167, 0x12u);
    }
    v14 = 0;
    *__error() = v119;
  }
  else
  {
LABEL_82:
    v14 = 0;
  }
LABEL_83:
  _data_map32_unlock(a2);
  if (!(_DWORD)v14)
  {
LABEL_84:
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v59 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(v59 + 4208 * a3 + 8)
      && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1, a3 == 4)
      && *(_QWORD *)(*(_QWORD *)(a1 + 56) + 968))
    {
      v14 = 0;
      *(_BYTE *)(v59 + 16832) = 1;
    }
    else
    {
      return 0;
    }
  }
  return v14;
}

void __db2_deserialize_cache_block_invoke(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  CFMutableSetRef Mutable;
  __CFSet *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  signed int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  int v24;
  int32x2_t v25;
  unsigned int v26;
  void *value_out;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  unsigned int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  if (!Mutable)
    return;
  v7 = Mutable;
  v8 = *(_QWORD *)(a1 + 32);
  v9 = pthread_mutex_lock((pthread_mutex_t *)(v8 + 584));
  HIDWORD(v11) = qos_class_self() - 9;
  LODWORD(v11) = HIDWORD(v11);
  v10 = v11 >> 2;
  if (v10 > 6)
  {
    v12 = 0;
    if (*(_QWORD *)(v8 + 768))
      goto LABEL_14;
  }
  else
  {
    v12 = dword_1B8630ED0[v10];
    if (*(_QWORD *)(v8 + 768))
      goto LABEL_14;
  }
  if (!*(_DWORD *)(v8 + 780) && !*(_BYTE *)(v8 + 796))
    goto LABEL_35;
  v13 = v12 <= 5 ? 5 : v12;
  v14 = (uint64_t *)(v8 + 16 * v12 + 664);
  v15 = v13 - v12 + 1;
  do
  {
    if (!--v15)
      break;
    v16 = *v14;
    v14 += 2;
  }
  while (!v16);
  if (!*(_QWORD *)(v8 + 16 * v12 + 648) || *(_DWORD *)(v8 + 784))
  {
LABEL_35:
    *(int32x2_t *)(v8 + 780) = vadd_s32(*(int32x2_t *)(v8 + 780), (int32x2_t)0x100000001);
    goto LABEL_15;
  }
LABEL_14:
  db_rwlock_wait(v8 + 584, v12, 5);
LABEL_15:
  pthread_mutex_unlock((pthread_mutex_t *)(v8 + 584));
  v17 = *(_QWORD *)(a1 + 32);
  if (v9)
    sdb2_die(v17, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15264);
  v18 = *(_QWORD *)(v17 + 856);
  if (*(int *)(v18 + 8) >= 1)
  {
    v19 = 0;
    v20 = 28;
    do
    {
      CFSetAddValue(v7, (const void *)*(unsigned int *)(v18 + v20));
      ++v19;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 856);
      v20 += 16;
    }
    while (v19 < *(int *)(v18 + 8));
  }
  if (a3)
  {
    while (1)
    {
      value_out = 0;
      if (!CFSetContainsValue(v7, (const void *)*a2))
        break;
      if (!_page_fetch_with_fd(*(_QWORD *)(a1 + 32), &value_out, *a2, 0x4000uLL, 4105, buf, 0xFFFFFFFFLL, 0))page_release(*(_QWORD *)(a1 + 32), value_out, *a2, 0x10u, 0);
      ++a2;
      if (!--a3)
        goto LABEL_28;
    }
    v21 = *__error();
    v22 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v26 = *a2;
      *(_DWORD *)buf = 136315650;
      v29 = "db2_deserialize_cache_block_invoke";
      v30 = 1024;
      v31 = 15277;
      v32 = 1024;
      v33 = v26;
      _os_log_error_impl(&dword_1B8270000, v22, OS_LOG_TYPE_ERROR, "%s:%d: invalid sdb page in cache %d", buf, 0x18u);
    }
    *__error() = v21;
  }
LABEL_28:
  v23 = *(_QWORD *)(a1 + 32) + 584;
  v24 = pthread_mutex_lock((pthread_mutex_t *)v23);
  v25 = vadd_s32(*(int32x2_t *)(v23 + 196), (int32x2_t)-1);
  *(int32x2_t *)(v23 + 196) = v25;
  if (!v25.i32[0])
    db_rwlock_wakeup(v23, 0, 0);
  pthread_mutex_unlock((pthread_mutex_t *)v23);
  if (v24)
    sdb2_die(*(_QWORD *)(a1 + 32), "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 15281);
  CFRelease(v7);
}

uint64_t qp_array_match_indexes(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;

  v5 = *(unsigned int *)(result + 8);
  v6 = (_QWORD *)(result + 16);
  if (*(_DWORD *)(result + 4) >= 5u)
    v6 = (_QWORD *)*v6;
  if ((int)v5 >= 1)
  {
    do
    {
      v8 = v5 - 1;
      v9 = v6[3 * (v5 - 1)];
      if (v9)
        v10 = v9 == a2;
      else
        v10 = 0;
      if (v10)
      {
        v11 = &v6[3 * v8];
        v12 = v11 + 2;
        if (*((_DWORD *)v11 + 2) >= 0x41u)
          v12 = (_QWORD *)*v12;
        v13 = &v6[3 * v8];
        v16 = *((_DWORD *)v13 + 3);
        v15 = (unsigned int *)v13 + 3;
        v14 = v16;
        if (v16)
        {
          v17 = 0;
          do
          {
            if (((*((unsigned __int8 *)v12 + ((unint64_t)v17 >> 3)) >> (v17 & 7)) & 1) != 0)
            {
              result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a3, v17);
              v14 = *v15;
            }
            v17 = (v17 + 1);
          }
          while (v17 < v14);
        }
      }
    }
    while (v5-- > 1);
  }
  return result;
}

uint64_t db_eval_obj_qp_array_set_match_at_index(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  char *v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  void *v24;
  size_t v25;
  __int16 v27[8];
  uint8_t buf[16];

  if (!a1)
    return 0;
  v7 = *(_DWORD *)(a1 + 4);
  v6 = *(_DWORD *)(a1 + 8);
  v8 = (_QWORD *)(a1 + 16);
  if (v7 >= 5)
    v8 = (_QWORD *)*v8;
  if (v6 < 1)
    goto LABEL_21;
  v9 = -1;
  v10 = *(unsigned int *)(a1 + 8);
  do
  {
    v12 = v10 - 1;
    v13 = (char *)&v8[3 * (v10 - 1)];
    if (*(_QWORD *)v13)
    {
      if (*(_QWORD *)v13 == a2)
      {
        v14 = *(_DWORD *)(a2 + 44);
        if (v14 <= 29)
        {
          v15 = (2 << v14);
          goto LABEL_33;
        }
      }
    }
    else
    {
      v11 = v10 - 1;
      if (v9 == -1)
        v9 = v11;
    }
    v10 = v12;
  }
  while ((unint64_t)(v12 + 1) > 1);
  if ((v9 & 0x80000000) != 0 || (int)v9 >= v6)
  {
LABEL_21:
    v18 = *(_DWORD *)(a1 + 8);
    if (v6 >= v7)
    {
      v20 = 2 * v7;
      v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 48 * v7, 0x6085D6BuLL);
      if (!v19 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        v27[0] = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v27, 2u);
      }
      memcpy(v19, v8, 24 * v20);
      if (*(_DWORD *)(a1 + 4) >= 5u)
        free(v8);
      *(_QWORD *)(a1 + 16) = v19;
      *(_DWORD *)(a1 + 4) = v20;
      v6 = *(_DWORD *)(a1 + 8);
    }
    else
    {
      v19 = (char *)v8;
    }
    v13 = &v19[24 * v18];
    *(_QWORD *)v13 = a2;
    *((_QWORD *)v13 + 1) = 64;
    *((_QWORD *)v13 + 2) = 0;
    v21 = *(_DWORD *)(a2 + 44);
    if (v21 >= 30)
      v15 = 0;
    else
      v15 = (2 << v21);
    *(_DWORD *)(a1 + 8) = v6 + 1;
  }
  else
  {
    v16 = v9;
    v13 = (char *)&v8[3 * v9];
    if (*((_DWORD *)v13 + 2) >= 0x41u)
      free((void *)v8[3 * v9 + 2]);
    *(_QWORD *)v13 = a2;
    *((_QWORD *)v13 + 1) = 64;
    v8[3 * v16 + 2] = 0;
    v17 = *(_DWORD *)(a2 + 44);
    if (v17 >= 30)
      v15 = 0;
    else
      v15 = (2 << v17);
  }
LABEL_33:
  v22 = *((_DWORD *)v13 + 2);
  v23 = v13 + 16;
  if (v22 >= 0x41)
    v23 = (_QWORD *)*v23;
  if (v22 <= a3)
  {
    LODWORD(v25) = *((_DWORD *)v13 + 2);
    do
      v25 = (2 * v25);
    while (v25 <= a3);
    if (!(v25 >> 17) && *MEMORY[0x1E0C85AD8] < v25)
      ++sTotal_10673;
    v24 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v25, 0x31F9A007uLL);
    if (!v24 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    memcpy(v24, v23, *((unsigned int *)v13 + 3));
    if (*((_DWORD *)v13 + 2) >= 0x41u)
      free(v23);
    *((_QWORD *)v13 + 2) = v24;
    *((_DWORD *)v13 + 2) = v25;
  }
  else
  {
    v24 = v23;
  }
  *((_BYTE *)v24 + ((unint64_t)a3 >> 3)) |= 1 << (a3 & 7);
  if (*((_DWORD *)v13 + 3) <= a3)
    *((_DWORD *)v13 + 3) = a3 + 1;
  if (v22 <= a3)
    *(_DWORD *)a1 |= 1u;
  return v15;
}

BOOL db_eval_obj_qp_array_union_for_value(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  unsigned int v6;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  unint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  BOOL v24;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = (_QWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 4) >= 5u)
    v3 = (_QWORD *)*v3;
  if ((int)v2 < 1)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = *(_DWORD *)(a1 + 8);
  while (2)
  {
    v8 = &v3[3 * --v6];
    if (!*v8 || *(_DWORD *)(*v8 + 44) != a2)
      goto LABEL_6;
    if (!v4)
    {
      v4 = &v3[3 * v6];
      goto LABEL_6;
    }
    v9 = *((_DWORD *)v4 + 3);
    v10 = HIDWORD(v3[3 * v6 + 1]);
    if (v9 >= v10)
      v11 = &v3[3 * v6];
    else
      v11 = v4;
    if (v9 >= v10)
      v12 = v4;
    else
      v12 = &v3[3 * v6];
    v13 = v12 + 2;
    if (*((_DWORD *)v12 + 2) >= 0x41u)
      v13 = (_QWORD *)*v13;
    v14 = v11 + 2;
    if (*((_DWORD *)v11 + 2) >= 0x41u)
      v14 = (_QWORD *)*v14;
    v15 = *((_DWORD *)v11 + 3);
    if (!v15)
      goto LABEL_28;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (unint64_t)v16 >> 3;
      v19 = *((unsigned __int8 *)v13 + v18);
      v20 = 1 << (v16 & 7);
      if ((v20 & v19) != 0)
        goto LABEL_22;
      if ((v20 & *((_BYTE *)v14 + v18)) != 0)
      {
        *((_BYTE *)v13 + v18) = v19 | v20;
        v15 = *((_DWORD *)v11 + 3);
LABEL_22:
        v17 = 1;
      }
      ++v16;
    }
    while (v16 < v15);
    if ((v17 & 1) != 0)
    {
LABEL_33:
      v5 = 1;
    }
    else
    {
LABEL_28:
      if (v15 <= *((_DWORD *)v12 + 3))
        v21 = *((_DWORD *)v12 + 3);
      else
        v21 = v15;
      while (1)
      {
        v5 = v21 != v15;
        if (v21 == v15)
          break;
        v22 = *((unsigned __int8 *)v13 + ((unint64_t)v15 >> 3));
        v23 = v15++ & 7;
        if (((v22 >> v23) & 1) != 0)
          goto LABEL_33;
      }
    }
    if (v12 == v4 || (v24 = v12 == v8, v8 = v4, v24))
      *v8 = 0;
LABEL_6:
    if (v2-- > 1)
      continue;
    return v5;
  }
}

BOOL db_eval_obj_qp_array_intersect_for_value(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  char v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  unint64_t v21;
  int v22;
  int v23;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = (_QWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 4) >= 5u)
    v3 = (_QWORD *)*v3;
  if ((int)v2 >= 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 8);
    while (1)
    {
      v10 = &v3[3 * --v8];
      if (!*v10 || *(_DWORD *)(*v10 + 44) != a2)
        goto LABEL_6;
      ++v4;
      if (v5)
      {
        if (!v6 || v7)
        {
          v12 = *((_DWORD *)v5 + 3);
          v13 = HIDWORD(v3[3 * v8 + 1]);
          if (v12 <= v13)
            v14 = &v3[3 * v8];
          else
            v14 = v5;
          if (v12 <= v13)
            v6 = v5;
          else
            v6 = &v3[3 * v8];
          v15 = v6 + 2;
          if (*((_DWORD *)v6 + 2) >= 0x41u)
            v15 = (_QWORD *)*v15;
          v16 = *((_DWORD *)v14 + 2);
          v17 = v14 + 2;
          if (v16 >= 0x41)
            v17 = (_QWORD *)*v17;
          v18 = *((_DWORD *)v6 + 3);
          if (v18)
          {
            v19 = 0;
            v20 = 0;
            do
            {
              v21 = (unint64_t)v19 >> 3;
              v22 = *((unsigned __int8 *)v15 + v21);
              v23 = 1 << (v19 & 7);
              if ((v23 & v22) != 0)
              {
                if ((v23 & *((_BYTE *)v17 + v21)) != 0)
                {
                  v20 = 1;
                }
                else
                {
                  *((_BYTE *)v15 + v21) = v22 & ~(_BYTE)v23;
                  v18 = *((_DWORD *)v6 + 3);
                }
              }
              ++v19;
            }
            while (v19 < v18);
          }
          else
          {
            v20 = 0;
          }
          v7 = v20;
          if (v6 == v5)
          {
LABEL_34:
            v11 = &v3[3 * v8];
            v10 = v5;
LABEL_35:
            *v11 = 0;
            v6 = v10;
            goto LABEL_6;
          }
        }
        else
        {
          v7 = 0;
          if (v6 == v5)
            goto LABEL_34;
        }
        v11 = v5;
        if (v6 == v10)
          goto LABEL_35;
      }
      else
      {
        v5 = &v3[3 * v8];
      }
LABEL_6:
      if (v2-- <= 1)
        return v7 || v4 == 1;
    }
  }
  v7 = 0;
  v4 = 0;
  return v7 || v4 == 1;
}

uint64_t db_query_has_ann(_QWORD *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __db_query_has_ann_block_invoke;
  v3[3] = &unk_1E6E37820;
  v3[4] = &v4;
  db_query_tree_apply_block_with_meta(a1, (uint64_t)v3, 0);
  v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t __db_query_has_ann_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2 && *(_DWORD *)(v2 + 24) == 15)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return a2;
}

uint64_t __apply_demorgans_law_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  result = a2;
  switch(*(_WORD *)(a2 + 40))
  {
    case 1:
      v3 = 2;
      goto LABEL_8;
    case 2:
      v3 = 1;
      goto LABEL_8;
    case 4:
      v4 = *(_QWORD *)(a2 + 16);
      v5 = *(unsigned int *)(v4 + 24);
      if ((v5 - 16) >= 0xFFFFFFF1)
        *(_DWORD *)(v4 + 24) = dword_1B8631838[v5];
      else
        *(_DWORD *)(v4 + 24) = 0;
      return result;
    case 0x10:
      v3 = 32;
      goto LABEL_8;
    case 0x20:
      v3 = 16;
LABEL_8:
      *(_WORD *)(a2 + 40) = v3;
      break;
    default:
      return result;
  }
  return result;
}

void qp_string_id_cache_free(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;

  if (a1)
  {
    v2 = (const void *)a1[1];
    if (v2)
      CFRelease(v2);
    v3 = (const void *)a1[2];
    if (v3)
      CFRelease(v3);
    v4 = (const void *)a1[4];
    if (v4)
      CFRelease(v4);
    v5 = (const void *)a1[5];
    if (v5)
      CFRelease(v5);
    v6 = (const void *)a1[7];
    if (v6)
      CFRelease(v6);
    v7 = (const void *)a1[8];
    if (v7)
      CFRelease(v7);
    v8 = (const void *)a1[10];
    if (v8)
      CFRelease(v8);
    v9 = (const void *)a1[11];
    if (v9)
      CFRelease(v9);
    v10 = (const void *)a1[13];
    if (v10)
      CFRelease(v10);
    v11 = (const void *)a1[14];
    if (v11)
      CFRelease(v11);
    v12 = (const void *)a1[16];
    if (v12)
      CFRelease(v12);
    v13 = (const void *)a1[17];
    if (v13)
      CFRelease(v13);
    v14 = (const void *)a1[19];
    if (v14)
      CFRelease(v14);
    v15 = (const void *)a1[20];
    if (v15)
      CFRelease(v15);
    v16 = (const void *)a1[22];
    if (v16)
      CFRelease(v16);
    v17 = (const void *)a1[23];
    if (v17)
      CFRelease(v17);
    v18 = (const void *)a1[25];
    if (v18)
      CFRelease(v18);
    v19 = (const void *)a1[26];
    if (v19)
      CFRelease(v19);
    v20 = (const void *)a1[28];
    if (v20)
      CFRelease(v20);
    v21 = (const void *)a1[29];
    if (v21)
      CFRelease(v21);
    v22 = (const void *)a1[31];
    if (v22)
      CFRelease(v22);
    v23 = (const void *)a1[32];
    if (v23)
      CFRelease(v23);
    v24 = (const void *)a1[34];
    if (v24)
      CFRelease(v24);
    v25 = (const void *)a1[35];
    if (v25)
      CFRelease(v25);
    v26 = (const void *)a1[37];
    if (v26)
      CFRelease(v26);
    v27 = (const void *)a1[38];
    if (v27)
      CFRelease(v27);
    v28 = (const void *)a1[40];
    if (v28)
      CFRelease(v28);
    v29 = (const void *)a1[41];
    if (v29)
      CFRelease(v29);
    v30 = (const void *)a1[43];
    if (v30)
      CFRelease(v30);
    v31 = (const void *)a1[44];
    if (v31)
      CFRelease(v31);
    v32 = (const void *)a1[46];
    if (v32)
      CFRelease(v32);
    v33 = (const void *)a1[47];
    if (v33)
      CFRelease(v33);
    free(a1);
  }
}

uint64_t si_lqn_release(uint64_t a1, _QWORD *a2)
{
  _QWORD v3[5];

  *a2 = 0;
  a2[1] = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __db_query_tree_apply_block_block_invoke;
  v3[3] = &unk_1E6E377F8;
  v3[4] = &__block_literal_global_143;
  return db_query_tree_apply_block_with_meta(a2, (uint64_t)v3, 0);
}

CFStringRef si_lqn_copy_description(uint64_t *a1)
{
  uint64_t v2;
  const char *v3;
  const __CFAllocator *v4;
  CFStringRef v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  CFStringRef v23;

  v2 = a1[2];
  if (v2)
  {
    v3 = *(const char **)(v2 + 72);
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (v3)
    {
      v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, 0x8000100u);
      v2 = a1[2];
    }
    else
    {
      v5 = CFSTR("<null>");
    }
    v14 = *a1;
    v15 = a1[1];
    v16 = v15 + v14 + db_hash_qps(v2);
    v17 = HIDWORD(v16) - v16;
    v18 = HIDWORD(v16) - v16 - 8;
    LODWORD(v16) = (v16 - (HIDWORD(v16) - v16) - 1640531527) ^ (v18 << 8);
    v19 = (16 - v17 - v16) ^ (v16 >> 13);
    v20 = (v18 - v16 - v19) ^ (v19 >> 12);
    LODWORD(v16) = (v16 - v19 - v20) ^ (v20 << 16);
    v21 = (v19 - v20 - v16) ^ (v16 >> 5);
    v22 = (v20 - v16 - v21) ^ (v21 >> 3);
    v23 = CFStringCreateWithFormat(v4, 0, CFSTR("node:%p hash:%llx type:%d qp:%p op:%d fn:%s s:%@ lc:%p rc:%p"), a1, (v21 - v22 - (((_DWORD)v16 - v21 - v22) ^ (v22 << 10))) ^ (((v16 - v21 - v22) ^ (v22 << 10)) >> 15), *((unsigned __int16 *)a1 + 20), v2, *(unsigned int *)(v2 + 24), *(_QWORD *)v2, v5, v14, v15);
    CFRelease(v5);
    return v23;
  }
  else
  {
    v6 = a1[1] + *a1;
    v7 = HIDWORD(v6) - v6;
    v8 = HIDWORD(v6) - v6 - 8;
    LODWORD(v6) = (v6 - (HIDWORD(v6) - v6) - 1640531527) ^ (v8 << 8);
    v9 = (16 - v7 - v6) ^ (v6 >> 13);
    v10 = (v8 - v6 - v9) ^ (v9 >> 12);
    LODWORD(v6) = (v6 - v9 - v10) ^ (v10 << 16);
    v11 = (v9 - v10 - v6) ^ (v6 >> 5);
    v12 = (v10 - v6 - v11) ^ (v11 >> 3);
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("node:%p hash:%llx type:%d lc:%p rc:%p"), a1, (v11 - v12 - (((_DWORD)v6 - v11 - v12) ^ (v12 << 10))) ^ (((v6 - v11 - v12) ^ (v12 << 10)) >> 15), *((unsigned __int16 *)a1 + 20), *a1, a1[1]);
  }
}

void query_node_unique_set_release(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v2 = (unsigned int *)(a1 + 72);
  do
  {
    v3 = __ldxr(v2);
    v4 = v3 - 1;
  }
  while (__stxr(v4, v2));
  if (!v4)
  {
    CFRelease(*(CFTypeRef *)(a1 + 64));
    pthread_mutex_destroy((pthread_mutex_t *)a1);
    free((void *)a1);
  }
}

CFStringRef _query_node_unique_set_copy_description(pthread_mutex_t *a1)
{
  const void *sig;
  CFStringRef v3;

  pthread_mutex_lock(a1);
  sig = (const void *)a1[1].__sig;
  if (sig)
    v3 = CFCopyDescription(sig);
  else
    v3 = 0;
  pthread_mutex_unlock(a1);
  return v3;
}

uint64_t query_node_unique_release(pthread_mutex_t *a1, _QWORD *a2)
{
  _QWORD v5[5];
  _QWORD v6[5];

  pthread_mutex_lock(a1);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = __query_node_unique_release_block_invoke;
  v5[3] = &__block_descriptor_tmp_21_10768;
  v5[4] = a1;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __db_query_tree_apply_block_block_invoke;
  v6[3] = &unk_1E6E377F8;
  v6[4] = v5;
  db_query_tree_apply_block_with_meta(a2, (uint64_t)v6, 0);
  return pthread_mutex_unlock(a1);
}

uint64_t __query_node_unique_release_block_invoke(uint64_t a1, const void *a2)
{
  CFBagRemoveValue(*(CFMutableBagRef *)(*(_QWORD *)(a1 + 32) + 64), a2);
  return 0;
}

uint64_t convert_value_to_type(unsigned int a1, uint64_t a2)
{
  char *v3;
  unsigned int v4;
  uint64_t result;
  int v7;
  double *v8;
  int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  char v14;
  char *v15;
  __int16 v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  float v21;
  int v22;
  double v24;
  int v25;
  int v27;
  NSObject *v28;
  os_log_type_t v29;
  double v30;
  double v31;
  int v32;
  char *__endptr;
  uint8_t buf[8];
  __int16 v36;
  double *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = *(char **)(a2 + 72);
  __endptr = v3;
  v4 = *(_DWORD *)(a2 + 24);
  if (a1 != 14)
  {
    if (v4 > 0xA)
      return 22;
    v7 = 1 << a1;
    if ((*(_DWORD *)(a2 + 160) & (1 << a1)) != 0)
      return 0;
    v8 = (double *)(a2 + 8 * a1 + 168);
    if (a1 == 11)
    {
      *(_QWORD *)v8 = v3;
      while (1)
      {
        v9 = *v3;
        if (!*v3)
          break;
        ++v3;
        v10 = v9 - 42;
        v11 = v10 > 0x32;
        v12 = (1 << v10) & 0x6000000200001;
        if (!v11 && v12 != 0)
        {
          *(_QWORD *)(a2 + 32) |= 1uLL;
          break;
        }
      }
    }
    else
    {
      if (a1 - 1 > 1)
      {
        if (a1 - 3 > 1)
        {
          if (a1 - 5 > 1)
          {
            if (a1 - 7 > 1)
            {
              if (a1 == 12 || a1 == 10)
              {
                if (*v3 == 48 && v3[1] == 120)
                  v24 = COERCE_DOUBLE(strtoull(v3, &__endptr, 0));
                else
                  v24 = strtod(v3, &__endptr);
                v15 = __endptr;
                if (__endptr == *(char **)(a2 + 72))
                  return 22;
                *v8 = v24;
              }
              else
              {
                if (a1 != 9)
                {
                  v27 = *__error();
                  v28 = _SILogForLogForCategory(1);
                  v29 = 2 * (dword_1EF19FC90 < 4);
                  if (os_log_type_enabled(v28, v29))
                  {
                    *(_DWORD *)buf = 67109376;
                    *(_DWORD *)&buf[4] = a1;
                    v36 = 2048;
                    v37 = v8;
                    _os_log_impl(&dword_1B8270000, v28, v29, "convert_value_to_type: unknown data type 0x%x (val 0x%p)", buf, 0x12u);
                  }
                  *__error() = v27;
                  return 22;
                }
                if (*v3 == 48 && v3[1] == 120)
                  LODWORD(v21) = strtoul(v3, &__endptr, 0);
                else
                  v21 = strtof(v3, &__endptr);
                v15 = __endptr;
                if (__endptr == *(char **)(a2 + 72))
                  return 22;
                *(float *)v8 = v21;
              }
            }
            else
            {
              v19 = strtoull(v3, &__endptr, 0);
              v15 = __endptr;
              if (__endptr == *(char **)(a2 + 72))
              {
                if (strlen(__endptr) != 4)
                  return 22;
                v15 = __endptr + 4;
                v20 = bswap32(*(_DWORD *)__endptr);
                __endptr += 4;
              }
              else
              {
                v20 = v19;
              }
              v25 = *v15;
              if (*v15
                && v25 != 42
                && !((char)v25 < 0
                   ? __maskrune((char)v25, 0x4000uLL)
                   : *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * (char)v25 + 60) & 0x4000))
              {
                *(_QWORD *)buf = *(_QWORD *)(a2 + 72);
                v31 = strtod(*(const char **)buf, (char **)buf);
                if (*(_QWORD *)buf > (unint64_t)v15 && v31 == trunc(v31))
                {
                  v20 = (unint64_t)v31;
                  __endptr = *(char **)buf;
                  v15 = *(char **)buf;
                }
              }
              *(_QWORD *)v8 = v20;
            }
          }
          else
          {
            v17 = strtoul(v3, &__endptr, 0);
            v15 = __endptr;
            if (__endptr == *(char **)(a2 + 72))
            {
              if (strlen(__endptr) != 4)
                return 22;
              v15 = __endptr + 4;
              v18 = bswap32(*(_DWORD *)__endptr);
              __endptr += 4;
            }
            else
            {
              v18 = v17;
            }
            v22 = *v15;
            if (*v15
              && v22 != 42
              && !((char)v22 < 0
                 ? __maskrune((char)v22, 0x4000uLL)
                 : *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * (char)v22 + 60) & 0x4000))
            {
              *(_QWORD *)buf = *(_QWORD *)(a2 + 72);
              v30 = strtod(*(const char **)buf, (char **)buf);
              if (*(_QWORD *)buf > (unint64_t)v15 && v30 == trunc(v30))
              {
                v18 = (int)v30;
                __endptr = *(char **)buf;
                v15 = *(char **)buf;
              }
            }
            *(_DWORD *)v8 = v18;
          }
        }
        else
        {
          v16 = strtoul(v3, &__endptr, 0);
          v15 = __endptr;
          if (__endptr == *(char **)(a2 + 72))
            return 22;
          *(_WORD *)v8 = v16;
        }
      }
      else
      {
        v14 = strtol(v3, &__endptr, 0);
        v15 = __endptr;
        if (__endptr == *(char **)(a2 + 72))
          return 22;
        *(_BYTE *)v8 = v14;
      }
      v32 = *v15;
      if (*v15
        && v32 != 42
        && !((char)v32 < 0
           ? __maskrune((char)v32, 0x4000uLL)
           : *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * (char)v32 + 60) & 0x4000))
      {
        return 22;
      }
    }
    result = 0;
    *(_DWORD *)(a2 + 160) |= v7;
    return result;
  }
  if (v4 == 15)
    return 0;
  else
    return 22;
}

BOOL db_compare_val(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  const char *v3;
  uint64_t *v4;
  _QWORD *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  const char **v10;
  int v11;
  uint64_t v12;
  _BOOL8 result;
  int v14;
  double v15;
  int v16;
  size_t v17;
  size_t v18;
  size_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  float v24;
  int v25;
  unsigned __int8 **v26;
  _QWORD *v27;
  int v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  NSObject *v34;
  int *v35;
  uint64_t v36;
  int v37;
  int v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  int v42;
  int v44;
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  const char *v53;
  uint64_t v54;

  v1 = MEMORY[0x1E0C80A78](a1);
  v7 = v2;
  v54 = *MEMORY[0x1E0C80C00];
  if (((*(_DWORD *)(v2 + 160) >> v1) & 1) == 0)
    return (*(_DWORD *)(v2 + 24) - 5) < 2;
  v8 = v4;
  v9 = (unsigned __int8 *)v3;
  v10 = (const char **)(v2 + 8 * v1 + 168);
  switch(v1)
  {
    case 1u:
      v20 = *v3;
      v21 = *(char *)v10;
      goto LABEL_25;
    case 2u:
      v20 = *(unsigned __int8 *)v3;
      v21 = *(unsigned __int8 *)v10;
LABEL_25:
      v11 = v20 - v21;
      v12 = 1;
      goto LABEL_65;
    case 3u:
      v22 = *(__int16 *)v3;
      v23 = *(__int16 *)v10;
      goto LABEL_28;
    case 4u:
      v22 = *(unsigned __int16 *)v3;
      v23 = *(unsigned __int16 *)v10;
LABEL_28:
      v11 = v22 - v23;
      v12 = 2;
      goto LABEL_65;
    case 5u:
    case 6u:
      v11 = *(_DWORD *)v3 - *(_DWORD *)v10;
      v12 = 4;
      goto LABEL_65;
    case 7u:
    case 8u:
      if ((uint64_t)(*(_QWORD *)v3 - (_QWORD)*v10) < 0)
        v14 = -1;
      else
        v14 = 1;
      if (*(const char **)v3 == *v10)
        v11 = 0;
      else
        v11 = v14;
      v12 = 8;
      goto LABEL_65;
    case 9u:
      v24 = *(float *)v3 - *(float *)v10;
      if (v24 >= 0.0)
        v25 = 1;
      else
        v25 = -1;
      if (v24 == 0.0)
        v11 = 0;
      else
        v11 = v25;
      v12 = 4;
      goto LABEL_65;
    case 0xAu:
    case 0xCu:
      v15 = *(double *)v3 - *(double *)v10;
      if (v15 >= 0.0)
        v16 = 1;
      else
        v16 = -1;
      if (v15 == 0.0)
        v11 = 0;
      else
        v11 = v16;
      v12 = 8;
      goto LABEL_65;
    case 0xBu:
      v26 = v6;
      v27 = v5;
      v28 = strlen(v3);
      v29 = (unsigned __int8 *)*v10;
      if (v29)
      {
        v30 = *(_QWORD *)(v7 + 32);
        v31 = (v30 >> 4) & 3;
        if ((v30 & 0x800000) != 0)
          LOBYTE(v31) = v31 | 0x10;
        v32 = *(_QWORD *)(v7 + 104);
        if ((v30 & 2) != 0)
        {
          if (v32)
            goto LABEL_49;
          os_unfair_lock_lock((os_unfair_lock_t)&s_search_reg_ex_unfair_lock);
          if (!*(_QWORD *)(v7 + 104))
          {
            v36 = icu_regex_create();
            __dmb(0xBu);
            *(_QWORD *)(v7 + 104) = v36;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)&s_search_reg_ex_unfair_lock);
          if (*(_QWORD *)(v7 + 104))
          {
LABEL_49:
            icu_regex_find();
            v37 = 0;
LABEL_63:
            v11 = v37 != 1;
            goto LABEL_64;
          }
        }
        else
        {
          if (v32)
            goto LABEL_56;
          os_unfair_lock_lock((os_unfair_lock_t)&s_search_ctx_unfair_lock);
          if (!*(_QWORD *)(v7 + 104))
          {
            v41 = icu_search_context_create_with_wildcard_limit();
            __dmb(0xBu);
            *(_QWORD *)(v7 + 104) = v41;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)&s_search_ctx_unfair_lock);
          if (*(_QWORD *)(v7 + 104))
          {
LABEL_56:
            if ((icu_search_match() & 1) != 0)
            {
              v37 = 1;
            }
            else
            {
              v37 = checkTranscriptions(v29, v9);
              if (v37)
              {
                bzero(&v44, 0x1000uLL);
                v37 = CIStringTokenizerResolveTranscriptions((uint64_t)v9);
                if (v37)
                  v37 = icu_search_match();
              }
            }
            goto LABEL_63;
          }
        }
        v37 = matche(v29, v9, v31 | (v30 >> 4) & 4, v27, v26);
        goto LABEL_63;
      }
      v33 = *__error();
      v34 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        v38 = *(_DWORD *)(v7 + 160);
        v39 = *(const char **)v7;
        v40 = "<NULL>";
        if (!*(_QWORD *)v7)
          v39 = "<NULL>";
        if (*(_QWORD *)(v7 + 72))
          v40 = *(const char **)(v7 + 72);
        v44 = 136316162;
        v45 = "db_compare_val";
        v46 = 1024;
        v47 = 3205;
        v48 = 1024;
        v49 = v38;
        v50 = 2080;
        v51 = v39;
        v52 = 2080;
        v53 = v40;
        _os_log_error_impl(&dword_1B8270000, v34, OS_LOG_TYPE_ERROR, "%s:%d: nil str_val converted_bits: 0x%x field: %s string: %s", (uint8_t *)&v44, 0x2Cu);
      }
      v35 = __error();
      v11 = 0;
      *v35 = v33;
LABEL_64:
      v12 = v28 + 1;
LABEL_65:
      v42 = *(_DWORD *)(v7 + 24);
      if (v42 == 1)
      {
        if (v11)
          goto LABEL_67;
LABEL_83:
        result = 1;
        goto LABEL_84;
      }
      if (v42 == 2 && !v11
        || (v42 - 5) <= 1 && v11
        || v42 == 7 && v11 < 0
        || v42 == 3 && v11 < 1
        || v42 == 8 && v11 > 0)
      {
        goto LABEL_83;
      }
LABEL_67:
      result = v42 == 4 && v11 >= 0;
LABEL_84:
      if (*v8 == -1)
        *v8 = v12;
      return result;
    default:
      v17 = *v4;
      v18 = strlen(*v10);
      if (v17 >= v18)
        v19 = v18;
      else
        v19 = v17;
      v11 = memcmp(v9, v10, v19);
      v12 = 0;
      goto LABEL_65;
  }
}

uint64_t checkTranscriptions(_BYTE *a1, _BYTE *a2)
{
  uint64_t result;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  char v13;
  unsigned int v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  char v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  char v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unsigned int v40;
  char v41;

  result = 0;
  if (!a1)
    return result;
  v4 = a2;
  if (!a2)
    return result;
  result = *a1;
  if (!*a1)
    return result;
  v5 = MEMORY[0x1E0C80978];
  v6 = a1;
  while (1)
  {
    if ((result & 0x80) == 0)
    {
LABEL_13:
      if ((*(_DWORD *)(v5 + 4 * result + 60) & 0x100) != 0)
        break;
      goto LABEL_14;
    }
    v7 = (unint64_t)result >> 4;
    v8 = ~(_BYTE)v7;
    v9 = utf8_byte_length(unsigned char)::utf8_len_table[v7];
    v10 = (utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v9] & result);
    if ((v8 & 0xC) != 0)
    {
      LODWORD(result) = (utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v9] & result);
      if (v10 <= 0x7F)
        goto LABEL_13;
    }
    else
    {
      if (v9 <= 2)
        v9 = 2;
      else
        v9 = v9;
      v11 = v9 - 1;
      v12 = v6 + 1;
      do
      {
        v13 = *v12++;
        LODWORD(result) = v13 & 0x3F | (v10 << 6);
        v10 = result;
        --v11;
      }
      while (v11);
      if (result <= 0x7F)
        goto LABEL_13;
    }
    if (__maskrune(result, 0x100uLL))
      break;
LABEL_14:
    v6 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v6 >> 4];
    LODWORD(result) = *v6;
    if (!*v6)
      goto LABEL_33;
  }
  v14 = *v4;
  if (!*v4)
  {
LABEL_33:
    v24 = *a1;
    if (!*a1)
      return 0;
    while (1)
    {
      v25 = v24;
      if ((v24 & 0x80) != 0)
      {
        v26 = (unint64_t)v24 >> 4;
        v27 = ~(_BYTE)v26;
        v28 = utf8_byte_length(unsigned char)::utf8_len_table[v26];
        v29 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v28] & v24;
        if ((v27 & 0xC) != 0)
        {
          v25 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v28] & v24;
        }
        else
        {
          if (v28 <= 2)
            v28 = 2;
          else
            v28 = v28;
          v30 = v28 - 1;
          v31 = a1 + 1;
          do
          {
            v32 = *v31++;
            v25 = v32 & 0x3F | (v29 << 6);
            v29 = v25;
            --v30;
          }
          while (v30);
        }
      }
      if ((v25 - 12352) <= 0x5F)
        break;
      a1 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)v24 >> 4];
      v24 = *a1;
      if (!*a1)
        return 0;
    }
    v33 = *v4;
    if (!*v4)
      return 0;
    result = 1;
    while (1)
    {
      v34 = (unint64_t)v33 >> 4;
      if ((v33 & 0x80) != 0 && (((unint64_t)v33 >> 4) & 0xC) == 0xC)
      {
        v35 = utf8_byte_length(unsigned char)::utf8_len_table[v34];
        v36 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v35] & v33;
        v37 = v35 <= 2 ? 2 : utf8_byte_length(unsigned char)::utf8_len_table[v34];
        v38 = v37 - 1;
        v39 = v4 + 1;
        do
        {
          v40 = v36;
          v41 = *v39++;
          v36 = v41 & 0x3F | (v36 << 6);
          --v38;
        }
        while (v38);
        if (v36 >> 8 >= 0x11 && ((v40 & 0x3FFFFFC) == 0x44 || ((v40 << 6) - 11904) >> 7 < 0x197 || v36 - 65376 < 0x50))
          break;
      }
      v4 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[v34];
      v33 = *v4;
      if (!*v4)
        return 0;
    }
    return result;
  }
  v15 = v4;
  result = 1;
  while (1)
  {
    v16 = (unint64_t)v14 >> 4;
    if ((v14 & 0x80) != 0 && (((unint64_t)v14 >> 4) & 0xC) == 0xC)
    {
      v17 = utf8_byte_length(unsigned char)::utf8_len_table[v16];
      v18 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v17] & v14;
      v19 = v17 <= 2 ? 2 : utf8_byte_length(unsigned char)::utf8_len_table[v16];
      v20 = v19 - 1;
      v21 = v15 + 1;
      do
      {
        v22 = v18;
        v23 = *v21++;
        v18 = v23 & 0x3F | (v18 << 6);
        --v20;
      }
      while (v20);
      if (v18 >> 8 >= 0x11 && ((v22 & 0x3FFFFFC) == 0x44 || ((v22 << 6) - 11904) >> 7 < 0x197 || v18 - 65376 < 0x50))
        return result;
    }
    v15 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[v16];
    v14 = *v15;
    if (!*v15)
      goto LABEL_33;
  }
}

BOOL do_compare(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  int *v14;
  unsigned __int16 v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  char v23;
  char *v24;
  int v25;
  int v26;
  unsigned int v27;
  char v28;
  char *v29;
  _BOOL4 v30;
  unsigned int v31;
  _BOOL4 v32;
  int v33;
  char *v36;
  unsigned int v37;
  _QWORD *v38;
  size_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned __int8 *v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v48;
  _BOOL4 v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  NSObject *v54;
  int v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  int v59;
  uint8_t *v60;
  unsigned __int8 v61;
  int v62;
  _BOOL4 v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  char *__s;
  uint8_t buf[8];
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint8_t v75[16];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _QWORD v79[130];

  v1 = MEMORY[0x1E0C80A78](a1);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = v2;
  v14 = (int *)v1;
  v79[128] = *MEMORY[0x1E0C80C00];
  v15 = v2[1];
  if ((v15 & 0x20) == 0)
  {
    if ((v15 & 0x80) != 0)
    {
      v68 = 0;
      bzero(v79, 0x400uLL);
      v16 = *v13;
      goto LABEL_8;
    }
LABEL_6:
    *(_QWORD *)v75 = *((unsigned int *)v2 + 2);
    return _db_compare_val(v1);
  }
  v16 = *v2;
  if ((v15 & 0x80) == 0 && v16 == 14)
    goto LABEL_6;
  v68 = 0;
  bzero(v79, 0x400uLL);
  if ((v15 & 0x80) != 0)
  {
LABEL_8:
    if (v16 == 11)
    {
      __s = (char *)v13 + 13;
      if (db_get_localized_string(v14, (uint64_t)v13, v10, (uint64_t)&__s, (uint64_t)&v68, v6))
        return 0;
      if (v68)
      {
        v36 = __s;
        v37 = v68 - (_DWORD)__s;
        if ((int)v68 - (int)__s > 1022)
        {
          v39 = strlen(__s);
          v38 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v39 + 1, 0x6085D6BuLL);
          if (!v38 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)v75 = 0;
            _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v75, 2u);
          }
          memcpy(v38, v36, v39);
          *((_BYTE *)v38 + v39) = 0;
          *((_BYTE *)v38 + v37) = 0;
        }
        else
        {
          v38 = v79;
          __strlcpy_chk();
        }
        __s = (char *)v38;
      }
      v40 = *(_QWORD *)(v12 + 32);
      if ((v40 & 0x800073) == 0)
      {
        v44 = strcmp(__s, *(const char **)(v12 + 256));
        v45 = *(_DWORD *)(v12 + 24);
        if (v44)
        {
          if (v45 == 5)
          {
            v17 = 1;
          }
          else
          {
            v48 = ((v45 - 4) & 0xFFFFFFFB) == 0;
            v49 = ((v45 - 3) & 0xFFFFFFFB) == 0;
            if (v44 < 0)
              v17 = v49;
            else
              v17 = v48;
          }
        }
        else
        {
          v17 = (v45 - 1) < 4;
        }
LABEL_104:
        if (v68 && __s != (char *)v79)
          free(__s);
        return v17;
      }
      v41 = (v40 >> 4) & 3;
      if ((v40 & 0x800000) != 0)
        LOBYTE(v41) = v41 | 0x10;
      v42 = *(unsigned __int8 **)(v12 + 256);
      if ((v40 & 2) != 0)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&s_search_reg_ex_unfair_lock);
        if (!*(_QWORD *)(v12 + 104))
        {
          v46 = icu_regex_create();
          __dmb(0xBu);
          *(_QWORD *)(v12 + 104) = v46;
        }
        os_unfair_lock_unlock((os_unfair_lock_t)&s_search_reg_ex_unfair_lock);
        if (!*(_QWORD *)(v12 + 104))
          goto LABEL_101;
        v47 = icu_regex_find();
      }
      else
      {
        v43 = *(_QWORD *)(v12 + 104);
        if (v10 && !v43)
        {
          os_unfair_lock_lock((os_unfair_lock_t)&s_search_ctx_unfair_lock);
          if (!*(_QWORD *)(v12 + 104))
          {
            v50 = icu_search_context_create_with_wildcard_limit();
            __dmb(0xBu);
            *(_QWORD *)(v12 + 104) = v50;
          }
          os_unfair_lock_unlock((os_unfair_lock_t)&s_search_ctx_unfair_lock);
          v43 = *(_QWORD *)(v12 + 104);
        }
        if (v43)
        {
          *(_QWORD *)v75 = 0;
          *(_QWORD *)buf = 0;
          if ((icu_search_match() & 1) != 0)
          {
            v17 = 1;
            goto LABEL_102;
          }
          if (checkTranscriptions(v42, __s))
          {
            bzero(v75, 0x1000uLL);
            if (CIStringTokenizerResolveTranscriptions((uint64_t)__s))
            {
              v47 = icu_search_match();
              goto LABEL_100;
            }
          }
LABEL_101:
          v17 = 0;
LABEL_102:
          if ((*(_DWORD *)(v12 + 24) - 5) <= 1)
            v17 = (_DWORD)v17 == 0;
          goto LABEL_104;
        }
        v47 = matche(v42, (unsigned __int8 *)__s, v41 | (v40 >> 4) & 4, 0, 0);
      }
LABEL_100:
      v17 = v47;
      goto LABEL_102;
    }
  }
  __s = (char *)v13 + 13;
  if (v8)
  {
    v18 = *(_QWORD *)(v12 + 32);
    v19 = (v18 >> 25) & 1;
    v20 = (v18 >> 34) & 1;
  }
  else
  {
    LODWORD(v19) = 0;
    LODWORD(v20) = 0;
  }
  v66 = *(_DWORD *)(v12 + 24);
  v64 = v4;
  if (dword_1EF19FC90 >= 5)
  {
    v51 = v20;
    v52 = v19;
    v53 = *__error();
    v54 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v75 = 67109376;
      *(_DWORD *)&v75[4] = v52;
      *(_WORD *)&v75[8] = 1024;
      *(_DWORD *)&v75[10] = v51;
      _os_log_impl(&dword_1B8270000, v54, OS_LOG_TYPE_DEFAULT, "====== do_compare check_all:%d save_indexes:%d", v75, 0xEu);
    }
    *__error() = v53;
    v16 = *v13;
    LODWORD(v19) = v52;
    LOBYTE(v20) = v51;
  }
  v77 = 0u;
  v78 = 0u;
  *(_OWORD *)v75 = 0u;
  v76 = 0u;
  if (v16 != 11 || (~v13[1] & 0x8010) != 0)
  {
    v63 = 0;
    v21 = (int *)(v13 + 4);
    v60 = v75;
  }
  else
  {
    v67 = 64;
    v21 = (int *)&v67;
    v22 = v19;
    v23 = v20;
    v24 = (char *)copyDataForUniquedValue((uint64_t)v14, *(_DWORD *)__s, v75, &v67);
    LOBYTE(v20) = v23;
    LODWORD(v19) = v22;
    __s = v24;
    v60 = (uint8_t *)v24;
    v63 = v24 != (char *)v75;
  }
  v25 = *v21;
  v61 = v20;
  v62 = v19;
  if (*v21 < 1)
  {
    v65 = 0;
    v31 = 0;
LABEL_52:
    if (v63)
      free(v60);
    if (v62)
      v17 = v65;
    else
      v17 = v31;
    if (((v62 | v61 ^ 1) & 1) == 0)
      v17 = *(_DWORD *)(v64 + 8) != 0;
    if (dword_1EF19FC90 >= 5)
    {
      v55 = *__error();
      v56 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        v57 = *(_QWORD *)v12;
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&buf[4] = v17;
        v71 = 2080;
        v72 = v57;
        v73 = 2048;
        v74 = v12;
        _os_log_impl(&dword_1B8270000, v56, OS_LOG_TYPE_DEFAULT, "====== do_compare ret:%d %s qp:%p", buf, 0x1Cu);
      }
      *__error() = v55;
    }
    return v17;
  }
  v26 = 0;
  v27 = 0;
  v65 = 0;
  v28 = v19 | v20;
  v29 = __s;
  while (!v29)
  {
    if ((v28 & 1) != 0)
    {
      v31 = 0;
      v32 = 1;
      goto LABEL_28;
    }
    v33 = *(_DWORD *)(v12 + 24);
LABEL_42:
    if (v33 == 5 || v33 == 2)
    {
      v17 = 0;
      if (!v63)
        return v17;
      goto LABEL_65;
    }
    v31 = 0;
    if ((v13[1] & 0x10) == 0)
      goto LABEL_52;
LABEL_32:
    if (__s)
    {
      v29 = __s + 4;
      __s += 4;
      v26 += 4;
      if (v26 < v25)
        continue;
    }
    goto LABEL_52;
  }
  v30 = _db_compare_val((uint64_t)v14);
  v31 = v30;
  v32 = !v30;
  if ((v28 & 1) != 0)
  {
    if (v30 && v66 != 5)
    {
      v31 = 1;
LABEL_30:
      v65 = db_eval_obj_qp_array_set_match_at_index(v8, v12, v27);
      db_eval_obj_qp_array_set_match_at_index(v64, v12, v27);
      if (dword_1EF19FC90 >= 5)
      {
        v59 = *__error();
        v58 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v27;
          v71 = 2048;
          v72 = v12;
          _os_log_impl(&dword_1B8270000, v58, OS_LOG_TYPE_DEFAULT, "====== do_compare setting match bit:%d qp:%p", buf, 0x12u);
        }
        *__error() = v59;
      }
LABEL_31:
      ++v27;
      if ((v13[1] & 0x10) == 0)
        goto LABEL_52;
      goto LABEL_32;
    }
LABEL_28:
    if (!v32 || v66 != 5)
      goto LABEL_31;
    goto LABEL_30;
  }
  v33 = *(_DWORD *)(v12 + 24);
  if (!v30)
    goto LABEL_42;
  v31 = 1;
  if (v33 == 2 || v33 == 5)
  {
    if ((v13[1] & 0x10) == 0)
      goto LABEL_52;
    goto LABEL_32;
  }
  v17 = 1;
  if (v63)
LABEL_65:
    free(v60);
  return v17;
}

void *query_strdup(const char *a1)
{
  size_t v2;
  void *v3;
  uint8_t v5[16];

  v2 = strlen(a1);
  v3 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v2 + 1, 0x6085D6BuLL);
  if (!v3 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v5, 2u);
  }
  memcpy(v3, a1, v2);
  *((_BYTE *)v3 + v2) = 0;
  return v3;
}

BOOL _db_compare_val(uint64_t a1)
{
  uint64_t v1;
  unsigned __int16 *v2;
  uint64_t v3;
  unsigned int *v4;
  int v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  _BOOL8 v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _BOOL4 v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  int v39;
  int v40;
  char v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  float v46;
  unsigned int v47;
  const float *v48;
  vDSP_Length v49;
  float v50;
  float16x8_t v52;
  float32x4_t v53;
  float16x8_t v54;
  float16x8_t v55;
  float16x8_t v56;
  float16x8_t v57;
  float16x8_t v58;
  float16x8_t v59;
  float16x8_t v60;
  float16x8_t v61;
  float16x8_t v62;
  float16x8_t v63;
  float16x8_t v64;
  float16x8_t v65;
  float16x8_t v66;
  float16x8_t v67;
  float16x8_t v68;
  float16x8_t v69;
  float16x8_t v70;
  float16x8_t v71;
  float16x8_t v72;
  float16x8_t v73;
  float16x8_t v74;
  float16x8_t v75;
  float16x8_t v76;
  float16x8_t v77;
  float16x8_t v78;
  float16x8_t v79;
  float16x8_t v80;
  float16x8_t v81;
  float16x8_t v82;
  float16x8_t v83;
  float16x8_t v84;
  float32x4_t v85;
  float16x8_t v86;
  float16x8_t v87;
  float16x8_t v88;
  float16x8_t v89;
  float16x8_t v90;
  float16x8_t v91;
  float16x8_t v92;
  float16x8_t v93;
  float16x8_t v94;
  float16x8_t v95;
  float16x8_t v96;
  float16x8_t v97;
  float16x8_t v98;
  float16x8_t v99;
  float16x8_t v100;
  float16x8_t v101;
  float16x8_t v102;
  float16x8_t v103;
  float16x8_t v104;
  float16x8_t v105;
  float16x8_t v106;
  float16x8_t v107;
  float16x8_t v108;
  float16x8_t v109;
  float16x8_t v110;
  float16x8_t v111;
  float16x8_t v112;
  float16x8_t v113;
  float16x8_t v114;
  float16x8_t v115;
  vDSP_Length v116;
  uint64_t v117;
  float16x4_t *v118;
  float16x8_t v119;
  float32x4_t v120;
  float32x4_t v121;
  void **v122;
  uint64_t v123;
  float16x4_t *v124;
  float16x8_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t *v128;
  float16x8_t v129;
  float32x4_t v130;
  float16x8_t v131;
  float16x8_t v132;
  float16x8_t v133;
  float16x8_t v134;
  float16x8_t v135;
  float16x8_t v136;
  float16x8_t v137;
  float16x8_t v138;
  float16x8_t v139;
  float16x8_t v140;
  float16x8_t v141;
  float16x8_t v142;
  float16x8_t v143;
  float16x8_t v144;
  float16x8_t v145;
  float16x8_t v146;
  float16x8_t v147;
  float16x8_t v148;
  float16x8_t v149;
  float16x8_t v150;
  float16x8_t v151;
  float16x8_t v152;
  float16x8_t v153;
  float16x8_t v154;
  float16x8_t v155;
  float16x8_t v156;
  float16x8_t v157;
  float16x8_t v158;
  float16x8_t v159;
  float16x8_t v160;
  float16x8_t v161;
  float16x8_t v162;
  float16x8_t v163;
  float16x8_t v164;
  float16x8_t v165;
  float16x8_t v166;
  float16x8_t v167;
  float16x8_t v168;
  float16x8_t v169;
  float16x8_t v170;
  float16x8_t v171;
  float16x8_t v172;
  float16x8_t v173;
  float16x8_t v174;
  float16x8_t v175;
  float16x8_t v176;
  float16x8_t v177;
  float16x8_t v178;
  float16x8_t v179;
  float16x8_t v180;
  float16x8_t v181;
  float16x8_t v182;
  float16x8_t v183;
  float16x8_t v184;
  float16x8_t v185;
  float16x8_t v186;
  float16x8_t v187;
  float16x8_t v188;
  float16x8_t v189;
  float16x8_t v190;
  float16x8_t v191;
  float16x8_t v192;
  float16x8_t v193;
  float32x4_t v194;
  float16x8_t v195;
  float16x8_t v196;
  float16x8_t v197;
  float16x8_t v198;
  float16x8_t v199;
  float16x8_t v200;
  float16x8_t v201;
  float16x8_t v202;
  float16x8_t v203;
  float16x8_t v204;
  float16x8_t v205;
  float16x8_t v206;
  float16x8_t v207;
  float16x8_t v208;
  float16x8_t v209;
  float16x8_t v210;
  float16x8_t v211;
  float16x8_t v212;
  float16x8_t v213;
  float16x8_t v214;
  float16x8_t v215;
  float16x8_t v216;
  float16x8_t v217;
  float16x8_t v218;
  float16x8_t v219;
  float16x8_t v220;
  float16x8_t v221;
  float16x8_t v222;
  float16x8_t v223;
  float16x8_t v224;
  float16x8_t v225;
  float16x8_t v226;
  float16x8_t v227;
  float16x8_t v228;
  float16x8_t v229;
  float16x8_t v230;
  float16x8_t v231;
  float16x8_t v232;
  float16x8_t v233;
  float16x8_t v234;
  float16x8_t v235;
  float16x8_t v236;
  float16x8_t v237;
  float16x8_t v238;
  float16x8_t v239;
  float16x8_t v240;
  float16x8_t v241;
  float16x8_t v242;
  float16x8_t v243;
  float16x8_t v244;
  float16x8_t v245;
  float16x8_t v246;
  float16x8_t v247;
  float16x8_t v248;
  float16x8_t v249;
  float16x8_t v250;
  float16x8_t v251;
  float16x8_t v252;
  float16x8_t v253;
  float16x8_t v254;
  float16x8_t v255;
  float16x8_t v256;
  char *v257;
  char *v258;
  const char *v259;
  char *v260;
  const char *v261;
  uint64_t *v262;
  float32x4_t __C;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x4_t v390;
  void *__src[384];
  float v392[3];

  v1 = MEMORY[0x1E0C80A78](a1);
  v6 = v5;
  v8 = v7;
  v9 = v3;
  v10 = v2;
  v11 = v1;
  v12 = *v2;
  if ((_DWORD)v12 != 14)
  {
    if ((_DWORD)v12 == 11 && (v2[1] & 0x10) != 0)
    {
      if (v4)
      {
        v13 = *v4;
        v14 = (unint64_t *)(v3 + 112);
        v15 = *(_QWORD **)(v3 + 112);
        if (!v15)
        {
          v15 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x180uLL, 0x6085D6BuLL);
          if (!v15)
            _log_fault_for_malloc_failure();
          *(_DWORD *)v15 = 0;
          v15[1] = 0;
          v15[2] = 0;
          *((_DWORD *)v15 + 6) = 0;
          v15[4] = 0;
          v15[5] = 0;
          *((_DWORD *)v15 + 12) = 0;
          v15[7] = 0;
          v15[8] = 0;
          *((_DWORD *)v15 + 18) = 0;
          v15[10] = 0;
          v15[11] = 0;
          *((_DWORD *)v15 + 24) = 0;
          v15[13] = 0;
          v15[14] = 0;
          *((_DWORD *)v15 + 30) = 0;
          *((_DWORD *)v15 + 36) = 0;
          v15[16] = 0;
          v15[17] = 0;
          v15[19] = 0;
          v15[20] = 0;
          *((_DWORD *)v15 + 42) = 0;
          v15[22] = 0;
          v15[23] = 0;
          *((_DWORD *)v15 + 48) = 0;
          v15[25] = 0;
          v15[26] = 0;
          *((_DWORD *)v15 + 54) = 0;
          v15[28] = 0;
          v15[29] = 0;
          *((_DWORD *)v15 + 60) = 0;
          *((_DWORD *)v15 + 66) = 0;
          v15[31] = 0;
          v15[32] = 0;
          *((_DWORD *)v15 + 72) = 0;
          v15[34] = 0;
          v15[35] = 0;
          v15[37] = 0;
          v15[38] = 0;
          *((_DWORD *)v15 + 78) = 0;
          v15[40] = 0;
          v15[41] = 0;
          *((_DWORD *)v15 + 84) = 0;
          v15[43] = 0;
          v15[44] = 0;
          *((_DWORD *)v15 + 90) = 0;
          v15[46] = 0;
          v15[47] = 0;
          __dmb(0xBu);
          while (!__ldxr(v14))
          {
            if (!__stxr((unint64_t)v15, v14))
              goto LABEL_28;
          }
          __clrex();
          qp_string_id_cache_free(v15);
          v15 = (_QWORD *)*v14;
        }
LABEL_28:
        v27 = (v13 >> 8) & 0xF;
        v28 = (char *)&v15[3 * v27];
        os_unfair_lock_lock((os_unfair_lock_t)v28);
        v29 = *((_QWORD *)v28 + 1);
        v262 = (uint64_t *)(v28 + 8);
        if (v29)
        {
          if (!*(_BYTE *)(v29 + 176))
          {
            v36 = *(_DWORD *)(v29 + 20);
            if (!v36 || !((*(_DWORD *)(v29 + 16) ^ v13) >> (-4 * v36)))
            {
              v37 = 28 - 4 * v36;
              v38 = *(_QWORD *)(v29 + 8 * ((v13 >> v37) & 0xF) + 48);
              if ((v38 & 1) != 0)
              {
                v39 = v36 + 2;
                do
                {
                  v37 = 32 - 4 * v39;
                  v38 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v13 >> v37) & 0xF));
                  ++v39;
                }
                while ((v38 & 1) != 0);
              }
              if (v38
                && ((*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v38 + 16))(v38, v13, ~(-1 << v37)) & 1) != 0)
              {
                v17 = 1;
LABEL_60:
                os_unfair_lock_unlock((os_unfair_lock_t)v28);
LABEL_61:
                *v8 = 4;
                return v17;
              }
            }
          }
        }
        v30 = (char *)&v15[3 * v27];
        v33 = *((_QWORD *)v30 + 2);
        v32 = (uint64_t *)(v30 + 16);
        v31 = v33;
        if (v33)
        {
          if (!*(_BYTE *)(v31 + 176))
          {
            v40 = *(_DWORD *)(v31 + 20);
            if (!v40 || !((*(_DWORD *)(v31 + 16) ^ v13) >> (-4 * v40)))
            {
              v41 = 28 - 4 * v40;
              v42 = *(_QWORD *)(v31 + 8 * ((v13 >> v41) & 0xF) + 48);
              if ((v42 & 1) != 0)
              {
                v43 = v40 + 2;
                do
                {
                  v41 = 32 - 4 * v43;
                  v42 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v13 >> v41) & 0xF));
                  ++v43;
                }
                while ((v42 & 1) != 0);
              }
              if (v42
                && ((*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v42 + 16))(v42, v13, ~(-1 << v41)) & 1) != 0)
              {
                v17 = 0;
                goto LABEL_60;
              }
            }
          }
        }
        os_unfair_lock_unlock((os_unfair_lock_t)v28);
        if (v6)
        {
          if (db_get_string_for_id_locked((int *)v11, v13))
            goto LABEL_34;
        }
        else if (db_get_string_for_id((int *)v11, v13))
        {
LABEL_34:
          v34 = db_compare_val(*v10);
          os_unfair_lock_lock((os_unfair_lock_t)v28);
          if (v34)
          {
            v35 = *v262;
            if (!*v262)
            {
              v35 = SIUINT32SetCreate();
              *v262 = v35;
            }
            v17 = 1;
            goto LABEL_59;
          }
LABEL_40:
          v35 = *v32;
          if (*v32)
          {
            v17 = 0;
          }
          else
          {
            v35 = SIUINT32SetCreate();
            v17 = 0;
            *v32 = v35;
          }
LABEL_59:
          SIValueSet<unsigned int>::SIValueSetInsert((unsigned int *)(v35 + 16), v13);
          goto LABEL_60;
        }
        os_unfair_lock_lock((os_unfair_lock_t)v28);
        goto LABEL_40;
      }
      return 0;
    }
    goto LABEL_20;
  }
  if ((~v2[1] & 0x5020) != 0)
  {
LABEL_20:
    v17 = db_compare_val(v12);
    if ((v10[1] & 0x10) != 0)
      goto LABEL_61;
    return v17;
  }
  if (*(_DWORD *)(v3 + 24) != 15)
    return 0;
  v17 = 0;
  if (v4 && *(float *)(v3 + 64) > 0.0)
  {
    v18 = *v4;
    v19 = *(_DWORD *)v11;
    if (v5)
    {
      if (v19 != 1685287992)
      {
        v257 = __si_assert_copy_extra_268();
        v258 = v257;
        v259 = "";
        if (v257)
          v259 = v257;
        __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 398, v259);
        goto LABEL_98;
      }
      __C.i8[0] = 0;
      memset(__src, 0, 24);
      v20 = *(_QWORD *)(v11 + 920);
      v21 = 1;
    }
    else
    {
      if (v19 != 1685287992)
      {
        v260 = __si_assert_copy_extra_268();
        v258 = v260;
        v261 = "";
        if (v260)
          v261 = v260;
        __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 397, v261);
LABEL_98:
        free(v258);
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      __C.i8[0] = 0;
      memset(__src, 0, 24);
      v20 = *(_QWORD *)(v11 + 920);
      v21 = 0;
    }
    data_map_get_data_entry((uint64_t)__src, v20, v18, &__C, v21);
    v22 = __C.u8[0];
    if (__C.i8[0])
    {
      v22 = LOBYTE(__src[2]);
      v23 = BYTE1(__src[2]);
      v24 = HIWORD(LODWORD(__src[2]));
      v25 = HIBYTE(LODWORD(__src[2]));
      v26 = (char *)__src[0];
    }
    else
    {
      v25 = 0;
      LOBYTE(v24) = 0;
      v23 = 0;
      v26 = 0;
    }
    v17 = 0;
    if (!v26)
      return v17;
    v44 = *(_DWORD *)(v9 + 60);
    if ((v44 & 3) != v23 || ((v44 >> 2) & 3) != v22)
      return v17;
    v45 = *(_QWORD *)(v9 + 296);
    v46 = *(float *)(v9 + 64);
    v47 = v44 >> 25;
    if (v47 && (v24 | (v25 << 8)) != v47)
      return 0;
    if (v23 == 2)
    {
      if (v22 == 1)
      {
        bzero(__src, 0xC00uLL);
        v117 = 0;
        v118 = (float16x4_t *)(v45 + 16);
        do
        {
          v119 = *(float16x8_t *)v118[-2].i8;
          v120 = vcvtq_f32_f16(*v118);
          v121 = vcvt_hight_f32_f16(*(float16x8_t *)v118->i8);
          v122 = &__src[v117];
          *(float32x4_t *)v122 = vcvtq_f32_f16(*(float16x4_t *)v119.i8);
          *((float32x4_t *)v122 + 1) = vcvt_hight_f32_f16(v119);
          *((float32x4_t *)v122 + 2) = v120;
          *((float32x4_t *)v122 + 3) = v121;
          v117 += 8;
          v118 += 4;
        }
        while (v117 != 384);
        bzero(&__C, 0xC00uLL);
        v123 = 0;
        v124 = (float16x4_t *)(v26 + 16);
        do
        {
          v125 = *(float16x8_t *)v124[-2].i8;
          v126 = vcvtq_f32_f16(*v124);
          v127 = vcvt_hight_f32_f16(*(float16x8_t *)v124->i8);
          v128 = (float32x4_t *)((char *)&__C + v123);
          *v128 = vcvtq_f32_f16(*(float16x4_t *)v125.i8);
          v128[1] = vcvt_hight_f32_f16(v125);
          v128[2] = v126;
          v128[3] = v127;
          v123 += 64;
          v124 += 4;
        }
        while (v123 != 3072);
        v392[0] = 3.4028e38;
        v116 = 768;
        goto LABEL_90;
      }
      if (v22)
        return 0;
      memcpy(__src, v26, sizeof(__src));
      __C.i32[0] = 2139095039;
      v48 = (const float *)v45;
      v49 = 768;
    }
    else
    {
      if (v23 != 1)
      {
        if (v23)
          return 0;
        if (v22 != 1)
        {
          if (v22)
            return 0;
          memcpy(__src, v26, 0x400uLL);
          __C.i32[0] = 2139095039;
          v48 = (const float *)v45;
          v49 = 256;
          goto LABEL_80;
        }
        v52 = *(float16x8_t *)(v45 + 16);
        v53 = vcvtq_f32_f16(*(float16x4_t *)v45);
        *(float32x4_t *)&__src[2] = vcvt_hight_f32_f16(*(float16x8_t *)v45);
        *(float32x4_t *)__src = v53;
        *(float32x4_t *)&__src[6] = vcvt_hight_f32_f16(v52);
        *(float32x4_t *)&__src[4] = vcvtq_f32_f16(*(float16x4_t *)v52.i8);
        v54 = *(float16x8_t *)(v45 + 32);
        v55 = *(float16x8_t *)(v45 + 48);
        *(float32x4_t *)&__src[10] = vcvt_hight_f32_f16(v54);
        *(float32x4_t *)&__src[8] = vcvtq_f32_f16(*(float16x4_t *)v54.i8);
        *(float32x4_t *)&__src[14] = vcvt_hight_f32_f16(v55);
        *(float32x4_t *)&__src[12] = vcvtq_f32_f16(*(float16x4_t *)v55.i8);
        v56 = *(float16x8_t *)(v45 + 64);
        v57 = *(float16x8_t *)(v45 + 80);
        *(float32x4_t *)&__src[18] = vcvt_hight_f32_f16(v56);
        *(float32x4_t *)&__src[16] = vcvtq_f32_f16(*(float16x4_t *)v56.i8);
        *(float32x4_t *)&__src[22] = vcvt_hight_f32_f16(v57);
        *(float32x4_t *)&__src[20] = vcvtq_f32_f16(*(float16x4_t *)v57.i8);
        v58 = *(float16x8_t *)(v45 + 96);
        v59 = *(float16x8_t *)(v45 + 112);
        *(float32x4_t *)&__src[26] = vcvt_hight_f32_f16(v58);
        *(float32x4_t *)&__src[24] = vcvtq_f32_f16(*(float16x4_t *)v58.i8);
        *(float32x4_t *)&__src[30] = vcvt_hight_f32_f16(v59);
        *(float32x4_t *)&__src[28] = vcvtq_f32_f16(*(float16x4_t *)v59.i8);
        v60 = *(float16x8_t *)(v45 + 128);
        v61 = *(float16x8_t *)(v45 + 144);
        *(float32x4_t *)&__src[34] = vcvt_hight_f32_f16(v60);
        *(float32x4_t *)&__src[32] = vcvtq_f32_f16(*(float16x4_t *)v60.i8);
        *(float32x4_t *)&__src[38] = vcvt_hight_f32_f16(v61);
        *(float32x4_t *)&__src[36] = vcvtq_f32_f16(*(float16x4_t *)v61.i8);
        v62 = *(float16x8_t *)(v45 + 160);
        v63 = *(float16x8_t *)(v45 + 176);
        *(float32x4_t *)&__src[42] = vcvt_hight_f32_f16(v62);
        *(float32x4_t *)&__src[40] = vcvtq_f32_f16(*(float16x4_t *)v62.i8);
        *(float32x4_t *)&__src[46] = vcvt_hight_f32_f16(v63);
        *(float32x4_t *)&__src[44] = vcvtq_f32_f16(*(float16x4_t *)v63.i8);
        v64 = *(float16x8_t *)(v45 + 192);
        v65 = *(float16x8_t *)(v45 + 208);
        *(float32x4_t *)&__src[50] = vcvt_hight_f32_f16(v64);
        *(float32x4_t *)&__src[48] = vcvtq_f32_f16(*(float16x4_t *)v64.i8);
        *(float32x4_t *)&__src[54] = vcvt_hight_f32_f16(v65);
        *(float32x4_t *)&__src[52] = vcvtq_f32_f16(*(float16x4_t *)v65.i8);
        v66 = *(float16x8_t *)(v45 + 224);
        v67 = *(float16x8_t *)(v45 + 240);
        *(float32x4_t *)&__src[58] = vcvt_hight_f32_f16(v66);
        *(float32x4_t *)&__src[56] = vcvtq_f32_f16(*(float16x4_t *)v66.i8);
        *(float32x4_t *)&__src[62] = vcvt_hight_f32_f16(v67);
        *(float32x4_t *)&__src[60] = vcvtq_f32_f16(*(float16x4_t *)v67.i8);
        v68 = *(float16x8_t *)(v45 + 256);
        v69 = *(float16x8_t *)(v45 + 272);
        *(float32x4_t *)&__src[66] = vcvt_hight_f32_f16(v68);
        *(float32x4_t *)&__src[64] = vcvtq_f32_f16(*(float16x4_t *)v68.i8);
        *(float32x4_t *)&__src[70] = vcvt_hight_f32_f16(v69);
        *(float32x4_t *)&__src[68] = vcvtq_f32_f16(*(float16x4_t *)v69.i8);
        v70 = *(float16x8_t *)(v45 + 288);
        v71 = *(float16x8_t *)(v45 + 304);
        *(float32x4_t *)&__src[74] = vcvt_hight_f32_f16(v70);
        *(float32x4_t *)&__src[72] = vcvtq_f32_f16(*(float16x4_t *)v70.i8);
        *(float32x4_t *)&__src[78] = vcvt_hight_f32_f16(v71);
        *(float32x4_t *)&__src[76] = vcvtq_f32_f16(*(float16x4_t *)v71.i8);
        v72 = *(float16x8_t *)(v45 + 320);
        v73 = *(float16x8_t *)(v45 + 336);
        *(float32x4_t *)&__src[82] = vcvt_hight_f32_f16(v72);
        *(float32x4_t *)&__src[80] = vcvtq_f32_f16(*(float16x4_t *)v72.i8);
        *(float32x4_t *)&__src[86] = vcvt_hight_f32_f16(v73);
        *(float32x4_t *)&__src[84] = vcvtq_f32_f16(*(float16x4_t *)v73.i8);
        v74 = *(float16x8_t *)(v45 + 352);
        v75 = *(float16x8_t *)(v45 + 368);
        *(float32x4_t *)&__src[90] = vcvt_hight_f32_f16(v74);
        *(float32x4_t *)&__src[88] = vcvtq_f32_f16(*(float16x4_t *)v74.i8);
        *(float32x4_t *)&__src[94] = vcvt_hight_f32_f16(v75);
        *(float32x4_t *)&__src[92] = vcvtq_f32_f16(*(float16x4_t *)v75.i8);
        v76 = *(float16x8_t *)(v45 + 384);
        v77 = *(float16x8_t *)(v45 + 400);
        *(float32x4_t *)&__src[98] = vcvt_hight_f32_f16(v76);
        *(float32x4_t *)&__src[96] = vcvtq_f32_f16(*(float16x4_t *)v76.i8);
        *(float32x4_t *)&__src[102] = vcvt_hight_f32_f16(v77);
        *(float32x4_t *)&__src[100] = vcvtq_f32_f16(*(float16x4_t *)v77.i8);
        v78 = *(float16x8_t *)(v45 + 416);
        v79 = *(float16x8_t *)(v45 + 432);
        *(float32x4_t *)&__src[106] = vcvt_hight_f32_f16(v78);
        *(float32x4_t *)&__src[104] = vcvtq_f32_f16(*(float16x4_t *)v78.i8);
        *(float32x4_t *)&__src[110] = vcvt_hight_f32_f16(v79);
        *(float32x4_t *)&__src[108] = vcvtq_f32_f16(*(float16x4_t *)v79.i8);
        v80 = *(float16x8_t *)(v45 + 448);
        v81 = *(float16x8_t *)(v45 + 464);
        *(float32x4_t *)&__src[114] = vcvt_hight_f32_f16(v80);
        *(float32x4_t *)&__src[112] = vcvtq_f32_f16(*(float16x4_t *)v80.i8);
        *(float32x4_t *)&__src[118] = vcvt_hight_f32_f16(v81);
        *(float32x4_t *)&__src[116] = vcvtq_f32_f16(*(float16x4_t *)v81.i8);
        v82 = *(float16x8_t *)(v45 + 480);
        v83 = *(float16x8_t *)(v45 + 496);
        *(float32x4_t *)&__src[122] = vcvt_hight_f32_f16(v82);
        *(float32x4_t *)&__src[120] = vcvtq_f32_f16(*(float16x4_t *)v82.i8);
        *(float32x4_t *)&__src[126] = vcvt_hight_f32_f16(v83);
        *(float32x4_t *)&__src[124] = vcvtq_f32_f16(*(float16x4_t *)v83.i8);
        bzero(&__C, 0x400uLL);
        v84 = *((float16x8_t *)v26 + 1);
        v85 = vcvt_hight_f32_f16(*(float16x8_t *)v26);
        __C = vcvtq_f32_f16(*(float16x4_t *)v26);
        v264 = v85;
        v265 = vcvtq_f32_f16(*(float16x4_t *)v84.i8);
        v266 = vcvt_hight_f32_f16(v84);
        v86 = *((float16x8_t *)v26 + 2);
        v87 = *((float16x8_t *)v26 + 3);
        v267 = vcvtq_f32_f16(*(float16x4_t *)v86.i8);
        v268 = vcvt_hight_f32_f16(v86);
        v269 = vcvtq_f32_f16(*(float16x4_t *)v87.i8);
        v270 = vcvt_hight_f32_f16(v87);
        v88 = *((float16x8_t *)v26 + 4);
        v89 = *((float16x8_t *)v26 + 5);
        v271 = vcvtq_f32_f16(*(float16x4_t *)v88.i8);
        v272 = vcvt_hight_f32_f16(v88);
        v273 = vcvtq_f32_f16(*(float16x4_t *)v89.i8);
        v274 = vcvt_hight_f32_f16(v89);
        v90 = *((float16x8_t *)v26 + 6);
        v91 = *((float16x8_t *)v26 + 7);
        v275 = vcvtq_f32_f16(*(float16x4_t *)v90.i8);
        v276 = vcvt_hight_f32_f16(v90);
        v277 = vcvtq_f32_f16(*(float16x4_t *)v91.i8);
        v278 = vcvt_hight_f32_f16(v91);
        v92 = *((float16x8_t *)v26 + 8);
        v93 = *((float16x8_t *)v26 + 9);
        v279 = vcvtq_f32_f16(*(float16x4_t *)v92.i8);
        v280 = vcvt_hight_f32_f16(v92);
        v281 = vcvtq_f32_f16(*(float16x4_t *)v93.i8);
        v282 = vcvt_hight_f32_f16(v93);
        v94 = *((float16x8_t *)v26 + 10);
        v95 = *((float16x8_t *)v26 + 11);
        v283 = vcvtq_f32_f16(*(float16x4_t *)v94.i8);
        v284 = vcvt_hight_f32_f16(v94);
        v285 = vcvtq_f32_f16(*(float16x4_t *)v95.i8);
        v286 = vcvt_hight_f32_f16(v95);
        v96 = *((float16x8_t *)v26 + 12);
        v97 = *((float16x8_t *)v26 + 13);
        v287 = vcvtq_f32_f16(*(float16x4_t *)v96.i8);
        v288 = vcvt_hight_f32_f16(v96);
        v289 = vcvtq_f32_f16(*(float16x4_t *)v97.i8);
        v290 = vcvt_hight_f32_f16(v97);
        v98 = *((float16x8_t *)v26 + 14);
        v99 = *((float16x8_t *)v26 + 15);
        v291 = vcvtq_f32_f16(*(float16x4_t *)v98.i8);
        v292 = vcvt_hight_f32_f16(v98);
        v293 = vcvtq_f32_f16(*(float16x4_t *)v99.i8);
        v294 = vcvt_hight_f32_f16(v99);
        v100 = *((float16x8_t *)v26 + 16);
        v101 = *((float16x8_t *)v26 + 17);
        v295 = vcvtq_f32_f16(*(float16x4_t *)v100.i8);
        v296 = vcvt_hight_f32_f16(v100);
        v297 = vcvtq_f32_f16(*(float16x4_t *)v101.i8);
        v298 = vcvt_hight_f32_f16(v101);
        v102 = *((float16x8_t *)v26 + 18);
        v103 = *((float16x8_t *)v26 + 19);
        v299 = vcvtq_f32_f16(*(float16x4_t *)v102.i8);
        v300 = vcvt_hight_f32_f16(v102);
        v301 = vcvtq_f32_f16(*(float16x4_t *)v103.i8);
        v302 = vcvt_hight_f32_f16(v103);
        v104 = *((float16x8_t *)v26 + 20);
        v105 = *((float16x8_t *)v26 + 21);
        v303 = vcvtq_f32_f16(*(float16x4_t *)v104.i8);
        v304 = vcvt_hight_f32_f16(v104);
        v305 = vcvtq_f32_f16(*(float16x4_t *)v105.i8);
        v306 = vcvt_hight_f32_f16(v105);
        v106 = *((float16x8_t *)v26 + 22);
        v107 = *((float16x8_t *)v26 + 23);
        v307 = vcvtq_f32_f16(*(float16x4_t *)v106.i8);
        v308 = vcvt_hight_f32_f16(v106);
        v309 = vcvtq_f32_f16(*(float16x4_t *)v107.i8);
        v310 = vcvt_hight_f32_f16(v107);
        v108 = *((float16x8_t *)v26 + 24);
        v109 = *((float16x8_t *)v26 + 25);
        v311 = vcvtq_f32_f16(*(float16x4_t *)v108.i8);
        v312 = vcvt_hight_f32_f16(v108);
        v313 = vcvtq_f32_f16(*(float16x4_t *)v109.i8);
        v314 = vcvt_hight_f32_f16(v109);
        v110 = *((float16x8_t *)v26 + 26);
        v111 = *((float16x8_t *)v26 + 27);
        v315 = vcvtq_f32_f16(*(float16x4_t *)v110.i8);
        v316 = vcvt_hight_f32_f16(v110);
        v317 = vcvtq_f32_f16(*(float16x4_t *)v111.i8);
        v318 = vcvt_hight_f32_f16(v111);
        v112 = *((float16x8_t *)v26 + 28);
        v113 = *((float16x8_t *)v26 + 29);
        v319 = vcvtq_f32_f16(*(float16x4_t *)v112.i8);
        v320 = vcvt_hight_f32_f16(v112);
        v321 = vcvtq_f32_f16(*(float16x4_t *)v113.i8);
        v322 = vcvt_hight_f32_f16(v113);
        v114 = *((float16x8_t *)v26 + 30);
        v115 = *((float16x8_t *)v26 + 31);
        v323 = vcvtq_f32_f16(*(float16x4_t *)v114.i8);
        v324 = vcvt_hight_f32_f16(v114);
        v326 = vcvt_hight_f32_f16(v115);
        v325 = vcvtq_f32_f16(*(float16x4_t *)v115.i8);
        v392[0] = 3.4028e38;
        v116 = 256;
LABEL_90:
        vDSP_distancesq((const float *)__src, 1, __C.f32, 1, v392, v116);
        v50 = v392[0];
        return v50 <= v46;
      }
      if (v22 == 1)
      {
        bzero(__src, 0x800uLL);
        v129 = *(float16x8_t *)(v45 + 16);
        v130 = vcvtq_f32_f16(*(float16x4_t *)v45);
        *(float32x4_t *)&__src[2] = vcvt_hight_f32_f16(*(float16x8_t *)v45);
        *(float32x4_t *)__src = v130;
        *(float32x4_t *)&__src[6] = vcvt_hight_f32_f16(v129);
        *(float32x4_t *)&__src[4] = vcvtq_f32_f16(*(float16x4_t *)v129.i8);
        v131 = *(float16x8_t *)(v45 + 32);
        v132 = *(float16x8_t *)(v45 + 48);
        *(float32x4_t *)&__src[10] = vcvt_hight_f32_f16(v131);
        *(float32x4_t *)&__src[8] = vcvtq_f32_f16(*(float16x4_t *)v131.i8);
        *(float32x4_t *)&__src[14] = vcvt_hight_f32_f16(v132);
        *(float32x4_t *)&__src[12] = vcvtq_f32_f16(*(float16x4_t *)v132.i8);
        v133 = *(float16x8_t *)(v45 + 64);
        v134 = *(float16x8_t *)(v45 + 80);
        *(float32x4_t *)&__src[18] = vcvt_hight_f32_f16(v133);
        *(float32x4_t *)&__src[16] = vcvtq_f32_f16(*(float16x4_t *)v133.i8);
        *(float32x4_t *)&__src[22] = vcvt_hight_f32_f16(v134);
        *(float32x4_t *)&__src[20] = vcvtq_f32_f16(*(float16x4_t *)v134.i8);
        v135 = *(float16x8_t *)(v45 + 96);
        v136 = *(float16x8_t *)(v45 + 112);
        *(float32x4_t *)&__src[26] = vcvt_hight_f32_f16(v135);
        *(float32x4_t *)&__src[24] = vcvtq_f32_f16(*(float16x4_t *)v135.i8);
        *(float32x4_t *)&__src[30] = vcvt_hight_f32_f16(v136);
        *(float32x4_t *)&__src[28] = vcvtq_f32_f16(*(float16x4_t *)v136.i8);
        v137 = *(float16x8_t *)(v45 + 128);
        v138 = *(float16x8_t *)(v45 + 144);
        *(float32x4_t *)&__src[34] = vcvt_hight_f32_f16(v137);
        *(float32x4_t *)&__src[32] = vcvtq_f32_f16(*(float16x4_t *)v137.i8);
        *(float32x4_t *)&__src[38] = vcvt_hight_f32_f16(v138);
        *(float32x4_t *)&__src[36] = vcvtq_f32_f16(*(float16x4_t *)v138.i8);
        v139 = *(float16x8_t *)(v45 + 160);
        v140 = *(float16x8_t *)(v45 + 176);
        *(float32x4_t *)&__src[42] = vcvt_hight_f32_f16(v139);
        *(float32x4_t *)&__src[40] = vcvtq_f32_f16(*(float16x4_t *)v139.i8);
        *(float32x4_t *)&__src[46] = vcvt_hight_f32_f16(v140);
        *(float32x4_t *)&__src[44] = vcvtq_f32_f16(*(float16x4_t *)v140.i8);
        v141 = *(float16x8_t *)(v45 + 192);
        v142 = *(float16x8_t *)(v45 + 208);
        *(float32x4_t *)&__src[50] = vcvt_hight_f32_f16(v141);
        *(float32x4_t *)&__src[48] = vcvtq_f32_f16(*(float16x4_t *)v141.i8);
        *(float32x4_t *)&__src[54] = vcvt_hight_f32_f16(v142);
        *(float32x4_t *)&__src[52] = vcvtq_f32_f16(*(float16x4_t *)v142.i8);
        v143 = *(float16x8_t *)(v45 + 224);
        v144 = *(float16x8_t *)(v45 + 240);
        *(float32x4_t *)&__src[58] = vcvt_hight_f32_f16(v143);
        *(float32x4_t *)&__src[56] = vcvtq_f32_f16(*(float16x4_t *)v143.i8);
        *(float32x4_t *)&__src[62] = vcvt_hight_f32_f16(v144);
        *(float32x4_t *)&__src[60] = vcvtq_f32_f16(*(float16x4_t *)v144.i8);
        v145 = *(float16x8_t *)(v45 + 256);
        v146 = *(float16x8_t *)(v45 + 272);
        *(float32x4_t *)&__src[66] = vcvt_hight_f32_f16(v145);
        *(float32x4_t *)&__src[64] = vcvtq_f32_f16(*(float16x4_t *)v145.i8);
        *(float32x4_t *)&__src[70] = vcvt_hight_f32_f16(v146);
        *(float32x4_t *)&__src[68] = vcvtq_f32_f16(*(float16x4_t *)v146.i8);
        v147 = *(float16x8_t *)(v45 + 288);
        v148 = *(float16x8_t *)(v45 + 304);
        *(float32x4_t *)&__src[74] = vcvt_hight_f32_f16(v147);
        *(float32x4_t *)&__src[72] = vcvtq_f32_f16(*(float16x4_t *)v147.i8);
        *(float32x4_t *)&__src[78] = vcvt_hight_f32_f16(v148);
        *(float32x4_t *)&__src[76] = vcvtq_f32_f16(*(float16x4_t *)v148.i8);
        v149 = *(float16x8_t *)(v45 + 320);
        v150 = *(float16x8_t *)(v45 + 336);
        *(float32x4_t *)&__src[82] = vcvt_hight_f32_f16(v149);
        *(float32x4_t *)&__src[80] = vcvtq_f32_f16(*(float16x4_t *)v149.i8);
        *(float32x4_t *)&__src[86] = vcvt_hight_f32_f16(v150);
        *(float32x4_t *)&__src[84] = vcvtq_f32_f16(*(float16x4_t *)v150.i8);
        v151 = *(float16x8_t *)(v45 + 352);
        v152 = *(float16x8_t *)(v45 + 368);
        *(float32x4_t *)&__src[90] = vcvt_hight_f32_f16(v151);
        *(float32x4_t *)&__src[88] = vcvtq_f32_f16(*(float16x4_t *)v151.i8);
        *(float32x4_t *)&__src[94] = vcvt_hight_f32_f16(v152);
        *(float32x4_t *)&__src[92] = vcvtq_f32_f16(*(float16x4_t *)v152.i8);
        v153 = *(float16x8_t *)(v45 + 384);
        v154 = *(float16x8_t *)(v45 + 400);
        *(float32x4_t *)&__src[98] = vcvt_hight_f32_f16(v153);
        *(float32x4_t *)&__src[96] = vcvtq_f32_f16(*(float16x4_t *)v153.i8);
        *(float32x4_t *)&__src[102] = vcvt_hight_f32_f16(v154);
        *(float32x4_t *)&__src[100] = vcvtq_f32_f16(*(float16x4_t *)v154.i8);
        v155 = *(float16x8_t *)(v45 + 416);
        v156 = *(float16x8_t *)(v45 + 432);
        *(float32x4_t *)&__src[106] = vcvt_hight_f32_f16(v155);
        *(float32x4_t *)&__src[104] = vcvtq_f32_f16(*(float16x4_t *)v155.i8);
        *(float32x4_t *)&__src[110] = vcvt_hight_f32_f16(v156);
        *(float32x4_t *)&__src[108] = vcvtq_f32_f16(*(float16x4_t *)v156.i8);
        v157 = *(float16x8_t *)(v45 + 448);
        v158 = *(float16x8_t *)(v45 + 464);
        *(float32x4_t *)&__src[114] = vcvt_hight_f32_f16(v157);
        *(float32x4_t *)&__src[112] = vcvtq_f32_f16(*(float16x4_t *)v157.i8);
        *(float32x4_t *)&__src[118] = vcvt_hight_f32_f16(v158);
        *(float32x4_t *)&__src[116] = vcvtq_f32_f16(*(float16x4_t *)v158.i8);
        v159 = *(float16x8_t *)(v45 + 480);
        v160 = *(float16x8_t *)(v45 + 496);
        *(float32x4_t *)&__src[122] = vcvt_hight_f32_f16(v159);
        *(float32x4_t *)&__src[120] = vcvtq_f32_f16(*(float16x4_t *)v159.i8);
        *(float32x4_t *)&__src[126] = vcvt_hight_f32_f16(v160);
        *(float32x4_t *)&__src[124] = vcvtq_f32_f16(*(float16x4_t *)v160.i8);
        v161 = *(float16x8_t *)(v45 + 512);
        v162 = *(float16x8_t *)(v45 + 528);
        *(float32x4_t *)&__src[130] = vcvt_hight_f32_f16(v161);
        *(float32x4_t *)&__src[128] = vcvtq_f32_f16(*(float16x4_t *)v161.i8);
        *(float32x4_t *)&__src[134] = vcvt_hight_f32_f16(v162);
        *(float32x4_t *)&__src[132] = vcvtq_f32_f16(*(float16x4_t *)v162.i8);
        v163 = *(float16x8_t *)(v45 + 544);
        v164 = *(float16x8_t *)(v45 + 560);
        *(float32x4_t *)&__src[138] = vcvt_hight_f32_f16(v163);
        *(float32x4_t *)&__src[136] = vcvtq_f32_f16(*(float16x4_t *)v163.i8);
        *(float32x4_t *)&__src[142] = vcvt_hight_f32_f16(v164);
        *(float32x4_t *)&__src[140] = vcvtq_f32_f16(*(float16x4_t *)v164.i8);
        v165 = *(float16x8_t *)(v45 + 576);
        v166 = *(float16x8_t *)(v45 + 592);
        *(float32x4_t *)&__src[146] = vcvt_hight_f32_f16(v165);
        *(float32x4_t *)&__src[144] = vcvtq_f32_f16(*(float16x4_t *)v165.i8);
        *(float32x4_t *)&__src[150] = vcvt_hight_f32_f16(v166);
        *(float32x4_t *)&__src[148] = vcvtq_f32_f16(*(float16x4_t *)v166.i8);
        v167 = *(float16x8_t *)(v45 + 608);
        v168 = *(float16x8_t *)(v45 + 624);
        *(float32x4_t *)&__src[154] = vcvt_hight_f32_f16(v167);
        *(float32x4_t *)&__src[152] = vcvtq_f32_f16(*(float16x4_t *)v167.i8);
        *(float32x4_t *)&__src[158] = vcvt_hight_f32_f16(v168);
        *(float32x4_t *)&__src[156] = vcvtq_f32_f16(*(float16x4_t *)v168.i8);
        v169 = *(float16x8_t *)(v45 + 640);
        v170 = *(float16x8_t *)(v45 + 656);
        *(float32x4_t *)&__src[162] = vcvt_hight_f32_f16(v169);
        *(float32x4_t *)&__src[160] = vcvtq_f32_f16(*(float16x4_t *)v169.i8);
        *(float32x4_t *)&__src[166] = vcvt_hight_f32_f16(v170);
        *(float32x4_t *)&__src[164] = vcvtq_f32_f16(*(float16x4_t *)v170.i8);
        v171 = *(float16x8_t *)(v45 + 672);
        v172 = *(float16x8_t *)(v45 + 688);
        *(float32x4_t *)&__src[170] = vcvt_hight_f32_f16(v171);
        *(float32x4_t *)&__src[168] = vcvtq_f32_f16(*(float16x4_t *)v171.i8);
        *(float32x4_t *)&__src[174] = vcvt_hight_f32_f16(v172);
        *(float32x4_t *)&__src[172] = vcvtq_f32_f16(*(float16x4_t *)v172.i8);
        v173 = *(float16x8_t *)(v45 + 704);
        v174 = *(float16x8_t *)(v45 + 720);
        *(float32x4_t *)&__src[178] = vcvt_hight_f32_f16(v173);
        *(float32x4_t *)&__src[176] = vcvtq_f32_f16(*(float16x4_t *)v173.i8);
        *(float32x4_t *)&__src[182] = vcvt_hight_f32_f16(v174);
        *(float32x4_t *)&__src[180] = vcvtq_f32_f16(*(float16x4_t *)v174.i8);
        v175 = *(float16x8_t *)(v45 + 736);
        v176 = *(float16x8_t *)(v45 + 752);
        *(float32x4_t *)&__src[186] = vcvt_hight_f32_f16(v175);
        *(float32x4_t *)&__src[184] = vcvtq_f32_f16(*(float16x4_t *)v175.i8);
        *(float32x4_t *)&__src[190] = vcvt_hight_f32_f16(v176);
        *(float32x4_t *)&__src[188] = vcvtq_f32_f16(*(float16x4_t *)v176.i8);
        v177 = *(float16x8_t *)(v45 + 768);
        v178 = *(float16x8_t *)(v45 + 784);
        *(float32x4_t *)&__src[194] = vcvt_hight_f32_f16(v177);
        *(float32x4_t *)&__src[192] = vcvtq_f32_f16(*(float16x4_t *)v177.i8);
        *(float32x4_t *)&__src[198] = vcvt_hight_f32_f16(v178);
        *(float32x4_t *)&__src[196] = vcvtq_f32_f16(*(float16x4_t *)v178.i8);
        v179 = *(float16x8_t *)(v45 + 800);
        v180 = *(float16x8_t *)(v45 + 816);
        *(float32x4_t *)&__src[202] = vcvt_hight_f32_f16(v179);
        *(float32x4_t *)&__src[200] = vcvtq_f32_f16(*(float16x4_t *)v179.i8);
        *(float32x4_t *)&__src[206] = vcvt_hight_f32_f16(v180);
        *(float32x4_t *)&__src[204] = vcvtq_f32_f16(*(float16x4_t *)v180.i8);
        v181 = *(float16x8_t *)(v45 + 832);
        v182 = *(float16x8_t *)(v45 + 848);
        *(float32x4_t *)&__src[210] = vcvt_hight_f32_f16(v181);
        *(float32x4_t *)&__src[208] = vcvtq_f32_f16(*(float16x4_t *)v181.i8);
        *(float32x4_t *)&__src[214] = vcvt_hight_f32_f16(v182);
        *(float32x4_t *)&__src[212] = vcvtq_f32_f16(*(float16x4_t *)v182.i8);
        v183 = *(float16x8_t *)(v45 + 864);
        v184 = *(float16x8_t *)(v45 + 880);
        *(float32x4_t *)&__src[218] = vcvt_hight_f32_f16(v183);
        *(float32x4_t *)&__src[216] = vcvtq_f32_f16(*(float16x4_t *)v183.i8);
        *(float32x4_t *)&__src[222] = vcvt_hight_f32_f16(v184);
        *(float32x4_t *)&__src[220] = vcvtq_f32_f16(*(float16x4_t *)v184.i8);
        v185 = *(float16x8_t *)(v45 + 896);
        v186 = *(float16x8_t *)(v45 + 912);
        *(float32x4_t *)&__src[226] = vcvt_hight_f32_f16(v185);
        *(float32x4_t *)&__src[224] = vcvtq_f32_f16(*(float16x4_t *)v185.i8);
        *(float32x4_t *)&__src[230] = vcvt_hight_f32_f16(v186);
        *(float32x4_t *)&__src[228] = vcvtq_f32_f16(*(float16x4_t *)v186.i8);
        v187 = *(float16x8_t *)(v45 + 928);
        v188 = *(float16x8_t *)(v45 + 944);
        *(float32x4_t *)&__src[234] = vcvt_hight_f32_f16(v187);
        *(float32x4_t *)&__src[232] = vcvtq_f32_f16(*(float16x4_t *)v187.i8);
        *(float32x4_t *)&__src[238] = vcvt_hight_f32_f16(v188);
        *(float32x4_t *)&__src[236] = vcvtq_f32_f16(*(float16x4_t *)v188.i8);
        v189 = *(float16x8_t *)(v45 + 960);
        v190 = *(float16x8_t *)(v45 + 976);
        *(float32x4_t *)&__src[242] = vcvt_hight_f32_f16(v189);
        *(float32x4_t *)&__src[240] = vcvtq_f32_f16(*(float16x4_t *)v189.i8);
        *(float32x4_t *)&__src[246] = vcvt_hight_f32_f16(v190);
        *(float32x4_t *)&__src[244] = vcvtq_f32_f16(*(float16x4_t *)v190.i8);
        v191 = *(float16x8_t *)(v45 + 992);
        v192 = *(float16x8_t *)(v45 + 1008);
        *(float32x4_t *)&__src[250] = vcvt_hight_f32_f16(v191);
        *(float32x4_t *)&__src[248] = vcvtq_f32_f16(*(float16x4_t *)v191.i8);
        *(float32x4_t *)&__src[254] = vcvt_hight_f32_f16(v192);
        *(float32x4_t *)&__src[252] = vcvtq_f32_f16(*(float16x4_t *)v192.i8);
        bzero(&__C, 0x800uLL);
        v193 = *((float16x8_t *)v26 + 1);
        v194 = vcvt_hight_f32_f16(*(float16x8_t *)v26);
        __C = vcvtq_f32_f16(*(float16x4_t *)v26);
        v264 = v194;
        v265 = vcvtq_f32_f16(*(float16x4_t *)v193.i8);
        v266 = vcvt_hight_f32_f16(v193);
        v195 = *((float16x8_t *)v26 + 2);
        v196 = *((float16x8_t *)v26 + 3);
        v267 = vcvtq_f32_f16(*(float16x4_t *)v195.i8);
        v268 = vcvt_hight_f32_f16(v195);
        v269 = vcvtq_f32_f16(*(float16x4_t *)v196.i8);
        v270 = vcvt_hight_f32_f16(v196);
        v197 = *((float16x8_t *)v26 + 4);
        v198 = *((float16x8_t *)v26 + 5);
        v271 = vcvtq_f32_f16(*(float16x4_t *)v197.i8);
        v272 = vcvt_hight_f32_f16(v197);
        v273 = vcvtq_f32_f16(*(float16x4_t *)v198.i8);
        v274 = vcvt_hight_f32_f16(v198);
        v199 = *((float16x8_t *)v26 + 6);
        v200 = *((float16x8_t *)v26 + 7);
        v275 = vcvtq_f32_f16(*(float16x4_t *)v199.i8);
        v276 = vcvt_hight_f32_f16(v199);
        v277 = vcvtq_f32_f16(*(float16x4_t *)v200.i8);
        v278 = vcvt_hight_f32_f16(v200);
        v201 = *((float16x8_t *)v26 + 8);
        v202 = *((float16x8_t *)v26 + 9);
        v279 = vcvtq_f32_f16(*(float16x4_t *)v201.i8);
        v280 = vcvt_hight_f32_f16(v201);
        v281 = vcvtq_f32_f16(*(float16x4_t *)v202.i8);
        v282 = vcvt_hight_f32_f16(v202);
        v203 = *((float16x8_t *)v26 + 10);
        v204 = *((float16x8_t *)v26 + 11);
        v283 = vcvtq_f32_f16(*(float16x4_t *)v203.i8);
        v284 = vcvt_hight_f32_f16(v203);
        v285 = vcvtq_f32_f16(*(float16x4_t *)v204.i8);
        v286 = vcvt_hight_f32_f16(v204);
        v205 = *((float16x8_t *)v26 + 12);
        v206 = *((float16x8_t *)v26 + 13);
        v287 = vcvtq_f32_f16(*(float16x4_t *)v205.i8);
        v288 = vcvt_hight_f32_f16(v205);
        v289 = vcvtq_f32_f16(*(float16x4_t *)v206.i8);
        v290 = vcvt_hight_f32_f16(v206);
        v207 = *((float16x8_t *)v26 + 14);
        v208 = *((float16x8_t *)v26 + 15);
        v291 = vcvtq_f32_f16(*(float16x4_t *)v207.i8);
        v292 = vcvt_hight_f32_f16(v207);
        v293 = vcvtq_f32_f16(*(float16x4_t *)v208.i8);
        v294 = vcvt_hight_f32_f16(v208);
        v209 = *((float16x8_t *)v26 + 16);
        v210 = *((float16x8_t *)v26 + 17);
        v295 = vcvtq_f32_f16(*(float16x4_t *)v209.i8);
        v296 = vcvt_hight_f32_f16(v209);
        v297 = vcvtq_f32_f16(*(float16x4_t *)v210.i8);
        v298 = vcvt_hight_f32_f16(v210);
        v211 = *((float16x8_t *)v26 + 18);
        v212 = *((float16x8_t *)v26 + 19);
        v299 = vcvtq_f32_f16(*(float16x4_t *)v211.i8);
        v300 = vcvt_hight_f32_f16(v211);
        v301 = vcvtq_f32_f16(*(float16x4_t *)v212.i8);
        v302 = vcvt_hight_f32_f16(v212);
        v213 = *((float16x8_t *)v26 + 20);
        v214 = *((float16x8_t *)v26 + 21);
        v303 = vcvtq_f32_f16(*(float16x4_t *)v213.i8);
        v304 = vcvt_hight_f32_f16(v213);
        v305 = vcvtq_f32_f16(*(float16x4_t *)v214.i8);
        v306 = vcvt_hight_f32_f16(v214);
        v215 = *((float16x8_t *)v26 + 22);
        v216 = *((float16x8_t *)v26 + 23);
        v307 = vcvtq_f32_f16(*(float16x4_t *)v215.i8);
        v308 = vcvt_hight_f32_f16(v215);
        v309 = vcvtq_f32_f16(*(float16x4_t *)v216.i8);
        v310 = vcvt_hight_f32_f16(v216);
        v217 = *((float16x8_t *)v26 + 24);
        v218 = *((float16x8_t *)v26 + 25);
        v311 = vcvtq_f32_f16(*(float16x4_t *)v217.i8);
        v312 = vcvt_hight_f32_f16(v217);
        v313 = vcvtq_f32_f16(*(float16x4_t *)v218.i8);
        v314 = vcvt_hight_f32_f16(v218);
        v219 = *((float16x8_t *)v26 + 26);
        v220 = *((float16x8_t *)v26 + 27);
        v315 = vcvtq_f32_f16(*(float16x4_t *)v219.i8);
        v316 = vcvt_hight_f32_f16(v219);
        v317 = vcvtq_f32_f16(*(float16x4_t *)v220.i8);
        v318 = vcvt_hight_f32_f16(v220);
        v221 = *((float16x8_t *)v26 + 28);
        v222 = *((float16x8_t *)v26 + 29);
        v319 = vcvtq_f32_f16(*(float16x4_t *)v221.i8);
        v320 = vcvt_hight_f32_f16(v221);
        v321 = vcvtq_f32_f16(*(float16x4_t *)v222.i8);
        v322 = vcvt_hight_f32_f16(v222);
        v223 = *((float16x8_t *)v26 + 30);
        v224 = *((float16x8_t *)v26 + 31);
        v323 = vcvtq_f32_f16(*(float16x4_t *)v223.i8);
        v324 = vcvt_hight_f32_f16(v223);
        v326 = vcvt_hight_f32_f16(v224);
        v325 = vcvtq_f32_f16(*(float16x4_t *)v224.i8);
        v225 = *((float16x8_t *)v26 + 32);
        v226 = *((float16x8_t *)v26 + 33);
        v328 = vcvt_hight_f32_f16(v225);
        v327 = vcvtq_f32_f16(*(float16x4_t *)v225.i8);
        v330 = vcvt_hight_f32_f16(v226);
        v329 = vcvtq_f32_f16(*(float16x4_t *)v226.i8);
        v227 = *((float16x8_t *)v26 + 34);
        v228 = *((float16x8_t *)v26 + 35);
        v332 = vcvt_hight_f32_f16(v227);
        v331 = vcvtq_f32_f16(*(float16x4_t *)v227.i8);
        v334 = vcvt_hight_f32_f16(v228);
        v333 = vcvtq_f32_f16(*(float16x4_t *)v228.i8);
        v229 = *((float16x8_t *)v26 + 36);
        v230 = *((float16x8_t *)v26 + 37);
        v336 = vcvt_hight_f32_f16(v229);
        v335 = vcvtq_f32_f16(*(float16x4_t *)v229.i8);
        v338 = vcvt_hight_f32_f16(v230);
        v337 = vcvtq_f32_f16(*(float16x4_t *)v230.i8);
        v231 = *((float16x8_t *)v26 + 38);
        v232 = *((float16x8_t *)v26 + 39);
        v340 = vcvt_hight_f32_f16(v231);
        v339 = vcvtq_f32_f16(*(float16x4_t *)v231.i8);
        v342 = vcvt_hight_f32_f16(v232);
        v341 = vcvtq_f32_f16(*(float16x4_t *)v232.i8);
        v233 = *((float16x8_t *)v26 + 40);
        v234 = *((float16x8_t *)v26 + 41);
        v344 = vcvt_hight_f32_f16(v233);
        v343 = vcvtq_f32_f16(*(float16x4_t *)v233.i8);
        v346 = vcvt_hight_f32_f16(v234);
        v345 = vcvtq_f32_f16(*(float16x4_t *)v234.i8);
        v235 = *((float16x8_t *)v26 + 42);
        v236 = *((float16x8_t *)v26 + 43);
        v348 = vcvt_hight_f32_f16(v235);
        v347 = vcvtq_f32_f16(*(float16x4_t *)v235.i8);
        v350 = vcvt_hight_f32_f16(v236);
        v349 = vcvtq_f32_f16(*(float16x4_t *)v236.i8);
        v237 = *((float16x8_t *)v26 + 44);
        v238 = *((float16x8_t *)v26 + 45);
        v352 = vcvt_hight_f32_f16(v237);
        v351 = vcvtq_f32_f16(*(float16x4_t *)v237.i8);
        v354 = vcvt_hight_f32_f16(v238);
        v353 = vcvtq_f32_f16(*(float16x4_t *)v238.i8);
        v239 = *((float16x8_t *)v26 + 46);
        v240 = *((float16x8_t *)v26 + 47);
        v356 = vcvt_hight_f32_f16(v239);
        v355 = vcvtq_f32_f16(*(float16x4_t *)v239.i8);
        v358 = vcvt_hight_f32_f16(v240);
        v357 = vcvtq_f32_f16(*(float16x4_t *)v240.i8);
        v241 = *((float16x8_t *)v26 + 48);
        v242 = *((float16x8_t *)v26 + 49);
        v360 = vcvt_hight_f32_f16(v241);
        v359 = vcvtq_f32_f16(*(float16x4_t *)v241.i8);
        v362 = vcvt_hight_f32_f16(v242);
        v361 = vcvtq_f32_f16(*(float16x4_t *)v242.i8);
        v243 = *((float16x8_t *)v26 + 50);
        v244 = *((float16x8_t *)v26 + 51);
        v364 = vcvt_hight_f32_f16(v243);
        v363 = vcvtq_f32_f16(*(float16x4_t *)v243.i8);
        v366 = vcvt_hight_f32_f16(v244);
        v365 = vcvtq_f32_f16(*(float16x4_t *)v244.i8);
        v245 = *((float16x8_t *)v26 + 52);
        v246 = *((float16x8_t *)v26 + 53);
        v368 = vcvt_hight_f32_f16(v245);
        v367 = vcvtq_f32_f16(*(float16x4_t *)v245.i8);
        v370 = vcvt_hight_f32_f16(v246);
        v369 = vcvtq_f32_f16(*(float16x4_t *)v246.i8);
        v247 = *((float16x8_t *)v26 + 54);
        v248 = *((float16x8_t *)v26 + 55);
        v372 = vcvt_hight_f32_f16(v247);
        v371 = vcvtq_f32_f16(*(float16x4_t *)v247.i8);
        v374 = vcvt_hight_f32_f16(v248);
        v373 = vcvtq_f32_f16(*(float16x4_t *)v248.i8);
        v249 = *((float16x8_t *)v26 + 56);
        v250 = *((float16x8_t *)v26 + 57);
        v376 = vcvt_hight_f32_f16(v249);
        v375 = vcvtq_f32_f16(*(float16x4_t *)v249.i8);
        v378 = vcvt_hight_f32_f16(v250);
        v377 = vcvtq_f32_f16(*(float16x4_t *)v250.i8);
        v251 = *((float16x8_t *)v26 + 58);
        v252 = *((float16x8_t *)v26 + 59);
        v380 = vcvt_hight_f32_f16(v251);
        v379 = vcvtq_f32_f16(*(float16x4_t *)v251.i8);
        v382 = vcvt_hight_f32_f16(v252);
        v381 = vcvtq_f32_f16(*(float16x4_t *)v252.i8);
        v253 = *((float16x8_t *)v26 + 60);
        v254 = *((float16x8_t *)v26 + 61);
        v384 = vcvt_hight_f32_f16(v253);
        v383 = vcvtq_f32_f16(*(float16x4_t *)v253.i8);
        v386 = vcvt_hight_f32_f16(v254);
        v385 = vcvtq_f32_f16(*(float16x4_t *)v254.i8);
        v255 = *((float16x8_t *)v26 + 62);
        v256 = *((float16x8_t *)v26 + 63);
        v388 = vcvt_hight_f32_f16(v255);
        v387 = vcvtq_f32_f16(*(float16x4_t *)v255.i8);
        v390 = vcvt_hight_f32_f16(v256);
        v389 = vcvtq_f32_f16(*(float16x4_t *)v256.i8);
        v392[0] = 3.4028e38;
        v116 = 512;
        goto LABEL_90;
      }
      if (v22)
        return 0;
      memcpy(__src, v26, 0x800uLL);
      __C.i32[0] = 2139095039;
      v48 = (const float *)v45;
      v49 = 512;
    }
LABEL_80:
    vDSP_distancesq(v48, 1, (const float *)__src, 1, __C.f32, v49);
    v50 = __C.f32[0];
    return v50 <= v46;
  }
  return v17;
}

uint64_t _db_rangeCompare(int a1, uint64_t a2, unint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  double v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  int v39;
  unint64_t v40;
  int v41;
  double v42;
  int v43;
  double v44;
  int v45;
  _BOOL4 v46;
  BOOL v47;
  unsigned int v48;
  double v50;
  int v51;
  int v52;
  unint64_t v53;
  unint64_t v54;
  unsigned int v55;
  unsigned int v56;

  v7 = a1 - 1;
  v12 = 4;
  v13 = 1;
  switch(a1)
  {
    case 1:
    case 2:
      goto LABEL_3;
    case 3:
    case 4:
      v13 = 2;
LABEL_3:
      if ((*(_BYTE *)(a2 + 160) & 0x20) == 0)
        goto LABEL_4;
      goto LABEL_6;
    case 5:
    case 6:
      v13 = 4;
      if ((*(_BYTE *)(a2 + 160) & 0x20) != 0)
      {
LABEL_6:
        v53 = 0;
        v54 = 0;
        v56 = *(_DWORD *)(a2 + 208);
        v55 = *(_DWORD *)(a2 + 216);
      }
      else
      {
LABEL_4:
        v14 = a6;
        v15 = strtoul(**(const char ***)(a2 + 168), 0, 0);
        v16 = strtoul(*(const char **)(*(_QWORD *)(a2 + 168) + 8), 0, 0);
        a6 = v14;
        v53 = 0;
        v54 = 0;
        v55 = v16;
        v56 = v15;
        *(_DWORD *)(a2 + 208) = v15;
        *(_DWORD *)(a2 + 216) = v16;
        *(_DWORD *)(a2 + 160) |= 0x60u;
      }
      v17 = 0.0;
      goto LABEL_31;
    case 7:
    case 8:
      if ((*(_BYTE *)(a2 + 160) & 0x80) != 0)
      {
        v55 = 0;
        v56 = 0;
        v53 = *(_QWORD *)(a2 + 232);
        v54 = *(_QWORD *)(a2 + 224);
      }
      else
      {
        v18 = a6;
        v19 = strtoull(**(const char ***)(a2 + 168), 0, 0);
        v20 = strtoull(*(const char **)(*(_QWORD *)(a2 + 168) + 8), 0, 0);
        a6 = v18;
        v55 = 0;
        v56 = 0;
        v53 = v20;
        v54 = v19;
        *(_QWORD *)(a2 + 224) = v19;
        *(_QWORD *)(a2 + 232) = v20;
        *(_DWORD *)(a2 + 160) |= 0x180u;
      }
      v17 = 0.0;
      v13 = 8;
LABEL_31:
      v23 = 0.0;
      if (a5)
        goto LABEL_32;
      goto LABEL_15;
    case 9:
      goto LABEL_11;
    case 10:
    case 12:
      v12 = 8;
LABEL_11:
      if ((*(_BYTE *)(a2 + 161) & 4) != 0)
      {
        v55 = 0;
        v56 = 0;
        v53 = 0;
        v54 = 0;
        v17 = *(double *)(a2 + 248);
        v23 = *(double *)(a2 + 264);
      }
      else
      {
        v21 = a6;
        v17 = strtod(**(const char ***)(a2 + 168), 0);
        v22 = strtod(*(const char **)(*(_QWORD *)(a2 + 168) + 8), 0);
        a6 = v21;
        v23 = v22;
        v55 = 0;
        v56 = 0;
        v53 = 0;
        v54 = 0;
        *(double *)(a2 + 248) = v17;
        *(double *)(a2 + 264) = v22;
        *(_DWORD *)(a2 + 160) |= 0x1400u;
      }
      v13 = v12;
      if (a5)
      {
LABEL_32:
        v30 = *(_QWORD *)(a2 + 32);
        v24 = (v30 >> 25) & 1;
        v25 = (v30 >> 34) & 1;
        if (!a3)
        {
LABEL_16:
          v51 = v25;
          v52 = v24;
          v26 = a7;
          v27 = 0;
LABEL_17:
          if (a3)
            v28 = v52;
          else
            v28 = 0;
          if ((v28 & 1) != 0 || ((v51 ^ 1) & 1) != 0)
          {
            if (v28)
              return v27;
            else
              return a6 ^ 1;
          }
          else
          {
            return v26 && *(_DWORD *)(v26 + 8) != 0;
          }
        }
      }
      else
      {
LABEL_15:
        LODWORD(v24) = 0;
        LODWORD(v25) = 0;
        if (!a3)
          goto LABEL_16;
      }
      if ((v24 | v25) == 1)
      {
        v51 = v25;
        v52 = v24;
        v26 = a7;
        v27 = 0;
        v31 = 0;
        v32 = 0;
        while (2)
        {
          switch(v7)
          {
            case 0:
            case 1:
              v37 = *((unsigned __int8 *)a4 + v32);
              v39 = v56 <= v37 && v55 >= v37;
              if (v39 != (_DWORD)a6)
                goto LABEL_35;
              goto LABEL_36;
            case 2:
            case 3:
            case 4:
            case 5:
              v35 = *(unsigned int *)((char *)a4 + v32);
              v36 = v35 < v56 || v35 > v55;
              goto LABEL_52;
            case 6:
            case 7:
              v40 = *(_QWORD *)((char *)a4 + v32);
              v36 = v40 < v54 || v40 > v53;
LABEL_52:
              v41 = !v36;
              if (v41 == (_DWORD)a6)
                goto LABEL_36;
              goto LABEL_35;
            case 8:
              v44 = *(float *)((char *)a4 + v32);
              v45 = v17 <= v44;
              if (v23 < v44)
                v45 = 0;
              if (v45 == (_DWORD)a6)
                goto LABEL_36;
              goto LABEL_35;
            case 9:
            case 11:
              v42 = *(double *)((char *)a4 + v32);
              v43 = v42 >= v17;
              if (v42 > v23)
                v43 = 0;
              if (v43 == (_DWORD)a6)
                goto LABEL_36;
              goto LABEL_35;
            default:
              if ((a6 & 1) == 0)
                goto LABEL_36;
LABEL_35:
              v33 = a4;
              v34 = a6;
              v27 = db_eval_obj_qp_array_set_match_at_index(a5, a2, v31);
              db_eval_obj_qp_array_set_match_at_index(v26, a2, v31);
              a6 = v34;
              a4 = v33;
LABEL_36:
              v32 += v13;
              ++v31;
              if (v32 < a3)
                continue;
              goto LABEL_17;
          }
        }
      }
      v46 = 0;
      switch(v7)
      {
        case 0:
        case 1:
          v48 = *(unsigned __int8 *)a4;
          v46 = v56 <= v48 && v55 >= v48;
          break;
        case 2:
        case 3:
        case 4:
        case 5:
          v47 = *a4 < v56 || *a4 > v55;
          goto LABEL_80;
        case 6:
        case 7:
          v47 = *(_QWORD *)a4 < v54 || *(_QWORD *)a4 > v53;
LABEL_80:
          v46 = !v47;
          break;
        case 8:
          v50 = *(float *)a4;
          v46 = v17 <= v50;
          if (v23 < v50)
            v46 = 0;
          break;
        case 9:
        case 11:
          v46 = *(double *)a4 >= v17;
          if (*(double *)a4 > v23)
            v46 = 0;
          break;
        default:
          return v46 ^ a6;
      }
      return v46 ^ a6;
    default:
      return a6 ^ 1;
  }
}

uint64_t db_eval_obj_with_options(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _DWORD *v24;
  unsigned int v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, __int128 *);
  BOOL v46;
  unsigned int v47;
  int v48;
  int v49;
  int *v50;
  int v51;
  BOOL v52;
  int v53;
  int v54;
  _QWORD *v55;
  int v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  BOOL v62;
  _BOOL4 v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  _BOOL4 v68;
  int v69;
  int v70;
  unsigned int v71;
  void **v72;
  uint64_t v73;
  void **v74;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  _OWORD v90[6];
  uint8_t buf[4];
  const char *v92;
  __int16 v93;
  uint64_t *v94;
  uint64_t *v95;
  _QWORD v96[6145];

  v1 = MEMORY[0x1E0C80A78](a1);
  v88 = v2;
  v85 = v3;
  v86 = v4;
  v6 = v5;
  v8 = v7;
  v87 = v1;
  v96[6143] = *MEMORY[0x1E0C80C00];
  memset(v90, 0, sizeof(v90));
  v89 = 0u;
  DWORD1(v89) = 4;
  if (v9)
    LODWORD(v89) = 4;
  bzero(v96, 0xBFF8uLL);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v95 = v6;
  v13 = "<>";
  if (!v87)
    v13 = "<<anon store>>";
  v84 = v13;
  while (v10 != 1)
  {
    v16 = &v96[3 * v12 - 1];
    v17 = (int *)(v16 + 2);
    if (!v10)
    {
      v18 = v6[7];
      if (v18)
      {
        if (v18 == v8[2])
        {
          v19 = (*((unsigned __int16 *)v6 + 24) >> 10) & 1;
          LODWORD(v96[3 * v12]) = v19;
          *v17 = 1;
          if (!v12)
            goto LABEL_125;
          goto LABEL_31;
        }
      }
    }
    switch(v6[5] & 0xFFF7)
    {
      case 1:
        if ((v10 - 2) >= 2)
        {
          if (v10)
          {
            if (*((_DWORD *)v16 + 10) != 1)
              goto LABEL_138;
            v48 = *((_DWORD *)v16 + 8);
            v49 = v88 ^ 1;
            if ((v48 & 0x80000001) == 0)
              v49 = 1;
            v50 = (int *)&v96[3 * v12];
            if (v49 == 1)
            {
              v51 = *v50;
              if (*v50)
                v52 = (*v50 & 0x80000001) == 0;
              else
                v52 = 0;
              if (v52)
              {
                if (!v48 || (v48 & 0x80000001) != 0)
                {
                  if (v48)
                    v53 = v48;
                  else
                    v53 = *v50;
                }
                else
                {
                  v53 = v51 ^ v48;
                  v60 = v51 & v48;
                  if ((v51 & v48) >= 2)
                  {
                    v61 = 0;
                    do
                    {
                      if ((v60 & 2) != 0)
                      {
                        v63 = db_eval_obj_qp_array_union_for_value((uint64_t)&v89, v61);
                        v64 = 2 << v61;
                        if (v61 >= 0x1E)
                          v64 = 0;
                        v65 = v64 | v53;
                        if (v63)
                          v53 = v65;
                      }
                      ++v61;
                      v62 = v60 > 3;
                      v60 >>= 1;
                    }
                    while (v62);
                  }
                }
              }
              else if (v51)
              {
                v53 = *v50;
              }
              else
              {
                v53 = v48;
              }
            }
            else
            {
              v53 = v48;
            }
LABEL_124:
            *v50 = v53;
            v14 = 1;
          }
          else
          {
            v35 = *v6;
            v36 = v6[1];
            if (v12 >= v11)
            {
              v11 = v12 + 1;
              if (v12 >= 2047)
              {
LABEL_138:
                v76 = __si_assert_copy_extra_268();
                __message_assert_272((uint64_t)v76, v77, v78, v79, v80, v81, v82, v83, (char)"core-query.c");
                free(v76);
                if (__valid_fs(-1))
                {
                  MEMORY[0xBAD] = -559038737;
                  abort();
                }
                MEMORY[0xC00] = -559038737;
                abort();
              }
            }
            v37 = v96 + 3 * v12 + 2;
            *((_DWORD *)v37 + 2) = 0;
            *((_DWORD *)v37 + 4) = 0;
            if ((*(_DWORD *)(v35 + 44) <= *(_DWORD *)(v36 + 44) || (v38 = *(_QWORD *)(v35 + 56)) != 0 && v38 == v8[2])
              && ((v39 = *(_QWORD *)(v36 + 56)) == 0 || v39 != v8[2]))
            {
              v14 = 2;
            }
            else
            {
              v14 = 3;
              v35 = v36;
            }
            *v37 = v35;
            ++v12;
          }
        }
        else
        {
          if (*((_DWORD *)v16 + 10) != 1)
            goto LABEL_138;
          v20 = *((_DWORD *)v16 + 8);
          LODWORD(v96[3 * v12]) = v20;
          if (v88 && (v20 & 0x80000001) != 0)
          {
LABEL_8:
            v14 = 1;
          }
          else
          {
            if (v12 >= v11)
            {
              v11 = v12 + 1;
              if (v12 >= 2047)
                goto LABEL_138;
            }
            if (v10 == 2)
              v21 = v6 + 1;
            else
              v21 = v6;
            v22 = v96 + 3 * v12 + 2;
            *v22 = *v21;
            *((_DWORD *)v22 + 2) = 0;
            *((_DWORD *)v22 + 4) = 0;
            v14 = 4;
            ++v12;
          }
        }
LABEL_9:
        *v17 = v14;
        break;
      case 2:
        if ((v10 - 2) < 2)
        {
          if (*((_DWORD *)v16 + 10) != 1)
            goto LABEL_138;
          v26 = *((_DWORD *)v16 + 8);
          LODWORD(v96[3 * v12]) = v26;
          if (!v88 || v26)
          {
            if (v12 >= v11)
              v11 = v12 + 1;
            ++v12;
            if (v10 == 2)
              v27 = v6 + 1;
            else
              v27 = v6;
            v28 = &v96[3 * v12 - 1];
            *v28 = *v27;
            *((_DWORD *)v28 + 2) = 0;
            *((_DWORD *)v28 + 4) = 0;
            v14 = 4;
            goto LABEL_9;
          }
          goto LABEL_8;
        }
        if (!v10)
        {
          v40 = *v6;
          v41 = v6[1];
          if (v12 >= v11)
            v11 = v12 + 1;
          v42 = v96 + 3 * v12 + 2;
          *((_DWORD *)v42 + 2) = 0;
          *((_DWORD *)v42 + 4) = 0;
          if ((*(_DWORD *)(v40 + 44) <= *(_DWORD *)(v41 + 44) || (v43 = *(_QWORD *)(v40 + 56)) != 0 && v43 == v8[2])
            && ((v44 = *(_QWORD *)(v41 + 56)) == 0 || v44 != v8[2]))
          {
            v14 = 2;
          }
          else
          {
            v14 = 3;
            v40 = v41;
          }
          *v42 = v40;
          ++v12;
          goto LABEL_9;
        }
        if (*((_DWORD *)v16 + 10) != 1)
          goto LABEL_138;
        v54 = *((_DWORD *)v16 + 8);
        v55 = &v96[3 * v12 - 1];
        v57 = *((_DWORD *)v55 + 2);
        v50 = (int *)(v55 + 1);
        v56 = v57;
        if (v54)
          v58 = v56 == 0;
        else
          v58 = 1;
        if (v58)
        {
          v53 = 0;
        }
        else
        {
          v59 = v56 & 0x80000001;
          if ((v54 & 0x80000001) != 0)
          {
            if (v59)
              v53 = 1;
            else
              v53 = v56;
          }
          else
          {
            v53 = v54;
            if (!v59)
            {
              v53 = v56 ^ v54;
              v66 = v56 & v54;
              if ((v56 & v54) >= 2)
              {
                v67 = 0;
                do
                {
                  if ((v66 & 2) != 0)
                  {
                    v68 = db_eval_obj_qp_array_intersect_for_value((uint64_t)&v89, v67);
                    v69 = 2 << v67;
                    if (v67 >= 0x1E)
                      v69 = 0;
                    v70 = v69 | v53;
                    if (v68)
                      v53 = v70;
                  }
                  ++v67;
                  v62 = v66 > 3;
                  v66 >>= 1;
                }
                while (v62);
              }
            }
          }
        }
        goto LABEL_124;
      case 4:
        v32 = v6[2];
        v33 = (uint64_t)(v6 + 4);
        if ((*(_QWORD *)(v32 + 32) & 0x406000000) != 0)
        {
          v34 = 0;
        }
        else
        {
          v45 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, __int128 *))(v32 + 16);
          v34 = v88;
          if (v45)
            v46 = v88 == 0;
          else
            v46 = 1;
          if (!v46)
          {
            v47 = v45(v87, v8, v32, v33, v86, &v89);
            if (v47 < 2)
              goto LABEL_72;
            v34 = 1;
          }
        }
        v47 = compare_file_by_dbo(v87, v8, v32, v33, v85, v86, v34, (uint64_t)&v89, 0);
LABEL_72:
        LODWORD(v96[3 * v12]) = v47;
        goto LABEL_8;
      case 0x10:
        goto LABEL_7;
      case 0x20:
        v14 = 1;
        LODWORD(v96[3 * v12]) = 1;
        goto LABEL_9;
      default:
        v29 = *__error();
        v30 = _SILogForLogForCategory(1);
        v31 = 2 * (dword_1EF19FC90 < 4);
        if (os_log_type_enabled(v30, v31))
        {
          *(_DWORD *)buf = 136315394;
          v92 = v84;
          v93 = 2048;
          v94 = v6;
          _os_log_impl(&dword_1B8270000, v30, v31, "%s : node @ 0x%p looks trashed", buf, 0x16u);
        }
        *__error() = v29;
LABEL_7:
        LODWORD(v96[3 * v12]) = 0;
        goto LABEL_8;
    }
LABEL_10:
    v15 = &v96[3 * v12 - 1];
    v6 = (uint64_t *)*v15;
    v10 = *((_DWORD *)v15 + 4);
  }
  v23 = &v96[3 * v12 - 1];
  v25 = *((_DWORD *)v23 + 2);
  v24 = v23 + 1;
  v19 = v25;
  if ((v6[5] & 8) != 0)
  {
    v19 = (_DWORD)v19 == 0;
    *v24 = v19;
  }
  v6[7] = v8[2];
  *((_WORD *)v6 + 24) = v6[6] & 0xFBFF | ((v19 & 1) << 10);
  if (v12)
  {
LABEL_31:
    --v12;
    goto LABEL_10;
  }
LABEL_125:
  v71 = DWORD1(v89);
  if (DWORD1(v89) >= 5)
    v72 = *(void ***)&v90[0];
  else
    v72 = (void **)v90;
  if ((v89 & 1) != 0)
  {
    v73 = DWORD2(v89);
    if (DWORD2(v89))
    {
      v74 = v72 + 2;
      do
      {
        if (*((_DWORD *)v74 - 2) >= 0x41u)
        {
          free(*v74);
          *((_DWORD *)v74 - 1) = 0;
          *v74 = 0;
        }
        v74 += 3;
        --v73;
      }
      while (v73);
      v71 = DWORD1(v89);
    }
  }
  if (v71 >= 5)
    free(v72);
  return v19;
}

uint64_t compare_file_by_dbo(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  unsigned int v15;
  unsigned int v16;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  int *v30;
  uint64_t v31;
  int v32;
  _BYTE *v33;
  char *v34;
  unint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  void *v40;
  _DWORD *v41;
  uint64_t matched;
  _BYTE *v43;
  int v44;
  NSObject *v45;
  const char *v46;
  int v47;
  unint64_t v48;
  int v49;
  unsigned __int16 *v50;
  _BOOL4 v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  unsigned int v56;
  BOOL v57;
  uint64_t v58;
  unsigned __int16 *v60;
  unsigned int v61;
  char *v62;
  _BOOL4 v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  unsigned __int16 *v69;
  unint64_t v70;
  unsigned int *v71;
  unsigned __int16 *v72;
  _BYTE buf[22];
  __int16 v74;
  int v75;
  _BYTE v76[21];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v69 = 0;
  v70 = 0;
  *(_QWORD *)v76 = 0;
  *(_QWORD *)&v76[8] = 0;
  *(_QWORD *)&v76[13] = 0;
  if (a8)
  {
    if (!a1)
      goto LABEL_10;
  }
  else if (!a1)
  {
    goto LABEL_10;
  }
  v15 = *(_DWORD *)(a3 + 24);
  v16 = v15 - 11;
  if (v15 >= 0xB && v15 != 15)
  {
    v24 = 0;
    v25 = 0;
    v22 = 1;
    switch(v16)
    {
      case 0u:
        v22 = 0;
        goto LABEL_24;
      case 1u:
LABEL_24:
        if (*(_DWORD *)(a3 + 40) != 2)
          return v22;
        v68 = 0;
        v25 = v22;
        goto LABEL_53;
      case 2u:
        goto LABEL_51;
      case 3u:
        v24 = 1;
        v25 = 1;
LABEL_51:
        if (*(int *)(a3 + 40) <= 0)
          return v25;
        v68 = 1;
        v22 = v24;
LABEL_53:
        v34 = *(char **)a3;
        v35 = (unint64_t *)*a2;
        if (!*a2)
        {
          ((void (*)(uint64_t, uint64_t *))a2[1])(a1, a2);
          v35 = (unint64_t *)*a2;
          if (!*a2)
            return 0;
        }
        v71 = 0;
        v72 = 0;
        if (*v34 == 42 && !v34[1])
        {
          if (*((_DWORD *)v35 + 3) < 0x31u)
            return 0;
          v50 = (unsigned __int16 *)(v35 + 6);
          if (v68)
          {
            if (a7)
            {
              while (1)
              {
                if ((v50[1] & 0x100) == 0)
                {
                  if (db_fieldMatchCompare(a1, (uint64_t)v50, a3, a5, a8, v25))
                    return 1;
                  v35 = (unint64_t *)*a2;
                }
                v22 = 0;
                v50 = (unsigned __int16 *)((char *)v50 + *((unsigned int *)v50 + 2) + 13);
                if (v50 >= (unsigned __int16 *)((char *)v35 + *((unsigned int *)v35 + 3)))
                  return v22;
              }
            }
            v22 = 0;
            do
            {
              if ((v50[1] & 0x100) == 0)
              {
                if (db_fieldMatchCompare(a1, (uint64_t)v50, a3, a5, a8, v25))
                {
                  v67 = *((unsigned __int8 *)v50 + 12);
                  if (v67 != 7)
                    *((_BYTE *)v50 + 12) = v67 + 1;
                  v22 = 1;
                }
                else
                {
                  v22 = 0;
                }
              }
              v50 = (unsigned __int16 *)((char *)v50 + *((unsigned int *)v50 + 2) + 13);
            }
            while ((unint64_t)v50 < *a2 + (unint64_t)*(unsigned int *)(*a2 + 12));
          }
          else
          {
            if (a7)
            {
              while (1)
              {
                if ((v50[1] & 0x100) == 0)
                {
                  if (_db_rangeCompare(*v50, a3, *((unsigned int *)v50 + 2), (unsigned int *)((char *)v50 + 13), a8, v25, a9))return 1;
                  v35 = (unint64_t *)*a2;
                }
                v22 = 0;
                v50 = (unsigned __int16 *)((char *)v50 + *((unsigned int *)v50 + 2) + 13);
                if (v50 >= (unsigned __int16 *)((char *)v35 + *((unsigned int *)v35 + 3)))
                  return v22;
              }
            }
            v22 = 0;
            do
            {
              if ((v50[1] & 0x100) == 0)
              {
                if (_db_rangeCompare(*v50, a3, *((unsigned int *)v50 + 2), (unsigned int *)((char *)v50 + 13), a8, v25, a9))
                {
                  v66 = *((unsigned __int8 *)v50 + 12);
                  if (v66 != 7)
                    *((_BYTE *)v50 + 12) = v66 + 1;
                  v22 = 1;
                }
                else
                {
                  v22 = 0;
                }
              }
              v50 = (unsigned __int16 *)((char *)v50 + *((unsigned int *)v50 + 2) + 13);
            }
            while ((unint64_t)v50 < *a2 + (unint64_t)*(unsigned int *)(*a2 + 12));
          }
        }
        else
        {
          v36 = v25;
          if (*(_QWORD *)a3)
          {
            v38 = (unsigned int *)(a3 + 144);
            v37 = *(_DWORD *)(a3 + 144);
            if (!v37 || v37 < db_get_fields_generation((int *)a1))
            {
              os_unfair_lock_lock((os_unfair_lock_t)&range_or_field_compare_lock);
              if (!*v38 || (v39 = *v38, v39 < db_get_fields_generation((int *)a1)))
              {
                (*(void (**)(void))(*(_QWORD *)(a1 + 808) + 16))();
                v40 = db_copy_field_ids_with_buffer_locked(a1, *(char **)a3, 0, 0, (_DWORD *)(a3 + 144));
                __dmb(0xBu);
                *(_QWORD *)(a3 + 136) = v40;
              }
              os_unfair_lock_unlock((os_unfair_lock_t)&range_or_field_compare_lock);
            }
          }
          memset(buf, 0, 20);
          if (db_get_field_by_id((int *)a1, *a2, *(int **)(a3 + 136), (unint64_t *)&v72, (unint64_t *)&v71))
          {
            if (!*(_QWORD *)a3 || strcmp(*(const char **)a3, "kMDItemAttributeChangeDate"))
              return v22;
            *(_DWORD *)buf = 12;
            v41 = *(_DWORD **)(a3 + 136);
            if (v41)
              LODWORD(v41) = *v41;
            *(_DWORD *)&buf[4] = (_DWORD)v41;
            *(_DWORD *)&buf[8] = 8;
            *(double *)&buf[12] = -(*MEMORY[0x1E0C9ADF8] + (double)*(unint64_t *)(*a2 + 16) * -0.000001);
            v71 = (unsigned int *)&buf[12];
            v72 = (unsigned __int16 *)buf;
          }
          if ((v68 & 1) != 0)
            matched = db_fieldMatchCompare(a1, (uint64_t)v72, a3, a5, a8, v36);
          else
            matched = _db_rangeCompare(*v72, a3, *((unsigned int *)v72 + 2), v71, a8, v36, a9);
          v22 = matched;
          if (!a7 && (_DWORD)matched)
          {
            v48 = (unint64_t)v72;
            goto LABEL_91;
          }
        }
        break;
      default:
        return 0;
    }
    return v22;
  }
LABEL_10:
  if ((*(_BYTE *)(a3 + 32) & 0x80) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 8))(a1, a2, a3, a4, a6, a8);
  v18 = *(char **)(a3 + 72);
  v19 = *(char **)a3;
  if (v18)
  {
    if (!v19)
      goto LABEL_28;
    if (*v19 == 42 && !v19[1])
    {
      v20 = *a2;
      if (*a2)
        goto LABEL_16;
      ((void (*)(uint64_t, uint64_t *))a2[1])(a1, a2);
      v20 = *a2;
      if (*a2)
      {
        v18 = *(char **)(a3 + 72);
        if (!v18)
        {
LABEL_109:
          v53 = *(_DWORD *)(a3 + 24);
          if (v53 <= 0xA)
          {
            v54 = *(_DWORD *)(a3 + 160);
            if ((v54 & 0x800) == 0)
            {
              *(_QWORD *)(a3 + 256) = v18;
              while (1)
              {
                v55 = *v18;
                if (!*v18)
                  break;
                ++v18;
                v56 = v55 - 42;
                v57 = v56 > 0x32;
                v58 = (1 << v56) & 0x6000000200001;
                if (!v57 && v58 != 0)
                {
                  *(_QWORD *)(a3 + 32) |= 1uLL;
                  break;
                }
              }
              *(_DWORD *)(a3 + 160) = v54 | 0x800;
              v20 = *a2;
            }
            v22 = v53 == 5;
            if (*(_DWORD *)(v20 + 12) >= 0x31u)
            {
              v60 = (unsigned __int16 *)(v20 + 48);
              while (1)
              {
                if ((v60[1] & 0x100) == 0)
                {
                  v61 = *v60;
                  if (v61 == 11
                    || (v62 = *(char **)(a3 + 256)) == 0
                    || (*v62 - 48) > 9
                    || !convert_value_to_type(v61, a3))
                  {
                    v63 = do_compare(a1);
                    v64 = *(_DWORD *)(a3 + 24);
                    if (v63)
                    {
                      if (v64 != 5)
                      {
                        if (a7)
                          return 1;
                        v65 = *((unsigned __int8 *)v60 + 12);
                        if (v65 != 7)
                          *((_BYTE *)v60 + 12) = v65 + 1;
                        v22 = 1;
                      }
                    }
                    else
                    {
                      if (v64 == 5)
                        v22 = 0;
                      else
                        v22 = v22;
                      if (v64 == 5 && a7)
                        return 0;
                    }
                  }
                }
                v60 = (unsigned __int16 *)((char *)v60 + *((unsigned int *)v60 + 2) + 13);
                if ((unint64_t)v60 >= *a2 + (unint64_t)*(unsigned int *)(*a2 + 12))
                  return v22;
              }
            }
            return v22;
          }
          return 0;
        }
LABEL_16:
        if (*v18 == 42 && !v18[1] && (*(_BYTE *)(v20 + 40) & 5) == 0)
        {
          if (!a7)
          {
            v21 = v20 + 48;
            v22 = 1;
            do
            {
              v52 = *(unsigned __int8 *)(v21 + 12);
              if (v52 != 7)
              {
                *(_BYTE *)(v21 + 12) = v52 + 1;
                v20 = *a2;
              }
              v21 += *(unsigned int *)(v21 + 8) + 13;
            }
            while (v21 < v20 + (unint64_t)*(unsigned int *)(v20 + 12));
            return v22;
          }
          return 1;
        }
        goto LABEL_109;
      }
      return 0;
    }
  }
  else if (!v19)
  {
    goto LABEL_28;
  }
  if (!strncmp(*(const char **)a3, "SYS:mod", 7uLL))
  {
    v31 = *a2;
    if (!*a2)
    {
      ((void (*)(uint64_t, uint64_t *))a2[1])(a1, a2);
      v31 = *a2;
      if (!*a2)
        return 0;
    }
    v69 = (unsigned __int16 *)v76;
    *(_DWORD *)v76 = 8;
    *(_QWORD *)&v76[4] = 0x80000FFFFLL;
    *(_QWORD *)&v76[13] = *(_QWORD *)(v31 + 16);
    goto LABEL_45;
  }
LABEL_28:
  if (!a1)
    return 0;
  if (!*a2)
  {
    ((void (*)(uint64_t, uint64_t *))a2[1])(a1, a2);
    if (!*a2)
      return 0;
    v19 = *(char **)a3;
  }
  if (v19)
  {
    v26 = (unsigned int *)(a3 + 144);
    v27 = *(_DWORD *)(a3 + 144);
    if (!v27 || v27 < db_get_fields_generation((int *)a1))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&compare_file_by_dbo_lock);
      if (!*v26 || (v28 = *v26, v28 < db_get_fields_generation((int *)a1)))
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 808) + 16))();
        v29 = db_copy_field_ids_with_buffer_locked(a1, *(char **)a3, 0, 0, (_DWORD *)(a3 + 144));
        __dmb(0xBu);
        *(_QWORD *)(a3 + 136) = v29;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&compare_file_by_dbo_lock);
    }
  }
  v30 = *(int **)(a3 + 136);
  if (v30 && !db_get_field_by_id((int *)a1, *a2, v30, (unint64_t *)&v69, &v70))
  {
LABEL_45:
    v32 = *(_DWORD *)(a3 + 24);
    if ((v32 - 1) > 1)
    {
      if ((v32 - 5) <= 1)
      {
        v43 = *(_BYTE **)(a3 + 72);
        if (v43)
        {
          if (*v43 == 42 && !v43[1])
            return 0;
        }
      }
    }
    else
    {
      v33 = *(_BYTE **)(a3 + 72);
      if (v33 && *v33 == 42 && !v33[1])
        return 1;
    }
    if (v69)
    {
      if (convert_value_to_type(*v69, a3))
      {
        v22 = 0;
        if (v69 && dword_1EF19FC90 >= 5)
        {
          v44 = *__error();
          v45 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            v46 = "<>";
            v47 = *v69;
            if (!a1)
              v46 = "<<anon store>>";
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v46;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = a3;
            v74 = 1024;
            v75 = v47;
            _os_log_impl(&dword_1B8270000, v45, OS_LOG_TYPE_DEFAULT, "%s : failed to convert qp @ 0x%p to type 0x%x", buf, 0x1Cu);
          }
          v22 = 0;
          *__error() = v44;
        }
      }
      else
      {
        v51 = do_compare(a1);
        if (a7)
        {
          return v51;
        }
        else
        {
          if ((*(_BYTE *)(a3 + 35) & 6) != 0)
            v22 = v51;
          else
            v22 = v51;
          if ((_DWORD)v22 && ((_DWORD)v22 == 1 || (v22 & 0x80000001) == 0))
          {
            v48 = (unint64_t)v69;
LABEL_91:
            v49 = *(unsigned __int8 *)(v48 + 12);
            if (v49 != 7)
              *(_BYTE *)(v48 + 12) = v49 + 1;
          }
        }
      }
      return v22;
    }
    return 0;
  }
  return (*(_DWORD *)(a3 + 24) - 5) < 2;
}

BOOL db_fieldMatchCompare(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  unint64_t *v9;
  _QWORD *v10;
  _BOOL4 v12;
  unint64_t *v13;
  size_t v14;
  void *v15;
  uint64_t v17;
  int v19;
  uint8_t buf[32];

  if (*(_WORD *)a2 == 11)
  {
    if ((*(_BYTE *)(a2 + 2) & 0x10) != 0)
    {
      v9 = (unint64_t *)(a3 + 112);
      if (!*(_QWORD *)(a3 + 112))
      {
        v10 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x180uLL, 0x6085D6BuLL);
        if (!v10 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
        *(_DWORD *)v10 = 0;
        v10[1] = 0;
        v10[2] = 0;
        *((_DWORD *)v10 + 6) = 0;
        v10[4] = 0;
        v10[5] = 0;
        *((_DWORD *)v10 + 12) = 0;
        v10[7] = 0;
        v10[8] = 0;
        *((_DWORD *)v10 + 18) = 0;
        v10[10] = 0;
        v10[11] = 0;
        *((_DWORD *)v10 + 24) = 0;
        v10[13] = 0;
        v10[14] = 0;
        *((_DWORD *)v10 + 30) = 0;
        *((_DWORD *)v10 + 36) = 0;
        v10[16] = 0;
        v10[17] = 0;
        v10[19] = 0;
        v10[20] = 0;
        *((_DWORD *)v10 + 42) = 0;
        v10[22] = 0;
        v10[23] = 0;
        *((_DWORD *)v10 + 48) = 0;
        v10[25] = 0;
        v10[26] = 0;
        *((_DWORD *)v10 + 54) = 0;
        v10[28] = 0;
        v10[29] = 0;
        *((_DWORD *)v10 + 60) = 0;
        *((_DWORD *)v10 + 66) = 0;
        v10[31] = 0;
        v10[32] = 0;
        *((_DWORD *)v10 + 72) = 0;
        v10[34] = 0;
        v10[35] = 0;
        v10[37] = 0;
        v10[38] = 0;
        *((_DWORD *)v10 + 78) = 0;
        v10[40] = 0;
        v10[41] = 0;
        *((_DWORD *)v10 + 84) = 0;
        v10[43] = 0;
        v10[44] = 0;
        *((_DWORD *)v10 + 90) = 0;
        v10[46] = 0;
        v10[47] = 0;
        while (!__ldxr(v9))
        {
          if (!__stxr((unint64_t)v10, v9))
            goto LABEL_13;
        }
        __clrex();
        qp_string_id_cache_free(v10);
      }
    }
LABEL_13:
    v13 = (unint64_t *)(a3 + 104);
    if (!*(_QWORD *)(a3 + 104))
    {
      v14 = *(int *)(a3 + 40);
      if (((v14 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && 8 * v14 > *MEMORY[0x1E0C85AD8])
        ++sTotal_10673;
      v15 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 8uLL, v14, 0x31F9A007uLL);
      if (!v15 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      while (!__ldxr(v13))
      {
        if (!__stxr((unint64_t)v15, v13))
          goto LABEL_24;
      }
      __clrex();
      free(v15);
    }
LABEL_24:
    v19 = a6;
    if (*(int *)(a3 + 40) < 1)
    {
      v12 = 0;
    }
    else
    {
      v17 = 0;
      do
      {
        v12 = do_compare(a1);
        if (v12 >= 1)
          break;
        ++v17;
      }
      while (v17 < *(int *)(a3 + 40));
    }
    a6 = v19;
  }
  else
  {
    v12 = 0;
  }
  if (a6)
    return !v12;
  else
    return v12;
}

uint64_t db_count_query_tree(_QWORD *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];

  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __db_count_query_tree_block_invoke;
  v3[3] = &unk_1E6E379D8;
  v3[4] = &v4;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __db_query_tree_apply_block_block_invoke;
  v8[3] = &unk_1E6E377F8;
  v8[4] = v3;
  db_query_tree_apply_block_with_meta(a1, (uint64_t)v8, 0);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void node_max_bias(uint64_t a1)
{
  int v2;

  v2 = *(_WORD *)(a1 + 40) & 0xFFF7;
  if (v2 != 32)
  {
    if (v2 == 2)
    {
      if (!*(_QWORD *)a1)
      {
        if (!*(_QWORD *)(a1 + 8))
          return;
        goto LABEL_15;
      }
      node_max_bias();
      if (*(_QWORD *)(a1 + 8))
LABEL_15:
        node_max_bias();
    }
    else if (v2 == 1)
    {
      if (*(_QWORD *)a1)
      {
        node_max_bias();
        if (!*(_QWORD *)(a1 + 8))
          return;
      }
      else if (!*(_QWORD *)(a1 + 8))
      {
        return;
      }
      goto LABEL_15;
    }
  }
}

_QWORD *cleanup_children(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  void *v8;
  void *v9;

  v2 = *(_QWORD **)a1;
  v3 = MEMORY[0x1E0C809B0];
  if (v2)
  {
    v5 = MEMORY[0x1E0C809B0];
    v6 = 0x40000000;
    v7 = __db_query_tree_apply_block_block_invoke;
    v8 = &unk_1E6E377F8;
    v9 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta(v2, (uint64_t)&v5, 0);
    *(_QWORD *)a1 = 0;
  }
  result = *(_QWORD **)(a1 + 8);
  if (result)
  {
    v5 = v3;
    v6 = 0x40000000;
    v7 = __db_query_tree_apply_block_block_invoke;
    v8 = &unk_1E6E377F8;
    v9 = &__block_literal_global_143;
    result = (_QWORD *)db_query_tree_apply_block_with_meta(result, (uint64_t)&v5, 0);
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t query_node_is_double_star(uint64_t result)
{
  uint64_t *v1;

  if (result)
  {
    if (*(_WORD *)(result + 40) == 4 && (v1 = *(uint64_t **)(result + 16)) != 0)
    {
      result = *v1;
      if (*v1)
        return strcmp((const char *)result, "**") == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ContentIndexCopyQueryTerms(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  _QWORD *v6;

  v6 = CIRetainIndexingTokenizer(a2);
  CITokenizerGetQueryTokensWithOptions((uint64_t)v6);
  CIReleaseIndexingTokenizer((uint64_t)v6);
  *a5 = 0;
  icu_locale_release();
  return 0;
}

void *copyQueryTokensCallback(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  void *result;
  size_t v7;
  void *v8;
  int v9;
  int v10;
  int v11;
  uint8_t v12[20];
  char __s[1044];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  bzero(__s, 0x414uLL);
  result = (void *)utf8_encodestr(a1, 2 * a2, __s, v12, 1043);
  if (!(_DWORD)result)
  {
    v7 = strlen(__s);
    v8 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v7 + 1, 0x6085D6BuLL);
    if (!v8 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v12 = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v12, 2u);
    }
    memcpy(v8, __s, v7);
    *((_BYTE *)v8 + v7) = 0;
    v10 = *(_DWORD *)(a3 + 8);
    v9 = *(_DWORD *)(a3 + 12);
    result = *(void **)a3;
    if (v9 >= v10)
    {
      v11 = 2 * v10;
      if (!v10)
        v11 = 16;
      *(_DWORD *)(a3 + 8) = v11;
      result = malloc_type_realloc(result, 8 * v11, 0x80040B8603338uLL);
      *(_QWORD *)a3 = result;
      v9 = *(_DWORD *)(a3 + 12);
    }
    *(_DWORD *)(a3 + 12) = v9 + 1;
    *((_QWORD *)result + v9) = v8;
  }
  return result;
}

uint64_t _query_node_copy_factor_node_expanding_queryTerm(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, _DWORD *a6)
{
  int v8;
  int v9;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t tree_apply_block_with_meta;
  uint64_t v16;
  uint64_t v18;
  const char *v19;
  size_t v20;
  void *v21;
  int v22;
  __int16 v23;
  uint8_t buf[8];
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void *v30;
  void *v31;

  if (*(int *)(a2 + 8) >= 1)
  {
    v8 = a4;
    v9 = a3;
    v12 = 0;
    v13 = 0;
    while (1)
    {
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v28 = 0x40000000;
      v29 = __db_query_tree_apply_block_block_invoke;
      v30 = &unk_1E6E377F8;
      v31 = &__block_literal_global_17_10736;
      tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((_QWORD *)a1, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
      v16 = *(_QWORD *)(tree_apply_block_with_meta + 16);
      *(_QWORD *)(v16 + 32) |= 0x8000uLL;
      if (v12 || !v8)
      {
        if (v12 != *(_DWORD *)(a2 + 8) - 1 || (_DWORD)a5 == 0)
        {
          v18 = a5;
          v19 = *(const char **)(*(_QWORD *)a2 + 8 * v12);
          v20 = strlen(v19);
          v21 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v20 + 1, 0x6085D6BuLL);
          if (!v21 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
          }
          memcpy(v21, v19, v20);
          *((_BYTE *)v21 + v20) = 0;
          *(_QWORD *)(*(_QWORD *)(tree_apply_block_with_meta + 16) + 72) = v21;
          a5 = v18;
          v9 = a3;
          v8 = a4;
          if (!a3)
            goto LABEL_28;
LABEL_21:
          if ((*(_WORD *)(a1 + 40) & 8) != 0)
            v22 = -1;
          else
            v22 = -5;
          if ((v22 + *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24)) >= 2)
            v23 = 1;
          else
            v23 = 2;
          query_node_expand_double_star_in_place(tree_apply_block_with_meta, v23);
          *a6 += 2;
          goto LABEL_28;
        }
        asprintf((char **)(v16 + 72), "%s*", *(const char **)(*(_QWORD *)a2 + 8 * v12));
        if (v9)
          goto LABEL_21;
      }
      else
      {
        asprintf((char **)(v16 + 72), "*%s", **(const char ***)a2);
        if (v9)
          goto LABEL_21;
      }
LABEL_28:
      if (v13)
      {
        if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
          ++sTotal_10673;
        v14 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
        if (!v14 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
        v14[20] = 2;
        *(_QWORD *)v14 = v13;
        *((_QWORD *)v14 + 1) = tree_apply_block_with_meta;
        ++*a6;
        tree_apply_block_with_meta = (uint64_t)v14;
      }
      ++v12;
      v13 = tree_apply_block_with_meta;
      if (v12 >= *(int *)(a2 + 8))
        return tree_apply_block_with_meta;
    }
  }
  return 0;
}

void query_node_expand_double_star_in_place(uint64_t a1, __int16 a2)
{
  void *v4;
  uint64_t v5;
  uint64_t tree_apply_block_with_meta;
  uint64_t v7;
  _WORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  void *v14;

  v4 = **(void ***)(a1 + 16);
  if (v4)
  {
    free(v4);
    **(_QWORD **)(a1 + 16) = 0;
  }
  v5 = MEMORY[0x1E0C809B0];
  v10 = MEMORY[0x1E0C809B0];
  v11 = 0x40000000;
  v12 = __db_query_tree_apply_block_block_invoke;
  v13 = &unk_1E6E377F8;
  v14 = &__block_literal_global_17_10736;
  tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((_QWORD *)a1, (uint64_t)&v10, (uint64_t)&__block_literal_global_20_10737);
  v10 = v5;
  v11 = 0x40000000;
  v12 = __db_query_tree_apply_block_block_invoke;
  v13 = &unk_1E6E377F8;
  v14 = &__block_literal_global_17_10736;
  v7 = db_query_tree_apply_block_with_meta((_QWORD *)a1, (uint64_t)&v10, (uint64_t)&__block_literal_global_20_10737);
  v8 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 2uLL, 0x6085D6BuLL);
  if (!v8 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    LOWORD(v10) = 0;
    _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v10, 2u);
  }
  *v8 = 42;
  **(_QWORD **)(tree_apply_block_with_meta + 16) = v8;
  v9 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x13uLL, 0x6085D6BuLL);
  if (!v9 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    LOWORD(v10) = 0;
    _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v10, 2u);
  }
  strcpy(v9, "kMDItemTextContent");
  **(_QWORD **)(v7 + 16) = v9;
  free_qp(*(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 40) = a2;
  *(_QWORD *)a1 = tree_apply_block_with_meta;
  *(_WORD *)(a1 + 48) = *(unsigned __int8 *)(a1 + 49) << 8;
}

void *__query_node_expand_block_invoke_4(int a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  void *v12;

  v5 = a2;
  if (a2 && a3 && a4)
  {
    *a2 = a3;
    a2[1] = a4;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    if (a3)
    {
      v8 = MEMORY[0x1E0C809B0];
      v9 = 0x40000000;
      v10 = __db_query_tree_apply_block_block_invoke;
      v11 = &unk_1E6E377F8;
      v12 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(a3, (uint64_t)&v8, 0);
    }
    if (a4)
    {
      v8 = v6;
      v9 = 0x40000000;
      v10 = __db_query_tree_apply_block_block_invoke;
      v11 = &unk_1E6E377F8;
      v12 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(a4, (uint64_t)&v8, 0);
    }
    free(v5);
    return 0;
  }
  return v5;
}

uint64_t __query_node_expand_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char v8;
  unint64_t v9;
  char v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  int v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  void (*v50)(uint64_t, uint64_t, unint64_t, const char *);
  void *v51;
  uint64_t *v52;
  uint64_t *v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t tree_apply_block_with_meta;
  char __s[2];
  char v67;
  _QWORD *__dst;
  uint64_t p_dst;
  uint64_t v70;
  void *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void **v76;

  if (*(_WORD *)(a2 + 40) != 4)
    return a2;
  v3 = *(_QWORD *)(a2 + 16);
  if (*(_DWORD *)(v3 + 24) > 0xBu)
    return a2;
  v4 = *(_QWORD *)(v3 + 72);
  if (!v4)
    return a2;
  v5 = *(_QWORD *)(v3 + 32);
  if ((v5 & 0x1000008) == 0)
    return a2;
  v6 = (char *)(v4 + strlen(*(const char **)(v3 + 72)));
  v7 = v6 - 1;
  if ((unint64_t)(v6 - 1) < v4)
  {
    v8 = 0;
    v9 = 0;
    if ((v5 & 8) == 0)
      goto LABEL_30;
    goto LABEL_7;
  }
  v9 = 0;
  v8 = 0;
  v16 = MEMORY[0x1E0C80978];
  while (1)
  {
    v17 = v7;
    v18 = *v7;
    if (v18 == 42)
    {
      if ((v8 & 1) == 0)
      {
        v8 = 1;
        goto LABEL_25;
      }
      v19 = *(_DWORD *)(v16 + 228);
      goto LABEL_20;
    }
    if ((v18 & 0x80000000) == 0)
    {
      v19 = *(_DWORD *)(v16 + 4 * v18 + 60);
LABEL_20:
      if ((v19 & 0x100) == 0)
        break;
      goto LABEL_24;
    }
    if (!__maskrune(v18, 0x100uLL))
      break;
LABEL_24:
    ++v9;
LABEL_25:
    --v7;
    v6 = v17;
    if ((unint64_t)(v17 - 1) < v4 || v9 >= 3)
      goto LABEL_29;
  }
  v6 = v7 + 1;
LABEL_29:
  v3 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v3 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_30:
    if ((v5 & 0x1000000) != 0)
    {
      *(_QWORD *)(v3 + 32) = v5 & 0xFFFFFFFFFEFFFFFFLL;
      if ((v5 & 0x400) == 0)
      {
        v20 = *(const char **)v3;
        if (*(_QWORD *)v3)
        {
          if (strcmp(*(const char **)v3, "kMDItemTextContent"))
            strncmp(v20, "_kMDItemOCRContent", 0x12uLL);
        }
      }
      __dst = 0;
      p_dst = (uint64_t)&__dst;
      v70 = 0x2000000000;
      v71 = 0;
      CITokenizerGatherSegments(v4);
      v43 = *(_QWORD *)(p_dst + 24);
      _Block_object_dispose(&__dst, 8);
      if (v43)
        return v43;
    }
    return a2;
  }
LABEL_7:
  *(_QWORD *)(v3 + 32) = v5 & 0xFFFFFFFFFFFFFFF7;
  if (v9 - 1 > 1)
    return a2;
  v67 = 0;
  *(_WORD *)__s = 0;
  v10 = __tolower(*v6);
  v11 = 0;
  if (v9 != 1)
  {
    v11 = __tolower(v6[1]);
    v67 = 0;
  }
  __s[0] = v10;
  __s[1] = v11;
  v62 = 0;
  v63 = &v62;
  v64 = 0x2000000000;
  tree_apply_block_with_meta = 0;
  v12 = (_QWORD *)MEMORY[0x1E0C809B0];
  __dst = (_QWORD *)MEMORY[0x1E0C809B0];
  p_dst = 0x40000000;
  v70 = (uint64_t)__db_query_tree_apply_block_block_invoke;
  v71 = &unk_1E6E377F8;
  v72 = &__block_literal_global_17_10736;
  tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((_QWORD *)a2, (uint64_t)&__dst, (uint64_t)&__block_literal_global_20_10737);
  v58 = 0;
  v59 = &v58;
  v60 = 0x2000000000;
  v61 = 0;
  v49[0] = v12;
  v49[1] = 0x40000000;
  v50 = __query_node_expand_block_invoke_2;
  v51 = &unk_1E6E37C10;
  v54 = v4;
  v55 = v7;
  v56 = a2;
  v57 = v8 & 1;
  v52 = &v58;
  v53 = &v62;
  v13 = strlen(__s);
  if (v13 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v14 = v13;
  if (v13 >= 0x17)
  {
    v21 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v21 = v13 | 7;
    v22 = v21 + 1;
    v15 = operator new(v21 + 1);
    p_dst = v14;
    v70 = v22 | 0x8000000000000000;
    __dst = v15;
    goto LABEL_39;
  }
  HIBYTE(v70) = v13;
  v15 = &__dst;
  if (v13)
LABEL_39:
    v13 = (unint64_t)memcpy(v15, __s, v14);
  *((_BYTE *)v15 + v14) = 0;
  incompleteRomajiKanaData(v13);
  v23 = SHIBYTE(v70);
  v24 = __dst;
  if (v70 >= 0)
    v25 = (uint64_t *)&__dst;
  else
    v25 = __dst;
  if (v70 >= 0)
    v26 = HIBYTE(v70);
  else
    v26 = p_dst;
  v27 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:nn180100](v25, v26);
  v28 = *((_QWORD *)&incompleteRomajiKanaData(void)::data + 1);
  if (!*((_QWORD *)&incompleteRomajiKanaData(void)::data + 1))
  {
    v33 = 0;
    goto LABEL_85;
  }
  v29 = v27;
  v30 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&incompleteRomajiKanaData(void)::data + 8));
  v30.i16[0] = vaddlv_u8(v30);
  v31 = v30.u32[0];
  if (v30.u32[0] > 1uLL)
  {
    v32 = v27;
    if (v27 >= *((_QWORD *)&incompleteRomajiKanaData(void)::data + 1))
      v32 = v27 % *((_QWORD *)&incompleteRomajiKanaData(void)::data + 1);
  }
  else
  {
    v32 = (*((_QWORD *)&incompleteRomajiKanaData(void)::data + 1) - 1) & v27;
  }
  v34 = *(uint64_t ***)(incompleteRomajiKanaData(void)::data + 8 * v32);
  if (!v34)
  {
    v33 = 0;
    goto LABEL_79;
  }
  v33 = *v34;
  if (!*v34)
  {
LABEL_79:
    v12 = (_QWORD *)MEMORY[0x1E0C809B0];
    goto LABEL_85;
  }
  while (1)
  {
    v35 = v33[1];
    if (v29 != v35)
      break;
    v36 = *((unsigned __int8 *)v33 + 39);
    if ((v36 & 0x80u) == 0)
      v37 = *((unsigned __int8 *)v33 + 39);
    else
      v37 = v33[3];
    if (v37 == v26)
    {
      if ((v36 & 0x80) != 0)
      {
        if (!memcmp((const void *)v33[2], v25, v33[3]))
          goto LABEL_84;
      }
      else
      {
        if (!*((_BYTE *)v33 + 39))
          goto LABEL_84;
        v38 = 0;
        v39 = v36 - 1;
        do
        {
          v40 = *((unsigned __int8 *)v33 + v38 + 16);
          v41 = *((unsigned __int8 *)v25 + v38);
        }
        while (v40 == v41 && v39 != v38++);
        if (v40 == v41)
          goto LABEL_84;
      }
    }
LABEL_57:
    v33 = (uint64_t *)*v33;
    if (!v33)
      goto LABEL_84;
  }
  if (v31 <= 1)
  {
    v35 &= v28 - 1;
  }
  else if (v35 >= v28)
  {
    v35 %= v28;
  }
  if (v35 == v32)
    goto LABEL_57;
  v33 = 0;
LABEL_84:
  v12 = (_QWORD *)MEMORY[0x1E0C809B0];
LABEL_85:
  if (v23 < 0)
    operator delete(v24);
  if (v33)
  {
    v73 = 0;
    v74 = 0;
    v75 = 0;
    std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(&v73, (__int128 *)v33[5], (__int128 *)v33[6], 0xAAAAAAAAAAAAAAABLL * ((v33[6] - v33[5]) >> 3));
    v45 = v73;
    if (v74 != v73)
    {
      v46 = 0;
      v47 = (v74 - v73) / 24;
      if (v47 <= 1)
        v48 = 1;
      else
        v48 = (v74 - v73) / 24;
      do
      {
        ((void (*)(_QWORD *, unint64_t, uint64_t))v50)(v49, v47, v46++);
        v45 += 24;
      }
      while (v48 != v46);
    }
    v76 = (void **)&v73;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v76);
  }
  free((void *)v59[3]);
  __dst = v12;
  p_dst = 0x40000000;
  v70 = (uint64_t)__db_query_tree_apply_block_block_invoke;
  v71 = &unk_1E6E377F8;
  v72 = &__block_literal_global_143;
  db_query_tree_apply_block_with_meta((_QWORD *)a2, (uint64_t)&__dst, 0);
  v43 = v63[3];
  _Block_object_dispose(&v58, 8);
  _Block_object_dispose(&v62, 8);
  return v43;
}

void __query_node_expand_block_invoke_2(uint64_t a1, uint64_t a2, unint64_t a3, const char *a4)
{
  uint64_t v4;
  uint64_t v5;
  const char *v8;
  size_t v9;
  void *v10;
  _QWORD *v11;
  uint64_t tree_apply_block_with_meta;
  const char *v13;
  _WORD *v14;
  uint8_t buf[8];
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  void *v18;
  void *v19;
  uint8_t v20[16];
  uint64_t v21;
  uint64_t v22;

  if (a3 <= 0x13)
  {
    v21 = v4;
    v22 = v5;
    if (!a3)
    {
      v8 = *(const char **)(a1 + 48);
      v9 = strlen(v8);
      v10 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v9 + 1, 0x6085D6BuLL);
      if (!v10 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      memcpy(v10, v8, v9);
      *((_BYTE *)v10 + v9) = 0;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v10;
      *(_BYTE *)(*(_QWORD *)(a1 + 56)
               - *(_QWORD *)(a1 + 48)
               + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)
               + 1) = 0;
    }
    v11 = *(_QWORD **)(a1 + 64);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v16 = 0x40000000;
    v17 = __db_query_tree_apply_block_block_invoke;
    v18 = &unk_1E6E377F8;
    v19 = &__block_literal_global_17_10736;
    tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(v11, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
    *(_QWORD *)buf = 0;
    if (*(_BYTE *)(a1 + 72))
      v13 = "*";
    else
      v13 = "";
    asprintf((char **)buf, "%s%s%s", *(const char **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), a4, v13);
    free(*(void **)(*(_QWORD *)(tree_apply_block_with_meta + 16) + 72));
    *(_QWORD *)(*(_QWORD *)(tree_apply_block_with_meta + 16) + 72) = *(_QWORD *)buf;
    if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
      ++sTotal_10673;
    v14 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
    if (!v14 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v20 = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v20, 2u);
    }
    v14[20] = 1;
    *(_QWORD *)v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    *((_QWORD *)v14 + 1) = tree_apply_block_with_meta;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v14;
  }
}

void __query_node_expand_block_invoke_3(uint64_t a1, const char *a2, uint64_t a3, size_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t tree_apply_block_with_meta;
  _QWORD *v15;
  size_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  size_t v22;
  void *v23;
  _WORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a3 >= 2)
  {
    v31 = v7;
    v32 = v6;
    v33 = v4;
    v34 = v5;
    if (*(_BYTE *)(a1 + 56))
    {
      v10 = a3;
      v11 = 0;
      v12 = 0;
      do
      {
        v15 = *(_QWORD **)(a1 + 40);
        v26 = MEMORY[0x1E0C809B0];
        v27 = 0x40000000;
        v28 = __db_query_tree_apply_block_block_invoke;
        v29 = &unk_1E6E377F8;
        v30 = &__block_literal_global_17_10736;
        tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(v15, (uint64_t)&v26, (uint64_t)&__block_literal_global_20_10737);
        free(*(void **)(*(_QWORD *)(tree_apply_block_with_meta + 16) + 72));
        v17 = *a4++;
        v16 = v17;
        v18 = *(_QWORD *)(a1 + 48);
        v19 = v17 + v12;
        if (*(_BYTE *)(a1 + 57) && v10 == 1 && *(_BYTE *)(v18 + v19) == 42)
          ++v16;
        *(_QWORD *)(*(_QWORD *)(tree_apply_block_with_meta + 16) + 72) = strndup((const char *)(v18 + v12), v16);
        if (v11)
        {
          if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
            ++sTotal_10673;
          v13 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
          if (!v13 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
          {
            LOWORD(v26) = 0;
            _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v26, 2u);
          }
          *v13 = v11;
          v13[1] = tree_apply_block_with_meta;
          tree_apply_block_with_meta = (uint64_t)v13;
          *((_WORD *)v13 + 20) = 2;
        }
        v11 = tree_apply_block_with_meta;
        v12 = v19;
        --v10;
      }
      while (v10);
    }
    else
    {
      v21 = *(_QWORD **)(a1 + 40);
      v26 = MEMORY[0x1E0C809B0];
      v27 = 0x40000000;
      v28 = __db_query_tree_apply_block_block_invoke;
      v29 = &unk_1E6E377F8;
      v30 = &__block_literal_global_17_10736;
      tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(v21, (uint64_t)&v26, (uint64_t)&__block_literal_global_20_10737);
      free(*(void **)(*(_QWORD *)(tree_apply_block_with_meta + 16) + 72));
      v22 = strlen(a2);
      v23 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v22 + 1, 0x6085D6BuLL);
      if (!v23 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        LOWORD(v26) = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v26, 2u);
      }
      memcpy(v23, a2, v22);
      *((_BYTE *)v23 + v22) = 0;
      *(_QWORD *)(*(_QWORD *)(tree_apply_block_with_meta + 16) + 72) = v23;
    }
    if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
      ++sTotal_10673;
    v24 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
    if (!v24 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      LOWORD(v26) = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v26, 2u);
    }
    v24[20] = 1;
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    if (!v25)
      v25 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)v24 = v25;
    *((_QWORD *)v24 + 1) = tree_apply_block_with_meta;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v24;
  }
}

_QWORD *db_make_query_node_with_ann(char *a1, const __CFDictionary *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  const __CFNumber *Value;
  const __CFNumber *v12;
  const __CFNumber *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  NSObject *v18;
  unint64_t v19;
  int v20;
  NSObject *v21;
  int tree;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  int valuePtr;
  unint64_t v29;
  unsigned __int8 *v30;
  _QWORD v31[5];
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE buf[40];
  unsigned __int8 *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!*a1)
    return 0;
  v29 = 0;
  v30 = 0;
  v4 = strlen(a1);
  v5 = check_and_decompose_string((unsigned __int8 *)a1, v4 + 1, &v30, &v29);
  if (v5)
  {
    v6 = v5;
    v7 = *__error();
    v8 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "db_make_query_node_with_ann";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5859;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v6;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = a1;
      _os_log_error_impl(&dword_1B8270000, v8, OS_LOG_TYPE_ERROR, "%s:%d: invalid query (%d) - %s", buf, 0x22u);
    }
    v9 = 0;
    *__error() = v7;
  }
  else
  {
    v10 = v30;
    v27 = 3;
    valuePtr = 3;
    v26 = 0;
    if (a2 && CFDictionaryContainsKey(a2, CFSTR("vectors")))
    {
      CFDictionaryGetValue(a2, CFSTR("vectors"));
      Value = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("vec_data_format"));
      if (Value)
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      v12 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("vec_dimensions"));
      if (v12)
        CFNumberGetValue(v12, kCFNumberIntType, &v27);
      v13 = (const __CFNumber *)CFDictionaryGetValue(a2, CFSTR("vec_version"));
      if (v13)
        CFNumberGetValue(v13, kCFNumberSInt32Type, &v26);
    }
    v25 = 0;
    v24 = v10;
    v14 = MEMORY[0x1E0C809B0];
    v15 = v29;
    v9 = or_expr(&v24, 1, &v25);
    if (v9)
    {
      v16 = (unsigned __int8 *)(v24 - v10);
      if (v24 - v10 != v15 - 1)
      {
        v17 = *__error();
        v18 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "db_make_query_node_with_ann";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5969;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v16;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v15;
          *(_WORD *)&buf[38] = 2080;
          v37 = v10;
          _os_log_error_impl(&dword_1B8270000, v18, OS_LOG_TYPE_ERROR, "%s:%d: query used %ld of %ld - %s", buf, 0x30u);
        }
        *__error() = v17;
      }
      v32 = 0;
      v33 = &v32;
      v34 = 0x2000000000;
      v35 = 0;
      v31[0] = v14;
      v31[1] = 0x40000000;
      v31[2] = __db_count_query_tree_block_invoke;
      v31[3] = &unk_1E6E379D8;
      v31[4] = &v32;
      *(_QWORD *)buf = v14;
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E6E377F8;
      *(_QWORD *)&buf[32] = v31;
      db_query_tree_apply_block_with_meta(v9, (uint64_t)buf, 0);
      v19 = v33[3];
      _Block_object_dispose(&v32, 8);
      if (v19 >= 0x801)
      {
        v20 = *__error();
        v21 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          tree = db_count_query_tree(v9);
          *(_DWORD *)buf = 136316162;
          *(_QWORD *)&buf[4] = "db_make_query_node_with_ann";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5980;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = tree;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = 2048;
          *(_WORD *)&buf[30] = 2080;
          *(_QWORD *)&buf[32] = a1;
          _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: query node count %d exceeded %d - %s", buf, 0x28u);
        }
        *__error() = v20;
        *(_QWORD *)buf = v14;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E6E377F8;
        *(_QWORD *)&buf[32] = &__block_literal_global_143;
        db_query_tree_apply_block_with_meta(v9, (uint64_t)buf, 0);
        v9 = 0;
      }
    }
    if (v10 != (unsigned __int8 *)a1)
      free(v10);
  }
  return v9;
}

const __CFArray *__db_make_query_node_with_ann_block_invoke(uint64_t a1, uint64_t a2, unsigned int a3)
{
  const __CFArray *result;
  const __CFData *ValueAtIndex;
  const UInt8 *BytePtr;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  void *v14;

  result = *(const __CFArray **)(a1 + 32);
  if (result)
  {
    if (CFArrayGetCount(result) <= a3)
      return 0;
    ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), a3);
    BytePtr = CFDataGetBytePtr(ValueAtIndex);
    v9 = *(_DWORD *)(a2 + 60) & 0xFFFFFFF3 | (4 * (*(_DWORD *)(a1 + 48) & 3));
    *(_DWORD *)(a2 + 60) = v9;
    v10 = v9 & 0xFFFFFFFC | *(_DWORD *)(a1 + 52) & 3;
    *(_DWORD *)(a2 + 60) = v10;
    *(_DWORD *)(a2 + 60) = v10 & 0x1FFFFFF | (*(_WORD *)(a1 + 56) << 25);
    v11 = *(unsigned int *)(a1 + 52);
    v12 = -1;
    if (v11 <= 2)
    {
      v13 = *(unsigned int *)(a1 + 48);
      if (v13 <= 2)
        v12 = (vector_dimension_vec_sizes_10743[v11] * vector_size_elem_sizes_10742[v13]);
    }
    if (*(_QWORD *)(a1 + 40) == -1)
    {
      return 0;
    }
    else
    {
      v14 = malloc_type_malloc(v12, 0x9CD38D07uLL);
      *(_QWORD *)(a2 + 296) = v14;
      *(_DWORD *)(a2 + 160) |= 0x10000u;
      memcpy(v14, BytePtr, v12);
      return (const __CFArray *)1;
    }
  }
  return result;
}

uint64_t parse_comma(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v4;
  uint64_t v5;
  int v6;
  _BYTE *v8;
  unsigned int v9;

  v2 = *a1;
  if (!*a1)
    return 0;
  v4 = a1 + 1;
  v5 = MEMORY[0x1E0C80978];
  while (v2 < 0)
  {
    if (!__maskrune(v2, 0x4000uLL))
      goto LABEL_7;
LABEL_4:
    v6 = *v4++;
    v2 = v6;
    if (!v6)
      return 0;
  }
  if ((*(_DWORD *)(v5 + 4 * v2 + 60) & 0x4000) != 0)
    goto LABEL_4;
LABEL_7:
  if (*(v4 - 1) != 44)
    return 0;
  while (1)
  {
    v8 = v4;
    v9 = (char)*v4;
    if (!*v4)
      break;
    if ((v9 & 0x80000000) != 0)
    {
      ++v4;
      if (!__maskrune(v9, 0x4000uLL))
        break;
    }
    else
    {
      ++v4;
      if ((*(_DWORD *)(v5 + 4 * v9 + 60) & 0x4000) == 0)
        break;
    }
  }
  *a2 = v8;
  return 1;
}

_BYTE *parse_whitespace(_BYTE *a1)
{
  _BYTE *v1;
  char v2;
  uint64_t v3;
  int v4;

  v1 = a1;
  v2 = *a1;
  if (*a1)
  {
    v3 = MEMORY[0x1E0C80978];
    do
    {
      if (v2 < 0)
      {
        if (!__maskrune(v2, 0x4000uLL))
          return v1;
      }
      else if ((*(_DWORD *)(v3 + 4 * v2 + 60) & 0x4000) == 0)
      {
        return v1;
      }
      v4 = *++v1;
      v2 = v4;
    }
    while (v4);
  }
  return v1;
}

void get_proximities(uint64_t a1, char *a2, char **a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[5];
  _QWORD v11[5];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[16];

  v12 = 0;
  v13 = &v12;
  v14 = 0x2000000000;
  v6 = MEMORY[0x1E0C809B0];
  v15 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = __get_proximities_block_invoke;
  v11[3] = &unk_1E6E37C80;
  v11[4] = &v12;
  v7 = _process_proximities(a2, (uint64_t)v11);
  *(_DWORD *)(a1 + 96) = 0;
  v8 = v13[3];
  if (v8)
  {
    v9 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 4 * v8, 0x6085D6BuLL);
    if (v9)
    {
      *(_QWORD *)(a1 + 88) = v9;
      v10[0] = v6;
      v10[1] = 0x40000000;
      v10[2] = __get_proximities_block_invoke_2;
      v10[3] = &__block_descriptor_tmp_138;
      v10[4] = a1;
      _process_proximities(a2, (uint64_t)v10);
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      *(_QWORD *)(a1 + 88) = 0;
    }
  }
  *a3 = v7;
  _Block_object_dispose(&v12, 8);
}

uint64_t __get_wildcard_limit_block_invoke(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v3 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = v3 + 1;
  if (!v3)
    *(_DWORD *)(*(_QWORD *)(result + 40) + 60) = a2;
  return result;
}

char *_process_proximities(char *a1, uint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char v11;
  int v12;
  char *__str;

  v2 = a1;
  if (*a1 == 40)
  {
    v4 = a1 + 1;
    v5 = MEMORY[0x1E0C80978];
    while (1)
    {
      v2 = v4;
      v6 = *v4;
      if (!*v4)
        break;
      if ((v6 & 0x80000000) != 0)
      {
        v7 = __maskrune(v6, 0x4000uLL);
        v4 = v2 + 1;
        if (!v7)
          break;
      }
      else
      {
        ++v4;
        if ((*(_DWORD *)(v5 + 4 * v6 + 60) & 0x4000) == 0)
          break;
      }
    }
    while (2)
    {
      __str = v2;
LABEL_8:
      v8 = *v2;
      if (!*v2)
        return v2;
      if (v8 == 41)
        return ++v2;
      do
      {
        if ((v8 & 0x80) != 0)
        {
          if (!__maskrune((char)v8, 0x4000uLL))
            break;
        }
        else if ((*(_DWORD *)(v5 + 4 * (char)v8 + 60) & 0x4000) == 0)
        {
          break;
        }
        v9 = *++v2;
        LOBYTE(v8) = v9;
      }
      while (v9);
      __str = v2;
      if ((*v2 - 48) <= 9)
      {
        v10 = strtol(v2, &__str, 0);
        (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, v10);
        v2 = __str;
        v11 = *__str;
        if (*__str)
          goto LABEL_19;
LABEL_26:
        ++v2;
        continue;
      }
      break;
    }
    v11 = *v2;
    if (!*v2)
      goto LABEL_26;
    while (1)
    {
LABEL_19:
      if (v11 < 0)
      {
        if (!__maskrune(v11, 0x4000uLL))
        {
LABEL_25:
          __str = v2;
          if (*v2 != 41)
            goto LABEL_26;
          goto LABEL_8;
        }
      }
      else if ((*(_DWORD *)(v5 + 4 * v11 + 60) & 0x4000) == 0)
      {
        goto LABEL_25;
      }
      v12 = *++v2;
      v11 = v12;
      if (!v12)
        goto LABEL_26;
    }
  }
  return v2;
}

uint64_t __get_weights_block_invoke(uint64_t result, float a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  if (v2 == 1)
  {
    *(float *)(*(_QWORD *)(result + 40) + 56) = a2;
  }
  else if (!v2)
  {
    *(float *)(*(_QWORD *)(result + 40) + 52) = a2;
  }
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

uint64_t __get_proximities_block_invoke(uint64_t result)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

uint64_t __get_proximities_block_invoke_2(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  v3 = *(_QWORD *)(v2 + 88);
  v4 = *(unsigned int *)(v2 + 96);
  *(_DWORD *)(v2 + 96) = v4 + 1;
  *(_DWORD *)(v3 + 4 * v4) = a2;
  return result;
}

void db_dump_query_node_with_prefix(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  const char *v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  int v12;
  NSObject *v13;
  os_log_type_t v14;
  int v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t buf[4];
  char *v19;
  __int16 v20;
  _QWORD *v21;
  char v22[2048];
  uint64_t v23;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = (const char *)v1;
  v23 = *MEMORY[0x1E0C80C00];
  v11 = v22;
  bzero(v22, 0x800uLL);
  if (v10)
    v11 = &v22[__sprintf_chk(v22, 0, 0x800uLL, "%s ", v10)];
  if (v9)
  {
    if (v7 < 0)
      sprintf(v11, "%p");
    else
      sprintf(v11, "%p[%d] ");
  }
  os_unfair_lock_lock(&db_dump_query_node_with_prefix_s_dump_node_lock);
  v12 = *__error();
  v13 = _SILogForLogForCategory(1);
  v14 = 2 * (dword_1EF19FC90 < 4);
  if (os_log_type_enabled(v13, v14))
  {
    *(_DWORD *)buf = 136315394;
    v19 = v22;
    v20 = 2048;
    v21 = v5;
    _os_log_impl(&dword_1B8270000, v13, v14, "%s %p begin -------------------------------------------------------------------------------------------", buf, 0x16u);
  }
  *__error() = v12;
  if (v5)
  {
    bzero(buf, 0x800uLL);
    dump_tree_with_prefix(v5, 0, (char *)buf, v3);
  }
  v15 = *__error();
  v16 = _SILogForLogForCategory(1);
  v17 = 2 * (dword_1EF19FC90 < 4);
  if (os_log_type_enabled(v16, v17))
  {
    *(_DWORD *)buf = 136315394;
    v19 = v22;
    v20 = 2048;
    v21 = v5;
    _os_log_impl(&dword_1B8270000, v16, v17, "%s %p end -------------------------------------------------------------------------------------------", buf, 0x16u);
  }
  *__error() = v15;
  v22[0] = 0;
  os_unfair_lock_unlock(&db_dump_query_node_with_prefix_s_dump_node_lock);
}

int *dump_tree_with_prefix(_QWORD *a1, int a2, char *a3, const char *a4)
{
  char *v7;
  int64_t v8;
  int *result;
  int v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int16 v14;
  uint64_t v15;
  int v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  float v27;
  float v28;
  BOOL v29;
  int v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t buf[4];
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = a3 + 2048;
  v8 = a2;
  do
  {
    if (*a1)
      dump_tree_with_prefix(*a1, (v8 + 1), a3, a4);
    *a3 = 0;
    v10 = snprintf(a3, 0x800uLL, "%s", a4);
    v11 = &a3[v10];
    if (v8 > 32)
    {
      *(_QWORD *)&v13 = 0x2020202020202020;
      *((_QWORD *)&v13 + 1) = 0x2020202020202020;
      *(_OWORD *)v11 = v13;
      *((_OWORD *)v11 + 1) = v13;
      v12 = &v11[snprintf(v11 + 32, v7 - (v11 + 32), "(%d) ", v8) + 32];
    }
    else
    {
      memset(&a3[v10], 32, v8);
      v12 = &v11[v8];
    }
    *v12 = 0;
    v14 = *((_WORD *)a1 + 20);
    switch(v14)
    {
      case 1:
        snprintf(v12, v7 - v12, "OR node     @ 0x%p");
        break;
      case 2:
        snprintf(v12, v7 - v12, "AND node    @ 0x%p");
        break;
      case 4:
      case 12:
        v15 = a1[2];
        v16 = *(_DWORD *)(v15 + 24);
        if ((v16 - 11) < 2)
        {
          v21 = snprintf(v12, v7 - v12, "factor node @ 0x%p flags 0x%llx value <%s%s(%s,%s,%s)>", a1, *(_QWORD *)(v15 + 32));
        }
        else if ((v16 - 13) >= 2)
        {
          if (v16 == 15)
          {
            v22 = "!";
            if ((v14 & 8) == 0)
              v22 = "";
            v21 = snprintf(v12, v7 - v12, "factor node @ 0x%p flags 0x%llx value <%s%s(%s,%s,%u,%d,%.3f,%s)>", a1, *(_QWORD *)(v15 + 32), v22);
          }
          else
          {
            v23 = *(_QWORD *)(v15 + 32);
            if ((v23 & 0x6000000) != 0)
            {
              if ((v23 & 0x2000000) != 0 && *(int *)(v15 + 44) <= 0)
              {
                v21 = snprintf(v12, v7 - v12, "factor node @ 0x%p flags 0x%llx value <%s%s[] %s %s>", a1);
              }
              else
              {
                v29 = (v14 & 8) == 0;
                v24 = "!";
                if (v29)
                  v24 = "";
                v21 = snprintf(v12, v7 - v12, "factor node @ 0x%p flags 0x%llx value <%s%s[%s%d] %s %s>", a1, v23, v24);
              }
            }
            else
            {
              v21 = snprintf(v12, v7 - v12, "factor node @ 0x%p flags 0x%llx value <%s%s %s %s>", a1);
            }
          }
        }
        else
        {
          v29 = (v14 & 8) == 0;
          v17 = "!";
          if (v29)
            v17 = "";
          v29 = v16 == 13;
          v18 = "OUT_FIELD_MATCH";
          if (v29)
            v18 = "FIELD_MATCH";
          v12 += snprintf(v12, v7 - v12, "factor node @ 0x%p flags 0x%llx value <%s%s(%s", a1, *(_QWORD *)(v15 + 32), v17, v18, *(const char **)v15);
          v19 = a1[2];
          if (*(int *)(v19 + 40) >= 1)
          {
            v20 = 0;
            do
            {
              v12 += snprintf(v12, v7 - v12, ",%s", *(const char **)(*(_QWORD *)(v19 + 168) + 8 * v20++));
              v19 = a1[2];
            }
            while (v20 < *(int *)(v19 + 40));
          }
          v21 = snprintf(v12, v7 - v12, ")>", v33, v34, v35, v36, v37, v38, v39, v40, v41, v42);
        }
        v25 = &v12[v21];
        v26 = a1[2];
        v27 = *(float *)(v26 + 52);
        v28 = *(float *)(v26 + 56);
        v29 = v28 == 0.0 && v27 == 0.0;
        if (!v29)
        {
          v25 += snprintf(v25, v7 - v25, " W(%0.10f),fW(%0.10f)", v27, v28);
          v26 = a1[2];
        }
        if (*(_DWORD *)(v26 + 60))
          snprintf(v25, v7 - v25, " D(%u)");
        break;
      case 9:
        snprintf(v12, v7 - v12, "NOR node     @ 0x%p");
        break;
      case 10:
        snprintf(v12, v7 - v12, "NAND node    @ 0x%p");
        break;
      case 16:
        snprintf(v12, v7 - v12, "ALWAYS FALSE node        @0x%p");
        break;
      case 32:
        snprintf(v12, v7 - v12, "ALWAYS TRUE node        @0x%p");
        break;
      default:
        snprintf(v12, v7 - v12, "we got garbage for node @ 0x%p (type %d qp 0x%p)");
        break;
    }
    v30 = *__error();
    v31 = _SILogForLogForCategory(1);
    v32 = 2 * (dword_1EF19FC90 < 4);
    if (os_log_type_enabled(v31, v32))
    {
      *(_DWORD *)buf = 136315138;
      v44 = a3;
      _os_log_impl(&dword_1B8270000, v31, v32, "%s", buf, 0xCu);
    }
    result = __error();
    *result = v30;
    a1 = (_QWORD *)a1[1];
    ++v8;
  }
  while (a1);
  return result;
}

size_t render_field_name(uint64_t a1, void **a2, uint64_t a3, size_t *a4, _DWORD *a5)
{
  const char *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  size_t v17;
  void *v18;
  int v19;
  size_t v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  size_t v26;
  size_t v27;
  size_t v28;
  char *v29;
  size_t v30;
  void *v31;
  char __str[16];
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = *(const char **)a1;
  v11 = strlen(*(const char **)a1);
  v12 = v11 + a3;
  v13 = *a4;
  if (v11 + a3 <= *a4)
  {
    v14 = (char *)*a2;
  }
  else
  {
    do
      v13 *= 2;
    while (v12 > v13);
    *a4 = v13;
    v14 = (char *)malloc_type_realloc(*a2, v13, 0x69244CAuLL);
    *a2 = v14;
  }
  memcpy(&v14[a3], v10, v11);
  v15 = *(_QWORD *)(a1 + 32);
  if ((v15 & 0x800000) == 0 && (v15 & 0x6000000) != 0)
  {
    v16 = v12 + 1;
    v17 = *a4;
    if (v12 + 1 <= *a4)
    {
      v18 = *a2;
    }
    else
    {
      do
        v17 *= 2;
      while (v16 > v17);
      *a4 = v17;
      v18 = malloc_type_realloc(*a2, v17, 0x69244CAuLL);
      *a2 = v18;
    }
    *((_BYTE *)v18 + v12) = 91;
    if ((*(_BYTE *)(a1 + 35) & 2) != 0)
    {
      v20 = v12 + 2;
      v21 = *a4;
      if (v20 <= *a4)
      {
        v22 = *a2;
      }
      else
      {
        do
          v21 *= 2;
        while (v20 > v21);
        *a4 = v21;
        v22 = malloc_type_realloc(*a2, v21, 0x69244CAuLL);
        *a2 = v22;
      }
      *((_BYTE *)v22 + v16) = 36;
      v23 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)__str = 0u;
      v34 = 0u;
      v19 = *(_DWORD *)(a1 + 44);
      if (a5 && (v23 & 0x2000000) != 0)
      {
        v24 = *a5;
        if ((int)v24 >= 1)
        {
          for (i = 0; i != v24; ++i)
          {
            if (a5[i + 1] == v19)
            {
              v19 = i;
              goto LABEL_26;
            }
          }
          if ((int)v24 > 29)
            goto LABEL_26;
        }
        a5[(int)v24 + 1] = v19;
        v19 = (*a5)++;
      }
    }
    else
    {
      *(_OWORD *)__str = 0u;
      v34 = 0u;
      v19 = *(_DWORD *)(a1 + 44);
      v20 = v12 + 1;
    }
LABEL_26:
    snprintf(__str, 0x20uLL, "%d", v19);
    v26 = strlen(__str);
    v27 = v26 + v20;
    v28 = *a4;
    if (v26 + v20 <= *a4)
    {
      v29 = (char *)*a2;
    }
    else
    {
      do
        v28 *= 2;
      while (v27 > v28);
      *a4 = v28;
      v29 = (char *)malloc_type_realloc(*a2, v28, 0x69244CAuLL);
      *a2 = v29;
    }
    memcpy(&v29[v20], __str, v26);
    v12 = v27 + 1;
    v30 = *a4;
    if (v27 + 1 <= *a4)
    {
      v31 = *a2;
    }
    else
    {
      do
        v30 *= 2;
      while (v12 > v30);
      *a4 = v30;
      v31 = malloc_type_realloc(*a2, v30, 0x69244CAuLL);
      *a2 = v31;
    }
    *((_BYTE *)v31 + v27) = 93;
  }
  return v12;
}

size_t render_string_protecting_char(const char *a1, void **a2, uint64_t a3, size_t *a4)
{
  char *v7;
  size_t v8;
  uint64_t v9;
  char *i;
  char *v11;
  size_t v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  int64_t v17;
  char *v18;

  v7 = (char *)a1;
  v8 = strlen(a1);
  v9 = 0;
  for (i = v7; ; i = v11 + 1)
  {
    v11 = strchr(i, 34);
    if (!v11)
      break;
    ++v9;
  }
  v12 = v8 + a3;
  v13 = v8 + a3 + v9;
  v14 = *a4;
  if (v13 > *a4)
  {
    do
      v14 *= 2;
    while (v13 > v14);
    *a4 = v14;
    *a2 = malloc_type_realloc(*a2, v14, 0x8F5BCE25uLL);
  }
  if (v9)
  {
    while (1)
    {
      v15 = strchr(v7, 34);
      if (!v15)
        break;
      v16 = v15;
      v17 = v15 - v7;
      memcpy((char *)*a2 + a3, v7, v15 - v7);
      *((_BYTE *)*a2 + v17 + a3) = 92;
      v18 = (char *)*a2 + v17 + a3;
      a3 += v17 + 2;
      v18[1] = 34;
      v8 += ~v17;
      v7 = v16 + 1;
    }
    v12 = v8 + a3;
  }
  memcpy((char *)*a2 + a3, v7, v8);
  return v12;
}

size_t _db_render_query_tree(uint64_t a1)
{
  _QWORD **v1;
  void **v2;
  size_t v3;
  const char *v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  void **v10;
  size_t v11;
  size_t v12;
  void *v13;
  size_t v14;
  uint64_t v15;
  _QWORD *p_ptr;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int16 v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  void *v50;
  char *v51;
  _QWORD *v52;
  size_t v53;
  uint64_t v54;
  const char *v55;
  size_t v56;
  size_t v57;
  size_t v58;
  char *v59;
  _QWORD *v60;
  void *v61;
  _QWORD *v62;
  char *v63;
  _QWORD *v64;
  char *v65;
  size_t v66;
  size_t v67;
  size_t v68;
  void *v69;
  const char *v70;
  size_t v71;
  size_t v72;
  size_t v73;
  char *v74;
  size_t v75;
  size_t v76;
  void *v77;
  const char *v78;
  size_t v79;
  size_t v80;
  size_t v81;
  char *v82;
  size_t v83;
  void *v84;
  unint64_t v85;
  void *v86;
  char *v87;
  char *v88;
  size_t v89;
  size_t v90;
  size_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  unint64_t v95;
  void *v96;
  unint64_t v97;
  void **v98;
  void *v99;
  size_t v100;
  size_t v101;
  size_t v102;
  void *v103;
  char *v104;
  size_t v105;
  size_t v106;
  size_t v107;
  char *v108;
  size_t v109;
  size_t v110;
  void *v111;
  char *v112;
  size_t v113;
  size_t v114;
  size_t v115;
  char *v116;
  uint64_t v117;
  size_t v118;
  size_t v119;
  void *v120;
  unint64_t v121;
  void *v122;
  size_t v123;
  size_t v124;
  size_t v125;
  char *v126;
  size_t v127;
  size_t v128;
  void *v129;
  size_t v130;
  size_t v131;
  void *v132;
  size_t v133;
  size_t v134;
  void *v135;
  char v136;
  size_t v137;
  void *v138;
  unsigned __int8 v139;
  size_t v140;
  size_t v141;
  char *v142;
  unint64_t v143;
  void *v144;
  unint64_t v145;
  void *v146;
  unint64_t v147;
  void *v148;
  unint64_t v149;
  void *v150;
  unint64_t v151;
  void *v152;
  unint64_t v153;
  void *v154;
  size_t v155;
  size_t v156;
  char *v157;
  size_t v158;
  size_t v159;
  size_t v160;
  char *v161;
  size_t v162;
  size_t v163;
  void *v164;
  size_t v165;
  size_t v166;
  char *v167;
  size_t v168;
  void *v169;
  size_t v170;
  size_t v171;
  char *v172;
  size_t v173;
  size_t v174;
  size_t v175;
  char *v176;
  size_t v177;
  void *v178;
  uint64_t v179;
  size_t v180;
  size_t v181;
  void *v182;
  char v183;
  size_t v184;
  size_t v185;
  size_t v186;
  size_t v187;
  void *v188;
  size_t v189;
  size_t v190;
  char *v191;
  unint64_t v192;
  char *v193;
  size_t v194;
  size_t v195;
  void *v196;
  size_t v197;
  size_t v198;
  size_t v199;
  size_t v200;
  void *v201;
  unint64_t v203;
  void **v204;
  _OWORD v205[8];
  size_t size;
  _QWORD *__ptr;
  uint64_t v208;
  char __str[16];
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;

  v1 = (_QWORD **)MEMORY[0x1E0C80A78](a1);
  v217 = *MEMORY[0x1E0C80C00];
  size = v3;
  if (!v1)
    return 0;
  v6 = v1;
  v7 = *v1;
  if (!*v1)
    return 0;
  v8 = v4;
  v9 = v3;
  v10 = v2;
  if (v5)
  {
    db_optimize_query_tree(v1);
    v7 = (_QWORD *)*v6;
  }
  if (v8)
  {
    v11 = strlen(v8);
    v12 = v11;
    if (v11 <= v9)
    {
      v13 = *v10;
    }
    else
    {
      do
        v9 *= 2;
      while (v11 > v9);
      size = v9;
      v13 = malloc_type_realloc(*v10, v9, 0x69244CAuLL);
      *v10 = v13;
    }
    memcpy(v13, v8, v12);
  }
  else
  {
    v12 = 0;
  }
  memset(v205, 0, 124);
  bzero(&v208, 0x3FF8uLL);
  v203 = 1024;
  v204 = v10;
  v15 = 1;
  __ptr = v7;
  p_ptr = &__ptr;
  do
  {
    v18 = size;
    v19 = v15 - 1;
    v20 = &p_ptr[2 * v15 - 2];
    v21 = *((_WORD *)v20 + 5);
    if ((v21 & 2) != 0)
    {
      v25 = v12 + 1;
      if (v12 + 1 <= size)
      {
        v17 = *v10;
      }
      else
      {
        do
          v18 *= 2;
        while (v25 > v18);
        size = v18;
        v26 = p_ptr;
        v17 = malloc_type_realloc(*v10, v18, 0x69244CAuLL);
        p_ptr = v26;
        *v10 = v17;
      }
      *((_BYTE *)v17 + v12) = 40;
      goto LABEL_16;
    }
    if ((v21 & 4) != 0)
    {
      v25 = v12 + 1;
      if (v12 + 1 <= size)
      {
        v28 = *v10;
      }
      else
      {
        do
          v18 *= 2;
        while (v25 > v18);
        size = v18;
        v27 = p_ptr;
        v28 = malloc_type_realloc(*v10, v18, 0x69244CAuLL);
        p_ptr = v27;
        *v10 = v28;
      }
      *((_BYTE *)v28 + v12) = 41;
LABEL_16:
      v12 = v25;
      goto LABEL_17;
    }
    v22 = (_QWORD *)*v20;
    v23 = *(unsigned __int16 *)(*v20 + 40);
    if ((v23 & 0xFFFFFFF7) > 7)
    {
      v24 = 0;
      if ((v21 & 1) != 0)
        goto LABEL_41;
    }
    else
    {
      v24 = binding_str[v23 & 0xFFFFFFFFFFFFFFF7];
      if ((v21 & 1) != 0)
        goto LABEL_41;
    }
    v29 = *((unsigned __int16 *)v20 + 4);
    v30 = *((_DWORD *)v20 + 3);
    if (v22[1] || *v22)
    {
      v31 = 3;
      if (v24 < v29)
        v31 = 5;
      v32 = v203;
      if (v31 + v19 <= v203)
      {
        if (v24 < v29)
          goto LABEL_48;
      }
      else
      {
        v32 = 2 * v203;
        if (p_ptr != &__ptr)
        {
          p_ptr = reallocf(p_ptr, 32 * v203);
          if (v24 >= v29)
            goto LABEL_37;
LABEL_48:
          v39 = &p_ptr[2 * v19];
          *v39 = 0;
          *((_DWORD *)v39 + 2) = 0x40000;
          v19 = v15;
          v33 = v22[1];
          if (!v33)
            goto LABEL_39;
          goto LABEL_38;
        }
        v50 = malloc_type_malloc(32 * v203, 0x10200403A5D3213uLL);
        memcpy(v50, &__ptr, 16 * v19);
        p_ptr = v50;
        if (v24 < v29)
          goto LABEL_48;
      }
LABEL_37:
      v33 = v22[1];
      if (!v33)
      {
LABEL_39:
        v35 = &p_ptr[2 * v19];
        *v35 = v22;
        *((_WORD *)v35 + 4) = v29;
        *((_WORD *)v35 + 5) = v21 | 1;
        *((_DWORD *)v35 + 3) = v30;
        if (*v22)
        {
          v36 = &p_ptr[2 * v19 + 2];
          *v36 = *v22;
          *((_WORD *)v36 + 4) = v24;
          *((_WORD *)v36 + 5) = 0;
          v19 += 2;
        }
        else
        {
          ++v19;
        }
        if (v24 < v29)
        {
          v40 = &p_ptr[2 * v19];
          *v40 = 0;
          *((_DWORD *)v40 + 2) = 0x20000;
          ++v19;
        }
        v203 = v32;
        v10 = v204;
        goto LABEL_17;
      }
LABEL_38:
      v34 = &p_ptr[2 * v19];
      *v34 = v33;
      *((_WORD *)v34 + 4) = v24;
      *((_WORD *)v34 + 5) = 0;
      ++v19;
      goto LABEL_39;
    }
LABEL_41:
    switch(*(_WORD *)(*v20 + 40))
    {
      case 1:
        v25 = v12 + 2;
        v10 = v204;
        if (v12 + 2 <= size)
        {
          v38 = (char *)*v204;
        }
        else
        {
          do
            v18 *= 2;
          while (v25 > v18);
          size = v18;
          v37 = p_ptr;
          v38 = (char *)malloc_type_realloc(*v204, v18, 0x69244CAuLL);
          p_ptr = v37;
          *v204 = v38;
        }
        *(_WORD *)&v38[v12] = 31868;
        goto LABEL_16;
      case 2:
        v25 = v12 + 2;
        v10 = v204;
        if (v12 + 2 <= size)
        {
          v42 = (char *)*v204;
        }
        else
        {
          do
            v18 *= 2;
          while (v25 > v18);
          size = v18;
          v41 = p_ptr;
          v42 = (char *)malloc_type_realloc(*v204, v18, 0x69244CAuLL);
          p_ptr = v41;
          *v204 = v42;
        }
        *(_WORD *)&v42[v12] = 9766;
        goto LABEL_16;
      case 4:
        v43 = v22[2];
        v10 = v204;
        switch(*(_DWORD *)(v43 + 24))
        {
          case 0xB:
            goto LABEL_90;
          case 0xC:
            if (v12 + 1 <= size)
            {
              v45 = *v204;
            }
            else
            {
              do
                v18 *= 2;
              while (v12 + 1 > v18);
              size = v18;
              v44 = p_ptr;
              v45 = malloc_type_realloc(*v204, v18, 0x69244CAuLL);
              p_ptr = v44;
              *v204 = v45;
            }
            *((_BYTE *)v45 + v12) = 33;
            v18 = size;
            ++v12;
LABEL_90:
            if (v12 + 8 <= v18)
            {
              v64 = p_ptr;
              v65 = (char *)*v204;
            }
            else
            {
              do
                v18 *= 2;
              while (v12 + 8 > v18);
              v64 = p_ptr;
              size = v18;
              v65 = (char *)malloc_type_realloc(*v204, v18, 0x69244CAuLL);
              *v204 = v65;
            }
            *(_QWORD *)&v65[v12] = 0x2865676E61526E49;
            v66 = render_field_name(v43, v204, v12 + 8, &size, v205);
            v67 = v66 + 1;
            v68 = size;
            if (v66 + 1 <= size)
            {
              v69 = *v204;
            }
            else
            {
              do
                v68 *= 2;
              while (v67 > v68);
              size = v68;
              v69 = malloc_type_realloc(*v204, v68, 0x69244CAuLL);
              *v204 = v69;
            }
            *((_BYTE *)v69 + v66) = 44;
            v70 = **(const char ***)(v43 + 168);
            v71 = strlen(v70);
            v72 = v71 + v67;
            v73 = size;
            if (v71 + v67 <= size)
            {
              v74 = (char *)*v204;
            }
            else
            {
              do
                v73 *= 2;
              while (v72 > v73);
              size = v73;
              v74 = (char *)malloc_type_realloc(*v204, v73, 0x69244CAuLL);
              *v204 = v74;
            }
            memcpy(&v74[v67], v70, v71);
            v75 = v72 + 1;
            v76 = size;
            if (v72 + 1 <= size)
            {
              v77 = *v204;
            }
            else
            {
              do
                v76 *= 2;
              while (v75 > v76);
              size = v76;
              v77 = malloc_type_realloc(*v204, v76, 0x69244CAuLL);
              *v204 = v77;
            }
            *((_BYTE *)v77 + v72) = 44;
            v78 = *(const char **)(*(_QWORD *)(v43 + 168) + 8);
            v79 = strlen(v78);
            v80 = v79 + v75;
            v81 = size;
            if (v79 + v75 <= size)
            {
              v82 = (char *)*v204;
            }
            else
            {
              do
                v81 *= 2;
              while (v80 > v81);
              size = v81;
              v82 = (char *)malloc_type_realloc(*v204, v81, 0x69244CAuLL);
              *v204 = v82;
            }
            memcpy(&v82[v75], v78, v79);
            v12 = v80 + 1;
            v83 = size;
            if (v80 + 1 <= size)
            {
              v84 = *v204;
            }
            else
            {
              do
                v83 *= 2;
              while (v12 > v83);
              size = v83;
              v84 = malloc_type_realloc(*v204, v83, 0x69244CAuLL);
              *v204 = v84;
            }
            p_ptr = v64;
            *((_BYTE *)v84 + v80) = 41;
            goto LABEL_17;
          case 0xD:
            goto LABEL_121;
          case 0xE:
            if (v12 + 1 <= size)
            {
              v61 = *v204;
            }
            else
            {
              do
                v18 *= 2;
              while (v12 + 1 > v18);
              size = v18;
              v60 = p_ptr;
              v61 = malloc_type_realloc(*v204, v18, 0x69244CAuLL);
              p_ptr = v60;
              *v204 = v61;
            }
            *((_BYTE *)v61 + v12) = 33;
            v18 = size;
            ++v12;
LABEL_121:
            if (v12 + 11 <= v18)
            {
              v52 = p_ptr;
              v87 = (char *)*v204;
            }
            else
            {
              do
                v18 *= 2;
              while (v12 + 11 > v18);
              v52 = p_ptr;
              size = v18;
              v87 = (char *)malloc_type_realloc(*v204, v18, 0x69244CAuLL);
              *v204 = v87;
            }
            v88 = &v87[v12];
            *(_QWORD *)v88 = *(_QWORD *)"FieldMatch(";
            *(_DWORD *)(v88 + 7) = 677929844;
            v89 = render_field_name(v43, v204, v12 + 11, &size, v205);
            v90 = v89 + 1;
            v91 = size;
            if (v89 + 1 <= size)
            {
              v92 = *v204;
            }
            else
            {
              do
                v91 *= 2;
              while (v90 > v91);
              size = v91;
              v92 = malloc_type_realloc(*v204, v91, 0x69244CAuLL);
              *v204 = v92;
            }
            *((_BYTE *)v92 + v89) = 44;
            if (*(int *)(v43 + 40) >= 1)
            {
              v93 = 0;
              do
              {
                if (v93)
                {
                  v95 = size;
                  if (v90 + 1 <= size)
                  {
                    v96 = *v204;
                  }
                  else
                  {
                    do
                      v95 *= 2;
                    while (v90 + 1 > v95);
                    size = v95;
                    v96 = malloc_type_realloc(*v204, v95, 0x69244CAuLL);
                    *v204 = v96;
                  }
                  *((_BYTE *)v96 + v90++) = 44;
                }
                v97 = size;
                if (v90 + 1 <= size)
                {
                  v98 = v204;
                  v99 = *v204;
                }
                else
                {
                  do
                    v97 *= 2;
                  while (v90 + 1 > v97);
                  size = v97;
                  v98 = v204;
                  v99 = malloc_type_realloc(*v204, v97, 0x69244CAuLL);
                  *v204 = v99;
                }
                *((_BYTE *)v99 + v90) = 34;
                v100 = render_string_protecting_char(*(const char **)(*(_QWORD *)(v43 + 168) + 8 * v93), v98, v90 + 1, &size);
                v90 = v100 + 1;
                v101 = size;
                if (v100 + 1 <= size)
                {
                  v94 = *v204;
                }
                else
                {
                  do
                    v101 *= 2;
                  while (v90 > v101);
                  size = v101;
                  v94 = malloc_type_realloc(*v204, v101, 0x69244CAuLL);
                  *v204 = v94;
                }
                *((_BYTE *)v94 + v100) = 34;
                ++v93;
              }
              while (v93 < *(int *)(v43 + 40));
            }
            v12 = v90 + 1;
            v102 = size;
            if (v90 + 1 <= size)
            {
              v10 = v204;
              v103 = *v204;
            }
            else
            {
              do
                v102 *= 2;
              while (v12 > v102);
              size = v102;
              v10 = v204;
              v103 = malloc_type_realloc(*v204, v102, 0x69244CAuLL);
              *v204 = v103;
            }
            goto LABEL_150;
          case 0xF:
            if (v12 + 9 <= size)
            {
              v62 = p_ptr;
              v63 = (char *)*v204;
            }
            else
            {
              do
                v18 *= 2;
              while (v12 + 9 > v18);
              v62 = p_ptr;
              size = v18;
              v63 = (char *)malloc_type_realloc(*v204, v18, 0x69244CAuLL);
              *v204 = v63;
            }
            v104 = &v63[v12];
            *(_QWORD *)v104 = *(_QWORD *)"aNN.data(";
            v104[8] = 40;
            v105 = render_field_name(v43, v204, v12 + 9, &size, v205);
            v106 = v105 + 3;
            v107 = size;
            if (v105 + 3 <= size)
            {
              v108 = (char *)*v204;
            }
            else
            {
              do
                v107 *= 2;
              while (v106 > v107);
              size = v107;
              v108 = (char *)malloc_type_realloc(*v204, v107, 0x69244CAuLL);
              *v204 = v108;
            }
            v112 = &v108[v105];
            v112[2] = 44;
            *(_WORD *)v112 = 12332;
            v215 = 0u;
            v216 = 0u;
            v213 = 0u;
            v214 = 0u;
            v211 = 0u;
            v212 = 0u;
            *(_OWORD *)__str = 0u;
            v210 = 0u;
            snprintf(__str, 0x80uLL, "%u", (*(_DWORD *)(v43 + 60) >> 4) & 0xFFFFF);
            v113 = strlen(__str);
            v114 = v113 + v106;
            v115 = size;
            if (v113 + v106 <= size)
            {
              v116 = (char *)*v204;
            }
            else
            {
              do
                v115 *= 2;
              while (v114 > v115);
              size = v115;
              v116 = (char *)malloc_type_realloc(*v204, v115, 0x69244CAuLL);
              *v204 = v116;
            }
            memcpy(&v116[v106], __str, v113);
            v118 = v114 + 1;
            v119 = size;
            if (v114 + 1 <= size)
            {
              v120 = *v204;
            }
            else
            {
              do
                v119 *= 2;
              while (v118 > v119);
              size = v119;
              v120 = malloc_type_realloc(*v204, v119, 0x69244CAuLL);
              *v204 = v120;
            }
            *((_BYTE *)v120 + v114) = 44;
            snprintf(__str, 0x80uLL, "%g", *(float *)(v43 + 64));
            v123 = strlen(__str);
            v124 = v123 + v118;
            v125 = size;
            if (v123 + v118 <= size)
            {
              v126 = (char *)*v204;
            }
            else
            {
              do
                v125 *= 2;
              while (v124 > v125);
              size = v125;
              v126 = (char *)malloc_type_realloc(*v204, v125, 0x69244CAuLL);
              *v204 = v126;
            }
            memcpy(&v126[v118], __str, v123);
            v127 = v124 + 1;
            v128 = size;
            if (v124 + 1 <= size)
            {
              v129 = *v204;
            }
            else
            {
              do
                v128 *= 2;
              while (v127 > v128);
              size = v128;
              v129 = malloc_type_realloc(*v204, v128, 0x69244CAuLL);
              *v204 = v129;
            }
            *((_BYTE *)v129 + v124) = 44;
            v130 = v124 + 2;
            v131 = size;
            if ((*(_BYTE *)(v43 + 63) & 1) != 0)
            {
              if (v130 <= size)
              {
                v132 = *v204;
              }
              else
              {
                do
                  v131 *= 2;
                while (v130 > v131);
                size = v131;
                v132 = malloc_type_realloc(*v204, v131, 0x69244CAuLL);
                *v204 = v132;
              }
              v136 = 49;
            }
            else
            {
              if (v130 <= size)
              {
                v132 = *v204;
              }
              else
              {
                do
                  v131 *= 2;
                while (v130 > v131);
                size = v131;
                v132 = malloc_type_realloc(*v204, v131, 0x69244CAuLL);
                *v204 = v132;
              }
              v136 = 48;
            }
            *((_BYTE *)v132 + v127) = v136;
            v12 = v124 + 3;
            v137 = size;
            if (v124 + 3 <= size)
            {
              v138 = *v204;
            }
            else
            {
              do
                v137 *= 2;
              while (v12 > v137);
              size = v137;
              v138 = malloc_type_realloc(*v204, v137, 0x69244CAuLL);
              *v204 = v138;
            }
            p_ptr = v62;
            *((_BYTE *)v138 + v130) = 41;
            v10 = v204;
            goto LABEL_17;
          default:
            v52 = p_ptr;
            v53 = render_field_name(v22[2], v204, v12, &size, v205);
            v54 = *(unsigned int *)(v43 + 24);
            v55 = "bad op";
            if ((v54 - 9) >= 0xFFFFFFF8)
              v55 = off_1E6E37B80[v54];
            v56 = strlen(v55);
            v57 = v56 + v53;
            v58 = size;
            if (v56 + v53 <= size)
            {
              v59 = (char *)*v204;
            }
            else
            {
              do
                v58 *= 2;
              while (v57 > v58);
              size = v58;
              v59 = (char *)malloc_type_realloc(*v204, v58, 0x69244CAuLL);
              *v204 = v59;
            }
            memcpy(&v59[v53], v55, v56);
            v85 = size;
            if (v57 + 1 <= size)
            {
              v10 = v204;
              v86 = *v204;
            }
            else
            {
              do
                v85 *= 2;
              while (v57 + 1 > v85);
              size = v85;
              v10 = v204;
              v86 = malloc_type_realloc(*v204, v85, 0x69244CAuLL);
              *v204 = v86;
            }
            *((_BYTE *)v86 + v57) = 34;
            v109 = render_string_protecting_char(*(const char **)(v43 + 72), v10, v57 + 1, &size);
            v12 = v109 + 1;
            v110 = size;
            if (v109 + 1 <= size)
            {
              v111 = *v10;
            }
            else
            {
              do
                v110 *= 2;
              while (v12 > v110);
              size = v110;
              v111 = malloc_type_realloc(*v10, v110, 0x69244CAuLL);
              *v10 = v111;
            }
            p_ptr = v52;
            *((_BYTE *)v111 + v109) = 34;
            v117 = *(_QWORD *)(v43 + 32);
            if ((v117 & 0x10) != 0)
            {
              v121 = size;
              if (v109 + 2 <= size)
              {
                v122 = *v10;
              }
              else
              {
                do
                  v121 *= 2;
                while (v109 + 2 > v121);
                size = v121;
                v122 = malloc_type_realloc(*v10, v121, 0x69244CAuLL);
                p_ptr = v52;
                *v10 = v122;
              }
              *((_BYTE *)v122 + v12) = 99;
              v117 = *(_QWORD *)(v43 + 32);
              v12 = v109 + 2;
              if ((v117 & 0x800000) == 0)
              {
LABEL_166:
                if ((v117 & 0x20) == 0)
                  goto LABEL_167;
                goto LABEL_216;
              }
            }
            else if ((v117 & 0x800000) == 0)
            {
              goto LABEL_166;
            }
            v133 = v12 + 1;
            v134 = size;
            if (v12 + 1 <= size)
            {
              v135 = *v10;
            }
            else
            {
              do
                v134 *= 2;
              while (v133 > v134);
              size = v134;
              v135 = malloc_type_realloc(*v10, v134, 0x69244CAuLL);
              *v10 = v135;
            }
            *((_BYTE *)v135 + v12) = 102;
            v139 = *(_BYTE *)(v43 + 28);
            __str[0] = (v139 / 0x64u) | 0x30;
            __str[1] = (v139 / 0xAu - 10 * ((unsigned __int16)(26 * (v139 / 0xAu)) >> 8)) | 0x30;
            *(_WORD *)&__str[2] = (v139 % 0xAu) | 0x30;
            v140 = strlen(__str);
            v12 = v140 + v133;
            v141 = size;
            if (v140 + v133 <= size)
            {
              v142 = (char *)*v10;
            }
            else
            {
              do
                v141 *= 2;
              while (v12 > v141);
              size = v141;
              v142 = (char *)malloc_type_realloc(*v10, v141, 0x69244CAuLL);
              *v10 = v142;
            }
            memcpy(&v142[v133], __str, v140);
            v117 = *(_QWORD *)(v43 + 32);
            p_ptr = v52;
            if ((v117 & 0x20) == 0)
            {
LABEL_167:
              if ((v117 & 0x40) == 0)
                goto LABEL_168;
              goto LABEL_221;
            }
LABEL_216:
            v143 = size;
            if (v12 + 1 <= size)
            {
              v144 = *v10;
            }
            else
            {
              do
                v143 *= 2;
              while (v12 + 1 > v143);
              size = v143;
              v144 = malloc_type_realloc(*v10, v143, 0x69244CAuLL);
              p_ptr = v52;
              *v10 = v144;
            }
            *((_BYTE *)v144 + v12) = 100;
            v117 = *(_QWORD *)(v43 + 32);
            ++v12;
            if ((v117 & 0x40) == 0)
            {
LABEL_168:
              if ((v117 & 2) == 0)
                goto LABEL_169;
              goto LABEL_226;
            }
LABEL_221:
            v145 = size;
            if (v12 + 1 <= size)
            {
              v146 = *v10;
            }
            else
            {
              do
                v145 *= 2;
              while (v12 + 1 > v145);
              size = v145;
              v146 = malloc_type_realloc(*v10, v145, 0x69244CAuLL);
              p_ptr = v52;
              *v10 = v146;
            }
            *((_BYTE *)v146 + v12) = 119;
            v117 = *(_QWORD *)(v43 + 32);
            ++v12;
            if ((v117 & 2) == 0)
            {
LABEL_169:
              if ((v117 & 4) == 0)
                goto LABEL_170;
              goto LABEL_231;
            }
LABEL_226:
            v147 = size;
            if (v12 + 1 <= size)
            {
              v148 = *v10;
            }
            else
            {
              do
                v147 *= 2;
              while (v12 + 1 > v147);
              size = v147;
              v148 = malloc_type_realloc(*v10, v147, 0x69244CAuLL);
              p_ptr = v52;
              *v10 = v148;
            }
            *((_BYTE *)v148 + v12) = 114;
            v117 = *(_QWORD *)(v43 + 32);
            ++v12;
            if ((v117 & 4) == 0)
            {
LABEL_170:
              if ((v117 & 8) == 0)
                goto LABEL_171;
              goto LABEL_236;
            }
LABEL_231:
            v149 = size;
            if (v12 + 1 <= size)
            {
              v150 = *v10;
            }
            else
            {
              do
                v149 *= 2;
              while (v12 + 1 > v149);
              size = v149;
              v150 = malloc_type_realloc(*v10, v149, 0x69244CAuLL);
              p_ptr = v52;
              *v10 = v150;
            }
            *((_BYTE *)v150 + v12) = 116;
            v117 = *(_QWORD *)(v43 + 32);
            ++v12;
            if ((v117 & 8) == 0)
            {
LABEL_171:
              if ((v117 & 0x1000000) == 0)
                goto LABEL_246;
LABEL_241:
              v153 = size;
              if (v12 + 1 <= size)
              {
                v154 = *v10;
              }
              else
              {
                do
                  v153 *= 2;
                while (v12 + 1 > v153);
                size = v153;
                v154 = malloc_type_realloc(*v10, v153, 0x69244CAuLL);
                p_ptr = v52;
                *v10 = v154;
              }
              *((_BYTE *)v154 + v12++) = 115;
              goto LABEL_246;
            }
LABEL_236:
            v151 = size;
            if (v12 + 1 <= size)
            {
              v152 = *v10;
            }
            else
            {
              do
                v151 *= 2;
              while (v12 + 1 > v151);
              size = v151;
              v152 = malloc_type_realloc(*v10, v151, 0x69244CAuLL);
              p_ptr = v52;
              *v10 = v152;
            }
            *((_BYTE *)v152 + v12++) = 106;
            if ((*(_QWORD *)(v43 + 32) & 0x1000000) != 0)
              goto LABEL_241;
LABEL_246:
            if (*(float *)(v43 + 52) != 0.0 || *(float *)(v43 + 56) != 0.0)
            {
              v215 = 0u;
              v216 = 0u;
              v213 = 0u;
              v214 = 0u;
              v211 = 0u;
              v212 = 0u;
              *(_OWORD *)__str = 0u;
              v210 = 0u;
              v155 = v12 + 2;
              v156 = size;
              if (v12 + 2 <= size)
              {
                v157 = (char *)*v10;
              }
              else
              {
                do
                  v156 *= 2;
                while (v155 > v156);
                size = v156;
                v157 = (char *)malloc_type_realloc(*v10, v156, 0x69244CAuLL);
                *v10 = v157;
              }
              *(_WORD *)&v157[v12] = 10327;
              snprintf(__str, 0x80uLL, "%.6g", *(float *)(v43 + 52));
              v158 = strlen(__str);
              v159 = v158 + v155;
              v160 = size;
              if (v158 + v155 <= size)
              {
                v161 = (char *)*v10;
              }
              else
              {
                do
                  v160 *= 2;
                while (v159 > v160);
                size = v160;
                v161 = (char *)malloc_type_realloc(*v10, v160, 0x69244CAuLL);
                *v10 = v161;
              }
              memcpy(&v161[v155], __str, v158);
              if (*(float *)(v43 + 56) != 0.0)
              {
                v162 = v159 + 1;
                v163 = size;
                if (v159 + 1 <= size)
                {
                  v164 = *v10;
                }
                else
                {
                  do
                    v163 *= 2;
                  while (v162 > v163);
                  size = v163;
                  v164 = malloc_type_realloc(*v10, v163, 0x69244CAuLL);
                  *v10 = v164;
                }
                *((_BYTE *)v164 + v159) = 44;
                snprintf(__str, 0x80uLL, "%.6g", *(float *)(v43 + 56));
                v165 = strlen(__str);
                v159 = v165 + v162;
                v166 = size;
                if (v165 + v162 <= size)
                {
                  v167 = (char *)*v10;
                }
                else
                {
                  do
                    v166 *= 2;
                  while (v159 > v166);
                  size = v166;
                  v167 = (char *)malloc_type_realloc(*v10, v166, 0x69244CAuLL);
                  *v10 = v167;
                }
                memcpy(&v167[v162], __str, v165);
              }
              v12 = v159 + 1;
              v168 = size;
              if (v159 + 1 <= size)
              {
                v169 = *v10;
              }
              else
              {
                do
                  v168 *= 2;
                while (v12 > v168);
                size = v168;
                v169 = malloc_type_realloc(*v10, v168, 0x69244CAuLL);
                *v10 = v169;
              }
              p_ptr = v52;
              *((_BYTE *)v169 + v159) = 41;
            }
            if (*(_DWORD *)(v43 + 60))
            {
              v215 = 0u;
              v216 = 0u;
              v213 = 0u;
              v214 = 0u;
              v211 = 0u;
              v212 = 0u;
              *(_OWORD *)__str = 0u;
              v210 = 0u;
              v170 = v12 + 2;
              v171 = size;
              if (v12 + 2 <= size)
              {
                v172 = (char *)*v10;
              }
              else
              {
                do
                  v171 *= 2;
                while (v170 > v171);
                size = v171;
                v172 = (char *)malloc_type_realloc(*v10, v171, 0x69244CAuLL);
                *v10 = v172;
              }
              *(_WORD *)&v172[v12] = 10316;
              snprintf(__str, 0x80uLL, "%u", *(_DWORD *)(v43 + 60));
              v173 = strlen(__str);
              v174 = v173 + v170;
              v175 = size;
              if (v173 + v170 <= size)
              {
                v176 = (char *)*v10;
              }
              else
              {
                do
                  v175 *= 2;
                while (v174 > v175);
                size = v175;
                v176 = (char *)malloc_type_realloc(*v10, v175, 0x69244CAuLL);
                *v10 = v176;
              }
              memcpy(&v176[v170], __str, v173);
              v12 = v174 + 1;
              v177 = size;
              if (v174 + 1 <= size)
              {
                v178 = *v10;
              }
              else
              {
                do
                  v177 *= 2;
                while (v12 > v177);
                size = v177;
                v178 = malloc_type_realloc(*v10, v177, 0x69244CAuLL);
                *v10 = v178;
              }
              p_ptr = v52;
              *((_BYTE *)v178 + v174) = 41;
            }
            v179 = *(_QWORD *)(v43 + 32) & 0x6000000000;
            if (v179)
            {
              if (v179 == 0x2000000000)
              {
                v180 = v12 + 1;
                v184 = size;
                if (v12 + 1 <= size)
                {
                  v182 = *v10;
                  v183 = 110;
                }
                else
                {
                  do
                    v184 *= 2;
                  while (v180 > v184);
                  size = v184;
                  v182 = malloc_type_realloc(*v10, v184, 0x69244CAuLL);
                  p_ptr = v52;
                  *v10 = v182;
                  v183 = 110;
                }
              }
              else
              {
                v180 = v12 + 1;
                if (v179 == 0x6000000000)
                {
                  v181 = size;
                  if (v180 <= size)
                  {
                    v182 = *v10;
                    v183 = 97;
                  }
                  else
                  {
                    do
                      v181 *= 2;
                    while (v180 > v181);
                    size = v181;
                    v182 = malloc_type_realloc(*v10, v181, 0x69244CAuLL);
                    p_ptr = v52;
                    *v10 = v182;
                    v183 = 97;
                  }
                }
                else
                {
                  v185 = size;
                  if (v180 <= size)
                  {
                    v182 = *v10;
                  }
                  else
                  {
                    do
                      v185 *= 2;
                    while (v180 > v185);
                    size = v185;
                    v182 = malloc_type_realloc(*v10, v185, 0x69244CAuLL);
                    p_ptr = v52;
                    *v10 = v182;
                  }
                  v183 = 111;
                }
              }
              *((_BYTE *)v182 + v12) = v183;
              if (*(_DWORD *)(v43 + 96))
              {
                v211 = 0u;
                v212 = 0u;
                *(_OWORD *)__str = 0u;
                v210 = 0u;
                v186 = v180 + 1;
                v187 = size;
                if (v180 + 1 <= size)
                {
                  v188 = *v10;
                }
                else
                {
                  do
                    v187 *= 2;
                  while (v186 > v187);
                  size = v187;
                  v188 = malloc_type_realloc(*v10, v187, 0x69244CAuLL);
                  *v10 = v188;
                }
                *((_BYTE *)v188 + v180) = 40;
                snprintf(__str, 0x40uLL, "%d", **(_DWORD **)(v43 + 88));
                v189 = strlen(__str);
                v90 = v189 + v186;
                v190 = size;
                if (v189 + v186 <= size)
                {
                  v191 = (char *)*v10;
                }
                else
                {
                  do
                    v190 *= 2;
                  while (v90 > v190);
                  size = v190;
                  v191 = (char *)malloc_type_realloc(*v10, v190, 0x69244CAuLL);
                  *v10 = v191;
                }
                memcpy(&v191[v186], __str, v189);
                if (*(_DWORD *)(v43 + 96) >= 2u)
                {
                  v192 = 1;
                  do
                  {
                    v194 = v90 + 1;
                    v195 = size;
                    if (v90 + 1 <= size)
                    {
                      v196 = *v10;
                    }
                    else
                    {
                      do
                        v195 *= 2;
                      while (v194 > v195);
                      size = v195;
                      v196 = malloc_type_realloc(*v10, v195, 0x69244CAuLL);
                      *v10 = v196;
                    }
                    *((_BYTE *)v196 + v90) = 44;
                    snprintf(__str, 0x40uLL, "%d", *(_DWORD *)(*(_QWORD *)(v43 + 88) + 4 * v192));
                    v197 = strlen(__str);
                    v90 = v197 + v194;
                    v198 = size;
                    if (v197 + v194 <= size)
                    {
                      v193 = (char *)*v10;
                    }
                    else
                    {
                      do
                        v198 *= 2;
                      while (v90 > v198);
                      size = v198;
                      v193 = (char *)malloc_type_realloc(*v10, v198, 0x69244CAuLL);
                      *v10 = v193;
                    }
                    memcpy(&v193[v194], __str, v197);
                    ++v192;
                  }
                  while (v192 < *(unsigned int *)(v43 + 96));
                }
                v12 = v90 + 1;
                v199 = size;
                if (v90 + 1 <= size)
                {
                  v103 = *v10;
                }
                else
                {
                  do
                    v199 *= 2;
                  while (v12 > v199);
                  size = v199;
                  v103 = malloc_type_realloc(*v10, v199, 0x69244CAuLL);
                  *v10 = v103;
                }
LABEL_150:
                p_ptr = v52;
                *((_BYTE *)v103 + v90) = 41;
              }
              else
              {
                v12 = v180;
              }
            }
            break;
        }
        break;
      case 0x20:
        v25 = v12 + 4;
        v10 = v204;
        if (v12 + 4 <= size)
        {
          v49 = (char *)*v204;
        }
        else
        {
          do
            v18 *= 2;
          while (v25 > v18);
          size = v18;
          v48 = p_ptr;
          v49 = (char *)malloc_type_realloc(*v204, v18, 0x69244CAuLL);
          p_ptr = v48;
          *v204 = v49;
        }
        *(_DWORD *)&v49[v12] = 1702195828;
        goto LABEL_16;
      default:
        v25 = v12 + 5;
        v10 = v204;
        if (v12 + 5 <= size)
        {
          v47 = (char *)*v204;
        }
        else
        {
          do
            v18 *= 2;
          while (v25 > v18);
          size = v18;
          v46 = p_ptr;
          v47 = (char *)malloc_type_realloc(*v204, v18, 0x69244CAuLL);
          p_ptr = v46;
          *v204 = v47;
        }
        v51 = &v47[v12];
        v51[4] = 101;
        *(_DWORD *)v51 = 1936482662;
        goto LABEL_16;
    }
LABEL_17:
    v15 = v19;
  }
  while (v19);
  if (p_ptr != &__ptr)
    free(p_ptr);
  v14 = v12 + 1;
  v200 = size;
  if (v12 + 1 <= size)
  {
    v201 = *v10;
  }
  else
  {
    do
      v200 *= 2;
    while (v14 > v200);
    size = v200;
    v201 = malloc_type_realloc(*v10, v200, 0x9A84CC8CuLL);
    *v10 = v201;
  }
  *((_BYTE *)v201 + v12) = 0;
  return v14;
}

uint64_t db_node_has_ranking_weights(_QWORD *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  _QWORD v8[5];

  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __db_node_has_ranking_weights_block_invoke;
  v3[3] = &unk_1E6E37B10;
  v3[4] = &v4;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __db_query_tree_apply_block_block_invoke;
  v8[3] = &unk_1E6E377F8;
  v8[4] = v3;
  db_query_tree_apply_block_with_meta(a1, (uint64_t)v8, 0);
  v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

uint64_t __db_node_has_ranking_weights_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v2 + 24))
    return 0;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 && (*(float *)(v4 + 52) != 0.0 || *(float *)(v4 + 56) != 0.0))
  {
    a2 = 0;
    *(_BYTE *)(v2 + 24) = 1;
  }
  return a2;
}

void db_query_enumerate_matched_qps_for_dbo(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void **v7;
  unsigned int v8;
  uint64_t v9;
  void **v10;
  unsigned int v11;
  void **v12;
  uint64_t v13;
  void **v14;
  _QWORD v15[6];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  _QWORD v29[14];
  _BYTE v30[104];
  uint64_t v31;
  _QWORD v32[5];

  v31 = 0;
  memset(&v30[8], 0, 96);
  *(_QWORD *)v30 = 0x400000004;
  memset(&v29[1], 0, 104);
  v29[0] = 0x400000004;
  v15[0] = MEMORY[0x1E0C809B0];
  v15[1] = 0x40000000;
  v15[2] = __db_query_enumerate_matched_qps_for_dbo_block_invoke;
  v15[3] = &unk_1E6E37B38;
  v15[4] = a6;
  v15[5] = a7;
  v17 = *(_OWORD *)&v30[16];
  v16 = *(_OWORD *)v30;
  v22 = 0uLL;
  v21 = *(_OWORD *)&v30[80];
  v20 = *(_OWORD *)&v30[64];
  v18 = *(_OWORD *)&v30[32];
  v19 = *(_OWORD *)&v30[48];
  v7 = (void **)&v30[16];
  v23 = a3;
  v24 = a1;
  v25 = a4;
  v26 = a5;
  v27 = v30;
  v28 = v29;
  v32[0] = MEMORY[0x1E0C809B0];
  v32[1] = 0x40000000;
  v32[2] = __db_query_tree_apply_block_block_invoke;
  v32[3] = &unk_1E6E377F8;
  v32[4] = v15;
  db_query_tree_apply_block_with_meta(a2, (uint64_t)v32, 0);
  v8 = *(_DWORD *)&v30[4];
  if (*(_DWORD *)&v30[4] >= 5u)
    v7 = *(void ***)&v30[16];
  if ((v30[0] & 1) != 0)
  {
    v9 = *(unsigned int *)&v30[8];
    if (*(_DWORD *)&v30[8])
    {
      v10 = v7 + 2;
      do
      {
        if (*((_DWORD *)v10 - 2) >= 0x41u)
        {
          free(*v10);
          *((_DWORD *)v10 - 1) = 0;
          *v10 = 0;
        }
        v10 += 3;
        --v9;
      }
      while (v9);
      v8 = *(_DWORD *)&v30[4];
    }
  }
  if (v8 >= 5)
    free(v7);
  v11 = HIDWORD(v29[0]);
  if (HIDWORD(v29[0]) >= 5)
    v12 = (void **)v29[2];
  else
    v12 = (void **)&v29[2];
  if ((v29[0] & 1) != 0)
  {
    v13 = LODWORD(v29[1]);
    if (LODWORD(v29[1]))
    {
      v14 = v12 + 2;
      do
      {
        if (*((_DWORD *)v14 - 2) >= 0x41u)
        {
          free(*v14);
          *((_DWORD *)v14 - 1) = 0;
          *v14 = 0;
        }
        v14 += 3;
        --v13;
      }
      while (v13);
      v11 = HIDWORD(v29[0]);
    }
  }
  if (v11 >= 5)
    free(v12);
}

uint64_t __db_query_enumerate_matched_qps_for_dbo_block_invoke(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13[3];

  if (*(_QWORD *)(a2 + 16))
  {
    v4 = (*(uint64_t (**)(void))(a1[4] + 16))();
    v5 = *(_QWORD *)(a2 + 16);
    if ((*(_BYTE *)(v5 + 36) & 4) != 0)
      v6 = 2;
    else
      v6 = v4;
    if (v6 == 2)
    {
      v13[1] = 0;
      v13[2] = 0;
      v7 = a1[21];
      v8 = a1[22];
      v9 = a1[23];
      v10 = a1[24];
      v12 = a1[25];
      v13[0] = a1[20];
      if (compare_file_by_dbo(v7, v13, v5, 0, v8, v9, 1, v10, v12) == 1)
        (*(void (**)(void))(a1[5] + 16))();
    }
    else if (v6 == 1)
    {
      (*(void (**)(void))(a1[5] + 16))();
    }
  }
  return a2;
}

void db_query_enumerate_matched_qps_for_dbf(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7;
  void **v8;
  uint64_t v9;
  void **v10;
  _QWORD v11[11];
  _QWORD v12[14];
  _QWORD v13[5];

  memset(&v12[1], 0, 104);
  v12[0] = 0x400000004;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = __db_query_enumerate_matched_qps_for_dbf_block_invoke;
  v11[3] = &unk_1E6E37B60;
  v11[6] = a3;
  v11[7] = a4;
  v11[8] = a5;
  v11[9] = a6;
  v11[4] = a7;
  v11[5] = a1;
  v11[10] = v12;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = __db_query_tree_apply_block_block_invoke;
  v13[3] = &unk_1E6E377F8;
  v13[4] = v11;
  db_query_tree_apply_block_with_meta(a2, (uint64_t)v13, 0);
  v7 = HIDWORD(v12[0]);
  if (HIDWORD(v12[0]) >= 5)
    v8 = (void **)v12[2];
  else
    v8 = (void **)&v12[2];
  if ((v12[0] & 1) != 0)
  {
    v9 = LODWORD(v12[1]);
    if (LODWORD(v12[1]))
    {
      v10 = v8 + 2;
      do
      {
        if (*((_DWORD *)v10 - 2) >= 0x41u)
        {
          free(*v10);
          *((_DWORD *)v10 - 1) = 0;
          *v10 = 0;
        }
        v10 += 3;
        --v9;
      }
      while (v9);
      v7 = HIDWORD(v12[0]);
    }
  }
  if (v7 >= 5)
    free(v8);
}

uint64_t __db_query_enumerate_matched_qps_for_dbf_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16) && _db_compare_val(*(_QWORD *)(a1 + 40)))
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return a2;
}

void _qsort_big_oid_lookups(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  unint64_t i;
  uint64_t v8;
  uint64_t v10;
  host_t v11;
  mach_error_t v12;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  qos_class_t v16;
  NSObject *global_queue;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  qos_class_t v28;
  NSObject *v29;
  qos_class_t v30;
  NSObject *v31;
  char *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD block[5];
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[4];
  __int128 v42;
  __int128 v43;

  v1 = a1[1];
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v37 = a1[6];
  v38 = *a1;
  v6 = *((_DWORD *)a1 + 14);
  v36 = *((_DWORD *)a1 + 15);
  OSAtomicEnqueue(&qsort_cached_allocations, a1, 0);
  if (v2 > v1)
  {
    for (i = v4 + 1; ; ++i)
    {
      v8 = v2 - v1;
      if (v2 - v1 <= v5 || i > 9)
        break;
      if (v6 <= 1)
        v6 = 1;
      v10 = getSize(void)::memSize;
      if (!getSize(void)::memSize)
      {
        v42 = 0u;
        v43 = 0u;
        *(_OWORD *)host_info_out = 0u;
        v11 = MEMORY[0x1BCCB1010]();
        host_info_outCnt = 12;
        v12 = host_info(v11, 1, host_info_out, &host_info_outCnt);
        if (v12)
        {
          mach_error("flushsize", v12);
          exit(1);
        }
        v10 = *((_QWORD *)&v43 + 1);
        getSize(void)::memSize = *((_QWORD *)&v43 + 1);
      }
      v13 = 3 * v10;
      v14 = (v13 * (unsigned __int128)0xCCCCCCCCCCCCCCCDLL) >> 64;
      v15 = v3;
      if (32 * v8 > v13 / 5)
        v15 = dispatch_group_create();
      if (v8 <= v37 || 32 * v8 >= v14 >> 2)
      {
        v18 = _partition_oid_lookups(v38, v1, v2);
      }
      else
      {
        v16 = qos_class_self();
        global_queue = dispatch_get_global_queue(v16, 2uLL);
        v18 = _big_partition_oid_lookups(v38, v1, v2, global_queue, v6);
      }
      v19 = v18;
      v20 = v18 - v1;
      if (v18 < v1)
      {
        v32 = __si_assert_copy_extra_268();
        v33 = v32;
        v34 = "";
        if (v32)
          v34 = v32;
        __message_assert(v32, "sdb2_qsort.cpp", 17, "q>=left", v34);
        free(v33);
        if (__valid_fs(-1))
          v35 = 2989;
        else
          v35 = 3072;
        *(_DWORD *)v35 = -559038737;
        abort();
      }
      v21 = OSAtomicDequeue(&qsort_cached_allocations, 0);
      if (!v21)
        v21 = malloc_type_malloc(0x40uLL, 0x102004053A8A26AuLL);
      *((_QWORD *)v21 + 4) = i;
      *((_QWORD *)v21 + 5) = v5;
      *((_QWORD *)v21 + 6) = v37;
      v22 = v2 - v19;
      if (v20 <= v2 - v19)
      {
        v23 = v19 - 1;
      }
      else
      {
        v22 = v19 - 1 - v1;
        v23 = v2;
      }
      if (v20 > v2 - v19)
        v24 = v19;
      else
        v24 = v1;
      if (v20 > v2 - v19)
        v2 = v19 - 1;
      else
        v1 = v19;
      *(_QWORD *)v21 = v38;
      *((_QWORD *)v21 + 1) = v24;
      v25 = (int)(float)((float)((float)(v22 + 1) / (float)(v23 - v24 + 1)) * (float)v6);
      if (v25 <= 1)
        v26 = 1;
      else
        v26 = v25;
      if (v6 >= v25)
        v27 = v26;
      else
        v27 = 0;
      v21[14] = v6 - v27;
      v21[15] = v36;
      *((_QWORD *)v21 + 2) = v23;
      *((_QWORD *)v21 + 3) = v15;
      if (v15 == v3)
      {
        if (v6 >= v25)
          v6 = v26;
        v30 = qos_class_self();
        v31 = dispatch_get_global_queue(v30, 2uLL);
        dispatch_group_async_f(v3, v31, v21, (dispatch_function_t)_qsort_big_oid_lookups);
      }
      else
      {
        v21[14] = v6;
        _qsort_big_oid_lookups(v21);
        dispatch_group_wait(v15, 0xFFFFFFFFFFFFFFFFLL);
        dispatch_release(v15);
        v28 = qos_class_self();
        v29 = dispatch_get_global_queue(v28, 2uLL);
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 0x40000000;
        block[2] = ___ZL22_qsort_big_oid_lookupsPv_block_invoke;
        block[3] = &__block_descriptor_tmp_8_10979;
        block[4] = v21;
        dispatch_async(v29, block);
      }
      if (v2 <= v1)
        return;
    }
    _qsort_oid_lookups(v38, v1, v2);
  }
}

uint64_t _big_partition_oid_lookups(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, unsigned int a5)
{
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BOOL4 v25;
  BOOL v27;
  _QWORD *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BOOL4 v41;
  BOOL v43;
  BOOL v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _BOOL4 v53;
  BOOL v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _BOOL4 v63;
  BOOL v65;
  BOOL v66;
  __int128 v68;
  __int128 v69[2];

  v7 = a3 - a2;
  v8 = __OFADD__(a3 - a2, 1);
  v9 = a3 - a2 + 1;
  v10 = (_QWORD *)(a1 + 32 * a2);
  v11 = v7 + 2;
  if (((v9 & 0x8000000000000000) != 0) == v8)
    v11 = v7 + 1;
  v12 = &v10[4 * (v11 >> 1)];
  v13 = (_QWORD *)(a1 + 32 * a3);
  if (v7 < 64)
  {
    v28 = (_QWORD *)(a1 + 32 * a3);
    v18 = v10;
    goto LABEL_91;
  }
  v14 = v9 >> 3;
  v15 = &v10[4 * (v9 >> 3)];
  v16 = *v10;
  v17 = *v15;
  v18 = v10;
  if (*v10 == *v15)
    goto LABEL_34;
  v19 = &v10[8 * v14];
  v20 = *v19;
  if (*v19 == v16 || v20 == v17)
  {
    v18 = &v10[8 * v14];
  }
  else
  {
    v22 = v10[2];
    v23 = v15[2];
    v24 = v19[2];
    v25 = v16 < v17;
    if (v22 != v23)
      v25 = 0;
    if (v22 >= v23 && !v25)
    {
      v29 = v17 > v20;
      if (v23 != v24)
        v29 = 0;
      if (v23 <= v24)
      {
        v18 = &v10[4 * (v9 >> 3)];
        if (!v29)
        {
          if (v16 < v20 && v22 == v24 || (v18 = &v10[8 * v14], v22 < v24))
            v18 = v10;
        }
        goto LABEL_34;
      }
    }
    else
    {
      v27 = v17 < v20;
      if (v23 != v24)
        v27 = 0;
      if (v23 >= v24)
      {
        v18 = &v10[4 * (v9 >> 3)];
        if (!v27)
        {
          if (v16 >= v20 || (v18 = &v10[8 * v14], v22 != v24))
          {
            if (v22 < v24)
              v18 = &v10[8 * v14];
            else
              v18 = v10;
          }
        }
        goto LABEL_34;
      }
    }
    v18 = &v10[4 * (v9 >> 3)];
  }
LABEL_34:
  v30 = 2 * v14;
  v31 = -(uint64_t)v14;
  v32 = &v12[-4 * v14];
  v33 = *v32;
  v34 = *v12;
  if (*v32 == *v12)
    goto LABEL_65;
  v35 = &v12[4 * v14];
  v36 = *v35;
  if (*v35 == v33 || v36 == v34)
  {
    v12 = v35;
    goto LABEL_66;
  }
  v38 = v32[2];
  v39 = v12[2];
  v40 = v35[2];
  v41 = v33 < v34;
  if (v38 != v39)
    v41 = 0;
  if (v38 < v39 || v41)
  {
    v43 = v34 < v36;
    if (v39 != v40)
      v43 = 0;
    if (v39 >= v40 && !v43)
    {
      v12 = v38 < v40 ? v35 : v32;
      if (v33 < v36 && v38 == v40)
        v12 = v35;
    }
    goto LABEL_66;
  }
  v45 = v34 > v36;
  if (v39 != v40)
    v45 = 0;
  if (v39 <= v40 && !v45)
  {
    if (v33 < v36 && v38 == v40 || (v12 = v35, v38 < v40))
LABEL_65:
      v12 = v32;
  }
LABEL_66:
  v28 = &v13[-4 * v30];
  v46 = &v13[4 * v31];
  v47 = *v28;
  v48 = *v46;
  if (*v28 == *v46)
    goto LABEL_91;
  v49 = *v13;
  if (*v13 == v47 || v49 == v48)
    goto LABEL_87;
  v50 = v28[2];
  v51 = v46[2];
  v52 = v13[2];
  v53 = v47 < v48;
  if (v50 != v51)
    v53 = 0;
  if (v50 >= v51 && !v53)
  {
    v54 = v48 > v49;
    if (v51 != v52)
      v54 = 0;
    if (v51 <= v52 && !v54)
    {
      if (v47 < v49 && v50 == v52 || v50 < v52)
        goto LABEL_91;
LABEL_87:
      v28 = v13;
      goto LABEL_91;
    }
LABEL_88:
    v28 = v46;
    goto LABEL_91;
  }
  v55 = v48 < v49;
  if (v51 != v52)
    v55 = 0;
  if (v51 < v52 || v55)
    goto LABEL_88;
  if (v47 < v49 && v50 == v52)
    goto LABEL_87;
  if (v50 < v52)
    v28 = v13;
LABEL_91:
  v56 = *v18;
  v57 = *v12;
  if (*v18 == *v12)
    goto LABEL_116;
  v58 = *v28;
  if (*v28 == v56 || v58 == v57)
    goto LABEL_108;
  v60 = v18[2];
  v61 = v12[2];
  v62 = v28[2];
  v63 = v56 < v57;
  if (v60 != v61)
    v63 = 0;
  if (v60 >= v61 && !v63)
  {
    v66 = v57 > v58;
    if (v61 != v62)
      v66 = 0;
    if (v61 > v62 || v66)
      goto LABEL_120;
    if (v56 >= v58 || v60 != v62)
    {
      v12 = v28;
      if (v60 >= v62)
        goto LABEL_120;
    }
LABEL_116:
    v12 = v18;
    goto LABEL_120;
  }
  v65 = v57 < v58;
  if (v61 != v62)
    v65 = 0;
  if (v61 >= v62 && !v65)
  {
    if (v56 < v58 && v60 == v62)
    {
LABEL_108:
      v12 = v28;
      goto LABEL_120;
    }
    if (v60 < v62)
      v12 = v28;
    else
      v12 = v18;
  }
LABEL_120:
  v68 = *((_OWORD *)v12 + 1);
  v69[0] = *(_OWORD *)v12;
  v69[1] = v68;
  return parallel_partition_oid_lookups(v10, v9, v69, a4, a5) + a2;
}

void ___ZL22_qsort_big_oid_lookupsPv_block_invoke(uint64_t a1)
{
  madvise((void *)(**(_QWORD **)(a1 + 32) + 32 * *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)), 32 * (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) - *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8)), 4);
  OSAtomicEnqueue(&qsort_cached_allocations, *(void **)(a1 + 32), 0);
}

uint64_t parallel_partition_oid_lookups(void *a1, uint64_t a2, __int128 *a3, NSObject *a4, unsigned int a5)
{
  int v5;
  size_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD context[7];
  __int128 v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v5 = a5;
  v23 = *MEMORY[0x1E0C80C00];
  context[6] = a1;
  v10 = 8 * a5;
  MEMORY[0x1E0C80A78](a1);
  v12 = (char *)&context[-1] - v11;
  bzero((char *)&context[-1] - v11, v10);
  v13 = a3[1];
  v20 = *a3;
  v21 = v13;
  v22 = v12;
  v14 = (a2 / 0x4000) << 13;
  v15 = a2 - v14;
  context[1] = v14;
  context[2] = a2;
  context[4] = 0;
  context[5] = 0;
  if (v5 >= 1)
    memset(v12, 255, v10);
  v16 = v14 + 0x2000;
  if (v15 > v14 + 0x2000)
    v16 = a2 - ((a2 / 0x4000) << 13);
  context[3] = v15 + ((v16 - v15 + 0x1FFF) & 0xFFFFFFFFFFFFE000);
  context[0] = 0;
  if (32 * a2 >= (unint64_t)(4 * *MEMORY[0x1E0C85AD8]))
    madvise(a1, 32 * a2, 3);
  if (a2 / 0x4000 < v5)
    v5 = a2 / 0x4000;
  dispatch_apply_f(v5, a4, context, (void (__cdecl *)(void *, size_t))partition_phase_oid_lookups);
  return sequential_fixup_oid_lookups((uint64_t)context, a2, v5);
}

unint64_t *partition_phase_oid_lookups(unint64_t *result, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _OWORD *v17;
  __int128 v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  uint64_t v30;

  v3 = result;
  v4 = result[6];
  v5 = result[1];
  if ((uint64_t)*result >= v5)
    goto LABEL_5;
  do
    v6 = __ldxr(result);
  while (__stxr(v6 + 0x2000, result));
  if ((uint64_t)(v6 + 0x2000) > v5)
  {
    do
      v7 = __ldxr(result);
    while (__stxr(v7 - 0x2000, result));
LABEL_5:
    v6 = -1;
  }
  v8 = result[3];
  v9 = result + 2;
  if ((uint64_t)result[2] <= v8)
  {
LABEL_10:
    v13 = 0;
    if (v6 != -1)
    {
      v14 = 0;
      goto LABEL_36;
    }
    v11 = -1;
    v14 = 0;
LABEL_35:
    v6 = v11;
    goto LABEL_36;
  }
  do
  {
    v10 = __ldxr(v9);
    v11 = v10 - 0x2000;
  }
  while (__stxr(v10 - 0x2000, v9));
  if (v11 < v8)
  {
    do
      v12 = __ldxr(v9);
    while (__stxr(v12 + 0x2000, v9));
    goto LABEL_10;
  }
  v29 = 0;
  v30 = 0;
  v15 = v6 != -1;
  if (v10 != 0x1FFF && v6 != -1)
  {
    v13 = 0;
    v14 = 0;
    v17 = result + 7;
    while (1)
    {
      v18 = *(_OWORD *)(v3 + 9);
      v28[0] = *v17;
      v28[1] = v18;
      result = (unint64_t *)neutralize_oid_lookups(v4 + 32 * v6, v4 + 32 * v11, v28, &v30, &v29);
      if ((result & 1) != 0)
        goto LABEL_26;
      v19 = v3[1];
      if ((uint64_t)*v3 >= v19)
        goto LABEL_24;
      do
        v6 = __ldxr(v3);
      while (__stxr(v6 + 0x2000, v3));
      if ((uint64_t)(v6 + 0x2000) > v19)
        break;
LABEL_25:
      v30 = 0;
      ++v14;
      if (((_DWORD)result - 1) > 1)
        goto LABEL_32;
LABEL_26:
      v21 = v3[3];
      if ((uint64_t)v3[2] > v21)
      {
        do
        {
          v22 = __ldxr(v9);
          v11 = v22 - 0x2000;
        }
        while (__stxr(v22 - 0x2000, v9));
        if (v11 >= v21)
          goto LABEL_31;
        do
          v23 = __ldxr(v9);
        while (__stxr(v23 + 0x2000, v9));
      }
      v11 = -1;
LABEL_31:
      v29 = 0;
      ++v13;
LABEL_32:
      v15 = v6 != -1;
      if (v11 == -1 || v6 == -1)
        goto LABEL_34;
    }
    do
      v20 = __ldxr(v3);
    while (__stxr(v20 - 0x2000, v3));
LABEL_24:
    v6 = -1;
    goto LABEL_25;
  }
  v14 = 0;
  v13 = 0;
LABEL_34:
  if (!v15)
    goto LABEL_35;
LABEL_36:
  *(_QWORD *)(v3[11] + 8 * a2) = v6;
  v24 = v3 + 4;
  do
    v25 = __ldxr(v24);
  while (__stxr(v25 + (v14 << 13), v24));
  v26 = v3 + 5;
  do
    v27 = __ldxr(v26);
  while (__stxr(v27 + (v13 << 13), v26));
  return result;
}

uint64_t sequential_fixup_oid_lookups(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  const char *v57;
  uint64_t v58;
  _OWORD v59[2];
  uint64_t v60;
  uint64_t v61;

  v6 = a3;
  qsort(*(void **)(a1 + 88), a3, 8uLL, (int (__cdecl *)(const void *, const void *))index_comp);
  v61 = 0;
  v60 = 0;
  v7 = *(_QWORD *)(a1 + 88);
  v8 = a3 - 1;
  v9 = 0;
  if (a3 < 1)
    goto LABEL_99;
  while (*(_QWORD *)(v7 + 8 * v9) == -1)
  {
    if (v6 == ++v9)
    {
      v9 = v6;
      break;
    }
  }
  if (a3 == 1)
  {
    v8 = 0;
  }
  else
  {
LABEL_99:
    do
    {
      if (*(_QWORD *)(v7 + 8 * v8) != -1)
        break;
      --v8;
    }
    while (v8);
  }
  while (v9 < v8)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(v7 + 8 * v9);
    v12 = *(_OWORD *)(a1 + 72);
    v13 = v10 + 32 * *(_QWORD *)(v7 + 8 * v8);
    v59[0] = *(_OWORD *)(a1 + 56);
    v59[1] = v12;
    v14 = neutralize_oid_lookups(v10 + 32 * v11, v13, v59, &v60, &v61);
    v7 = *(_QWORD *)(a1 + 88);
    if ((v14 & 1) == 0)
    {
      v15 = *(_QWORD *)(v7 + 8 * v9);
      if ((v15 & 0x8000000000000000) == 0 && v15 < *(_QWORD *)(a1 + 32))
      {
        *(_QWORD *)(v7 + 8 * v9) = -1;
        *(_QWORD *)(a1 + 32) += 0x2000;
      }
      ++v9;
      v60 = 0;
      if ((v14 - 1) > 1)
        continue;
    }
    v16 = *(_QWORD *)(v7 + 8 * v8);
    v17 = v16 >= a2 || v16 < a2 - *(_QWORD *)(a1 + 40);
    if (!v17)
    {
      *(_QWORD *)(v7 + 8 * v8) = -1;
      *(_QWORD *)(a1 + 40) += 0x2000;
    }
    --v8;
    v61 = 0;
  }
  v19 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v20 = malloc_type_malloc(0x40000uLL, 0x9C7ED328uLL);
  if (a3 < 1)
  {
    v35 = *(_QWORD *)a1;
    v36 = *(_QWORD *)(a1 + 16) - 1;
  }
  else
  {
    v21 = 0;
    v22 = ~v18 + a2;
    v23 = a3;
    v24 = *(uint64_t **)(a1 + 88);
    v25 = 8 * a3;
    do
    {
      v26 = v24[v21];
      if (v26 != -1 && v22 <= v26)
        break;
      if (v26 != -1)
      {
        if (v19 <= v26)
          break;
        v28 = *(_QWORD *)(a1 + 32);
        if (v28 > v26)
        {
          v29 = 0;
          do
          {
            if (v24[v29 / 8] == v28)
            {
              v28 += 0x2000;
              *(_QWORD *)(a1 + 32) = v28;
            }
            v29 += 8;
          }
          while (v25 != v29);
          if ((int64_t)v28 >= *(_QWORD *)a1)
            break;
          memcpy(v20, (const void *)(*(_QWORD *)(a1 + 48) + 32 * v24[v21]), 0x40000uLL);
          memcpy((void *)(*(_QWORD *)(a1 + 48) + 32 * *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v21)), (const void *)(*(_QWORD *)(a1 + 48) + 32 * *(_QWORD *)(a1 + 32)), 0x40000uLL);
          memcpy((void *)(*(_QWORD *)(a1 + 48) + 32 * *(_QWORD *)(a1 + 32)), v20, 0x40000uLL);
          v24 = *(uint64_t **)(a1 + 88);
          v24[v21] = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) += 0x2000;
        }
      }
      ++v21;
    }
    while (v21 != v23);
    v30 = v23;
    do
    {
      v31 = v24[(v30 - 1)];
      if (v19 > v31)
        break;
      if (v31 != -1)
      {
        if (v22 > v31)
          break;
        v32 = (v30 - 1);
        v33 = *(_QWORD *)(a1 + 40) + 0x2000;
        *(_QWORD *)(a1 + 40) = v33;
        v34 = v23 + 1;
        do
        {
          if (v24[(v34 - 2)] == a2 - v33)
          {
            v33 += 0x2000;
            *(_QWORD *)(a1 + 40) = v33;
          }
          --v34;
        }
        while (v34 > 1);
        if ((unint64_t)(a2 - v33) < *(_QWORD *)(a1 + 16))
          break;
        memcpy(v20, (const void *)(*(_QWORD *)(a1 + 48) + 32 * v24[v32]), 0x40000uLL);
        memcpy((void *)(*(_QWORD *)(a1 + 48) + 32 * *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v32)), (const void *)(*(_QWORD *)(a1 + 48) + 32 * (a2 - *(_QWORD *)(a1 + 40))), 0x40000uLL);
        memcpy((void *)(*(_QWORD *)(a1 + 48) + 32 * (a2 - *(_QWORD *)(a1 + 40))), v20, 0x40000uLL);
        v24 = *(uint64_t **)(a1 + 88);
        v24[v32] = a2 - *(_QWORD *)(a1 + 40);
      }
      v17 = v30-- <= 1;
    }
    while (!v17);
    v35 = *(_QWORD *)a1;
    v36 = *(_QWORD *)(a1 + 16) - 1;
    do
    {
      v38 = *v24++;
      v37 = v38;
      if (v38 != -1)
      {
        if (v37 < v35)
          v35 = v37;
        v39 = v37 + 0x2000;
        v40 = v37 + 0x1FFF;
        if (v39 > v36)
          v36 = v40;
        if (v36 >= a2)
        {
          v55 = __si_assert_copy_extra_268();
          v56 = v55;
          v57 = "";
          if (v55)
            v57 = v55;
          __message_assert(v55, "sdb2_qsort.cpp", 17, "right < count", v57);
          free(v56);
          if (__valid_fs(-1))
            v58 = 2989;
          else
            v58 = 3072;
          *(_DWORD *)v58 = -559038737;
          abort();
        }
      }
      --v23;
    }
    while (v23);
  }
  free(v20);
  if (v35 >= v36)
  {
    result = v35;
    goto LABEL_86;
  }
  result = v35;
  do
  {
    v42 = *(_QWORD *)(a1 + 48);
    v43 = *(_QWORD *)(a1 + 72);
    v44 = (_QWORD *)(v42 + 32 * v35);
    while (1)
    {
      v45 = v44[2];
      if (v45 != v43)
        break;
      if (*v44 >= *(_QWORD *)(a1 + 56))
        goto LABEL_71;
LABEL_69:
      ++result;
      v44 += 4;
      if (result >= v36)
      {
        if (v36 <= v35 + 1)
          result = v35 + 1;
        else
          result = v36;
        goto LABEL_86;
      }
    }
    if (v45 < v43)
      goto LABEL_69;
LABEL_71:
    if (result >= v36)
      goto LABEL_80;
    v46 = (_QWORD *)(v42 + 32 * v36);
LABEL_73:
    v47 = v46[2];
    if (v47 == v43)
    {
      if (*v46 <= *(_QWORD *)(a1 + 56))
        goto LABEL_79;
      goto LABEL_77;
    }
    if (v47 > v43)
    {
LABEL_77:
      --v36;
      v46 -= 4;
      if (result >= v36)
        break;
      goto LABEL_73;
    }
LABEL_79:
    v49 = *(_OWORD *)v46;
    v48 = *((_OWORD *)v46 + 1);
    v50 = *((_OWORD *)v44 + 1);
    *(_OWORD *)v46 = *(_OWORD *)v44;
    *((_OWORD *)v46 + 1) = v50;
    v51 = (_OWORD *)(*(_QWORD *)(a1 + 48) + 32 * result);
    *v51 = v49;
    v51[1] = v48;
    ++result;
    --v36;
LABEL_80:
    v35 = result;
  }
  while (result < v36);
LABEL_86:
  v52 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 32 * result);
  v53 = v52[2];
  v54 = *(_QWORD *)(a1 + 72);
  if (v53 == v54 && *v52 < *(_QWORD *)(a1 + 56) || v53 < v54)
    ++result;
  return result;
}

uint64_t neutralize_oid_lookups(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;

  v5 = *a4;
  v6 = *a5;
  while (1)
  {
    if (v5 >= 0x2000)
    {
LABEL_10:
      v9 = v5;
    }
    else
    {
      v7 = a3[2];
      v8 = (unint64_t *)(a1 + 16 + 32 * v5);
      do
      {
        if (*v8 == v7)
        {
          if ((int64_t)*(v8 - 2) > *a3)
            goto LABEL_10;
        }
        else if (*v8 > v7)
        {
          goto LABEL_10;
        }
        ++v5;
        v8 += 4;
      }
      while (v5 != 0x2000);
      v9 = 0x2000;
    }
    if (v6 < 0x2000)
      break;
LABEL_19:
    v12 = v6;
    if (v9 == 0x2000 || v6 == 0x2000)
    {
      v5 = v9;
      goto LABEL_23;
    }
    v13 = (__int128 *)(a2 + 32 * v6);
    v15 = *v13;
    v14 = v13[1];
    v16 = (__int128 *)(a1 + 32 * v9);
    v17 = v16[1];
    *v13 = *v16;
    v13[1] = v17;
    *v16 = v15;
    v16[1] = v14;
    v5 = v9 + 1;
    v6 = v12 + 1;
    if (v9 > 8190 || v12 >= 0x1FFF)
      goto LABEL_23;
  }
  v10 = a3[2];
  v11 = (unint64_t *)(a2 + 16 + 32 * v6);
  do
  {
    if (*v11 == v10)
    {
      if ((int64_t)*(v11 - 2) < *a3)
        goto LABEL_19;
    }
    else if (*v11 < v10)
    {
      goto LABEL_19;
    }
    ++v6;
    v11 += 4;
  }
  while (v6 != 0x2000);
  v5 = v9;
LABEL_23:
  *a4 = v5;
  *a5 = v6;
  if (v6 == 0x2000 && v5 == 0x2000)
    return 2;
  else
    return v5 != 0x2000;
}

uint64_t ___ZL18_qsort_oid_lookupsP17oid_lookup_structll_block_invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;

  if (*a2 == *a3)
    v3 = 0;
  else
    v3 = -1;
  v4 = a2[2];
  v5 = a3[2];
  if (*a2 > *a3 && v4 == v5 || v4 > v5)
    return 1;
  else
    return v3;
}

uint64_t fieldCmp(const char *a1, const char *a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned __int8 *)a1;
  if (*a1 < 0)
  {
    if (v2 > 0xBF)
    {
      if (v2 > 0xDF)
      {
        if (v2 > 0xEF)
        {
          v2 = *(_DWORD *)(a1 + 1);
          v3 = 5;
        }
        else
        {
          v2 = ((v2 & 0xF) << 24) | (*((unsigned __int8 *)a1 + 1) << 16) | (*((unsigned __int8 *)a1 + 2) << 8) | *((unsigned __int8 *)a1 + 3);
          v3 = 4;
        }
      }
      else
      {
        v2 = ((v2 & 0x1F) << 16) | (*((unsigned __int8 *)a1 + 1) << 8) | *((unsigned __int8 *)a1 + 2);
        v3 = 3;
      }
    }
    else
    {
      v3 = 2;
      v2 = *((unsigned __int8 *)a1 + 1) | ((v2 & 0x3F) << 8);
    }
  }
  else
  {
    v3 = 1;
  }
  v4 = *(unsigned __int8 *)a2;
  if ((*a2 & 0x80000000) == 0)
  {
    v5 = 1;
    v6 = v4 - v2;
    if (!(_DWORD)v6)
      return memcmp(&a1[v3], &a2[v5], v2);
    return v6;
  }
  if (v4 <= 0xBF)
  {
    v5 = 2;
    v6 = (*((unsigned __int8 *)a2 + 1) | ((v4 & 0x3F) << 8)) - v2;
    if (!(_DWORD)v6)
      return memcmp(&a1[v3], &a2[v5], v2);
    return v6;
  }
  if (v4 <= 0xDF)
  {
    v5 = 3;
    v6 = (((v4 & 0x1F) << 16) | (*((unsigned __int8 *)a2 + 1) << 8) | *((unsigned __int8 *)a2 + 2)) - v2;
    if (!(_DWORD)v6)
      return memcmp(&a1[v3], &a2[v5], v2);
    return v6;
  }
  if (v4 > 0xEF)
  {
    v5 = 5;
    v6 = *(_DWORD *)(a2 + 1) - v2;
    if ((_DWORD)v6)
      return v6;
  }
  else
  {
    v5 = 4;
    v6 = (((v4 & 0xF) << 24) | (*((unsigned __int8 *)a2 + 1) << 16) | (*((unsigned __int8 *)a2 + 2) << 8) | *((unsigned __int8 *)a2 + 3))
       - v2;
    if ((_DWORD)v6)
      return v6;
  }
  return memcmp(&a1[v3], &a2[v5], v2);
}

void ___ZN20GenericUniquingTableIXadL_Z6strlenEEXadL_Z6strcmpEEE9initTableEmj_block_invoke()
{
  sdb_uniquing_zone = (uint64_t)malloc_create_zone(0x10000uLL, 0);
  malloc_set_zone_name((malloc_zone_t *)sdb_uniquing_zone, "sdb_uniquing_zone");
}

uint64_t GenericUniquingTable<&(strlen),&(strcmp)>::buckFind(uint64_t *a1, unsigned int a2, int a3, char *__s1, size_t a5, const void *a6, unsigned int *a7)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t result;
  const char *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;

  v9 = *a1;
  v10 = *a1 + 16 * a2;
  if ((*(_DWORD *)(v10 + 8) & 0x80000000) != 0)
  {
    if (a6)
    {
      v21 = -(uint64_t)a5;
      v11 = a2;
      while (1)
      {
        if ((*(_DWORD *)(v10 + 8) & 0x7FFFFFFF) == a3)
        {
          v18 = *(const char **)v10;
          if (!strcmp(__s1, *(const char **)v10) && !memcmp(&v18[v21], a6, a5))
            break;
        }
        result = 0;
        v19 = *((_DWORD *)a1 + 2);
        if (v11 + 1 < v19)
          ++v11;
        else
          v11 = v11 + 1 - v19;
        if (v11 != a2)
        {
          v10 = v9 + 16 * v11;
          if ((*(_DWORD *)(v10 + 8) & 0x80000000) != 0)
            continue;
        }
        goto LABEL_4;
      }
    }
    else
    {
      v11 = a2;
      while ((*(_DWORD *)(v10 + 8) & 0x7FFFFFFF) != a3 || strcmp(__s1, *(const char **)v10))
      {
        result = 0;
        v20 = *((_DWORD *)a1 + 2);
        if (v11 + 1 < v20)
          ++v11;
        else
          v11 = v11 + 1 - v20;
        if (v11 != a2)
        {
          v10 = v9 + 16 * v11;
          if ((*(_DWORD *)(v10 + 8) & 0x80000000) != 0)
            continue;
        }
        goto LABEL_4;
      }
    }
  }
  else
  {
    v11 = a2;
  }
  result = v10;
LABEL_4:
  *a7 = v11;
  return result;
}

uint64_t hash_insert_extended(uint64_t a1, char *__s, const void *a3, char *a4)
{
  int v8;
  int v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  size_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  unsigned int *v28;
  int v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  const char *v33;
  unsigned int v34;
  uint64_t v35;
  char *v36;
  uint64_t i;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  NSObject *v48;
  int v49;
  int v50;
  uint64_t v51;
  char *v53;
  char *v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  const char *v58;
  char **v59;
  char *v60;
  char *v61;
  const char *v62;
  uint64_t v63;
  char *v64;
  const char *v65;
  char *v66;
  const char *v67;
  char *v68;
  const char *v69;
  unsigned int v70;
  uint8_t buf[4];
  int v72;
  __int16 v73;
  int v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v8 = -1759636613;
  v9 = strlen(__s);
  pthread_rwlock_wrlock((pthread_rwlock_t *)a1);
  if (v9 >= 0)
    v10 = v9;
  else
    v10 = v9 + 3;
  v11 = &__s[v10 & 0xFFFFFFFC];
  if ((v9 + 3) >= 7)
  {
    v14 = -(v10 >> 2);
    v15 = -1789642873;
    v16 = 718793509;
    do
    {
      v15 = 5 * v15 + 2071795100;
      v16 = 5 * v16 + 1808688022;
      HIDWORD(v17) = v15 * *(_DWORD *)&v11[4 * v14];
      LODWORD(v17) = HIDWORD(v17);
      v18 = (v17 >> 21) * v16;
      HIDWORD(v17) = v8;
      LODWORD(v17) = v8;
      v8 = v18 ^ (5 * (v17 >> 19) + 1390208809);
    }
    while (!__CFADD__(v14++, 1));
    v13 = 5 * v15 + 2071795100;
    v12 = 5 * v16 + 1808688022;
  }
  else
  {
    v12 = 1107688271;
    v13 = 1713515327;
  }
  v20 = 0;
  v21 = v9 & 3;
  if (v21 != 1)
  {
    if (v21 != 2)
    {
      if (v21 != 3)
        goto LABEL_16;
      v20 = v11[2] << 16;
    }
    v20 |= v11[1] << 8;
  }
  HIDWORD(v22) = (v20 ^ *v11) * v13;
  LODWORD(v22) = HIDWORD(v22);
  v23 = (v22 >> 21) * v12;
  HIDWORD(v22) = v8;
  LODWORD(v22) = v8;
  v8 = v23 ^ (5 * (v22 >> 19) + 1390208809);
LABEL_16:
  v24 = *(_QWORD *)(a1 + 200);
  if (&__s[-v24 - 4] != a4)
  {
    v60 = __si_assert_copy_extra_268();
    v61 = v60;
    v62 = "";
    if (v60)
      v62 = v60;
    __message_assert(v60, "db-common.c", 364, "data == name - ht->extra_bytes - sizeof(db_uint32_t)", v62);
    free(v61);
    if (__valid_fs(-1))
      v63 = 2989;
    else
      v63 = 3072;
    *(_DWORD *)v63 = -559038737;
    abort();
  }
  v25 = -1028477387 * ((-2048144789 * (v8 ^ v9)) ^ ((-2048144789 * (v8 ^ v9)) >> 13));
  v26 = v25 ^ HIWORD(v25);
  v27 = a1 + 16 * ((v25 ^ BYTE2(v25)) & 0x7F);
  v30 = *(_DWORD *)(v27 + 216);
  v28 = (unsigned int *)(v27 + 216);
  v29 = v30;
  v31 = v28 - 2;
  if (v30 < 0)
  {
    if ((v29 & 0x7FFFFFFF) == (v26 & 0x7FFFFFFF)
      && (v33 = *(const char **)v31, !memcmp((const void *)(*(_QWORD *)v31 - v24), a3, *(_QWORD *)(a1 + 200)))
      && !strcmp(__s, v33))
    {
      pthread_rwlock_unlock((pthread_rwlock_t *)a1);
      return 17;
    }
    else
    {
      v34 = *(_DWORD *)(a1 + 2272);
      v70 = 0;
      while (1)
      {
        v35 = GenericUniquingTable<&(strlen),&(strcmp)>::buckFind((uint64_t *)(a1 + 2264), (v26 & 0x7FFFFFFFu) % v34, v26 & 0x7FFFFFFF, __s, v24, a3, &v70);
        if (v70 >= v34)
        {
          v64 = __si_assert_copy_extra_268();
          v57 = v64;
          v65 = "";
          if (v64)
            v65 = v64;
          __message_assert(v64, "db-common.c", 398, "slot<table->size", v65);
          goto LABEL_67;
        }
        if (v35)
          break;
        if (3 * v34 >= 4 * *(_DWORD *)(a1 + 2276))
        {
          v32 = 0;
          v51 = *(_QWORD *)(a1 + 2264) + 16 * v70;
          *(_DWORD *)(v51 + 8) = v26 | 0x80000000;
          ++*(_DWORD *)(a1 + 2276);
          *(_QWORD *)v51 = __s;
          goto LABEL_46;
        }
        if (dword_1EF19FCA8 >= 5)
        {
          v47 = *__error();
          v48 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            v49 = *(_DWORD *)(a1 + 2272);
            v50 = *(_DWORD *)(a1 + 2276);
            *(_DWORD *)buf = 67109376;
            v72 = v49;
            v73 = 1024;
            v74 = v50;
            _os_log_impl(&dword_1B8270000, v48, OS_LOG_TYPE_DEFAULT, "Growing hash table %d %d", buf, 0xEu);
          }
          *__error() = v47;
          v34 = *(_DWORD *)(a1 + 2272);
        }
        v36 = *(char **)(a1 + 2264);
        *(_DWORD *)(a1 + 2272) = 2 * v34;
        *(_QWORD *)(a1 + 2264) = malloc_type_zone_calloc((malloc_zone_t *)sdb_uniquing_zone, 1uLL, 32 * v34, 0x1050040DB1D6C16uLL);
        if (v34)
        {
          for (i = 0; i != v34; ++i)
          {
            v40 = &v36[16 * i];
            v41 = *((_DWORD *)v40 + 2);
            if (v41 < 0)
            {
              v42 = *(_DWORD *)(a1 + 2272);
              v43 = (v41 & 0x7FFFFFFFu) % v42;
              v44 = *(_QWORD *)(a1 + 2264);
              if ((*(_DWORD *)(v44 + 16 * v43 + 8) & 0x80000000) != 0)
              {
                LODWORD(v38) = (v41 & 0x7FFFFFFFu) % v42;
                while (1)
                {
                  v45 = v38 + 1;
                  v46 = v45 >= v42 ? *(_DWORD *)(a1 + 2272) : 0;
                  v38 = v45 - v46;
                  if ((_DWORD)v38 == v43)
                    break;
                  if ((*(_DWORD *)(v44 + 16 * v38 + 8) & 0x80000000) == 0)
                    goto LABEL_30;
                }
                v68 = __si_assert_copy_extra_268();
                v57 = v68;
                v69 = "";
                if (v68)
                  v69 = v68;
                __message_assert(v68, "db-common.c", 129, "probe!=start", v69);
LABEL_67:
                free(v57);
                if (__valid_fs(-1))
                {
                  MEMORY[0xBAD] = -559038737;
                  abort();
                }
                MEMORY[0xC00] = -559038737;
                abort();
              }
              v38 = (v41 & 0x7FFFFFFFu) % v42;
LABEL_30:
              v39 = v44 + 16 * v38;
              *(_DWORD *)(v39 + 8) = v41 | 0x80000000;
              *(_QWORD *)v39 = *(_QWORD *)v40;
            }
          }
        }
        free(v36);
        v34 = *(_DWORD *)(a1 + 2272);
        v24 = *(_QWORD *)(a1 + 200);
      }
      if ((*(_DWORD *)(v35 + 8) & 0x80000000) != 0)
      {
        v53 = *(char **)v31;
        v54 = (char *)*((_QWORD *)v31 + 1);
        *(_OWORD *)v31 = *(_OWORD *)v35;
        *(_DWORD *)buf = 0;
        v55 = (_QWORD *)GenericUniquingTable<&(strlen),&(strcmp)>::buckFind((uint64_t *)(a1 + 2264), (v54 & 0x7FFFFFFF) % v34, v54 & 0x7FFFFFFF, v53, v24, &v53[-v24], (unsigned int *)buf);
        if (v55)
        {
          *v55 = v53;
          v55[1] = v54;
          if ((v54 & 0x80000000) == 0)
          {
            v56 = __si_assert_copy_extra_268();
            v57 = v56;
            v58 = "";
            if (v56)
              v58 = v56;
            __message_assert(v56, "db-common.c", 337, "bucket.used", v58);
            goto LABEL_67;
          }
        }
        else
        {
          v59 = (char **)(*(_QWORD *)(a1 + 2264) + 16 * *(unsigned int *)buf);
          *v59 = v53;
          v59[1] = v54;
          if ((v54 & 0x80000000) == 0)
          {
            v66 = __si_assert_copy_extra_268();
            v57 = v66;
            v67 = "";
            if (v66)
              v67 = v66;
            __message_assert(v66, "db-common.c", 341, "bucket.used", v67);
            goto LABEL_67;
          }
        }
        v32 = 17;
      }
      else
      {
        v32 = 0;
        *(_DWORD *)(v35 + 8) = v26 | 0x80000000;
        *(_QWORD *)v35 = __s;
        ++*(_DWORD *)(a1 + 2276);
      }
LABEL_46:
      pthread_rwlock_unlock((pthread_rwlock_t *)a1);
    }
  }
  else
  {
    *v28 = v26 | 0x80000000;
    ++*(_DWORD *)(a1 + 2276);
    *(_QWORD *)v31 = __s;
    pthread_rwlock_unlock((pthread_rwlock_t *)a1);
    return 0;
  }
  return v32;
}

uint64_t hash_lookup_extended(uint64_t a1, char *__s, const void *a3, char a4)
{
  int v8;
  int v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  int v18;
  int v20;
  int v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v30;
  const char *v31;
  size_t v32;
  const char *v33;
  unsigned int v34;
  size_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  const char *v39;
  unsigned int v40;

  v8 = -1759636613;
  v9 = strlen(__s);
  if (v9 >= 0)
    v10 = v9;
  else
    v10 = v9 + 3;
  v11 = &__s[v10 & 0xFFFFFFFC];
  if ((v9 + 3) >= 7)
  {
    v14 = -(v10 >> 2);
    v15 = -1789642873;
    v16 = 718793509;
    do
    {
      v15 = 5 * v15 + 2071795100;
      v16 = 5 * v16 + 1808688022;
      HIDWORD(v17) = v15 * *(_DWORD *)&v11[4 * v14];
      LODWORD(v17) = HIDWORD(v17);
      v18 = (v17 >> 21) * v16;
      HIDWORD(v17) = v8;
      LODWORD(v17) = v8;
      v8 = v18 ^ (5 * (v17 >> 19) + 1390208809);
    }
    while (!__CFADD__(v14++, 1));
    v13 = 5 * v15 + 2071795100;
    v12 = 5 * v16 + 1808688022;
  }
  else
  {
    v12 = 1107688271;
    v13 = 1713515327;
  }
  v20 = 0;
  v21 = v9 & 3;
  if (v21 != 1)
  {
    if (v21 != 2)
    {
      if (v21 != 3)
        goto LABEL_16;
      v20 = v11[2] << 16;
    }
    v20 |= v11[1] << 8;
  }
  HIDWORD(v22) = (v20 ^ *v11) * v13;
  LODWORD(v22) = HIDWORD(v22);
  v23 = (v22 >> 21) * v12;
  HIDWORD(v22) = v8;
  LODWORD(v22) = v8;
  v8 = v23 ^ (5 * (v22 >> 19) + 1390208809);
LABEL_16:
  v24 = -1028477387 * ((-2048144789 * (v8 ^ v9)) ^ ((-2048144789 * (v8 ^ v9)) >> 13));
  v25 = v24 ^ HIWORD(v24);
  pthread_rwlock_rdlock((pthread_rwlock_t *)a1);
  v26 = a1 + 208 + 16 * (v25 & 0x7F);
  v27 = *(_DWORD *)(v26 + 8);
  if (v27 < 0)
  {
    v30 = v25 & 0x7FFFFFFF;
    if ((v27 & 0x7FFFFFFF) == v30
      && (v31 = *(const char **)v26, !strcmp(__s, *(const char **)v26))
      && (v32 = *(_QWORD *)(a1 + 200), v33 = &v31[-v32], !memcmp(v33, a3, v32)))
    {
      v28 = (uint64_t)(v33 - 4);
      if ((a4 & 1) != 0)
        return v28;
    }
    else
    {
      v34 = *(_DWORD *)(a1 + 2272);
      v40 = 0;
      v35 = *(_QWORD *)(a1 + 200);
      v36 = GenericUniquingTable<&(strlen),&(strcmp)>::buckFind((uint64_t *)(a1 + 2264), v30 % v34, v30, __s, v35, a3, &v40);
      if (v40 >= v34)
      {
        v37 = __si_assert_copy_extra_268();
        v38 = v37;
        v39 = "";
        if (v37)
          v39 = v37;
        __message_assert(v37, "db-common.c", 304, "slot < table->size", v39);
        free(v38);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (!v36 || (*(_DWORD *)(v36 + 8) & 0x80000000) == 0)
        goto LABEL_17;
      v28 = *(_QWORD *)v36 - v35 - 4;
      if ((a4 & 1) != 0)
        return v28;
    }
    pthread_rwlock_unlock((pthread_rwlock_t *)a1);
    return v28;
  }
LABEL_17:
  if ((a4 & 1) == 0)
    pthread_rwlock_unlock((pthread_rwlock_t *)a1);
  return 0;
}

void ___ZN20GenericUniquingTableIXadL_Z8fieldLenEEXadL_Z8fieldCmpPKcS1_EEE9initTableEmj_block_invoke()
{
  sdb_uniquing_zone = (uint64_t)malloc_create_zone(0x10000uLL, 0);
  malloc_set_zone_name((malloc_zone_t *)sdb_uniquing_zone, "sdb_uniquing_zone");
}

uint64_t hash_field_insert(pthread_rwlock_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  __int128 v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v21;
  int v22;
  unint64_t v23;
  int v24;
  size_t sig;
  unsigned int v26;
  int v27;
  char *v28;
  unsigned int *v29;
  int v30;
  int v31;
  unsigned int *v32;
  uint64_t v33;
  unsigned int v34;
  const char *v35;
  unsigned int v36;
  char *v37;
  char *v38;
  unsigned int v39;
  uint64_t i;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  NSObject *v51;
  int v52;
  int v53;
  const char *v54;
  uint64_t v55;
  unsigned int v56;
  char *v57;
  size_t v59;
  const char *v60;
  unsigned int v61;
  char *v62;
  char *v63;
  const char *v64;
  char *v65;
  const char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  const char *v70;
  char *v71;
  const char *v72;
  char *v73;
  const char *v74;
  unsigned int v75;
  __int128 v76;
  uint8_t buf[4];
  int v78;
  __int16 v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  if ((char)*a2 < 0)
  {
    if (v6 > 0xBF)
    {
      if (v6 > 0xDF)
      {
        if (v6 > 0xEF)
        {
          v6 = *(_DWORD *)(a2 + 1);
          v7 = 5;
        }
        else
        {
          v6 = ((v6 & 0xF) << 24) | (a2[1] << 16) | (a2[2] << 8) | a2[3];
          v7 = 4;
        }
      }
      else
      {
        v6 = ((v6 & 0x1F) << 16) | (a2[1] << 8) | a2[2];
        v7 = 3;
      }
    }
    else
    {
      v7 = 2;
      v6 = a2[1] | ((v6 & 0x3F) << 8);
    }
  }
  else
  {
    v7 = 1;
  }
  v8 = -1759636613;
  v9 = v7 + v6;
  pthread_rwlock_wrlock(a1);
  if (v9 >= 0)
    v11 = v9;
  else
    v11 = v9 + 3;
  v12 = &a2[v11 & 0xFFFFFFFC];
  if ((v9 + 3) >= 7)
  {
    v15 = -(v11 >> 2);
    v16 = -1789642873;
    v17 = 718793509;
    do
    {
      v16 = 5 * v16 + 2071795100;
      v17 = 5 * v17 + 1808688022;
      HIDWORD(v18) = v16 * *(_DWORD *)&v12[4 * v15];
      LODWORD(v18) = HIDWORD(v18);
      v19 = (v18 >> 21) * v17;
      HIDWORD(v18) = v8;
      LODWORD(v18) = v8;
      v8 = v19 ^ (5 * (v18 >> 19) + 1390208809);
    }
    while (!__CFADD__(v15++, 1));
    v14 = 5 * v16 + 2071795100;
    v13 = 5 * v17 + 1808688022;
  }
  else
  {
    v13 = 1107688271;
    v14 = 1713515327;
  }
  v21 = 0;
  v22 = v9 & 3;
  if (v22 != 1)
  {
    if (v22 != 2)
    {
      if (v22 != 3)
        goto LABEL_25;
      v21 = v12[2] << 16;
    }
    v21 |= v12[1] << 8;
  }
  HIDWORD(v23) = (v21 ^ *v12) * v14;
  LODWORD(v23) = HIDWORD(v23);
  v24 = (v23 >> 21) * v13;
  HIDWORD(v23) = v8;
  LODWORD(v23) = v8;
  v8 = v24 ^ (5 * (v23 >> 19) + 1390208809);
LABEL_25:
  sig = a1[1].__sig;
  if (&a2[-sig - 4] != a3)
  {
    v65 = __si_assert_copy_extra_268();
    v63 = v65;
    v66 = "";
    if (v65)
      v66 = v65;
    __message_assert(v65, "db-common.c", 364, "data == name - ht->extra_bytes - sizeof(db_uint32_t)", v66);
    goto LABEL_87;
  }
  v26 = -1028477387 * ((-2048144789 * (v8 ^ v9)) ^ ((-2048144789 * (v8 ^ v9)) >> 13));
  v27 = v26 ^ HIWORD(v26);
  v28 = (char *)a1 + 16 * ((v26 ^ BYTE2(v26)) & 0x7F);
  v31 = *((_DWORD *)v28 + 54);
  v29 = (unsigned int *)(v28 + 216);
  v30 = v31;
  v32 = v29 - 2;
  if (v31 < 0)
  {
    v34 = v27 & 0x7FFFFFFF;
    if ((v30 & 0x7FFFFFFF) == (v27 & 0x7FFFFFFF)
      && (v35 = *(const char **)v32, !memcmp((const void *)(*(_QWORD *)v32 - sig), 0, sig))
      && !fieldCmp((const char *)a2, v35))
    {
      pthread_rwlock_unlock(a1);
      return 17;
    }
    else
    {
      *(_QWORD *)&v10 = 67109376;
      while (1)
      {
        v36 = *(_DWORD *)&a1[11].__opaque[64];
        v37 = *(char **)&a1[11].__opaque[56];
        v38 = &v37[16 * (v34 % v36)];
        if ((*((_DWORD *)v38 + 2) & 0x80000000) == 0)
          break;
        v76 = v10;
        v39 = v34 % v36;
        do
        {
          if ((*((_DWORD *)v38 + 2) & 0x7FFFFFFF) == v34
            && !fieldCmp((const char *)a2, *(const char **)v38))
          {
            if (v39 >= v36)
            {
LABEL_89:
              v68 = __si_assert_copy_extra_268();
              v69 = v68;
              v70 = "";
              if (v68)
                v70 = v68;
              __message_assert(v68, "db-common.c", 398, "slot<table->size", v70);
              free(v69);
              if (__valid_fs(-1))
              {
                MEMORY[0xBAD] = -559038737;
                abort();
              }
              MEMORY[0xC00] = -559038737;
              abort();
            }
            goto LABEL_63;
          }
          if (v39 + 1 < v36)
            ++v39;
          else
            v39 = v39 + 1 - v36;
          v38 = &v37[16 * v39];
        }
        while (v39 != v34 % v36 && (*((_DWORD *)v38 + 2) & 0x80000000) != 0);
        if (v39 >= v36)
          goto LABEL_89;
        if (3 * v36 >= 4 * *(_DWORD *)&a1[11].__opaque[68])
        {
          v33 = 0;
          *((_DWORD *)v38 + 2) = v27 | 0x80000000;
          ++*(_DWORD *)&a1[11].__opaque[68];
          *(_QWORD *)v38 = a2;
          goto LABEL_68;
        }
        if (dword_1EF19FCA8 >= 5)
        {
          v50 = *__error();
          v51 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            v52 = *(_DWORD *)&a1[11].__opaque[64];
            v53 = *(_DWORD *)&a1[11].__opaque[68];
            *(_DWORD *)buf = v76;
            v78 = v52;
            v79 = 1024;
            v80 = v53;
            _os_log_impl(&dword_1B8270000, v51, OS_LOG_TYPE_DEFAULT, "Growing hash table %d %d", buf, 0xEu);
          }
          *__error() = v50;
          v36 = *(_DWORD *)&a1[11].__opaque[64];
          v37 = *(char **)&a1[11].__opaque[56];
        }
        *(_DWORD *)&a1[11].__opaque[64] = 2 * v36;
        *(_QWORD *)&a1[11].__opaque[56] = malloc_type_zone_calloc((malloc_zone_t *)sdb_uniquing_zone, 1uLL, 32 * v36, 0x1050040DB1D6C16uLL);
        if (v36)
        {
          for (i = 0; i != v36; ++i)
          {
            v43 = &v37[16 * i];
            v44 = *((_DWORD *)v43 + 2);
            if (v44 < 0)
            {
              v45 = *(_DWORD *)&a1[11].__opaque[64];
              v46 = (v44 & 0x7FFFFFFFu) % v45;
              v47 = *(_QWORD *)&a1[11].__opaque[56];
              if ((*(_DWORD *)(v47 + 16 * v46 + 8) & 0x80000000) != 0)
              {
                LODWORD(v41) = (v44 & 0x7FFFFFFFu) % v45;
                while (1)
                {
                  v48 = v41 + 1;
                  v49 = v48 >= v45 ? *(_DWORD *)&a1[11].__opaque[64] : 0;
                  v41 = v48 - v49;
                  if ((_DWORD)v41 == v46)
                    break;
                  if ((*(_DWORD *)(v47 + 16 * v41 + 8) & 0x80000000) == 0)
                    goto LABEL_47;
                }
                v73 = __si_assert_copy_extra_268();
                v63 = v73;
                v74 = "";
                if (v73)
                  v74 = v73;
                __message_assert(v73, "db-common.c", 129, "probe!=start", v74);
LABEL_87:
                free(v63);
                if (__valid_fs(-1))
                  v67 = 2989;
                else
                  v67 = 3072;
                *(_DWORD *)v67 = -559038737;
                abort();
              }
              v41 = (v44 & 0x7FFFFFFFu) % v45;
LABEL_47:
              v42 = v47 + 16 * v41;
              *(_DWORD *)(v42 + 8) = v44 | 0x80000000;
              *(_QWORD *)v42 = *(_QWORD *)v43;
            }
          }
        }
        free(v37);
        v10 = v76;
      }
LABEL_63:
      if ((*((_DWORD *)v38 + 2) & 0x80000000) != 0)
      {
        v54 = *(const char **)v32;
        v55 = *((_QWORD *)v32 + 1);
        *(_OWORD *)v32 = *(_OWORD *)v38;
        v56 = (v55 & 0x7FFFFFFF) % v36;
        v57 = &v37[16 * v56];
        if ((*((_DWORD *)v57 + 2) & 0x80000000) != 0)
        {
          v59 = a1[1].__sig;
          v75 = (v55 & 0x7FFFFFFF) % v36;
          while (1)
          {
            if ((*((_DWORD *)v57 + 2) & 0x7FFFFFFF) == (v55 & 0x7FFFFFFF))
            {
              v60 = *(const char **)v57;
              if (!fieldCmp(v54, *(const char **)v57) && !memcmp(&v60[-v59], &v54[-v59], v59))
                break;
            }
            if (v75 + 1 < v36)
              v61 = v75 + 1;
            else
              v61 = v75 + 1 - v36;
            v57 = &v37[16 * v61];
            v75 = v61;
            if (v61 == v56 || (*((_DWORD *)v57 + 2) & 0x80000000) == 0)
            {
              *(_QWORD *)v57 = v54;
              *((_QWORD *)v57 + 1) = v55;
              if ((v55 & 0x80000000) == 0)
              {
                v62 = __si_assert_copy_extra_268();
                v63 = v62;
                v64 = "";
                if (v62)
                  v64 = v62;
                __message_assert(v62, "db-common.c", 341, "bucket.used", v64);
                goto LABEL_87;
              }
              goto LABEL_67;
            }
          }
        }
        *(_QWORD *)v57 = v54;
        *((_QWORD *)v57 + 1) = v55;
        if ((v55 & 0x80000000) == 0)
        {
          v71 = __si_assert_copy_extra_268();
          v63 = v71;
          v72 = "";
          if (v71)
            v72 = v71;
          __message_assert(v71, "db-common.c", 337, "bucket.used", v72);
          goto LABEL_87;
        }
LABEL_67:
        v33 = 17;
      }
      else
      {
        v33 = 0;
        *((_DWORD *)v38 + 2) = v27 | 0x80000000;
        *(_QWORD *)v38 = a2;
        ++*(_DWORD *)&a1[11].__opaque[68];
      }
LABEL_68:
      pthread_rwlock_unlock(a1);
    }
  }
  else
  {
    *v29 = v27 | 0x80000000;
    ++*(_DWORD *)&a1[11].__opaque[68];
    *(_QWORD *)v32 = a2;
    pthread_rwlock_unlock(a1);
    return 0;
  }
  return v33;
}

uint64_t hash_field_lookup(pthread_rwlock_t *a1, unsigned __int8 *a2)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  char *v24;
  int v25;
  unsigned int v26;
  const char *v27;
  size_t sig;
  const char *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  char *v36;
  char *v37;
  const char *v38;

  v4 = *a2;
  if ((char)*a2 < 0)
  {
    if (v4 > 0xBF)
    {
      if (v4 > 0xDF)
      {
        if (v4 > 0xEF)
        {
          v4 = *(_DWORD *)(a2 + 1);
          v5 = 5;
        }
        else
        {
          v4 = ((v4 & 0xF) << 24) | (a2[1] << 16) | (a2[2] << 8) | a2[3];
          v5 = 4;
        }
      }
      else
      {
        v4 = ((v4 & 0x1F) << 16) | (a2[1] << 8) | a2[2];
        v5 = 3;
      }
    }
    else
    {
      v5 = 2;
      v4 = a2[1] | ((v4 & 0x3F) << 8);
    }
  }
  else
  {
    v5 = 1;
  }
  v6 = -1759636613;
  v7 = v5 + v4;
  if (v7 >= 0)
    v8 = v7;
  else
    v8 = v7 + 3;
  v9 = &a2[v8 & 0xFFFFFFFC];
  if ((v7 + 3) >= 7)
  {
    v12 = -(v8 >> 2);
    v13 = -1789642873;
    v14 = 718793509;
    do
    {
      v13 = 5 * v13 + 2071795100;
      v14 = 5 * v14 + 1808688022;
      HIDWORD(v15) = v13 * *(_DWORD *)&v9[4 * v12];
      LODWORD(v15) = HIDWORD(v15);
      v16 = (v15 >> 21) * v14;
      HIDWORD(v15) = v6;
      LODWORD(v15) = v6;
      v6 = v16 ^ (5 * (v15 >> 19) + 1390208809);
    }
    while (!__CFADD__(v12++, 1));
    v11 = 5 * v13 + 2071795100;
    v10 = 5 * v14 + 1808688022;
  }
  else
  {
    v10 = 1107688271;
    v11 = 1713515327;
  }
  v18 = 0;
  v19 = v7 & 3;
  if (v19 != 1)
  {
    if (v19 != 2)
    {
      if (v19 != 3)
        goto LABEL_25;
      v18 = v9[2] << 16;
    }
    v18 |= v9[1] << 8;
  }
  HIDWORD(v20) = (v18 ^ *v9) * v11;
  LODWORD(v20) = HIDWORD(v20);
  v21 = (v20 >> 21) * v10;
  HIDWORD(v20) = v6;
  LODWORD(v20) = v6;
  v6 = v21 ^ (5 * (v20 >> 19) + 1390208809);
LABEL_25:
  v22 = -1028477387 * ((-2048144789 * (v6 ^ v7)) ^ ((-2048144789 * (v6 ^ v7)) >> 13));
  v23 = v22 ^ HIWORD(v22);
  pthread_rwlock_rdlock(a1);
  v24 = &a1[1].__opaque[16 * (v23 & 0x7F)];
  v25 = *((_DWORD *)v24 + 2);
  if (v25 < 0)
  {
    v26 = v23 & 0x7FFFFFFF;
    if ((v25 & 0x7FFFFFFF) == v26)
    {
      v27 = *(const char **)v24;
      if (!fieldCmp((const char *)a2, *(const char **)v24))
      {
        sig = a1[1].__sig;
        v29 = &v27[-sig];
        if (!memcmp(v29, 0, sig))
        {
          v34 = (uint64_t)(v29 - 4);
          goto LABEL_43;
        }
      }
    }
    v30 = *(_DWORD *)&a1[11].__opaque[64];
    v31 = *(_QWORD *)&a1[11].__opaque[56];
    v32 = v31 + 16 * (v26 % v30);
    if ((*(_DWORD *)(v32 + 8) & 0x80000000) != 0)
    {
      v33 = v26 % v30;
      do
      {
        if ((*(_DWORD *)(v32 + 8) & 0x7FFFFFFF) == v26
          && !fieldCmp((const char *)a2, *(const char **)v32))
        {
          if (v33 >= v30)
            goto LABEL_46;
          goto LABEL_41;
        }
        if (v33 + 1 < v30)
          ++v33;
        else
          v33 = v33 + 1 - v30;
        if (v33 == v26 % v30)
          break;
        v32 = v31 + 16 * v33;
      }
      while ((*(_DWORD *)(v32 + 8) & 0x80000000) != 0);
      if (v33 >= v30)
      {
LABEL_46:
        v36 = __si_assert_copy_extra_268();
        v37 = v36;
        v38 = "";
        if (v36)
          v38 = v36;
        __message_assert(v36, "db-common.c", 304, "slot < table->size", v38);
        free(v37);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
    }
    else
    {
LABEL_41:
      if ((*(_DWORD *)(v32 + 8) & 0x80000000) != 0)
      {
        v34 = *(_QWORD *)v32 - a1[1].__sig - 4;
        goto LABEL_43;
      }
    }
  }
  v34 = 0;
LABEL_43:
  pthread_rwlock_unlock(a1);
  return v34;
}

uint64_t _data_map_ext_wrlock(uint64_t a1)
{
  uint64_t v1;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 461))
    return 0;
  v1 = _db_write_lock(a1);
  if ((_DWORD)v1)
  {
    v3 = *__error();
    v4 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = v1;
      if ((_DWORD)v1 == -1)
        v5 = *__error();
      v6 = 136315650;
      v7 = "_data_map_ext_wrlock";
      v8 = 1024;
      v9 = 287;
      v10 = 1024;
      v11 = v5;
      _os_log_error_impl(&dword_1B8270000, v4, OS_LOG_TYPE_ERROR, "%s:%d: _data_map_ext_wrlock error %d", (uint8_t *)&v6, 0x18u);
    }
    *__error() = v3;
  }
  return v1;
}

uint64_t _data_map_ext_rdlock(uint64_t a1)
{
  uint64_t lock;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 461))
    return 0;
  lock = db_read_lock(a1);
  if ((_DWORD)lock)
  {
    v3 = *__error();
    v4 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = lock;
      if ((_DWORD)lock == -1)
        v5 = *__error();
      v6 = 136315650;
      v7 = "_data_map_ext_rdlock";
      v8 = 1024;
      v9 = 308;
      v10 = 1024;
      v11 = v5;
      _os_log_error_impl(&dword_1B8270000, v4, OS_LOG_TYPE_ERROR, "%s:%d: _data_map_ext_rdlock error %d", (uint8_t *)&v6, 0x18u);
    }
    *__error() = v3;
  }
  return lock;
}

uint64_t _data_map_ext_unlock(uint64_t a1)
{
  uint64_t v1;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 461))
    return 0;
  v1 = db_rwlock_unlock_unknown(a1);
  if ((_DWORD)v1)
  {
    v3 = *__error();
    v4 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = v1;
      if ((_DWORD)v1 == -1)
        v5 = *__error();
      v6 = 136315650;
      v7 = "_data_map_ext_unlock";
      v8 = 1024;
      v9 = 318;
      v10 = 1024;
      v11 = v5;
      _os_log_error_impl(&dword_1B8270000, v4, OS_LOG_TYPE_ERROR, "%s:%d: _data_map_ext_unlock error %d", (uint8_t *)&v6, 0x18u);
    }
    *__error() = v3;
  }
  return v1;
}

uint64_t data_map_ext_init_with_ctx(uint64_t a1)
{
  int v2;
  const char *v3;
  int v4;
  unsigned int v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD);
  _DWORD *v17;
  int v18;
  NSObject *v19;
  size_t v20;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  uint32_t v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD);
  int v36;
  NSObject *v37;
  os_log_type_t v38;
  char *v39;
  uint64_t v40;
  int v42;
  NSObject *v43;
  _DWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned int v54;
  unsigned int v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint32_t v60;
  int v61;
  const char *v62;
  const char *v63;
  char *sibling_with_suffix_protected;
  char *v65;
  uint64_t v66;
  NSObject *v67;
  NSObject *v68;
  _BOOL4 v69;
  uint64_t v70;
  const char *v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  NSObject *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned int v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  uint8_t buf[4];
  char *v102;
  __int16 v103;
  uint64_t v104;
  uint8_t v105[48];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  char __str[1024];
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)a1;
  v3 = *(const char **)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 20);
  bzero(__str, 0x400uLL);
  v6 = malloc_type_calloc(1uLL, 0x1F0uLL, 0x10A0040793B1F91uLL);
  v7 = (uint64_t)v6;
  v6[461] = (v5 & 8) != 0;
  *((_DWORD *)v6 + 54) = -270471200;
  v8 = v5 & 2;
  if ((v5 & 8) == 0)
  {
    *((_QWORD *)v6 + 26) = 0;
    *((_OWORD *)v6 + 11) = 0u;
    *((_OWORD *)v6 + 12) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((_OWORD *)v6 + 10) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *(_OWORD *)v6 = 0u;
    pthread_mutex_init((pthread_mutex_t *)v6, 0);
  }
  v93 = v4;
  v94 = v4;
  v92 = v5;
  *(_QWORD *)(v7 + 224) = -1;
  *(_QWORD *)(v7 + 264) = 0;
  *(_QWORD *)(v7 + 288) = -1;
  *(_QWORD *)(v7 + 296) = 0;
  *(_QWORD *)(v7 + 304) = 0;
  *(_QWORD *)(v7 + 312) = -1;
  *(_QWORD *)(v7 + 360) = -1;
  *(_DWORD *)(v7 + 440) = 0;
  *(_QWORD *)(v7 + 424) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v7 + 432) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v7 + 460) = BYTE1(v5) & 1;
  *(_QWORD *)(v7 + 408) = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v7 + 416) = *(_DWORD *)(a1 + 56);
  makeThreadId();
  do
  {
    v9 = __ldxr(exceptionSequenceNum);
    v10 = v9 + 1;
  }
  while (__stxr(v9 + 1, exceptionSequenceNum));
  v11 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11061, v7, 0, v10);
  v100 = HIDWORD(v11);
  *(_DWORD *)buf = v11;
  v98 = v13;
  v99 = v12;
  v14 = *(_QWORD *)&threadData[18 * v11 + 2];
  v15 = v14 + 320 * HIDWORD(v11);
  v95 = *(_DWORD *)(v15 + 312);
  v16 = *(void (**)(_QWORD))(v15 + 224);
  if (v16)
    v16(*(_QWORD *)(v14 + 320 * HIDWORD(v11) + 288));
  v96 = v10;
  v97 = *(_DWORD *)buf;
  if (_setjmp((int *)v15))
  {
    v17 = (_DWORD *)(v15 + 312);
    v18 = *__error();
    v19 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v105 = 136315394;
      *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
      *(_WORD *)&v105[12] = 1024;
      *(_DWORD *)&v105[14] = 1295;
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v105, 0x12u);
    }
    *__error() = v18;
    *v17 = v95;
    CIOnThreadCleanUpReset(v98);
    dropThreadId(v97, 1, v96);
    CICleanUpReset(v97, v99);
    v42 = *__error();
    v43 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      v62 = fd_realpath(*(_DWORD **)(v7 + 240), __str);
      *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
      v63 = "";
      *(_DWORD *)v105 = 136315650;
      if (v62)
        v63 = v62;
      *(_WORD *)&v105[12] = 1024;
      *(_DWORD *)&v105[14] = 1297;
      *(_WORD *)&v105[18] = 2080;
      *(_QWORD *)&v105[20] = v63;
      _os_log_error_impl(&dword_1B8270000, v43, OS_LOG_TYPE_ERROR, "%s:%d: exception processing %s", v105, 0x1Cu);
    }
    *__error() = v42;
LABEL_34:
    data_map_ext_destroy(v7);
    return 0;
  }
  if (!v3 || (v20 = strlen(v3), v2 == -1) || !v20 || v20 >= 0xF1)
  {
    v25 = *__error();
    v26 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v105 = 136315394;
      *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
      *(_WORD *)&v105[12] = 1024;
      *(_DWORD *)&v105[14] = 1007;
      v28 = "%s:%d: param error";
      v29 = 18;
      goto LABEL_55;
    }
LABEL_23:
    v31 = v95;
    v30 = v96;
LABEL_24:
    *__error() = v25;
LABEL_25:
    v32 = 0;
    goto LABEL_26;
  }
  if ((v5 & 2) != 0)
    v21 = 0;
  else
    v21 = ((v5 & 1) << 10) | 0x20000202;
  snprintf(__str, 0x400uLL, "%s.header", v3);
  v22 = fd_create_protected(v2, __str, v21, 3u);
  *(_QWORD *)(v7 + 240) = v22;
  *(_QWORD *)(v7 + 256) = fd_lseek(v22, 0, 2);
  snprintf(__str, 0x400uLL, "%s.offsets", v3);
  v23 = fd_create_protected(v2, __str, v21, 3u);
  *(_QWORD *)(v7 + 272) = v23;
  *(_QWORD *)(v7 + 320) = fd_lseek(v23, 0, 2);
  snprintf(__str, 0x400uLL, "%s.buckets", v3);
  v24 = fd_create_protected(v2, __str, 514, 3u);
  *(_QWORD *)(v7 + 336) = v24;
  *(_QWORD *)(v7 + 344) = fd_lseek(v24, 0, 2);
  if ((v5 & 1) != 0)
  {
    v31 = v95;
    v30 = v96;
    if (fd_truncate(*(_QWORD *)(v7 + 240), 84) == -1)
    {
      v25 = *__error();
      v56 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      *(_DWORD *)v105 = 136315394;
      *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
      *(_WORD *)&v105[12] = 1024;
      *(_DWORD *)&v105[14] = 1094;
      v59 = "%s:%d: fd_truncate error";
      goto LABEL_108;
    }
    v44 = malloc_type_calloc(1uLL, 0x54uLL, 0x10000405C84B8F7uLL);
    *(_QWORD *)(v7 + 256) = 84;
    *(_QWORD *)(v7 + 264) = v44;
    *(_QWORD *)v44 = 0x4461746150EELL;
    v44[2] = 14;
    v44[3] = v4;
    v44[4] = 0;
    v45 = (uint64_t *)MEMORY[0x1E0C85AD8];
    if (fd_truncate(*(_QWORD *)(v7 + 272), 24 * (*MEMORY[0x1E0C85AD8] / 0x18uLL)) == -1)
    {
      v25 = *__error();
      v56 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      *(_DWORD *)v105 = 136315394;
      *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
      *(_WORD *)&v105[12] = 1024;
      *(_DWORD *)&v105[14] = 1109;
      v59 = "%s:%d: fd_truncate error";
      goto LABEL_108;
    }
    v46 = fd_mmap(*(_QWORD *)(v7 + 272));
    *(_QWORD *)(v7 + 288) = v46;
    if (v46 == -1)
    {
      v25 = *__error();
      v56 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      *(_DWORD *)v105 = 136315394;
      *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
      *(_WORD *)&v105[12] = 1024;
      *(_DWORD *)&v105[14] = 1114;
      v59 = "%s:%d: offsets fd_mmap error";
      goto LABEL_108;
    }
    *(_QWORD *)(v7 + 280) = 0x100000;
    v47 = *v45;
    v48 = *v45 / 0x18uLL;
    *(_QWORD *)(v7 + 320) = 24 * v48;
    *(_QWORD *)(v7 + 328) = v48;
    v49 = v47 & 0xFFFFFFFFFFFFFFF8;
    if (fd_truncate(*(_QWORD *)(v7 + 336), v47 & 0xFFFFFFFFFFFFFFF8) == -1)
    {
      v25 = *__error();
      v56 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      *(_DWORD *)v105 = 136315394;
      *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
      *(_WORD *)&v105[12] = 1024;
      *(_DWORD *)&v105[14] = 1124;
      v59 = "%s:%d: fd_truncate error";
      goto LABEL_108;
    }
    v50 = fd_mmap(*(_QWORD *)(v7 + 336));
    *(_QWORD *)(v7 + 360) = v50;
    if (v50 == -1)
    {
      v25 = *__error();
      v56 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      *(_DWORD *)v105 = 136315394;
      *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
      *(_WORD *)&v105[12] = 1024;
      *(_DWORD *)&v105[14] = 1130;
      v59 = "%s:%d: hash fd_mmap error";
      goto LABEL_108;
    }
    *(_QWORD *)(v7 + 344) = v49;
    *(_QWORD *)(v7 + 352) = 0x100000;
    v51 = (unint64_t)*v45 >> 3;
    v52 = *(_QWORD *)(v7 + 264);
    *(_QWORD *)(v52 + 20) = v51;
    *(_QWORD *)(v7 + 368) = v51;
    v53 = *(_QWORD **)(v7 + 288);
    *v53 = 0;
    v53[1] = 0;
    v53[2] = 0;
    *(_QWORD *)(v52 + 28) = 1;
    *(_QWORD *)(v7 + 376) = 1;
    v54 = *(_DWORD *)(v52 + 16);
    if (v54 < 3)
      v55 = v54 + 1;
    else
      v55 = 0;
    SIActivityJournalEvent(*(os_unfair_lock_s **)(v7 + 408), *(_DWORD *)(v7 + 416), 0, v55, 1u);
    goto LABEL_44;
  }
  if (*(_QWORD *)(v7 + 256) <= 0x53uLL)
  {
    v25 = *__error();
    v26 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_QWORD *)(v7 + 256);
      *(_DWORD *)v105 = 136315650;
      *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
      *(_WORD *)&v105[12] = 1024;
      *(_DWORD *)&v105[14] = 1153;
      *(_WORD *)&v105[18] = 2048;
      *(_QWORD *)&v105[20] = v27;
      v28 = "%s:%d: invalid header size %ld";
      v29 = 28;
LABEL_55:
      _os_log_error_impl(&dword_1B8270000, v26, OS_LOG_TYPE_ERROR, v28, v105, v29);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  *(_QWORD *)(v7 + 264) = malloc_type_calloc(1uLL, 0x54uLL, 0x10000405C84B8F7uLL);
  if ((v5 & 0x80) != 0)
  {
    sibling_with_suffix_protected = (char *)fd_create_sibling_with_suffix_protected(*(_QWORD *)(v7 + 240), ".shadow", v21);
    v61 = (v5 >> 2) & 1;
    if (sibling_with_suffix_protected)
    {
      v65 = sibling_with_suffix_protected;
      if (fd_copyfile((uint64_t)sibling_with_suffix_protected, *(_QWORD *)(v7 + 240), 0))
        v61 = (v5 >> 2) & 1;
      else
        v61 = 0;
      fd_release(v65);
    }
  }
  else
  {
    v61 = v5 & 4;
  }
  v66 = fd_pread(*(_DWORD **)(v7 + 240), *(void **)(v7 + 264), 0x54uLL, 0);
  v25 = *__error();
  v67 = _SILogForLogForCategory(0);
  v68 = v67;
  if (v66 != 84)
  {
    v31 = v95;
    v30 = v96;
    if (!os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)v105 = 136315394;
    *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 1173;
    v59 = "%s:%d: header pread error";
    v60 = 18;
    v72 = v68;
LABEL_110:
    _os_log_error_impl(&dword_1B8270000, v72, OS_LOG_TYPE_ERROR, v59, v105, v60);
    goto LABEL_24;
  }
  v69 = os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
  v31 = v95;
  v30 = v96;
  if (v92 < 0)
  {
    if (v69)
    {
      v73 = *(_QWORD *)(*(_QWORD *)(v7 + 264) + 28);
      *(_DWORD *)v105 = 134217984;
      *(_QWORD *)&v105[4] = v73;
      v71 = "recovered next_id: %llu";
      goto LABEL_73;
    }
  }
  else if (v69)
  {
    v70 = *(_QWORD *)(*(_QWORD *)(v7 + 264) + 28);
    *(_DWORD *)v105 = 134217984;
    *(_QWORD *)&v105[4] = v70;
    v71 = "opened next_id: %llu";
LABEL_73:
    _os_log_impl(&dword_1B8270000, v68, OS_LOG_TYPE_DEFAULT, v71, v105, 0xCu);
  }
  *__error() = v25;
  v74 = *(_QWORD *)(v7 + 264);
  if (*(_QWORD *)v74 != 0x4461746150EELL)
    goto LABEL_25;
  *(_QWORD *)(v7 + 328) = *(_QWORD *)(v7 + 320) / 0x18uLL;
  *(_OWORD *)(v7 + 368) = *(_OWORD *)(v74 + 20);
  *(_OWORD *)(v7 + 384) = *(_OWORD *)(v74 + 60);
  *(_QWORD *)(v7 + 400) = *(_QWORD *)(v74 + 76);
  v4 = v94;
  if (v61)
  {
    v75 = *__error();
    v76 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      v77 = *(_QWORD *)(*(_QWORD *)(v7 + 264) + 52);
      *(_DWORD *)v105 = 134217984;
      *(_QWORD *)&v105[4] = v77;
      _os_log_impl(&dword_1B8270000, v76, OS_LOG_TYPE_DEFAULT, "use_shadow next_id: %llu", v105, 0xCu);
    }
    *__error() = v75;
    v78 = *(_QWORD *)(v7 + 376);
    v79 = *(_QWORD *)(v7 + 264);
    v80 = *(_QWORD *)(v79 + 52);
    if (v78 < v80)
      goto LABEL_25;
    if (v78 != v80)
    {
      if (!v8)
      {
        *(_QWORD *)(v79 + 28) = v80;
        *(_QWORD *)(v79 + 20) = 0;
      }
      *(_QWORD *)(v7 + 368) = 0;
      *(_QWORD *)(v7 + 376) = v80;
    }
  }
  v83 = (_QWORD *)MEMORY[0x1E0C85AD8];
  if (((unint64_t)(*(_QWORD *)(v7 + 320) + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8]) <= 0x100000)
    v84 = 0x100000;
  else
    v84 = (*(_QWORD *)(v7 + 320) + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
  v85 = fd_mmap(*(_QWORD *)(v7 + 272));
  *(_QWORD *)(v7 + 288) = v85;
  if (v85 == -1)
  {
    v25 = *__error();
    v56 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)v105 = 136315394;
    *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 1218;
    v59 = "%s:%d: offset fd_mmap error";
    goto LABEL_108;
  }
  *(_QWORD *)(v7 + 280) = v84;
  if (((unint64_t)(*(_QWORD *)(v7 + 344) + *v83 - 1) & -*v83) <= 0x100000)
    v86 = 0x100000;
  else
    v86 = (*(_QWORD *)(v7 + 344) + *v83 - 1) & -*v83;
  v87 = fd_mmap(*(_QWORD *)(v7 + 336));
  *(_QWORD *)(v7 + 360) = v87;
  if (v87 == -1)
  {
    v25 = *__error();
    v56 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)v105 = 136315394;
    *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 1227;
    v59 = "%s:%d: offset fd_mmap error";
    goto LABEL_108;
  }
  *(_QWORD *)(v7 + 352) = v86;
  v88 = *(_QWORD *)(v7 + 264);
  if (!*(_QWORD *)(v88 + 28))
  {
    *(_QWORD *)(v88 + 28) = 1;
    *(_QWORD *)(v7 + 376) = 1;
  }
LABEL_44:
  if (*(_QWORD *)(v7 + 328) < *(_QWORD *)(v7 + 376))
  {
    v25 = *__error();
    v56 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    v57 = *(_QWORD *)(v7 + 328);
    v58 = *(_QWORD *)(v7 + 376);
    *(_DWORD *)v105 = 136315906;
    *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 1248;
    *(_WORD *)&v105[18] = 2048;
    *(_QWORD *)&v105[20] = v57;
    *(_WORD *)&v105[28] = 2048;
    *(_QWORD *)&v105[30] = v58;
    v59 = "%s:%d: invalid offset size 1 - %lld %lld";
    v60 = 38;
    goto LABEL_109;
  }
  v81 = *(_QWORD *)(v7 + 264);
  if (*(_QWORD *)v81 != 0x4461746150EELL)
  {
    v25 = *__error();
    v56 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)v105 = 136315394;
    *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 1252;
    v59 = "%s:%d: invalid offset signature";
    goto LABEL_108;
  }
  v82 = *(_DWORD *)(v81 + 8);
  if (v82 <= 0xD)
  {
    v25 = *__error();
    v56 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)v105 = 136315650;
    *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 1258;
    *(_WORD *)&v105[18] = 1024;
    *(_DWORD *)&v105[20] = v82;
    v59 = "%s:%d: invalid version %d";
    v60 = 24;
    goto LABEL_109;
  }
  if (*(_DWORD *)(v81 + 12) != v4)
  {
    v25 = *__error();
    v56 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    v89 = *(_DWORD *)(*(_QWORD *)(v7 + 264) + 12);
    *(_DWORD *)v105 = 136315906;
    *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 1262;
    *(_WORD *)&v105[18] = 1024;
    *(_DWORD *)&v105[20] = v89;
    *(_WORD *)&v105[24] = 1024;
    *(_DWORD *)&v105[26] = v93;
    v59 = "%s:%d: invalid extra_size %d %d";
    v60 = 30;
    goto LABEL_109;
  }
  *(_DWORD *)(v7 + 220) = v93;
  if (*(_QWORD *)(v7 + 256) <= 0x53uLL)
  {
    v25 = *__error();
    v56 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)v105 = 136315394;
    *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 1270;
    v59 = "%s:%d: invalid header size";
    goto LABEL_108;
  }
  if (v92 < 0
    || !*(_DWORD *)(v81 + 16)
    || (v90 = *(_QWORD *)(v7 + 368)) == 0
    || (v91 = *(_QWORD *)(v7 + 344), v91 < 8 * v90))
  {
    if (!_data_map_ext_rehash(v7))
    {
      v25 = *__error();
      v56 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      *(_DWORD *)v105 = 136315394;
      *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
      *(_WORD *)&v105[12] = 1024;
      *(_DWORD *)&v105[14] = 1276;
      v59 = "%s:%d: re-build hash error";
LABEL_108:
      v60 = 18;
LABEL_109:
      v72 = v56;
      goto LABEL_110;
    }
    v91 = *(_QWORD *)(v7 + 344);
    v90 = *(_QWORD *)(v7 + 368);
  }
  if (v91 < 8 * v90)
  {
    v25 = *__error();
    v56 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    *(_DWORD *)v105 = 136315394;
    *(_QWORD *)&v105[4] = "data_map_ext_init_with_ctx";
    *(_WORD *)&v105[12] = 1024;
    *(_DWORD *)&v105[14] = 1283;
    v59 = "%s:%d: invalid hash size 1";
    goto LABEL_108;
  }
  v32 = 1;
LABEL_26:
  v33 = *(_QWORD *)&threadData[18 * v97 + 2];
  v34 = v33 + 320 * v100;
  *(_DWORD *)(v34 + 312) = v31;
  v35 = *(void (**)(_QWORD))(v34 + 232);
  if (v35)
    v35(*(_QWORD *)(v33 + 320 * v100 + 288));
  dropThreadId(v97, 0, v30);
  if ((v32 & 1) == 0)
    goto LABEL_34;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v106 = 0u;
  memset(v105, 0, sizeof(v105));
  v36 = *__error();
  v37 = _SILogForLogForCategory(7);
  v38 = 2 * (dword_1EF19FCA8 < 4);
  if (os_log_type_enabled(v37, v38))
  {
    v39 = fd_name(*(_QWORD *)(v7 + 240), (char *)v105, 0x100uLL);
    v40 = *(_QWORD *)(v7 + 376) - 1;
    *(_DWORD *)buf = 136315394;
    v102 = v39;
    v103 = 2048;
    v104 = v40;
    _os_log_impl(&dword_1B8270000, v37, v38, "Opened map %s with counts: %lld", buf, 0x16u);
  }
  *__error() = v36;
  return v7;
}

uint64_t _data_map_ext_rehash(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *bucket_entry;
  uint64_t result;
  int v25;
  NSObject *v26;
  int v27;
  NSObject *v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  char *v46;
  uint8_t buf[64];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 392) = 0;
  v2 = *(_QWORD *)(a1 + 376) - *(_QWORD *)(a1 + 384);
  v3 = *__error();
  v4 = _SILogForLogForCategory(0);
  v5 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v4, v5))
  {
    v7 = *(_QWORD *)(a1 + 376);
    v6 = *(_QWORD *)(a1 + 384);
    v8 = *(_QWORD *)(a1 + 368);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v7;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = v6;
    *(_WORD *)&buf[32] = 2048;
    *(_QWORD *)&buf[34] = v2;
    *(_WORD *)&buf[42] = 2048;
    *(_QWORD *)&buf[44] = v8;
    _os_log_impl(&dword_1B8270000, v4, v5, "rehash %p max id: %lld deletes: %lld count: %lld hash_size: %lld", buf, 0x34u);
  }
  *__error() = v3;
  v9 = *(_QWORD *)(a1 + 264);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 16);
    if (v10 < 3)
      v11 = v10 + 1;
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 3u, v11, *(_DWORD *)(a1 + 376));
  msync(*(void **)(a1 + 360), 8 * *(_QWORD *)(a1 + 368), 4);
  if (fd_truncate(*(_QWORD *)(a1 + 336), 0) == -1)
    goto LABEL_31;
  v12 = 2 * v2;
  if ((unint64_t)(2 * v2) <= *MEMORY[0x1E0C85AD8] >> 3)
    v12 = *MEMORY[0x1E0C85AD8] >> 3;
  *(_QWORD *)(a1 + 368) = v12;
  v13 = 8 * v12;
  if (fd_truncate(*(_QWORD *)(a1 + 336), 8 * v12) == -1)
    goto LABEL_31;
  if (!*(_BYTE *)(a1 + 458))
  {
    _data_map_ext_dirty(a1);
    *(_BYTE *)(a1 + 458) = 1;
  }
  *(_QWORD *)(a1 + 344) = v13;
  v14 = *(_QWORD *)(a1 + 352);
  if (v13 > v14)
  {
    v15 = *(_QWORD *)(a1 + 352);
    do
    {
      v16 = v15;
      v15 *= 2;
    }
    while (v16 < v13);
    munmap(*(void **)(a1 + 360), v14);
    *(_QWORD *)(a1 + 352) = 0;
    *(_QWORD *)(a1 + 360) = -1;
    v17 = fd_mmap(*(_QWORD *)(a1 + 336));
    *(_QWORD *)(a1 + 360) = v17;
    if (v17 == -1)
      goto LABEL_31;
    *(_QWORD *)(a1 + 352) = v16;
  }
  v18 = *(_QWORD *)(a1 + 376);
  if (v18 < 2)
    return 1;
  v19 = 0;
  v20 = 1;
  while (1)
  {
    v21 = *(_QWORD *)(a1 + 288);
    if ((unint64_t)(v21 + 1) <= 1)
      break;
    v22 = v21 + v19;
    if (*(_QWORD *)(v22 + 24) != -2)
    {
      bucket_entry = (_QWORD *)_data_map_ext_get_bucket_entry(a1, *(_QWORD *)(v22 + 40), v20, 0, 0);
      if (!bucket_entry || *bucket_entry)
        goto LABEL_31;
      *bucket_entry = v20;
      v18 = *(_QWORD *)(a1 + 376);
    }
    ++v20;
    v19 += 24;
    if (v20 >= v18)
      return 1;
  }
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  memset(buf, 0, sizeof(buf));
  v25 = *__error();
  v26 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    v30 = *(_QWORD *)(a1 + 376);
    v31 = *(_QWORD *)(a1 + 288);
    v32 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
    v33 = 136316674;
    v34 = "_data_map_ext_get_offset_entry";
    v35 = 1024;
    v36 = 409;
    v37 = 2048;
    v38 = v20;
    v39 = 2048;
    v40 = v30;
    v41 = 2048;
    v42 = a1;
    v43 = 2048;
    v44 = v31;
    v45 = 2080;
    v46 = v32;
    _os_log_error_impl(&dword_1B8270000, v26, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", (uint8_t *)&v33, 0x44u);
  }
  *__error() = v25;
LABEL_31:
  v27 = *__error();
  v28 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "_data_map_ext_rehash";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 637;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = a1;
    _os_log_error_impl(&dword_1B8270000, v28, OS_LOG_TYPE_ERROR, "%s:%d: re-build hash error %p", buf, 0x1Cu);
  }
  v29 = __error();
  result = 0;
  *v29 = v27;
  return result;
}

void data_map_ext_destroy(uint64_t a1)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(_QWORD);
  _DWORD *v11;
  int v12;
  NSObject *v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void (*v22)(_QWORD);
  _DWORD *v23;
  int v24;
  NSObject *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD);
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD);
  size_t v40;
  char *v41;
  _QWORD *v42;
  const void *v43;
  const void *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  char v53;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    makeThreadId();
    if ((unint64_t)(*(_QWORD *)(a1 + 224) + 1) > 1)
    {
      v53 = 0;
      do
      {
        v14 = __ldxr(exceptionSequenceNum);
        v15 = v14 + 1;
      }
      while (__stxr(v14 + 1, exceptionSequenceNum));
      v16 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11061, a1, 0, v15);
      v50 = HIDWORD(v16);
      v52 = v16;
      v46 = v18;
      v48 = v17;
      v19 = *(_QWORD *)&threadData[18 * v16 + 2];
      v20 = v19 + 320 * HIDWORD(v16);
      v21 = *(_DWORD *)(v20 + 312);
      v22 = *(void (**)(_QWORD))(v20 + 224);
      if (v22)
        v22(*(_QWORD *)(v19 + 320 * HIDWORD(v16) + 288));
      if (_setjmp((int *)v20))
      {
        v23 = (_DWORD *)(v20 + 312);
        v24 = *__error();
        v25 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v55 = "data_map_ext_destroy";
          v56 = 1024;
          v57 = 1694;
          _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
        }
        *__error() = v24;
        *v23 = v21;
        CIOnThreadCleanUpReset(v46);
        dropThreadId(v52, 1, v15);
        CICleanUpReset(v52, v48);
        v26 = 0;
      }
      else
      {
        v36 = *(_QWORD *)(*(_QWORD *)(a1 + 224) + 88);
        v53 = 1;
        v37 = *(_QWORD *)&threadData[18 * v52 + 2];
        v38 = v37 + 320 * v50;
        *(_DWORD *)(v38 + 312) = v21;
        v39 = *(void (**)(_QWORD))(v38 + 232);
        if (v39)
          v39(*(_QWORD *)(v37 + 320 * v50 + 288));
        dropThreadId(v52, 0, v15);
        v26 = v36;
      }
      v40 = v26;
      if (!v53)
        v40 = *(_QWORD *)(a1 + 232);
      munmap(*(void **)(a1 + 224), v40);
      *(_QWORD *)(a1 + 224) = -1;
      fd_release(*(char **)(a1 + 240));
      *(_QWORD *)(a1 + 240) = 0;
      v41 = *(char **)(a1 + 248);
      if (v41)
      {
        fd_release(v41);
        *(_QWORD *)(a1 + 248) = 0;
      }
    }
    else
    {
      do
      {
        v2 = __ldxr(exceptionSequenceNum);
        v3 = v2 + 1;
      }
      while (__stxr(v2 + 1, exceptionSequenceNum));
      v4 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11061, a1, 0, v3);
      v49 = HIDWORD(v4);
      v51 = v4;
      v45 = v6;
      v47 = v5;
      v7 = *(_QWORD *)&threadData[18 * v4 + 2];
      v8 = v7 + 320 * HIDWORD(v4);
      v9 = *(_DWORD *)(v8 + 312);
      v10 = *(void (**)(_QWORD))(v8 + 224);
      if (v10)
        v10(*(_QWORD *)(v7 + 320 * HIDWORD(v4) + 288));
      if (_setjmp((int *)v8))
      {
        v11 = (_DWORD *)(v8 + 312);
        v12 = *__error();
        v13 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v55 = "data_map_ext_destroy";
          v56 = 1024;
          v57 = 1739;
          _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
        }
        *__error() = v12;
        *v11 = v9;
        CIOnThreadCleanUpReset(v45);
        dropThreadId(v51, 1, v3);
        CICleanUpReset(v51, v47);
      }
      else
      {
        v27 = *(_QWORD *)(a1 + 264);
        if (v27 && !*(_DWORD *)(v27 + 16))
        {
          if (*(_BYTE *)(a1 + 458))
          {
            msync(*(void **)(a1 + 360), 8 * *(_QWORD *)(a1 + 368), 4);
            _fd_unlink_with_origin(*(_QWORD *)(a1 + 336), 0);
            munmap(*(void **)(a1 + 360), *(_QWORD *)(a1 + 352));
            *(_QWORD *)(a1 + 360) = -1;
          }
          if (*(_BYTE *)(a1 + 459))
          {
            msync(*(void **)(a1 + 288), 24 * *(_QWORD *)(a1 + 376), 4);
            munmap(*(void **)(a1 + 288), *(_QWORD *)(a1 + 280));
            *(_QWORD *)(a1 + 288) = -1;
            fd_truncate(*(_QWORD *)(a1 + 272), 24 * *(_QWORD *)(a1 + 376));
          }
        }
        v28 = *(_QWORD *)&threadData[18 * v51 + 2];
        v29 = v28 + 320 * v49;
        *(_DWORD *)(v29 + 312) = v9;
        v30 = *(void (**)(_QWORD))(v29 + 232);
        if (v30)
          v30(*(_QWORD *)(v28 + 320 * v49 + 288));
        dropThreadId(v51, 0, v3);
      }
      v31 = *(void **)(a1 + 264);
      if (v31)
      {
        free(v31);
        *(_QWORD *)(a1 + 264) = 0;
      }
      fd_release(*(char **)(a1 + 240));
      *(_QWORD *)(a1 + 240) = 0;
      v32 = *(void **)(a1 + 288);
      if (v32 != (void *)-1)
      {
        munmap(v32, *(_QWORD *)(a1 + 280));
        *(_QWORD *)(a1 + 280) = 0;
        *(_QWORD *)(a1 + 288) = -1;
      }
      fd_release(*(char **)(a1 + 272));
      *(_QWORD *)(a1 + 272) = 0;
      if (*(_QWORD *)(a1 + 296))
      {
        v33 = *(void **)(a1 + 312);
        v34 = *(_QWORD *)(a1 + 296);
        if ((unint64_t)v33 + 1 >= 2)
        {
          msync(v33, 24 * *(_QWORD *)(a1 + 376), 4);
          munmap(*(void **)(a1 + 312), *(_QWORD *)(a1 + 280));
          *(_QWORD *)(a1 + 312) = -1;
          v34 = *(_QWORD *)(a1 + 296);
        }
        fd_truncate(v34, 0);
        _fd_unlink_with_origin(*(_QWORD *)(a1 + 296), 0);
        fd_release(*(char **)(a1 + 296));
        *(_QWORD *)(a1 + 296) = 0;
      }
      v35 = *(void **)(a1 + 360);
      if (v35 != (void *)-1)
      {
        munmap(v35, *(_QWORD *)(a1 + 352));
        *(_QWORD *)(a1 + 352) = 0;
        *(_QWORD *)(a1 + 360) = -1;
      }
      fd_release(*(char **)(a1 + 336));
      *(_QWORD *)(a1 + 336) = 0;
    }
    v42 = *(_QWORD **)(a1 + 448);
    if (v42)
    {
      v43 = (const void *)v42[2];
      if (v43)
        CFRelease(v43);
      free(v42);
      *(_QWORD *)(a1 + 448) = 0;
    }
    v44 = *(const void **)(a1 + 480);
    if (v44)
      CFRelease(v44);
    if (!*(_BYTE *)(a1 + 461))
      db_rwlock_destroy((pthread_mutex_t *)a1);
    free((void *)a1);
  }
}

uint64_t _data_map_ext_dirty(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 264);
  if (*(_DWORD *)(v1 + 16))
  {
    v2 = result;
    *(_DWORD *)(v1 + 16) = 0;
    fd_pwrite(*(_QWORD *)(result + 240), v1, 0x54uLL, 0);
    return fd_sync(*(_QWORD *)(v2 + 240), 0);
  }
  return result;
}

uint64_t _data_map_ext_get_bucket_entry(uint64_t a1, unint64_t a2, unint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t contentindex_for_id;
  unsigned int v26;
  const __CFDictionary *v27;
  const __CFData *Value;
  const __CFData *v29;
  int v30;
  NSObject *v31;
  int v32;
  NSObject *v33;
  int v34;
  NSObject *v35;
  char *v36;
  char *v37;
  char v38;
  int v39;
  NSObject *v40;
  int *v41;
  uint64_t result;
  int v43;
  NSObject *v44;
  int *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v57;
  void *__s2;
  int v59;
  uint8_t v60[4];
  const char *v61;
  __int16 v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  char *v69;
  __int16 v70;
  char *v71;
  __int16 v72;
  char *v73;
  uint8_t buf[64];
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 376) > a3)
  {
    v7 = a5;
    v8 = a2;
    v9 = 0;
    v10 = *(_QWORD *)(a1 + 368);
    v11 = a2 % v10;
    v12 = v10;
    v51 = v10;
    while (1)
    {
      v13 = v11;
      v14 = v11;
      if (v11 < v12)
        break;
LABEL_36:
      v11 = 0;
      v38 = v9 | (v14 != v10);
      v9 = 1;
      v12 = v13;
      if ((v38 & 1) != 0)
        return 0;
    }
    v53 = v9;
    v52 = v11;
    while (1)
    {
      v15 = *(_QWORD *)(a1 + 360);
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
        v17 = v16 == a3;
      else
        v17 = 1;
      if (v17)
        return v15 + 8 * v13;
      if (!a3)
      {
        if (*(_QWORD *)(a1 + 376) <= v16 || (v18 = *(_QWORD *)(a1 + 288), (unint64_t)(v18 + 1) <= 1))
        {
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v77 = 0u;
          v78 = 0u;
          v75 = 0u;
          v76 = 0u;
          memset(buf, 0, sizeof(buf));
          v43 = *__error();
          v44 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            v48 = *(_QWORD *)(a1 + 376);
            v49 = *(char **)(a1 + 288);
            v50 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
            *(_DWORD *)v60 = 136316674;
            v61 = "_data_map_ext_get_offset_entry";
            v62 = 1024;
            v63 = 409;
            v64 = 2048;
            v65 = v16;
            v66 = 2048;
            v67 = v48;
            v68 = 2048;
            v69 = (char *)a1;
            v70 = 2048;
            v71 = v49;
            v72 = 2080;
            v73 = v50;
            _os_log_error_impl(&dword_1B8270000, v44, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", v60, 0x44u);
          }
          v45 = __error();
          result = 0;
          *v45 = v43;
          return result;
        }
        v19 = v18 + 24 * v16;
        v20 = *(_QWORD *)v19;
        if (*(_QWORD *)v19 == -2)
          return 0;
        if (*(_QWORD *)(v18 + 24 * v16 + 16) == v8)
        {
          v21 = *(unsigned int *)(a1 + 220);
          HIDWORD(v57) = 0;
          __s2 = 0;
          if (v20 == -1)
          {
            v27 = *(const __CFDictionary **)(a1 + 480);
            if (!v27)
            {
              v85 = 0u;
              v86 = 0u;
              v83 = 0u;
              v84 = 0u;
              v81 = 0u;
              v82 = 0u;
              v79 = 0u;
              v80 = 0u;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              memset(buf, 0, sizeof(buf));
              v32 = *__error();
              v33 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
              {
                v36 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
                *(_DWORD *)v60 = 136316162;
                v61 = "_data_map_ext_get_data_entry";
                v62 = 1024;
                v63 = 449;
                v64 = 2048;
                v65 = -1;
                v66 = 2048;
                v67 = a1;
                v68 = 2080;
                v69 = v36;
                _os_log_error_impl(&dword_1B8270000, v33, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", v60, 0x30u);
              }
              *__error() = v32;
              fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
              si_analytics_log_2064("(2)invalid data offset 0x%lx %p %s");
              goto LABEL_33;
            }
            Value = (const __CFData *)CFDictionaryGetValue(v27, (const void *)v16);
            if (!Value)
            {
              v85 = 0u;
              v86 = 0u;
              v83 = 0u;
              v84 = 0u;
              v81 = 0u;
              v82 = 0u;
              v79 = 0u;
              v80 = 0u;
              v77 = 0u;
              v78 = 0u;
              v75 = 0u;
              v76 = 0u;
              memset(buf, 0, sizeof(buf));
              v34 = *__error();
              v35 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
              {
                v37 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
                *(_DWORD *)v60 = 136316162;
                v61 = "_data_map_ext_get_data_entry";
                v62 = 1024;
                v63 = 443;
                v64 = 2048;
                v65 = -1;
                v66 = 2048;
                v67 = a1;
                v68 = 2080;
                v69 = v37;
                _os_log_error_impl(&dword_1B8270000, v35, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", v60, 0x30u);
              }
              *__error() = v34;
              fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
              si_analytics_log_2064("(1)invalid data offset 0x%lx %p %s");
              goto LABEL_33;
            }
            v29 = Value;
            v26 = CFDataGetLength(Value) - *(_DWORD *)(a1 + 220);
            __s2 = (void *)&CFDataGetBytePtr(v29)[*(unsigned int *)(a1 + 220)];
            CFDataGetBytePtr(v29);
            __memcpy_chk();
          }
          else
          {
            v22 = *(_DWORD *)(v19 + 8);
            v23 = *(_DWORD *)(v19 + 12);
            v24 = *(_QWORD *)(a1 + 472);
            *(_DWORD *)v60 = 0;
            contentindex_for_id = si_get_contentindex_for_id(v24, v22);
            v59 = 0;
            if (!contentindex_for_id)
            {
              v30 = *__error();
              v31 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136316418;
                *(_QWORD *)&buf[4] = "data_entry_restore";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 389;
                *(_WORD *)&buf[18] = 2048;
                *(_QWORD *)&buf[20] = v16;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v22;
                *(_WORD *)&buf[34] = 2048;
                *(_QWORD *)&buf[36] = v20;
                *(_WORD *)&buf[44] = 1024;
                *(_DWORD *)&buf[46] = v23;
                _os_log_error_impl(&dword_1B8270000, v31, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid index_id %u offset 0x%llx meta 0x%x", buf, 0x32u);
              }
              *__error() = v30;
              v7 = a5;
LABEL_33:
              v8 = a2;
              goto LABEL_34;
            }
            __s2 = (void *)ContentIndexGetDataForId(*(_QWORD *)(contentindex_for_id + 4896), v20, v23, (uint64_t)&v59, (uint64_t)v60);
            v26 = *(_DWORD *)v60;
            HIDWORD(v57) = v59;
            v7 = a5;
          }
          v8 = a2;
          if (v26 + (_DWORD)v21 == v7
            && !memcmp(&a4[*(unsigned int *)(a1 + 220)], __s2, v26)
            && !memcmp(a4, (char *)&v57 + 4, v21))
          {
            return v15 + 8 * v13;
          }
        }
      }
LABEL_34:
      if (v12 == ++v13)
      {
        v14 = v12;
        v10 = v51;
        v9 = v53;
        v13 = v52;
        goto LABEL_36;
      }
    }
  }
  if (!a3)
    return 0;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  memset(buf, 0, sizeof(buf));
  v39 = *__error();
  v40 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
  {
    v46 = *(_QWORD *)(a1 + 376);
    v47 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
    *(_DWORD *)v60 = 136316418;
    v61 = "_data_map_ext_get_bucket_entry";
    v62 = 1024;
    v63 = 523;
    v64 = 2048;
    v65 = a3;
    v66 = 2048;
    v67 = v46;
    v68 = 2048;
    v69 = (char *)a1;
    v70 = 2080;
    v71 = v47;
    _os_log_error_impl(&dword_1B8270000, v40, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p %s", v60, 0x3Au);
  }
  v41 = __error();
  result = 0;
  *v41 = v39;
  return result;
}

uint64_t _data_map_ext_match_address(uint64_t result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;

  if (result)
  {
    v3 = (_QWORD *)result;
    v4 = *(_QWORD *)(result + 224);
    if (v4 != -1)
    {
      if (v4)
      {
        if (v4 <= a2)
        {
          v5 = *(_QWORD *)(result + 232);
          if (v4 + v5 > a2)
          {
            v6 = *(_QWORD *)(result + 240);
            v7 = "data ro header";
            v8 = a2;
            v9 = v3[29];
LABEL_29:
            log_map_access_error_5220(v8, v4, v5, v9, (uint64_t)v7, v6);
            return 1;
          }
        }
      }
      return 0;
    }
    v10 = *(_QWORD *)(result + 472);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 1384);
      if (*(_DWORD *)(v11 + 8))
      {
        v12 = 0;
        while ((_indexMatchAddress(*(_QWORD *)(*(_QWORD *)v11 + 8 * v12), a2) & 1) == 0)
        {
          ++v12;
          v11 = *(_QWORD *)(v10 + 1384);
          if (v12 >= *(unsigned int *)(v11 + 8))
            goto LABEL_12;
        }
        return 1;
      }
LABEL_12:
      v13 = *(_QWORD *)(v10 + 1392);
      if (*(_DWORD *)(v13 + 8))
      {
        v14 = 0;
        while ((_indexMatchAddress(*(_QWORD *)(*(_QWORD *)v13 + 8 * v14), a2) & 1) == 0)
        {
          ++v14;
          v13 = *(_QWORD *)(v10 + 1392);
          if (v14 >= *(unsigned int *)(v13 + 8))
            goto LABEL_16;
        }
        return 1;
      }
    }
LABEL_16:
    v4 = v3[36];
    v15 = v4 + 1 < 2 || v4 > a2;
    if (v15 || (v5 = v3[35], v4 + v5 <= a2))
    {
      v4 = v3[45];
      if (v4 + 1 < 2)
        return 0;
      if (v4 > a2)
        return 0;
      v5 = v3[44];
      if (v4 + v5 <= a2)
        return 0;
      v6 = v3[42];
      v9 = v3[43];
      v7 = "data buckets";
    }
    else
    {
      v9 = v3[40];
      v6 = v3[34];
      v7 = "data offsets";
    }
    v8 = a2;
    goto LABEL_29;
  }
  return result;
}

uint64_t _data_map_ext_sync_data(uint64_t a1)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(_QWORD);
  _DWORD *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  os_log_type_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD);
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  uint8_t v33[4];
  char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[32];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  makeThreadId();
  do
  {
    v2 = __ldxr(exceptionSequenceNum);
    v3 = v2 + 1;
  }
  while (__stxr(v2 + 1, exceptionSequenceNum));
  v4 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11061, a1, 0, v3);
  v30 = HIDWORD(v4);
  v31 = v4;
  v28 = v6;
  v29 = v5;
  v7 = *(_QWORD *)&threadData[18 * v4 + 2];
  v8 = v7 + 320 * HIDWORD(v4);
  v9 = *(_DWORD *)(v8 + 312);
  v10 = *(void (**)(_QWORD))(v8 + 224);
  if (v10)
    v10(*(_QWORD *)(v7 + 320 * HIDWORD(v4) + 288));
  if (_setjmp((int *)v8))
  {
    v11 = (_DWORD *)(v8 + 312);
    v12 = *__error();
    v13 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "_data_map_ext_sync_data";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1421;
      _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v12;
    *v11 = v9;
    CIOnThreadCleanUpReset(v28);
    dropThreadId(v31, 1, v3);
    CICleanUpReset(v31, v29);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 464))
    {
      v14 = *(_QWORD *)(a1 + 264);
      if (!*(_DWORD *)(v14 + 16))
      {
        if (*(_BYTE *)(a1 + 457))
          *(_BYTE *)(a1 + 457) = 0;
        if (*(_BYTE *)(a1 + 459))
        {
          msync((void *)((*(_QWORD *)(a1 + 288) + 24 * *(_QWORD *)(v14 + 52)) & -*MEMORY[0x1E0C85AD8]), 24 * (*(_QWORD *)(a1 + 376) - *(_QWORD *)(v14 + 52)), 16);
          *(_BYTE *)(a1 + 459) = 0;
        }
        if (*(_BYTE *)(a1 + 458))
        {
          msync(*(void **)(a1 + 360), 8 * *(_QWORD *)(a1 + 368), 16);
          *(_BYTE *)(a1 + 458) = 0;
        }
        v15 = *__error();
        v16 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          v17 = *(_QWORD *)(a1 + 376);
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v17;
          _os_log_impl(&dword_1B8270000, v16, OS_LOG_TYPE_DEFAULT, "sd update next_id = %lld", buf, 0xCu);
        }
        *__error() = v15;
        v18 = *(_QWORD *)(a1 + 264);
        *(_OWORD *)(v18 + 20) = *(_OWORD *)(a1 + 368);
        *(_OWORD *)(v18 + 60) = *(_OWORD *)(a1 + 384);
        *(_QWORD *)(v18 + 76) = *(_QWORD *)(a1 + 400);
        *(_DWORD *)(v18 + 16) = 0;
        fd_pwrite(*(_QWORD *)(a1 + 240), v18, 0x54uLL, 0);
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        memset(buf, 0, sizeof(buf));
        v19 = *__error();
        v20 = _SILogForLogForCategory(7);
        v21 = 2 * (dword_1EF19FCA8 < 4);
        if (os_log_type_enabled(v20, v21))
        {
          v22 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
          v23 = *(_QWORD *)(a1 + 376) - 1;
          *(_DWORD *)v33 = 136315650;
          v34 = v22;
          v35 = 2080;
          v36 = "sync";
          v37 = 2048;
          v38 = v23;
          _os_log_impl(&dword_1B8270000, v20, v21, "%s complete %s map with count: %lld", v33, 0x20u);
        }
        *__error() = v19;
      }
    }
    v32 = 1;
    v24 = *(_QWORD *)&threadData[18 * v31 + 2];
    v25 = v24 + 320 * v30;
    *(_DWORD *)(v25 + 312) = v9;
    v26 = *(void (**)(_QWORD))(v25 + 232);
    if (v26)
      v26(*(_QWORD *)(v24 + 320 * v30 + 288));
    dropThreadId(v31, 0, v3);
  }
  if (v32)
    return *(unsigned int *)(a1 + 464);
  *(_DWORD *)(a1 + 464) = 22;
  return 22;
}

uint64_t _data_map_ext_sync_header(uint64_t a1)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(_QWORD);
  int v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  os_log_type_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD);
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  uint8_t buf[4];
  char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  uint8_t v34[32];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  makeThreadId();
  do
  {
    v2 = __ldxr(exceptionSequenceNum);
    v3 = v2 + 1;
  }
  while (__stxr(v2 + 1, exceptionSequenceNum));
  v4 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11061, a1, 0, v3);
  v25 = HIDWORD(v4);
  v26 = v4;
  v23 = v6;
  v24 = v5;
  v7 = *(_QWORD *)&threadData[18 * v4 + 2];
  v8 = v7 + 320 * HIDWORD(v4);
  v9 = *(_DWORD *)(v8 + 312);
  v10 = *(void (**)(_QWORD))(v8 + 224);
  if (v10)
    v10(*(_QWORD *)(v7 + 320 * HIDWORD(v4) + 288));
  if (_setjmp((int *)v8))
  {
    v11 = *__error();
    v12 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v34 = 136315394;
      *(_QWORD *)&v34[4] = "_data_map_ext_sync_header";
      *(_WORD *)&v34[12] = 1024;
      *(_DWORD *)&v34[14] = 1458;
      _os_log_error_impl(&dword_1B8270000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v34, 0x12u);
    }
    *__error() = v11;
    *(_DWORD *)(v8 + 312) = v9;
    CIOnThreadCleanUpReset(v23);
    dropThreadId(v26, 1, v3);
    CICleanUpReset(v26, v24);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 464))
    {
      v13 = *(_QWORD *)(a1 + 264);
      if (*(_DWORD *)(v13 + 16) != 1)
      {
        *(_OWORD *)(v13 + 44) = *(_OWORD *)(v13 + 20);
        *(_OWORD *)(v13 + 20) = *(_OWORD *)(a1 + 368);
        *(_DWORD *)(v13 + 16) = 0;
        fd_pwrite(*(_QWORD *)(a1 + 240), v13, 0x54uLL, 0);
        fd_sync(*(_QWORD *)(a1 + 240), 0);
        *(_DWORD *)(*(_QWORD *)(a1 + 264) + 16) = 2;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        memset(v34, 0, sizeof(v34));
        v14 = *__error();
        v15 = _SILogForLogForCategory(7);
        v16 = 2 * (dword_1EF19FCA8 < 4);
        if (os_log_type_enabled(v15, v16))
        {
          v17 = fd_name(*(_QWORD *)(a1 + 240), (char *)v34, 0x100uLL);
          v18 = *(_QWORD *)(a1 + 376) - 1;
          *(_DWORD *)buf = 136315650;
          v29 = v17;
          v30 = 2080;
          v31 = "sync";
          v32 = 2048;
          v33 = v18;
          _os_log_impl(&dword_1B8270000, v15, v16, "%s complete %s header with count: %llu", buf, 0x20u);
        }
        *__error() = v14;
      }
    }
    v27 = 1;
    v19 = *(_QWORD *)&threadData[18 * v26 + 2];
    v20 = v19 + 320 * v25;
    *(_DWORD *)(v20 + 312) = v9;
    v21 = *(void (**)(_QWORD))(v20 + 232);
    if (v21)
      v21(*(_QWORD *)(v19 + 320 * v25 + 288));
    dropThreadId(v26, 0, v3);
  }
  if (v27)
    return *(unsigned int *)(a1 + 464);
  *(_DWORD *)(a1 + 464) = 22;
  return 22;
}

uint64_t _data_map_ext_commit(uint64_t a1)
{
  unsigned int v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(_QWORD);
  _DWORD *v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD);
  int v21;
  NSObject *v22;
  os_log_type_t v23;
  char *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  uint8_t buf[4];
  char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  uint8_t v37[32];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (_data_map_ext_rdlock(a1))
    return 0xFFFFFFFFLL;
  v30 = 0;
  makeThreadId();
  do
  {
    v3 = __ldxr(exceptionSequenceNum);
    v4 = v3 + 1;
  }
  while (__stxr(v3 + 1, exceptionSequenceNum));
  v5 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11061, a1, 0, v4);
  v29 = HIDWORD(v5);
  *(_DWORD *)buf = v5;
  v27 = v7;
  v28 = v6;
  v8 = *(_QWORD *)&threadData[18 * v5 + 2];
  v9 = v8 + 320 * HIDWORD(v5);
  v10 = *(_DWORD *)(v9 + 312);
  v11 = *(void (**)(_QWORD))(v9 + 224);
  if (v11)
    v11(*(_QWORD *)(v8 + 320 * HIDWORD(v5) + 288));
  v26 = *(_DWORD *)buf;
  if (!_setjmp((int *)v9))
  {
    v16 = *(_DWORD *)(*(_QWORD *)(a1 + 264) + 16);
    if (v16 == 1)
      goto LABEL_15;
    if (v16)
    {
      v17 = 0xFFFFFFFFLL;
    }
    else
    {
      v17 = _data_map_ext_sync_data(a1);
      if (!(_DWORD)v17)
      {
        v17 = _data_map_ext_sync_header(a1);
        if (!(_DWORD)v17)
        {
LABEL_15:
          v17 = data_map_ext_shadow(a1);
          if (!(_DWORD)v17)
          {
            v17 = data_map_ext_commit_shadow(a1);
            if (!(_DWORD)v17)
              v17 = data_map_ext_commit_shadow_complete(a1);
          }
        }
      }
    }
    v30 = 1;
    v18 = *(_QWORD *)&threadData[18 * *(unsigned int *)buf + 2];
    v19 = v18 + 320 * v29;
    *(_DWORD *)(v19 + 312) = v10;
    v20 = *(void (**)(_QWORD))(v19 + 232);
    if (v20)
      v20(*(_QWORD *)(v18 + 320 * v29 + 288));
    dropThreadId(v26, 0, v4);
    v15 = v17;
    goto LABEL_22;
  }
  v12 = (_DWORD *)(v9 + 312);
  v13 = *__error();
  v14 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v37 = 136315394;
    *(_QWORD *)&v37[4] = "_data_map_ext_commit";
    *(_WORD *)&v37[12] = 1024;
    *(_DWORD *)&v37[14] = 1514;
    _os_log_error_impl(&dword_1B8270000, v14, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v37, 0x12u);
  }
  *__error() = v13;
  *v12 = v10;
  CIOnThreadCleanUpReset(v27);
  dropThreadId(v26, 1, v4);
  CICleanUpReset(v26, v28);
  v15 = 0xFFFFFFFFLL;
LABEL_22:
  if (!v30)
    *(_DWORD *)(a1 + 464) = 22;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  memset(v37, 0, sizeof(v37));
  v21 = *__error();
  v22 = _SILogForLogForCategory(7);
  v23 = 2 * (dword_1EF19FCA8 < 4);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = fd_name(*(_QWORD *)(a1 + 240), (char *)v37, 0x100uLL);
    v25 = *(_QWORD *)(a1 + 376) - 1;
    *(_DWORD *)buf = 136315650;
    v32 = v24;
    v33 = 2080;
    v34 = "commit";
    v35 = 2048;
    v36 = v25;
    _os_log_impl(&dword_1B8270000, v22, v23, "%s complete %s with count: %lld", buf, 0x20u);
  }
  *__error() = v21;
  _data_map_ext_unlock(a1);
  return v15;
}

uint64_t data_map_ext_shadow(uint64_t a1)
{
  int v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *sibling_with_suffix_protected;
  int v6;
  NSObject *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 464) || *(_DWORD *)(*(_QWORD *)(a1 + 264) + 16) != 2)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 28);
      v10 = 134217984;
      v11 = v8;
      _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "Already shadowed; don't shadow next_id = %lld",
        (uint8_t *)&v10,
        0xCu);
    }
    *__error() = v6;
  }
  else
  {
    v2 = *__error();
    v3 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 28);
      v10 = 134217984;
      v11 = v4;
      _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "shadow update next_id = %lld", (uint8_t *)&v10, 0xCu);
    }
    *__error() = v2;
    *(_DWORD *)(*(_QWORD *)(a1 + 264) + 16) = 2;
    sibling_with_suffix_protected = fd_create_sibling_with_suffix_protected(*(_QWORD *)(a1 + 240), ".shadow", 514);
    *(_QWORD *)(a1 + 248) = sibling_with_suffix_protected;
    fd_pwrite((uint64_t)sibling_with_suffix_protected, *(_QWORD *)(a1 + 264), 0x54uLL, 0);
  }
  return *(unsigned int *)(a1 + 464);
}

uint64_t data_map_ext_commit_shadow(uint64_t a1)
{
  int v2;
  NSObject *v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 464) || *(_DWORD *)(*(_QWORD *)(a1 + 264) + 16) != 2)
  {
    v5 = *__error();
    v6 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD *)(a1 + 376);
      v9 = 134217984;
      v10 = v7;
      _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "Already shadowed cs; don't shadow next_id = %lld",
        (uint8_t *)&v9,
        0xCu);
    }
    *__error() = v5;
  }
  else
  {
    v2 = *__error();
    v3 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 376);
      v9 = 134217984;
      v10 = v4;
      _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "commit shadow update next_id = %lld", (uint8_t *)&v9, 0xCu);
    }
    *__error() = v2;
    fd_sync(*(_QWORD *)(a1 + 248), 0);
  }
  fd_release(*(char **)(a1 + 248));
  *(_QWORD *)(a1 + 248) = 0;
  return *(unsigned int *)(a1 + 464);
}

uint64_t data_map_ext_commit_shadow_complete(uint64_t a1)
{
  int v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 464) || *(_DWORD *)(*(_QWORD *)(a1 + 264) + 16) != 2)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(a1 + 376);
      v10 = 134217984;
      v11 = v8;
      _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "Already shadowed csc; don't shadow next_id = %lld",
        (uint8_t *)&v10,
        0xCu);
    }
    *__error() = v6;
  }
  else
  {
    v2 = *__error();
    v3 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a1 + 376);
      v10 = 134217984;
      v11 = v4;
      _os_log_impl(&dword_1B8270000, v3, OS_LOG_TYPE_DEFAULT, "commit shadow complete update next_id = %lld", (uint8_t *)&v10, 0xCu);
    }
    *__error() = v2;
    v5 = *(_QWORD *)(a1 + 264);
    *(_DWORD *)(v5 + 16) = 1;
    fd_pwrite(*(_QWORD *)(a1 + 240), v5, 0x54uLL, 0);
    fd_sync(*(_QWORD *)(a1 + 240), 0);
  }
  return *(unsigned int *)(a1 + 464);
}

uint64_t data_map_ext_flush(uint64_t a1)
{
  unsigned int v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(_QWORD);
  _DWORD *v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD);
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (_data_map_ext_rdlock(a1))
    return 0xFFFFFFFFLL;
  v24 = 0;
  makeThreadId();
  do
  {
    v3 = __ldxr(exceptionSequenceNum);
    v4 = v3 + 1;
  }
  while (__stxr(v3 + 1, exceptionSequenceNum));
  v5 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11061, a1, 0, v4);
  v22 = HIDWORD(v5);
  v23 = v5;
  v20 = v7;
  v21 = v6;
  v8 = *(_QWORD *)&threadData[18 * v5 + 2];
  v9 = v8 + 320 * HIDWORD(v5);
  v10 = *(_DWORD *)(v9 + 312);
  v11 = *(void (**)(_QWORD))(v9 + 224);
  if (v11)
    v11(*(_QWORD *)(v8 + 320 * HIDWORD(v5) + 288));
  if (_setjmp((int *)v9))
  {
    v12 = (_DWORD *)(v9 + 312);
    v13 = *__error();
    v14 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v26 = "data_map_ext_flush";
      v27 = 1024;
      v28 = 1602;
      _os_log_error_impl(&dword_1B8270000, v14, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v13;
    *v12 = v10;
    CIOnThreadCleanUpReset(v20);
    dropThreadId(v23, 1, v4);
    CICleanUpReset(v23, v21);
    v15 = 0xFFFFFFFFLL;
  }
  else
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 264) + 16))
      v16 = 0xFFFFFFFFLL;
    else
      v16 = _data_map_ext_sync_data(a1);
    v24 = 1;
    v17 = *(_QWORD *)&threadData[18 * v23 + 2];
    v18 = v17 + 320 * v22;
    *(_DWORD *)(v18 + 312) = v10;
    v19 = *(void (**)(_QWORD))(v18 + 232);
    if (v19)
      v19(*(_QWORD *)(v17 + 320 * v22 + 288));
    dropThreadId(v23, 0, v4);
    v15 = v16;
  }
  if (!v24)
    *(_DWORD *)(a1 + 464) = 22;
  _data_map_ext_unlock(a1);
  return v15;
}

CFIndex data_map_ext_id_get_with_key(uint64_t a1, const void *a2, size_t a3, void *a4)
{
  uint64_t v8;
  CFIndex v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void (*v18)(_QWORD);
  _DWORD *v19;
  int v20;
  NSObject *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t contentindex_for_id;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  const __CFDictionary *v42;
  const __CFData *Value;
  const __CFData *v44;
  int v45;
  NSObject *v46;
  int v47;
  NSObject *v48;
  int v49;
  NSObject *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  void (*v56)(_QWORD);
  uint64_t v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  size_t __n;
  unint64_t v64;
  size_t v65;
  void *v66;
  int v67;
  unint64_t v68;
  void *__s2;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  char v76;
  unsigned int v77;
  uint8_t buf[4];
  const char *v79;
  __int16 v80;
  int v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  char *v91;
  uint8_t v92[64];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v8 = dm_hash((uint64_t)a2, a3);
  if (_data_map_ext_rdlock(a1))
  {
    v9 = 0;
    goto LABEL_51;
  }
  v64 = v8;
  v76 = 0;
  makeThreadId();
  do
  {
    v10 = __ldxr(exceptionSequenceNum);
    v11 = v10 + 1;
  }
  while (__stxr(v10 + 1, exceptionSequenceNum));
  v12 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11061, a1, 0, v11);
  v74 = HIDWORD(v12);
  v75 = v12;
  v73 = __PAIR64__(v13, v14);
  v15 = *(_QWORD *)&threadData[18 * v12 + 2];
  v16 = v15 + 320 * HIDWORD(v12);
  v17 = *(_DWORD *)(v16 + 312);
  v18 = *(void (**)(_QWORD))(v16 + 224);
  if (v18)
    v18(*(_QWORD *)(v15 + 320 * HIDWORD(v12) + 288));
  v60 = v11;
  v72 = v75;
  v71 = v74;
  v70 = v73;
  if (_setjmp((int *)v16))
  {
    v19 = (_DWORD *)(v16 + 312);
    v20 = *__error();
    v21 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v92 = 136315394;
      *(_QWORD *)&v92[4] = "data_map_ext_id_get_with_key";
      *(_WORD *)&v92[12] = 1024;
      *(_DWORD *)&v92[14] = 2144;
      _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v92, 0x12u);
    }
    *__error() = v20;
    *v19 = v17;
    CIOnThreadCleanUpReset(v70);
    dropThreadId(v72, 1, v60);
    CICleanUpReset(v72, HIDWORD(v70));
    v9 = 0;
    goto LABEL_49;
  }
  v65 = a3;
  v66 = a4;
  v67 = v17;
  v22 = *(_QWORD *)(a1 + 368);
  v23 = v64;
  v24 = v64 % v22;
  __n = *(unsigned int *)(a1 + 220);
  while (1)
  {
    v25 = *(_QWORD *)(a1 + 360);
    v26 = *(_QWORD *)(v25 + 8 * v24);
    if (!v26)
      break;
    if (*(_QWORD *)(a1 + 376) > v26 && (v27 = *(_QWORD *)(a1 + 288), (unint64_t)(v27 + 1) > 1))
    {
      v31 = v27 + 24 * v26;
      if (*(_QWORD *)v31 != -2 && *(_QWORD *)(v27 + 24 * v26 + 16) == v23)
      {
        v32 = *(_QWORD *)(a1 + 360);
        v68 = 0;
        __s2 = 0;
        v33 = *(_QWORD *)v31;
        if (*(_QWORD *)v31 == -1)
        {
          v42 = *(const __CFDictionary **)(a1 + 480);
          if (!v42)
          {
            v103 = 0u;
            v104 = 0u;
            v101 = 0u;
            v102 = 0u;
            v99 = 0u;
            v100 = 0u;
            v97 = 0u;
            v98 = 0u;
            v95 = 0u;
            v96 = 0u;
            v93 = 0u;
            v94 = 0u;
            memset(v92, 0, sizeof(v92));
            v47 = *__error();
            v48 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
            {
              v51 = fd_name(*(_QWORD *)(a1 + 240), (char *)v92, 0x100uLL);
              *(_DWORD *)buf = 136316162;
              v79 = "_data_map_ext_get_data_entry";
              v80 = 1024;
              v81 = 449;
              v82 = 2048;
              v83 = -1;
              v84 = 2048;
              v85 = a1;
              v86 = 2080;
              v87 = (uint64_t)v51;
              _os_log_error_impl(&dword_1B8270000, v48, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", buf, 0x30u);
            }
            *__error() = v47;
            fd_name(*(_QWORD *)(a1 + 240), (char *)v92, 0x100uLL);
            si_analytics_log_2064("(2)invalid data offset 0x%lx %p %s");
            goto LABEL_18;
          }
          Value = (const __CFData *)CFDictionaryGetValue(v42, *(const void **)(v25 + 8 * v24));
          if (!Value)
          {
            v103 = 0u;
            v104 = 0u;
            v101 = 0u;
            v102 = 0u;
            v99 = 0u;
            v100 = 0u;
            v97 = 0u;
            v98 = 0u;
            v95 = 0u;
            v96 = 0u;
            v93 = 0u;
            v94 = 0u;
            memset(v92, 0, sizeof(v92));
            v49 = *__error();
            v50 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            {
              v52 = fd_name(*(_QWORD *)(a1 + 240), (char *)v92, 0x100uLL);
              *(_DWORD *)buf = 136316162;
              v79 = "_data_map_ext_get_data_entry";
              v80 = 1024;
              v81 = 443;
              v82 = 2048;
              v83 = -1;
              v84 = 2048;
              v85 = a1;
              v86 = 2080;
              v87 = (uint64_t)v52;
              _os_log_error_impl(&dword_1B8270000, v50, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", buf, 0x30u);
            }
            *__error() = v49;
            fd_name(*(_QWORD *)(a1 + 240), (char *)v92, 0x100uLL);
            si_analytics_log_2064("(1)invalid data offset 0x%lx %p %s");
            goto LABEL_18;
          }
          v44 = Value;
          LODWORD(v68) = CFDataGetLength(Value) - *(_DWORD *)(a1 + 220);
          __s2 = (void *)&CFDataGetBytePtr(v44)[*(unsigned int *)(a1 + 220)];
          CFDataGetBytePtr(v44);
          __memcpy_chk();
          v38 = 1;
        }
        else
        {
          v61 = *(_QWORD *)(v25 + 8 * v24);
          v34 = *(_DWORD *)(v31 + 8);
          v35 = *(_DWORD *)(v31 + 12);
          v36 = *(_QWORD *)(a1 + 472);
          *(_DWORD *)buf = 0;
          contentindex_for_id = si_get_contentindex_for_id(v36, v34);
          v77 = 0;
          if (contentindex_for_id)
          {
            __s2 = (void *)ContentIndexGetDataForId(*(_QWORD *)(contentindex_for_id + 4896), v33, v35, (uint64_t)&v77, (uint64_t)buf);
            v68 = __PAIR64__(v77, *(unsigned int *)buf);
            v38 = 1;
            v23 = v64;
          }
          else
          {
            v59 = v35;
            v62 = v32;
            v45 = *__error();
            v46 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v92 = 136316418;
              *(_QWORD *)&v92[4] = "data_entry_restore";
              *(_WORD *)&v92[12] = 1024;
              *(_DWORD *)&v92[14] = 389;
              *(_WORD *)&v92[18] = 2048;
              *(_QWORD *)&v92[20] = v61;
              *(_WORD *)&v92[28] = 1024;
              *(_DWORD *)&v92[30] = v34;
              *(_WORD *)&v92[34] = 2048;
              *(_QWORD *)&v92[36] = v33;
              *(_WORD *)&v92[44] = 1024;
              *(_DWORD *)&v92[46] = v59;
              _os_log_error_impl(&dword_1B8270000, v46, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid index_id %u offset 0x%llx meta 0x%x", v92, 0x32u);
            }
            *__error() = v45;
            v38 = 0;
            v23 = v64;
            v32 = v62;
          }
        }
        if (v38 && v68 == v65 && !memcmp(a2, __s2, v65) && !memcmp((char *)&v68 + 4, v66, __n))
        {
          v9 = *(_QWORD *)(v32 + 8 * v24);
          goto LABEL_46;
        }
      }
    }
    else
    {
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      memset(v92, 0, sizeof(v92));
      v28 = *__error();
      v29 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        v39 = *(_QWORD *)(a1 + 376);
        v40 = *(_QWORD *)(a1 + 288);
        v41 = fd_name(*(_QWORD *)(a1 + 240), (char *)v92, 0x100uLL);
        *(_DWORD *)buf = 136316674;
        v79 = "_data_map_ext_get_offset_entry";
        v80 = 1024;
        v81 = 409;
        v82 = 2048;
        v83 = v26;
        v84 = 2048;
        v85 = v39;
        v86 = 2048;
        v87 = a1;
        v88 = 2048;
        v89 = v40;
        v23 = v64;
        v90 = 2080;
        v91 = v41;
        _os_log_error_impl(&dword_1B8270000, v29, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", buf, 0x44u);
      }
      *__error() = v28;
    }
LABEL_18:
    v9 = 0;
    if (v24 + 1 == v22)
      v30 = 0;
    else
      v30 = v24 + 1;
    v24 = v30;
    if (v30 == v64 % v22)
      goto LABEL_46;
  }
  v9 = 0;
LABEL_46:
  v76 = 1;
  v53 = *(_QWORD *)&threadData[18 * v72 + 2];
  v54 = v71;
  v55 = v53 + 320 * v71;
  *(_DWORD *)(v55 + 312) = v67;
  v56 = *(void (**)(_QWORD))(v55 + 232);
  if (v56)
    v56(*(_QWORD *)(v53 + 320 * v54 + 288));
  dropThreadId(v72, 0, v60);
LABEL_49:
  if (!v76)
  {
    v9 = 0;
    *(_DWORD *)(a1 + 464) = 22;
  }
LABEL_51:
  if (*(_QWORD *)(a1 + 448))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 440));
    v58 = *(_QWORD *)(a1 + 448);
    if (v58)
      bit_vector_set_5272(v58, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 440));
  }
  _data_map_ext_unlock(a1);
  return v9;
}

uint64_t data_map_ext_get_extra_with_key(uint64_t a1, uint64_t a2, size_t a3, _BYTE *a4)
{
  _BYTE *v4;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void (*v17)(_QWORD);
  _DWORD *v18;
  int v19;
  NSObject *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  CFIndex v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  NSObject *v28;
  unint64_t v29;
  uint64_t v30;
  const void *v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t contentindex_for_id;
  uint64_t v37;
  size_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const __CFDictionary *v43;
  const __CFData *Value;
  const __CFData *v45;
  NSObject *v46;
  int v47;
  NSObject *v48;
  int v49;
  NSObject *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD);
  unint64_t v59;
  size_t v60;
  os_unfair_lock_s *lock;
  unint64_t v62;
  const void *v63;
  size_t v64;
  int v65;
  _BYTE *v66;
  unsigned int v67;
  const UInt8 *__s2;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  char v73;
  uint64_t v74;
  int v75;
  uint8_t buf[4];
  const char *v77;
  __int16 v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  char *v89;
  uint8_t v90[64];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;

  v4 = a4;
  v103 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  v74 = 0;
  v8 = dm_hash(a2, a3);
  if (_data_map_ext_rdlock(a1))
    goto LABEL_52;
  v62 = v8;
  v73 = 0;
  makeThreadId();
  do
  {
    v9 = __ldxr(exceptionSequenceNum);
    v10 = v9 + 1;
  }
  while (__stxr(v9 + 1, exceptionSequenceNum));
  v11 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11061, a1, 0, v10);
  v71 = HIDWORD(v11);
  v72 = v11;
  v69 = v13;
  v70 = v12;
  v14 = *(_QWORD *)&threadData[18 * v11 + 2];
  v15 = v14 + 320 * HIDWORD(v11);
  v16 = *(_DWORD *)(v15 + 312);
  v17 = *(void (**)(_QWORD))(v15 + 224);
  if (v17)
    v17(*(_QWORD *)(v14 + 320 * HIDWORD(v11) + 288));
  if (_setjmp((int *)v15))
  {
    v18 = (_DWORD *)(v15 + 312);
    v19 = *__error();
    v20 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v90 = 136315394;
      *(_QWORD *)&v90[4] = "data_map_ext_get_extra_with_key";
      *(_WORD *)&v90[12] = 1024;
      *(_DWORD *)&v90[14] = 2204;
      _os_log_error_impl(&dword_1B8270000, v20, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v90, 0x12u);
    }
    *__error() = v19;
    *v18 = v16;
    CIOnThreadCleanUpReset(v69);
    dropThreadId(v72, 1, v10);
    CICleanUpReset(v72, v70);
    goto LABEL_50;
  }
  v63 = (const void *)a2;
  v64 = a3;
  v65 = v10;
  v66 = v4;
  v21 = *(_QWORD *)(a1 + 368);
  v22 = v62 % v21;
  lock = (os_unfair_lock_s *)(a1 + 440);
  v60 = *(unsigned int *)(a1 + 220) + a3;
  do
  {
    v23 = *(_QWORD *)(a1 + 360);
    v24 = *(_QWORD *)(v23 + 8 * v22);
    if (!v24)
      break;
    if (*(_QWORD *)(a1 + 448))
    {
      os_unfair_lock_lock(lock);
      v51 = *(_QWORD *)(a1 + 448);
      if (v51)
        bit_vector_set_5272(v51, v24);
      os_unfair_lock_unlock(lock);
      v25 = *(_QWORD *)(v23 + 8 * v22);
    }
    else
    {
      v25 = *(_QWORD *)(v23 + 8 * v22);
    }
    if (*(_QWORD *)(a1 + 376) <= v25 || (v26 = *(_QWORD *)(a1 + 288), (unint64_t)(v26 + 1) <= 1))
    {
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      memset(v90, 0, sizeof(v90));
      v27 = *__error();
      v28 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v40 = *(_QWORD *)(a1 + 376);
        v41 = *(_QWORD *)(a1 + 288);
        v42 = fd_name(*(_QWORD *)(a1 + 240), (char *)v90, 0x100uLL);
        *(_DWORD *)buf = 136316674;
        v77 = "_data_map_ext_get_offset_entry";
        v78 = 1024;
        v79 = 409;
        v80 = 2048;
        v81 = v25;
        v82 = 2048;
        v83 = v40;
        v84 = 2048;
        v85 = a1;
        v86 = 2048;
        v87 = v41;
        v88 = 2080;
        v89 = v42;
        _os_log_error_impl(&dword_1B8270000, v28, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", buf, 0x44u);
      }
LABEL_18:
      *__error() = v27;
      goto LABEL_19;
    }
    v30 = v26 + 24 * v25;
    if (*(_QWORD *)v30 == -2 || *(_QWORD *)(v26 + 24 * v25 + 16) != v62)
      goto LABEL_19;
    v31 = *(const void **)(v23 + 8 * v22);
    v32 = *(_QWORD *)v30;
    if (*(_QWORD *)v30 == -1)
    {
      v43 = *(const __CFDictionary **)(a1 + 480);
      if (!v43)
      {
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        memset(v90, 0, sizeof(v90));
        v47 = *__error();
        v48 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
        {
          v52 = fd_name(*(_QWORD *)(a1 + 240), (char *)v90, 0x100uLL);
          *(_DWORD *)buf = 136316162;
          v77 = "_data_map_ext_get_data_entry";
          v78 = 1024;
          v79 = 449;
          v80 = 2048;
          v81 = -1;
          v82 = 2048;
          v83 = a1;
          v84 = 2080;
          v85 = (uint64_t)v52;
          _os_log_error_impl(&dword_1B8270000, v48, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", buf, 0x30u);
        }
        *__error() = v47;
        fd_name(*(_QWORD *)(a1 + 240), (char *)v90, 0x100uLL);
        si_analytics_log_2064("(2)invalid data offset 0x%lx %p %s");
        goto LABEL_19;
      }
      Value = (const __CFData *)CFDictionaryGetValue(v43, v31);
      v39 = v63;
      v38 = v64;
      if (!Value)
      {
        v101 = 0u;
        v102 = 0u;
        v99 = 0u;
        v100 = 0u;
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        memset(v90, 0, sizeof(v90));
        v49 = *__error();
        v50 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          v53 = fd_name(*(_QWORD *)(a1 + 240), (char *)v90, 0x100uLL);
          *(_DWORD *)buf = 136316162;
          v77 = "_data_map_ext_get_data_entry";
          v78 = 1024;
          v79 = 443;
          v80 = 2048;
          v81 = -1;
          v82 = 2048;
          v83 = a1;
          v84 = 2080;
          v85 = (uint64_t)v53;
          _os_log_error_impl(&dword_1B8270000, v50, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", buf, 0x30u);
        }
        *__error() = v49;
        fd_name(*(_QWORD *)(a1 + 240), (char *)v90, 0x100uLL);
        si_analytics_log_2064("(1)invalid data offset 0x%lx %p %s");
        goto LABEL_19;
      }
      v45 = Value;
      v67 = CFDataGetLength(Value) - *(_DWORD *)(a1 + 220);
      __s2 = &CFDataGetBytePtr(v45)[*(unsigned int *)(a1 + 220)];
      CFDataGetBytePtr(v45);
      __memcpy_chk();
      v37 = v67;
    }
    else
    {
      v33 = *(_DWORD *)(v30 + 8);
      v34 = *(_DWORD *)(v30 + 12);
      v35 = *(_QWORD *)(a1 + 472);
      *(_DWORD *)buf = 0;
      contentindex_for_id = si_get_contentindex_for_id(v35, v33);
      v75 = 0;
      if (!contentindex_for_id)
      {
        v59 = v32;
        v27 = *__error();
        v46 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v90 = 136316418;
          *(_QWORD *)&v90[4] = "data_entry_restore";
          *(_WORD *)&v90[12] = 1024;
          *(_DWORD *)&v90[14] = 389;
          *(_WORD *)&v90[18] = 2048;
          *(_QWORD *)&v90[20] = v31;
          *(_WORD *)&v90[28] = 1024;
          *(_DWORD *)&v90[30] = v33;
          *(_WORD *)&v90[34] = 2048;
          *(_QWORD *)&v90[36] = v59;
          *(_WORD *)&v90[44] = 1024;
          *(_DWORD *)&v90[46] = v34;
          _os_log_error_impl(&dword_1B8270000, v46, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid index_id %u offset 0x%llx meta 0x%x", v90, 0x32u);
        }
        goto LABEL_18;
      }
      __s2 = (const UInt8 *)ContentIndexGetDataForId(*(_QWORD *)(contentindex_for_id + 4896), v32, v34, (uint64_t)&v75, (uint64_t)buf);
      v37 = *(unsigned int *)buf;
      v39 = v63;
      v38 = v64;
    }
    if (v60 == v37 && !memcmp(v39, __s2, v38))
    {
      v54 = *(_DWORD *)(a1 + 220);
      __memcpy_chk();
      HIDWORD(v74) = v54;
      *v66 = 1;
      break;
    }
LABEL_19:
    v29 = 0;
    if (v22 + 1 != v21)
      v29 = v22 + 1;
    v22 = v29;
  }
  while (v29 != v62 % v21);
  v73 = 1;
  v55 = *(_QWORD *)&threadData[18 * v72 + 2];
  v56 = v55 + 320 * v71;
  *(_DWORD *)(v56 + 312) = v16;
  v57 = *(void (**)(_QWORD))(v56 + 232);
  if (v57)
    v57(*(_QWORD *)(v55 + 320 * v71 + 288));
  dropThreadId(v72, 0, v65);
  v4 = v66;
LABEL_50:
  if (!v73)
  {
    *v4 = 0;
    *(_DWORD *)(a1 + 464) = 22;
  }
LABEL_52:
  _data_map_ext_unlock(a1);
  return v74;
}

unint64_t _data_map_ext_get_data_id(uint64_t a1, int a2, char *a3, unint64_t a4, int a5)
{
  unint64_t v9;
  int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void (*v20)(_QWORD);
  int v21;
  NSObject *v22;
  unint64_t updated;
  CFIndex v24;
  unint64_t *bucket_entry;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  CFIndex *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD);
  CFIndex *v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v9 = dm_hash((uint64_t)&a3[a2], (int)a4 - a2);
  if (_data_map_ext_rdlock(a1))
    return 0;
  v11 = a5;
  makeThreadId();
  do
  {
    v12 = __ldxr(exceptionSequenceNum);
    v13 = v12 + 1;
  }
  while (__stxr(v12 + 1, exceptionSequenceNum));
  v14 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11061, a1, 0, v13);
  v38 = HIDWORD(v14);
  v39 = v14;
  v36 = v16;
  v37 = v15;
  v17 = *(_QWORD *)&threadData[18 * v14 + 2];
  v18 = v17 + 320 * HIDWORD(v14);
  v19 = *(_DWORD *)(v18 + 312);
  v20 = *(void (**)(_QWORD))(v18 + 224);
  if (v20)
    v20(*(_QWORD *)(v17 + 320 * HIDWORD(v14) + 288));
  if (!_setjmp((int *)v18))
  {
    v24 = 0;
    bucket_entry = (unint64_t *)_data_map_ext_get_bucket_entry(a1, v9, 0, a3, a4);
    if (bucket_entry)
    {
      if (*bucket_entry)
      {
        if (*bucket_entry >= *(_QWORD *)(a1 + 376))
          updated = 0;
        else
          updated = *bucket_entry;
        goto LABEL_26;
      }
      if (!v11)
        goto LABEL_18;
      v26 = bucket_entry;
      v27 = *(_QWORD *)(a1 + 376);
      _data_map_ext_unlock(a1);
      if (_data_map_ext_wrlock(a1))
        goto LABEL_18;
      v28 = v27;
      v29 = v26;
      if (v27 == *(_QWORD *)(a1 + 376))
      {
LABEL_20:
        updated = _data_map_ext_push_to_update_set(a1, v28, v9, (UInt8 *)a3, a4, v29);
        goto LABEL_26;
      }
      v24 = 0;
      v30 = (CFIndex *)_data_map_ext_get_bucket_entry(a1, v9, 0, a3, a4);
      if (v30)
      {
        v24 = *v30;
        if ((unint64_t)*v30 >= *(_QWORD *)(a1 + 376))
        {
LABEL_18:
          updated = 0;
LABEL_26:
          v31 = *(_QWORD *)&threadData[18 * v39 + 2];
          v32 = v31 + 320 * v38;
          *(_DWORD *)(v32 + 312) = v19;
          v33 = *(void (**)(_QWORD))(v32 + 232);
          if (v33)
            v33(*(_QWORD *)(v31 + 320 * v38 + 288));
          dropThreadId(v39, 0, v13);
          goto LABEL_29;
        }
        if (!v24)
        {
          v34 = v30;
          v35 = *(_QWORD *)(a1 + 376);
          SIActivityJournalDMAdd(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), *(_DWORD *)(a1 + 220), v35, v9, a4);
          v29 = v34;
          v28 = v35;
          goto LABEL_20;
        }
        _data_map_ext_set_seen_id(a1, v24);
      }
    }
    updated = v24;
    goto LABEL_26;
  }
  v21 = *__error();
  v22 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v41 = "_data_map_ext_get_data_id";
    v42 = 1024;
    v43 = 1961;
    _os_log_error_impl(&dword_1B8270000, v22, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
  }
  *__error() = v21;
  *(_DWORD *)(v18 + 312) = v19;
  CIOnThreadCleanUpReset(v36);
  dropThreadId(v39, 1, v13);
  CICleanUpReset(v39, v37);
  updated = 0;
LABEL_29:
  _data_map_ext_unlock(a1);
  return updated;
}

void _data_map_ext_set_seen_id(uint64_t a1, CFIndex a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 448))
  {
    v4 = (os_unfair_lock_s *)(a1 + 440);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 440));
    v5 = *(_QWORD *)(a1 + 448);
    if (v5)
      bit_vector_set_5272(v5, a2);
    os_unfair_lock_unlock(v4);
  }
}

unint64_t _data_map_ext_push_to_update_set(uint64_t a1, unint64_t a2, unint64_t a3, UInt8 *a4, CFIndex a5, _QWORD *bucket_entry)
{
  unint64_t v6;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint8_t v28[4];
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  char *v41;
  uint8_t buf[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 464))
    return 0;
  v6 = a2;
  v13 = *(_QWORD *)(a1 + 376);
  if (v13 >= *(_QWORD *)(a1 + 328))
  {
    v14 = (*MEMORY[0x1E0C85AD8] + 24 * v13 + 23) & -*MEMORY[0x1E0C85AD8];
    if (!grow_offsets(a1, a1 + 272, v14) || !grow_offsets(a1, a1 + 296, v14))
      goto LABEL_12;
    *(_QWORD *)(a1 + 328) = v14 / 0x18;
    v13 = *(_QWORD *)(a1 + 376);
  }
  v15 = v13 - *(_QWORD *)(a1 + 384);
  if (v15 >= 2 * *(_QWORD *)(a1 + 368) / 3uLL || v15 < 2 * *(_QWORD *)(a1 + 392))
  {
    if ((_data_map_ext_rehash(a1) & 1) != 0)
    {
      v16 = 0;
      goto LABEL_15;
    }
LABEL_12:
    if (!*(_DWORD *)(a1 + 464))
    {
      v6 = 0;
      *(_DWORD *)(a1 + 464) = 1;
      return v6;
    }
    return 0;
  }
  v16 = 1;
LABEL_15:
  if (!*(_QWORD *)(a1 + 272) || (unint64_t)(*(_QWORD *)(a1 + 288) + 1) <= 1)
  {
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    memset(buf, 0, sizeof(buf));
    v17 = *__error();
    v18 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v25 = *(_QWORD *)(a1 + 376);
      v27 = *(_QWORD *)(a1 + 288);
      v26 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
      *(_DWORD *)v28 = 136316674;
      v29 = "_data_map_ext_push_to_update_set";
      v30 = 1024;
      v31 = 1850;
      v32 = 2048;
      v33 = v6;
      v34 = 2048;
      v35 = v25;
      v36 = 2048;
      v37 = a1;
      v38 = 2048;
      v39 = v27;
      v40 = 2080;
      v41 = v26;
      _os_log_error_impl(&dword_1B8270000, v18, OS_LOG_TYPE_ERROR, "%s:%d: insert data id error %lld max %lld %p map: %p %s", v28, 0x44u);
    }
    *__error() = v17;
  }
  if (!*(_BYTE *)(a1 + 459))
  {
    _data_map_ext_dirty(a1);
    *(_BYTE *)(a1 + 459) = 1;
  }
  v19 = *(_QWORD *)(a1 + 288) + 24 * v6;
  *(_QWORD *)(v19 + 16) = a3;
  *(_OWORD *)v19 = xmmword_1B8631BE0;
  if (*(_QWORD *)(a1 + 296))
  {
    v20 = *(_QWORD *)(a1 + 312);
    if ((unint64_t)(v20 + 1) >= 2)
    {
      v21 = v20 + 24 * v6;
      *(_QWORD *)(v21 + 16) = a3;
      *(_OWORD *)v21 = xmmword_1B8631BE0;
    }
  }
  if (!*(_BYTE *)(a1 + 457))
  {
    _data_map_ext_dirty(a1);
    *(_BYTE *)(a1 + 457) = 1;
  }
  data_map_ext_store_as_update(a1, (const void *)v6, a4, a5);
  ++*(_QWORD *)(a1 + 376);
  if (!*(_BYTE *)(a1 + 458))
  {
    _data_map_ext_dirty(a1);
    *(_BYTE *)(a1 + 458) = 1;
  }
  if (bucket_entry)
    v22 = v16;
  else
    v22 = 0;
  if ((v22 & 1) == 0)
    bucket_entry = (_QWORD *)_data_map_ext_get_bucket_entry(a1, a3, v6, (char *)a4, a5);
  *bucket_entry = v6;
  if (gSILogLevels[0] >= 5)
  {
    v23 = *__error();
    v24 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v6;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a1;
      _os_log_impl(&dword_1B8270000, v24, OS_LOG_TYPE_DEFAULT, "added %lld to %p", buf, 0x16u);
    }
    *__error() = v23;
  }
  return v6;
}

uint64_t grow_offsets(uint64_t a1, uint64_t a2, unint64_t a3)
{
  size_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!*(_QWORD *)a2)
    return 1;
  if (fd_truncate(*(_QWORD *)a2, a3) != -1)
  {
    *(_QWORD *)(a1 + 320) = a3;
    v6 = *(_QWORD *)(a2 + 8);
    if (v6 >= a3)
      return 1;
    v7 = 2 * v6;
    munmap(*(void **)(a2 + 16), v6);
    *(_QWORD *)(a2 + 8) = 0;
    v8 = fd_mmap(*(_QWORD *)a2);
    *(_QWORD *)(a2 + 16) = v8;
    if (v8 != -1)
    {
      *(_QWORD *)(a2 + 8) = v7;
      return 1;
    }
  }
  return 0;
}

void data_map_ext_store_as_update(uint64_t a1, const void *a2, UInt8 *bytes, CFIndex length)
{
  const __CFAllocator *v8;
  CFDataRef v9;

  v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (!*(_QWORD *)(a1 + 480))
    *(_QWORD *)(a1 + 480) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  v9 = CFDataCreate(v8, bytes, length);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 480), a2, v9);
  CFRelease(v9);
}

uint64_t data_map_ext_get_data_entry(uint64_t a1, uint64_t a2, unint64_t a3, _BYTE *a4, char a5)
{
  char v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void (*v19)(_QWORD);
  _DWORD *v20;
  int v21;
  NSObject *v22;
  uint64_t result;
  uint64_t v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD);
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t contentindex_for_id;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  const __CFDictionary *v40;
  const __CFData *Value;
  const __CFData *v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  NSObject *v48;
  int v49;
  NSObject *v50;
  int v51;
  NSObject *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t DataForId;
  const UInt8 *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  char v65;
  int v66;
  uint8_t v67[4];
  const char *v68;
  __int16 v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  char *v80;
  uint8_t buf[64];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  if ((a5 & 1) == 0 && _data_map_ext_rdlock(a2))
    return _data_map_ext_unlock(a2);
  v10 = a5;
  v65 = 0;
  makeThreadId();
  do
  {
    v11 = __ldxr(exceptionSequenceNum);
    v12 = v11 + 1;
  }
  while (__stxr(v11 + 1, exceptionSequenceNum));
  v13 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11061, a2, 0, v12);
  v63 = HIDWORD(v13);
  v64 = v13;
  v61 = v15;
  v62 = v14;
  v16 = *(_QWORD *)&threadData[18 * v13 + 2];
  v17 = v16 + 320 * HIDWORD(v13);
  v18 = *(_DWORD *)(v17 + 312);
  v19 = *(void (**)(_QWORD))(v17 + 224);
  if (v19)
    v19(*(_QWORD *)(v16 + 320 * HIDWORD(v13) + 288));
  if (_setjmp((int *)v17))
  {
    v20 = (_DWORD *)(v17 + 312);
    v21 = *__error();
    v22 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "data_map_ext_get_data_entry";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2347;
      _os_log_error_impl(&dword_1B8270000, v22, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v21;
    *v20 = v18;
    CIOnThreadCleanUpReset(v61);
    dropThreadId(v64, 1, v12);
    result = CICleanUpReset(v64, v62);
    goto LABEL_20;
  }
  if (*(_QWORD *)(a2 + 448))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a2 + 440));
    v54 = *(_QWORD *)(a2 + 448);
    if (v54)
      bit_vector_set_5272(v54, a3);
    os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 440));
  }
  if (*(_QWORD *)(a2 + 376) > a3 && (v24 = *(_QWORD *)(a2 + 288), (unint64_t)(v24 + 1) > 1))
  {
    v30 = v24 + 24 * a3;
    if (*(_QWORD *)v30 != -2)
    {
      if (*(_QWORD *)v30 == -1)
      {
        v40 = *(const __CFDictionary **)(a2 + 480);
        if (!v40)
        {
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          memset(buf, 0, sizeof(buf));
          v49 = *__error();
          v50 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            v53 = fd_name(*(_QWORD *)(a2 + 240), (char *)buf, 0x100uLL);
            *(_DWORD *)v67 = 136316162;
            v68 = "_data_map_ext_get_data_entry";
            v69 = 1024;
            v70 = 449;
            v71 = 2048;
            v72 = -1;
            v73 = 2048;
            v74 = a2;
            v75 = 2080;
            v76 = (uint64_t)v53;
            _os_log_error_impl(&dword_1B8270000, v50, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", v67, 0x30u);
          }
          *__error() = v49;
          fd_name(*(_QWORD *)(a2 + 240), (char *)buf, 0x100uLL);
          si_analytics_log_2064("(2)invalid data offset 0x%lx %p %s");
          goto LABEL_17;
        }
        Value = (const __CFData *)CFDictionaryGetValue(v40, (const void *)a3);
        if (!Value)
        {
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          memset(buf, 0, sizeof(buf));
          v51 = *__error();
          v52 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
          {
            v55 = fd_name(*(_QWORD *)(a2 + 240), (char *)buf, 0x100uLL);
            *(_DWORD *)v67 = 136316162;
            v68 = "_data_map_ext_get_data_entry";
            v69 = 1024;
            v70 = 443;
            v71 = 2048;
            v72 = -1;
            v73 = 2048;
            v74 = a2;
            v75 = 2080;
            v76 = (uint64_t)v55;
            _os_log_error_impl(&dword_1B8270000, v52, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", v67, 0x30u);
          }
          *__error() = v51;
          fd_name(*(_QWORD *)(a2 + 240), (char *)buf, 0x100uLL);
          si_analytics_log_2064("(1)invalid data offset 0x%lx %p %s");
          goto LABEL_17;
        }
        v42 = Value;
        v58 = CFDataGetLength(Value) - *(_DWORD *)(a2 + 220);
        v60 = &CFDataGetBytePtr(v42)[*(unsigned int *)(a2 + 220)];
        CFDataGetBytePtr(v42);
        v43 = *(_DWORD *)(a2 + 220);
        __memcpy_chk();
        v36 = (uint64_t)v60;
        v35 = v58;
        v34 = v43;
      }
      else
      {
        v56 = *(_QWORD *)v30;
        v31 = *(_DWORD *)(v30 + 8);
        v57 = *(_DWORD *)(v30 + 12);
        v32 = *(_QWORD *)(a2 + 472);
        *(_DWORD *)v67 = 0;
        contentindex_for_id = si_get_contentindex_for_id(v32, v31);
        v66 = 0;
        if (!contentindex_for_id)
        {
          v47 = *__error();
          v48 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "data_entry_restore";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 389;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = a3;
            *(_WORD *)&buf[28] = 1024;
            *(_DWORD *)&buf[30] = v31;
            *(_WORD *)&buf[34] = 2048;
            *(_QWORD *)&buf[36] = v56;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v57;
            _os_log_error_impl(&dword_1B8270000, v48, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid index_id %u offset 0x%llx meta 0x%x", buf, 0x32u);
          }
          *__error() = v47;
          goto LABEL_17;
        }
        DataForId = ContentIndexGetDataForId(*(_QWORD *)(contentindex_for_id + 4896), v56, v57, (uint64_t)&v66, (uint64_t)v67);
        v34 = *(_DWORD *)(a2 + 220);
        v35 = *(_DWORD *)v67;
        v36 = DataForId;
      }
      v44 = v34;
      v45 = v36;
      v46 = v35;
      __memcpy_chk();
      *(_DWORD *)(a1 + 20) = v44;
      *(_QWORD *)a1 = v45;
      *(_QWORD *)(a1 + 8) = v46;
      *a4 = 1;
    }
  }
  else
  {
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    memset(buf, 0, sizeof(buf));
    v25 = *__error();
    v26 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v37 = *(_QWORD *)(a2 + 376);
      v38 = *(_QWORD *)(a2 + 288);
      v39 = fd_name(*(_QWORD *)(a2 + 240), (char *)buf, 0x100uLL);
      *(_DWORD *)v67 = 136316674;
      v68 = "_data_map_ext_get_offset_entry";
      v69 = 1024;
      v70 = 409;
      v71 = 2048;
      v72 = a3;
      v73 = 2048;
      v74 = v37;
      v75 = 2048;
      v76 = a2;
      v77 = 2048;
      v78 = v38;
      v79 = 2080;
      v80 = v39;
      _os_log_error_impl(&dword_1B8270000, v26, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", v67, 0x44u);
    }
    *__error() = v25;
  }
LABEL_17:
  v65 = 1;
  v27 = *(_QWORD *)&threadData[18 * v64 + 2];
  v28 = v27 + 320 * v63;
  *(_DWORD *)(v28 + 312) = v18;
  v29 = *(void (**)(_QWORD))(v28 + 232);
  if (v29)
    v29(*(_QWORD *)(v27 + 320 * v63 + 288));
  result = dropThreadId(v64, 0, v12);
LABEL_20:
  if (v65)
  {
    if ((v10 & 1) != 0)
      return result;
    return _data_map_ext_unlock(a2);
  }
  *a4 = 0;
  *(_DWORD *)(a2 + 464) = 22;
  if ((v10 & 1) == 0)
    return _data_map_ext_unlock(a2);
  return result;
}

const UInt8 *data_map_ext_get_data(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  const UInt8 *result;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void (*v15)(_QWORD);
  _DWORD *v16;
  int v17;
  NSObject *v18;
  const UInt8 *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  const UInt8 *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD);
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t contentindex_for_id;
  unsigned int v32;
  const __CFDictionary *v33;
  const __CFData *Value;
  const __CFData *v35;
  const UInt8 *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  int v40;
  NSObject *v41;
  int v42;
  NSObject *v43;
  int v44;
  NSObject *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  char v55;
  unsigned int v56;
  const UInt8 *DataForId;
  int v58;
  uint8_t v59[4];
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  char *v72;
  uint8_t buf[64];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if (_data_map_ext_rdlock(a1))
  {
LABEL_2:
    if (a3)
      *a3 = 0;
    return 0;
  }
  v55 = 0;
  makeThreadId();
  do
  {
    v7 = __ldxr(exceptionSequenceNum);
    v8 = v7 + 1;
  }
  while (__stxr(v7 + 1, exceptionSequenceNum));
  v9 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11061, a1, 0, v8);
  v53 = HIDWORD(v9);
  v54 = v9;
  v51 = v11;
  v52 = v10;
  v12 = *(_QWORD *)&threadData[18 * v9 + 2];
  v13 = v12 + 320 * HIDWORD(v9);
  v14 = *(_DWORD *)(v13 + 312);
  v15 = *(void (**)(_QWORD))(v13 + 224);
  if (v15)
    v15(*(_QWORD *)(v12 + 320 * HIDWORD(v9) + 288));
  if (_setjmp((int *)v13))
  {
    v16 = (_DWORD *)(v13 + 312);
    v17 = *__error();
    v18 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "data_map_ext_get_data";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2373;
      _os_log_error_impl(&dword_1B8270000, v18, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v17;
    *v16 = v14;
    CIOnThreadCleanUpReset(v51);
    dropThreadId(v54, 1, v8);
    CICleanUpReset(v54, v52);
    v19 = 0;
    goto LABEL_22;
  }
  if (*(_QWORD *)(a1 + 376) <= a2 || (v20 = *(_QWORD *)(a1 + 288), (unint64_t)(v20 + 1) <= 1))
  {
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    memset(buf, 0, sizeof(buf));
    v21 = *__error();
    v22 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v37 = *(_QWORD *)(a1 + 376);
      v38 = *(_QWORD *)(a1 + 288);
      v39 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
      *(_DWORD *)v59 = 136316674;
      v60 = "_data_map_ext_get_offset_entry";
      v61 = 1024;
      v62 = 409;
      v63 = 2048;
      v64 = a2;
      v65 = 2048;
      v66 = v37;
      v67 = 2048;
      v68 = a1;
      v69 = 2048;
      v70 = v38;
      v71 = 2080;
      v72 = v39;
      _os_log_error_impl(&dword_1B8270000, v22, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", v59, 0x44u);
    }
    *__error() = v21;
    goto LABEL_18;
  }
  v27 = v20 + 24 * a2;
  v28 = *(_QWORD *)v27;
  if (*(_QWORD *)v27 != -2)
  {
    if (v28 == -1)
    {
      v33 = *(const __CFDictionary **)(a1 + 480);
      if (v33)
      {
        Value = (const __CFData *)CFDictionaryGetValue(v33, (const void *)a2);
        if (Value)
        {
          v35 = Value;
          v56 = CFDataGetLength(Value) - *(_DWORD *)(a1 + 220);
          DataForId = &CFDataGetBytePtr(v35)[*(unsigned int *)(a1 + 220)];
          CFDataGetBytePtr(v35);
          __memcpy_chk();
          v32 = v56;
          goto LABEL_33;
        }
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        memset(buf, 0, sizeof(buf));
        v44 = *__error();
        v45 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          v47 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
          *(_DWORD *)v59 = 136316162;
          v60 = "_data_map_ext_get_data_entry";
          v61 = 1024;
          v62 = 443;
          v63 = 2048;
          v64 = -1;
          v65 = 2048;
          v66 = a1;
          v67 = 2080;
          v68 = (uint64_t)v47;
          _os_log_error_impl(&dword_1B8270000, v45, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", v59, 0x30u);
        }
        *__error() = v44;
        fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
        si_analytics_log_2064("(1)invalid data offset 0x%lx %p %s");
      }
      else
      {
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        memset(buf, 0, sizeof(buf));
        v42 = *__error();
        v43 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          v46 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
          *(_DWORD *)v59 = 136316162;
          v60 = "_data_map_ext_get_data_entry";
          v61 = 1024;
          v62 = 449;
          v63 = 2048;
          v64 = -1;
          v65 = 2048;
          v66 = a1;
          v67 = 2080;
          v68 = (uint64_t)v46;
          _os_log_error_impl(&dword_1B8270000, v43, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx %p %s", v59, 0x30u);
        }
        *__error() = v42;
        fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
        si_analytics_log_2064("(2)invalid data offset 0x%lx %p %s");
      }
    }
    else
    {
      v29 = *(_DWORD *)(v27 + 8);
      v50 = *(_DWORD *)(v27 + 12);
      v30 = *(_QWORD *)(a1 + 472);
      *(_DWORD *)v59 = 0;
      contentindex_for_id = si_get_contentindex_for_id(v30, v29);
      v58 = 0;
      if (contentindex_for_id)
      {
        DataForId = (const UInt8 *)ContentIndexGetDataForId(*(_QWORD *)(contentindex_for_id + 4896), v28, v50, (uint64_t)&v58, (uint64_t)v59);
        v32 = *(_DWORD *)v59;
LABEL_33:
        if (a3)
          *a3 = v32;
        if (*(_QWORD *)(a1 + 448))
        {
          os_unfair_lock_lock((os_unfair_lock_t)(a1 + 440));
          v48 = *(_QWORD *)(a1 + 448);
          if (v48)
            bit_vector_set_5272(v48, a2);
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 440));
        }
        v36 = DataForId;
        goto LABEL_47;
      }
      v49 = v29;
      v40 = *__error();
      v41 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "data_entry_restore";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 389;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = a2;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v49;
        *(_WORD *)&buf[34] = 2048;
        *(_QWORD *)&buf[36] = v28;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v50;
        _os_log_error_impl(&dword_1B8270000, v41, OS_LOG_TYPE_ERROR, "%s:%d: data id %lld invalid index_id %u offset 0x%llx meta 0x%x", buf, 0x32u);
      }
      *__error() = v40;
    }
    v36 = 0;
LABEL_47:
    v23 = v36;
    goto LABEL_19;
  }
LABEL_18:
  v23 = 0;
LABEL_19:
  v55 = 1;
  v24 = *(_QWORD *)&threadData[18 * v54 + 2];
  v25 = v24 + 320 * v53;
  *(_DWORD *)(v25 + 312) = v14;
  v26 = *(void (**)(_QWORD))(v25 + 232);
  if (v26)
    v26(*(_QWORD *)(v24 + 320 * v53 + 288));
  dropThreadId(v54, 0, v8);
  v19 = v23;
LABEL_22:
  if (!v55)
    *(_DWORD *)(a1 + 464) = 22;
  _data_map_ext_unlock(a1);
  result = v19;
  if (!v19)
    goto LABEL_2;
  return result;
}

uint64_t data_map_ext_restore_data(uint64_t a1, unint64_t a2, void *a3, size_t a4, const void *a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  unint64_t v14;
  uint64_t v16;
  char *v17;
  size_t v18;
  size_t v19;
  BOOL v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  char *v39;
  char v40[256];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = _data_map_ext_wrlock(a1);
  if (*(_QWORD *)(a1 + 376) > a2 && (v11 = *(_QWORD *)(a1 + 288), (unint64_t)(v11 + 1) > 1))
  {
    if (*(_QWORD *)(v11 + 24 * a2) == -1)
    {
      MEMORY[0x1E0C80A78](v10);
      v17 = (char *)&v26 - v16;
      v18 = *(unsigned int *)(a1 + 220);
      v20 = v19 >= v18;
      v21 = v19 - v18;
      if (v20)
        v22 = v21;
      else
        v22 = 0;
      bzero(&v17[v18], v22);
      memcpy(v17, a5, v18);
      memcpy(&v17[v18], a3, a4);
      data_map_ext_store_as_update(a1, (const void *)a2, (UInt8 *)v17, v18 + a4);
    }
  }
  else
  {
    memset(v40, 0, sizeof(v40));
    v12 = *__error();
    v13 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v23 = *(_QWORD *)(a1 + 376);
      v24 = *(_QWORD *)(a1 + 288);
      v25 = fd_name(*(_QWORD *)(a1 + 240), v40, 0x100uLL);
      v26 = 136316674;
      v27 = "_data_map_ext_get_offset_entry";
      v28 = 1024;
      v29 = 409;
      v30 = 2048;
      v31 = a2;
      v32 = 2048;
      v33 = v23;
      v34 = 2048;
      v35 = a1;
      v36 = 2048;
      v37 = v24;
      v38 = 2080;
      v39 = v25;
      _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %lld max %lld %p map: %p %s", (uint8_t *)&v26, 0x44u);
    }
    *__error() = v12;
    v14 = dm_hash((uint64_t)a3, a4);
    if (*(_QWORD *)(a1 + 376) <= a2)
      *(_QWORD *)(a1 + 376) = a2 + 1;
    _data_map_ext_push_to_update_set(a1, a2, v14, (UInt8 *)a3, a4, 0);
  }
  return _data_map_ext_unlock(a1);
}

void page_cache_init(uint64_t a1)
{
  NSObject *v2;

  if (page_cache_init_onceToken != -1)
    dispatch_once(&page_cache_init_onceToken, &__block_literal_global_11246);
  v2 = dispatch_group_create();
  dispatch_group_async(v2, (dispatch_queue_t)purgeQueue, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE250, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE258, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE260, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE268, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE270, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE278, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE280, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE288, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE290, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE298, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE2A0, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE2A8, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE2B0, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE2B8, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE2C0, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE2C8, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE2D0, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE2D8, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE2E0, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE2E8, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE2F0, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE2F8, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE300, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE308, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE310, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE318, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE320, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE328, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE330, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE338, &__block_literal_global_3_11247);
  dispatch_group_async(v2, (dispatch_queue_t)qword_1EDBBE340, &__block_literal_global_3_11247);
  dispatch_group_wait(v2, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(v2);
  atomic_store(0, (unsigned int *)(a1 + 248));
}

dispatch_queue_t __page_cache_init_block_invoke()
{
  dispatch_queue_t result;

  purgeQueue = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE250 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE258 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE260 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE268 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE270 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE278 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE280 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE288 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE290 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE298 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE2A0 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE2A8 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE2B0 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE2B8 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE2C0 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE2C8 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE2D0 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE2D8 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE2E0 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE2E8 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE2F0 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE2F8 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE300 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE308 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE310 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE318 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE320 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE328 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE330 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE338 = (uint64_t)dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  result = dispatch_queue_create("com.apple.spotlightindex.purgablectrl", 0);
  qword_1EDBBE340 = (uint64_t)result;
  return result;
}

uint64_t _cache_remove(uint64_t *key)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (sdb_init_cache_onceToken != -1)
    dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_27_11254);
  if (sdb_init_cache_status != 1)
    return 0;
  v2 = cache_remove((cache_t *)sdbLargeCacheArray, key);
  if (dword_1EF19FCA8 >= 5)
  {
    v3 = *__error();
    v4 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *key;
      v6 = *((_DWORD *)key + 2);
      v8 = 134218240;
      v9 = v5;
      v10 = 1024;
      v11 = v6;
      _os_log_impl(&dword_1B8270000, v4, OS_LOG_TYPE_DEFAULT, "Cache remove %p %d", (uint8_t *)&v8, 0x12u);
    }
    *__error() = v3;
  }
  return v2;
}

uint64_t __sdb_init_cache_block_invoke()
{
  host_t v0;
  uint64_t result;
  uint64_t v2;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[4];
  __int128 v5;
  __int128 v6;

  v5 = 0u;
  v6 = 0u;
  *(_OWORD *)host_info_out = 0u;
  host_info_outCnt = 12;
  v0 = MEMORY[0x1BCCB1010]();
  host_info(v0, 1, host_info_out, &host_info_outCnt);
  result = cache_create("com.apple.metadata.framework.sdb_page_cache", &sdbCacheAttributes, (cache_t **)&sdbLargeCacheArray);
  v2 = sdbLargeCacheArray;
  if (sdbLargeCacheArray)
    result = cache_set_cost_hint();
  sdb_init_cache_status = v2 != 0;
  return result;
}

_OWORD *sdb_key_retain(_OWORD *a1, _QWORD *a2)
{
  _OWORD *result;

  result = malloc_type_malloc(0x10uLL, 0x10200403A5D3213uLL);
  if (result)
    *result = *a1;
  *a2 = result;
  return result;
}

uint64_t sdb_make_nonpurgeable(uint64_t a1)
{
  unint64_t v1;
  unsigned int v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD v6[6];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  char v10;

  v7 = 0;
  v8 = &v7;
  v9 = 0x2000000000;
  HIDWORD(v1) = 1713515327 * a1;
  LODWORD(v1) = 1713515327 * a1;
  v10 = 0;
  v2 = -2048144789 * ((1107688271 * (v1 >> 21)) ^ 0x1F0A259C);
  v3 = purgeQueue[((53 * (v2 ^ (v2 >> 13))) ^ ((-1028477387
                                                                                            * (v2 ^ (v2 >> 13))) >> 16)) & 0x1F];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = __sdb_make_nonpurgeable_block_invoke;
  v6[3] = &unk_1E6E37FA0;
  v6[4] = &v7;
  v6[5] = a1;
  dispatch_sync(v3, v6);
  v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t sdb_make_purgeable()
{
  return dispatch_async_enforce_qos_class_f();
}

uint64_t __sdb_make_nonpurgeable_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = malloc_make_nonpurgeable(*(void **)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_DWORD)result == 0;
  return result;
}

void page_cache_move(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *value_out;
  uint64_t key;
  uint64_t v15;

  key = 0;
  v15 = 0;
  value_out = 0;
  v3 = atomic_load((unsigned int *)(a1 + 248));
  if (v3 > a3)
  {
    key = *(_QWORD *)a1;
    v15 = a3;
    if (sdb_init_cache_onceToken != -1)
      dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_27_11254);
    if (sdb_init_cache_status == 1 && !cache_get_and_retain((cache_t *)sdbLargeCacheArray, &key, &value_out))
    {
      _cache_remove(&key);
      if (value_out)
      {
        key = *(_QWORD *)a1;
        v15 = a2;
        v6 = atomic_load((unsigned int *)(a1 + 248));
        if (v6 <= a2)
          atomic_store(a2 + 1, (unsigned int *)(a1 + 248));
        v7 = value_out;
        v8 = *((int *)value_out + 2);
        v9 = *MEMORY[0x1E0C85AD8];
        if (sdb_init_cache_onceToken != -1)
        {
          v12 = *MEMORY[0x1E0C85AD8];
          dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_27_11254);
          v9 = v12;
        }
        if (sdb_init_cache_status == 1)
        {
          if (cache_set_and_retain((cache_t *)sdbLargeCacheArray, &key, v7, (v8 + v9 - 1) & ~v9))
            goto LABEL_17;
          v10 = value_out;
          if (sdb_init_cache_onceToken != -1)
            dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_27_11254);
          if (sdb_init_cache_status == 1)
          {
            cache_release_value((cache_t *)sdbLargeCacheArray, v10);
LABEL_17:
            v11 = value_out;
            if (sdb_init_cache_onceToken != -1)
              dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_27_11254);
            goto LABEL_19;
          }
        }
        v11 = value_out;
LABEL_19:
        if (sdb_init_cache_status == 1)
          cache_release_value((cache_t *)sdbLargeCacheArray, v11);
      }
    }
  }
}

char *db_cache_alloc(uint64_t a1)
{
  char *v2;

  v2 = (char *)malloc_type_calloc(1uLL, 0x1D0uLL, 0x102004031B59A9BuLL);
  *(_QWORD *)v2 = a1;
  *((_QWORD *)v2 + 26) = 20;
  *(_QWORD *)(v2 + 220) = 0x400000002;
  pthread_rwlock_init((pthread_rwlock_t *)(v2 + 8), 0);
  page_cache_init((uint64_t)v2);
  return v2;
}

void db_cache_clear(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  int v7;
  unsigned int i;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unint64_t *v13;
  char *v14;
  _OWORD v15[2];
  __int128 v16;
  uint64_t v17;

  *((_BYTE *)a1 + 232) = 1;
  if (*((int *)a1 + 55) >= 1)
  {
    v4 = 0;
    v5 = a1 + 39;
    do
    {
      v6 = (char *)a1 + 4 * v4;
      v7 = *((_DWORD *)v6 + 63);
      memset(v15, 0, sizeof(v15));
      v16 = 0u;
      LODWORD(v15[0]) = v7;
      *(_OWORD *)((char *)v15 + 8) = *(_OWORD *)(v5 - 5);
      DWORD2(v15[1]) = *((_DWORD *)v5 - 6);
      *(_QWORD *)&v16 = *(v5 - 2);
      DWORD2(v16) = *((_DWORD *)v5 - 2);
      v17 = *v5;
      (*(void (**)(uint64_t, _OWORD *))(a2 + 16))(a2, v15);
      *(_OWORD *)(v5 - 5) = *(_OWORD *)((char *)v15 + 8);
      *((_DWORD *)v5 - 6) = DWORD2(v15[1]);
      *(v5 - 2) = v16;
      *((_DWORD *)v5 - 2) = DWORD2(v16);
      *v5 = v17;
      v5 += 6;
      *((_DWORD *)v6 + 63) = v15[0];
      ++v4;
    }
    while (v4 < *((int *)a1 + 55));
  }
  v15[0] = *a1;
  if (atomic_load((unsigned int *)a1 + 62))
  {
    for (i = 0; i < v10; ++i)
    {
      DWORD2(v15[0]) = i;
      _cache_remove((uint64_t *)v15);
      v10 = atomic_load((unsigned int *)a1 + 62);
    }
  }
  atomic_store(0, (unsigned int *)a1 + 62);
  page_cache_init((uint64_t)a1);
  v11 = *((_DWORD *)a1 + 55);
  if (v11 >= 1)
  {
    v12 = 0;
    v13 = a1 + 34;
    do
    {
      v14 = (char *)a1 + 4 * v12;
      if (*((_DWORD *)v14 + 63) && *v13 && !*((_DWORD *)v13 + 4))
      {
        free((void *)v13[1]);
        v13[1] = 0;
        free((void *)*v13);
        *v13 = 0;
        *((_DWORD *)v14 + 63) = 0;
        v13[3] = 0;
        *((_DWORD *)v13 + 8) = 0;
        v13[5] = 0;
        v11 = *((_DWORD *)a1 + 55);
      }
      ++v12;
      v13 += 6;
    }
    while (v12 < v11);
  }
  *((_BYTE *)a1 + 232) = 0;
}

uint64_t __db_cache_dealloc_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t v7[16];

  if (*(_DWORD *)(a2 + 24))
  {
    v3 = *__error();
    v4 = _SILogForLogForCategory(7);
    v5 = 2 * (dword_1EF19FCA8 < 4);
    if (os_log_type_enabled(v4, v5))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1B8270000, v4, v5, "Forcing Cache Cleanup", v7, 2u);
    }
    *__error() = v3;
    *(_DWORD *)(a2 + 24) = 0;
  }
  return 0;
}

uint64_t db_cache_contains(uint64_t a1, unsigned int a2, int a3)
{
  char v3;
  unint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  int *v11;
  int v12;
  unsigned int v13;

  v3 = a3;
  if (a3)
    pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 8));
  v6 = *(unsigned int *)(a1 + 220);
  if ((int)v6 < 1)
  {
    v9 = 0;
    if ((v3 & 1) != 0)
LABEL_8:
      pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 8));
  }
  else
  {
    v7 = 63;
    do
    {
      v8 = *(_DWORD *)(a1 + 4 * v7);
      v9 = v8 == a2;
      if (v7 - 62 >= v6)
        break;
      ++v7;
    }
    while (v8 != a2);
    if ((v3 & 1) != 0)
      goto LABEL_8;
  }
  if (v9)
    return 1;
  v10 = *(unsigned int *)(a1 + 220);
  if ((int)v10 < 1)
  {
LABEL_14:
    v13 = atomic_load((unsigned int *)(a1 + 248));
    if (v13 > a2)
    {
      if (sdb_init_cache_onceToken != -1)
        dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_27_11254);
      if (sdb_init_cache_status == 1)
      {
        cache_get_info_for_key();
        return 1;
      }
    }
    return 1;
  }
  v11 = (int *)(a1 + 252);
  while (1)
  {
    v12 = *v11++;
    if (v12 == a2)
      return 0;
    if (!--v10)
      goto LABEL_14;
  }
}

uint64_t db_cache_flush_entry(unsigned int *a1, int a2, uint64_t a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v9;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _OWORD v20[2];
  __int128 v21;
  uint64_t v22;

  v3 = &a1[a2];
  v6 = v3[63];
  v5 = v3 + 63;
  v4 = v6;
  if (!v6)
    return 0;
  v9 = &a1[12 * a2];
  if (!*((_QWORD *)v9 + 34))
    return 0;
  v11 = v9 + 68;
  v12 = &a1[12 * a2 + 72];
  v20[0] = 0uLL;
  v13 = atomic_load(a1 + 62);
  if (v13 > v4)
  {
    *(_QWORD *)&v20[0] = *(_QWORD *)a1;
    *((_QWORD *)&v20[0] + 1) = v4;
    _cache_remove((uint64_t *)v20);
  }
  page_cache_add(a1, (_DWORD **)v11, *v5, 0);
  v14 = *v5;
  memset(v20, 0, sizeof(v20));
  v21 = 0u;
  LODWORD(v20[0]) = v14;
  v15 = &a1[12 * a2];
  *(_OWORD *)((char *)v20 + 8) = *(_OWORD *)v11;
  DWORD2(v20[1]) = *v12;
  *(_QWORD *)&v21 = *((_QWORD *)v15 + 37);
  DWORD2(v21) = v15[76];
  v22 = *((_QWORD *)v15 + 39);
  v16 = (*(uint64_t (**)(uint64_t, _OWORD *))(a3 + 16))(a3, v20);
  v18 = *((_QWORD *)&v20[0] + 1);
  v17 = *(void **)&v20[1];
  *(_QWORD *)v11 = *((_QWORD *)&v20[0] + 1);
  *((_QWORD *)v15 + 35) = v17;
  *v12 = DWORD2(v20[1]);
  *((_QWORD *)v15 + 37) = v21;
  v15[76] = DWORD2(v21);
  *((_QWORD *)v15 + 39) = v22;
  *v5 = v20[0];
  if (!v18)
  {
    free(v17);
    *((_OWORD *)v11 + 1) = 0u;
    *((_OWORD *)v11 + 2) = 0u;
    *(_OWORD *)v11 = 0u;
    *v5 = 0;
  }
  return v16;
}

void db_cache_move_page(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  int v12;

  v3 = *(_DWORD *)(a1 + 220);
  if (v3 >= 1)
  {
    v7 = 0;
    v8 = (_QWORD *)(a1 + 312);
    do
    {
      v11 = a1 + 4 * v7;
      v12 = *(_DWORD *)(v11 + 252);
      if (v12 == a3)
      {
        *(_DWORD *)(v11 + 252) = 0;
        *(v8 - 2) = 0;
        *((_DWORD *)v8 - 2) = 0;
        *v8 = 0;
        v9 = (_QWORD *)(a1 + 48 * v7 + 272);
        free((void *)*(v8 - 4));
        *(v8 - 4) = 0;
        v10 = (void *)*(v8 - 5);
      }
      else
      {
        if (v12 != a2)
          goto LABEL_5;
        *(_DWORD *)(v11 + 252) = a3;
        v9 = v8 - 4;
        v10 = (void *)*(v8 - 4);
        if (!v10)
          goto LABEL_5;
      }
      free(v10);
      *v9 = 0;
      v3 = *(_DWORD *)(a1 + 220);
LABEL_5:
      ++v7;
      v8 += 6;
    }
    while (v7 < v3);
  }
}

double db_cache_add_page(__n128 *a1, _BYTE *a2, _BYTE *a3, unsigned __int32 a4)
{
  unsigned int v8;
  int v9;
  signed int v10;
  uint64_t v11;
  int v13;
  int v14;
  __n128 *v15;
  unsigned __int32 *v16;
  int v17;
  __n128 *v18;
  __n128 *v19;
  void *v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  const char *v24;
  __n128 *v25;
  double result;
  char *v27;
  char *v28;
  const char *v29;
  char *v30;
  const char *v31;
  uint64_t v32;
  char *v33;
  const char *v34;
  char *v35;
  const char *v36;
  _BYTE v37[28];

  if (!a1[13].n128_u32[3])
  {
    LODWORD(v11) = 2;
    a1[13].n128_u32[3] = 2;
    v14 = 1;
LABEL_14:
    v11 = v11;
    v15 = a1 + 17;
    v16 = &a1[15].n128_u32[3];
    while (1)
    {
      v17 = *v16++;
      if (v17 == a4)
        break;
      if ((_BYTE *)v15->n128_u64[0] == a2)
      {
        v30 = __si_assert_copy_extra_268();
        v28 = v30;
        v31 = "";
        if (v30)
          v31 = v30;
        __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1320, "dbp != cache->cache_entries[i].cache_dbps", v31);
        goto LABEL_36;
      }
      v15 += 3;
      if (!--v11)
        goto LABEL_18;
    }
    v27 = __si_assert_copy_extra_268();
    v28 = v27;
    v29 = "";
    if (v27)
      v29 = v27;
    __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1319, "pgnum != cache->cache_pgnum[i]", v29);
LABEL_36:
    free(v28);
    if (__valid_fs(-1))
      v32 = 2989;
    else
      v32 = 3072;
    *(_DWORD *)v32 = -559038737;
    abort();
  }
  v8 = atomic_load(&a1[14].n128_u32[1]);
  v9 = 100 * v8;
  v10 = atomic_load(&a1[13].n128_u32[2]);
  LODWORD(v11) = a1[13].n128_u32[3];
  if (v9 > v10 && (int)v11 <= 3)
  {
    if (a1[15].n128_u32[(int)v11 + 2])
    {
      v13 = atomic_load(&a1[14].n128_u32[1]);
      LODWORD(v11) = a1[13].n128_u32[3];
      if (v13 > 10 * (int)v11 && MEMORY[0xFFFFFC030] <= 0x32u)
      {
        LODWORD(v11) = v11 + 1;
        a1[13].n128_u32[3] = v11;
        atomic_store(0, &a1[14].n128_u32[1]);
        atomic_store(0, &a1[13].n128_u32[2]);
      }
    }
  }
  v14 = v11 - 1;
  if ((int)v11 >= 1)
    goto LABEL_14;
LABEL_18:
  if ((a2[12] & 0xC) == 0)
  {
    v33 = __si_assert_copy_extra_268();
    v28 = v33;
    v34 = "";
    if (v33)
      v34 = v33;
    __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1322, "dbp->flags & 0x0000000C", v34);
    goto LABEL_36;
  }
  v18 = &a1[3 * v14];
  v19 = v18 + 17;
  v21 = (_BYTE *)v18[17].n128_u64[0];
  v20 = (void *)v18[17].n128_u64[1];
  *(__n128 *)&v37[12] = v18[19];
  *(__n128 *)v37 = *(__n128 *)((char *)v18 + 292);
  if (v18[18].n128_u32[0])
  {
    v35 = __si_assert_copy_extra_268();
    v28 = v35;
    v36 = "";
    if (v35)
      v36 = v35;
    __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1328, "entry.cache_dirty==0", v36);
    goto LABEL_36;
  }
  if (v20)
    free(v20);
  if (a2 == a3)
  {
    free(v21);
  }
  else if (v21 != a2)
  {
    v22 = __si_assert_copy_extra_268();
    v23 = v22;
    v24 = "";
    if (v22)
      v24 = v22;
    __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1350, "entry.cache_dbps == dbp", v24);
    free(v23);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  a1[15].n128_u32[v14 + 3] = a4;
  v19->n128_u64[0] = (unint64_t)a2;
  v19->n128_u64[1] = 0;
  v19[1].n128_u32[0] = 0;
  v19[2] = *(__n128 *)&v37[12];
  *(__n128 *)((char *)v19 + 20) = *(__n128 *)v37;
  v25 = &a1[3 * v14];
  v25[18].n128_u64[1] = 0;
  v25[19].n128_u32[0] = 0;
  v25[19].n128_u64[1] = 0;
  *(_QWORD *)&result = db_cache_mru(a1, v14).n128_u64[0];
  return result;
}

uint64_t db_cache_set_offset_hint(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  pthread_rwlock_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *i;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v10 = (pthread_rwlock_t *)(a1 + 8);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 8));
  v11 = *(unsigned int *)(a1 + 220);
  if ((int)v11 >= 1)
  {
    v12 = 0;
    for (i = (_QWORD *)(a1 + 272); *i != a2; i += 6)
    {
      if (v11 == ++v12)
        return pthread_rwlock_unlock(v10);
    }
    v14 = a1 + 48 * v12;
    if (a5 <= 0)
      v15 = 0;
    else
      v15 = a3;
    if (a5 <= 0)
      v16 = 0;
    else
      v16 = a4;
    *(_QWORD *)(v14 + 296) = v15;
    *(_DWORD *)(v14 + 304) = v16;
    *(_QWORD *)(v14 + 312) = a5 & ~(a5 >> 63);
  }
  return pthread_rwlock_unlock(v10);
}

uint64_t db_cache_clear_offset_hints(uint64_t a1)
{
  pthread_rwlock_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = (pthread_rwlock_t *)(a1 + 8);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 8));
  v3 = *(unsigned int *)(a1 + 220);
  if ((int)v3 >= 1)
  {
    if ((_DWORD)v3 == 1)
    {
      v4 = 0;
LABEL_7:
      v7 = v3 - v4;
      v8 = (_QWORD *)(a1 + 48 * v4 + 312);
      do
      {
        *(v8 - 2) = 0;
        *((_DWORD *)v8 - 2) = 0;
        *v8 = 0;
        v8 += 6;
        --v7;
      }
      while (v7);
      return pthread_rwlock_unlock(v2);
    }
    v4 = v3 & 0xFFFFFFFE;
    v5 = (_QWORD *)(a1 + 360);
    v6 = v4;
    do
    {
      *(v5 - 8) = 0;
      *(v5 - 2) = 0;
      *((_DWORD *)v5 - 14) = 0;
      *((_DWORD *)v5 - 2) = 0;
      *(v5 - 6) = 0;
      *v5 = 0;
      v5 += 12;
      v6 -= 2;
    }
    while (v6);
    if (v4 != v3)
      goto LABEL_7;
  }
  return pthread_rwlock_unlock(v2);
}

void __page_cache_deserialize_entries_block_invoke(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  free(*(void **)(a1 + 40));
}

void __page_cache_deserialize_entries_block_invoke_2(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  free(*(void **)(a1 + 40));
}

uint64_t SISearchCtx::preIterate(CFAbsoluteTime *this, SISearchCtx *a2)
{
  SISearchCtx::common_preIterate(this, a2);
  return 1;
}

uint64_t SISearchCtx::queryContext(SISearchCtx *this)
{
  return 0;
}

uint64_t SISearchCtx::matchingAttributeNodes(SISearchCtx *this, uint64_t *a2)
{
  if (a2)
    *a2 = 0;
  return 0;
}

uint64_t SISearchCtx::matchingArrayIndexNodes(SISearchCtx *this, uint64_t *a2)
{
  if (a2)
    *a2 = 0;
  return 0;
}

void SISearchCtx_ItemScope::~SISearchCtx_ItemScope(SISearchCtx_ItemScope *this)
{
  SISearchCtx_ItemScope::~SISearchCtx_ItemScope(this);
  JUMPOUT(0x1BCCB06A4);
}

{
  const void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  void *v11;

  *(_QWORD *)this = &off_1E6E2A1A8;
  v2 = (const void *)*((_QWORD *)this + 47);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 47) = 0;
  v3 = (_QWORD *)*((_QWORD *)this + 46);
  v4 = MEMORY[0x1E0C809B0];
  if (v3)
  {
    v7 = MEMORY[0x1E0C809B0];
    v8 = 0x40000000;
    v9 = __db_query_tree_apply_block_block_invoke;
    v10 = &unk_1E6E377F8;
    v11 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta(v3, (uint64_t)&v7, 0);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 45);
  if (v5)
  {
    v7 = v4;
    v8 = 0x40000000;
    v9 = __db_query_tree_apply_block_block_invoke;
    v10 = &unk_1E6E377F8;
    v11 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta(v5, (uint64_t)&v7, 0);
  }
  v6 = (void *)*((_QWORD *)this + 48);
  if (v6)
    free(v6);
  SISearchCtx::~SISearchCtx(this);
}

BOOL SISearchCtx_ItemScope::fsContext(SISearchCtx_ItemScope *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 1184) == 0;
}

void SISearchCtx_ItemScope::enqueue(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  qos_class_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  const char *v15;
  uint64_t v16;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_DWORD *)(a1 + 304);
  if (*(_QWORD *)(v6 + 1184))
  {
    if (v7 >= 2)
      v8 = 2;
    else
      v8 = *(_DWORD *)(a1 + 304);
    si_sdb_enqueue(*(_QWORD *)(a1 + 24), a4, a2, a3, v8);
  }
  else
  {
    if (!*(_QWORD *)(v6 + 1072))
    {
      v13 = __si_assert_copy_extra_521(-1);
      v14 = v13;
      v15 = "";
      if (v13)
        v15 = v13;
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIJob.c", 111, "ref->workqueues.queues[SI_FS_QUEUE_IDX]!=0", v15);
      free(v14);
      if (__valid_fs(-1))
        v16 = 2989;
      else
        v16 = 3072;
      *(_DWORD *)v16 = -559038737;
      abort();
    }
    if (qos_class_self() <= QOS_CLASS_USER_INITIATED)
      v9 = qos_class_self();
    else
      v9 = QOS_CLASS_USER_INITIATED;
    if (v7 == -1)
      v10 = 17;
    else
      v10 = v9;
    v11 = 64;
    if (v7 >= -1)
    {
      v12 = v10;
    }
    else
    {
      v11 = 56;
      v12 = 9;
    }
    si_enqueue_work_with_qos(*(_QWORD *)(v6 + v11 + 1008), v12, (uint64_t)a2, a3);
  }
}

BOOL SISearchCtx_ItemScope::performSearch(SISearchCtx_ItemScope *this, PartialQueryResults *a2)
{
  _BOOL4 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  unsigned __int16 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned __int16 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  NSObject *v38;
  int *v39;
  char **v40;
  uint64_t v41;
  uint64_t v42;
  const __CFArray *v43;
  const __CFArray *v44;
  unint64_t *v45;
  double v46;
  double v47;
  __n128 v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  int v53;
  NSObject *v54;
  NSObject *v55;
  const char *v56;
  NSObject *v57;
  unsigned int *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  const __CFArray *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  unsigned __int16 v69;
  NSObject *v70;
  NSObject *v71;
  const char *v72;
  NSObject *v73;
  char **v74;
  uint64_t v75;
  uint64_t v76;
  const __CFArray *v77;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  char **v89;
  char **v90;
  _BOOL4 v91;
  CFIndex *v92;
  char **v93;
  size_t v94;
  char **v95;
  unsigned int *v96;
  uint64_t v97;
  CFIndex *v98;
  unint64_t ptr;
  unsigned int *ptra;
  uint64_t v101;
  _OWORD v102[5];
  _OWORD v103[5];
  uint8_t v104[16];
  CFIndex v105;
  uint64_t (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  uint8_t *v108;
  uint64_t (**v109)();
  uint64_t v110;
  SISearchCtx_ItemScope *v111;
  uint64_t v112;
  uint64_t v113;
  uint8_t *v114;
  uint8_t buf[8];
  uint8_t v116[8];
  __int128 v117;
  __int128 v118;
  _QWORD v119[6];
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 432))
  {
    v4 = *((_BYTE *)a2 + 433) != 0;
  }
  else
  {
    v4 = PartialQueryResults::__needsWhatFieldsMatched(a2);
    *((_BYTE *)a2 + 433) = v4;
    *((_BYTE *)a2 + 432) = 1;
  }
  v6 = *((_QWORD *)this + 49);
  v5 = *((_QWORD *)this + 50);
  v7 = v6 - v5;
  if (v6 <= v5)
    return *((_QWORD *)this + 50) < *((_QWORD *)this + 49);
  v8 = *((_QWORD *)this + 3);
  if (*((int *)this + 40) > 4)
  {
    v101 = 0;
  }
  else
  {
    v9 = *((_QWORD *)this + 13);
    v10 = v9;
    do
    {
      v11 = v10;
      v10 = *(_QWORD *)(v10 + 80);
    }
    while (v10);
    v12 = *(_DWORD *)(*(_QWORD *)(v11 + 8) + 80);
    v13 = *(_QWORD *)(v9 + 80);
    if (!v13)
      goto LABEL_14;
    v14 = 0;
    do
    {
      v14 ^= *(_DWORD *)(v9 + 104) == 0;
      v9 = v13;
      v13 = *(_QWORD *)(v13 + 80);
    }
    while (v13);
    if ((v14 & 1) != 0)
      v15 = 3553;
    else
LABEL_14:
      v15 = 2781;
    v101 = PartialQueryResults::start(a2, v12, v15, v7, 0);
  }
  v16 = *((_QWORD *)this + 5);
  if ((v16 & 0x7000000) != 0)
  {
    if (*MEMORY[0x1E0C85AD8] <= 0x2FuLL)
      ++sTotal;
    v17 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x30uLL, 0x31F9A007uLL);
    if (!v17)
      _log_fault_for_malloc_failure();
    v18 = *((_QWORD *)this + 49);
    v19 = *((_QWORD *)this + 50);
    v20 = v18 - v19;
    if (v18 == v19)
    {
LABEL_68:
      free(v17);
      if (*((_QWORD *)a2 + 186))
      {
        _MDPlistBytesEndArray();
        _MDPlistBytesEndPlist();
      }
      if (*((_QWORD *)a2 + 58))
      {
        _MDStoreOIDArrayEndBulkAdd();
        _MDStoreOIDArrayEndSequence();
        *((_QWORD *)a2 + 443) = 0;
      }
      return *((_QWORD *)this + 50) < *((_QWORD *)this + 49);
    }
    v21 = 0;
    v95 = (char **)((char *)a2 + 104);
    v98 = (CFIndex *)((char *)a2 + 232);
    v93 = (char **)((char *)a2 + 96);
    while (1)
    {
      v22 = *((_QWORD *)this + 48);
      v23 = *(_QWORD *)(v22 + 8 * v19);
      if (v23)
        break;
LABEL_67:
      ++v21;
      *((_QWORD *)this + 50) = ++v19;
      if (v21 == v20)
        goto LABEL_68;
    }
    if (*((_QWORD *)a2 + 314) >= 0xFFFDuLL)
    {
      v24 = *((_QWORD *)this + 13);
      v25 = v24;
      do
      {
        v26 = v25;
        v25 = *(_QWORD *)(v25 + 80);
      }
      while (v25);
      v27 = *(_QWORD *)(v24 + 80);
      if (!v27)
        goto LABEL_32;
      v28 = 0;
      do
      {
        v28 ^= *(_DWORD *)(v24 + 104) == 0;
        v24 = v27;
        v27 = *(_QWORD *)(v27 + 80);
      }
      while (v27);
      if ((v28 & 1) != 0)
        v29 = 3553;
      else
LABEL_32:
        v29 = 2781;
      PartialQueryResults::prepare((uint64_t)a2, *(_DWORD *)(*(_QWORD *)(v26 + 8) + 80), v29, 0);
      v22 = *((_QWORD *)this + 48);
      v19 = *((_QWORD *)this + 50);
      v23 = *(_QWORD *)(v22 + 8 * v19);
    }
    *v17 = v23;
    bzero(v116, 0x478uLL);
    v30 = *(_QWORD *)(v22 + 8 * v19);
    v31 = *((_QWORD *)this + 2);
    *((_QWORD *)&v117 + 1) = v8;
    *(_QWORD *)&v118 = v31;
    memset(&v119[1], 0, 40);
    if (v8)
      v32 = (*(unsigned __int8 *)(v8 + 6586) >> 1) & 1;
    else
      LOBYTE(v32) = 1;
    LOBYTE(v120) = v32;
    v121 = v30;
    *(_QWORD *)v116 = &off_1E6E2A0B8;
    v119[0] = v17;
    if (!*((_QWORD *)this + 45))
      goto LABEL_155;
    v111 = this;
    v112 = v31;
    v109 = &off_1E6E2A210;
    v110 = v8;
    v113 = 0;
    v114 = v116;
    v105 = 0;
    v106 = LazyGottenObject::_faultInGottenObj;
    v107 = 0;
    v108 = v116;
    if (!db_eval_obj_with_options(*(_QWORD *)(v8 + 1184)))
    {
      if (dword_1EF19FC90 >= 5)
      {
        v37 = *__error();
        v38 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          goto LABEL_52;
        goto LABEL_53;
      }
    }
    else
    {
LABEL_155:
      if (!*((_QWORD *)this + 46))
        goto LABEL_41;
      v33 = *((_QWORD *)this + 2);
      v111 = this;
      v112 = v33;
      v109 = &off_1E6E2A210;
      v110 = *((_QWORD *)&v117 + 1);
      v113 = 0;
      v114 = v116;
      v105 = 0;
      v106 = LazyGottenObject::_faultInGottenObj;
      v107 = 0;
      v108 = v116;
      if (db_eval_obj_with_options(*(_QWORD *)(v8 + 1184)))
      {
LABEL_41:
        v34 = *((_DWORD *)this + 40);
        if (v34 == 4)
        {
          if (*(_QWORD *)(v8 + 1184))
            v39 = CatInfoGotten_OID::dbo((CatInfoGotten_OID *)v116);
          else
            v39 = 0;
          if (*v98)
          {
            if (*(_BYTE *)a2)
            {
              if (!*v95)
              {
                v43 = (const __CFArray *)*((_QWORD *)a2 + 16);
                if (v43)
                {
                  v109 = 0;
                  SIFlattenArrayToCStringVector(v43, v95, (size_t *)&v109, &v105);
                }
              }
            }
            else if (!*v93)
            {
              v44 = (const __CFArray *)*((_QWORD *)a2 + 15);
              if (v44)
              {
                SIFlattenArrayToCStringVector(v44, v93, (size_t *)a2 + 30, v98);
                if (!*v93)
                  goto LABEL_149;
              }
            }
          }
          collectAttributesFromDBO(v8, v39, *((_QWORD *)a2 + 29), (uint64_t)a2, *((char ***)this + 19));
        }
        else if (v34 == 5)
        {
          v35 = v121;
          ++*((_QWORD *)a2 + 314);
          v36 = (_QWORD *)*((_QWORD *)a2 + 443);
          *v36 = v35;
          *((_QWORD *)a2 + 443) = v36 + 1;
        }
        else
        {
          LODWORD(v117) = v117 | 8;
          v40 = (char **)*((_QWORD *)this + 19);
          v41 = *((_QWORD *)this + 28);
          v42 = *((_QWORD *)this + 29);
          v102[3] = unk_1B86318E0;
          v102[4] = xmmword_1B86318F0;
          memset(v102, 0, 48);
          ptr &= 0xFFFFFF0000000000;
          writeDBOToPlistBytes(v8, v101, a2, v40, v116, *((_QWORD *)this + 2), v41, v42, 0, (uint64_t *)v102, ptr, SBYTE4(ptr), 0, 0, 0, 0, 0, *((_QWORD *)this + 1), 0);
        }
        goto LABEL_64;
      }
      if (dword_1EF19FC90 >= 5)
      {
        v37 = *__error();
        v38 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
LABEL_52:
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v38, OS_LOG_TYPE_DEFAULT, "File failed secondary query", buf, 2u);
        }
LABEL_53:
        *__error() = v37;
      }
    }
LABEL_64:
    if ((_QWORD *)v119[0] == v17)
      v119[0] = 0;
    CatInfoGotten_OID::~CatInfoGotten_OID((CatInfoGotten_OID *)v116);
    v19 = *((_QWORD *)this + 50);
    goto LABEL_67;
  }
  if ((v16 & 0x4000) != 0)
  {
    if (*MEMORY[0x1E0C85AD8] <= 0x2FuLL)
      ++sTotal;
    v96 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x30uLL, 0x31F9A007uLL);
    if (v96)
      goto LABEL_78;
    _log_fault_for_malloc_failure();
  }
  v96 = 0;
LABEL_78:
  PartialQueryResults::attributeIdVector(a2, *(int **)(v8 + 1184));
  v45 = db_obj_iter_create_with_filter(*(int **)(v8 + 1184), v7, *((_QWORD *)this + 48) + 8 * *((_QWORD *)this + 50), 0, 0, 0, 0, 0, 0);
  ptra = 0;
  *((_QWORD *)this + 50) += v7;
  v92 = (CFIndex *)((char *)a2 + 232);
  LODWORD(v94) = 0;
  v89 = (char **)((char *)a2 + 96);
  v90 = (char **)((char *)a2 + 104);
  v91 = v4;
  while (1)
  {
    *(_QWORD *)buf = 0;
    v49 = db_obj_iter_next((uint64_t)v45, (unint64_t *)buf, 1, v46, v47, v48);
    if (*(_QWORD *)buf >= v7)
      break;
    v50 = v49;
    if ((*((_BYTE *)this + 41) & 0x40) != 0)
    {
      if (!v49)
      {
        v50 = v96;
        *(_QWORD *)v96 = *(_QWORD *)(*((_QWORD *)this + 48) + 8 * *(_QWORD *)buf);
        goto LABEL_99;
      }
      if (dword_1EF19FC90 >= 5)
      {
        v53 = *__error();
        v54 = _SILogForLogForCategory(1);
        if (!os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          goto LABEL_95;
        *(_WORD *)v116 = 0;
        v55 = v54;
        v56 = "File with dbo: ignored for search during initial indexing";
        goto LABEL_94;
      }
    }
    else if (v49)
    {
      if (v4 && (*((_QWORD *)this + 46) || *((_QWORD *)this + 45)))
      {
        v51 = v49[3];
        if (v94 >= v51)
        {
          v52 = ptra;
        }
        else
        {
          v94 = (v51 + 4095) & 0xFFFFF000;
          v52 = (unsigned int *)malloc_type_realloc(ptra, v94, 0x85A176C5uLL);
          v51 = v50[3];
        }
        v58 = v50;
        v50 = v52;
        memcpy(v52, v58, v51);
        ptra = v50;
      }
LABEL_99:
      v120 = 0;
      memset(&v119[2], 0, 32);
      v118 = 0u;
      memset(v119, 0, sizeof(v119));
      v117 = 0u;
      v59 = *((_QWORD *)this + 2);
      *((_QWORD *)&v117 + 1) = v8;
      *(_QWORD *)&v118 = v59;
      if (v8)
        v60 = (*(unsigned __int8 *)(v8 + 6586) >> 1) & 1;
      else
        LOBYTE(v60) = 1;
      LOBYTE(v120) = v60;
      *(_QWORD *)v116 = &off_1E6E2A0F8;
      v119[0] = v50;
      if (*((_QWORD *)this + 45))
      {
        v111 = this;
        v112 = v59;
        v109 = &off_1E6E2A210;
        v110 = v8;
        v113 = 0;
        v114 = v116;
        v105 = 0;
        v106 = LazyGottenObject::_faultInGottenObj;
        v107 = 0;
        v108 = v116;
        if (!db_eval_obj_with_options(*(_QWORD *)(v8 + 1184)))
        {
          if (dword_1EF19FC90 < 5)
            goto LABEL_139;
          v88 = *__error();
          v70 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v104 = 0;
            v71 = v70;
            v72 = "File failed primary query";
            goto LABEL_129;
          }
LABEL_130:
          *__error() = v88;
LABEL_138:
          v4 = v91;
          goto LABEL_139;
        }
      }
      if (*((_QWORD *)this + 46))
      {
        v61 = *((_QWORD *)this + 2);
        v111 = this;
        v112 = v61;
        v109 = &off_1E6E2A210;
        v110 = *((_QWORD *)&v117 + 1);
        v113 = 0;
        v114 = v116;
        v105 = 0;
        v106 = LazyGottenObject::_faultInGottenObj;
        v107 = 0;
        v108 = v116;
        if (!db_eval_obj_with_options(*(_QWORD *)(v8 + 1184)))
        {
          if (dword_1EF19FC90 < 5)
            goto LABEL_139;
          v88 = *__error();
          v73 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v104 = 0;
            v71 = v73;
            v72 = "File failed secondary query";
LABEL_129:
            _os_log_impl(&dword_1B8270000, v71, OS_LOG_TYPE_DEFAULT, v72, v104, 2u);
          }
          goto LABEL_130;
        }
      }
      if (*((_DWORD *)this + 40) == 4)
      {
        if (*(_QWORD *)(v8 + 1184))
          v62 = (_QWORD *)v119[0];
        else
          v62 = 0;
        if (*v92)
        {
          if (*(_BYTE *)a2)
          {
            if (!*v90)
            {
              v63 = (const __CFArray *)*((_QWORD *)a2 + 16);
              if (v63)
              {
                v109 = 0;
                SIFlattenArrayToCStringVector(v63, v90, (size_t *)&v109, &v105);
              }
            }
          }
          else if (!*v89)
          {
            v77 = (const __CFArray *)*((_QWORD *)a2 + 15);
            if (v77)
            {
              SIFlattenArrayToCStringVector(v77, v89, (size_t *)a2 + 30, v92);
              if (!*v89)
              {
LABEL_149:
                v79 = __si_assert_copy_extra_268();
                __message_assert_272((uint64_t)v79, v80, v81, v82, v83, v84, v85, v86, (char)"SISearchCtx.h");
                free(v79);
                if (__valid_fs(-1))
                  v87 = 2989;
                else
                  v87 = 3072;
                *(_DWORD *)v87 = -559038737;
                abort();
              }
            }
          }
        }
        collectAttributesFromDBO(v8, v62, *((_QWORD *)a2 + 29), (uint64_t)a2, *((char ***)this + 19));
        goto LABEL_138;
      }
      if (*((_QWORD *)a2 + 314) >= 0xFFFDuLL)
      {
        v64 = *((_QWORD *)this + 13);
        v65 = v64;
        do
        {
          v66 = v65;
          v65 = *(_QWORD *)(v65 + 80);
        }
        while (v65);
        v67 = *(_QWORD *)(v64 + 80);
        if (!v67)
          goto LABEL_131;
        v68 = 0;
        do
        {
          v68 ^= *(_DWORD *)(v64 + 104) == 0;
          v64 = v67;
          v67 = *(_QWORD *)(v67 + 80);
        }
        while (v67);
        if ((v68 & 1) != 0)
          v69 = 3553;
        else
LABEL_131:
          v69 = 2781;
        PartialQueryResults::prepare((uint64_t)a2, *(_DWORD *)(*(_QWORD *)(v66 + 8) + 80), v69, 0);
      }
      LODWORD(v117) = v117 | 8;
      v74 = (char **)*((_QWORD *)this + 19);
      v75 = *((_QWORD *)this + 28);
      v76 = *((_QWORD *)this + 29);
      v103[3] = unk_1B86318E0;
      v103[4] = xmmword_1B86318F0;
      memset(v103, 0, 48);
      v97 &= 0xFFFFFF0000000000;
      writeDBOToPlistBytes(v8, v101, a2, v74, v116, *((_QWORD *)this + 2), v75, v76, 0, (uint64_t *)v103, v97, SBYTE4(v97), 0, 0, 0, 0, 0, *((_QWORD *)this + 1), 0);
LABEL_139:
      if ((unsigned int *)v119[0] == v50)
        v119[0] = 0;
      CatInfoGotten_SDB::~CatInfoGotten_SDB((CatInfoGotten_SDB *)v116);
    }
    else if (dword_1EF19FC90 >= 5)
    {
      v53 = *__error();
      v57 = _SILogForLogForCategory(1);
      if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        goto LABEL_95;
      *(_WORD *)v116 = 0;
      v55 = v57;
      v56 = "File without dbo";
LABEL_94:
      _os_log_impl(&dword_1B8270000, v55, OS_LOG_TYPE_DEFAULT, v56, v116, 2u);
LABEL_95:
      *__error() = v53;
      v4 = v91;
    }
  }
  free(ptra);
  if (*((_QWORD *)a2 + 186))
  {
    _MDPlistBytesEndArray();
    _MDPlistBytesEndPlist();
  }
  if (*((_QWORD *)a2 + 58))
  {
    _MDStoreOIDArrayEndBulkAdd();
    _MDStoreOIDArrayEndSequence();
    *((_QWORD *)a2 + 443) = 0;
  }
  db_obj_iter_release((uint64_t)v45);
  if ((*((_BYTE *)this + 41) & 0x40) != 0)
    free(v96);
  return *((_QWORD *)this + 50) < *((_QWORD *)this + 49);
}

BOOL SISearchCtx_ItemScope::preIterate(SISearchCtx_ItemScope *this, SISearchCtx *a2)
{
  uint64_t v3;
  int v5;
  NSObject *v6;
  uint8_t v7[16];

  if (dword_1EF19FC90 >= 5)
  {
    v5 = *__error();
    v6 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "Entering", v7, 2u);
    }
    *__error() = v5;
  }
  SISearchCtx::common_preIterate((CFAbsoluteTime *)this, a2);
  v3 = *((_QWORD *)this + 11);
  if (v3)
    RLEOIDArrayGetAllOids(*((_QWORD *)this + 11), (_QWORD *)this + 48, (_QWORD *)this + 49);
  return v3 != 0;
}

uint64_t SISearchCtx_ItemScope::vinitContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, const __CFArray *a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;

  SISearchCtx::initContext(a1, a2, a3, a4, a5, a6, a7, a8, a10, a11, a12, a13);
  if (a9)
    CFRetain(a9);
  *(_QWORD *)(a1 + 376) = a9;
  if (a5)
  {
    v17 = compileToSDBTree(a5, (uint64_t (*)(void))factorRewrite);
    setupCannedFields(v17);
  }
  else
  {
    v17 = 0;
  }
  v18 = (uint64_t *)(a1 + 368);
  *(_QWORD *)(a1 + 368) = v17;
  v19 = (uint64_t *)compileToSDBTree((uint64_t)a4, (uint64_t (*)(void))factorRewrite);
  setupCannedFields((uint64_t)v19);
  *(_QWORD *)(a1 + 360) = v19;
  if ((queryApply(v19) & 1) != 0)
  {
    if ((*(_BYTE *)(a1 + 43) & 8) != 0)
      *(_QWORD *)(a1 + 64) = 0;
  }
  else
  {
    db_optimize_query_tree((_QWORD **)(a1 + 360));
    decorateExpandingFunctions(*(_QWORD **)(a1 + 360), *(_QWORD *)a2, *(const void **)(a2 + 656), *(double *)(a2 + 360));
    setupCannedFields(*(_QWORD *)(a1 + 360));
    *(_QWORD *)(a1 + 40) |= 0x4000000uLL;
    if (*(_QWORD *)(a1 + 368))
    {
      db_optimize_query_tree((_QWORD **)(a1 + 368));
      decorateExpandingFunctions((_QWORD *)*v18, *(_QWORD *)a2, *(const void **)(a2 + 656), *(double *)(a2 + 360));
      setupCannedFields(*v18);
      if ((*(_WORD *)(*v18 + 40) & 0x10) != 0)
        return 0;
    }
    *(_QWORD *)(a1 + 56) = 0;
    CFRelease(a11);
  }
  if (*v18)
    rewriteForFSPostCheckInPlace(a1 + 368);
  return 1;
}

uint64_t queryApply(uint64_t *a1)
{
  int v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  _BYTE *v8;
  const char *v9;

  while (1)
  {
    v2 = *((unsigned __int16 *)a1 + 20);
    if ((v2 - 1) >= 2)
      break;
    v3 = (uint64_t *)*a1;
    if (*a1)
    {
      result = queryApply(*a1);
      if (!(_DWORD)result)
        return result;
      v5 = a1[1];
      a1 = v3;
      if (v5)
        continue;
    }
    return 0;
  }
  if (v2 == 4)
  {
    v6 = a1[2];
    if (v6)
    {
      v7 = *(const char **)v6;
      if (strcmp(*(const char **)v6, "kMDItemFSInvisible"))
      {
        if (strcmp(v7, "kMDItemFSName"))
          return 1;
        v8 = *(_BYTE **)(v6 + 72);
        return !v8 || *v8 != 46 || *(_DWORD *)(v6 + 24) != 1 || (*(_BYTE *)(v6 + 32) & 0x40) != 0;
      }
      v9 = *(const char **)(v6 + 72);
      if (v9)
      {
        if (strcmp(*(const char **)(v6 + 72), "1"))
        {
          if (!strcmp(v9, "0"))
            return *(_DWORD *)(v6 + 24) != 5;
          if (strcmp(v9, "*"))
            return 1;
        }
        if (*(_DWORD *)(v6 + 24) == 1)
          return 0;
      }
    }
  }
  return 1;
}

uint64_t LazyGottenObject::_faultInGottenObj(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
  *(_QWORD *)a2 = result;
  return result;
}

void QueryFunctionCallbackContext_OO::~QueryFunctionCallbackContext_OO(QueryFunctionCallbackContext_OO *this)
{
  JUMPOUT(0x1BCCB06A4);
}

uint64_t QueryFunctionCallbackContext_OO::gotten(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

{
  return *(_QWORD *)(a1 + 40);
}

uint64_t QueryFunctionCallbackContext::findContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  const UInt8 *v8;
  size_t v9;
  _BOOL4 v10;
  const __CFString *v11;
  uint64_t v12;
  unsigned int v13;

  v6 = si_indexForDocId(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 32));
  if (v6)
  {
    v7 = v6;
    v8 = *(const UInt8 **)(a3 + 72);
    if (v8)
      v9 = strlen(*(const char **)(a3 + 72));
    else
      v9 = 0;
    v11 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8, v9, 0x8000100u, 0);
    v12 = *(_QWORD *)(a3 + 32);
    v13 = (v12 >> 4) & 1;
    if ((v12 & 0x800000) != 0)
      v13 = (v12 >> 4) & 1 | ((*(_BYTE *)(a3 + 28) & 0x7F) << 18) | 0x10000;
    v10 = ContentIndexContainsContentByDocId(v7, *(_QWORD *)(a2 + 32), v11, v13 | (v12 >> 4) & 2, 0, (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 6584) >> 19) & 3, *(_BYTE *)(a1 + 32)) != 0;
    if (v11)
      CFRelease(v11);
  }
  else
  {
    v10 = 0;
  }
  return v10 ^ ((*(_DWORD *)(a3 + 24) - 5) < 2);
}

void SISearchCtx::pushCompletions(SISearchCtx *this, PartialQueryResults *a2)
{
  SISearchCtx *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t i;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  void *v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(_QWORD);
  _DWORD *v79;
  int v80;
  NSObject *v81;
  unint64_t *v82;
  double v83;
  __n128 v84;
  char *v85;
  unint64_t v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  void (*v98)(_QWORD);
  void *v99;
  int v100;
  int v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v106;
  os_signpost_id_t v107;
  NSObject *log;
  _OWORD v109[5];
  unint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  void *__p;
  char *v116;
  char *v117;
  void *v118;
  char *v119;
  char *v120;
  _BYTE buf[32];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;

  v127 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 44))
  {
    v2 = this;
    if (_SIPerf_QueryLog(void)::onceToken != -1)
      dispatch_once(&_SIPerf_QueryLog(void)::onceToken, &__block_literal_global_52);
    v3 = _SIPerf_QueryLog(void)::sQueryLog;
    v4 = os_signpost_id_generate((os_log_t)_SIPerf_QueryLog(void)::sQueryLog);
    v106 = v4 - 1;
    if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v3, OS_SIGNPOST_INTERVAL_BEGIN, v4, "com_apple_spotlight_suggestions_latency", (const char *)&unk_1B865F3E6, buf, 2u);
    }
    v5 = *(unsigned __int16 *)(*((_QWORD *)v2 + 44) + 4);
    makeThreadId();
    v118 = 0;
    v119 = 0;
    v120 = 0;
    __p = 0;
    v116 = 0;
    v117 = 0;
    v104 = (uint64_t)v2;
    v107 = v4;
    log = v3;
    if (v5)
    {
      v6 = (uint64_t *)(*((_QWORD *)v2 + 44) + 24);
      v7 = v5;
      v8 = 0;
      do
      {
        v9 = *v6;
        v6 += 3;
        v10 = v8 + v9 - 1;
        v8 = v10;
        --v7;
      }
      while (v7);
      std::vector<oid_and_rankinfo_t>::reserve(&v118, v10);
      std::vector<long long>::reserve(&__p, v10);
      v11 = 0;
      v12 = *((_QWORD *)v2 + 44);
      v103 = v5;
      v13 = 0;
      v14 = 0;
      for (i = 0; i != v103; ++i)
      {
        if (*(_QWORD *)(v12 + 24 * i + 24) == 1)
        {
          v16 = v11;
          v17 = v13;
        }
        else
        {
          v18 = v11;
          v19 = v14;
          v20 = v12;
          do
          {
            pqpop_oid_and_rankinfo_t((uint64_t)buf, (_QWORD *)(v20 + 24 * i + 8));
            v21 = v119;
            v22 = v119;
            if (v119 >= v120)
            {
              v24 = (char *)v118;
              v25 = 0x6DB6DB6DB6DB6DB7 * ((v119 - (_BYTE *)v118) >> 4);
              v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) > 0x249249249249249)
                goto LABEL_99;
              if (0xDB6DB6DB6DB6DB6ELL * ((v120 - (_BYTE *)v118) >> 4) > v26)
                v26 = 0xDB6DB6DB6DB6DB6ELL * ((v120 - (_BYTE *)v118) >> 4);
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v120 - (_BYTE *)v118) >> 4)) >= 0x124924924924924)
                v27 = 0x249249249249249;
              else
                v27 = v26;
              if (v27)
              {
                v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<oid_and_rankinfo_t>>(v27);
                v30 = v29;
              }
              else
              {
                v30 = 0;
                v28 = 0;
              }
              v31 = &v28[112 * v25];
              v32 = v31;
              *((_OWORD *)v31 + 3) = v123;
              *((_OWORD *)v31 + 4) = v124;
              *((_OWORD *)v31 + 5) = v125;
              *((_OWORD *)v31 + 6) = v126;
              *(_OWORD *)v31 = *(_OWORD *)buf;
              *((_OWORD *)v31 + 1) = *(_OWORD *)&buf[16];
              *((_OWORD *)v31 + 2) = v122;
              if (v21 != v24)
              {
                v33 = &v28[112 * v25];
                do
                {
                  v34 = *((_OWORD *)v22 - 7);
                  v35 = *((_OWORD *)v22 - 5);
                  *((_OWORD *)v33 - 6) = *((_OWORD *)v22 - 6);
                  *((_OWORD *)v33 - 5) = v35;
                  *((_OWORD *)v33 - 7) = v34;
                  v36 = *((_OWORD *)v22 - 4);
                  v37 = *((_OWORD *)v22 - 3);
                  v38 = *((_OWORD *)v22 - 1);
                  *((_OWORD *)v33 - 2) = *((_OWORD *)v22 - 2);
                  *((_OWORD *)v33 - 1) = v38;
                  *((_OWORD *)v33 - 4) = v36;
                  *((_OWORD *)v33 - 3) = v37;
                  v22 -= 112;
                  v32 = v33 - 112;
                  v33 -= 112;
                }
                while (v22 != v24);
              }
              v23 = v31 + 112;
              v118 = v32;
              v120 = &v28[112 * v30];
              if (v24)
                operator delete(v24);
            }
            else
            {
              *((_OWORD *)v119 + 3) = v123;
              *((_OWORD *)v22 + 4) = v124;
              *((_OWORD *)v22 + 5) = v125;
              *((_OWORD *)v22 + 6) = v126;
              *(_OWORD *)v22 = *(_OWORD *)buf;
              *((_OWORD *)v22 + 1) = *(_OWORD *)&buf[16];
              *((_OWORD *)v22 + 2) = v122;
              v23 = v21 + 112;
            }
            v119 = v23;
            v39 = *((_QWORD *)v23 - 14);
            v40 = v116;
            v41 = v116;
            if (v116 >= v117)
            {
              v43 = (char *)__p;
              v44 = (v116 - (_BYTE *)__p) >> 3;
              v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 61)
                goto LABEL_99;
              v46 = v117 - (_BYTE *)__p;
              if ((v117 - (_BYTE *)__p) >> 2 > v45)
                v45 = v46 >> 2;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8)
                v47 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v47 = v45;
              if (v47)
              {
                v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v47);
                v50 = v49;
              }
              else
              {
                v50 = 0;
                v48 = 0;
              }
              v51 = &v48[8 * v44];
              *(_QWORD *)v51 = v39;
              v52 = v51 + 8;
              if (v40 == v43)
              {
                v2 = (SISearchCtx *)v104;
              }
              else
              {
                v53 = &v48[8 * v44];
                v2 = (SISearchCtx *)v104;
                do
                {
                  *((_QWORD *)v53 - 1) = *((_QWORD *)v41 - 1);
                  v53 -= 8;
                  v41 -= 8;
                  v51 = v53;
                }
                while (v41 != v43);
              }
              v42 = v52;
              __p = v51;
              v117 = &v48[8 * v50];
              if (v43)
                operator delete(v43);
            }
            else
            {
              *(_QWORD *)v116 = v39;
              v42 = v41 + 8;
            }
            v116 = v42;
            if ((unint64_t)v13 >= v19)
            {
              v54 = v13 - v18;
              if (v13 - v18 <= -3)
LABEL_99:
                abort();
              v55 = v54 >> 1;
              if (v19 - (unint64_t)v18 <= (v54 >> 1) + 1)
                v56 = v55 + 1;
              else
                v56 = v19 - (_QWORD)v18;
              if (v19 - (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFELL)
                v57 = 0x7FFFFFFFFFFFFFFFLL;
              else
                v57 = v56;
              if (v57)
              {
                v58 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v57);
                v60 = v59;
              }
              else
              {
                v60 = 0;
                v58 = 0;
              }
              v61 = &v58[2 * v55];
              *(_WORD *)v61 = i;
              v62 = v61 + 2;
              if (v13 == v18)
              {
                v63 = &v58[2 * v55];
              }
              else
              {
                do
                {
                  *((_WORD *)v61 - 1) = *((_WORD *)v13 - 1);
                  v61 -= 2;
                  v13 -= 2;
                  v63 = v61;
                }
                while (v13 != v18);
              }
              v64 = &v58[2 * v60];
              v13 = v62;
              if (v18)
                operator delete(v18);
              v18 = v63;
              v19 = (unint64_t)v64;
            }
            else
            {
              *(_WORD *)v13 = i;
              v13 += 2;
            }
            v12 = *((_QWORD *)v2 + 44);
            v16 = v18;
            v17 = v13;
            v14 = v19;
            v20 = v12;
          }
          while (*(_QWORD *)(v12 + 24 * i + 24) != 1);
        }
        v13 = v17;
        v11 = v16;
        v65 = v16;
      }
    }
    else
    {
      v65 = 0;
      std::vector<oid_and_rankinfo_t>::reserve(&v118, 0);
      std::vector<long long>::reserve(&__p, 0);
    }
    v66 = __p;
    v67 = v116 - (_BYTE *)__p;
    if (v116 != __p)
    {
      v102 = __p;
      do
      {
        v68 = __ldxr(exceptionSequenceNum);
        v69 = v68 + 1;
      }
      while (__stxr(v68 + 1, exceptionSequenceNum));
      v70 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, *(_QWORD *)(*((_QWORD *)v2 + 3) + 1184), 0x40000000, v69);
      v72 = v71;
      v73 = v70;
      v75 = v74;
      v76 = *(_QWORD *)&threadData[18 * v70 + 2];
      v77 = v76 + 320 * HIDWORD(v70);
      *(_BYTE *)(v77 + 216) = 0;
      v100 = *(_DWORD *)(v77 + 312);
      v78 = *(void (**)(_QWORD))(v77 + 224);
      if (v78)
        v78(*(_QWORD *)(v76 + 320 * HIDWORD(v70) + 288));
      v113 = HIDWORD(v73);
      v114 = v73;
      v111 = v72;
      v112 = v75;
      if (_setjmp((int *)v77))
      {
        v79 = (_DWORD *)(v77 + 312);
        v80 = *__error();
        v81 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "pushCompletions";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 359;
          _os_log_error_impl(&dword_1B8270000, v81, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
        }
        *__error() = v80;
        *v79 = v100;
        CIOnThreadCleanUpReset(v111);
        dropThreadId(v114, 1, v69);
        CICleanUpReset(v114, v112);
      }
      else
      {
        v101 = v69;
        os_unfair_lock_lock((os_unfair_lock_t)&globalCompletionsMutex);
        v82 = db_obj_iter_create_with_filter(*(int **)(*((_QWORD *)v2 + 3) + 1184), v67 >> 3, (uint64_t)v102, 0, 0, 0, 0, 0, 0);
        v85 = (char *)v118;
        v86 = 0x6DB6DB6DB6DB6DB7 * ((v119 - (_BYTE *)v118) >> 4);
        v87 = MEMORY[0x1E0C81028];
        v88 = 134217984;
        while (1)
        {
          v110 = 0;
          v89 = (uint64_t *)db_obj_iter_next((uint64_t)v82, &v110, 0, *(double *)&v88, v83, v84);
          if (!v89)
            break;
          v90 = v110;
          if (v110 >= v86)
          {
            if (os_log_type_enabled(v87, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v90;
              _os_log_fault_impl(&dword_1B8270000, v87, OS_LOG_TYPE_FAULT, "db_obj_iter returned an unreasonable index %ld", buf, 0xCu);
            }
          }
          else
          {
            v91 = *(_QWORD *)(v104 + 24);
            v92 = &v85[112 * v110];
            v93 = *((_OWORD *)v92 + 4);
            v109[2] = *((_OWORD *)v92 + 3);
            v109[3] = v93;
            v109[4] = *((_OWORD *)v92 + 5);
            v94 = *((_OWORD *)v92 + 2);
            v109[0] = *((_OWORD *)v92 + 1);
            v109[1] = v94;
            collectCompletionsFromDBO(v104, v91, v89, v109, v92[96], (uint64_t)a2, 0, *(const char ***)(v104 + 152));
          }
        }
        db_obj_iter_release((uint64_t)v82);
        v95 = *(_QWORD *)&threadData[18 * v114 + 2];
        v96 = v113;
        v97 = v95 + 320 * v113;
        *(_DWORD *)(v97 + 312) = v100;
        v98 = *(void (**)(_QWORD))(v97 + 232);
        if (v98)
          v98(*(_QWORD *)(v95 + 320 * v96 + 288));
        dropThreadId(v114, 0, v101);
        os_unfair_lock_unlock((os_unfair_lock_t)&globalCompletionsMutex);
      }
      v66 = v102;
      if (v106 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1B8270000, log, OS_SIGNPOST_INTERVAL_END, v107, "com_apple_spotlight_suggestions_latency", " enableTelemetry=YES ", buf, 2u);
      }
    }
    v99 = v66;
    if (v65)
    {
      operator delete(v65);
      v99 = __p;
    }
    if (v99)
      operator delete(v99);
    if (v118)
      operator delete(v118);
  }
}

void SISearchCtx::pushCompletionsWithLanguage(SISearchCtx *this, PartialQueryResults *a2)
{
  SISearchCtx *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  char *v33;
  void *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  uint64_t *v68;
  unint64_t v69;
  _DWORD *v70;
  char *v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  _DWORD *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(_QWORD);
  int v100;
  NSObject *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  double v108;
  double v109;
  __n128 v110;
  int64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  char *v115;
  unsigned int *i;
  unsigned int *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  unint64_t *v131;
  __n128 v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  uint64_t *v137;
  unint64_t v138;
  int v139;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  char *v145;
  __int128 v146;
  __int128 v147;
  NSObject *v148;
  unint64_t v149;
  int v150;
  int *v151;
  int v152;
  NSObject *v153;
  unint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  void (*v158)(_QWORD);
  int v159;
  int v160;
  int v161;
  int v162;
  char *v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  PartialQueryResults *v168;
  unint64_t v169;
  os_signpost_id_t spid;
  NSObject *log;
  _OWORD v172[5];
  unint64_t v173;
  _QWORD block[7];
  void *__p;
  char *v176;
  char *v177;
  uint64_t v178;
  int **v179;
  uint64_t *v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  int *v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  __n128 (*v193)(_QWORD *, uint64_t);
  void (*v194)(uint64_t);
  void *v195;
  void *v196;
  uint64_t v197;
  void *v198;
  char *v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  void *v204;
  _OWORD *v205;
  char *v206;
  uint8_t v207[4];
  unint64_t v208;
  __int16 v209;
  int v210;
  const char *v211[2];
  _BYTE buf[32];
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  uint64_t v218;

  v218 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 44))
    return;
  v3 = this;
  if (_SIPerf_QueryLog(void)::onceToken != -1)
    dispatch_once(&_SIPerf_QueryLog(void)::onceToken, &__block_literal_global_52);
  v4 = _SIPerf_QueryLog(void)::sQueryLog;
  v5 = os_signpost_id_generate((os_log_t)_SIPerf_QueryLog(void)::sQueryLog);
  v169 = v5 - 1;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1B8270000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v5, "com_apple_spotlight_suggestions_latency_with_language", (const char *)&unk_1B865F3E6, buf, 2u);
  }
  log = v4;
  v6 = *(unsigned __int16 *)(*((_QWORD *)v3 + 44) + 4);
  makeThreadId();
  v190 = 0;
  v191 = &v190;
  v193 = __Block_byref_object_copy__11445;
  v194 = __Block_byref_object_dispose__11446;
  v205 = 0;
  v204 = 0;
  v206 = 0;
  v202 = 0;
  v200 = 0;
  v201 = 0;
  v203 = 0;
  v198 = 0;
  v199 = 0;
  v192 = 0x4002000000;
  v196 = 0;
  v197 = 0;
  v195 = 0;
  v187 = 0;
  v188 = 0;
  v189 = 0;
  v186 = 0;
  v185 = &v186;
  v167 = (uint64_t)v3;
  v168 = a2;
  spid = v5;
  if (v6)
  {
    v7 = (uint64_t *)(*((_QWORD *)v3 + 44) + 24);
    v8 = v6;
    v9 = 0;
    do
    {
      v10 = *v7;
      v7 += 3;
      v11 = v9 + v10 - 1;
      v9 = v11;
      --v8;
    }
    while (v8);
    std::vector<oid_and_rankinfo_t>::reserve(&v204, v11);
    std::vector<long long>::reserve((void **)&v201, v11);
    std::vector<int>::reserve((std::vector<int> *)(v191 + 5), v11);
    std::vector<unsigned short>::reserve(&v198, v11);
    v12 = 0;
    v13 = *((_QWORD *)v3 + 44);
    v164 = v6;
    do
    {
      if (*(_QWORD *)(v13 + 24 * v12 + 24) != 1)
      {
        v14 = v13;
        do
        {
          pqpop_oid_and_rankinfo_t((uint64_t)buf, (_QWORD *)(v14 + 24 * v12 + 8));
          v15 = v205;
          v16 = v205;
          if (v205 >= (_OWORD *)v206)
          {
            v18 = v204;
            v19 = 0x6DB6DB6DB6DB6DB7 * (((char *)v205 - (_BYTE *)v204) >> 4);
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) > 0x249249249249249)
              goto LABEL_175;
            if (0xDB6DB6DB6DB6DB6ELL * ((v206 - (_BYTE *)v204) >> 4) > v20)
              v20 = 0xDB6DB6DB6DB6DB6ELL * ((v206 - (_BYTE *)v204) >> 4);
            if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v206 - (_BYTE *)v204) >> 4)) >= 0x124924924924924)
              v21 = 0x249249249249249;
            else
              v21 = v20;
            if (v21)
            {
              v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<oid_and_rankinfo_t>>(v21);
              v24 = v23;
            }
            else
            {
              v24 = 0;
              v22 = 0;
            }
            v25 = &v22[112 * v19];
            v26 = v25;
            *((_OWORD *)v25 + 3) = v214;
            *((_OWORD *)v25 + 4) = v215;
            *((_OWORD *)v25 + 5) = v216;
            *((_OWORD *)v25 + 6) = v217;
            *(_OWORD *)v25 = *(_OWORD *)buf;
            *((_OWORD *)v25 + 1) = *(_OWORD *)&buf[16];
            *((_OWORD *)v25 + 2) = v213;
            if (v15 != v18)
            {
              v27 = &v22[112 * v19];
              do
              {
                v28 = *(v16 - 7);
                v29 = *(v16 - 5);
                *((_OWORD *)v27 - 6) = *(v16 - 6);
                *((_OWORD *)v27 - 5) = v29;
                *((_OWORD *)v27 - 7) = v28;
                v30 = *(v16 - 4);
                v31 = *(v16 - 3);
                v32 = *(v16 - 1);
                *((_OWORD *)v27 - 2) = *(v16 - 2);
                *((_OWORD *)v27 - 1) = v32;
                *((_OWORD *)v27 - 4) = v30;
                *((_OWORD *)v27 - 3) = v31;
                v16 -= 7;
                v26 = v27 - 112;
                v27 -= 112;
              }
              while (v16 != v18);
            }
            v33 = v26;
            v34 = v18;
            v17 = v25 + 112;
            v204 = v33;
            v206 = &v22[112 * v24];
            if (v34)
              operator delete(v34);
          }
          else
          {
            v205[3] = v214;
            v16[4] = v215;
            v16[5] = v216;
            v16[6] = v217;
            *v16 = *(_OWORD *)buf;
            v16[1] = *(_OWORD *)&buf[16];
            v16[2] = v213;
            v17 = v15 + 7;
          }
          v205 = v17;
          v35 = *((_QWORD *)v17 - 14);
          v36 = v202;
          v37 = v202;
          if (v202 >= v203)
          {
            v39 = v201;
            v40 = (v202 - v201) >> 3;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 61)
              goto LABEL_175;
            v42 = v203 - v201;
            if ((v203 - v201) >> 2 > v41)
              v41 = v42 >> 2;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
              v43 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v43 = v41;
            if (v43)
            {
              v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v43);
              v46 = v45;
            }
            else
            {
              v46 = 0;
              v44 = 0;
            }
            v47 = &v44[8 * v40];
            *(_QWORD *)v47 = v35;
            v48 = v47 + 8;
            if (v36 == v39)
            {
              v3 = (SISearchCtx *)v167;
            }
            else
            {
              v49 = &v44[8 * v40];
              v3 = (SISearchCtx *)v167;
              do
              {
                *((_QWORD *)v49 - 1) = *((_QWORD *)v37 - 1);
                v49 -= 8;
                v37 -= 8;
                v47 = v49;
              }
              while (v37 != v39);
            }
            v50 = v47;
            v51 = v39;
            v38 = v48;
            v201 = v50;
            v203 = &v44[8 * v46];
            if (v51)
              operator delete(v51);
          }
          else
          {
            *(_QWORD *)v202 = v35;
            v38 = v37 + 8;
          }
          v202 = v38;
          v52 = v199;
          v53 = v199;
          if (v199 >= v200)
          {
            v55 = (char *)v198;
            v56 = v199 - (_BYTE *)v198;
            if (v199 - (_BYTE *)v198 <= -3)
              goto LABEL_175;
            v57 = v56 >> 1;
            if (v200 - (_BYTE *)v198 <= (unint64_t)((v56 >> 1) + 1))
              v58 = v57 + 1;
            else
              v58 = v200 - (_BYTE *)v198;
            if ((unint64_t)(v200 - (_BYTE *)v198) >= 0x7FFFFFFFFFFFFFFELL)
              v59 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v59 = v58;
            if (v59)
            {
              v60 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v59);
              v62 = v61;
            }
            else
            {
              v62 = 0;
              v60 = 0;
            }
            v63 = &v60[2 * v57];
            *(_WORD *)v63 = v12;
            v64 = v63 + 2;
            if (v52 == v55)
            {
              v3 = (SISearchCtx *)v167;
            }
            else
            {
              v65 = &v60[2 * v57];
              v3 = (SISearchCtx *)v167;
              do
              {
                *((_WORD *)v65 - 1) = *((_WORD *)v53 - 1);
                v65 -= 2;
                v53 -= 2;
                v63 = v65;
              }
              while (v53 != v55);
            }
            v66 = v63;
            v67 = v55;
            v54 = v64;
            v198 = v66;
            v200 = &v60[2 * v62];
            if (v67)
              operator delete(v67);
          }
          else
          {
            *(_WORD *)v199 = v12;
            v54 = v53 + 2;
          }
          v199 = v54;
          v68 = v191;
          v70 = (_DWORD *)v191[6];
          v69 = v191[7];
          v71 = (char *)v70;
          if ((unint64_t)v70 >= v69)
          {
            v73 = v191[5];
            v74 = ((uint64_t)v70 - v73) >> 2;
            v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 62)
              goto LABEL_175;
            v76 = v69 - v73;
            if (v76 >> 1 > v75)
              v75 = v76 >> 1;
            if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
              v77 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v77 = v75;
            if (v77)
            {
              v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(v77);
              v79 = (char *)v68[5];
              v80 = (char *)v68[6];
              v82 = v81;
            }
            else
            {
              v79 = (char *)v191[5];
              v80 = v71;
              v82 = 0;
              v78 = 0;
            }
            v83 = v80;
            v84 = &v78[4 * v74];
            *(_DWORD *)v84 = -1;
            v85 = v84 + 4;
            if (v83 != v79)
            {
              v86 = &v78[4 * v74];
              do
              {
                *((_DWORD *)v86 - 1) = *((_DWORD *)v83 - 1);
                v86 -= 4;
                v83 -= 4;
                v84 = v86;
              }
              while (v83 != v79);
            }
            v72 = v85;
            v68[5] = (uint64_t)v84;
            v68[6] = (uint64_t)v85;
            v68[7] = (uint64_t)&v78[4 * v82];
            if (v79)
              operator delete(v79);
          }
          else
          {
            *v70 = -1;
            v72 = v70 + 1;
          }
          v68[6] = (uint64_t)v72;
          v13 = *((_QWORD *)v3 + 44);
          v14 = v13;
        }
        while (*(_QWORD *)(v13 + 24 * v12 + 24) != 1);
      }
      ++v12;
    }
    while (v12 != v164);
  }
  else
  {
    std::vector<oid_and_rankinfo_t>::reserve(&v204, 0);
    std::vector<long long>::reserve((void **)&v201, 0);
    std::vector<int>::reserve((std::vector<int> *)(v191 + 5), 0);
    std::vector<unsigned short>::reserve(&v198, 0);
  }
  v87 = v201;
  v88 = v202 - v201;
  if (v202 == v201)
    goto LABEL_163;
  do
  {
    v89 = __ldxr(exceptionSequenceNum);
    v90 = v89 + 1;
  }
  while (__stxr(v89 + 1, exceptionSequenceNum));
  v91 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, *(_QWORD *)(*((_QWORD *)v3 + 3) + 1184), 0x40000000, v90);
  v93 = v92;
  v94 = v91;
  v96 = v95;
  v97 = *(_QWORD *)&threadData[18 * v91 + 2];
  v98 = v97 + 320 * HIDWORD(v91);
  *(_BYTE *)(v98 + 216) = 0;
  v165 = *(_DWORD *)(v98 + 312);
  v99 = *(void (**)(_QWORD))(v98 + 224);
  if (v99)
    v99(*(_QWORD *)(v97 + 320 * HIDWORD(v91) + 288));
  v166 = v90;
  v183 = HIDWORD(v94);
  v184 = v94;
  v182 = v96;
  v181 = v93;
  if (_setjmp((int *)v98))
  {
    v100 = *__error();
    v101 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "pushCompletionsWithLanguage";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 526;
      _os_log_error_impl(&dword_1B8270000, v101, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v100;
    *(_DWORD *)(v98 + 312) = v165;
    CIOnThreadCleanUpReset(v181);
    dropThreadId(v184, 1, v166);
    CICleanUpReset(v184, v182);
    goto LABEL_163;
  }
  v102 = v167;
  v103 = v88 >> 3;
  v104 = db_obj_iter_create_with_filter(*(int **)(*(_QWORD *)(v167 + 24) + 1184), v88 >> 3, (uint64_t)v87, 0, 0, 0, 0, 0, 0);
  memset(buf, 0, 24);
  v105 = *(_QWORD *)(v167 + 24);
  if ((unint64_t)v88 < 0xA1)
  {
    v106 = 1;
  }
  else if ((*(_BYTE *)(v105 + 6586) & 4) != 0)
  {
    v106 = 3;
  }
  else
  {
    v106 = 1;
  }
  v107 = (uint64_t)v168;
  PartialQueryResults::completionAttributeIdVector((uint64_t)v168, *(int **)(v105 + 1184));
  db_obj_iter_create_subiterators((uint64_t)v104, v106, buf, v108, v109, v110);
  block[0] = MEMORY[0x1E0C809B0];
  block[2] = ___ZN11SISearchCtx27pushCompletionsWithLanguageER19PartialQueryResults_block_invoke;
  block[3] = &unk_1E6E38068;
  block[1] = 1174405120;
  block[5] = v167;
  block[6] = buf;
  v176 = 0;
  v177 = 0;
  __p = 0;
  v163 = (char *)v204;
  v111 = (char *)v205 - (_BYTE *)v204;
  if (v205 != v204)
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v111 >> 4)) > 0x249249249249249)
      goto LABEL_175;
    __p = std::__allocate_at_least[abi:nn180100]<std::allocator<oid_and_rankinfo_t>>(0x6DB6DB6DB6DB6DB7 * (v111 >> 4));
    v177 = (char *)__p + 112 * v112;
    memmove(__p, v163, v111);
    v176 = (char *)__p + 16 * (v111 >> 4);
    v102 = v167;
    v107 = (uint64_t)v168;
  }
  block[4] = &v190;
  v178 = v107;
  v179 = &v185;
  v180 = &v187;
  v113 = 0;
  dispatch_apply(v106, 0, block);
  db_obj_iter_release((uint64_t)v104);
  SILanguageModelShrinkLanguageGuessers();
  if (v188 == v187)
  {
    v115 = 0;
    goto LABEL_106;
  }
  v114 = 0xAAAAAAAAAAAAAAABLL * ((v188 - v187) >> 3);
  if (v114 >> 62)
LABEL_175:
    abort();
  v113 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(0xAAAAAAAAAAAAAAABLL * ((v188 - v187) >> 3));
  bzero(v113, 4 * v114);
  v115 = &v113[4 * v114];
  v107 = (uint64_t)v168;
LABEL_106:
  v117 = (unsigned int *)v191[5];
  for (i = (unsigned int *)v191[6]; v117 != i; ++v117)
  {
    v118 = *v117;
    if ((v118 & 0x80000000) == 0)
      ++*(_DWORD *)&v113[4 * v118];
  }
  v119 = v115 - v113;
  if ((int)(v119 >> 2) < 1)
  {
    v130 = -1;
    v129 = -1;
    LODWORD(v128) = -1;
  }
  else
  {
    v120 = (v119 >> 2);
    v121 = 0xFFFFFFFFLL;
    v122 = 0;
    v123 = 0xFFFFFFFFLL;
    v124 = 0xFFFFFFFFLL;
    do
    {
      v125 = v121;
      if ((_DWORD)v124 == -1 || (v126 = v124, *(_DWORD *)&v113[4 * v122] > *(_DWORD *)&v113[4 * (int)v124]))
        v126 = v122;
      if ((_DWORD)v123 == -1 || *(_DWORD *)&v113[4 * (int)v126] > *(_DWORD *)&v113[4 * (int)v123])
      {
        v124 = v123;
        v123 = v126;
      }
      else
      {
        v124 = v126;
      }
      if ((_DWORD)v125 == -1 || *(_DWORD *)&v113[4 * (int)v123] > *(_DWORD *)&v113[4 * (int)v125])
      {
        v127 = v125;
      }
      else
      {
        v127 = v123;
        v123 = v125;
      }
      v128 = v123;
      v129 = v127;
      ++v122;
      v130 = v124;
      v123 = v127;
      v121 = v128;
    }
    while (v120 != v122);
  }
  v161 = v129;
  v162 = v128;
  v131 = db_obj_iter_create_with_filter(*(int **)(*(_QWORD *)(v102 + 24) + 1184), v103, (uint64_t)v87, 0, 0, 0, 0, 0, 0);
  os_unfair_lock_lock((os_unfair_lock_t)&globalCompletionsMutex);
  v133 = 0x6DB6DB6DB6DB6DB7 * (v111 >> 4);
  v134 = 134217984;
  v135 = 134218240;
  v136 = MEMORY[0x1E0C81028];
  while (1)
  {
    v173 = 0;
    v211[0] = 0;
    v211[1] = 0;
    v137 = (uint64_t *)db_obj_iter_next((uint64_t)v131, &v173, 0, *(double *)&v135, *(double *)&v134, v132);
    if (!v137)
      break;
    v138 = v173;
    if (v173 >= v133)
    {
      if (os_log_type_enabled(v136, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)v207 = 134217984;
        v208 = v138;
        _os_log_fault_impl(&dword_1B8270000, v136, OS_LOG_TYPE_FAULT, "db_obj_iter returned an unreasonable index %ld", v207, 0xCu);
      }
    }
    else
    {
      v139 = *(_DWORD *)(v191[5] + 4 * v173);
      if (v139 == -1)
      {
        v142 = *(_QWORD *)(v167 + 152);
        if (v142)
        {
LABEL_143:
          v143 = *(const char **)v142;
LABEL_144:
          v211[0] = v143;
          v144 = *(_QWORD *)(v167 + 24);
          v145 = &v163[112 * v173];
          v146 = *((_OWORD *)v145 + 4);
          v172[2] = *((_OWORD *)v145 + 3);
          v172[3] = v146;
          v172[4] = *((_OWORD *)v145 + 5);
          v147 = *((_OWORD *)v145 + 2);
          v172[0] = *((_OWORD *)v145 + 1);
          v172[1] = v147;
          collectCompletionsFromDBO(v167, v144, v137, v172, v145[96], v107, v211, *(const char ***)(v167 + 152));
        }
        else if (dword_1EF19FC90 >= 5)
        {
          v159 = *__error();
          v153 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
          {
            v154 = *(_QWORD *)&v87[8 * v138];
            *(_DWORD *)v207 = 134217984;
            v208 = v154;
            _os_log_impl(&dword_1B8270000, v153, OS_LOG_TYPE_DEFAULT, "completions: language is -1 and _languages is null for oid %ld; skipping",
              v207,
              0xCu);
          }
          v151 = __error();
          v152 = v159;
LABEL_153:
          *v151 = v152;
          v107 = (uint64_t)v168;
        }
      }
      else
      {
        if (v139 == v162 || v139 == v161 || v139 == v130)
        {
          v142 = v187 + 24 * v139;
          v143 = (const char *)v142;
          if ((*(char *)(v142 + 23) & 0x80000000) == 0)
            goto LABEL_144;
          goto LABEL_143;
        }
        if (dword_1EF19FC90 >= 5)
        {
          v160 = *__error();
          v148 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
          {
            v149 = *(_QWORD *)&v87[8 * v138];
            v150 = *(_DWORD *)(v191[5] + 4 * v138);
            *(_DWORD *)v207 = 134218240;
            v208 = v149;
            v209 = 1024;
            v210 = v150;
            _os_log_impl(&dword_1B8270000, v148, OS_LOG_TYPE_DEFAULT, "completions: ignoring oid %ld with bad language %d", v207, 0x12u);
          }
          v151 = __error();
          v152 = v160;
          goto LABEL_153;
        }
      }
    }
  }
  v155 = *(_QWORD *)&threadData[18 * v184 + 2];
  v156 = v183;
  v157 = v155 + 320 * v183;
  *(_DWORD *)(v157 + 312) = v165;
  v158 = *(void (**)(_QWORD))(v157 + 232);
  if (v158)
    v158(*(_QWORD *)(v155 + 320 * v156 + 288));
  dropThreadId(v184, 0, v166);
  if (v113)
    operator delete(v113);
  if (__p)
    operator delete(__p);
  if (v131)
    db_obj_iter_release((uint64_t)v131);
  os_unfair_lock_unlock((os_unfair_lock_t)&globalCompletionsMutex);
LABEL_163:
  if (v169 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1B8270000, log, OS_SIGNPOST_INTERVAL_END, spid, "com_apple_spotlight_suggestions_latency_with_language", " enableTelemetry=YES ", buf, 2u);
  }
  *(_QWORD *)buf = &v187;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
  _Block_object_dispose(&v190, 8);
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  if (v198)
    operator delete(v198);
  if (v87)
    operator delete(v87);
  if (v204)
    operator delete(v204);
}

void lowWaterRoutine(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  int priority;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11[16];

  if (dword_1EF19FC90 >= 5)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "Low water routine triggered", v11, 2u);
    }
    *__error() = v6;
    if ((_DWORD)a2)
      goto LABEL_3;
  }
  else if ((_DWORD)a2)
  {
LABEL_3:
    si_querypipe_remove_process(*(_QWORD *)(*(_QWORD *)a1 + 104), *(_QWORD *)(*(_QWORD *)a1 + 8), 0, 1);
    v4 = (_QWORD *)a1;
    v5 = a2;
    goto LABEL_4;
  }
  *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)(a1 + 16) = "lowWaterRoutine";
  if (si_querypipe_copy_jobid(*(_QWORD *)(*(_QWORD *)a1 + 104)))
  {
    priority = query_priority(*(_QWORD **)(*(_QWORD *)a1 + 8));
    v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8 * (priority + 13) + 1008);
      if (v10)
      {
        si_enqueue_work_with_qos(v10, 8 * priority + 9, (uint64_t)resumeQuery, a1);
        return;
      }
    }
    si_querypipe_remove_process(*(_QWORD *)(*(_QWORD *)a1 + 104), *(_QWORD *)(*(_QWORD *)a1 + 8), 0, 0);
    v4 = (_QWORD *)a1;
    v5 = 0;
  }
  else
  {
    v4 = (_QWORD *)a1;
    v5 = 1;
  }
LABEL_4:
  search_ctx_destroy(v4, v5);
}

void resumeQuery(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  NSObject *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (dword_1EF19FC90 >= 5)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "resumeQuery triggered", (uint8_t *)&v14, 2u);
    }
    *__error() = v6;
    if ((_DWORD)a2)
      goto LABEL_3;
  }
  else if ((_DWORD)a2)
  {
LABEL_3:
    si_querypipe_remove_process(*(_QWORD *)(*a1 + 104), *(_QWORD *)(*a1 + 8), 0, 1);
    v4 = a1;
    v5 = a2;
LABEL_4:
    search_ctx_destroy(v4, v5);
    return;
  }
  *((CFAbsoluteTime *)a1 + 1) = CFAbsoluteTimeGetCurrent();
  a1[2] = "resumeQuery";
  v8 = si_querypipe_copy_jobid(*(_QWORD *)(*a1 + 104));
  if (!v8)
  {
    v4 = a1;
    v5 = 1;
    goto LABEL_4;
  }
  v9 = (uint64_t)v8;
  v10 = *(_QWORD *)(*a1 + 24);
  v11 = *(NSObject **)(v10 + 8 * query_priority(*(_QWORD **)(*a1 + 8)) + 832);
  if (*(NSObject **)(*(_QWORD *)(*a1 + 104) + 16) == v11)
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = 136315394;
      v15 = "resumeQuery";
      v16 = 1024;
      v17 = 160;
      _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: resumeQuery attempted to wait on already held semaphore", (uint8_t *)&v14, 0x12u);
    }
    *__error() = v12;
  }
  else
  {
    dispatch_semaphore_wait(v11, 0xFFFFFFFFFFFFFFFFLL);
    si_querypipe_set_semaphore(*(_QWORD *)(*a1 + 104), v11);
  }
  (*(void (**)(_QWORD, void (*)(double *, uint64_t), _QWORD *, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, executeSearchCtx2, a1, v9);
  si_release_qid(v9);
}

__n128 __Block_byref_object_copy__11445(_QWORD *a1, uint64_t a2)
{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__11446(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void std::vector<oid_and_rankinfo_t>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (0x6DB6DB6DB6DB6DB7 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x24924924924924ALL)
      abort();
    v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 112;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<oid_and_rankinfo_t>>(a2);
    v5 = &v4[112 * v3];
    v7 = &v4[112 * v6];
    v9 = (char *)*a1;
    v8 = (char *)a1[1];
    v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        v11 = *((_OWORD *)v8 - 7);
        v12 = *((_OWORD *)v8 - 5);
        *((_OWORD *)v10 - 6) = *((_OWORD *)v8 - 6);
        *((_OWORD *)v10 - 5) = v12;
        *((_OWORD *)v10 - 7) = v11;
        v13 = *((_OWORD *)v8 - 4);
        v14 = *((_OWORD *)v8 - 3);
        v15 = *((_OWORD *)v8 - 1);
        *((_OWORD *)v10 - 2) = *((_OWORD *)v8 - 2);
        *((_OWORD *)v10 - 1) = v15;
        *((_OWORD *)v10 - 4) = v13;
        *((_OWORD *)v10 - 3) = v14;
        v10 -= 112;
        v8 -= 112;
      }
      while (v8 != v9);
      v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  int64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  int *v7;
  std::vector<int>::pointer begin;
  int *end;
  int *v10;
  int v11;

  if (__n > this->__end_cap_.__value_ - this->__begin_)
  {
    if (__n >> 62)
      abort();
    v3 = (char *)this->__end_ - (char *)this->__begin_;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<int>>(__n);
    v5 = (int *)&v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    v7 = (int *)&v4[4 * v6];
    begin = this->__begin_;
    end = this->__end_;
    v10 = v5;
    if (end != this->__begin_)
    {
      v10 = v5;
      do
      {
        v11 = *--end;
        *--v10 = v11;
      }
      while (end != begin);
    }
    this->__begin_ = v10;
    this->__end_ = v5;
    this->__end_cap_.__value_ = v7;
    if (begin)
      operator delete(begin);
  }
}

void std::vector<unsigned short>::reserve(void **a1, unint64_t a2)
{
  int64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  __int16 v11;

  if (a2 > ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      abort();
    v3 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v4 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(a2);
    v5 = &v4[v3 & 0xFFFFFFFFFFFFFFFELL];
    v7 = &v4[2 * v6];
    v8 = (char *)*a1;
    v9 = (char *)a1[1];
    v10 = v5;
    if (v9 != *a1)
    {
      v10 = v5;
      do
      {
        v11 = *((_WORD *)v9 - 1);
        v9 -= 2;
        *((_WORD *)v10 - 1) = v11;
        v10 -= 2;
      }
      while (v9 != v8);
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
      operator delete(v8);
  }
}

uint64_t pqpop_oid_and_rankinfo_t(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  float v11;
  int v12;
  float v13;
  int v14;
  char v15;
  char v16;
  uint64_t v17;
  __int16 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  float v32;
  int v33;
  float v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  unsigned int v40;
  float v41;
  int v42;
  float v43;
  int v44;
  uint64_t v45;
  __int128 *v47;
  int *v48;
  uint64_t *v49;
  __int128 *v50;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  int v66;
  char v67;
  __int128 v68;
  __int128 v69;
  char v70;
  __int128 v71;
  __int128 v72;
  int v73;
  char v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int16 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int16 v83;
  __int128 v84;
  uint64_t v85;
  __int16 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v2 = a2[2];
  if (v2 != 1)
  {
    v3 = *a2;
    v4 = *(_OWORD *)(*a2 + 192);
    *(_OWORD *)(result + 64) = *(_OWORD *)(*a2 + 176);
    *(_OWORD *)(result + 80) = v4;
    *(_OWORD *)(result + 96) = *(_OWORD *)(v3 + 208);
    v5 = *(_OWORD *)(v3 + 128);
    *(_OWORD *)result = *(_OWORD *)(v3 + 112);
    *(_OWORD *)(result + 16) = v5;
    v6 = *(_OWORD *)(v3 + 160);
    *(_OWORD *)(result + 32) = *(_OWORD *)(v3 + 144);
    *(_OWORD *)(result + 48) = v6;
    v7 = v3 + 112 * v2;
    v8 = *(_QWORD *)(v7 - 96);
    v9 = *(_QWORD *)(v7 - 88);
    v71 = *(_OWORD *)(v7 - 80);
    v72 = *(_OWORD *)(v7 - 64);
    v10 = *(_DWORD *)(v7 - 48);
    v11 = *(float *)(v7 - 44);
    v12 = *(_DWORD *)(v7 - 40);
    v13 = *(float *)(v7 - 36);
    v14 = *(_DWORD *)(v7 - 32);
    v15 = *(_BYTE *)(v7 - 28);
    v16 = *(_BYTE *)(v7 - 27);
    v17 = *(_QWORD *)(v7 - 26);
    v18 = *(_WORD *)(v7 - 18);
    v19 = *(_OWORD *)(v7 - 16);
    v80 = *(_OWORD *)(v7 - 112);
    v81 = v19;
    *(_OWORD *)(v3 + 112) = *(_OWORD *)(v7 - 112);
    *(_OWORD *)(v3 + 144) = v71;
    *(_OWORD *)(v3 + 160) = v72;
    v20 = v81;
    *(_OWORD *)(v3 + 208) = v81;
    v70 = v15;
    v83 = v18;
    v82 = v17;
    *(_QWORD *)(v3 + 128) = v8;
    *(_QWORD *)(v3 + 136) = v9;
    *(_DWORD *)(v3 + 176) = v10;
    *(float *)(v3 + 180) = v11;
    *(_DWORD *)(v3 + 184) = v12;
    *(float *)(v3 + 188) = v13;
    *(_BYTE *)(v3 + 196) = v15;
    *(_DWORD *)(v3 + 192) = v14;
    *(_BYTE *)(v3 + 197) = v16;
    *(_WORD *)(v3 + 206) = v18;
    v21 = v17;
    *(_QWORD *)(v3 + 198) = v17;
    v22 = a2[1];
    v23 = a2[2];
    a2[2] = v23 - 1;
    v78 = v21;
    v79 = v18;
    v24 = v22 >> 1;
    v25 = 3;
    v77 = v20;
    v26 = 2;
    result = 1;
    v88 = v80;
    while (1)
    {
      v27 = *a2;
      v28 = (__int128 *)(*a2 + 112 * v26);
      v29 = *((_QWORD *)v28 + 2);
      v30 = *((_QWORD *)v28 + 3);
      v31 = *((_DWORD *)v28 + 16);
      v32 = *((float *)v28 + 17);
      v33 = *((_DWORD *)v28 + 18);
      v34 = *((float *)v28 + 19);
      v35 = *((unsigned __int8 *)v28 + 85);
      v36 = *a2 + 112 * v25;
      v87 = *(_OWORD *)v36;
      v37 = *(_QWORD *)(v36 + 16);
      v38 = *(_QWORD *)(v36 + 24);
      v39 = *(_OWORD *)(v36 + 48);
      v75 = *(_OWORD *)(v36 + 32);
      v76 = v39;
      v40 = *(_DWORD *)(v36 + 64);
      v41 = *(float *)(v36 + 68);
      v42 = *(_DWORD *)(v36 + 72);
      v43 = *(float *)(v36 + 76);
      v73 = *(_DWORD *)(v36 + 80);
      v74 = *(_BYTE *)(v36 + 84);
      v44 = *(unsigned __int8 *)(v36 + 85);
      v45 = *(_QWORD *)(v36 + 86);
      v86 = *(_WORD *)(v36 + 94);
      v85 = v45;
      v84 = *(_OWORD *)(v36 + 96);
      if (v25 >= v23)
      {
        v87 = MAX_OIDINFO;
        v75 = xmmword_1B8631990;
        v76 = unk_1B86319A0;
        v73 = 0;
        v74 = 0;
        v85 = 0;
        v86 = 0;
        v84 = 0uLL;
        if (v26 >= v23)
          return result;
        v40 = 0;
        v42 = 0;
        v44 = 0;
        v37 = -1;
        v41 = 0.0;
        v43 = 3.4028e38;
        v38 = -1;
        if (!v35)
        {
LABEL_12:
          if (__PAIR128__(v30, v29) < __PAIR128__(v9, v8))
            goto LABEL_21;
          if (v30 != v9 || v29 != v8)
          {
LABEL_44:
            if (!v44)
            {
              if (__PAIR128__(v38, v37) >= __PAIR128__(v9, v8))
              {
                v63 = v38 == v9 && v37 == v8;
                if (!v63 || v41 >= v11 && (v41 != v11 || v40 <= v10))
                {
LABEL_61:
                  _X8 = v27 + 224 * result;
                  __asm { PRFM            #1, [X8] }
                  return result;
                }
                LOBYTE(v35) = 0;
                v50 = &v84;
                v49 = &v85;
                v48 = &v73;
                v47 = &v75;
                v28 = &v87;
                v34 = v43;
                v33 = v42;
                v32 = v41;
                v31 = v40;
                v29 = v8;
                v30 = v9;
                goto LABEL_31;
              }
              goto LABEL_29;
            }
            if (v43 >= v13 && (v43 != v13 || v41 >= v11 && (v41 != v11 || v40 <= v10)))
              goto LABEL_61;
            goto LABEL_27;
          }
          goto LABEL_18;
        }
      }
      else if (!v35)
      {
        goto LABEL_12;
      }
      if (v34 < v13)
        goto LABEL_21;
      if (v34 != v13)
        goto LABEL_44;
LABEL_18:
      if (v32 >= v11 && (v32 != v11 || v31 <= v10))
        goto LABEL_44;
LABEL_21:
      v47 = v28 + 2;
      v48 = (int *)(v28 + 5);
      v49 = (uint64_t *)((char *)v28 + 86);
      v50 = v28 + 6;
      if (!v44)
      {
        if (__PAIR128__(v38, v37) >= __PAIR128__(v30, v29))
        {
          v62 = v38 == v30 && v37 == v29;
          if (!v62 || v41 >= v32 && (v41 != v32 || v40 <= v31))
            goto LABEL_32;
          LOBYTE(v35) = 0;
          v50 = &v84;
          v49 = &v85;
          v48 = &v73;
          v47 = &v75;
          v28 = &v87;
          v34 = v43;
          v33 = v42;
          v32 = v41;
          v31 = v40;
          goto LABEL_31;
        }
LABEL_29:
        LOBYTE(v35) = 0;
        v50 = &v84;
        v49 = &v85;
        v48 = &v73;
        v47 = &v75;
        v28 = &v87;
        goto LABEL_30;
      }
      if (v43 >= v34 && (v43 != v34 || v41 >= v32 && (v41 != v32 || v40 <= v31)))
        goto LABEL_32;
LABEL_27:
      v50 = &v84;
      v49 = &v85;
      v48 = &v73;
      v47 = &v75;
      v28 = &v87;
      LOBYTE(v35) = v44;
LABEL_30:
      v34 = v43;
      v33 = v42;
      v32 = v41;
      v31 = v40;
      v29 = v37;
      v30 = v38;
LABEL_31:
      v26 = v25;
LABEL_32:
      v80 = *v28;
      v68 = *v47;
      v69 = v47[1];
      v66 = *v48;
      v67 = *((_BYTE *)v48 + 4);
      v78 = *v49;
      v79 = *((_WORD *)v49 + 4);
      v77 = *v50;
      _X3 = v27 + 224 * v26;
      __asm { PRFM            #1, [X3] }
      if (v26 != result)
      {
        v56 = v88;
        v57 = v27 + 112 * v26;
        *(_OWORD *)v57 = v88;
        *(_QWORD *)(v57 + 16) = v8;
        *(_QWORD *)(v57 + 24) = v9;
        *(_OWORD *)(v57 + 32) = v71;
        *(_OWORD *)(v57 + 48) = v72;
        *(_DWORD *)(v57 + 64) = v10;
        *(float *)(v57 + 68) = v11;
        *(_DWORD *)(v57 + 72) = v12;
        *(float *)(v57 + 76) = v13;
        *(_DWORD *)(v57 + 80) = v14;
        *(_BYTE *)(v57 + 84) = v70;
        *(_BYTE *)(v57 + 85) = v16;
        *(_WORD *)(v57 + 94) = v83;
        v58 = v82;
        *(_QWORD *)(v57 + 86) = v82;
        *(_OWORD *)(v57 + 96) = v81;
        v59 = *a2 + 112 * result;
        v60 = v81;
        *(_OWORD *)v59 = v80;
        *(_OWORD *)(v59 + 32) = v68;
        *(_OWORD *)(v59 + 48) = v69;
        *(float *)(v59 + 68) = v32;
        *(float *)(v59 + 76) = v34;
        *(_OWORD *)(v59 + 96) = v77;
        v80 = v56;
        result = v26;
        v25 = (2 * v26) | 1;
        *(_QWORD *)(v59 + 16) = v29;
        *(_QWORD *)(v59 + 24) = v30;
        *(_DWORD *)(v59 + 64) = v31;
        *(_DWORD *)(v59 + 72) = v33;
        *(_BYTE *)(v59 + 84) = v67;
        *(_DWORD *)(v59 + 80) = v66;
        *(_BYTE *)(v59 + 85) = v35;
        *(_WORD *)(v59 + 94) = v79;
        *(_QWORD *)(v59 + 86) = v78;
        v79 = v83;
        v78 = v58;
        v77 = v60;
        v61 = v26 < v24;
        v26 *= 2;
        if (v61)
          continue;
      }
      return result;
    }
  }
  *(_OWORD *)(result + 64) = xmmword_1B8631940;
  *(_OWORD *)(result + 80) = unk_1B8631950;
  *(_OWORD *)(result + 96) = xmmword_1B8631960;
  *(_OWORD *)result = ZERO_OIDINFO;
  *(_OWORD *)(result + 16) = *(_OWORD *)algn_1B8631910;
  *(_OWORD *)(result + 32) = xmmword_1B8631920;
  *(_OWORD *)(result + 48) = unk_1B8631930;
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<oid_and_rankinfo_t>>(unint64_t a1)
{
  if (a1 >= 0x24924924924924ALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(112 * a1);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(2 * a1);
}

uint64_t ___ZN11SISearchCtx27pushCompletionsWithLanguageER19PartialQueryResults_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD);
  __n128 v15;
  double v16;
  __n128 v17;
  _DWORD *v18;
  int v19;
  NSObject *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  int **v34;
  uint64_t v35;
  int *v36;
  const char *string_for_id_locked;
  int v38;
  const __CFString *v39;
  const __CFString *v40;
  int Length;
  const __CFString *v42;
  const __CFString *v43;
  CFIndex v44;
  const __CFString *LanguageGuessUsingMontreal;
  const __CFString *v46;
  char **v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  const char *v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  char *v64;
  char *v65;
  __int128 v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  int v75;
  int v76;
  uint64_t v77;
  unint64_t *v78;
  int v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  void (*v85)(_QWORD);
  unint64_t v86;
  uint64_t v87;
  int v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  void *__p[2];
  uint64_t v97;
  char *__s;
  UInt8 buffer[16];
  __int128 v100;
  __int128 v101;
  __int128 v102;
  UniChar v103[16];
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  _BYTE v113[26];
  uint64_t v114;
  CFRange v115;
  CFRange v116;
  CFRange v117;

  v114 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40);
  makeThreadId();
  do
  {
    v4 = __ldxr(exceptionSequenceNum);
    v5 = v4 + 1;
  }
  while (__stxr(v4 + 1, exceptionSequenceNum));
  v87 = v3;
  v6 = setThreadIdAndInfo(*(_DWORD *)(*(_QWORD *)(v3 + 24) + 32), sFdExceptionCallbacks, 0, 1, v5);
  v8 = v7;
  v9 = v6;
  v11 = v10;
  v12 = *(_QWORD *)&threadData[18 * v6 + 2];
  v13 = v12 + 320 * HIDWORD(v6);
  *(_BYTE *)(v13 + 216) = 0;
  v89 = *(_DWORD *)(v13 + 312);
  v14 = *(void (**)(_QWORD))(v13 + 224);
  if (v14)
    v14(*(_QWORD *)(v12 + 320 * HIDWORD(v6) + 288));
  v94 = HIDWORD(v9);
  v95 = v9;
  v92 = v8;
  v93 = v11;
  if (_setjmp((int *)v13))
  {
    v18 = (_DWORD *)(v13 + 312);
    v19 = *__error();
    v20 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v103 = 136315394;
      *(_QWORD *)&v103[2] = "pushCompletionsWithLanguage_block_invoke";
      v103[6] = 1024;
      *(_DWORD *)&v103[7] = 475;
      _os_log_error_impl(&dword_1B8270000, v20, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", (uint8_t *)v103, 0x12u);
    }
    *__error() = v19;
    *v18 = v89;
    CIOnThreadCleanUpReset(v92);
    dropThreadId(v95, 1, v5);
    return CICleanUpReset(v95, v93);
  }
  v15.n128_u64[0] = 134217984;
  v22 = v87;
  v23 = a2;
  v90 = v5;
LABEL_10:
  while (2)
  {
    v24 = *(_QWORD *)(v22 + 104);
    v25 = *(unsigned __int8 *)(v24 + 96);
    v26 = v24;
    if (*(_BYTE *)(v24 + 96))
    {
      v78 = *(unint64_t **)(*(_QWORD *)(a1 + 48) + 8 * v23);
      goto LABEL_76;
    }
    do
    {
      v27 = v26;
      v26 = *(_QWORD *)(v26 + 80);
    }
    while (v26);
    if (*(_BYTE *)(*(_QWORD *)(v27 + 8) + 12))
      goto LABEL_68;
    v91 = 0;
    v28 = db_obj_subiter_next(*(unsigned int **)(*(_QWORD *)(a1 + 48) + 8 * v23), &v91, v15.n128_f64[0], v16, v17);
    if (v28)
    {
      v29 = v91;
      if (v91 >= 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 4))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)v103 = 134217984;
          *(_QWORD *)&v103[2] = v29;
          _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "db_obj_iter returned an unreasonable index %ld", (uint8_t *)v103, 0xCu);
        }
        continue;
      }
      v30 = (uint64_t)v28;
      v86 = v91;
      v101 = 0u;
      v102 = 0u;
      *(_OWORD *)buffer = 0u;
      v100 = 0u;
      v31 = *(int **)(*(_QWORD *)(v22 + 24) + 1184);
      v32 = PartialQueryResults::completionAttributeIdVector(*(_QWORD *)(a1 + 80), v31);
      v33 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 360);
      buffer[0] = 0;
      if ((int)v33 < 1)
        goto LABEL_66;
      v34 = (int **)v32;
      v35 = v33;
      while (1)
      {
        v36 = *v34;
        __p[0] = 0;
        __s = 0;
        if (!db_get_field_by_id(v31, v30, v36, (unint64_t *)__p, (unint64_t *)&__s)
          && *(_WORD *)__p[0] == 11)
        {
          if ((*((_WORD *)__p[0] + 1) & 0x10) != 0)
          {
            string_for_id_locked = (const char *)db_get_string_for_id_locked(v31, *(_DWORD *)__s);
            if (!string_for_id_locked)
              goto LABEL_34;
          }
          else
          {
            string_for_id_locked = __s;
            if (!__s)
              goto LABEL_34;
          }
          v38 = strlen(string_for_id_locked);
          v39 = CFStringCreateWithBytes(0, (const UInt8 *)string_for_id_locked, v38, 0x8000100u, 0);
          if (v39)
          {
            v40 = v39;
            Length = CFStringGetLength(v39);
            v42 = (const __CFString *)NLStringTokenizerCopyBestStringLanguage();
            if (v42)
            {
              v43 = v42;
              v44 = CFStringGetLength(v42);
              if (v44)
              {
                v115.length = v44;
                v115.location = 0;
                buffer[(int)CFStringGetBytes(v43, v115, 0x8000100u, 0x3Fu, 0, buffer, 32, 0)] = 0;
                v5 = v90;
              }
              CFRelease(v43);
            }
            if ((Length - 15) <= 0x54 && (!buffer[0] || (SIIsLanguagePreferred() & 1) == 0))
            {
              v112 = 0u;
              memset(v113, 0, sizeof(v113));
              v110 = 0u;
              v111 = 0u;
              v108 = 0u;
              v109 = 0u;
              v106 = 0u;
              v107 = 0u;
              v104 = 0u;
              v105 = 0u;
              memset(v103, 0, sizeof(v103));
              v116.location = 0;
              v116.length = Length;
              CFStringGetCharacters(v40, v116, v103);
              LanguageGuessUsingMontreal = (const __CFString *)SILanguageModelGetLanguageGuessUsingMontreal();
              if (LanguageGuessUsingMontreal)
              {
                v46 = LanguageGuessUsingMontreal;
                v117.length = CFStringGetLength(LanguageGuessUsingMontreal);
                v117.location = 0;
                buffer[(int)CFStringGetBytes(v46, v117, 0x8000100u, 0x3Fu, 0, buffer, 32, 0)] = 0;
                CFRelease(v46);
              }
            }
            CFRelease(v40);
            v23 = a2;
          }
        }
LABEL_34:
        if (!--v35)
        {
          if (!buffer[0])
            goto LABEL_66;
LABEL_40:
          os_unfair_lock_lock(**(os_unfair_lock_t **)(a1 + 88));
          v47 = *(char ***)(a1 + 96);
          if ((int)(-1431655765 * ((v47[1] - *v47) >> 3)) < 1)
          {
LABEL_46:
            std::string::basic_string[abi:nn180100]<0>(__p, (char *)buffer);
            v52 = (unint64_t)v47[2];
            v53 = (unint64_t)v47[1];
            if (v53 >= v52)
            {
              v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - (_QWORD)*v47) >> 3);
              v57 = v56 + 1;
              v55 = v86;
              if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
                abort();
              v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - (_QWORD)*v47) >> 3);
              if (2 * v58 > v57)
                v57 = 2 * v58;
              if (v58 >= 0x555555555555555)
                v59 = 0xAAAAAAAAAAAAAAALL;
              else
                v59 = v57;
              *(_QWORD *)&v104 = v47 + 2;
              if (v59)
              {
                v60 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v59);
                v62 = v61;
              }
              else
              {
                v62 = 0;
                v60 = 0;
              }
              v64 = &v60[24 * v56];
              v65 = v64;
              v66 = *(_OWORD *)__p;
              *((_QWORD *)v64 + 2) = v97;
              *(_OWORD *)v64 = v66;
              __p[1] = 0;
              v97 = 0;
              __p[0] = 0;
              v67 = *v47;
              v68 = v47[1];
              if (v68 == *v47)
              {
                v71 = v47[1];
                v69 = &v60[24 * v56];
              }
              else
              {
                do
                {
                  v69 = v65 - 24;
                  v70 = *(_OWORD *)(v68 - 24);
                  *((_QWORD *)v65 - 1) = *((_QWORD *)v68 - 1);
                  *(_OWORD *)(v65 - 24) = v70;
                  *((_QWORD *)v68 - 2) = 0;
                  *((_QWORD *)v68 - 1) = 0;
                  *((_QWORD *)v68 - 3) = 0;
                  v68 -= 24;
                  v65 -= 24;
                }
                while (v68 != v67);
                v68 = *v47;
                v71 = v47[1];
              }
              v72 = v64 + 24;
              v73 = &v60[24 * v62];
              *v47 = v69;
              *(_QWORD *)v103 = v68;
              *(_QWORD *)&v103[4] = v68;
              v47[1] = v64 + 24;
              *(_QWORD *)&v103[8] = v71;
              v74 = v47[2];
              v47[2] = v73;
              *(_QWORD *)&v103[12] = v74;
              std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)v103);
              v75 = SHIBYTE(v97);
              v47[1] = v72;
              if (v75 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v54 = *(_OWORD *)__p;
              *(_QWORD *)(v53 + 16) = v97;
              *(_OWORD *)v53 = v54;
              v47[1] = (char *)(v53 + 24);
              v55 = v86;
            }
            v63 = -1 - 1431655765 * ((*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) - **(_QWORD **)(a1 + 96)) >> 3);
          }
          else
          {
            v48 = -1431655765 * ((v47[1] - *v47) >> 3);
            v49 = *v47;
            v50 = 0;
            while (1)
            {
              v51 = v49;
              if (v49[23] < 0)
                v51 = *(const char **)v49;
              if (!strcmp((const char *)buffer, v51))
                break;
              ++v50;
              v49 += 24;
              if (v48 == v50)
                goto LABEL_46;
            }
            v63 = v50;
            v55 = v86;
          }
          v76 = v63;
          os_unfair_lock_unlock(**(os_unfair_lock_t **)(a1 + 88));
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 4 * v55) = v76;
LABEL_66:
          v22 = v87;
          goto LABEL_10;
        }
        ++v34;
        if (buffer[0])
          goto LABEL_40;
      }
    }
    break;
  }
  v25 = *(unsigned __int8 *)(*(_QWORD *)(v22 + 104) + 96);
  v24 = *(_QWORD *)(v22 + 104);
LABEL_68:
  v77 = v24;
  v78 = *(unint64_t **)(*(_QWORD *)(a1 + 48) + 8 * v23);
  if (v25)
  {
LABEL_76:
    v81 = 0;
    v79 = v89;
    goto LABEL_72;
  }
  v79 = v89;
  do
  {
    v80 = v77;
    v77 = *(_QWORD *)(v77 + 80);
  }
  while (v77);
  v81 = *(_BYTE *)(*(_QWORD *)(v80 + 8) + 12) == 0;
LABEL_72:
  db_obj_subiter_release(v78, v81, v15);
  v82 = *(_QWORD *)&threadData[18 * v95 + 2];
  v83 = v94;
  v84 = v82 + 320 * v94;
  *(_DWORD *)(v84 + 312) = v79;
  v85 = *(void (**)(_QWORD))(v84 + 232);
  if (v85)
    v85(*(_QWORD *)(v82 + 320 * v83 + 288));
  return dropThreadId(v95, 0, v5);
}

char *std::vector<oid_and_rankinfo_t>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924924924924ALL)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<oid_and_rankinfo_t>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

_QWORD *__copy_helper_block_8_56c60_ZTSNSt3__16vectorI18oid_and_rankinfo_tNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  result = (_QWORD *)(a1 + 56);
  result[2] = 0;
  v5 = *(_BYTE **)(a2 + 56);
  v4 = *(_BYTE **)(a2 + 64);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    std::vector<oid_and_rankinfo_t>::__vallocate[abi:nn180100](result, 0x6DB6DB6DB6DB6DB7 * (v6 >> 4));
    v7 = *(char **)(a1 + 64);
    result = memmove(v7, v5, v6);
    *(_QWORD *)(a1 + 64) = &v7[v6];
  }
  return result;
}

void __destroy_helper_block_8_56c60_ZTSNSt3__16vectorI18oid_and_rankinfo_tNS_9allocatorIS1_EEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
}

os_log_t ___ZL16_SIPerf_QueryLogv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.spotlight", "telemetry");
  _SIPerf_QueryLog(void)::sQueryLog = (uint64_t)result;
  return result;
}

void ___ZN11SISearchCtx20executeSearchContextEPS_b_block_invoke(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  if (!a3)
  {
    v3 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 1184);
      if (v4)
      {
        if ((*(_BYTE *)(v4 + 4) & 0x40) != 0)
          si_makeUnavailable(v3, 22, 2, 22, (uint64_t)"query");
      }
    }
  }
}

void ___ZN11SISearchCtx24populateSuggestionsModelEP18md_deadline_once_s_block_invoke_2(uint64_t a1, int a2)
{
  uint64_t v4;
  double Current;
  _QWORD *v6;
  double v7;
  NSObject *v8;
  const char *v9;
  double v10;
  int v11;
  double v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 32);
  Current = CFAbsoluteTimeGetCurrent();
  v6 = *(_QWORD **)(a1 + 40);
  if (a2)
  {
    SIPommesSuggestionsModelRelease(v6);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return;
    v7 = (Current - *(double *)(a1 + 48)) * 1000.0;
    v11 = 134217984;
    v12 = v7;
    v8 = MEMORY[0x1E0C81028];
    v9 = "releasing useless suggestions model after %f ms of init";
  }
  else
  {
    *(_QWORD *)(v4 + 280) = v6;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return;
    v10 = (Current - *(double *)(a1 + 48)) * 1000.0;
    v11 = 134217984;
    v12 = v10;
    v8 = MEMORY[0x1E0C81028];
    v9 = "populating suggestions model after %f ms of init";
  }
  _os_log_impl(&dword_1B8270000, v8, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v11, 0xCu);
}

void PartialQueryResults::setupCannedRequiredAttributeVector(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  size_t v7;
  void *v9;
  uint64_t v10;
  uint64_t i;
  const char *v12;
  const char **v13;
  const char *v14;

  v6 = *(_QWORD *)(a1 + 232);
  v7 = 8 * v6;
  if (((v6 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && v7 > *MEMORY[0x1E0C85AD8])
    ++sTotal;
  v9 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v7, 0x31F9A007uLL);
  if (!v9)
    _log_fault_for_malloc_failure();
  *a3 = v9;
  v10 = *(_QWORD *)(a1 + 232);
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      v12 = (const char *)strlen(*(const char **)(a2 + 8 * i));
      v13 = CannedFieldTable::in_word_set(*(CannedFieldTable **)(a2 + 8 * i), v12);
      if (v13)
        v14 = v13[4];
      else
        v14 = 0;
      *(_QWORD *)(*a3 + 8 * i) = v14;
    }
  }
}

void PartialQueryResults::setupFieldIdVector(uint64_t a1, uint64_t a2, size_t *a3, void **a4, int a5)
{
  const __CFBitVector *v10;
  CFIndex Count;
  size_t v12;
  CFIndex v13;
  const __CFBitVector *v14;
  BOOL v15;
  _DWORD *v16;
  _DWORD *v17;
  void *v19;
  size_t v20;
  uint64_t v21;
  CFIndex v22;
  const __CFBitVector *v23;
  BOOL v24;
  int *v25;
  int v26;
  _DWORD *v27;
  int *v28;
  int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v10 = *(const __CFBitVector **)(a1 + 248);
  if (v10)
    Count = CFBitVectorGetCount(v10);
  else
    Count = 0;
  if (*(uint64_t *)(a1 + 232) < 1)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (!a5
        || ((v14 = *(const __CFBitVector **)(a1 + 248)) != 0 ? (v15 = Count <= v13) : (v15 = 1),
            v15 || CFBitVectorGetBitAtIndex(v14, v13)))
      {
        v16 = *(_DWORD **)(a2 + 8 * v13);
        if (v16)
        {
          if (*v16)
          {
            v17 = v16 + 1;
            do
              ++v12;
            while (*v17++);
          }
        }
      }
      ++v13;
    }
    while (v13 < *(_QWORD *)(a1 + 232));
  }
  *a3 = v12;
  if (((v12 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && 8 * v12 > *MEMORY[0x1E0C85AD8])
    ++sTotal;
  v19 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 8uLL, v12, 0x31F9A007uLL);
  if (!v19)
    _log_fault_for_malloc_failure();
  *a4 = v19;
  if (*(uint64_t *)(a1 + 232) >= 1)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      if (!a5
        || ((v23 = *(const __CFBitVector **)(a1 + 248)) != 0 ? (v24 = Count <= v22) : (v24 = 1),
            v24 || CFBitVectorGetBitAtIndex(v23, v22)))
      {
        v25 = *(int **)(a2 + 8 * v22);
        if (v25)
        {
          if ((a5 & 1) == 0 && v21 != v22)
            goto LABEL_44;
          v26 = *v25;
          if (*v25)
          {
            v27 = (char *)*a4 + 8 * v20 + 4;
            v28 = v25 + 1;
            do
            {
              *(v27 - 1) = v26;
              *v27 = v22;
              ++v20;
              v29 = *v28++;
              v26 = v29;
              v27 += 2;
            }
            while (v29);
          }
        }
        ++v21;
      }
      if (++v22 >= *(_QWORD *)(a1 + 232))
        goto LABEL_42;
    }
  }
  v20 = 0;
LABEL_42:
  if (v20 != *a3)
  {
LABEL_44:
    v30 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v30, v31, v32, v33, v34, v35, v36, v37, (char)"SISearchCtx.cpp");
    free(v30);
    if (__valid_fs(-1))
      v38 = 2989;
    else
      v38 = 3072;
    *(_DWORD *)v38 = -559038737;
    abort();
  }
  qsort_b(*a4, v20, 8uLL, &__block_literal_global_20_11513);
}

uint64_t ___ZN19PartialQueryResults18setupFieldIdVectorEPPKjPmPP20db_field_lookup_pairb_block_invoke(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return (*a2 - *a3);
}

uint64_t _qpCannedFieldQuery(uint64_t a1, uint64_t a2, const char **a3, uint64_t a4, _QWORD *a5)
{
  char *v10;
  const char *v11;
  const char **v12;
  const char **v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = (char *)*a3;
  v11 = (const char *)strlen(*a3);
  v12 = CannedFieldTable::in_word_set((CannedFieldTable *)v10, v11);
  v13 = v12;
  if (*(_QWORD *)a2)
  {
    if (!v12)
      return 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
    if (!v13)
      return 0;
  }
  v14 = v13[2];
  if (v14)
  {
    v15 = *a3;
    v16 = a5[3];
    v17 = *(uint64_t **)a2;
    v18 = *v17;
    v19 = a5[1];
    v20 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*a5 + 32))(a5, v17);
    return ((uint64_t (*)(uint64_t, const char *, uint64_t, uint64_t, uint64_t *, uint64_t, const char **, uint64_t))v14)(v19, v15, v16, v18, v17, v20, a3, a4);
  }
  return 0;
}

void si_cancel_activectx(void *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&sActiveCtxLock);
  if (activeCtxs)
    CFSetApplyFunction((CFSetRef)activeCtxs, (CFSetApplierFunction)cancelCtxApplier, a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&sActiveCtxLock);
}

uint64_t cancelCtxApplier(uint64_t result, void *a2)
{
  if (*(void **)(result + 24) == a2)
    *(_QWORD *)(result + 24) = 0;
  return result;
}

_WORD *PhotosQueryTree(__CFString *a1, const __CFAttributedString *a2, const __CFDictionary *a3, CFDictionaryRef theDict, int a5, uint64_t a6)
{
  const __CFNumber *Value;
  int v10;
  NSObject *v11;
  _WORD *v12;
  const __CFDictionary *v13;
  const __CFNumber *v14;
  void *v15;
  const void *v16;
  _QWORD *v17;
  int v18;
  void *v19;
  void *v20;
  int v21;
  NSObject *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  int v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const __CFArray **QueryTokens;
  const __CFArray *v34;
  CFIndex Count;
  CFIndex v36;
  uint64_t RangeAtIndex;
  NSUInteger v38;
  NSUInteger v39;
  NSUInteger v40;
  uint64_t v41;
  NSUInteger v42;
  uint64_t v43;
  NSUInteger v44;
  uint64_t v45;
  NSUInteger v46;
  void *ValueAtIndex;
  int v48;
  NSObject *v49;
  int v50;
  NSObject *v51;
  NSObject *v52;
  int v53;
  NSObject *v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  NSUInteger v58;
  uint64_t v59;
  NSUInteger v60;
  _BOOL4 v61;
  NSObject *v62;
  int v63;
  NSObject *v64;
  const char *v65;
  char *v66;
  uint64_t v67;
  float v68;
  const char *QueryNode;
  int v70;
  NSObject *v71;
  int v72;
  NSObject *v73;
  const char *v74;
  const char *v75;
  _QWORD *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  int v85;
  NSObject *v86;
  const char *v87;
  const char *v88;
  _QWORD *v89;
  const char *v90;
  const char *v91;
  _QWORD *v92;
  const char *v93;
  _QWORD *v94;
  const __CFNumber *v95;
  const __CFNumber *v96;
  const __CFNumber *v97;
  void *v98;
  int v99;
  NSObject *v100;
  const void *v101;
  int v102;
  NSObject *v103;
  NSObject *v104;
  void *v105;
  void *v106;
  int v107;
  NSObject *v108;
  uint64_t v109;
  int v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const __CFArray **v116;
  const __CFArray **v117;
  const __CFArray *v118;
  CFIndex v119;
  CFIndex v120;
  uint64_t v121;
  NSUInteger v122;
  NSUInteger v123;
  NSUInteger v124;
  uint64_t v125;
  NSUInteger v126;
  __CFString *v127;
  CFCharacterSetRef v128;
  CFIndex Length;
  CFIndex v130;
  CFIndex v131;
  UniChar CharacterAtIndex;
  int IsCharacterMember;
  CFIndex v135;
  CFStringRef v136;
  CFStringRef v137;
  int v138;
  NSObject *v139;
  int v140;
  NSObject *v141;
  uint64_t v142;
  NSUInteger v143;
  NSObject *v144;
  int v145;
  NSObject *v146;
  uint64_t v147;
  char v148;
  _BOOL4 v149;
  uint64_t v150;
  NSUInteger v151;
  char *v152;
  uint64_t v153;
  _QWORD *v154;
  const char *v155;
  const char *v156;
  NSObject *v157;
  int v158;
  NSObject *v159;
  NSObject *v160;
  const char *v161;
  const char *v162;
  uint64_t v163;
  NSUInteger v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  NSUInteger v168;
  uint64_t v169;
  NSUInteger v170;
  const char *v171;
  _QWORD *v172;
  const char *v173;
  _QWORD *v174;
  uint64_t v175;
  int v176;
  NSObject *v177;
  NSObject *v178;
  int v179;
  NSObject *v180;
  _QWORD *v181;
  _QWORD *v182;
  int v183;
  NSObject *v184;
  int v185;
  NSObject *v186;
  int v187;
  NSObject *v188;
  char v189;
  uint64_t v190;
  const __CFData *v191;
  const __CFDictionary *v192;
  const __CFDictionary *v193;
  void *v194;
  float v195;
  void *v196;
  float v197;
  float v198;
  float v199;
  int v200;
  NSObject *v201;
  void *v202;
  void *v203;
  void *v204;
  float v205;
  float v206;
  float v207;
  float v208;
  int v209;
  int v210;
  NSObject *v211;
  const char *v212;
  NSObject *v213;
  uint32_t v214;
  NSObject *v215;
  NSObject *v216;
  uint64_t v217;
  void *v218;
  void *v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  BOOL v225;
  BOOL v226;
  uint64_t v227;
  _QWORD *v228;
  const char *v229;
  const char *v230;
  char *v231;
  char *v232;
  _QWORD *query_node_with_ann;
  _QWORD *v234;
  _QWORD *v235;
  NSObject *v236;
  _QWORD *v237;
  _QWORD *v238;
  int v239;
  NSObject *v240;
  int v241;
  NSObject *v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD *v245;
  int v246;
  NSObject *v247;
  uint64_t v248;
  _QWORD *v249;
  int v250;
  NSObject *v251;
  int v252;
  NSObject *v253;
  uint64_t v254;
  NSObject *v256;
  NSObject *v257;
  void *v258;
  float v259;
  float v260;
  int v261;
  NSObject *v262;
  float v263;
  float v264;
  void *v265;
  int v266;
  int v267;
  NSObject *v268;
  float v269;
  NSObject *v270;
  float v271;
  NSObject *v272;
  unint64_t v273;
  int v274;
  NSObject *v275;
  const char *v276;
  uint64_t v277;
  float *v278;
  unsigned int v279;
  int v280;
  void *v281;
  uint64_t v282;
  uint64_t v283;
  _WORD *v284;
  unint64_t v285;
  NSObject *v286;
  uint64_t v287;
  const char *v288;
  CFIndex v289;
  const __CFArray **v290;
  const __CFAllocator *alloc;
  const char *v292;
  const __CFArray *v293;
  int v294;
  _QWORD *matched;
  void *v296;
  void *v297;
  void *v298;
  const __CFArray *v299;
  _BOOL4 theArray;
  const __CFArray *theArraya;
  _BOOL4 v302;
  const __CFArray **v303;
  _BOOL4 v304;
  uint64_t v305;
  CFDictionaryRef theDictb;
  id obj;
  const __CFArray *obja;
  id objb;
  _QWORD *v312;
  CFIndex v313;
  uint64_t v314;
  NSCharacterSet *v315;
  NSCharacterSet *v316;
  const __CFArray *v317;
  void *v318;
  const __CFArray *v319;
  void *v320;
  uint64_t v321;
  void *v322;
  void *v323;
  void *v324;
  uint64_t v325;
  _QWORD *v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  void *__p[2];
  char v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  _QWORD v340[4];
  int v341;
  _BYTE valuePtr[56];
  id v343;
  void *v344;
  uint64_t v345;
  NSRange v346;
  NSRange v347;
  NSRange v348;
  NSRange v349;
  NSRange v350;
  NSRange v351;
  NSRange v352;
  NSRange v353;
  NSRange v354;
  NSRange v355;
  NSRange v356;
  NSRange v357;
  NSRange v358;
  NSRange v359;
  NSRange v360;
  NSRange v361;
  NSRange v362;
  CFRange v363;
  NSRange v364;
  NSRange v365;
  NSRange v366;
  NSRange v367;
  NSRange v368;

  v345 = *MEMORY[0x1E0C80C00];
  if (a5)
  {
    if (theDict)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("disableMetadataSearch"));
      valuePtr[0] = 0;
      if (Value)
      {
        CFNumberGetValue(Value, kCFNumberSInt8Type, valuePtr);
        if (valuePtr[0])
        {
          v10 = *__error();
          v11 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)valuePtr = 134217984;
            *(_QWORD *)&valuePtr[4] = a6;
            _os_log_impl(&dword_1B8270000, v11, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ranking nodes (Reason: metadata search is disabled)", valuePtr, 0xCu);
          }
          *__error() = v10;
          v12 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E0040D742DA1DuLL);
          v12[20] = 16;
          return v12;
        }
      }
    }
    v305 = mach_absolute_time();
    v15 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    *(_QWORD *)&v332 = 0;
    if (a2 && CFAttributedStringGetLength(a2) >= 1)
    {
      *(_QWORD *)valuePtr = 0;
      PhPopulateFiltersFromQuery(a2, (uint64_t)valuePtr, (uint64_t)&v332, (uint64_t)v15, objc_msgSend(MEMORY[0x1E0C99DE8], "array"), 1, a6);
      db_free_query_node(*(_QWORD **)valuePtr);
    }
    -[NSCharacterSet formUnionWithCharacterSet:](v315, "formUnionWithCharacterSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet"));
    if (!a3)
      goto LABEL_22;
    v16 = (const void *)getkQPQUOutputTokenInfoKey();
    if (CFDictionaryContainsKey(a3, v16) && CFDictionaryContainsKey(a3, CFSTR("attributedParse")))
    {
      v17 = PhRankingTreeFromU2Parse(a3, v15, v315, a6);
LABEL_344:
      v12 = v17;
LABEL_345:
      if ((_QWORD)v332)
      {
        if (v12)
        {
          *(_QWORD *)valuePtr = MEMORY[0x1E0C809B0];
          *(_QWORD *)&valuePtr[8] = 0x40000000;
          *(_QWORD *)&valuePtr[16] = __db_query_tree_apply_block_block_invoke;
          *(_QWORD *)&valuePtr[24] = &unk_1E6E377F8;
          *(_QWORD *)&valuePtr[32] = &__block_literal_global_143;
          db_query_tree_apply_block_with_meta((_QWORD *)v332, (uint64_t)valuePtr, 0);
LABEL_355:
          v252 = *__error();
          v253 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v253, OS_LOG_TYPE_DEFAULT))
          {
            v254 = mach_absolute_time();
            if (NanoSecondsSinceAbsoluteTime(unsigned long long)::onceToken != -1)
              dispatch_once(&NanoSecondsSinceAbsoluteTime(unsigned long long)::onceToken, &__block_literal_global_106_11578);
            *(_DWORD *)valuePtr = 134218240;
            *(_QWORD *)&valuePtr[4] = a6;
            *(_WORD *)&valuePtr[12] = 2048;
            *(double *)&valuePtr[14] = (double)((v254 - v305)
                                              * NanoSecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo
                                              / *(unsigned int *)algn_1EF1AD1C4)
                                     / 1000.0;
            _os_log_impl(&dword_1B8270000, v253, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Created ranking tree in %f micro seconds", valuePtr, 0x16u);
          }
          *__error() = v252;
          return v12;
        }
        v246 = *__error();
        v247 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v247, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)valuePtr = 134218240;
          *(_QWORD *)&valuePtr[4] = a6;
          *(_WORD *)&valuePtr[12] = 2048;
          *(_QWORD *)&valuePtr[14] = 0x4059066660000000;
          _os_log_impl(&dword_1B8270000, v247, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Assigning weight: %f to metadata filter as there are no free tokens in the query", valuePtr, 0x16u);
        }
        *__error() = v246;
        v340[0] = MEMORY[0x1E0C809B0];
        v340[1] = 3221225472;
        v340[2] = ___ZL17PhotosRankingTreePK10__CFStringPK20__CFAttributedStringPK14__CFDictionaryS7_y_block_invoke;
        v340[3] = &__block_descriptor_36_e84__v16__0__query_node___query_node___query_node___query_piece_____v_v__vSIb8b1b1b1Qf_8l;
        v341 = 1120416563;
        *(_QWORD *)valuePtr = MEMORY[0x1E0C809B0];
        *(_QWORD *)&valuePtr[8] = 0x40000000;
        *(_QWORD *)&valuePtr[16] = __db_query_tree_apply_block_block_invoke;
        *(_QWORD *)&valuePtr[24] = &unk_1E6E377F8;
        *(_QWORD *)&valuePtr[32] = v340;
        db_query_tree_apply_block_with_meta((_QWORD *)v332, (uint64_t)valuePtr, 0);
        v248 = v332;
        v249 = PhRankingBoostTree();
        v12 = makeAndNode(v248, (uint64_t)v249);
      }
      if (!v12)
      {
        v250 = *__error();
        v251 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v251, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)valuePtr = 134217984;
          *(_QWORD *)&valuePtr[4] = a6;
          _os_log_impl(&dword_1B8270000, v251, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Returning false tree (Reason: query tree is empty)", valuePtr, 0xCu);
        }
        *__error() = v250;
        v12 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E0040D742DA1DuLL);
        v12[20] = 16;
      }
      goto LABEL_355;
    }
    if (CFDictionaryContainsKey(a3, CFSTR("attributedParses"))
      && (v19 = (void *)CFDictionaryGetValue(a3, CFSTR("attributedParses")), objc_msgSend(v19, "count")))
    {
      v20 = (void *)objc_msgSend(v19, "objectAtIndexedSubscript:", 0);
    }
    else
    {
LABEL_22:
      v20 = 0;
    }
    v21 = *__error();
    v22 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v22, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Processing rule-based query parse output to create ranking tree", valuePtr, 0xCu);
    }
    *__error() = v21;
    obj = (id)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v23 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v24 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v322 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v25 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v26 = objc_msgSend(v20, "length");
    *(_QWORD *)valuePtr = MEMORY[0x1E0C809B0];
    *(_QWORD *)&valuePtr[8] = 3221225472;
    *(_QWORD *)&valuePtr[16] = ___ZL28PhPopulateAllFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueES9_S9_S9__block_invoke;
    *(_QWORD *)&valuePtr[24] = &unk_1E6E382A0;
    *(_QWORD *)&valuePtr[32] = v24;
    *(_QWORD *)&valuePtr[40] = v322;
    *(_QWORD *)&valuePtr[48] = v25;
    v343 = obj;
    v344 = v23;
    objc_msgSend(v20, "enumerateAttributesInRange:options:usingBlock:", 0, v26, 0, valuePtr);
    if (objc_msgSend(v23, "count")
      || objc_msgSend(v24, "count")
      || objc_msgSend(v25, "count")
      || objc_msgSend(v322, "count"))
    {
      v27 = *__error();
      v28 = _SILogForLogForCategory(20);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        v29 = objc_msgSend(v23, "count");
        v30 = objc_msgSend(v24, "count");
        v31 = objc_msgSend(v25, "count");
        v32 = objc_msgSend(v322, "count");
        *(_DWORD *)valuePtr = 134219008;
        *(_QWORD *)&valuePtr[4] = a6;
        *(_WORD *)&valuePtr[12] = 2048;
        *(_QWORD *)&valuePtr[14] = v29;
        *(_WORD *)&valuePtr[22] = 2048;
        *(_QWORD *)&valuePtr[24] = v30;
        *(_WORD *)&valuePtr[32] = 2048;
        *(_QWORD *)&valuePtr[34] = v31;
        *(_WORD *)&valuePtr[42] = 2048;
        *(_QWORD *)&valuePtr[44] = v32;
        _os_log_impl(&dword_1B8270000, v28, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Populated filters: time = %lu, fav = %lu, person = %lu, mediatype = %lu", valuePtr, 0x34u);
      }
      *__error() = v27;
    }
    theDictb = (CFDictionaryRef)objc_msgSend(MEMORY[0x1E0C99E20], "set");
    QueryTokens = (const __CFArray **)CreateQueryTokens(a1, 1);
    if (QueryTokens)
    {
      v303 = QueryTokens;
      v34 = *QueryTokens;
      if (v34)
      {
        Count = CFArrayGetCount(v34);
        if (Count)
        {
          theArraya = *v303;
          v317 = v303[2];
          v319 = v303[1];
          *(_QWORD *)&v336 = 0;
          matched = PhExactMatchTree(a1, v15, (uint64_t)v315, Count, (const char **)&v336, a6);
          LODWORD(__p[0]) = 0;
          if (Count < 1)
          {
            v312 = 0;
LABEL_339:
            freeQueryTokensContext((CFTypeRef *)v303);
            v241 = *__error();
            v242 = _SILogForLogForCategory(20);
            if (os_log_type_enabled(v242, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)valuePtr = 134218240;
              *(_QWORD *)&valuePtr[4] = a6;
              *(_WORD *)&valuePtr[12] = 1024;
              *(_DWORD *)&valuePtr[14] = __p[0];
              _os_log_impl(&dword_1B8270000, v242, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Added %d nodes", valuePtr, 0x12u);
            }
            *__error() = v241;
            v243 = makeOrNode((uint64_t)matched, (uint64_t)v312);
            if (v243)
            {
              v244 = (uint64_t)v243;
              v245 = PhRankingBoostTree();
              v243 = makeAndNode(v244, (uint64_t)v245);
            }
            v17 = makeOrNode((uint64_t)v243, v336);
            goto LABEL_344;
          }
          v36 = 0;
          v312 = 0;
          while (1)
          {
            RangeAtIndex = getRangeAtIndex(v319, v317, v36);
            v39 = v38;
            if (RangeAtIndex == -1)
            {
              v50 = *__error();
              v51 = _SILogForLogForCategory(20);
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)valuePtr = 134218752;
                *(_QWORD *)&valuePtr[4] = a6;
                *(_WORD *)&valuePtr[12] = 2048;
                *(_QWORD *)&valuePtr[14] = v36;
                *(_WORD *)&valuePtr[22] = 2048;
                *(_QWORD *)&valuePtr[24] = -1;
                *(_WORD *)&valuePtr[32] = 2048;
                *(_QWORD *)&valuePtr[34] = v39;
                _os_log_impl(&dword_1B8270000, v51, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (ERROR: invalid range: (%ld, %ld))", valuePtr, 0x2Au);
              }
              *__error() = v50;
              goto LABEL_84;
            }
            v40 = RangeAtIndex;
            if (objc_msgSend(v15, "count"))
            {
              v41 = 0;
              while (1)
              {
                v357.location = objc_msgSend((id)objc_msgSend(v15, "objectAtIndexedSubscript:", v41), "rangeValue");
                v357.length = v42;
                v346.location = v40;
                v346.length = v39;
                if (NSIntersectionRange(v346, v357).length)
                  break;
                if (++v41 >= (unint64_t)objc_msgSend(v15, "count"))
                  goto LABEL_42;
              }
              v48 = *__error();
              v52 = _SILogForLogForCategory(20);
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)valuePtr = 134218240;
                *(_QWORD *)&valuePtr[4] = a6;
                *(_WORD *)&valuePtr[12] = 2048;
                *(_QWORD *)&valuePtr[14] = v36;
                _os_log_impl(&dword_1B8270000, v52, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (Reason: It is a suggestion token)", valuePtr, 0x16u);
              }
            }
            else
            {
LABEL_42:
              if (objc_msgSend(v23, "count"))
              {
                v43 = 0;
                while (1)
                {
                  v358.location = objc_msgSend((id)objc_msgSend(v23, "objectAtIndexedSubscript:", v43), "rangeValue");
                  v358.length = v44;
                  v347.location = v40;
                  v347.length = v39;
                  if (NSIntersectionRange(v347, v358).length)
                    break;
                  if (++v43 >= (unint64_t)objc_msgSend(v23, "count"))
                    goto LABEL_46;
                }
                v53 = *__error();
                v54 = _SILogForLogForCategory(20);
                if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)valuePtr = 134218496;
                  *(_QWORD *)&valuePtr[4] = a6;
                  *(_WORD *)&valuePtr[12] = 2048;
                  *(_QWORD *)&valuePtr[14] = v36;
                  *(_WORD *)&valuePtr[22] = 2048;
                  *(_QWORD *)&valuePtr[24] = v43;
                  _os_log_impl(&dword_1B8270000, v54, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu has a date parse (Date parse idx: %lu)", valuePtr, 0x20u);
                }
                *__error() = v53;
                if ((-[__CFDictionary containsObject:](theDictb, "containsObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v43)) & 1) == 0)
                {
                  -[__CFDictionary addObject:](theDictb, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v43));
                  v55 = PhRankingTreeFromStr((char *)objc_msgSend((id)objc_msgSend(obj, "objectAtIndexedSubscript:", v43), "UTF8String"), 0.13, (int *)__p);
                  v312 = makeAndNode((uint64_t)v312, (uint64_t)v55);
                }
                goto LABEL_84;
              }
LABEL_46:
              if (objc_msgSend(v24, "count"))
              {
                v45 = 0;
                while (1)
                {
                  v359.location = objc_msgSend((id)objc_msgSend(v24, "objectAtIndexedSubscript:", v45), "rangeValue");
                  v359.length = v46;
                  v348.location = v40;
                  v348.length = v39;
                  if (NSIntersectionRange(v348, v359).length)
                    break;
                  if (++v45 >= (unint64_t)objc_msgSend(v24, "count"))
                    goto LABEL_50;
                }
                v63 = *__error();
                v64 = _SILogForLogForCategory(20);
                if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)valuePtr = 134218496;
                  *(_QWORD *)&valuePtr[4] = a6;
                  *(_WORD *)&valuePtr[12] = 2048;
                  *(_QWORD *)&valuePtr[14] = v36;
                  *(_WORD *)&valuePtr[22] = 2048;
                  *(_QWORD *)&valuePtr[24] = v45;
                  _os_log_impl(&dword_1B8270000, v64, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu has a fav parse (Fav parse idx: %lu)", valuePtr, 0x20u);
                }
                *__error() = v63;
                v65 = "kMDItemPhotosFavorited";
                v66 = "1";
                v67 = 0;
                v68 = 0.18;
LABEL_82:
                QueryNode = createQueryNode(v65, v66, v67, 1, 0, v68, 0.0);
                v312 = makeAndNode((uint64_t)v312, (uint64_t)QueryNode);
                v70 = LODWORD(__p[0]) + 1;
LABEL_83:
                LODWORD(__p[0]) = v70;
                goto LABEL_84;
              }
LABEL_50:
              ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArraya, v36);
              if (_containsOnlyCharsInCharset((NSString *)ValueAtIndex, v315))
              {
                v48 = *__error();
                v49 = _SILogForLogForCategory(20);
                if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)valuePtr = 134218240;
                  *(_QWORD *)&valuePtr[4] = a6;
                  *(_WORD *)&valuePtr[12] = 2048;
                  *(_QWORD *)&valuePtr[14] = v36;
                  _os_log_impl(&dword_1B8270000, v49, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu is skipped (Reason: It has only trimmable chars)", valuePtr, 0x16u);
                }
              }
              else
              {
                v56 = (char *)objc_msgSend(ValueAtIndex, "UTF8String");
                if (v56)
                {
                  if (objc_msgSend(v25, "count"))
                  {
                    v57 = 0;
                    while (1)
                    {
                      v360.location = objc_msgSend((id)objc_msgSend(v25, "objectAtIndexedSubscript:", v57), "rangeValue");
                      v360.length = v58;
                      v349.location = v40;
                      v349.length = v39;
                      if (NSIntersectionRange(v349, v360).length)
                        break;
                      if (++v57 >= (unint64_t)objc_msgSend(v25, "count"))
                        goto LABEL_69;
                    }
                    v72 = *__error();
                    v73 = _SILogForLogForCategory(20);
                    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)valuePtr = 134218496;
                      *(_QWORD *)&valuePtr[4] = a6;
                      *(_WORD *)&valuePtr[12] = 2048;
                      *(_QWORD *)&valuePtr[14] = v36;
                      *(_WORD *)&valuePtr[22] = 2048;
                      *(_QWORD *)&valuePtr[24] = v57;
                      _os_log_impl(&dword_1B8270000, v73, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu has a person parse (Person parse idx: %lu)", valuePtr, 0x20u);
                    }
                    *__error() = v72;
                    v74 = createQueryNode("kMDItemPhotosPeopleNames", v56, 112, 1, 0, 0.17, 0.0);
                    v75 = createQueryNode("kMDItemPhotosPeopleNamesAlternatives", v56, 112, 1, 0, 0.17, 0.0);
                    v76 = makeOrNode((uint64_t)v74, (uint64_t)v75);
                    v312 = makeAndNode((uint64_t)v312, (uint64_t)v76);
                    v70 = LODWORD(__p[0]) + 2;
                    goto LABEL_83;
                  }
LABEL_69:
                  if (objc_msgSend(v322, "count"))
                  {
                    v59 = 0;
                    while (1)
                    {
                      v361.location = objc_msgSend((id)objc_msgSend(v322, "objectAtIndexedSubscript:", v59), "rangeValue");
                      v361.length = v60;
                      v350.location = v40;
                      v350.length = v39;
                      if (NSIntersectionRange(v350, v361).length)
                        break;
                      if (++v59 >= (unint64_t)objc_msgSend(v322, "count"))
                        goto LABEL_73;
                    }
                    v85 = *__error();
                    v86 = _SILogForLogForCategory(20);
                    if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)valuePtr = 134218496;
                      *(_QWORD *)&valuePtr[4] = a6;
                      *(_WORD *)&valuePtr[12] = 2048;
                      *(_QWORD *)&valuePtr[14] = v36;
                      *(_WORD *)&valuePtr[22] = 2048;
                      *(_QWORD *)&valuePtr[24] = v59;
                      _os_log_impl(&dword_1B8270000, v86, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu has a media parse (Media parse idx: %lu)", valuePtr, 0x20u);
                    }
                    *__error() = v85;
                    v65 = "kMDItemPhotosMediaTypes";
                    v66 = v56;
                    v67 = 112;
                    v68 = 0.1;
                    goto LABEL_82;
                  }
LABEL_73:
                  std::string::basic_string[abi:nn180100]<0>(valuePtr, v56);
                  v61 = isOptionalWord(valuePtr);
                  if ((valuePtr[23] & 0x80000000) != 0)
                    operator delete(*(void **)valuePtr);
                  if (!v61)
                  {
                    if (v36 == Count - 1)
                    {
                      v292 = createQueryNode("kMDItemPhotosPeopleNames", v56, 112, 1, -1, 0.17, 0.0);
                      v77 = createQueryNode("kMDItemPhotosPeopleNamesAlternatives", v56, 112, 1, -1, 0.17, 0.0);
                      v78 = createQueryNode("kMDItemPhotosSceneClassificationLabels", v56, 112, 1, -1, 0.16, 0.0);
                      v79 = createQueryNode("kMDItemPhotosSceneClassificationSynonyms", v56, 112, 1, -1, 0.16, 0.0);
                      v80 = createQueryNode("kMDItemPhotosLocationKeywords", v56, 112, 1, -1, 0.14, 0.0);
                      v81 = makeOrNode((uint64_t)v292, (uint64_t)v77);
                      v82 = makeOrNode((uint64_t)v78, (uint64_t)v79);
                      v83 = makeOrNode((uint64_t)v81, (uint64_t)v82);
                      v84 = (uint64_t)v80;
                    }
                    else
                    {
                      v87 = createQueryNode("kMDItemPhotosPeopleNames", v56, 112, 1, 0, 0.17, 0.0);
                      v88 = createQueryNode("kMDItemPhotosPeopleNamesAlternatives", v56, 112, 1, 0, 0.17, 0.0);
                      v89 = makeOrNode((uint64_t)v87, (uint64_t)v88);
                      v90 = createQueryNode("kMDItemPhotosSceneClassificationLabels", v56, 112, 1, 0, 0.16, 0.0);
                      v91 = createQueryNode("kMDItemPhotosSceneClassificationSynonyms", v56, 112, 1, 0, 0.16, 0.0);
                      v92 = makeOrNode((uint64_t)v90, (uint64_t)v91);
                      v93 = createQueryNode("kMDItemPhotosLocationKeywords", v56, 112, 1, 0, 0.14, 0.0);
                      v83 = makeOrNode((uint64_t)v92, (uint64_t)v93);
                      v84 = (uint64_t)v89;
                    }
                    v94 = makeOrNode(v84, (uint64_t)v83);
                    v312 = makeAndNode((uint64_t)v312, (uint64_t)v94);
                    v70 = LODWORD(__p[0]) + 5;
                    goto LABEL_83;
                  }
                  v48 = *__error();
                  v62 = _SILogForLogForCategory(20);
                  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)valuePtr = 134218240;
                    *(_QWORD *)&valuePtr[4] = a6;
                    *(_WORD *)&valuePtr[12] = 2048;
                    *(_QWORD *)&valuePtr[14] = v36;
                    _os_log_impl(&dword_1B8270000, v62, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu is skipped (Reason: It is optional as per optional dictionary)", valuePtr, 0x16u);
                  }
                }
                else
                {
                  v48 = *__error();
                  v71 = _SILogForLogForCategory(20);
                  if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)valuePtr = 134218240;
                    *(_QWORD *)&valuePtr[4] = a6;
                    *(_WORD *)&valuePtr[12] = 2048;
                    *(_QWORD *)&valuePtr[14] = v36;
                    _os_log_impl(&dword_1B8270000, v71, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token: %lu is skipped (ERROR: UTF8 encoding of token failed)", valuePtr, 0x16u);
                  }
                }
              }
            }
            *__error() = v48;
LABEL_84:
            if (++v36 == Count)
              goto LABEL_339;
          }
        }
      }
      freeQueryTokensContext((CFTypeRef *)v303);
      v102 = *__error();
      v103 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)valuePtr = 134217984;
        *(_QWORD *)&valuePtr[4] = a6;
        _os_log_impl(&dword_1B8270000, v103, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Return no results (ERROR: zero tokens found from the userQuery)", valuePtr, 0xCu);
      }
    }
    else
    {
      v102 = *__error();
      v104 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)valuePtr = 134217984;
        *(_QWORD *)&valuePtr[4] = a6;
        _os_log_impl(&dword_1B8270000, v104, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Return no results (ERROR: missing tokenization context on userQuery)", valuePtr, 0xCu);
      }
    }
    *__error() = v102;
    v12 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E0040D742DA1DuLL);
    v12[20] = 16;
    goto LABEL_345;
  }
  v13 = a3;
  if (theDict)
  {
    v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("disableMetadataSearch"));
    valuePtr[0] = 0;
    if (v14)
    {
      CFNumberGetValue(v14, kCFNumberSInt8Type, valuePtr);
      v304 = valuePtr[0] != 0;
    }
    else
    {
      v304 = 0;
    }
    v95 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("disableSemanticSearch"));
    valuePtr[0] = 0;
    if (v95)
    {
      CFNumberGetValue(v95, kCFNumberSInt8Type, valuePtr);
      theArray = valuePtr[0] != 0;
    }
    else
    {
      theArray = 0;
    }
    v96 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("disableU2"));
    valuePtr[0] = 0;
    if (v96)
    {
      CFNumberGetValue(v96, kCFNumberSInt8Type, valuePtr);
      v302 = valuePtr[0] != 0;
    }
    else
    {
      v302 = 0;
    }
    v97 = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("maxANNResultCount"));
    v18 = 1000;
    *(_DWORD *)valuePtr = 1000;
    if (v97)
    {
      CFNumberGetValue(v97, kCFNumberIntType, valuePtr);
      v18 = *(_DWORD *)valuePtr;
    }
  }
  else
  {
    v304 = 0;
    theArray = 0;
    v302 = 0;
    v18 = 1000;
  }
  v294 = v18;
  v328 = 0;
  v329 = 0;
  v98 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v323 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  if (a2 && CFAttributedStringGetLength(a2) >= 1)
  {
    PhPopulateFiltersFromQuery(a2, (uint64_t)&v329, (uint64_t)&v328, (uint64_t)v98, (uint64_t)v323, 0, a6);
    v13 = a3;
  }
  v326 = 0;
  v327 = 0;
  v325 = 0;
  if (v302 && v304)
  {
    v99 = *__error();
    v100 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v100, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping aNN filters and metadata nodes (Reason: U2 and metadata search are disabled)", valuePtr, 0xCu);
    }
    *__error() = v99;
    goto LABEL_259;
  }
  if (!v13)
    goto LABEL_128;
  v101 = (const void *)getkQPQUOutputTokenInfoKey();
  if (CFDictionaryContainsKey(a3, v101) && CFDictionaryContainsKey(a3, CFSTR("attributedParse")))
  {
    PhPopulateNodesFromU2Parse(a3, v98, v323, theArray, (uint64_t *)&v326, (uint64_t *)&v327, &v325, a6);
    goto LABEL_255;
  }
  if (CFDictionaryContainsKey(a3, CFSTR("attributedParses"))
    && (v105 = (void *)CFDictionaryGetValue(a3, CFSTR("attributedParses")), objc_msgSend(v105, "count")))
  {
    v106 = (void *)objc_msgSend(v105, "objectAtIndexedSubscript:", 0);
  }
  else
  {
LABEL_128:
    v106 = 0;
  }
  v107 = *__error();
  v108 = _SILogForLogForCategory(19);
  if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)valuePtr = 134217984;
    *(_QWORD *)&valuePtr[4] = a6;
    _os_log_impl(&dword_1B8270000, v108, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Using rule-based parse for creating ann filter and unigram node (U2 parse missing)", valuePtr, 0xCu);
  }
  *__error() = v107;
  v318 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v320 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v298 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v296 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v297 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v109 = objc_msgSend(v106, "length");
  *(_QWORD *)valuePtr = MEMORY[0x1E0C809B0];
  *(_QWORD *)&valuePtr[8] = 3221225472;
  *(_QWORD *)&valuePtr[16] = ___ZL28PhPopulateAllFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueES9_S9_S9__block_invoke;
  *(_QWORD *)&valuePtr[24] = &unk_1E6E382A0;
  *(_QWORD *)&valuePtr[32] = v298;
  *(_QWORD *)&valuePtr[40] = v296;
  *(_QWORD *)&valuePtr[48] = v297;
  v343 = v318;
  v344 = v320;
  objc_msgSend(v106, "enumerateAttributesInRange:options:usingBlock:", 0, v109, 0, valuePtr);
  if (objc_msgSend(v320, "count")
    || objc_msgSend(v298, "count")
    || objc_msgSend(v297, "count")
    || objc_msgSend(v296, "count"))
  {
    v110 = *__error();
    v111 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
    {
      v112 = objc_msgSend(v320, "count");
      v113 = objc_msgSend(v298, "count");
      v114 = objc_msgSend(v297, "count");
      v115 = objc_msgSend(v296, "count");
      *(_DWORD *)valuePtr = 134219008;
      *(_QWORD *)&valuePtr[4] = a6;
      *(_WORD *)&valuePtr[12] = 2048;
      *(_QWORD *)&valuePtr[14] = v112;
      *(_WORD *)&valuePtr[22] = 2048;
      *(_QWORD *)&valuePtr[24] = v113;
      *(_WORD *)&valuePtr[32] = 2048;
      *(_QWORD *)&valuePtr[34] = v114;
      *(_WORD *)&valuePtr[42] = 2048;
      *(_QWORD *)&valuePtr[44] = v115;
      _os_log_impl(&dword_1B8270000, v111, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Populated filters: time = %lu, fav = %lu, person = %lu, mediatype = %lu", valuePtr, 0x34u);
    }
    *__error() = v110;
  }
  v316 = (NSCharacterSet *)objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  PhRetrievalAttribs();
  v116 = (const __CFArray **)CreateQueryTokens(a1, 1);
  if (v116)
  {
    v117 = v116;
    v118 = *v116;
    if (v118)
    {
      v119 = CFArrayGetCount(v118);
      v313 = v119;
      if (v119)
      {
        v293 = *v117;
        obja = v117[1];
        v299 = v117[2];
        v325 = v119;
        v289 = v119 - 1;
        if (v119 >= 1)
        {
          v120 = 0;
          alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v290 = v117;
          do
          {
            v121 = getRangeAtIndex(obja, v299, v120);
            v123 = v122;
            if (v121 == -1)
            {
              v138 = *__error();
              v139 = _SILogForLogForCategory(19);
              if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)valuePtr = 134218752;
                *(_QWORD *)&valuePtr[4] = a6;
                *(_WORD *)&valuePtr[12] = 2048;
                *(_QWORD *)&valuePtr[14] = v120;
                *(_WORD *)&valuePtr[22] = 2048;
                *(_QWORD *)&valuePtr[24] = -1;
                *(_WORD *)&valuePtr[32] = 2048;
                *(_QWORD *)&valuePtr[34] = v123;
                _os_log_impl(&dword_1B8270000, v139, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (ERROR: invalid range: (%ld, %ld))", valuePtr, 0x2Au);
              }
            }
            else
            {
              v124 = v121;
              if (objc_msgSend(v98, "count"))
              {
                v125 = 0;
                while (1)
                {
                  v362.location = objc_msgSend((id)objc_msgSend(v98, "objectAtIndexedSubscript:", v125), "rangeValue");
                  v362.length = v126;
                  v351.location = v124;
                  v351.length = v123;
                  if (NSIntersectionRange(v351, v362).length)
                    break;
                  if (++v125 >= (unint64_t)objc_msgSend(v98, "count"))
                    goto LABEL_148;
                }
                v140 = *__error();
                v141 = _SILogForLogForCategory(19);
                if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)valuePtr = 134218240;
                  *(_QWORD *)&valuePtr[4] = a6;
                  *(_WORD *)&valuePtr[12] = 2048;
                  *(_QWORD *)&valuePtr[14] = v120;
                  _os_log_impl(&dword_1B8270000, v141, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (REASON: Its a filter token)", valuePtr, 0x16u);
                }
                *__error() = v140;
                if (objc_msgSend(v323, "count"))
                {
                  v142 = 0;
                  while (1)
                  {
                    v364.location = objc_msgSend((id)objc_msgSend(v323, "objectAtIndexedSubscript:", v142), "rangeValue");
                    v364.length = v143;
                    v352.location = v124;
                    v352.length = v123;
                    if (NSIntersectionRange(v352, v364).length)
                      goto LABEL_178;
                    if (++v142 >= (unint64_t)objc_msgSend(v323, "count"))
                      goto LABEL_177;
                  }
                }
                goto LABEL_177;
              }
LABEL_148:
              v127 = (__CFString *)CFArrayGetValueAtIndex(v293, v120);
              if (CFStringGetLength(v127))
              {
                if (!v127)
                  goto LABEL_174;
                Length = CFStringGetLength(v127);
                v130 = Length - 1;
                if (Length < 1)
                {
                  CFRelease(v128);
                  v117 = v290;
LABEL_174:
                  v145 = *__error();
                  v146 = _SILogForLogForCategory(19);
                  if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)valuePtr = 134218240;
                    *(_QWORD *)&valuePtr[4] = a6;
                    *(_WORD *)&valuePtr[12] = 2048;
                    *(_QWORD *)&valuePtr[14] = v120;
                    _os_log_impl(&dword_1B8270000, v146, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (Reason: It has only special characters)", valuePtr, 0x16u);
                  }
                  *__error() = v145;
LABEL_177:
                  --v325;
                  goto LABEL_178;
                }
                v131 = 0;
                do
                {
                  CharacterAtIndex = CFStringGetCharacterAtIndex(v127, v131);
                  IsCharacterMember = CFCharacterSetIsCharacterMember(v128, CharacterAtIndex);
                  if (!IsCharacterMember)
                    break;
                }
                while (v130 != v131++);
                CFRelease(v128);
                v117 = v290;
                if (IsCharacterMember)
                  goto LABEL_174;
                v340[0] = v127;
                if (v120 == v289 && hasTrailingAsterisk((_BOOL8)v127) && (v135 = CFStringGetLength(v127), v135 >= 1))
                {
                  v363.location = 0;
                  v363.length = v135 - 1;
                  v136 = CFStringCreateWithSubstring(alloc, v127, v363);
                  v340[0] = v136;
                  v137 = v136;
                }
                else
                {
                  v137 = 0;
                  v136 = v127;
                }
                if (v136)
                {
                  memset(valuePtr, 0, 24);
                  utf8QueryString((const __CFString **)valuePtr, (uint64_t)v340, 1, 0);
                  v147 = valuePtr[23];
                  v148 = valuePtr[23];
                  if (valuePtr[23] < 0)
                    v147 = *(_QWORD *)&valuePtr[8];
                  if (v147)
                  {
                    v149 = isOptionalWord(valuePtr);
                    v148 = valuePtr[23];
                  }
                  else
                  {
                    v149 = 0;
                  }
                  if (v148 < 0)
                    operator delete(*(void **)valuePtr);
                }
                else
                {
                  v149 = 0;
                }
                if (v137)
                  CFRelease(v137);
                if (v149 && (--v325, v120 != v289))
                {
                  v138 = *__error();
                  v157 = _SILogForLogForCategory(19);
                  if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)valuePtr = 134218240;
                    *(_QWORD *)&valuePtr[4] = a6;
                    *(_WORD *)&valuePtr[12] = 2048;
                    *(_QWORD *)&valuePtr[14] = v120;
                    _os_log_impl(&dword_1B8270000, v157, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (Reason: It is optional)", valuePtr, 0x16u);
                  }
                }
                else
                {
                  if (objc_msgSend(v320, "count"))
                  {
                    v150 = 0;
                    while (1)
                    {
                      v365.location = objc_msgSend((id)objc_msgSend(v320, "objectAtIndexedSubscript:", v150), "rangeValue");
                      v365.length = v151;
                      v353.location = v124;
                      v353.length = v123;
                      if (NSIntersectionRange(v353, v365).length)
                        break;
                      if (++v150 >= (unint64_t)objc_msgSend(v320, "count"))
                        goto LABEL_198;
                    }
                    v158 = *__error();
                    v159 = _SILogForLogForCategory(19);
                    if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)valuePtr = 134218240;
                      *(_QWORD *)&valuePtr[4] = a6;
                      *(_WORD *)&valuePtr[12] = 2048;
                      *(_QWORD *)&valuePtr[14] = v120;
                      _os_log_impl(&dword_1B8270000, v159, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Token %lu has a date parse, will process it after all tokens are processed", valuePtr, 0x16u);
                    }
                    *__error() = v158;
                    if (-[NSCharacterSet objectForKeyedSubscript:](v316, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v150)))
                    {
                      objc_msgSend((id)-[NSCharacterSet objectForKeyedSubscript:](v316, "objectForKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v150)), "addObject:", v127);
                    }
                    else
                    {
                      v175 = objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithObject:", v127);
                      -[NSCharacterSet setObject:forKeyedSubscript:](v316, "setObject:forKeyedSubscript:", v175, objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v150));
                    }
                    goto LABEL_178;
                  }
LABEL_198:
                  v152 = (char *)-[__CFString UTF8String](v127, "UTF8String");
                  if (v152)
                  {
                    v153 = qword_1EF1AD0B0;
                    if (v120 == v289)
                    {
                      if (qword_1EF1AD0B0)
                      {
                        v154 = 0;
                        do
                        {
                          v155 = (const char *)(v153 + 16);
                          if (*(char *)(v153 + 39) < 0)
                            v155 = *(const char **)v155;
                          v156 = createQueryNode(v155, v152, 112, 1, -1, 0.0, 0.0);
                          v154 = makeOrNode((uint64_t)v154, (uint64_t)v156);
                          v153 = *(_QWORD *)v153;
                        }
                        while (v153);
                        goto LABEL_223;
                      }
                    }
                    else if (qword_1EF1AD0B0)
                    {
                      v154 = 0;
                      do
                      {
                        v161 = (const char *)(v153 + 16);
                        if (*(char *)(v153 + 39) < 0)
                          v161 = *(const char **)v161;
                        v162 = createQueryNode(v161, v152, 112, 1, 0, 0.0, 0.0);
                        v154 = makeOrNode((uint64_t)v154, (uint64_t)v162);
                        v153 = *(_QWORD *)v153;
                      }
                      while (v153);
                      goto LABEL_223;
                    }
                    v154 = 0;
LABEL_223:
                    if (objc_msgSend(v298, "count"))
                    {
                      v163 = 0;
                      while (1)
                      {
                        v366.location = objc_msgSend((id)objc_msgSend(v298, "objectAtIndexedSubscript:", v163), "rangeValue");
                        v366.length = v164;
                        v354.location = v124;
                        v354.length = v123;
                        if (NSIntersectionRange(v354, v366).length)
                          break;
                        if (++v163 >= (unint64_t)objc_msgSend(v298, "count"))
                          goto LABEL_227;
                      }
                      v288 = createQueryNode("kMDItemPhotosFavorited", "1", 0, 1, 0, 0.0, 0.0);
                      v166 = createQueryNode("kMDItemPhotosFavorited", "1", 0, 1, 0, 0.0, 0.0);
                      v154 = makeOrNode((uint64_t)v154, (uint64_t)v166);
                      v165 = objc_msgSend(v296, "count", v288);
                    }
                    else
                    {
LABEL_227:
                      v165 = objc_msgSend(v296, "count", 0);
                    }
                    if (v165)
                    {
                      v167 = 0;
                      while (1)
                      {
                        v367.location = objc_msgSend((id)objc_msgSend(v296, "objectAtIndexedSubscript:", v167), "rangeValue");
                        v367.length = v168;
                        v355.location = v124;
                        v355.length = v123;
                        if (NSIntersectionRange(v355, v367).length)
                          break;
                        if (++v167 >= (unint64_t)objc_msgSend(v296, "count"))
                          goto LABEL_233;
                      }
                    }
                    else
                    {
LABEL_233:
                      v167 = -1;
                    }
                    if (objc_msgSend(v297, "count"))
                    {
                      v169 = 0;
                      while (1)
                      {
                        v368.location = objc_msgSend((id)objc_msgSend(v297, "objectAtIndexedSubscript:", v169), "rangeValue");
                        v368.length = v170;
                        v356.location = v124;
                        v356.length = v123;
                        if (NSIntersectionRange(v356, v368).length)
                          break;
                        if (++v169 >= (unint64_t)objc_msgSend(v297, "count"))
                          goto LABEL_238;
                      }
                    }
                    else
                    {
LABEL_238:
                      v169 = -1;
                    }
                    if (v167 == -1)
                    {
                      v172 = (_QWORD *)v287;
                    }
                    else
                    {
                      v171 = createQueryNode("kMDItemPhotosMediaTypes", v152, 112, 1, -1, 0.0, 0.0);
                      v172 = makeOrNode(v287, (uint64_t)v171);
                    }
                    if (v169 != -1)
                    {
                      v173 = createQueryNode("kMDItemPhotosPeopleNames", v152, 112, 1, -1, 0.0, 0.0);
                      v172 = makeOrNode((uint64_t)v172, (uint64_t)v173);
                    }
                    if (v172)
                    {
                      --v325;
                      v174 = makeAndNode((uint64_t)v326, (uint64_t)v172);
                    }
                    else
                    {
                      v174 = v326;
                    }
                    v326 = v174;
                    v327 = makeAndNode((uint64_t)v327, (uint64_t)v154);
                    goto LABEL_178;
                  }
                  v138 = *__error();
                  v160 = _SILogForLogForCategory(19);
                  if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)valuePtr = 134218240;
                    *(_QWORD *)&valuePtr[4] = a6;
                    *(_WORD *)&valuePtr[12] = 2048;
                    *(_QWORD *)&valuePtr[14] = v120;
                    _os_log_impl(&dword_1B8270000, v160, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (ERROR: UTF8 encoding of token failed)", valuePtr, 0x16u);
                  }
                }
              }
              else
              {
                v138 = *__error();
                v144 = _SILogForLogForCategory(19);
                if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)valuePtr = 134218240;
                  *(_QWORD *)&valuePtr[4] = a6;
                  *(_WORD *)&valuePtr[12] = 2048;
                  *(_QWORD *)&valuePtr[14] = v120;
                  _os_log_impl(&dword_1B8270000, v144, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Skipping token %lu (Reason: Its zero-length)", valuePtr, 0x16u);
                }
              }
            }
            *__error() = v138;
LABEL_178:
            ++v120;
          }
          while (v120 != v313);
        }
        freeQueryTokensContext((CFTypeRef *)v117);
        if (!-[NSCharacterSet count](v316, "count"))
          goto LABEL_255;
        v338 = 0u;
        v339 = 0u;
        v336 = 0u;
        v337 = 0u;
        objb = (id)-[NSCharacterSet allKeys](v316, "allKeys");
        v321 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v336, valuePtr, 16);
        if (!v321)
          goto LABEL_255;
        v314 = *(_QWORD *)v337;
LABEL_299:
        v217 = 0;
        while (1)
        {
          if (*(_QWORD *)v337 != v314)
            objc_enumerationMutation(objb);
          v218 = *(void **)(*((_QWORD *)&v336 + 1) + 8 * v217);
          v332 = 0u;
          v333 = 0u;
          v334 = 0u;
          v335 = 0u;
          v324 = v218;
          v219 = (void *)-[NSCharacterSet objectForKeyedSubscript:](v316, "objectForKeyedSubscript:");
          v220 = 0;
          v221 = objc_msgSend(v219, "countByEnumeratingWithState:objects:count:", &v332, v340, 16);
          if (v221)
            break;
LABEL_322:
          v231 = (char *)objc_msgSend((id)objc_msgSend(v318, "objectAtIndexedSubscript:", (int)objc_msgSend(v324, "intValue")), "UTF8String");
          v232 = v231;
          if (v231)
          {
            query_node_with_ann = db_make_query_node_with_ann(v231, 0);
            v326 = makeAndNode((uint64_t)v326, (uint64_t)query_node_with_ann);
            v234 = db_make_query_node_with_ann(v232, 0);
          }
          else
          {
            v234 = 0;
          }
          v235 = makeOrNode((uint64_t)v220, (uint64_t)v234);
          v327 = makeAndNode((uint64_t)v327, (uint64_t)v235);
          if (++v217 == v321)
          {
            v321 = objc_msgSend(objb, "countByEnumeratingWithState:objects:count:", &v336, valuePtr, 16);
            if (!v321)
              goto LABEL_255;
            goto LABEL_299;
          }
        }
        v222 = *(_QWORD *)v333;
LABEL_304:
        v223 = 0;
        while (1)
        {
          if (*(_QWORD *)v333 != v222)
            objc_enumerationMutation(v219);
          v224 = (char *)objc_msgSend(*(id *)(*((_QWORD *)&v332 + 1) + 8 * v223), "UTF8String");
          if (!v224)
            goto LABEL_320;
          std::string::basic_string[abi:nn180100]<0>(__p, v224);
          v225 = isOptionalWord((char *)__p);
          v226 = v225;
          if (v331 < 0)
          {
            operator delete(__p[0]);
            if (!v226)
            {
LABEL_312:
              v227 = qword_1EF1AD0B0;
              if (qword_1EF1AD0B0)
              {
                v228 = 0;
                do
                {
                  v229 = (const char *)(v227 + 16);
                  if (*(char *)(v227 + 39) < 0)
                    v229 = *(const char **)v229;
                  v230 = createQueryNode(v229, v224, 112, 1, 0, 0.0, 0.0);
                  v228 = makeOrNode((uint64_t)v228, (uint64_t)v230);
                  v227 = *(_QWORD *)v227;
                }
                while (v227);
              }
              else
              {
                v228 = 0;
              }
              v220 = makeAndNode((uint64_t)v220, (uint64_t)v228);
            }
          }
          else if (!v225)
          {
            goto LABEL_312;
          }
LABEL_320:
          if (++v223 == v221)
          {
            v221 = objc_msgSend(v219, "countByEnumeratingWithState:objects:count:", &v332, v340, 16);
            if (!v221)
              goto LABEL_322;
            goto LABEL_304;
          }
        }
      }
    }
    freeQueryTokensContext((CFTypeRef *)v117);
    v176 = *__error();
    v177 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v177, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Return no results (ERROR: zero tokens found from the userQuery)", valuePtr, 0xCu);
    }
  }
  else
  {
    v176 = *__error();
    v178 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v178, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {QP} Return no results (ERROR: missing tokenization context on userQuery)", valuePtr, 0xCu);
    }
  }
  *__error() = v176;
LABEL_255:
  if (v302)
  {
    v179 = *__error();
    v180 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v180, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping aNN filters (U2 is disabled by client)", valuePtr, 0xCu);
    }
    *__error() = v179;
    db_free_query_node(v326);
    v326 = 0;
  }
LABEL_259:
  v181 = makeAndNode((uint64_t)v327, v328);
  v182 = v181;
  if (v304)
  {
    v183 = *__error();
    v184 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v184, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping metadata node (metadata search is disabled)", valuePtr, 0xCu);
    }
    *__error() = v183;
    db_free_query_node(v182);
    v182 = 0;
  }
  else if (!v181)
  {
    v185 = *__error();
    v186 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v186, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping metadata node (query has no free tokens)", valuePtr, 0xCu);
    }
    v182 = 0;
    *__error() = v185;
  }
  if (theArray)
  {
    v187 = *__error();
    v188 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v188, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v188, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ANN node (semantic search is disabled)", valuePtr, 0xCu);
    }
LABEL_330:
    v237 = 0;
    *__error() = v187;
    goto LABEL_331;
  }
  v189 = v304;
  if (v182)
    v189 = 1;
  if ((v189 & 1) == 0)
  {
    v187 = *__error();
    v215 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v215, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ANN node (query has only suggestions)", valuePtr, 0xCu);
    }
    goto LABEL_330;
  }
  v190 = v325;
  if (v325 <= 0)
  {
    v187 = *__error();
    v236 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v236, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v236, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ANN node (no visual token in the query)", valuePtr, 0xCu);
    }
    goto LABEL_330;
  }
  if (!a3 || !CFDictionaryContainsKey(a3, CFSTR("kQPQueryEmbeddingEncodedData")))
  {
    v187 = *__error();
    v216 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v216, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v216, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ANN node (ERROR: missing query embedding)", valuePtr, 0xCu);
    }
    goto LABEL_330;
  }
  v191 = (const __CFData *)CFDictionaryGetValue(a3, CFSTR("kQPQueryEmbeddingEncodedData"));
  if (!v191)
  {
    v187 = *__error();
    v256 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v256, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v256, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ANN node (ERROR: encoded query embedding in null)", valuePtr, 0xCu);
    }
    goto LABEL_330;
  }
  v192 = decodeEmbeddingData(v191);
  if (!v192)
  {
    v187 = *__error();
    v257 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v257, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v257, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Skipping ANN node (ERROR: decoded query embedding in null)", valuePtr, 0xCu);
    }
    goto LABEL_330;
  }
  v193 = v192;
  v194 = (void *)CFDictionaryGetValue(a3, CFSTR("embeddingRelevanceThreshold"));
  if (v194)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v194, "floatValue");
      if (v195 >= 0.0)
      {
        objc_msgSend(v194, "floatValue");
        v199 = (float)(1.0 - v269) + (float)(1.0 - v269);
        v210 = *__error();
        v270 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v270, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(v194, "floatValue");
          *(_DWORD *)valuePtr = 134218240;
          *(double *)&valuePtr[4] = v199;
          *(_WORD *)&valuePtr[12] = 2048;
          *(double *)&valuePtr[14] = v271;
          v212 = "Threshold based on client supplied values: %f, rel: %f";
          v213 = v270;
          v214 = 22;
          goto LABEL_387;
        }
LABEL_388:
        *__error() = v210;
        goto LABEL_389;
      }
    }
  }
  v196 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "valueForKey:", CFSTR("SpotlightL1PhotosThresh"));
  if (!v196)
    goto LABEL_287;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    goto LABEL_287;
  objc_msgSend(v196, "floatValue");
  v198 = v197;
  v199 = (float)(1.0 - v198) + (float)(1.0 - v198);
  v200 = *__error();
  v201 = _SILogForLogForCategory(19);
  if (os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)valuePtr = 134218240;
    *(double *)&valuePtr[4] = v198;
    *(_WORD *)&valuePtr[12] = 2048;
    *(double *)&valuePtr[14] = v199;
    _os_log_impl(&dword_1B8270000, v201, OS_LOG_TYPE_DEFAULT, "Using user default threshold: %f, distance: %f", valuePtr, 0x16u);
  }
  *__error() = v200;
  if (v199 == -1.0)
  {
LABEL_287:
    v202 = (void *)CFDictionaryGetValue(a3, CFSTR("embeddingScale"));
    v203 = (void *)CFDictionaryGetValue(a3, CFSTR("embeddingBias"));
    v204 = (void *)CFDictionaryGetValue(a3, CFSTR("embeddingVersion"));
    objc_msgSend(v202, "floatValue");
    v206 = v205;
    objc_msgSend(v203, "floatValue");
    v208 = v207;
    v209 = objc_msgSend(v204, "intValue");
    if (v206 != 0.0)
    {
      v258 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "valueForKey:", CFSTR("SpotlightPhotosAnnCutoff"));
      if (!v258)
        goto LABEL_372;
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        goto LABEL_372;
      objc_msgSend(v258, "floatValue");
      v260 = v259;
      v261 = *__error();
      v262 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v262, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)valuePtr = 134217984;
        *(double *)&valuePtr[4] = v260;
        _os_log_impl(&dword_1B8270000, v262, OS_LOG_TYPE_DEFAULT, "Using user default cutoff: %f", valuePtr, 0xCu);
      }
      *__error() = v261;
      v263 = logf(v260);
      v264 = v263 - logf(1.0 - v260);
      if (v264 == -1.0)
      {
LABEL_372:
        if (v209 == 5)
        {
          v265 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults"), "objectForKey:", CFSTR("SpotlightPhotosANNPrecision"));
          v264 = -0.9445;
          if (v265)
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v266 = objc_msgSend(v265, "intValue");
              v267 = *__error();
              v268 = _SILogForLogForCategory(19);
              if (os_log_type_enabled(v268, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)valuePtr = 67109120;
                *(_DWORD *)&valuePtr[4] = v266;
                _os_log_impl(&dword_1B8270000, v268, OS_LOG_TYPE_DEFAULT, "Using user default precision: %d", valuePtr, 8u);
              }
              *__error() = v267;
              if (v266 > 84)
              {
                switch(v266)
                {
                  case 'U':
                    v264 = -0.4055;
                    break;
                  case 'Z':
                    v264 = 0.0;
                    break;
                  case '_':
                    v264 = 0.7082;
                    break;
                }
              }
              else
              {
                switch(v266)
                {
                  case 'F':
                    v264 = -1.3863;
                    break;
                  case 'K':
                    v264 = -1.046;
                    break;
                  case 'P':
                    v264 = -0.7538;
                    break;
                }
              }
            }
          }
        }
        else
        {
          v264 = -1.0986;
        }
      }
      v199 = (float)(1.0 - (float)((float)(v264 - v208) / v206)) + (float)(1.0 - (float)((float)(v264 - v208) / v206));
      v210 = *__error();
      v272 = _SILogForLogForCategory(19);
      if (!os_log_type_enabled(v272, OS_LOG_TYPE_DEFAULT))
        goto LABEL_388;
      *(_DWORD *)valuePtr = 67110144;
      *(_DWORD *)&valuePtr[4] = v209;
      *(_WORD *)&valuePtr[8] = 2048;
      *(double *)&valuePtr[10] = v199;
      *(_WORD *)&valuePtr[18] = 2048;
      *(double *)&valuePtr[20] = v264;
      *(_WORD *)&valuePtr[28] = 2048;
      *(double *)&valuePtr[30] = v206;
      *(_WORD *)&valuePtr[38] = 2048;
      *(double *)&valuePtr[40] = v208;
      v212 = "MD%d calibrated threshold: %f, cutoffOffset: %f, scale: %f, bias: %f";
      v213 = v272;
      v214 = 48;
      goto LABEL_387;
    }
    v210 = *__error();
    v211 = _SILogForLogForCategory(19);
    v199 = 1.7;
    if (os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 67109376;
      *(_DWORD *)&valuePtr[4] = v209;
      *(_WORD *)&valuePtr[8] = 2048;
      *(_QWORD *)&valuePtr[10] = 0x3FFB333340000000;
      v212 = "MD%d: Using default similarity of 0.15 to get threshold = %f (ERROR: scale is 0)";
      v213 = v211;
      v214 = 18;
LABEL_387:
      _os_log_impl(&dword_1B8270000, v213, OS_LOG_TYPE_DEFAULT, v212, valuePtr, v214);
      goto LABEL_388;
    }
    goto LABEL_388;
  }
LABEL_389:
  v273 = -[__CFDictionary length](v193, "length");
  if (v273 > 1)
  {
    v277 = -[__CFDictionary bytes](v193, "bytes");
    if (v277)
    {
      v278 = (float *)malloc_type_calloc(1uLL, 0x130uLL, 0x10B20407DF6C093uLL);
      *(_QWORD *)v278 = strdup("_kMDItemPhotoEmbedding");
      *((_DWORD *)v278 + 6) = 15;
      v279 = (_DWORD)v278[15] & 0xFE000000;
      if (v273 >> 1 == 512)
        v280 = 5;
      else
        v280 = 6;
      v278[16] = v199;
      *((_DWORD *)v278 + 15) = v280 | (16 * (v294 & 0xFFFFF)) | v279;
      *((_DWORD *)v278 + 10) = 5;
      *((_DWORD *)v278 + 40) |= 0x10000u;
      v281 = malloc_type_malloc(v273 & 0xFFFFFFFFFFFFFFFELL, 0x1000040BDFB0063uLL);
      v282 = 0;
      *((_QWORD *)v278 + 37) = v281;
      if (v273 >> 1 <= 1)
        v283 = 1;
      else
        v283 = v273 >> 1;
      do
      {
        *(_WORD *)(*((_QWORD *)v278 + 37) + 2 * v282) = *(_WORD *)(v277 + 2 * v282);
        ++v282;
      }
      while (v283 != v282);
      v284 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E0040D742DA1DuLL);
      v284[20] = 4;
      *((_QWORD *)v284 + 2) = v278;
      v237 = makeAndNode((uint64_t)v284, (uint64_t)v326);
      v285 = -[__CFDictionary length](v193, "length");
      v274 = *__error();
      v286 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v286, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)valuePtr = 134219008;
        *(_QWORD *)&valuePtr[4] = a6;
        *(_WORD *)&valuePtr[12] = 2048;
        *(_QWORD *)&valuePtr[14] = v285 >> 1;
        *(_WORD *)&valuePtr[22] = 2048;
        *(double *)&valuePtr[24] = v199;
        *(_WORD *)&valuePtr[32] = 1024;
        *(_DWORD *)&valuePtr[34] = v294;
        *(_WORD *)&valuePtr[38] = 2048;
        *(_QWORD *)&valuePtr[40] = v190;
        _os_log_impl(&dword_1B8270000, v286, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Adding ANN node (dim: %lu, thresh: %f, num results: %d, visual tokens: %ld)", valuePtr, 0x30u);
      }
      goto LABEL_406;
    }
    v274 = *__error();
    v275 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v275, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)valuePtr = 0;
      v276 = "Skipping ann node (ERROR: Failed to get byte from embedding)";
      goto LABEL_404;
    }
  }
  else
  {
    v274 = *__error();
    v275 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v275, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)valuePtr = 0;
      v276 = "Skipping ann node (ERROR: embedding has 0 dimensionality)";
LABEL_404:
      _os_log_impl(&dword_1B8270000, v275, OS_LOG_TYPE_DEFAULT, v276, valuePtr, 2u);
    }
  }
  v237 = 0;
LABEL_406:
  *__error() = v274;
  CFRelease(v193);
LABEL_331:
  if (!v237 && v326)
  {
    *(_QWORD *)valuePtr = MEMORY[0x1E0C809B0];
    *(_QWORD *)&valuePtr[8] = 0x40000000;
    *(_QWORD *)&valuePtr[16] = __db_query_tree_apply_block_block_invoke;
    *(_QWORD *)&valuePtr[24] = &unk_1E6E377F8;
    *(_QWORD *)&valuePtr[32] = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta(v326, (uint64_t)valuePtr, 0);
  }
  v238 = makeOrNode((uint64_t)v237, (uint64_t)v182);
  v12 = makeAndNode((uint64_t)v238, v329);
  if (!v12)
  {
    v12 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E0040D742DA1DuLL);
    v12[20] = 16;
    v239 = *__error();
    v240 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)valuePtr = 134217984;
      *(_QWORD *)&valuePtr[4] = a6;
      _os_log_impl(&dword_1B8270000, v240, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Return no results (missing all nodes)", valuePtr, 0xCu);
    }
    *__error() = v239;
  }
  return v12;
}

void PhPopulateFiltersFromQuery(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  void *v14;
  int v15;
  NSObject *v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD v23[9];
  char v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  void *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v14 = (void *)MEMORY[0x1BCCB1280]();
  v15 = *__error();
  if (a6)
  {
    v16 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v21 = a3;
      v22 = v14;
      v17 = (void *)objc_msgSend(a1, "string");
      v18 = objc_msgSend(v17, "length");
      if (v18 >= 4)
        v17 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%c%c...%c<%lu chars>"), objc_msgSend(v17, "characterAtIndex:", 0), objc_msgSend(v17, "characterAtIndex:", 1), objc_msgSend(v17, "characterAtIndex:", v18 - 1), v18);
LABEL_9:
      *(_DWORD *)buf = 134218242;
      v26 = a7;
      v27 = 2112;
      v28 = v17;
      _os_log_impl(&dword_1B8270000, v16, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Processing attributed query: %@", buf, 0x16u);
      a3 = v21;
      v14 = v22;
    }
  }
  else
  {
    v16 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v21 = a3;
      v22 = v14;
      v17 = (void *)objc_msgSend(a1, "string");
      v19 = objc_msgSend(v17, "length");
      if (v19 >= 4)
        v17 = (void *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%c%c...%c<%lu chars>"), objc_msgSend(v17, "characterAtIndex:", 0), objc_msgSend(v17, "characterAtIndex:", 1), objc_msgSend(v17, "characterAtIndex:", v19 - 1), v19);
      goto LABEL_9;
    }
  }
  *__error() = v15;
  v20 = objc_msgSend(a1, "length");
  v23[0] = MEMORY[0x1E0C809B0];
  v23[1] = 3221225472;
  v23[2] = ___ZL26PhPopulateFiltersFromQueryPK20__CFAttributedStringPP10query_nodeS4_P14NSMutableArrayIP7NSValueES9_by_block_invoke;
  v23[3] = &unk_1E6E38190;
  v23[4] = a4;
  v23[5] = a5;
  v24 = a6;
  v23[6] = a7;
  v23[7] = a2;
  v23[8] = a3;
  objc_msgSend(a1, "enumerateAttributesInRange:options:usingBlock:", 0, v20, 0, v23);
  objc_autoreleasePoolPop(v14);
}

void sub_1B860BDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

_QWORD *PhRankingTreeFromU2Parse(const __CFDictionary *a1, void *a2, NSCharacterSet *a3, uint64_t a4)
{
  int v6;
  NSObject *v7;
  const void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  CFIndex Count;
  CFIndex v16;
  const __CFDictionary *ValueAtIndex;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  NSUInteger v23;
  NSUInteger v24;
  NSUInteger v25;
  int v26;
  NSObject *v27;
  NSString *v28;
  NSObject *v29;
  uint64_t v30;
  NSUInteger v31;
  uint64_t v32;
  NSUInteger v33;
  const void *v34;
  void *v35;
  const void *v36;
  void *v37;
  uint64_t v38;
  unsigned int v39;
  float v40;
  float v41;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  int v46;
  NSObject *v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  NSUInteger v52;
  NSUInteger v53;
  int v54;
  NSObject *v55;
  NSString *v56;
  int v57;
  NSObject *v58;
  NSObject *v59;
  const char *v60;
  uint32_t v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  void *v65;
  NSObject *v66;
  char *v67;
  _BOOL4 v68;
  _BOOL4 v69;
  NSObject *v70;
  int v71;
  NSObject *v72;
  NSString *v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  NSUInteger v77;
  NSUInteger v78;
  NSObject *v79;
  NSString *v80;
  NSObject *v81;
  const char *v82;
  uint32_t v83;
  double v84;
  NSObject *v85;
  NSString *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  int v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  NSUInteger v98;
  NSUInteger v99;
  NSUInteger v100;
  void *v101;
  char *v102;
  const char *QueryNode;
  const char *v104;
  int *v105;
  const char *v106;
  const char *v107;
  const char *v108;
  const char *v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  int v116;
  NSObject *v117;
  NSString *v118;
  NSObject *v119;
  NSString *v120;
  NSObject *v121;
  NSString *v122;
  int v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  NSObject *v129;
  int *v130;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t i;
  void *v135;
  void *v136;
  char *v137;
  _QWORD *v138;
  int v139;
  NSObject *v140;
  int v141;
  NSObject *v142;
  int v143;
  char v144;
  unsigned __int8 v145;
  unint64_t j;
  uint64_t v147;
  NSUInteger v148;
  NSUInteger v149;
  NSUInteger v150;
  void *v151;
  char *v152;
  int v153;
  float v154;
  float v155;
  _BOOL4 v156;
  int v157;
  NSObject *v158;
  NSString *v159;
  NSObject *v160;
  NSString *v161;
  NSObject *v162;
  NSString *v163;
  int v164;
  NSObject *v165;
  NSString *v166;
  uint64_t v167;
  _QWORD *v168;
  char v169;
  float v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  const char *v174;
  int v175;
  uint64_t v176;
  float v177;
  const char *v178;
  const char *v179;
  int v180;
  NSObject *v181;
  NSObject *v182;
  uint64_t v183;
  unsigned __int8 v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  NSUInteger v188;
  NSUInteger v189;
  NSUInteger v190;
  void *v191;
  char *v192;
  int v193;
  uint64_t v194;
  unint64_t v195;
  _BOOL4 v196;
  int v197;
  NSObject *v198;
  NSString *v199;
  NSObject *v200;
  NSString *v201;
  NSObject *v202;
  NSString *v203;
  NSObject *v204;
  NSString *v205;
  uint64_t *v206;
  uint64_t *v207;
  float v208;
  NSObject *v209;
  _BOOL4 v210;
  NSString *v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  const char *v216;
  const char *v217;
  NSString *v218;
  NSString *v219;
  uint64_t v220;
  uint64_t v221;
  const char *v222;
  const char *v223;
  int v224;
  NSObject *v225;
  const char *v226;
  NSObject *v227;
  uint32_t v228;
  NSObject *v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  uint64_t v234;
  _QWORD *v235;
  NSObject *v237;
  NSObject *log;
  CFIndex v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  char v244;
  void *v245;
  void *v246;
  void *v247;
  void *Value;
  _QWORD *matched;
  void *v251;
  void *v252;
  unint64_t v253;
  int v254;
  void *v255;
  char v256;
  const __CFArray *theArray;
  CFArrayRef theArraya;
  uint64_t v259;
  _QWORD *v260;
  void *obj;
  unint64_t obja;
  void *v264;
  _QWORD *v265;
  const char *v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  int v271;
  uint8_t v272[4];
  uint64_t v273;
  __int16 v274;
  unint64_t v275;
  __int16 v276;
  _BYTE v277[14];
  __int16 v278;
  _BOOL4 v279;
  __int16 v280;
  NSString *v281;
  _BYTE buf[24];
  _BYTE v283[24];
  uint64_t v284;
  NSRange v285;
  NSRange v286;
  NSRange v287;
  NSRange v288;
  NSRange v289;
  NSRange v290;
  NSRange v291;
  NSRange v292;
  NSRange v293;
  NSRange v294;
  NSRange v295;
  NSRange v296;
  NSRange v297;
  NSRange v298;
  NSRange v299;
  NSRange v300;
  NSRange v301;
  NSRange v302;
  NSRange v303;
  NSRange v304;
  NSRange v305;
  NSRange v306;
  NSRange v307;

  v284 = *MEMORY[0x1E0C80C00];
  v6 = *__error();
  v7 = _SILogForLogForCategory(20);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a4;
    _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Processing query understanding output to create ranking tree", buf, 0xCu);
  }
  *__error() = v6;
  v8 = (const void *)getkQPQUOutputTokenInfoKey();
  theArray = (const __CFArray *)CFDictionaryGetValue(a1, v8);
  Value = (void *)CFDictionaryGetValue(a1, CFSTR("attributedParse"));
  v9 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v264 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v10 = objc_msgSend(Value, "length");
  v11 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZL29PhPopulateDateFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueE_block_invoke;
  *(_QWORD *)v283 = &unk_1E6E38250;
  *(_QWORD *)&v283[8] = v9;
  *(_QWORD *)&v283[16] = v264;
  objc_msgSend(Value, "enumerateAttributesInRange:options:usingBlock:", 0, v10, 0, buf);
  if (objc_msgSend(v264, "count"))
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = objc_msgSend(v264, "count");
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = a4;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v14;
      _os_log_impl(&dword_1B8270000, v13, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Populated %lu date filters from U2 parse", buf, 0x16u);
    }
    *__error() = v12;
  }
  if (!objc_msgSend(v9, "count"))
  {
    if (CFDictionaryContainsKey(a1, CFSTR("attributedParses")))
    {
      v87 = (void *)CFDictionaryGetValue(a1, CFSTR("attributedParses"));
      if ((unint64_t)objc_msgSend(v87, "count") >= 2)
      {
        v88 = (void *)objc_msgSend(v87, "objectAtIndexedSubscript:", 1);
        v89 = objc_msgSend(v88, "length");
        *(_QWORD *)buf = v11;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZL29PhPopulateDateFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueE_block_invoke;
        *(_QWORD *)v283 = &unk_1E6E38250;
        *(_QWORD *)&v283[8] = v9;
        *(_QWORD *)&v283[16] = v264;
        objc_msgSend(v88, "enumerateAttributesInRange:options:usingBlock:", 0, v89, 0, buf);
        if (objc_msgSend(v264, "count"))
        {
          v90 = *__error();
          v91 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
          {
            v92 = objc_msgSend(v264, "count");
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = a4;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v92;
            _os_log_impl(&dword_1B8270000, v91, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Populated %lu date filters from QP parse", buf, 0x16u);
          }
          *__error() = v90;
        }
      }
    }
  }
  obj = (void *)objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v251 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v252 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v246 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v245 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v255 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v247 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  Count = CFArrayGetCount(theArray);
  v259 = Count;
  if (Count >= 1)
  {
    v239 = Count - 1;
    v256 = 0;
    v16 = 0;
    v244 = 1;
    v242 = -1;
    v243 = -1;
    v240 = -1;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v16);
      v18 = (const void *)getkQPQUOutputTokenRangeKey();
      if (!CFDictionaryContainsKey(ValueAtIndex, v18)
        || (v19 = (const void *)getkQPQUOutputTokenArgIdsKey(), !CFDictionaryContainsKey(ValueAtIndex, v19))
        || (v20 = (const void *)getkQPQUOutputTokenArgScoresKey(), !CFDictionaryContainsKey(ValueAtIndex, v20))
        || (v21 = (const void *)getkQPQUOutputTokenKey(), !CFDictionaryContainsKey(ValueAtIndex, v21)))
      {
        v26 = *__error();
        v29 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v16;
          _os_log_impl(&dword_1B8270000, v29, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Skipping token: %lu (ERROR: token info is missing essential keys)", buf, 0x16u);
        }
        goto LABEL_20;
      }
      v22 = (const void *)getkQPQUOutputTokenRangeKey();
      v23 = objc_msgSend((id)CFDictionaryGetValue(ValueAtIndex, v22), "rangeValue");
      v25 = v24;
      if (v23 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v26 = *__error();
        v27 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v285.location = 0x7FFFFFFFFFFFFFFFLL;
          v285.length = v25;
          v28 = NSStringFromRange(v285);
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v16;
          *(_WORD *)&buf[22] = 2112;
          *(_QWORD *)v283 = v28;
          _os_log_impl(&dword_1B8270000, v27, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Skipping token: %lu (ERROR: invalid range: %@)", buf, 0x20u);
        }
        goto LABEL_20;
      }
      if (objc_msgSend(a2, "count"))
      {
        v30 = 0;
        while (1)
        {
          v306.location = objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", v30), "rangeValue");
          v306.length = v31;
          v286.location = v23;
          v286.length = v25;
          if (NSIntersectionRange(v286, v306).length)
            break;
          if (++v30 >= (unint64_t)objc_msgSend(a2, "count"))
            goto LABEL_27;
        }
        v46 = *__error();
        v47 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v16;
          _os_log_impl(&dword_1B8270000, v47, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Skipping token: %lu (Reason: It is a suggestion token)", buf, 0x16u);
        }
        *__error() = v46;
        goto LABEL_21;
      }
LABEL_27:
      if (objc_msgSend(v264, "count"))
      {
        v32 = 0;
        while (1)
        {
          v307.location = objc_msgSend((id)objc_msgSend(v264, "objectAtIndexedSubscript:", v32), "rangeValue");
          v307.length = v33;
          v287.location = v23;
          v287.length = v25;
          if (NSIntersectionRange(v287, v307).length)
            break;
          if (++v32 >= (unint64_t)objc_msgSend(v264, "count"))
            goto LABEL_31;
        }
        v48 = *__error();
        v49 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v16;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)v283 = v32;
          _os_log_impl(&dword_1B8270000, v49, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu has a date parse (Date parse idx: %lu)", buf, 0x20u);
        }
        *__error() = v48;
        if ((objc_msgSend(obj, "containsObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v32)) & 1) == 0)
          objc_msgSend(obj, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLong:", v32));
        if (objc_msgSend(v251, "count") && v16 == v243 + 1)
        {
          v50 = objc_msgSend(v251, "count") - 1;
          v51 = objc_msgSend((id)objc_msgSend(v251, "objectAtIndexedSubscript:", v50), "rangeValue");
          v52 = v51;
          if (v51 == 0x7FFFFFFFFFFFFFFFLL)
            v53 = 0;
          else
            v53 = v23 + v25 - v51;
          objc_msgSend(v251, "setObject:atIndexedSubscript:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", v51, v53), v50);
          v54 = *__error();
          v55 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            v288.location = v52;
            v288.length = v53;
            v56 = NSStringFromRange(v288);
            *(_DWORD *)buf = 134218498;
            *(_QWORD *)&buf[4] = a4;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v16;
            *(_WORD *)&buf[22] = 2112;
            *(_QWORD *)v283 = v56;
            _os_log_impl(&dword_1B8270000, v55, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu merged with previous time span (updated range: %@)", buf, 0x20u);
          }
          *__error() = v54;
        }
        else
        {
          objc_msgSend(v251, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", v23, v25));
          v71 = *__error();
          v72 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
          {
            v289.location = v23;
            v289.length = v25;
            v73 = NSStringFromRange(v289);
            *(_DWORD *)buf = 134218498;
            *(_QWORD *)&buf[4] = a4;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v16;
            *(_WORD *)&buf[22] = 2112;
            *(_QWORD *)v283 = v73;
            _os_log_impl(&dword_1B8270000, v72, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu is a new time span (added range: %@)", buf, 0x20u);
          }
          *__error() = v71;
        }
        v243 = v16;
        goto LABEL_21;
      }
LABEL_31:
      v34 = (const void *)getkQPQUOutputTokenArgIdsKey();
      v35 = (void *)CFDictionaryGetValue(ValueAtIndex, v34);
      v36 = (const void *)getkQPQUOutputTokenArgScoresKey();
      v37 = (void *)CFDictionaryGetValue(ValueAtIndex, v36);
      if (objc_msgSend(v35, "count"))
      {
        v38 = objc_msgSend(v35, "count");
        if (v38 == objc_msgSend(v37, "count"))
        {
          v39 = objc_msgSend((id)objc_msgSend(v35, "objectAtIndexedSubscript:", 0), "intValue");
          objc_msgSend((id)objc_msgSend(v37, "objectAtIndexedSubscript:", 0), "floatValue");
          v41 = v40;
          if (v39 == 57 || v39 == 55)
            v43 = 10;
          else
            v43 = v39;
          v44 = v43;
          if (!(_DWORD)v43 && v40 >= 0.5)
          {
            v26 = *__error();
            v45 = _SILogForLogForCategory(20);
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218240;
              *(_QWORD *)&buf[4] = a4;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v16;
              _os_log_impl(&dword_1B8270000, v45, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu is skipped (Reason: It is optional as per QU model)", buf, 0x16u);
            }
            goto LABEL_20;
          }
          goto LABEL_65;
        }
        v57 = *__error();
        log = _SILogForLogForCategory(20);
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
        {
          v62 = objc_msgSend(v35, "count");
          v63 = objc_msgSend(v37, "count");
          *(_DWORD *)buf = 134219008;
          *(_QWORD *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v16;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)v283 = 2;
          *(_WORD *)&v283[4] = 2048;
          *(_QWORD *)&v283[6] = v62;
          *(_WORD *)&v283[14] = 2048;
          *(_QWORD *)&v283[16] = v63;
          v59 = log;
          v60 = "[qid=%llu] {U2} Token: %lu is using default label: %d (ERROR: tokIds.count(%lu) != tokIdsScore.count(%lu))";
          v61 = 48;
          goto LABEL_63;
        }
      }
      else
      {
        v57 = *__error();
        v58 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v16;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)v283 = 2;
          v59 = v58;
          v60 = "[qid=%llu] {U2} Token: %lu is using default label: %d (ERROR: no U2 labels found)";
          v61 = 28;
LABEL_63:
          _os_log_impl(&dword_1B8270000, v59, OS_LOG_TYPE_DEFAULT, v60, buf, v61);
        }
      }
      *__error() = v57;
      v44 = 2;
      v41 = 0.0;
LABEL_65:
      v64 = (const void *)getkQPQUOutputTokenKey();
      v65 = (void *)CFDictionaryGetValue(ValueAtIndex, v64);
      if (_containsOnlyCharsInCharset((NSString *)v65, a3))
      {
        v26 = *__error();
        v66 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v16;
          _os_log_impl(&dword_1B8270000, v66, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu is skipped (Reason: It has only trimmable chars)", buf, 0x16u);
        }
      }
      else
      {
        v67 = (char *)objc_msgSend(v65, "UTF8String");
        if (v67)
        {
          std::string::basic_string[abi:nn180100]<0>(buf, v67);
          v68 = isOptionalWord(buf);
          v69 = v68;
          if ((buf[23] & 0x80000000) != 0)
          {
            operator delete(*(void **)buf);
            if (!v69)
            {
LABEL_83:
              if (objc_msgSend(v252, "count") && (_DWORD)v44 == v242 && v16 == v240 + 1)
              {
                v75 = objc_msgSend(v252, "count") - 1;
                v76 = objc_msgSend((id)objc_msgSend(v252, "objectAtIndexedSubscript:", v75), "rangeValue");
                v77 = v76;
                if (v76 == 0x7FFFFFFFFFFFFFFFLL)
                  v78 = 0;
                else
                  v78 = v23 + v25 - v76;
                objc_msgSend(v252, "setObject:atIndexedSubscript:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", v76, v78), v75);
                v241 = *__error();
                v79 = _SILogForLogForCategory(20);
                if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                {
                  v290.location = v77;
                  v290.length = v78;
                  v80 = NSStringFromRange(v290);
                  *(_DWORD *)buf = 134218754;
                  *(_QWORD *)&buf[4] = a4;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v16;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)v283 = v242;
                  *(_WORD *)&v283[4] = 2112;
                  *(_QWORD *)&v283[6] = v80;
                  v81 = v79;
                  v82 = "[qid=%llu] {U2} Token: %lu merged with previous span with type %d (updated range: %@)";
                  v83 = 38;
                  goto LABEL_93;
                }
              }
              else
              {
                objc_msgSend(v252, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", v23, v25));
                objc_msgSend(v246, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v44));
                *(float *)&v84 = v41;
                objc_msgSend(v245, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v84));
                v241 = *__error();
                v85 = _SILogForLogForCategory(20);
                if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
                {
                  v291.location = v23;
                  v291.length = v25;
                  v86 = NSStringFromRange(v291);
                  *(_DWORD *)buf = 134219010;
                  *(_QWORD *)&buf[4] = a4;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v16;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)v283 = v44;
                  *(_WORD *)&v283[4] = 2048;
                  *(double *)&v283[6] = v41;
                  *(_WORD *)&v283[14] = 2112;
                  *(_QWORD *)&v283[16] = v86;
                  v81 = v85;
                  v82 = "[qid=%llu] {U2} Token: %lu is a new span with type: %d, conf: %f (added range: %@)";
                  v83 = 48;
LABEL_93:
                  _os_log_impl(&dword_1B8270000, v81, OS_LOG_TYPE_DEFAULT, v82, buf, v83);
                }
              }
              *__error() = v241;
              objc_msgSend(v255, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", v23, v25));
              objc_msgSend(v247, "addObject:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v44));
              v244 &= v16 != v239;
              v240 = v16;
              v242 = v44;
              goto LABEL_21;
            }
          }
          else if (!v68)
          {
            goto LABEL_83;
          }
          v26 = *__error();
          v70 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = a4;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v16;
            _os_log_impl(&dword_1B8270000, v70, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu is skipped (Reason: It is optional as per optional dictionary)", buf, 0x16u);
          }
        }
        else
        {
          v26 = *__error();
          v74 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = a4;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v16;
            _os_log_impl(&dword_1B8270000, v74, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token: %lu is skipped (ERROR: UTF8 encoding of token failed)", buf, 0x16u);
          }
        }
      }
LABEL_20:
      *__error() = v26;
      v256 = 1;
LABEL_21:
      if (++v16 == v259)
        goto LABEL_102;
    }
  }
  v256 = 0;
  v244 = 1;
LABEL_102:
  theArraya = (CFArrayRef)objc_msgSend(Value, "string");
  v266 = 0;
  matched = PhExactMatchTree(theArraya, a2, (uint64_t)a3, v259, &v266, a4);
  if (!-[__CFArray length](theArraya, "length"))
  {
    v128 = *__error();
    v129 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a4;
      _os_log_impl(&dword_1B8270000, v129, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping query (Reason: empty query)", buf, 0xCu);
    }
    goto LABEL_131;
  }
  if (!objc_msgSend(v252, "count") && !objc_msgSend(obj, "count"))
  {
    v128 = *__error();
    v131 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a4;
      _os_log_impl(&dword_1B8270000, v131, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping query (Reason: no spans and no time parses in the query)", buf, 0xCu);
    }
LABEL_131:
    v130 = __error();
    v265 = 0;
LABEL_214:
    *v130 = v128;
    goto LABEL_215;
  }
  v93 = objc_msgSend(v252, "count");
  if (v93 == objc_msgSend(v246, "count"))
  {
    v94 = objc_msgSend(v252, "count");
    if (v94 == objc_msgSend(v245, "count"))
    {
      v253 = -[__CFArray length](theArraya, "length");
      v271 = 0;
      if (objc_msgSend(v252, "count") && objc_msgSend(v251, "count"))
      {
        v265 = 0;
        v95 = 0;
        v96 = &dword_1B8270000;
        while (1)
        {
          v97 = objc_msgSend((id)objc_msgSend(v251, "objectAtIndexedSubscript:", v95), "rangeValue");
          v99 = v97;
          v100 = v98;
          if (v97 == 0x7FFFFFFFFFFFFFFFLL || v97 + v98 > v253)
          {
            v116 = *__error();
            v117 = _SILogForLogForCategory(20);
            if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
            {
              v292.location = v99;
              v292.length = v100;
              v118 = NSStringFromRange(v292);
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = a4;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v95;
              *(_WORD *)&buf[22] = 2112;
              *(_QWORD *)v283 = v118;
              _os_log_impl(v96, v117, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping time span: %lu (ERROR: out of bounds range %@)", buf, 0x20u);
            }
            goto LABEL_123;
          }
          v101 = (void *)-[__CFArray substringWithRange:](theArraya, "substringWithRange:", v97, v98);
          if (!objc_msgSend(v101, "length"))
            break;
          v102 = (char *)objc_msgSend(v101, "UTF8String");
          if (!v102)
          {
            v116 = *__error();
            v121 = _SILogForLogForCategory(20);
            if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
            {
              v294.location = v99;
              v294.length = v100;
              v122 = NSStringFromRange(v294);
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = a4;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v95;
              *(_WORD *)&buf[22] = 2112;
              *(_QWORD *)v283 = v122;
              _os_log_impl(v96, v121, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping time span: %lu (ERROR: UTF8 encoding failed for range %@)", buf, 0x20u);
            }
LABEL_123:
            *__error() = v116;
            goto LABEL_124;
          }
          QueryNode = createQueryNode("kMDItemPhotosHolidays", v102, 48, 1, 0, 10.0, 0.0);
          v104 = createQueryNode("kMDItemPhotosSeasons", v102, 48, 1, 0, 10.0, 0.0);
          v105 = v96;
          v106 = createQueryNode("kMDItemPhotosContentCreationDateMonth", v102, 48, 1, 0, 10.0, 0.0);
          v107 = createQueryNode("kMDItemPhotosContentCreationDateMonths", v102, 48, 1, 0, 10.0, 0.0);
          v108 = createQueryNode("kMDItemPhotosContentCreationDateYear", v102, 48, 1, 0, 10.0, 0.0);
          v109 = createQueryNode("kMDItemPhotosContentCreationDateYears", v102, 48, 1, 0, 10.0, 0.0);
          v271 += 4;
          v110 = makeOrNode((uint64_t)QueryNode, (uint64_t)v104);
          v111 = makeOrNode((uint64_t)v107, (uint64_t)v109);
          v112 = (uint64_t)v106;
          v96 = v105;
          v113 = makeOrNode(v112, (uint64_t)v108);
          v114 = makeOrNode((uint64_t)v111, (uint64_t)v113);
          v115 = makeOrNode((uint64_t)v110, (uint64_t)v114);
          v265 = makeOrNode((uint64_t)v265, (uint64_t)v115);
LABEL_124:
          if (++v95 >= (unint64_t)objc_msgSend(v251, "count"))
            goto LABEL_136;
        }
        v116 = *__error();
        v119 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
        {
          v293.location = v99;
          v293.length = v100;
          v120 = NSStringFromRange(v293);
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v95;
          *(_WORD *)&buf[22] = 2112;
          *(_QWORD *)v283 = v120;
          _os_log_impl(v96, v119, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping time span: %lu (ERROR: Empty sub-query for range %@)", buf, 0x20u);
        }
        goto LABEL_123;
      }
      v265 = 0;
LABEL_136:
      v269 = 0u;
      v270 = 0u;
      v267 = 0u;
      v268 = 0u;
      v132 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v267, buf, 16);
      if (v132)
      {
        v133 = *(_QWORD *)v268;
        do
        {
          for (i = 0; i != v132; ++i)
          {
            if (*(_QWORD *)v268 != v133)
              objc_enumerationMutation(obj);
            v135 = *(void **)(*((_QWORD *)&v267 + 1) + 8 * i);
            v136 = (void *)objc_msgSend(v9, "objectAtIndexedSubscript:", objc_msgSend(v135, "unsignedIntValue"));
            if (objc_msgSend(v136, "length"))
            {
              v137 = (char *)objc_msgSend(v136, "UTF8String");
              if (v137)
              {
                v138 = PhRankingTreeFromStr(v137, 10.0, &v271);
                v265 = makeOrNode((uint64_t)v265, (uint64_t)v138);
                continue;
              }
              v139 = *__error();
              v142 = _SILogForLogForCategory(20);
              if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
              {
                v143 = objc_msgSend(v135, "unsignedIntValue");
                *(_DWORD *)v272 = 134218240;
                v273 = a4;
                v274 = 1024;
                LODWORD(v275) = v143;
                _os_log_impl(&dword_1B8270000, v142, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping time parse: %u (ERROR: UTF8 encoding failed)", v272, 0x12u);
              }
            }
            else
            {
              v139 = *__error();
              v140 = _SILogForLogForCategory(20);
              if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
              {
                v141 = objc_msgSend(v135, "unsignedIntValue");
                *(_DWORD *)v272 = 134218240;
                v273 = a4;
                v274 = 1024;
                LODWORD(v275) = v141;
                _os_log_impl(&dword_1B8270000, v140, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping time parse: %u (ERROR: its zero length)", v272, 0x12u);
              }
            }
            *__error() = v139;
          }
          v132 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v267, buf, 16);
        }
        while (v132);
      }
      if (objc_msgSend(v252, "count")
        && (objc_msgSend(v252, "count") != 1 || v256 & 1 | (objc_msgSend(obj, "count") != 0)))
      {
        v144 = v265 == 0;
        if ((v145 & 1) == 0
        {
          PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs = 0u;
          *(_OWORD *)&qword_1EF1AD120 = 0u;
          dword_1EF1AD130 = 1065353216;
          __cxa_atexit((void (*)(void *))std::unordered_map<int,PhRankingInfo>::~unordered_map[abi:nn180100], &PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, &dword_1B8270000);
        }
        if (PhSpanMatchRankingAttribs(void)::onceToken != -1)
          dispatch_once(&PhSpanMatchRankingAttribs(void)::onceToken, &__block_literal_global_78);
        if (objc_msgSend(v252, "count"))
        {
          for (j = 0; j < objc_msgSend(v252, "count"); ++j)
          {
            v147 = objc_msgSend((id)objc_msgSend(v252, "objectAtIndexedSubscript:", j), "rangeValue");
            v149 = v147;
            v150 = v148;
            if (v147 == 0x7FFFFFFFFFFFFFFFLL || v147 + v148 > v253)
            {
              v157 = *__error();
              v158 = _SILogForLogForCategory(20);
              if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
              {
                v295.location = v149;
                v295.length = v150;
                v159 = NSStringFromRange(v295);
                *(_DWORD *)v272 = 134218498;
                v273 = a4;
                v274 = 2048;
                v275 = j;
                v276 = 2112;
                *(_QWORD *)v277 = v159;
                _os_log_impl(&dword_1B8270000, v158, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping span: %lu, range: %@ (ERROR: range is out of bounds)", v272, 0x20u);
              }
            }
            else
            {
              v151 = (void *)-[__CFArray substringWithRange:](theArraya, "substringWithRange:", v147, v148);
              if (objc_msgSend(v151, "length"))
                v151 = (void *)objc_msgSend(v151, "stringByTrimmingCharactersInSet:", a3);
              if (objc_msgSend(v151, "length"))
              {
                v152 = (char *)objc_msgSend(v151, "UTF8String");
                if (v152)
                {
                  v153 = objc_msgSend((id)objc_msgSend(v246, "objectAtIndexedSubscript:", j), "intValue");
                  objc_msgSend((id)objc_msgSend(v245, "objectAtIndexedSubscript:", j), "floatValue");
                  v155 = v154;
                  v156 = v154 >= 0.7
                      && std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::find<int>(PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, *((unint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs + 1), v153) != 0;
                  v164 = *__error();
                  v165 = _SILogForLogForCategory(20);
                  if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
                  {
                    v298.location = v149;
                    v298.length = v150;
                    v166 = NSStringFromRange(v298);
                    *(_DWORD *)v272 = 134219266;
                    v273 = a4;
                    v274 = 2048;
                    v275 = j;
                    v276 = 1024;
                    *(_DWORD *)v277 = v153;
                    *(_WORD *)&v277[4] = 2048;
                    *(double *)&v277[6] = v155;
                    v278 = 1024;
                    v279 = v156;
                    v280 = 2112;
                    v281 = v166;
                    _os_log_impl(&dword_1B8270000, v165, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Adding span: %lu, type: %d, conf: %f, highConfMode: %d range:%@", v272, 0x36u);
                  }
                  *__error() = v164;
                  if (v156)
                  {
                    v167 = qword_1EF1AD120;
                    if (qword_1EF1AD120)
                    {
                      v168 = 0;
                      v169 = v144;
                      if ((v144 & 1) != 0)
                        v170 = 10.0;
                      else
                        v170 = 0.0;
                      do
                      {
                        if (v153 == *(_DWORD *)(v167 + 16))
                        {
                          v171 = *(_QWORD *)(v167 + 32);
                          v172 = *(_QWORD *)(v167 + 40);
                          while (v171 != v172)
                          {
                            v173 = (const char *)v171;
                            if (*(char *)(v171 + 23) < 0)
                              v173 = *(const char **)v171;
                            v174 = createQueryNode(v173, v152, 48, 1, 0, v170 + *(float *)(v167 + 24), 0.0);
                            v168 = makeOrNode((uint64_t)v168, (uint64_t)v174);
                            ++v271;
                            v171 += 24;
                          }
                        }
                        v167 = *(_QWORD *)v167;
                      }
                      while (v167);
                    }
                    else
                    {
                      v169 = v144;
                      v168 = 0;
                    }
                  }
                  else
                  {
                    PhExactMatchRankingAttribs();
                    v175 = v271;
                    v176 = qword_1EF1AD158;
                    if (qword_1EF1AD158)
                    {
                      v168 = 0;
                      if ((v144 & 1) != 0)
                        v177 = 10.0;
                      else
                        v177 = 0.0;
                      do
                      {
                        v178 = (const char *)(v176 + 16);
                        if (*(char *)(v176 + 39) < 0)
                          v178 = *(const char **)v178;
                        v179 = createQueryNode(v178, v152, 48, 1, 0, v177 + *(float *)(v176 + 40), 0.0);
                        v168 = makeOrNode((uint64_t)v168, (uint64_t)v179);
                        ++v175;
                        v176 = *(_QWORD *)v176;
                      }
                      while (v176);
                    }
                    else
                    {
                      v168 = 0;
                    }
                    v169 = v144;
                    v271 = v175;
                  }
                  v144 = (v168 == 0) & v169;
                  v265 = makeAndNode((uint64_t)v265, (uint64_t)v168);
                  continue;
                }
                v157 = *__error();
                v162 = _SILogForLogForCategory(20);
                if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
                {
                  v297.location = v149;
                  v297.length = v150;
                  v163 = NSStringFromRange(v297);
                  *(_DWORD *)v272 = 134218498;
                  v273 = a4;
                  v274 = 2048;
                  v275 = j;
                  v276 = 2112;
                  *(_QWORD *)v277 = v163;
                  _os_log_impl(&dword_1B8270000, v162, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping span: %lu, range: %@ (ERROR: UTF8 encoding failed)", v272, 0x20u);
                }
              }
              else
              {
                v157 = *__error();
                v160 = _SILogForLogForCategory(20);
                if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
                {
                  v296.location = v149;
                  v296.length = v150;
                  v161 = NSStringFromRange(v296);
                  *(_DWORD *)v272 = 134218498;
                  v273 = a4;
                  v274 = 2048;
                  v275 = j;
                  v276 = 2112;
                  *(_QWORD *)v277 = v161;
                  _os_log_impl(&dword_1B8270000, v160, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping span: %lu, range: %@ (Reason: empty sub-query after trimming)", v272, 0x20u);
                }
              }
            }
            *__error() = v157;
          }
        }
        v128 = *__error();
        v182 = _SILogForLogForCategory(20);
        if (!os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT))
          goto LABEL_213;
      }
      else
      {
        v180 = *__error();
        v181 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v272 = 134217984;
          v273 = a4;
          _os_log_impl(&dword_1B8270000, v181, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping rest of span match nodes (Reason: exact match nodes should be sufficient)", v272, 0xCu);
        }
        *__error() = v180;
        v128 = *__error();
        v182 = _SILogForLogForCategory(20);
        if (!os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT))
          goto LABEL_213;
      }
      *(_DWORD *)v272 = 134218240;
      v273 = a4;
      v274 = 1024;
      LODWORD(v275) = v271;
      _os_log_impl(&dword_1B8270000, v182, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Added %d nodes", v272, 0x12u);
LABEL_213:
      v130 = __error();
      goto LABEL_214;
    }
  }
  v123 = *__error();
  v124 = _SILogForLogForCategory(20);
  if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
  {
    v125 = objc_msgSend(v252, "count");
    v126 = objc_msgSend(v246, "count");
    v127 = objc_msgSend(v245, "count");
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = a4;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v125;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)v283 = v126;
    *(_WORD *)&v283[8] = 2048;
    *(_QWORD *)&v283[10] = v127;
    _os_log_impl(&dword_1B8270000, v124, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Span Match} Skipping query (ERROR: span count mismatch <#range=%lu, #types=%lu, #confidence=%lu>)", buf, 0x2Au);
  }
  v265 = 0;
  *__error() = v123;
LABEL_215:
  if (!-[__CFArray length](theArraya, "length"))
  {
    v224 = *__error();
    v225 = _SILogForLogForCategory(20);
    if (!os_log_type_enabled(v225, OS_LOG_TYPE_DEFAULT))
      goto LABEL_279;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a4;
    v226 = "[qid=%llu] {Prefix Match} Skipping query (Reason: empty query)";
LABEL_275:
    v227 = v225;
    v228 = 12;
LABEL_278:
    _os_log_impl(&dword_1B8270000, v227, OS_LOG_TYPE_DEFAULT, v226, buf, v228);
    goto LABEL_279;
  }
  if (!objc_msgSend(v255, "count"))
  {
    v224 = *__error();
    v225 = _SILogForLogForCategory(20);
    if (!os_log_type_enabled(v225, OS_LOG_TYPE_DEFAULT))
      goto LABEL_279;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a4;
    v226 = "[qid=%llu] {Prefix Match} Skipping query (Reason: no useful tokens)";
    goto LABEL_275;
  }
  v183 = objc_msgSend(v255, "count");
  if (v183 != objc_msgSend(v247, "count"))
  {
    v224 = *__error();
    v229 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v229, OS_LOG_TYPE_DEFAULT))
    {
      v230 = objc_msgSend(v255, "count");
      v231 = objc_msgSend(v247, "count");
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = a4;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v230;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)v283 = v231;
      v226 = "[qid=%llu] {Prefix Match} Skipping query (ERROR: token count mismatch <%lu,%lu>)";
      v227 = v229;
      v228 = 32;
      goto LABEL_278;
    }
LABEL_279:
    v260 = 0;
    goto LABEL_280;
  }
  if ((v184 & 1) == 0
  {
    PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs = 0u;
    unk_1EF1AD198 = 0u;
    dword_1EF1AD1A8 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<int,PhRankingInfo>::~unordered_map[abi:nn180100], &PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, &dword_1B8270000);
  }
  if (PhPrefixMatchRankingAttribs(void)::onceToken != -1)
    dispatch_once(&PhPrefixMatchRankingAttribs(void)::onceToken, &__block_literal_global_81);
  obja = -[__CFArray length](theArraya, "length");
  if (objc_msgSend(v255, "count"))
  {
    v260 = 0;
    v185 = 0;
    v186 = 0;
    while (1)
    {
      v187 = objc_msgSend((id)objc_msgSend(v255, "objectAtIndexedSubscript:", v186), "rangeValue");
      v189 = v187;
      v190 = v188;
      if (v187 == 0x7FFFFFFFFFFFFFFFLL || v187 + v188 > obja)
      {
        v197 = *__error();
        v198 = _SILogForLogForCategory(20);
        if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
        {
          v299.location = v189;
          v299.length = v190;
          v199 = NSStringFromRange(v299);
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = a4;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v186;
          *(_WORD *)&buf[22] = 2112;
          *(_QWORD *)v283 = v199;
          _os_log_impl(&dword_1B8270000, v198, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Skipping token: %lu, range: :%@ (ERROR: range is out of bounds)", buf, 0x20u);
        }
      }
      else
      {
        v191 = (void *)-[__CFArray substringWithRange:](theArraya, "substringWithRange:", v187, v188);
        if (objc_msgSend(v191, "length"))
          v191 = (void *)objc_msgSend(v191, "stringByTrimmingCharactersInSet:", a3);
        if (objc_msgSend(v191, "length"))
        {
          v192 = (char *)objc_msgSend(v191, "UTF8String");
          if (v192)
          {
            v193 = objc_msgSend((id)objc_msgSend(v247, "objectAtIndexedSubscript:", v186), "intValue");
            v195 = *((_QWORD *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs + 1);
            v194 = PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs;
            if (std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::find<int>(PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, *((unint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs + 1), v193))
            {
              if ((v244 & 1) != 0)
              {
                v196 = 0;
              }
              else
              {
                v196 = v186 == objc_msgSend(v255, "count") - 1;
                v195 = *((_QWORD *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs + 1);
                v194 = PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs;
              }
              v206 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::find<int>(v194, v195, v193);
              if (!v206)
                abort();
              v207 = v206;
              v208 = *((float *)v206 + 6);
              v254 = *__error();
              v209 = _SILogForLogForCategory(20);
              v210 = os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT);
              if (v208 <= 0.0)
              {
                if (v210)
                {
                  v304.location = v189;
                  v304.length = v190;
                  v218 = NSStringFromRange(v304);
                  *(_DWORD *)buf = 134218754;
                  *(_QWORD *)&buf[4] = a4;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v186;
                  *(_WORD *)&buf[22] = 2112;
                  *(_QWORD *)v283 = v218;
                  *(_WORD *)&v283[8] = 1024;
                  *(_DWORD *)&v283[10] = v193;
                  _os_log_impl(&dword_1B8270000, v209, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Skipping token: %lu, range:%@ (ERROR: attribute score is 0 for type: %d)", buf, 0x26u);
                }
                *__error() = v254;
                goto LABEL_244;
              }
              if (v196)
              {
                if (v210)
                {
                  v303.location = v189;
                  v303.length = v190;
                  v211 = NSStringFromRange(v303);
                  *(_DWORD *)buf = 134218754;
                  *(_QWORD *)&buf[4] = a4;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v186;
                  *(_WORD *)&buf[22] = 2112;
                  *(_QWORD *)v283 = v211;
                  *(_WORD *)&v283[8] = 1024;
                  *(_DWORD *)&v283[10] = v193;
                  _os_log_impl(&dword_1B8270000, v209, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Adding token: %lu, range:%@, type: %d, prefix: YES", buf, 0x26u);
                }
                *__error() = v254;
                v212 = v207[4];
                v213 = v207[5];
                if (v212 != v213)
                {
                  v214 = 0;
                  v215 = (uint64_t)v260;
                  do
                  {
                    v216 = (const char *)v212;
                    if (*(char *)(v212 + 23) < 0)
                      v216 = *(const char **)v212;
                    v217 = createQueryNode(v216, v192, 112, 1, -1, v208, 0.0);
                    v214 = makeOrNode((uint64_t)v214, (uint64_t)v217);
                    ++v185;
                    v212 += 24;
                  }
                  while (v212 != v213);
                  goto LABEL_270;
                }
              }
              else
              {
                if (v210)
                {
                  v305.location = v189;
                  v305.length = v190;
                  v219 = NSStringFromRange(v305);
                  *(_DWORD *)buf = 134218754;
                  *(_QWORD *)&buf[4] = a4;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v186;
                  *(_WORD *)&buf[22] = 2112;
                  *(_QWORD *)v283 = v219;
                  *(_WORD *)&v283[8] = 1024;
                  *(_DWORD *)&v283[10] = v193;
                  _os_log_impl(&dword_1B8270000, v209, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Adding token: %lu, range:%@, type: %d, prefix: NO", buf, 0x26u);
                }
                *__error() = v254;
                v220 = v207[4];
                v221 = v207[5];
                if (v220 != v221)
                {
                  v214 = 0;
                  v215 = (uint64_t)v260;
                  do
                  {
                    v222 = (const char *)v220;
                    if (*(char *)(v220 + 23) < 0)
                      v222 = *(const char **)v220;
                    v223 = createQueryNode(v222, v192, 112, 1, 0, v208, 0.0);
                    v214 = makeOrNode((uint64_t)v214, (uint64_t)v223);
                    ++v185;
                    v220 += 24;
                  }
                  while (v220 != v221);
                  goto LABEL_270;
                }
              }
              v214 = 0;
              v215 = (uint64_t)v260;
LABEL_270:
              v260 = makeAndNode(v215, (uint64_t)v214);
              goto LABEL_244;
            }
            v197 = *__error();
            v204 = _SILogForLogForCategory(20);
            if (os_log_type_enabled(v204, OS_LOG_TYPE_DEFAULT))
            {
              v302.location = v189;
              v302.length = v190;
              v205 = NSStringFromRange(v302);
              *(_DWORD *)buf = 134218754;
              *(_QWORD *)&buf[4] = a4;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v186;
              *(_WORD *)&buf[22] = 2112;
              *(_QWORD *)v283 = v205;
              *(_WORD *)&v283[8] = 1024;
              *(_DWORD *)&v283[10] = v193;
              _os_log_impl(&dword_1B8270000, v204, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Skipping token: %lu, range:%@ (Reason: not an important attribute type: %d)", buf, 0x26u);
            }
          }
          else
          {
            v197 = *__error();
            v202 = _SILogForLogForCategory(20);
            if (os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT))
            {
              v301.location = v189;
              v301.length = v190;
              v203 = NSStringFromRange(v301);
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = a4;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v186;
              *(_WORD *)&buf[22] = 2112;
              *(_QWORD *)v283 = v203;
              _os_log_impl(&dword_1B8270000, v202, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Skipping token: %lu, range: %@ (ERROR: UTF8 encoding failed)", buf, 0x20u);
            }
          }
        }
        else
        {
          v197 = *__error();
          v200 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
          {
            v300.location = v189;
            v300.length = v190;
            v201 = NSStringFromRange(v300);
            *(_DWORD *)buf = 134218498;
            *(_QWORD *)&buf[4] = a4;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v186;
            *(_WORD *)&buf[22] = 2112;
            *(_QWORD *)v283 = v201;
            _os_log_impl(&dword_1B8270000, v200, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Skipping token: %lu, range: %@ (ERROR: empty sub-query after trimming)", buf, 0x20u);
          }
        }
      }
      *__error() = v197;
LABEL_244:
      if (++v186 >= (unint64_t)objc_msgSend(v255, "count"))
        goto LABEL_284;
    }
  }
  v185 = 0;
  v260 = 0;
LABEL_284:
  v224 = *__error();
  v237 = _SILogForLogForCategory(20);
  if (os_log_type_enabled(v237, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a4;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v185;
    _os_log_impl(&dword_1B8270000, v237, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Prefix Match} Added %d nodes", buf, 0x12u);
  }
LABEL_280:
  *__error() = v224;
  v232 = makeOrNode((uint64_t)v265, (uint64_t)v260);
  v233 = makeOrNode((uint64_t)matched, (uint64_t)v232);
  if (v233)
  {
    v234 = (uint64_t)v233;
    v235 = PhRankingBoostTree();
    v233 = makeAndNode(v234, (uint64_t)v235);
  }
  return makeOrNode((uint64_t)v233, (uint64_t)v266);
}

uint64_t ___ZL28PhPopulateAllFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueES9_S9_S9__block_invoke(id *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  id *v9;

  result = objc_msgSend(a2, "count");
  if (result)
  {
    if (objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPFavoritedAction")))
    {
      v9 = a1 + 4;
      return objc_msgSend(*v9, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", a3, a4));
    }
    if (objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPMedia"))
      || objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPKind")))
    {
      v9 = a1 + 5;
      return objc_msgSend(*v9, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", a3, a4));
    }
    if (objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPTaggedPerson"))
      || objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPGroundedPerson")))
    {
      v9 = a1 + 6;
      return objc_msgSend(*v9, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", a3, a4));
    }
    result = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPDate"));
    if (result)
    {
      result = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPDescription"));
      if (result)
      {
        objc_msgSend(a1[7], "addObject:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPDescription")));
        v9 = a1 + 8;
        return objc_msgSend(*v9, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", a3, a4));
      }
    }
  }
  return result;
}

_QWORD *PhExactMatchTree(void *a1, void *a2, uint64_t a3, uint64_t a4, const char **a5, uint64_t a6)
{
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  NSObject *v22;
  const char *v23;
  _QWORD *v24;
  uint64_t v26;
  int v27;
  const char *v28;
  const char *QueryNode;
  NSObject *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE buf[12];
  __int16 v36;
  int v37;
  char v38;
  _BYTE v39[128];
  uint64_t v40;

  v11 = a1;
  v40 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend(a1, "length"))
  {
    v21 = *__error();
    v22 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a6;
      v23 = "[qid=%llu] {Exact Match} Skipping query (Reason: empty query)";
      goto LABEL_27;
    }
LABEL_28:
    v24 = 0;
    goto LABEL_29;
  }
  if (objc_msgSend(a2, "count"))
  {
    v11 = (void *)objc_msgSend(v11, "mutableCopy");
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v12 = (void *)objc_msgSend(a2, "reverseObjectEnumerator", 0);
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
    if (v13)
    {
      v14 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)v32 != v14)
            objc_enumerationMutation(v12);
          v16 = objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * i), "rangeValue");
          objc_msgSend(v11, "replaceCharactersInRange:withString:", v16, v17, &stru_1E6E3A6D8);
        }
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
      }
      while (v13);
    }
    if (!objc_msgSend(v11, "length"))
    {
      v21 = *__error();
      v22 = _SILogForLogForCategory(20);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a6;
        v23 = "[qid=%llu] {Exact Match} Skipping query (Reason: empty query after suggestion filtering)";
        goto LABEL_27;
      }
      goto LABEL_28;
    }
  }
  if (objc_msgSend(v11, "length"))
    v11 = (void *)objc_msgSend(v11, "stringByTrimmingCharactersInSet:", a3);
  if (!objc_msgSend(v11, "length"))
  {
    v21 = *__error();
    v22 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a6;
      v23 = "[qid=%llu] {Exact Match} Skipping query (Reason: empty query after removing special chars)";
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  v18 = (char *)objc_msgSend(v11, "UTF8String");
  if (!v18)
  {
    v21 = *__error();
    v22 = _SILogForLogForCategory(20);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a6;
      v23 = "[qid=%llu] {Exact Match} Skipping query (ERROR: UTF8 encoding of trimmed query failed)";
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  std::string::basic_string[abi:nn180100]<0>(buf, v18);
  v19 = isOptionalWord(buf);
  v20 = v19;
  if (v38 < 0)
  {
    operator delete(*(void **)buf);
    if (v20)
    {
LABEL_17:
      v21 = *__error();
      v22 = _SILogForLogForCategory(20);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a6;
        v23 = "[qid=%llu] {Exact Match} Skipping query (Reason: query is optional word)";
LABEL_27:
        _os_log_impl(&dword_1B8270000, v22, OS_LOG_TYPE_DEFAULT, v23, buf, 0xCu);
        goto LABEL_28;
      }
      goto LABEL_28;
    }
  }
  else if (v19)
  {
    goto LABEL_17;
  }
  PhExactMatchRankingAttribs();
  v26 = qword_1EF1AD158;
  if (qword_1EF1AD158)
  {
    v27 = 0;
    v24 = 0;
    do
    {
      v28 = (const char *)(v26 + 16);
      if (*(char *)(v26 + 39) < 0)
        v28 = *(const char **)v28;
      QueryNode = createQueryNode(v28, v18, 48, 1, 0, *(float *)(v26 + 40) + 100.0, 0.0);
      v24 = makeOrNode((uint64_t)v24, (uint64_t)QueryNode);
      ++v27;
      v26 = *(_QWORD *)v26;
    }
    while (v26);
  }
  else
  {
    v24 = 0;
    v27 = 0;
  }
  if (a4 == 1)
  {
    *a5 = createQueryNode("kMDItemTextContent", v18, 112, 1, 0, 100.0, 0.0);
    ++v27;
  }
  v21 = *__error();
  v30 = _SILogForLogForCategory(20);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a6;
    v36 = 1024;
    v37 = v27;
    _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {Exact Match} Added %d nodes", buf, 0x12u);
  }
LABEL_29:
  *__error() = v21;
  return v24;
}

_QWORD *PhRankingTreeFromStr(char *a1, float a2, int *a3)
{
  _QWORD *query_node_with_ann;
  _QWORD v7[5];
  float v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  _QWORD v13[5];

  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  query_node_with_ann = db_make_query_node_with_ann(a1, 0);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZL20PhRankingTreeFromStrPKcfPi_block_invoke;
  v7[3] = &unk_1E6E38278;
  v8 = a2;
  v7[4] = &v9;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 0x40000000;
  v13[2] = __db_query_tree_apply_block_block_invoke;
  v13[3] = &unk_1E6E377F8;
  v13[4] = v7;
  db_query_tree_apply_block_with_meta(query_node_with_ann, (uint64_t)v13, 0);
  *a3 += *((_DWORD *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return query_node_with_ann;
}

BOOL _containsOnlyCharsInCharset(NSString *a1, NSCharacterSet *a2)
{
  unint64_t v4;
  _BOOL8 v5;

  if (!-[NSString length](a1, "length"))
    return 1;
  v4 = 0;
  do
  {
    v5 = -[NSCharacterSet characterIsMember:](a2, "characterIsMember:", -[NSString characterAtIndex:](a1, "characterAtIndex:", v4));
    if (!v5)
      break;
    ++v4;
  }
  while (v4 < -[NSString length](a1, "length"));
  return v5;
}

_QWORD *PhRankingBoostTree(void)
{
  const char *QueryNode;
  const char *v1;
  const char *v2;
  _QWORD *v3;
  const char *v4;
  const char *v5;
  _QWORD *v6;
  const char *v7;
  const char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  QueryNode = createQueryNode("kMDItemPhotosFavorited", "1", 0, 4, 0, 1.13, 1.0);
  if (CurrentYear(void)::onceToken[0] != -1)
    dispatch_once(CurrentYear(void)::onceToken, &__block_literal_global_101);
  v1 = createQueryNode("_kMDItemContentCreationDateYear", (char *)CurrentYear(void)::currYear, 0, 4, 0, 1.1, 1.0);
  if (PhThreeYearAgo(void)::onceToken[0] != -1)
    dispatch_once(PhThreeYearAgo(void)::onceToken, &__block_literal_global_105);
  v2 = createQueryNode("_kMDItemContentCreationDateYear", (char *)PhThreeYearAgo(void)::oldYear, 0, 4, 0, 1.05, 1.0);
  v3 = makeOrNode((uint64_t)v1, (uint64_t)v2);
  v4 = createQueryNode("kMDItemAestheticScore", "0.5", 0, 4, 0, 1.05, 1.0);
  v5 = createQueryNode("kMDItemAestheticScore", "0.2", 0, 4, 0, 1.02, 1.0);
  v6 = makeOrNode((uint64_t)v4, (uint64_t)v5);
  v7 = createQueryNode("kMDItemCurationScore", "0.7", 0, 4, 0, 1.07, 1.0);
  v8 = createQueryNode("kMDItemCurationScore", "0.4", 0, 4, 0, 1.04, 1.0);
  v9 = makeOrNode((uint64_t)v7, (uint64_t)v8);
  v10 = makeAndNode((uint64_t)QueryNode, (uint64_t)v3);
  v11 = makeAndNode((uint64_t)v6, (uint64_t)v9);
  return makeAndNode((uint64_t)v10, (uint64_t)v11);
}

uint64_t ___ZL17PhotosRankingTreePK10__CFStringPK20__CFAttributedStringPK14__CFDictionaryS7_y_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 + 16);
    if (v2)
      *(_DWORD *)(v2 + 52) = *(_DWORD *)(a1 + 32);
  }
  return a2;
}

void PhPopulateNodesFromU2Parse(const __CFDictionary *a1, void *a2, void *a3, char a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t a8)
{
  int v11;
  NSObject *v12;
  const void *v13;
  void *Value;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  const __CFAllocator *v23;
  CFIndex Count;
  CFIndex v25;
  const __CFDictionary *ValueAtIndex;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  NSUInteger v32;
  NSUInteger v33;
  NSUInteger v34;
  int v35;
  NSObject *v36;
  NSString *v37;
  NSObject *v38;
  uint64_t v39;
  NSUInteger v40;
  const void *v41;
  const __CFString *v42;
  CFIndex v43;
  int v44;
  int v45;
  UniChar CharacterAtIndex;
  int IsCharacterMember;
  int v48;
  int v49;
  uint64_t v50;
  NSUInteger v51;
  uint64_t v52;
  int v53;
  NSObject *v54;
  NSObject *v55;
  NSObject *v56;
  NSObject *v57;
  int v58;
  NSObject *v59;
  unint64_t v60;
  int v61;
  NSObject *v62;
  _OWORD *v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  NSUInteger v75;
  int v76;
  NSObject *v77;
  uint64_t v78;
  NSUInteger v79;
  int v80;
  NSObject *v81;
  NSObject *v82;
  const void *v83;
  void *v84;
  const void *v85;
  void *v86;
  uint64_t v87;
  unint64_t v88;
  double v89;
  double v90;
  int v91;
  int v92;
  int v93;
  NSObject *v94;
  NSObject *v95;
  NSObject *v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  _BOOL4 v100;
  int v101;
  NSObject *v102;
  const void *v103;
  const void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t i;
  void *v109;
  int v110;
  int v111;
  NSObject *v112;
  int v113;
  NSObject *v114;
  int v115;
  NSObject *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  void *v121;
  uint64_t v122;
  int v123;
  NSObject *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  _BOOL4 v132;
  _BOOL4 v133;
  int v134;
  NSObject *v135;
  int v136;
  NSObject *v137;
  uint64_t v138;
  _QWORD *v139;
  const char *v140;
  const char *v141;
  int v142;
  const char *v143;
  const char *QueryNode;
  const char *v145;
  _QWORD *v146;
  const char *v147;
  void *v148;
  char *v149;
  _QWORD *query_node_with_ann;
  const char *v151;
  uint64_t v152;
  void *v153;
  char *v154;
  _QWORD *v155;
  int v156;
  NSObject *v157;
  void *v158;
  char *v159;
  _QWORD *v160;
  _QWORD *v161;
  void *v162;
  char *v163;
  _QWORD *v164;
  int v165;
  NSObject *v166;
  void *v167;
  char *v168;
  _QWORD *v169;
  int v170;
  NSObject *v171;
  void *v172;
  char *v173;
  _QWORD *v174;
  int v175;
  NSObject *v176;
  const char *v177;
  _QWORD *v178;
  const char *v179;
  int v180;
  NSObject *v181;
  const char *v182;
  int v183;
  NSObject *v184;
  const char *v185;
  int v186;
  NSObject *v187;
  const char *v188;
  int v189;
  NSObject *v190;
  const char *v191;
  _QWORD *v192;
  const char *v193;
  void *v194;
  char *v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  int64x2_t v201;
  unint64_t v202;
  unint64_t v203;
  char *v204;
  uint64_t v205;
  void *v206;
  BOOL v207;
  CFIndex v208;
  void *v209;
  const __CFCharacterSet *v211;
  void *v212;
  void *v215;
  void *v216;
  uint64_t v217;
  void *v219;
  char v220;
  const __CFCharacterSet *theSet;
  CFIndex v222;
  _QWORD *v223;
  const __CFArray *theArray;
  CFArrayRef theArraya;
  void *v226;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  const __CFString *v232;
  unint64_t v233;
  int64x2_t v234;
  _QWORD v235[2];
  unint64_t v236;
  unint64_t v237;
  uint64_t *v238;
  uint8_t v239[128];
  _BYTE buf[56];
  _BYTE v241[24];
  uint64_t v242;
  NSRange v243;
  NSRange v244;
  NSRange v245;
  NSRange v246;
  NSRange v247;
  NSRange v248;
  NSRange v249;
  NSRange v250;
  NSRange v251;

  v242 = *MEMORY[0x1E0C80C00];
  v11 = *__error();
  v12 = _SILogForLogForCategory(19);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a8;
    _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Using U2 output for creating ann filter and unigram node", buf, 0xCu);
  }
  *__error() = v11;
  v13 = (const void *)getkQPQUOutputTokenInfoKey();
  theArray = (const __CFArray *)CFDictionaryGetValue(a1, v13);
  Value = (void *)CFDictionaryGetValue(a1, CFSTR("attributedParse"));
  v226 = (void *)objc_msgSend(Value, "string");
  if (!v226 || !objc_msgSend(v226, "length"))
  {
    v115 = *__error();
    v116 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a8;
      _os_log_impl(&dword_1B8270000, v116, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Skipping adding nodes for the query (Reason: query is empty)", buf, 0xCu);
    }
    *__error() = v115;
    return;
  }
  v216 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v219 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v215 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v212 = (void *)objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v15 = objc_msgSend(Value, "length");
  v16 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZL30PhPopulateSomeFiltersFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueES5_S9__block_invoke;
  *(_QWORD *)&buf[24] = &unk_1E6E382E8;
  *(_QWORD *)&buf[32] = v216;
  *(_QWORD *)&buf[40] = v219;
  *(_QWORD *)&buf[48] = v215;
  *(_QWORD *)v241 = v212;
  objc_msgSend(Value, "enumerateAttributesInRange:options:usingBlock:", 0, v15, 0, buf);
  if (objc_msgSend(v219, "count"))
  {
    v17 = *__error();
    v18 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = objc_msgSend(v219, "count");
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = a8;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v19;
      _os_log_impl(&dword_1B8270000, v18, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Populated %lu date filters from U2 parse", buf, 0x16u);
    }
    *__error() = v17;
  }
  if (objc_msgSend(v212, "count"))
  {
    v20 = *__error();
    v21 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = objc_msgSend(v212, "count");
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = a8;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v22;
      _os_log_impl(&dword_1B8270000, v21, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Populated %lu people filters from U2 parse", buf, 0x16u);
    }
    *__error() = v20;
  }
  if (!objc_msgSend(v216, "count"))
  {
    if (CFDictionaryContainsKey(a1, CFSTR("attributedParses")))
    {
      v120 = (void *)CFDictionaryGetValue(a1, CFSTR("attributedParses"));
      if ((unint64_t)objc_msgSend(v120, "count") >= 2)
      {
        v121 = (void *)objc_msgSend(v120, "objectAtIndexedSubscript:", 1);
        v122 = objc_msgSend(v121, "length");
        *(_QWORD *)buf = v16;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZL29PhPopulateDateFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueE_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E6E38250;
        *(_QWORD *)&buf[32] = v216;
        *(_QWORD *)&buf[40] = v219;
        objc_msgSend(v121, "enumerateAttributesInRange:options:usingBlock:", 0, v122, 0, buf);
        if (objc_msgSend(v219, "count"))
        {
          v123 = *__error();
          v124 = _SILogForLogForCategory(20);
          if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
          {
            v125 = objc_msgSend(v219, "count");
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = a8;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v125;
            _os_log_impl(&dword_1B8270000, v124, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Populated %lu date filters from QP parse", buf, 0x16u);
          }
          *__error() = v123;
        }
      }
    }
  }
  PhRetrievalAttribs();
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  theSet = CFCharacterSetCreateWithCharactersInString(v23, CFSTR("0123456789"));
  v233 = 0;
  v234 = 0uLL;
  Count = CFArrayGetCount(theArray);
  if (Count <= 0)
  {
    v220 = 1;
    v117 = v233;
    goto LABEL_176;
  }
  v25 = 0;
  v207 = 0;
  v222 = Count;
  v208 = Count - 1;
  v220 = 1;
  v217 = -1;
  v209 = a3;
  do
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v25);
    v27 = (const void *)getkQPQUOutputTokenRangeKey();
    if (!CFDictionaryContainsKey(ValueAtIndex, v27)
      || (v28 = (const void *)getkQPQUOutputTokenArgIdsKey(), !CFDictionaryContainsKey(ValueAtIndex, v28))
      || (v29 = (const void *)getkQPQUOutputTokenArgScoresKey(), !CFDictionaryContainsKey(ValueAtIndex, v29))
      || (v30 = (const void *)getkQPQUOutputTokenKey(), !CFDictionaryContainsKey(ValueAtIndex, v30)))
    {
      v35 = *__error();
      v38 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v25;
        _os_log_impl(&dword_1B8270000, v38, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (ERROR: token info is missing essential keys)", buf, 0x16u);
      }
      goto LABEL_26;
    }
    v31 = (const void *)getkQPQUOutputTokenRangeKey();
    v32 = objc_msgSend((id)CFDictionaryGetValue(ValueAtIndex, v31), "rangeValue");
    v34 = v33;
    if (v32 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v35 = *__error();
      v36 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        v243.location = 0x7FFFFFFFFFFFFFFFLL;
        v243.length = v34;
        v37 = NSStringFromRange(v243);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v25;
        *(_WORD *)&buf[22] = 2112;
        *(_QWORD *)&buf[24] = v37;
        _os_log_impl(&dword_1B8270000, v36, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (ERROR: invalid range: %@)", buf, 0x20u);
      }
      goto LABEL_26;
    }
    if (objc_msgSend(a2, "count"))
    {
      v39 = 0;
      while (1)
      {
        v248.location = objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", v39), "rangeValue");
        v248.length = v40;
        v244.location = v32;
        v244.length = v34;
        if (NSIntersectionRange(v244, v248).length)
          break;
        if (++v39 >= (unint64_t)objc_msgSend(a2, "count"))
          goto LABEL_33;
      }
      if (objc_msgSend(a3, "count"))
      {
        v50 = 0;
        while (1)
        {
          v249.location = objc_msgSend((id)objc_msgSend(a3, "objectAtIndexedSubscript:", v50), "rangeValue");
          v249.length = v51;
          v245.location = v32;
          v245.length = v34;
          if (NSIntersectionRange(v245, v249).length)
            break;
          if (++v50 >= (unint64_t)objc_msgSend(a3, "count"))
            goto LABEL_60;
        }
        ++*a7;
      }
LABEL_60:
      v35 = *__error();
      v57 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v25;
        _os_log_impl(&dword_1B8270000, v57, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (Reason: Its a filter token)", buf, 0x16u);
      }
LABEL_26:
      *__error() = v35;
      goto LABEL_27;
    }
LABEL_33:
    v41 = (const void *)getkQPQUOutputTokenKey();
    v42 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, v41);
    v232 = v42;
    if (!v42)
    {
      v35 = *__error();
      v56 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v25;
        _os_log_impl(&dword_1B8270000, v56, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (ERROR: Token is null)", buf, 0x16u);
      }
      goto LABEL_26;
    }
    v43 = 0;
    v44 = 1;
    v45 = 1;
    while (v43 < CFStringGetLength(v42))
    {
      CharacterAtIndex = CFStringGetCharacterAtIndex(v42, v43);
      if (CFCharacterSetIsCharacterMember(theSet, CharacterAtIndex))
      {
        v44 = 0;
      }
      else
      {
        IsCharacterMember = CFCharacterSetIsCharacterMember(v211, CharacterAtIndex);
        v45 = 0;
        v48 = 0;
        v49 = 0;
        if (!IsCharacterMember)
          goto LABEL_46;
      }
      ++v43;
    }
    v48 = v44;
    v49 = v45;
LABEL_46:
    if ((uint64_t)(v234.i64[0] - v233) < 1
      || (v52 = -1 - 0x3333333333333333 * ((uint64_t)(v234.i64[0] - v233) >> 4), *(_QWORD *)(v233 + 80 * v52 + 8) != v32))
    {
      a3 = v209;
      if (v48)
      {
        v35 = *__error();
        v55 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a8;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v25;
          _os_log_impl(&dword_1B8270000, v55, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (Reason: It has only special chars)", buf, 0x16u);
        }
        goto LABEL_26;
      }
LABEL_67:
      v61 = *__error();
      v62 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v25;
        _os_log_impl(&dword_1B8270000, v62, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu added as new token", buf, 0x16u);
      }
      *__error() = v61;
      *(_OWORD *)&v241[8] = 0u;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)&buf[24] = -1;
      *(_QWORD *)&buf[32] = -1;
      *(_OWORD *)&buf[40] = 0u;
      *(_OWORD *)v241 = 0u;
      *(_DWORD *)&v241[16] = 1065353216;
      *(_QWORD *)buf = v32;
      *(_QWORD *)&buf[8] = v32 + v34;
      v63 = (_OWORD *)v234.i64[0];
      if (v234.i64[0] >= (unint64_t)v234.i64[1])
      {
        v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v234.i64[0] - v233) >> 4);
        v68 = v67 + 1;
        if (v67 + 1 > 0x333333333333333)
          abort();
        if (0x999999999999999ALL * ((uint64_t)(v234.i64[1] - v233) >> 4) > v68)
          v68 = 0x999999999999999ALL * ((uint64_t)(v234.i64[1] - v233) >> 4);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v234.i64[1] - v233) >> 4) >= 0x199999999999999)
          v69 = 0x333333333333333;
        else
          v69 = v68;
        v238 = &v234.i64[1];
        if (v69)
          v69 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<PhTokenInfo>>(v69);
        else
          v70 = 0;
        v71 = v69 + 80 * v67;
        v235[0] = v69;
        v235[1] = v71;
        v236 = v71;
        v237 = v69 + 80 * v70;
        v72 = *(_OWORD *)buf;
        v73 = *(_OWORD *)&buf[16];
        *(_QWORD *)(v71 + 32) = *(_QWORD *)&buf[32];
        *(_OWORD *)v71 = v72;
        *(_OWORD *)(v71 + 16) = v73;
        std::unordered_set<int>::unordered_set(v71 + 40, (uint64_t)&buf[40]);
        v236 += 80;
        std::vector<PhTokenInfo>::__swap_out_circular_buffer((uint64_t *)&v233, v235);
        v66 = v234.i64[0];
        std::__split_buffer<PhTokenInfo>::~__split_buffer((uint64_t)v235);
      }
      else
      {
        v64 = *(_OWORD *)buf;
        v65 = *(_OWORD *)&buf[16];
        *(_QWORD *)(v234.i64[0] + 32) = *(_QWORD *)&buf[32];
        *v63 = v64;
        v63[1] = v65;
        std::unordered_set<int>::unordered_set((uint64_t)v63 + 40, (uint64_t)&buf[40]);
        v66 = (uint64_t)(v63 + 5);
      }
      v234.i64[0] = v66;
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table((uint64_t)&buf[40]);
      goto LABEL_82;
    }
    a3 = v209;
    if (v48)
    {
      v53 = *__error();
      v54 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v25;
        _os_log_impl(&dword_1B8270000, v54, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Adjacent token %lu marks prev-token as prefix (Reason: It has only special chars)", buf, 0x16u);
      }
      *__error() = v53;
      *(_BYTE *)(v233 + 80 * v52 + 17) = 1;
      v220 &= v25 != v208;
      goto LABEL_27;
    }
    if (v49 == 0 && !v207)
      goto LABEL_67;
    v58 = *__error();
    v59 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = a8;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v25;
      _os_log_impl(&dword_1B8270000, v59, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Adjacent token %lu combined with prev-token", buf, 0x16u);
    }
    *__error() = v58;
    v60 = v233 + 80 * v52;
    *(_BYTE *)(v60 + 16) = 1;
    *(_QWORD *)(v60 + 8) += v34;
LABEL_82:
    v207 = v49 != 0;
    if (v25 == v208)
    {
      v220 = 0;
      *(_BYTE *)(v234.i64[0] - 63) = 1;
    }
    if (objc_msgSend(v219, "count"))
    {
      v74 = 0;
      while (1)
      {
        v250.location = objc_msgSend((id)objc_msgSend(v219, "objectAtIndexedSubscript:", v74), "rangeValue");
        v250.length = v75;
        v246.location = v32;
        v246.length = v34;
        if (NSIntersectionRange(v246, v250).length)
          break;
        if (++v74 >= (unint64_t)objc_msgSend(v219, "count"))
          goto LABEL_92;
      }
      v76 = *__error();
      v77 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v25;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v74;
        _os_log_impl(&dword_1B8270000, v77, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu has a date parse: %lu", buf, 0x20u);
      }
      *__error() = v76;
      *(_QWORD *)(v234.i64[0] - 56) = v74;
    }
LABEL_92:
    if (objc_msgSend(v212, "count"))
    {
      v78 = 0;
      while (1)
      {
        v251.location = objc_msgSend((id)objc_msgSend(v212, "objectAtIndexedSubscript:", v78), "rangeValue");
        v251.length = v79;
        v247.location = v32;
        v247.length = v34;
        if (NSIntersectionRange(v247, v251).length)
          break;
        if (++v78 >= (unint64_t)objc_msgSend(v212, "count"))
          goto LABEL_100;
      }
      v80 = *__error();
      v81 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v25;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v78;
        _os_log_impl(&dword_1B8270000, v81, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu has a person parse: %lu", buf, 0x20u);
      }
      *__error() = v80;
      *(_QWORD *)(v234.i64[0] - 48) = v78;
    }
LABEL_100:
    if (*(_BYTE *)(v234.i64[0] - 64))
    {
      v35 = *__error();
      v82 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v25;
        _os_log_impl(&dword_1B8270000, v82, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu is concat token, skipping U2's predictions for it", buf, 0x16u);
      }
      goto LABEL_26;
    }
    v83 = (const void *)getkQPQUOutputTokenArgIdsKey();
    v84 = (void *)CFDictionaryGetValue(ValueAtIndex, v83);
    v85 = (const void *)getkQPQUOutputTokenArgScoresKey();
    v86 = (void *)CFDictionaryGetValue(ValueAtIndex, v85);
    if (!objc_msgSend(v84, "count"))
    {
      v35 = *__error();
      v96 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v25;
        _os_log_impl(&dword_1B8270000, v96, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (ERROR: No U2 parse for the token)", buf, 0x16u);
      }
      goto LABEL_26;
    }
    v87 = objc_msgSend(v84, "count");
    if (v87 != objc_msgSend(v86, "count"))
    {
      v35 = *__error();
      v97 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
      {
        v98 = objc_msgSend(v84, "count");
        v99 = objc_msgSend(v86, "count");
        *(_DWORD *)buf = 134218752;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v25;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v98;
        *(_WORD *)&buf[32] = 2048;
        *(_QWORD *)&buf[34] = v99;
        _os_log_impl(&dword_1B8270000, v97, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu skipped (ERROR: tokIds.count(%lu) != tokIdsScore.count(%lu))", buf, 0x2Au);
      }
      goto LABEL_26;
    }
    v88 = 0;
    v206 = v86;
    while (v88 < objc_msgSend(v84, "count", v206))
    {
      objc_msgSend((id)objc_msgSend(v86, "objectAtIndexedSubscript:", v88), "doubleValue");
      v90 = v89;
      if (v89 < 0.200000003)
        break;
      v91 = objc_msgSend((id)objc_msgSend(v84, "objectAtIndexedSubscript:", v88), "intValue");
      v92 = v91;
      if (v91 > 7)
      {
        if (v91 == 8 || v91 == 21)
          goto LABEL_127;
      }
      else
      {
        if (!v91)
        {
          if (v90 >= 0.5)
            goto LABEL_127;
          goto LABEL_128;
        }
        if (v91 == 1)
          goto LABEL_127;
      }
      if (v91 == 10 && v90 >= 0.400000006)
      {
        v93 = *__error();
        v94 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = a8;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v25;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 10;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v90;
          _os_log_impl(&dword_1B8270000, v94, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Location token %lu added with tokId: %d (Reason: It has high conf: %f)", buf, 0x26u);
        }
LABEL_126:
        *__error() = v93;
        v86 = v206;
LABEL_127:
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v234.i64[0] - 40, v92, v92);
        goto LABEL_128;
      }
      if (v91 == 2 && v90 >= 0.25)
      {
        v93 = *__error();
        v95 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218752;
          *(_QWORD *)&buf[4] = a8;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v25;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = 2;
          *(_WORD *)&buf[28] = 2048;
          *(double *)&buf[30] = v90;
          _os_log_impl(&dword_1B8270000, v95, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Person token %lu added with tokId: %d (Reason: It has high conf: %f)", buf, 0x26u);
        }
        goto LABEL_126;
      }
      if (((v91 - 3) < 2 || v91 == 36) && v217 == -1)
        v217 = -1 - 0x3333333333333333 * ((uint64_t)(v234.i64[0] - v233) >> 4);
LABEL_128:
      ++v88;
    }
    utf8QueryString((const __CFString **)buf, (uint64_t)&v232, 1, 0);
    v100 = isRelationWord(buf);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    if (v100)
    {
      v101 = *__error();
      v102 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v25;
        _os_log_impl(&dword_1B8270000, v102, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu is a relationship token as per vocab", buf, 0x16u);
      }
      *__error() = v101;
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v234.i64[0] - 40, 2, 2);
    }
    v103 = (const void *)getkQPQUOutputSpanTypesKey();
    if (CFDictionaryContainsKey(ValueAtIndex, v103))
    {
      v104 = (const void *)getkQPQUOutputSpanTypesKey();
      v105 = (void *)CFDictionaryGetValue(ValueAtIndex, v104);
      v230 = 0u;
      v231 = 0u;
      v228 = 0u;
      v229 = 0u;
      v106 = objc_msgSend(v105, "countByEnumeratingWithState:objects:count:", &v228, v239, 16);
      if (v106)
      {
        v107 = *(_QWORD *)v229;
        while (1)
        {
          for (i = 0; i != v106; ++i)
          {
            if (*(_QWORD *)v229 != v107)
              objc_enumerationMutation(v105);
            v109 = *(void **)(*((_QWORD *)&v228 + 1) + 8 * i);
            if ((objc_msgSend(v109, "isEqualToString:", CFSTR("Person")) & 1) != 0)
            {
              v110 = 2;
LABEL_155:
              v111 = *__error();
              v112 = _SILogForLogForCategory(19);
              if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 134218754;
                *(_QWORD *)&buf[4] = a8;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v25;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = v110;
                *(_WORD *)&buf[28] = 2112;
                *(_QWORD *)&buf[30] = v109;
                _os_log_impl(&dword_1B8270000, v112, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu added with tokID: %d (Reason: It has %@ span)", buf, 0x26u);
              }
              *__error() = v111;
              std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v234.i64[0] - 40, v110, v110);
              continue;
            }
            if ((objc_msgSend(v109, "isEqualToString:", CFSTR("Location")) & 1) != 0)
            {
              v110 = 10;
              goto LABEL_155;
            }
            v113 = *__error();
            v114 = _SILogForLogForCategory(19);
            if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218498;
              *(_QWORD *)&buf[4] = a8;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v25;
              *(_WORD *)&buf[22] = 2112;
              *(_QWORD *)&buf[24] = v109;
              _os_log_impl(&dword_1B8270000, v114, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Token %lu has unsupported span: %@, skipping it", buf, 0x20u);
            }
            *__error() = v113;
          }
          v106 = objc_msgSend(v105, "countByEnumeratingWithState:objects:count:", &v228, v239, 16);
          if (!v106)
          {
            a3 = v209;
            break;
          }
        }
      }
    }
LABEL_27:
    ++v25;
  }
  while (v25 != v222);
  v117 = v233;
  if (v217 == -1)
  {
LABEL_176:
    v118 = v234.i64[0];
    v119 = 0xCCCCCCCCCCCCCCCDLL * ((v234.i64[0] - v117) >> 4);
    v217 = v119;
    goto LABEL_177;
  }
  v118 = v234.i64[0];
  v119 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v234.i64[0] - v233) >> 4);
LABEL_177:
  *a7 += v119;
  if (v117 == v118)
    goto LABEL_292;
  v223 = 0;
  v126 = -1;
  v127 = -1;
  theArraya = (CFArrayRef)v118;
  do
  {
    v128 = v127;
    v129 = (char *)objc_msgSend((id)objc_msgSend(v226, "substringWithRange:", *(_QWORD *)v117, *(_QWORD *)(v117 + 8) - *(_QWORD *)v117), "UTF8String");
    ++v127;
    if (!v129)
    {
      v136 = *__error();
      v137 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v127;
        _os_log_impl(&dword_1B8270000, v137, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Search token %ld skipped (ERROR: UTF8 encoding of token failed)", buf, 0x16u);
      }
      *__error() = v136;
      goto LABEL_282;
    }
    v130 = -2 - 0x3333333333333333 * ((uint64_t)(v234.i64[0] - v233) >> 4);
    if ((v128 != v130) | v220 & 1)
    {
      if (!(*(unsigned __int8 *)(v117 + 16) | *(unsigned __int8 *)(v117 + 17))
        && std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((_QWORD *)(v117 + 40), 0))
      {
LABEL_185:
        v134 = *__error();
        v135 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a8;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v127;
          _os_log_impl(&dword_1B8270000, v135, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} Search token %ld skipped (Reason: It is optional)", buf, 0x16u);
        }
        *__error() = v134;
LABEL_188:
        --*a7;
        goto LABEL_282;
      }
      v131 = (char *)std::string::basic_string[abi:nn180100]<0>(buf, v129);
      v132 = isOptionalWord(v131);
      v133 = v132;
      if ((buf[23] & 0x80000000) != 0)
      {
        operator delete(*(void **)buf);
        if (v133)
          goto LABEL_185;
      }
      else if (v132)
      {
        goto LABEL_185;
      }
    }
    v138 = qword_1EF1AD0B0;
    v139 = 0;
    if (*(_BYTE *)(v117 + 17))
    {
      while (v138)
      {
        v143 = (const char *)(v138 + 16);
        if (*(char *)(v138 + 39) < 0)
          v143 = *(const char **)v143;
        QueryNode = createQueryNode(v143, v129, 112, 1, -1, 0.0, 0.0);
        v139 = makeOrNode((uint64_t)v139, (uint64_t)QueryNode);
        v138 = *(_QWORD *)v138;
      }
      if (v127 >= v217)
      {
        v142 = -1;
        goto LABEL_206;
      }
    }
    else
    {
      if (qword_1EF1AD0B0)
      {
        do
        {
          v140 = (const char *)(v138 + 16);
          if (*(char *)(v138 + 39) < 0)
            v140 = *(const char **)v140;
          v141 = createQueryNode(v140, v129, 112, 1, 0, 0.0, 0.0);
          v139 = makeOrNode((uint64_t)v139, (uint64_t)v141);
          v138 = *(_QWORD *)v138;
        }
        while (v138);
      }
      if (v127 >= v217)
      {
        v142 = 0;
LABEL_206:
        v145 = createQueryNode("kMDItemPhotosSharedLibraryContributorsNames", v129, 112, 1, v142, 0.0, 0.0);
        v146 = makeOrNode((uint64_t)v139, (uint64_t)v145);
        v147 = createQueryNode("kMDItemPhotosSharedLibraryContributorsNamesAlternatives", v129, 112, 1, v142, 0.0, 0.0);
        v139 = makeOrNode((uint64_t)v146, (uint64_t)v147);
      }
    }
    if (*(_QWORD *)(v117 + 32) != -1)
    {
      v148 = (void *)objc_msgSend(v215, "objectAtIndexedSubscript:");
      if (objc_msgSend(v148, "length") && (v149 = (char *)objc_msgSend(v148, "UTF8String")) != 0)
        query_node_with_ann = db_make_query_node_with_ann(v149, 0);
      else
        query_node_with_ann = 0;
      v139 = makeOrNode((uint64_t)v139, (uint64_t)query_node_with_ann);
    }
    if (std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((_QWORD *)(v117 + 40), 21))
    {
      v151 = createQueryNode("kMDItemPhotosFavorited", "1", 0, 1, 0, 0.0, 0.0);
      v139 = makeOrNode((uint64_t)v139, (uint64_t)v151);
    }
    if (v223)
    {
      if (v126 < 0 || (v152 = *(_QWORD *)(v233 + 80 * v126 + 24), v152 == -1))
      {
        v156 = *__error();
        v157 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = a8;
          _os_log_impl(&dword_1B8270000, v157, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {U2} ERROR: Matching unexpected condition guard", buf, 0xCu);
        }
        *__error() = v156;
      }
      else
      {
        if (v152 == *(_QWORD *)(v117 + 24))
        {
          v223 = makeAndNode((uint64_t)v223, (uint64_t)v139);
          if (v128 != v130)
            goto LABEL_235;
          v153 = (void *)objc_msgSend(v216, "objectAtIndexedSubscript:", *(_QWORD *)(v117 + 24));
          if (objc_msgSend(v153, "length") && (v154 = (char *)objc_msgSend(v153, "UTF8String")) != 0)
            v155 = db_make_query_node_with_ann(v154, 0);
          else
            v155 = 0;
          v139 = makeOrNode((uint64_t)v223, (uint64_t)v155);
          v223 = 0;
          v126 = v128 + 1;
          goto LABEL_241;
        }
        v158 = (void *)objc_msgSend(v216, "objectAtIndexedSubscript:");
        if (objc_msgSend(v158, "length") && (v159 = (char *)objc_msgSend(v158, "UTF8String")) != 0)
          v160 = db_make_query_node_with_ann(v159, 0);
        else
          v160 = 0;
        v161 = makeOrNode((uint64_t)v223, (uint64_t)v160);
        v223 = 0;
        *a6 = (uint64_t)makeAndNode(*a6, (uint64_t)v161);
      }
    }
    else
    {
      v223 = 0;
    }
    if (*(_QWORD *)(v117 + 24) != -1)
    {
      if (v128 != v130)
      {
        v223 = v139;
LABEL_235:
        v126 = v128 + 1;
        goto LABEL_242;
      }
      v162 = (void *)objc_msgSend(v216, "objectAtIndexedSubscript:");
      if (objc_msgSend(v162, "length") && (v163 = (char *)objc_msgSend(v162, "UTF8String")) != 0)
        v164 = db_make_query_node_with_ann(v163, 0);
      else
        v164 = 0;
      v139 = makeOrNode((uint64_t)v139, (uint64_t)v164);
    }
LABEL_241:
    *a6 = (uint64_t)makeAndNode(*a6, (uint64_t)v139);
LABEL_242:
    if ((a4 & 1) == 0 && !*(_BYTE *)(v117 + 16))
    {
      if (*(_QWORD *)(v117 + 24) == -1)
        goto LABEL_250;
      v165 = *__error();
      v166 = _SILogForLogForCategory(19);
      if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a8;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v127;
        _os_log_impl(&dword_1B8270000, v166, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added date filter for token %lu", buf, 0x16u);
      }
      *__error() = v165;
      v167 = (void *)objc_msgSend(v216, "objectAtIndexedSubscript:", *(_QWORD *)(v117 + 24));
      if (objc_msgSend(v167, "length") && (v168 = (char *)objc_msgSend(v167, "UTF8String")) != 0)
        v169 = db_make_query_node_with_ann(v168, 0);
      else
LABEL_250:
        v169 = 0;
      if (*(_QWORD *)(v117 + 32) != -1)
      {
        v170 = *__error();
        v171 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a8;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v127;
          _os_log_impl(&dword_1B8270000, v171, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added person identifier filter for token %lu", buf, 0x16u);
        }
        *__error() = v170;
        v172 = (void *)objc_msgSend(v215, "objectAtIndexedSubscript:", *(_QWORD *)(v117 + 32));
        if (objc_msgSend(v172, "length") && (v173 = (char *)objc_msgSend(v172, "UTF8String")) != 0)
          v174 = db_make_query_node_with_ann(v173, 0);
        else
          v174 = 0;
        v169 = makeOrNode((uint64_t)v169, (uint64_t)v174);
      }
      if (std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((_QWORD *)(v117 + 40), 8))
      {
        v175 = *__error();
        v176 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a8;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v127;
          _os_log_impl(&dword_1B8270000, v176, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added holiday/season filter for token %lu", buf, 0x16u);
        }
        *__error() = v175;
        v177 = createQueryNode("kMDItemPhotosHolidays", v129, 112, 1, 0, 0.0, 0.0);
        v178 = makeOrNode((uint64_t)v169, (uint64_t)v177);
        v179 = createQueryNode("kMDItemPhotosSeasons", v129, 112, 1, 0, 0.0, 0.0);
        v169 = makeOrNode((uint64_t)v178, (uint64_t)v179);
      }
      if (std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((_QWORD *)(v117 + 40), 1))
      {
        v180 = *__error();
        v181 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a8;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v127;
          _os_log_impl(&dword_1B8270000, v181, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added media type filter for token %lu", buf, 0x16u);
        }
        *__error() = v180;
        v182 = createQueryNode("kMDItemPhotosMediaTypes", v129, 112, 1, 0, 0.0, 0.0);
        v169 = makeOrNode((uint64_t)v169, (uint64_t)v182);
      }
      if (std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((_QWORD *)(v117 + 40), 10))
      {
        v183 = *__error();
        v184 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a8;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v127;
          _os_log_impl(&dword_1B8270000, v184, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added location filter for token %lu", buf, 0x16u);
        }
        *__error() = v183;
        v185 = createQueryNode("kMDItemPhotosLocationKeywords", v129, 112, 1, 0, 0.0, 0.0);
        v169 = makeOrNode((uint64_t)v169, (uint64_t)v185);
      }
      if (std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((_QWORD *)(v117 + 40), 21))
      {
        v186 = *__error();
        v187 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a8;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v127;
          _os_log_impl(&dword_1B8270000, v187, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added favorited filter for token %lu", buf, 0x16u);
        }
        *__error() = v186;
        v188 = createQueryNode("kMDItemPhotosFavorited", "1", 0, 1, 0, 0.0, 0.0);
        v169 = makeOrNode((uint64_t)v169, (uint64_t)v188);
      }
      if (*(_QWORD *)(v117 + 32) == -1
        && std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::find<int>((_QWORD *)(v117 + 40), 2))
      {
        v189 = *__error();
        v190 = _SILogForLogForCategory(19);
        if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a8;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v127;
          _os_log_impl(&dword_1B8270000, v190, OS_LOG_TYPE_DEFAULT, "[qid=%llu] {ANN} Added person name/alternative filter for token %lu", buf, 0x16u);
        }
        *__error() = v189;
        v191 = createQueryNode("kMDItemPhotosPeopleNames", v129, 112, 1, 0, 0.0, 0.0);
        v192 = makeOrNode((uint64_t)v169, (uint64_t)v191);
        v193 = createQueryNode("kMDItemPhotosPeopleNamesAlternatives", v129, 112, 1, 0, 0.0, 0.0);
        v169 = makeOrNode((uint64_t)v192, (uint64_t)v193);
      }
      if (v169)
      {
        *a5 = (uint64_t)makeAndNode(*a5, (uint64_t)v169);
        if (*(_QWORD *)(v117 + 24) == -1)
          goto LABEL_188;
      }
    }
LABEL_282:
    v117 += 80;
  }
  while ((CFArrayRef)v117 != theArraya);
  v117 = v233;
  if (v223)
  {
    v194 = (void *)objc_msgSend(v216, "objectAtIndexedSubscript:", *(_QWORD *)(v233 + 80 * v126 + 24));
    if (objc_msgSend(v194, "length") && (v195 = (char *)objc_msgSend(v194, "UTF8String")) != 0)
      v196 = db_make_query_node_with_ann(v195, 0);
    else
      v196 = 0;
    v197 = makeOrNode((uint64_t)v223, (uint64_t)v196);
    *a6 = (uint64_t)makeAndNode(*a6, (uint64_t)v197);
    v117 = v233;
  }
LABEL_292:
  v198 = v234.i64[0];
  v199 = v117;
  if (v234.i64[0] != v117)
  {
    do
    {
      v200 = v198 - 80;
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table(v198 - 40);
      v198 = v200;
    }
    while (v200 != v117);
    v199 = v233;
  }
  v234.i64[0] = v117;
  v201 = vshrq_n_s64(vsubq_s64(v234, vdupq_n_s64(v199)), 4uLL);
  v202 = 0xCCCCCCCCCCCCCCCDLL * v201.i64[0];
  v203 = v202;
  if (0xCCCCCCCCCCCCCCCDLL * v201.i64[1] > v202)
  {
    *(_QWORD *)&buf[32] = &v234.i64[1];
    if (v234.i64[0] == v199)
    {
      v204 = 0;
      v205 = 0;
    }
    else
    {
      v204 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<PhTokenInfo>>(v202);
    }
    *(_QWORD *)buf = v204;
    *(_QWORD *)&buf[8] = &v204[80 * v203];
    *(_QWORD *)&buf[16] = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[24] = &v204[80 * v205];
    std::vector<PhTokenInfo>::__swap_out_circular_buffer((uint64_t *)&v233, buf);
    std::__split_buffer<PhTokenInfo>::~__split_buffer((uint64_t)buf);
  }
  CFRelease(theSet);
  CFRelease(v211);
  *(_QWORD *)buf = &v233;
  std::vector<PhTokenInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
}

void sub_1B8610E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  uint64_t v57;

  *(_QWORD *)(v57 - 240) = &a57;
  std::vector<PhTokenInfo>::__destroy_vector::operator()[abi:nn180100]((void ***)(v57 - 240));
  _Unwind_Resume(a1);
}

void PhRetrievalAttribs(void)
{
  unsigned __int8 v0;

  {
    PhRetrievalAttribs(void)::_retrievalAttribs = 0u;
    *(_OWORD *)&qword_1EF1AD0B0 = 0u;
    dword_1EF1AD0C0 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_set<std::string>::~unordered_set[abi:nn180100], &PhRetrievalAttribs(void)::_retrievalAttribs, &dword_1B8270000);
  }
  if (PhRetrievalAttribs(void)::onceToken != -1)
    dispatch_once(&PhRetrievalAttribs(void)::onceToken, &__block_literal_global_123);
}

void ___ZL18PhRetrievalAttribsv_block_invoke()
{
  uint64_t i;
  std::string __str;
  _QWORD v2[3];
  std::string v3;

  v3.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(&__str, "*");
  std::string::basic_string[abi:nn180100]<0>(v2, "kMDItemTextContent");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>((uint64_t)&PhRetrievalAttribs(void)::_retrievalAttribs, &__str, &v3);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v2[i + 2]) < 0)
      operator delete(*(void **)((char *)&__str + i * 8 + 24));
  }
}

void sub_1B86110D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZL30PhPopulateSomeFiltersFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueES5_S9__block_invoke(id *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  id *v9;

  result = objc_msgSend(a2, "count");
  if (result)
  {
    if (objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPDate"))
      && objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPDescription")))
    {
      objc_msgSend(a1[4], "addObject:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPDescription")));
      v9 = a1 + 5;
      return objc_msgSend(*v9, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", a3, a4));
    }
    result = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPGroundedPerson"));
    if (result)
    {
      result = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPDescription"));
      if (result)
      {
        objc_msgSend(a1[6], "addObject:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPDescription")));
        v9 = a1 + 7;
        return objc_msgSend(*v9, "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", a3, a4));
      }
    }
  }
  return result;
}

uint64_t ___ZL29PhPopulateDateFilterFromParseP18NSAttributedStringP14NSMutableArrayIP8NSStringEPS1_IP7NSValueE_block_invoke(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = objc_msgSend(a2, "count");
  if (result)
  {
    result = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPDate"));
    if (result)
    {
      result = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPDescription"));
      if (result)
      {
        objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kQPDescription")));
        return objc_msgSend(*(id *)(a1 + 40), "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", a3, a4));
      }
    }
  }
  return result;
}

void sub_1B8611378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B8611460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkQPQUOutputTokenArgScoresKey()
{
  void *v0;
  void *ParserLibrary;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkQPQUOutputTokenArgScoresKeySymbolLoc(void)::ptr;
  v7 = getkQPQUOutputTokenArgScoresKeySymbolLoc(void)::ptr;
  if (!getkQPQUOutputTokenArgScoresKeySymbolLoc(void)::ptr)
  {
    ParserLibrary = QueryParserLibrary();
    v0 = dlsym(ParserLibrary, "kQPQUOutputTokenArgScoresKey");
    v5[3] = (uint64_t)v0;
    getkQPQUOutputTokenArgScoresKeySymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
    return *(_QWORD *)v0;
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  result = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef  _Nullable getkQPQUOutputTokenArgScoresKey()"), CFSTR("PRQueryPhotosProcessor.mm"), 26, CFSTR("%s"), dlerror());
  __break(1u);
  return result;
}

void sub_1B8611548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getkQPQUOutputTokenKey()
{
  void *v0;
  void *ParserLibrary;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkQPQUOutputTokenKeySymbolLoc(void)::ptr;
  v7 = getkQPQUOutputTokenKeySymbolLoc(void)::ptr;
  if (!getkQPQUOutputTokenKeySymbolLoc(void)::ptr)
  {
    ParserLibrary = QueryParserLibrary();
    v0 = dlsym(ParserLibrary, "kQPQUOutputTokenKey");
    v5[3] = (uint64_t)v0;
    getkQPQUOutputTokenKeySymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
    return *(_QWORD *)v0;
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  result = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef  _Nullable getkQPQUOutputTokenKey()"), CFSTR("PRQueryPhotosProcessor.mm"), 24, CFSTR("%s"), dlerror());
  __break(1u);
  return result;
}

void sub_1B8611630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int>::unordered_set(uint64_t a1, uint64_t a2)
{
  uint64_t *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, *((_DWORD *)i + 4), *((_DWORD *)i + 4));
  return a1;
}

void sub_1B86116A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t getkQPQUOutputSpanTypesKey(void)
{
  void *v0;
  void *ParserLibrary;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v0 = (void *)getkQPQUOutputSpanTypesKeySymbolLoc(void)::ptr;
  v7 = getkQPQUOutputSpanTypesKeySymbolLoc(void)::ptr;
  if (!getkQPQUOutputSpanTypesKeySymbolLoc(void)::ptr)
  {
    ParserLibrary = QueryParserLibrary();
    v0 = dlsym(ParserLibrary, "kQPQUOutputSpanTypesKey");
    v5[3] = (uint64_t)v0;
    getkQPQUOutputSpanTypesKeySymbolLoc(void)::ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v4, 8);
  if (v0)
    return *(_QWORD *)v0;
  v3 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  result = objc_msgSend(v3, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "CFStringRef  _Nullable getkQPQUOutputSpanTypesKey()"), CFSTR("PRQueryPhotosProcessor.mm"), 27, CFSTR("%s"), dlerror());
  __break(1u);
  return result;
}

void sub_1B861178C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void std::vector<PhTokenInfo>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 80;
        std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table((uint64_t)(v4 - 40));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<PhTokenInfo>>(unint64_t a1)
{
  if (a1 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(80 * a1);
}

uint64_t *std::vector<PhTokenInfo>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 80);
      v9 = *(_OWORD *)(v2 + v5 - 64);
      *(_QWORD *)(v6 - 48) = *(_QWORD *)(v2 + v5 - 48);
      *(_OWORD *)(v6 - 80) = v8;
      *(_OWORD *)(v6 - 64) = v9;
      v10 = *(_QWORD *)(v2 + v5 - 40);
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v6 - 40) = v10;
      *(_QWORD *)(v6 - 32) = *(_QWORD *)(v2 + v5 - 32);
      *(_QWORD *)(v7 - 32) = 0;
      v11 = *(_QWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v4 + v5 - 24) = v11;
      v12 = *(_QWORD *)(v2 + v5 - 16);
      *(_QWORD *)(v6 - 16) = v12;
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      if (v12)
      {
        v13 = *(_QWORD *)(v11 + 8);
        v14 = *(_QWORD *)(v6 - 32);
        if ((v14 & (v14 - 1)) != 0)
        {
          if (v13 >= v14)
            v13 %= v14;
        }
        else
        {
          v13 &= v14 - 1;
        }
        *(_QWORD *)(v10 + 8 * v13) = v4 + v5 - 24;
        *(_QWORD *)(v2 + v5 - 24) = 0;
        *(_QWORD *)(v2 + v5 - 16) = 0;
      }
      v5 -= 80;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v15 = *result;
  *result = v4;
  a2[1] = v15;
  v16 = result[1];
  result[1] = a2[2];
  a2[2] = v16;
  v17 = result[2];
  result[2] = a2[3];
  a2[3] = v17;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<PhTokenInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::~__hash_table(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t ___ZL28NanoSecondsSinceAbsoluteTimey_block_invoke()
{
  return mach_timebase_info((mach_timebase_info_t)&NanoSecondsSinceAbsoluteTime(unsigned long long)::sTimebaseInfo);
}

void ___ZL14PhThreeYearAgov_block_invoke()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)MEMORY[0x1BCCB1280]();
  v1 = objc_msgSend(MEMORY[0x1E0C99D68], "date");
  asprintf((char **)&PhThreeYearAgo(void)::oldYear, "%lu", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar"), "component:fromDate:", 4, v1) - 3);
  objc_autoreleasePoolPop(v0);
}

void ___ZL11CurrentYearv_block_invoke()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)MEMORY[0x1BCCB1280]();
  v1 = objc_msgSend(MEMORY[0x1E0C99D68], "date");
  asprintf((char **)&CurrentYear(void)::currYear, "%lu", objc_msgSend((id)objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar"), "component:fromDate:", 4, v1));
  objc_autoreleasePoolPop(v0);
}

uint64_t ___ZL20PhRankingTreeFromStrPKcfPi_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 + 16);
    if (v2)
    {
      *(_DWORD *)(v2 + 52) = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(v2 + 56) = 0;
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    }
  }
  return a2;
}

void PhExactMatchRankingAttribs(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0
  {
    PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs = 0u;
    *(_OWORD *)&qword_1EF1AD158 = 0u;
    dword_1EF1AD168 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_map<std::string,float>::~unordered_map[abi:nn180100], &PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, &dword_1B8270000);
  }
  if (PhExactMatchRankingAttribs(void)::onceToken[0] != -1)
    dispatch_once(PhExactMatchRankingAttribs(void)::onceToken, &__block_literal_global_71);
}

void ___ZL26PhExactMatchRankingAttribsv_block_invoke()
{
  void *__p[2];
  char v1;

  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosFavorites");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1043878380;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosPeopleNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1043207291;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosPeopleNamesAlternatives");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1043207291;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSceneClassificationLabels");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1042536202;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSceneClassificationSynonyms");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1042536202;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosDescription");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1041865114;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosKeywords");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1041865114;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosLocationKeywords");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1041194025;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosHolidays");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1040522936;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSeasons");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1040522936;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosContentCreationDateMonth");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1040522936;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosContentCreationDateMonths");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1040522936;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosContentCreationDateYear");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1040522936;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosContentCreationDateYears");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1040522936;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosBusinessCategories");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1039516303;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosBusinessNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1039516303;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosEventCategories");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1038174126;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosEventNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1038174126;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosEventPerformers");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1038174126;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSharedLibraryContributorsNames");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSharedLibraryContributorsNamesAlternatives");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosSavedFromAppName");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosUtilityTypes");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemAcquisitionModel");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosMeanings");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosMediaTypes");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:nn180100]<0>(__p, "kMDItemPhotosTitle");
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)&PhExactMatchRankingAttribs(void)::_phExactMatchRankingAttribs, (uint64_t)__p, (uint64_t)__p)+ 10) = 1036831949;
  if (v1 < 0)
    operator delete(__p[0]);
}

void sub_1B8612314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<int,PhRankingInfo>::~unordered_map[abi:nn180100](uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  void **v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(char **)v2;
      v6 = (void **)(v2 + 32);
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v6);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::find<int>(uint64_t a1, unint64_t a2, int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void ___ZL27PhPrefixMatchRankingAttribsv_block_invoke()
{
  char *v0;
  char *v1;
  uint64_t i;
  char *v3;
  uint64_t j;
  char *v5;
  char *v6;
  uint64_t k;
  char *v8;
  uint64_t m;
  char *v10;
  char *v11;
  uint64_t n;
  void **v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[3];
  _QWORD v17[3];
  void *v18;
  __int128 v19;
  __int128 v20;

  *((_QWORD *)&v20 + 1) = *MEMORY[0x1E0C80C00];
  LODWORD(v14) = 1043878380;
  std::string::basic_string[abi:nn180100]<0>(&v18, "kMDItemPhotosFavorites");
  *(_QWORD *)&v15 = operator new(0x18uLL);
  v16[0] = v15 + 24;
  *((_QWORD *)&v15 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v18, &v20, (std::string *)v15);
  v0 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 21, &ARG_FAVORITED_ID);
  *((_DWORD *)v0 + 6) = 1043878380;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v0 + 32));
  *((_OWORD *)v0 + 2) = v15;
  *((_QWORD *)v0 + 6) = v16[0];
  v16[0] = 0;
  v15 = 0uLL;
  v13 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  if (SHIBYTE(v19) < 0)
    operator delete(v18);
  LODWORD(v18) = 1043207291;
  std::string::basic_string[abi:nn180100]<0>(&v14, "kMDItemPhotosPeopleNames");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosPeopleNamesAlternatives");
  v19 = 0uLL;
  *(_QWORD *)&v20 = 0;
  *(_QWORD *)&v19 = operator new(0x30uLL);
  *((_QWORD *)&v19 + 1) = v19;
  *(_QWORD *)&v20 = v19 + 48;
  *((_QWORD *)&v19 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v14, (__int128 *)v17, (std::string *)v19);
  v1 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 2, &ARG_PERSON_ID);
  *((_DWORD *)v1 + 6) = (_DWORD)v18;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v1 + 32));
  *((_OWORD *)v1 + 2) = v19;
  *((_QWORD *)v1 + 6) = v20;
  *(_QWORD *)&v20 = 0;
  v19 = 0uLL;
  v13 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v16[i + 2]) < 0)
      operator delete((void *)v16[i]);
  }
  LODWORD(v18) = 1042536202;
  std::string::basic_string[abi:nn180100]<0>(&v14, "kMDItemPhotosSceneClassificationLabels");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosSceneClassificationSynonyms");
  v19 = 0uLL;
  *(_QWORD *)&v20 = 0;
  *(_QWORD *)&v19 = operator new(0x30uLL);
  *((_QWORD *)&v19 + 1) = v19;
  *(_QWORD *)&v20 = v19 + 48;
  *((_QWORD *)&v19 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v14, (__int128 *)v17, (std::string *)v19);
  v3 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 5, &ARG_NOUN_ID);
  *((_DWORD *)v3 + 6) = (_DWORD)v18;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v3 + 32));
  *((_OWORD *)v3 + 2) = v19;
  *((_QWORD *)v3 + 6) = v20;
  *(_QWORD *)&v20 = 0;
  v19 = 0uLL;
  v13 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v16[j + 2]) < 0)
      operator delete((void *)v16[j]);
  }
  LODWORD(v14) = 1041194025;
  std::string::basic_string[abi:nn180100]<0>(&v18, "kMDItemPhotosLocationKeywords");
  v15 = 0uLL;
  v16[0] = 0;
  *(_QWORD *)&v15 = operator new(0x18uLL);
  *((_QWORD *)&v15 + 1) = v15;
  v16[0] = v15 + 24;
  *((_QWORD *)&v15 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v18, &v20, (std::string *)v15);
  v5 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 10, &ARG_LOCATION_ID);
  *((_DWORD *)v5 + 6) = v14;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v5 + 32));
  *((_OWORD *)v5 + 2) = v15;
  *((_QWORD *)v5 + 6) = v16[0];
  v16[0] = 0;
  v15 = 0uLL;
  v13 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  if (SHIBYTE(v19) < 0)
    operator delete(v18);
  LODWORD(v18) = 1040522936;
  std::string::basic_string[abi:nn180100]<0>(&v14, "kMDItemPhotosHolidays");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosSeasons");
  v19 = 0uLL;
  *(_QWORD *)&v20 = 0;
  *(_QWORD *)&v19 = operator new(0x30uLL);
  *((_QWORD *)&v19 + 1) = v19;
  *(_QWORD *)&v20 = v19 + 48;
  *((_QWORD *)&v19 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v14, (__int128 *)v17, (std::string *)v19);
  v6 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 8, &ARG_TIME_ID);
  *((_DWORD *)v6 + 6) = (_DWORD)v18;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v6 + 32));
  *((_OWORD *)v6 + 2) = v19;
  *((_QWORD *)v6 + 6) = v20;
  *(_QWORD *)&v20 = 0;
  v19 = 0uLL;
  v13 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  for (k = 0; k != -6; k -= 3)
  {
    if (SHIBYTE(v16[k + 2]) < 0)
      operator delete((void *)v16[k]);
  }
  LODWORD(v18) = 1038174126;
  std::string::basic_string[abi:nn180100]<0>(&v14, "kMDItemPhotosEventCategories");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosMeanings");
  std::string::basic_string[abi:nn180100]<0>(v17, "kMDItemPhotosSceneClassificationLabels");
  v19 = 0uLL;
  *(_QWORD *)&v20 = 0;
  *(_QWORD *)&v19 = operator new(0x48uLL);
  *((_QWORD *)&v19 + 1) = v19;
  *(_QWORD *)&v20 = v19 + 72;
  *((_QWORD *)&v19 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v14, (__int128 *)&v18, (std::string *)v19);
  v8 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 9, &ARG_EVENT_ID);
  *((_DWORD *)v8 + 6) = (_DWORD)v18;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v8 + 32));
  *((_OWORD *)v8 + 2) = v19;
  *((_QWORD *)v8 + 6) = v20;
  *(_QWORD *)&v20 = 0;
  v19 = 0uLL;
  v13 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  for (m = 0; m != -9; m -= 3)
  {
    if (SHIBYTE(v17[m + 2]) < 0)
      operator delete((void *)v17[m]);
  }
  LODWORD(v14) = 1036831949;
  std::string::basic_string[abi:nn180100]<0>(&v18, "kMDItemPhotosMediaTypes");
  v15 = 0uLL;
  v16[0] = 0;
  *(_QWORD *)&v15 = operator new(0x18uLL);
  v16[0] = v15 + 24;
  *((_QWORD *)&v15 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v18, &v20, (std::string *)v15);
  v10 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 1, &ARG_MEDIA_TYPE_ID);
  *((_DWORD *)v10 + 6) = v14;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v10 + 32));
  *((_OWORD *)v10 + 2) = v15;
  *((_QWORD *)v10 + 6) = v16[0];
  v16[0] = 0;
  v15 = 0uLL;
  v13 = (void **)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  if (SHIBYTE(v19) < 0)
    operator delete(v18);
  LODWORD(v18) = 1036831949;
  std::string::basic_string[abi:nn180100]<0>(&v14, "kMDItemPhotosSceneClassificationLabels");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosSceneClassificationSynonyms");
  v19 = 0uLL;
  *(_QWORD *)&v20 = 0;
  *(_QWORD *)&v19 = operator new(0x30uLL);
  *(_QWORD *)&v20 = v19 + 48;
  *((_QWORD *)&v19 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v14, (__int128 *)v17, (std::string *)v19);
  v11 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhPrefixMatchRankingAttribs(void)::_phPrefixMatchAttribs, 7, &ARG_VQ_ID);
  *((_DWORD *)v11 + 6) = (_DWORD)v18;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v11 + 32));
  *((_OWORD *)v11 + 2) = v19;
  *((_QWORD *)v11 + 6) = v20;
  *(_QWORD *)&v20 = 0;
  v19 = 0uLL;
  v13 = (void **)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  for (n = 0; n != -6; n -= 3)
  {
    if (SHIBYTE(v16[n + 2]) < 0)
      operator delete((void *)v16[n]);
  }
}

void sub_1B8612BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v23;

  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&a10);
  v23 = 0;
  while (1)
  {
    if (*(&a22 + v23) < 0)
      operator delete(*(void **)((char *)&a17 + v23));
    v23 -= 24;
    if (v23 == -48)
      _Unwind_Resume(a1);
  }
}

char *std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t *a1, int a2, _DWORD *a3)
{
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  void **v9;
  char *v10;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  void *v34;

  v5 = a2;
  v6 = a1[1];
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
    v9 = *(void ***)(*a1 + 8 * v8);
    if (v9)
    {
      v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          v11 = *((_QWORD *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2)
              return v10;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6)
                v11 %= v6;
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8)
              break;
          }
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  v12 = a1 + 2;
  v10 = (char *)operator new(0x38uLL);
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = v5;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  v13 = (float)(unint64_t)(a1[3] + 1);
  v14 = *((float *)a1 + 8);
  if (!v6 || (float)(v14 * (float)v6) < v13)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = a1[1];
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v6)
    {
      v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v6 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*v12;
          if (*v12)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v23) = v12;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v29))
                  {
                    *(_QWORD *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*a1 + 8 * v29);
                  **(_QWORD **)(*a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = (void *)*a1;
        *a1 = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v8 = v5 % v6;
      else
        v8 = v5;
    }
    else
    {
      v8 = (v6 - 1) & v5;
    }
  }
  v30 = *a1;
  v31 = *(_QWORD **)(*a1 + 8 * v8);
  if (v31)
  {
    *(_QWORD *)v10 = *v31;
LABEL_72:
    *v31 = v10;
    goto LABEL_73;
  }
  *(_QWORD *)v10 = *v12;
  *v12 = v10;
  *(_QWORD *)(v30 + 8 * v8) = v12;
  if (*(_QWORD *)v10)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v32 >= v6)
        v32 %= v6;
    }
    else
    {
      v32 &= v6 - 1;
    }
    v31 = (_QWORD *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_1B861318C(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,PhRankingInfo>,void *>>>::operator()[abi:nn180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,PhRankingInfo>,void *>>>::operator()[abi:nn180100](char a1, void **__p)
{
  void **v3;

  if (a1)
  {
    v3 = __p + 4;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

void ___ZL25PhSpanMatchRankingAttribsv_block_invoke()
{
  char *v0;
  char *v1;
  uint64_t i;
  char *v3;
  uint64_t j;
  char *v5;
  char *v6;
  uint64_t k;
  char *v8;
  uint64_t m;
  char *v10;
  void **v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[3];
  __int128 v15;
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  void *v19;
  __int128 v20;
  __int128 v21;

  *((_QWORD *)&v21 + 1) = *MEMORY[0x1E0C80C00];
  LODWORD(v12) = 1043878380;
  std::string::basic_string[abi:nn180100]<0>(&v19, "kMDItemPhotosFavorites");
  *(_QWORD *)&v13 = operator new(0x18uLL);
  v14[0] = v13 + 24;
  *((_QWORD *)&v13 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v19, &v21, (std::string *)v13);
  v0 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 21, &ARG_FAVORITED_ID);
  *((_DWORD *)v0 + 6) = 1043878380;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v0 + 32));
  *((_OWORD *)v0 + 2) = v13;
  *((_QWORD *)v0 + 6) = v14[0];
  v14[0] = 0;
  v13 = 0uLL;
  v11 = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  if (SHIBYTE(v20) < 0)
    operator delete(v19);
  LODWORD(v19) = 1043207291;
  std::string::basic_string[abi:nn180100]<0>(&v12, "kMDItemPhotosPeopleNames");
  std::string::basic_string[abi:nn180100]<0>(v14, "kMDItemPhotosPeopleNamesAlternatives");
  v20 = 0uLL;
  *(_QWORD *)&v21 = 0;
  *(_QWORD *)&v20 = operator new(0x30uLL);
  *((_QWORD *)&v20 + 1) = v20;
  *(_QWORD *)&v21 = v20 + 48;
  *((_QWORD *)&v20 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v12, &v15, (std::string *)v20);
  v1 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 2, &ARG_PERSON_ID);
  *((_DWORD *)v1 + 6) = (_DWORD)v19;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v1 + 32));
  *((_OWORD *)v1 + 2) = v20;
  *((_QWORD *)v1 + 6) = v21;
  *(_QWORD *)&v21 = 0;
  v20 = 0uLL;
  v11 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v14[i + 2]) < 0)
      operator delete((void *)v14[i]);
  }
  LODWORD(v19) = 1042536202;
  std::string::basic_string[abi:nn180100]<0>(&v12, "kMDItemPhotosDescription");
  std::string::basic_string[abi:nn180100]<0>(v14, "kMDItemPhotosKeywords");
  std::string::basic_string[abi:nn180100]<0>(&v15, "kMDItemPhotosMeanings");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosPeopleNamesAlternatives");
  std::string::basic_string[abi:nn180100]<0>(v17, "kMDItemPhotosSceneClassificationLabels");
  std::string::basic_string[abi:nn180100]<0>(v18, "kMDItemPhotosSceneClassificationSynonyms");
  v20 = 0uLL;
  *(_QWORD *)&v21 = 0;
  *(_QWORD *)&v20 = operator new(0x90uLL);
  *((_QWORD *)&v20 + 1) = v20;
  *(_QWORD *)&v21 = v20 + 144;
  *((_QWORD *)&v20 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v12, (__int128 *)&v19, (std::string *)v20);
  v3 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 5, &ARG_NOUN_ID);
  *((_DWORD *)v3 + 6) = (_DWORD)v19;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v3 + 32));
  *((_OWORD *)v3 + 2) = v20;
  *((_QWORD *)v3 + 6) = v21;
  *(_QWORD *)&v21 = 0;
  v20 = 0uLL;
  v11 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  for (j = 0; j != -18; j -= 3)
  {
    if (SHIBYTE(v18[j + 2]) < 0)
      operator delete((void *)v18[j]);
  }
  LODWORD(v12) = 1041194025;
  std::string::basic_string[abi:nn180100]<0>(&v19, "kMDItemPhotosLocationKeywords");
  v13 = 0uLL;
  v14[0] = 0;
  *(_QWORD *)&v13 = operator new(0x18uLL);
  *((_QWORD *)&v13 + 1) = v13;
  v14[0] = v13 + 24;
  *((_QWORD *)&v13 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v19, &v21, (std::string *)v13);
  v5 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 10, &ARG_LOCATION_ID);
  *((_DWORD *)v5 + 6) = v12;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v5 + 32));
  *((_OWORD *)v5 + 2) = v13;
  *((_QWORD *)v5 + 6) = v14[0];
  v14[0] = 0;
  v13 = 0uLL;
  v11 = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  if (SHIBYTE(v20) < 0)
    operator delete(v19);
  LODWORD(v19) = 1040522936;
  std::string::basic_string[abi:nn180100]<0>(&v12, "kMDItemPhotosHolidays");
  std::string::basic_string[abi:nn180100]<0>(v14, "kMDItemPhotosSeasons");
  v20 = 0uLL;
  *(_QWORD *)&v21 = 0;
  *(_QWORD *)&v20 = operator new(0x30uLL);
  *((_QWORD *)&v20 + 1) = v20;
  *(_QWORD *)&v21 = v20 + 48;
  *((_QWORD *)&v20 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v12, &v15, (std::string *)v20);
  v6 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 8, &ARG_TIME_ID);
  *((_DWORD *)v6 + 6) = (_DWORD)v19;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v6 + 32));
  *((_OWORD *)v6 + 2) = v20;
  *((_QWORD *)v6 + 6) = v21;
  *(_QWORD *)&v21 = 0;
  v20 = 0uLL;
  v11 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  for (k = 0; k != -6; k -= 3)
  {
    if (SHIBYTE(v14[k + 2]) < 0)
      operator delete((void *)v14[k]);
  }
  LODWORD(v19) = 1038174126;
  std::string::basic_string[abi:nn180100]<0>(&v12, "kMDItemPhotosEventCategories");
  std::string::basic_string[abi:nn180100]<0>(v14, "kMDItemPhotosDescription");
  std::string::basic_string[abi:nn180100]<0>(&v15, "kMDItemPhotosKeywords");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosMeanings");
  std::string::basic_string[abi:nn180100]<0>(v17, "kMDItemPhotosSceneClassificationLabels");
  std::string::basic_string[abi:nn180100]<0>(v18, "kMDItemPhotosSceneClassificationSynonyms");
  v20 = 0uLL;
  *(_QWORD *)&v21 = 0;
  *(_QWORD *)&v20 = operator new(0x90uLL);
  *(_QWORD *)&v21 = v20 + 144;
  *((_QWORD *)&v20 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v12, (__int128 *)&v19, (std::string *)v20);
  v8 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 9, &ARG_EVENT_ID);
  *((_DWORD *)v8 + 6) = (_DWORD)v19;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v8 + 32));
  *((_OWORD *)v8 + 2) = v20;
  *((_QWORD *)v8 + 6) = v21;
  *(_QWORD *)&v21 = 0;
  v20 = 0uLL;
  v11 = (void **)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  for (m = 0; m != -18; m -= 3)
  {
    if (SHIBYTE(v18[m + 2]) < 0)
      operator delete((void *)v18[m]);
  }
  LODWORD(v12) = 1036831949;
  std::string::basic_string[abi:nn180100]<0>(&v19, "kMDItemPhotosMediaTypes");
  v13 = 0uLL;
  v14[0] = 0;
  *(_QWORD *)&v13 = operator new(0x18uLL);
  v14[0] = v13 + 24;
  *((_QWORD *)&v13 + 1) = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((__int128 *)&v19, &v21, (std::string *)v13);
  v10 = std::__hash_table<std::__hash_value_type<int,PhRankingInfo>,std::__unordered_map_hasher<int,std::__hash_value_type<int,PhRankingInfo>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,PhRankingInfo>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,PhRankingInfo>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)&PhSpanMatchRankingAttribs(void)::_phSpanMatchAttribs, 1, &ARG_MEDIA_TYPE_ID);
  *((_DWORD *)v10 + 6) = v12;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v10 + 32));
  *((_OWORD *)v10 + 2) = v13;
  *((_QWORD *)v10 + 6) = v14[0];
  v14[0] = 0;
  v13 = 0uLL;
  v11 = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v11);
  if (SHIBYTE(v20) < 0)
    operator delete(v19);
}

void sub_1B86138B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&a9);
  if (*(char *)(v9 - 49) < 0)
    operator delete(*(void **)(v9 - 72));
  _Unwind_Resume(a1);
}

void ___ZL26PhPopulateFiltersFromQueryPK20__CFAttributedStringPP10query_nodeS4_P14NSMutableArrayIP7NSValueES9_by_block_invoke(uint64_t a1, void *a2, NSUInteger a3, NSUInteger a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  NSString *v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t buf[4];
  uint64_t v29;
  __int16 v30;
  NSString *v31;
  uint64_t v32;
  NSRange v33;

  v32 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend(a2, "count"))
    objc_msgSend(*(id *)(a1 + 32), "addObject:", objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithRange:", a3, a4));
  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v20 = 0;
  v21 = &v20;
  v22 = 0x2020000000;
  v23 = 0;
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = ___ZL26PhPopulateFiltersFromQueryPK20__CFAttributedStringPP10query_nodeS4_P14NSMutableArrayIP7NSValueES9_by_block_invoke_2;
  v18[3] = &unk_1E6E38168;
  v8 = *(_QWORD *)(a1 + 48);
  v18[4] = *(_QWORD *)(a1 + 40);
  v18[5] = &v24;
  v18[8] = a4;
  v18[9] = v8;
  v19 = *(_BYTE *)(a1 + 72);
  v18[6] = &v20;
  v18[7] = a3;
  v18[10] = *(_QWORD *)(a1 + 56);
  objc_msgSend(a2, "enumerateKeysAndObjectsUsingBlock:", v18);
  v9 = v21[3];
  v10 = v25[3];
  if (v9 && v10)
  {
    v11 = makeOrNode(v9, v10);
    if (*(_BYTE *)(a1 + 72))
    {
      v12 = makeAndNode(**(_QWORD **)(a1 + 64), (uint64_t)v11);
      v13 = *(_QWORD **)(a1 + 64);
LABEL_9:
      *v13 = v12;
      goto LABEL_13;
    }
    **(_QWORD **)(a1 + 56) = makeAndNode(**(_QWORD **)(a1 + 56), (uint64_t)v11);
    v14 = *__error();
    v15 = _SILogForLogForCategory(19);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = *(_QWORD *)(a1 + 48);
      v33.location = a3;
      v33.length = a4;
      v17 = NSStringFromRange(v33);
      *(_DWORD *)buf = 134218242;
      v29 = v16;
      v30 = 2112;
      v31 = v17;
      _os_log_impl(&dword_1B8270000, v15, OS_LOG_TYPE_DEFAULT, "[qid=%llu] Token (range: %@) has generic and metdata filters (ORing them together)", buf, 0x16u);
    }
    *__error() = v14;
  }
  else
  {
    **(_QWORD **)(a1 + 64) = makeAndNode(**(_QWORD **)(a1 + 64), v10);
    if (!*(_BYTE *)(a1 + 72))
    {
      v12 = makeAndNode(**(_QWORD **)(a1 + 56), v21[3]);
      v13 = *(_QWORD **)(a1 + 56);
      goto LABEL_9;
    }
  }
LABEL_13:
  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
}

void sub_1B8613CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1B86141B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL isGenericFilterKey(uint64_t a1)
{
  unsigned __int8 v2;

  {
    GenericFilterKeys(void)::_genericFilterKeys = 0u;
    unk_1EF1B0E28 = 0u;
    dword_1EF1B0E38 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_set<std::string>::~unordered_set[abi:nn180100], &GenericFilterKeys(void)::_genericFilterKeys, &dword_1B8270000);
  }
  if (GenericFilterKeys(void)::onceToken != -1)
    dispatch_once(&GenericFilterKeys(void)::onceToken, &__block_literal_global_16_11815);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(GenericFilterKeys(void)::_genericFilterKeys, *((unint64_t *)&GenericFilterKeys(void)::_genericFilterKeys + 1), a1) != 0;
}

BOOL isGenericFilterTopLevelKey(uint64_t a1)
{
  unsigned __int8 v2;

  if ((v2 & 1) == 0
  {
    GenericFilterTopLevelKeys(void)::_genericFilterTopLevelKeys = 0u;
    unk_1EF1B0E60 = 0u;
    dword_1EF1B0E70 = 1065353216;
    __cxa_atexit((void (*)(void *))std::unordered_set<std::string>::~unordered_set[abi:nn180100], &GenericFilterTopLevelKeys(void)::_genericFilterTopLevelKeys, &dword_1B8270000);
  }
  if (GenericFilterTopLevelKeys(void)::onceToken != -1)
    dispatch_once(&GenericFilterTopLevelKeys(void)::onceToken, &__block_literal_global_45_11813);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(GenericFilterTopLevelKeys(void)::_genericFilterTopLevelKeys, *((unint64_t *)&GenericFilterTopLevelKeys(void)::_genericFilterTopLevelKeys + 1), a1) != 0;
}

void ___ZL25GenericFilterTopLevelKeysv_block_invoke()
{
  std::string __p;
  std::string v1;

  v1.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(&__p, "kMDItemPhotosResultType");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>((uint64_t)&GenericFilterTopLevelKeys(void)::_genericFilterTopLevelKeys, &__p, &v1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ___ZL17GenericFilterKeysv_block_invoke()
{
  uint64_t v0;
  std::string __str;
  _QWORD v2[3];
  _QWORD v3[3];
  _QWORD v4[3];
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  std::string v29;

  v29.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(&__str, "kMDItemAcquisitionModel");
  std::string::basic_string[abi:nn180100]<0>(v2, "kMDItemContentCreationDate");
  std::string::basic_string[abi:nn180100]<0>(v3, "kMDItemContentType");
  std::string::basic_string[abi:nn180100]<0>(v4, "kMDItemFilename");
  std::string::basic_string[abi:nn180100]<0>(v5, "kMDItemPhotosBusinessCategories");
  std::string::basic_string[abi:nn180100]<0>(v6, "kMDItemPhotosBusinessNames");
  std::string::basic_string[abi:nn180100]<0>(v7, "kMDItemPhotosContentCreationDateMonth");
  std::string::basic_string[abi:nn180100]<0>(v8, "kMDItemPhotosContentCreationDateMonths");
  std::string::basic_string[abi:nn180100]<0>(v9, "kMDItemPhotosContentCreationDateYear");
  std::string::basic_string[abi:nn180100]<0>(v10, "kMDItemPhotosContentCreationDateYears");
  std::string::basic_string[abi:nn180100]<0>(v11, "kMDItemPhotosDescription");
  std::string::basic_string[abi:nn180100]<0>(v12, "kMDItemPhotosEventCategories");
  std::string::basic_string[abi:nn180100]<0>(v13, "kMDItemPhotosEventNames");
  std::string::basic_string[abi:nn180100]<0>(v14, "kMDItemPhotosEventPerformers");
  std::string::basic_string[abi:nn180100]<0>(v15, "kMDItemPhotosFavorited");
  std::string::basic_string[abi:nn180100]<0>(v16, "kMDItemPhotosHolidays");
  std::string::basic_string[abi:nn180100]<0>(v17, "kMDItemPhotosKeywords");
  std::string::basic_string[abi:nn180100]<0>(v18, "kMDItemPhotosLibraryName");
  std::string::basic_string[abi:nn180100]<0>(v19, "kMDItemPhotosLocationKeywords");
  std::string::basic_string[abi:nn180100]<0>(v20, "kMDItemPhotosMediaTypes");
  std::string::basic_string[abi:nn180100]<0>(v21, "kMDItemPhotosPeopleNames");
  std::string::basic_string[abi:nn180100]<0>(v22, "kMDItemPhotosPeopleNamesAlternatives");
  std::string::basic_string[abi:nn180100]<0>(v23, "kMDItemPhotosPeoplePersonIdentifiers");
  std::string::basic_string[abi:nn180100]<0>(v24, "kMDItemPhotosSavedFromAppName");
  std::string::basic_string[abi:nn180100]<0>(v25, "kMDItemPhotosSeasons");
  std::string::basic_string[abi:nn180100]<0>(v26, "kMDItemPhotosSharedLibraryContributorsPersonIdentifiers");
  std::string::basic_string[abi:nn180100]<0>(v27, "kMDItemPhotosTitle");
  std::string::basic_string[abi:nn180100]<0>(v28, "kMDItemTextContent");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>((uint64_t)&GenericFilterKeys(void)::_genericFilterKeys, &__str, &v29);
  v0 = 672;
  do
  {
    if (__str.__r_.__value_.__s.__data_[v0 - 1] < 0)
      operator delete(*(void **)((char *)&__str.__r_.__value_.__l + v0 - 24));
    v0 -= 24;
  }
  while (v0);
}

void sub_1B86146C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void ___ZL12MetadataKeysv_block_invoke()
{
  uint64_t i;
  std::string __str;
  _QWORD v2[3];
  std::string v3;

  v3.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:nn180100]<0>(&__str, "kMDItemPhotosMeanings");
  std::string::basic_string[abi:nn180100]<0>(v2, "kMDItemPhotosSceneClassificationLabels");
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_unique<std::string const*>((uint64_t)&MetadataKeys(void)::_metadataKeys, &__str, &v3);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v2[i + 2]) < 0)
      operator delete(*(void **)((char *)&__str + i * 8 + 24));
  }
}

void sub_1B86147A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t si_compute_oid_for_identifier_bundle_id(char *__str, int a2, uint64_t a3, int a4)
{
  unsigned int v8;
  BOOL v9;
  char *__endptr;

  if (a2 > 8 || ((__endptr = 0, v8 = strtol(__str, &__endptr, 10), !*__endptr) ? (v9 = v8 == 0) : (v9 = 1), v9))
    v8 = MurmurHash3_x86_32((uint64_t)__str, a2);
  return v8 | ((MurmurHash3_x86_32(a3, a4) & 0x7FFFFFFF) << 32);
}

int *accurate_realpath(int *result, uint64_t a2)
{
  char *v3;
  int v4;
  gid_t v5[2];
  stat v6;

  if (result)
  {
    v3 = (char *)result;
    v4 = open((const char *)result, 32772);
    if ((v4 & 0x80000000) == 0)
      goto LABEL_3;
    result = __error();
    if (*result == 13)
    {
      result = (int *)geteuid();
      if (!(_DWORD)result)
      {
        memset(&v6, 0, sizeof(v6));
        result = (int *)md_stat_real(v3, &v6);
        if (!(_DWORD)result)
        {
          *(_QWORD *)v5 = 0;
          result = (int *)pthread_getugid_np(&v5[1], v5);
          if (!(_DWORD)result)
          {
            result = (int *)pthread_setugid_np(v6.st_uid, v6.st_gid);
            if (!(_DWORD)result)
            {
              v4 = open(v3, 32772);
              result = (int *)pthread_setugid_np(v5[1], v5[0]);
              if ((_DWORD)result)
                __assert_rtn("accurate_realpath", "MDFileUtil.c", 394, "rc == 0");
              if ((v4 & 0x80000000) == 0)
              {
LABEL_3:
                fcntl(v4, 50, a2);
                return (int *)close(v4);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t md_stat_real(char *a1, stat *a2)
{
  uint64_t v4;

  v4 = fstatat(-2, a1, a2, 512);
  if ((_DWORD)v4 && *__error() == 22)
    return fstatat(-2, a1, a2, 0);
  else
    return v4;
}

uint64_t x_unlinkat(int a1, const char *a2, int a3)
{
  uint64_t v6;
  int *v7;

  v6 = unlinkat(a1, a2, a3);
  if ((_DWORD)v6 && (v7 = __error(), (a3 & 0x800) != 0) && *v7 == 22)
    return unlinkat(a1, a2, a3 & 0xFFFFF7FF);
  else
    return v6;
}

uint64_t md_fstat_real(int a1, stat *a2)
{
  uint64_t v4;

  v4 = fstatat(a1, 0, a2, 1536);
  if ((_DWORD)v4 && *__error() == 22)
    return fstat(a1, a2);
  else
    return v4;
}

void state_reduce(unint64_t *a1)
{
  unint64_t v1;
  char v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  size_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned __int8 v15;
  int v16;
  unsigned int v17;
  unsigned __int8 v18;
  int v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  if (*a1)
  {
    v53 = 0u;
    v54 = 0u;
    v3 = __clz(__rbit64(v1));
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    v55 = 0;
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    v36 = 0u;
    v35 = 0u;
    v34 = 0u;
    v33 = 0u;
    v32 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v23 = 1 << v3;
    v4 = 1;
    v5 = v1 & (-2 << v3);
    if (!v5)
      goto LABEL_6;
    v6 = 1;
    do
    {
      v7 = __clz(__rbit64(v5));
      v8 = v6 + 1;
      *(&v23 + v6++) = 1 << v7;
      v5 = v1 & (-2 << v7);
    }
    while (v5);
    v4 = v8;
    if (v8)
    {
LABEL_6:
      MEMORY[0x1E0C80A78](a1);
      v10 = (_DWORD *)((char *)&v22 - ((v9 + 15) & 0x7FFFFFFF0));
      bzero(v10, v9);
      v11 = 0;
      do
      {
        if (!v10[v11])
        {
          v12 = 0;
          do
          {
            if (v11 != v12)
            {
              v13 = __clz(__rbit64(*(&v23 + v11)));
              v14 = (103 * v13) >> 9;
              v15 = v13 - 5 * v14;
              v16 = __clz(__rbit64(*(&v23 + v12)));
              v17 = (103 * v16) >> 9;
              v18 = v16 - 5 * v17;
              if (v15 < v18)
              {
                v19 = v17 - v14;
                if (v19 < 0)
                  v19 = -v19;
                if (v19 <= v18 - v15)
                  v10[v12] = 1;
              }
            }
            ++v12;
          }
          while (v4 != v12);
        }
        ++v11;
      }
      while (v11 != v4);
      v20 = &v23;
      do
      {
        if (*v10++)
          *a1 &= ~*v20;
        ++v20;
        --v4;
      }
      while (v4);
    }
  }
}

uint64_t CatInfoGotten::oid(CatInfoGotten *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(CatInfoGotten *))(*(_QWORD *)this + 16))(this);
  if (result)
    return *(_QWORD *)result;
  return result;
}

void CatInfoGotten::releaseFlush(int a1, void *a2)
{
  if (a2)
    free(a2);
}

uint64_t CatInfoGotten_DB::forceDbo(CatInfoGotten_DB *this)
{
  return (*(uint64_t (**)(CatInfoGotten_DB *))(*(_QWORD *)this + 16))(this);
}

void CatInfoGotten_OID::~CatInfoGotten_OID(CatInfoGotten_OID *this)
{
  CatInfoGotten_OID::~CatInfoGotten_OID(this);
  JUMPOUT(0x1BCCB06A4);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E6E2A0B8;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
    free(v2);
  CatInfoGotten::~CatInfoGotten(this);
}

int *CatInfoGotten_OID::dbo(CatInfoGotten_OID *this)
{
  int *result;
  uint64_t v3;
  unint64_t v4;
  int *v5;

  result = (int *)*((_QWORD *)this + 5);
  if (!result)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = *((_QWORD *)this + 12);
    v5 = 0;
    result = *(int **)(v3 + 1184);
    if (result)
    {
      if (db_get_obj_callback(result, v4, (void **)&v5, 0, *(_QWORD *)(v3 + 2368), 0))
      {
        v5 = 0;
        goto LABEL_6;
      }
      result = v5;
      if (!v5)
      {
LABEL_6:
        result = db_create_obj(*(_QWORD *)(v3 + 1184), 0, 0);
        if (result)
          *(_QWORD *)result = v4;
      }
    }
    *((_QWORD *)this + 5) = result;
  }
  return result;
}

uint64_t CatInfoGotten_OID::oid(CatInfoGotten_OID *this)
{
  return *((_QWORD *)this + 12);
}

_QWORD *CatInfoGotten::fastPath(_QWORD *this)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  const char *v4;

  if (!this[7])
  {
    v1 = this;
    v2 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x400uLL, 0x6085D6BuLL);
    if (!v2)
      _log_fault_for_malloc_failure();
    v1[10] = v2;
    v3 = v1[2];
    (*(void (**)(_QWORD *))(*v1 + 32))(v1);
    this = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)(v3 + 1416) + 48))();
    v4 = "";
    if (this)
      v4 = (const char *)this;
    v1[7] = v4;
  }
  return this;
}

uint64_t _data_map32_wrlock(uint64_t a1)
{
  uint64_t v1;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 437))
    return 0;
  v1 = _db_write_lock(a1);
  if ((_DWORD)v1)
  {
    v3 = *__error();
    v4 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = v1;
      if ((_DWORD)v1 == -1)
        v5 = *__error();
      v6 = 136315650;
      v7 = "_data_map32_wrlock";
      v8 = 1024;
      v9 = 289;
      v10 = 1024;
      v11 = v5;
      _os_log_error_impl(&dword_1B8270000, v4, OS_LOG_TYPE_ERROR, "%s:%d: _data_map32_wrlock error %d", (uint8_t *)&v6, 0x18u);
    }
    *__error() = v3;
  }
  return v1;
}

uint64_t _data_map32_rdlock(uint64_t a1)
{
  uint64_t lock;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 437))
    return 0;
  lock = db_read_lock(a1);
  if ((_DWORD)lock)
  {
    v3 = *__error();
    v4 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = lock;
      if ((_DWORD)lock == -1)
        v5 = *__error();
      v6 = 136315650;
      v7 = "_data_map32_rdlock";
      v8 = 1024;
      v9 = 299;
      v10 = 1024;
      v11 = v5;
      _os_log_error_impl(&dword_1B8270000, v4, OS_LOG_TYPE_ERROR, "%s:%d: _data_map32_rdlock error %d", (uint8_t *)&v6, 0x18u);
    }
    *__error() = v3;
  }
  return lock;
}

uint64_t _data_map32_unlock(uint64_t a1)
{
  uint64_t v1;
  int v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 437))
    return 0;
  v1 = db_rwlock_unlock_unknown(a1);
  if ((_DWORD)v1)
  {
    v3 = *__error();
    v4 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = v1;
      if ((_DWORD)v1 == -1)
        v5 = *__error();
      v6 = 136315650;
      v7 = "_data_map32_unlock";
      v8 = 1024;
      v9 = 309;
      v10 = 1024;
      v11 = v5;
      _os_log_error_impl(&dword_1B8270000, v4, OS_LOG_TYPE_ERROR, "%s:%d: _data_map32_unlock error %d", (uint8_t *)&v6, 0x18u);
    }
    *__error() = v3;
  }
  return v1;
}

uint64_t _data_map32_commit(uint64_t a1, int a2)
{
  unsigned int v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void (*v13)(_QWORD);
  int v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD);
  int v32;
  NSObject *v33;
  os_log_type_t v34;
  char *v35;
  const char *v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  uint8_t buf[4];
  char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  int v48;
  uint8_t v49[32];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (_data_map32_rdlock(a1))
    return 0xFFFFFFFFLL;
  v42 = 0;
  makeThreadId();
  do
  {
    v5 = __ldxr(exceptionSequenceNum);
    v6 = v5 + 1;
  }
  while (__stxr(v5 + 1, exceptionSequenceNum));
  v7 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11926, a1, 0, v6);
  v41 = HIDWORD(v7);
  *(_DWORD *)buf = v7;
  v39 = v9;
  v40 = v8;
  v10 = *(_QWORD *)&threadData[18 * v7 + 2];
  v11 = v10 + 320 * HIDWORD(v7);
  v12 = *(_DWORD *)(v11 + 312);
  v13 = *(void (**)(_QWORD))(v11 + 224);
  if (v13)
    v13(*(_QWORD *)(v10 + 320 * HIDWORD(v7) + 288));
  v38 = *(_DWORD *)buf;
  if (!_setjmp((int *)v11))
  {
    v17 = *(_QWORD *)(a1 + 264);
    if (v17)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18 < 3)
        v19 = v18 + 1;
      else
        v19 = 0;
    }
    else
    {
      v19 = 0;
    }
    SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 5u, v19, *(_DWORD *)(a1 + 364));
    v20 = *(_DWORD *)(*(_QWORD *)(a1 + 264) + 16);
    if (v20)
    {
      if (v20 != 1)
      {
        v24 = *(os_unfair_lock_s **)(a1 + 408);
        v25 = *(_DWORD *)(a1 + 416);
        v22 = 0xFFFFFFFFLL;
        goto LABEL_26;
      }
    }
    else
    {
      v21 = _data_map32_sync_data(a1, a2);
      if ((_DWORD)v21 || (v21 = _data_map32_sync_header(a1, a2), (_DWORD)v21))
      {
LABEL_23:
        v22 = v21;
        v23 = *(_QWORD *)(a1 + 264);
        v24 = *(os_unfair_lock_s **)(a1 + 408);
        v25 = *(_DWORD *)(a1 + 416);
        if (!v23)
        {
          v27 = 0;
LABEL_35:
          v28 = v22;
          SIActivityJournalEvent(v24, v25, 6u, v27, *(_DWORD *)(a1 + 364));
          v42 = 1;
          v29 = *(_QWORD *)&threadData[18 * *(unsigned int *)buf + 2];
          v30 = v29 + 320 * v41;
          *(_DWORD *)(v30 + 312) = v12;
          v31 = *(void (**)(_QWORD))(v30 + 232);
          if (v31)
            v31(*(_QWORD *)(v29 + 320 * v41 + 288));
          dropThreadId(v38, 0, v6);
          v16 = v28;
          goto LABEL_38;
        }
        v20 = *(_DWORD *)(v23 + 16);
LABEL_26:
        if (v20 == 1)
          v26 = 2;
        else
          v26 = 0;
        if (v20 == 2)
          v26 = 3;
        if (v20)
          v27 = v26;
        else
          v27 = 1;
        goto LABEL_35;
      }
    }
    v21 = data_map32_shadow(a1);
    if (!(_DWORD)v21)
    {
      v21 = data_map32_commit_shadow(a1);
      if (!(_DWORD)v21)
        v21 = data_map32_commit_shadow_complete(a1);
    }
    goto LABEL_23;
  }
  v14 = *__error();
  v15 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v49 = 136315394;
    *(_QWORD *)&v49[4] = "_data_map32_commit";
    *(_WORD *)&v49[12] = 1024;
    *(_DWORD *)&v49[14] = 1672;
    _os_log_error_impl(&dword_1B8270000, v15, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v49, 0x12u);
  }
  *__error() = v14;
  *(_DWORD *)(v11 + 312) = v12;
  CIOnThreadCleanUpReset(v39);
  dropThreadId(v38, 1, v6);
  CICleanUpReset(v38, v40);
  v16 = 0xFFFFFFFFLL;
LABEL_38:
  if (!v42)
    *(_DWORD *)(a1 + 440) = 22;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  memset(v49, 0, sizeof(v49));
  v32 = *__error();
  v33 = _SILogForLogForCategory(7);
  v34 = 2 * (dword_1EF19FCA8 < 4);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = fd_name(*(_QWORD *)(a1 + 240), (char *)v49, 0x100uLL);
    v36 = "syncless commit";
    v44 = v35;
    v37 = *(_DWORD *)(a1 + 364);
    *(_DWORD *)buf = 136315650;
    if (a2)
      v36 = "commit";
    v45 = 2080;
    v46 = v36;
    v47 = 1024;
    v48 = v37 - 1;
    _os_log_impl(&dword_1B8270000, v33, v34, "%s complete %s with count: %d", buf, 0x1Cu);
  }
  *__error() = v32;
  _data_map32_unlock(a1);
  return v16;
}

uint64_t _data_map32_sync_data(uint64_t a1, int a2)
{
  unsigned int v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void (*v13)(_QWORD);
  int v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  os_log_type_t v21;
  char *v22;
  const char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD);
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  uint8_t buf[4];
  char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  int v39;
  uint8_t v40[32];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  makeThreadId();
  do
  {
    v5 = __ldxr(exceptionSequenceNum);
    v6 = v5 + 1;
  }
  while (__stxr(v5 + 1, exceptionSequenceNum));
  v7 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11926, a1, 0, v6);
  v31 = HIDWORD(v7);
  v32 = v7;
  v29 = v9;
  v30 = v8;
  v10 = *(_QWORD *)&threadData[18 * v7 + 2];
  v11 = v10 + 320 * HIDWORD(v7);
  v12 = *(_DWORD *)(v11 + 312);
  v13 = *(void (**)(_QWORD))(v11 + 224);
  if (v13)
    v13(*(_QWORD *)(v10 + 320 * HIDWORD(v7) + 288));
  if (_setjmp((int *)v11))
  {
    v14 = *__error();
    v15 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v40 = 136315394;
      *(_QWORD *)&v40[4] = "_data_map32_sync_data";
      *(_WORD *)&v40[12] = 1024;
      *(_DWORD *)&v40[14] = 1524;
      _os_log_error_impl(&dword_1B8270000, v15, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v40, 0x12u);
    }
    *__error() = v14;
    *(_DWORD *)(v11 + 312) = v12;
    CIOnThreadCleanUpReset(v29);
    dropThreadId(v32, 1, v6);
    CICleanUpReset(v32, v30);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 440) && !*(_DWORD *)(*(_QWORD *)(a1 + 264) + 16))
    {
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 7u, 1u, *(_DWORD *)(a1 + 364));
      if (*(_BYTE *)(a1 + 433))
      {
        if (a2)
        {
          v16 = *(unsigned int *)(*(_QWORD *)(a1 + 264) + 32);
          msync((void *)((v16 + *(_QWORD *)(a1 + 288)) & -*MEMORY[0x1E0C85AD8]), (*(_DWORD *)(a1 + 296) - v16), 16);
        }
        *(_BYTE *)(a1 + 433) = 0;
      }
      if (*(_BYTE *)(a1 + 435))
      {
        if (a2)
        {
          v17 = *(unsigned int *)(*(_QWORD *)(a1 + 264) + 40);
          msync((void *)((*(_QWORD *)(a1 + 320) + 4 * v17) & -*MEMORY[0x1E0C85AD8]), 4 * (*(_DWORD *)(a1 + 364) - v17), 16);
        }
        *(_BYTE *)(a1 + 435) = 0;
      }
      if (*(_BYTE *)(a1 + 434))
      {
        if (a2)
          msync(*(void **)(a1 + 352), 4 * *(unsigned int *)(a1 + 360), 16);
        *(_BYTE *)(a1 + 434) = 0;
      }
      v18 = *(_QWORD *)(a1 + 264);
      *(_DWORD *)(v18 + 20) = *(_DWORD *)(a1 + 296);
      *(_QWORD *)(v18 + 24) = *(_QWORD *)(a1 + 360);
      *(_QWORD *)(v18 + 44) = *(_QWORD *)(a1 + 368);
      *(_DWORD *)(v18 + 52) = *(_DWORD *)(a1 + 376);
      *(_DWORD *)(v18 + 16) = 0;
      fd_pwrite(*(_QWORD *)(a1 + 240), v18, 0x38uLL, 0);
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      memset(v40, 0, sizeof(v40));
      v19 = *__error();
      v20 = _SILogForLogForCategory(7);
      v21 = 2 * (dword_1EF19FCA8 < 4);
      if (os_log_type_enabled(v20, v21))
      {
        v22 = fd_name(*(_QWORD *)(a1 + 240), (char *)v40, 0x100uLL);
        v23 = "update";
        v35 = v22;
        v24 = *(_DWORD *)(a1 + 364);
        *(_DWORD *)buf = 136315650;
        if (a2)
          v23 = "sync";
        v36 = 2080;
        v37 = v23;
        v38 = 1024;
        v39 = v24 - 1;
        _os_log_impl(&dword_1B8270000, v20, v21, "%s complete %s map with count: %d", buf, 0x1Cu);
      }
      *__error() = v19;
    }
    v33 = 1;
    v25 = *(_QWORD *)&threadData[18 * v32 + 2];
    v26 = v25 + 320 * v31;
    *(_DWORD *)(v26 + 312) = v12;
    v27 = *(void (**)(_QWORD))(v26 + 232);
    if (v27)
      v27(*(_QWORD *)(v25 + 320 * v31 + 288));
    dropThreadId(v32, 0, v6);
  }
  if (v33)
    return *(unsigned int *)(a1 + 440);
  *(_DWORD *)(a1 + 440) = 22;
  return 22;
}

uint64_t _data_map32_sync_header(uint64_t a1, int a2)
{
  unsigned int v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void (*v13)(_QWORD);
  int v14;
  NSObject *v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  NSObject *v23;
  os_log_type_t v24;
  char *v25;
  const char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD);
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  uint8_t buf[4];
  char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  int v42;
  uint8_t v43[32];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  makeThreadId();
  do
  {
    v5 = __ldxr(exceptionSequenceNum);
    v6 = v5 + 1;
  }
  while (__stxr(v5 + 1, exceptionSequenceNum));
  v7 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11926, a1, 0, v6);
  v34 = HIDWORD(v7);
  v35 = v7;
  v32 = v9;
  v33 = v8;
  v10 = *(_QWORD *)&threadData[18 * v7 + 2];
  v11 = v10 + 320 * HIDWORD(v7);
  v12 = *(_DWORD *)(v11 + 312);
  v13 = *(void (**)(_QWORD))(v11 + 224);
  if (v13)
    v13(*(_QWORD *)(v10 + 320 * HIDWORD(v7) + 288));
  if (_setjmp((int *)v11))
  {
    v14 = *__error();
    v15 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v43 = 136315394;
      *(_QWORD *)&v43[4] = "_data_map32_sync_header";
      *(_WORD *)&v43[12] = 1024;
      *(_DWORD *)&v43[14] = 1575;
      _os_log_error_impl(&dword_1B8270000, v15, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v43, 0x12u);
    }
    *__error() = v14;
    *(_DWORD *)(v11 + 312) = v12;
    CIOnThreadCleanUpReset(v32);
    dropThreadId(v35, 1, v6);
    CICleanUpReset(v35, v33);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 440))
    {
      v16 = *(_DWORD *)(*(_QWORD *)(a1 + 264) + 16);
      if (v16 != 1)
      {
        if (v16 == 2)
          v17 = 3;
        else
          v17 = 0;
        if (v16)
          v18 = v17;
        else
          v18 = 1;
        SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0xAu, v18, *(_DWORD *)(a1 + 364));
        v19 = *(_QWORD *)(a1 + 264);
        v20 = *(_QWORD *)(v19 + 20);
        *(_DWORD *)(v19 + 40) = *(_DWORD *)(v19 + 28);
        *(_DWORD *)(v19 + 20) = *(_DWORD *)(a1 + 296);
        *(_QWORD *)&v21 = *(_QWORD *)(a1 + 360);
        *((_QWORD *)&v21 + 1) = v20;
        *(_OWORD *)(v19 + 24) = v21;
        *(_DWORD *)(v19 + 16) = 0;
        fd_pwrite(*(_QWORD *)(a1 + 240), v19, 0x38uLL, 0);
        if (a2)
          fd_sync(*(_QWORD *)(a1 + 240), 0);
        *(_DWORD *)(*(_QWORD *)(a1 + 264) + 16) = 2;
        SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0xBu, 3u, *(_DWORD *)(a1 + 364));
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        memset(v43, 0, sizeof(v43));
        v22 = *__error();
        v23 = _SILogForLogForCategory(7);
        v24 = 2 * (dword_1EF19FCA8 < 4);
        if (os_log_type_enabled(v23, v24))
        {
          v25 = fd_name(*(_QWORD *)(a1 + 240), (char *)v43, 0x100uLL);
          v26 = "update";
          v38 = v25;
          v27 = *(_DWORD *)(a1 + 364);
          *(_DWORD *)buf = 136315650;
          if (a2)
            v26 = "sync";
          v39 = 2080;
          v40 = v26;
          v41 = 1024;
          v42 = v27 - 1;
          _os_log_impl(&dword_1B8270000, v23, v24, "%s complete %s header with count: %d", buf, 0x1Cu);
        }
        *__error() = v22;
      }
    }
    v36 = 1;
    v28 = *(_QWORD *)&threadData[18 * v35 + 2];
    v29 = v28 + 320 * v34;
    *(_DWORD *)(v29 + 312) = v12;
    v30 = *(void (**)(_QWORD))(v29 + 232);
    if (v30)
      v30(*(_QWORD *)(v28 + 320 * v34 + 288));
    dropThreadId(v35, 0, v6);
  }
  if (v36)
    return *(unsigned int *)(a1 + 440);
  *(_DWORD *)(a1 + 440) = 22;
  return 22;
}

uint64_t data_map32_shadow(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _QWORD *sibling_with_suffix_protected;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;

  result = *(unsigned int *)(a1 + 440);
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 264) + 16) == 2)
    {
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0xCu, 3u, *(_DWORD *)(a1 + 364));
      v3 = *(_QWORD *)(a1 + 264);
      *(_DWORD *)(v3 + 16) = 2;
      sibling_with_suffix_protected = *(_QWORD **)(a1 + 248);
      if (!sibling_with_suffix_protected)
      {
        sibling_with_suffix_protected = fd_create_sibling_with_suffix_protected(*(_QWORD *)(a1 + 240), ".shadow", 514);
        *(_QWORD *)(a1 + 248) = sibling_with_suffix_protected;
        v3 = *(_QWORD *)(a1 + 264);
      }
      fd_pwrite((uint64_t)sibling_with_suffix_protected, v3, 0x38uLL, 0);
      v5 = *(_QWORD *)(a1 + 264);
      if (v5)
      {
        v6 = *(_DWORD *)(v5 + 16);
        if (v6 < 3)
          v7 = v6 + 1;
        else
          v7 = 0;
      }
      else
      {
        v7 = 0;
      }
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0xDu, v7, *(_DWORD *)(a1 + 364));
      return *(unsigned int *)(a1 + 440);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t data_map32_commit_shadow(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 440) && *(_DWORD *)(*(_QWORD *)(a1 + 264) + 16) == 2)
  {
    SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0xEu, 3u, *(_DWORD *)(a1 + 364));
    fd_sync(*(_QWORD *)(a1 + 248), 0);
  }
  fd_release(*(char **)(a1 + 248));
  *(_QWORD *)(a1 + 248) = 0;
  return *(unsigned int *)(a1 + 440);
}

uint64_t data_map32_commit_shadow_complete(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  result = *(unsigned int *)(a1 + 440);
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 264) + 16) == 2)
    {
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0xFu, 3u, *(_DWORD *)(a1 + 364));
      v3 = *(_QWORD *)(a1 + 264);
      *(_QWORD *)(v3 + 32) = *(_QWORD *)(v3 + 20);
      *(_DWORD *)(v3 + 40) = *(_DWORD *)(v3 + 28);
      *(_DWORD *)(v3 + 16) = 1;
      fd_pwrite(*(_QWORD *)(a1 + 240), v3, 0x38uLL, 0);
      fd_sync(*(_QWORD *)(a1 + 240), 0);
      v4 = *(_QWORD *)(a1 + 264);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 16);
        if (v5 < 3)
          v6 = v5 + 1;
        else
          v6 = 0;
      }
      else
      {
        v6 = 0;
      }
      SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 0x10u, v6, *(_DWORD *)(a1 + 364));
      return *(unsigned int *)(a1 + 440);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t _data_map32_match_address(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  BOOL v10;
  BOOL v11;

  if (result)
  {
    v2 = *(_QWORD *)(result + 224);
    if (v2 != -1)
    {
      if (v2)
      {
        if (v2 <= a2)
        {
          v3 = *(unsigned int *)(result + 232);
          if (v2 + v3 > a2)
          {
            v4 = *(_QWORD *)(result + 240);
            v5 = "data ro header";
            v6 = a2;
            v7 = v2;
            v8 = v3;
LABEL_28:
            log_map_access_error_5220(v6, v7, v3, v8, (uint64_t)v5, v4);
            return 1;
          }
        }
      }
      return 0;
    }
    v9 = *(_QWORD *)(result + 288);
    v10 = v9 + 1 < 2 || v9 > a2;
    if (v10 || (v3 = *(unsigned int *)(result + 280), v9 + v3 <= a2))
    {
      v9 = *(_QWORD *)(result + 320);
      v11 = v9 + 1 < 2 || v9 > a2;
      if (v11 || (v3 = *(unsigned int *)(result + 312), v9 + v3 <= a2))
      {
        v9 = *(_QWORD *)(result + 352);
        if (v9 + 1 < 2)
          return 0;
        if (v9 > a2)
          return 0;
        v3 = *(unsigned int *)(result + 348);
        if (v9 + v3 <= a2)
          return 0;
        v8 = *(_DWORD *)(result + 344);
        v4 = *(_QWORD *)(result + 336);
        v5 = "data buckets";
      }
      else
      {
        v8 = *(_DWORD *)(result + 316);
        v4 = *(_QWORD *)(result + 304);
        v5 = "data offsets";
      }
    }
    else
    {
      v8 = *(_DWORD *)(result + 284);
      v4 = *(_QWORD *)(result + 272);
      v5 = "data storage";
    }
    v6 = a2;
    v7 = v9;
    goto LABEL_28;
  }
  return result;
}

uint64_t data_map32_init_with_ctx(uint64_t a1)
{
  int v2;
  int v3;
  unsigned int v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD);
  int v17;
  _DWORD *v18;
  int v19;
  NSObject *v20;
  size_t v21;
  int v22;
  unsigned __int8 v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unsigned int v32;
  char v33;
  int v34;
  NSObject *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD);
  int v40;
  NSObject *v41;
  os_log_type_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  NSObject *v49;
  unsigned __int8 v51;
  _QWORD *v52;
  _QWORD *v53;
  blkcnt_t v54;
  int v55;
  NSObject *v56;
  char *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  const char *v61;
  uint32_t v62;
  _DWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  off_t v66;
  uint64_t v67;
  unsigned int v68;
  off_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  _DWORD *v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  const char *v77;
  const char *v78;
  char *sibling_with_suffix_protected;
  char *v80;
  int v81;
  _DWORD *v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v89;
  int v90;
  unsigned int v91;
  unsigned int v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  char *__s;
  char v110;
  int v111;
  int v112;
  int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  uint8_t v119[4];
  blkcnt_t v120;
  __int16 v121;
  off_t st_size;
  __int16 v123;
  char *v124;
  uint8_t v125[48];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  stat buf;
  char __str[1024];
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)a1;
  __s = *(char **)(a1 + 8);
  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 20);
  bzero(__str, 0x400uLL);
  v5 = malloc_type_calloc(1uLL, 0x1C0uLL, 0x10B00403B8BCE90uLL);
  v6 = v5;
  v7 = (uint64_t)v5;
  v8 = *(_DWORD *)(a1 + 20) & 0x100;
  v5[54] = 842150450;
  *((_QWORD *)v5 + 49) = *(_QWORD *)(a1 + 24);
  *((_QWORD *)v5 + 48) = *(_QWORD *)(a1 + 32);
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a1 + 40);
  v5[104] = *(_DWORD *)(a1 + 56);
  *((_BYTE *)v5 + 437) = (v4 & 8) != 0;
  if ((v4 & 8) == 0)
  {
    *((_QWORD *)v5 + 26) = 0;
    *((_OWORD *)v5 + 11) = 0u;
    *((_OWORD *)v5 + 12) = 0u;
    *((_OWORD *)v5 + 9) = 0u;
    *((_OWORD *)v5 + 10) = 0u;
    *((_OWORD *)v5 + 7) = 0u;
    *((_OWORD *)v5 + 8) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 6) = 0u;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    *((_OWORD *)v5 + 1) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *(_OWORD *)v5 = 0u;
    pthread_mutex_init((pthread_mutex_t *)v5, 0);
  }
  *(_QWORD *)(v7 + 224) = -1;
  *(_QWORD *)(v7 + 264) = 0;
  *(_QWORD *)(v7 + 288) = -1;
  v111 = v3;
  v112 = v3;
  *(_QWORD *)(v7 + 320) = -1;
  v110 = v4;
  *(_QWORD *)(v7 + 352) = -1;
  *(_DWORD *)(v7 + 420) = 0;
  *(_BYTE *)(v7 + 438) = BYTE1(v8);
  makeThreadId();
  do
  {
    v9 = __ldxr(exceptionSequenceNum);
    v10 = v9 + 1;
  }
  while (__stxr(v9 + 1, exceptionSequenceNum));
  v11 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11926, v7, 0, v10);
  v117 = HIDWORD(v11);
  v118 = v11;
  v115 = v13;
  v116 = v12;
  v14 = *(_QWORD *)&threadData[18 * v11 + 2];
  v15 = v14 + 320 * HIDWORD(v11);
  v113 = *(_DWORD *)(v15 + 312);
  v16 = *(void (**)(_QWORD))(v15 + 224);
  if (v16)
    v16(*(_QWORD *)(v14 + 320 * HIDWORD(v11) + 288));
  if (_setjmp((int *)v15))
  {
    v17 = v10;
    v18 = (_DWORD *)(v15 + 312);
    v19 = *__error();
    v20 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v125 = 136315394;
      *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
      *(_WORD *)&v125[12] = 1024;
      *(_DWORD *)&v125[14] = 1389;
      _os_log_error_impl(&dword_1B8270000, v20, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v125, 0x12u);
    }
    *__error() = v19;
    *v18 = v113;
    CIOnThreadCleanUpReset(v115);
    dropThreadId(v118, 1, v17);
    CICleanUpReset(v118, v116);
    v48 = *__error();
    v49 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      v77 = fd_realpath(*(_DWORD **)(v7 + 240), __str);
      *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
      v78 = "";
      *(_DWORD *)v125 = 136315650;
      if (v77)
        v78 = v77;
      *(_WORD *)&v125[12] = 1024;
      *(_DWORD *)&v125[14] = 1391;
      *(_WORD *)&v125[18] = 2080;
      *(_QWORD *)&v125[20] = v78;
      _os_log_error_impl(&dword_1B8270000, v49, OS_LOG_TYPE_ERROR, "%s:%d: exception processing %s", v125, 0x1Cu);
    }
    *__error() = v48;
LABEL_46:
    data_map32_destroy(v7);
    return 0;
  }
  v114 = v10;
  if (!__s || (v21 = strlen(__s), v2 == -1) || !v21 || v21 >= 0xF1)
  {
    v34 = *__error();
    v35 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v125 = 136315394;
      *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
      *(_WORD *)&v125[12] = 1024;
      *(_DWORD *)&v125[14] = 1013;
      v61 = "%s:%d: param error";
      goto LABEL_87;
    }
    goto LABEL_33;
  }
  if ((v4 & 2) != 0)
    v22 = 0;
  else
    v22 = ((v4 & 1) << 10) | 0x20000202;
  if ((v4 & 3) == 2)
  {
    snprintf(__str, 0x400uLL, "%s.map", __s);
    if (v8)
      v23 = 3;
    else
      v23 = 0;
    v24 = fd_create_protected(v2, __str, v22, v23);
    *(_QWORD *)(v7 + 240) = v24;
    v25 = fd_lseek(v24, 0, 2);
    *(_DWORD *)(v7 + 256) = v25;
    if (v25 != -1 && v25 >= 0x4DuLL)
    {
      v26 = fd_mmap(*(_QWORD *)(v7 + 240));
      *(_QWORD *)(v7 + 224) = v26;
      if (v26 == -1)
        goto LABEL_34;
      v27 = *(_DWORD *)(v7 + 256);
      *(_DWORD *)(v7 + 232) = v27;
      if (*(_DWORD *)(v26 + 60) != v27)
        goto LABEL_34;
      *(_QWORD *)(v7 + 264) = v26;
      v28 = *(unsigned int *)(v26 + 64);
      if (v28 >= v27)
        goto LABEL_34;
      v29 = *(unsigned int *)(v26 + 68);
      if (v29 >= v27)
        goto LABEL_34;
      v30 = *(unsigned int *)(v26 + 72);
      if (v30 >= v27)
        goto LABEL_34;
      *(_QWORD *)(v7 + 352) = v26 + v28;
      *(_QWORD *)&v31 = *(_QWORD *)(v26 + 24);
      *(_QWORD *)(v7 + 320) = v26 + v29;
      *(_QWORD *)(v7 + 288) = v26 + v30;
      *(_DWORD *)(v7 + 296) = *(_DWORD *)(v26 + 20);
      v32 = (v30 - v29) >> 2;
      if (*(_DWORD *)(v7 + 328) > DWORD1(v31))
        v32 = DWORD1(v31);
      *(_DWORD *)(v7 + 328) = v32;
      *((_QWORD *)&v31 + 1) = *(_QWORD *)(v26 + 44);
      *(_OWORD *)(v6 + 90) = v31;
      *(_DWORD *)(v7 + 376) = *(_DWORD *)(v26 + 52);
      *(_BYTE *)(v7 + 436) = *(_DWORD *)(v26 + 8) < 9u;
      v33 = 1;
      goto LABEL_151;
    }
    fd_release(*(char **)(v7 + 240));
    *(_DWORD *)(v7 + 256) = 0;
    v51 = v23;
  }
  else if (v8)
  {
    v51 = 3;
  }
  else
  {
    v51 = 0;
  }
  snprintf(__str, 0x400uLL, "%s.header", __s);
  v52 = fd_create_protected(v2, __str, v22, 3u);
  *(_QWORD *)(v7 + 240) = v52;
  *(_DWORD *)(v7 + 256) = fd_lseek(v52, 0, 2);
  snprintf(__str, 0x400uLL, "%s.data", __s);
  v53 = fd_create_protected(v2, __str, v22, v51);
  *(_QWORD *)(v7 + 272) = v53;
  if ((v4 & 3) == 0)
  {
    memset(&buf, 0, sizeof(buf));
    if (!fd_stat((uint64_t)v53, &buf))
    {
      v54 = buf.st_blocks << 9;
      if (buf.st_blocks << 9 > buf.st_size + 0x400000)
      {
        bzero(v125, 0x400uLL);
        v55 = *__error();
        v56 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v119 = 134218498;
          v120 = v54;
          v121 = 2048;
          st_size = buf.st_size;
          v123 = 2080;
          v124 = __str;
          _os_log_impl(&dword_1B8270000, v56, OS_LOG_TYPE_DEFAULT, "found allocated size %lld for %lld %s", v119, 0x20u);
        }
        *__error() = v55;
        snprintf((char *)v125, 0x400uLL, "tmp.%s.data.1", __s);
        v57 = (char *)fd_create_protected(v2, (const char *)v125, 1538, v51);
        if (!fd_copyfile(*(_QWORD *)(v7 + 272), (uint64_t)v57, 0))
        {
          snprintf((char *)v125, 0x400uLL, "tmp.%s.data.2", __s);
          if (!fd_rename(*(_QWORD *)(v7 + 272), (const char *)v125)
            && !fd_rename((uint64_t)v57, __str))
          {
            _fd_unlink_with_origin(*(_QWORD *)(v7 + 272), 0);
            fd_release(*(char **)(v7 + 272));
            *(_QWORD *)(v7 + 272) = v57;
            v57 = 0;
          }
        }
        _fd_unlink_with_origin((uint64_t)v57, 0);
        fd_release(v57);
      }
    }
    v53 = *(_QWORD **)(v7 + 272);
  }
  *(_DWORD *)(v7 + 284) = fd_lseek(v53, 0, 2);
  snprintf(__str, 0x400uLL, "%s.offsets", __s);
  v58 = fd_create_protected(v2, __str, v22, 3u);
  *(_QWORD *)(v7 + 304) = v58;
  *(_DWORD *)(v7 + 316) = fd_lseek(v58, 0, 2);
  snprintf(__str, 0x400uLL, "%s.buckets", __s);
  v59 = fd_create_protected(v2, __str, 514, 3u);
  *(_QWORD *)(v7 + 336) = v59;
  *(_DWORD *)(v7 + 344) = fd_lseek(v59, 0, 2);
  if ((v4 & 1) != 0)
  {
    if (fd_truncate(*(_QWORD *)(v7 + 240), 56) != -1)
    {
      v63 = malloc_type_calloc(1uLL, 0x38uLL, 0x100004021716A34uLL);
      *(_QWORD *)(v7 + 264) = v63;
      *(_DWORD *)(v7 + 256) = 56;
      *(_QWORD *)v63 = 0x446174615000;
      v63[2] = 13;
      v63[3] = v111;
      *((_QWORD *)v63 + 2) = 0;
      v64 = (_QWORD *)MEMORY[0x1E0C85AD8];
      if (fd_truncate(*(_QWORD *)(v7 + 272), *MEMORY[0x1E0C85AD8]) == -1)
      {
        v34 = *__error();
        v35 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          goto LABEL_33;
        *(_DWORD *)v125 = 136315394;
        *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
        *(_WORD *)&v125[12] = 1024;
        *(_DWORD *)&v125[14] = 1150;
        v61 = "%s:%d: fd_truncate error";
        goto LABEL_87;
      }
      v65 = fd_mmap(*(_QWORD *)(v7 + 272));
      *(_QWORD *)(v7 + 288) = v65;
      if (v65 == -1)
      {
        v34 = *__error();
        v35 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          goto LABEL_33;
        *(_DWORD *)v125 = 136315394;
        *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
        *(_WORD *)&v125[12] = 1024;
        *(_DWORD *)&v125[14] = 1155;
        v61 = "%s:%d: storage fd_mmap error";
        goto LABEL_87;
      }
      *(_DWORD *)(v7 + 280) = 0x100000;
      v66 = *v64 & 0xFFFFFFFFFFFFFFFCLL;
      *(_DWORD *)(v7 + 284) = *v64;
      if (fd_truncate(*(_QWORD *)(v7 + 304), v66) == -1)
      {
        v34 = *__error();
        v35 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          goto LABEL_33;
        *(_DWORD *)v125 = 136315394;
        *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
        *(_WORD *)&v125[12] = 1024;
        *(_DWORD *)&v125[14] = 1163;
        v61 = "%s:%d: fd_truncate error";
        goto LABEL_87;
      }
      v67 = fd_mmap(*(_QWORD *)(v7 + 304));
      *(_QWORD *)(v7 + 320) = v67;
      if (v67 == -1)
      {
        v34 = *__error();
        v35 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          goto LABEL_33;
        *(_DWORD *)v125 = 136315394;
        *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
        *(_WORD *)&v125[12] = 1024;
        *(_DWORD *)&v125[14] = 1168;
        v61 = "%s:%d: offsets fd_mmap error";
        goto LABEL_87;
      }
      *(_DWORD *)(v7 + 312) = 0x100000;
      v68 = *v64 >> 2;
      v69 = *v64 & 0xFFFFFFFFFFFFFFFCLL;
      *(_DWORD *)(v7 + 316) = *(_DWORD *)v64 & 0xFFFFFFFC;
      *(_DWORD *)(v7 + 328) = v68;
      if (fd_truncate(*(_QWORD *)(v7 + 336), v69) == -1)
      {
        v34 = *__error();
        v35 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          goto LABEL_33;
        *(_DWORD *)v125 = 136315394;
        *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
        *(_WORD *)&v125[12] = 1024;
        *(_DWORD *)&v125[14] = 1178;
        v61 = "%s:%d: fd_truncate error";
        goto LABEL_87;
      }
      v70 = fd_mmap(*(_QWORD *)(v7 + 336));
      *(_QWORD *)(v7 + 352) = v70;
      if (v70 == -1)
      {
        v34 = *__error();
        v35 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          goto LABEL_33;
        *(_DWORD *)v125 = 136315394;
        *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
        *(_WORD *)&v125[12] = 1024;
        *(_DWORD *)&v125[14] = 1184;
        v61 = "%s:%d: hash fd_mmap error";
        goto LABEL_87;
      }
      *(_DWORD *)(v7 + 348) = 0x100000;
      *(_DWORD *)(v7 + 344) = v69;
      v71 = *v64 >> 2;
      *(_DWORD *)(*(_QWORD *)(v7 + 264) + 24) = v71;
      *(_DWORD *)(v7 + 360) = v71;
      v72 = data_entry_store_11977(*(_QWORD *)(v7 + 288), 0, dword_1E6E38348);
      v73 = *(_DWORD **)(v7 + 264);
      v73[5] = v72;
      *(_DWORD *)(v7 + 296) = v72;
      **(_DWORD **)(v7 + 320) = 0;
      v73[7] = 1;
      *(_DWORD *)(v7 + 364) = 1;
      v74 = v73[4];
      if (v74 < 3)
        v75 = v74 + 1;
      else
        v75 = 0;
      SIActivityJournalEvent(*(os_unfair_lock_s **)(v7 + 408), *(_DWORD *)(v7 + 416), 0, v75, 1u);
      v33 = 0;
      goto LABEL_151;
    }
    v34 = *__error();
    v35 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v125 = 136315394;
      *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
      *(_WORD *)&v125[12] = 1024;
      *(_DWORD *)&v125[14] = 1135;
      v61 = "%s:%d: fd_truncate error";
      goto LABEL_87;
    }
LABEL_33:
    *__error() = v34;
LABEL_34:
    v36 = 0;
    goto LABEL_35;
  }
  if (*(_DWORD *)(v7 + 256) <= 0x37u)
  {
    v34 = *__error();
    v35 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v60 = *(unsigned int *)(v7 + 256);
      *(_DWORD *)v125 = 136315650;
      *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
      *(_WORD *)&v125[12] = 1024;
      *(_DWORD *)&v125[14] = 1213;
      *(_WORD *)&v125[18] = 2048;
      *(_QWORD *)&v125[20] = v60;
      v61 = "%s:%d: invalid header size %ld";
      v62 = 28;
LABEL_88:
      _os_log_error_impl(&dword_1B8270000, v35, OS_LOG_TYPE_ERROR, v61, v125, v62);
      goto LABEL_33;
    }
    goto LABEL_33;
  }
  *(_QWORD *)(v7 + 264) = malloc_type_calloc(1uLL, 0x38uLL, 0x100004021716A34uLL);
  if ((v4 & 0x80) != 0)
  {
    sibling_with_suffix_protected = (char *)fd_create_sibling_with_suffix_protected(*(_QWORD *)(v7 + 240), ".shadow", 0);
    v76 = (v4 >> 2) & 1;
    if (sibling_with_suffix_protected)
    {
      v80 = sibling_with_suffix_protected;
      if (fd_copyfile((uint64_t)sibling_with_suffix_protected, *(_QWORD *)(v7 + 240), 0))
        v81 = (v4 >> 2) & 1;
      else
        v81 = 0;
      v76 = v81;
      fd_release(v80);
    }
  }
  else
  {
    v76 = v4 & 4;
  }
  if (fd_pread(*(_DWORD **)(v7 + 240), *(void **)(v7 + 264), 0x38uLL, 0) != 56)
  {
    v34 = *__error();
    v35 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_DWORD *)v125 = 136315394;
    *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
    *(_WORD *)&v125[12] = 1024;
    *(_DWORD *)&v125[14] = 1232;
    v61 = "%s:%d: header pread error";
    goto LABEL_87;
  }
  v82 = *(_DWORD **)(v7 + 264);
  if (v82[2] == 1)
  {
    if (fd_truncate(*(_QWORD *)(v7 + 240), 56) == -1)
    {
      v34 = *__error();
      v35 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        goto LABEL_33;
      *(_DWORD *)v125 = 136315394;
      *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
      *(_WORD *)&v125[12] = 1024;
      *(_DWORD *)&v125[14] = 1240;
      v61 = "%s:%d: fd_truncate error";
      goto LABEL_87;
    }
    *(_DWORD *)(v7 + 256) = 56;
    v83 = *(_QWORD *)(v7 + 264);
    *(_QWORD *)(v83 + 48) = 0;
    *(_DWORD *)(v83 + 44) = 0;
    *(_DWORD *)(v83 + 8) = 9;
    *(_DWORD *)(v83 + 24) = 0;
    *(_DWORD *)(v7 + 360) = 0;
    v82 = (_DWORD *)v83;
  }
  v84 = v82[7];
  *(_DWORD *)(v7 + 364) = v84;
  v85 = v82[4];
  if (v85 < 3)
    v86 = v85 + 1;
  else
    v86 = 0;
  SIActivityJournalEvent(*(os_unfair_lock_s **)(v7 + 408), *(_DWORD *)(v7 + 416), 1u, v86, v84);
  v87 = *(_QWORD *)(v7 + 264);
  v88 = *(_DWORD *)(v87 + 20);
  *(_DWORD *)(v7 + 296) = v88;
  *(_DWORD *)(v7 + 328) = *(_DWORD *)(v7 + 316) >> 2;
  *(_DWORD *)(v7 + 360) = *(_DWORD *)(v87 + 24);
  *(_QWORD *)(v7 + 368) = *(_QWORD *)(v87 + 44);
  *(_DWORD *)(v7 + 376) = *(_DWORD *)(v87 + 52);
  *(_BYTE *)(v7 + 436) = *(_DWORD *)(v87 + 8) < 9u;
  if (v76)
  {
    v89 = *(_DWORD *)(v87 + 32);
    if (v88 < v89)
      goto LABEL_34;
    v90 = *(_DWORD *)(v87 + 32);
    if (v89 != v88)
    {
      if ((v4 & 2) == 0)
        *(_DWORD *)(v87 + 20) = v89;
      *(_DWORD *)(v7 + 296) = v89;
    }
    v91 = *(_DWORD *)(v7 + 364);
    v92 = *(_DWORD *)(v87 + 40);
    if (v91 < v92)
      goto LABEL_34;
    if (v91 != v92)
    {
      if ((v4 & 2) == 0)
      {
        *(_DWORD *)(v87 + 24) = 0;
        *(_DWORD *)(v87 + 28) = v92;
        *(_DWORD *)(v87 + 20) = v90;
      }
      *(_DWORD *)(v7 + 364) = v92;
      *(_DWORD *)(v7 + 360) = 0;
    }
  }
  v93 = (_QWORD *)MEMORY[0x1E0C85AD8];
  if (((*MEMORY[0x1E0C85AD8] + (unint64_t)*(unsigned int *)(v7 + 284) - 1) & -*MEMORY[0x1E0C85AD8]) <= 0x100000)
    LODWORD(v94) = 0x100000;
  else
    v94 = (*MEMORY[0x1E0C85AD8] + *(unsigned int *)(v7 + 284) - 1) & -*MEMORY[0x1E0C85AD8];
  v95 = fd_mmap(*(_QWORD *)(v7 + 272));
  *(_QWORD *)(v7 + 288) = v95;
  if (v95 == -1)
  {
    v34 = *__error();
    v35 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_DWORD *)v125 = 136315394;
    *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
    *(_WORD *)&v125[12] = 1024;
    *(_DWORD *)&v125[14] = 1300;
    v61 = "%s:%d: storage fd_mmap error";
    goto LABEL_87;
  }
  *(_DWORD *)(v7 + 280) = v94;
  if (((*v93 + (unint64_t)*(unsigned int *)(v7 + 316) - 1) & -*v93) <= 0x100000)
    LODWORD(v96) = 0x100000;
  else
    v96 = (*v93 + *(unsigned int *)(v7 + 316) - 1) & -*v93;
  v97 = fd_mmap(*(_QWORD *)(v7 + 304));
  *(_QWORD *)(v7 + 320) = v97;
  if (v97 == -1)
  {
    v34 = *__error();
    v35 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_DWORD *)v125 = 136315394;
    *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
    *(_WORD *)&v125[12] = 1024;
    *(_DWORD *)&v125[14] = 1308;
    v61 = "%s:%d: offset fd_mmap error";
    goto LABEL_87;
  }
  *(_DWORD *)(v7 + 312) = v96;
  if (((*v93 + (unint64_t)*(unsigned int *)(v7 + 344) - 1) & -*v93) <= 0x100000)
    LODWORD(v98) = 0x100000;
  else
    v98 = (*v93 + *(unsigned int *)(v7 + 344) - 1) & -*v93;
  v99 = fd_mmap(*(_QWORD *)(v7 + 336));
  *(_QWORD *)(v7 + 352) = v99;
  if (v99 == -1)
  {
    v34 = *__error();
    v35 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_DWORD *)v125 = 136315394;
    *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
    *(_WORD *)&v125[12] = 1024;
    *(_DWORD *)&v125[14] = 1317;
    v61 = "%s:%d: offset fd_mmap error";
    goto LABEL_87;
  }
  *(_DWORD *)(v7 + 348) = v98;
  v100 = *(_QWORD *)(v7 + 264);
  if (!*(_DWORD *)(v100 + 28))
  {
    *(_DWORD *)(v100 + 28) = 1;
    *(_DWORD *)(v7 + 364) = 1;
  }
  v33 = 0;
LABEL_151:
  if (*(_DWORD *)(v7 + 328) < *(_DWORD *)(v7 + 364))
  {
    v34 = *__error();
    v35 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    v101 = *(unsigned int *)(v7 + 328);
    v102 = *(_DWORD *)(v7 + 364);
    *(_DWORD *)v125 = 136315906;
    *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
    *(_WORD *)&v125[12] = 1024;
    *(_DWORD *)&v125[14] = 1337;
    *(_WORD *)&v125[18] = 2048;
    *(_QWORD *)&v125[20] = v101;
    *(_WORD *)&v125[28] = 1024;
    *(_DWORD *)&v125[30] = v102;
    v61 = "%s:%d: invalid offset size 1 - %ld %d";
    v62 = 34;
    goto LABEL_88;
  }
  v103 = *(_QWORD *)(v7 + 264);
  if (*(_QWORD *)v103 != 0x446174615000)
  {
    v34 = *__error();
    v35 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_DWORD *)v125 = 136315394;
    *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
    *(_WORD *)&v125[12] = 1024;
    *(_DWORD *)&v125[14] = 1341;
    v61 = "%s:%d: invalid offset signature";
    goto LABEL_87;
  }
  v104 = *(_DWORD *)(v103 + 8);
  if ((v104 - 8) >= 6 && v104 != 1)
  {
    v34 = *__error();
    v35 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_DWORD *)v125 = 136315650;
    *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
    *(_WORD *)&v125[12] = 1024;
    *(_DWORD *)&v125[14] = 1347;
    *(_WORD *)&v125[18] = 1024;
    *(_DWORD *)&v125[20] = v104;
    v61 = "%s:%d: invalid version %d";
    v62 = 24;
    goto LABEL_88;
  }
  if (*(_DWORD *)(v103 + 12) != v112)
  {
    v34 = *__error();
    v35 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    v105 = *(_DWORD *)(*(_QWORD *)(v7 + 264) + 12);
    *(_DWORD *)v125 = 136315906;
    *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
    *(_WORD *)&v125[12] = 1024;
    *(_DWORD *)&v125[14] = 1351;
    *(_WORD *)&v125[18] = 1024;
    *(_DWORD *)&v125[20] = v105;
    *(_WORD *)&v125[24] = 1024;
    *(_DWORD *)&v125[26] = v111;
    v61 = "%s:%d: invalid extra_size %d %d";
    v62 = 30;
    goto LABEL_88;
  }
  *(_DWORD *)(v7 + 220) = v111;
  if ((v33 & 1) == 0)
  {
    if (*(_DWORD *)(v7 + 256) <= 0x37u)
    {
      v34 = *__error();
      v35 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        goto LABEL_33;
      *(_DWORD *)v125 = 136315394;
      *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
      *(_WORD *)&v125[12] = 1024;
      *(_DWORD *)&v125[14] = 1359;
      v61 = "%s:%d: invalid header size";
      goto LABEL_87;
    }
    if (*(_DWORD *)(v7 + 284) < *(_DWORD *)(v7 + 296))
    {
      v34 = *__error();
      v35 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        goto LABEL_33;
      *(_DWORD *)v125 = 136315394;
      *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
      *(_WORD *)&v125[12] = 1024;
      *(_DWORD *)&v125[14] = 1364;
      v61 = "%s:%d: invalid storage size 1";
      goto LABEL_87;
    }
    if ((v110 & 0x80) == 0)
    {
      if (*(_DWORD *)(v103 + 16))
      {
        v106 = *(unsigned int *)(v7 + 360);
        if ((_DWORD)v106)
        {
          v107 = 4 * v106;
          v108 = *(unsigned int *)(v7 + 344);
          if (v107 <= v108)
          {
LABEL_178:
            if (v107 <= v108)
              goto LABEL_158;
            v34 = *__error();
            v35 = _SILogForLogForCategory(0);
            if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
              goto LABEL_33;
            *(_DWORD *)v125 = 136315394;
            *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
            *(_WORD *)&v125[12] = 1024;
            *(_DWORD *)&v125[14] = 1377;
            v61 = "%s:%d: invalid hash size 1";
            goto LABEL_87;
          }
        }
      }
    }
    if (_data_map32_rehash(v7))
    {
      v108 = *(unsigned int *)(v7 + 344);
      v107 = 4 * *(unsigned int *)(v7 + 360);
      goto LABEL_178;
    }
    v34 = *__error();
    v35 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      goto LABEL_33;
    *(_DWORD *)v125 = 136315394;
    *(_QWORD *)&v125[4] = "data_map32_init_with_ctx";
    *(_WORD *)&v125[12] = 1024;
    *(_DWORD *)&v125[14] = 1370;
    v61 = "%s:%d: re-build hash error";
LABEL_87:
    v62 = 18;
    goto LABEL_88;
  }
LABEL_158:
  v36 = 1;
LABEL_35:
  v37 = *(_QWORD *)&threadData[18 * v118 + 2];
  v38 = v37 + 320 * v117;
  *(_DWORD *)(v38 + 312) = v113;
  v39 = *(void (**)(_QWORD))(v38 + 232);
  if (v39)
    v39(*(_QWORD *)(v37 + 320 * v117 + 288));
  dropThreadId(v118, 0, v114);
  if ((v36 & 1) == 0)
    goto LABEL_46;
  v137 = 0u;
  v138 = 0u;
  v135 = 0u;
  v136 = 0u;
  v133 = 0u;
  v134 = 0u;
  v131 = 0u;
  v132 = 0u;
  v129 = 0u;
  v130 = 0u;
  v127 = 0u;
  v128 = 0u;
  v126 = 0u;
  memset(v125, 0, sizeof(v125));
  v40 = *__error();
  v41 = _SILogForLogForCategory(7);
  v42 = 2 * (dword_1EF19FCA8 < 4);
  if (os_log_type_enabled(v41, v42))
  {
    v43 = fd_name(*(_QWORD *)(v7 + 240), (char *)v125, 0x100uLL);
    v44 = *(_DWORD *)(v7 + 364) - 1;
    buf.st_dev = 136315394;
    *(_QWORD *)&buf.st_mode = v43;
    WORD2(buf.st_ino) = 1024;
    *(_DWORD *)((char *)&buf.st_ino + 6) = v44;
    _os_log_impl(&dword_1B8270000, v41, v42, "Opened map %s with counts: %d", (uint8_t *)&buf, 0x12u);
  }
  *__error() = v40;
  v45 = *(_QWORD *)(v7 + 264);
  if (v45)
  {
    v46 = *(_DWORD *)(v45 + 16);
    if (v46 < 3)
      v47 = v46 + 1;
    else
      v47 = 0;
  }
  else
  {
    v47 = 0;
  }
  SIActivityJournalEvent(*(os_unfair_lock_s **)(v7 + 408), *(_DWORD *)(v7 + 416), 1u, v47, *(_DWORD *)(v7 + 364));
  return v7;
}

uint64_t data_entry_store_11977(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;
  int v9;
  _BYTE *v11;

  v4 = a2;
  v5 = *a3;
  v6 = *a3 >> 28;
  if (v6)
  {
    v8 = (_BYTE *)(a1 + a2);
    *v8 = v5 | 0x80;
    v8[1] = (v5 >> 7) | 0x80;
    v8[2] = (v5 >> 14) | 0x80;
    v4 = a2 + 4;
    v8[3] = (v5 >> 21) | 0x80;
  }
  else if ((v5 & 0xFE00000) != 0)
  {
    v7 = (_BYTE *)(a1 + a2);
    *v7 = v5 | 0x80;
    v7[1] = (v5 >> 7) | 0x80;
    v4 = a2 + 3;
    v7[2] = (v5 >> 14) | 0x80;
    v6 = (v5 & 0xFE00000) >> 21;
  }
  else if ((v5 & 0x1FC000) != 0)
  {
    v11 = (_BYTE *)(a1 + a2);
    *v11 = v5 | 0x80;
    v4 = a2 + 2;
    v11[1] = (v5 >> 7) | 0x80;
    v6 = (v5 & 0x1FC000) >> 14;
  }
  else if ((v5 & 0x3F80) != 0)
  {
    *(_BYTE *)(a1 + a2) = v5 | 0x80;
    v4 = a2 + 1;
    v6 = (unsigned __int16)(v5 & 0x3F80) >> 7;
  }
  else
  {
    v6 = *a3;
  }
  *(_BYTE *)(a1 + v4) = v6;
  v9 = v4 + 1;
  memcpy((void *)(a1 + (v4 + 1)), *((const void **)a3 + 1), *a3);
  return *a3 + v9;
}

uint64_t _data_map32_rehash(uint64_t a1)
{
  int v2;
  int v3;
  NSObject *v4;
  os_log_type_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t i;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _DWORD *bucket_entry;
  uint64_t result;
  int v28;
  NSObject *v29;
  uint64_t v30;
  char *v31;
  const char *v32;
  uint8_t *v33;
  NSObject *v34;
  uint32_t v35;
  uint64_t v36;
  size_t v37;
  NSObject *v38;
  int v39;
  NSObject *v40;
  int *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint8_t v47[4];
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  char *v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  char *v60;
  uint8_t buf[32];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char __s[48];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 372) = 0;
  v2 = *(_DWORD *)(a1 + 364) - *(_DWORD *)(a1 + 368);
  v3 = *__error();
  v4 = _SILogForLogForCategory(0);
  v5 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_DWORD *)(a1 + 364);
    v7 = *(_DWORD *)(a1 + 368);
    v8 = *(_DWORD *)(a1 + 360);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v6;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v7;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v2;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v62) = v8;
    _os_log_impl(&dword_1B8270000, v4, v5, "rehash %p max id: %d deletes: %d count: %d hash_size: %d", buf, 0x24u);
  }
  *__error() = v3;
  v9 = *(_QWORD *)(a1 + 264);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 + 16);
    if (v10 < 3)
      v11 = v10 + 1;
    else
      v11 = 0;
  }
  else
  {
    v11 = 0;
  }
  SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 3u, v11, *(_DWORD *)(a1 + 364));
  msync(*(void **)(a1 + 352), 4 * *(unsigned int *)(a1 + 360), 4);
  if (fd_truncate(*(_QWORD *)(a1 + 336), 0) == -1)
    goto LABEL_38;
  v12 = 2 * v2;
  if (2 * v2 <= (*MEMORY[0x1E0C85AD8] >> 2))
    v12 = *MEMORY[0x1E0C85AD8] >> 2;
  *(_DWORD *)(a1 + 360) = v12;
  v13 = 4 * v12;
  if (fd_truncate(*(_QWORD *)(a1 + 336), v13) == -1)
    goto LABEL_38;
  if (!*(_BYTE *)(a1 + 434))
  {
    _data_map32_dirty(a1);
    *(_BYTE *)(a1 + 434) = 1;
  }
  *(_DWORD *)(a1 + 344) = v13;
  v14 = *(unsigned int *)(a1 + 348);
  if (v13 <= v14)
    goto LABEL_19;
  v15 = v13 & 0xFFFFFFFC;
  v16 = *(unsigned int *)(a1 + 348);
  do
  {
    v17 = v16;
    v16 *= 2;
  }
  while (v17 < v15);
  munmap(*(void **)(a1 + 352), v14);
  *(_DWORD *)(a1 + 348) = 0;
  *(_QWORD *)(a1 + 352) = -1;
  v18 = fd_mmap(*(_QWORD *)(a1 + 336));
  *(_QWORD *)(a1 + 352) = v18;
  if (v18 == -1)
  {
LABEL_38:
    v39 = *__error();
    v40 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "_data_map32_rehash";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 631;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a1;
      _os_log_error_impl(&dword_1B8270000, v40, OS_LOG_TYPE_ERROR, "%s:%d: re-build hash error %p", buf, 0x1Cu);
    }
    v41 = __error();
    result = 0;
    *v41 = v39;
    return result;
  }
  *(_DWORD *)(a1 + 348) = v17;
LABEL_19:
  v19 = *(unsigned int *)(a1 + 364);
  if (v19 >= 2)
  {
    for (i = 1; i < v19; ++i)
    {
      v21 = *(_QWORD *)(a1 + 320);
      if (!v21)
        goto LABEL_38;
      v22 = *(unsigned int *)(v21 + 4 * i);
      if ((_DWORD)v22 != 1)
      {
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v23 = *(_DWORD *)(a1 + 296);
        if (v23 <= v22)
        {
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          memset(buf, 0, sizeof(buf));
          v28 = *__error();
          v29 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            v30 = *(unsigned int *)(a1 + 296);
            v31 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
            *(_DWORD *)__s = 136316418;
            *(_QWORD *)&__s[4] = "_data_map32_get_data_entry";
            *(_WORD *)&__s[12] = 1024;
            *(_DWORD *)&__s[14] = 445;
            *(_WORD *)&__s[18] = 2048;
            *(_QWORD *)&__s[20] = v22;
            *(_WORD *)&__s[28] = 2048;
            *(_QWORD *)&__s[30] = v30;
            *(_WORD *)&__s[38] = 2048;
            *(_QWORD *)&__s[40] = a1;
            LOWORD(v77) = 2080;
            *(_QWORD *)((char *)&v77 + 2) = v31;
            v32 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
            v33 = (uint8_t *)__s;
            v34 = v29;
            v35 = 58;
            goto LABEL_42;
          }
LABEL_37:
          *__error() = v28;
          goto LABEL_38;
        }
        data_entry_restore_12001(*(_QWORD *)(a1 + 288), v22, v23, (uint64_t)&v44, &v46);
        if (v46)
        {
          v36 = 0;
          v86 = 0;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v77 = 0u;
          memset(__s, 0, sizeof(__s));
          do
          {
            if (v22 + v36 >= (unint64_t)*(unsigned int *)(a1 + 296))
              break;
            v37 = strlen(__s);
            sprintf(&__s[v37], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a1 + 288) + v22 + v36++));
          }
          while (v36 != 5);
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          v64 = 0u;
          v65 = 0u;
          v62 = 0u;
          v63 = 0u;
          memset(buf, 0, sizeof(buf));
          v28 = *__error();
          v38 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            goto LABEL_37;
          v42 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
          v43 = *(unsigned int *)(a1 + 296);
          *(_DWORD *)v47 = 136316674;
          v48 = "_data_map32_get_data_entry";
          v49 = 1024;
          v50 = 441;
          v51 = 2080;
          v52 = v42;
          v53 = 2048;
          v54 = v22;
          v55 = 2048;
          v56 = v43;
          v57 = 2048;
          v58 = v44;
          v59 = 2080;
          v60 = __s;
          v32 = "%s:%d: data_entry_restore failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          v33 = v47;
          v34 = v38;
          v35 = 68;
LABEL_42:
          _os_log_error_impl(&dword_1B8270000, v34, OS_LOG_TYPE_ERROR, v32, v33, v35);
          goto LABEL_37;
        }
        v24 = *(_DWORD *)(a1 + 220);
        if (v44 < v24)
          goto LABEL_38;
        v25 = data_entry_hash(v44, v45, v24, *(unsigned __int8 *)(a1 + 436));
        bucket_entry = (_DWORD *)_data_map32_get_bucket_entry(a1, v25, i, 0, 0);
        if (!bucket_entry || *bucket_entry)
          goto LABEL_38;
        *bucket_entry = i;
        v19 = *(unsigned int *)(a1 + 364);
      }
    }
  }
  return 1;
}

void data_map32_destroy(uint64_t a1)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(_QWORD);
  _DWORD *v11;
  int v12;
  NSObject *v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void (*v22)(_QWORD);
  _DWORD *v23;
  int v24;
  NSObject *v25;
  size_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD);
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD);
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  char *v43;
  _QWORD *v44;
  const void *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  char v54;
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    makeThreadId();
    if ((unint64_t)(*(_QWORD *)(a1 + 224) + 1) > 1)
    {
      v54 = 0;
      do
      {
        v14 = __ldxr(exceptionSequenceNum);
        v15 = v14 + 1;
      }
      while (__stxr(v14 + 1, exceptionSequenceNum));
      v16 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11926, a1, 0, v15);
      v51 = HIDWORD(v16);
      v53 = v16;
      v47 = v18;
      v49 = v17;
      v19 = *(_QWORD *)&threadData[18 * v16 + 2];
      v20 = v19 + 320 * HIDWORD(v16);
      v21 = *(_DWORD *)(v20 + 312);
      v22 = *(void (**)(_QWORD))(v20 + 224);
      if (v22)
        v22(*(_QWORD *)(v19 + 320 * HIDWORD(v16) + 288));
      if (_setjmp((int *)v20))
      {
        v23 = (_DWORD *)(v20 + 312);
        v24 = *__error();
        v25 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v56 = "data_map32_destroy";
          v57 = 1024;
          v58 = 1844;
          _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
        }
        *__error() = v24;
        *v23 = v21;
        CIOnThreadCleanUpReset(v47);
        dropThreadId(v53, 1, v15);
        CICleanUpReset(v53, v49);
        v26 = 0;
      }
      else
      {
        v30 = *(unsigned int *)(*(_QWORD *)(a1 + 224) + 60);
        v54 = 1;
        v31 = *(_QWORD *)&threadData[18 * v53 + 2];
        v32 = v31 + 320 * v51;
        *(_DWORD *)(v32 + 312) = v21;
        v33 = *(void (**)(_QWORD))(v32 + 232);
        if (v33)
          v33(*(_QWORD *)(v31 + 320 * v51 + 288));
        dropThreadId(v53, 0, v15);
        v26 = v30;
      }
      v34 = v26;
      if (!v54)
        v34 = *(unsigned int *)(a1 + 232);
      munmap(*(void **)(a1 + 224), v34);
      *(_QWORD *)(a1 + 224) = -1;
      fd_release(*(char **)(a1 + 240));
      *(_QWORD *)(a1 + 240) = 0;
    }
    else
    {
      do
      {
        v2 = __ldxr(exceptionSequenceNum);
        v3 = v2 + 1;
      }
      while (__stxr(v2 + 1, exceptionSequenceNum));
      v4 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11926, a1, 0, v3);
      v50 = HIDWORD(v4);
      v52 = v4;
      v46 = v6;
      v48 = v5;
      v7 = *(_QWORD *)&threadData[18 * v4 + 2];
      v8 = v7 + 320 * HIDWORD(v4);
      v9 = *(_DWORD *)(v8 + 312);
      v10 = *(void (**)(_QWORD))(v8 + 224);
      if (v10)
        v10(*(_QWORD *)(v7 + 320 * HIDWORD(v4) + 288));
      if (_setjmp((int *)v8))
      {
        v11 = (_DWORD *)(v8 + 312);
        v12 = *__error();
        v13 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v56 = "data_map32_destroy";
          v57 = 1024;
          v58 = 1894;
          _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
        }
        *__error() = v12;
        *v11 = v9;
        CIOnThreadCleanUpReset(v46);
        dropThreadId(v52, 1, v3);
        CICleanUpReset(v52, v48);
      }
      else
      {
        v27 = *(_QWORD *)(a1 + 264);
        if (v27)
        {
          v28 = *(_DWORD *)(v27 + 16);
          if (v28 < 3)
            v29 = v28 + 1;
          else
            v29 = 0;
        }
        else
        {
          v29 = 0;
        }
        SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 2u, v29, *(_DWORD *)(a1 + 364));
        v35 = *(_QWORD *)(a1 + 264);
        if (v35 && !*(_DWORD *)(v35 + 16))
        {
          if (*(_BYTE *)(a1 + 434))
          {
            msync(*(void **)(a1 + 352), 4 * *(unsigned int *)(a1 + 360), 4);
            _fd_unlink_with_origin(*(_QWORD *)(a1 + 336), 0);
            munmap(*(void **)(a1 + 352), *(unsigned int *)(a1 + 348));
            *(_QWORD *)(a1 + 352) = -1;
          }
          if (*(_BYTE *)(a1 + 433))
          {
            msync(*(void **)(a1 + 288), *(unsigned int *)(a1 + 296), 4);
            munmap(*(void **)(a1 + 288), *(unsigned int *)(a1 + 280));
            *(_QWORD *)(a1 + 288) = -1;
            fd_truncate(*(_QWORD *)(a1 + 272), *(unsigned int *)(*(_QWORD *)(a1 + 264) + 20));
          }
          if (*(_BYTE *)(a1 + 435))
          {
            msync(*(void **)(a1 + 320), 4 * *(unsigned int *)(a1 + 364), 4);
            munmap(*(void **)(a1 + 320), *(unsigned int *)(a1 + 312));
            *(_QWORD *)(a1 + 320) = -1;
            fd_truncate(*(_QWORD *)(a1 + 304), 4 * *(unsigned int *)(a1 + 364));
          }
        }
        v36 = *(_QWORD *)&threadData[18 * v52 + 2];
        v37 = v36 + 320 * v50;
        *(_DWORD *)(v37 + 312) = v9;
        v38 = *(void (**)(_QWORD))(v37 + 232);
        if (v38)
          v38(*(_QWORD *)(v36 + 320 * v50 + 288));
        dropThreadId(v52, 0, v3);
      }
      v39 = *(void **)(a1 + 264);
      if (v39)
      {
        free(v39);
        *(_QWORD *)(a1 + 264) = 0;
      }
      fd_release(*(char **)(a1 + 240));
      *(_QWORD *)(a1 + 240) = 0;
      v40 = *(void **)(a1 + 288);
      if (v40 != (void *)-1)
      {
        munmap(v40, *(unsigned int *)(a1 + 280));
        *(_QWORD *)(a1 + 288) = -1;
        *(_DWORD *)(a1 + 280) = 0;
      }
      fd_release(*(char **)(a1 + 272));
      *(_QWORD *)(a1 + 272) = 0;
      v41 = *(void **)(a1 + 320);
      if (v41 != (void *)-1)
      {
        munmap(v41, *(unsigned int *)(a1 + 312));
        *(_QWORD *)(a1 + 320) = -1;
        *(_DWORD *)(a1 + 312) = 0;
      }
      fd_release(*(char **)(a1 + 304));
      *(_QWORD *)(a1 + 304) = 0;
      v42 = *(void **)(a1 + 352);
      if (v42 != (void *)-1)
      {
        munmap(v42, *(unsigned int *)(a1 + 348));
        *(_QWORD *)(a1 + 352) = -1;
        *(_DWORD *)(a1 + 348) = 0;
      }
      fd_release(*(char **)(a1 + 336));
      *(_QWORD *)(a1 + 336) = 0;
    }
    v43 = *(char **)(a1 + 248);
    if (v43)
    {
      fd_release(v43);
      *(_QWORD *)(a1 + 248) = 0;
    }
    v44 = *(_QWORD **)(a1 + 424);
    if (v44)
    {
      v45 = (const void *)v44[2];
      if (v45)
        CFRelease(v45);
      free(v44);
      *(_QWORD *)(a1 + 424) = 0;
    }
    if (!*(_BYTE *)(a1 + 437))
      db_rwlock_destroy((pthread_mutex_t *)a1);
    free((void *)a1);
  }
}

uint64_t _data_map32_dirty(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 264);
  if (*(_DWORD *)(v1 + 16))
  {
    v2 = result;
    *(_DWORD *)(v1 + 16) = 0;
    fd_pwrite(*(_QWORD *)(result + 240), v1, 0x38uLL, 0);
    return fd_sync(*(_QWORD *)(v2 + 240), 0);
  }
  return result;
}

uint64_t data_entry_restore_12001(uint64_t result, unsigned int a2, unsigned int a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  char *v18;
  char *v19;
  const char *v20;
  uint64_t v21;

  v5 = a2;
  v6 = a2 + 1;
  v7 = *(unsigned __int8 *)(result + a2);
  if ((*(char *)(result + a2) & 0x80000000) == 0)
  {
    v5 = a2 + 1;
    goto LABEL_16;
  }
  if (v6 >= a3)
    goto LABEL_15;
  v8 = a2 + 2;
  v9 = *(char *)(result + v6);
  v10 = *(unsigned __int8 *)(result + v6);
  if ((v9 & 0x80000000) == 0)
  {
    v7 = v7 & 0x7F | (v10 << 7);
    v5 = a2 + 2;
    goto LABEL_16;
  }
  if (v8 >= a3)
    goto LABEL_15;
  v11 = a2 + 3;
  v12 = *(char *)(result + v8);
  v13 = *(unsigned __int8 *)(result + v8);
  if ((v12 & 0x80000000) == 0)
  {
    v5 = a2 + 3;
    v7 = ((v10 & 0x7F) << 7) | (v13 << 14) | v7 & 0x7F;
    goto LABEL_16;
  }
  if (v11 >= a3)
    goto LABEL_15;
  v14 = a2 + 4;
  v15 = *(char *)(result + v11);
  v16 = *(unsigned __int8 *)(result + v11);
  if ((v15 & 0x80000000) == 0)
  {
    v5 = a2 + 4;
    v7 = ((v13 & 0x7F) << 14) | (v16 << 21) | ((v10 & 0x7F) << 7) | v7 & 0x7F;
    goto LABEL_16;
  }
  if (v14 >= a3)
  {
LABEL_15:
    v7 = 0;
    *a5 = 1;
  }
  else
  {
    v17 = *(char *)(result + v14);
    if (v17 < 0)
    {
      v18 = __si_assert_copy_extra_268();
      v19 = v18;
      v20 = "";
      if (v18)
        v20 = v18;
      __message_assert(v18, "VIntUtils.h", 388, "(b4 & 0x80) == 0", v20);
      free(v19);
      if (__valid_fs(-1))
        v21 = 2989;
      else
        v21 = 3072;
      *(_DWORD *)v21 = -559038737;
      abort();
    }
    v5 = a2 + 5;
    v7 = ((v16 & 0x7F) << 21) | (v17 << 28) | ((v13 & 0x7F) << 14) | ((v10 & 0x7F) << 7) | v7 & 0x7F;
  }
LABEL_16:
  *(_DWORD *)a4 = v7;
  if (v5 + (unint64_t)v7 <= a3)
    *(_QWORD *)(a4 + 8) = result + v5;
  else
    *a5 = 1;
  return result;
}

uint64_t data_entry_hash(int a1, uint64_t a2, unsigned int a3, int a4)
{
  if (a4)
    return LegacyHash((unsigned __int16 *)(a2 + a3), a1 - a3);
  else
    return commonHash(a1 - a3, a2 + a3);
}

uint64_t _data_map32_get_bucket_entry(uint64_t a1, unsigned int a2, unsigned int a3, const void *a4, size_t a5)
{
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  size_t v20;
  int v21;
  NSObject *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  const char *v27;
  uint32_t v28;
  NSObject *v29;
  BOOL v30;
  char *v31;
  unint64_t v32;
  BOOL v33;
  uint64_t result;
  char v35;
  int v36;
  NSObject *v37;
  int *v38;
  int v39;
  NSObject *v40;
  int *v41;
  int v42;
  char *v43;
  int v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v49;
  char v50;
  uint64_t v52;
  void *__s2;
  char v54;
  int v55;
  const char *v56;
  __int16 v57;
  int v58;
  __int16 v59;
  char *v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  char *v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char __s[64];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 364) > a3)
  {
    v7 = 0;
    v8 = *(unsigned int *)(a1 + 360);
    v9 = a2 - a2 / *(_DWORD *)(a1 + 360) * v8;
    v10 = v8;
    v47 = v8;
    while (1)
    {
      v11 = v9;
      if (v9 < v10)
        break;
      v30 = 0;
      v32 = v11;
LABEL_33:
      v33 = v32 != v8;
      if (v30)
        return 0;
      v9 = 0;
      result = 0;
      v35 = v7 | v33;
      v7 = 1;
      v10 = v11;
      if ((v35 & 1) != 0)
        return result;
    }
    v50 = v7;
    v49 = v9;
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 352);
      v13 = *(unsigned int *)(v12 + 4 * v11);
      if ((_DWORD)v13)
        v14 = (_DWORD)v13 == a3;
      else
        v14 = 1;
      if (v14)
        return v12 + 4 * v11;
      if (a3)
        goto LABEL_10;
      if (*(_DWORD *)(a1 + 364) <= v13)
      {
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v39 = *__error();
        v40 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
        {
          v44 = *(_DWORD *)(a1 + 364);
          v45 = fd_name(*(_QWORD *)(a1 + 240), (char *)&v69, 0x100uLL);
          *(_DWORD *)__s = 136316418;
          *(_QWORD *)&__s[4] = "_data_map32_get_offset_entry";
          *(_WORD *)&__s[12] = 1024;
          *(_DWORD *)&__s[14] = 421;
          *(_WORD *)&__s[18] = 1024;
          *(_DWORD *)&__s[20] = v13;
          *(_WORD *)&__s[24] = 1024;
          *(_DWORD *)&__s[26] = v44;
          *(_WORD *)&__s[30] = 2048;
          *(_QWORD *)&__s[32] = a1;
          *(_WORD *)&__s[40] = 2080;
          *(_QWORD *)&__s[42] = v45;
          _os_log_error_impl(&dword_1B8270000, v40, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)__s, 0x32u);
        }
        v41 = __error();
        result = 0;
        *v41 = v39;
        return result;
      }
      v16 = *(_QWORD *)(a1 + 320);
      if (!v16)
        return 0;
      v17 = *(unsigned int *)(v16 + 4 * v13);
      if ((_DWORD)v17 == 1)
        return 0;
      v52 = 0;
      __s2 = 0;
      v54 = 0;
      v18 = *(_DWORD *)(a1 + 296);
      if (v18 <= v17)
      {
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v21 = *__error();
        v29 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          v46 = *(unsigned int *)(a1 + 296);
          v31 = fd_name(*(_QWORD *)(a1 + 240), (char *)&v69, 0x100uLL);
          *(_DWORD *)__s = 136316418;
          *(_QWORD *)&__s[4] = "_data_map32_get_data_entry";
          *(_WORD *)&__s[12] = 1024;
          *(_DWORD *)&__s[14] = 445;
          *(_WORD *)&__s[18] = 2048;
          *(_QWORD *)&__s[20] = v17;
          *(_WORD *)&__s[28] = 2048;
          *(_QWORD *)&__s[30] = v46;
          *(_WORD *)&__s[38] = 2048;
          *(_QWORD *)&__s[40] = a1;
          *(_WORD *)&__s[48] = 2080;
          *(_QWORD *)&__s[50] = v31;
          v25 = __s;
          v26 = v29;
          v27 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
          v28 = 58;
          goto LABEL_30;
        }
      }
      else
      {
        data_entry_restore_12001(*(_QWORD *)(a1 + 288), v17, v18, (uint64_t)&v52, &v54);
        if (!v54)
        {
          if (v52 == a5 && !memcmp(a4, __s2, a5))
            return v12 + 4 * v11;
LABEL_10:
          v15 = 0;
          goto LABEL_23;
        }
        v19 = 0;
        v94 = 0;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        memset(__s, 0, sizeof(__s));
        do
        {
          if (v17 + v19 >= (unint64_t)*(unsigned int *)(a1 + 296))
            break;
          v20 = strlen(__s);
          sprintf(&__s[v20], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a1 + 288) + v17 + v19++));
        }
        while (v19 != 5);
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v21 = *__error();
        v22 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          v23 = fd_name(*(_QWORD *)(a1 + 240), (char *)&v69, 0x100uLL);
          v24 = *(unsigned int *)(a1 + 296);
          v55 = 136316674;
          v56 = "_data_map32_get_data_entry";
          v57 = 1024;
          v58 = 441;
          v59 = 2080;
          v60 = v23;
          v61 = 2048;
          v62 = v17;
          v63 = 2048;
          v64 = v24;
          v65 = 2048;
          v66 = v52;
          v67 = 2080;
          v68 = __s;
          v25 = (char *)&v55;
          v26 = v22;
          v27 = "%s:%d: data_entry_restore failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          v28 = 68;
LABEL_30:
          _os_log_error_impl(&dword_1B8270000, v26, OS_LOG_TYPE_ERROR, v27, (uint8_t *)v25, v28);
        }
      }
      *__error() = v21;
      v15 = 1;
LABEL_23:
      ++v11;
      v30 = v15 != 0;
      if (v15 || v11 >= v10)
      {
        v32 = v11;
        v7 = v50;
        v8 = v47;
        v11 = v49;
        goto LABEL_33;
      }
    }
  }
  if (!a3)
    return 0;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v36 = *__error();
  v37 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    v42 = *(_DWORD *)(a1 + 364);
    v43 = fd_name(*(_QWORD *)(a1 + 240), (char *)&v69, 0x100uLL);
    *(_DWORD *)__s = 136316418;
    *(_QWORD *)&__s[4] = "_data_map32_get_bucket_entry";
    *(_WORD *)&__s[12] = 1024;
    *(_DWORD *)&__s[14] = 515;
    *(_WORD *)&__s[18] = 1024;
    *(_DWORD *)&__s[20] = a3;
    *(_WORD *)&__s[24] = 1024;
    *(_DWORD *)&__s[26] = v42;
    *(_WORD *)&__s[30] = 2048;
    *(_QWORD *)&__s[32] = a1;
    *(_WORD *)&__s[40] = 2080;
    *(_QWORD *)&__s[42] = v43;
    _os_log_error_impl(&dword_1B8270000, v37, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)__s, 0x32u);
  }
  v38 = __error();
  result = 0;
  *v38 = v36;
  return result;
}

uint64_t LegacyHash(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v2 = 0;
  if (a1 && a2 >= 1)
  {
    v3 = a2 & 3;
    if ((unint64_t)a2 >= 4)
    {
      v4 = ((unint64_t)a2 >> 2) + 1;
      do
      {
        v5 = (((_DWORD)a2 + *a1) << 16) ^ (a1[1] << 11) ^ (a2 + *a1);
        a1 += 2;
        LODWORD(a2) = v5 + (v5 >> 11);
        --v4;
      }
      while (v4 > 1);
    }
    switch(v3)
    {
      case 1:
        v7 = (a2 + *(unsigned __int8 *)a1) ^ (((_DWORD)a2 + *(unsigned __int8 *)a1) << 10);
        LODWORD(a2) = v7 + (v7 >> 1);
        break;
      case 2:
        v8 = (a2 + *a1) ^ (((_DWORD)a2 + *a1) << 11);
        LODWORD(a2) = v8 + (v8 >> 17);
        break;
      case 3:
        v6 = (*((unsigned __int8 *)a1 + 2) << 18) ^ (((_DWORD)a2 + *a1) << 16) ^ (a2 + *a1);
        LODWORD(a2) = v6 + (v6 >> 11);
        break;
    }
    v9 = (a2 ^ (8 * a2)) + ((a2 ^ (8 * (_DWORD)a2)) >> 5);
    v10 = (v9 ^ (16 * v9)) + ((v9 ^ (16 * v9)) >> 17);
    return (v10 ^ (v10 << 25)) + ((v10 ^ (v10 << 25)) >> 6);
  }
  return v2;
}

uint64_t data_map32_flush(uint64_t a1)
{
  unsigned int v3;
  int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void (*v11)(_QWORD);
  _DWORD *v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD);
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (_data_map32_rdlock(a1))
    return 0xFFFFFFFFLL;
  v30 = 0;
  makeThreadId();
  do
  {
    v3 = __ldxr(exceptionSequenceNum);
    v4 = v3 + 1;
  }
  while (__stxr(v3 + 1, exceptionSequenceNum));
  v5 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11926, a1, 0, v4);
  v28 = HIDWORD(v5);
  v29 = v5;
  v26 = v7;
  v27 = v6;
  v8 = *(_QWORD *)&threadData[18 * v5 + 2];
  v9 = v8 + 320 * HIDWORD(v5);
  v10 = *(_DWORD *)(v9 + 312);
  v11 = *(void (**)(_QWORD))(v9 + 224);
  if (v11)
    v11(*(_QWORD *)(v8 + 320 * HIDWORD(v5) + 288));
  if (_setjmp((int *)v9))
  {
    v12 = (_DWORD *)(v9 + 312);
    v13 = *__error();
    v14 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v32 = "data_map32_flush";
      v33 = 1024;
      v34 = 1605;
      _os_log_error_impl(&dword_1B8270000, v14, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v13;
    *v12 = v10;
    CIOnThreadCleanUpReset(v26);
    dropThreadId(v29, 1, v4);
    CICleanUpReset(v29, v27);
    v15 = 0xFFFFFFFFLL;
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 264);
    if (v16)
    {
      v17 = *(_DWORD *)(v16 + 16);
      if (v17 < 3)
        v18 = v17 + 1;
      else
        v18 = 0;
    }
    else
    {
      v18 = 0;
    }
    SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 4u, v18, *(_DWORD *)(a1 + 364));
    if (*(_DWORD *)(*(_QWORD *)(a1 + 264) + 16))
      v19 = 0xFFFFFFFFLL;
    else
      v19 = _data_map32_sync_data(a1, 1);
    v30 = 1;
    v20 = *(_QWORD *)&threadData[18 * v29 + 2];
    v21 = v20 + 320 * v28;
    *(_DWORD *)(v21 + 312) = v10;
    v22 = *(void (**)(_QWORD))(v21 + 232);
    if (v22)
      v22(*(_QWORD *)(v20 + 320 * v28 + 288));
    dropThreadId(v29, 0, v4);
    v15 = v19;
  }
  if (!v30)
    *(_DWORD *)(a1 + 440) = 22;
  v23 = *(_QWORD *)(a1 + 264);
  if (v23)
  {
    v24 = *(_DWORD *)(v23 + 16);
    if (v24 < 3)
      v25 = v24 + 1;
    else
      v25 = 0;
  }
  else
  {
    v25 = 0;
  }
  SIActivityJournalEvent(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), 4u, v25, *(_DWORD *)(a1 + 364));
  _data_map32_unlock(a1);
  return v15;
}

uint64_t dm_hash_12059(char a1, unsigned __int16 *a2, uint64_t a3)
{
  if (a1)
    return LegacyHash(a2, a3);
  else
    return commonHash(a3, (uint64_t)a2);
}

uint64_t data_map32_ids_get_locked_with_hash(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, const void *a5, size_t a6)
{
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD);
  int v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  size_t v28;
  int v29;
  NSObject *v30;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  const char *v34;
  uint8_t *v35;
  uint32_t v36;
  int v37;
  NSObject *v38;
  NSObject *v39;
  unsigned int v40;
  int v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  void (*v48)(_QWORD);
  uint64_t result;
  NSObject *log;
  os_log_t v51;
  uint64_t v52;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unint64_t v63;
  unsigned int v64;
  unsigned int v65;
  char v66;
  char v67;
  int v68;
  const char *v69;
  __int16 v70;
  int v71;
  __int16 v72;
  char *v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  _QWORD *v81;
  uint8_t buf[32];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _QWORD v97[8];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v52 = *(unsigned int *)(a2 + 220);
  v7 = *(_DWORD *)(a2 + 360);
  v8 = a3 % v7;
  v9 = a3 % v7;
  v66 = 0;
  makeThreadId();
  do
  {
    v10 = __ldxr(exceptionSequenceNum);
    v11 = v10 + 1;
  }
  while (__stxr(v10 + 1, exceptionSequenceNum));
  v12 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11926, a2, 0, v11);
  v64 = HIDWORD(v12);
  v65 = v12;
  v63 = __PAIR64__(v13, v14);
  v15 = *(_QWORD *)&threadData[18 * v12 + 2];
  v16 = v15 + 320 * HIDWORD(v12);
  v57 = *(_DWORD *)(v16 + 312);
  v17 = *(void (**)(_QWORD))(v16 + 224);
  if (v17)
    v17(*(_QWORD *)(v15 + 320 * HIDWORD(v12) + 288));
  v62 = v65;
  v61 = v64;
  v60 = v63;
  if (_setjmp((int *)v16))
  {
    v18 = *__error();
    v19 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "data_map32_ids_get_locked_with_hash";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2129;
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v18;
    *(_DWORD *)(v16 + 312) = v57;
    CIOnThreadCleanUpReset(v60);
    dropThreadId(v62, 1, v11);
    CICleanUpReset(v62, HIDWORD(v60));
    v20 = 0;
    goto LABEL_41;
  }
  v21 = 0;
  while (1)
  {
    v22 = *(_QWORD *)(a2 + 352);
    v23 = *(unsigned int *)(v22 + 4 * v9);
    if (!(_DWORD)v23)
      break;
    v24 = v9;
    if (*(_DWORD *)(a2 + 364) <= v23)
    {
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      memset(buf, 0, sizeof(buf));
      v37 = *__error();
      v38 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        log = v38;
        v41 = *(_DWORD *)(a2 + 364);
        v42 = fd_name(*(_QWORD *)(a2 + 240), (char *)buf, 0x100uLL);
        LODWORD(v97[0]) = 136316418;
        *(_QWORD *)((char *)v97 + 4) = "_data_map32_get_offset_entry";
        WORD2(v97[1]) = 1024;
        *(_DWORD *)((char *)&v97[1] + 6) = 421;
        WORD1(v97[2]) = 1024;
        HIDWORD(v97[2]) = v23;
        LOWORD(v97[3]) = 1024;
        *(_DWORD *)((char *)&v97[3] + 2) = v41;
        HIWORD(v97[3]) = 2048;
        v97[4] = a2;
        LOWORD(v97[5]) = 2080;
        *(_QWORD *)((char *)&v97[5] + 2) = v42;
        _os_log_error_impl(&dword_1B8270000, log, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)v97, 0x32u);
      }
      *__error() = v37;
      goto LABEL_25;
    }
    v25 = *(unsigned int *)(*(_QWORD *)(a2 + 320) + 4 * v23);
    if ((_DWORD)v25 != 1)
    {
      v58 = 0;
      v59 = 0;
      v67 = 0;
      v26 = *(_DWORD *)(a2 + 296);
      if (v26 <= v25)
      {
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        memset(buf, 0, sizeof(buf));
        v29 = *__error();
        v39 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          v51 = v39;
          v43 = *(unsigned int *)(a2 + 296);
          v44 = fd_name(*(_QWORD *)(a2 + 240), (char *)buf, 0x100uLL);
          LODWORD(v97[0]) = 136316418;
          *(_QWORD *)((char *)v97 + 4) = "_data_map32_get_data_entry";
          WORD2(v97[1]) = 1024;
          *(_DWORD *)((char *)&v97[1] + 6) = 445;
          WORD1(v97[2]) = 2048;
          *(_QWORD *)((char *)&v97[2] + 4) = v25;
          WORD2(v97[3]) = 2048;
          *(_QWORD *)((char *)&v97[3] + 6) = v43;
          HIWORD(v97[4]) = 2048;
          v97[5] = a2;
          LOWORD(v97[6]) = 2080;
          *(_QWORD *)((char *)&v97[6] + 2) = v44;
          v33 = v51;
          v34 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
          v35 = (uint8_t *)v97;
          v36 = 58;
LABEL_36:
          _os_log_error_impl(&dword_1B8270000, v33, OS_LOG_TYPE_ERROR, v34, v35, v36);
        }
      }
      else
      {
        data_entry_restore_12001(*(_QWORD *)(a2 + 288), v25, v26, (uint64_t)&v58, &v67);
        if (!v67)
        {
          if (v52 + a6 == v58 && !memcmp(a5, (const void *)(v59 + v52), a6))
          {
            if (v21 < a4)
              *(_DWORD *)(a1 + 4 * v21) = *(_DWORD *)(v22 + 4 * v24);
            v21 = (v21 + 1);
          }
          goto LABEL_25;
        }
        v106 = 0;
        v104 = 0u;
        v105 = 0u;
        v102 = 0u;
        v103 = 0u;
        v100 = 0u;
        v101 = 0u;
        v98 = 0u;
        v99 = 0u;
        v27 = 0;
        memset(v97, 0, sizeof(v97));
        do
        {
          if (v25 + v27 >= (unint64_t)*(unsigned int *)(a2 + 296))
            break;
          v28 = strlen((const char *)v97);
          sprintf((char *)v97 + v28, "%d ", *(unsigned __int8 *)(*(_QWORD *)(a2 + 288) + v25 + v27++));
        }
        while (v27 != 5);
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        memset(buf, 0, sizeof(buf));
        v29 = *__error();
        v30 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          v31 = fd_name(*(_QWORD *)(a2 + 240), (char *)buf, 0x100uLL);
          v32 = *(unsigned int *)(a2 + 296);
          v68 = 136316674;
          v69 = "_data_map32_get_data_entry";
          v70 = 1024;
          v71 = 441;
          v72 = 2080;
          v73 = v31;
          v74 = 2048;
          v75 = v25;
          v76 = 2048;
          v77 = v32;
          v78 = 2048;
          v79 = v58;
          v80 = 2080;
          v81 = v97;
          v33 = v30;
          v34 = "%s:%d: data_entry_restore failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          v35 = (uint8_t *)&v68;
          v36 = 68;
          goto LABEL_36;
        }
      }
      *__error() = v29;
    }
LABEL_25:
    if ((_DWORD)v24 + 1 == v7)
      v40 = 0;
    else
      v40 = v24 + 1;
    v9 = v40;
    v20 = v21;
    if (v40 == v8)
      goto LABEL_38;
  }
  v20 = v21;
LABEL_38:
  v66 = 1;
  v45 = *(_QWORD *)&threadData[18 * v62 + 2];
  v46 = v61;
  v47 = v45 + 320 * v61;
  *(_DWORD *)(v47 + 312) = v57;
  v48 = *(void (**)(_QWORD))(v47 + 232);
  if (v48)
    v48(*(_QWORD *)(v45 + 320 * v46 + 288));
  dropThreadId(v62, 0, v11);
LABEL_41:
  result = v20;
  if (!v66)
  {
    result = 0;
    *(_DWORD *)(a2 + 440) = 22;
  }
  return result;
}

uint64_t data_map32_id_get_with_key_noextra(uint64_t a1, unsigned __int16 *a2, size_t a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void (*v15)(_QWORD);
  _DWORD *v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  size_t v29;
  int v30;
  NSObject *v31;
  char *v32;
  uint64_t v33;
  NSObject *v34;
  const char *v35;
  uint8_t *v36;
  uint32_t v37;
  NSObject *v38;
  int v39;
  char *v40;
  NSObject *v41;
  uint64_t v42;
  char *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  void (*v48)(_QWORD);
  uint64_t v50;
  NSObject *v51;
  os_log_t log;
  uint64_t v53;
  unsigned __int16 *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  char v65;
  int v66;
  const char *v67;
  __int16 v68;
  int v69;
  __int16 v70;
  char *v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  _QWORD *v79;
  uint8_t buf[32];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _QWORD v95[8];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v6 = dm_hash_12059(*(_BYTE *)(a1 + 436), a2, a3);
  v64 = 0;
  makeThreadId();
  do
  {
    v7 = __ldxr(exceptionSequenceNum);
    v8 = v7 + 1;
  }
  while (__stxr(v7 + 1, exceptionSequenceNum));
  v9 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11926, a1, 0, v8);
  v62 = HIDWORD(v9);
  v63 = v9;
  v61 = __PAIR64__(v10, v11);
  v12 = *(_QWORD *)&threadData[18 * v9 + 2];
  v13 = v12 + 320 * HIDWORD(v9);
  v14 = *(_DWORD *)(v13 + 312);
  v15 = *(void (**)(_QWORD))(v13 + 224);
  if (v15)
    v15(*(_QWORD *)(v12 + 320 * HIDWORD(v9) + 288));
  v60 = v63;
  v59 = v62;
  v58 = v61;
  if (_setjmp((int *)v13))
  {
    v16 = (_DWORD *)(v13 + 312);
    v17 = *__error();
    v18 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "data_map32_id_get_with_key_noextra";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2206;
      _os_log_error_impl(&dword_1B8270000, v18, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v17;
    *v16 = v14;
    CIOnThreadCleanUpReset(v58);
    dropThreadId(v60, 1, v8);
    CICleanUpReset(v60, HIDWORD(v58));
    v19 = 0;
    goto LABEL_42;
  }
  if (_data_map32_rdlock(a1))
  {
    v19 = 0;
    goto LABEL_38;
  }
  v55 = v8;
  v20 = *(_DWORD *)(a1 + 360);
  v21 = v6 % v20;
  v22 = v21;
  v53 = *(unsigned int *)(a1 + 220);
  v54 = a2;
  while (1)
  {
    v23 = *(_QWORD *)(a1 + 352);
    v24 = *(unsigned int *)(v23 + 4 * v22);
    if (!(_DWORD)v24)
      break;
    v25 = v22;
    if (*(_DWORD *)(a1 + 364) <= v24)
    {
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      memset(buf, 0, sizeof(buf));
      v30 = *__error();
      v38 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        goto LABEL_27;
      v51 = v38;
      v39 = *(_DWORD *)(a1 + 364);
      v40 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
      LODWORD(v95[0]) = 136316418;
      *(_QWORD *)((char *)v95 + 4) = "_data_map32_get_offset_entry";
      WORD2(v95[1]) = 1024;
      *(_DWORD *)((char *)&v95[1] + 6) = 421;
      WORD1(v95[2]) = 1024;
      HIDWORD(v95[2]) = v24;
      LOWORD(v95[3]) = 1024;
      *(_DWORD *)((char *)&v95[3] + 2) = v39;
      HIWORD(v95[3]) = 2048;
      v95[4] = a1;
      LOWORD(v95[5]) = 2080;
      *(_QWORD *)((char *)&v95[5] + 2) = v40;
      v34 = v51;
      v35 = "%s:%d: invalid data id %d max %d %p %s";
      v36 = (uint8_t *)v95;
      v37 = 50;
LABEL_26:
      _os_log_error_impl(&dword_1B8270000, v34, OS_LOG_TYPE_ERROR, v35, v36, v37);
      goto LABEL_27;
    }
    v26 = *(unsigned int *)(*(_QWORD *)(a1 + 320) + 4 * v24);
    if ((_DWORD)v26 != 1)
    {
      v56 = 0;
      v57 = 0;
      v65 = 0;
      v27 = *(_DWORD *)(a1 + 296);
      if (v27 <= v26)
      {
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        memset(buf, 0, sizeof(buf));
        v30 = *__error();
        v41 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
          goto LABEL_27;
        log = v41;
        v42 = *(unsigned int *)(a1 + 296);
        v43 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
        LODWORD(v95[0]) = 136316418;
        *(_QWORD *)((char *)v95 + 4) = "_data_map32_get_data_entry";
        WORD2(v95[1]) = 1024;
        *(_DWORD *)((char *)&v95[1] + 6) = 445;
        WORD1(v95[2]) = 2048;
        *(_QWORD *)((char *)&v95[2] + 4) = v26;
        WORD2(v95[3]) = 2048;
        *(_QWORD *)((char *)&v95[3] + 6) = v42;
        HIWORD(v95[4]) = 2048;
        v95[5] = a1;
        LOWORD(v95[6]) = 2080;
        *(_QWORD *)((char *)&v95[6] + 2) = v43;
        v34 = log;
        v35 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
        v36 = (uint8_t *)v95;
        v37 = 58;
        goto LABEL_26;
      }
      data_entry_restore_12001(*(_QWORD *)(a1 + 288), v26, v27, (uint64_t)&v56, &v65);
      if (v65)
      {
        v104 = 0;
        v102 = 0u;
        v103 = 0u;
        v100 = 0u;
        v101 = 0u;
        v98 = 0u;
        v99 = 0u;
        v96 = 0u;
        v97 = 0u;
        v28 = 0;
        memset(v95, 0, sizeof(v95));
        do
        {
          if (v26 + v28 >= (unint64_t)*(unsigned int *)(a1 + 296))
            break;
          v29 = strlen((const char *)v95);
          sprintf((char *)v95 + v29, "%d ", *(unsigned __int8 *)(*(_QWORD *)(a1 + 288) + v26 + v28++));
        }
        while (v28 != 5);
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        memset(buf, 0, sizeof(buf));
        v30 = *__error();
        v31 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          v32 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
          v33 = *(unsigned int *)(a1 + 296);
          v66 = 136316674;
          v67 = "_data_map32_get_data_entry";
          v68 = 1024;
          v69 = 441;
          v70 = 2080;
          v71 = v32;
          v72 = 2048;
          v73 = v26;
          v74 = 2048;
          v75 = v33;
          v76 = 2048;
          v77 = v56;
          v78 = 2080;
          v79 = v95;
          v34 = v31;
          v35 = "%s:%d: data_entry_restore failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          v36 = (uint8_t *)&v66;
          v37 = 68;
          goto LABEL_26;
        }
LABEL_27:
        *__error() = v30;
        goto LABEL_28;
      }
      if (v53 + a3 == v56 && !memcmp(v54, (const void *)(v57 + v53), a3))
      {
        v19 = *(unsigned int *)(v23 + 4 * v25);
        goto LABEL_37;
      }
    }
LABEL_28:
    if ((_DWORD)v25 + 1 == v20)
      v44 = 0;
    else
      v44 = v25 + 1;
    v22 = v44;
    if (v44 == v21)
    {
      v19 = 0;
      goto LABEL_37;
    }
  }
  v19 = 0;
LABEL_37:
  v8 = v55;
LABEL_38:
  if (*(_QWORD *)(a1 + 424))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 420));
    v50 = *(_QWORD *)(a1 + 424);
    if (v50)
      bit_vector_set_9027(v50, v19);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 420));
  }
  v64 = 1;
  v45 = *(_QWORD *)&threadData[18 * v60 + 2];
  v46 = v59;
  v47 = v45 + 320 * v59;
  *(_DWORD *)(v47 + 312) = v14;
  v48 = *(void (**)(_QWORD))(v47 + 232);
  if (v48)
    v48(*(_QWORD *)(v45 + 320 * v46 + 288));
  dropThreadId(v60, 0, v8);
LABEL_42:
  if (!v64)
  {
    v19 = 0;
    *(_DWORD *)(a1 + 440) = 22;
  }
  _data_map32_unlock(a1);
  return v19;
}

uint64_t data_map32_id_get_with_key(uint64_t a1, unsigned __int16 *a2, size_t a3, void *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD);
  _DWORD *v18;
  int v19;
  NSObject *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  CFIndex v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  size_t v31;
  int v32;
  NSObject *v33;
  char *v34;
  uint64_t v35;
  NSObject *v36;
  const char *v37;
  uint8_t *v38;
  uint32_t v39;
  NSObject *v40;
  unsigned int v41;
  NSObject *v42;
  uint64_t v43;
  char *v44;
  int v45;
  char *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  void (*v52)(_QWORD);
  NSObject *v54;
  os_log_t log;
  size_t __n;
  os_unfair_lock_s *lock;
  unsigned __int16 *__s1;
  void *__s2;
  int v60;
  int v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  char v71;
  int v72;
  const char *v73;
  __int16 v74;
  int v75;
  __int16 v76;
  char *v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  _QWORD *v85;
  uint8_t buf[32];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _QWORD v101[8];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v8 = dm_hash_12059(*(_BYTE *)(a1 + 436), a2, a3);
  if (_data_map32_rdlock(a1))
  {
    v9 = 0;
    goto LABEL_49;
  }
  __s1 = a2;
  __s2 = a4;
  v70 = 0;
  makeThreadId();
  do
  {
    v10 = __ldxr(exceptionSequenceNum);
    v11 = v10 + 1;
  }
  while (__stxr(v10 + 1, exceptionSequenceNum));
  v12 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11926, a1, 0, v11);
  v68 = HIDWORD(v12);
  v69 = v12;
  v67 = __PAIR64__(v13, v14);
  v15 = *(_QWORD *)&threadData[18 * v12 + 2];
  v16 = v15 + 320 * HIDWORD(v12);
  v60 = *(_DWORD *)(v16 + 312);
  v17 = *(void (**)(_QWORD))(v16 + 224);
  if (v17)
    v17(*(_QWORD *)(v15 + 320 * HIDWORD(v12) + 288));
  v66 = v69;
  v65 = v68;
  v64 = v67;
  if (_setjmp((int *)v16))
  {
    v18 = (_DWORD *)(v16 + 312);
    v19 = *__error();
    v20 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "data_map32_id_get_with_key";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2262;
      _os_log_error_impl(&dword_1B8270000, v20, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v19;
    *v18 = v60;
    CIOnThreadCleanUpReset(v64);
    dropThreadId(v66, 1, v11);
    CICleanUpReset(v66, HIDWORD(v64));
    v9 = 0;
    goto LABEL_47;
  }
  v61 = v11;
  v21 = *(_DWORD *)(a1 + 360);
  v22 = v8 % v21;
  __n = *(unsigned int *)(a1 + 220);
  lock = (os_unfair_lock_s *)(a1 + 420);
  while (1)
  {
    v23 = *(_QWORD *)(a1 + 352);
    v24 = *(unsigned int *)(v23 + 4 * v22);
    if (!(_DWORD)v24)
      break;
    v25 = v22;
    if (*(_QWORD *)(a1 + 424))
    {
      os_unfair_lock_lock(lock);
      v48 = *(_QWORD *)(a1 + 424);
      if (v48)
        bit_vector_set_9027(v48, v24);
      os_unfair_lock_unlock(lock);
      v26 = *(unsigned int *)(v23 + 4 * v25);
    }
    else
    {
      v26 = *(unsigned int *)(v23 + 4 * v22);
    }
    if (*(unsigned int *)(a1 + 364) <= v26)
    {
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      memset(buf, 0, sizeof(buf));
      v32 = *__error();
      v40 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
LABEL_26:
        *__error() = v32;
        goto LABEL_27;
      }
      log = v40;
      v45 = *(_DWORD *)(a1 + 364);
      v46 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
      LODWORD(v101[0]) = 136316418;
      *(_QWORD *)((char *)v101 + 4) = "_data_map32_get_offset_entry";
      WORD2(v101[1]) = 1024;
      *(_DWORD *)((char *)&v101[1] + 6) = 421;
      WORD1(v101[2]) = 1024;
      HIDWORD(v101[2]) = v26;
      LOWORD(v101[3]) = 1024;
      *(_DWORD *)((char *)&v101[3] + 2) = v45;
      HIWORD(v101[3]) = 2048;
      v101[4] = a1;
      LOWORD(v101[5]) = 2080;
      *(_QWORD *)((char *)&v101[5] + 2) = v46;
      v36 = log;
      v37 = "%s:%d: invalid data id %d max %d %p %s";
      v38 = (uint8_t *)v101;
      v39 = 50;
LABEL_35:
      _os_log_error_impl(&dword_1B8270000, v36, OS_LOG_TYPE_ERROR, v37, v38, v39);
      goto LABEL_26;
    }
    v27 = *(_QWORD *)(a1 + 320);
    if (v27)
    {
      v28 = *(unsigned int *)(v27 + 4 * v26);
      if ((_DWORD)v28 != 1)
      {
        v62 = 0;
        v63 = 0;
        v71 = 0;
        v29 = *(_DWORD *)(a1 + 296);
        if (v29 <= v28)
        {
          v99 = 0u;
          v100 = 0u;
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          memset(buf, 0, sizeof(buf));
          v32 = *__error();
          v42 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
            goto LABEL_26;
          v54 = v42;
          v43 = *(unsigned int *)(a1 + 296);
          v44 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
          LODWORD(v101[0]) = 136316418;
          *(_QWORD *)((char *)v101 + 4) = "_data_map32_get_data_entry";
          WORD2(v101[1]) = 1024;
          *(_DWORD *)((char *)&v101[1] + 6) = 445;
          WORD1(v101[2]) = 2048;
          *(_QWORD *)((char *)&v101[2] + 4) = v28;
          WORD2(v101[3]) = 2048;
          *(_QWORD *)((char *)&v101[3] + 6) = v43;
          HIWORD(v101[4]) = 2048;
          v101[5] = a1;
          LOWORD(v101[6]) = 2080;
          *(_QWORD *)((char *)&v101[6] + 2) = v44;
          v36 = v54;
          v37 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
          v38 = (uint8_t *)v101;
          v39 = 58;
          goto LABEL_35;
        }
        data_entry_restore_12001(*(_QWORD *)(a1 + 288), v28, v29, (uint64_t)&v62, &v71);
        if (v71)
        {
          v110 = 0;
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v102 = 0u;
          v103 = 0u;
          v30 = 0;
          memset(v101, 0, sizeof(v101));
          do
          {
            if (v28 + v30 >= (unint64_t)*(unsigned int *)(a1 + 296))
              break;
            v31 = strlen((const char *)v101);
            sprintf((char *)v101 + v31, "%d ", *(unsigned __int8 *)(*(_QWORD *)(a1 + 288) + v28 + v30++));
          }
          while (v30 != 5);
          v99 = 0u;
          v100 = 0u;
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          memset(buf, 0, sizeof(buf));
          v32 = *__error();
          v33 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
            goto LABEL_26;
          v34 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
          v35 = *(unsigned int *)(a1 + 296);
          v72 = 136316674;
          v73 = "_data_map32_get_data_entry";
          v74 = 1024;
          v75 = 441;
          v76 = 2080;
          v77 = v34;
          v78 = 2048;
          v79 = v28;
          v80 = 2048;
          v81 = v35;
          v82 = 2048;
          v83 = v62;
          v84 = 2080;
          v85 = v101;
          v36 = v33;
          v37 = "%s:%d: data_entry_restore failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          v38 = (uint8_t *)&v72;
          v39 = 68;
          goto LABEL_35;
        }
        if (__n + a3 == v62)
        {
          v47 = v63;
          if (!memcmp(__s1, &v63[__n], a3) && !memcmp(v47, __s2, __n))
          {
            v9 = *(unsigned int *)(v23 + 4 * v25);
            goto LABEL_44;
          }
        }
      }
    }
LABEL_27:
    if ((_DWORD)v25 + 1 == v21)
      v41 = 0;
    else
      v41 = v25 + 1;
    v22 = v41;
    if (v41 == v8 % v21)
    {
      v9 = 0;
      goto LABEL_44;
    }
  }
  v9 = 0;
LABEL_44:
  v70 = 1;
  v49 = *(_QWORD *)&threadData[18 * v66 + 2];
  v50 = v65;
  v51 = v49 + 320 * v65;
  *(_DWORD *)(v51 + 312) = v60;
  v52 = *(void (**)(_QWORD))(v51 + 232);
  if (v52)
    v52(*(_QWORD *)(v49 + 320 * v50 + 288));
  dropThreadId(v66, 0, v61);
LABEL_47:
  if (!v70)
  {
    v9 = 0;
    *(_DWORD *)(a1 + 440) = 22;
  }
LABEL_49:
  _data_map32_unlock(a1);
  return v9;
}

uint64_t data_map32_get_extra_with_key(uint64_t a1, unsigned __int16 *a2, size_t a3, _BYTE *a4)
{
  _BYTE *v4;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void (*v17)(_QWORD);
  _DWORD *v18;
  int v19;
  NSObject *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  CFIndex v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  size_t v32;
  int v33;
  NSObject *v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  const char *v38;
  uint8_t *v39;
  uint32_t v40;
  NSObject *v41;
  unsigned int v42;
  NSObject *v43;
  uint64_t v44;
  char *v45;
  int v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  void (*v53)(_QWORD);
  NSObject *v55;
  os_log_t log;
  uint64_t v57;
  os_unfair_lock_s *lock;
  unsigned __int16 *__s1;
  int v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unint64_t v67;
  unsigned int v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  char v72;
  int v73;
  const char *v74;
  __int16 v75;
  int v76;
  __int16 v77;
  char *v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  _QWORD *v86;
  uint8_t buf[32];
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _QWORD v102[8];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;

  v4 = a4;
  v112 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  v71 = 0;
  v8 = dm_hash_12059(*(_BYTE *)(a1 + 436), a2, a3);
  if (_data_map32_rdlock(a1))
    goto LABEL_46;
  __s1 = a2;
  v70 = 0;
  makeThreadId();
  do
  {
    v9 = __ldxr(exceptionSequenceNum);
    v10 = v9 + 1;
  }
  while (__stxr(v9 + 1, exceptionSequenceNum));
  v11 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11926, a1, 0, v10);
  v68 = HIDWORD(v11);
  v69 = v11;
  v67 = __PAIR64__(v12, v13);
  v14 = *(_QWORD *)&threadData[18 * v11 + 2];
  v15 = v14 + 320 * HIDWORD(v11);
  v16 = *(_DWORD *)(v15 + 312);
  v17 = *(void (**)(_QWORD))(v15 + 224);
  if (v17)
    v17(*(_QWORD *)(v14 + 320 * HIDWORD(v11) + 288));
  v66 = v69;
  v65 = v68;
  v64 = v67;
  if (_setjmp((int *)v15))
  {
    v18 = (_DWORD *)(v15 + 312);
    v19 = *__error();
    v20 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "data_map32_get_extra_with_key";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2321;
      _os_log_error_impl(&dword_1B8270000, v20, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v19;
    *v18 = v16;
    CIOnThreadCleanUpReset(v64);
    dropThreadId(v66, 1, v10);
    CICleanUpReset(v66, HIDWORD(v64));
    goto LABEL_44;
  }
  v60 = v10;
  v61 = v4;
  v21 = *(_DWORD *)(a1 + 360);
  v22 = v8 % v21;
  v23 = v22;
  v57 = *(unsigned int *)(a1 + 220);
  lock = (os_unfair_lock_s *)(a1 + 420);
  do
  {
    v24 = *(_QWORD *)(a1 + 352);
    v25 = *(unsigned int *)(v24 + 4 * v23);
    if (!(_DWORD)v25)
      break;
    v26 = v23;
    if (*(_QWORD *)(a1 + 424))
    {
      os_unfair_lock_lock(lock);
      v48 = *(_QWORD *)(a1 + 424);
      if (v48)
        bit_vector_set_9027(v48, v25);
      os_unfair_lock_unlock(lock);
      v27 = *(unsigned int *)(v24 + 4 * v26);
    }
    else
    {
      v27 = *(unsigned int *)(v24 + 4 * v23);
    }
    if (*(unsigned int *)(a1 + 364) <= v27)
    {
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      memset(buf, 0, sizeof(buf));
      v33 = *__error();
      v41 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
LABEL_25:
        *__error() = v33;
        goto LABEL_26;
      }
      log = v41;
      v46 = *(_DWORD *)(a1 + 364);
      v47 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
      LODWORD(v102[0]) = 136316418;
      *(_QWORD *)((char *)v102 + 4) = "_data_map32_get_offset_entry";
      WORD2(v102[1]) = 1024;
      *(_DWORD *)((char *)&v102[1] + 6) = 421;
      WORD1(v102[2]) = 1024;
      HIDWORD(v102[2]) = v27;
      LOWORD(v102[3]) = 1024;
      *(_DWORD *)((char *)&v102[3] + 2) = v46;
      HIWORD(v102[3]) = 2048;
      v102[4] = a1;
      LOWORD(v102[5]) = 2080;
      *(_QWORD *)((char *)&v102[5] + 2) = v47;
      v37 = log;
      v38 = "%s:%d: invalid data id %d max %d %p %s";
      v39 = (uint8_t *)v102;
      v40 = 50;
LABEL_34:
      _os_log_error_impl(&dword_1B8270000, v37, OS_LOG_TYPE_ERROR, v38, v39, v40);
      goto LABEL_25;
    }
    v28 = *(_QWORD *)(a1 + 320);
    if (v28)
    {
      v29 = *(unsigned int *)(v28 + 4 * v27);
      if ((_DWORD)v29 != 1)
      {
        v62 = 0;
        v63 = 0;
        v72 = 0;
        v30 = *(_DWORD *)(a1 + 296);
        if (v30 <= v29)
        {
          v100 = 0u;
          v101 = 0u;
          v98 = 0u;
          v99 = 0u;
          v96 = 0u;
          v97 = 0u;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          memset(buf, 0, sizeof(buf));
          v33 = *__error();
          v43 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            goto LABEL_25;
          v55 = v43;
          v44 = *(unsigned int *)(a1 + 296);
          v45 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
          LODWORD(v102[0]) = 136316418;
          *(_QWORD *)((char *)v102 + 4) = "_data_map32_get_data_entry";
          WORD2(v102[1]) = 1024;
          *(_DWORD *)((char *)&v102[1] + 6) = 445;
          WORD1(v102[2]) = 2048;
          *(_QWORD *)((char *)&v102[2] + 4) = v29;
          WORD2(v102[3]) = 2048;
          *(_QWORD *)((char *)&v102[3] + 6) = v44;
          HIWORD(v102[4]) = 2048;
          v102[5] = a1;
          LOWORD(v102[6]) = 2080;
          *(_QWORD *)((char *)&v102[6] + 2) = v45;
          v37 = v55;
          v38 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
          v39 = (uint8_t *)v102;
          v40 = 58;
          goto LABEL_34;
        }
        data_entry_restore_12001(*(_QWORD *)(a1 + 288), v29, v30, (uint64_t)&v62, &v72);
        if (v72)
        {
          v111 = 0;
          v109 = 0u;
          v110 = 0u;
          v107 = 0u;
          v108 = 0u;
          v105 = 0u;
          v106 = 0u;
          v103 = 0u;
          v104 = 0u;
          v31 = 0;
          memset(v102, 0, sizeof(v102));
          do
          {
            if (v29 + v31 >= (unint64_t)*(unsigned int *)(a1 + 296))
              break;
            v32 = strlen((const char *)v102);
            sprintf((char *)v102 + v32, "%d ", *(unsigned __int8 *)(*(_QWORD *)(a1 + 288) + v29 + v31++));
          }
          while (v31 != 5);
          v100 = 0u;
          v101 = 0u;
          v98 = 0u;
          v99 = 0u;
          v96 = 0u;
          v97 = 0u;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          memset(buf, 0, sizeof(buf));
          v33 = *__error();
          v34 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            goto LABEL_25;
          v35 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
          v36 = *(unsigned int *)(a1 + 296);
          v73 = 136316674;
          v74 = "_data_map32_get_data_entry";
          v75 = 1024;
          v76 = 441;
          v77 = 2080;
          v78 = v35;
          v79 = 2048;
          v80 = v29;
          v81 = 2048;
          v82 = v36;
          v83 = 2048;
          v84 = v62;
          v85 = 2080;
          v86 = v102;
          v37 = v34;
          v38 = "%s:%d: data_entry_restore failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          v39 = (uint8_t *)&v73;
          v40 = 68;
          goto LABEL_34;
        }
        if (v57 + a3 == v62 && !memcmp(__s1, (const void *)(v63 + v57), a3))
        {
          v49 = *(_DWORD *)(a1 + 220);
          __memcpy_chk();
          HIDWORD(v71) = v49;
          *v61 = 1;
          break;
        }
      }
    }
LABEL_26:
    if ((_DWORD)v26 + 1 == v21)
      v42 = 0;
    else
      v42 = v26 + 1;
    v23 = v42;
  }
  while (v42 != v22);
  v70 = 1;
  v50 = *(_QWORD *)&threadData[18 * v66 + 2];
  v51 = v65;
  v52 = v50 + 320 * v65;
  *(_DWORD *)(v52 + 312) = v16;
  v53 = *(void (**)(_QWORD))(v52 + 232);
  if (v53)
    v53(*(_QWORD *)(v50 + 320 * v51 + 288));
  dropThreadId(v66, 0, v60);
  v4 = v61;
LABEL_44:
  if (!v70)
  {
    *v4 = 0;
    *(_DWORD *)(a1 + 440) = 22;
  }
LABEL_46:
  _data_map32_unlock(a1);
  return v71;
}

uint64_t data_map32_get_data(uint64_t a1, unsigned int a2, _QWORD *a3)
{
  uint64_t result;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void (*v15)(_QWORD);
  int v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t i;
  size_t v23;
  int v24;
  NSObject *v25;
  char *v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  uint32_t v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD);
  int v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int v51;
  const char *v52;
  __int16 v53;
  int v54;
  __int16 v55;
  char *v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  char *v64;
  uint8_t buf[32];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  char __s[64];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if (_data_map32_rdlock(a1))
  {
LABEL_2:
    if (a3)
      *a3 = 0;
    return 0;
  }
  v47 = 0;
  makeThreadId();
  do
  {
    v7 = __ldxr(exceptionSequenceNum);
    v8 = v7 + 1;
  }
  while (__stxr(v7 + 1, exceptionSequenceNum));
  v9 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11926, a1, 0, v8);
  v45 = HIDWORD(v9);
  v46 = v9;
  v43 = v11;
  v44 = v10;
  v12 = *(_QWORD *)&threadData[18 * v9 + 2];
  v13 = v12 + 320 * HIDWORD(v9);
  v14 = *(_DWORD *)(v13 + 312);
  v15 = *(void (**)(_QWORD))(v13 + 224);
  if (v15)
    v15(*(_QWORD *)(v12 + 320 * HIDWORD(v9) + 288));
  if (_setjmp((int *)v13))
  {
    v16 = *__error();
    v17 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "data_map32_get_data";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2399;
      _os_log_error_impl(&dword_1B8270000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v16;
    *(_DWORD *)(v13 + 312) = v14;
    CIOnThreadCleanUpReset(v43);
    dropThreadId(v46, 1, v8);
    CICleanUpReset(v46, v44);
    v18 = 0;
    goto LABEL_33;
  }
  if (*(_DWORD *)(a1 + 364) <= a2)
  {
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    memset(buf, 0, sizeof(buf));
    v31 = *__error();
    v32 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v38 = *(_DWORD *)(a1 + 364);
      v39 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
      *(_DWORD *)__s = 136316418;
      *(_QWORD *)&__s[4] = "_data_map32_get_offset_entry";
      *(_WORD *)&__s[12] = 1024;
      *(_DWORD *)&__s[14] = 421;
      *(_WORD *)&__s[18] = 1024;
      *(_DWORD *)&__s[20] = a2;
      *(_WORD *)&__s[24] = 1024;
      *(_DWORD *)&__s[26] = v38;
      *(_WORD *)&__s[30] = 2048;
      *(_QWORD *)&__s[32] = a1;
      *(_WORD *)&__s[40] = 2080;
      *(_QWORD *)&__s[42] = v39;
      _os_log_error_impl(&dword_1B8270000, v32, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)__s, 0x32u);
    }
    *__error() = v31;
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 320);
    if (v19)
    {
      v20 = *(unsigned int *)(v19 + 4 * a2);
      if ((_DWORD)v20 != 1)
      {
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v21 = *(_DWORD *)(a1 + 296);
        if (v21 <= v20)
        {
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          memset(buf, 0, sizeof(buf));
          v24 = *__error();
          v25 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            v40 = *(unsigned int *)(a1 + 296);
            v41 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
            *(_DWORD *)__s = 136316418;
            *(_QWORD *)&__s[4] = "_data_map32_get_data_entry";
            *(_WORD *)&__s[12] = 1024;
            *(_DWORD *)&__s[14] = 445;
            *(_WORD *)&__s[18] = 2048;
            *(_QWORD *)&__s[20] = v20;
            *(_WORD *)&__s[28] = 2048;
            *(_QWORD *)&__s[30] = v40;
            *(_WORD *)&__s[38] = 2048;
            *(_QWORD *)&__s[40] = a1;
            *(_WORD *)&__s[48] = 2080;
            *(_QWORD *)&__s[50] = v41;
            v28 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
            v29 = __s;
            v30 = 58;
            goto LABEL_42;
          }
        }
        else
        {
          data_entry_restore_12001(*(_QWORD *)(a1 + 288), v20, v21, (uint64_t)&v48, &v50);
          if (!v50)
          {
            if (a3)
              *a3 = (v48 - *(_DWORD *)(a1 + 220));
            if (*(_QWORD *)(a1 + 424))
            {
              os_unfair_lock_lock((os_unfair_lock_t)(a1 + 420));
              v42 = *(_QWORD *)(a1 + 424);
              if (v42)
                bit_vector_set_9027(v42, a2);
              os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 420));
            }
            v34 = v49 + *(unsigned int *)(a1 + 220);
            goto LABEL_29;
          }
          v89 = 0;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          memset(__s, 0, sizeof(__s));
          for (i = 0; i != 5; ++i)
          {
            if (v20 + i >= (unint64_t)*(unsigned int *)(a1 + 296))
              break;
            v23 = strlen(__s);
            sprintf(&__s[v23], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a1 + 288) + v20 + i));
          }
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v66 = 0u;
          v67 = 0u;
          memset(buf, 0, sizeof(buf));
          v24 = *__error();
          v25 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          {
            v26 = fd_name(*(_QWORD *)(a1 + 240), (char *)buf, 0x100uLL);
            v27 = *(unsigned int *)(a1 + 296);
            v51 = 136316674;
            v52 = "_data_map32_get_data_entry";
            v53 = 1024;
            v54 = 441;
            v55 = 2080;
            v56 = v26;
            v57 = 2048;
            v58 = v20;
            v59 = 2048;
            v60 = v27;
            v61 = 2048;
            v62 = v48;
            v63 = 2080;
            v64 = __s;
            v28 = "%s:%d: data_entry_restore failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
            v29 = (char *)&v51;
            v30 = 68;
LABEL_42:
            _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, v28, (uint8_t *)v29, v30);
          }
        }
        *__error() = v24;
        v34 = 0;
LABEL_29:
        v33 = v34;
        goto LABEL_30;
      }
    }
  }
  v33 = 0;
LABEL_30:
  v47 = 1;
  v35 = *(_QWORD *)&threadData[18 * v46 + 2];
  v36 = v35 + 320 * v45;
  *(_DWORD *)(v36 + 312) = v14;
  v37 = *(void (**)(_QWORD))(v36 + 232);
  if (v37)
    v37(*(_QWORD *)(v35 + 320 * v45 + 288));
  dropThreadId(v46, 0, v8);
  v18 = v33;
LABEL_33:
  if (!v47)
    *(_DWORD *)(a1 + 440) = 22;
  _data_map32_unlock(a1);
  result = v18;
  if (!v18)
    goto LABEL_2;
  return result;
}

uint64_t _data_map32_get_data_id(uint64_t a1, unsigned int a2, char *a3, size_t a4, int a5)
{
  unsigned int v9;
  int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void (*v20)(_QWORD);
  int v21;
  NSObject *v22;
  uint64_t v23;
  unsigned int *bucket_entry;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  void (*v42)(_QWORD);
  int v43;
  _QWORD v44[2];
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v9 = dm_hash_12059(*(_BYTE *)(a1 + 436), (unsigned __int16 *)&a3[a2], a4 - a2);
  if (_data_map32_rdlock(a1))
    return 0;
  v11 = a5;
  makeThreadId();
  do
  {
    v12 = __ldxr(exceptionSequenceNum);
    v13 = v12 + 1;
  }
  while (__stxr(v12 + 1, exceptionSequenceNum));
  v14 = setThreadIdAndInfo(-1, sDataMapExceptionCallbacks_11926, a1, 0, v13);
  v49 = HIDWORD(v14);
  v50 = v14;
  v48 = __PAIR64__(v15, v16);
  v17 = *(_QWORD *)&threadData[18 * v14 + 2];
  v18 = v17 + 320 * HIDWORD(v14);
  v19 = *(_DWORD *)(v18 + 312);
  v20 = *(void (**)(_QWORD))(v18 + 224);
  if (v20)
    v20(*(_QWORD *)(v17 + 320 * HIDWORD(v14) + 288));
  v47 = v50;
  v46 = v49;
  v45 = v48;
  if (!_setjmp((int *)v18))
  {
    bucket_entry = (unsigned int *)_data_map32_get_bucket_entry(a1, v9, 0, a3, a4);
    if (!bucket_entry)
      goto LABEL_42;
    v25 = *bucket_entry;
    if (*bucket_entry)
    {
      if (v25 >= *(_DWORD *)(a1 + 364))
        v26 = 0;
      else
        v26 = v25;
      goto LABEL_43;
    }
    if (!v11)
      goto LABEL_23;
    v27 = bucket_entry;
    v44[1] = a3;
    v44[0] = a4;
    if (a4 >> 28)
    {
      v28 = 5;
    }
    else if ((a4 & 0xFE00000) != 0)
    {
      v28 = 4;
    }
    else
    {
      if ((a4 & 0x1FC000) == 0)
      {
        if ((a4 & 0x3F80) != 0)
          v29 = 2;
        else
          v29 = 1;
        goto LABEL_22;
      }
      v28 = 3;
    }
    v29 = v28;
LABEL_22:
    v30 = *(unsigned int *)(a1 + 364);
    _data_map32_unlock(a1);
    if (_data_map32_wrlock(a1))
    {
LABEL_23:
      v26 = 0;
LABEL_43:
      v23 = v26;
      v39 = *(_QWORD *)&threadData[18 * v47 + 2];
      v40 = v46;
      v41 = v39 + 320 * v46;
      *(_DWORD *)(v41 + 312) = v19;
      v42 = *(void (**)(_QWORD))(v41 + 232);
      if (v42)
        v42(*(_QWORD *)(v39 + 320 * v40 + 288));
      dropThreadId(v47, 0, v13);
      goto LABEL_46;
    }
    v31 = v30;
    if ((_DWORD)v30 == *(_DWORD *)(a1 + 364))
      goto LABEL_25;
    v38 = (unsigned int *)_data_map32_get_bucket_entry(a1, v9, 0, a3, a4);
    if (v38)
    {
      v32 = *v38;
      v31 = *(unsigned int *)(a1 + 364);
      if (v32 >= v31)
        goto LABEL_23;
      if ((_DWORD)v32)
      {
        _data_map32_set_seen_id(a1, v32);
        goto LABEL_41;
      }
      v27 = v38;
LABEL_25:
      v32 = v31;
      v43 = 0;
      v33 = _data_map32_grow(a1, (v29 + a4), &v43);
      v26 = 0;
      if (!v33)
        goto LABEL_43;
      if (!*(_BYTE *)(a1 + 435))
      {
        _data_map32_dirty(a1);
        *(_BYTE *)(a1 + 435) = 1;
      }
      v34 = *(_QWORD *)(a1 + 320);
      v35 = *(_DWORD *)(a1 + 296);
      *(_DWORD *)(v34 + 4 * v32) = v35;
      v36 = v35;
      if (!*(_BYTE *)(a1 + 433))
      {
        v37 = v34;
        _data_map32_dirty(a1);
        *(_BYTE *)(a1 + 433) = 1;
        v36 = *(_DWORD *)(v37 + 4 * v32);
      }
      *(_DWORD *)(a1 + 296) = data_entry_store_11977(*(_QWORD *)(a1 + 288), v36, (unsigned int *)v44);
      ++*(_DWORD *)(a1 + 364);
      if (!*(_BYTE *)(a1 + 434))
      {
        _data_map32_dirty(a1);
        *(_BYTE *)(a1 + 434) = 1;
      }
      if ((v43 & 4) != 0)
        v27 = (_DWORD *)_data_map32_get_bucket_entry(a1, v9, v32, 0, 0);
      *v27 = v32;
      SIActivityJournalDMAdd(*(os_unfair_lock_s **)(a1 + 408), *(_DWORD *)(a1 + 416), *(_DWORD *)(a1 + 220), v32, v9, a4);
LABEL_41:
      v26 = v32;
      goto LABEL_43;
    }
LABEL_42:
    v26 = 0;
    goto LABEL_43;
  }
  v21 = *__error();
  v22 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    v52 = "_data_map32_get_data_id";
    v53 = 1024;
    v54 = 2078;
    _os_log_error_impl(&dword_1B8270000, v22, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
  }
  *__error() = v21;
  *(_DWORD *)(v18 + 312) = v19;
  CIOnThreadCleanUpReset(v45);
  dropThreadId(v47, 1, v13);
  CICleanUpReset(v47, HIDWORD(v45));
  v23 = 0;
LABEL_46:
  _data_map32_unlock(a1);
  return v23;
}

void _data_map32_set_seen_id(uint64_t a1, unsigned int a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 424))
  {
    v4 = (os_unfair_lock_s *)(a1 + 420);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 420));
    v5 = *(_QWORD *)(a1 + 424);
    if (v5)
      bit_vector_set_9027(v5, a2);
    os_unfair_lock_unlock(v4);
  }
}

uint64_t _data_map32_grow(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unsigned int v7;
  unint64_t v8;
  size_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  void (*v17)(_QWORD, _QWORD);
  uint64_t v18;

  if (*(_DWORD *)(a1 + 440))
    return 0;
  v7 = *(_DWORD *)(a1 + 364);
  if (v7 >= *(_DWORD *)(a1 + 328))
  {
    v8 = (*MEMORY[0x1E0C85AD8] + 4 * (v7 + 1) - 1) & -*MEMORY[0x1E0C85AD8];
    if (fd_truncate(*(_QWORD *)(a1 + 304), v8) == -1)
      goto LABEL_23;
    *(_DWORD *)(a1 + 316) = v8;
    v9 = *(unsigned int *)(a1 + 312);
    if (v8 > v9)
    {
      v10 = 2 * v9;
      munmap(*(void **)(a1 + 320), v9);
      *(_DWORD *)(a1 + 312) = 0;
      v11 = fd_mmap(*(_QWORD *)(a1 + 304));
      *(_QWORD *)(a1 + 320) = v11;
      if (v11 == -1)
        goto LABEL_23;
      *(_DWORD *)(a1 + 312) = v10;
    }
    *(_DWORD *)(a1 + 328) = v8 >> 2;
    *a3 |= 2u;
    v7 = *(_DWORD *)(a1 + 364);
  }
  v12 = v7 - *(_DWORD *)(a1 + 368);
  if (v12 >= 2 * *(_DWORD *)(a1 + 360) / 3u || v12 < 2 * *(_DWORD *)(a1 + 372))
  {
    if (!_data_map32_rehash(a1))
      goto LABEL_23;
    *a3 |= 4u;
  }
  v13 = a2 + *(unsigned int *)(a1 + 296) + 8;
  if (v13 < *(unsigned int *)(a1 + 284))
    return 1;
  v14 = (v13 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
  if (fd_truncate(*(_QWORD *)(a1 + 272), v14) != -1)
  {
    *(_DWORD *)(a1 + 284) = v14;
    v15 = *(unsigned int *)(a1 + 280);
    if (v14 <= v15)
    {
LABEL_21:
      *a3 |= 1u;
      return 1;
    }
    v16 = 2 * v15;
    v17 = *(void (**)(_QWORD, _QWORD))(a1 + 384);
    if (v17)
      v17(*(_QWORD *)(a1 + 400), *(_QWORD *)(a1 + 288));
    else
      munmap(*(void **)(a1 + 288), *(unsigned int *)(a1 + 280));
    *(_DWORD *)(a1 + 280) = 0;
    v18 = fd_mmap(*(_QWORD *)(a1 + 272));
    *(_QWORD *)(a1 + 288) = v18;
    if (v18 != -1)
    {
      *(_DWORD *)(a1 + 280) = v16;
      goto LABEL_21;
    }
  }
LABEL_23:
  if (*(_DWORD *)(a1 + 440))
    return 0;
  result = 0;
  *(_DWORD *)(a1 + 440) = 1;
  return result;
}

uint64_t _data_map32_garbage_compact_collect(uint64_t a1, uint64_t a2, unsigned int a3, char a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  char *v10;
  unsigned __int8 v11;
  char *sibling_protected;
  size_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  size_t v22;
  _DWORD *v23;
  size_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD);
  int v35;
  NSObject *v36;
  size_t v37;
  char *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  size_t v44;
  unsigned int v45;
  int v46;
  NSObject *v47;
  unsigned int v48;
  int v49;
  NSObject *v50;
  unsigned int v51;
  unsigned int v52;
  size_t v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  size_t v62;
  int v63;
  NSObject *v64;
  int v65;
  NSObject *v66;
  uint64_t v67;
  size_t v68;
  size_t v69;
  NSObject *v70;
  int v71;
  char *v72;
  unsigned int v73;
  int v74;
  int v75;
  unint64_t v76;
  size_t v77;
  off_t v78;
  unsigned int v79;
  uint64_t v80;
  NSObject *v81;
  NSObject *v82;
  const char *v83;
  uint32_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  void (*v95)(_QWORD);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v100;
  int v101;
  NSObject *v102;
  size_t v103;
  NSObject *log;
  NSObject *v105;
  int v106;
  size_t v107;
  unsigned int v108;
  int v109;
  size_t v110;
  int v111;
  uint64_t v112;
  size_t v115;
  _DWORD *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unsigned int v122;
  unsigned int v123;
  unint64_t v124;
  unsigned int v125;
  unsigned int v126;
  _QWORD v127[2];
  char v128;
  char v129;
  uint64_t v130;
  size_t v131;
  uint64_t v132;
  _DWORD *v133;
  __int128 v134;
  char __str[1024];
  char v136[1024];
  uint8_t buf[4];
  const char *v138;
  __int16 v139;
  int v140;
  __int16 v141;
  char *v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  __int16 v149;
  char *v150;
  uint8_t v151[48];
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  char __s[64];
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  uint64_t v175;
  CFRange v176;

  v175 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)(a1 + 364);
  bzero(v136, 0x400uLL);
  bzero(__str, 0x400uLL);
  v176.location = 0;
  v9 = *(unsigned __int8 *)(a1 + 438);
  *(_DWORD *)a5 = 842150450;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = v8;
  v108 = v8 - 1;
  v176.length = (v8 - 1);
  v112 = a2;
  *(_QWORD *)(a5 + 24) = CFBitVectorGetCountOfBit(*(CFBitVectorRef *)(a2 + 16), v176, 1u);
  v10 = fd_name(*(_QWORD *)(a1 + 272), v136, 0x400uLL);
  snprintf(__str, 0x400uLL, "tmp.%s", v10);
  if (v9)
    v11 = 3;
  else
    v11 = 0;
  sibling_protected = (char *)fd_create_sibling_protected(*(_QWORD *)(a1 + 272), __str, 1538, v11);
  if (fd_truncate((uint64_t)sibling_protected, *(unsigned int *)(a1 + 284)) == -1)
  {
    v38 = 0;
    v39 = *__error();
    if (v39)
      v40 = v39;
    else
      v40 = 0xFFFFFFFFLL;
    v41 = -1;
    v42 = -1;
    v43 = 0;
    v44 = 0;
    goto LABEL_96;
  }
  v13 = *MEMORY[0x1E0C85AD8];
  v14 = fd_mmap((uint64_t)sibling_protected);
  if (v14 == -1)
  {
    v45 = *__error();
    if (v45)
      v40 = v45;
    else
      v40 = 0xFFFFFFFFLL;
    v46 = *__error();
    v47 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v151 = 136315394;
      *(_QWORD *)&v151[4] = "_data_map32_garbage_compact_collect";
      *(_WORD *)&v151[12] = 1024;
      *(_DWORD *)&v151[14] = 2621;
      _os_log_error_impl(&dword_1B8270000, v47, OS_LOG_TYPE_ERROR, "%s:%d: storage fd_mmap error", v151, 0x12u);
    }
    v38 = 0;
    *__error() = v46;
    v41 = -1;
    v42 = -1;
    v43 = 0;
    v44 = 0;
    goto LABEL_96;
  }
  v118 = (uint64_t)sibling_protected;
  v15 = v11;
  v16 = v14;
  v17 = *(unsigned int *)(a1 + 280);
  v18 = fd_name(*(_QWORD *)(a1 + 304), v136, 0x400uLL);
  snprintf(__str, 0x400uLL, "tmp.%s", v18);
  v19 = (char *)fd_create_sibling_protected(*(_QWORD *)(a1 + 304), __str, 1538, v15);
  if (fd_truncate((uint64_t)v19, *(unsigned int *)(a1 + 316)) == -1)
  {
    v43 = 0;
    v48 = *__error();
    if (v48)
      v40 = v48;
    else
      v40 = 0xFFFFFFFFLL;
    v42 = v16;
    v38 = v19;
    v41 = -1;
    v44 = v17;
    goto LABEL_96;
  }
  v20 = *(unsigned int *)(a1 + 316);
  v21 = fd_mmap((uint64_t)v19);
  if (v21 == -1)
  {
    v49 = *__error();
    v50 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v151 = 136315394;
      *(_QWORD *)&v151[4] = "_data_map32_garbage_compact_collect";
      *(_WORD *)&v151[12] = 1024;
      *(_DWORD *)&v151[14] = 2636;
      _os_log_error_impl(&dword_1B8270000, v50, OS_LOG_TYPE_ERROR, "%s:%d: offsets fd_mmap error", v151, 0x12u);
    }
    *__error() = v49;
    v43 = 0;
    v51 = *__error();
    if (v51)
      v40 = v51;
    else
      v40 = 0xFFFFFFFFLL;
    v42 = v16;
    v38 = v19;
    v41 = -1;
    v44 = v17;
    goto LABEL_96;
  }
  v117 = v19;
  v22 = v13;
  v110 = v20;
  v23 = (_DWORD *)v21;
  v24 = *(unsigned int *)(a1 + 312);
  v25 = data_entry_store_11977(v16, 0, dword_1E6E38348);
  *v23 = 0;
  v26 = v25;
  v128 = 0;
  v132 = 0;
  v130 = v16;
  v131 = v17;
  v127[0] = 2;
  v127[1] = &v130;
  v115 = v24;
  v116 = v23;
  v133 = v23;
  v134 = v24;
  do
  {
    v27 = __ldxr(exceptionSequenceNum);
    v28 = v27 + 1;
  }
  while (__stxr(v27 + 1, exceptionSequenceNum));
  v29 = setThreadIdAndInfo(-1, (__int128 *)sMappingExceptionCallbacks, (uint64_t)v127, 0x40000000, v28);
  v125 = HIDWORD(v29);
  v126 = v29;
  v124 = __PAIR64__(v30, v31);
  v32 = *(_QWORD *)&threadData[18 * v29 + 2];
  v33 = v32 + 320 * HIDWORD(v29);
  *(_BYTE *)(v33 + 216) = 0;
  v109 = *(_DWORD *)(v33 + 312);
  v34 = *(void (**)(_QWORD))(v33 + 224);
  if (v34)
    v34(*(_QWORD *)(v32 + 320 * HIDWORD(v29) + 288));
  v123 = v126;
  v122 = v125;
  v121 = v124;
  if (_setjmp((int *)v33))
  {
    v35 = *__error();
    v36 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v151 = 136315394;
      *(_QWORD *)&v151[4] = "_data_map32_garbage_compact_collect";
      *(_WORD *)&v151[12] = 1024;
      *(_DWORD *)&v151[14] = 2733;
      _os_log_error_impl(&dword_1B8270000, v36, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v151, 0x12u);
    }
    *__error() = v35;
    *(_DWORD *)(v33 + 312) = v109;
    CIOnThreadCleanUpReset(v121);
    dropThreadId(v123, 1, v28);
    CICleanUpReset(v123, HIDWORD(v121));
    sibling_protected = (char *)v118;
    v37 = v24;
    goto LABEL_92;
  }
  v111 = v28;
  if (!v108)
  {
    v68 = v22;
    v67 = v26;
    v69 = v17;
    goto LABEL_88;
  }
  v52 = 1;
  v53 = v22;
  v54 = v26;
  v55 = v17;
  v56 = v16;
  while (1)
  {
    v16 = v56;
    v57 = v53;
    if (*(_DWORD *)(a1 + 364) <= v52)
    {
      v164 = 0u;
      v163 = 0u;
      v162 = 0u;
      v161 = 0u;
      v160 = 0u;
      v159 = 0u;
      v158 = 0u;
      v157 = 0u;
      v156 = 0u;
      v155 = 0u;
      v154 = 0u;
      v153 = 0u;
      v152 = 0u;
      memset(v151, 0, sizeof(v151));
      v65 = *__error();
      v66 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        log = v66;
        v71 = *(_DWORD *)(a1 + 364);
        v72 = fd_name(*(_QWORD *)(a1 + 240), (char *)v151, 0x100uLL);
        *(_DWORD *)__s = 136316418;
        *(_QWORD *)&__s[4] = "_data_map32_get_offset_entry";
        *(_WORD *)&__s[12] = 1024;
        *(_DWORD *)&__s[14] = 421;
        *(_WORD *)&__s[18] = 1024;
        *(_DWORD *)&__s[20] = v52;
        *(_WORD *)&__s[24] = 1024;
        *(_DWORD *)&__s[26] = v71;
        *(_WORD *)&__s[30] = 2048;
        *(_QWORD *)&__s[32] = a1;
        *(_WORD *)&__s[40] = 2080;
        *(_QWORD *)&__s[42] = v72;
        _os_log_error_impl(&dword_1B8270000, log, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)__s, 0x32u);
      }
      *__error() = v65;
      goto LABEL_52;
    }
    v58 = *(_QWORD *)(a1 + 320);
    if (v58)
    {
      v59 = *(unsigned int *)(v58 + 4 * v52);
      if (v59 >= 2)
        break;
    }
LABEL_52:
    v116[v52] = 1;
LABEL_53:
    v56 = v16;
    ++v52;
    v67 = v54;
    v68 = v57;
    v53 = v57;
    v69 = v55;
    if (v52 > v108)
      goto LABEL_88;
  }
  v119 = 0;
  v120 = 0;
  v129 = 0;
  v60 = *(_DWORD *)(a1 + 296);
  if (v60 <= v59)
  {
    v164 = 0u;
    v163 = 0u;
    v162 = 0u;
    v161 = 0u;
    v160 = 0u;
    v159 = 0u;
    v158 = 0u;
    v157 = 0u;
    v156 = 0u;
    v155 = 0u;
    v154 = 0u;
    v153 = 0u;
    v152 = 0u;
    memset(v151, 0, sizeof(v151));
    v106 = *__error();
    v70 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
    {
      v105 = v70;
      v85 = *(unsigned int *)(a1 + 296);
      v86 = fd_name(*(_QWORD *)(a1 + 240), (char *)v151, 0x100uLL);
      *(_DWORD *)__s = 136316418;
      *(_QWORD *)&__s[4] = "_data_map32_get_data_entry";
      *(_WORD *)&__s[12] = 1024;
      *(_DWORD *)&__s[14] = 445;
      *(_WORD *)&__s[18] = 2048;
      *(_QWORD *)&__s[20] = v59;
      *(_WORD *)&__s[28] = 2048;
      *(_QWORD *)&__s[30] = v85;
      *(_WORD *)&__s[38] = 2048;
      *(_QWORD *)&__s[40] = a1;
      *(_WORD *)&__s[48] = 2080;
      *(_QWORD *)&__s[50] = v86;
      _os_log_error_impl(&dword_1B8270000, v105, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx 0x%lx %p %s", (uint8_t *)__s, 0x3Au);
    }
    *__error() = v106;
    goto LABEL_52;
  }
  data_entry_restore_12001(*(_QWORD *)(a1 + 288), v59, v60, (uint64_t)&v119, &v129);
  if (v129)
  {
    v107 = v55;
    v174 = 0;
    v173 = 0u;
    v172 = 0u;
    v171 = 0u;
    v170 = 0u;
    v169 = 0u;
    v168 = 0u;
    v167 = 0u;
    v166 = 0u;
    v61 = 0;
    memset(__s, 0, sizeof(__s));
    do
    {
      if (v59 + v61 >= (unint64_t)*(unsigned int *)(a1 + 296))
        break;
      v62 = strlen(__s);
      sprintf(&__s[v62], "%d ", *(unsigned __int8 *)(*(_QWORD *)(a1 + 288) + v59 + v61++));
    }
    while (v61 != 5);
    v164 = 0u;
    v163 = 0u;
    v162 = 0u;
    v161 = 0u;
    v160 = 0u;
    v159 = 0u;
    v158 = 0u;
    v157 = 0u;
    v156 = 0u;
    v155 = 0u;
    v154 = 0u;
    v153 = 0u;
    v152 = 0u;
    memset(v151, 0, sizeof(v151));
    v63 = *__error();
    v64 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      v87 = fd_name(*(_QWORD *)(a1 + 240), (char *)v151, 0x100uLL);
      v88 = *(unsigned int *)(a1 + 296);
      *(_DWORD *)buf = 136316674;
      v138 = "_data_map32_get_data_entry";
      v139 = 1024;
      v140 = 441;
      v141 = 2080;
      v142 = v87;
      v143 = 2048;
      v144 = v59;
      v145 = 2048;
      v146 = v88;
      v147 = 2048;
      v148 = v119;
      v149 = 2080;
      v150 = __s;
      _os_log_error_impl(&dword_1B8270000, v64, OS_LOG_TYPE_ERROR, "%s:%d: data_entry_restore failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s", buf, 0x44u);
    }
    goto LABEL_48;
  }
  if (v52 >= a3 && (*(_QWORD *)v112 <= (uint64_t)v52 || !CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v112 + 16), v52)))
  {
    ++*(_QWORD *)(a5 + 8);
    if ((a4 & 2) == 0)
      goto LABEL_52;
    if ((a4 & 8) != 0)
    {
      if (gSILogLevels[0] < 5)
        goto LABEL_52;
      v107 = v55;
      v63 = *__error();
      v89 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
        goto LABEL_48;
      v90 = v120 + *(unsigned int *)(a1 + 220);
      *(_DWORD *)v151 = 67109890;
      *(_DWORD *)&v151[4] = v52;
      *(_WORD *)&v151[8] = 1024;
      *(_DWORD *)&v151[10] = v119;
      *(_WORD *)&v151[14] = 2080;
      *(_QWORD *)&v151[16] = v90;
      *(_WORD *)&v151[24] = 2048;
      *(_QWORD *)&v151[26] = a1;
      v82 = v89;
      v83 = "Deleting id: %d size: %d %s from %p";
      v84 = 34;
    }
    else
    {
      if (gSILogLevels[0] < 5)
        goto LABEL_52;
      v107 = v55;
      v63 = *__error();
      v81 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
        goto LABEL_48;
      *(_DWORD *)v151 = 67109632;
      *(_DWORD *)&v151[4] = v52;
      *(_WORD *)&v151[8] = 1024;
      *(_DWORD *)&v151[10] = v119;
      *(_WORD *)&v151[14] = 2048;
      *(_QWORD *)&v151[16] = a1;
      v82 = v81;
      v83 = "Deleting id: %d size: %d from %p";
      v84 = 24;
    }
    _os_log_impl(&dword_1B8270000, v82, OS_LOG_TYPE_DEFAULT, v83, v151, v84);
LABEL_48:
    *__error() = v63;
    v55 = v107;
    goto LABEL_52;
  }
  v73 = v54;
  v116[v52] = v54;
  if ((v119 & 0x3F80) != 0)
    v74 = 2;
  else
    v74 = 1;
  if ((v119 & 0x1FC000) != 0)
    v74 = 3;
  if ((v119 & 0xFE00000) != 0)
    v74 = 4;
  if (v119 >> 28)
    v75 = 5;
  else
    v75 = v74;
  v76 = v54 + (v75 + v119) + 8;
  v77 = v57;
  if (v76 >= v57)
  {
    v78 = (v76 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8];
    if (fd_truncate(v118, v78) == -1)
    {
      v100 = *__error();
      if (v100)
        v97 = v100;
      else
        v97 = 0xFFFFFFFFLL;
      v69 = v55;
      goto LABEL_95;
    }
    v77 = v78;
    v73 = v54;
  }
  v57 = v77;
  if (v76 <= v55)
    goto LABEL_77;
  v103 = v77;
  v79 = v73;
  v130 = -1;
  v131 = 0;
  munmap((void *)v16, v55);
  v80 = fd_mmap(v118);
  if (v80 != -1)
  {
    v16 = v80;
    v130 = v80;
    v131 = (2 * v55);
    v55 = v131;
    v73 = v79;
    v57 = v103;
LABEL_77:
    v54 = data_entry_store_11977(v16, v73, (unsigned int *)&v119);
    goto LABEL_53;
  }
  v101 = *__error();
  v102 = _SILogForLogForCategory(0);
  v68 = v103;
  if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v151 = 136315394;
    *(_QWORD *)&v151[4] = "_data_map32_garbage_compact_collect";
    *(_WORD *)&v151[12] = 1024;
    *(_DWORD *)&v151[14] = 2693;
    _os_log_error_impl(&dword_1B8270000, v102, OS_LOG_TYPE_ERROR, "%s:%d: storage fd_mmap error", v151, 0x12u);
  }
  *__error() = v101;
  v16 = -1;
  v67 = v54;
  v69 = v55;
LABEL_88:
  v91 = v67;
  if (!*(_QWORD *)(a5 + 8))
  {
    v97 = 0;
LABEL_95:
    v98 = v97;
    v42 = v16;
    v38 = v117;
    sibling_protected = (char *)v118;
    v43 = v115;
    v41 = (uint64_t)v116;
    v44 = v69;
    v40 = v98;
    goto LABEL_96;
  }
  msync((void *)v16, v68, 16);
  msync(v116, v110, 16);
  sibling_protected = (char *)v118;
  *(_QWORD *)(a5 + 32) = v118;
  *(_QWORD *)(a5 + 40) = v16;
  *(_QWORD *)(a5 + 48) = v117;
  *(_QWORD *)(a5 + 56) = v116;
  v37 = v115;
  *(_QWORD *)(a5 + 64) = v115;
  *(_QWORD *)(a5 + 72) = v110;
  *(_QWORD *)(a5 + 80) = v69;
  *(_QWORD *)(a5 + 88) = v68;
  *(_QWORD *)(a5 + 96) = v91;
  *(_DWORD *)a5 = 842150450;
  v128 = 1;
  v92 = *(_QWORD *)&threadData[18 * v123 + 2];
  v93 = v122;
  v94 = v92 + 320 * v122;
  *(_DWORD *)(v94 + 312) = v109;
  v95 = *(void (**)(_QWORD))(v94 + 232);
  if (v95)
    v95(*(_QWORD *)(v92 + 320 * v93 + 288));
  dropThreadId(v123, 0, v111);
  v17 = v69;
LABEL_92:
  v40 = 0;
  v42 = v16;
  v41 = (uint64_t)v116;
  v38 = v117;
  v43 = v37;
  v44 = v17;
  v96 = 0;
  if (!v128)
  {
LABEL_96:
    if ((unint64_t)(v42 + 1) >= 2)
    {
      munmap((void *)v42, v44);
      if (sibling_protected)
      {
LABEL_98:
        fd_release(sibling_protected);
        _fd_unlink_with_origin((uint64_t)sibling_protected, 0);
      }
    }
    else if (sibling_protected)
    {
      goto LABEL_98;
    }
    if (v41 != -1)
      munmap((void *)v41, v43);
    if (v38)
    {
      fd_release(v38);
      _fd_unlink_with_origin((uint64_t)v38, 0);
    }
    return v40;
  }
  return v96;
}

uint64_t (*mach_exc_server_routine(uint64_t a1))()
{
  int v1;

  v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 2409) >= 0xFFFFFFFC)
    return ContentIndex_catch_mach_exc_subsystem[5 * (v1 - 2405) + 5];
  else
    return 0;
}

void _Xmach_exception_raise(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  unsigned int v5;

  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
LABEL_2:
    v3 = -304;
    goto LABEL_3;
  }
  v3 = -304;
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    v4 = *(_DWORD *)(a1 + 4);
    if (v4 >= 0x44 && v4 <= 0x54)
    {
      if (*(unsigned __int16 *)(a1 + 38) << 16 != 1114112 || *(unsigned __int16 *)(a1 + 50) << 16 != 1114112)
      {
        v3 = -300;
        goto LABEL_3;
      }
      v5 = *(_DWORD *)(a1 + 64);
      if (v5 <= 2 && v5 <= (v4 - 68) >> 3 && v4 == 8 * v5 + 68)
      {
        ContentIndex_catch_mach_exception_raise();
        v3 = 46;
        goto LABEL_3;
      }
      goto LABEL_2;
    }
  }
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

void _Xmach_exception_raise_state(_DWORD *a1, uint64_t a2)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  int v12;

  if ((*a1 & 0x80000000) != 0)
    goto LABEL_17;
  v3 = a1[1];
  v4 = v3 < 0x30 || v3 > 0x1480;
  if (v4)
    goto LABEL_17;
  v5 = a1[9];
  if (v5 > 2)
    goto LABEL_17;
  v6 = 2 * v5;
  v7 = v5 <= (v3 - 48) >> 3 && v3 >= 8 * v5 + 48;
  if (v7
    && (v8 = a1[v6 + 11], v8 <= 0x510)
    && ((v9 = v3 - v6 * 4, v4 = v8 > (v9 - 48) >> 2, v10 = 4 * v8 + 48, !v4) ? (v11 = v9 == v10) : (v11 = 0), v11))
  {
    *(_DWORD *)(a2 + 40) = 1296;
    ContentIndex_catch_mach_exception_raise_state();
    v12 = 46;
  }
  else
  {
LABEL_17:
    v12 = -304;
  }
  *(_DWORD *)(a2 + 32) = v12;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

void _Xmach_exception_raise_state_identity(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
LABEL_2:
    v3 = -304;
    goto LABEL_3;
  }
  v3 = -304;
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    v4 = *(_DWORD *)(a1 + 4);
    if (v4 >= 0x4C && v4 <= 0x149C)
    {
      if (*(unsigned __int16 *)(a1 + 38) << 16 != 1114112 || *(unsigned __int16 *)(a1 + 50) << 16 != 1114112)
      {
        v3 = -300;
        goto LABEL_3;
      }
      v6 = *(_DWORD *)(a1 + 64);
      if (v6 > 2)
        goto LABEL_2;
      v3 = -304;
      if (v6 <= (v4 - 76) >> 3)
      {
        v7 = 8 * v6;
        if (v4 >= 8 * v6 + 76)
        {
          v8 = *(_DWORD *)(a1 + v7 + 72);
          if (v8 <= 0x510)
          {
            v9 = v4 - v7;
            if (v8 <= (v9 - 76) >> 2 && v9 == 4 * v8 + 76)
            {
              *(_DWORD *)(a2 + 40) = 1296;
              ContentIndex_catch_mach_exception_raise_state_identity();
              v3 = 46;
              goto LABEL_3;
            }
          }
          goto LABEL_2;
        }
      }
    }
  }
LABEL_3:
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
}

uint64_t _Xmach_exception_raise_identity_protected(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  unsigned int v6;
  unsigned int v7;

  if ((*(_DWORD *)a1 & 0x80000000) != 0)
  {
    v5 = *(_DWORD *)(a1 + 24);
    result = 4294966992;
    if (v5 == 1)
    {
      v6 = *(_DWORD *)(a1 + 4);
      if (v6 >= 0x40 && v6 <= 0x50)
      {
        if (*(unsigned __int16 *)(a1 + 38) << 16 == 1114112)
        {
          v7 = *(_DWORD *)(a1 + 60);
          if (v7 <= 2 && v7 <= (v6 - 64) >> 3 && v6 == 8 * v7 + 64)
            result = ContentIndex_catch_mach_exception_raise_identity_protected(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 56), *(thread_act_array_t *)(a1 + 72));
        }
        else
        {
          result = 4294966996;
        }
      }
    }
  }
  else
  {
    result = 4294966992;
  }
  *(_DWORD *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  return result;
}

_DWORD *mach_exc_server(_DWORD *result, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t (*v5)(void);

  v2 = result[2];
  *(_DWORD *)a2 = *result & 0x1F;
  *(_DWORD *)(a2 + 4) = 36;
  v3 = result[5] + 100;
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 20) = v3;
  v4 = result[5];
  if ((v4 - 2409) >= 0xFFFFFFFC)
  {
    v5 = ContentIndex_catch_mach_exc_subsystem[5 * (v4 - 2405) + 5];
    if (v5)
      return (_DWORD *)v5();
  }
  *(_QWORD *)(a2 + 24) = *MEMORY[0x1E0C804E8];
  *(_DWORD *)(a2 + 32) = -303;
  return result;
}

uint64_t sqlite3BtreeOpen(uint64_t a1)
{
  uint64_t **v1;
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char *v17;
  int v18;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  size_t v25;
  char *v26;
  char *v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  __int16 v41;
  uint64_t v42;
  unsigned __int16 v43;
  __int128 v44;
  __int128 v45;
  int v46[4];
  char *v47;
  char v48[16];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  int v54;
  uint64_t v55;

  v1 = (uint64_t **)MEMORY[0x1E0C80A78](a1);
  v55 = *MEMORY[0x1E0C80C00];
  v2 = (char *)malloc_type_malloc(0x38uLL, 0xD00A7D76uLL);
  v3 = (uint64_t *)v2;
  if (v2)
  {
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 24) = 0u;
    *(_OWORD *)(v2 + 8) = 0u;
    *(_QWORD *)v2 = 0;
    v44 = 0u;
    v45 = 0u;
    *(_OWORD *)v46 = 0u;
    if (sqlite3_malloc_failed)
    {
      v4 = 7;
LABEL_27:
      free(v3);
      v3 = 0;
      goto LABEL_28;
    }
    v47 = 0;
    if (getcwd(v48, 0x1388uLL)
      && (v5 = getcwd(v48, 0x1388uLL),
          sqlite3SetString((uint64_t)&v47, v5, v6, v7, v8, v9, v10, v11, "/", (uint64_t)"psid.db"),
          (v17 = v47) != 0))
    {
      v46[2] = -1;
      v18 = x_openat(-2, v47, 536871426, v12, v13, v14, v15, v16, 0x1A4u);
      v46[0] = v18;
      if (v18 < 0)
      {
        if (*__error() == 21 || (v18 = x_openat(-2, v17, 0, v20, v21, v22, v23, v24, v43), v46[0] = v18, v18 < 0))
        {
          v4 = 14;
          goto LABEL_24;
        }
        v19 = 1;
      }
      else
      {
        v19 = 0;
      }
      if (findLockInfo(v18, (_QWORD *)&v45 + 1, (char **)&v45))
      {
        close(v46[0]);
        v4 = 7;
LABEL_24:
        sqlite3OsClose((uint64_t)&v44);
        free(v17);
LABEL_25:
        if (*v3)
          sqlite3pager_close(*v3);
        goto LABEL_27;
      }
      LOWORD(v46[1]) = 256;
      v25 = strlen(v17);
      v26 = (char *)sqlite3Malloc(3 * (int)v25 + 16830);
      if (v26)
      {
        v27 = v26;
        v28 = v26 + 282;
        v29 = v26 + 16800;
        v30 = (v25 << 32) + 0x100000000;
        v31 = &v29[v30 >> 32];
        *(_QWORD *)v27 = v29;
        *((_QWORD *)v27 + 1) = &v31[v30 >> 32];
        *((_QWORD *)v27 + 2) = v31;
        strcpy(v29, v17);
        strcpy(v31, v17);
        v32 = v25;
        while ((int)v32 >= 1)
        {
          v33 = *((_QWORD *)v27 + 2);
          v34 = v32 - 1;
          v35 = *(unsigned __int8 *)(v33 + v32-- - 1);
          if (v35 == 47)
          {
            *(_BYTE *)(v33 + v34) = 0;
            break;
          }
        }
        strcpy(*((char **)v27 + 1), v17);
        free(v17);
        strcpy((char *)(*((_QWORD *)v27 + 1) + (int)v25), "-journal");
        v36 = v45;
        *(_OWORD *)(v27 + 24) = v44;
        *(_OWORD *)(v27 + 56) = *(_OWORD *)v46;
        *(_OWORD *)(v27 + 40) = v36;
        *((_QWORD *)v27 + 3) = v27;
        v27[280] = 0;
        *v28 = 0;
        *((_DWORD *)v27 + 42) = -1;
        *((_DWORD *)v27 + 44) = 0;
        *((_QWORD *)v27 + 23) = 0;
        *((_OWORD *)v27 + 14) = xmmword_1B8632040;
        *((_DWORD *)v27 + 60) = 100;
        v27[291] = 0;
        v27[296] = 0;
        v27[292] = v19;
        v27[293] = 0;
        *(_DWORD *)((char *)v28 + 5) = 1;
        *((_QWORD *)v27 + 43) = 0;
        *((_QWORD *)v27 + 44) = 0;
        *((_DWORD *)v27 + 51) = 136;
        *((_DWORD *)v27 + 102) = 512;
        *((_QWORD *)v27 + 41) = 0;
        *((_QWORD *)v27 + 42) = 0;
        bzero(v27 + 416, 0x4000uLL);
        *v3 = (uint64_t)v27;
        *((_QWORD *)v27 + 26) = pageDestructor;
        *((_QWORD *)v27 + 27) = pageReinit;
        v3[1] = 0;
        v3[2] = 0;
        *((_BYTE *)v3 + 26) = v27[292];
        *(_OWORD *)v48 = 0u;
        v49 = 0u;
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v54 = 0;
        if (v27[296])
        {
          *((_WORD *)v3 + 16) = 0;
        }
        else
        {
          lseek(*((_DWORD *)v27 + 14), 0, 0);
          read(*((_DWORD *)v27 + 14), v48, 0x64uLL);
          v38 = bswap32((unsigned __int16)v49);
          v39 = __rev16((unsigned __int16)v49);
          *((_WORD *)v3 + 16) = v39;
          if (HIWORD(v38) - 8193 > 0xFFFFE1FE)
          {
            v41 = BYTE4(v49);
            *((_BYTE *)v3 + 27) = BYTE5(v49);
            *((_WORD *)v3 + 14) = WORD3(v49);
            *((_BYTE *)v3 + 30) = 1;
            v40 = bswap32(DWORD1(v51)) != 0;
            goto LABEL_32;
          }
        }
        v40 = 0;
        v41 = 0;
        v39 = 1024;
        *((_WORD *)v3 + 16) = 1024;
        *(_WORD *)((char *)v3 + 27) = 8256;
        *((_BYTE *)v3 + 29) = 32;
LABEL_32:
        v4 = 0;
        *((_BYTE *)v3 + 31) = v40;
        *((_WORD *)v3 + 18) = v39 - v41;
        *((_WORD *)v3 + 17) = (v39 + 7) & 0xFFF8;
        v42 = *v3;
        *(_DWORD *)(v42 + 224) = v39;
        *(_DWORD *)(v42 + 228) = (v39 + 7) & 0x1FFF8;
        goto LABEL_28;
      }
      sqlite3OsClose((uint64_t)&v44);
      free(v17);
    }
    else
    {
      sqlite3OsClose((uint64_t)&v44);
    }
    v4 = 7;
    goto LABEL_25;
  }
  ++sqlite3_malloc_failed;
  v4 = 7;
LABEL_28:
  *v1 = v3;
  return v4;
}

uint64_t pageDestructor(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = result + (int)((a2 + 7) & 0xFFFFFFF8);
  v3 = *(_QWORD *)(v2 + 128);
  if (v3)
  {
    *(_QWORD *)(v2 + 128) = 0;
    result = sqlite3pager_unref(*(_QWORD *)(v3 + 112));
  }
  *(_BYTE *)v2 = 0;
  return result;
}

uint64_t pageReinit(uint64_t a1, int a2)
{
  uint64_t result;

  result = a1 + ((a2 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
    return initPage(result, *(_QWORD *)(result + 128));
  }
  return result;
}

uint64_t initPage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  signed int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned __int16 *v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;

  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 128);
  if (v5 == a2)
  {
    if (*(_BYTE *)a1)
      return 0;
  }
  else if (v5 || *(_BYTE *)a1)
  {
    return 11;
  }
  if (a2 && !v5)
  {
    *(_QWORD *)(a1 + 128) = a2;
    v7 = *(_QWORD *)(a2 + 112);
    if (*(_WORD *)(v7 - 10))
      ++*(_WORD *)(v7 - 10);
    else
      _page_ref((uint64_t *)(v7 - 88));
  }
  v8 = *(unsigned __int8 *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 112);
  decodeFlags(a1, *(unsigned __int8 *)(v9 + v8));
  *(_WORD *)(a1 + 1) = 0;
  v10 = *(unsigned __int16 *)(v4 + 36);
  v11 = v8 - 4 * *(unsigned __int8 *)(a1 + 4) + 12;
  *(_WORD *)(a1 + 14) = v8 - 4 * *(unsigned __int8 *)(a1 + 4) + 12;
  v12 = *(unsigned __int16 *)(v9 + v8 + 5);
  v13 = __rev16(*(unsigned __int16 *)(v9 + v8 + 3));
  *(_WORD *)(a1 + 20) = v13;
  v14 = 1431655766 * (*(unsigned __int16 *)(v4 + 32) - 8);
  if (v13 > (int)(HIDWORD(v14) + (v14 >> 63)) || a2 && !v13 && *(_DWORD *)(a2 + 120) != 1)
    return 11;
  v15 = __rev16(v12);
  v16 = __rev16(*(unsigned __int16 *)(v8 + v9 + 1));
  v17 = v15 - (v11 + 2 * v13) + *(unsigned __int8 *)(v8 + v9 + 7);
  if (v16)
  {
    if ((int)v16 > v10 - 4)
      return 11;
    result = 11;
    while (1)
    {
      v18 = (unsigned __int16 *)(v9 + v16);
      v19 = __rev16(*v18);
      v20 = __rev16(v18[1]);
      if (!v19)
        break;
      v17 += v20;
      v21 = v19 > v16 + v20 + 3 && (int)v19 <= v10 - 4;
      v16 = v19;
      if (!v21)
        return result;
    }
    v17 += v20;
  }
  *(_WORD *)(a1 + 18) = v17;
  if (v17 >= v10)
    return 11;
  result = 0;
  *(_BYTE *)a1 = 1;
  return result;
}

uint64_t decodeFlags(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  BOOL v8;
  BOOL v9;

  *(_BYTE *)(result + 3) = (a2 & 5) != 0;
  *(_BYTE *)(result + 5) = (a2 & 2) != 0;
  *(_BYTE *)(result + 4) = (a2 & 8) != 0;
  *(_BYTE *)(result + 9) = (4 * ((a2 & 8) != 0)) ^ 4;
  v2 = *(_QWORD *)(result + 104);
  v3 = 48;
  v4 = 52;
  if ((a2 & 4) == 0)
    v4 = 44;
  v5 = *(_DWORD *)(v2 + v4);
  if ((a2 & 4) == 0)
    v3 = 40;
  v6 = *(_DWORD *)(v2 + v3);
  *(_BYTE *)(result + 6) = (a2 & 4) >> 2;
  *(_WORD *)(result + 10) = v6;
  *(_WORD *)(result + 12) = v5;
  v8 = (a2 & 4) == 0 || ((a2 >> 3) & 1) != 0;
  v9 = ((a2 >> 1) & 1) == 0 && v8;
  *(_BYTE *)(result + 7) = v9;
  return result;
}

void sqlite3BtreeClose(uint64_t *a1)
{
  uint64_t *i;

  for (i = (uint64_t *)a1[1]; i; i = (uint64_t *)a1[1])
    sqlite3BtreeCloseCursor(i);
  sqlite3pager_close(*a1);
  free(a1);
}

void sqlite3BtreeCloseCursor(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a1[1];
  v2 = a1[2];
  v4 = *a1;
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = v3;
    v3 = a1[1];
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  *(_QWORD *)(v4 + 8) = v3;
  if (v3)
LABEL_3:
    *(_QWORD *)(v3 + 16) = v2;
LABEL_4:
  v5 = a1[6];
  if (v5)
    sqlite3pager_unref(*(_QWORD *)(v5 + 112));
  unlockBtreeIfUnused(v4);
  free(a1);
}

uint64_t unlockBtreeIfUnused(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!*(_BYTE *)(result + 24))
  {
    v1 = result;
    if (!*(_QWORD *)(result + 8))
    {
      v2 = *(_QWORD *)(result + 16);
      if (v2)
      {
        v3 = *(_QWORD *)(v2 + 112);
        if (!v3)
        {
          v3 = v2 - *(unsigned __int16 *)(v1 + 34);
          *(_QWORD *)(v2 + 104) = v1;
          *(_QWORD *)(v2 + 112) = v3;
          *(_DWORD *)(v2 + 120) = 1;
        }
        result = sqlite3pager_unref(v3);
        *(_QWORD *)(v1 + 16) = 0;
        *(_BYTE *)(v1 + 25) = 0;
      }
    }
  }
  return result;
}

uint64_t sqlite3BtreeBeginTrans(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v7;

  if (*(_BYTE *)(a1 + 24) != 2)
  {
    if (*(_BYTE *)(a1 + 26))
      return 8;
    v3 = *(_QWORD *)(a1 + 16);
    if (!v3)
    {
      v1 = lockBtree(a1);
      if ((_DWORD)v1)
        goto LABEL_12;
      v3 = *(_QWORD *)(a1 + 16);
    }
    v1 = sqlite3pager_begin(*(_QWORD *)(*(_QWORD *)(v3 + 112) - 88));
    if (!(_DWORD)v1)
    {
      if ((int)sqlite3pager_pagecount(*(_QWORD *)a1) > 0)
      {
LABEL_8:
        v1 = 0;
        *(_WORD *)(a1 + 24) = 2;
        return v1;
      }
      v4 = *(_QWORD *)(a1 + 16);
      v5 = *(_QWORD *)(v4 + 112);
      v1 = sqlite3pager_write((_QWORD *)v5);
      if (!(_DWORD)v1)
      {
        strcpy((char *)v5, "SQLite format 3");
        v7 = *(_WORD *)(a1 + 32);
        *(_BYTE *)(v5 + 16) = HIBYTE(v7);
        *(_BYTE *)(v5 + 17) = v7;
        *(_WORD *)(v5 + 18) = 257;
        *(_BYTE *)(v5 + 20) = *(_BYTE *)(a1 + 32) - *(_BYTE *)(a1 + 36);
        *(_BYTE *)(v5 + 21) = *(_BYTE *)(a1 + 27);
        *(_BYTE *)(v5 + 22) = *(_BYTE *)(a1 + 28);
        *(_BYTE *)(v5 + 23) = *(_BYTE *)(a1 + 29);
        *(_OWORD *)(v5 + 24) = 0u;
        *(_OWORD *)(v5 + 40) = 0u;
        *(_OWORD *)(v5 + 56) = 0u;
        *(_OWORD *)(v5 + 72) = 0u;
        *(_OWORD *)(v5 + 84) = 0u;
        zeroPage(v4, 0xDu);
        *(_BYTE *)(a1 + 30) = 1;
        if (*(_BYTE *)(a1 + 31))
          *(_DWORD *)(v5 + 52) = 0x1000000;
        goto LABEL_8;
      }
    }
LABEL_12:
    unlockBtreeIfUnused(a1);
    return v1;
  }
  return 0;
}

uint64_t lockBtree(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  __int16 v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;

  if (*(_QWORD *)(a1 + 16))
    return 0;
  v14 = 0;
  result = getPage(a1, 1, &v14);
  if (!(_DWORD)result)
  {
    if ((int)sqlite3pager_pagecount(*(_QWORD *)a1) <= 0)
    {
      v7 = *(_WORD *)(a1 + 36);
      v8 = *(unsigned __int8 *)(a1 + 27);
      v9 = *(unsigned __int8 *)(a1 + 28);
      v10 = *(unsigned __int8 *)(a1 + 29);
      v3 = v14;
    }
    else
    {
      v3 = v14;
      v4 = *(_QWORD *)(v14 + 112);
      if (*(_QWORD *)v4 != 0x66206574694C5153 || *(_QWORD *)(v4 + 8) != 0x332074616D726FLL)
        goto LABEL_20;
      if (*(unsigned __int8 *)(v4 + 18) > 1u)
        goto LABEL_20;
      if (*(unsigned __int8 *)(v4 + 19) > 1u)
        goto LABEL_20;
      v6 = __rev16(*(unsigned __int16 *)(v4 + 16));
      *(_WORD *)(a1 + 32) = v6;
      v7 = v6 - *(unsigned __int8 *)(v4 + 20);
      *(_WORD *)(a1 + 36) = v7;
      if ((v7 & 0xFFFCu) < 0x1F4)
        goto LABEL_20;
      *(_WORD *)(a1 + 34) = (v6 + 7) & 0xFFF8;
      v8 = *(unsigned __int8 *)(v4 + 21);
      *(_BYTE *)(a1 + 27) = v8;
      v9 = *(unsigned __int8 *)(v4 + 22);
      *(_BYTE *)(a1 + 28) = v9;
      v10 = *(unsigned __int8 *)(v4 + 23);
      *(_BYTE *)(a1 + 29) = v10;
      *(_BYTE *)(a1 + 31) = bswap32(*(_DWORD *)(v4 + 52)) != 0;
    }
    v11 = v7 - 12;
    v12 = v11 * v8;
    v13 = v11 * v9 / 255;
    *(_DWORD *)(a1 + 40) = v12 / 255 - 23;
    *(_DWORD *)(a1 + 44) = v13 - 23;
    *(_DWORD *)(a1 + 48) = v7 - 35;
    *(_DWORD *)(a1 + 52) = v11 * v10 / 255 - 23;
    if (v12 >= 5865 && v13 <= v12 / 255)
    {
      result = 0;
LABEL_22:
      *(_QWORD *)(a1 + 16) = v3;
      return result;
    }
    if (!v3)
    {
LABEL_21:
      result = 26;
      goto LABEL_22;
    }
    v4 = *(_QWORD *)(v3 + 112);
LABEL_20:
    sqlite3pager_unref(v4);
    v3 = 0;
    goto LABEL_21;
  }
  return result;
}

uint64_t zeroPage(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(unsigned __int8 *)(a1 + 8);
  v6 = (_BYTE *)(*(_QWORD *)(a1 + 112) + v5);
  bzero(v6, *(unsigned __int16 *)(v4 + 36) - v5);
  *v6 = a2;
  *(_DWORD *)(v6 + 1) = 0;
  v6[7] = 0;
  *(_WORD *)(v6 + 5) = bswap32(*(unsigned __int16 *)(v4 + 36)) >> 16;
  *(_WORD *)(a1 + 18) = *(_WORD *)(v4 + 36) - (((a2 >> 1) & 4 ^ 0xC) + v5);
  result = decodeFlags(a1, a2);
  *(_BYTE *)(a1 + 8) = v5;
  *(_WORD *)(a1 + 14) = ((a2 >> 1) & 4 ^ 0xC) + v5;
  *(_BYTE *)(a1 + 2) = 0;
  *(_WORD *)(a1 + 20) = 0;
  *(_WORD *)a1 = 1;
  return result;
}

uint64_t getPage(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = 0;
  result = sqlite3pager_get(*(_QWORD *)a1, a2, &v10);
  if (!(_DWORD)result)
  {
    v7 = v10;
    v8 = v10 + *(unsigned __int16 *)(a1 + 34);
    *(_QWORD *)(v8 + 104) = a1;
    *(_QWORD *)(v8 + 112) = v7;
    *(_DWORD *)(v8 + 120) = a2;
    if (a2 == 1)
      v9 = 100;
    else
      v9 = 0;
    *(_BYTE *)(v8 + 8) = v9;
    *a3 = v8;
  }
  return result;
}

uint64_t sqlite3BtreeCommit(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 24) == 2)
  {
    v2 = *(_QWORD *)a1;
    v3 = *(unsigned __int8 *)(*(_QWORD *)a1 + 290);
    if (*(_BYTE *)(*(_QWORD *)a1 + 290))
    {
      if (v3 == 1)
      {
        v4 = sqlite3pager_rollback(*(_QWORD *)a1);
        if (v4)
          v5 = v4;
        else
          v5 = 13;
      }
      else
      {
        v6 = (v3 << 29 >> 31) & 0xF;
        if ((v3 & 0x10) != 0)
          v6 = 10;
        if ((v3 & 1) != 0)
          v6 = 13;
        if ((v3 & 2) != 0)
          v6 = 7;
        if ((v3 & 8) != 0)
          v5 = 11;
        else
          v5 = v6;
      }
    }
    else if (*(unsigned __int8 *)(v2 + 289) >= 2u)
    {
      if (*(_BYTE *)(v2 + 296))
      {
        v7 = *(_QWORD *)(v2 + 360);
        if (v7)
        {
          v8 = 0;
          do
          {
            if (*(_BYTE *)(v7 + 74))
            {
              *(_QWORD *)(v7 + 80) = v8;
              v8 = v7;
            }
            v7 = *(_QWORD *)(v7 + 48);
          }
          while (v7);
          for (; v8; v8 = *(_QWORD *)(v8 + 80))
          {
            v9 = v8 + *(int *)(v2 + 204) + (uint64_t)*(int *)(v2 + 228) + 88;
            if (*(_QWORD *)v9)
              free(*(void **)v9);
            v10 = *(void **)(v9 + 8);
            if (v10)
              free(v10);
            *(_QWORD *)v9 = 0;
            *(_QWORD *)(v9 + 8) = 0;
            *(_QWORD *)(v8 + 56) = 0;
            *(_QWORD *)(v8 + 64) = 0;
            *(_DWORD *)(v8 + 71) = 0;
          }
        }
        v5 = 0;
        *(_QWORD *)(v2 + 368) = 0;
        *(_BYTE *)(v2 + 289) = 1;
      }
      else if (*(_BYTE *)(v2 + 294) && (v11 = sqlite3pager_sync(*(_QWORD *)a1, 0), (_DWORD)v11))
      {
        v5 = v11;
        sqlite3pager_rollback(v2);
      }
      else
      {
        v5 = pager_unwritelock(v2);
        *(_DWORD *)(v2 + 168) = -1;
      }
    }
    else
    {
      v5 = 1;
    }
  }
  else
  {
    v5 = 0;
  }
  *(_WORD *)(a1 + 24) = 0;
  unlockBtreeIfUnused(a1);
  return v5;
}

uint64_t sqlite3BtreeCursor(uint64_t a1, int a2, int a3, uint64_t (*a4)(int a1, int a2, void *__s1, int a4, void *__s2), uint64_t **a5)
{
  char v7;
  int v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t inited;
  uint64_t (*v15)(int, int, void *, int, void *);
  uint64_t v16;

  v7 = a3;
  v8 = a2;
  *a5 = 0;
  if (a3)
  {
    if (*(_BYTE *)(a1 + 26))
      return 8;
    if (checkReadLocks(*(_QWORD *)(a1 + 8), a2, 0))
      return 6;
  }
  if (*(_QWORD *)(a1 + 16) || (v10 = lockBtree(a1), !(_DWORD)v10))
  {
    v11 = (uint64_t *)malloc_type_malloc(0x68uLL, 0xA2076A49uLL);
    if (!v11)
    {
      ++sqlite3_malloc_failed;
      v10 = 7;
LABEL_24:
      unlockBtreeIfUnused(a1);
      return v10;
    }
    v12 = v11;
    *((_DWORD *)v11 + 10) = v8;
    if (v8 == 1)
    {
      if (!sqlite3pager_pagecount(*(_QWORD *)a1))
      {
        v10 = 16;
LABEL_23:
        free(v12);
        goto LABEL_24;
      }
      v8 = *((_DWORD *)v12 + 10);
    }
    v12[6] = 0;
    v13 = v12 + 6;
    inited = getAndInitPage(a1, v8, v12 + 6, 0);
    if ((_DWORD)inited)
    {
      v10 = inited;
      if (*v13)
        sqlite3pager_unref(*(_QWORD *)(*v13 + 112));
      goto LABEL_23;
    }
    v15 = dfltCompare;
    if (a4)
      v15 = a4;
    v12[3] = (uint64_t)v15;
    v12[4] = 0;
    *((_BYTE *)v12 + 96) = v7;
    *((_DWORD *)v12 + 14) = 0;
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    v16 = *(_QWORD *)(a1 + 8);
    *v12 = a1;
    v12[1] = v16;
    if (v16)
      *(_QWORD *)(v16 + 16) = v12;
    v10 = 0;
    v12[2] = 0;
    *(_QWORD *)(a1 + 8) = v12;
    *((_BYTE *)v12 + 97) = 0;
    *a5 = v12;
  }
  return v10;
}

uint64_t checkReadLocks(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v5;

  if (result)
  {
    v5 = result;
    while (1)
    {
      if (v5 != a3 && *(_DWORD *)(v5 + 40) == a2)
      {
        if (!*(_BYTE *)(v5 + 96))
          return 6;
        if (*(_DWORD *)(*(_QWORD *)(v5 + 48) + 120) != a2)
          moveToRoot(v5);
      }
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
        return 0;
    }
  }
  return result;
}

uint64_t getAndInitPage(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;

  if (!a2)
    return 11;
  result = getPage(a1, a2, a3);
  if (!(_DWORD)result)
  {
    if (*(_BYTE *)*a3)
      return 0;
    else
      return initPage(*a3, a4);
  }
  return result;
}

uint64_t dfltCompare(int a1, int a2, void *__s1, int a4, void *__s2)
{
  unsigned int v5;
  int v6;
  uint64_t result;

  v5 = a2 - a4;
  if (a2 >= a4)
    v6 = a4;
  else
    v6 = a2;
  LODWORD(result) = memcmp(__s1, __s2, v6);
  if ((_DWORD)result)
    return result;
  else
    return v5;
}

uint64_t moveToRoot(uint64_t a1)
{
  uint64_t result;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;

  v8 = 0;
  result = getAndInitPage(*(_QWORD *)a1, *(_DWORD *)(a1 + 40), &v8, 0);
  if (!(_DWORD)result)
  {
    v4 = *(_QWORD *)(a1 + 48);
    if (v4)
      sqlite3pager_unref(*(_QWORD *)(v4 + 112));
    v5 = v8;
    *(_QWORD *)(a1 + 48) = v8;
    *(_DWORD *)(a1 + 56) = 0;
    *(_WORD *)(a1 + 90) = 0;
    v6 = *(unsigned __int16 *)(v5 + 20);
    if (!*(_WORD *)(v5 + 20))
    {
      if (!*(_BYTE *)(v5 + 4))
      {
        if (*(_DWORD *)(v5 + 120) == 1
          && (v7 = bswap32(*(_DWORD *)(*(unsigned __int8 *)(v5 + 8) + *(_QWORD *)(v5 + 112) + 8))) != 0)
        {
          *(_BYTE *)(a1 + 97) = 1;
          result = moveToChild(a1, v7);
          v6 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 48) + 20);
        }
        else
        {
          v6 = 0;
          result = 11;
        }
        goto LABEL_9;
      }
      v6 = 0;
    }
    result = 0;
LABEL_9:
    v3 = v6 != 0;
    goto LABEL_10;
  }
  v3 = 0;
LABEL_10:
  *(_BYTE *)(a1 + 97) = v3;
  return result;
}

uint64_t moveToChild(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  result = getAndInitPage(*(_QWORD *)a1, a2, &v6, *(_QWORD *)(a1 + 48));
  if (!(_DWORD)result)
  {
    v4 = v6;
    *(_WORD *)(v6 + 16) = *(_DWORD *)(a1 + 56);
    v5 = *(_QWORD *)(a1 + 48);
    *(_BYTE *)(v5 + 1) = 0;
    sqlite3pager_unref(*(_QWORD *)(v5 + 112));
    *(_QWORD *)(a1 + 48) = v4;
    *(_DWORD *)(a1 + 56) = 0;
    *(_WORD *)(a1 + 90) = 0;
    if (*(_WORD *)(v4 + 20))
      return 0;
    else
      return 11;
  }
  return result;
}

uint64_t getCellInfo(uint64_t result)
{
  if (!*(_WORD *)(result + 90))
    return parseCellPtr(*(_QWORD *)(result + 48), *(_QWORD *)(*(_QWORD *)(result + 48) + 112)+ __rev16(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 112)+ *(unsigned __int16 *)(*(_QWORD *)(result + 48) + 14)+ 2 * *(int *)(result + 56))), result + 64);
  return result;
}

uint64_t parseCellPtr(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  char *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  __int16 v29;
  __int16 v30;

  *(_QWORD *)a3 = a2;
  v3 = *(unsigned __int8 *)(result + 9);
  v4 = *(unsigned __int8 *)(result + 7);
  if (*(_BYTE *)(result + 7))
  {
    v5 = (char *)(a2 + *(unsigned __int8 *)(result + 9));
    v4 = *v5;
    if (*v5 < 0)
    {
      v7 = v4 & 0x7F;
      v8 = v5[1];
      v9 = v7 << 7;
      if (v5[1] < 0)
      {
        v4 = v9 | v8 & 0x7F;
        v6 = 2;
        do
        {
          v10 = v6;
          v11 = v5[v6++];
          v4 = v11 & 0x7F | (v4 << 7);
        }
        while (v10 <= 7 && v11 < 0);
      }
      else
      {
        v4 = v9 | v8;
        LODWORD(v6) = 2;
      }
    }
    else
    {
      LODWORD(v6) = 1;
    }
    v3 += v6;
  }
  v12 = (unsigned __int8 *)(a2 + v3);
  v13 = *v12;
  if ((char)*v12 < 0)
  {
    v15 = v13 & 0x7F;
    v16 = v12[1];
    v17 = v15 << 7;
    if ((char)v12[1] < 0)
    {
      v18 = v16 & 0x7F | v17;
      v19 = v12[2];
      v20 = v18 << 7;
      if ((char)v12[2] < 0)
      {
        v21 = v19 & 0x7F | v20;
        v22 = v12[3];
        v23 = v21 << 7;
        if ((char)v12[3] < 0)
        {
          v13 = v22 & 0x7F | v23;
          v14 = 4;
          while (1)
          {
            v24 = v12[v14];
            if (v14 == 8)
              break;
            v13 = v24 & 0x7F | (v13 << 7);
            ++v14;
            if ((v24 & 0x80) == 0)
              goto LABEL_23;
          }
          v13 = v24 | (v13 << 8);
          LODWORD(v14) = 9;
        }
        else
        {
          v13 = v23 | v22;
          LODWORD(v14) = 4;
        }
      }
      else
      {
        v13 = v20 | v19;
        LODWORD(v14) = 3;
      }
    }
    else
    {
      v13 = v17 | v16;
      LODWORD(v14) = 2;
    }
  }
  else
  {
    LODWORD(v14) = 1;
  }
LABEL_23:
  *(_QWORD *)(a3 + 8) = v13;
  v25 = v14 + v3;
  *(_WORD *)(a3 + 20) = v14 + v3;
  *(_DWORD *)(a3 + 16) = v4;
  if (*(_BYTE *)(result + 3))
    v26 = 0;
  else
    v26 = v13;
  v27 = v4 + v26;
  v28 = *(unsigned __int16 *)(result + 10);
  if (v27 <= v28)
  {
    v29 = 0;
    v30 = v27 + v25;
    if ((int)(v27 + v25) <= 4)
      v30 = 4;
  }
  else
  {
    v27 = (v27 - *(unsigned __int16 *)(result + 12))
        % (*(unsigned __int16 *)(*(_QWORD *)(result + 104) + 36) - 4)
        + *(unsigned __int16 *)(result + 12);
    if ((int)v27 > (int)v28)
      LOWORD(v27) = *(_WORD *)(result + 12);
    v29 = v27 + v25;
    v30 = v27 + v25 + 4;
  }
  *(_WORD *)(a3 + 22) = v27;
  *(_WORD *)(a3 + 24) = v29;
  *(_WORD *)(a3 + 26) = v30;
  return result;
}

uint64_t getPayload(uint64_t a1, int a2, char *a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int *v23;

  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 48);
  getCellInfo(a1);
  v10 = (unsigned int *)(*(_QWORD *)(a1 + 64) + *(unsigned __int16 *)(a1 + 84));
  v23 = v10;
  if (*(_BYTE *)(v9 + 3))
    v11 = 0;
  else
    v11 = *(_DWORD *)(a1 + 72);
  if (a4)
    v12 = v11;
  else
    v12 = 0;
  if (v12 + a2 > (*(_DWORD *)(a1 + 80) + v11))
    return 1;
  v14 = *(unsigned __int16 *)(a1 + 86);
  LODWORD(v13) = v12 - v14;
  if (v12 < v14)
  {
    if (v12 + a2 <= v14)
      v15 = a2;
    else
      v15 = v14 - v12;
    memcpy(a3, (char *)v10 + v12, v15);
    v13 = 0;
    a2 -= v15;
    if (!a2)
      return v13;
    a3 += v15;
  }
  if (a2 >= 1 && (v16 = bswap32(*(unsigned int *)((char *)v10 + *(unsigned __int16 *)(a1 + 86)))) != 0)
  {
    v17 = *(unsigned __int16 *)(v8 + 36) - 4;
    while (1)
    {
      v18 = sqlite3pager_get(*(_QWORD *)v8, v16, &v23);
      if ((_DWORD)v18)
        return v18;
      v19 = (uint64_t)v23;
      v20 = *v23;
      if ((int)v13 >= v17)
      {
        LODWORD(v13) = v13 - v17;
      }
      else
      {
        if ((int)v13 + a2 <= v17)
          v21 = a2;
        else
          v21 = v17 - v13;
        memcpy(a3, (char *)v23 + (int)v13 + 4, v21);
        LODWORD(v13) = 0;
        a2 -= v21;
        a3 += v21;
      }
      sqlite3pager_unref(v19);
      if (a2 >= 1)
      {
        v16 = bswap32(v20);
        if (v16)
          continue;
      }
      goto LABEL_27;
    }
  }
  else
  {
LABEL_27:
    if (a2 <= 0)
      return 0;
    else
      return 11;
  }
}

uint64_t moveToLeftmost(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  while (1)
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (*(_BYTE *)(v2 + 4))
      break;
    result = moveToChild(a1, bswap32(*(_DWORD *)(*(_QWORD *)(v2 + 112)+ __rev16(*(unsigned __int16 *)(*(_QWORD *)(v2 + 112)+ *(unsigned __int16 *)(v2 + 14)+ 2 * *(int *)(a1 + 56))))));
    if ((_DWORD)result)
      return result;
  }
  return 0;
}

uint64_t sqlite3BtreeMoveto(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t Payload;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  Payload = moveToRoot(a1);
  if ((_DWORD)Payload)
    return Payload;
  if (!*(_BYTE *)(a1 + 97))
  {
    v14 = -1;
LABEL_48:
    Payload = 0;
    *a4 = v14;
    return Payload;
  }
  while (1)
  {
    v9 = *(_QWORD *)(a1 + 48);
    if (!a2 && !*(_BYTE *)(v9 + 3))
      return 11;
    if (*(_WORD *)(v9 + 20))
      break;
    v10 = 0;
    v14 = -1;
LABEL_40:
    if (*(_BYTE *)(v9 + 4)
      || ((v19 = *(_QWORD *)(v9 + 112), v10 >= *(unsigned __int16 *)(v9 + 20))
        ? (v20 = *(unsigned __int8 *)(v9 + 8) + 8)
        : (v20 = __rev16(*(unsigned __int16 *)(v19 + *(unsigned __int16 *)(v9 + 14) + 2 * v10))),
          (v21 = bswap32(*(_DWORD *)(v19 + v20))) == 0))
    {
      if (!a4)
        return 0;
      goto LABEL_48;
    }
    *(_DWORD *)(a1 + 56) = v10;
    *(_WORD *)(a1 + 90) = 0;
    Payload = moveToChild(a1, v21);
    if ((_DWORD)Payload)
      return Payload;
  }
  v10 = 0;
  v11 = *(unsigned __int16 *)(v9 + 20) - 1;
  while (1)
  {
    v12 = v11 + v10;
    if (v11 + v10 < 0 != __OFADD__(v11, v10))
      ++v12;
    *(_DWORD *)(a1 + 56) = v12 >> 1;
    *(_WORD *)(a1 + 90) = 0;
    if (*(_BYTE *)(a1 + 97))
    {
      getCellInfo(a1);
      v13 = *(_QWORD *)(a1 + 72);
    }
    else
    {
      v13 = 0;
    }
    if (!*(_BYTE *)(v9 + 3))
      break;
    if (v13 < a3)
    {
      v14 = -1;
LABEL_33:
      v10 = *(_DWORD *)(a1 + 56) + 1;
      goto LABEL_34;
    }
    if (v13 <= a3)
      goto LABEL_37;
    v14 = 1;
LABEL_32:
    v11 = *(_DWORD *)(a1 + 56) - 1;
LABEL_34:
    if (v10 > v11)
      goto LABEL_40;
  }
  v15 = *(_QWORD *)(a1 + 48);
  getCellInfo(a1);
  if (*(_BYTE *)(v15 + 3))
    LODWORD(v16) = 0;
  else
    LODWORD(v16) = *(_DWORD *)(a1 + 72);
  if (v16 >= *(unsigned __int16 *)(a1 + 86))
    v16 = *(unsigned __int16 *)(a1 + 86);
  else
    v16 = v16;
  if (v13 <= v16)
  {
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(a1 + 24))(*(_QWORD *)(a1 + 32), v13, *(_QWORD *)(a1 + 64) + *(unsigned __int16 *)(a1 + 84), a3, a2);
    if (!v14)
      goto LABEL_37;
LABEL_31:
    if (v14 < 0)
      goto LABEL_33;
    goto LABEL_32;
  }
  v17 = (char *)malloc_type_malloc((int)v13, 0xA2076A49uLL);
  v18 = v17;
  if ((int)v13 >= 1 && !v17)
  {
    ++sqlite3_malloc_failed;
    return 7;
  }
  if (!v17)
    return 7;
  Payload = getPayload(a1, v13, v17, 0);
  v14 = (*(uint64_t (**)(_QWORD, uint64_t, char *, uint64_t, uint64_t))(a1 + 24))(*(_QWORD *)(a1 + 32), v13, v18, a3, a2);
  free(v18);
  if ((_DWORD)Payload)
    return Payload;
  if (v14)
    goto LABEL_31;
LABEL_37:
  if (*(_BYTE *)(v9 + 6) && !*(_BYTE *)(v9 + 4))
  {
    v14 = 0;
    v10 = *(_DWORD *)(a1 + 56);
    goto LABEL_40;
  }
  v14 = 0;
  Payload = 0;
  if (a4)
    goto LABEL_48;
  return Payload;
}

uint64_t sqlite3BtreeNext(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 48);
  while (2)
  {
    if (*(_BYTE *)(a1 + 97))
    {
      v5 = *(_DWORD *)(a1 + 56) + 1;
      *(_DWORD *)(a1 + 56) = v5;
      *(_WORD *)(a1 + 90) = 0;
      if (v5 < *(unsigned __int16 *)(v4 + 20))
      {
        result = 0;
        *a2 = 0;
        if (!*(_BYTE *)(v4 + 4))
          return moveToLeftmost(a1);
      }
      else if (*(_BYTE *)(v4 + 4))
      {
        v6 = v4;
        do
        {
          v4 = *(_QWORD *)(v6 + 128);
          if (!v4
            || (v7 = *(_QWORD *)(v4 + 112), *(_DWORD *)(v4 + 120) <= 1u)
            && !__rev16(*(unsigned __int16 *)(*(unsigned __int8 *)(v4 + 8) + v7 + 3)))
          {
            result = 0;
            *a2 = 1;
            *(_BYTE *)(a1 + 97) = 0;
            return result;
          }
          v8 = *(unsigned __int16 *)(v6 + 16);
          if (*(_WORD *)(v7 - 10))
            ++*(_WORD *)(v7 - 10);
          else
            _page_ref((uint64_t *)(v7 - 88));
          sqlite3pager_unref(*(_QWORD *)(v6 + 112));
          *(_QWORD *)(a1 + 48) = v4;
          *(_WORD *)(a1 + 90) = 0;
          *(_DWORD *)(a1 + 56) = v8;
          v6 = v4;
        }
        while (v8 >= *(unsigned __int16 *)(v4 + 20));
        *a2 = 0;
        if (*(_BYTE *)(v4 + 6))
          continue;
        return 0;
      }
      else
      {
        result = moveToChild(a1, bswap32(*(_DWORD *)(*(unsigned __int8 *)(v4 + 8) + *(_QWORD *)(v4 + 112) + 8)));
        if (!(_DWORD)result)
        {
          result = moveToLeftmost(a1);
          *a2 = 0;
        }
      }
    }
    else
    {
      result = 0;
      *a2 = 1;
    }
    break;
  }
  return result;
}

uint64_t sqlite3BtreeInsert(uint64_t a1, char *a2, unint64_t a3, char *a4, int a5)
{
  uint64_t v5;
  uint64_t inserted;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  int v18;
  int v19;
  __int128 v20;
  __int128 v21;

  v5 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 24) == 2)
  {
    if (!*(_BYTE *)(a1 + 96))
      return 3;
    if (checkReadLocks(*(_QWORD *)(v5 + 8), *(_DWORD *)(a1 + 40), a1))
      return 6;
    v19 = 0;
    inserted = sqlite3BtreeMoveto(a1, (uint64_t)a2, a3, &v19);
    if (!(_DWORD)inserted)
    {
      v12 = *(_QWORD *)(a1 + 48);
      inserted = sqlite3pager_write(*(_QWORD **)(v12 + 112));
      if (!(_DWORD)inserted)
      {
        v13 = sqlite3MallocRaw(*(unsigned __int16 *)(v5 + 32) - 8);
        if (!v13)
          return 7;
        v14 = v13;
        v18 = 0;
        inserted = fillInCell(v12, (uint64_t)v13, a2, a3, a4, a5, &v18);
        if (!(_DWORD)inserted)
        {
          if (v19)
          {
            if (v19 < 0 && *(_WORD *)(v12 + 20))
            {
              ++*(_DWORD *)(a1 + 56);
              *(_WORD *)(a1 + 90) = 0;
            }
          }
          else if (*(_BYTE *)(a1 + 97))
          {
            v15 = (_DWORD *)(*(_QWORD *)(v12 + 112)
                           + __rev16(*(unsigned __int16 *)(*(_QWORD *)(v12 + 112)
                                                         + *(unsigned __int16 *)(v12 + 14)
                                                         + 2 * *(int *)(a1 + 56))));
            if (!*(_BYTE *)(v12 + 4))
              *v14 = *v15;
            v20 = 0u;
            v21 = 0u;
            parseCellPtr(v12, (uint64_t)v15, (uint64_t)&v20);
            v16 = WORD5(v21);
            inserted = clearCell(v12, (uint64_t)v15);
            if ((_DWORD)inserted)
              goto LABEL_26;
            dropCell(v12, *(_DWORD *)(a1 + 56), v16);
          }
          inserted = insertCell(v12, *(_DWORD *)(a1 + 56), (uint64_t)v14, v18, 0, 0);
          if (!(_DWORD)inserted)
          {
            inserted = balance(v12, 1);
            if (!(_DWORD)inserted)
              moveToRoot(a1);
          }
        }
LABEL_26:
        free(v14);
      }
    }
  }
  else if (*(_BYTE *)(v5 + 26))
  {
    return 8;
  }
  else
  {
    return 1;
  }
  return inserted;
}

uint64_t fillInCell(uint64_t a1, uint64_t a2, char *a3, unint64_t a4, char *a5, int a6, _DWORD *a7)
{
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  char *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v28;
  int v29;
  int v31;
  __int128 v33;
  __int128 v34;
  unsigned int v35;
  uint64_t v36;

  v36 = 0;
  v12 = *(_QWORD *)(a1 + 104);
  v35 = 0;
  v13 = 4 * (*(_BYTE *)(a1 + 4) == 0);
  if (*(_BYTE *)(a1 + 7))
  {
    v14 = a6;
    v13 += sqlite3PutVarint((_BYTE *)(a2 + v13), a6);
  }
  else
  {
    v14 = 0;
  }
  v33 = 0u;
  v34 = 0u;
  v15 = sqlite3PutVarint((_BYTE *)(a2 + v13), a4);
  parseCellPtr(a1, a2, (uint64_t)&v33);
  if (*(_BYTE *)(a1 + 3))
    v16 = 0;
  else
    v16 = v14;
  v31 = v16;
  if (*(_BYTE *)(a1 + 3))
    v17 = v14;
  else
    v17 = v14 + a4;
  if (*(_BYTE *)(a1 + 3))
    a3 = a5;
  else
    v14 = a4;
  *a7 = WORD5(v34);
  if (v17 < 1)
    return 0;
  v18 = 0;
  v19 = v15 + (uint64_t)v13;
  v20 = (_DWORD *)(a2 + WORD4(v34));
  v21 = (char *)(a2 + v19);
  v22 = WORD3(v34);
  do
  {
    if (!v22)
    {
      v23 = v35;
      v24 = allocatePage(v12, &v36, (int *)&v35, v35, 0);
      v25 = v24;
      if (v23)
        v26 = *(_BYTE *)(v12 + 31) == 0;
      else
        v26 = 1;
      if (!v26 && (_DWORD)v24 == 0)
        v25 = ptrmapPut(v12, v35, 4, v23);
      if ((_DWORD)v25)
        goto LABEL_43;
      *v20 = bswap32(v35);
      if (v18)
        sqlite3pager_unref(*(_QWORD *)(v18 + 112));
      v18 = v36;
      v20 = *(_DWORD **)(v36 + 112);
      *v20 = 0;
      v21 = (char *)(*(_QWORD *)(v18 + 112) + 4);
      v22 = *(unsigned __int16 *)(v12 + 36) - 4;
    }
    if (v17 >= v22)
      v28 = v22;
    else
      v28 = v17;
    if (v28 >= v14)
      v29 = v14;
    else
      v29 = v28;
    memcpy(v21, a3, v29);
    v17 -= v29;
    v21 += v29;
    v22 -= v29;
    if (v14 <= v28)
      a3 = a5;
    else
      a3 += v29;
    if (v14 <= v28)
      v14 = v31;
    else
      v14 -= v29;
  }
  while (v17 > 0);
  v25 = 0;
LABEL_43:
  if (v18)
    sqlite3pager_unref(*(_QWORD *)(v18 + 112));
  return v25;
}

uint64_t clearCell(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v3 = *(uint64_t **)(a1 + 104);
  v13 = 0u;
  v14 = 0u;
  parseCellPtr(a1, a2, (uint64_t)&v13);
  if (!WORD4(v14))
    return 0;
  v4 = bswap32(*(_DWORD *)(a2 + WORD4(v14)));
  if (!v4)
    return 0;
  while (1)
  {
    v12 = 0;
    if (v4 > sqlite3pager_pagecount(*v3))
      break;
    result = getPage((uint64_t)v3, v4, &v12);
    if ((_DWORD)result)
      return result;
    v6 = v12;
    v7 = *(unsigned __int8 **)(v12 + 112);
    v8 = *v7;
    v9 = v7[1];
    v10 = v7[2];
    v11 = v7[3];
    result = freePage(v12);
    if ((_DWORD)result)
      return result;
    v4 = (v8 << 24) | (v9 << 16) | (v10 << 8) | v11;
    sqlite3pager_unref(*(_QWORD *)(v6 + 112));
    if (!v4)
      return 0;
  }
  return 11;
}

uint64_t dropCell(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v16;
  uint64_t v17;
  uint64_t i;
  unsigned __int8 *v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;

  v3 = *(_QWORD *)(result + 112);
  v4 = *(unsigned __int16 *)(result + 14);
  v5 = (unsigned __int8 *)(v3 + v4 + 2 * a2);
  v6 = *v5;
  v7 = v5[1];
  v8 = v7 | (v6 << 8);
  v9 = *(unsigned __int8 *)(result + 8);
  v10 = v9 + 1;
  v11 = v9 + 1;
  do
  {
    v12 = (_BYTE *)(v3 + v11);
    v13 = *(unsigned __int8 *)(v3 + v11);
    v14 = *(unsigned __int8 *)(v3 + v11 + 1);
    v11 = v14 | (v13 << 8);
  }
  while (v11 < v8 && v11 != 0);
  if (a3 <= 4)
    LOWORD(a3) = 4;
  *v12 = v6;
  v12[1] = v7;
  v16 = (_BYTE *)(v3 + v8);
  *v16 = v13;
  v16[1] = v14;
  v16[2] = BYTE1(a3);
  v16[3] = a3;
  *(_WORD *)(result + 18) += a3;
  v17 = *(unsigned __int8 *)(result + 8) + 1;
  for (i = __rev16(*(unsigned __int16 *)(v3 + v17)); (_DWORD)i; i = v24 | v20)
  {
    v19 = (unsigned __int8 *)(v3 + i);
    v20 = v19[1];
    v21 = v19[1] | ((unint64_t)*v19 << 8);
    v22 = i + (bswap32(*((unsigned __int16 *)v19 + 1)) >> 16);
    if ((int)v21 - 1 >= (v22 + 3))
    {
      v24 = *v19 << 8;
    }
    else
    {
      *(_BYTE *)(*(unsigned __int8 *)(result + 8) + v3 + 7) += v22 - v20;
      *(_WORD *)v19 = *(_WORD *)(v3 + v21);
      *((_WORD *)v19 + 1) = bswap32((*(unsigned __int8 *)(v3 + v21 + 3) | (*(unsigned __int8 *)(v3 + v21 + 2) << 8))+ v21- i) >> 16;
      v23 = (unsigned __int8 *)(v3 + v17);
      v20 = v23[1];
      v24 = *v23 << 8;
      i = v17;
    }
    v17 = i;
  }
  v25 = *(unsigned __int8 *)(v3 + v10);
  v26 = v9 + v3;
  v27 = v9 + v3;
  v29 = *(unsigned __int8 *)(v27 + 5);
  v28 = (_WORD *)(v27 + 5);
  if ((_DWORD)v25 == v29)
  {
    v30 = *(unsigned __int8 *)(v26 + 2);
    if ((_DWORD)v30 == *(unsigned __int8 *)(v26 + 6))
    {
      v31 = v30 | (v25 << 8);
      *(_WORD *)(v3 + v10) = *(_WORD *)(v3 + v31);
      *v28 = bswap32((*(unsigned __int8 *)(v3 + v31 + 3) | (*(unsigned __int8 *)(v3 + v31 + 2) << 8)) + v31) >> 16;
    }
  }
  v32 = a2 + 1;
  v33 = *(unsigned __int16 *)(result + 20);
  if (a2 + 1 < v33)
  {
    v34 = v4 + 2 * a2 + v3 + 3;
    do
    {
      *(_WORD *)(v34 - 3) = *(_WORD *)(v34 - 1);
      ++v32;
      v33 = *(unsigned __int16 *)(result + 20);
      v34 += 2;
    }
    while (v32 < v33);
  }
  *(_WORD *)(result + 20) = v33 - 1;
  *(_WORD *)(*(unsigned __int8 *)(result + 8) + v3 + 3) = bswap32(v33 - 1) >> 16;
  *(_WORD *)(result + 18) += 2;
  *(_BYTE *)(result + 1) = 1;
  return result;
}

uint64_t insertCell(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6)
{
  uint64_t v9;
  __int16 v10;
  unsigned int v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int Space;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;

  v9 = a3;
  v10 = a2;
  v12 = *(unsigned __int8 *)(a1 + 2);
  if (*(_BYTE *)(a1 + 2) || a4 + 2 > *(unsigned __int16 *)(a1 + 18))
  {
    if (a5)
    {
      memcpy((void *)(a5 + a6), (const void *)(a3 + a6), (int)(a4 - a6));
      v12 = *(unsigned __int8 *)(a1 + 2);
      v9 = a5;
    }
    result = 0;
    *(_BYTE *)(a1 + 2) = v12 + 1;
    v14 = a1 + 16 * v12;
    *(_QWORD *)(v14 + 24) = v9;
    *(_WORD *)(v14 + 32) = v10;
    *(_WORD *)(a1 + 18) = 0;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 112);
    v16 = *(unsigned __int8 *)(a1 + 8);
    v17 = *(unsigned __int16 *)(a1 + 14);
    v23 = 2 * *(unsigned __int16 *)(a1 + 20);
    v18 = (v17 + v23);
    v19 = 2 * a2;
    v20 = v17 + 2 * a2;
    if ((int)v18 + 2 > (int)(__rev16(*(unsigned __int16 *)(v16 + v15 + 5)) - a4))
      defragmentPage(a1);
    Space = allocateSpace(a1, a4);
    ++*(_WORD *)(a1 + 20);
    *(_WORD *)(a1 + 18) -= 2;
    memcpy((void *)(v15 + (int)(Space + a6)), (const void *)(v9 + a6), (int)(a4 - a6));
    if (v23 > v19)
    {
      do
      {
        *(_WORD *)(v15 + v18) = *(_WORD *)(v15 + v18 - 2);
        v18 -= 2;
      }
      while ((int)v18 > (int)v20);
    }
    *(_WORD *)(v15 + v20) = bswap32(Space) >> 16;
    *(_WORD *)(v16 + v15 + 3) = bswap32(*(unsigned __int16 *)(a1 + 20)) >> 16;
    *(_BYTE *)(a1 + 1) = 1;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 104) + 31))
      return 0;
    v24 = 0u;
    v25 = 0u;
    parseCellPtr(a1, v9, (uint64_t)&v24);
    v22 = *(_BYTE *)(a1 + 3) ? 0 : *((_QWORD *)&v24 + 1);
    if (v22 + v25 <= WORD3(v25))
      return 0;
    result = ptrmapPut(*(_QWORD *)(a1 + 104), bswap32(*(_DWORD *)(v9 + WORD4(v25))), 3, *(_DWORD *)(a1 + 120));
    if (!(_DWORD)result)
      return 0;
  }
  return result;
}

uint64_t balance(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t Page;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  char *v19;
  char *v21;
  uint64_t v22;
  int *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t OverflowCell;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;

  if (*(_QWORD *)(a1 + 128))
  {
    if (*(_BYTE *)(a1 + 2)
      || !a2
      && (1431655766 * (unint64_t)(2 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 104) + 36))) >> 32 < *(unsigned __int16 *)(a1 + 18))
    {
      return balance_nonroot(a1);
    }
    return 0;
  }
  if (!*(_BYTE *)(a1 + 2))
  {
LABEL_16:
    if (*(_WORD *)(a1 + 20))
      return 0;
    v16 = *(_QWORD *)(a1 + 104);
    v17 = *(unsigned __int16 *)(v16 + 32);
    v18 = (int)(v17 - 8) / 3;
    v19 = (char *)malloc_type_malloc(12 * v18, 0xA2076A49uLL);
    if (v17 >= 0xB && v19 == 0)
    {
      ++sqlite3_malloc_failed;
    }
    else
    {
      v21 = v19;
      if (v19)
      {
        if (*(_BYTE *)(a1 + 4))
        {
LABEL_23:
          Page = 0;
LABEL_31:
          free(v21);
          return Page;
        }
        v32 = 0;
        Page = getPage(*(_QWORD *)(a1 + 104), bswap32(*(_DWORD *)(*(unsigned __int8 *)(a1 + 8) + *(_QWORD *)(a1 + 112) + 8)), &v32);
        if ((_DWORD)Page)
          goto LABEL_31;
        if (*(_DWORD *)(a1 + 120) == 1)
        {
          v22 = v32;
          Page = initPage(v32, a1);
          if ((_DWORD)Page)
            goto LABEL_31;
          if (*(unsigned __int16 *)(v22 + 18) < 0x64u)
            goto LABEL_42;
          v23 = (int *)&v21[8 * v18];
          zeroPage(a1, **(unsigned __int8 **)(v22 + 112));
          if (*(_WORD *)(v22 + 20))
          {
            v24 = 0;
            v25 = 0;
            do
            {
              v26 = *(_QWORD *)(v22 + 112)
                  + __rev16(*(unsigned __int16 *)(*(_QWORD *)(v22 + 112)
                                                + v24
                                                + *(unsigned __int16 *)(v22 + 14)));
              *(_QWORD *)&v21[8 * v25] = v26;
              v33 = 0u;
              v34 = 0u;
              parseCellPtr(v22, v26, (uint64_t)&v33);
              v23[v25++] = WORD5(v34);
              v27 = *(unsigned __int16 *)(v22 + 20);
              v24 += 2;
            }
            while (v25 < v27);
          }
          else
          {
            LODWORD(v27) = 0;
          }
          assemblePage(a1, v27, (const void **)v21, v23);
          *(_DWORD *)(*(unsigned __int8 *)(a1 + 8) + *(_QWORD *)(a1 + 112) + 8) = *(_DWORD *)(*(unsigned __int8 *)(v22 + 8)
                                                                                              + *(_QWORD *)(v22 + 112)
                                                                                              + 8);
        }
        else
        {
          v22 = v32;
          memcpy(*(void **)(a1 + 112), *(const void **)(v32 + 112), *(unsigned __int16 *)(*(_QWORD *)(a1 + 104) + 36));
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 128) = 0;
          initPage(a1, 0);
        }
        freePage(v22);
LABEL_42:
        v28 = reparentChildPages(a1);
        Page = v28;
        if (*(_BYTE *)(v16 + 31) && *(_WORD *)(a1 + 20))
        {
          v29 = 0;
          do
          {
            OverflowCell = findOverflowCell(a1, v29);
            v31 = ptrmapPutOvflPtr(a1, OverflowCell);
            if ((_DWORD)v31)
            {
              Page = v31;
              goto LABEL_31;
            }
            ++v29;
          }
          while (v29 < *(unsigned __int16 *)(a1 + 20));
          if (v22)
            goto LABEL_50;
        }
        else
        {
          if ((_DWORD)v28)
            goto LABEL_31;
LABEL_50:
          sqlite3pager_unref(*(_QWORD *)(v22 + 112));
        }
        goto LABEL_23;
      }
    }
    return 7;
  }
  *(_QWORD *)&v33 = 0;
  LODWORD(v32) = 0;
  v4 = *(_QWORD *)(a1 + 104);
  Page = allocatePage(v4, &v33, (int *)&v32, *(_DWORD *)(a1 + 120), 0);
  if ((_DWORD)Page)
    return Page;
  v6 = *(unsigned __int16 *)(v4 + 36);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(unsigned __int8 *)(a1 + 8);
  v9 = __rev16(*(unsigned __int16 *)(v7 + v8 + 5));
  v10 = v33;
  v11 = *(char **)(v33 + 112);
  memcpy(v11, (const void *)(v7 + v8), *(unsigned __int16 *)(a1 + 14) - v8 + 2 * *(unsigned __int16 *)(a1 + 20));
  memcpy(&v11[v9], (const void *)(v7 + v9), v6 - v9);
  Page = initPage(v10, a1);
  if ((_DWORD)Page)
    return Page;
  memcpy((void *)(v10 + 24), (const void *)(a1 + 24), 16 * *(unsigned __int8 *)(a1 + 2));
  v12 = *(unsigned __int8 *)(a1 + 2);
  *(_BYTE *)(v10 + 2) = v12;
  if (v12)
    *(_WORD *)(v10 + 18) = 0;
  zeroPage(a1, **(_BYTE **)(v10 + 112) & 0xF7);
  *(_DWORD *)(*(unsigned __int8 *)(a1 + 8) + *(_QWORD *)(a1 + 112) + 8) = bswap32(v32);
  if (*(_BYTE *)(v4 + 31))
  {
    Page = ptrmapPut(v4, *(_DWORD *)(v10 + 120), 5, *(_DWORD *)(a1 + 120));
    if ((_DWORD)Page)
      return Page;
    if (*(_WORD *)(v10 + 20))
    {
      v13 = 0;
      do
      {
        v14 = findOverflowCell(v10, v13);
        v15 = ptrmapPutOvflPtr(v10, v14);
        if ((_DWORD)v15)
          return v15;
      }
      while (++v13 < *(unsigned __int16 *)(v10 + 20));
    }
  }
  Page = balance_nonroot(v10);
  sqlite3pager_unref(*(_QWORD *)(v10 + 112));
  if (!(_DWORD)Page)
    goto LABEL_16;
  return Page;
}

uint64_t allocatePage(uint64_t a1, _QWORD *a2, int *a3, int a4, int a5)
{
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t Page;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _BYTE *v34;
  _BYTE *v35;
  int v36;
  int v37;
  char *v38;
  uint64_t i;
  int v40;
  _DWORD *v41;
  _DWORD *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v59;
  _QWORD *v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v62 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v62 + 112);
  v9 = bswap32(*(_DWORD *)(v8 + 36));
  v10 = v9 - 1;
  if (v9 >= 1)
  {
    v64 = 0;
    if (a5)
    {
      LOBYTE(v63) = 0;
      v12 = ptrmapGet(a1, a4, &v63, 0);
      if ((_DWORD)v12)
        return v12;
      v17 = v63 == 2;
      *a3 = a4;
      v8 = *(_QWORD *)(v62 + 112);
    }
    else
    {
      v17 = 0;
    }
    v13 = sqlite3pager_write((_QWORD *)v8);
    if ((_DWORD)v13)
      return v13;
    v60 = a2;
    v61 = a3;
    v18 = 0;
    *(_DWORD *)(*(_QWORD *)(v62 + 112) + 36) = bswap32(v10);
    while (1)
    {
      if (v18)
      {
        v19 = bswap32(**(_DWORD **)(v18 + 112));
        Page = getPage(a1, v19, &v64);
        if ((_DWORD)Page)
        {
          v13 = Page;
          goto LABEL_91;
        }
      }
      else
      {
        v19 = bswap32(*(_DWORD *)(*(_QWORD *)(v62 + 112) + 32));
        v12 = getPage(a1, v19, &v64);
        if ((_DWORD)v12)
          return v12;
      }
      v21 = v64;
      v22 = sqlite3pager_write(*(_QWORD **)(v64 + 112));
      v23 = *(_DWORD **)(v21 + 112);
      if ((_DWORD)v22)
      {
        v13 = v22;
        v57 = *(_QWORD *)(v21 + 112);
        goto LABEL_90;
      }
      v24 = bswap32(v23[1]);
      if (v17 || (_DWORD)v24)
      {
        if ((int)v24 > (*(unsigned __int16 *)(a1 + 36) >> 2) - 8)
          return 11;
        if (v17 && v19 == a4)
        {
          *a2 = v21;
          if ((_DWORD)v24)
          {
            v63 = 0;
            v26 = *(unsigned __int8 **)(v21 + 112);
            v27 = v26[8];
            v28 = v26[9];
            v29 = v26[10];
            v30 = v26[11];
            v31 = getPage(a1, (v27 << 24) | (v28 << 16) | (v29 << 8) | v30, &v63);
            if ((_DWORD)v31)
            {
              v13 = v31;
              goto LABEL_89;
            }
            v59 = v30;
            v32 = v63;
            v13 = sqlite3pager_write(*(_QWORD **)(v63 + 112));
            v33 = *(_DWORD **)(v32 + 112);
            if ((_DWORD)v13)
            {
              sqlite3pager_unref((uint64_t)v33);
LABEL_89:
              v57 = *(_QWORD *)(v21 + 112);
LABEL_90:
              sqlite3pager_unref(v57);
              if (!v18)
                return v13;
LABEL_91:
              v16 = *(_QWORD *)(v18 + 112);
              goto LABEL_92;
            }
            *v33 = **(_DWORD **)(v21 + 112);
            *(_DWORD *)(*(_QWORD *)(v32 + 112) + 4) = bswap32(v24 - 1);
            memcpy((void *)(*(_QWORD *)(v32 + 112) + 8), (const void *)(*(_QWORD *)(v21 + 112) + 12), 4 * ((int)v24 - 1));
            if (v18)
            {
              v34 = *(_BYTE **)(v18 + 112);
              *v34 = v27;
              v34[1] = v28;
              v34[2] = v29;
              v35 = v34 + 3;
            }
            else
            {
              v47 = *(_BYTE **)(v62 + 112);
              v47[32] = v27;
              v47[33] = v28;
              v47[34] = v29;
              v35 = v47 + 35;
            }
            *v35 = v59;
            sqlite3pager_unref(*(_QWORD *)(v32 + 112));
            a2 = v60;
          }
          else
          {
            v46 = **(_DWORD **)(v21 + 112);
            if (v18)
              **(_DWORD **)(v18 + 112) = v46;
            else
              *(_DWORD *)(*(_QWORD *)(v62 + 112) + 32) = v46;
          }
          v21 = 0;
          v13 = 0;
          v64 = 0;
          goto LABEL_55;
        }
        v36 = 0;
        if (a4 && (int)v24 >= 2)
        {
          v36 = 0;
          v37 = bswap32(v23[2]) - a4;
          if (v37 < 0)
            v37 = -v37;
          v38 = (char *)v23 + 15;
          for (i = 1; i != v24; ++i)
          {
            v40 = bswap32(*(_DWORD *)(v38 - 3)) - a4;
            if (v40 < 0)
              v40 = -v40;
            if (v40 < v37)
            {
              v36 = i;
              v37 = v40;
            }
            v38 += 4;
          }
        }
        v41 = &v23[v36];
        v43 = v41[2];
        v42 = v41 + 2;
        v44 = bswap32(v43);
        if (!v17 || v44 == a4)
        {
          *v61 = v44;
          if (v44 > sqlite3pager_pagecount(*(_QWORD *)a1))
            return 11;
          if (v36 < (int)v24 - 1)
            *v42 = v23[(int)v24 + 1];
          v23[1] = bswap32(v24 - 1);
          a2 = v60;
          v45 = getPage(a1, *v61, v60);
          if ((_DWORD)v45)
          {
            v13 = v45;
          }
          else
          {
            v48 = *(_QWORD *)(*v60 + 112);
            v49 = v48 - 88;
            v50 = *(_QWORD *)(v48 - 88);
            if (*(_BYTE *)(v50 + 289) == 4
              && *(_BYTE *)(v50 + 280)
              && !*(_BYTE *)(v48 - 12)
              && !*(_BYTE *)(v50 + 295)
              && !*(_BYTE *)(v50 + 296))
            {
              if (!*(_BYTE *)(v48 - 16))
              {
                v51 = *(unsigned int *)(v48 - 80);
                if ((int)v51 <= *(_DWORD *)(v50 + 172))
                {
                  *(_BYTE *)(*(_QWORD *)(v50 + 304) + (v51 >> 3)) |= 1 << (v51 & 7);
                  *(_BYTE *)(v48 - 16) = 1;
                  if (*(_BYTE *)(v50 + 285))
                  {
                    *(_BYTE *)(*(_QWORD *)(v50 + 312) + ((unint64_t)*(unsigned int *)(v48 - 80) >> 3)) |= 1 << (*(_DWORD *)(v48 - 80) & 7);
                    if (!*(_BYTE *)(v48 - 15))
                    {
                      v52 = *(_QWORD *)(v48 - 88);
                      *(_QWORD *)(v48 - 24) = 0;
                      v53 = *(_QWORD *)(v52 + 368);
                      if (v53)
                        *(_QWORD *)(v53 + 64) = v49;
                      *(_QWORD *)(v48 - 32) = v53;
                      *(_QWORD *)(v52 + 368) = v49;
                      *(_BYTE *)(v48 - 15) = 1;
                      a2 = v60;
                    }
                  }
                }
              }
              if (*(_BYTE *)(v50 + 285))
              {
                if (!*(_BYTE *)(v48 - 15))
                {
                  v54 = *(unsigned int *)(v48 - 80);
                  if ((int)v54 <= *(_DWORD *)(v50 + 176))
                  {
                    *(_BYTE *)(*(_QWORD *)(v50 + 312) + (v54 >> 3)) |= 1 << (v54 & 7);
                    if (!*(_BYTE *)(v48 - 15))
                    {
                      v55 = *(_QWORD *)(v48 - 88);
                      *(_QWORD *)(v48 - 24) = 0;
                      v56 = *(_QWORD *)(v55 + 368);
                      if (v56)
                        *(_QWORD *)(v56 + 64) = v49;
                      *(_QWORD *)(v48 - 32) = v56;
                      *(_QWORD *)(v55 + 368) = v49;
                      *(_BYTE *)(v48 - 15) = 1;
                      a2 = v60;
                    }
                  }
                }
              }
            }
            v13 = sqlite3pager_write(*(_QWORD **)(*a2 + 112));
            if ((_DWORD)v13 && *a2)
              sqlite3pager_unref(*(_QWORD *)(*a2 + 112));
          }
LABEL_55:
          v25 = 1;
          goto LABEL_56;
        }
        v13 = 0;
        v25 = 0;
        a2 = v60;
      }
      else
      {
        v13 = 0;
        *v61 = v19;
        *(_DWORD *)(*(_QWORD *)(v62 + 112) + 32) = *v23;
        *a2 = v21;
        v64 = 0;
        v25 = 1;
        v21 = 0;
      }
LABEL_56:
      if (v18)
        sqlite3pager_unref(*(_QWORD *)(v18 + 112));
      v17 = 1;
      v18 = v21;
      if (v25)
      {
        if (!v21)
          return v13;
        v16 = *(_QWORD *)(v21 + 112);
LABEL_92:
        sqlite3pager_unref(v16);
        return v13;
      }
    }
  }
  v14 = sqlite3pager_pagecount(*(_QWORD *)a1);
  v15 = v14 + 1;
  *a3 = v14 + 1;
  if (*(_BYTE *)(a1 + 31) && !((v14 - 1) % (*(unsigned __int16 *)(a1 + 36) / 5u + 1)))
  {
    v15 = v14 + 2;
    *a3 = v14 + 2;
  }
  v13 = getPage(a1, v15, a2);
  if (!(_DWORD)v13)
  {
    v13 = sqlite3pager_write(*(_QWORD **)(*a2 + 112));
    if ((_DWORD)v13)
    {
      if (*a2)
      {
        v16 = *(_QWORD *)(*a2 + 112);
        goto LABEL_92;
      }
    }
  }
  return v13;
}

uint64_t ptrmapPut(uint64_t a1, int a2, int a3, int a4)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v14;

  if (!a2)
    return 11;
  v14 = 0;
  v7 = a2 - 2;
  v8 = *(unsigned __int16 *)(a1 + 36) / 5u + 1;
  v9 = sqlite3pager_get(*(_QWORD *)a1, (a2 - 2) / v8 * v8 + 2, &v14);
  if (!(_DWORD)v9)
  {
    v10 = 5 * (v7 % (*(unsigned __int16 *)(a1 + 36) / 5u + 1));
    v11 = v14;
    if (*((unsigned __int8 *)v14 + v10 - 5) == a3 && bswap32(*(_DWORD *)((char *)v14 + v10 - 4)) == a4)
    {
      v9 = 0;
    }
    else
    {
      v9 = sqlite3pager_write(v14);
      if (!(_DWORD)v9)
      {
        *((_BYTE *)v11 + v10 - 5) = a3;
        v12 = (char *)v11 + v10;
        *(v12 - 4) = HIBYTE(a4);
        *(v12 - 3) = BYTE2(a4);
        *(v12 - 2) = BYTE1(a4);
        *(v12 - 1) = a4;
      }
    }
    sqlite3pager_unref((uint64_t)v11);
  }
  return v9;
}

uint64_t findOverflowCell(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  int v5;
  BOOL v6;

  v2 = *(unsigned __int8 *)(a1 + 2);
  if (!*(_BYTE *)(a1 + 2))
    return *(_QWORD *)(a1 + 112)
         + __rev16(*(unsigned __int16 *)(*(_QWORD *)(a1 + 112) + *(unsigned __int16 *)(a1 + 14) + 2 * a2));
  v3 = v2 + 1;
  v4 = (unsigned __int16 *)(a1 + 16 * v2 + 16);
  while (1)
  {
    v5 = *v4;
    v4 -= 8;
    v6 = a2 == v5;
    if (a2 >= v5)
      break;
LABEL_6:
    if ((unint64_t)--v3 <= 1)
      return *(_QWORD *)(a1 + 112)
           + __rev16(*(unsigned __int16 *)(*(_QWORD *)(a1 + 112) + *(unsigned __int16 *)(a1 + 14) + 2 * a2));
  }
  if (!v6)
  {
    --a2;
    goto LABEL_6;
  }
  return *(_QWORD *)(a1 + 16 * (v3 - 2) + 24);
}

uint64_t ptrmapPutOvflPtr(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v6;
  __int128 v7;

  if (a2
    && ((v6 = 0u, v7 = 0u, parseCellPtr(a1, a2, (uint64_t)&v6), *(_BYTE *)(a1 + 3))
      ? (v4 = 0)
      : (v4 = *((_QWORD *)&v6 + 1)),
        v4 + v7 > WORD3(v7)))
  {
    return ptrmapPut(*(_QWORD *)(a1 + 104), bswap32(*(_DWORD *)(a2 + WORD4(v7))), 3, *(_DWORD *)(a1 + 120));
  }
  else
  {
    return 0;
  }
}

uint64_t balance_nonroot(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  int v6;
  int v7;
  const void **v8;
  const void **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int *v26;
  int v27;
  uint64_t inited;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  void **v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t OverflowCell;
  BOOL v56;
  uint64_t v57;
  const void **v58;
  const void *v59;
  size_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  _BOOL4 v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int i;
  int v72;
  int v73;
  int v74;
  unint64_t v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const void **v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _DWORD *v105;
  int v106;
  uint64_t v107;
  uint64_t inserted;
  uint64_t v109;
  _DWORD *v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  int v123;
  char *v124;
  _BOOL4 v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  unsigned int v130;
  uint64_t v131;
  int v132;
  unsigned int v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  __int128 v141;
  size_t __n[2];
  char *v143;
  char *v144;
  char *v145;
  _DWORD v146[5];
  _DWORD v147[5];
  _QWORD v148[3];
  _DWORD v149[5];
  _QWORD v150[5];
  _QWORD v151[5];
  _QWORD v152[3];
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  memset(v152, 0, sizeof(v152));
  memset(v151, 0, 24);
  memset(v150, 0, sizeof(v150));
  memset(v148, 0, sizeof(v148));
  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 128);
  sqlite3pager_write(*(_QWORD **)(v3 + 112));
  if (*(_BYTE *)(a1 + 4)
    && *(_BYTE *)(a1 + 3)
    && *(_BYTE *)(a1 + 6)
    && *(_BYTE *)(a1 + 2) == 1
    && *(unsigned __int16 *)(a1 + 32) == *(unsigned __int16 *)(a1 + 20)
    && *(_DWORD *)(*(_QWORD *)(a1 + 128) + 120) != 1
    && bswap32(*(_DWORD *)(*(unsigned __int8 *)(v3 + 8) + *(_QWORD *)(v3 + 112) + 8)) == *(_DWORD *)(a1 + 120))
  {
    return balance_quick(a1, v3);
  }
  v5 = 1431655766 * (*(unsigned __int16 *)(v2 + 32) - 8);
  v6 = HIDWORD(v5) + (v5 >> 63) + 2;
  if (*(_BYTE *)(v2 + 31))
    v7 = 2 * v6;
  else
    v7 = 0;
  v8 = (const void **)malloc_type_malloc(36 * v6 + 8 * *(unsigned __int16 *)(v2 + 34) + v7 + 408, 0xA2076A49uLL);
  if (!v8)
  {
    ++sqlite3_malloc_failed;
    return 7;
  }
  v9 = v8;
  v10 = (char *)&v8[3 * v6];
  v11 = *(unsigned __int16 *)(v2 + 34);
  v143 = &v10[12 * v6];
  v144 = &v143[v11 + 136];
  v145 = &v144[v11 + 136];
  v124 = &v145[v11 + 136];
  v138 = *(unsigned __int8 *)(v2 + 31);
  if (*(_BYTE *)(v2 + 31))
    v12 = (uint64_t)&v145[5 * v11 + 136 + v11];
  else
    v12 = 0;
  if (*(_BYTE *)(v3 + 1))
  {
    v13 = *(unsigned __int16 *)(v3 + 20);
    v14 = *(_QWORD *)(v3 + 112);
    if (*(_WORD *)(v3 + 20))
    {
      v15 = 0;
      v16 = *(unsigned __int16 *)(v3 + 14) + v14 + 1;
      while (bswap32(*(_DWORD *)(v14 + __rev16(*(unsigned __int16 *)(v16 - 1)))) != *(_DWORD *)(a1 + 120))
      {
        v16 += 2;
        if (v13 == ++v15)
          goto LABEL_25;
      }
      LODWORD(v13) = v15;
    }
  }
  else
  {
    LODWORD(v13) = *(unsigned __int16 *)(a1 + 16);
    v14 = *(_QWORD *)(v3 + 112);
  }
LABEL_25:
  v139 = v2;
  v118 = v11;
  v119 = 3 * v6;
  v120 = a1;
  if (*(_WORD *)(v14 - 10))
    ++*(_WORD *)(v14 - 10);
  else
    _page_ref((uint64_t *)(v14 - 88));
  v18 = 0;
  v19 = 0;
  v20 = v13 - 1;
  v21 = *(unsigned __int16 *)(v3 + 20);
  if ((int)v13 + 2 > v21)
    v20 = v21 - 2;
  v22 = v20 & ~(v20 >> 31);
  v23 = (2 * v22) | 1;
  v136 = v20 & ~(v20 >> 31);
  v137 = v3;
  while (1)
  {
    v24 = v22 + v19;
    v25 = *(unsigned __int16 *)(v3 + 20);
    if ((int)v22 + (int)v19 < v25)
    {
      v26 = (unsigned int *)(*(_QWORD *)(v3 + 112)
                           + __rev16(*(unsigned __int16 *)(*(_QWORD *)(v3 + 112)
                                                         + *(unsigned __int16 *)(v3 + 14)
                                                         + v23
                                                         - 1)));
      v148[v19] = v26;
      goto LABEL_35;
    }
    if (v24 != v25)
      break;
    v26 = (unsigned int *)(*(unsigned __int8 *)(v3 + 8) + *(_QWORD *)(v3 + 112) + 8);
LABEL_35:
    v27 = bswap32(*v26);
    *((_DWORD *)&v151[3] + v19 + 1) = v27;
    inited = getAndInitPage(v139, v27, &v152[v18], v3);
    if ((_DWORD)inited)
    {
      v17 = inited;
      v133 = v19;
      v29 = 0;
      goto LABEL_158;
    }
    *(_WORD *)(v152[v19] + 16) = v24;
    v151[v19++] = 0;
    ++v18;
    v23 += 2;
    LODWORD(v22) = v136;
    v3 = v137;
    if (v19 == 3)
      goto LABEL_40;
  }
  if ((_DWORD)v19)
  {
LABEL_40:
    v30 = v139;
    v31 = *(unsigned __int16 *)(v139 + 34);
    v32 = v152;
    v33 = v151;
    v34 = (void **)&v143;
    v35 = v19;
    v36 = v19;
    do
    {
      v38 = (char *)*v34++;
      v37 = v38;
      v39 = &v38[v31];
      *v33++ = &v38[v31];
      *(_QWORD *)&v38[v31 + 112] = v38;
      v40 = *v32++;
      memcpy(v37, *(const void **)(v40 + 112), v31 + 136);
      v31 = *(unsigned __int16 *)(v139 + 34);
      *((_QWORD *)v39 + 14) = &v39[-v31];
      --v36;
    }
    while (v36);
    v41 = 0;
    v42 = v35;
  }
  else
  {
    v42 = 0;
    v41 = 1;
    v30 = v139;
  }
  v43 = *(unsigned __int8 *)(v120 + 4);
  v127 = 4 * v43;
  if (*(_BYTE *)(v120 + 6))
    v44 = v43 == 0;
  else
    v44 = 1;
  v45 = !v44;
  v46 = v45 << 31 >> 31;
  v133 = v42;
  v134 = v42;
  if (v41)
  {
    LODWORD(v47) = 0;
    v128 = 0;
    goto LABEL_99;
  }
  v48 = 0;
  v47 = 0;
  v128 = 0;
  if (v138)
    v49 = v30 == 0;
  else
    v49 = 1;
  v50 = !v49;
  v122 = v50;
  v129 = (int)(v42 - 1);
  do
  {
    v51 = v151[v48];
    v52 = *(unsigned __int8 *)(v51 + 2) + *(unsigned __int16 *)(v51 + 20);
    if (v52)
    {
      v53 = 0;
      v54 = (int)v47;
      do
      {
        OverflowCell = findOverflowCell(v51, v53);
        v9[v54] = (const void *)OverflowCell;
        v141 = 0u;
        *(_OWORD *)__n = 0u;
        parseCellPtr(v51, OverflowCell, (uint64_t)&v141);
        *(_DWORD *)&v10[4 * v54] = WORD1(__n[1]);
        if (*(_BYTE *)(v139 + 31))
          v56 = v138 == 0;
        else
          v56 = 1;
        if (!v56)
        {
          *(_BYTE *)(v12 + v54) = v48;
          v57 = *(unsigned __int8 *)(v51 + 2);
          if (*(_BYTE *)(v51 + 2))
          {
            v58 = (const void **)(v51 + 24);
            while (*v58 != v9[v54])
            {
              v58 += 2;
              if (!--v57)
                goto LABEL_70;
            }
            *(_BYTE *)(v12 + v54) = -1;
          }
        }
LABEL_70:
        ++v54;
        ++v53;
      }
      while (v53 != v52);
      v47 = v54;
      v30 = v139;
      v42 = v133;
    }
    if (v48 < v129)
    {
      v131 = v47;
      v59 = (const void *)v148[v48];
      v141 = 0u;
      *(_OWORD *)__n = 0u;
      parseCellPtr(v137, (uint64_t)v59, (uint64_t)&v141);
      v60 = WORD1(__n[1]);
      if ((v46 & 1) != 0)
      {
        dropCell(v137, v136, WORD1(__n[1]));
        v47 = v131;
        v42 = v133;
      }
      else
      {
        *(_DWORD *)&v10[4 * (int)v131] = WORD1(__n[1]);
        memcpy(&v124[v128], v59, v60);
        v30 = v139;
        v9[(int)v131] = &v124[v128 + v127];
        if (v122 && *(_BYTE *)(v139 + 31))
          *(_BYTE *)(v12 + (int)v131) = -1;
        dropCell(v137, v136, v60);
        *(_DWORD *)&v10[4 * (int)v131] -= v127;
        if (!*(_BYTE *)(v51 + 4))
          *(_DWORD *)v9[(int)v131] = *(_DWORD *)(*(unsigned __int8 *)(v51 + 8) + *(_QWORD *)(v51 + 112) + 8);
        v128 += v60;
        v42 = v133;
        v47 = (v131 + 1);
      }
    }
    ++v48;
  }
  while (v48 != v134);
  if ((int)v47 < 1)
  {
LABEL_99:
    v62 = 0;
    v125 = 0;
    v146[0] = 0;
    v132 = v47;
    v147[0] = v47;
    v130 = **(unsigned __int8 **)(v120 + 112);
    goto LABEL_100;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  v64 = v127 + *(unsigned __int16 *)(v30 + 36) - 12;
  do
  {
    v65 = v61 + 2;
    v61 += 2 + *(_DWORD *)&v10[4 * v63];
    if (v61 > v64)
    {
      v61 = 0;
      v146[v62] = v65;
      v147[v62] = v63;
      v63 += v46;
      ++v62;
    }
    ++v63;
  }
  while (v63 < (int)v47);
  v146[v62] = v61;
  v147[v62] = v47;
  v66 = v62 > 0;
  if (v62 >= 1)
  {
    v67 = v62;
    while (1)
    {
      v68 = v146[v67];
      v69 = (v67 - 1);
      v70 = v146[v69];
      for (i = v147[v69]; ; i = v72)
      {
        v72 = i - 1;
        v73 = *(_DWORD *)&v10[4 * v46 + 4 * i];
        if (v68)
          break;
        v68 = v73 + 2;
        v70 = v70 - *(_DWORD *)&v10[4 * v72] - 2;
LABEL_94:
        v147[v69] = v72;
      }
      v74 = v68 + v73 + 2;
      if (v74 <= v70 - *(_DWORD *)&v10[4 * v72] - 2)
        break;
      v146[v67] = v68;
      v146[v69] = v70;
      if (v67-- <= 1)
        goto LABEL_97;
    }
    v70 = v70 - *(_DWORD *)&v10[4 * v72] - 2;
    v68 = v74;
    goto LABEL_94;
  }
LABEL_97:
  v130 = **(unsigned __int8 **)(v120 + 112);
  v132 = v47;
  if ((v62 & 0x80000000) == 0)
  {
    v125 = v62 > 0;
LABEL_100:
    v76 = 0;
    v123 = v62;
    v77 = (v62 + 1);
    v78 = v149;
    while (1)
    {
      *(_QWORD *)&v141 = 0;
      if (v76 >= v134)
      {
        v80 = allocatePage(v139, &v141, v78, *(v78 - 1), 0);
        if ((_DWORD)v80)
        {
LABEL_108:
          v17 = v80;
          v29 = v76;
          goto LABEL_158;
        }
        v79 = v141;
        v150[v76] = v141;
      }
      else
      {
        v79 = v152[v76];
        v150[v76] = v79;
        *v78 = *((_DWORD *)&v151[3] + v76 + 1);
        v152[v76] = 0;
        v80 = sqlite3pager_write(*(_QWORD **)(v79 + 112));
        if ((_DWORD)v80)
          goto LABEL_108;
      }
      ++v76;
      zeroPage(v79, v130);
      ++v78;
      if (v77 == v76)
      {
        v42 = v133;
        v29 = v77;
        v66 = v125;
        goto LABEL_111;
      }
    }
  }
  v123 = v62;
  v29 = 0;
LABEL_111:
  if (v29 < v42)
  {
    v81 = v134 - v29;
    v82 = &v152[v29];
    while (1)
    {
      v83 = *v82;
      v84 = freePage(*v82);
      if ((_DWORD)v84)
        break;
      if (v83)
        sqlite3pager_unref(*(_QWORD *)(v83 + 112));
      *v82++ = 0;
      if (!--v81)
        goto LABEL_117;
    }
    v17 = v84;
LABEL_158:
    v86 = v9;
    goto LABEL_159;
  }
LABEL_117:
  v85 = v137;
  v86 = v9;
  if (v66)
  {
    v87 = 0;
    v88 = 1;
    do
    {
      v89 = v149[v87];
      v90 = v88;
      v91 = v87;
      v92 = v89;
      do
      {
        if (v149[v90] < v92)
        {
          v92 = v149[v90];
          v91 = v90;
        }
        ++v90;
      }
      while (v123 + 1 != v90);
      if (v87 < v91)
      {
        v93 = v150[v87];
        v149[v87] = v149[v91];
        v150[v87] = v150[v91];
        v149[v91] = v89;
        v150[v91] = v93;
      }
      ++v87;
      ++v88;
    }
    while (v87 != v123);
  }
  v121 = v29;
  if (!v29)
  {
LABEL_151:
    v29 = v121;
    if ((v130 & 8) == 0)
      *(_DWORD *)(*(_QWORD *)(v150[(int)v121 - 1] + 112) + 8) = *(_DWORD *)(*(_QWORD *)(v151[(int)v133 - 1] + 112)
                                                                              + 8);
    if (v136 == *(unsigned __int8 *)(v85 + 2) + *(unsigned __int16 *)(v85 + 20))
      v110 = (_DWORD *)(*(unsigned __int8 *)(v85 + 8) + *(_QWORD *)(v85 + 112) + 8);
    else
      v110 = (_DWORD *)findOverflowCell(v85, v136);
    *v110 = bswap32(v149[v121 - 1]);
    if (v121)
    {
      v115 = v121;
      v116 = v150;
      while (1)
      {
        v117 = reparentChildPages(*v116);
        if ((_DWORD)v117)
          break;
        ++v116;
        if (!--v115)
          goto LABEL_177;
      }
    }
    else
    {
LABEL_177:
      v117 = reparentChildPages(v137);
      if (!(_DWORD)v117)
        v117 = balance(v137, 0);
    }
    v17 = v117;
    goto LABEL_159;
  }
  v94 = 0;
  v95 = 0;
  v135 = (int)(v29 - 1);
  v126 = v29;
  while (1)
  {
    v96 = v150[v94];
    v97 = v147[v94];
    assemblePage(v96, v97 - v95, &v86[v95], (int *)&v10[4 * v95]);
    if (*(_BYTE *)(v139 + 31))
    {
      if (v97 > v95)
        break;
    }
LABEL_136:
    if (v94 >= v135)
    {
      v85 = v137;
LABEL_142:
      v86 = v9;
      goto LABEL_150;
    }
    v85 = v137;
    if (v97 >= v132)
      goto LABEL_142;
    v86 = v9;
    v105 = v9[v97];
    v106 = *(_DWORD *)&v10[4 * v97] + v127;
    v140 = v106;
    if (*(_BYTE *)(v96 + 4))
    {
      v107 = (uint64_t)&v124[v128];
      if ((v46 & 1) != 0)
      {
        v141 = 0u;
        *(_OWORD *)__n = 0u;
        parseCellPtr(v96, (uint64_t)v9[--v97], (uint64_t)&v141);
        fillInCell(v137, v107, 0, *((unint64_t *)&v141 + 1), 0, 0, &v140);
        v106 = v140;
        v128 += v140;
        v105 = (_DWORD *)v107;
        v107 = 0;
      }
      else
      {
        --v105;
        v128 += v106;
      }
    }
    else
    {
      v107 = 0;
      *(_DWORD *)(*(_QWORD *)(v96 + 112) + 8) = *v105;
    }
    inserted = insertCell(v137, v136, (uint64_t)v105, v106, v107, 4u);
    if ((_DWORD)inserted
      || (*(_DWORD *)findOverflowCell(v137, v136) = bswap32(*(_DWORD *)(v96 + 120)), *(_BYTE *)(v139 + 31))
      && (v46 & 1) == 0
      && (v109 = findOverflowCell(v137, v136), inserted = ptrmapPutOvflPtr(v137, v109), (_DWORD)inserted))
    {
      v17 = inserted;
      goto LABEL_156;
    }
    ++v97;
    v85 = v137;
    ++v136;
LABEL_150:
    ++v94;
    v95 = v97;
    if (v94 == v126)
      goto LABEL_151;
  }
  v98 = 0;
  v99 = v95;
  v100 = v97 - v95;
  v101 = (char *)v9 + 12 * v119 + 8 * v118 + v99 + 408;
  while (1)
  {
    if (v138)
    {
      v102 = v101[v98];
      if (v102 == 255 || *(_DWORD *)(v151[v102] + 120) != *(_DWORD *)(v96 + 120))
      {
        v103 = findOverflowCell(v96, v98);
        v104 = ptrmapPutOvflPtr(v96, v103);
        if ((_DWORD)v104)
          break;
      }
    }
    if (v100 == (_DWORD)++v98)
      goto LABEL_136;
  }
  v17 = v104;
  v86 = v9;
LABEL_156:
  v29 = v121;
LABEL_159:
  free(v86);
  if (v133)
  {
    v111 = v133;
    v112 = v152;
    do
    {
      if (*(_QWORD *)v112)
        sqlite3pager_unref(*(_QWORD *)(*(_QWORD *)v112 + 112));
      v112 += 8;
      --v111;
    }
    while (v111);
  }
  if (v29)
  {
    v113 = v29;
    v114 = v150;
    do
    {
      if (*v114)
        sqlite3pager_unref(*(_QWORD *)(*v114 + 112));
      ++v114;
      --v113;
    }
    while (v113);
  }
  if (v137)
    sqlite3pager_unref(*(_QWORD *)(v137 + 112));
  return v17;
}

uint64_t assemblePage(uint64_t a1, signed int a2, const void **a3, int *a4)
{
  int *v4;
  uint64_t v8;
  int v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  signed int v16;
  uint64_t v17;
  const void *v18;

  v4 = a4;
  v8 = a2;
  if (a2 < 1)
  {
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = a4;
    v11 = v8;
    do
    {
      v12 = *v10++;
      v9 += v12;
      --v11;
    }
    while (v11);
  }
  v13 = *(unsigned __int16 *)(a1 + 14);
  v14 = *(_QWORD *)(a1 + 112);
  *(_WORD *)(*(unsigned __int8 *)(a1 + 8) + v14 + 3) = bswap32(a2) >> 16;
  result = allocateSpace(a1, v9);
  *(_WORD *)(a1 + 18) -= 2 * a2;
  if (a2 >= 1)
  {
    v16 = result;
    v17 = v13 + v14 + 1;
    do
    {
      *(_WORD *)(v17 - 1) = bswap32(v16) >> 16;
      v18 = *a3++;
      result = (uint64_t)memcpy((void *)(v14 + v16), v18, *v4);
      LODWORD(v18) = *v4++;
      v16 += (int)v18;
      v17 += 2;
      --v8;
    }
    while (v8);
  }
  *(_WORD *)(a1 + 20) = a2;
  return result;
}

uint64_t freePage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(v2 + 16);
  *(_BYTE *)a1 = 0;
  v4 = *(_QWORD *)(a1 + 128);
  if (v4)
    sqlite3pager_unref(*(_QWORD *)(v4 + 112));
  *(_QWORD *)(a1 + 128) = 0;
  result = sqlite3pager_write(*(_QWORD **)(v3 + 112));
  if (!(_DWORD)result)
  {
    v6 = *(_QWORD *)(v3 + 112);
    v7 = bswap32(*(_DWORD *)(v6 + 36));
    *(_DWORD *)(v6 + 36) = bswap32(v7 + 1);
    if (!*(_BYTE *)(v2 + 31) || (result = ptrmapPut(v2, *(_DWORD *)(a1 + 120), 2, 0), !(_DWORD)result))
    {
      if (v7)
      {
        v11 = 0;
        result = getPage(v2, bswap32(*(_DWORD *)(*(_QWORD *)(v3 + 112) + 32)), &v11);
        if (!(_DWORD)result)
        {
          v8 = v11;
          v9 = *(_QWORD *)(v11 + 112);
          v10 = bswap32(*(_DWORD *)(v9 + 4));
          if (v10 >= (*(unsigned __int16 *)(v2 + 36) >> 2) - 8)
          {
            result = sqlite3pager_write(*(_QWORD **)(a1 + 112));
            if (!(_DWORD)result)
            {
              **(_DWORD **)(a1 + 112) = bswap32(*(_DWORD *)(v8 + 120));
              *(_DWORD *)(*(_QWORD *)(a1 + 112) + 4) = 0;
              *(_DWORD *)(*(_QWORD *)(v3 + 112) + 32) = bswap32(*(_DWORD *)(a1 + 120));
              goto LABEL_16;
            }
          }
          else
          {
            result = sqlite3pager_write((_QWORD *)v9);
            if (!(_DWORD)result)
            {
              *(_DWORD *)(*(_QWORD *)(v8 + 112) + 4) = bswap32(v10 + 1);
              *(_DWORD *)(*(_QWORD *)(v8 + 112) + 4 * v10 + 8) = bswap32(*(_DWORD *)(a1 + 120));
              sqlite3pager_dont_write(*(_QWORD *)v2, *(_DWORD *)(a1 + 120));
LABEL_16:
              sqlite3pager_unref(*(_QWORD *)(v8 + 112));
              return 0;
            }
          }
        }
      }
      else
      {
        result = sqlite3pager_write(*(_QWORD **)(a1 + 112));
        if (!(_DWORD)result)
        {
          **(_QWORD **)(a1 + 112) = 0;
          *(_DWORD *)(*(_QWORD *)(v3 + 112) + 32) = bswap32(*(_DWORD *)(a1 + 120));
        }
      }
    }
  }
  return result;
}

uint64_t reparentChildPages(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;

  if (*(_BYTE *)(a1 + 4))
    return 0;
  v3 = *(_QWORD *)(a1 + 104);
  v4 = *(unsigned __int16 *)(a1 + 20);
  if (*(_WORD *)(a1 + 20))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (!*(_BYTE *)(a1 + 4))
      {
        result = reparentPage(v3, bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 112)+ __rev16(*(unsigned __int16 *)(*(_QWORD *)(a1 + 112)+ *(unsigned __int16 *)(a1 + 14)+ v5)))), a1, v6);
        if ((_DWORD)result)
          return result;
        v4 = *(unsigned __int16 *)(a1 + 20);
      }
      ++v6;
      v5 += 2;
    }
    while (v6 < v4);
    if (*(_BYTE *)(a1 + 4))
      return 0;
  }
  else
  {
    LOWORD(v6) = 0;
  }
  result = reparentPage(v3, bswap32(*(_DWORD *)(*(unsigned __int8 *)(a1 + 8) + *(_QWORD *)(a1 + 112) + 8)), a1, v6);
  *(_BYTE *)(a1 + 1) = 0;
  return result;
}

uint64_t reparentPage(uint64_t a1, int a2, uint64_t a3, __int16 a4)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a2)
    return 0;
  if (*(unsigned __int8 *)(*(_QWORD *)a1 + 290) <= 1u
    && (v7 = *(_QWORD *)(*(_QWORD *)a1 + 8 * (a2 & 0x7FF) + 416)) != 0)
  {
    while (*(_DWORD *)(v7 + 8) != a2)
    {
      v7 = *(_QWORD *)(v7 + 16);
      if (!v7)
        goto LABEL_6;
    }
    if (*(_WORD *)(v7 + 78))
      ++*(_WORD *)(v7 + 78);
    else
      _page_ref((uint64_t *)v7);
    v10 = v7 + 88;
    v11 = v10 + *(unsigned __int16 *)(a1 + 34);
    if (*(_BYTE *)v11)
    {
      v12 = *(_QWORD *)(v11 + 128);
      if (v12 != a3)
      {
        if (v12)
          sqlite3pager_unref(*(_QWORD *)(v12 + 112));
        *(_QWORD *)(v11 + 128) = a3;
        if (a3)
        {
          v13 = *(_QWORD *)(a3 + 112);
          if (*(_WORD *)(v13 - 10))
            ++*(_WORD *)(v13 - 10);
          else
            _page_ref((uint64_t *)(v13 - 88));
        }
      }
      *(_WORD *)(v11 + 16) = a4;
    }
    sqlite3pager_unref(v10);
    if (!a3)
      return 0;
  }
  else
  {
LABEL_6:
    if (!a3)
      return 0;
  }
  if (*(_BYTE *)(a1 + 31))
    return ptrmapPut(a1, a2, 5, *(_DWORD *)(a3 + 120));
  return 0;
}

uint64_t allocateSpace(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  _WORD *v15;
  unsigned __int8 *v16;

  if (a2 <= 4)
    v2 = 4;
  else
    v2 = a2;
  v3 = *(unsigned __int16 *)(a1 + 18);
  if (v2 > v3 || *(_BYTE *)(a1 + 2))
    return 0;
  v6 = *(_QWORD *)(a1 + 112);
  *(_WORD *)(a1 + 18) = v3 - v2;
  v7 = *(unsigned __int8 *)(a1 + 8);
  v8 = *(unsigned __int8 *)(v6 + v7 + 7);
  if (v8 >= 0x3C)
  {
    v15 = (_WORD *)(v7 + v6 + 5);
    v16 = (unsigned __int8 *)(v7 + v6 + 6);
  }
  else
  {
    LODWORD(v4) = v7 + 1;
    while (1)
    {
      v9 = (_WORD *)(v6 + v4);
      v4 = __rev16((unsigned __int16)*v9);
      if (!(_DWORD)v4)
        break;
      v10 = v6 + v4;
      v12 = *(unsigned __int8 *)(v10 + 2);
      v11 = v10 + 2;
      v13 = *(unsigned __int8 *)(v11 + 1);
      v14 = v13 | (v12 << 8);
      if (v14 >= v2)
      {
        if (v14 >= v2 + 4)
        {
          *(_WORD *)v11 = bswap32(v14 - v2) >> 16;
          return (_DWORD)v4 - v2 + v14;
        }
        else
        {
          *v9 = *(_WORD *)(v6 + v4);
          *(_BYTE *)(v6 + v7 + 7) = v8 - v2 + v13;
        }
        return v4;
      }
    }
    v15 = (_WORD *)(v7 + v6 + 5);
    v4 = __rev16((unsigned __int16)*v15) - v2;
    if (((*(unsigned __int8 *)(v7 + v6 + 3) << 9) | (2 * *(unsigned __int8 *)(v7 + v6 + 4)))
       + *(unsigned __int16 *)(a1 + 14) <= (int)v4)
      goto LABEL_19;
    v16 = (unsigned __int8 *)(v7 + v6 + 6);
  }
  if (defragmentPage(a1))
    return 0;
  v4 = (*v16 | (*(unsigned __int8 *)v15 << 8)) - v2;
LABEL_19:
  *v15 = bswap32(v4) >> 16;
  return v4;
}

uint64_t defragmentPage(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  _BYTE *v16;
  unsigned int v17;
  __int128 v18;
  size_t __n[2];

  v2 = (char *)sqlite3Malloc(*(unsigned __int16 *)(*(_QWORD *)(a1 + 104) + 32));
  if (!v2)
    return 7;
  v3 = v2;
  v4 = *(unsigned __int8 *)(a1 + 8);
  v5 = *(unsigned __int16 *)(a1 + 14);
  v6 = *(unsigned __int16 *)(a1 + 20);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 104) + 36);
  v9 = __rev16(*(unsigned __int16 *)(v4 + v7 + 5));
  memcpy(&v2[v9], (const void *)(v7 + v9), v8 - v9);
  if ((_DWORD)v6)
  {
    v17 = v5;
    v10 = v7 + v5 + 1;
    v11 = v6;
    LODWORD(v12) = v8;
    do
    {
      v13 = &v3[__rev16(*(unsigned __int16 *)(v10 - 1))];
      v18 = 0u;
      *(_OWORD *)__n = 0u;
      parseCellPtr(a1, (uint64_t)v13, (uint64_t)&v18);
      v12 = (int)v12 - (unint64_t)WORD1(__n[1]);
      memcpy((void *)(v7 + v12), v13, WORD1(__n[1]));
      *(_WORD *)(v10 - 1) = bswap32(v12) >> 16;
      v10 += 2;
      --v11;
    }
    while (v11);
    v14 = v12 >> 8;
    LODWORD(v8) = v12;
    v5 = v17;
  }
  else
  {
    v14 = v8 >> 8;
    LOBYTE(v12) = v8;
  }
  *(_BYTE *)(v4 + v7 + 5) = v14;
  *(_BYTE *)(v4 + v7 + 6) = v12;
  v16 = (_BYTE *)(v4 + v7);
  v16[1] = 0;
  v16[2] = 0;
  v16[7] = 0;
  bzero((void *)(v7 + v5 + 2 * (_DWORD)v6), (int)(v8 - (v5 + 2 * v6)));
  free(v3);
  return 0;
}

uint64_t balance_quick(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t OverflowCell;
  int v11;
  _OWORD v12[2];
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v15 = 0;
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(unsigned __int16 *)(a2 + 20);
  result = allocatePage(v4, &v16, (int *)&v15, 0, 0);
  if (!(_DWORD)result)
  {
    v11 = 0;
    v14 = *(_QWORD *)(a1 + 24);
    v17 = 0u;
    v18 = 0u;
    parseCellPtr(a1, v14, (uint64_t)&v17);
    v13 = WORD5(v18);
    v7 = v16;
    zeroPage(v16, **(unsigned __int8 **)(a1 + 112));
    assemblePage(v7, 1, (const void **)&v14, &v13);
    *(_BYTE *)(a1 + 2) = 0;
    *(_QWORD *)(v7 + 128) = a2;
    v8 = *(_QWORD *)(a2 + 112);
    if (*(_WORD *)(v8 - 10))
      ++*(_WORD *)(v8 - 10);
    else
      _page_ref((uint64_t *)(v8 - 88));
    memset(v12, 0, sizeof(v12));
    parseCellPtr(a1, *(_QWORD *)(a1 + 112)+ __rev16(*(unsigned __int16 *)(*(unsigned __int16 *)(a1 + 14)+ 2 * *(unsigned __int16 *)(a1 + 20)+ *(_QWORD *)(a1 + 112)- 2)), (uint64_t)v12);
    result = fillInCell(a2, (uint64_t)&v17, 0, *((unint64_t *)&v12[0] + 1), 0, 0, &v11);
    if (!(_DWORD)result)
    {
      result = insertCell(a2, v5, (uint64_t)&v17, v11, 0, 4u);
      if (!(_DWORD)result)
      {
        *(_DWORD *)findOverflowCell(a2, v5) = bswap32(*(_DWORD *)(a1 + 120));
        v9 = v15;
        *(_DWORD *)(*(unsigned __int8 *)(a2 + 8) + *(_QWORD *)(a2 + 112) + 8) = bswap32(v15);
        if (!*(_BYTE *)(v4 + 31)
          || (result = ptrmapPut(v4, v9, 5, *(_DWORD *)(a2 + 120)), !(_DWORD)result)
          && (OverflowCell = findOverflowCell(v7, 0), result = ptrmapPutOvflPtr(v7, OverflowCell), !(_DWORD)result))
        {
          sqlite3pager_unref(*(_QWORD *)(v7 + 112));
          return balance(a2, 0);
        }
      }
    }
  }
  return result;
}

uint64_t ptrmapGet(uint64_t a1, int a2, _BYTE *a3, _DWORD *a4)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  v7 = a2 - 2;
  v8 = *(unsigned __int16 *)(a1 + 36) / 5u + 1;
  result = sqlite3pager_get(*(_QWORD *)a1, (a2 - 2) / v8 * v8 + 2, &v12);
  if (!(_DWORD)result)
  {
    v10 = 5 * (v7 % (*(unsigned __int16 *)(a1 + 36) / 5u + 1));
    v11 = v12;
    if (a3)
      *a3 = *(_BYTE *)(v12 + (int)v10 - 5);
    if (a4)
      *a4 = bswap32(*(_DWORD *)(v10 + v11 - 4));
    sqlite3pager_unref(v11);
    if (a3 && *a3 - 6 < 0xFFFFFFFB)
      return 11;
    else
      return 0;
  }
  return result;
}

uint64_t *getTempCursor(uint64_t *result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *((_OWORD *)result + 1);
  v2 = *((_OWORD *)result + 2);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v2;
  v4 = *((_OWORD *)result + 3);
  v5 = *((_OWORD *)result + 4);
  v6 = *((_OWORD *)result + 5);
  *(_QWORD *)(a2 + 96) = result[12];
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v7 = *(_QWORD *)(a2 + 48);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 112);
    if (*(_WORD *)(v8 - 10))
      ++*(_WORD *)(v8 - 10);
    else
      return _page_ref((uint64_t *)(v8 - 88));
  }
  return result;
}

uint64_t sqlite3BtreeCreateTable(uint64_t a1, unsigned int *a2)
{
  uint64_t Page;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t updated;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_BYTE *)(a1 + 24) == 2)
  {
    if (*(_QWORD *)(a1 + 8))
      return 6;
    v21 = 0;
    v20 = 0;
    if (!*(_BYTE *)(a1 + 31))
    {
      Page = allocatePage(a1, &v21, (int *)&v20, 1, 0);
      if ((_DWORD)Page)
        return Page;
      v7 = v21;
      goto LABEL_13;
    }
    v19 = 0;
    v18 = 0;
    v22 = 0;
    v6 = sqlite3pager_get(*(_QWORD *)a1, 1, &v22);
    if ((_DWORD)v6)
      return v6;
    v8 = bswap32(*(_DWORD *)(v22 + 52));
    sqlite3pager_unref(v22);
    v9 = v8 + 1;
    v20 = v8 + 1;
    if (!((v8 - 1) % (*(unsigned __int16 *)(a1 + 36) / 5u + 1)) || v8 == 0x40000000u / *(unsigned __int16 *)(a1 + 32))
    {
      v9 = v8 + 2;
      v20 = v8 + 2;
    }
    Page = allocatePage(a1, &v18, (int *)&v19, v9, 1);
    if (!(_DWORD)Page)
    {
      v10 = v19;
      if (v19 == v9)
      {
        v7 = v18;
        v21 = v18;
LABEL_20:
        updated = ptrmapPut(a1, v9, 1, 0);
        if ((_DWORD)updated || (updated = sqlite3BtreeUpdateMeta(a1, v9), (_DWORD)updated))
        {
          Page = updated;
          if (!v7)
            return Page;
          v12 = *(_QWORD *)(v7 + 112);
LABEL_31:
          sqlite3pager_unref(v12);
          return Page;
        }
LABEL_13:
        zeroPage(v7, 8u);
        sqlite3pager_unref(*(_QWORD *)(v7 + 112));
        Page = 0;
        *a2 = v20;
        return Page;
      }
      v17 = 0;
      LODWORD(v22) = 0;
      if (v18)
        sqlite3pager_unref(*(_QWORD *)(v18 + 112));
      Page = getPage(a1, v9, &v21);
      if (!(_DWORD)Page)
      {
        v13 = ptrmapGet(a1, v9, &v17, &v22);
        v14 = v21;
        if ((_DWORD)v13)
        {
          Page = v13;
          if (!v21)
            return Page;
          v15 = (uint64_t *)(v21 + 112);
          goto LABEL_30;
        }
        Page = relocatePage((uint64_t *)a1, v21, v17, v22, v10);
        if (v14)
          sqlite3pager_unref(*(_QWORD *)(v14 + 112));
        if (!(_DWORD)Page)
        {
          Page = getPage(a1, v9, &v21);
          if (!(_DWORD)Page)
          {
            v7 = v21;
            v15 = (uint64_t *)(v21 + 112);
            v16 = sqlite3pager_write(*(_QWORD **)(v21 + 112));
            if (!(_DWORD)v16)
              goto LABEL_20;
            Page = v16;
LABEL_30:
            v12 = *v15;
            goto LABEL_31;
          }
        }
      }
    }
  }
  else if (*(_BYTE *)(a1 + 26))
  {
    return 8;
  }
  else
  {
    return 1;
  }
  return Page;
}

uint64_t relocatePage(uint64_t *a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t Page;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  int v38;
  uint64_t v39;

  v10 = *(_DWORD *)(a2 + 120);
  v11 = *a1;
  v12 = *(_QWORD *)(a2 + 112);
  v13 = *(_DWORD *)(v12 - 80);
  if (*(_BYTE *)(v12 - 13))
    v14 = *(_DWORD *)(v12 - 80);
  else
    v14 = 0;
  if (v13)
  {
    v15 = *(_QWORD *)(v12 - 72);
    if (v15)
      *(_QWORD *)(v15 + 24) = *(_QWORD *)(v12 - 64);
    v16 = *(_QWORD *)(v12 - 64);
    v17 = (_QWORD *)(v11 + 8 * (v13 & 0x7FF) + 416);
    if (v16)
      v17 = (_QWORD *)(v16 + 16);
    *v17 = v15;
    *(_DWORD *)(v12 - 80) = 0;
    *(_QWORD *)(v12 - 72) = 0;
    *(_QWORD *)(v12 - 64) = 0;
  }
  v18 = v12 - 88;
  v19 = (uint64_t *)(v11 + 8 * (a5 & 0x7FF) + 416);
  v20 = *v19;
  if (*v19)
  {
    while (*(_DWORD *)(v20 + 8) != a5)
    {
      v20 = *(_QWORD *)(v20 + 16);
      if (!v20)
        goto LABEL_24;
    }
    if (a5)
    {
      v21 = *(_QWORD *)(v20 + 16);
      if (v21)
        *(_QWORD *)(v21 + 24) = *(_QWORD *)(v20 + 24);
      v22 = *(_QWORD *)(v20 + 24);
      if (v22)
        v23 = (_QWORD *)(v22 + 16);
      else
        v23 = (_QWORD *)(v11 + 8 * (a5 & 0x7FF) + 416);
      *v23 = v21;
      *(_DWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v20 + 16) = 0;
      *(_QWORD *)(v20 + 24) = 0;
    }
    *(_BYTE *)(v20 + 74) = 0;
    if (*(_BYTE *)(v20 + 75))
    {
      *(_BYTE *)(v12 - 16) = 1;
      *(_BYTE *)(v12 - 13) = 1;
    }
LABEL_24:
    v20 = *v19;
    *(_DWORD *)(v12 - 80) = a5;
    if (v20)
    {
      *(_QWORD *)(v20 + 24) = v18;
      v20 = *v19;
    }
  }
  else
  {
    *(_DWORD *)(v12 - 80) = a5;
  }
  *(_QWORD *)(v12 - 72) = v20;
  *v19 = v18;
  *(_QWORD *)(v12 - 64) = 0;
  *(_BYTE *)(v12 - 14) = 1;
  *(_BYTE *)(v11 + 294) = 1;
  if (v14)
  {
    v39 = 0;
    v24 = sqlite3pager_get(v11, v14, &v39);
    if ((_DWORD)v24)
      return v24;
    *(_BYTE *)(v11 + 293) = 1;
    v26 = v39;
    *(_BYTE *)(v39 - 16) = 1;
    *(_WORD *)(v26 - 14) = 257;
    sqlite3pager_unref(v26);
  }
  *(_DWORD *)(a2 + 120) = a5;
  if ((a3 & 0xFFFFFFFB) == 1)
  {
    v37 = v10;
    v38 = a4;
    v27 = *(_QWORD *)(a2 + 104);
    v28 = *(_BYTE *)a2;
    initPage(a2, 0);
    if (*(_WORD *)(a2 + 20))
    {
      v29 = 0;
      v30 = 2 * *(unsigned __int16 *)(a2 + 20);
      while (1)
      {
        v31 = (unsigned int *)(*(_QWORD *)(a2 + 112)
                             + __rev16(*(unsigned __int16 *)(*(_QWORD *)(a2 + 112) + *(unsigned __int16 *)(a2 + 14) + v29)));
        v32 = ptrmapPutOvflPtr(a2, (uint64_t)v31);
        if ((_DWORD)v32)
          break;
        if (!*(_BYTE *)(a2 + 4))
        {
          v32 = ptrmapPut(v27, bswap32(*v31), 5, a5);
          if ((_DWORD)v32)
            break;
        }
        v29 += 2;
        if (v30 == (_DWORD)v29)
          goto LABEL_37;
      }
      Page = v32;
      *(_BYTE *)a2 = v28;
      return Page;
    }
LABEL_37:
    if (*(_BYTE *)(a2 + 4))
    {
      *(_BYTE *)a2 = v28;
      v10 = v37;
      a4 = v38;
    }
    else
    {
      Page = ptrmapPut(v27, bswap32(*(_DWORD *)(*(unsigned __int8 *)(a2 + 8) + *(_QWORD *)(a2 + 112) + 8)), 5, a5);
      *(_BYTE *)a2 = v28;
      v10 = v37;
      a4 = v38;
      if ((_DWORD)Page)
        return Page;
    }
  }
  else
  {
    v33 = bswap32(**(_DWORD **)(a2 + 112));
    if (v33)
    {
      Page = ptrmapPut((uint64_t)a1, v33, 4, a5);
      if ((_DWORD)Page)
        return Page;
    }
  }
  if (a3 == 1)
    return 0;
  v39 = 0;
  Page = getPage((uint64_t)a1, a4, &v39);
  if ((_DWORD)Page)
    return Page;
  v34 = v39;
  v35 = sqlite3pager_write(*(_QWORD **)(v39 + 112));
  if ((_DWORD)v35)
  {
    Page = v35;
    sqlite3pager_unref(*(_QWORD *)(v34 + 112));
    return Page;
  }
  Page = modifyPagePointer(v34, v10, a5, a3);
  sqlite3pager_unref(*(_QWORD *)(v34 + 112));
  if ((_DWORD)Page)
    return Page;
  return ptrmapPut((uint64_t)a1, a5, a3, a4);
}

uint64_t sqlite3BtreeUpdateMeta(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t result;

  if (*(_BYTE *)(a1 + 24) == 2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 112);
    result = sqlite3pager_write((_QWORD *)v3);
    if (!(_DWORD)result)
      *(_DWORD *)(v3 + 52) = bswap32(a2);
  }
  else if (*(_BYTE *)(a1 + 26))
  {
    return 8;
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t modifyPagePointer(uint64_t a1, int a2, unsigned int a3, int a4)
{
  unsigned int *v7;
  uint64_t result;
  char v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  uint64_t v18;
  _DWORD *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;

  if (a4 == 4)
  {
    v7 = *(unsigned int **)(a1 + 112);
    if (bswap32(*v7) != a2)
      return 11;
    result = 0;
    *v7 = bswap32(a3);
    return result;
  }
  v10 = *(_BYTE *)a1;
  initPage(a1, 0);
  v11 = *(unsigned __int16 *)(a1 + 20);
  if (*(_WORD *)(a1 + 20))
  {
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = *(_QWORD *)(a1 + 112);
      v15 = __rev16(*(unsigned __int16 *)(v14 + *(unsigned __int16 *)(a1 + 14) + v12));
      v16 = (unsigned int *)(v14 + v15);
      if (a4 == 3)
      {
        v21 = 0u;
        v22 = 0u;
        parseCellPtr(a1, v14 + v15, (uint64_t)&v21);
        if (WORD4(v22))
        {
          v17 = (unsigned int *)((char *)v16 + WORD4(v22));
          if (bswap32(*v17) == a2)
          {
            *v17 = bswap32(a3);
            if (v13 == v11)
              return 11;
LABEL_21:
            result = 0;
            *(_BYTE *)a1 = v10;
            return result;
          }
        }
      }
      else if (bswap32(*v16) == a2)
      {
        *v16 = bswap32(a3);
        goto LABEL_15;
      }
      ++v13;
      v12 += 2;
      if (v11 == v13)
        goto LABEL_16;
    }
  }
  v13 = 0;
LABEL_15:
  if (v13 != v11)
    goto LABEL_21;
LABEL_16:
  if (a4 == 5)
  {
    v18 = *(unsigned __int8 *)(a1 + 8) + *(_QWORD *)(a1 + 112);
    v20 = *(_DWORD *)(v18 + 8);
    v19 = (_DWORD *)(v18 + 8);
    if (bswap32(v20) == a2)
    {
      *v19 = bswap32(a3);
      goto LABEL_21;
    }
  }
  return 11;
}

uint64_t sqlite3BtreeSync(uint64_t a1)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t Page;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned __int8 v26;

  if (*(_BYTE *)(a1 + 24) != 2)
    return 0;
  if (!*(_BYTE *)(a1 + 31))
    goto LABEL_16;
  v2 = *(_QWORD *)a1;
  v3 = *(unsigned __int16 *)(a1 + 32);
  v25 = 0;
  v23 = 0;
  v22 = 0;
  v4 = (52429 * v3) >> 18;
  v5 = v4 + 1;
  v6 = (int)(sqlite3pager_pagecount(v2) - 2) / (int)v5 * v5 + 2;
  if (v6 == sqlite3pager_pagecount(v2))
    return 11;
  v8 = bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 112) + 36));
  if (!v8)
  {
LABEL_16:
    v11 = 0;
    return sqlite3pager_sync(*(_QWORD *)a1, v11);
  }
  v9 = sqlite3pager_pagecount(v2);
  v10 = v9;
  v11 = v9 - ((v4 + v8 - (v9 - 2) % v5) / v4 + v8);
  v12 = 0x40000000u / *(unsigned __int16 *)(a1 + 32) + 1;
  if (v9 > v12 && v11 <= v12)
  {
    if ((v11 - 3) % (*(unsigned __int16 *)(a1 + 36) / 5u + 1))
      v13 = -1;
    else
      v13 = -2;
    v11 += v13;
  }
  v26 = 0;
  v24 = 0;
  v14 = v11 + 1;
  if (v11 + 1 > v9)
  {
LABEL_14:
    v7 = sqlite3pager_write(*(_QWORD **)(*(_QWORD *)(a1 + 16) + 112));
    if ((_DWORD)v7)
      goto LABEL_38;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 112) + 32) = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 112) + 36) = 0;
    return sqlite3pager_sync(*(_QWORD *)a1, v11);
  }
  v15 = v11;
  while (1)
  {
    v16 = v15;
    v15 = v14;
    if ((v16 - 1) % v5)
    {
      if (v16 != 0x40000000u / *(unsigned __int16 *)(a1 + 32))
      {
        Page = ptrmapGet(a1, v14, &v26, &v24);
        if ((_DWORD)Page)
          goto LABEL_37;
        if (v26 != 2)
          break;
      }
    }
LABEL_33:
    v14 = v15 + 1;
    if (v15 + 1 > v10)
      goto LABEL_14;
  }
  Page = getPage(a1, v15, &v25);
  if (!(_DWORD)Page)
  {
    do
    {
      if (v22)
      {
        sqlite3pager_unref(*(_QWORD *)(v22 + 112));
        v22 = 0;
      }
      v18 = allocatePage(a1, &v22, (int *)&v23, 0, 0);
      if ((_DWORD)v18)
      {
        v7 = v18;
        if (v25)
          sqlite3pager_unref(*(_QWORD *)(v25 + 112));
        goto LABEL_38;
      }
      v19 = v23;
    }
    while (v23 > v11);
    if (v22)
      sqlite3pager_unref(*(_QWORD *)(v22 + 112));
    v22 = 0;
    v20 = v25;
    v7 = relocatePage((uint64_t *)a1, v25, v26, v24, v19);
    if (v20)
      sqlite3pager_unref(*(_QWORD *)(v20 + 112));
    if ((_DWORD)v7)
      goto LABEL_38;
    goto LABEL_33;
  }
LABEL_37:
  v7 = Page;
LABEL_38:
  sqlite3pager_rollback(v2);
  return v7;
}

uint64_t findLockInfo(int a1, _QWORD *a2, char **a3)
{
  uint64_t result;
  _DWORD *v6;
  void *v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  char *v11;
  stat v12;
  __int128 v13;
  __int128 v14;

  memset(&v12, 0, sizeof(v12));
  if (md_fstat_real(a1, &v12))
    return 1;
  *((_QWORD *)&v14 + 1) = v12.st_ino;
  *(_QWORD *)&v14 = v12.st_dev;
  *((_QWORD *)&v13 + 1) = v12.st_ino;
  *(_QWORD *)&v13 = v12.st_dev;
  v6 = sqlite3HashFind(lockHash, (char *)&v14);
  if (v6)
  {
    v7 = v6;
    ++v6[6];
  }
  else
  {
    v10 = malloc_type_malloc(0x20uLL, 0xA2076A49uLL);
    if (!v10)
    {
      ++sqlite3_malloc_failed;
      return 1;
    }
    v7 = v10;
    *v10 = v14;
    *((_DWORD *)v10 + 6) = 1;
    *((_QWORD *)v10 + 2) = 0;
    if (sqlite3HashInsert((uint64_t)lockHash, (char *)v7, (uint64_t)v7))
    {
      free(v7);
      return 1;
    }
  }
  *a2 = v7;
  v8 = (char *)sqlite3HashFind(openHash, (char *)&v13);
  if (v8)
  {
    v9 = v8;
    ++*((_DWORD *)v8 + 4);
LABEL_8:
    result = 0;
    *a3 = v9;
    return result;
  }
  v11 = (char *)malloc_type_malloc(0x28uLL, 0xA2076A49uLL);
  if (v11)
  {
    v9 = v11;
    *(_OWORD *)v11 = v13;
    *((_QWORD *)v11 + 2) = 1;
    *((_DWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 4) = 0;
    if (!sqlite3HashInsert((uint64_t)openHash, v9, (uint64_t)v9))
      goto LABEL_8;
    free(v9);
  }
  else
  {
    ++sqlite3_malloc_failed;
  }
  releaseLockInfo((uint64_t)v7);
  return 1;
}

void releaseLockInfo(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 24) - 1;
  *(_DWORD *)(a1 + 24) = v1;
  if (!v1)
  {
    sqlite3HashInsert((uint64_t)&lockHash, (char *)a1, 0);
    free((void *)a1);
  }
}

uint64_t sqlite3OsOpenExclusive(char *a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;

  if (!access(a1, 0))
    return 14;
  *(_DWORD *)(a2 + 40) = -1;
  v11 = x_openat(-2, a1, 536873730, v6, v7, v8, v9, v10, 0x180u);
  *(_DWORD *)(a2 + 32) = v11;
  if (v11 < 0)
    return 14;
  result = findLockInfo(v11, (_QWORD *)(a2 + 24), (char **)(a2 + 16));
  if ((_DWORD)result)
  {
    close(*(_DWORD *)(a2 + 32));
    v13 = 7;
  }
  else
  {
    v13 = 0;
    *(_WORD *)(a2 + 36) = 256;
    if (!a3)
      return result;
  }
  unlink(a1);
  return v13;
}

uint64_t sqlite3OsOpenReadOnly(char *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8)
{
  int v9;
  uint64_t result;
  unsigned __int16 v11;

  *(_DWORD *)(a2 + 40) = -1;
  v9 = x_openat(-2, a1, 0, a4, a5, a6, a7, a8, v11);
  *(_DWORD *)(a2 + 32) = v9;
  if (v9 < 0)
    return 14;
  result = findLockInfo(v9, (_QWORD *)(a2 + 24), (char **)(a2 + 16));
  if ((_DWORD)result)
  {
    close(*(_DWORD *)(a2 + 32));
    return 7;
  }
  else
  {
    *(_WORD *)(a2 + 36) = 256;
  }
  return result;
}

uint64_t sqlite3OsWrite(uint64_t a1, char *__buf, size_t __nbyte)
{
  int v3;
  int v6;
  BOOL v7;

  if ((int)__nbyte < 1)
    return 0;
  v3 = __nbyte;
  while (1)
  {
    v6 = write(*(_DWORD *)(a1 + 32), __buf, v3);
    if (v6 < 1)
      break;
    __buf += v6;
    v7 = __OFSUB__(v3, v6);
    v3 -= v6;
    if ((v3 < 0) ^ v7 | (v3 == 0))
      return 0;
  }
  return 13;
}

uint64_t sqlite3OsSync(uint64_t a1)
{
  uint64_t result;
  int v3;

  if (full_fsync(*(_DWORD *)(a1 + 32)))
    return 10;
  v3 = *(_DWORD *)(a1 + 40);
  if (v3 < 0)
    return 0;
  full_fsync(v3);
  close(*(_DWORD *)(a1 + 40));
  result = 0;
  *(_DWORD *)(a1 + 40) = -1;
  return result;
}

uint64_t full_fsync(int a1)
{
  uint64_t result;

  result = fcntl(a1, 51, 0);
  if ((_DWORD)result)
    return fsync(a1);
  return result;
}

uint64_t sqlite3OsCheckReservedLock(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 && *(_QWORD *)v1)
    return (*(uint64_t (**)(_QWORD, _QWORD))v1)(*(_QWORD *)(v1 + 24), *(unsigned int *)(a1 + 32));
  if (*(int *)(*(_QWORD *)(a1 + 24) + 20) > 1)
    return 1;
  v4 = 0x300000000;
  v3 = xmmword_1B8632050;
  fcntl(*(_DWORD *)(a1 + 32), 7, &v3);
  return WORD2(v4) != 2;
}

uint64_t sqlite3OsLock(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD, _QWORD, uint64_t);
  uint64_t result;
  int v8;
  int v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 8);
  v13 = 0;
  v14 = 0;
  v12 = 0;
  if (v5)
  {
    v6 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v5 + 8);
    if (v6)
    {
      result = v6(*(_QWORD *)(v5 + 24), *(unsigned int *)(a1 + 32), a2);
      if ((_DWORD)result)
      {
        if (v2 == 4)
          *(_BYTE *)(a1 + 36) = 3;
      }
      else
      {
        *(_BYTE *)(a1 + 36) = v2;
      }
      return result;
    }
  }
  v8 = *(unsigned __int8 *)(a1 + 36);
  if (v8 >= (int)a2)
    return 0;
  v9 = *(_DWORD *)(v4 + 20);
  if (v9 != v8)
  {
    result = 5;
    if ((int)a2 > 1 || v9 > 2)
      return result;
  }
  if ((_DWORD)a2 == 1)
  {
    if ((v9 - 1) < 2)
    {
      result = 0;
      *(_BYTE *)(a1 + 36) = 1;
      ++*(_DWORD *)(v4 + 16);
      ++*(_DWORD *)(*(_QWORD *)(a1 + 16) + 20);
      return result;
    }
    v10 = 1;
    v13 = 1;
  }
  else
  {
    v13 = 1;
    if ((_DWORD)a2 != 4)
      goto LABEL_26;
    if (v8 > 2)
    {
LABEL_27:
      if (*(int *)(v4 + 16) > 1)
      {
        result = 5;
        goto LABEL_37;
      }
      WORD2(v14) = 3;
      v12 = 1073741826;
      v13 = 510;
      goto LABEL_32;
    }
    v10 = 3;
  }
  WORD2(v14) = v10;
  v12 = 0x40000000;
  if (fcntl(*(_DWORD *)(a1 + 32), 8, &v12))
    goto LABEL_20;
  if (v2 == 1)
  {
    v12 = 1073741826;
    v13 = 510;
    v11 = fcntl(*(_DWORD *)(a1 + 32), 8, &v12);
    v12 = 0x40000000;
    v13 = 1;
    WORD2(v14) = 2;
    fcntl(*(_DWORD *)(a1 + 32), 8, &v12);
    if (v11)
    {
LABEL_20:
      if (*__error() == 22)
        return 22;
      else
        return 5;
    }
    ++*(_DWORD *)(*(_QWORD *)(a1 + 16) + 20);
    *(_DWORD *)(v4 + 16) = 1;
LABEL_38:
    result = 0;
    *(_BYTE *)(a1 + 36) = v2;
    *(_DWORD *)(v4 + 20) = v2;
    return result;
  }
LABEL_26:
  if (v2 == 4)
    goto LABEL_27;
  WORD2(v14) = 3;
  if (v2 == 2)
    v12 = 1073741825;
LABEL_32:
  if (!fcntl(*(_DWORD *)(a1 + 32), 8, &v12))
    goto LABEL_38;
  if (*__error() == 22)
    result = 22;
  else
    result = 5;
  if (v2 == 4)
  {
LABEL_37:
    *(_BYTE *)(a1 + 36) = 3;
    *(_DWORD *)(v4 + 20) = 3;
  }
  return result;
}

uint64_t sqlite3OsUnlock(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t (*v5)(_QWORD, _QWORD, uint64_t);
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  __int128 v15;
  uint64_t v16;

  v2 = a2;
  v4 = *(_QWORD *)(a1 + 8);
  v16 = 0;
  v15 = 0uLL;
  if (v4 && (v5 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v4 + 16)) != 0)
  {
    v6 = v5(*(_QWORD *)(v4 + 24), *(unsigned int *)(a1 + 32), a2);
    if (!(_DWORD)v6)
      goto LABEL_25;
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + 36);
    if (v7 > (int)a2)
    {
      v8 = *(_QWORD *)(a1 + 24);
      if (v7 < 2)
      {
        v6 = 0;
        if ((_DWORD)a2)
        {
LABEL_25:
          *(_BYTE *)(a1 + 36) = v2;
          return v6;
        }
      }
      else
      {
        if ((_DWORD)a2 == 1)
        {
          WORD2(v16) = 1;
          v15 = xmmword_1B8632060;
          if (fcntl(*(_DWORD *)(a1 + 32), 8, &v15))
            v6 = 10;
          else
            v6 = 0;
        }
        else
        {
          v6 = 0;
        }
        HIDWORD(v16) = 2;
        v15 = xmmword_1B8632070;
        fcntl(*(_DWORD *)(a1 + 32), 8, &v15);
        *(_DWORD *)(v8 + 20) = 1;
        if (v2)
          goto LABEL_25;
      }
      v9 = *(_DWORD *)(v8 + 16) - 1;
      *(_DWORD *)(v8 + 16) = v9;
      if (!v9)
      {
        HIDWORD(v16) = 2;
        v15 = 0uLL;
        fcntl(*(_DWORD *)(a1 + 32), 8, &v15);
        *(_DWORD *)(v8 + 20) = 0;
      }
      v10 = *(_QWORD *)(a1 + 16);
      v11 = *(_DWORD *)(v10 + 20) - 1;
      *(_DWORD *)(v10 + 20) = v11;
      if (!v11 && *(int *)(v10 + 24) >= 1)
      {
        v12 = 0;
        do
          close(*(_DWORD *)(*(_QWORD *)(v10 + 32) + 4 * v12++));
        while (v12 < *(int *)(v10 + 24));
        v13 = *(void **)(v10 + 32);
        if (v13)
          free(v13);
        *(_DWORD *)(v10 + 24) = 0;
        *(_QWORD *)(v10 + 32) = 0;
      }
      goto LABEL_25;
    }
    return 0;
  }
  return v6;
}

void sqlite3OsClose(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(void);
  int v4;
  uint64_t v5;
  int v6;
  void *v7;
  int v8;
  _DWORD *v9;
  uint64_t v11;
  int v12;
  void *v13;

  if (!*(_BYTE *)(a1 + 37))
    return;
  sqlite3OsUnlock(a1, 0);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(void (**)(void))(v2 + 48);
    if (v3)
      v3();
  }
  v4 = *(_DWORD *)(a1 + 40);
  if ((v4 & 0x80000000) == 0)
    close(v4);
  *(_DWORD *)(a1 + 40) = -1;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v5 + 20))
  {
    v6 = *(_DWORD *)(v5 + 24) + 1;
    *(_DWORD *)(v5 + 24) = v6;
    v7 = *(void **)(v5 + 32);
    v8 = 4 * v6;
    if (!v7)
    {
      v9 = sqlite3Malloc(4 * v6);
      goto LABEL_18;
    }
    if (v8)
    {
      v9 = malloc_type_realloc(v7, v8, 0x19CE345uLL);
      if (v8 < 1 || v9 != 0)
      {
LABEL_18:
        if (v9)
        {
          *(_QWORD *)(v5 + 32) = v9;
          v9[*(int *)(v5 + 24) - 1] = *(_DWORD *)(a1 + 32);
        }
        goto LABEL_21;
      }
      ++sqlite3_malloc_failed;
    }
    else
    {
      free(v7);
    }
  }
  else
  {
    close(*(_DWORD *)(a1 + 32));
  }
LABEL_21:
  releaseLockInfo(*(_QWORD *)(a1 + 24));
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_DWORD *)(v11 + 16) - 1;
  *(_DWORD *)(v11 + 16) = v12;
  if (!v12)
  {
    sqlite3HashInsert((uint64_t)&openHash, (char *)v11, 0);
    v13 = *(void **)(v11 + 32);
    if (v13)
      free(v13);
    free((void *)v11);
  }
  *(_BYTE *)(a1 + 37) = 0;
}

off_t sqlite3pager_pagecount(uint64_t a1)
{
  off_t result;
  uint64_t v3;
  off_t v4;
  off_t v5;
  stat v6;

  result = *(unsigned int *)(a1 + 168);
  if ((result & 0x80000000) != 0)
  {
    memset(&v6, 0, sizeof(v6));
    if (md_fstat_real(*(_DWORD *)(a1 + 56), &v6))
    {
      result = 0;
      *(_BYTE *)(a1 + 290) |= 0x10u;
    }
    else
    {
      v3 = *(int *)(a1 + 224);
      v4 = v6.st_size / v3;
      if (v6.st_size / v3 == 0x40000000 / (int)v3)
        v5 = v4 + 1;
      else
        v5 = v6.st_size / v3;
      if (*(_BYTE *)(a1 + 296))
        result = v4;
      else
        result = v5;
      if (*(_BYTE *)(a1 + 289))
        *(_DWORD *)(a1 + 168) = result;
    }
  }
  return result;
}

void memoryTruncate(uint64_t a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t *v4;

  v1 = *(_QWORD *)(a1 + 360);
  if (v1)
  {
    v3 = *(_DWORD *)(a1 + 168);
    v4 = (uint64_t *)(a1 + 360);
    do
    {
      if (*(_DWORD *)(v1 + 8) > v3)
      {
        if (*(__int16 *)(v1 + 78) < 1)
        {
          *v4 = *(_QWORD *)(v1 + 48);
          unlinkPage(v1);
          free((void *)v1);
          --*(_DWORD *)(a1 + 232);
          goto LABEL_7;
        }
        bzero((void *)(v1 + 88), *(int *)(a1 + 224));
      }
      v4 = (uint64_t *)(v1 + 48);
LABEL_7:
      v1 = *v4;
    }
    while (*v4);
  }
}

uint64_t syncJournal(uint64_t a1)
{
  uint64_t i;
  uint64_t result;
  unsigned int *p_buf;
  int v5;
  int v6;
  BOOL v7;
  unsigned int __buf;

  if (!*(_BYTE *)(a1 + 293))
    return 0;
  if (!*(_BYTE *)(a1 + 291))
  {
    if (*(_BYTE *)(a1 + 288))
    {
      result = sqlite3OsSync(a1 + 72);
      if ((_DWORD)result)
        return result;
    }
    lseek(*(_DWORD *)(a1 + 104), *(_QWORD *)(a1 + 384) + 8, 0);
    __buf = bswap32(*(_DWORD *)(a1 + 192));
    p_buf = &__buf;
    v5 = 4;
    do
    {
      v6 = write(*(_DWORD *)(a1 + 104), p_buf, v5);
      if (v6 < 1)
        return 13;
      p_buf = (unsigned int *)((char *)p_buf + v6);
      v7 = __OFSUB__(v5, v6);
      v5 -= v6;
    }
    while (!((v5 < 0) ^ v7 | (v5 == 0)));
    lseek(*(_DWORD *)(a1 + 104), *(_QWORD *)(a1 + 376), 0);
    result = sqlite3OsSync(a1 + 72);
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 281) = 1;
  }
  *(_BYTE *)(a1 + 293) = 0;
  for (i = *(_QWORD *)(a1 + 360); i; i = *(_QWORD *)(i + 48))
    *(_BYTE *)(i + 75) = 0;
  result = 0;
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a1 + 336);
  return result;
}

uint64_t pager_wait_on_lock(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int v8;

  if (*(unsigned __int8 *)(a1 + 289) >= (int)a2)
    return 0;
  v4 = a1 + 24;
  v5 = 1;
  while (1)
  {
    result = sqlite3OsLock(v4, a2);
    if ((_DWORD)result != 5)
      break;
    v7 = *(_QWORD *)(a1 + 328);
    if (v7)
    {
      if (*(_QWORD *)v7)
      {
        v8 = (*(uint64_t (**)(_QWORD, uint64_t))v7)(*(_QWORD *)(v7 + 8), v5);
        v5 = (v5 + 1);
        if (v8)
          continue;
      }
    }
    return 5;
  }
  if (!(_DWORD)result)
    *(_BYTE *)(a1 + 289) = a2;
  return result;
}

uint64_t unlinkPage(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD **)result;
  if (*(_QWORD *)(*(_QWORD *)result + 352) == result)
  {
    v2 = result;
    do
      v2 = *(_QWORD *)(v2 + 32);
    while (v2 && *(_BYTE *)(v2 + 75));
    v1[44] = v2;
  }
  v5 = *(_QWORD *)(result + 32);
  v4 = *(_QWORD *)(result + 40);
  v3 = (uint64_t *)(result + 32);
  if (v4)
  {
    *(_QWORD *)(v4 + 32) = v5;
    v5 = *v3;
  }
  else
  {
    v1[42] = v5;
  }
  if (v5)
    v6 = (_QWORD *)(v5 + 40);
  else
    v6 = v1 + 43;
  *v6 = v4;
  *v3 = 0;
  *(_QWORD *)(result + 40) = 0;
  v7 = *(_DWORD *)(result + 8);
  if (v7)
  {
    v8 = *(_QWORD *)(result + 16);
    if (v8)
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(result + 24);
    v9 = *(_QWORD *)(result + 24);
    v10 = &v1[(v7 & 0x7FF) + 52];
    if (v9)
      v10 = (_QWORD *)(v9 + 16);
    *v10 = v8;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  return result;
}

void sqlite3pager_close(uint64_t a1)
{
  int v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(a1 + 289);
  if ((v2 - 4) >= 2)
  {
    if (v2 == 1)
      goto LABEL_5;
    if (v2 != 2)
      goto LABEL_7;
  }
  sqlite3pager_rollback(a1);
LABEL_5:
  if (!*(_BYTE *)(a1 + 296))
    sqlite3OsUnlock(a1 + 24, 0);
LABEL_7:
  v3 = *(_QWORD **)(a1 + 360);
  if (!v3)
  {
    sqlite3OsClose(a1 + 24);
LABEL_12:
    free((void *)a1);
    return;
  }
  do
  {
    v4 = (_QWORD *)v3[6];
    free(v3);
    v3 = v4;
  }
  while (v4);
  sqlite3OsClose(a1 + 24);
  if (a1)
    goto LABEL_12;
}

uint64_t sqlite3pager_rollback(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  void *v5;
  void (*v6)(uint64_t, _QWORD);
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  size_t v12;
  int v13;
  void (*v14)(uint64_t, _QWORD);
  unsigned int v15;
  _BYTE __s1[8192];
  uint64_t v17;

  v1 = MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v17 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(v1 + 296))
  {
    for (i = *(_QWORD *)(v1 + 360); i; i = *(_QWORD *)(i + 48))
    {
      if (*(_BYTE *)(i + 74))
      {
        v4 = i + 88 + *(int *)(v2 + 204) + (uint64_t)*(int *)(v2 + 228);
        if (*(_QWORD *)v4)
        {
          memcpy((void *)(i + 88), *(const void **)v4, *(int *)(v2 + 224));
          if (*(_QWORD *)v4)
            free(*(void **)v4);
        }
        v5 = *(void **)(v4 + 8);
        if (v5)
          free(v5);
        *(_QWORD *)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        *(_QWORD *)(i + 56) = 0;
        *(_QWORD *)(i + 64) = 0;
        *(_DWORD *)(i + 71) = 0;
        v6 = *(void (**)(uint64_t, _QWORD))(v2 + 216);
        if (v6)
          v6(i + 88, *(unsigned int *)(v2 + 224));
      }
    }
    *(_QWORD *)(v2 + 368) = 0;
    *(_DWORD *)(v2 + 168) = *(_DWORD *)(v2 + 172);
    memoryTruncate(v2);
    result = 0;
    *(_BYTE *)(v2 + 285) = 0;
    *(_BYTE *)(v2 + 289) = 1;
    return result;
  }
  if (!*(_BYTE *)(v1 + 294) || !*(_BYTE *)(v1 + 280))
  {
    result = pager_unwritelock(v1);
    goto LABEL_34;
  }
  v8 = *(unsigned __int8 *)(v1 + 290);
  v9 = *(unsigned __int8 *)(v1 + 289);
  if (v8 >= 2)
  {
    if (v9 >= 4)
    {
      pager_playback(v1);
      v8 = *(unsigned __int8 *)(v2 + 290);
    }
    v15 = ((int)(v8 << 29) >> 31) & 0xF;
    if ((v8 & 0x10) != 0)
      v15 = 10;
    if ((v8 & 1) != 0)
      v15 = 13;
    if ((v8 & 2) != 0)
      v15 = 7;
    if ((v8 & 8) != 0)
      return 11;
    else
      return v15;
  }
  if (v9 != 2)
  {
    result = pager_playback(v1);
LABEL_47:
    if ((_DWORD)result)
      goto LABEL_48;
    goto LABEL_34;
  }
  v10 = *(_QWORD *)(v1 + 360);
  if (!v10)
  {
LABEL_32:
    result = pager_unwritelock(v2);
    goto LABEL_47;
  }
  while (!*(_BYTE *)(v10 + 74))
  {
LABEL_31:
    v10 = *(_QWORD *)(v10 + 48);
    if (!v10)
      goto LABEL_32;
  }
  v11 = *(_DWORD *)(v10 + 8);
  LODWORD(v12) = *(_DWORD *)(v2 + 224);
  if (v11 > *(_DWORD *)(v2 + 172))
  {
    __memset_chk();
    goto LABEL_23;
  }
  lseek(*(_DWORD *)(v2 + 56), (int)v12 * (unint64_t)(v11 - 1), 0);
  v13 = *(_DWORD *)(v2 + 224);
  if (v13 == read(*(_DWORD *)(v2 + 56), __s1, v13))
  {
    LODWORD(v12) = *(_DWORD *)(v2 + 224);
LABEL_23:
    if (*(_WORD *)(v10 + 78))
    {
      v12 = (int)v12;
      if (!memcmp(__s1, (const void *)(v10 + 88), (int)v12))
      {
LABEL_30:
        *(_WORD *)(v10 + 74) = 0;
        goto LABEL_31;
      }
    }
    else
    {
      v12 = (int)v12;
    }
    memcpy((void *)(v10 + 88), __s1, v12);
    v14 = *(void (**)(uint64_t, _QWORD))(v2 + 216);
    if (v14)
      v14(v10 + 88, *(unsigned int *)(v2 + 224));
    else
      bzero((void *)(v10 + 88 + *(int *)(v2 + 228)), *(int *)(v2 + 204));
    goto LABEL_30;
  }
  pager_unwritelock(v2);
LABEL_48:
  *(_BYTE *)(v2 + 290) |= 8u;
  result = 11;
LABEL_34:
  *(_DWORD *)(v2 + 168) = -1;
  return result;
}

uint64_t pager_unwritelock(uint64_t a1)
{
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t i;

  if (*(unsigned __int8 *)(a1 + 289) < 2u)
    return 0;
  if (*(_BYTE *)(a1 + 285))
  {
    if (!*(_BYTE *)(a1 + 296))
    {
      lseek(*(_DWORD *)(a1 + 152), 0, 0);
      v3 = *(void **)(a1 + 312);
      if (v3)
        free(v3);
      *(_QWORD *)(a1 + 312) = 0;
    }
    v4 = *(_QWORD *)(a1 + 368);
    if (v4)
    {
      do
      {
        v5 = *(_QWORD *)(v4 + 56);
        *(_BYTE *)(v4 + 73) = 0;
        *(_QWORD *)(v4 + 56) = 0;
        *(_QWORD *)(v4 + 64) = 0;
        if (*(_BYTE *)(a1 + 296))
        {
          v6 = v4 + *(int *)(a1 + 204) + (uint64_t)*(int *)(a1 + 228);
          v7 = *(void **)(v6 + 96);
          if (v7)
            free(v7);
          *(_QWORD *)(v6 + 96) = 0;
        }
        v4 = v5;
      }
      while (v5);
    }
    *(_DWORD *)(a1 + 200) = 0;
    *(_BYTE *)(a1 + 285) = 0;
    *(_QWORD *)(a1 + 368) = 0;
  }
  *(_BYTE *)(a1 + 286) = 0;
  if (*(_BYTE *)(a1 + 284))
  {
    sqlite3OsClose(a1 + 120);
    *(_BYTE *)(a1 + 284) = 0;
  }
  if (*(_BYTE *)(a1 + 280))
  {
    sqlite3OsClose(a1 + 72);
    *(_BYTE *)(a1 + 280) = 0;
    unlink(*(const char **)(a1 + 8));
    v8 = *(void **)(a1 + 304);
    if (v8)
      free(v8);
    *(_QWORD *)(a1 + 304) = 0;
    for (i = *(_QWORD *)(a1 + 360); i; i = *(_QWORD *)(i + 48))
    {
      *(_BYTE *)(i + 72) = 0;
      *(_WORD *)(i + 74) = 0;
    }
    *(_BYTE *)(a1 + 294) = 0;
    *(_DWORD *)(a1 + 192) = 0;
  }
  result = sqlite3OsUnlock(a1 + 24, 1);
  *(_BYTE *)(a1 + 289) = 1;
  *(_DWORD *)(a1 + 172) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  return result;
}

uint64_t pager_playback(uint64_t a1)
{
  uint64_t v1;
  uint64_t Only;
  off_t st_size;
  uint64_t MasterJournal;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t i;
  void (*v28)(uint64_t, _QWORD);
  off_t v29;
  off_t v30;
  void *v31;
  int v32;
  char *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  int v42;
  unsigned int *v43;
  char *v44;
  int v45;
  unsigned int v46;
  char *__s1;
  _OWORD v48[2];
  int v49[4];
  stat __src[56];
  uint64_t v51;

  v1 = MEMORY[0x1E0C80A78](a1);
  v51 = *MEMORY[0x1E0C80C00];
  v45 = 0;
  v44 = 0;
  memset(__src, 0, 144);
  if (md_fstat_real(*(_DWORD *)(v1 + 104), __src))
  {
    Only = 10;
    goto LABEL_3;
  }
  st_size = __src[0].st_size;
  v46 = 0;
  MasterJournal = readMasterJournal(v1 + 72, (void **)&v44);
  v6 = v44;
  if ((_DWORD)MasterJournal)
  {
    Only = MasterJournal;
    if (v44)
      free(v44);
    v6 = 0;
    v44 = 0;
    if ((_DWORD)Only != 101)
      goto LABEL_3;
    goto LABEL_12;
  }
  if (!v44 || !access(v44, 0))
  {
    lseek(*(_DWORD *)(v1 + 104), 0, 0);
    v14 = (unsigned int *)(v1 + 196);
    for (*(_QWORD *)(v1 + 376) = 0; ; *(_QWORD *)(v1 + 376) = st_size)
    {
      do
      {
LABEL_19:
        seekJournalHdr(v1);
        if (*(_QWORD *)(v1 + 376) + *(int *)(v1 + 408) > st_size)
          goto LABEL_12;
        v15 = read(*(_DWORD *)(v1 + 104), __src, 8uLL);
        if (v15 == 8)
          Only = 0;
        else
          Only = 10;
        if (v15 != 8)
          goto LABEL_29;
        if (*(_QWORD *)&__src[0].st_dev != 0xD763A120F905D5D9)
          goto LABEL_12;
        Only = read32bits(*(_DWORD *)(v1 + 104), &v46);
        if ((_DWORD)Only
          || (Only = read32bits(*(_DWORD *)(v1 + 104), v14), (_DWORD)Only)
          || (Only = read32bits(*(_DWORD *)(v1 + 104), (unsigned int *)&v45), (_DWORD)Only)
          || (Only = read32bits(*(_DWORD *)(v1 + 104), (unsigned int *)(v1 + 408)), (_DWORD)Only))
        {
LABEL_29:
          if ((_DWORD)Only)
          {
            if ((_DWORD)Only == 101)
              goto LABEL_12;
            goto LABEL_13;
          }
        }
        else
        {
          v29 = *(_QWORD *)(v1 + 376) + *(int *)(v1 + 408);
          *(_QWORD *)(v1 + 376) = v29;
          lseek(*(_DWORD *)(v1 + 104), v29, 0);
        }
        LODWORD(v16) = v46;
        if (v46 == -1)
        {
          v16 = (st_size - *(int *)(v1 + 408)) / (*(int *)(v1 + 224) + 8);
          v46 = v16;
        }
        if (*(unsigned __int8 *)(v1 + 289) >= 4u && *(_QWORD *)(v1 + 376) == *(_DWORD *)(v1 + 408))
        {
          v17 = v45;
          if (ftruncate(*(_DWORD *)(v1 + 56), *(int *)(v1 + 224) * (uint64_t)v45))
          {
            Only = 10;
            if (v6)
              goto LABEL_97;
            goto LABEL_3;
          }
          *(_DWORD *)(v1 + 168) = v17;
        }
      }
      while (!(_DWORD)v16);
      v18 = 0;
      while (1)
      {
        LODWORD(v48[0]) = 0;
        Only = read32bits(*(_DWORD *)(v1 + 104), (unsigned int *)v48);
        if ((_DWORD)Only)
          goto LABEL_64;
        v19 = *(_DWORD *)(v1 + 224);
        v20 = read(*(_DWORD *)(v1 + 104), __src, v19);
        v21 = v19 == v20;
        Only = v19 == v20 ? 0 : 10;
        if (!v21)
          goto LABEL_64;
        v22 = *(int *)(v1 + 224);
        *(_QWORD *)(v1 + 376) += v22 + 4;
        v23 = v48[0];
        if (!LODWORD(v48[0]) || LODWORD(v48[0]) == 0x40000000 / (int)v22 + 1)
          goto LABEL_68;
        if (LODWORD(v48[0]) <= *(_DWORD *)(v1 + 168))
          break;
LABEL_65:
        if (++v18 == (_DWORD)v16)
          goto LABEL_19;
      }
      LODWORD(__s1) = 0;
      Only = read32bits(*(_DWORD *)(v1 + 104), (unsigned int *)&__s1);
      if (!(_DWORD)Only)
      {
        *(_QWORD *)(v1 + 376) += 4;
        v24 = *(_DWORD *)(v1 + 196);
        v25 = *(unsigned int *)(v1 + 224);
        if ((int)v25 >= 201)
        {
          v26 = v25 + 200;
          do
          {
            v24 += *((char *)&__src[0].st_dev + (v26 - 400));
            v26 -= 200;
          }
          while (v26 > 0x190);
        }
        if (v24 != (_DWORD)__s1)
          continue;
        v43 = v14;
        for (i = *(_QWORD *)(v1 + 8 * (v23 & 0x7FF) + 416); i; i = *(_QWORD *)(i + 16))
        {
          if (*(_DWORD *)(i + 8) == v23)
            break;
        }
        if (*(unsigned __int8 *)(v1 + 289) < 4u)
        {
          Only = 0;
        }
        else
        {
          lseek(*(_DWORD *)(v1 + 56), (int)v25 * (unint64_t)(v23 - 1), 0);
          Only = sqlite3OsWrite(v1 + 24, (char *)__src, *(unsigned int *)(v1 + 224));
        }
        if (i)
        {
          memcpy((void *)(i + 88), __src, *(int *)(v1 + 224));
          v28 = *(void (**)(uint64_t, _QWORD))(v1 + 208);
          if (v28)
            v28(i + 88, *(unsigned int *)(v1 + 224));
          if (*(unsigned __int8 *)(v1 + 289) >= 4u)
            *(_WORD *)(i + 74) = 0;
        }
        v14 = v43;
      }
LABEL_64:
      if (!(_DWORD)Only)
        goto LABEL_65;
      if ((_DWORD)Only != 101)
        goto LABEL_13;
LABEL_68:
      ;
    }
  }
  free(v6);
  v6 = 0;
  v44 = 0;
LABEL_12:
  Only = pager_unwritelock(v1);
LABEL_13:
  if (v6)
  {
    if ((_DWORD)Only)
      goto LABEL_97;
    *(_OWORD *)v49 = 0u;
    memset(v48, 0, sizeof(v48));
    Only = sqlite3OsOpenReadOnly(v6, (uint64_t)v48, v7, v8, v9, v10, v11, v12);
    if (!(_DWORD)Only)
    {
      memset(__src, 0, 144);
      v13 = v49[0];
      if (md_fstat_real(v49[0], __src))
      {
        Only = 10;
      }
      else
      {
        v30 = __src[0].st_size;
        if (__src[0].st_size < 1)
        {
          v31 = 0;
LABEL_87:
          unlink(v6);
LABEL_88:
          Only = 0;
          if (v31)
LABEL_94:
            free(v31);
        }
        else
        {
          __s1 = 0;
          v31 = sqlite3Malloc(__src[0].st_size);
          if (v31)
          {
            v32 = read(v13, v31, (int)v30);
            if (v32 == (_DWORD)v30)
              Only = 0;
            else
              Only = 10;
            if (v32 == (_DWORD)v30)
            {
              v33 = (char *)v31;
              while (1)
              {
                if (!access(v33, 0))
                {
                  memset(__src, 0, 48);
                  v40 = sqlite3OsOpenReadOnly(v33, (uint64_t)__src, v34, v35, v36, v37, v38, v39);
                  if ((_DWORD)v40)
                  {
                    Only = v40;
                    goto LABEL_94;
                  }
                  Only = readMasterJournal((uint64_t)__src, (void **)&__s1);
                  sqlite3OsClose((uint64_t)__src);
                  if ((_DWORD)Only)
                    break;
                  v41 = __s1;
                  if (__s1)
                  {
                    v42 = strcmp(__s1, v6);
                    free(v41);
                    if (!v42)
                      goto LABEL_88;
                  }
                }
                v33 += strlen(v33) + 1;
                if (v33 - (_BYTE *)v31 >= v30)
                  goto LABEL_87;
              }
            }
          }
          else
          {
            Only = 7;
          }
          if (v31)
            goto LABEL_94;
        }
      }
      sqlite3OsClose((uint64_t)v48);
    }
    v6 = v44;
    if (v44)
LABEL_97:
      free(v6);
  }
LABEL_3:
  *(_DWORD *)(v1 + 408) = 512;
  return Only;
}

uint64_t readMasterJournal(uint64_t a1, void **a2)
{
  uint64_t v4;
  off_t v5;
  int v6;
  uint64_t v7;
  void *v8;
  int v9;
  unsigned int v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  int v14;
  unsigned int v16;
  unsigned int v17;
  stat v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  memset(&v18, 0, sizeof(v18));
  if (md_fstat_real(*(_DWORD *)(a1 + 32), &v18))
    return 10;
  v5 = v18.st_size - 16;
  if (v18.st_size < 16)
    return 0;
  lseek(*(_DWORD *)(a1 + 32), v18.st_size - 16, 0);
  v17 = 0;
  v4 = read32bits(*(_DWORD *)(a1 + 32), &v17);
  if (!(_DWORD)v4)
  {
    v16 = 0;
    v4 = read32bits(*(_DWORD *)(a1 + 32), &v16);
    if (!(_DWORD)v4)
    {
      v6 = read(*(_DWORD *)(a1 + 32), &v18, 8uLL);
      v4 = v6 == 8 ? 0 : 10;
      if (v6 == 8)
      {
        if (*(_QWORD *)&v18.st_dev != 0xD763A120F905D5D9)
          return 0;
        v7 = v17;
        lseek(*(_DWORD *)(a1 + 32), v5 - v17, 0);
        v8 = sqlite3Malloc((int)v7 + 1);
        *a2 = v8;
        if (v8)
        {
          v9 = read(*(_DWORD *)(a1 + 32), v8, (int)v7);
          if ((_DWORD)v7 == v9)
            v4 = 0;
          else
            v4 = 10;
          if ((_DWORD)v7 == v9)
          {
            v10 = v16;
            v11 = *a2;
            if ((_DWORD)v7)
            {
              v12 = (char *)*a2;
              v13 = v7;
              do
              {
                v14 = *v12++;
                v10 -= v14;
                --v13;
              }
              while (v13);
            }
            if (!v10)
            {
              v4 = 0;
              v11[v7] = 0;
              return v4;
            }
            if (v11)
              free(v11);
            v4 = 0;
          }
          else if (*a2)
          {
            free(*a2);
          }
          *a2 = 0;
        }
        else
        {
          return 7;
        }
      }
    }
  }
  return v4;
}

uint64_t read32bits(int a1, unsigned int *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;

  v5 = 0;
  if (read(a1, &v5, 4uLL) == 4)
  {
    result = 0;
    v4 = bswap32(v5);
  }
  else
  {
    result = 10;
    v4 = v5;
  }
  *a2 = v4;
  return result;
}

off_t seekJournalHdr(uint64_t a1)
{
  uint64_t v1;
  off_t v2;

  v1 = *(_QWORD *)(a1 + 376);
  if (v1)
    v2 = *(int *)(a1 + 408) + *(int *)(a1 + 408) * ((v1 - 1) / *(int *)(a1 + 408));
  else
    v2 = 0;
  *(_QWORD *)(a1 + 376) = v2;
  return lseek(*(_DWORD *)(a1 + 104), v2, 0);
}

uint64_t *_page_ref(uint64_t *result)
{
  __int16 v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *((_WORD *)result + 39);
  if (!v1)
  {
    v2 = *result;
    if (*(uint64_t **)(*result + 352) == result)
    {
      v3 = result;
      do
        v3 = (uint64_t *)v3[4];
      while (v3 && *((_BYTE *)v3 + 75));
      *(_QWORD *)(v2 + 352) = v3;
    }
    v5 = result[4];
    v4 = result[5];
    if (v4)
    {
      *(_QWORD *)(v4 + 32) = v5;
      v5 = result[4];
    }
    else
    {
      *(_QWORD *)(v2 + 336) = v5;
    }
    if (v5)
      v6 = (_QWORD *)(v5 + 40);
    else
      v6 = (_QWORD *)(v2 + 344);
    *v6 = v4;
    ++*(_DWORD *)(v2 + 236);
  }
  *((_WORD *)result + 39) = v1 + 1;
  return result;
}

uint64_t sqlite3pager_get(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int v6;
  uint64_t i;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  int v24;
  unsigned int v25;
  void *v27;
  size_t v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  stat v40;

  v3 = (a2 - 1);
  if (a2 < 1)
    return 11;
  *a3 = 0;
  v6 = *(unsigned __int8 *)(a1 + 290);
  if (v6 >= 2)
    goto LABEL_69;
  if (*(_DWORD *)(a1 + 236) || *(_BYTE *)(a1 + 296))
  {
    for (i = *(_QWORD *)(a1 + 8 * (a2 & 0x7FF) + 416); i; i = *(_QWORD *)(i + 16))
    {
      if (*(_DWORD *)(i + 8) == a2)
        break;
    }
    if (*(_BYTE *)(a1 + 296) && !*(_BYTE *)(a1 + 289))
    {
      *(_BYTE *)(a1 + 289) = 1;
      if (i)
      {
LABEL_11:
        ++*(_DWORD *)(a1 + 244);
        if (*(_WORD *)(i + 78))
          ++*(_WORD *)(i + 78);
        else
          _page_ref((uint64_t *)i);
        goto LABEL_17;
      }
    }
    else if (i)
    {
      goto LABEL_11;
    }
  }
  else
  {
    if (!*(_BYTE *)(a1 + 283))
    {
      v9 = pager_wait_on_lock(a1, 1);
      if ((_DWORD)v9)
        return v9;
    }
    if (*(_BYTE *)(a1 + 282)
      && !access(*(const char **)(a1 + 8), 0)
      && !sqlite3OsCheckReservedLock(a1 + 24))
    {
      v33 = sqlite3OsLock(a1 + 24, 4);
      if ((_DWORD)v33)
      {
        v9 = v33;
        sqlite3OsUnlock(a1 + 24, 0);
        *(_BYTE *)(a1 + 289) = 0;
        return v9;
      }
      *(_BYTE *)(a1 + 289) = 4;
      if (sqlite3OsOpenReadOnly(*(char **)(a1 + 8), a1 + 72, v34, v35, v36, v37, v38, v39))
      {
        sqlite3OsUnlock(a1 + 24, 0);
        *(_BYTE *)(a1 + 289) = 0;
        return 5;
      }
      *(_WORD *)(a1 + 280) = 1;
      *(_BYTE *)(a1 + 320) = 0;
      *(_QWORD *)(a1 + 376) = 0;
      *(_QWORD *)(a1 + 384) = 0;
      v9 = pager_playback(a1);
      if ((_DWORD)v9)
        return v9;
    }
  }
  ++*(_DWORD *)(a1 + 248);
  if (*(_DWORD *)(a1 + 232) >= *(_DWORD *)(a1 + 240) && *(_QWORD *)(a1 + 336) && !*(_BYTE *)(a1 + 296))
  {
    i = *(_QWORD *)(a1 + 352);
    if (!i)
    {
      if (syncJournal(a1))
        goto LABEL_89;
      if (*(_BYTE *)(a1 + 288))
      {
        *(_DWORD *)(a1 + 192) = 0;
        if (writeJournalHdr(a1))
          goto LABEL_89;
      }
      i = *(_QWORD *)(a1 + 336);
    }
    if (!*(_BYTE *)(i + 74) || (*(_QWORD *)(i + 80) = 0, !pager_write_pagelist(i)))
    {
      if (*(_BYTE *)(i + 76))
        *(_BYTE *)(a1 + 295) = 1;
      unlinkPage(i);
      ++*(_DWORD *)(a1 + 252);
LABEL_33:
      *(_DWORD *)(i + 8) = a2;
      v14 = *(_QWORD *)(a1 + 304);
      if (v14)
      {
        if (*(_DWORD *)(a1 + 172) >= a2)
          LODWORD(v14) = (*(unsigned __int8 *)(v14 + ((unint64_t)a2 >> 3)) >> (a2 & 7)) & 1;
        else
          LOBYTE(v14) = 0;
      }
      *(_BYTE *)(i + 72) = v14;
      *(_BYTE *)(i + 75) = 0;
      v15 = *(_QWORD *)(a1 + 312);
      if (v15
        && *(_DWORD *)(a1 + 176) >= a2
        && ((*(unsigned __int8 *)(v15 + ((unint64_t)a2 >> 3)) >> (a2 & 7)) & 1) != 0)
      {
        if (!*(_BYTE *)(i + 73))
        {
          v16 = *(_QWORD *)i;
          *(_QWORD *)(i + 64) = 0;
          v17 = *(_QWORD *)(v16 + 368);
          if (v17)
            *(_QWORD *)(v17 + 64) = i;
          *(_QWORD *)(i + 56) = v17;
          *(_QWORD *)(v16 + 368) = i;
          *(_BYTE *)(i + 73) = 1;
        }
      }
      else if (*(_BYTE *)(i + 73))
      {
        v20 = *(_QWORD *)(i + 56);
        v19 = *(_QWORD *)(i + 64);
        v18 = (uint64_t *)(i + 56);
        if (v19)
        {
          *(_QWORD *)(v19 + 56) = v20;
          v20 = *v18;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)i + 368) = v20;
        }
        if (v20)
          *(_QWORD *)(v20 + 64) = v19;
        *(_BYTE *)(i + 73) = 0;
        *v18 = 0;
        *(_QWORD *)(i + 64) = 0;
      }
      *(_BYTE *)(i + 74) = 0;
      *(_WORD *)(i + 78) = 1;
      ++*(_DWORD *)(a1 + 236);
      v21 = a1 + 8 * (a2 & 0x7FF);
      *(_QWORD *)(i + 16) = *(_QWORD *)(v21 + 416);
      *(_QWORD *)(v21 + 416) = i;
      v22 = *(_QWORD *)(i + 16);
      if (v22)
        *(_QWORD *)(v22 + 24) = i;
      v23 = *(unsigned int *)(a1 + 204);
      if ((int)v23 >= 1)
        bzero((void *)(i + *(int *)(a1 + 228) + 88), v23);
      v24 = sqlite3pager_pagecount(a1);
      if (*(_BYTE *)(a1 + 290))
      {
        sqlite3pager_unref(i + 88);
        v6 = *(unsigned __int8 *)(a1 + 290);
LABEL_69:
        v25 = ((int)(v6 << 29) >> 31) & 0xF;
        if ((v6 & 0x10) != 0)
          v25 = 10;
        if ((v6 & 1) != 0)
          v25 = 13;
        if ((v6 & 2) != 0)
          v25 = 7;
        if ((v6 & 8) != 0)
          return 11;
        else
          return v25;
      }
      if (v24 >= a2)
      {
        lseek(*(_DWORD *)(a1 + 56), *(int *)(a1 + 224) * v3, 0);
        v29 = *(_DWORD *)(a1 + 224);
        v30 = read(*(_DWORD *)(a1 + 56), (void *)(i + 88), v29);
        v31 = v29 == v30;
        if (v29 == v30)
          v9 = 0;
        else
          v9 = 10;
        if (v31)
        {
          ++*(_DWORD *)(a1 + 256);
          goto LABEL_17;
        }
        memset(&v40, 0, sizeof(v40));
        v32 = md_fstat_real(*(_DWORD *)(a1 + 56), &v40);
        if (v32 || (v28 = *(int *)(a1 + 224), v40.st_size >= (v28 * a2)))
        {
          sqlite3pager_unref(i + 88);
          return v9;
        }
        v27 = (void *)(i + 88);
      }
      else
      {
        v27 = (void *)(i + 88);
        v28 = *(int *)(a1 + 224);
      }
      bzero(v27, v28);
LABEL_17:
      v9 = 0;
      *a3 = i + 88;
      return v9;
    }
LABEL_89:
    sqlite3pager_rollback(a1);
    return 10;
  }
  v10 = *(_DWORD *)(a1 + 228) + *(_DWORD *)(a1 + 204) + 16 * *(unsigned __int8 *)(a1 + 296) + 92;
  v11 = malloc_type_malloc(v10, 0xA2076A49uLL);
  if (v10 >= 1 && v11 == 0)
  {
    ++sqlite3_malloc_failed;
  }
  else
  {
    i = (uint64_t)v11;
    if (v11)
    {
      v11[10] = 0;
      *((_OWORD *)v11 + 3) = 0u;
      *((_OWORD *)v11 + 4) = 0u;
      *((_OWORD *)v11 + 1) = 0u;
      *((_OWORD *)v11 + 2) = 0u;
      *(_OWORD *)v11 = 0u;
      if (*(_BYTE *)(a1 + 296))
      {
        v13 = (char *)v11 + *(int *)(a1 + 204) + (uint64_t)*(int *)(a1 + 228);
        *((_QWORD *)v13 + 11) = 0;
        *((_QWORD *)v13 + 12) = 0;
      }
      *v11 = a1;
      v11[6] = *(_QWORD *)(a1 + 360);
      *(_QWORD *)(a1 + 360) = v11;
      ++*(_DWORD *)(a1 + 232);
      goto LABEL_33;
    }
  }
  if (!*(_BYTE *)(a1 + 296))
    pager_unwritelock(a1);
  *(_BYTE *)(a1 + 290) |= 2u;
  return 7;
}

uint64_t writeJournalHdr(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int *p_buf;
  int v9;
  int v10;
  int v11;
  int *v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  int *v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  int v22;
  uint64_t result;
  int __buf;

  seekJournalHdr(a1);
  v2 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 384) = v2;
  if (!*(_QWORD *)(a1 + 392))
    *(_QWORD *)(a1 + 392) = v2;
  *(_QWORD *)(a1 + 376) = v2 + *(int *)(a1 + 408);
  v3 = (char *)&aJournalMagic;
  v4 = 8;
  while (1)
  {
    v5 = write(*(_DWORD *)(a1 + 104), v3, v4);
    if (v5 < 1)
      break;
    v3 += v5;
    v6 = __OFSUB__(v4, v5);
    v4 -= v5;
    if ((v4 < 0) ^ v6 | (v4 == 0))
    {
      if (*(_BYTE *)(a1 + 287))
        v7 = 255;
      else
        v7 = 0;
      __buf = 16843009 * v7;
      p_buf = &__buf;
      v9 = 4;
      while (1)
      {
        v10 = write(*(_DWORD *)(a1 + 104), p_buf, v9);
        if (v10 < 1)
          break;
        p_buf = (int *)((char *)p_buf + v10);
        v6 = __OFSUB__(v9, v10);
        v9 -= v10;
        if ((v9 < 0) ^ v6 | (v9 == 0))
        {
          v11 = 4;
          sqlite3Randomness(4, (_BYTE *)(a1 + 196));
          __buf = bswap32(*(_DWORD *)(a1 + 196));
          v12 = &__buf;
          while (1)
          {
            v13 = write(*(_DWORD *)(a1 + 104), v12, v11);
            if (v13 < 1)
              break;
            v12 = (int *)((char *)v12 + v13);
            v6 = __OFSUB__(v11, v13);
            v11 -= v13;
            if ((v11 < 0) ^ v6 | (v11 == 0))
            {
              __buf = bswap32(*(_DWORD *)(a1 + 168));
              v14 = &__buf;
              v15 = 4;
              while (1)
              {
                v16 = write(*(_DWORD *)(a1 + 104), v14, v15);
                if (v16 < 1)
                  break;
                v14 = (int *)((char *)v14 + v16);
                v6 = __OFSUB__(v15, v16);
                v15 -= v16;
                if ((v15 < 0) ^ v6 | (v15 == 0))
                {
                  __buf = bswap32(*(_DWORD *)(a1 + 408));
                  v17 = &__buf;
                  v18 = 4;
                  while (1)
                  {
                    v19 = write(*(_DWORD *)(a1 + 104), v17, v18);
                    if (v19 < 1)
                      break;
                    v17 = (int *)((char *)v17 + v19);
                    v6 = __OFSUB__(v18, v19);
                    v18 -= v19;
                    if ((v18 < 0) ^ v6 | (v18 == 0))
                    {
                      lseek(*(_DWORD *)(a1 + 104), *(_QWORD *)(a1 + 376) - 1, 0);
                      v20 = &byte_1B8631A4C;
                      v21 = 1;
                      while (1)
                      {
                        v22 = write(*(_DWORD *)(a1 + 104), v20, v21);
                        if (v22 < 1)
                          break;
                        result = 0;
                        v20 += v22;
                        v6 = __OFSUB__(v21, v22);
                        v21 -= v22;
                        if ((v21 < 0) ^ v6 | (v21 == 0))
                          return result;
                      }
                      return 13;
                    }
                  }
                  return 13;
                }
              }
              return 13;
            }
          }
          return 13;
        }
      }
      return 13;
    }
  }
  return 13;
}

uint64_t pager_write_pagelist(uint64_t result)
{
  uint64_t v1;
  int *v2;
  int v3;
  char *v4;
  int v5;
  BOOL v6;

  if (!result)
    return result;
  v1 = result;
  v2 = *(int **)result;
  result = pager_wait_on_lock(*(_QWORD *)result, 4);
  if ((_DWORD)result)
    return result;
  while (1)
  {
    lseek(v2[14], (*(_DWORD *)(v1 + 8) - 1) * (uint64_t)v2[56], 0);
    if (*(_DWORD *)(v1 + 8) <= v2[42])
      break;
LABEL_10:
    *(_BYTE *)(v1 + 74) = 0;
    v1 = *(_QWORD *)(v1 + 80);
    if (!v1)
      return 0;
  }
  v3 = v2[56];
  if (v3 < 1)
  {
LABEL_9:
    ++v2[65];
    goto LABEL_10;
  }
  v4 = (char *)(v1 + 88);
  while (1)
  {
    v5 = write(v2[14], v4, v3);
    if (v5 < 1)
      break;
    v4 += v5;
    v6 = __OFSUB__(v3, v5);
    v3 -= v5;
    if ((v3 < 0) ^ v6 | (v3 == 0))
      goto LABEL_9;
  }
  ++v2[65];
  return 13;
}

uint64_t sqlite3pager_unref(uint64_t result)
{
  __int16 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t (*v6)(void);
  int v7;
  _QWORD *v8;
  _QWORD *v9;

  v1 = *(_WORD *)(result - 10) - 1;
  *(_WORD *)(result - 10) = v1;
  if (!v1)
  {
    v2 = result - 88;
    v3 = *(_QWORD *)(result - 88);
    v4 = *(_QWORD *)(v3 + 344);
    *(_QWORD *)(result - 56) = 0;
    *(_QWORD *)(result - 48) = v4;
    *(_QWORD *)(v3 + 344) = result - 88;
    if (v4)
      v5 = (uint64_t *)(v4 + 32);
    else
      v5 = (uint64_t *)(v3 + 336);
    *v5 = v2;
    if (!*(_BYTE *)(result - 13) && !*(_QWORD *)(v3 + 352))
      *(_QWORD *)(v3 + 352) = v2;
    v6 = *(uint64_t (**)(void))(v3 + 208);
    if (v6)
      result = v6();
    v7 = *(_DWORD *)(v3 + 236) - 1;
    *(_DWORD *)(v3 + 236) = v7;
    if (!v7 && !*(_BYTE *)(v3 + 296))
    {
      v8 = *(_QWORD **)(v3 + 360);
      if (v8)
      {
        do
        {
          v9 = (_QWORD *)v8[6];
          free(v8);
          v8 = v9;
        }
        while (v9);
      }
      *(_OWORD *)(v3 + 336) = 0u;
      *(_OWORD *)(v3 + 352) = 0u;
      bzero((void *)(v3 + 416), 0x4000uLL);
      *(_DWORD *)(v3 + 232) = 0;
      if (*(unsigned __int8 *)(v3 + 289) >= 2u)
        sqlite3pager_rollback(v3);
      result = sqlite3OsUnlock(v3 + 24, 0);
      *(_BYTE *)(v3 + 289) = 0;
      *(_DWORD *)(v3 + 168) = -1;
      *(_DWORD *)(v3 + 236) = 0;
    }
  }
  return result;
}

uint64_t sqlite3pager_begin(uint64_t a1)
{
  uint64_t result;

  if (*(_BYTE *)(a1 + 289) != 1)
    return 0;
  if (*(_BYTE *)(a1 + 296))
  {
    result = 0;
    *(_BYTE *)(a1 + 289) = 4;
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a1 + 168);
    return result;
  }
  result = sqlite3OsLock(a1 + 24, 2);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 289) = 2;
    *(_BYTE *)(a1 + 294) = 0;
    if (*(_BYTE *)(a1 + 282) && !*(_BYTE *)(a1 + 291))
      return pager_open_journal(a1);
    return 0;
  }
  return result;
}

uint64_t pager_open_journal(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;
  const char *v17;
  int v18;
  char *v19;
  uint64_t v20;
  int v21;
  void *v22;
  unsigned int v23;
  stat v24;
  char __s[200];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  sqlite3pager_pagecount(a1);
  v2 = sqlite3Malloc(*(_DWORD *)(a1 + 168) / 8 + 1);
  *(_QWORD *)(a1 + 304) = v2;
  if (!v2)
  {
    v4 = 7;
LABEL_6:
    *(_QWORD *)(a1 + 304) = 0;
    sqlite3OsUnlock(a1 + 24, 0);
    *(_BYTE *)(a1 + 289) = 0;
    return v4;
  }
  v3 = sqlite3OsOpenExclusive(*(char **)(a1 + 8), a1 + 72, *(unsigned __int8 *)(a1 + 291));
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  if ((_DWORD)v3)
  {
    v4 = v3;
    v5 = *(void **)(a1 + 304);
    if (v5)
      free(v5);
    goto LABEL_6;
  }
  *(_WORD *)(a1 + 280) = 1;
  *(_BYTE *)(a1 + 293) = 0;
  *(_BYTE *)(a1 + 295) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  v7 = *(unsigned __int8 *)(a1 + 290);
  if (*(_BYTE *)(a1 + 290))
  {
    v8 = (v7 << 29 >> 31) & 0xF;
    if ((v7 & 0x10) != 0)
      v8 = 10;
    if ((v7 & 1) != 0)
      v8 = 13;
    if ((v7 & 2) != 0)
      v8 = 7;
    if ((v7 & 8) != 0)
      return 11;
    else
      return v8;
  }
  else
  {
    *(_DWORD *)(a1 + 172) = *(_DWORD *)(a1 + 168);
    v9 = writeJournalHdr(a1);
    v10 = v9;
    if (*(_BYTE *)(a1 + 286) && !v9)
    {
      if (*(_BYTE *)(a1 + 296))
      {
        v10 = 0;
        *(_BYTE *)(a1 + 285) = 1;
        *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 168);
      }
      else if (*(_BYTE *)(a1 + 280))
      {
        v12 = sqlite3Malloc(*(_DWORD *)(a1 + 168) / 8 + 1);
        *(_QWORD *)(a1 + 312) = v12;
        if (v12)
        {
          *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 376);
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(a1 + 168);
          v13 = *(unsigned int *)(a1 + 196);
          *(_QWORD *)(a1 + 392) = 0;
          *(_QWORD *)(a1 + 400) = v13;
          if (*(_BYTE *)(a1 + 284))
          {
LABEL_52:
            v10 = 0;
            *(_BYTE *)(a1 + 285) = 1;
          }
          else
          {
            v14 = 8;
            while (1)
            {
              v15 = 0;
              memset(&v24, 0, sizeof(v24));
              sqlite3OsTempFileName_azDirs[0] = 0;
              v23 = v14;
              while (1)
              {
                v16 = (char *)sqlite3OsTempFileName_azDirs[v15];
                if (v16)
                {
                  if (!md_stat_real(v16, &v24)
                    && (v24.st_mode & 0xF000) == 0x4000
                    && !access((const char *)sqlite3OsTempFileName_azDirs[v15], 7))
                  {
                    break;
                  }
                }
                if (++v15 == 5)
                {
                  v17 = ".";
                  goto LABEL_38;
                }
              }
              v17 = (const char *)sqlite3OsTempFileName_azDirs[v15];
              do
              {
LABEL_38:
                sprintf(__s, "%s/sqlite_", v17);
                v18 = strlen(__s);
                v19 = &__s[v18];
                sqlite3Randomness(15, v19);
                v20 = 0;
                do
                {
                  v19[v20] = sqlite3OsTempFileName_zChars[(v19[v20]
                                                                          - 62
                                                                          * ((133
                                                                                          * (v19[v20] >> 1)) >> 12))];
                  ++v20;
                }
                while ((_DWORD)v20 != 15);
                __s[v18 + 15] = 0;
              }
              while (!access(__s, 0));
              v21 = sqlite3OsOpenExclusive(__s, a1 + 120, 1);
              v10 = v21;
              if (v23 < 2)
                break;
              if (!v21)
                goto LABEL_51;
              v14 = v23 - 1;
              if (v21 == 7)
                goto LABEL_49;
            }
            if (!v21)
            {
LABEL_51:
              *(_BYTE *)(a1 + 284) = 1;
              *(_DWORD *)(a1 + 200) = 0;
              goto LABEL_52;
            }
LABEL_49:
            v22 = *(void **)(a1 + 312);
            if (v22)
            {
              free(v22);
              *(_QWORD *)(a1 + 312) = 0;
            }
          }
        }
        else
        {
          sqlite3OsLock(a1 + 24, 1);
          v10 = 7;
        }
      }
      else
      {
        v10 = 0;
        *(_BYTE *)(a1 + 286) = 1;
      }
    }
    if (v10)
    {
      v11 = pager_unwritelock(a1);
      if (v11)
        return v11;
      else
        return 13;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t sqlite3pager_write(_QWORD *a1)
{
  uint64_t v1;
  char *v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  int v7;
  BOOL v9;
  uint64_t v10;
  void *v11;
  signed int v12;
  char *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = (char *)(a1 - 11);
  v1 = *(a1 - 11);
  v3 = *(unsigned __int8 *)(v1 + 290);
  if (!*(_BYTE *)(v1 + 290))
  {
    if (*(_BYTE *)(v1 + 292))
      return 3;
    *((_BYTE *)a1 - 14) = 1;
    if (*((_BYTE *)a1 - 16) && (*((_BYTE *)a1 - 15) || !*(_BYTE *)(v1 + 285)))
    {
      *(_BYTE *)(v1 + 294) = 1;
    }
    else
    {
      v5 = sqlite3pager_begin(v1);
      if ((_DWORD)v5)
        return v5;
      if (!*(_BYTE *)(v1 + 280))
      {
        if (*(_BYTE *)(v1 + 282))
        {
          v5 = pager_open_journal(v1);
          if ((_DWORD)v5)
            return v5;
        }
      }
      *(_BYTE *)(v1 + 294) = 1;
      if (!*((_BYTE *)a1 - 16) && (*(_BYTE *)(v1 + 282) || *(_BYTE *)(v1 + 296)))
      {
        if (*((_DWORD *)a1 - 20) <= *(_DWORD *)(v1 + 172))
        {
          if (*(_BYTE *)(v1 + 296))
          {
            v10 = *(int *)(v1 + 204) + (uint64_t)*(int *)(v1 + 228);
            v11 = sqlite3MallocRaw(*(_DWORD *)(v1 + 224));
            *(_QWORD *)((char *)a1 + v10) = v11;
            if (v11)
              memcpy(v11, a1, *(int *)(v1 + 224));
          }
          else
          {
            v15 = *(_DWORD *)(v1 + 196);
            v16 = *(unsigned int *)(v1 + 224);
            if ((int)v16 >= 201)
            {
              v17 = v16 + 200;
              do
              {
                v15 += *((char *)a1 + (v17 - 400));
                v17 -= 200;
              }
              while (v17 > 0x190);
            }
            v18 = *(_DWORD *)((char *)a1 + *(int *)(v1 + 228));
            *(_DWORD *)((char *)a1 + (int)v16) = bswap32(v15);
            v19 = *(int *)(v1 + 224) + 8;
            *((_DWORD *)a1 - 1) = bswap32(*((_DWORD *)a1 - 20));
            v20 = sqlite3OsWrite(v1 + 72, (char *)a1 - 4, v19);
            *(_QWORD *)(v1 + 376) += v19;
            *(_DWORD *)((char *)a1 + *(int *)(v1 + 228)) = v18;
            if ((_DWORD)v20)
              goto LABEL_58;
            ++*(_DWORD *)(v1 + 192);
            *(_BYTE *)(*(_QWORD *)(v1 + 304) + ((unint64_t)*((unsigned int *)a1 - 20) >> 3)) |= 1 << (*(_DWORD *)(a1 - 10) & 7);
            *((_BYTE *)a1 - 13) = *(_BYTE *)(v1 + 287) == 0;
            if (*(_BYTE *)(v1 + 285))
            {
              *(_BYTE *)(*(_QWORD *)(v1 + 312) + ((unint64_t)*((unsigned int *)a1 - 20) >> 3)) |= 1 << (*(_DWORD *)(a1 - 10) & 7);
              if (!*((_BYTE *)a1 - 15))
              {
                v21 = *(a1 - 11);
                *(a1 - 3) = 0;
                v22 = *(_QWORD *)(v21 + 368);
                if (v22)
                  *(_QWORD *)(v22 + 64) = v2;
                *(a1 - 4) = v22;
                *(_QWORD *)(v21 + 368) = v2;
                *((_BYTE *)a1 - 15) = 1;
              }
            }
          }
        }
        else
        {
          if (*(_BYTE *)(v1 + 281))
            v9 = 0;
          else
            v9 = *(_BYTE *)(v1 + 287) == 0;
          *((_BYTE *)a1 - 13) = v9;
        }
        if (*((_BYTE *)a1 - 13))
          *(_BYTE *)(v1 + 293) = 1;
        *((_BYTE *)a1 - 16) = 1;
      }
      if (*(_BYTE *)(v1 + 285))
      {
        if (!*((_BYTE *)a1 - 15))
        {
          v12 = *((_DWORD *)a1 - 20);
          if (v12 <= *(_DWORD *)(v1 + 176))
          {
            if (*(_BYTE *)(v1 + 296))
            {
              v13 = (char *)a1 + *(int *)(v1 + 204) + (uint64_t)*(int *)(v1 + 228);
              v14 = sqlite3MallocRaw(*(_DWORD *)(v1 + 224));
              *((_QWORD *)v13 + 1) = v14;
              if (v14)
                memcpy(v14, a1, *(int *)(v1 + 224));
              goto LABEL_60;
            }
            *((_DWORD *)a1 - 1) = bswap32(v12);
            v20 = sqlite3OsWrite(v1 + 120, (char *)a1 - 4, (*(_DWORD *)(v1 + 224) + 4));
            if (!(_DWORD)v20)
            {
              ++*(_DWORD *)(v1 + 200);
              *(_BYTE *)(*(_QWORD *)(v1 + 312) + ((unint64_t)*((unsigned int *)a1 - 20) >> 3)) |= 1 << (*(_DWORD *)(a1 - 10) & 7);
LABEL_60:
              if (!*((_BYTE *)a1 - 15))
              {
                v23 = *(a1 - 11);
                *(a1 - 3) = 0;
                v24 = *(_QWORD *)(v23 + 368);
                if (v24)
                  *(_QWORD *)(v24 + 64) = v2;
                *(a1 - 4) = v24;
                *(_QWORD *)(v23 + 368) = v2;
                *((_BYTE *)a1 - 15) = 1;
              }
              goto LABEL_16;
            }
LABEL_58:
            v5 = v20;
            sqlite3pager_rollback(v1);
            *(_BYTE *)(v1 + 290) |= 1u;
            return v5;
          }
        }
      }
    }
LABEL_16:
    v7 = *((_DWORD *)a1 - 20);
    if (*(_DWORD *)(v1 + 168) >= v7)
      return 0;
    *(_DWORD *)(v1 + 168) = v7;
    if (*(_BYTE *)(v1 + 296) || v7 != 0x40000000 / *(_DWORD *)(v1 + 224))
      return 0;
    v5 = 0;
    *(_DWORD *)(v1 + 168) = v7 + 1;
    return v5;
  }
  v4 = (v3 << 29 >> 31) & 0xF;
  if ((v3 & 0x10) != 0)
    v4 = 10;
  if ((v3 & 1) != 0)
    v4 = 13;
  if ((v3 & 2) != 0)
    v4 = 7;
  if ((v3 & 8) != 0)
    return 11;
  else
    return v4;
}

uint64_t sqlite3pager_dont_write(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  if (!*(_BYTE *)(result + 296))
  {
    v2 = result + 8 * (a2 & 0x7FF) + 416;
    do
    {
      v3 = *(_QWORD *)v2;
      v4 = *(_DWORD *)(*(_QWORD *)v2 + 8);
      v2 = *(_QWORD *)v2 + 16;
    }
    while (v4 != a2);
    *(_BYTE *)(v3 + 76) = 1;
    if (*(_BYTE *)(v3 + 74))
    {
      if (*(_DWORD *)(result + 168) != a2 || *(_DWORD *)(result + 172) >= a2)
        *(_BYTE *)(v3 + 74) = 0;
    }
  }
  return result;
}

uint64_t sqlite3pager_sync(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;

  if (*(_BYTE *)(a1 + 289) == 5 || *(_BYTE *)(a1 + 296) || !*(_BYTE *)(a1 + 294))
    return 0;
  if (*(_BYTE *)(a1 + 320))
    goto LABEL_7;
  v16 = 0;
  v3 = sqlite3pager_get(a1, 1, &v16);
  if (!(_DWORD)v3)
  {
    v8 = v16;
    v3 = sqlite3pager_write(v16);
    if (!(_DWORD)v3)
    {
      *((_DWORD *)v8 + 6) = bswap32(bswap32(*((_DWORD *)v8 + 6)) + 1);
      sqlite3pager_unref((uint64_t)v8);
      if (a2)
      {
        v16 = 0;
        v9 = a2 + 1;
        v10 = *(_DWORD *)(a1 + 172);
        while (v9 <= v10)
        {
          if (((*(unsigned __int8 *)(*(_QWORD *)(a1 + 304) + ((unint64_t)v9 >> 3)) >> (v9 & 7)) & 1) == 0)
          {
            v11 = sqlite3pager_get(a1, v9, &v16);
            if ((_DWORD)v11)
              return v11;
            v12 = v16;
            v3 = sqlite3pager_write(v16);
            sqlite3pager_unref((uint64_t)v12);
            if ((_DWORD)v3)
              return v3;
            v10 = *(_DWORD *)(a1 + 172);
          }
          ++v9;
        }
      }
      v3 = syncJournal(a1);
      if (!(_DWORD)v3)
      {
LABEL_7:
        if (a2)
        {
          sqlite3pager_pagecount(a1);
          v6 = *(unsigned __int8 *)(a1 + 290);
          if (*(_BYTE *)(a1 + 290))
          {
            v7 = (v6 << 29 >> 31) & 0xF;
            if ((v6 & 0x10) != 0)
              v7 = 10;
            if ((v6 & 1) != 0)
              v7 = 13;
            if ((v6 & 2) != 0)
              v3 = 7;
            else
              v3 = v7;
            if ((v6 & 8) != 0)
              return 11;
LABEL_17:
            if ((_DWORD)v3)
              return v3;
            goto LABEL_32;
          }
          if (*(_DWORD *)(a1 + 168) > a2)
          {
            if (*(_BYTE *)(a1 + 296))
            {
              *(_DWORD *)(a1 + 168) = a2;
              memoryTruncate(a1);
            }
            else
            {
              v3 = syncJournal(a1);
              if ((_DWORD)v3)
                return v3;
              v3 = pager_wait_on_lock(a1, 4);
              if ((_DWORD)v3)
                return v3;
              v15 = ftruncate(*(_DWORD *)(a1 + 56), *(int *)(a1 + 224) * (uint64_t)(int)a2);
              if (v15)
                v3 = 10;
              else
                v3 = 0;
              if (v15)
                goto LABEL_17;
              *(_DWORD *)(a1 + 168) = a2;
            }
          }
        }
LABEL_32:
        v13 = *(_QWORD *)(a1 + 360);
        if (v13)
        {
          v14 = 0;
          do
          {
            if (*(_BYTE *)(v13 + 74))
            {
              *(_QWORD *)(v13 + 80) = v14;
              v14 = v13;
            }
            v13 = *(_QWORD *)(v13 + 48);
          }
          while (v13);
        }
        else
        {
          v14 = 0;
        }
        v3 = pager_write_pagelist(v14);
        if (!(_DWORD)v3)
        {
          if (*(_BYTE *)(a1 + 287))
            v3 = 0;
          else
            v3 = sqlite3OsSync(a1 + 24);
          *(_BYTE *)(a1 + 289) = 5;
        }
      }
    }
  }
  return v3;
}

_DWORD *sqlite3HashFind(_DWORD *result, char *a2)
{
  uint64_t v2;
  unsigned int v4;

  if (result)
  {
    v2 = (uint64_t)result;
    if (*((_QWORD *)result + 3))
    {
      if (*(_BYTE *)result == 3)
        v4 = strHash(a2, 16);
      else
        v4 = binHash((unsigned __int8 *)a2, 16);
      result = findElementGivenHash(v2, (uint64_t)a2, (*(_DWORD *)(v2 + 16) - 1) & v4);
      if (result)
        return (_DWORD *)*((_QWORD *)result + 2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t strHash(char *__s, int a2)
{
  char *v2;
  int v3;
  unsigned int v4;
  int v5;

  v2 = __s;
  if (a2 <= 0)
  {
    a2 = strlen(__s);
    if (a2 < 1)
      return 0;
  }
  v3 = 0;
  v4 = a2 + 1;
  do
  {
    v5 = *v2++;
    v3 ^= sqlite3UpperToLower[v5] ^ (8 * v3);
    --v4;
  }
  while (v4 > 1);
  return v3 & 0x7FFFFFFF;
}

uint64_t binHash(unsigned __int8 *a1, int a2)
{
  int v2;
  unsigned int v3;
  int v4;

  if (a2 < 1)
    return 0;
  v2 = 0;
  v3 = a2 + 1;
  do
  {
    v4 = *a1++;
    v2 ^= v4 ^ (8 * v2);
    --v3;
  }
  while (v3 > 1);
  return v2 & 0x7FFFFFFF;
}

_DWORD *findElementGivenHash(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int *v5;
  _DWORD *v6;
  int v7;
  int v8;
  void *v9;
  _DWORD *result;
  int v11;

  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    return 0;
  v5 = (int *)(v3 + 16 * a3);
  v8 = *v5;
  v6 = v5 + 2;
  v7 = v8;
  if (*(_BYTE *)a1 == 3)
    v9 = strCompare;
  else
    v9 = binCompare;
  do
  {
    result = 0;
    if (!v7)
      break;
    v6 = *(_DWORD **)v6;
    if (!v6)
      break;
    --v7;
    v11 = ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))v9)(*((_QWORD *)v6 + 3), v6[8], a2, 16);
    result = v6;
  }
  while (v11);
  return result;
}

uint64_t strCompare(_BYTE *a1, int a2, unsigned __int8 *a3, int a4)
{
  int v4;
  uint64_t v5;
  int v6;

  if (a2 != a4)
    return 1;
  if (a2 < 1)
    return 0;
  v4 = a2 + 1;
  while (1)
  {
    v5 = *a1;
    if (!*a1)
      break;
    LODWORD(v5) = sqlite3UpperToLower[v5];
    v6 = sqlite3UpperToLower[*a3];
    if ((_DWORD)v5 != v6)
      return (v5 - v6);
    ++a1;
    ++a3;
    if (--v4 <= 1)
      return 0;
  }
  v6 = sqlite3UpperToLower[*a3];
  return (v5 - v6);
}

uint64_t binCompare(const void *a1, int a2, void *__s2, int a4)
{
  if (a2 == a4)
    return memcmp(a1, __s2, a2);
  else
    return 1;
}

uint64_t sqlite3HashInsert(uint64_t a1, char *a2, uint64_t a3)
{
  int v6;
  int v7;
  int v8;
  _QWORD *ElementGivenHash;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v17;
  _QWORD *v18;
  _OWORD *v19;
  int v20;
  int v21;

  if (*(_BYTE *)a1 == 3)
    v6 = strHash(a2, 16);
  else
    v6 = binHash((unsigned __int8 *)a2, 16);
  v7 = v6;
  v8 = (*(_DWORD *)(a1 + 16) - 1) & v6;
  ElementGivenHash = findElementGivenHash(a1, (uint64_t)a2, v8);
  if (!ElementGivenHash)
  {
    if (!a3)
      return 0;
    v18 = malloc_type_malloc(0x28uLL, 0xD00A7D76uLL);
    if (!v18)
    {
      ++sqlite3_malloc_failed;
      return a3;
    }
    v10 = v18;
    v18[4] = 0;
    *(_OWORD *)v18 = 0u;
    *((_OWORD *)v18 + 1) = 0u;
    if (a2 && *(_BYTE *)(a1 + 1))
    {
      v19 = malloc_type_malloc(0x10uLL, 0xA2076A49uLL);
      if (!v19)
      {
        ++sqlite3_malloc_failed;
LABEL_38:
        free(v10);
        return a3;
      }
      v10[3] = v19;
      *v19 = *(_OWORD *)a2;
    }
    else
    {
      v18[3] = a2;
    }
    *((_DWORD *)v10 + 8) = 16;
    v20 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)(a1 + 4) = v20;
    v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
LABEL_32:
      if (v20 > v21)
      {
        rehash(a1, 2 * v21);
        v21 = *(_DWORD *)(a1 + 16);
      }
      insertElement(a1, *(_QWORD *)(a1 + 24) + 16 * ((v21 - 1) & v7), v10);
      v11 = 0;
      goto LABEL_35;
    }
    rehash(a1, 8);
    v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      v20 = *(_DWORD *)(a1 + 4);
      goto LABEL_32;
    }
    *(_DWORD *)(a1 + 4) = 0;
    goto LABEL_38;
  }
  v10 = ElementGivenHash;
  v11 = ElementGivenHash[2];
  if (a3)
  {
LABEL_35:
    v10[2] = a3;
    return v11;
  }
  v12 = *ElementGivenHash;
  v13 = (_QWORD *)ElementGivenHash[1];
  if (!v13)
  {
    *(_QWORD *)(a1 + 8) = v12;
    if (!v12)
      goto LABEL_9;
    goto LABEL_8;
  }
  *v13 = v12;
  v12 = *ElementGivenHash;
  if (*ElementGivenHash)
LABEL_8:
    *(_QWORD *)(v12 + 8) = v13;
LABEL_9:
  v14 = *(_QWORD *)(a1 + 24) + 16 * v8;
  v15 = (_QWORD *)(v14 + 8);
  if (*(_QWORD **)(v14 + 8) == ElementGivenHash)
    *v15 = v12;
  if ((*(_DWORD *)v14)-- <= 1)
    *v15 = 0;
  if (*(_BYTE *)(a1 + 1))
  {
    v17 = (void *)ElementGivenHash[3];
    if (v17)
      free(v17);
  }
  free(v10);
  --*(_DWORD *)(a1 + 4);
  return v11;
}

void rehash(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t (*v7)(uint64_t, _QWORD);
  uint64_t **v8;
  int v9;
  int v10;
  uint64_t *v11;

  v4 = sqlite3Malloc(16 * a2);
  if (v4)
  {
    v5 = v4;
    v6 = *(void **)(a1 + 24);
    if (v6)
      free(v6);
    *(_QWORD *)(a1 + 24) = v5;
    *(_DWORD *)(a1 + 16) = a2;
    if (*(_BYTE *)a1 == 3)
      v7 = (uint64_t (*)(uint64_t, _QWORD))strHash;
    else
      v7 = (uint64_t (*)(uint64_t, _QWORD))binHash;
    v8 = *(uint64_t ***)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    if (v8)
    {
      v9 = a2 - 1;
      do
      {
        v10 = v7((uint64_t)v8[3], *((unsigned int *)v8 + 8));
        v11 = *v8;
        insertElement(a1, (uint64_t)v5 + 16 * (v10 & v9), v8);
        v8 = (uint64_t **)v11;
      }
      while (v11);
    }
  }
}

_QWORD *insertElement(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    *a3 = v3;
    v5 = *(_QWORD *)(v3 + 8);
    v4 = (_QWORD **)(v3 + 8);
    a3[1] = v5;
    v6 = *v4;
    if (!*v4)
      v6 = (_QWORD *)(a1 + 8);
    *v6 = a3;
    result = v4;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 8);
    result = (_QWORD *)(a1 + 8);
    v8 = v9;
    *a3 = v9;
    if (v9)
      *(_QWORD *)(v8 + 8) = a3;
    a3[1] = 0;
  }
  *result = a3;
  ++*(_DWORD *)a2;
  *(_QWORD *)(a2 + 8) = a3;
  return result;
}

void *sqlite3Malloc(int a1)
{
  size_t v2;
  void *v3;
  void *v4;

  v2 = a1;
  v3 = malloc_type_malloc(a1, 0xD00A7D76uLL);
  v4 = v3;
  if (v3)
  {
    bzero(v3, v2);
  }
  else if (a1 >= 1)
  {
    ++sqlite3_malloc_failed;
  }
  return v4;
}

void *sqlite3MallocRaw(int a1)
{
  void *result;

  result = malloc_type_malloc(a1, 0xA2076A49uLL);
  if (a1 >= 1 && !result)
    ++sqlite3_malloc_failed;
  return result;
}

uint64_t sqlite3SetString(uint64_t result, char *__s, int a3, int a4, int a5, int a6, int a7, int a8, char *__sa, uint64_t a10)
{
  void **v11;
  int v12;
  const char *v13;
  const char *v14;
  const char **v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  const char **v20;
  const char **v21;
  const char **v22;

  if (result)
  {
    v11 = (void **)result;
    v12 = strlen(__s) + 1;
    v21 = (const char **)&a10;
    v13 = __sa;
    if (__sa)
    {
      v14 = __sa;
      do
      {
        v12 += strlen(v14);
        v15 = v21++;
        v14 = *v15;
      }
      while (*v15);
    }
    if (*v11)
      free(*v11);
    result = (uint64_t)malloc_type_malloc(v12, 0xA2076A49uLL);
    v16 = result;
    if (v12 < 1 || result)
    {
      *v11 = (void *)result;
      if (result)
      {
        v17 = strcpy((char *)result, __s);
        result = strlen(v17);
        v22 = (const char **)&a10;
        if (__sa)
        {
          v18 = (char *)(v16 + result);
          do
          {
            v19 = strcpy(v18, v13);
            result = strlen(v19);
            v18 += result;
            v20 = v22++;
            v13 = *v20;
          }
          while (*v20);
        }
      }
    }
    else
    {
      ++sqlite3_malloc_failed;
      *v11 = 0;
    }
  }
  return result;
}

uint64_t sqlite3PutVarint(_BYTE *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t i;
  _BYTE v11[10];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = HIBYTE(a2);
  if (HIBYTE(a2))
  {
    a1[8] = a2;
    v7 = a2 >> 8;
    for (i = 7; i != -1; --i)
    {
      a1[i] = v7 | 0x80;
      v7 >>= 7;
    }
    return 9;
  }
  else
  {
    do
    {
      v3 = v2++;
      v11[v3] = a2 | 0x80;
      v4 = a2 >= 0x7F;
      v5 = a2 == 127;
      a2 >>= 7;
    }
    while (!v5 && v4);
    v11[0] &= ~0x80u;
    v6 = v2;
    do
    {
      *a1++ = v11[v6 - 1];
      --v3;
      --v6;
    }
    while (v3 != -1);
  }
  return v2;
}

uint64_t sqlite3Randomness(uint64_t result, _BYTE *a2)
{
  int v3;
  int v4;
  unsigned __int8 v5;
  int v6;
  int v7;
  uint64_t v8;
  int8x16_t v9;
  int8x16_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  char v15;
  unsigned __int8 v16;
  time_t v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v3 = result;
  v33 = *MEMORY[0x1E0C80C00];
  v4 = randomByte_prng[0];
  do
  {
    if (v4)
    {
      v5 = byte_1EF1B0EBA;
    }
    else
    {
      *(_WORD *)&byte_1EF1B0EB9 = 0;
      *(_OWORD *)v17 = 0u;
      v18 = 0u;
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0u;
      v25 = 0u;
      v26 = 0u;
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v32 = 0u;
      v6 = open("/dev/urandom", 0);
      if (v6 < 0)
      {
        time(v17);
        result = getpid();
        LODWORD(v17[1]) = result;
      }
      else
      {
        v7 = v6;
        read(v6, v17, 0x100uLL);
        result = close(v7);
      }
      v8 = 0;
      v9 = (int8x16_t)xmmword_1B8632080;
      v10.i64[0] = 0x1010101010101010;
      v10.i64[1] = 0x1010101010101010;
      do
      {
        *(int8x16_t *)&randomByte_prng[v8 + 3] = v9;
        v8 += 16;
        v9 = vaddq_s8(v9, v10);
      }
      while (v8 != 256);
      v11 = 0;
      v5 = byte_1EF1B0EBA;
      do
      {
        v12 = byte_1EF1B0EBB[v11];
        v5 += v12 + *((_BYTE *)v17 + v11);
        v13 = byte_1EF1B0EBB[v5];
        byte_1EF1B0EBB[v5] = v12;
        byte_1EF1B0EBB[v11++] = v13;
      }
      while (v11 != 256);
      v4 = 1;
      randomByte_prng[0] = 1;
    }
    v14 = ++byte_1EF1B0EB9;
    v15 = byte_1EF1B0EBB[byte_1EF1B0EB9];
    v16 = v15 + v5;
    byte_1EF1B0EBB[byte_1EF1B0EB9] = byte_1EF1B0EBB[v16];
    byte_1EF1B0EBA = v16;
    byte_1EF1B0EBB[v16] = v15;
    *a2++ = byte_1EF1B0EBB[(byte_1EF1B0EBB[v14] + v15)];
    --v3;
  }
  while (v3);
  return result;
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1E0C97C98](allocator, size, hint);
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1E0C97CA8](allocator, context);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
  MEMORY[0x1E0C97CB0](allocator, ptr);
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
  MEMORY[0x1E0C97CE8](theArray, otherArray, otherRange.location, otherRange.length);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
  MEMORY[0x1E0C97D00](theArray, range.location, range.length, applier, context);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D50](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D78](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
  MEMORY[0x1E0C97DA8](theArray, range.location, range.length, values);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DB0](theArray, idx, value);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
  MEMORY[0x1E0C97DB8](theArray);
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
  MEMORY[0x1E0C97DC0](theArray, idx);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
  MEMORY[0x1E0C97DD0](theArray, idx, value);
}

CFAttributedStringRef CFAttributedStringCreateCopy(CFAllocatorRef alloc, CFAttributedStringRef aStr)
{
  return (CFAttributedStringRef)MEMORY[0x1E0C97DF8](alloc, aStr);
}

CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr)
{
  return MEMORY[0x1E0C97E48](aStr);
}

void CFBagAddValue(CFMutableBagRef theBag, const void *value)
{
  MEMORY[0x1E0C97E98](theBag, value);
}

Boolean CFBagContainsValue(CFBagRef theBag, const void *value)
{
  return MEMORY[0x1E0C97EA8](theBag, value);
}

CFBagRef CFBagCreateCopy(CFAllocatorRef allocator, CFBagRef theBag)
{
  return (CFBagRef)MEMORY[0x1E0C97EB0](allocator, theBag);
}

CFMutableBagRef CFBagCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks)
{
  return (CFMutableBagRef)MEMORY[0x1E0C97EB8](allocator, capacity, callBacks);
}

CFIndex CFBagGetCount(CFBagRef theBag)
{
  return MEMORY[0x1E0C97EC8](theBag);
}

CFIndex CFBagGetCountOfValue(CFBagRef theBag, const void *value)
{
  return MEMORY[0x1E0C97ED0](theBag, value);
}

const void *__cdecl CFBagGetValue(CFBagRef theBag, const void *value)
{
  return (const void *)MEMORY[0x1E0C97EE0](theBag, value);
}

void CFBagGetValues(CFBagRef theBag, const void **values)
{
  MEMORY[0x1E0C97EE8](theBag, values);
}

void CFBagRemoveAllValues(CFMutableBagRef theBag)
{
  MEMORY[0x1E0C97EF0](theBag);
}

void CFBagRemoveValue(CFMutableBagRef theBag, const void *value)
{
  MEMORY[0x1E0C97EF8](theBag, value);
}

void CFBagSetValue(CFMutableBagRef theBag, const void *value)
{
  MEMORY[0x1E0C97F00](theBag, value);
}

CFBitVectorRef CFBitVectorCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex numBits)
{
  return (CFBitVectorRef)MEMORY[0x1E0C97F58](allocator, bytes, numBits);
}

CFMutableBitVectorRef CFBitVectorCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableBitVectorRef)MEMORY[0x1E0C97F68](allocator, capacity);
}

CFMutableBitVectorRef CFBitVectorCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFBitVectorRef bv)
{
  return (CFMutableBitVectorRef)MEMORY[0x1E0C97F70](allocator, capacity, bv);
}

CFBit CFBitVectorGetBitAtIndex(CFBitVectorRef bv, CFIndex idx)
{
  return MEMORY[0x1E0C97F78](bv, idx);
}

void CFBitVectorGetBits(CFBitVectorRef bv, CFRange range, UInt8 *bytes)
{
  MEMORY[0x1E0C97F80](bv, range.location, range.length, bytes);
}

CFIndex CFBitVectorGetCount(CFBitVectorRef bv)
{
  return MEMORY[0x1E0C97F88](bv);
}

CFIndex CFBitVectorGetCountOfBit(CFBitVectorRef bv, CFRange range, CFBit value)
{
  return MEMORY[0x1E0C97F90](bv, range.location, range.length, *(_QWORD *)&value);
}

CFIndex CFBitVectorGetFirstIndexOfBit(CFBitVectorRef bv, CFRange range, CFBit value)
{
  return MEMORY[0x1E0C97F98](bv, range.location, range.length, *(_QWORD *)&value);
}

CFIndex CFBitVectorGetLastIndexOfBit(CFBitVectorRef bv, CFRange range, CFBit value)
{
  return MEMORY[0x1E0C97FA0](bv, range.location, range.length, *(_QWORD *)&value);
}

void CFBitVectorSetAllBits(CFMutableBitVectorRef bv, CFBit value)
{
  MEMORY[0x1E0C97FA8](bv, *(_QWORD *)&value);
}

void CFBitVectorSetBitAtIndex(CFMutableBitVectorRef bv, CFIndex idx, CFBit value)
{
  MEMORY[0x1E0C97FB0](bv, idx, *(_QWORD *)&value);
}

void CFBitVectorSetBits(CFMutableBitVectorRef bv, CFRange range, CFBit value)
{
  MEMORY[0x1E0C97FB8](bv, range.location, range.length, *(_QWORD *)&value);
}

void CFBitVectorSetCount(CFMutableBitVectorRef bv, CFIndex count)
{
  MEMORY[0x1E0C97FC0](bv, count);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

uint64_t CFBundleCopyLocalizationForLocalizationInfo()
{
  return MEMORY[0x1E0C98038]();
}

CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray)
{
  return (CFArrayRef)MEMORY[0x1E0C98040](locArray, prefArray);
}

uint64_t CFBundleCopyLocalizedStringTableForLocalization()
{
  return MEMORY[0x1E0C98068]();
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1E0C980E8](bundleID);
}

uint64_t CFBundleGetLocalizationInfoForLocalization()
{
  return MEMORY[0x1E0C98140]();
}

Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...)
{
  return MEMORY[0x1E0C98228](calendar, at, componentDesc);
}

CFCalendarRef CFCalendarCopyCurrent(void)
{
  return (CFCalendarRef)MEMORY[0x1E0C98230]();
}

CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFCalendarIdentifier identifier)
{
  return (CFCalendarRef)MEMORY[0x1E0C98240](allocator, identifier);
}

Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, componentDesc);
  v3 = va_arg(va, _QWORD);
  return MEMORY[0x1E0C98248](calendar, v3, at);
}

CFIndex CFCalendarGetOrdinalityOfUnit(CFCalendarRef calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, CFAbsoluteTime at)
{
  return MEMORY[0x1E0C98268](calendar, smallerUnit, biggerUnit, at);
}

void CFCalendarSetTimeZone(CFCalendarRef calendar, CFTimeZoneRef tz)
{
  MEMORY[0x1E0C98298](calendar, tz);
}

void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
  MEMORY[0x1E0C982A0](theSet, theRange.location, theRange.length);
}

CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982B8](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1E0C982C8](alloc);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1E0C982D0](alloc, theSet);
}

CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982E8](alloc, theString);
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1E0C982F0](theSetIdentifier);
}

void CFCharacterSetInvert(CFMutableCharacterSetRef theSet)
{
  MEMORY[0x1E0C98318](theSet);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1E0C98320](theSet, theChar);
}

Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar)
{
  return MEMORY[0x1E0C98328](theSet, *(_QWORD *)&theChar);
}

void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet)
{
  MEMORY[0x1E0C98348](theSet, theOtherSet);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1E0C98350](cf);
}

uint64_t CFCopyHomeDirectoryURLForUser()
{
  return MEMORY[0x1E0C98368]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return MEMORY[0x1E0C98440](theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1E0C98448](allocator, at);
}

CFTypeRef CFDateFormatterCopyProperty(CFDateFormatterRef formatter, CFDateFormatterKey key)
{
  return (CFTypeRef)MEMORY[0x1E0C98458](formatter, key);
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1E0C98460](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterCreateStringWithDate(CFAllocatorRef allocator, CFDateFormatterRef formatter, CFDateRef date)
{
  return (CFStringRef)MEMORY[0x1E0C98490](allocator, formatter, date);
}

void CFDateFormatterSetFormat(CFDateFormatterRef formatter, CFStringRef formatString)
{
  MEMORY[0x1E0C984C0](formatter, formatString);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C984D8](theDate);
  return result;
}

CFTypeID CFDateGetTypeID(void)
{
  return MEMORY[0x1E0C984E8]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98508](theDict, applier, context);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98558](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1E0C98718](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return MEMORY[0x1E0C98758](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C98770]();
}

CFArrayRef CFLocaleCopyPreferredLanguages(void)
{
  return (CFArrayRef)MEMORY[0x1E0C98790]();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1E0C98798](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987A0](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987D8](locale);
}

uint64_t CFLog()
{
  return MEMORY[0x1E0C98808]();
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988D0]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x1E0C98908]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1E0C989A8](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1E0C989D0](number);
}

void CFPreferencesAddSuitePreferencesToApp(CFStringRef applicationID, CFStringRef suiteID)
{
  MEMORY[0x1E0C98A28](applicationID, suiteID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0C98AA0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
  MEMORY[0x1E0C98D78](theSet, applier, context);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFSetCallBacks *callBacks)
{
  return (CFSetRef)MEMORY[0x1E0C98D88](allocator, values, numValues, callBacks);
}

CFSetRef CFSetCreateCopy(CFAllocatorRef allocator, CFSetRef theSet)
{
  return (CFSetRef)MEMORY[0x1E0C98D90](allocator, theSet);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1E0C98DA8](theSet);
}

const void *__cdecl CFSetGetValue(CFSetRef theSet, const void *value)
{
  return (const void *)MEMORY[0x1E0C98DC0](theSet, value);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
  MEMORY[0x1E0C98DD0](theSet, values);
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
  MEMORY[0x1E0C98DD8](theSet);
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DE0](theSet, value);
}

void CFSetSetValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98DF0](theSet, value);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x1E0C98EE0](theString, cStr, *(_QWORD *)&encoding);
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
  MEMORY[0x1E0C98EE8](theString, chars, numChars);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1E0C98F68](alloc, theArray, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F98](alloc, maxLength, theString);
}

CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98FA0](alloc, chars, numChars, capacity, externalCharactersAllocator);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FC8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FE0](alloc, cStr, *(_QWORD *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1E0C98FE8](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FF8](alloc, chars, numChars, contentsDeallocator);
}

CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char *buffer)
{
  return (CFStringRef)MEMORY[0x1E0C99008](alloc, buffer);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
  MEMORY[0x1E0C99038](theString, range.location, range.length);
}

uint64_t CFStringEncodingBytesToUnicode()
{
  return MEMORY[0x1E0C99040]();
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99060](theString, theSet, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1E0C99068](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
  MEMORY[0x1E0C990C0](theString, range.location, range.length, buffer);
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1E0C990C8](theString);
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C990E0](string, buffer, maxBufLen);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

uint64_t CFStringGetRangeOfCharacterClusterAtIndex()
{
  return MEMORY[0x1E0C99158]();
}

CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex)
{
  CFIndex v2;
  CFIndex v3;
  CFRange result;

  v2 = MEMORY[0x1E0C99160](theString, theIndex);
  result.length = v3;
  result.location = v2;
  return result;
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1E0C99190](theString, suffix);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
  MEMORY[0x1E0C991D0](theString, locale);
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
  MEMORY[0x1E0C991D8](theString, theForm);
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
  MEMORY[0x1E0C99258](theString);
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return (CFTimeZoneRef)MEMORY[0x1E0C99280]();
}

CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti)
{
  return (CFTimeZoneRef)MEMORY[0x1E0C99290](allocator, ti);
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1E0C992C8](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1E0C992D8](anURL, pathStyle);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1E0C992F8](url);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x1E0C99390](allocator, url);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C993C8](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99418](allocator, URLBytes, length, *(_QWORD *)&encoding, baseURL);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1E0C994A0](anURL);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr)
{
  return (CFUUIDRef)MEMORY[0x1E0C99520](alloc, uuidStr);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1E0C99530](alloc, *(_QWORD *)&bytes.byte0, *(_QWORD *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1;
  uint64_t v2;
  CFUUIDBytes result;

  v1 = MEMORY[0x1E0C99568](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

uint64_t CloseStreamCompressor()
{
  return MEMORY[0x1E0CFCE48]();
}

uint64_t CreateStreamCompressor()
{
  return MEMORY[0x1E0CFCE60]();
}

uint64_t CreateStreamCompressorQueueWithOptions()
{
  return MEMORY[0x1E0CFCE68]();
}

uint64_t CreateUTF8StringDecomposed()
{
  return MEMORY[0x1E0D4D8F0]();
}

uint64_t DRTailspinRequest()
{
  return MEMORY[0x1E0D1D230]();
}

uint64_t FinishStreamCompressorQueue()
{
  return MEMORY[0x1E0CFCE70]();
}

CFMutableDictionaryRef IOBSDNameMatching(mach_port_t mainPort, uint32_t options, const char *bsdName)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBAD28](*(_QWORD *)&mainPort, *(_QWORD *)&options, bsdName);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1E0CBB668](*(_QWORD *)&iterator);
}

kern_return_t IOMasterPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return MEMORY[0x1E0CBB690](*(_QWORD *)&bootstrapPort, mainPort);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB900](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

kern_return_t IORegistryEntryGetParentEntry(io_registry_entry_t entry, const io_name_t plane, io_registry_entry_t *parent)
{
  return MEMORY[0x1E0CBB958](*(_QWORD *)&entry, plane, parent);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1E0CBB9F0](*(_QWORD *)&mainPort, matching, existing);
}

uint64_t MDDictionaryUIntUIntCreate()
{
  return MEMORY[0x1E0D4D900]();
}

uint64_t MDDictionaryUIntUIntIncrementValue()
{
  return MEMORY[0x1E0D4D908]();
}

uint64_t MDDictionaryUIntUIntIterateValues()
{
  return MEMORY[0x1E0D4D910]();
}

uint64_t MDTrieClose()
{
  return MEMORY[0x1E0D4D970]();
}

uint64_t MDTrieCreate()
{
  return MEMORY[0x1E0D4D980]();
}

uint64_t MDTrieGetFd()
{
  return MEMORY[0x1E0D4D990]();
}

uint64_t MDTrieSync()
{
  return MEMORY[0x1E0D4D9B0]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t NLStringTokenizerCopyBestStringLanguage()
{
  return MEMORY[0x1E0D17208]();
}

uint64_t NLStringTokenizerCreate()
{
  return MEMORY[0x1E0D17210]();
}

NSRange NSIntersectionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB2C58](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

NSString *__cdecl NSStringFromRange(NSRange range)
{
  return (NSString *)MEMORY[0x1E0CB3220](range.location, range.length);
}

int64_t OSAtomicAdd64(int64_t __theAmount, OSAtomic_int64_aligned64_t *__theValue)
{
  return MEMORY[0x1E0C80650](__theAmount, __theValue);
}

void *__cdecl OSAtomicDequeue(OSQueueHead *__list, size_t a2)
{
  return (void *)MEMORY[0x1E0C80658](__list, a2);
}

void OSAtomicEnqueue(OSQueueHead *__list, void *__new, size_t a3)
{
  MEMORY[0x1E0C80660](__list, __new, a3);
}

int32_t OSAtomicIncrement32(int32_t *__theValue)
{
  return MEMORY[0x1E0C80668](__theValue);
}

void OSMemoryBarrier(void)
{
  MEMORY[0x1E0C80670]();
}

uint64_t PLLogRegisteredEvent()
{
  return MEMORY[0x1E0D7FE28]();
}

uint64_t PLShouldLogRegisteredEvent()
{
  return MEMORY[0x1E0D7FE40]();
}

uint64_t SIIsLanguagePreferred()
{
  return MEMORY[0x1E0DA9BB8]();
}

uint64_t SILanguageModelCopyLocale()
{
  return MEMORY[0x1E0DA9BC0]();
}

uint64_t SILanguageModelEnumerateKeyPhrases()
{
  return MEMORY[0x1E0DA9BD0]();
}

uint64_t SILanguageModelGetDefaultModel()
{
  return MEMORY[0x1E0DA9BD8]();
}

uint64_t SILanguageModelGetKeyPhraseAtIndex()
{
  return MEMORY[0x1E0DA9BE0]();
}

uint64_t SILanguageModelGetLanguageGuessUsingMontreal()
{
  return MEMORY[0x1E0DA9BE8]();
}

uint64_t SILanguageModelIsValidPhraseToken()
{
  return MEMORY[0x1E0DA9BF8]();
}

uint64_t SILanguageModelPurge()
{
  return MEMORY[0x1E0DA9C00]();
}

uint64_t SILanguageModelRelease()
{
  return MEMORY[0x1E0DA9C08]();
}

uint64_t SILanguageModelReserve()
{
  return MEMORY[0x1E0DA9C10]();
}

uint64_t SILanguageModelShrinkLanguageGuessers()
{
  return MEMORY[0x1E0DA9C18]();
}

uint64_t SILanguageModelUnreserve()
{
  return MEMORY[0x1E0DA9C20]();
}

uint64_t SILanguagesIsCJK()
{
  return MEMORY[0x1E0DA9C28]();
}

uint64_t SILocalizationCreateWithOptions()
{
  return MEMORY[0x1E0DA9C30]();
}

uint64_t SILocalizationGetTokenType()
{
  return MEMORY[0x1E0DA9C38]();
}

uint64_t SILocalizationLoad()
{
  return MEMORY[0x1E0DA9C40]();
}

uint64_t SILocalizationRelease()
{
  return MEMORY[0x1E0DA9C48]();
}

uint64_t SpotlightCacheAttributes()
{
  return MEMORY[0x1E0D4D9C0]();
}

uint64_t SpotlightCacheBundleID()
{
  return MEMORY[0x1E0D4D9C8]();
}

uint64_t SpotlightCacheDelete()
{
  return MEMORY[0x1E0D4D9D0]();
}

uint64_t SpotlightCacheDeleteEntry()
{
  return MEMORY[0x1E0D4D9D8]();
}

uint64_t SpotlightCacheInsertEntry()
{
  return MEMORY[0x1E0D4D9E0]();
}

uint64_t SpotlightCacheLookup()
{
  return MEMORY[0x1E0D4D9E8]();
}

uint64_t SpotlightCachePayload()
{
  return MEMORY[0x1E0D4D9F0]();
}

uint64_t UTF16FromUTF8()
{
  return MEMORY[0x1E0D4D9F8]();
}

CFDictionaryRef UTTypeCopyDeclaration(CFStringRef inUTI)
{
  return (CFDictionaryRef)MEMORY[0x1E0CA5950](inUTI);
}

CFURLRef UTTypeCopyDeclaringBundleURL(CFStringRef inUTI)
{
  return (CFURLRef)MEMORY[0x1E0CA5958](inUTI);
}

uint64_t WriteToStreamCompressor()
{
  return MEMORY[0x1E0CFCE80]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x1E0C9A0D0]();
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

uint64_t _CFRuntimeSetInstanceTypeID()
{
  return MEMORY[0x1E0C9A4B8]();
}

uint64_t _MDBundleUtilsClearCache()
{
  return MEMORY[0x1E0D4DA00]();
}

uint64_t _MDBundleUtilsCopyCachedLocalizedDescriptionDictionary()
{
  return MEMORY[0x1E0D4DA08]();
}

uint64_t _MDBundleUtilsCopyLocalizedDescriptionDictionary()
{
  return MEMORY[0x1E0D4DA10]();
}

uint64_t _MDPerf_QueryLog()
{
  return MEMORY[0x1E0D4DA28]();
}

uint64_t _MDPlistArrayGetCount()
{
  return MEMORY[0x1E0D4DA30]();
}

uint64_t _MDPlistArrayGetPlistObjectAtIndex()
{
  return MEMORY[0x1E0D4DA38]();
}

uint64_t _MDPlistArrayIterate()
{
  return MEMORY[0x1E0D4DA40]();
}

uint64_t _MDPlistBooleanGetValue()
{
  return MEMORY[0x1E0D4DA48]();
}

uint64_t _MDPlistBytesAddBoolean()
{
  return MEMORY[0x1E0D4DA50]();
}

uint64_t _MDPlistBytesAddCString()
{
  return MEMORY[0x1E0D4DA58]();
}

uint64_t _MDPlistBytesAddData()
{
  return MEMORY[0x1E0D4DA60]();
}

uint64_t _MDPlistBytesAddDate()
{
  return MEMORY[0x1E0D4DA68]();
}

uint64_t _MDPlistBytesAddInteger()
{
  return MEMORY[0x1E0D4DA70]();
}

uint64_t _MDPlistBytesAddInternedCString()
{
  return MEMORY[0x1E0D4DA78]();
}

uint64_t _MDPlistBytesAddNull()
{
  return MEMORY[0x1E0D4DA80]();
}

uint64_t _MDPlistBytesAddRawInternedCStringKey()
{
  return MEMORY[0x1E0D4DA88]();
}

uint64_t _MDPlistBytesAddRawInternedCStringKeyWithString()
{
  return MEMORY[0x1E0D4DA90]();
}

uint64_t _MDPlistBytesAddReal()
{
  return MEMORY[0x1E0D4DA98]();
}

uint64_t _MDPlistBytesAddString()
{
  return MEMORY[0x1E0D4DAA0]();
}

uint64_t _MDPlistBytesAppendMultiplePlistBytes()
{
  return MEMORY[0x1E0D4DAA8]();
}

uint64_t _MDPlistBytesAppendPlist()
{
  return MEMORY[0x1E0D4DAB0]();
}

uint64_t _MDPlistBytesAppendPlistBytes()
{
  return MEMORY[0x1E0D4DAB8]();
}

uint64_t _MDPlistBytesBeginArray()
{
  return MEMORY[0x1E0D4DAC0]();
}

uint64_t _MDPlistBytesBeginDictionary()
{
  return MEMORY[0x1E0D4DAC8]();
}

uint64_t _MDPlistBytesBeginPlist()
{
  return MEMORY[0x1E0D4DAD0]();
}

uint64_t _MDPlistBytesCopyPlistAtIndex()
{
  return MEMORY[0x1E0D4DAE8]();
}

uint64_t _MDPlistBytesCreate()
{
  return MEMORY[0x1E0D4DAF0]();
}

uint64_t _MDPlistBytesCreateMutable()
{
  return MEMORY[0x1E0D4DAF8]();
}

uint64_t _MDPlistBytesCreateMutableCopy()
{
  return MEMORY[0x1E0D4DB00]();
}

uint64_t _MDPlistBytesCreateMutableUsingMalloc()
{
  return MEMORY[0x1E0D4DB08]();
}

uint64_t _MDPlistBytesCreateMutableUsingMallocWithZone()
{
  return MEMORY[0x1E0D4DB10]();
}

uint64_t _MDPlistBytesEndArray()
{
  return MEMORY[0x1E0D4DB20]();
}

uint64_t _MDPlistBytesEndDictionary()
{
  return MEMORY[0x1E0D4DB28]();
}

uint64_t _MDPlistBytesEndPlist()
{
  return MEMORY[0x1E0D4DB30]();
}

uint64_t _MDPlistBytesGetByteVector()
{
  return MEMORY[0x1E0D4DB38]();
}

uint64_t _MDPlistBytesGetByteVectorCount()
{
  return MEMORY[0x1E0D4DB40]();
}

uint64_t _MDPlistContainerAddBooleanValue()
{
  return MEMORY[0x1E0D4DB48]();
}

uint64_t _MDPlistContainerAddCString()
{
  return MEMORY[0x1E0D4DB50]();
}

uint64_t _MDPlistContainerAddDataValue()
{
  return MEMORY[0x1E0D4DB58]();
}

uint64_t _MDPlistContainerAddDateValue()
{
  return MEMORY[0x1E0D4DB60]();
}

uint64_t _MDPlistContainerAddInt32Value()
{
  return MEMORY[0x1E0D4DB70]();
}

uint64_t _MDPlistContainerAddInt64Value()
{
  return MEMORY[0x1E0D4DB78]();
}

uint64_t _MDPlistContainerAddNullValue()
{
  return MEMORY[0x1E0D4DB80]();
}

uint64_t _MDPlistContainerAddObject()
{
  return MEMORY[0x1E0D4DB88]();
}

uint64_t _MDPlistContainerBeginArray()
{
  return MEMORY[0x1E0D4DB90]();
}

uint64_t _MDPlistContainerBeginContainer()
{
  return MEMORY[0x1E0D4DB98]();
}

uint64_t _MDPlistContainerBeginDictionary()
{
  return MEMORY[0x1E0D4DBA0]();
}

uint64_t _MDPlistContainerCopyObject()
{
  return MEMORY[0x1E0D4DBB0]();
}

uint64_t _MDPlistContainerCopyRootObject()
{
  return MEMORY[0x1E0D4DBB8]();
}

uint64_t _MDPlistContainerCreateMutable()
{
  return MEMORY[0x1E0D4DBC0]();
}

uint64_t _MDPlistContainerCreateWithBytes()
{
  return MEMORY[0x1E0D4DBC8]();
}

uint64_t _MDPlistContainerCreateWithCopiedBytes()
{
  return MEMORY[0x1E0D4DBD8]();
}

uint64_t _MDPlistContainerEndArray()
{
  return MEMORY[0x1E0D4DBE0]();
}

uint64_t _MDPlistContainerEndContainer()
{
  return MEMORY[0x1E0D4DBE8]();
}

uint64_t _MDPlistContainerEndDictionary()
{
  return MEMORY[0x1E0D4DBF0]();
}

uint64_t _MDPlistContainerGetBytes()
{
  return MEMORY[0x1E0D4DBF8]();
}

uint64_t _MDPlistContainerGetLength()
{
  return MEMORY[0x1E0D4DC00]();
}

uint64_t _MDPlistContainerGetPlistObjectAtKeyArray()
{
  return MEMORY[0x1E0D4DC08]();
}

uint64_t _MDPlistDataGetBytePtr()
{
  return MEMORY[0x1E0D4DC10]();
}

uint64_t _MDPlistDictionaryGetPlistObjectForKey()
{
  return MEMORY[0x1E0D4DC20]();
}

uint64_t _MDPlistDictionaryIterate()
{
  return MEMORY[0x1E0D4DC28]();
}

uint64_t _MDPlistGetPlistObjectSize()
{
  return MEMORY[0x1E0D4DC30]();
}

uint64_t _MDPlistGetPlistObjectType()
{
  return MEMORY[0x1E0D4DC38]();
}

uint64_t _MDPlistGetRootPlistObjectFromBytes()
{
  return MEMORY[0x1E0D4DC40]();
}

uint64_t _MDPlistGetRootPlistObjectFromPlist()
{
  return MEMORY[0x1E0D4DC48]();
}

uint64_t _MDPlistNumberGetIntValue()
{
  return MEMORY[0x1E0D4DC58]();
}

uint64_t _MDPlistStringGetValue()
{
  return MEMORY[0x1E0D4DC60]();
}

uint64_t _MDStoreOIDArrayAppendMultipleOIDArrays()
{
  return MEMORY[0x1E0D4DC68]();
}

uint64_t _MDStoreOIDArrayApplyBlock()
{
  return MEMORY[0x1E0D4DC70]();
}

uint64_t _MDStoreOIDArrayBeginBulkAdd()
{
  return MEMORY[0x1E0D4DC80]();
}

uint64_t _MDStoreOIDArrayBeginSequence()
{
  return MEMORY[0x1E0D4DC88]();
}

uint64_t _MDStoreOIDArrayCreate()
{
  return MEMORY[0x1E0D4DC90]();
}

uint64_t _MDStoreOIDArrayCreateMutable()
{
  return MEMORY[0x1E0D4DC98]();
}

uint64_t _MDStoreOIDArrayCreateMutableCopy()
{
  return MEMORY[0x1E0D4DCA0]();
}

uint64_t _MDStoreOIDArrayCreateMutableWithOids()
{
  return MEMORY[0x1E0D4DCA8]();
}

uint64_t _MDStoreOIDArrayEndBulkAdd()
{
  return MEMORY[0x1E0D4DCB0]();
}

uint64_t _MDStoreOIDArrayEndSequence()
{
  return MEMORY[0x1E0D4DCB8]();
}

uint64_t _MDStoreOIDArrayGetVector()
{
  return MEMORY[0x1E0D4DCC0]();
}

uint64_t _MDStoreOIDArrayGetVectorCount()
{
  return MEMORY[0x1E0D4DCC8]();
}

uint64_t _MDStoreOIDArraySetShouldUseMalloc()
{
  return MEMORY[0x1E0D4DCD0]();
}

uint64_t _NLStringTokenizerCopyPossibleStringLanguages()
{
  return MEMORY[0x1E0D172E8]();
}

uint64_t _NLStringTokenizerGetDerivedTokens()
{
  return MEMORY[0x1E0D172F0]();
}

uint64_t _NLStringTokenizerGetLanguageIDForLocale()
{
  return MEMORY[0x1E0D172F8]();
}

uint64_t _NLStringTokenizerGetSubTokensOfCompound()
{
  return MEMORY[0x1E0D17300]();
}

uint64_t _NLStringTokenizerSetLocale()
{
  return MEMORY[0x1E0D17308]();
}

uint64_t _NLStringTokenizerSetStringWithOptionsAndLanguageID()
{
  return MEMORY[0x1E0D17310]();
}

uint64_t _NLStringTokenizerTokenize()
{
  return MEMORY[0x1E0D17318]();
}

uint64_t _NLStringTokenizerTokenizeWithTranscriptions()
{
  return MEMORY[0x1E0D17320]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x1E0DE41A0](retstr, this);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1E0DE41F0]();
}

{
  return MEMORY[0x1E0DE4800]();
}

const std::__fs::filesystem::directory_entry *__cdecl std::__fs::filesystem::directory_iterator::__dereference(const std::__fs::filesystem::directory_iterator *this)
{
  return (const std::__fs::filesystem::directory_entry *)MEMORY[0x1E0DE41F8](this);
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x1E0DE4208](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x1E0DE4220](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4408](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4440](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4448](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4468](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x1E0DE44A8](this, __requested_capacity);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x1E0DE44B0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1E0DE44C8](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1E0DE45D0]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1E0DE45E0]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1E0DE45F0]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1E0DE46A8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46F8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4718]();
}

{
  return MEMORY[0x1E0DE4728]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1E0DE4770](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
  MEMORY[0x1E0DE4778](this);
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1E0DE4780](this);
}

uint64_t std::ifstream::open()
{
  return MEMORY[0x1E0DE47A0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

uint64_t std::ofstream::open()
{
  return MEMORY[0x1E0DE47B8]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1E0DE4848]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1E0DE48F8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

void std::__libcpp_verbose_abort(const char *__format, ...)
{
  MEMORY[0x1E0DE4930](__format);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::__increment(std::__fs::filesystem::directory_iterator *this, std::error_code *__ec)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x1E0DE49F0](this, __ec);
}

std::__fs::filesystem::directory_iterator *__cdecl std::__fs::filesystem::directory_iterator::directory_iterator(std::__fs::filesystem::directory_iterator *this, const std::__fs::filesystem::path *a2, std::error_code *a3, std::__fs::filesystem::directory_options a4)
{
  return (std::__fs::filesystem::directory_iterator *)MEMORY[0x1E0DE49F8](this, a2, a3, a4);
}

BOOL std::__fs::filesystem::__remove(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return MEMORY[0x1E0DE4A38](a1, __ec);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x1E0DE4A48](a1, __ec);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1E0DE4A78](__str, __idx, *(_QWORD *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

uint64_t std::__sort<std::__less<long long,long long> &,long long *>()
{
  return MEMORY[0x1E0DE4B28]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1E0DE4B38]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1E0DE4B48]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D78](retstr, __val);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E6E287E8();
}

void operator delete(void *__p)
{
  off_1E6E287F0(__p);
}

uint64_t operator delete()
{
  return off_1E6E287F8();
}

uint64_t operator new[]()
{
  return off_1E6E28800();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E6E28808(__sz);
}

uint64_t operator new()
{
  return off_1E6E28810();
}

uint64_t __MDPlistBytesAddObject()
{
  return MEMORY[0x1E0D4DCE0]();
}

uint64_t __MDPlistBytesAddUInt64Array()
{
  return MEMORY[0x1E0D4DCE8]();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

uint64_t __memset_chk()
{
  return MEMORY[0x1E0C80B78]();
}

uint64_t __mmap()
{
  return MEMORY[0x1E0C80B80]();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x1E0C80BE8](a1, *(_QWORD *)&a2, a3, a4);
}

uint64_t __strcat_chk()
{
  return MEMORY[0x1E0C80C30]();
}

uint64_t __strcpy_chk()
{
  return MEMORY[0x1E0C80C38]();
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1E0C80C40]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

uint64_t __strncpy_chk()
{
  return MEMORY[0x1E0C80C58]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

void _exit(int a1)
{
  MEMORY[0x1E0C80F80](*(_QWORD *)&a1);
}

uint64_t _icu_locale_create()
{
  return MEMORY[0x1E0D4DD28]();
}

void _longjmp(jmp_buf a1, int a2)
{
  MEMORY[0x1E0C80FB0](a1, *(_QWORD *)&a2);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

int _setjmp(jmp_buf a1)
{
  return MEMORY[0x1E0C811A8](a1);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

uLong adler32(uLong adler, const Bytef *buf, uInt len)
{
  return MEMORY[0x1E0DE9290](adler, buf, *(_QWORD *)&len);
}

uint64_t analytics_send_event()
{
  return MEMORY[0x1E0D15468]();
}

uint64_t analytics_send_event_lazy()
{
  return MEMORY[0x1E0D15470]();
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  MEMORY[0x1E0C81580](__buf, __nbytes);
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1E0C81608](a1, a2);
}

int atoi(const char *a1)
{
  return MEMORY[0x1E0C81668](a1);
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x1E0C81678](a1);
}

uint64_t atoll(const char *a1)
{
  return MEMORY[0x1E0C81688](a1);
}

int bcmp(const void *a1, const void *a2, size_t a3)
{
  return MEMORY[0x1E0C816E8](a1, a2, a3);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1E0C81738](__key, __base, __nel, __width, __compar);
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1E0C81740](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int cache_create(const char *name, const cache_attributes_t *attrs, cache_t **cache_out)
{
  return MEMORY[0x1E0C81770](name, attrs, cache_out);
}

int cache_get_and_retain(cache_t *cache, void *key, void **value_out)
{
  return MEMORY[0x1E0C81788](cache, key, value_out);
}

uint64_t cache_get_info_for_key()
{
  return MEMORY[0x1E0C817A0]();
}

uint64_t cache_get_info_for_keys()
{
  return MEMORY[0x1E0C817A8]();
}

int cache_release_value(cache_t *cache, void *value)
{
  return MEMORY[0x1E0C817D8](cache, value);
}

int cache_remove(cache_t *cache, void *key)
{
  return MEMORY[0x1E0C817E0](cache, key);
}

int cache_remove_all(cache_t *cache)
{
  return MEMORY[0x1E0C817E8](cache);
}

int cache_set_and_retain(cache_t *cache, void *key, void *value, cache_cost_t cost)
{
  return MEMORY[0x1E0C817F8](cache, key, value, cost);
}

uint64_t cache_set_cost_hint()
{
  return MEMORY[0x1E0C81800]();
}

uint64_t change_fdguard_np()
{
  return MEMORY[0x1E0C82620]();
}

clock_t clock(void)
{
  return MEMORY[0x1E0C82650]();
}

int clock_gettime(clockid_t __clock_id, timespec *__tp)
{
  return MEMORY[0x1E0C82668](*(_QWORD *)&__clock_id, __tp);
}

__uint64_t clock_gettime_nsec_np(clockid_t __clock_id)
{
  return MEMORY[0x1E0C82670](*(_QWORD *)&__clock_id);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1E0C82698](a1);
}

int compress2(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level)
{
  return MEMORY[0x1E0DE92A0](dest, destLen, source, sourceLen, *(_QWORD *)&level);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5270](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(_QWORD *)&algorithm);
}

size_t compression_decode_scratch_buffer_size(compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5278](*(_QWORD *)&algorithm);
}

size_t compression_encode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5280](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(_QWORD *)&algorithm);
}

size_t compression_encode_scratch_buffer_size(compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE5288](*(_QWORD *)&algorithm);
}

compression_status compression_stream_destroy(compression_stream *stream)
{
  return MEMORY[0x1E0DE5290](stream);
}

compression_status compression_stream_init(compression_stream *stream, compression_stream_operation operation, compression_algorithm algorithm)
{
  return MEMORY[0x1E0DE52A0](stream, *(_QWORD *)&operation, *(_QWORD *)&algorithm);
}

compression_status compression_stream_process(compression_stream *stream, int flags)
{
  return MEMORY[0x1E0DE52B0](stream, *(_QWORD *)&flags);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return MEMORY[0x1E0C826D0](*(_QWORD *)&a1, a2, a3);
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1E0C82B18](from, to, state, *(_QWORD *)&flags);
}

void dispatch_activate(dispatch_object_t object)
{
  MEMORY[0x1E0C82BC0](object);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block)
{
  MEMORY[0x1E0C82BD8](iterations, queue, block);
}

void dispatch_apply_f(size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t))
{
  MEMORY[0x1E0C82BE0](iterations, queue, context, work);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BF8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

uint64_t dispatch_async_enforce_qos_class_f()
{
  return MEMORY[0x1E0C82C10]();
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C28](queue, block);
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82C40](queue, context, work);
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C48](queue, block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C60](flags, block);
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1E0C82C68](flags, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority, block);
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82CF8]();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

void dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
  MEMORY[0x1E0C82D18](group, queue, context, work);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E20](attr);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

uint64_t dispatch_queue_attr_make_with_overcommit()
{
  return MEMORY[0x1E0C82E30]();
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E50](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1E0C82E58](queue);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x1E0C82E80](queue, key, context, destructor);
}

uint64_t dispatch_queue_set_width()
{
  return MEMORY[0x1E0C82E88]();
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

void dispatch_retain(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA8](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_suspend(dispatch_object_t object)
{
  MEMORY[0x1E0C82F88](object);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FD8](label);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1E0C82FE0](label);
}

void dispatch_workloop_set_autorelease_frequency(dispatch_workloop_t workloop, dispatch_autorelease_frequency_t frequency)
{
  MEMORY[0x1E0C82FF0](workloop, frequency);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

int dprintf(int a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83068](*(_QWORD *)&a1, a2);
}

int dup(int a1)
{
  return MEMORY[0x1E0C83078](*(_QWORD *)&a1);
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

int fchmodat(int a1, const char *a2, mode_t a3, int a4)
{
  return MEMORY[0x1E0C832D8](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

DIR *__cdecl fdopendir(int a1)
{
  return (DIR *)MEMORY[0x1E0C83320](*(_QWORD *)&a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1E0C83378](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int fgetattrlist(int a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1E0C83380](*(_QWORD *)&a1, a2, a3, a4, *(_QWORD *)&a5);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1E0C833A0](a1, *(_QWORD *)&a2, a3);
}

ssize_t fgetxattr(int fd, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C833A8](*(_QWORD *)&fd, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

int flock(int a1, int a2)
{
  return MEMORY[0x1E0C83400](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

const char *__cdecl fmtcheck(const char *a1, const char *a2)
{
  return (const char *)MEMORY[0x1E0C83450](a1, a2);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fscanf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83520](a1, a2);
}

int fsetxattr(int fd, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C83548](*(_QWORD *)&fd, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

ssize_t fsgetpath(char *a1, size_t a2, fsid_t *a3, uint64_t a4)
{
  return MEMORY[0x1E0C83550](a1, a2, a3, a4);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

int fstatat(int a1, const char *a2, stat *a3, int a4)
{
  return MEMORY[0x1E0C83568](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1E0C83570](*(_QWORD *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x1E0C83578](*(_QWORD *)&a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1E0C83590](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1E0C83610](a1, a2, a3, a4, *(_QWORD *)&a5);
}

int getattrlistbulk(int a1, void *a2, void *a3, size_t a4, uint64_t a5)
{
  return MEMORY[0x1E0C83620](*(_QWORD *)&a1, a2, a3, a4, a5);
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x1E0C83648](a1, a2);
}

uid_t geteuid(void)
{
  return MEMORY[0x1E0C83668]();
}

int getiopolicy_np(int a1, int a2)
{
  return MEMORY[0x1E0C836D0](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

int getrlimit(int a1, rlimit *a2)
{
  return MEMORY[0x1E0C837B8](*(_QWORD *)&a1, a2);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1E0C83820](a1, a2);
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C83840](path, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

uint64_t guarded_close_np()
{
  return MEMORY[0x1E0C83868]();
}

uint64_t guarded_pwrite_np()
{
  return MEMORY[0x1E0C83880]();
}

uint64_t guarded_write_np()
{
  return MEMORY[0x1E0C83888]();
}

int heapsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  return MEMORY[0x1E0C83890](__base, __nel, __width, __compar);
}

kern_return_t host_info(host_t host, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x1E0C838B8](*(_QWORD *)&host, *(_QWORD *)&flavor, host_info_out, host_info_outCnt);
}

uint64_t icu_ctx_release()
{
  return MEMORY[0x1E0D4DD30]();
}

uint64_t icu_ctx_retain()
{
  return MEMORY[0x1E0D4DD38]();
}

uint64_t icu_local_id()
{
  return MEMORY[0x1E0D4DD40]();
}

uint64_t icu_locale_create()
{
  return MEMORY[0x1E0D4DD48]();
}

uint64_t icu_locale_get_collation()
{
  return MEMORY[0x1E0D4DD50]();
}

uint64_t icu_locale_get_rules()
{
  return MEMORY[0x1E0D4DD58]();
}

uint64_t icu_locale_release()
{
  return MEMORY[0x1E0D4DD60]();
}

uint64_t icu_locale_retain()
{
  return MEMORY[0x1E0D4DD68]();
}

uint64_t icu_range_search_create()
{
  return MEMORY[0x1E0D4DD70]();
}

uint64_t icu_range_search_next_match()
{
  return MEMORY[0x1E0D4DD78]();
}

uint64_t icu_range_search_set_text()
{
  return MEMORY[0x1E0D4DD80]();
}

uint64_t icu_range_search_set_uchar_text()
{
  return MEMORY[0x1E0D4DD88]();
}

uint64_t icu_regex_copy()
{
  return MEMORY[0x1E0D4DD90]();
}

uint64_t icu_regex_create()
{
  return MEMORY[0x1E0D4DD98]();
}

uint64_t icu_regex_find()
{
  return MEMORY[0x1E0D4DDA0]();
}

uint64_t icu_rules_clear_cache()
{
  return MEMORY[0x1E0D4DDA8]();
}

uint64_t icu_rules_set_cache_fd()
{
  return MEMORY[0x1E0D4DDB0]();
}

uint64_t icu_search_context_create()
{
  return MEMORY[0x1E0D4DDB8]();
}

uint64_t icu_search_context_create_raw()
{
  return MEMORY[0x1E0D4DDC0]();
}

uint64_t icu_search_context_create_with_wildcard_limit()
{
  return MEMORY[0x1E0D4DDC8]();
}

uint64_t icu_search_context_is_fuzzy()
{
  return MEMORY[0x1E0D4DDD0]();
}

uint64_t icu_search_context_is_prefix()
{
  return MEMORY[0x1E0D4DDD8]();
}

uint64_t icu_search_context_item_get_info()
{
  return MEMORY[0x1E0D4DDE0]();
}

uint64_t icu_search_context_item_get_item_count()
{
  return MEMORY[0x1E0D4DDE8]();
}

uint64_t icu_search_match()
{
  return MEMORY[0x1E0D4DDF0]();
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

int link(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C83B70](a1, a2);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1E0C83BA8](a1);
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1E0C83C38](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

void mach_error(const char *str, mach_error_t error_value)
{
  MEMORY[0x1E0C83C78](str, *(_QWORD *)&error_value);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1E0C83C80](*(_QWORD *)&error_value);
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1E0C83C90]();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1E0C83CB0](msg, *(_QWORD *)&option, *(_QWORD *)&send_size, *(_QWORD *)&rcv_size, *(_QWORD *)&rcv_name, *(_QWORD *)&timeout, *(_QWORD *)&notify);
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1E0C83CE0](*(_QWORD *)&task, *(_QWORD *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1E0C83CF8](*(_QWORD *)&task, *(_QWORD *)&name);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1E0C83D48](*(_QWORD *)&task, *(_QWORD *)&name, *(_QWORD *)&poly, *(_QWORD *)&polyPoly);
}

mach_port_t mach_thread_self(void)
{
  return MEMORY[0x1E0C83DB0]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C83E60](a1, a2, *(_QWORD *)&a3);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E78](start_size, *(_QWORD *)&flags);
}

malloc_zone_t *malloc_default_purgeable_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E80]();
}

malloc_zone_t *malloc_default_zone(void)
{
  return (malloc_zone_t *)MEMORY[0x1E0C83E88]();
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x1E0C83EB0](size);
}

int malloc_make_nonpurgeable(void *ptr)
{
  return MEMORY[0x1E0C83EC0](ptr);
}

void malloc_make_purgeable(void *ptr)
{
  MEMORY[0x1E0C83EC8](ptr);
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
  MEMORY[0x1E0C83ED8](zone, name);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl malloc_type_valloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F18](size, type_id);
}

void *__cdecl malloc_type_zone_calloc(malloc_zone_t *zone, size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F20](zone, count, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F28](zone, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F40](zone, ptr, size, type_id);
}

void *__cdecl malloc_type_zone_valloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F48](zone, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
  MEMORY[0x1E0C83F70](zone, ptr);
}

uint64_t md_deadline_once_cancel()
{
  return MEMORY[0x1E0D4DDF8]();
}

uint64_t md_deadline_once_create()
{
  return MEMORY[0x1E0D4DE00]();
}

uint64_t md_deadline_once_release()
{
  return MEMORY[0x1E0D4DE08]();
}

uint64_t md_deadline_once_run_block_with_lock()
{
  return MEMORY[0x1E0D4DE10]();
}

uint64_t md_deadline_once_start()
{
  return MEMORY[0x1E0D4DE18]();
}

uint64_t md_deadline_once_wait()
{
  return MEMORY[0x1E0D4DE20]();
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

int mergesort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return MEMORY[0x1E0C840D8](__base, __nel, __width, __compar);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C84160](a1, a2);
}

int mkstempsat_np(int dfd, char *path, int slen)
{
  return MEMORY[0x1E0C841B8](*(_QWORD *)&dfd, path, *(_QWORD *)&slen);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C841F0](a1, a2, *(_QWORD *)&a3);
}

int msync(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1E0C84210](a1, a2, *(_QWORD *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1E0C84488](a1, *(_QWORD *)&a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

int openat(int a1, const char *a2, int a3, ...)
{
  return MEMORY[0x1E0C844A0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1E0C844C0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

void os_release(void *object)
{
  MEMORY[0x1E0C84910](object);
}

void *__cdecl os_retain(void *object)
{
  return (void *)MEMORY[0x1E0C84918](object);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

void perror(const char *a1)
{
  MEMORY[0x1E0C84AF0](a1);
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1E0C84BC8](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

uint64_t proc_get_cpumon_params()
{
  return MEMORY[0x1E0C84BF0]();
}

uint64_t proc_set_cpumon_defaults()
{
  return MEMORY[0x1E0C84C70]();
}

uint64_t proc_set_cpumon_params()
{
  return MEMORY[0x1E0C84C78]();
}

void psort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84C98](__base, __nel, __width, __compar);
}

void psort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  MEMORY[0x1E0C84CA0](__base, __nel, __width, __compar);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CB0](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1E0C84CC8](a1);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D18](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_timedwait(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1E0C84D38](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1E0C84D50](a1, a2, a3, a4);
}

uint64_t pthread_fchdir_np()
{
  return MEMORY[0x1E0C84D90]();
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_getugid_np(uid_t *a1, gid_t *a2)
{
  return MEMORY[0x1E0C84DC8](a1, a2);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1E0C84DD8](a1, a2);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

int pthread_key_delete(pthread_key_t a1)
{
  return MEMORY[0x1E0C84DE8](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E30](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E40](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1E0C84E48](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

int pthread_override_qos_class_end_np(pthread_override_t __override)
{
  return MEMORY[0x1E0C84E70](__override);
}

pthread_override_t pthread_override_qos_class_start_np(pthread_t __pthread, qos_class_t __qos_class, int __relative_priority)
{
  return (pthread_override_t)MEMORY[0x1E0C84E78](__pthread, *(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

uint64_t pthread_qos_max_parallelism()
{
  return MEMORY[0x1E0C84E88]();
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84E90](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1E0C84E98](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EA0](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EB8](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1E0C84EC0](a1);
}

int pthread_rwlockattr_destroy(pthread_rwlockattr_t *a1)
{
  return MEMORY[0x1E0C84EC8](a1);
}

int pthread_rwlockattr_init(pthread_rwlockattr_t *a1)
{
  return MEMORY[0x1E0C84ED0](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1E0C84EF0](*(_QWORD *)&__qos_class, *(_QWORD *)&__relative_priority);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

int pthread_setugid_np(uid_t a1, gid_t a2)
{
  return MEMORY[0x1E0C84F20](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1E0C84F68](*(_QWORD *)&__fd, __buf, __nbyte, a4);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1E0C84F80]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  MEMORY[0x1E0C84F88](__base, __nel, __width, __compar);
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  MEMORY[0x1E0C84F90](__base, __nel, __width, __compar);
}

void qsort_r(void *__base, size_t __nel, size_t __width, void *a4, int (__cdecl *__compar)(void *, const void *, const void *))
{
  MEMORY[0x1E0C84F98](__base, __nel, __width, a4, __compar);
}

uint64_t queryCompressionInfo()
{
  return MEMORY[0x1E0CFCEA8]();
}

int rand(void)
{
  return MEMORY[0x1E0C84FB0]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

dirent *__cdecl readdir(DIR *a1)
{
  return (dirent *)MEMORY[0x1E0C85008](a1);
}

int readdir_r(DIR *a1, dirent *a2, dirent **a3)
{
  return MEMORY[0x1E0C85010](a1, a2, a3);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1E0C85030](__ptr, __size);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
  MEMORY[0x1E0C85100](__from, __to, __ec);
}

int renameat(int a1, const char *a2, int a3, const char *a4)
{
  return MEMORY[0x1E0C85108](*(_QWORD *)&a1, a2, *(_QWORD *)&a3, a4);
}

int renameatx_np(int a1, const char *a2, int a3, const char *a4, unsigned int a5)
{
  return MEMORY[0x1E0C85110](*(_QWORD *)&a1, a2, *(_QWORD *)&a3, a4, *(_QWORD *)&a5);
}

char *__cdecl rindex(const char *a1, int a2)
{
  return (char *)MEMORY[0x1E0C85130](a1, *(_QWORD *)&a2);
}

int rmdir(const char *a1)
{
  return MEMORY[0x1E0C85138](a1);
}

int searchfs(const char *a1, fssearchblock *a2, unint64_t *a3, unsigned int a4, unsigned int a5, searchstate *a6)
{
  return MEMORY[0x1E0C85278](a1, a2, a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int setiopolicy_np(int a1, int a2, int a3)
{
  return MEMORY[0x1E0C85340](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x1E0C853A0](path, name, value, size, *(_QWORD *)&position, *(_QWORD *)&options);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85460](a1, a2);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1E0C854E0](a1, a2);
}

uint64_t strFromUTF8()
{
  return MEMORY[0x1E0D4DE30]();
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1E0C85500](a1, a2);
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1E0C85508](__big, __little);
}

char *__cdecl strcat(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85510](__s1, __s2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1E0C85530](__dst, __src);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1E0C85558](a1, a2, a3, a4);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85568](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1E0C85590](a1, a2, a3);
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  return (char *)MEMORY[0x1E0C855A0](__s1, __s2, __n);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B8](__s1, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C855E8](__s, *(_QWORD *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85610](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

float strtof(const char *a1, char **a2)
{
  float result;

  MEMORY[0x1E0C85628](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85678](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C856A8](__str, __endptr, *(_QWORD *)&__base);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

kern_return_t task_threads(task_inspect_t target_task, thread_act_array_t *act_list, mach_msg_type_number_t *act_listCnt)
{
  return MEMORY[0x1E0C858A0](*(_QWORD *)&target_task, act_list, act_listCnt);
}

kern_return_t thread_get_exception_ports(thread_act_t thread, exception_mask_t exception_mask, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors)
{
  return MEMORY[0x1E0C858E8](*(_QWORD *)&thread, *(_QWORD *)&exception_mask, masks, masksCnt, old_handlers, old_behaviors, old_flavors);
}

kern_return_t thread_get_state(thread_read_t target_act, thread_state_flavor_t flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt)
{
  return MEMORY[0x1E0C858F0](*(_QWORD *)&target_act, *(_QWORD *)&flavor, old_state, old_stateCnt);
}

kern_return_t thread_info(thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return MEMORY[0x1E0C858F8](*(_QWORD *)&target_act, *(_QWORD *)&flavor, thread_info_out, thread_info_outCnt);
}

kern_return_t thread_resume(thread_read_t target_act)
{
  return MEMORY[0x1E0C85910](*(_QWORD *)&target_act);
}

kern_return_t thread_set_exception_ports(thread_act_t thread, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor)
{
  return MEMORY[0x1E0C85920](*(_QWORD *)&thread, *(_QWORD *)&exception_mask, *(_QWORD *)&new_port, *(_QWORD *)&behavior, *(_QWORD *)&new_flavor);
}

kern_return_t thread_set_state(thread_act_t target_act, thread_state_flavor_t flavor, thread_state_t new_state, mach_msg_type_number_t new_stateCnt)
{
  return MEMORY[0x1E0C85928](*(_QWORD *)&target_act, *(_QWORD *)&flavor, new_state, *(_QWORD *)&new_stateCnt);
}

kern_return_t thread_suspend(thread_read_t target_act)
{
  return MEMORY[0x1E0C85940](*(_QWORD *)&target_act);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1E0DE5978](*(_QWORD *)&c);
}

UBool u_isUWhiteSpace(UChar32 c)
{
  return MEMORY[0x1E0DE5A08](*(_QWORD *)&c);
}

UBool u_ispunct(UChar32 c)
{
  return MEMORY[0x1E0DE5A48](*(_QWORD *)&c);
}

UChar *__cdecl u_strFromUTF8(UChar *dest, int32_t destCapacity, int32_t *pDestLength, const char *src, int32_t srcLength, UErrorCode *pErrorCode)
{
  return (UChar *)MEMORY[0x1E0DE5AA0](dest, *(_QWORD *)&destCapacity, pDestLength, src, *(_QWORD *)&srcLength, pErrorCode);
}

int32_t u_strToLower(UChar *dest, int32_t destCapacity, const UChar *src, int32_t srcLength, const char *locale, UErrorCode *pErrorCode)
{
  return MEMORY[0x1E0DE5AB0](dest, *(_QWORD *)&destCapacity, src, *(_QWORD *)&srcLength, locale, pErrorCode);
}

int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x1E0DE93F8](dest, destLen, source, sourceLen);
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

int unlinkat(int a1, const char *a2, int a3)
{
  return MEMORY[0x1E0C859C0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uint64_t unorm2_getNFCInstance()
{
  return MEMORY[0x1E0DE64D0]();
}

uint64_t unorm2_normalize()
{
  return MEMORY[0x1E0DE64F8]();
}

uint64_t unorm2_quickCheck()
{
  return MEMORY[0x1E0DE6508]();
}

uint64_t usearch_close()
{
  return MEMORY[0x1E0DE68C8]();
}

uint64_t usearch_first()
{
  return MEMORY[0x1E0DE68D0]();
}

uint64_t usearch_getMatchedLength()
{
  return MEMORY[0x1E0DE68E0]();
}

uint64_t usearch_openFromCollator()
{
  return MEMORY[0x1E0DE6900]();
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1E0C859E0](*(_QWORD *)&a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1E0C85A08](uu1, uu2);
}

void uuid_generate_random(uuid_t out)
{
  MEMORY[0x1E0C85A20](out);
}

void vDSP_distancesq(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x1E0C8C0B0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_vavlin(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x1E0C8C3D0](__A, __IA, __B, __C, __IC, __N);
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A58](a1, a2, a3);
}

kern_return_t vm_copy(vm_map_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address)
{
  return MEMORY[0x1E0C85A90](*(_QWORD *)&target_task, source_address, size, dest_address);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return MEMORY[0x1E0C85D40](*(_QWORD *)&__fd, __buf, __nbyte);
}

ssize_t writev(int a1, const iovec *a2, int a3)
{
  return MEMORY[0x1E0C85D48](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85D90](activity);
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1E0C85DB8](activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85DC8](activity);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1E0C85EF0](value);
}

void xpc_connection_activate(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F50](connection);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
  MEMORY[0x1E0C85F68](connection);
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1E0C85FB0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
  MEMORY[0x1E0C86018](connection);
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
  MEMORY[0x1E0C86030](connection, message);
}

void xpc_connection_send_message_with_reply(xpc_connection_t connection, xpc_object_t message, dispatch_queue_t replyq, xpc_handler_t handler)
{
  MEMORY[0x1E0C86038](connection, message, replyq, handler);
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
  MEMORY[0x1E0C86080](connection, handler);
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
  MEMORY[0x1E0C860C8](connection, targetq);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x1E0C86218]();
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1E0C86228](original);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862A0](xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1E0C862B0](xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x1E0C862C8](xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x1E0C862D0](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
  MEMORY[0x1E0C86348](xdict, key, value);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

void xpc_dictionary_set_uint64(xpc_object_t xdict, const char *key, uint64_t value)
{
  MEMORY[0x1E0C86398](xdict, key, value);
}

xpc_object_t xpc_double_create(double value)
{
  return (xpc_object_t)MEMORY[0x1E0C863D0](value);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1E0C86520](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C86568](value);
}

void xpc_release(xpc_object_t object)
{
  MEMORY[0x1E0C86658](object);
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1E0C86660](object);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1E0C86720](string);
}

const char *__cdecl xpc_type_get_name(xpc_type_t type)
{
  return (const char *)MEMORY[0x1E0C867A0](type);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1E0C867B0](value);
}

