uint64_t __si_scheduler_set_thread_block_invoke(uint64_t result)
{
  *(_QWORD *)(*(_QWORD *)(result + 32) + 56) = *(_QWORD *)(result + 40);
  return result;
}

BOOL cStringEqualCallback(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t compare_node_cost(uint64_t a1, uint64_t a2)
{
  return (*(_DWORD *)(*(_QWORD *)a1 + 8) - *(_DWORD *)(*(_QWORD *)a2 + 8));
}

void __enqueue_work_with_qos_block_invoke(uint64_t a1)
{
  work_fun(*(char **)(a1 + 32));
}

uint64_t PropertyIdKeyHash(int a1)
{
  return a1 & 0x3FFFFFF;
}

void __si_enqueue_work_with_qos_block_invoke(uint64_t a1)
{
  si_enqueue_work_inner_with_qos(*(_QWORD *)(a1 + 32), *(uint64_t **)(a1 + 40), *(qos_class_t *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

double __CIIndexSetInit(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void SISearchCtx::~SISearchCtx(SISearchCtx *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  char **v10;
  uint64_t i;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t j;
  const void *v19;
  unsigned __int16 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  *(_QWORD *)this = off_1E6E29FF0;
  os_unfair_lock_lock((os_unfair_lock_t)&sActiveCtxLock);
  if (activeCtxs)
    CFSetRemoveValue((CFMutableSetRef)activeCtxs, this);
  os_unfair_lock_unlock((os_unfair_lock_t)&sActiveCtxLock);
  v2 = (const void *)*((_QWORD *)this + 11);
  if (v2)
    CFRelease(v2);
  *((_QWORD *)this + 11) = 0;
  v3 = (const void *)*((_QWORD *)this + 4);
  if (v3)
    CFRelease(v3);
  *((_QWORD *)this + 4) = 0;
  v4 = (const void *)*((_QWORD *)this + 7);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 7) = 0;
  v5 = (const void *)*((_QWORD *)this + 8);
  if (v5)
    CFRelease(v5);
  *((_QWORD *)this + 8) = 0;
  v6 = (const void *)*((_QWORD *)this + 27);
  if (v6)
    CFRelease(v6);
  *((_QWORD *)this + 27) = 0;
  v7 = (const void *)*((_QWORD *)this + 2);
  if (v7)
    CFRelease(v7);
  *((_QWORD *)this + 2) = 0;
  SICompletionModelRelease(*((unsigned int **)this + 32));
  SIPommesSuggestionsModelRelease(*((_QWORD **)this + 35));
  free(*((void **)this + 33));
  v8 = (const void *)*((_QWORD *)this + 9);
  if (v8)
    CFRelease(v8);
  *((_QWORD *)this + 9) = 0;
  siquerynode_release(*((int **)this + 14));
  siquerynode_release(*((int **)this + 15));
  v9 = (const void *)*((_QWORD *)this + 26);
  if (v9)
    CFRelease(v9);
  *((_QWORD *)this + 26) = 0;
  v10 = (char **)*((_QWORD *)this + 18);
  if (v10)
    db_release_files(v10);
  for (i = 312; i != 352; i += 8)
  {
    v12 = *(unsigned int **)((char *)this + i);
    *(_QWORD *)((char *)this + i) = 0;
    si_scheduler_resume_with_token(v12);
  }
  if (*((uint64_t *)this + 29) >= 1)
  {
    v13 = 0;
    do
      db_free_query_node(*(_QWORD **)(*((_QWORD *)this + 28) + 8 * v13++));
    while (v13 < *((_QWORD *)this + 29));
  }
  free(*((void **)this + 28));
  v14 = *((_QWORD *)this + 34);
  if (v14)
  {
    if (*(_QWORD *)(v14 + 32))
    {
      v15 = 0;
      do
        free(*(void **)(*(_QWORD *)(v14 + 40) + 8 * v15++));
      while (v15 < *(_QWORD *)(v14 + 32));
    }
    free(*(void **)(v14 + 40));
    free(*(void **)(v14 + 8));
    free(*(void **)(v14 + 16));
    if (*(_QWORD *)(v14 + 48))
      icu_ctx_release();
    if (*(_QWORD *)(v14 + 56))
      icu_ctx_release();
    if (*(_QWORD *)(v14 + 64))
      icu_ctx_release();
    if (*(_QWORD *)(v14 + 72))
      icu_ctx_release();
    v16 = *(void **)(v14 + 80);
    if (v16)
    {
      v17 = *(_QWORD *)(v14 + 32);
      if (v17)
      {
        for (j = 0; j < v17; ++j)
        {
          if (*(_QWORD *)(*(_QWORD *)(v14 + 80) + 8 * j))
          {
            icu_ctx_release();
            v17 = *(_QWORD *)(v14 + 32);
          }
        }
        v16 = *(void **)(v14 + 80);
      }
      free(v16);
    }
    v19 = *(const void **)(v14 + 88);
    if (v19)
      CFRelease(v19);
  }
  free(*((void **)this + 34));
  si_querypipe_release(*((_QWORD *)this + 13));
  v20 = (unsigned __int16 *)*((_QWORD *)this + 44);
  if (v20)
  {
    if (v20[2])
    {
      v21 = 0;
      v22 = 4;
      do
      {
        free(*(void **)&v20[v22]);
        ++v21;
        v20 = (unsigned __int16 *)*((_QWORD *)this + 44);
        v22 += 12;
      }
      while (v21 < v20[2]);
    }
    free(v20);
  }
  md_deadline_once_cancel();
  md_deadline_once_release();
  v23 = *((_QWORD *)this + 1);
  v24 = (unsigned int *)(v23 + 584);
  do
  {
    v25 = __ldaxr(v24);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v24));
  if (!v26)
    si_query_free(v23);
}

void siquerynode_release(int *a1)
{
  int v2;
  uint64_t v3;

  if (a1)
  {
    v2 = *a1;
    if (*a1 < 2)
    {
      if (*((uint64_t *)a1 + 3) >= 1)
      {
        v3 = 0;
        do
          siquerynode_release(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8 * v3++));
        while (*((_QWORD *)a1 + 3) > v3);
      }
      free(*((void **)a1 + 4));
    }
    else if (v2 == 2)
    {
      siquerynode_release(*((_QWORD *)a1 + 3));
    }
    else if (v2 == 3)
    {
      db_free_query_node(*((_QWORD **)a1 + 3));
    }
    free(a1);
  }
}

_QWORD *db_free_query_node(_QWORD *result)
{
  _QWORD v1[5];

  if (result)
  {
    v1[0] = MEMORY[0x1E0C809B0];
    v1[1] = 0x40000000;
    v1[2] = __db_query_tree_apply_block_block_invoke;
    v1[3] = &unk_1E6E377F8;
    v1[4] = &__block_literal_global_143;
    return (_QWORD *)db_query_tree_apply_block_with_meta(result, (uint64_t)v1, 0);
  }
  return result;
}

const UInt8 *data_map_get_data(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  int v3;
  char *v5;
  char *v6;
  const char *v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a1 + 216);
  if (v3 == -270471200)
    return data_map_ext_get_data(a1, a2, a3);
  if (v3 == 1684300900)
    return (const UInt8 *)data_map64_get_data(a1, a2, a3);
  if (v3 != 842150450)
  {
    v5 = __si_assert_copy_extra_268();
    v6 = v5;
    v7 = "";
    if (v5)
      v7 = v5;
    __message_assert("%s:%u: failed assertion '%s' %s ", "data_map.c", 332, "data_map_is_32(data_map)", v7);
    free(v6);
    if (__valid_fs(-1))
      v8 = 2989;
    else
      v8 = 3072;
    *(_DWORD *)v8 = -559038737;
    abort();
  }
  return (const UInt8 *)data_map32_get_data(a1, a2, a3);
}

uint64_t db_read_lock(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  _opaque_pthread_t *v6;
  char *v8;
  char *v9;
  const char *v10;
  uint64_t v11;

  v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  HIDWORD(v4) = qos_class_self() - 9;
  LODWORD(v4) = HIDWORD(v4);
  v3 = v4 >> 2;
  if (v3 > 6)
    v5 = 0;
  else
    v5 = dword_1B8630ED0[v3];
  v6 = *(_opaque_pthread_t **)(a1 + 184);
  if (v6 == pthread_self())
  {
    v8 = __si_assert_copy_extra_268();
    v9 = v8;
    v10 = "";
    if (v8)
      v10 = v8;
    __message_assert(v8, "sdb2_rwlock.c", 580, "lock->writer != pthread_self()", v10);
    free(v9);
    if (__valid_fs(-1))
      v11 = 2989;
    else
      v11 = 3072;
    *(_DWORD *)v11 = -559038737;
    abort();
  }
  if (db_rwlock_reader_excluded(a1, v5, 0))
    db_rwlock_wait(a1, v5, 4);
  else
    ++*(_DWORD *)(a1 + 196);
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v2;
}

BOOL db_rwlock_reader_excluded(uint64_t a1, int a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 184) && ((a3 & 1) != 0 || !*(_BYTE *)(a1 + 212))
    || *(_QWORD *)(a1 + 160) && *(_DWORD *)(a1 + 192) >= a2 && (a3 & 1) == 0 && !*(_DWORD *)(a1 + 200))
  {
    return 1;
  }
  if (!*(_DWORD *)(a1 + 196) && !*(_BYTE *)(a1 + 212))
    return 0;
  v3 = a2 <= 5 ? 5 : a2;
  v4 = (uint64_t *)(a1 + 16 * a2 + 80);
  v5 = v3 - a2 + 1;
  while (--v5)
  {
    v6 = *v4;
    v4 += 2;
    if (v6)
      return 1;
  }
  return *(_QWORD *)(a1 + 16 * a2 + 64) && !*(_DWORD *)(a1 + 200);
}

uint64_t db_rwlock_unlock_unknown(uint64_t a1)
{
  uint64_t v2;
  _opaque_pthread_t *v3;
  void *v4;
  int v5;
  pthread_override_s *v6;
  char v7;

  v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  v3 = *(_opaque_pthread_t **)(a1 + 184);
  if (v3 == pthread_self()
    || *(_QWORD *)(a1 + 184)
    && exc_pthread_key
    && ((v4 = pthread_getspecific(exc_pthread_key), v4 == (void *)-1) || v4 == *(void **)(a1 + 184)))
  {
    *(_DWORD *)(a1 + 204) = 0;
    v6 = *(pthread_override_s **)(a1 + 176);
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    v7 = *(_DWORD *)(a1 + 196) != 0;
    *(_BYTE *)(a1 + 212) = 0;
    db_rwlock_wakeup(a1, v7, 0);
    pthread_mutex_unlock((pthread_mutex_t *)a1);
    if (v6)
      pthread_override_qos_class_end_np(v6);
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 196) - 1;
    *(_DWORD *)(a1 + 196) = v5;
    if (!v5)
      db_rwlock_wakeup(a1, 0, 0);
    pthread_mutex_unlock((pthread_mutex_t *)a1);
  }
  return v2;
}

uint64_t db_rwlock_wakeup(uint64_t result, char a2, char a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  const char *v24;
  uint64_t v25;
  __int128 v26;

  v5 = result;
  v6 = 6;
  while (1)
  {
    v7 = v6 - 1;
    if ((uint64_t)(v6 - 1) <= *(int *)(v5 + 192))
    {
      result = *(_QWORD *)(v5 + 160);
      if (result)
      {
        if ((a2 & 1) == 0)
        {
          *(_BYTE *)(result + 52) = 1;
          *(_QWORD *)(v5 + 160) = 0;
          *(_DWORD *)(v5 + 192) = 0;
          *(_BYTE *)(v5 + 212) = 0;
          return pthread_cond_signal((pthread_cond_t *)result);
        }
        return result;
      }
    }
    v8 = (a2 & 1) != 0 || *(_BYTE *)(v5 + 212) != 0;
    v26 = 0uLL;
    v9 = v5 + 16 * v7;
    v12 = *(_QWORD *)(v9 + 64);
    v11 = (uint64_t *)(v9 + 64);
    v10 = v12;
    if (v12)
      break;
LABEL_38:
    if (v6-- <= 1)
      return result;
  }
  v13 = (_QWORD *)(v5 + 16 * v7 + 72);
  while (1)
  {
    v14 = *(_DWORD *)(v10 + 48);
    if (v14 < 3)
      break;
    if (v14 != 3)
    {
      if (v14 == 5 && ((a3 & 1) != 0 || *(_DWORD *)(v5 + 200)))
        goto LABEL_21;
      result = pthread_cond_signal((pthread_cond_t *)v10);
      v15 = *v11;
      if (*v11 != *v13)
      {
        *v11 = *(_QWORD *)(v15 + 64);
        goto LABEL_26;
      }
      *v11 = 0;
      v11[1] = 0;
      if (v15)
      {
LABEL_26:
        *(_BYTE *)(v15 + 52) = 1;
        --*(_DWORD *)(v5 + 208);
      }
      ++*(_DWORD *)(v5 + 196);
      if (*(_DWORD *)(v10 + 48) == 5)
        ++*(_DWORD *)(v5 + 200);
      goto LABEL_34;
    }
    if (*(_QWORD *)(v5 + 184))
    {
      if (!*(_QWORD *)(v10 + 56))
      {
        v22 = __si_assert_copy_extra_268();
        v23 = v22;
        v24 = "";
        if (v22)
          v24 = v22;
        __message_assert(v22, "sdb2_rwlock.c", 470, "waiter->threadid", v24);
        free(v23);
        if (__valid_fs(-1))
          v25 = 2989;
        else
          v25 = 3072;
        *(_DWORD *)v25 = -559038737;
        abort();
      }
      goto LABEL_21;
    }
    result = pthread_cond_signal((pthread_cond_t *)v10);
    v17 = *v11;
    if (*v11 != *v13)
    {
      *v11 = *(_QWORD *)(v17 + 64);
LABEL_32:
      *(_BYTE *)(v17 + 52) = 1;
      --*(_DWORD *)(v5 + 208);
      goto LABEL_33;
    }
    *v11 = 0;
    v11[1] = 0;
    if (v17)
      goto LABEL_32;
LABEL_33:
    *(_QWORD *)(v5 + 184) = *(_QWORD *)(v10 + 56);
    a3 = 1;
    *(_BYTE *)(v5 + 212) = 1;
LABEL_34:
    v8 = 1;
    a2 = 1;
LABEL_35:
    v10 = *v11;
    if (!*v11)
    {
      if ((_QWORD)v26)
        *(_OWORD *)v11 = v26;
      goto LABEL_38;
    }
  }
  if (*(_DWORD *)(v5 + 200) || *(_BYTE *)(v5 + 212))
  {
LABEL_21:
    if (v10 == *v13)
    {
      v16 = 0;
      *v13 = 0;
    }
    else
    {
      v16 = *(_QWORD *)(v10 + 64);
    }
    *v11 = v16;
    result = (uint64_t)db_rwlock_waiter_list_enqueue_inner(&v26, v10);
    goto LABEL_35;
  }
  if (!v8)
  {
    pthread_cond_signal((pthread_cond_t *)v10);
    v19 = *v11;
    if (*v11 != *v13)
    {
      v20 = *(_QWORD **)(v19 + 64);
      *v11 = (uint64_t)v20;
      goto LABEL_44;
    }
    v20 = 0;
    result = 0;
    *v11 = 0;
    v11[1] = 0;
    if (v19)
    {
LABEL_44:
      *(_BYTE *)(v19 + 52) = 1;
      --*(_DWORD *)(v5 + 208);
      result = (uint64_t)v20;
    }
    *(_QWORD *)(v5 + 184) = *(_QWORD *)(v10 + 56);
    v10 = result;
  }
  if ((_QWORD)v26)
  {
    if (v10)
    {
      v21 = v11[1];
      *(_OWORD *)v11 = v26;
      *(_QWORD *)(v11[1] + 64) = v10;
      v11[1] = v21;
    }
    else
    {
      *(_OWORD *)v11 = v26;
    }
  }
  return result;
}

unint64_t setThreadIdAndInfo(int a1, __int128 *a2, uint64_t a3, int a4, int a5)
{
  char *v10;
  char *v11;
  char *v12;
  void **v13;
  uint64_t v14;
  pthread_t v15;
  char *v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  char *v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  const char *v32;

  v10 = (char *)pthread_getspecific(__THREAD_SLOT_KEY);
  if (!v10)
  {
    v30 = __si_assert_copy_extra_268();
    v31 = v30;
    if (v30)
      v32 = v30;
    else
      v32 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "ContentIndexExceptionHandler.c", 1305, v32);
    free(v31);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  v11 = v10 - 1;
  ++*((_DWORD *)&threadList + 4 * (_QWORD)(v10 - 1) + 3);
  v12 = (char *)&threadData[18 * (_QWORD)(v10 - 1)];
  v14 = *((_QWORD *)v12 + 1);
  v13 = (void **)(v12 + 8);
  if (!v14)
  {
    threadData[18 * (_QWORD)v11 + 5] = 16;
    *v13 = malloc_type_malloc(0x1400uLL, 0x10800406452CBC3uLL);
  }
  v15 = pthread_self();
  v16 = (char *)&threadData[18 * (_QWORD)v11];
  v19 = *((_DWORD *)v16 + 4);
  v17 = v16 + 16;
  v18 = v19;
  *((_QWORD *)v17 + 3) = v15;
  if (v19 >= *((_DWORD *)v17 + 1))
  {
    v26 = __si_assert_copy_extra_268();
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1314, "td->itemCount < td->itemSize", v28);
    free(v27);
    if (__valid_fs(-1))
      v29 = 2989;
    else
      v29 = 3072;
    *(_DWORD *)v29 = -559038737;
    abort();
  }
  v20 = (uint64_t)*v13 + 320 * (int)v18;
  *(_DWORD *)(v20 + 296) = a1;
  *(_QWORD *)(v20 + 288) = a3;
  v21 = *a2;
  v22 = a2[1];
  v23 = a2[3];
  *(_OWORD *)(v20 + 256) = a2[2];
  *(_OWORD *)(v20 + 272) = v23;
  *(_OWORD *)(v20 + 224) = v21;
  *(_OWORD *)(v20 + 240) = v22;
  *(_DWORD *)(v20 + 212) = a4 & 0x7FFFFFFF;
  v24 = (char *)&threadData[18 * (_QWORD)v11];
  *(_DWORD *)(v20 + 300) = *((_DWORD *)v24 + 8);
  *(_DWORD *)(v20 + 304) = *((_DWORD *)v24 + 14);
  *(_DWORD *)(v20 + 308) = a5;
  *(_DWORD *)v17 = v18 + 1;
  return v11 | ((unint64_t)v18 << 32);
}

uint64_t dropThreadId(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(_QWORD);
  int v15;
  char *v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  unsigned int v20;
  char *v21;
  const char *v22;
  char *v23;
  const char *v24;

  v3 = result;
  v4 = &threadData[18 * result];
  v7 = v4[4];
  v6 = v4 + 4;
  v5 = v7;
  if (!v7)
  {
    v23 = __si_assert_copy_extra_268();
    v17 = v23;
    v24 = "";
    if (v23)
      v24 = v23;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1427, "td->itemCount", v24);
    goto LABEL_12;
  }
  if (!a2)
  {
    v20 = v5 - 1;
    *v6 = v20;
    --*((_DWORD *)&threadList + 4 * result + 3);
    if (*(_DWORD *)(*(_QWORD *)&threadData[18 * result + 2] + 320 * v20 + 308) == a3)
      return result;
    v21 = __si_assert_copy_extra_268();
    v17 = v21;
    v22 = "";
    if (v21)
      v22 = v21;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1449, "seqNum == td->items[td->itemCount].seqNum", v22);
LABEL_12:
    free(v17);
    if (__valid_fs(-1))
      v19 = 2989;
    else
      v19 = 3072;
    *(_DWORD *)v19 = -559038737;
    abort();
  }
  v9 = 0;
  v10 = &threadData[18 * result + 2];
  v11 = v5 & ~((int)v5 >> 31);
  v12 = 320 * v5;
  while (1)
  {
    if (v11 == v9)
      goto LABEL_19;
    v13 = *v10 + v12;
    v14 = *(uint64_t (**)(_QWORD))(v13 - 72);
    if (v14)
    {
      result = v14(*(_QWORD *)(v13 - 32));
      *(_QWORD *)(v13 - 72) = 0;
    }
    if ((*(_DWORD *)(v13 - 108) & 0x80000001) != 0)
      break;
    v15 = *(_DWORD *)(*v10 + v12 - 12);
    v12 -= 320;
    ++v9;
    if (v15 < a3)
    {
      v16 = __si_assert_copy_extra_268();
      v17 = v16;
      v18 = "";
      if (v16)
        v18 = v16;
      __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1442, "seqNum <= td->items[j].seqNum", v18);
      goto LABEL_12;
    }
  }
  v11 = v9 + 1;
LABEL_19:
  *v6 -= v11;
  *((_DWORD *)&threadList + 4 * v3 + 3) -= v11;
  return result;
}

void *makeThreadId()
{
  _QWORD *v0;
  void *result;
  char *v2;
  char *v3;
  uint64_t v4;
  thread_act_t v5;
  char *v6;
  kern_return_t exception_ports;
  char *v8;
  char *v9;
  int v10;
  NSObject *v11;
  uint64_t v12;
  mach_error_t v13;
  uint64_t v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  thread_act_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (makeThreadId_once != -1)
    dispatch_once(&makeThreadId_once, &__block_literal_global_5107);
  v0 = &unk_1EDBBE000;
  result = pthread_getspecific(__THREAD_SLOT_KEY);
  if (!result)
  {
    v2 = (char *)OSAtomicDequeue(&sAvailabeThreadEntries, 0);
    if (v2)
    {
      v3 = v2;
      if (*((_DWORD *)v2 + 3) != -1)
      {
        v9 = __si_assert_copy_extra_268();
        __message_assert("%s:%u: failed assertion '%s' %s invalid count %d");
        goto LABEL_22;
      }
      v4 = (v2 - (char *)&threadList) >> 4;
      v5 = MEMORY[0x1BCCB104C]();
      if (gSILogLevels[0] >= 5)
      {
        v10 = *__error();
        v11 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          v16 = (unint64_t)(v3 - (char *)&threadList) >> 4;
          v17 = 1024;
          v18 = v5;
          _os_log_impl(&dword_1B8270000, v11, OS_LOG_TYPE_DEFAULT, "Adding handler slot:%u port:%d", buf, 0xEu);
        }
        *__error() = v10;
        v0 = (_QWORD *)&unk_1EDBBE000;
        v4 = (v3 - (char *)&threadList) >> 4;
      }
      *((_DWORD *)v3 + 2) = v5;
      *((_DWORD *)v3 + 3) = 0;
      if (!pthread_setspecific(v0[30], (const void *)(v4 + 1)))
      {
        v6 = (char *)malloc_type_malloc(0x404uLL, 0x100004084B5CCE0uLL);
        *(_QWORD *)&threadData[18 * v4] = v6;
        bzero(v6 + 4, 0x400uLL);
        *(_DWORD *)v6 = 64;
        exception_ports = thread_get_exception_ports(v5, 0x22u, (exception_mask_array_t)v6 + 1, (mach_msg_type_number_t *)v6, (exception_handler_array_t)v6 + 65, (exception_behavior_array_t)v6 + 129, (exception_flavor_array_t)v6 + 193);
        if (!exception_ports)
        {
          exception_ports = thread_set_exception_ports(v5, 0x22u, _exceptionPort, -2147483644, 7);
          if (!exception_ports)
            return (void *)mach_port_deallocate(*MEMORY[0x1E0C83DA0], v5);
        }
        v13 = exception_ports;
        v9 = __si_assert_copy_extra_268();
        mach_error_string(v13);
        __message_assert("%s:%u: failed assertion '%s' %s %s");
LABEL_22:
        free(v9);
        if (__valid_fs(-1))
          v14 = 2989;
        else
          v14 = 3072;
        *(_DWORD *)v14 = -559038737;
        abort();
      }
      v8 = __si_assert_copy_extra_268();
      __message_assert("%s:%u: failed assertion '%s' %s ");
    }
    else
    {
      v8 = __si_assert_copy_extra_268();
      __message_assert("%s:%u: failed assertion '%s' %s Active handlers > MAX_CI_THREAD_COUNT");
    }
    free(v8);
    if (__valid_fs(-1))
      v12 = 2989;
    else
      v12 = 3072;
    *(_DWORD *)v12 = -559038737;
    abort();
  }
  return result;
}

uint64_t dm_hash(uint64_t a1, int a2)
{
  int v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;

  v2 = -1759636613;
  if (a2 >= 0)
    v3 = a2;
  else
    v3 = a2 + 3;
  v4 = (unsigned __int8 *)(a1 + (int)(v3 & 0xFFFFFFFC));
  if ((a2 + 3) >= 7)
  {
    v7 = -(v3 >> 2);
    v8 = -1789642873;
    v9 = 718793509;
    do
    {
      v8 = 5 * v8 + 2071795100;
      v9 = 5 * v9 + 1808688022;
      HIDWORD(v10) = v8 * *(_DWORD *)&v4[4 * v7];
      LODWORD(v10) = HIDWORD(v10);
      v11 = (v10 >> 21) * v9;
      HIDWORD(v10) = v2;
      LODWORD(v10) = v2;
      v2 = v11 ^ (5 * (v10 >> 19) + 1390208809);
    }
    while (!__CFADD__(v7++, 1));
    v6 = 5 * v8 + 2071795100;
    v5 = 5 * v9 + 1808688022;
  }
  else
  {
    v5 = 1107688271;
    v6 = 1713515327;
  }
  v13 = 0;
  v14 = a2 & 3;
  switch(v14)
  {
    case 1:
      goto LABEL_15;
    case 2:
LABEL_14:
      v13 |= v4[1] << 8;
LABEL_15:
      HIDWORD(v15) = (v13 ^ *v4) * v6;
      LODWORD(v15) = HIDWORD(v15);
      v16 = (v15 >> 21) * v5;
      HIDWORD(v15) = v2;
      LODWORD(v15) = v2;
      v2 = v16 ^ (5 * (v15 >> 19) + 1390208809);
      break;
    case 3:
      v13 = v4[2] << 16;
      goto LABEL_14;
  }
  v17 = -1028477387 * ((-2048144789 * (v2 ^ a2)) ^ ((-2048144789 * (v2 ^ a2)) >> 13));
  return v17 ^ HIWORD(v17);
}

uint64_t clone_query_piece(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char **v7;
  _QWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  size_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  const void *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  size_t v31;
  void *v32;
  const char *v33;
  _QWORD *v34;
  size_t v35;
  void *v36;
  const void *v37;
  size_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  NSObject *v45;
  os_log_type_t v46;
  int v48;
  uint8_t buf[16];

  if (*MEMORY[0x1E0C85AD8] <= 0x12FuLL)
    ++sTotal_10673;
  v2 = (char *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x130uLL, 0x31F9A007uLL);
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    return 0;
  }
  v3 = (uint64_t)v2;
  *((_QWORD *)v2 + 1) = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 24);
  *((_DWORD *)v2 + 6) = v4;
  v2[28] = *(_BYTE *)(a1 + 28);
  *((_QWORD *)v2 + 4) = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  *((_DWORD *)v2 + 12) = *(_DWORD *)(a1 + 48);
  *((_QWORD *)v2 + 5) = v5;
  *(_QWORD *)(v2 + 52) = *(_QWORD *)(a1 + 52);
  v6 = *(unsigned int *)(a1 + 60);
  *((_DWORD *)v2 + 15) = v6;
  *((_DWORD *)v2 + 40) = *(_DWORD *)(a1 + 160);
  v7 = (char **)(v2 + 168);
  v8 = (_QWORD *)(a1 + 168);
  v9 = *(_OWORD *)(a1 + 232);
  v10 = *(_OWORD *)(a1 + 248);
  v11 = *(_QWORD *)(a1 + 280);
  *(_OWORD *)(v2 + 264) = *(_OWORD *)(a1 + 264);
  v12 = *(_OWORD *)(a1 + 168);
  v13 = *(_OWORD *)(a1 + 184);
  v14 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(v2 + 216) = *(_OWORD *)(a1 + 216);
  *(_OWORD *)(v2 + 200) = v14;
  *(_OWORD *)(v2 + 184) = v13;
  *(_OWORD *)(v2 + 168) = v12;
  *(_OWORD *)(v2 + 248) = v10;
  *(_OWORD *)(v2 + 232) = v9;
  *((_QWORD *)v2 + 34) = 0;
  *((_QWORD *)v2 + 35) = v11;
  *((_QWORD *)v2 + 36) = 0;
  *((_QWORD *)v2 + 37) = 0;
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a1 + 64);
  if (v4 == 15)
  {
    v15 = v6 & 3;
    v16 = -1;
    if (v15 != 3)
    {
      v17 = (v6 >> 2) & 3;
      if ((_DWORD)v17 != 3)
        v16 = (vector_dimension_vec_sizes_10743[v15] * vector_size_elem_sizes_10742[v17]);
    }
    v18 = malloc_type_malloc(v16, 0xDAA7FEuLL);
    *(_QWORD *)(v3 + 296) = v18;
    v19 = *(const void **)(a1 + 296);
    if (!v19)
      goto LABEL_73;
    memcpy(v18, v19, v16);
  }
  v20 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v20 && *(_QWORD *)(a1 + 88))
  {
    v21 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 4 * v20, 0x6085D6BuLL);
    if (!v21)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      *(_QWORD *)(v3 + 88) = 0;
      goto LABEL_73;
    }
    *(_QWORD *)(v3 + 88) = v21;
    memcpy(v21, *(const void **)(a1 + 88), 4 * v20);
    *(_DWORD *)(v3 + 96) = v20;
  }
  v22 = *(_QWORD *)(a1 + 32);
  v48 = v5;
  if ((v22 & 0xC0000) != 0 && (v22 & 0x200) == 0 && (_DWORD)v5)
  {
    v23 = (_QWORD *)(v3 + 288);
    v24 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * (int)v5, 0x6085D6BuLL);
    if (v24)
    {
      *v23 = v24;
      v25 = *(const void **)(a1 + 288);
      if (v25)
      {
        memcpy(v24, v25, 8 * (int)v5);
        goto LABEL_20;
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      *v23 = 0;
    }
    v44 = *__error();
    v45 = _SILogForLogForCategory(1);
    v46 = 2 * (dword_1EF19FC90 < 4);
    if (os_log_type_enabled(v45, v46))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v45, v46, "clone_query_piece: ann data missing", buf, 2u);
    }
    *__error() = v44;
    goto LABEL_73;
  }
LABEL_20:
  if (!*v8)
    goto LABEL_30;
  v26 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * (int)v5, 0x6085D6BuLL);
  if (!v26)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    *v7 = 0;
LABEL_73:
    free_qp(v3);
    return 0;
  }
  v27 = v26;
  *v7 = v26;
  if ((int)v5 >= 1)
  {
    v28 = 0;
    v29 = MEMORY[0x1E0C81028];
    do
    {
      v30 = *(const char **)(*v8 + v28);
      v31 = strlen(v30);
      v32 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v31 + 1, 0x6085D6BuLL);
      if (!v32 && os_log_type_enabled(v29, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, v29, OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      memcpy(v32, v30, v31);
      *((_BYTE *)v32 + v31) = 0;
      *(_QWORD *)&v27[v28] = v32;
      v28 += 8;
    }
    while (8 * v48 != v28);
  }
LABEL_30:
  v33 = *(const char **)a1;
  v34 = (_QWORD *)MEMORY[0x1E0C85AD8];
  if (*(_QWORD *)a1)
  {
    v35 = strlen(*(const char **)a1);
    v36 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v35 + 1, 0x6085D6BuLL);
    if (!v36 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    memcpy(v36, v33, v35);
    *((_BYTE *)v36 + v35) = 0;
    *(_QWORD *)v3 = v36;
  }
  v37 = *(const void **)(a1 + 72);
  if (v37)
  {
    v38 = strlen(*(const char **)(a1 + 72));
    v39 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v38 + 1, 0x6085D6BuLL);
    if (!v39 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    memcpy(v39, v37, v38);
    *((_BYTE *)v39 + v38) = 0;
    *(_QWORD *)(v3 + 72) = v39;
  }
  if (*(_QWORD *)(a1 + 104))
  {
    if ((*(_DWORD *)(a1 + 24) - 13) > 1)
    {
      if ((*(_BYTE *)(a1 + 32) & 2) != 0)
        v43 = icu_regex_copy();
      else
        v43 = icu_ctx_retain();
      *(_QWORD *)(v3 + 104) = v43;
      return v3;
    }
    if ((((unint64_t)v48 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && (unint64_t)(8 * v48) > *v34)
      ++sTotal_10673;
    v40 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 8uLL, v48, 0x31F9A007uLL);
    if (v40)
    {
      *(_QWORD *)(v3 + 104) = v40;
      if (v48 >= 1)
      {
        v41 = 0;
        do
        {
          if (*(_QWORD *)(*(_QWORD *)(a1 + 104) + v41))
          {
            if ((*(_BYTE *)(a1 + 32) & 2) != 0)
              v42 = icu_regex_copy();
            else
              v42 = icu_ctx_retain();
            *(_QWORD *)(*(_QWORD *)(v3 + 104) + v41) = v42;
          }
          v41 += 8;
        }
        while (8 * v48 != v41);
      }
      return v3;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    *(_QWORD *)(v3 + 104) = 0;
    goto LABEL_73;
  }
  return v3;
}

uint64_t db_query_tree_apply_block_with_meta(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  void *v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v52;
  char *ptr;
  uint64_t v54;
  uint8_t buf[16];
  uint8_t v56[16];
  uint8_t v57[16];

  if (a1)
  {
    v4 = a1;
    v49 = 0;
    v50 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v52 = 0;
    ptr = 0;
    v10 = 0;
    while (1)
    {
      v54 = v5;
      v12 = (_QWORD *)*v4;
      v13 = v4[1];
      v14 = (*(uint64_t (**)(void))(a2 + 16))();
      if (a3)
        break;
      v17 = v8;
      if (!v13)
      {
        v17 = v8;
        goto LABEL_44;
      }
LABEL_32:
      if (v9 >= v6)
      {
        if (v6)
          v6 *= 2;
        else
          v6 = 4;
        if (v10)
        {
          v10 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v10, 16 * v6, 0xECA6AA46uLL);
          if (!v10)
            goto LABEL_40;
        }
        else
        {
          v10 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 16 * v6, 0x8DDAA030uLL);
          if (!v10)
          {
LABEL_40:
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)v57 = 0;
              _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v57, 2u);
            }
            v10 = 0;
          }
        }
      }
      v19 = &v10[16 * v9];
      v20 = v54;
      ++v9;
      *(_QWORD *)v19 = v13;
      *((_QWORD *)v19 + 1) = v20;
LABEL_44:
      if (v12)
      {
        v11 = &v54;
      }
      else
      {
        if (v7)
        {
          if (v52[v7 - 1] == v9)
          {
            v21 = (uint64_t *)&ptr[8 * v17 - 24];
            v22 = v17;
            while (1)
            {
              v17 = v22 - 2;
              if (v22 <= 2)
              {
LABEL_73:
                v32 = __si_assert_copy_extra_268();
                __message_assert_272((uint64_t)v32, v33, v34, v35, v36, v37, v38, v39, (char)"core-query.c");
                free(v32);
                if (__valid_fs(-1))
                  v40 = 2989;
                else
                  v40 = 3072;
                *(_DWORD *)v40 = -559038737;
                abort();
              }
              v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, *v21, v21[1], v21[2]);
              *v21 = v14;
              v23 = v7 - 1;
              if (v7 == 1)
                break;
              v24 = v52[v7 - 2];
              v21 -= 2;
              --v7;
              v22 -= 2;
              if (v24 != v9)
                goto LABEL_55;
            }
            v17 = v22 - 3;
            if (!v9)
              goto LABEL_60;
          }
          else
          {
            v23 = v7;
LABEL_55:
            if (!v9)
            {
LABEL_60:
              v7 = v23;
LABEL_61:
              if (v7)
              {
                v27 = v52;
                v28 = (uint64_t *)&ptr[8 * v17 - 24];
                do
                {
                  v29 = v17 > 2;
                  v17 -= 2;
                  if (!v29)
                    goto LABEL_73;
                  --v7;
                  v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, *v28, v28[1], v28[2]);
                  *v28 = v30;
                  v28 -= 2;
                }
                while (v7);
                v14 = v30;
                --v17;
                if (!v52)
                {
LABEL_71:
                  free(v10);
                  free(ptr);
                  free(v27);
                  return v14;
                }
              }
              else
              {
                v27 = v52;
                if (!v52)
                  goto LABEL_71;
              }
              if (v17 || v9)
              {
                v41 = __si_assert_copy_extra_268();
                __message_assert_272((uint64_t)v41, v42, v43, v44, v45, v46, v47, v48, (char)"core-query.c");
                free(v41);
                if (__valid_fs(-1))
                {
                  MEMORY[0xBAD] = -559038737;
                  abort();
                }
                MEMORY[0xC00] = -559038737;
                abort();
              }
              goto LABEL_71;
            }
          }
        }
        else
        {
          v23 = 0;
          if (!v9)
            goto LABEL_60;
        }
        --v9;
        v25 = &v10[16 * v9];
        v26 = *(_QWORD **)v25;
        v11 = (uint64_t *)(v25 + 8);
        v12 = v26;
        v7 = v23;
      }
      v5 = *v11;
      v4 = v12;
      v8 = v17;
      if (!v12)
        goto LABEL_61;
    }
    if (v8 >= v50)
    {
      if (v50)
        v15 = 2 * v50;
      else
        v15 = 4;
      if (ptr)
      {
        v16 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, ptr, 8 * v15, 0xECA6AA46uLL);
        v50 = v15;
        if (v16)
        {
LABEL_12:
          ptr = v16;
          goto LABEL_19;
        }
      }
      else
      {
        v16 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * v15, 0x8DDAA030uLL);
        v50 = v15;
        if (v16)
          goto LABEL_12;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      ptr = 0;
    }
LABEL_19:
    v17 = v8 + 1;
    *(_QWORD *)&ptr[8 * v8] = v14;
    if (!v13)
      goto LABEL_44;
    v18 = v49;
    if (v7 < v49)
      goto LABEL_31;
    if (v49)
      v18 = 2 * v49;
    else
      v18 = 4;
    if (v52)
    {
      v52 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v52, 8 * v18, 0xECA6AA46uLL);
      if (!v52)
        goto LABEL_28;
    }
    else
    {
      v52 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * v18, 0x8DDAA030uLL);
      if (!v52)
      {
LABEL_28:
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)v56 = 0;
          _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v56, 2u);
        }
        v52 = 0;
      }
    }
LABEL_31:
    v49 = v18;
    v52[v7++] = v9;
    goto LABEL_32;
  }
  return 0;
}

uint64_t __db_query_tree_apply_block_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __free_tree_block_invoke(int a1, _QWORD *a2)
{
  void **v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v3 = (void **)a2[3];
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 4);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      free(*v3);
      free(v3);
    }
    a2[3] = 0;
  }
  v7 = a2[2];
  if (v7)
    free_qp(v7);
  free(a2);
  return 0;
}

_QWORD *__db_clone_query_node_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t piece;
  __int16 v7;
  __int16 v9[8];

  if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
    ++sTotal_10673;
  v3 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      v9[0] = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v9, 2u);
    }
    return 0;
  }
  v4 = v3;
  if (*v3)
    *v3 = -1;
  if (v3[1])
    v3[1] = -1;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    piece = clone_query_piece(v5);
    v4[2] = piece;
    if (!piece)
    {
      free(v4);
      return 0;
    }
  }
  *((_WORD *)v4 + 20) = *(_WORD *)(a2 + 40);
  *((_DWORD *)v4 + 11) = *(_DWORD *)(a2 + 44);
  v7 = v4[6] & 0xFE00 | *(unsigned __int8 *)(a2 + 48);
  *((_WORD *)v4 + 24) = v7;
  *((_WORD *)v4 + 24) = v7 & 0xF9FF | *(_WORD *)(a2 + 48) & 0x200;
  v4[7] = 0;
  *((_DWORD *)v4 + 16) = *(_DWORD *)(a2 + 64);
  return v4;
}

void free_qp(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  uint64_t i;
  void (*v13)(void);

  v2 = *(void **)(a1 + 168);
  if (v2)
  {
    if (*(int *)(a1 + 40) >= 1)
    {
      v3 = 0;
      do
        free(*(void **)(*(_QWORD *)(a1 + 168) + 8 * v3++));
      while (v3 < *(int *)(a1 + 40));
      v2 = *(void **)(a1 + 168);
    }
    free(v2);
    *(_QWORD *)(a1 + 168) = 0;
    v4 = *(void **)(a1 + 272);
    if (v4)
    {
      free(v4);
      *(_QWORD *)(a1 + 272) = 0;
    }
  }
  v5 = *(void **)(a1 + 296);
  if (v5)
  {
    free(v5);
    *(_QWORD *)(a1 + 296) = 0;
  }
  v6 = *(void **)(a1 + 288);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(a1 + 288) = 0;
  }
  if (*(_QWORD *)a1)
    free(*(void **)a1);
  *(_QWORD *)a1 = 0;
  v7 = *(void **)(a1 + 136);
  if (v7)
    free(v7);
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  v8 = *(void **)(a1 + 72);
  if (v8)
    free(v8);
  *(_QWORD *)(a1 + 72) = 0;
  v9 = *(void **)(a1 + 88);
  if (v9)
    free(v9);
  v10 = *(void **)(a1 + 104);
  if ((*(_DWORD *)(a1 + 24) - 13) > 1)
  {
    icu_ctx_release();
LABEL_28:
    if (!*(_QWORD *)(a1 + 120))
      goto LABEL_34;
    goto LABEL_32;
  }
  if (!v10)
    goto LABEL_28;
  v11 = *(_DWORD *)(a1 + 40);
  if (v11 >= 1)
  {
    for (i = 0; i < v11; ++i)
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * i))
      {
        icu_ctx_release();
        v11 = *(_DWORD *)(a1 + 40);
      }
    }
    v10 = *(void **)(a1 + 104);
  }
  free(v10);
  if (*(_QWORD *)(a1 + 120))
  {
LABEL_32:
    v13 = *(void (**)(void))(a1 + 128);
    if (v13)
    {
      v13();
      *(_QWORD *)(a1 + 120) = 0;
    }
  }
LABEL_34:
  qp_string_id_cache_free(*(_QWORD **)(a1 + 112));
  free((void *)a1);
}

uint64_t __db_optimize_query_tree_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  float *v5;
  _DWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  void *v20;

  v3 = *(unsigned __int16 *)(a2 + 40);
  if (v3 == 32)
  {
    v11 = *(_QWORD *)(a2 + 16);
    v12 = (_DWORD *)(v11 + 52);
    if (!v11)
      v12 = (_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = *v12;
    if (v11)
    {
      free_qp(v11);
      *(_QWORD *)(a2 + 16) = 0;
    }
    v13 = *(_QWORD **)a2;
    if (*(_QWORD *)a2)
    {
      v16 = MEMORY[0x1E0C809B0];
      v17 = 0x40000000;
      v18 = __db_query_tree_apply_block_block_invoke;
      v19 = &unk_1E6E377F8;
      v20 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(v13, (uint64_t)&v16, 0);
      *(_QWORD *)a2 = 0;
    }
    v14 = *(_QWORD **)(a2 + 8);
    if (v14)
    {
      v16 = MEMORY[0x1E0C809B0];
      v17 = 0x40000000;
      v18 = __db_query_tree_apply_block_block_invoke;
      v19 = &unk_1E6E377F8;
      v20 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(v14, (uint64_t)&v16, 0);
      *(_QWORD *)(a2 + 8) = 0;
    }
  }
  else if (v3 == 16)
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = (float *)(a2 + 64);
    if (v4)
      v6 = (_DWORD *)(v4 + 56);
    else
      v6 = (_DWORD *)(a2 + 64);
    *(_DWORD *)(a2 + 64) = *v6;
    v7 = *(_QWORD **)a2;
    v8 = MEMORY[0x1E0C809B0];
    if (*(_QWORD *)a2)
    {
      v16 = MEMORY[0x1E0C809B0];
      v17 = 0x40000000;
      v18 = __db_query_tree_apply_block_block_invoke;
      v19 = &unk_1E6E377F8;
      v20 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(v7, (uint64_t)&v16, 0);
      *(_QWORD *)a2 = 0;
    }
    v9 = *(_QWORD **)(a2 + 8);
    if (v9)
    {
      v16 = v8;
      v17 = 0x40000000;
      v18 = __db_query_tree_apply_block_block_invoke;
      v19 = &unk_1E6E377F8;
      v20 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(v9, (uint64_t)&v16, 0);
      *(_QWORD *)(a2 + 8) = 0;
    }
    v10 = *(_QWORD *)(a2 + 16);
    if (v10)
    {
      free_qp(v10);
      *(_QWORD *)(a2 + 16) = 0;
    }
    if (*v5 != 0.0)
      *(_WORD *)(a2 + 40) = 32;
  }
  return a2;
}

uint64_t __decorateExpandingFunctions_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  CFAbsoluteTime v8;
  const char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  const char *v13;
  unsigned int v14;
  const char *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  void *v30;
  char *v31;
  char v32;
  unsigned int v33;
  unsigned int v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  const char **v40;
  char *v41;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
    v5 = *(_DWORD *)(v4 + 176);
  else
    v5 = 0;
  if (*(_WORD *)(a2 + 40) != 4)
    goto LABEL_64;
  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    goto LABEL_64;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(double *)(a1 + 40);
  v9 = *(const char **)(v6 + 72);
  if (v9)
  {
    v10 = *(char **)v6;
    if (!strcmp(*(const char **)v6, "kMDItemFSName") && !strcmp(v9, "*"))
    {
      free(v10);
      v11 = strdup("kMDItemFSFileId");
      v6 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)v6 = v11;
    }
  }
  v12 = *(_QWORD *)(v6 + 32);
  if ((v12 & 0x400) != 0
    || (v13 = *(const char **)v6) != 0
    && (!strcmp(*(const char **)v6, "kMDItemTextContent") || !strncmp(v13, "_kMDItemOCRContent", 0x12uLL)))
  {
    *(_QWORD *)(v6 + 32) = v12 | 0x480;
    *(_QWORD *)(v6 + 8) = _qpContentIndexMatch;
    v16 = *(const char **)(v6 + 72);
    if (!v16)
    {
      v20 = 0;
      goto LABEL_32;
    }
  }
  else
  {
    v14 = *(_DWORD *)(v6 + 24);
    if (v14 > 6 || ((1 << v14) & 0x66) == 0)
    {
      v20 = 100;
      goto LABEL_33;
    }
    v16 = *(const char **)(v6 + 72);
    if (!v16)
    {
      *(_DWORD *)(v6 + 48) = 100;
      goto LABEL_42;
    }
  }
  v17 = strlen(v16);
  v18 = *(unsigned __int8 *)v16;
  if (v17 < 1)
  {
    if (v18 == 42)
      goto LABEL_27;
LABEL_31:
    v20 = -v17;
    goto LABEL_32;
  }
  v19 = v16[v17 - 1];
  if (v18 != 42)
  {
    if (v19 == 42)
    {
      v21 = 50;
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  if (v19 != 42)
  {
LABEL_27:
    v21 = 99;
LABEL_30:
    v20 = v21 - v17;
    goto LABEL_32;
  }
  v20 = 99;
LABEL_32:
  v14 = *(_DWORD *)(v6 + 24);
LABEL_33:
  *(_DWORD *)(v6 + 48) = v20;
  if (v14 == 11 && *(_QWORD *)(v6 + 168))
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    if (*(int *)(v6 + 40) >= 1)
    {
      v22 = 0;
      do
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v6 + 168) + 8 * v22);
        if (v23 && *(_BYTE *)v23 == 36)
        {
          v24 = _expandFunctions((const char *)(v23 + 1), (char *)&v43, 0x200uLL, v7, (uint64_t)&__block_literal_global_3_3861, v8);
          v25 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(v25 + 32) |= v24;
          free(*(void **)(*(_QWORD *)(v25 + 168) + 8 * v22));
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 168) + 8 * v22) = strdup((const char *)&v43);
          v6 = *(_QWORD *)(a2 + 16);
        }
        ++v22;
      }
      while (v22 < *(int *)(v6 + 40));
    }
LABEL_56:
    if ((*(_BYTE *)(v6 + 32) & 0x80) != 0)
    {
      if (*(_QWORD *)(v6 + 168))
      {
        v73 = 0u;
        v74 = 0u;
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        if (*(int *)(v6 + 40) >= 1)
        {
          v36 = 0;
          do
          {
            v37 = *(_QWORD *)(*(_QWORD *)(v6 + 168) + 8 * v36);
            if (v37 && *(_BYTE *)v37 == 36)
            {
              v38 = _expandFunctions((const char *)(v37 + 1), (char *)&v43, 0x200uLL, v7, (uint64_t)&__block_literal_global_3_3861, v8);
              v39 = *(_QWORD *)(a2 + 16);
              *(_QWORD *)(v39 + 32) |= v38;
              free(*(void **)(*(_QWORD *)(v39 + 168) + 8 * v36));
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 168) + 8 * v36) = strdup((const char *)&v43);
              v6 = *(_QWORD *)(a2 + 16);
            }
            ++v36;
          }
          while (v36 < *(int *)(v6 + 40));
        }
      }
    }
    goto LABEL_64;
  }
LABEL_42:
  v26 = *(_QWORD *)(v6 + 72);
  if (v26 && *(_BYTE *)v26 == 36)
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v27 = _expandFunctions((const char *)(v26 + 1), (char *)&v43, 0x200uLL, v7, (uint64_t)&__block_literal_global_3_3861, v8);
    v28 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(v28 + 32) |= v27;
    v29 = strlen((const char *)&v43);
    v30 = *(void **)(v28 + 72);
    if (v29 <= (int)strlen((const char *)v30))
    {
      memcpy(v30, &v43, v29 + 1);
      v6 = *(_QWORD *)(a2 + 16);
    }
    else
    {
      free(v30);
      v31 = strdup((const char *)&v43);
      v6 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(v6 + 72) = v31;
    }
LABEL_55:
    if (!v6)
      goto LABEL_64;
    goto LABEL_56;
  }
  v32 = isEntitledForAttribute(v5, *(void **)v6);
  v6 = *(_QWORD *)(a2 + 16);
  if ((v32 & 1) != 0)
    goto LABEL_55;
  v33 = 0;
  v34 = *(unsigned __int16 *)(a2 + 40);
  if (v34 == 4 && v6)
    v33 = (*(_DWORD *)(v6 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v6 + 24));
  if (v33 == ((v34 >> 3) & 1))
    v35 = 16;
  else
    v35 = 32;
  *(_WORD *)(a2 + 40) = v35;
  free_qp(v6);
  *(_QWORD *)(a2 + 16) = 0;
LABEL_64:
  if (*(_BYTE *)(a1 + 56))
  {
    v40 = *(const char ***)(a2 + 16);
    if (v40)
    {
      v41 = (char *)*v40;
      if (*v40)
      {
        if (!strcmp(*v40, "_kMDItemFileName"))
          strcpy(v41, "kMDItemFilename");
      }
    }
  }
  return a2;
}

_BYTE *___translateSDBQuery_block_invoke(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  char *v5;
  char *v6;
  const char *v7;
  uint64_t v8;
  _QWORD v9[5];

  if (!a2)
    return 0;
  if ((*(_WORD *)(a2 + 40) & 0xFFF7u) > 0x20)
  {
LABEL_13:
    v5 = __si_assert_copy_extra_268();
    v6 = v5;
    v7 = "";
    if (v5)
      v7 = v5;
    __message_assert("%s:%u: failed assertion '%s' %s Unexpected node type %x", "siquerynode.c", 445, "0", v7, *(unsigned __int16 *)(a2 + 40));
    free(v6);
    if (__valid_fs(-1))
      v8 = 2989;
    else
      v8 = 3072;
    *(_DWORD *)v8 = -559038737;
    abort();
  }
  if (((1 << (*(_BYTE *)(a2 + 40) & 0xF7)) & 0x100010010) == 0)
  {
    if (((1 << (*(_BYTE *)(a2 + 40) & 0xF7)) & 6) != 0)
      return (_BYTE *)a2;
    goto LABEL_13;
  }
  if (*MEMORY[0x1E0C85AD8] <= 0x27uLL)
    ++sTotal_3522;
  v3 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
  if (!v3)
    _log_fault_for_malloc_failure();
  *(_DWORD *)v3 = 3;
  v3[17] = (*(_WORD *)(a2 + 48) & 0x200) != 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __db_query_tree_apply_block_block_invoke;
  v9[3] = &unk_1E6E377F8;
  v9[4] = &__block_literal_global_17_10736;
  *((_QWORD *)v3 + 3) = db_query_tree_apply_block_with_meta((_QWORD *)a2, (uint64_t)v9, (uint64_t)&__block_literal_global_20_10737);
  return v3;
}

uint64_t ___rewriteQuery_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  int v13;
  int v14;
  char *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  __int16 v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v3 = *(_WORD *)(a2 + 40) & 0xFFF7;
  if ((v3 - 1) >= 2)
  {
    if (v3 != 4)
    {
      v16 = *(_WORD *)(a2 + 48) & 0xFCFF;
LABEL_38:
      *(_WORD *)(a2 + 48) = v16;
      return a2;
    }
    *(_WORD *)(a2 + 48) |= 0x100u;
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v6 = *(_QWORD *)(v4 + 32);
      if ((v6 & 0x400) != 0
        || (v7 = *(const char **)v4) != 0
        && (!strcmp(*(const char **)v4, "kMDItemTextContent") || !strncmp(v7, "_kMDItemOCRContent", 0x12uLL)))
      {
        v6 |= 0x400uLL;
        *(_QWORD *)(v4 + 32) = v6;
      }
      v8 = *(_QWORD *)(v4 + 72);
      if (v8 && *(_BYTE *)v8 == 36)
      {
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        if (!v9)
        {
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = si_calendar_retain();
          v8 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72);
          v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        }
        v10 = _expandFunctions((const char *)(v8 + 1), (char *)&v26, 0x200uLL, v9, (uint64_t)&__block_literal_global_3_3861, *(CFAbsoluteTime *)(a1 + 40));
        v11 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(v11 + 32) |= v10;
        v12 = *(char **)(v11 + 72);
        v13 = strlen(v12);
        v14 = strlen((const char *)&v26);
        if (v14 <= v13)
        {
          memcpy(v12, &v26, v14 + 1);
          v4 = *(_QWORD *)(a2 + 16);
        }
        else
        {
          free(v12);
          v15 = strdup((const char *)&v26);
          v4 = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(v4 + 72) = v15;
        }
        v6 = *(_QWORD *)(v4 + 32);
      }
      if ((v6 & 0x80) != 0 && *(_QWORD *)(v4 + 168))
      {
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        if (*(int *)(v4 + 40) >= 1)
        {
          v17 = 0;
          do
          {
            v18 = *(_QWORD *)(*(_QWORD *)(v4 + 168) + 8 * v17);
            if (v18 && *(_BYTE *)v18 == 36)
            {
              v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
              if (!v19)
              {
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = si_calendar_retain();
                v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 168) + 8 * v17);
                v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
              }
              v20 = _expandFunctions((const char *)(v18 + 1), (char *)&v26, 0x200uLL, v19, (uint64_t)&__block_literal_global_3_3861, *(CFAbsoluteTime *)(a1 + 40));
              v21 = *(_QWORD *)(a2 + 16);
              *(_QWORD *)(v21 + 32) |= v20;
              free(*(void **)(*(_QWORD *)(v21 + 168) + 8 * v17));
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 168) + 8 * v17) = strdup((const char *)&v26);
              v4 = *(_QWORD *)(a2 + 16);
            }
            ++v17;
          }
          while (v17 < *(int *)(v4 + 40));
        }
        v6 = *(_QWORD *)(v4 + 32);
      }
      if ((v6 & 0x800) != 0)
      {
        v16 = *(_WORD *)(a2 + 48) & 0xFDFF;
      }
      else
      {
        v22 = *(_DWORD *)(v4 + 24);
        if (v22 == 14 || v22 == 5)
          v24 = 512;
        else
          v24 = 0;
        v16 = v24 | *(_WORD *)(a2 + 48) & 0xFDFF;
      }
      goto LABEL_38;
    }
  }
  return a2;
}

uint64_t __preIterateQueryForIndex_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  int v10;
  unsigned int v11;
  __int16 v12;
  int v13;
  NSObject *v14;
  os_log_type_t v15;
  char *v16;
  uint64_t v17;
  unsigned int id_for_field_locked;
  CFStringRef String;
  unsigned int v20;
  CFStringRef v21;
  int v22;
  uint64_t v23;
  const char *v24;
  int v25;
  NSObject *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unsigned int v31;
  __int16 v32;
  int v33;
  NSObject *v34;
  int v35;
  NSObject *v36;
  char *v37;
  int v38;
  NSObject *v39;
  char *v40;
  int v41;
  NSObject *v42;
  char *v43;
  uint64_t v44;
  int v45;
  NSObject *v46;
  uint64_t v47;
  uint8_t buf[4];
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v4 = *(_WORD *)(a2 + 40) & 0xFFF7;
  if (v4 > 0x20)
    goto LABEL_74;
  if (((1 << (*(_WORD *)(a2 + 40) & 0xF7)) & 0x100010006) != 0)
    return a2;
  if (v4 != 4)
  {
LABEL_74:
    v43 = __si_assert_copy_extra_521(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 32));
    __message_assert("%s:%u: failed assertion '%s' %s Bad query node; unexpected type %d");
    goto LABEL_75;
  }
  if (dword_1EF19FC90 >= 5)
  {
    v33 = *__error();
    v34 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v34, OS_LOG_TYPE_DEFAULT, "Factor.", buf, 2u);
    }
    *__error() = v33;
  }
  v6 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(v6 + 33) & 8) == 0)
  {
    if (dword_1EF19FC90 >= 5)
    {
      v35 = *__error();
      v36 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B8270000, v36, OS_LOG_TYPE_DEFAULT, "Metadata or Content.", buf, 2u);
      }
      *__error() = v35;
      v6 = *(_QWORD *)(a2 + 16);
    }
    v7 = *(_DWORD *)(v6 + 24);
    if ((v7 - 11) < 2)
    {
      v9 = *(char **)v6;
      if (dword_1EF19FC90 >= 5)
      {
        v37 = *(char **)v6;
        v38 = *__error();
        v39 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v39, OS_LOG_TYPE_DEFAULT, "Range query.", buf, 2u);
        }
        *__error() = v38;
        v6 = *(_QWORD *)(a2 + 16);
        v9 = v37;
      }
      if (*(_DWORD *)(v6 + 40) != 2)
        goto LABEL_21;
      goto LABEL_13;
    }
    if ((v7 - 13) < 2)
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(char **)v6;
LABEL_16:
      if (db_get_id_for_field_locked(*(int **)(v8 + 1184), v9) != -2)
        return a2;
      goto LABEL_17;
    }
    if (v7 == 15)
    {
      v9 = *(char **)v6;
      if (dword_1EF19FC90 >= 5)
      {
        v40 = *(char **)v6;
        v41 = *__error();
        v42 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v42, OS_LOG_TYPE_DEFAULT, "Vector query.", buf, 2u);
        }
        *__error() = v41;
        v6 = *(_QWORD *)(a2 + 16);
        v9 = v40;
      }
      if (*(_DWORD *)(v6 + 40) != 5)
      {
LABEL_21:
        v10 = *(_DWORD *)(v6 + 24);
        goto LABEL_22;
      }
LABEL_13:
      if (**(_BYTE **)v6 == 42 && !*(_BYTE *)(*(_QWORD *)v6 + 1))
        return a2;
      v8 = *(_QWORD *)(a1 + 32);
      goto LABEL_16;
    }
    if (everythingQuery(v6))
    {
      v13 = *__error();
      v14 = _SILogForLogForCategory(1);
      v15 = 2 * (dword_1EF19FC90 < 4);
      if (os_log_type_enabled(v14, v15))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B8270000, v14, v15, "Found *=* query", buf, 2u);
      }
      *__error() = v13;
      return a2;
    }
    v16 = *(char **)v6;
    if (**(_BYTE **)v6 != 42 || v16[1])
    {
      v17 = *(_QWORD *)(v6 + 32);
      if ((v17 & 0x400) != 0)
      {
        id_for_field_locked = 0;
LABEL_38:
        String = copyQueryString(a2);
        if (String)
        {
          v20 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24);
          if (v20 <= 0xF)
          {
            v21 = String;
            v22 = 1 << v20;
            if ((v22 & 0x8198) != 0)
            {
LABEL_48:
              CFRelease(v21);
              return a2;
            }
            if ((v22 & 0x66) != 0)
            {
              if (id_for_field_locked <= 1
                && (!CFEqual(String, CFSTR("*"))
                 || db_get_id_for_field_locked(*(int **)(*(_QWORD *)(a1 + 32) + 1184), "_kMDItemTextContentIndexExists") == -2)&& !id_for_field_locked)
              {
                if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 2008))
                {
                  v23 = *(_QWORD *)(a2 + 16);
                  v24 = *(const char **)v23;
                  if (!strncmp(*(const char **)v23, "_kMDItemOCRContent", 0x12uLL))
                  {
                    v30 = v24 + 18;
                    if (strncmp(v30, "Title", 5uLL))
                    {
                      if (strncmp(v30, "Level1", 6uLL) && strncmp(v30, "Level2", 6uLL) && strncmp(v30, "Level3", 6uLL))
                      {
                        if (dword_1EF19FC90 >= 5)
                        {
                          v45 = *__error();
                          v46 = _SILogForLogForCategory(1);
                          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                          {
                            v47 = **(_QWORD **)(a2 + 16);
                            *(_DWORD *)buf = 136315138;
                            v49 = v47;
                            _os_log_impl(&dword_1B8270000, v46, OS_LOG_TYPE_DEFAULT, "Invalid property name %s", buf, 0xCu);
                          }
                          *__error() = v45;
                          v23 = *(_QWORD *)(a2 + 16);
                        }
                        v31 = *(_DWORD *)(v23 + 24) - 5;
                        if (v31 > 7)
                          v32 = 16;
                        else
                          v32 = word_1B8632250[v31];
                        *(_WORD *)(a2 + 40) = v32;
                      }
                    }
                  }
                }
              }
              goto LABEL_48;
            }
          }
          v43 = __si_assert_copy_extra_521(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 32));
          __message_assert("%s:%u: failed assertion '%s' %s Bad query node; unexpected op %d");
LABEL_75:
          free(v43);
          if (__valid_fs(*(_DWORD *)(*(_QWORD *)(a1 + 32) + 32)))
            v44 = 2989;
          else
            v44 = 3072;
          *(_DWORD *)v44 = -559038737;
          abort();
        }
        if (dword_1EF19FC90 >= 5)
        {
          v25 = *__error();
          v26 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            v27 = *(uint64_t **)(a2 + 16);
            v28 = *v27;
            v29 = v27[9];
            *(_DWORD *)buf = 136315394;
            v49 = v28;
            v50 = 2080;
            v51 = v29;
            _os_log_impl(&dword_1B8270000, v26, OS_LOG_TYPE_DEFAULT, "No string for %s = %s", buf, 0x16u);
          }
          *__error() = v25;
        }
LABEL_17:
        v10 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 24);
LABEL_22:
        v11 = v10 - 5;
        if (v11 > 7)
          v12 = 16;
        else
          v12 = word_1B8632250[v11];
        *(_WORD *)(a2 + 40) = v12;
        return a2;
      }
      if ((v17 & 0x40000) == 0)
      {
        id_for_field_locked = db_get_id_for_field_locked(*(int **)(*(_QWORD *)(a1 + 32) + 1184), v16);
        if (id_for_field_locked == -2)
          goto LABEL_17;
        goto LABEL_38;
      }
    }
    id_for_field_locked = 1;
    goto LABEL_38;
  }
  return a2;
}

uint64_t __processScopeTerms_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int16 v5;
  const char *v7;
  int64_t v8;
  int64_t v9;
  int v10;
  const char *v11;
  const char *v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char *v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[5];

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 && (*(_BYTE *)(v3 + 33) & 4) == 0 && !strcmp(*(const char **)v3, *(const char **)(a1 + 32)))
  {
    if (!*(_BYTE *)(a1 + 68))
    {
      v7 = *(const char **)(v3 + 72);
      if (v7)
      {
        if (*(_QWORD *)(a1 + 40))
        {
          v8 = strlen(*(const char **)(v3 + 72));
          v9 = v8 - 1;
          if (v8 >= 1)
          {
            if (v8 != 1 && v7[v9] == 42 && v7[v8 - 2] == 47)
            {
              v7[v9] = 0;
              v3 = *(_QWORD *)(a2 + 16);
              v7 = *(const char **)(v3 + 72);
            }
            v10 = *(unsigned __int8 *)v7;
            v11 = v10 == 42 ? v7 + 1 : v7;
            if (*v11 == 47)
            {
              if (v10 == 42)
              {
                v12 = *(const char **)(a1 + 40);
                v21[0] = 0;
                asprintf(v21, "%s/%s", v12, v7 + 1);
                v13 = v21[0];
              }
              else
              {
                v13 = strdup(v7);
              }
              remove_escaped_chars((unsigned __int8 *)v13);
              v14 = strlen(*(const char **)(a1 + 40));
              if (!strncmp(*(const char **)(a1 + 40), v13, v14))
              {
                if (SIPersistentIDStoreVetPath(*(_QWORD *)(a1 + 48), v13, *(_DWORD *)(a1 + 64)))
                {
                  v15 = addNodeForCPath(*(_QWORD *)(a1 + 48));
                  if (v15)
                  {
                    v16 = *(_OWORD *)(a2 + 48);
                    v23 = *(_OWORD *)(a2 + 32);
                    v24 = v16;
                    v25 = *(_QWORD *)(a2 + 64);
                    v17 = *(_OWORD *)(a2 + 16);
                    *(_OWORD *)v21 = *(_OWORD *)a2;
                    v22 = v17;
                    *(_OWORD *)a2 = *(_OWORD *)v15;
                    v19 = *(_OWORD *)(v15 + 32);
                    v18 = *(_OWORD *)(v15 + 48);
                    v20 = *(_OWORD *)(v15 + 16);
                    *(_QWORD *)(a2 + 64) = *(_QWORD *)(v15 + 64);
                    *(_OWORD *)(a2 + 32) = v19;
                    *(_OWORD *)(a2 + 48) = v18;
                    *(_OWORD *)(a2 + 16) = v20;
                    *(_OWORD *)v15 = *(_OWORD *)v21;
                    *(_QWORD *)(v15 + 64) = v25;
                    *(_OWORD *)(v15 + 48) = v24;
                    *(_OWORD *)(v15 + 32) = v23;
                    *(_OWORD *)(v15 + 16) = v22;
                    v26[0] = MEMORY[0x1E0C809B0];
                    v26[1] = 0x40000000;
                    v26[2] = __db_query_tree_apply_block_block_invoke;
                    v26[3] = &unk_1E6E377F8;
                    v26[4] = &__block_literal_global_143;
                    db_query_tree_apply_block_with_meta((_QWORD *)v15, (uint64_t)v26, 0);
                    free(v13);
                    return a2;
                  }
                }
              }
              free(v13);
              v3 = *(_QWORD *)(a2 + 16);
            }
          }
        }
      }
    }
    if (*(_DWORD *)(v3 + 24) == 5)
      v5 = 32;
    else
      v5 = 16;
    free_qp(v3);
    *(_QWORD *)(a2 + 16) = 0;
    *(_WORD *)(a2 + 40) = v5;
  }
  return a2;
}

_QWORD *__queryRemapFieldsForStore_block_invoke_3(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  const char *v4;
  const char *v5;
  const char *v7;
  _QWORD *PathNodeForPath;
  _QWORD *v9;
  char *v11;
  _QWORD v12[5];

  v2 = (_QWORD *)a2;
  if (*(_WORD *)(a2 + 40) == 4)
  {
    v3 = *(_QWORD *)(a2 + 16);
    if (v3)
    {
      v4 = *(const char **)v3;
      if (*(_QWORD *)v3)
      {
        v5 = *(const char **)(v3 + 72);
        if (v5)
        {
          if ((*(_DWORD *)(v3 + 24) | 4) == 5 && !strncmp(*(const char **)v3, "_kMDItemQueryPath", 0x11uLL))
          {
            if (v4[17])
            {
              if (!strncmp(v4 + 17, "OID", 3uLL))
                v7 = v4 + 20;
              else
                v7 = v4 + 17;
              strncmp(v7, "Flat", 4uLL);
            }
            v11 = 0;
            strtoll(v5, &v11, 0);
            if (v11 == v5 || *v11)
              PathNodeForPath = createPathNodeForPath(*(_QWORD *)(a1 + 32));
            else
              PathNodeForPath = createPathNodeForOid(*(_QWORD *)(a1 + 32));
            v9 = PathNodeForPath;
            if (PathNodeForPath)
            {
              v12[0] = MEMORY[0x1E0C809B0];
              v12[1] = 0x40000000;
              v12[2] = __db_query_tree_apply_block_block_invoke;
              v12[3] = &unk_1E6E377F8;
              v12[4] = &__block_literal_global_143;
              db_query_tree_apply_block_with_meta(v2, (uint64_t)v12, 0);
              return v9;
            }
          }
        }
      }
    }
  }
  return v2;
}

uint64_t __queryRemapFieldsForStore_block_invoke(uint64_t a1, uint64_t a2)
{
  void **v3;
  const __CFString *v4;
  char *v5;
  char *v6;
  _OWORD v8[16];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*(_WORD *)(a2 + 40) == 4)
  {
    v3 = *(void ***)(a2 + 16);
    if (v3)
    {
      if (sSIQueryCSFieldNameCallback)
      {
        v4 = (const __CFString *)sSIQueryCSFieldNameCallback(*v3);
        if (v4)
        {
          memset(v8, 0, sizeof(v8));
          if (CFStringGetCString(v4, (char *)v8, 256, 0x8000100u))
          {
            v5 = strdup((const char *)v8);
            if (v5)
            {
              v6 = v5;
              free(*v3);
              *v3 = v6;
            }
          }
        }
      }
    }
  }
  return a2;
}

void *__db_clone_query_node_block_invoke_2(int a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  void *v12;

  v5 = a2;
  if (a2 && a3 && a4)
  {
    *a2 = a3;
    a2[1] = a4;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    if (a3)
    {
      v8 = MEMORY[0x1E0C809B0];
      v9 = 0x40000000;
      v10 = __db_query_tree_apply_block_block_invoke;
      v11 = &unk_1E6E377F8;
      v12 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(a3, (uint64_t)&v8, 0);
    }
    if (a4)
    {
      v8 = v6;
      v9 = 0x40000000;
      v10 = __db_query_tree_apply_block_block_invoke;
      v11 = &unk_1E6E377F8;
      v12 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(a4, (uint64_t)&v8, 0);
    }
    free(v5);
    return 0;
  }
  return v5;
}

uint64_t __si_setup_run_stubquery_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  void *v6;
  uint64_t v7;

  if ((*(_WORD *)(a2 + 40) & 0xFFF7) == 4)
  {
    v3 = *(_QWORD *)(a2 + 16);
    if (v3)
    {
      v4 = *(char **)v3;
      if (*(_QWORD *)v3)
      {
        if (strcmp(*(const char **)v3, "*") && (*(_DWORD *)(v3 + 32) & 0x2C0C00) == 0)
        {
          v6 = db_copy_field_ids_with_buffer(*(int **)(**(_QWORD **)(a1 + 32) + 1184), v4, 0, 0);
          if (v6)
          {
            free(v6);
          }
          else if ((*(_WORD *)(a2 + 40) & 8) == 0)
          {
            v7 = *(_QWORD *)(a2 + 16);
            if ((*(_DWORD *)(v7 + 24) - 5) >= 2)
            {
              if (strncmp(*(const char **)v7, "_kMDItemQuery", 0xDuLL))
                return 0;
            }
          }
        }
      }
    }
  }
  return 1;
}

uint64_t __db_optimize_query_tree_block_invoke_2(int32x2_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  float *v14;
  float v15;
  float v16;
  uint64_t v17;
  float *v18;
  float v19;
  uint64_t v20;
  float *v21;
  float v22;
  uint64_t v23;
  float *v24;
  float v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  float *v32;
  uint64_t v33;
  float v35;
  float v36;
  int32x2_t v37;
  int32x2_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  void *v42;
  void *v43;

  v5 = a5;
  *(_QWORD *)a3 = a4;
  *(_QWORD *)(a3 + 8) = a5;
  v8 = *(unsigned __int16 *)(a3 + 40);
  if (v8 == 2)
  {
    if (a4 && a5)
    {
      v11 = *(unsigned __int16 *)(a4 + 40);
      if (v11 != 16)
      {
        v12 = *(unsigned __int16 *)(a5 + 40);
        if (v12 != 16)
        {
          if (v11 == 32 && v12 == 32)
          {
            v20 = *(_QWORD *)(a4 + 16);
            if (v20)
              v21 = (float *)(v20 + 52);
            else
              v21 = (float *)(a4 + 64);
            v22 = *v21 + *(float *)(a3 + 64);
            v23 = *(_QWORD *)(a5 + 16);
            if (v23)
              v24 = (float *)(v23 + 52);
            else
              v24 = (float *)(a5 + 64);
            v25 = v22 + *v24;
            *(_WORD *)(a3 + 40) = 32;
            v26 = MEMORY[0x1E0C809B0];
            v39 = MEMORY[0x1E0C809B0];
            v40 = 0x40000000;
            v41 = __db_query_tree_apply_block_block_invoke;
            v42 = &unk_1E6E377F8;
            v43 = &__block_literal_global_143;
            db_query_tree_apply_block_with_meta((_QWORD *)a4, (uint64_t)&v39, 0);
            *(_QWORD *)a3 = 0;
            v27 = *(_QWORD **)(a3 + 8);
            if (v27)
            {
              v39 = v26;
              v40 = 0x40000000;
              v41 = __db_query_tree_apply_block_block_invoke;
              v42 = &unk_1E6E377F8;
              v43 = &__block_literal_global_143;
              db_query_tree_apply_block_with_meta(v27, (uint64_t)&v39, 0);
              *(_QWORD *)(a3 + 8) = 0;
            }
            *(float *)(a3 + 64) = v25;
            return a3;
          }
          if (v11 == 32)
          {
            v28 = *(_QWORD *)(a4 + 16);
            if (v28)
              v29 = (float *)(v28 + 52);
            else
              v29 = (float *)(a4 + 64);
            *(float *)a1.i32 = *v29 + *(float *)(a3 + 64);
            v37 = a1;
            *(_QWORD *)(a3 + 8) = 0;
            v39 = MEMORY[0x1E0C809B0];
            v40 = 0x40000000;
            v41 = __db_query_tree_apply_block_block_invoke;
            v42 = &unk_1E6E377F8;
            v43 = &__block_literal_global_143;
            db_query_tree_apply_block_with_meta((_QWORD *)a3, (uint64_t)&v39, 0);
            if (*(float *)v37.i32 != 0.0)
            {
              v30 = *(_QWORD *)(v5 + 16);
              if (v30)
              {
                *(float32x2_t *)(v30 + 52) = vadd_f32(*(float32x2_t *)(v30 + 52), (float32x2_t)vdup_lane_s32(v37, 0));
              }
              else
              {
                v35 = *(float *)(v5 + 64);
                if (v35 == 0.0)
                  *(_DWORD *)(v5 + 64) = v37.i32[0];
                else
                  *(float *)(v5 + 64) = v35 + *(float *)v37.i32;
              }
            }
            return v5;
          }
          if (v12 == 32)
          {
            v31 = *(_QWORD *)(a5 + 16);
            if (v31)
              v32 = (float *)(v31 + 52);
            else
              v32 = (float *)(a5 + 64);
            *(float *)a1.i32 = *v32 + *(float *)(a3 + 64);
            v38 = a1;
            *(_QWORD *)a3 = 0;
            v39 = MEMORY[0x1E0C809B0];
            v40 = 0x40000000;
            v41 = __db_query_tree_apply_block_block_invoke;
            v42 = &unk_1E6E377F8;
            v43 = &__block_literal_global_143;
            db_query_tree_apply_block_with_meta((_QWORD *)a3, (uint64_t)&v39, 0);
            if (*(float *)v38.i32 != 0.0)
            {
              v33 = *(_QWORD *)(a4 + 16);
              if (v33)
              {
                *(float32x2_t *)(v33 + 52) = vadd_f32(*(float32x2_t *)(v33 + 52), (float32x2_t)vdup_lane_s32(v38, 0));
              }
              else
              {
                v36 = *(float *)(a4 + 64);
                if (v36 == 0.0)
                  *(_DWORD *)(a4 + 64) = v38.i32[0];
                else
                  *(float *)(a4 + 64) = v36 + *(float *)v38.i32;
              }
            }
            return a4;
          }
          return a3;
        }
      }
      *(_WORD *)(a3 + 40) = 16;
    }
    else
    {
      *(_WORD *)(a3 + 40) = 16;
      if (!a4)
        goto LABEL_18;
    }
    v39 = MEMORY[0x1E0C809B0];
    v40 = 0x40000000;
    v41 = __db_query_tree_apply_block_block_invoke;
    v42 = &unk_1E6E377F8;
    v43 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta((_QWORD *)a4, (uint64_t)&v39, 0);
    *(_QWORD *)a3 = 0;
    v5 = *(_QWORD *)(a3 + 8);
LABEL_18:
    if (v5)
    {
LABEL_19:
      v39 = MEMORY[0x1E0C809B0];
      v40 = 0x40000000;
      v41 = __db_query_tree_apply_block_block_invoke;
      v42 = &unk_1E6E377F8;
      v43 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta((_QWORD *)v5, (uint64_t)&v39, 0);
      *(_QWORD *)(a3 + 8) = 0;
      return a3;
    }
    return a3;
  }
  if (v8 != 1)
    return a3;
  if (!a4 || (v9 = *(unsigned __int16 *)(a4 + 40), v9 == 16))
  {
    if (!a5 || (v10 = *(unsigned __int16 *)(a5 + 40), v10 == 16))
    {
      *(_WORD *)(a3 + 40) = 16;
      if (a4)
      {
        v39 = MEMORY[0x1E0C809B0];
        v40 = 0x40000000;
        v41 = __db_query_tree_apply_block_block_invoke;
        v42 = &unk_1E6E377F8;
        v43 = &__block_literal_global_143;
        db_query_tree_apply_block_with_meta((_QWORD *)a4, (uint64_t)&v39, 0);
        *(_QWORD *)a3 = 0;
        v5 = *(_QWORD *)(a3 + 8);
      }
      if (!v5)
        return a3;
      goto LABEL_19;
    }
    if (!a4 || (v9 = *(unsigned __int16 *)(a4 + 40), v9 == 16))
    {
      *(_QWORD *)(a3 + 8) = 0;
      v39 = MEMORY[0x1E0C809B0];
      v40 = 0x40000000;
      v41 = __db_query_tree_apply_block_block_invoke;
      v42 = &unk_1E6E377F8;
      v43 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta((_QWORD *)a3, (uint64_t)&v39, 0);
      return v5;
    }
    goto LABEL_27;
  }
  if (!a5 || (v10 = *(unsigned __int16 *)(a5 + 40), v10 == 16))
  {
    *(_QWORD *)a3 = 0;
    v39 = MEMORY[0x1E0C809B0];
    v40 = 0x40000000;
    v41 = __db_query_tree_apply_block_block_invoke;
    v42 = &unk_1E6E377F8;
    v43 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta((_QWORD *)a3, (uint64_t)&v39, 0);
    return a4;
  }
LABEL_27:
  if (v9 != 32
    || ((v13 = *(_QWORD *)(a4 + 16)) != 0 ? (v14 = (float *)(v13 + 52)) : (v14 = (float *)(a4 + 64)),
        v15 = *v14,
        node_max_bias(a5),
        v15 < v16))
  {
    if (v10 != 32)
      return a3;
    v17 = *(_QWORD *)(v5 + 16);
    v18 = (float *)(v17 ? v17 + 52 : v5 + 64);
    v15 = *v18;
    node_max_bias(a4);
    if (v15 < v19)
      return a3;
  }
  *(_WORD *)(a3 + 40) = 32;
  *(float *)(a3 + 64) = v15;
  cleanup_children(a3);
  return a3;
}

void si_scheduler_resume_with_token(unsigned int *a1)
{
  uint64_t v2;
  int v3;
  unsigned int *v4;
  unsigned int *v5;

  if (a1)
  {
    v2 = *((_QWORD *)a1 + 1);
    if (v2)
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(v2 + 8));
      if (!*((_BYTE *)a1 + 5))
      {
        if (*((_BYTE *)a1 + 4))
        {
          v3 = *(_DWORD *)(v2 + 100) - 1;
          *(_DWORD *)(v2 + 100) = v3;
          if (!v3)
            dispatch_resume(*(dispatch_object_t *)(v2 + 136));
        }
        else
        {
          v4 = *(unsigned int **)(v2 + 120);
          if (v4 == a1)
          {
            *(_QWORD *)(v2 + 120) = *((_QWORD *)a1 + 2);
LABEL_15:
            release_token(a1);
          }
          else
          {
            while (v4)
            {
              v5 = v4;
              v4 = (unsigned int *)*((_QWORD *)v4 + 2);
              if (v4 == a1)
              {
                *((_QWORD *)v5 + 2) = *((_QWORD *)a1 + 2);
                goto LABEL_15;
              }
            }
          }
        }
      }
      *((_BYTE *)a1 + 5) = 1;
      pthread_cond_broadcast(*(pthread_cond_t **)(v2 + 16));
      pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 8));
    }
    release_token(a1);
  }
}

uint64_t __db_count_query_tree_block_invoke(uint64_t a1, uint64_t a2)
{
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return a2;
}

uint64_t __db_sanitize_query_tree_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  __int16 v26;
  size_t v27;
  _BOOL4 v28;
  const char *v29;
  uint64_t node_copy_factor_node_expanding_queryTerm;
  size_t v31;
  char v32;
  char v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  int v43;
  int v44;
  _BOOL4 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v64;
  _DWORD *v65;
  _WORD *v66;
  int v67;
  uint64_t v68;
  char *v69;
  size_t v70;
  const __CFString *v71;
  const __CFArray *v72;
  CFIndex Count;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t v77;
  const char **v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  const char **v82;
  uint64_t v83;
  BOOL v84;
  void **v85;
  unint64_t v86;
  void *v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t v90;
  const char **v91;
  uint64_t v92;
  BOOL v93;
  int v94;
  uint64_t v95;
  BOOL v96;
  const char **v97;
  void **v98;
  void *v99;
  _QWORD *v100;
  _QWORD *v101;
  const char **v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  BOOL v106;
  const char **v107;
  uint64_t v108;
  BOOL v109;
  const char **v110;
  void **v111;
  void *v112;
  uint64_t v113;
  int v114;
  __int16 v115;
  uint64_t v116;
  _WORD *v117;
  uint64_t v118;
  int v119;
  __int16 v120;
  uint64_t v121;
  _WORD *v122;
  uint64_t v123;
  int v124;
  __int16 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _WORD *v129;
  int v130;
  __int16 v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void **v135;
  void *v136;
  uint64_t v137;
  void *v138;
  void **v139;
  void *v140;
  void **v141;
  void *v142;
  uint64_t v143;
  void *v144;
  void **v145;
  void *v146;
  int v147;
  uint64_t v148;
  uint64_t tree_apply_block_with_meta;
  int v150;
  _BYTE *v151;
  void *v152;
  _BYTE *v153;
  int v154;
  __int16 v155;
  int v156;
  __int16 v157;
  _WORD *v158;
  int v159;
  int v160;
  _BYTE *v161;
  void *v162;
  _BYTE *v163;
  int v164;
  __int16 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v169;
  _BOOL4 v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  unsigned __int8 v182;
  uint64_t v183;
  int v184;
  __int16 v185;
  const __CFAllocator *contentsDeallocator;
  uint64_t v187;
  const __CFAllocator *alloc;
  uint64_t v189;
  uint64_t v190;
  char v191;
  _DWORD *v192;
  char v193;
  _BOOL4 v194;
  _BOOL4 v195;
  const __CFString *v196;
  unint64_t v197;
  int v198;
  _BOOL4 v199;
  const char *v200;
  size_t v201;
  unsigned int v202;
  int v203;
  CFArrayRef theArray;
  void *v205;
  uint64_t v206;
  void *v207;
  unint64_t v208;
  const char **v209;
  unint64_t v210;
  void *v211;
  unint64_t v212;
  void *__src;
  uint8_t buf[8];
  uint64_t v215;
  uint64_t (*v216)(uint64_t);
  void *v217;
  void *v218;
  uint8_t v219[16];
  _BYTE v220[2048];
  int v221[2048];
  _BYTE v222[8192];
  uint64_t v223;
  uint64_t v224;
  uint64_t (*v225)(uint64_t);
  void *v226;
  void *v227;
  uint64_t v228;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v228 = *MEMORY[0x1E0C80C00];
  ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 24);
  if (*(_WORD *)(v2 + 40) != 4)
    return v3;
  v4 = *(_QWORD *)(v2 + 16);
  if (!v4)
    return v3;
  v5 = v1;
  v6 = *(_DWORD *)(v4 + 24);
  if ((v6 - 11) >= 2)
  {
    if (v6 == 15)
    {
LABEL_23:
      v170 = 0;
      LODWORD(v171) = 0;
      goto LABEL_24;
    }
  }
  else if (*(_QWORD *)(v4 + 168))
  {
    if (*(int *)(v4 + 40) >= 1)
    {
      v7 = 0;
      do
      {
        v8 = *(_BYTE **)(*(_QWORD *)(v4 + 168) + 8 * v7);
        if (v8 && *v8 == 36)
        {
          v9 = v8 + 1;
          v10 = (*(uint64_t (**)(void))(*(_QWORD *)(v5 + 32) + 16))();
          v4 = *(_QWORD *)(v3 + 16);
          if (v10 && v10 != (_QWORD)v9)
          {
            v12 = v10;
            free(*(void **)(*(_QWORD *)(v4 + 168) + 8 * v7));
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 168) + 8 * v7) = v12;
            v4 = *(_QWORD *)(v3 + 16);
          }
        }
        ++v7;
      }
      while (v7 < *(int *)(v4 + 40));
    }
    goto LABEL_23;
  }
  v13 = *(_BYTE **)(v4 + 72);
  if (!v13)
    goto LABEL_23;
  if (*v13 == 36)
  {
    v14 = v13 + 1;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 32) + 16))();
    v4 = *(_QWORD *)(v3 + 16);
    if (v15)
      v16 = v15 == (_QWORD)v14;
    else
      v16 = 1;
    if (!v16)
    {
      v169 = v15;
      free(*(void **)(v4 + 72));
      v170 = 0;
      LODWORD(v171) = 0;
      v4 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v4 + 72) = v169;
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  v171 = (*(_QWORD *)(v4 + 32) >> 3) & 1;
  v170 = (*(_QWORD *)(v4 + 32) & 0x1000004) != 0;
LABEL_24:
  if ((*(_BYTE *)(v4 + 32) & 0x80) != 0 && *(_QWORD *)(v4 + 168) && *(int *)(v4 + 40) >= 1)
  {
    v17 = 0;
    do
    {
      v18 = *(_BYTE **)(*(_QWORD *)(v4 + 168) + 8 * v17);
      if (v18 && *v18 == 36)
      {
        v19 = v18 + 1;
        v20 = (*(uint64_t (**)(void))(*(_QWORD *)(v5 + 32) + 16))();
        v4 = *(_QWORD *)(v3 + 16);
        if (v20 && v20 != (_QWORD)v19)
        {
          v22 = v20;
          free(*(void **)(*(_QWORD *)(v4 + 168) + 8 * v17));
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 16) + 168) + 8 * v17) = v22;
          v4 = *(_QWORD *)(v3 + 16);
        }
      }
      ++v17;
    }
    while (v17 < *(int *)(v4 + 40));
  }
  if (!v170)
  {
    if (*(_WORD *)(v3 + 40) == 4 && *(_QWORD *)v4 && !strcmp(*(const char **)v4, "**"))
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 24) += 2;
      if ((*(_DWORD *)(v4 + 24) - 5) >= 2)
        v26 = 1;
      else
        v26 = 2;
      query_node_expand_double_star_in_place(v3, v26);
      if (!(_DWORD)v171)
        return v3;
    }
    else
    {
LABEL_379:
      if (!(_DWORD)v171)
        return v3;
    }
LABEL_380:
    v223 = MEMORY[0x1E0C809B0];
    v224 = 0x40000000;
    v225 = __db_query_tree_apply_block_block_invoke;
    v226 = &unk_1E6E377F8;
    v227 = &__block_literal_global_84_10832;
    return db_query_tree_apply_block_with_meta((_QWORD *)v3, (uint64_t)&v223, (uint64_t)&__block_literal_global_92);
  }
  if (*(_WORD *)(v3 + 40) != 4 || (v23 = *(_QWORD *)(v4 + 72)) == 0)
  {
    v172 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v172, v173, v174, v175, v176, v177, v178, v179, (char)"core-query.c");
    free(v172);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
  if ((*(_DWORD *)(v4 + 24) - 5) < 2)
    v25 = 1;
  else
    v25 = 2;
  v184 = *(unsigned __int8 *)(v5 + 48);
  v185 = v25;
  if (*(_QWORD *)v4)
    v199 = strcmp(*(const char **)v4, "**") == 0;
  else
    v199 = 0;
  v195 = *(_BYTE *)v23 == 42 && *(_BYTE *)(v23 + 1) != 0;
  v27 = strlen((const char *)v23);
  v181 = v171;
  v28 = v27 >= 2 && *(_BYTE *)(v27 + v23 - 1) == 42 && *(unsigned __int8 *)(v27 + v23 - 2) != 92;
  *(_QWORD *)(v4 + 72) = 0;
  v197 = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v4 + 32) = v197 & 0xFFFFFFFFFEFFFFFBLL;
  bzero(&v223, 0x2000uLL);
  bzero(v222, 0x2000uLL);
  bzero(v221, 0x2000uLL);
  bzero(v220, 0x800uLL);
  v180 = v23;
  v29 = (const char *)(v23 + v195);
  node_copy_factor_node_expanding_queryTerm = 0;
  v31 = (size_t)&v29[strlen(v29) - v28];
  v200 = v29;
  if ((unint64_t)v29 >= v31)
    goto LABEL_374;
  v194 = v28;
  v32 = 0;
  v33 = 0;
  v192 = (_DWORD *)(v24 + 24);
  LODWORD(v24) = -1;
  v34 = (char *)v200;
  do
  {
    v36 = *v34;
    if (*v34 < 0)
    {
      v37 = utf8_byte_length(unsigned char)::utf8_len_table[v36 >> 4];
      v38 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v37] & v36;
      if ((~(v36 >> 4) & 0xC) != 0)
      {
        LODWORD(v36) = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v37] & v36;
      }
      else
      {
        if (v37 <= 2)
          v39 = 2;
        else
          v39 = utf8_byte_length(unsigned char)::utf8_len_table[v36 >> 4];
        v40 = v39 - 1;
        v41 = v34 + 1;
        do
        {
          v42 = *v41++;
          LODWORD(v36) = v42 & 0x3F | (v38 << 6);
          v38 = v36;
          --v40;
        }
        while (v40);
      }
    }
    if (!u_isUWhiteSpace(v36))
    {
      v43 = (_DWORD)v34 - (_DWORD)v200;
      v44 = v36 & 0xFFFFFF00;
      v47 = (v36 - 11904) >> 7 < 0x197 || (v36 - 65376) < 0x50 || v44 == 4352;
      if (v33 & 1 | ((v36 - 123) < 0xFFFFFFE6))
      {
        if (v36 >> 8 < 0x11 || !v47)
        {
          if ((v32 & 1) == 0)
          {
            v24 = (int)v24 + 1;
            v54 = 4 * v24;
            *(_DWORD *)((char *)&v223 + v54) = v43;
            *(_DWORD *)&v222[v54] = 0;
            v221[(unint64_t)v54 / 4] = 0;
            v220[v24] = 0;
            v32 = 1;
          }
          v55 = v220[(int)v24];
          v220[(int)v24] = v55 & 0xFC | 1;
          if ((v36 & 0xFFFFFF80) == 0xE00 && (v55 & 0x40) == 0)
            v220[(int)v24] = v55 & 0xBC | 0x41;
          goto LABEL_109;
        }
        if ((v32 & 1) == 0 || (v48 = (int)v24, v49 = v220[(int)v24], (v49 & 3) != 0))
        {
          v49 = 0;
          v48 = (int)v24 + 1;
          v50 = 4 * v48;
          *(_DWORD *)((char *)&v223 + v50) = v43;
          *(_DWORD *)&v222[v50] = 0;
          v221[(unint64_t)v50 / 4] = 0;
          v220[v48] = 0;
          v32 = 1;
          LODWORD(v24) = v24 + 1;
        }
        if ((v36 - 12352) > 0x5F)
        {
          if ((v36 - 12448) > 0x5F)
          {
            if (v44 != 4352)
            {
              if ((v49 & 0x10) == 0)
                v220[v48] = v49 | 0x10;
              goto LABEL_109;
            }
            if ((v49 & 0x20) == 0)
            {
              v51 = v49 | 0x20;
              goto LABEL_116;
            }
          }
          else if ((v49 & 8) == 0)
          {
            v51 = v49 | 8;
            goto LABEL_116;
          }
        }
        else if ((v49 & 4) == 0)
        {
          v51 = v49 | 4;
LABEL_116:
          v220[v48] = v51;
          v33 = 1;
          goto LABEL_109;
        }
        v33 = 1;
        goto LABEL_109;
      }
      if ((v32 & 1) != 0)
      {
        v52 = (int)v24;
        v53 = v220[(int)v24];
        if ((v53 & 1) != 0)
          goto LABEL_105;
      }
      else
      {
        v53 = 0;
        v52 = (int)v24 + 1;
        v56 = 4 * v52;
        *(_DWORD *)((char *)&v223 + v56) = v43;
        *(_DWORD *)&v222[v56] = 0;
        v221[(unint64_t)v56 / 4] = 0;
        v220[v52] = 0;
        v32 = 1;
        LODWORD(v24) = v24 + 1;
      }
      if ((v53 & 0x3C) != 0)
      {
        v24 = (int)v24 + 1;
        v57 = 4 * v24;
        *(_DWORD *)((char *)&v223 + v57) = v43;
        *(_DWORD *)&v222[v57] = 0;
        v221[(unint64_t)v57 / 4] = 0;
        v58 = &v220[v24];
        v220[v24] = 0;
        v32 = 1;
        goto LABEL_107;
      }
LABEL_105:
      v58 = &v220[v52];
      if ((v53 & 0xFFFFFFFD) != 0)
      {
        v33 = 0;
        v59 = v53 | 1;
LABEL_108:
        *v58 = v59;
LABEL_109:
        v35 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v34 >> 4];
        v60 = (int)v24;
        *(_DWORD *)&v222[v60 * 4] += v35;
        ++v221[v60];
        goto LABEL_65;
      }
LABEL_107:
      v33 = 0;
      v59 = 2;
      goto LABEL_108;
    }
    if ((v32 & 1) != 0)
      v32 = 0;
    v35 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v34 >> 4];
LABEL_65:
    v34 += v35;
  }
  while ((unint64_t)v34 < v31);
  if ((v24 & 0x80000000) == 0)
  {
    v61 = 0;
    v62 = 0;
    v63 = (v197 >> 24) & 1;
    if (v184)
      LOBYTE(v63) = 1;
    v191 = v63;
    alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v182 = v33 ^ 1;
    contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
    v187 = v24;
    v190 = (v24 + 1);
    v64 = v194;
    v65 = v192;
    v183 = v3;
    while (1)
    {
      if (v61)
        v67 = 0;
      else
        v67 = v195;
      if (v64)
        LODWORD(v68) = v61 == v187 || (v220[v61] & 0x3C) == 0;
      else
        LODWORD(v68) = 0;
      v69 = (char *)&v200[*((int *)&v223 + v61)];
      __src = v69;
      v70 = *(int *)&v222[4 * v61];
      v203 = v67;
      if ((v191 & 1) != 0)
      {
        if ((v220[v61] & 0x10) == 0)
        {
          node_copy_factor_node_expanding_queryTerm = 0;
          if ((v197 & 0x1000000) == 0)
            goto LABEL_341;
          goto LABEL_299;
        }
        v71 = CFStringCreateWithBytesNoCopy(alloc, (const UInt8 *)v69, v70, 0x8000100u, 0, contentsDeallocator);
        if (v184)
        {
          v198 = 0;
          v74 = 0;
          theArray = 0;
          v193 = 1;
          goto LABEL_153;
        }
      }
      else
      {
        v71 = CFStringCreateWithBytesNoCopy(alloc, (const UInt8 *)v69, v70, 0x8000100u, 0, contentsDeallocator);
      }
      CFStringGetLength(v71);
      v72 = (const __CFArray *)_NLStringTokenizerCopyPossibleStringLanguages();
      if (v72)
      {
        theArray = v72;
        Count = CFArrayGetCount(v72);
        if (Count)
        {
          v74 = Count;
          v193 = 0;
          v198 = 1;
        }
        else
        {
          if ((v220[v61] & 0x40) == 0)
          {
            node_copy_factor_node_expanding_queryTerm = 0;
LABEL_297:
            CFRelease(theArray);
            goto LABEL_298;
          }
          v198 = 0;
          v74 = 0;
          v193 = 0;
        }
      }
      else
      {
        if ((v220[v61] & 0x40) == 0)
        {
          node_copy_factor_node_expanding_queryTerm = 0;
          goto LABEL_298;
        }
        v198 = 0;
        v74 = 0;
        theArray = 0;
        v193 = 1;
      }
LABEL_153:
      v201 = v70;
      *(_QWORD *)buf = 0;
      v215 = 0;
      v75 = OSAtomicDequeue(&stru_1EDBBE160, 0);
      v202 = v68;
      if (v75)
      {
        v76 = (_QWORD *)v75[1];
        v75[1] = 0;
        OSAtomicEnqueue(&gIndexingTokenizerHeap, v75, 0);
      }
      else
      {
        v76 = CITokenizerCreate(3);
      }
      CITokenizerGetQueryTokensWithOptions((uint64_t)v76);
      CIReleaseIndexingTokenizer((uint64_t)v76);
      v77 = HIDWORD(v215);
      icu_locale_release();
      v78 = *(const char ***)buf;
      v211 = *(void **)buf;
      v212 = v77;
      v209 = 0;
      v210 = 0;
      v207 = 0;
      v208 = 0;
      v205 = 0;
      v206 = 0;
      v196 = v71;
      if (v74)
      {
        v189 = v62;
        if (v74 != 1)
        {
          if (v74 != 2)
          {
            CFArrayGetValueAtIndex(theArray, 2);
            *(_QWORD *)buf = 0;
            v215 = 0;
            v79 = OSAtomicDequeue(&stru_1EDBBE160, 0);
            if (v79)
            {
              v80 = (_QWORD *)v79[1];
              v79[1] = 0;
              OSAtomicEnqueue(&gIndexingTokenizerHeap, v79, 0);
            }
            else
            {
              v80 = CITokenizerCreate(3);
            }
            CITokenizerGetQueryTokensWithOptions((uint64_t)v80);
            CIReleaseIndexingTokenizer((uint64_t)v80);
            v81 = HIDWORD(v215);
            icu_locale_release();
            v82 = *(const char ***)buf;
            v205 = *(void **)buf;
            v206 = v81;
            if ((_DWORD)v81)
            {
              if (v77 == v81)
              {
                if ((int)v77 < 1)
                  goto LABEL_169;
                v83 = 0;
                v84 = 0;
                do
                {
                  if (strcmp(v82[v83], v78[v83]))
                    break;
                  v84 = ++v83 >= v77;
                }
                while (v81 != v83);
                if (v84)
                {
                  v85 = (void **)v82;
                  v86 = v77;
                  do
                  {
                    v87 = *v85++;
                    free(v87);
                    --v86;
                  }
                  while (v86);
LABEL_169:
                  free(v82);
                  v205 = 0;
                  LODWORD(v206) = 0;
                }
              }
            }
          }
          CFArrayGetValueAtIndex(theArray, 1);
          *(_QWORD *)buf = 0;
          v215 = 0;
          v88 = OSAtomicDequeue(&stru_1EDBBE160, 0);
          if (v88)
          {
            v89 = (_QWORD *)v88[1];
            v88[1] = 0;
            OSAtomicEnqueue(&gIndexingTokenizerHeap, v88, 0);
          }
          else
          {
            v89 = CITokenizerCreate(3);
          }
          CITokenizerGetQueryTokensWithOptions((uint64_t)v89);
          CIReleaseIndexingTokenizer((uint64_t)v89);
          v90 = HIDWORD(v215);
          icu_locale_release();
          v91 = *(const char ***)buf;
          v207 = *(void **)buf;
          v208 = v90;
          if ((_DWORD)v90)
          {
            if (v77 == v90)
            {
              if ((int)v77 < 1)
                goto LABEL_185;
              v92 = 0;
              v93 = 0;
              do
              {
                if (strcmp(v91[v92], v78[v92]))
                  break;
                v93 = ++v92 >= v77;
              }
              while (v90 != v92);
              if (v93)
                goto LABEL_185;
            }
            if (v90 == v206)
            {
              if ((int)v90 < 1)
                goto LABEL_188;
              v94 = v67;
              v95 = 0;
              v96 = 0;
              v97 = (const char **)v205;
              do
              {
                if (strcmp(v91[v95], v97[v95]))
                  break;
                v96 = ++v95 >= v90;
              }
              while (v90 != v95);
              v67 = v94;
              if (v96)
              {
LABEL_185:
                if ((int)v90 >= 1)
                {
                  v98 = (void **)v91;
                  do
                  {
                    v99 = *v98++;
                    free(v99);
                    --v90;
                  }
                  while (v90);
                }
LABEL_188:
                free(v91);
                v207 = 0;
                LODWORD(v208) = 0;
              }
            }
          }
        }
        CFArrayGetValueAtIndex(theArray, 0);
        *(_QWORD *)buf = 0;
        v215 = 0;
        v100 = OSAtomicDequeue(&stru_1EDBBE160, 0);
        if (v100)
        {
          v101 = (_QWORD *)v100[1];
          v100[1] = 0;
          OSAtomicEnqueue(&gIndexingTokenizerHeap, v100, 0);
        }
        else
        {
          v101 = CITokenizerCreate(3);
        }
        CITokenizerGetQueryTokensWithOptions((uint64_t)v101);
        CIReleaseIndexingTokenizer((uint64_t)v101);
        v74 = HIDWORD(v215);
        icu_locale_release();
        v102 = *(const char ***)buf;
        v209 = *(const char ***)buf;
        v210 = v74;
        if ((_DWORD)v74)
        {
          if (v77 == v74)
          {
            if ((int)v77 < 1)
              goto LABEL_210;
            v103 = 0;
            v104 = 0;
            do
            {
              if (strcmp(v102[v103], v78[v103]))
                break;
              v104 = ++v103 >= v77;
            }
            while (v74 != v103);
            if (v104)
              goto LABEL_210;
          }
          if (v74 != v208)
            goto LABEL_204;
          if ((int)v74 < 1)
          {
LABEL_213:
            free(v102);
            v102 = 0;
            v74 = 0;
            v209 = 0;
            LODWORD(v210) = 0;
          }
          else
          {
            v105 = 0;
            v106 = 0;
            v107 = (const char **)v207;
            do
            {
              if (strcmp(v102[v105], v107[v105]))
                break;
              v106 = ++v105 >= v74;
            }
            while (v74 != v105);
            if (v106)
              goto LABEL_210;
LABEL_204:
            if (v74 == v206)
            {
              if ((int)v74 < 1)
                goto LABEL_213;
              v108 = 0;
              v109 = 0;
              v110 = (const char **)v205;
              do
              {
                if (strcmp(v102[v108], v110[v108]))
                  break;
                v109 = ++v108 >= v74;
              }
              while (v74 != v108);
              if (v109)
              {
LABEL_210:
                if ((int)v74 >= 1)
                {
                  v111 = (void **)v102;
                  do
                  {
                    v112 = *v111++;
                    free(v112);
                    --v74;
                  }
                  while (v74);
                }
                goto LABEL_213;
              }
            }
          }
        }
        else
        {
          v74 = 0;
        }
        v62 = v189;
        goto LABEL_217;
      }
      v102 = 0;
LABEL_217:
      v68 = v202;
      v65 = v192;
      node_copy_factor_node_expanding_queryTerm = _query_node_copy_factor_node_expanding_queryTerm(v3, (uint64_t)&v211, v199, v67, v202, v192);
      v70 = v201;
      if (node_copy_factor_node_expanding_queryTerm)
      {
        if (v198)
        {
          if (v74)
          {
            v113 = _query_node_copy_factor_node_expanding_queryTerm(v3, (uint64_t)&v209, v199, v203, v202, v192);
            v114 = (*(_WORD *)(v3 + 40) & 8) != 0 ? -1 : -5;
            v115 = (v114 + *(_DWORD *)(*(_QWORD *)(v3 + 16) + 24)) >= 2 ? 1 : 2;
            if (v113)
            {
              v116 = v113;
              if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
                ++sTotal_10673;
              v117 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
              if (!v117 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
              }
              v117[20] = v115;
              *(_QWORD *)v117 = node_copy_factor_node_expanding_queryTerm;
              *((_QWORD *)v117 + 1) = v116;
              node_copy_factor_node_expanding_queryTerm = (uint64_t)v117;
              v65 = v192;
              v68 = v202;
            }
          }
          if ((_DWORD)v208)
          {
            v118 = _query_node_copy_factor_node_expanding_queryTerm(v3, (uint64_t)&v207, v199, v203, v68, v65);
            v119 = (*(_WORD *)(v3 + 40) & 8) != 0 ? -1 : -5;
            v120 = (v119 + *(_DWORD *)(*(_QWORD *)(v3 + 16) + 24)) >= 2 ? 1 : 2;
            if (v118)
            {
              v121 = v118;
              if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
                ++sTotal_10673;
              v122 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
              if (!v122 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
              }
              v122[20] = v120;
              *(_QWORD *)v122 = node_copy_factor_node_expanding_queryTerm;
              *((_QWORD *)v122 + 1) = v121;
              node_copy_factor_node_expanding_queryTerm = (uint64_t)v122;
              v65 = v192;
              v68 = v202;
            }
          }
          if ((_DWORD)v206)
          {
            v123 = _query_node_copy_factor_node_expanding_queryTerm(v3, (uint64_t)&v205, v199, v203, v68, v65);
            v124 = (*(_WORD *)(v3 + 40) & 8) != 0 ? -1 : -5;
            v125 = (v124 + *(_DWORD *)(*(_QWORD *)(v3 + 16) + 24)) >= 2 ? 1 : 2;
            if (v123)
            {
              v126 = v123;
              if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
                ++sTotal_10673;
              v68 = (uint64_t)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
              if (!v68 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
              }
              *(_WORD *)(v68 + 40) = v125;
              *(_QWORD *)v68 = node_copy_factor_node_expanding_queryTerm;
              *(_QWORD *)(v68 + 8) = v126;
              node_copy_factor_node_expanding_queryTerm = v68;
              v65 = v192;
              LODWORD(v68) = v202;
            }
          }
          v70 = v201;
        }
        if ((v194 & (v68 ^ 1)) == 1 && (v197 & 0x40) != 0 && (v197 & 0x800000) == 0)
        {
          v215 = 1;
          *(_QWORD *)buf = &__src;
          v127 = _query_node_copy_factor_node_expanding_queryTerm(v3, (uint64_t)buf, 0, 0, 0, v65);
          v128 = *(_QWORD *)(v127 + 16);
          if (v199)
          {
            free(*(void **)v128);
            v129 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 2uLL, 0x6085D6BuLL);
            if (!v129 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)v219 = 0;
              _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v219, 2u);
            }
            *v129 = 42;
            v128 = *(_QWORD *)(v127 + 16);
            *(_QWORD *)v128 = v129;
          }
          *(_QWORD *)(v128 + 32) |= 0x4000uLL;
          if ((*(_WORD *)(v3 + 40) & 8) != 0)
            v130 = -1;
          else
            v130 = -5;
          if ((v130 + *(_DWORD *)(*(_QWORD *)(v3 + 16) + 24)) >= 2)
            v131 = 1;
          else
            v131 = 2;
          if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
            ++sTotal_10673;
          v68 = (uint64_t)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
          if (!v68 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)v219 = 0;
            _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v219, 2u);
          }
          *(_WORD *)(v68 + 40) = v131;
          *(_QWORD *)v68 = node_copy_factor_node_expanding_queryTerm;
          *(_QWORD *)(v68 + 8) = v127;
          node_copy_factor_node_expanding_queryTerm = v68;
          v65 = v192;
          LODWORD(v68) = v202;
          v70 = v201;
        }
      }
      if (v198)
      {
        v132 = v62;
        v133 = v206;
        v134 = v205;
        if ((int)v206 >= 1)
        {
          v135 = (void **)v205;
          do
          {
            v136 = *v135++;
            free(v136);
            --v133;
          }
          while (v133);
        }
        free(v134);
        v205 = 0;
        LODWORD(v206) = 0;
        v137 = v208;
        v138 = v207;
        if ((int)v208 >= 1)
        {
          v139 = (void **)v207;
          do
          {
            v140 = *v139++;
            free(v140);
            --v137;
          }
          while (v137);
        }
        free(v138);
        v62 = v132;
        if ((int)v74 >= 1)
        {
          v141 = (void **)v102;
          do
          {
            v142 = *v141++;
            free(v142);
            --v74;
          }
          while (v74);
        }
        free(v102);
        v3 = v183;
        LODWORD(v68) = v202;
        v70 = v201;
      }
      v143 = v212;
      v144 = v211;
      if ((int)v212 >= 1)
      {
        v145 = (void **)v211;
        do
        {
          v146 = *v145++;
          free(v146);
          --v143;
        }
        while (v143);
      }
      free(v144);
      v64 = v194;
      v71 = v196;
      if ((v193 & 1) == 0)
        goto LABEL_297;
LABEL_298:
      CFRelease(v71);
      if ((v197 & 0x1000000) == 0)
        goto LABEL_341;
LABEL_299:
      if (v221[v61] < 2)
        goto LABEL_341;
      v147 = v220[v61];
      if (v61 == v187 && (v182 & (v147 == 2)) != 0)
      {
        v148 = 150994944;
      }
      else
      {
        if ((v147 & 0x3C) == 0 || (v147 & 8) != 0)
        {
LABEL_341:
          if (!node_copy_factor_node_expanding_queryTerm)
          {
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            v215 = 0x40000000;
            v216 = __db_query_tree_apply_block_block_invoke;
            v217 = &unk_1E6E377F8;
            v218 = &__block_literal_global_17_10736;
            node_copy_factor_node_expanding_queryTerm = db_query_tree_apply_block_with_meta((_QWORD *)v3, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
            if (v203)
              v160 = 2;
            else
              v160 = 1;
            v161 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v160 + (int)v68 + (int)v70, 0x6085D6BuLL);
            if (!v161 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
            }
            *(_QWORD *)(*(_QWORD *)(node_copy_factor_node_expanding_queryTerm + 16) + 72) = v161;
            v162 = __src;
            if (v203 && *(_BYTE *)__src != 42)
            {
              *v161++ = 42;
              v162 = __src;
            }
            memcpy(v161, v162, v70);
            v163 = &v161[v70];
            if ((_DWORD)v68 && *v163 != 42)
              *v163++ = 42;
            *v163 = 0;
            if (v199)
            {
              if ((*(_WORD *)(v3 + 40) & 8) != 0)
                v164 = -1;
              else
                v164 = -5;
              if ((v164 + *(_DWORD *)(*(_QWORD *)(v3 + 16) + 24)) >= 2)
                v165 = 1;
              else
                v165 = 2;
              query_node_expand_double_star_in_place(node_copy_factor_node_expanding_queryTerm, v165);
              v159 = 2;
              goto LABEL_362;
            }
          }
LABEL_363:
          if (v62)
            goto LABEL_364;
          goto LABEL_126;
        }
        if ((v147 & 4) != 0)
          v148 = 150994944;
        else
          v148 = 0x1000000;
      }
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v215 = 0x40000000;
      v216 = __db_query_tree_apply_block_block_invoke;
      v217 = &unk_1E6E377F8;
      v218 = &__block_literal_global_17_10736;
      tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((_QWORD *)v3, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
      *(_QWORD *)(*(_QWORD *)(tree_apply_block_with_meta + 16) + 32) |= v148;
      if (v203)
        v150 = 2;
      else
        v150 = 1;
      v151 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v150 + (int)v68 + (int)v70, 0x6085D6BuLL);
      if (!v151 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      *(_QWORD *)(*(_QWORD *)(tree_apply_block_with_meta + 16) + 72) = v151;
      v152 = __src;
      if (v203 && *(_BYTE *)__src != 42)
      {
        *v151++ = 42;
        v152 = __src;
      }
      memcpy(v151, v152, v70);
      v153 = &v151[v70];
      if ((_DWORD)v68 && *v153 != 42)
        *v153++ = 42;
      *v153 = 0;
      if (v199)
      {
        if ((*(_WORD *)(v3 + 40) & 8) != 0)
          v154 = -1;
        else
          v154 = -5;
        if ((v154 + *(_DWORD *)(*(_QWORD *)(v3 + 16) + 24)) >= 2)
          v155 = 1;
        else
          v155 = 2;
        query_node_expand_double_star_in_place(tree_apply_block_with_meta, v155);
        *v65 += 2;
      }
      if (node_copy_factor_node_expanding_queryTerm)
      {
        if ((*(_WORD *)(v3 + 40) & 8) != 0)
          v156 = -1;
        else
          v156 = -5;
        if ((v156 + *(_DWORD *)(*(_QWORD *)(v3 + 16) + 24)) >= 2)
          v157 = 1;
        else
          v157 = 2;
        if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
          ++sTotal_10673;
        v158 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
        if (!v158 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
        v158[20] = v157;
        v159 = 1;
        *(_QWORD *)v158 = node_copy_factor_node_expanding_queryTerm;
        *((_QWORD *)v158 + 1) = tree_apply_block_with_meta;
        node_copy_factor_node_expanding_queryTerm = (uint64_t)v158;
        v64 = v194;
LABEL_362:
        *v65 += v159;
        goto LABEL_363;
      }
      node_copy_factor_node_expanding_queryTerm = tree_apply_block_with_meta;
      v64 = v194;
      if (v62)
      {
LABEL_364:
        if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
          ++sTotal_10673;
        v66 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
        if (!v66 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
        v66[20] = v185;
        *(_QWORD *)v66 = v62;
        *((_QWORD *)v66 + 1) = node_copy_factor_node_expanding_queryTerm;
        ++*v65;
        node_copy_factor_node_expanding_queryTerm = (uint64_t)v66;
      }
LABEL_126:
      ++v61;
      v62 = node_copy_factor_node_expanding_queryTerm;
      if (v61 == v190)
        goto LABEL_374;
    }
  }
  node_copy_factor_node_expanding_queryTerm = 0;
LABEL_374:
  v166 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v166 + 72) = v180;
  *(_QWORD *)(v166 + 32) = v197 & 0xFFFFFFFFFEFFFFFBLL;
  if (node_copy_factor_node_expanding_queryTerm)
    v167 = node_copy_factor_node_expanding_queryTerm;
  else
    v167 = v3;
  if (v167 != v3)
  {
    v223 = MEMORY[0x1E0C809B0];
    v224 = 0x40000000;
    v225 = __db_query_tree_apply_block_block_invoke;
    v226 = &unk_1E6E377F8;
    v227 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta((_QWORD *)v3, (uint64_t)&v223, 0);
    v3 = v167;
    LODWORD(v171) = v181;
    goto LABEL_379;
  }
  if (v181)
    goto LABEL_380;
  return v3;
}

uint64_t ___rewriteQuery_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t tree_apply_block_with_meta;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  char *v25;
  char *v26;
  const char *v27;
  __int16 v28;
  char *v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  void *v40;
  void *v41;

  if (*(_QWORD *)a2 != a3)
  {
    v30 = __si_assert_copy_extra_268();
    v31 = v30;
    v32 = "";
    if (v30)
      v32 = v30;
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 1153, "node->lchild==lchild", v32);
    free(v31);
    if (__valid_fs(-1))
      v33 = 2989;
    else
      v33 = 3072;
    *(_DWORD *)v33 = -559038737;
    abort();
  }
  if (*(_QWORD *)(a2 + 8) != a4)
  {
    v34 = __si_assert_copy_extra_268();
    v26 = v34;
    v35 = "";
    if (v34)
      v35 = v34;
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 1154, "node->rchild==rchild", v35);
LABEL_53:
    free(v26);
    if (__valid_fs(-1))
      v36 = 2989;
    else
      v36 = 3072;
    *(_DWORD *)v36 = -559038737;
    abort();
  }
  v5 = *(unsigned __int16 *)(a2 + 40);
  v6 = v5 & 0xFFFFFFF7;
  if ((v5 & 0xFFFFFFF7) - 1 > 1)
  {
LABEL_37:
    v25 = __si_assert_copy_extra_268();
    v26 = v25;
    v27 = "";
    if (v25)
      v27 = v25;
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 985, "0", v27);
    goto LABEL_53;
  }
  v7 = MEMORY[0x1E0C809B0];
  while (1)
  {
    v8 = *(_QWORD *)a2;
    v9 = *(_QWORD *)(a2 + 8);
    v10 = *(unsigned __int16 *)(*(_QWORD *)a2 + 48);
    v11 = *(unsigned __int16 *)(v9 + 48);
    v12 = *(_WORD *)(a2 + 48) | 0x100;
    *(_WORD *)(a2 + 48) = v12;
    if (v6 != 2)
      break;
    if ((v10 & 0x200) != 0 && (v11 & 0x200) != 0)
      goto LABEL_43;
    if ((v10 & 0x200) != 0)
    {
      v13 = *(_QWORD *)(v9 + 16);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 33) & 8) != 0)
          goto LABEL_43;
      }
    }
    if ((v11 & 0x200) != 0)
    {
      v14 = *(_QWORD *)(v8 + 16);
      if (v14)
      {
        if ((*(_BYTE *)(v14 + 33) & 8) != 0)
          goto LABEL_43;
      }
    }
    if ((v10 & 0x200) != 0)
    {
      v15 = *(unsigned __int16 *)(v8 + 40);
      if (v15 == 4)
      {
        v16 = *(_QWORD *)(v8 + 16);
        if (v16)
          LODWORD(v16) = (*(_DWORD *)(v16 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v16 + 24));
      }
      else
      {
        LODWORD(v16) = 0;
      }
      if ((_DWORD)v16 != ((v15 >> 3) & 1))
      {
        v17 = *(_QWORD *)(v9 + 16);
        if (!v17 || (*(_BYTE *)(v17 + 33) & 8) == 0)
          goto LABEL_42;
      }
    }
    if ((v11 & 0x200) != 0)
    {
      v18 = *(unsigned __int16 *)(v9 + 40);
      if (v18 == 4)
      {
        v19 = *(_QWORD *)(v9 + 16);
        if (v19)
          LODWORD(v19) = (*(_DWORD *)(v19 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v19 + 24));
      }
      else
      {
        LODWORD(v19) = 0;
      }
      if ((_DWORD)v19 != ((v18 >> 3) & 1))
      {
        v20 = *(_QWORD *)(v8 + 16);
        if (!v20 || (*(_BYTE *)(v20 + 33) & 8) == 0)
          goto LABEL_42;
      }
    }
    if ((v10 & 0x200) != 0 && (*(_WORD *)(v8 + 40) & 0xFFF7) == 1)
    {
      *(_WORD *)(a2 + 40) = v5 ^ 0xB;
      v37 = v7;
      v38 = 0x40000000;
      v39 = __db_query_tree_apply_block_block_invoke;
      v40 = &unk_1E6E377F8;
      v41 = &__block_literal_global_17_10736;
      tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((_QWORD *)v8, (uint64_t)&v37, (uint64_t)&__block_literal_global_20_10737);
      v22 = *(_QWORD **)(a2 + 8);
      *(_QWORD *)(a2 + 8) = tree_apply_block_with_meta;
      *(_WORD *)(tree_apply_block_with_meta + 40) = 2;
      *(_QWORD *)tree_apply_block_with_meta = v22;
      *(_WORD *)(*(_QWORD *)a2 + 40) = 2;
      v37 = v7;
      v38 = 0x40000000;
      v39 = __db_query_tree_apply_block_block_invoke;
      v40 = &unk_1E6E377F8;
      v41 = &__block_literal_global_17_10736;
      *(_QWORD *)(*(_QWORD *)a2 + 8) = db_query_tree_apply_block_with_meta(v22, (uint64_t)&v37, (uint64_t)&__block_literal_global_20_10737);
    }
    else
    {
      if ((v11 & 0x200) == 0 || (*(_WORD *)(v9 + 40) & 0xFFF7) != 1)
        goto LABEL_42;
      *(_WORD *)(a2 + 40) = v5 ^ 0xB;
      v37 = v7;
      v38 = 0x40000000;
      v39 = __db_query_tree_apply_block_block_invoke;
      v40 = &unk_1E6E377F8;
      v41 = &__block_literal_global_17_10736;
      v23 = db_query_tree_apply_block_with_meta((_QWORD *)v9, (uint64_t)&v37, (uint64_t)&__block_literal_global_20_10737);
      v24 = *(_QWORD **)a2;
      *(_QWORD *)a2 = v23;
      *(_WORD *)(v23 + 40) = 2;
      *(_QWORD *)(v23 + 8) = v24;
      *(_WORD *)(*(_QWORD *)(a2 + 8) + 40) = 2;
      v37 = v7;
      v38 = 0x40000000;
      v39 = __db_query_tree_apply_block_block_invoke;
      v40 = &unk_1E6E377F8;
      v41 = &__block_literal_global_17_10736;
      **(_QWORD **)(a2 + 8) = db_query_tree_apply_block_with_meta(v24, (uint64_t)&v37, (uint64_t)&__block_literal_global_20_10737);
    }
    v5 = *(unsigned __int16 *)(a2 + 40);
    v6 = v5 & 0xFFFFFFF7;
    if ((v5 & 0xFFFFFFF7) - 1 >= 2)
      goto LABEL_37;
  }
  if (v6 != 1)
    return a2;
  if (((v10 | v11) & 0x200) == 0)
  {
LABEL_42:
    v28 = v12 & 0xFDFF;
    goto LABEL_44;
  }
LABEL_43:
  *(_WORD *)(a2 + 40) = v5 ^ 0xB;
  negateQuery(v8);
  negateQuery(*(_QWORD *)(a2 + 8));
  v28 = *(_WORD *)(a2 + 48) | 0x200;
LABEL_44:
  *(_WORD *)(a2 + 48) = v28;
  return a2;
}

void *__queryRemapFieldsForStore_block_invoke_4(int a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  void *v12;

  v5 = a2;
  if (a2 && a3 && a4)
  {
    *a2 = a3;
    a2[1] = a4;
  }
  else
  {
    v6 = MEMORY[0x1E0C809B0];
    if (a3)
    {
      v8 = MEMORY[0x1E0C809B0];
      v9 = 0x40000000;
      v10 = __db_query_tree_apply_block_block_invoke;
      v11 = &unk_1E6E377F8;
      v12 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(a3, (uint64_t)&v8, 0);
    }
    if (a4)
    {
      v8 = v6;
      v9 = 0x40000000;
      v10 = __db_query_tree_apply_block_block_invoke;
      v11 = &unk_1E6E377F8;
      v12 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(a4, (uint64_t)&v8, 0);
    }
    free(v5);
    return 0;
  }
  return v5;
}

uint64_t __queryRemapFieldsForStore_block_invoke_2(uint64_t a1, uint64_t a2)
{
  return a2;
}

_BYTE *___translateSDBQuery_block_invoke_2(uint64_t a1, uint64_t a2, void **a3, _DWORD *a4)
{
  int v7;
  int v8;
  _BYTE *v9;
  int v10;
  char *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  char *v24;
  const char *v25;

  v7 = *(_WORD *)(a2 + 40) & 0xFFF7;
  if (v7 == 1)
  {
    v8 = 0;
  }
  else
  {
    if (v7 != 2)
    {
      v24 = __si_assert_copy_extra_268();
      v21 = v24;
      v25 = "";
      if (v24)
        v25 = v24;
      __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 468, "0", v25);
      goto LABEL_24;
    }
    v8 = 1;
  }
  v9 = 0;
  if (a3 && a4)
  {
    v10 = *(_DWORD *)a3;
    if (v8 == *a4)
    {
      if (v8 != v10)
      {
        v15 = (void *)*((_QWORD *)a4 + 4);
        v16 = *((_QWORD *)a4 + 3) + 1;
        *((_QWORD *)a4 + 3) = v16;
        v17 = malloc_type_realloc(v15, 8 * v16, 0x2004093837F09uLL);
        *((_QWORD *)a4 + 4) = v17;
        v17[*((_QWORD *)a4 + 3) - 1] = a3;
        v9 = a4;
        goto LABEL_19;
      }
      v11 = (char *)malloc_type_realloc(a3[4], 8 * ((_QWORD)a3[3] + *((_QWORD *)a4 + 3)), 0x2004093837F09uLL);
      a3[4] = v11;
      memcpy(&v11[8 * (_QWORD)a3[3]], *((const void **)a4 + 4), 8 * *((_QWORD *)a4 + 3));
      a3[3] = (char *)a3[3] + *((_QWORD *)a4 + 3);
      free(*((void **)a4 + 4));
      free(a4);
    }
    else
    {
      if (v8 != v10)
      {
        if (*MEMORY[0x1E0C85AD8] <= 0x27uLL)
          ++sTotal_3522;
        v9 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
        if (!v9)
          _log_fault_for_malloc_failure();
        *(_DWORD *)v9 = v8;
        v9[17] = (*(_WORD *)(a2 + 48) & 0x200) != 0;
        *((_QWORD *)v9 + 3) = 2;
        v18 = malloc_type_calloc(1uLL, 0x10uLL, 0x2004093837F09uLL);
        *((_QWORD *)v9 + 4) = v18;
        *v18 = a3;
        *(_QWORD *)(*((_QWORD *)v9 + 4) + 8) = a4;
        goto LABEL_19;
      }
      v12 = a3[4];
      v13 = (uint64_t)a3[3] + 1;
      a3[3] = (void *)v13;
      v14 = malloc_type_realloc(v12, 8 * v13, 0x2004093837F09uLL);
      a3[4] = v14;
      v14[(_QWORD)a3[3] - 1] = a4;
    }
    v9 = a3;
LABEL_19:
    if (*((uint64_t *)v9 + 3) > 1)
      return v9;
    v20 = __si_assert_copy_extra_268();
    v21 = v20;
    v22 = "";
    if (v20)
      v22 = v20;
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 501, "sinode->node.mnode.nodeCount>=2", v22);
LABEL_24:
    free(v21);
    if (__valid_fs(-1))
      v23 = 2989;
    else
      v23 = 3072;
    *(_DWORD *)v23 = -559038737;
    abort();
  }
  return v9;
}

uint64_t __si_setup_run_stubquery_block_invoke_2(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  int v5;
  BOOL v6;
  int v7;

  result = a2;
  if (a2 >= 2)
  {
    v5 = *(unsigned __int16 *)(a2 + 40);
    if ((v5 & 0xFFFFFFF7) == 1)
    {
      v6 = (a3 | a4) == 0;
    }
    else
    {
      if ((v5 & 0xFFFFFFF7) != 2)
        return 1;
      if (a3)
        v6 = a4 == 0;
      else
        v6 = 1;
    }
    v7 = !v6;
    return v7 ^ ((v5 & 8) >> 3);
  }
  return result;
}

unsigned int *__evaluateFuzzyQueryForIndex_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t AllWithPrototype;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  const char *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  int v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  NSObject *v43;
  uint64_t v44;
  _DWORD *v45;
  _BYTE *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  NSObject *v57;
  os_log_type_t v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int *v62;
  unsigned int v63;
  void **v64;
  unsigned int *v65;
  unsigned int v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char *v72;
  char *v73;
  const char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  int v81;
  NSObject *v82;
  os_log_type_t v83;
  int v84;
  NSObject *v85;
  int v86;
  NSObject *v87;
  int v88;
  NSObject *v89;
  int v90;
  NSObject *v91;
  int v92;
  NSObject *v93;
  int v94;
  NSObject *v95;
  char *v96;
  const char *v97;
  int v98;
  uint64_t v99;
  char *v100;
  const char *v101;
  uint64_t v102;
  char *v103;
  const char *v104;
  char *v105;
  char *v106;
  const char *v107;
  __int128 v108;
  uint8_t buf[4];
  int v110;
  __int16 v111;
  uint64_t v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v4 = *(_WORD *)(a2 + 40) & 0xFFF7;
  if (v4 > 0xF)
  {
    if (v4 == 16)
    {
      if (dword_1EF19FC90 >= 5)
      {
        v88 = *__error();
        v89 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v89, OS_LOG_TYPE_DEFAULT, "This node is always false.", buf, 2u);
        }
        *__error() = v88;
      }
      if (*MEMORY[0x1E0C85AD8] <= 0x97uLL)
        ++sTotal_4476;
      v9 = *(_QWORD *)(a1 + 48);
      AllWithPrototype = (uint64_t)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
      if (!AllWithPrototype && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      atomic_store(1u, (unsigned int *)AllWithPrototype);
      *(_DWORD *)(AllWithPrototype + 4) = -1073627135;
      *(_QWORD *)(AllWithPrototype + 56) = v9;
      *(_DWORD *)(AllWithPrototype + 48) = 0;
      *(_QWORD *)(AllWithPrototype + 40) = -1;
      v10 = *(_QWORD *)(a2 + 16);
      if (v10)
        v11 = (_DWORD *)(v10 + 56);
      else
        v11 = (_DWORD *)(a2 + 64);
      *(_DWORD *)(AllWithPrototype + 20) = *v11;
      return (unsigned int *)AllWithPrototype;
    }
    if (v4 == 32)
    {
      if (dword_1EF19FC90 >= 5)
      {
        v84 = *__error();
        v85 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v85, OS_LOG_TYPE_DEFAULT, "This node is always true.", buf, 2u);
        }
        *__error() = v84;
      }
      return ContentIndexDocSetCreateAllWithPrototype(*(_QWORD *)(a1 + 48), a2);
    }
LABEL_177:
    v105 = __si_assert_copy_extra_521(*(_DWORD *)(*(_QWORD *)(a1 + 88) + 32));
    v106 = v105;
    v107 = "";
    if (v105)
      v107 = v105;
    __message_assert("%s:%u: failed assertion '%s' %s Bad query node; unexpected type %d",
      "SIQueryC.c",
      5880,
      "0",
      v107,
      *(unsigned __int16 *)(a2 + 40));
    free(v106);
    v98 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 32);
LABEL_163:
    if (__valid_fs(v98))
      v99 = 2989;
    else
      v99 = 3072;
    *(_DWORD *)v99 = -559038737;
    abort();
  }
  if (v4 - 1 < 2)
    return (unsigned int *)a2;
  if (v4 != 4)
    goto LABEL_177;
  if (dword_1EF19FC90 >= 5)
  {
    v86 = *__error();
    v87 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v87, OS_LOG_TYPE_DEFAULT, "Factor.", buf, 2u);
    }
    *__error() = v86;
  }
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 + 32);
  if (*(_BYTE *)(a1 + 96) || (v8 & 0x800) != 0)
  {
    if ((v8 & 0x800) != 0)
    {
      v18 = 0;
      **(_BYTE **)(a1 + 40) = 1;
      v19 = *(unsigned __int16 *)(a2 + 40);
      if (v19 == 4 && v7)
        v18 = (*(_DWORD *)(v7 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v7 + 24));
      v20 = *(_QWORD *)(a1 + 48);
      v21 = (v19 >> 3) & 1;
      v22 = *MEMORY[0x1E0C85AD8];
      if (v18 == v21)
      {
        if (v22 <= 0x97)
          ++sTotal_4476;
        AllWithPrototype = (uint64_t)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
        if (!AllWithPrototype && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
        atomic_store(1u, (unsigned int *)AllWithPrototype);
        *(_DWORD *)(AllWithPrototype + 4) = -1073627135;
        *(_QWORD *)(AllWithPrototype + 56) = v20;
        *(_DWORD *)(AllWithPrototype + 48) = 1;
        *(_QWORD *)(AllWithPrototype + 40) = -1;
        v23 = *(_QWORD *)(a2 + 16);
        v24 = (_DWORD *)(v23 + 52);
      }
      else
      {
        if (v22 <= 0x97)
          ++sTotal_4476;
        AllWithPrototype = (uint64_t)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
        if (!AllWithPrototype && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
        atomic_store(1u, (unsigned int *)AllWithPrototype);
        *(_DWORD *)(AllWithPrototype + 4) = -1073627135;
        *(_QWORD *)(AllWithPrototype + 56) = v20;
        *(_DWORD *)(AllWithPrototype + 48) = 0;
        *(_QWORD *)(AllWithPrototype + 40) = -1;
        v23 = *(_QWORD *)(a2 + 16);
        v24 = (_DWORD *)(v23 + 56);
      }
      if (v23)
        v45 = v24;
      else
        v45 = (_DWORD *)(a2 + 64);
      *(_DWORD *)(AllWithPrototype + 20) = *v45;
      *(_DWORD *)(AllWithPrototype + 52) = 3;
      return (unsigned int *)AllWithPrototype;
    }
  }
  else if (expensiveNodeCheck(*(_QWORD *)(a2 + 16)))
  {
    **(_BYTE **)(a1 + 40) = 1;
    AllWithPrototype = (uint64_t)ContentIndexDocSetCreateAllWithPrototype(*(_QWORD *)(a1 + 48), a2);
    *(_DWORD *)(AllWithPrototype + 52) = 3;
    return (unsigned int *)AllWithPrototype;
  }
  if (dword_1EF19FC90 >= 5)
  {
    v90 = *__error();
    v91 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v91, OS_LOG_TYPE_DEFAULT, "Metadata or Content.", buf, 2u);
    }
    *__error() = v90;
    v7 = *(_QWORD *)(a2 + 16);
  }
  v12 = *(_DWORD *)(v7 + 24);
  if ((v12 - 11) < 2)
  {
    if (dword_1EF19FC90 >= 5)
    {
      v92 = *__error();
      v93 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B8270000, v93, OS_LOG_TYPE_DEFAULT, "Range query.", buf, 2u);
      }
      *__error() = v92;
      v7 = *(_QWORD *)(a2 + 16);
    }
    if (*(_DWORD *)(v7 + 40) == 2)
    {
      v13 = *(uint64_t **)(a1 + 64);
      v14 = *v13;
      AllWithPrototype = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * *v13);
      if (!AllWithPrototype)
      {
        v15 = __si_assert_copy_extra_521(-1);
        v16 = v15;
        v17 = "";
        if (v15)
          v17 = v15;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 5736, "holder", v17);
LABEL_162:
        free(v16);
        v98 = -1;
        goto LABEL_163;
      }
      goto LABEL_112;
    }
    v34 = *__error();
    v35 = _SILogForLogForCategory(1);
    v36 = dword_1EF19FC90 < 3;
    if (os_log_type_enabled(v35, (os_log_type_t)(dword_1EF19FC90 < 3)))
    {
      v37 = *(_DWORD *)(*(_QWORD *)(a2 + 16) + 40);
      *(_DWORD *)buf = 67109120;
      v110 = v37;
      _os_log_impl(&dword_1B8270000, v35, v36, "*warn* Too few arguments for query: %d", buf, 8u);
    }
    *__error() = v34;
    v39 = *(_QWORD *)(a2 + 16);
    if (*(int *)(v39 + 40) >= 1)
    {
      v40 = 0;
      v41 = dword_1EF19FC90;
      *(_QWORD *)&v38 = 67109378;
      do
      {
        if (v41 >= 5)
        {
          v108 = v38;
          v42 = *__error();
          v43 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 168) + 8 * v40);
            *(_DWORD *)buf = v108;
            v110 = v40;
            v111 = 2080;
            v112 = v44;
            _os_log_impl(&dword_1B8270000, v43, OS_LOG_TYPE_DEFAULT, "%d: %s", buf, 0x12u);
          }
          *__error() = v42;
          v41 = dword_1EF19FC90;
          v39 = *(_QWORD *)(a2 + 16);
          v38 = v108;
        }
        ++v40;
      }
      while (v40 < *(int *)(v39 + 40));
    }
    return ContentIndexDocSetCreateEmpty(*(_QWORD *)(a1 + 48));
  }
  if (v12 != 15)
  {
    if (**(_BYTE **)v7 == 42 && v12 == 1 && !*(_BYTE *)(*(_QWORD *)v7 + 1))
    {
      v46 = *(_BYTE **)(v7 + 72);
      if (*v46 == 42 && !v46[1])
      {
        v81 = *__error();
        v82 = _SILogForLogForCategory(1);
        v83 = 2 * (dword_1EF19FC90 < 4);
        if (os_log_type_enabled(v82, v83))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v82, v83, "Found *=* query", buf, 2u);
        }
        *__error() = v81;
        AllWithPrototype = (uint64_t)ContentIndexDocSetCreateAllWithPrototype(*(_QWORD *)(a1 + 48), a2);
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
        return (unsigned int *)AllWithPrototype;
      }
    }
    v47 = *(_QWORD *)(v7 + 32);
    v48 = *(_QWORD **)(a1 + 64);
    v49 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 8 * *v48);
    if ((v47 & 0x400000) != 0)
    {
      AllWithPrototype = ContentIndexDocSetUnionLazy(2, v49, *(float *)(a2 + 64));
      v50 = *(_QWORD *)(a1 + 56);
      v51 = *(_QWORD **)(a1 + 64);
      v52 = (*v51)++;
      ContentIndexDocSetDispose(*(_QWORD *)(v50 + 8 * v52));
      v53 = *(_QWORD *)(a1 + 56);
      v54 = *(_QWORD **)(a1 + 64);
      v55 = (*v54)++;
      ContentIndexDocSetDispose(*(_QWORD *)(v53 + 8 * v55));
      v7 = *(_QWORD *)(a2 + 16);
      v47 = *(_QWORD *)(v7 + 32);
    }
    else
    {
      AllWithPrototype = *v49;
      if (!*v49)
      {
        v100 = __si_assert_copy_extra_521(-1);
        v73 = v100;
        v101 = "";
        if (v100)
          v101 = v100;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 5811, "holder", v101);
LABEL_170:
        free(v73);
        if (__valid_fs(-1))
          v102 = 2989;
        else
          v102 = 3072;
        *(_DWORD *)v102 = -559038737;
        abort();
      }
      ++*v48;
    }
    if ((v47 & 0x400) != 0 && (v47 & 0x6000000000) != 0)
    {
      if (*(_DWORD *)(v7 + 96))
      {
        v56 = *__error();
        v57 = _SILogForLogForCategory(1);
        v58 = 2 * (dword_1EF19FC90 < 4);
        if (os_log_type_enabled(v57, v58))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v57, v58, "Found custom proximity query", buf, 2u);
        }
        *__error() = v56;
        if ((ContentIndexDocSetSetProximities(AllWithPrototype, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 96), *(const void **)(*(_QWORD *)(a2 + 16) + 88)) & 1) == 0)*(_QWORD *)(*(_QWORD *)(a2 + 16) + 32) &= 0xFFFFFF9FFFFFFFFFLL;
      }
      if (*(_BYTE *)(a1 + 97))
        *(_QWORD *)(AllWithPrototype + 144) = *(_QWORD *)(a1 + 80);
    }
    goto LABEL_113;
  }
  if (dword_1EF19FC90 >= 5)
  {
    v94 = *__error();
    v95 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v95, OS_LOG_TYPE_DEFAULT, "Vector query.", buf, 2u);
    }
    *__error() = v94;
  }
  AllWithPrototype = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * **(_QWORD **)(a1 + 64));
  if (!AllWithPrototype)
  {
    v96 = __si_assert_copy_extra_521(-1);
    v16 = v96;
    v97 = "";
    if (v96)
      v97 = v96;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 5755, "holder", v97);
    goto LABEL_162;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(AllWithPrototype + 64) + 72);
  v26 = *(unsigned int **)(a2 + 24);
  if (v25)
  {
    if (!v26)
    {
      v27 = *(_QWORD *)(a1 + 72);
      v28 = *(_QWORD *)(v27 + 24);
      if (v27 == a2 || v28)
      {
        if (v27 != a2 && v28 != v25)
        {
          v103 = __si_assert_copy_extra_521(-1);
          v16 = v103;
          v104 = "";
          if (v103)
            v104 = v103;
          __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 5765, "q->vector_distance_cache == holder->lazyDisk.iter->distances", v104);
          goto LABEL_162;
        }
        v59 = (unsigned int *)(v25 + 32);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 + 1, v59));
        *(_QWORD *)(a2 + 24) = v25;
      }
      else
      {
        v29 = (unsigned int *)(v25 + 32);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 + 1, v29));
        *(_QWORD *)(a2 + 24) = v25;
        v31 = *(_QWORD *)(*(_QWORD *)(AllWithPrototype + 64) + 72);
        v32 = (unsigned int *)(v31 + 32);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 + 1, v32));
        *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) = v31;
      }
      goto LABEL_111;
    }
  }
  else if (!v26)
  {
    v26 = *(unsigned int **)(*(_QWORD *)(a1 + 72) + 24);
    if (v26)
    {
      *(_QWORD *)(a2 + 24) = v26;
    }
    else
    {
      v61 = (unsigned int *)malloc_type_calloc(1uLL, 0x28uLL, 0x10200406E8F4065uLL);
      v26 = v61;
      v62 = v61 + 8;
      atomic_store(1u, v61 + 8);
      *(_QWORD *)(a2 + 24) = v61;
      if (*(_QWORD *)(a1 + 72) != a2)
      {
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 + 1, v62));
        *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24) = v61;
        v26 = *(unsigned int **)(a2 + 24);
      }
    }
  }
  v64 = *(void ***)(*(_QWORD *)(AllWithPrototype + 64) + 72);
  if (v64)
  {
    ReleaseEmbeddingDistances(v64);
    *(_QWORD *)(*(_QWORD *)(AllWithPrototype + 64) + 72) = 0;
  }
  v65 = v26 + 8;
  do
    v66 = __ldaxr(v65);
  while (__stlxr(v66 + 1, v65));
  *(_QWORD *)(*(_QWORD *)(AllWithPrototype + 64) + 72) = v26;
LABEL_111:
  v13 = *(uint64_t **)(a1 + 64);
  v14 = *v13;
LABEL_112:
  *v13 = v14 + 1;
LABEL_113:
  if (*(_QWORD *)(a2 + 16))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v67 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v67 = 0;
  }
  if (*(float *)(v67 + 52) != 0.0 || *(float *)(v67 + 56) != 0.0)
  {
    v68 = *(float *)(a2 + 64);
    if (v68 == 0.0)
      v68 = 1.0;
    *(float32x2_t *)(AllWithPrototype + 12) = vmul_n_f32(*(float32x2_t *)(v67 + 52), v68);
  }
  v69 = *(_QWORD *)(v67 + 120);
  if (v69)
  {
    if (*(_DWORD *)(v69 + 48) == 3)
    {
      v70 = *(_QWORD *)(v69 + 64);
      if (*(_QWORD *)(v70 + 136))
      {
        if (!AllWithPrototype)
        {
LABEL_128:
          v72 = __si_assert_copy_extra_268();
          v73 = v72;
          v74 = "";
          if (v72)
            v74 = v72;
          __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexQuery.c", 1770, "!(!target || target->docIdSetType==Empty || target->docIdSetType==Mute)", v74);
          goto LABEL_170;
        }
        v71 = *(_DWORD *)(AllWithPrototype + 48);
        if (v71 == 3)
        {
          v75 = *(_QWORD *)(AllWithPrototype + 64);
          v76 = *(_OWORD *)(v70 + 144);
          *(_OWORD *)(v75 + 128) = *(_OWORD *)(v70 + 128);
          *(_OWORD *)(v75 + 144) = v76;
          *(_QWORD *)(*(_QWORD *)(v69 + 64) + 128) = 0;
          *(_QWORD *)(*(_QWORD *)(v69 + 64) + 144) = 0;
          *(_QWORD *)(*(_QWORD *)(v69 + 64) + 136) = 0;
        }
        else if (v71 == 2 || !v71)
        {
          goto LABEL_128;
        }
      }
    }
    ContentIndexDocSetDispose(v69);
    v77 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(v77 + 120) = 0;
    *(_QWORD *)(v77 + 128) = 0;
  }
  if (AllWithPrototype && *(_DWORD *)(AllWithPrototype + 48))
  {
    do
      v78 = __ldaxr((unsigned int *)AllWithPrototype);
    while (__stlxr(v78 + 1, (unsigned int *)AllWithPrototype));
    v79 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(v79 + 120) = AllWithPrototype;
    *(_QWORD *)(v79 + 128) = ContentIndexDocSetDispose;
  }
  return (unsigned int *)AllWithPrototype;
}

_QWORD *__db_sanitize_query_tree_block_invoke_3(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  result = a2;
  if (a2)
  {
    *a2 = a3;
    a2[1] = a4;
  }
  return result;
}

uint64_t ___ZL23cacheQPDataForPostCheckRP20SISearchCtx_METADATAP10query_node_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Value;
  char *v7;
  char *v8;
  const char *v9;
  uint64_t v10;
  unsigned int v11;
  int v13;
  _DWORD __dst[76];

  if ((*(_WORD *)(a2 + 40) & 0xFFF7) == 4)
  {
    v3 = *(_QWORD *)(a2 + 16);
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 33) & 8) == 0)
      {
        v4 = *(_QWORD *)(a1 + 32);
        v5 = *(_QWORD *)(a2 + 32);
        if ((unint64_t)(v5 + 1) >= 2)
          ContentIndexDocSetDispose(v5);
        Value = *(_QWORD *)(v3 + 120);
        if (Value)
        {
          if (*(void (**)(uint64_t))(v3 + 128) != ContentIndexDocSetDispose)
          {
            v7 = __si_assert_copy_extra_268();
            v8 = v7;
            v9 = "";
            if (v7)
              v9 = v7;
            __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 410, "node->qp->_free_cache_data == (void (*)(void*))ContentIndexDocSetDispose", v9);
            free(v8);
            if (__valid_fs(-1))
              v10 = 2989;
            else
              v10 = 3072;
            *(_DWORD *)v10 = -559038737;
            abort();
          }
        }
        else
        {
          Value = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)v4 + 216), (const void *)v3);
          if (!Value)
          {
            if ((*(_DWORD *)(v3 + 24) - 5) > 1
              || ((memcpy(__dst, (const void *)v3, sizeof(__dst)), (__dst[6] - 16) >= 0xFFFFFFF1)
                ? (v13 = dword_1B8631838[__dst[6]])
                : (v13 = 0),
                  __dst[6] = v13,
                  (Value = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)v4 + 216), __dst)) == 0))
            {
              Value = -1;
LABEL_14:
              *(_QWORD *)(a2 + 32) = Value;
              return 0;
            }
          }
        }
        do
          v11 = __ldaxr((unsigned int *)Value);
        while (__stlxr(v11 + 1, (unsigned int *)Value));
        goto LABEL_14;
      }
    }
  }
  return 0;
}

void si_query_free(uint64_t a1)
{
  int *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  pthread_mutex_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 *v37;
  _QWORD *v38;
  _QWORD *v39;
  const void *v40;
  const __CFArray *v41;
  CFIndex Count;
  CFIndex v43;
  uint64_t i;
  const void *v45;
  const void *v46;
  int v47;
  NSObject *v48;
  int v49;
  NSObject *v50;
  CFStringRef node_unique_set_copy_description;
  int *v52;
  CFStringRef v53;
  int v54;
  NSObject *v55;
  CFStringRef v56;
  __int128 v57;
  uint64_t (*v58)(uint64_t);
  void *v59;
  void *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v2 = (int *)&unk_1EF19F000;
  if (dword_1EF19FC90 >= 5)
  {
    v47 = *__error();
    v48 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v57) = 134217984;
      *(_QWORD *)((char *)&v57 + 4) = a1;
      _os_log_impl(&dword_1B8270000, v48, OS_LOG_TYPE_DEFAULT, "%p: Query completely done", (uint8_t *)&v57, 0xCu);
    }
    *__error() = v47;
  }
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(const void **)(a1 + 16);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)(a1 + 48);
  if (v5)
    CFRelease(v5);
  *(_QWORD *)(a1 + 48) = 0;
  v6 = *(const void **)(a1 + 40);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)(a1 + 40) = 0;
  v7 = *(const void **)(a1 + 192);
  if (v7)
    CFRelease(v7);
  *(_QWORD *)(a1 + 192) = 0;
  v8 = *(const void **)(a1 + 176);
  if (v8)
    CFRelease(v8);
  *(_QWORD *)(a1 + 176) = 0;
  v9 = *(const void **)(a1 + 184);
  if (v9)
    CFRelease(v9);
  *(_QWORD *)(a1 + 184) = 0;
  v10 = *(const void **)(a1 + 240);
  if (v10)
    CFRelease(v10);
  *(_QWORD *)(a1 + 240) = 0;
  v11 = *(const void **)(a1 + 576);
  if (v11)
    CFRelease(v11);
  *(_QWORD *)(a1 + 576) = 0;
  v12 = *(const void **)(a1 + 24);
  if (v12)
    CFRelease(v12);
  *(_QWORD *)(a1 + 24) = 0;
  v13 = *(_QWORD **)(a1 + 72);
  v14 = MEMORY[0x1E0C809B0];
  if (v13)
  {
    *(_QWORD *)&v57 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v57 + 1) = 0x40000000;
    v58 = __db_query_tree_apply_block_block_invoke;
    v59 = &unk_1E6E377F8;
    v60 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta(v13, (uint64_t)&v57, 0);
  }
  v15 = *(_QWORD **)(a1 + 64);
  if (v15)
  {
    *(_QWORD *)&v57 = v14;
    *((_QWORD *)&v57 + 1) = 0x40000000;
    v58 = __db_query_tree_apply_block_block_invoke;
    v59 = &unk_1E6E377F8;
    v60 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta(v15, (uint64_t)&v57, 0);
  }
  v16 = *(_QWORD **)(a1 + 80);
  if (v16)
  {
    *(_QWORD *)&v57 = v14;
    *((_QWORD *)&v57 + 1) = 0x40000000;
    v58 = __db_query_tree_apply_block_block_invoke;
    v59 = &unk_1E6E377F8;
    v60 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta(v16, (uint64_t)&v57, 0);
  }
  v17 = *(_QWORD **)(a1 + 88);
  if (v17)
  {
    *(_QWORD *)&v57 = v14;
    *((_QWORD *)&v57 + 1) = 0x40000000;
    v58 = __db_query_tree_apply_block_block_invoke;
    v59 = &unk_1E6E377F8;
    v60 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta(v17, (uint64_t)&v57, 0);
  }
  v18 = *(_QWORD **)(a1 + 96);
  if (v18)
  {
    *(_QWORD *)&v57 = v14;
    *((_QWORD *)&v57 + 1) = 0x40000000;
    v58 = __db_query_tree_apply_block_block_invoke;
    v59 = &unk_1E6E377F8;
    v60 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta(v18, (uint64_t)&v57, 0);
  }
  v19 = *(const void **)(a1 + 736);
  if (v19)
  {
    CFRelease(v19);
    *(_QWORD *)(a1 + 736) = 0;
  }
  v20 = *(const void **)(a1 + 656);
  if (v20)
    CFRelease(v20);
  *(_QWORD *)(a1 + 656) = 0;
  v21 = *(const void **)(a1 + 680);
  if (v21)
    CFRelease(v21);
  *(_QWORD *)(a1 + 680) = 0;
  v22 = *(const void **)(a1 + 696);
  if (v22)
    CFRelease(v22);
  *(_QWORD *)(a1 + 696) = 0;
  v23 = *(const void **)(a1 + 704);
  if (v23)
    CFRelease(v23);
  *(_QWORD *)(a1 + 704) = 0;
  v24 = *(const void **)(a1 + 712);
  if (v24)
    CFRelease(v24);
  *(_QWORD *)(a1 + 712) = 0;
  v25 = *(pthread_mutex_t **)(a1 + 120);
  if (v25)
  {
    v26 = *(_QWORD **)(a1 + 104);
    if (v26)
    {
      query_node_unique_release(v25, v26);
      if (dword_1EF19FC90 >= 5)
      {
        v49 = *__error();
        v50 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          node_unique_set_copy_description = _query_node_unique_set_copy_description(*(pthread_mutex_t **)(a1 + 120));
          LODWORD(v57) = 138412290;
          *(_QWORD *)((char *)&v57 + 4) = node_unique_set_copy_description;
          _os_log_impl(&dword_1B8270000, v50, OS_LOG_TYPE_DEFAULT, "live query nodes: %@", (uint8_t *)&v57, 0xCu);
          v52 = __error();
          v53 = node_unique_set_copy_description;
          v2 = (_DWORD *)&unk_1EF19F000;
          *v52 = v49;
          if (v53)
            CFRelease(v53);
        }
        else
        {
          *__error() = v49;
        }
      }
    }
    v27 = *(_QWORD **)(a1 + 112);
    if (v27)
    {
      query_node_unique_release(*(pthread_mutex_t **)(a1 + 120), v27);
      if (v2[804] >= 5)
      {
        v54 = *__error();
        v55 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          v56 = _query_node_unique_set_copy_description(*(pthread_mutex_t **)(a1 + 120));
          LODWORD(v57) = 138412290;
          *(_QWORD *)((char *)&v57 + 4) = v56;
          _os_log_impl(&dword_1B8270000, v55, OS_LOG_TYPE_DEFAULT, "live filter query nodes: %@", (uint8_t *)&v57, 0xCu);
          *__error() = v54;
          if (v56)
            CFRelease(v56);
        }
        else
        {
          *__error() = v54;
        }
      }
    }
    query_node_unique_set_release(*(_QWORD *)(a1 + 120));
  }
  v28 = *(_QWORD **)(a1 + 272);
  if (v28)
  {
    *(_QWORD *)&v57 = v14;
    *((_QWORD *)&v57 + 1) = 0x40000000;
    v58 = __db_query_tree_apply_block_block_invoke;
    v59 = &unk_1E6E377F8;
    v60 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta(v28, (uint64_t)&v57, 0);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v29 = *(void **)(a1 + 128);
  if (v29)
  {
    if (*(uint64_t *)(a1 + 136) >= 1)
    {
      v30 = 0;
      v31 = 0;
      do
      {
        siquerynode_release(*(int **)(*(_QWORD *)(a1 + 128) + v30));
        siquerynode_release(*(int **)(*(_QWORD *)(a1 + 128) + v30 + 8));
        ++v31;
        v30 += 16;
      }
      while (v31 < *(_QWORD *)(a1 + 136));
      v29 = *(void **)(a1 + 128);
    }
    free(v29);
  }
  v32 = *(void **)(a1 + 248);
  if (v32)
  {
    if (*(uint64_t *)(a1 + 256) >= 1)
    {
      v33 = 0;
      do
      {
        db_free_query_node(*(_QWORD **)(*(_QWORD *)(a1 + 248) + 8 * v33));
        *(_QWORD *)(*(_QWORD *)(a1 + 248) + 8 * v33++) = 0;
      }
      while (v33 < *(_QWORD *)(a1 + 256));
      v32 = *(void **)(a1 + 248);
    }
    free(v32);
  }
  v34 = *(void **)(a1 + 264);
  if (v34)
  {
    if (*(uint64_t *)(a1 + 288) >= 1)
    {
      v35 = 0;
      v36 = 0;
      do
      {
        v37 = (__int128 *)(*(_QWORD *)(a1 + 264) + v35);
        v57 = *v37;
        v58 = (uint64_t (*)(uint64_t))*((_QWORD *)v37 + 2);
        destroy_lifting_rule((uint64_t)&v57);
        ++v36;
        v35 += 24;
      }
      while (v36 < *(_QWORD *)(a1 + 288));
      v34 = *(void **)(a1 + 264);
    }
    free(v34);
    *(_QWORD *)(a1 + 264) = 0;
  }
  v38 = *(_QWORD **)(a1 + 280);
  if (v38)
  {
    *(_QWORD *)&v57 = v14;
    *((_QWORD *)&v57 + 1) = 0x40000000;
    v58 = __db_query_tree_apply_block_block_invoke;
    v59 = &unk_1E6E377F8;
    v60 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta(v38, (uint64_t)&v57, 0);
  }
  v39 = *(_QWORD **)(a1 + 224);
  if (v39)
  {
    *(_QWORD *)&v57 = v14;
    *((_QWORD *)&v57 + 1) = 0x40000000;
    v58 = __db_query_tree_apply_block_block_invoke;
    v59 = &unk_1E6E377F8;
    v60 = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta(v39, (uint64_t)&v57, 0);
  }
  v40 = *(const void **)(a1 + 664);
  if (v40)
    CFRelease(v40);
  *(_QWORD *)(a1 + 664) = 0;
  v41 = *(const __CFArray **)(a1 + 720);
  if (v41)
  {
    if (!*(_QWORD *)(a1 + 728))
      goto LABEL_82;
    Count = CFArrayGetCount(v41);
    if (Count >= 1)
    {
      v43 = Count;
      for (i = 0; i != v43; ++i)
        db_free_query_node(*(_QWORD **)(*(_QWORD *)(a1 + 728) + 8 * i));
    }
    free(*(void **)(a1 + 728));
    v41 = *(const __CFArray **)(a1 + 720);
    if (v41)
LABEL_82:
      CFRelease(v41);
    *(_QWORD *)(a1 + 720) = 0;
  }
  v45 = *(const void **)(a1 + 744);
  if (v45)
    CFRelease(v45);
  *(_QWORD *)(a1 + 744) = 0;
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  *(_QWORD *)a1 = 0;
  v46 = *(const void **)(a1 + 32);
  if (v46)
    CFRelease(v46);
  *(_QWORD *)(a1 + 32) = 0;
  free(*(void **)(a1 + 600));
  free((void *)a1);
}

void ___ZL19_evaluateFuzzyQueryP20SISearchCtx_METADATAP14__ContentIndexPP19_ContentIndexDocSetPm_block_invoke(uint64_t a1, void *key, void *value)
{
  uint64_t v5;
  __CFDictionary *Mutable;

  v5 = *(_QWORD *)(a1 + 32);
  Mutable = *(__CFDictionary **)(v5 + 216);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)kCIQueryZoneAllocator, 0, &dbqpDictionaryKeyCallbacks, &kCIDocSetCallbacks);
    *(_QWORD *)(v5 + 216) = Mutable;
  }
  CFDictionarySetValue(Mutable, key, value);
}

uint64_t __query_push_negation_to_leaves_block_invoke(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = a2;
  v4 = *(unsigned __int8 *)a3;
  v5 = *(unsigned __int16 *)(a2 + 40);
  if ((v5 & 8) != 0)
  {
    v5 &= ~8u;
    *(_WORD *)(a2 + 40) = v5;
    *a3 = (_DWORD)v4 == 0;
    if ((_DWORD)v4)
      return result;
  }
  else
  {
    *a3 = v4;
    if (!(_DWORD)v4)
      return result;
  }
  switch(v5)
  {
    case 1:
      *(_WORD *)(a2 + 40) = 2;
      break;
    case 2:
      *(_WORD *)(a2 + 40) = 1;
      break;
    case 4:
      v6 = *(_QWORD *)(a2 + 16);
      v7 = *(unsigned int *)(v6 + 24);
      if ((v7 - 16) >= 0xFFFFFFF1)
        *(_DWORD *)(v6 + 24) = dword_1B8631838[v7];
      else
        *(_DWORD *)(v6 + 24) = 0;
      break;
    case 16:
      *(_WORD *)(a2 + 40) = 32;
      break;
    case 32:
      *(_WORD *)(a2 + 40) = 16;
      break;
    default:
      return result;
  }
  return result;
}

unsigned int *ContentIndexDocSetIntersectionLazy(uint64_t a1, unsigned int **a2, float a3)
{
  unsigned int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned int **v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  float v14;
  float v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  size_t *v22;
  uint64_t v23;
  unsigned int *v24;
  size_t v25;
  void *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  __int16 v37[8];
  uint8_t buf[16];

  if (a1 < 1)
  {
    v9 = 0;
    v8 = 0;
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = a2;
    v11 = a1;
    do
    {
      v12 = *v10;
      v13 = (*v10)[12];
      if ((v13 | 2) == 2)
      {
        if (!v13)
          ++v7;
        v14 = *((float *)v12 + 5);
        if (v14 == 1.0)
        {
          v14 = *((float *)v12 + 4);
          if (v14 == 0.0)
            v14 = 1.0;
        }
        a3 = v14 + a3;
        v8 = 1;
      }
      if (v13 == 1)
      {
        v15 = *((float *)v12 + 5);
        if (v15 == 1.0)
        {
          v15 = *((float *)v12 + 3);
          if (v15 == 0.0)
            v15 = 1.0;
        }
        ++v9;
        a3 = v15 + a3;
      }
      v6 |= v12[13];
      ++v10;
      --v11;
    }
    while (v11);
  }
  if (v9 == a1)
  {
    v16 = *a2;
    v17 = (*a2)[13];
    if (v17 <= v6)
      v17 = v6;
    v16[13] = v17;
    *((float *)v16 + 5) = a3;
    do
      v18 = __ldaxr(v16);
    while (__stlxr(v18 + 1, v16));
  }
  else
  {
    v16 = *a2;
    if (v7 == a1)
    {
      v19 = v16[13];
      if (v19 <= v6)
        v19 = v6;
      v16[13] = v19;
      *((float *)v16 + 5) = a3;
      do
        v20 = __ldaxr(v16);
      while (__stlxr(v20 + 1, v16));
    }
    else
    {
      if ((v8 & 1) != 0)
        v21 = 2;
      else
        v21 = 5;
      v22 = (size_t *)MEMORY[0x1E0C85AD8];
      if (*MEMORY[0x1E0C85AD8] <= 0x97uLL)
        ++sTotal_4476;
      v23 = *((_QWORD *)v16 + 7);
      v24 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
      if (!v24 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        v37[0] = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v37, 2u);
      }
      atomic_store(1u, v24);
      v24[1] = -1073627135;
      *((_QWORD *)v24 + 7) = v23;
      *((_QWORD *)v24 + 5) = -1;
      v24[12] = v21;
      v24[13] = v6;
      v25 = 8 * a1;
      if (!((unint64_t)a1 >> 14) && *v22 < v25)
        ++sTotal_4476;
      v26 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v25, 0x31F9A007uLL);
      if (!v26 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      *((_QWORD *)v24 + 9) = v26;
      if (a1 >= 1)
      {
        v27 = 0;
        v28 = 0;
        do
        {
          v29 = a2[v27];
          if (v28 != v29)
          {
            if (v29)
            {
              if (v29[12] >= 2)
              {
                do
                  v30 = __ldaxr(v29);
                while (__stlxr(v30 + 1, v29));
                v31 = *((_QWORD *)v24 + 9);
                v32 = v24[24];
                v24[24] = v32 + 1;
                *(_QWORD *)(v31 + 8 * v32) = v29;
                v28 = a2[v27];
              }
              else
              {
                v28 = a2[v27];
              }
            }
            else
            {
              v28 = 0;
            }
          }
          ++v27;
        }
        while (v27 != a1);
      }
      if (v24[24] == 1)
      {
        v33 = **((_QWORD **)v24 + 9);
        v34 = *(_DWORD *)(v33 + 52);
        if (v34 <= v6)
          v34 = v6;
        *(_DWORD *)(v33 + 52) = v34;
        v16 = (unsigned int *)**((_QWORD **)v24 + 9);
        if (v16)
        {
          do
            v35 = __ldaxr(v16);
          while (__stlxr(v35 + 1, v16));
        }
        ContentIndexDocSetDispose((uint64_t)v24);
      }
      else
      {
        v16 = v24;
      }
      *((float *)v16 + 5) = a3;
    }
  }
  return v16;
}

_QWORD *__query_node_unique_retain_block_invoke_2(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  _QWORD *Value;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  void *v15;

  v5 = a2;
  if (a2 && a3 && a4)
  {
    *a2 = a3;
    a2[1] = a4;
    Value = CFBagGetValue(*(CFBagRef *)(*(_QWORD *)(a1 + 32) + 64), a2);
    if (Value)
    {
      v8 = Value;
      *v5 = 0;
      v5[1] = 0;
      v11 = MEMORY[0x1E0C809B0];
      v12 = 0x40000000;
      v13 = __db_query_tree_apply_block_block_invoke;
      v14 = &unk_1E6E377F8;
      v15 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(v5, (uint64_t)&v11, 0);
      v5 = v8;
    }
    *((_DWORD *)v5 + 11) = *(_DWORD *)(*v5 + 44) + *(_DWORD *)(v5[1] + 44);
    CFBagAddValue(*(CFMutableBagRef *)(*(_QWORD *)(a1 + 32) + 64), v5);
  }
  else
  {
    v9 = MEMORY[0x1E0C809B0];
    if (a3)
    {
      v11 = MEMORY[0x1E0C809B0];
      v12 = 0x40000000;
      v13 = __db_query_tree_apply_block_block_invoke;
      v14 = &unk_1E6E377F8;
      v15 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(a3, (uint64_t)&v11, 0);
    }
    if (a4)
    {
      v11 = v9;
      v12 = 0x40000000;
      v13 = __db_query_tree_apply_block_block_invoke;
      v14 = &unk_1E6E377F8;
      v15 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(a4, (uint64_t)&v11, 0);
    }
    free(v5);
    return 0;
  }
  return v5;
}

uint64_t negateQuery(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  __int16 v4;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    switch(*(_DWORD *)(v1 + 24))
    {
      case 1:
        v2 = 5;
        break;
      case 2:
        v2 = 6;
        break;
      case 3:
        v2 = 8;
        break;
      case 4:
        v2 = 7;
        break;
      case 5:
        v2 = 1;
        break;
      case 6:
        v2 = 2;
        break;
      case 7:
        v2 = 4;
        break;
      case 8:
        v2 = 3;
        break;
      case 0xB:
        v2 = 12;
        break;
      case 0xC:
        v2 = 11;
        break;
      case 0xD:
        v2 = 14;
        break;
      case 0xE:
        v2 = 13;
        break;
      default:
        goto LABEL_4;
    }
    *(_DWORD *)(v1 + 24) = v2;
  }
  else
  {
LABEL_4:
    v3 = *(unsigned __int16 *)(result + 40);
    if (v3 == 16)
    {
      v4 = 32;
    }
    else if (v3 == 32)
    {
      v4 = 16;
    }
    else
    {
      v4 = v3 ^ 8;
    }
    *(_WORD *)(result + 40) = v4;
  }
  return result;
}

unsigned int *ContentIndexDocSetCreateAllWithPrototype(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;
  __int16 v8[8];

  if (*MEMORY[0x1E0C85AD8] <= 0x97uLL)
    ++sTotal_4476;
  v4 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
  if (!v4 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    v8[0] = 0;
    _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v8, 2u);
  }
  atomic_store(1u, v4);
  v4[1] = -1073627135;
  *((_QWORD *)v4 + 7) = a1;
  v4[12] = 1;
  *((_QWORD *)v4 + 5) = -1;
  if (a2)
  {
    v5 = *(_QWORD *)(a2 + 16);
    if (v5)
      v6 = *(_DWORD *)(v5 + 52);
    else
      v6 = *(_DWORD *)(a2 + 64);
  }
  else
  {
    v6 = 0;
  }
  v4[5] = v6;
  return v4;
}

unsigned int *ContentIndexDocSetExceptLazy(uint64_t a1, unsigned int *a2, float a3)
{
  int v4;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  __int16 v25[8];
  uint8_t buf[16];
  uint8_t v27[16];

  v4 = *(_DWORD *)(a1 + 48);
  if (!v4)
  {
    do
      v10 = __ldaxr((unsigned int *)a1);
    while (__stlxr(v10 + 1, (unsigned int *)a1));
    return (unsigned int *)a1;
  }
  v7 = a2[12];
  v6 = a2[13];
  v8 = v6 | *(_DWORD *)(a1 + 52);
  if (v7 == 1)
  {
    if (v6)
    {
      *(_DWORD *)(a1 + 52) = v8;
      do
        v11 = __ldaxr((unsigned int *)a1);
      while (__stlxr(v11 + 1, (unsigned int *)a1));
      return (unsigned int *)a1;
    }
    if (*MEMORY[0x1E0C85AD8] <= 0x97uLL)
      ++sTotal_4476;
    v23 = *(_QWORD *)(a1 + 56);
    v24 = *(_DWORD *)(a1 + 16);
    v12 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
    if (!v12 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      v25[0] = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v25, 2u);
    }
    atomic_store(1u, v12);
    v12[1] = -1073627135;
    *((_QWORD *)v12 + 7) = v23;
    v12[12] = 0;
    *((_QWORD *)v12 + 5) = -1;
    v12[5] = v24;
  }
  else
  {
    if (!v7)
    {
      do
        v9 = __ldaxr((unsigned int *)a1);
      while (__stlxr(v9 + 1, (unsigned int *)a1));
      return (unsigned int *)a1;
    }
    if (v4 == 1)
    {
      v12 = ContentIndexDocSetNotLazy((uint64_t)a2, a3);
      v12[13] = v8;
    }
    else
    {
      v14 = (_QWORD *)MEMORY[0x1E0C85AD8];
      if (*MEMORY[0x1E0C85AD8] <= 0x97uLL)
        ++sTotal_4476;
      v15 = *(_QWORD *)(a1 + 56);
      v12 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
      if (!v12 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      atomic_store(1u, v12);
      v12[1] = -1073627135;
      *((_QWORD *)v12 + 7) = v15;
      *((_QWORD *)v12 + 5) = -1;
      v12[12] = 7;
      v12[13] = v8;
      if (*v14 <= 0xFuLL)
        ++sTotal_4476;
      v16 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x10uLL, 0x31F9A007uLL);
      if (!v16 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v27 = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v27, 2u);
      }
      *((_QWORD *)v12 + 9) = v16;
      do
        v17 = __ldaxr((unsigned int *)a1);
      while (__stlxr(v17 + 1, (unsigned int *)a1));
      v18 = *((_QWORD *)v12 + 9);
      v19 = v12[24];
      v12[24] = v19 + 1;
      *(_QWORD *)(v18 + 8 * v19) = a1;
      do
        v20 = __ldaxr(a2);
      while (__stlxr(v20 + 1, a2));
      v21 = *((_QWORD *)v12 + 9);
      v22 = v12[24];
      v12[24] = v22 + 1;
      *(_QWORD *)(v21 + 8 * v22) = a2;
    }
  }
  return v12;
}

uint64_t __RLEOIDArrayInit(char *a1)
{
  return pthread_rwlock_init((pthread_rwlock_t *)(a1 + 16), 0);
}

BOOL PropertyIdKeyEquals(int a1, int a2)
{
  return ((a2 ^ a1) & 0x3FFFFFF) == 0;
}

uint64_t __enqueue_barrier_with_qos_block_invoke(uint64_t a1)
{
  return work_fun(*(_QWORD *)(a1 + 32));
}

unint64_t ___ZL15prepareFieldIdsP20SISearchCtx_METADATAP19PartialQueryResults_block_invoke(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return (__PAIR64__(*a2 > *a3, *a2) - *a3) >> 32;
}

BOOL SIValidIndex(_BOOL8 result)
{
  unsigned __int8 v1;

  if (result)
  {
    v1 = atomic_load((unsigned __int8 *)(result + 2439));
    return (v1 & 1) == 0;
  }
  return result;
}

void _ContentIndexDocSetRelease(const __CFAllocator *a1, uint64_t a2)
{
  ContentIndexDocSetDispose(a2);
}

uint64_t __serializeDBO_block_invoke(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return (*a2 - *a3);
}

int *si_remove_icon_cache_for_oid(uint64_t a1, unint64_t a2)
{
  char *v4;
  char __str[1024];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  bzero(__str, 0x400uLL);
  v4 = si_cache_relative_path_for_oid(a2, "img", __str, *(unsigned __int8 *)(a1 + 2072));
  if (v4)
    return (int *)unlinkat(*(_DWORD *)(a1 + 32), v4, 0);
  else
    return __error();
}

char *si_cache_relative_path_for_oid(unint64_t a1, const char *a2, char *__str, int a4)
{
  char *v4;

  v4 = __str;
  if (a4)
  {
    if (snprintf(__str, 0x400uLL, "Cache/%x/%llx.%s", HIDWORD(a1), a1, a2) > 0x3FF)
      return 0;
  }
  else
  {
    snprintf(__str, 0x400uLL, "Cache/%4.4x/%4.4x/%4.4x/%lld.%s", HIWORD(a1), WORD2(a1), WORD1(a1), a1, a2);
  }
  return v4;
}

uint64_t cStringHashCallback(const char *a1)
{
  const char *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;

  v1 = a1;
  v2 = -1640531527;
  v3 = strlen(a1);
  if (v3 < 0xC)
  {
    v6 = -1640531527;
    v5 = -1640531527;
    v4 = v3;
  }
  else
  {
    v4 = v3;
    v5 = -1640531527;
    v6 = -1640531527;
    do
    {
      v7 = *((_DWORD *)v1 + 1) + v5;
      v8 = *((_DWORD *)v1 + 2) + v2;
      v9 = (*(_DWORD *)v1 + v6 - (v7 + v8)) ^ (v8 >> 13);
      v10 = (v7 - v8 - v9) ^ (v9 << 8);
      v11 = (v8 - v9 - v10) ^ (v10 >> 13);
      v12 = (v9 - v10 - v11) ^ (v11 >> 12);
      v13 = (v10 - v11 - v12) ^ (v12 << 16);
      v14 = (v11 - v12 - v13) ^ (v13 >> 5);
      v6 = (v12 - v13 - v14) ^ (v14 >> 3);
      v5 = (v13 - v14 - v6) ^ (v6 << 10);
      v2 = (v14 - v6 - v5) ^ (v5 >> 15);
      v1 += 12;
      v4 -= 12;
    }
    while (v4 > 0xB);
  }
  v15 = v2 + v3;
  switch(v4)
  {
    case 1u:
      goto LABEL_17;
    case 2u:
      goto LABEL_16;
    case 3u:
      goto LABEL_15;
    case 4u:
      goto LABEL_14;
    case 5u:
      goto LABEL_13;
    case 6u:
      goto LABEL_12;
    case 7u:
      goto LABEL_11;
    case 8u:
      goto LABEL_10;
    case 9u:
      goto LABEL_9;
    case 0xAu:
      goto LABEL_8;
    case 0xBu:
      v15 += *((unsigned __int8 *)v1 + 10) << 24;
LABEL_8:
      v15 += *((unsigned __int8 *)v1 + 9) << 16;
LABEL_9:
      v15 += *((unsigned __int8 *)v1 + 8) << 8;
LABEL_10:
      v5 += *((unsigned __int8 *)v1 + 7) << 24;
LABEL_11:
      v5 += *((unsigned __int8 *)v1 + 6) << 16;
LABEL_12:
      v5 += *((unsigned __int8 *)v1 + 5) << 8;
LABEL_13:
      v5 += *((unsigned __int8 *)v1 + 4);
LABEL_14:
      v6 += *((unsigned __int8 *)v1 + 3) << 24;
LABEL_15:
      v6 += *((unsigned __int8 *)v1 + 2) << 16;
LABEL_16:
      v6 += *((unsigned __int8 *)v1 + 1) << 8;
LABEL_17:
      v6 += *(unsigned __int8 *)v1;
      break;
    default:
      break;
  }
  v16 = (v6 - v5 - v15) ^ (v15 >> 13);
  v17 = (v5 - v15 - v16) ^ (v16 << 8);
  v18 = (v15 - v16 - v17) ^ (v17 >> 13);
  v19 = (v16 - v17 - v18) ^ (v18 >> 12);
  v20 = (v17 - v18 - v19) ^ (v19 << 16);
  v21 = (v18 - v19 - v20) ^ (v20 >> 5);
  v22 = (v19 - v20 - v21) ^ (v21 >> 3);
  return (v21 - v22 - ((v20 - v21 - v22) ^ (v22 << 10))) ^ (((v20 - v21 - v22) ^ (v22 << 10)) >> 15);
}

uint64_t SIQueryRetain(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 584);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

void SIQueryRelease(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  v1 = (unsigned int *)(a1 + 584);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
    si_query_free(a1);
}

uint64_t si_lqn_retain(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _inflateDBO(uint64_t a1, unsigned int *a2, void **a3, uint64_t a4, int a5, uint64_t a6)
{
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void (*v57)(_QWORD);
  _DWORD *v58;
  int v59;
  NSObject *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  _DWORD *v64;
  unsigned int *v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  gid_t v70;
  unint64_t v71;
  unint64_t v72;
  unsigned int v73;
  int v74;
  int v75;
  unint64_t v76;
  __int16 v77;
  unsigned int *v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  __int16 field_tags_for_id_locked;
  uint64_t v83;
  __int16 v84;
  _DWORD *v85;
  int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  uint64_t v93;
  size_t v94;
  size_t v95;
  size_t v96;
  unsigned int *v97;
  char *v98;
  char *v99;
  unsigned int v100;
  __int16 v101;
  __int16 v102;
  __int16 v103;
  __int16 v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  gid_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unsigned int v116;
  int v117;
  int v118;
  unint64_t v119;
  __int16 v120;
  unsigned int *v121;
  unsigned int v122;
  __int16 v123;
  uint64_t v124;
  unsigned __int8 v125;
  _DWORD *v126;
  int v127;
  uint64_t v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  uint64_t v132;
  unsigned int *v133;
  unsigned int v134;
  uint64_t v135;
  size_t v136;
  size_t v137;
  size_t v138;
  unsigned int v139;
  unsigned int *v140;
  char *v141;
  char *v142;
  unsigned int v143;
  __int16 v144;
  __int16 v145;
  __int16 v146;
  __int16 v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(_QWORD);
  uint64_t result;
  char *v152;
  char *v153;
  const char *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  unsigned int v158;
  int v159;
  uint64_t v160;
  unsigned int v161;
  char *v162;
  char *v163;
  const char *v164;
  char *v165;
  const char *v166;
  uint64_t v167;
  unint64_t v168;
  int v169;
  int v170;
  int v171;
  char v172;
  unint64_t v173;
  unsigned int *v175;
  unsigned int *v176;
  uint64_t v177;
  unsigned int **v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  char v186;
  unint64_t v187;
  char v188;
  stat buf;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  v9 = 4 * *a2 + 48;
  if (a6)
    v10 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, size_t))(a6 + 16))(a6, 0, 0, v9);
  else
    v10 = malloc_type_malloc(v9, 0x69D7D8CFuLL);
  v11 = v10;
  *a3 = v10;
  v12 = a1;
  if (*(_DWORD *)a1 != 1685287992)
  {
    v165 = __si_assert_copy_extra_268();
    v163 = v165;
    v166 = "";
    if (v165)
      v166 = v165;
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 464, v166);
    goto LABEL_273;
  }
  v13 = *(_DWORD *)(a1 + 804);
  *((_DWORD *)v10 + 2) = v9;
  *((_DWORD *)v10 + 3) = 48;
  *((_DWORD *)v10 + 11) = 0;
  v14 = a2 + 1;
  v15 = (uint64_t)(a2 + 1);
  v16 = *((_BYTE *)a2 + 4);
  if (v16 < 0)
  {
    v19 = *((unsigned __int8 *)a2 + 4);
    if (v19 > 0xBF)
    {
      if (v19 > 0xDF)
      {
        if (v19 > 0xEF)
        {
          if (v19 > 0xF7)
          {
            if (v19 > 0xFB)
            {
              if (v19 > 0xFD)
              {
                if (v19 == 255)
                {
                  v18 = *(_QWORD *)((char *)a2 + 5);
                  v17 = 9;
                }
                else
                {
                  v18 = ((unint64_t)*((unsigned __int8 *)a2 + 5) << 48) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 7) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 9) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 10) << 8) | *((unsigned __int8 *)a2 + 11);
                  v17 = 8;
                }
              }
              else
              {
                v18 = ((unint64_t)(v16 & 1) << 48) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 7) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 9) << 8) | *((unsigned __int8 *)a2 + 10);
                v17 = 7;
              }
            }
            else
            {
              v18 = ((unint64_t)(v16 & 3) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 7) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 8) << 8) | *((unsigned __int8 *)a2 + 9);
              v17 = 6;
            }
          }
          else
          {
            v18 = ((unint64_t)(v16 & 7) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 7) << 8) | *((unsigned __int8 *)a2 + 8);
            v17 = 5;
          }
        }
        else
        {
          v18 = ((unint64_t)(v16 & 0xF) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 8) | *((unsigned __int8 *)a2 + 7);
          v17 = 4;
        }
      }
      else
      {
        v18 = ((unint64_t)(v16 & 0x1F) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 8) | *((unsigned __int8 *)a2 + 6);
        v17 = 3;
      }
    }
    else
    {
      v18 = *((unsigned __int8 *)a2 + 5) | ((unint64_t)(v16 & 0x3F) << 8);
      v17 = 2;
    }
  }
  else
  {
    v17 = 1;
    v18 = *((unsigned __int8 *)a2 + 4);
  }
  v20 = v18;
  v21 = *a2;
  *v10 = v20;
  v22 = v17 + 1;
  v23 = *(unsigned __int8 *)(v15 + v17);
  if (*(char *)(v15 + v17) < 0)
  {
    if (v23 > 0xBF)
    {
      if (v23 > 0xDF)
      {
        if (v23 > 0xEF)
        {
          v25 = *(_DWORD *)(v15 + v22);
          v26 = v17 + 5;
        }
        else
        {
          v25 = ((v23 & 0xF) << 24) | (*(unsigned __int8 *)(v15 + v22) << 16) | (*((unsigned __int8 *)v14 + v17 + 2) << 8) | *((unsigned __int8 *)v14 + v17 + 3);
          v26 = v17 + 4;
        }
      }
      else
      {
        v25 = ((v23 & 0x1F) << 16) | (*(unsigned __int8 *)(v15 + v22) << 8) | *((unsigned __int8 *)v14 + v17 + 2);
        v26 = v17 + 3;
      }
    }
    else
    {
      v25 = *(unsigned __int8 *)(v15 + v22) | ((v23 & 0x3F) << 8);
      v26 = v17 + 2;
    }
    v24 = v25;
    v22 = v26;
  }
  else
  {
    v24 = *(unsigned __int8 *)(v15 + v17);
  }
  *((_DWORD *)v11 + 10) = v24;
  v27 = v22 + 1;
  v28 = *(_BYTE *)(v15 + v22);
  if (v28 < 0)
  {
    v31 = *(unsigned __int8 *)(v15 + v22);
    if (v31 > 0xBF)
    {
      if (v31 > 0xDF)
      {
        if (v31 > 0xEF)
        {
          if (v31 > 0xF7)
          {
            if (v31 > 0xFB)
            {
              if (v31 > 0xFD)
              {
                if (v31 == 255)
                {
                  v29 = *(_QWORD *)(v15 + v27);
                  v30 = v22 + 9;
                }
                else
                {
                  v29 = ((unint64_t)*(unsigned __int8 *)(v15 + v27) << 48) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 2) << 40) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 3) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 4) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 5) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 6) << 8) | *((unsigned __int8 *)v14 + v22 + 7);
                  v30 = v22 + 8;
                }
              }
              else
              {
                v29 = ((unint64_t)(v28 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v15 + v27) << 40) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 3) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 4) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 5) << 8) | *((unsigned __int8 *)v14 + v22 + 6);
                v30 = v22 + 7;
              }
            }
            else
            {
              v29 = ((unint64_t)(v28 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v15 + v27) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 2) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 3) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 4) << 8) | *((unsigned __int8 *)v14 + v22 + 5);
              v30 = v22 + 6;
            }
          }
          else
          {
            v29 = ((unint64_t)(v28 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v15 + v27) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 2) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 3) << 8) | *((unsigned __int8 *)v14 + v22 + 4);
            v30 = v22 + 5;
          }
        }
        else
        {
          v29 = ((unint64_t)(v28 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v15 + v27) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v22 + 2) << 8) | *((unsigned __int8 *)v14 + v22 + 3);
          v30 = v22 + 4;
        }
      }
      else
      {
        v29 = ((unint64_t)(v28 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v15 + v27) << 8) | *((unsigned __int8 *)v14 + v22 + 2);
        v30 = v22 + 3;
      }
    }
    else
    {
      v30 = v22 + 2;
      v29 = *(unsigned __int8 *)(v15 + v27) | ((unint64_t)(v28 & 0x3F) << 8);
    }
  }
  else
  {
    v29 = *(unsigned __int8 *)(v15 + v22);
    v30 = v22 + 1;
  }
  v11[4] = v29;
  v32 = v30 + 1;
  v33 = *(_BYTE *)(v15 + v30);
  if (v33 < 0)
  {
    v36 = *(unsigned __int8 *)(v15 + v30);
    if (v36 > 0xBF)
    {
      if (v36 > 0xDF)
      {
        if (v36 > 0xEF)
        {
          if (v36 > 0xF7)
          {
            if (v36 > 0xFB)
            {
              if (v36 > 0xFD)
              {
                if (v36 == 255)
                {
                  v34 = *(_QWORD *)(v15 + v32);
                  v35 = v30 + 9;
                }
                else
                {
                  v34 = ((unint64_t)*(unsigned __int8 *)(v15 + v32) << 48) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 2) << 40) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 3) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 4) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 5) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 6) << 8) | *((unsigned __int8 *)v14 + v30 + 7);
                  v35 = v30 + 8;
                }
              }
              else
              {
                v34 = ((unint64_t)(v33 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v15 + v32) << 40) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 3) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 4) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 5) << 8) | *((unsigned __int8 *)v14 + v30 + 6);
                v35 = v30 + 7;
              }
            }
            else
            {
              v34 = ((unint64_t)(v33 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v15 + v32) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 2) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 3) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 4) << 8) | *((unsigned __int8 *)v14 + v30 + 5);
              v35 = v30 + 6;
            }
          }
          else
          {
            v34 = ((unint64_t)(v33 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v15 + v32) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 2) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 3) << 8) | *((unsigned __int8 *)v14 + v30 + 4);
            v35 = v30 + 5;
          }
        }
        else
        {
          v34 = ((unint64_t)(v33 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v15 + v32) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v30 + 2) << 8) | *((unsigned __int8 *)v14 + v30 + 3);
          v35 = v30 + 4;
        }
      }
      else
      {
        v34 = ((unint64_t)(v33 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v15 + v32) << 8) | *((unsigned __int8 *)v14 + v30 + 2);
        v35 = v30 + 3;
      }
    }
    else
    {
      v35 = v30 + 2;
      v34 = *(unsigned __int8 *)(v15 + v32) | ((unint64_t)(v33 & 0x3F) << 8);
    }
  }
  else
  {
    v34 = *(unsigned __int8 *)(v15 + v30);
    v35 = v30 + 1;
  }
  v187 = v35;
  v11[3] = v34;
  v37 = v35 + 1;
  v38 = *(_BYTE *)(v15 + v35);
  if (v38 < 0)
  {
    v41 = *(unsigned __int8 *)(v15 + v35);
    if (v41 > 0xBF)
    {
      if (v41 > 0xDF)
      {
        if (v41 > 0xEF)
        {
          if (v41 > 0xF7)
          {
            if (v41 > 0xFB)
            {
              if (v41 > 0xFD)
              {
                if (v41 == 255)
                {
                  v39 = *(_QWORD *)(v15 + v37);
                  v40 = v35 + 9;
                }
                else
                {
                  v39 = ((unint64_t)*(unsigned __int8 *)(v15 + v37) << 48) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 2) << 40) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 3) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 4) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 5) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 6) << 8) | *((unsigned __int8 *)v14 + v35 + 7);
                  v40 = v35 + 8;
                }
              }
              else
              {
                v39 = ((unint64_t)(v38 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v15 + v37) << 40) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 3) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 4) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 5) << 8) | *((unsigned __int8 *)v14 + v35 + 6);
                v40 = v35 + 7;
              }
            }
            else
            {
              v39 = ((unint64_t)(v38 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v15 + v37) << 32) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 2) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 3) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 4) << 8) | *((unsigned __int8 *)v14 + v35 + 5);
              v40 = v35 + 6;
            }
          }
          else
          {
            v39 = ((unint64_t)(v38 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v15 + v37) << 24) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 2) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 3) << 8) | *((unsigned __int8 *)v14 + v35 + 4);
            v40 = v35 + 5;
          }
        }
        else
        {
          v39 = ((unint64_t)(v38 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v15 + v37) << 16) | ((unint64_t)*((unsigned __int8 *)v14 + v35 + 2) << 8) | *((unsigned __int8 *)v14 + v35 + 3);
          v40 = v35 + 4;
        }
      }
      else
      {
        v39 = ((unint64_t)(v38 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v15 + v37) << 8) | *((unsigned __int8 *)v14 + v35 + 2);
        v40 = v35 + 3;
      }
    }
    else
    {
      v40 = v35 + 2;
      v39 = *(unsigned __int8 *)(v15 + v37) | ((unint64_t)(v38 & 0x3F) << 8);
    }
  }
  else
  {
    v39 = *(unsigned __int8 *)(v15 + v35);
    v40 = v35 + 1;
  }
  v11[2] = v39;
  if ((v24 & 0x80) != 0)
  {
    v43 = v40 + 1;
    v44 = *(unsigned __int8 *)(v15 + v40);
    if (*(char *)(v15 + v40) < 0)
    {
      if (v44 > 0xBF)
      {
        if (v44 > 0xDF)
        {
          if (v44 > 0xEF)
          {
            v46 = *(_DWORD *)(v15 + v43);
            v47 = v40 + 5;
          }
          else
          {
            v46 = ((v44 & 0xF) << 24) | (*(unsigned __int8 *)(v15 + v43) << 16) | (*((unsigned __int8 *)v14 + v40 + 2) << 8) | *((unsigned __int8 *)v14 + v40 + 3);
            v47 = v40 + 4;
          }
        }
        else
        {
          v46 = ((v44 & 0x1F) << 16) | (*(unsigned __int8 *)(v15 + v43) << 8) | *((unsigned __int8 *)v14 + v40 + 2);
          v47 = v40 + 3;
        }
      }
      else
      {
        v46 = *(unsigned __int8 *)(v15 + v43) | ((v44 & 0x3F) << 8);
        v47 = v40 + 2;
      }
      v45 = v46;
      v43 = v47;
    }
    else
    {
      v45 = *(unsigned __int8 *)(v15 + v40);
    }
    v187 = v43;
    *((_DWORD *)v11 + 11) = v45;
    v42 = v43;
  }
  else
  {
    v42 = v40;
  }
  v172 = v13;
  v48 = v21;
  v171 = (v13 >> 2) & 1;
  v180 = (unsigned int **)a3;
  v177 = a4;
  if ((a5 & 0x10000) == 0)
    goto LABEL_113;
  if (*(_DWORD *)a1 != 1685287992)
  {
LABEL_267:
    v162 = __si_assert_copy_extra_268();
    v163 = v162;
    v164 = "";
    if (v162)
      v164 = v162;
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 470, v164);
LABEL_273:
    free(v163);
    goto LABEL_255;
  }
  if ((*(_BYTE *)(a1 + 804) & 0x14) == 0)
  {
LABEL_113:
    v175 = v14;
    if (v42 >= v21)
      goto LABEL_244;
    v167 = a4 + 4;
    v168 = v21;
    v67 = v42;
    v68 = 0;
    v69 = 0;
    while (1)
    {
      if (a4 && !*(_DWORD *)(a4 + 4 * v68))
        goto LABEL_244;
      v72 = v67 + 1;
      v73 = *(unsigned __int8 *)(v15 + v67);
      if (*(char *)(v15 + v67) < 0)
      {
        if (v73 > 0xBF)
        {
          if (v73 > 0xDF)
          {
            if (v73 > 0xEF)
            {
              v75 = *(_DWORD *)(v15 + v72);
              v76 = v67 + 5;
            }
            else
            {
              v75 = ((v73 & 0xF) << 24) | (*(unsigned __int8 *)(v15 + v72) << 16) | (*((unsigned __int8 *)v175 + v67 + 2) << 8) | *((unsigned __int8 *)v175 + v67 + 3);
              v76 = v67 + 4;
            }
          }
          else
          {
            v75 = ((v73 & 0x1F) << 16) | (*(unsigned __int8 *)(v15 + v72) << 8) | *((unsigned __int8 *)v175 + v67 + 2);
            v76 = v67 + 3;
          }
        }
        else
        {
          v75 = *(unsigned __int8 *)(v15 + v72) | ((v73 & 0x3F) << 8);
          v76 = v67 + 2;
        }
        v74 = v75;
        v72 = v76;
      }
      else
      {
        v74 = *(unsigned __int8 *)(v15 + v67);
      }
      v78 = (unsigned int *)*a3;
      v187 = v72;
      if (!v74)
        goto LABEL_244;
      v79 = v48;
      v80 = v15;
      v81 = v74 + v69;
      if (!(v74 + v69))
      {
LABEL_246:
        v152 = __si_assert_copy_extra_1644(0);
        v153 = v152;
        v154 = "";
        if (v152)
          v154 = v152;
        __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.c", 1778, "field_id!=0", v154);
        free(v153);
        if (__valid_fs(-1))
          goto LABEL_255;
        v155 = 3072;
LABEL_257:
        *(_DWORD *)v155 = -559038737;
        abort();
      }
      v69 += v74;
      LOBYTE(v185) = 0;
      field_tags_for_id_locked = db2_get_field_tags_for_id_locked(v12, v81, (char *)&v185);
      v83 = a1;
      if ((_BYTE)v185)
        goto LABEL_244;
      if (*(_DWORD *)a1 != 1685287992)
        goto LABEL_267;
      v84 = field_tags_for_id_locked;
      if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
      {
        v85 = *(_DWORD **)(a1 + 880);
        if (v85)
        {
          v86 = v85[54];
          if (v86 == 1684300900)
          {
            if (v85[1142])
              goto LABEL_244;
          }
          else if (v86 == 842150450)
          {
            if (v85[110])
              goto LABEL_244;
          }
          else if (v86 == -270471200 && v85[116])
          {
            goto LABEL_244;
          }
        }
      }
      v87 = field_tags_for_id_locked;
      if (!a4)
      {
        v90 = v68;
        goto LABEL_155;
      }
      if (!*(_DWORD *)(a4 + 4 * v68))
        goto LABEL_161;
      v88 = *(_DWORD *)(a4 + 4 * v68);
      v89 = v68;
      while (1)
      {
        if (v88 == v81)
        {
          v90 = v89 + 1;
LABEL_155:
          v91 = v78;
          v92 = v78[2];
          v93 = v78[3];
          v94 = (v93 + 13);
          v91[3] = v94;
          if (v94 >= v92)
          {
            v95 = 2 * v92;
            do
            {
              v96 = v95;
              v95 *= 2;
            }
            while (v96 <= v94);
            if (a6)
              v97 = (unsigned int *)(*(uint64_t (**)(void))(a6 + 16))();
            else
              v97 = (unsigned int *)malloc_type_realloc(v91, v96, 0x2F16373EuLL);
            v97[2] = v96;
            *v180 = v97;
            v91 = v97;
            v83 = a1;
          }
          v98 = (char *)v91 + v93;
          *((_DWORD *)v98 + 1) = v81 & 0xFFFFF;
          *((_WORD *)v98 + 1) = 0;
          v98[12] = 0;
          v99 = (char *)v91 + v93;
          v100 = (2 * HIBYTE(v84)) & 8 | (32 * ((HIBYTE(v84) >> 1) & 1)) & 0xFFFFFC7F | (((HIBYTE(v84) >> 3) & 1) << 8) & 0xFFFFFDFF | ((HIBYTE(v84) & 1) << 7) | (((HIBYTE(v84) >> 6) & 1) << 9);
          v101 = v100;
          if ((v84 & 0x4F00) != 0)
            *((_WORD *)v99 + 1) = v100;
          v15 = v80;
          if ((v172 & 4) != 0)
          {
            if ((v84 & 0x2000) != 0)
              v102 = 12288;
            else
              v102 = 4096;
            v103 = v100 | v102;
            *((_WORD *)v99 + 1) = v103;
            v48 = v79;
            if (v87 < 0)
            {
              v77 = v103 | 0x4000;
LABEL_174:
              *((_WORD *)v99 + 1) = v77;
            }
          }
          else
          {
            v48 = v79;
            if ((v84 & 0x2000) != 0)
            {
              v104 = v100 | 0x800;
              *((_WORD *)v99 + 1) = v104;
              v101 = v104;
            }
            if (v87 < 0)
            {
              *((_WORD *)v99 + 1) = v101 | 0x1000;
              if ((v87 & 0xFFFF80FF) == 0xFFFF800E)
              {
                v77 = v101 | 0x5000;
                goto LABEL_174;
              }
            }
          }
          v70 = BYTE1(v87);
          a3 = (void **)v180;
          inflateDBFData(v83, v180, v93, v84, v70, &v187, v15, v168, a5, a6);
          v12 = a1;
          v71 = v187;
          v68 = v90;
          a4 = v177;
          goto LABEL_117;
        }
        if (v88 > v81)
          break;
        v88 = *(_DWORD *)(v167 + 4 * v89);
        v68 = ++v89;
        if (!v88)
          goto LABEL_161;
      }
      v68 = v89;
LABEL_161:
      v15 = v80;
      skipDBFData(field_tags_for_id_locked, HIBYTE(field_tags_for_id_locked), (uint64_t *)&v187, v80, v171);
      v71 = v187;
      if (v187 > v79)
      {
        si_analytics_log_2520("%s:%u: failed assertion '%s' Expected offset %ld to fit in size %ld", "ldb.c", 1816, "*offset <= buffer_size", v187, v168);
        memset(&buf, 0, sizeof(buf));
        v156 = -2;
        v157 = *(_QWORD *)(a1 + 848);
        if (v157)
        {
          v158 = *(_DWORD *)(v157 + 44);
          if (v158 >= 0xFFFFFFFE)
            v156 = -2;
          else
            v156 = v158;
        }
        if (fstatat(v156, "CrystalGlow.created", &buf, 0))
          v155 = 2816;
        else
LABEL_255:
          v155 = 2989;
        goto LABEL_257;
      }
      v48 = v79;
      a3 = (void **)v180;
      v12 = a1;
      if (!*(_DWORD *)(a4 + 4 * v68))
        goto LABEL_244;
LABEL_117:
      v67 = v71;
      if (v71 >= v48)
        goto LABEL_244;
    }
  }
  v186 = 0;
  do
  {
    v49 = __ldxr(exceptionSequenceNum);
    v50 = v49 + 1;
  }
  while (__stxr(v49 + 1, exceptionSequenceNum));
  v51 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, a1, 0x40000000, v50);
  v184 = HIDWORD(v51);
  v185 = v51;
  v182 = v53;
  v183 = v52;
  v54 = *(_QWORD *)&threadData[18 * v51 + 2];
  v55 = v54 + 320 * HIDWORD(v51);
  *(_BYTE *)(v55 + 216) = 0;
  v56 = *(_DWORD *)(v55 + 312);
  v57 = *(void (**)(_QWORD))(v55 + 224);
  if (v57)
    v57(*(_QWORD *)(v54 + 320 * HIDWORD(v51) + 288));
  v181 = v185;
  if (_setjmp((int *)v55))
  {
    v58 = (_DWORD *)(v55 + 312);
    v59 = *__error();
    v60 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      buf.st_dev = 136315394;
      *(_QWORD *)&buf.st_mode = "_inflateDBO";
      WORD2(buf.st_ino) = 1024;
      *(_DWORD *)((char *)&buf.st_ino + 6) = 1961;
      _os_log_error_impl(&dword_1B8270000, v60, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", (uint8_t *)&buf, 0x12u);
    }
    *__error() = v59;
    *v58 = v56;
    if (__THREAD_SLOT_KEY)
    {
      v61 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (v61)
        goto LABEL_108;
    }
    else
    {
      makeThreadId();
      v61 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (v61)
      {
LABEL_108:
        v62 = v61;
        if ((unint64_t)v61 < 0x801)
          goto LABEL_109;
      }
    }
    makeThreadId();
    v62 = pthread_getspecific(__THREAD_SLOT_KEY);
LABEL_109:
    v63 = (uint64_t)v62 - 1;
    v64 = &threadData[18 * ((uint64_t)v62 - 1)];
    v66 = v64[14];
    v65 = v64 + 14;
    if (v66 > v182)
    {
      do
        CIOnThreadCleanUpPop(v63);
      while (*v65 > v182);
    }
    dropThreadId(v181, 1, v50);
    CICleanUpReset(v181, v183);
    if (v186)
      goto LABEL_244;
    goto LABEL_245;
  }
  v170 = v50;
  v176 = v14;
  v105 = a1;
  if (v42 >= v48)
    goto LABEL_241;
  v106 = a4 + 4;
  v107 = v42;
  v108 = 0;
  v109 = 0;
  v169 = v56;
  v173 = v48;
  do
  {
    if (v177 && !*(_DWORD *)(v177 + 4 * v108))
      break;
    v115 = v107 + 1;
    v116 = *(unsigned __int8 *)(v15 + v107);
    if (*(char *)(v15 + v107) < 0)
    {
      if (v116 > 0xBF)
      {
        if (v116 > 0xDF)
        {
          if (v116 > 0xEF)
          {
            v118 = *(_DWORD *)(v15 + v115);
            v119 = v107 + 5;
          }
          else
          {
            v118 = ((v116 & 0xF) << 24) | (*(unsigned __int8 *)(v15 + v115) << 16) | (*((unsigned __int8 *)v176
                                                                                      + v107
                                                                                      + 2) << 8) | *((unsigned __int8 *)v176 + v107 + 3);
            v119 = v107 + 4;
          }
        }
        else
        {
          v118 = ((v116 & 0x1F) << 16) | (*(unsigned __int8 *)(v15 + v115) << 8) | *((unsigned __int8 *)v176 + v107 + 2);
          v119 = v107 + 3;
        }
      }
      else
      {
        v118 = *(unsigned __int8 *)(v15 + v115) | ((v116 & 0x3F) << 8);
        v119 = v107 + 2;
      }
      v117 = v118;
      v115 = v119;
    }
    else
    {
      v117 = *(unsigned __int8 *)(v15 + v107);
    }
    v121 = (unsigned int *)*a3;
    v187 = v115;
    if (!v117)
      break;
    v122 = v117 + v109;
    if (!(v117 + v109))
      goto LABEL_246;
    v109 += v117;
    v188 = 0;
    v123 = db2_get_field_tags_for_id_locked(v105, v122, &v188);
    v124 = a1;
    if (v188)
      goto LABEL_240;
    if (*(_DWORD *)a1 != 1685287992)
      goto LABEL_267;
    v125 = HIBYTE(v123);
    if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
    {
      v126 = *(_DWORD **)(a1 + 880);
      if (v126)
      {
        v127 = v126[54];
        if (v127 == 1684300900)
        {
          if (v126[1142])
            goto LABEL_240;
        }
        else if (v127 == 842150450)
        {
          if (v126[110])
            goto LABEL_240;
        }
        else if (v127 == -270471200 && v126[116])
        {
LABEL_240:
          a3 = (void **)v180;
          break;
        }
      }
    }
    v128 = v15;
    v129 = v123;
    v130 = v123;
    if (!v177)
    {
LABEL_218:
      v133 = v121;
      v134 = v121[2];
      v135 = v121[3];
      v136 = (v135 + 13);
      v121[3] = v136;
      if (v136 >= v134)
      {
        v137 = 2 * v134;
        do
        {
          v138 = v137;
          v137 *= 2;
        }
        while (v138 <= v136);
        v139 = v123;
        if (a6)
          v140 = (unsigned int *)(*(uint64_t (**)(void))(a6 + 16))();
        else
          v140 = (unsigned int *)malloc_type_realloc(v133, v138, 0x2F16373EuLL);
        v140[2] = v138;
        *v180 = v140;
        v133 = v140;
        v124 = a1;
        v130 = v139;
      }
      v141 = (char *)v133 + v135;
      *((_DWORD *)v141 + 1) = v122 & 0xFFFFF;
      *((_WORD *)v141 + 1) = 0;
      v141[12] = 0;
      v142 = (char *)v133 + v135;
      v143 = (2 * v125) & 8 | (32 * ((v125 >> 1) & 1)) & 0xFFFFFC7F | (((v125 >> 3) & 1) << 8) & 0xFFFFFDFF | ((v125 & 1) << 7) | (((v125 >> 6) & 1) << 9);
      v144 = v143;
      if ((v125 & 0x4F) != 0)
        *((_WORD *)v142 + 1) = v143;
      a3 = (void **)v180;
      if ((v172 & 4) != 0)
      {
        if ((v125 & 0x20) != 0)
          v145 = 12288;
        else
          v145 = 4096;
        v146 = v143 | v145;
        *((_WORD *)v142 + 1) = v146;
        if ((v129 & 0x80000000) == 0)
          goto LABEL_180;
        v120 = v146 | 0x4000;
      }
      else
      {
        if ((v125 & 0x20) != 0)
        {
          v147 = v143 | 0x800;
          *((_WORD *)v142 + 1) = v147;
          v144 = v147;
        }
        if ((v129 & 0x80000000) == 0)
          goto LABEL_180;
        *((_WORD *)v142 + 1) = v144 | 0x1000;
        if ((v129 & 0xFFFF80FF) != 0xFFFF800E)
          goto LABEL_180;
        v120 = v144 | 0x5000;
      }
      *((_WORD *)v142 + 1) = v120;
LABEL_180:
      v110 = BYTE1(v129);
      v15 = v128;
      v111 = v128;
      v112 = v173;
      inflateDBFData(v124, v180, v135, v130, v110, &v187, v111, v173, a5, a6);
      v105 = a1;
      v113 = v187;
      v114 = v108;
      v56 = v169;
      goto LABEL_181;
    }
    if (!*(_DWORD *)(v177 + 4 * v108))
      goto LABEL_224;
    v131 = *(_DWORD *)(v177 + 4 * v108);
    v132 = v108;
    while (1)
    {
      if (v131 == v122)
      {
        v108 = v132 + 1;
        goto LABEL_218;
      }
      if (v131 > v122)
        break;
      v131 = *(_DWORD *)(v106 + 4 * v132);
      v108 = ++v132;
      if (!v131)
        goto LABEL_224;
    }
    v108 = v132;
LABEL_224:
    v114 = v108;
    v15 = v128;
    skipDBFData(v123, HIBYTE(v123), (uint64_t *)&v187, v128, v171);
    v113 = v187;
    v112 = v173;
    if (v187 > v173)
    {
      si_analytics_log_2520("%s:%u: failed assertion '%s' Expected offset %ld to fit in size %ld", "ldb.c", 1816, "*offset <= buffer_size", v187, v173);
      memset(&buf, 0, sizeof(buf));
      v159 = -2;
      v160 = *(_QWORD *)(a1 + 848);
      if (v160)
      {
        v161 = *(_DWORD *)(v160 + 44);
        if (v161 >= 0xFFFFFFFE)
          v159 = -2;
        else
          v159 = v161;
      }
      if (!fstatat(v159, "CrystalGlow.created", &buf, 0))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xB00] = -559038737;
      abort();
    }
    a3 = (void **)v180;
    v105 = a1;
    if (!*(_DWORD *)(v177 + 4 * v108))
      break;
LABEL_181:
    v108 = v114;
    v107 = v113;
  }
  while (v113 < v112);
LABEL_241:
  v186 = 1;
  v148 = *(_QWORD *)&threadData[18 * v181 + 2];
  v149 = v148 + 320 * v184;
  *(_DWORD *)(v149 + 312) = v56;
  v150 = *(void (**)(_QWORD))(v149 + 232);
  if (v150)
    v150(*(_QWORD *)(v148 + 320 * v184 + 288));
  dropThreadId(v181, 0, v170);
  if (v186)
  {
LABEL_244:
    result = 0;
    *((_DWORD *)*a3 + 10) |= 0x100u;
    return result;
  }
LABEL_245:
  free(*a3);
  *a3 = 0;
  return 9;
}

uint64_t db2_get_field_tags_for_id_locked(uint64_t a1, int a2, char *a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t data_locked;
  unint64_t v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  int v14;
  int v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  int v19;
  int v20;
  const char *v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = a2 & 0x7FFFFFFF;
  if (v4 <= 0x7FFFFFFD)
  {
    v6 = *(_QWORD *)(a1 + 880);
    if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
    {
      v24 = 0;
      data_locked = data_map_get_data_locked(v6, a2 & 0x7FFFFFFF, &v24);
      if (!data_locked)
      {
        v8 = data_map_count(v6);
        if (v8 < v4)
        {
          v23 = v8;
          v15 = *__error();
          v16 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            v19 = *(_DWORD *)(a1 + 4);
            v20 = data_map_valid((_DWORD *)v6);
            *(_DWORD *)buf = 136316930;
            v26 = "_get_string_and_length_for_id";
            v27 = 1024;
            v28 = 571;
            v21 = "y";
            if (!v20)
              v21 = "n";
            v29 = 2048;
            v30 = v4;
            v31 = 2048;
            v32 = v23;
            v33 = 1024;
            v34 = 0;
            v35 = 2080;
            v36 = a1 + 324;
            v37 = 1024;
            v38 = v19;
            v39 = 2080;
            v40 = v21;
            _os_log_error_impl(&dword_1B8270000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Invalid string_id:%lu, map_count:%lu, index:%d, dst->name:%s, dst->flags:0x%x valid:%s", buf, 0x46u);
          }
          *__error() = v15;
          if ((*(_BYTE *)(a1 + 4) & 0x20) != 0)
          {
            v17 = *__error();
            v18 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              v22 = *(_DWORD *)(a1 + 4);
              *(_DWORD *)buf = 136315906;
              v26 = "_get_string_and_length_for_id";
              v27 = 1024;
              v28 = 573;
              v29 = 2080;
              v30 = a1 + 324;
              v31 = 1024;
              LODWORD(v32) = v22;
              _os_log_error_impl(&dword_1B8270000, v18, OS_LOG_TYPE_ERROR, "%s:%d: marking invalid %s flags:0x%x", buf, 0x22u);
            }
            *__error() = v17;
            *(_DWORD *)(a1 + 4) |= 0x40u;
          }
        }
        goto LABEL_5;
      }
    }
    else
    {
      if (*(_DWORD *)(v6 + 56) <= v4
        || (v12 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v4)) == 0)
      {
        v14 = *(_DWORD *)(a1 + 4);
        if ((v14 & 0x20) != 0)
        {
          v9 = 0;
          v10 = 0;
          *(_DWORD *)(a1 + 4) = v14 | 0x40;
          v11 = 1;
          goto LABEL_10;
        }
        if (SIIsAppleInternal_onceToken == -1)
        {
          v9 = 0;
          v10 = 0;
          v11 = 1;
          goto LABEL_10;
        }
        dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_4644);
        goto LABEL_5;
      }
      data_locked = v12 + 6;
    }
    v11 = 0;
    v10 = *(unsigned __int8 *)(data_locked - 2);
    v9 = *(unsigned __int8 *)(data_locked - 1);
    goto LABEL_10;
  }
LABEL_5:
  v9 = 0;
  v10 = 0;
  v11 = 1;
LABEL_10:
  *a3 = v11;
  return v10 | (v9 << 8);
}

unint64_t data_entry_restore(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int *a4, _BYTE *a5)
{
  unsigned __int8 *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t result;
  char *v18;
  char *v19;
  const char *v20;
  uint64_t v21;

  v10 = (unsigned __int8 *)_windowsResolvePtr(a1, a2, 8uLL);
  v11 = *v10;
  if ((v11 & 0x80) == 0)
  {
    v12 = 1;
    goto LABEL_16;
  }
  if (a3 <= 1)
    goto LABEL_15;
  v13 = v10[1];
  if (((char)v10[1] & 0x80000000) == 0)
  {
    v11 = v11 & 0x7F | (v13 << 7);
    v12 = 2;
    goto LABEL_16;
  }
  if (a3 <= 2)
    goto LABEL_15;
  v14 = v10[2];
  if (((char)v10[2] & 0x80000000) == 0)
  {
    v12 = 3;
    v11 = ((v13 & 0x7F) << 7) | (v14 << 14) | v11 & 0x7F;
    goto LABEL_16;
  }
  if (a3 <= 3)
    goto LABEL_15;
  v15 = v10[3];
  if (((char)v10[3] & 0x80000000) == 0)
  {
    v12 = 4;
    v11 = ((v14 & 0x7F) << 14) | (v15 << 21) | ((v13 & 0x7F) << 7) | v11 & 0x7F;
    goto LABEL_16;
  }
  if (a3 < 5)
  {
LABEL_15:
    v12 = 0;
    v11 = 0;
    *a5 = 1;
  }
  else
  {
    v16 = (char)v10[4];
    if (v16 < 0)
    {
      v18 = __si_assert_copy_extra_268();
      v19 = v18;
      v20 = "";
      if (v18)
        v20 = v18;
      __message_assert(v18, "VIntUtils.h", 388, "(b4 & 0x80) == 0", v20);
      free(v19);
      if (__valid_fs(-1))
        v21 = 2989;
      else
        v21 = 3072;
      *(_DWORD *)v21 = -559038737;
      abort();
    }
    v12 = 5;
    v11 = ((v15 & 0x7F) << 21) | (v16 << 28) | ((v14 & 0x7F) << 14) | ((v13 & 0x7F) << 7) | v11 & 0x7F;
  }
LABEL_16:
  *a4 = v11;
  result = _windowsResolvePtr(a1, a2, v12 + v11);
  if (v12 + (unint64_t)*a4 <= a3)
    *((_QWORD *)a4 + 1) = result + v12;
  else
    *a5 = 1;
  return result;
}

void inflateDBFData(uint64_t a1, unsigned int **a2, uint64_t a3, unsigned int a4, gid_t a5, _QWORD *a6, uint64_t a7, unint64_t a8, __int16 a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v17;
  unsigned int *v18;
  char *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  size_t v44;
  size_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int *v49;
  unint64_t v50;
  unint64_t v51;
  size_t v52;
  size_t v53;
  unsigned int *v54;
  uint64_t v55;
  unint64_t v56;
  unsigned int v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  unsigned int v61;
  int v62;
  size_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  size_t v70;
  uint64_t v71;
  size_t v72;
  size_t v73;
  size_t v74;
  unsigned int *v75;
  uint64_t v76;
  unint64_t v77;
  unsigned int v78;
  __int16 v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  size_t v95;
  size_t v96;
  unint64_t v97;
  unsigned int *v98;
  unint64_t v99;
  char *v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  __int16 v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  size_t v118;
  size_t v119;
  size_t v120;
  unint64_t v121;
  unsigned int *v123;
  uint64_t v124;
  uint64_t v127;
  unsigned __int8 *string_and_length_for_id;
  unsigned int v129;
  unint64_t v130;
  unsigned int v131;
  unsigned int v132;
  int v133;
  unsigned int v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  size_t v138;
  size_t v139;
  unsigned int *v140;
  unsigned int v143;
  unsigned __int8 *DBFForUniquedValue;
  unsigned __int8 *v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  NSObject *v149;
  __darwin_time_t v150;
  __darwin_time_t v151;
  uint64_t v152;
  size_t v153;
  unint64_t v154;
  unint64_t v155;
  size_t v156;
  size_t v157;
  unsigned int *v158;
  __darwin_time_t v159;
  __darwin_time_t v160;
  unint64_t v161;
  unint64_t v162;
  unsigned int v163;
  int v164;
  __darwin_time_t v165;
  __darwin_time_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  size_t v171;
  size_t v172;
  unint64_t v173;
  unsigned int *v174;
  int v175;
  uint64_t v176;
  unsigned int v177;
  char *v178;
  gid_t v179;
  char *v180;
  const char *v181;
  uint64_t v182;
  char *v183;
  char *v184;
  const char *v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unsigned int v189;
  stat *p_src;
  char *v191;
  char *v192;
  const char *v193;
  size_t v194;
  uint64_t v195;
  size_t v196;
  size_t v197;
  size_t v198;
  unsigned int *v199;
  unsigned int v200;
  __darwin_time_t v201;
  __darwin_time_t v202;
  uint64_t v204;
  unsigned int **v211;
  _OWORD v212[9];
  stat __src;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;

  v10 = a7;
  v11 = a6;
  v17 = a10;
  v221 = *MEMORY[0x1E0C80C00];
  v18 = *a2;
  v19 = (char *)*a2 + a3;
  *((_DWORD *)v19 + 2) = 0;
  if (!a4)
  {
    LOWORD(v20) = *((_WORD *)v19 + 1) | 0x400;
    *((_WORD *)v19 + 1) = v20;
    v28 = 1;
    goto LABEL_37;
  }
  if (a4 == 15)
  {
    v29 = *((_WORD *)v19 + 1);
    *((_WORD *)v19 + 1) = v29 | 0x10;
    *(_WORD *)v19 = 11;
    if ((a5 & 3) == 2)
    {
      if ((a9 & 0x8000) == 0)
      {
        v30 = *a6;
        v31 = *a6 + 1;
        v32 = *(unsigned __int8 *)(a7 + *a6);
        if (*(char *)(a7 + *a6) < 0)
        {
          if (v32 > 0xBF)
          {
            if (v32 > 0xDF)
            {
              if (v32 > 0xEF)
              {
                v32 = *(_DWORD *)(a7 + v31);
                v31 = v30 + 5;
              }
              else
              {
                v32 = ((v32 & 0xF) << 24) | (*(unsigned __int8 *)(a7 + v31) << 16) | (*(unsigned __int8 *)(v30 + a7 + 2) << 8) | *(unsigned __int8 *)(v30 + a7 + 3);
                v31 = v30 + 4;
              }
            }
            else
            {
              v32 = ((v32 & 0x1F) << 16) | (*(unsigned __int8 *)(a7 + v31) << 8) | *(unsigned __int8 *)(v30 + a7 + 2);
              v31 = v30 + 3;
            }
          }
          else
          {
            v33 = *(unsigned __int8 *)(a7 + v31) | ((v32 & 0x3F) << 8);
            v31 = v30 + 2;
            v32 = v33;
          }
        }
        *a6 = v31;
        if (v31 > a8)
        {
          si_analytics_log_2520("%s:%u: failed assertion '%s' Expected offset %ld to fit in size %ld");
          goto LABEL_411;
        }
        v127 = a1;
        string_and_length_for_id = (unsigned __int8 *)get_string_and_length_for_id(a1, 3u, v32, 1);
        if (!string_and_length_for_id)
          goto LABEL_280;
        v129 = *string_and_length_for_id;
        if (((char)*string_and_length_for_id & 0x80000000) == 0)
        {
          if (*string_and_length_for_id)
          {
            v130 = 1;
            v131 = *string_and_length_for_id;
            v132 = v131;
            goto LABEL_273;
          }
          goto LABEL_280;
        }
        if (v129 < 0xC0)
        {
          v131 = string_and_length_for_id[1] | ((v129 & 0x3F) << 8);
          if (v131)
          {
            v130 = 2;
            v132 = string_and_length_for_id[1] | ((v129 & 0x3F) << 8);
            goto LABEL_273;
          }
LABEL_280:
          v148 = *__error();
          v149 = _SILogForLogForCategory(7);
          if (!os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
            goto LABEL_281;
          v159 = *((unsigned __int16 *)v19 + 1);
          v160 = *(int *)(v127 + 4);
          __src.st_dev = 136317442;
          *(_QWORD *)&__src.st_mode = "inflateDBFData";
          WORD2(__src.st_ino) = 1024;
          *(_DWORD *)((char *)&__src.st_ino + 6) = 1299;
          HIWORD(__src.st_uid) = 1024;
          __src.st_gid = 3;
          LOWORD(__src.st_rdev) = 2048;
          *(_QWORD *)((char *)&__src.st_rdev + 2) = v32;
          WORD1(__src.st_atimespec.tv_sec) = 1024;
          HIDWORD(__src.st_atimespec.tv_sec) = a5;
          __src.st_atimespec.tv_nsec = 0x8000000000F0400;
          __src.st_mtimespec.tv_sec = v159;
          LOWORD(__src.st_mtimespec.tv_nsec) = 2048;
          *(uint64_t *)((char *)&__src.st_mtimespec.tv_nsec + 2) = a5;
          WORD1(__src.st_ctimespec.tv_sec) = 2048;
          *(__darwin_time_t *)((char *)&__src.st_ctimespec.tv_sec + 4) = v160;
          WORD2(__src.st_ctimespec.tv_nsec) = 2080;
          *(uint64_t *)((char *)&__src.st_ctimespec.tv_nsec + 6) = v127 + 324;
          goto LABEL_287;
        }
        if (v129 >= 0xE0)
        {
          if (v129 > 0xEF)
          {
            v132 = *(_DWORD *)(string_and_length_for_id + 1);
            if (!v132)
              goto LABEL_280;
            v134 = v132 >> 8;
            v133 = *(_DWORD *)(string_and_length_for_id + 1);
          }
          else
          {
            v133 = string_and_length_for_id[1];
            v134 = string_and_length_for_id[2];
            v132 = ((v129 & 0xF) << 24) | (v133 << 16) | (v134 << 8) | string_and_length_for_id[3];
            if (!v132)
              goto LABEL_280;
          }
          if (v129 > 0xEF)
          {
            v131 = *(_DWORD *)(string_and_length_for_id + 1);
            v130 = 5;
          }
          else
          {
            v131 = ((v129 & 0xF) << 24) | (v133 << 16) | (v134 << 8) | string_and_length_for_id[3];
            v130 = 4;
          }
        }
        else
        {
          v132 = ((v129 & 0x1F) << 16) | (string_and_length_for_id[1] << 8) | string_and_length_for_id[2];
          if (!v132)
            goto LABEL_280;
          v131 = ((v129 & 0x1F) << 16) | (string_and_length_for_id[1] << 8) | string_and_length_for_id[2];
          v130 = 3;
        }
        if (!v131)
        {
          v148 = *__error();
          v149 = _SILogForLogForCategory(7);
          if (!os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
            goto LABEL_281;
          v165 = *((unsigned __int16 *)v19 + 1);
          v166 = *(int *)(v127 + 4);
          __src.st_dev = 136317442;
          *(_QWORD *)&__src.st_mode = "inflateDBFData";
          WORD2(__src.st_ino) = 1024;
          *(_DWORD *)((char *)&__src.st_ino + 6) = 1308;
          HIWORD(__src.st_uid) = 1024;
          __src.st_gid = 3;
          LOWORD(__src.st_rdev) = 2048;
          *(_QWORD *)((char *)&__src.st_rdev + 2) = v32;
          WORD1(__src.st_atimespec.tv_sec) = 1024;
          HIDWORD(__src.st_atimespec.tv_sec) = a5;
          __src.st_atimespec.tv_nsec = 0x8000000000F0400;
          __src.st_mtimespec.tv_sec = v165;
          LOWORD(__src.st_mtimespec.tv_nsec) = 2048;
          *(uint64_t *)((char *)&__src.st_mtimespec.tv_nsec + 2) = a5;
          WORD1(__src.st_ctimespec.tv_sec) = 2048;
          *(__darwin_time_t *)((char *)&__src.st_ctimespec.tv_sec + 4) = v166;
          WORD2(__src.st_ctimespec.tv_nsec) = 2080;
          *(uint64_t *)((char *)&__src.st_ctimespec.tv_nsec + 6) = v127 + 324;
          goto LABEL_287;
        }
LABEL_273:
        if (v130 > v132)
        {
          si_analytics_log_2520("%s:%u: failed assertion '%s' Expected offset %ld to fit in size %ld extras:%d type:%d");
        }
        else
        {
          *((_DWORD *)v19 + 2) = v131;
          v152 = v18[3];
          v153 = v131;
          v154 = v152 + v131;
          if (v154 < 0xFFFFFFFF)
          {
            v155 = v18[2];
            if (v154 >= v155)
            {
              v156 = (2 * v155);
              do
              {
                v157 = v156;
                v156 *= 2;
              }
              while (v157 <= v154);
              if (a10)
                v158 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *, _QWORD, size_t))(a10 + 16))(a10, v18, v18[2], v157);
              else
                v158 = (unsigned int *)malloc_type_realloc(v18, v157, 0x2F16373EuLL);
              v18 = v158;
              v158[2] = v157;
              *a2 = v158;
              v152 = v158[3];
              v153 = *(unsigned int *)((char *)v158 + a3 + 8);
              v154 = v153 + v152;
              v155 = v157 & 0xFFFFFFFE;
              v131 = *(unsigned int *)((char *)v158 + a3 + 8);
            }
            if (v154 <= v155)
            {
              memcpy((char *)v18 + a3 + 13, &string_and_length_for_id[v130], v153);
              LODWORD(v88) = v18[3] + v131;
              goto LABEL_406;
            }
            si_analytics_log_2520("%s:%u: failed assertion '%s' Buffer overflow %ld + %ld > %ld extras:%d type:%d", "ldb.c", 1317, "(size_t)dbo->used_bytes+(size_t)dbf->data_len <= (size_t)dbo->size", v152, v153, v155, a5, 15);
            memset(&__src, 0, sizeof(__src));
            v186 = -2;
            v187 = *(_QWORD *)(v127 + 848);
            if (!v187)
              goto LABEL_415;
            goto LABEL_412;
          }
          si_analytics_log_2520("%s:%u: failed assertion '%s' Overflow %ld + %ld extras:%d type:%d");
        }
        memset(&__src, 0, sizeof(__src));
        v175 = -2;
        v176 = *(_QWORD *)(v127 + 848);
        if (!v176)
          goto LABEL_351;
        goto LABEL_348;
      }
      *((_WORD *)v19 + 1) = v29 | 0x8030;
      v55 = *a6;
      v56 = *a6 + 1;
      v57 = *(unsigned __int8 *)(a7 + *a6);
      if (*(char *)(a7 + *a6) < 0)
      {
        if (v57 > 0xBF)
        {
          if (v57 > 0xDF)
          {
            if (v57 > 0xEF)
            {
              v57 = *(_DWORD *)(a7 + v56);
              v56 = v55 + 5;
            }
            else
            {
              v57 = ((v57 & 0xF) << 24) | (*(unsigned __int8 *)(a7 + v56) << 16) | (*(unsigned __int8 *)(v55 + a7 + 2) << 8) | *(unsigned __int8 *)(v55 + a7 + 3);
              v56 = v55 + 4;
            }
          }
          else
          {
            v57 = ((v57 & 0x1F) << 16) | (*(unsigned __int8 *)(a7 + v56) << 8) | *(unsigned __int8 *)(v55 + a7 + 2);
            v56 = v55 + 3;
          }
        }
        else
        {
          v58 = *(unsigned __int8 *)(a7 + v56) | ((v57 & 0x3F) << 8);
          v56 = v55 + 2;
          v57 = v58;
        }
      }
      *a6 = v56;
      if (v56 <= a8)
      {
        v135 = v18[2];
        v136 = v18[3];
        v137 = v136 + 4;
        if (v136 + 4 >= v135)
        {
          v138 = (2 * v135);
          do
          {
            v139 = v138;
            v138 *= 2;
          }
          while (v139 <= v137);
          if (a10)
            v140 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(a10 + 16))(a10, v18);
          else
            v140 = (unsigned int *)malloc_type_realloc(v18, v139, 0x2F16373EuLL);
          v18 = v140;
          v140[2] = v139;
          *a2 = v140;
          v19 = (char *)v140 + a3;
          v137 = v140[3] + 4;
          v135 = v139 & 0xFFFFFFFE;
        }
        if (v137 <= v135)
        {
          *(_DWORD *)(v19 + 13) = v57;
          *(_WORD *)v19 = 11;
          *((_DWORD *)v19 + 2) = 4;
          LODWORD(v88) = v18[3] + 4;
          goto LABEL_406;
        }
        si_analytics_log_2520("%s:%u: failed assertion '%s' Buffer overflow %ld + %ld > %ld extras:%d type:%d", "ldb.c");
        goto LABEL_411;
      }
LABEL_410:
      si_analytics_log_2520("%s:%u: failed assertion '%s' Expected offset %ld to fit in size %ld extras:%d type:%d");
      goto LABEL_411;
    }
    if ((a5 & 1) == 0)
    {
LABEL_46:
      v42 = v18[2];
      v43 = v18[3] + 8;
      if (v43 >= v42)
      {
        v44 = (2 * v42);
        do
        {
          v45 = v44;
          v44 *= 2;
        }
        while (v45 <= v43);
        v46 = a1;
        v47 = a8;
        if (a10)
        {
          v48 = a10;
          v49 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(a10 + 16))(a10, v18);
        }
        else
        {
          v48 = 0;
          v49 = (unsigned int *)malloc_type_realloc(v18, v45, 0x2F16373EuLL);
        }
        v18 = v49;
        v49[2] = v45;
        *a2 = v49;
        v19 = (char *)v49 + a3;
        LODWORD(v42) = v45;
        a8 = v47;
        v17 = v48;
        a1 = v46;
      }
      v63 = 8;
      switch(a4)
      {
        case 0u:
        case 1u:
        case 2u:
          v19[13] = *(_BYTE *)(v10 + *v11);
          if (v18[3] < v18[2])
          {
            v64 = *v11 + 1;
            *v11 = v64;
            if (v64 > a8)
            {
LABEL_343:
              si_analytics_log_2520("%s:%u: failed assertion '%s' Expected offset %ld to fit in size %ld extras:%d type:%d");
              break;
            }
            LODWORD(v63) = 1;
LABEL_358:
            *((_DWORD *)v19 + 2) = v63;
            LODWORD(v88) = v18[3] + v63;
            goto LABEL_406;
          }
          si_analytics_log_2520("%s:%u: failed assertion '%s' Expected %ld <= %ld, extras:%d type:%d");
          break;
        case 3u:
        case 4u:
          if ((unint64_t)v18[3] + 2 > v42)
            goto LABEL_409;
          v76 = *v11;
          v77 = *v11 + 1;
          v78 = *(unsigned __int8 *)(v10 + *v11);
          if ((*(char *)(v10 + *v11) & 0x80000000) == 0)
            goto LABEL_209;
          if (v78 > 0xBF)
          {
            if (v78 >= 0xE0)
            {
LABEL_390:
              v191 = __si_assert_copy_extra_1644(0);
              v192 = v191;
              v193 = "";
              if (v191)
                v193 = v191;
              __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v193);
              free(v192);
              if (__valid_fs(-1))
              {
                MEMORY[0xBAD] = -559038737;
                abort();
              }
              MEMORY[0xC00] = -559038737;
              abort();
            }
            LOWORD(v78) = *(unsigned __int8 *)(v76 + v10 + 2) | (*(unsigned __int8 *)(v10 + v77) << 8);
            v77 = v76 + 3;
          }
          else
          {
            v79 = *(unsigned __int8 *)(v10 + v77) | ((v78 & 0x3F) << 8);
            v77 = v76 + 2;
            LOWORD(v78) = v79;
          }
LABEL_209:
          *v11 = v77;
          *(_WORD *)(v19 + 13) = v78;
          if (v77 > a8)
            goto LABEL_410;
          LODWORD(v63) = 2;
          goto LABEL_358;
        case 5u:
        case 6u:
        case 0xFu:
          if ((unint64_t)v18[3] + 4 <= v42)
          {
            v65 = *v11;
            v66 = *v11 + 1;
            v67 = *(unsigned __int8 *)(v10 + *v11);
            if (*(char *)(v10 + *v11) < 0)
            {
              if (v67 > 0xBF)
              {
                if (v67 > 0xDF)
                {
                  if (v67 > 0xEF)
                  {
                    v67 = *(_DWORD *)(v10 + v66);
                    v66 = v65 + 5;
                  }
                  else
                  {
                    v67 = ((v67 & 0xF) << 24) | (*(unsigned __int8 *)(v10 + v66) << 16) | (*(unsigned __int8 *)(v65 + v10 + 2) << 8) | *(unsigned __int8 *)(v65 + v10 + 3);
                    v66 = v65 + 4;
                  }
                }
                else
                {
                  v67 = ((v67 & 0x1F) << 16) | (*(unsigned __int8 *)(v10 + v66) << 8) | *(unsigned __int8 *)(v65 + v10 + 2);
                  v66 = v65 + 3;
                }
              }
              else
              {
                v68 = *(unsigned __int8 *)(v10 + v66) | ((v67 & 0x3F) << 8);
                v66 = v65 + 2;
                v67 = v68;
              }
            }
            *v11 = v66;
            *(_DWORD *)(v19 + 13) = v67;
            if (v66 > a8)
              goto LABEL_343;
            LODWORD(v63) = 4;
            goto LABEL_358;
          }
          si_analytics_log_2520("%s:%u: failed assertion '%s' Expected %ld <= %ld extras:%d type:%d");
          break;
        case 7u:
        case 8u:
          if ((unint64_t)v18[3] + 8 > v42)
          {
LABEL_409:
            si_analytics_log_2520("%s:%u: failed assertion '%s' Expected %ld <= %ld extras:%d type:%d");
            goto LABEL_411;
          }
          v80 = *v11;
          v81 = *v11 + 1;
          v82 = *(unsigned __int8 *)(v10 + *v11);
          if (*(char *)(v10 + *v11) < 0)
          {
            v83 = *(unsigned __int8 *)(v10 + *v11);
            if (v83 > 0xBF)
            {
              if (v83 > 0xDF)
              {
                if (v83 > 0xEF)
                {
                  if (v83 > 0xF7)
                  {
                    if (v83 > 0xFB)
                    {
                      if (v83 > 0xFD)
                      {
                        if (v83 == 255)
                        {
                          v82 = *(_QWORD *)(v10 + v81);
                          v81 = v80 + 9;
                        }
                        else
                        {
                          v82 = ((unint64_t)*(unsigned __int8 *)(v10 + v81) << 48) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 2) << 40) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 3) << 32) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 4) << 24) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 6) << 8) | *(unsigned __int8 *)(v80 + v10 + 7);
                          v81 = v80 + 8;
                        }
                      }
                      else
                      {
                        v82 = ((v82 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v10 + v81) << 40) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 2) << 32) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 4) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 5) << 8) | *(unsigned __int8 *)(v80 + v10 + 6);
                        v81 = v80 + 7;
                      }
                    }
                    else
                    {
                      v82 = ((v82 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v10 + v81) << 32) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 2) << 24) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 3) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 4) << 8) | *(unsigned __int8 *)(v80 + v10 + 5);
                      v81 = v80 + 6;
                    }
                  }
                  else
                  {
                    v82 = ((v82 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v10 + v81) << 24) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 3) << 8) | *(unsigned __int8 *)(v80 + v10 + 4);
                    v81 = v80 + 5;
                  }
                }
                else
                {
                  v82 = ((v82 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v10 + v81) << 16) | ((unint64_t)*(unsigned __int8 *)(v80 + v10 + 2) << 8) | *(unsigned __int8 *)(v80 + v10 + 3);
                  v81 = v80 + 4;
                }
              }
              else
              {
                v82 = ((v82 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v10 + v81) << 8) | *(unsigned __int8 *)(v80 + v10 + 2);
                v81 = v80 + 3;
              }
            }
            else
            {
              v82 = *(unsigned __int8 *)(v10 + v81) | ((v82 & 0x3F) << 8);
              v81 = v80 + 2;
            }
          }
          *v11 = v81;
          *(_QWORD *)(v19 + 13) = v82;
          if (v81 > a8)
            goto LABEL_410;
          LODWORD(v63) = 8;
          goto LABEL_358;
        case 9u:
          v63 = 4;
          goto LABEL_315;
        case 0xAu:
        case 0xCu:
          goto LABEL_315;
        default:
          v84 = *v11;
          v85 = *v11 + 1;
          v86 = *(unsigned __int8 *)(v10 + *v11);
          if (*(char *)(v10 + *v11) < 0)
          {
            if (v86 > 0xBF)
            {
              if (v86 > 0xDF)
              {
                if (v86 > 0xEF)
                {
                  v86 = *(_DWORD *)(v10 + v85);
                  v85 = v84 + 5;
                }
                else
                {
                  v86 = ((v86 & 0xF) << 24) | (*(unsigned __int8 *)(v10 + v85) << 16) | (*(unsigned __int8 *)(v84 + v10 + 2) << 8) | *(unsigned __int8 *)(v84 + v10 + 3);
                  v85 = v84 + 4;
                }
              }
              else
              {
                v86 = ((v86 & 0x1F) << 16) | (*(unsigned __int8 *)(v10 + v85) << 8) | *(unsigned __int8 *)(v84 + v10 + 2);
                v85 = v84 + 3;
              }
            }
            else
            {
              v87 = *(unsigned __int8 *)(v10 + v85) | ((v86 & 0x3F) << 8);
              v85 = v84 + 2;
              v86 = v87;
            }
          }
          *v11 = v85;
          v63 = v86;
LABEL_315:
          v167 = v63 + v18[3];
          if (v167 >= v42)
          {
            v168 = v10;
            v169 = a1;
            v170 = v11;
            v171 = (2 * v42);
            do
            {
              v172 = v171;
              v171 *= 2;
            }
            while (v172 <= v167);
            v173 = a8;
            if (v17)
              v174 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *, _QWORD, size_t))(v17 + 16))(v17, v18, v42, v172);
            else
              v174 = (unsigned int *)malloc_type_realloc(v18, v172, 0x2F16373EuLL);
            v18 = v174;
            v174[2] = v172;
            *a2 = v174;
            v19 = (char *)v174 + a3;
            LODWORD(v42) = v172;
            v11 = v170;
            a1 = v169;
            a8 = v173;
            v10 = v168;
          }
          if (*v11 + v63 > a8)
          {
            si_analytics_log_2520("%s:%u: failed assertion '%s' Expected offset %ld plus len %ld to fit in size %ld extras:%d type:%d", "ldb.c");
            goto LABEL_411;
          }
          if (v63 + v18[3] > v42)
          {
            si_analytics_log_2520("%s:%u: failed assertion '%s' Expected len %ld plus used_bytes %ld to fit in dbo %ld extras:%d type:%d", "ldb.c");
            goto LABEL_411;
          }
          memcpy(v19 + 13, (const void *)(v10 + *v11), v63);
          *v11 += v63;
          goto LABEL_358;
      }
LABEL_347:
      memset(&__src, 0, sizeof(__src));
      v175 = -2;
      v176 = *(_QWORD *)(a1 + 848);
      if (!v176)
        goto LABEL_351;
      goto LABEL_348;
    }
    v59 = *a6;
    v60 = *a6 + 1;
    v61 = *(unsigned __int8 *)(a7 + *a6);
    if (*(char *)(a7 + *a6) < 0)
    {
      if (v61 > 0xBF)
      {
        if (v61 > 0xDF)
        {
          if (v61 > 0xEF)
          {
            v61 = *(_DWORD *)(a7 + v60);
            v60 = v59 + 5;
          }
          else
          {
            v61 = ((v61 & 0xF) << 24) | (*(unsigned __int8 *)(a7 + v60) << 16) | (*(unsigned __int8 *)(v59 + a7 + 2) << 8) | *(unsigned __int8 *)(v59 + a7 + 3);
            v60 = v59 + 4;
          }
        }
        else
        {
          v61 = ((v61 & 0x1F) << 16) | (*(unsigned __int8 *)(a7 + v60) << 8) | *(unsigned __int8 *)(v59 + a7 + 2);
          v60 = v59 + 3;
        }
      }
      else
      {
        v62 = *(unsigned __int8 *)(a7 + v60) | ((v61 & 0x3F) << 8);
        v60 = v59 + 2;
        v61 = v62;
      }
    }
    *a6 = v60;
    if (v60 > a8)
      goto LABEL_410;
    *(_QWORD *)&v212[0] = 0;
    if ((a5 & 8) != 0)
      v143 = 2;
    else
      v143 = 4;
    v204 = a1;
    DBFForUniquedValue = getDBFForUniquedValue(a1, v143, v61, v212);
    if (!DBFForUniquedValue)
    {
      v148 = *__error();
      v149 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
      {
LABEL_281:
        *__error() = v148;
        return;
      }
      v150 = *((unsigned __int16 *)v19 + 1);
      v151 = *(int *)(a1 + 4);
      __src.st_dev = 136317442;
      *(_QWORD *)&__src.st_mode = "inflateDBFData";
      WORD2(__src.st_ino) = 1024;
      *(_DWORD *)((char *)&__src.st_ino + 6) = 1439;
      HIWORD(__src.st_uid) = 1024;
      __src.st_gid = v143;
      LOWORD(__src.st_rdev) = 2048;
      *(_QWORD *)((char *)&__src.st_rdev + 2) = v61;
      WORD1(__src.st_atimespec.tv_sec) = 1024;
      HIDWORD(__src.st_atimespec.tv_sec) = a5;
      __src.st_atimespec.tv_nsec = 0x8000000000F0400;
      __src.st_mtimespec.tv_sec = v150;
      LOWORD(__src.st_mtimespec.tv_nsec) = 2048;
      *(uint64_t *)((char *)&__src.st_mtimespec.tv_nsec + 2) = a5;
      WORD1(__src.st_ctimespec.tv_sec) = 2048;
      *(__darwin_time_t *)((char *)&__src.st_ctimespec.tv_sec + 4) = v151;
      WORD2(__src.st_ctimespec.tv_nsec) = 2080;
      *(uint64_t *)((char *)&__src.st_ctimespec.tv_nsec + 6) = a1 + 324;
LABEL_287:
      _os_log_error_impl(&dword_1B8270000, v149, OS_LOG_TYPE_ERROR, "%s:%d: Failed to fetch the field for index:%d, nameId:%lu, extras:%d, type:%d, flags:0x%lx(0x%lx), dst->flags:0x%lx, dst->name:%s", (uint8_t *)&__src, 0x56u);
      goto LABEL_281;
    }
    v145 = DBFForUniquedValue;
    v211 = a2;
    v40 = *DBFForUniquedValue;
    if ((char)*DBFForUniquedValue < 0)
    {
      v147 = a10;
      if (v40 > 0xBF)
      {
        if (v40 > 0xDF)
        {
          if (v40 > 0xEF)
          {
            v40 = *(_DWORD *)(v145 + 1);
            v146 = 5;
          }
          else
          {
            v40 = ((v40 & 0xF) << 24) | (v145[1] << 16) | (v145[2] << 8) | v145[3];
            v146 = 4;
          }
        }
        else
        {
          v40 = ((v40 & 0x1F) << 16) | (v145[1] << 8) | v145[2];
          v146 = 3;
        }
      }
      else
      {
        v146 = 2;
        v40 = v145[1] | ((v40 & 0x3F) << 8);
      }
    }
    else
    {
      v146 = 1;
      v147 = a10;
    }
    v161 = *(_QWORD *)&v212[0];
    if (*(_QWORD *)&v212[0] < v146)
    {
      si_analytics_log_2520("Expected offset %ld to fit in size %ld pc:%d extras:%d type:%d", v146, *(_QWORD *)&v212[0], *(_DWORD *)(v204 + 984), a5, 15);
      v147 = a10;
      if ((a5 & 8) == 0)
        goto LABEL_291;
    }
    else if ((a5 & 8) == 0)
    {
LABEL_291:
      v162 = v146 + 1;
      v163 = v145[v146];
      if ((char)v145[v146] < 0)
      {
        if (v163 > 0xBF)
        {
          if (v163 > 0xDF)
          {
            if (v163 > 0xEF)
            {
              v163 = *(_DWORD *)&v145[v162];
              v162 = v146 + 5;
            }
            else
            {
              v163 = ((v163 & 0xF) << 24) | (v145[v162] << 16) | (v145[v146 + 2] << 8) | v145[v146 + 3];
              v162 = v146 + 4;
            }
          }
          else
          {
            v163 = ((v163 & 0x1F) << 16) | (v145[v162] << 8) | v145[v146 + 2];
            v162 = v146 + 3;
          }
        }
        else
        {
          v164 = v145[v162] | ((v163 & 0x3F) << 8);
          v162 = v146 + 2;
          v163 = v164;
        }
      }
      if (v161 < v162)
      {
        si_analytics_log_2520("Expected offset %ld to fit in size %ld pc:%d, extras:%d type:%d", v162, v161, *(_DWORD *)(v204 + 984), a5, 15);
        return;
      }
      if (v163 != *((_DWORD *)v19 + 1))
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        {
          v201 = *((unsigned __int16 *)v19 + 1);
          v202 = *(int *)(v204 + 4);
          *(_QWORD *)&__src.st_dev = 0x404000802;
          LOWORD(__src.st_ino) = 2048;
          *(__darwin_ino64_t *)((char *)&__src.st_ino + 2) = v61;
          HIWORD(__src.st_uid) = 1024;
          __src.st_gid = a5;
          LOWORD(__src.st_rdev) = 1024;
          *(dev_t *)((char *)&__src.st_rdev + 2) = 15;
          *((_WORD *)&__src.st_rdev + 3) = 2048;
          __src.st_atimespec.tv_sec = v201;
          LOWORD(__src.st_atimespec.tv_nsec) = 2048;
          *(uint64_t *)((char *)&__src.st_atimespec.tv_nsec + 2) = a5;
          WORD1(__src.st_mtimespec.tv_sec) = 2048;
          *(__darwin_time_t *)((char *)&__src.st_mtimespec.tv_sec + 4) = v202;
          WORD2(__src.st_mtimespec.tv_nsec) = 2080;
          *(uint64_t *)((char *)&__src.st_mtimespec.tv_nsec + 6) = v204 + 324;
          _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Got the wrong field for index:%d, nameId:%lu, extras:%d, type:%d, flags:0x%lx(0x%lx), dst->flags:0x%lx, dst->name:%s", (uint8_t *)&__src, 0x46u);
        }
        return;
      }
      if (v162 - v146 > (int)v40)
      {
        si_analytics_log_2520("Expected len %ld to contain new data size %ld - %ld pc:%d extras:%d type:%d", (int)v40, v146, v162, *(_DWORD *)(v204 + 984), a5, 15);
        return;
      }
      v40 -= v162 - v146;
      goto LABEL_396;
    }
    v162 = v146;
LABEL_396:
    *((_DWORD *)v19 + 2) = v40;
    v194 = v18[2];
    v195 = v18[3];
    v196 = v195 + (int)v40;
    if (v196 >= v194)
    {
      v197 = (2 * v194);
      do
      {
        v198 = v197;
        v197 *= 2;
      }
      while (v198 <= v196);
      if (v147)
        v199 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(v147 + 16))(v147, v18);
      else
        v199 = (unsigned int *)malloc_type_realloc(v18, v198, 0x2F16373EuLL);
      v18 = v199;
      v199[2] = v198;
      *v211 = v199;
      v40 = *(unsigned int *)((char *)v199 + a3 + 8);
      v195 = v199[3];
      v194 = v198 & 0xFFFFFFFE;
    }
    if (v195 + (unint64_t)v40 <= v194)
    {
      memcpy((char *)v18 + a3 + 13, &v145[v162], v40);
      goto LABEL_405;
    }
    si_analytics_log_2520("%s:%u: failed assertion '%s' Expected %ld + %ld <= %ld extras:%d type:%d", "ldb.c", 1479, "(size_t)dbf->data_len + (size_t)dbo->used_bytes <= (size_t)dbo->size", v40, v195, v194, a5, 15);
LABEL_370:
    memset(&__src, 0, sizeof(__src));
    v186 = -2;
    v187 = *(_QWORD *)(v204 + 848);
    if (v187)
      goto LABEL_412;
    goto LABEL_415;
  }
  if (a4 != 14)
  {
    *(_WORD *)v19 = a4;
    if ((a5 & 3) == 2)
    {
      LOWORD(v20) = *((_WORD *)v19 + 1);
      goto LABEL_38;
    }
LABEL_41:
    if ((a5 & 1) != 0)
    {
      v38 = *a6;
      v39 = *a6 + 1;
      v40 = *(unsigned __int8 *)(a7 + *a6);
      v204 = a1;
      if (*(char *)(a7 + *a6) < 0)
      {
        if (v40 > 0xBF)
        {
          if (v40 > 0xDF)
          {
            if (v40 > 0xEF)
            {
              v40 = *(_DWORD *)(a7 + v39);
              v39 = v38 + 5;
            }
            else
            {
              v40 = ((v40 & 0xF) << 24) | (*(unsigned __int8 *)(a7 + v39) << 16) | (*(unsigned __int8 *)(v38 + a7 + 2) << 8) | *(unsigned __int8 *)(v38 + a7 + 3);
              v39 = v38 + 4;
            }
          }
          else
          {
            v40 = ((v40 & 0x1F) << 16) | (*(unsigned __int8 *)(a7 + v39) << 8) | *(unsigned __int8 *)(v38 + a7 + 2);
            v39 = v38 + 3;
          }
        }
        else
        {
          v41 = *(unsigned __int8 *)(a7 + v39) | ((v40 & 0x3F) << 8);
          v39 = v38 + 2;
          v40 = v41;
        }
      }
      *a6 = v39;
      v114 = a3 + 13;
      if (a3 + 13 > (unint64_t)v18[2])
      {
        v178 = __si_assert_copy_extra_1644(0);
        v179 = a5;
        v180 = v178;
        v181 = "";
        if (v178)
          v181 = v178;
        __message_assert("%s:%u: failed assertion '%s' %s Field outside allocated object (%lu + %lu) > %u extras:%d type:%d", "ldb.c", 1484, "dbfOffset + sizeof(db_field) <= dbo->size", v181, a3, 13, v18[2], v179, a4);
        free(v180);
        if (!__valid_fs(-1))
        {
          v182 = 3072;
          goto LABEL_419;
        }
        goto LABEL_417;
      }
      v115 = v40;
      *((_DWORD *)v19 + 2) = v40;
      v116 = v18[2];
      v117 = v18[3] + (unint64_t)v40;
      if (v117 >= v116)
      {
        v119 = (2 * v116);
        do
        {
          v120 = v119;
          v119 *= 2;
        }
        while (v120 <= v117);
        v121 = a8;
        if (a10)
          v123 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(a10 + 16))(a10, v18);
        else
          v123 = (unsigned int *)malloc_type_realloc(v18, v120, 0x2F16373EuLL);
        v18 = v123;
        v123[2] = v120;
        *a2 = v123;
        v19 = (char *)v123 + a3;
        v118 = *(unsigned int *)((char *)v123 + a3 + 8);
        v116 = v120 & 0xFFFFFFFE;
        v40 = *(unsigned int *)((char *)v123 + a3 + 8);
        v11 = a6;
        a8 = v121;
        v10 = a7;
      }
      else
      {
        v118 = v40;
      }
      if (v114 + v118 > v116)
      {
        v183 = __si_assert_copy_extra_1644(0);
        v184 = v183;
        v185 = "";
        if (v183)
          v185 = v183;
        __message_assert("%s:%u: failed assertion '%s' %s Field outside allocated object (%lu + %lu + %u) > %u extras:%d type:%d", "ldb.c", 1489, "dbfOffset + sizeof(db_field) + dbf->data_len <= dbo->size", v185, a3, 13, *((_DWORD *)v19 + 2), v18[2], a5, a4);
        free(v184);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (v39 + v118 <= a8)
      {
        v124 = v18[3];
        if (v118 + v124 <= v116)
        {
          memcpy(v19 + 13, (const void *)(v10 + v39), v118);
          *v11 += v118;
LABEL_405:
          LODWORD(v88) = v18[3] + v40;
          goto LABEL_406;
        }
        si_analytics_log_2520("%s:%u: failed assertion '%s' Expected %ld + %ld <= %ld extras:%d type:%d", "ldb.c", 1491, "(size_t)dbf->data_len + (size_t)dbo->used_bytes <= (size_t)dbo->size", v118, v124, v116, a5, a4);
        goto LABEL_370;
      }
      si_analytics_log_2520("%s:%u: failed assertion '%s' Expected offset %ld plus len %ld to fit in size %ld extras:%d type:%d", "ldb.c", 1490, "*offset+dbf->data_len <= buffer_size", v39, v115, a8, a5, a4);
      memset(&__src, 0, sizeof(__src));
      v175 = -2;
      v176 = *(_QWORD *)(v204 + 848);
      if (!v176)
      {
LABEL_351:
        if (!fstatat(v175, "CrystalGlow.created", &__src, 0))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xB00] = -559038737;
        abort();
      }
LABEL_348:
      v177 = *(_DWORD *)(v176 + 44);
      if (v177 >= 0xFFFFFFFE)
        v175 = -2;
      else
        v175 = v177;
      goto LABEL_351;
    }
    goto LABEL_46;
  }
  v20 = *((unsigned __int16 *)v19 + 1);
  if ((~v20 & 0x5020) == 0)
  {
    *((_WORD *)v19 + 1) = v20 | 0x10;
    if ((v20 & 8) == 0)
    {
      v219 = 0u;
      v220 = 0u;
      v217 = 0u;
      v218 = 0u;
      v215 = 0u;
      v216 = 0u;
      v214 = 0u;
      memset(&__src, 0, sizeof(__src));
      v21 = *a6;
      v22 = *a6 + 1;
      *a6 = v22;
      v23 = v21 + *(unsigned __int8 *)(a7 + v21);
      if (v22 >= v23)
      {
        v24 = 0;
      }
      else
      {
        v24 = 0;
        do
        {
          v25 = v22 + 1;
          v26 = *(unsigned __int8 *)(a7 + v22);
          if (*(char *)(a7 + v22) < 0)
          {
            v27 = *(unsigned __int8 *)(a7 + v22);
            if (v27 > 0xBF)
            {
              if (v27 > 0xDF)
              {
                if (v27 > 0xEF)
                {
                  if (v27 > 0xF7)
                  {
                    if (v27 > 0xFB)
                    {
                      if (v27 > 0xFD)
                      {
                        if (v27 == 255)
                        {
                          v26 = *(_QWORD *)(a7 + v25);
                          v22 += 9;
                        }
                        else
                        {
                          v26 = ((unint64_t)*(unsigned __int8 *)(a7 + v25) << 48) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 2) << 40) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 3) << 32) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 4) << 24) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 6) << 8) | *(unsigned __int8 *)(v22 + a7 + 7);
                          v22 += 8;
                        }
                      }
                      else
                      {
                        v26 = ((v26 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(a7 + v25) << 40) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 2) << 32) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 4) << 16) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 5) << 8) | *(unsigned __int8 *)(v22 + a7 + 6);
                        v22 += 7;
                      }
                    }
                    else
                    {
                      v26 = ((v26 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(a7 + v25) << 32) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 2) << 24) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 3) << 16) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 4) << 8) | *(unsigned __int8 *)(v22 + a7 + 5);
                      v22 += 6;
                    }
                  }
                  else
                  {
                    v26 = ((v26 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a7 + v25) << 24) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 3) << 8) | *(unsigned __int8 *)(v22 + a7 + 4);
                    v22 += 5;
                  }
                }
                else
                {
                  v26 = ((v26 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(a7 + v25) << 16) | ((unint64_t)*(unsigned __int8 *)(v22 + a7 + 2) << 8) | *(unsigned __int8 *)(v22 + a7 + 3);
                  v22 += 4;
                }
              }
              else
              {
                v26 = ((v26 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(a7 + v25) << 8) | *(unsigned __int8 *)(v22 + a7 + 2);
                v22 += 3;
              }
            }
            else
            {
              v26 = *(unsigned __int8 *)(a7 + v25) | ((v26 & 0x3F) << 8);
              v22 += 2;
            }
          }
          else
          {
            ++v22;
          }
          if (v24 <= 0x1F)
            *((_QWORD *)&__src.st_dev + v24++) = v26;
        }
        while (v22 < v23);
        *a6 = v22;
      }
      v69 = 8 * v24;
      v70 = v18[2];
      v71 = v18[3];
      v72 = 8 * v24 + v71;
      if (v72 >= v70)
      {
        v73 = (2 * v70);
        do
        {
          v74 = v73;
          v73 *= 2;
        }
        while (v74 <= v72);
        if (a10)
          v75 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(a10 + 16))(a10, v18);
        else
          v75 = (unsigned int *)malloc_type_realloc(v18, v74, 0x2F16373EuLL);
        v18 = v75;
        v75[2] = v74;
        *a2 = v75;
        v19 = (char *)v75 + a3;
        v71 = v75[3];
        v72 = v69 + v71;
        v70 = v74 & 0xFFFFFFFE;
      }
      if (v72 <= v70)
      {
        *((_DWORD *)v19 + 2) = v69;
        memcpy(v19 + 13, &__src, v69 & 0xFFFFFFF8);
        *(_WORD *)v19 = 14;
        LODWORD(v88) = v18[3] + v69;
        goto LABEL_406;
      }
      si_analytics_log_2520("%s:%u: failed assertion '%s' Expected %ld + %ld <= %ld type:%d", "ldb.c", 1239, "sizeof(uint64_t)*vi + (size_t)dbo->used_bytes <= (size_t)dbo->size", 8, v71, v70, 14);
      memset(v212, 0, sizeof(v212));
      v186 = -2;
      v188 = *(_QWORD *)(a1 + 848);
      if (v188)
      {
        v189 = *(_DWORD *)(v188 + 44);
        if (v189 >= 0xFFFFFFFE)
          v186 = -2;
        else
          v186 = v189;
      }
      p_src = (stat *)v212;
LABEL_416:
      if (fstatat(v186, "CrystalGlow.created", p_src, 0))
      {
        v182 = 2816;
LABEL_419:
        *(_DWORD *)v182 = -559038737;
        abort();
      }
LABEL_417:
      v182 = 2989;
      goto LABEL_419;
    }
    v50 = v18[2];
    v51 = v18[3] + 8;
    if (v51 >= v50)
    {
      v52 = (2 * v50);
      do
      {
        v53 = v52;
        v52 *= 2;
      }
      while (v53 <= v51);
      if (a10)
        v54 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(a10 + 16))(a10, v18);
      else
        v54 = (unsigned int *)malloc_type_realloc(v18, v53, 0x2F16373EuLL);
      v18 = v54;
      v54[2] = v53;
      *a2 = v54;
      v19 = (char *)v54 + a3;
      v51 = v54[3] + 8;
      v50 = v53 & 0xFFFFFFFE;
    }
    if (v51 <= v50)
    {
      v110 = *v11;
      v111 = *v11 + 1;
      v112 = *(unsigned __int8 *)(v10 + *v11);
      if (*(char *)(v10 + *v11) < 0)
      {
        v113 = *(unsigned __int8 *)(v10 + *v11);
        if (v113 > 0xBF)
        {
          if (v113 > 0xDF)
          {
            if (v113 > 0xEF)
            {
              if (v113 > 0xF7)
              {
                if (v113 > 0xFB)
                {
                  if (v113 > 0xFD)
                  {
                    if (v113 == 255)
                    {
                      v112 = *(_QWORD *)(v10 + v111);
                      v111 = v110 + 9;
                    }
                    else
                    {
                      v112 = ((unint64_t)*(unsigned __int8 *)(v10 + v111) << 48) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 2) << 40) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 3) << 32) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 4) << 24) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 6) << 8) | *(unsigned __int8 *)(v110 + v10 + 7);
                      v111 = v110 + 8;
                    }
                  }
                  else
                  {
                    v112 = ((v112 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v10 + v111) << 40) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 2) << 32) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 4) << 16) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 5) << 8) | *(unsigned __int8 *)(v110 + v10 + 6);
                    v111 = v110 + 7;
                  }
                }
                else
                {
                  v112 = ((v112 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v10 + v111) << 32) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 2) << 24) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 3) << 16) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 4) << 8) | *(unsigned __int8 *)(v110 + v10 + 5);
                  v111 = v110 + 6;
                }
              }
              else
              {
                v112 = ((v112 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v10 + v111) << 24) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 3) << 8) | *(unsigned __int8 *)(v110 + v10 + 4);
                v111 = v110 + 5;
              }
            }
            else
            {
              v112 = ((v112 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v10 + v111) << 16) | ((unint64_t)*(unsigned __int8 *)(v110 + v10 + 2) << 8) | *(unsigned __int8 *)(v110 + v10 + 3);
              v111 = v110 + 4;
            }
          }
          else
          {
            v112 = ((v112 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v10 + v111) << 8) | *(unsigned __int8 *)(v110 + v10 + 2);
            v111 = v110 + 3;
          }
        }
        else
        {
          v112 = *(unsigned __int8 *)(v10 + v111) | ((v112 & 0x3F) << 8);
          v111 = v110 + 2;
        }
      }
      *v11 = v111;
      *(_QWORD *)(v19 + 13) = v112;
      *((_DWORD *)v19 + 2) = 8;
      *(_WORD *)v19 = 14;
      LODWORD(v88) = v18[3] + 8;
      goto LABEL_406;
    }
    si_analytics_log_2520("%s:%u: failed assertion '%s' Expected %ld + %ld <= %ld");
LABEL_411:
    memset(&__src, 0, sizeof(__src));
    v186 = -2;
    v187 = *(_QWORD *)(a1 + 848);
    if (v187)
    {
LABEL_412:
      v200 = *(_DWORD *)(v187 + 44);
      if (v200 >= 0xFFFFFFFE)
        v186 = -2;
      else
        v186 = v200;
    }
LABEL_415:
    p_src = &__src;
    goto LABEL_416;
  }
  v28 = 14;
LABEL_37:
  *(_WORD *)v19 = v28;
  if ((a5 & 3) != 2)
    goto LABEL_41;
LABEL_38:
  *((_WORD *)v19 + 1) = v20 | 0x20;
  v34 = *a6;
  v35 = *a6 + 1;
  v36 = *(unsigned __int8 *)(a7 + *a6);
  if (*(char *)(a7 + *a6) < 0)
  {
    if (v36 > 0xBF)
    {
      if (v36 > 0xDF)
      {
        if (v36 > 0xEF)
        {
          v36 = *(_DWORD *)(a7 + v35);
          v35 = v34 + 5;
        }
        else
        {
          v36 = ((v36 & 0xF) << 24) | (*(unsigned __int8 *)(a7 + v35) << 16) | (*(unsigned __int8 *)(v34 + a7 + 2) << 8) | *(unsigned __int8 *)(v34 + a7 + 3);
          v35 = v34 + 4;
        }
      }
      else
      {
        v36 = ((v36 & 0x1F) << 16) | (*(unsigned __int8 *)(a7 + v35) << 8) | *(unsigned __int8 *)(v34 + a7 + 2);
        v35 = v34 + 3;
      }
    }
    else
    {
      v37 = *(unsigned __int8 *)(a7 + v35) | ((v36 & 0x3F) << 8);
      v35 = v34 + 2;
      v36 = v37;
    }
  }
  *a6 = v35;
  if (v35 > a8)
    goto LABEL_343;
  *((_DWORD *)v19 + 2) = v36;
  v88 = v18[3];
  v89 = v88 + v36;
  if (v89 >= 0xFFFFFFFF)
  {
    si_analytics_log_2520("%s:%u: failed assertion '%s' Overflow %ld + %ld extras:%d type:%d");
    goto LABEL_411;
  }
  v90 = v18[2];
  if (v89 >= v90)
  {
    v92 = a3;
    v93 = a1;
    v95 = (2 * v90);
    do
    {
      v96 = v95;
      v95 *= 2;
    }
    while (v96 <= v89);
    v97 = a8;
    if (a10)
      v98 = (unsigned int *)(*(uint64_t (**)(uint64_t, unsigned int *))(a10 + 16))(a10, v18);
    else
      v98 = (unsigned int *)malloc_type_realloc(v18, v96, 0x2F16373EuLL);
    v18 = v98;
    v98[2] = v96;
    *a2 = v98;
    v19 = (char *)v98 + v92;
    v88 = v98[3];
    v89 = *((unsigned int *)v19 + 2) + v88;
    v90 = v96 & 0xFFFFFFFE;
    v91 = *((_DWORD *)v19 + 2);
    v11 = a6;
    a1 = v93;
    a8 = v97;
    v10 = a7;
  }
  else
  {
    v91 = v36;
  }
  if (v89 > v90)
  {
    si_analytics_log_2520("%s:%u: failed assertion '%s' Buffer overflow %ld + %ld > %ld extras:%d type:%d", "ldb.c");
    goto LABEL_347;
  }
  if (a4 - 9 < 4 || a4 == 14)
  {
    if (v35 + v36 > a8)
    {
      si_analytics_log_2520("%s:%u: failed assertion '%s' Buffer overflow: %ld + %ld > %ld extras:%d type:%d", "ldb.c");
      goto LABEL_347;
    }
    if (v88 + (unint64_t)v36 > v90)
    {
      si_analytics_log_2520("%s:%u: failed assertion '%s' dbo overflow: %ld + %ld > %ld extras:%d type:%d", "ldb.c");
      goto LABEL_411;
    }
    memcpy(v19 + 13, (const void *)(v10 + v35), v36);
    *v11 += v36;
    *((_DWORD *)v19 + 2) = v36;
    LODWORD(v88) = v18[3] + v36;
    goto LABEL_406;
  }
  if (!v91)
  {
LABEL_406:
    v18[3] = v88;
    return;
  }
  if (a4 < 9 || a4 == 15)
  {
    v99 = 0;
    v100 = v19 + 13;
    do
    {
      v104 = 1 << a4;
      if (((1 << a4) & 7) != 0)
      {
        if (v18[3] >= v18[2])
          goto LABEL_372;
        v100[v99] = *(_BYTE *)(v10 + v35);
        v102 = *v11 + 1;
        *v11 = v102;
        if (v102 > a8)
          goto LABEL_343;
        ++v99;
      }
      else if ((v104 & 0x8060) != 0)
      {
        if ((unint64_t)v18[3] + 4 > v18[2])
          goto LABEL_372;
        v102 = v35 + 1;
        v105 = *(unsigned __int8 *)(v10 + v35);
        if (*(char *)(v10 + v35) < 0)
        {
          if (v105 > 0xBF)
          {
            if (v105 > 0xDF)
            {
              if (v105 > 0xEF)
              {
                v105 = *(_DWORD *)(v10 + v102);
                v102 = v35 + 5;
              }
              else
              {
                v105 = ((v105 & 0xF) << 24) | (*(unsigned __int8 *)(v10 + v102) << 16) | (*(unsigned __int8 *)(v35 + v10 + 2) << 8) | *(unsigned __int8 *)(v35 + v10 + 3);
                v102 = v35 + 4;
              }
            }
            else
            {
              v105 = ((v105 & 0x1F) << 16) | (*(unsigned __int8 *)(v10 + v102) << 8) | *(unsigned __int8 *)(v35 + v10 + 2);
              v102 = v35 + 3;
            }
          }
          else
          {
            v106 = *(unsigned __int8 *)(v10 + v102) | ((v105 & 0x3F) << 8);
            v102 = v35 + 2;
            v105 = v106;
          }
        }
        *v11 = v102;
        *(_DWORD *)&v100[v99] = v105;
        if (v102 > a8)
          goto LABEL_343;
        v99 += 4;
      }
      else if ((v104 & 0x18) != 0)
      {
        if ((unint64_t)v18[3] + 2 > v18[2])
        {
          si_analytics_log_2520("%s:%u: failed assertion '%s' Expected %ld + %ld <= %ld extras:%d type:%d", "ldb.c");
          goto LABEL_347;
        }
        v102 = v35 + 1;
        v107 = *(unsigned __int8 *)(v10 + v35);
        if (*(char *)(v10 + v35) < 0)
        {
          if (v107 > 0xBF)
          {
            if (v107 >= 0xE0)
              goto LABEL_390;
            LOWORD(v107) = *(unsigned __int8 *)(v35 + v10 + 2) | (*(unsigned __int8 *)(v10 + v102) << 8);
            v102 = v35 + 3;
          }
          else
          {
            v108 = *(unsigned __int8 *)(v10 + v102) | ((v107 & 0x3F) << 8);
            v102 = v35 + 2;
            LOWORD(v107) = v108;
          }
        }
        *v11 = v102;
        *(_WORD *)&v100[v99] = v107;
        if (v102 > a8)
          goto LABEL_410;
        v99 += 2;
      }
      else
      {
        if ((unint64_t)v18[3] + 8 > v18[2])
        {
LABEL_372:
          si_analytics_log_2520("%s:%u: failed assertion '%s' Expected %ld + %ld <= %ld extras:%d type:%d", "ldb.c");
          goto LABEL_411;
        }
        v102 = v35 + 1;
        v101 = *(unsigned __int8 *)(v10 + v35);
        if (*(char *)(v10 + v35) < 0)
        {
          v109 = *(unsigned __int8 *)(v10 + v35);
          if (v109 <= 0xBF)
          {
            v101 = *(unsigned __int8 *)(v10 + v102) | ((v101 & 0x3F) << 8);
            v102 = v35 + 2;
          }
          else if (v109 > 0xDF)
          {
            if (v109 > 0xEF)
            {
              if (v109 > 0xF7)
              {
                if (v109 > 0xFB)
                {
                  if (v109 > 0xFD)
                  {
                    if (v109 == 255)
                    {
                      v101 = *(_QWORD *)(v10 + v102);
                      v102 = v35 + 9;
                    }
                    else
                    {
                      v101 = ((unint64_t)*(unsigned __int8 *)(v10 + v102) << 48) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 2) << 40) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 3) << 32) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 4) << 24) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 6) << 8) | *(unsigned __int8 *)(v35 + v10 + 7);
                      v102 = v35 + 8;
                    }
                  }
                  else
                  {
                    v101 = ((v101 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v10 + v102) << 40) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 2) << 32) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 3) << 24) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 4) << 16) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 5) << 8) | *(unsigned __int8 *)(v35 + v10 + 6);
                    v102 = v35 + 7;
                  }
                }
                else
                {
                  v101 = ((v101 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v10 + v102) << 32) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 2) << 24) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 3) << 16) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 4) << 8) | *(unsigned __int8 *)(v35 + v10 + 5);
                  v102 = v35 + 6;
                }
              }
              else
              {
                v101 = ((v101 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v10 + v102) << 24) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 3) << 8) | *(unsigned __int8 *)(v35 + v10 + 4);
                v102 = v35 + 5;
              }
            }
            else
            {
              v101 = ((v101 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v10 + v102) << 16) | ((unint64_t)*(unsigned __int8 *)(v35 + v10 + 2) << 8) | *(unsigned __int8 *)(v35 + v10 + 3);
              v102 = v35 + 4;
            }
          }
          else
          {
            v101 = ((v101 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v10 + v102) << 8) | *(unsigned __int8 *)(v35 + v10 + 2);
            v102 = v35 + 3;
          }
        }
        *v11 = v102;
        *(_QWORD *)&v100[v99] = v101;
        v99 += 8;
      }
      v103 = *((unsigned int *)v19 + 2);
      v35 = v102;
    }
    while (v99 < v103);
    LODWORD(v88) = v18[3] + v103;
    goto LABEL_406;
  }
}

uint64_t skipDBFData(uint64_t result, int a2, uint64_t *a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  char *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  const char *v38;

  if ((_DWORD)result != 14)
  {
    if ((a2 & 3) == 2)
    {
      if ((_DWORD)result != 15)
        goto LABEL_11;
    }
    else
    {
      if ((a2 & 1) == 0)
      {
        v11 = 8;
        switch((int)result)
        {
          case 0:
          case 1:
          case 2:
            v7 = *a3 + 1;
            break;
          case 3:
          case 4:
            v20 = *a3;
            if (*(char *)(a4 + *a3) < 0)
            {
              v26 = *(unsigned __int8 *)(a4 + *a3);
              if (v26 >= 0xC0)
              {
                if (v26 >= 0xE0)
                {
                  v36 = __si_assert_copy_extra_1644(0);
                  v37 = v36;
                  v38 = "";
                  if (v36)
                    v38 = v36;
                  __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v38);
                  free(v37);
                  if (__valid_fs(-1))
                  {
                    MEMORY[0xBAD] = -559038737;
                    abort();
                  }
                  MEMORY[0xC00] = -559038737;
                  abort();
                }
                v7 = v20 + 3;
              }
              else
              {
                v7 = v20 + 2;
              }
            }
            else
            {
              v7 = v20 + 1;
            }
            break;
          case 5:
          case 6:
          case 15:
            goto LABEL_29;
          case 7:
          case 8:
            v6 = *a3;
            v12 = *(char *)(a4 + *a3);
            if (v12 < 0)
              goto LABEL_18;
            goto LABEL_30;
          case 9:
            v11 = 4;
            goto LABEL_113;
          case 10:
          case 12:
            goto LABEL_113;
          default:
            goto LABEL_25;
        }
        goto LABEL_114;
      }
      if ((_DWORD)result != 15)
      {
LABEL_31:
        v16 = *a3;
        v17 = *a3 + 1;
        v18 = *(unsigned __int8 *)(a4 + *a3);
        if (*(char *)(a4 + *a3) < 0)
        {
          if (v18 <= 0xBF)
          {
            v7 = v16 + 2 + (*(unsigned __int8 *)(a4 + v17) | ((v18 & 0x3F) << 8));
            goto LABEL_114;
          }
          if (v18 <= 0xDF)
          {
            v7 = v16
               + 3
               + (((v18 & 0x1F) << 16) | (*(unsigned __int8 *)(a4 + v17) << 8) | *(unsigned __int8 *)(v16 + a4 + 2));
            goto LABEL_114;
          }
          if (v18 <= 0xEF)
          {
            v7 = v16
               + 4
               + (((v18 & 0xF) << 24) | (*(unsigned __int8 *)(a4 + v17) << 16) | (*(unsigned __int8 *)(v16 + a4 + 2) << 8) | *(unsigned __int8 *)(v16 + a4 + 3));
            goto LABEL_114;
          }
          v18 = *(_DWORD *)(a4 + v17);
          v17 = v16 + 5;
        }
        v7 = v17 + v18;
LABEL_114:
        *a3 = v7;
        return result;
      }
    }
LABEL_29:
    v6 = *a3;
    if (*(char *)(a4 + *a3) < 0)
    {
      v19 = *(unsigned __int8 *)(a4 + *a3);
      if (v19 > 0xBF)
      {
        if (v19 > 0xDF)
        {
          if (v19 > 0xEF)
          {
LABEL_53:
            v7 = v6 + 5;
            goto LABEL_114;
          }
LABEL_46:
          v7 = v6 + 4;
          goto LABEL_114;
        }
LABEL_40:
        v7 = v6 + 3;
        goto LABEL_114;
      }
LABEL_34:
      v7 = v6 + 2;
      goto LABEL_114;
    }
LABEL_30:
    v7 = v6 + 1;
    goto LABEL_114;
  }
  v5 = (32 * a2) & 0x1000;
  if (a5)
    v5 = 4096;
  if ((((a2 << 7) | (16 * a2)) & 0x4020 | v5) == 0x5020)
  {
    v6 = *a3;
    if ((a2 & 4) == 0)
    {
      v7 = v6 + *(unsigned __int8 *)(a4 + v6);
      goto LABEL_114;
    }
    v12 = *(char *)(a4 + v6);
    if (v12 < 0)
    {
LABEL_18:
      if (v12 > 0xBFu)
      {
        if (v12 > 0xDFu)
        {
          if (v12 > 0xEFu)
          {
            if (v12 > 0xF7u)
            {
              if (v12 > 0xFBu)
              {
                if (v12 > 0xFDu)
                {
                  if (v12 == 255)
                    v7 = v6 + 9;
                  else
                    v7 = v6 + 8;
                }
                else
                {
                  v7 = v6 + 7;
                }
              }
              else
              {
                v7 = v6 + 6;
              }
              goto LABEL_114;
            }
            goto LABEL_53;
          }
          goto LABEL_46;
        }
        goto LABEL_40;
      }
      goto LABEL_34;
    }
    goto LABEL_30;
  }
  if ((a2 & 3) != 2)
  {
    if ((a2 & 1) == 0)
    {
LABEL_25:
      v13 = *a3;
      v14 = *a3 + 1;
      LODWORD(v11) = *(unsigned __int8 *)(a4 + *a3);
      if (*(char *)(a4 + *a3) < 0)
      {
        if (v11 > 0xBF)
        {
          if (v11 > 0xDF)
          {
            if (v11 > 0xEF)
            {
              LODWORD(v11) = *(_DWORD *)(a4 + v14);
              v14 = v13 + 5;
            }
            else
            {
              LODWORD(v11) = ((v11 & 0xF) << 24) | (*(unsigned __int8 *)(a4 + v14) << 16) | (*(unsigned __int8 *)(v13 + a4 + 2) << 8) | *(unsigned __int8 *)(v13 + a4 + 3);
              v14 = v13 + 4;
            }
          }
          else
          {
            LODWORD(v11) = ((v11 & 0x1F) << 16) | (*(unsigned __int8 *)(a4 + v14) << 8) | *(unsigned __int8 *)(v13 + a4 + 2);
            v14 = v13 + 3;
          }
        }
        else
        {
          v15 = *(unsigned __int8 *)(a4 + v14) | ((v11 & 0x3F) << 8);
          v14 = v13 + 2;
          LODWORD(v11) = v15;
        }
      }
      *a3 = v14;
      v11 = v11;
LABEL_113:
      v7 = *a3 + v11;
      goto LABEL_114;
    }
    goto LABEL_31;
  }
LABEL_11:
  v8 = *a3;
  v7 = *a3 + 1;
  LODWORD(v9) = *(unsigned __int8 *)(a4 + *a3);
  if (*(char *)(a4 + *a3) < 0)
  {
    if (v9 > 0xBF)
    {
      if (v9 > 0xDF)
      {
        if (v9 > 0xEF)
        {
          LODWORD(v9) = *(_DWORD *)(a4 + v7);
          v7 = v8 + 5;
        }
        else
        {
          LODWORD(v9) = ((v9 & 0xF) << 24) | (*(unsigned __int8 *)(a4 + v7) << 16) | (*(unsigned __int8 *)(v8 + a4 + 2) << 8) | *(unsigned __int8 *)(v8 + a4 + 3);
          v7 = v8 + 4;
        }
      }
      else
      {
        LODWORD(v9) = ((v9 & 0x1F) << 16) | (*(unsigned __int8 *)(a4 + v7) << 8) | *(unsigned __int8 *)(v8 + a4 + 2);
        v7 = v8 + 3;
      }
    }
    else
    {
      v10 = *(unsigned __int8 *)(a4 + v7) | ((v9 & 0x3F) << 8);
      v7 = v8 + 2;
      LODWORD(v9) = v10;
    }
  }
  *a3 = v7;
  if ((result - 9) < 4 || (_DWORD)result == 14)
  {
    v7 += v9;
    goto LABEL_114;
  }
  if ((_DWORD)v9)
  {
    v9 = v9;
    switch((int)result)
    {
      case 0:
      case 1:
      case 2:
        if (v9 <= 1uLL)
          v9 = 1;
        v7 += v9;
        goto LABEL_114;
      case 3:
      case 4:
        v27 = 0;
        do
        {
          if (*(char *)(a4 + v7) < 0)
          {
            v29 = *(unsigned __int8 *)(a4 + v7);
            if (v29 >= 0xC0)
            {
              if (v29 > 0xDF)
              {
                v32 = __si_assert_copy_extra_1644(0);
                v33 = v32;
                v34 = "";
                if (v32)
                  v34 = v32;
                __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v34);
                free(v33);
                if (__valid_fs(-1))
                  v35 = 2989;
                else
                  v35 = 3072;
                *(_DWORD *)v35 = -559038737;
                abort();
              }
              v28 = 3;
            }
            else
            {
              v28 = 2;
            }
          }
          else
          {
            v28 = 1;
          }
          v7 += v28;
          *a3 = v7;
          v27 += 2;
        }
        while (v27 < v9);
        return result;
      case 5:
      case 6:
      case 15:
        v21 = 0;
        do
        {
          if (*(char *)(a4 + v7) < 0)
          {
            v22 = *(unsigned __int8 *)(a4 + v7);
            v23 = v7 + 2;
            v24 = v7 + 3;
            v25 = v7 + 4;
            v7 += 5;
            if (v22 < 0xF0)
              v7 = v25;
            if (v22 < 0xE0)
              v7 = v24;
            if (v22 < 0xC0)
              v7 = v23;
          }
          else
          {
            ++v7;
          }
          v21 += 4;
        }
        while (v21 < v9);
        goto LABEL_114;
      case 7:
      case 8:
        v30 = 0;
        do
        {
          if (*(char *)(a4 + v7) < 0)
          {
            v31 = *(unsigned __int8 *)(a4 + v7);
            if (v31 >= 0xC0)
            {
              if (v31 >= 0xE0)
              {
                if (v31 >= 0xF0)
                {
                  if (v31 >= 0xF8)
                  {
                    if (v31 >= 0xFC)
                    {
                      if (v31 >= 0xFE)
                      {
                        if (v31 == 255)
                          v7 += 9;
                        else
                          v7 += 8;
                      }
                      else
                      {
                        v7 += 7;
                      }
                    }
                    else
                    {
                      v7 += 6;
                    }
                  }
                  else
                  {
                    v7 += 5;
                  }
                }
                else
                {
                  v7 += 4;
                }
              }
              else
              {
                v7 += 3;
              }
            }
            else
            {
              v7 += 2;
            }
          }
          else
          {
            ++v7;
          }
          v30 += 8;
        }
        while (v30 < v9);
        goto LABEL_114;
      default:
        while (1)
          ;
    }
  }
  return result;
}

uint64_t get_string_and_length_for_id(uint64_t a1, unsigned int a2, int a3, int a4)
{
  unint64_t v4;
  _DWORD *v7;
  uint64_t data_locked;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  int v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  const char *v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unint64_t v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = a3 & 0x7FFFFFFF;
  if (v4 > 0x7FFFFFFD)
    return 0;
  if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
  {
    v7 = *(_DWORD **)(a1 + 8 * a2 + 880);
    v23 = 0;
    if (a4)
    {
      data_locked = data_map_get_data_locked((uint64_t)v7, v4, &v23);
      if (data_locked)
        return data_locked;
    }
    else
    {
      data_locked = (uint64_t)data_map_get_data((uint64_t)v7, v4, &v23);
      if (data_locked)
        return data_locked;
    }
    v12 = data_map_count((uint64_t)v7);
    if (v12 < v4)
    {
      v22 = v12;
      v13 = *__error();
      v14 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v18 = *(_DWORD *)(a1 + 4);
        v19 = data_map_valid(v7);
        *(_DWORD *)buf = 136316930;
        v25 = "_get_string_and_length_for_id";
        v26 = 1024;
        v27 = 571;
        v20 = "y";
        if (!v19)
          v20 = "n";
        v28 = 2048;
        v29 = v4;
        v30 = 2048;
        v31 = v22;
        v32 = 1024;
        v33 = a2;
        v34 = 2080;
        v35 = a1 + 324;
        v36 = 1024;
        v37 = v18;
        v38 = 2080;
        v39 = v20;
        _os_log_error_impl(&dword_1B8270000, v14, OS_LOG_TYPE_ERROR, "%s:%d: Invalid string_id:%lu, map_count:%lu, index:%d, dst->name:%s, dst->flags:0x%x valid:%s", buf, 0x46u);
      }
      *__error() = v13;
      if ((*(_BYTE *)(a1 + 4) & 0x20) != 0)
      {
        v15 = *__error();
        v16 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          v21 = *(_DWORD *)(a1 + 4);
          *(_DWORD *)buf = 136315906;
          v25 = "_get_string_and_length_for_id";
          v26 = 1024;
          v27 = 573;
          v28 = 2080;
          v29 = a1 + 324;
          v30 = 1024;
          LODWORD(v31) = v21;
          _os_log_error_impl(&dword_1B8270000, v16, OS_LOG_TYPE_ERROR, "%s:%d: marking invalid %s flags:0x%x", buf, 0x22u);
        }
        *__error() = v15;
        v17 = *(_DWORD *)(a1 + 4);
        goto LABEL_23;
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 8 * a2 + 880);
    if (*(_DWORD *)(v9 + 56) > v4
      && (v10 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v4)) != 0)
    {
      return v10 + table_extra_bytes_10004[a2] + 4;
    }
    else
    {
      v17 = *(_DWORD *)(a1 + 4);
      if ((v17 & 0x20) != 0)
      {
        data_locked = 0;
LABEL_23:
        *(_DWORD *)(a1 + 4) = v17 | 0x40;
        return data_locked;
      }
      if (SIIsAppleInternal_onceToken != -1)
        dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_4644);
      return 0;
    }
  }
  return data_locked;
}

char *__dboi_inflateDBO_block_invoke(uint64_t a1, char *a2, size_t a3, unint64_t a4)
{
  _QWORD **v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  _QWORD *v9;

  v4 = *(_QWORD ***)(a1 + 32);
  v5 = *v4;
  if (a2)
  {
    v6 = a2;
    v7 = &a2[a4];
    if ((unint64_t)&a2[a4] > v5[2])
    {
      v9 = slab_new(v4, a4, 250);
      memcpy(v9, v6, a3);
      return (char *)v9;
    }
LABEL_5:
    v5[1] = v7;
    return v6;
  }
  v6 = (char *)v5[1];
  v7 = &v6[a4];
  if ((unint64_t)&v6[a4 + 8] < v5[2])
    goto LABEL_5;
  return (char *)slab_new(v4, a4, 250);
}

void __si_enqueue_barrier_with_qos_block_invoke(uint64_t a1)
{
  si_enqueue_barrier_inner_with_qos(*(_QWORD *)(a1 + 32), *(uint64_t **)(a1 + 40), *(qos_class_t *)(a1 + 64), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void __RLEOIDArrayFinalize(char *a1)
{
  void **v2;
  void **v3;

  pthread_rwlock_destroy((pthread_rwlock_t *)(a1 + 16));
  a1[384] = 1;
  *((_DWORD *)a1 + 56) = 0;
  *((_QWORD *)a1 + 27) = 0;
  SIValueSet<unsigned int>::_SIValueSetInnerDealloc((_QWORD *)a1 + 32, *((const __CFAllocator **)a1 + 31));
  v2 = (void **)*((_QWORD *)a1 + 29);
  if (v2)
  {
    SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_s::clear(v2, *((const __CFAllocator **)a1 + 31), *((_QWORD *)a1 + 30));
    bzero(*((void **)a1 + 29), 0x1F88uLL);
  }
  *((_QWORD *)a1 + 30) = 0;
  SIValueSet<unsigned int>::_SIValueSetInnerDealloc((_QWORD *)a1 + 32, *((const __CFAllocator **)a1 + 31));
  v3 = (void **)*((_QWORD *)a1 + 29);
  if (v3)
  {
    SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_s::clear(v3, *((const __CFAllocator **)a1 + 31), *((_QWORD *)a1 + 30));
    CFAllocatorDeallocate(*((CFAllocatorRef *)a1 + 31), *((void **)a1 + 29));
    *((_QWORD *)a1 + 29) = 0;
  }
}

void zone_deallocate(void *ptr, malloc_zone_t *zone)
{
  malloc_zone_free(zone, ptr);
}

void SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_s::clear(void **a1, const __CFAllocator *a2, uint64_t a3)
{
  void *v6;
  _QWORD *v7;

  v6 = *a1;
  if (v6)
  {
    SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_s::clear(v6, a2, 63);
    CFAllocatorDeallocate(a2, *a1);
    *a1 = 0;
  }
  if (a3)
  {
    v7 = a1 + 1;
    do
    {
      SIValueSet<unsigned int>::_SIValueSetInnerDealloc(v7, a2);
      v7 += 16;
      --a3;
    }
    while (a3);
  }
}

unsigned int *_ContentIndexDocSetRetain(const __CFAllocator *a1, unsigned int *a2)
{
  unsigned int *result;
  unsigned int v3;

  result = a2;
  if (a2)
  {
    do
      v3 = __ldaxr(a2);
    while (__stlxr(v3 + 1, a2));
  }
  return result;
}

void stack_deallocate(void *ptr, _QWORD *a2)
{
  malloc_zone_t *v3;

  if (*a2 > (unint64_t)ptr || a2[2] <= (unint64_t)ptr)
  {
    v3 = (malloc_zone_t *)a2[4];
    --a2[3];
    malloc_zone_free(v3, ptr);
  }
}

void db_release_files(char **a1)
{
  _fd_release_fd(*a1, *((_DWORD *)a1 + 2), 0, (uint64_t)a1[2]);
  fd_release(*a1);
  free(a1);
}

uint64_t _si_delete_attributes_inner(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6, _BYTE *a7)
{
  int v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void (*v19)(_QWORD);
  int v20;
  NSObject *v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  int v28;
  size_t v29;
  const char *string_for_id;
  const char *v31;
  const __CFString *v32;
  int v33;
  const __CFString *v34;
  CFStringRef v35;
  size_t v36;
  const char *v37;
  int *v38;
  char v39;
  CFStringRef v40;
  size_t v41;
  const UInt8 *v42;
  const char *v43;
  char v44;
  CFStringRef v45;
  CFStringRef v46;
  CFDictionaryRef *v47;
  const __CFDictionary *v48;
  int v49;
  char v50;
  const char *v51;
  const char *v52;
  size_t v53;
  const __CFString *v54;
  int *v55;
  int v56;
  size_t v57;
  char v58;
  char v59;
  unsigned int v60;
  int v61;
  const __CFString *v62;
  unsigned int v63;
  CFStringRef v64;
  const __CFAllocator *v65;
  CFMutableArrayRef Mutable;
  const __CFAllocator *v67;
  __CFArray *v68;
  __CFDictionary *v69;
  __CFDictionary *v70;
  CFStringRef v71;
  int v72;
  int v73;
  NSObject *v74;
  CFStringRef v75;
  size_t v76;
  int field_by_id;
  unsigned __int8 *v78;
  uint64_t v79;
  void (*v80)(void);
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  void (*v84)(_QWORD);
  unsigned __int8 *v85;
  char *v86;
  uint64_t v87;
  int *v88;
  _BYTE *v89;
  const __CFAllocator *v90;
  CFStringRef v91;
  CFStringRef v92;
  CFStringRef v93;
  uint64_t v94;
  void (*v95)(_QWORD, _QWORD, CFStringRef, CFStringRef, _QWORD);
  unint64_t v96;
  UInt8 *i;
  uint64_t v98;
  uint64_t v99;
  UInt8 *v100;
  unint64_t v101;
  const __CFString *v102;
  size_t v103;
  size_t v104;
  CFStringRef v105;
  CFStringRef v106;
  CFStringRef v107;
  uint64_t v108;
  void (*v109)(_QWORD, _QWORD, CFStringRef, CFStringRef, _QWORD);
  int v110;
  NSObject *v111;
  int v112;
  NSObject *v113;
  int v114;
  NSObject *v115;
  int v116;
  char *v117;
  char *v118;
  const char *v119;
  const __CFAllocator *alloc;
  int v121;
  char v122;
  int v123;
  int v124;
  CFStringRef v125;
  uint64_t v126;
  const __CFString *v127;
  int v128;
  int v129;
  int v135;
  int v136;
  unint64_t v137;
  UInt8 *bytes;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  _QWORD *v147;
  unsigned __int8 *v148;
  unint64_t v149;
  uint8_t buf[32];
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v147 = 0;
  v10 = *(unsigned __int8 *)(a1 + 2072);
  v128 = *(_DWORD *)(a1 + 828);
  do
  {
    v11 = __ldxr(exceptionSequenceNum);
    v12 = v11 + 1;
  }
  while (__stxr(v11 + 1, exceptionSequenceNum));
  v13 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, *(_QWORD *)(a1 + 1184), 0x40000000, v12);
  v145 = HIDWORD(v13);
  v146 = v13;
  v143 = v15;
  v144 = v14;
  v16 = *(_QWORD *)&threadData[18 * v13 + 2];
  v17 = v16 + 320 * HIDWORD(v13);
  *(_BYTE *)(v17 + 216) = 0;
  v18 = *(_DWORD *)(v17 + 312);
  v19 = *(void (**)(_QWORD))(v17 + 224);
  if (v19)
    v19(*(_QWORD *)(v16 + 320 * HIDWORD(v13) + 288));
  v142 = v146;
  v141 = v145;
  v140 = v144;
  v139 = v143;
  if (_setjmp((int *)v17))
  {
    v20 = *__error();
    v21 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "_si_delete_attributes_inner";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3177;
      _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v20;
    *(_DWORD *)(v17 + 312) = v18;
    CIOnThreadCleanUpReset(v139);
    dropThreadId(v142, 1, v12);
    return CICleanUpReset(v142, v140);
  }
  if (!db_get_obj_callback(*(int **)(a1 + 1184), a2, (void **)&v147, 0, *(_QWORD *)(a1 + 2368), 0))
  {
    if (dword_1EF19FC9C >= 5)
    {
      v112 = *__error();
      v113 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = a2;
        _os_log_impl(&dword_1B8270000, v113, OS_LOG_TYPE_DEFAULT, "si_delete_attributes_inner oid: %lld", buf, 0xCu);
      }
      *__error() = v112;
    }
    v24 = (uint64_t)v147;
    v25 = si_indexForDocId(a1, v147[4]);
    if (a7 && isSyndicatedContent(a1, v24))
      *a7 = 1;
    v135 = v18;
    v136 = v12;
    v129 = v10;
    v126 = v25;
    if (!v10)
    {
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v37 = 0;
LABEL_57:
      v52 = v37;
      v53 = v36;
      v54 = v35;
      if (v126 && _CIGetOIDForDocId(v126, v147[4], 1) == a2)
      {
        _CIDelete(v126, v147[4], a2, 0);
      }
      else if (a6)
      {
        pthread_rwlock_wrlock((pthread_rwlock_t *)(a6 + 16));
        SIValueSet<unsigned long long>::SIValueSetInsert((unint64_t *)(a6 + 216), a2);
        pthread_rwlock_unlock((pthread_rwlock_t *)(a6 + 16));
      }
      v55 = *(int **)(a1 + 1184);
      if (*v55 != 1685287992)
      {
        v114 = *__error();
        v115 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
        {
          v116 = *v55;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "db_delete_obj_with_flags";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 331;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v116;
          _os_log_error_impl(&dword_1B8270000, v115, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
        }
        *__error() = v114;
        v117 = __si_assert_copy_extra_268();
        v118 = v117;
        if (v117)
          v119 = v117;
        else
          v119 = "";
        __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 331, v119);
        free(v118);
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      v56 = db2_delete_obj_with_flags(*(_QWORD *)(a1 + 1184), (uint64_t)v147, a4);
      if (!v56)
        si_set_obj_state((os_unfair_lock_s *)a1, *(_QWORD *)(a1 + 1184));
      if (!v33)
      {
        v61 = v56;
        v62 = v54;
        v51 = v52;
        goto LABEL_113;
      }
      v50 = 17;
      v49 = v56;
      v51 = v52;
      v29 = v53;
      v46 = v54;
      v45 = v34;
LABEL_67:
      v125 = v45;
      v57 = v29;
      v124 = v49;
      if (v49)
        v58 = 19;
      else
        v58 = v50;
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2224));
      if (*(unsigned __int8 *)(a1 + 2229) != a3)
      {
        *(_BYTE *)(a1 + 2229) = a3;
        if (a3)
          v59 = 26;
        else
          v59 = 27;
        activityJournalWrite(a1 + 2192, v59, 0, 0);
      }
      if (*(_DWORD *)(a1 + 2208) != HIDWORD(a2))
      {
        *(_DWORD *)(a1 + 2208) = HIDWORD(a2);
        memset(buf, 0, sizeof(buf));
        if (HIDWORD(a2) > 0x7F)
        {
          if (HIDWORD(a2) >> 14)
          {
            if (HIDWORD(a2) >> 21)
            {
              if (HIDWORD(a2) >> 28)
              {
                buf[0] = -16;
                *(_DWORD *)&buf[1] = HIDWORD(a2);
                v60 = 5;
              }
              else
              {
                buf[0] = HIBYTE(a2) | 0xE0;
                buf[1] = BYTE6(a2);
                buf[2] = BYTE5(a2);
                buf[3] = BYTE4(a2);
                v60 = 4;
              }
            }
            else
            {
              buf[0] = BYTE6(a2) | 0xC0;
              buf[1] = BYTE5(a2);
              buf[2] = BYTE4(a2);
              v60 = 3;
            }
          }
          else
          {
            buf[0] = BYTE5(a2) | 0x80;
            buf[1] = BYTE4(a2);
            v60 = 2;
          }
        }
        else
        {
          buf[0] = BYTE4(a2);
          v60 = 1;
        }
        activityJournalWrite(a1 + 2192, 16, buf, v60);
      }
      memset(buf, 0, sizeof(buf));
      if (a2 > 0x7F)
      {
        v64 = v46;
        if (a2 >> 14)
        {
          if (a2 >> 21)
          {
            if (a2 >> 28)
            {
              buf[0] = -16;
              *(_DWORD *)&buf[1] = a2;
              v63 = 5;
            }
            else
            {
              buf[0] = BYTE3(a2) | 0xE0;
              buf[1] = BYTE2(a2);
              buf[2] = BYTE1(a2);
              buf[3] = a2;
              v63 = 4;
            }
          }
          else
          {
            buf[0] = BYTE2(a2) | 0xC0;
            buf[1] = BYTE1(a2);
            buf[2] = a2;
            v63 = 3;
          }
        }
        else
        {
          buf[0] = BYTE1(a2) | 0x80;
          buf[1] = a2;
          v63 = 2;
        }
      }
      else
      {
        buf[0] = a2;
        v63 = 1;
        v64 = v46;
      }
      activityJournalWrite(a1 + 2192, v58, buf, v63);
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2224));
      if (v57 && !strcmp(v51, "com.apple.mobilemail") && objectHasContent(*(int **)(a1 + 1184), (uint64_t)v147))
        si_enqueue_text_store_doc_for_deletion(a1, a2);
      v34 = v45;
      if (_os_feature_enabled_impl())
      {
        if ((v128 & 0x1000) == 0)
        {
          if (v45)
          {
            if (v64)
            {
              v65 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B378]);
              if (Mutable)
              {
                v67 = v65;
                v68 = Mutable;
                v69 = CFDictionaryCreateMutable(v67, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                if (v69)
                {
                  v70 = v69;
                  CFDictionarySetValue(v69, CFSTR("_kMDItemBundleID"), v125);
                  CFDictionarySetValue(v70, CFSTR("_kMDItemExternalID"), v64);
                  CFArrayAppendValue(v68, v70);
                  si_delete_journal_add_cs_deleted(a1, (const __CFDictionary *)v125, v68);
                  CFRelease(v70);
                }
                CFRelease(v68);
              }
            }
          }
        }
      }
      v61 = v124;
      v53 = v57;
      v62 = v64;
      v33 = v129;
LABEL_113:
      v71 = v34;
      if (v61)
      {
        v72 = v61;
        v73 = *__error();
        v74 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "_si_delete_attributes_inner";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3023;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v72;
          _os_log_error_impl(&dword_1B8270000, v74, OS_LOG_TYPE_ERROR, "%s:%d: Deleting item failed with error %d", buf, 0x18u);
        }
        *__error() = v73;
LABEL_117:
        v75 = v71;
        v12 = v136;
LABEL_118:
        free(v147);
        si_perform_livequeries_deletions(a1);
        v18 = v135;
        if (v33)
        {
          si_remove_icon_cache_for_oid(a1, a2);
          if (v75)
            CFRelease(v75);
          if (v62)
            CFRelease(v62);
        }
        else
        {
          v79 = *(_QWORD *)(a1 + 1416);
          if (v79)
          {
            v80 = *(void (**)(void))(v79 + 104);
            if (v80)
            {
              if (!*(_BYTE *)(v79 + 240))
                v80();
            }
          }
        }
        goto LABEL_132;
      }
      v76 = v53;
      *(_QWORD *)buf = 0;
      v148 = 0;
      v149 = *(unsigned int *)(a1 + 2008);
      if (!db_get_field_by_id(*(int **)(a1 + 1184), (uint64_t)v147, (int *)&v149, (unint64_t *)buf, (unint64_t *)&v148))
      {
        if (!v33 && *v148 > 0x15u)
        {
LABEL_143:
          v88 = *(int **)(a1 + 1184);
          v89 = v147;
          if ((db_corespotlight_store((uint64_t)v88) & 1) == 0)
          {
            v12 = v136;
            if ((v89[40] & 0x20) == 0
              && objectHasContent(v88, (uint64_t)v89)
              && db_get_field(v88, (uint64_t)v89, "_kMDItemTextEncodingHint", 0, 0) == 2)
            {
              si_remove_text_content_cache_for_oid(a1, a2);
            }
            v75 = v71;
            goto LABEL_118;
          }
          goto LABEL_117;
        }
        bytes = 0;
        LODWORD(v149) = *(_DWORD *)(a1 + 2012);
        field_by_id = db_get_field_by_id(*(int **)(a1 + 1184), (uint64_t)v147, (int *)&v149, (unint64_t *)buf, (unint64_t *)&bytes);
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 6976));
        if (field_by_id)
        {
          v78 = v148;
        }
        else
        {
          v85 = v148;
          *(_QWORD *)(a1 + 8 * *v148 + 7040) -= *(_QWORD *)bytes;
          v78 = v85;
        }
        --*(_DWORD *)(a1 + 4 * *v78 + 9088);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 6976));
      }
      if (v33 && v53)
      {
        bytes = 0;
        v127 = v62;
        if (!db_get_field(*(int **)(a1 + 1184), (uint64_t)v147, "_kMDItemRelatedObjects", (unint64_t *)buf, &bytes))
        {
          v137 = 0;
          if ((*(_WORD *)(*(_QWORD *)buf + 2) & 0x20) != 0)
          {
            v99 = *(_QWORD *)buf + *(unsigned int *)(*(_QWORD *)buf + 8);
            v100 = bytes;
            if ((unint64_t)bytes < v99 + 13)
            {
              v101 = v99 + 13;
              alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
              v102 = v71;
              do
              {
                v71 = v102;
                v103 = strlen((const char *)v100);
                v104 = v103 + 1;
                if (!_si_get_object_for_identifier_createParentDBO(a1, (int)v103 + 1, (char *)v100, v76, (uint64_t)v51, 0, 0, 0, &v137, 0, 0))
                {
                  _si_delete_attributes_inner(a1, v137, a3, a4, a5, a6, a7);
                  v105 = v71;
                  if (!v71)
                    v105 = CFStringCreateWithBytes(alloc, (const UInt8 *)v51, v76 - 1, 0x8000100u, 0);
                  v106 = CFStringCreateWithBytes(alloc, bytes, v103, 0x8000100u, 0);
                  if (v106)
                  {
                    v107 = v106;
                    if (v105)
                    {
                      v108 = *(_QWORD *)(a1 + 2360);
                      v109 = *(void (**)(_QWORD, _QWORD, CFStringRef, CFStringRef, _QWORD))(v108 + 112);
                      if (v109)
                      {
                        if (*(_BYTE *)(a1 + 2072))
                          v109(*(_QWORD *)(v108 + 136), 0, v105, v106, 0);
                      }
                    }
                    CFRelease(v107);
                  }
                  v71 = v105;
                }
                v102 = v71;
                bytes += v104;
                v100 = bytes;
              }
              while ((unint64_t)bytes < v101);
            }
          }
          else if (!_si_get_object_for_identifier_createParentDBO(a1, *(_DWORD *)(*(_QWORD *)buf + 8), (char *)bytes, v53, (uint64_t)v51, 0, 0, 0, &v137, 0, 0))
          {
            _si_delete_attributes_inner(a1, v137, a3, a4, a5, a6, a7);
            v90 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
            v91 = v71;
            if (!v71)
              v91 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v51, v53 - 1, 0x8000100u, 0);
            v92 = CFStringCreateWithBytes(v90, bytes, *(unsigned int *)(*(_QWORD *)buf + 8), 0x8000100u, 0);
            if (v92)
            {
              v93 = v92;
              if (v91)
              {
                v94 = *(_QWORD *)(a1 + 2360);
                v95 = *(void (**)(_QWORD, _QWORD, CFStringRef, CFStringRef, _QWORD))(v94 + 112);
                if (v95)
                {
                  if (*(_BYTE *)(a1 + 2072))
                    v95(*(_QWORD *)(v94 + 136), 0, v91, v92, 0);
                }
              }
              CFRelease(v93);
            }
            v71 = v91;
          }
        }
        v12 = v136;
        if (!db_get_field(*(int **)(a1 + 1184), (uint64_t)v147, "_kMDItemRelatedObjectsWithBundle", (unint64_t *)buf, &bytes))
        {
          v86 = (char *)(*(_QWORD *)buf + 13);
          v87 = *(unsigned int *)(*(_QWORD *)buf + 8);
          if ((*(_WORD *)(*(_QWORD *)buf + 2) & 0x20) != 0)
          {
            v96 = (unint64_t)&v86[v87];
            for (i = bytes; (unint64_t)bytes < v96; i = bytes)
            {
              v98 = strlen((const char *)i) + 1;
              cleanupRelatedItemWithBundle((char *)i, v98, a3, a5, a1, a6);
              bytes += v98;
            }
          }
          else
          {
            cleanupRelatedItemWithBundle(v86, *(unsigned int *)(*(_QWORD *)buf + 8), a3, a5, a1, a6);
          }
        }
        v75 = v71;
        v33 = v129;
        v62 = v127;
        goto LABEL_118;
      }
      goto LABEL_143;
    }
    v149 = 0;
    bytes = 0;
    if (db_get_field(*(int **)(a1 + 1184), (uint64_t)v147, "_kMDItemBundleID", &v149, &bytes))
    {
      v26 = 0;
      v27 = 17;
      v28 = 1;
      v29 = 0;
      LODWORD(string_for_id) = 0;
      v31 = 0;
      v32 = 0;
      goto LABEL_37;
    }
    if ((*(_WORD *)(v149 + 2) & 0x10) != 0)
    {
      string_for_id = (const char *)db_get_string_for_id(*(int **)(a1 + 1184), *(_DWORD *)(v149 + 13));
      if (!string_for_id)
      {
        v26 = 0;
        v29 = 0;
        v39 = 17;
        v28 = 1;
        v31 = 0;
        goto LABEL_35;
      }
      v31 = string_for_id;
      v29 = strlen(string_for_id) + 1;
    }
    else
    {
      v31 = (const char *)(v149 + 13);
      v29 = *(unsigned int *)(v149 + 8);
    }
    if (v29)
    {
      if (!strcmp(v31, "com.apple.MobileSMS"))
        goto LABEL_32;
      v38 = *(int **)(a1 + 1184);
      *(_QWORD *)buf = 0;
      v148 = 0;
      if (db_get_field(v38, (uint64_t)v147, "_kMDItemEligibleForPhotosProcessing", (unint64_t *)&v148, buf)|| !**(_BYTE **)buf)
      {
        v32 = 0;
        v39 = 17;
        v26 = 1;
        v28 = 1;
        LODWORD(string_for_id) = 0;
LABEL_36:
        v27 = v39;
        goto LABEL_37;
      }
      if (!strcmp(v31, "com.apple.mobilenotes"))
      {
LABEL_32:
        v40 = 0;
      }
      else
      {
        v40 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v31, v29 - 1, 0x8000100u, 0);
        if (!v40)
        {
          v32 = 0;
          v27 = 17;
          LODWORD(string_for_id) = 0;
          v26 = 1;
          v28 = 1;
LABEL_37:
          v41 = 0;
          v122 = v27;
          v123 = v28;
          v121 = (int)string_for_id;
          *(_QWORD *)buf = 0;
          v148 = 0;
          if (db_get_field(*(int **)(a1 + 1184), (uint64_t)v147, "_kMDItemExternalID", (unint64_t *)buf, &v148))
          {
            v42 = 0;
          }
          else if ((*(_WORD *)(*(_QWORD *)buf + 2) & 0x10) != 0)
          {
            v43 = (const char *)db_get_string_for_id(*(int **)(a1 + 1184), *(_DWORD *)(*(_QWORD *)buf + 13));
            if (v43)
            {
              v42 = (const UInt8 *)v43;
              v41 = strlen(v43) + 1;
            }
            else
            {
              v42 = 0;
              v41 = 0;
            }
          }
          else
          {
            v42 = (const UInt8 *)(*(_QWORD *)buf + 13);
            v41 = *(unsigned int *)(*(_QWORD *)buf + 8);
          }
          v44 = v26 ^ 1;
          if (v32)
            v44 = 1;
          v45 = v32;
          if ((v44 & 1) == 0)
            v45 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v31, v29 - 1, 0x8000100u, 0);
          if (v41)
            v46 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v42, v41 - 1, 0x8000100u, 0);
          else
            v46 = 0;
          v33 = v10;
          if (_os_feature_enabled_impl()
            && *(_BYTE *)(a1 + 2072)
            && v45
            && SpotlightCacheBundleID())
          {
            v47 = (CFDictionaryRef *)malloc_type_calloc(1uLL, 0x18uLL, 0x60040149E097CuLL);
            v48 = (const __CFDictionary *)v147;
            *v47 = (CFDictionaryRef)a1;
            v47[1] = v48;
            si_deleteCacheEntry(v47, 0);
          }
          v34 = v45;
          v35 = v46;
          v36 = v29;
          v37 = v31;
          v49 = v121;
          v50 = v122;
          v51 = v31;
          if (!v123)
            goto LABEL_67;
          goto LABEL_57;
        }
      }
      v32 = v40;
      LODWORD(string_for_id) = si_zombifyItem(a1);
      v39 = 54;
      v26 = 1;
      v28 = 0;
      goto LABEL_36;
    }
    v26 = 0;
    v39 = 17;
    v28 = 1;
    LODWORD(string_for_id) = 0;
LABEL_35:
    v32 = 0;
    goto LABEL_36;
  }
  if (a6)
  {
    pthread_rwlock_wrlock((pthread_rwlock_t *)(a6 + 16));
    SIValueSet<unsigned long long>::SIValueSetInsert((unint64_t *)(a6 + 216), a2);
    pthread_rwlock_unlock((pthread_rwlock_t *)(a6 + 16));
  }
  v23 = v10;
  if (gSILogLevels[0] >= 5)
  {
    v110 = *__error();
    v111 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = a2;
      _os_log_impl(&dword_1B8270000, v111, OS_LOG_TYPE_DEFAULT, "couldn't get dbo for oid: %lld", buf, 0xCu);
    }
    *__error() = v110;
    if (!v23)
      goto LABEL_132;
    goto LABEL_14;
  }
  if (v10)
LABEL_14:
    si_remove_icon_cache_for_oid(a1, a2);
LABEL_132:
  v81 = *(_QWORD *)&threadData[18 * v142 + 2];
  v82 = v141;
  v83 = v81 + 320 * v141;
  *(_DWORD *)(v83 + 312) = v18;
  v84 = *(void (**)(_QWORD))(v83 + 232);
  if (v84)
    v84(*(_QWORD *)(v81 + 320 * v82 + 288));
  return dropThreadId(v142, 0, v12);
}

uint64_t db_get_field(int *a1, uint64_t a2, char *__s, unint64_t *a4, _QWORD *a5)
{
  int *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v18;
  NSObject *v19;
  int v20;
  char *v21;
  char *v22;
  const char *v23;
  _BYTE buf[18];
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v18 = *__error();
    v19 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      v20 = *a1;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "db_get_field";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 368;
      v25 = 1024;
      v26 = v20;
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v18;
    v21 = __si_assert_copy_extra_268();
    v22 = v21;
    if (v21)
      v23 = v21;
    else
      v23 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 368, v23);
    free(v22);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v8 = (int *)internal_copy_field_ids((uint64_t)a1, __s, (uint64_t)buf, 4uLL, 0);
  if (!v8)
    return 2;
  v9 = *(unsigned int *)(a2 + 12);
  if (v9 >= 0x31 && *v8)
  {
    v10 = a2 + v9;
    v11 = a2 + 48;
    while (2)
    {
      v12 = 1;
      v13 = *v8;
      do
      {
        if (*(_DWORD *)(v11 + 4) == v13)
        {
          if (a4)
            *a4 = v11;
          if (a5)
            *a5 = v11 + 13;
          v14 = 0;
          v15 = 0;
          goto LABEL_21;
        }
        v13 = v8[v12++];
      }
      while (v13);
      v11 += *(unsigned int *)(v11 + 8) + 13;
      if (v11 < v10)
        continue;
      break;
    }
  }
  if (a4)
    *a4 = 0;
  if (a5)
    *a5 = 0;
  v14 = 2;
  v15 = 2;
LABEL_21:
  if (buf != (_BYTE *)v8)
  {
    free(v8);
    return v14;
  }
  return v15;
}

void *internal_copy_field_ids(uint64_t a1, char *__s, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v9;
  size_t v10;
  size_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  _OWORD *v35;
  unint64_t v36;
  const char *v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int locked_with_hash;
  unsigned int v49;
  _BOOL4 v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  unsigned int v61;
  unsigned int v62;
  _DWORD **v63;
  _DWORD *v64;
  unint64_t v65;
  _DWORD *v66;
  char *v68;
  char *v69;
  const char *v70;
  char v72;
  void *v73;
  char *__s1;
  unsigned int v75;
  _OWORD __src[4];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
  {
    v9 = *(_QWORD *)(a1 + 880);
    v10 = strlen(__s);
    v11 = v10 + 1;
    if (a5)
    {
      if (*(_BYTE *)(v9 + 436))
        v12 = LegacyHash((unsigned __int16 *)__s, v11);
      else
        v12 = commonHash((int)v10 + 1, (uint64_t)__s);
      locked_with_hash = data_map32_ids_get_locked_with_hash(a3, v9, v12, a4, __s, v11);
      v49 = locked_with_hash;
      v50 = locked_with_hash != 0;
      if (locked_with_hash)
      {
        v51 = locked_with_hash + 1;
        if (v51 > a4)
        {
          LODWORD(v52) = locked_with_hash + 1;
          v53 = (void *)a3;
          do
          {
            if (v53 == (void *)a3)
              v54 = malloc_type_malloc(4 * v51, 0x100004052888210uLL);
            else
              v54 = malloc_type_realloc(v53, 4 * v51, 0x100004052888210uLL);
            v53 = v54;
            if (*(_BYTE *)(v9 + 436))
              v55 = LegacyHash((unsigned __int16 *)__s, v11);
            else
              v55 = commonHash(v11, (uint64_t)__s);
            v56 = data_map32_ids_get_locked_with_hash((uint64_t)v53, v9, v55, v52, __s, v11);
            v49 = v56;
            v50 = v56 != 0;
            if (!v56)
              break;
            v52 = v56 + 1;
            v26 = v51 >= v52;
            v51 = v52;
          }
          while (!v26);
LABEL_95:
          if (v50)
            goto LABEL_96;
          return 0;
        }
      }
    }
    else
    {
      if (*(_BYTE *)(v9 + 436))
        v20 = LegacyHash((unsigned __int16 *)__s, v11);
      else
        v20 = commonHash((int)v10 + 1, (uint64_t)__s);
      v57 = v20;
      if (_data_map32_rdlock(v9))
        return 0;
      v49 = data_map32_ids_get_locked_with_hash(a3, v9, v57, a4, __s, v11);
      _data_map32_unlock(v9);
      v50 = v49 != 0;
      if (!v49)
      {
        v53 = (void *)a3;
        goto LABEL_95;
      }
      v58 = v49 + 1;
      if (v58 > a4)
      {
        LODWORD(v59) = v49 + 1;
        v53 = (void *)a3;
        while (1)
        {
          v60 = v53 == (void *)a3
              ? malloc_type_malloc(4 * v58, 0x100004052888210uLL)
              : malloc_type_realloc(v53, 4 * v58, 0x100004052888210uLL);
          v53 = v60;
          v61 = *(_BYTE *)(v9 + 436) ? LegacyHash((unsigned __int16 *)__s, v11) : commonHash(v11, (uint64_t)__s);
          v62 = v61;
          if (_data_map32_rdlock(v9))
            return 0;
          v49 = data_map32_ids_get_locked_with_hash((uint64_t)v53, v9, v62, v59, __s, v11);
          _data_map32_unlock(v9);
          v50 = v49 != 0;
          if (v49)
          {
            v59 = v49 + 1;
            v26 = v58 >= v59;
            v58 = v59;
            if (!v26)
              continue;
          }
          goto LABEL_95;
        }
      }
    }
    v53 = (void *)a3;
    if (v50)
    {
LABEL_96:
      *((_DWORD *)v53 + v49) = 0;
      return v53;
    }
    return 0;
  }
  v13 = -1759636613;
  memset(__src, 0, sizeof(__src));
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 880) + 16);
  v15 = strlen(__s);
  if (v15 >= 0)
    v16 = v15;
  else
    v16 = v15 + 3;
  v17 = &__s[v16 & 0xFFFFFFFC];
  if ((v15 + 3) >= 7)
  {
    v21 = -(v16 >> 2);
    v22 = -1789642873;
    v23 = 718793509;
    do
    {
      v22 = 5 * v22 + 2071795100;
      v23 = 5 * v23 + 1808688022;
      HIDWORD(v24) = v22 * *(_DWORD *)&v17[4 * v21];
      LODWORD(v24) = HIDWORD(v24);
      v25 = (v24 >> 21) * v23;
      HIDWORD(v24) = v13;
      LODWORD(v24) = v13;
      v13 = v25 ^ (5 * (v24 >> 19) + 1390208809);
      v26 = __CFADD__(v21++, 1);
    }
    while (!v26);
    v19 = 5 * v22 + 2071795100;
    v18 = 5 * v23 + 1808688022;
  }
  else
  {
    v18 = 1107688271;
    v19 = 1713515327;
  }
  v27 = 0;
  v28 = v15 & 3;
  switch(v28)
  {
    case 1:
      goto LABEL_21;
    case 2:
LABEL_20:
      v27 |= v17[1] << 8;
LABEL_21:
      HIDWORD(v29) = (v27 ^ *v17) * v19;
      LODWORD(v29) = HIDWORD(v29);
      v30 = (v29 >> 21) * v18;
      HIDWORD(v29) = v13;
      LODWORD(v29) = v13;
      v13 = v30 ^ (5 * (v29 >> 19) + 1390208809);
      break;
    case 3:
      v27 = v17[2] << 16;
      goto LABEL_20;
  }
  v73 = (void *)a3;
  v31 = -1028477387 * ((-2048144789 * (v13 ^ v15)) ^ ((-2048144789 * (v13 ^ v15)) >> 13));
  v32 = v31 ^ HIWORD(v31);
  if ((a5 & 1) == 0)
    pthread_rwlock_rdlock((pthread_rwlock_t *)v14);
  v33 = v14 + 208 + 16 * (v32 & 0x7F);
  v34 = *(_DWORD *)(v33 + 8);
  v72 = a5;
  if ((v34 & 0x80000000) == 0)
  {
    v35 = 0;
    v36 = 0;
    goto LABEL_84;
  }
  v75 = v32 & 0x7FFFFFFF;
  __s1 = __s;
  if ((v34 & 0x7FFFFFFF) == (v32 & 0x7FFFFFFF) && (v37 = *(const char **)v33, !strcmp(__s, *(const char **)v33)))
  {
    *(_QWORD *)&__src[0] = &v37[-*(_QWORD *)(v14 + 200) - 4];
    v35 = __src;
    v39 = 8;
    v38 = 1;
  }
  else
  {
    v35 = 0;
    v38 = 0;
    v39 = 0;
  }
  v40 = *(_DWORD *)(v14 + 2272);
  v41 = v75 % v40;
  v42 = v75 % v40;
  do
  {
    v44 = *(_QWORD *)(v14 + 2264);
    v45 = v44 + 16 * v42;
    if ((*(_DWORD *)(v45 + 8) & 0x80000000) != 0)
    {
      v46 = v14;
      v47 = v42;
      while ((*(_DWORD *)(v45 + 8) & 0x7FFFFFFF) != v75 || strcmp(__s1, *(const char **)v45))
      {
        if (v47 + 1 < v40)
          ++v47;
        else
          v47 = v47 + 1 - v40;
        if (v47 != v42)
        {
          v45 = v44 + 16 * v47;
          if ((*(_DWORD *)(v45 + 8) & 0x80000000) != 0)
            continue;
        }
        v36 = v38;
        v26 = v47 >= v40;
        v14 = v46;
        if (!v26)
          goto LABEL_84;
LABEL_102:
        v68 = __si_assert_copy_extra_268();
        v69 = v68;
        v70 = "";
        if (v68)
          v70 = v68;
        __message_assert(v68, "db-common.c", 248, "slot < table->size", v70);
        free(v69);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v42 = v47;
      v14 = v46;
    }
    if (v42 >= v40)
      goto LABEL_102;
    if ((*(_DWORD *)(v45 + 8) & 0x80000000) == 0)
    {
      v36 = v38;
      break;
    }
    if (v39 <= v38)
    {
      if (v39)
        v39 *= 2;
      else
        v39 = 1;
      if (v35 == __src)
      {
        v35 = malloc_type_malloc(8 * v39, 0x80040B8603338uLL);
        memcpy(v35, __src, 8 * v38);
      }
      else
      {
        v35 = malloc_type_realloc(v35, 8 * v39, 0x80040B8603338uLL);
      }
    }
    v43 = *(_QWORD *)v45 - *(_QWORD *)(v14 + 200) - 4;
    v36 = v38 + 1;
    *((_QWORD *)v35 + v38) = v43;
    v40 = *(_DWORD *)(v14 + 2272);
    v42 = (v42 + 1) % v40;
    ++v38;
  }
  while (v41 != v42);
LABEL_84:
  if ((v72 & 1) == 0)
    pthread_rwlock_unlock((pthread_rwlock_t *)v14);
  v53 = v73;
  if (!v35)
    return 0;
  if (v36 + 1 > a4)
    v53 = malloc_type_malloc(4 * (v36 + 1), 0x100004052888210uLL);
  if (v36)
  {
    v63 = (_DWORD **)v35;
    v64 = v53;
    v65 = v36;
    do
    {
      v66 = *v63++;
      *v64++ = *v66;
      --v65;
    }
    while (v65);
  }
  *((_DWORD *)v53 + v36) = 0;
  if (v35 != __src)
    free(v35);
  return v53;
}

uint64_t db_get_field_by_id(int *a1, uint64_t a2, int *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int *v8;
  int v9;
  int v10;
  uint64_t result;
  unint64_t v12;
  int v14;
  NSObject *v15;
  int v16;
  char *v17;
  char *v18;
  const char *v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v14 = *__error();
    v15 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = *a1;
      *(_DWORD *)buf = 136315650;
      v21 = "db_get_field_by_id";
      v22 = 1024;
      v23 = 371;
      v24 = 1024;
      v25 = v16;
      _os_log_error_impl(&dword_1B8270000, v15, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v14;
    v17 = __si_assert_copy_extra_268();
    v18 = v17;
    if (v17)
      v19 = v17;
    else
      v19 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 371, v19);
    free(v18);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if (!a3)
    return 2;
  v5 = *(unsigned int *)(a2 + 12);
  if (v5 >= 0x31 && *a3)
  {
    v6 = a2 + v5;
    v7 = a2 + 48;
LABEL_6:
    v8 = a3 + 1;
    v9 = *a3;
    while (*(_DWORD *)(v7 + 4) != v9)
    {
      v10 = *v8++;
      v9 = v10;
      if (!v10)
      {
        v7 += *(unsigned int *)(v7 + 8) + 13;
        if (v7 < v6)
          goto LABEL_6;
        goto LABEL_10;
      }
    }
    if (a4)
      *a4 = v7;
    result = 0;
    if (a5)
    {
      v12 = v7 + 13;
      goto LABEL_19;
    }
  }
  else
  {
LABEL_10:
    if (a4)
      *a4 = 0;
    result = 2;
    if (a5)
    {
      v12 = 0;
LABEL_19:
      *a5 = v12;
    }
  }
  return result;
}

void si_delete_journal_add_cs_deleted(uint64_t a1, const __CFDictionary *a2, CFArrayRef theArray)
{
  CFIndex Count;
  int v7;
  uint64_t v8;
  size_t v9;
  int v10;
  CFTypeID TypeID;
  CFTypeID v12;
  CFTypeID v13;
  CFIndex v14;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v16;
  const void *Value;
  CFTypeID v18;
  const void *Mutable;
  pthread_mutex_t *v20;
  uint64_t v21;
  _DWORD *v22;
  unsigned int *v23;
  unsigned int v24;
  unint64_t *v25;
  unint64_t v26;
  BOOL v27;
  int v28;
  NSObject *v29;
  int v30;
  NSObject *v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char __s[4];
  const char *v41;
  __int16 v42;
  int v43;
  __int16 v44;
  const __CFDictionary *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  CFArrayRef v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(theArray);
  v7 = *(_DWORD *)(a1 + 32);
  if (v7 == -1)
  {
    v34 = __si_assert_copy_extra_521(-1);
    v35 = v34;
    v36 = "";
    if (v34)
      v36 = v34;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 3638, "indexFd != -1", v36);
    free(v35);
    if (__valid_fs(-1))
      v37 = 2989;
    else
      v37 = 3072;
    *(_DWORD *)v37 = -559038737;
    abort();
  }
  v8 = Count;
  bzero(__s, 0x400uLL);
  if (fcntl(v7, 50, __s) < 0
    || !__s[0]
    || (v9 = strlen(__s), snprintf(&__s[v9], 1024 - v9, "/%s", "skg_"), v10 = open(__s, 0), v10 < 0))
  {
    if (v8)
    {
      TypeID = CFDictionaryGetTypeID();
      v12 = CFStringGetTypeID();
      if (v8 < 1)
      {
LABEL_14:
        v18 = CFStringGetTypeID();
        if (v18 == CFGetTypeID(a2))
        {
          Mutable = (const void *)_MDPlistContainerCreateMutable();
          _MDPlistContainerBeginContainer();
          _MDPlistContainerBeginArray();
          _MDPlistContainerAddObject();
          _MDPlistContainerAddObject();
          _MDPlistContainerEndArray();
          _MDPlistContainerEndContainer();
          v20 = (pthread_mutex_t *)(a1 + 1632);
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 1632));
          v21 = getDeleteJournalFd(a1);
          if (v21)
          {
            v22 = (_DWORD *)v21;
            v23 = *(unsigned int **)(a1 + 2120);
            if (v23 || (v23 = (unsigned int *)si_mobile_journal_create(a1), (*(_QWORD *)(a1 + 2120) = v23) != 0))
            {
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 + 1, v23));
            }
            v25 = (unint64_t *)(a1 + 2144);
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
            v38 = 0;
            v39 = 0;
            v27 = mobile_journal_plist(v22, v26, 0x8000, (uint64_t)Mutable, &v39, &v38) == 0;
          }
          else
          {
            v23 = 0;
            v27 = 0;
          }
          pthread_mutex_unlock(v20);
          CFRelease(Mutable);
          if (!v27 && v23)
          {
            do
            {
              v32 = __ldaxr(v23);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v23));
            if (!v33)
              _si_mobile_journal_finalize((uint64_t)v23, 1);
          }
        }
        else
        {
          v30 = *__error();
          v31 = _SILogForLogForCategory(10);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__s = 136316162;
            v41 = "mobile_delete_journal";
            v42 = 1024;
            v43 = 18456;
            v44 = 2048;
            v45 = a2;
            v46 = 1024;
            v47 = 0x8000;
            v48 = 2112;
            v49 = theArray;
            _os_log_error_impl(&dword_1B8270000, v31, OS_LOG_TYPE_ERROR, "%s:%d: missing bundle %p 0x%x %@", (uint8_t *)__s, 0x2Cu);
          }
          *__error() = v30;
        }
      }
      else
      {
        v13 = v12;
        v14 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v14);
          v16 = ValueAtIndex;
          if (!ValueAtIndex)
            break;
          if (CFGetTypeID(ValueAtIndex) != TypeID)
            break;
          Value = CFDictionaryGetValue(v16, CFSTR("_kMDItemExternalID"));
          if (!Value || CFGetTypeID(Value) != v13)
            break;
          if (v8 == ++v14)
            goto LABEL_14;
        }
        v28 = *__error();
        v29 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__s = 136315650;
          v41 = "si_delete_journal_add_cs_deleted";
          v42 = 1024;
          v43 = 18856;
          v44 = 2112;
          v45 = v16;
          _os_log_error_impl(&dword_1B8270000, v29, OS_LOG_TYPE_ERROR, "%s:%d: bad object %@", (uint8_t *)__s, 0x1Cu);
        }
        *__error() = v28;
      }
    }
  }
  else
  {
    close(v10);
  }
}

uint64_t getDeleteJournalFd(uint64_t a1)
{
  uint64_t result;
  int v3;
  int v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  const char *v8;
  uint64_t v9;
  char *v10;
  const char *v11;
  char __str[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[31];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  result = *(_QWORD *)(a1 + 2336);
  if (result)
    return result;
  v3 = *(_DWORD *)(a1 + 32);
  if (v3 == -1)
  {
    v10 = __si_assert_copy_extra_521(-1);
    v7 = v10;
    v11 = "";
    if (v10)
      v11 = v10;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 3671, "indexFd != -1", v11);
LABEL_10:
    free(v7);
    if (__valid_fs(-1))
      v9 = 2989;
    else
      v9 = 3072;
    *(_DWORD *)v9 = -559038737;
    abort();
  }
  v4 = *(_DWORD *)(a1 + 2352);
  if (v4 == 0x7FFFFFFF)
  {
LABEL_7:
    v6 = __si_assert_copy_extra_521(-1);
    v7 = v6;
    v8 = "";
    if (v6)
      v8 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 3676, "syncCount < 2147483647", v8);
    goto LABEL_10;
  }
  while (1)
  {
    v25 = 0u;
    memset(v26, 0, sizeof(v26));
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    *(_OWORD *)__str = 0u;
    snprintf(__str, 0xFFuLL, "%s%d", "skg_deleteAttr.", v4);
    v5 = fd_create_protected(v3, __str, 536873482, 3u);
    if (v5)
    {
      ++*(_DWORD *)(a1 + 2352);
      *(_QWORD *)(a1 + 2336) = v5;
      SIActivityJournalNewJournal((os_unfair_lock_s *)(a1 + 2192), (uint64_t)v5);
      _fd_acquire_fd(*(_QWORD *)(a1 + 2336), __str);
      return *(_QWORD *)(a1 + 2336);
    }
    if (*__error() != 17)
      return 0;
    v4 = *(_DWORD *)(a1 + 2352) + 1;
    *(_DWORD *)(a1 + 2352) = v4;
    if (v4 == 0x7FFFFFFF)
      goto LABEL_7;
  }
}

uint64_t db_get_obj_callback(int *a1, unint64_t a2, void **a3, int a4, uint64_t a5, _DWORD *a6)
{
  int v8;
  NSObject *v9;
  int v10;
  char *v11;
  char *v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = *a1;
      *(_DWORD *)buf = 136315650;
      v15 = "db_get_obj_callback";
      v16 = 1024;
      v17 = 316;
      v18 = 1024;
      v19 = v10;
      _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v8;
    v11 = __si_assert_copy_extra_268();
    v12 = v11;
    if (v11)
      v13 = v11;
    else
      v13 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 316, v13);
    free(v12);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return db2_get_obj_callback((uint64_t)a1, a2, a3, a4, (void (*)(void *, uint64_t))si_docIdRewriteCallback, a5, a6);
}

uint64_t si_indexForDocId(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 1384);
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)v2 - 8;
    while (1)
    {
      v5 = *(_QWORD *)(v4 + 8 * v3);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 72);
        if (v6 < a2 && v6 + *(unsigned int *)(v5 + 60) > a2)
          break;
      }
      if (v3-- <= 1)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v7 = *(_QWORD *)(a1 + 1392);
    v8 = *(unsigned int *)(v7 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)v7 - 8;
      while (1)
      {
        v5 = *(_QWORD *)(v9 + 8 * v8);
        if (v5)
        {
          v10 = *(_QWORD *)(v5 + 72);
          if (v10 < a2 && v10 + *(unsigned int *)(v5 + 60) > a2)
            break;
        }
        if (v8-- <= 1)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t isSyndicatedContent(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;

  v7 = 0;
  v8 = 0;
  v6 = 0;
  if (db_get_field(*(int **)(a1 + 1184), a2, "_kMDItemBundleID", &v8, &v7))
    v4 = 1;
  else
    v4 = v7 == 0;
  if (!v4)
  {
    if ((*(_WORD *)(v8 + 2) & 0x10) != 0)
    {
      result = db_get_string_for_id(*(int **)(a1 + 1184), *(_DWORD *)(v8 + 13));
      if (!result)
        return result;
    }
    else
    {
      result = v8 + 13;
    }
    if (!strcmp((const char *)result, "com.apple.MobileSMS"))
    {
      if (!db_get_field(*(int **)(a1 + 1184), a2, "com_apple_mobilesms_isHighlightedContent", &v8, &v6)
        && v6
        && *v6)
      {
        return 1;
      }
      v6 = 0;
      if (!db_get_field(*(int **)(a1 + 1184), a2, "kMDItemSyndicationStatus", &v8, &v6) && v6 && *v6)
        return 1;
      v6 = 0;
      if (!db_get_field(*(int **)(a1 + 1184), a2, "com_apple_mobilesms_isChatAutoDonating", &v8, &v6)
        && v6
        && *v6)
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t db_get_string_for_id(int *a1, int a2)
{
  int v4;
  NSObject *v5;
  int v6;
  char *v7;
  char *v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v4 = *__error();
    v5 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *a1;
      *(_DWORD *)buf = 136315650;
      v11 = "db_get_string_for_id";
      v12 = 1024;
      v13 = 390;
      v14 = 1024;
      v15 = v6;
      _os_log_error_impl(&dword_1B8270000, v5, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v4;
    v7 = __si_assert_copy_extra_268();
    v8 = v7;
    if (v7)
      v9 = v7;
    else
      v9 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 390, v9);
    free(v8);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return get_string_and_length_for_id_10395((uint64_t)a1, 1u, a2, 0, 0);
}

void activityJournalWrite(uint64_t a1, char a2, const void *a3, unsigned int a4)
{
  unsigned int v8;
  uint64_t v9;
  CFAbsoluteTime Current;
  uint64_t v11;
  char *v12;
  const __CFDictionary *v13;
  const __CFDictionary *v14;
  const __CFString *Value;
  size_t v16;
  char v17;
  char v18;
  unsigned int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)a1)
  {
    bzero(&v17, 0x400uLL);
    if (!*(_BYTE *)(a1 + 36))
    {
      *(_BYTE *)(a1 + 36) = 1;
      v17 = 113;
      v8 = getpid();
      if (v8 > 0x7F)
      {
        if (v8 >> 14)
        {
          if (v8 >> 21)
          {
            if (v8 >> 28)
            {
              v18 = -16;
              v19 = v8;
              v9 = 6;
            }
            else
            {
              v18 = HIBYTE(v8) | 0xE0;
              LOBYTE(v19) = BYTE2(v8);
              BYTE1(v19) = BYTE1(v8);
              BYTE2(v19) = v8;
              v9 = 5;
            }
          }
          else
          {
            v18 = BYTE2(v8) | 0xC0;
            LOBYTE(v19) = BYTE1(v8);
            BYTE1(v19) = v8;
            v9 = 4;
          }
        }
        else
        {
          v18 = BYTE1(v8) | 0x80;
          LOBYTE(v19) = v8;
          v9 = 3;
        }
      }
      else
      {
        v18 = v8;
        v9 = 2;
      }
      Current = CFAbsoluteTimeGetCurrent();
      v11 = v2_writeVInt64_7950((uint64_t)&v17, v9, (unint64_t)Current);
      v12 = &v17 + v11;
      *(&v17 + v11) = 0;
      v13 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
      if (v13)
      {
        v14 = v13;
        Value = (const __CFString *)CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E0C9AB90]);
        if (Value && !CFStringGetCString(Value, v12, 1024 - v11, 0x8000100u))
          *v12 = 0;
        CFRelease(v14);
      }
      v16 = strlen(v12);
      fd_write(*(_QWORD *)a1, (uint64_t)&v17, v11 + v16 + 1);
    }
    v17 = (2 * a2) | 1;
    if (a4 <= 0x3FE)
    {
      memcpy(&v18, a3, a4);
      fd_write(*(_QWORD *)a1, (uint64_t)&v17, a4 + 1);
    }
  }
}

uint64_t mobile_journal_plist(_DWORD *a1, unint64_t a2, int a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v11;
  off_t v12;
  unsigned int Length;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t Bytes;
  uint64_t result;
  int v22;
  NSObject *v23;
  os_log_type_t v24;
  _DWORD v25[3];
  uint8_t buf[16];
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v11 = fd_lseek(a1, 0, 2);
  if (v11 == -1)
    goto LABEL_8;
  v12 = v11;
  if (a5)
    *a5 = v11;
  Length = _MDPlistContainerGetLength();
  v14 = Length;
  if (!Length)
  {
LABEL_8:
    v17 = 22;
  }
  else
  {
    v15 = -264306963;
    if (a2)
    {
      if (a2 >= 0x80)
      {
        if (a2 >= 0x4000)
        {
          if (a2 >= 0x200000)
          {
            if (a2 >> 28)
            {
              if (a2 >> 35)
              {
                if (a2 >> 42)
                {
                  if (a2 >> 49)
                  {
                    if (HIBYTE(a2))
                      v16 = 9;
                    else
                      v16 = 8;
                  }
                  else
                  {
                    v16 = 7;
                  }
                }
                else
                {
                  v16 = 6;
                }
              }
              else
              {
                v16 = 5;
              }
            }
            else
            {
              v16 = 4;
            }
          }
          else
          {
            v16 = 3;
          }
        }
        else
        {
          v16 = 2;
        }
      }
      else
      {
        v16 = 1;
      }
    }
    else
    {
      v16 = 0;
      v15 = -264372499;
    }
    v25[2] = a3;
    v18 = v16 + Length;
    v25[0] = v15;
    v25[1] = v16 + Length;
    if (fd_write((uint64_t)a1, (uint64_t)v25, 0xCuLL) != -1)
    {
      if (!a2)
        goto LABEL_45;
      *(_OWORD *)buf = 0u;
      v27 = 0u;
      if (a2 > 0x7F)
      {
        if (a2 >> 14)
        {
          if (a2 >> 21)
          {
            if (a2 >> 28)
            {
              if (a2 >> 35)
              {
                if (a2 >> 42)
                {
                  if (a2 >> 49)
                  {
                    if (HIBYTE(a2))
                    {
                      buf[0] = -1;
                      *(_QWORD *)&buf[1] = a2;
                      v19 = 9;
                    }
                    else
                    {
                      buf[0] = -2;
                      buf[1] = BYTE6(a2);
                      buf[2] = BYTE5(a2);
                      buf[3] = BYTE4(a2);
                      buf[4] = BYTE3(a2);
                      buf[5] = BYTE2(a2);
                      buf[6] = BYTE1(a2);
                      v19 = 8;
                      buf[7] = a2;
                    }
                  }
                  else
                  {
                    buf[0] = BYTE6(a2) | 0xFC;
                    buf[1] = BYTE5(a2);
                    buf[2] = BYTE4(a2);
                    buf[3] = BYTE3(a2);
                    buf[4] = BYTE2(a2);
                    buf[5] = BYTE1(a2);
                    v19 = 7;
                    buf[6] = a2;
                  }
                }
                else
                {
                  buf[0] = BYTE5(a2) | 0xF8;
                  buf[1] = BYTE4(a2);
                  buf[2] = BYTE3(a2);
                  buf[3] = BYTE2(a2);
                  buf[4] = BYTE1(a2);
                  buf[5] = a2;
                  v19 = 6;
                }
              }
              else
              {
                buf[0] = BYTE4(a2) | 0xF0;
                buf[1] = BYTE3(a2);
                buf[2] = BYTE2(a2);
                buf[3] = BYTE1(a2);
                buf[4] = a2;
                v19 = 5;
              }
            }
            else
            {
              buf[0] = BYTE3(a2) | 0xE0;
              buf[1] = BYTE2(a2);
              buf[2] = BYTE1(a2);
              buf[3] = a2;
              v19 = 4;
            }
          }
          else
          {
            buf[0] = BYTE2(a2) | 0xC0;
            buf[1] = BYTE1(a2);
            buf[2] = a2;
            v19 = 3;
          }
        }
        else
        {
          buf[0] = BYTE1(a2) | 0x80;
          buf[1] = a2;
          v19 = 2;
        }
      }
      else
      {
        buf[0] = a2;
        v19 = 1;
      }
      if (fd_write((uint64_t)a1, (uint64_t)buf, v19) != -1)
      {
LABEL_45:
        Bytes = _MDPlistContainerGetBytes();
        if (fd_write((uint64_t)a1, Bytes, v14) != -1)
        {
          result = 0;
          if (a6)
            *a6 = v18 + 12;
          return result;
        }
      }
    }
    v17 = *__error();
    fd_truncate((uint64_t)a1, v12);
  }
  v22 = *__error();
  v23 = _SILogForLogForCategory(4);
  v24 = 2 * (dword_1EF19FC9C < 4);
  if (os_log_type_enabled(v23, v24))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v17;
    _os_log_impl(&dword_1B8270000, v23, v24, "Error writing to log file: %d", buf, 8u);
  }
  *__error() = v22;
  return 0xFFFFFFFFLL;
}

uint64_t fd_write(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  BOOL v12;
  int v13;
  int v14;
  int v15;
  NSObject *v16;
  const char *v18;
  char *v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  char v36[1024];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    *__error() = 2;
    return -1;
  }
  if (*(_QWORD *)(a1 + 96))
  {
    v19 = __si_assert_copy_extra_521(-1);
    v20 = v19;
    v21 = "";
    if (v19)
      v21 = v19;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 681, "!obj->forbidder", v21);
    free(v20);
    if (__valid_fs(-1))
      v22 = 2989;
    else
      v22 = 3072;
    *(_DWORD *)v22 = -559038737;
    abort();
  }
  v23 = 0;
  v6 = _fd_acquire_fd(a1, &v23);
  if ((_DWORD)v6 == -1)
    goto LABEL_14;
  v7 = 0;
  v8 = a3;
  do
  {
    while (1)
    {
      v9 = guarded_write_np();
      if ((v9 & 0x8000000000000000) != 0)
        break;
      v7 += v9;
      v12 = v8 > v9;
      v8 -= v9;
      if (!v12)
        goto LABEL_13;
      a2 += v9;
    }
    v10 = g_prot_error_callback;
    if (!g_prot_error_callback)
      break;
    v11 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v10 + 16))(v10, v6, *v11, 6) & 1) != 0);
  v7 = -1;
LABEL_13:
  v13 = *__error();
  _fd_release_fd((_DWORD *)a1, v6, 0, v23);
  *__error() = v13;
  if (v7 == -1)
  {
LABEL_14:
    bzero(v36, 0x400uLL);
    v14 = *__error();
    v15 = *__error();
    v16 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v18 = fd_realpath((_DWORD *)a1, v36);
      if (!v18)
      {
        v18 = fd_name(a1, v36, 0x400uLL);
        if (!v18)
          v18 = "";
      }
      *(_DWORD *)buf = 136316418;
      v25 = "fd_write";
      v26 = 1024;
      v27 = 696;
      v28 = 1024;
      v29 = v6;
      v30 = 2080;
      v31 = v18;
      v32 = 1024;
      v33 = a3;
      v34 = 1024;
      v35 = v14;
      _os_log_error_impl(&dword_1B8270000, v16, OS_LOG_TYPE_ERROR, "%s:%d: write(%d %s, s:%d) err:%d", buf, 0x2Eu);
    }
    *__error() = v15;
    *__error() = v14;
    return -1;
  }
  return v7;
}

uint64_t _fd_acquire_fd(uint64_t a1, _QWORD *a2)
{
  int v4;
  NSObject *v5;
  int *v6;
  int v7;
  int v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t updated;
  uint64_t v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  int v18;
  __n128 v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  char *v25;
  char *v26;
  const char *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  uint8_t v31[4];
  int v32;
  uint64_t __buf;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(0);
    v10 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v9, v10))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v9, v10, "open error NULL obj", buf, 2u);
    }
    *__error() = v8;
    v6 = __error();
    v7 = 2;
    goto LABEL_10;
  }
  if (*(_DWORD *)a1 != -50529037)
  {
    v25 = __si_assert_copy_extra_521(-1);
    v26 = v25;
    v27 = "";
    if (v25)
      v27 = v25;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1564, "obj->_magic==(0xFCFCFCF3)", v27);
    free(v26);
    if (__valid_fs(-1))
      v28 = 2989;
    else
      v28 = 3072;
    *(_DWORD *)v28 = -559038737;
    abort();
  }
  pthread_mutex_lock(&g_fd_lock);
  if (*(_BYTE *)(a1 + 52))
  {
    pthread_mutex_unlock(&g_fd_lock);
    v4 = *__error();
    v5 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v35 = "_fd_acquire_fd";
      v36 = 1024;
      v37 = 1569;
      _os_log_error_impl(&dword_1B8270000, v5, OS_LOG_TYPE_ERROR, "%s:%d: fd_ptr instance was invalidated", buf, 0x12u);
    }
    *__error() = v4;
    v6 = __error();
    v7 = 22;
LABEL_10:
    *v6 = v7;
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 40) == -1)
  {
    pthread_mutex_unlock(&g_fd_lock);
    bzero(buf, 0x400uLL);
    v14 = (*(unsigned __int16 *)(a1 + 56) >> 4);
    v15 = fd_name(a1, (char *)buf, 0x400uLL);
    v20 = _fd_open(*(unsigned int *)(a1 + 44), v15, *(_DWORD *)(a1 + 48), *(_WORD *)(a1 + 56) & 1, v14, v16, v17, v18, v19);
    if (v20 != -1)
    {
      v21 = v20;
      __buf = 0;
      arc4random_buf(&__buf, 8uLL);
      v32 = *(_DWORD *)(a1 + 48);
      v22 = change_fdguard_np();
      __error();
      if (v22 && gSILogLevels[0] >= 5)
      {
        v29 = *__error();
        v30 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v31 = 0;
          _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "open file failed to change fdguard", v31, 2u);
        }
        *__error() = v29;
      }
      pthread_mutex_lock(&g_fd_lock);
      if (*(_DWORD *)(a1 + 40) == -1)
      {
        *(_QWORD *)(a1 + 8) = __buf;
        *(_DWORD *)(a1 + 40) = v21;
        updated = _fd_update_locked(a1, 1, a2);
        v23 = *(_DWORD *)(g_fd_list + 4);
        v24 = *(_DWORD *)(g_fd_list + 8);
        pthread_mutex_unlock(&g_fd_lock);
        if (v23 > v24
          && !_fd_close_inactive(*(unsigned int *)(a1 + 44), 0, 1, 1)
          && !_fd_close_inactive(0xFFFFFFFFLL, 0, 1, 1)
          && !_fd_close_inactive(*(unsigned int *)(a1 + 44), 0, 1, 0))
        {
          _fd_close_inactive(0xFFFFFFFFLL, 0, 1, 0);
        }
      }
      else
      {
        updated = _fd_update_locked(a1, 0, a2);
        pthread_mutex_unlock(&g_fd_lock);
        guarded_close_np();
      }
      return updated;
    }
    return 0xFFFFFFFFLL;
  }
  v13 = _fd_update_locked(a1, 0, a2);
  pthread_mutex_unlock(&g_fd_lock);
  return v13;
}

uint64_t _fd_update_locked(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  const char *v14;
  char *v15;
  const char *v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  const char *v22;
  char *v23;
  const char *v24;
  char *v25;
  const char *v26;
  uint64_t v27;

  result = *(unsigned int *)(a1 + 40);
  if ((_DWORD)result == -1)
  {
    v12 = __si_assert_copy_extra_521(-1);
    v13 = v12;
    v14 = "";
    if (v12)
      v14 = v12;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1507, "obj->fd != -1", v14);
LABEL_27:
    free(v13);
    if (__valid_fs(-1))
      v19 = 2989;
    else
      v19 = 3072;
    *(_DWORD *)v19 = -559038737;
    abort();
  }
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
  {
    if (v5)
    {
      v20 = __si_assert_copy_extra_521(-1);
      v21 = v20;
      v22 = "";
      if (v20)
        v22 = v20;
      __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1509, "!obj->prev", v22);
    }
    else
    {
      v7 = g_fd_list;
      v9 = *(_QWORD *)(g_fd_list + 16);
      v10 = *(_DWORD *)g_fd_list;
      if (v9)
      {
        if (v10)
        {
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
          *(_QWORD *)(a1 + 24) = v9;
          *(_QWORD *)(*(_QWORD *)(v9 + 16) + 24) = a1;
          *(_QWORD *)(v9 + 16) = a1;
          v11 = v10 + 1;
          goto LABEL_16;
        }
        v23 = __si_assert_copy_extra_521(-1);
        v21 = v23;
        v24 = "";
        if (v23)
          v24 = v23;
        __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1514, "g_fd_list->item_count!=0", v24);
      }
      else
      {
        if (!v10)
        {
          *(_QWORD *)(a1 + 16) = a1;
          *(_QWORD *)(a1 + 24) = a1;
          v11 = 1;
LABEL_16:
          *(_DWORD *)v7 = v11;
          if ((a2 & 1) == 0)
            goto LABEL_9;
          goto LABEL_8;
        }
        v25 = __si_assert_copy_extra_521(-1);
        v21 = v25;
        v26 = "";
        if (v25)
          v26 = v25;
        __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1511, "g_fd_list->item_count==0", v26);
      }
    }
    free(v21);
    if (__valid_fs(-1))
      v27 = 2989;
    else
      v27 = 3072;
    *(_DWORD *)v27 = -559038737;
    abort();
  }
  if (!v5)
  {
    v15 = __si_assert_copy_extra_521(-1);
    v13 = v15;
    v16 = "";
    if (v15)
      v16 = v15;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1525, "obj->prev", v16);
    goto LABEL_27;
  }
  v7 = g_fd_list;
  v8 = *(_QWORD *)(g_fd_list + 16);
  if (!v8)
  {
    v17 = __si_assert_copy_extra_521(-1);
    v13 = v17;
    v18 = "";
    if (v17)
      v18 = v17;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1526, "g_fd_list->head", v18);
    goto LABEL_27;
  }
  if (v8 != a1)
  {
    *(_QWORD *)(v5 + 24) = v6;
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) = v5;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(*(_QWORD *)(v8 + 16) + 24) = a1;
    *(_QWORD *)(v8 + 16) = a1;
  }
  if (a2)
LABEL_8:
    ++*(_DWORD *)(v7 + 4);
LABEL_9:
  *(_QWORD *)(v7 + 16) = a1;
  ++*(_DWORD *)(a1 + 36);
  *a3 = *(_QWORD *)(a1 + 8);
  return result;
}

_DWORD *_fd_release_fd(_DWORD *result, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  int v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  const char *v13;
  char *v14;
  const char *v15;
  char *v16;
  const char *v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;

  if (!result || a2 == -1)
    return result;
  v5 = (uint64_t)result;
  v21 = 0;
  if (*result != -50529037)
  {
    v11 = __si_assert_copy_extra_521(-1);
    v12 = v11;
    v13 = "";
    if (v11)
      v13 = v11;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1643, "obj->_magic==(0xFCFCFCF3)", v13);
LABEL_28:
    free(v12);
    if (__valid_fs(-1))
      v20 = 2989;
    else
      v20 = 3072;
    *(_DWORD *)v20 = -559038737;
    abort();
  }
  pthread_mutex_lock(&g_fd_lock);
  v8 = *(unsigned __int8 *)(v5 + 52);
  if (*(_BYTE *)(v5 + 52))
    goto LABEL_7;
  if (*(_DWORD *)(v5 + 40) != a2)
  {
    v16 = __si_assert_copy_extra_521(-1);
    v12 = v16;
    v17 = "";
    if (v16)
      v17 = v16;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1648, "obj->fd == in_fd", v17);
    goto LABEL_28;
  }
  if (*(_QWORD *)(v5 + 8) != a4)
  {
    v18 = __si_assert_copy_extra_521(-1);
    v12 = v18;
    v19 = "";
    if (v18)
      v19 = v18;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1649, "obj->_guard == inguard", v19);
    goto LABEL_28;
  }
LABEL_7:
  v9 = *(_DWORD *)(v5 + 36);
  if (!v9)
  {
    v14 = __si_assert_copy_extra_521(-1);
    v12 = v14;
    v15 = "";
    if (v14)
      v15 = v14;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1651, "obj->open_count", v15);
    goto LABEL_28;
  }
  v10 = v9 - 1;
  *(_DWORD *)(v5 + 36) = v10;
  if (v8 || v10 || !a3 || *(_DWORD *)(v5 + 68) || _fd_remove_locked(v5, &v21) == -1)
    return (_DWORD *)pthread_mutex_unlock(&g_fd_lock);
  *(_WORD *)(v5 + 56) &= ~8u;
  pthread_mutex_unlock(&g_fd_lock);
  return (_DWORD *)guarded_close_np();
}

uint64_t prot_write(uint64_t __fd, char *__buf, size_t __nbyte)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  BOOL v10;

  v6 = 0;
  do
  {
    while (1)
    {
      v7 = write(__fd, __buf, __nbyte);
      if ((v7 & 0x8000000000000000) != 0)
        break;
      v6 += v7;
      v10 = __nbyte > v7;
      __nbyte -= v7;
      if (!v10)
        return v6;
      __buf += v7;
    }
    v8 = g_prot_error_callback;
    if (!g_prot_error_callback)
      break;
    v9 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v8 + 16))(v8, __fd, *v9, 6) & 1) != 0);
  return -1;
}

uint64_t fd_lseek(_DWORD *a1, off_t a2, int a3)
{
  int v6;
  off_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  NSObject *v14;
  const char *v16;
  uint64_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  off_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  char v32[1024];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v17 = 0;
  v6 = _fd_acquire_fd((uint64_t)a1, &v17);
  if (v6 == -1)
    goto LABEL_7;
  while (1)
  {
    v7 = lseek(v6, a2, a3);
    if (v7 != -1 || !g_prot_error_callback)
      break;
    v8 = *__error();
    v9 = g_prot_error_callback;
    v10 = a1[10];
    v11 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v9 + 16))(v9, v10, *v11, 9) & 1) == 0)
    {
      *__error() = v8;
      _fd_release_fd(a1, v6, 0, v17);
      goto LABEL_7;
    }
  }
  _fd_release_fd(a1, v6, 0, v17);
  if (v7 == -1)
  {
LABEL_7:
    bzero(v32, 0x400uLL);
    v12 = *__error();
    v13 = *__error();
    v14 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v16 = fd_realpath(a1, v32);
      if (!v16)
      {
        v16 = fd_name((uint64_t)a1, v32, 0x400uLL);
        if (!v16)
          v16 = "";
      }
      *(_DWORD *)buf = 136316674;
      v19 = "fd_lseek";
      v20 = 1024;
      v21 = 618;
      v22 = 1024;
      v23 = v6;
      v24 = 2080;
      v25 = v16;
      v26 = 2048;
      v27 = a2;
      v28 = 1024;
      v29 = a3;
      v30 = 1024;
      v31 = v12;
      _os_log_error_impl(&dword_1B8270000, v14, OS_LOG_TYPE_ERROR, "%s:%d: lseek(%d %s, o:%lx, w:%d) err:%d", buf, 0x38u);
    }
    *__error() = v13;
    *__error() = v12;
    return -1;
  }
  return v7;
}

void si_perform_livequeries_deletions(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  CFIndex Count;
  uint64_t v6;
  const void **v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  int v26;
  uint8_t buf[16];
  void *values[1026];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = v1;
  values[1024] = *(void **)MEMORY[0x1E0C80C00];
  bzero(values, 0x2000uLL);
  pthread_mutex_lock((pthread_mutex_t *)(v4 + 1712));
  Count = CFSetGetCount(*(CFSetRef *)(v4 + 1776));
  v6 = Count;
  if (Count >= 1024)
  {
    v7 = (const void **)malloc_type_malloc(8 * Count, 0x2004093837F09uLL);
    CFSetGetValues(*(CFSetRef *)(v4 + 1776), v7);
  }
  else if (!Count
         || (v7 = (const void **)values, CFSetGetValues(*(CFSetRef *)(v4 + 1776), (const void **)values), v6 < 1))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1712));
    return;
  }
  v8 = 0;
  do
  {
    v9 = (unsigned int *)v7[v8];
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    ++v8;
  }
  while (v8 != v6);
  pthread_mutex_unlock((pthread_mutex_t *)(v4 + 1712));
  v11 = 0;
  do
  {
    v12 = v7[v11];
    v13 = v12[5];
    do
    {
      v14 = v13;
      v13 = *(_QWORD *)(v13 + 80);
    }
    while (v13);
    v15 = *(_QWORD *)(v14 + 40);
    if (RLEOIDArrayContainsOid(v15, v3))
    {
      v16 = v12[5];
      do
      {
        v17 = v16;
        v16 = *(_QWORD *)(v16 + 80);
      }
      while (v16);
      v18 = *(_QWORD *)(v17 + 8);
      v19 = malloc_type_calloc(1uLL, 0x40uLL, 0x10720403C4CCC75uLL);
      if (dword_1EF19FC94 >= 5)
      {
        v26 = *__error();
        v23 = _SILogForLogForCategory(2);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "Passing up deletion", buf, 2u);
        }
        *__error() = v26;
      }
      v19[1] = *(_OWORD *)(v12[5] + 48);
      *((_QWORD *)v19 + 1) = si_querypipe_copy_jobid(v12[5]);
      *((_QWORD *)v19 + 5) = 0;
      *(_DWORD *)v19 = 7;
      v20 = malloc_type_malloc(0x10uLL, 0x100004000313F17uLL);
      RLEOIDArrayRemoveOid(v15, v3);
      *v20 = 0;
      v21 = v12[5];
      do
      {
        v22 = v21;
        v21 = *(_QWORD *)(v21 + 80);
      }
      while (v21);
      *v20 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(v22 + 8) + 80) << 32) | 0xDE10001;
      v20[1] = v3;
      *((_QWORD *)v19 + 4) = _MDStoreOIDArrayCreateMutableWithOids();
      _MDStoreOIDArraySetShouldUseMalloc();
      *((_DWORD *)v19 + 14) = 3;
      if (!si_resultqueue_enqueue(v18, (int *)v19))
      {
        if (dword_1EF19FC94 >= 5)
        {
          v24 = *__error();
          v25 = _SILogForLogForCategory(2);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1B8270000, v25, OS_LOG_TYPE_DEFAULT, "Attempt to append to queue failed. Releasing result batch", buf, 2u);
          }
          *__error() = v24;
        }
        SIResultBatchFree((void **)v19);
      }
    }
    si_livequery_release((uint64_t)v7[v11++]);
  }
  while (v11 != v6);
  if (v7 != (const void **)values)
    free(v7);
}

uint64_t si_set_obj_state_locked(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  char *v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  char *v31;
  char *v32;
  const char *v33;
  CFAbsoluteTime Current;
  int v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _BYTE *v42;
  uint64_t v43;
  _QWORD *v44;
  _BYTE *v45;
  char *v46;
  const char *v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t (*v50)(uint64_t, uint64_t);
  void *v51;
  uint64_t *v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char v57;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 6576));
  v6 = *(unsigned __int8 *)(a1 + 2481);
  if (a3 == 1 && v6 == 3)
  {
    _si_dump_index_state(a1, 2);
    if (*(_DWORD *)(a1 + 2428) || **(_DWORD **)(a1 + 6592))
      return 89;
    v6 = *(unsigned __int8 *)(a1 + 2481);
    if (v6 == 3)
    {
      v46 = __si_assert_copy_extra_521(-1);
      v32 = v46;
      v47 = "";
      if (v46)
        v47 = v46;
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 29944, "!(s->state==kSIIndexStateNeedsShadow && state==kSIIndexStateDirty)", v47);
LABEL_94:
      free(v32);
      if (__valid_fs(-1))
        v48 = 2989;
      else
        v48 = 3072;
      *(_DWORD *)v48 = -559038737;
      abort();
    }
  }
  else if (a3 == 4 && v6 == 1)
  {
    v8 = __si_assert_copy_extra_521(-1);
    v9 = v8;
    v10 = "";
    if (v8)
      v10 = v8;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 29947, "!(s->state==kSIIndexStateDirty && state==kSIIndexStateClean)", v10);
    free(v9);
    if (__valid_fs(-1))
      v11 = 2989;
    else
      v11 = 3072;
    *(_DWORD *)v11 = -559038737;
    abort();
  }
  if (a2 && a2 != a1)
  {
    if (*(_QWORD *)(a1 + 1184) == a2)
    {
      if (*(unsigned __int8 *)(a1 + 2482) != a3)
      {
        v13 = 0;
        *(_BYTE *)(a1 + 2482) = a3;
        goto LABEL_57;
      }
    }
    else if (*(_QWORD *)(a1 + 6624) == a2)
    {
      if (*(unsigned __int8 *)(a1 + 2483) != a3)
      {
        v13 = 0;
        *(_BYTE *)(a1 + 2483) = a3;
        goto LABEL_57;
      }
    }
    else
    {
      v12 = (_BYTE *)(a2 + 15161);
      if (*(unsigned __int8 *)(a2 + 15161) != a3)
      {
        v13 = 0;
        *v12 = a3;
LABEL_57:
        v22 = 1;
        goto LABEL_58;
      }
    }
    goto LABEL_35;
  }
  if (v6 == a3)
  {
LABEL_35:
    v22 = 0;
    v13 = 0;
    goto LABEL_58;
  }
  v13 = 0;
  if (a3 != 2)
  {
    if (a3 != 3)
    {
      if (a3 == 4)
      {
        *(_WORD *)(a1 + 2482) = 1028;
        v14 = *(_QWORD *)(a1 + 1392);
        v15 = *(_QWORD *)(a1 + 1384);
        if (v14)
        {
          v16 = *(unsigned int *)(v14 + 8);
          if ((_DWORD)v16)
          {
            v17 = *(uint64_t **)v14;
            do
            {
              v18 = *v17++;
              *(_BYTE *)(v18 + 15161) = 4;
              --v16;
            }
            while (v16);
          }
        }
        if (v15)
        {
          v19 = *(unsigned int *)(v15 + 8);
          if ((_DWORD)v19)
          {
            v20 = *(uint64_t **)v15;
            do
            {
              v21 = *v20++;
              *(_BYTE *)(v21 + 15161) = 4;
              --v19;
            }
            while (v19);
          }
        }
        v13 = 1;
      }
LABEL_55:
      *(_BYTE *)(a1 + 2481) = a3;
      goto LABEL_57;
    }
    v13 = 1;
  }
  v54 = 0;
  v55 = &v54;
  v56 = 0x2000000000;
  v57 = 0;
  v23 = *(unsigned __int8 *)(a1 + 2482);
  if (v23 != a3 && v23 != 4)
  {
    *(_BYTE *)(a1 + 2482) = a3;
    v57 = 1;
  }
  if (*(_QWORD *)(a1 + 6624))
  {
    v24 = *(unsigned __int8 *)(a1 + 2483);
    if (v24 != a3 && v24 != 4)
    {
      *(_BYTE *)(a1 + 2483) = a3;
      v57 = 1;
    }
  }
  v25 = *(_QWORD *)(a1 + 1392);
  v26 = *(_QWORD *)(a1 + 1384);
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 0x40000000;
  v50 = __si_set_obj_state_locked_block_invoke_2;
  v51 = &unk_1E6E2E3F0;
  v53 = a3;
  v52 = &v54;
  if (v25 && *(_DWORD *)(v25 + 8))
  {
    v27 = 0;
    while (((unsigned int (*)(_QWORD *, _QWORD, _QWORD))v50)(v49, *(_QWORD *)(*(_QWORD *)v25 + 8 * v27), 0))
    {
      if (++v27 >= (unint64_t)*(unsigned int *)(v25 + 8))
        goto LABEL_49;
    }
  }
  else
  {
LABEL_49:
    if (v26 && *(_DWORD *)(v26 + 8))
    {
      v28 = 0;
      do
      {
        if (!((unsigned int (*)(_QWORD *, _QWORD, uint64_t))v50)(v49, *(_QWORD *)(*(_QWORD *)v26 + 8 * v28), 1))break;
        ++v28;
      }
      while (v28 < *(unsigned int *)(v26 + 8));
    }
  }
  v29 = *((unsigned __int8 *)v55 + 24);
  _Block_object_dispose(&v54, 8);
  v22 = v29 != 0;
  if (v29)
    goto LABEL_55;
LABEL_58:
  if (a3 == 1 && *(_BYTE *)(a1 + 2481) != 1)
  {
    v30 = *(unsigned __int8 *)(a1 + 2482);
    if (v30 == 2)
    {
      *(_BYTE *)(a1 + 2482) = 1;
    }
    else if (v30 == 3)
    {
      v31 = __si_assert_copy_extra_521(-1);
      v32 = v31;
      v33 = "";
      if (v31)
        v33 = v31;
      __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 30042, "s->sdb_state!=kSIIndexStateNeedsShadow", v33);
      goto LABEL_94;
    }
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2224));
    Current = CFAbsoluteTimeGetCurrent();
    activityJournalWriteVInt64(a1 + 2192, 36, (unint64_t)Current);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 2224));
    if (*(_QWORD *)(a1 + 6624))
    {
      v35 = *(unsigned __int8 *)(a1 + 2483);
      if (v35 == 2)
      {
        *(_BYTE *)(a1 + 2483) = 1;
      }
      else if (v35 == 3)
      {
        v36 = __si_assert_copy_extra_521(-1);
        v32 = v36;
        v37 = "";
        if (v36)
          v37 = v36;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 30050, "s->directory_state!=kSIIndexStateNeedsShadow", v37);
        goto LABEL_94;
      }
    }
    v38 = *(_QWORD *)(a1 + 1392);
    v39 = *(_QWORD *)(a1 + 1384);
    if (v38)
    {
      v40 = *(unsigned int *)(v38 + 8);
      if ((_DWORD)v40)
      {
        v41 = *(_QWORD **)v38;
        do
        {
          v42 = (_BYTE *)(*v41 + 15161);
          if (*v42 == 2)
            *v42 = 1;
          ++v41;
          --v40;
        }
        while (v40);
      }
    }
    if (v39)
    {
      v43 = *(unsigned int *)(v39 + 8);
      if ((_DWORD)v43)
      {
        v44 = *(_QWORD **)v39;
        do
        {
          v45 = (_BYTE *)(*v44 + 15161);
          if (*v45 == 2)
            *v45 = 1;
          ++v44;
          --v43;
        }
        while (v43);
      }
    }
    *(_BYTE *)(a1 + 2481) = 1;
    return si_write_index_state(a1, 1, v13);
  }
  if (!v22)
    return 0;
  return si_write_index_state(a1, 1, v13);
}

char *fd_name(uint64_t a1, char *a2, size_t a3)
{
  char *v7;
  char *v8;
  const char *v9;
  uint64_t v10;

  if (!a1)
    return 0;
  if (*(_DWORD *)a1 != -50529037)
  {
    v7 = __si_assert_copy_extra_521(-1);
    v8 = v7;
    v9 = "";
    if (v7)
      v9 = v7;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1173, "obj->_magic==(0xFCFCFCF3)", v9);
    free(v8);
    if (__valid_fs(-1))
      v10 = 2989;
    else
      v10 = 3072;
    *(_DWORD *)v10 = -559038737;
    abort();
  }
  os_unfair_lock_lock((os_unfair_lock_t)&g_name_lock);
  if (strlcpy(a2, *(const char **)(a1 + 72), a3) > a3)
    a2 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&g_name_lock);
  return a2;
}

void *stack_allocate(size_t size, uint64_t a2, uint64_t a3)
{
  void *result;
  size_t v6;

  result = *(void **)(a3 + 8);
  v6 = ((unint64_t)result + size + 15) & 0xFFFFFFFFFFFFFFF0;
  if (v6 >= *(_QWORD *)(a3 + 16))
  {
    result = malloc_type_zone_malloc(*(malloc_zone_t **)(a3 + 32), size, 0x3ECAAD13uLL);
    if (result)
      ++*(_QWORD *)(a3 + 24);
  }
  else
  {
    *(_QWORD *)(a3 + 8) = v6;
  }
  return result;
}

void ___scheduler_suspension_locked_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v7 = 0;
  v2 = *(_QWORD *)(a1 + 32);
  pthread_mutex_lock(*(pthread_mutex_t **)(v2 + 8));
  if (*(_DWORD *)(v2 + 104) || *(_QWORD *)(v2 + 120))
  {
    *(_DWORD *)(v2 + 168) = 0;
    si_scheduler_do_suspend(v2, &v7);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(v2 + 8));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 80);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      _si_scheduler_destroy(v3);
  }
  si_scheduler_trigger_tokens(v7);
}

uint64_t si_scheduler_do_suspend(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t result;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_DWORD *)(a1 + 104);
  result = *(_QWORD *)(a1 + 120);
  if (!v4)
  {
    if (!result)
      return result;
    v6 = (_DWORD *)(a1 + 100);
    v7 = *(_DWORD *)(a1 + 100);
    *(_DWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    goto LABEL_6;
  }
  v6 = (_DWORD *)(a1 + 100);
  v7 = *(_DWORD *)(a1 + 100);
  *(_QWORD *)(a1 + 100) = (v7 + v4);
  *(_QWORD *)(a1 + 120) = 0;
  if (result)
  {
LABEL_6:
    v8 = 0;
    do
    {
      *(_BYTE *)(result + 4) = 1;
      ++*v6;
      v9 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(result + 32))
      {
        *(_QWORD *)(result + 16) = v8;
        v8 = result;
      }
      else
      {
        release_token((unsigned int *)result);
      }
      result = v9;
    }
    while (v9);
    goto LABEL_11;
  }
  v8 = 0;
LABEL_11:
  if (!v7)
  {
    if (*v6)
      dispatch_suspend(*(dispatch_object_t *)(a1 + 136));
  }
  *a2 = v8;
  return pthread_cond_broadcast(*(pthread_cond_t **)(a1 + 16));
}

void release_token(unsigned int *a1)
{
  unsigned int v2;
  unsigned int v3;
  void (*v4)(_QWORD, uint64_t);

  if (a1)
  {
    do
    {
      v2 = __ldaxr(a1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, a1));
    if (!v3)
    {
      v4 = (void (*)(_QWORD, uint64_t))*((_QWORD *)a1 + 4);
      if (v4)
        v4(*((_QWORD *)a1 + 5), 1);
      free(a1);
    }
  }
}

void __CIIndexSetFinalize(uint64_t a1)
{
  void *v2;
  unint64_t v3;

  if (*(_DWORD *)(a1 + 16) <= 0xFFFFFFF6)
  {
    v2 = *(void **)(a1 + 40);
    v3 = 4 * *(unsigned int *)(a1 + 32);
    if (v3 >= *MEMORY[0x1E0C85AD8] >> 1)
      munmap(v2, (*MEMORY[0x1E0C85AD8] + v3 - 1) & -*MEMORY[0x1E0C85AD8]);
    else
      free(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = 0;
}

uint64_t SIUserCtxSetEntitlements(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 176) = a2;
  return result;
}

uint64_t compressPostings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  double Current;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  os_log_type_t v31;
  float v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  int v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  float v46;
  double v47;
  void *v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64x2_t v74;
  int32x2_t v75;
  uint64x2_t v76;
  int32x2_t v77;
  uint64x2_t v78;
  int16x8_t v79;
  uint64x2_t v80;
  int16x8_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int v84;
  unsigned int v85;
  char *v86;
  unsigned int v87;
  unsigned int v88;
  char *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint8_t *v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  int *v118;
  BOOL v119;
  char *v120;
  char *v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t updated;
  int v125;
  int v126;
  NSObject *v127;
  os_log_type_t v128;
  float v129;
  double v130;
  uint64_t v131;
  unsigned int v132;
  const __CFAllocator *v133;
  _QWORD *v134;
  unint64_t v135;
  unint64_t v136;
  CFIndex v137;
  CFIndex v138;
  CFIndex v139;
  const __CFBitVector *v140;
  __CFBitVector *MutableCopy;
  const void *v142;
  int v143;
  NSObject *v144;
  os_log_type_t v145;
  float v146;
  uint64_t v147;
  char *v149;
  char *v150;
  const char *v151;
  char *v152;
  char *v153;
  const char *v154;
  char *v155;
  char *v156;
  char *v157;
  const char *v158;
  uint64_t v159;
  char *v160;
  const char *v161;
  char *v162;
  const char *v163;
  char *v164;
  const char *v165;
  unsigned int v166;
  unint64_t v167;
  uint64_t v168;
  int64_t __n;
  uint64_t v170;
  _QWORD *v171;
  unint64_t v172;
  unint64_t v173;
  unsigned int v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  uint64_t (*v180)(uint64_t);
  uint64_t v181;
  char *v182;
  unint64_t v183;
  __CFBitVector *v184;
  void *v185[2];
  __int128 v186;
  void *v187[2];
  __int128 v188;
  void *v189[2];
  void *v190[2];
  void *v191[2];
  uint64_t v192;
  void *v193[2];
  __int128 v194;
  uint64_t v195;
  _QWORD v196[2];
  __int128 v197;
  uint8_t buf[16];
  int v199;
  uint64_t v200;

  v9 = MEMORY[0x1E0C80A78](a1);
  v180 = v10;
  v166 = v11;
  v13 = v12;
  v15 = v14;
  v178 = v16;
  v182 = v17;
  v19 = v18;
  v20 = v9;
  v200 = *MEMORY[0x1E0C80C00];
  v195 = 0;
  *(_OWORD *)v193 = 0u;
  v194 = 0u;
  v197 = 0uLL;
  v196[1] = 0x8000;
  v175 = (char *)malloc_type_malloc(0x8000uLL, 0x9D8A9808uLL);
  v196[0] = v175;
  PayloadWriteBufferInit(v193, (_DWORD *)v20);
  v21 = *(_QWORD *)(v20 + 8);
  Current = CFAbsoluteTimeGetCurrent();
  v168 = v20 + 40;
  v177 = v13;
  v181 = v20;
  v23 = 0;
  if (v15)
  {
    v24 = *(_DWORD *)(v20 + 4448);
    v25 = (_QWORD *)(v13 + 24 * v15 - 8);
    v26 = v15;
    do
    {
      v28 = *((unsigned int *)v25 - 4);
      if (v24 <= v28)
      {
        v27 = 0;
        ++v23;
      }
      else
      {
        v27 = *(_QWORD *)storageResolvePtr(v168, 8 * v28, 8uLL, 1);
      }
      *v25 = v27;
      v25 -= 3;
      --v26;
    }
    while (v26);
  }
  v29 = *__error();
  v30 = _SILogForLogForCategory(10);
  v31 = 2 * (dword_1EF19FCB4 < 4);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = CFAbsoluteTimeGetCurrent() - Current;
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = v32;
    _os_log_impl(&dword_1B8270000, v30, v31, "resolve term id offsets: %f", buf, 0xCu);
  }
  v33 = __error();
  *v33 = v29;
  if (v23)
    si_analytics_log_2584((uint64_t)v33, v34, v35, v36, v37, v38, v39, v40, v23);
  v41 = CFAbsoluteTimeGetCurrent();
  madvise(v182, 12 * v19, 3);
  v42 = *__error();
  v43 = _SILogForLogForCategory(10);
  v44 = 2 * (dword_1EF19FCB4 < 4);
  v45 = v177;
  if (os_log_type_enabled(v43, v44))
  {
    v46 = CFAbsoluteTimeGetCurrent() - v41;
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = v46;
    _os_log_impl(&dword_1B8270000, v43, v44, "make hot: %f", buf, 0xCu);
  }
  *__error() = v42;
  v47 = CFAbsoluteTimeGetCurrent();
  v192 = 0;
  *(_OWORD *)v190 = 0u;
  *(_OWORD *)v191 = 0u;
  v188 = 0u;
  *(_OWORD *)v189 = 0u;
  *(_OWORD *)v187 = 0u;
  LODWORD(v189[1]) = 16;
  v189[0] = malloc_type_malloc(0x80uLL, 0x2004093837F09uLL);
  LODWORD(v190[1]) = 16;
  v190[0] = malloc_type_malloc(0x80uLL, 0x100004000313F17uLL);
  LODWORD(v191[1]) = 16;
  v48 = malloc_type_malloc(0x10uLL, 0x100004077774924uLL);
  v49 = 0;
  v50 = 0;
  v191[0] = v48;
  *(_OWORD *)v185 = 0u;
  v186 = 0u;
  v51 = v15 - 1;
  v52 = v181;
  if (!v15 || v195)
    goto LABEL_136;
  v173 = v15;
  v49 = 0;
  v53 = 0;
  v167 = v51;
  do
  {
    v50 = *(_DWORD *)(v45 + 24 * v49);
    v179 = v50;
    if (v49 != v51)
    {
      v50 = *(_DWORD *)(v45 + 24 * (v49 + 1));
      if (v179 <= v50)
      {
        v72 = 0;
        ++v49;
        continue;
      }
    }
    v54 = (_QWORD *)(v45 + 24 * v49);
    v56 = v54[2];
    v54 += 2;
    v55 = v56;
    v57 = (char *)*(v54 - 1);
    v197 = xmmword_1B8631CD0;
    LODWORD(v187[1]) = 0;
    *(_QWORD *)&v188 = 0;
    v192 = 0;
    DWORD2(v188) = -1;
    v171 = v54;
    v172 = v49;
    v174 = v50;
    if (*(_DWORD *)v57 >= 2u)
    {
      do
      {
        v62 = &v182[12 * (*(_DWORD *)v57 >> 1)];
        if (*(_DWORD *)v57 >= 2u)
          _X28 = &v182[12 * (*(_DWORD *)v57 >> 1)];
        else
          _X28 = 0;
        __asm { PRFM            #0, [X28] }
        if ((*(_DWORD *)v57 & 1) != 0)
        {
          v70 = *((_QWORD *)v57 + 1);
          if (*((_DWORD *)v57 + 1) == 2)
            v71 = 1;
          else
            v71 = 2;
          checkChangeHolderIntegrity((uint64_t)v185);
          changesHandleUpdate((uint64_t)v185, v70, v71);
          if (v185[1] && !*((_QWORD *)&v186 + 1))
          {
            *(_OWORD *)v185[0] = *((_OWORD *)v185[0] + v186 - (unint64_t)v185[1]);
            *((_QWORD *)&v186 + 1) = 1;
          }
          checkChangeHolderIntegrity((uint64_t)v185);
        }
        else if (!v185[1]
               || (v69 = *((unsigned int *)v57 + 2), (unint64_t)(v69 + v178) > *(_QWORD *)v185[0])
               || (merge_checkAgainstUpdates((uint64_t)v187, (uint64_t)v185, v69, v178) & 1) == 0)
        {
          packContextAppend((uint64_t)v187, *((_DWORD *)v57 + 2));
        }
        v57 = v62;
      }
      while (_X28);
      merge_checkAgainstUpdates1((uint64_t)v187, (unint64_t **)v185, v166, v178);
      v73 = packContextFinalize((uint64_t)v196);
      v50 = v174;
    }
    else
    {
      if (*(_DWORD *)v57)
      {
        v123 = v50;
        updated = packUpdateLink((uint64_t)v175, v55, *(_QWORD *)(v57 + 4), *((_DWORD *)v57 + 3));
        v50 = v123;
        *(_QWORD *)&v197 = updated;
      }
      else
      {
        v58 = *(_QWORD *)(v57 + 4);
        v59 = 2 * v55;
        if ((v55 >> 31))
        {
          v60 = v175;
          if ((v59 & 0x8000000000000000) != 0)
          {
            v76 = (uint64x2_t)vdupq_n_s64(v59);
            v77.i32[0] = 2 * v55;
            v77.i32[1] = v59 >> 7;
            *(int8x8_t *)(v175 + 20) = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v77, (int64x2_t)vshlq_u64(v76, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v76, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v76, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
            v175[28] = HIBYTE(v59) | 0x80;
            LOBYTE(v59) = 1;
            v61 = 29;
          }
          else if ((v59 & 0x7F00000000000000) != 0)
          {
            v74 = (uint64x2_t)vdupq_n_s64(v59);
            v75.i32[0] = 2 * v55;
            v75.i32[1] = v59 >> 7;
            *(int8x8_t *)(v175 + 20) = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v75, (int64x2_t)vshlq_u64(v74, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v74, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v74, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
            v59 = (v59 & 0x7F00000000000000) >> 56;
            v61 = 28;
          }
          else if ((v59 & 0xFE000000000000) != 0)
          {
            v175[20] = v59 | 0x80;
            v78 = (uint64x2_t)vdupq_n_s64(v59);
            v79 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v78, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v78, (uint64x2_t)xmmword_1B8631B90));
            v79.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v79) | 0x80008000800080;
            *(_DWORD *)(v175 + 21) = vmovn_s16(v79).u32[0];
            v175[25] = (v59 >> 35) | 0x80;
            v175[26] = (v59 >> 42) | 0x80;
            v59 = (v59 & 0xFE000000000000) >> 49;
            v61 = 27;
          }
          else
          {
            v175[20] = v59 | 0x80;
            v80 = (uint64x2_t)vdupq_n_s64(v59);
            v81 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v80, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v80, (uint64x2_t)xmmword_1B8631B90));
            v81.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v81) | 0x80008000800080;
            *(_DWORD *)(v175 + 21) = vmovn_s16(v81).u32[0];
            if ((v59 & 0x1FC0000000000) != 0)
            {
              v175[25] = (v59 >> 35) | 0x80;
              v59 = (v59 & 0x1FC0000000000) >> 42;
              v61 = 26;
            }
            else
            {
              v59 = (v59 >> 35) & 0x7F;
              v61 = 25;
            }
          }
        }
        else
        {
          v60 = v175;
          if ((v59 & 0x7F0000000) != 0)
          {
            v175[20] = v59 | 0x80;
            v175[21] = (v59 >> 7) | 0x80;
            v175[22] = (v59 >> 14) | 0x80;
            v175[23] = (v59 >> 21) | 0x80;
            v59 = (v59 & 0x7F0000000) >> 28;
            v61 = 24;
          }
          else if ((v59 & 0xFE00000) != 0)
          {
            v175[20] = v59 | 0x80;
            v175[21] = (v59 >> 7) | 0x80;
            v175[22] = (v59 >> 14) | 0x80;
            v59 = (v59 & 0xFE00000) >> 21;
            v61 = 23;
          }
          else if ((v59 & 0x1FC000) != 0)
          {
            v175[20] = v59 | 0x80;
            v175[21] = (v59 >> 7) | 0x80;
            v59 = (v59 & 0x1FC000) >> 14;
            v61 = 22;
          }
          else if ((v59 & 0x3F80) != 0)
          {
            v175[20] = v59 | 0x80;
            v59 = (v59 & 0x3F80) >> 7;
            v61 = 21;
          }
          else
          {
            v61 = 20;
          }
        }
        v60[v61] = v59;
        v82 = v61 + 1;
        v83 = v58 >> 31;
        if ((_DWORD)v58 == 1)
        {
          v84 = v83 >> 28;
          if (v83 >> 28)
          {
            v60[v82] = v83 | 0x81;
            v90 = &v60[v61];
            v90[2] = (v58 >> 38) | 0x80;
            v90[3] = (v58 >> 45) | 0x80;
            v82 = v61 + 5;
            v90[4] = (v58 >> 52) | 0x80;
            LOBYTE(v58) = v84;
          }
          else
          {
            v85 = v83 & 0xFE00000;
            if ((v83 & 0xFE00000) != 0)
            {
              v60[v82] = v83 | 0x81;
              v86 = &v60[v61];
              v86[2] = (v58 >> 38) | 0x80;
              v82 = v61 + 4;
              v86[3] = (v58 >> 45) | 0x80;
              LODWORD(v58) = v85 >> 21;
            }
            else if ((v83 & 0x1FC000) != 0)
            {
              v60[v82] = v83 | 0x81;
              v82 = v61 + 3;
              v60[v61 + 2] = (v58 >> 38) | 0x80;
              LODWORD(v58) = (v83 & 0x1FC000) >> 14;
            }
            else if ((v83 & 0x3F80) != 0)
            {
              v60[v82] = v83 | 0x81;
              v82 = v61 + 2;
              LODWORD(v58) = (unsigned __int16)(v83 & 0x3F80) >> 7;
            }
            else
            {
              LOBYTE(v58) = v83 | 1;
            }
          }
        }
        else
        {
          LOBYTE(v87) = v83 & 0xFE;
          if ((v83 & 0xFFFFFFFE) >> 28)
          {
            v60[v82] = v83 & 0x7E | 0x80;
            v91 = &v60[v61];
            v91[2] = (v58 >> 38) | 0x80;
            v91[3] = (v58 >> 45) | 0x80;
            v82 = v61 + 5;
            v91[4] = (v58 >> 52) | 0x80;
            v87 = v83 >> 28;
          }
          else
          {
            v88 = v83 & 0xFE00000;
            if ((v83 & 0xFE00000) != 0)
            {
              v60[v82] = v83 & 0x7E | 0x80;
              v89 = &v60[v61];
              v89[2] = (v58 >> 38) | 0x80;
              v82 = v61 + 4;
              v89[3] = (v58 >> 45) | 0x80;
              v87 = v88 >> 21;
            }
            else if ((v83 & 0x1FC000) != 0)
            {
              v60[v82] = v83 & 0x7E | 0x80;
              v82 = v61 + 3;
              v60[v61 + 2] = (v58 >> 38) | 0x80;
              v87 = (v83 & 0x1FC000) >> 14;
            }
            else
            {
              v122 = v83 & 0x3F80;
              if (v122)
              {
                v60[v82] = v87 | 0x80;
                v82 = v61 + 2;
                v87 = v122 >> 7;
              }
            }
          }
          v60[v82] = v87;
          v92 = v82 + 1;
          if (v58 >> 28)
          {
            v60[v92] = v58 | 0x80;
            v94 = &v60[v82];
            v94[2] = (v58 >> 7) | 0x80;
            v94[3] = (v58 >> 14) | 0x80;
            v82 += 5;
            v94[4] = (v58 >> 21) | 0x80;
            LODWORD(v58) = v58 >> 28;
          }
          else if ((v58 & 0xFE00000) != 0)
          {
            v60[v92] = v58 | 0x80;
            v93 = &v60[v82];
            v93[2] = (v58 >> 7) | 0x80;
            v82 += 4;
            v93[3] = (v58 >> 14) | 0x80;
            LODWORD(v58) = (v58 & 0xFE00000) >> 21;
          }
          else if ((v58 & 0x1FC000) != 0)
          {
            v60[v92] = v58 | 0x80;
            v121 = &v60[v82];
            v82 += 3;
            v121[2] = (v58 >> 7) | 0x80;
            LODWORD(v58) = (v58 & 0x1FC000) >> 14;
          }
          else if ((v58 & 0x3F80) != 0)
          {
            v82 += 2;
            v60[v92] = v58 | 0x80;
            LODWORD(v58) = (unsigned __int16)(v58 & 0x3F80) >> 7;
          }
          else
          {
            ++v82;
          }
        }
        v60[v82] = v58;
        *(_QWORD *)&v197 = v82 + 1;
      }
      v73 = 20;
    }
    v95 = v179 - v50;
    v96 = v196[0];
    v175 = (char *)v196[0];
    v170 = v73;
    if ((v179 - v50) >> 28)
    {
      *(_DWORD *)(v73 + v196[0] - 4) = v95;
      LOBYTE(v95) = -16;
      v98 = -5;
    }
    else if ((v95 & 0xFE00000) != 0)
    {
      v97 = v73 + v196[0];
      *(_WORD *)(v97 - 2) = bswap32(v95) >> 16;
      *(_BYTE *)(v97 - 3) = BYTE2(v95);
      v95 = HIBYTE(v95) | 0xFFFFFFE0;
      v98 = -4;
    }
    else if ((v95 & 0x1FC000) != 0)
    {
      *(_WORD *)(v73 + v196[0] - 2) = bswap32(v95) >> 16;
      v95 = HIWORD(v95) | 0xFFFFFFC0;
      v98 = -3;
    }
    else
    {
      v99 = v73 - 1;
      *(_BYTE *)(v196[0] + v73 - 1) = v95;
      if ((v95 & 0x3F80) == 0)
        goto LABEL_77;
      v95 = (v95 >> 8) | 0xFFFFFF80;
      v98 = -2;
    }
    v99 = v73 + v98;
    *(_BYTE *)(v96 + v73 + v98) = v95;
LABEL_77:
    v176 = v99;
    __n = v197 - v99;
    v101 = *(_QWORD *)v52;
    v100 = *(_QWORD *)(v52 + 8);
    v102 = v100 - *(_QWORD *)v52;
    v183 = v197 - v99 + 20;
    if (v183 <= v102)
    {
      v111 = *((_QWORD *)&v194 + 1);
      v103 = v21;
      goto LABEL_108;
    }
    v103 = *(_QWORD *)(v52 + 8);
    while (1)
    {
      if (!v53 || v21 == v103)
        goto LABEL_85;
      if (v102 <= 0x13)
      {
        v152 = __si_assert_copy_extra_268();
        v153 = v152;
        v154 = "";
        if (v152)
          v154 = v152;
        __message_assert("%s:%u: failed assertion '%s' %s ", "JHPayload.c", 274, "pd->payloadIndex - pd->payloadLimit >= sizeof(PulseHeaderDisk)", v154);
        v155 = v153;
        goto LABEL_173;
      }
      *(_QWORD *)&buf[4] = v21 - v103;
      v199 = -1;
      *(_DWORD *)buf = -1;
      *(_DWORD *)&buf[12] = v179;
      v104 = *((_QWORD *)&v194 + 1);
      if (*((uint64_t *)&v194 + 1) < 21)
      {
        _PayloadWriteData_2575((int *)v193, (_QWORD *)v52, (char *)buf, 20);
      }
      else
      {
        *(_QWORD *)(v52 + 8) = v103 - 20;
        *((_QWORD *)&v194 + 1) = v104 - 20;
        v105 = (char *)v193[0] + v104 - 20;
        v106 = v199;
        *(_OWORD *)v105 = *(_OWORD *)buf;
        *((_DWORD *)v105 + 4) = v106;
      }
      PayloadWriteBufferWrite((int *)v193, (_QWORD *)v52);
      v107 = v195;
      v101 = *(_QWORD *)v52;
      v103 = *(_QWORD *)(v52 + 8);
      if (!v195)
      {
LABEL_85:
        bzero(buf, 0x1000uLL);
        v108 = v103 - v101;
        v109 = _fd_acquire_fd(*(_QWORD *)(v52 + 4480), (_QWORD *)(v181 + 4496));
        if (v103 != v101)
        {
          do
          {
            if (v108 >= 0x1000)
              v112 = 4096;
            else
              v112 = v108;
            v113 = buf;
            v114 = v112;
            v115 = v101;
            do
            {
              while (1)
              {
                v116 = guarded_pwrite_np();
                if ((v116 & 0x8000000000000000) != 0)
                  break;
                v119 = v114 > v116;
                v114 -= v116;
                if (!v119)
                  goto LABEL_93;
                v113 += v116;
                v115 += v116;
              }
              v117 = g_prot_error_callback;
              if (!g_prot_error_callback)
                break;
              v118 = __error();
            }
            while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v117 + 16))(v117, v109, *v118, 5) & 1) != 0);
LABEL_93:
            v101 += v112;
            v108 -= v112;
          }
          while (v108);
        }
        v52 = v181;
        _fd_release_fd(*(_DWORD **)(v181 + 4480), v109, 0, *(_QWORD *)(v181 + 4496));
        if (v101 != *(_QWORD *)(v181 + 8))
        {
          v149 = __si_assert_copy_extra_268();
          v150 = v149;
          v151 = "";
          if (v149)
            v151 = v149;
          __message_assert("%s:%u: failed assertion '%s' %s ", "JHPayload.c", 375, "pos == pd->payloadIndex", v151);
LABEL_164:
          free(v150);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        v110 = expandPayload(v181, v180, a9);
        v107 = v110;
        v195 = v110;
        v101 = *(_QWORD *)v181;
        v103 = *(_QWORD *)(v181 + 8);
      }
      v53 = 0;
      v102 = v103 - v101;
      v111 = (uint64_t)v193[1];
      if ((void *)(v103 - v101) < v193[1])
        v111 = (v103 - v101);
      *(_QWORD *)&v194 = v111;
      *((_QWORD *)&v194 + 1) = v111;
      if (v183 <= v102)
        break;
      v21 = v103;
      v100 = v103;
      if (v107)
        goto LABEL_108;
    }
    v100 = v103;
LABEL_108:
    v120 = &v175[v176];
    if (v111 <= __n)
    {
      _PayloadWriteData_2575((int *)v193, (_QWORD *)v52, v120, __n);
    }
    else
    {
      *(_QWORD *)(v52 + 8) = v100 - __n;
      *((_QWORD *)&v194 + 1) = v111 - __n;
      memcpy((char *)v193[0] + v111 - __n, v120, __n);
    }
    v45 = v177;
    *v171 = v170 - v176 + *(_QWORD *)(v52 + 8);
    v51 = v167;
    v50 = v174;
    if (v170 == v176)
    {
      v160 = __si_assert_copy_extra_268();
      v150 = v160;
      v161 = "";
      if (v160)
        v161 = v160;
      __message_assert("%s:%u: failed assertion '%s' %s ", "JHPayload.c", 481, "postingStart-postingTermIdStart", v161);
      goto LABEL_164;
    }
    ++v53;
    v72 = v195;
    v49 = v172 + 1;
    v21 = v103;
  }
  while (v49 < v173 && !v72);
LABEL_136:
  v125 = v50;
  free(v187[0]);
  free(v189[0]);
  free(v190[0]);
  free(v191[0]);
  free(v185[0]);
  PayloadWritePulseHeader((int *)v193, (_QWORD *)v52, v21 - *(_QWORD *)(v52 + 8), v125);
  v126 = *__error();
  v127 = _SILogForLogForCategory(10);
  v128 = 2 * (dword_1EF19FCB4 < 4);
  if (os_log_type_enabled(v127, v128))
  {
    v129 = CFAbsoluteTimeGetCurrent() - v47;
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = v129;
    _os_log_impl(&dword_1B8270000, v127, v128, "write postings: %f", buf, 0xCu);
  }
  *__error() = v126;
  v130 = CFAbsoluteTimeGetCurrent();
  if (v49)
  {
    v131 = 0;
    v132 = 0;
    v133 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v134 = (_QWORD *)MEMORY[0x1E0C85AD8];
    while (1)
    {
      v135 = *(_QWORD *)(v45 + 24 * v131 + 16);
      if (v135 >> 62)
        break;
      v136 = 8 * *(unsigned int *)(v45 + 24 * v131);
      v137 = v136 / *v134;
      v138 = *(_QWORD *)(v52 + 4464);
      if (v138 <= v137)
      {
        if (v138)
          v139 = *(_QWORD *)(v52 + 4464);
        else
          v139 = 32;
        while (1)
        {
          v139 *= 2;
          if (v139 > v137)
            break;
          if (v139 <= v138)
          {
            v162 = __si_assert_copy_extra_268();
            v150 = v162;
            v163 = "";
            if (v162)
              v163 = v162;
            __message_assert("%s:%u: failed assertion '%s' %s ", "bit_vector.h", 111, "newCapacity > bv->capacity", v163);
            goto LABEL_164;
          }
        }
        v140 = *(const __CFBitVector **)(v181 + 4472);
        if (v140)
          MutableCopy = CFBitVectorCreateMutableCopy(v133, v139, v140);
        else
          MutableCopy = CFBitVectorCreateMutable(v133, v139);
        if (!MutableCopy)
        {
          v164 = __si_assert_copy_extra_268();
          v150 = v164;
          v165 = "";
          if (v164)
            v165 = v164;
          __message_assert("%s:%u: failed assertion '%s' %s ", "bit_vector.h", 115, "newBV", v165);
          goto LABEL_164;
        }
        v184 = MutableCopy;
        CFBitVectorSetCount(MutableCopy, v139);
        v142 = *(const void **)(v181 + 4472);
        if (v142)
          CFRelease(v142);
        *(_QWORD *)(v181 + 4472) = v184;
        *(_QWORD *)(v181 + 4464) = v139;
        v52 = v181;
      }
      if (*(_QWORD *)(v52 + 4456) <= v137)
        *(_QWORD *)(v52 + 4456) = v137 + 1;
      CFBitVectorSetBitAtIndex(*(CFMutableBitVectorRef *)(v52 + 4472), v137, 1u);
      *(_QWORD *)storageResolvePtr(v168, v136, 8uLL, 1) = v135;
      v131 = ++v132;
      v45 = v177;
      if (v49 <= v132)
        goto LABEL_158;
    }
    v156 = __si_assert_copy_extra_268();
    v157 = v156;
    v158 = "";
    if (v156)
      v158 = v156;
    __message_assert("%s:%u: failed assertion '%s' %s write invalid offset %llu", "TermIdStore.h", 97, "offset <= OFFSET_VALUE_MASK", v158, v135);
    v155 = v157;
LABEL_173:
    free(v155);
    if (__valid_fs(-1))
      v159 = 2989;
    else
      v159 = 3072;
    *(_DWORD *)v159 = -559038737;
    abort();
  }
LABEL_158:
  v143 = *__error();
  v144 = _SILogForLogForCategory(10);
  v145 = 2 * (dword_1EF19FCB4 < 4);
  if (os_log_type_enabled(v144, v145))
  {
    v146 = CFAbsoluteTimeGetCurrent() - v130;
    *(_DWORD *)buf = 134217984;
    *(double *)&buf[4] = v146;
    _os_log_impl(&dword_1B8270000, v144, v145, "update term id offsets: %f", buf, 0xCu);
  }
  *__error() = v143;
  v147 = v195;
  free(v193[0]);
  free(v175);
  return v147;
}

unsigned int *packContextAppend(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int *result;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  char *v23;
  char *v24;
  const char *v25;
  char *v26;
  const char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  const char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  uint8_t buf[4];
  int v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 12);
  result = *(unsigned int **)a1;
  if (v4 >= v5)
  {
    v13 = 2 * v5;
    if (!v5)
      v13 = 1024;
    *(_DWORD *)(a1 + 12) = v13;
    result = (unsigned int *)malloc_type_realloc(result, 8 * v13, 0x100004000313F17uLL);
    *(_QWORD *)a1 = result;
    v4 = *(_DWORD *)(a1 + 8);
    if (!v4)
    {
LABEL_4:
      *(_DWORD *)(a1 + 8) = v4 + 1;
      result[v4] = a2;
      v9 = *(_DWORD *)(a1 + 8);
      if (v9 < 2)
        return result;
      v10 = result[v9 - 2];
      if (v10 <= result[v9 - 1])
      {
        v23 = __si_assert_copy_extra_5354(*(_DWORD **)(a1 + 80), -1);
        v24 = v23;
        v25 = "";
        if (v23)
          v25 = v23;
        __message_assert("%s:%u: failed assertion '%s' %s expected %d > %d", "CIMerging.c", 4236, "context->count<=1 || context->packbuffer[context->count-2] > context->packbuffer[context->count-1]", v25, *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 8) - 2)), *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 8) - 1)));
      }
      else
      {
        v11 = v9 >= 3;
        v12 = v9 - 3;
        if (!v11 || result[v12] > v10)
          return result;
        v26 = __si_assert_copy_extra_5354(*(_DWORD **)(a1 + 80), -1);
        v24 = v26;
        v27 = "";
        if (v26)
          v27 = v26;
        __message_assert("%s:%u: failed assertion '%s' %s expected %d > %d", "CIMerging.c", 4242, "context->count<=2 || context->packbuffer[context->count-3] > context->packbuffer[context->count-2]", v27, *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 8) - 3)), *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 8) - 2)));
      }
      free(v24);
      if (__valid_fsp(*(_DWORD **)(a1 + 80)))
        v28 = 2989;
      else
        v28 = 3072;
      *(_DWORD *)v28 = -559038737;
      abort();
    }
  }
  else if (!v4)
  {
    goto LABEL_4;
  }
  v7 = v4 - 1;
  v8 = result[v7];
  if (v8 > a2)
    goto LABEL_4;
  if (v8 != a2)
  {
    v14 = v7 & ((int)v7 >> 31);
    while (1)
    {
      v15 = v7;
      if ((int)v7 < 1)
        break;
      --v7;
      v16 = result[v15 - 1];
      if (v16 >= a2)
      {
        if (v16 == a2)
          return result;
        v14 = v15;
        break;
      }
    }
    v17 = *__error();
    v18 = _SILogForLogForCategory(10);
    v19 = 2 * (dword_1EF19FCB4 < 4);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)buf = 67109376;
      v38 = v14;
      v39 = 1024;
      v40 = v20;
      _os_log_impl(&dword_1B8270000, v18, v19, "Had to take slow path, items out of order. Inserted at index %d of %d", buf, 0xEu);
    }
    *__error() = v17;
    v21 = v15 << 32;
    result = (unsigned int *)memmove((void *)(*(_QWORD *)a1 + 4 * (int)v15 + 4), (const void *)(*(_QWORD *)a1 + 4 * (int)v15), 4 * (*(_DWORD *)(a1 + 8) - v14));
    v22 = *(unsigned int **)a1;
    *(_DWORD *)(*(_QWORD *)a1 + 4 * (int)v15) = a2;
    if (v14 && *v22 <= a2)
    {
      v33 = __si_assert_copy_extra_5354(*(_DWORD **)(a1 + 80), -1);
      v34 = v33;
      v35 = "";
      if (v33)
        v35 = v33;
      __message_assert("%s:%u: failed assertion '%s' %s expected %d > %d", "CIMerging.c", 4219, "i==0 || context->packbuffer[i-i] > context->packbuffer[i]", v35, *(_DWORD *)(*(_QWORD *)a1 + ((v21 - 0x100000000) >> 30)), *(_DWORD *)(*(_QWORD *)a1 + 4 * (int)v15));
      free(v34);
      if (__valid_fsp(*(_DWORD **)(a1 + 80)))
        v36 = 2989;
      else
        v36 = 3072;
      *(_DWORD *)v36 = -559038737;
      abort();
    }
    if (*(unsigned int *)((char *)v22 + ((v21 + 0x100000000) >> 30)) >= a2)
    {
      v29 = __si_assert_copy_extra_5354(*(_DWORD **)(a1 + 80), -1);
      v30 = v29;
      v31 = "";
      if (v29)
        v31 = v29;
      __message_assert("%s:%u: failed assertion '%s' %s expected %d > %d", "CIMerging.c", 4225, "context->packbuffer[i] > context->packbuffer[i+1]", v31, *(_DWORD *)(*(_QWORD *)a1 + 4 * (int)v15), *(_DWORD *)(*(_QWORD *)a1 + 4 * ((v21 + 0x100000000) >> 32)));
      free(v30);
      if (__valid_fsp(*(_DWORD **)(a1 + 80)))
        v32 = 2989;
      else
        v32 = 3072;
      *(_DWORD *)v32 = -559038737;
      abort();
    }
    ++*(_DWORD *)(a1 + 8);
  }
  return result;
}

uint64_t packContextFinalize(uint64_t a1)
{
  uint64_t *v1;
  _DWORD **v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _DWORD **v8;
  uint64_t *v9;
  size_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  unint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64x2_t v36;
  int32x2_t v37;
  _BYTE *v38;
  uint64x2_t v39;
  unint64_t v40;
  int32x2_t v41;
  char v42;
  uint64_t v43;
  uint64x2_t v44;
  int16x8_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64x2_t v48;
  int16x8_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE v55[8192];
  uint64_t v56;

  v1 = (uint64_t *)MEMORY[0x1E0C80A78](a1);
  v5 = v3;
  v7 = v6;
  v8 = v2;
  v9 = v1;
  v56 = *MEMORY[0x1E0C80C00];
  v10 = *((unsigned int *)v2 + 2);
  if (v10 >= 2)
  {
    v1[2] = 20;
    goto LABEL_6;
  }
  v11 = v7[1];
  if (v11)
  {
    v1[2] = 20;
    if (!(_DWORD)v10)
      goto LABEL_7;
    v10 = 1;
LABEL_6:
    packPostingChunks((uint64_t)v1, *v2, v10, (uint64_t)(v2 + 4));
    v11 = v7[1];
    if (!v11)
    {
LABEL_35:
      v26 = *v9;
      v27 = *((_DWORD *)v9 + 4) - 20;
      v28 = 20;
LABEL_36:
      v29 = packRunHeadR(v26, v28, v5, v27);
      goto LABEL_37;
    }
LABEL_7:
    v12 = (unint64_t *)v55;
    bzero(v55, 0x2000uLL);
    if (v11 >= 1024)
    {
      v12 = (unint64_t *)malloc_type_malloc(8 * v11 + 8, 0x100004000313F17uLL);
      v11 = v7[1];
    }
    v13 = v7[2];
    v14 = v7[3];
    v15 = v13 - v11 + v14;
    v16 = v12;
    if (v14 >= 1)
    {
      v17 = (int *)(*v7 + 8);
      v18 = v7[3];
      v16 = v12;
      do
      {
        if (*v17 >= 1)
          *v16++ = *((_QWORD *)v17 - 1);
        v17 += 4;
        --v18;
      }
      while (v18);
    }
    if (v15 < v13)
    {
      v19 = v11 - v14;
      v20 = (int *)(*v7 + 16 * v15 + 8);
      do
      {
        if (*v20 >= 1)
          *v16++ = *((_QWORD *)v20 - 1);
        v20 += 4;
        --v19;
      }
      while (v19);
    }
    *v16 = 0;
    if (*v12)
    {
      packPostingChunkUpdatesWithType(v9, v12, 1u);
      v13 = v7[2];
      v14 = v7[3];
      v15 = v13 - v7[1] + v14;
    }
    v21 = v12;
    if (v14 >= 1)
    {
      v22 = *v7 + 8;
      v21 = v12;
      do
      {
        if ((*(_BYTE *)(v22 + 3) & 0x80) != 0)
          *v21++ = *(_QWORD *)(v22 - 8);
        v22 += 16;
        --v14;
      }
      while (v14);
    }
    v23 = v13 <= v15;
    v24 = v13 - v15;
    if (!v23)
    {
      v25 = *v7 + 16 * v15 + 8;
      do
      {
        if ((*(_BYTE *)(v25 + 3) & 0x80) != 0)
          *v21++ = *(_QWORD *)(v25 - 8);
        v25 += 16;
        --v24;
      }
      while (v24);
    }
    *v21 = 0;
    if (*v12)
      packPostingChunkUpdatesWithType(v9, v12, 2u);
    if (v12 != (unint64_t *)v55)
      free(v12);
    goto LABEL_35;
  }
  v29 = v1[2];
  if ((_DWORD)v10 != 1)
  {
    if (!v4)
      goto LABEL_37;
    packPostingChunks((uint64_t)v1, *v2, 0, (uint64_t)(v2 + 4));
    v26 = *v9;
    v27 = *((_DWORD *)v9 + 4) - 20;
    v28 = v29;
    goto LABEL_36;
  }
  v31 = **v2;
  v32 = *v1;
  v33 = 2 * v3;
  if ((v3 >> 31))
  {
    if ((v33 & 0x8000000000000000) != 0)
    {
      v39 = (uint64x2_t)vdupq_n_s64(v33);
      v40 = HIBYTE(v33);
      v41 = (int32x2_t)__PAIR64__(v33 >> 7, v33);
      v33 = v32 + v29;
      *(int8x8_t *)v33 = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v41, (int64x2_t)vshlq_u64(v39, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v39, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v39, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
      v35 = v29 + 9;
      *(_BYTE *)(v33 + 8) = v40 | 0x80;
      LOBYTE(v33) = 1;
    }
    else if ((v33 & 0x7F00000000000000) != 0)
    {
      v36 = (uint64x2_t)vdupq_n_s64(v33);
      v37.i32[0] = 2 * v3;
      v35 = v29 + 8;
      v37.i32[1] = v33 >> 7;
      *(int8x8_t *)(v32 + v29) = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v37, (int64x2_t)vshlq_u64(v36, (uint64x2_t)xmmword_1B8631B60)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v36, (uint64x2_t)xmmword_1B8631B70), (int32x4_t)vshlq_u64(v36, (uint64x2_t)xmmword_1B8631B80)))), (int8x8_t)0x8080808080808080);
      v33 = (v33 & 0x7F00000000000000) >> 56;
    }
    else
    {
      v42 = v33 | 0x80;
      if ((v33 & 0xFE000000000000) != 0)
      {
        v43 = v32 + v29;
        *(_BYTE *)v43 = v42;
        v44 = (uint64x2_t)vdupq_n_s64(v33);
        v45 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v44, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v44, (uint64x2_t)xmmword_1B8631B90));
        v45.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v45) | 0x80008000800080;
        *(_DWORD *)(v43 + 1) = vmovn_s16(v45).u32[0];
        *(_BYTE *)(v43 + 5) = (v33 >> 35) | 0x80;
        v35 = v29 + 7;
        *(_BYTE *)(v43 + 6) = (v33 >> 42) | 0x80;
        v33 = (v33 & 0xFE000000000000) >> 49;
      }
      else
      {
        v47 = v32 + v29;
        *(_BYTE *)v47 = v42;
        v48 = (uint64x2_t)vdupq_n_s64(v33);
        v35 = v29 + 5;
        v49 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v48, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v48, (uint64x2_t)xmmword_1B8631B90));
        v49.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v49) | 0x80008000800080;
        *(_DWORD *)(v47 + 1) = vmovn_s16(v49).u32[0];
        if ((v33 & 0x1FC0000000000) != 0)
        {
          *(_BYTE *)(v32 + v35) = (v33 >> 35) | 0x80;
          v35 = v29 + 6;
          v33 = (v33 & 0x1FC0000000000) >> 42;
        }
        else
        {
          v33 = (v33 >> 35) & 0x7F;
        }
      }
    }
  }
  else if ((v33 & 0x7F0000000) != 0)
  {
    v34 = (_BYTE *)(v32 + v29);
    *v34 = v33 | 0x80;
    v34[1] = (v33 >> 7) | 0x80;
    v34[2] = (v33 >> 14) | 0x80;
    v35 = v29 + 4;
    v34[3] = (v33 >> 21) | 0x80;
    v33 = (v33 & 0x7F0000000) >> 28;
  }
  else if ((v33 & 0xFE00000) != 0)
  {
    v38 = (_BYTE *)(v32 + v29);
    *v38 = v33 | 0x80;
    v38[1] = (v33 >> 7) | 0x80;
    v35 = v29 + 3;
    v38[2] = (v33 >> 14) | 0x80;
    v33 = (v33 & 0xFE00000) >> 21;
  }
  else if ((v33 & 0x1FC000) != 0)
  {
    v46 = (_BYTE *)(v32 + v29);
    *v46 = v33 | 0x80;
    v35 = v29 + 2;
    v46[1] = (v33 >> 7) | 0x80;
    v33 = (v33 & 0x1FC000) >> 14;
  }
  else if ((v33 & 0x3F80) != 0)
  {
    v35 = v29 + 1;
    *(_BYTE *)(v32 + v29) = v33 | 0x80;
    v33 = (v33 & 0x3F80) >> 7;
  }
  else
  {
    v35 = v1[2];
  }
  *(_BYTE *)(v32 + v35) = v33;
  v50 = v35 + 1;
  v51 = 2 * v31;
  LOBYTE(v52) = (2 * v31) | 1;
  if (((v31 >> 27) & 0xF) != 0)
  {
    *(_BYTE *)(v32 + v50) = (2 * v31) | 0x81;
    v54 = (_BYTE *)(v35 + v32);
    v54[2] = (v31 >> 6) | 0x80;
    v54[3] = (v31 >> 13) | 0x80;
    v50 = v35 + 5;
    v54[4] = (v31 >> 20) | 0x80;
    v52 = v51 >> 28;
  }
  else if ((v51 & 0xFE00000) != 0)
  {
    *(_BYTE *)(v32 + v50) = (2 * v31) | 0x81;
    v53 = v35 + v32;
    *(_BYTE *)(v53 + 2) = (v31 >> 6) | 0x80;
    v50 = v35 + 4;
    *(_BYTE *)(v53 + 3) = (v31 >> 13) | 0x80;
    v52 = (v51 & 0xFE00000) >> 21;
  }
  else if ((v51 & 0x1FC000) != 0)
  {
    *(_BYTE *)(v32 + v50) = (2 * v31) | 0x81;
    v50 = v35 + 3;
    *(_BYTE *)(v35 + v32 + 2) = (v31 >> 6) | 0x80;
    v52 = (v51 & 0x1FC000) >> 14;
  }
  else if ((v51 & 0x3F80) != 0)
  {
    *(_BYTE *)(v32 + v50) = (2 * v31) | 0x81;
    v50 = v35 + 2;
    v52 = (unsigned __int16)(v51 & 0x3F80) >> 7;
  }
  *(_BYTE *)(v32 + v50) = v52;
  v1[2] = v50 + 1;
LABEL_37:
  v7[1] = 0;
  v7[3] = 0;
  *((_DWORD *)v8 + 2) = 0;
  *((_DWORD *)v8 + 6) = 0;
  v8[2] = 0;
  v8[10] = 0;
  return v29;
}

uint64_t packRunHeadR(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64x2_t v13;
  int16x8_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64x2_t v18;
  uint64_t v19;
  uint64x2_t v20;
  int16x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64x2_t v24;
  int16x8_t v25;
  unint64_t v26;
  uint64x2_t v27;
  int16x8_t v28;
  uint64_t v29;

  if (a4 >> 28)
  {
    v6 = a2 + a1;
    *(_BYTE *)(v6 - 1) = a4 >> 28;
    *(_BYTE *)(v6 - 2) = (a4 >> 21) | 0x80;
    *(_BYTE *)(v6 - 3) = (a4 >> 14) | 0x80;
    *(_BYTE *)(v6 - 4) = (a4 >> 7) | 0x80;
    LOBYTE(a4) = a4 | 0x80;
    v5 = -5;
  }
  else if ((a4 & 0xFE00000) != 0)
  {
    v4 = a2 + a1;
    *(_BYTE *)(v4 - 1) = (a4 & 0xFE00000) >> 21;
    *(_BYTE *)(v4 - 2) = (a4 >> 14) | 0x80;
    *(_BYTE *)(v4 - 3) = (a4 >> 7) | 0x80;
    LOBYTE(a4) = a4 | 0x80;
    v5 = -4;
  }
  else if ((a4 & 0x1FC000) != 0)
  {
    v15 = a2 + a1;
    *(_BYTE *)(v15 - 1) = (a4 & 0x1FC000) >> 14;
    *(_BYTE *)(v15 - 2) = (a4 >> 7) | 0x80;
    LOBYTE(a4) = a4 | 0x80;
    v5 = -3;
  }
  else if ((a4 & 0x3F80) != 0)
  {
    *(_BYTE *)(a2 + a1 - 1) = (unsigned __int16)(a4 & 0x3F80) >> 7;
    LOBYTE(a4) = a4 | 0x80;
    v5 = -2;
  }
  else
  {
    v5 = -1;
  }
  v7 = v5 + a2;
  *(_BYTE *)(a1 + v7) = a4;
  v8 = 2 * a3;
  v9 = (2 * a3) | 1;
  if ((a3 >> 31))
  {
    if (((2 * a3) & 0x8000000000000000) != 0)
    {
      v17 = v7 + a1;
      *(_BYTE *)(v17 - 1) = (a3 & 0x4000000000000000) != 0;
      v18 = (uint64x2_t)vdupq_n_s64(v8);
      *(int8x8_t *)(v17 - 9) = vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1B8631B90)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1B8631CB0), (int32x4_t)vshlq_u64(v18, (uint64x2_t)xmmword_1B8631CA0)))), (int8x8_t)0x8080808080808080);
      v9 = (2 * a3) | 0x81;
      v11 = -10;
    }
    else if ((v8 & 0x7F00000000000000) != 0)
    {
      v12 = v7 + a1;
      *(_BYTE *)(v12 - 1) = HIBYTE(v8) & 0x7F;
      *(_BYTE *)(v12 - 2) = (v8 >> 49) | 0x80;
      *(_BYTE *)(v12 - 3) = (v8 >> 42) | 0x80;
      *(_BYTE *)(v12 - 4) = (v8 >> 35) | 0x80;
      v13 = (uint64x2_t)vdupq_n_s64(v8);
      v14 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v13, (uint64x2_t)xmmword_1B8631B90));
      v14.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v14) | 0x80008000800080;
      *(_DWORD *)(v12 - 8) = vmovn_s16(v14).u32[0];
      v9 = (2 * a3) | 0x81;
      v11 = -9;
    }
    else if ((v8 & 0xFE000000000000) != 0)
    {
      v19 = v7 + a1;
      *(_BYTE *)(v19 - 1) = (v8 & 0xFE000000000000) >> 49;
      *(_BYTE *)(v19 - 2) = (v8 >> 42) | 0x80;
      *(_BYTE *)(v19 - 3) = (v8 >> 35) | 0x80;
      v20 = (uint64x2_t)vdupq_n_s64(v8);
      v21 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v20, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v20, (uint64x2_t)xmmword_1B8631B90));
      v21.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v21) | 0x80008000800080;
      *(_DWORD *)(v19 - 7) = vmovn_s16(v21).u32[0];
      v9 = (2 * a3) | 0x81;
      v11 = -8;
    }
    else
    {
      v23 = v7 + a1;
      if ((v8 & 0x1FC0000000000) != 0)
      {
        *(_BYTE *)(v23 - 1) = (v8 & 0x1FC0000000000) >> 42;
        *(_BYTE *)(v23 - 2) = (v8 >> 35) | 0x80;
        v24 = (uint64x2_t)vdupq_n_s64(v8);
        v25 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v24, (uint64x2_t)xmmword_1B8631B90));
        v25.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v25) | 0x80008000800080;
        *(_DWORD *)(v23 - 6) = vmovn_s16(v25).u32[0];
        v9 = (2 * a3) | 0x81;
        v11 = -7;
      }
      else
      {
        *(_BYTE *)(v23 - 1) = (v8 >> 35) & 0x7F;
        v27 = (uint64x2_t)vdupq_n_s64(v8);
        v28 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v27, (uint64x2_t)xmmword_1B8631BA0), (int32x4_t)vshlq_u64(v27, (uint64x2_t)xmmword_1B8631B90));
        v28.i64[0] = *(_QWORD *)&vmovn_s32((int32x4_t)v28) | 0x80008000800080;
        *(_DWORD *)(v23 - 5) = vmovn_s16(v28).u32[0];
        v9 = (2 * a3) | 0x81;
        v11 = -6;
      }
    }
  }
  else if ((v8 & 0x7F0000000) != 0)
  {
    v10 = v7 + a1;
    *(_BYTE *)(v10 - 1) = (v8 & 0x7F0000000) >> 28;
    *(_BYTE *)(v10 - 2) = (v8 >> 21) | 0x80;
    *(_BYTE *)(v10 - 3) = (v8 >> 14) | 0x80;
    *(_BYTE *)(v10 - 4) = (v8 >> 7) | 0x80;
    v9 = (2 * a3) | 0x81;
    v11 = -5;
  }
  else if ((v8 & 0xFE00000) != 0)
  {
    v16 = v7 + a1;
    *(_BYTE *)(v16 - 1) = (v8 & 0xFE00000) >> 21;
    *(_BYTE *)(v16 - 2) = (v8 >> 14) | 0x80;
    *(_BYTE *)(v16 - 3) = (v8 >> 7) | 0x80;
    v9 = (2 * a3) | 0x81;
    v11 = -4;
  }
  else if ((v8 & 0x1FC000) != 0)
  {
    v22 = v7 + a1;
    *(_BYTE *)(v22 - 1) = (v8 & 0x1FC000) >> 14;
    *(_BYTE *)(v22 - 2) = (v8 >> 7) | 0x80;
    v9 = (2 * a3) | 0x81;
    v11 = -3;
  }
  else
  {
    v26 = v8 & 0x3F80;
    if (v26)
    {
      *(_BYTE *)(v7 + a1 - 1) = v26 >> 7;
      v9 = (2 * a3) | 0x81;
      v11 = -2;
    }
    else
    {
      v11 = -1;
    }
  }
  v29 = v7 + v11;
  *(_BYTE *)(a1 + v29) = v9;
  return v29;
}

BOOL merge_checkAgainstUpdates1(uint64_t a1, unint64_t **a2, unsigned int a3, uint64_t a4)
{
  int v4;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  unint64_t v20;
  _BOOL8 result;

  if (!a2[1])
    return 0;
  v4 = a4;
  v7 = a4 + a3;
  checkChangeHolderIntegrity((uint64_t)a2);
  v8 = (uint64_t)a2[3];
  if (v8 >= 2)
  {
    v9 = a2[1];
    if (v9)
    {
      memmove(&(*a2)[2 * ((char *)a2[2] - (char *)v9) + 2], *a2 + 2, 16 * v8 - 16);
      a2[3] = (unint64_t *)1;
    }
  }
  while (1)
  {
    v19 = (int *)*a2;
    v20 = **a2;
    if (v7 >= v20)
    {
      checkChangeHolderIntegrity((uint64_t)a2);
      return a2[1] != 0;
    }
    v10 = v20 - v4;
    v11 = (v20 - v4);
    v12 = *(unsigned int *)(a1 + 24);
    if (v19[2] >= 1 && v11 < v12)
    {
      v15 = *(_QWORD *)(a1 + 16);
      if (!v15)
        goto LABEL_25;
      v16 = *(_QWORD *)(v15 + 16);
      if (*(_BYTE *)v15)
      {
        if ((CIIndexSetHasIndex(v16, v10) & 1) != 0)
        {
          v17 = *(_QWORD *)(a1 + 16);
          if (v17)
          {
            if (*(_BYTE *)v17)
              v10 += *(_DWORD *)(v17 + 8);
            else
              v10 = *(_DWORD *)(*(_QWORD *)(v17 + 16) + 4 * v11);
          }
LABEL_25:
          packContextAppend(a1, v10);
          *(_QWORD *)v19 = 0;
          goto LABEL_26;
        }
        v12 = *(unsigned int *)(a1 + 24);
      }
      else
      {
        v10 = *(_DWORD *)(v16 + 4 * v11);
        if (v10)
          goto LABEL_25;
      }
    }
    if (v11 < v12 && v19[2] < 0)
    {
      v14 = *(_QWORD *)(a1 + 16);
      if (v14)
      {
        if (*(_BYTE *)v14)
          CIIndexSetHasIndex(*(_QWORD *)(v14 + 16), *v19 - v4);
      }
    }
LABEL_26:
    v18 = (uint64_t)a2[1] - 1;
    a2[1] = (unint64_t *)v18;
    if (!v18)
      break;
    *(_OWORD *)*a2 = *(_OWORD *)&(*a2)[2 * ((_QWORD)a2[2] - v18)];
  }
  result = 0;
  a2[3] = 0;
  return result;
}

uint64_t packPostingChunkInclude(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int *a5)
{
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  size_t v17;
  _BYTE *v18;

  v10 = *a5;
  v11 = *(unsigned int *)(a2 + 4 * v10);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 + 10 > v12)
  {
    do
      v12 *= 2;
    while (v12 < v13 + 10);
    *(_QWORD *)(a1 + 8) = v12;
    v14 = malloc_type_realloc(*(void **)a1, v12, 0xBCA72133uLL);
    *(_QWORD *)a1 = v14;
    v13 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v14 = *(void **)a1;
  }
  result = writeVInt64((uint64_t)v14, v13, v11);
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = v11;
  v16 = (v10 + 1);
  if (v16 >= a4)
  {
    a4 = v10 + 1;
  }
  else
  {
    while (*(unsigned __int8 *)(a3 + v16) - 4 >= 8)
    {
      packRelativeVDocID(a1, *(unsigned int *)(a2 + 4 * v16++));
      if (a4 == v16)
        goto LABEL_9;
    }
    a4 = v16;
LABEL_9:
    result = *(_QWORD *)(a1 + 16);
  }
  v17 = *(_QWORD *)(a1 + 8);
  if (result + 10 > v17)
  {
    do
      v17 *= 2;
    while (v17 < result + 10);
    *(_QWORD *)(a1 + 8) = v17;
    v18 = malloc_type_realloc(*(void **)a1, v17, 0xBCA72133uLL);
    *(_QWORD *)a1 = v18;
    result = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v18 = *(_BYTE **)a1;
  }
  v18[result] = 0;
  *(_QWORD *)(a1 + 16) = result + 1;
  *(_QWORD *)(a1 + 24) = 0;
  *a5 = a4;
  return result;
}

uint64_t packRelativeVDocID(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t result;
  char *v9;
  char *v10;
  const char *v11;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 <= a2)
  {
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 570, "rb->current > docID", v11);
    free(v10);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 + 10 > v6)
  {
    do
      v6 *= 2;
    while (v6 < v5 + 10);
    *(_QWORD *)(a1 + 8) = v6;
    v7 = malloc_type_realloc(*(void **)a1, v6, 0xBCA72133uLL);
    *(_QWORD *)a1 = v7;
    v5 = *(_QWORD *)(a1 + 16);
    v2 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v7 = *(void **)a1;
  }
  result = writeVInt64((uint64_t)v7, v5, v2 - a2);
  *(_QWORD *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = a2;
  return result;
}

void packPostingChunks(uint64_t a1, _DWORD *a2, size_t size, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  _BOOL4 v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int i;
  uint64_t v51;
  char *v52;
  char *v53;
  const char *v54;
  unsigned __int8 *v55;
  unsigned int v58[2];
  unsigned int v59;
  uint64_t v60;

  v4 = a4;
  v5 = size;
  v7 = a1;
  v60 = *MEMORY[0x1E0C80C00];
  if ((_DWORD)size)
  {
    if (a4)
    {
      v8 = *(unsigned __int8 **)(a4 + 32);
      if (*(_DWORD *)(a4 + 40) < size)
      {
        v9 = (unsigned __int8 *)malloc_type_realloc(*(void **)(a4 + 32), size, 0x100004077774924uLL);
        *(_QWORD *)(v4 + 32) = v9;
        if (!v9)
        {
          v52 = __si_assert_copy_extra_268();
          v53 = v52;
          v54 = "";
          if (v52)
            v54 = v52;
          __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 454, "packCtx->chunkChanges", v54);
          free(v53);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        v8 = v9;
        *(_DWORD *)(v4 + 40) = v5;
      }
      bzero(v8, v5);
    }
    else
    {
      v8 = (unsigned __int8 *)malloc_type_calloc(size, 1uLL, 0x100004077774924uLL);
    }
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = v5 - 1;
    v20 = a2[v19];
    if (*a2 < 0x200000u)
      v21 = 3;
    else
      v21 = 4;
    if (*a2 >> 28)
      v22 = 5;
    else
      v22 = v21;
    if (*a2 < 0x80u)
      v23 = 1;
    else
      v23 = 2;
    if (*a2 >> 14)
      v23 = v22;
    v24 = 16 * v23;
    v25 = 8 * v23 + 8;
    v26 = (2 * v23) | 1;
    v27 = v5 - 2;
    v55 = v8;
    v28 = &v8[v19];
    v29 = a2[v19];
    v30 = v5;
    do
    {
      v31 = a2[v19 + v12];
      v32 = v19 + v12;
      if ((_DWORD)v19 + (_DWORD)v12)
        v33 = a2[v27 + v12] + ~v31;
      else
        v33 = 0;
      v34 = v31 - v20 + 1;
      v35 = v25 + v14 - 8 * v13;
      v36 = v16 + v31;
      v37 = v15 + v24 + v34;
      v58[0] = v35;
      v58[1] = v37;
      v59 = v17 + 8 + 8 * (v26 + v12 + v16 + v31 - v29);
      if (v37 <= v59)
        v38 = 1;
      else
        v38 = 2;
      if (v35 <= v37)
        v39 = 2 * (v35 > v59);
      else
        v39 = v38;
      v40 = v34 + v15 + v33;
      v41 = v17 + 8 + 8 * (v12 + v36 + v33 - v29);
      v42 = v58[v39];
      v43 = v42 + 8;
      v44 = v41 > v42 + 8;
      v45 = v42 + 4;
      v46 = (v42 + 7) & 0xFFFFFFF8;
      v47 = 3;
      if (v41 <= v43)
        v47 = 1;
      v48 = 2 * v44;
      if (v39)
      {
        v14 = v46;
        v13 = v18 + 1;
      }
      if (v40 <= v45)
        v47 = v48;
      v28[v12] = kPostingChunkChangeHintForFormat[4 * v39 + v47];
      if (v40 > v45)
      {
        v15 = v46;
        v20 = 0;
      }
      if (v32)
      {
        v5 = v30;
        if (v40 > v45)
        {
          v20 = a2[v27 + v12];
          v15 = v46;
        }
      }
      else
      {
        v5 = v30;
      }
      ++v18;
      if (v41 > v43)
      {
        v17 = v46;
        v16 = v18;
        v29 = 0;
      }
      if (v32 && v41 > v43)
      {
        v29 = a2[v27 + v12];
        v17 = v46;
        v16 = v18;
      }
      v25 += 8;
      --v12;
    }
    while (v5 != v18);
    v58[0] = 0;
    v10 = v55;
    v49 = *v55;
    if ((v49 - 4) < 4)
    {
      v11 = 1;
      v7 = a1;
      v4 = a4;
    }
    else
    {
      v7 = a1;
      v4 = a4;
      if ((v49 - 8) >= 4)
        v11 = 0;
      else
        v11 = 2;
    }
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v58[0] = 0;
  }
  packPostingChunk(v7, v11, (uint64_t)a2, (uint64_t)v10, v5, v58);
  for (i = v58[0]; v58[0] < v5; v11 = v51)
  {
    v51 = 1;
    switch(v10[i])
    {
      case 1:
        v51 = v11;
        if ((_DWORD)v11 == 1)
          goto LABEL_62;
        break;
      case 2:
        v51 = v11;
        if ((_DWORD)v11 == 2)
          goto LABEL_62;
        break;
      case 3:
LABEL_62:
        v51 = 0;
        break;
      case 4:
        v51 = v11;
        if (!(_DWORD)v11)
          v51 = 1;
        break;
      case 5:
        if ((_DWORD)v11 == 2)
          goto LABEL_55;
        break;
      case 6:
      case 7:
        break;
      case 8:
        v51 = v11;
        if (!(_DWORD)v11)
          goto LABEL_55;
        break;
      case 9:
        v51 = 2;
        break;
      case 0xA:
        if ((_DWORD)v11 != 1)
          goto LABEL_55;
        break;
      case 0xB:
LABEL_55:
        v51 = 2;
        break;
      default:
        v51 = v11;
        break;
    }
    packPostingChunk(v7, v51, (uint64_t)a2, (uint64_t)v10, v5, v58);
    i = v58[0];
  }
  if (!v4)
    free(v10);
}

void packPostingChunk(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int *a6)
{
  uint64_t v6;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned int v23;
  int v24;
  unsigned int v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  size_t v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  size_t v42;
  void *v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  size_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  size_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  size_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int *v65;
  int v66;
  size_t v67;
  _BYTE *v68;
  char *v69;
  char *v70;
  const char *v71;
  char *v72;
  const char *v73;
  char *v74;
  char *v75;
  const char *v76;
  uint64_t v77;
  char *v78;
  const char *v79;
  char *v80;
  const char *v81;
  char *v82;
  const char *v83;
  char *v84;
  const char *v85;

  v6 = *a6;
  if (v6 >= a5)
    return;
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      v19 = *(_DWORD *)(a3 + 4 * v6);
      v20 = v6 + 1;
      if ((int)v6 + 1 >= a5)
      {
        *a6 = v20;
        v26 = 1;
      }
      else
      {
        v21 = a5 - 1;
        v22 = (unsigned __int8 *)(a4 + v20);
        do
        {
          v23 = *v22++;
          v24 = (1 << v23) & 0xAAA;
          if (v23 <= 0xB && v24 != 0)
          {
            v21 = v20 - 1;
            goto LABEL_47;
          }
          ++v20;
        }
        while (a5 != v20);
        v20 = a5;
LABEL_47:
        v44 = *(_DWORD *)(a3 + 4 * v21);
        *a6 = v20;
        v45 = v19 + 1;
        v26 = v45 - v44;
        if (v45 == v44)
        {
          v84 = __si_assert_copy_extra_268();
          v70 = v84;
          v85 = "";
          if (v84)
            v85 = v84;
          __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 642, "bitVectorCount > 0", v85);
          goto LABEL_71;
        }
        v19 = v44;
      }
      v46 = v19;
      v47 = *(_QWORD *)(a1 + 8);
      v48 = *(_QWORD *)(a1 + 16);
      if (v48 + 10 > v47)
      {
        do
          v47 *= 2;
        while (v47 < v48 + 10);
        *(_QWORD *)(a1 + 8) = v47;
        v49 = malloc_type_realloc(*(void **)a1, v47, 0xBCA72133uLL);
        *(_QWORD *)a1 = v49;
        v48 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v49 = *(void **)a1;
      }
      v50 = writeVInt64((uint64_t)v49, v48, v46);
      *(_QWORD *)(a1 + 16) = v50;
      *(_QWORD *)(a1 + 24) = v46;
      v51 = v46 + v26;
      v52 = *(_QWORD *)(a1 + 8);
      if (v50 + 10 > v52)
      {
        do
          v52 *= 2;
        while (v52 < v50 + 10);
        *(_QWORD *)(a1 + 8) = v52;
        v54 = malloc_type_realloc(*(void **)a1, v52, 0xBCA72133uLL);
        *(_QWORD *)a1 = v54;
        v53 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v53 = v50;
        v54 = *(void **)a1;
      }
      v55 = writeVInt64((uint64_t)v54, v53, v51);
      *(_QWORD *)(a1 + 16) = v55;
      *(_QWORD *)(a1 + 24) = v51;
      v56 = (v26 + 7) >> 3;
      v57 = v55 + (v56 + 4);
      v58 = *(_QWORD *)(a1 + 8);
      if (v57 > v58)
      {
        do
          v58 *= 2;
        while (v58 < v57);
        *(_QWORD *)(a1 + 8) = v58;
        v59 = (char *)malloc_type_realloc(*(void **)a1, v58, 0xBCA72133uLL);
        *(_QWORD *)a1 = v59;
        v55 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        v59 = *(char **)a1;
      }
      bzero(&v59[v55], (v26 + 7) >> 3);
      v60 = *a6;
      v61 = *(_QWORD *)(a1 + 16);
      if (v6 < v60)
      {
        v62 = *(_QWORD *)a1 + v61;
        v63 = *(_DWORD *)(a3 + 4 * v6);
        v64 = v60 - v6;
        v65 = (int *)(a3 + 4 * v6);
        do
        {
          v66 = *v65++;
          *(_BYTE *)(v62 + ((unint64_t)(v63 - v66) >> 3)) |= 1 << ((v63 - v66) & 7);
          --v64;
        }
        while (v64);
        v61 = *(_QWORD *)(a1 + 16);
      }
      *(_QWORD *)(a1 + 16) = v61 + v56;
    }
    else
    {
      packPostingChunkInclude(a1, a3, a4, a5, a6);
    }
    return;
  }
  v10 = *(_DWORD *)(a3 + 4 * v6);
  v11 = v10 + 1;
  v12 = v6 + 1;
  v13 = v6 + 1;
  if ((int)v6 + 1 < a5)
  {
    v14 = a5 - 1;
    v15 = (unsigned __int8 *)(a4 + v12);
    v13 = v6 + 1;
    do
    {
      v16 = *v15++;
      v17 = (1 << v16) & 0xCCC;
      if (v16 <= 0xB && v17 != 0)
      {
        v14 = v13 - 1;
        goto LABEL_24;
      }
      ++v13;
    }
    while (a5 != v13);
    v13 = a5;
LABEL_24:
    v10 = *(_DWORD *)(a3 + 4 * v14);
  }
  v27 = v10;
  v28 = *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(a1 + 16);
  if (v29 + 10 > v28)
  {
    do
      v28 *= 2;
    while (v28 < v29 + 10);
    *(_QWORD *)(a1 + 8) = v28;
    v30 = malloc_type_realloc(*(void **)a1, v28, 0xBCA72133uLL);
    *(_QWORD *)a1 = v30;
    v29 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v30 = *(void **)a1;
  }
  v31 = writeVInt64((uint64_t)v30, v29, v27);
  *(_QWORD *)(a1 + 16) = v31;
  *(_QWORD *)(a1 + 24) = v27;
  v32 = *(_QWORD *)(a1 + 8);
  if (v31 + 10 > v32)
  {
    do
      v32 *= 2;
    while (v32 < v31 + 10);
    *(_QWORD *)(a1 + 8) = v32;
    v34 = malloc_type_realloc(*(void **)a1, v32, 0xBCA72133uLL);
    *(_QWORD *)a1 = v34;
    v33 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v33 = v31;
    v34 = *(void **)a1;
  }
  v35 = writeVInt64((uint64_t)v34, v33, v11);
  *(_QWORD *)(a1 + 16) = v35;
  *(_QWORD *)(a1 + 24) = v11;
  v36 = *(_QWORD *)(a1 + 8);
  if (v35 + 10 > v36)
  {
    do
      v36 *= 2;
    while (v36 < v35 + 10);
    *(_QWORD *)(a1 + 8) = v36;
    v37 = malloc_type_realloc(*(void **)a1, v36, 0xBCA72133uLL);
    *(_QWORD *)a1 = v37;
    v35 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v37 = *(_BYTE **)a1;
  }
  v37[v35] = 0;
  v38 = v35 + 1;
  *(_QWORD *)(a1 + 16) = v35 + 1;
  v39 = *(unsigned int *)(a3 + 4 * v6);
  if (v39 <= v27)
  {
    v80 = __si_assert_copy_extra_268();
    v75 = v80;
    v81 = "";
    if (v80)
      v81 = v80;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 727, "docIDLast > docIDStart", v81);
LABEL_77:
    free(v75);
    if (__valid_fs(-1))
      v77 = 2989;
    else
      v77 = 3072;
    *(_DWORD *)v77 = -559038737;
    abort();
  }
  if (v39 >= v11)
  {
    v82 = __si_assert_copy_extra_268();
    v75 = v82;
    v83 = "";
    if (v82)
      v83 = v82;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 728, "docIDLast < docIDEnd", v83);
    goto LABEL_77;
  }
  if (v12 < v13)
  {
    v12 = v12;
    do
    {
      v40 = *(unsigned int *)(a3 + 4 * v12);
      if (v39 < v40)
      {
        v78 = __si_assert_copy_extra_268();
        v70 = v78;
        v79 = "";
        if (v78)
          v79 = v78;
        __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 732, "docIDLast >= docIDs[i]", v79);
        goto LABEL_71;
      }
      if (--v39 > v40)
      {
        while (v39 < v11)
        {
          if (v39 <= v27)
          {
            v72 = __si_assert_copy_extra_268();
            v70 = v72;
            v73 = "";
            if (v72)
              v73 = v72;
            __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 735, "docIDLast > docIDStart", v73);
            goto LABEL_71;
          }
          v41 = *(_QWORD *)(a1 + 24);
          if (v41 <= v39)
          {
            v74 = __si_assert_copy_extra_268();
            v75 = v74;
            v76 = "";
            if (v74)
              v76 = v74;
            __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 570, "rb->current > docID", v76);
            goto LABEL_77;
          }
          v42 = *(_QWORD *)(a1 + 8);
          if (v38 + 10 > v42)
          {
            do
              v42 *= 2;
            while (v42 < v38 + 10);
            *(_QWORD *)(a1 + 8) = v42;
            v43 = malloc_type_realloc(*(void **)a1, v42, 0xBCA72133uLL);
            *(_QWORD *)a1 = v43;
            v38 = *(_QWORD *)(a1 + 16);
            v41 = *(_QWORD *)(a1 + 24);
          }
          else
          {
            v43 = *(void **)a1;
          }
          v38 = writeVInt64((uint64_t)v43, v38, v41 - v39);
          *(_QWORD *)(a1 + 16) = v38;
          *(_QWORD *)(a1 + 24) = v39--;
          if (v39 <= *(unsigned int *)(a3 + 4 * v12))
            goto LABEL_35;
        }
        v69 = __si_assert_copy_extra_268();
        v70 = v69;
        v71 = "";
        if (v69)
          v71 = v69;
        __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 734, "docIDLast < docIDEnd", v71);
LABEL_71:
        free(v70);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
LABEL_35:
      ++v12;
    }
    while (v12 != v13);
    LODWORD(v12) = v13;
  }
  v67 = *(_QWORD *)(a1 + 8);
  if (v38 + 10 > v67)
  {
    do
      v67 *= 2;
    while (v67 < v38 + 10);
    *(_QWORD *)(a1 + 8) = v67;
    v68 = malloc_type_realloc(*(void **)a1, v67, 0xBCA72133uLL);
    *(_QWORD *)a1 = v68;
    v38 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    v68 = *(_BYTE **)a1;
  }
  v68[v38] = 0;
  *(_QWORD *)(a1 + 16) = v38 + 1;
  *(_QWORD *)(a1 + 24) = 0;
  *a6 = v12;
}

uint64_t qpHash(uint64_t a1)
{
  return db_hash_qps(a1);
}

uint64_t si_lqn_hash(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  if (v3)
    v4 = db_hash_qps(v3);
  else
    v4 = 0;
  v5 = v2 + v1 + v4;
  v6 = HIDWORD(v5) - v5;
  v7 = HIDWORD(v5) - v5 - 8;
  LODWORD(v5) = (v5 - (HIDWORD(v5) - v5) - 1640531527) ^ (v7 << 8);
  v8 = (16 - v6 - v5) ^ (v5 >> 13);
  v9 = (v7 - v5 - v8) ^ (v8 >> 12);
  LODWORD(v5) = (v5 - v8 - v9) ^ (v9 << 16);
  v10 = (v8 - v9 - v5) ^ (v5 >> 5);
  v11 = (v9 - v5 - v10) ^ (v10 >> 3);
  return (v10 - v11 - (((_DWORD)v5 - v10 - v11) ^ (v11 << 10))) ^ (((v5 - v10 - v11) ^ (v11 << 10)) >> 15);
}

uint64_t db_hash_qps(uint64_t a1)
{
  unint64_t v2;
  char *v4;
  size_t v5;
  size_t v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 32);
  if ((v2 & 0xC0000) != 0 && (*(_QWORD *)(a1 + 32) & 0x200) == 0)
  {
    v4 = *(char **)(a1 + 288);
    v5 = 8 * *(int *)(a1 + 40);
  }
  else
  {
    v4 = *(char **)(a1 + 72);
    if (v4)
    {
LABEL_6:
      v5 = strlen(v4);
      goto LABEL_8;
    }
    v15 = *(_DWORD *)(a1 + 24);
    if ((v15 - 11) > 1)
    {
      if (v15 == 15)
      {
        v4 = *(char **)(a1 + 296);
        v16 = *(unsigned int *)(a1 + 60);
        v17 = v16 & 3;
        v18 = (v16 >> 2) & 3;
        if ((_DWORD)v17 == 3 || (_DWORD)v18 == 3)
          v5 = -1;
        else
          v5 = (vector_dimension_vec_sizes_10743[v17] * vector_size_elem_sizes_10742[v18]);
        goto LABEL_8;
      }
    }
    else if (*(_DWORD *)(a1 + 40) == 2)
    {
      v4 = **(char ***)(a1 + 168);
      goto LABEL_6;
    }
    v4 = 0;
    v5 = 0;
  }
LABEL_8:
  v6 = strlen(*(const char **)a1);
  v7 = hash_bytes(*(unsigned __int16 **)a1, v6);
  v8 = (v2 >> 5) & 0x1FFF800 ^ (((v2 & 0xFFFE) + 8) << 16) ^ ((v2 & 0xFFFE) + 8);
  v9 = (WORD2(v2) & 0xFFE2) + v8 + (v8 >> 11);
  v10 = (v2 >> 37) & 0x7FFF800 ^ (v9 << 16);
  v11 = (((v10 ^ v9) + ((v10 ^ v9) >> 11)) ^ (8 * ((v10 ^ v9) + ((v10 ^ v9) >> 11))))
      + ((((v10 ^ v9) + ((v10 ^ v9) >> 11)) ^ (8 * ((v10 ^ v9) + ((v10 ^ v9) >> 11)))) >> 5);
  v12 = (v11 ^ (16 * v11)) + ((v11 ^ (16 * v11)) >> 17);
  v13 = v7 ^ (*(_DWORD *)(a1 + 24) << 24) ^ *(float *)(a1 + 52) ^ *(float *)(a1 + 56) ^ ((v12 ^ (v12 << 25)) + ((v12 ^ (v12 << 25)) >> 6));
  if (v4)
    return hash_bytes((unsigned __int16 *)v4, v5) ^ v13;
  return v13;
}

uint64_t hash_bytes(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;

  v2 = 0;
  if (a1 && a2)
  {
    v3 = a2 & 3;
    if (a2 >= 4)
    {
      v7 = a2 >> 2;
      v8 = (unsigned __int8 *)a1 + 3;
      v4 = a2;
      do
      {
        v9 = *(unsigned __int16 *)(v8 - 3) + v4;
        v10 = ((*v8 << 19) | (*(v8 - 1) << 11)) ^ (v9 << 16);
        v4 = (v10 ^ v9) + ((v10 ^ v9) >> 11);
        v8 += 4;
        --v7;
      }
      while (v7);
      a1 = (unsigned __int16 *)((char *)a1 + (a2 & 0xFFFFFFFFFFFFFFFCLL));
      if (v3 != 1)
      {
LABEL_5:
        if (v3 == 2)
        {
          v4 = ((*a1 + v4) ^ ((*a1 + v4) << 11)) + (((*a1 + v4) ^ ((*a1 + v4) << 11)) >> 17);
        }
        else if (v3 == 3)
        {
          v5 = *a1 + v4;
          v6 = (*((char *)a1 + 2) << 18) ^ (v5 << 16);
          v4 = (v6 ^ v5) + ((v6 ^ v5) >> 11);
        }
        goto LABEL_13;
      }
    }
    else
    {
      v4 = a2;
      if (v3 != 1)
        goto LABEL_5;
    }
    v4 = ((v4 + *(char *)a1) ^ ((v4 + *(char *)a1) << 10)) + (((v4 + *(char *)a1) ^ ((v4 + *(char *)a1) << 10)) >> 1);
LABEL_13:
    v11 = (v4 ^ (8 * v4)) + ((v4 ^ (8 * v4)) >> 5);
    v12 = (v11 ^ (16 * v11)) + ((v11 ^ (16 * v11)) >> 17);
    return (v12 ^ (v12 << 25)) + ((v12 ^ (v12 << 25)) >> 6);
  }
  return v2;
}

uint64_t mergeRangeCompare(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v6;

  v2 = (unint64_t)*(_QWORD *)(a1 + 8) << 6;
  if (HIDWORD(*(_QWORD *)(a2 + 8)))
    v3 = 0;
  else
    v3 = (unint64_t)*(_QWORD *)(a2 + 8) << 6;
  if (HIDWORD(*(_QWORD *)(a1 + 8)))
    v4 = 1;
  else
    v4 = v2 == 0;
  if (v4)
  {
    if (v3)
      return 1;
    v6 = *(_DWORD *)a1 > *(_DWORD *)a2;
  }
  else
  {
    if (!v3)
      return 0xFFFFFFFFLL;
    v6 = v2 > v3;
  }
  if (v6)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

unsigned int *_ContentIndexDocSetRetain(uint64_t a1, unsigned int *a2)
{
  unsigned int *result;
  unsigned int v3;

  result = a2;
  if (a2)
  {
    do
      v3 = __ldaxr(a2);
    while (__stlxr(v3 + 1, a2));
  }
  return result;
}

void __processLeaves_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void (*v14)(_QWORD);
  int v15;
  NSObject *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void (*v31)(_QWORD);
  int v32;
  NSObject *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  _DWORD *v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  NSObject *v41;
  os_log_type_t v42;
  int8x8_t v43;
  int v44;
  int8x8_t v45;
  uint64_t v46;
  int8x8_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD);
  int v54;
  NSObject *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  int v67;
  _BYTE v68[24];
  __int128 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (dword_1EF19FC90 >= 5)
  {
    v54 = *__error();
    v55 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v68 = 134217984;
      *(_QWORD *)&v68[4] = a2;
      _os_log_impl(&dword_1B8270000, v55, OS_LOG_TYPE_DEFAULT, "Processing leaf %ld", v68, 0xCu);
    }
    *__error() = v54;
  }
  makeThreadId();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2);
  *(_QWORD *)v68 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)&v68[8] = 0u;
  v69 = 0u;
  v70 = 0;
  v5 = *(_QWORD *)(v4 + 56);
  if (*(_BYTE *)(v5 + 8))
  {
    do
    {
      v6 = __ldxr(exceptionSequenceNum);
      v7 = v6 + 1;
    }
    while (__stxr(v6 + 1, exceptionSequenceNum));
    v8 = setThreadIdAndInfo(-1, (__int128 *)sIndexExceptionCallbacks, v5, 0, v7);
    v62 = HIDWORD(v8);
    v63 = v8;
    v60 = v10;
    v61 = v9;
    v11 = *(_QWORD *)&threadData[18 * v8 + 2];
    v12 = v11 + 320 * HIDWORD(v8);
    *(_BYTE *)(v12 + 216) = 0;
    v13 = *(_DWORD *)(v12 + 312);
    v14 = *(void (**)(_QWORD))(v12 + 224);
    if (v14)
      v14(*(_QWORD *)(v11 + 320 * HIDWORD(v8) + 288));
    if (_setjmp((int *)v12))
    {
      v15 = *__error();
      v16 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v65 = "processLeaves_block_invoke";
        v66 = 1024;
        v67 = 3025;
        _os_log_error_impl(&dword_1B8270000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v15;
      *(_DWORD *)(v12 + 312) = v13;
      if (__THREAD_SLOT_KEY)
      {
        v17 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v17)
          goto LABEL_48;
      }
      else
      {
        makeThreadId();
        v17 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v17)
          goto LABEL_48;
      }
      v18 = v17;
      if ((unint64_t)v17 < 0x801)
      {
LABEL_12:
        v19 = (uint64_t)v18 - 1;
        v20 = &threadData[18 * ((uint64_t)v18 - 1)];
        v22 = v20[14];
        v21 = v20 + 14;
        if (v22 > v60)
        {
          do
            CIOnThreadCleanUpPop(v19);
          while (*v21 > v60);
        }
        dropThreadId(v63, 1, v7);
        CICleanUpReset(v63, v61);
        goto LABEL_43;
      }
LABEL_48:
      makeThreadId();
      v18 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_12;
    }
    do
    {
      v23 = __ldxr(exceptionSequenceNum);
      v24 = v23 + 1;
    }
    while (__stxr(v23 + 1, exceptionSequenceNum));
    v25 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v24);
    v58 = HIDWORD(v25);
    v59 = v25;
    v56 = v27;
    v57 = v26;
    v28 = *(_QWORD *)&threadData[18 * v25 + 2];
    v29 = v28 + 320 * HIDWORD(v25);
    v30 = *(_DWORD *)(v29 + 312);
    v31 = *(void (**)(_QWORD))(v29 + 224);
    if (v31)
      v31(*(_QWORD *)(v28 + 320 * HIDWORD(v25) + 288));
    if (!_setjmp((int *)v29))
    {
      *(_BYTE *)(v4 + 32) = 0;
      _ContentIndexDocSetIteratorProcessIterHits(v4, *(unsigned __int8 *)(a1 + 68), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 64), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2) + 34), v68);
      if (*(_DWORD *)(a1 + 56) == 1)
      {
        v44 = *(_DWORD *)(v4 + 48);
        if (v44 == 3 || v44 == 8)
        {
          CIIndexSetShrink(*(_DWORD **)(*(_QWORD *)(v4 + 64) + 88), v43);
          v46 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 96);
          if (v46)
          {
            if (*(int *)(v46 + 16) <= -10)
            {
              _CIIndexSetConvertIfArrayIsMuchMoreEfficient((int *)v46, *(_DWORD *)(v46 + 20), *(_DWORD *)(v46 + 24), 0, 0, v45);
              if (*(int *)(v46 + 16) <= -10)
                _CIIndexSetConvertIfInvertedArrayIsMoreEfficient((_DWORD *)v46, 0, v47);
            }
          }
        }
      }
      v48 = *(_QWORD *)&threadData[18 * v59 + 2];
      v49 = v48 + 320 * v58;
      *(_DWORD *)(v49 + 312) = v30;
      v50 = *(void (**)(_QWORD))(v49 + 232);
      if (v50)
        v50(*(_QWORD *)(v48 + 320 * v58 + 288));
      dropThreadId(v59, 0, v24);
      goto LABEL_40;
    }
    v32 = *__error();
    v33 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v65 = "processLeaves_block_invoke";
      v66 = 1024;
      v67 = 3024;
      _os_log_error_impl(&dword_1B8270000, v33, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v32;
    *(_DWORD *)(v29 + 312) = v30;
    if (__THREAD_SLOT_KEY)
    {
      v34 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v34)
        goto LABEL_50;
    }
    else
    {
      makeThreadId();
      v34 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v34)
        goto LABEL_50;
    }
    v35 = v34;
    if ((unint64_t)v34 < 0x801)
    {
LABEL_24:
      v36 = (uint64_t)v35 - 1;
      v37 = &threadData[18 * ((uint64_t)v35 - 1)];
      v39 = v37[14];
      v38 = v37 + 14;
      if (v39 > v56)
      {
        do
          CIOnThreadCleanUpPop(v36);
        while (*v38 > v56);
      }
      dropThreadId(v59, 1, v24);
      CICleanUpReset(v59, v57);
LABEL_40:
      v51 = *(_QWORD *)&threadData[18 * v63 + 2];
      v52 = v51 + 320 * v62;
      *(_DWORD *)(v52 + 312) = v13;
      v53 = *(void (**)(_QWORD))(v52 + 232);
      if (v53)
        v53(*(_QWORD *)(v51 + 320 * v62 + 288));
      dropThreadId(v63, 0, v7);
      goto LABEL_43;
    }
LABEL_50:
    makeThreadId();
    v35 = pthread_getspecific(__THREAD_SLOT_KEY);
    goto LABEL_24;
  }
  v40 = *__error();
  v41 = _SILogForLogForCategory(0);
  v42 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v41, v42))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8270000, v41, v42, "Skipping because index is shut down", buf, 2u);
  }
  *__error() = v40;
LABEL_43:
  CIIndexSetDisposePerThreadCache(v68);
}

uint64_t _CIGetOIDForDocId(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void (*v14)(_QWORD);
  int v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  os_log_type_t v19;
  char *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD);
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a2 - *(_QWORD *)(a1 + 72);
  if (v3 >= *(unsigned int *)(a1 + 60))
    return 0;
  if (!*(_BYTE *)(a1 + 8))
  {
    v17 = *__error();
    v18 = _SILogForLogForCategory(0);
    v19 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v18, v19))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v18, v19, "Skipping because index is shut down", buf, 2u);
    }
    *__error() = v17;
    return 0;
  }
  do
  {
    v6 = __ldxr(exceptionSequenceNum);
    v7 = v6 + 1;
  }
  while (__stxr(v6 + 1, exceptionSequenceNum));
  v8 = setThreadIdAndInfo(-1, (__int128 *)sIndexExceptionCallbacks, a1, 0, v7);
  v30 = HIDWORD(v8);
  v31 = v8;
  v28 = v10;
  v29 = v9;
  v11 = *(_QWORD *)&threadData[18 * v8 + 2];
  v12 = v11 + 320 * HIDWORD(v8);
  *(_BYTE *)(v12 + 216) = 0;
  v13 = *(_DWORD *)(v12 + 312);
  v14 = *(void (**)(_QWORD))(v12 + 224);
  if (v14)
    v14(*(_QWORD *)(v11 + 320 * HIDWORD(v8) + 288));
  if (_setjmp((int *)v12))
  {
    v15 = *__error();
    v16 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v33 = "_CIGetOIDForDocId";
      v34 = 1024;
      v35 = 3024;
      _os_log_error_impl(&dword_1B8270000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v15;
    *(_DWORD *)(v12 + 312) = v13;
    CIOnThreadCleanUpReset(v28);
    dropThreadId(v31, 1, v7);
    CICleanUpReset(v31, v29);
    return 0;
  }
  if (a3)
  {
    v21 = CICleanUpThreadLoc();
    db_read_lock(a1 + 14464);
    CIOnThreadCleanUpPush((uint64_t)v21, (uint64_t)si_rwlock_rdunlock, a1 + 14464);
    v22 = (uint64_t)v21;
  }
  else
  {
    v22 = 0;
  }
  if (*(_BYTE *)(a1 + 37))
    v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14392) + v3);
  else
    v23 = (*(_DWORD *)(*(_QWORD *)(a1 + 14392) + 4 * (v3 / 5uLL)) >> (6 * (v3 % 5))) & 0x3F;
  if ((v23 & 0xFFFFFFDF) == 0)
  {
    v24 = 0;
    if (!a3)
      goto LABEL_23;
    goto LABEL_22;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 14368) + 8 * v3);
  if (a3)
LABEL_22:
    CIOnThreadCleanUpPop(v22);
LABEL_23:
  v25 = *(_QWORD *)&threadData[18 * v31 + 2];
  v26 = v25 + 320 * v30;
  *(_DWORD *)(v26 + 312) = v13;
  v27 = *(void (**)(_QWORD))(v26 + 232);
  if (v27)
    v27(*(_QWORD *)(v25 + 320 * v30 + 288));
  dropThreadId(v31, 0, v7);
  return v24;
}

uint64_t _CIDelete(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void (*v17)(_QWORD);
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  os_log_type_t v22;
  int v24;
  NSObject *v25;
  int v26;
  BOOL v27;
  uint8_t *v28;
  const char *v29;
  char v30;
  pthread_key_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  signed int v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  NSObject *v52;
  os_log_type_t v53;
  unsigned int v55;
  unint64_t v56;
  signed int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  NSObject *v64;
  int v65;
  BOOL v66;
  uint8_t *v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  NSObject *v71;
  int v72;
  pthread_override_s *v73;
  char v74;
  int v75;
  int v76;
  unsigned int *v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  int v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  char *v101;
  char *v102;
  const char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  const char *v107;
  const char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  uint8_t v119[4];
  const char *v120;
  __int16 v121;
  int v122;
  __int16 v123;
  uint8_t *v124;
  __int16 v125;
  uint64_t v126;
  uint8_t buf[4];
  _BYTE v128[30];
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 8))
  {
    v20 = *__error();
    v21 = _SILogForLogForCategory(0);
    v22 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v21, v22))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v21, v22, "Skipping because index is shut down", buf, 2u);
    }
    *__error() = v20;
    return 0;
  }
  v8 = a1 + 14676;
  do
  {
    v9 = __ldxr(exceptionSequenceNum);
    v10 = v9 + 1;
  }
  while (__stxr(v9 + 1, exceptionSequenceNum));
  v11 = setThreadIdAndInfo(-1, (__int128 *)sIndexExceptionCallbacks, a1, 0, v10);
  v117 = HIDWORD(v11);
  v118 = v11;
  v115 = v13;
  v116 = v12;
  v14 = *(_QWORD *)&threadData[18 * v11 + 2];
  v15 = v14 + 320 * HIDWORD(v11);
  *(_BYTE *)(v15 + 216) = 0;
  v16 = *(_DWORD *)(v15 + 312);
  v17 = *(void (**)(_QWORD))(v15 + 224);
  if (v17)
    v17(*(_QWORD *)(v14 + 320 * HIDWORD(v11) + 288));
  if (_setjmp((int *)v15))
  {
    v18 = *__error();
    v19 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v128 = "_CIDelete";
      *(_WORD *)&v128[8] = 1024;
      *(_DWORD *)&v128[10] = 2478;
      _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v18;
    *(_DWORD *)(v15 + 312) = v16;
    CIOnThreadCleanUpReset(v115);
    dropThreadId(v118, 1, v10);
    CICleanUpReset(v118, v116);
    return 0;
  }
  if (dword_1EF19FCB4 >= 5)
  {
    v94 = *__error();
    v95 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v128 = a2;
      *(_WORD *)&v128[4] = 2048;
      *(_QWORD *)&v128[6] = a3;
      _os_log_impl(&dword_1B8270000, v95, OS_LOG_TYPE_DEFAULT, "delete docId: %d oid: %lld", buf, 0x12u);
    }
    *__error() = v94;
  }
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(v8 + 487))
    {
      bzero(buf, 0x400uLL);
      if ((deleteDocument__COUNT__47 & 1) == 0)
      {
        deleteDocument__COUNT__47 = 1;
        v24 = *__error();
        v25 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          v26 = fcntl(*(_DWORD *)(a1 + 56), 50, buf);
          if (buf[0])
            v27 = v26 < 0;
          else
            v27 = 1;
          *(_DWORD *)v119 = 136315906;
          v120 = "deleteDocument";
          v28 = (uint8_t *)"";
          if (!v27)
            v28 = buf;
          v121 = 1024;
          v122 = 4699;
          v123 = 2080;
          v124 = v28;
          v125 = 2080;
          v126 = a1 + 15168;
          v29 = "%s:%d: trying to modify read only index %s/%s";
LABEL_82:
          _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, v29, v119, 0x26u);
          goto LABEL_27;
        }
        goto LABEL_27;
      }
      goto LABEL_28;
    }
    v31 = __THREAD_SLOT_KEY;
    if (!__THREAD_SLOT_KEY)
    {
      makeThreadId();
      v31 = __THREAD_SLOT_KEY;
    }
    v32 = pthread_getspecific(v31);
    if (!v32 || (v33 = v32, (unint64_t)v32 >= 0x801))
    {
      makeThreadId();
      v33 = pthread_getspecific(__THREAD_SLOT_KEY);
    }
    v34 = (uint64_t)v33 - 1;
    HIDWORD(v36) = qos_class_self() - 9;
    LODWORD(v36) = HIDWORD(v36);
    v35 = v36 >> 2;
    if (v35 > 6)
      v37 = 0;
    else
      v37 = dword_1B8630ED0[v35];
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 14464));
    if (*(_QWORD *)(a1 + 14648) || *(_DWORD *)(a1 + 14660) || *(_BYTE *)v8)
      goto LABEL_39;
    if (v37 <= 5)
    {
      if (*(_QWORD *)(a1 + 16 * v37 + 14528))
      {
LABEL_39:
        db_rwlock_wait(a1 + 14464, v37, 2);
LABEL_40:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14464));
        CIOnThreadCleanUpPush(v34, (uint64_t)si_rwlock_wrunlock_2447, a1 + 14464);
        v38 = *(_QWORD *)(a1 + 72);
        v39 = a2 - v38;
        v40 = a2 - v38;
        if (a2 != v38 && v39 >= *(unsigned int *)(a1 + 60))
        {
          v113 = a2 - v38;
          v39 = v34;
          v41 = *__error();
          v42 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
          {
            v68 = *(_DWORD *)(a1 + 60);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)v128 = "deleteDocument";
            *(_WORD *)&v128[8] = 1024;
            *(_DWORD *)&v128[10] = 4713;
            *(_WORD *)&v128[14] = 2048;
            *(_QWORD *)&v128[16] = v40;
            *(_WORD *)&v128[24] = 1024;
            *(_DWORD *)&v128[26] = v68;
            _os_log_error_impl(&dword_1B8270000, v42, OS_LOG_TYPE_ERROR, "%s:%d: deleteDocument error - docId (%lld) >= max (%d) ", buf, 0x22u);
          }
          *__error() = v41;
          v34 = v39;
          LODWORD(v39) = v113;
        }
        if (!(_DWORD)v40 || *(_DWORD *)(a1 + 60) <= v40)
        {
          LOBYTE(v43) = 0;
LABEL_52:
          v30 = v43;
          CIOnThreadCleanUpPop(v34);
          goto LABEL_53;
        }
        v43 = *(_QWORD *)(*(_QWORD *)(a1 + 14368) + 8 * v40);
        if (v43 != a3)
        {
          if (v43)
          {
            v48 = *(_QWORD *)(*(_QWORD *)(a1 + 14368) + 8 * v40);
            v49 = v40;
            v50 = v34;
            v51 = *__error();
            v52 = _SILogForLogForCategory(0);
            v53 = gSILogLevels[0] < 3;
            if (os_log_type_enabled(v52, (os_log_type_t)(gSILogLevels[0] < 3)))
            {
              *(_DWORD *)buf = 134218496;
              *(_QWORD *)v128 = a3;
              *(_WORD *)&v128[8] = 2048;
              *(_QWORD *)&v128[10] = v49;
              *(_WORD *)&v128[18] = 2048;
              *(_QWORD *)&v128[20] = v48;
              _os_log_impl(&dword_1B8270000, v52, v53, "*warn* deleteDocument error: mismatch oid: %ld docId: %ld idxOid: %ld", buf, 0x20u);
            }
            *__error() = v51;
            LOBYTE(v43) = 0;
            v34 = v50;
          }
          goto LABEL_52;
        }
        if (*(_BYTE *)(v8 + 487))
        {
          if ((indexMarkDirtyForce__COUNT_ & 1) != 0)
          {
            LOBYTE(v43) = 0;
          }
          else
          {
            v62 = v34;
            indexMarkDirtyForce__COUNT_ = 1;
            v63 = *__error();
            v64 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)v128 = "indexMarkDirtyForce";
              *(_WORD *)&v128[8] = 1024;
              *(_DWORD *)&v128[10] = 2474;
              *(_WORD *)&v128[14] = 2080;
              *(_QWORD *)&v128[16] = a1 + 15168;
              _os_log_error_impl(&dword_1B8270000, v64, OS_LOG_TYPE_ERROR, "%s:%d: trying to modify read only index %s", buf, 0x1Cu);
            }
            *__error() = v63;
            LOBYTE(v43) = 0;
            v34 = v62;
          }
          goto LABEL_52;
        }
        v114 = v34;
        if (!*(_BYTE *)(a1 + 8))
          goto LABEL_97;
        if (!atomic_load((unsigned int *)(a1 + 24)))
          goto LABEL_97;
        HIDWORD(v56) = qos_class_self() - 9;
        LODWORD(v56) = HIDWORD(v56);
        v55 = v56 >> 2;
        if (v55 > 6)
          v57 = 0;
        else
          v57 = dword_1B8630ED0[v55];
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 14680));
        if (*(_QWORD *)(a1 + 14864) || *(_DWORD *)(a1 + 14876) || *(_BYTE *)(v8 + 216))
          goto LABEL_87;
        if (v57 <= 5)
        {
          if (*(_QWORD *)(a1 + 16 * v57 + 14744))
          {
LABEL_87:
            db_rwlock_wait(a1 + 14680, v57, 2);
LABEL_88:
            pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14680));
            v69 = atomic_load((unsigned int *)(a1 + 24));
            if (v69 == -804450864 || (v70 = atomic_load((unsigned int *)(a1 + 15152))) != 0 && (a4 & 1) == 0)
            {
              v112 = *__error();
              v71 = _SILogForLogForCategory(10);
              if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
              {
                v100 = atomic_load((unsigned int *)(a1 + 15152));
                *(_DWORD *)buf = 136315906;
                *(_QWORD *)v128 = "indexMarkDirtyForce";
                *(_WORD *)&v128[8] = 1024;
                *(_DWORD *)&v128[10] = 2487;
                *(_WORD *)&v128[14] = 1024;
                *(_DWORD *)&v128[16] = v69;
                *(_WORD *)&v128[20] = 1024;
                *(_DWORD *)&v128[22] = v100;
                _os_log_error_impl(&dword_1B8270000, v71, OS_LOG_TYPE_ERROR, "%s:%d: indexMarkDirty failed - state:%x closing:%d", buf, 0x1Eu);
              }
              *__error() = v112;
            }
            else
            {
              v93 = *(_QWORD *)(a1 + 15144);
              if (!v93 || !(*(unsigned int (**)(void))(v93 + 16))())
              {
                indexWriteShutdowState(a1);
                v72 = 1;
                goto LABEL_95;
              }
            }
            v72 = 0;
LABEL_95:
            pthread_mutex_lock((pthread_mutex_t *)(a1 + 14680));
            *(_DWORD *)(a1 + 14884) = 0;
            v73 = *(pthread_override_s **)(a1 + 14856);
            *(_QWORD *)(v8 + 180) = 0;
            *(_QWORD *)(v8 + 188) = 0;
            v74 = *(_DWORD *)(a1 + 14876) != 0;
            *(_BYTE *)(v8 + 216) = 0;
            db_rwlock_wakeup(a1 + 14680, v74, 0);
            pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14680));
            if (v73)
            {
              pthread_override_qos_class_end_np(v73);
              if ((v72 & 1) != 0)
                goto LABEL_97;
              goto LABEL_114;
            }
            if (!v72)
            {
LABEL_114:
              LOBYTE(v43) = 0;
              v34 = v114;
              goto LABEL_52;
            }
LABEL_97:
            v75 = *(unsigned __int8 *)(a1 + 37);
            if (*(_BYTE *)(a1 + 37))
              v76 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 14392) + v40);
            else
              v76 = (*(_DWORD *)(*(_QWORD *)(a1 + 14392) + 4 * (v40 / 5uLL)) >> (6
                                                                                             * (v40 % 5))) & 0x3F;
            LODWORD(v43) = v76 & 0xFFFFFFDF;
            v34 = v114;
            if ((_DWORD)v43)
            {
              v77 = (unsigned int *)(a1 + 12);
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 + 1, v77));
              v75 = *(unsigned __int8 *)(a1 + 37);
            }
            if (v75)
            {
              *(_BYTE *)(*(_QWORD *)(a1 + 14392) + v40) = 0;
              v79 = *(_QWORD *)(a1 + 14400);
              if (v79)
                *(_BYTE *)(v79 + v39 / (unint64_t)(32 * *MEMORY[0x1E0C85AD8])) |= 1 << ((v39 / (unint64_t)(4 * *MEMORY[0x1E0C85AD8])) & 7);
LABEL_118:
              if (!*(_BYTE *)(v8 + 487) && (*(_BYTE *)(v8 + 484) & 6) == 0 && *(_DWORD *)(a1 + 60) >= 0x2711u)
              {
                v92 = atomic_load((unsigned int *)(a1 + 12));
                if (*(_DWORD *)(a1 + 60) < 4 * v92)
                  *(_BYTE *)(v8 + 484) |= 2u;
              }
              goto LABEL_52;
            }
            v80 = v40 / 5uLL;
            v81 = *(_QWORD *)(a1 + 14392);
            v82 = v80;
            v83 = *(_DWORD *)(v81 + 4 * v80) & ~(63 << (6 * (v40 % 5)));
            if (*(_QWORD *)(a1 + 14400))
            {
              v84 = (uint64_t *)MEMORY[0x1E0C85AD8];
              v85 = v80 / (8 * *MEMORY[0x1E0C85AD8]);
              v86 = (v80 / *MEMORY[0x1E0C85AD8]) & 7;
              *(_BYTE *)(*(_QWORD *)(a1 + 14400) + v85) |= 1 << v86;
              if (*(_BYTE *)(*(_QWORD *)(a1 + 14400) + v85))
              {
                v87 = *v84;
                v88 = v86 | (8 * (_DWORD)v85);
                if (v87 * v88 > v80)
                {
                  v109 = __si_assert_copy_extra_2151(0, -1);
                  v106 = v109;
                  v107 = "";
                  if (v109)
                    v107 = v109;
                  v108 = "vm_page_size*(gslot*8+bslot) <=slot";
                }
                else
                {
                  if (v87 * (unint64_t)(v88 + 1) > v80)
                  {
                    v89 = *(_QWORD *)(a1 + 14392);
                    v90 = *(unsigned __int8 *)(a1 + 37);
                    *(_DWORD *)(v89 + 4 * v82) = v83;
                    if (v90)
                    {
                      v91 = *(unsigned __int8 *)(v89 + v40);
                      goto LABEL_117;
                    }
LABEL_116:
                    v91 = (v83 >> (6 * (v40 % 5))) & 0x3F;
LABEL_117:
                    if (v91)
                    {
                      v101 = __si_assert_copy_extra_2151(0, -1);
                      v102 = v101;
                      v103 = "";
                      if (v101)
                        v103 = v101;
                      __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 4730, "((cindex)->coreSpotlight?({ ((uint8_t *)(cindex)->groups)[(payloadIndex)]; }):({ uint32_t __wher"
                        "e=(uint32_t)(payloadIndex); uint32_t __slot = __where/5; uint32_t __shift= (__where-(__slot*5))*"
                        "6; uint32_t __word = ((uint32_t)((cindex)->groups[__slot])); (__word >> __shift) & 0x3F ; }))==(inval&0x3F)",
                        v103);
                      free(v102);
                      if (__valid_fs(-1))
                        v104 = 2989;
                      else
                        v104 = 3072;
                      *(_DWORD *)v104 = -559038737;
                      abort();
                    }
                    goto LABEL_118;
                  }
                  v110 = __si_assert_copy_extra_2151(0, -1);
                  v106 = v110;
                  v107 = "";
                  if (v110)
                    v107 = v110;
                  v108 = "vm_page_size*(gslot*8+bslot+1) >slot";
                }
              }
              else
              {
                v105 = __si_assert_copy_extra_2151(0, -1);
                v106 = v105;
                v107 = "";
                if (v105)
                  v107 = v105;
                v108 = "(cindex)->groupMap[gslot]";
              }
              __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 4730, v108, v107);
              free(v106);
              if (__valid_fs(-1))
                v111 = 2989;
              else
                v111 = 3072;
              *(_DWORD *)v111 = -559038737;
              abort();
            }
            *(_DWORD *)(v81 + 4 * v80) = v83;
            goto LABEL_116;
          }
          v96 = v57 - 1;
          v97 = (uint64_t *)(a1 + 16 * v57 + 14760);
          while (v96 != 4)
          {
            v98 = *v97;
            v97 += 2;
            v99 = ++v96;
            if (v98)
            {
              if (v99 <= 4)
                goto LABEL_87;
              break;
            }
          }
        }
        *(_QWORD *)(a1 + 14864) = pthread_self();
        goto LABEL_88;
      }
      v58 = v37 - 1;
      v59 = (uint64_t *)(a1 + 16 * v37 + 14544);
      while (v58 != 4)
      {
        v60 = *v59;
        v59 += 2;
        v61 = ++v58;
        if (v60)
        {
          if (v61 <= 4)
            goto LABEL_39;
          break;
        }
      }
    }
    *(_QWORD *)(a1 + 14648) = pthread_self();
    goto LABEL_40;
  }
  bzero(buf, 0x400uLL);
  if ((deleteDocument__COUNT_ & 1) == 0)
  {
    deleteDocument__COUNT_ = 1;
    v24 = *__error();
    v25 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v65 = fcntl(*(_DWORD *)(a1 + 56), 50, buf);
      if (buf[0])
        v66 = v65 < 0;
      else
        v66 = 1;
      *(_DWORD *)v119 = 136315906;
      v120 = "deleteDocument";
      v67 = (uint8_t *)"";
      if (!v66)
        v67 = buf;
      v121 = 1024;
      v122 = 4693;
      v123 = 2080;
      v124 = v67;
      v125 = 2080;
      v126 = a1 + 15168;
      v29 = "%s:%d: trying to delete from invalid index %s/%s";
      goto LABEL_82;
    }
LABEL_27:
    *__error() = v24;
  }
LABEL_28:
  v30 = 0;
LABEL_53:
  v44 = *(_QWORD *)&threadData[18 * v118 + 2];
  v45 = v44 + 320 * v117;
  *(_DWORD *)(v45 + 312) = v16;
  v46 = *(void (**)(_QWORD))(v45 + 232);
  if (v46)
    v46(*(_QWORD *)(v44 + 320 * v117 + 288));
  dropThreadId(v118, 0, v10);
  return v30;
}

char *CICleanUpThreadLoc()
{
  pthread_key_t v0;
  char *v1;

  v0 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v0 = __THREAD_SLOT_KEY;
  }
  v1 = (char *)pthread_getspecific(v0);
  if (!v1 || (unint64_t)v1 >= 0x801)
  {
    makeThreadId();
    v1 = (char *)pthread_getspecific(__THREAD_SLOT_KEY);
  }
  return v1 - 1;
}

char *_indexEnter(char *result)
{
  char *v1;
  char *v2;

  if (result)
  {
    v1 = result;
    v2 = (char *)pthread_getspecific(__THREAD_STR_DATA_KEY);
    if (!v2)
    {
      result = (char *)malloc_type_malloc(0x80uLL, 0x2AA5B6DCuLL);
      if (!result)
        return result;
      v2 = result;
      *result = 0;
      pthread_setspecific(__THREAD_STR_DATA_KEY, result);
    }
    return (char *)strlcpy(v2, v1 + 16224, 0x80uLL);
  }
  return result;
}

uint64_t CIOnThreadCleanUpPop(uint64_t result)
{
  _DWORD *v1;
  int v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (**v10)(_QWORD);
  uint64_t (*v11)(_QWORD);
  char *v12;
  char *v13;
  const char *v14;
  uint64_t v15;

  v1 = &threadData[18 * result];
  v4 = v1[14];
  v3 = v1 + 14;
  v2 = v4;
  if (!v4)
  {
    v12 = __si_assert_copy_extra_268();
    v13 = v12;
    v14 = "";
    if (v12)
      v14 = v12;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1633, "td->onThreadCleanUpCount", v14);
    free(v13);
    if (__valid_fs(-1))
      v15 = 2989;
    else
      v15 = 3072;
    *(_DWORD *)v15 = -559038737;
    abort();
  }
  v5 = (v2 - 1);
  *v3 = v5;
  v6 = &threadData[18 * result];
  v9 = *((_QWORD *)v6 + 8);
  v8 = (uint64_t *)(v6 + 16);
  v7 = v9;
  v10 = (uint64_t (**)(_QWORD))(v9 + 16 * v5);
  v11 = *v10;
  if (*v10)
  {
    *v10 = 0;
    result = v11(*(_QWORD *)(v7 + 16 * v5 + 8));
    v7 = *v8;
    v5 = *v3;
  }
  *(_QWORD *)(v7 + 16 * v5) = 0;
  return result;
}

uint64_t db_read_unlock(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  v3 = *(_DWORD *)(a1 + 196) - 1;
  *(_DWORD *)(a1 + 196) = v3;
  if (!v3)
    db_rwlock_wakeup(a1, 0, 0);
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v2;
}

uint64_t db2_delete_obj_with_flags(uint64_t a1, uint64_t a2, char a3)
{
  pthread_key_t v6;
  char *v7;
  unsigned int v8;
  unint64_t v9;
  signed int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  int8x8_t v18;
  uint8x8_t v19;
  unint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  signed int v34;
  int64_t v35;
  uint64_t v36;
  int v37;
  pthread_override_s *v38;
  char v39;
  _BOOL4 v40;
  _BOOL4 v41;
  int v42;
  int v43;
  int v44;
  pthread_override_s *v45;
  char v46;
  int v47;
  NSObject *v48;
  _QWORD *v49;
  int v50;
  int v51;
  NSObject *v52;
  int v53;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  signed int v69;
  int64_t v70;
  uint64_t v71;
  _BOOL4 v72;
  _BOOL4 v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  NSObject *v78;
  int v79;
  pthread_override_s *v80;
  char v81;
  _DWORD *v82;
  _DWORD *v83;
  int v84;
  int v85;
  int v87;
  int v88;
  NSObject *v89;
  char *v90;
  _QWORD v91[9];
  _QWORD v92[3];
  int v93;
  _QWORD v94[3];
  int v95;
  _QWORD v96[3];
  int v97;
  _BYTE buf[40];
  _QWORD *v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 804) & 8) != 0)
    return 13;
  v6 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v6 = __THREAD_SLOT_KEY;
  }
  v7 = (char *)pthread_getspecific(v6);
  HIDWORD(v9) = qos_class_self() - 9;
  LODWORD(v9) = HIDWORD(v9);
  v8 = v9 >> 2;
  if (v8 > 6)
    v10 = 0;
  else
    v10 = dword_1B8630ED0[v8];
  v12 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(_QWORD *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(_BYTE *)(a1 + 796))
    goto LABEL_11;
  if (v10 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v10 + 648))
    {
LABEL_11:
      db_rwlock_wait(a1 + 584, v10, 2);
      goto LABEL_12;
    }
    v55 = v10 - 1;
    v56 = (uint64_t *)(a1 + 16 * v10 + 664);
    while (v55 != 4)
    {
      v57 = *v56;
      v56 += 2;
      ++v55;
      if (v57)
      {
        if (v55 <= 4)
          goto LABEL_11;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 768) = pthread_self();
LABEL_12:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v12)
  {
    v88 = *__error();
    v89 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "db2_delete_obj_with_flags";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 11664;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v12;
      _os_log_error_impl(&dword_1B8270000, v89, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
    }
    *__error() = v88;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11664);
  }
  v13 = (uint64_t)(v7 - 1);
  if (v7)
    v14 = CIOnThreadCleanUpPush((uint64_t)(v7 - 1), (uint64_t)db_write_unlock, a1 + 584);
  else
    v14 = -1;
  v15 = *(_QWORD *)a2;
  if ((*(_DWORD *)(a1 + 804) & 1) != 0)
    v16 = (*(_DWORD *)(a2 + 40) >> 5) & 1;
  else
    v16 = 0;
  v17 = *(_QWORD **)(a1 + 992);
  v18 = (int8x8_t)v17[1];
  if (!*(_QWORD *)&v18)
    goto LABEL_35;
  v19 = (uint8x8_t)vcnt_s8(v18);
  v19.i16[0] = vaddlv_u8(v19);
  if (v19.u32[0] > 1uLL)
  {
    v20 = *(_QWORD *)a2;
    if (v15 >= *(_QWORD *)&v18)
      v20 = v15 % *(_QWORD *)&v18;
  }
  else
  {
    v20 = (*(_QWORD *)&v18 - 1) & v15;
  }
  v21 = *(uint64_t ***)(*v17 + 8 * v20);
  if (!v21 || (v22 = *v21) == 0)
  {
LABEL_35:
    if ((a3 & 1) == 0)
      goto LABEL_36;
LABEL_98:
    v58 = *(_QWORD *)(a1 + 856);
    v59 = *(unsigned int *)(v58 + 8);
    if (!(_DWORD)v59)
    {
      v11 = 2;
      goto LABEL_129;
    }
    v60 = *(int *)(v58 + 16);
    v90 = v7;
    if ((int)v60 < (int)v59)
    {
      v61 = v58 + 16 * v60;
      if (*(_QWORD *)(v61 + 20) == v15)
      {
        v62 = *(_DWORD *)(v61 + 32);
        if (v16 == v62 >> 28)
        {
          v63 = v7 - 1;
          v64 = v14;
LABEL_124:
          v75 = v58 + 16 * v60;
          v76 = *(unsigned int *)(v75 + 28);
          v11 = _page_delete_obj_by_oid_and_type(a1, v15, v16, *(_DWORD *)(v75 + 28), v62 & 0xFFFFFFF, 0);
          if ((v11 & 0xFFFFFFFD) != 0)
          {
            v77 = *__error();
            v78 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136316674;
              *(_QWORD *)&buf[4] = "db2_delete_obj_with_flags";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 11682;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v15;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v15;
              *(_WORD *)&buf[38] = 2048;
              v99 = (_QWORD *)v16;
              LOWORD(v100) = 2048;
              *(_QWORD *)((char *)&v100 + 2) = v76;
              WORD5(v100) = 1024;
              HIDWORD(v100) = v11;
              _os_log_error_impl(&dword_1B8270000, v78, OS_LOG_TYPE_ERROR, "%s:%d: Failed delete, oid:0x%llx(%lld), type:%ld, pgnum:%ld, rc:%d", buf, 0x40u);
            }
            *__error() = v77;
          }
          v14 = v64;
          v13 = (uint64_t)v63;
          v7 = v90;
          goto LABEL_129;
        }
      }
    }
    v65 = (int)v59;
    if ((int)v59 < 1)
    {
      v63 = v7 - 1;
      LODWORD(v68) = 0;
LABEL_119:
      v72 = 0;
LABEL_120:
      v64 = v14;
      v73 = v65 - 1 > (int)v68 && v72;
      v74 = v68 + v73;
      v60 = (int)v68 + v73;
      *(_DWORD *)(v58 + 16) = v74;
      v62 = *(_DWORD *)(v58 + 16 * v74 + 32);
      goto LABEL_124;
    }
    v66 = 0;
    while (1)
    {
      if ((int)v59 + v66 < 0 != __OFADD__((_DWORD)v59, v66))
        v67 = v59 + v66 + 1;
      else
        v67 = v59 + v66;
      v68 = (v67 >> 1);
      v69 = v16 - (*(_DWORD *)(v58 + 16 * (int)v68 + 32) >> 28);
      if (v69)
      {
        v70 = v69;
        v71 = v68;
        if (v70 < 0)
          goto LABEL_105;
      }
      else
      {
        v70 = v15 - *(_QWORD *)(v58 + 16 * ((uint64_t)v67 >> 1) + 20);
        v71 = v68;
        if (v70 < 0)
          goto LABEL_105;
      }
      if (!v70)
      {
        v63 = v7 - 1;
        goto LABEL_119;
      }
      v66 = v68 + 1;
      v71 = v59;
LABEL_105:
      v59 = v71;
      if (v66 >= (int)v71)
      {
        v63 = v7 - 1;
        v72 = v70 > 0;
        goto LABEL_120;
      }
    }
  }
  v23 = *(_DWORD *)(a1 + 804) & 1;
  while (1)
  {
    v24 = v22[1];
    if (v24 == v15)
      break;
    if (v19.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&v18)
        v24 %= *(_QWORD *)&v18;
    }
    else
    {
      v24 &= *(_QWORD *)&v18 - 1;
    }
    if (v24 != v20)
      goto LABEL_35;
LABEL_28:
    v22 = (uint64_t *)*v22;
    if (!v22)
      goto LABEL_35;
  }
  if (v22[2] != v15)
    goto LABEL_28;
  v53 = *((_DWORD *)v22 + 6);
  if ((a3 & 1) != 0)
  {
    if (v53 && v53 != 3)
    {
      if (v23)
        v87 = (*(_DWORD *)(a2 + 40) >> 5) & 1;
      else
        v87 = 0;
      v11 = db_updateset_delete_object(v17, *(_QWORD *)a2, v87);
      goto LABEL_129;
    }
    goto LABEL_98;
  }
  if (v53 != 3 && v53 != 0)
    goto LABEL_65;
LABEL_36:
  v25 = *(_QWORD *)(a1 + 856);
  v26 = *(unsigned int *)(v25 + 8);
  if (!(_DWORD)v26)
  {
    v37 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
    *(_DWORD *)(a1 + 788) = 0;
    v38 = *(pthread_override_s **)(a1 + 760);
    *(_QWORD *)(a1 + 768) = 0;
    *(_QWORD *)(a1 + 760) = 0;
    v39 = *(_DWORD *)(a1 + 780) != 0;
    *(_BYTE *)(a1 + 796) = 0;
    db_rwlock_wakeup(a1 + 584, v39, 0);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
    if (v38)
      pthread_override_qos_class_end_np(v38);
    if (v37)
      sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11699);
LABEL_70:
    v11 = 2;
    if (!v7)
      return v11;
    goto LABEL_133;
  }
  v27 = *(int *)(v25 + 16);
  if ((int)v27 >= (int)v26
    || (v28 = v25 + 16 * v27, *(_QWORD *)(v28 + 20) != v15)
    || (v29 = *(_DWORD *)(v28 + 32), v16 != v29 >> 28))
  {
    v30 = (int)v26;
    if ((int)v26 >= 1)
    {
      v31 = 0;
      while (1)
      {
        if ((int)v26 + v31 < 0 != __OFADD__((_DWORD)v26, v31))
          v32 = v26 + v31 + 1;
        else
          v32 = v26 + v31;
        v33 = (v32 >> 1);
        v34 = v16 - (*(_DWORD *)(v25 + 16 * (int)v33 + 32) >> 28);
        if (v34)
        {
          v35 = v34;
          v36 = v33;
          if ((v35 & 0x8000000000000000) == 0)
          {
LABEL_50:
            if (!v35)
              goto LABEL_58;
            v31 = v33 + 1;
            v36 = v26;
          }
        }
        else
        {
          v35 = v15 - *(_QWORD *)(v25 + 16 * ((uint64_t)v32 >> 1) + 20);
          v36 = v33;
          if ((v35 & 0x8000000000000000) == 0)
            goto LABEL_50;
        }
        v26 = v36;
        if (v31 >= (int)v36)
        {
          v40 = v35 > 0;
          goto LABEL_59;
        }
      }
    }
    LODWORD(v33) = 0;
LABEL_58:
    v40 = 0;
LABEL_59:
    v41 = v30 - 1 > (int)v33 && v40;
    v42 = v33 + v41;
    v27 = (int)v33 + v41;
    *(_DWORD *)(v25 + 16) = v42;
    v29 = *(_DWORD *)(v25 + 16 * v42 + 32);
  }
  if (!_page_obj_exists_by_oid_and_type(a1, v15, v16, *(_DWORD *)(v25 + 16 * v27 + 28), v29 & 0xFFFFFFF))
  {
    v44 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
    *(_DWORD *)(a1 + 788) = 0;
    v45 = *(pthread_override_s **)(a1 + 760);
    *(_QWORD *)(a1 + 768) = 0;
    *(_QWORD *)(a1 + 760) = 0;
    v46 = *(_DWORD *)(a1 + 780) != 0;
    *(_BYTE *)(a1 + 796) = 0;
    db_rwlock_wakeup(a1 + 584, v46, 0);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
    if (v45)
      pthread_override_qos_class_end_np(v45);
    if (v44)
      sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11694);
    goto LABEL_70;
  }
  v17 = *(_QWORD **)(a1 + 992);
  v15 = *(_QWORD *)a2;
  v23 = *(_DWORD *)(a1 + 804) & 1;
LABEL_65:
  if (v23)
    v43 = (*(_DWORD *)(a2 + 40) >> 5) & 1;
  else
    v43 = 0;
  if (db_updateset_delete_object(v17, v15, v43))
  {
    v47 = *__error();
    v48 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "db2_delete_obj_with_flags";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 11715;
      _os_log_error_impl(&dword_1B8270000, v48, OS_LOG_TYPE_ERROR, "%s:%d: Delete failed", buf, 0x12u);
    }
    *__error() = v47;
    v11 = 22;
  }
  else
  {
    v49 = *(_QWORD **)(a1 + 992);
    if ((unint64_t)(v49[7] + 16 * v49[6]) < 0x80000)
      goto LABEL_95;
    v96[0] = 0;
    v96[1] = v96;
    v97 = 0;
    v96[2] = 0x2000000000;
    v94[0] = 0;
    v94[1] = v94;
    v95 = 0;
    v94[2] = 0x2000000000;
    v92[0] = 0;
    v92[1] = v92;
    v93 = 0;
    v92[2] = 0x2000000000;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = __flush_updateset_locked_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E6E37628;
    v101 = 2;
    *(_QWORD *)&buf[32] = v96;
    v99 = v92;
    *(_QWORD *)&v100 = v94;
    *((_QWORD *)&v100 + 1) = a1;
    v91[0] = MEMORY[0x1E0C809B0];
    v91[1] = 0x40000000;
    v91[2] = __flush_updateset_locked_block_invoke_118;
    v91[3] = &unk_1E6E37650;
    v91[4] = v96;
    v91[5] = v92;
    v91[6] = v94;
    v91[7] = a1;
    v91[8] = 2;
    v50 = db_updateset_iterate(v49, (uint64_t)buf, (uint64_t)v91);
    _Block_object_dispose(v92, 8);
    _Block_object_dispose(v94, 8);
    _Block_object_dispose(v96, 8);
    if (v50)
    {
      v51 = *__error();
      v52 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "db2_delete_obj_with_flags";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 11709;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v50;
        _os_log_error_impl(&dword_1B8270000, v52, OS_LOG_TYPE_ERROR, "%s:%d: Error %d from flush_updateset_locked", buf, 0x18u);
      }
      v11 = 0;
      *__error() = v51;
    }
    else
    {
LABEL_95:
      v11 = 0;
    }
  }
LABEL_129:
  v79 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_DWORD *)(a1 + 788) = 0;
  v80 = *(pthread_override_s **)(a1 + 760);
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  v81 = *(_DWORD *)(a1 + 780) != 0;
  *(_BYTE *)(a1 + 796) = 0;
  db_rwlock_wakeup(a1 + 584, v81, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v80)
    pthread_override_qos_class_end_np(v80);
  if (v79)
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11718);
  if (v7)
  {
LABEL_133:
    CIOnThreadCleanUpClearItem(v13, v14);
    v82 = &threadData[18 * v13];
    v85 = v82[14];
    v83 = v82 + 14;
    v84 = v85;
    if (v14 + 1 == v85)
      *v83 = v84 - 1;
  }
  return v11;
}

uint64_t db2_get_obj_callback(uint64_t a1, unint64_t a2, void **a3, int a4, void (*a5)(void *, uint64_t), uint64_t a6, _DWORD *a7)
{
  unsigned int v13;
  _QWORD *v14;
  int8x8_t v15;
  uint8x8_t v16;
  unint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  _BOOL4 v32;
  int v33;
  int v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  _BOOL4 v51;
  _BOOL4 v52;
  int v53;
  int v54;
  int v55;
  pthread_key_t v56;
  char *v57;
  unsigned int v58;
  unint64_t v59;
  signed int v60;
  int v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  int8x8_t v65;
  uint8x8_t v66;
  unint64_t v67;
  uint64_t **v68;
  uint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  signed int v80;
  int64_t v81;
  uint64_t v82;
  _DWORD *v83;
  _DWORD *v84;
  int v85;
  pthread_override_s *v86;
  char v87;
  _DWORD *v88;
  _DWORD *v89;
  int v90;
  int v91;
  uint64_t v92;
  _BOOL4 v93;
  _BOOL4 v94;
  int v95;
  uint64_t oid_with_flags;
  _DWORD *v97;
  _DWORD *v98;
  int v99;
  pthread_override_s *v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  int64_t v112;
  uint64_t v113;
  int v114;
  pthread_override_s *v115;
  char v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  int v120;
  int v121;
  _BOOL4 v122;
  _BOOL4 v123;
  int v124;
  uint64_t v125;
  _DWORD *v126;
  _DWORD *v127;
  int v128;
  int v129;
  void **v130;
  uint64_t v131;
  int v132;
  pthread_override_s *v133;
  char v134;
  _DWORD *v135;
  _DWORD *v136;
  int v137;
  int v138;
  int v139;
  int v140;
  _DWORD *v142;
  _DWORD *v143;
  char *v144;
  char *v145;
  const char *v146;
  uint64_t v147;
  int v148;
  NSObject *v149;
  uint64_t v150;
  void (*v151)(void *, uint64_t);
  unsigned int *v153;
  _BYTE buf[18];
  __int16 v155;
  int v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  v153 = 0;
  if ((a4 & 1) == 0)
  {
    v151 = a5;
    goto LABEL_3;
  }
  if (db_read_lock(a1 + 584))
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13098);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v14 = *(_QWORD **)(a1 + 992);
  v15 = (int8x8_t)v14[1];
  if (!*(_QWORD *)&v15)
    goto LABEL_21;
  v16 = (uint8x8_t)vcnt_s8(v15);
  v16.i16[0] = vaddlv_u8(v16);
  if (v16.u32[0] > 1uLL)
  {
    v17 = a2;
    if (*(_QWORD *)&v15 <= a2)
      v17 = a2 % *(_QWORD *)&v15;
  }
  else
  {
    v17 = (*(_QWORD *)&v15 - 1) & a2;
  }
  v18 = *(uint64_t ***)(*v14 + 8 * v17);
  if (!v18 || (v19 = *v18) == 0)
  {
LABEL_21:
    v21 = *(_QWORD *)(a1 + 856);
    v22 = *(_DWORD *)(v21 + 8);
    if (v22)
    {
      v23 = *(int *)(v21 + 16);
      if ((int)v23 >= v22
        || (v24 = v21 + 16 * v23, *(_QWORD *)(v24 + 20) != a2)
        || (v25 = *(_DWORD *)(v24 + 32), v25 >> 28))
      {
        v26 = v22;
        if (v22 >= 1)
        {
          v27 = 0;
          while (1)
          {
            while (1)
            {
              v29 = v22 + v27 < 0 != __OFADD__(v22, v27) ? v22 + v27 + 1 : v22 + v27;
              v30 = v29 >> 1;
              v31 = *(_DWORD *)(v21 + 16 * (v29 >> 1) + 32);
              if (!(v31 >> 28))
                break;
              v28 = -(v31 >> 28);
LABEL_28:
              v22 = v30;
              if (v27 >= v30)
                goto LABEL_36;
            }
            v28 = a2 - *(_QWORD *)(v21 + 16 * ((uint64_t)v29 >> 1) + 20);
            if (v28 < 0)
              goto LABEL_28;
            if (!v28)
              goto LABEL_42;
            v27 = v30 + 1;
            if (v30 + 1 >= v22)
            {
LABEL_36:
              v32 = v28 > 0;
              goto LABEL_43;
            }
          }
        }
        v30 = 0;
LABEL_42:
        v32 = 0;
LABEL_43:
        v35 = v26 - 1 > v30 && v32;
        v36 = v30 + v35;
        v23 = v30 + v35;
        *(_DWORD *)(v21 + 16) = v36;
        v25 = *(_DWORD *)(v21 + 16 * v36 + 32);
      }
      if (!page_find_oid_with_flags(a1, *(_DWORD *)(v21 + 16 * v23 + 28), v25 & 0xFFFFFFF, a2, 0, &v153, 1, (uint64_t)buf))goto LABEL_229;
      v37 = *(_QWORD *)(a1 + 856);
      v38 = *(unsigned int *)(v37 + 8);
      if ((_DWORD)v38)
      {
        v39 = *(int *)(v37 + 16);
        if ((int)v39 >= (int)v38
          || (v40 = v37 + 16 * v39, *(_QWORD *)(v40 + 20) != a2)
          || (v41 = *(_DWORD *)(v40 + 32), v41 >> 28 != 1))
        {
          v42 = (int)v38;
          if ((int)v38 >= 1)
          {
            v43 = 0;
            while (1)
            {
              if ((int)v38 + v43 < 0 != __OFADD__((_DWORD)v38, v43))
                v44 = v38 + v43 + 1;
              else
                v44 = v38 + v43;
              v45 = (v44 >> 1);
              v46 = *(_DWORD *)(v37 + 16 * (int)v45 + 32) >> 28;
              if (v46 == 1)
              {
                v47 = a2 - *(_QWORD *)(v37 + 16 * ((uint64_t)v44 >> 1) + 20);
                v48 = v45;
                if ((v47 & 0x8000000000000000) == 0)
                  goto LABEL_62;
              }
              else
              {
                v47 = 1 - v46;
                v48 = v45;
                if ((v47 & 0x8000000000000000) == 0)
                {
LABEL_62:
                  if (!v47)
                    goto LABEL_70;
                  v43 = v45 + 1;
                  v48 = v38;
                }
              }
              v38 = v48;
              if (v43 >= (int)v48)
              {
                v51 = v47 > 0;
                goto LABEL_71;
              }
            }
          }
          LODWORD(v45) = 0;
LABEL_70:
          v51 = 0;
LABEL_71:
          v52 = v42 - 1 > (int)v45 && v51;
          v53 = v45 + v52;
          v39 = (int)v45 + v52;
          *(_DWORD *)(v37 + 16) = v53;
          v41 = *(_DWORD *)(v37 + 16 * v53 + 32);
        }
        if (page_find_oid_with_flags(a1, *(_DWORD *)(v37 + 16 * v39 + 28), v41 & 0xFFFFFFF, a2, 1u, &v153, 1, (uint64_t)buf))
        {
          v151 = a5;
          v54 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
          v55 = *(_DWORD *)(a1 + 780) - 1;
          *(_DWORD *)(a1 + 780) = v55;
          if (!v55)
            db_rwlock_wakeup(a1 + 584, 0, 0);
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
          if (v54)
            sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13139);
          goto LABEL_79;
        }
LABEL_229:
        v130 = a3;
        if (a3)
        {
          v92 = _inflateDBO(a1, v153, a3, 0, a4, 0);
          if (*(_DWORD *)&buf[12])
            page_release(a1, *(_DWORD **)buf, *(unsigned int *)&buf[12], *(unsigned int *)&buf[8], 0);
          if (a5 && !(_DWORD)v92)
            a5(*a3, a6);
        }
        else
        {
          v92 = 0;
        }
        v139 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
        v140 = *(_DWORD *)(a1 + 780) - 1;
        *(_DWORD *)(a1 + 780) = v140;
        if (!v140)
          db_rwlock_wakeup(a1 + 584, 0, 0);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
        if (v139)
          sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13156);
        goto LABEL_239;
      }
      v151 = a5;
      v49 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
      v50 = *(_DWORD *)(a1 + 780) - 1;
      *(_DWORD *)(a1 + 780) = v50;
      if (!v50)
        db_rwlock_wakeup(a1 + 584, 0, 0);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
      if (v49)
        sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13131);
    }
    else
    {
      v151 = a5;
      v33 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
      v34 = *(_DWORD *)(a1 + 780) - 1;
      *(_DWORD *)(a1 + 780) = v34;
      if (!v34)
        db_rwlock_wakeup(a1 + 584, 0, 0);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
      if (v33)
        sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13112);
    }
LABEL_79:
    if (a7)
    {
      v13 = 1;
      goto LABEL_81;
    }
    return 2;
  }
  while (1)
  {
    v20 = v19[1];
    if (v20 == a2)
      break;
    if (v16.u32[0] > 1uLL)
    {
      if (v20 >= *(_QWORD *)&v15)
        v20 %= *(_QWORD *)&v15;
    }
    else
    {
      v20 &= *(_QWORD *)&v15 - 1;
    }
    if (v20 != v17)
      goto LABEL_21;
LABEL_14:
    v19 = (uint64_t *)*v19;
    if (!v19)
      goto LABEL_21;
  }
  if (v19[2] != a2)
    goto LABEL_14;
  if (*((_DWORD *)v19 + 6) != 3)
  {
    v153 = (unsigned int *)v19[4];
    goto LABEL_229;
  }
  v151 = a5;
  v120 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  v121 = *(_DWORD *)(a1 + 780) - 1;
  *(_DWORD *)(a1 + 780) = v121;
  if (!v121)
    db_rwlock_wakeup(a1 + 584, 0, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v120)
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13103);
  if (!a7)
    return 2;
LABEL_3:
  v13 = 0;
LABEL_81:
  v150 = a6;
  v56 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v56 = __THREAD_SLOT_KEY;
  }
  v57 = (char *)pthread_getspecific(v56);
  HIDWORD(v59) = qos_class_self() - 9;
  LODWORD(v59) = HIDWORD(v59);
  v58 = v59 >> 2;
  if (v58 > 6)
    v60 = 0;
  else
    v60 = dword_1B8630ED0[v58];
  v61 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(_QWORD *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(_BYTE *)(a1 + 796))
  {
LABEL_89:
    db_rwlock_wait(a1 + 584, v60, 2);
  }
  else
  {
    if (v60 <= 5)
    {
      if (*(_QWORD *)(a1 + 16 * v60 + 648))
        goto LABEL_89;
      v117 = v60 - 1;
      v118 = (uint64_t *)(a1 + 16 * v60 + 664);
      while (v117 != 4)
      {
        v119 = *v118;
        v118 += 2;
        ++v117;
        if (v119)
        {
          if (v117 <= 4)
            goto LABEL_89;
          break;
        }
      }
    }
    *(_QWORD *)(a1 + 768) = pthread_self();
  }
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v61)
  {
    v148 = *__error();
    v149 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "db2_get_obj_callback";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 13159;
      v155 = 1024;
      v156 = v61;
      _os_log_error_impl(&dword_1B8270000, v149, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
    }
    *__error() = v148;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13159);
  }
  v62 = v57 - 1;
  if (v57)
    v63 = CIOnThreadCleanUpPush((uint64_t)(v57 - 1), (uint64_t)db_write_unlock, a1 + 584);
  else
    v63 = -1;
  v64 = *(_QWORD **)(a1 + 992);
  v65 = (int8x8_t)v64[1];
  if (!*(_QWORD *)&v65)
    goto LABEL_110;
  v66 = (uint8x8_t)vcnt_s8(v65);
  v66.i16[0] = vaddlv_u8(v66);
  if (v66.u32[0] > 1uLL)
  {
    v67 = a2;
    if (*(_QWORD *)&v65 <= a2)
      v67 = a2 % *(_QWORD *)&v65;
  }
  else
  {
    v67 = (*(_QWORD *)&v65 - 1) & a2;
  }
  v68 = *(uint64_t ***)(*v64 + 8 * v67);
  if (!v68 || (v69 = *v68) == 0)
  {
LABEL_110:
    v71 = *(_QWORD *)(a1 + 856);
    v72 = *(unsigned int *)(v71 + 8);
    if ((_DWORD)v72)
    {
      v73 = *(int *)(v71 + 16);
      if ((int)v73 >= (int)v72
        || (v74 = v71 + 16 * v73, *(_QWORD *)(v74 + 20) != a2)
        || (v75 = *(_DWORD *)(v74 + 32), v13 != v75 >> 28))
      {
        v76 = (int)v72;
        if ((int)v72 >= 1)
        {
          v77 = 0;
          while (1)
          {
            if ((int)v72 + v77 < 0 != __OFADD__((_DWORD)v72, v77))
              v78 = v72 + v77 + 1;
            else
              v78 = v72 + v77;
            v79 = (v78 >> 1);
            v80 = v13 - (*(_DWORD *)(v71 + 16 * (int)v79 + 32) >> 28);
            if (v80)
            {
              v81 = v80;
              v82 = v79;
              if ((v81 & 0x8000000000000000) == 0)
              {
LABEL_124:
                if (!v81)
                  goto LABEL_141;
                v77 = v79 + 1;
                v82 = v72;
              }
            }
            else
            {
              v81 = a2 - *(_QWORD *)(v71 + 16 * ((uint64_t)v78 >> 1) + 20);
              v82 = v79;
              if ((v81 & 0x8000000000000000) == 0)
                goto LABEL_124;
            }
            v72 = v82;
            if (v77 >= (int)v82)
            {
              v93 = v81 > 0;
              goto LABEL_142;
            }
          }
        }
        LODWORD(v79) = 0;
LABEL_141:
        v93 = 0;
LABEL_142:
        v94 = v76 - 1 > (int)v79 && v93;
        v95 = v79 + v94;
        v73 = (int)v79 + v94;
        *(_DWORD *)(v71 + 16) = v95;
        v75 = *(_DWORD *)(v71 + 16 * v95 + 32);
      }
      oid_with_flags = page_find_oid_with_flags(a1, *(_DWORD *)(v71 + 16 * v73 + 28), v75 & 0xFFFFFFF, a2, v13, &v153, 0, 0);
      if (!(_DWORD)oid_with_flags)
      {
LABEL_217:
        v130 = a3;
        if (a3)
        {
          v131 = _inflateDBO(a1, v153, a3, 0, a4, 0);
          v92 = v131;
          if (v151 && !(_DWORD)v131)
            v151(*a3, v150);
        }
        else
        {
          v92 = 0;
        }
        v132 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
        *(_DWORD *)(a1 + 788) = 0;
        v133 = *(pthread_override_s **)(a1 + 760);
        *(_QWORD *)(a1 + 768) = 0;
        *(_QWORD *)(a1 + 760) = 0;
        v134 = *(_DWORD *)(a1 + 780) != 0;
        *(_BYTE *)(a1 + 796) = 0;
        db_rwlock_wakeup(a1 + 584, v134, 0);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
        if (v133)
          pthread_override_qos_class_end_np(v133);
        if (v132)
          sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13234);
        if (v57)
        {
          CIOnThreadCleanUpClearItem((uint64_t)(v57 - 1), v63);
          v135 = &threadData[18 * (_QWORD)v62];
          v138 = v135[14];
          v136 = v135 + 14;
          v137 = v138;
          if (v63 + 1 == v138)
            *v136 = v137 - 1;
        }
LABEL_239:
        if (v130 && *v130 && *((_DWORD *)*v130 + 3) <= 0x2Fu)
        {
          v144 = __si_assert_copy_extra_2151(0, -1);
          v145 = v144;
          v146 = "";
          if (v144)
            v146 = v144;
          __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13332, "dbo->used_bytes >= sizeof(external_db_obj)", v146);
          free(v145);
          if (__valid_fs(-1))
            v147 = 2989;
          else
            v147 = 3072;
          *(_DWORD *)v147 = -559038737;
          abort();
        }
        return v92;
      }
      if (v13)
      {
        v92 = oid_with_flags;
        if (a7
          && !db2_store_obj_preamble(*(_DWORD *)(a1 + 804), (uint64_t)a7, 0)
          && !db2_store_obj_inner(a1, (uint64_t)a7, 0))
        {
          v97 = malloc_type_malloc((a7[3] + 512), 0x90594DFDuLL);
          v98 = v97;
          if (v97)
          {
            memcpy(v97, a7, a7[3]);
            v98[2] = a7[3] + 512;
          }
          *a3 = v98;
          v92 = 3;
        }
        v99 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
        *(_DWORD *)(a1 + 788) = 0;
        v100 = *(pthread_override_s **)(a1 + 760);
        *(_QWORD *)(a1 + 768) = 0;
        *(_QWORD *)(a1 + 760) = 0;
        v101 = *(_DWORD *)(a1 + 780) != 0;
        *(_BYTE *)(a1 + 796) = 0;
        db_rwlock_wakeup(a1 + 584, v101, 0);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
        if (v100)
          pthread_override_qos_class_end_np(v100);
        if (v99)
          sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13198);
        goto LABEL_213;
      }
      v102 = *(_QWORD *)(a1 + 856);
      v103 = *(unsigned int *)(v102 + 8);
      if ((_DWORD)v103)
      {
        v104 = *(int *)(v102 + 16);
        if ((int)v104 >= (int)v103
          || (v105 = v102 + 16 * v104, *(_QWORD *)(v105 + 20) != a2)
          || (v106 = *(_DWORD *)(v105 + 32), v106 >> 28 != 1))
        {
          v107 = (int)v103;
          if ((int)v103 >= 1)
          {
            v108 = 0;
            while (1)
            {
              if ((int)v103 + v108 < 0 != __OFADD__((_DWORD)v103, v108))
                v109 = v103 + v108 + 1;
              else
                v109 = v103 + v108;
              v110 = (v109 >> 1);
              v111 = *(_DWORD *)(v102 + 16 * (int)v110 + 32) >> 28;
              if (v111 == 1)
              {
                v112 = a2 - *(_QWORD *)(v102 + 16 * ((uint64_t)v109 >> 1) + 20);
                v113 = v110;
                if ((v112 & 0x8000000000000000) == 0)
                  goto LABEL_172;
              }
              else
              {
                v112 = 1 - v111;
                v113 = v110;
                if ((v112 & 0x8000000000000000) == 0)
                {
LABEL_172:
                  if (!v112)
                    goto LABEL_202;
                  v108 = v110 + 1;
                  v113 = v103;
                }
              }
              v103 = v113;
              if (v108 >= (int)v113)
              {
                v122 = v112 > 0;
                goto LABEL_203;
              }
            }
          }
          LODWORD(v110) = 0;
LABEL_202:
          v122 = 0;
LABEL_203:
          v123 = v107 - 1 > (int)v110 && v122;
          v124 = v110 + v123;
          v104 = (int)v110 + v123;
          *(_DWORD *)(v102 + 16) = v124;
          v106 = *(_DWORD *)(v102 + 16 * v124 + 32);
        }
        v125 = page_find_oid_with_flags(a1, *(_DWORD *)(v102 + 16 * v104 + 28), v106 & 0xFFFFFFF, a2, 1u, &v153, 0, 0);
        if ((_DWORD)v125)
        {
          v92 = v125;
          if (a7)
          {
            if (db2_obj_insert_from_prototype(a1, a3, a7))
              v92 = v92;
            else
              v92 = 3;
          }
          if (db_write_unlock(a1 + 584))
            sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13222);
          goto LABEL_213;
        }
        goto LABEL_217;
      }
      if (a7)
        db2_obj_insert_from_prototype(a1, a3, a7);
      if (db_write_unlock(a1 + 584))
        sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13210);
    }
    else
    {
      if (a7
        && !db2_store_obj_preamble(*(_DWORD *)(a1 + 804), (uint64_t)a7, 0)
        && !db2_store_obj_inner(a1, (uint64_t)a7, 0))
      {
        v83 = malloc_type_malloc((a7[3] + 512), 0x90594DFDuLL);
        v84 = v83;
        if (v83)
        {
          memcpy(v83, a7, a7[3]);
          v84[2] = a7[3] + 512;
        }
        *a3 = v84;
      }
      v85 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
      *(_DWORD *)(a1 + 788) = 0;
      v86 = *(pthread_override_s **)(a1 + 760);
      *(_QWORD *)(a1 + 768) = 0;
      *(_QWORD *)(a1 + 760) = 0;
      v87 = *(_DWORD *)(a1 + 780) != 0;
      *(_BYTE *)(a1 + 796) = 0;
      db_rwlock_wakeup(a1 + 584, v87, 0);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
      if (v86)
        pthread_override_qos_class_end_np(v86);
      if (v85)
        sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13182);
    }
    if (v57)
    {
      CIOnThreadCleanUpClearItem((uint64_t)(v57 - 1), v63);
      v88 = &threadData[18 * (_QWORD)v62];
      v91 = v88[14];
      v89 = v88 + 14;
      v90 = v91;
      if (v63 + 1 == v91)
        *v89 = v90 - 1;
    }
    return 2;
  }
  while (2)
  {
    v70 = v69[1];
    if (v70 != a2)
    {
      if (v66.u32[0] > 1uLL)
      {
        if (v70 >= *(_QWORD *)&v65)
          v70 %= *(_QWORD *)&v65;
      }
      else
      {
        v70 &= *(_QWORD *)&v65 - 1;
      }
      if (v70 != v67)
        goto LABEL_110;
      goto LABEL_103;
    }
    if (v69[2] != a2)
    {
LABEL_103:
      v69 = (uint64_t *)*v69;
      if (!v69)
        goto LABEL_110;
      continue;
    }
    break;
  }
  if (*((_DWORD *)v69 + 6) != 3)
  {
    v153 = (unsigned int *)v69[4];
    goto LABEL_217;
  }
  if (!a7
    || db2_store_obj_preamble(*(_DWORD *)(a1 + 804), (uint64_t)a7, 0)
    || db2_store_obj_inner(a1, (uint64_t)a7, 0))
  {
    v92 = 2;
  }
  else
  {
    v142 = malloc_type_malloc((a7[3] + 512), 0x90594DFDuLL);
    v143 = v142;
    if (v142)
    {
      memcpy(v142, a7, a7[3]);
      v143[2] = a7[3] + 512;
    }
    *a3 = v143;
    v92 = 3;
  }
  v114 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_DWORD *)(a1 + 788) = 0;
  v115 = *(pthread_override_s **)(a1 + 760);
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  v116 = *(_DWORD *)(a1 + 780) != 0;
  *(_BYTE *)(a1 + 796) = 0;
  db_rwlock_wakeup(a1 + 584, v116, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v115)
    pthread_override_qos_class_end_np(v115);
  if (v114)
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13169);
LABEL_213:
  if (v57)
  {
    CIOnThreadCleanUpClearItem((uint64_t)(v57 - 1), v63);
    v126 = &threadData[18 * (_QWORD)v62];
    v129 = v126[14];
    v127 = v126 + 14;
    v128 = v129;
    if (v63 + 1 == v129)
      *v127 = v128 - 1;
  }
  return v92;
}

uint64_t CIOnThreadCleanUpPush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  char *v11;
  unsigned int v12;
  void **v13;
  char *v14;
  char *v16;
  char *v17;
  const char *v18;
  uint64_t v19;

  v5 = &threadData[18 * a1];
  v8 = v5[14];
  v7 = v5 + 14;
  v6 = v8;
  v10 = v7 + 1;
  v9 = v7[1];
  if (v8 >= v9)
  {
    v12 = 2 * v9;
    if (!v9)
      v12 = 4;
    *v10 = v12;
    v13 = (void **)&threadData[18 * a1];
    v11 = (char *)malloc_type_realloc(v13[8], 16 * v12, 0x80040803F642BuLL);
    v13[8] = v11;
    if (!*v10)
    {
      v16 = __si_assert_copy_extra_268();
      v17 = v16;
      v18 = "";
      if (v16)
        v18 = v16;
      __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1623, "td->onThreadCleanUpSize", v18);
      free(v17);
      if (__valid_fs(-1))
        v19 = 2989;
      else
        v19 = 3072;
      *(_DWORD *)v19 = -559038737;
      abort();
    }
    v6 = *v7;
  }
  else
  {
    v11 = *(char **)&threadData[18 * a1 + 16];
  }
  v14 = &v11[16 * v6];
  *(_QWORD *)v14 = a2;
  *((_QWORD *)v14 + 1) = a3;
  *v7 = v6 + 1;
  return v6;
}

BOOL CICleanUpThreadLocGet(_QWORD *a1)
{
  pthread_key_t v2;
  char *v3;

  v2 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v2 = __THREAD_SLOT_KEY;
  }
  v3 = (char *)pthread_getspecific(v2);
  *a1 = v3 - 1;
  return v3 != 0;
}

uint64_t CIOnThreadCleanUpClearItem(uint64_t result, unint64_t a2)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  const char *v5;
  uint64_t v6;

  if (threadData[18 * result + 14] < a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1647, "td->onThreadCleanUpCount >= position", v5);
    free(v4);
    if (__valid_fs(-1))
      v6 = 2989;
    else
      v6 = 3072;
    *(_DWORD *)v6 = -559038737;
    abort();
  }
  v2 = (_QWORD *)(*(_QWORD *)&threadData[18 * result + 16] + 16 * a2);
  *v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t si_docIdRewriteCallback(uint64_t result, CFArrayRef theArray)
{
  uint64_t v3;
  uint64_t v4;
  CFIndex v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (theArray)
  {
    v3 = result;
    result = CFArrayGetCount(theArray);
    if (result >= 1)
    {
      v4 = result;
      v5 = 0;
      while (1)
      {
        v6 = *(_QWORD *)(v3 + 32);
        result = (uint64_t)CFArrayGetValueAtIndex(theArray, v5);
        if (v6 < *(_QWORD *)(result + 24))
          goto LABEL_18;
        v7 = *(uint64_t **)(result + 16);
        v8 = *v7;
        if (*v7 < 1)
          goto LABEL_18;
        v9 = 0;
        v10 = v7[1];
        v11 = (unsigned int *)(v10 + 8);
        v12 = 1;
        while (1)
        {
          v13 = *((_QWORD *)v11 - 1);
          if (v6 > v13 && v13 + *v11 > v6)
            break;
          ++v9;
          v11 += 6;
          v12 = v8 > v9;
          if (v8 == v9)
            goto LABEL_18;
        }
        v14 = *(unsigned int *)(*(_QWORD *)(v10 + 24 * v9 + 16) + 4 * (v6 - v13));
        if ((_DWORD)v6 == (_DWORD)v13)
        {
          v15 = *(_QWORD *)(result + 32);
          if (v15)
            goto LABEL_15;
        }
        if ((_DWORD)v14)
          break;
        v16 = -1;
        if (v12)
        {
LABEL_20:
          *(_QWORD *)(v3 + 32) = v16;
          return result;
        }
LABEL_18:
        if (++v5 == v4)
          return result;
      }
      v15 = *(_QWORD *)(result + 32);
LABEL_15:
      v16 = v15 + v14;
      if (v12)
        goto LABEL_20;
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t db_updateset_delete_object(_QWORD *a1, unint64_t a2, int a3)
{
  _QWORD *v6;
  int v7;
  _DWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  unint64_t v13;

  v6 = std::__hash_table<std::__hash_value_type<unsigned long long,value_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,value_t>>>::find<unsigned long long>(a1, a2);
  if (v6)
  {
    v7 = *((_DWORD *)v6 + 6);
    if (v7 == 3)
      return 2;
    v8 = (_DWORD *)v6[4];
    if (v7 == 1)
    {
      std::__hash_table<std::__hash_value_type<unsigned long long,value_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,value_t>>>::__erase_unique<unsigned long long>(a1, a2);
      v9 = a1 + 5;
      v10 = -1;
      goto LABEL_7;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v13 = a2;
  v11 = std::__hash_table<std::__hash_value_type<unsigned long long,value_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,value_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((float *)a1, a2, (uint64_t *)&v13);
  v11[3] = 3;
  *((_DWORD *)v11 + 8) = a3;
  *((_DWORD *)v11 + 9) = 0;
  v9 = a1 + 6;
  v10 = 1;
LABEL_7:
  result = 0;
  *v9 += v10;
  if (v7)
  {
    if (v8)
    {
      a1[7] -= (*v8 + 4);
      free(v8);
      return 0;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,value_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,value_t>>>::find<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  uint8x8_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  unint64_t v7;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (*(_QWORD *)&v2 <= a2)
      v4 = a2 % *(_QWORD *)&v2;
  }
  else
  {
    v4 = (*(_QWORD *)&v2 - 1) & a2;
  }
  v5 = *(_QWORD **)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  result = (_QWORD *)*v5;
  if (*v5)
  {
    do
    {
      v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(_QWORD *)&v2)
            v7 %= *(_QWORD *)&v2;
        }
        else
        {
          v7 &= *(_QWORD *)&v2 - 1;
        }
        if (v7 != v4)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,value_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,value_t>>>::__erase_unique<unsigned long long>(_QWORD *a1, unint64_t a2)
{
  _QWORD *v3;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = std::__hash_table<std::__hash_value_type<unsigned long long,value_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,value_t>>>::find<unsigned long long>(a1, a2);
  if (v3)
  {
    v4 = (int8x8_t)a1[1];
    v5 = v3[1];
    v6 = (uint8x8_t)vcnt_s8(v4);
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *(_QWORD *)&v4)
        v5 %= *(_QWORD *)&v4;
    }
    else
    {
      v5 &= *(_QWORD *)&v4 - 1;
    }
    v7 = *(_QWORD **)(*a1 + 8 * v5);
    do
    {
      v8 = v7;
      v7 = (_QWORD *)*v7;
    }
    while (v7 != v3);
    if (v8 == a1 + 2)
      goto LABEL_20;
    v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v4)
        v9 %= *(_QWORD *)&v4;
    }
    else
    {
      v9 &= *(_QWORD *)&v4 - 1;
    }
    if (v9 != v5)
    {
LABEL_20:
      if (!*v3)
        goto LABEL_21;
      v10 = *(_QWORD *)(*v3 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v4)
          v10 %= *(_QWORD *)&v4;
      }
      else
      {
        v10 &= *(_QWORD *)&v4 - 1;
      }
      if (v10 != v5)
LABEL_21:
        *(_QWORD *)(*a1 + 8 * v5) = 0;
    }
    v11 = *v3;
    if (*v3)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= *(_QWORD *)&v4)
          v12 %= *(_QWORD *)&v4;
      }
      else
      {
        v12 &= *(_QWORD *)&v4 - 1;
      }
      if (v12 != v5)
      {
        *(_QWORD *)(*a1 + 8 * v12) = v8;
        v11 = *v3;
      }
    }
    *v8 = v11;
    *v3 = 0;
    --a1[3];
    operator delete(v3);
  }
}

void CIIndexSetDisposePerThreadCache(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  if (v2)
  {
    cicachelistenqueue(*a1 + 8, v2, 20);
    a1[1] = 0;
  }
  v3 = a1[2];
  if (v3)
  {
    cicachelistenqueue(*a1 + 32, v3, 0);
    a1[2] = 0;
  }
  v4 = a1[3];
  if (v4)
  {
    cicachelistenqueue(*a1 + 56, v4, 0);
    a1[3] = 0;
  }
  v5 = a1[4];
  if (v5)
  {
    cicachelistenqueue(*a1 + 80, v5, 0);
    a1[4] = 0;
  }
  v6 = a1[5];
  if (v6)
  {
    cicachelistenqueue(*a1 + 104, v6, 0);
    a1[5] = 0;
  }
}

uint64_t si_dglock_rdunlock(uint64_t a1)
{
  uint64_t v2;
  int v3;

  v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  v3 = *(_DWORD *)(a1 + 196) - 1;
  *(_DWORD *)(a1 + 196) = v3;
  if (!v3)
    db_rwlock_wakeup(a1, 0, 0);
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v2;
}

uint64_t db_rwlock_wait(uint64_t a1, unsigned int a2, int a3)
{
  pthread_cond_t *v6;
  _opaque_pthread_t *v7;
  pthread_override_s *v8;
  qos_class_t v9;
  uint64_t result;

  v6 = db_rwlock_alloc_waiter(a1);
  LODWORD(v6[1].__sig) = a3;
  if ((a3 & 0xFFFFFFFE) == 2)
    *(_QWORD *)v6[1].__opaque = pthread_self();
  ++*(_DWORD *)(a1 + 208);
  db_rwlock_waiter_list_enqueue_inner((_QWORD *)(a1 + 16 * a2 + 64), (uint64_t)v6);
  do
  {
    v7 = *(_opaque_pthread_t **)(a1 + 184);
    if (v7)
    {
      if (!*(_BYTE *)(a1 + 212) && *(_DWORD *)(a1 + 204) < (signed int)a2)
      {
        *(_DWORD *)(a1 + 204) = a2;
        v8 = *(pthread_override_s **)(a1 + 176);
        v9 = qos_class_self();
        *(_QWORD *)(a1 + 176) = pthread_override_qos_class_start_np(v7, v9, 0);
        if (v8)
          pthread_override_qos_class_end_np(v8);
      }
    }
    result = pthread_cond_wait(v6, (pthread_mutex_t *)a1);
  }
  while (!BYTE4(v6[1].__sig));
  *(_QWORD *)&v6[1].__opaque[8] = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v6;
  return result;
}

_QWORD *db_rwlock_waiter_list_enqueue_inner(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  const char *v6;
  uint64_t v7;

  *(_QWORD *)(a2 + 64) = 0;
  v2 = result[1];
  if (v2)
  {
    v3 = (_QWORD *)(v2 + 64);
  }
  else
  {
    v3 = result;
    if (*result)
    {
      v4 = __si_assert_copy_extra_268();
      v5 = v4;
      v6 = "";
      if (v4)
        v6 = v4;
      __message_assert(v4, "sdb2_rwlock.c", 269, "list->head==0", v6);
      free(v5);
      if (__valid_fs(-1))
        v7 = 2989;
      else
        v7 = 3072;
      *(_DWORD *)v7 = -559038737;
      abort();
    }
  }
  *v3 = a2;
  result[1] = a2;
  return result;
}

pthread_cond_t *db_rwlock_alloc_waiter(uint64_t a1)
{
  pthread_cond_t *v1;

  v1 = *(pthread_cond_t **)(a1 + 168);
  if (v1)
  {
    *(_QWORD *)(a1 + 168) = *(_QWORD *)&v1[1].__opaque[8];
  }
  else
  {
    v1 = (pthread_cond_t *)malloc_type_malloc(0x48uLL, 0x10200407DFAD57DuLL);
    pthread_cond_init(v1, 0);
  }
  LODWORD(v1[1].__sig) = 0;
  BYTE4(v1[1].__sig) = 0;
  *(_QWORD *)v1[1].__opaque = 0;
  *(_QWORD *)&v1[1].__opaque[8] = 0;
  return v1;
}

uint64_t _TermUpdateSetReadUnlock(uint64_t a1)
{
  pthread_mutex_t *v2;
  int v3;

  v2 = (pthread_mutex_t *)(a1 + 304);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 304));
  v3 = *(_DWORD *)(a1 + 500) - 1;
  *(_DWORD *)(a1 + 500) = v3;
  if (!v3)
    db_rwlock_wakeup((uint64_t)v2, 0, 0);
  return pthread_mutex_unlock(v2);
}

uint64_t db_string_table_unlock(_DWORD *a1)
{
  char *v2;
  char *v3;
  const char *v4;

  if (*a1 != 1685287992)
  {
    v2 = __si_assert_copy_extra_268();
    v3 = v2;
    if (v2)
      v4 = v2;
    else
      v4 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 486, v4);
    free(v3);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return db2_string_table_unlock((uint64_t)a1);
}

void cicachelistenqueue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_unfair_lock_s *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)a1 != 4292677391)
  {
    v7 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, (char)"CIIndexSet.c");
    free(v7);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAA] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(_QWORD *)(a2 + a3) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2;
  os_unfair_lock_unlock(v6);
}

void _SIScheduleBackgroundOperation(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 1096);
  if (a2)
    si_enqueue_work_with_qos(v4, a2, a3, a4);
  else
    si_enqueue_work(v4, a3, a4);
}

thread_read_t *SIResumeForUnlock()
{
  thread_read_t *result;
  thread_read_t *v1;
  void (**v2)(_QWORD, _QWORD);

  if ((sForceResume & 1) != 0
    || !sGetLockStateCallback
    || (result = (thread_read_t *)(*(uint64_t (**)(void))(sGetLockStateCallback + 16))(), !(_DWORD)result))
  {
    while (1)
    {
      result = (thread_read_t *)OSAtomicDequeue(&threadResumeQueue, 0);
      if (!result)
        break;
      v1 = result;
      v2 = (void (**)(_QWORD, _QWORD))*((_QWORD *)result + 2);
      if (v2)
      {
        v2[2](*((_QWORD *)result + 2), 0);
        _Block_release(v2);
      }
      thread_resume(v1[2]);
      OSAtomicEnqueue(&threadResumeFreeQueue, v1, 0);
    }
  }
  return result;
}

void si_enqueue_work(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 32))
    si_enqueue_work_with_qos(a1, *(unsigned __int8 *)(a1 + 24), a2, a3);
  else
    si_enqueue_work_for_job(a1, a2, a3, 0);
}

unsigned __int8 *termFieldMatch(int a1, unsigned __int8 *a2, int a3, int a4)
{
  int v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  _BOOL4 v31;
  int v32;

  if (a1)
  {
    if (a1 == 1 && (a4 & 8) == 0)
    {
      if (*a2 < 4u)
        return 0;
      v6 = a2[a3 - 1];
      if ((a4 & 0x800) != 0)
      {
        if (v6 == 4)
        {
          if (a2[a3 - 2] != 1)
            return 0;
          return a2;
        }
        if (v6 == 3)
        {
          v13 = &a2[a3];
          if (*(v13 - 2) == 4)
          {
            if (*(v13 - 3) != 1)
              return 0;
            return a2;
          }
        }
      }
      else
      {
        if (v6 == 1)
        {
          if (a2[a3 - 2] != 1)
            return 0;
          return a2;
        }
        if (v6 == 3)
        {
          v7 = &a2[a3];
          if (*(v7 - 2) == 1)
          {
            if (*(v7 - 3) != 1)
              return 0;
            return a2;
          }
        }
      }
      return 0;
    }
    if (a1 == 5)
    {
      if ((a4 & 0x800) == 0)
        return 0;
      v10 = &a2[a3];
      v11 = *(v10 - 1);
      if (v11 == 5)
      {
        if (*(v10 - 2) != 1)
          return 0;
        return a2;
      }
      if (v11 == 3)
      {
        v12 = &a2[a3];
        if (*(v12 - 2) == 5)
        {
          if (*(v12 - 3) != 1)
            return 0;
          return a2;
        }
      }
      return 0;
    }
    if (*a2 != 1)
      return 0;
    if (a2[1] == 2)
    {
      v8 = 2;
      if (a3 < 2)
        goto LABEL_70;
    }
    else
    {
      if ((a4 & 8) != 0)
        return 0;
      if (a3 > 2)
      {
        v17 = a2[a3 - 1];
        if (v17 == 3)
        {
          if (a2[a3 - 2] == 1 && a2[a3 - 3] == 1)
            return 0;
          v8 = 1;
          goto LABEL_70;
        }
        v8 = 1;
        if (v17 != 1)
        {
LABEL_70:
          v19 = v8 + 1;
          v20 = a2[v8];
          if ((char)a2[v8] < 0)
          {
            v21 = v8 + 2;
            v22 = (char)a2[v19];
            v23 = a2[v19];
            if (v22 < 0)
            {
              v24 = v8 + 3;
              v25 = (char)a2[v21];
              v26 = v25;
              if (v25 < 0)
              {
                v21 = v8 | 4;
                v27 = (char)a2[v24];
                v28 = a2[v24];
                if (v27 < 0)
                {
                  v29 = ((v28 & 0x7F) << 21) | (a2[v21] << 28) | ((v26 & 0x7F) << 14) | ((v23 & 0x7F) << 7) | v20 & 0x7F;
                  v21 = v8 + 5;
                  v20 = v29;
                }
                else
                {
                  v20 = ((v26 & 0x7F) << 14) | (v28 << 21) | ((v23 & 0x7F) << 7) | v20 & 0x7F;
                }
              }
              else
              {
                v21 = v8 + 3;
                v20 = ((v23 & 0x7F) << 7) | (v26 << 14) | v20 & 0x7F;
              }
            }
            else
            {
              v20 = v20 & 0x7F | (v23 << 7);
            }
          }
          else
          {
            v21 = v8 + 1;
          }
          v18 = 0;
          if (!v20)
            return (unsigned __int8 *)v18;
          v30 = a1 == 1 || v20 == a1;
          v31 = v30;
          if (v20 < 6 || !v31)
            return (unsigned __int8 *)v18;
          if (a1 != 1)
            goto LABEL_97;
          if ((a4 & 8) == 0)
            goto LABEL_97;
          v32 = a2[a3 - 1];
          if (v32 == 1)
            goto LABEL_97;
          v18 = 0;
          if (a3 < 3 || v32 != 3)
            return (unsigned __int8 *)v18;
          if (a2[a3 - 2] == 1 && a2[a3 - 3] == 1)
          {
LABEL_97:
            a2 += v21;
            return a2;
          }
          return 0;
        }
LABEL_67:
        v18 = 0;
        if (a2[a3 - 2] == 1)
          return (unsigned __int8 *)v18;
        goto LABEL_70;
      }
      v8 = 1;
      if (a3 < 2)
        goto LABEL_70;
    }
    if (a2[a3 - 1] != 1)
      goto LABEL_70;
    goto LABEL_67;
  }
  if (*a2 < 4u)
    return 0;
  v5 = a2[a3 - 1];
  if ((a4 & 0x800) != 0)
  {
    if (v5 != 1)
      return 0;
    v9 = a2[a3-- - 2];
    if (v9 == 1)
      return 0;
  }
  else
  {
    if (v5 == 1)
      return 0;
    if (v5 == 2 && a2[a3 - 2] == 1)
    {
      if ((a4 & 0x3180) != 0)
        return 0;
      a3 -= 2;
    }
  }
  v14 = &a2[a3];
  v15 = *(v14 - 1);
  if (v15 != 5)
  {
    v18 = 0;
    if ((a4 & 0x78000000) != 0 || v15 <= 4)
      return (unsigned __int8 *)v18;
    return a2;
  }
  v16 = *(v14 - 2);
  if ((v16 - 6) < 0xFFFFFFFC)
    return 0;
  if (a2[a3 - 3] == 1)
  {
    if ((a4 & 0x78000000) != 0)
    {
      switch(v16)
      {
        case 4:
          if ((a4 & 0x20000000) == 0)
            return 0;
          break;
        case 3:
          if ((a4 & 0x10000000) == 0)
            return 0;
          break;
        case 2:
          if ((a4 & 0x8000000) == 0)
            return 0;
          break;
        default:
          if ((a4 & 0x40000000) == 0)
            return 0;
          break;
      }
    }
    return a2;
  }
  return 0;
}

uint64_t matche(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 a3, _QWORD *a4, unsigned __int8 **a5)
{
  _QWORD *v5;
  unsigned __int8 v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  char v27;
  _BOOL4 v28;
  unsigned __int8 v29;
  unsigned __int8 *v30;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  _BOOL4 v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned __int16 v45;
  _WORD *v46;
  unsigned __int16 v47;
  _WORD *v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  unsigned __int8 *v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  _DWORD *v60;
  unsigned int v61;
  unsigned __int8 *v63;
  int v64;
  unsigned __int8 *v65;
  uint64_t v66;
  _DWORD *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  int v70;
  unsigned int v71;
  int64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t i;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  BOOL v83;
  int v84;
  int v85;
  unint64_t v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  char *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  unsigned int v98;
  int v100;
  unsigned int v101;
  BOOL v105;
  BOOL v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  int v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  unint64_t v119;
  int v120;
  BOOL v121;
  int v122;
  uint64_t result;
  int v124;
  unsigned __int16 v125;
  unint64_t v126;
  int v127;
  unint64_t v128;
  unsigned __int16 v129;
  int v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t j;
  uint64_t v142;
  unint64_t v143;
  char v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char v150;
  unint64_t v151;
  unsigned int v152;
  uint64_t v153;
  unsigned int v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char v158;
  unsigned int v160;
  unsigned __int8 *char_start;
  unsigned __int8 *v162;
  unint64_t v163;
  unsigned __int8 *v164;
  unsigned __int8 *v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 *v172;
  char v173;
  int v174;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  int v178;
  unsigned __int8 *v181;
  unsigned __int8 *v182;
  uint64_t v183;
  uint64_t v184;
  unsigned __int8 v185;
  unsigned __int8 *v186;
  unsigned __int8 *v187;
  unsigned __int8 *v188;
  int v189;
  unsigned __int8 *v190;
  int v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  unsigned __int16 __key[6];

  v5 = a4;
  v6 = a3;
  v7 = (unint64_t)a2;
  v8 = a1;
  v195 = 0;
  v194 = 0;
  v9 = *a1;
  if (!*a1)
  {
    v23 = 0;
    LOWORD(v21) = 0;
    LOWORD(v20) = 0;
    v16 = 0;
    v178 = 0;
    v24 = *a2;
    v25 = a3 & 2;
    v22 = a2;
LABEL_454:
    if (v25 && v24 >= 0xC0)
    {
      v125 = v20;
      while (1)
      {
        v126 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v22 >> 4];
        __key[0] = v125;
        if (utf8_decodestr(v22, v126, __key, &v194, 2, &v195, 0))
          break;
        v125 = __key[0];
        v22 += v126;
        if (__key[0] >= 0x300u)
        {
          v127 = __CFUniCharCombiningBitmap[(unint64_t)__key[0] >> 8];
          if (v127 == 255
            || __CFUniCharCombiningBitmap[(unint64_t)__key[0] >> 8]
            && ((__CFUniCharCombiningBitmap[(LOBYTE(__key[0]) >> 3) + 256 + 32 * v127 - 32] >> (__key[0] & 7)) & 1) != 0)
          {
            continue;
          }
        }
        goto LABEL_464;
      }
      v126 = 0;
      v178 = 1;
LABEL_464:
      v22 -= v126;
      v24 = *v22;
      v7 = (unint64_t)a2;
    }
    goto LABEL_465;
  }
  v10 = 0;
  v11 = 0;
  v178 = 0;
  v189 = 0;
  v191 = 0;
  LODWORD(v12) = 0;
  v183 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = v6;
  v18 = 0;
  v19 = 0;
  LOWORD(v20) = 0;
  v21 = 0;
  v185 = v17;
  v174 = v17 & 2;
  v22 = (unsigned __int8 *)v7;
  v176 = v8;
  while (2)
  {
    v26 = *v22;
    if (!*v22)
      break;
    v184 = v13;
    v27 = v9 - 34;
    v28 = (v9 - 34) < 0x3Fu;
    if (*(_BYTE *)(v7 + v11))
    {
      ++v11;
    }
    else
    {
      if (v10 > 2 * v11)
        return 0;
      ++v10;
    }
    v192 = v11;
    v193 = v10;
    if (v9 == 92)
    {
      v30 = v8 + 1;
      v9 = v8[1];
      ++v183;
      v190 = v8;
      if (!v9)
      {
        v190 = v15;
        goto LABEL_165;
      }
    }
    else if (v9 == 42)
    {
      while (v9 == 42)
      {
        v29 = *++v8;
        v9 = v29;
      }
      if (!v9)
      {
        if (v26 < 0xC0)
        {
          if (!v5)
            return 1;
        }
        else
        {
          v119 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[v26 >> 4];
          __key[0] = v20;
          v120 = utf8_decodestr(v22, v119, __key, &v194, 2, &v195, 0);
          LOWORD(v20) = __key[0];
          if (v120)
          {
            v178 = 1;
            break;
          }
          if (__key[0] - 12441 < 2)
            return 0;
          if (v174)
            v121 = 1;
          else
            v121 = __key[0] - 768 >= 0x70;
          v122 = !v121;
          result = v122 ^ 1u;
          if (!v121 || !v5)
            return result;
        }
        if (!v16)
        {
          *a5 = 0;
          *v5 = 0;
          return 1;
        }
LABEL_552:
        *v5 = &v16[-v7];
        v165 = (unsigned __int8 *)(v22 - v16);
        goto LABEL_560;
      }
      if (v9 == 92)
      {
        v30 = v8 + 1;
        if (v8[1] != (_DWORD)v26)
        {
          v184 = 0;
          v9 = 92;
          v30 = v8;
          v14 = v8;
          v190 = v15;
          goto LABEL_40;
        }
        v9 = *v22;
        v190 = v15;
      }
      else
      {
        v184 = 0;
        v30 = v8;
        v190 = v15;
        v14 = v8;
      }
    }
    else
    {
      v30 = v8;
      v190 = v15;
    }
    if (v9 >= 0xC0u)
    {
      if ((v9 + 29) < 0xCu)
      {
        v191 = 1;
        goto LABEL_32;
      }
      if (v9 == 239)
      {
        if (v30[1] < 0xACu)
        {
          v191 = 1;
          v9 = -17;
          goto LABEL_32;
        }
      }
      else if (v9 == 226 && v30[1] > 0xB9u)
      {
        v191 = 1;
        v9 = -30;
        goto LABEL_32;
      }
      v191 = 0;
LABEL_32:
      v19 = v30;
      if (v26 < 0xC0)
        goto LABEL_33;
      goto LABEL_45;
    }
LABEL_40:
    if ((v9 & 0x80u) == 0)
      v19 = 0;
    v33 = v191;
    if ((v9 & 0x80u) == 0)
      v33 = 0;
    v191 = v33;
    if (v26 < 0xC0)
    {
LABEL_33:
      if ((v26 & 0x80u) == 0)
        v18 = 0;
      v31 = v189;
      if ((v26 & 0x80u) == 0)
        v31 = 0;
      v189 = v31;
      if ((_DWORD)v26 == v9)
      {
LABEL_38:
        v21 = 0;
        LOWORD(v20) = 0;
        v32 = 0;
        LODWORD(v12) = 0;
        goto LABEL_205;
      }
      goto LABEL_54;
    }
LABEL_45:
    if ((v26 + 29) < 0xCu)
    {
LABEL_46:
      v189 = 1;
      goto LABEL_53;
    }
    if ((_DWORD)v26 == 239)
    {
      if (v22[1] < 0xACu)
        goto LABEL_46;
    }
    else if ((_DWORD)v26 == 226 && v22[1] > 0xB9u)
    {
      goto LABEL_46;
    }
    v189 = 0;
LABEL_53:
    v18 = v22;
    if ((_DWORD)v26 == v9)
      goto LABEL_38;
LABEL_54:
    v181 = v16;
    v21 = 0;
    v20 = 0u;
    v32 = 0;
    LODWORD(v12) = 0;
    v34 = v28 & (0x4000000000000021uLL >> v27);
    v35 = ((unint64_t)v19 | (unint64_t)v18) == 0;
    if ((unint64_t)v19 | (unint64_t)v18)
      v34 = 1;
    v36 = v34 ^ 1;
    if (v191)
      v36 = 1;
    if (v189)
      v37 = 0;
    else
      v37 = v185 & (v191 == 0);
    v177 = v30 + 1;
    if (v189)
      v38 = 1;
    else
      v38 = v36;
    v186 = v14;
    v187 = v19;
    v188 = v30;
    while (1)
    {
      if (!v37)
        goto LABEL_125;
      if (!v35)
      {
        if ((_DWORD)v21)
        {
          if (!v20)
            goto LABEL_81;
        }
        else
        {
          if (v19)
          {
            v32 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v19 >> 4];
            __key[0] = 0;
            v44 = utf8_decodestr(v19, v32, __key, &v194, 2, &v195, 0);
            v21 = __key[0];
            if (v44)
            {
LABEL_440:
              v178 = 1;
              goto LABEL_441;
            }
            v11 = v192;
            v10 = v193;
            v14 = v186;
            v19 = v187;
            v30 = v188;
            if (v20)
              goto LABEL_92;
            goto LABEL_81;
          }
          v21 = *v30;
          if (!v20)
          {
LABEL_81:
            if (v18)
            {
              v12 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v18 >> 4];
              __key[0] = 0;
              v43 = utf8_decodestr(v18, v12, __key, &v194, 2, &v195, 0);
              v20 = __key[0];
              if (v43)
                goto LABEL_440;
              v11 = v192;
              v10 = v193;
              v14 = v186;
              v19 = v187;
              v30 = v188;
            }
            else
            {
              v20 = *v22;
            }
          }
        }
LABEL_92:
        if ((unsigned __int16)v20 > 0x7Fu)
        {
          if ((unsigned __int16)(v20 + 223) < 0x3Au
            || (unsigned __int16)v20 < 0x587u
            || (v45 = v20, (unsigned __int16)(v20 - 7680) <= 0x6E9u))
          {
            *(_DWORD *)__key = (unsigned __int16)v20;
            v46 = bsearch(__key, &case_mapping_table, 0x57AuLL, 4uLL, (int (__cdecl *)(const void *, const void *))case_cmp);
            if (v46)
              v45 = v46[1];
            else
              v45 = v20;
            v11 = v192;
            v10 = v193;
            v14 = v186;
            v19 = v187;
            v30 = v188;
          }
        }
        else if ((unsigned __int16)(v20 - 97) > 0x19u)
        {
          v45 = tolower_map[(unsigned __int16)v20];
        }
        else
        {
          v45 = toupper_map[(unsigned __int16)v20];
        }
        if ((_DWORD)v21 == v45)
          goto LABEL_204;
        if ((unsigned __int16)v21 > 0x7Fu)
        {
          if ((unsigned __int16)(v21 + 223) < 0x3Au
            || (unsigned __int16)v21 < 0x587u
            || (v47 = v21, (unsigned __int16)(v21 - 7680) <= 0x6E9u))
          {
            *(_DWORD *)__key = (unsigned __int16)v21;
            v48 = bsearch(__key, &case_mapping_table, 0x57AuLL, 4uLL, (int (__cdecl *)(const void *, const void *))case_cmp);
            if (v48)
              v47 = v48[1];
            else
              v47 = v21;
            v11 = v192;
            v10 = v193;
            v14 = v186;
            v19 = v187;
            v30 = v188;
          }
        }
        else
        {
          v47 = (unsigned __int16)(v21 - 97) > 0x19u
              ? tolower_map[(unsigned __int16)v21]
              : toupper_map[(unsigned __int16)v21];
        }
        if (v47 == v45 || v20 == v47)
          goto LABEL_204;
        if ((_DWORD)v21 == 223)
        {
          if (v20 == 115)
          {
            if (v22[1] == 115)
            {
              ++v22;
              LOWORD(v20) = 115;
              v21 = 223;
              goto LABEL_204;
            }
            v20 = 0x73u;
          }
          v21 = 223;
        }
        else if ((_DWORD)v21 == 115 && v20 == 223)
        {
          v20 = 0xDFu;
          v21 = 115;
          if (*v177 == 115)
          {
            v30 = v177;
            goto LABEL_204;
          }
        }
        goto LABEL_125;
      }
      v40 = *v22;
      if (((char)*v22 & 0x80000000) == 0 && ((char)*v30 & 0x80000000) == 0 && tolower_map[*v30] == tolower_map[v40])
        goto LABEL_204;
      if (v30 == v14 && v40 >= 2)
      {
        v41 = v22 + 1;
        while (((char)*v41 & 0x80000000) == 0)
        {
          v42 = *v41;
          if (v42 < 2)
          {
            v19 = 0;
            v18 = 0;
            v191 = 0;
            v189 = 0;
            v30 = v14;
            v7 = (unint64_t)a2;
            v5 = a4;
            v16 = v181;
            goto LABEL_165;
          }
          ++v41;
          if (tolower_map[*v14] == tolower_map[v42])
          {
            v22 = v41 - 1;
            v30 = v14;
LABEL_204:
            v7 = (unint64_t)a2;
            v5 = a4;
            v16 = v181;
            goto LABEL_205;
          }
        }
        v22 = v41;
      }
LABEL_125:
      if (v38)
        break;
      if ((_DWORD)v21)
      {
        v49 = v21;
        if (v20)
          goto LABEL_138;
      }
      else if (v19)
      {
        v32 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v19 >> 4];
        __key[0] = 0;
        v50 = utf8_decodestr(v19, v32, __key, &v194, 2, &v195, 0);
        v49 = __key[0];
        if (v50)
          goto LABEL_427;
        v11 = v192;
        v10 = v193;
        v14 = v186;
        v19 = v187;
        v30 = v188;
        if (v20)
          goto LABEL_138;
      }
      else
      {
        v49 = *v30;
        if (v20)
          goto LABEL_138;
      }
      if (v18)
      {
        v12 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v18 >> 4];
        __key[0] = 0;
        v51 = utf8_decodestr(v18, v12, __key, &v194, 2, &v195, 0);
        v20 = __key[0];
        if (v51)
        {
LABEL_427:
          v178 = 1;
          LOWORD(v21) = v49;
LABEL_441:
          v8 = v188;
          v7 = (unint64_t)a2;
          v5 = a4;
          v16 = v181;
          goto LABEL_442;
        }
        v11 = v192;
        v10 = v193;
        v14 = v186;
        v19 = v187;
        v30 = v188;
      }
      else
      {
        v20 = *v22;
      }
LABEL_138:
      v52 = v49 - 65281;
      if (v49 == 12288)
        v53 = 32;
      else
        v53 = v49;
      if (v52 >= 0x5E)
        v21 = v53;
      else
        v21 = v49 - 65248;
      if (v20 - 65281 <= 0x5D)
      {
        v39 = v20 - 65248;
      }
      else
      {
        if (v20 == 12288)
          v39 = 32;
        else
          v39 = v20;
        if (v20 != 12288 && v49 != 12288 && v52 > 0x5D)
        {
          if ((v21 | 0x20) == 0xF8)
          {
            v7 = (unint64_t)a2;
            v5 = a4;
            v16 = v181;
            if ((v20 & 0xFFFFFFDF) == 0x4F)
            {
              if ((v185 & 1) != 0)
              {
                if ((_DWORD)v21 == 216)
                  v21 = 248;
                else
                  v21 = v21;
                v20 = tolower_map[v20];
              }
              v54 = v22[1];
              if (v54 == 101 || v54 == 204 && v22[2] == 136)
              {
                if (v54 == 101)
                  ++v22;
                goto LABEL_205;
              }
            }
          }
          else
          {
            v7 = (unint64_t)a2;
            v5 = a4;
            v16 = v181;
          }
          if ((v20 | 0x20) == 0xF8 && (v21 & 0xFFFFFFDF) == 0x4F)
          {
            if ((v185 & 1) != 0)
            {
              if (v20 == 216)
                v20 = 248;
              v21 = tolower_map[v21];
            }
            v85 = *v177;
            if (v85 == 101 || v85 == 204 && v30[2] == 136)
            {
              if (v85 == 101)
                v30 = v177;
              goto LABEL_205;
            }
          }
          v86 = 0;
          v87 = v22 + 1;
          v88 = v22 + 2;
          v89 = &byte_1B862C5D3;
          while (1)
          {
            v90 = *(unsigned __int16 *)(v89 - 3);
            if ((_DWORD)v21 == v90)
            {
              v91 = *(v89 - 1);
              if ((v185 & 1) != 0)
              {
                if (v20 == (_DWORD)v91 || tolower_map[v20] == tolower_map[v91])
                {
                  v92 = *v87;
                  v93 = *v89;
                  if ((_DWORD)v92 == (_DWORD)v93 || tolower_map[v92] == tolower_map[v93])
                  {
LABEL_328:
                    ++v22;
                    goto LABEL_205;
                  }
                  if ((_DWORD)v92 == 204 && v86 <= 3 && *v88 == 136)
                  {
LABEL_336:
                    v22 += 2;
                    goto LABEL_205;
                  }
                }
                if (v20 != (_DWORD)v21)
                  goto LABEL_270;
                goto LABEL_289;
              }
              if (v20 == (_DWORD)v91)
              {
                v94 = *v87;
                if (v94 == *v89)
                  goto LABEL_328;
                if (v94 == 204 && v86 <= 3 && *v88 == 136)
                  goto LABEL_336;
              }
            }
            if (v20 == v90)
            {
              LODWORD(v91) = *(v89 - 1);
              if ((v185 & 1) != 0)
              {
LABEL_289:
                if ((_DWORD)v21 != (_DWORD)v91 && tolower_map[v21] != tolower_map[v91])
                  goto LABEL_270;
                v95 = *v177;
                v96 = *v89;
                if ((_DWORD)v95 == (_DWORD)v96 || tolower_map[v95] == tolower_map[v96])
                {
LABEL_327:
                  v30 = v177;
                  goto LABEL_205;
                }
                if ((_DWORD)v95 != 204)
                  goto LABEL_270;
              }
              else
              {
                if ((_DWORD)v21 != (_DWORD)v91)
                  goto LABEL_270;
                v97 = *v177;
                if (v97 == *v89)
                  goto LABEL_327;
                if (v97 != 204)
                  goto LABEL_270;
              }
              if (v86 <= 3 && v30[2] == 136)
              {
                v30 += 2;
                goto LABEL_205;
              }
            }
LABEL_270:
            ++v86;
            v89 += 6;
            if (v86 == 6)
            {
              if (!v174)
                goto LABEL_360;
              if ((_DWORD)v21 == 778)
              {
                v98 = v20 & 0xFFFFFFDF;
                v21 = 778;
LABEL_334:
                if (v98 == 65)
                  goto LABEL_205;
LABEL_360:
                v191 = 0;
                v189 = 0;
LABEL_165:
                if (v5)
                  v16 = 0;
                if ((v185 & 4) == 0)
                {
                  v13 = v184;
                  if (v14)
                  {
                    v183 = 0;
                    v30 = v14;
                    goto LABEL_223;
                  }
                  v6 = v185;
LABEL_564:
                  v124 = *v30;
                  v8 = v30;
LABEL_450:
                  v25 = v174;
                  goto LABEL_451;
                }
                v6 = v185;
LABEL_171:
                if ((v6 & 8) == 0)
                {
                  if (*v176 - 48 < 0xA && *v22 - 48 <= 9)
                  {
                    v55 = v22;
                    do
                    {
                      v57 = *++v55;
                      v56 = v57;
                    }
                    while (v57 - 48 < 0xA);
                    v58 = 0;
                    goto LABEL_309;
                  }
                  v182 = v16;
                  v59 = -1;
                  v55 = v22;
                  v60 = separator_map;
                  while (1)
                  {
                    v61 = *v55;
                    if ((char)*v55 < 0)
                    {
                      if (v61 != 239)
                      {
                        v16 = v182;
                        if (v61 == 227)
                        {
                          if (v55[1] == 128 && v55[2] == 128)
                          {
                            v58 = 0;
                            goto LABEL_308;
                          }
                          v61 = 227;
                        }
                        goto LABEL_302;
                      }
                      v63 = v14;
                      v64 = v55[1];
                      if (v64 != 188 && (v64 != 189 || v55[2] > 0x9Fu))
                      {
                        v61 = 239;
                        v11 = v192;
                        v10 = v193;
                        v5 = a4;
                        v16 = v182;
LABEL_302:
                        v55 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)v61 >> 4];
                        v58 = 1;
                        goto LABEL_308;
                      }
                      v65 = v22;
                      v66 = v21;
                      v67 = v60;
                      v68 = v7;
                      v69 = v30;
                      __key[0] = v20;
                      LODWORD(v12) = 3;
                      v70 = utf8_decodestr(v55, 3uLL, __key, &v194, 2, &v195, 0);
                      LOWORD(v20) = __key[0];
                      if (v70)
                      {
                        v58 = 0;
                        v178 = 1;
                        v11 = v192;
                        v10 = v193;
                        v14 = v63;
                        v5 = a4;
                        v16 = v182;
                        LODWORD(v30) = (_DWORD)v69;
                        v7 = v68;
                        goto LABEL_307;
                      }
                      v20 = __key[0] - 65248;
                      v30 = v69;
                      if (((LOBYTE(__key[0]) + 32) & 0x80) != 0)
                      {
                        LODWORD(v12) = 3;
                        v11 = v192;
                        v10 = v193;
                        v14 = v63;
                        v5 = a4;
                        v7 = v68;
                        v60 = v67;
                      }
                      else
                      {
                        LODWORD(v12) = 3;
                        v11 = v192;
                        v10 = v193;
                        v14 = v63;
                        v7 = v68;
                        if (v67[(LOBYTE(__key[0]) + 32)])
                        {
                          v58 = 0;
                          v5 = a4;
                          v16 = v182;
LABEL_307:
                          v21 = v66;
                          v22 = v65;
LABEL_308:
                          v56 = *v55;
LABEL_309:
                          if (v56 < 2 || v58 != 0)
                          {
                            v19 = 0;
                            v18 = 0;
                            v13 = 0;
                            v79 = 0;
                            v30 = v176;
                            v22 = v55;
                            goto LABEL_4;
                          }
                          if (v56 == 227)
                          {
                            v19 = 0;
                            v18 = 0;
                            v13 = 0;
                            v79 = 0;
                            v22 = v55 + 3;
                            v30 = v176;
                            goto LABEL_4;
                          }
                          v100 = *v176;
                          if (v56 == v100 && v100 != 92)
                            goto LABEL_323;
                          if (v100 == 92)
                          {
                            if (v56 != v176[1])
                            {
                              v19 = 0;
                              v18 = 0;
                              v13 = 0;
                              v30 = v176;
                              v22 = v55;
                              v79 = 1;
                              goto LABEL_4;
                            }
LABEL_323:
                            v101 = ((_DWORD)v30 - (v183 + (_DWORD)v176)) & ~(((int)v30 - ((int)v183 + (int)v176)) >> 31);
                            if (v101 >= 2)
                              v22 = &v55[-v101 + 1];
                            else
                              v22 = v55;
                            v19 = 0;
                            v18 = 0;
                            v13 = 0;
                            v79 = 0;
                            v30 = v176;
                          }
                          else
                          {
                            v19 = 0;
                            if (v55 != v22 && (char)v100 < 0)
                              goto LABEL_323;
                            v30 = v176;
                            v22 = v55;
                            v18 = 0;
                            v13 = 0;
                            v79 = 1;
                          }
                          goto LABEL_4;
                        }
                        v60 = v67;
                        v5 = a4;
                      }
                      v21 = v66;
                      v22 = v65;
                    }
                    else
                    {
                      if (v61 < 2 || v60[*v55] != 0)
                      {
                        v58 = 0;
                        v16 = v182;
                        goto LABEL_308;
                      }
                      LODWORD(v12) = 1;
                      v20 = *v55;
                    }
                    v71 = v20 - 97;
                    if (v59 <= 1 && v71 > 0x19)
                    {
                      v58 = 1;
                      v16 = v182;
                      goto LABEL_308;
                    }
                    v59 = v71 < 0x1A;
                    v55 += v12;
                  }
                }
                v8 = v30;
                goto LABEL_442;
              }
              if (v20 == 778)
              {
                v98 = v21 & 0xFFFFFFDF;
                LOWORD(v20) = 778;
                goto LABEL_334;
              }
              if ((v21 - 8220) <= 0x17 && ((1 << (v21 - 28)) & 0x80000B) != 0)
              {
                if (v20 != 34)
                  goto LABEL_360;
                LOWORD(v20) = 34;
                goto LABEL_205;
              }
              v105 = (_DWORD)v21 == 8219 || v21 >> 1 == 4108 || (_DWORD)v21 == 8242 || (_DWORD)v21 == 96;
              if (v20 == 39 && v105)
              {
                LOWORD(v20) = 39;
                goto LABEL_205;
              }
              if (v20 - 8220 <= 0x17 && ((1 << (v20 - 28)) & 0x80000B) != 0)
              {
                if ((_DWORD)v21 != 34)
                  goto LABEL_360;
                v21 = 34;
LABEL_205:
                if (v5)
                {
                  if (!v16)
                  {
                    v16 = v22;
                    if ((char)*v22 < 0)
                    {
                      v73 = *v22;
                      v74 = v73 >> 4;
                      v75 = utf8_byte_length(unsigned char)::utf8_len_table[v73 >> 4];
                      v76 = v73 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v75];
                      if ((~(_BYTE)v74 & 0xC) != 0)
                        goto LABEL_215;
                      v75 = v75 <= 2 ? 2 : v75;
                      for (i = 1; i != v75; v76 = v22[i++] & 0x3F | (v76 << 6))
                        ;
                      if (v76 < 0x10000)
                      {
LABEL_215:
                        if ((v76 - 12441) >= 4 && (v76 - 65438) >= 2)
                        {
                          v16 = v22;
                          if ((unsigned __int16)v76 < 0x300u)
                            goto LABEL_220;
                          v84 = __CFUniCharCombiningBitmap[BYTE1(v76)];
                          if (v84 != 255)
                          {
                            v16 = v22;
                            if (!__CFUniCharCombiningBitmap[BYTE1(v76)])
                              goto LABEL_220;
                            v16 = v22;
                            if (((__CFUniCharCombiningBitmap[(v76 >> 3) + 256 + 32 * v84 - 32] >> (v76 & 7)) & 1) == 0)
                              goto LABEL_220;
                          }
                        }
                      }
                      else
                      {
                        v81 = v76 - 917760;
                        v82 = v76 - 127995;
                        v83 = v81 >= 0xF0 && v82 > 4;
                        v16 = v22;
                        if (v83)
                          goto LABEL_220;
                      }
                      v16 = 0;
                    }
                  }
                }
LABEL_220:
                if (v32)
                  v13 = &v19[v32] - v30;
                else
                  v13 = 1;
                goto LABEL_223;
              }
              v109 = v20 == 8219 || v20 >> 1 == 4108 || v20 == 8242 || v20 == 96;
              if ((_DWORD)v21 == 39 && v109)
              {
                v21 = 39;
LABEL_376:
                v7 = (unint64_t)a2;
                v5 = a4;
                v16 = v181;
                v11 = v192;
                v10 = v193;
                v14 = v186;
                v19 = v187;
                v30 = v188;
                goto LABEL_205;
              }
              if ((_DWORD)v21 == 776 && v22 > a2)
              {
                v110 = *(v22 - 1);
                v111 = tolower_map[v110];
                if ((v111 - 97) <= 0x14 && ((1 << (v111 - 97)) & 0x104001) != 0)
                {
                  v112 = tolower_map[*v22];
                  if (v112 == 101)
                  {
                    if ((v185 & 1) != 0 || *(v188 - 1) == (_DWORD)v110)
                    {
                      v21 = 776;
                      goto LABEL_376;
                    }
                  }
                  else if (v111 == 97 && v112 == 97)
                  {
                    v191 = 0;
                    v189 = 0;
                    v21 = 776;
                    v7 = (unint64_t)a2;
                    v5 = a4;
                    v16 = v181;
                    v11 = v192;
                    v10 = v193;
                    v14 = v186;
                    v19 = v187;
                    v30 = v188;
                    goto LABEL_165;
                  }
                }
LABEL_400:
                if (unicode_combinable((unsigned __int16)v21))
                {
                  if (v186)
                    v116 = v32;
                  else
                    v116 = 0;
                  v183 += v116;
                  v117 = &v187[v32] - v188;
                  v187 = 0;
                  goto LABEL_406;
                }
LABEL_405:
                v117 = 0;
LABEL_406:
                if (v20 >= 0x80 && unicode_combinable((unsigned __int16)v20))
                {
                  v118 = &v18[v12];
                  v18 = 0;
                  v79 = v118 - v22;
                }
                else
                {
                  v79 = 0;
                }
                if (v117)
                {
                  v191 = 0;
                  v189 = 0;
                  v7 = (unint64_t)a2;
                  v5 = a4;
                  v16 = v181;
                  v11 = v192;
                  v10 = v193;
                  v14 = v186;
                  v19 = v187;
                  v30 = v188;
                  v13 = v117;
                  goto LABEL_4;
                }
                if (v79)
                {
                  if (v183)
                  {
                    v13 = 0;
                    v191 = 0;
                    v189 = 0;
                    v30 = v188;
                    if (v188 - 1 == v190)
                      v30 = v188 - 1;
                    v16 = v181;
                    v183 -= v188 - 1 == v190;
                    v7 = (unint64_t)a2;
                    v5 = a4;
                    v11 = v192;
                    v10 = v193;
                    v14 = v186;
                  }
                  else
                  {
                    v13 = 0;
                    v183 = 0;
                    v191 = 0;
                    v189 = 0;
                    v7 = (unint64_t)a2;
                    v5 = a4;
                    v16 = v181;
                    v11 = v192;
                    v10 = v193;
                    v14 = v186;
                    v30 = v188;
                  }
                  v19 = v187;
                  goto LABEL_4;
                }
                v184 = 0;
                v191 = 0;
                v189 = 0;
LABEL_418:
                v7 = (unint64_t)a2;
                v5 = a4;
                v16 = v181;
                v11 = v192;
                v10 = v193;
                v14 = v186;
                v19 = v187;
                v30 = v188;
                goto LABEL_165;
              }
              if (v188 > v176 && v20 == 776)
              {
                v113 = *(v188 - 1);
                v114 = tolower_map[v113];
                if ((v114 - 97) <= 0x14 && ((1 << (v114 - 97)) & 0x104001) != 0)
                {
                  v115 = tolower_map[*v188];
                  if (v115 == 101)
                  {
                    if ((v185 & 1) != 0 || (_DWORD)v113 == *(v22 - 1))
                    {
                      LOWORD(v20) = 776;
                      v7 = (unint64_t)a2;
                      v5 = a4;
                      v16 = v181;
                      v11 = v192;
                      v10 = v193;
                      v14 = v186;
                      v19 = v187;
                      v30 = v188;
                      goto LABEL_205;
                    }
                  }
                  else if (v114 == 97 && v115 == 97)
                  {
                    v191 = 0;
                    v189 = 0;
                    LOWORD(v20) = 776;
                    goto LABEL_418;
                  }
                }
              }
              if (v21 >= 0x80)
                goto LABEL_400;
              goto LABEL_405;
            }
          }
        }
      }
      v20 = v39;
      if ((_DWORD)v21 == v39)
      {
        LOWORD(v20) = v21;
        goto LABEL_204;
      }
    }
    if (!v14)
    {
      v5 = a4;
      v16 = v181;
      if (a4)
        v16 = 0;
      v7 = (unint64_t)a2;
      v6 = v185;
      if ((v185 & 4) == 0)
        goto LABEL_564;
      goto LABEL_171;
    }
    v13 = 0;
    v16 = v181;
    v72 = &v14[v183] - v30;
    if (v30 <= v14)
      v72 = 0;
    v22 += v72;
    v30 = v14;
    v183 = 0;
    v7 = (unint64_t)a2;
    v5 = a4;
LABEL_223:
    v79 = &v18[(int)v12] - v22;
    if ((_DWORD)v12)
      v18 = 0;
    else
      v79 = 1;
    if (v13 && v14 && !v30[v13])
    {
      v80 = v22[v79];
      if ((v185 & 4) != 0)
      {
        if ((v80 & 0x80) == 0 && separator_map[v80])
          goto LABEL_4;
      }
      else if (v80 <= 1)
      {
        goto LABEL_4;
      }
      v13 = 0;
      v183 = 0;
      v30 = v14;
    }
LABEL_4:
    v8 = &v30[v13];
    v22 += v79;
    v9 = v30[v13];
    v15 = v190;
    if (v9)
      continue;
    break;
  }
LABEL_442:
  v124 = *v8;
  if ((unint64_t)v22 <= v7)
  {
    v6 = v185;
    goto LABEL_450;
  }
  v6 = v185;
  v25 = v174;
  if ((v185 & 4) != 0 && !*v8)
  {
    v23 = 0;
    if (((char)*(v22 - 1) & 0x80000000) == 0 && *(v22 - 1) - 58 <= 0xFFFFFFF5)
      v23 = separator_map[*(v22 - 1)];
    v24 = *v22;
    goto LABEL_454;
  }
LABEL_451:
  v24 = *v22;
  v23 = 0;
  if (!v124)
    goto LABEL_454;
  if ((v24 & 0x80) != 0)
    goto LABEL_480;
LABEL_465:
  if (v24 >= 2 && ((v24 & 0x80) != 0 || (v6 & 4) == 0 || !separator_map[v24]) || (v6 & 2) == 0 || *v8 < 0xC0u)
  {
LABEL_480:
    if (v178)
      goto LABEL_481;
    v142 = *v22;
    if (v142 >= 2)
    {
      if (v23)
      {
        if ((v6 & 4) == 0)
          goto LABEL_481;
      }
      else if ((v142 & 0x80) != 0 || (v142 - 58) > 0xFFFFFFF5)
      {
        if ((_DWORD)v142 != 227 || v22[1] != 128 || (v6 & 4) == 0 || v22[2] != 128)
          goto LABEL_481;
      }
      else if ((v6 & 4) == 0 || !separator_map[v142])
      {
        goto LABEL_481;
      }
    }
    if (*v8 && (*v8 != 42 || v8[1]))
      goto LABEL_481;
    if (!v5)
      return 1;
    goto LABEL_552;
  }
  v128 = 0;
  v129 = v21;
  while (1)
  {
    v8 += v128;
    if (!*v8)
    {
LABEL_479:
      v7 = (unint64_t)a2;
      goto LABEL_480;
    }
    v128 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v8 >> 4];
    __key[0] = v129;
    if (utf8_decodestr(v8, v128, __key, &v194, 2, &v195, 0))
      break;
    v129 = __key[0];
    if (__key[0] - 12441 >= 2 && __key[0] >= 0x300u)
    {
      v130 = __CFUniCharCombiningBitmap[(unint64_t)__key[0] >> 8];
      if (v130 == 255
        || __CFUniCharCombiningBitmap[(unint64_t)__key[0] >> 8]
        && ((__CFUniCharCombiningBitmap[(LOBYTE(__key[0]) >> 3) + 256 + 32 * v130 - 32] >> (__key[0] & 7)) & 1) != 0)
      {
        continue;
      }
    }
    goto LABEL_479;
  }
  v7 = (unint64_t)a2;
LABEL_481:
  result = 0;
  if (v22 == (unsigned __int8 *)v7 || (v6 & 4) == 0 || *v8)
    return result;
  v131 = v16;
  v132 = v22;
  while ((unint64_t)v132 > v7)
  {
    do
    {
      v135 = *--v132;
      v134 = v135;
      v136 = (unint64_t)v135 >> 4;
      v137 = v136 & 0xC;
    }
    while (v137 == 8);
    v133 = v134;
    if ((v134 & 0x80) != 0)
    {
      v138 = utf8_byte_length(unsigned char)::utf8_len_table[v136];
      v139 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v138] & v134;
      if (v137 == 12)
      {
        if (v138 <= 2)
          v140 = 2;
        else
          v140 = v138;
        for (j = 1; j != v140; ++j)
        {
          v133 = v132[j] & 0x3F | (v139 << 6);
          v139 = v133;
        }
      }
      else
      {
        v133 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v138] & v134;
      }
    }
    if ((v133 - 880) <= 0xFFFFFF8F)
      goto LABEL_502;
  }
  v134 = *v132;
LABEL_502:
  if ((v134 & 0x80) != 0)
  {
    v143 = (unint64_t)v134 >> 4;
    v144 = ~(_BYTE)v143;
    v145 = utf8_byte_length(unsigned char)::utf8_len_table[v143];
    v146 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v145] & v134;
    if ((v144 & 0xC) != 0)
    {
      v134 &= utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v145];
    }
    else
    {
      if (v145 <= 2)
        v147 = 2;
      else
        v147 = v145;
      v148 = v147 - 1;
      v149 = (char *)(v132 + 1);
      do
      {
        v150 = *v149++;
        v134 = v150 & 0x3F | (v146 << 6);
        v146 = v134;
        --v148;
      }
      while (v148);
    }
  }
  v151 = *v22;
  v152 = v151;
  if ((char)*v22 < 0)
  {
    v153 = utf8_byte_length(unsigned char)::utf8_len_table[v151 >> 4];
    v154 = v151 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v153];
    if ((~(v151 >> 4) & 0xC) != 0)
    {
      v152 = v151 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v153];
    }
    else
    {
      if (v153 <= 2)
        v155 = 2;
      else
        v155 = utf8_byte_length(unsigned char)::utf8_len_table[v151 >> 4];
      v156 = v155 - 1;
      v157 = (char *)(v22 + 1);
      do
      {
        v158 = *v157++;
        v152 = v158 & 0x3F | (v154 << 6);
        v154 = v152;
        --v156;
      }
      while (v156);
    }
  }
  result = 0;
  if (v152 > 0xFFFE)
    return result;
  if (v152 - 880 > 0xFFFFFF8F || v134 > 0xFFFE)
    return result;
  v160 = v152 - 48;
  if (v134 - 48 > 9)
  {
    if (v160 <= 9)
      goto LABEL_558;
    if (v134 - 123 >= 0xFFFFFFE6)
    {
      if (v152 > 0x7F)
        result = __maskrune(v152, 0x8000uLL);
      else
        result = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v152 + 60) & 0x8000;
      if ((_DWORD)result)
        goto LABEL_558;
      return result;
    }
    result = 0;
    if (v134 - 91 < 0xFFFFFFE6 || v152 - 91 < 0xFFFFFFE6)
      return result;
    char_start = (unsigned __int8 *)utf8_prev_char_start(v7, (unint64_t)v132);
    if (utf8_to_code_point(char_start) - 91 >= 0xFFFFFFE6)
    {
      v162 = &v22[utf8_byte_length(unsigned char)::utf8_len_table[v151 >> 4]];
      LODWORD(v163) = utf8_to_code_point(v162);
      if ((v163 - 880) >= 0xFFFFFF90)
      {
        LOBYTE(v166) = *v162;
        do
        {
          v167 = utf8_byte_length(unsigned char)::utf8_len_table[v166 >> 4];
          v164 = &v162[v167];
          v166 = (char)v162[v167];
          v163 = v162[v167];
          if (v166 < 0)
          {
            v168 = utf8_byte_length(unsigned char)::utf8_len_table[v163 >> 4];
            v169 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v168] & v163;
            if ((~(v163 >> 4) & 0xC) != 0)
            {
              LODWORD(v163) = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v168] & v163;
            }
            else
            {
              if (v168 <= 2)
                v170 = 2;
              else
                v170 = utf8_byte_length(unsigned char)::utf8_len_table[v163 >> 4];
              v171 = v170 - 1;
              v172 = &v162[v167 + 1];
              do
              {
                v173 = *v172++;
                LODWORD(v163) = v173 & 0x3F | (v169 << 6);
                v169 = v163;
                --v171;
              }
              while (v171);
            }
          }
          v162 = v164;
        }
        while ((v163 - 880) > 0xFFFFFF8F);
      }
      else
      {
        v164 = v162;
      }
      if ((v163 - 91) <= 0xFFFFFFE5)
      {
        if (v5)
        {
          *v5 = &v131[-v7];
          v165 = (unsigned __int8 *)(v164 - v131);
          goto LABEL_560;
        }
        return 1;
      }
    }
    return 0;
  }
  if (v160 < 0xA)
    return 0;
LABEL_558:
  if (v5)
  {
    *v5 = &v131[-v7];
    v165 = (unsigned __int8 *)(v22 - v131);
LABEL_560:
    *a5 = v165;
  }
  return 1;
}

void oqpush_offset_t(uint64_t a1, uint64_t a2, size_t size)
{
  uint64_t v5;
  char *v6;
  char *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  if (*(_DWORD *)(a1 + 48))
  {
    if (*(_QWORD *)(a1 + 56) < (a2 & 0x3FFFFFFFFFFFFFFFuLL))
    {
      v17 = __si_assert_copy_extra(0);
      v7 = v17;
      v8 = "";
      if (v17)
        v8 = v17;
      v9 = "!queue->split || queue->splitPoint >= offset_t_GET_VALUE(value)";
LABEL_20:
      __message_assert("%s:%u: failed assertion '%s' %s ", "OQueue.h", 247, v9, v8);
      free(v7);
      if (__valid_fs(-1))
        v18 = 2989;
      else
        v18 = 3072;
      *(_DWORD *)v18 = -559038737;
      abort();
    }
    v5 = *(_QWORD *)(a1 + 24);
    if (v5 >= *(_QWORD *)(a1 + 16))
    {
      v6 = __si_assert_copy_extra(0);
      v7 = v6;
      v8 = "";
      if (v6)
        v8 = v6;
      v9 = "!queue->split";
      goto LABEL_20;
    }
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a1 + 24);
    if (v5 >= v10)
    {
      v11 = 2 * v10;
      if (!v10)
        v11 = 4;
      *(_QWORD *)(a1 + 16) = v11;
      v12 = *(void **)(a1 + 8);
      v13 = 8 * v11;
      if (v12)
        v14 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v12, v13, 0xECA6AA46uLL);
      else
        v14 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v13, 0x8DDAA030uLL);
      v15 = v14;
      if (!v14)
        _log_fault_for_malloc_failure();
      *(_QWORD *)(a1 + 8) = v15;
      v5 = *(_QWORD *)(a1 + 24);
    }
  }
  v16 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 24) = v5 + 1;
  *(_QWORD *)(v16 + 8 * v5) = a2;
}

void findHandleMatch(uint64_t a1, uint64_t a2, size_t a3, unsigned __int8 *a4, unsigned int a5, char a6)
{
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  char v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  const char *v31;
  uint64_t v32;

  if (!a5)
  {
    v29 = __si_assert_copy_extra_1644(*(_DWORD **)(*(_QWORD *)(a1 + 8) + 4568));
    v30 = v29;
    v31 = "";
    if (v29)
      v31 = v29;
    __message_assert("%s:%u: failed assertion '%s' %s invalid len", "BurstTrie.c", 3610, "str_len", v31);
    free(v30);
    if (__valid_fsp(*(_DWORD **)(*(_QWORD *)(a1 + 8) + 4568)))
      v32 = 2989;
    else
      v32 = 3072;
    *(_DWORD *)v32 = -559038737;
    abort();
  }
  if (*(_DWORD *)(a1 + 48))
    v10 = a2;
  else
    v10 = a2;
  v11 = *(unsigned __int8 **)(a1 + 1248);
  v12 = *((_QWORD *)v11 + 4);
  if (!v12)
    goto LABEL_20;
  v13 = v12 - 1;
  v14 = *v11;
  v15 = *((_QWORD *)v11 + 2);
  v16 = (_QWORD *)(v15 + 16 * v13);
  v17 = (_QWORD *)(v15 + 8 * v13);
  if (v14)
    v17 = v16;
  if ((*v17 & 0x3FFFFFFFFFFFFFFFLL) != v10)
  {
LABEL_20:
    if ((a6 & 1) != 0
      || (v18 = *(_QWORD *)(a1 + 1240), v19 = *(_DWORD *)(v18 + 20), v19 == -1)
      || (v20 = *(_DWORD *)(v18 + 16), v21 = termPropertyID(a4, a5), v21 == v19)
      || (!(v20 & 0x3080 | v19) ? (v22 = v21 == 2) : (v22 = 0), v22 ? (v23 = 0) : (v23 = 1), (v23 & 1) == 0))
    {
      if (v10)
      {
        if (!*(_QWORD *)(a1 + 1256))
        {
          if (a4[a5 - 1] == 3)
            goto LABEL_31;
          goto LABEL_34;
        }
        if (a3)
        {
          v24 = termPropertyID(a4, a5);
          v25 = a4[a5 - 1];
          v26 = *(_QWORD *)(a1 + 1248);
          if (!v24)
          {
            if (v25 == 3)
              v27 = v10 | 0x4000000000000000;
            else
              v27 = v10;
            oqpush(v26, v27, a3);
            v26 = *(_QWORD *)(a1 + 1256);
            v28 = a3;
            goto LABEL_36;
          }
          if (v25 != 3)
            goto LABEL_35;
LABEL_32:
          v28 = v10 | 0x4000000000000000;
LABEL_36:
          oqpush(v26, v28, a3);
          return;
        }
        if (a4[a5 - 1] == 3)
        {
LABEL_31:
          v26 = *(_QWORD *)(a1 + 1248);
          goto LABEL_32;
        }
        if (termPropertyID(a4, a5))
        {
LABEL_34:
          v26 = *(_QWORD *)(a1 + 1248);
LABEL_35:
          v28 = v10;
          goto LABEL_36;
        }
      }
    }
  }
}

uint64_t storage_reader_get_ptr(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7;
  char *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(_QWORD);
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  os_unfair_lock_s *v30;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t result;
  char *v41;
  char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _BYTE *v48;
  _QWORD *v49;
  unint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t *v55;
  unsigned int *v56;
  uint64_t v57;

  if (a2)
  {
    v7 = a2;
    v57 = a2;
    v8 = CICleanUpThreadLoc();
    v9 = 0;
    v10 = a4 + a3;
    if (a3 <= a4 + a3)
      v11 = a4 + a3;
    else
      v11 = a3;
    v12 = MEMORY[0x1E0C849B0];
    while (1)
    {
      v13 = a3 >> *(_BYTE *)(v7 + 568);
      if (v13 < *(int *)(v7 + 552))
      {
        v14 = *(_QWORD **)(v7 + 8 * v13 + 576);
        if (v14)
        {
          v15 = v14[1];
          if ((unint64_t)(v15 + 1) >= 2)
          {
            v16 = v14[2];
            v17 = a3 >= v16;
            v18 = a3 - v16;
            if (v17 && v14[3] >= v10 && *(_QWORD *)(a1 + 224) >= v10)
              return v15 + v18;
          }
        }
      }
      v19 = *(_QWORD *)(a1 + 224);
      if (v19 <= v11)
        return -1;
      v20 = *(int *)(a1 + 240);
      *(_DWORD *)(v7 + 552) = v20;
      v21 = *(int *)(a1 + 240);
      if (v13 >= v21 - 1)
        break;
      v56 = 0;
      v22 = *(_QWORD *)(v7 + 8 * v13 + 576);
      v56 = (unsigned int *)v22;
      v52 = (uint64_t *)(v7 + 8 * v13 + 576);
      v54 = (_QWORD *)v22;
      if (v22 && (unint64_t)(*(_QWORD *)(v22 + 8) + 1) >= 2 && (v48 = (_BYTE *)(v7 + v13 + 12), *v48))
      {
        v46 = *(_QWORD *)(v22 + 8);
        v50 = *(_QWORD *)(v22 + 24) - *(_QWORD *)(v22 + 16);
        v30 = (os_unfair_lock_s *)((char *)&windowLock + 4 * v13);
        os_unfair_lock_lock(v30);
        CIOnThreadCleanUpPush((uint64_t)v8, (uint64_t)v12, (uint64_t)v30);
        if (v50 != v54[3] - v54[2] || v50 > 1 << *(_BYTE *)(a1 + 256) || v46 != v54[1])
          goto LABEL_53;
        storageWindowRelease(v52);
        *v48 = 0;
        v56 = 0;
LABEL_67:
        CIOnThreadCleanUpPop((uint64_t)v8);
        __dmb(0xBu);
        *(_DWORD *)(v7 + 552) = *(_DWORD *)(a1 + 240);
LABEL_68:
        if (++v9 == 1001)
          return -1;
      }
      else
      {
        os_unfair_lock_lock((os_unfair_lock_t)&windowLock + v13);
        CIOnThreadCleanUpPush((uint64_t)v8, (uint64_t)v12, (uint64_t)&windowLock + 4 * v13);
        if ((_QWORD *)*v52 == v54)
        {
          if (!v54)
            goto LABEL_24;
          if ((unint64_t)(v54[1] + 1) < 2 || v54[2] > a3 || v54[3] < v10 || *(_QWORD *)(a1 + 224) < v10)
          {
            storageWindowRelease(v52);
            *(_BYTE *)(v7 + v13 + 12) = 0;
            v56 = 0;
LABEL_24:
            v23 = *(unsigned int **)(a1 + 8 * v13 + 264);
            if (v23)
            {
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 + 1, v23));
              v7 = v57;
              *(_QWORD *)(v57 + 8 * v13 + 576) = v23;
            }
            else
            {
              allocateReaderWindowAtSlot((uint64_t)&v57, a1 + 216, v13, &v56);
            }
            goto LABEL_67;
          }
        }
LABEL_53:
        CIOnThreadCleanUpPop((uint64_t)v8);
      }
    }
    if (v13 >= v21)
    {
      if (v20 << *(_BYTE *)(v7 + 568) <= a3 && v19 > a3)
      {
        do
        {
          v32 = *(int *)(v7 + 552);
          os_unfair_lock_lock((os_unfair_lock_t)&windowLock + v32);
          CIOnThreadCleanUpPush((uint64_t)v8, (uint64_t)v12, (uint64_t)&windowLock + 4 * v32);
          if ((_DWORD)v32 != *(_DWORD *)(v7 + 552))
            break;
          v53 = v7 + 8 * v32;
          v51 = *(_BYTE *)(v7 + 556);
          v33 = *(_QWORD *)(v7 + 560);
          v34 = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0x10800408BF3291EuLL);
          atomic_store(1u, v34);
          *((_QWORD *)v34 + 1) = 0;
          *((_QWORD *)v34 + 2) = 0;
          *((_BYTE *)v34 + 40) = v51;
          *((_QWORD *)v34 + 3) = 0;
          *((_QWORD *)v34 + 4) = v33;
          *(_QWORD *)(v53 + 576) = v34;
          v7 = v57;
          v35 = *(_BYTE *)(v57 + 568);
          v36 = *(int *)(v57 + 552);
          v37 = v36 << v35;
          v38 = (v36 + 1) << v35;
          v39 = v38 >= *(_QWORD *)(a1 + 224) ? *(_QWORD *)(a1 + 224) : v38;
          _initWindow(*(_QWORD **)(v57 + 528 + 8 * v32 + 48), (_DWORD **)(v57 + 528), v37, v39, 0);
          CIOnThreadCleanUpPop((uint64_t)v8);
          if ((uint64_t)((int)v32 + 1) << *(_BYTE *)(v7 + 568) > a3)
            break;
        }
        while (*(_QWORD *)(a1 + 224) > a3);
      }
      goto LABEL_68;
    }
    v25 = v7 + 8 * v13;
    v26 = *(_QWORD **)(v25 + 576);
    v49 = v26;
    if (v26)
    {
      v45 = v26[1];
      v47 = v26[3] - v26[2];
    }
    else
    {
      v45 = 0;
      v47 = 0;
    }
    v55 = (uint64_t *)(v25 + 576);
    os_unfair_lock_lock((os_unfair_lock_t)&windowLock + v13);
    CIOnThreadCleanUpPush((uint64_t)v8, (uint64_t)v12, (uint64_t)&windowLock + 4 * v13);
    v56 = 0;
    v27 = *v55;
    v56 = (unsigned int *)v27;
    if (v27)
      v28 = *(_QWORD *)(v27 + 24) - *(_QWORD *)(v27 + 16);
    else
      v28 = 0;
    v29 = (_QWORD *)v27 == v49 && v47 == v28;
    if (v29 && v47 <= 1 << *(_BYTE *)(a1 + 256))
    {
      if (v27)
      {
        if (v45 == v49[1] && (v49[2] > a3 || v49[3] < v10 || *(_QWORD *)(a1 + 224) < v10))
        {
          if ((unint64_t)(v45 + 1) >= 2)
            storageWindowRelease((uint64_t *)&v56);
LABEL_70:
          allocateReaderWindowAtSlot((uint64_t)&v57, a1 + 216, v13, &v56);
          CIOnThreadCleanUpPop((uint64_t)v8);
          goto LABEL_68;
        }
      }
      else if (!v45)
      {
        goto LABEL_70;
      }
    }
    goto LABEL_53;
  }
  result = (uint64_t)storageResolvePtr(a1, a3, a4, 1);
  if (!result || result == a3)
  {
    v41 = __si_assert_copy_extra(0);
    v42 = v41;
    v43 = "";
    if (v41)
      v43 = v41;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 233, "result && (offset_t)(intptr_t)result != inOffset", v43);
    free(v42);
    if (__valid_fs(-1))
      v44 = 2989;
    else
      v44 = 3072;
    *(_DWORD *)v44 = -559038737;
    abort();
  }
  return result;
}

uint64_t si_lqn_equals(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  uint64_t v4;

  v2 = *(unsigned __int16 *)(a1 + 40);
  if (v2 != *(unsigned __int16 *)(a2 + 40) || *(float *)(a1 + 64) != *(float *)(a2 + 64))
    return 0;
  if ((v2 & 0x30) != 0)
    return 1;
  if ((v2 & 3) != 0)
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      return 0;
    return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  }
  else
  {
    result = *(_QWORD *)(a1 + 16);
    if (result)
    {
      v4 = *(_QWORD *)(a2 + 16);
      if (!v4)
        return 0;
      if (result == v4)
        return 1;
      return db_equal_qps(result, v4);
    }
  }
  return result;
}

uint64_t qpEq(uint64_t a1, uint64_t a2)
{
  return db_equal_qps(a1, a2);
}

uint64_t db_equal_qps(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  const char *v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  const char *v13;
  const void *v14;
  size_t v15;
  uint64_t v16;
  uint64_t *v17;
  const char *v18;
  const char **v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  const char **v23;
  const char **v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  const char *v28;
  int v29;
  BOOL v31;
  const char *v32;

  v2 = *(_DWORD *)(a1 + 24);
  if (v2 != *(_DWORD *)(a2 + 24))
    return 0;
  if (*(float *)(a1 + 52) != *(float *)(a2 + 52))
    return 0;
  if (*(float *)(a1 + 56) != *(float *)(a2 + 56))
    return 0;
  v5 = *(unsigned int *)(a1 + 60);
  if ((_DWORD)v5 != *(_DWORD *)(a2 + 60))
    return 0;
  v6 = *(_QWORD *)(a1 + 32);
  if (((*(_QWORD *)(a2 + 32) ^ v6) & 0xFFFFFFE23FFFFFFELL) != 0)
    return 0;
  v8 = *(const char **)a1;
  v9 = *(const char **)a2;
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
  {
    if (strcmp(v8, v9))
      return 0;
  }
  if ((v6 & 0x800000) != 0 && *(unsigned __int8 *)(a1 + 28) != *(unsigned __int8 *)(a2 + 28))
    return 0;
  if ((v6 & 0xC0000) != 0 && (v6 & 0x200) == 0)
  {
    v10 = *(int *)(a1 + 40);
    if ((_DWORD)v10 == *(_DWORD *)(a2 + 40))
    {
      v11 = memcmp(*(const void **)(a1 + 288), *(const void **)(a2 + 288), 8 * v10);
      return v11 == 0;
    }
    return 0;
  }
  v12 = *(const char **)(a1 + 72);
  if (v12)
  {
    v13 = *(const char **)(a2 + 72);
    if (v13)
    {
LABEL_18:
      v11 = strcmp(v12, v13);
      return v11 == 0;
    }
  }
  if (v2 != 15)
  {
    if ((v2 - 11) > 1)
    {
      if ((v2 - 13) <= 1)
      {
        v22 = *(unsigned int *)(a1 + 40);
        if ((_DWORD)v22 == *(_DWORD *)(a2 + 40))
        {
          if ((int)v22 < 1)
            return 1;
          v23 = *(const char ***)(a1 + 168);
          v24 = *(const char ***)(a2 + 168);
          v25 = v22 - 1;
          do
          {
            v27 = *v23++;
            v26 = v27;
            v28 = *v24++;
            v29 = strcmp(v26, v28);
            result = v29 == 0;
            v31 = v25-- != 0;
          }
          while (!v29 && v31);
          return result;
        }
      }
    }
    else if (*(_DWORD *)(a1 + 40) == 2)
    {
      v17 = *(uint64_t **)(a1 + 168);
      result = *v17;
      if (!*v17)
        return result;
      v18 = (const char *)v17[1];
      if (v18)
      {
        v19 = *(const char ***)(a2 + 168);
        v20 = *v19;
        if (*v19)
        {
          v21 = v19[1];
          if (v21)
          {
            v32 = v21;
            if (*(_DWORD *)(a2 + 40) == 2 && !strcmp((const char *)result, v20))
            {
              v12 = v18;
              v13 = v32;
              goto LABEL_18;
            }
          }
        }
      }
    }
    return 0;
  }
  result = *(_QWORD *)(a1 + 296);
  if (result)
  {
    v14 = *(const void **)(a2 + 296);
    if (v14 && *(float *)(a1 + 64) == *(float *)(a2 + 64))
    {
      v15 = -1;
      if ((v5 & 3) != 3)
      {
        v16 = (v5 >> 2) & 3;
        if ((_DWORD)v16 != 3)
          v15 = (vector_dimension_vec_sizes_10743[v5 & 3] * vector_size_elem_sizes_10742[v16]);
      }
      v11 = memcmp((const void *)result, v14, v15);
      return v11 == 0;
    }
    return 0;
  }
  return result;
}

intptr_t ___ZN20SISearchCtx_METADATA7cleanUpEb_block_invoke_3(uint64_t a1)
{
  ContentIndexDocSetIteratorDispose(*(uint64_t **)(a1 + 32));
  return dispatch_semaphore_signal((dispatch_semaphore_t)freeSemaphore);
}

void ContentIndexDocSetIteratorDispose(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  char **v10;
  char **v11;
  pthread_rwlock_t *v12;

  v2 = a1[2];
  if (v2)
  {
    free(*(void **)(v2 + 8));
    v3 = *(void **)(v2 + 32);
    if (*(_BYTE *)(v2 + 40))
      munmap(v3, *(_QWORD *)(v2 + 88));
    else
      free(v3);
    free(*(void **)(v2 + 120));
    free((void *)v2);
  }
  v4 = a1[9];
  if (v4 >= 1)
  {
    for (i = 0; i < v4; ++i)
    {
      v6 = a1[i + 10];
      if (v6)
      {
        ContentIndexDocSetDispose(v6);
        v4 = a1[9];
      }
    }
  }
  v7 = *a1;
  if (*a1)
  {
    do
    {
      v8 = __ldaxr((unsigned int *)v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, (unsigned int *)v7));
    if (!v9)
    {
      v10 = *(char ***)(v7 + 16);
      if (v10)
      {
        fd_release(v10[560]);
        free(v10);
      }
      v11 = *(char ***)(v7 + 8);
      if (v11)
      {
        fd_release(v11[560]);
        free(v11);
      }
      v12 = *(pthread_rwlock_t **)(v7 + 24);
      if (v12)
        posreadunlock(v12);
      free((void *)v7);
    }
  }
  free(a1);
}

void ContentIndexDocSetContextRelease(unsigned int *a1)
{
  unsigned int v2;
  unsigned int v3;
  char **v4;
  char **v5;
  pthread_rwlock_t *v6;

  do
  {
    v2 = __ldaxr(a1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, a1));
  if (!v3)
  {
    v4 = (char **)*((_QWORD *)a1 + 2);
    if (v4)
    {
      fd_release(v4[560]);
      free(v4);
    }
    v5 = (char **)*((_QWORD *)a1 + 1);
    if (v5)
    {
      fd_release(v5[560]);
      free(v5);
    }
    v6 = (pthread_rwlock_t *)*((_QWORD *)a1 + 3);
    if (v6)
      posreadunlock(v6);
    free(a1);
  }
}

void fd_release(char *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  char *v6;
  char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a1)
  {
    v2 = (unsigned int *)(a1 + 32);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stxr(v4, v2));
    if (!v4)
    {
      if (*(_DWORD *)a1 != -50529037)
      {
        v6 = __si_assert_copy_extra_521(-1);
        v7 = v6;
        v8 = "";
        if (v6)
          v8 = v6;
        __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 482, "obj->_magic==(0xFCFCFCF3)", v8);
        free(v7);
        if (__valid_fs(-1))
          v9 = 2989;
        else
          v9 = 3072;
        *(_DWORD *)v9 = -559038737;
        abort();
      }
      v10 = 0;
      pthread_mutex_lock(&g_fd_lock);
      v5 = _fd_remove_locked((uint64_t)a1, &v10);
      pthread_mutex_unlock(&g_fd_lock);
      if (v5 != -1)
        guarded_close_np();
      *(_DWORD *)a1 = 0;
      free(*((void **)a1 + 9));
      if (*((_QWORD *)a1 + 10))
        fd_release();
      free(a1);
    }
  }
}

uint64_t ContentIndexQueryNodeHash(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int)*a1;
  if ((int)v1 >= 1)
  {
    v3 = 0;
    v4 = *a1;
    while (1)
    {
      v5 = (int *)&a1[4 * v3];
      v6 = v5[6];
      if ((int)v6 >= 1)
        break;
LABEL_19:
      if (++v3 == v4)
        return v1;
    }
    v7 = *((_QWORD *)v5 + 4);
    while (1)
    {
      v8 = *(unsigned int *)(v7 + 16);
      v9 = *(int *)(v7 + 20);
      v1 ^= v9 ^ v8 ^ *(int *)(v7 + 24);
      if ((v8 & 0x600) != 0)
      {
        v10 = 8 * v9;
      }
      else
      {
        if ((v8 & 0x10) == 0)
        {
          v11 = strlen(*(const char **)v7);
          v1 ^= commonHash(v11, *(_QWORD *)v7);
          v12 = *(_QWORD *)(v7 + 8);
          if (v12)
          {
            v13 = strlen(*(const char **)(v7 + 8));
            v1 ^= commonHash(v13, v12);
          }
          goto LABEL_8;
        }
        v14 = *(unsigned int *)(v7 + 60);
        v15 = v14 & 3;
        v16 = (v14 >> 2) & 3;
        if ((_DWORD)v15 == 3 || (_DWORD)v16 == 3)
          v10 = -1;
        else
          v10 = vector_dimension_vec_sizes_10743[v15] * vector_size_elem_sizes_10742[v16];
      }
      commonHash(v10, *(_QWORD *)v7);
LABEL_8:
      v7 += 64;
      if (!--v6)
        goto LABEL_19;
    }
  }
  return v1;
}

uint64_t commonHash(int a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;

  v2 = -1759636613;
  if (a1 >= 0)
    v3 = a1;
  else
    v3 = a1 + 3;
  v4 = (unsigned __int8 *)(a2 + (int)(v3 & 0xFFFFFFFC));
  if ((a1 + 3) >= 7)
  {
    v7 = -(v3 >> 2);
    v8 = -1789642873;
    v9 = 718793509;
    do
    {
      v8 = 5 * v8 + 2071795100;
      v9 = 5 * v9 + 1808688022;
      HIDWORD(v10) = v8 * *(_DWORD *)&v4[4 * v7];
      LODWORD(v10) = HIDWORD(v10);
      v11 = (v10 >> 21) * v9;
      HIDWORD(v10) = v2;
      LODWORD(v10) = v2;
      v2 = v11 ^ (5 * (v10 >> 19) + 1390208809);
    }
    while (!__CFADD__(v7++, 1));
    v6 = 5 * v8 + 2071795100;
    v5 = 5 * v9 + 1808688022;
  }
  else
  {
    v5 = 1107688271;
    v6 = 1713515327;
  }
  v13 = 0;
  v14 = a1 & 3;
  switch(v14)
  {
    case 1:
      goto LABEL_15;
    case 2:
LABEL_14:
      v13 |= v4[1] << 8;
LABEL_15:
      HIDWORD(v15) = (v13 ^ *v4) * v6;
      LODWORD(v15) = HIDWORD(v15);
      v16 = (v15 >> 21) * v5;
      HIDWORD(v15) = v2;
      LODWORD(v15) = v2;
      v2 = v16 ^ (5 * (v15 >> 19) + 1390208809);
      break;
    case 3:
      v13 = v4[2] << 16;
      goto LABEL_14;
  }
  v17 = -1028477387 * ((-2048144789 * (v2 ^ a1)) ^ ((-2048144789 * (v2 ^ a1)) >> 13));
  return v17 ^ HIWORD(v17);
}

void preparePostCheckQueries(SISearchCtx_METADATA **a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;

  v2 = *a1;
  if (!*(_QWORD *)(*((_QWORD *)*a1 + 105) + 8))
  {
    *(_QWORD *)(*((_QWORD *)*a1 + 105) + 8) = compileToSDBPostCheckQuery(v2[14]);
    v2 = *a1;
  }
  if (*((_DWORD *)v2 + 208) >= 2u)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = v2[105] + v3;
      v6 = *(_QWORD *)(v5 + 48);
      if (v6 && !*(_QWORD *)(v5 + 56))
      {
        v7 = (int *)translateSDBQuery(v6);
        *(_QWORD *)(*((_QWORD *)*a1 + 105) + v3 + 56) = compileToSDBPostCheckQuery((uint64_t)v7);
        siquerynode_release(v7);
        v2 = *a1;
      }
      ++v4;
      v3 += 48;
    }
    while (v4 < *((unsigned int *)v2 + 208));
  }
  *((_BYTE *)v2 + 642) = 1;
}

_QWORD *compileToSDBPostCheckQuery(uint64_t a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)compileToSDBTree(a1, (uint64_t (*)(void))factorRewrite);
  db_query_tree_apply_block_with_meta(v1, (uint64_t)&__block_literal_global_12_10702, 0);
  setupCannedFields((uint64_t)v1);
  return v1;
}

void __query_once_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _QWORD *query_node_with_ann;
  uint64_t v7;
  uint64_t tree_apply_block_with_meta;
  int *v9;
  BOOL v10;
  uint64_t v11;
  const __CFArray *v12;
  _BOOL4 v13;
  _QWORD v14[5];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(v2 + 200);
  if ((v3 & 0x600000) == 0 || (v3 & 0x600000) == 0x600000)
    goto LABEL_8;
  if ((v3 & 0x400000) != 0)
  {
    v4 = "kMDItemContentType!='com.apple.ical.ics.todo' || _kMDItemFinderExcluded!=1";
  }
  else
  {
    if ((v3 & 0x200000) == 0)
      goto LABEL_8;
    v4 = "_kMDItemGroupId!=6 || (kMDItemContentType=='com.apple.ical.ics.todo' || _kMDItemFinderExcluded!=1)";
  }
  v5 = *(_QWORD *)(v2 + 72);
  query_node_with_ann = db_make_query_node_with_ann(v4, 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72) = makeAndNode(v5, (uint64_t)query_node_with_ann, 1, 1);
  v2 = *(_QWORD *)(a1 + 32);
LABEL_8:
  v7 = *(_QWORD *)(v2 + 72);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v14[2] = __db_query_tree_apply_block_block_invoke;
  v14[3] = &unk_1E6E377F8;
  v14[4] = &__block_literal_global_31_3537;
  tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((_QWORD *)v7, (uint64_t)v14, (uint64_t)&__block_literal_global_34);
  v9 = (int *)tree_apply_block_with_meta;
  if (v7)
    v10 = tree_apply_block_with_meta == 0;
  else
    v10 = 1;
  if (!v10)
    *(_BYTE *)(tree_apply_block_with_meta + 16) = *(_BYTE *)(v7 + 48) & 1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(const __CFArray **)(v11 + 176);
  if (v12)
    v13 = CFArrayGetCount(v12) != 0;
  else
    v13 = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 136) = rewriteForSources((uint64_t)v9, (uint64_t **)(v11 + 128), v13);
  siquerynode_release(v9);
}

uint64_t rewriteForSources(uint64_t a1, uint64_t **a2, int a3)
{
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  uint64_t v19;
  size_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  int **v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  _OWORD *v42;
  _QWORD *v43;
  _OWORD *v44;
  _QWORD *v45;
  _OWORD *Node;
  _QWORD *v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  _QWORD *v51;
  uint64_t result;
  uint64_t *v53;
  char *v54;
  char *v55;
  const char *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;

  v6 = _splitAndGroupBySource(a1);
  *a2 = 0;
  if (!v6)
  {
    v54 = __si_assert_copy_extra_268();
    v55 = v54;
    v56 = "";
    if (v54)
      v56 = v54;
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 787, "s!=NONE", v56);
    free(v55);
    if (__valid_fs(-1))
      v57 = 2989;
    else
      v57 = 3072;
    *(_DWORD *)v57 = -559038737;
    abort();
  }
  calculateCost(a1);
  v58 = 0;
  v59 = 0;
  v7 = rewriteForFSSearching(a1, &v58, (void **)&v59);
  v8 = (uint64_t *)malloc_type_malloc(16 * v7, 0x20040A4A59CD2uLL);
  v10 = v58;
  v9 = v59;
  if (v7 < 1)
  {
    v20 = 0;
  }
  else
  {
    v11 = a3;
    v12 = 0;
    v13 = v7;
    v14 = 8 * v7;
    do
    {
      if (v10)
      {
        v15 = (_DWORD *)v9[v12 / 8];
        if (v15)
        {
          v16 = v10[v12 / 8];
          if (v16)
          {
            v17 = v15[1];
            if ((v17 & 3) != 0 && (*(_BYTE *)(v16 + 4) & 3) != 0 && !*(_BYTE *)(v16 + 15))
            {
              if (*MEMORY[0x1E0C85AD8] <= 0x27uLL)
                ++sTotal_3522;
              v15 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
              if (!v15)
                _log_fault_for_malloc_failure();
              *v15 = 1;
              v15[1] = *(_DWORD *)(v10[v12 / 8] + 4) | *(_DWORD *)(v9[v12 / 8] + 4);
              *((_QWORD *)v15 + 3) = 2;
              v18 = malloc_type_malloc(0x10uLL, 0x2004093837F09uLL);
              *((_QWORD *)v15 + 4) = v18;
              *v18 = v9[v12 / 8];
              *(_QWORD *)(*((_QWORD *)v15 + 4) + 8) = v10[v12 / 8];
              v10[v12 / 8] = 0;
              v9[v12 / 8] = (uint64_t)v15;
              v17 = v15[1];
            }
            if ((v17 & 3) == 0)
            {
              v19 = v10[v12 / 8];
              if (v19)
              {
                if ((*(_BYTE *)(v19 + 4) & 3) != 0 && !*((_BYTE *)v15 + 15))
                {
                  v10[v12 / 8] = (uint64_t)v15;
                  v9[v12 / 8] = v19;
                }
              }
            }
          }
        }
      }
      v12 += 8;
    }
    while (v14 != v12);
    v20 = 0;
    v21 = v9;
    v22 = v10;
    a3 = v11;
    do
    {
      if (v9)
        v23 = *v21;
      else
        v23 = 0;
      v8[2 * v20] = v23;
      if (v10)
        v24 = *v22;
      else
        v24 = 0;
      v8[2 * v20 + 1] = v24;
      if (v23)
        ++v20;
      ++v22;
      ++v21;
      --v13;
    }
    while (v13);
  }
  free(v10);
  free(v9);
  qsort_b(v8, v20, 0x10uLL, &__block_literal_global_3523);
  if (v20 >= 2)
  {
    v25 = v20 - 1;
    v26 = v8 + 3;
    v27 = 1;
    do
    {
      v28 = *(v26 - 3);
      if (*(_DWORD *)(v28 + 4) != 4)
        goto LABEL_45;
      v29 = *(v26 - 1);
      if (*(_DWORD *)(v29 + 4) != 4 || siquerynode_compare(v28, v29))
        goto LABEL_45;
      v30 = (int *)*(v26 - 2);
      if (v30)
      {
        v31 = *v26;
        if (*v26)
        {
          v32 = &v8[2 * v27 - 1];
          if (siquerynode_compare(*(v26 - 2), *v26))
            *v26 = (uint64_t)si_querynode_add((uint64_t)v30, v31);
          else
            siquerynode_release(v30);
          goto LABEL_44;
        }
        siquerynode_release((int *)*(v26 - 2));
      }
      siquerynode_release((int *)*v26);
      *(v26 - 2) = 0;
      v32 = v26;
LABEL_44:
      *v32 = 0;
      siquerynode_release((int *)*(v26 - 3));
      *(v26 - 3) = 0;
LABEL_45:
      ++v27;
      v26 += 2;
      --v25;
    }
    while (v25);
  }
  if (!v20)
    goto LABEL_79;
  v33 = 0;
  v34 = 0;
  v35 = (int **)v8;
  do
  {
    if (*v35)
    {
      LOBYTE(v59) = 0;
      *(_OWORD *)&v8[2 * v34] = *(_OWORD *)v35;
      v33 |= catSearchSupportsOneAttribute(*v35, &v59) ^ 1;
      ++v34;
    }
    v35 += 2;
    --v20;
  }
  while (v20);
  if ((v34 > 6) | (v33 | a3) & 1)
  {
    v36 = v34 - 1;
    if (v34 > 1)
    {
      v37 = v8 + 2;
      while (1)
      {
        v38 = *(v37 - 2);
        if (*(_DWORD *)(v38 + 4) != 4)
          goto LABEL_72;
        v39 = *v37;
        if (*(_DWORD *)(*v37 + 4) != 4)
          goto LABEL_72;
        v40 = (int *)*(v37 - 1);
        v41 = v37[1];
        if (v40)
          break;
        if (v41)
        {
          Node = cloneQueryNode(*v37, 0);
          v47 = si_querynode_join((uint64_t)Node, v37[1]);
          v48 = *(v37 - 2);
          if (!v48)
            goto LABEL_66;
LABEL_68:
          v49 = cloneQueryNode(v48, 0);
LABEL_69:
          v37[1] = (uint64_t)si_querynode_add((uint64_t)v47, (uint64_t)v49);
        }
LABEL_71:
        v51 = si_querynode_add(*v37, *(v37 - 2));
        *v37 = (uint64_t)v51;
        *((_DWORD *)v51 + 1) = 4;
        *(v37 - 2) = 0;
        *(v37 - 1) = 0;
LABEL_72:
        v37 += 2;
        if (!--v36)
          goto LABEL_73;
      }
      if (v41)
      {
        if (siquerynode_compare(*(v37 - 1), v41))
        {
          v42 = cloneQueryNode(v39, 0);
          v43 = si_querynode_join((uint64_t)v42, v37[1]);
          v44 = (_OWORD *)*(v37 - 2);
          if (v44)
            v44 = cloneQueryNode((uint64_t)v44, 0);
          v45 = si_querynode_join((uint64_t)v44, *(v37 - 1));
          si_querynode_add((uint64_t)v43, (uint64_t)v45);
        }
        else
        {
          siquerynode_release(v40);
        }
        goto LABEL_71;
      }
      v50 = cloneQueryNode(v38, 0);
      v47 = si_querynode_join((uint64_t)v50, *(v37 - 1));
      v48 = *v37;
      if (*v37)
        goto LABEL_68;
LABEL_66:
      v49 = 0;
      goto LABEL_69;
    }
  }
LABEL_73:
  if (v34 >= 1)
  {
    result = 0;
    v53 = v8;
    do
    {
      if (*v53)
        *(_OWORD *)&v8[2 * result++] = *(_OWORD *)v53;
      v53 += 2;
      --v34;
    }
    while (v34);
  }
  else
  {
LABEL_79:
    result = 0;
  }
  *a2 = v8;
  return result;
}

uint64_t calculateCost(uint64_t a1)
{
  int64_t v2;
  int64_t i;
  int64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  switch(*(_DWORD *)a1)
  {
    case 0:
      *(_DWORD *)(a1 + 8) = 0;
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 >= 1)
      {
        for (i = 0; i < v2; ++i)
        {
          *(_DWORD *)(a1 + 8) += calculateCost(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i));
          v2 = *(_QWORD *)(a1 + 24);
        }
      }
      goto LABEL_16;
    case 1:
      *(_DWORD *)(a1 + 8) = 0x7FFFFFFF;
      v2 = *(_QWORD *)(a1 + 24);
      if (v2 <= 0)
      {
LABEL_16:
        v5 = *(_QWORD **)(a1 + 32);
      }
      else
      {
        v4 = 0;
        v5 = *(_QWORD **)(a1 + 32);
        do
        {
          v6 = calculateCost(v5[v4]);
          v5 = *(_QWORD **)(a1 + 32);
          if (*(_DWORD *)(a1 + 8) <= v6)
          {
            v7 = v5[v4];
          }
          else
          {
            *(_DWORD *)(a1 + 8) = v6;
            v7 = v5[v4];
            if (*(_BYTE *)(v7 + 14))
              v8 = 1;
            else
              v8 = *(_DWORD *)(v7 + 4) == 4;
            *(_BYTE *)(a1 + 14) = v8;
          }
          *(_BYTE *)(a1 + 15) |= *(_BYTE *)(v7 + 15);
          ++v4;
          v2 = *(_QWORD *)(a1 + 24);
        }
        while (v4 < v2);
      }
      qsort(v5, v2, 8uLL, (int (__cdecl *)(const void *, const void *))compare_node_cost);
      break;
    case 2:
      *(_DWORD *)(a1 + 8) = calculateCost(*(_QWORD *)(a1 + 24));
      break;
    case 3:
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
      if (v9)
        LODWORD(v9) = *(_DWORD *)(v9 + 48);
      *(_DWORD *)(a1 + 8) = v9;
      break;
    default:
      return *(unsigned int *)(a1 + 8);
  }
  return *(unsigned int *)(a1 + 8);
}

uint64_t catSearchSupportsOneAttribute(int *a1, _BYTE *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  const char *v10;
  int v11;
  _BYTE *v12;

  v4 = *a1;
  if (!*a1)
  {
    if (*((uint64_t *)a1 + 3) >= 1)
    {
      v6 = 0;
      do
        catSearchSupportsOneAttribute(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8 * v6++), a2);
      while (*((_QWORD *)a1 + 3) > v6);
    }
    return 0;
  }
  if (v4 == 3)
  {
    v7 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 16);
    if (!v7)
      return 0;
    v8 = *(_QWORD *)(v7 + 32);
    if ((v8 & 0x800) == 0)
      return 0;
    v10 = *(const char **)v7;
    result = strcmp(*(const char **)v7, "kMDItemFSInvisible");
    if ((_DWORD)result)
    {
      if (strcmp(v10, "kMDItemFSName"))
      {
        result = strcmp(v10, "_kMDItemFSContentType");
        if ((_DWORD)result)
        {
          result = strcmp(v10, "_kMDItemFSContentTypeTree");
          if ((_DWORD)result)
          {
            result = strcmp(v10, "_kMDItemFSDisplayKind");
            if ((_DWORD)result)
              return strcmp(v10, "_kMDItemFSGroupId") != 0;
          }
        }
        return result;
      }
      v12 = *(_BYTE **)(v7 + 72);
      if (!v12 || *v12 != 46)
        return 0;
      result = 0;
      if ((v8 & 0x40) != 0)
        return result;
      v11 = *(_DWORD *)(v7 + 24);
      if (v11 != 1)
        return result;
      result = 0;
    }
    else
    {
      LOBYTE(v11) = 1;
    }
    *a2 = v11;
    return result;
  }
  if (v4 != 1 || *((uint64_t *)a1 + 3) < 1)
    return 0;
  v5 = 0;
  while (!catSearchSupportsOneAttribute(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8 * v5), a2) || *a2)
  {
    if (*((_QWORD *)a1 + 3) <= ++v5)
      return 0;
  }
  return 1;
}

uint64_t _splitAndGroupBySource(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  char v26;
  const char *v27;
  int v28;
  _DWORD *v29;
  int v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD **v38;
  _OWORD *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char *v44;
  char *v45;
  const char *v46;
  uint64_t v47;
  char *v48;
  const char *v49;
  int v50;
  int v51;
  int *v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v53 = 0u;
  v54 = 0u;
  if (!a1)
    return 0;
  *(_BYTE *)(a1 + 12) = 0;
  v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 2u)
  {
    MEMORY[0x1E0C80A78](a1);
    v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v7, v6);
    if (*(uint64_t *)(a1 + 24) < 1)
    {
      v3 = 0;
LABEL_18:
      if (((0xE8uLL >> v3) & 1) != 0)
      {
        v52 = &v50;
        v17 = DWORD1(v53);
        if (DWORD1(v53))
          v18 = clone_node_copyingkind(a1, 1, (int *)v7, DWORD1(v53));
        else
          v18 = 0;
        v50 = DWORD2(v53);
        if (DWORD2(v53))
          v19 = clone_node_copyingkind(a1, 2, (int *)v7, DWORD2(v53));
        else
          v19 = 0;
        v20 = HIDWORD(v53);
        if (HIDWORD(v53))
          v21 = clone_node_copyingkind(a1, 3, (int *)v7, HIDWORD(v53));
        else
          v21 = 0;
        v22 = v54;
        v51 = v17;
        if ((_DWORD)v54)
        {
          v23 = clone_node_copyingkind(a1, 4, (int *)v7, v54);
          v24 = v23;
          v25 = *(_DWORD *)a1;
          if (*(_DWORD *)a1)
          {
            *(_BYTE *)(a1 + 13) |= *((_BYTE *)v23 + 13);
            if (v25 == 1)
            {
              if (*((_BYTE *)v23 + 15))
                v26 = 1;
              else
                v26 = *(_BYTE *)(a1 + 15);
              *(_BYTE *)(a1 + 15) = v26;
            }
          }
          else
          {
            *(_BYTE *)(a1 + 12) = 1;
            *(_BYTE *)(a1 + 13) |= *((_BYTE *)v23 + 13);
          }
        }
        else
        {
          v24 = 0;
        }
        v28 = HIDWORD(v54);
        if (HIDWORD(v54))
        {
          v29 = clone_node_copyingkind(a1, 7, (int *)v7, HIDWORD(v54));
          v30 = *(_DWORD *)a1;
          if (*(_DWORD *)a1)
          {
            *(_BYTE *)(a1 + 13) |= *((_BYTE *)v29 + 13);
            if (v30 == 1)
            {
              if (*((_BYTE *)v29 + 15))
                v31 = 1;
              else
                v31 = *(_BYTE *)(a1 + 15);
              *(_BYTE *)(a1 + 15) = v31;
            }
          }
          else
          {
            *(_BYTE *)(a1 + 12) = 1;
            *(_BYTE *)(a1 + 13) |= *((_BYTE *)v29 + 13);
          }
        }
        else
        {
          v29 = 0;
        }
        *(_QWORD *)(a1 + 24) = 0;
        if (v18)
        {
          v32 = *(_QWORD **)(a1 + 32);
          *(_QWORD *)(a1 + 24) = 1;
          *v32 = v18;
          v33 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          v33 = 0;
        }
        if (v19)
        {
          v34 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 24) = v33 + 1;
          *(_QWORD *)(v34 + 8 * v33) = v19;
          v33 = *(_QWORD *)(a1 + 24);
        }
        if (v21)
        {
          v35 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 24) = v33 + 1;
          *(_QWORD *)(v35 + 8 * v33) = v21;
          v33 = *(_QWORD *)(a1 + 24);
        }
        if (v24)
        {
          v36 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 24) = v33 + 1;
          *(_QWORD *)(v36 + 8 * v33) = v24;
          v33 = *(_QWORD *)(a1 + 24);
        }
        if (v29)
        {
          v37 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 24) = v33 + 1;
          *(_QWORD *)(v37 + 8 * v33) = v29;
          v33 = *(_QWORD *)(a1 + 24);
        }
        if (v33 == 1)
        {
          v38 = *(_OWORD ***)(a1 + 32);
          v39 = *v38;
          v40 = *((_QWORD *)*v38 + 4);
          v41 = (*v38)[1];
          *(_OWORD *)a1 = **v38;
          *(_OWORD *)(a1 + 16) = v41;
          *(_QWORD *)(a1 + 32) = v40;
          free(v39);
          free(v38);
        }
        else
        {
          if (!*(_DWORD *)a1)
            goto LABEL_89;
          if (v33 >= 1)
          {
            v42 = *(_QWORD *)(a1 + 32);
            do
            {
              if (*(_BYTE *)(*(_QWORD *)v42 + 15))
                *(_BYTE *)(a1 + 15) = 1;
              v42 += 8;
              --v33;
            }
            while (v33);
          }
          if (!(v50 | v51 | v20))
          {
LABEL_89:
            if (v28 | v22)
              *(_BYTE *)(a1 + 12) = 1;
          }
        }
      }
      *(_DWORD *)(a1 + 4) = v3;
      return v3;
    }
    v8 = 0;
    LODWORD(v3) = 0;
    v9 = *(_QWORD *)(a1 + 32);
    v10 = v7;
    while (1)
    {
      v11 = _splitAndGroupBySource(*(_QWORD *)(v9 + 8 * v8));
      if (!v11)
        break;
      v12 = bucket[v11];
      ++*((_DWORD *)&v53 + v12);
      v3 = v11 | v3;
      v13 = *(_QWORD *)(a1 + 24);
      v9 = *(_QWORD *)(a1 + 32);
      v14 = *(_BYTE *)(a1 + 13) | *(_BYTE *)(*(_QWORD *)(v9 + 8 * v8) + 13);
      *v10 = v12;
      v10[1] = v8;
      v10 += 2;
      *(_BYTE *)(a1 + 13) = v14;
      if (v13 <= ++v8)
        goto LABEL_18;
    }
    v44 = __si_assert_copy_extra_268();
    v45 = v44;
    v46 = "";
    if (v44)
      v46 = v44;
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 365, "s!=NONE", v46);
LABEL_80:
    free(v45);
    if (__valid_fs(-1))
      v47 = 2989;
    else
      v47 = 3072;
    *(_DWORD *)v47 = -559038737;
    abort();
  }
  if (v2 == 2)
  {
    v15 = _splitAndGroupBySource(*(_QWORD *)(a1 + 24));
    if ((_DWORD)v15)
    {
      v3 = v15;
      *(_DWORD *)(a1 + 4) = v15;
      v16 = *(_QWORD *)(a1 + 24);
      *(_BYTE *)(a1 + 13) = *(_BYTE *)(v16 + 13);
      *(_BYTE *)(a1 + 15) = *(_BYTE *)(v16 + 15);
      return v3;
    }
    v48 = __si_assert_copy_extra_268();
    v45 = v48;
    v49 = "";
    if (v48)
      v49 = v48;
    __message_assert("%s:%u: failed assertion '%s' %s ", "siquerynode.c", 410, "source!=NONE", v49);
    goto LABEL_80;
  }
  v3 = 0;
  if (v2 == 3)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
    if (!v4)
      goto LABEL_8;
    v5 = *(_QWORD *)(v4 + 32);
    if ((v5 & 0x400) != 0)
    {
      v3 = 1;
      goto LABEL_35;
    }
    if ((v5 & 0x800) == 0)
    {
LABEL_8:
      v3 = 2;
LABEL_35:
      *(_DWORD *)(a1 + 4) = v3;
      return v3;
    }
    v3 = 4;
    *(_DWORD *)(a1 + 4) = 4;
    if (!strcmp(*(const char **)v4, "kMDItemFSInvisible"))
    {
      v27 = *(const char **)(v4 + 72);
      if (strcmp(v27, "*") && (strcmp(v27, "0") != 0) != (*(_DWORD *)(v4 + 24) == 5))
      {
        *(_BYTE *)(a1 + 13) = 1;
        *(_BYTE *)(a1 + 15) = 1;
      }
      return 4;
    }
  }
  return v3;
}

uint64_t rewriteForFSSearching(uint64_t a1, uint64_t **a2, void **a3)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  size_t v15;
  uint64_t v16;
  uint64_t *v17;
  _OWORD *Node;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  size_t v32;
  size_t *v33;
  void *v35;
  unint64_t v36;
  size_t v37;
  void *v38;
  size_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  size_t v44;
  uint64_t i;
  void *v46;
  uint64_t *v48;
  void *v49;
  uint64_t **v51;
  void *v52;
  void *v53;

  v6 = *(_DWORD *)(a1 + 4);
  if ((v6 & 4) == 0 && !*(_BYTE *)(a1 + 13))
    goto LABEL_69;
  if (!*(_BYTE *)(a1 + 12) && !*(_BYTE *)(a1 + 13))
  {
    if ((v6 & 4) != 0 && !*(_DWORD *)a1)
    {
LABEL_43:
      v31 = *(_QWORD *)(a1 + 24);
      v32 = 8 * v31;
      v33 = (size_t *)MEMORY[0x1E0C85AD8];
      if (((v31 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && v32 > *MEMORY[0x1E0C85AD8])
        ++sTotal_3522;
      v35 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v32, 0x31F9A007uLL);
      if (!v35)
        _log_fault_for_malloc_failure();
      v36 = *(_QWORD *)(a1 + 24);
      v37 = 8 * v36;
      if (((v36 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && v37 > *v33)
        ++sTotal_3522;
      v38 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v37, 0x31F9A007uLL);
      if (!v38)
        _log_fault_for_malloc_failure();
      v51 = a2;
      v39 = malloc_size(v35);
      if (*(uint64_t *)(a1 + 24) < 1)
      {
        v23 = 0;
      }
      else
      {
        v23 = 0;
        v40 = 0;
        v41 = v39 >> 3;
        do
        {
          v52 = 0;
          v53 = 0;
          v42 = rewriteForFSSearching(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v40), &v53, &v52);
          if (v41 <= v42 + (int)v23)
          {
            v43 = v41;
            do
            {
              v41 = 2 * v43;
              v44 = 16 * v43;
              v35 = malloc_type_realloc(v35, 16 * v43, 0x2004093837F09uLL);
              v38 = malloc_type_realloc(v38, v44, 0x2004093837F09uLL);
              v43 = v41;
            }
            while (v41 <= v42 + (int)v23);
          }
          if (v42 >= 1)
          {
            for (i = 0; i != v42; *((_QWORD *)v38 + (int)v23 + i++) = v46)
            {
              *((_QWORD *)v35 + (int)v23 + i) = *((_QWORD *)v52 + i);
              v46 = v53;
              if (v53)
                v46 = (void *)*((_QWORD *)v53 + i);
            }
            v23 = (int)v23 + i;
          }
          free(v53);
          free(v52);
          ++v40;
        }
        while (v40 < *(_QWORD *)(a1 + 24));
      }
      *v51 = (uint64_t *)v38;
      *a3 = v35;
      return v23;
    }
LABEL_69:
    *a2 = 0;
    *a3 = malloc_type_malloc(8uLL, 0x2004093837F09uLL);
    *(_QWORD *)*a3 = cloneQueryNode(a1, 0);
    return 1;
  }
  switch(*(_DWORD *)a1)
  {
    case 0:
      goto LABEL_43;
    case 1:
      v7 = *(_QWORD *)(a1 + 24);
      v8 = *(uint64_t **)(a1 + 32);
      v9 = *v8;
      if (v7 >= 2)
      {
        v10 = v7 - 1;
        v11 = v8 + 1;
        do
        {
          if (*(_DWORD *)(*v11 + 8) < *(_DWORD *)(v9 + 8) || *(_BYTE *)(*v11 + 13))
            v9 = *v11;
          ++v11;
          --v10;
        }
        while (v10);
      }
      v52 = 0;
      v53 = 0;
      v12 = rewriteForFSSearching(v9, &v53, &v52);
      v13 = v12;
      v14 = (uint64_t *)v53;
      if (!v53)
      {
        v15 = 8 * (int)v12;
        if ((((unint64_t)(int)v12 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && v15 > *MEMORY[0x1E0C85AD8])
          ++sTotal_3522;
        v14 = (uint64_t *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v15, 0x31F9A007uLL);
        if (!v14)
          _log_fault_for_malloc_failure();
      }
      if ((int)v13 >= 1)
      {
        v16 = v13;
        v17 = v14;
        do
        {
          Node = cloneQueryNode(a1, v9);
          if (v14)
          {
            v19 = Node;
            if (*v17)
            {
              if (*(_DWORD *)Node == 3)
              {
                v19 = si_querynode_join((uint64_t)Node, *v17);
              }
              else
              {
                v20 = malloc_type_realloc(*((void **)Node + 4), (8 * *((_QWORD *)Node + 3)) | 1, 0xB1030DEuLL);
                v19[4] = v20;
                v21 = *v17;
                v22 = v19[3];
                v19[3] = v22 + 1;
                v20[v22] = v21;
              }
            }
            *v17 = (uint64_t)v19;
          }
          ++v17;
          --v16;
        }
        while (v16);
      }
      *a2 = v14;
      *a3 = v52;
      v23 = v13;
      break;
    case 2:
      v52 = 0;
      v53 = 0;
      v24 = rewriteForFSSearching(*(_QWORD *)(a1 + 24), &v53, &v52);
      v23 = v24;
      v48 = (uint64_t *)v53;
      v49 = v52;
      if ((int)v24 >= 1)
      {
        v25 = (_QWORD *)MEMORY[0x1E0C85AD8];
        v27 = v53;
        v26 = v52;
        v28 = v24;
        do
        {
          if (*v25 <= 0x27uLL)
            ++sTotal_3522;
          v29 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
          if (!v29)
            _log_fault_for_malloc_failure();
          *(_DWORD *)v29 = 2;
          v29[3] = *v26;
          *v26 = v29;
          if (*v25 <= 0x27uLL)
            ++sTotal_3522;
          v30 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
          if (!v30)
            _log_fault_for_malloc_failure();
          *(_DWORD *)v30 = 2;
          v30[3] = *v27;
          *v27++ = v30;
          ++v26;
          --v28;
        }
        while (v28);
      }
      *a3 = v49;
      *a2 = v48;
      break;
    case 3:
      goto LABEL_69;
    default:
      v23 = 0;
      MEMORY[0xBAD] = -559038737;
      break;
  }
  return v23;
}

uint64_t executeOneCracked(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10)
{
  void *v10;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;

  v10 = a9;
  if (*(_BYTE *)(a8 + 96))
    goto LABEL_5;
  v17 = *(unsigned __int8 *)(a1 + 689);
  v18 = a8;
  do
  {
    v19 = v18;
    v18 = *(_QWORD *)(v18 + 80);
  }
  while (v18);
  if (*(_BYTE *)(*(_QWORD *)(v19 + 8) + 12))
  {
LABEL_5:
    if (a10 >= 1)
    {
      v20 = 0;
      v21 = MEMORY[0x1E0C809B0];
      do
      {
        v22 = (_QWORD *)*((_QWORD *)a9 + v20);
        if (v22)
        {
          v36 = v21;
          v37 = 0x40000000;
          v38 = __db_query_tree_apply_block_block_invoke;
          v39 = &unk_1E6E377F8;
          v40 = &__block_literal_global_143;
          db_query_tree_apply_block_with_meta(v22, (uint64_t)&v36, 0);
        }
        ++v20;
      }
      while (a10 != v20);
    }
    goto LABEL_31;
  }
  v23 = *(_DWORD *)(a2 + 4);
  v24 = *(_QWORD *)(a1 + 576);
  if ((v23 & 4) != 0)
    goto LABEL_19;
  if (v23 == 2 && v24 != 0)
    goto LABEL_20;
  if (!*(_QWORD *)(a4 + 1184))
  {
LABEL_19:
    if (!v24)
    {
      if ((v23 & 3) == 0 || !*(_QWORD *)(a4 + 1184) || *(_BYTE *)(a2 + 14) || *(_BYTE *)(a2 + 15))
        goto LABEL_5;
      v34 = a5;
      v35 = a6;
      v26 = operator new();
      SISearchCtx_METADATA::SISearchCtx_METADATA((SISearchCtx_METADATA *)v26, *(_BYTE *)(a4 + 2072), (*(_DWORD *)(a4 + 6584) & 0x40000) != 0);
      v28 = *(_QWORD *)(a8 + 88);
      if (v28)
        goto LABEL_21;
      goto LABEL_27;
    }
LABEL_20:
    v34 = a5;
    v35 = a6;
    v26 = operator new();
    *(_QWORD *)v26 = off_1E6E29FF0;
    *(_OWORD *)(v26 + 8) = 0u;
    *(_OWORD *)(v26 + 24) = 0u;
    *(_QWORD *)(v26 + 40) = 0;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 72) = 0u;
    *(_OWORD *)(v26 + 81) = 0u;
    *(_OWORD *)(v26 + 104) = 0u;
    *(_OWORD *)(v26 + 120) = 0u;
    *(_OWORD *)(v26 + 136) = 0u;
    *(_OWORD *)(v26 + 148) = 0u;
    *(_OWORD *)(v26 + 176) = 0u;
    *(_OWORD *)(v26 + 192) = 0u;
    *(_OWORD *)(v26 + 208) = 0u;
    *(_OWORD *)(v26 + 224) = 0u;
    *(_QWORD *)(v26 + 240) = -1;
    *(_DWORD *)(v26 + 248) = 0;
    *(_DWORD *)(v26 + 304) = 0;
    *(_OWORD *)(v26 + 256) = 0u;
    *(_OWORD *)(v26 + 272) = 0u;
    *(_OWORD *)(v26 + 344) = 0u;
    v29 = MEMORY[0x1E0C809B0];
    *(_OWORD *)(v26 + 312) = 0u;
    *(_OWORD *)(v26 + 328) = 0u;
    v36 = v29;
    v37 = 0x40000000;
    v38 = ___ZN11SISearchCtxC2Ev_block_invoke;
    v39 = &__block_descriptor_tmp_4;
    v40 = (void *)v26;
    *(_QWORD *)(v26 + 288) = md_deadline_once_create();
    *(_QWORD *)(v26 + 296) = dispatch_time(0, 500000000);
    *(_QWORD *)v26 = &off_1E6E2A1A8;
    *(_OWORD *)(v26 + 360) = 0u;
    *(_OWORD *)(v26 + 376) = 0u;
    *(_OWORD *)(v26 + 392) = 0u;
    v28 = *(_QWORD *)(a8 + 88);
    if (v28)
      goto LABEL_21;
LABEL_27:
    v30 = 0;
    goto LABEL_28;
  }
  v34 = a5;
  v35 = a6;
  v26 = operator new();
  v32 = (*(_DWORD *)(a4 + 6584) >> 18) & 1;
  v33 = *(_BYTE *)(a4 + 2072);
  *(_QWORD *)v26 = off_1E6E29FF0;
  *(_OWORD *)(v26 + 8) = 0u;
  *(_OWORD *)(v26 + 24) = 0u;
  *(_QWORD *)(v26 + 40) = 0;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *(_OWORD *)(v26 + 81) = 0u;
  *(_OWORD *)(v26 + 104) = 0u;
  *(_OWORD *)(v26 + 120) = 0u;
  *(_OWORD *)(v26 + 136) = 0u;
  *(_OWORD *)(v26 + 148) = 0u;
  *(_OWORD *)(v26 + 176) = 0u;
  *(_OWORD *)(v26 + 192) = 0u;
  *(_OWORD *)(v26 + 208) = 0u;
  *(_OWORD *)(v26 + 224) = 0u;
  *(_QWORD *)(v26 + 240) = -1;
  *(_DWORD *)(v26 + 248) = 0;
  *(_DWORD *)(v26 + 304) = 0;
  *(_OWORD *)(v26 + 256) = 0u;
  *(_OWORD *)(v26 + 272) = 0u;
  *(_OWORD *)(v26 + 312) = 0u;
  *(_OWORD *)(v26 + 328) = 0u;
  v27 = MEMORY[0x1E0C809B0];
  *(_OWORD *)(v26 + 344) = 0u;
  v36 = v27;
  v37 = 0x40000000;
  v38 = ___ZN11SISearchCtxC2Ev_block_invoke;
  v39 = &__block_descriptor_tmp_4;
  v40 = (void *)v26;
  *(_QWORD *)(v26 + 288) = md_deadline_once_create();
  *(_QWORD *)(v26 + 296) = dispatch_time(0, 500000000);
  *(_QWORD *)v26 = &off_1E6E2A138;
  *(_DWORD *)(v26 + 360) = 9;
  *(_OWORD *)(v26 + 368) = 0u;
  *(_DWORD *)(v26 + 384) = 0;
  *(_OWORD *)(v26 + 400) = 0u;
  *(_OWORD *)(v26 + 416) = 0u;
  *(_OWORD *)(v26 + 432) = 0u;
  *(_OWORD *)(v26 + 448) = 0u;
  *(_OWORD *)(v26 + 464) = 0u;
  *(_OWORD *)(v26 + 480) = 0u;
  *(_OWORD *)(v26 + 496) = 0u;
  *(_QWORD *)(v26 + 512) = 0;
  *(_OWORD *)(v26 + 528) = 0u;
  *(_OWORD *)(v26 + 544) = 0u;
  *(_OWORD *)(v26 + 560) = 0u;
  *(_OWORD *)(v26 + 576) = 0u;
  *(_WORD *)(v26 + 592) = 0;
  *(_OWORD *)(v26 + 596) = 0u;
  *(_OWORD *)(v26 + 612) = 0u;
  *(_OWORD *)(v26 + 628) = 0u;
  *(_QWORD *)(v26 + 642) = 0;
  *(_BYTE *)(v26 + 650) = v33;
  *(_DWORD *)(v26 + 652) = 0;
  *(_BYTE *)(v26 + 656) = v32;
  *(_QWORD *)(v26 + 664) = 0;
  *(_DWORD *)(v26 + 672) = 0;
  *(_QWORD *)(v26 + 840) = 0;
  *(_DWORD *)(v26 + 848) = 0;
  *(_QWORD *)(v26 + 1160) = 0;
  *(_DWORD *)(v26 + 1168) = 0;
  *(_QWORD *)(v26 + 1176) = 0;
  *(_BYTE *)(v26 + 1184) = 0;
  *(_OWORD *)(v26 + 680) = 0u;
  *(_OWORD *)(v26 + 696) = 0u;
  *(_OWORD *)(v26 + 712) = 0u;
  *(_OWORD *)(v26 + 728) = 0u;
  *(_OWORD *)(v26 + 744) = 0u;
  *(_OWORD *)(v26 + 760) = 0u;
  *(_OWORD *)(v26 + 776) = 0u;
  *(_OWORD *)(v26 + 792) = 0u;
  *(_OWORD *)(v26 + 808) = 0u;
  *(_OWORD *)(v26 + 820) = 0u;
  *(_WORD *)(v26 + 1128) = 0;
  *(_OWORD *)(v26 + 1096) = 0u;
  *(_OWORD *)(v26 + 1112) = 0u;
  *(_OWORD *)(v26 + 1064) = 0u;
  *(_OWORD *)(v26 + 1080) = 0u;
  *(_OWORD *)(v26 + 1032) = 0u;
  *(_OWORD *)(v26 + 1048) = 0u;
  *(_OWORD *)(v26 + 1000) = 0u;
  *(_OWORD *)(v26 + 1016) = 0u;
  *(_OWORD *)(v26 + 968) = 0u;
  *(_OWORD *)(v26 + 984) = 0u;
  *(_OWORD *)(v26 + 936) = 0u;
  *(_OWORD *)(v26 + 952) = 0u;
  *(_OWORD *)(v26 + 904) = 0u;
  *(_OWORD *)(v26 + 920) = 0u;
  *(_OWORD *)(v26 + 872) = 0u;
  *(_OWORD *)(v26 + 888) = 0u;
  *(_OWORD *)(v26 + 856) = 0u;
  *(_DWORD *)(v26 + 1152) = 0;
  *(_OWORD *)(v26 + 1136) = 0u;
  v28 = *(_QWORD *)(a8 + 88);
  if (!v28)
    goto LABEL_27;
LABEL_21:
  v30 = *(_QWORD *)(v28 + 120);
LABEL_28:
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, void *, uint64_t, BOOL))(*(_QWORD *)v26 + 64))(v26, a1, a4, a2, a3, v34, v35, v30, *(_QWORD *)(a1 + 240), a8, a7, a9, a10, v17 != 0) & 1) != 0)
  {
    SISearchCtx::executeSearchContext((SISearchCtx *)v26, 0);
    return 1;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v10 = 0;
LABEL_31:
  free(v10);
  return 0;
}

void SISearchCtx::executeSearchContext(SISearchCtx *this, SISearchCtx *a2)
{
  char v2;
  _QWORD *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  NSObject *v10;
  _DWORD v11[2];
  uint64_t v12;

  v2 = (char)a2;
  v12 = *MEMORY[0x1E0C80C00];
  if (dword_1EF19FCC0 >= 5)
  {
    v9 = *__error();
    v10 = _SILogForLogForCategory(13);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 67109120;
      v11[1] = qos_class_self();
      _os_log_impl(&dword_1B8270000, v10, OS_LOG_TYPE_DEFAULT, "QOS executeSearchCtx: %d", (uint8_t *)v11, 8u);
    }
    *__error() = v9;
  }
  if (*MEMORY[0x1E0C85AD8] <= 0x2FuLL)
    ++sTotal;
  v4 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x30uLL, 0x31F9A007uLL);
  if (!v4)
    _log_fault_for_malloc_failure();
  *v4 = this;
  v4[3] = *((_QWORD *)this + 1);
  *((_BYTE *)v4 + 32) = v2;
  v4[5] = _Block_copy(&__block_literal_global_11473);
  if ((v2 & 1) != 0)
  {
    suspendOthers(this);
    *((CFAbsoluteTime *)v4 + 1) = CFAbsoluteTimeGetCurrent();
    executeSearchCtx_Start((uint64_t)v4, 0);
  }
  else
  {
    v5 = si_querypipe_copy_jobid(*((_QWORD *)this + 13));
    if (v5)
    {
      v6 = (uint64_t)v5;
      v7 = (unsigned int *)(*((_QWORD *)this + 13) + 64);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
      *((CFAbsoluteTime *)v4 + 1) = CFAbsoluteTimeGetCurrent();
      v4[2] = "executeSearchContextCracked";
      suspendOthers(this);
      (*(void (**)(SISearchCtx *, void (*)(uint64_t, uint64_t), _QWORD *, uint64_t))(*(_QWORD *)this + 24))(this, executeSearchCtx_Start, v4, v6);
      si_release_qid(v6);
    }
    else
    {
      search_ctx_destroy(v4, 1);
    }
  }
}

uint64_t suspendOthers(SISearchCtx *a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  os_log_type_t v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  _QWORD **v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[4];
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(SISearchCtx *))(*(_QWORD *)a1 + 16))(a1);
  if ((result & 1) == 0)
  {
    if (*((int *)a1 + 76) < -1)
    {
      LODWORD(v3) = 0;
    }
    else
    {
      v3 = 0;
      v4 = -2;
      do
      {
        if (*(_QWORD *)(*((_QWORD *)a1 + 3) + 8 * (v4 + 2) + 1008))
        {
          v5 = *__error();
          v6 = _SILogForLogForCategory(1);
          v7 = 2 * (dword_1EF19FC90 < 4);
          if (os_log_type_enabled(v6, v7))
          {
            *(_DWORD *)buf = 67109120;
            v34 = v4 + 2;
            _os_log_impl(&dword_1B8270000, v6, v7, "Suspending root query scheduler(%d)", buf, 8u);
          }
          result = (uint64_t)__error();
          *(_DWORD *)result = v5;
          v8 = **(_QWORD ***)(*((_QWORD *)a1 + 3) + 8 * (v4 + 2) + 1008);
          while (v8)
          {
            result = (uint64_t)v8;
            v8 = (_QWORD *)*v8;
            if (!v8)
            {
              v9 = (char *)a1 + 8 * v3;
              if (*((_QWORD *)v9 + 39))
              {
                v15 = __si_assert_copy_extra_268();
                __message_assert_272((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, (char)"SISearchCtx.cpp");
                free(v15);
                if (__valid_fs(-1))
                  v23 = 2989;
                else
                  v23 = 3072;
                *(_DWORD *)v23 = -559038737;
                abort();
              }
              v10 = v9 + 312;
              result = (uint64_t)si_scheduler_suspend_async(result);
              *v10 = result;
              break;
            }
          }
        }
        ++v4;
        ++v3;
      }
      while (v4 < *((int *)a1 + 76));
    }
    v11 = *(_QWORD ***)(*((_QWORD *)a1 + 3) + 1072);
    if (v11)
    {
      v12 = *v11;
      while (v12)
      {
        result = (uint64_t)v12;
        v12 = (_QWORD *)*v12;
        if (!v12)
        {
          v13 = (char *)a1 + 8 * v3;
          if (*((_QWORD *)v13 + 39) || v3 >= 5)
          {
            v24 = __si_assert_copy_extra_268();
            __message_assert_272((uint64_t)v24, v25, v26, v27, v28, v29, v30, v31, (char)"SISearchCtx.cpp");
            free(v24);
            if (__valid_fs(-1))
              v32 = 2989;
            else
              v32 = 3072;
            *(_DWORD *)v32 = -559038737;
            abort();
          }
          v14 = v13 + 312;
          result = (uint64_t)si_scheduler_suspend_async(result);
          *v14 = result;
          return result;
        }
      }
    }
  }
  return result;
}

unsigned int *si_scheduler_suspend_async(uint64_t a1)
{
  unsigned int *v2;
  int v3;
  unsigned int v4;

  if (!a1 || *(_DWORD *)(a1 + 88))
    return 0;
  v2 = (unsigned int *)malloc_type_calloc(1uLL, 0x30uLL, 0x10A0040B618E767uLL);
  atomic_store(1u, v2);
  *((_QWORD *)v2 + 1) = a1;
  pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
  v3 = *(_DWORD *)(a1 + 100);
  if (v3)
  {
    *(_DWORD *)(a1 + 100) = v3 + 1;
    *((_BYTE *)v2 + 4) = 1;
  }
  else
  {
    *((_QWORD *)v2 + 2) = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v2;
    do
      v4 = __ldaxr(v2);
    while (__stlxr(v4 + 1, v2));
    if (!*((_QWORD *)v2 + 2) && !*(_DWORD *)(a1 + 104))
      _scheduler_suspension_locked(a1);
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
  return v2;
}

void _scheduler_suspension_locked(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  NSObject *v3;
  _QWORD block[5];

  v1 = (unsigned int *)(a1 + 80);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  v3 = *(NSObject **)(a1 + 136);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___scheduler_suspension_locked_block_invoke;
  block[3] = &__block_descriptor_tmp_64;
  block[4] = a1;
  dispatch_barrier_async(v3, block);
}

uint64_t SISearchCtx_METADATA::enqueue(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  int v9;
  NSObject *v10;
  _DWORD v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (dword_1EF19FCC0 >= 5)
  {
    v9 = *__error();
    v10 = _SILogForLogForCategory(13);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 67109120;
      v11[1] = qos_class_self();
      _os_log_impl(&dword_1B8270000, v10, OS_LOG_TYPE_DEFAULT, "enqueue at qos 0x%x", (uint8_t *)v11, 8u);
    }
    *__error() = v9;
  }
  return si_sdb_enqueue(*(_QWORD *)(a1 + 24), a4, a2, a3, *(_DWORD *)(a1 + 304));
}

uint64_t si_sdb_enqueue(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, int a5)
{
  int v10;
  int v11;
  int v13;
  NSObject *v14;
  char *v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  uint8_t buf[4];
  qos_class_t v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (dword_1EF19FCC0 >= 5)
  {
    v13 = *__error();
    v14 = _SILogForLogForCategory(13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      v20 = qos_class_self();
      v21 = 1024;
      v22 = a5;
      _os_log_impl(&dword_1B8270000, v14, OS_LOG_TYPE_DEFAULT, "QOS si_sdb_enqueue: %d priority: %d", buf, 0xEu);
    }
    *__error() = v13;
  }
  if (a5 <= -2)
    v10 = -2;
  else
    v10 = a5;
  if (v10 >= 1)
    v11 = 1;
  else
    v11 = v10;
  if (!*(_QWORD *)(a1 + 8 * (v11 + 2) + 1008))
  {
    v15 = __si_assert_copy_extra_521(*(_DWORD *)(a1 + 32));
    v16 = v15;
    v17 = "";
    if (v15)
      v17 = v15;
    __message_assert("%s:%u: failed assertion '%s' %s No query work queue for priority %d", "SIJob.c", 106, "ref->workqueues.queues[SI_QUERY_QUEUE_IDX+priority]!=0", v17, v11);
    free(v16);
    if (__valid_fs(*(_DWORD *)(a1 + 32)))
      v18 = 2989;
    else
      v18 = 3072;
    *(_DWORD *)v18 = -559038737;
    abort();
  }
  return si_enqueue_routine(a1, a2, a3, a4, v11 + 2);
}

uint64_t si_enqueue_routine(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, unsigned int a5)
{
  pthread_mutex_t *v9;

  v9 = (pthread_mutex_t *)(a2 + 48);
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 48));
  if (*(_DWORD *)(a2 + 36))
  {
    pthread_mutex_unlock(v9);
    return a3(a4, 1);
  }
  else
  {
    si_enqueue_work_for_job(*(_QWORD *)(a1 + 8 * a5 + 1008), (uint64_t)a3, a4, a2);
    return pthread_mutex_unlock(v9);
  }
}

void si_enqueue_work_for_job(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD block[9];

  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }
  v6 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __si_enqueue_work_for_job_block_invoke;
  block[3] = &__block_descriptor_tmp_3;
  block[4] = v5;
  block[5] = a1;
  block[6] = a2;
  block[7] = a3;
  block[8] = a4;
  dispatch_sync(v6, block);
}

uint64_t SISearchCtx::fsContext(SISearchCtx *this)
{
  return 0;
}

void SISearchCtx::initContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, CFArrayRef theArray, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  const __CFString *v22;
  CFIndex Length;
  CFIndex v24;
  char *v25;
  CFTypeRef v26;
  uint64_t v27;
  unsigned int v28;
  _OWORD *Node;
  _OWORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  CFIndex Count;
  CFIndex v35;
  size_t v36;
  const void **v37;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFTypeID v40;
  const void *v41;
  int v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  _OWORD *v50;
  uint8_t buf[4];
  uint64_t v52;
  uint64_t v53;

  v48 = a8;
  v49 = a4;
  v50 = (_OWORD *)a5;
  v47 = a3;
  v16 = a11;
  v17 = a12;
  v53 = *MEMORY[0x1E0C80C00];
  v18 = (unsigned int *)(a2 + 584);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  *(_QWORD *)(a1 + 8) = a2;
  if (a2)
  {
    v20 = *(_QWORD *)(a2 + 576);
    if (v20)
    {
      CFRetain(*(CFTypeRef *)(a2 + 576));
      v21 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 88) = v20;
      if (!v21)
        goto LABEL_15;
    }
    else
    {
      *(_QWORD *)(a1 + 88) = 0;
      v21 = a2;
    }
    v22 = *(const __CFString **)(v21 + 48);
    if (v22)
    {
      Length = CFStringGetLength(v22);
      v24 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
      v46 = a11;
      v25 = (char *)malloc_type_malloc(v24, 0xE8B1CA25uLL);
      CFStringGetCString(*(CFStringRef *)(v21 + 48), v25, v24, 0x8000100u);
      v21 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 264) = v25;
      v17 = a12;
      v16 = v46;
      if (!v21)
        goto LABEL_15;
    }
    else
    {
      *(_QWORD *)(a1 + 264) = 0;
    }
    v26 = *(CFTypeRef *)(v21 + 40);
    if (v26)
      v26 = CFRetain(v26);
    *(_QWORD *)(a1 + 72) = v26;
  }
LABEL_15:
  v27 = *(_QWORD *)(a9 + 88);
  if (v27)
    CFRetain(*(CFTypeRef *)(a9 + 88));
  *(_QWORD *)(a1 + 16) = v27;
  do
    v28 = __ldaxr((unsigned int *)a9);
  while (__stlxr(v28 + 1, (unsigned int *)a9));
  *(_QWORD *)(a1 + 104) = a9;
  *(_QWORD *)(a1 + 24) = v47;
  Node = v49;
  *(_QWORD *)(a1 + 152) = v48;
  if (Node)
    Node = cloneQueryNode((uint64_t)Node, 0);
  *(_QWORD *)(a1 + 112) = Node;
  v30 = v50;
  if (v50)
    v30 = cloneQueryNode((uint64_t)v50, 0);
  *(_QWORD *)(a1 + 120) = v30;
  if (a10)
    CFRetain(a10);
  *(_QWORD *)(a1 + 56) = a10;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = a7;
  *(_QWORD *)(a1 + 48) = a7;
  v31 = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = v31;
  v32 = (a7 & 0xF) - 2;
  if ((a7 & 0xC) != 0)
    v32 = 1;
  *(_DWORD *)(a1 + 304) = v32;
  if (v31 == 4 && !*(_BYTE *)(a2 + 357))
    *(_QWORD *)(a1 + 208) = CFDictionaryCreateMutable((CFAllocatorRef)kCIQueryZoneAllocator, 0, 0, MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 56);
  v33 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = v33;
  *(_QWORD *)(a1 + 184) = v33;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    if (Count >= 1)
    {
      v35 = Count;
      v46 = v16;
      v49 = &v45;
      v50 = (_OWORD *)v17;
      MEMORY[0x1E0C80A78](Count);
      v37 = (const void **)((char *)&v45 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v37, v36);
      for (i = 0; i != v35; ++i)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, i);
        v40 = CFGetTypeID(ValueAtIndex);
        if (v40 == CFStringGetTypeID() && !CFStringHasSuffix(ValueAtIndex, CFSTR("/")))
        {
          ValueAtIndex = CFStringCreateWithFormat((CFAllocatorRef)kCIQueryZoneAllocator, 0, CFSTR("%@/"), ValueAtIndex);
        }
        else if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
        }
        v37[i] = ValueAtIndex;
      }
      *(_QWORD *)(a1 + 32) = CFArrayCreate((CFAllocatorRef)kCIQueryZoneAllocator, v37, v35, MEMORY[0x1E0C9B378]);
      do
      {
        v41 = *v37++;
        CFRelease(v41);
        --v35;
      }
      while (v35);
      v17 = (uint64_t)v50;
      v16 = v46;
      if (dword_1EF19FC90 > 4)
      {
        v42 = *__error();
        v43 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          v44 = *(_QWORD *)(a1 + 32);
          *(_DWORD *)buf = 138412290;
          v52 = v44;
          _os_log_impl(&dword_1B8270000, v43, OS_LOG_TYPE_DEFAULT, "Scopes: %@", buf, 0xCu);
        }
        *__error() = v42;
      }
    }
  }
  *(_QWORD *)(a1 + 224) = v16;
  *(_QWORD *)(a1 + 232) = v17;
}

_OWORD *cloneQueryNode(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  _QWORD *v8;
  uint64_t Node;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  void **v15;
  _OWORD *v16;
  _QWORD v18[5];

  v4 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A2040E651BF2BuLL);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 16);
  *v4 = *(_OWORD *)a1;
  v4[1] = v6;
  *((_QWORD *)v4 + 4) = v5;
  v7 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 < 2u)
  {
    v10 = malloc_type_calloc(1uLL, 8 * *(_QWORD *)(a1 + 24), 0x2004093837F09uLL);
    *((_QWORD *)v4 + 3) = 0;
    *((_QWORD *)v4 + 4) = v10;
    v11 = *(_QWORD *)(a1 + 24);
    if (v11 >= 1)
    {
      v12 = 0;
      for (i = 0; i < v11; ++i)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i);
        if (v14 != a2)
        {
          *(_QWORD *)(*((_QWORD *)v4 + 4) + 8 * *((_QWORD *)v4 + 3)) = cloneQueryNode(v14, 0);
          v12 = *((_QWORD *)v4 + 3) + 1;
          *((_QWORD *)v4 + 3) = v12;
          v11 = *(_QWORD *)(a1 + 24);
        }
      }
      if (v12 == 1)
      {
        v15 = (void **)*((_QWORD *)v4 + 4);
        v16 = *v15;
        free(v15);
        free(v4);
        v4 = v16;
      }
    }
  }
  else
  {
    if (v7 == 2)
    {
      Node = cloneQueryNode(*(_QWORD *)(a1 + 24), 0);
      goto LABEL_13;
    }
    if (v7 == 3)
    {
      v8 = *(_QWORD **)(a1 + 24);
      v18[0] = MEMORY[0x1E0C809B0];
      v18[1] = 0x40000000;
      v18[2] = __db_query_tree_apply_block_block_invoke;
      v18[3] = &unk_1E6E377F8;
      v18[4] = &__block_literal_global_17_10736;
      Node = db_query_tree_apply_block_with_meta(v8, (uint64_t)v18, (uint64_t)&__block_literal_global_20_10737);
LABEL_13:
      *((_QWORD *)v4 + 3) = Node;
    }
  }
  *((_BYTE *)v4 + 15) = *(_BYTE *)(a1 + 15);
  return v4;
}

void PartialQueryResults::setupCannedCollectAttributeVector(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v8;
  size_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char **v16;

  v8 = *(_QWORD *)(a1 + 232);
  v9 = 8 * v8;
  if (((v8 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && v9 > *MEMORY[0x1E0C85AD8])
    ++sTotal;
  v11 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v9, 0x31F9A007uLL);
  if (!v11)
    _log_fault_for_malloc_failure();
  *a3 = v11;
  v12 = *(_QWORD *)(a1 + 232);
  if (v12 < 1)
  {
    v14 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (const char *)strlen(*(const char **)(a2 + 8 * v13));
      v16 = CannedFieldTable::in_word_set(*(CannedFieldTable **)(a2 + 8 * v13), v15);
      if (v16)
      {
        *(_QWORD *)(*a3 + 8 * v13) = v16[3];
        ++v14;
      }
      ++v13;
    }
    while (v12 != v13);
  }
  *a4 = v14;
}

uint64_t compileToIndexQuery(uint64_t a1, double a2)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __int16 v12;

  v4 = compileToSDBTree(a1, (uint64_t (*)(void))indexFactorRewrite);
  setupCannedFields(v4);
  _rewriteQuery((_QWORD *)v4, a2);
  v5 = *(_WORD *)(v4 + 40);
  if ((v5 & 8) != 0)
  {
    v6 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v7 = *(_QWORD *)(v4 + 8);
      if (v7)
      {
        v8 = *(unsigned __int16 *)(v6 + 40);
        if (v8 == 4)
        {
          v9 = *(_QWORD *)(v6 + 16);
          if (v9)
            LODWORD(v9) = (*(_DWORD *)(v9 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v9 + 24));
        }
        else
        {
          LODWORD(v9) = 0;
        }
        if ((_DWORD)v9 != ((v8 >> 3) & 1))
          goto LABEL_14;
        v10 = *(unsigned __int16 *)(v7 + 40);
        if (v10 == 4)
        {
          v11 = *(_QWORD *)(v7 + 16);
          if (v11)
            LODWORD(v11) = (*(_DWORD *)(v11 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v11 + 24));
        }
        else
        {
          LODWORD(v11) = 0;
        }
        if ((_DWORD)v11 != ((v10 >> 3) & 1))
        {
LABEL_14:
          if ((v5 & 2) != 0)
          {
            v12 = 1;
          }
          else
          {
            if ((v5 & 1) == 0)
            {
LABEL_19:
              negateQuery(v6);
              negateQuery(*(_QWORD *)(v4 + 8));
              goto LABEL_20;
            }
            v12 = 2;
          }
          *(_WORD *)(v4 + 40) = v12;
          goto LABEL_19;
        }
      }
    }
  }
LABEL_20:
  if (*(_BYTE *)(a1 + 16))
    *(_WORD *)(v4 + 48) |= 1u;
  return v4;
}

const char **setupCannedFields(uint64_t a1)
{
  const char **result;
  uint64_t v3;
  const char *v4;

  if (*(_QWORD *)a1)
    setupCannedFields();
  result = *(const char ***)(a1 + 8);
  if (result)
    result = (const char **)setupCannedFields();
  if (*(_WORD *)(a1 + 40) == 4)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (!*(_QWORD *)(v3 + 8))
    {
      v4 = (const char *)strlen(*(const char **)v3);
      result = CannedFieldTable::in_word_set(*(CannedFieldTable **)v3, v4);
      if (result)
      {
        *(_QWORD *)(v3 + 32) |= 0x80uLL;
        *(_QWORD *)(v3 + 8) = _qpCannedFieldQuery;
      }
    }
  }
  return result;
}

const char **CannedFieldTable::in_word_set(CannedFieldTable *this, const char *a2)
{
  unsigned int v2;
  const char **v3;
  const char *v4;

  if (((_DWORD)a2 - 11) > 0x1B)
    return 0;
  if (((_DWORD)a2 - 12) >= 6)
  {
    if ((_DWORD)a2 == 11)
      goto LABEL_4;
    LODWORD(a2) = CannedFieldTable::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                                 + 17)]
                + (_DWORD)a2;
  }
  LODWORD(a2) = (_DWORD)a2
              + CannedFieldTable::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this
                                                                                               + 11)];
LABEL_4:
  v2 = (_DWORD)a2
     + CannedFieldTable::hash(char const*,unsigned int)::asso_values[*((unsigned __int8 *)this + 10)];
  if (v2 > 0x74)
    return 0;
  v3 = (const char **)((char *)&CannedFieldTable::in_word_set(char const*,unsigned int)::wordlist + 40 * v2);
  v4 = *v3;
  if (!*v3 || *(unsigned __int8 *)this != *(unsigned __int8 *)v4 || strcmp((const char *)this + 1, v4 + 1))
    return 0;
  return v3;
}

uint64_t compileToSDBTree(uint64_t a1, uint64_t (*a2)(void))
{
  __int16 v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t tree_apply_block_with_meta;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  void *v38;
  void *v39;

  v4 = 2;
  switch(*(_DWORD *)a1)
  {
    case 0:
      v4 = 1;
      goto LABEL_3;
    case 1:
LABEL_3:
      v5 = *(_QWORD *)(a1 + 24) / 2;
      v6 = (_QWORD *)MEMORY[0x1E0C85AD8];
      if (((v5 >> 14) & 0x7FFFFFFFFFFFLL) == 0
        && (unint64_t)(8 * (*(_QWORD *)(a1 + 24) / 2)) > *MEMORY[0x1E0C85AD8])
      {
        ++sTotal_3522;
      }
      v8 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, v5, 8uLL, 0x31F9A007uLL);
      if (!v8)
        _log_fault_for_malloc_failure();
      v9 = *(_QWORD *)(a1 + 24);
      v33 = v9 - 1;
      if (v9 == 1)
        goto LABEL_19;
      v10 = *(_QWORD *)(a1 + 24);
      v11 = 0;
      do
      {
        if (*v6 <= 0x47uLL)
          ++sTotal_3522;
        v12 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
        if (!v12)
          _log_fault_for_malloc_failure();
        *v12 = compileToSDBTree(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11), a2);
        v12[1] = compileToSDBTree(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11 + 8), a2);
        *((_WORD *)v12 + 20) = v4;
        *((_WORD *)v12 + 24) = v12[6] & 0xFDFF | (*(unsigned __int8 *)(a1 + 17) << 9);
        v8[v11 / 2] = v12;
        v11 += 2;
      }
      while (v11 < v33);
      v9 = v10;
      if ((v10 & 1) != 0)
      {
LABEL_19:
        if (*v6 <= 0x47uLL)
          ++sTotal_3522;
        v13 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
        if (!v13)
          _log_fault_for_malloc_failure();
        *v13 = compileToSDBTree(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v33), a2);
        v14 = 2;
        if (v9 >> 1 > 2)
          v14 = v9 >> 1;
        v15 = &v8[v14];
        v13[1] = *(v15 - 2);
        *((_WORD *)v13 + 20) = v4;
        *((_WORD *)v13 + 24) = v13[6] & 0xFDFF | (*(unsigned __int8 *)(a1 + 17) << 9);
        *(v15 - 2) = v13;
      }
      if (v9 >= 4)
      {
        do
        {
          v32 = v9 >> 1;
          v34 = v9;
          v16 = (v9 >> 1) - 1;
          if (v9 >> 1 != 1)
          {
            v17 = 0;
            v18 = v8;
            do
            {
              if (*v6 <= 0x47uLL)
                ++sTotal_3522;
              v19 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
              if (!v19)
                _log_fault_for_malloc_failure();
              v20 = &v8[v17];
              *v19 = *v20;
              v19[1] = v20[1];
              *((_WORD *)v19 + 20) = v4;
              *((_WORD *)v19 + 24) = v19[6] & 0xFDFF | (*(unsigned __int8 *)(a1 + 17) << 9);
              *v18++ = v19;
              v17 += 2;
            }
            while (v17 < v16);
          }
          if ((v34 & 2) != 0)
          {
            if (*v6 <= 0x47uLL)
              ++sTotal_3522;
            v21 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
            if (!v21)
              _log_fault_for_malloc_failure();
            v22 = v34 >> 2;
            *v21 = v8[v16];
            if (v34 >> 2 <= 2)
              v22 = 2;
            v23 = &v8[v22];
            v21[1] = *(v23 - 2);
            *((_WORD *)v21 + 20) = v4;
            *((_WORD *)v21 + 24) = v21[6] & 0xFDFF | (*(unsigned __int8 *)(a1 + 17) << 9);
            *(v23 - 2) = v21;
          }
          v9 = v32;
        }
        while (v34 > 7);
      }
      v24 = *v8;
      if (*(_BYTE *)(a1 + 17))
        *(_WORD *)(v24 + 40) |= 8u;
      free(v8);
      return v24;
    case 2:
      v24 = compileToSDBTree(*(_QWORD *)(a1 + 24), a2);
      v35 = MEMORY[0x1E0C809B0];
      v36 = 0x40000000;
      v37 = __db_query_tree_apply_block_block_invoke;
      v38 = &unk_1E6E377F8;
      v39 = &__block_literal_global_10697;
      db_query_tree_apply_block_with_meta((_QWORD *)v24, (uint64_t)&v35, 0);
      return v24;
    case 3:
      v25 = *(_QWORD **)(a1 + 24);
      v26 = v25[2];
      if (!a2)
      {
        v27 = *(_DWORD *)(v26 + 24);
        if ((*(_BYTE *)(a1 + 4) & 4) != 0)
        {
          if (v27 == 2)
          {
            v28 = 1;
            goto LABEL_65;
          }
          if (v27 == 6)
          {
            v28 = 5;
LABEL_65:
            *(_DWORD *)(v26 + 24) = v28;
            v25 = *(_QWORD **)(a1 + 24);
          }
        }
        v35 = MEMORY[0x1E0C809B0];
        v36 = 0x40000000;
        v37 = __db_query_tree_apply_block_block_invoke;
        v38 = &unk_1E6E377F8;
        v39 = &__block_literal_global_17_10736;
        tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(v25, (uint64_t)&v35, (uint64_t)&__block_literal_global_20_10737);
        goto LABEL_67;
      }
      if (v26)
        v27 = *(_DWORD *)(v26 + 24);
      else
        v27 = 0;
      if ((*(_BYTE *)(a1 + 4) & 4) != 0)
      {
        if (v27 == 2)
        {
          v29 = 1;
          goto LABEL_63;
        }
        if (v27 == 6)
        {
          v29 = 5;
LABEL_63:
          *(_DWORD *)(v26 + 24) = v29;
          tree_apply_block_with_meta = ((uint64_t (*)(_QWORD))a2)(*(_QWORD *)(a1 + 24));
LABEL_67:
          v24 = tree_apply_block_with_meta;
          goto LABEL_68;
        }
      }
      v24 = a2();
      if (!v27)
        return v24;
LABEL_68:
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 24) = v27;
      return v24;
    default:
      return 0;
  }
}

uint64_t indexFactorRewrite(_QWORD *a1)
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = __db_query_tree_apply_block_block_invoke;
  v2[3] = &unk_1E6E377F8;
  v2[4] = &__block_literal_global_17_10736;
  return db_query_tree_apply_block_with_meta(a1, (uint64_t)v2, (uint64_t)&__block_literal_global_20_10737);
}

void _rewriteQuery(_QWORD *a1, double a2)
{
  void *v2;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[5];

  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = ___rewriteQuery_block_invoke;
  v3[3] = &unk_1E6E2F6A8;
  v3[4] = &v4;
  *(double *)&v3[5] = a2;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __db_query_tree_apply_block_block_invoke;
  v8[3] = &unk_1E6E377F8;
  v8[4] = v3;
  db_query_tree_apply_block_with_meta(a1, (uint64_t)v8, (uint64_t)&__block_literal_global_17);
  v2 = (void *)v5[3];
  if (v2)
    OSAtomicEnqueue(&s_si_calendar_head, v2, 0);
  _Block_object_dispose(&v4, 8);
}

uint64_t factorRewrite(_QWORD *a1)
{
  uint64_t tree_apply_block_with_meta;
  uint64_t v2;
  const char *v3;
  const __CFString *v4;
  CFIndex Length;
  int CharacterFromSet;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  CFRange result;
  uint64_t (*v12)(uint64_t);
  void *v13;
  void *v14;
  CFRange v15;
  CFRange v16;

  result.location = MEMORY[0x1E0C809B0];
  result.length = 0x40000000;
  v12 = __db_query_tree_apply_block_block_invoke;
  v13 = &unk_1E6E377F8;
  v14 = &__block_literal_global_17_10736;
  tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(a1, (uint64_t)&result, (uint64_t)&__block_literal_global_20_10737);
  v2 = *(_QWORD *)(tree_apply_block_with_meta + 16);
  if (!v2)
    return tree_apply_block_with_meta;
  if ((*(_QWORD *)(v2 + 32) & 0x440) == 0x40)
  {
    v3 = *(const char **)(v2 + 72);
    result.location = 0;
    result.length = 0;
    v4 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)kCIQueryZoneAllocator, v3, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    Length = CFStringGetLength(v4);
    if (initCharSets_onceToken != -1)
      dispatch_once(&initCharSets_onceToken, &__block_literal_global_39);
    v15.location = 0;
    v15.length = Length;
    if (CFStringFindCharacterFromSet(v4, (CFCharacterSetRef)_cjkChars, v15, 0, &result))
    {
      CFRelease(v4);
    }
    else
    {
      v16.location = 0;
      v16.length = Length;
      CharacterFromSet = CFStringFindCharacterFromSet(v4, (CFCharacterSetRef)_infixChars, v16, 0, &result);
      CFRelease(v4);
      if (!CharacterFromSet)
        goto LABEL_9;
    }
    v7 = *(_QWORD *)(tree_apply_block_with_meta + 16);
    v8 = *(char **)(v7 + 72);
    asprintf((char **)(v7 + 72), "*%s", v8);
    free(v8);
  }
LABEL_9:
  v9 = *(_QWORD *)(tree_apply_block_with_meta + 16);
  if (v9)
    *(_QWORD *)(v9 + 16) = _qpPostcheckMatch;
  return tree_apply_block_with_meta;
}

uint64_t currentCategoryCount(uint64_t a1)
{
  CFIndex LastIndexOfBit;
  CFRange v4;

  if (!*(_BYTE *)(a1 + 2072))
    return 22;
  os_unfair_lock_lock((os_unfair_lock_t)&group_assignment_lock);
  v4.location = 0;
  v4.length = 256;
  LastIndexOfBit = CFBitVectorGetLastIndexOfBit(*(CFBitVectorRef *)(a1 + 2096), v4, 1u);
  os_unfair_lock_unlock((os_unfair_lock_t)&group_assignment_lock);
  if (LastIndexOfBit == -1)
    return 1;
  else
    return (LastIndexOfBit + 1);
}

uint64_t PayloadIterate_UpdateSet(uint64_t result, uint64_t a2, uint64_t a3, int8x8_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, unsigned __int8 a10)
{
  float v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t **v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  int v25;
  int v26;
  int v27;

  if (a2)
  {
    v10 = *(float *)a4.i32;
    v13 = a2;
    v14 = result;
    v15 = a10 | ((unint64_t)a4.u32[0] << 32);
    v16 = (unint64_t **)(result + 128);
    do
    {
      if ((*(_BYTE *)v13 & 1) != 0)
      {
        if (*(_DWORD *)(v13 + 4))
          v25 = 1;
        else
          v25 = 2;
        result = (uint64_t)handleUpdate((_QWORD *)v14, *(_QWORD *)(v13 + 8), v25, v15);
      }
      else if (!*(_QWORD *)(v14 + 136)
             || (v17 = *(unsigned int *)(v13 + 8), **v16 < v17)
             || (result = checkAgainstChangeHolder((uint64_t)v16, *(_QWORD *)(v14 + 112) + v17), (result & 1) == 0))
      {
        if ((a9 & 1) == 0 && _CIIndexSetRemoveIndex(*(int **)(v14 + 96), *(_DWORD *)(v13 + 8)))
          --*(_DWORD *)(v14 + 104);
        v18 = *(unsigned int **)(v14 + 88);
        v19 = *(_DWORD *)(v13 + 8);
        v26 = -1;
        result = _CIIndexSetAddIndex(v18, v19, 0, &v26, a4);
        if ((_DWORD)result)
        {
          if (a9)
          {
            v20 = *(unsigned int **)(v14 + 96);
            v21 = *(_DWORD *)(v13 + 8);
            v27 = -1;
            result = _CIIndexSetAddIndex(v20, v21, 0, &v27, a4);
            if ((_DWORD)result)
              ++*(_DWORD *)(v14 + 104);
          }
        }
        if (a10)
        {
          v22 = *(unsigned int **)(v14 + 72);
          if (!v22)
          {
            v22 = (unsigned int *)malloc_type_calloc(1uLL, 0x28uLL, 0x10200406E8F4065uLL);
            atomic_store(1u, v22 + 8);
            *(_QWORD *)(v14 + 72) = v22;
          }
          result = distanceHolderSetMinDistance((uint64_t)v22, *(_QWORD *)(v14 + 112) + *(unsigned int *)(v13 + 8), v10);
        }
      }
      v23 = *(_DWORD *)v13;
      v13 = a3 + 12 * (*(_DWORD *)v13 >> 1);
    }
    while (v23 >= 2 && a3 != 0);
  }
  return result;
}

BOOL _CIIndexSetAddIndex(unsigned int *cf, unsigned int a2, _QWORD *a3, _DWORD *a4, int8x8_t a5)
{
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  int v16;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  CFTypeID v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (cf[5] > a2 || cf[6] < a2)
    return 0;
  v8 = cf[4];
  if (v8 < -9)
    goto LABEL_4;
  v14 = 0;
  v18 = cf + 8;
  while (1)
  {
    if (v8 < 0)
    {
      if (v8 > 0xFFFFFFFD)
      {
        v20 = 0;
LABEL_41:
        cf[4] = v8 - 1;
      }
      else
      {
        v19 = 0;
        v20 = (-2 - v8);
        while (1)
        {
          v21 = cf[v19 + 8];
          if (v21 < a2)
            break;
          if (v21 == a2)
            return 0;
          if (v20 == ++v19)
          {
            if (v8 != -6)
              goto LABEL_41;
            goto LABEL_20;
          }
        }
        if (v8 == -6)
        {
LABEL_20:
          _CIIndexSetMakeSpace(cf, 1, 0, a4, 0);
          v8 = cf[4];
          goto LABEL_21;
        }
        cf[4] = v8 - 1;
        v28 = v19;
        memmove(&v18[(v19 + 1)], &v18[v19], 4 * ((int)v20 - (int)v19));
        v20 = v28;
      }
      v18[v20] = a2;
      return 1;
    }
    v22 = CFGetTypeID(cf);
    v23 = cf[4];
    if (v22 == __kCIIndexSetInvertedTypeID)
    {
      if (v23)
      {
        v29 = binarySearchMap((uint64_t)cf, a2);
        v30 = v29;
        v31 = (int)cf[9];
        if ((int)v31 <= (int)v29)
        {
          v14 = 0;
          v32 = cf[8];
          if (v29 >= v32 || v29 < v32 + (_DWORD)v31 - cf[4])
            return v14;
        }
        v33 = *((_QWORD *)cf + 5);
        if (*(_DWORD *)(v33 + 4 * v29) == a2)
        {
          v34 = cf[8];
          v35 = cf[4];
          if (v31 <= v29)
          {
            v41 = v34 - v35 + v31;
            v42 = v29 - v41;
            if (v29 <= v41)
            {
LABEL_67:
              cf[4] = v35 - 1;
              return 1;
            }
            memmove((void *)(v33 + 4 * v31), (const void *)(v33 + 4 * v41), 4 * (v29 - v41));
            v30 = cf[9] + v42;
          }
          else
          {
            memmove((void *)(v33 + 4 * (v34 - (v35 - v29) + 1)), (const void *)(v33 + 4 * (v29 + 1)), 4 * (v31 - v29 - 1));
          }
          cf[9] = v30;
          v35 = cf[4];
          goto LABEL_67;
        }
      }
      return 0;
    }
    v24 = v23 ? searchMapWithHint((uint64_t)cf, a2, a4, 1) : 0;
    v25 = (int)cf[9];
    if (v24 == (_DWORD)v25)
    {
      v8 = cf[4];
      v26 = cf[8];
      if (v8 < v26)
        goto LABEL_61;
    }
    else
    {
      v26 = *v18;
      if (v24 != *v18 && *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v24) == a2)
        return v14;
      v8 = cf[4];
      if (v26 > v8)
      {
        v39 = *((_QWORD *)cf + 5);
        if ((int)v25 >= v24)
        {
          memmove((void *)(v39 + 4 * (v24 - v8 + v26)), (const void *)(v39 + 4 * v24), 4 * ((int)v25 - v24));
        }
        else
        {
          memmove((void *)(v39 + 4 * v25), (const void *)(v39 + 4 * (v26 - v8 + v25)), 4 * (v24 - (v26 - v8 + v25)));
          v24 = v24 - cf[8] + cf[4];
        }
        cf[9] = v24;
LABEL_61:
        v40 = *((_QWORD *)cf + 5);
        if (v24 && *(_DWORD *)(v40 + 4 * v24 - 4) <= a2)
        {
          v43 = __si_assert_copy_extra_268();
          __message_assert_272((uint64_t)v43, v44, v45, v46, v47, v48, v49, v50, (char)"CIIndexSet.c");
          free(v43);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        *(_DWORD *)(v40 + 4 * v24) = a2;
        ++cf[9];
        ++cf[4];
        return 1;
      }
    }
    if (v8 <= -10)
      break;
    v27 = -2 - v8;
    if (v8 >= -1)
      v27 = v8;
    else
      v26 = 4;
    if (v26 < v27 + 1)
    {
      _CIIndexSetMakeSpace(cf, 1, a3, a4, 0);
      v8 = cf[4];
    }
    v14 = 1;
LABEL_21:
    if (v8 < -9)
      goto LABEL_4;
  }
  v37 = cf[6] - cf[5];
  v38 = -9 - v8;
  if (v37 + 1 < v38)
    v38 = v37 + 1;
  cf[4] = -10 - v38;
LABEL_4:
  v9 = cf[6] - a2;
  v10 = *((_QWORD *)cf + 5);
  v11 = 4 * (v9 >> 5);
  v12 = *(_DWORD *)(v10 + v11);
  v13 = 1 << v9;
  v14 = (v13 & v12) == 0;
  *(_DWORD *)(v10 + v11) = v13 | v12;
  if ((v13 & v12) == 0)
  {
    v15 = cf[6] - cf[5];
    if (v15 + 1 < -9 - cf[4])
      v16 = v15 + 1;
    else
      v16 = -9 - cf[4];
    cf[4] = -10 - v16;
  }
  _CIIndexSetConvertIfInvertedArrayIsMoreEfficient(cf, a3, a5);
  return v14;
}

BOOL _CIIndexSetRemoveIndex(int *cf, unsigned int a2)
{
  _BOOL8 result;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  CFTypeID v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;

  if (cf[5] > a2 || cf[6] < a2)
    return 0;
  if (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID)
  {
    v47 = -1;
    v5 = cf[4];
    if (v5 > -10)
    {
      if (v5 >= -1)
        v8 = cf[8];
      else
        v8 = 4;
      if (v5 < -1)
        v5 = -2 - v5;
      if (v8 < v5 + 1)
        _CIIndexSetMakeSpace((unsigned int *)cf, 1, 0, &v47, 0);
    }
    else
    {
      v6 = cf[6] - cf[5];
      v7 = -9 - v5;
      if (v6 + 1 < v7)
        v7 = v6 + 1;
      cf[4] = -10 - v7;
    }
  }
  v9 = CFGetTypeID(cf);
  v10 = cf[4];
  if (v9 == __kCIIndexSetInvertedTypeID)
  {
    if (v10)
    {
      v11 = binarySearchMap((uint64_t)cf, a2);
      v10 = v11;
      v12 = cf[4];
      if (v12 && v11 != cf[9] && v11 != cf[8] && *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v11) == a2)
        return 0;
    }
    else
    {
      v12 = 0;
    }
    v17 = cf[8];
    if (v17 != v12)
    {
      v18 = cf[9];
      if ((_DWORD)v18 == v10)
      {
LABEL_34:
        v19 = *((_QWORD *)cf + 5);
        if (v10 && *(_DWORD *)(v19 + 4 * v10 - 4) <= a2)
        {
          v35 = __si_assert_copy_extra_268();
          __message_assert_272((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42, (char)"CIIndexSet.c");
          free(v35);
          if (__valid_fs(-1))
            v43 = 2989;
          else
            v43 = 3072;
          *(_DWORD *)v43 = -559038737;
          abort();
        }
        *(_DWORD *)(v19 + 4 * v10) = a2;
        ++cf[9];
        v20 = cf[4] + 1;
        goto LABEL_37;
      }
      v27 = *((_QWORD *)cf + 5);
      if ((int)v18 >= v10)
      {
        memmove((void *)(v27 + 4 * (v17 - (v12 - v10))), (const void *)(v27 + 4 * v10), 4 * ((int)v18 - v10));
      }
      else
      {
        memmove((void *)(v27 + 4 * v18), (const void *)(v27 + 4 * (v18 + v17 - v12)), 4 * (v10 - (v18 + v17 - v12)));
        v10 = v10 - cf[8] + cf[4];
      }
    }
    cf[9] = v10;
    goto LABEL_34;
  }
  if (!v10)
    return 0;
  if (v10 > -10)
  {
    if (v10 < 0)
    {
      if (v10 > 0xFFFFFFFD)
        return 0;
      v28 = cf[8];
      if (v28 < a2)
        return 0;
      if (v28 == a2)
      {
        v29 = 0;
        v30 = (char *)(cf + 8);
      }
      else
      {
        if (v10 == -3)
          return 0;
        v30 = (char *)(cf + 9);
        v33 = cf[9];
        if (v33 < a2)
          return 0;
        if (v33 == a2)
        {
          v29 = 1;
        }
        else
        {
          if (v10 == -4)
            return 0;
          v30 = (char *)(cf + 10);
          v34 = cf[10];
          if (v34 < a2)
            return 0;
          if (v34 == a2)
          {
            v29 = 2;
          }
          else
          {
            if (v10 == -5)
              return 0;
            v30 = (char *)(cf + 11);
            v44 = cf[11];
            if (v44 < a2)
              return 0;
            if (v44 == a2)
            {
              v29 = 3;
            }
            else
            {
              if (v10 == -6)
                return 0;
              v30 = (char *)(cf + 12);
              v45 = cf[12];
              if (v45 < a2)
                return 0;
              if (v45 == a2)
              {
                v29 = 4;
              }
              else
              {
                if (v10 == -7)
                  return 0;
                v30 = (char *)(cf + 13);
                v46 = cf[13];
                if (v46 < a2)
                  return 0;
                if (v46 == a2)
                {
                  v29 = 5;
                }
                else
                {
                  if (v10 == -8)
                    return 0;
                  v30 = (char *)(cf + 14);
                  if (cf[14] != a2)
                    return 0;
                  v29 = 6;
                }
              }
            }
          }
        }
      }
      if (-3 - v10 > (int)v29)
        memmove(v30, &cf[v29 + 9], 4 * (~(_DWORD)v29 - v10 - 2));
      v20 = v10 + 1;
LABEL_37:
      cf[4] = v20;
      return 1;
    }
    v21 = binarySearchMap((uint64_t)cf, a2);
    v22 = cf[9];
    if ((int)v22 <= (int)v21)
    {
      result = 0;
      v23 = cf[8];
      if (v21 >= v23 || v21 < v23 + v22 - cf[4])
        return result;
    }
    v24 = *((_QWORD *)cf + 5);
    if (*(_DWORD *)(v24 + 4 * v21) == a2)
    {
      v25 = cf[8];
      v26 = cf[4];
      if (v22 <= v21)
      {
        v31 = v25 - v26 + v22;
        v32 = v21 - v31;
        if (v21 <= v31)
        {
LABEL_58:
          v20 = v26 - 1;
          goto LABEL_37;
        }
        memmove((void *)(v24 + 4 * v22), (const void *)(v24 + 4 * v31), 4 * (v21 - v31));
        v21 = cf[9] + v32;
      }
      else
      {
        memmove((void *)(v24 + 4 * (v25 - (v26 - v21) + 1)), (const void *)(v24 + 4 * (v21 + 1)), 4 * (v22 - v21 - 1));
      }
      cf[9] = v21;
      v26 = cf[4];
      goto LABEL_58;
    }
    return 0;
  }
  v13 = cf[6] - a2;
  v14 = v13 >> 5;
  v15 = 1 << v13;
  v16 = *((_QWORD *)cf + 5);
  result = (v15 & *(_DWORD *)(v16 + 4 * v14)) != 0;
  if ((v15 & *(_DWORD *)(v16 + 4 * v14)) != 0)
  {
    cf[4] = v10 + 1;
    if (v10 >= 0xFFFFFFF6)
      cf[4] = -10;
  }
  *(_DWORD *)(v16 + 4 * v14) &= ~v15;
  return result;
}

_DWORD *_CIIndexSetConvertIfInvertedArrayIsMoreEfficient(_DWORD *result, _QWORD *a2, int8x8_t a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = result[5];
  v5 = result[6];
  v6 = v5 - v4;
  v7 = v5 - v4 + 1;
  v8 = (v5 - v4 + 48) / 0x30;
  if (result[4] + v7 + 10 < v8)
  {
    v9 = (uint64_t)result;
    result = (_DWORD *)lockedCountItemsInRange(result, v4, v5, a3);
    *(_DWORD *)(v9 + 16) = -10 - (_DWORD)result;
    v10 = v7 - (_DWORD)result;
    if (v10 < v8)
    {
      *(_DWORD *)(v9 + 16) = -10 - v10;
      v11 = *(_DWORD *)(v9 + 32);
      v13 = v11 >= v10 && v11 < 2 * v10;
      if (v13)
      {
        if (v10 <= 0x1FF)
        {
          MEMORY[0x1E0C80A78]();
          v15 = (char *)v33 - v14;
          bzero((char *)v33 - v14, v16);
          v17 = 0;
          goto LABEL_14;
        }
      }
      else
      {
        v18 = (v6 - (_DWORD)result) | ((v6 - result) >> 1) | (((v6 - (_DWORD)result) | ((v6 - result) >> 1)) >> 2);
        v19 = v18 | (v18 >> 4) | ((v18 | (v18 >> 4)) >> 8);
        v10 = (v19 | HIWORD(v19)) + 1;
      }
      v17 = (char *)blob_malloc(v10, a2);
      v15 = v17;
LABEL_14:
      v21 = *(_DWORD *)(v9 + 20);
      v20 = *(_DWORD *)(v9 + 24);
      v22 = (v20 - v21) >> 5;
      if (v20 - v21 >= 0x20)
      {
        v23 = 0;
        if (v22 <= 1)
          v24 = 1;
        else
          v24 = v22;
        v25 = 4 * v24;
        do
        {
          *(_DWORD *)(*(_QWORD *)(v9 + 40) + v23) = ~*(_DWORD *)(*(_QWORD *)(v9 + 40) + v23);
          v23 += 4;
        }
        while (v25 != v23);
        v21 = *(_DWORD *)(v9 + 20);
        v20 = *(_DWORD *)(v9 + 24);
      }
      if (v21 <= v20)
      {
        v26 = -v21;
        do
        {
          if ((_DWORD)v22 != (v20 + v26) >> 5)
            break;
          *(_DWORD *)(*(_QWORD *)(v9 + 40) + 4 * v22) ^= 1 << (v20 + v26);
          ++v21;
          v20 = *(_DWORD *)(v9 + 24);
          --v26;
        }
        while (v21 <= v20);
        v21 = *(_DWORD *)(v9 + 20);
      }
      v33[0] = v20;
      v33[1] = v21;
      v34 = 0;
      v35 = v9;
      v27 = *(_DWORD *)(v9 + 16);
      if (v27 >= 1)
      {
        v28 = binarySearchMap(v9, v20);
        LODWORD(v34) = v28;
        if (v28 != *(_DWORD *)(v9 + 36))
          goto LABEL_53;
        v29 = *(_DWORD *)(v9 + 32) + v28 - *(_DWORD *)(v9 + 16);
        goto LABEL_52;
      }
      if (v27 < 0xFFFFFFF7)
        goto LABEL_53;
      if (v27 <= 0xFFFFFFFD)
      {
        if (v20 >= *(_DWORD *)(v9 + 32))
        {
          v29 = 0;
          goto LABEL_52;
        }
        if (v27 != -3)
        {
          if (v20 >= *(_DWORD *)(v9 + 36))
          {
            v29 = 1;
            goto LABEL_52;
          }
          if (v27 != -4)
          {
            if (v20 >= *(_DWORD *)(v9 + 40))
            {
              v29 = 2;
              goto LABEL_52;
            }
            if (v27 != -5)
            {
              if (v20 >= *(_DWORD *)(v9 + 44))
              {
                v29 = 3;
                goto LABEL_52;
              }
              if (v27 != -6)
              {
                if (v20 >= *(_DWORD *)(v9 + 48))
                {
                  v29 = 4;
                  goto LABEL_52;
                }
                if (v27 != -7)
                {
                  if (v20 >= *(_DWORD *)(v9 + 52))
                  {
                    v29 = 5;
                    goto LABEL_52;
                  }
                  if (v27 != -8 && v20 >= *(_DWORD *)(v9 + 56))
                  {
                    v29 = 6;
                    goto LABEL_52;
                  }
                }
              }
            }
          }
        }
      }
      v29 = -2 - v27;
LABEL_52:
      LODWORD(v34) = v29;
LABEL_53:
      v30 = _CIIndexSetEnumeratorNext(v33);
      if (v30)
      {
        v31 = 0;
        do
        {
          v32 = v31 + 1;
          *(_DWORD *)&v15[4 * v31] = v30;
          v30 = _CIIndexSetEnumeratorNext(v33);
          v31 = v32;
        }
        while (v30);
        if (v13)
          goto LABEL_57;
      }
      else
      {
        v32 = 0;
        if (v13)
        {
LABEL_57:
          *(_DWORD *)(v9 + 16) = 0;
          *(_DWORD *)(v9 + 36) = 0;
          _CIIndexSetAddSortedIndexes((CFTypeRef)v9);
          if (v17)
            blob_free(v17, v10, a2);
          return (_DWORD *)_CFRuntimeSetInstanceTypeID();
        }
      }
      blob_free(*(_QWORD **)(v9 + 40), *(_DWORD *)(v9 + 32), a2);
      *(_QWORD *)(v9 + 40) = v15;
      *(_DWORD *)(v9 + 16) = v32;
      *(_DWORD *)(v9 + 32) = v10;
      *(_DWORD *)(v9 + 36) = v32;
      return (_DWORD *)_CFRuntimeSetInstanceTypeID();
    }
  }
  return result;
}

uint64_t searchMapWithHint(uint64_t a1, unsigned int a2, _DWORD *a3, int a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v12;
  uint64_t v14;
  unsigned int v15;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v6 = *a3;
  if ((_DWORD)v6 == -1
    || (v7 = *(_DWORD *)(a1 + 32), v7 <= v6)
    || (v8 = *(unsigned int *)(a1 + 36), v9 = *(_DWORD *)(a1 + 16), v8 < v6)
    && v8 + v7 - v9 > v6)
  {
LABEL_5:
    v8 = binarySearchMap(a1, a2);
LABEL_6:
    v10 = v8;
LABEL_7:
    *a3 = v8;
    return v10;
  }
  v12 = v7 - v9 + v8;
  if (v6 >= v8 && v6 < v12)
    goto LABEL_25;
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_DWORD *)(v14 + 4 * v6);
  if (v15 == a2)
    return v6;
  if (v15 >= a2)
  {
LABEL_25:
    v10 = (v6 + 1);
    if (v10 < v8 || v12 == 0)
    {
      v17 = v7 - v9 + v8;
      if (v10 >= v7)
        goto LABEL_44;
    }
    else
    {
      if (v12 >= v7)
        goto LABEL_6;
      v17 = 0;
      LODWORD(v6) = v7 - v9 + v8;
      v10 = v6;
    }
    v18 = *(_QWORD *)(a1 + 40);
    v19 = *(_DWORD *)(v18 + 4 * v10);
    if (v19 == a2)
      goto LABEL_35;
    if (v19 > a2)
    {
      v20 = (v10 + 1);
      if (v20 >= v8 && (_DWORD)v17)
      {
        if (v17 >= v7)
          goto LABEL_6;
        LODWORD(v10) = v17;
        v20 = v17;
        v17 = 0;
      }
      if (v20 < v7)
      {
        v21 = *(_DWORD *)(v18 + 4 * v20);
        if (v21 == a2)
        {
LABEL_43:
          LODWORD(v8) = v20;
          v10 = v20;
          goto LABEL_7;
        }
        if (v21 > a2)
        {
          v10 = (v20 + 1);
          if (v10 >= v8 && (_DWORD)v17)
          {
            if (v17 >= v7)
              goto LABEL_6;
            LODWORD(v20) = v17;
            v10 = v17;
            v17 = 0;
          }
          if (v10 >= v7)
            goto LABEL_81;
          v22 = *(_DWORD *)(v18 + 4 * v10);
          if (v22 == a2)
            goto LABEL_35;
          if (v22 <= a2)
            goto LABEL_81;
          v20 = (v10 + 1);
          if (v20 >= v8 && (_DWORD)v17)
          {
            if (v17 >= v7)
              goto LABEL_6;
            LODWORD(v10) = v17;
            v20 = v17;
            v17 = 0;
          }
          if (v20 < v7)
          {
            v23 = *(_DWORD *)(v18 + 4 * v20);
            if (v23 == a2)
              goto LABEL_43;
            if (v23 > a2)
            {
              v10 = (v20 + 1);
              if (v10 >= v8)
              {
                if ((_DWORD)v17)
                {
                  LODWORD(v20) = v17;
                  v10 = v17;
                  if (v17 >= v7)
                    goto LABEL_6;
                }
              }
              if (v10 < v7)
              {
                if (*(_DWORD *)(v18 + 4 * v10) != a2)
                {
                  if ((_DWORD)v8 == v9)
                  {
                    v24 = v8 - 1;
                    if ((int)v8 - 33 >= (int)v10)
                    {
                      do
                      {
                        v25 = v24 - v10;
                        if (v24 < (int)v10)
                          ++v25;
                        v8 = (v10 + (v25 >> 1));
                        v26 = *(_DWORD *)(v18 + 4 * (int)v8);
                        if (v26 == a2)
                          goto LABEL_6;
                        if (v26 <= a2)
                          v24 = v8 - 1;
                        else
                          LODWORD(v10) = v8 + 1;
                      }
                      while ((int)v10 <= v24 - 32);
                    }
                    v27 = (int)v10;
                    if (v24 + 1 > (int)v10)
                      v10 = v24 + 1;
                    else
                      v10 = (int)v10;
                    while (v27 <= v24)
                    {
                      v28 = *(_DWORD *)(v18 + 4 * v27++);
                      if (v28 <= a2)
                        goto LABEL_117;
                    }
                  }
                  else if ((_DWORD)v8 && (v29 = (int)v8 - 1, *(_DWORD *)(v18 + 4 * v29) <= a2))
                  {
                    if ((int)v8 > (int)v7)
                    {
                      v37 = __si_assert_copy_extra_268();
                      __message_assert_272((uint64_t)v37, v38, v39, v40, v41, v42, v43, v44, (char)"CIIndexSet.c");
                      free(v37);
                      if (__valid_fs(-1))
                      {
                        MEMORY[0xBAD] = -559038737;
                        abort();
                      }
                      MEMORY[0xC00] = -559038737;
                      abort();
                    }
                    if (v8 < v10)
                      LODWORD(v10) = v8 - 1;
                    if ((int)v8 - 33 >= (int)v10)
                    {
                      while (1)
                      {
                        v34 = v29 - v10;
                        if ((int)v29 < (int)v10)
                          ++v34;
                        v8 = (v10 + (v34 >> 1));
                        v35 = *(_DWORD *)(v18 + 4 * (int)v8);
                        if (v35 == a2)
                          goto LABEL_6;
                        if (v35 <= a2)
                          LODWORD(v29) = v8 - 1;
                        else
                          LODWORD(v10) = v8 + 1;
                        if ((int)v10 > (int)v29 - 32)
                        {
                          v29 = (int)v29;
                          break;
                        }
                      }
                    }
                    v27 = (int)v10;
                    if (v29 + 1 > (int)v10)
                      v10 = v29 + 1;
                    else
                      v10 = (int)v10;
                    while (v27 <= v29)
                    {
                      v36 = *(_DWORD *)(v18 + 4 * v27++);
                      if (v36 <= a2)
                      {
LABEL_117:
                        v10 = v27 - 1;
                        break;
                      }
                    }
                  }
                  else
                  {
                    if (v12 > v10)
                      LODWORD(v10) = v7 - v9 + v8;
                    v30 = v7 - 1;
                    if ((int)(v7 - 33) >= (int)v10)
                    {
                      do
                      {
                        v31 = v30 - v10;
                        if (v30 < (int)v10)
                          ++v31;
                        v8 = (v10 + (v31 >> 1));
                        v32 = *(_DWORD *)(v18 + 4 * (int)v8);
                        if (v32 == a2)
                          goto LABEL_6;
                        if (v32 <= a2)
                          v30 = v8 - 1;
                        else
                          LODWORD(v10) = v8 + 1;
                      }
                      while ((int)v10 <= v30 - 32);
                    }
                    v27 = (int)v10;
                    if (v30 + 1 > (int)v10)
                      v10 = v30 + 1;
                    else
                      v10 = (int)v10;
                    while (v27 <= v30)
                    {
                      v33 = *(_DWORD *)(v18 + 4 * v27++);
                      if (v33 <= a2)
                        goto LABEL_117;
                    }
                  }
                  LODWORD(v8) = v10;
                  goto LABEL_7;
                }
LABEL_35:
                LODWORD(v8) = v10;
                goto LABEL_7;
              }
LABEL_81:
              LODWORD(v8) = v20;
              goto LABEL_7;
            }
          }
        }
      }
      LODWORD(v8) = v10;
      v10 = v20;
      goto LABEL_7;
    }
LABEL_44:
    LODWORD(v8) = v6;
    goto LABEL_7;
  }
  if (a4
    && (!(_DWORD)v8 || (_DWORD)v6 != v12 || *(_DWORD *)(v14 + 4 * ((int)v8 - 1)) <= a2)
    && (!(_DWORD)v6
     || v6 >= v8 && v6 <= v12
     || *(_DWORD *)(v14 + 4 * (v6 - 1)) <= a2))
  {
    goto LABEL_5;
  }
  return v6;
}

uint64_t binarySearchMap(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(int *)(a1 + 36);
  v3 = *(_DWORD *)(a1 + 16);
  if ((_DWORD)v2 == v3)
  {
    if ((int)v2 > *(_DWORD *)(a1 + 32))
    {
      v21 = __si_assert_copy_extra_268();
      __message_assert_272((uint64_t)v21, v22, v23, v24, v25, v26, v27, v28, (char)"CIIndexSet.c");
      free(v21);
      if (__valid_fs(-1))
        v29 = 2989;
      else
        v29 = 3072;
      *(_DWORD *)v29 = -559038737;
      abort();
    }
    v4 = v2 - 1;
    v5 = *(_QWORD *)(a1 + 40);
    if ((int)v2 >= 33)
    {
      LODWORD(v6) = 0;
      while (1)
      {
        v15 = v4 - v6;
        if (v4 < (int)v6)
          ++v15;
        result = (v6 + (v15 >> 1));
        v16 = *(_DWORD *)(v5 + 4 * (int)result);
        if (v16 == a2)
          break;
        if (v16 <= a2)
          v4 = result - 1;
        else
          LODWORD(v6) = result + 1;
        if ((int)v6 > v4 - 32)
        {
          v6 = (int)v6;
          goto LABEL_30;
        }
      }
    }
    else
    {
      v6 = 0;
LABEL_30:
      if (v4 + 1 > v6)
        result = v4 + 1;
      else
        result = v6;
      while (v6 <= v4)
      {
        v17 = *(_DWORD *)(v5 + 4 * v6++);
        if (v17 <= a2)
          return v6 - 1;
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    if ((_DWORD)v2 && (v8 = v2 - 1, *(_DWORD *)(v7 + 4 * (v2 - 1)) <= a2))
    {
      if ((int)v2 > *(_DWORD *)(a1 + 32))
      {
        v30 = __si_assert_copy_extra_268();
        __message_assert_272((uint64_t)v30, v31, v32, v33, v34, v35, v36, v37, (char)"CIIndexSet.c");
        free(v30);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if ((int)v2 >= 33)
      {
        LODWORD(v2) = 0;
        while (1)
        {
          v18 = v8 - v2;
          if ((int)v8 < (int)v2)
            ++v18;
          result = (v2 + (v18 >> 1));
          v19 = *(_DWORD *)(v7 + 4 * (int)result);
          if (v19 == a2)
            break;
          if (v19 <= a2)
            LODWORD(v8) = result - 1;
          else
            LODWORD(v2) = result + 1;
          if ((int)v2 > (int)v8 - 32)
          {
            v8 = (int)v8;
            v2 = (int)v2;
            goto LABEL_48;
          }
        }
      }
      else
      {
        v2 = 0;
LABEL_48:
        if (v8 + 1 > v2)
          result = v8 + 1;
        else
          result = v2;
        while (v2 <= v8)
        {
          v20 = *(_DWORD *)(v7 + 4 * v2++);
          if (v20 <= a2)
            return v2 - 1;
        }
      }
    }
    else
    {
      v9 = *(_DWORD *)(a1 + 32);
      LODWORD(v2) = v9 - v3 + v2;
      v10 = v9 - 1;
      if (v9 - 33 < (int)v2)
      {
LABEL_15:
        v2 = (int)v2;
        if (v10 + 1 > (int)v2)
          result = v10 + 1;
        else
          result = (int)v2;
        while (v2 <= v10)
        {
          v14 = *(_DWORD *)(v7 + 4 * v2++);
          if (v14 <= a2)
            return v2 - 1;
        }
      }
      else
      {
        while (1)
        {
          v11 = v10 - v2;
          if (v10 < (int)v2)
            ++v11;
          result = (v2 + (v11 >> 1));
          v13 = *(_DWORD *)(v7 + 4 * (int)result);
          if (v13 == a2)
            break;
          if (v13 <= a2)
            v10 = result - 1;
          else
            LODWORD(v2) = result + 1;
          if ((int)v2 > v10 - 32)
            goto LABEL_15;
        }
      }
    }
  }
  return result;
}

void _CIIndexSetMakeSpace(unsigned int *cf, int a2, _QWORD *a3, _DWORD *a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  _QWORD *v23;
  unsigned int v24;

  if (a4)
    *a4 = -1;
  v9 = cf[4];
  if ((v9 + 1) >= 0xFFFFFFF8)
  {
    v10 = 4294967294 - v9;
    v11 = ~(_DWORD)v9 | (~(_DWORD)v9 >> 1) | ((~(_DWORD)v9 | (~(_DWORD)v9 >> 1)) >> 2);
    v12 = v11 | (v11 >> 4) | ((v11 | (v11 >> 4)) >> 8);
    v13 = (v12 | HIWORD(v12)) + 1;
    v14 = blob_calloc(v13, a3);
    memcpy(v14, cf + 8, 4 * v10);
    *((_QWORD *)cf + 5) = v14;
    cf[4] = v10;
    LODWORD(v9) = v10;
    cf[8] = v13;
    cf[9] = v10;
  }
  v15 = (a2 + v9 - 1) | ((a2 + v9 - 1) >> 1);
  v16 = v15 | (v15 >> 2) | ((v15 | (v15 >> 2)) >> 4);
  v17 = (v16 | (v16 >> 8) | ((v16 | (v16 >> 8)) >> 16)) + 1;
  CFGetTypeID(cf);
  if (v17 >= (cf[6] - cf[5] + 31) >> 5 && a5 == 0)
  {
    _CIIndexSetForceBitmap((uint64_t)cf, a3, a2);
    return;
  }
  v19 = *MEMORY[0x1E0C85AD8] >> 1;
  if (v19 <= 4 * (unint64_t)v17 || (v20 = cf[8], v19 <= 4 * v20))
  {
    v22 = blob_malloc(v17, a3);
    v23 = v22;
    v21 = (char *)*((_QWORD *)cf + 5);
    if (cf[9] == cf[4])
    {
      v24 = cf[8];
      if (v17 < v24)
        v24 = v17;
      memcpy(v22, *((const void **)cf + 5), 4 * v24);
      blob_free(*((_QWORD **)cf + 5), cf[8], a3);
      v21 = 0;
    }
    *((_QWORD *)cf + 5) = v23;
    if (!v21)
      goto LABEL_20;
LABEL_19:
    memcpy(v23, v21, 4 * (int)cf[9]);
    memcpy((void *)(*((_QWORD *)cf + 5) + 4 * (v17 - cf[4] + cf[9])), &v21[4 * (cf[9] - cf[4]) + 4 * cf[8]], 4 * (int)(cf[4] - cf[9]));
    blob_free(v21, cf[8], a3);
    goto LABEL_20;
  }
  v21 = (char *)*((_QWORD *)cf + 5);
  if (cf[9] != cf[4])
  {
    v23 = blob_malloc(v17, a3);
    *((_QWORD *)cf + 5) = v23;
    if (!v21)
      goto LABEL_20;
    goto LABEL_19;
  }
  *((_QWORD *)cf + 5) = blob_realloc(*((_QWORD **)cf + 5), v20, v17, a3);
LABEL_20:
  cf[8] = v17;
}

unint64_t *handleUpdate(_QWORD *a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t *result;
  unsigned int *v8;
  char *v9;
  char *v10;
  const char *v11;
  char *v12;
  const char *v13;
  uint64_t v14;

  if (a1[19] > a1[17])
  {
    v9 = __si_assert_copy_extra(0);
    v10 = v9;
    v11 = "";
    if (v9)
      v11 = v9;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 327, "changes->hole <= changes->count", v11);
LABEL_13:
    free(v10);
    if (__valid_fs(-1))
      v14 = 2989;
    else
      v14 = 3072;
    *(_DWORD *)v14 = -559038737;
    abort();
  }
  result = changesHandleUpdate((uint64_t)(a1 + 16), a2, a3);
  if (a1[19] > a1[17])
  {
    v12 = __si_assert_copy_extra(0);
    v10 = v12;
    v13 = "";
    if (v12)
      v13 = v12;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 329, "changes->hole <= changes->count", v13);
    goto LABEL_13;
  }
  if ((a4 & 1) != 0)
  {
    v8 = (unsigned int *)a1[9];
    if (!v8)
    {
      v8 = (unsigned int *)malloc_type_calloc(1uLL, 0x28uLL, 0x10200406E8F4065uLL);
      atomic_store(1u, v8 + 8);
      a1[9] = v8;
    }
    return (unint64_t *)distanceHolderSetMinDistance((uint64_t)v8, a2, *((float *)&a4 + 1));
  }
  return result;
}

unint64_t *changesHandleUpdate(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t Slot;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *result;
  unint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *realloc;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  NSObject *v36;
  int v37;
  NSObject *v38;
  uint8_t buf[4];
  unint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  Slot = findSlotT<PayloadIterator__Changes,DocID_Count_Pair>((unint64_t **)a1, a2);
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v7, v9);
  if (Slot < 0)
  {
    v10 = *(_QWORD *)(a1 + 16);
    goto LABEL_15;
  }
  v10 = *(_QWORD *)(a1 + 16);
  if (Slot < v8 - v7 + v9 && Slot >= *(_QWORD *)(a1 + 24) || Slot >= v10)
  {
LABEL_15:
    v16 = *(_QWORD *)(a1 + 8);
    if (v16 >= v10)
    {
      v32 = 2 * v10;
      v33 = v10 == 0;
      v34 = 16;
      if (!v33)
        v34 = v32;
      *(_QWORD *)(a1 + 16) = v34;
      realloc = (unint64_t *)query_realloc(*(void **)a1, 16 * v34);
      *(_QWORD *)a1 = realloc;
      v17 = *(_QWORD *)(a1 + 8);
      v10 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 24) = v17;
      v16 = v17;
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 24);
      realloc = *(unint64_t **)a1;
    }
    memmove(&realloc[2 * v17], &realloc[2 * (v10 - (v16 - v17))], 16 * (v16 - v17));
    v19 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 24) = v19;
    result = (unint64_t *)weak_checkChangeHolderIntegrity<PayloadIterator__Changes,DocID_Count_Pair>(v19, v19);
    if (a3 == 2)
    {
      v20 = -1;
    }
    else
    {
      if (a3 != 1)
      {
LABEL_23:
        v21 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(*(_QWORD *)a1 + 16 * v21) = a2;
        *(_QWORD *)(a1 + 8) = v21 + 1;
        ++*(_QWORD *)(a1 + 24);
        return result;
      }
      if (dword_1EF19FCB4 >= 5)
      {
        v35 = *__error();
        v36 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          v40 = a2;
          v41 = 2048;
          v42 = a1;
          _os_log_impl(&dword_1B8270000, v36, OS_LOG_TYPE_DEFAULT, "Add %lld to change holder %p", buf, 0x16u);
        }
        result = (unint64_t *)__error();
        *(_DWORD *)result = v35;
      }
      v20 = 1;
    }
    *(_DWORD *)(*(_QWORD *)a1 + 16 * *(_QWORD *)(a1 + 8) + 8) = v20;
    goto LABEL_23;
  }
  result = *(unint64_t **)a1;
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 16 * Slot);
  if (v14 == a2)
  {
    if (a3 == 2)
    {
      v15 = -1;
    }
    else
    {
      if (a3 != 1)
        goto LABEL_33;
      v15 = 1;
    }
    LODWORD(result[2 * Slot + 1]) += v15;
    result = *(unint64_t **)a1;
LABEL_33:
    if (LODWORD(result[2 * Slot + 1]))
    {
      v23 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      result = (unint64_t *)changeHolderMoveHoleToIndex<PayloadIterator__Changes,DocID_Count_Pair>((_QWORD *)a1, Slot);
      v23 = *(_QWORD *)(a1 + 8) - 1;
      *(_QWORD *)(a1 + 8) = v23;
    }
    if (*(_QWORD *)(a1 + 24) > v23)
    {
      v24 = __si_assert_copy_extra_268();
      v25 = v24;
      v26 = "";
      if (v24)
        v26 = v24;
      __message_assert(v24, "ChangeHolder.cpp", 235, "changes->hole <= changes->count", v26);
      goto LABEL_45;
    }
    return result;
  }
  if (v14 >= a2)
    goto LABEL_15;
  if (*(_QWORD *)(a1 + 8) >= v10)
  {
    *(_QWORD *)(a1 + 16) = 2 * v10;
    *(_QWORD *)a1 = query_realloc(result, 32 * v10);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 8);
  }
  result = (unint64_t *)changeHolderMoveHoleToIndex<PayloadIterator__Changes,DocID_Count_Pair>((_QWORD *)a1, Slot);
  v22 = *(_QWORD *)(a1 + 24);
  if (a3 == 1)
  {
    *(_DWORD *)(*(_QWORD *)a1 + 16 * v22 + 8) = 1;
    if (dword_1EF19FCB4 >= 5)
    {
      v37 = *__error();
      v38 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        v40 = a2;
        v41 = 2048;
        v42 = a1;
        _os_log_impl(&dword_1B8270000, v38, OS_LOG_TYPE_DEFAULT, "Add %lld to change holder %p", buf, 0x16u);
      }
      result = (unint64_t *)__error();
      *(_DWORD *)result = v37;
    }
  }
  else if (a3 == 2)
  {
    *(_DWORD *)(*(_QWORD *)a1 + 16 * v22 + 8) = -1;
  }
  *(_QWORD *)(*(_QWORD *)a1 + 16 * v22) = a2;
  v27 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v27 + 1;
  v28 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v28 + 1;
  if (v27 > v28)
  {
    v29 = __si_assert_copy_extra_268();
    v25 = v29;
    v30 = "";
    if (v29)
      v30 = v29;
    __message_assert(v29, "ChangeHolder.cpp", 258, "changes->hole <= changes->count", v30);
LABEL_45:
    free(v25);
    if (__valid_fs(-1))
      v31 = 2989;
    else
      v31 = 3072;
    *(_DWORD *)v31 = -559038737;
    abort();
  }
  return result;
}

BOOL _CIIndexSetConvertIfArrayIsMuchMoreEfficient(int *a1, unsigned int a2, unsigned int a3, int a4, _QWORD *a5, int8x8_t a6)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t locked;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  char v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  size_t v29;
  unsigned int v30;
  int8x8_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37[2];
  uint64_t v38;
  int *v39;
  uint64_t v40;

  v8 = a3;
  v9 = a2;
  v40 = *MEMORY[0x1E0C80C00];
  if (a1[6] < a3)
    a3 = a1[6];
  if (a1[5] > a2)
    a2 = a1[5];
  locked = lockedCountItemsInRange(a1, a2, a3, a6);
  v12 = locked + a4;
  v13 = (v8 - v9 + 63) >> 6;
  if ((int)locked + a4 < v13)
  {
    if (!a4 || ((v14 = a1[8], v14 >= v12) ? (v15 = v14 >= 2 * v12) : (v15 = 1), v15))
    {
      v16 = (v12 - 1) | ((v12 - 1) >> 1) | (((v12 - 1) | ((v12 - 1) >> 1)) >> 2);
      v17 = v16 | (v16 >> 4) | ((v16 | (v16 >> 4)) >> 8);
      v18 = (v17 | HIWORD(v17)) + 1;
      v19 = (unsigned int *)blob_malloc(v18, a5);
      v20 = v19;
      v21 = 0;
    }
    else
    {
      v18 = locked;
      if (locked <= 0x1FF)
      {
        MEMORY[0x1E0C80A78](locked);
        v20 = (unsigned int *)((char *)&v35 - v28);
        bzero((char *)&v35 - v28, v29);
        v22 = 0;
        v21 = 1;
LABEL_14:
        v36 = v22;
        v24 = a1[5];
        v23 = a1[6];
        v25 = a1[4];
        v37[0] = v23;
        v37[1] = v24;
        v38 = 0;
        v39 = a1;
        if (v25 >= 1)
        {
          v26 = binarySearchMap((uint64_t)a1, v23);
          LODWORD(v38) = v26;
          if (v26 != a1[9])
            goto LABEL_44;
          v27 = a1[8] + v26 - a1[4];
          goto LABEL_43;
        }
        if (v25 < 0xFFFFFFF7)
          goto LABEL_44;
        if (v25 <= 0xFFFFFFFD)
        {
          if (v23 >= a1[8])
          {
            v27 = 0;
            goto LABEL_43;
          }
          if (v25 != -3)
          {
            if (v23 >= a1[9])
            {
              v27 = 1;
              goto LABEL_43;
            }
            if (v25 != -4)
            {
              if (v23 >= a1[10])
              {
                v27 = 2;
                goto LABEL_43;
              }
              if (v25 != -5)
              {
                if (v23 >= a1[11])
                {
                  v27 = 3;
                  goto LABEL_43;
                }
                if (v25 != -6)
                {
                  if (v23 >= a1[12])
                  {
                    v27 = 4;
                    goto LABEL_43;
                  }
                  if (v25 != -7)
                  {
                    if (v23 >= a1[13])
                    {
                      v27 = 5;
                      goto LABEL_43;
                    }
                    if (v25 != -8 && v23 >= a1[14])
                    {
                      v27 = 6;
                      goto LABEL_43;
                    }
                  }
                }
              }
            }
          }
        }
        v27 = -2 - v25;
LABEL_43:
        LODWORD(v38) = v27;
LABEL_44:
        v30 = _CIIndexSetEnumeratorNext(v37);
        if (v30)
        {
          v32 = 0;
          do
          {
            v33 = v32 + 1;
            v20[v32] = v30;
            v30 = _CIIndexSetEnumeratorNext(v37);
            v32 = v33;
          }
          while (v30);
          a1[5] = v9;
          a1[6] = v8;
          if ((v21 & 1) != 0)
          {
LABEL_48:
            a1[4] = 0;
            a1[9] = 0;
            _CIIndexSetAddSortedIndexes(a1, v20, v33, 1, a5, 1, v31);
            if (v36)
              blob_free(v36, v18, a5);
            return v12 < v13;
          }
        }
        else
        {
          v33 = 0;
          a1[5] = v9;
          a1[6] = v8;
          if ((v21 & 1) != 0)
            goto LABEL_48;
        }
        blob_free(*((_QWORD **)a1 + 5), a1[8], a5);
        *((_QWORD *)a1 + 5) = v20;
        a1[4] = v33;
        a1[8] = v18;
        a1[9] = v33;
        return v12 < v13;
      }
      v19 = (unsigned int *)blob_malloc(locked, a5);
      v20 = v19;
      v21 = 1;
    }
    v22 = v19;
    goto LABEL_14;
  }
  return v12 < v13;
}

uint64_t lockedCountItemsInRange(_DWORD *cf, unsigned int a2, unsigned int a3, int8x8_t a4)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v15;
  int v16;
  char v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint8x8_t v26;
  unsigned __int32 v27;
  CFTypeID v28;
  unsigned int v29;
  unsigned int v30;
  _BOOL4 v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint8x8_t v37;
  int v38;
  int8x8_t v39;
  uint8x8_t v40;
  __int32 v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  if (a2 <= 1)
    v6 = 1;
  else
    v6 = a2;
  if (v6 == a3)
  {
    if (cf)
    {
      if (cf[5] <= a3)
      {
        v7 = cf[6];
        v8 = v7 - a3;
        if (v7 >= a3)
        {
          v9 = cf[4];
          if (v9 <= -10)
            return (*(_DWORD *)(*((_QWORD *)cf + 5) + 4 * (v8 >> 5)) >> v8) & 1;
          if ((v9 & 0x80000000) == 0)
          {
            v29 = binarySearchMap((uint64_t)cf, a3);
            v30 = cf[9];
            if (v29 < v30 || (v31 = 0, v32 = cf[8], v29 < v32) && v29 >= v32 + v30 - cf[4])
              v31 = *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v29) == a3;
            return v31 ^ (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID);
          }
          if (v9 <= 0xFFFFFFFD)
          {
            v42 = cf[8];
            result = v42 == a3;
            if (v42 != a3 && v9 != -3)
            {
              v43 = cf[9];
              result = v43 == a3;
              if (v43 != a3 && v9 != -4)
              {
                v44 = cf[10];
                result = v44 == a3;
                if (v44 != a3 && v9 != -5)
                {
                  v45 = cf[11];
                  result = v45 == a3;
                  if (v45 != a3 && v9 != -6)
                  {
                    v46 = cf[12];
                    result = v46 == a3;
                    if (v46 != a3 && v9 != -7)
                    {
                      v47 = cf[13];
                      result = v47 == a3;
                      if (v47 != a3 && v9 != -8)
                        return cf[14] == a3;
                    }
                  }
                }
              }
            }
            return result;
          }
        }
      }
    }
    return 0;
  }
  v12 = cf[5];
  v11 = cf[6];
  if (v6 <= v12)
    v13 = cf[5];
  else
    v13 = v6;
  if (v12 > a3 || v11 < v13)
    return 0;
  v15 = v11 >= a3 ? a3 : cf[6];
  if (v13 > v15)
    return 0;
  v16 = cf[4];
  if (v16 <= -10)
  {
    v17 = v11 - v15;
    v18 = (v11 - v15) >> 5;
    v19 = v11 - v13;
    v20 = v19 >> 5;
    if (v18 > v19 >> 5)
      return 0;
    v21 = v17 & 0x1F;
    v22 = v19 & 0x1F;
    v23 = *((_QWORD *)cf + 5);
    v24 = *(_DWORD *)(v23 + 4 * v18);
    if (v18 == v20)
    {
      v25 = masks[v21];
      if (v21 != v22 + 1)
        v25 = masks[v22 + 1] & ~v25;
      a4.i32[0] = v25 & v24;
      v26 = (uint8x8_t)vcnt_s8(a4);
      v26.i16[0] = vaddlv_u8(v26);
      v27 = v26.i32[0];
      goto LABEL_79;
    }
    a4.i32[0] = v24 & ~masks[v21];
    v37 = (uint8x8_t)vcnt_s8(a4);
    v37.i16[0] = vaddlv_u8(v37);
    v38 = v37.i32[0] + array_popcount((const char *)(v23 + 4 * (v18 + 1)), v20 + ~v18);
    v39.i32[0] = masks[v22 + 1] & *(_DWORD *)(v23 + 4 * v20);
    v40 = (uint8x8_t)vcnt_s8(v39);
    v40.i16[0] = vaddlv_u8(v40);
    v41 = v40.i32[0];
LABEL_78:
    v27 = v38 + v41;
LABEL_79:
    if (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID)
      result = v15 - v13 - v27 + 1;
    else
      result = v27;
    if ((result & 0x80000000) != 0)
    {
      result = countItemsInRangeByEnumeration(cf, v13, v15);
      if ((result & 0x80000000) != 0)
      {
        v49 = __si_assert_copy_extra_268();
        __message_assert_272((uint64_t)v49, v50, v51, v52, v53, v54, v55, v56, (char)"CIIndexSet.c");
        free(v49);
        if (__valid_fs(-1))
          v57 = 2986;
        else
          v57 = 3072;
        *(_DWORD *)v57 = -559038737;
        abort();
      }
    }
    return result;
  }
  if (v16 < 0)
  {
    if (v16 > 0xFFFFFFFD)
      return 0;
    if (cf[8] <= v15)
    {
      v33 = 0;
    }
    else
    {
      if (v16 == -3)
        return 0;
      if (cf[9] <= v15)
      {
        v33 = 1;
      }
      else
      {
        if (v16 == -4)
          return 0;
        if (cf[10] <= v15)
        {
          v33 = 2;
        }
        else
        {
          if (v16 == -5)
            return 0;
          if (cf[11] <= v15)
          {
            v33 = 3;
          }
          else
          {
            if (v16 == -6)
              return 0;
            if (cf[12] <= v15)
            {
              v33 = 4;
            }
            else
            {
              if (v16 == -7)
                return 0;
              if (cf[13] <= v15)
              {
                v33 = 5;
              }
              else
              {
                if (v16 == -8 || cf[14] > v15)
                  return 0;
                v33 = 6;
              }
            }
          }
        }
      }
    }
    v58 = (-2 - v16);
    LODWORD(v59) = v33;
    if ((int)v58 > (int)v33)
    {
      v59 = v33;
      while (cf[v59 + 8] >= v13)
      {
        if (++v59 >= v58)
        {
          LODWORD(v59) = -2 - v16;
          return (v59 - v33);
        }
      }
    }
    return (v59 - v33);
  }
  else
  {
    if (v12 < v6 || v11 > a3)
    {
      v34 = cf[9];
      v35 = binarySearchMap((uint64_t)cf, v13 - 1);
      v36 = binarySearchMap((uint64_t)cf, v15);
      if (v34 == v16)
      {
        v27 = v35 - v36;
        if (v35 >= v36)
          goto LABEL_79;
      }
      else
      {
        v27 = v35 - v36;
        if (v35 >= v36)
        {
          v48 = cf[9];
          if (v35 <= v48 || v36 > v48)
            goto LABEL_79;
          v41 = cf[4];
          v38 = v35 - (v36 + cf[8]);
          goto LABEL_78;
        }
      }
      v60 = __si_assert_copy_extra_268();
      __message_assert_272((uint64_t)v60, v61, v62, v63, v64, v65, v66, v67, (char)"CIIndexSet.c");
      free(v60);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAA] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v28 = CFGetTypeID(cf);
    result = cf[4];
    if (v28 == __kCIIndexSetInvertedTypeID)
      return v15 - (v13 + (_DWORD)result) + 1;
  }
  return result;
}

uint64_t array_popcount(const char *a1, int a2)
{
  unint64_t v2;
  int64x2_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int8x16_t v14;
  uint64_t i;
  unsigned int v16;
  uint8x8_t v17;
  int8x16x4_t v19;

  v2 = (4 * a2);
  v3 = 0uLL;
  if (v2 >= 0x40)
  {
    do
    {
      v4 = v2 >> 6;
      if (v2 >= 0x7C0)
        v4 = 31;
      v5 = v4;
      v6 = 0uLL;
      v7 = 0uLL;
      v8 = 0uLL;
      v9 = 0uLL;
      v10 = a1;
      do
      {
        v19 = vld4q_s8(v10);
        v10 += 64;
        v9 = vaddq_s8(vcntq_s8(v19.val[0]), v9);
        v8 = vaddq_s8(vcntq_s8(v19.val[1]), v8);
        v7 = vaddq_s8(vcntq_s8(v19.val[2]), v7);
        v6 = vaddq_s8(vcntq_s8(v19.val[3]), v6);
        --v5;
      }
      while (v5);
      v3 = (int64x2_t)vpadalq_u32((uint64x2_t)v3, vpaddlq_u16(vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8((uint8x16_t)v8), (uint8x16_t)v9), (uint8x16_t)v7), (uint8x16_t)v6)));
      v11 = v4 << 6;
      v2 -= v11;
      a1 += v11;
    }
    while (v2 > 0x3F);
  }
  if (v2 > 0xF)
  {
    v12 = 0;
    v13 = v2 & 0xFFFFFFF3;
    v14 = 0uLL;
    do
    {
      v14 = vaddq_s8(vcntq_s8(*(int8x16_t *)&a1[v12]), v14);
      v12 += 16;
    }
    while (v12 < v13);
    v2 &= 0xCu;
    v3 = (int64x2_t)vpadalq_u32((uint64x2_t)v3, vpaddlq_u16(vpaddlq_u8((uint8x16_t)v14)));
    a1 += v13;
  }
  for (i = vaddvq_s64(v3); v2; v2 -= 4)
  {
    v16 = *(_DWORD *)a1;
    a1 += 4;
    v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8(v17);
    i += v17.u32[0];
  }
  return i;
}

void _CIIndexSetForceBitmap(uint64_t a1, _QWORD *a2, int a3)
{
  unsigned int v6;
  const void *v7;
  CFTypeID v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v35[1] = *MEMORY[0x1E0C80C00];
  if (*(int *)(a1 + 16) < -9)
    return;
  v7 = (const void *)(a1 + 32);
  v6 = *(_DWORD *)(a1 + 32);
  v8 = CFGetTypeID((CFTypeRef)a1);
  v9 = __kCIIndexSetInvertedTypeID;
  if (CIIndexSetGetTypeID_onceToken != -1)
    dispatch_once(&CIIndexSetGetTypeID_onceToken, &__block_literal_global_4339);
  v10 = _CFRuntimeSetInstanceTypeID();
  v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    if ((v11 & 0x80000000) == 0)
    {
      v12 = *(_QWORD **)(a1 + 40);
      v13 = (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 20) + 32) >> 5;
      *(_DWORD *)(a1 + 32) = v13;
      *(_QWORD *)(a1 + 40) = blob_calloc(v13, a2);
      *(_DWORD *)(a1 + 16) = -10;
      *(_DWORD *)(a1 + 36) = -1;
      _CIIndexSetAddSortedIndexes((CFTypeRef)a1);
      _CIIndexSetAddSortedIndexes((CFTypeRef)a1);
      *(_DWORD *)(a1 + 16) = -10 - v11;
      blob_free(v12, v6, a2);
      if (v8 != v9)
        goto LABEL_23;
LABEL_9:
      v15 = *(_DWORD *)(a1 + 20);
      v16 = *(_DWORD *)(a1 + 24);
      v17 = (v16 - v15) >> 5;
      if (v16 - v15 >= 0x20)
      {
        v18 = 0;
        if (v17 <= 1)
          v19 = 1;
        else
          v19 = v17;
        v20 = 4 * v19;
        do
        {
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + v18) = ~*(_DWORD *)(*(_QWORD *)(a1 + 40) + v18);
          v18 += 4;
        }
        while (v20 != v18);
        v15 = *(_DWORD *)(a1 + 20);
        v16 = *(_DWORD *)(a1 + 24);
      }
      if (v15 <= v16)
      {
        v21 = -v15;
        do
        {
          if ((_DWORD)v17 != (v16 + v21) >> 5)
            break;
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v17) ^= 1 << (v16 + v21);
          ++v15;
          v16 = *(_DWORD *)(a1 + 24);
          --v21;
        }
        while (v15 <= v16);
        v15 = *(_DWORD *)(a1 + 20);
      }
      v22 = v15 - v16 - *(_DWORD *)(a1 + 16) - 21;
      goto LABEL_28;
    }
    MEMORY[0x1E0C80A78](v10);
    memcpy((char *)v35 - v23, v7, 4 * (-2 - v11));
    v24 = (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 20) + 32) >> 5;
    *(_DWORD *)(a1 + 32) = v24;
    *(_QWORD *)(a1 + 40) = blob_calloc(v24, a2);
    *(_DWORD *)(a1 + 16) = -10;
    *(_DWORD *)(a1 + 36) = -1;
    _CIIndexSetAddSortedIndexes((CFTypeRef)a1);
    *(_DWORD *)(a1 + 16) = v11 - 8;
    if (v8 == v9)
      goto LABEL_9;
  }
  else
  {
    v14 = (*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 20) + 32) >> 5;
    *(_DWORD *)(a1 + 16) = -10;
    *(_DWORD *)(a1 + 32) = v14;
    *(_DWORD *)(a1 + 36) = -1;
    blob_free(*(_QWORD **)(a1 + 40), v6, a2);
    *(_QWORD *)(a1 + 40) = blob_calloc(*(_DWORD *)(a1 + 32), a2);
    if (v8 == v9)
      goto LABEL_9;
  }
LABEL_23:
  if (!a3)
    goto LABEL_29;
  v25 = *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 20);
  if (v25 + 1 < (a3 - *(_DWORD *)(a1 + 16) - 10))
    v26 = v25 + 1;
  else
    v26 = a3 - *(_DWORD *)(a1 + 16) - 10;
  v22 = -10 - v26;
LABEL_28:
  *(_DWORD *)(a1 + 16) = v22;
LABEL_29:
  if (!*(_QWORD *)(a1 + 40))
  {
    v27 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, (char)"CIIndexSet.c");
    free(v27);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
}

_QWORD *blob_calloc(unsigned int a1, _QWORD *a2)
{
  size_t v3;
  size_t *v4;
  size_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  __int16 v13[8];

  v3 = 4 * a1;
  v4 = (size_t *)MEMORY[0x1E0C85AD8];
  v5 = *MEMORY[0x1E0C85AD8];
  if (v3 < *MEMORY[0x1E0C85AD8] >> 1)
  {
    if (!a2)
      goto LABEL_6;
    if (a1 - 8 > 0x37)
      goto LABEL_6;
    v6 = __PAIR64__(a1, a1 - 8) >> 3;
    if (v6 > 7 || ((0x8Bu >> v6) & 1) == 0)
      goto LABEL_6;
    v9 = qword_1B8630C88[v6];
    v10 = &a2[v9];
    v12 = (_QWORD *)v10[2];
    v11 = v10 + 2;
    v7 = v12;
    if (v12)
    {
LABEL_16:
      *v11 = v7[1];
      bzero(v7, v3);
      return v7;
    }
    if (*a2)
    {
      v7 = (_QWORD *)cicachelistdequeue(*a2 + 24 * v9 + 32, 0);
      if (v7)
        goto LABEL_16;
      v5 = *v4;
    }
LABEL_6:
    if (!(a1 >> 15) && v5 < v3)
      ++sTotal_4358;
    v7 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v3, 0x31F9A007uLL);
    if (!v7)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        v13[0] = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v13, 2u);
      }
      return 0;
    }
    return v7;
  }
  return mmap(0, (v3 + v5 - 1) & -(uint64_t)v5, 3, 4098, -134217728, 0);
}

void _CIIndexSetAddSortedIndexes(int *cf, unsigned int *a2, unsigned int a3, int a4, _QWORD *a5, int a6, int8x8_t a7)
{
  uint64_t v7;
  unsigned int *v12;
  int8x8_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  signed int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  signed int v57;
  char *v58;
  unint64_t v59;
  signed int v60;
  signed int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int v71;
  signed int v72;
  int v73;
  int v74;
  signed int v75;
  unint64_t v76;
  unint64_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  void *v97;
  const void *v98;
  uint64_t v99;
  unsigned int v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unsigned int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int8x16_t *v111;
  unint64_t v112;
  unsigned int *v113;
  int8x16_t v114;
  int8x16_t v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v7 = a3 - 1;
  if ((int)a3 < 1)
    return;
  v12 = a2;
  if (a3 == 1 && (a6 & 1) == 0)
  {
    LODWORD(v128) = -1;
    _CIIndexSetAddIndex((unsigned int *)cf, *a2, a5, &v128, a7);
    return;
  }
  if (CFGetTypeID(cf) != __kCIIndexSetInvertedTypeID)
  {
    v15 = cf[4];
    if (v15 > -10)
    {
      if (v15 < -1)
      {
        v15 = -2 - v15;
        v19 = 4;
        goto LABEL_15;
      }
    }
    else
    {
      v16 = cf[6] - cf[5];
      v17 = a3 - v15 - 10;
      if (v16 + 1 < v17)
        v18 = v16 + 1;
      else
        v18 = v17;
      v15 = -10 - v18;
      cf[4] = -10 - v18;
      if ((v18 & 0x80000000) == 0)
        goto LABEL_17;
    }
    v19 = cf[8];
LABEL_15:
    if (v19 < v15 + a3)
      _CIIndexSetMakeSpace((unsigned int *)cf, a3, a5, 0, a6);
  }
LABEL_17:
  if (cf[4] <= -10)
  {
    v20 = a3;
    do
    {
      v22 = *v12++;
      v21 = v22;
      v23 = cf[6];
      v24 = v23 >= v22;
      v25 = v23 - v22;
      if (v24 && v21 >= cf[5])
        *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * (v25 >> 5)) |= 1 << v25;
      --v20;
    }
    while (v20);
    if ((a6 & 1) == 0)
      _CIIndexSetConvertIfInvertedArrayIsMoreEfficient(cf, a5, v14);
    return;
  }
  if (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID)
  {
    v26 = cf[9];
    v27 = cf[4];
    if ((int)v26 > v27)
    {
      v119 = __si_assert_copy_extra_268();
      __message_assert_272((uint64_t)v119, v120, v121, v122, v123, v124, v125, v126, (char)"CIIndexSet.c");
      free(v119);
      if (__valid_fs(-1))
        v127 = 2989;
      else
        v127 = 3072;
      *(_DWORD *)v127 = -559038737;
      abort();
    }
    LODWORD(v28) = cf[8] - v27;
    memmove((void *)(*((_QWORD *)cf + 5) + 4 * v28), *((const void **)cf + 5), 4 * v26);
    v29 = cf[4];
    cf[9] = v29;
    if (v29 < 1 || (int)(v29 + a3) <= (int)((__clz(v29) ^ 0x1F) * a3))
    {
      v33 = 0;
      if ((a4 & 1) != 0)
      {
        LODWORD(v31) = 0;
        do
        {
          v34 = v12[v33];
          if (v34 > cf[6] || v34 < cf[5])
            break;
          if (v28 < cf[8])
          {
            v28 = v28;
            v31 = (int)v31;
            while (1)
            {
              v35 = *((_QWORD *)cf + 5);
              v36 = *(_DWORD *)(v35 + 4 * v28);
              if (v36 <= v34)
                break;
              ++v28;
              v37 = v31 + 1;
              *(_DWORD *)(v35 + 4 * v31++) = v36;
              if (v28 >= cf[8])
              {
                LODWORD(v31) = v37;
                goto LABEL_36;
              }
            }
            if (*(_DWORD *)(v35 + 4 * v28) == v34)
            {
              --cf[4];
              LODWORD(v28) = v28 + 1;
            }
          }
LABEL_36:
          ++v33;
        }
        while (v33 != a3);
      }
      else
      {
        LODWORD(v65) = 0;
        while (1)
        {
          v66 = v12[~(_DWORD)v33 + a3];
          if (v66 > cf[6] || v66 < cf[5])
            break;
          if (v28 < cf[8])
          {
            v28 = v28;
            v65 = (int)v65;
            while (1)
            {
              v67 = *((_QWORD *)cf + 5);
              v68 = *(_DWORD *)(v67 + 4 * v28);
              if (v68 <= v66)
                break;
              ++v28;
              v69 = v65 + 1;
              *(_DWORD *)(v67 + 4 * v65++) = v68;
              if (v28 >= cf[8])
              {
                LODWORD(v65) = v69;
                goto LABEL_89;
              }
            }
            if (*(_DWORD *)(v67 + 4 * v28) == v66)
            {
              --cf[4];
              LODWORD(v28) = v28 + 1;
            }
          }
LABEL_89:
          ++v33;
          LODWORD(v31) = v65;
          if (v33 == a3)
            goto LABEL_103;
        }
        LODWORD(v31) = v65;
      }
LABEL_103:
      v74 = cf[4];
      if ((int)v31 < v74)
        v74 = v31;
      cf[9] = v74;
      return;
    }
    v30 = 0;
    LODWORD(v31) = 0;
    while (1)
    {
      v38 = ~v30 + a3;
      if (a4)
        v38 = v30;
      v39 = v12[v38];
      if (v39 >= cf[5])
      {
        if (v39 > cf[6])
          goto LABEL_103;
        v40 = *((_QWORD *)cf + 5);
        v41 = cf[8];
        v42 = v41 - 1;
        LODWORD(v43) = v28;
        if ((int)(v41 - 33) < (int)v28)
        {
LABEL_61:
          v43 = (int)v43;
          v45 = v42 + 1 > (int)v43 ? v42 + 1 : v43;
          while (v43 <= v42)
          {
            v47 = *(_DWORD *)(v40 + 4 * v43++);
            if (v47 <= v39)
            {
              v45 = v43 - 1;
              break;
            }
          }
        }
        else
        {
          while (1)
          {
            v44 = v42 - v43;
            if (v42 < (int)v43)
              ++v44;
            v45 = v43 + (v44 >> 1);
            v46 = *(_DWORD *)(v40 + 4 * (int)v45);
            if (v46 == v39)
              break;
            if (v46 <= v39)
              v42 = v45 - 1;
            else
              LODWORD(v43) = v45 + 1;
            if ((int)v43 > v42 - 32)
              goto LABEL_61;
          }
        }
        if (v45 < v41)
        {
          if (v45 == (_DWORD)v28)
          {
            if (*(_DWORD *)(v40 + 4 * v28) != v39)
              goto LABEL_48;
          }
          else
          {
            memmove((void *)(v40 + 4 * (int)v31), (const void *)(v40 + 4 * v28), 4 * (v45 - v28));
            LODWORD(v31) = v45 - v28 + v31;
            if (*(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v45) != v39)
            {
              LODWORD(v28) = v45;
              if ((int)v31 >= cf[8])
              {
                v48 = __si_assert_copy_extra_268();
                __message_assert_272((uint64_t)v48, v49, v50, v51, v52, v53, v54, v55, (char)"CIIndexSet.c");
                free(v48);
                if (__valid_fs(-1))
                {
                  MEMORY[0xBAD] = -559038737;
                  abort();
                }
                MEMORY[0xC00] = -559038737;
                abort();
              }
              goto LABEL_48;
            }
            LODWORD(v28) = v45;
          }
          --cf[4];
          LODWORD(v28) = v28 + 1;
        }
      }
LABEL_48:
      if (++v30 == a3)
        goto LABEL_103;
    }
  }
  v32 = cf[4];
  if ((v32 & 0x80000000) != 0)
  {
    v56 = -2;
    v57 = -2 - v32;
    v58 = (char *)(cf + 8);
    v128 = *((_OWORD *)cf + 2);
    cf[4] = -2;
    if (v32 <= 0xFFFFFFFD)
    {
      v59 = 0;
      v60 = 0;
      v61 = 0;
      while (1)
      {
        v62 = ~v61 + a3;
        if (a4)
          v62 = v61;
        v63 = v12[v62];
        v64 = *((_DWORD *)&v128 + v60);
        if (v64 <= v63)
        {
          if (v64 == v63)
          {
            ++v60;
            *(_DWORD *)&v58[4 * v59] = v63;
            v56 = cf[4] - 1;
            cf[4] = v56;
            ++v61;
            goto LABEL_85;
          }
          *(_DWORD *)&v58[4 * v59] = v63;
          ++v61;
        }
        else
        {
          ++v60;
          *(_DWORD *)&v58[4 * v59] = v64;
        }
        v56 = cf[4] - 1;
        cf[4] = v56;
LABEL_85:
        ++v59;
        if (v61 >= (int)a3 || v60 >= v57)
          goto LABEL_107;
      }
    }
    v61 = 0;
    v60 = 0;
    LODWORD(v59) = 0;
LABEL_107:
    if (v61 >= (int)a3)
    {
LABEL_160:
      if (v60 < v57)
      {
        memcpy(&cf[v59 + 8], (char *)&v128 + 4 * v60, 4 * (-3 - (v60 + v32)) + 4);
        cf[4] = v60 + v32 + v56 + 2;
      }
      return;
    }
    v59 = v59;
    if ((a4 & 1) == 0)
    {
      v104 = v61;
      v105 = a3 - (uint64_t)v61;
      if (v105 <= 0xF)
        goto LABEL_157;
      v109 = ~(uint64_t)v61 + a3;
      if ((int)(~v61 + a3) < 0)
        goto LABEL_157;
      if (HIDWORD(v109))
        goto LABEL_157;
      v110 = v105 & 0xFFFFFFFFFFFFFFF8;
      v104 = (v105 & 0xFFFFFFFFFFFFFFF8) + v61;
      v111 = (int8x16_t *)&cf[v59 + 12];
      v112 = v105 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v113 = &v12[(int)v109];
        v114 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v113 - 3));
        v115 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v113 - 7));
        v111[-1] = vextq_s8(v114, v114, 8uLL);
        *v111 = vextq_s8(v115, v115, 8uLL);
        v111 += 2;
        LODWORD(v109) = v109 - 8;
        v112 -= 8;
      }
      while (v112);
      v59 = v110 + v59;
      if (v105 != v110)
      {
LABEL_157:
        v106 = a3 - v104;
        v107 = ~(_DWORD)v104 + a3;
        do
        {
          *(_DWORD *)&v58[4 * v59++] = v12[v107--];
          --v106;
        }
        while (v106);
      }
      goto LABEL_159;
    }
    v75 = v61;
    memcpy(&cf[v59 + 8], &v12[v61], 4 * (~v61 + a3) + 4);
    v76 = a3 - (uint64_t)v61;
    if (v76 >= 4)
    {
      v77 = v76 & 0xFFFFFFFFFFFFFFFCLL;
      v78 = 0uLL;
      v79 = (int64x2_t)v59;
      v80 = vdupq_n_s64(1uLL);
      v81 = v76 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v79 = vaddq_s64(v79, v80);
        v78 = vaddq_s64(v78, v80);
        v81 -= 4;
      }
      while (v81);
      LODWORD(v59) = vaddvq_s64(vaddq_s64(v78, v79));
      if (v76 == v77)
        goto LABEL_159;
      v75 = v77 + v61;
    }
    LODWORD(v59) = v59 + a3 - v75;
LABEL_159:
    v56 = v61 + v56 - a3;
    cf[4] = v56;
    goto LABEL_160;
  }
  if (a4)
  {
    CIIndexSetAddSortedIndexes_ArrayBackwards((uint64_t)cf, v12, a3);
    return;
  }
  v70 = binarySearchMap((uint64_t)cf, v12[v7]);
  v71 = v70;
  v72 = cf[4];
  v73 = cf[8];
  if (v73 == v72)
  {
    v73 = cf[4];
LABEL_101:
    cf[9] = v71;
    goto LABEL_116;
  }
  v82 = cf[9];
  if ((_DWORD)v82 != v70)
  {
    v108 = *((_QWORD *)cf + 5);
    if ((int)v82 >= v70)
    {
      memmove((void *)(v108 + 4 * (v73 - v72 + v70)), (const void *)(v108 + 4 * v70), 4 * ((int)v82 - v70));
      v73 = cf[8];
      v72 = cf[4];
    }
    else
    {
      memmove((void *)(v108 + 4 * v82), (const void *)(v108 + 4 * (v82 + v73 - v72)), 4 * (v70 - (v82 + v73 - v72)));
      v73 = cf[8];
      v72 = cf[4];
      v71 = v71 - v73 + v72;
    }
    goto LABEL_101;
  }
LABEL_116:
  v83 = v73 - v72 + v71;
  if (v72 < 1 || (int)(v72 + a3) <= (int)((__clz(v72) ^ 0x1F) * a3))
  {
    v99 = 0;
    while (1)
    {
      v101 = v12[~(_DWORD)v99 + a3];
      if (v101 <= cf[6] && v101 >= cf[5])
      {
        if (v83 >= cf[8])
          goto LABEL_144;
        v83 = v83;
        while (1)
        {
          v102 = *((_QWORD *)cf + 5);
          v103 = *(_DWORD *)(v102 + 4 * v83);
          if (v103 <= v101)
            break;
          ++v83;
          v100 = v71 + 1;
          *(_DWORD *)(v102 + 4 * v71++) = v103;
          if (v83 >= cf[8])
            goto LABEL_145;
        }
        if (v103 == v101)
        {
          LODWORD(v83) = v83 + 1;
          *(_DWORD *)(v102 + 4 * v71++) = v101;
        }
        else
        {
LABEL_144:
          v100 = v71;
LABEL_145:
          v71 = v100 + 1;
          *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v100) = v101;
          ++cf[4];
        }
      }
      if (++v99 == a3)
        goto LABEL_172;
    }
  }
  v84 = 0;
  v85 = a3;
  v86 = a3 - 2;
  while (1)
  {
    v88 = v12[~(_DWORD)v84 + a3];
    if (v88 > cf[6] || v88 < cf[5])
      goto LABEL_121;
    v89 = *((_QWORD *)cf + 5);
    v90 = cf[8];
    v91 = v90 - 1;
    LODWORD(v92) = v83;
    if ((int)(v90 - 33) < (int)v83)
    {
LABEL_132:
      v92 = (int)v92;
      v87 = v91 + 1 > (int)v92 ? v91 + 1 : (int)v92;
      while (v92 <= v91)
      {
        v95 = *(_DWORD *)(v89 + 4 * v92++);
        if (v95 <= v88)
        {
          v87 = v92 - 1;
          break;
        }
      }
    }
    else
    {
      while (1)
      {
        v93 = v91 - v92;
        if (v91 < (int)v92)
          ++v93;
        v87 = (v92 + (v93 >> 1));
        v94 = *(_DWORD *)(v89 + 4 * (int)v87);
        if (v94 == v88)
          break;
        if (v94 <= v88)
          v91 = v87 - 1;
        else
          LODWORD(v92) = v87 + 1;
        if ((int)v92 > v91 - 32)
          goto LABEL_132;
      }
    }
    if (v87 < v90 && v88 == *(_DWORD *)(v89 + 4 * v87))
      goto LABEL_121;
    ++cf[4];
    v96 = v87 - v83;
    if ((_DWORD)v87 != (_DWORD)v83)
      break;
    v87 = v83;
LABEL_120:
    *(_DWORD *)(v89 + 4 * v71++) = v88;
    v83 = v87;
LABEL_121:
    ++v84;
    --v86;
    --v7;
    if (v84 == v85)
      goto LABEL_172;
  }
  v97 = (void *)(v89 + 4 * v71);
  v98 = (const void *)(v89 + 4 * v83);
  if ((_DWORD)v87 != v90)
  {
    memmove(v97, v98, 4 * (v87 - v83));
    v85 = a3;
    v71 += v96;
    v89 = *((_QWORD *)cf + 5);
    goto LABEL_120;
  }
  v116 = v90 - v83;
  memmove(v97, v98, 4 * (v90 - v83));
  v117 = v116 + v71;
  v71 += v116 + 1;
  *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v117) = v88;
  if ((int)v84 + 1 < (int)a3)
  {
    do
    {
      v118 = v12[v86];
      if (v118 <= cf[6] && v118 >= cf[5])
      {
        *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v71++) = v118;
        ++cf[4];
      }
      --v86;
      --v7;
    }
    while (v7);
  }
LABEL_172:
  cf[9] = v71;
}

void blob_free(_QWORD *a1, unsigned int a2, _QWORD *a3)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;

  v3 = 4 * a2;
  if (v3 >= *MEMORY[0x1E0C85AD8] >> 1)
  {
    munmap(a1, (v3 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8]);
  }
  else if (a3 && a2 - 8 <= 0x37 && (v4 = __PAIR64__(a2, a2 - 8) >> 3, v4 <= 7) && ((0x8Bu >> v4) & 1) != 0)
  {
    v5 = qword_1B8630C88[v4];
    *a1 = 0;
    v6 = &a3[v5];
    v8 = v6[2];
    v7 = v6 + 2;
    a1[1] = v8;
    if (*v7)
      v9 = *(_DWORD *)(*v7 + 16) + 1;
    else
      v9 = 1;
    *((_DWORD *)a1 + 4) = v9;
    *v7 = a1;
    if (v9 >= 0x80u >> v5)
    {
      cicachelistenqueue(*a3 + 24 * v5 + 32, (uint64_t)a1, 0);
      *v7 = 0;
    }
  }
  else
  {
    free(a1);
  }
}

_QWORD *blob_realloc(_QWORD *__src, unsigned int a2, unsigned int a3, _QWORD *a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t buf[16];

  v5 = *MEMORY[0x1E0C85AD8] >> 1;
  v6 = 4 * a3;
  if (v5 <= 4 * (unint64_t)a2 || v6 >= v5)
  {
    v19 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26, (char)"CIIndexSet.c");
    free(v19);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAA] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (a4
    && a3 - 8 <= 0x37
    && (v10 = __PAIR64__(a3, a3 - 8) >> 3, v10 <= 7)
    && ((0x8Bu >> v10) & 1) != 0
    && ((v14 = qword_1B8630C88[v10], v15 = &a4[v14], v17 = (_QWORD *)v15[2], v16 = v15 + 2, (v11 = v17) != 0)
     || *a4 && (v11 = (_QWORD *)cicachelistdequeue(*a4 + 24 * v14 + 32, 0)) != 0))
  {
    *v16 = v11[1];
    if (a3 >= a2)
      v18 = a2;
    else
      v18 = a3;
    memcpy(v11, __src, 4 * v18);
    blob_free(__src, a2, a4);
  }
  else
  {
    if (__src)
    {
      v11 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, __src, v6, 0xECA6AA46uLL);
      if (v11)
        return v11;
    }
    else
    {
      v11 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v6, 0x8DDAA030uLL);
      if (v11)
        return v11;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    return 0;
  }
  return v11;
}

_QWORD *blob_malloc(unsigned int a1, _QWORD *a2)
{
  size_t v2;
  unsigned int v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  __int16 v9[8];

  v2 = 4 * a1;
  if (v2 >= *MEMORY[0x1E0C85AD8] >> 1)
    return mmap(0, (v2 + *MEMORY[0x1E0C85AD8] - 1) & -*MEMORY[0x1E0C85AD8], 3, 4098, -134217728, 0);
  if (a2
    && a1 - 8 <= 0x37
    && (v3 = __PAIR64__(a1, a1 - 8) >> 3, v3 <= 7)
    && ((0x8Bu >> v3) & 1) != 0
    && ((v5 = qword_1B8630C88[v3], v6 = &a2[v5], v8 = (_QWORD *)v6[2], v7 = v6 + 2, (result = v8) != 0)
     || *a2 && (result = (_QWORD *)cicachelistdequeue(*a2 + 24 * v5 + 32, 0)) != 0))
  {
    *v7 = result[1];
  }
  else
  {
    result = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v2, 0x6085D6BuLL);
    if (!result)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        v9[0] = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v9, 2u);
      }
      return 0;
    }
  }
  return result;
}

double __SIUserCtxInit(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

unint64_t bt_mergeEntry(uint64_t a1, _DWORD *a2, uint64_t a3, _DWORD *a4, unsigned __int8 *a5, int a6)
{
  unsigned int v6;
  char *v8;
  char *v9;
  const char *v10;
  unint64_t v11;
  unint64_t v13;
  char *v14;
  char *v15;
  const char *v16;
  char *v17;
  const char *v18;
  char *v19;
  const char *v20;

  v6 = a3;
  if (HIDWORD(a3) != 3)
  {
    if (HIDWORD(a3) != 1)
    {
      if (HIDWORD(a3))
      {
        v8 = __si_assert_copy_extra_1644(0);
        v9 = v8;
        if (v8)
          v10 = v8;
        else
          v10 = "";
        __message_assert("%s:%u: Unexpected code path %s ", "BurstTrie.c", 1681, v10);
        free(v9);
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      v14 = __si_assert_copy_extra_1644(0);
      v15 = v14;
      v16 = "";
      if (v14)
        v16 = v14;
      __message_assert("%s:%u: failed assertion '%s' %s ", "BurstTrie.c", 1662, "ptr.kind", v16);
      goto LABEL_24;
    }
    if ((_DWORD)a3)
    {
      v13 = mergeEntry(a1, a2, a3, a5, a6, a4, a3 | 0x100000000);
      v6 = v13;
      if (HIDWORD(v13))
      {
        v11 = v13 & 0xFFFFFFFF00000000;
        return v6 | v11;
      }
      if (a2[1])
      {
        v11 = 0;
        return v6 | v11;
      }
      v19 = __si_assert_copy_extra_1644(0);
      v15 = v19;
      v20 = "";
      if (v19)
        v20 = v19;
      __message_assert("%s:%u: failed assertion '%s' %s ", "BurstTrie.c", 1684, "ptr.kind || ms->err", v20);
    }
    else
    {
      v17 = __si_assert_copy_extra_1644(0);
      v15 = v17;
      v18 = "";
      if (v17)
        v18 = v17;
      __message_assert("%s:%u: failed assertion '%s' %s ", "BurstTrie.c", 1676, "ptr.next", v18);
    }
LABEL_24:
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  mergeEntryFat(a1, (uint64_t)a2, a3, a5, a6, a4);
  v11 = 0x300000000;
  return v6 | v11;
}

uint64_t mergeEntryFat(uint64_t result, uint64_t a2, unsigned int a3, unsigned __int8 *a4, int a5, _DWORD *a6)
{
  uint64_t v8;
  uint64_t v11;
  unsigned int *v12;
  char v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  char *v32;
  char *v33;
  const char *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  char v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  BOOL v51;
  int v52;
  unsigned int v54;
  unsigned int v55;
  char v56;
  uint64_t v57;
  char v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  BOOL v64;
  int v65;
  unsigned int v67;
  char v68;
  int v69;
  unsigned int v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  char v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  const char *v84;
  char *v85;
  char *v86;
  const char *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  const char *v91;
  unint64_t *v92;
  unsigned int v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;

  v8 = result;
  v109 = *MEMORY[0x1E0C80C00];
  if (!a5)
  {
    v24 = (_DWORD *)(*(_QWORD *)(result + 8) + 1028 * a3);
    if (!*v24)
    {
      *v24 = *(_DWORD *)(a2 + 8);
      if (!*(_DWORD *)a2)
        ++*(_DWORD *)(a2 + 8);
    }
    *a6 = *(_DWORD *)(*(_QWORD *)(result + 8) + 1028 * a3);
    return result;
  }
  v11 = *(_QWORD *)(result + 8) + 1028 * a3 + 4 * *a4;
  v14 = *(_DWORD *)(v11 + 4);
  v12 = (unsigned int *)(v11 + 4);
  v13 = v14;
  v15 = v14 >> 1;
  v16 = v14 >> 3;
  v17 = (unint64_t)(v14 & 7) << 32;
  v18 = v14 >> 2;
  if ((v14 & 3) == 1)
  {
    v17 = 0x100000000;
    v16 = v18;
  }
  v19 = (v13 & 1) == 0;
  if ((v13 & 1) != 0)
    v20 = v17;
  else
    v20 = 0;
  if (v19)
    v21 = v15;
  else
    v21 = v16;
  v22 = v20 | v21;
  if (!(_DWORD)v21)
  {
    v93 = a3;
    if (*(_DWORD *)a2)
    {
      v92 = (unint64_t *)(a2 + 2148);
      v25 = *(_QWORD *)(a2 + 2148);
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v96 = 0;
      v26 = flatStoreNewBlockForCompact(result + 160, v25, (uint64_t)&v97, (int *)&v96);
      v27 = v96;
      if ((int)v96 >= 1)
      {
        v28 = (unint64_t *)&v97;
        do
        {
          v30 = *v28++;
          v29 = v30;
          bit_vector_set_2851(v8 + 4528, (v30 >> 17));
          if ((v30 >> 17) != (v30 + 8) >> 17)
            bit_vector_set_2851(v8 + 4528, (v29 >> 17) + 1);
          --v27;
        }
        while (v27);
      }
      v94 = v26;
      *v92 = v26;
      v31 = v93;
      if (v26)
      {
LABEL_27:
        result = mergeEntryFlat(v8);
        if ((result & 1) != 0)
        {
          if (*(_DWORD *)(a2 + 4))
            return result;
          v32 = __si_assert_copy_extra_1644(0);
          v33 = v32;
          v34 = "";
          if (v32)
            v34 = v32;
          __message_assert("%s:%u: failed assertion '%s' %s ", "BurstTrie.c", 1264, "ms->err", v34);
LABEL_120:
          free(v33);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        v76 = HIDWORD(v94) | (8 * v94);
        if (!HIDWORD(v94))
          v76 = 2 * v94;
        if (HIDWORD(v94) == 1)
          v77 = (4 * v94) | 1;
        else
          v77 = v76;
        if ((v77 & 3) == 1)
          v78 = 2;
        else
          v78 = 3;
        if ((v77 & 1) == 0)
          v78 = 1;
        if (v77 >> v78 == (_DWORD)v94)
        {
          *(_DWORD *)(*(_QWORD *)(v8 + 8) + 1028 * v31 + 4 * *a4 + 4) = v77;
          return result;
        }
LABEL_117:
        v83 = __si_assert_copy_extra_1644(0);
        v33 = v83;
        v84 = "";
        if (v83)
          v84 = v83;
        __message_assert("%s:%u: failed assertion '%s' %s ", "BurstTrie.h", 81, "ptrM(newptr).next == ptr.next", v84);
        goto LABEL_120;
      }
    }
    else
    {
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v69 = 64;
      v96 = 0;
      do
      {
        v70 = v69;
        v69 *= 2;
      }
      while (v70 < a5 + 22);
      v71 = storageAllocOffset(result + 160, v70, (uint64_t)&v97, (int *)&v96);
      if (v71)
      {
        v72 = v71;
        v73 = storageResolvePtr(v8 + 160, v71, v70, 1);
        *(_WORD *)v73 = 0;
        v74 = __clz(__rbit32(v70 >> 6));
        if (!v70)
          v74 = -1;
        v73[2] = v74;
        v75 = (v72 >> 6);
      }
      else
      {
        v75 = 0;
      }
      v79 = v96;
      if ((int)v96 >= 1)
      {
        v80 = (unint64_t *)&v97;
        do
        {
          v82 = *v80++;
          v81 = v82;
          bit_vector_set_2851(v8 + 4528, (v82 >> 17));
          if ((v82 >> 17) != (v82 + 8) >> 17)
            bit_vector_set_2851(v8 + 4528, (v81 >> 17) + 1);
          --v79;
        }
        while (v79);
      }
      v94 = v75;
      v31 = v93;
      if (v75)
        goto LABEL_27;
    }
    result = (uint64_t)__error();
    *(_DWORD *)(a2 + 4) = *(_DWORD *)result;
    return result;
  }
  v23 = HIDWORD(v20);
  if ((_DWORD)v23)
  {
    if ((_DWORD)v23 != 1)
    {
      if ((_DWORD)v23 == 3)
        return mergeEntryFat(result, a2);
      v89 = __si_assert_copy_extra_1644(0);
      v90 = v89;
      if (v89)
        v91 = v89;
      else
        v91 = "";
      __message_assert("%s:%u: Unexpected code path %s ", "BurstTrie.c", 1246, v91);
      free(v90);
      goto LABEL_126;
    }
    result = mergeEntry(result, (_DWORD *)a2, v21, a4 + 1, a5 - 1, a6, v22);
    if (!*(_DWORD *)(a2 + 4))
    {
      v57 = *(_QWORD *)(v8 + 8) + 1028 * a3 + 4 * *a4;
      v59 = *(_DWORD *)(v57 + 4);
      v44 = (unsigned int *)(v57 + 4);
      v58 = v59;
      v60 = v59 >> 1;
      v61 = v59 >> 3;
      v62 = v59 & 7;
      v63 = v59 >> 2;
      if ((v59 & 3) == 1)
      {
        v62 = 1;
        v61 = v63;
      }
      v64 = (v58 & 1) == 0;
      if ((v58 & 1) != 0)
        v65 = v62;
      else
        v65 = 0;
      if (!v64)
        v60 = v61;
      if (v60 != (_DWORD)result || v65 != HIDWORD(result))
      {
        v67 = HIDWORD(result) | (8 * result);
        if (!HIDWORD(result))
          v67 = 2 * result;
        if (HIDWORD(result) == 1)
          v54 = (4 * result) | 1;
        else
          v54 = v67;
        if ((v54 & 3) == 1)
          v68 = 2;
        else
          v68 = 3;
        if ((v54 & 1) == 0)
          v68 = 1;
        if (v54 >> v68 != (_DWORD)result)
        {
          v85 = __si_assert_copy_extra_1644(0);
          v86 = v85;
          v87 = "";
          if (v85)
            v87 = v85;
          __message_assert("%s:%u: failed assertion '%s' %s ", "BurstTrie.h", 81, "ptrM(newptr).next == ptr.next", v87);
          free(v86);
          if (!__valid_fs(-1))
          {
            v88 = 3072;
LABEL_128:
            *(_DWORD *)v88 = -559038737;
            abort();
          }
LABEL_126:
          v88 = 2989;
          goto LABEL_128;
        }
        goto LABEL_90;
      }
    }
    return result;
  }
  v35 = *v12;
  LODWORD(v36) = v35 >> 1;
  v37 = v35 >> 3;
  v38 = (unint64_t)(v35 & 7) << 32;
  if ((v35 & 3) == 1)
  {
    v38 = 0x100000000;
    v37 = v35 >> 2;
  }
  v39 = (v35 & 1) == 0;
  if ((v35 & 1) != 0)
    v40 = v38;
  else
    v40 = 0;
  if (v39)
    v36 = v36;
  else
    v36 = v37;
  v95 = v40 | v36;
  v41 = (a5 - 1);
  result = mergeEntryFlat(result);
  if ((_DWORD)result)
  {
    if (*(_DWORD *)(a2 + 4))
      return result;
    result = burst2(v8, a2, v95);
    if (*(_DWORD *)(a2 + 4))
      return result;
    result = bt_mergeEntry(v8, a2, result, a6, a4 + 1, v41);
    v95 = result;
    if (*(_DWORD *)(a2 + 4))
      return result;
    v42 = *(_QWORD *)(v8 + 8) + 1028 * a3 + 4 * *a4;
    result = ptrD(result);
    *(_DWORD *)(v42 + 4) = result;
  }
  v43 = *(_QWORD *)(v8 + 8) + 1028 * a3 + 4 * *a4;
  v46 = *(_DWORD *)(v43 + 4);
  v44 = (unsigned int *)(v43 + 4);
  v45 = v46;
  v47 = v46 >> 1;
  v48 = v46 >> 3;
  v49 = v46 & 7;
  v50 = v46 >> 2;
  if ((v46 & 3) == 1)
  {
    v49 = 1;
    v48 = v50;
  }
  v51 = (v45 & 1) == 0;
  if ((v45 & 1) != 0)
    v52 = v49;
  else
    v52 = 0;
  if (!v51)
    v47 = v48;
  if ((_DWORD)v95 != v47 || HIDWORD(v95) != v52)
  {
    v54 = (4 * v95) | 1;
    v55 = HIDWORD(v95) | (8 * v95);
    if (!HIDWORD(v95))
      v55 = 2 * v95;
    if (HIDWORD(v95) != 1)
      v54 = v55;
    if ((v54 & 3) == 1)
      v56 = 2;
    else
      v56 = 3;
    if ((v54 & 1) == 0)
      v56 = 1;
    if (v54 >> v56 == (_DWORD)v95)
    {
LABEL_90:
      *v44 = v54;
      return result;
    }
    goto LABEL_117;
  }
  return result;
}

uint64_t mergeEntryFlat(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  unsigned int v4;
  unsigned int v5;
  _OWORD *v6;
  _OWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int8x8_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  uint8x8_t v28;
  unsigned int v29;
  __int128 v30;
  _OWORD *v32;
  uint64_t result;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  size_t v37;
  uint64_t v38;
  const void *v39;
  size_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  unsigned int v54;
  int v55;
  int v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  const char *v74;
  unint64_t v75;
  char *v76;
  char *v77;
  int v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  __int16 v83;
  int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  size_t v88;
  unsigned int v89;
  const void *v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  const void *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  size_t v119;
  char *v120;
  char *v121;
  char *v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  unint64_t v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unint64_t v138;
  unint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  const char *v158;
  char *v159;
  const char *v160;
  uint64_t v161;
  _BOOL4 v162;
  char *v163;
  char *v164;
  const char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  const char *v170;
  char *v171;
  char *v172;
  const char *v173;
  char *v174;
  char *v175;
  char *v176;
  const char *v177;
  _DWORD *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  const char *v182;
  char *v183;
  char *v184;
  const char *v185;
  char *v186;
  char *v187;
  const char *v188;
  char *v189;
  char *v190;
  const char *v191;
  char *v192;
  const char *v193;
  char *v194;
  const char *v195;
  char *v196;
  const char *v197;
  char *v198;
  const char *v199;
  char *v200;
  const char *v201;
  char *v202;
  const char *v203;
  char *v204;
  char *v205;
  const char *v206;
  char *v207;
  const char *v208;
  char *v209;
  const char *v210;
  char *v211;
  const char *v212;
  char *v213;
  const char *v214;
  char *v215;
  const char *v216;
  char *v217;
  const char *v218;
  char *v219;
  const char *v220;
  char *v221;
  const char *v222;
  char *v223;
  const char *v224;
  unsigned int v225;
  unint64_t v226;
  int v227;
  uint64_t v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unint64_t *v232;
  unsigned int v233;
  _OWORD *v234;
  unsigned int v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  char *v241;
  uint64_t v242;
  unsigned int v243;
  unsigned __int8 *v244;
  _OWORD v245[2];
  __int128 v246;
  __int128 v247;
  size_t __n[2];
  __int128 v249;
  unsigned int v250;
  int v251;
  unsigned __int8 *v252;
  __int128 v253;
  int __s1[4178];
  uint64_t v255;

  v1 = MEMORY[0x1E0C80A78](a1);
  v232 = v3;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v244 = v10;
  v12 = v11;
  v13 = v1;
  v255 = *MEMORY[0x1E0C80C00];
  v14 = HIDWORD(v2);
  v15 = v1 + 160;
  v238 = v2;
  v226 = (unint64_t)v2 << 6;
  if (HIDWORD(v2))
    v16 = 0;
  else
    v16 = (unint64_t)v2 << 6;
  v17 = storageResolvePtr(v1 + 160, v16, 8uLL, 1);
  v228 = v15;
  v18 = storageResolvePtr(v15, v16, 64 << v17[2], 1);
  v20 = *(unsigned __int16 *)v18;
  v21 = (64 << v18[2]) - 8;
  v252 = 0;
  v253 = 0uLL;
  v243 = v9;
  v250 = v9;
  v251 = 0;
  if (v21 < v20)
  {
    v22 = (v20 + 7) | ((unint64_t)(v20 + 7) >> 1) | (((v20 + 7) | ((unint64_t)(v20 + 7) >> 1)) >> 2);
    v23 = v22 | (v22 >> 4) | ((v22 | (v22 >> 4)) >> 8);
    v24 = (v23 | (v23 >> 16)) + 1;
    bzero(__s1, 0x4148uLL);
    scanTrieFatData(v13, 0, v16, v24 + v16, __s1);
    v25 = *(_QWORD *)(v13 + 392);
    if (v25 < v20 + 8)
      v26 = 0;
    else
      v26 = -1;
    if (v16 == v26)
    {
      v183 = __si_assert_copy_extra_1644(*(_DWORD **)(v13 + 376));
      v184 = v183;
      v185 = "";
      if (v183)
        v185 = v183;
      __message_assert("%s:%u: failed assertion '%s' %s offset: %lld, freeRegion: %lld, kind:%d", "FlatStore.c", 183, "flatStoreGetOffset(ptr)+roundup2(pageEnd+int_sizeof(*page) <= freeRegion)", v185, 0, v25, v14);
      v174 = v184;
      goto LABEL_427;
    }
    v27 = __clz(__rbit32((v24 + 8) >> 6));
    if (v24 < 0x38)
      v27 = -1;
    v18[2] = v27;
    v21 = (64 << v27) - 8;
  }
  if (v21 < v20)
  {
    if (!isExFat(*(_DWORD *)(v13 + 152)))
    {
LABEL_408:
      v171 = __si_assert_copy_extra_1644(*(_DWORD **)(v13 + 376));
      v172 = v171;
      v173 = "";
      if (v171)
        v173 = v171;
      __message_assert("%s:%u: failed assertion '%s' %s ps:%d, pe:%d, pk:%d, po:%llx, ss:%llx se:%llx", "FlatStore.c", 198, "pageSize >= pageEnd && pageSize && (__builtin_popcount(pageSize+int_sizeof(*page)) == 1)", v173, v21, v20, v14, v16, *(_QWORD *)(v13 + 384), *(_QWORD *)(v13 + 392));
      v174 = v172;
      goto LABEL_427;
    }
LABEL_403:
    v168 = __si_assert_copy_extra_1644(*(_DWORD **)(v13 + 376));
    v169 = v168;
    v170 = "";
    if (v168)
      v170 = v168;
    si_analytics_log_2064("%s:%u: failure log '%s' %s ps:%d, pe:%d, pk:%d, po:%llx, ss:%llx se:%llx", "FlatStore.c", 192, "pageSize >= pageEnd && pageSize && (__builtin_popcount(pageSize+int_sizeof(*page)) == 1)", v170, v21, v20, v14, v16, *(_QWORD *)(v13 + 384), *(_QWORD *)(v13 + 392));
    v167 = v169;
    goto LABEL_406;
  }
  v19.i32[0] = v21 + 8;
  v28 = (uint8x8_t)vcnt_s8(v19);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.i32[0] != 1)
  {
    if (!isExFat(*(_DWORD *)(v13 + 152)))
      goto LABEL_408;
    goto LABEL_403;
  }
  v234 = v7;
  v236 = v21;
  v240 = v13;
  v29 = *(_DWORD *)(v12 + 1100);
  if (v29 > 0x1000)
  {
    v175 = __si_assert_copy_extra_1644(*(_DWORD **)(v13 + 376));
    v176 = v175;
    v177 = "";
    if (v175)
      v177 = v175;
    __message_assert("%s:%u: failed assertion '%s' %s %ld, ps:%d, pe:%d, pk:%d, po:%llx, ss:%llx se:%llx", "FlatStore.c", 202, "ms->currentStringLen <= CMPBUFFER_SIZE", v177, *(unsigned int *)(v12 + 1100), v21, v20, v14, v16, *(_QWORD *)(v13 + 384), *(_QWORD *)(v13 + 392));
    free(v176);
    v178 = *(_DWORD **)(v13 + 376);
    goto LABEL_416;
  }
  bzero(__s1, 0x1000uLL);
  if (!v5)
  {
    *(_DWORD *)(v12 + 28) = v238;
    *(_DWORD *)(v12 + 32) = v14;
    if (!(_DWORD)v14)
      goto LABEL_18;
LABEL_50:
    v45 = v13;
    v46 = __si_assert_copy_extra_1644(*(_DWORD **)(v13 + 376));
LABEL_51:
    __message_assert("%s:%u: failed assertion '%s' %s flat store");
LABEL_415:
    free(v46);
    v178 = *(_DWORD **)(v45 + 376);
    goto LABEL_416;
  }
  __memcpy_chk();
  if (*(_DWORD *)(v12 + 28) != v238)
  {
    v179 = v13;
    v180 = __si_assert_copy_extra_1644(*(_DWORD **)(v13 + 376));
    v181 = v180;
    v182 = "";
    if (v180)
      v182 = v180;
    __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 209, "ms->pageOffset.next==_ptr.next", v182);
    goto LABEL_422;
  }
  if ((_DWORD)v14)
    goto LABEL_50;
LABEL_18:
  if (v16 >= *(_QWORD *)(v13 + 392))
  {
    v45 = v13;
    v46 = __si_assert_copy_extra_1644(*(_DWORD **)(v13 + 376));
    __message_assert("%s:%u: failed assertion '%s' %s offset: %lld, freeRegion: %lld, kind:%d");
    goto LABEL_415;
  }
  v30 = 0uLL;
  *(_OWORD *)__n = 0u;
  v249 = 0u;
  if (*(_DWORD *)v12)
  {
    if ((_DWORD)v20 && v5 == 0)
    {
      v32 = (_OWORD *)(v12 + 1084);
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0;
      *(_BYTE *)(v12 + 40) = 0;
      goto LABEL_26;
    }
  }
  v34 = v5;
  v230 = v5;
  v242 = v12;
  if (v20 <= v5)
  {
LABEL_40:
    if (v34)
    {
      if (v29 >= v243)
        v43 = v243;
      else
        v43 = v29;
      if ((_DWORD)v43)
      {
        v44 = 0;
        while (*(unsigned __int8 *)(v12 + 1104 + v44) == v244[v44])
        {
          if (v43 == ++v44)
            goto LABEL_70;
        }
        LODWORD(v43) = v44;
      }
LABEL_70:
      v47 = v243 - v43;
      v251 = v43;
      v250 = v243 - v43;
      if (v243 == (_DWORD)v43)
      {
LABEL_428:
        v45 = v240;
        v46 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
        goto LABEL_51;
      }
    }
    else
    {
      LODWORD(v43) = 0;
      v47 = v243;
    }
    v252 = &v244[v43];
    v253 = *(_OWORD *)(v12 + 8);
    if (*(_DWORD *)v12)
    {
      if (v47 >= 0x80)
      {
        if (v47 >= 0x4000)
        {
          if (v47 >= 0x200000)
          {
            if (v47 >> 28)
              v52 = 5;
            else
              v52 = 4;
          }
          else
          {
            v52 = 3;
          }
        }
        else
        {
          v52 = 2;
        }
      }
      else
      {
        v52 = 1;
      }
      if (v43 >= 0x80)
      {
        if (v43 >= 0x4000)
        {
          if (v43 >= 0x200000)
          {
            if (v43 >> 28)
              v55 = 5;
            else
              v55 = 4;
          }
          else
          {
            v55 = 3;
          }
        }
        else
        {
          v55 = 2;
        }
      }
      else
      {
        v55 = 1;
      }
      v56 = v253;
      v57 = v253 - *(_QWORD *)(v12 + 1084);
      if (v57 >= 0x80)
      {
        if (v57 >= 0x4000)
        {
          if (v57 >= 0x200000)
          {
            if (v57 >> 28)
            {
              if (v57 >> 35)
              {
                if (v57 >> 42)
                {
                  if (v57 >> 49)
                  {
                    if (HIBYTE(v57))
                      v58 = 9;
                    else
                      v58 = 8;
                  }
                  else
                  {
                    v58 = 7;
                  }
                }
                else
                {
                  v58 = 6;
                }
              }
              else
              {
                v58 = 5;
              }
            }
            else
            {
              v58 = 4;
            }
          }
          else
          {
            v58 = 3;
          }
        }
        else
        {
          v58 = 2;
        }
      }
      else
      {
        v58 = 1;
      }
      v132 = *(_QWORD *)(v12 + 1092);
      if (v132)
        v133 = *((_QWORD *)&v253 + 1) == 0;
      else
        v133 = 1;
      if (v133)
        v132 = 0;
      v134 = *((_QWORD *)&v253 + 1) - v132;
      if (v134 >= 0x80)
      {
        if (v134 >= 0x4000)
        {
          if (v134 >= 0x200000)
          {
            if (v134 >> 28)
            {
              if (v134 >> 35)
              {
                if (v134 >> 42)
                {
                  if (v134 >> 49)
                  {
                    if (HIBYTE(v134))
                      v135 = 9;
                    else
                      v135 = 8;
                  }
                  else
                  {
                    v135 = 7;
                  }
                }
                else
                {
                  v135 = 6;
                }
              }
              else
              {
                v135 = 5;
              }
            }
            else
            {
              v135 = 4;
            }
          }
          else
          {
            v135 = 3;
          }
        }
        else
        {
          v135 = 2;
        }
      }
      else
      {
        v135 = 1;
      }
      v62 = v52 + v47 + v55 + v58 + v135;
    }
    else
    {
      if (v47 >= 0x80)
      {
        if (v47 >= 0x4000)
        {
          if (v47 >= 0x200000)
          {
            if (v47 >> 28)
              v53 = 5;
            else
              v53 = 4;
          }
          else
          {
            v53 = 3;
          }
        }
        else
        {
          v53 = 2;
        }
      }
      else
      {
        v53 = 1;
      }
      if (v43 >= 0x80)
      {
        if (v43 >= 0x4000)
        {
          if (v43 >= 0x200000)
          {
            if (v43 >> 28)
              v60 = 5;
            else
              v60 = 4;
          }
          else
          {
            v60 = 3;
          }
        }
        else
        {
          v60 = 2;
        }
      }
      else
      {
        v60 = 1;
      }
      v56 = v253;
      if (v253 >= 0x80)
      {
        if (v253 >= 0x4000)
        {
          if (v253 >= 0x200000)
          {
            if (v253 >> 28)
              v61 = 5;
            else
              v61 = 4;
          }
          else
          {
            v61 = 3;
          }
        }
        else
        {
          v61 = 2;
        }
      }
      else
      {
        v61 = 1;
      }
      v62 = v53 + v47 + v60 + v61;
    }
    v136 = v62 + v20;
    v137 = v236;
    if (v62 + (int)v20 <= v236)
    {
LABEL_362:
      v142 = v242;
      if (v136 > v137)
      {
        v156 = __si_assert_copy_extra_1644(0);
        v157 = v156;
        v158 = "";
        if (v156)
          v158 = v156;
        __message_assert("%s:%u: failed assertion '%s' %s ", "FlatStore.c", 489, "pageEnd + newEntrySize <= pageSize", v158);
        goto LABEL_396;
      }
      goto LABEL_363;
    }
    if (v232 && v236 <= 0xFFF7)
    {
      v138 = reallocBlock(v240, v238, v62 + (int)v20, v232);
      if (!(_DWORD)v138)
        goto LABEL_392;
      if (*(_DWORD *)(v242 + 28))
        *(_QWORD *)(v242 + 28) = v138;
      if (HIDWORD(v138))
        v139 = 0;
      else
        v139 = (unint64_t)v138 << 6;
      v140 = storageResolvePtr(v228, v139, 8uLL, 1);
      v141 = storageResolvePtr(v228, v139, 64 << v140[2], 1);
      LODWORD(v20) = *(unsigned __int16 *)v141;
      v137 = (64 << v141[2]) - 8;
      v136 = v62 + v20;
      if (v62 + (int)v20 > v137)
      {
        v179 = v240;
        v207 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
        v181 = v207;
        v208 = "";
        if (v207)
          v208 = v207;
        __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 470, "pageEnd + newEntrySize <= pageSize", v208);
        goto LABEL_422;
      }
      v18 = v141;
      goto LABEL_362;
    }
    if (v236 <= 0xFFF7 && extendBlock(v240, v238, v62 + (int)v20))
    {
      v153 = (unint64_t)v238 << 6;
      v154 = storageResolvePtr(v228, v153, 8uLL, 1);
      v155 = storageResolvePtr(v228, v153, 64 << v154[2], 1);
      v142 = v242;
      if (v136 <= (64 << v155[2]) - 8)
      {
        v18 = v155;
LABEL_363:
        if (*(_DWORD *)v142)
        {
          *v234 = v253;
          v143 = FlatStorePageEntryWrite2_2088((uint64_t)v18, &v250, (uint64_t *)(v142 + 1084), v20);
        }
        else
        {
          v144 = *(_DWORD *)(v142 + 8);
          *(_DWORD *)(v142 + 8) = v144 + 1;
          *v234 = v253;
          if (v144 != v56)
          {
            v186 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
            v187 = v186;
            v188 = "";
            if (v186)
              v188 = v186;
            __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 512, "termID == getNum(newEntry.termInfo.termInfo.termId.ptr)", v188);
            free(v187);
            v178 = *(_DWORD **)(v240 + 376);
            goto LABEL_416;
          }
          v143 = FlatStorePageEntryWrite((uint64_t)v18, &v250, v20);
        }
        v145 = v143;
        *(_WORD *)v18 = v143;
        v146 = 64 << v18[2];
        v147 = *(unsigned int *)(v240 + 400);
        if ((int)v147 < 1)
        {
          v151 = -1;
        }
        else
        {
          v148 = 53;
          do
          {
            v149 = *(_QWORD **)(v240 + 8 * v148);
            if (v149
              && (v150 = v149[1], v150 + 1 >= 2)
              && v150 <= (unint64_t)v18
              && (v152 = v149[2], v150 - v152 + v149[3] > (unint64_t)v18))
            {
              v151 = (unint64_t)&v18[v152 - v150];
            }
            else
            {
              v151 = -1;
            }
            if (v148 - 52 >= v147)
              break;
            ++v148;
          }
          while (v151 == -1);
        }
        bit_vector_set_2851(v240 + 4528, (v151 >> 17));
        if ((v151 >> 17) != (v151 + v146) >> 17)
          bit_vector_set_2851(v240 + 4528, (v151 >> 17) + 1);
        *(_DWORD *)(v142 + 24) = v145;
        if (!v230)
          *(_DWORD *)(v142 + 36) = v43 + v47;
        memcpy((void *)(v142 + 1104), v244, v243);
        result = 0;
        *(_DWORD *)(v142 + 1100) = v243;
        return result;
      }
      goto LABEL_428;
    }
    v32 = (_OWORD *)(v242 + 1084);
    *(_QWORD *)(v242 + 24) = 0;
    *(_QWORD *)(v242 + 32) = 0;
    *(_BYTE *)(v242 + 40) = 0;
    v30 = 0uLL;
LABEL_26:
    *v32 = v30;
    return 1;
  }
  v241 = (char *)(v12 + 1104);
  v35 = v5;
  while (1)
  {
    if (*(_DWORD *)v12)
    {
      v159 = __si_assert_copy_extra_1644(0);
      v157 = v159;
      v160 = "";
      if (v159)
        v160 = v159;
      __message_assert("%s:%u: failed assertion '%s' %s ", "FlatStore.c", 236, "ms->type == kTermInfoTypeId", v160);
      goto LABEL_396;
    }
    v36 = FlatStorePageEntryRead((unsigned __int16 *)v18, v20, (int *)__n, v35, 0);
    v37 = LODWORD(__n[0]);
    v38 = HIDWORD(__n[0]);
    v29 = HIDWORD(__n[0]) + LODWORD(__n[0]);
    if ((HIDWORD(__n[0]) + LODWORD(__n[0])) > 0x1000)
    {
      v13 = v240;
      v162 = isExFat(*(_DWORD *)(v240 + 152));
      v163 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
      v164 = v163;
      v165 = "";
      if (v163)
        v165 = v163;
      v166 = *(_QWORD *)(v240 + 392);
      if (v162)
      {
        si_analytics_log_2064("%s:%u: failure log '%s' %s %ld, ps:%d, pe:%d, pk:%d, po:%llx, ss:%llx se:%llx", "FlatStore.c", 246, "oldEntry.pfxLen + oldEntry.len <= CMPBUFFER_SIZE", v165, v38 + v37, v236, v20, 0, v226, *(_QWORD *)(v240 + 384), v166);
        v167 = v164;
LABEL_406:
        free(v167);
        *(_DWORD *)(v12 + 4) = -1;
        return 1;
      }
      __message_assert("%s:%u: failed assertion '%s' %s %ld, ps:%d, pe:%d, pk:%d, po:%llx, ss:%llx se:%llx", "FlatStore.c", 252, "oldEntry.pfxLen + oldEntry.len <= CMPBUFFER_SIZE", v165, v38 + v37, v236, v20, 0, v226, *(_QWORD *)(v240 + 384), v166);
      v174 = v164;
LABEL_427:
      free(v174);
      v178 = *(_DWORD **)(v13 + 376);
      goto LABEL_416;
    }
    v34 = v36;
    v39 = (const void *)__n[1];
    memcpy((char *)__s1 + HIDWORD(__n[0]), (const void *)__n[1], LODWORD(__n[0]));
    v40 = v29 >= v243 ? v243 : v29;
    v41 = memcmp(__s1, v244, v40);
    v42 = v41 ? v41 : v29 - v243;
    if (v42 >= 1)
      break;
    v12 = v242;
    if (!v42)
    {
      if (!*(_DWORD *)v242)
      {
        *v234 = v249;
        *(_DWORD *)(v242 + 24) = v34;
        if (!v5)
          *(_DWORD *)(v242 + 36) = v243;
        memcpy(&v241[v38], v39, v37);
        result = 0;
        *(_DWORD *)(v242 + 1100) = v243;
        return result;
      }
      v179 = v240;
      v192 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
      v181 = v192;
      v193 = "";
      if (v192)
        v193 = v192;
      __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 393, "ms->type == kTermInfoTypeId", v193);
LABEL_422:
      free(v181);
      if (!__valid_fsp(*(_DWORD **)(v179 + 376)))
        goto LABEL_476;
      goto LABEL_423;
    }
    memcpy(&v241[v38], v39, v37);
    *(_DWORD *)(v242 + 1100) = v29;
    v35 = v34;
    if (v34 >= v20)
      goto LABEL_40;
  }
  v250 = v243;
  v251 = 0;
  if (!v5)
    *(_DWORD *)(v242 + 36) = v243;
  v48 = v240;
  if (*(_DWORD *)v242)
  {
    v189 = __si_assert_copy_extra_1644(0);
    v190 = v189;
    v191 = "";
    if (v189)
      v191 = v189;
    __message_assert("%s:%u: failed assertion '%s' %s ", "FlatStore.c", 272, "ms->type == kTermInfoTypeId", v191);
    goto LABEL_475;
  }
  if (!v35)
  {
    LODWORD(v50) = 0;
    v54 = v243;
    goto LABEL_107;
  }
  v49 = *(_DWORD *)(v242 + 1100);
  if (v49 >= v243)
    v50 = v243;
  else
    v50 = v49;
  if ((_DWORD)v50)
  {
    v51 = 0;
    while (*(unsigned __int8 *)(v242 + 1104 + v51) == v244[v51])
    {
      if (v50 == ++v51)
        goto LABEL_106;
    }
    LODWORD(v50) = v51;
  }
LABEL_106:
  v54 = v243 - v50;
  v251 = v50;
  v250 = v243 - v50;
  if (v243 == (_DWORD)v50)
  {
    v204 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
    v205 = v204;
    v206 = "";
    if (v204)
      v206 = v204;
    __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 281, "newEntry.len", v206);
    goto LABEL_487;
  }
LABEL_107:
  v252 = &v244[v50];
  v253 = *(_OWORD *)(v242 + 8);
  if (v54 >= 0x80)
  {
    if (v54 >= 0x4000)
    {
      if (v54 >= 0x200000)
      {
        if (v54 >> 28)
          v59 = 5;
        else
          v59 = 4;
      }
      else
      {
        v59 = 3;
      }
    }
    else
    {
      v59 = 2;
    }
  }
  else
  {
    v59 = 1;
  }
  if (v50 >= 0x80)
  {
    if (v50 >= 0x4000)
    {
      if (v50 >= 0x200000)
      {
        if (v50 >> 28)
          v63 = 5;
        else
          v63 = 4;
      }
      else
      {
        v63 = 3;
      }
    }
    else
    {
      v63 = 2;
    }
  }
  else
  {
    v63 = 1;
  }
  v64 = v253;
  if (v253 >= 0x80)
  {
    if (v253 >= 0x4000)
    {
      if (v253 >= 0x200000)
      {
        if (v253 >> 28)
          v65 = 5;
        else
          v65 = 4;
      }
      else
      {
        v65 = 3;
      }
    }
    else
    {
      v65 = 2;
    }
  }
  else
  {
    v65 = 1;
  }
  v227 = v59 + v54 + v63 + v65;
  v66 = v227 + v20;
  v67 = v236;
  v231 = v227 + v20;
  if (v227 + (int)v20 <= v236)
    goto LABEL_174;
  if (!v232 || v236 > 0xFFF7)
  {
    if (v236 > 0xFFF7 || !extendBlock(v240, v238, v66))
    {
      *(_QWORD *)(v242 + 24) = 0;
      *(_QWORD *)(v242 + 32) = 0;
      result = 1;
      *(_BYTE *)(v242 + 40) = 0;
      return result;
    }
    v75 = (unint64_t)v238 << 6;
    v76 = storageResolvePtr(v228, v75, 8uLL, 1);
    v77 = storageResolvePtr(v228, v75, 64 << v76[2], 1);
    v67 = (64 << v77[2]) - 8;
    if (v67 <= v20)
    {
      v221 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
      v73 = v221;
      v222 = "";
      if (v221)
        v222 = v221;
      __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 307, "pageEnd<pageSize", v222);
      goto LABEL_471;
    }
    v18 = v77;
    v66 = v227 + v20;
    if ((_DWORD)v20 == *(unsigned __int16 *)v77)
      goto LABEL_174;
    v223 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
    v205 = v223;
    v224 = "";
    if (v223)
      v224 = v223;
    __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 308, "(int)pageEnd==storePageEnd(page)", v224);
    goto LABEL_487;
  }
  v68 = reallocBlock(v240, v238, v66, v232);
  if ((_DWORD)v68)
  {
    *(_QWORD *)(v242 + 28) = v68;
    if (HIDWORD(v68))
      v69 = 0;
    else
      v69 = (unint64_t)v68 << 6;
    v70 = storageResolvePtr(v228, v69, 8uLL, 1);
    v71 = storageResolvePtr(v228, v69, 64 << v70[2], 1);
    if ((_DWORD)v20 != *(unsigned __int16 *)v71)
    {
      v219 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
      v205 = v219;
      v220 = "";
      if (v219)
        v220 = v219;
      __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 301, "(int)pageEnd==storePageEnd(page)", v220);
      goto LABEL_487;
    }
    v18 = v71;
    v67 = (64 << v71[2]) - 8;
    v66 = v227 + v20;
    if (v67 <= v20)
    {
      v72 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
      v73 = v72;
      v74 = "";
      if (v72)
        v74 = v72;
      __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 303, "pageEnd<pageSize", v74);
      goto LABEL_471;
    }
LABEL_174:
    if (v67 <= v20)
    {
      v194 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
      v73 = v194;
      v195 = "";
      if (v194)
        v195 = v194;
      __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 319, "pageEnd < pageSize", v195);
      goto LABEL_471;
    }
    if (v66 > v67)
    {
      v196 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
      v73 = v196;
      v197 = "";
      if (v196)
        v197 = v196;
      __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 320, "pageEnd + newEntrySize <= pageSize", v197);
      goto LABEL_471;
    }
    v78 = *(_DWORD *)(v242 + 8);
    if (!*(_DWORD *)v242)
      *(_DWORD *)(v242 + 8) = v78 + 1;
    *v234 = v253;
    if (v78 == v64)
    {
      v246 = 0u;
      v247 = 0u;
      v79 = (unint64_t)v18;
      FlatStorePageEntryRead((unsigned __int16 *)v18, v20, (int *)&v246, v35, 0);
      LODWORD(v80) = 0;
      if ((_DWORD)v50 == DWORD1(v246))
      {
        v80 = v246 >= v54 ? v54 : v246;
        if ((_DWORD)v80)
        {
          v81 = 0;
          while (*(unsigned __int8 *)(*((_QWORD *)&v246 + 1) + v81) == v244[v50 + v81])
          {
            if (v80 == ++v81)
              goto LABEL_190;
          }
          LODWORD(v80) = v81;
        }
      }
LABEL_190:
      if (v246 <= v80)
      {
        v200 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
        v73 = v200;
        v201 = "";
        if (v200)
          v201 = v200;
        __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 342, "i < entry.len", v201);
        goto LABEL_471;
      }
      if (v80 > v54)
      {
        v202 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
        v73 = v202;
        v203 = "";
        if (v202)
          v203 = v202;
        __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 343, "i<=newEntry.len", v203);
        goto LABEL_471;
      }
      if (!(_DWORD)v80)
      {
        memmove(&v18[v227 + 8 + v35], &v18[v35 + 8], v20 - v35);
        v83 = 0;
        goto LABEL_307;
      }
      if (v246 >= 0x80)
      {
        if (v246 >= 0x4000)
        {
          if (v246 >= 0x200000)
          {
            if (v246 >> 28)
              v82 = 5;
            else
              v82 = 4;
          }
          else
          {
            v82 = 3;
          }
        }
        else
        {
          v82 = 2;
        }
      }
      else
      {
        v82 = 1;
      }
      if (DWORD1(v246) >= 0x80)
      {
        if (DWORD1(v246) >= 0x4000)
        {
          if (DWORD1(v246) >= 0x200000)
          {
            if (DWORD1(v246) >> 28)
              v84 = 5;
            else
              v84 = 4;
          }
          else
          {
            v84 = 3;
          }
        }
        else
        {
          v84 = 2;
        }
      }
      else
      {
        v84 = 1;
      }
      v85 = v247;
      v86 = v247 >> 28;
      if (v247 >= 0x80)
      {
        if (v247 >= 0x4000)
        {
          if (v247 >= 0x200000)
          {
            if (v86)
              v87 = 5;
            else
              v87 = 4;
          }
          else
          {
            v87 = 3;
          }
        }
        else
        {
          v87 = 2;
        }
      }
      else
      {
        v87 = 1;
      }
      v239 = v54;
      v88 = (v246 - v80);
      if ((_DWORD)v246 == (_DWORD)v80)
      {
        v209 = __si_assert_copy_extra_1644(0);
        v190 = v209;
        v210 = "";
        if (v209)
          v210 = v209;
        __message_assert("%s:%u: failed assertion '%s' %s ", "FlatStore.c", 352, "entry.len > 0", v210);
        goto LABEL_475;
      }
      v89 = v82 + v246 + v84 + v87;
      v90 = (const void *)(*((_QWORD *)&v246 + 1) + v80);
      v91 = v80 + DWORD1(v246);
      v229 = v88 >> 28;
      if (v88 >> 28)
        v92 = 5;
      else
        v92 = 4;
      if (v88 >= 0x200000)
        v93 = v92;
      else
        v93 = 3;
      if (v88 >= 0x4000)
        v94 = v93;
      else
        v94 = 2;
      if (v88 >= 0x80)
        v95 = v94;
      else
        v95 = 1;
      v233 = v91 >> 28;
      if (v91 >> 28)
        v96 = 5;
      else
        v96 = 4;
      if (v91 >= 0x200000)
        v97 = v96;
      else
        v97 = 3;
      if (v91 >= 0x4000)
        v98 = v97;
      else
        v98 = 2;
      if (v91 >= 0x80)
        v99 = v98;
      else
        v99 = 1;
      v225 = v247 >> 28;
      if (v86)
        v100 = 5;
      else
        v100 = 4;
      if (v247 < 0x200000)
        v100 = 3;
      if (v247 < 0x4000)
        v100 = 2;
      if (v247 >= 0x80)
        v101 = v100;
      else
        v101 = 1;
      v102 = v18 + 8;
      v103 = v227 + v35;
      v235 = v95 + v88 + v99 + v101;
      v237 = v89;
      memmove(&v18[v235 + 8 + v103], &v18[v89 + 8 + v35], v20 - (v89 + v35));
      v104 = &v18[v103 + 8];
      if (v88 >= 0x80)
      {
        v106 = v90;
        if (v88 >= 0x4000)
        {
          v54 = v239;
          if (v88 >= 0x200000)
          {
            v105 = 4;
            if (v229)
              v105 = 5;
          }
          else
          {
            v105 = 3;
          }
        }
        else
        {
          v105 = 2;
          v54 = v239;
        }
      }
      else
      {
        v105 = 1;
        v106 = v90;
        v54 = v239;
      }
      v107 = &v104[v105];
      if (v91 >= 0x80)
      {
        if (v91 >= 0x4000)
        {
          if (v91 >= 0x200000)
          {
            v108 = 4;
            if (v233)
              v108 = 5;
          }
          else
          {
            v108 = 3;
          }
        }
        else
        {
          v108 = 2;
        }
      }
      else
      {
        v108 = 1;
      }
      memmove(&v107[v108], v106, v88);
      if (v88 > 0x7F)
      {
        if (v88 >> 14)
        {
          if (v88 >> 21)
          {
            if (v229)
            {
              v113 = &v102[v103];
              *v113 = -16;
              *(_DWORD *)(v113 + 1) = v88;
              v109 = v103 + 5;
            }
            else
            {
              v112 = &v102[v103];
              *v112 = BYTE3(v88) | 0xE0;
              v112[1] = BYTE2(v88);
              v112[2] = BYTE1(v88);
              v109 = v103 + 4;
              v112[3] = v88;
            }
          }
          else
          {
            v111 = &v102[v103];
            *v111 = BYTE2(v88) | 0xC0;
            v111[1] = BYTE1(v88);
            v109 = v103 + 3;
            v111[2] = v88;
          }
        }
        else
        {
          v110 = &v102[v103];
          *v110 = BYTE1(v88) | 0x80;
          v109 = v103 + 2;
          v110[1] = v88;
        }
      }
      else
      {
        v109 = v103 + 1;
        *v104 = v88;
      }
      v48 = v240;
      if (v91 > 0x7F)
      {
        if (v91 >> 14)
        {
          if (v91 >> 21)
          {
            if (v233)
            {
              v118 = &v102[v109];
              *v118 = -16;
              *(_DWORD *)(v118 + 1) = v91;
              v114 = v109 + 5;
            }
            else
            {
              v117 = &v102[v109];
              *v117 = HIBYTE(v91) | 0xE0;
              v117[1] = BYTE2(v91);
              v117[2] = BYTE1(v91);
              v114 = v109 + 4;
              v117[3] = v91;
            }
          }
          else
          {
            v116 = &v102[v109];
            *v116 = BYTE2(v91) | 0xC0;
            v116[1] = BYTE1(v91);
            v114 = v109 + 3;
            v116[2] = v91;
          }
        }
        else
        {
          v115 = &v102[v109];
          *v115 = BYTE1(v91) | 0x80;
          v114 = v109 + 2;
          v115[1] = v91;
        }
      }
      else
      {
        v114 = v109 + 1;
        v102[v109] = v91;
      }
      v119 = v114 + v88;
      if (v85 > 0x7F)
      {
        if (v85 >> 14)
        {
          if (v85 >> 21)
          {
            v122 = &v102[v119];
            if (v225)
            {
              *v122 = -16;
              *(_DWORD *)(v122 + 1) = v85;
            }
            else
            {
              *v122 = HIBYTE(v85) | 0xE0;
              v122[1] = BYTE2(v85);
              v122[2] = BYTE1(v85);
              v122[3] = v85;
            }
          }
          else
          {
            v121 = &v102[v119];
            *v121 = BYTE2(v85) | 0xC0;
            v121[1] = BYTE1(v85);
            v121[2] = v85;
          }
        }
        else
        {
          v120 = &v102[v119];
          *v120 = BYTE1(v85) | 0x80;
          v120[1] = v85;
        }
      }
      else
      {
        v102[v119] = v85;
      }
      memset(v245, 0, sizeof(v245));
      FlatStorePageEntryRead((unsigned __int16 *)v18, v231, (int *)v245, v35, v227);
      if ((_DWORD)v88 != LODWORD(v245[0]))
      {
        v211 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
        v73 = v211;
        v212 = "";
        if (v211)
          v212 = v211;
        __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 358, "entry.len==entryCopy.len", v212);
        goto LABEL_471;
      }
      if (v91 == DWORD1(v245[0]))
      {
        v83 = v235 - v237;
        if (v235 <= v237)
        {
          v79 = (unint64_t)v18;
LABEL_307:
          v123 = v54;
          v124 = FlatStorePageEntryWrite(v79, &v250, v35);
          v125 = 64 << *(_BYTE *)(v79 + 2);
          v126 = *(unsigned int *)(v48 + 400);
          if ((int)v126 < 1)
          {
            v130 = -1;
          }
          else
          {
            v127 = 53;
            do
            {
              v128 = *(_QWORD **)(v48 + 8 * v127);
              if (v128
                && (v129 = v128[1], v129 + 1 >= 2)
                && v129 <= v79
                && (v131 = v128[2], v129 - v131 + v128[3] > v79))
              {
                v130 = v79 - v129 + v131;
              }
              else
              {
                v130 = -1;
              }
              if (v127 - 52 >= v126)
                break;
              ++v127;
            }
            while (v130 == -1);
          }
          bit_vector_set_2851(v48 + 4528, (v130 >> 17));
          if ((v130 >> 17) != (v130 + v125) >> 17)
            bit_vector_set_2851(v48 + 4528, (v130 >> 17) + 1);
          *(_WORD *)v79 = v83 + v231;
          if (!(_DWORD)v50 || v123)
          {
            *(_DWORD *)(v242 + 24) = v124;
            memcpy(v241, v244, v243);
            result = 0;
            *(_DWORD *)(v242 + 1100) = v243;
            return result;
          }
          v217 = __si_assert_copy_extra_1644(0);
          v190 = v217;
          v218 = "";
          if (v217)
            v218 = v217;
          __message_assert("%s:%u: failed assertion '%s' %s ", "FlatStore.c", 372, "newEntry.len", v218);
LABEL_475:
          free(v190);
          if (!__valid_fs(-1))
          {
LABEL_476:
            MEMORY[0xC00] = -559038737;
            abort();
          }
LABEL_423:
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        v215 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
        v73 = v215;
        v216 = "";
        if (v215)
          v216 = v215;
        __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 360, "len2 <= len1", v216);
LABEL_471:
        free(v73);
        v178 = *(_DWORD **)(v48 + 376);
LABEL_416:
        if (__valid_fsp(v178))
        {
LABEL_417:
          v161 = 2989;
LABEL_418:
          *(_DWORD *)v161 = -559038737;
          abort();
        }
LABEL_397:
        v161 = 3072;
        goto LABEL_418;
      }
      v213 = __si_assert_copy_extra_1644(*(_DWORD **)(v240 + 376));
      v205 = v213;
      v214 = "";
      if (v213)
        v214 = v213;
      __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 359, "entry.pfxLen==entryCopy.pfxLen", v214);
LABEL_487:
      free(v205);
      if (!__valid_fsp(*(_DWORD **)(v48 + 376)))
        goto LABEL_476;
      goto LABEL_423;
    }
    v198 = __si_assert_copy_extra_1644(0);
    v157 = v198;
    v199 = "";
    if (v198)
      v199 = v198;
    __message_assert("%s:%u: failed assertion '%s' %s ", "FlatStore.c", 326, "termID == getNum(newEntry.termInfo.termInfo.termId.ptr)", v199);
LABEL_396:
    free(v157);
    if (__valid_fs(-1))
      goto LABEL_417;
    goto LABEL_397;
  }
LABEL_392:
  *(_DWORD *)(v242 + 4) = -1;
  return 1;
}

uint64_t FlatStorePageEntryRead(unsigned __int16 *a1, unsigned int a2, int *a3, unsigned int a4, int a5)
{
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  char *v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  const char *v30;
  int v31;
  int v32;
  int v33;
  _BOOL4 v34;
  const char *v35;

  v10 = a5 + a4;
  v11 = a1 + 4;
  v12 = v10 + 1;
  v13 = *((unsigned __int8 *)a1 + v10 + 8);
  if (*((char *)a1 + v10 + 8) < 0)
  {
    if (v13 > 0xBF)
    {
      if (v13 > 0xDF)
      {
        if (v13 > 0xEF)
        {
          v13 = *(_DWORD *)((char *)v11 + v12);
          LODWORD(v12) = v10 + 5;
        }
        else
        {
          v13 = ((v13 & 0xF) << 24) | (*((unsigned __int8 *)v11 + v12) << 16) | (*((unsigned __int8 *)v11 + v10 + 2) << 8) | *((unsigned __int8 *)v11 + v10 + 3);
          LODWORD(v12) = v10 + 4;
        }
      }
      else
      {
        v13 = ((v13 & 0x1F) << 16) | (*((unsigned __int8 *)v11 + v12) << 8) | *((unsigned __int8 *)v11 + v10 + 2);
        LODWORD(v12) = v10 + 3;
      }
    }
    else
    {
      v14 = *((unsigned __int8 *)v11 + v12) | ((v13 & 0x3F) << 8);
      LODWORD(v12) = v10 + 2;
      v13 = v14;
    }
  }
  *a3 = v13;
  if (v13)
    v15 = 1;
  else
    v15 = (_DWORD)v12 == 1;
  if (!v15)
  {
    v28 = __si_assert_copy_extra_1644(0);
    v29 = v28;
    if (v28)
      v30 = v28;
    else
      v30 = "";
    v31 = *a1;
    v32 = (64 << *((_BYTE *)a1 + 2)) - 8;
    v33 = *a3;
    v34 = _checkFlatPage(a1, a4, a5);
    v35 = "false";
    if (v34)
      v35 = "true";
    __message_assert("%s:%u: failed assertion '%s' %s len:%d cursor:%d, pe:%d, ps:%d, valid cursor:%s", "FlatStore.h", 241, "entry->len > 0 || pageCursor == v2_vInt32Size(0)", v30, v33, v12, v31, v32, v35);
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v16 = v12 + 1;
  v17 = *((unsigned __int8 *)v11 + v12);
  if (*((char *)v11 + v12) < 0)
  {
    if (v17 > 0xBF)
    {
      if (v17 > 0xDF)
      {
        if (v17 > 0xEF)
        {
          v17 = *(_DWORD *)((char *)v11 + v16);
          LODWORD(v16) = v12 + 5;
        }
        else
        {
          v17 = ((v17 & 0xF) << 24) | (*((unsigned __int8 *)v11 + v16) << 16) | (*((unsigned __int8 *)v11
                                                                                 + v12
                                                                                 + 2) << 8) | *((unsigned __int8 *)v11
                                                                                              + v12
                                                                                              + 3);
          LODWORD(v16) = v12 + 4;
        }
      }
      else
      {
        v17 = ((v17 & 0x1F) << 16) | (*((unsigned __int8 *)v11 + v16) << 8) | *((unsigned __int8 *)v11
                                                                              + v12
                                                                              + 2);
        LODWORD(v16) = v12 + 3;
      }
    }
    else
    {
      v18 = *((unsigned __int8 *)v11 + v16) | ((v17 & 0x3F) << 8);
      LODWORD(v16) = v12 + 2;
      v17 = v18;
    }
  }
  a3[1] = v17;
  *((_QWORD *)a3 + 1) = (char *)v11 + v16;
  v19 = v13 + v16;
  v20 = v19 + 1;
  v21 = *((unsigned __int8 *)v11 + v19);
  if (*((char *)v11 + v19) < 0)
  {
    if (v21 > 0xBF)
    {
      if (v21 > 0xDF)
      {
        if (v21 > 0xEF)
        {
          v21 = *(_DWORD *)((char *)v11 + v20);
          v20 = v19 + 5;
        }
        else
        {
          v21 = ((v21 & 0xF) << 24) | (*((unsigned __int8 *)v11 + v20) << 16) | (*((unsigned __int8 *)v11 + v19 + 2) << 8) | *((unsigned __int8 *)v11 + v19 + 3);
          v20 = v19 + 4;
        }
      }
      else
      {
        v21 = ((v21 & 0x1F) << 16) | (*((unsigned __int8 *)v11 + v20) << 8) | *((unsigned __int8 *)v11 + v19 + 2);
        v20 = v19 + 3;
      }
    }
    else
    {
      v22 = *((unsigned __int8 *)v11 + v20) | ((v21 & 0x3F) << 8);
      v20 = v19 + 2;
      v21 = v22;
    }
  }
  a3[4] = v21;
  if (v20 > a2)
  {
    if (__valid_fs(-1))
    {
      v24 = __si_assert_copy_extra_1644(0);
      v25 = v24;
      v26 = "";
      if (v24)
        v26 = v24;
      si_analytics_log_2064("%s:%u: failed assertion '%s' %s cursor %d should have been <= end %d. len:%d pe:%d ps:%d", "FlatStore.h", 259, "pageCursor <= pageEnd", v26, v20, a2, *a3, *a1, (64 << *((_BYTE *)a1 + 2)) - 8);
      free(v25);
      v27 = 2816;
    }
    else
    {
      v27 = 3072;
    }
    *(_DWORD *)v27 = -559038737;
    abort();
  }
  return v20;
}

uint64_t FlatStorePageEntryWrite(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  uint64_t result;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;

  v3 = a1 + 8;
  v4 = *a2;
  if (*a2 > 0x7F)
  {
    if (v4 >> 14)
    {
      if (v4 >> 21)
      {
        if (v4 >> 28)
        {
          v9 = v3 + a3;
          *(_BYTE *)v9 = -16;
          *(_DWORD *)(v9 + 1) = v4;
          v5 = a3 + 5;
        }
        else
        {
          v8 = (_BYTE *)(v3 + a3);
          *v8 = HIBYTE(v4) | 0xE0;
          v8[1] = BYTE2(v4);
          v8[2] = BYTE1(v4);
          v5 = a3 + 4;
          v8[3] = v4;
        }
      }
      else
      {
        v7 = (_BYTE *)(v3 + a3);
        *v7 = BYTE2(v4) | 0xC0;
        v7[1] = BYTE1(v4);
        v5 = a3 + 3;
        v7[2] = v4;
      }
    }
    else
    {
      v6 = (_BYTE *)(v3 + a3);
      *v6 = BYTE1(v4) | 0x80;
      v5 = a3 + 2;
      v6[1] = v4;
    }
  }
  else
  {
    v5 = a3 + 1;
    *(_BYTE *)(v3 + a3) = v4;
  }
  v10 = a2[1];
  if (v10 <= 0x7F)
  {
    v11 = v5 + 1;
    *(_BYTE *)(v3 + v5) = v10;
    if (!*a2)
      goto LABEL_26;
LABEL_23:
    v16 = 0;
    do
    {
      *(_BYTE *)(v11 + a1 + 8 + v16) = *(_BYTE *)(*((_QWORD *)a2 + 1) + v16);
      ++v16;
    }
    while (v16 < *a2);
    v11 += v16;
    goto LABEL_26;
  }
  if (v10 >> 14)
  {
    if (v10 >> 21)
    {
      if (v10 >> 28)
      {
        v15 = v3 + v5;
        *(_BYTE *)v15 = -16;
        *(_DWORD *)(v15 + 1) = v10;
        v11 = v5 + 5;
        if (!*a2)
          goto LABEL_26;
        goto LABEL_23;
      }
      v14 = (_BYTE *)(v3 + v5);
      *v14 = HIBYTE(v10) | 0xE0;
      v14[1] = BYTE2(v10);
      v14[2] = BYTE1(v10);
      v11 = v5 + 4;
      v14[3] = v10;
      if (*a2)
        goto LABEL_23;
    }
    else
    {
      v13 = (_BYTE *)(v3 + v5);
      *v13 = BYTE2(v10) | 0xC0;
      v13[1] = BYTE1(v10);
      v11 = v5 + 3;
      v13[2] = v10;
      if (*a2)
        goto LABEL_23;
    }
  }
  else
  {
    v12 = (_BYTE *)(v3 + v5);
    *v12 = BYTE1(v10) | 0x80;
    v11 = v5 + 2;
    v12[1] = v10;
    if (*a2)
      goto LABEL_23;
  }
LABEL_26:
  v17 = a2[4];
  if (v17 > 0x7F)
  {
    if (v17 >> 14)
    {
      if (v17 >> 21)
      {
        v21 = v3 + v11;
        if (v17 >> 28)
        {
          *(_BYTE *)v21 = -16;
          *(_DWORD *)(v21 + 1) = v17;
          return v11 + 5;
        }
        else
        {
          *(_BYTE *)v21 = HIBYTE(v17) | 0xE0;
          *(_BYTE *)(v21 + 1) = BYTE2(v17);
          *(_BYTE *)(v21 + 2) = BYTE1(v17);
          result = v11 + 4;
          *(_BYTE *)(v21 + 3) = v17;
        }
      }
      else
      {
        v20 = (_BYTE *)(v3 + v11);
        *v20 = BYTE2(v17) | 0xC0;
        v20[1] = BYTE1(v17);
        result = v11 + 3;
        v20[2] = v17;
      }
    }
    else
    {
      v19 = (_BYTE *)(v3 + v11);
      *v19 = BYTE1(v17) | 0x80;
      result = v11 + 2;
      v19[1] = v17;
    }
  }
  else
  {
    result = v11 + 1;
    *(_BYTE *)(v3 + v11) = v17;
  }
  return result;
}

void _ContentIndexDocSetRelease(uint64_t a1, uint64_t a2)
{
  ContentIndexDocSetDispose(a2);
}

void SIPreHeatIndex(uint64_t a1, const void *a2)
{
  if (a1)
    _SIPreHeatIndex(a1, a2, 0);
}

int *SIResultQueueDequeue(CFAbsoluteTime *a1, float a2)
{
  uint64_t v4;
  int *v5;
  char *v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
  a1[8] = CFAbsoluteTimeGetCurrent();
  if (*((_BYTE *)a1 + 12))
  {
    v4 = *(_QWORD *)a1;
LABEL_4:
    pthread_mutex_unlock((pthread_mutex_t *)(v4 + 8));
    v5 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_5;
  }
  v4 = *(_QWORD *)a1;
  if (*((_DWORD *)a1 + 21))
    goto LABEL_4;
  v9 = *(_QWORD *)(v4 + 136);
  v10 = *(unsigned int *)(v4 + 124);
  v5 = *(int **)(v9 + 8 * v10);
  if (v5)
  {
    *(_QWORD *)(v9 + 8 * v10) = 0;
    *(_DWORD *)(v4 + 124) = (*(_DWORD *)(v4 + 120) - 1) & (v10 + 1);
    if (si_simplequeue_count_locked(*(_QWORD *)a1) >= *((_DWORD *)a1 + 4))
    {
      v11 = 0;
      v7 = 0;
      v6 = 0;
    }
    else
    {
      v6 = (char *)*((_QWORD *)a1 + 3);
      v7 = (char *)*((_QWORD *)a1 + 4);
      v11 = *((_DWORD *)a1 + 10);
      a1[4] = 0.0;
      a1[5] = 0.0;
      a1[3] = 0.0;
    }
LABEL_18:
    *((_QWORD *)a1 + 9) -= countForBatch(v5);
    goto LABEL_19;
  }
  if (a2 == 0.0)
    goto LABEL_4;
  if (si_simplequeue_count_locked(v4) >= *((_DWORD *)a1 + 4))
  {
    v6 = 0;
    v7 = 0;
    v11 = 0;
  }
  else
  {
    v6 = (char *)*((_QWORD *)a1 + 3);
    v7 = (char *)*((_QWORD *)a1 + 4);
    v11 = *((_DWORD *)a1 + 10);
    a1[4] = 0.0;
    a1[5] = 0.0;
    a1[3] = 0.0;
  }
  v5 = (int *)si_dequeue_wait_locked(*(_QWORD *)a1, a2);
  if (si_simplequeue_count_locked(*(_QWORD *)a1) < *((_DWORD *)a1 + 4) && !v6)
  {
    v6 = (char *)*((_QWORD *)a1 + 3);
    v7 = (char *)*((_QWORD *)a1 + 4);
    v11 = *((_DWORD *)a1 + 10);
    a1[4] = 0.0;
    a1[5] = 0.0;
    a1[3] = 0.0;
  }
  if (v5)
    goto LABEL_18;
LABEL_19:
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
  if (v11)
  {
    v12 = 0;
    v13 = 8 * v11;
    do
    {
      (*(void (**)(_QWORD, _QWORD))&v6[v12])(*(_QWORD *)&v7[v12], 0);
      v12 += 8;
    }
    while (v13 != v12);
  }
LABEL_5:
  free(v7);
  free(v6);
  return v5;
}

uint64_t countForBatch(int *a1)
{
  int v2;
  uint64_t result;
  int ByteVectorCount;

  if (a1 == (int *)-1)
    return 0;
  v2 = *a1;
  result = 1;
  switch(v2)
  {
    case 0:
      result = 80 * *((_QWORD *)a1 + 5);
      break;
    case 1:
    case 7:
    case 9:
      if (*((_QWORD *)a1 + 5))
        ByteVectorCount = _MDPlistBytesGetByteVectorCount();
      else
        ByteVectorCount = 0;
      result = ByteVectorCount + 8 * _MDStoreOIDArrayGetVectorCount();
      break;
    case 2:
    case 3:
    case 11:
      result = _MDPlistBytesGetByteVectorCount();
      break;
    case 4:
    case 5:
    case 6:
    case 8:
      return result;
    case 10:
      result = _MDPlistContainerGetLength();
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t si_simplequeue_count_locked(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(unsigned int *)(a1 + 128);
  v2 = *(_DWORD *)(a1 + 120);
  if ((-v2 & v1) != 0 || (v3 = *(_DWORD *)(a1 + 124), (v3 & ~(v2 - 1)) != 0))
  {
    v7 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, (char)"SISimpleQueue.c");
    free(v7);
    if (__valid_fs(-1))
      v15 = 2989;
    else
      v15 = 3072;
    *(_DWORD *)v15 = -559038737;
    abort();
  }
  if (v3 <= v1)
    v4 = 0;
  else
    v4 = *(_DWORD *)(a1 + 120);
  v5 = v4 - v3 + v1;
  if (!(_DWORD)v5)
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * v1))
      return v2;
    else
      return 0;
  }
  return v5;
}

uint64_t writeDBOToPlistBytes(uint64_t a1, uint64_t a2, _QWORD *a3, char **a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t *a10, int a11, char a12, uint64_t a13, uint64_t a14, const __CFDictionary *a15, int a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  uint64_t v21;
  char **v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t *v25;
  const __CFBitVector *v26;
  uint64_t v27;
  const __CFArray *v28;
  uint64_t v29;
  uint64_t (*v30)(_DWORD *, char **);
  _DWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  char **v39;
  char *v40;
  const __CFArray *v41;
  const __CFArray *v42;
  const __CFArray *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  size_t v54;
  char *v55;
  char **v56;
  uint64_t *v57;
  void **v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  __int128 v64;
  _QWORD *v65;
  CFIndex v66;
  BOOL v67;
  int v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char **v73;
  char *v74;
  const __CFArray *v75;
  char **v76;
  char *v77;
  const __CFArray *v78;
  char **v79;
  uint64_t v80;
  _QWORD *v81;
  const __CFBitVector *v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  _QWORD *matched;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  CFIndex k;
  _QWORD *v101;
  uint64_t v102;
  char **v103;
  _QWORD *v104;
  uint64_t m;
  _QWORD *v106;
  uint64_t i;
  uint64_t v108;
  uint64_t v109;
  CFIndex j;
  _QWORD *v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t (*v117)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, _DWORD *, void *, uint64_t);
  int v118;
  NSObject *v119;
  uint64_t v120;
  int v121;
  NSObject *v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t v126;
  void **v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  const char *v133;
  char *v134;
  const char *v135;
  uint64_t v136;
  char *v137;
  char *v138;
  const char *v139;
  __int128 v140;
  const __CFBitVector *v141;
  size_t *v142;
  _QWORD *v143;
  int v144;
  char **v145;
  char **v146;
  uint64_t v147;
  _QWORD *v148;
  CFIndex *v149;
  _QWORD *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _DWORD *v161;
  uint64_t v162;
  char **v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  CFDictionaryRef v167;
  uint64_t *v168;
  int *v169;
  CFIndex range;
  uint64_t v171;
  _QWORD v172[6];
  _QWORD v173[5];
  int *v174[8];
  _QWORD v175[5];
  CFIndex v176[3];
  _QWORD v177[2];
  int v178;
  char v179;
  CFIndex v180;
  __int128 buf;
  uint64_t (*v182)(uint64_t, const void *);
  void *v183;
  uint64_t v184;
  uint64_t *v185;
  char v186;
  uint64_t v187;
  CFRange v188;

  v152 = a7;
  v153 = a8;
  v159 = a6;
  v163 = a4;
  v171 = a2;
  v150 = a19;
  v167 = a15;
  v147 = a9;
  v151 = a10;
  v187 = *MEMORY[0x1E0C80C00];
  v178 = a11;
  v179 = a12;
  v177[0] = a13;
  v177[1] = a14;
  v158 = a1;
  v169 = *(int **)(a1 + 1184);
  v21 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a5 + 32))(a5);
  if (!v21)
  {
    v131 = __si_assert_copy_extra_268();
    v132 = v131;
    v133 = "";
    if (v131)
      v133 = v131;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 6541, "oid", v133);
LABEL_156:
    free(v132);
    if (__valid_fs(-1))
      v136 = 2989;
    else
      v136 = 3072;
    *(_DWORD *)v136 = -559038737;
    abort();
  }
  v23 = a5[2];
  v24 = &a3[a16];
  ++v24[314];
  v25 = (uint64_t *)v24[443];
  v162 = v21;
  *v25 = v21;
  v24[443] = v25 + 1;
  range = a3[29];
  v156 = v23;
  if ((v23 & 8) != 0)
  {
    v26 = 0;
  }
  else
  {
    v26 = (const __CFBitVector *)a3[31];
    if (v26)
    {
      v188.location = 0;
      v188.length = range;
      CFBitVectorGetCountOfBit((CFBitVectorRef)a3[31], v188, 1u);
    }
  }
  v161 = a5;
  if (!range)
  {
    v29 = 0;
LABEL_16:
    v33 = 0;
    goto LABEL_17;
  }
  v27 = a3[29];
  if (*(_BYTE *)a3)
  {
    if (v27)
    {
      v22 = (char **)(a3 + 13);
      if (!a3[13])
      {
        v28 = (const __CFArray *)a3[16];
        if (v28)
        {
          *(_QWORD *)&buf = 0;
          SIFlattenArrayToCStringVector(v28, v22, (size_t *)&buf, v176);
        }
      }
    }
    v29 = a3[13];
  }
  else
  {
    v22 = (char **)(a3 + 12);
    v29 = a3[12];
    if (v27 && !v29)
    {
      v42 = (const __CFArray *)a3[15];
      if (v42)
      {
        SIFlattenArrayToCStringVector(v42, v22, a3 + 30, a3 + 29);
        v29 = a3[12];
        if (!v29)
        {
LABEL_31:
          v44 = __si_assert_copy_extra_268();
          __message_assert_272((uint64_t)v44, v45, v46, v47, v48, v49, v50, v51, (char)"SISearchCtx.h");
          free(v44);
          if (__valid_fs(-1))
LABEL_32:
            v52 = 2989;
          else
            v52 = 3072;
          *(_DWORD *)v52 = -559038737;
          abort();
        }
      }
      else
      {
        v29 = 0;
      }
    }
  }
  if (!v169)
    goto LABEL_16;
  v30 = *(uint64_t (**)(_DWORD *, char **))(*(_QWORD *)a5 + 16);
  v31 = a5;
  v32 = v29;
  v33 = (uint64_t *)v30(v31, v22);
  v29 = v32;
LABEL_17:
  v168 = v33;
  v157 = v29;
  v149 = a3 + 29;
  v34 = a3[29];
  v166 = a3;
  v35 = v156;
  if (v34)
  {
    v36 = a3 + 28;
    if (!a3[28])
    {
      if (*(_BYTE *)a3)
      {
        v37 = a3;
        v40 = (char *)a3[13];
        v39 = (char **)(a3 + 13);
        v38 = v40;
        if (!v40)
        {
          v41 = (const __CFArray *)v37[16];
          if (v41)
          {
            *(_QWORD *)&buf = 0;
            SIFlattenArrayToCStringVector(v41, v39, (size_t *)&buf, v176);
            v38 = *v39;
          }
          else
          {
            v38 = 0;
          }
          v37 = v166;
        }
        goto LABEL_36;
      }
      v38 = (char *)a3[12];
      v37 = a3;
      if (!v38)
      {
        v43 = (const __CFArray *)a3[15];
        if (v43)
        {
          SIFlattenArrayToCStringVector(v43, (char **)a3 + 12, a3 + 30, v149);
          v38 = (char *)a3[12];
          if (!v38)
            goto LABEL_31;
        }
        else
        {
          v38 = 0;
        }
      }
LABEL_36:
      PartialQueryResults::setupFixedFunctionVector((uint64_t)v37, (uint64_t)v38, v36);
      a3 = v37;
    }
  }
  v154 = a17;
  v53 = a3[28];
  MEMORY[0x1E0C80A78](v33);
  v55 = (char *)&v140 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v55, v54);
  v56 = v163;
  v57 = v168;
  v155 = v55;
  v160 = v53;
  if (!v168)
    goto LABEL_52;
  if (*v149)
  {
    v58 = (void **)(a3 + 18);
    if (a3[18])
    {
      v59 = 18;
      if ((v35 & 8) == 0)
        v59 = 20;
      v60 = (char *)a3[v59];
    }
    else
    {
      v125 = (uint64_t)a3;
      v126 = PartialQueryResults::attributeIdVector(a3, v169);
      PartialQueryResults::setupFieldIdVector(v125, v126, (size_t *)(v125 + 152), v58, 0);
      v127 = (void **)(v125 + 160);
      PartialQueryResults::setupFieldIdVector(v125, v126, (size_t *)(v125 + 168), (void **)(v125 + 160), 1);
      v128 = *(_QWORD *)(v125 + 232);
      v129 = 144;
      if ((v35 & 8) == 0)
        v129 = 160;
      v60 = *(char **)(v125 + v129);
      if (!v128)
      {
        v56 = v163;
        a3 = v166;
        v57 = v168;
        goto LABEL_44;
      }
      v57 = v168;
      if (*v58)
      {
        v56 = v163;
        a3 = v166;
        goto LABEL_44;
      }
      a3 = v166;
      v130 = PartialQueryResults::attributeIdVector(v166, v169);
      PartialQueryResults::setupFieldIdVector((uint64_t)a3, v130, a3 + 19, v58, 0);
      PartialQueryResults::setupFieldIdVector((uint64_t)a3, v130, a3 + 21, v127, 1);
      v57 = v168;
    }
    v56 = v163;
LABEL_44:
    v53 = v160;
    goto LABEL_48;
  }
  v61 = 18;
  if ((v35 & 8) == 0)
    v61 = 20;
  v60 = (char *)a3[v61];
LABEL_48:
  v62 = 19;
  if ((v35 & 8) == 0)
    v62 = 21;
  v63 = v60;
  v55 = v155;
  db_get_offsets_for_fields((char *)v169, (uint64_t)v57, v63, a3[v62], (uint64_t)v155);
  v57 = v168;
  if (*v168 && *v168 != v162)
  {
    v134 = __si_assert_copy_extra_268();
    v132 = v134;
    v135 = "";
    if (v134)
      v135 = v134;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 6572, "!dbo || !dbo->oid || dbo->oid == oid", v135);
    goto LABEL_156;
  }
LABEL_52:
  v176[1] = 0;
  v176[2] = 0;
  v176[0] = (CFIndex)v57;
  if (a18)
    ++*(_QWORD *)(a18 + 520);
  if (range)
  {
    _MDPlistBytesBeginArray();
    v65 = a3;
    v66 = 0;
    if (v154)
      v67 = v150 == 0;
    else
      v67 = 1;
    v68 = v67;
    v144 = v68;
    v165 = v65 + 25;
    v69 = v65 + 24;
    v145 = (char **)(v65 + 12);
    v146 = (char **)(v65 + 13);
    v142 = v65 + 30;
    v143 = v65 + 1;
    *(_QWORD *)&v64 = 134217984;
    v140 = v64;
    v148 = v65 + 24;
    while (1)
    {
      if (v26 && !CFBitVectorGetBitAtIndex(v26, v66))
        goto LABEL_132;
      v70 = *(_QWORD *)&v55[8 * v66];
      if (!v70)
        break;
      MDPlistBytesAddSDBFieldLocalized(v171, v169, (unsigned int *)v70, (const char *)(v70 + 13), v56, v167, (v35 >> 1) & 1);
LABEL_133:
      if (++v66 == range)
        return _MDPlistBytesEndArray();
    }
    if (v168)
    {
      switch(*(_DWORD *)(v53 + 4 * v66))
      {
        case 0:
          goto LABEL_68;
        case 1:
          dateScaled(v168, v169, (uint64_t)v166);
          goto LABEL_110;
        case 2:
          if (dword_1EF19FC90 >= 5)
          {
            v118 = *__error();
            v119 = _SILogForLogForCategory(1);
            if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
            {
              v120 = *v151;
              LODWORD(buf) = v140;
              *(_QWORD *)((char *)&buf + 4) = v120;
              _os_log_impl(&dword_1B8270000, v119, OS_LOG_TYPE_DEFAULT, "Pack match bits %llx", (uint8_t *)&buf, 0xCu);
            }
            *__error() = v118;
            v56 = v163;
            v53 = v160;
            v35 = v156;
            v69 = v148;
          }
          goto LABEL_121;
        case 3:
          if ((_DWORD)v147)
            goto LABEL_121;
          if (v153 >= 1)
          {
            v80 = 0;
            do
              ++v80;
            while (!grouping_db_eval_obj_with_options((uint64_t)v169) && v153 != v80);
          }
          _MDPlistBytesAddInteger();
          v53 = v160;
          v35 = v156;
          goto LABEL_133;
        case 4:
          v81 = v166;
          v82 = v26;
          v83 = v168;
          PartialQueryResults::messageAttrIds((uint64_t)v174, (uint64_t)v166, v169);
          si_fancyMailRelevance((uint64_t)v83, v174);
          v84 = v83;
          v26 = v82;
          v56 = v163;
          v55 = v155;
          v85 = (uint64_t)v81;
          v69 = v148;
          dateScaled(v84, v169, v85);
          goto LABEL_110;
        case 5:
          if (dword_1EF19FC90 >= 5)
          {
            v121 = *__error();
            v122 = _SILogForLogForCategory(1);
            if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
            {
              v123 = *v151;
              LODWORD(buf) = v140;
              *(_QWORD *)((char *)&buf + 4) = v123;
              _os_log_impl(&dword_1B8270000, v122, OS_LOG_TYPE_DEFAULT, "Pack match bits %llx", (uint8_t *)&buf, 0xCu);
            }
            *__error() = v121;
            v56 = v163;
            v53 = v160;
            v35 = v156;
            v69 = v148;
          }
          __MDPlistBytesAddUInt64Array();
          goto LABEL_133;
        case 6:
          v106 = v69;
          _MDPlistBytesBeginArray();
          for (i = 0; i != 5; ++i)
            _MDPlistBytesAddInteger();
          _MDPlistBytesEndArray();
          v69 = v106;
          v56 = v163;
          goto LABEL_133;
        case 7:
          goto LABEL_121;
        case 8:
LABEL_110:
          _MDPlistBytesAddReal();
          goto LABEL_133;
        case 9:
          if (v144)
            goto LABEL_132;
          matched = TokenMatchNew((const __CFAllocator *)kCIQueryZoneAllocator);
          v175[0] = MEMORY[0x1E0C809B0];
          v175[1] = 0x40000000;
          v175[2] = __writeDBOToPlistBytes_block_invoke;
          v175[3] = &__block_descriptor_tmp_51_4191;
          v175[4] = matched;
          v87 = (uint64_t)v56;
          v88 = MEMORY[0x1E0C809B0];
          v89 = v154;
          v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v154 + 56))(v154);
          *(_QWORD *)&buf = v88;
          *((_QWORD *)&buf + 1) = 0x40000000;
          v182 = ___ZL31enumerate_matching_query_piecesP11SISearchCtxP14datastore_infoP6db_objPPKcbP10query_nodeU13block_pointerFvP11query_piecePK15db_obj_eval_ctxE_block_invoke;
          v183 = &__block_descriptor_tmp_160;
          v184 = v89;
          v91 = matched;
          v185 = v168;
          v186 = 0;
          db_query_enumerate_matched_qps_for_dbo((uint64_t)v169, v150, (uint64_t)v168, v87, v90, (uint64_t)&buf, (uint64_t)v175);
          TokenMatchConvertToSnippetHints((uint64_t)matched);
          _MDPlistBytesBeginArray();
          v92 = matched[2];
          v93 = matched[3];
          while (v92 != v93)
          {
            _MDPlistBytesBeginArray();
            _MDPlistBytesAddInternedCString();
            v95 = *(_QWORD *)(v92 + 24);
            v94 = *(_QWORD *)(v92 + 32);
            while (v95 != v94)
            {
              _MDPlistBytesAddInternedCString();
              v95 += 24;
            }
            _MDPlistBytesEndArray();
            v92 += 56;
          }
          _MDPlistBytesEndArray();
          TokenMatchFree(v91);
          v56 = v163;
          v53 = v160;
          v55 = v155;
          v69 = v148;
          goto LABEL_133;
        case 0xA:
          v108 = v154;
          if (!v154)
            goto LABEL_122;
          v141 = v26;
          v97 = (uint64_t)v56;
          v180 = 0;
          v164 = (*(uint64_t (**)(uint64_t, CFIndex *))(*(_QWORD *)v154 + 72))(v154, &v180);
          _MDPlistBytesBeginArray();
          v109 = MEMORY[0x1E0C809B0];
          if (v180 >= 1)
          {
            for (j = 0; j < v180; ++j)
            {
              v111 = *(_QWORD **)(v164 + 8 * j);
              v173[0] = v109;
              v173[1] = 0x40000000;
              v173[2] = __writeDBOToPlistBytes_block_invoke_52;
              v173[3] = &__block_descriptor_tmp_53_4194;
              v173[4] = v171;
              v112 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v108 + 56))(v108);
              *(_QWORD *)&buf = v109;
              *((_QWORD *)&buf + 1) = 0x40000000;
              v182 = ___ZL31enumerate_matching_query_piecesP11SISearchCtxP14datastore_infoP6db_objPPKcbP10query_nodeU13block_pointerFvP11query_piecePK15db_obj_eval_ctxE_block_invoke;
              v183 = &__block_descriptor_tmp_160;
              v184 = v108;
              v185 = v168;
              v186 = 0;
              db_query_enumerate_matched_qps_for_dbo((uint64_t)v169, v111, (uint64_t)v168, v97, v112, (uint64_t)&buf, (uint64_t)v173);
            }
          }
          goto LABEL_115;
        case 0xB:
          v96 = v154;
          if (v154)
          {
            v141 = v26;
            v97 = (uint64_t)v56;
            v180 = 0;
            v164 = (*(uint64_t (**)(uint64_t, CFIndex *))(*(_QWORD *)v154 + 80))(v154, &v180);
            _MDPlistBytesBeginArray();
            v98 = v168;
            v99 = MEMORY[0x1E0C809B0];
            if (v180 >= 1)
            {
              for (k = 0; k < v180; ++k)
              {
                v101 = *(_QWORD **)(v164 + 8 * k);
                v172[0] = v99;
                v172[1] = 0x40000000;
                v172[2] = __writeDBOToPlistBytes_block_invoke_2;
                v172[3] = &__block_descriptor_tmp_55_4195;
                v172[4] = v66;
                v172[5] = v171;
                v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 56))(v96);
                *(_QWORD *)&buf = v99;
                *((_QWORD *)&buf + 1) = 0x40000000;
                v182 = ___ZL31enumerate_matching_query_piecesP11SISearchCtxP14datastore_infoP6db_objPPKcbP10query_nodeU13block_pointerFvP11query_piecePK15db_obj_eval_ctxE_block_invoke;
                v183 = &__block_descriptor_tmp_160;
                v184 = v96;
                v185 = v98;
                v186 = 1;
                db_query_enumerate_matched_qps_for_dbo((uint64_t)v169, v101, (uint64_t)v98, v97, v102, (uint64_t)&buf, (uint64_t)v172);
              }
            }
LABEL_115:
            _MDPlistBytesEndArray();
            v56 = (char **)v97;
            v35 = v156;
            v26 = v141;
            v53 = v160;
            v55 = v155;
          }
          else
          {
LABEL_122:
            _MDPlistBytesBeginArray();
            _MDPlistBytesEndArray();
          }
          v69 = v148;
          break;
        case 0xC:
          v103 = v56;
          v104 = v69;
          _MDPlistBytesBeginArray();
          for (m = 0; m != 3; ++m)
            _MDPlistBytesAddReal();
          _MDPlistBytesEndArray();
          v69 = v104;
          v56 = v103;
          v53 = v160;
          goto LABEL_133;
        case 0xD:
          v113 = 0;
          v114 = 0;
          do
          {
            if (*((_BYTE *)v177 + v113))
              v114 |= 2u;
            if (v113 > 1)
              break;
            ++v113;
          }
          while ((v114 & 2) == 0);
LABEL_121:
          _MDPlistBytesAddInteger();
          goto LABEL_133;
        default:
          v137 = __si_assert_copy_extra_268();
          v138 = v137;
          if (v137)
            v139 = v137;
          else
            v139 = "";
          __message_assert("%s:%u: Unexpected code path %s ", "SISearchCtx_METADATA.cpp", 6608, v139);
          free(v138);
          goto LABEL_32;
      }
      goto LABEL_133;
    }
LABEL_68:
    v71 = v166[29];
    if (*(_BYTE *)v166)
    {
      v72 = v165;
      if (v71)
      {
        v72 = v165;
        if (!*v165)
        {
          v73 = v56;
          v74 = *v146;
          if (!*v146)
          {
            v75 = (const __CFArray *)v166[16];
            if (v75)
            {
              *(_QWORD *)&buf = 0;
              v76 = v146;
              SIFlattenArrayToCStringVector(v75, v146, (size_t *)&buf, &v180);
              v74 = *v76;
              v69 = v148;
            }
            else
            {
              v74 = 0;
            }
          }
          v115 = v69;
          v116 = v165;
          PartialQueryResults::setupCannedAttributeVector((uint64_t)v166, (uint64_t)v74, v165, &buf);
          v72 = v116;
          v69 = v115;
          v56 = v73;
          v53 = v160;
        }
      }
    }
    else
    {
      v72 = v69;
      if (v71)
      {
        v72 = v69;
        if (!*v69)
        {
          v77 = *v145;
          if (!*v145)
          {
            v78 = (const __CFArray *)v166[15];
            if (v78)
            {
              v79 = v145;
              SIFlattenArrayToCStringVector(v78, v145, v142, v149);
              v77 = *v79;
              if (!*v79)
                goto LABEL_31;
            }
            else
            {
              v77 = 0;
            }
          }
          PartialQueryResults::setupCannedAttributeVector((uint64_t)v166, (uint64_t)v77, v69, v143);
          v72 = v69;
        }
      }
    }
    v117 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, _DWORD *, void *, uint64_t))(*v72 + 8 * v66);
    if (v117
      && (v117(v158, *(_QWORD *)(v157 + 8 * v66), v159, v162, v168, 0, 0, v161, &__block_literal_global_58, v171) & 1) != 0)
    {
      goto LABEL_133;
    }
LABEL_132:
    _MDPlistBytesAddNull();
    goto LABEL_133;
  }
  return _MDPlistBytesAddNull();
}

void MDPlistBytesAddSDBFieldLocalized(uint64_t a1, int *a2, unsigned int *key, const char *a4, char **a5, CFDictionaryRef theDict, int a7)
{
  uint64_t v8;
  unint64_t v11;
  int v12;
  __int16 v13;
  unint64_t *v14;
  __int16 v15;
  char *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  const char *v22;
  unsigned int v26;
  void **v27;
  void **v28;
  char *v29;
  unint64_t v30;
  char *v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t vector_for_id_locked;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int16 v51;
  char *v52;
  unsigned int v53;
  void *value[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint8_t buf[8];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int16 *)key;
  if ((v8 - 1) > 0xF)
  {
    _MDPlistBytesAddNull();
    return;
  }
  v11 = key[2];
  v12 = *((unsigned __int16 *)key + 1);
  if ((_DWORD)v8 == 14)
  {
    if ((~v12 & 0x5020) != 0 || !_os_feature_enabled_impl())
    {
      _MDPlistBytesAddData();
      return;
    }
    v13 = *((_WORD *)key + 1);
    if ((v13 & 8) == 0)
    {
      v14 = (unint64_t *)((char *)key + 13);
      if ((v13 & 0x10) == 0)
      {
        if (v11 >= 3)
        {
          v17 = *((char *)key + 15);
          v16 = (char *)key + 15;
          v15 = v17;
          v18 = *(v16 - 2);
          if (v18 <= 2)
          {
            v19 = *(v16 - 1);
            if (v19 <= 2)
            {
              v20 = (vector_dimension_vec_sizes_10743[v19] * vector_size_elem_sizes_10742[v18]);
              if (&v16[v20] <= (char *)v14 + v11)
              {
                v21 = v15 + (v16[1] << 8);
                if ((v13 & 0x20) != 0)
                {
                  _MDPlistBytesBeginArray();
                  while (1)
                    recodeVector(a1, v18, v19, v21, 0, (uint64_t)v16, v20);
                }
                recodeVector(a1, *(v16 - 2), *(v16 - 1), (unsigned __int16)(v15 + (v16[1] << 8)), 0, (uint64_t)v16, (vector_dimension_vec_sizes_10743[v19] * vector_size_elem_sizes_10742[v18]));
              }
            }
          }
        }
        return;
      }
      _MDPlistBytesBeginArray();
      if (v11 >= 8)
      {
        v37 = v11 >> 3;
        while (1)
        {
          v39 = *v14++;
          v38 = v39;
          LODWORD(value[0]) = 0;
          *(_DWORD *)buf = 0;
          vector_for_id_locked = db_get_vector_for_id_locked((uint64_t)a2, v39, value, buf);
          if (vector_for_id_locked)
            break;
          if (v38)
          {
            v46 = a1;
            v42 = 3;
            v43 = 3;
            v44 = 0;
            v47 = v38;
            v41 = 0;
            v45 = 0;
            goto LABEL_48;
          }
LABEL_49:
          if (!--v37)
            goto LABEL_53;
        }
        v41 = vector_for_id_locked;
        v42 = buf[0];
        v43 = buf[1];
        v44 = *(unsigned __int16 *)&buf[2];
        v45 = LODWORD(value[0]);
        v46 = a1;
        v47 = v38;
LABEL_48:
        recodeVector(v46, v42, v43, v44, v47, v41, v45);
        goto LABEL_49;
      }
LABEL_53:
      _MDPlistBytesEndArray();
      return;
    }
    LODWORD(value[0]) = 0;
    *(_DWORD *)buf = 0;
    if ((v13 & 0x10) == 0)
    {
      v30 = 0;
      v31 = (char *)key + 13;
      *(_WORD *)buf = *(_WORD *)((char *)key + 13);
      v32 = key[2] - 2;
      goto LABEL_65;
    }
    if ((_DWORD)v11 == 4)
    {
      v30 = *(unsigned int *)((char *)key + 13);
    }
    else
    {
      if ((_DWORD)v11 != 8)
        return;
      v30 = *(_QWORD *)((char *)key + 13);
    }
    if (v30)
    {
      v31 = (char *)db_get_vector_for_id_locked((uint64_t)a2, v30, value, buf);
      v32 = value[0];
LABEL_65:
      if (!v31)
        return;
      if (!v32)
        return;
      v48 = buf[0];
      if (buf[0] > 2uLL)
        return;
      v49 = buf[1];
      if (buf[1] > 2u)
        return;
      v50 = (vector_dimension_vec_sizes_10743[buf[1]] * vector_size_elem_sizes_10742[buf[0]]);
      if (v50 > v32)
        return;
      v51 = *(_WORD *)&buf[2];
      if ((*((_WORD *)key + 1) & 0x20) == 0)
      {
        recodeVector(a1, buf[0], buf[1], *(unsigned __int16 *)&buf[2], v30, (uint64_t)v31, (vector_dimension_vec_sizes_10743[buf[1]] * vector_size_elem_sizes_10742[buf[0]]));
        return;
      }
      v52 = &v31[v32];
      _MDPlistBytesBeginArray();
      do
      {
        recodeVector(a1, v48, v49, v51, v30, (uint64_t)v31, v50);
        v31 += v50;
      }
      while (&v31[v50] <= v52);
      goto LABEL_61;
    }
  }
  else
  {
    v22 = a4;
    if ((v12 & 0x80) == 0)
    {
      if ((v12 & 0x20) == 0)
      {
        addValue(a1, a2, *(unsigned __int16 *)key, v12, a4);
        return;
      }
      if ((_DWORD)v8 != 11)
      {
        v33 = kSDBTypeSizes[v8];
        v34 = v11 / v33;
        _MDPlistBytesBeginArray();
        if ((v11 / v33))
        {
          do
          {
            addValue(a1, 0, v8, v12, v22);
            v22 += v33;
            LODWORD(v34) = v34 - 1;
          }
          while ((_DWORD)v34);
        }
        goto LABEL_53;
      }
      if ((v12 & 0x8000) == 0 || (v12 & 0x10) == 0)
      {
        _MDPlistBytesBeginArray();
        value[0] = (void *)v22;
        if ((_DWORD)v11)
        {
          do
            addString(a1, a2, v12, (const char **)value);
          while (value[0] < &v22[v11]);
        }
        goto LABEL_53;
      }
      v26 = *(_DWORD *)a4;
      _MDPlistBytesBeginArray();
      v56 = 0u;
      v57 = 0u;
      *(_OWORD *)value = 0u;
      v55 = 0u;
      v53 = 64;
      v27 = (void **)copyDataForUniquedValue((uint64_t)a2, v26, value, &v53);
      v28 = v27;
      if (v27)
      {
        *(_QWORD *)buf = v27;
        if (v53)
        {
          v29 = (char *)v27 + v53;
          do
            addString(a1, a2, v12, (const char **)buf);
          while (*(_QWORD *)buf < (unint64_t)v29);
        }
      }
      else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v26;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "No data for uniqued array %u", buf, 8u);
      }
      if (v28 != value)
        free(v28);
LABEL_61:
      _MDPlistBytesEndArray();
      return;
    }
    value[0] = (void *)a4;
    *(_QWORD *)buf = 0;
    if (theDict && (v12 & 0x10) != 0 && CFDictionaryGetValue(theDict, key)
      || db_get_localized_string(a2, (uint64_t)key, a5, (uint64_t)value, (uint64_t)buf, a7))
    {
      _MDPlistBytesAddInternedCString();
    }
    else if ((*((_WORD *)key + 1) & 0x10) != 0)
    {
      v35 = _MDPlistBytesAddInternedCString();
      if (theDict && v35)
      {
        v36 = malloc_type_malloc(key[2] + 13, 0xF818BE54uLL);
        memcpy(v36, key, key[2] + 13);
        CFDictionarySetValue(theDict, v36, value[0]);
      }
    }
    else
    {
      _MDPlistBytesAddCString();
    }
  }
}

uint64_t addValue(uint64_t a1, int *a2, int a3, __int16 a4, const char *a5)
{
  uint64_t result;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;

  v15 = a5;
  switch(a3)
  {
    case 1:
      if ((a4 & 0x400) != 0)
        goto LABEL_5;
      goto LABEL_7;
    case 2:
      if ((a4 & 0x400) == 0)
        goto LABEL_7;
      goto LABEL_5;
    case 3:
    case 4:
      if ((a4 & 0x400) == 0)
        goto LABEL_7;
      goto LABEL_5;
    case 5:
    case 6:
      if ((a4 & 0x400) != 0)
        goto LABEL_5;
      goto LABEL_7;
    case 7:
    case 8:
      if ((a4 & 0x400) != 0)
        goto LABEL_5;
LABEL_7:
      result = _MDPlistBytesAddInteger();
      break;
    case 9:
      if ((a4 & 0x400) != 0)
        goto LABEL_5;
      goto LABEL_15;
    case 10:
      if ((a4 & 0x400) != 0)
LABEL_5:
        result = _MDPlistBytesAddBoolean();
      else
LABEL_15:
        result = _MDPlistBytesAddReal();
      break;
    case 11:
      result = addString(a1, a2, a4, &v15);
      break;
    case 12:
      result = _MDPlistBytesAddDate();
      break;
    default:
      v6 = __si_assert_copy_extra_268();
      __message_assert_272((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13, (char)"MDPlistBytesAdditions.c");
      free(v6);
      if (__valid_fs(-1))
        v14 = 2989;
      else
        v14 = 3072;
      *(_DWORD *)v14 = -559038737;
      abort();
  }
  return result;
}

uint64_t addString(uint64_t a1, int *a2, char a3, const char **a4)
{
  const char *v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  int v10;

  v5 = *a4;
  if ((a3 & 0x10) != 0)
  {
    v10 = *(_DWORD *)v5;
    result = _MDPlistBytesAddRawInternedCStringKey();
    if (!(_DWORD)result)
    {
      db_get_string_for_id_locked(a2, v10);
      result = _MDPlistBytesAddRawInternedCStringKeyWithString();
    }
    v8 = 4;
  }
  else
  {
    v6 = strlen(*a4);
    result = _MDPlistBytesAddCString();
    v8 = v6 + 1;
  }
  *a4 = &v5[v8];
  return result;
}

uint64_t CatInfoGotten_SDB::oid(CatInfoGotten_SDB *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 5);
  if (v1)
    return *(_QWORD *)v1;
  else
    return 0;
}

char *db_get_offsets_for_fields(char *result, uint64_t a2, char *__base, size_t __nel, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  size_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  char *i;
  unsigned int v19;
  char *v20;
  int v21;
  NSObject *v22;
  int v23;
  char *v24;
  char *v25;
  const char *v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)result != 1685287992)
  {
    v20 = result;
    v21 = *__error();
    v22 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = *(_DWORD *)v20;
      *(_DWORD *)buf = 136315650;
      v28 = "db_get_offsets_for_fields";
      v29 = 1024;
      v30 = 382;
      v31 = 1024;
      v32 = v23;
      _os_log_error_impl(&dword_1B8270000, v22, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v21;
    v24 = __si_assert_copy_extra_268();
    v25 = v24;
    if (v24)
      v26 = v24;
    else
      v26 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 382, v26);
    free(v25);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  v9 = *(unsigned int *)(a2 + 12);
  if ((*(_BYTE *)(a2 + 41) & 1) != 0)
  {
    if (v9 >= 0x31)
    {
      v14 = 0;
      v15 = a2 + v9;
      v16 = a2 + 48;
      do
      {
        if (v14 < __nel)
        {
          v17 = *(_DWORD *)(v16 + 4);
          for (i = &__base[8 * v14 + 4]; ; i += 8)
          {
            v19 = *((_DWORD *)i - 1);
            if (v19 > v17)
              break;
            if (v19 == v17)
              *(_QWORD *)(a5 + 8 * *(unsigned int *)i) = v16;
            if (__nel == ++v14)
              return result;
          }
        }
        if (v14 == __nel)
          break;
        v16 += *(unsigned int *)(v16 + 8) + 13;
      }
      while (v16 < v15);
    }
  }
  else if (v9 >= 0x31)
  {
    v10 = a2 + 48;
    v11 = &__base[8 * __nel];
    do
    {
      result = (char *)bsearch_b((const void *)*(unsigned int *)(v10 + 4), __base, __nel, 8uLL, &__block_literal_global_85);
      if (result)
      {
        do
        {
          v12 = result;
          result -= 8;
        }
        while (result > __base && *((_DWORD *)v12 - 2) == *(_DWORD *)v12);
        if (v12 < v11)
        {
          v13 = *(_DWORD *)(v10 + 4);
          do
          {
            if (*(_DWORD *)v12 != v13)
              break;
            *(_QWORD *)(a5 + 8 * *((unsigned int *)v12 + 1)) = v10;
            v12 += 8;
          }
          while (v12 < v11);
        }
      }
      v10 += *(unsigned int *)(v10 + 8) + 13;
    }
    while (v10 < a2 + (unint64_t)*(unsigned int *)(a2 + 12));
  }
  return result;
}

void CatInfoGotten_SDB::~CatInfoGotten_SDB(CatInfoGotten_SDB *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E6E2A0F8;
  if (*((_BYTE *)this + 90))
  {
    v2 = (void *)*((_QWORD *)this + 5);
    if (v2)
      free(v2);
  }
  CatInfoGotten::~CatInfoGotten(this);
}

{
  CatInfoGotten_SDB::~CatInfoGotten_SDB(this);
  JUMPOUT(0x1BCCB06A4);
}

uint64_t CatInfoGotten_SDB::dbo(CatInfoGotten_SDB *this)
{
  return *((_QWORD *)this + 5);
}

void CatInfoGotten::~CatInfoGotten(CatInfoGotten *this)
{
  const void *v2;
  void *v3;
  const void *v4;

  *(_QWORD *)this = off_1E6E2A058;
  v2 = (const void *)*((_QWORD *)this + 8);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 8) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 10);
  if (v3)
  {
    free(v3);
    *((_QWORD *)this + 10) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 9);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 9) = 0;
  }
  if (*((_BYTE *)this + 89))
  {
    free(*((void **)this + 6));
    *((_QWORD *)this + 6) = 0;
  }
}

uint64_t db_get_string_for_id_locked(int *a1, int a2)
{
  int v4;
  NSObject *v5;
  int v6;
  char *v7;
  char *v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v4 = *__error();
    v5 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *a1;
      *(_DWORD *)buf = 136315650;
      v11 = "db_get_string_for_id_locked";
      v12 = 1024;
      v13 = 387;
      v14 = 1024;
      v15 = v6;
      _os_log_error_impl(&dword_1B8270000, v5, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v4;
    v7 = __si_assert_copy_extra_268();
    v8 = v7;
    if (v7)
      v9 = v7;
    else
      v9 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 387, v9);
    free(v8);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return get_string_and_length_for_id_10395((uint64_t)a1, 1u, a2, 0, 1);
}

BOOL ci_donebits_check(os_unfair_lock_s *a1, unint64_t a2, unint64_t a3, uint32_t a4, unint64_t *a5)
{
  uint64_t **v10;
  float v11;
  float v12;
  int v13;
  uint64_t **v14;
  _BOOL8 v15;
  uint64_t **v16;
  float v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t **v22;
  unint64_t v23;
  uint64_t v24;
  __int128 *v25;
  unsigned int v26;
  float v27;
  float v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int v31;
  float v32;
  unint64_t v33;
  unint64_t v34;
  __int128 *v35;
  BOOL v36;
  int v38;
  os_unfair_lock_s *v39;
  _DWORD *v40;
  os_unfair_lock_s *v41;
  _DWORD *v42;
  unint64_t v43;
  unsigned int v44;
  _OWORD *v45;
  float v46;
  BOOL v47;
  float v48;
  os_unfair_lock_s *v49;
  _DWORD *v50;
  os_unfair_lock_s *v51;
  _DWORD *v52;
  unint64_t v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  _DWORD *v57;
  float *v58;
  unint64_t v59;
  unint64_t v60;
  _DWORD *v61;
  BOOL v62;
  float v63;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  os_unfair_lock_lock(a1);
  if (a1[1]._os_unfair_lock_opaque > a4)
  {
    if (a3 && a3 < a2)
    {
      v10 = *(uint64_t ***)&a1[8 * a4 + 12]._os_unfair_lock_opaque;
      v11 = *((float *)a5 + 15);
      v12 = *((float *)a5 + 16);
      v13 = *((unsigned __int8 *)a5 + 69);
      if (*((_BYTE *)a5 + 69))
      {
        v14 = v10 + 1;
        if (v11 != v12)
          v10 += 2;
        if (v12 == 0.0)
          v10 = v14;
      }
      else
      {
        v19 = v10 + 1;
        if (v11 != v12)
          v10 += 2;
        if (*(_OWORD *)a5 == 0)
          v10 = v19;
      }
      v20 = *v10;
      if (v20)
        v21 = v20[2] - 1;
      else
        v21 = 0;
      if (v21 < a3)
        goto LABEL_96;
    }
    else
    {
      if (!a2)
        goto LABEL_96;
      v16 = *(uint64_t ***)&a1[8 * a4 + 10]._os_unfair_lock_opaque;
      v11 = *((float *)a5 + 15);
      v17 = *((float *)a5 + 16);
      v13 = *((unsigned __int8 *)a5 + 69);
      if (*((_BYTE *)a5 + 69))
      {
        v18 = v16 + 1;
        if (v11 != v17)
          v16 += 2;
        if (v17 == 0.0)
          v16 = v18;
      }
      else
      {
        v22 = v16 + 1;
        if (v11 != v17)
          v16 += 2;
        if (*(_OWORD *)a5 == 0)
          v16 = v22;
      }
      v20 = *v16;
      v23 = v20 ? v20[2] - 1 : 0;
      if (v23 < a2)
        goto LABEL_96;
    }
    v24 = *v20;
    if (v24)
      v25 = (__int128 *)(v24 + 80);
    else
      v25 = &ZERO_RANKING_WRAPPED_BITS;
    v26 = *((_DWORD *)v25 + 12);
    v27 = *((float *)v25 + 13);
    v28 = *((float *)v25 + 15);
    v30 = *a5;
    v29 = a5[1];
    v31 = *((_DWORD *)a5 + 12);
    v32 = *((float *)a5 + 13);
    if (v13 || *((_BYTE *)v25 + 69))
    {
      v36 = v28 == v11;
      if (v28 > v11)
        goto LABEL_52;
    }
    else
    {
      v35 = v25;
      v33 = *(_QWORD *)v25;
      v34 = *((_QWORD *)v35 + 1);
      if (__PAIR128__(v29, v30) < __PAIR128__(v34, v33))
        goto LABEL_52;
      v36 = v34 == v29 && v33 == v30;
    }
    if (!v36)
      goto LABEL_96;
    if (v27 <= v32 && (v27 != v32 || v26 >= v31))
      goto LABEL_96;
LABEL_52:
    v38 = *((_DWORD *)a5 + 14);
    if (!v38)
    {
LABEL_95:
      v15 = 0;
      goto LABEL_97;
    }
    v39 = &a1[8 * a4];
    v42 = *(_DWORD **)&v39[14]._os_unfair_lock_opaque;
    v41 = v39 + 14;
    v40 = v42;
    if (!v42)
    {
      if (a3)
        v43 = a3;
      else
        v43 = a2;
      if (v43 >= 0x19)
        v44 = 25;
      else
        v44 = v43;
      v40 = container_table_create(v44);
      *(_QWORD *)&v41->_os_unfair_lock_opaque = v40;
      v30 = *a5;
      v29 = a5[1];
      v31 = *((_DWORD *)a5 + 12);
      v32 = *((float *)a5 + 13);
      v38 = *((_DWORD *)a5 + 14);
      v11 = *((float *)a5 + 15);
      v13 = *((unsigned __int8 *)a5 + 69);
    }
    if (!*v40)
      goto LABEL_75;
    v45 = &v40[20 * ((v38 - 1) % *v40) + 4];
    if (v13)
    {
      v46 = *(float *)&v40[20 * ((v38 - 1) % *v40) + 19];
      v47 = v11 == v46;
      if (v11 < v46)
      {
LABEL_74:
        if (!v40[20 * ((v38 - 1) % *v40) + 18])
          goto LABEL_98;
LABEL_75:
        if (!v38)
          goto LABEL_95;
        v49 = &a1[8 * a4];
        v52 = *(_DWORD **)&v49[16]._os_unfair_lock_opaque;
        v51 = v49 + 16;
        v50 = v52;
        if (!v52)
        {
          if (a3)
            v53 = a3;
          else
            v53 = a2;
          if (v53 >= 0x19)
            v54 = 25;
          else
            v54 = v53;
          v50 = container_table_create(v54);
          *(_QWORD *)&v51->_os_unfair_lock_opaque = v50;
          v31 = *((_DWORD *)a5 + 12);
          v32 = *((float *)a5 + 13);
          v38 = *((_DWORD *)a5 + 14);
        }
        if (!*v50)
          goto LABEL_95;
        v56 = a5[2];
        v55 = a5[3];
        v57 = &v50[20 * ((v38 - 1) % *v50)];
        v58 = (float *)(v57 + 4);
        v61 = v57 + 8;
        v60 = *((_QWORD *)v57 + 4);
        v59 = *((_QWORD *)v61 + 1);
        if (__PAIR128__(v55, v56) < __PAIR128__(v59, v60)
          || (v55 == v59 ? (v62 = v56 == v60) : (v62 = 0),
              v62 && ((v63 = v58[13], v32 < v63) || v32 == v63 && v31 > *((_DWORD *)v58 + 12))))
        {
          if (*((_DWORD *)v58 + 14))
            goto LABEL_95;
LABEL_98:
          v65 = __si_assert_copy_extra_268();
          __message_assert_272((uint64_t)v65, v66, v67, v68, v69, v70, v71, v72, (char)"HashPriorityTable.h");
          free(v65);
          if (__valid_fs(-1))
            v73 = 2989;
          else
            v73 = 3072;
          *(_DWORD *)v73 = -559038737;
          abort();
        }
LABEL_96:
        v15 = 1;
        goto LABEL_97;
      }
    }
    else
    {
      if (__PAIR128__(v29, v30) < *v45)
        goto LABEL_74;
      v47 = v29 == *(_QWORD *)&v40[20 * ((v38 - 1) % *v40) + 6] && v30 == *(_QWORD *)v45;
    }
    if (!v47)
      goto LABEL_96;
    v48 = *(float *)&v40[20 * ((v38 - 1) % *v40) + 17];
    if (v32 >= v48 && (v32 != v48 || v31 <= v40[20 * ((v38 - 1) % *v40) + 16]))
      goto LABEL_96;
    goto LABEL_74;
  }
  v15 = (a3 | a2) == 0;
LABEL_97:
  os_unfair_lock_unlock(a1);
  return v15;
}

void db_obj_iter_return_page(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  size_t *v5;
  _QWORD *v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  OSQueueHead *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  const char *v18;

  if (*(_DWORD *)a1 != 3506)
  {
    v16 = __si_assert_copy_extra_268();
    v17 = v16;
    if (v16)
      v18 = v16;
    else
      v18 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 705, v18);
    free(v17);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if (a2)
  {
    v4 = *(_QWORD **)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = a2 + 24;
    if (v4)
    {
      v5 = (size_t *)MEMORY[0x1E0C85AD8];
      do
      {
        while (1)
        {
          v6 = v4;
          v4 = (_QWORD *)*v4;
          v7 = v6[2] - (_QWORD)v6;
          if (v7 == 0x100000)
            break;
          if (*v5 == v7)
          {
            v13 = node_alloc();
            v13[1] = v6;
            madvise(v6, *v5, 5);
            do
              v14 = __ldxr(qword_1EDBBE0C0);
            while (__stxr(v14 - v7, qword_1EDBBE0C0));
            v11 = &stru_1EDBBE030;
            v10 = v13;
            goto LABEL_17;
          }
          do
LABEL_19:
            v15 = __ldxr(qword_1EDBBE0C0);
          while (__stxr(v15 - v7, qword_1EDBBE0C0));
          munmap(v6, v7);
          if (!v4)
            goto LABEL_21;
        }
        madvise(v6, 0x100000uLL, 5);
        do
          v8 = __ldxr(qword_1EDBBE0C0);
        while (__stxr(v8 - 0x100000, qword_1EDBBE0C0));
        do
          v9 = __ldaxr(qword_1EDBBE050);
        while (__stlxr(v9 + 1, qword_1EDBBE050));
        if (v9 >= 5)
        {
          do
            v12 = __ldaxr(qword_1EDBBE050);
          while (__stlxr(v12 - 1, qword_1EDBBE050));
          goto LABEL_19;
        }
        v10 = node_alloc();
        v10[1] = v6;
        v11 = &stru_1EDBBE040;
LABEL_17:
        OSAtomicEnqueue(v11, v10, 0);
      }
      while (v4);
    }
  }
LABEL_21:
  os_unfair_lock_lock((os_unfair_lock_t)&slabQueueLock);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = a2;
  os_unfair_lock_unlock((os_unfair_lock_t)&slabQueueLock);
}

uint64_t ContentIndexDocSetUnionLazy(uint64_t a1, uint64_t *a2, float a3)
{
  char HasWeights;
  int v7;
  int v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  _BOOL8 v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  char v27;
  int v28;
  size_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  __int16 v43[8];
  uint8_t buf[16];

  if (a1 >= 1)
  {
    HasWeights = ContentIndexDocSetHasWeights(*a2);
    v8 = *(_DWORD *)(*a2 + 48);
    v7 = *(_DWORD *)(*a2 + 52);
    v9 = v8 == 2;
    if (v8 == 1)
      v10 = *(unsigned int *)(*a2 + 48);
    else
      v10 = 0;
    if (v8 == 1)
      v9 = 0;
    v11 = v8 == 0;
    if (v8)
      v12 = v10;
    else
      v12 = 0;
    if (v8)
      v13 = v9;
    else
      v13 = 0;
    if (v7 == 3)
      v14 = 3;
    else
      v14 = v7 == 1;
    v15 = a1 - 1;
    if (a1 == 1)
    {
      LODWORD(v16) = v14;
      goto LABEL_19;
    }
    v20 = a2 + 1;
    while (1)
    {
      if ((HasWeights & 1) != 0)
      {
        HasWeights = 1;
        v21 = *v20;
        if (!*v20)
          goto LABEL_44;
      }
      else
      {
        if (!*v20)
        {
          HasWeights = 0;
          v21 = *v20;
          goto LABEL_44;
        }
        HasWeights = ContentIndexDocSetHasWeights(*v20);
        v21 = *v20;
        if (!*v20)
          goto LABEL_44;
      }
      v22 = *(_DWORD *)(v21 + 48);
      if (v22)
      {
        if (v22 == 2)
          v23 = v13 + 1;
        else
          v23 = v13;
        if (v22 == 1)
          ++v12;
        else
          v13 = v23;
        goto LABEL_45;
      }
LABEL_44:
      ++v11;
LABEL_45:
      v24 = *(_DWORD *)(v21 + 52);
      if (v24 == (_DWORD)v14)
      {
        v16 = v14;
      }
      else
      {
        v16 = 1;
        if ((_DWORD)v14 != 1 && (v24 & 0xFFFFFFFD) != 1)
        {
          v16 = v14;
          if ((_DWORD)v14 == 3)
          {
            if (v24)
              v16 = 3;
            else
              v16 = 1;
          }
        }
      }
      ++v20;
      v14 = v16;
      if (!--v15)
        goto LABEL_19;
    }
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  LODWORD(v16) = 0;
  HasWeights = 0;
LABEL_19:
  if (v11 == a1)
  {
    v17 = *a2;
    if (*a2)
    {
      do
        v18 = __ldaxr((unsigned int *)v17);
      while (__stlxr(v18 + 1, (unsigned int *)v17));
    }
  }
  else
  {
    v17 = *a2;
    if (v12 == a1)
    {
      *(_DWORD *)(v17 + 52) = v16;
      do
        v19 = __ldaxr((unsigned int *)v17);
      while (__stlxr(v19 + 1, (unsigned int *)v17));
    }
    else
    {
      if (*MEMORY[0x1E0C85AD8] <= 0x97uLL)
        ++sTotal_4476;
      v25 = *(_QWORD *)(v17 + 56);
      v26 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
      if (!v26 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        v43[0] = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)v43, 2u);
      }
      atomic_store(1u, v26);
      v26[1] = -1073627135;
      *((_QWORD *)v26 + 7) = v25;
      v26[12] = 4;
      if (v12)
        v27 = HasWeights;
      else
        v27 = 1;
      *((_QWORD *)v26 + 5) = -1;
      if (v13 + v11 == a1 || (v27 & 1) == 0)
      {
        if (v13 + v11 == a1)
          v28 = 2;
        else
          v28 = 1;
        v26[12] = v28;
      }
      v29 = 8 * a1;
      if (!((unint64_t)a1 >> 14) && *MEMORY[0x1E0C85AD8] < v29)
        ++sTotal_4476;
      v30 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v29, 0x31F9A007uLL);
      if (!v30 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      *((_QWORD *)v26 + 9) = v30;
      if (a1 >= 1)
      {
        v31 = 0;
        if ((HasWeights & 1) != 0)
        {
          do
          {
            v34 = (unsigned int *)a2[v31];
            if (v34)
            {
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 + 1, v34));
            }
            v32 = *((_QWORD *)v26 + 9);
            v33 = v26[24];
            v26[24] = v33 + 1;
            *(_QWORD *)(v32 + 8 * v33) = v34;
            ++v31;
          }
          while (v31 != a1);
        }
        else
        {
          do
          {
            v36 = (unsigned int *)a2[v31];
            if (v36 && v36[12])
            {
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 + 1, v36));
              v38 = *((_QWORD *)v26 + 9);
              v39 = v26[24];
              v26[24] = v39 + 1;
              *(_QWORD *)(v38 + 8 * v39) = v36;
            }
            ++v31;
          }
          while (v31 != a1);
        }
      }
      if (v26[24] == 1)
        v40 = HasWeights;
      else
        v40 = 1;
      if ((v40 & 1) != 0)
      {
        v17 = (uint64_t)v26;
      }
      else
      {
        v17 = **((_QWORD **)v26 + 9);
        if (v17)
        {
          do
            v41 = __ldaxr((unsigned int *)v17);
          while (__stlxr(v41 + 1, (unsigned int *)v17));
        }
        ContentIndexDocSetDispose((uint64_t)v26);
      }
      *(float *)(v17 + 20) = a3;
    }
  }
  return v17;
}

uint64_t ContentIndexDocSetResolveOIDsAndGroups_Step(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unsigned int a7, uint64_t a8, unint64_t a9, unint64_t *a10, _BYTE *a11, _QWORD *a12, int a13, int64_t a14, unint64_t a15, unint64_t a16, unsigned __int8 a17)
{
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  _DWORD *v40;
  char *v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  pthread_mutex_t *v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  void (*v59)(_QWORD);
  int v60;
  _DWORD *v61;
  int v62;
  NSObject *v63;
  _BOOL4 v64;
  unsigned int v65;
  void *v66;
  void *v67;
  uint64_t v68;
  _DWORD *v69;
  unsigned int *v70;
  unsigned int v71;
  _DWORD **v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _DWORD *v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  NSObject *v91;
  os_log_type_t v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  unint64_t v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(_QWORD);
  _DWORD *v103;
  int v104;
  NSObject *v105;
  unsigned int v106;
  void *v107;
  void *v108;
  uint64_t v109;
  _DWORD *v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int64x2_t *v121;
  int64x2_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  uint64_t v127;
  char *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int64x2_t *v135;
  int64x2_t *v136;
  int64x2_t v137;
  unint64_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int64x2_t v145;
  unint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int HasWeights;
  __int128 v156;
  _BOOL4 v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  char *v161;
  int v162;
  BOOL v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  int v172;
  uint64_t v173;
  unsigned int v174;
  unsigned int v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  int v179;
  _DWORD *v180;
  uint64_t v181;
  int v182;
  int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  int v188;
  uint64_t v189;
  float v190;
  uint64_t v191;
  unsigned int v192;
  int v193;
  int v194;
  BOOL v195;
  unsigned __int8 v196;
  float v197;
  char v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  __int128 *v205;
  __int128 *v206;
  char v207;
  uint64_t v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  float v214;
  uint64_t **v215;
  uint64_t **v216;
  uint64_t *v217;
  unsigned __int8 v218;
  BOOL v219;
  unint64_t v220;
  float v221;
  int v222;
  uint64_t *v223;
  uint64_t v224;
  __int128 *v225;
  __int128 *v226;
  unint64_t v227;
  uint64_t v228;
  __int128 *v229;
  float v230;
  float v231;
  uint64_t v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  float v238;
  uint64_t **v239;
  uint64_t **v240;
  uint64_t *v241;
  char *v242;
  char *v243;
  float v244;
  uint64_t v245;
  __int128 *v246;
  uint64_t v247;
  uint64_t v248;
  float v249;
  float v250;
  int v251;
  __int128 *v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  uint64_t v257;
  int v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  float v262;
  char v263;
  uint64_t v264;
  char v265;
  uint64_t v266;
  _BOOL4 v267;
  int v268;
  uint64_t v269;
  char v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  char *v295;
  char *v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char v304;
  int v305;
  unint64_t v306;
  uint64_t v307;
  int v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  BOOL v321;
  unint64_t v322;
  unint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  unint64_t v328;
  _BOOL4 v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  __int128 v333;
  __int128 *v334;
  __int128 v335;
  char v336;
  uint64_t v337;
  uint64_t v338;
  float v339;
  uint64_t v340;
  uint8_t v341;
  uint64_t v342;
  char v343;
  uint64_t v344;
  uint64_t v345;
  char v346;
  uint64_t v347;
  char v348;
  uint64_t v349;
  uint64_t v350;
  char v351;
  uint64_t v352;
  char v353;
  uint64_t v354;
  uint64_t v355;
  float v356;
  char v357;
  uint64_t v358;
  uint64_t v359;
  float v360;
  char v361;
  uint64_t v362;
  uint64_t v363;
  float v364;
  char v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  int v369;
  int v370;
  NSObject *v371;
  const char *v372;
  uint64_t *v373;
  uint64_t v374;
  unsigned int v375;
  unsigned int v376;
  uint64_t v377;
  unint64_t v378;
  _BOOL4 v380;
  unsigned int v381;
  unsigned int v382;
  unsigned int v383;
  unint64_t v384;
  unsigned int v385;
  int v386;
  BOOL v387;
  unsigned int v388;
  uint64_t v389;
  int v390;
  _BOOL4 HasIndexWithHint;
  _BOOL4 v392;
  int v393;
  uint64_t v394;
  _DWORD *v395;
  uint64_t v396;
  int v397;
  int v398;
  char *v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  int v404;
  int *v405;
  int v406;
  int v407;
  float v408;
  unint64_t v409;
  uint64_t *v410;
  uint64_t v411;
  __int128 *v412;
  __int128 *v413;
  uint64_t v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  int v420;
  int v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  int v445;
  char v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  BOOL v450;
  uint64_t v451;
  uint64_t v452;
  unint64_t v453;
  char v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  char *v467;
  char *v468;
  uint64_t v469;
  char *v470;
  char *v471;
  unint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  unsigned int v477;
  unint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  int v482;
  char v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  float MinDistance;
  char v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  float v496;
  char v497;
  uint64_t v498;
  unsigned int v499;
  uint64_t v500;
  float v501;
  char v502;
  uint64_t v503;
  unint64_t v504;
  int v505;
  int HasIndex;
  unsigned int v507;
  int v508;
  unsigned int v509;
  uint64_t v510;
  unsigned int v511;
  uint64_t v512;
  void (*v513)(_QWORD);
  uint64_t v514;
  unsigned int v515;
  uint64_t v516;
  void (*v517)(_QWORD);
  int v518;
  char *v519;
  char *v520;
  const char *v521;
  char *v522;
  const char *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  __int128 v545;
  int v546;
  int v547;
  unsigned int v548;
  unsigned int v549;
  int v550;
  unsigned int v551;
  unint64_t v552;
  unsigned int v553;
  unsigned int v554;
  unsigned int v555;
  unint64_t v556;
  uint64_t v557;
  uint64_t v558;
  _BOOL4 v559;
  int v560;
  int v561;
  unsigned int v562;
  int v563;
  int v564;
  uint64_t v565;
  _DWORD *v566;
  int v567;
  unsigned int v568;
  uint64_t v569;
  uint64_t v570;
  unsigned int v571;
  _DWORD *v572;
  unsigned int v573;
  __int128 v574;
  uint64_t v575;
  uint64_t v576;
  int v577;
  __int128 *v578;
  int v579;
  int v580;
  int v581;
  int v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  _BOOL4 v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  unint64_t v592;
  int v593;
  int64_t v594;
  unint64_t v595;
  unint64_t v596;
  uint64_t v597;
  int v598;
  char *v599;
  char *v600;
  char *v601;
  int v602;
  int v603;
  char *v604;
  int v605;
  char *v606;
  char *v607;
  _BOOL4 v608;
  uint64_t v609;
  _BYTE *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t *v615;
  unsigned int v616;
  uint64_t v617;
  pthread_mutex_t *v618;
  uint64_t v619;
  uint64_t *v620;
  _QWORD *v621;
  unint64_t *v622;
  uint64_t v623;
  __int128 v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  int v628;
  uint8_t v629;
  float v630;
  unsigned int v631[7];
  int v632;
  int v633;
  unsigned int v634;
  unint64_t v635;
  unsigned int v636;
  unsigned int v637;
  unint64_t v638;
  unsigned int v639;
  unsigned int v640;
  unint64_t v641;
  unsigned int v642;
  unsigned int v643;
  unint64_t v644;
  unsigned int v645;
  char v646;
  _OWORD v647[3];
  __int128 v648;
  __int128 v649;
  __int128 v650;
  __int128 v651;
  __int128 v652;
  __int128 v653;
  __int128 v654;
  __int128 v655;
  uint64_t v656;

  v656 = *MEMORY[0x1E0C80C00];
  if (!result)
  {
    *a10 = 0;
    return result;
  }
  v611 = a2;
  v612 = a3;
  v613 = a4;
  v614 = a5;
  v615 = a6;
  v616 = a7;
  v617 = a8;
  v17 = *(_QWORD *)(result + 80);
  v572 = (_DWORD *)v17;
  v18 = *(_QWORD *)(v17 + 56);
  v609 = *(_QWORD *)(v18 + 72);
  v646 = 0;
  v560 = *(_DWORD *)(v17 + 52);
  v19 = v560 == 3;
  if (a11)
    *a11 = v19;
  v608 = v19;
  v610 = a11;
  v620 = &v525;
  v622 = a10;
  v556 = *a10;
  v621 = a12;
  v20 = *a12;
  MEMORY[0x1E0C80A78](result);
  v22 = (char *)&v525 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v623 = v23;
  bzero(v22, v21);
  v24 = *(_QWORD *)(v623 + 72);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v525 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v27, v26);
  MEMORY[0x1E0C80A78](v28);
  v29 = (4 * v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  v607 = (char *)&v525 - v29;
  bzero((char *)&v525 - v29, 4 * v24);
  MEMORY[0x1E0C80A78](v30);
  v606 = (char *)&v525 - v29;
  bzero((char *)&v525 - v29, 4 * v24);
  v31 = *((unsigned int *)v615 + 41);
  MEMORY[0x1E0C80A78](v32);
  v34 = (char *)&v525 - ((v33 + 15) & 0xFFFFFFFF0);
  bzero(v34, v33);
  MEMORY[0x1E0C80A78](v35);
  v604 = (char *)&v525 - ((v36 + 15) & 0x7FFFFFFF0);
  bzero(v604, v36);
  v37 = v623;
  v38 = *(unsigned __int8 *)(v623 + 56);
  v39 = v572[12];
  if (*(_BYTE *)(v623 + 56))
  {
    v34 = 0;
    v27 = 0;
    v22 = 0;
    v40 = 0;
    goto LABEL_6;
  }
  v40 = 0;
  switch(v39)
  {
    case 0u:
    case 1u:
    case 2u:
      goto LABEL_33;
    case 3u:
    case 8u:
      v115 = *((_QWORD *)v572 + 8);
      if (v115)
      {
        v72 = (_DWORD **)(v115 + 88);
LABEL_32:
        v40 = *v72;
LABEL_33:
        if (v24 >= 2)
          goto LABEL_34;
      }
      else
      {
        v40 = 0;
        if (v24 >= 2)
        {
LABEL_34:
          v73 = v607;
          v74 = v606;
          v75 = v623 + 88;
          v76 = 1;
          v77 = 0;
          while (1)
          {
            v78 = *(_QWORD *)(v75 + 8 * v77);
            v79 = (_DWORD *)v78;
            v80 = *(_DWORD *)(v78 + 48);
            v81 = 0;
            switch(v80)
            {
              case 0u:
              case 1u:
              case 2u:
                goto LABEL_40;
              case 3u:
              case 8u:
                v83 = *(_QWORD *)(v78 + 64);
                if (v83)
                {
                  v82 = (uint64_t *)(v83 + 88);
LABEL_39:
                  v81 = *v82;
LABEL_40:
                  *(_QWORD *)&v22[8 * v77] = v81;
                  if (v80 > 9)
LABEL_504:
                    assert_invalid_doc_type(v79);
                  v84 = 1 << v80;
                  if ((v84 & 0x307) != 0)
                  {
                    v85 = 0;
                  }
                  else
                  {
                    if ((v84 & 0xF0) != 0)
                    {
                      v86 = (uint64_t *)(v78 + 88);
                    }
                    else
                    {
                      v89 = *(_QWORD *)(v78 + 64);
                      if (!v89)
                      {
                        v85 = 0;
                        goto LABEL_46;
                      }
                      v86 = (uint64_t *)(v89 + 96);
                    }
                    v85 = *v86;
                  }
LABEL_46:
                  v87 = v77;
                  goto LABEL_47;
                }
                v87 = v76 - 1;
                *(_QWORD *)&v22[8 * v77] = 0;
                v85 = 0;
LABEL_47:
                *(_QWORD *)&v27[8 * v87] = v85;
                v88 = 4 * v87;
                *(_DWORD *)&v73[v88] = -1;
                *(_DWORD *)&v74[v88] = -1;
                ++v76;
                if (v24 - 1 == ++v77)
                  goto LABEL_79;
                break;
              case 4u:
              case 5u:
              case 6u:
              case 7u:
              case 9u:
                v82 = (uint64_t *)(v78 + 80);
                goto LABEL_39;
              default:
                goto LABEL_504;
            }
          }
        }
      }
LABEL_79:
      if ((_DWORD)v31)
      {
        v126 = *((_DWORD *)v615 + 40);
        v127 = 0;
        v37 = v623;
        v128 = v604;
        while (2)
        {
          v131 = *(_QWORD *)(v37 + 8 * (v126 + v127) + 80);
          v79 = (_DWORD *)v131;
          v130 = 0;
          switch(*(_DWORD *)(v131 + 48))
          {
            case 0:
            case 1:
            case 2:
              goto LABEL_83;
            case 3:
            case 8:
              v132 = *(_QWORD *)(v131 + 64);
              if (v132)
              {
                v129 = (uint64_t *)(v132 + 88);
LABEL_82:
                v130 = *v129;
              }
              else
              {
                v130 = 0;
              }
LABEL_83:
              *(_QWORD *)&v34[8 * v127] = v130;
              *(_DWORD *)&v128[4 * v127++] = -1;
              if (v31 != v127)
                continue;
              goto LABEL_6;
            case 4:
            case 5:
            case 6:
            case 7:
            case 9:
              v129 = (uint64_t *)(v131 + 80);
              goto LABEL_82;
            default:
              goto LABEL_504;
          }
        }
      }
      v37 = v623;
LABEL_6:
      if (v39 > 9)
LABEL_505:
        assert_invalid_doc_type(v572);
      v41 = v27;
      v42 = 1 << v39;
      if ((v42 & 0x307) != 0)
      {
        v43 = 0;
      }
      else
      {
        if ((v42 & 0xF0) != 0)
        {
          v44 = (uint64_t *)(v17 + 88);
        }
        else
        {
          v43 = *((_QWORD *)v572 + 8);
          if (!v43)
            goto LABEL_13;
          v44 = (uint64_t *)(v43 + 96);
        }
        v43 = *v44;
      }
LABEL_13:
      v45 = v556;
      v46 = v20;
      if (!v38 && !v40)
      {
        result = 0;
        v47 = v20;
        v48 = v556;
        goto LABEL_487;
      }
      v566 = v40;
      v597 = v43;
      v599 = v34;
      v49 = v18;
      v50 = (pthread_mutex_t *)(v18 + 14464);
      db_read_lock(v18 + 14464);
      if (!*(_BYTE *)(v18 + 8))
      {
        v90 = *__error();
        v91 = _SILogForLogForCategory(0);
        v92 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v91, v92))
        {
          LOWORD(v647[0]) = 0;
          _os_log_impl(&dword_1B8270000, v91, v92, "Skipping because index is shut down", (uint8_t *)v647, 2u);
        }
        *__error() = v90;
        v47 = v46;
        goto LABEL_56;
      }
      v600 = v41;
      v601 = v22;
      v618 = (pthread_mutex_t *)(v18 + 14464);
      v596 = a16;
      v595 = a15;
      v594 = a14;
      v581 = a13;
      v593 = a13;
      v592 = a9;
      v591 = *(unsigned __int8 *)(v18 + 37);
      do
      {
        v51 = __ldxr(exceptionSequenceNum);
        v52 = v51 + 1;
      }
      while (__stxr(v51 + 1, exceptionSequenceNum));
      v570 = v20;
      v645 = 0;
      v644 = 0;
      v643 = 0;
      v53 = setThreadIdAndInfo(-1, (__int128 *)sIndexExceptionCallbacks, v18, 0, v52);
      v645 = v53;
      v644 = __PAIR64__(HIDWORD(v53), v54);
      v643 = v55;
      v56 = *(_QWORD *)&threadData[18 * v53 + 2];
      v57 = v56 + 320 * HIDWORD(v53);
      *(_BYTE *)(v57 + 216) = 0;
      v58 = *(_DWORD *)(v57 + 312);
      v59 = *(void (**)(_QWORD))(v57 + 224);
      if (v59)
        v59(*(_QWORD *)(v56 + 320 * HIDWORD(v53) + 288));
      v60 = v52;
      v642 = v645;
      v641 = v644;
      v640 = v643;
      if (_setjmp((int *)v57))
      {
        v61 = (_DWORD *)(v57 + 312);
        v62 = *__error();
        v63 = _SILogForLogForCategory(0);
        v64 = os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
        v50 = v618;
        if (v64)
        {
          LODWORD(v647[0]) = 136315394;
          *(_QWORD *)((char *)v647 + 4) = "ContentIndexDocSetResolveOIDsAndGroups_Step";
          WORD6(v647[0]) = 1024;
          *(_DWORD *)((char *)v647 + 14) = 4912;
          _os_log_error_impl(&dword_1B8270000, v63, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", (uint8_t *)v647, 0x12u);
        }
        *__error() = v62;
        *v61 = v58;
        v65 = v640;
        if (__THREAD_SLOT_KEY)
        {
          v66 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v66)
            goto LABEL_491;
        }
        else
        {
          makeThreadId();
          v66 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v66)
            goto LABEL_491;
        }
        v67 = v66;
        if ((unint64_t)v66 < 0x801)
        {
LABEL_27:
          v68 = (uint64_t)v67 - 1;
          v69 = &threadData[18 * ((uint64_t)v67 - 1)];
          v71 = v69[14];
          v70 = v69 + 14;
          if (v71 > v65)
          {
            do
              CIOnThreadCleanUpPop(v68);
            while (*v70 > v65);
          }
          dropThreadId(v642, 1, v52);
          CICleanUpReset(v642, v641);
          v47 = v570;
LABEL_56:
          v93 = v45;
          v94 = 0;
          goto LABEL_484;
        }
LABEL_491:
        makeThreadId();
        v67 = pthread_getspecific(__THREAD_SLOT_KEY);
        goto LABEL_27;
      }
      v603 = v58;
      v50 = v618;
      do
      {
        v95 = __ldxr(exceptionSequenceNum);
        v96 = v95 + 1;
      }
      while (__stxr(v95 + 1, exceptionSequenceNum));
      v639 = 0;
      v638 = 0;
      v637 = 0;
      v97 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v96);
      v639 = v97;
      v638 = __PAIR64__(HIDWORD(v97), v98);
      v637 = v99;
      v100 = *(_QWORD *)&threadData[18 * v97 + 2];
      v101 = v100 + 320 * HIDWORD(v97);
      v598 = *(_DWORD *)(v101 + 312);
      v102 = *(void (**)(_QWORD))(v101 + 224);
      if (v102)
        v102(*(_QWORD *)(v100 + 320 * HIDWORD(v97) + 288));
      v602 = v96;
      v636 = v639;
      v635 = v638;
      v634 = v637;
      if (_setjmp((int *)v101))
      {
        v103 = (_DWORD *)(v101 + 312);
        v104 = *__error();
        v105 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v647[0]) = 136315394;
          *(_QWORD *)((char *)v647 + 4) = "ContentIndexDocSetResolveOIDsAndGroups_Step";
          WORD6(v647[0]) = 1024;
          *(_DWORD *)((char *)v647 + 14) = 4911;
          _os_log_error_impl(&dword_1B8270000, v105, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", (uint8_t *)v647, 0x12u);
        }
        *__error() = v104;
        *v103 = v598;
        v106 = v634;
        if (__THREAD_SLOT_KEY)
        {
          v107 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v107)
            goto LABEL_493;
        }
        else
        {
          makeThreadId();
          v107 = pthread_getspecific(__THREAD_SLOT_KEY);
          if (!v107)
            goto LABEL_493;
        }
        v108 = v107;
        if ((unint64_t)v107 < 0x801)
        {
LABEL_67:
          v109 = (uint64_t)v108 - 1;
          v110 = &threadData[18 * ((uint64_t)v108 - 1)];
          v112 = v110[14];
          v111 = v110 + 14;
          if (v112 > v106)
          {
            do
              CIOnThreadCleanUpPop(v109);
            while (*v111 > v106);
          }
          dropThreadId(v636, 1, v602);
          CICleanUpReset(v636, v635);
          v113 = v570;
          v114 = v45;
          v94 = 0;
          goto LABEL_481;
        }
LABEL_493:
        makeThreadId();
        v108 = pthread_getspecific(__THREAD_SLOT_KEY);
        goto LABEL_67;
      }
      v605 = v60;
      v646 = 1;
      v116 = *(_DWORD *)(v623 + 40);
      v117 = *(_QWORD *)(v49 + 14368);
      v118 = *(_QWORD *)(v49 + 14392);
      v119 = *(_QWORD *)(v49 + 14376);
      v590 = *(_QWORD *)(v49 + 14384);
      v633 = -1;
      v632 = -1;
      v120 = v615[3];
      if (v120)
      {
        v121 = (int64x2_t *)v615[4];
        v122 = (int64x2_t *)v615[5];
        if (v120 > 3)
        {
          v125 = v120 & 0xFFFFFFFFFFFFFFFCLL;
          v135 = v122 + 1;
          v136 = v121 + 1;
          v137 = 0uLL;
          v138 = v120 & 0xFFFFFFFFFFFFFFFCLL;
          v139 = 0u;
          v140 = 0u;
          v141 = 0u;
          do
          {
            v142 = vaddq_s64(v136[-1], v140);
            v143 = vaddq_s64(*v136, v141);
            v144 = vaddq_s64(v135[-1], v137);
            v145 = vaddq_s64(*v135, v139);
            v135 += 2;
            v136 += 2;
            v137 = v144;
            v139 = v145;
            v140 = v142;
            v141 = v143;
            v138 -= 4;
          }
          while (v138);
          v124 = vaddvq_s64(vaddq_s64(v143, v142));
          v123 = vaddvq_s64(vaddq_s64(v145, v144));
          v134 = v123;
          v133 = v124;
          if (v120 == (v120 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_95;
        }
        else
        {
          v123 = 0;
          v124 = 0;
          v125 = 0;
        }
        v146 = v120 - v125;
        v147 = &v121->i64[v125];
        v148 = &v122->i64[v125];
        v149 = v123;
        v150 = v124;
        do
        {
          v151 = *v147++;
          v133 = v151 + v150;
          v152 = *v148++;
          v134 = v152 + v149;
          v150 = v133;
          v149 += v152;
          --v146;
        }
        while (v146);
      }
      else
      {
        v133 = 0;
        v134 = 0;
      }
LABEL_95:
      v588 = v133;
      v589 = v134;
      LODWORD(v153) = v116 - 1;
      v154 = v623;
      HasWeights = ContentIndexDocSetHasWeights(*(_QWORD *)(v154 + 8 * *(_QWORD *)(v154 + 64) + 80));
      v157 = (HasWeights & 1) != 0 && *(_QWORD *)(v154 + 72) == *((_DWORD *)v615 + 41) + 2;
      v158 = v154;
      v587 = v157;
      v585 = v118;
      v586 = v117;
      v583 = v590;
      v584 = v119;
      v582 = v581 << 25;
      v619 = v49;
      if ((v593 & 4) != 0)
      {
        v373 = v615;
        v374 = 0;
        if (*(_BYTE *)(v158 + 56))
        {
          v375 = v153;
          v113 = v570;
          v114 = v45;
          v94 = 0;
          goto LABEL_475;
        }
        v376 = *(_DWORD *)(v158 + 40);
        v377 = v570;
        if (v376 <= *(_DWORD *)(v158 + 44) || (v378 = v592, v556 >= v592))
        {
          v375 = v153;
          v113 = v570;
          goto LABEL_474;
        }
        v561 = v587 | HasWeights ^ 1;
        v380 = v560 == 1 && v597 != 0;
        v559 = v380;
        v557 = 80;
        v558 = v158 + 88;
        v381 = 0;
        v382 = 0;
        v383 = v376;
        while (1)
        {
          v114 = v45;
          v551 = v381;
          v553 = v382;
          v388 = v383 - 1;
          v389 = v383 - 1;
          v390 = v572[13];
          v555 = v383 - 1;
          if (v390 == 3
            || (HasIndexWithHint = CIIndexSetHasIndexWithHint((_BOOL8)v566, v388, &v633), v158 = v623, !HasIndexWithHint)
            || v597 && (v392 = CIIndexSetHasIndexWithHint(v597, v388, &v632), v158 = v623, v392))
          {
            if (v591)
            {
              v554 = v388;
              v393 = *(unsigned __int8 *)(v585 + v388);
              if (*(_BYTE *)(v585 + v389))
                goto LABEL_357;
LABEL_367:
              v384 = v114;
              v385 = v551;
              v386 = v553;
              v388 = v554;
              goto LABEL_347;
            }
            v398 = *(_DWORD *)(v585 + 4 * (v388 / 5uLL)) >> (6 * (v388 % 5));
            if ((v398 & 0x3F) != 0
              && ((v593 & 1) == 0 || ((*(_DWORD *)(v585 + 4 * (v388 / 5uLL)) >> (6 * (v388 % 5))) & 0x1F) != 0x11))
            {
              v554 = v388;
              if ((v593 & 2) == 0)
              {
                v393 = v398 & 0x3F;
LABEL_357:
                v394 = *((unsigned int *)v373 + 41);
                v552 = v114;
                if ((_DWORD)v394)
                {
                  v395 = v604;
                  v396 = 0;
                  while (!CIIndexSetHasIndexWithHint(*(_QWORD *)&v599[8 * v396], v389, v395))
                  {
                    ++v396;
                    ++v395;
                    if (v394 == v396)
                    {
                      v397 = v393;
                      goto LABEL_370;
                    }
                  }
                  v397 = *((_DWORD *)v373 + 42) + v396;
LABEL_370:
                  v158 = v623;
                  v114 = v552;
                }
                else
                {
                  v397 = v393;
                }
                *(_WORD *)(v614 + 2 * v114) = v397;
                LODWORD(v624) = 0;
                v399 = v601;
                if (v584)
                  v400 = *(_DWORD *)(v584 + 4 * v389);
                else
                  v400 = 0;
                v401 = v616 - v400;
                v387 = v400 >= v616;
                v402 = v400 - v616;
                if (v402 != 0 && v387)
                  v403 = v402;
                else
                  v403 = v401;
                v404 = v583;
                if (v583)
                {
                  v405 = (int *)(v590 + 8 * v554);
                  v406 = *v405;
                  v404 = v405[1];
                }
                else
                {
                  v406 = 0;
                }
                v547 = v404;
                v548 = v403;
                if ((v561 & 1) != 0)
                {
                  LOBYTE(v630) = 0;
                  if (!v587)
                    goto LABEL_382;
LABEL_384:
                  v408 = 0.0;
                  v407 = 1;
                  if (v617 && !*(_BYTE *)(v158 + 55))
                  {
                    v410 = **(uint64_t ***)(v617 + 32 * (v397 & 0xDF & (v582 >> 31)) + 40);
                    if (v410 && v410[2] > v594)
                    {
                      v411 = *v410;
                      v412 = (__int128 *)(v411 + 80);
                      v163 = v411 == 0;
                      v413 = &ZERO_RANKING_WRAPPED_BITS;
                      if (!v163)
                        v413 = v412;
                      v408 = *((float *)v413 + 16);
                    }
                    v407 = 1;
                  }
                }
                else
                {
                  v409 = v373[(v397 >> 6) + 16];
                  LOBYTE(v630) = 0;
                  v631[0] = 0;
                  if (((v409 >> (v397 & 0x1F)) & 1) != 0)
                    goto LABEL_384;
LABEL_382:
                  v407 = 0;
                  v408 = 0.0;
                }
                v414 = *(_QWORD *)(v158 + 8 * *(_QWORD *)(v158 + 64) + 80);
                v549 = v397 & 0xFFFFFFDF;
                v415 = *((_OWORD *)v373 + 9);
                v653 = *((_OWORD *)v373 + 8);
                v654 = v415;
                v655 = *((_OWORD *)v373 + 10);
                v416 = *((_OWORD *)v373 + 5);
                v649 = *((_OWORD *)v373 + 4);
                v650 = v416;
                v417 = *((_OWORD *)v373 + 7);
                v651 = *((_OWORD *)v373 + 6);
                v652 = v417;
                v418 = *((_OWORD *)v373 + 1);
                v647[0] = *(_OWORD *)v373;
                v647[1] = v418;
                v419 = *((_OWORD *)v373 + 3);
                v647[2] = *((_OWORD *)v373 + 2);
                v648 = v419;
                v546 = v407;
                hybridScoringL1(v389, v647, v49, v407, v414, 1u, (float *)&v624, (uint8_t *)&v630, v408, (int *)v631);
                v421 = v420;
                if (v617)
                {
                  if (v587)
                    goto LABEL_421;
                  if (v549 >= *(_DWORD *)(v617 + 4))
                  {
                    v522 = __si_assert_copy_extra_268();
                    v520 = v522;
                    v523 = "";
                    if (v522)
                      v523 = v522;
                    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexQuery.c", 4464, "!groupDone || (uint32_t)group<groupDone->groupCount", v523);
LABEL_500:
                    free(v520);
                    if (__valid_fs(-1))
                      v524 = 2989;
                    else
                      v524 = 3072;
                    *(_DWORD *)v524 = -559038737;
                    abort();
                  }
LABEL_397:
                  v422 = *v373;
                  if (*v373)
                  {
                    v423 = v373[3];
                    if (v423 >= 1)
                    {
                      v424 = v373[4];
                      v425 = v373[5];
                      v426 = 0;
                      v427 = v588;
                      v428 = v589;
                      v429 = 0;
                      v430 = 0;
                      v431 = 0;
                      do
                      {
                        v435 = v431;
                        v437 = v430;
                        v438 = v429;
                        v439 = v426;
                        v440 = v428;
                        v441 = v427;
                        v436 = v423--;
                        v463 = *(_QWORD *)(v424 + 8 * v423);
                        v442 = *(_QWORD *)(v425 + 8 * v423);
                        v527 = v463;
                        if (v463)
                        {
                          v528 = v442;
                          v530 = v427;
                          v531 = v428;
                          v537 = v426;
                          v538 = v438;
                          v540 = v430;
                          v541 = v431;
                          v542 = v436;
                          v464 = 0;
                          v465 = 4 * v427 - 4 * v463;
                          v466 = 8 * v427 - 8 * v463;
                          v467 = &v606[v465];
                          v468 = &v600[v466];
                          v469 = v558 + v466;
                          v470 = &v607[v465];
                          v471 = &v399[v466];
                          v472 = 0;
                          v473 = 0;
                          do
                          {
                            if (CIIndexSetHasIndexWithHint(*(_QWORD *)&v471[8 * v472], v555, v470)
                              && ((v473 = (v473 + 1), *(_DWORD *)(*(_QWORD *)(v469 + 8 * v472) + 52) == 3)
                               || (v474 = *(_QWORD *)&v468[8 * v472]) != 0
                               && CIIndexSetHasIndexWithHint(v474, v555, v467)))
                            {
                              v424 = (v464 + 1);
                              v425 = v473;
                            }
                            else
                            {
                              v425 = v473;
                              v424 = v464;
                            }
                            ++v472;
                            v467 += 4;
                            v470 += 4;
                            v464 = v424;
                            v473 = v425;
                          }
                          while (v472 < *(_QWORD *)(v615[4] + 8 * v423));
                          v373 = v615;
                          v432 = *(_QWORD *)(v615[5] + 8 * v423);
                          v433 = v615[5];
                          v434 = v615[4];
                          v49 = v619;
                          v399 = v601;
                          v377 = v570;
                          v114 = v552;
                          v435 = v541;
                          v436 = v542;
                          v437 = v540;
                          v439 = v537;
                          v438 = v538;
                          v441 = v530;
                          v440 = v531;
                          v442 = v528;
                        }
                        else
                        {
                          LOBYTE(v432) = v442;
                          v433 = v425;
                          v434 = v424;
                          LODWORD(v424) = 0;
                          LODWORD(v425) = 0;
                        }
                        v443 = 0;
                        v444 = v424;
                        v445 = v425;
                        v424 = v434;
                        v425 = v433;
                        v446 = v432;
                        v427 = v441 - v527;
                        v447 = v440 - v442;
                        if (v444 >= 1 << v446)
                          v444 = (1 << v446) - 1;
                        v448 = (uint64_t)v444 >> 63 << v447;
                        v449 = (uint64_t)v444 << v447;
                        if (v445 >= 1 << v446)
                          v445 = (1 << v446) - 1;
                        v450 = (v447 & 0x40) == 0;
                        v451 = (uint64_t)v445 >> 63 << v447;
                        v452 = (uint64_t)v445 << v447;
                        v453 = (unint64_t)v444 >> 1;
                        v428 = v447;
                        v454 = ~(_BYTE)v447;
                        v455 = v448 | (v453 >> v454);
                        if (!v450)
                        {
                          v455 = v449;
                          v449 = 0;
                        }
                        v456 = v455 | v438;
                        v457 = v449 | v439;
                        v458 = v451 | ((unint64_t)v445 >> 1 >> v454);
                        if (v450)
                          v443 = v452;
                        else
                          v458 = v452;
                        v431 = v458 | v435;
                        v459 = v443 | v437;
                        v460 = v457;
                        v426 = v457;
                        v422 = v456;
                        v429 = v456;
                        v461 = v459;
                        v430 = v459;
                        v462 = v431;
                      }
                      while (v436 > 1);
LABEL_423:
                      v475 = v422;
                      v476 = v460;
                      v477 = v554;
                      v478 = v554;
                      v479 = 8 * v114;
                      *(_QWORD *)(v612 + v479) = v609 + v554;
                      v480 = *(_QWORD *)(v586 + 8 * v555);
                      *(_QWORD *)(v611 + v479) = v480;
                      if (v480)
                      {
                        v481 = v613;
                        if (*v373)
                        {
                          v482 = v624;
                          v483 = LOBYTE(v630);
                          v484 = *v373 + v114 * v557;
                          *(_QWORD *)v484 = v461;
                          *(_QWORD *)(v484 + 8) = v462;
                          *(_QWORD *)(v484 + 16) = v461;
                          *(_QWORD *)(v484 + 24) = v462;
                          *(_QWORD *)(v484 + 32) = v476;
                          *(_QWORD *)(v484 + 40) = v475;
                          *(_DWORD *)(v484 + 48) = v548;
                          *(_DWORD *)(v484 + 52) = v406;
                          *(_DWORD *)(v484 + 56) = v547;
                          *(_DWORD *)(v484 + 60) = v421;
                          *(_DWORD *)(v484 + 64) = v482;
                          *(_BYTE *)(v484 + 68) = v483;
                          *(_BYTE *)(v484 + 69) = v546;
                        }
                        v485 = v373[7];
                        if (v485)
                          *(_BYTE *)(v373[1] + 5 * v114) = countInUpdates(v485, v478);
                        v486 = v373[8];
                        if (v486)
                          *(_BYTE *)(v373[1] + 5 * v114 + 1) = countInUpdates(v486, v478);
                        v487 = v373[9];
                        if (v487)
                          *(_BYTE *)(v373[1] + 5 * v114 + 2) = countInUpdates(v487, v478);
                        v488 = v373[10];
                        if (v488)
                          *(_BYTE *)(v373[1] + 5 * v114 + 3) = countInUpdates(v488, v478);
                        v489 = v373[11];
                        if (v489)
                          *(_BYTE *)(v373[1] + 5 * v114 + 4) = countInUpdates(v489, v478);
                        v490 = v373[13];
                        if (v490)
                        {
                          LOBYTE(v647[0]) = 0;
                          MinDistance = distanceHolderGetMinDistance(v490, *(_QWORD *)(v49 + 72) + v478, v647);
                          v492 = v647[0];
                          v493 = v373[2] + 16 * v114;
                          if (!LOBYTE(v647[0]))
                            MinDistance = 3.4028e38;
                          *(float *)(v493 + 4) = MinDistance;
                          *(_BYTE *)v493 = v492;
                        }
                        v494 = v377;
                        v495 = v373[14];
                        if (v495)
                        {
                          LOBYTE(v647[0]) = 0;
                          v496 = distanceHolderGetMinDistance(v495, *(_QWORD *)(v49 + 72) + v478, v647);
                          v497 = v647[0];
                          v498 = v373[2] + 16 * v114;
                          if (!LOBYTE(v647[0]))
                            v496 = 3.4028e38;
                          *(float *)(v498 + 8) = v496;
                          *(_BYTE *)(v498 + 1) = v497;
                        }
                        v499 = v477;
                        v500 = v373[15];
                        if (v500)
                        {
                          LOBYTE(v647[0]) = 0;
                          v501 = distanceHolderGetMinDistance(v500, *(_QWORD *)(v49 + 72) + v478, v647);
                          v502 = v647[0];
                          v503 = v373[2] + 16 * v114;
                          if (!LOBYTE(v647[0]))
                            v501 = 3.4028e38;
                          *(float *)(v503 + 12) = v501;
                          *(_BYTE *)(v503 + 2) = v502;
                        }
                        if (((1 << v549) & v553) != 0)
                          v504 = v551;
                        else
                          v504 = v551 + 1;
                        if (((1 << v549) & v553) != 0)
                          v505 = 0;
                        else
                          v505 = 1 << v549;
                        v158 = v623;
                        if (v481)
                        {
                          *(_BYTE *)(v481 + v552) = v608;
                          if (v559)
                          {
                            HasIndex = CIIndexSetHasIndex(v597, v555);
                            v158 = v623;
                            if (HasIndex)
                              *(_BYTE *)(v481 + v552) = 1;
                          }
                          if (v610 && *(_BYTE *)(v481 + v552))
                            *v610 = 1;
                        }
                        v507 = v504;
                        v508 = v505 | v553;
                        v114 = v552 + 1;
                        if (v552 + 1 > v596)
                        {
                          v378 = v592;
                          if (v504 < v595)
                          {
                            v94 = 1;
                            v375 = v555;
                            v113 = v494;
                            goto LABEL_475;
                          }
                          goto LABEL_467;
                        }
                      }
                      else
                      {
                        v494 = v377;
                        v499 = v477;
                        v507 = v551;
                        v508 = v553;
                        v158 = v623;
                      }
                      v378 = v592;
LABEL_467:
                      v386 = v508;
                      v385 = v507;
                      v384 = v114;
                      v388 = v499;
                      v377 = v494;
                      goto LABEL_347;
                    }
LABEL_421:
                    v422 = 0;
                  }
                  v461 = 0;
                  v462 = 0;
                  v460 = 0;
                  goto LABEL_423;
                }
                if (!v587)
                  goto LABEL_397;
                goto LABEL_421;
              }
              v393 = v398 & 0x3F;
              if ((v398 & 0x20) == 0)
                goto LABEL_357;
              goto LABEL_367;
            }
          }
          v384 = v114;
          v385 = v551;
          v386 = v553;
LABEL_347:
          v382 = v386;
          v381 = v385;
          v387 = v388 <= *(_DWORD *)(v158 + 44) || v384 >= v378;
          v45 = v384;
          v383 = v555;
          if (v387)
          {
            v375 = v555;
            v113 = v377;
            v114 = v384;
            v94 = 0;
            goto LABEL_475;
          }
        }
      }
      memset(v631, 0, 24);
      v159 = (*(_DWORD *)(v154 + 40) - 1);
      v160 = v615;
      v161 = v599;
      if (!*(_BYTE *)(v158 + 56))
      {
        _CIIndexSetInitializeEnumeratorForRange(v566, (uint64_t)v631, *(_DWORD *)(v158 + 44), *(_DWORD *)(v158 + 40) - 1);
        v158 = v623;
      }
      if (v556 >= v592)
      {
        v374 = 0;
        v169 = v570;
        goto LABEL_473;
      }
      v580 = HasWeights;
      if (v594)
        v162 = a17;
      else
        v162 = 1;
      v579 = v162;
      v578 = &v647[1];
      v163 = v560 != 1 || v597 == 0;
      v164 = !v163;
      v577 = v164;
      v575 = 80;
      v576 = v158 + 88;
      *(_QWORD *)&v156 = 136316162;
      v574 = v156;
      v165 = 0;
      v166 = 0;
      v153 = v159;
      v167 = v570;
      v168 = v592;
      while (1)
      {
        v565 = v167;
        v567 = v165;
        v172 = *(unsigned __int8 *)(v158 + 56);
        v568 = v166;
        v569 = v45;
        if (v172)
        {
          v173 = (v153 - 1);
          v573 = v153;
          if (!(_DWORD)v153)
            goto LABEL_468;
        }
        else
        {
          v174 = _CIIndexSetEnumeratorNext(v631);
          v45 = v569;
          v158 = v623;
          v175 = v174;
          v173 = v153;
          LODWORD(v153) = v175;
          v573 = v175;
          if (!v175)
          {
LABEL_468:
            v374 = 0;
            v169 = v565;
            goto LABEL_473;
          }
        }
        v176 = v173;
        if (v591)
        {
          v177 = *(unsigned __int8 *)(v585 + v573);
          if (*(_BYTE *)(v585 + v573))
            goto LABEL_120;
          goto LABEL_112;
        }
        v183 = *(_DWORD *)(v585 + 4 * (v573 / 5uLL)) >> (6 * (v573 % 5));
        if ((v183 & 0x3F) == 0
          || (v593 & 1) != 0 && ((*(_DWORD *)(v585 + 4 * (v573 / 5uLL)) >> (6 * (v573 % 5))) & 0x1F) == 0x11)
        {
          goto LABEL_112;
        }
        if ((v593 & 2) == 0)
          break;
        v177 = (*(_DWORD *)(v585 + 4 * (v573 / 5uLL)) >> (6 * (v573 % 5))) & 0x3F;
        if ((v183 & 0x20) == 0)
          goto LABEL_120;
LABEL_112:
        v169 = v565;
        v170 = v567;
        v171 = v568;
LABEL_113:
        v165 = v170;
        v166 = v171;
        v153 = v176;
        v167 = v169;
        if (v45 >= v168)
        {
          v374 = 0;
          LODWORD(v153) = v573;
          goto LABEL_473;
        }
      }
      v177 = (*(_DWORD *)(v585 + 4 * (v573 / 5uLL)) >> (6 * (v573 % 5))) & 0x3F;
LABEL_120:
      v178 = *((unsigned int *)v160 + 41);
      if ((_DWORD)v178)
      {
        v179 = v173;
        v180 = v604;
        v181 = 0;
        while (!CIIndexSetHasIndexWithHint(*(_QWORD *)&v161[8 * v181], v573, v180))
        {
          ++v181;
          ++v180;
          if (v178 == v181)
          {
            v182 = v177;
            goto LABEL_133;
          }
        }
        v182 = *((_DWORD *)v160 + 42) + v181;
LABEL_133:
        v158 = v623;
        LODWORD(v176) = v179;
        v45 = v569;
      }
      else
      {
        v182 = v177;
      }
      v184 = v584;
      if (v584)
        v184 = *(_DWORD *)(v584 + 4 * v573);
      v185 = v616 - v184;
      v387 = v184 >= v616;
      v186 = v184 - v616;
      if (v186 != 0 && v387)
        v187 = v186;
      else
        v187 = v185;
      v188 = v583;
      if (v583)
      {
        v189 = v590 + 8 * v573;
        v190 = *(float *)v189;
        v188 = *(_DWORD *)(v189 + 4);
      }
      else
      {
        v190 = 0.0;
      }
      v191 = v617;
      if (v614)
      {
        *(_WORD *)(v614 + 2 * v45) = v182;
        v192 = v182 & 0xFFFFFFDF;
      }
      else
      {
        v192 = 0;
      }
      v193 = v192;
      v562 = v187;
      v194 = v192 & (v582 >> 31);
      v571 = v176;
      v563 = v188;
      if (v191)
      {
        if (*(_DWORD *)(v191 + 4) <= v194)
          LOBYTE(v194) = 0;
        if ((v579 & 1) != 0)
        {
          v195 = 1;
        }
        else
        {
          v199 = *(uint64_t **)(v191 + 32 * v194 + 40);
          v200 = v199[2];
          if (v200)
            v200 = *(_QWORD *)(v200 + 16) - 1;
          v201 = v199[1];
          if (v201)
            v201 = *(_QWORD *)(v201 + 16) - 1;
          v202 = *v199;
          if (v202)
            v202 = *(_QWORD *)(v202 + 16) - 1;
          v195 = v201 + v200 + v202 < (unint64_t)v594;
        }
        if (v587)
        {
          v203 = **(uint64_t ***)(v617 + 32 * v194 + 40);
          v197 = 0.0;
          if (v203 && !*(_BYTE *)(v158 + 55) && v203[2] > v594)
          {
            v204 = *v203;
            v205 = (__int128 *)(v204 + 80);
            v163 = v204 == 0;
            v206 = &ZERO_RANKING_WRAPPED_BITS;
            if (!v163)
              v206 = v205;
            v197 = *((float *)v206 + 16);
          }
          v198 = v195;
          v196 = v194;
LABEL_167:
          v207 = v193;
          LOBYTE(v628) = 0;
          LODWORD(v624) = 0;
          v630 = 0.0;
          v208 = *(_QWORD *)(v158 + 8 * *(_QWORD *)(v158 + 64) + 80);
          v209 = *((_OWORD *)v160 + 9);
          v653 = *((_OWORD *)v160 + 8);
          v654 = v209;
          v655 = *((_OWORD *)v160 + 10);
          v210 = *((_OWORD *)v160 + 5);
          v649 = *((_OWORD *)v160 + 4);
          v650 = v210;
          v211 = *((_OWORD *)v160 + 7);
          v651 = *((_OWORD *)v160 + 6);
          v652 = v211;
          v212 = *((_OWORD *)v160 + 1);
          v647[0] = *(_OWORD *)v160;
          v647[1] = v212;
          v213 = *((_OWORD *)v160 + 3);
          v647[2] = *((_OWORD *)v160 + 2);
          v648 = v213;
          hybridScoringL1(v573, v647, v49, 1, v208, 0, &v630, (uint8_t *)&v628, v197, (int *)&v624);
          if (v617)
          {
            v215 = *(uint64_t ***)(v617 + 32 * v196 + 40);
            v216 = v215 + 2;
            if ((_DWORD)v624 == 2)
              ++v215;
            if ((_DWORD)v624 == 3)
              v215 = v216;
            v217 = *v215;
          }
          else
          {
            v217 = 0;
          }
          v227 = v569;
          v158 = v623;
          if ((v198 & 1) != 0)
            goto LABEL_216;
          v228 = *v217;
          v229 = (__int128 *)(v228 + 80);
          if (!v228)
            v229 = &ZERO_RANKING_WRAPPED_BITS;
          v230 = *((float *)v229 + 13);
          if (!*((_BYTE *)v229 + 69))
          {
            if (*v229 != 0)
              goto LABEL_209;
            goto LABEL_213;
          }
          v231 = *((float *)v229 + 15);
          if (v231 < v214)
            goto LABEL_216;
          if (v231 != v214)
            goto LABEL_209;
LABEL_213:
          if (v230 < v190 || v230 == v190 && *((_DWORD *)v229 + 12) >= v187)
          {
LABEL_216:
            LOBYTE(v251) = 1;
            v169 = v565;
LABEL_217:
            v259 = v573;
            v260 = *(_QWORD *)(v586 + 8 * v573);
            v261 = 8 * v569;
            *(_QWORD *)(v611 + v261) = v260;
            *(_QWORD *)(v612 + v261) = v609 + v259;
            if (v260)
            {
              if (*v160)
              {
                v262 = v630;
                v263 = v628;
                v264 = *v160 + v227 * v575;
                *(_OWORD *)v264 = 0u;
                *(_OWORD *)(v264 + 16) = 0u;
                *(_OWORD *)(v264 + 32) = 0u;
                *(_DWORD *)(v264 + 48) = v562;
                *(float *)(v264 + 52) = v190;
                *(_DWORD *)(v264 + 56) = v563;
                *(float *)(v264 + 60) = v214;
                *(float *)(v264 + 64) = v262;
                *(_BYTE *)(v264 + 68) = v263;
                *(_BYTE *)(v264 + 69) = 1;
              }
              v265 = 0;
              v266 = 1 << v207;
              v163 = ((1 << v207) & v568) == 0;
              v267 = v163;
              if (v163)
                v268 = v266;
              else
                v268 = 0;
              v269 = v160[7];
              if (v269)
              {
                v270 = countInUpdates(v269, v259);
                v227 = v569;
                v265 = v270;
              }
              goto LABEL_287;
            }
          }
          else
          {
LABEL_209:
            v169 = v565 + 1;
            if ((v593 & 8) != 0)
            {
              LOBYTE(v251) = 0;
              goto LABEL_217;
            }
          }
          v45 = v227;
          v369 = v567;
          v171 = v568;
LABEL_324:
          v168 = v592;
LABEL_326:
          v170 = v369;
          v176 = v571;
          goto LABEL_113;
        }
      }
      else
      {
        v196 = v194;
        v197 = 0.0;
        v195 = 1;
        v198 = 1;
        if (v587)
          goto LABEL_167;
      }
      v218 = v194;
      v219 = v195;
      v630 = 0.0;
      v629 = 0;
      v564 = v193;
      if ((v580 & 1) != 0)
      {
        v220 = v160[(v193 >> 6) + 16];
        v628 = 0;
        v221 = 0.0;
        if (((v220 >> (v193 & 0x1F)) & 1) != 0)
        {
          v222 = 1;
          if (v617 && !*(_BYTE *)(v158 + 55))
          {
            v223 = **(uint64_t ***)(v617 + 32 * v218 + 40);
            if (v223 && v223[2] > v594)
            {
              v224 = *v223;
              v225 = (__int128 *)(v224 + 80);
              v163 = v224 == 0;
              v226 = &ZERO_RANKING_WRAPPED_BITS;
              if (!v163)
                v226 = v225;
              v221 = *((float *)v226 + 16);
            }
            v222 = 1;
          }
        }
        else
        {
          v222 = 0;
        }
      }
      else
      {
        v222 = 0;
        v628 = 0;
        v221 = 0.0;
      }
      v232 = *(_QWORD *)(v158 + 8 * *(_QWORD *)(v158 + 64) + 80);
      v233 = *((_OWORD *)v160 + 9);
      v653 = *((_OWORD *)v160 + 8);
      v654 = v233;
      v655 = *((_OWORD *)v160 + 10);
      v234 = *((_OWORD *)v160 + 5);
      v649 = *((_OWORD *)v160 + 4);
      v650 = v234;
      v235 = *((_OWORD *)v160 + 7);
      v651 = *((_OWORD *)v160 + 6);
      v652 = v235;
      v236 = *((_OWORD *)v160 + 1);
      v647[0] = *(_OWORD *)v160;
      v647[1] = v236;
      v237 = *((_OWORD *)v160 + 3);
      v647[2] = *((_OWORD *)v160 + 2);
      v648 = v237;
      v550 = v222;
      hybridScoringL1(v573, v647, v49, v222, v232, 0, &v630, &v629, v221, &v628);
      if (v617)
      {
        v239 = *(uint64_t ***)(v617 + 32 * v218 + 40);
        v240 = v239 + 2;
        if (v628 == 2)
          ++v239;
        if (v628 == 3)
          v239 = v240;
        v241 = *v239;
      }
      else
      {
        v241 = 0;
      }
      v242 = v601;
      v243 = v600;
      v244 = v238;
      v158 = v623;
      if (!v219)
      {
        v245 = *v241;
        if (v245)
          v246 = (__int128 *)(v245 + 80);
        else
          v246 = &ZERO_RANKING_WRAPPED_BITS;
        v248 = *(_QWORD *)v246;
        v247 = *((_QWORD *)v246 + 1);
        v249 = *((float *)v246 + 13);
        if (!*((_BYTE *)v246 + 69))
        {
          if (v248 | v247)
            goto LABEL_212;
          goto LABEL_225;
        }
        v250 = *((float *)v246 + 15);
        if (v250 >= v238)
        {
          if (v250 != v238)
            goto LABEL_212;
LABEL_225:
          if (v249 >= v190 && (v249 != v190 || *((_DWORD *)v246 + 12) < v187))
          {
LABEL_212:
            v253 = v246[1];
            v254 = v246[2];
            v252 = v246 + 1;
            v624 = v253;
            v625 = v254;
            v255 = v252[2];
            v256 = v252[3];
            v257 = v247;
            v626 = v255;
            v627 = v256;
            v258 = 0;
            goto LABEL_230;
          }
        }
      }
      if (*v160)
      {
        v626 = 0u;
        v627 = 0u;
        v624 = 0u;
        v625 = 0u;
        v258 = 1;
        v257 = 0;
        v248 = 0;
LABEL_230:
        *(_QWORD *)&v545 = v248;
        *((_QWORD *)&v545 + 1) = v257;
        v544 = v258;
        v271 = v160[3];
        if (v271 >= 1)
        {
          v272 = v160[4];
          v273 = v160[5];
          v274 = 0;
          v276 = v588;
          v275 = v589;
          v277 = 0;
          v278 = 0;
          v279 = 0;
          while (1)
          {
            v280 = v279;
            v281 = v278;
            v282 = v277;
            v283 = v274;
            v284 = v275;
            v285 = v276;
            v286 = v271--;
            v287 = *(_QWORD *)(v272 + 8 * v271);
            v288 = *(_QWORD *)(v273 + 8 * v271);
            if (v287)
            {
              v526 = *(_QWORD *)(v273 + 8 * v271);
              v529 = v284;
              v532 = v279;
              v533 = v278;
              v534 = v277;
              v535 = v274;
              v543 = v286;
              v289 = 0;
              v290 = 4 * v276 - 4 * v287;
              v539 = v276;
              v536 = v287;
              v291 = 8 * v276 - 8 * v287;
              v292 = &v606[v290];
              v293 = &v243[v291];
              v294 = v576 + v291;
              v295 = &v607[v290];
              v296 = &v242[v291];
              v297 = 0;
              v298 = 0;
              do
              {
                if (CIIndexSetHasIndexWithHint(*(_QWORD *)&v296[8 * v297], v573, v295)
                  && ((v298 = (v298 + 1), *(_DWORD *)(*(_QWORD *)(v294 + 8 * v297) + 52) == 3)
                   || (v301 = *(_QWORD *)&v293[8 * v297]) != 0 && CIIndexSetHasIndexWithHint(v301, v573, v292)))
                {
                  v300 = (v289 + 1);
                  v299 = v298;
                }
                else
                {
                  v299 = v298;
                  v300 = v289;
                }
                ++v297;
                v292 += 4;
                v295 += 4;
                v289 = v300;
                v298 = v299;
              }
              while (v297 < *(_QWORD *)(v615[4] + 8 * v271));
              v160 = v615;
              v302 = *(_QWORD *)(v615[5] + 8 * v271);
              v273 = v615[5];
              v272 = v615[4];
              v242 = v601;
              v243 = v600;
              v286 = v543;
              v285 = v539;
              v283 = v535;
              v287 = v536;
              v281 = v533;
              v282 = v534;
              v280 = v532;
              v284 = v529;
              v288 = v526;
            }
            else
            {
              v302 = *(_QWORD *)(v273 + 8 * v271);
              LODWORD(v299) = 0;
              LODWORD(v300) = 0;
            }
            v303 = 0;
            v304 = v284 - v288;
            v275 = v284 - v288;
            v305 = (int)v299 >= 1 << v302 ? (1 << v302) - 1 : v299;
            v306 = ((uint64_t)v305 >> 63 << v304) | ((unint64_t)v305 >> 1 >> ~(_BYTE)v275);
            v307 = (uint64_t)v305 << v304;
            v308 = (int)v300 >= 1 << v302 ? (1 << v302) - 1 : v300;
            v309 = (v304 & 0x40) != 0 ? v307 : v306;
            v310 = (v304 & 0x40) != 0 ? 0 : v307;
            v311 = v309 | v280;
            v312 = v310 | v281;
            v313 = v310 | v281;
            v314 = v309 | v280;
            v315 = ((uint64_t)v308 >> 63 << v304) | ((unint64_t)v308 >> 1 >> ~(_BYTE)v275);
            v316 = (uint64_t)v308 << v304;
            if ((v304 & 0x40) != 0)
              v315 = v316;
            else
              v303 = v316;
            v317 = v315 | v282;
            v318 = v303 | v283;
            if ((v544 & 1) == 0)
            {
              v319 = 0;
              v320 = -1 << v304;
              v321 = (v304 & 0x40) == 0;
              if ((v304 & 0x40) != 0)
                v322 = -1 << v304;
              else
                v322 = (-1 << v304) | (0x7FFFFFFFFFFFFFFFuLL >> ~(_BYTE)v275);
              if (v321)
                v319 = v320;
              if (__PAIR128__(v311, v312) < __PAIR128__(v322 & *((_QWORD *)&v545 + 1), v319 & (unint64_t)v545))
                break;
            }
            v276 = v285 - v287;
            v274 = v318;
            v277 = v315 | v282;
            v278 = v313;
            v279 = v314;
            if (v286 <= 1)
              goto LABEL_270;
          }
          v323 = v313;
          v324 = v314;
          goto LABEL_272;
        }
        v314 = 0;
        v318 = 0;
        v317 = 0;
        v313 = 0;
LABEL_270:
        v324 = v314;
        v323 = v313;
        if ((v544 & 1) != 0)
        {
          v329 = 1;
          v330 = v318;
          v49 = v619;
        }
        else
        {
LABEL_272:
          v49 = v619;
          v331 = v317;
          v332 = v318;
          v647[0] = v545;
          v333 = v625;
          v334 = v578;
          *v578 = v624;
          v334[1] = v333;
          v335 = v627;
          v334[2] = v626;
          v334[3] = v335;
          v329 = ci_lt_l1_score((uint64_t)v647, v323, v324, v562, v244, v190);
          v330 = v332;
          v317 = v331;
        }
        v227 = v569;
        v251 = v329;
        v328 = v323;
        v325 = v324;
        v326 = v330;
        v327 = v317;
        v158 = v623;
      }
      else
      {
        v251 = 1;
        v325 = 0;
        v326 = 0;
        v327 = 0;
        v328 = 0;
        v227 = v569;
      }
      if (dword_1EF19FC90 >= 5)
      {
        v370 = *__error();
        v371 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v371, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v647[0]) = v574;
          v372 = "dropping";
          if (v251)
            v372 = "collecting";
          *(_QWORD *)((char *)v647 + 4) = v372;
          WORD6(v647[0]) = 1024;
          *(_DWORD *)((char *)v647 + 14) = v564;
          WORD1(v647[1]) = 2048;
          *(_QWORD *)((char *)&v647[1] + 4) = v325;
          WORD6(v647[1]) = 2048;
          *(_QWORD *)((char *)&v647[1] + 14) = v328;
          WORD3(v647[2]) = 1024;
          DWORD2(v647[2]) = v562;
          _os_log_impl(&dword_1B8270000, v371, OS_LOG_TYPE_DEFAULT, "%s %d %llx%016llx %d", (uint8_t *)v647, 0x2Cu);
        }
        *__error() = v370;
        v158 = v623;
        v49 = v619;
        v160 = v615;
        v227 = v569;
      }
      v336 = v251 ^ 1;
      v169 = v565 + (v251 ^ 1u);
      if ((v581 & 8) != 0)
        v336 = 0;
      if ((v336 & 1) != 0
        || (v259 = v573,
            v337 = *(_QWORD *)(v586 + 8 * v573),
            v338 = 8 * v227,
            *(_QWORD *)(v611 + v338) = v337,
            *(_QWORD *)(v612 + v338) = v609 + v259,
            !v337))
      {
        v45 = v227;
        v369 = v567;
        v171 = v568;
        v161 = v599;
        v168 = v592;
        goto LABEL_326;
      }
      if (*v160)
      {
        v339 = v630;
        v340 = *v160 + 80 * v227;
        v341 = v629;
        *(_QWORD *)v340 = v328;
        *(_QWORD *)(v340 + 8) = v325;
        *(_QWORD *)(v340 + 16) = v328;
        *(_QWORD *)(v340 + 24) = v325;
        *(_QWORD *)(v340 + 32) = v326;
        *(_QWORD *)(v340 + 40) = v327;
        *(_DWORD *)(v340 + 48) = v562;
        *(float *)(v340 + 52) = v190;
        *(_DWORD *)(v340 + 56) = v563;
        *(float *)(v340 + 60) = v244;
        *(float *)(v340 + 64) = v339;
        *(_BYTE *)(v340 + 68) = v341;
        *(_BYTE *)(v340 + 69) = v550;
      }
      v265 = 0;
      v267 = ((1 << v564) & v568) == 0;
      if (((1 << v564) & v568) != 0)
        v268 = 0;
      else
        v268 = 1 << v564;
      v342 = v160[7];
      if (v342)
      {
        v343 = countInUpdates(v342, v259);
        v227 = v569;
        v265 = v343;
      }
      v161 = v599;
LABEL_287:
      v344 = 5 * v227;
      *(_BYTE *)(v160[1] + 5 * v227) = v265;
      v345 = v160[8];
      if (v345)
        v346 = countInUpdates(v345, v259);
      else
        v346 = 0;
      *(_BYTE *)(v160[1] + v344 + 1) = v346;
      v347 = v160[9];
      if (v347)
        v348 = countInUpdates(v347, v259);
      else
        v348 = 0;
      v349 = 5 * v569;
      *(_BYTE *)(v160[1] + 5 * v569 + 2) = v348;
      v350 = v160[10];
      if (v350)
        v351 = countInUpdates(v350, v259);
      else
        v351 = 0;
      *(_BYTE *)(v160[1] + v349 + 3) = v351;
      v352 = v160[11];
      if (v352)
        v353 = countInUpdates(v352, v259);
      else
        v353 = 0;
      v354 = v569;
      *(_BYTE *)(v160[1] + 5 * v569 + 4) = v353;
      v355 = v160[13];
      if (v355)
      {
        LOBYTE(v647[0]) = 0;
        v356 = distanceHolderGetMinDistance(v355, *(_QWORD *)(v619 + 72) + v259, v647);
        v354 = v569;
        v357 = v647[0];
        v358 = v160[2] + 16 * v569;
        if (!LOBYTE(v647[0]))
          v356 = 3.4028e38;
        *(float *)(v358 + 4) = v356;
        *(_BYTE *)v358 = v357;
      }
      v359 = v160[14];
      if (v359)
      {
        LOBYTE(v647[0]) = 0;
        v360 = distanceHolderGetMinDistance(v359, *(_QWORD *)(v619 + 72) + v259, v647);
        v354 = v569;
        v361 = v647[0];
        v362 = v160[2] + 16 * v569;
        if (!LOBYTE(v647[0]))
          v360 = 3.4028e38;
        *(float *)(v362 + 8) = v360;
        *(_BYTE *)(v362 + 1) = v361;
      }
      v363 = v160[15];
      if (v363)
      {
        LOBYTE(v647[0]) = 0;
        v364 = distanceHolderGetMinDistance(v363, *(_QWORD *)(v619 + 72) + v259, v647);
        v354 = v569;
        v365 = v647[0];
        v366 = v160[2] + 16 * v569;
        if (!LOBYTE(v647[0]))
          v364 = 3.4028e38;
        *(float *)(v366 + 12) = v364;
        *(_BYTE *)(v366 + 2) = v365;
      }
      v158 = v623;
      v367 = v613;
      if (v613)
      {
        *(_BYTE *)(v613 + v354) = v608;
        if (v577)
        {
          v368 = CIIndexSetHasIndex(v597, v573);
          v354 = v569;
          v158 = v623;
          if (v368)
            *(_BYTE *)(v367 + v569) = 1;
        }
        if (v610 && *(_BYTE *)(v367 + v354))
          *v610 = 1;
        if ((v251 & 1) == 0)
          *(_BYTE *)(v367 + v354) |= 2u;
      }
      v369 = v567 + v267;
      v171 = v268 | v568;
      if (v354 + 1 <= v596)
      {
        v45 = v354 + 1;
        v49 = v619;
        goto LABEL_324;
      }
      v49 = v619;
      v168 = v592;
      if ((v567 + v267) >= v595)
      {
        v45 = v354 + 1;
        goto LABEL_326;
      }
      LODWORD(v153) = v573;
      v45 = v354 + 1;
      v374 = 1;
LABEL_473:
      v375 = v153;
      v113 = v169;
LABEL_474:
      v114 = v45;
      v94 = v374;
LABEL_475:
      v509 = *(_DWORD *)(v158 + 44);
      if (v375 > v509)
        v509 = v375;
      *(_DWORD *)(v158 + 40) = v509;
      if (!v646)
      {
        v519 = __si_assert_copy_extra_268();
        v520 = v519;
        v521 = "";
        if (v519)
          v521 = v519;
        __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexQuery.c", 4906, "asserted", v521);
        goto LABEL_500;
      }
      v646 = 0;
      v510 = *(_QWORD *)&threadData[18 * v636 + 2];
      v511 = HIDWORD(v635);
      v512 = v510 + 320 * HIDWORD(v635);
      *(_DWORD *)(v512 + 312) = v598;
      v513 = *(void (**)(_QWORD))(v512 + 232);
      v50 = v618;
      v60 = v605;
      if (v513)
        v513(*(_QWORD *)(v510 + 320 * v511 + 288));
      dropThreadId(v636, 0, v602);
LABEL_481:
      v514 = *(_QWORD *)&threadData[18 * v642 + 2];
      v515 = HIDWORD(v641);
      v516 = v514 + 320 * HIDWORD(v641);
      *(_DWORD *)(v516 + 312) = v603;
      v517 = *(void (**)(_QWORD))(v516 + 232);
      if (v517)
        v517(*(_QWORD *)(v514 + 320 * v515 + 288));
      dropThreadId(v642, 0, v60);
      v47 = v113;
      v93 = v114;
LABEL_484:
      pthread_mutex_lock(v50);
      v518 = *(_DWORD *)(v49 + 14660) - 1;
      *(_DWORD *)(v49 + 14660) = v518;
      if (!v518)
        db_rwlock_wakeup((uint64_t)v50, 0, 0);
      pthread_mutex_unlock(v50);
      v48 = v93;
      result = v94;
      v37 = v623;
LABEL_487:
      if (v646)
      {
        *(_BYTE *)(v37 + 58) = 1;
      }
      else
      {
        *v622 = v48;
        *v621 = v47;
      }
      return result;
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 9u:
      v72 = (_DWORD **)(v17 + 80);
      goto LABEL_32;
    default:
      goto LABEL_505;
  }
}

uint64_t _CIIndexSetEnumeratorNext(unsigned int *a1)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;

  v1 = *((_QWORD *)a1 + 2);
  if (!v1)
    return 0;
  v3 = a1[1];
  v4 = *(_DWORD *)(v1 + 16);
  if (v4 > -10)
  {
    if (v4 < 0)
    {
      v19 = -2 - v4;
      v20 = (int)a1[2];
      if ((int)v20 >= v19)
        return 0;
      a1[2] = v20 + 1;
      result = *(unsigned int *)(v1 + 4 * v20 + 32);
      if (result < v3)
        return 0;
    }
    else if (CFGetTypeID(*((CFTypeRef *)a1 + 2)) == __kCIIndexSetInvertedTypeID)
    {
      result = *a1;
      v12 = a1[1];
      if (result < v12)
        return 0;
      v13 = *(_DWORD *)(v1 + 16);
      if (!v13)
        goto LABEL_9;
      v14 = *(_DWORD *)(v1 + 36);
      LODWORD(v15) = a1[2];
      if ((int)v15 >= v14)
      {
LABEL_47:
        if (v14 < v13)
        {
          v40 = 4 * (int)v15;
          while (*(_DWORD *)(v1 + 32) > v15)
          {
            v41 = *(_DWORD *)(*(_QWORD *)(v1 + 40) + v40);
            v42 = (result - 1);
            *a1 = v42;
            if (result > v41)
              return result;
            if (v42 < v12)
              return 0;
            LODWORD(v15) = v15 + 1;
            a1[2] = v15;
            v40 += 4;
            result = (result - 1);
            if (*(_DWORD *)(v1 + 36) >= v13)
              goto LABEL_57;
          }
        }
        v42 = result;
LABEL_57:
        *a1 = v42 - 1;
        return v42;
      }
      else
      {
        v16 = v14;
        v15 = (int)v15;
        v17 = *a1;
        while (1)
        {
          result = v17;
          v18 = *(_DWORD *)(*(_QWORD *)(v1 + 40) + 4 * v15);
          v17 = (v17 - 1);
          *a1 = v17;
          if (result > v18)
            break;
          if (v17 < v12)
            return 0;
          a1[2] = v15 + 1;
          v14 = *(_DWORD *)(v1 + 36);
          if ((_DWORD)v15 + 1 == v14)
          {
            LODWORD(v15) = v15 + 1 - v13 + *(_DWORD *)(v1 + 32);
            a1[2] = v15;
            v14 = *(_DWORD *)(v1 + 36);
            result = v17;
            goto LABEL_47;
          }
          if (v16 == ++v15)
          {
            result = v17;
            goto LABEL_47;
          }
        }
      }
    }
    else
    {
      v21 = *(_DWORD *)(v1 + 36);
      v22 = (int)a1[2];
      if ((int)v22 >= v21)
      {
        if (v21 >= *(_DWORD *)(v1 + 16))
          return 0;
        if (v22 >= *(_DWORD *)(v1 + 32))
          return 0;
        v32 = *(_QWORD *)(v1 + 40);
        a1[2] = v22 + 1;
        result = *(unsigned int *)(v32 + 4 * v22);
        if (result < a1[1])
          return 0;
      }
      else
      {
        v23 = *(_QWORD *)(v1 + 40);
        v24 = v22 + 1;
        a1[2] = v22 + 1;
        result = *(unsigned int *)(v23 + 4 * v22);
        if (result < a1[1])
          return 0;
        if (v24 == *(_DWORD *)(v1 + 36))
          a1[2] = *(_DWORD *)(v1 + 32) + v24 - *(_DWORD *)(v1 + 16);
      }
    }
  }
  else
  {
    result = *a1;
    v6 = *(_DWORD *)(v1 + 24);
    v7 = v6 - result;
    if (v6 < result || result < v3)
      return 0;
    v9 = *(_QWORD *)(v1 + 40);
    v10 = v7 >> 5;
    v11 = *(_DWORD *)(v9 + 4 * v10);
    if (((v11 >> v7) & 1) != 0)
    {
LABEL_9:
      *a1 = result - 1;
      return result;
    }
    v25 = v6 - v3;
    v26 = v25 >> 5;
    v27 = v25 & 0x1F;
    if ((_DWORD)v10 == (_DWORD)v26)
    {
      v28 = masks[v7 & 0x1F];
      if ((v7 & 0x1F) != v27 + 1)
        v28 = masks[v27 + 1] & ~v28;
      v29 = v28 & v11;
      if (v29)
      {
        v30 = v6 - (v7 & 0xFFFFFFE0);
        v31 = __rbit32(v29);
LABEL_42:
        v36 = __clz(v31);
        result = v30 - v36;
        *a1 = v30 + ~v36;
        return result;
      }
      return 0;
    }
    v33 = v11 & ~masks[v7 & 0x1F];
    if (v33)
    {
      v30 = v6 - (v7 & 0xFFFFFFE0);
      v31 = __rbit32(v33);
      goto LABEL_42;
    }
    while (1)
    {
      v34 = v10 + 1;
      if (v10 + 1 >= v26)
        break;
      v35 = *(_DWORD *)(v9 + 4 + 4 * v10++);
      if (v35)
      {
        v30 = v6 - 32 * v34;
        v31 = __rbit32(v35);
        goto LABEL_42;
      }
    }
    v37 = masks[v27 + 1] & *(_DWORD *)(v9 + 4 * v26);
    if (!v37)
      return 0;
    v38 = v6 - (v25 & 0xFFFFFFE0);
    v39 = __clz(__rbit32(v37));
    result = v38 - v39;
    *a1 = result;
    if (v38 != v39)
      *a1 = v38 + ~v39;
  }
  return result;
}

uint64_t CIIndexSetHasIndex(uint64_t result, unsigned int a2)
{
  _DWORD *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  if (result)
  {
    v3 = (_DWORD *)result;
    if (*(_DWORD *)(result + 20) > a2)
      return 0;
    v4 = *(_DWORD *)(result + 24);
    v5 = v4 - a2;
    if (v4 < a2)
      return 0;
    v6 = *(_DWORD *)(result + 16);
    if (v6 <= -10)
      return (*(_DWORD *)(*(_QWORD *)(result + 40) + 4 * (v5 >> 5)) >> v5) & 1;
    if (v6 < 0)
    {
      if (v6 > 0xFFFFFFFD)
        return 0;
      v11 = *(_DWORD *)(result + 32);
      result = v11 == a2;
      if (v11 != a2 && v6 != -3)
      {
        v12 = v3[9];
        result = v12 == a2;
        if (v12 != a2 && v6 != -4)
        {
          v13 = v3[10];
          result = v13 == a2;
          if (v13 != a2 && v6 != -5)
          {
            v14 = v3[11];
            result = v14 == a2;
            if (v14 != a2 && v6 != -6)
            {
              v15 = v3[12];
              result = v15 == a2;
              if (v15 != a2 && v6 != -7)
              {
                v16 = v3[13];
                result = v16 == a2;
                if (v16 != a2 && v6 != -8)
                  return v3[14] == a2;
              }
            }
          }
        }
      }
    }
    else
    {
      v7 = binarySearchMap(result, a2);
      v8 = v3[9];
      if (v7 < v8 || (v9 = 0, v10 = v3[8], v7 < v10) && v7 >= v10 + v8 - v3[4])
        v9 = *(_DWORD *)(*((_QWORD *)v3 + 5) + 4 * v7) == a2;
      return v9 ^ (CFGetTypeID(v3) == __kCIIndexSetInvertedTypeID);
    }
  }
  return result;
}

uint64_t ContentIndexDocSetHasWeights(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    if (*(float *)(result + 12) == 0.0 && *(float *)(result + 16) == 0.0)
    {
      v2 = *(_DWORD *)(result + 48);
      if (v2 > 9)
        assert_invalid_doc_type((_DWORD *)result);
      if (((1 << v2) & 0x30F) != 0 || !*(_DWORD *)(result + 96))
      {
        return 0;
      }
      else
      {
        v3 = 0;
        do
        {
          result = ContentIndexDocSetHasWeights(*(_QWORD *)(*(_QWORD *)(v1 + 72) + 8 * v3));
          if ((result & 1) != 0)
            break;
          ++v3;
        }
        while (v3 < *(unsigned int *)(v1 + 96));
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

_DWORD *_CIIndexSetInitializeEnumeratorForRange(_DWORD *result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  v5 = result;
  v6 = result[5];
  if (result[6] >= a4)
    v7 = a4;
  else
    v7 = result[6];
  v8 = result[4];
  if (v6 <= a3)
    v6 = a3;
  *(_DWORD *)a2 = v7;
  *(_DWORD *)(a2 + 4) = v6;
  *(_QWORD *)(a2 + 16) = result;
  if (v8 < 1)
  {
    if ((v8 & 0x80000000) == 0 || v8 <= 0xFFFFFFF6)
      goto LABEL_11;
    if (v8 <= 0xFFFFFFFD)
    {
      if (v7 >= result[8])
      {
LABEL_11:
        *(_DWORD *)(a2 + 8) = 0;
        return result;
      }
      if (v8 != -3)
      {
        if (v7 >= result[9])
        {
          *(_DWORD *)(a2 + 8) = 1;
          return result;
        }
        if (v8 != -4)
        {
          if (v7 >= result[10])
          {
            *(_DWORD *)(a2 + 8) = 2;
            return result;
          }
          if (v8 != -5)
          {
            if (v7 >= result[11])
            {
              *(_DWORD *)(a2 + 8) = 3;
              return result;
            }
            if (v8 != -6)
            {
              if (v7 >= result[12])
              {
                *(_DWORD *)(a2 + 8) = 4;
                return result;
              }
              if (v8 != -7)
              {
                if (v7 >= result[13])
                {
                  *(_DWORD *)(a2 + 8) = 5;
                  return result;
                }
                if (v8 != -8 && v7 >= result[14])
                {
                  *(_DWORD *)(a2 + 8) = 6;
                  return result;
                }
              }
            }
          }
        }
      }
    }
    *(_DWORD *)(a2 + 8) = -2 - v8;
    return result;
  }
  result = (_DWORD *)binarySearchMap((uint64_t)result, v7);
  *(_DWORD *)(a2 + 8) = (_DWORD)result;
  if ((_DWORD)result == v5[9])
    *(_DWORD *)(a2 + 8) = v5[8] + (_DWORD)result - v5[4];
  return result;
}

void si_enqueue_work_inner_with_qos(uint64_t a1, uint64_t *a2, qos_class_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  NSObject *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  _opaque_pthread_t *v16;
  pthread_override_s *v17;
  dispatch_block_t v18;
  char *v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  _QWORD block[5];

  if (!a2)
  {
    v19 = __si_assert_copy_extra_521(-1);
    v20 = v19;
    v21 = "";
    if (v19)
      v21 = v19;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIScheduler.c", 513, "queue", v21);
    free(v20);
    if (__valid_fs(-1))
      v22 = 2989;
    else
      v22 = 3072;
    *(_DWORD *)v22 = -559038737;
    abort();
  }
  if (!a1 || (v9 = *a2) != 0 && (*(_DWORD *)(v9 + 88) || *(_BYTE *)(v9 + 48)))
  {
    ((void (*)(uint64_t, uint64_t))a4)(a5, 1);
  }
  else
  {
    v10 = (unsigned int *)(a1 + 112);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = a2[2];
    *(int64x2_t *)(a2 + 7) = vaddq_s64(*(int64x2_t *)(a2 + 7), vdupq_n_s64(1uLL));
    v13 = malloc_type_malloc(0x48uLL, 0x10A0040047F2C8DuLL);
    v13[4] = a5;
    v13[5] = 0;
    v13[6] = 0;
    v13[7] = a5 ^ a4;
    *v13 = a1;
    v13[1] = v9;
    v13[2] = a2;
    v13[3] = a4;
    v14 = *(_DWORD *)(a1 + 116) == 1 && (a2[7] & 0xF) == 0;
    *((_BYTE *)v13 + 64) = v14;
    if (a3 <= QOS_CLASS_USER_INITIATED)
      v15 = 25;
    else
      v15 = a3;
    if (gTurboMode)
      a3 = v15;
    if (*(_QWORD *)(v9 + 160) && *(_DWORD *)(v9 + 184) < a3)
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(v9 + 8));
      v16 = *(_opaque_pthread_t **)(v9 + 160);
      if (v16 && *(_DWORD *)(v9 + 184) < a3)
      {
        v17 = *(pthread_override_s **)(v9 + 176);
        *(_QWORD *)(v9 + 176) = pthread_override_qos_class_start_np(v16, a3, 0);
        *(_DWORD *)(v9 + 184) = a3;
        if (v17)
          pthread_override_qos_class_end_np(v17);
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(v9 + 8));
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __enqueue_work_with_qos_block_invoke;
    block[3] = &__block_descriptor_tmp_53;
    block[4] = v13;
    v18 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, a3, 0, block);
    dispatch_async(v12, v18);
    _Block_release(v18);
  }
}

uint64_t indexCopyDeleteDocIds(uint64_t a1, int a2, _QWORD *a3)
{
  CFIndex v6;
  _QWORD *v7;
  _QWORD *v8;
  const __CFAllocator *v9;
  __CFBitVector *Mutable;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  char v15;
  int v16;
  int v17;
  int v18;
  char *v20;
  char *v21;
  const char *v22;
  char *v23;
  const char *v24;

  if (a2)
    db_read_lock(a1 + 14464);
  v6 = *(unsigned int *)(a1 + 60);
  v7 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
  if (!v7)
  {
    v20 = __si_assert_copy_extra_2151(0, -1);
    v21 = v20;
    v22 = "";
    if (v20)
      v22 = v20;
    __message_assert("%s:%u: failed assertion '%s' %s ", "bit_vector.h", 41, "bv", v22);
LABEL_33:
    free(v21);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v8 = v7;
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v6 <= 128)
    v6 = 128;
  *v8 = 0;
  v8[1] = v6;
  Mutable = CFBitVectorCreateMutable(v9, v6);
  v8[2] = Mutable;
  CFBitVectorSetCount(Mutable, v6);
  if (!v8[2])
  {
    v23 = __si_assert_copy_extra_2151(0, -1);
    v21 = v23;
    v24 = "";
    if (v23)
      v24 = v23;
    __message_assert("%s:%u: failed assertion '%s' %s ", "bit_vector.h", 47, "bv->_cfbv", v24);
    goto LABEL_33;
  }
  v11 = *(unsigned int *)(a1 + 60);
  if (v11 < 2)
  {
    v12 = 0;
    goto LABEL_22;
  }
  v12 = 0;
  v13 = -1;
  v14 = 1;
  v15 = 6;
  v16 = 1;
  v17 = -1;
  do
  {
    if (*(_BYTE *)(a1 + 37))
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 14392) + v14) & 0xDF) == 0)
        goto LABEL_9;
    }
    else if (((*(_DWORD *)(*(_QWORD *)(a1 + 14392)
                          + (((3435973837u * (unint64_t)v14) >> 32) & 0xFFFFFFFC)) >> (v15 - 30 * (v14 / 5))) & 0x1F) == 0)
    {
LABEL_9:
      if (v13 == -1)
        v13 = v14;
      v12 = (v12 + 1);
      v17 = v14;
      goto LABEL_12;
    }
    if (v13 != -1)
    {
      bit_vector_set_bits((uint64_t)v8, v13, (v17 + v16 + 1));
      v11 = *(unsigned int *)(a1 + 60);
      v17 = -1;
      v13 = -1;
    }
LABEL_12:
    ++v14;
    v16 = -v13;
    v15 += 6;
  }
  while (v14 < v11);
  if (v13 != -1)
    bit_vector_set_bits((uint64_t)v8, v13, v17 - v13 + 1);
LABEL_22:
  if (a2)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 14464));
    v18 = *(_DWORD *)(a1 + 14660) - 1;
    *(_DWORD *)(a1 + 14660) = v18;
    if (!v18)
      db_rwlock_wakeup(a1 + 14464, 0, 0);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14464));
  }
  *a3 = v8;
  return v12;
}

uint64_t pushPrefixTerms(uint64_t result, uint64_t a2, char *__src, unsigned int a4, const void *a5, uint64_t a6, int a7, int a8, char a9)
{
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  BOOL v25;
  char *v26;
  size_t v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  BOOL v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  const char *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char v56;
  unsigned int v57;
  unsigned int v58;
  BOOL v60;
  int64_t v61;
  char *v62;
  char *v63;
  char *v64;
  const char *v65;
  uint64_t v68;
  _OWORD __dst[2];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return result;
  v68 = result;
  memset(__dst, 0, sizeof(__dst));
  v14 = *__src;
  v15 = utf8_byte_length(unsigned char)::utf8_len_table[v14 >> 4];
  v16 = (unsigned __int8 *)&__src[v15];
  if (v15 >= a2)
  {
    if (v15 != a2)
    {
      v64 = __si_assert_copy_extra_268();
      v47 = v64;
      v65 = "";
      if (v64)
        v65 = v64;
      __message_assert("%s:%u: failed assertion '%s' %s ", "TermUpdateSet.c", 3026, "ptr==end", v65);
      goto LABEL_91;
    }
  }
  else
  {
    if (((char)*v16 & 0x80000000) == 0)
      goto LABEL_18;
    v17 = *v16;
    v18 = v17 >> 4;
    v19 = utf8_byte_length(unsigned char)::utf8_len_table[v17 >> 4];
    v20 = v17 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v19];
    if ((~(_BYTE)v18 & 0xC) != 0)
      goto LABEL_11;
    v21 = v19 <= 2 ? 2 : v19;
    v22 = v21 - 1;
    v23 = &__src[v15 + 1];
    do
    {
      v24 = *v23++;
      v20 = v24 & 0x3F | (v20 << 6);
      --v22;
    }
    while (v22);
    if (v20 < 0x10000)
    {
LABEL_11:
      v25 = (v20 - 12441) >= 4 && (v20 - 65438) >= 2;
      if (v25 && !unicode_combinable((unsigned __int16)v20))
        goto LABEL_18;
LABEL_15:
      v16 += v19;
      goto LABEL_18;
    }
    v34 = v20 - 917760;
    v35 = v20 - 127995;
    if (v34 < 0xF0 || v35 <= 4)
      goto LABEL_15;
  }
LABEL_18:
  v26 = &__src[a2];
  v27 = v16 - (unsigned __int8 *)__src;
  if (v16 >= (unsigned __int8 *)v26)
    goto LABEL_44;
  v28 = *v16;
  if (v28 != 45)
  {
    if (v28 == 239)
    {
      if (v16[1] != 188 || v16[2] != 189)
        goto LABEL_44;
    }
    else if (v28 != 226 || v16[1] != 128 || (v16[2] & 0xFE) != 0x90)
    {
      goto LABEL_44;
    }
  }
  if ((v14 & 0x80) != 0)
  {
    v29 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v15] & v14;
    if ((~(v14 >> 4) & 0xC) != 0)
    {
      LODWORD(v14) = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v15] & v14;
    }
    else
    {
      if (v15 <= 2)
        v30 = 2;
      else
        v30 = v15;
      v31 = v30 - 1;
      v32 = __src + 1;
      do
      {
        v33 = *v32++;
        LODWORD(v14) = v33 & 0x3F | (v29 << 6);
        v29 = v14;
        --v31;
      }
      while (v31);
    }
  }
  if (((1 << u_charType(v14)) & 0xE3E) != 0)
    v16 += utf8_byte_length(unsigned char)::utf8_len_table[(unint64_t)*v16 >> 4];
LABEL_44:
  if (v16 >= (unsigned __int8 *)v26 || (v37 = *v16, v37 < 2))
  {
    memcpy(__dst, __src, v27);
    if (a9)
    {
      v42 = (char *)__dst + v27;
      *v42 = 1;
      v42[1] = a9;
      v27 += 3;
      v42[2] = 5;
    }
    memcpy((char *)__dst + v27, a5, a4);
    v43 = v27 + a4;
    v44 = a7;
    v45 = a6;
    v41 = v68;
    return pushPropertyTerm(v41, v43, (unsigned __int8 *)__dst, v45, v44, a8, 0);
  }
  v38 = utf8_byte_length(unsigned char)::utf8_len_table[v37 >> 4];
  v39 = &v16[v38];
  v40 = &v16[v38] == (unsigned __int8 *)v26;
  if (&v16[v38] >= (unsigned __int8 *)v26)
  {
    v39 = (unsigned __int8 *)v26;
    v41 = v68;
    if (v40)
      goto LABEL_77;
    v46 = __si_assert_copy_extra_268();
    v47 = v46;
    v48 = "";
    if (v46)
      v48 = v46;
    __message_assert("%s:%u: failed assertion '%s' %s ", "TermUpdateSet.c", 3044, "ptr==end", v48);
LABEL_91:
    free(v47);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (((char)*v39 & 0x80000000) == 0)
  {
    v41 = v68;
    goto LABEL_77;
  }
  v49 = *v39;
  v50 = v49 >> 4;
  v51 = utf8_byte_length(unsigned char)::utf8_len_table[v49 >> 4];
  v52 = v49 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v51];
  if ((~(_BYTE)v50 & 0xC) != 0)
  {
    v41 = v68;
    goto LABEL_72;
  }
  if (v51 <= 2)
    v53 = 2;
  else
    v53 = v51;
  v54 = v53 - 1;
  v55 = (char *)&v16[v38 + 1];
  do
  {
    v56 = *v55++;
    v52 = v56 & 0x3F | (v52 << 6);
    --v54;
  }
  while (v54);
  v41 = v68;
  if (v52 < 0x10000)
  {
LABEL_72:
    v60 = (v52 - 12441) >= 4 && (v52 - 65438) >= 2;
    if (!v60 || unicode_combinable((unsigned __int16)v52))
      goto LABEL_76;
    goto LABEL_77;
  }
  v57 = v52 - 917760;
  v58 = v52 - 127995;
  if (v57 < 0xF0 || v58 <= 4)
LABEL_76:
    v39 += v51;
LABEL_77:
  v61 = v39 - (unsigned __int8 *)__src;
  memcpy(__dst, __src, v39 - (unsigned __int8 *)__src);
  if (a9)
  {
    v62 = (char *)__dst + v61;
    *v62 = 1;
    v62[1] = a9;
    v61 += 3;
    v62[2] = 5;
  }
  v44 = a7;
  memcpy((char *)__dst + v61, a5, a4);
  v45 = a6;
  result = pushPropertyTerm(v41, v61 + a4, (unsigned __int8 *)__dst, a6, a7, a8, 0);
  if (a8 || (_DWORD)result)
  {
    if (a9)
    {
      v63 = (char *)__dst + v27;
      *v63 = 1;
      v63[1] = a9;
      v27 += 3;
      v63[2] = 5;
    }
    memcpy((char *)__dst + v27, a5, a4);
    v43 = v27 + a4;
    return pushPropertyTerm(v41, v43, (unsigned __int8 *)__dst, v45, v44, a8, 0);
  }
  return result;
}

uint64_t _TermTrieWalkFatWithOptions(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  int v17;
  char *v18;
  char *v19;
  const char *v20;

  v13 = (_QWORD *)result;
  if (a6)
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 16))(a6, result, 1);
  if (a5 && *v13)
    result = (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
  v14 = (a2 + 1);
  for (i = 1; i != 257; ++i)
  {
    v16 = v13[i];
    v17 = v16 & 3;
    switch(v17)
    {
      case 3:
        result = _TermTrieWalkListWithOptions(v16 & 0xFFFFFFFFFFFFFFFCLL, a3, a4, a5, a6, a7);
        break;
      case 2:
        result = _TermTrieWalkCompactWithOptions(v16 & 0xFFFFFFFFFFFFFFFCLL, v14, a3, a4, a5, a6, a7);
        break;
      case 1:
        result = _TermTrieWalkFatWithOptions(v16 & 0xFFFFFFFFFFFFFFFCLL, v14, a3, a4, a5, a6, a7);
        break;
      default:
        if (v16)
        {
          v18 = __si_assert_copy_extra_268();
          v19 = v18;
          v20 = "";
          if (v18)
            v20 = v18;
          __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 744, "level->follows[i]==0", v20);
          free(v19);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        break;
    }
  }
  if (a7)
    return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(a7 + 16))(a7, v13, 1);
  return result;
}

uint64_t _getPropertyTokenCallback(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  getPropertyTokenCallback(a1, a2, a4);
  return 0;
}

void getPropertyTokenCallback(unsigned __int16 *a1, uint64_t a2, uint64_t a3)
{
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _QWORD **v12;
  _QWORD **v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26[2];
  unsigned __int8 __dst[1044];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return;
  bzero(__dst, 0x414uLL);
  v6 = *(unsigned int *)(a3 + 32);
  memcpy(__dst, *(const void **)(a3 + 24), v6);
  *(_QWORD *)v26 = 0;
  if (utf8_encodestr(a1, 2 * a2, &__dst[v6], v26, 1028))
    return;
  v7 = *(_QWORD *)v26;
  if (!*(_QWORD *)(a3 + 64))
  {
    v8 = 0;
    if (*(_BYTE *)(a3 + 74))
      goto LABEL_7;
    goto LABEL_6;
  }
  *(_WORD *)&__dst[*(_QWORD *)v26 + *(unsigned int *)(a3 + 32)] = 769;
  v8 = 2;
  if (!*(_BYTE *)(a3 + 74))
LABEL_6:
    pushPropertyTerm(*(_QWORD *)a3, v8 + v7 + *(unsigned int *)(a3 + 32), __dst, *(_QWORD *)(a3 + 8), *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20), 1);
LABEL_7:
  v9 = *(unsigned int *)(a3 + 48);
  if ((_DWORD)v9)
  {
    v10 = *(unsigned int *)(a3 + 32);
    v11 = &__dst[v10];
    memcpy(&__dst[v10 + v7], *(const void **)(a3 + 40), *(unsigned int *)(a3 + 48));
    if (*(_QWORD *)(a3 + 64))
    {
      __dst[v7 + v9 + v10] = 3;
      v8 = 1;
    }
    v12 = *(_QWORD ***)(a3 + 56);
    if (v12)
    {
      if (!*(_BYTE *)(a3 + 74))
        pushPropertyTermForWildCard(v12, v7 + v9 + v8, v11, *(_DWORD *)(a3 + 20));
      if (*(_BYTE *)(a3 + 73))
      {
        v13 = *(_QWORD ***)(a3 + 56);
        v14 = (char *)&__dst[*(unsigned int *)(a3 + 32)];
        v15 = *(_DWORD *)(a3 + 20);
        if (*(_QWORD *)(a3 + 64))
          pushPrefixTermsForWildCard(v13, v7, v14, 3u, "\x01\x04\x03", v15);
        else
          pushPrefixTermsForWildCard(v13, v7, v14, 2u, "\x01\x04", v15);
      }
    }
    else if ((*(_BYTE *)(a3 + 74)
            || pushPropertyTerm(*(_QWORD *)a3, (v7 + v9 + v8), v11, *(_QWORD *)(a3 + 8), *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20), 1))&& *(_BYTE *)(a3 + 73))
    {
      v16 = (char *)&__dst[*(unsigned int *)(a3 + 32)];
      v17 = *(_QWORD *)a3;
      v18 = *(_QWORD *)(a3 + 8);
      v19 = *(_DWORD *)(a3 + 16);
      v20 = *(_DWORD *)(a3 + 20);
      if (*(_QWORD *)(a3 + 64))
        pushPrefixTerms(v17, v7, v16, 3u, "\x01\x04\x03", v18, v19, v20, 0);
      else
        pushPrefixTerms(v17, v7, v16, 2u, "\x01\x04", v18, v19, v20, 0);
    }
  }
  if (*(_BYTE *)(a3 + 72) && *(_BYTE *)(a3 + 73) && !*(_QWORD *)(a3 + 56))
  {
    v21 = (char *)&__dst[*(unsigned int *)(a3 + 32)];
    v22 = *(_QWORD *)a3;
    v23 = *(_QWORD *)(a3 + 8);
    v24 = *(_DWORD *)(a3 + 16);
    v25 = *(_DWORD *)(a3 + 20);
    if (*(_QWORD *)(a3 + 64))
      pushPrefixTerms(v22, v7, v21, 3u, "\x01\x05\x03", v23, v24, v25, 0);
    else
      pushPrefixTerms(v22, v7, v21, 2u, "\x01\x05", v23, v24, v25, 0);
  }
}

uint64_t _TermTrieWalkCompactWithOptions(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int8x8_t *v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  int8x8_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint8x8_t v21;
  uint8x8_t v22;
  uint8x8_t v23;
  uint8x8_t v24;
  int8x8_t v25;
  int v26;
  char *v27;
  char *v28;
  const char *v29;
  unsigned int v30;

  v13 = (int8x8_t *)result;
  if (a6)
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a6 + 16))(a6, result, 2);
  if (a5 && *(_QWORD *)v13)
    result = (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
  v14 = v13[5].u8[0];
  if (v13[5].i8[0])
  {
    v15 = 0;
    v16 = 0;
    v17 = a2;
    v18 = v13 + 1;
    v30 = v17 + 1;
    while (1)
    {
      if ((((unsigned __int32)v13[1].i32[v15 >> 5] >> v15) & 1) == 0)
        goto LABEL_23;
      v19 = 0;
      v20 = v15 >> 6;
      if (v15 >> 6 == 1)
        goto LABEL_14;
      if (v20 == 2)
        goto LABEL_13;
      if (v20 == 3)
        break;
LABEL_15:
      v24 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v18[v20] & ~(-1 << v15)));
      v24.i16[0] = vaddlv_u8(v24);
      v25 = v13[v24.u32[0] + 6 + v19];
      v26 = v25.i8[0] & 3;
      switch(v26)
      {
        case 3:
          result = _TermTrieWalkListWithOptions(*(_QWORD *)&v25 & 0xFFFFFFFFFFFFFFFCLL, a3, a4, a5, a6, a7);
          break;
        case 2:
          result = _TermTrieWalkCompactWithOptions(*(_QWORD *)&v25 & 0xFFFFFFFFFFFFFFFCLL, v30, a3, a4, a5, a6, a7);
          break;
        case 1:
          result = _TermTrieWalkFatWithOptions(*(_QWORD *)&v25 & 0xFFFFFFFFFFFFFFFCLL, v30, a3, a4, a5, a6, a7);
          break;
        default:
          if (v25)
          {
            v27 = __si_assert_copy_extra_268();
            v28 = v27;
            v29 = "";
            if (v27)
              v29 = v27;
            __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 784, "level->follows[pos]==0", v29);
            free(v28);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          goto LABEL_23;
      }
      ++v16;
LABEL_23:
      if (v15 <= 0xFE)
      {
        ++v15;
        if (v16 < v14)
          continue;
      }
      goto LABEL_25;
    }
    v21 = (uint8x8_t)vcnt_s8(v13[3]);
    v21.i16[0] = vaddlv_u8(v21);
    v19 = v21.u32[0];
LABEL_13:
    v22 = (uint8x8_t)vcnt_s8(v13[2]);
    v22.i16[0] = vaddlv_u8(v22);
    v19 += v22.u32[0];
LABEL_14:
    v23 = (uint8x8_t)vcnt_s8(*v18);
    v23.i16[0] = vaddlv_u8(v23);
    v19 += v23.u32[0];
    goto LABEL_15;
  }
LABEL_25:
  if (a7)
    return (*(uint64_t (**)(uint64_t, int8x8_t *, uint64_t))(a7 + 16))(a7, v13, 2);
  return result;
}

uint64_t _TermTrieWalkListWithOptions(uint64_t result, char a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  const char *v22;
  _OWORD v23[8];
  uint64_t v24;

  v10 = (uint64_t *)result;
  v24 = *MEMORY[0x1E0C80C00];
  if (a5)
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, result, 3);
  if (a4)
  {
    if (a3)
    {
      result = (*(uint64_t (**)(uint64_t, uint64_t *))(a4 + 16))(a4, v10);
      goto LABEL_19;
    }
    memset(v23, 0, sizeof(v23));
    if ((a2 & 1) != 0)
    {
      v11 = 0;
      v12 = (uint64_t)v10;
      while (1)
      {
        if (v12)
        {
          do
          {
            while (1)
            {
              v14 = *(_QWORD *)v12 & 0x7FFFFFFFFFFFFFFFLL;
              if (!v14)
                break;
              *((_QWORD *)v23 + v11) = v12;
              if (*(unsigned __int16 *)(v12 + 32) > 0x414u)
              {
                v20 = __si_assert_copy_extra_268();
                v21 = v20;
                v22 = "";
                if (v20)
                  v22 = v20;
                __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 846, "l->data.termLen <= (1024+20)", v22);
                free(v21);
                if (__valid_fs(-1))
                {
                  MEMORY[0xBAD] = -559038737;
                  abort();
                }
                MEMORY[0xC00] = -559038737;
                abort();
              }
              ++v11;
              v12 = v14;
            }
            v13 = *(_QWORD *)(v12 + 8) & 0x7FFFFFFFFFFFFFFFLL;
            result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, v12);
            v12 = v13;
          }
          while (v13);
        }
        if (v11 < 1)
          break;
        v12 = *(_QWORD *)(*((_QWORD *)v23 + (v11 - 1)) + 8) & 0x7FFFFFFFFFFFFFFFLL;
        result = (*(uint64_t (**)(uint64_t))(a4 + 16))(a4);
        --v11;
        if (!v12)
        {
LABEL_18:
          if (!v11)
            goto LABEL_19;
        }
      }
      v12 = 0;
      goto LABEL_18;
    }
    v15 = 0;
    v16 = v10;
    do
    {
      if (v16)
      {
        do
        {
          v19 = *v16;
          if ((v16[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
            *((_QWORD *)v23 + v15++) = v16[1] & 0x7FFFFFFFFFFFFFFFLL;
          v18 = v19 & 0x7FFFFFFFFFFFFFFFLL;
          result = (*(uint64_t (**)(uint64_t))(a4 + 16))(a4);
          v16 = (uint64_t *)v18;
        }
        while (v18);
      }
      v17 = __OFSUB__(v15--, 1);
      if (v15 < 0 != v17)
        break;
      v16 = (uint64_t *)*((_QWORD *)v23 + v15);
    }
    while (v16);
  }
LABEL_19:
  if (a6)
    return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(a6 + 16))(a6, v10, 3);
  return result;
}

uint64_t ___hashTableIterate_block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v4 = *(unsigned int *)(v3 + 24);
  *(_DWORD *)(v3 + 24) = v4 + 1;
  *(_QWORD *)(v2 + 8 * v4) = a2 + 16;
  return result;
}

uint64_t pushPropertyTerm(uint64_t a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6, int a7)
{
  int v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  int v20;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  int *v27;
  char v29;

  v11 = -1759636613;
  if ((a2 & 0x80000000) == 0)
    v12 = a2;
  else
    v12 = a2 + 3;
  v13 = &a3[v12 & 0xFFFFFFFC];
  if ((a2 + 3) >= 7)
  {
    v16 = -(v12 >> 2);
    v17 = -1789642873;
    v18 = 718793509;
    do
    {
      v17 = 5 * v17 + 2071795100;
      v18 = 5 * v18 + 1808688022;
      HIDWORD(v19) = v17 * *(_DWORD *)&v13[4 * v16];
      LODWORD(v19) = HIDWORD(v19);
      v20 = (v19 >> 21) * v18;
      HIDWORD(v19) = v11;
      LODWORD(v19) = v11;
      v11 = v20 ^ (5 * (v19 >> 19) + 1390208809);
    }
    while (!__CFADD__(v16++, 1));
    v15 = 5 * v17 + 2071795100;
    v14 = 5 * v18 + 1808688022;
  }
  else
  {
    v14 = 1107688271;
    v15 = 1713515327;
  }
  v22 = 0;
  v23 = a2 & 3;
  switch(v23)
  {
    case 1:
      goto LABEL_15;
    case 2:
LABEL_14:
      v22 |= v13[1] << 8;
LABEL_15:
      HIDWORD(v24) = (v22 ^ *v13) * v15;
      LODWORD(v24) = HIDWORD(v24);
      v25 = (v24 >> 21) * v14;
      HIDWORD(v24) = v11;
      LODWORD(v24) = v11;
      v11 = v25 ^ (5 * (v24 >> 19) + 1390208809);
      break;
    case 3:
      v22 = v13[2] << 16;
      goto LABEL_14;
  }
  v26 = -1028477387 * ((-2048144789 * (v11 ^ a2)) ^ ((-2048144789 * (v11 ^ a2)) >> 13));
  v29 = 0;
  v27 = (int *)pushTermTable(*(_QWORD *)(a1 + 24) + 16, **(_QWORD **)(a1 + 24), v26 ^ HIWORD(v26), a2, a3, a7, &v29);
  return pushTermData(a1, v27, a4, a5, v29, a6, 1u);
}

uint64_t pushTermTable(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unsigned __int8 *a5, int a6, _BYTE *a7)
{
  int v8;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t result;
  unint64_t v15;
  int v16;
  int v17;

  *a7 = 0;
  if (!a2)
    return TermTrieResolve(a1);
  v8 = a3;
  v10 = (a3 >> 16) & 0x7FF;
  v11 = (unsigned int *)(a2 + 4 * v10 + 0x4000);
  v12 = *(_QWORD *)(a2 + 8 * v10);
  v13 = *v11;
  if ((*v11 & 0x80000000) != 0)
  {
    if (((v13 ^ a3) & 0x7FFFFFFF) == 0 && *(unsigned __int16 *)(v12 + 16) == a4)
    {
      if (a4)
      {
        if (*(unsigned __int8 *)(v12 + 18) != *(unsigned __int8 *)(a1 + 2144 + *a5))
          goto LABEL_16;
        v15 = 0;
        while (a4 - 1 != v15)
        {
          v16 = *(unsigned __int8 *)(v12 + v15 + 19);
          v17 = *(unsigned __int8 *)(a1 + 2144 + a5[++v15]);
          if (v16 != v17)
          {
            if (v15 < a4)
              goto LABEL_3;
            return *(_QWORD *)(a2 + 8 * v10);
          }
        }
      }
      return *(_QWORD *)(a2 + 8 * v10);
    }
  }
  else
  {
LABEL_3:
    if ((v13 & 0x80000000) == 0 && (a6 & 1) != 0)
    {
      result = TermTrieResolve(a1);
LABEL_18:
      *(_QWORD *)(a2 + 8 * v10) = result;
      *v11 = v8 | 0x80000000;
      return result;
    }
  }
LABEL_16:
  result = TermTrieResolve(a1);
  if (a6 && *(_QWORD *)(v12 + 4) < *(_QWORD *)(result + 4))
    goto LABEL_18;
  return result;
}

uint64_t TermTrieResolve(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  size_t v3;
  _BYTE *v4;
  int v5;
  int8x8_t v6;
  int v7;
  size_t v8;
  uint64_t v9;
  int8x8_t *v10;
  unsigned __int16 v11;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  int8x8_t v20;
  uint8x8_t v21;
  uint64_t v24;
  unint64_t i;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  int8x8_t v30;
  uint64_t v31;
  int v32;
  int8x8_t *v33;
  uint8x8_t v34;
  uint64_t v35;
  uint8x8_t v36;
  unsigned int v37;
  uint8x8_t v38;
  unsigned int v39;
  uint8x8_t v40;
  int8x8_t *v43;
  int8x8_t v44;
  int8x8_t v45;
  uint64_t v46;
  int8x8_t *v47;
  unint64_t v48;
  uint8x8_t v49;
  uint8x8_t v50;
  uint8x8_t v51;
  int8x8_t *v52;
  int8x8_t v53;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  int8x8_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int64x2_t *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v76;
  unsigned int v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t *v80;
  uint64_t v81;
  int8x8_t *v82;
  uint64_t v83;
  int8x8_t *v84;
  int8x8_t *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  const char *v89;
  char *v90;
  const char *v91;
  char *v92;
  const char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char *v97;
  const char *v98;
  unsigned int v99;
  char *v100;
  _QWORD *v101;
  unint64_t j;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  uint64_t v109;
  char *v111;
  const char *v112;
  unsigned int v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t *v116;
  int64x2_t v117;
  unsigned __int8 *v118;
  int8x8_t *v119;
  _QWORD **v120;
  _QWORD __src[257];
  unsigned int v122;
  int v123;
  uint64_t v124;
  _QWORD v125[512];
  _QWORD v126[20];

  v1 = MEMORY[0x1E0C80A78](a1);
  v126[17] = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)v3)
  {
    v100 = __si_assert_copy_extra_268();
    if (__si_error_str_key)
      pthread_getspecific(__si_error_str_key);
    __message_assert("%s:%u: failed assertion '%s' %s invalid length for %s");
    goto LABEL_134;
  }
  v7 = v5;
  v8 = v3;
  v9 = v1;
  v114 = v4;
  v10 = 0;
  v11 = 0;
  _X26 = v1 + 16;
  v124 = 0;
  v13 = 1;
  v123 = 1;
  v118 = v2;
  v120 = (_QWORD **)(v1 + 8);
  while (2)
  {
    v14 = &v2[v11];
    v116 = (uint64_t *)_X26;
LABEL_5:
    if (v13 == 2)
    {
      if ((_DWORD)v8 == v11)
      {
        v86 = *v116;
        if (*v116)
          return v86 + 16;
        v86 = (uint64_t)_TermListEntryCreate(v9, v118, v8, v7);
        *v116 = v86;
        goto LABEL_101;
      }
      v15 = v14;
      if (v7)
        v15 = (unsigned __int8 *)(v9 + *v14 + 2144);
      v16 = *v15;
      if (((*(_DWORD *)(_X26 + ((v16 >> 3) & 0x1C) + 8) >> v16) & 1) != 0)
      {
        v46 = 0;
        v47 = (int8x8_t *)(_X26 + 8);
        v48 = v16 >> 6;
        if ((v16 >> 6) == 1)
        {
          v2 = v118;
          goto LABEL_63;
        }
        v2 = v118;
        if ((_DWORD)v48 == 2)
          goto LABEL_61;
        if ((_DWORD)v48 == 3)
        {
          v49 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(_X26 + 24));
          v49.i16[0] = vaddlv_u8(v49);
          v46 = v49.u32[0];
LABEL_61:
          v50 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(_X26 + 16));
          v50.i16[0] = vaddlv_u8(v50);
          v46 += v50.u32[0];
LABEL_63:
          v51 = (uint8x8_t)vcnt_s8(*v47);
          v51.i16[0] = vaddlv_u8(v51);
          v46 += v51.u32[0];
        }
        v6 = vcnt_s8((int8x8_t)(*(_QWORD *)&v47[v48] & ~(-1 << v16)));
        v6.i16[0] = vaddlv_u8((uint8x8_t)v6);
        v52 = (int8x8_t *)(_X26 + 8 * (v6.u32[0] + v46));
        v53 = v52[6];
        v10 = v52 + 6;
        v44 = v53;
        v13 = v53.i8[0] & 3;
        v123 = v13;
        _X10 = (char *)&__src[225] + 5;
        __asm { PRFUM           #0x14, [X10,#0xFF] }
LABEL_65:
        _X26 = *(_QWORD *)&v44 & 0xFFFFFFFFFFFFFFFCLL;
        __asm { PRFM            #0x14, [X26] }
        ++v11;
        continue;
      }
      v17 = *(unsigned __int8 *)(_X26 + 41);
      if (*(unsigned __int8 *)(_X26 + 40) < v17)
      {
        v86 = (uint64_t)_TermListEntryCreate(v9, v118, v8, v7);
        *v114 = 1;
        *(_QWORD *)(_X26 + 8 * TermTrieCompactSetFollows((int8x8_t *)_X26, v16) + 48) = v86 | 3;
        goto LABEL_159;
      }
      if (v17 <= 0x1F)
      {
        v18 = (unint64_t)_term_trie_compact_alloc(v9, 2 * (v17 & 0x7F), v6);
        memcpy((void *)v18, (const void *)_X26, 8 * *(unsigned __int8 *)(_X26 + 41) + 48);
        *(_BYTE *)(v18 + 41) = 2 * *(_BYTE *)(_X26 + 41);
        v19 = __clz(__rbit32(*(unsigned __int8 *)(_X26 + 41)));
        v20.i32[0] = *(unsigned __int8 *)(_X26 + 41);
        v21 = (uint8x8_t)vcnt_s8(v20);
        v21.i16[0] = vaddlv_u8(v21);
        if (v21.i32[0] == 1 && v19 >= 2 && v19 < 6)
        {
          OSAtomicEnqueue((OSQueueHead *)(v9 + 16 * (v19 - 2) + 2080), (void *)_X26, 0);
          *v10 = (int8x8_t)(v18 | 2);
          v13 = 2;
          goto LABEL_4;
        }
LABEL_123:
        v97 = __si_assert_copy_extra_268();
        v88 = v97;
        v98 = "";
        if (v97)
          v98 = v97;
        __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 123, "__builtin_popcount(compactLevel->size)==1 && slot > 1 && slot <= 5", v98);
        goto LABEL_112;
      }
      v24 = (uint64_t)*v120;
      for (i = atomic_load(*v120 + 1); ; i = v27)
      {
        v18 = (i + 7) & 0xFFFFFFFFFFFFFFF8;
        if (v18 + 2064 >= *(_QWORD *)(v24 + 16))
          break;
LABEL_23:
        v26 = (unint64_t *)(v24 + 8);
        while (1)
        {
          v27 = __ldaxr(v26);
          if (v27 != i)
            break;
          if (!__stlxr(v18 + 2056, v26))
            goto LABEL_31;
        }
        __clrex();
      }
      while (1)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&_slablock);
        v24 = (uint64_t)*v120;
        v28 = *v120 + 1;
        v29 = atomic_load(v28);
        if (((v29 + 7) & 0xFFFFFFFFFFFFFFF8) + 2064 >= *(_QWORD *)(v24 + 16))
          break;
        os_unfair_lock_unlock((os_unfair_lock_t)&_slablock);
        i = atomic_load(v28);
        v18 = (i + 7) & 0xFFFFFFFFFFFFFFF8;
        if (v18 + 2064 < *(_QWORD *)(v24 + 16))
          goto LABEL_23;
      }
      v18 = (unint64_t)slab_new_slab(v120, 0x808uLL, 244);
      os_unfair_lock_unlock((os_unfair_lock_t)&_slablock);
LABEL_31:
      bzero((void *)v18, 0x808uLL);
      v31 = 0;
      v32 = 0;
      v33 = (int8x8_t *)(_X26 + 8);
      *(_QWORD *)v18 = *(_QWORD *)_X26;
      while (1)
      {
        if (v32 >= *(unsigned __int8 *)(_X26 + 40))
        {
LABEL_42:
          v39 = __clz(__rbit32(*(unsigned __int8 *)(_X26 + 41)));
          v30.i32[0] = *(unsigned __int8 *)(_X26 + 41);
          v40 = (uint8x8_t)vcnt_s8(v30);
          v40.i16[0] = vaddlv_u8(v40);
          if (v40.i32[0] != 1 || v39 < 2 || v39 >= 6)
            goto LABEL_123;
          OSAtomicEnqueue((OSQueueHead *)(v9 + 16 * (v39 - 2) + 2080), (void *)_X26, 0);
          *v10 = (int8x8_t)(v18 | 1);
          v13 = 1;
          v123 = 1;
LABEL_4:
          _X26 = v18;
          goto LABEL_5;
        }
        if (((*(_DWORD *)(_X26 + 4 * (v31 >> 5) + 8) >> v31) & 1) != 0)
          break;
LABEL_35:
        if (++v31 == 256)
          goto LABEL_42;
      }
      v35 = 0;
      v37 = v31 >> 6;
      if (v31 >> 6 != 1)
      {
        if (v37 != 2)
        {
          if (v37 != 3)
            goto LABEL_34;
          v38 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(_X26 + 24));
          v38.i16[0] = vaddlv_u8(v38);
          v35 = v38.u32[0];
        }
        v34 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(_X26 + 16));
        v34.i16[0] = vaddlv_u8(v34);
        v35 += v34.u32[0];
      }
      v36 = (uint8x8_t)vcnt_s8(*v33);
      v36.i16[0] = vaddlv_u8(v36);
      v35 += v36.u32[0];
LABEL_34:
      v30 = vcnt_s8((int8x8_t)(*(_QWORD *)&v33[v37] & ~(-1 << v31)));
      v30.i16[0] = vaddlv_u8((uint8x8_t)v30);
      *(_QWORD *)(v18 + 8 * v31 + 8) = *(_QWORD *)(_X26 + 8 * (v30.u32[0] + v35) + 48);
      ++v32;
      goto LABEL_35;
    }
    break;
  }
  if (v13 != 3)
  {
    if (v13 == 1)
    {
      if ((_DWORD)v8 != v11)
      {
        if (v7)
          v14 = (unsigned __int8 *)(v9 + *v14 + 2144);
        v43 = (int8x8_t *)(_X26 + 8 * *v14);
        v45 = v43[1];
        v10 = v43 + 1;
        v44 = v45;
        if (!*(_QWORD *)&v45)
        {
          v86 = (uint64_t)_TermListEntryCreate(v9, v118, v8, v7);
          *v114 = 1;
          *v10 = (int8x8_t)(v86 | 3);
          goto LABEL_159;
        }
        v13 = v44.i8[0] & 3;
        v123 = v13;
        v2 = v118;
        goto LABEL_65;
      }
      v86 = *(_QWORD *)_X26;
      if (*(_QWORD *)_X26)
        return v86 + 16;
      v86 = (uint64_t)_TermListEntryCreate(v9, v118, v8, v7);
      *(_QWORD *)_X26 = v86;
LABEL_101:
      *v114 = 1;
      goto LABEL_159;
    }
LABEL_167:
    v100 = __si_assert_copy_extra_268();
    goto LABEL_133;
  }
  v122 = 0;
  v60 = _RBInsert(v9, _X26 & 0x7FFFFFFFFFFFFFFFLL, v118, 0, v8, v114, &v122, v11, &v124, v7);
  v61 = v124;
  if (!v124)
    goto LABEL_167;
  v62 = v60 & 0x7FFFFFFFFFFFFFFFLL;
  *v10 = (int8x8_t)(v60 & 0x7FFFFFFFFFFFFFFCLL | 3);
  v63 = v122;
  if (v122 < 6)
    goto LABEL_156;
  v113 = v122;
  v115 = v61;
  bzero(v125, 0x1000uLL);
  v64 = 512;
  v122 = 512;
  v117 = vdupq_n_s64(0x8000000000000000);
  while (2)
  {
    bzero(__src, 0x808uLL);
    v65 = 0;
    v66 = 0;
    memset(v126, 0, 128);
    v67 = *(int8x8_t *)v117.i8;
    do
    {
      do
      {
        while (1)
        {
          if (v62)
          {
            do
            {
              while (1)
              {
                v69 = *(_QWORD *)v62 & 0x7FFFFFFFFFFFFFFFLL;
                if (!v69)
                  break;
                v126[v65] = v62;
                if (v65 >= 14)
                {
                  v87 = __si_assert_copy_extra_268();
                  v88 = v87;
                  v89 = "";
                  if (v87)
                    v89 = v87;
                  __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 322, "depth<15", v89);
                  goto LABEL_112;
                }
                if (*(unsigned __int16 *)(v62 + 32) >= 0x415u)
                {
                  v90 = __si_assert_copy_extra_268();
                  v88 = v90;
                  v91 = "";
                  if (v90)
                    v91 = v90;
                  __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 323, "l->data.termLen <= (1024+20)", v91);
                  goto LABEL_112;
                }
                ++v65;
                v62 = v69;
              }
              if (v66 >= v64)
              {
                v92 = __si_assert_copy_extra_268();
                v88 = v92;
                v93 = "";
                if (v92)
                  v93 = v92;
                __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 326, "count<size", v93);
LABEL_112:
                free(v88);
                if (__valid_fs(-1))
                  v94 = 2989;
                else
                  v94 = 3072;
                *(_DWORD *)v94 = -559038737;
                abort();
              }
              v68 = *(_QWORD *)(v62 + 8);
              v125[v66++] = v62;
              *(int64x2_t *)v62 = v117;
              v62 = v68 & 0x7FFFFFFFFFFFFFFFLL;
            }
            while ((v68 & 0x7FFFFFFFFFFFFFFFLL) != 0);
          }
          v70 = v65 - 1;
          if (v65 >= 1)
            break;
          v62 = 0;
          if (!v65)
            goto LABEL_83;
        }
        if (v66 >= v64)
          goto LABEL_132;
        v71 = (int64x2_t *)v126[v70];
        v126[v65] = 0;
        v62 = v71->i64[1] & 0x7FFFFFFFFFFFFFFFLL;
        v125[v66++] = v71;
        *v71 = v117;
        --v65;
      }
      while (v70);
LABEL_83:
      ;
    }
    while (v62);
    v72 = __src[0];
    if (!v66)
    {
      v95 = (unint64_t)_term_trie_compact_alloc(v9, 4u, *(int8x8_t *)v117.i8);
      *(_QWORD *)v95 = v72;
      v96 = 2;
      goto LABEL_155;
    }
    v73 = 0;
    v74 = (int)v66 - 1;
    v119 = v10;
    do
    {
      v76 = v125[v74];
      v77 = *(unsigned __int16 *)(v76 + 32);
      if (v77 < v11)
        goto LABEL_132;
      if (v77 == v11)
      {
        if (v72)
          goto LABEL_132;
        ++v73;
        v72 = v125[v74];
      }
      else
      {
        v78 = &__src[*(unsigned __int8 *)(v76 + v11 + 34)];
        v81 = v78[1];
        v80 = v78 + 1;
        v79 = v81;
        if (v81)
        {
          if ((~(_BYTE)v79 & 3) != 0)
            goto LABEL_132;
          __src[*(unsigned __int8 *)(v76 + v11 + 34) + 1] = _RBAppend(v79 & 0x7FFFFFFFFFFFFFFCLL, v76, 0, v11 + 1) & 0x7FFFFFFFFFFFFFFCLL | 3;
        }
        else
        {
          ++v73;
          *v80 = v76 | 3;
        }
        v10 = v119;
      }
    }
    while ((_DWORD)v74--);
    __src[0] = v72;
    if (v73 == 1)
    {
      v82 = (int8x8_t *)_term_trie_compact_alloc(v9, 4u, v67);
      v83 = *(unsigned __int8 *)(v124 + v11 + 34);
      v62 = __src[v83 + 1] & 0xFFFFFFFFFFFFFFFCLL;
      if (v62)
      {
        v84 = v82;
        v85 = &v82[TermTrieCompactSetFollows(v82, v83)];
        v85[6] = (int8x8_t)__src[*(unsigned __int8 *)(v124 + v11 + 34) + 1];
        *v10 = (int8x8_t)((unint64_t)v84 | 2);
        ++v11;
        v64 = v122;
        v10 = v85 + 6;
        continue;
      }
LABEL_132:
      v100 = __si_assert_copy_extra_268();
LABEL_133:
      __message_assert("%s:%u: failed assertion '%s' %s ");
LABEL_134:
      free(v100);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    break;
  }
  if (v73 >= 5)
  {
    if (v73 >= 9)
    {
      if (v73 >= 0x11)
      {
        if (v73 > 0x20)
        {
          v101 = *v120;
          for (j = atomic_load(*v120 + 1); ; j = v104)
          {
            v95 = (j + 7) & 0xFFFFFFFFFFFFFFF8;
            if (v95 + 2064 >= v101[2])
              break;
LABEL_141:
            v103 = v101 + 1;
            while (1)
            {
              v104 = __ldaxr(v103);
              if (v104 != j)
                break;
              if (!__stlxr(v95 + 2056, v103))
                goto LABEL_171;
            }
            __clrex();
          }
          while (1)
          {
            os_unfair_lock_lock((os_unfair_lock_t)&_slablock);
            v101 = *v120;
            v105 = *v120 + 1;
            v106 = atomic_load(v105);
            if (((v106 + 7) & 0xFFFFFFFFFFFFFFF8) + 2064 >= v101[2])
              break;
            os_unfair_lock_unlock((os_unfair_lock_t)&_slablock);
            j = atomic_load(v105);
            v95 = (j + 7) & 0xFFFFFFFFFFFFFFF8;
            v10 = v119;
            if (v95 + 2064 < v101[2])
              goto LABEL_141;
          }
          v95 = (unint64_t)slab_new_slab(v120, 0x808uLL, 244);
          os_unfair_lock_unlock((os_unfair_lock_t)&_slablock);
          v10 = v119;
LABEL_171:
          bzero((void *)v95, 0x808uLL);
          memcpy((void *)v95, __src, 0x808uLL);
          v96 = 1;
          goto LABEL_155;
        }
        v99 = 32;
      }
      else
      {
        v99 = 16;
      }
    }
    else
    {
      v99 = 8;
    }
    v95 = (unint64_t)_term_trie_compact_alloc(v9, v99, v67);
    *(_QWORD *)v95 = v72;
    goto LABEL_150;
  }
  v95 = (unint64_t)_term_trie_compact_alloc(v9, 4u, v67);
  *(_QWORD *)v95 = v72;
  if (!v73)
  {
    v96 = 2;
    goto LABEL_155;
  }
LABEL_150:
  v107 = 0;
  v108 = 0;
  v96 = 2;
  do
  {
    v109 = __src[v107 + 1];
    if (v109)
    {
      *(_QWORD *)(v95 + 8 * TermTrieCompactSetFollows((int8x8_t *)v95, v107) + 48) = v109;
      ++v108;
    }
    if (v107 > 0xFE)
      break;
    ++v107;
  }
  while (v108 < v73);
LABEL_155:
  *v10 = (int8x8_t)(v96 | v95);
  v61 = v115;
  v63 = v113;
LABEL_156:
  if (v63 <= 5)
    v86 = v61;
  else
    v86 = v124;
LABEL_159:
  if (!v86)
  {
    v111 = __si_assert_copy_extra_268();
    v88 = v111;
    v112 = "";
    if (v111)
      v112 = v111;
    __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 715, "e", v112);
    goto LABEL_112;
  }
  return v86 + 16;
}

uint64_t _RBInsert(uint64_t a1, unint64_t a2, unsigned __int8 *a3, int a4, uint64_t a5, _BYTE *a6, _DWORD *a7, unsigned int a8, uint64_t *a9, unsigned __int8 a10)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  size_t v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  _BYTE *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;

  v11 = a1;
  v12 = a9;
  v13 = a2 & 0x7FFFFFFFFFFFFFFFLL;
  if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    v14 = a2;
    v16 = *(_QWORD *)v13;
    v15 = *(_QWORD *)((a2 & 0x7FFFFFFFFFFFFFFFLL) + 8);
    if ((*(_QWORD *)v13 & 0x8000000000000000) != 0 && v15 < 0)
    {
      v14 = a2 | 0x8000000000000000;
      v16 &= ~0x8000000000000000;
      v15 &= ~0x8000000000000000;
      *(_QWORD *)v13 = v16;
      *(_QWORD *)((a2 & 0x7FFFFFFFFFFFFFFFLL) + 8) = v15;
    }
    _X8 = v16 & 0x7FFFFFFFFFFFFFFFLL;
    __asm { PRFM            #4, [X8] }
    _X8 = v15 & 0x7FFFFFFFFFFFFFFFLL;
    __asm { PRFM            #4, [X8] }
    v25 = (unsigned __int8 *)(v13 + a8 + 34);
    v26 = &a3[a8];
    v27 = *(unsigned __int16 *)(v13 + 32);
    v28 = v27 - a5;
    if (v27 >= a5)
      v27 = a5;
    v29 = v27 - a8;
    if (a10)
    {
      if (v27 == a8)
        goto LABEL_20;
      while (1)
      {
        v31 = *v25++;
        v30 = v31;
        v32 = *v26++;
        v33 = v30 - *(unsigned __int8 *)(v11 + 2144 + v32);
        if (v33)
          break;
        if (!--v29)
          goto LABEL_20;
      }
    }
    else
    {
      v35 = a6;
      v36 = a7;
      v44 = v13;
      v37 = v11;
      v38 = a5;
      v39 = memcmp(v25, v26, v29);
      a5 = v38;
      v11 = v37;
      v13 = v44;
      a7 = v36;
      a6 = v35;
      v12 = a9;
      v33 = v39;
    }
    if (v33)
    {
      if (v33 >= 1)
        goto LABEL_16;
      goto LABEL_21;
    }
LABEL_20:
    v33 = v28;
    if (v28 >= 1)
    {
LABEL_16:
      ++*a7;
      v40 = _RBInsert(v11, v16, a3, 0, a5, a6);
      *(_QWORD *)v13 = v40;
      if ((v14 & 0x8000000000000000) != 0 && a4 && v40 < 0)
      {
        *(_QWORD *)v13 = *(_QWORD *)((v40 & 0x7FFFFFFFFFFFFFFFLL) + 8);
        *(_QWORD *)((v40 & 0x7FFFFFFFFFFFFFFFLL) + 8) = v14;
        v41 = *(_QWORD *)(v40 & 0x7FFFFFFFFFFFFFFFLL);
        v13 = v40 & 0x7FFFFFFFFFFFFFFFLL;
        if ((v41 & 0x8000000000000000) == 0)
          return v40;
      }
      else
      {
        v41 = v40;
        v40 = v14;
        if ((v41 & 0x8000000000000000) == 0)
          return v40;
      }
      v14 = v41 & 0x7FFFFFFFFFFFFFFFLL;
      if ((*(_QWORD *)(v41 & 0x7FFFFFFFFFFFFFFFLL) & 0x8000000000000000) != 0)
      {
        *(_QWORD *)v13 = *(_QWORD *)((v41 & 0x7FFFFFFFFFFFFFFFLL) + 8);
        *(_QWORD *)((v41 & 0x7FFFFFFFFFFFFFFFLL) + 8) = v40 | 0x8000000000000000;
        return v14;
      }
      return v40;
    }
LABEL_21:
    if ((v33 & 0x80000000) == 0)
    {
      *a6 = 0;
      *v12 = v13;
      return v14;
    }
    ++*a7;
    v40 = _RBInsert(v11, v15, a3, 1, a5, a6);
    *(_QWORD *)(v13 + 8) = v40;
    if ((v14 & 0x8000000000000000) != 0 && !a4 && v40 < 0)
    {
      *(_QWORD *)(v13 + 8) = *(_QWORD *)(v40 & 0x7FFFFFFFFFFFFFFFLL);
      *(_QWORD *)(v40 & 0x7FFFFFFFFFFFFFFFLL) = v14;
      v42 = *(_QWORD *)((v40 & 0x7FFFFFFFFFFFFFFFLL) + 8);
      v13 = v40 & 0x7FFFFFFFFFFFFFFFLL;
      if ((v42 & 0x8000000000000000) == 0)
        return v40;
    }
    else
    {
      v42 = v40;
      v40 = v14;
      if ((v42 & 0x8000000000000000) == 0)
        return v40;
    }
    v14 = v42 & 0x7FFFFFFFFFFFFFFFLL;
    if ((*(_QWORD *)((v42 & 0x7FFFFFFFFFFFFFFFLL) + 8) & 0x8000000000000000) != 0)
    {
      *(_QWORD *)(v13 + 8) = *(_QWORD *)v14;
      *(_QWORD *)v14 = v40 | 0x8000000000000000;
      return v14;
    }
    return v40;
  }
  *a6 = 1;
  v34 = (uint64_t)_TermListEntryCreate(a1, a3, (unsigned __int16)a5, a10);
  *a9 = v34;
  return v34 & 0x7FFFFFFFFFFFFFFFLL;
}

int64x2_t *_TermListEntryCreate(uint64_t a1, unsigned __int8 *__src, size_t __n, int a4)
{
  unsigned int v4;
  uint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  unint64_t i;
  int64x2_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  const char *v19;
  __int8 *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;

  v4 = __n;
  if (__n >= 0x415)
  {
    v17 = __si_assert_copy_extra_268();
    v18 = v17;
    v19 = "";
    if (v17)
      v19 = v17;
    __message_assert("%s:%u: failed assertion '%s' %s %d", "TermTrie.c", 270, "term_len <= CI_UTF8CHARS_BUFFER_SIZE", v19, v4);
    free(v18);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v8 = __n + 41;
  v9 = (_QWORD **)(a1 + 8);
  v10 = *(_QWORD **)(a1 + 8);
  for (i = atomic_load(v10 + 1); ; i = atomic_load(v15))
  {
    while (1)
    {
      v12 = (int64x2_t *)((i + 7) & 0xFFFFFFFFFFFFFFF8);
      if ((unint64_t)&v12->u64[1] + v8 >= v10[2])
        break;
      v13 = v10 + 1;
      while (1)
      {
        v14 = __ldaxr(v13);
        if (v14 != i)
          break;
        if (!__stlxr((unint64_t)v12->u64 + v8, v13))
          goto LABEL_16;
      }
      __clrex();
      i = v14;
    }
    os_unfair_lock_lock((os_unfair_lock_t)&_slablock);
    v10 = *v9;
    v15 = *v9 + 1;
    v16 = atomic_load(v15);
    if (((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + v8 + 8 >= v10[2])
      break;
    os_unfair_lock_unlock((os_unfair_lock_t)&_slablock);
  }
  v12 = (int64x2_t *)slab_new_slab(v9, v4 + 41, 244);
  os_unfair_lock_unlock((os_unfair_lock_t)&_slablock);
LABEL_16:
  v20 = &v12[2].i8[2];
  if (a4)
  {
    v21 = v4;
    do
    {
      v22 = *__src++;
      *v20++ = *(_BYTE *)(a1 + 2144 + v22);
      --v21;
    }
    while (v21);
  }
  else
  {
    memcpy(v20, __src, v4);
  }
  v12[1].i32[0] = 0;
  v12[2].i8[v4 + 2] = 0;
  v12[2].i16[0] = v4;
  *v12 = vdupq_n_s64(0x8000000000000000);
  do
    v23 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v23 + 1, (unsigned int *)a1));
  return v12;
}

uint64_t _RBAppend(unint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t *v5;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  size_t v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  const char *v22;

  v5 = (uint64_t *)(a1 & 0x7FFFFFFFFFFFFFFFLL);
  if ((a1 & 0x7FFFFFFFFFFFFFFFLL) == 0)
  {
    *(int64x2_t *)a2 = vdupq_n_s64(0x8000000000000000);
    return a2 & 0x7FFFFFFFFFFFFFFFLL;
  }
  v8 = a1;
  v9 = *(_WORD *)(a2 + 32) - a4;
  v10 = *v5;
  if (*v5 < 0)
  {
    v11 = *(_QWORD *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 8);
    if (v11 < 0)
    {
      v8 = a1 | 0x8000000000000000;
      v10 &= ~0x8000000000000000;
      *v5 = v10;
      *(_QWORD *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 8) = v11 & 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  v12 = v9;
  v13 = *(unsigned __int16 *)((a1 & 0x7FFFFFFFFFFFFFFFLL) + 0x20);
  if (v13 - (int)a4 >= v9)
    v14 = v9;
  else
    v14 = (v13 - a4);
  v15 = memcmp((const void *)(a2 + a4 + 34), (char *)v5 + a4 + 34, v14);
  if (!v15)
  {
    v15 = a4 - v13 + v12;
    if (!v15)
    {
      v20 = __si_assert_copy_extra_268();
      v21 = v20;
      v22 = "";
      if (v20)
        v22 = v20;
      __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 1072, "result!=0", v22);
      free(v21);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
  }
  if (v15 < 0)
  {
    result = _RBAppend(v10, a2, 0, a4);
    *v5 = result;
    if ((v8 & 0x8000000000000000) != 0 && a3 && result < 0)
    {
      *v5 = *(_QWORD *)((result & 0x7FFFFFFFFFFFFFFFLL) + 8);
      *(_QWORD *)((result & 0x7FFFFFFFFFFFFFFFLL) + 8) = v8;
      v19 = *(_QWORD *)(result & 0x7FFFFFFFFFFFFFFFLL);
      v5 = (uint64_t *)(result & 0x7FFFFFFFFFFFFFFFLL);
      if ((v19 & 0x8000000000000000) == 0)
        return result;
    }
    else
    {
      v19 = result;
      result = v8;
      if ((v19 & 0x8000000000000000) == 0)
        return result;
    }
    v18 = (uint64_t *)(v19 & 0x7FFFFFFFFFFFFFFFLL);
    if (*v18 < 0)
    {
      *v5 = v18[1];
      v18[1] = result | 0x8000000000000000;
      return (uint64_t)v18;
    }
  }
  else
  {
    result = _RBAppend(v5[1], a2, 1, a4);
    v5[1] = result;
    if ((v8 & 0x8000000000000000) != 0 && !a3 && result < 0)
    {
      v5[1] = *(_QWORD *)(result & 0x7FFFFFFFFFFFFFFFLL);
      *(_QWORD *)(result & 0x7FFFFFFFFFFFFFFFLL) = v8;
      v17 = *(_QWORD *)((result & 0x7FFFFFFFFFFFFFFFLL) + 8);
      v5 = (uint64_t *)(result & 0x7FFFFFFFFFFFFFFFLL);
      if ((v17 & 0x8000000000000000) == 0)
        return result;
    }
    else
    {
      v17 = result;
      result = v8;
      if ((v17 & 0x8000000000000000) == 0)
        return result;
    }
    v18 = (uint64_t *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
    if (v18[1] < 0)
    {
      v5[1] = *v18;
      *v18 = result | 0x8000000000000000;
      return (uint64_t)v18;
    }
  }
  return result;
}

uint64_t pushTermData(uint64_t a1, int *a2, uint64_t a3, int a4, char a5, int a6, unsigned int a7)
{
  int v7;
  uint64_t v8;

  if ((a5 & 1) != 0)
  {
    a2[3] = 0;
    if (a6)
    {
      *((_QWORD *)a2 + 1) = a3;
      *a2 |= 1u;
      a2[1] = 2 * (a6 != 2);
      return 1;
    }
LABEL_14:
    a2[1] = a7;
    a2[2] = a3;
    return 1;
  }
  v7 = *a2;
  if (!a6)
  {
    if ((v7 & 1) != 0)
    {
      if (*((_QWORD *)a2 + 1) == a3)
        return 0;
    }
    else
    {
      v8 = a2[2];
      if (v8 == a3)
        return 0;
      if ((_DWORD)v8 == a4)
        goto LABEL_14;
    }
    addToExistingTermUpdateList(a1, (unsigned int *)a2, a3, 0, a7);
    return 1;
  }
  if ((v7 & 1) == 0 || *((_QWORD *)a2 + 1) != a3)
    goto LABEL_17;
  if (a6 != 2)
  {
    if (a6 == 1 && a2[1] == 2)
      return 0;
    goto LABEL_17;
  }
  if (a2[1])
LABEL_17:
    addToExistingTermUpdateList(a1, (unsigned int *)a2, a3, a6, a7);
  return 0;
}

uint64_t utf8_encodestr(unsigned __int16 *a1, unint64_t a2, _BYTE *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t result;
  _BYTE *v8;
  int v10;
  unsigned __int16 *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  int v19;
  unsigned __int16 v20;
  __int16 v21;
  int v22;
  __int16 v23;
  __int16 v24;
  int v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x1E0C80C00];
  v26[0] = 0;
  v26[1] = 0;
  if (a2 >= 2)
  {
    v10 = 0;
    v11 = 0;
    v12 = (unint64_t)&a3[a5 - 1];
    v13 = a2 >> 1;
    v8 = a3;
    while (1)
    {
      --v13;
      if (v10 < 1)
      {
        v17 = *a1++;
        v15 = v17;
        v18 = (unsigned __int16)v17;
        if ((unsigned __int16)v17 >= 0xC0u)
        {
          v19 = __CFUniCharDecomposableBitmap[v18 >> 8];
          if (!__CFUniCharDecomposableBitmap[v18 >> 8]
            || v19 != 255
            && ((__CFUniCharDecomposableBitmap[(v18 >> 3) + 256 + 32 * v19 - 32] >> (v18 & 7)) & 1) == 0)
          {
            goto LABEL_28;
          }
          v20 = v15 + 21504;
          if ((unsigned __int16)(v15 + 21504) > 0x2BA4u)
          {
            v22 = unicode_recursive_decompose((unsigned __int16)v15, v26);
            v15 = LOWORD(v26[0]);
          }
          else
          {
            v21 = (unsigned __int16)(v15 + 21504) % 0x1Cu;
            v15 = ((28533 * (unsigned __int16)(v15 + 21504)) >> 24) | 0x1100;
            LOWORD(v26[0]) = ((28533 * v20) >> 24) | 0x1100;
            WORD1(v26[0]) = v20 % 0x24Cu / 0x1C + 4449;
            if (v20 % 0x1Cu)
            {
              WORD2(v26[0]) = v21 + 4519;
              v22 = 3;
            }
            else
            {
              v22 = 2;
            }
          }
          v10 = v22 - 1;
          v13 += v22 - 1;
          v11 = (unsigned __int16 *)v26 + 1;
        }
      }
      else
      {
        v16 = *v11++;
        v15 = v16;
        --v10;
      }
      if (!(_WORD)v15)
      {
        LOBYTE(v15) = 0;
        LOBYTE(v23) = 2;
        LOBYTE(v24) = -112;
LABEL_23:
        if ((unint64_t)(v8 + 2) >= v12)
          goto LABEL_35;
        *v8 = v23 | 0xE0;
        v8[1] = v24 & 0x3F | 0x80;
        v8[2] = v15 & 0x3F | 0x80;
        v8 += 3;
        goto LABEL_6;
      }
      if ((unsigned __int16)v15 == 47)
      {
        LOBYTE(v15) = 47;
LABEL_26:
        if ((unint64_t)v8 >= v12)
          goto LABEL_35;
        *v8++ = v15;
        goto LABEL_6;
      }
      LODWORD(v18) = (unsigned __int16)v15;
      if ((unsigned __int16)v15 < 0x80u)
        goto LABEL_26;
LABEL_28:
      if ((unsigned __int16)v15 <= 0x7FFu)
      {
        if ((unint64_t)(v8 + 1) >= v12)
        {
LABEL_35:
          result = 63;
          goto LABEL_37;
        }
        *v8 = (v15 >> 6) | 0xC0;
        v8[1] = v15 & 0x3F | 0x80;
        v8 += 2;
        goto LABEL_6;
      }
      v24 = (unsigned __int16)v15 >> 6;
      v23 = (unsigned __int16)v15 >> 12;
      if ((unsigned __int16)v15 >> 10 != 54)
        goto LABEL_23;
      if (!v13)
        goto LABEL_23;
      v25 = *a1;
      if ((v25 & 0xFC00) != 0xDC00)
        goto LABEL_23;
      if ((unint64_t)(v8 + 3) >= v12)
        goto LABEL_35;
      v14 = v25 + ((_DWORD)v18 << 10) - 56613888;
      --v13;
      ++a1;
      *v8 = (v14 >> 18) | 0xF0;
      v8[1] = (v14 >> 12) & 0x3F | 0x80;
      v8[2] = (v14 >> 6) & 0x3F | 0x80;
      v8[3] = v25 & 0x3F | 0x80;
      v8 += 4;
LABEL_6:
      if (!v13)
      {
        result = 0;
        goto LABEL_37;
      }
    }
  }
  result = 0;
  v8 = a3;
LABEL_37:
  *a4 = v8 - a3;
  *v8 = 0;
  return result;
}

void *addToExistingTermUpdateList(uint64_t a1, unsigned int *__src, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v9;
  _QWORD *v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  size_t v17;
  void *result;
  unsigned int v19;
  char *v20;
  char *v21;
  const char *v22;

  v9 = *__src;
  v10 = (_QWORD *)(a1 + 88);
  if ((*__src & 1) != 0)
    v11 = 2;
  else
    v11 = 1;
  v12 = (unsigned int *)(a1 + 100);
  v13 = atomic_load((unsigned int *)(a1 + 100));
  v14 = v13 + v11;
  v15 = *(unsigned int *)(a1 + 96);
  if (v14 >= v15)
  {
    v19 = 2 * v15;
    if (!(_DWORD)v15)
      v19 = 0x4000;
    *(_DWORD *)(a1 + 96) = v19;
    if (my_vm_reallocate((void **)(a1 + 88), 12 * v15, 12 * v19, 243, *(_QWORD *)(a1 + 104)))
    {
      v20 = __si_assert_copy_extra_268();
      v21 = v20;
      v22 = "";
      if (v20)
        v22 = v20;
      __message_assert("%s:%u: failed assertion '%s' %s ", "DocPosting.h", 250, "0 == kr", v22);
      free(v21);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
  }
  do
    v16 = __ldaxr(v12);
  while (__stlxr(v16 + v11, v12));
  if ((v9 & 1) != 0)
    v17 = 16;
  else
    v17 = 12;
  result = memcpy((void *)(*v10 + 12 * v16), __src, v17);
  *__src = 2 * v16;
  if (a4)
  {
    *((_QWORD *)__src + 1) = a3;
    *__src = (2 * v16) | 1;
    __src[1] = 2 * (a4 != 2);
  }
  else
  {
    __src[2] = a3;
    if ((v9 & 1) != 0)
      __src[3] = 0;
    __src[1] = a5;
  }
  return result;
}

uint64_t TermTrieCompactSetFollows(int8x8_t *a1, unsigned int a2)
{
  __int32 v2;
  uint64_t v3;
  int8x8_t *v4;
  unsigned int v5;
  uint8x8_t v6;
  uint8x8_t v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x8_t *v12;
  int8x8_t *v13;
  BOOL v14;
  uint64_t v15;
  int8x8_t *v16;
  int8x8_t *v17;
  int8x8_t v18;
  unsigned __int8 v19;
  uint64_t v21;
  uint64_t v22;
  int8x8_t *v23;
  uint64_t v24;
  uint64_t v25;
  int8x8_t *v26;
  __int128 v27;
  char *v28;
  char *v29;
  const char *v30;

  v2 = 0;
  v3 = a1[5].u8[0];
  v4 = a1 + 1;
  a1[1].i32[a2 >> 5] |= 1 << a2;
  v5 = a2 >> 6;
  if (a2 >> 6 != 1)
  {
    if (v5 != 2)
    {
      if (v5 != 3)
        goto LABEL_7;
      v6 = (uint8x8_t)vcnt_s8(a1[3]);
      v6.i16[0] = vaddlv_u8(v6);
      v2 = v6.i32[0];
    }
    v7 = (uint8x8_t)vcnt_s8(a1[2]);
    v7.i16[0] = vaddlv_u8(v7);
    v2 += v7.i32[0];
  }
  v8 = (uint8x8_t)vcnt_s8(*v4);
  v8.i16[0] = vaddlv_u8(v8);
  v2 += v8.i32[0];
LABEL_7:
  v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v4[v5] & ~(-1 << a2)));
  v9.i16[0] = vaddlv_u8(v9);
  v10 = (v2 + v9.i32[0]);
  if (v10 >= v3)
    goto LABEL_17;
  v11 = (~(_DWORD)v10 + v3);
  if (v11 < 0x29
    || ((v12 = &a1[v3], v13 = &a1[(v3 - 1)], &v12[-v11 + 6] <= &v12[6])
      ? (v14 = &v13[-v11 + 6] > &v13[6])
      : (v14 = 1),
        v14 || (unint64_t)((char *)v13 - (char *)v12) < 0x20))
  {
    v15 = v3;
    goto LABEL_15;
  }
  v21 = v11 + 1;
  v22 = (v11 + 1) & 0x1FFFFFFFCLL;
  v23 = &a1[v3 + 5];
  v24 = v3 + 0xFFFFFFFFLL;
  v25 = v22;
  do
  {
    v26 = &a1[v24];
    v27 = *(_OWORD *)v26[5].i8;
    *(_OWORD *)v23[-2].i8 = *(_OWORD *)v26[3].i8;
    *(_OWORD *)v23->i8 = v27;
    v23 -= 4;
    v24 -= 4;
    v25 -= 4;
  }
  while (v25);
  if (v21 != v22)
  {
    v15 = v3 - v22;
LABEL_15:
    v16 = &a1[v15 + 6];
    v17 = &a1[(v15 - 1) + 6];
    do
    {
      v18 = *v17--;
      *v16-- = v18;
      LODWORD(v15) = v15 - 1;
    }
    while (v10 < v15);
  }
LABEL_17:
  v19 = v3 + 1;
  a1[5].i8[0] = v19;
  if (a1[5].u8[1] < v19)
  {
    v28 = __si_assert_copy_extra_268();
    v29 = v28;
    v30 = "";
    if (v28)
      v30 = v28;
    __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 154, "level->size>=level->count", v30);
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v10;
}

uint64_t SIQueryCreateWithItems(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, __int128 a10, uint64_t a11)
{
  unint64_t v11;
  uint64_t v13[6];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[4];
  __int128 v25;
  __int128 v26;
  _OWORD v27[5];

  v26 = 0u;
  memset(v27, 0, sizeof(v27));
  v25 = 0u;
  v23 = 0u;
  memset(v24, 0, sizeof(v24));
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  v13[0] = 1;
  v13[1] = a1;
  v13[2] = 0;
  v13[3] = 0;
  v13[5] = 0;
  v14 = 0uLL;
  v13[4] = a2;
  v15 = 0uLL;
  v16 = a3;
  v17 = a4;
  v18 = a5;
  v19 = a6;
  do
    v11 = __ldaxr(&gInternalQueryID);
  while (__stlxr(v11 + 1, &gInternalQueryID));
  *((_QWORD *)&v20 + 1) = v11;
  v21 = a7;
  *(_QWORD *)&v22 = a8;
  *((_QWORD *)&v22 + 1) = a9;
  v23 = a10;
  *(_QWORD *)&v24[0] = a11;
  memset((char *)v24 + 8, 0, 48);
  v25 = 0u;
  v26 = 0u;
  LOBYTE(v27[0]) = 0;
  memset((char *)v27 + 8, 0, 48);
  *(_OWORD *)((char *)&v27[3] + 2) = 0u;
  return SIQueryCreateWithParameters(v13);
}

uint64_t SIQueryCreateWithParameters(uint64_t *a1)
{
  void *v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  _DWORD v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (query_zone_init_onceToken == -1)
  {
    if (!a1)
      return 0;
  }
  else
  {
    dispatch_once(&query_zone_init_onceToken, &__block_literal_global_3813);
    if (!a1)
      return 0;
  }
  if (*a1 == 1)
  {
    v2 = malloc_type_calloc(1uLL, 0x300uLL, 0x10F00407059888BuLL);
    v3 = (uint64_t)v2;
    if (v2)
    {
      if (initQuery((uint64_t)v2, (uint64_t)a1))
      {
        atomic_store(1u, (unsigned int *)(v3 + 584));
        return v3;
      }
      si_query_free(v3);
      return 0;
    }
  }
  else
  {
    v4 = *__error();
    v5 = _SILogForLogForCategory(1);
    v6 = dword_1EF19FC90 < 3;
    if (os_log_type_enabled(v5, (os_log_type_t)(dword_1EF19FC90 < 3)))
    {
      v7 = *a1;
      v9[0] = 67109120;
      v9[1] = v7;
      _os_log_impl(&dword_1B8270000, v5, v6, "*warn* Invalid query parameter version %d", (uint8_t *)v9, 8u);
    }
    v3 = 0;
    *__error() = v4;
  }
  return v3;
}

uint64_t initQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  const __CFString *v6;
  const __CFAllocator **v7;
  CFStringRef Copy;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t MutableCopy;
  const __CFDictionary *v14;
  const __CFNumber *Value;
  const __CFNumber *v16;
  CFTypeID v17;
  int v18;
  __CFArray *Mutable;
  CFIndex i;
  const __CFString *ValueAtIndex;
  const __CFString *v22;
  const __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFArray *v27;
  CFIndex Count;
  CFIndex v29;
  CFIndex v30;
  BOOL v31;
  const void *v32;
  const __CFArray *v33;
  CFArrayRef v34;
  const __CFArray *v35;
  CFArrayRef v36;
  _DWORD *v37;
  uint64_t v38;
  const __CFArray *v39;
  uint64_t v40;
  const __CFAllocator *v41;
  CFIndex v42;
  CFIndex v43;
  __CFArray *v44;
  const __CFArray *v45;
  const void *v46;
  const __CFString *v47;
  int v48;
  int v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  const char *v53;
  NSObject *v54;
  uint64_t v55;
  const __CFArray *v56;
  int64_t v57;
  CFIndex v58;
  const void *v59;
  const __CFString *v60;
  uint64_t v61;
  uint64_t v62;
  const __CFArray *v63;
  int64_t v64;
  __int128 v65;
  CFIndex v66;
  const __CFDictionary *v67;
  CFTypeID TypeID;
  __CFString *v69;
  __CFString *v70;
  CFTypeID v71;
  const __CFArray *v72;
  const __CFNumber *v73;
  CFIndex v74;
  uint64_t v75;
  size_t v76;
  char *v77;
  CFIndex v78;
  const void *v79;
  __CFString *v80;
  __CFString *v81;
  uint64_t v83;
  void *v84;
  BOOL v85;
  int v86;
  NSObject *v87;
  os_log_type_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  __CFString *v94;
  const __CFArray *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t *v98;
  const __CFArray *v99;
  CFIndex v100;
  uint64_t v101;
  const __CFString *v102;
  uint64_t NodeForAttribute;
  CFIndex k;
  const __CFString *v105;
  _QWORD *v106;
  const void *v107;
  CFTypeID v108;
  uint64_t v109;
  uint64_t j;
  int v111;
  NSObject *v112;
  os_log_type_t v113;
  NSObject *v114;
  BOOL v115;
  os_log_type_t v116;
  NSObject *v117;
  uint64_t v118;
  _QWORD *v119;
  int v120;
  NSObject *v121;
  os_log_type_t v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  const char *v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint32_t v131;
  uint64_t v132;
  __int128 v134;
  const __CFArray *v135;
  __CFString *v136;
  const __CFArray *v137;
  CFArrayRef v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  int v142;
  const __CFDictionary *v143;
  CFDictionaryRef v144;
  const __CFDictionary *v145;
  CFDictionaryRef v146;
  const __CFAttributedString *v147;
  CFAttributedStringRef v148;
  const __CFArray *v149;
  const __CFArray *v150;
  CFIndex v151;
  CFIndex v152;
  CFIndex v153;
  const void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  NSObject *v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  int v163;
  NSObject *v164;
  char *v165;
  char *v166;
  const char *v167;
  uint64_t v168;
  __int128 v169;
  int64_t v170;
  size_t v171;
  __int128 *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  char v177;
  int v178;
  __int128 v179;
  __int128 v180;
  _QWORD v181[3];
  void *v182;
  void *v183;
  uint64_t v184;
  CFRange v185;
  CFRange v186;

  v184 = *MEMORY[0x1E0C80C00];
  v179 = 0u;
  v180 = 0u;
  pushSkipCrashState();
  v4 = *(_QWORD *)(a2 + 320);
  if (v4)
    CFRetain(*(CFTypeRef *)(a2 + 320));
  *(_QWORD *)(a1 + 656) = v4;
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 112);
  v173 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 208) = (v173 & 0x40) != 0;
  v5 = *(double *)(a2 + 184);
  if (v5 < 0.0 || v5 > 0.0)
    *(double *)(a1 + 360) = v5;
  else
    *(CFAbsoluteTime *)(a2 + 184) = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 368) = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)(a1 + 384) = 0;
  v6 = *(const __CFString **)(a2 + 8);
  v7 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  if (v6)
    Copy = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
  else
    Copy = 0;
  *(_QWORD *)(a1 + 8) = Copy;
  v9 = *(_QWORD *)(a2 + 176);
  if (v9)
    CFRetain(*(CFTypeRef *)(a2 + 176));
  *(_QWORD *)(a1 + 240) = v9;
  v10 = *(_QWORD *)(a2 + 104);
  if (v10)
    CFRetain(*(CFTypeRef *)(a2 + 104));
  *(_QWORD *)a1 = v10;
  v11 = *(_QWORD *)(a2 + 192);
  if (v11)
    CFRetain(*(CFTypeRef *)(a2 + 192));
  *(_QWORD *)(a1 + 32) = v11;
  v12 = *(_QWORD *)(a2 + 32);
  if (v12)
    MutableCopy = RLEOIDArrayCreateMutableCopy(*v7, (uint64_t)v6, v12);
  else
    MutableCopy = 0;
  *(_QWORD *)(a1 + 576) = MutableCopy;
  if (*(_QWORD *)a1)
  {
    v14 = *(const __CFDictionary **)(*(_QWORD *)a1 + 168);
    v178 = 0;
    if (v14)
    {
      Value = (const __CFNumber *)CFDictionaryGetValue(v14, CFSTR("_showAllExtensions"));
      if (Value)
      {
        v16 = Value;
        v17 = CFGetTypeID(Value);
        if (v17 == CFNumberGetTypeID())
          CFNumberGetValue(v16, kCFNumberIntType, &v178);
      }
    }
    if (*(_QWORD *)a1)
      v18 = *(_DWORD *)(*(_QWORD *)a1 + 176);
    else
      v18 = 0;
  }
  else
  {
    v18 = 0;
    v178 = 0;
  }
  if (*(_QWORD *)(a2 + 96))
  {
    Mutable = CFArrayCreateMutable(*v7, 0, MEMORY[0x1E0C9B378]);
    for (i = 0; CFArrayGetCount(*(CFArrayRef *)(a2 + 96)) > i; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 96), i);
      v22 = ValueAtIndex;
      if (v178 && CFEqual(ValueAtIndex, CFSTR("kMDItemDisplayName")))
        v22 = CFSTR("_kMDItemDisplayNameWithExtensionsSynth");
      bzero(v181, 0x400uLL);
      CFStringGetCString(v22, (char *)v181, 1024, 0x8000100u);
      if (isEntitledForAttribute(v18, v181))
        v23 = v22;
      else
        v23 = CFSTR("__DENIED__");
      CFArrayAppendValue(Mutable, v23);
    }
    *(_QWORD *)(a1 + 16) = Mutable;
    v7 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
  }
  v24 = *(_QWORD *)(a2 + 224);
  if (v24)
    CFRetain(*(CFTypeRef *)(a2 + 224));
  *(_QWORD *)(a1 + 24) = v24;
  v25 = *(_QWORD *)(a2 + 64);
  if (v25)
    CFRetain(*(CFTypeRef *)(a2 + 64));
  *(_QWORD *)(a1 + 40) = v25;
  v26 = *(_QWORD *)(a2 + 328);
  if (v26)
    CFRetain(*(CFTypeRef *)(a2 + 328));
  *(_QWORD *)(a1 + 744) = v26;
  if (query_needsWhatFieldsMatched_once != -1)
    dispatch_once(&query_needsWhatFieldsMatched_once, &__block_literal_global_358);
  v27 = *(const __CFArray **)(a1 + 16);
  if (v27 && (Count = CFArrayGetCount(v27), Count >= 1))
  {
    v29 = Count;
    v30 = 0;
    v31 = 1;
    do
    {
      v32 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), v30);
      if (CFSetContainsValue((CFSetRef)query_needsWhatFieldsMatched_dict, v32))
        break;
      v31 = ++v30 < v29;
    }
    while (v29 != v30);
  }
  else
  {
    v31 = 0;
  }
  *(_BYTE *)(a1 + 60) = v31;
  v33 = *(const __CFArray **)(a2 + 80);
  if (v33)
    v34 = CFArrayCreateCopy(*v7, v33);
  else
    v34 = 0;
  *(_QWORD *)(a1 + 176) = v34;
  v35 = *(const __CFArray **)(a2 + 88);
  if (v35)
    v36 = CFArrayCreateCopy(*v7, v35);
  else
    v36 = 0;
  *(_QWORD *)(a1 + 184) = v36;
  v37 = &unk_1EF19F000;
  if (dword_1EF19FC90 >= 5)
  {
    v158 = *__error();
    v159 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
    {
      v160 = *(_QWORD *)(a1 + 8);
      v161 = *(_QWORD *)(a2 + 96);
      v162 = *(void **)(a2 + 80);
      LODWORD(v181[0]) = 138412802;
      *(_QWORD *)((char *)v181 + 4) = v160;
      WORD2(v181[1]) = 2112;
      *(_QWORD *)((char *)&v181[1] + 6) = v161;
      HIWORD(v181[2]) = 2112;
      v182 = v162;
      _os_log_impl(&dword_1B8270000, v159, OS_LOG_TYPE_DEFAULT, "initWithQuery %@ for fields:%@ and scopes:%@", (uint8_t *)v181, 0x20u);
    }
    *__error() = v158;
  }
  v38 = v173 & 0x40;
  v39 = *(const __CFArray **)(a2 + 80);
  v40 = *(_QWORD *)(a2 + 88);
  if (v39)
  {
    if (v40)
    {
      v41 = *v7;
      v42 = CFArrayGetCount(v39);
      v43 = CFArrayGetCount(*(CFArrayRef *)(a2 + 88));
      v44 = CFArrayCreateMutableCopy(v41, v43 + v42, *(CFArrayRef *)(a1 + 176));
      *(_QWORD *)(a1 + 192) = v44;
      v45 = *(const __CFArray **)(a2 + 88);
      v186.length = CFArrayGetCount(v45);
      v186.location = 0;
      CFArrayAppendArray(v44, v45, v186);
      goto LABEL_69;
    }
    v46 = *(const void **)(a1 + 176);
    goto LABEL_67;
  }
  if (v40)
  {
    v46 = *(const void **)(a1 + 184);
LABEL_67:
    *(_QWORD *)(a1 + 192) = CFRetain(v46);
    goto LABEL_69;
  }
  *(_QWORD *)(a1 + 192) = 0;
LABEL_69:
  v177 = 0;
  v47 = queryFromCFString(*(_QWORD *)(a1 + 8));
  *(_QWORD *)(a1 + 64) = v47;
  if (!v47)
  {
    v49 = *__error();
    v50 = _SILogForLogForCategory(1);
    v51 = dword_1EF19FC90 < 3;
    if (!os_log_type_enabled(v50, (os_log_type_t)(dword_1EF19FC90 < 3)))
      goto LABEL_159;
    v52 = *(_QWORD *)(a1 + 8);
    LODWORD(v181[0]) = 138412290;
    *(_QWORD *)((char *)v181 + 4) = v52;
    v53 = "*warn* queryFromCFString failed for %@";
    v54 = v50;
    goto LABEL_157;
  }
  if (v177 == 35)
  {
    if ((v173 & 0x800) != 0)
      v48 = 6;
    else
      v48 = 5;
    goto LABEL_78;
  }
  if (v177 != 64)
  {
    v107 = *(const void **)(a2 + 40);
    if (v107)
    {
      v108 = CFGetTypeID(v107);
      if (v108 != CFStringGetTypeID())
      {
        v165 = __si_assert_copy_extra_521(-1);
        v166 = v165;
        v167 = "";
        if (v165)
          v167 = v165;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 4776, "CFGetTypeID(parameters->completionQuery) == CFStringGetTypeID()", v167);
        free(v166);
        if (__valid_fs(-1))
          v168 = 2989;
        else
          v168 = 3072;
        *(_DWORD *)v168 = -559038737;
        abort();
      }
      *(_DWORD *)(a1 + 152) = 3;
      *(_QWORD *)(a1 + 48) = CFRetain(*(CFTypeRef *)(a2 + 40));
      *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      v109 = *(_QWORD *)(a2 + 72);
      if (v109)
        SISetCompletionRankingWeights(v109);
      v55 = *(_QWORD *)(a2 + 144);
      if (v55 && v55 != 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_79;
    }
    else
    {
      v55 = *(_QWORD *)(a2 + 144);
      if (v55 && v55 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v139 = *(_QWORD *)(a2 + 136);
        if (!v139 || v139 >= v55)
        {
          if ((v173 & 0x800) != 0)
            v142 = 1;
          else
            v142 = 2;
          *(_DWORD *)(a1 + 152) = v142;
          goto LABEL_79;
        }
        *(_DWORD *)(a1 + 152) = 0;
        *(_QWORD *)(a1 + 160) = v139;
LABEL_178:
        *(_QWORD *)(a1 + 216) = v55;
        goto LABEL_80;
      }
      *(_DWORD *)(a1 + 152) = 0;
    }
    v128 = *(_QWORD *)(a2 + 136);
    if (!v128)
      goto LABEL_80;
    *(_QWORD *)(a1 + 160) = v128;
    v55 = -1;
    goto LABEL_178;
  }
  v48 = 4;
LABEL_78:
  *(_DWORD *)(a1 + 152) = v48;
  v55 = *(_QWORD *)(a2 + 144);
LABEL_79:
  *(_QWORD *)(a1 + 160) = v55;
LABEL_80:
  v56 = *(const __CFArray **)(a2 + 152);
  if (v56)
  {
    v57 = CFArrayGetCount(v56);
    *(_QWORD *)(a1 + 248) = malloc_type_calloc(v57, 8uLL, 0x2004093837F09uLL);
    if (v57 >= 1)
    {
      v58 = 0;
      while (1)
      {
        LOBYTE(v175) = 0;
        v59 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 152), v58);
        v60 = queryFromCFString((uint64_t)v59);
        if (!v60)
          break;
        v61 = *(_QWORD *)(a1 + 248);
        v62 = *(_QWORD *)(a1 + 256);
        *(_QWORD *)(a1 + 256) = v62 + 1;
        *(_QWORD *)(v61 + 8 * v62) = v60;
        if (v57 == ++v58)
          goto LABEL_85;
      }
      v49 = *__error();
      v114 = _SILogForLogForCategory(1);
      v115 = dword_1EF19FC90 < 3;
      if (os_log_type_enabled(v114, (os_log_type_t)(dword_1EF19FC90 < 3)))
      {
        LODWORD(v181[0]) = 138412290;
        *(_QWORD *)((char *)v181 + 4) = v59;
        v53 = "*warn* grouping queryFromCFString failed for %@";
        v54 = v114;
        v116 = v115;
LABEL_158:
        _os_log_impl(&dword_1B8270000, v54, v116, v53, (uint8_t *)v181, 0xCu);
      }
LABEL_159:
      *__error() = v49;
      goto LABEL_184;
    }
  }
LABEL_85:
  v63 = *(const __CFArray **)(a2 + 160);
  if (v63)
  {
    v64 = CFArrayGetCount(v63);
    *(_QWORD *)(a1 + 264) = malloc_type_calloc(v64, 0x18uLL, 0x1080040468F112EuLL);
    if (v64 >= 1)
    {
      v66 = 0;
      *(_QWORD *)&v65 = 138412290;
      v169 = v65;
      v174 = v38;
      v170 = v64;
      do
      {
        v176 = 0;
        v67 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 160), v66);
        TypeID = CFStringGetTypeID();
        if (TypeID == CFGetTypeID(v67))
        {
          v69 = (__CFString *)queryFromCFString((uint64_t)v67);
          v70 = v69;
          if (v69 && v176 == 36)
          {
            LOWORD(v69[1].data) |= 1u;
          }
          else
          {
            if (v69)
              v85 = v176 == 0;
            else
              v85 = 0;
            if (!v85)
            {
              if (v69)
              {
                v181[0] = MEMORY[0x1E0C809B0];
                v181[1] = 0x40000000;
                v181[2] = __db_query_tree_apply_block_block_invoke;
                v182 = &unk_1E6E377F8;
                v183 = &__block_literal_global_143;
                db_query_tree_apply_block_with_meta(v69, (uint64_t)v181, 0);
              }
              v86 = *__error();
              v87 = _SILogForLogForCategory(1);
              v88 = v37[804] < 3;
              if (os_log_type_enabled(v87, v88))
              {
                LODWORD(v181[0]) = v169;
                *(_QWORD *)((char *)v181 + 4) = v67;
                _os_log_impl(&dword_1B8270000, v87, v88, "*warn* Error creating ranking query for %@", (uint8_t *)v181, 0xCu);
              }
              *__error() = v86;
              v70 = (__CFString *)queryFromCFString((uint64_t)CFSTR("false"));
              v64 = v170;
              if (!v70)
                goto LABEL_184;
            }
          }
          decorateExpandingFunctions(v70, *(_QWORD *)a1, *(const void **)(a1 + 656), *(double *)(a1 + 360));
          *(int64x2_t *)(*(_QWORD *)(a1 + 264) + 24 * *(_QWORD *)(a1 + 288) + 8) = vdupq_n_s64(1uLL);
          v89 = malloc_type_malloc(0x18uLL, 0x1080040468F112EuLL);
          v90 = *(_QWORD *)(a1 + 288);
          *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24 * v90) = v89;
          *v89 = v70;
          *(_QWORD *)(a1 + 288) = v90 + 1;
        }
        else
        {
          v71 = CFDictionaryGetTypeID();
          if (v71 == CFGetTypeID(v67))
          {
            v72 = (const __CFArray *)CFDictionaryGetValue(v67, CFSTR("kCIMatchArray"));
            v73 = (const __CFNumber *)CFDictionaryGetValue(v67, CFSTR("kCIBitCount"));
            v175 = 0;
            CFNumberGetValue(v73, kCFNumberLongType, &v175);
            v74 = CFArrayGetCount(v72);
            v75 = v74;
            if (v74 > 64 || v175 >= 7)
            {
              v111 = *__error();
              v140 = _SILogForLogForCategory(1);
              v141 = v37[804] < 3;
              if (!os_log_type_enabled(v140, v141))
                goto LABEL_183;
              LODWORD(v181[0]) = 134218240;
              *(_QWORD *)((char *)v181 + 4) = v75;
              WORD2(v181[1]) = 2048;
              *(_QWORD *)((char *)&v181[1] + 6) = v175;
              v127 = "*warn* rulecount %ld bitCount: %ld error";
              v129 = v140;
              v130 = v141;
              v131 = 22;
LABEL_182:
              _os_log_impl(&dword_1B8270000, v129, v130, v127, (uint8_t *)v181, v131);
LABEL_183:
              *__error() = v111;
LABEL_184:
              if ((int)v37[804] >= 5)
              {
                v163 = *__error();
                v164 = _SILogForLogForCategory(1);
                if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(v181[0]) = 0;
                  _os_log_impl(&dword_1B8270000, v164, OS_LOG_TYPE_DEFAULT, "Failed creating query", (uint8_t *)v181, 2u);
                }
                v132 = 0;
                *__error() = v163;
              }
              else
              {
                v132 = 0;
              }
              goto LABEL_186;
            }
            v172 = &v169;
            MEMORY[0x1E0C80A78](v74);
            v77 = (char *)&v169 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
            v171 = v76;
            bzero(v77, v76);
            if (v75 >= 1)
            {
              v78 = 0;
              while (1)
              {
                v79 = CFArrayGetValueAtIndex(v72, v78);
                v80 = (__CFString *)queryFromCFString((uint64_t)v79);
                v81 = v80;
                if (!v80 || v176 != 0)
                  break;
                *(_QWORD *)&v77[8 * v78] = v80;
                decorateExpandingFunctions(v80, *(_QWORD *)a1, *(const void **)(a1 + 656), *(double *)(a1 + 360));
                if (v75 == ++v78)
                  goto LABEL_103;
              }
              if (v78)
              {
                for (j = 0; j != v78; ++j)
                  db_free_query_node(*(_QWORD **)&v77[8 * j]);
              }
              if (v81)
              {
                v181[0] = MEMORY[0x1E0C809B0];
                v181[1] = 0x40000000;
                v181[2] = __db_query_tree_apply_block_block_invoke;
                v182 = &unk_1E6E377F8;
                v183 = &__block_literal_global_143;
                db_query_tree_apply_block_with_meta(v81, (uint64_t)v181, 0);
              }
              v111 = *__error();
              v112 = _SILogForLogForCategory(1);
              v37 = &unk_1EF19F000;
              v113 = dword_1EF19FC90 < 3;
              if (os_log_type_enabled(v112, (os_log_type_t)(dword_1EF19FC90 < 3)))
              {
                LODWORD(v181[0]) = v169;
                *(_QWORD *)((char *)v181 + 4) = v79;
                _os_log_impl(&dword_1B8270000, v112, v113, "*warn* lifting queryFromCFString failed for %@", (uint8_t *)v181, 0xCu);
              }
              goto LABEL_183;
            }
LABEL_103:
            v83 = *(_QWORD *)(a1 + 264) + 24 * *(_QWORD *)(a1 + 288);
            *(_QWORD *)(v83 + 8) = v75;
            *(_QWORD *)(v83 + 16) = v175;
            v84 = malloc_type_malloc(24 * v75, 0x1080040468F112EuLL);
            *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24 * *(_QWORD *)(a1 + 288)) = v84;
            memcpy(v84, v77, v171);
            ++*(_QWORD *)(a1 + 288);
            v37 = (_DWORD *)&unk_1EF19F000;
            v7 = (const __CFAllocator **)MEMORY[0x1E0C9AE00];
            v64 = v170;
          }
        }
        ++v66;
      }
      while (v66 != v64);
    }
    if (!*(_QWORD *)(a1 + 96) && !*(_BYTE *)(a1 + 672) && !*(_QWORD *)(a1 + 680) && *(_QWORD *)(a1 + 288) == 1)
    {
      v91 = *(_QWORD *)(a1 + 264);
      if (*(_QWORD *)(v91 + 8) == 1)
      {
        if (db_node_has_ranking_weights(**(_QWORD ***)v91))
        {
          v92 = ***(_QWORD ****)(a1 + 264);
          v181[0] = MEMORY[0x1E0C809B0];
          v181[1] = 0x40000000;
          v181[2] = __db_query_tree_apply_block_block_invoke;
          v182 = &unk_1E6E377F8;
          v183 = &__block_literal_global_17_10736;
          *(_QWORD *)(a1 + 272) = db_query_tree_apply_block_with_meta(v92, (uint64_t)v181, (uint64_t)&__block_literal_global_20_10737);
          clear_lifting_rules(a1);
        }
      }
    }
  }
  v93 = *(_QWORD *)(a2 + 168);
  if (v93)
  {
    LOBYTE(v175) = 0;
    v94 = (__CFString *)queryFromCFString(v93);
    if (v94 && !(_BYTE)v175)
    {
      *(_QWORD *)(a1 + 280) = v94;
      goto LABEL_126;
    }
    if (v94)
    {
      v181[0] = MEMORY[0x1E0C809B0];
      v181[1] = 0x40000000;
      v181[2] = __db_query_tree_apply_block_block_invoke;
      v182 = &unk_1E6E377F8;
      v183 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(v94, (uint64_t)v181, 0);
    }
    v49 = *__error();
    v117 = _SILogForLogForCategory(1);
    v51 = v37[804] < 3;
    if (!os_log_type_enabled(v117, v51))
      goto LABEL_159;
    v118 = *(_QWORD *)(a2 + 168);
    LODWORD(v181[0]) = 138412290;
    *(_QWORD *)((char *)v181 + 4) = v118;
    v53 = "*warn* dboFilter queryFromCFString failed for %@";
    v54 = v117;
LABEL_157:
    v116 = v51;
    goto LABEL_158;
  }
LABEL_126:
  *(_QWORD *)(a1 + 200) = v173;
  if (*(_DWORD *)(a1 + 152) == 4)
  {
    v95 = *(const __CFArray **)(a2 + 96);
    if (!v95 || !CFArrayGetCount(v95))
    {
      v111 = *__error();
      v125 = _SILogForLogForCategory(1);
      v126 = v37[804] < 3;
      if (!os_log_type_enabled(v125, v126))
        goto LABEL_183;
      LOWORD(v181[0]) = 0;
      v127 = "*warn* no fields for CoalescingCollectingQuery";
LABEL_181:
      v129 = v125;
      v130 = v126;
      v131 = 2;
      goto LABEL_182;
    }
  }
  v96 = *(_QWORD **)(a1 + 64);
  v97 = MEMORY[0x1E0C809B0];
  v181[0] = MEMORY[0x1E0C809B0];
  v181[1] = 0x40000000;
  v181[2] = __db_query_tree_apply_block_block_invoke;
  v182 = &unk_1E6E377F8;
  v183 = &__block_literal_global_17_10736;
  *(_QWORD *)(a1 + 72) = db_query_tree_apply_block_with_meta(v96, (uint64_t)v181, (uint64_t)&__block_literal_global_20_10737);
  v98 = (uint64_t *)(a1 + 72);
  if (*(_DWORD *)(a1 + 152) == 4)
  {
    v99 = *(const __CFArray **)(a1 + 16);
    if (v99)
    {
      v100 = CFArrayGetCount(v99);
      if (v100)
      {
        v101 = v100;
        v102 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), 0);
        NodeForAttribute = (uint64_t)makeNodeForAttribute(v102);
        if (v101 >= 2)
        {
          for (k = 1; k != v101; ++k)
          {
            v105 = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 16), k);
            v106 = makeNodeForAttribute(v105);
            NodeForAttribute = makeORNode(NodeForAttribute, (uint64_t)v106, 1);
          }
        }
        *v98 = makeAndNode(*v98, NodeForAttribute, 1, 1);
      }
    }
  }
  else if ((v173 & 0x800) != 0)
  {
    if (initQuery_once != -1)
      dispatch_once(&initQuery_once, &__block_literal_global_349);
    v119 = (_QWORD *)*v98;
    v181[0] = v97;
    v181[1] = 0x40000000;
    v181[2] = __db_query_tree_apply_block_block_invoke;
    v182 = &unk_1E6E377F8;
    v183 = &__block_literal_global_351;
    if (db_query_tree_apply_block_with_meta(v119, (uint64_t)v181, (uint64_t)&__block_literal_global_356))
    {
      v173 &= ~0x800uLL;
      v120 = *__error();
      v121 = _SILogForLogForCategory(1);
      v122 = 2 * (v37[804] < 4);
      if (os_log_type_enabled(v121, v122))
      {
        LOWORD(v181[0]) = 0;
        _os_log_impl(&dword_1B8270000, v121, v122, "Query is limited to one group; turn off server side grouping",
          (uint8_t *)v181,
          2u);
      }
      *__error() = v120;
      *(_QWORD *)(a1 + 200) = v173;
    }
  }
  decorateExpandingFunctions(*(_QWORD **)(a1 + 72), *(_QWORD *)a1, *(const void **)(a1 + 656), *(double *)(a1 + 360));
  db_optimize_query_tree((_QWORD **)(a1 + 72));
  v123 = *(_QWORD *)(a1 + 72);
  if (!v123 || (v124 = *(_QWORD *)(v123 + 16)) != 0 && *(_DWORD *)(v124 + 24) == 9 || *(_WORD *)(v123 + 40) == 16)
  {
    v111 = *__error();
    v125 = _SILogForLogForCategory(1);
    v126 = v37[804] < 3;
    if (!os_log_type_enabled(v125, v126))
      goto LABEL_183;
    LOWORD(v181[0]) = 0;
    v127 = "*warn* no or false _completeQuery";
    goto LABEL_181;
  }
  *(_QWORD *)(a1 + 300) = 0xBB83F000000;
  *(_QWORD *)(a1 + 308) = 0xBB83F800000;
  *(_QWORD *)(a1 + 316) = 0xBB83F800000;
  v134 = v180;
  *(_OWORD *)(a1 + 324) = v179;
  *(_OWORD *)(a1 + 340) = v134;
  *(_BYTE *)(a1 + 357) = (v173 & 0x20000000) != 0;
  v135 = *(const __CFArray **)(a1 + 16);
  if (v135)
  {
    v185.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 16));
    v185.location = 0;
    if (CFArrayContainsValue(v135, v185, CFSTR("_kMDItemSDBInfo")))
    {
      *(_DWORD *)(a1 + 312) = 100;
      *(_DWORD *)(a1 + 320) = 100;
      *(_DWORD *)(a1 + 304) = 100;
    }
  }
  *(_QWORD *)(a1 + 680) = 0;
  if (*(_BYTE *)(a2 + 272))
  {
    v136 = (__CFString *)queryFromCFString(*(_QWORD *)(a1 + 8));
    *(_QWORD *)(a1 + 96) = v136;
    if (v136)
    {
      decorateExpandingFunctions(v136, *(_QWORD *)a1, *(const void **)(a1 + 656), *(double *)(a1 + 360));
      db_optimize_query_tree((_QWORD **)(a1 + 96));
      *(_BYTE *)(a1 + 672) = 1;
      v137 = *(const __CFArray **)(a2 + 288);
      if (v137)
        v138 = CFArrayCreateCopy(*v7, v137);
      else
        v138 = 0;
      *(_QWORD *)(a1 + 696) = v138;
      v143 = *(const __CFDictionary **)(a2 + 296);
      if (v143)
        v144 = CFDictionaryCreateCopy(*v7, v143);
      else
        v144 = 0;
      *(_QWORD *)(a1 + 704) = v144;
      v145 = *(const __CFDictionary **)(a2 + 304);
      if (v145)
        v146 = CFDictionaryCreateCopy(*v7, v145);
      else
        v146 = 0;
      *(_QWORD *)(a1 + 712) = v146;
      v147 = *(const __CFAttributedString **)(a2 + 312);
      if (v147)
        v148 = CFAttributedStringCreateCopy(*v7, v147);
      else
        v148 = 0;
      *(_QWORD *)(a1 + 736) = v148;
      *(_BYTE *)(a1 + 752) = *(_BYTE *)(a2 + 336);
    }
    v149 = *(const __CFArray **)(a2 + 280);
    if (v149)
      *(_QWORD *)(a1 + 680) = CFArrayCreateCopy(*v7, v149);
  }
  *(_BYTE *)(a1 + 753) = *(_BYTE *)(a2 + 337);
  v150 = *(const __CFArray **)(a2 + 200);
  if (v150)
  {
    v151 = CFArrayGetCount(v150);
    if (v151 >= 1)
    {
      v152 = v151;
      v153 = 0;
      do
      {
        v154 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 200), v153);
        if (!SIQueryAddResultFilter(a1, v154))
          goto LABEL_184;
      }
      while (v152 != ++v153);
    }
  }
  v155 = *(_QWORD *)(a2 + 16);
  if (v155)
    SIQueryAddResultGenerator(a1, v155);
  v156 = *(_QWORD *)(a2 + 24);
  if (v156)
    SIQueryAddResultGenerator(a1, v156);
  *(_DWORD *)(a1 + 324) = *(__int16 *)(a2 + 208);
  *(int32x4_t *)(a1 + 332) = vmovl_s16(*(int16x4_t *)(a2 + 212));
  *(_DWORD *)(a1 + 348) = *(__int16 *)(a2 + 220);
  *(_DWORD *)(a1 + 352) = *(__int16 *)(a2 + 222);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 240);
  v157 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 640) = v157;
  v132 = 1;
LABEL_186:
  popSkipCrashState();
  return v132;
}

uint64_t isEntitledForAttribute(int a1, void *key)
{
  const void *Value;
  BOOL v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  int v10;
  void *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (isEntitledForAttribute_onceToken[0] != -1)
    dispatch_once(isEntitledForAttribute_onceToken, &__block_literal_global_467);
  Value = CFDictionaryGetValue((CFDictionaryRef)isEntitledForAttribute_attributeEntitlementMapping, key);
  v5 = (Value & a1) != 0 || Value == 0;
  v6 = v5;
  if (!v5 && ++isEntitledForAttribute__COUNT_ == 997)
  {
    isEntitledForAttribute__COUNT_ = 0;
    v7 = *__error();
    v8 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 136315138;
      v11 = key;
      _os_log_impl(&dword_1B8270000, v8, OS_LOG_TYPE_DEFAULT, "##### entitlements failure request for %s", (uint8_t *)&v10, 0xCu);
    }
    *__error() = v7;
  }
  return v6;
}

uint64_t db_optimize_query_tree(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  int v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  void *v13;

  v2 = *a1;
  v3 = MEMORY[0x1E0C809B0];
  v9 = MEMORY[0x1E0C809B0];
  v10 = 0x40000000;
  v11 = __db_query_tree_apply_block_block_invoke;
  v12 = &unk_1E6E377F8;
  v13 = &__block_literal_global_27_10814;
  result = db_query_tree_apply_block_with_meta(v2, (uint64_t)&v9, (uint64_t)&__block_literal_global_29_10815);
  v5 = (_QWORD *)result;
  if (result)
  {
    v6 = *(unsigned __int16 *)(result + 40);
    if (v6 == 32 || v6 == 16)
    {
      v8 = *(_QWORD **)result;
      if (*v5)
      {
        v9 = v3;
        v10 = 0x40000000;
        v11 = __db_query_tree_apply_block_block_invoke;
        v12 = &unk_1E6E377F8;
        v13 = &__block_literal_global_143;
        db_query_tree_apply_block_with_meta(v8, (uint64_t)&v9, 0);
        *v5 = 0;
      }
      result = v5[1];
      if (result)
      {
        v9 = v3;
        v10 = 0x40000000;
        v11 = __db_query_tree_apply_block_block_invoke;
        v12 = &unk_1E6E377F8;
        v13 = &__block_literal_global_143;
        result = db_query_tree_apply_block_with_meta((_QWORD *)result, (uint64_t)&v9, 0);
        v5[1] = 0;
      }
    }
  }
  *a1 = v5;
  return result;
}

BOOL SIResultQueueSetWakeupTrigger(uint64_t *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  pthread_mutex_lock((pthread_mutex_t *)(*a1 + 8));
  v6 = a1[6];
  v7 = *a1;
  if (!v6)
  {
    v8 = *((unsigned __int8 *)a1 + 12);
    if (*((_BYTE *)a1 + 12))
      goto LABEL_4;
    v10 = *(_DWORD *)(v7 + 120);
    if ((-v10 & *(_DWORD *)(v7 + 128)) != 0
      || (v11 = v10 - 1, v12 = *(unsigned int *)(v7 + 124), (v12 & ~v11) != 0))
    {
      v13 = __si_assert_copy_extra_268();
      __message_assert_272((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, (char)"SISimpleQueue.c");
      free(v13);
      if (__valid_fs(-1))
        v21 = 2989;
      else
        v21 = 3072;
      *(_DWORD *)v21 = -559038737;
      abort();
    }
    if (*(_QWORD *)(*(_QWORD *)(v7 + 136) + 8 * v12) && !*((_DWORD *)a1 + 21))
    {
LABEL_4:
      pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
      a2(a3, v8);
      return v6 == 0;
    }
    a1[6] = (uint64_t)a2;
    a1[7] = a3;
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v7 + 8));
  return v6 == 0;
}

void SIResultBatchFree(void **a1)
{
  const void *v2;
  const void *v3;
  char *v4;
  char *v5;
  const char *v6;
  uint64_t v7;

  if (a1)
  {
    switch(*(_DWORD *)a1)
    {
      case 0:
        free(a1[4]);
        break;
      case 1:
      case 7:
      case 9:
        CFRelease(a1[4]);
        goto LABEL_4;
      case 2:
      case 3:
        CFRelease(a1[4]);
        break;
      case 4:
      case 5:
      case 0xB:
LABEL_4:
        v2 = a1[5];
        if (v2)
          CFRelease(v2);
        a1[5] = 0;
        break;
      case 6:
      case 8:
        break;
      case 0xA:
        v3 = a1[4];
        if (v3)
          CFRelease(v3);
        a1[4] = 0;
        break;
      default:
        v4 = __si_assert_copy_extra_268();
        v5 = v4;
        v6 = "";
        if (v4)
          v6 = v4;
        __message_assert("%s:%u: failed assertion '%s' %s Expected valid queue entry type. Got %d", "SIResultQueue.c", 167, "0", v6, *(_DWORD *)a1);
        free(v5);
        if (__valid_fs(-1))
          v7 = 2989;
        else
          v7 = 3072;
        *(_DWORD *)v7 = -559038737;
        abort();
    }
    if (a1[1])
      si_release_qid();
    free(a1);
  }
}

uint64_t SICancel(uint64_t a1, os_signpost_id_t a2)
{
  unsigned int v4;
  NSObject *Log;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v11;
  qos_class_t v12;
  int v13;
  int v14;
  NSObject *v15;
  qos_class_t v16;
  int v17;
  _BYTE v18[14];
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  do
    v4 = __ldaxr((unsigned int *)a2);
  while (__stlxr(v4 + 1, (unsigned int *)a2));
  pthread_mutex_lock((pthread_mutex_t *)(a2 + 48));
  if (*(_DWORD *)(a2 + 32))
    kdebug_trace();
  Log = _MDPerf_QueryLog();
  if (a2 + 1 >= 2)
  {
    v11 = Log;
    if (os_signpost_enabled(Log))
    {
      v12 = qos_class_self();
      v13 = *(_DWORD *)(a2 + 32);
      v17 = 134218496;
      *(_QWORD *)v18 = 0;
      *(_WORD *)&v18[8] = 1024;
      *(_DWORD *)&v18[10] = v12;
      v19 = 1024;
      v20 = v13;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v11, OS_SIGNPOST_INTERVAL_END, a2, "Job", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x JobType=%{signpost.description:attribute}d", (uint8_t *)&v17, 0x18u);
    }
  }
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (dword_1EF19FCC0 >= 5)
    {
      v14 = *__error();
      v15 = _SILogForLogForCategory(13);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = qos_class_self();
        v17 = 67109376;
        *(_DWORD *)v18 = v16;
        *(_WORD *)&v18[4] = 2048;
        *(_QWORD *)&v18[6] = a2;
        _os_log_impl(&dword_1B8270000, v15, OS_LOG_TYPE_DEFAULT, "Canceling query in SICancel at QoS: %d for job id:%p", (uint8_t *)&v17, 0x12u);
      }
      *__error() = v14;
      v6 = *(_QWORD *)(a2 + 24);
    }
    *(_BYTE *)(v6 + 96) = 1;
    v7 = *(_QWORD *)(a2 + 24);
    pthread_mutex_lock(&jobsLock);
    v8 = *(_QWORD *)(v7 + 32);
    *(_QWORD *)(v7 + 32) = 0;
    pthread_mutex_unlock(&jobsLock);
    if (v8)
      si_release_qid(v8);
    si_querypipe_release(*(_QWORD *)(a2 + 24));
    *(_QWORD *)(a2 + 24) = 0;
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v9 = *(_QWORD *)(a2 + 8);
    if (v9)
    {
      if (!a1 || v9 == a1)
      {
        pthread_mutex_lock(&schlock);
        if (CFSetContainsValue((CFSetRef)gAllIndexes, *(const void **)(a2 + 8)))
          si_remove_livequery(*(_QWORD *)(a2 + 8), *(const void **)(a2 + 16));
        pthread_mutex_unlock(&schlock);
        si_livequery_release(*(_QWORD *)(a2 + 16));
      }
    }
  }
  *(_DWORD *)(a2 + 36) = 1;
  pthread_mutex_unlock((pthread_mutex_t *)(a2 + 48));
  si_release_qid(a2);
  si_release_qid(a2);
  return 1;
}

void si_release_qid(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  do
  {
    v2 = __ldaxr((unsigned int *)a1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)a1));
  if (!v3)
  {
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 48));
    v4 = *(_QWORD *)(a1 + 24);
    if (v4)
      si_querypipe_release(v4);
    free((void *)a1);
  }
}

void finishRegisterQuery(uint64_t **a1, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double Current;
  double v11;
  _DWORD *v12;
  uint64_t *v13;
  unsigned int *v14;
  uint64_t v15;
  const void *v16;
  uint64_t *v17;
  double v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  FILE *v23;
  FILE *v24;
  int v25;
  char *v26;
  const __CFString *v27;
  int v28;
  NSObject *v29;
  unsigned int v30;
  int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_QWORD);
  int v38;
  _DWORD *v39;
  int v40;
  NSObject *v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t tree_apply_block_with_meta;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  const char *v54;
  _QWORD *v55;
  uint64_t v56;
  const __CFAttributedString *v57;
  const __CFArray *v58;
  const __CFArray *v59;
  _QWORD **v60;
  const __CFArray *v61;
  CFIndex Count;
  const __CFDictionary *v63;
  const __CFDictionary *Value;
  const __CFDictionary *v65;
  __CFString *Mutable;
  CFIndex v67;
  const void **v68;
  uint64_t i;
  const __CFString *v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;
  const __CFAttributedString *v75;
  const __CFArray *v76;
  const __CFArray *v77;
  _QWORD **v78;
  const __CFArray *v79;
  CFIndex v80;
  int v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t object_count;
  uint64_t v91;
  _BOOL4 v92;
  _BOOL4 v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  _BOOL4 v99;
  unsigned int *v100;
  unsigned int v101;
  int priority;
  int v103;
  uint64_t v104;
  int v105;
  char v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  const void *v111;
  CFTypeRef v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  __CFArray *v140;
  __CFArray *v141;
  __CFArray *v142;
  __CFArray *v143;
  uint64_t v144;
  int v145;
  const void *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int *v168;
  uint64_t v169;
  uint64_t v170;
  const __CFArray *v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  void (*v175)(_QWORD);
  uint64_t v176;
  char v177;
  const __CFArray *v178;
  const __CFString *ValueAtIndex;
  CFTypeID v180;
  BOOL v181;
  const void *v182;
  pthread_mutex_t *v183;
  const __CFArray *v184;
  const void *v185;
  uint64_t v186;
  const __CFArray *v187;
  int v188;
  NSObject *v189;
  os_log_type_t v190;
  const __CFArray *v191;
  int v192;
  NSObject *v193;
  os_log_type_t v194;
  uint64_t v195;
  int v196;
  NSObject *v197;
  os_log_type_t v198;
  const char *v199;
  uint32_t v200;
  uint64_t v201;
  const __CFArray *v202;
  int v203;
  NSObject *v204;
  os_log_type_t v205;
  const __CFArray *v206;
  int v207;
  NSObject *v208;
  os_log_type_t v209;
  int v210;
  NSObject *v211;
  uint64_t v212;
  uint64_t v213;
  const __CFArray *v214;
  int v215;
  NSObject *v216;
  uint64_t v217;
  int v218;
  NSObject *v219;
  CFAbsoluteTime v220;
  qos_class_t v221;
  int v222;
  NSObject *v223;
  uint64_t v224;
  uint64_t v225;
  pthread_mutex_t *v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  __CFString *v230;
  int v231;
  uint64_t v232;
  char v233;
  int v234;
  uint64_t *v235;
  int v236;
  int v237;
  uint64_t v238;
  uint64_t *v239;
  unsigned int *v240;
  uint64_t v241;
  uint64_t v242;
  _OWORD v243[2];
  uint64_t v244;
  unint64_t v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  unint64_t v249;
  unsigned int v250;
  _QWORD *v251[5];
  char __str[32];
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  int v257;
  _BYTE buf[40];
  uint64_t v259;

  v259 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = a1[1];
  v7 = (*a1)[1];
  v6 = (unsigned int *)(*a1)[2];
  v8 = **a1;
  v9 = v7;
  Current = CFAbsoluteTimeGetCurrent();
  v11 = Current - *((double *)v4 + 3);
  v12 = &unk_1EF19F000;
  if (dword_1EF19FC90 >= 5)
  {
    v215 = *__error();
    v216 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v216, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__str = 134218240;
      *(double *)&__str[4] = v11;
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = qos_class_self();
      _os_log_impl(&dword_1B8270000, v216, OS_LOG_TYPE_DEFAULT, "Search waited %f seconds on the scheduler at qos 0x%x", (uint8_t *)__str, 0x12u);
    }
    *__error() = v215;
    v9 = v7;
    v12 = (_DWORD *)&unk_1EF19F000;
  }
  v13 = v4;
  v14 = v6;
  v15 = (uint64_t)v5;
  *(double *)(v9 + 448) = *(double *)(v9 + 448) + v11;
  if (a2 || *((_DWORD *)v5 + 9))
  {
    v16 = (const void *)v13[4];
    v17 = v13;
    if (v16)
      CFRelease(v16);
    free(v17);
    goto LABEL_7;
  }
  v235 = v13;
  v239 = v5;
  if (isAppleInternalInstall_onceToken != -1)
    dispatch_once(&isAppleInternalInstall_onceToken, &__block_literal_global_1399);
  v22 = v235;
  v238 = v8;
  v240 = v14;
  if (isAppleInternalInstall_isInternalInstall)
  {
    v23 = fopen("/private/var/mobile/spotlightPrioritySleepEnabled", "r");
    if (v23)
    {
      v24 = v23;
      v251[0] = 0;
      v25 = fscanf(v23, "%lf", v251);
      fclose(v24);
      bzero(__str, 0x400uLL);
      fcntl(*(_DWORD *)(v8 + 32), 50, __str);
      v26 = strstr(__str, "Priority");
      if (v25 == 1 && !v26)
      {
        v27 = *(const __CFString **)(v9 + 656);
        if (!v27 || CFStringCompare(CFSTR("com.apple.spotlight"), v27, 1uLL) == kCFCompareEqualTo)
        {
          v28 = *__error();
          v29 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "sleepForPriorityIndex";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 19354;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD **)&buf[20] = v251[0];
            *(_WORD *)&buf[28] = 2080;
            *(_QWORD *)&buf[30] = __str;
            _os_log_error_impl(&dword_1B8270000, v29, OS_LOG_TYPE_ERROR, "%s:%d: Sleeping %lf seconds for non-priority dataclass %s", buf, 0x26u);
          }
          for (*__error() = v28; *(double *)v251 > 0.0; *(double *)v251 = *(double *)v251 + -0.100000001)
          {
            if (*((_DWORD *)v5 + 9))
              break;
            usleep(0x186A0u);
          }
        }
      }
      v22 = v235;
      v15 = (uint64_t)v5;
    }
  }
  v241 = v15;
  do
  {
    v30 = __ldxr(exceptionSequenceNum);
    v31 = v30 + 1;
  }
  while (__stxr(v30 + 1, exceptionSequenceNum));
  v250 = 0;
  v249 = 0;
  v248 = 0;
  v32 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, *(_QWORD *)(*v22 + 1184), 0x40000000, v31);
  v250 = v32;
  v249 = __PAIR64__(HIDWORD(v32), v33);
  v248 = v34;
  v35 = *(_QWORD *)&threadData[18 * v32 + 2];
  v36 = v35 + 320 * HIDWORD(v32);
  *(_BYTE *)(v36 + 216) = 0;
  v236 = *(_DWORD *)(v36 + 312);
  v37 = *(void (**)(_QWORD))(v36 + 224);
  if (v37)
    v37(*(_QWORD *)(v35 + 320 * HIDWORD(v32) + 288));
  v38 = v31;
  v247 = v250;
  v246 = HIDWORD(v249);
  v245 = __PAIR64__(v249, v248);
  if (_setjmp((int *)v36))
  {
    v39 = (_DWORD *)(v36 + 312);
    v40 = *__error();
    v41 = _SILogForLogForCategory(0);
    v14 = v240;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__str = 136315394;
      *(_QWORD *)&__str[4] = "finishRegisterQuery";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 19445;
      _os_log_error_impl(&dword_1B8270000, v41, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", (uint8_t *)__str, 0x12u);
    }
    *__error() = v40;
    *v39 = v236;
    CIOnThreadCleanUpReset(v245);
    dropThreadId(v247, 1, v38);
    CICleanUpReset(v247, HIDWORD(v245));
    v12 = (_DWORD *)&unk_1EF19F000;
    v15 = v241;
    goto LABEL_7;
  }
  v242 = v7;
  v237 = v31;
  if (dword_1EF19FC90 >= 5)
  {
    v222 = *__error();
    v223 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v223, OS_LOG_TYPE_DEFAULT))
    {
      v224 = *(_QWORD *)(v9 + 8);
      *(_DWORD *)__str = 138412290;
      *(_QWORD *)&__str[4] = v224;
      _os_log_impl(&dword_1B8270000, v223, OS_LOG_TYPE_DEFAULT, "finishRegisterQuery %@", (uint8_t *)__str, 0xCu);
    }
    *__error() = v222;
  }
  v42 = *(_QWORD **)(v9 + 80);
  v43 = v235;
  if ((*(_BYTE *)(v9 + 201) & 4) != 0)
  {
    if (v42)
    {
      v45 = *(_QWORD *)(v9 + 72);
      if (v45)
      {
        tree_apply_block_with_meta = makeAndNode((uint64_t)v42, v45, 0, 1);
      }
      else
      {
        *(_QWORD *)__str = MEMORY[0x1E0C809B0];
        *(_QWORD *)&__str[8] = 0x40000000;
        *(_QWORD *)&__str[16] = __db_query_tree_apply_block_block_invoke;
        *(_QWORD *)&__str[24] = &unk_1E6E377F8;
        *(_QWORD *)&v253 = &__block_literal_global_17_10736;
        tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(v42, (uint64_t)__str, (uint64_t)&__block_literal_global_20_10737);
      }
      *(_QWORD *)(v9 + 72) = tree_apply_block_with_meta;
    }
  }
  else if (v42)
  {
    v44 = *(_QWORD *)(v9 + 72);
    if (v44)
      v42 = (_QWORD *)makeAndNode((uint64_t)v42, v44, 1, 1);
    *(_QWORD *)(v9 + 72) = v42;
    *(_QWORD *)(v9 + 80) = 0;
  }
  v48 = *v235;
  v47 = v235[1];
  if (*(_BYTE *)(*v235 + 2072))
    decorateExpandingFunctions(*(_QWORD **)(v47 + 72), *(_QWORD *)v47, *(const void **)(v47 + 656), *(double *)(v47 + 360));
  bzero(__str, 0x400uLL);
  v49 = *(_QWORD *)(v48 + 1416);
  if (v49 && !*(_BYTE *)(v49 + 240))
    v50 = (*(uint64_t (**)(uint64_t, uint64_t, char *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(v49 + 40))(v49, 2, __str, 0, 0, 0, 0, -1);
  else
    v50 = 0;
  processScopeTerms(v48, v50, *(_DWORD *)(v48 + 1992), *(_QWORD **)(v47 + 72), (uint64_t)"_kMDQueryScope");
  pushSkipCrashState();
  v244 = 0;
  memset(v243, 0, sizeof(v243));
  v14 = v240;
  si_opt_cache_init((CFMutableSetRef *)v243, *((_QWORD *)v240 + 11));
  if (!*(_BYTE *)(v9 + 688))
    si_query_prepare_lifting(v238, v9, (uint64_t)v243);
  if (*(_BYTE *)(v9 + 672) || *(_QWORD *)(v9 + 680))
  {
    v51 = _os_feature_enabled_impl();
    v52 = *(_DWORD *)(v238 + 60);
    if ((v52 & 1) != 0)
    {
      v54 = "cs_priority";
    }
    else
    {
      v53 = (v52 >> 1) - 1;
      if (v53 > 6)
        v54 = "cs_default";
      else
        v54 = off_1E6E35AF8[v53];
    }
    v229 = *(_DWORD *)(v9 + 152);
    v230 = *(__CFString **)(v9 + 32);
    v55 = *(_QWORD **)(v9 + 96);
    v56 = *(_QWORD *)(v9 + 608);
    v57 = *(const __CFAttributedString **)(v9 + 736);
    v58 = *(const __CFArray **)(v9 + 696);
    v59 = (const __CFArray *)v235[4];
    v60 = *(_QWORD ***)(v9 + 728);
    v61 = *(const __CFArray **)(v9 + 720);
    if (v61)
      Count = CFArrayGetCount(v61);
    else
      Count = 0;
    *(_QWORD *)buf = PRCreateQueryTree(v55, v56, v230, v57, 0, v229 == 0, (uint64_t)v54, v58, *(const __CFDictionary **)(v9 + 704), *(_QWORD *)(v9 + 712), v59, v60, Count, *(const __CFArray **)(v9 + 680));
    decorateExpandingFunctions(*(_QWORD **)buf, *(_QWORD *)v9, *(const void **)(v9 + 656), *(double *)(v9 + 360));
    db_optimize_query_tree((_QWORD **)buf);
    v7 = v242;
    v43 = v235;
    if (*(_QWORD *)buf)
    {
      v231 = v51;
      if (v51)
      {
        v63 = *(const __CFDictionary **)(v238 + 72);
        if (v63
          && (Value = (const __CFDictionary *)CFDictionaryGetValue(v63, CFSTR("clientStates"))) != 0
          && (v65 = Value, CFDictionaryGetCount(Value) >= 1))
        {
          Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
          v67 = CFDictionaryGetCount(v65);
          v68 = (const void **)malloc_type_malloc(8 * v67, 0x80040B8603338uLL);
          CFDictionaryGetKeysAndValues(v65, v68, 0);
          if (v67 >= 1)
          {
            for (i = 0; i != v67; ++i)
            {
              v70 = (const __CFString *)v68[i];
              if (i)
                CFStringAppendCString(Mutable, ", ", 0x8000100u);
              CFStringAppend(Mutable, v70);
            }
          }
          free(v68);
        }
        else
        {
          Mutable = 0;
        }
        v257 = 0;
        v255 = 0u;
        v256 = 0u;
        v253 = 0u;
        v254 = 0u;
        memset(__str, 0, sizeof(__str));
        snprintf(__str, 0x64uLL, "[POMMES][qid=%llu] pommes", *(_QWORD *)(v9 + 608));
        v72 = strdup(__str);
        db_dump_query_node_with_prefix((uint64_t)v72);
        if (v72)
          free(v72);
        v71 = (uint64_t)v54;
        print_full_query_tree((uint64_t)buf, 0, v9, (uint64_t)Mutable, (uint64_t)v54);
      }
      else
      {
        v71 = (uint64_t)v54;
        Mutable = 0;
      }
      db_free_query_node(*(_QWORD **)(v9 + 72));
      *(_QWORD *)(v9 + 72) = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      v73 = *(_QWORD **)(v9 + 96);
      v74 = *(_QWORD *)(v9 + 608);
      v75 = *(const __CFAttributedString **)(v9 + 736);
      v76 = *(const __CFArray **)(v9 + 696);
      v77 = (const __CFArray *)v235[4];
      v78 = *(_QWORD ***)(v9 + 728);
      v79 = *(const __CFArray **)(v9 + 720);
      if (v79)
        v80 = CFArrayGetCount(v79);
      else
        v80 = 0;
      v251[0] = (_QWORD *)PRCreateQueryTree(v73, v74, v230, v75, 1, v229 == 0, v71, v76, *(const __CFDictionary **)(v9 + 704), *(_QWORD *)(v9 + 712), v77, v78, v80, *(const __CFArray **)(v9 + 680));
      decorateExpandingFunctions(v251[0], *(_QWORD *)v9, *(const void **)(v9 + 656), *(double *)(v9 + 360));
      db_optimize_query_tree(v251);
      v81 = v231;
      if (!v251[0])
        v81 = 0;
      v82 = v251[0];
      v7 = v242;
      if (v81 == 1)
      {
        v257 = 0;
        v255 = 0u;
        v256 = 0u;
        v253 = 0u;
        v254 = 0u;
        memset(__str, 0, sizeof(__str));
        snprintf(__str, 0x64uLL, "[POMMES][qid=%llu] pommesWeighted", *(_QWORD *)(v9 + 608));
        v83 = strdup(__str);
        db_dump_query_node_with_prefix((uint64_t)v83);
        if (v83)
          free(v83);
        print_full_query_tree((uint64_t)v251, 1, v9, (uint64_t)Mutable, v71);
        v82 = v251[0];
      }
      v251[0] = optimizeLiftingQuery(v238, (uint64_t)v82, (uint64_t)v243);
      *(_QWORD *)__str = MEMORY[0x1E0C809B0];
      *(_QWORD *)&__str[8] = 0x40000000;
      *(_QWORD *)&__str[16] = __db_query_tree_apply_block_block_invoke;
      *(_QWORD *)&__str[24] = &unk_1E6E377F8;
      *(_QWORD *)&v253 = &__block_literal_global_17_10736;
      *(_QWORD *)(v9 + 272) = db_query_tree_apply_block_with_meta(v251[0], (uint64_t)__str, (uint64_t)&__block_literal_global_20_10737);
      db_free_query_node(v251[0]);
      if (Mutable)
        CFRelease(Mutable);
      v43 = v235;
    }
    v14 = v240;
  }
  si_opt_cache_destroy((uint64_t)v243);
  v84 = *(_QWORD *)(v9 + 72);
  if (v84)
  {
    v85 = *(_QWORD *)(v9 + 88);
    if (v85)
      *(_QWORD *)(v9 + 72) = makeORNode(v85, v84, 0);
  }
  popSkipCrashState();
  v86 = *v43;
  if (*(_BYTE *)(*v43 + 2072) || !*(_DWORD *)(v86 + 56))
  {
    v87 = *(_QWORD *)(v86 + 1184);
    if (v87)
    {
      v88 = 2;
      goto LABEL_102;
    }
  }
  else
  {
    v87 = *(_QWORD *)(v86 + 1184);
    if (v87)
    {
      v88 = 3;
LABEL_102:
      v89 = v88;
      object_count = db_get_object_count(v87);
      v91 = *v43;
      v92 = object_count < v89;
      v93 = v92;
      v94 = *v43;
      if (!*v43)
        goto LABEL_109;
      goto LABEL_105;
    }
  }
  v93 = 0;
  v91 = *v43;
LABEL_105:
  v94 = v91;
  v95 = v43[1];
  if (!*(_BYTE *)(v95 + 356) && *(_BYTE *)(v94 + 2072))
  {
    v96 = (_QWORD *)(v95 + 300);
    v96[1] = 0x80041A00000;
    v96[2] = 0x80041A00000;
    *v96 = 0x2003E4CCCCDLL;
  }
  v92 = v93;
LABEL_109:
  if (!*(_QWORD *)(v94 + 1184) || (v97 = v43[1], (*(_BYTE *)(v97 + 201) & 4) != 0))
  {
    v99 = 1;
  }
  else
  {
    v98 = *(_QWORD **)(v97 + 72);
    v251[0] = (_QWORD *)MEMORY[0x1E0C809B0];
    v251[1] = (_QWORD *)0x40000000;
    v251[2] = __si_setup_run_stubquery_block_invoke;
    v251[3] = &__block_descriptor_tmp_90;
    v251[4] = v43;
    *(_QWORD *)__str = MEMORY[0x1E0C809B0];
    *(_QWORD *)&__str[8] = 0x40000000;
    *(_QWORD *)&__str[16] = __db_query_tree_apply_block_block_invoke;
    *(_QWORD *)&__str[24] = &unk_1E6E377F8;
    *(_QWORD *)&v253 = v251;
    v99 = db_query_tree_apply_block_with_meta(v98, (uint64_t)__str, (uint64_t)&__block_literal_global_7512) != 0;
  }
  v100 = (unsigned int *)(v43[2] + 64);
  do
    v101 = __ldxr(v100);
  while (__stxr(v101 + 1, v100));
  priority = query_priority((_QWORD *)v43[1]);
  if (priority)
  {
    if (priority == 3)
    {
      v105 = 33;
      v106 = 1;
      v104 = 16;
      goto LABEL_123;
    }
    if (priority == 1)
    {
      v103 = 17;
      v104 = 14;
    }
    else
    {
      v103 = 25;
      v104 = 15;
    }
  }
  else
  {
    v103 = 9;
    v104 = 13;
  }
  v106 = 0;
  v105 = v103;
LABEL_123:
  v107 = v105;
  v233 = v106;
  v108 = v104;
  *((CFAbsoluteTime *)v43 + 3) = CFAbsoluteTimeGetCurrent();
  v109 = *(_QWORD *)(*v43 + 8 * v108 + 1008);
  if (!v109)
  {
    v113 = *(_QWORD *)(v43[1] + 200);
    v114 = v43[1];
    v12 = (_DWORD *)&unk_1EF19F000;
LABEL_164:
    v145 = v237;
    if ((v113 & 0x40000) == 0)
      si_querypipe_remove_process(v43[2], v114, 0, 1);
    v146 = (const void *)v43[4];
    if (v146)
      CFRelease(v146);
    free(v43);
    v147 = v241;
    goto LABEL_191;
  }
  v12 = (_DWORD *)&unk_1EF19F000;
  if (v92 || !v99)
  {
    v110 = v43[1];
    if ((*(_QWORD *)(v110 + 200) & 0x3044000) == 0)
    {
      v113 = *(_QWORD *)(v110 + 200);
      v114 = v43[1];
      goto LABEL_164;
    }
  }
  v232 = v109;
  v111 = (const void *)v43[4];
  if (v111)
    v112 = CFRetain(v111);
  else
    v112 = 0;
  v115 = v43[1];
  *(_QWORD *)(v115 + 664) = v112;
  if (*(_DWORD *)(v115 + 152) >= 5u)
  {
    *(_BYTE *)(v43[2] + 98) = 1;
    v115 = v43[1];
    if (!*(_QWORD *)(v115 + 160))
    {
      *(_BYTE *)(v43[2] + 99) = 0;
      v115 = v43[1];
    }
  }
  v116 = *v43;
  v234 = v107;
  if (*(_BYTE *)(*v43 + 2072))
  {
    v227 = *v43;
    v117 = *(_QWORD **)(v115 + 72);
    v118 = MEMORY[0x1E0C809B0];
    *(_QWORD *)__str = MEMORY[0x1E0C809B0];
    *(_QWORD *)&__str[8] = 0x40000000;
    *(_QWORD *)&__str[16] = __db_query_tree_apply_block_block_invoke;
    *(_QWORD *)&__str[24] = &unk_1E6E377F8;
    *(_QWORD *)&v253 = &__block_literal_global_290;
    *(_QWORD *)(v115 + 72) = db_query_tree_apply_block_with_meta(v117, (uint64_t)__str, (uint64_t)&__block_literal_global_292);
    v119 = *(_QWORD *)(v115 + 256);
    if (v119 >= 1)
    {
      v120 = 0;
      do
      {
        v121 = v120;
        v122 = *(_QWORD **)(*(_QWORD *)(v115 + 248) + 8 * v120);
        *(_QWORD *)__str = v118;
        *(_QWORD *)&__str[8] = 0x40000000;
        *(_QWORD *)&__str[16] = __db_query_tree_apply_block_block_invoke;
        *(_QWORD *)&__str[24] = &unk_1E6E377F8;
        *(_QWORD *)&v253 = &__block_literal_global_290;
        *(_QWORD *)(*(_QWORD *)(v115 + 248) + 8 * v120) = db_query_tree_apply_block_with_meta(v122, (uint64_t)__str, (uint64_t)&__block_literal_global_292);
        v120 = v121 + 1;
      }
      while (v119 != v121 + 1);
    }
    v225 = *(_QWORD *)(v115 + 288);
    if (v225 >= 1)
    {
      v123 = 0;
      v124 = *(_QWORD *)(v115 + 264);
      do
      {
        if (*(uint64_t *)(v124 + 24 * v123 + 8) < 1)
        {
          v127 = v124;
        }
        else
        {
          v125 = 0;
          do
          {
            v126 = *(_QWORD **)(*(_QWORD *)(v124 + 24 * v123) + 8 * v125);
            *(_QWORD *)__str = v118;
            *(_QWORD *)&__str[8] = 0x40000000;
            *(_QWORD *)&__str[16] = __db_query_tree_apply_block_block_invoke;
            *(_QWORD *)&__str[24] = &unk_1E6E377F8;
            *(_QWORD *)&v253 = &__block_literal_global_290;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v115 + 264) + 24 * v123) + 8 * v125++) = db_query_tree_apply_block_with_meta(v126, (uint64_t)__str, (uint64_t)&__block_literal_global_292);
            v124 = *(_QWORD *)(v115 + 264);
            v127 = v124;
          }
          while (v125 < *(_QWORD *)(v124 + 24 * v123 + 8));
        }
        v124 = v127;
        ++v123;
      }
      while (v123 != v225);
    }
    *(_QWORD *)buf = v118;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = __queryRemapFieldsForStore_block_invoke_3;
    *(_QWORD *)&buf[24] = &__block_descriptor_tmp_296;
    *(_QWORD *)&buf[32] = v227;
    v128 = *(_QWORD **)(v115 + 72);
    *(_QWORD *)__str = v118;
    *(_QWORD *)&__str[8] = 0x40000000;
    *(_QWORD *)&__str[16] = __db_query_tree_apply_block_block_invoke;
    *(_QWORD *)&__str[24] = &unk_1E6E377F8;
    *(_QWORD *)&v253 = buf;
    *(_QWORD *)(v115 + 72) = db_query_tree_apply_block_with_meta(v128, (uint64_t)__str, (uint64_t)&__block_literal_global_298);
    if (*(uint64_t *)(v115 + 256) >= 1)
    {
      v129 = 0;
      do
      {
        v130 = v129;
        v131 = *(_QWORD **)(*(_QWORD *)(v115 + 248) + 8 * v129);
        *(_QWORD *)__str = v118;
        *(_QWORD *)&__str[8] = 0x40000000;
        *(_QWORD *)&__str[16] = __db_query_tree_apply_block_block_invoke;
        *(_QWORD *)&__str[24] = &unk_1E6E377F8;
        *(_QWORD *)&v253 = buf;
        *(_QWORD *)(*(_QWORD *)(v115 + 248) + 8 * v129) = db_query_tree_apply_block_with_meta(v131, (uint64_t)__str, (uint64_t)&__block_literal_global_298);
        v129 = v130 + 1;
      }
      while (v130 + 1 < *(_QWORD *)(v115 + 256));
    }
    v12 = (_DWORD *)&unk_1EF19F000;
    if (*(uint64_t *)(v115 + 288) >= 1)
    {
      v132 = 0;
      v133 = *(_QWORD *)(v115 + 288);
      v134 = *(_QWORD *)(v115 + 264);
      do
      {
        if (*(uint64_t *)(v134 + 24 * v132 + 8) < 1)
        {
          v139 = v133;
          v138 = v134;
        }
        else
        {
          v135 = 0;
          do
          {
            v136 = v135;
            v137 = *(_QWORD **)(*(_QWORD *)(v134 + 24 * v132) + 8 * v135);
            *(_QWORD *)__str = v118;
            *(_QWORD *)&__str[8] = 0x40000000;
            *(_QWORD *)&__str[16] = __db_query_tree_apply_block_block_invoke;
            *(_QWORD *)&__str[24] = &unk_1E6E377F8;
            *(_QWORD *)&v253 = buf;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v115 + 264) + 24 * v132) + 8 * v135) = db_query_tree_apply_block_with_meta(v137, (uint64_t)__str, (uint64_t)&__block_literal_global_298);
            v135 = v136 + 1;
            v138 = *(_QWORD *)(v115 + 264);
            v134 = v138;
          }
          while (v136 + 1 < *(_QWORD *)(v138 + 24 * v132 + 8));
          v139 = *(_QWORD *)(v115 + 288);
          v12 = (_DWORD *)&unk_1EF19F000;
        }
        v134 = v138;
        ++v132;
        v133 = v139;
      }
      while (v132 < v139);
    }
  }
  else
  {
    v140 = si_attrs_remapping_copy(*(const __CFArray **)(v115 + 16), (*(_DWORD *)(v116 + 6584) >> 6) & 1);
    if (v140)
    {
      v141 = v140;
      CFRelease(*(CFTypeRef *)(v115 + 16));
      *(_QWORD *)(v115 + 16) = v141;
    }
    v142 = si_attrs_remapping_copy(*(const __CFArray **)(v115 + 40), (*(_DWORD *)(v116 + 6584) >> 6) & 1);
    if (v142)
    {
      v143 = v142;
      CFRelease(*(CFTypeRef *)(v115 + 40));
      *(_QWORD *)(v115 + 40) = v143;
    }
    if ((*(_BYTE *)(v116 + 6584) & 0x40) != 0)
      v144 = si_cab_attr_rewriteDict();
    else
      v144 = si_attr_rewriteDict();
    v148 = MEMORY[0x1E0C809B0];
    *(_QWORD *)__str = MEMORY[0x1E0C809B0];
    *(_QWORD *)&__str[8] = 0x40000000;
    *(_QWORD *)&__str[16] = __queryRemapFieldsForStore_block_invoke_5;
    *(_QWORD *)&__str[24] = &__block_descriptor_tmp_314;
    *(_QWORD *)&v253 = v115;
    *((_QWORD *)&v253 + 1) = v116;
    *(_QWORD *)&v254 = v144;
    v149 = *(_QWORD **)(v115 + 72);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E6E377F8;
    *(_QWORD *)&buf[32] = __str;
    *(_QWORD *)(v115 + 72) = db_query_tree_apply_block_with_meta(v149, (uint64_t)buf, (uint64_t)&__block_literal_global_316);
    if (*(uint64_t *)(v115 + 256) >= 1)
    {
      v150 = 0;
      do
      {
        v151 = v150;
        v152 = *(_QWORD **)(*(_QWORD *)(v115 + 248) + 8 * v150);
        *(_QWORD *)buf = v148;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E6E377F8;
        *(_QWORD *)&buf[32] = __str;
        *(_QWORD *)(*(_QWORD *)(v115 + 248) + 8 * v150) = db_query_tree_apply_block_with_meta(v152, (uint64_t)buf, (uint64_t)&__block_literal_global_316);
        v150 = v151 + 1;
      }
      while (v151 + 1 < *(_QWORD *)(v115 + 256));
    }
    v12 = &unk_1EF19F000;
    if (*(uint64_t *)(v115 + 288) >= 1)
    {
      v153 = 0;
      v154 = *(_QWORD *)(v115 + 288);
      v155 = *(_QWORD *)(v115 + 264);
      do
      {
        if (*(uint64_t *)(v155 + 24 * v153 + 8) < 1)
        {
          v160 = v154;
          v159 = v155;
        }
        else
        {
          v156 = 0;
          do
          {
            v157 = v156;
            v158 = *(_QWORD **)(*(_QWORD *)(v155 + 24 * v153) + 8 * v156);
            *(_QWORD *)buf = v148;
            *(_QWORD *)&buf[8] = 0x40000000;
            *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
            *(_QWORD *)&buf[24] = &unk_1E6E377F8;
            *(_QWORD *)&buf[32] = __str;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v115 + 264) + 24 * v153) + 8 * v156) = db_query_tree_apply_block_with_meta(v158, (uint64_t)buf, (uint64_t)&__block_literal_global_316);
            v156 = v157 + 1;
            v159 = *(_QWORD *)(v115 + 264);
            v155 = v159;
          }
          while (v157 + 1 < *(_QWORD *)(v159 + 24 * v153 + 8));
          v160 = *(_QWORD *)(v115 + 288);
          v12 = (_DWORD *)&unk_1EF19F000;
        }
        v155 = v159;
        ++v153;
        v154 = v160;
      }
      while (v153 < v160);
    }
  }
  v161 = (uint64_t)v235;
  v162 = (unsigned int *)(v235[1] + 584);
  do
    v163 = __ldaxr(v162);
  while (__stlxr(v163 + 1, v162));
  v164 = (unsigned int *)v235[2];
  v14 = v240;
  v147 = v241;
  do
    v165 = __ldaxr(v164);
  while (__stlxr(v165 + 1, v164));
  v166 = (unsigned int *)(v235[2] + 64);
  do
    v167 = __ldxr(v166);
  while (__stxr(v167 + 1, v166));
  v168 = si_querypipe_copy_jobid(v235[2]);
  v169 = (uint64_t)v168;
  v170 = v235[1];
  if ((*(_DWORD *)(v170 + 152) - 1) >= 2 && (*(_DWORD *)(v170 + 200) & 0x10000400) == 0)
  {
    v176 = *v235;
    v177 = v233 ^ 1;
    if (!*(_BYTE *)(*v235 + 2072))
      v177 = 1;
    if ((v177 & 1) != 0)
    {
      if (!v168)
      {
        si_enqueue_work_with_qos(v232, v234, (uint64_t)queryGo, (uint64_t)v235);
        v7 = v242;
        v145 = v237;
        goto LABEL_191;
      }
      goto LABEL_218;
    }
    v178 = *(const __CFArray **)(v170 + 664);
    if (v178 && CFArrayGetCount(*(CFArrayRef *)(v170 + 664)) == 1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v178, 0);
      v180 = CFGetTypeID(ValueAtIndex);
      if (v180 != CFStringGetTypeID())
      {
        v181 = 0;
        v14 = v240;
LABEL_215:
        v161 = (uint64_t)v235;
        if (v181 || !v169)
          goto LABEL_189;
        v176 = *v235;
LABEL_218:
        v184 = *(const __CFArray **)(v170 + 664);
        if (v184)
        {
          v228 = v176;
          if (*(_BYTE *)(v176 + 2072))
          {
            if (CFArrayGetCount(v184) == 1)
            {
              v185 = CFArrayGetValueAtIndex(v184, 0);
              if (v185 == (const void *)1 || CFEqual(v185, CFSTR("com.apple.searchd")))
                goto LABEL_255;
            }
          }
          v226 = (pthread_mutex_t *)(v228 + 1320);
          pthread_mutex_lock((pthread_mutex_t *)(v228 + 1320));
          v186 = *(_QWORD *)(v228 + 1144);
          if (v186 && si_peek_queue_for_tags(v186, (uint64_t)v184))
          {
            if (*(_BYTE *)(v228 + 2072))
            {
              v187 = v184;
              v188 = *__error();
              v189 = _SILogForLogForCategory(1);
              v190 = 2 * (v12[804] < 4);
              if (os_log_type_enabled(v189, v190))
              {
                *(_DWORD *)__str = 138412290;
                *(_QWORD *)&__str[4] = v187;
                _os_log_impl(&dword_1B8270000, v189, v190, "long defer query for %@", (uint8_t *)__str, 0xCu);
              }
              *__error() = v188;
              v161 = (uint64_t)v235;
              v184 = v187;
            }
            si_enqueue_barrier_routine(v228, v169, (uint64_t (*)(uint64_t, uint64_t))enqueueQuery, v161, 0x11u);
            pthread_mutex_unlock(v226);
            v145 = v237;
            if (!*(_BYTE *)(v228 + 2072))
              goto LABEL_247;
            v191 = v184;
            v192 = *__error();
            v193 = _SILogForLogForCategory(1);
            v194 = 2 * (v12[804] < 4);
            if (os_log_type_enabled(v193, v194))
            {
              *(_DWORD *)__str = 138412290;
              *(_QWORD *)&__str[4] = v191;
              _os_log_impl(&dword_1B8270000, v193, v194, "long defer query for %@", (uint8_t *)__str, 0xCu);
            }
            *__error() = v192;
            v184 = v191;
            v195 = v228;
LABEL_243:
            if (*(_BYTE *)(v195 + 2072))
            {
              v206 = v184;
              v207 = *__error();
              v208 = _SILogForLogForCategory(1);
              v209 = 2 * (v12[804] < 4);
              if (os_log_type_enabled(v208, v209))
              {
                *(_DWORD *)__str = 138412290;
                *(_QWORD *)&__str[4] = v206;
                _os_log_impl(&dword_1B8270000, v208, v209, "do defer query for %@", (uint8_t *)__str, 0xCu);
              }
              *__error() = v207;
            }
LABEL_247:
            v210 = *__error();
            v211 = _SILogForLogForCategory(3);
            v14 = v240;
            if (os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT))
            {
              v212 = *(_QWORD *)(v170 + 608);
              v213 = *(_QWORD *)(v170 + 616);
              *(_DWORD *)__str = 134218240;
              *(_QWORD *)&__str[4] = v212;
              *(_WORD *)&__str[12] = 2048;
              *(_QWORD *)&__str[14] = v213;
              _os_log_impl(&dword_1B8270000, v211, OS_LOG_TYPE_DEFAULT, "Stalling qid=(%lld,%lld) because the task has data in the set queue", (uint8_t *)__str, 0x16u);
            }
            *__error() = v210;
            v147 = v241;
            v7 = v242;
            goto LABEL_190;
          }
          pthread_mutex_unlock(v226);
          v201 = *(_QWORD *)(v228 + 1048);
          if (v201 && si_peek_queue_for_tags(v201, (uint64_t)v184))
          {
            v195 = v228;
            v145 = v237;
            if (*(_BYTE *)(v228 + 2072))
            {
              v202 = v184;
              v203 = *__error();
              v204 = _SILogForLogForCategory(1);
              v205 = 2 * (v12[804] < 4);
              if (os_log_type_enabled(v204, v205))
              {
                *(_DWORD *)__str = 138412290;
                *(_QWORD *)&__str[4] = v202;
                _os_log_impl(&dword_1B8270000, v204, v205, "defer query for %@", (uint8_t *)__str, 0xCu);
              }
              *__error() = v203;
              v161 = (uint64_t)v235;
              v184 = v202;
              v195 = v228;
            }
            si_enqueue_barrier_routine(v195, v169, (uint64_t (*)(uint64_t, uint64_t))enqueueQuery, v161, 5u);
            goto LABEL_243;
          }
          v14 = v240;
          if (!*(_BYTE *)(v228 + 2072))
          {
LABEL_255:
            si_enqueue_work_with_qos(v232, v234, (uint64_t)queryGo, v161);
            v7 = v242;
            v145 = v237;
            goto LABEL_190;
          }
          v214 = v184;
          v196 = *__error();
          v197 = _SILogForLogForCategory(1);
          v198 = 2 * (v12[804] < 4);
          if (os_log_type_enabled(v197, v198))
          {
            *(_DWORD *)__str = 138412290;
            *(_QWORD *)&__str[4] = v214;
            v199 = "don't defer query for %@";
            v200 = 12;
            goto LABEL_253;
          }
        }
        else
        {
          v196 = *__error();
          v197 = _SILogForLogForCategory(1);
          v198 = 2 * (v12[804] < 4);
          if (os_log_type_enabled(v197, v198))
          {
            *(_WORD *)__str = 0;
            v199 = "no tags";
            v200 = 2;
LABEL_253:
            _os_log_impl(&dword_1B8270000, v197, v198, v199, (uint8_t *)__str, v200);
          }
        }
        v14 = v240;
        *__error() = v196;
        v161 = (uint64_t)v235;
        goto LABEL_255;
      }
      v14 = v240;
      if (CFStringHasPrefix(ValueAtIndex, CFSTR("com.apple")))
      {
        if (tag_is_excepted_once != -1)
          dispatch_once(&tag_is_excepted_once, &__block_literal_global_282);
        v181 = CFSetContainsValue((CFSetRef)tag_is_excepted_exceptedIds, ValueAtIndex) != 0;
        goto LABEL_215;
      }
    }
    v181 = 0;
    goto LABEL_215;
  }
LABEL_189:
  si_enqueue_work_with_qos(v232, v234, (uint64_t)queryGo, v161);
  v7 = v242;
  v145 = v237;
  if (v169)
LABEL_190:
    si_release_qid(v169);
LABEL_191:
  if (!*(_DWORD *)(v147 + 36) && (*(_BYTE *)(v9 + 201) & 4) != 0)
  {
    v171 = *(const __CFArray **)(v9 + 176);
    if ((!v171 || CFArrayGetCount(v171)) && (*(_BYTE *)(v238 + 828) & 0xC) == 0)
    {
      v182 = si_add_livequery(v238, (unsigned int *)v9, v14);
      v183 = (pthread_mutex_t *)(v239 + 6);
      pthread_mutex_lock((pthread_mutex_t *)(v239 + 6));
      if (*(_DWORD *)(v147 + 36))
      {
        pthread_mutex_unlock(v183);
        v14 = v240;
        if (v182)
        {
          si_remove_livequery(v238, v182);
          si_livequery_release((uint64_t)v182);
        }
      }
      else
      {
        *(_QWORD *)(v147 + 16) = v182;
        pthread_mutex_unlock(v183);
        v14 = v240;
      }
    }
  }
  v172 = *(_QWORD *)&threadData[18 * v247 + 2];
  v173 = v246;
  v174 = v172 + 320 * v246;
  *(_DWORD *)(v174 + 312) = v236;
  v175 = *(void (**)(_QWORD))(v174 + 232);
  if (v175)
    v175(*(_QWORD *)(v172 + 320 * v173 + 288));
  dropThreadId(v247, 0, v145);
  v15 = v147;
LABEL_7:
  v18 = CFAbsoluteTimeGetCurrent() - Current;
  *(double *)(v9 + 392) = *(double *)(v9 + 392) + v18;
  siquery_addactivetime(v9, v18);
  if ((int)v12[804] >= 5)
  {
    v217 = v15;
    v218 = *__error();
    v219 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v219, OS_LOG_TYPE_DEFAULT))
    {
      v220 = CFAbsoluteTimeGetCurrent() - Current;
      v221 = qos_class_self();
      *(_DWORD *)__str = 134218240;
      *(CFAbsoluteTime *)&__str[4] = v220;
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = v221;
      _os_log_impl(&dword_1B8270000, v219, OS_LOG_TYPE_DEFAULT, "Search was active (setup) for %f seconds on the scheduler at qos 0x%x", (uint8_t *)__str, 0x12u);
    }
    *__error() = v218;
    v15 = v217;
  }
  si_querypipe_remove_process((uint64_t)v14, v9, 0, 0);
  si_querypipe_release((uint64_t)v14);
  v19 = (unsigned int *)(v7 + 584);
  do
  {
    v20 = __ldaxr(v19);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v19));
  if (!v21)
    si_query_free(v9);
  si_release_qid(v15);
  free(a1);
}

unsigned int *si_querypipe_copy_jobid(uint64_t a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  do
  {
    v1 = a1;
    a1 = *(_QWORD *)(a1 + 80);
  }
  while (a1);
  pthread_mutex_lock(&jobsLock);
  v2 = *(unsigned int **)(v1 + 32);
  if (v2)
  {
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  pthread_mutex_unlock(&jobsLock);
  return v2;
}

void si_querypipe_release(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void *v4;
  NSObject *v5;
  const void *v6;

  do
  {
    v2 = __ldaxr((unsigned int *)a1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, (unsigned int *)a1));
  if (!v3)
  {
    if (*(_QWORD *)(a1 + 80))
    {
      si_querypipe_release();
    }
    else
    {
      SIResultQueueRelease(*(char **)(a1 + 8));
      CFRelease(*(CFTypeRef *)(a1 + 40));
    }
    v4 = *(const void **)(a1 + 24);
    if (v4)
      _Block_release(v4);
    v5 = *(NSObject **)(a1 + 16);
    if (v5)
    {
      dispatch_semaphore_signal(v5);
      dispatch_release(*(dispatch_object_t *)(a1 + 16));
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (*(_QWORD *)(a1 + 32))
      si_release_qid();
    v6 = *(const void **)(a1 + 88);
    if (v6)
      CFRelease(v6);
    free((void *)a1);
  }
}

int *siquery_addactivetime(uint64_t a1, double a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  int *result;
  int v9;
  double v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  qos_class_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  *(double *)(a1 + 456) = *(double *)(a1 + 456) + a2;
  v4 = *__error();
  v5 = _SILogForLogForCategory(1);
  v6 = 2 * (dword_1EF19FC90 < 4);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(a1 + 456);
    v9 = 134218496;
    v10 = a2;
    v11 = 2048;
    v12 = v7;
    v13 = 1024;
    v14 = qos_class_self();
    _os_log_impl(&dword_1B8270000, v5, v6, "siquery_addactivetime %g seconds to %g seconds 0x%x\n", (uint8_t *)&v9, 0x1Cu);
  }
  result = __error();
  *result = v4;
  return result;
}

void si_query_prepare_lifting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  int v17;
  int v18;
  NSObject *v19;
  uint8_t buf[8];
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  _QWORD v32[5];
  _BYTE v33[1024];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 288) && !*(_BYTE *)(a2 + 296))
  {
    *(_BYTE *)(a2 + 296) = 1;
    bzero(v33, 0x400uLL);
    v5 = *(_QWORD *)(a1 + 1416);
    if (v5 && !*(_BYTE *)(v5 + 240))
      v6 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(v5 + 40))(v5, 2, v33, 0, 0, 0, 0, -1);
    else
      v6 = 0;
    if (dword_1EF19FC90 >= 5)
    {
      v18 = *__error();
      v19 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "Preparing lifting rules", buf, 2u);
      }
      *__error() = v18;
    }
    v7 = *(_QWORD *)(a2 + 288);
    if (v7 >= 1)
    {
      v8 = 0;
      v9 = *(_QWORD *)(a2 + 264);
      v10 = MEMORY[0x1E0C809B0];
      do
      {
        if (*(uint64_t *)(v9 + 24 * v8 + 8) >= 1)
        {
          v11 = 0;
          do
          {
            processScopeTerms(a1, v6, *(_DWORD *)(a1 + 1992), *(_QWORD **)(*(_QWORD *)(v9 + 24 * v8) + 8 * v11), (uint64_t)"_kMDQueryItemInScopeForRankingOnly");
            v12 = (int *)translateSDBQuery(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 264) + 24 * v8) + 8 * v11));
            v13 = compileToIndexQuery((uint64_t)v12, *(double *)(a2 + 360));
            siquerynode_release(v12);
            db_free_query_node(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a2 + 264) + 24 * v8) + 8 * v11));
            v14 = optimizeLiftingQuery(a1, v13, a3);
            v15 = v14;
            if (*((_WORD *)v14 + 20) == 16)
              goto LABEL_14;
            v28 = 0;
            v29 = &v28;
            v30 = 0x2000000000;
            v31 = 0;
            v16 = (*(_DWORD *)(a1 + 6584) >> 19) & 3;
            *(_QWORD *)buf = v10;
            v22 = 0x40000000;
            v23 = __queryIsUnpalatable_block_invoke;
            v24 = &unk_1E6E353B0;
            v25 = &v28;
            v26 = a1;
            v27 = v16;
            v32[0] = v10;
            v32[1] = 0x40000000;
            v32[2] = __db_query_tree_apply_block_block_invoke;
            v32[3] = &unk_1E6E377F8;
            v32[4] = buf;
            db_query_tree_apply_block_with_meta(v14, (uint64_t)v32, 0);
            v17 = *((unsigned __int8 *)v29 + 24);
            _Block_object_dispose(&v28, 8);
            if (v17)
            {
LABEL_14:
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 264) + 24 * v8) + 8 * v11) = 0;
              *(_QWORD *)buf = v10;
              v22 = 0x40000000;
              v23 = __db_query_tree_apply_block_block_invoke;
              v24 = &unk_1E6E377F8;
              v25 = (uint64_t *)&__block_literal_global_143;
              db_query_tree_apply_block_with_meta(v15, (uint64_t)buf, 0);
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 264) + 24 * v8) + 8 * v11) = v15;
            }
            ++v11;
            v9 = *(_QWORD *)(a2 + 264);
          }
          while (*(_QWORD *)(v9 + 24 * v8 + 8) > v11);
          v7 = *(_QWORD *)(a2 + 288);
        }
        ++v8;
      }
      while (v8 < v7);
    }
  }
}

const void *si_opt_cache_init(CFMutableSetRef *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  const __CFArray *v5;
  const void *result;

  a1[2] = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *a1 = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, (const CFSetCallBacks *)&kCStringSetCallBacks);
  a1[1] = CFSetCreateMutable(v4, 0, (const CFSetCallBacks *)&kCStringSetCallBacks);
  if (a2 && (v5 = *(const __CFArray **)(a2 + 112)) != 0)
  {
    result = (const void *)CFArrayGetCount(v5);
    if (result)
    {
      result = CFArrayGetValueAtIndex(v5, 0);
      if (result)
        result = CFRetain(result);
    }
  }
  else
  {
    result = 0;
  }
  a1[4] = (CFMutableSetRef)result;
  return result;
}

void si_opt_cache_destroy(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (*(_QWORD *)(a1 + 16))
    SILocalizationRelease();
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  *(_QWORD *)a1 = 0;
  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *(const void **)(a1 + 32);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a1 + 32) = 0;
}

void decorateExpandingFunctions(_QWORD *a1, uint64_t a2, const void *a3, double a4)
{
  _QWORD *v8;
  BOOL v9;
  _QWORD v10[7];
  BOOL v11;
  _QWORD v12[5];

  v8 = si_calendar_retain();
  if (a3)
    v9 = CFEqual(a3, CFSTR("com.apple.finder")) != 0;
  else
    v9 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = __decorateExpandingFunctions_block_invoke;
  v10[3] = &__block_descriptor_tmp_7361;
  v10[4] = v8;
  *(double *)&v10[5] = a4;
  v10[6] = a2;
  v11 = v9;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = __db_query_tree_apply_block_block_invoke;
  v12[3] = &unk_1E6E377F8;
  v12[4] = v10;
  db_query_tree_apply_block_with_meta(a1, (uint64_t)v12, 0);
  if (v8)
    OSAtomicEnqueue(&s_si_calendar_head, v8, 0);
}

_QWORD *si_calendar_retain()
{
  _QWORD *v0;
  const __CFAllocator *v2;
  const __CFString *v3;
  __CFCalendar *v4;
  __CFCalendar *v5;

  v0 = OSAtomicDequeue(&s_si_calendar_head, 0);
  if (!v0)
  {
    v0 = malloc_type_malloc(0x28uLL, 0xE00401D00DCF7uLL);
    if (si_calendar_retain_once != -1)
      dispatch_once(&si_calendar_retain_once, &__block_literal_global_3854);
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE30];
    v3 = (const __CFString *)*MEMORY[0x1E0C9B008];
    v4 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x1E0C9AE30], (CFCalendarIdentifier)*MEMORY[0x1E0C9B008]);
    v0[1] = v4;
    CFCalendarSetTimeZone(v4, (CFTimeZoneRef)si_calendar_retain_s_local_tz);
    v0[3] = si_calendar_retain_s_local_tz;
    v5 = CFCalendarCreateWithIdentifier(v2, v3);
    v0[2] = v5;
    CFCalendarSetTimeZone(v5, (CFTimeZoneRef)si_calendar_retain_s_gmt_tz);
    v0[4] = si_calendar_retain_s_gmt_tz;
  }
  return v0;
}

void SIResultQueueRelease(char *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  void (*v6)(_QWORD, uint64_t);
  char *v7;
  char *v8;
  uint64_t v9;
  void ***v10;
  void **i;

  v2 = (unsigned int *)(a1 + 8);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    if (*((_DWORD *)a1 + 10))
    {
      v5 = 0;
      do
      {
        (*(void (**)(_QWORD, uint64_t))(*((_QWORD *)a1 + 3) + 8 * v5))(*(_QWORD *)(*((_QWORD *)a1 + 4) + 8 * v5), 1);
        ++v5;
      }
      while (v5 < *((unsigned int *)a1 + 10));
    }
    free(*((void **)a1 + 3));
    free(*((void **)a1 + 4));
    v6 = (void (*)(_QWORD, uint64_t))*((_QWORD *)a1 + 6);
    if (v6)
      v6(*((_QWORD *)a1 + 7), 1);
    v7 = *(char **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)v7 = "destroyed simple queue";
      pthread_mutex_destroy((pthread_mutex_t *)(v7 + 8));
      pthread_cond_destroy((pthread_cond_t *)(v7 + 72));
      v8 = (char *)*((_QWORD *)v7 + 17);
      v9 = *((unsigned int *)v7 + 31);
      v10 = (void ***)&v8[8 * v9];
      for (i = *v10; *v10; i = *v10)
      {
        *v10 = 0;
        *((_DWORD *)v7 + 31) = (*((_DWORD *)v7 + 30) - 1) & (v9 + 1);
        SIResultBatchFree(i);
        v8 = (char *)*((_QWORD *)v7 + 17);
        v9 = *((unsigned int *)v7 + 31);
        v10 = (void ***)&v8[8 * v9];
      }
      free(v8);
      free(v7);
    }
    free(a1);
  }
}

char *si_fileProvidersPsid_oid_to_path(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, const __CFString *a5, const __CFString *a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v9;
  const __CFURL *v11;
  const __CFURL *v12;
  const __CFString *v13;
  const __CFString *v14;
  uint64_t *v15;
  const __CFArray *v16;
  const __CFArray *v17;
  CFIndex Count;
  CFIndex v19;
  CFIndex v20;
  const __CFString *ValueAtIndex;
  size_t v22;
  size_t v23;
  const __CFString *v25;
  unint64_t v26;
  char __str[8];
  uint64_t v28;
  int v29;
  uint64_t v30;

  v9 = a5;
  v30 = *MEMORY[0x1E0C80C00];
  if (a5 || a2 != 2 || a7)
  {
    v15 = *(uint64_t **)(a1 + 16);
    v26 = -1;
    if (!a5)
      goto LABEL_26;
    if (!a7)
      goto LABEL_26;
    v16 = (const __CFArray *)(*(uint64_t (**)(uint64_t, const __CFString *, const __CFString *, uint64_t, uint64_t))(copyFPItemAllParentsBlock + 16))(copyFPItemAllParentsBlock, a5, a6, a7, a8);
    if (!v16)
      goto LABEL_26;
    v17 = v16;
    Count = CFArrayGetCount(v16);
    if (!Count)
      goto LABEL_26;
    v19 = Count;
    if (Count < 1)
    {
      a3 = 0;
    }
    else
    {
      v20 = 0;
      a3 = 0;
      v25 = v9;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v17, v20);
        si_get_object_for_identifier_createParentDBO(*v15, v9, ValueAtIndex, a6, 1, &v26, 0, 1u);
        *(_QWORD *)__str = 0;
        v28 = 0;
        v29 = 0;
        snprintf(__str, 0x14uLL, "%lld", v26);
        __str[strlen(__str)] = 0;
        if (a3)
        {
          v22 = strlen(a3);
          v23 = strlen(__str);
          MEMORY[0x1E0C80A78](v23);
          bzero((char *)&v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v22);
          strcpy((char *)&v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
          free(a3);
          a3 = (char *)malloc_type_malloc(v22 + v23 + 1, 0x100004077774924uLL);
          strcpy(a3, (const char *)&v25 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
          v9 = v25;
        }
        else
        {
          v23 = strlen(__str);
          a3 = (char *)malloc_type_malloc(v23 + 1, 0x100004077774924uLL);
          v22 = 0;
        }
        strcat(a3, __str);
        a3[v22 + v23] = 0;
        ++v20;
      }
      while (v19 != v20);
    }
    if (!*a3)
      goto LABEL_26;
    a3[strlen(a3)] = 0;
    return a3;
  }
  v11 = (const __CFURL *)CFCopyHomeDirectoryURLForUser();
  if (!v11)
  {
LABEL_26:
    a3 = 0;
    *__error() = 2;
    return a3;
  }
  v12 = v11;
  v13 = CFURLCopyFileSystemPath(v11, kCFURLPOSIXPathStyle);
  if (!v13)
  {
    CFRelease(v12);
    goto LABEL_26;
  }
  v14 = v13;
  if (CFStringGetCString(v13, a3, 1024, 0x8000100u))
    strcat(a3, "/Library/CloudStorage/iCloud Drive");
  else
    a3 = 0;
  CFRelease(v14);
  CFRelease(v12);
  if (!a3)
    goto LABEL_26;
  return a3;
}

os_signpost_id_t SIExecuteQueryWithResultsCallbackForTags(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, const __CFArray *a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  const __CFAllocator *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t MutableCopy;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *tree_apply_block_with_meta;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD **v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  CFTypeRef v65;
  uint64_t v66;
  _QWORD *v67;
  const __CFArray *v68;
  CFIndex Count;
  uint64_t v70;
  const void *v71;
  uint64_t i;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  unsigned int v77;
  const void *v78;
  unsigned int *v79;
  unsigned int v80;
  const __CFArray *v81;
  char v82;
  const __CFString *ValueAtIndex;
  const __CFString *v84;
  CFTypeID v85;
  CFComparisonResult v86;
  uint64_t v87;
  uint64_t **v88;
  int priority;
  uint64_t v90;
  NSObject *Log;
  NSObject *v92;
  uint64_t v93;
  qos_class_t v94;
  int v95;
  uint64_t v96;
  int v98;
  NSObject *v99;
  uint64_t v100;
  int v101;
  NSObject *v102;
  char *v103;
  char *v104;
  const char *v105;
  char *v106;
  const char *v107;
  char *v108;
  const char *v109;
  char *v110;
  const char *v111;
  uint64_t v112;
  os_signpost_id_t v113;
  const void *v114;
  unsigned int *v116;
  void *v117;
  unsigned int *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE buf[24];
  void *v123;
  void *v124;
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v9 = (char *)malloc_type_calloc(1uLL, 0x70uLL, 0x10200408DCF1539uLL);
  atomic_store(2u, (unsigned int *)v9);
  pthread_mutex_init((pthread_mutex_t *)(v9 + 48), 0);
  *((_DWORD *)v9 + 8) = 4;
  if (dword_1EF19FC90 >= 5)
  {
    v98 = *__error();
    v99 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
    {
      v100 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v100;
      _os_log_impl(&dword_1B8270000, v99, OS_LOG_TYPE_DEFAULT, "Execute query %@", buf, 0xCu);
    }
    *__error() = v98;
  }
  v114 = a4;
  v119 = a2;
  *((_QWORD *)v9 + 1) = a1;
  v117 = malloc_type_calloc(1uLL, 0x28uLL, 0x10600400421BFCDuLL);
  if (!*(_QWORD *)(a1 + 1440))
    si_storecookieRef(a1);
  v10 = *(_QWORD *)(a1 + 1424);
  v11 = *(_QWORD *)(a1 + 1432);
  v12 = *(const void **)v119;
  v13 = *(_QWORD *)(v119 + 200);
  v14 = (unsigned int *)malloc_type_calloc(1uLL, 0x70uLL, 0x10A004060519A17uLL);
  atomic_store(1u, v14);
  *((_QWORD *)v14 + 6) = v10;
  *((_QWORD *)v14 + 7) = v11;
  v116 = v14;
  v15 = (unsigned int *)(a3 + 8);
  do
    v16 = __ldaxr(v15);
  while (__stlxr(v16 + 1, v15));
  *((_QWORD *)v14 + 1) = a3;
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *((_QWORD *)v14 + 5) = RLEOIDArrayCreateMutable((const __CFAllocator *)*MEMORY[0x1E0C9AE00]);
  do
    v18 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v18 + 1, (unsigned int *)v9));
  *((_QWORD *)v116 + 4) = v9;
  v19 = v119;
  if (v12)
    CFRetain(v12);
  *((_QWORD *)v116 + 11) = v12;
  *((_BYTE *)v116 + 99) = 1;
  *((_BYTE *)v116 + 100) = (v13 & 0x40000) != 0;
  *((_BYTE *)v116 + 96) = 0;
  v20 = *__error();
  v21 = _SILogForLogForCategory(1);
  v22 = 2 * (dword_1EF19FC90 < 4);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = *(_QWORD *)(v119 + 8);
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v23;
    _os_log_impl(&dword_1B8270000, v21, v22, "Starting query %@", buf, 0xCu);
  }
  *__error() = v20;
  *(_QWORD *)v117 = a1;
  v24 = (unsigned int *)malloc_type_malloc(0x300uLL, 0x10F00407059888BuLL);
  memcpy(v24, (const void *)v119, 0x300uLL);
  atomic_store(1u, v24 + 146);
  if (dword_1EF19FC90 >= 5)
  {
    v101 = *__error();
    v102 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v119;
      _os_log_impl(&dword_1B8270000, v102, OS_LOG_TYPE_DEFAULT, "%p: Query completely done", buf, 0xCu);
    }
    *__error() = v101;
  }
  v26 = *(_QWORD *)(v119 + 8);
  if (v26)
    CFRetain(*(CFTypeRef *)(v119 + 8));
  *((_QWORD *)v24 + 1) = v26;
  v27 = *(_QWORD *)(v119 + 16);
  if (v27)
    CFRetain(*(CFTypeRef *)(v119 + 16));
  *((_QWORD *)v24 + 2) = v27;
  v28 = *(_QWORD *)(v119 + 40);
  if (v28)
    CFRetain(*(CFTypeRef *)(v119 + 40));
  *((_QWORD *)v24 + 5) = v28;
  v29 = *(_QWORD *)(v119 + 48);
  if (v29)
    CFRetain(*(CFTypeRef *)(v119 + 48));
  *((_QWORD *)v24 + 6) = v29;
  v24[14] = *(_DWORD *)(v119 + 56);
  v30 = *(_QWORD *)(v119 + 656);
  if (v30)
    CFRetain(*(CFTypeRef *)(v119 + 656));
  *((_QWORD *)v24 + 82) = v30;
  v31 = *(_QWORD *)(v119 + 192);
  if (v31)
    CFRetain(*(CFTypeRef *)(v119 + 192));
  *((_QWORD *)v24 + 24) = v31;
  v32 = *(_QWORD *)(v119 + 176);
  if (v32)
    CFRetain(*(CFTypeRef *)(v119 + 176));
  *((_QWORD *)v24 + 22) = v32;
  v33 = *(_QWORD *)(v119 + 184);
  if (v33)
    CFRetain(*(CFTypeRef *)(v119 + 184));
  *((_QWORD *)v24 + 23) = v33;
  v34 = *(_QWORD *)(v119 + 240);
  if (v34)
    CFRetain(*(CFTypeRef *)(v119 + 240));
  *((_QWORD *)v24 + 30) = v34;
  v35 = *(_QWORD *)(v119 + 576);
  if (v35)
    MutableCopy = RLEOIDArrayCreateMutableCopy(v17, v25, v35);
  else
    MutableCopy = 0;
  *((_QWORD *)v24 + 72) = MutableCopy;
  v37 = *(_QWORD **)(v119 + 72);
  v38 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
  v123 = &unk_1E6E377F8;
  v124 = &__block_literal_global_17_10736;
  *((_QWORD *)v24 + 9) = db_query_tree_apply_block_with_meta(v37, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
  v39 = *(_QWORD **)(v119 + 64);
  *(_QWORD *)buf = v38;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
  v123 = &unk_1E6E377F8;
  v124 = &__block_literal_global_17_10736;
  *((_QWORD *)v24 + 8) = db_query_tree_apply_block_with_meta(v39, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
  v40 = *(_QWORD **)(v119 + 80);
  *(_QWORD *)buf = v38;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
  v123 = &unk_1E6E377F8;
  v124 = &__block_literal_global_17_10736;
  *((_QWORD *)v24 + 10) = db_query_tree_apply_block_with_meta(v40, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
  v41 = *(_QWORD **)(v119 + 88);
  *(_QWORD *)buf = v38;
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
  v123 = &unk_1E6E377F8;
  v124 = &__block_literal_global_17_10736;
  *((_QWORD *)v24 + 11) = db_query_tree_apply_block_with_meta(v41, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
  tree_apply_block_with_meta = *(_QWORD **)(v119 + 96);
  if (tree_apply_block_with_meta)
  {
    *(_QWORD *)buf = v38;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
    v123 = &unk_1E6E377F8;
    v124 = &__block_literal_global_17_10736;
    tree_apply_block_with_meta = (_QWORD *)db_query_tree_apply_block_with_meta(tree_apply_block_with_meta, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
  }
  *((_QWORD *)v24 + 12) = tree_apply_block_with_meta;
  v43 = *(_QWORD *)(v119 + 680);
  if (v43)
    CFRetain(*(CFTypeRef *)(v119 + 680));
  *((_QWORD *)v24 + 85) = v43;
  v44 = *(_QWORD *)(v119 + 696);
  if (v44)
    CFRetain(*(CFTypeRef *)(v119 + 696));
  *((_QWORD *)v24 + 87) = v44;
  v45 = *(_QWORD *)(v119 + 704);
  if (v45)
    CFRetain(*(CFTypeRef *)(v119 + 704));
  *((_QWORD *)v24 + 88) = v45;
  v46 = *(_QWORD *)(v119 + 712);
  if (v46)
    CFRetain(*(CFTypeRef *)(v119 + 712));
  *((_QWORD *)v24 + 89) = v46;
  *((_QWORD *)v24 + 27) = *(_QWORD *)(v119 + 216);
  v47 = *(_QWORD *)(v119 + 24);
  if (v47)
    CFRetain(*(CFTypeRef *)(v119 + 24));
  *((_QWORD *)v24 + 3) = v47;
  if (*(_QWORD *)(v119 + 120))
  {
    v103 = __si_assert_copy_extra_521(-1);
    v104 = v103;
    v105 = "";
    if (v103)
      v105 = v103;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 1090, "query->_liveUniquedSet==0", v105);
LABEL_136:
    free(v104);
    if (__valid_fs(-1))
      v112 = 2989;
    else
      v112 = 3072;
    *(_DWORD *)v112 = -559038737;
    abort();
  }
  if (*(_QWORD *)(v119 + 104))
  {
    v106 = __si_assert_copy_extra_521(-1);
    v104 = v106;
    v107 = "";
    if (v106)
      v107 = v106;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 1091, "query->_liveUniquedQuery==0", v107);
    goto LABEL_136;
  }
  if (*(_QWORD *)(v119 + 112))
  {
    v108 = __si_assert_copy_extra_521(-1);
    v104 = v108;
    v109 = "";
    if (v108)
      v109 = v108;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 1092, "query->_liveUniquedFilterQuery==0", v109);
    goto LABEL_136;
  }
  if (*(_QWORD *)(v119 + 128))
  {
    v110 = __si_assert_copy_extra_521(-1);
    v104 = v110;
    v111 = "";
    if (v110)
      v111 = v110;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIQueryC.c", 1093, "query->queryNodes==0", v111);
    goto LABEL_136;
  }
  v113 = (os_signpost_id_t)v9;
  if (*(_QWORD *)(v119 + 248))
  {
    v48 = *(_QWORD *)(v119 + 256);
    *((_QWORD *)v24 + 32) = v48;
    *((_QWORD *)v24 + 31) = malloc_type_malloc(8 * v48, 0x2004093837F09uLL);
    if (*(uint64_t *)(v119 + 256) >= 1)
    {
      v49 = 0;
      do
      {
        v50 = *(_QWORD **)(*(_QWORD *)(v119 + 248) + 8 * v49);
        *(_QWORD *)buf = v38;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
        v123 = &unk_1E6E377F8;
        v124 = &__block_literal_global_17_10736;
        *(_QWORD *)(*((_QWORD *)v24 + 31) + 8 * v49++) = db_query_tree_apply_block_with_meta(v50, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
      }
      while (v49 < *(_QWORD *)(v119 + 256));
    }
  }
  v51 = v38;
  if (*(_QWORD *)(v119 + 264))
  {
    v52 = *(_QWORD *)(v119 + 288);
    *((_QWORD *)v24 + 36) = v52;
    *((_QWORD *)v24 + 33) = malloc_type_malloc(24 * v52, 0x1080040468F112EuLL);
    if (*(uint64_t *)(v119 + 288) >= 1)
    {
      v53 = 0;
      v118 = v24;
      do
      {
        v54 = *(_QWORD *)(v19 + 264) + 24 * v53;
        v56 = *(_QWORD ***)v54;
        v55 = *(_QWORD *)(v54 + 8);
        v120 = *(_QWORD *)(v54 + 16);
        v121 = *((_QWORD *)v24 + 33);
        v57 = malloc_type_malloc(8 * v55, 0x2004093837F09uLL);
        v58 = v57;
        if (v55 >= 1)
        {
          v59 = v57;
          v60 = v55;
          do
          {
            v61 = *v56;
            if (*v56)
            {
              *(_QWORD *)buf = v51;
              *(_QWORD *)&buf[8] = 0x40000000;
              *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
              v123 = &unk_1E6E377F8;
              v124 = &__block_literal_global_17_10736;
              v61 = (_QWORD *)db_query_tree_apply_block_with_meta(v61, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
            }
            *v59++ = v61;
            ++v56;
            --v60;
          }
          while (v60);
        }
        v62 = (_QWORD *)(v121 + 24 * v53);
        *v62 = v58;
        v62[1] = v55;
        v62[2] = v120;
        ++v53;
        v24 = v118;
        v19 = v119;
      }
      while (v53 < *(_QWORD *)(v119 + 288));
    }
  }
  v63 = *(_QWORD **)(v19 + 280);
  if (v63)
  {
    *(_QWORD *)buf = v51;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
    v123 = &unk_1E6E377F8;
    v124 = &__block_literal_global_17_10736;
    *((_QWORD *)v24 + 35) = db_query_tree_apply_block_with_meta(v63, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
  }
  v64 = *(_QWORD **)(v19 + 224);
  if (v64)
  {
    *(_QWORD *)buf = v51;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
    v123 = &unk_1E6E377F8;
    v124 = &__block_literal_global_17_10736;
    *((_QWORD *)v24 + 28) = db_query_tree_apply_block_with_meta(v64, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
  }
  v65 = *(CFTypeRef *)v19;
  if (*(_QWORD *)v19)
    CFRetain(*(CFTypeRef *)v19);
  *(_QWORD *)v24 = v65;
  v66 = *(_QWORD *)(v19 + 32);
  if (v66)
    CFRetain(*(CFTypeRef *)(v19 + 32));
  *((_QWORD *)v24 + 4) = v66;
  *((_BYTE *)v24 + 672) = *(_BYTE *)(v19 + 672);
  v67 = *(_QWORD **)(v19 + 272);
  if (v67)
  {
    *(_QWORD *)buf = v51;
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
    v123 = &unk_1E6E377F8;
    v124 = &__block_literal_global_17_10736;
    *((_QWORD *)v24 + 34) = db_query_tree_apply_block_with_meta(v67, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
  }
  if (*(_BYTE *)(v19 + 672) && (v68 = *(const __CFArray **)(v19 + 720)) != 0 && (Count = CFArrayGetCount(v68)) != 0)
  {
    v70 = Count;
    v71 = *(const void **)(v19 + 720);
    *((_QWORD *)v24 + 90) = v71;
    if (v71)
      CFRetain(v71);
    *((_QWORD *)v24 + 91) = malloc_type_malloc(8 * v70, 0x2004093837F09uLL);
    if (v70 >= 1)
    {
      for (i = 0; i != v70; ++i)
      {
        v73 = *(_QWORD **)(*(_QWORD *)(v19 + 728) + 8 * i);
        *(_QWORD *)buf = v51;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
        v123 = &unk_1E6E377F8;
        v124 = &__block_literal_global_17_10736;
        *(_QWORD *)(*((_QWORD *)v24 + 91) + 8 * i) = db_query_tree_apply_block_with_meta(v73, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
      }
    }
  }
  else
  {
    *((_OWORD *)v24 + 45) = 0u;
  }
  v74 = *(_QWORD *)(v19 + 736);
  if (v74)
  {
    CFRetain(*(CFTypeRef *)(v19 + 736));
    *((_QWORD *)v24 + 92) = v74;
  }
  *((_WORD *)v24 + 376) = *(_WORD *)(v19 + 752);
  v75 = *(_QWORD *)(v19 + 744);
  if (v75)
    CFRetain(*(CFTypeRef *)(v19 + 744));
  *((_QWORD *)v24 + 93) = v75;
  v76 = malloc_type_malloc(8 * *(int *)(v19 + 592), 0x100004000313F17uLL);
  *((_QWORD *)v24 + 75) = v76;
  memcpy(v76, *(const void **)(v19 + 600), 8 * *(int *)(v19 + 592));
  *((_QWORD *)v117 + 1) = v24;
  v24[39] = *(_DWORD *)(a1 + 60) & 1;
  *(_QWORD *)(v113 + 24) = v116;
  do
    v77 = __ldaxr(v116);
  while (__stlxr(v77 + 1, v116));
  *((_QWORD *)v117 + 2) = v116;
  if (v114)
  {
    v78 = (const void *)*((_QWORD *)v116 + 3);
    if (v78)
      _Block_release(v78);
    *((_QWORD *)v116 + 3) = _Block_copy(v114);
  }
  v79 = v116 + 16;
  do
    v80 = __ldxr(v79);
  while (__stxr(v80 + 1, v79));
  v81 = a5;
  if (a5)
    v81 = (const __CFArray *)CFRetain(a5);
  *((_QWORD *)v117 + 4) = v81;
  v82 = *(_BYTE *)(v19 + 672);
  if (v82)
    v82 = *(_QWORD *)(v19 + 680) == 0;
  *(_BYTE *)(*((_QWORD *)v117 + 1) + 688) = v82;
  if (*(_BYTE *)(a1 + 2072))
  {
    if (v81)
    {
      if (CFArrayGetCount(v81) == 1)
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*((CFArrayRef *)v117 + 4), 0);
        if (ValueAtIndex)
        {
          v84 = ValueAtIndex;
          v85 = CFGetTypeID(ValueAtIndex);
          if (v85 == CFStringGetTypeID())
          {
            v86 = CFStringCompare(v84, CFSTR("com.apple.mobileslideshow"), 0);
            v87 = *((_QWORD *)v117 + 1);
            if (v86)
            {
              if (!*(_BYTE *)(v87 + 688)
                && (CFStringCompare(v84, CFSTR("com.apple.mobilemail"), 0) == kCFCompareEqualTo
                 || CFStringCompare(v84, CFSTR("com.apple.pommesctl"), 0) == kCFCompareEqualTo
                 || CFStringCompare(v84, CFSTR("com.apple.mobilesafari"), 0) == kCFCompareEqualTo))
              {
                *(_BYTE *)(*((_QWORD *)v117 + 1) + 688) = 1;
              }
            }
            else
            {
              *(_WORD *)(v87 + 688) = 257;
            }
          }
        }
      }
    }
  }
  v88 = (uint64_t **)malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  *v88 = (uint64_t *)v117;
  v88[1] = (uint64_t *)v113;
  priority = query_priority(*((_QWORD **)v117 + 1));
  v90 = *(_QWORD *)&asc_1B862C8B8[8 * priority];
  *(_DWORD *)(v113 + 32) = 4;
  kdebug_trace();
  Log = _MDPerf_QueryLog();
  if (v113 + 1 >= 2)
  {
    v92 = Log;
    if (os_signpost_enabled(Log))
    {
      v93 = *(_QWORD *)(*((_QWORD *)v117 + 1) + 608);
      v94 = qos_class_self();
      v95 = *(_DWORD *)(v113 + 32);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v93;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v94;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v95;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v92, OS_SIGNPOST_INTERVAL_BEGIN, v113, "Job", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x JobType=%{signpost.description:attribute}d", buf, 0x18u);
    }
  }
  *((CFAbsoluteTime *)*v88 + 3) = CFAbsoluteTimeGetCurrent();
  v96 = *(_QWORD *)(a1 + 8 * v90 + 1008);
  if (v96)
    si_enqueue_work_with_qos(v96, 8 * priority + 9, (uint64_t)finishRegisterQuery, (uint64_t)v88);
  else
    finishRegisterQuery(v88, 1);
  return v113;
}

uint64_t query_priority(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  int v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  qos_class_t v9;
  int v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((a1[25] & 0xFuLL) >= 3)
    v1 = 3;
  else
    v1 = a1[25] & 0xFLL;
  if ((_DWORD)v1 == 3)
  {
    v2 = a1[20];
    if (v2 && v2 < 401 || (v3 = (const void *)a1[1]) == 0)
    {
      v1 = 3;
    }
    else if (CFEqual(v3, CFSTR("_kMDItemBundleID=com.apple.searchd")))
    {
      v1 = 3;
    }
    else
    {
      v1 = 2;
    }
  }
  if (dword_1EF19FCC0 >= 5)
  {
    v5 = *__error();
    v6 = _SILogForLogForCategory(13);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 67109120;
      v11 = v1;
      _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "Running query at priority %d", (uint8_t *)&v10, 8u);
    }
    *__error() = v5;
    if (dword_1EF19FCC0 >= 5)
    {
      v7 = *__error();
      v8 = _SILogForLogForCategory(13);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = qos_class_self();
        v10 = 67109120;
        v11 = v9;
        _os_log_impl(&dword_1B8270000, v8, OS_LOG_TYPE_DEFAULT, "Current QOS %d", (uint8_t *)&v10, 8u);
      }
      *__error() = v7;
    }
  }
  return v1;
}

void si_enqueue_work_with_qos(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD block[8];
  int v8;

  v4 = *(_QWORD **)a1;
  if (!*(_QWORD *)a1)
  {
    v5 = 0;
    if (a2)
      goto LABEL_4;
LABEL_6:
    a2 = *(unsigned __int8 *)(a1 + 24);
    goto LABEL_4;
  }
  do
  {
    v5 = v4;
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  if (!a2)
    goto LABEL_6;
LABEL_4:
  v6 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __si_enqueue_work_with_qos_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  block[4] = v5;
  block[5] = a1;
  v8 = a2;
  block[6] = a3;
  block[7] = a4;
  dispatch_sync(v6, block);
}

uint64_t RLEOIDArrayCreateMutable(const __CFAllocator *a1)
{
  uint64_t Instance;
  void *v3;

  if (!__kRLEOIDArrayTypeID)
    __kRLEOIDArrayTypeID = _CFRuntimeRegisterClass();
  Instance = _CFRuntimeCreateInstance();
  *(_QWORD *)(Instance + 216) = 0;
  *(_DWORD *)(Instance + 224) = 0;
  *(_QWORD *)(Instance + 240) = 0;
  *(_QWORD *)(Instance + 248) = a1;
  v3 = CFAllocatorAllocate(a1, 8072, 0);
  bzero(v3, 0x1F88uLL);
  *(_QWORD *)(Instance + 232) = v3;
  *(_OWORD *)(Instance + 256) = 0u;
  *(_OWORD *)(Instance + 272) = 0u;
  *(_OWORD *)(Instance + 288) = 0u;
  *(_OWORD *)(Instance + 304) = 0u;
  *(_OWORD *)(Instance + 320) = 0u;
  *(_OWORD *)(Instance + 336) = 0u;
  *(_OWORD *)(Instance + 352) = 0u;
  *(_OWORD *)(Instance + 368) = 0u;
  *(_BYTE *)(Instance + 384) = 1;
  return Instance;
}

void *zone_allocate(size_t size, int a2, malloc_zone_t *zone)
{
  return malloc_type_zone_malloc(zone, size, 0xF02CAAABuLL);
}

uint64_t processScopeTerms(uint64_t result, uint64_t a2, int a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  char v6;
  _QWORD v7[8];
  int v8;
  char v9;
  _QWORD v10[5];

  v5 = *(_QWORD *)(result + 1416);
  if (v5)
  {
    v6 = *(_BYTE *)(result + 2072);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 0x40000000;
    v7[2] = __processScopeTerms_block_invoke;
    v7[3] = &__block_descriptor_tmp_512_7200;
    v9 = v6;
    v7[4] = a5;
    v7[5] = a2;
    v8 = a3;
    v7[6] = v5;
    v7[7] = result;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = __db_query_tree_apply_block_block_invoke;
    v10[3] = &unk_1E6E377F8;
    v10[4] = v7;
    return db_query_tree_apply_block_with_meta(a4, (uint64_t)v10, 0);
  }
  return result;
}

BOOL si_peek_queue_for_tags(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL8 v5;
  int v7;
  NSObject *v8;
  const char *label;
  int v10;
  NSObject *v11;
  const char *v13;
  const char *v14;
  const char *v16;
  _QWORD block[7];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  const char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  v19 = &v18;
  v20 = 0x2000000000;
  v21 = 0;
  if (dword_1EF19FC90 >= 5)
  {
    v7 = *__error();
    v8 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      label = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 16));
      *(_DWORD *)buf = 134218242;
      v23 = a2;
      v24 = 2080;
      v25 = label;
      _os_log_impl(&dword_1B8270000, v8, OS_LOG_TYPE_DEFAULT, "Peek tags for %p on queue %s", buf, 0x16u);
    }
    *__error() = v7;
  }
  v4 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __si_peek_queue_for_tags_block_invoke;
  block[3] = &unk_1E6E2E9E0;
  block[5] = a2;
  block[6] = a1;
  block[4] = &v18;
  dispatch_sync(v4, block);
  if (*((_BYTE *)v19 + 24))
  {
    if (dword_1EF19FC90 >= 5)
    {
      v10 = *__error();
      v11 = _SILogForLogForCategory(1);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        goto LABEL_18;
      v13 = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 16));
      *(_DWORD *)buf = 134218242;
      v23 = a2;
      v24 = 2080;
      v25 = v13;
      v14 = "Found tags for %p on queue %s";
LABEL_17:
      _os_log_impl(&dword_1B8270000, v11, OS_LOG_TYPE_DEFAULT, v14, buf, 0x16u);
LABEL_18:
      *__error() = v10;
      v5 = *((_BYTE *)v19 + 24) != 0;
      goto LABEL_9;
    }
    v5 = 1;
  }
  else
  {
    if (dword_1EF19FC90 >= 5)
    {
      v10 = *__error();
      v11 = _SILogForLogForCategory(1);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        goto LABEL_18;
      v16 = dispatch_queue_get_label(*(dispatch_queue_t *)(a1 + 16));
      *(_DWORD *)buf = 134218242;
      v23 = a2;
      v24 = 2080;
      v25 = v16;
      v14 = "No tags for %p on queue %s";
      goto LABEL_17;
    }
    v5 = 0;
  }
LABEL_9:
  _Block_object_dispose(&v18, 8);
  return v5;
}

const void *si_add_livequery(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  void *v6;
  const void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  pthread_mutex_t *v11;
  uint64_t v12;
  const __CFString *v13;
  const __CFString *v14;
  char *Value;
  unsigned int *v16;
  unsigned int v17;
  pthread_mutex_t *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int v23;
  NSObject *v24;
  CFStringRef node_unique_set_copy_description;
  CFBagCallBacks v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = malloc_type_calloc(1uLL, 0x38uLL, 0x10600408BC92946uLL);
  v7 = v6;
  v8 = a2 + 146;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  *((_QWORD *)v6 + 1) = a2;
  do
    v10 = __ldaxr(a3);
  while (__stlxr(v10 + 1, a3));
  *((_QWORD *)v6 + 5) = a3;
  atomic_store(1u, (unsigned int *)v6);
  *((_DWORD *)v6 + 12) = 0;
  v11 = (pthread_mutex_t *)(a1 + 1712);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1712));
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 1776), v7);
  if (!*((_QWORD *)a2 + 15))
  {
    v12 = *(_QWORD *)a2;
    v13 = *(const __CFString **)(*(_QWORD *)a2 + 152);
    if (!v13)
    {
      v13 = *(const __CFString **)(v12 + 112);
      if (v13)
      {
        os_unfair_lock_lock((os_unfair_lock_t)(v12 + 48));
        if (!*(_QWORD *)(v12 + 152))
          *(_QWORD *)(v12 + 152) = CFStringCreateByCombiningStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFArrayRef *)(v12 + 112), CFSTR(","));
        os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 48));
        v13 = *(const __CFString **)(v12 + 152);
      }
    }
    if (v13)
      v14 = v13;
    else
      v14 = &stru_1E6E3A6D8;
    CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1784), v14);
    Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 1784), v14);
    *((_QWORD *)a2 + 15) = Value;
    if (Value)
    {
      v16 = (unsigned int *)(Value + 72);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    else
    {
      v18 = (pthread_mutex_t *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x50uLL, 0x6085D6BuLL);
      if (!v18 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        LOWORD(v26.version) = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v26, 2u);
      }
      v26 = *(CFBagCallBacks *)byte_1E6E37940;
      v18[1].__sig = (uint64_t)CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &v26);
      pthread_mutex_init(v18, 0);
      *(_DWORD *)v18[1].__opaque = 1;
      *((_QWORD *)a2 + 15) = v18;
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 1784), v14, v18);
    }
    v19 = (_QWORD *)compileToLiveQuery(*((_QWORD **)a2 + 9));
    *((_QWORD *)a2 + 13) = query_node_unique_retain(*((pthread_mutex_t **)a2 + 15), v19);
    db_free_query_node(v19);
    v20 = (_QWORD *)*((_QWORD *)a2 + 10);
    if (v20)
    {
      v21 = (_QWORD *)compileToLiveQuery(v20);
      *((_QWORD *)a2 + 14) = query_node_unique_retain(*((pthread_mutex_t **)a2 + 15), v21);
      db_free_query_node(v21);
    }
    if (dword_1EF19FC94 >= 5)
    {
      v23 = *__error();
      v24 = _SILogForLogForCategory(2);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        node_unique_set_copy_description = _query_node_unique_set_copy_description(*((pthread_mutex_t **)a2 + 15));
        LODWORD(v26.version) = 138412290;
        *(CFIndex *)((char *)&v26.version + 4) = (CFIndex)node_unique_set_copy_description;
        _os_log_impl(&dword_1B8270000, v24, OS_LOG_TYPE_DEFAULT, "live query nodes: %@", (uint8_t *)&v26, 0xCu);
        *__error() = v23;
        if (node_unique_set_copy_description)
          CFRelease(node_unique_set_copy_description);
      }
      else
      {
        *__error() = v23;
      }
    }
  }
  pthread_mutex_unlock(v11);
  return v7;
}

uint64_t query_node_unique_retain(pthread_mutex_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t tree_apply_block_with_meta;
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];

  v4 = MEMORY[0x1E0C809B0];
  v7[4] = a1;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = __query_node_unique_retain_block_invoke;
  v8[3] = &__block_descriptor_tmp_22_10773;
  v8[4] = a1;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = __query_node_unique_retain_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_23_10774;
  pthread_mutex_lock(a1);
  v9[0] = v4;
  v9[1] = 0x40000000;
  v9[2] = __db_query_tree_apply_block_block_invoke;
  v9[3] = &unk_1E6E377F8;
  v9[4] = v8;
  tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(a2, (uint64_t)v9, (uint64_t)v7);
  pthread_mutex_unlock(a1);
  return tree_apply_block_with_meta;
}

uint64_t compileToLiveQuery(_QWORD *a1)
{
  uint64_t tree_apply_block_with_meta;
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = __db_query_tree_apply_block_block_invoke;
  v3[3] = &unk_1E6E377F8;
  v3[4] = &__block_literal_global_17_10736;
  tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(a1, (uint64_t)v3, (uint64_t)&__block_literal_global_20_10737);
  setupCannedFields(tree_apply_block_with_meta);
  return tree_apply_block_with_meta;
}

void BulkPayloadIterator_Step(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD);
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  char *v24;
  char *v25;
  const char *v26;
  char *v27;
  const char *v28;
  uint64_t v29;

  v6 = a1 + 32;
  *(_QWORD *)(a1 + 56) = -1;
  *(_QWORD *)(a1 + 64) = -1;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a1 + 76);
  v7 = (_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 160);
  do
  {
    if (!*(_QWORD *)(a1 + 104) && *(_QWORD *)(a1 + 152))
    {
      v24 = __si_assert_copy_extra(0);
      v25 = v24;
      v26 = "";
      if (v24)
        v26 = v24;
      __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 1816, "iterator->split>0 || iterator->futureCount==0", v26);
      goto LABEL_37;
    }
    v9 = *(_QWORD *)(a1 + 24);
    if (v9 != 1)
    {
LABEL_18:
      v18 = ipqpop(v7);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(v18 + 40))(v18, v6))
      {
        v20 = *(uint64_t (**)(uint64_t, _QWORD))(v18 + 48);
        if (v20)
        {
          v21 = v20(v18, 0);
          v22 = *(_DWORD *)(a1 + 76);
          if (v21 > v22)
            v22 = v21;
          *(_DWORD *)(a1 + 76) = v22;
        }
        goto LABEL_27;
      }
      v19 = *(_QWORD *)(v18 + 8) & 0x3FFFFFFFFFFFFFFFLL;
      if (v19 > *(_QWORD *)(a1 + 104))
      {
        ipqpush((uint64_t)v7, v18);
LABEL_27:
        *(_BYTE *)a1 |= *(_BYTE *)(v18 + 64);
        v9 = *(_QWORD *)(a1 + 24);
        continue;
      }
      if (v19)
      {
        v23 = *(_QWORD *)(a1 + 152);
        *(_QWORD *)(a1 + 152) = v23 + 1;
        *(_QWORD *)(a1 + 8 * v23 + 160) = v18;
        goto LABEL_27;
      }
      v27 = __si_assert_copy_extra(0);
      v25 = v27;
      v28 = "";
      if (v27)
        v28 = v27;
      __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 1934, "((((iter->ptr.has_meta?iter->ptr.with_meta.offset:iter->ptr.just_offset) & 0x3FFFFFFFFFFFFFFF)))", v28);
LABEL_37:
      free(v25);
      if (__valid_fs(-1))
        v29 = 2989;
      else
        v29 = 3072;
      *(_DWORD *)v29 = -559038737;
      abort();
    }
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 104);
      if (!v10)
        break;
      v11 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = 0;
      *(_QWORD *)(a1 + 128) = 0;
      v12 = v10 >> 1;
      *(_QWORD *)(a1 + 104) = v12;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = -1;
      if (v12 < *(_QWORD *)(*(_QWORD *)(a1 + 80) + 32))
        *(_QWORD *)(a1 + 104) = 0;
      if (v11 < 1)
      {
        v17 = 1;
      }
      else
      {
        v13 = v8;
        do
        {
          v14 = *(_QWORD *)(*v13 + 8) & 0x3FFFFFFFFFFFFFFFLL;
          if (v14 <= *(_QWORD *)(a1 + 104))
          {
            if (v14)
            {
              puts("moving from future to future");
              v15 = *v13;
              v16 = *(_QWORD *)(a1 + 152);
              *(_QWORD *)(a1 + 152) = v16 + 1;
              *(_QWORD *)(a1 + 8 * v16 + 160) = v15;
            }
          }
          else
          {
            ipqpush((uint64_t)v7, *v13);
          }
          ++v13;
          --v11;
        }
        while (v11);
        v9 = *(_QWORD *)(a1 + 24);
        v17 = v9;
      }
      if (v17 != 1)
        goto LABEL_18;
    }
  }
  while (v9 != 1 || *(_QWORD *)(a1 + 152));
  *a2 = *(_DWORD *)(a1 + 76);
  *a3 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 144) = 1;
}

BOOL PayloadIterate(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void (*v15)(_QWORD);
  _DWORD *v16;
  int v17;
  NSObject *v18;
  size_t v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void (*v28)(_QWORD);
  uint64_t v29;
  _DWORD *v30;
  int v31;
  NSObject *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  void (*v39)(_QWORD);
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  void (*v43)(_QWORD);
  _BOOL8 result;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _BYTE *v49;
  _BYTE *v50;
  size_t *v51;
  int64_t v52;
  size_t v53;
  size_t v54;
  _QWORD *v55;
  size_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int8x8_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  int v86;
  int v87;
  int8x8_t v88;
  unsigned int *v89;
  unsigned int *v90;
  int8x8_t v91;
  unsigned int *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  int v99;
  NSObject *v100;
  os_log_type_t v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  unint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  char *v109;
  BOOL v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  BOOL v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  char *v139;
  char *v140;
  const char *v141;
  uint64_t v142;
  _BYTE *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  char *v157;
  const char *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  _BYTE *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unsigned int v174;
  unsigned int v175;
  unint64_t v176;
  char v177;
  _BYTE buf[24];
  uint64_t v179;

  v179 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if (*a1)
    v5 = *((float *)a1 + 4);
  else
    v5 = 0.0;
  v163 = *(_BYTE **)a2;
  v164 = *a1;
  v6 = *(_QWORD *)(a2 + 48);
  v177 = 1;
  do
  {
    v7 = __ldxr(exceptionSequenceNum);
    v8 = v7 + 1;
  }
  while (__stxr(v7 + 1, exceptionSequenceNum));
  v9 = setThreadIdAndInfo(-1, sIteratorExceptionCallbacks, (uint64_t)a1, 0, v8);
  LODWORD(v167) = HIDWORD(v9);
  LODWORD(v168) = v9;
  v176 = __PAIR64__(v10, v11);
  v12 = *(_QWORD *)&threadData[18 * v9 + 2];
  v13 = v12 + 320 * HIDWORD(v9);
  v14 = *(_DWORD *)(v13 + 312);
  v15 = *(void (**)(_QWORD))(v13 + 224);
  if (v15)
    v15(*(_QWORD *)(v12 + 320 * HIDWORD(v9) + 288));
  v175 = v168;
  v174 = v167;
  v173 = v176;
  if (_setjmp((int *)v13))
  {
    v16 = (_DWORD *)(v13 + 312);
    v17 = *__error();
    v18 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "PayloadIterate";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 673;
      _os_log_error_impl(&dword_1B8270000, v18, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v17;
    *v16 = v14;
    CIOnThreadCleanUpReset(v173);
    dropThreadId(v175, 1, v8);
    CICleanUpReset(v175, HIDWORD(v173));
    goto LABEL_35;
  }
  v165 = v6;
  do
  {
    v20 = __ldxr(exceptionSequenceNum);
    v21 = v20 + 1;
  }
  while (__stxr(v20 + 1, exceptionSequenceNum));
  v22 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v21);
  v172 = __PAIR64__(v22, HIDWORD(v22));
  v171 = __PAIR64__(v23, v24);
  v25 = *(_QWORD *)&threadData[18 * v22 + 2];
  v26 = v25 + 320 * HIDWORD(v22);
  v27 = *(_DWORD *)(v26 + 312);
  v28 = *(void (**)(_QWORD))(v26 + 224);
  if (v28)
    v28(*(_QWORD *)(v25 + 320 * HIDWORD(v22) + 288));
  v170 = v172;
  v169 = v171;
  if (!_setjmp((int *)v26))
  {
    if (!a1[81])
    {
      if (*(_QWORD *)(v165 + 24) >> 1 >= *(_QWORD *)(*(_QWORD *)(a2 + 48) + 32))
        v33 = *(_QWORD *)(v165 + 24) >> 1;
      else
        v33 = 0;
      *((_QWORD *)a1 + 3) = v33;
      a1[81] = 1;
      if (v33)
      {
        v34 = (uint64_t)(a1 + 160);
      }
      else
      {
        if (a1[80])
        {
          *((_QWORD *)a1 + 28) = 0;
          ++*((_DWORD *)a1 + 54);
          v35 = *((_QWORD *)a1 + 24);
          *((_QWORD *)a1 + 25) = 0;
          *((_QWORD *)a1 + 26) = v35;
          *((_QWORD *)a1 + 24) = 0;
          goto LABEL_29;
        }
        v34 = (uint64_t)(a1 + 160);
        v33 = 0;
      }
      oqsplit(v34, v33);
    }
LABEL_29:
    v177 = 0;
    v36 = *(_QWORD *)&threadData[18 * HIDWORD(v170) + 2];
    v37 = v170;
    v38 = v36 + 320 * v170;
    *(_DWORD *)(v38 + 312) = v27;
    v39 = *(void (**)(_QWORD))(v38 + 232);
    if (v39)
      v39(*(_QWORD *)(v36 + 320 * v37 + 288));
    dropThreadId(HIDWORD(v170), 0, v21);
    v6 = v165;
    goto LABEL_32;
  }
  v29 = v4;
  v30 = (_DWORD *)(v26 + 312);
  v31 = *__error();
  v32 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "PayloadIterate";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 672;
    _os_log_error_impl(&dword_1B8270000, v32, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
  }
  *__error() = v31;
  *v30 = v27;
  CIOnThreadCleanUpReset(v169);
  dropThreadId(HIDWORD(v170), 1, v21);
  CICleanUpReset(HIDWORD(v170), HIDWORD(v169));
  v4 = v29;
  v6 = v165;
LABEL_32:
  v40 = *(_QWORD *)&threadData[18 * v175 + 2];
  v41 = v174;
  v42 = v40 + 320 * v174;
  *(_DWORD *)(v42 + 312) = v14;
  v43 = *(void (**)(_QWORD))(v42 + 232);
  if (v43)
    v43(*(_QWORD *)(v40 + 320 * v41 + 288));
  dropThreadId(v175, 0, v8);
LABEL_35:
  if (v177)
  {
    result = 0;
    a1[64] = 1;
    return result;
  }
  v45 = *((_QWORD *)a1 + 1);
  if (!v45)
  {
    v58 = 0;
    v59 = 0xBFFFFFFFFFFFFFFFLL;
    goto LABEL_141;
  }
  v46 = v45 & 0x3FFFFFFFFFFFFFFFLL;
  v47 = *(_QWORD *)(a2 + 16);
  if ((v45 & 0x3FFFFFFFFFFFFFFFuLL) >= v47)
  {
    v48 = *(_QWORD *)(a2 + 56) + v47;
    if (v48 > v46 && v46 + 30 <= v48)
    {
      ++*(_DWORD *)(a2 + 64);
      v49 = v163;
      goto LABEL_57;
    }
  }
  v50 = v163;
  if (*(_BYTE *)(a2 + 8))
  {
    v51 = (size_t *)MEMORY[0x1E0C85AD8];
    v52 = v46 & -*MEMORY[0x1E0C85AD8];
    v53 = *(_QWORD *)(v6 + 24);
    v54 = *(_QWORD *)(a2 + 56);
    if (v53 <= v54)
    {
      if ((uint64_t)v54 >= v52)
      {
        ++*(_DWORD *)(a2 + 64);
        v49 = *(_BYTE **)a2;
        goto LABEL_57;
      }
    }
    else
    {
      v55 = (_QWORD *)MEMORY[0x1E0C85AC0];
      if ((uint64_t)(((*MEMORY[0x1E0C85AC0] + v53) & ~*MEMORY[0x1E0C85AC0]) + *MEMORY[0x1E0C85AD8]) >= v52)
      {
        *(_QWORD *)(a2 + 16) = 0;
        munmap(*(void **)a2, v54);
        v56 = ((*v55 + *(_QWORD *)(v6 + 24)) & ~*v55) + *v51;
        *(_QWORD *)(a2 + 56) = v56;
        v57 = (char *)mmap(0, v56, 1, 1, *(_DWORD *)(v6 + 4488), 0);
        *(_QWORD *)a2 = v57;
        if (v57 == (char *)-1)
          goto LABEL_53;
        if (mmap(&v57[*(_QWORD *)(a2 + 56) - *v51], *v51, 1, 4114, -83886080, 0) != (void *)-1)
        {
          v49 = *(_BYTE **)a2;
          v50 = *(_BYTE **)a2;
          if (*(_BYTE *)(a2 + 8))
            goto LABEL_57;
          goto LABEL_54;
        }
        v99 = *__error();
        v100 = _SILogForLogForCategory(10);
        v101 = dword_1EF19FCB4 < 3;
        if (os_log_type_enabled(v100, (os_log_type_t)(dword_1EF19FCB4 < 3)))
        {
          v102 = *__error();
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = v102;
          _os_log_impl(&dword_1B8270000, v100, v101, "*warn* Failed to allocated guard page error %d", buf, 8u);
        }
        *__error() = v99;
        v60 = *(_QWORD *)(a2 + 56);
        if (!v60)
          goto LABEL_53;
        goto LABEL_52;
      }
    }
    v60 = *(_QWORD *)(a2 + 56);
    if (!v54)
    {
LABEL_53:
      *(_QWORD *)(a2 + 56) = 0x10000;
      v50 = malloc_type_malloc(0x10000uLL, 0xF663CF29uLL);
      *(_QWORD *)a2 = v50;
      *(_BYTE *)(a2 + 8) = 0;
      goto LABEL_54;
    }
LABEL_52:
    munmap(*(void **)a2, v60);
    goto LABEL_53;
  }
LABEL_54:
  v49 = v50;
  *(_QWORD *)(a2 + 16) = v45 & 0x3FFFFFFFFFFFF000;
  v61 = fd_pread(*(_DWORD **)(v6 + 4480), v50, *(_QWORD *)(a2 + 56), v45 & 0x3FFFFFFFFFFFF000);
  *(_DWORD *)(a2 + 64) = 0;
  if (v61 == -1)
    return 0;
LABEL_57:
  v62 = v6;
  v166 = v4;
  v63 = v49;
  v64 = v45 & 0x3FFFFFFFFFFFFFFFLL;
  v65 = v45 & 0x4000000000000000;
  v168 = v46 - *(_QWORD *)(a2 + 16);
  v66 = 0;
  v67 = 0;
  v68 = v168;
  do
  {
    v69 = v68;
    v70 = v67;
    v71 = v68 + 1;
    v72 = ((unint64_t)(v49[v68] & 0x7F) << v67) | v66;
    if ((v49[v68] & 0x80) == 0)
      break;
    v67 += 7;
    ++v68;
    v66 = v72;
  }
  while (v70 != 63);
  v168 = v71;
  if ((v72 & 1) != 0)
  {
    v79 = v69 + 2;
    v80 = (char)v49[v71];
    v81 = v49[v71];
    if (v80 < 0)
    {
      v85 = v69 + 3;
      v86 = (char)v49[v79];
      v87 = v49[v79];
      if (v86 < 0)
      {
        v95 = v69 + 4;
        v96 = (char)v49[v85];
        v97 = v49[v85];
        if (v96 < 0)
        {
          v103 = v69 + 5;
          v104 = (char)v49[v95];
          v105 = v49[v95];
          if (v104 < 0)
          {
            v137 = (char)v49[v103];
            if (v137 < 0)
            {
              v145 = __si_assert_copy_extra(0);
              __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
              goto LABEL_184;
            }
            v138 = ((v105 & 0x7F) << 21) | (v137 << 28) | ((v97 & 0x7F) << 14) | ((v87 & 0x7F) << 7) | v81 & 0x7F;
            v83 = v69 + 6;
            v84 = v138;
            goto LABEL_99;
          }
          v98 = ((v97 & 0x7F) << 14) | (v105 << 21) | ((v87 & 0x7F) << 7) | v81 & 0x7F;
          v83 = v103;
        }
        else
        {
          v98 = ((v87 & 0x7F) << 7) | (v97 << 14) | v81 & 0x7F;
          v83 = v95;
        }
        v84 = v98;
      }
      else
      {
        v84 = v81 & 0x7F | (v87 << 7);
        v83 = v69 + 3;
      }
    }
    else
    {
      v82 = v81;
      v83 = v69 + 2;
      v84 = v82;
    }
LABEL_99:
    v167 = 0;
    v168 = v83;
    v106 = v84;
    v161 = *(unsigned int *)(a2 + 56);
    v162 = v83 + v84;
    if (v162 <= v161)
    {
      v107 = &v63[v83];
      v108 = 0;
      v109 = 0;
LABEL_101:
      v159 = v108;
      v160 = (uint64_t)v109;
      *(_QWORD *)&buf[8] = a2;
      *(_QWORD *)&buf[16] = 0xFFFFFFFF00000000;
      *(_QWORD *)buf = a1;
      buf[16] = v65 >> 62;
      if ((_DWORD)v106)
      {
        do
        {
          if (unpackPostingChunk((uint64_t)v107, &v167, v106, *(_DWORD *)(a2 + 68), v166 | ((unint64_t)LODWORD(v5) << 32), (void (*)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))PayloadProcessDocIDRangeBitsReversed, (uint64_t)buf))v110 = v167 >= v106;
          else
            v110 = 1;
        }
        while (!v110);
      }
      if (v162 > v161)
      {
        free(v107);
        CICleanUpClearItem(v160, v159);
        CICleanUpPop(v160);
      }
      v111 = *((_QWORD *)a1 + 1);
      LODWORD(v4) = v166;
      if ((v111 & 0x3FFFFFFFFFFFFFFFLL) == v46)
      {
        *(_QWORD *)a1 = 0;
        *((_QWORD *)a1 + 1) = 0;
        *((_QWORD *)a1 + 2) = 0;
        v94 = v111;
        v64 = v46;
        goto LABEL_111;
      }
      v145 = __si_assert_copy_extra(0);
      __message_assert("%s:%u: failed assertion '%s' %s ");
LABEL_184:
      free(v145);
      if (__valid_fs(-1))
        v146 = 2989;
      else
        v146 = 3072;
      *(_DWORD *)v146 = -559038737;
      abort();
    }
    v143 = malloc_type_malloc(v84 + 4, 0xF2E6DC46uLL);
    if (v106 >> 28)
    {
      v144 = 5;
    }
    else if ((v106 & 0xFE00000) != 0)
    {
      v144 = 4;
    }
    else
    {
      v154 = 1;
      if ((v106 & 0x3F80) != 0)
        v154 = 2;
      v144 = 3;
      if ((v106 & 0x1FC000) == 0)
        v144 = v154;
    }
    v151 = 1;
    if ((v72 & 0x3F80) != 0)
      v151 = 2;
    if ((v72 & 0x1FC000) != 0)
      v151 = 3;
    v152 = 4;
    if ((v72 & 0xFE00000) == 0)
      v152 = v151;
    if (v72 >> 28)
      v152 = 5;
    if (fd_pread(*(_DWORD **)(v62 + 4480), v143, v106, v144 + v46 + v152) != -1)
    {
      v153 = CICleanUpThreadLoc();
      v108 = CICleanUpPush((uint64_t)v153, (uint64_t)MEMORY[0x1E0C834A8], (uint64_t)v143);
      v107 = v143;
      v109 = v153;
      goto LABEL_101;
    }
    free(v143);
    return 0;
  }
  *(_DWORD *)&buf[8] = 0;
  *(_QWORD *)buf = 0;
  v73 = unpackPosting((uint64_t)v49, (uint64_t *)&v168, (uint64_t)buf);
  if (v73)
  {
    if (*(_QWORD *)&buf[4])
      handleUpdate(a1, *(unint64_t *)&buf[4], v73, v4 | ((unint64_t)LODWORD(v5) << 32));
    goto LABEL_87;
  }
  if (*((_QWORD *)a1 + 17))
  {
    v75 = *(_QWORD *)&buf[4];
    v76 = *((_QWORD *)a1 + 14);
    if ((unint64_t)(v76 + *(_QWORD *)&buf[4]) <= **((_QWORD **)a1 + 16))
    {
      v77 = checkAgainstChangeHolder((uint64_t)(a1 + 128), v76 + *(unsigned int *)&buf[4]);
      if (!v75)
        goto LABEL_87;
      v78 = v75;
      if ((v77 & 1) != 0)
        goto LABEL_87;
LABEL_73:
      if (v65)
      {
        v90 = (unsigned int *)*((_QWORD *)a1 + 11);
        LODWORD(v167) = -1;
        if (!_CIIndexSetAddIndex(v90, v78, 0, &v167, v74))
        {
LABEL_85:
          if (v164)
            distanceHolderSetMinDistance(*((_QWORD *)a1 + 9), *((_QWORD *)a1 + 14) + v78, v5);
          goto LABEL_87;
        }
        v92 = (unsigned int *)*((_QWORD *)a1 + 12);
        LODWORD(v167) = -1;
        if (_CIIndexSetAddIndex(v92, v78, 0, &v167, v91))
          ++*((_DWORD *)a1 + 26);
      }
      else
      {
        if (_CIIndexSetRemoveIndex(*((int **)a1 + 12), v78))
          --*((_DWORD *)a1 + 26);
        v89 = (unsigned int *)*((_QWORD *)a1 + 11);
        LODWORD(v167) = -1;
        if (!_CIIndexSetAddIndex(v89, v78, 0, &v167, v88))
          goto LABEL_85;
      }
      if (*(_DWORD *)(a2 + 40) >= v78)
      {
        if (*(_DWORD *)(a2 + 44) > v78)
          *(_DWORD *)(a2 + 44) = v78;
      }
      else
      {
        *(_DWORD *)(a2 + 40) = v78;
      }
      goto LABEL_85;
    }
  }
  else
  {
    v75 = *(_QWORD *)&buf[4];
  }
  v78 = v75;
  if (v75)
    goto LABEL_73;
LABEL_87:
  v93 = *((_QWORD *)a1 + 1);
  if ((v93 & 0x3FFFFFFFFFFFFFFFLL) != v46)
  {
    v139 = __si_assert_copy_extra(0);
    v140 = v139;
    v141 = "";
    if (v139)
      v141 = v139;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 759, "((((iter->ptr.has_meta?iter->ptr.with_meta.offset:iter->ptr.just_offset) & 0x3FFFFFFFFFFFFFFF)))==next", v141);
    free(v140);
    if (!__valid_fs(-1))
    {
LABEL_214:
      v142 = 3072;
LABEL_215:
      *(_DWORD *)v142 = -559038737;
      abort();
    }
LABEL_179:
    v142 = 2989;
    goto LABEL_215;
  }
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  v94 = v93;
LABEL_111:
  if (v72 < 2)
    goto LABEL_138;
  v112 = v72 >> 1;
  if (a1[80])
  {
    v147 = __si_assert_copy_extra(*(_DWORD **)(*(_QWORD *)(a2 + 48) + 4480));
    v148 = v147;
    v149 = "";
    if (v147)
      v149 = v147;
    __message_assert("%s:%u: failed assertion '%s' %s nxtLink: %lld. compact", "PayloadIterator.c", 818, "iter->compact == false", v149, v72 >> 1);
    free(v148);
    if (__valid_fsp(*(_DWORD **)(*(_QWORD *)(a2 + 48) + 4480)))
      v150 = 2989;
    else
      v150 = 3072;
    *(_DWORD *)v150 = -559038737;
    abort();
  }
  v113 = (v72 >> 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v113 == v46)
    goto LABEL_138;
  if (v113 <= v46)
  {
    v115 = *((_QWORD *)a1 + 3);
    v116 = *(_QWORD *)(a2 + 48);
    v117 = *(_QWORD *)(v116 + 32);
    if (v115 >= v117)
      v117 = 2 * v115;
    v119 = v113 <= v117 && v46 > v117;
    if (v113 < v115 || v119)
    {
      if ((_DWORD)v4)
        oqpush_with_meta((uint64_t)(a1 + 160), v112 | v65, LODWORD(v5));
      else
        oqpush_9141(a1 + 160, v112 | v65, v19);
      if (*(_QWORD *)(a2 + 32) > v113)
      {
        v121 = *((_QWORD *)a1 + 3);
        if (v113 < v121 && v113 > v121 >> 1)
          *(_QWORD *)(a2 + 32) = v113;
      }
      goto LABEL_138;
    }
    v155 = v117;
    v156 = __si_assert_copy_extra(*(_DWORD **)(v116 + 4480));
    v157 = v156;
    v158 = "";
    if (v156)
      v158 = v156;
    __message_assert("%s:%u: failed assertion '%s' %s Unexpected value for nextLink: %lld. next=%lld barrier=%lld split=%lld", "PayloadIterator.c", 842, "(OFFSET_GET_VALUE(nxtLink) <= barrier && next>barrier)|| (OFFSET_GET_VALUE(nxtLink)<iter->split)", v158, v113, v64, v155, *((_QWORD *)a1 + 3));
    free(v157);
    if (!__valid_fsp(*(_DWORD **)(*(_QWORD *)(a2 + 48) + 4480)))
      goto LABEL_214;
    goto LABEL_179;
  }
  if ((_DWORD)v4)
  {
    v114 = v112 | v65;
    pq_force_meta((uint64_t)(a1 + 232));
    pqpush_with_meta((uint64_t)(a1 + 232), v114, LODWORD(v5));
  }
  else
  {
    pqpush((uint64_t)(a1 + 232), v112 | v65);
  }
  v120 = *(_QWORD *)(a2 + 24);
  if (v120 >= v113)
    v120 = v113;
  *(_QWORD *)(a2 + 24) = v120;
LABEL_138:
  v122 = *((_QWORD *)a1 + 1);
  if ((v122 & 0x3FFFFFFFFFFFFFFFLL) != 0)
  {
    v123 = v122 & 0x3FFFFFFFFFFFFFFFLL;
    return v123 != 0;
  }
  v59 = v94;
  v58 = *((_QWORD *)a1 + 1);
  do
  {
LABEL_141:
    v124 = *((_QWORD *)a1 + 25);
    v125 = *((_QWORD *)a1 + 26);
    if (*((_QWORD *)a1 + 32) == 1)
    {
      v126 = v58;
      if (v125 == v124)
        break;
      goto LABEL_161;
    }
    if (v125 == v124)
      goto LABEL_160;
    v127 = *((_QWORD *)a1 + 30);
    if (a1[232])
    {
      if (v127)
      {
        v128 = (unint64_t *)(v127 + 16);
LABEL_150:
        v129 = *v128;
        goto LABEL_152;
      }
    }
    else if (v127)
    {
      v128 = (unint64_t *)(v127 + 8);
      goto LABEL_150;
    }
    v129 = 0;
LABEL_152:
    if (a1[160])
    {
      if (v124 < v125)
      {
        v130 = (unint64_t *)(*((_QWORD *)a1 + 22) + 16 * v124);
LABEL_157:
        v131 = *v130;
        goto LABEL_159;
      }
    }
    else if (v124 < v125)
    {
      v130 = (unint64_t *)(*((_QWORD *)a1 + 22) + 8 * v124);
      goto LABEL_157;
    }
    v131 = 0;
LABEL_159:
    if (v129 < v131)
    {
LABEL_160:
      v58 = pqpop((uint64_t)(a1 + 232), a1);
      goto LABEL_162;
    }
LABEL_161:
    v58 = oqpop((uint64_t)(a1 + 160), a1);
LABEL_162:
    *((_QWORD *)a1 + 1) = v58;
    *((_QWORD *)a1 + 2) = v132;
    v126 = v58;
  }
  while (((v58 ^ v59) & 0x3FFFFFFFFFFFFFFFLL) == 0);
  v123 = v126 & 0x3FFFFFFFFFFFFFFFLL;
  if ((v126 & 0x3FFFFFFFFFFFFFFFLL) == 0)
  {
    v123 = *((_QWORD *)a1 + 24);
    if (v123)
    {
      v123 = *((_QWORD *)a1 + 3);
      do
      {
        v133 = v123 >> 1;
        if (v133 >= *(_QWORD *)(*(_QWORD *)(a2 + 48) + 32))
          v134 = v133;
        else
          v134 = 0;
        *((_QWORD *)a1 + 3) = v134;
        oqsplit((uint64_t)(a1 + 160), v134);
        v135 = oqpop((uint64_t)(a1 + 160), a1);
        *((_QWORD *)a1 + 1) = v135;
        *((_QWORD *)a1 + 2) = v136;
        v123 = v135 & 0x3FFFFFFFFFFFFFFFLL;
        if ((v135 & 0x3FFFFFFFFFFFFFFFLL) != 0)
          break;
        v123 = *((_QWORD *)a1 + 3);
      }
      while (v123);
    }
  }
  return v123 != 0;
}

uint64_t ipqpop(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v27;
  char *v28;
  const char *v29;
  uint64_t v30;

  v1 = a1[2];
  v2 = v1 - 1;
  if (v1 == 1)
  {
    v27 = __si_assert_copy_extra(0);
    v28 = v27;
    v29 = "";
    if (v27)
      v29 = v27;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 82, "pqcount_ItemIteratorRef(queue)!=0", v29);
    free(v28);
    if (__valid_fs(-1))
      v30 = 2989;
    else
      v30 = 3072;
    *(_DWORD *)v30 = -559038737;
    abort();
  }
  v3 = a1[1];
  v4 = *(_QWORD *)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 8 * v2);
  *(_QWORD *)(*a1 + 8) = v5;
  a1[2] = v2;
  v6 = v3 >> 1;
  v7 = 3;
  v8 = 2;
  v9 = 1;
  do
  {
    v10 = *a1;
    v11 = *(_QWORD *)(*a1 + 8 * v8);
    if (v7 >= v1)
    {
      if (v8 >= v1)
        return v4;
      v12 = -1;
    }
    else
    {
      v12 = *(_QWORD *)(v10 + 8 * v7);
    }
    if (v5 == -1)
    {
      v13 = -1;
    }
    else if (v5)
    {
      v13 = *(_QWORD *)(v5 + 8);
    }
    else
    {
      v13 = 0;
    }
    if (v11 == -1)
    {
      v14 = -1;
    }
    else if (v11)
    {
      v14 = *(_QWORD *)(v11 + 8);
    }
    else
    {
      v14 = 0;
    }
    if (v12 == -1)
    {
      v15 = -1;
    }
    else if (v12)
    {
      v15 = *(_QWORD *)(v12 + 8);
    }
    else
    {
      v15 = 0;
    }
    if (v15 >= v13)
      v16 = v5;
    else
      v16 = v12;
    if (v15 >= v13)
      v17 = v9;
    else
      v17 = v7;
    if (v15 < v14)
    {
      v11 = v12;
      v8 = v7;
    }
    if (v14 < v13)
      v18 = v11;
    else
      v18 = v16;
    if (v14 < v13)
      v19 = v8;
    else
      v19 = v17;
    _X13 = v10 + 16 * v19;
    __asm { PRFM            #1, [X13] }
    if (v19 == v9)
      break;
    v8 = 2 * v19;
    *(_QWORD *)(v10 + 8 * v19) = v5;
    v7 = (2 * v19) | 1;
    *(_QWORD *)(*a1 + 8 * v9) = v18;
    v9 = v19;
  }
  while (v19 < v6);
  return v4;
}

void ipqpush(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  char *v17;
  char *v18;
  const char *v19;
  uint64_t v20;

  if (!a2)
  {
    v17 = __si_assert_copy_extra(0);
    v18 = v17;
    v19 = "";
    if (v17)
      v19 = v17;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 87, "item!=0", v19);
    free(v18);
    if (__valid_fs(-1))
      v20 = 2989;
    else
      v20 = 3072;
    *(_DWORD *)v20 = -559038737;
    abort();
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((uint64_t)(v5 + 2) >= v4)
  {
    v7 = 2 * v4;
    if (v4 < 4)
      v7 = 4;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = 8 * v7 + 16;
    if (*(_QWORD *)a1)
      v9 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, *(void **)a1, v8, 0xECA6AA46uLL);
    else
      v9 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v8, 0x8DDAA030uLL);
    v10 = v9;
    if (!v9)
      _log_fault_for_malloc_failure();
    *(_QWORD *)a1 = v10;
    *v10 = 0;
    v6 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = v6 + 1;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = a2;
  if ((uint64_t)v5 >= 2)
  {
    do
    {
      v11 = *(_QWORD **)a1;
      v12 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v5);
      v13 = v12;
      if (v12 != -1 && v12)
        v13 = *(_QWORD *)(v12 + 8);
      v14 = v11[v5 >> 1];
      v15 = v14;
      if (v14 != -1 && v14)
        v15 = *(_QWORD *)(v14 + 8);
      if (v13 > v15)
        break;
      v11[v5] = v14;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * (v5 >> 1)) = v12;
      v16 = v5 > 3;
      v5 >>= 1;
    }
    while (v16);
  }
}

uint64_t unpackPosting(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  char *v39;
  const char *v40;
  uint64_t v41;

  v3 = 0;
  v4 = 0;
  v5 = *a2;
  do
  {
    v6 = v5++;
    v4 |= (unint64_t)(*(_BYTE *)(a1 + v6) & 0x7F) << v3;
    if ((*(_BYTE *)(a1 + v6) & 0x80) == 0)
      break;
    v7 = v3 == 63;
    v3 += 7;
  }
  while (!v7);
  *a2 = v5;
  *(_QWORD *)(a3 + 4) = v4;
  if ((v4 & 1) == 0)
  {
    v8 = v6 + 2;
    v9 = *(char *)(a1 + v5);
    v10 = *(unsigned __int8 *)(a1 + v5);
    if (v9 < 0)
    {
      v11 = v6 + 3;
      v13 = *(char *)(a1 + v8);
      v14 = *(unsigned __int8 *)(a1 + v8);
      if (v13 < 0)
      {
        v15 = v6 + 4;
        v16 = *(char *)(a1 + v11);
        v17 = v16;
        if (v16 < 0)
        {
          v11 = v6 + 5;
          v19 = *(char *)(a1 + v15);
          v20 = *(unsigned __int8 *)(a1 + v15);
          if (v19 < 0)
          {
            v22 = *(char *)(a1 + v11);
            if (v22 < 0)
              goto LABEL_37;
            v23 = v22;
            v11 = v6 + 6;
            v21 = ((v20 & 0x7F) << 21) | (v23 << 28) | ((v17 & 0x7F) << 14);
          }
          else
          {
            v21 = ((v17 & 0x7F) << 14) | (v20 << 21);
          }
          v18 = v21 & 0xFFFFC000 | ((v14 & 0x7F) << 7) | v10 & 0x7F;
        }
        else
        {
          v18 = ((v14 & 0x7F) << 7) | (v16 << 14) | v10 & 0x7F;
          v11 = v15;
        }
        v10 = v18;
      }
      else
      {
        v10 = v10 & 0x7F | (v14 << 7);
      }
    }
    else
    {
      v11 = v6 + 2;
    }
    *a2 = v11;
    *(_DWORD *)a3 = v10;
    *(_QWORD *)(a3 + 4) = v4 >> 1;
    if (v10)
      return 0;
    v25 = v11 + 1;
    v12 = *(unsigned __int8 *)(a1 + v11);
    if ((*(char *)(a1 + v11) & 0x80000000) == 0)
    {
      v26 = v11 + 1;
      goto LABEL_35;
    }
    v26 = v11 + 2;
    v27 = *(char *)(a1 + v25);
    v28 = *(unsigned __int8 *)(a1 + v25);
    if ((v27 & 0x80000000) == 0)
    {
      v12 = v12 & 0x7F | (v28 << 7);
      goto LABEL_35;
    }
    v29 = v11 + 3;
    v30 = *(char *)(a1 + v26);
    v31 = v30;
    if ((v30 & 0x80000000) == 0)
    {
      v32 = ((v28 & 0x7F) << 7) | (v30 << 14) | (v12 & 0x7F);
      v26 = v29;
LABEL_34:
      v12 = v32;
LABEL_35:
      *a2 = v26;
      if ((_DWORD)v12 == 2)
        return v12;
      goto LABEL_9;
    }
    v26 = v11 + 4;
    v33 = *(char *)(a1 + v29);
    v34 = *(unsigned __int8 *)(a1 + v29);
    if ((v33 & 0x80000000) == 0)
    {
      v35 = ((v31 & 0x7F) << 14) | (v34 << 21);
LABEL_33:
      v32 = v35 & 0xFFFFC000 | ((v28 & 0x7F) << 7) | v12 & 0x7F;
      goto LABEL_34;
    }
    v36 = *(char *)(a1 + v26);
    if ((v36 & 0x80000000) == 0)
    {
      v37 = v36;
      v26 = v11 + 5;
      v35 = ((v34 & 0x7F) << 21) | (v37 << 28) | ((v31 & 0x7F) << 14);
      goto LABEL_33;
    }
LABEL_37:
    v38 = __si_assert_copy_extra(0);
    v39 = v38;
    v40 = "";
    if (v38)
      v40 = v38;
    __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", "VIntUtils.h", 341, "(b4 & 0x80) == 0", v40);
    free(v39);
    if (__valid_fs(-1))
      v41 = 2989;
    else
      v41 = 3072;
    *(_DWORD *)v41 = -559038737;
    abort();
  }
  v12 = 0;
  *(_QWORD *)(a3 + 4) = v4 >> 1;
LABEL_9:
  *(_DWORD *)a3 = 1;
  return v12;
}

uint64_t unpackPostingChunk(uint64_t a1, unint64_t *a2, unint64_t a3, unsigned int a4, uint64_t a5, void (*a6)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t), uint64_t a7)
{
  unint64_t v9;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  unsigned int VInt32;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  char v56;
  int v57;
  int v58;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  const char *v65;
  char *v66;
  char *v67;
  const char *v68;
  char *v69;
  char *v70;
  const char *v71;
  char *v72;
  const char *v73;
  char *v74;
  const char *v75;

  v9 = *a2;
  if (*a2 >= a3)
  {
    v15 = 0;
LABEL_108:
    v63 = __si_assert_copy_extra_268();
    v64 = v63;
    v65 = "";
    if (v63)
      v65 = v63;
    __message_assert("%s:%u: failed assertion '%s' %s Offset past bounds; incoming %ld, current %ld, buffer length %ld, val %llu from %d",
      "PostingChunk.c",
      90,
      "offset < bufferLength",
      v65,
      *a2,
      v9,
      a3,
      v15,
      923);
    goto LABEL_111;
  }
  v14 = 0;
  v15 = 0;
  while (1)
  {
    v16 = v9 + 1;
    v15 |= (unint64_t)(*(_BYTE *)(a1 + v9) & 0x7F) << v14;
    if ((*(_BYTE *)(a1 + v9) & 0x80) == 0 || v14 == 63)
      break;
    v14 += 7;
    ++v9;
    if (a3 == v16)
    {
      v9 = a3;
      goto LABEL_108;
    }
  }
  *a2 = v16;
  if (!v15)
    return 0;
  if (v16 >= a3)
  {
    v18 = 0;
LABEL_113:
    v66 = __si_assert_copy_extra_268();
    v67 = v66;
    v68 = "";
    if (v66)
      v68 = v66;
    __message_assert("%s:%u: failed assertion '%s' %s Offset past bounds; incoming %ld, current %ld, buffer length %ld, val %llu from %d",
      "PostingChunk.c",
      90,
      "offset < bufferLength",
      v68,
      *a2,
      v16,
      a3,
      v18,
      929);
LABEL_116:
    free(v67);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v17 = 0;
  v18 = 0;
  while (1)
  {
    v18 |= (unint64_t)(*(_BYTE *)(a1 + v9 + 1) & 0x7F) << v17;
    if ((*(_BYTE *)(a1 + v9 + 1) & 0x80) == 0 || v17 == 63)
      break;
    v17 += 7;
    if (a3 - 1 == ++v9)
    {
      v16 = a3;
      goto LABEL_113;
    }
  }
  v19 = v9 + 2;
  *a2 = v9 + 2;
  v20 = a3 - v9 - 2;
  if (v15 > v18)
  {
    v21 = 1;
    a6(a7, v15, 1, 0, 0, a5);
    if ((_DWORD)v18)
    {
      v22 = v15;
      while (1)
      {
        while (1)
        {
          if (v22 <= v18)
            goto LABEL_95;
          if (v22 - v18 >= a4)
            goto LABEL_101;
          v21 = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t))a6)(a7, v22 - v18, 1, 0, 0, a5);
          if (!(_DWORD)v21)
            return v21;
          v22 -= v18;
          v23 = *a2;
          if (*a2 + 5 <= a3)
            break;
          LODWORD(v18) = _protectedReadVInt32(a1, a2, a3);
          if (!(_DWORD)v18)
            return v21;
        }
        v24 = v23 + 1;
        LODWORD(v18) = *(unsigned __int8 *)(a1 + v23);
        if (*(char *)(a1 + v23) < 0)
        {
          v25 = v23 + 2;
          v26 = *(char *)(a1 + v24);
          v27 = *(unsigned __int8 *)(a1 + v24);
          if (v26 < 0)
          {
            v28 = *(char *)(a1 + v25);
            v29 = v28;
            if (v28 < 0)
            {
              v25 = v23 + 4;
              v30 = *(char *)(a1 + v23 + 3);
              v31 = *(unsigned __int8 *)(a1 + v23 + 3);
              if (v30 < 0)
              {
                v32 = *(char *)(a1 + v25);
                if (v32 < 0)
                {
                  v62 = __si_assert_copy_extra_268();
                  __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
LABEL_102:
                  free(v62);
                  if (__valid_fs(-1))
                  {
                    MEMORY[0xBAD] = -559038737;
                    abort();
                  }
                  MEMORY[0xC00] = -559038737;
                  abort();
                }
                v33 = ((v31 & 0x7F) << 21) | (v32 << 28) | ((v29 & 0x7F) << 14) | ((v27 & 0x7F) << 7) | v18 & 0x7F;
                v25 = *a2 + 5;
                LODWORD(v18) = v33;
              }
              else
              {
                LODWORD(v18) = ((v29 & 0x7F) << 14) | (v31 << 21) | ((v27 & 0x7F) << 7) | v18 & 0x7F;
              }
            }
            else
            {
              v25 = v23 + 3;
              LODWORD(v18) = ((v27 & 0x7F) << 7) | (v29 << 14) | v18 & 0x7F;
            }
          }
          else
          {
            LODWORD(v18) = v18 & 0x7F | (v27 << 7);
          }
        }
        else
        {
          v25 = v23 + 1;
        }
        *a2 = v25;
        if (!(_DWORD)v18)
          return v21;
      }
    }
    return v21;
  }
  if (v15 >= v18)
  {
    if (v15 != v18)
      return 0;
    if (v19 < a3)
    {
      v35 = 0;
      v36 = 0;
      v37 = v9 + 3;
      v38 = (char *)(a1 + v9 + 2);
      while (1)
      {
        v39 = *v38++;
        v36 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0 || v35 == 63)
          break;
        v35 += 7;
        ++v37;
        if (!--v20)
        {
          v19 = a3;
          goto LABEL_127;
        }
      }
      *a2 = v37;
      if (v36 <= 1)
        v40 = 1;
      else
        v40 = v36;
      if ((_DWORD)v36)
      {
        while (1)
        {
          if (!((unsigned int (*)(uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a6)(a7, v15, 1, 0, v40, a5))return 0;
          v41 = *a2;
          if (*a2 >= a3)
            break;
          v42 = 0;
          v43 = 0;
          while (1)
          {
            v44 = *(_BYTE *)(a1 + v41++);
            v43 |= (unint64_t)(v44 & 0x7F) << v42;
            if ((v44 & 0x80) == 0 || v42 == 63)
              break;
            v42 += 7;
            if (a3 == v41)
            {
              v41 = a3;
              goto LABEL_133;
            }
          }
          *a2 = v41;
          v15 -= v43;
          if (!v43)
            return 1;
        }
        v43 = 0;
LABEL_133:
        v74 = __si_assert_copy_extra_268();
        v67 = v74;
        v75 = "";
        if (v74)
          v75 = v74;
        __message_assert("%s:%u: failed assertion '%s' %s Offset past bounds; incoming %ld, current %ld, buffer length %ld, val %llu from %d",
          "PostingChunk.c",
          90,
          "offset < bufferLength",
          v75,
          *a2,
          v41,
          a3,
          v43,
          912);
        goto LABEL_116;
      }
      return ((unsigned int (*)(uint64_t, unint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a6)(a7, v15, 1, 0, v40, a5) != 0;
    }
    v36 = 0;
LABEL_127:
    v72 = __si_assert_copy_extra_268();
    v64 = v72;
    v73 = "";
    if (v72)
      v73 = v72;
    __message_assert("%s:%u: failed assertion '%s' %s Offset past bounds; incoming %ld, current %ld, buffer length %ld, val %llu from %d",
      "PostingChunk.c",
      90,
      "offset < bufferLength",
      v73,
      *a2,
      v19,
      a3,
      v36,
      899);
LABEL_111:
    v60 = v64;
    goto LABEL_97;
  }
  if (!*(_BYTE *)(a1 + v19))
  {
    if (v9 + 7 > a3)
    {
      if (!_protectedReadVInt32(a1, a2, a3))
        goto LABEL_66;
      v45 = __si_assert_copy_extra_268();
      __message_assert("%s:%u: failed assertion '%s' %s %d");
LABEL_96:
      v60 = v45;
LABEL_97:
      free(v60);
      if (__valid_fs(-1))
        v61 = 2989;
      else
        v61 = 3072;
      *(_DWORD *)v61 = -559038737;
      abort();
    }
    *a2 = v9 + 3;
    while (1)
    {
LABEL_66:
      v46 = *a2;
      v47 = *a2 + 5;
      if (v47 <= a3)
      {
        v50 = v46 + 1;
        VInt32 = *(unsigned __int8 *)(a1 + v46);
        if (*(char *)(a1 + v46) < 0)
        {
          v51 = v46 + 2;
          v52 = *(char *)(a1 + v50);
          v53 = *(unsigned __int8 *)(a1 + v50);
          if ((v52 & 0x80000000) == 0)
          {
            VInt32 = VInt32 & 0x7F | (v53 << 7);
            goto LABEL_74;
          }
          v54 = v46 + 3;
          v55 = *(char *)(a1 + v51);
          v56 = v55;
          if ((v55 & 0x80000000) == 0)
          {
            VInt32 = ((v53 & 0x7F) << 7) | (v55 << 14) | VInt32 & 0x7F;
            *a2 = v54;
            v49 = v18 - VInt32;
            if (v18 < VInt32)
              goto LABEL_95;
            goto LABEL_78;
          }
          v51 = v46 + 4;
          v57 = *(char *)(a1 + v54);
          if ((v57 & 0x80000000) == 0)
          {
            VInt32 = ((v56 & 0x7F) << 14) | (v57 << 21) | ((v53 & 0x7F) << 7) | VInt32 & 0x7F;
LABEL_74:
            *a2 = v51;
            v49 = v18 - VInt32;
            if (v18 < VInt32)
              goto LABEL_95;
            goto LABEL_78;
          }
          v58 = *(char *)(a1 + v51);
          if (v58 < 0)
          {
            v45 = __si_assert_copy_extra_268();
            __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
            goto LABEL_96;
          }
          VInt32 = ((v57 & 0x7F) << 21) | (v58 << 28) | ((v56 & 0x7F) << 14) | ((v53 & 0x7F) << 7) | VInt32 & 0x7F;
          *a2 = v47;
          v49 = v18 - VInt32;
          if (v18 < VInt32)
            goto LABEL_95;
        }
        else
        {
          *a2 = v50;
          v49 = v18 - VInt32;
          if (v18 < VInt32)
            goto LABEL_95;
        }
      }
      else
      {
        VInt32 = _protectedReadVInt32(a1, a2, a3);
        v49 = v18 - VInt32;
        if (v18 < VInt32)
          goto LABEL_95;
      }
LABEL_78:
      if (v49 < v15)
        goto LABEL_95;
      if (VInt32 < 2)
      {
        LODWORD(v18) = v49;
        if (!VInt32)
        {
          if (v15 < a4 && v49 <= a4)
            return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))a6)(a7, v15, v49 - v15, 0, 0, a5);
LABEL_101:
          v62 = __si_assert_copy_extra_268();
          __message_assert("%s:%u: failed assertion '%s' %s %d, %d");
          goto LABEL_102;
        }
      }
      else
      {
        if (v49 + 1 >= a4)
          goto LABEL_101;
        LODWORD(v18) = v49;
        if ((((uint64_t (*)(uint64_t))a6)(a7) & 1) == 0)
          return 0;
      }
    }
  }
  if (v15 >= a4)
  {
LABEL_95:
    v45 = __si_assert_copy_extra_268();
    __message_assert("%s:%u: failed assertion '%s' %s %d, %d");
    goto LABEL_96;
  }
  if (v18 > a4)
    goto LABEL_101;
  v34 = v19 + ((v18 - v15 + 7) >> 3);
  if (v34 > a3)
  {
    v69 = __si_assert_copy_extra_268();
    v70 = v69;
    v71 = "";
    if (v69)
      v71 = v69;
    __message_assert("%s:%u: failed assertion '%s' %s %ld, %ld", "PostingChunk.c", 843, "newOffset <= bufferLength", v71, v34, a3);
    free(v70);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (!((unsigned int (*)(uint64_t, _QWORD))a6)(a7, v15))
    return 0;
  *a2 = v34;
  return 1;
}

uint64_t PayloadProcessDocIDRangeBitsReversed(uint64_t a1, unint64_t a2, unsigned int a3, uint8_t *a4, int a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int *v15;
  uint64_t v16;
  int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int8x8_t v23;
  uint64_t v24;
  _BOOL4 v25;
  unsigned int v26;
  unsigned int *v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  int *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  size_t v40;
  uint8_t *v41;
  uint8_t *v42;
  char *v43;
  char *v44;
  const char *v45;
  uint64_t v46;
  unsigned int v47;
  char *v49;
  const char *v50;
  char *v51;
  const char *v52;
  NSObject *v53;
  int v54;
  NSObject *v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int *v60;
  uint8_t v61[4];
  unint64_t v62;
  __int16 v63;
  unint64_t v64;
  uint8_t buf[48];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(unsigned __int8 *)(a1 + 16);
  v14 = (int *)(a1 + 20);
  v15 = (int *)&unk_1EF19F000;
  if (dword_1EF19FCB4 < 5)
  {
    if (!a5)
      goto LABEL_3;
LABEL_35:
    if (a3 == 1)
    {
      if (!a4)
      {
        handleUpdate((_QWORD *)v11, a2, a5, a6);
        return 1;
      }
      v51 = __si_assert_copy_extra(0);
      v44 = v51;
      v52 = "";
      if (v51)
        v52 = v51;
      __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 550, "bits == ((void *)0)", v52);
    }
    else
    {
      v49 = __si_assert_copy_extra(0);
      v44 = v49;
      v50 = "";
      if (v49)
        v50 = v49;
      __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 549, "range.length == 1", v50);
    }
LABEL_52:
    free(v44);
    if (__valid_fs(-1))
      v46 = 2989;
    else
      v46 = 3072;
    *(_DWORD *)v46 = -559038737;
    abort();
  }
  v58 = *__error();
  v28 = _SILogForLogForCategory(10);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v29 = *v14;
    v30 = *(_QWORD *)(v11 + 88);
    *(_DWORD *)buf = 134219008;
    *(_QWORD *)&buf[4] = a2;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = a4;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v29;
    *(_WORD *)&buf[34] = 2048;
    *(_QWORD *)&buf[36] = v30;
    _os_log_impl(&dword_1B8270000, v28, OS_LOG_TYPE_DEFAULT, "range: %llu %u (%p) hint:%d docSet:%p", buf, 0x2Cu);
  }
  *__error() = v58;
  v15 = (_DWORD *)&unk_1EF19F000;
  if (a5)
    goto LABEL_35;
LABEL_3:
  v60 = v14;
  if ((a6 & 1) == 0)
  {
    v16 = a3;
    goto LABEL_17;
  }
  if (!a2)
  {
    v43 = __si_assert_copy_extra(0);
    v44 = v43;
    v45 = "";
    if (v43)
      v45 = v43;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 388, "range.location > 0", v45);
    goto LABEL_52;
  }
  v16 = a3;
  if (a4)
  {
    if (!a3)
      goto LABEL_17;
    v57 = v13;
    v17 = v15;
    v18 = 0;
    v19 = a3;
    v20 = a3;
    do
    {
      if (((a4[v18 >> 3] >> (v18 & 7)) & 1) != 0)
        distanceHolderSetMinDistance(*(_QWORD *)(v11 + 72), *(_QWORD *)(v11 + 112) + (a2 - 1 + v20), *((float *)&a6 + 1));
      ++v18;
      --v20;
    }
    while (v20);
    v15 = v17;
    v13 = v57;
  }
  else
  {
    if (!a3)
      goto LABEL_17;
    v19 = a3;
    v21 = a3;
    do
      distanceHolderSetMinDistance(*(_QWORD *)(v11 + 72), *(_QWORD *)(v11 + 112) + (a2 - 1 + v21--), *((float *)&a6 + 1));
    while (v21);
  }
  v16 = v19;
LABEL_17:
  v22 = a2 + a3 - 1;
  if (*(_DWORD *)(v12 + 40) >= v22)
  {
    if (a2 < *(unsigned int *)(v12 + 44))
      *(_DWORD *)(v12 + 44) = a2;
  }
  else
  {
    *(_DWORD *)(v12 + 40) = a3 + a2 - 1;
  }
  v23 = 0;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v66 = 0u;
  memset(buf, 0, sizeof(buf));
  v24 = *(_QWORD *)(v11 + 136);
  if (!v24)
    goto LABEL_22;
  v31 = v16;
  v32 = *(unint64_t **)(v11 + 128);
  if (!*(_QWORD *)(v11 + 152))
    v32 += 2 * (*(_QWORD *)(v11 + 144) - v24);
  v33 = *(_QWORD *)(v11 + 112) + a2;
  v34 = *v32;
  if (v15[813] >= 5)
  {
    v59 = v13;
    v56 = *__error();
    v53 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v61 = 134218240;
      v62 = v33;
      v63 = 2048;
      v64 = v34;
      _os_log_impl(&dword_1B8270000, v53, OS_LOG_TYPE_DEFAULT, "rMin:%lld, uMax:%lld, ", v61, 0x16u);
    }
    v13 = v59;
    *__error() = v56;
  }
  if (v34 < v33)
    goto LABEL_22;
  v35 = v15;
  v36 = *(_QWORD *)(v11 + 152);
  if (v36 != *(_QWORD *)(v11 + 136))
    v36 = *(_QWORD *)(v11 + 144);
  v37 = a2 + v31 + *(_QWORD *)(v11 + 112) - 1;
  v38 = *(_QWORD *)(*(_QWORD *)(v11 + 128) + 16 * v36 - 16);
  if (v35[813] >= 5)
  {
    v54 = *__error();
    v55 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v61 = 134218240;
      v62 = v37;
      v63 = 2048;
      v64 = v38;
      _os_log_impl(&dword_1B8270000, v55, OS_LOG_TYPE_DEFAULT, "rMax:%lld, uMin:%lld, ", v61, 0x16u);
    }
    *__error() = v54;
  }
  if (v38 <= v37)
  {
    v39 = (a3 + 7) >> 3;
    v25 = v39 > 0xFB;
    if (v39 <= 0xFB)
    {
      v42 = buf;
      if (a4)
        __memcpy_chk();
      else
        __memset_chk();
    }
    else
    {
      v40 = (a3 + 7) >> 3;
      v41 = (uint8_t *)malloc_type_malloc(v39 + 4, 0xBFFCDDCuLL);
      v42 = v41;
      if (a4)
        memcpy(v41, a4, v40);
      else
        memset(v41, 255, v40);
    }
    checkAgainstUpdatesBulkReversed(v11, a2, a3, (uint64_t)v42);
    a4 = v42;
    if (!v13)
    {
LABEL_61:
      if (*(_DWORD *)(v11 + 104)
        && lockedCountItemsInRange(*(_DWORD **)(v11 + 96), a2, a3 - 1 + a2, v23)
        && a3)
      {
        v47 = 0;
        do
        {
          if ((!a4 || ((a4[(unint64_t)v47 >> 3] >> (v47 & 7)) & 1) != 0)
            && _CIIndexSetRemoveIndex(*(int **)(v11 + 96), v22))
          {
            --*(_DWORD *)(v11 + 104);
          }
          ++v47;
          --v22;
        }
        while (a3 != v47);
      }
      goto LABEL_70;
    }
  }
  else
  {
LABEL_22:
    v25 = 0;
    if (!v13)
      goto LABEL_61;
  }
  if (a3)
  {
    v26 = 0;
    do
    {
      if ((!a4 || ((a4[(unint64_t)v26 >> 3] >> (v26 & 7)) & 1) != 0)
        && (CIIndexSetHasIndex(*(_QWORD *)(v11 + 88), v22) & 1) == 0)
      {
        v27 = *(unsigned int **)(v11 + 96);
        *(_DWORD *)v61 = -1;
        if (_CIIndexSetAddIndex(v27, v22, 0, v61, v23))
          ++*(_DWORD *)(v11 + 104);
      }
      ++v26;
      --v22;
    }
    while (a3 != v26);
  }
LABEL_70:
  CIIndexSetAddRangeFromBitVectorWithHint(*(unsigned int **)(v11 + 88), a2, a3, (uint64_t)a4, v60, v23);
  if (v25)
    free(a4);
  return 1;
}

unsigned int *CIIndexSetAddRangeFromBitVectorWithHint(unsigned int *cf, unint64_t a2, int a3, uint64_t a4, int *a5, int8x8_t a6)
{
  unint64_t v6;
  unsigned int *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int *v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int *v25;
  int8x8_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;

  v6 = cf[6];
  if (a2 <= v6 && a3 != 0)
  {
    v9 = cf;
    v10 = cf[5];
    v11 = a2 - v10;
    if (a2 <= v10)
      v12 = cf[5];
    else
      v12 = a2;
    v13 = (v10 - a2) >> 3;
    if (v10 <= a2)
    {
      v13 = 0;
      v11 = 0;
    }
    v14 = (v11 + a3);
    v15 = v12 + v14 - 1;
    if (v15 <= v6)
      v16 = 0;
    else
      v16 = v6 - v15;
    v17 = v16 + v14;
    if (a4)
    {
      v18 = (unsigned int *)(a4 + v13);
      v19 = cf[4];
      if (v19 > -10)
      {
        LODWORD(v28) = 0;
        v29 = v12 + v17 - 1;
        while (v28 < v17)
        {
          if (((*((unsigned __int8 *)v18 + ((unint64_t)v28 >> 3)) >> (v28 & 7)) & 1) != 0)
          {
            v30 = v29 - v28;
            while (1)
            {
              v31 = v28;
              v28 = (v28 + 1);
              if (v28 >= v17)
                break;
              if (((*((unsigned __int8 *)v18 + (v28 >> 3)) >> (v28 & 7)) & 1) == 0)
              {
                LODWORD(v28) = v31 + 1;
                break;
              }
            }
            cf = _CIIndexSetAddIndexesInRange(v9, v29 - v31, v30, a5, a6);
            v32 = v9[4];
            if (v32 <= -10)
            {
              v33 = v28 & 0xFFFFFFF8;
              v34 = v9[6] - v9[5];
              v35 = ((v17 - (v28 & 0xFFFFFFF8)) >> 1) - v32 - 10;
              if (v34 + 1 < v35)
                v35 = v34 + 1;
              v9[4] = -10 - v35;
              if (v17 != v33)
              {
                v25 = (unsigned int *)((char *)v18 + (v28 >> 3));
                v23 = v17 - v33;
                cf = v9;
                v24 = v12;
                goto LABEL_21;
              }
              return cf;
            }
          }
          else
          {
            LODWORD(v28) = v28 + 1;
          }
        }
      }
      else
      {
        v20 = v6 - v10;
        v21 = (v17 >> 1) - v19 - 10;
        if (v20 + 1 < v21)
          v22 = v20 + 1;
        else
          v22 = v21;
        cf[4] = -10 - v22;
        v23 = v16 + v14;
        v24 = v12;
        v25 = v18;
LABEL_21:
        CIIndexSetAddRangeFromBitVector_Bitmap((uint64_t)cf, v24, v23, v25);
        return _CIIndexSetConvertIfInvertedArrayIsMoreEfficient(v9, 0, v26);
      }
    }
    else
    {
      v27 = v12 + v17 - 1;
      if (v12 == v27)
        return (unsigned int *)_CIIndexSetAddIndex(cf, v12 + v17 - 1, 0, a5, a6);
      else
        return _CIIndexSetAddIndexesInRange(cf, v12, v27, a5, a6);
    }
  }
  return cf;
}

uint64_t _protectedReadVInt32(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  int v6;
  uint64_t result;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const char *v25;
  char *v26;
  const char *v27;
  char *v28;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  const char *v33;

  v3 = *a2;
  if (*a2 >= a3)
  {
    v19 = __si_assert_copy_extra_268();
    v20 = v19;
    v21 = "";
    if (v19)
      v21 = v19;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 19, "offset < bufferLength", v21);
    goto LABEL_22;
  }
  v5 = v3 + 1;
  v6 = *(char *)(a1 + v3);
  result = *(unsigned __int8 *)(a1 + v3);
  if (v6 < 0)
  {
    if (v5 >= a3)
    {
      v23 = __si_assert_copy_extra_268();
      v24 = v23;
      v25 = "";
      if (v23)
        v25 = v23;
      __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 22, "offset < bufferLength", v25);
      goto LABEL_29;
    }
    v8 = v3 + 2;
    v9 = *(char *)(a1 + v5);
    v10 = *(unsigned __int8 *)(a1 + v5);
    if ((v9 & 0x80000000) == 0)
    {
      result = result & 0x7F | (v10 << 7);
      goto LABEL_18;
    }
    if (v8 < a3)
    {
      v11 = v3 + 3;
      v12 = *(char *)(a1 + v8);
      v13 = v12;
      if ((v12 & 0x80000000) == 0)
      {
        v14 = ((v10 & 0x7F) << 7) | (v12 << 14) | (result & 0x7F);
        v8 = v3 + 3;
LABEL_17:
        result = v14;
        goto LABEL_18;
      }
      if (v11 >= a3)
      {
        v28 = __si_assert_copy_extra_268();
        v24 = v28;
        v29 = "";
        if (v28)
          v29 = v28;
        __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 28, "offset < bufferLength", v29);
      }
      else
      {
        v8 = v3 + 4;
        v15 = *(char *)(a1 + v11);
        v16 = *(unsigned __int8 *)(a1 + v11);
        if ((v15 & 0x80000000) == 0)
        {
          v17 = ((v13 & 0x7F) << 14) | (v16 << 21);
LABEL_16:
          v14 = v17 & 0xFFFFC000 | ((v10 & 0x7F) << 7) | result & 0x7F;
          goto LABEL_17;
        }
        if (v8 >= a3)
        {
          v30 = __si_assert_copy_extra_268();
          v24 = v30;
          v31 = "";
          if (v30)
            v31 = v30;
          __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 31, "offset < bufferLength", v31);
        }
        else
        {
          v18 = *(char *)(a1 + v8);
          if ((v18 & 0x80000000) == 0)
          {
            v8 = v3 + 5;
            v17 = ((v16 & 0x7F) << 21) | (v18 << 28) | ((v13 & 0x7F) << 14);
            goto LABEL_16;
          }
          v32 = __si_assert_copy_extra_268();
          v24 = v32;
          v33 = "";
          if (v32)
            v33 = v32;
          __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 33, "(b4 & 0x80) == 0", v33);
        }
      }
LABEL_29:
      free(v24);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v26 = __si_assert_copy_extra_268();
    v20 = v26;
    v27 = "";
    if (v26)
      v27 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PostingChunk.c", 25, "offset < bufferLength", v27);
LABEL_22:
    free(v20);
    if (__valid_fs(-1))
      v22 = 2989;
    else
      v22 = 3072;
    *(_DWORD *)v22 = -559038737;
    abort();
  }
  v8 = v3 + 1;
LABEL_18:
  *a2 = v8;
  return result;
}

unsigned int *_CIIndexSetAddIndexesInRange(unsigned int *cf, unsigned int a2, unsigned int a3, int *a4, int8x8_t a5)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  CFTypeID v10;
  int8x8_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  char v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t *v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (a2 > a3)
    goto LABEL_101;
  v5 = (uint64_t)cf;
  if (cf[6] >= a3)
    v6 = a3;
  else
    v6 = cf[6];
  if (cf[5] <= a2)
    v7 = a2;
  else
    v7 = cf[5];
  v8 = v6 - v7;
  if (v6 < v7)
    return cf;
  if (v6 == v7)
    return (unsigned int *)_CIIndexSetAddIndex(cf, v6, 0, a4, a5);
  v10 = CFGetTypeID(cf);
  if (v10 != __kCIIndexSetInvertedTypeID)
  {
    v12 = *(_DWORD *)(v5 + 16);
    if (v12 > -10
      || ((v13 = *(_DWORD *)(v5 + 24) - *(_DWORD *)(v5 + 20), v14 = v8 - v12 - 9, v13 + 1 < v14)
        ? (v15 = v13 + 1)
        : (v15 = v14),
          v12 = -10 - v15,
          *(_DWORD *)(v5 + 16) = -10 - v15,
          (v15 & 0x80000000) != 0))
    {
      v16 = v8 + 1;
      if (v12 >= -1)
        v17 = *(_DWORD *)(v5 + 32);
      else
        v17 = 4;
      if (v12 < -1)
        v12 = -2 - v12;
      if (v17 < v12 + v16)
        _CIIndexSetMakeSpace((unsigned int *)v5, v16, 0, 0, 0);
    }
  }
  if (*(int *)(v5 + 16) <= -10)
  {
    v18 = *(_DWORD *)(v5 + 24);
    v19 = v18 - v6;
    v20 = (v18 - v6) >> 5;
    v21 = v18 - v7;
    v22 = (v18 - v7) >> 5;
    if (v20 <= v22 && v20 < *(_DWORD *)(v5 + 32))
    {
      v23 = v19 & 0x1F;
      v24 = v21 & 0x1F;
      if (v20 == (_DWORD)v22)
      {
        v25 = v24 + 1;
        v26 = masks[v23];
        if (v23 != v25)
          v26 = masks[v25] & ~v26;
        LODWORD(v22) = v20;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v20) |= ~masks[v23];
        v32 = v20 + 1;
        if (v32 < v22)
        {
          do
            *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v32++) = -1;
          while (v22 != v32);
        }
        v26 = masks[v24 + 1];
      }
      *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * v22) |= v26;
      return _CIIndexSetConvertIfInvertedArrayIsMoreEfficient((_DWORD *)v5, 0, v11);
    }
LABEL_101:
    v71 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v71, v72, v73, v74, v75, v76, v77, v78, (char)"CIIndexSet.c");
    free(v71);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  cf = (unsigned int *)CFGetTypeID((CFTypeRef)v5);
  if (cf == (unsigned int *)__kCIIndexSetInvertedTypeID)
    return (unsigned int *)CIIndexSetClearRange_Array(v5, v7, v6);
  v27 = *(int *)(v5 + 16);
  if ((v27 & 0x80000000) != 0)
  {
    v33 = -2;
    v34 = -2 - v27;
    v79 = *(_OWORD *)(v5 + 32);
    *(_DWORD *)(v5 + 16) = -2;
    if (v27 > 0xFFFFFFFD)
    {
      v36 = 0;
      LODWORD(v35) = 0;
    }
    else
    {
      v35 = 0;
      v36 = 0;
      v37 = v5 + 32;
      do
      {
        v38 = *((_DWORD *)&v79 + v36);
        if (v38 <= v6)
        {
          *(_DWORD *)(v37 + 4 * v35) = v6;
          v33 = *(_DWORD *)(v5 + 16) - 1;
          *(_DWORD *)(v5 + 16) = v33;
          if (v38 == v6)
            ++v36;
          --v6;
        }
        else
        {
          ++v36;
          *(_DWORD *)(v37 + 4 * v35) = v38;
          v33 = *(_DWORD *)(v5 + 16) - 1;
          *(_DWORD *)(v5 + 16) = v33;
        }
        ++v35;
      }
      while (v36 < v34 && v6 >= v7);
    }
    if (v36 >= v34)
    {
LABEL_86:
      if (v6 < v7)
        return cf;
      v35 = v35;
      LODWORD(v58) = v6 - v7;
      if (v6 - 1 >= v7 - 1)
        v58 = v58;
      else
        v58 = 0;
      if (v58 >= 7)
      {
        v59 = v58 + 1;
        v60 = (v58 + 1) & 0x1FFFFFFF8;
        v61 = (int32x4_t)v33;
        v62 = 0uLL;
        v63 = vaddq_s32(vdupq_n_s32(v6), (int32x4_t)xmmword_1B8631D20);
        v64 = (int32x4_t *)(v5 + 4 * v35 + 48);
        v65.i64[0] = 0x300000003;
        v65.i64[1] = 0x300000003;
        v66.i64[0] = -1;
        v66.i64[1] = -1;
        v67.i64[0] = 0x700000007;
        v67.i64[1] = 0x700000007;
        v68 = v60;
        do
        {
          v64[-1] = v63;
          *v64 = vaddq_s32(v63, v65);
          v61 = vaddq_s32(v61, v66);
          v62 = vaddq_s32(v62, v66);
          v63 = vaddq_s32(v63, v67);
          v64 += 2;
          v68 -= 8;
        }
        while (v68);
        v33 = vaddvq_s32(vaddq_s32(v62, v61));
        if (v59 == v60)
          goto LABEL_97;
        v35 = v60 + v35;
        v6 -= v60;
      }
      v69 = (unsigned int *)(v5 + 4 * v35 + 32);
      do
      {
        *v69++ = v6;
        --v33;
        --v6;
      }
      while (v6 >= v7);
LABEL_97:
      *(_DWORD *)(v5 + 16) = v33;
      return cf;
    }
    v48 = v35;
    v49 = v36;
    v50 = v36 + v27;
    cf = (unsigned int *)memcpy((void *)(v5 + 4 * v35 + 32), (char *)&v79 + 4 * v36, 4 * (-3 - (v36 + v27)) + 4);
    v51 = v50 + v33;
    v52 = -2 - v27 - v49;
    if (v52 >= 4)
    {
      v53 = v52 & 0xFFFFFFFFFFFFFFFCLL;
      v54 = 0uLL;
      v55 = (int64x2_t)v48;
      v56 = vdupq_n_s64(1uLL);
      v57 = v52 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v55 = vaddq_s64(v55, v56);
        v54 = vaddq_s64(v54, v56);
        v57 -= 4;
      }
      while (v57);
      LODWORD(v48) = vaddvq_s64(vaddq_s64(v54, v55));
      if (v52 == v53)
        goto LABEL_85;
      LODWORD(v49) = v53 + v49;
    }
    LODWORD(v48) = v48 - v49 - v27 - 2;
LABEL_85:
    v33 = v51 + 2;
    *(_DWORD *)(v5 + 16) = v51 + 2;
    LODWORD(v35) = v48;
    goto LABEL_86;
  }
  if (v7)
    v28 = v7 - 1;
  else
    v28 = 0;
  cf = (unsigned int *)searchMapWithHint(v5, v28, a4, 1);
  v29 = (int)cf;
  v30 = *(_DWORD *)(v5 + 16);
  v31 = *(_DWORD *)(v5 + 32);
  if (v31 != v30)
  {
    v39 = *(int *)(v5 + 36);
    if ((_DWORD)v39 == (_DWORD)cf)
      goto LABEL_56;
    v70 = *(_QWORD *)(v5 + 40);
    if ((int)v39 >= (int)cf)
    {
      cf = (unsigned int *)memmove((void *)(v70 + 4 * (v31 - v30 + (_DWORD)cf)), (const void *)(v70 + 4 * (int)cf), 4 * ((int)v39 - (int)cf));
    }
    else
    {
      cf = (unsigned int *)memmove((void *)(v70 + 4 * v39), (const void *)(v70 + 4 * (v39 + v31 - v30)), 4 * ((_DWORD)cf - (v39 + v31 - v30)));
      v29 = v29 - *(_DWORD *)(v5 + 32) + *(_DWORD *)(v5 + 16);
    }
  }
  *(_DWORD *)(v5 + 36) = v29;
LABEL_56:
  v40 = *(_QWORD *)(v5 + 40);
  v41 = v29 - 1;
  if (v29 >= 33)
  {
    LODWORD(v42) = 0;
    while (1)
    {
      v43 = v41 - v42;
      if (v41 < (int)v42)
        ++v43;
      v44 = v42 + (v43 >> 1);
      v45 = *(_DWORD *)(v40 + 4 * v44);
      if (v45 == v6)
        break;
      if (v45 <= v6)
        v41 = v44 - 1;
      else
        LODWORD(v42) = v44 + 1;
      if ((int)v42 > v41 - 32)
      {
        v42 = (int)v42;
        goto LABEL_67;
      }
    }
  }
  else
  {
    v42 = 0;
LABEL_67:
    if (v41 + 1 > v42)
      v44 = v41 + 1;
    else
      v44 = v42;
    while (v42 <= v41)
    {
      v46 = *(_DWORD *)(v40 + 4 * v42++);
      if (v46 <= v6)
      {
        v44 = v42 - 1;
        break;
      }
    }
  }
  if (v8 + 1 > v29 - v44)
  {
    *(_DWORD *)(v5 + 16) -= v29 - v44;
    *(_DWORD *)(v5 + 36) = v44;
    v47 = 4 * v44;
    do
    {
      *(_DWORD *)(*(_QWORD *)(v5 + 40) + v47) = v6;
      ++*(_DWORD *)(v5 + 16);
      v29 = *(_DWORD *)(v5 + 36) + 1;
      *(_DWORD *)(v5 + 36) = v29;
      --v6;
      v47 += 4;
    }
    while (v6 >= v7);
  }
  *a4 = v29;
  return cf;
}

void parallel_qsort_offset_t(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a2 > 2047)
  {
    v4 = OSAtomicDequeue(&qsort_cached_allocations, 0);
    if (!v4)
      v4 = malloc_type_malloc(0x40uLL, 0x10300409C00947AuLL);
    v5 = dispatch_group_create();
    v4[3] = v5;
    v4[4] = 0;
    v4[1] = 0;
    v4[2] = a2 - 1;
    *v4 = a1;
    v6 = thread_count;
    if (!thread_count)
    {
      *(_QWORD *)v9 = 0x1900000006;
      v8 = 4;
      sysctl(v9, 2u, &thread_count, &v8, 0, 0);
      v6 = thread_count;
    }
    *((_DWORD *)v4 + 14) = v6;
    v4[5] = (uint64_t)sqrt((double)a2) / 2;
    if (!v6)
    {
      *(_QWORD *)v9 = 0x1900000006;
      v8 = 4;
      sysctl(v9, 2u, &thread_count, &v8, 0, 0);
      v6 = thread_count;
    }
    v7 = a2 / (2 * v6);
    if (v7 <= 0x8000)
    {
      v7 = 0x8000;
    }
    else if (!v6)
    {
      *(_QWORD *)v9 = 0x1900000006;
      v8 = 4;
      sysctl(v9, 2u, &thread_count, &v8, 0, 0);
      v7 = a2 / (2 * thread_count);
    }
    v4[6] = v7;
    if ((uint64_t)v4[5] <= 2047)
      v4[5] = 2048;
    _qsort_big_offset_t(v4);
    dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
    dispatch_release(v5);
  }
  else
  {
    _qsort_offset_t(a1, 0, a2 - 1);
  }
}

uint64_t CIIndexSetAddRangeFromBitVector_Bitmap(uint64_t result, int a2, unsigned int a3, unsigned int *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  _QWORD *v15;
  char v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  int v27;
  int v28;

  v4 = *(_DWORD *)(result + 24);
  v5 = v4 - (a2 + a3) + 1;
  v6 = v5 >> 5;
  v7 = v5 & 0x1F;
  v8 = v4 - a2;
  v9 = v8 >> 5;
  v10 = v8 & 0x1F;
  v11 = *a4;
  if ((_DWORD)v6 == v8 >> 5)
  {
    v12 = v10 + 1;
    v13 = masks[v7];
    if (v7 != v12)
      v13 = masks[v12] & ~v13;
    v14 = v13 & (v11 << v7);
    v15 = (_QWORD *)(result + 40);
    goto LABEL_34;
  }
  v16 = 32 - v7;
  v15 = (_QWORD *)(result + 40);
  *(_DWORD *)(*(_QWORD *)(result + 40) + 4 * v6) |= (v11 << v7) & ~masks[v7];
  if (a3 >= 0x21)
  {
    if (v7)
    {
      if ((v6 + 1) < *(_DWORD *)(result + 32))
        *(_DWORD *)(*v15 + 4 * (v6 + 1)) |= v11 >> v16;
      if (a3 + 31 > 0x5F)
      {
        v17 = (a3 + 31) >> 5;
        if (v17 <= 3)
          v17 = 3;
        v18 = v17 - 1;
        v19 = 4 * v6;
        v20 = a4 + 1;
        v21 = v18 - 1;
        do
        {
          v22 = *v20++;
          *(_DWORD *)(*v15 + v19 + 4) |= v22 << v7;
          *(_DWORD *)(*v15 + v19 + 8) |= v22 >> v16;
          v19 += 4;
          --v21;
        }
        while (v21);
        goto LABEL_24;
      }
    }
    else if (a3 + 31 > 0x5F)
    {
      v23 = (a3 + 31) >> 5;
      if (v23 <= 3)
        v23 = 3;
      v18 = v23 - 1;
      v24 = v18 - 1;
      v25 = 4 * v6 + 4;
      v26 = (int *)(a4 + 1);
      do
      {
        v27 = *v26++;
        *(_DWORD *)(*v15 + v25) |= v27;
        v25 += 4;
        --v24;
      }
      while (v24);
LABEL_24:
      v11 = a4[v18];
      v28 = v11 << v7;
      if ((int)v18 + (int)v6 >= v9 || (v18 + v6 + 1) >= *(_DWORD *)(result + 32))
        v28 &= masks[v10 + 1];
      *(_DWORD *)(*v15 + 4 * (v18 + v6)) |= v28;
      if (!v7)
        return result;
      goto LABEL_28;
    }
    LODWORD(v18) = 1;
    goto LABEL_24;
  }
  LODWORD(v18) = 0;
  if (!v7)
    return result;
LABEL_28:
  LODWORD(v6) = v6 + v18 + 1;
  if (v6 <= v9 && v6 < *(_DWORD *)(result + 32))
  {
    v14 = masks[v10 + 1] & (v11 >> v16);
LABEL_34:
    *(_DWORD *)(*v15 + 4 * v6) |= v14;
  }
  return result;
}

_QWORD *slab_new(_QWORD **a1, unint64_t a2, int a3)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  char *v7;
  _QWORD *result;
  _QWORD *v10;
  char *v11;
  char *v12;
  const char *v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v4 = *a1;
  v18 = *a1;
  if (a2 >= 0xFFFE9)
  {
    v17 = 0;
    v5 = a2 + 24;
    if (!slab_vm_allocate(&v17, a2 + 24, a3))
    {
      v6 = v17;
      v7 = (char *)v17 + v5;
      v17[1] = (char *)v17 + v5;
      v6[2] = v7;
      *v6 = *v4;
      *v4 = v6;
      return v6 + 3;
    }
    v11 = __si_assert_copy_extra_268();
    v12 = v11;
    v13 = "";
    if (v11)
      v13 = v11;
    __message_assert(v11, "slab_allocator.c", 438, "kr == 0", v13);
LABEL_13:
    free(v12);
    if (__valid_fs(-1))
      v16 = 2989;
    else
      v16 = 3072;
    *(_DWORD *)v16 = -559038737;
    abort();
  }
  if (slab_vm_allocate(&v18, 0x100000uLL, a3))
  {
    v14 = __si_assert_copy_extra_268();
    v12 = v14;
    v15 = "";
    if (v14)
      v15 = v14;
    __message_assert(v14, "slab_allocator.c", 453, "kr==0", v15);
    goto LABEL_13;
  }
  v10 = v18;
  *v18 = *a1;
  *a1 = v10;
  result = v10 + 3;
  v10[1] = (char *)v10 + a2 + 24;
  v10[2] = v10 + 0x20000;
  return result;
}

BOOL _bt_findBulk(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  pthread_key_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  __int128 v32;
  double Current;
  int *v34;
  size_t v35;
  double v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  unint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  unsigned __int8 **v48;
  char **v49;
  _BYTE *v50;
  __int16 v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  pthread_key_t v58;
  unint64_t v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  pthread_rwlock_t *v69;
  _QWORD *v70;
  int v71;
  unint64_t *v72;
  int v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned __int8 **v88;
  unsigned __int8 *v89;
  uint64_t v90;
  int v91;
  BOOL v92;
  unsigned int v93;
  int v94;
  float v95;
  NSObject *v96;
  os_signpost_id_t v97;
  NSObject *v98;
  NSObject *v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  _QWORD *v104;
  _BYTE *v105;
  unsigned int v106;
  char *v107;
  char *v108;
  int is_fuzzy;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  signed int v113;
  void *v114;
  void *v115;
  pthread_key_t v116;
  unint64_t v117;
  uint64_t v118;
  _OWORD *v119;
  int v120;
  unint64_t v121;
  uint64_t BestDirectory;
  uint64_t v123;
  BOOL v124;
  int v125;
  unsigned int *v126;
  uint64_t v127;
  int v128;
  NSObject *v129;
  char *v130;
  NSObject *v131;
  _QWORD *v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  unint64_t v140;
  unsigned int v141;
  char *v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  int v150;
  NSObject *v151;
  os_log_type_t v152;
  _QWORD *v153;
  int v154;
  const std::string::value_type *v155;
  std::string::size_type v156;
  std::string *v157;
  std::string::size_type v158;
  _OWORD *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  NSObject *v166;
  NSObject *v167;
  uint64_t v168;
  int v169;
  NSObject *v170;
  os_log_type_t v171;
  uint64_t v172;
  size_t v173;
  char *v174;
  int v175;
  size_t v176;
  unsigned int v177;
  unsigned int v178;
  char *v179;
  uint64_t v180;
  uint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t Child;
  unint64_t v186;
  int *v187;
  unsigned __int8 *v188;
  int v189;
  uint64_t v190;
  int item_count;
  int v192;
  int info;
  int v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  size_t v203;
  uint64_t v204;
  uint64_t j;
  unsigned __int8 *v206;
  uint64_t v207;
  unsigned int v208;
  uint64_t i;
  unsigned __int8 *v210;
  uint64_t v211;
  unsigned __int8 *v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  size_t v216;
  uint64_t v217;
  uint64_t k;
  unsigned __int8 *v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  size_t v223;
  uint64_t v224;
  __CFSet *v225;
  __int128 v226;
  __CFSet *v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  unsigned int v231;
  uint64_t v232;
  uint64_t v233;
  char **v234;
  uint64_t v235;
  unint64_t v236;
  __int128 v237;
  unint64_t v238;
  uint64_t v239;
  __int128 v240;
  uint64_t v241;
  unsigned int v242;
  BOOL v243;
  unsigned int v244;
  char v245;
  BOOL v246;
  char v247;
  unint64_t *v248;
  _BYTE *v249;
  __int128 v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  int v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  int v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  int v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  __CFSet *v280;
  __int128 v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  int v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  BOOL v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  int v295;
  uint64_t v296;
  int v297;
  _OWORD *v298;
  signed __int8 v299;
  char v300;
  char v301;
  char v302;
  int v303;
  int v304;
  int v305;
  int v306;
  int v307;
  unint64_t v308;
  char v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  char v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  char *v319;
  char v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  char v325;
  unint64_t v326;
  uint64_t v327;
  uint64_t v328;
  char *v329;
  char v330;
  unint64_t v331;
  uint64_t v332;
  uint64_t v333;
  int v334;
  int v335;
  int v336;
  int v337;
  NSObject *v338;
  int v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  int v343;
  unint64_t v344;
  unint64_t v345;
  signed int v346;
  signed int v347;
  void *v348;
  int v349;
  NSObject *v350;
  int v351;
  NSObject *v352;
  int v354;
  NSObject *v355;
  int v357;
  NSObject *v358;
  os_log_type_t v359;
  char *v360;
  char v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  float *v366;
  uint64_t v367;
  float v368;
  unint64_t v369;
  float v370;
  int v371;
  int v372;
  int v373;
  float v374;
  float **v375;
  uint64_t v376;
  double v377;
  int v378;
  NSObject *v379;
  os_log_type_t v380;
  float v381;
  size_t v382;
  uint64_t v383;
  double v384;
  size_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  char *v389;
  uint64_t v390;
  int *v391;
  __int128 v392;
  int *v393;
  uint64_t v394;
  unint64_t v395;
  unint64_t v396;
  unint64_t v397;
  unint64_t v398;
  unsigned int v399;
  uint64_t v400;
  unsigned int v401;
  char *v402;
  size_t v403;
  unsigned int v404;
  _DWORD *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  _QWORD *v411;
  _QWORD *v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  const void *v416;
  size_t v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  char *v426;
  const void *v427;
  size_t v428;
  char *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  char *v435;
  uint64_t v436;
  float *v437;
  float v438;
  int v439;
  _DWORD *v440;
  BOOL v441;
  _BOOL8 v442;
  double v444;
  int v445;
  NSObject *v446;
  float v447;
  int v448;
  int v449;
  int v450;
  uint64_t v451;
  char *v452;
  int v453;
  NSObject *v454;
  int v455;
  float v456;
  int v457;
  NSObject *v458;
  int v460;
  int v461;
  NSObject *v462;
  float v463;
  char *v464;
  char *v465;
  const char *v466;
  uint64_t v467;
  int v468;
  NSObject *v469;
  CFAbsoluteTime v470;
  char *v471;
  char *v472;
  const char *v473;
  _DWORD *v474;
  char *v475;
  char *v476;
  const char *v477;
  int v478;
  NSObject *v479;
  int v480;
  char *v481;
  char *v482;
  const char *v483;
  __int128 v484;
  _BYTE *v485;
  __int128 v486;
  int v487;
  CFAllocatorRef v488;
  uint64_t v489;
  __int128 v490;
  int v491;
  os_signpost_id_t v492;
  unsigned __int16 *v493;
  uint64_t v494;
  uint64_t *v495;
  char *v496;
  os_signpost_id_t v497;
  unint64_t v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  int v502;
  uint64_t v503;
  uint64_t v504;
  _BYTE *v505;
  _QWORD *v506;
  unint64_t v507;
  int v508;
  __int128 *v509;
  _BYTE *v510;
  uint64_t v511;
  unsigned int v512;
  uint64_t v513;
  __int128 v514;
  _QWORD v515[7];
  char *v516;
  char *v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  uint64_t v521;
  _BYTE *v522;
  int v523;
  unsigned int v524;
  int v525;
  _QWORD v526[5];
  int v527;
  _BYTE v528[97];
  __int128 v529;
  char *v530;
  int v531;
  uint64_t v532;
  __int128 v533;
  CFMutableSetRef v534;
  __int128 v535;
  CFMutableSetRef Mutable;
  uint64_t v537;
  int v538;
  __int16 v539;
  _OWORD v540[2];
  __int128 v541[2];
  _BYTE v542[20];
  __int16 v543;
  CFAbsoluteTime v544;
  _BYTE v545[32];
  __int128 v546;
  __int128 v547;
  __int128 v548;
  __int128 v549;
  __int128 v550;
  __int128 v551;
  __int128 v552;
  __int128 v553;
  __int128 v554;
  __int128 v555;
  __int128 v556;
  __int128 v557;
  __int128 v558;
  __int128 v559;
  uint64_t v560;

  *(_QWORD *)&v514 = a8;
  v512 = a6;
  v501 = a1;
  v560 = *MEMORY[0x1E0C80C00];
  v502 = *(_DWORD *)(a2 + 160);
  v508 = *(unsigned __int8 *)(a2 + 4581);
  v18 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v18 = __THREAD_SLOT_KEY;
  }
  v499 = a13;
  v19 = (unint64_t)pthread_getspecific(v18);
  if (!v19 || v19 >= 0x801)
  {
    makeThreadId();
    v19 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
  }
  v500 = a12;
  v513 = v19 - 1;
  v507 = threadData[18 * v19 - 10];
  v20 = (unsigned int *)(a2 + 4584);
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  v511 = a2;
  v22 = a2 + 4592;
  db_read_lock(v22);
  do
    v23 = __ldxr(v20);
  while (__stxr(v23 - 1, v20));
  CIOnThreadCleanUpPush(v513, (uint64_t)si_dglock_rdunlock, v22);
  v24 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x510uLL, 0x6085D6BuLL);
  v25 = (uint64_t)v24;
  if (v24)
  {
    v528[0] = 0;
    if (a10)
      v26 = a10;
    else
      v26 = v528;
    v27 = a5;
    v510 = v26;
    v28 = v512;
    findTermIDsInit(v511, a3, a4, v27, (uint64_t)v26, v512, a7, v514, a9, (uint64_t)v24);
    CICleanUpPush(v513, (uint64_t)findTermIDsFree, v25);
    v29 = v513;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v545 = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v545, 2u);
    }
    v528[0] = 0;
    if (a10)
      v30 = a10;
    else
      v30 = v528;
    v31 = a5;
    v510 = v30;
    v28 = v512;
    findTermIDsInit(v511, a3, a4, v31, (uint64_t)v30, v512, a7, v514, a9, 0);
    v29 = v513;
    CICleanUpPush(v513, (uint64_t)findTermIDsFree, 0);
  }
  Current = CFAbsoluteTimeGetCurrent();
  v34 = (_DWORD *)&unk_1EF19F000;
  if (!v28)
    goto LABEL_23;
  if (!a11)
  {
    if (!*(_DWORD *)(v25 + 1152))
      goto LABEL_23;
    v45 = 0;
    v491 = 0;
    v488 = (CFAllocatorRef)*MEMORY[0x1E0C9AE00];
    v485 = &v542[16];
    v46 = (__int128 *)((char *)&v546 + 8);
    *(_QWORD *)&v32 = 134217984;
    v484 = v32;
    *(_QWORD *)&v32 = 136315394;
    v490 = v32;
    *(_QWORD *)&v32 = 134218240;
    v486 = v32;
    *(_QWORD *)&v514 = (char *)&v546 + 8;
    v494 = v25 + 88;
    v505 = &v545[24];
    v489 = v25;
    while (1)
    {
      if (**(_BYTE **)v25)
        goto LABEL_23;
      v47 = *(_QWORD *)(v25 + 1144);
      v48 = (unsigned __int8 **)(v47 + (v45 << 6));
      v49 = (char **)v48;
      *(_QWORD *)(v25 + 1240) = v48;
      if (v34[804] >= 5)
      {
        v337 = *__error();
        v338 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v338, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v545 = v484;
          *(_QWORD *)&v545[4] = v47 + (v45 << 6);
          _os_log_impl(&dword_1B8270000, v338, OS_LOG_TYPE_DEFAULT, "Comparing query %p", v545, 0xCu);
        }
        *__error() = v337;
        v34 = (_DWORD *)&unk_1EF19F000;
      }
      v51 = *((_WORD *)v48 + 8);
      v50 = v48 + 2;
      if ((v51 & 0x610) == 0)
        break;
      v52 = *(_QWORD *)(v25 + 1240);
      v53 = *(_DWORD *)(v52 + 16);
      v54 = v34[804];
      if ((v53 & 0x10) != 0)
      {
        if (v54 < 5)
        {
          if (!*(_QWORD *)(v25 + 16))
            goto LABEL_484;
        }
        else
        {
          v354 = *__error();
          v355 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v355, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v545 = v484;
            *(_QWORD *)&v545[4] = v49;
            _os_log_impl(&dword_1B8270000, v355, OS_LOG_TYPE_DEFAULT, "Vector node %p", v545, 0xCu);
          }
          *__error() = v354;
          if (!*(_QWORD *)(v25 + 16))
          {
LABEL_484:
            v357 = *__error();
            v358 = _SILogForLogForCategory(1);
            v359 = 2 * (dword_1EF19FC90 < 4);
            if (os_log_type_enabled(v358, v359))
            {
              *(_WORD *)v545 = 0;
              _os_log_impl(&dword_1B8270000, v358, v359, "Skip ANN; no vector index", v545, 2u);
            }
            *__error() = v357;
            goto LABEL_487;
          }
        }
        v83 = *(_QWORD *)(v25 + 1160);
        *(_QWORD *)(v25 + 1248) = *(_QWORD *)(v83 + 8 * v45);
        oq_force_meta(*(_QWORD *)(v83 + 8 * v45));
        v84 = *(_QWORD *)(v25 + 1248);
        v493 = *(unsigned __int16 **)(v84 + 32);
        v85 = *(_QWORD *)(v25 + 16);
        v86 = *(_QWORD *)(v25 + 1240);
        LODWORD(v504) = *(_DWORD *)(v86 + 20);
        v87 = *(_DWORD *)(v86 + 60);
        if (v87 >> 25)
        {
          LODWORD(v506) = v87 >> 25;
        }
        else
        {
          if (current_vector_version::onceToken != -1)
            dispatch_once(&current_vector_version::onceToken, &__block_literal_global_5670);
          LODWORD(v506) = (unsigned __int16)current_vector_version::vecVersion;
          v86 = *(_QWORD *)(v25 + 1240);
          v87 = *(_DWORD *)(v86 + 60);
          v84 = *(_QWORD *)(v25 + 1248);
        }
        v509 = (__int128 *)v45;
        v495 = *(uint64_t **)v86;
        v95 = *(float *)(v86 + 56);
        v96 = _SILogForLogForCategory(0);
        v97 = os_signpost_id_make_with_pointer(v96, 0);
        v98 = _SILogForLogForCategory(0);
        v497 = v97 - 1;
        if (v97 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v99 = v98;
          if (os_signpost_enabled(v98))
          {
            *(_WORD *)v545 = 0;
            _os_signpost_emit_with_name_impl(&dword_1B8270000, v99, OS_SIGNPOST_INTERVAL_BEGIN, v97, "VectorIndexANN", "Start", v545, 2u);
          }
        }
        v492 = v97;
        *(_QWORD *)&v541[0] = MEMORY[0x1E0C809B0];
        *((_QWORD *)&v541[0] + 1) = 0x40000000;
        *(_QWORD *)&v541[1] = __vectorIndexANN_block_invoke;
        *((_QWORD *)&v541[1] + 1) = &__block_descriptor_tmp_8_6055;
        *(_QWORD *)v542 = v84;
        v535 = 0uLL;
        v100 = v504;
        LODWORD(v503) = v87 & 3;
        v101 = (v87 >> 2) & 3;
        IVFVectorIndex_s::getVectorIndex(&v535, v85 + 8, v504, v506, v503, (v87 >> 2) & 3, 0);
        v102 = v535;
        v498 = v85;
        if ((_QWORD)v535)
        {
          LODWORD(v496) = *__error();
          v103 = _SILogForLogForCategory(16);
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          {
            v104 = (_QWORD *)(v85 + 64);
            if (*(char *)(v85 + 87) < 0)
              v104 = (_QWORD *)*v104;
            (*(void (**)(_BYTE *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v102 + 312))(v545, v102, v85 + 40);
            v105 = v545;
            if (v545[23] < 0)
              v105 = *(_BYTE **)v545;
            LODWORD(v540[0]) = v490;
            *(_QWORD *)((char *)v540 + 4) = v104;
            WORD6(v540[0]) = 2080;
            *(_QWORD *)((char *)v540 + 14) = v105;
            _os_log_impl(&dword_1B8270000, v103, OS_LOG_TYPE_DEFAULT, "[%s] aNN search on %s", (uint8_t *)v540, 0x16u);
            if ((v545[23] & 0x80000000) != 0)
              operator delete(*(void **)v545);
            v100 = v504;
          }
          v106 = v87;
          *__error() = (int)v496;
          v107 = (char *)operator new(8uLL);
          *(_QWORD *)v107 = v102;
          v108 = v107 + 8;
        }
        else
        {
          v106 = v87;
          v108 = 0;
          v107 = 0;
        }
        v533 = 0uLL;
        IVFVectorIndex_s::getVectorIndex(&v533, v85 + 8, v100, v506, v503, v101, 1u);
        v127 = v533;
        if ((_QWORD)v533)
        {
          v128 = *__error();
          v129 = _SILogForLogForCategory(16);
          v130 = v107;
          if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
          {
            v131 = v129;
            v132 = (_QWORD *)(v498 + 64);
            if (*(char *)(v498 + 87) < 0)
              v132 = (_QWORD *)*v132;
            (*(void (**)(_BYTE *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)v127 + 312))(v545, v127, v498 + 40);
            v133 = v545;
            if (v545[23] < 0)
              v133 = *(_BYTE **)v545;
            LODWORD(v540[0]) = v490;
            *(_QWORD *)((char *)v540 + 4) = v132;
            WORD6(v540[0]) = 2080;
            *(_QWORD *)((char *)v540 + 14) = v133;
            _os_log_impl(&dword_1B8270000, v131, OS_LOG_TYPE_DEFAULT, "[%s] aNN search on %s", (uint8_t *)v540, 0x16u);
            if ((v545[23] & 0x80000000) != 0)
              operator delete(*(void **)v545);
          }
          *__error() = v128;
          v134 = v108 - v130;
          v135 = (v108 - v130) >> 3;
          v136 = v135 + 1;
          if ((unint64_t)(v135 + 1) >> 61)
            abort();
          if (v134 >> 2 > v136)
            v136 = v134 >> 2;
          if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF8)
            v136 = 0x1FFFFFFFFFFFFFFFLL;
          if (v136)
          {
            if (v136 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v137 = (char *)operator new(8 * v136);
            v138 = v108;
          }
          else
          {
            v138 = v108;
            v137 = 0;
          }
          v142 = &v137[8 * v135];
          *(_QWORD *)v142 = v127;
          v140 = (unint64_t)(v142 + 8);
          v141 = v106;
          if (v138 == v130)
          {
            v139 = v142;
            if (v138)
LABEL_165:
              operator delete(v138);
          }
          else
          {
            v143 = (v138 - v130 - 8) & 0xFFFFFFFFFFFFFFF8;
            v144 = &v137[v134 - v143 - 8];
            memcpy(v144, &v138[-v143 - 8], v143 + 8);
            v138 = v130;
            v139 = v144;
            if (v138)
              goto LABEL_165;
          }
        }
        else
        {
          v139 = v107;
          v140 = (unint64_t)v108;
          v141 = v106;
        }
        v496 = v139;
        if ((char *)v140 == v139)
        {
          v150 = *__error();
          v151 = _SILogForLogForCategory(16);
          v152 = dword_1EF19FCCC < 3;
          v149 = v497;
          if (os_log_type_enabled(v151, (os_log_type_t)(dword_1EF19FCCC < 3)))
          {
            v153 = (_QWORD *)(v498 + 64);
            if (*(char *)(v498 + 87) < 0)
              v153 = (_QWORD *)*v153;
            IVFIndexName((uint64_t)v545, v504, v506, v503, v101);
            v154 = *(char *)(v498 + 63);
            if (v154 >= 0)
              v155 = (const std::string::value_type *)(v498 + 40);
            else
              v155 = *(const std::string::value_type **)(v498 + 40);
            if (v154 >= 0)
              v156 = *(unsigned __int8 *)(v498 + 63);
            else
              v156 = *(_QWORD *)(v498 + 48);
            v157 = std::string::insert((std::string *)v545, 0, v155, v156);
            v158 = v157->__r_.__value_.__r.__words[2];
            v540[0] = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
            *(_QWORD *)&v540[1] = v158;
            v157->__r_.__value_.__l.__size_ = 0;
            v157->__r_.__value_.__r.__words[2] = 0;
            v157->__r_.__value_.__r.__words[0] = 0;
            if ((v545[23] & 0x80000000) != 0)
              operator delete(*(void **)v545);
            v159 = v540;
            if (SBYTE7(v540[1]) < 0)
              v159 = *(_OWORD **)&v540[0];
            *(_DWORD *)v545 = v490;
            *(_QWORD *)&v545[4] = v153;
            *(_WORD *)&v545[12] = 2080;
            *(_QWORD *)&v545[14] = v159;
            _os_log_impl(&dword_1B8270000, v151, v152, "*warn* [%s] aNN search on %s not found", v545, 0x16u);
            if (SBYTE7(v540[1]) < 0)
              operator delete(*(void **)&v540[0]);
          }
          *__error() = v150;
          v29 = v513;
        }
        else
        {
          v498 = v140;
          v145 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)v139 + 240))(*(_QWORD *)v139, (v141 >> 4) & 0xFFFFF);
          if ((unint64_t)((uint64_t)(v140 - (_QWORD)v139) >> 3) <= 1)
            v146 = 1;
          else
            v146 = (uint64_t)(v140 - (_QWORD)v139) >> 3;
          do
          {
            v147 = *(_QWORD *)v139;
            v139 += 8;
            (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t *, _QWORD, uint64_t, _QWORD, uint64_t, float))(*(_QWORD *)v147 + 248))(v147, v504, v506, v495, v503, v101, HIBYTE(v141) & 1, v145, v95);
            --v146;
          }
          while (v146);
          v148 = *(_QWORD *)(v498 - 8);
          *(_QWORD *)v545 = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v545[8] = 0x40000000;
          *(_QWORD *)&v545[16] = ___ZNK16IVFVectorIndex_s3aNNEjtPKv14vec_dimensions15vec_data_formatfjbP12__CIIndexSetU13block_pointerFvPyfE_block_invoke;
          *(_QWORD *)&v545[24] = &unk_1E6E30A80;
          *(_QWORD *)&v546 = v541;
          (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v148 + 256))(v148, v145, v545);
          v29 = v513;
          v149 = v497;
          v25 = v489;
        }
        v160 = (std::__shared_weak_count *)*((_QWORD *)&v533 + 1);
        v45 = (unint64_t)v509;
        v46 = (_OWORD *)v514;
        if (*((_QWORD *)&v533 + 1))
        {
          v161 = (unint64_t *)(*((_QWORD *)&v533 + 1) + 8);
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 - 1, v161));
          if (!v162)
          {
            ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
            std::__shared_weak_count::__release_weak(v160);
          }
        }
        v163 = (std::__shared_weak_count *)*((_QWORD *)&v535 + 1);
        if (*((_QWORD *)&v535 + 1))
        {
          v164 = (unint64_t *)(*((_QWORD *)&v535 + 1) + 8);
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 - 1, v164));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        if (v496)
          operator delete(v496);
        v166 = _SILogForLogForCategory(0);
        if (v149 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v167 = v166;
          if (os_signpost_enabled(v166))
          {
            *(_WORD *)v545 = 0;
            _os_signpost_emit_with_name_impl(&dword_1B8270000, v167, OS_SIGNPOST_INTERVAL_END, v492, "VectorIndexANN", "End", v545, 2u);
          }
        }
        v168 = *(_QWORD *)(*(_QWORD *)(v25 + 1248) + 32);
        v169 = *__error();
        v170 = _SILogForLogForCategory(1);
        v171 = 2 * (dword_1EF19FC90 < 4);
        if (os_log_type_enabled(v170, v171))
        {
          v172 = *(_QWORD *)(v25 + 16);
          *(_DWORD *)v545 = v486;
          *(_QWORD *)&v545[4] = v172;
          *(_WORD *)&v545[12] = 2048;
          *(_QWORD *)&v545[14] = v168 - (_QWORD)v493;
          _os_log_impl(&dword_1B8270000, v170, v171, "%p Added %ld items from aNN", v545, 0x16u);
        }
        *__error() = v169;
        goto LABEL_206;
      }
      if (v54 >= 5)
      {
        v351 = *__error();
        v352 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v352, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v545 = v484;
          *(_QWORD *)&v545[4] = v49;
          _os_log_impl(&dword_1B8270000, v352, OS_LOG_TYPE_DEFAULT, "Path node %p", v545, 0xCu);
        }
        *__error() = v351;
        v52 = *(_QWORD *)(v25 + 1240);
        v53 = *(_DWORD *)(v52 + 16);
        v34 = (_DWORD *)&unk_1EF19F000;
      }
      v55 = *(_QWORD *)(*(_QWORD *)(v25 + 1160) + 8 * v45);
      *(_QWORD *)(v25 + 1248) = v55;
      v56 = *(_QWORD *)(v25 + 24);
      if (!v56)
        goto LABEL_40;
      v503 = v55;
      LODWORD(v492) = (v53 & 0x400) == 0;
      v506 = *(_QWORD **)(v25 + 32);
      v57 = *(_DWORD *)(v52 + 20);
      v504 = *(_QWORD *)v52;
      v58 = __THREAD_SLOT_KEY;
      if (!__THREAD_SLOT_KEY)
      {
        makeThreadId();
        v58 = __THREAD_SLOT_KEY;
      }
      v509 = (__int128 *)v45;
      v59 = (unint64_t)pthread_getspecific(v58);
      if (!v59 || v59 >= 0x801)
      {
        makeThreadId();
        v59 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
      }
      v60 = (unsigned __int16 *)(v56 + 4416);
      v61 = v59 - 1;
      v498 = threadData[18 * v59 - 10];
      v62 = *(_QWORD *)(v56 + 4432);
      v63 = *(_QWORD *)(v56 + 4440);
      v64 = v63 - v62 < 0x100000001 && v63 > v62;
      v65 = (char *)(v63 & 0xFFFFFFFF00000000);
      if (!v64)
        v65 = 0;
      v496 = v65;
      v497 = v62;
      v66 = (uint64_t *)malloc_type_malloc(0x18uLL, 0x1020040F21E5318uLL);
      storage_reader_init(v56 + 8, (uint64_t)v66);
      CICleanUpPush(v61, (uint64_t)MEMORY[0x1E0C834A8], (uint64_t)v66);
      v495 = v66;
      CICleanUpPush(v61, (uint64_t)storage_reader_destroy, (uint64_t)v66);
      if (v57)
      {
        if (*(_QWORD *)(v504 + 8 * (v57 - 1)) == *(_QWORD *)v60)
          LODWORD(v67) = v57 - 1;
        else
          LODWORD(v67) = v57;
        v68 = (uint64_t)v506;
        if (v506)
        {
          v493 = (unsigned __int16 *)(v56 + 4416);
          v69 = (pthread_rwlock_t *)(v506 + 1);
          pthread_rwlock_rdlock((pthread_rwlock_t *)(v506 + 1));
          v70 = v506 + 26;
          if ((_DWORD)v67)
          {
            v71 = v67 - 1;
            v72 = (unint64_t *)v504;
            if (*(_QWORD *)(v504 + 8 * ((int)v67 - 1)) != *v70)
              v71 = v67;
            v73 = v71 - 1;
LABEL_136:
            LODWORD(v541[0]) = -1;
            *(_QWORD *)v545 = 0;
            BestDirectory = getBestDirectory((uint64_t)v70, v73, (uint64_t)v72, v541, v545);
            v123 = BestDirectory;
            v124 = 0;
            if ((v541[0] & 0x80000000) == 0 && *(_QWORD *)v545)
              v124 = *(_DWORD *)(*(_QWORD *)v545 + 16) != 0;
            if (BestDirectory)
            {
              v125 = *(_DWORD *)(BestDirectory + 16);
              v124 = v125 != 0;
              if ((v53 & 0x400) == 0)
              {
                v126 = (unsigned int *)malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
                v126[1] = 1024;
                *((_QWORD *)v126 + 1) = malloc_type_malloc(0x400uLL, 0x47F173ADuLL);
                directoryDumpDirectoryPaths((_QWORD *)v123, (int *)v126);
LABEL_215:
                pthread_rwlock_unlock(v69);
                pthread_rwlock_rdlock((pthread_rwlock_t *)(v506 + 30));
                CIOnThreadCleanUpPush(v61, (uint64_t)directoryOverlay_unlock, (uint64_t)v506);
                v487 = v67;
                if ((int)v67 >= 1)
                {
                  v67 = v67;
                  v182 = *v72;
                  v181 = (uint64_t *)(v72 + 1);
                  v180 = v182;
                  do
                  {
                    v184 = *v181++;
                    v183 = v184;
                    *(_DWORD *)v545 = 0;
                    Child = negativeFindChild((uint64_t)(v506 + 55), v180, v545);
                    if (Child && *(_QWORD *)(Child + 8) == v183)
                      v124 = 1;
                    v180 = v183;
                    --v67;
                  }
                  while (v67);
                }
                v29 = v513;
                if (v126)
                {
                  *(_QWORD *)v545 = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&v545[8] = 0x40000000;
                  *(_QWORD *)&v545[16] = __directoryStoreGetFileListOffsets_block_invoke;
                  *(_QWORD *)&v545[24] = &__block_descriptor_tmp_3164;
                  *(_QWORD *)&v546 = v495;
                  *((_QWORD *)&v546 + 1) = v493;
                  *(_QWORD *)&v547 = v506;
                  *((_QWORD *)&v547 + 1) = v503;
                  LOBYTE(v549) = v492;
                  *(_QWORD *)&v548 = v497;
                  *((_QWORD *)&v548 + 1) = v496;
                  if (*v126)
                  {
                    v186 = 0;
                    do
                    {
                      v187 = (int *)(*((_QWORD *)v126 + 1) + v186);
                      (*(void (**)(_BYTE *, _QWORD, unsigned int *))&v545[16])(v545, *v187, (unsigned int *)v187 + 2);
                      v186 += 8 * *v187 + 8;
                    }
                    while (v186 < *v126);
                  }
                  free(*((void **)v126 + 1));
                  free(v126);
                }
                if (!v124)
                  _directoryStoreGetFileListOffsets(v495, v493, (uint64_t)v506, v487, (unint64_t *)v504, v503, (v53 & 0x400) == 0, v497, (uint64_t)v496);
                CIOnThreadCleanUpPop(v61);
                v46 = (_OWORD *)v514;
                goto LABEL_38;
              }
              if (v125)
              {
                v126 = (unsigned int *)malloc_type_calloc(1uLL, 0x10uLL, 0x108004057E67DB5uLL);
                v173 = (8 * *(_DWORD *)(v123 + 16) + 16);
                v126[1] = v173;
                v174 = (char *)malloc_type_malloc(v173, 0x8B30D18BuLL);
                *((_QWORD *)v126 + 1) = v174;
                v175 = *(_DWORD *)(v123 + 16);
                v177 = *v126;
                LODWORD(v176) = v126[1];
                v178 = *v126 + 8 * v175 + 16;
                if (v178 > v176)
                {
                  do
                    v176 = (2 * v176);
                  while (v178 > v176);
                  v126[1] = v176;
                  v174 = (char *)reallocf(v174, v176);
                  *((_QWORD *)v126 + 1) = v174;
                  v177 = *v126;
                  v175 = *(_DWORD *)(v123 + 16);
                }
                v179 = &v174[v177];
                *(_DWORD *)v179 = v175 + 1;
                *((_QWORD *)v179 + 1) = *(_QWORD *)v123;
                memcpy(v179 + 16, *(const void **)(v123 + 24), 8 * *(int *)(v123 + 16));
                *v126 += 8 * *(_DWORD *)(v123 + 16) + 16;
                goto LABEL_215;
              }
            }
            v126 = 0;
            goto LABEL_215;
          }
LABEL_135:
          v73 = -1;
          v72 = (unint64_t *)v504;
          goto LABEL_136;
        }
      }
      else
      {
        v493 = (unsigned __int16 *)(v56 + 4416);
        v68 = (uint64_t)v506;
        if (v506)
        {
          v69 = (pthread_rwlock_t *)(v506 + 1);
          pthread_rwlock_rdlock((pthread_rwlock_t *)(v506 + 1));
          LODWORD(v67) = 0;
          v70 = v506 + 26;
          goto LABEL_135;
        }
        LODWORD(v67) = 0;
        v60 = v493;
      }
      _directoryStoreGetFileListOffsets(v495, v60, v68, v67, (unint64_t *)v504, v503, (v53 & 0x400) == 0, v497, (uint64_t)v496);
      v29 = v513;
LABEL_38:
      CICleanUpReset(v61, v498);
LABEL_39:
      v34 = (int *)&unk_1EF19F000;
      v45 = (unint64_t)v509;
LABEL_40:
      if (++v45 >= *(unsigned int *)(v25 + 1152))
        goto LABEL_23;
    }
    if (v34[804] >= 5)
    {
      v349 = *__error();
      v350 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v350, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v545 = v484;
        *(_QWORD *)&v545[4] = v49;
        _os_log_impl(&dword_1B8270000, v350, OS_LOG_TYPE_DEFAULT, "BT node %p", v545, 0xCu);
      }
      *__error() = v349;
      v34 = (_DWORD *)&unk_1EF19F000;
    }
    v74 = *v49;
    *(_QWORD *)(v25 + 1224) = *v49;
    *(_QWORD *)(v25 + 1232) = v74;
    v75 = *(_QWORD *)(v25 + 1160);
    if (v75)
      v75 = *(_QWORD *)(v75 + 8 * v45);
    *(_QWORD *)(v25 + 1248) = v75;
    v76 = *(_QWORD *)(v25 + 1168);
    if (v76)
      v76 = *(_QWORD *)(v76 + 8 * v45);
    *(_QWORD *)(v25 + 1256) = v76;
    *(_DWORD *)(v25 + 1140) = 0;
    *(_BYTE *)(v25 + 88) = 0;
    v77 = *(_QWORD *)(v25 + 8);
    v78 = *(_DWORD *)v77 >> 3;
    v79 = (*(_DWORD *)v77 & 7) << 32;
    if ((*(_DWORD *)v77 & 3) == 1)
    {
      v79 = 0x100000000;
      v78 = *(_DWORD *)v77 >> 2;
    }
    if ((*(_DWORD *)v77 & 1) != 0)
      v80 = v79;
    else
      v80 = 0;
    if ((*(_DWORD *)v77 & 1) != 0)
      v81 = v78;
    else
      v81 = *(_DWORD *)v77 >> 1;
    v82 = v80 | v81;
    *(_QWORD *)(v25 + 52) = v80 | v81;
    if ((*v50 & 4) != 0)
    {
      v88 = *(unsigned __int8 ***)(v25 + 1240);
      v90 = (uint64_t)*v88;
      v89 = v88[1];
      v91 = **v88;
      v92 = (v91 - 2) <= 2 && v91 == *v89;
      if (!v92)
        goto LABEL_40;
      v93 = *(unsigned __int8 *)(v90 + 1);
      if (*(char *)(v90 + 1) < 0)
      {
        v94 = *(unsigned __int8 *)(v90 + 2);
        if (*(char *)(v90 + 2) < 0)
        {
          v261 = *(unsigned __int8 *)(v90 + 3);
          if (*(char *)(v90 + 3) < 0)
          {
            v267 = *(unsigned __int8 *)(v90 + 4);
            if (*(char *)(v90 + 4) < 0)
            {
              v297 = *(char *)(v90 + 5);
              if (v297 < 0)
                goto LABEL_657;
              v268 = ((v267 & 0x7F) << 21) | (v297 << 28) | ((v261 & 0x7F) << 14);
            }
            else
            {
              v268 = ((v261 & 0x7F) << 14) | (v267 << 21);
            }
            v262 = v268 & 0xFFFFC07F | ((v94 & 0x7F) << 7);
          }
          else
          {
            v262 = ((v94 & 0x7F) << 7) | (v261 << 14);
          }
          v93 = v262 & 0xFFFFFF80 | v93 & 0x7F;
        }
        else
        {
          v93 = v93 & 0x7F | (v94 << 7);
        }
      }
      v298 = (_OWORD *)v45;
      v299 = v89[1];
      if (v299 < 0)
      {
        v304 = v89[2];
        if ((char)v89[2] < 0)
        {
          v305 = v89[3];
          if ((char)v89[3] < 0)
          {
            v306 = v89[4];
            if ((char)v89[4] < 0)
            {
              v307 = (char)v89[5];
              if (v307 < 0)
                goto LABEL_657;
              v300 = 0;
              v301 = 0;
              v302 = 0;
              v303 = ((v306 & 0x7F) << 21) | (v307 << 28) | ((v305 & 0x7F) << 14) | ((v304 & 0x7F) << 7) | v299 & 0x7F;
            }
            else
            {
              v300 = 0;
              v301 = 0;
              v303 = ((v305 & 0x7F) << 14) | (v306 << 21) | ((v304 & 0x7F) << 7) | v299 & 0x7F;
              v302 = 1;
            }
          }
          else
          {
            v300 = 0;
            v302 = 0;
            v303 = ((v304 & 0x7F) << 7) | (v305 << 14) | v299 & 0x7F;
            v301 = 1;
          }
        }
        else
        {
          v301 = 0;
          v302 = 0;
          v303 = v299 & 0x7F | (v304 << 7);
          v300 = 1;
        }
      }
      else
      {
        v300 = 0;
        v301 = 0;
        v302 = 0;
        v303 = v89[1];
      }
      if (v93 && v93 == v303)
      {
        v308 = HIDWORD(v80);
        if ((_DWORD)v308 == 1)
        {
          if (*(_QWORD *)(v25 + 72) <= v81)
          {
            v475 = __si_assert_copy_extra_1644(*(_DWORD **)(v77 + 112));
            v476 = v475;
            v477 = "";
            if (v475)
              v477 = v475;
            __message_assert("%s:%u: failed assertion '%s' %s next: %d, max: %d", "BurstTrie.c", 6198, "ptr.next < ctx->trie_max", v477, v81, *(_QWORD *)(v25 + 64));
            free(v476);
            v474 = *(_DWORD **)(*(_QWORD *)(v25 + 8) + 112);
LABEL_652:
            if (__valid_fsp(v474))
              goto LABEL_626;
            goto LABEL_653;
          }
        }
        else if ((_DWORD)v308 == 3 && *(_QWORD *)(v25 + 64) <= v81)
        {
          v471 = __si_assert_copy_extra_1644(*(_DWORD **)(v77 + 4568));
          v472 = v471;
          v473 = "";
          if (v471)
            v473 = v471;
          __message_assert("%s:%u: failed assertion '%s' %s next: %d, max: %d", "BurstTrie.c", 6196, "ptr.next < ctx->trie_fat_max", v473, v81, *(_QWORD *)(v25 + 64));
          free(v472);
          v474 = *(_DWORD **)(*(_QWORD *)(v25 + 8) + 4568);
          goto LABEL_652;
        }
        *(_QWORD *)(v25 + 1224) = v74 + 1;
        v309 = *v74;
        v310 = trieGetChild(v77, v82, *v74);
        v311 = v310;
        if ((_DWORD)v310)
        {
          v312 = *(unsigned int *)(v25 + 1140);
          *(_DWORD *)(v25 + 1140) = v312 + 1;
          v313 = v25 + 88;
          *(_BYTE *)(v313 + v312) = v309;
          *(_BYTE *)(v313 + *(unsigned int *)(v25 + 1140)) = 0;
          if (!HIDWORD(v310))
            goto LABEL_416;
          v314 = *(char **)(v25 + 1224);
          *(_QWORD *)(v25 + 1224) = v314 + 1;
          v315 = *v314;
          v316 = trieGetChild(*(_QWORD *)(v25 + 8), v310, *v314);
          v311 = v316;
          if ((_DWORD)v316)
          {
            v317 = *(unsigned int *)(v25 + 1140);
            *(_DWORD *)(v25 + 1140) = v317 + 1;
            v318 = v25 + 88;
            *(_BYTE *)(v318 + v317) = v315;
            *(_BYTE *)(v318 + *(unsigned int *)(v25 + 1140)) = 0;
            if (!HIDWORD(v316))
            {
LABEL_416:
              v45 = (unint64_t)v298;
              goto LABEL_417;
            }
            if ((v299 & 0x80) == 0)
            {
              v45 = (unint64_t)v298;
              goto LABEL_420;
            }
            v319 = *(char **)(v25 + 1224);
            *(_QWORD *)(v25 + 1224) = v319 + 1;
            v320 = *v319;
            v321 = trieGetChild(*(_QWORD *)(v25 + 8), v316, *v319);
            v311 = v321;
            if ((_DWORD)v321)
            {
              v322 = *(unsigned int *)(v25 + 1140);
              *(_DWORD *)(v25 + 1140) = v322 + 1;
              v323 = v25 + 88;
              *(_BYTE *)(v323 + v322) = v320;
              *(_BYTE *)(v323 + *(unsigned int *)(v25 + 1140)) = 0;
              v45 = (unint64_t)v298;
              if (!HIDWORD(v321))
                goto LABEL_417;
              if ((v300 & 1) != 0)
                goto LABEL_420;
              v324 = *(char **)(v25 + 1224);
              *(_QWORD *)(v25 + 1224) = v324 + 1;
              v325 = *v324;
              v326 = trieGetChild(*(_QWORD *)(v25 + 8), v321, *v324);
              v311 = v326;
              if ((_DWORD)v326)
              {
                v327 = *(unsigned int *)(v25 + 1140);
                *(_DWORD *)(v25 + 1140) = v327 + 1;
                v328 = v25 + 88;
                *(_BYTE *)(v328 + v327) = v325;
                *(_BYTE *)(v328 + *(unsigned int *)(v25 + 1140)) = 0;
                if (!HIDWORD(v326))
                  goto LABEL_417;
                if ((v301 & 1) != 0)
                  goto LABEL_420;
                v329 = *(char **)(v25 + 1224);
                *(_QWORD *)(v25 + 1224) = v329 + 1;
                v330 = *v329;
                v331 = trieGetChild(*(_QWORD *)(v25 + 8), v326, *v329);
                v311 = v331;
                if ((_DWORD)v331)
                {
                  v332 = *(unsigned int *)(v25 + 1140);
                  *(_DWORD *)(v25 + 1140) = v332 + 1;
                  v333 = v25 + 88;
                  *(_BYTE *)(v333 + v332) = v330;
                  *(_BYTE *)(v333 + *(unsigned int *)(v25 + 1140)) = 0;
                  if (!HIDWORD(v331))
                  {
                    v29 = v513;
                    v45 = (unint64_t)v298;
                    goto LABEL_417;
                  }
                  if ((v302 & 1) != 0)
                  {
                    v29 = v513;
                    v45 = (unint64_t)v298;
                    goto LABEL_420;
                  }
                  v360 = *(char **)(v25 + 1224);
                  *(_QWORD *)(v25 + 1224) = v360 + 1;
                  v361 = *v360;
                  v362 = trieGetChild(*(_QWORD *)(v25 + 8), v331, *v360);
                  v311 = v362;
                  if (!(_DWORD)v362)
                  {
                    v34 = (_DWORD *)&unk_1EF19F000;
                    v45 = (unint64_t)v298;
                    v29 = v513;
                    v46 = (_OWORD *)v514;
                    goto LABEL_40;
                  }
                  v363 = *(unsigned int *)(v25 + 1140);
                  *(_DWORD *)(v25 + 1140) = v363 + 1;
                  v364 = v25 + 88;
                  *(_BYTE *)(v364 + v363) = v361;
                  *(_BYTE *)(v364 + *(unsigned int *)(v25 + 1140)) = 0;
                  v29 = v513;
                  v45 = (unint64_t)v298;
                  if (HIDWORD(v362))
LABEL_420:
                    findMatchRangeChars(v25, v311);
                  else
LABEL_417:
                    findAddFlatBucket(v25, v311, 0, 0, 0, 0);
                }
              }
LABEL_487:
              v34 = (_DWORD *)&unk_1EF19F000;
              v46 = (_OWORD *)v514;
              goto LABEL_40;
            }
          }
        }
        v34 = (_DWORD *)&unk_1EF19F000;
      }
      v45 = (unint64_t)v298;
      v46 = (_OWORD *)v514;
      goto LABEL_40;
    }
    if (**v49 == 42)
    {
      if ((v491 & 1) != 0)
      {
        v491 = 1;
        *(_BYTE *)(v25 + 1289) = 1;
        goto LABEL_40;
      }
      if (**(_BYTE **)v25)
      {
        v491 = 1;
        goto LABEL_40;
      }
      v491 = 1;
      findMatchTermWildcard(v25, v82, 4u, 1);
LABEL_206:
      v34 = (_DWORD *)&unk_1EF19F000;
      goto LABEL_40;
    }
    if (!*(_QWORD *)(v47 + (v45 << 6) + 32))
    {
      v188 = **(unsigned __int8 ***)(v25 + 1240);
      if (*v188 <= 3u)
      {
        v189 = v188[1];
        if ((char)v188[1] < 0)
        {
          v265 = v188[2];
          if ((char)v188[2] < 0)
          {
            v273 = v188[3];
            if ((char)v188[3] < 0)
            {
              v334 = v188[4];
              if ((char)v188[4] < 0)
              {
                v339 = (char)v188[5];
                if (v339 < 0)
                  goto LABEL_657;
                v340 = ((v334 & 0x7F) << 21) | (v339 << 28) | ((v273 & 0x7F) << 14) | ((v265 & 0x7F) << 7) | v189 & 0x7F;
                v190 = 6;
                v189 = v340;
              }
              else
              {
                v335 = ((v273 & 0x7F) << 14) | (v334 << 21) | ((v265 & 0x7F) << 7) | v189 & 0x7F;
                v190 = 5;
                v189 = v335;
              }
            }
            else
            {
              v274 = ((v265 & 0x7F) << 7) | (v273 << 14) | v189 & 0x7F;
              v190 = 4;
              v189 = v274;
            }
          }
          else
          {
            v189 = v189 & 0x7F | (v265 << 7);
            v190 = 3;
          }
        }
        else
        {
          v190 = 2;
        }
        if ((v189 - 1) <= 5)
        {
          v341 = v190 + 1;
          if (((char)v188[v190] & 0x80000000) == 0)
            goto LABEL_443;
          v342 = v190 + 2;
          if ((char)v188[v341] < 0)
          {
            v341 = v190 + 3;
            if ((char)v188[v342] < 0)
            {
              v342 = v190 + 4;
              if (((char)v188[v341] & 0x80000000) == 0)
                goto LABEL_445;
              if ((char)v188[v342] < 0)
              {
                v481 = __si_assert_copy_extra_1644(0);
                v482 = v481;
                v483 = "";
                if (v481)
                  v483 = v481;
                __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", "VIntUtils.h", 341, "(b4 & 0x80) == 0", v483);
                free(v482);
                if (__valid_fs(-1))
                  v467 = 2989;
                else
LABEL_641:
                  v467 = 3072;
                *(_DWORD *)v467 = -559038737;
                abort();
              }
              v190 += 5;
            }
            else
            {
LABEL_443:
              v190 = v341;
            }
          }
          else
          {
LABEL_445:
            v190 = v342;
          }
        }
        *(_QWORD *)(v25 + 1232) = &v74[v190];
      }
      findMatchTerm(v25, 0);
      goto LABEL_206;
    }
    is_fuzzy = icu_search_context_is_fuzzy();
    v110 = *(_QWORD *)(v25 + 1240);
    if (is_fuzzy)
    {
      v111 = *(_QWORD *)(v110 + 48);
      *(_QWORD *)(v25 + 1264) = v111;
      if (!v111)
      {
        v464 = __si_assert_copy_extra_1644(0);
        v465 = v464;
        v466 = "";
        if (v464)
          v466 = v464;
        __message_assert("%s:%u: failed assertion '%s' %s Failed to set up ctx->_node->la for %s %s", "BurstTrie.c", 6252, "ctx->la", v466, **(const char ***)(v25 + 1240), *(const char **)(*(_QWORD *)(v25 + 1240) + 8));
        free(v465);
        goto LABEL_641;
      }
    }
    v112 = *(char **)v110;
    v113 = strlen(*(const char **)v110);
    v537 = 0;
    *(_QWORD *)&v535 = 16;
    if (*MEMORY[0x1E0C85AD8] <= 0x27FuLL)
      ++sTotal;
    v114 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 0x10uLL, 0x28uLL, 0x31F9A007uLL);
    if (!v114 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v545 = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v545, 2u);
    }
    *((_QWORD *)&v535 + 1) = v114;
    Mutable = CFSetCreateMutable(v488, 0, &kTrieLevelInfoSetCallbacks);
    *(_QWORD *)&v533 = 16;
    if (*MEMORY[0x1E0C85AD8] <= 0x27FuLL)
      ++sTotal;
    v115 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 0x10uLL, 0x28uLL, 0x31F9A007uLL);
    if (!v115 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v545 = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v545, 2u);
    }
    v534 = 0;
    *((_QWORD *)&v533 + 1) = v115;
    v534 = CFSetCreateMutable(v488, 0, &kTrieLevelInfoSetCallbacks);
    v116 = __THREAD_SLOT_KEY;
    if (!__THREAD_SLOT_KEY)
    {
      makeThreadId();
      v116 = __THREAD_SLOT_KEY;
    }
    v509 = (__int128 *)v45;
    v117 = (unint64_t)pthread_getspecific(v116);
    if (!v117 || v117 >= 0x801)
    {
      makeThreadId();
      v117 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    }
    v118 = v117 - 1;
    v504 = threadData[18 * v117 - 10];
    CICleanUpPush(v117 - 1, (uint64_t)trie_level_list_destroy, (uint64_t)&v535);
    v506 = (_QWORD *)v118;
    CICleanUpPush(v118, (uint64_t)trie_level_list_destroy, (uint64_t)&v533);
    v119 = v485;
    if (*(int *)(*(_QWORD *)(v25 + 1240) + 20) < 7)
    {
      trie_level_list_insert_with_state((int *)&v535, *(_QWORD *)(v25 + 52), 0, 0, 1, 0);
    }
    else if (*v112 == 1)
    {
      v120 = v112[1];
      if (v112[1] < 0)
      {
        v266 = v112[2];
        if (v112[2] < 0)
        {
          v275 = v112[3];
          if (v112[3] < 0)
          {
            v336 = v112[4];
            if (v112[4] < 0)
            {
              v343 = v112[5];
              if (v343 < 0)
                goto LABEL_657;
              v121 = 6;
              v120 = ((v336 & 0x7F) << 21) | (v343 << 28) | ((v275 & 0x7F) << 14) | ((v266 & 0x7F) << 7) | v120 & 0x7F;
            }
            else
            {
              v121 = 5;
              v120 = ((v275 & 0x7F) << 14) | (v336 << 21) | ((v266 & 0x7F) << 7) | v120 & 0x7F;
            }
          }
          else
          {
            v121 = 4;
            v120 = ((v266 & 0x7F) << 7) | (v275 << 14) | v120 & 0x7F;
          }
        }
        else
        {
          v120 = v120 & 0x7F | (v266 << 7);
          v121 = 3;
        }
      }
      else
      {
        v121 = 2;
      }
      if (v120 == 2)
      {
        v344 = v121 + 1;
        if ((v112[v121] & 0x80000000) == 0)
          goto LABEL_456;
        v345 = v121 + 2;
        if ((v112[v344] & 0x80000000) == 0)
        {
LABEL_459:
          v121 = v345;
          goto LABEL_460;
        }
        v344 = v121 + 3;
        if (v112[v345] < 0)
        {
          v345 = v121 + 4;
          if ((v112[v344] & 0x80000000) == 0)
            goto LABEL_459;
          if (v112[v345] < 0)
          {
LABEL_657:
            v452 = __si_assert_copy_extra_1644(0);
            __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
            goto LABEL_625;
          }
          v121 += 5;
          if (v121 <= v113)
          {
LABEL_461:
            v346 = _trie_resolve_string(*(_QWORD *)(v25 + 8), *(_QWORD *)(v25 + 52), (uint64_t)v112, v121, &v537);
            if (v346)
            {
              v347 = v346;
              if (HIDWORD(v537))
              {
                if (v121 == v346)
                {
                  v348 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v346 + 1, 0x6085D6BuLL);
                  if (!v348)
                    _log_fault_for_malloc_failure();
                  memcpy(v348, v112, v121);
                  *((_BYTE *)v348 + v121) = 0;
                  trie_level_list_insert_with_state((int *)&v535, v537, v348, v347, 1, 0);
                  if (v347 < v113 && v112[v121] == 42)
                  {
                    __memcpy_chk();
                    *(_BYTE *)(v25 + v121 + 88) = 0;
                    *(_DWORD *)(v25 + 1140) = v347;
                    findMatchTermWildcard(v25, **((_QWORD **)&v535 + 1), 0, 1);
                    item_count = 0;
                    v192 = 0;
                    v532 = 0;
                    v531 = 0;
                    v530 = 0;
                    goto LABEL_305;
                  }
                }
              }
              else
              {
                findAddFlatBucket(v25, v537, v112, v346, 0, 0);
              }
            }
          }
        }
        else
        {
LABEL_456:
          v121 = v344;
          if (v344 <= v113)
            goto LABEL_461;
        }
      }
      else
      {
LABEL_460:
        if (v121 <= v113)
          goto LABEL_461;
      }
    }
    v532 = 0;
    v531 = 0;
    v530 = 0;
    if (icu_search_context_is_fuzzy())
    {
      while (DWORD1(v535))
      {
        if (SDWORD1(v535) >= 1)
        {
          v229 = 0;
          v230 = 0;
          do
          {
            v529 = 0uLL;
            v529 = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v229 + 24);
            v241 = *(_QWORD *)(v25 + 1264);
            v242 = DWORD2(v529);
            if (*(_BYTE *)(v241 + 48))
              v243 = (_QWORD)v529 == 0;
            else
              v243 = 1;
            if (v243)
              goto LABEL_284;
            v244 = *(_DWORD *)(v241 + 16) - *(unsigned __int8 *)(v241 + 32);
            v245 = 5 * (BYTE8(v529) - v244);
            v246 = v244 >= DWORD2(v529);
            v247 = 5 * (v244 - BYTE8(v529));
            if (v246)
              v245 = 0;
            if (!v246)
              v247 = 0;
            if ((((_QWORD)v529 << v245 >> v247) & 0x1F79C61) == 0)
            {
LABEL_284:
              v231 = (2 * *(unsigned __int8 *)(v241 + 32)) | 1;
              if (v231 >= *(_DWORD *)(v241 + 16) - DWORD2(v529))
                LOBYTE(v231) = *(_BYTE *)(v241 + 16) - BYTE8(v529);
              LOBYTE(v541[0]) = 0;
              *(_QWORD *)v545 = 0;
              tt_transition_for_state(**(_QWORD ***)v241, v529, v231 << 8, v545, v541);
              v232 = *(_QWORD *)v545;
              v233 = *(_QWORD *)(v241 + 40) + 24 * v242;
              *(_QWORD *)(v233 + 8) = *(_QWORD *)v545;
              *(_DWORD *)(v233 + 16) = LOBYTE(v541[0]) + v242;
              v234 = *(char ***)v233;
              v235 = *(_QWORD *)(v233 + 16);
              v236 = *(_QWORD *)(*((_QWORD *)&v535 + 1) + v229);
              v540[0] = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v229 + 8);
              v540[1] = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v229 + 24);
              v237 = v540[1];
              v539 = 0;
              v538 = 0;
              v238 = *(_QWORD *)(v25 + 8);
              v239 = MEMORY[0x1E0C809B0];
              *(_QWORD *)&v541[0] = MEMORY[0x1E0C809B0];
              *((_QWORD *)&v541[0] + 1) = 0x40000000;
              *(_QWORD *)&v541[1] = __trie_resolve_fuzzy_transition_block_invoke;
              *((_QWORD *)&v541[1] + 1) = &__block_descriptor_tmp_110;
              *(_QWORD *)v542 = v25;
              *(_QWORD *)&v542[8] = v236;
              *v119 = v540[0];
              v119[1] = v237;
              *(_QWORD *)v545 = v239;
              *(_QWORD *)&v545[8] = 0x40000000;
              *(_QWORD *)&v545[16] = __trie_resolve_fuzzy_transition_block_invoke_2;
              *(_QWORD *)&v545[24] = &__block_descriptor_tmp_112;
              v240 = v540[1];
              *v46 = v540[0];
              v46[1] = v240;
              *(_QWORD *)&v546 = v236;
              *((_QWORD *)&v548 + 1) = v232;
              *(_QWORD *)&v549 = v235;
              *((_QWORD *)&v549 + 1) = v25;
              *(_QWORD *)&v550 = &v533;
              _trie_resolve_sub_trie(v238, v236, v234, (uint64_t)&v538, 0, v232 != 0, (uint64_t)v541, (uint64_t)v545);
            }
            else
            {
              v248 = (unint64_t *)(*((_QWORD *)&v535 + 1) + v229);
              *(_DWORD *)(v25 + 1140) = *(_DWORD *)(*((_QWORD *)&v535 + 1) + v229 + 16);
              __memcpy_chk();
              *(_BYTE *)(v25 + *(unsigned int *)(v25 + 1140) + 88) = 0;
              *(_QWORD *)(v25 + 1272) = &v529;
              findMatchTermWildcard(v25, *v248, 0, 1);
              *(_QWORD *)(v25 + 1272) = 0;
            }
            ++v230;
            v229 += 40;
          }
          while (v230 < SDWORD1(v535));
        }
        v249 = v505;
        v250 = 0uLL;
        if ((*(_BYTE *)(*(_QWORD *)(v25 + 1240) + 16) & 2) != 0 && SDWORD1(v533) >= 1)
        {
          v251 = 0;
          v252 = 0;
          do
          {
            *(_QWORD *)&v546 = 0;
            *(_OWORD *)v545 = v250;
            *(_OWORD *)&v545[16] = v250;
            v253 = *(_QWORD *)(*((_QWORD *)&v533 + 1) + v251 + 32);
            v254 = *(_OWORD *)(*((_QWORD *)&v533 + 1) + v251 + 16);
            *(_OWORD *)v545 = *(_OWORD *)(*((_QWORD *)&v533 + 1) + v251);
            v255 = *(_OWORD *)v545;
            *(_OWORD *)&v545[16] = v254;
            *(_QWORD *)&v546 = v253;
            *(_QWORD *)(v25 + 1272) = v249;
            v541[0] = v255;
            v541[1] = v254;
            *(_QWORD *)v542 = v253;
            _trie_resolve_combining(v25, v541, (int *)&v533);
            v250 = 0uLL;
            *(_QWORD *)(v25 + 1272) = 0;
            ++v252;
            v251 += 40;
          }
          while (v252 < SDWORD1(v533));
        }
        v227 = v534;
        v228 = v533;
        v533 = v535;
        v534 = Mutable;
        DWORD1(v533) = 0;
        v535 = v228;
        Mutable = v227;
      }
      item_count = 0;
      v192 = 0;
    }
    else
    {
      item_count = icu_search_context_item_get_item_count();
      v192 = 0;
      if (item_count >= 1 && DWORD1(v535))
      {
        v192 = 0;
        while (1)
        {
          info = icu_search_context_item_get_info();
          if (!info)
            break;
          v194 = info;
          v195 = DWORD1(v535);
          if (SDWORD1(v535) < 1)
          {
LABEL_273:
            if (v194 != 2)
            {
LABEL_274:
              v225 = v534;
              v226 = v533;
              v533 = v535;
              v534 = Mutable;
              DWORD1(v533) = 0;
              v535 = v226;
              Mutable = v225;
              v195 = DWORD1(v226);
            }
          }
          else
          {
            switch(info)
            {
              case 1:
                v196 = 0;
                v197 = 0;
                do
                {
                  v198 = (unint64_t *)(*((_QWORD *)&v535 + 1) + v196);
                  *(_DWORD *)(v25 + 1140) = *(_DWORD *)(*((_QWORD *)&v535 + 1) + v196 + 16);
                  __memcpy_chk();
                  *(_BYTE *)(v25 + *(unsigned int *)(v25 + 1140) + 88) = 0;
                  findMatchTermWildcard(v25, *v198, 0, 1);
                  ++v197;
                  v195 = DWORD1(v535);
                  v196 += 40;
                }
                while (v197 < SDWORD1(v535));
                v46 = (_OWORD *)v514;
                if (v194 != 2)
                  goto LABEL_274;
                break;
              case 2:
                v199 = 0;
                v200 = 0;
                do
                {
                  *(_OWORD *)v545 = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v199);
                  *(_OWORD *)&v545[16] = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v199 + 16);
                  *(_QWORD *)&v546 = *(_QWORD *)(*((_QWORD *)&v535 + 1) + v199 + 32);
                  _trie_resolve_combining(v25, (__int128 *)v545, (int *)&v535);
                  ++v200;
                  v195 = DWORD1(v535);
                  v199 += 40;
                }
                while (v200 < SDWORD1(v535));
                if (v194 != 2)
                  goto LABEL_274;
                break;
              case 3:
                v201 = 0;
                v202 = 0;
                do
                {
                  v203 = strlen(v530);
                  *(_OWORD *)v545 = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v201);
                  *(_OWORD *)&v545[16] = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v201 + 16);
                  *(_QWORD *)&v546 = *(_QWORD *)(*((_QWORD *)&v535 + 1) + v201 + 32);
                  trie_resolve_sub_string(v25, (uint64_t)v545, v530, v203, (int *)&v533);
                  ++v202;
                  v195 = DWORD1(v535);
                  v201 += 40;
                }
                while (v202 < SDWORD1(v535));
                v29 = v513;
                v46 = (_OWORD *)v514;
                if (v194 != 2)
                  goto LABEL_274;
                break;
              case 4:
                v204 = 0;
                do
                {
                  if ((*(_BYTE *)(*(_QWORD *)(v25 + 1240) + 16) & 2) != 0)
                  {
                    if (v531 >= 1)
                    {
                      for (i = 0; i < v531; ++i)
                      {
                        v210 = *(unsigned __int8 **)(v532 + 8 * i);
                        v211 = *v210;
                        v213 = v210[1];
                        v212 = v210 + 1;
                        v214 = *((_QWORD *)&v535 + 1) + 40 * v204;
                        if (utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)v213 >> 4] == (_DWORD)v211)
                        {
                          *(_OWORD *)v545 = *(_OWORD *)v214;
                          *(_OWORD *)&v545[16] = *(_OWORD *)(v214 + 16);
                          *(_QWORD *)&v546 = *(_QWORD *)(v214 + 32);
                          trie_resolve_sub_string(v25, (uint64_t)v545, v212, v211, (int *)&v533);
                        }
                        else
                        {
                          v541[0] = *(_OWORD *)v214;
                          v541[1] = *(_OWORD *)(v214 + 16);
                          *(_QWORD *)v542 = *(_QWORD *)(v214 + 32);
                          v559 = 0u;
                          v558 = 0u;
                          v556 = 0u;
                          v557 = 0u;
                          v554 = 0u;
                          v555 = 0u;
                          v552 = 0u;
                          v553 = 0u;
                          v550 = 0u;
                          v551 = 0u;
                          v548 = 0u;
                          v549 = 0u;
                          v546 = 0u;
                          v547 = 0u;
                          memset(v545, 0, sizeof(v545));
                          _trie_resolve_sub_string_ignore_diacritics(v25, v541, v212, v211, (int *)&v533, v545, 0);
                        }
                      }
                    }
                  }
                  else if (v531 >= 1)
                  {
                    for (j = 0; j < v531; ++j)
                    {
                      v206 = *(unsigned __int8 **)(v532 + 8 * j);
                      v207 = *((_QWORD *)&v535 + 1) + 40 * v204;
                      v208 = *v206;
                      *(_OWORD *)v545 = *(_OWORD *)v207;
                      *(_OWORD *)&v545[16] = *(_OWORD *)(v207 + 16);
                      *(_QWORD *)&v546 = *(_QWORD *)(v207 + 32);
                      trie_resolve_sub_string(v25, (uint64_t)v545, v206 + 1, v208, (int *)&v533);
                    }
                  }
                  if (v530)
                  {
                    v215 = *((_QWORD *)&v535 + 1) + 40 * v204;
                    v216 = strlen(v530);
                    *(_OWORD *)v545 = *(_OWORD *)v215;
                    *(_OWORD *)&v545[16] = *(_OWORD *)(v215 + 16);
                    *(_QWORD *)&v546 = *(_QWORD *)(v215 + 32);
                    trie_resolve_sub_string(v25, (uint64_t)v545, v530, v216, (int *)&v533);
                  }
                  ++v204;
                  v195 = DWORD1(v535);
                  v46 = (_OWORD *)v514;
                }
                while (v204 < SDWORD1(v535));
                goto LABEL_273;
              case 5:
                v217 = 0;
                do
                {
                  if (v531 >= 1)
                  {
                    for (k = 0; k < v531; ++k)
                    {
                      v219 = *(unsigned __int8 **)(v532 + 8 * k);
                      v220 = *((_QWORD *)&v535 + 1) + 40 * v217;
                      v221 = *v219;
                      *(_OWORD *)v545 = *(_OWORD *)v220;
                      *(_OWORD *)&v545[16] = *(_OWORD *)(v220 + 16);
                      *(_QWORD *)&v546 = *(_QWORD *)(v220 + 32);
                      trie_resolve_sub_string(v25, (uint64_t)v545, v219 + 1, v221, (int *)&v533);
                    }
                  }
                  if (v530)
                  {
                    v222 = *((_QWORD *)&v535 + 1) + 40 * v217;
                    v223 = strlen(v530);
                    *(_OWORD *)v545 = *(_OWORD *)v222;
                    *(_OWORD *)&v545[16] = *(_OWORD *)(v222 + 16);
                    v224 = *(_QWORD *)(v222 + 32);
                    v46 = (_OWORD *)v514;
                    *(_QWORD *)&v546 = v224;
                    trie_resolve_sub_string(v25, (uint64_t)v545, v530, v223, (int *)&v533);
                  }
                  ++v217;
                  v195 = DWORD1(v535);
                }
                while (v217 < SDWORD1(v535));
                v29 = v513;
                if (v194 != 2)
                  goto LABEL_274;
                break;
              default:
                goto LABEL_274;
            }
          }
          if (++v192 >= item_count || !v195)
            goto LABEL_305;
        }
        v452 = __si_assert_copy_extra_1644(0);
        __message_assert("%s:%u: failed assertion '%s' %s ");
LABEL_625:
        free(v452);
        if (__valid_fs(-1))
        {
LABEL_626:
          MEMORY[0xBAD] = -559038737;
          abort();
        }
LABEL_653:
        MEMORY[0xC00] = -559038737;
        abort();
      }
    }
LABEL_305:
    if (icu_search_context_is_fuzzy())
    {
      if (!*(_BYTE *)(*(_QWORD *)(v25 + 1264) + 48))
        goto LABEL_312;
      goto LABEL_390;
    }
    if (!v192 || v192 != item_count || !DWORD1(v535) || icu_search_context_item_get_info() == 1)
    {
LABEL_390:
      CICleanUpReset((uint64_t)v506, v504);
      *(_QWORD *)(v25 + 1264) = 0;
      goto LABEL_39;
    }
LABEL_312:
    v256 = *(_QWORD *)(v25 + 1240);
    v258 = *(_DWORD *)(v256 + 16);
    v257 = *(_DWORD *)(v256 + 20);
    if ((v258 & 0x800) != 0)
    {
      if (v257)
      {
        if (v257 == 1)
        {
          if (SDWORD1(v535) >= 1)
          {
            v278 = 0;
            v279 = 0;
            do
            {
              *(_OWORD *)v545 = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v278);
              *(_OWORD *)&v545[16] = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v278 + 16);
              *(_QWORD *)&v546 = *(_QWORD *)(*((_QWORD *)&v535 + 1) + v278 + 32);
              trie_resolve_sub_string(v25, (uint64_t)v545, "\x01\x04", 2, (int *)&v533);
              *(_OWORD *)v545 = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v278);
              *(_OWORD *)&v545[16] = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v278 + 16);
              *(_QWORD *)&v546 = *(_QWORD *)(*((_QWORD *)&v535 + 1) + v278 + 32);
              trie_resolve_sub_string(v25, (uint64_t)v545, "\x01\x04\x03", 2, (int *)&v533);
              ++v279;
              v278 += 40;
            }
            while (v279 < SDWORD1(v535));
          }
        }
        else if (v257 == 5 && SDWORD1(v535) >= 1)
        {
          v263 = 0;
          v264 = 0;
          do
          {
            *(_OWORD *)v545 = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v263);
            *(_OWORD *)&v545[16] = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v263 + 16);
            *(_QWORD *)&v546 = *(_QWORD *)(*((_QWORD *)&v535 + 1) + v263 + 32);
            trie_resolve_sub_string(v25, (uint64_t)v545, "\x01\x05", 2, (int *)&v533);
            *(_OWORD *)v545 = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v263);
            *(_OWORD *)&v545[16] = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v263 + 16);
            *(_QWORD *)&v546 = *(_QWORD *)(*((_QWORD *)&v535 + 1) + v263 + 32);
            trie_resolve_sub_string(v25, (uint64_t)v545, "\x01\x05\x03", 2, (int *)&v533);
            ++v264;
            v263 += 40;
          }
          while (v264 < SDWORD1(v535));
        }
      }
      else if (SDWORD1(v535) >= 1)
      {
        v276 = 0;
        v277 = 0;
        do
        {
          *(_OWORD *)v545 = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v276);
          *(_OWORD *)&v545[16] = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v276 + 16);
          *(_QWORD *)&v546 = *(_QWORD *)(*((_QWORD *)&v535 + 1) + v276 + 32);
          trie_resolve_sub_string(v25, (uint64_t)v545, "\x01", 1, (int *)&v533);
          ++v277;
          v276 += 40;
        }
        while (v277 < SDWORD1(v535));
      }
      v280 = v534;
      v281 = v533;
      v533 = v535;
      v534 = Mutable;
      DWORD1(v533) = 0;
      v535 = v281;
      Mutable = v280;
    }
    else if (v257)
    {
      if (v257 == 1)
      {
        if (SDWORD1(v535) >= 1)
        {
          v259 = 0;
          v260 = 0;
          do
          {
            *(_OWORD *)v545 = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v259);
            *(_OWORD *)&v545[16] = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v259 + 16);
            *(_QWORD *)&v546 = *(_QWORD *)(*((_QWORD *)&v535 + 1) + v259 + 32);
            trie_resolve_sub_string(v25, (uint64_t)v545, "\x01\x01", 2, (int *)&v533);
            *(_OWORD *)v545 = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v259);
            *(_OWORD *)&v545[16] = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v259 + 16);
            *(_QWORD *)&v546 = *(_QWORD *)(*((_QWORD *)&v535 + 1) + v259 + 32);
            trie_resolve_sub_string(v25, (uint64_t)v545, "\x01\x01\x03", 3, (int *)&v533);
            ++v260;
            v259 += 40;
          }
          while (v260 < SDWORD1(v535));
        }
      }
      else if (v257 >= 7 && SDWORD1(v535) >= 1)
      {
        v271 = 0;
        v272 = 0;
        do
        {
          *(_OWORD *)v545 = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v271);
          *(_OWORD *)&v545[16] = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v271 + 16);
          *(_QWORD *)&v546 = *(_QWORD *)(*((_QWORD *)&v535 + 1) + v271 + 32);
          trie_resolve_sub_string(v25, (uint64_t)v545, "\x01\x03", 2, (int *)&v533);
          ++v272;
          v271 += 40;
        }
        while (v272 < SDWORD1(v535));
      }
    }
    else if ((v258 & 0x3080) == 0 && SDWORD1(v535) >= 1)
    {
      v269 = 0;
      v270 = 0;
      do
      {
        *(_OWORD *)v545 = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v269);
        *(_OWORD *)&v545[16] = *(_OWORD *)(*((_QWORD *)&v535 + 1) + v269 + 16);
        *(_QWORD *)&v546 = *(_QWORD *)(*((_QWORD *)&v535 + 1) + v269 + 32);
        trie_resolve_sub_string(v25, (uint64_t)v545, "\x01\x02", 2, (int *)&v533);
        ++v270;
        v269 += 40;
      }
      while (v270 < SDWORD1(v535));
    }
    while (2)
    {
      if (*(_DWORD *)(v25 + 48) == 1)
      {
        if (SDWORD1(v535) >= 1)
        {
          v282 = 0;
          v283 = 0;
          while (1)
          {
            v284 = *(unsigned int *)(*((_QWORD *)&v535 + 1) + v282);
            v285 = *(_DWORD *)(*((_QWORD *)&v535 + 1) + v282 + 4);
            if (v285 == 3)
              break;
            if (v285 == 1)
            {
              v286 = *(unsigned int *)mgetBase(*(_QWORD *)(v25 + 8), v284);
LABEL_368:
              v287 = v286 >> 3;
              v288 = (v286 & 7) << 32;
              if ((v286 & 3) == 1)
              {
                v287 = v286 >> 2;
                v288 = 0x100000000;
              }
              v289 = (v286 & 1) == 0;
              if ((v286 & 1) != 0)
                v290 = v287;
              else
                v290 = v286 >> 1;
              if (v289)
                v291 = 0;
              else
                v291 = v288;
              if (v290)
                findAddFlatBucket(v25, v291 | v290, *(_BYTE **)(*((_QWORD *)&v535 + 1) + v282 + 8), *(int *)(*((_QWORD *)&v535 + 1) + v282 + 16), 0, 0);
            }
            ++v283;
            v282 += 40;
            if (v283 >= SDWORD1(v535))
              goto LABEL_389;
          }
          v286 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) + 8) + 1028 * v284);
          goto LABEL_368;
        }
LABEL_389:
        if (!DWORD1(v533))
          goto LABEL_390;
        *(_OWORD *)v545 = v533;
        *(_QWORD *)&v545[16] = v534;
        v533 = v535;
        v534 = Mutable;
        DWORD1(v533) = 0;
        CFSetRemoveAllValues(Mutable);
        v535 = *(_OWORD *)v545;
        Mutable = *(CFMutableSetRef *)&v545[16];
        continue;
      }
      break;
    }
    if (SDWORD1(v535) < 1)
      goto LABEL_389;
    v292 = 0;
    v293 = 0;
    while (1)
    {
      v294 = *(unsigned int *)(*((_QWORD *)&v535 + 1) + v292);
      v295 = *(_DWORD *)(*((_QWORD *)&v535 + 1) + v292 + 4);
      if (v295 == 3)
      {
        v296 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v25 + 8) + 8) + 1028 * v294);
        if ((_DWORD)v296)
          goto LABEL_386;
      }
      else if (v295 == 1)
      {
        v296 = *(unsigned int *)mgetBase(*(_QWORD *)(v25 + 8), v294);
        if ((_DWORD)v296)
        {
LABEL_386:
          if (termFieldMatch(*(_DWORD *)(*(_QWORD *)(v25 + 1240) + 20), *(unsigned __int8 **)(*((_QWORD *)&v535 + 1) + v292 + 8), *(_DWORD *)(*((_QWORD *)&v535 + 1) + v292 + 16), *(_DWORD *)(*(_QWORD *)(v25 + 1240) + 16)))
          {
            *(_QWORD *)v545 = 0;
            *(_QWORD *)&v541[0] = 0;
            if (icu_search_match())
              findHandleMatch(v25, v296, 0, *(unsigned __int8 **)(*((_QWORD *)&v535 + 1) + v292 + 8), *(_DWORD *)(*((_QWORD *)&v535 + 1) + v292 + 16), 1);
          }
        }
      }
      ++v293;
      v292 += 40;
      if (v293 >= SDWORD1(v535))
        goto LABEL_389;
    }
  }
  (*(void (**)(uint64_t, uint64_t))(a11 + 16))(a11, v25);
  v34 = (int *)&unk_1EF19F000;
LABEL_23:
  if (v34[804] >= 5)
  {
    v453 = *__error();
    v454 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v454, OS_LOG_TYPE_DEFAULT))
    {
      v455 = *(_DWORD *)(v25 + 1184);
      v456 = CFAbsoluteTimeGetCurrent() - Current;
      *(_DWORD *)v545 = 67109376;
      *(_DWORD *)&v545[4] = v455;
      *(_WORD *)&v545[8] = 2048;
      *(double *)&v545[10] = v456;
      _os_log_impl(&dword_1B8270000, v454, OS_LOG_TYPE_DEFAULT, "resolve trie terms bc:%u : %f seconds", v545, 0x12u);
    }
    *__error() = v453;
    v35 = *(unsigned int *)(v25 + 1184);
    if (!(_DWORD)v35)
      goto LABEL_515;
  }
  else
  {
    v35 = *(unsigned int *)(v25 + 1184);
    if (!(_DWORD)v35)
      goto LABEL_515;
  }
  if (**(_BYTE **)v25)
    goto LABEL_515;
  if (v35 < 0x15)
    goto LABEL_512;
  if (!*(_BYTE *)(v25 + 1288))
    goto LABEL_512;
  v36 = CFAbsoluteTimeGetCurrent();
  v37 = *(unsigned int *)(v25 + 1184);
  v547 = 0u;
  v548 = 0u;
  v546 = 0u;
  memset(v545, 0, sizeof(v545));
  v38 = (_DWORD *)&unk_1EF19F000;
  if (!(_DWORD)v37)
    goto LABEL_512;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v42 = *(_QWORD *)(v25 + 40);
  while (1)
  {
    v43 = *(_QWORD *)(v42 + 8 * v39);
    if ((*(_BYTE *)v43 & 3) == 0)
      goto LABEL_30;
    v44 = *(float *)(v43 + 8);
    if (v44 == 0.0)
      goto LABEL_30;
    ++v40;
    if (v41 > 19)
      break;
    *(float *)&v545[4 * v41++] = v44;
LABEL_30:
    if (v37 == ++v39)
      goto LABEL_510;
  }
  qsort(v545, v41, 4uLL, (int (__cdecl *)(const void *, const void *))_floatCompare);
  if (v37 <= v39)
  {
    v38 = (int *)&unk_1EF19F000;
  }
  else
  {
    v365 = *(_QWORD *)(v25 + 40);
    v38 = (_DWORD *)&unk_1EF19F000;
    do
    {
      v367 = *(_QWORD *)(v365 + 8 * v39);
      if ((*(_BYTE *)v367 & 3) != 0)
      {
        v368 = *(float *)(v367 + 8);
        if (v368 != 0.0)
        {
          ++v40;
          if (v368 > *(float *)v545)
          {
            *(_DWORD *)v545 = *(_DWORD *)(v367 + 8);
            v369 = 1;
            while (1)
            {
              v370 = *(float *)&v545[4 * v369];
              if (v368 > v370)
                break;
              if (v369 <= 0x12)
              {
                ++v369;
                v92 = v368 == v370;
                v368 = v370;
                if (!v92)
                  continue;
              }
              goto LABEL_499;
            }
            v366 = (float *)&v545[4 * v369];
            *(v366 - 1) = v370;
            *v366 = v368;
          }
        }
      }
LABEL_499:
      ++v39;
    }
    while (v39 != v37);
  }
LABEL_510:
  if (v40 < 0x15)
  {
LABEL_512:
    v377 = CFAbsoluteTimeGetCurrent();
    psort(*(void **)(v25 + 40), v35, 8uLL, (int (__cdecl *)(const void *, const void *))flatPageSearchBucketCompare);
    v378 = *__error();
    v379 = _SILogForLogForCategory(1);
    v380 = 2 * (dword_1EF19FC90 < 4);
    if (os_log_type_enabled(v379, v380))
    {
      v381 = CFAbsoluteTimeGetCurrent() - v377;
      *(_DWORD *)v545 = 67109376;
      *(_DWORD *)&v545[4] = v35;
      *(_WORD *)&v545[8] = 2048;
      *(double *)&v545[10] = v381;
      _os_log_impl(&dword_1B8270000, v379, v380, "sort %d flat pages: %f seconds", v545, 0x12u);
    }
    *__error() = v378;
    goto LABEL_515;
  }
  v371 = 0;
  v372 = 0;
  v373 = 0;
  v374 = *(float *)v545;
  v375 = *(float ***)(v25 + 40);
  v376 = v37;
  do
  {
    v437 = *v375;
    if ((*(_BYTE *)*v375 & 3) != 0)
    {
      v438 = v437[2];
      if (v438 != 0.0)
      {
        if (v438 >= v374)
        {
          if (v438 <= v374)
            ++v372;
          else
            ++v373;
        }
        else
        {
          if (*(_BYTE *)(v25 + 1288))
            v437[2] = -1.0;
          ++v371;
        }
      }
    }
    ++v375;
    --v376;
  }
  while (v376);
  *(float *)(v25 + 1284) = v374;
  if (v38[804] >= 5)
  {
    v468 = *__error();
    v469 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v469, OS_LOG_TYPE_DEFAULT))
    {
      v470 = CFAbsoluteTimeGetCurrent();
      LODWORD(v541[0]) = 134219776;
      *(_QWORD *)((char *)v541 + 4) = v25;
      WORD6(v541[0]) = 1024;
      *(_DWORD *)((char *)v541 + 14) = v37;
      WORD1(v541[1]) = 1024;
      DWORD1(v541[1]) = v40;
      WORD4(v541[1]) = 1024;
      *(_DWORD *)((char *)&v541[1] + 10) = v373;
      HIWORD(v541[1]) = 1024;
      *(_DWORD *)v542 = v372;
      *(_WORD *)&v542[4] = 1024;
      *(_DWORD *)&v542[6] = v371;
      *(_WORD *)&v542[10] = 2048;
      *(double *)&v542[12] = v374;
      v543 = 2048;
      v544 = v470 - v36;
      _os_log_impl(&dword_1B8270000, v469, OS_LOG_TYPE_DEFAULT, "FindTermIDsContext %p invalidate fuzzy pages bc: %u fc: %u gc: %u mc:%u lc: %u s: %f took %f seconds", (uint8_t *)v541, 0x3Eu);
    }
    *__error() = v468;
    v29 = v513;
  }
  if (!**(_BYTE **)v25)
  {
    v444 = CFAbsoluteTimeGetCurrent();
    psort(*(void **)(v25 + 40), v35, 8uLL, (int (__cdecl *)(const void *, const void *))flatPageSearchFuzzyBucketCompare);
    v445 = *__error();
    v446 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v446, OS_LOG_TYPE_DEFAULT))
    {
      v447 = CFAbsoluteTimeGetCurrent() - v444;
      *(_DWORD *)v545 = 134218496;
      *(_QWORD *)&v545[4] = v25;
      *(_WORD *)&v545[12] = 1024;
      *(_DWORD *)&v545[14] = v35;
      *(_WORD *)&v545[18] = 2048;
      *(double *)&v545[20] = v447;
      _os_log_impl(&dword_1B8270000, v446, OS_LOG_TYPE_DEFAULT, "FindTermIDsContext %p fuzzy sort %d flat pages: %f seconds", v545, 0x1Cu);
    }
    *__error() = v445;
    v448 = v35 - 1;
    if ((int)v35 - 1 >= -1)
      v448 = -1;
    v449 = v448 + 1;
    while (1)
    {
      v450 = v35;
      LODWORD(v35) = v35 - 1;
      if ((v35 & 0x80000000) != 0)
        break;
      v451 = *(_QWORD *)(*(_QWORD *)(v25 + 40) + 8 * v35);
      if ((*(_BYTE *)v451 & 3) == 0 || *(float *)(v451 + 8) >= 0.0)
        goto LABEL_622;
    }
    v450 = v449;
LABEL_622:
    if (dword_1EF19FC90 >= 5)
    {
      v478 = *__error();
      v479 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v479, OS_LOG_TYPE_DEFAULT))
      {
        v480 = *(_DWORD *)(v25 + 1184);
        *(_DWORD *)v545 = 134218496;
        *(_QWORD *)&v545[4] = v25;
        *(_WORD *)&v545[12] = 1024;
        *(_DWORD *)&v545[14] = v480;
        *(_WORD *)&v545[18] = 1024;
        *(_DWORD *)&v545[20] = v450;
        _os_log_impl(&dword_1B8270000, v479, OS_LOG_TYPE_DEFAULT, "FindTermIDsContext %p, fuzzy bc: %d -> %d", v545, 0x18u);
      }
      *__error() = v478;
      v29 = v513;
    }
    *(_DWORD *)(v25 + 1184) = v450;
  }
LABEL_515:
  if (!*v510)
  {
    v382 = *(unsigned int *)(v25 + 1184);
    if ((_DWORD)v382)
    {
      v384 = CFAbsoluteTimeGetCurrent();
      LOBYTE(v540[0]) = 0;
      *(_DWORD *)(v25 + 1280) = 0;
      *(_QWORD *)v545 = 0;
      *(_QWORD *)&v545[8] = v545;
      *(_QWORD *)&v545[16] = 0x2000000000;
      v545[24] = 0;
      if ((_DWORD)v382 != 1 && (v499 & 1) == 0)
      {
        v526[0] = MEMORY[0x1E0C809B0];
        v526[1] = 0x40000000;
        v526[2] = ___bt_findBulk_block_invoke;
        v526[3] = &__block_descriptor_tmp_79;
        v526[4] = v25;
        v527 = v382;
        v506 = v526;
        v385 = 1;
        goto LABEL_527;
      }
      v506 = 0;
      v386 = (2 * gCPUCount);
      if (!v499)
        v386 = 1;
      if (v386 >= v382)
        v385 = v382;
      else
        v385 = v386;
      if ((_DWORD)v382 == 1)
      {
        v387 = 1;
        v388 = 1;
      }
      else
      {
LABEL_527:
        v387 = v382;
        v388 = (v385 + v382 - 1) / v385;
      }
      v509 = &v484;
      MEMORY[0x1E0C80A78](v383);
      v389 = (char *)&v484 - ((8 * v385 + 15) & 0xFFFFFFFF0);
      bzero(v389, 8 * v385);
      MEMORY[0x1E0C80A78](v390);
      bzero(v389, 8 * v385);
      v393 = (int *)&unk_1EF19F000;
      if (v385)
      {
        v394 = 0;
        v395 = 0;
        *(_QWORD *)&v392 = 134218496;
        do
        {
          *(_QWORD *)&v389[8 * v394] = v395;
          v396 = v395 + v388;
          if (v395 + v388 >= v387)
            v396 = v387;
          if (v387 <= v396 + 1)
            v397 = v396 + 1;
          else
            v397 = v387;
          v395 = v397 - 1;
          while (v395 != v396)
          {
            v398 = v396 + 1;
            v399 = **(_DWORD **)(*(_QWORD *)(v25 + 40) + 8 * v396 + 8) ^ **(_DWORD **)(*(_QWORD *)(v25 + 40) + 8 * v396);
            ++v396;
            if (v399 >= 8)
            {
              v395 = v398 - 1;
              break;
            }
          }
          *(_QWORD *)&v389[8 * v394] = v395;
          if (v393[804] >= 5)
          {
            v514 = v392;
            LODWORD(v505) = *__error();
            v504 = _SILogForLogForCategory(1);
            if (os_log_type_enabled((os_log_t)v504, OS_LOG_TYPE_DEFAULT))
            {
              v400 = *(_QWORD *)&v389[8 * v394];
              LODWORD(v541[0]) = v514;
              *(_QWORD *)((char *)v541 + 4) = v394;
              WORD6(v541[0]) = 2048;
              *(_QWORD *)((char *)v541 + 14) = v400;
              WORD3(v541[1]) = 2048;
              *((_QWORD *)&v541[1] + 1) = v400;
              _os_log_impl(&dword_1B8270000, (os_log_t)v504, OS_LOG_TYPE_DEFAULT, "Index %lu starting at %lu ending at %lu", (uint8_t *)v541, 0x20u);
            }
            v391 = __error();
            *v391 = (int)v505;
            v393 = (_DWORD *)&unk_1EF19F000;
            v392 = v514;
          }
          ++v394;
        }
        while (v394 != v385);
      }
      MEMORY[0x1E0C80A78](v391);
      v402 = (char *)&v484 - v385 * (unint64_t)v401;
      bzero(v402, v403);
      v515[0] = MEMORY[0x1E0C809B0];
      v515[1] = 0x40000000;
      v515[2] = ___bt_findBulk_block_invoke_80;
      v515[3] = &unk_1E6E2EF28;
      v515[6] = v545;
      v516 = (char *)&v484 - ((8 * v385 + 15) & 0xFFFFFFFF0);
      v517 = v402;
      v518 = v25;
      v519 = v511;
      v520 = v516;
      v521 = v501;
      v522 = v510;
      v523 = v382;
      v404 = v512;
      v524 = v512;
      v525 = v502;
      v515[4] = v500;
      v515[5] = v506;
      dispatch_apply(v385, 0, v515);
      v405 = &unk_1EF19F000;
      v29 = v513;
      if (v385)
      {
        v406 = *(_QWORD *)(v25 + 1160);
        if (v406)
        {
          v407 = 0;
          v408 = 8 * v404;
          *(_QWORD *)&v514 = v402;
          while (1)
          {
            *(_DWORD *)(v25 + 1280) += *(_DWORD *)&v402[1296 * v407 + 1280];
            if (v406)
            {
              if (v404)
              {
                v409 = 0;
                v410 = v514 + 1296 * v407;
                v411 = (_QWORD *)(v410 + 1160);
                v412 = (_QWORD *)(v410 + 1168);
                do
                {
                  if (*v411)
                  {
                    v420 = *(_QWORD *)(*v411 + v409);
                    if (v420)
                    {
                      if (!*(_BYTE *)(*(_QWORD *)&v545[8] + 24))
                      {
                        v421 = *(_QWORD *)(v420 + 32);
                        if (v421)
                        {
                          v422 = *(_QWORD *)(*(_QWORD *)(v25 + 1160) + v409);
                          if (*(_BYTE *)v420)
                          {
                            oq_force_meta(*(_QWORD *)(*(_QWORD *)(v25 + 1160) + v409));
                            v421 = *(_QWORD *)(v420 + 32);
                          }
                          v424 = *(_QWORD *)(v422 + 24);
                          v423 = *(_QWORD *)(v422 + 32);
                          v425 = v421 + v423;
                          if (*(_BYTE *)v422)
                          {
                            if (v424 < v421 + v423)
                            {
                              *(_QWORD *)(v422 + 24) = v425;
                              v426 = (char *)malloc_type_realloc(*(void **)(v422 + 16), 16 * v425, 0x1000040D9A13B51uLL);
                              *(_QWORD *)(v422 + 16) = v426;
                              v423 = *(_QWORD *)(v422 + 32);
                              v421 = *(_QWORD *)(v420 + 32);
                            }
                            else
                            {
                              v426 = *(char **)(v422 + 16);
                            }
                            v427 = *(const void **)(v420 + 16);
                            v428 = 16 * v421;
                            v429 = &v426[16 * v423];
                          }
                          else
                          {
                            if (v424 < v421 + v423)
                            {
                              *(_QWORD *)(v422 + 24) = v425;
                              v430 = (char *)malloc_type_realloc(*(void **)(v422 + 16), 8 * v425, 0x100004000313F17uLL);
                              *(_QWORD *)(v422 + 16) = v430;
                              v423 = *(_QWORD *)(v422 + 32);
                              v421 = *(_QWORD *)(v420 + 32);
                            }
                            else
                            {
                              v430 = *(char **)(v422 + 16);
                            }
                            v427 = *(const void **)(v420 + 16);
                            v428 = 8 * v421;
                            v429 = &v430[8 * v423];
                          }
                          memcpy(v429, v427, v428);
                          *(_QWORD *)(v422 + 32) += *(_QWORD *)(v420 + 32);
                          v420 = *(_QWORD *)(*v411 + v409);
                        }
                      }
                      free(*(void **)(v420 + 16));
                      free(*(void **)(*v411 + v409));
                    }
                  }
                  v431 = *(_QWORD *)(v25 + 1168);
                  if (v431)
                  {
                    v432 = *(_QWORD *)(v431 + v409);
                    if (v432)
                    {
                      if (*v412)
                      {
                        v419 = *(_QWORD *)(*v412 + v409);
                        if (v419)
                        {
                          if (!*(_BYTE *)(*(_QWORD *)&v545[8] + 24))
                          {
                            v415 = *(_QWORD *)(v419 + 32);
                            if (v415)
                            {
                              if (*(_BYTE *)v419)
                              {
                                oq_force_meta(v432);
                                v415 = *(_QWORD *)(v419 + 32);
                              }
                              v433 = *(_QWORD *)(v432 + 24);
                              v414 = *(_QWORD *)(v432 + 32);
                              v434 = v415 + v414;
                              if (*(_BYTE *)v432)
                              {
                                if (v433 < v415 + v414)
                                {
                                  *(_QWORD *)(v432 + 24) = v434;
                                  v413 = (char *)malloc_type_realloc(*(void **)(v432 + 16), 16 * v434, 0x1000040D9A13B51uLL);
                                  *(_QWORD *)(v432 + 16) = v413;
                                  v414 = *(_QWORD *)(v432 + 32);
                                  v415 = *(_QWORD *)(v419 + 32);
                                }
                                else
                                {
                                  v413 = *(char **)(v432 + 16);
                                }
                                v416 = *(const void **)(v419 + 16);
                                v417 = 16 * v415;
                                v418 = &v413[16 * v414];
                              }
                              else
                              {
                                if (v433 < v415 + v414)
                                {
                                  *(_QWORD *)(v432 + 24) = v434;
                                  v435 = (char *)malloc_type_realloc(*(void **)(v432 + 16), 8 * v434, 0x100004000313F17uLL);
                                  *(_QWORD *)(v432 + 16) = v435;
                                  v414 = *(_QWORD *)(v432 + 32);
                                  v415 = *(_QWORD *)(v419 + 32);
                                }
                                else
                                {
                                  v435 = *(char **)(v432 + 16);
                                }
                                v416 = *(const void **)(v419 + 16);
                                v417 = 8 * v415;
                                v418 = &v435[8 * v414];
                              }
                              memcpy(v418, v416, v417);
                              *(_QWORD *)(v432 + 32) += *(_QWORD *)(v419 + 32);
                              v419 = *(_QWORD *)(*v412 + v409);
                            }
                          }
                          free(*(void **)(v419 + 16));
                          free(*(void **)(*v412 + v409));
                        }
                      }
                    }
                  }
                  v409 += 8;
                }
                while (v408 != v409);
              }
              v402 = (char *)v514;
              v436 = v514 + 1296 * v407;
              free(*(void **)(v436 + 1160));
              free(*(void **)(v436 + 1168));
              v29 = v513;
              v404 = v512;
              v405 = (_DWORD *)&unk_1EF19F000;
            }
            if (++v407 == v385)
              break;
            v406 = *(_QWORD *)(v25 + 1160);
          }
        }
        else
        {
          v439 = *(_DWORD *)(v25 + 1280);
          v440 = v402 + 1280;
          do
          {
            v439 += *v440;
            *(_DWORD *)(v25 + 1280) = v439;
            v440 += 324;
            --v385;
          }
          while (v385);
        }
      }
      LOBYTE(v540[0]) = *(_BYTE *)(*(_QWORD *)&v545[8] + 24) ^ 1;
      if (LOBYTE(v540[0]))
        v441 = v405[804] <= 4;
      else
        v441 = 1;
      if (!v441)
      {
        v457 = *__error();
        v458 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v458, OS_LOG_TYPE_DEFAULT))
        {
          v460 = *(_DWORD *)(v25 + 1280);
          LODWORD(v541[0]) = 67109376;
          DWORD1(v541[0]) = v512;
          WORD4(v541[0]) = 1024;
          *(_DWORD *)((char *)v541 + 10) = v460;
          _os_log_impl(&dword_1B8270000, v458, OS_LOG_TYPE_DEFAULT, "node count: %d, compare count %d", (uint8_t *)v541, 0xEu);
        }
        *__error() = v457;
        v29 = v513;
        if (dword_1EF19FC90 >= 5)
        {
          v461 = *__error();
          v462 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v462, OS_LOG_TYPE_DEFAULT))
          {
            v463 = CFAbsoluteTimeGetCurrent() - v384;
            LODWORD(v541[0]) = 134217984;
            *(double *)((char *)v541 + 4) = v463;
            _os_log_impl(&dword_1B8270000, v462, OS_LOG_TYPE_DEFAULT, "resolve flat page terms: %f seconds", (uint8_t *)v541, 0xCu);
          }
          *__error() = v461;
          v29 = v513;
        }
      }
      _Block_object_dispose(v545, 8);
    }
  }
  v442 = v508 != 0;
  CIOnThreadCleanUpPop(v29);
  CICleanUpReset(v29, v507);
  return v442;
}

uint64_t CICleanUpReset(uint64_t result, unint64_t a2)
{
  _DWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  char *v8;
  char *v9;
  const char *v10;
  uint64_t v11;

  v2 = &threadData[18 * result];
  v4 = v2[8];
  v3 = v2 + 8;
  v5 = v4 > a2;
  if (v4 < a2)
  {
    v8 = __si_assert_copy_extra_268();
    v9 = v8;
    v10 = "";
    if (v8)
      v10 = v8;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1575, "td->cleanUpCount >= position", v10);
    free(v9);
    if (__valid_fs(-1))
      v11 = 2989;
    else
      v11 = 3072;
    *(_DWORD *)v11 = -559038737;
    abort();
  }
  if (v5)
  {
    v6 = a2;
    v7 = result;
    do
      result = CICleanUpPop(v7);
    while (*v3 > v6);
  }
  return result;
}

uint64_t CICleanUpPop(uint64_t result)
{
  _DWORD *v1;
  int v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (**v10)(_QWORD);
  uint64_t (*v11)(_QWORD);
  char *v12;
  char *v13;
  const char *v14;
  uint64_t v15;

  v1 = &threadData[18 * result];
  v4 = v1[8];
  v3 = v1 + 8;
  v2 = v4;
  if (!v4)
  {
    v12 = __si_assert_copy_extra_268();
    v13 = v12;
    v14 = "";
    if (v12)
      v14 = v12;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1544, "td->cleanUpCount", v14);
    free(v13);
    if (__valid_fs(-1))
      v15 = 2989;
    else
      v15 = 3072;
    *(_DWORD *)v15 = -559038737;
    abort();
  }
  v5 = (v2 - 1);
  *v3 = v5;
  v6 = &threadData[18 * result];
  v9 = *((_QWORD *)v6 + 6);
  v8 = (uint64_t *)(v6 + 12);
  v7 = v9;
  v10 = (uint64_t (**)(_QWORD))(v9 + 16 * v5);
  v11 = *v10;
  if (*v10)
  {
    *v10 = 0;
    result = v11(*(_QWORD *)(v7 + 16 * v5 + 8));
    v7 = *v8;
    v5 = *v3;
  }
  *(_QWORD *)(v7 + 16 * v5) = 0;
  return result;
}

double findTermIDsInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  double result;

  *(_QWORD *)(a10 + 24) = a3;
  *(_QWORD *)(a10 + 32) = a4;
  *(_QWORD *)(a10 + 8) = a1;
  *(_QWORD *)(a10 + 16) = a2;
  *(_DWORD *)(a10 + 48) = *(_DWORD *)(a1 + 4576);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a10 + 64) = (*(_DWORD *)(a1 + 144) + 1);
  *(_QWORD *)(a10 + 72) = v10;
  *(_QWORD *)(a10 + 80) = *(_QWORD *)(a1 + 392);
  LODWORD(v10) = *(_DWORD *)a1 >> 1;
  v11 = *(_DWORD *)a1 >> 3;
  v12 = (*(_DWORD *)a1 & 7) << 32;
  if ((*(_DWORD *)a1 & 3) == 1)
  {
    v12 = 0x100000000;
    v11 = *(_DWORD *)a1 >> 2;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
    v13 = v12;
  else
    v13 = 0;
  if ((*(_DWORD *)a1 & 1) != 0)
    v10 = v11;
  else
    v10 = v10;
  *(_QWORD *)(a10 + 52) = v13 | v10;
  *(_QWORD *)(a10 + 1160) = a8;
  *(_QWORD *)(a10 + 1168) = a9;
  *(_QWORD *)a10 = a5;
  *(_BYTE *)(a10 + 88) = 0;
  *(_DWORD *)(a10 + 1140) = 0;
  *(_QWORD *)(a10 + 1144) = a7;
  *(_DWORD *)(a10 + 1152) = a6;
  *(_BYTE *)(a10 + 1288) = 0;
  if (a6)
  {
    v14 = a6;
    v15 = a7 + 16;
    while ((*(_BYTE *)(v15 + 2) & 1) == 0)
    {
      v15 += 64;
      if (!--v14)
        goto LABEL_15;
    }
    *(_BYTE *)(a10 + 1288) = 1;
  }
LABEL_15:
  *(_DWORD *)(a10 + 1176) = 0;
  *(_BYTE *)(a10 + 1289) = 0;
  *(_OWORD *)(a10 + 1264) = 0u;
  *(_QWORD *)(a10 + 1208) = slab_create(248);
  *(_QWORD *)(a10 + 1180) = 1024;
  v16 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x2000uLL, 0x6085D6BuLL);
  if (!v16)
    _log_fault_for_malloc_failure();
  *(_QWORD *)(a10 + 40) = v16;
  *(_DWORD *)(a10 + 1284) = 0;
  result = 0.0;
  *(_OWORD *)(a10 + 1192) = 0u;
  return result;
}

_QWORD *slab_create(int a1)
{
  size_t *v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v6;

  v6 = 0;
  v1 = (size_t *)MEMORY[0x1E0C85AD8];
  v2 = *MEMORY[0x1E0C85AD8];
  v3 = 0;
  if (!slab_vm_allocate(&v6, *MEMORY[0x1E0C85AD8], a1))
  {
    v3 = v6;
    v4 = v6 + 3;
    *v6 = 0;
    v3[1] = v4;
    v3[2] = (char *)v3 + v2;
    madvise(v4, *v1, 3);
  }
  return v3;
}

uint64_t slab_vm_allocate(_QWORD *a1, size_t a2, int a3)
{
  int v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t *v11;
  unsigned int v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  unint64_t v18;

  if (a3 == 250)
  {
    v5 = -100663296;
    if (*MEMORY[0x1E0C85AD8] == a2)
    {
      v6 = OSAtomicDequeue(&stru_1EDBBE030, 0);
      if (!v6)
      {
LABEL_14:
        v12 = 10;
        goto LABEL_21;
      }
    }
    else
    {
      if (a2 != 0x100000)
        goto LABEL_14;
      v9 = OSAtomicDequeue(&stru_1EDBBE040, 0);
      if (!v9)
        goto LABEL_14;
      v6 = v9;
      do
        v10 = __ldaxr(qword_1EDBBE050);
      while (__stlxr(v10 - 1, qword_1EDBBE050));
    }
    *a1 = v6[1];
    OSAtomicEnqueue(&slab_cache, v6, 0);
    v11 = (unint64_t *)&unk_1EDBBE0C0;
    goto LABEL_24;
  }
  if ((a3 - 243) <= 4)
  {
    if (*MEMORY[0x1E0C85AD8] == a2)
    {
      v8 = OSAtomicDequeue(&stru_1EDBBDE20, 0);
      if (!v8)
        goto LABEL_20;
    }
    else
    {
      if (a2 != 0x100000)
        goto LABEL_20;
      v13 = OSAtomicDequeue(&stru_1EDBBDE30, 0);
      if (!v13)
        goto LABEL_20;
      v8 = v13;
      do
        v14 = __ldaxr(qword_1EDBBDE40);
      while (__stlxr(v14 - 1, qword_1EDBBDE40));
    }
    v15 = (_QWORD *)v8[1];
    *a1 = v15;
    bzero(v15, v15[1] - (_QWORD)v15);
    OSAtomicEnqueue(&slab_cache, v8, 0);
    v11 = (unint64_t *)((char *)&tag_sizes + 8 * (a3 - 240));
    goto LABEL_24;
  }
LABEL_20:
  v5 = a3 << 24;
  v12 = a3 - 240;
LABEL_21:
  v16 = 3;
  v17 = mmap(0, a2, 3, 4098, v5, 0);
  *a1 = v17;
  if (v17 != (void *)-1)
  {
    if (v12 > 0x10)
      return 0;
    v11 = (unint64_t *)((char *)&tag_sizes + 8 * v12);
    do
LABEL_24:
      v18 = __ldxr(v11);
    while (__stxr(v18 + a2, v11));
    return 0;
  }
  return v16;
}

void findTermIDsFree(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  size_t v5;
  char *v6;
  unint64_t v7;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 1192);
    if (v2)
      UInt32TrieFree(v2);
    free(*(void **)(a1 + 40));
    v3 = *(_QWORD **)(a1 + 1208);
    if (v3)
    {
      do
      {
        v4 = (_QWORD *)*v3;
        v5 = v3[2] - (_QWORD)v3;
        v6 = (char *)v3 - v3[2];
        do
          v7 = __ldxr((unint64_t *)&unk_1EDBBE0B0);
        while (__stxr((unint64_t)&v6[v7], (unint64_t *)&unk_1EDBBE0B0));
        munmap(v3, v5);
        v3 = v4;
      }
      while (v4);
    }
    free((void *)a1);
  }
}

void storage_reader_free(_QWORD *a1)
{
  unsigned int *v2;

  if (a1)
  {
    v2 = (unsigned int *)a1[1];
    if (v2)
      _release_read_window(&availableReaders, v2);
    free(a1);
  }
}

void PQueue_bulk_TermIdQueue_free(void **a1)
{
  if (a1)
  {
    free(*a1);
    free(a1);
  }
}

void trie_level_list_destroy(int *a1)
{
  uint64_t v2;
  uint64_t v3;

  CFRelease(*((CFTypeRef *)a1 + 2));
  if (*a1 >= 1)
  {
    v2 = 0;
    v3 = 8;
    do
    {
      free(*(void **)(*((_QWORD *)a1 + 1) + v3));
      ++v2;
      v3 += 40;
    }
    while (v2 < *a1);
  }
  free(*((void **)a1 + 1));
}

uint64_t _trie_resolve_string(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int8x8_t *v15;
  unint64_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  uint8x8_t v19;
  uint8x8_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;

  v6 = a4;
  v7 = a2;
  a2 = a2;
  v8 = HIDWORD(v7);
  if ((int)a4 < 1)
  {
LABEL_29:
    *a5 = a2;
    a5[1] = v8;
    return v6;
  }
  v11 = 0;
  while (v8 == 3)
  {
    v21 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                          + 1028 * a2
                          + 4 * *((unsigned __int8 *)&tcm + *(unsigned __int8 *)(a3 + v11))
                          + 4);
LABEL_14:
    v22 = v21 >> 1;
    v23 = v21 >> 3;
    v24 = v21 & 7;
    if ((v21 & 3) == 1)
    {
      v24 = 1;
      v23 = v21 >> 2;
    }
    v25 = (v21 & 1) == 0;
    if ((v21 & 1) != 0)
      v8 = v24;
    else
      v8 = 0;
    if (v25)
      a2 = v22;
    else
      a2 = v23;
    if (!a2)
      return 0;
    if (v6 == ++v11)
      goto LABEL_29;
  }
  if (v8 == 1)
  {
    v12 = mgetBase(a1, a2);
    v13 = *((unsigned __int8 *)&tcm + *(unsigned __int8 *)(a3 + v11));
    if (((*(_DWORD *)(v12 + ((v13 >> 3) & 0x1C) + 4) >> v13) & 1) == 0)
      return 0;
    v14 = 0;
    v15 = (int8x8_t *)(v12 + 4);
    v16 = v13 >> 6;
    if ((v13 >> 6) != 1)
    {
      if ((_DWORD)v16 != 2)
      {
        if ((_DWORD)v16 != 3)
        {
LABEL_12:
          v20 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v15[v16] & ~(-1 << v13)));
          v20.i16[0] = vaddlv_u8(v20);
          v21 = *(unsigned int *)(v12 + 4 * (v20.u32[0] + v14) + 38);
          goto LABEL_14;
        }
        v17 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v12 + 20));
        v17.i16[0] = vaddlv_u8(v17);
        v14 = v17.u32[0];
      }
      v18 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v12 + 12));
      v18.i16[0] = vaddlv_u8(v18);
      v14 += v18.u32[0];
    }
    v19 = (uint8x8_t)vcnt_s8(*v15);
    v19.i16[0] = vaddlv_u8(v19);
    v14 += v19.u32[0];
    goto LABEL_12;
  }
  v6 = 0;
  if (!v8 && a2)
  {
    LODWORD(v8) = 0;
    v6 = v11;
    goto LABEL_29;
  }
  return v6;
}

uint64_t mgetBase(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  char *v5;
  char *v6;
  const char *v7;
  char *v8;
  char *v9;
  const char *v10;

  if (a2 >> 30)
  {
    v5 = __si_assert_copy_extra_1644(0);
    v6 = v5;
    v7 = "";
    if (v5)
      v7 = v5;
    __message_assert("%s:%u: failed assertion '%s' %s ", "BurstTrie-Internal.h", 82, "offset<=0x3FFFFFFF", v7);
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v3 = 4 * a2;
  if (4 * a2 >= *(_QWORD *)(a1 + 40))
  {
    v8 = __si_assert_copy_extra_1644(*(_DWORD **)(a1 + 112));
    v9 = v8;
    v10 = "";
    if (v8)
      v10 = v8;
    __message_assert("%s:%u: failed assertion '%s' %s offset %ld past bounds %ld %ld", "BurstTrie-Internal.h", 84, "offset<t->bases.size", v10, v3, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    free(v9);
    if (__valid_fsp(*(_DWORD **)(a1 + 112)))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return *(_QWORD *)(a1 + 16) + v3;
}

void UInt32TrieFree(uint64_t a1)
{
  int v2;
  int v3;
  unsigned int v4;
  int8x8_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;

  if (*(unsigned __int8 *)(a1 + 37) == 255)
    v2 = 256;
  else
    v2 = *(unsigned __int8 *)(a1 + 36);
  v3 = 0;
  v4 = 0;
  v5 = (int8x8_t *)(a1 + 4);
  while (((*(_DWORD *)(a1 + 4 * (v4 >> 5) + 4) >> v4) & 1) == 0)
  {
LABEL_15:
    if (++v4 == 256)
      goto LABEL_16;
  }
  v6 = 0;
  v7 = v4 >> 6;
  if (v4 >> 6 != 1)
  {
    if (v7 != 2)
    {
      if (v7 != 3)
        goto LABEL_12;
      v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(a1 + 20));
      v8.i16[0] = vaddlv_u8(v8);
      v6 = v8.u32[0];
    }
    v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(a1 + 12));
    v9.i16[0] = vaddlv_u8(v9);
    v6 += v9.u32[0];
  }
  v10 = (uint8x8_t)vcnt_s8(*v5);
  v10.i16[0] = vaddlv_u8(v10);
  v6 += v10.u32[0];
LABEL_12:
  v11 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v5[v7] & ~(-1 << v4)));
  v11.i16[0] = vaddlv_u8(v11);
  if ((*(_QWORD *)(a1 + 8 * (v11.u32[0] + v6) + 40) & 1) == 0)
    UInt32TrieFree();
  if (++v3 != v2)
    goto LABEL_15;
LABEL_16:
  if (v2 != 256)
    free((void *)a1);
}

unint64_t _SISetMemoryPressureStatus(unint64_t result)
{
  unint64_t v1;
  int v2;
  NSObject *v3;
  os_log_type_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (result >= 2)
  {
    v1 = result;
    v2 = *__error();
    v3 = _SILogForLogForCategory(10);
    v4 = dword_1EF19FCB4 < 3;
    if (os_log_type_enabled(v3, (os_log_type_t)(dword_1EF19FCB4 < 3)))
    {
      v5 = 134217984;
      v6 = v1;
      _os_log_impl(&dword_1B8270000, v3, v4, "*warn* Received memory pressure status %lu", (uint8_t *)&v5, 0xCu);
    }
    *__error() = v2;
    if (sdbLargeCacheArray)
      cache_remove_all((cache_t *)sdbLargeCacheArray);
    CIPurgeTokenizers();
    return SILanguageModelPurge();
  }
  return result;
}

void si_sync_index_delayed0(uint64_t *a1, int a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = a1;
  if (!a2)
  {
    v4 = *a1;
    if (!*(_BYTE *)(*a1 + 2437) && !a1[8])
    {
      attachJournal((char *)a1);
      v4 = *v3;
    }
    si_enqueue_barrier_with_qos(*(_QWORD *)(v4 + 1152), 9, (uint64_t)si_sync_index_delayed1, (uint64_t)v3);
    v3 = 0;
  }
  si_sync_ctx_free((uint64_t)v3, a2 != 0);
}

char *getJournalFd(uint64_t a1, int a2, int a3)
{
  char *v6;
  int v7;
  int v8;
  int v9;
  int i;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  NSObject *v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 v21;
  _QWORD *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v27;
  uint64_t v28;
  int *v29;
  char *v30;
  int *v31;
  char *v32;
  char *v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  int *v37;
  char *v38;
  char *v39;
  char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  stat v45;
  char __str[32];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _BYTE v59[31];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 2072))
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(*(_QWORD *)(a1 + 1096) + 16));
  if (a2)
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1632));
  v6 = *(char **)(a1 + 2320);
  if (v6 || (a3 & 1) != 0)
  {
LABEL_43:
    if (a3)
    {
      if (*(_BYTE *)(a1 + 2072))
      {
        v23 = *(unsigned int **)(a1 + 2104);
        if (v23)
        {
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
            _si_mobile_journal_finalize((uint64_t)v23, 1);
        }
        *(_QWORD *)(a1 + 2104) = 0;
      }
      *(_QWORD *)(a1 + 2320) = 0;
    }
    if (!a2)
      return v6;
    goto LABEL_52;
  }
  v7 = *(_DWORD *)(a1 + 32);
  if (v7 == -1)
  {
    v39 = __si_assert_copy_extra_521(-1);
    v40 = v39;
    v41 = "";
    if (v39)
      v41 = v39;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 3462, "indexFd != -1", v41);
    free(v40);
    if (__valid_fs(-1))
      v42 = 2989;
    else
      v42 = 3072;
    *(_DWORD *)v42 = -559038737;
    abort();
  }
  if (!*(_DWORD *)(a1 + 6964))
    goto LABEL_26;
  v8 = openat(*(_DWORD *)(a1 + 32), "assertedJournalAttr.1", 536870922);
  if (v8 == -1)
  {
    v14 = *__error();
    v15 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v31 = __error();
      v32 = strerror(*v31);
      *(_DWORD *)__str = 136315650;
      *(_QWORD *)&__str[4] = "getJournalFd";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 3473;
      *(_WORD *)&__str[18] = 2080;
      *(_QWORD *)&__str[20] = v32;
      _os_log_error_impl(&dword_1B8270000, v15, OS_LOG_TYPE_ERROR, "%s:%d: Unable to open asserted jfile: %s", (uint8_t *)__str, 0x1Cu);
    }
    *__error() = v14;
    goto LABEL_23;
  }
  v9 = v8;
  v6 = (char *)fd_create_protected(*(_DWORD *)(a1 + 32), "assertedJournalAttr.1", 536870922, 2u);
  close(v9);
  if (!v6)
  {
LABEL_23:
    v16 = *__error();
    v17 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v29 = __error();
      v30 = strerror(*v29);
      *(_DWORD *)__str = 136315650;
      *(_QWORD *)&__str[4] = "getJournalFd";
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = 3494;
      *(_WORD *)&__str[18] = 2080;
      *(_QWORD *)&__str[20] = v30;
      _os_log_error_impl(&dword_1B8270000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Unable to open asserted journal file: %s", (uint8_t *)__str, 0x1Cu);
    }
    *__error() = v16;
    goto LABEL_26;
  }
  v44 = 0;
  if ((fd_setDir(*(unsigned int *)(a1 + 32), (int *)&v44) & 1) == 0)
    goto LABEL_56;
  v58 = 0u;
  memset(v59, 0, sizeof(v59));
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v47 = 0u;
  memset(__str, 0, sizeof(__str));
  for (i = *(_DWORD *)(a1 + 2344); i != 0x7FFFFFFF; *(_DWORD *)(a1 + 2344) = i)
  {
    snprintf(__str, 0xFFuLL, "%s%d", "journalAttr.", i);
    memset(&v45, 0, sizeof(v45));
    if (stat(__str, &v45))
      break;
    i = *(_DWORD *)(a1 + 2344) + 1;
  }
  if (!fd_rename((uint64_t)v6, __str))
  {
    v27 = v44;
    MEMORY[0x1BCCB1484](v44);
    if ((v27 & 0x80000000) == 0)
      close(v27);
LABEL_56:
    *(_QWORD *)(a1 + 2320) = v6;
    v28 = (uint64_t)v6;
    if (*(int *)(a1 + 6960) <= 0)
    {
      SIActivityJournalNewJournal((os_unfair_lock_s *)(a1 + 2192), (uint64_t)v6);
      v28 = *(_QWORD *)(a1 + 2320);
    }
    _fd_acquire_fd(v28, __str);
    ++*(_DWORD *)(a1 + 2344);
    if (!a2)
      return v6;
LABEL_52:
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1632));
    return v6;
  }
  v11 = *__error();
  v12 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v37 = __error();
    v38 = strerror(*v37);
    v45.st_dev = 136315906;
    *(_QWORD *)&v45.st_mode = "getJournalFd";
    WORD2(v45.st_ino) = 1024;
    *(_DWORD *)((char *)&v45.st_ino + 6) = 3488;
    HIWORD(v45.st_uid) = 2080;
    *(_QWORD *)&v45.st_gid = __str;
    *((_WORD *)&v45.st_rdev + 2) = 2080;
    *(_QWORD *)((char *)&v45.st_rdev + 6) = v38;
    _os_log_error_impl(&dword_1B8270000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Unable to rename asserted journal file to: %s (%s)", (uint8_t *)&v45, 0x26u);
  }
  *__error() = v11;
  fd_release(v6);
  v13 = v44;
  MEMORY[0x1BCCB1484](v44);
  if ((v13 & 0x80000000) == 0)
    close(v13);
LABEL_26:
  v18 = *(_DWORD *)(a1 + 2344);
  if (v18 == 0x7FFFFFFF)
  {
LABEL_60:
    v33 = __si_assert_copy_extra_521(-1);
    v34 = v33;
    v35 = "";
    if (v33)
      v35 = v33;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 3514, "syncCount < 2147483647", v35);
    free(v34);
    if (__valid_fs(-1))
      v36 = 2989;
    else
      v36 = 3072;
    *(_DWORD *)v36 = -559038737;
    abort();
  }
  while (1)
  {
    v19 = *(_DWORD *)(a1 + 6960);
    if (v19 >= 1)
      break;
    v58 = 0uLL;
    memset(v59, 0, sizeof(v59));
    v56 = 0uLL;
    v57 = 0uLL;
    v54 = 0uLL;
    v55 = 0uLL;
    v52 = 0uLL;
    v53 = 0uLL;
    v50 = 0uLL;
    v51 = 0uLL;
    v48 = 0uLL;
    v49 = 0uLL;
    v47 = 0uLL;
    memset(__str, 0, sizeof(__str));
    snprintf(__str, 0xFFuLL, "%s%d", "journalAttr.", v18);
    if (*(_BYTE *)(a1 + 6944) || (*(_DWORD *)(a1 + 60) & 0xFFFFFFFE) == 2)
    {
      v20 = v7;
      v21 = 2;
    }
    else
    {
      v20 = v7;
      v21 = 0;
    }
    v22 = fd_create_protected(v20, __str, 536873482, v21);
    if (v22)
    {
      ++*(_DWORD *)(a1 + 2344);
      goto LABEL_40;
    }
    if (*__error() != 17)
      goto LABEL_37;
    v18 = *(_DWORD *)(a1 + 2344) + 1;
    *(_DWORD *)(a1 + 2344) = v18;
    if (v18 == 0x7FFFFFFF)
      goto LABEL_60;
  }
  v58 = 0uLL;
  memset(v59, 0, sizeof(v59));
  v56 = 0uLL;
  v57 = 0uLL;
  v54 = 0uLL;
  v55 = 0uLL;
  v52 = 0uLL;
  v53 = 0uLL;
  v50 = 0uLL;
  v51 = 0uLL;
  v48 = 0uLL;
  v49 = 0uLL;
  v47 = 0uLL;
  memset(__str, 0, sizeof(__str));
  snprintf(__str, 0xFFuLL, "%s%d", "journalAttr.", v19);
  v22 = fd_create_protected(v7, __str, 536870922, 2u);
  if (v22)
  {
LABEL_40:
    *(_QWORD *)(a1 + 2320) = v22;
    if (*(int *)(a1 + 6960) <= 0)
    {
      SIActivityJournalNewJournal((os_unfair_lock_s *)(a1 + 2192), (uint64_t)v22);
      v22 = *(_QWORD **)(a1 + 2320);
    }
    v43 = 0;
    _fd_acquire_fd((uint64_t)v22, &v43);
    v6 = *(char **)(a1 + 2320);
    goto LABEL_43;
  }
LABEL_37:
  v6 = 0;
  if (a2)
    goto LABEL_52;
  return v6;
}

void si_scheduler_suspend(uint64_t a1)
{
  int v2;
  uint64_t *v3;
  int v4;
  uint64_t *v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int v8;
  NSObject *v9;
  uint64_t *v10;
  qos_class_t v11;
  qos_class_t v12;
  char *v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  timespec v17;
  uint64_t v18;
  timeval block;
  void (*v20)(uint64_t);
  void *v21;
  uint64_t v22;

  if (a1)
  {
    v18 = 0;
    pthread_mutex_lock(*(pthread_mutex_t **)(a1 + 8));
    v2 = *(_DWORD *)(a1 + 100);
    if (v2)
    {
      *(_DWORD *)(a1 + 100) = v2 + 1;
    }
    else
    {
      v3 = *(uint64_t **)a1;
      v4 = *(_DWORD *)(a1 + 104);
      *(_DWORD *)(a1 + 104) = v4 + 1;
      if (v3)
      {
        v5 = v3;
        while (!*((_DWORD *)v5 + 25))
        {
          v5 = (uint64_t *)*v5;
          if (!v5)
            goto LABEL_8;
        }
        si_scheduler_do_suspend(a1, &v18);
      }
      else
      {
LABEL_8:
        if (*(_QWORD *)(a1 + 120))
          v6 = 0;
        else
          v6 = v4 == 0;
        if (v6)
        {
          v7 = (unsigned int *)(a1 + 80);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
          v9 = *(NSObject **)(a1 + 136);
          block.tv_sec = MEMORY[0x1E0C809B0];
          *(_QWORD *)&block.tv_usec = 0x40000000;
          v20 = ___scheduler_suspension_locked_block_invoke;
          v21 = &__block_descriptor_tmp_64;
          v22 = a1;
          dispatch_barrier_async(v9, &block);
          goto LABEL_17;
        }
        while (!v3)
        {
LABEL_22:
          block.tv_sec = 0;
          *(_QWORD *)&block.tv_usec = 0;
          v17.tv_sec = 0;
          v17.tv_nsec = 0;
          gettimeofday(&block, 0);
          v17.tv_sec = block.tv_sec + 1;
          v17.tv_nsec = 0;
          pthread_cond_timedwait(*(pthread_cond_t **)(a1 + 16), *(pthread_mutex_t **)(a1 + 8), &v17);
LABEL_17:
          if (*(_DWORD *)(a1 + 100))
            goto LABEL_24;
        }
        v10 = v3;
        while (!*((_DWORD *)v10 + 25))
        {
          v10 = (uint64_t *)*v10;
          if (!v10)
            goto LABEL_22;
        }
        si_scheduler_do_suspend(a1, &v18);
LABEL_24:
        v11 = qos_class_self();
        v12 = *(_DWORD *)(a1 + 168);
        if (v11 > v12)
          v12 = v11;
        *(_DWORD *)(a1 + 168) = v12;
      }
    }
    if (!*(_QWORD *)(a1 + 160))
      *(_QWORD *)(a1 + 160) = pthread_self();
    *(_QWORD *)(a1 + 144) = 0;
    *(_DWORD *)(a1 + 152) = 0;
    if (!*(_DWORD *)(a1 + 100))
    {
      v13 = __si_assert_copy_extra_521(-1);
      v14 = v13;
      v15 = "";
      if (v13)
        v15 = v13;
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIScheduler.c", 1454, "scheduler->suspended", v15);
      free(v14);
      if (__valid_fs(-1))
        v16 = 2989;
      else
        v16 = 3072;
      *(_DWORD *)v16 = -559038737;
      abort();
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    si_scheduler_trigger_tokens(v18);
  }
}

void work_fun(char *a1)
{
  int v2;
  int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (dword_1EF19FC98 >= 5)
  {
    v2 = *(_DWORD *)(*((_QWORD *)a1 + 1) + 188);
    v3 = *__error();
    v4 = _SILogForLogForCategory(3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(*(_QWORD *)a1 + 64);
      v6 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 64);
      v7[0] = 67109634;
      v7[1] = v2;
      v8 = 2080;
      v9 = v5;
      v10 = 2080;
      v11 = v6;
      _os_log_impl(&dword_1B8270000, v4, OS_LOG_TYPE_DEFAULT, "work_fun pc_priority %u: (%s, %s)", (uint8_t *)v7, 0x1Cu);
    }
    *__error() = v3;
  }
  work_fun_inner(a1);
}

void si_scheduler_trigger_tokens(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = *(_QWORD *)(v1 + 16);
      si_enqueue_barrier(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
      *(_QWORD *)(v1 + 32) = 0;
      *(_QWORD *)(v1 + 40) = 0;
      release_token((unsigned int *)v1);
      v1 = v2;
    }
    while (v2);
  }
}

size_t set_crash_info(const char *a1)
{
  size_t result;
  char *v3;

  result = (size_t)pthread_getspecific(__THREAD_STR_DATA_KEY);
  v3 = (char *)result;
  if (result)
  {
    if (!a1)
      return result;
    return strlcpy(v3, a1, 0x80uLL);
  }
  result = (size_t)malloc_type_malloc(0x80uLL, 0x2AA5B6DCuLL);
  if (result)
  {
    v3 = (char *)result;
    *(_BYTE *)result = 0;
    result = pthread_setspecific(__THREAD_STR_DATA_KEY, (const void *)result);
    if (a1)
      return strlcpy(v3, a1, 0x80uLL);
  }
  return result;
}

void runLoop(uint64_t a1, void (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  pthread_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  pthread_t v15;

  v6 = pthread_self();
  v7 = *(NSObject **)(a1 + 32);
  v8 = MEMORY[0x1E0C809B0];
  v10 = MEMORY[0x1E0C809B0];
  v11 = 0x40000000;
  v12 = __si_scheduler_set_thread_block_invoke;
  v13 = &__block_descriptor_tmp_29_1050;
  v14 = a1;
  v15 = v6;
  dispatch_sync(v7, &v10);
  a2(a3, 0);
  v9 = *(NSObject **)(a1 + 32);
  v10 = v8;
  v11 = 0x40000000;
  v12 = __si_scheduler_set_thread_block_invoke;
  v13 = &__block_descriptor_tmp_29_1050;
  v14 = a1;
  v15 = 0;
  dispatch_sync(v9, &v10);
}

void setattr_runLoop(_QWORD *a1, void (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  pthread_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  void *v15;
  _QWORD *v16;
  pthread_t v17;

  v6 = pthread_self();
  v7 = a1[4];
  v8 = MEMORY[0x1E0C809B0];
  v12 = MEMORY[0x1E0C809B0];
  v13 = 0x40000000;
  v14 = __si_scheduler_set_thread_block_invoke;
  v15 = &__block_descriptor_tmp_29_1050;
  v16 = a1;
  v17 = v6;
  dispatch_sync(v7, &v12);
  a2(a3, 0);
  v9 = a1[4];
  v12 = v8;
  v13 = 0x40000000;
  v14 = __si_scheduler_set_thread_block_invoke;
  v15 = &__block_descriptor_tmp_29_1050;
  v16 = a1;
  v17 = 0;
  dispatch_sync(v9, &v12);
  do
  {
    v10 = (int *)a1;
    a1 = (_QWORD *)*a1;
  }
  while (a1);
  if (v10[28] <= 1)
  {
    v11 = 240;
    do
    {
      slab_cleanup((void **)v11);
      v11 = (v11 + 1);
    }
    while ((_DWORD)v11 != 255);
  }
}

void background_query_runLoop(uint64_t a1, void (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  pthread_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  pthread_t v15;

  v6 = pthread_self();
  v7 = *(NSObject **)(a1 + 32);
  v8 = MEMORY[0x1E0C809B0];
  v10 = MEMORY[0x1E0C809B0];
  v11 = 0x40000000;
  v12 = __si_scheduler_set_thread_block_invoke;
  v13 = &__block_descriptor_tmp_29_1050;
  v14 = a1;
  v15 = v6;
  dispatch_sync(v7, &v10);
  a2(a3, 0);
  v9 = *(NSObject **)(a1 + 32);
  v10 = v8;
  v11 = 0x40000000;
  v12 = __si_scheduler_set_thread_block_invoke;
  v13 = &__block_descriptor_tmp_29_1050;
  v14 = a1;
  v15 = 0;
  dispatch_sync(v9, &v10);
}

void userinitiated_query_runLoop(uint64_t a1, void (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  pthread_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  pthread_t v15;

  v6 = pthread_self();
  v7 = *(NSObject **)(a1 + 32);
  v8 = MEMORY[0x1E0C809B0];
  v10 = MEMORY[0x1E0C809B0];
  v11 = 0x40000000;
  v12 = __si_scheduler_set_thread_block_invoke;
  v13 = &__block_descriptor_tmp_29_1050;
  v14 = a1;
  v15 = v6;
  dispatch_sync(v7, &v10);
  a2(a3, 0);
  v9 = *(NSObject **)(a1 + 32);
  v10 = v8;
  v11 = 0x40000000;
  v12 = __si_scheduler_set_thread_block_invoke;
  v13 = &__block_descriptor_tmp_29_1050;
  v14 = a1;
  v15 = 0;
  dispatch_sync(v9, &v10);
}

void si_enqueue_barrier_with_qos(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD block[8];
  int v8;

  v4 = *(_QWORD **)a1;
  if (!*(_QWORD *)a1)
  {
    v5 = 0;
    if (a2)
      goto LABEL_4;
LABEL_6:
    a2 = *(unsigned __int8 *)(a1 + 24);
    goto LABEL_4;
  }
  do
  {
    v5 = v4;
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  if (!a2)
    goto LABEL_6;
LABEL_4:
  v6 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __si_enqueue_barrier_with_qos_block_invoke;
  block[3] = &__block_descriptor_tmp_2;
  block[4] = v5;
  block[5] = a1;
  v8 = a2;
  block[6] = a3;
  block[7] = a4;
  dispatch_sync(v6, block);
}

void si_sync_ctx_free(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 64))
    {
      do
        v4 = __ldaxr(journalsEnqueued);
      while (__stlxr(v4 - 1, journalsEnqueued));
      fd_release(*(char **)(a1 + 64));
    }
    v5 = *(char **)(a1 + 72);
    if (v5)
      fd_release(v5);
    si_power_info_cleanup(a1 + 104, *(_QWORD *)a1, a2);
    v6 = *(void (**)(uint64_t, uint64_t))(a1 + 40);
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      v6(v7, a2);
    }
    free((void *)a1);
  }
}

void flush_runLoop(uint64_t a1, void (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  pthread_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  pthread_t v15;

  v6 = pthread_self();
  v7 = *(NSObject **)(a1 + 32);
  v8 = MEMORY[0x1E0C809B0];
  v10 = MEMORY[0x1E0C809B0];
  v11 = 0x40000000;
  v12 = __si_scheduler_set_thread_block_invoke;
  v13 = &__block_descriptor_tmp_29_1050;
  v14 = a1;
  v15 = v6;
  dispatch_sync(v7, &v10);
  a2(a3, 0);
  v9 = *(NSObject **)(a1 + 32);
  v10 = v8;
  v11 = 0x40000000;
  v12 = __si_scheduler_set_thread_block_invoke;
  v13 = &__block_descriptor_tmp_29_1050;
  v14 = a1;
  v15 = 0;
  dispatch_sync(v9, &v10);
}

void **si_index_inactive(void **result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _BYTE *v8;
  int v9;
  int v10;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  BOOL v14;
  _BYTE *v15;
  unsigned int *v16;
  int v17;
  uint64_t v19;
  uint8_t buf[4];
  _BYTE *v21;
  _BYTE v22[1024];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v2 = (uint64_t)result;
    v3 = db_shrink_cache((uint64_t)result[148]);
    if ((_DWORD)v3)
      si_makeUnavailable(v2, v3, 0, 5, (uint64_t)"Failure in db_shrink_cache at si_index_inactivate");
    CIPurgeTokenizers();
    SILanguageModelPurge();
    _MDBundleUtilsClearCache();
    if ((*(_BYTE *)(v2 + 6584) & 0x10) == 0
      && !*(_BYTE *)(v2 + 2437)
      && *(int *)(v2 + 1484) >= 2
      && CFAbsoluteTimeGetCurrent() - *(double *)(v2 + 1464) > 300.0)
    {
      v4 = 0;
      v5 = *(_QWORD *)(v2 + 1384);
      while (v4 < *(unsigned int *)(v5 + 8))
      {
        v6 = *(_QWORD *)(*(_QWORD *)v5 + 8 * v4);
        v7 = atomic_load((unsigned int *)(v6 + 28));
        if ((v7 & 2) != 0 || (v8 = (_BYTE *)(v6 + 15163), *v8))
          v9 = 0;
        else
          v9 = v8[1229];
        ++v4;
        if (v9)
        {
          SISyncIndex(v2);
          goto LABEL_26;
        }
      }
      if (*(_DWORD *)(v2 + 1488))
      {
        bzero(v22, 0x400uLL);
        v10 = *__error();
        v11 = _SILogForLogForCategory(0);
        v12 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v11, v12))
        {
          v13 = fcntl(*(_DWORD *)(v2 + 32), 50, v22);
          if (v22[0])
            v14 = v13 < 0;
          else
            v14 = 1;
          if (v14)
            v15 = 0;
          else
            v15 = v22;
          *(_DWORD *)buf = 136315138;
          v21 = v15;
          _os_log_impl(&dword_1B8270000, v11, v12, "flushing idle index at %s.", buf, 0xCu);
        }
        *__error() = v10;
        doFastFlushIndex(v2);
        *(_DWORD *)(v2 + 1488) = 0;
      }
    }
LABEL_26:
    v16 = (unsigned int *)(v2 + 1484);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    if (v17)
    {
      if (v17 >= 1 && g_fd_list != 0)
        _fd_close_inactive(*(unsigned int *)(v2 + 32), 0, 0, *(_DWORD *)(v2 + 32) == -1);
    }
    else if ((*(_BYTE *)(v2 + 6584) & 0x10) == 0
           && !*(_BYTE *)(v2 + 2434)
           && !*(_BYTE *)(v2 + 2437)
           && !*(_BYTE *)(v2 + 2072))
    {
      *(_DWORD *)(v2 + 1488) = 1;
    }
    v19 = 240;
    do
    {
      result = slab_cleanup((void **)v19);
      v19 = (v19 + 1);
    }
    while ((_DWORD)v19 != 255);
  }
  return result;
}

void **slab_cleanup(void **result)
{
  size_t *v1;
  void **v2;
  void **v3;
  size_t *v4;
  void **v5;
  void **v6;
  void **v7;
  unint64_t v8;
  void **v9;
  unint64_t v10;

  if (((_DWORD)result - 243) > 4)
  {
    if ((_DWORD)result == 250)
    {
      v4 = (size_t *)MEMORY[0x1E0C85AD8];
      while (1)
      {
        v5 = (void **)OSAtomicDequeue(&stru_1EDBBE030, 0);
        if (!v5)
          break;
        v6 = v5;
        munmap(v5[1], *v4);
        OSAtomicEnqueue(&slab_cache, v6, 0);
      }
      while (1)
      {
        result = (void **)OSAtomicDequeue(&stru_1EDBBE040, 0);
        if (!result)
          break;
        v9 = result;
        do
          v10 = __ldaxr(qword_1EDBBE050);
        while (__stlxr(v10 - 1, qword_1EDBBE050));
        munmap(result[1], 0x100000uLL);
        OSAtomicEnqueue(&slab_cache, v9, 0);
      }
    }
  }
  else
  {
    v1 = (size_t *)MEMORY[0x1E0C85AD8];
    while (1)
    {
      v2 = (void **)OSAtomicDequeue(&stru_1EDBBDE20, 0);
      if (!v2)
        break;
      v3 = v2;
      munmap(v2[1], *v1);
      OSAtomicEnqueue(&slab_cache, v3, 0);
    }
    while (1)
    {
      result = (void **)OSAtomicDequeue(&stru_1EDBBDE30, 0);
      if (!result)
        break;
      v7 = result;
      do
        v8 = __ldaxr(qword_1EDBBDE40);
      while (__stlxr(v8 - 1, qword_1EDBBDE40));
      munmap(result[1], 0x100000uLL);
      OSAtomicEnqueue(&slab_cache, v7, 0);
    }
  }
  return result;
}

uint64_t _fd_close_inactive(uint64_t a1, const char *a2, char a3, int a4)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  char *v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t i;
  char *v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  char *v36;
  const char *v37;
  const char *v38;
  unint64_t v39;
  int v40;
  int v41;
  const char *v42;
  char v43[1024];
  uint64_t v44;

  v40 = a1;
  v41 = a4;
  v42 = a2;
  v44 = *MEMORY[0x1E0C80C00];
  if (gOpenLimit >= 0)
    v5 = gOpenLimit;
  else
    v5 = gOpenLimit + 1;
  v6 = v5 >> 1;
  if (gOpenLimit >= 2048)
    v7 = 1024;
  else
    v7 = v6;
  v8 = MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v38 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v38 - v11;
  bzero((char *)&v38 - v11, v13);
  pthread_mutex_lock(&g_fd_lock);
  v14 = (_DWORD *)g_fd_list;
  v15 = *(_QWORD *)(g_fd_list + 16);
  if (!v15)
    goto LABEL_12;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = v42;
  if (v42)
    v17 = (const char *)strlen(v42);
  v18 = *(_DWORD *)(g_fd_list + 4);
  if (v18 < *(_DWORD *)(g_fd_list + 8) && (a3 & 1) != 0)
  {
LABEL_12:
    pthread_mutex_unlock(&g_fd_lock);
    return 0;
  }
  v38 = v17;
  v39 = v7;
  bzero(v10, 4 * v7);
  v19 = 0;
  v20 = 0;
  v22 = v40;
  v21 = v41;
  while (1)
  {
    v23 = *(_DWORD *)(v16 + 40);
    if (v23 != -1
      && !*(_DWORD *)(v16 + 36)
      && v18
      && !*(_DWORD *)(v16 + 68)
      && (!v21 || (*(_WORD *)(v16 + 56) & 2) == 0))
    {
      if (v22 != -1)
      {
        if (*(_DWORD *)(v16 + 44) != v22)
          goto LABEL_16;
        if (v38)
        {
          bzero(v43, 0x400uLL);
          v24 = fd_name(v16, v43, 0x400uLL);
          if (!v24)
          {
            v14 = (_DWORD *)g_fd_list;
LABEL_35:
            v22 = v40;
            v21 = v41;
            goto LABEL_16;
          }
          v25 = strncmp(v42, v24, (size_t)v38);
          v14 = (_DWORD *)g_fd_list;
          if (v25)
            goto LABEL_35;
          v23 = *(_DWORD *)(v16 + 40);
          v22 = v40;
          v21 = v41;
        }
      }
      v26 = *(_WORD *)(v16 + 56);
      *(_QWORD *)&v12[8 * v19] = *(_QWORD *)(v16 + 8);
      *(_DWORD *)&v10[4 * v19] = v23;
      *(_QWORD *)(v16 + 8) = 0;
      *(_DWORD *)(v16 + 40) = -1;
      *(_WORD *)(v16 + 56) = v26 & 0xFFF5;
      v27 = v14[1];
      v14[1] = v27 - 1;
      if (v27 <= 0)
      {
        v34 = __si_assert_copy_extra_521(-1);
        v31 = v34;
        v35 = "";
        if (v34)
          v35 = v34;
        __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1305, "g_fd_list->fd_count>=0", v35);
LABEL_44:
        free(v31);
        if (__valid_fs(-1))
          v33 = 2989;
        else
          v33 = 3072;
        *(_DWORD *)v33 = -559038737;
        abort();
      }
      if (++v19 >= v39)
        goto LABEL_37;
    }
LABEL_16:
    if (v20 >= *v14)
    {
      v30 = __si_assert_copy_extra_521(-1);
      v31 = v30;
      v32 = "";
      if (v30)
        v32 = v30;
      __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1312, "processed++ < g_fd_list->item_count", v32);
      goto LABEL_44;
    }
    if (v16 == v15)
      break;
    v16 = *(_QWORD *)(v16 + 16);
    v18 = v14[1];
    ++v20;
    if (v18 < v14[2] && (a3 & 1) != 0)
      goto LABEL_37;
  }
  if (v20 + 1 != *v14)
  {
    v36 = __si_assert_copy_extra_521(-1);
    v31 = v36;
    v37 = "";
    if (v36)
      v37 = v36;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1314, "processed == g_fd_list->item_count", v37);
    goto LABEL_44;
  }
LABEL_37:
  pthread_mutex_unlock(&g_fd_lock);
  if (v19)
  {
    for (i = 0; i != v19; ++i)
    {
      guarded_close_np();
      v12 += 8;
    }
  }
  return v19;
}

uint64_t db_shrink_cache(uint64_t a1)
{
  pthread_key_t v2;
  char *v3;
  unsigned int v4;
  unint64_t v5;
  signed int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int *v18;
  unsigned int v19;
  uint64_t v20;
  void **v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  pthread_override_s *v28;
  char v29;
  _DWORD *v30;
  _DWORD *v31;
  int v32;
  int v33;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  NSObject *v39;
  int v40;
  char *v41;
  char *v42;
  const char *v43;
  int v44;
  NSObject *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t *, uint8_t *);
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  int v59;
  _QWORD v60[3];
  int v61;
  _QWORD v62[3];
  int v63;
  uint8_t buf[32];
  __int128 v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 != 1685287992)
  {
    v38 = *__error();
    v39 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v40 = *(_DWORD *)a1;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "db_shrink_cache";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 274;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v40;
      _os_log_error_impl(&dword_1B8270000, v39, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v38;
    v41 = __si_assert_copy_extra_268();
    v42 = v41;
    if (v41)
      v43 = v41;
    else
      v43 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 274, v43);
    free(v42);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if ((*(_BYTE *)(a1 + 804) & 8) != 0)
    return 0;
  v2 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v2 = __THREAD_SLOT_KEY;
  }
  v3 = (char *)pthread_getspecific(v2);
  HIDWORD(v5) = qos_class_self() - 9;
  LODWORD(v5) = HIDWORD(v5);
  v4 = v5 >> 2;
  if (v4 > 6)
    v6 = 0;
  else
    v6 = dword_1B8630ED0[v4];
  v8 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(_QWORD *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(_BYTE *)(a1 + 796))
    goto LABEL_12;
  if (v6 > 5)
  {
LABEL_41:
    *(_QWORD *)(a1 + 768) = pthread_self();
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a1 + 16 * v6 + 648))
  {
    v35 = v6 - 1;
    v36 = (uint64_t *)(a1 + 16 * v6 + 664);
    while (v35 != 4)
    {
      v37 = *v36;
      v36 += 2;
      ++v35;
      if (v37)
      {
        if (v35 <= 4)
          goto LABEL_12;
        goto LABEL_41;
      }
    }
    goto LABEL_41;
  }
LABEL_12:
  db_rwlock_wait(a1 + 584, v6, 2);
LABEL_13:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v8)
  {
    v44 = *__error();
    v45 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "db2_shrink_cache";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 8154;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v8;
      _os_log_error_impl(&dword_1B8270000, v45, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
    }
    *__error() = v44;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 8154);
  }
  v9 = (uint64_t)(v3 - 1);
  if (v3)
    v10 = CIOnThreadCleanUpPush((uint64_t)(v3 - 1), (uint64_t)db_write_unlock, a1 + 584);
  else
    v10 = -1;
  v62[0] = 0;
  v62[1] = v62;
  v63 = 0;
  v62[2] = 0x2000000000;
  v60[0] = 0;
  v60[1] = v60;
  v61 = 0;
  v60[2] = 0x2000000000;
  v58[0] = 0;
  v58[1] = v58;
  v59 = 0;
  v58[2] = 0x2000000000;
  v11 = *(_QWORD **)(a1 + 992);
  v12 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = __flush_updateset_locked_block_invoke;
  *(_QWORD *)&buf[24] = &unk_1E6E37628;
  v68 = 0x17FFFFFFFLL;
  *(_QWORD *)&v65 = v62;
  *((_QWORD *)&v65 + 1) = v58;
  v66 = v60;
  v67 = a1;
  v49 = MEMORY[0x1E0C809B0];
  v50 = 0x40000000;
  v51 = (uint64_t (*)(uint64_t *, uint8_t *))__flush_updateset_locked_block_invoke_118;
  v52 = &unk_1E6E37650;
  v53 = v62;
  v54 = v58;
  v55 = v60;
  v56 = a1;
  v57 = 0x17FFFFFFFLL;
  v7 = db_updateset_iterate(v11, (uint64_t)buf, (uint64_t)&v49);
  _Block_object_dispose(v58, 8);
  _Block_object_dispose(v60, 8);
  _Block_object_dispose(v62, 8);
  if ((_DWORD)v7)
    goto LABEL_27;
  v46 = v10;
  v47 = v3 - 1;
  v48 = v3;
  v49 = v12;
  v13 = *(_QWORD *)(a1 + 928);
  v50 = 0x40000000;
  v51 = (uint64_t (*)(uint64_t *, uint8_t *))__db2_shrink_cache_block_invoke;
  v52 = &__block_descriptor_tmp_65;
  v53 = (_QWORD *)a1;
  *(_BYTE *)(v13 + 232) = 1;
  v14 = *(unsigned int *)(v13 + 220);
  if ((int)v14 < 3)
  {
LABEL_25:
    v7 = 0;
    atomic_store(0, (unsigned int *)(v13 + 216));
    atomic_store(0, (unsigned int *)(v13 + 228));
    *(_DWORD *)(v13 + 220) = 2;
    goto LABEL_26;
  }
  while (1)
  {
    v15 = v14 - 1;
    v16 = v13 + 4 * (v14 - 1);
    v19 = *(_DWORD *)(v16 + 252);
    v18 = (int *)(v16 + 252);
    v17 = v19;
    if (v19)
      break;
LABEL_24:
    --v14;
    if ((unint64_t)(v15 + 1) <= 3)
      goto LABEL_25;
  }
  v20 = v13 + 48 * v15;
  v21 = (void **)(v20 + 272);
  page_cache_add((unsigned int *)v13, (_DWORD **)(v20 + 272), v17, 0);
  v22 = *v18;
  memset(buf, 0, sizeof(buf));
  v65 = 0u;
  *(_DWORD *)buf = v22;
  *(_OWORD *)&buf[8] = *(_OWORD *)(v20 + 272);
  *(_DWORD *)&buf[24] = *(_DWORD *)(v20 + 288);
  *(_QWORD *)&v65 = *(_QWORD *)(v20 + 296);
  DWORD2(v65) = *(_DWORD *)(v20 + 304);
  v66 = *(_QWORD **)(v20 + 312);
  v23 = v51(&v49, buf);
  v24 = *(_QWORD *)&buf[8];
  *(_OWORD *)(v20 + 272) = *(_OWORD *)&buf[8];
  v25 = *(_DWORD *)&buf[24];
  *(_DWORD *)(v20 + 288) = *(_DWORD *)&buf[24];
  *(_QWORD *)(v20 + 296) = v65;
  *(_DWORD *)(v20 + 304) = DWORD2(v65);
  *(_QWORD *)(v20 + 312) = v66;
  v26 = *(_DWORD *)buf;
  *v18 = *(_DWORD *)buf;
  if (!(_DWORD)v23)
  {
    if (v24 && !v25)
    {
      page_cache_add((unsigned int *)v13, (_DWORD **)(v20 + 272), v26, 0);
      free(*(void **)(v20 + 280));
      *(_QWORD *)(v20 + 280) = 0;
      free(*v21);
      *v21 = 0;
      *v18 = 0;
      *(_QWORD *)(v20 + 296) = 0;
      *(_DWORD *)(v20 + 304) = 0;
      *(_QWORD *)(v20 + 312) = 0;
    }
    goto LABEL_24;
  }
  v7 = v23;
  atomic_store(0, (unsigned int *)(v13 + 216));
  atomic_store(0, (unsigned int *)(v13 + 228));
  *(_DWORD *)(v13 + 220) = v14;
LABEL_26:
  *(_BYTE *)(v13 + 232) = 0;
  v9 = (uint64_t)v47;
  v3 = v48;
  v10 = v46;
LABEL_27:
  v27 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_DWORD *)(a1 + 788) = 0;
  v28 = *(pthread_override_s **)(a1 + 760);
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  v29 = *(_DWORD *)(a1 + 780) != 0;
  *(_BYTE *)(a1 + 796) = 0;
  db_rwlock_wakeup(a1 + 584, v29, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v28)
    pthread_override_qos_class_end_np(v28);
  if (v27)
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 8166);
  if (v3)
  {
    CIOnThreadCleanUpClearItem(v9, v10);
    v30 = &threadData[18 * v9];
    v33 = v30[14];
    v31 = v30 + 14;
    v32 = v33;
    if (v10 + 1 == v33)
      *v31 = v32 - 1;
  }
  return v7;
}

uint64_t db_updateset_iterate(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t **v14;
  BOOL v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t **v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t **v24;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;

  v3 = a1[2];
  v27 = 0;
  v28 = 0;
  v26 = &v27;
  if (v3)
  {
    do
    {
      v7 = (uint64_t *)operator new(0x38uLL);
      v8 = v7;
      v9 = *(_QWORD *)(v3 + 16);
      v7[4] = v9;
      v10 = *(_QWORD *)(v3 + 24);
      v7[5] = v10;
      if ((_DWORD)v10 == 3)
        *((_DWORD *)v7 + 12) = *(_DWORD *)(v3 + 32);
      else
        v7[6] = *(_QWORD *)(v3 + 32);
      v11 = v27;
      v12 = &v27;
      if (v26 == &v27)
        goto LABEL_11;
      v13 = v27;
      v14 = &v27;
      if (v27)
      {
        do
        {
          v12 = (uint64_t **)v13;
          v13 = (uint64_t *)v13[1];
        }
        while (v13);
      }
      else
      {
        do
        {
          v12 = (uint64_t **)v14[2];
          v15 = *v12 == (uint64_t *)v14;
          v14 = v12;
        }
        while (v15);
      }
      if ((uint64_t)v12[4] < v9)
      {
LABEL_11:
        if (v27)
          v16 = v12;
        else
          v16 = &v27;
        if (v27)
          v17 = v12 + 1;
        else
          v17 = &v27;
      }
      else
      {
        v16 = &v27;
        v17 = &v27;
        if (v27)
        {
          v17 = &v27;
          while (1)
          {
            while (1)
            {
              v16 = (uint64_t **)v11;
              v18 = v11[4];
              if (v9 >= v18)
                break;
              v11 = *v16;
              v17 = v16;
              if (!*v16)
                goto LABEL_26;
            }
            if (v18 >= v9)
              break;
            v17 = v16 + 1;
            v11 = v16[1];
            if (!v11)
              goto LABEL_26;
          }
        }
      }
      if (*v17)
      {
        operator delete(v7);
      }
      else
      {
LABEL_26:
        *v7 = 0;
        v7[1] = 0;
        v7[2] = (uint64_t)v16;
        *v17 = v7;
        if (*v26)
        {
          v26 = (uint64_t **)*v26;
          v8 = *v17;
        }
        std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v27, v8);
        ++v28;
      }
      v3 = *(_QWORD *)v3;
    }
    while (v3);
    v19 = v26;
    if (v26 != &v27)
    {
      v3 = 0;
      while (1)
      {
        v20 = *((_DWORD *)v19 + 10);
        if (v20)
        {
          if (v20 == 3)
          {
            v21 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD))(a3 + 16))(a3, v19[4], *((unsigned int *)v19 + 12));
            v3 = v21;
            if ((int)v21 > 0)
              goto LABEL_54;
            if ((_DWORD)v21)
              goto LABEL_39;
            std::__hash_table<std::__hash_value_type<unsigned long long,value_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,value_t>>>::__erase_unique<unsigned long long>(a1, (unint64_t)v19[4]);
            --a1[6];
          }
          else
          {
            v22 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, BOOL, _QWORD))(a2 + 16))(a2, v19[4], v19[6], v20 == 2, *((unsigned int *)v19 + 11));
            v3 = v22;
            if ((int)v22 > 0)
              goto LABEL_54;
            if ((_DWORD)v22)
            {
LABEL_39:
              if ((_DWORD)v3 == -1)
                break;
              goto LABEL_46;
            }
            if (*((_DWORD *)v19 + 10) == 1)
              --a1[5];
            std::__hash_table<std::__hash_value_type<unsigned long long,value_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,value_t>>>::__erase_unique<unsigned long long>(a1, (unint64_t)v19[4]);
            if (*((_DWORD *)v19 + 10))
              free(v19[6]);
            v3 = 0;
          }
        }
LABEL_46:
        v23 = v19[1];
        if (v23)
        {
          do
          {
            v24 = (uint64_t **)v23;
            v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (uint64_t **)v19[2];
            v15 = *v24 == (uint64_t *)v19;
            v19 = v24;
          }
          while (!v15);
        }
        v19 = v24;
        if (v24 == &v27)
          goto LABEL_54;
      }
    }
    v3 = 0;
  }
LABEL_54:
  std::__tree<long long>::destroy(v27);
  return v3;
}

void CIPurgeTokenizers()
{
  uint64_t i;
  void *v1;
  _QWORD *v2;
  _QWORD *v3;

  for (i = 0; i != 4; ++i)
  {
    v1 = OSAtomicDequeue((OSQueueHead *)&gIndexingTokenizerStack + i, 0);
    while (1)
    {
      v2 = OSAtomicDequeue((OSQueueHead *)&gIndexingTokenizerStack + i, 0);
      if (!v2)
        break;
      v3 = v2;
      CITokenizerDispose((_QWORD *)v2[1]);
      v3[1] = 0;
      OSAtomicEnqueue(&gIndexingTokenizerHeap, v3, 0);
    }
    if (v1)
      OSAtomicEnqueue((OSQueueHead *)&gIndexingTokenizerStack + i, v1, 0);
  }
}

void std::__tree<long long>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<long long>::destroy(*a1);
    std::__tree<long long>::destroy(a1[1]);
    operator delete(a1);
  }
}

void si_sync_index_delayed2(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = (uint64_t)a1;
  if (!a2)
  {
    v4 = *a1;
    if (*(_BYTE *)(*(_QWORD *)v3 + 2072))
    {
      flushGraphCache(v4);
      v4 = *(_QWORD *)v3;
    }
    si_indexDeleteDeferredItems(v4);
    si_enqueue_work_with_qos(*(_QWORD *)(*(_QWORD *)v3 + 1040), 9, (uint64_t)syncIndex, v3);
    v3 = 0;
  }
  si_sync_ctx_free(v3, a2 != 0);
}

void flushGraphCache(uint64_t a1)
{
  os_unfair_lock_s *v2;
  const __CFDictionary *v3;
  const __CFBag *v4;
  const __CFAllocator *v5;
  const __CFBag *v6;
  const __CFBag *v7;
  const __CFBag *v8;
  const __CFBag *v9;
  const __CFBag *v10;
  const __CFBag *v11;
  const __CFBag *v12;
  const __CFBag *v13;
  const __CFBag *v14;
  const __CFBag *v15;
  const __CFBag *v16;
  const __CFBag *v17;
  const __CFBag *v18;
  const __CFBag *v19;
  const __CFBag *v20;
  const __CFBag *v21;
  const __CFBag *v22;
  const __CFBag *v23;
  const __CFBag *v24;
  const __CFBag *v25;
  const __CFBag *v26;
  const __CFBag *v27;
  const __CFBag *v28;
  const __CFBag *v29;
  const __CFBag *v30;
  const __CFBag *v31;
  const __CFBag *v32;
  const __CFBag *v33;
  const __CFBag *v34;
  const __CFBag *v35;
  const __CFBag *v36;
  const __CFBag *v37;
  const __CFBag *v38;
  const __CFBag *v39;
  const __CFBag *v40;
  const __CFBag *v41;
  const __CFBag *v42;
  const __CFBag *v43;
  const __CFBag *v44;
  CFIndex Count;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD __src[20];
  uint64_t v53;

  v2 = (os_unfair_lock_s *)(a1 + 328);
  memset(__src, 0, sizeof(__src));
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 328));
  v53 = a1;
  v3 = *(const __CFDictionary **)(a1 + 656);
  v4 = *(const __CFBag **)(a1 + 336);
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v4)
  {
    *(_QWORD *)&__src[0] = CFBagCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 336));
  }
  v6 = *(const __CFBag **)(a1 + 344);
  if (v6)
  {
    *((_QWORD *)&__src[0] + 1) = CFBagCreateCopy(v5, v6);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 344));
  }
  v7 = *(const __CFBag **)(a1 + 352);
  if (v7)
  {
    *(_QWORD *)&__src[1] = CFBagCreateCopy(v5, v7);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 352));
  }
  v8 = *(const __CFBag **)(a1 + 360);
  if (v8)
  {
    *((_QWORD *)&__src[1] + 1) = CFBagCreateCopy(v5, v8);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 360));
  }
  v9 = *(const __CFBag **)(a1 + 368);
  if (v9)
  {
    *(_QWORD *)&__src[2] = CFBagCreateCopy(v5, v9);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 368));
  }
  v10 = *(const __CFBag **)(a1 + 376);
  if (v10)
  {
    *((_QWORD *)&__src[2] + 1) = CFBagCreateCopy(v5, v10);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 376));
  }
  v11 = *(const __CFBag **)(a1 + 384);
  if (v11)
  {
    *(_QWORD *)&__src[3] = CFBagCreateCopy(v5, v11);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 384));
  }
  v12 = *(const __CFBag **)(a1 + 392);
  if (v12)
  {
    *((_QWORD *)&__src[3] + 1) = CFBagCreateCopy(v5, v12);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 392));
  }
  v13 = *(const __CFBag **)(a1 + 400);
  if (v13)
  {
    *(_QWORD *)&__src[4] = CFBagCreateCopy(v5, v13);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 400));
  }
  v14 = *(const __CFBag **)(a1 + 408);
  if (v14)
  {
    *((_QWORD *)&__src[4] + 1) = CFBagCreateCopy(v5, v14);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 408));
  }
  v15 = *(const __CFBag **)(a1 + 416);
  if (v15)
  {
    *(_QWORD *)&__src[5] = CFBagCreateCopy(v5, v15);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 416));
  }
  v16 = *(const __CFBag **)(a1 + 424);
  if (v16)
  {
    *((_QWORD *)&__src[5] + 1) = CFBagCreateCopy(v5, v16);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 424));
  }
  v17 = *(const __CFBag **)(a1 + 432);
  if (v17)
  {
    *(_QWORD *)&__src[6] = CFBagCreateCopy(v5, v17);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 432));
  }
  v18 = *(const __CFBag **)(a1 + 440);
  if (v18)
  {
    *((_QWORD *)&__src[6] + 1) = CFBagCreateCopy(v5, v18);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 440));
  }
  v19 = *(const __CFBag **)(a1 + 448);
  if (v19)
  {
    *(_QWORD *)&__src[7] = CFBagCreateCopy(v5, v19);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 448));
  }
  v20 = *(const __CFBag **)(a1 + 456);
  if (v20)
  {
    *((_QWORD *)&__src[7] + 1) = CFBagCreateCopy(v5, v20);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 456));
  }
  v21 = *(const __CFBag **)(a1 + 464);
  if (v21)
  {
    *(_QWORD *)&__src[8] = CFBagCreateCopy(v5, v21);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 464));
  }
  v22 = *(const __CFBag **)(a1 + 472);
  if (v22)
  {
    *((_QWORD *)&__src[8] + 1) = CFBagCreateCopy(v5, v22);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 472));
  }
  v23 = *(const __CFBag **)(a1 + 480);
  if (v23)
  {
    *(_QWORD *)&__src[9] = CFBagCreateCopy(v5, v23);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 480));
  }
  v24 = *(const __CFBag **)(a1 + 488);
  if (v24)
  {
    *((_QWORD *)&__src[9] + 1) = CFBagCreateCopy(v5, v24);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 488));
  }
  v25 = *(const __CFBag **)(a1 + 496);
  if (v25)
  {
    *(_QWORD *)&__src[10] = CFBagCreateCopy(v5, v25);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 496));
  }
  v26 = *(const __CFBag **)(a1 + 504);
  if (v26)
  {
    *((_QWORD *)&__src[10] + 1) = CFBagCreateCopy(v5, v26);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 504));
  }
  v27 = *(const __CFBag **)(a1 + 512);
  if (v27)
  {
    *(_QWORD *)&__src[11] = CFBagCreateCopy(v5, v27);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 512));
  }
  v28 = *(const __CFBag **)(a1 + 520);
  if (v28)
  {
    *((_QWORD *)&__src[11] + 1) = CFBagCreateCopy(v5, v28);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 520));
  }
  v29 = *(const __CFBag **)(a1 + 528);
  if (v29)
  {
    *(_QWORD *)&__src[12] = CFBagCreateCopy(v5, v29);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 528));
  }
  v30 = *(const __CFBag **)(a1 + 536);
  if (v30)
  {
    *((_QWORD *)&__src[12] + 1) = CFBagCreateCopy(v5, v30);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 536));
  }
  v31 = *(const __CFBag **)(a1 + 544);
  if (v31)
  {
    *(_QWORD *)&__src[13] = CFBagCreateCopy(v5, v31);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 544));
  }
  v32 = *(const __CFBag **)(a1 + 552);
  if (v32)
  {
    *((_QWORD *)&__src[13] + 1) = CFBagCreateCopy(v5, v32);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 552));
  }
  v33 = *(const __CFBag **)(a1 + 560);
  if (v33)
  {
    *(_QWORD *)&__src[14] = CFBagCreateCopy(v5, v33);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 560));
  }
  v34 = *(const __CFBag **)(a1 + 568);
  if (v34)
  {
    *((_QWORD *)&__src[14] + 1) = CFBagCreateCopy(v5, v34);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 568));
  }
  v35 = *(const __CFBag **)(a1 + 576);
  if (v35)
  {
    *(_QWORD *)&__src[15] = CFBagCreateCopy(v5, v35);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 576));
  }
  v36 = *(const __CFBag **)(a1 + 584);
  if (v36)
  {
    *((_QWORD *)&__src[15] + 1) = CFBagCreateCopy(v5, v36);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 584));
  }
  v37 = *(const __CFBag **)(a1 + 592);
  if (v37)
  {
    *(_QWORD *)&__src[16] = CFBagCreateCopy(v5, v37);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 592));
  }
  v38 = *(const __CFBag **)(a1 + 600);
  if (v38)
  {
    *((_QWORD *)&__src[16] + 1) = CFBagCreateCopy(v5, v38);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 600));
  }
  v39 = *(const __CFBag **)(a1 + 608);
  if (v39)
  {
    *(_QWORD *)&__src[17] = CFBagCreateCopy(v5, v39);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 608));
  }
  v40 = *(const __CFBag **)(a1 + 616);
  if (v40)
  {
    *((_QWORD *)&__src[17] + 1) = CFBagCreateCopy(v5, v40);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 616));
  }
  v41 = *(const __CFBag **)(a1 + 624);
  if (v41)
  {
    *(_QWORD *)&__src[18] = CFBagCreateCopy(v5, v41);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 624));
  }
  v42 = *(const __CFBag **)(a1 + 632);
  if (v42)
  {
    *((_QWORD *)&__src[18] + 1) = CFBagCreateCopy(v5, v42);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 632));
  }
  v43 = *(const __CFBag **)(a1 + 640);
  if (v43)
  {
    *(_QWORD *)&__src[19] = CFBagCreateCopy(v5, v43);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 640));
  }
  v44 = *(const __CFBag **)(a1 + 648);
  if (v44)
  {
    *((_QWORD *)&__src[19] + 1) = CFBagCreateCopy(v5, v44);
    CFBagRemoveAllValues(*(CFMutableBagRef *)(a1 + 648));
  }
  *(_QWORD *)(a1 + 656) = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  os_unfair_lock_unlock(v2);
  if (v3)
  {
    Count = CFDictionaryGetCount(v3);
    if (sContactsIndex == a1)
    {
      if (Count)
        CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)flushGraphCacheApply, __src);
    }
    else if (sContactsIndex && Count)
    {
      v46 = malloc_type_malloc(0x150uLL, 0xE0040D1B6A99DuLL);
      memcpy(v46 + 1, __src, 0x140uLL);
      *v46 = v3;
      v47 = sContactsIndex;
      v46[41] = sContactsIndex;
      memset(__src, 0, sizeof(__src));
      v53 = 0;
      si_enqueue_work(*(_QWORD *)(v47 + 1096), (uint64_t)indexContactGraphData, (uint64_t)v46);
      goto LABEL_89;
    }
    CFRelease(v3);
  }
LABEL_89:
  v48 = __src[0];
  v49 = __src[1];
  v50 = __src[2];
  v51 = __src[3];
  releaseCommDates((uint64_t)&v48);
  v48 = __src[4];
  v49 = __src[5];
  v50 = __src[6];
  v51 = __src[7];
  releaseCommDates((uint64_t)&v48);
  v48 = __src[8];
  v49 = __src[9];
  v50 = __src[10];
  v51 = __src[11];
  releaseCommDates((uint64_t)&v48);
  v48 = __src[12];
  v49 = __src[13];
  v50 = __src[14];
  v51 = __src[15];
  releaseCommDates((uint64_t)&v48);
  v48 = __src[16];
  v49 = __src[17];
  v50 = __src[18];
  v51 = __src[19];
  releaseCommDates((uint64_t)&v48);
}

void releaseCommDates(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v2 = *(const void **)a1;
  if (v2)
    CFRelease(v2);
  *(_QWORD *)a1 = 0;
  v3 = *(const void **)(a1 + 8);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = *(const void **)(a1 + 16);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 16) = 0;
  v5 = *(const void **)(a1 + 24);
  if (v5)
    CFRelease(v5);
  *(_QWORD *)(a1 + 24) = 0;
  v6 = *(const void **)(a1 + 32);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)(a1 + 32) = 0;
  v7 = *(const void **)(a1 + 40);
  if (v7)
    CFRelease(v7);
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *(const void **)(a1 + 48);
  if (v8)
    CFRelease(v8);
  *(_QWORD *)(a1 + 48) = 0;
  v9 = *(const void **)(a1 + 56);
  if (v9)
    CFRelease(v9);
  *(_QWORD *)(a1 + 56) = 0;
}

void si_sync_index_delayed1(uint64_t a1, int a2)
{
  uint64_t v3;

  v3 = a1;
  if (!a2)
  {
    si_enqueue_barrier_with_qos(*(_QWORD *)(*(_QWORD *)a1 + 1048), 9, (uint64_t)si_sync_index_delayed2, a1);
    v3 = 0;
  }
  si_sync_ctx_free(v3, a2 != 0);
}

void si_indexDeleteDeferredItems(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 288))
  {
    v2 = (os_unfair_lock_s *)(a1 + 280);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 280));
    v3 = *(_QWORD *)(a1 + 288);
    if (v3)
    {
      si_indexDeleteByOid(a1, v3);
      __dmb(0xBu);
      v4 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = v4;
      RLEOIDArrayClear(v4);
    }
    os_unfair_lock_unlock(v2);
  }
}

void delayed_op2(uint64_t a1, int a2)
{
  void *v3;

  if (a2)
  {
    (*(void (**)(_QWORD))(a1 + 16))(*(_QWORD *)a1);
    free((void *)a1);
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 3)
      v3 = delayed_op_final;
    else
      v3 = delayed_op3;
    si_enqueue_work_with_qos(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1040), 5, (uint64_t)v3, a1);
  }
}

void delayed_op1(uint64_t a1, int a2)
{
  void *v3;

  if (a2)
  {
    (*(void (**)(_QWORD))(a1 + 16))(*(_QWORD *)a1);
    free((void *)a1);
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 2)
      v3 = delayed_op_final;
    else
      v3 = delayed_op2;
    si_enqueue_barrier_with_qos(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1048), 5, (uint64_t)v3, a1);
  }
}

void delayed_op0(_QWORD *a1, int a2)
{
  if (a2)
  {
    ((void (*)(_QWORD))a1[2])(*a1);
    free(a1);
  }
  else
  {
    si_enqueue_barrier_with_qos(*(_QWORD *)(a1[1] + 1152), 5, (uint64_t)delayed_op1, (uint64_t)a1);
  }
}

void preheat_runLoop(uint64_t a1, void (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  pthread_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  pthread_t v15;

  v6 = pthread_self();
  v7 = *(NSObject **)(a1 + 32);
  v8 = MEMORY[0x1E0C809B0];
  v10 = MEMORY[0x1E0C809B0];
  v11 = 0x40000000;
  v12 = __si_scheduler_set_thread_block_invoke;
  v13 = &__block_descriptor_tmp_29_1050;
  v14 = a1;
  v15 = v6;
  dispatch_sync(v7, &v10);
  a2(a3, 0);
  v9 = *(NSObject **)(a1 + 32);
  v10 = v8;
  v11 = 0x40000000;
  v12 = __si_scheduler_set_thread_block_invoke;
  v13 = &__block_descriptor_tmp_29_1050;
  v14 = a1;
  v15 = 0;
  dispatch_sync(v9, &v10);
}

void si_preheat(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const __CFArray *v11;
  int v12;
  const void *v13;
  unsigned int v14;

  if (!a2)
  {
    v3 = *a1;
    kdebug_trace();
    v14 = 0;
    if (fd_setDir(*(unsigned int *)(v3 + 32), (int *)&v14))
    {
      v4 = *(_QWORD *)(v3 + 1384);
      v5 = *(_DWORD *)(v4 + 8);
      if (v5)
        _CIPreHeatIndex(*(_QWORD *)(*(_QWORD *)v4 + 8 * (v5 - 1)), *((unsigned __int8 *)a1 + 16));
      v6 = *(_QWORD *)(v3 + 1392);
      if (*(_DWORD *)(v6 + 8))
      {
        v7 = 0;
        do
          _CIPreHeatIndex(*(_QWORD *)(*(_QWORD *)v6 + 8 * v7++), *((unsigned __int8 *)a1 + 16));
        while (v7 < *(unsigned int *)(v6 + 8));
      }
      v8 = *(_QWORD *)(v3 + 1384);
      if (*(_DWORD *)(v8 + 8))
      {
        v9 = 0;
        do
          _CIPreHeatIndex(*(_QWORD *)(*(_QWORD *)v8 + 8 * v9++), *((unsigned __int8 *)a1 + 16));
        while (v9 < *(unsigned int *)(v8 + 8));
      }
      v10 = a1[1];
      if (v10)
      {
        v11 = *(const __CFArray **)(v10 + 112);
        if (v11)
        {
          if (CFArrayGetCount(*(CFArrayRef *)(v10 + 112)))
          {
            CFArrayGetValueAtIndex(v11, 0);
            icu_locale_create();
            icu_locale_get_rules();
            icu_locale_retain();
          }
        }
      }
      v12 = v14;
      MEMORY[0x1BCCB1484](v14);
      if ((v12 & 0x80000000) == 0)
        close(v12);
    }
    kdebug_trace();
  }
  v13 = (const void *)a1[1];
  if (v13)
    CFRelease(v13);
  free(a1);
}

int *_CIPreHeatIndex(uint64_t a1, int a2)
{
  unsigned int v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void (*v12)(_QWORD);
  int v13;
  NSObject *v14;
  int *result;
  int v16;
  NSObject *v17;
  os_log_type_t v18;
  char v19;
  _DWORD *v20;
  int64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_QWORD);
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 8))
  {
    do
    {
      v4 = __ldxr(exceptionSequenceNum);
      v5 = v4 + 1;
    }
    while (__stxr(v4 + 1, exceptionSequenceNum));
    v6 = setThreadIdAndInfo(-1, (__int128 *)sIndexExceptionCallbacks, a1, 0, v5);
    v32 = HIDWORD(v6);
    v33 = v6;
    v30 = v8;
    v31 = v7;
    v9 = *(_QWORD *)&threadData[18 * v6 + 2];
    v10 = v9 + 320 * HIDWORD(v6);
    *(_BYTE *)(v10 + 216) = 0;
    v11 = *(_DWORD *)(v10 + 312);
    v12 = *(void (**)(_QWORD))(v10 + 224);
    if (v12)
      v12(*(_QWORD *)(v9 + 320 * HIDWORD(v6) + 288));
    if (_setjmp((int *)v10))
    {
      v13 = *__error();
      v14 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v35 = "_CIPreHeatIndex";
        v36 = 1024;
        v37 = 2990;
        _os_log_error_impl(&dword_1B8270000, v14, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v13;
      *(_DWORD *)(v10 + 312) = v11;
      CIOnThreadCleanUpReset(v30);
      dropThreadId(v33, 1, v5);
      return (int *)CICleanUpReset(v33, v31);
    }
    else
    {
      if (a2)
      {
        nice_read_advise(*(_DWORD **)(a1 + 4656), 1028 * *(_DWORD *)(a1 + 232));
        nice_read_advise(*(_DWORD **)(a1 + 200), *(int *)(a1 + 120));
        v19 = atomic_load((unsigned int *)(a1 + 28));
        if ((v19 & 4) != 0)
        {
          v20 = *(_DWORD **)(a1 + 464);
          v21 = *(_DWORD *)(a1 + 480) / 50;
        }
        else
        {
          v20 = *(_DWORD **)(a1 + 5176);
          v21 = 4 * *(unsigned int *)(a1 + 9368);
        }
        nice_read_advise(v20, v21);
      }
      else
      {
        nice_madvise(*(char **)(a1 + 104), *(_QWORD *)(a1 + 120));
        nice_madvise(*(char **)(a1 + 96), (1028 * *(_DWORD *)(a1 + 232)));
        v22 = atomic_load((unsigned int *)(a1 + 28));
        if ((v22 & 4) != 0)
        {
          v23 = *(_QWORD *)(a1 + 512);
          if (v23)
          {
            v24 = *(char **)(v23 + 8);
            if (v24)
              nice_madvise(v24, *(_QWORD *)(a1 + 480) / 0x32uLL);
          }
        }
      }
      v25 = *(_QWORD *)(a1 + 4904);
      if (v25)
        nice_read_advise(*(_DWORD **)(v25 + 224), *(int *)(v25 + 240));
      v26 = atomic_load((unsigned int *)(a1 + 28));
      if ((v26 & 4) != 0)
        nice_read_advise(*(_DWORD **)(a1 + 9400), *(_DWORD *)(a1 + 4944) / 50);
      v27 = *(_QWORD *)&threadData[18 * v33 + 2];
      v28 = v27 + 320 * v32;
      *(_DWORD *)(v28 + 312) = v11;
      v29 = *(void (**)(_QWORD))(v28 + 232);
      if (v29)
        v29(*(_QWORD *)(v27 + 320 * v32 + 288));
      return (int *)dropThreadId(v33, 0, v5);
    }
  }
  else
  {
    v16 = *__error();
    v17 = _SILogForLogForCategory(0);
    v18 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v17, v18))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v17, v18, "Skipping because index is shut down", buf, 2u);
    }
    result = __error();
    *result = v16;
  }
  return result;
}

char *nice_madvise(char *result, unint64_t a2)
{
  char *v3;
  unint64_t v4;
  host_t v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[4];
  __int128 v11;
  __int128 v12;

  v3 = result;
  v4 = nice_madvise_limit;
  if (!nice_madvise_limit)
  {
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)host_info_out = 0u;
    host_info_outCnt = 12;
    v5 = MEMORY[0x1BCCB1010]();
    result = (char *)host_info(v5, 1, host_info_out, &host_info_outCnt);
    v6 = *((_QWORD *)&v12 + 1);
    if (*((_QWORD *)&v12 + 1) >= 0x80000000uLL)
      v6 = 0x80000000;
    v4 = (unint64_t)(3435973837 * v6) >> 36;
    if ((_DWORD)result)
      v4 = 53687091;
    else
      v4 = v4;
    nice_madvise_limit = v4;
  }
  if (v4 >= a2)
    v7 = a2;
  else
    v7 = v4;
  do
  {
    if (!v7)
      break;
    v8 = v7 >= 0x20000 ? 0x20000 : v7;
    result = (char *)madvise(v3, v8, 3);
    v3 += v8;
    v7 -= v8;
  }
  while (!(_DWORD)result);
  return result;
}

uint64_t nice_read_advise(_DWORD *a1, int64_t a2)
{
  int64_t v4;
  host_t v5;
  kern_return_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  integer_t v12;
  integer_t v13;
  int v14;
  mach_msg_type_number_t host_info_outCnt[2];
  integer_t host_info_out[4];
  __int128 v17;
  __int128 v18;

  v4 = nice_read_advise_limit;
  if (!nice_read_advise_limit)
  {
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)host_info_out = 0u;
    host_info_outCnt[0] = 12;
    v5 = MEMORY[0x1BCCB1010]();
    v6 = host_info(v5, 1, host_info_out, host_info_outCnt);
    v7 = *((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1) >= 0x80000000uLL)
      v7 = 0x80000000;
    v4 = (unint64_t)(3435973837 * v7) >> 36;
    if (v6)
      v4 = 53687091;
    else
      v4 = v4;
    nice_read_advise_limit = v4;
  }
  if (v4 >= a2)
    v8 = a2;
  else
    v8 = v4;
  *(_QWORD *)host_info_outCnt = 0;
  result = _fd_acquire_fd((uint64_t)a1, host_info_outCnt);
  if ((result & 0x80000000) == 0)
  {
    v10 = result;
    memset(host_info_out, 0, sizeof(host_info_out));
    if (v8 >= 1)
    {
      v11 = 0x20000;
      v12 = v8;
      do
      {
        *(_QWORD *)host_info_out = v11 - 0x20000;
        if (v11 >= v8)
          v13 = v12;
        else
          v13 = 0x20000;
        host_info_out[2] = v13;
        v14 = fcntl(v10, 44, host_info_out);
        if (v11 >= v8)
          break;
        v12 -= 0x20000;
        v11 += 0x20000;
      }
      while (!v14);
    }
    return (uint64_t)_fd_release_fd(a1, v10, 0, *(uint64_t *)host_info_outCnt);
  }
  return result;
}

void delayed_op_final(void (**a1)(_QWORD))
{
  a1[2](*a1);
  free(a1);
}

void si_power_info_cleanup(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  void (*v5)(_QWORD);
  NSObject *v6;
  void *v7;

  if ((a3 & 1) == 0)
  {
    if (*(_DWORD *)a1)
    {
      v4 = *(_QWORD *)(a2 + 2360);
      if (v4)
      {
        v5 = *(void (**)(_QWORD))(v4 + 72);
        if (v5)
        {
          v5(*(_QWORD *)(v4 + 136));
          *(_DWORD *)a1 = 0;
        }
      }
    }
  }
  v6 = *(NSObject **)(a1 + 24);
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(*(dispatch_object_t *)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
  }
  v7 = *(void **)(a1 + 8);
  if (v7)
  {
    xpc_release(v7);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void si_enqueue_barrier_for_job(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  NSObject *v6;
  _QWORD block[9];

  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    do
    {
      v5 = v4;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
  }
  else
  {
    v5 = 0;
  }
  v6 = *(NSObject **)(a1 + 8);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __si_enqueue_barrier_for_job_block_invoke;
  block[3] = &__block_descriptor_tmp_4_941;
  block[4] = v5;
  block[5] = a1;
  block[6] = a2;
  block[7] = a3;
  block[8] = a4;
  dispatch_sync(v6, block);
}

void delayed_op_prop1(uint64_t a1, int a2)
{
  void *v3;

  if (a2)
  {
    (*(void (**)(_QWORD))(a1 + 16))(*(_QWORD *)a1);
    free((void *)a1);
  }
  else
  {
    if (*(_DWORD *)(a1 + 24) == 2)
      v3 = delayed_op_final;
    else
      v3 = delayed_op_prop2;
    si_enqueue_barrier_with_qos(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 1048), 5, (uint64_t)v3, a1);
  }
}

void delayed_op_prop0(_QWORD *a1, int a2)
{
  if (a2)
  {
    ((void (*)(_QWORD))a1[2])(*a1);
    free(a1);
  }
  else
  {
    si_enqueue_barrier_for_job(*(_QWORD *)(a1[1] + 1152), (uint64_t)delayed_op_prop1, (uint64_t)a1, 0);
  }
}

void si_routine_protectionClassB(_BYTE *a1)
{
  (*(void (**)(_QWORD))a1)(*((_QWORD *)a1 + 1));
  if (a1[16])
    free(a1);
}

void si_routine_firstParty(_BYTE *a1)
{
  (*(void (**)(_QWORD))a1)(*((_QWORD *)a1 + 1));
  if (a1[16])
    free(a1);
}

uint64_t gatherIndexInfo(SISearchCtx_METADATA *a1, uint64_t a2, int a3)
{
  int v6;
  NSObject *v7;
  os_log_type_t v8;
  SISearchCtx_METADATA *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *Log;
  os_signpost_id_t v19;
  NSObject *v20;
  uint64_t v21;
  qos_class_t v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD);
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _DWORD *v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  unsigned int *v41;
  SISearchCtx_METADATA *v42;
  _DWORD *v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  size_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  SISearchCtx_METADATA *v61;
  int v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  SISearchCtx_METADATA *v69;
  int v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  NSObject *v76;
  os_log_type_t v77;
  double Current;
  uint64_t v79;
  SISearchCtx_METADATA *v80;
  void *v81;
  SISearchCtx_METADATA *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  SISearchCtx_METADATA *v90;
  char *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  size_t v101;
  char *v102;
  uint64_t v103;
  size_t v104;
  char *v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int *v108;
  int v109;
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  _QWORD *v113;
  void *v114;
  _QWORD *v115;
  uint64_t v116;
  unsigned int *v117;
  uint64_t v118;
  int v119;
  NSObject *v120;
  os_log_type_t v121;
  CFAbsoluteTime v122;
  unint64_t v123;
  int v124;
  NSObject *v125;
  os_log_type_t v126;
  int v127;
  NSObject *v128;
  os_log_type_t v129;
  int v130;
  NSObject *v131;
  os_log_type_t v132;
  SISearchCtx_METADATA *v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  NSObject *v137;
  os_log_type_t v138;
  const char *v139;
  double v140;
  uint64_t v141;
  int v142;
  const __CFArray *v143;
  uint64_t v144;
  _QWORD *query_node_with_ann;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  size_t v150;
  char *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  size_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unsigned int v181;
  uint64_t v182;
  _BOOL4 v183;
  _QWORD *Iterator;
  uint64_t v185;
  int v186;
  NSObject *v187;
  os_log_type_t v188;
  const char *v189;
  _BOOL4 v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  NSObject *v196;
  void *v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  void (*v201)(_QWORD);
  NSObject *v202;
  os_signpost_id_t v203;
  NSObject *v204;
  uint64_t v205;
  qos_class_t v206;
  int v208;
  NSObject *v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  SISearchCtx_METADATA *v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t *v216;
  char *v217;
  uint64_t v218;
  malloc_type_id_t v219;
  __int128 v220;
  malloc_type_id_t v221;
  size_t v222;
  uint64_t v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  int v228;
  uint64_t v229;
  int v230;
  int v231;
  uint64_t v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int v236;
  SISearchCtx_METADATA *v237;
  char v238;
  _QWORD v239[5];
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  void *v243;
  SISearchCtx_METADATA *v244;
  uint64_t v245;
  uint64_t (*v246)(uint64_t);
  void *v247;
  _BYTE *v248;
  _BYTE buf[24];
  void *v250;
  uint64_t *v251;
  uint64_t v252;
  uint64_t *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  BOOL v258;
  char v259;
  uint64_t v260;

  v260 = *MEMORY[0x1E0C80C00];
  v237 = a1;
  v6 = *__error();
  v7 = _SILogForLogForCategory(1);
  v8 = 2 * (dword_1EF19FC90 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_1B8270000, v7, v8, "%p Start gatherIndexInfo", buf, 0xCu);
  }
  *__error() = v6;
  CFAbsoluteTimeGetCurrent();
  __dmb(0xBu);
  v9 = v237;
  v10 = *((_QWORD *)v237 + 3);
  v11 = *(int *)(v10 + 1400);
  if (*((_QWORD *)v237 + 69) == v11)
  {
    v12 = *((_QWORD *)v237 + 73);
    if (v12)
    {
      v13 = *(_QWORD *)(v10 + 1384);
      if (v12 != v13)
      {
        *((_QWORD *)v237 + 73) = v13;
        *((_QWORD *)v9 + 70) = *(unsigned int *)(v13 + 8);
        cleanUp(v9);
        v10 = *((_QWORD *)v9 + 3);
      }
    }
    v14 = *((_QWORD *)v9 + 72);
    if (!v14)
      goto LABEL_15;
    v15 = *(_QWORD *)(v10 + 1392);
    if (v14 == v15)
      goto LABEL_15;
    *((_QWORD *)v9 + 72) = v15;
    *((_QWORD *)v9 + 71) = *(unsigned int *)(v15 + 8);
  }
  else
  {
    *((_QWORD *)v237 + 69) = v11;
    if (*((_QWORD *)v9 + 72))
    {
      v16 = *(_QWORD *)(v10 + 1392);
      *((_QWORD *)v9 + 72) = v16;
      *((_QWORD *)v9 + 71) = *(unsigned int *)(v16 + 8);
    }
    if (*((_QWORD *)v9 + 70))
    {
      v17 = *(_QWORD *)(v10 + 1384);
      *((_QWORD *)v9 + 73) = v17;
      *((_QWORD *)v9 + 70) = *(unsigned int *)(v17 + 8);
    }
  }
  cleanUp(v9);
LABEL_15:
  v229 = a2;
  kdebug_trace();
  Log = _MDPerf_QueryLog();
  v19 = *((_QWORD *)v9 + 1);
  if (v19 + 1 >= 2)
  {
    v20 = Log;
    if (os_signpost_enabled(Log))
    {
      v21 = *(_QWORD *)(v19 + 608);
      v22 = qos_class_self();
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v21;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v22;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v20, OS_SIGNPOST_INTERVAL_BEGIN, v19, "QueryGatherIndexInfo", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x", buf, 0x12u);
    }
  }
  if (dword_1EF19FC90 >= 5)
  {
    v195 = *__error();
    v196 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v196, OS_LOG_TYPE_DEFAULT, "Get doc set!", buf, 2u);
    }
    *__error() = v195;
  }
  v228 = a3;
  do
  {
    v23 = __ldxr(exceptionSequenceNum);
    v24 = v23 + 1;
  }
  while (__stxr(v23 + 1, exceptionSequenceNum));
  v25 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, *(_QWORD *)(*((_QWORD *)v9 + 3) + 1184), 0x40000000, v24);
  v27 = v26;
  v28 = v25;
  v30 = v29;
  v31 = *(_QWORD *)&threadData[18 * v25 + 2];
  v32 = v31 + 320 * HIDWORD(v25);
  *(_BYTE *)(v32 + 216) = 0;
  v230 = *(_DWORD *)(v32 + 312);
  v33 = *(void (**)(_QWORD))(v32 + 224);
  if (v33)
    v33(*(_QWORD *)(v31 + 320 * HIDWORD(v25) + 288));
  v231 = v24;
  v235 = HIDWORD(v28);
  v236 = v28;
  v233 = v27;
  v234 = v30;
  v34 = _setjmp((int *)v32);
  if ((_DWORD)v34)
  {
    v37 = (_DWORD *)(v32 + 312);
    v38 = *__error();
    v39 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "gatherIndexInfo";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 735;
      _os_log_error_impl(&dword_1B8270000, v39, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v38;
    *v37 = v230;
    CIOnThreadCleanUpReset(v233);
    dropThreadId(v236, 1, v231);
    CICleanUpReset(v236, v234);
    v40 = 0;
    goto LABEL_214;
  }
  if (*((_BYTE *)v9 + 593))
  {
    v41 = 0;
    v42 = v9;
    v43 = (_DWORD *)&unk_1EF19F000;
    goto LABEL_108;
  }
  v44 = 0;
  *(_QWORD *)&v35 = 134218240;
  *(_QWORD *)&v36 = 134218240;
  v226 = v36;
  v227 = v36;
  v224 = v35;
  v225 = v36;
  v223 = 32;
  v222 = 256;
  v221 = 838443015;
  *(_QWORD *)&v35 = 134217984;
  v220 = v35;
  v45 = 48;
  v43 = &unk_1EF19F000;
  v218 = 48;
  v219 = 101211499;
  while (1)
  {
    v46 = *(_QWORD *)(*((_QWORD *)v9 + 105) + 32);
    if (v46 && *(_DWORD *)(v46 + 48))
      goto LABEL_97;
    if (*((uint64_t *)v9 + 70) <= 0 && *((uint64_t *)v9 + 71) < 1)
      goto LABEL_97;
    if (*(_BYTE *)(*((_QWORD *)v9 + 13) + 96))
      goto LABEL_97;
    v47 = *((_QWORD *)v9 + 13);
    do
    {
      v48 = v47;
      v47 = *(_QWORD *)(v47 + 80);
    }
    while (v47);
    if (*(_BYTE *)(*(_QWORD *)(v48 + 8) + 12))
    {
LABEL_97:
      v42 = v9;
      v41 = v44;
      goto LABEL_108;
    }
    v49 = &v210;
    MEMORY[0x1E0C80A78](v34);
    v51 = (char *)&v210 - ((v50 + 15) & 0xFFFFFFFF0);
    bzero(v51, v50);
    v52 = v229;
    if (*((_DWORD *)v9 + 208))
    {
      v53 = 0;
      do
      {
        if (v52 && (v54 = *(unsigned int **)(v52 + 8 * v53)) != 0
          || (v54 = *(unsigned int **)(*((_QWORD *)v9 + 105) + v53 * v45 + 32)) != 0)
        {
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 + 1, v54));
        }
        *(_QWORD *)&v51[8 * v53] = v54;
        v56 = *((_QWORD *)v9 + 105);
        v57 = *(_QWORD *)(v56 + 48 * v53 + 32);
        if (v57)
        {
          ContentIndexDocSetCleanupBorrowedChildren(v57);
          ContentIndexDocSetDispose(*(_QWORD *)(*((_QWORD *)v9 + 105) + 48 * v53 + 32));
          v56 = *((_QWORD *)v9 + 105);
        }
        *(_QWORD *)(v56 + 48 * v53++ + 32) = 0;
      }
      while (v53 < *((unsigned int *)v9 + 208));
    }
    if (v44)
    {
      ContentIndexDocSetContextRelease(v44);
      v9 = v237;
    }
    v58 = *((_QWORD *)v9 + 70);
    v213 = v9;
    if (v58)
    {
      v59 = v58 - 1;
      *((_QWORD *)v9 + 70) = v59;
      v60 = *(_QWORD *)(**((_QWORD **)v9 + 73) + 8 * v59);
      v61 = v9;
      v62 = *__error();
      v63 = _SILogForLogForCategory(1);
      v64 = 2 * (v43[804] < 4);
      if (os_log_type_enabled(v63, v64))
      {
        v65 = *((_QWORD *)v61 + 70);
        *(_DWORD *)buf = v225;
        *(_QWORD *)&buf[4] = v61;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v65;
        _os_log_impl(&dword_1B8270000, v63, v64, "%p gII live: %ld", buf, 0x16u);
      }
      *__error() = v62;
      if (!*((_QWORD *)v61 + 70))
      {
        v66 = *((_QWORD *)v61 + 3);
        v67 = *(_QWORD *)(v66 + 1392);
        *((_QWORD *)v61 + 72) = v67;
        *((_QWORD *)v61 + 71) = *(unsigned int *)(v67 + 8);
        *((_QWORD *)v61 + 69) = *(int *)(v66 + 1400);
      }
      v68 = v60;
    }
    else
    {
      v68 = *((_QWORD *)v9 + 71);
      if (!v68)
        goto LABEL_63;
      *((_QWORD *)v9 + 71) = v68 - 1;
      v69 = v9;
      v70 = *__error();
      v71 = _SILogForLogForCategory(1);
      v72 = 2 * (v43[804] < 4);
      if (os_log_type_enabled(v71, v72))
      {
        v73 = *((_QWORD *)v69 + 71);
        *(_DWORD *)buf = v224;
        *(_QWORD *)&buf[4] = v69;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v73;
        _os_log_impl(&dword_1B8270000, v71, v72, "%p gII scan: %ld", buf, 0x16u);
      }
      *__error() = v70;
      v68 = *(_QWORD *)(**((_QWORD **)v69 + 72) + 8 * *((_QWORD *)v69 + 71));
      v61 = v69;
    }
    if (*((_BYTE *)v61 + 592) && v68 && *(_DWORD *)(v68 + 48) == *((_DWORD *)v61 + 149))
      *((_BYTE *)v61 + 593) = 1;
LABEL_63:
    v74 = v68;
    v75 = *__error();
    v76 = _SILogForLogForCategory(1);
    v77 = 2 * (v43[804] < 4);
    if (os_log_type_enabled(v76, v77))
    {
      *(_DWORD *)buf = v227;
      *(_QWORD *)&buf[4] = v213;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v74;
      _os_log_impl(&dword_1B8270000, v76, v77, "%p gatherIndexInfo at %p", buf, 0x16u);
    }
    *__error() = v75;
    Current = CFAbsoluteTimeGetCurrent();
    v79 = *((_QWORD *)v213 + 46);
    v214 = v74;
    if (v79)
    {
      v80 = v213;
    }
    else
    {
      v232 = v223;
      *((_QWORD *)v213 + 47) = 0;
      if (*MEMORY[0x1E0C85AD8] <= 0xFFuLL)
        ++sTotal;
      v216 = &v210;
      v217 = v51;
      v81 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v222, v221);
      if (!v81)
        _log_fault_for_malloc_failure();
      v82 = v213;
      *((_QWORD *)v213 + 46) = v81;
      if (*((_DWORD *)v82 + 208))
      {
        v83 = 0;
        v211 = (uint64_t)v82 + 376;
        v84 = *((_QWORD *)v82 + 3);
        v85 = 0;
        v86 = v81;
        do
        {
          v238 = 0;
          v210 = v85;
          v87 = *((_QWORD *)v82 + 105) + v83;
          v238 = *(_BYTE *)(v87 + 40);
          v88 = *((_QWORD *)v82 + 2);
          v240 = 0;
          v241 = &v240;
          v242 = 0x2000000000;
          v243 = v86;
          if (*(_BYTE *)(v84 + 2072))
            v89 = -124;
          else
            v89 = 12;
          v90 = (SISearchCtx_METADATA *)MEMORY[0x1E0C809B0];
          v239[0] = MEMORY[0x1E0C809B0];
          v239[1] = 0x40000000;
          v239[2] = __preIterateQueryForIndex_block_invoke;
          v239[3] = &__block_descriptor_tmp_123_7631;
          v239[4] = v84;
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 0x40000000;
          *(_QWORD *)&buf[16] = __preIterateQueryForIndex_block_invoke_124;
          v250 = &unk_1E6E352D8;
          v251 = &v240;
          v258 = v83 == 0;
          v252 = v211;
          v253 = &v232;
          v254 = &v238;
          v255 = v84;
          v256 = v74;
          v257 = v88;
          v259 = v89;
          v91 = CICleanUpThreadLoc();
          db_string_table_rdlock(*(_DWORD **)(v84 + 1184));
          CIOnThreadCleanUpPush((uint64_t)v91, (uint64_t)db_string_table_unlock, *(_QWORD *)(v84 + 1184));
          v92 = *(_QWORD **)v87;
          v244 = v90;
          v245 = 0x40000000;
          v246 = __db_query_tree_apply_block_block_invoke;
          v247 = &unk_1E6E377F8;
          v248 = v239;
          db_query_tree_apply_block_with_meta(v92, (uint64_t)&v244, 0);
          db_optimize_query_tree((_QWORD **)v87);
          v93 = *(_QWORD **)v87;
          v244 = v90;
          v245 = 0x40000000;
          v246 = __db_query_tree_apply_block_block_invoke;
          v247 = &unk_1E6E377F8;
          v248 = buf;
          db_query_tree_apply_block_with_meta(v93, (uint64_t)&v244, 0);
          CIOnThreadCleanUpPop((uint64_t)v91);
          v81 = (void *)v241[3];
          _Block_object_dispose(&v240, 8);
          v82 = v213;
          if (v238)
          {
            *((_BYTE *)v213 + 641) = 1;
            v94 = *((_QWORD *)v82 + 105) + v83;
            if (!*(_BYTE *)(v94 + 40))
            {
              *((_BYTE *)v82 + 642) = 0;
              *(_BYTE *)(v94 + 40) = 1;
            }
          }
          v85 = v210 + 1;
          v83 += 48;
          v86 = v81;
          v74 = v214;
        }
        while (v210 + 1 < (unint64_t)*((unsigned int *)v82 + 208));
        v80 = v237;
        v43 = (_DWORD *)&unk_1EF19F000;
      }
      else
      {
        v80 = v82;
      }
      *((_QWORD *)v82 + 46) = v81;
      v49 = v216;
      v51 = v217;
    }
    v95 = *((_QWORD *)v80 + 1);
    *(double *)(v95 + 392) = *(double *)(v95 + 392) + CFAbsoluteTimeGetCurrent() - Current;
    v96 = CFAbsoluteTimeGetCurrent();
    v97 = *((_QWORD *)v80 + 47);
    v98 = v97;
    v99 = CICleanUpThreadLoc();
    v244 = v80;
    v245 = (uint64_t)v51;
    v100 = CICleanUpPush((uint64_t)v99, (uint64_t)cleanupDocSets, (uint64_t)&v244);
    v212 = v100;
    v215 = v49;
    if (v97 <= 0x400)
    {
      MEMORY[0x1E0C80A78](v100);
      v102 = (char *)&v210 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v102, v101);
      MEMORY[0x1E0C80A78](v103);
      v105 = (char *)&v210 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v105, v104);
      v106 = v214;
      v107 = processNodes((uint64_t)v80, v214, (uint64_t)v51, v102, v105, v97);
      if (!v107)
      {
        v124 = *__error();
        v125 = _SILogForLogForCategory(1);
        v43 = &unk_1EF19F000;
        v126 = 2 * (dword_1EF19FC90 < 4);
        if (os_log_type_enabled(v125, v126))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v125, v126, "Got NULL context from processNodes", buf, 2u);
        }
        *__error() = v124;
        goto LABEL_107;
      }
      v108 = v107;
      evaluateFuzzyQuery((uint64_t)v80, v106, (uint64_t)v102);
      v41 = v108;
      v43 = (_DWORD *)&unk_1EF19F000;
      goto LABEL_91;
    }
    v109 = *__error();
    v110 = _SILogForLogForCategory(1);
    v111 = 2 * (v43[804] < 4);
    if (os_log_type_enabled(v110, v111))
    {
      v112 = *((unsigned int *)v80 + 208);
      *(_DWORD *)buf = v226;
      *(_QWORD *)&buf[4] = v97;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v112;
      _os_log_impl(&dword_1B8270000, v110, v111, "alloc %ld cinodes for %ld noded", buf, 0x16u);
    }
    *__error() = v109;
    v113 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 16 * v97, v219);
    if (!v113)
      break;
    v114 = v113;
    v115 = &v113[v97];
    v116 = v214;
    v117 = processNodes((uint64_t)v80, v214, (uint64_t)v51, v113, v115, v98);
    v43 = &unk_1EF19F000;
    if (!v117)
    {
      v130 = *__error();
      v131 = _SILogForLogForCategory(1);
      v132 = 2 * (dword_1EF19FC90 < 4);
      if (os_log_type_enabled(v131, v132))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B8270000, v131, v132, "Got NULL context from processNodes", buf, 2u);
      }
      *__error() = v130;
      free(v114);
      goto LABEL_107;
    }
    v41 = v117;
    evaluateFuzzyQuery((uint64_t)v80, v116, (uint64_t)v114);
    free(v114);
LABEL_91:
    CFAbsoluteTimeGetCurrent();
    v42 = v237;
    v118 = *((_QWORD *)v237 + 1);
    *(double *)(v118 + 400) = *(double *)(v118 + 400) + CFAbsoluteTimeGetCurrent() - v96;
    v119 = *__error();
    v120 = _SILogForLogForCategory(1);
    v121 = 2 * (v43[804] < 4);
    if (os_log_type_enabled(v120, v121))
    {
      v122 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)buf = v220;
      *(double *)&buf[4] = v122 - v96;
      _os_log_impl(&dword_1B8270000, v120, v121, "Computed doc set in %f seconds!", buf, 0xCu);
    }
    v123 = v212;
    *__error() = v119;
    CICleanUpClearItem((uint64_t)v99, v123);
    cleanupDocSets(&v244);
    if (*((_BYTE *)v42 + 593))
      *((_OWORD *)v42 + 35) = 0u;
    v9 = v42;
    v44 = v41;
    v45 = v218;
    if (*((_BYTE *)v42 + 593))
      goto LABEL_108;
  }
  _log_fault_for_malloc_failure();
  v127 = *__error();
  v128 = _SILogForLogForCategory(1);
  v43 = &unk_1EF19F000;
  v129 = 2 * (dword_1EF19FC90 < 4);
  if (os_log_type_enabled(v128, v129))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8270000, v128, v129, "query_malloc failed", buf, 2u);
  }
  *__error() = v127;
LABEL_107:
  v41 = 0;
  v42 = v237;
LABEL_108:
  v133 = v42;
  if (*(_BYTE *)(*((_QWORD *)v42 + 13) + 96))
    goto LABEL_112;
  v134 = *((_QWORD *)v42 + 13);
  do
  {
    v135 = v134;
    v134 = *(_QWORD *)(v134 + 80);
  }
  while (v134);
  if (*(_BYTE *)(*(_QWORD *)(v135 + 8) + 12))
  {
LABEL_112:
    v136 = *__error();
    v137 = _SILogForLogForCategory(1);
    v138 = 2 * (v43[804] < 4);
    if (os_log_type_enabled(v137, v138))
    {
      *(_WORD *)buf = 0;
      v139 = "Query invalidated";
      goto LABEL_114;
    }
    goto LABEL_115;
  }
  if (!v41)
  {
    v136 = *__error();
    v137 = _SILogForLogForCategory(1);
    v138 = 2 * (v43[804] < 4);
    if (os_log_type_enabled(v137, v138))
    {
      *(_WORD *)buf = 0;
      v139 = "Null context";
LABEL_114:
      _os_log_impl(&dword_1B8270000, v137, v138, v139, buf, 2u);
    }
LABEL_115:
    v40 = 0;
    *__error() = v136;
    v9 = v133;
    goto LABEL_210;
  }
  if (*((_BYTE *)v42 + 641) && !*((_BYTE *)v42 + 642))
    preparePostCheckQueries(&v237);
  v140 = CFAbsoluteTimeGetCurrent();
  v141 = *(_QWORD *)(*((_QWORD *)v42 + 105) + 32);
  if (!v141 || (v142 = *(_DWORD *)(v141 + 48)) == 0)
  {
LABEL_207:
    v40 = 0;
    goto LABEL_208;
  }
  if (v142 != 1)
  {
    v244 = 0;
    v149 = (uint64_t *)*((_QWORD *)v42 + 85);
    if (v149)
      ContentIndexDocSetIteratorDispose(v149);
    MEMORY[0x1E0C80A78](v149);
    v151 = (char *)&v210 - ((v150 + 15) & 0xFFFFFFFF0);
    bzero(v151, v150);
    v152 = *((unsigned int *)v42 + 208);
    if ((_DWORD)v152)
    {
      v153 = 0;
      v154 = 0;
      do
      {
        v155 = *(_QWORD *)(*((_QWORD *)v42 + 105) + v154 + 32);
        *(_QWORD *)&v151[8 * v153] = v155;
        v156 = *(_QWORD *)(*((_QWORD *)v42 + 105) + v154);
        if (v156)
        {
          v157 = *(unsigned __int16 *)(v156 + 40);
          if (v157 == 4)
          {
            v158 = *(_QWORD *)(v156 + 16);
            if (v158)
              LODWORD(v158) = (*(_DWORD *)(v158 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v158 + 24));
          }
          else
          {
            LODWORD(v158) = 0;
          }
          if ((_DWORD)v158 != ((v157 >> 3) & 1))
          {
            *(_BYTE *)(v155 + 33) = 1;
            v152 = *((unsigned int *)v42 + 208);
          }
        }
        ++v153;
        v154 += 48;
        v159 = v152;
      }
      while (v153 < v152);
    }
    else
    {
      v159 = 0;
    }
    if (*((_BYTE *)v42 + 650))
      v183 = *((_BYTE *)v42 + 656) != 0;
    else
      v183 = 0;
    Iterator = ContentIndexDocSetsCreateIterator((uint64_t *)v151, v159, (uint64_t)v41, v183, *((_BYTE *)v42 + 1184), (uint64_t)v42 + 688);
    v133 = v237;
    *((_QWORD *)v237 + 85) = Iterator;
    v185 = *((unsigned int *)v133 + 212);
    if ((_DWORD)v185 && Iterator)
    {
      Iterator[8] = v185;
      Iterator = (_QWORD *)*((_QWORD *)v133 + 85);
    }
    ContentIndexDocSet_Step((uint64_t)Iterator, &v244, (_BYTE *)(*((_QWORD *)v133 + 13) + 96));
    v186 = *__error();
    v187 = _SILogForLogForCategory(10);
    v188 = 2 * (dword_1EF19FCB4 < 4);
    if (!os_log_type_enabled(v187, v188))
      goto LABEL_197;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v244;
    v189 = "2 - count: %ld";
    goto LABEL_196;
  }
  if (*((_QWORD *)v42 + 23) && *((_QWORD *)v42 + 22)
    || (*((_BYTE *)v42 + 40) & 0x80) == 0
    || (v143 = (const __CFArray *)*((_QWORD *)v42 + 7)) == 0
    || !CFArrayGetCount(v143)
    || (v228 & 1) != 0)
  {
    v244 = 0;
    v160 = (uint64_t *)*((_QWORD *)v42 + 85);
    if (v160)
      ContentIndexDocSetIteratorDispose(v160);
    MEMORY[0x1E0C80A78](v160);
    v162 = (uint64_t *)((char *)&v210 - ((v161 + 15) & 0xFFFFFFFF0));
    bzero(v162, v161);
    v163 = *((unsigned int *)v42 + 208);
    v164 = (v163 - 1);
    if (v163 <= 1)
    {
      if ((_DWORD)v163)
      {
        v175 = 0;
        v176 = 0;
        v177 = *((unsigned int *)v42 + 208);
        do
        {
          v178 = v175;
          v168 = v177;
          v179 = *(_QWORD *)(*((_QWORD *)v42 + 105) + v176 + 32);
          v162[v178] = v179;
          v180 = *(_QWORD *)(*((_QWORD *)v42 + 105) + v176);
          if (v180)
          {
            v181 = *(unsigned __int16 *)(v180 + 40);
            if (v181 == 4)
            {
              v182 = *(_QWORD *)(v180 + 16);
              if (v182)
                LODWORD(v182) = (*(_DWORD *)(v182 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v182 + 24));
            }
            else
            {
              LODWORD(v182) = 0;
            }
            if ((_DWORD)v182 != ((v181 >> 3) & 1))
            {
              *(_BYTE *)(v179 + 33) = 1;
              v168 = *((unsigned int *)v42 + 208);
            }
          }
          v177 = v168;
          v176 += 48;
          v175 = v178 + 1;
        }
        while (v178 + 1 < (unint64_t)v168);
      }
      else
      {
        LODWORD(v168) = 0;
      }
    }
    else
    {
      v165 = 8 * v163;
      v166 = 8;
      v167 = 80;
      do
      {
        v162[(unint64_t)v166 / 8] = *(_QWORD *)(*((_QWORD *)v42 + 105) + v167);
        v166 += 8;
        v167 += 48;
      }
      while (v165 != v166);
      *v162 = ContentIndexDocSetUnionLazy(v164, v162 + 1, 0.0);
      LODWORD(v168) = *((_DWORD *)v42 + 208);
      if (v168 >= 2)
      {
        v169 = 1;
        v170 = 48;
        v171 = *((unsigned int *)v42 + 208);
        do
        {
          v168 = v171;
          v172 = *(_QWORD *)(*((_QWORD *)v42 + 105) + v170);
          if (v172)
          {
            v173 = *(unsigned __int16 *)(v172 + 40);
            if (v173 == 4)
            {
              v174 = *(_QWORD *)(v172 + 16);
              if (v174)
                LODWORD(v174) = (*(_DWORD *)(v174 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v174 + 24));
            }
            else
            {
              LODWORD(v174) = 0;
            }
            if ((_DWORD)v174 != ((v173 >> 3) & 1))
            {
              *(_BYTE *)(v162[v169] + 33) = 1;
              v168 = *((unsigned int *)v42 + 208);
            }
          }
          v171 = v168;
          ++v169;
          v170 += 48;
        }
        while (v169 < v168);
      }
    }
    if (*((_BYTE *)v42 + 650))
      v190 = *((_BYTE *)v42 + 656) != 0;
    else
      v190 = 0;
    v191 = ContentIndexDocSetsCreateIterator(v162, v168, (uint64_t)v41, v190, *((_BYTE *)v42 + 1184), (uint64_t)v42 + 688);
    v133 = v237;
    *((_QWORD *)v237 + 85) = v191;
    v192 = v191;
    if (*((_DWORD *)v133 + 208) >= 2u)
    {
      ContentIndexDocSetDispose(*v162);
      v192 = (_QWORD *)*((_QWORD *)v133 + 85);
    }
    v193 = *((unsigned int *)v133 + 212);
    if ((_DWORD)v193)
    {
      if (v192)
      {
        v192[8] = v193;
        v194 = *((_QWORD *)v133 + 85);
      }
      else
      {
        v194 = 0;
      }
    }
    else
    {
      v194 = (uint64_t)v192;
    }
    ContentIndexDocSet_Step(v194, &v244, (_BYTE *)(*((_QWORD *)v133 + 13) + 96));
    v186 = *__error();
    v187 = _SILogForLogForCategory(10);
    v188 = 2 * (dword_1EF19FCB4 < 4);
    if (!os_log_type_enabled(v187, v188))
      goto LABEL_197;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v244;
    v189 = "1 - count: %ld";
LABEL_196:
    _os_log_impl(&dword_1B8270000, v187, v188, v189, buf, 0xCu);
LABEL_197:
    *__error() = v186;
LABEL_198:
    v40 = 1;
LABEL_208:
    v9 = v133;
    goto LABEL_209;
  }
  v144 = *((_QWORD *)v42 + 105);
  query_node_with_ann = *(_QWORD **)(v144 + 8);
  if (query_node_with_ann)
  {
    v146 = *(_QWORD *)(v144 + 16);
    if (v146)
    {
      *((_QWORD *)v42 + 102) = makeAndNode((uint64_t)query_node_with_ann, v146, 1, 1);
      v147 = *((_QWORD *)v42 + 105);
      *(_QWORD *)(v147 + 8) = 0;
      *(_QWORD *)(v147 + 16) = 0;
      v148 = *((_QWORD *)v42 + 102);
      goto LABEL_205;
    }
    *((_QWORD *)v42 + 102) = query_node_with_ann;
    *(_QWORD *)(v144 + 8) = 0;
  }
  else
  {
    query_node_with_ann = db_make_query_node_with_ann("*=*", 0);
    *((_QWORD *)v42 + 102) = query_node_with_ann;
  }
  v148 = (uint64_t)query_node_with_ann;
LABEL_205:
  v197 = db_open_query_with_expr(*(_DWORD **)(*((_QWORD *)v42 + 3) + 1184), v148);
  *((_QWORD *)v42 + 103) = v197;
  if (v197)
    goto LABEL_198;
  if ((int)v43[804] < 5)
    goto LABEL_207;
  v208 = *__error();
  v209 = _SILogForLogForCategory(1);
  if (os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8270000, v209, OS_LOG_TYPE_DEFAULT, "Couldn't create raw sdb iterator", buf, 2u);
  }
  v40 = 0;
  *__error() = v208;
  v9 = v42;
LABEL_209:
  *(double *)(*((_QWORD *)v9 + 1) + 408) = *(double *)(*((_QWORD *)v9 + 1) + 408)
                                           + CFAbsoluteTimeGetCurrent()
                                           - v140;
LABEL_210:
  v198 = *(_QWORD *)&threadData[18 * v236 + 2];
  v199 = v235;
  v200 = v198 + 320 * v235;
  *(_DWORD *)(v200 + 312) = v230;
  v201 = *(void (**)(_QWORD))(v200 + 232);
  if (v201)
    v201(*(_QWORD *)(v198 + 320 * v199 + 288));
  dropThreadId(v236, 0, v231);
  if (v41)
  {
    ContentIndexDocSetContextRelease(v41);
    v9 = v237;
  }
LABEL_214:
  kdebug_trace();
  v202 = _MDPerf_QueryLog();
  v203 = *((_QWORD *)v9 + 1);
  if (v203 + 1 >= 2)
  {
    v204 = v202;
    if (os_signpost_enabled(v202))
    {
      v205 = *(_QWORD *)(v203 + 608);
      v206 = qos_class_self();
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v205;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v206;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v204, OS_SIGNPOST_INTERVAL_END, v203, "QueryGatherIndexInfo", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x", buf, 0x12u);
    }
  }
  return v40;
}

void cleanupDocSets(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned int *)(*a1 + 832);
  if ((_DWORD)v1)
  {
    v3 = 0;
    v4 = 8 * v1;
    do
    {
      v5 = *(_QWORD *)(a1[1] + v3);
      if (v5)
      {
        ContentIndexDocSetCleanupBorrowedChildren(v5);
        ContentIndexDocSetDispose(*(_QWORD *)(a1[1] + v3));
        *(_QWORD *)(a1[1] + v3) = 0;
      }
      v3 += 8;
    }
    while (v4 != v3);
  }
}

void ContentIndexDocSetDispose(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  const void *v4;
  const void *v5;
  const void *v6;
  void *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  const void *v13;
  void **v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void **v40;
  const void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unint64_t v61;
  unint64_t i;
  const void *v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  _QWORD block[7];
  int v69;
  char v70;

  if (a1)
  {
    do
    {
      v2 = __ldaxr((unsigned int *)a1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)a1));
    if (!v3)
    {
      switch(*(_DWORD *)(a1 + 48))
      {
        case 1:
        case 2:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_5;
        case 3:
          v10 = *(_QWORD *)(a1 + 64);
          if (!v10)
            goto LABEL_18;
          free(*(void **)(v10 + 240));
          free(*(void **)(v10 + 176));
          v11 = *(void **)(v10 + 128);
          if (v11)
            free(v11);
          v12 = *(const void **)(v10 + 88);
          if (v12)
            CFRelease(v12);
          v13 = *(const void **)(v10 + 96);
          if (v13)
            CFRelease(v13);
          v14 = *(void ***)(v10 + 72);
          if (v14)
          {
            ReleaseEmbeddingDistances(v14);
            *(_QWORD *)(v10 + 72) = 0;
          }
          v9 = *(void **)(a1 + 64);
LABEL_17:
          free(v9);
LABEL_18:
          free((void *)a1);
          break;
        case 8:
          v15 = *(_QWORD *)(a1 + 64);
          if (v15)
          {
            v16 = *(const void **)(v15 + 96);
            if (v16)
              instr_release(v16);
            v17 = *(_QWORD *)(v15 + 216);
            if (*(_BYTE *)(v15 + 192))
            {
              if (v17 >= 2)
              {
                v18 = 1;
                v19 = 32;
                do
                {
                  CFRelease(*(CFTypeRef *)(*(_QWORD *)(v15 + 200) + v19));
                  ++v18;
                  v19 += 24;
                }
                while (*(_QWORD *)(v15 + 216) > v18);
              }
            }
            else if (v17 >= 2)
            {
              v35 = 1;
              v36 = 24;
              do
              {
                CFRelease(*(CFTypeRef *)(*(_QWORD *)(v15 + 200) + v36));
                ++v35;
                v36 += 16;
              }
              while (*(_QWORD *)(v15 + 216) > v35);
            }
            free(*(void **)(v15 + 200));
            v37 = v15 + 128;
            if (*(_BYTE *)(v15 + 120))
              oqdispose_PositionOffsetWithMeta_t(v37);
            else
              oqdispose_JustPositionOffset_t(v37);
            v41 = *(const void **)(v15 + 88);
            if (v41)
              CFRelease(v41);
            v42 = *(void **)(v15 + 224);
            *(_QWORD *)(v15 + 224) = 0;
            if (v42)
            {
              if (*(uint64_t *)v42 >= 1)
              {
                v43 = 0;
                v44 = 32;
                do
                {
                  CFRelease(*(CFTypeRef *)(*((_QWORD *)v42 + 2) + v44));
                  ++v43;
                  v44 += 40;
                }
                while (*(_QWORD *)v42 > v43);
              }
              free(*((void **)v42 + 2));
              free(v42);
            }
            v45 = *(void **)(v15 + 232);
            *(_QWORD *)(v15 + 232) = 0;
            if (v45)
            {
              if (*(uint64_t *)v45 >= 1)
              {
                v46 = 0;
                v47 = 32;
                do
                {
                  CFRelease(*(CFTypeRef *)(*((_QWORD *)v45 + 2) + v47));
                  ++v46;
                  v47 += 40;
                }
                while (*(_QWORD *)v45 > v46);
              }
              free(*((void **)v45 + 2));
              free(v45);
            }
            v48 = *(void ***)(v15 + 72);
            if (v48 && *(_BYTE *)(v15 + 65))
            {
              free(*v48);
              free(*(void **)(v15 + 72));
              *(_QWORD *)(v15 + 72) = 0;
            }
            free(*(void **)(a1 + 64));
          }
          v49 = *(_QWORD *)(a1 + 72);
          if (v49)
          {
            v50 = *(const void **)(v49 + 24);
            if (v50)
              instr_release(v50);
            if (*(uint64_t *)(v49 + 136) > 1)
            {
              v51 = 1;
              v52 = 64;
              do
              {
                CFRelease(*(CFTypeRef *)(*(_QWORD *)(v49 + 120) + v52));
                ++v51;
                v52 += 56;
              }
              while (*(_QWORD *)(v49 + 136) > v51);
            }
            free(*(void **)(v49 + 120));
            if (*(uint64_t *)(v49 + 80) >= 1)
            {
              v53 = 0;
              v54 = 8;
              do
              {
                CFRelease(*(CFTypeRef *)(*(_QWORD *)(v49 + 64) + v54));
                ++v53;
                v54 += 56;
              }
              while (v53 < *(_QWORD *)(v49 + 80));
            }
            if (*(_DWORD *)(v49 + 104))
            {
              v55 = *(_QWORD *)(v49 + 88);
              if (v55 < *(_QWORD *)(v49 + 96))
              {
                v56 = 56 * v55 + 8;
                do
                {
                  CFRelease(*(CFTypeRef *)(*(_QWORD *)(v49 + 64) + v56));
                  ++v55;
                  v56 += 56;
                }
                while (v55 < *(_QWORD *)(v49 + 96));
              }
            }
            free(*(void **)(v49 + 64));
            v57 = *(void **)(v49 + 176);
            if (v57 && *(int *)(v49 + 188) >= 1)
            {
              v58 = 0;
              v59 = 8;
              do
              {
                CFRelease(*(CFTypeRef *)(*(_QWORD *)(v49 + 176) + v59));
                ++v58;
                v59 += 56;
              }
              while (v58 < *(int *)(v49 + 188));
              v57 = *(void **)(v49 + 176);
            }
            free(v57);
            v60 = *(void **)(v49 + 160);
            if (v60)
            {
              v61 = *(unsigned int *)(v49 + 168);
              if ((_DWORD)v61)
              {
                for (i = 0; i < v61; ++i)
                {
                  v63 = *(const void **)(*(_QWORD *)(v49 + 160) + 8 * i);
                  if (v63)
                  {
                    CFRelease(v63);
                    v61 = *(unsigned int *)(v49 + 168);
                  }
                }
                v60 = *(void **)(v49 + 160);
              }
            }
            free(v60);
            free(*(void **)(a1 + 72));
          }
          if (*(_QWORD *)(a1 + 80))
            (*(void (**)(void))(a1 + 96))();
          if (*(_QWORD *)(a1 + 88))
            (*(void (**)(void))(a1 + 96))();
          goto LABEL_18;
        case 9:
          v20 = *(_QWORD *)(a1 + 112);
          if (v20)
          {
            v21 = *(unsigned int *)(v20 + 3348);
            if ((_DWORD)v21)
            {
              v22 = 0;
              v23 = MEMORY[0x1E0C809B0];
              v24 = *(_QWORD *)(a1 + 112);
              v67 = v24;
              do
              {
                v25 = v20 + 392 * v22;
                v26 = *(_QWORD *)(v25 + 408);
                if (*(_DWORD *)(v26 + 20))
                {
                  v27 = 0;
                  v28 = (uint64_t *)(v25 + 408);
                  do
                  {
                    v29 = v24 + 4 * v27;
                    v30 = *(_DWORD *)(v29 + 344);
                    if (v30)
                    {
                      v31 = *(NSObject **)(v26 + 8 * v27 + 32);
                      v32 = v24 + 8 * v27;
                      v33 = *(_QWORD *)(v32 + 216);
                      v34 = *(_BYTE *)(v26 + 19) ^ 1;
                      block[0] = v23;
                      block[1] = 0x40000000;
                      block[2] = ___innerIssueBuffer_block_invoke;
                      block[3] = &__block_descriptor_tmp_63;
                      v69 = v30;
                      block[4] = 0;
                      block[5] = v33;
                      v70 = v34;
                      block[6] = 0;
                      dispatch_async(v31, block);
                      *(_DWORD *)(v29 + 344) = 0;
                      *(_QWORD *)(v32 + 216) = 0;
                      v26 = *v28;
                    }
                    ++v27;
                  }
                  while (v27 < *(unsigned int *)(v26 + 20));
                  v20 = v67;
                  v21 = *(unsigned int *)(v67 + 3348);
                }
                ++v22;
                v24 += 392;
              }
              while (v22 < v21);
            }
            else
            {
              syncFileState1(v20 + 24, 0);
            }
            if (*(_DWORD *)(v20 + 3180))
            {
              v38 = 0;
              do
                dispatch_barrier_sync(*(dispatch_queue_t *)(v20 + 3192 + 8 * v38++), &__block_literal_global_65);
              while (v38 < *(unsigned int *)(v20 + 3180));
            }
            dispatch_barrier_sync(*(dispatch_queue_t *)(v20 + 3184), &__block_literal_global_67);
            free(*(void **)v20);
            if (*(_DWORD *)(v20 + 3348))
            {
              v39 = 0;
              v40 = (void **)(v20 + 24);
              do
              {
                free(*v40);
                ++v39;
                v40 += 49;
              }
              while (v39 < *(unsigned int *)(v20 + 3348));
            }
            else
            {
              free(*(void **)(v20 + 24));
            }
            if (*(_DWORD *)(v20 + 3180))
            {
              v64 = 0;
              do
                dispatch_release(*(dispatch_object_t *)(v20 + 3192 + 8 * v64++));
              while (v64 < *(unsigned int *)(v20 + 3180));
            }
            dispatch_release(*(dispatch_object_t *)(v20 + 3184));
            dispatch_release(*(dispatch_object_t *)(v20 + 3320));
            free((void *)v20);
          }
          if ((*(_DWORD *)(a1 + 128) & 0x7FFFFFFF) != 0)
          {
            v65 = 0;
            do
              ContentIndexDocSetDispose(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v65++));
            while (v65 < (*(_DWORD *)(a1 + 128) & 0x7FFFFFFFu));
          }
          v66 = *(void **)(a1 + 120);
          if (v66 != (void *)-1)
            free(v66);
LABEL_5:
          v4 = *(const void **)(a1 + 80);
          if (v4)
            CFRelease(v4);
          v5 = *(const void **)(a1 + 104);
          if (v5)
            CFRelease(v5);
          v6 = *(const void **)(a1 + 88);
          if (v6)
            CFRelease(v6);
          v7 = *(void **)(a1 + 136);
          if (v7)
            free(v7);
          if (*(_DWORD *)(a1 + 96))
          {
            v8 = 0;
            do
              ContentIndexDocSetDispose(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v8++));
            while (v8 < *(unsigned int *)(a1 + 96));
          }
          v9 = *(void **)(a1 + 72);
          goto LABEL_17;
        default:
          goto LABEL_18;
      }
    }
  }
}

void ContentIndexDocSetCleanupBorrowedChildren(uint64_t a1)
{
  const __CFSet *Mutable;

  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
  _ContentIndexDocSetCleanupBorrowedChildren(a1, Mutable);
  CFRelease(Mutable);
}

void _ContentIndexDocSetCleanupBorrowedChildren(uint64_t a1, const __CFSet *a2)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unint64_t v9;

  if (CFSetContainsValue(a2, (const void *)a1))
    return;
  CFSetAddValue(a2, (const void *)a1);
  v4 = *(_DWORD *)(a1 + 48);
  if (v4 > 9)
    return;
  if (((1 << v4) & 0xF6) != 0)
  {
    if (*(_DWORD *)(a1 + 96))
      goto LABEL_5;
LABEL_17:
    if (!*(_BYTE *)(a1 + 64))
      return;
    goto LABEL_18;
  }
  if (v4 != 9)
    return;
  v8 = *(_DWORD *)(a1 + 128);
  if ((v8 & 0x7FFFFFFF) != 0)
  {
    v9 = 0;
    do
    {
      _ContentIndexDocSetCleanupBorrowedChildren(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v9), a2);
      ContentIndexDocSetDispose(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v9));
      *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v9++) = 0;
      v8 = *(_DWORD *)(a1 + 128);
    }
    while (v9 < (v8 & 0x7FFFFFFFu));
  }
  *(_DWORD *)(a1 + 128) = v8 & 0x80000000;
  if (!*(_DWORD *)(a1 + 96))
    goto LABEL_17;
LABEL_5:
  v5 = 0;
  do
  {
    _ContentIndexDocSetCleanupBorrowedChildren(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v5++), a2);
    v6 = *(unsigned int *)(a1 + 96);
  }
  while (v5 < v6);
  if (*(_BYTE *)(a1 + 64))
  {
    if ((_DWORD)v6)
    {
      v7 = 0;
      do
        ContentIndexDocSetDispose(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v7++));
      while (v7 < *(unsigned int *)(a1 + 96));
    }
LABEL_18:
    *(_BYTE *)(a1 + 64) = 0;
    *(_DWORD *)(a1 + 96) = 0;
  }
}

uint64_t CICleanUpClearItem(uint64_t result, unint64_t a2)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  const char *v5;
  uint64_t v6;

  if (threadData[18 * result + 8] < a2)
  {
    v3 = __si_assert_copy_extra_268();
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1558, "td->cleanUpCount >= position", v5);
    free(v4);
    if (__valid_fs(-1))
      v6 = 2989;
    else
      v6 = 3072;
    *(_DWORD *)v6 = -559038737;
    abort();
  }
  v2 = (_QWORD *)(*(_QWORD *)&threadData[18 * result + 12] + 16 * a2);
  *v2 = 0;
  v2[1] = 0;
  return result;
}

void evaluateFuzzyQuery(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t tree_apply_block_with_meta;
  uint64_t v19;
  const __CFAllocator *v20;
  const __CFSet *Mutable;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFArray *v26;
  unsigned int *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  char *v34;
  char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[5];
  char v40;
  _QWORD v41[5];
  _QWORD v42[5];
  __int128 buf;
  unsigned int *(*v44)(uint64_t, uint64_t);
  void *v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  BOOL v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  v6 = *__error();
  v7 = _SILogForLogForCategory(1);
  v8 = 2 * (dword_1EF19FC90 < 4);
  if (os_log_type_enabled(v7, v8))
  {
    LODWORD(buf) = 134217984;
    *(_QWORD *)((char *)&buf + 4) = a2;
    _os_log_impl(&dword_1B8270000, v7, v8, "evaluateFuzzyQuery for %p", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v6;
  if (*(_DWORD *)(a1 + 832))
  {
    v9 = 0;
    v10 = 0;
    v11 = MEMORY[0x1E0C809B0];
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(a1 + 840);
    do
    {
      v40 = 0;
      v14 = (uint64_t *)(v13 + v9);
      v40 = *((_BYTE *)v14 + 40);
      v15 = *v14;
      v39[0] = v11;
      v39[1] = 0x40000000;
      v39[2] = ___ZL19_evaluateFuzzyQueryP20SISearchCtx_METADATAP14__ContentIndexPP19_ContentIndexDocSetPm_block_invoke;
      v39[3] = &__block_descriptor_tmp_154_4124;
      v39[4] = a1;
      if (v15 && (*(_WORD *)(v15 + 48) & 1) != 0)
      {
        v17 = *(_QWORD **)(v15 + 24);
        if (!v17)
        {
          v17 = malloc_type_calloc(0x20uLL, 1uLL, 0x53F402A6uLL);
          *(_QWORD *)(v15 + 24) = v17;
        }
        v17[3] = 0;
        v17[1] = 0;
        v16 = 1;
      }
      else
      {
        v16 = 0;
        v17 = 0;
      }
      *(_QWORD *)&buf = v11;
      *((_QWORD *)&buf + 1) = 0x40000000;
      v44 = __evaluateFuzzyQueryForIndex_block_invoke;
      v45 = &unk_1E6E35300;
      v54 = v9 == 0;
      v48 = a2;
      v49 = a3;
      v50 = &v38;
      v51 = v15;
      v47 = &v40;
      v46 = v39;
      v55 = v16;
      v52 = v17;
      v53 = v12;
      v41[0] = v11;
      v41[1] = 0x40000000;
      v41[2] = __evaluateFuzzyQueryForIndex_block_invoke_136;
      v41[3] = &__block_descriptor_tmp_139_7667;
      v41[4] = a2;
      v42[0] = v11;
      v42[1] = 0x40000000;
      v42[2] = __db_query_tree_apply_block_block_invoke;
      v42[3] = &unk_1E6E377F8;
      v42[4] = &buf;
      tree_apply_block_with_meta = db_query_tree_apply_block_with_meta((_QWORD *)v15, (uint64_t)v42, (uint64_t)v41);
      if (!tree_apply_block_with_meta)
        tree_apply_block_with_meta = (uint64_t)ContentIndexDocSetCreateEmpty(a2);
      v13 = *(_QWORD *)(a1 + 840);
      v19 = v13 + v9;
      *(_QWORD *)(v13 + v9 + 32) = tree_apply_block_with_meta;
      if (v40)
      {
        *(_BYTE *)(a1 + 641) = 1;
        if (!*(_BYTE *)(v19 + 40))
        {
          *(_BYTE *)(a1 + 642) = 0;
          *(_BYTE *)(v19 + 40) = 1;
        }
      }
      ++v10;
      v9 += 48;
    }
    while (v10 < *(unsigned int *)(a1 + 832));
  }
  v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &kCIDocSetSetCallbacks);
  if (*(_DWORD *)(a1 + 832))
  {
    v22 = 0;
    v23 = *(_QWORD *)(a1 + 840);
    v24 = 32;
    do
    {
      _ContentIndexDocSetIteratorMarkNegation(*(_QWORD *)(v23 + v24), 0);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 840) + v24);
      v26 = CFArrayCreateMutable(v20, 2, 0);
      v27 = _ContentIndexMemoizeDocSet(v25, Mutable, v26);
      CFRelease(v26);
      v23 = *(_QWORD *)(a1 + 840);
      *(_QWORD *)(v23 + v24) = v27;
      ++v22;
      v28 = *(unsigned int *)(a1 + 832);
      v24 += 48;
    }
    while (v22 < v28);
    if ((_DWORD)v28)
    {
      v29 = 0;
      v30 = 32;
      do
      {
        v31 = *(_QWORD *)(*(_QWORD *)(a1 + 840) + v30);
        ContentIndexFlattenDocSet(v31, Mutable);
        _ContentIndexOptimizeDocSet(v31, 0, 0, Mutable);
        ++v29;
        v30 += 48;
      }
      while (v29 < *(unsigned int *)(a1 + 832));
    }
  }
  CFRelease(Mutable);
  v32 = *(_DWORD *)(a1 + 848);
  if (v32)
  {
    ContentIndexOrganizeWeightedTree(*(_QWORD *)(*(_QWORD *)(a1 + 840) + 48 * v32 + 32));
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 840) + 48 * *(unsigned int *)(a1 + 848) + 32);
    ContentIndexAnnotateWeightedTreeInner(v33, 0.0);
    *(_DWORD *)(v33 + 28) = *(_DWORD *)(v33 + 24);
  }
  if (v38 != *(_QWORD *)(a1 + 376))
  {
    v34 = __si_assert_copy_extra_268();
    v35 = v34;
    v36 = "";
    if (v34)
      v36 = v34;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 5595, "idx==ctx->cinodeCount", v36);
    free(v35);
    if (__valid_fs(-1))
      v37 = 2989;
    else
      v37 = 3072;
    *(_DWORD *)v37 = -559038737;
    abort();
  }
}

void _ContentIndexOptimizeDocSet(uint64_t a1, uint64_t *a2, uint64_t a3, const __CFSet *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  int v13;
  int v14;
  char v15;
  uint64_t *v16;
  unint64_t v17;
  _QWORD v18[3];
  unsigned __int8 v19;
  uint64_t v20;

  v20 = a1;
  if (a1)
  {
    switch(*(_DWORD *)(a1 + 48))
    {
      case 4:
      case 6:
        if (*(_DWORD *)(a1 + 96))
        {
          v8 = 0;
          do
            _ContentIndexOptimizeDocSet(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v8++), a2, a3, a4);
          while (v8 < *(unsigned int *)(a1 + 96));
        }
        return;
      case 5:
      case 7:
        if (*(_DWORD *)(a1 + 96))
        {
          v9 = 0;
          v10 = (a3 + 1);
          do
          {
            v18[0] = a1;
            v18[2] = a2;
            v18[1] = v9;
            _ContentIndexOptimizeDocSet(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v9++), v18, v10, a4);
          }
          while (v9 < *(unsigned int *)(a1 + 96));
        }
        return;
      case 9:
        if ((*(_DWORD *)(a1 + 128) & 0x7FFFFFFF) != 0)
        {
          LODWORD(v18[0]) = 0;
          v19 = 0;
          v11 = extractConstrainingDocSets(a3, a2, a4, (unsigned int *)v18, &v19);
          if (LODWORD(v18[0]))
          {
            v12 = *(_DWORD *)(a1 + 128);
            if (v19)
            {
              if ((v12 & 0x80000000) == 0)
              {
                v13 = 5;
                v14 = 7;
                v15 = 1;
LABEL_29:
                recomputeConstraints((unsigned int **)v11, v18[0], &v20, v13, 4, v14, v15, 1);
                return;
              }
              v13 = 4;
              v14 = 5;
            }
            else
            {
              if ((v12 & 0x80000000) == 0)
              {
                recomputeConstraints((unsigned int **)v11, v18[0], &v20, 5, 5, 4, 0, 0);
                return;
              }
              v13 = 4;
              v14 = 7;
            }
            v15 = 0;
            goto LABEL_29;
          }
          if ((*(_DWORD *)(a1 + 128) & 0x7FFFFFFF) != 0)
          {
            v17 = 0;
            do
              ContentIndexDocSetDispose(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v17++));
            while (v17 < (*(_DWORD *)(a1 + 128) & 0x7FFFFFFFu));
          }
          free(*(void **)(a1 + 120));
          *(_QWORD *)(a1 + 120) = -1;
          *(_DWORD *)(a1 + 128) &= 0x80000000;
        }
        else if (*(_QWORD *)(a1 + 120) != -1)
        {
          LODWORD(v18[0]) = 0;
          v19 = 0;
          v16 = extractConstrainingDocSets(a3, a2, a4, (unsigned int *)v18, &v19);
          if (LODWORD(v18[0]))
          {
            *(_DWORD *)(a1 + 128) = v18[0] & 0x7FFFFFFF | (v19 << 31);
            *(_QWORD *)(a1 + 120) = v16;
          }
          else
          {
            *(_QWORD *)(a1 + 120) = -1;
          }
        }
        break;
      default:
        return;
    }
  }
}

unsigned int *_ContentIndexMemoizeDocSet(uint64_t a1, const __CFSet *a2, const __CFArray *a3)
{
  unint64_t v6;
  unsigned int *Value;
  unsigned int *v8;
  unsigned int v9;
  CFRange v11;

  if (!a1)
    return 0;
  if ((*(_DWORD *)(a1 + 48) & 0xFFFFFFFC) != 4)
    return (unsigned int *)a1;
  if (*(_DWORD *)(a1 + 96))
  {
    v6 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6) = _ContentIndexMemoizeDocSet(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v6), a2, a3);
      ++v6;
    }
    while (v6 < *(unsigned int *)(a1 + 96));
  }
  Value = (unsigned int *)CFSetGetValue(a2, (const void *)a1);
  if (!Value)
  {
    CFSetAddValue(a2, (const void *)a1);
    v11.length = CFArrayGetCount(a3);
    v11.location = 0;
    CFArrayApplyFunction(a3, v11, (CFArrayApplierFunction)setShared, 0);
    CFArrayRemoveAllValues(a3);
    return (unsigned int *)a1;
  }
  v8 = Value;
  if (Value == (unsigned int *)a1)
    return (unsigned int *)a1;
  do
    v9 = __ldaxr(Value);
  while (__stlxr(v9 + 1, Value));
  ContentIndexDocSetDispose(a1);
  CFArrayRemoveAllValues(a3);
  CFArrayAppendValue(a3, v8);
  return v8;
}

uint64_t _ContentIndexDocSetIteratorMarkNegation(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v11;

  v2 = result;
  *(_BYTE *)(result + 34) = a2;
  v3 = *(_DWORD *)(result + 48);
  if (v3 > 9)
    assert_invalid_doc_type((_DWORD *)result);
  v4 = 1 << v3;
  if ((v4 & 0x10F) == 0)
  {
    if ((v4 & 0xF0) != 0)
    {
      if (*(_BYTE *)(result + 64))
        return result;
    }
    else
    {
      *(_DWORD *)(result + 128) ^= 0x80000000;
      if (*(_BYTE *)(result + 64))
        return result;
    }
    if (*(_DWORD *)(result + 96))
    {
      v6 = 0;
      v7 = a2 ^ 1;
      do
      {
        v8 = *(_DWORD *)(v2 + 48);
        if (v8 == 6)
          v9 = v7;
        else
          v9 = 0;
        if ((v8 - 4) < 2 || v8 == 7)
          v11 = a2;
        else
          v11 = v9;
        result = _ContentIndexDocSetIteratorMarkNegation(*(_QWORD *)(*(_QWORD *)(v2 + 72) + 8 * v6++), v11);
      }
      while (v6 < *(unsigned int *)(v2 + 96));
    }
  }
  return result;
}

unsigned int *processNodes(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, unint64_t a6)
{
  const void **v12;
  const __CFSet *v13;
  size_t v14;
  _QWORD *v15;
  const __CFDictionary *v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  const void *v21;
  const char *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int *NodesLazy;
  int v28;
  NSObject *v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  unint64_t v38;
  unint64_t i;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t j;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  char *v55;
  char *v56;
  const char *v57;
  char *v58;
  const char *v59;
  uint64_t v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  CFDictionaryKeyCallBacks keyCallBacks;
  uint8_t buf[4];
  const char *v67;
  __int16 v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v12 = *(const void ***)(a1 + 368);
  v13 = *(const __CFSet **)(*(_QWORD *)(a1 + 24) + 6640);
  if (v13 && CFSetContainsValue(v13, (const void *)*(int *)(a2 + 48)))
    v64 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 6632);
  else
    v64 = 0;
  v14 = 8 * a6;
  if (((a6 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && v14 > *MEMORY[0x1E0C85AD8])
    ++sTotal;
  v63 = 8 * a6;
  v15 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v14, 0x31F9A007uLL);
  if (!v15)
    _log_fault_for_malloc_failure();
  memset(&keyCallBacks, 0, 32);
  *(_OWORD *)&keyCallBacks.equal = xmmword_1E6E302E8;
  v16 = CFDictionaryCreateMutable((CFAllocatorRef)kCIQueryZoneAllocator, a6, &keyCallBacks, 0);
  v61 = a6;
  v62 = a4;
  if (a6)
  {
    v17 = a6;
    a6 = 0;
    v18 = a4;
    v19 = v17;
    do
    {
      v20 = CFDictionaryContainsKey(v16, *v12);
      v21 = *v12;
      if (v20)
      {
        *v18 = CFDictionaryGetValue(v16, v21);
      }
      else
      {
        CFDictionaryAddValue(v16, v21, (const void *)a6);
        *v18 = a6;
        v15[a6++] = *v12;
      }
      ++v18;
      ++v12;
      --v19;
    }
    while (v19);
  }
  CFRelease(v16);
  v22 = 0;
  v23 = v63;
  do
  {
    v24 = *(_QWORD *)(a1 + 104);
    if (*(_BYTE *)(v24 + 96))
      break;
    do
    {
      v25 = v24;
      v24 = *(_QWORD *)(v24 + 80);
    }
    while (v24);
    if (*(_BYTE *)(*(_QWORD *)(v25 + 8) + 12))
      break;
    if (v22 && dword_1EF19FCC0 >= 5)
    {
      v30 = *__error();
      v31 = _SILogForLogForCategory(13);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v67 = v22;
        _os_log_impl(&dword_1B8270000, v31, OS_LOG_TYPE_DEFAULT, "Looping %ld", buf, 0xCu);
      }
      *__error() = v30;
    }
    bzero(a5, v23);
    v26 = *(unsigned __int8 *)(a2 + 8);
    NodesLazy = (unsigned int *)__CIMatchQueryNodesLazy(a2, v64, a6, (uint64_t)v15, a5, 0, (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 6584) >> 18) & 1, 0, (_BYTE *)(*(_QWORD *)(a1 + 104) + 96));
    if (v26 && !*(_BYTE *)(a2 + 8))
    {
      v28 = *__error();
      v29 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v67 = "processNodes";
        v68 = 1024;
        v69 = 317;
        _os_log_error_impl(&dword_1B8270000, v29, OS_LOG_TYPE_ERROR, "%s:%d: Index became unavailable", buf, 0x12u);
      }
      *__error() = v28;
      *(_BYTE *)(a1 + 1129) = 1;
      v23 = v63;
    }
    if (NodesLazy)
      goto LABEL_34;
    ++v22;
  }
  while (v22 != (const char *)5);
  NodesLazy = 0;
LABEL_34:
  free(v15);
  v32 = *(_QWORD *)(a1 + 104);
  if (*(_BYTE *)(v32 + 96))
  {
    v36 = NodesLazy != 0;
    v34 = v61;
    v33 = v62;
LABEL_42:
    v38 = *(unsigned int *)(a1 + 832);
    if ((_DWORD)v38)
    {
      for (i = 0; i < v38; ++i)
      {
        v40 = *(_QWORD *)(a3 + 8 * i);
        if (v40)
        {
          ContentIndexDocSetCleanupBorrowedChildren(v40);
          ContentIndexDocSetDispose(*(_QWORD *)(a3 + 8 * i));
          v38 = *(unsigned int *)(a1 + 832);
        }
        *(_QWORD *)(a3 + 8 * i) = 0;
      }
    }
    if (v36)
    {
      ContentIndexDocSetContextRelease(NodesLazy);
      for (; a6; --a6)
      {
        if (*a5)
        {
          ContentIndexDocSetCleanupBorrowedChildren(*a5);
          ContentIndexDocSetDispose(*a5);
        }
        ++a5;
      }
    }
    if (v34)
      bzero(v33, v63);
    return 0;
  }
  v34 = v61;
  v33 = v62;
  do
  {
    v35 = v32;
    v32 = *(_QWORD *)(v32 + 80);
  }
  while (v32);
  v36 = NodesLazy != 0;
  if (*(_BYTE *)(*(_QWORD *)(v35 + 8) + 12))
    v37 = 1;
  else
    v37 = NodesLazy == 0;
  if (v37)
    goto LABEL_42;
  if (v61)
  {
    v41 = 0;
    while (1)
    {
      v42 = *((_QWORD *)v62 + v41);
      if (a6 <= v42)
        break;
      v43 = (unsigned int *)a5[v42];
      if (!v43)
      {
        v58 = __si_assert_copy_extra_268();
        v56 = v58;
        v59 = "";
        if (v58)
          v59 = v58;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 351, "cidocs[(size_t)docs[i]]", v59);
        goto LABEL_85;
      }
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 + 1, v43));
      *((_QWORD *)v62 + v41++) = v43;
      if (v41 == v61)
        goto LABEL_63;
    }
    v55 = __si_assert_copy_extra_268();
    v56 = v55;
    v57 = "";
    if (v55)
      v57 = v55;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 350, "(size_t)docs[i]<j", v57);
LABEL_85:
    free(v56);
    if (__valid_fs(-1))
      v60 = 2989;
    else
      v60 = 3072;
    *(_DWORD *)v60 = -559038737;
    abort();
  }
  for (; a6; --a6)
  {
LABEL_63:
    ContentIndexDocSetDispose(*a5);
    *a5++ = 0;
  }
  v45 = *(unsigned int *)(a1 + 832);
  if ((_DWORD)v45)
  {
    v46 = 0;
    for (j = 0; j < v45; ++j)
    {
      v48 = *(_QWORD *)(a3 + 8 * j);
      if (!v48 || !*(_DWORD *)(v48 + 48))
      {
        v49 = *(_QWORD *)(a1 + 840);
        v50 = *(_QWORD **)(v49 + v46);
        if (v50)
        {
          clear_node_field_caches(v50);
          v49 = *(_QWORD *)(a1 + 840);
        }
        v51 = *(_QWORD **)(v49 + v46 + 8);
        if (v51)
        {
          clear_node_field_caches(v51);
          v49 = *(_QWORD *)(a1 + 840);
        }
        v52 = *(_QWORD **)(v49 + v46 + 16);
        if (v52)
        {
          clear_node_field_caches(v52);
          v49 = *(_QWORD *)(a1 + 840);
        }
        v53 = *(_QWORD **)(v49 + v46 + 24);
        if (v53)
          clear_node_field_caches(v53);
        *(_BYTE *)(a1 + 643) = 0;
        v45 = *(unsigned int *)(a1 + 832);
      }
      v46 += 48;
    }
  }
  return NodesLazy;
}

void clear_node_field_caches(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;

  if (*a1)
    clear_node_field_caches();
  if (a1[1])
    clear_node_field_caches();
  v2 = a1[2];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 120);
    if (v3 != -1)
    {
      if (!v3)
      {
LABEL_11:
        v5 = a1[4];
        if (v5 && v2 && (*(_BYTE *)(v2 + 33) & 8) == 0)
        {
          if (v5 != -1)
            ContentIndexDocSetDispose(v5);
          a1[4] = 0;
        }
        return;
      }
      v4 = *(void (**)(void))(v2 + 128);
      if (v4)
      {
        v4();
        v2 = a1[2];
      }
    }
    *(_QWORD *)(v2 + 120) = 0;
    *(_QWORD *)(v2 + 128) = 0;
    goto LABEL_11;
  }
}

uint64_t __CIMatchQueryNodesLazy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, unint64_t a6, unsigned int a7, char a8, _BYTE *a9)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  int v22;
  int *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  _BOOL4 v31;
  unsigned int v32;
  signed int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  int v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD);
  int v53;
  NSObject *v54;
  int v55;
  unsigned int v56;
  char *v57;
  uint64_t *v58;
  unsigned int v59;
  int v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD);
  int v67;
  _DWORD *v68;
  int v69;
  NSObject *v70;
  int v71;
  unsigned int v72;
  int v73;
  NSObject *v74;
  os_log_type_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  malloc_zone_t **v80;
  uint64_t v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE **v85;
  uint64_t v86;
  _OWORD *v87;
  int *v88;
  int *v89;
  __int128 *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char *v94;
  _OWORD *v95;
  unsigned int *v96;
  unint64_t v97;
  void *v98;
  void *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _OWORD *v106;
  _OWORD *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t *v119;
  int v120;
  int v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  unsigned int *v129;
  malloc_zone_t **v130;
  unsigned int *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  int v143;
  signed int v144;
  uint64_t *v145;
  uint64_t v146;
  unsigned int v147;
  unsigned int *v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  size_t v158;
  void *v159;
  uint64_t v160;
  unsigned int *v161;
  unsigned int *v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  size_t v169;
  void *v170;
  uint64_t v171;
  unsigned int *v172;
  unsigned int *v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE *v177;
  uint64_t v178;
  _QWORD *v179;
  _OWORD *v180;
  int v181;
  __int128 *v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;
  char **v187;
  _BYTE *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  malloc_zone_t **v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  char v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  void *v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  _QWORD *v224;
  void *v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  unsigned __int8 *v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  _DWORD *v238;
  uint64_t v239;
  _DWORD *v240;
  unint64_t v241;
  int v242;
  unsigned __int8 *v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  CFTypeRef v248;
  CFTypeRef v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  BOOL v254;
  uint64_t v255;
  size_t v256;
  char *v257;
  char *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unsigned __int8 *v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _DWORD *v270;
  _DWORD *v271;
  uint64_t v272;
  unint64_t v273;
  unsigned __int8 *v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  CFTypeRef v279;
  CFTypeRef v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  size_t v286;
  char *v287;
  char *v288;
  char *v289;
  _BYTE *v290;
  uint64_t v291;
  uint64_t j;
  unsigned int v293;
  uint64_t v294;
  uint64_t v295;
  void (*v296)(_QWORD);
  uint64_t v297;
  uint64_t v298;
  void (*v299)(_QWORD);
  char v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  char *v305;
  char **v306;
  unsigned int *v307;
  char **v308;
  char **v309;
  pthread_rwlock_t *v310;
  int v311;
  NSObject *v312;
  os_log_type_t v313;
  uint64_t i;
  unsigned int v315;
  char *v316;
  char *v317;
  const char *v318;
  const char *v319;
  int v320;
  char *v321;
  const char *v322;
  uint64_t v323;
  char *v324;
  char *v325;
  const char *v326;
  int v327;
  char *v328;
  const char *v329;
  char *v330;
  const char *v331;
  const char *v332;
  char *v333;
  const char *v334;
  uint64_t v335;
  char *v336;
  const char *v337;
  int v338;
  NSObject *v339;
  char *v340;
  const char *v341;
  char *v342;
  const char *v343;
  const char *v344;
  const char *v345;
  const char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  _OWORD *v356;
  uint64_t *v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  _QWORD *v361;
  unint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  uint64_t v367;
  int v368;
  uint64_t v369;
  unsigned int v370;
  unsigned int v371;
  uint64_t v372;
  _QWORD *v373;
  _QWORD *v374;
  _QWORD *v375;
  _BYTE **v376;
  _BOOL4 v377;
  uint64_t v378;
  int v379;
  int v380;
  int v381;
  int v382;
  unsigned int *v384;
  unsigned int v385;
  int v386;
  unsigned int *v387;
  uint64_t *v388;
  unsigned int v389;
  int v390;
  char *v391;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t *v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  char v406;
  signed int v407;
  pthread_rwlock_t *v408;
  char **v409;
  char **v410;
  _BYTE buf[32];
  __int128 v412;
  uint64_t v413;
  uint64_t v414;

  v414 = *MEMORY[0x1E0C80C00];
  v409 = 0;
  v410 = 0;
  v408 = 0;
  if (!*(_BYTE *)(a1 + 8))
    return 0;
  v11 = a5;
  v12 = a4;
  v13 = a3;
  if (a3 < 1)
  {
    v30 = 0;
    v32 = 0;
    v31 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    LOBYTE(v17) = 0;
    do
    {
      v18 = v14;
      v19 = v15;
      v20 = *(unsigned int **)(a4 + 8 * v15);
      v17 = v17 || (v20[1] & 0x3080) != 0;
      v21 = *v20;
      v22 = v21;
      if ((int)v21 < 1)
      {
        v28 = 0;
      }
      else
      {
        v23 = (int *)(v20 + 6);
        v24 = 0;
        do
        {
          v25 = *v23;
          v23 += 4;
          v26 = v25 - 1;
          if (v25 <= 1)
            v27 = 0;
          else
            v27 = v26;
          v24 += v27;
          v28 = v24;
          --v21;
        }
        while (v21);
      }
      v29 = v22 + v18;
      v30 = v28 + v16;
      a5[v19] = 0;
      v15 = v19 + 1;
      v31 = v17;
      v16 += v28;
      v14 = v29;
      v32 = v29;
    }
    while (v15 != a3);
  }
  v34 = v32;
  v35 = v30;
  v377 = v31;
  v407 = v32;
  if (v32 <= 1)
    v36 = 1;
  else
    v36 = v32;
  v375 = malloc_type_malloc(8 * v36, 0x2004093837F09uLL);
  v37 = v34 + v35;
  v376 = (_BYTE **)malloc_type_zone_malloc((malloc_zone_t *)queryZone, (uint64_t)v37 << 6, 0x6085D6BuLL);
  if (!v376)
    _log_fault_for_malloc_failure();
  v38 = v37;
  v390 = v34;
  v391 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 72 * v34, 0x6085D6BuLL);
  if (!v391)
    _log_fault_for_malloc_failure();
  v374 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * v37, 0x6085D6BuLL);
  if (!v374)
    _log_fault_for_malloc_failure();
  v373 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * v37, 0x6085D6BuLL);
  if (!v373)
    _log_fault_for_malloc_failure();
  if (!v377)
    goto LABEL_36;
  if ((((unint64_t)(9 * v37) >> 14) & 0x7FFFFFFFFFFFLL) == 0
    && (unint64_t)(72 * v37) > *MEMORY[0x1E0C85AD8])
  {
    ++sTotal_9538;
  }
  v39 = (uint64_t *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 0x48uLL, v37, 0x31F9A007uLL);
  if (!v39)
  {
    _log_fault_for_malloc_failure();
LABEL_36:
    v39 = 0;
  }
  v388 = v39;
  if ((a8 & 1) == 0)
    db_read_lock(a1 + 14680);
  v40 = *(_QWORD *)(a1 + 14352);
  v41 = *(unsigned int **)(a1 + 14360);
  if (!v40)
    goto LABEL_43;
  do
    v42 = __ldaxr((unsigned int *)v40);
  while (__stlxr(v42 + 1, (unsigned int *)v40));
  if (a6 && *(_QWORD *)(v40 + 584) <= a6)
  {
    v44 = 1;
    v41 = 0;
  }
  else
  {
LABEL_43:
    if (v41)
    {
      do
        v43 = __ldaxr(v41);
      while (__stlxr(v43 + 1, v41));
    }
    v44 = 0;
  }
  v387 = (unsigned int *)v40;
  v386 = v44;
  v384 = v41;
  v389 = *(_DWORD *)(a1 + 52);
  v378 = *(_QWORD *)(a1 + 9648);
  if ((a8 & 1) == 0)
    db_read_unlock(a1 + 14680);
  v385 = a7;
  v406 = 0;
  if (!*(_BYTE *)(a1 + 8))
  {
    v73 = *__error();
    v74 = _SILogForLogForCategory(0);
    v75 = 2 * (gSILogLevels[0] < 4);
    v57 = v391;
    v58 = v388;
    if (os_log_type_enabled(v74, v75))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v74, v75, "Skipping because index is shut down", buf, 2u);
    }
    *__error() = v73;
    v55 = 0;
    v56 = 0;
    goto LABEL_352;
  }
  v372 = v34;
  do
  {
    v45 = __ldxr(exceptionSequenceNum);
    v46 = v45 + 1;
  }
  while (__stxr(v45 + 1, exceptionSequenceNum));
  v47 = setThreadIdAndInfo(-1, (__int128 *)sIndexExceptionCallbacks, a1, 0, v46);
  v404 = HIDWORD(v47);
  v405 = v47;
  v402 = v49;
  v403 = v48;
  v50 = *(_QWORD *)&threadData[18 * v47 + 2];
  v51 = v50 + 320 * HIDWORD(v47);
  *(_BYTE *)(v51 + 216) = 0;
  v381 = *(_DWORD *)(v51 + 312);
  v52 = *(void (**)(_QWORD))(v51 + 224);
  if (v52)
    v52(*(_QWORD *)(v50 + 320 * HIDWORD(v47) + 288));
  v382 = v46;
  if (!_setjmp((int *)v51))
  {
    do
    {
      v59 = __ldxr(exceptionSequenceNum);
      v60 = v59 + 1;
    }
    while (__stxr(v59 + 1, exceptionSequenceNum));
    v61 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v60);
    v400 = HIDWORD(v61);
    v401 = v61;
    v399 = v62;
    v398 = v63;
    v64 = *(_QWORD *)&threadData[18 * v61 + 2];
    v65 = v64 + 320 * HIDWORD(v61);
    v379 = *(_DWORD *)(v65 + 312);
    v66 = *(void (**)(_QWORD))(v65 + 224);
    v57 = v391;
    if (v66)
      v66(*(_QWORD *)(v64 + 320 * HIDWORD(v61) + 288));
    if (_setjmp((int *)v65))
    {
      v67 = v60;
      v68 = (_DWORD *)(v65 + 312);
      v69 = *__error();
      v70 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "__CIMatchQueryNodesLazy";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1141;
        _os_log_error_impl(&dword_1B8270000, v70, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v69;
      *v68 = v379;
      CIOnThreadCleanUpReset(v398);
      dropThreadId(v401, 1, v67);
      CICleanUpReset(v401, v399);
      v71 = 0;
      v72 = 0;
      v58 = v388;
LABEL_349:
      v297 = *(_QWORD *)&threadData[18 * v405 + 2];
      v298 = v297 + 320 * v404;
      *(_DWORD *)(v298 + 312) = v381;
      v299 = *(void (**)(_QWORD))(v298 + 232);
      if (v299)
        v299(*(_QWORD *)(v297 + 320 * v404 + 288));
      dropThreadId(v405, 0, v382);
      v56 = v72;
      v55 = v71;
      goto LABEL_352;
    }
    v380 = v60;
    v406 = 1;
    v397 = v11;
    v393 = v13;
    if (v13 >= 1)
    {
      v76 = 0;
      v77 = v34;
      v78 = 0;
      v79 = 0;
      v80 = (malloc_zone_t **)&unk_1EDBEA000;
      v394 = v12;
      while (1)
      {
        v367 = v78;
        v81 = v79;
        v368 = v76;
        v82 = *(unsigned int **)(v12 + 8 * v79);
        if ((int)*v82 < 1)
          break;
        v369 = v79;
        v83 = 0;
        v84 = v77;
        v85 = v376;
        do
        {
          v86 = v368 + (uint64_t)(int)v83;
          v87 = &v85[8 * v86];
          v88 = (int *)&v82[4 * v83];
          v90 = (__int128 *)*((_QWORD *)v88 + 4);
          v89 = v88 + 8;
          v91 = *v90;
          v92 = v90[1];
          v93 = v90[3];
          v94 = &v391[72 * v86];
          v87[2] = v90[2];
          v87[3] = v93;
          *v87 = v91;
          v87[1] = v92;
          *v94 = 0;
          *((_OWORD *)v94 + 1) = 0u;
          *((_OWORD *)v94 + 2) = 0u;
          *(_OWORD *)(v94 + 44) = 0u;
          *((_QWORD *)v94 + 8) = 0xFFFFFFFFLL;
          *((_DWORD *)v94 + 2) = 0;
          if ((v82[1] & 0x3080) != 0)
          {
            if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
              ++sTotal_4476;
            v95 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
            if (!v95 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
            }
            v388[v86] = (uint64_t)v95;
            *(_BYTE *)v95 = 0;
            v95[1] = 0u;
            v95[2] = 0u;
            *(_OWORD *)((char *)v95 + 44) = 0u;
            *((_QWORD *)v95 + 8) = 0xFFFFFFFFLL;
            *((_DWORD *)v95 + 2) = 0;
          }
          v373[v86] = v94;
          if (*MEMORY[0x1E0C85AD8] <= 0x97uLL)
            ++sTotal_4476;
          v96 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
          if (!v96 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
          }
          atomic_store(1u, v96);
          v96[1] = -1073627135;
          *((_QWORD *)v96 + 7) = a1;
          v96[12] = 0;
          *((_QWORD *)v96 + 5) = -1;
          v375[v86] = v96;
          v96[13] = v82[2];
          v97 = *MEMORY[0x1E0C85AD8];
          if ((v82[1] & 0x3080) != 0)
          {
            if (v97 <= 0xEF)
              ++sTotal_4476;
            v98 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0xF0uLL, 0x31F9A007uLL);
            v99 = v98;
            v100 = 8;
          }
          else
          {
            if (v97 <= 0x107)
              ++sTotal_4476;
            v98 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x108uLL, 0x31F9A007uLL);
            v99 = v98;
            v100 = 3;
          }
          v101 = v100;
          if (!v98)
          {
            v101 = v100;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
            }
            v99 = 0;
          }
          *(_QWORD *)(v375[v86] + 64) = v99;
          v102 = v375[v86];
          *(_DWORD *)(v102 + 48) = v101;
          v103 = *(_QWORD *)(v102 + 64);
          v374[v86] = v103;
          *(_QWORD *)(v103 + 32) = v367;
          if (*(v89 - 2) < 2)
          {
            v113 = v84;
            v85 = v376;
          }
          else
          {
            v104 = 0;
            v105 = 0;
            v85 = v376;
            do
            {
              v374[(int)v84 + v104] = v374[v86];
              v106 = &(&v376[8 * (uint64_t)(int)v84])[v104 * 8];
              v107 = (_OWORD *)(*(_QWORD *)v89 + 1 * v104);
              v108 = v107[4];
              v109 = v107[5];
              v110 = v107[7];
              v106[2] = v107[6];
              v106[3] = v110;
              *v106 = v108;
              v106[1] = v109;
              v373[(int)v84 + v104++] = v373[v86];
              v111 = v105 + 1;
              v112 = v105 + 2;
              ++v105;
            }
            while (v112 < *(v89 - 2));
            v113 = (int)v84 + v111;
          }
          ++v83;
          v84 = v113;
        }
        while (v83 < (int)*v82);
        v114 = *v82;
        v115 = v114;
        if ((_DWORD)v114 == 1)
        {
          v116 = v375[v368];
          v77 = v113;
          v11 = v397;
          v13 = v393;
LABEL_103:
          v80 = (malloc_zone_t **)&unk_1EDBEA000;
          v57 = v391;
          goto LABEL_104;
        }
        v11 = v397;
        v80 = (malloc_zone_t **)&unk_1EDBEA000;
        v81 = v369;
        if ((int)v114 < 2)
        {
          v117 = v113;
          v13 = v393;
          v57 = v391;
          goto LABEL_127;
        }
        v118 = v82[1];
        if ((v118 & 0x80) != 0)
        {
          v133 = &v375[v368];
          v134 = v133;
          v135 = *v82;
          v136 = 0;
          v13 = v393;
          v57 = v391;
          do
          {
            v137 = *v134;
            if (!*v134)
              goto LABEL_152;
            v138 = *(_DWORD *)(v137 + 48);
            if (!v138)
            {
              if (*MEMORY[0x1E0C85AD8] <= 0x97uLL)
                ++sTotal_4476;
              v146 = *(_QWORD *)(v137 + 56);
              v147 = *(_DWORD *)(v137 + 16);
              v148 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
              if (!v148)
              {
                _log_fault_for_malloc_failure();
                v148 = 0;
              }
              atomic_store(1u, v148);
              v148[1] = -1073627135;
              *((_QWORD *)v148 + 7) = v146;
              v148[12] = 0;
              *((_QWORD *)v148 + 5) = -1;
              v148[5] = v147;
              v129 = v148;
              v80 = (malloc_zone_t **)&unk_1EDBEA000;
              goto LABEL_191;
            }
            if (v138 == 1)
              v139 = v136 + 1;
            else
              v139 = v136;
            v136 = v139;
            ++v134;
            --v135;
          }
          while (v135);
          v140 = *v133;
          if (v139 == v114)
          {
            if (v140)
            {
              do
                v141 = __ldaxr((unsigned int *)v140);
              while (__stlxr(v141 + 1, (unsigned int *)v140));
              v129 = (unsigned int *)v140;
            }
            else
            {
LABEL_152:
              v129 = 0;
            }
LABEL_191:
            LODWORD(v115) = *v82;
            if ((int)*v82 < 1)
              goto LABEL_195;
            v166 = 0;
            do
            {
              v167 = v166;
              ContentIndexDocSetDispose(v133[v166]);
              v166 = v167 + 1;
              v115 = (int)*v82;
            }
            while (v167 + 1 < v115);
LABEL_194:
            v77 = v113;
            v116 = (uint64_t)v129;
            v80 = (malloc_zone_t **)&unk_1EDBEA000;
LABEL_104:
            v81 = v369;
            goto LABEL_133;
          }
          v352 = *v82;
          if (*MEMORY[0x1E0C85AD8] <= 0x97uLL)
            ++sTotal_4476;
          v157 = *(_QWORD *)(v140 + 56);
          v129 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
          if (!v129)
            _log_fault_for_malloc_failure();
          atomic_store(1u, v129);
          v129[1] = -1073627135;
          *((_QWORD *)v129 + 7) = v157;
          v129[12] = 9;
          v158 = 8 * v352;
          *((_QWORD *)v129 + 5) = -1;
          if (!(v352 >> 14) && *MEMORY[0x1E0C85AD8] < v158)
            ++sTotal_4476;
          v159 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v158, 0x31F9A007uLL);
          if (!v159)
            _log_fault_for_malloc_failure();
          *((_QWORD *)v129 + 9) = v159;
          v160 = 0;
          v80 = (malloc_zone_t **)&unk_1EDBEA000;
          while (2)
          {
            v161 = (unsigned int *)v133[v160];
            v162 = v161;
            if (v161)
            {
              if (v161[12] != 1)
              {
                do
                  v163 = __ldaxr(v162);
                while (__stlxr(v163 + 1, v162));
                goto LABEL_189;
              }
            }
            else
            {
LABEL_189:
              v164 = *((_QWORD *)v129 + 9);
              v165 = v129[24];
              v129[24] = v165 + 1;
              *(_QWORD *)(v164 + 8 * v165) = v162;
            }
            if (++v160 == v352)
              goto LABEL_191;
            continue;
          }
        }
        v13 = v393;
        if ((v118 & 0x3000) != 0)
        {
          v119 = &v375[v368];
          v120 = (v118 >> 13) & 1;
          if ((v118 & 0x1000) != 0)
            v120 = 2;
          if ((~(_WORD)v118 & 0x3000) != 0)
            v121 = v120;
          else
            v121 = 3;
          v122 = &v375[v368];
          v123 = 0;
          v57 = v391;
          do
          {
            v124 = *v122;
            if (!*v122)
              goto LABEL_160;
            v125 = *(_DWORD *)(v124 + 48);
            if (!v125)
            {
              if (*MEMORY[0x1E0C85AD8] <= 0x97uLL)
                ++sTotal_4476;
              v149 = *(_QWORD *)(v124 + 56);
              v150 = *(_DWORD *)(v124 + 16);
              v151 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
              if (!v151)
              {
                _log_fault_for_malloc_failure();
                v151 = 0;
              }
              atomic_store(1u, v151);
              v151[1] = -1073627135;
              *((_QWORD *)v151 + 7) = v149;
              v151[12] = 0;
              *((_QWORD *)v151 + 5) = -1;
              v151[5] = v150;
              v129 = v151;
              goto LABEL_166;
            }
            if (v125 == 1)
              v126 = v123 + 1;
            else
              v126 = v123;
            v123 = v126;
            ++v122;
            --v115;
          }
          while (v115);
          v127 = *v119;
          if (v126 == v114)
          {
            if (v127)
            {
              v80 = (malloc_zone_t **)&unk_1EDBEA000;
              do
                v128 = __ldaxr((unsigned int *)v127);
              while (__stlxr(v128 + 1, (unsigned int *)v127));
              v129 = (unsigned int *)v127;
LABEL_167:
              LODWORD(v115) = *v82;
              if ((int)*v82 >= 1)
              {
                v152 = 0;
                do
                {
                  v153 = v152;
                  ContentIndexDocSetDispose(v119[v152]);
                  v152 = v153 + 1;
                }
                while (v153 + 1 < (int)*v82);
                LODWORD(v115) = *v82;
                goto LABEL_194;
              }
LABEL_195:
              v77 = v113;
              v116 = (uint64_t)v129;
              goto LABEL_104;
            }
LABEL_160:
            v129 = 0;
LABEL_166:
            v80 = (malloc_zone_t **)&unk_1EDBEA000;
            goto LABEL_167;
          }
          v353 = *v82;
          if (*MEMORY[0x1E0C85AD8] <= 0x97uLL)
            ++sTotal_4476;
          v168 = *(_QWORD *)(v127 + 56);
          v129 = (unsigned int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x98uLL, 0x31F9A007uLL);
          if (!v129)
            _log_fault_for_malloc_failure();
          atomic_store(1u, v129);
          v129[1] = -1073627135;
          *((_QWORD *)v129 + 7) = v168;
          v129[12] = 9;
          *((_QWORD *)v129 + 5) = -1;
          v169 = 8 * v353;
          v129[9] = v121;
          if (!(v353 >> 14) && *MEMORY[0x1E0C85AD8] < v169)
            ++sTotal_4476;
          v170 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v169, 0x31F9A007uLL);
          v57 = v391;
          if (!v170)
            _log_fault_for_malloc_failure();
          *((_QWORD *)v129 + 9) = v170;
          v171 = 0;
          v80 = (malloc_zone_t **)&unk_1EDBEA000;
          while (1)
          {
            v172 = (unsigned int *)v119[v171];
            v173 = v172;
            if (!v172)
              goto LABEL_210;
            if (v172[12] != 1)
              break;
LABEL_211:
            if (++v171 == v353)
              goto LABEL_167;
          }
          do
            v174 = __ldaxr(v173);
          while (__stlxr(v174 + 1, v173));
LABEL_210:
          v175 = *((_QWORD *)v129 + 9);
          v176 = v129[24];
          v129[24] = v176 + 1;
          *(_QWORD *)(v175 + 8 * v176) = v173;
          goto LABEL_211;
        }
        v145 = &v375[v368];
        if ((v118 & 0x400000) != 0)
          v116 = ContentIndexDocSetUnionLazy(v114, v145, 0.0);
        else
          v116 = (uint64_t)ContentIndexDocSetIntersectionLazy(v114, (unsigned int **)v145, 0.0);
        v154 = v116;
        LODWORD(v115) = *v82;
        if ((int)*v82 >= 1)
        {
          v155 = 0;
          do
          {
            v156 = v155;
            ContentIndexDocSetDispose(v375[v368 + v155]);
            v155 = v156 + 1;
          }
          while (v156 + 1 < (int)*v82);
          LODWORD(v115) = *v82;
          v77 = v113;
          v116 = v154;
          goto LABEL_103;
        }
        v80 = (malloc_zone_t **)&unk_1EDBEA000;
        v77 = v113;
        v57 = v391;
LABEL_133:
        v11[v81] = v116;
        v132 = v367;
        v12 = v394;
        v34 = v390;
        if (!v81)
        {
          v132 = 0;
          switch(*(_DWORD *)(v116 + 48))
          {
            case 0:
            case 1:
            case 2:
              break;
            case 3:
            case 8:
              v142 = *(_QWORD *)(v116 + 64);
              if (v142)
                v132 = v142 + 88;
              else
                v132 = 0;
              break;
            case 4:
            case 5:
            case 6:
            case 7:
            case 9:
              v132 = v116 + 80;
              break;
            default:
              assert_invalid_doc_type((_DWORD *)v116);
          }
        }
        v78 = v132;
        v143 = v368 + v115;
        v79 = v81 + 1;
        v76 = v368 + v115;
        v144 = v77;
        if (v79 == v13)
          goto LABEL_214;
      }
      v117 = v77;
LABEL_127:
      if (*MEMORY[0x1E0C85AD8] <= 0x97uLL)
        ++sTotal_4476;
      v130 = v80;
      v131 = (unsigned int *)malloc_type_zone_calloc(v80[114], 1uLL, 0x98uLL, 0x31F9A007uLL);
      if (!v131 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      atomic_store(1u, v131);
      v131[1] = -1073627135;
      *((_QWORD *)v131 + 7) = a1;
      v131[12] = 0;
      *((_QWORD *)v131 + 5) = -1;
      v131[5] = 0;
      LODWORD(v115) = *v82;
      v77 = v117;
      v116 = (uint64_t)v131;
      v80 = v130;
      goto LABEL_133;
    }
    v143 = 0;
    v144 = v34;
LABEL_214:
    v407 = 0;
    if (v34 <= v143)
    {
      v177 = a9;
    }
    else
    {
      v177 = a9;
      if (v34 < v144)
      {
        v178 = v144 - v372;
        v179 = &v374[v372];
        v180 = &v376[8 * v372];
        v181 = 2 * v34 - v143;
        do
        {
          v182 = (__int128 *)&v376[8 * (uint64_t)v181];
          v183 = *v182;
          v184 = v182[1];
          v185 = v182[3];
          v180[2] = v182[2];
          v180[3] = v185;
          *v180 = v183;
          v180[1] = v184;
          v180 += 4;
          *v179++ = v374[v181++];
          --v178;
        }
        while (v178);
      }
      v144 -= v34 - v143;
    }
    v58 = v388;
    if (*v177)
    {
      v71 = 0;
      v72 = 0;
LABEL_346:
      v294 = *(_QWORD *)&threadData[18 * v401 + 2];
      v295 = v294 + 320 * v400;
      *(_DWORD *)(v295 + 312) = v379;
      v296 = *(void (**)(_QWORD))(v295 + 232);
      if (v296)
        v296(*(_QWORD *)(v294 + 320 * v400 + 288));
      dropThreadId(v401, 0, v380);
      goto LABEL_349;
    }
    v186 = (uint64_t)CICleanUpThreadLoc();
    v187 = 0;
    v347 = v186;
    v188 = v177;
    v189 = threadData[18 * v186 + 8];
    if (v377)
      v187 = (char **)&v409;
    v370 = v144;
    indexFindBulk(a1, a2, v144, (uint64_t)v376, (uint64_t)v373, v388, v386, v385, v188, (char **)&v410, v187, &v408);
    v58 = v388;
    v371 = *(_DWORD *)(a1 + 60);
    if (v143 >= 1)
    {
      v395 = v12;
      v366 = v189;
      v365 = v143;
      v190 = 0;
      v191 = 0;
      v192 = (malloc_zone_t **)&unk_1EDBEA000;
      do
      {
        v354 = v190;
        if (v58 && v58[v191])
        {
          v364 = v191;
          v193 = malloc_type_zone_malloc(v192[114], 0x48uLL, 0x6085D6BuLL);
          v363 = v193;
          if (v193)
          {
            v194 = (uint64_t)v193;
          }
          else
          {
            _log_fault_for_malloc_failure();
            v194 = 0;
          }
          v205 = CICleanUpPush(v347, (uint64_t)MEMORY[0x1E0C834A8], v194);
          v206 = malloc_type_zone_malloc(v192[114], 0x40uLL, 0x6085D6BuLL);
          v361 = v206;
          if (v206)
          {
            v207 = (uint64_t)v206;
          }
          else
          {
            _log_fault_for_malloc_failure();
            v207 = 0;
          }
          v360 = CICleanUpPush(v347, (uint64_t)MEMORY[0x1E0C834A8], v207);
          v208 = (uint64_t)v363;
          v209 = &v57[72 * v364];
          v210 = *((_QWORD *)v209 + 4);
          *(_BYTE *)v363 = 0;
          v363[4] = 0;
          v357 = v363 + 4;
          v363[5] = 0;
          v211 = v210 + 2;
          v363[3] = v210 + 2;
          if (v210 == -2)
          {
            v213 = 0;
          }
          else
          {
            v212 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 16 * v211, 0x6085D6BuLL);
            v208 = (uint64_t)v363;
            v213 = v212;
            if (!v212)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
              }
              v213 = 0;
              v208 = (uint64_t)v363;
            }
          }
          *(_QWORD *)(v208 + 16) = v213;
          v356 = (_OWORD *)(v208 + 16);
          *(_QWORD *)(v208 + 48) = 0;
          *(_DWORD *)(v208 + 56) = 0;
          *(_QWORD *)(v208 + 64) = 0xFFFFFFFFLL;
          *(_DWORD *)(v208 + 8) = 0;
          v358 = CICleanUpPush(v347, (uint64_t)oqdispose_PositionOffset_t, v208);
          v361[3] = 0;
          v361[4] = 0;
          v361[2] = v211;
          if (v210 == -2)
          {
            v214 = 0;
          }
          else
          {
            v214 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 56 * v211, 0x6085D6BuLL);
            if (!v214)
            {
              _log_fault_for_malloc_failure();
              v214 = 0;
            }
          }
          v361[1] = v214;
          v361[5] = 0;
          v355 = &v57[72 * v364];
          *((_DWORD *)v361 + 12) = 0;
          v361[7] = 0xFFFFFFFFLL;
          *(_DWORD *)v361 = 0;
          v362 = v205;
          v359 = CICleanUpPush(v347, (uint64_t)oqdispose_AnnotatedPositionOffset_t, (uint64_t)v361);
          if (*a9)
          {
            v215 = v354;
            v216 = v364;
          }
          else
          {
            v216 = v364;
            if (v210 != *(_QWORD *)(v388[v364] + 32))
            {
              v333 = __si_assert_copy_extra_268();
              v317 = v333;
              v334 = "";
              if (v333)
                v334 = v333;
              v343 = "payloadQCount == oqcount(positions[i])";
              v345 = v334;
              v319 = "CIQuery.c";
              v320 = 1034;
LABEL_407:
              __message_assert("%s:%u: failed assertion '%s' %s ", v319, v320, v343, v345);
              free(v317);
              if (__valid_fs(-1))
                v323 = 2989;
              else
                v323 = 3072;
              *(_DWORD *)v323 = -559038737;
              abort();
            }
            v230 = v210;
            if (*v209)
            {
              if (!*(_BYTE *)v363)
              {
                if (*v357)
                {
                  v336 = __si_assert_copy_extra_268();
                  v317 = v336;
                  v337 = "";
                  if (v336)
                    v337 = v336;
                  v343 = "queue->just_offsets.count == 0";
                  v345 = v337;
                  v319 = "OQueue.h";
                  v320 = 697;
                  goto LABEL_407;
                }
                oqdispose_PositionOffset_t((unsigned __int8 *)v363);
                *(_OWORD *)((char *)v356 + 28) = 0u;
                *v356 = 0u;
                v356[1] = 0u;
                v363[8] = 0xFFFFFFFFLL;
                *((_DWORD *)v363 + 2) = 0;
                v216 = v364;
              }
              if (v210 >= 1)
              {
                v231 = 0;
                v351 = &v391[72 * v216 + 16];
                v232 = 0;
                v233 = v354;
                while (1)
                {
                  v234 = (unsigned __int8 *)v388[v216];
                  v235 = *v234;
                  v236 = *((_QWORD *)v234 + 2);
                  if (v235)
                    v237 = v231;
                  else
                    v237 = v232;
                  if (*(_QWORD *)(v236 + v237))
                  {
                    v238 = CIIndexSetCreateWithRange(0, v371, 1);
                    if (*v355)
                      v239 = v231;
                    else
                      v239 = v232;
                    if (!*v355)
                    {
                      v316 = __si_assert_copy_extra_268();
                      v317 = v316;
                      v318 = "";
                      if (v316)
                        v318 = v316;
                      v343 = "oqueue->has_meta";
                      v345 = v318;
                      v319 = "OQueue.h";
                      v320 = 318;
                      goto LABEL_407;
                    }
                    v240 = v238;
                    v241 = *(_QWORD *)(*(_QWORD *)v351 + v239);
                    v242 = *(_DWORD *)(*(_QWORD *)v351 + 16 * v364 + 8);
                    v243 = (unsigned __int8 *)v388[v364];
                    v244 = *v243;
                    v245 = *((_QWORD *)v243 + 2);
                    if (v244)
                      v246 = v231;
                    else
                      v246 = v232;
                    v247 = *(_QWORD *)(v245 + v246);
                    v248 = instr_retain(v238);
                    if (!*(_BYTE *)v363)
                    {
                      v321 = __si_assert_copy_extra_268();
                      v317 = v321;
                      v322 = "";
                      if (v321)
                        v322 = v321;
                      v343 = "oqueue->has_meta";
                      v345 = v322;
                      v319 = "OQueue.h";
                      v320 = 584;
                      goto LABEL_407;
                    }
                    v249 = v248;
                    if (*((_DWORD *)v363 + 14))
                    {
                      if (v363[8] < v241)
                      {
                        v324 = __si_assert_copy_extra_268();
                        v325 = v324;
                        v326 = "";
                        if (v324)
                          v326 = v324;
                        v344 = "!queue->split || queue->splitPoint >= PositionOffsetWithMeta_t_GET_VALUE(value)";
                        v346 = v326;
                        v327 = 504;
                        goto LABEL_424;
                      }
                      if (v363[4] >= v363[3])
                      {
                        v340 = __si_assert_copy_extra_268();
                        v317 = v340;
                        v341 = "";
                        if (v340)
                          v341 = v340;
                        v343 = "!queue->split";
                        v345 = v341;
                        v319 = "OQueue.h";
                        v320 = 504;
                        goto LABEL_407;
                      }
                      v250 = *(char **)v356;
                      v251 = v363[4];
                    }
                    else
                    {
                      v252 = v363[3];
                      v250 = (char *)v363[2];
                      if (v363[4] >= v252)
                      {
                        v349 = v233;
                        v253 = 2 * v252;
                        v254 = v252 == 0;
                        v255 = 4;
                        if (!v254)
                          v255 = v253;
                        v363[3] = v255;
                        v256 = 24 * v255;
                        if (v250)
                          v257 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v250, v256, 0xECA6AA46uLL);
                        else
                          v257 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v256, 0x8DDAA030uLL);
                        v258 = v257;
                        if (!v257)
                          _log_fault_for_malloc_failure();
                        *(_QWORD *)v356 = v258;
                        v251 = *v357;
                        v250 = v258;
                        v233 = v349;
                      }
                      else
                      {
                        v251 = v363[4];
                      }
                    }
                    *v357 = v251 + 1;
                    v259 = &v250[24 * v251];
                    *(_QWORD *)v259 = v241;
                    *((_QWORD *)v259 + 1) = v240;
                    *((_DWORD *)v259 + 4) = v242;
                    ++v233;
                    *((_DWORD *)v259 + 5) = 0;
                    *(_QWORD *)buf = v247;
                    *(_QWORD *)&buf[8] = v249;
                    *(_QWORD *)&buf[24] = 0;
                    *(_QWORD *)&v412 = 0;
                    *(_QWORD *)&buf[16] = 0;
                    BYTE8(v412) = 0;
                    *(_DWORD *)((char *)&v412 + 9) = 0;
                    HIDWORD(v412) = 0;
                    v413 = 0;
                    oqpush_AnnotatedPositionOffset_t((uint64_t)v361, (uint64_t)buf);
                    v13 = v393;
                    v216 = v364;
                  }
                  v232 += 8;
                  v231 += 16;
                  v215 = v233;
                  if (!--v230)
                    goto LABEL_250;
                }
              }
            }
            else if (v210 >= 1)
            {
              v260 = 0;
              v261 = 0;
              v262 = v354;
              while (1)
              {
                v263 = v262;
                v264 = v230;
                v265 = (unsigned __int8 *)v388[v216];
                v266 = *v265;
                v267 = *((_QWORD *)v265 + 2);
                if (v266)
                  v268 = v261;
                else
                  v268 = v260;
                if (*(_QWORD *)(v267 + v268))
                {
                  v348 = v263;
                  v269 = v216;
                  v270 = CIIndexSetCreateWithRange(0, v371, 1);
                  v271 = v270;
                  if (*v355)
                    v272 = v261;
                  else
                    v272 = v260;
                  v273 = *(_QWORD *)(*(_QWORD *)&v391[72 * v364 + 16] + v272);
                  v274 = (unsigned __int8 *)v388[v269];
                  v275 = *v274;
                  v276 = *((_QWORD *)v274 + 2);
                  if (v275)
                    v277 = v261;
                  else
                    v277 = v260;
                  v278 = *(_QWORD *)(v276 + v277);
                  v279 = instr_retain(v270);
                  if (*(_BYTE *)v363)
                  {
                    v328 = __si_assert_copy_extra_268();
                    v325 = v328;
                    v329 = "";
                    if (v328)
                      v329 = v328;
                    v344 = "!oqueue->has_meta";
                    v346 = v329;
                    v327 = 578;
LABEL_424:
                    __message_assert("%s:%u: failed assertion '%s' %s ", "OQueue.h", v327, v344, v346);
                    free(v325);
                    if (__valid_fs(-1))
                      v335 = 2989;
                    else
                      v335 = 3072;
                    *(_DWORD *)v335 = -559038737;
                    abort();
                  }
                  v280 = v279;
                  if (*((_DWORD *)v363 + 14))
                  {
                    if (v363[8] < v273)
                    {
                      v330 = __si_assert_copy_extra_268();
                      v325 = v330;
                      v331 = "";
                      if (v330)
                        v331 = v330;
                      v332 = "!queue->split || queue->splitPoint >= JustPositionOffset_t_GET_VALUE(value)";
                      goto LABEL_420;
                    }
                    if (v363[4] >= v363[3])
                    {
                      v342 = __si_assert_copy_extra_268();
                      v325 = v342;
                      v331 = "";
                      if (v342)
                        v331 = v342;
                      v332 = "!queue->split";
LABEL_420:
                      v344 = v332;
                      v346 = v331;
                      v327 = 495;
                      goto LABEL_424;
                    }
                    v281 = *(char **)v356;
                    v282 = v363[4];
                  }
                  else
                  {
                    v283 = v363[3];
                    v281 = (char *)v363[2];
                    if (v363[4] >= v283)
                    {
                      v284 = 2 * v283;
                      v254 = v283 == 0;
                      v285 = 4;
                      if (!v254)
                        v285 = v284;
                      v363[3] = v285;
                      v286 = 16 * v285;
                      if (v281)
                        v287 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, v281, v286, 0xECA6AA46uLL);
                      else
                        v287 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v286, 0x8DDAA030uLL);
                      v288 = v287;
                      if (!v287)
                        _log_fault_for_malloc_failure();
                      *(_QWORD *)v356 = v288;
                      v282 = *v357;
                      v281 = v288;
                    }
                    else
                    {
                      v282 = v363[4];
                    }
                  }
                  *v357 = v282 + 1;
                  v289 = &v281[16 * v282];
                  *(_QWORD *)v289 = v273;
                  *((_QWORD *)v289 + 1) = v271;
                  *(_QWORD *)buf = v278;
                  *(_QWORD *)&buf[8] = v280;
                  *(_OWORD *)&buf[16] = 0u;
                  v412 = 0u;
                  v413 = 0;
                  oqpush_AnnotatedPositionOffset_t((uint64_t)v361, (uint64_t)buf);
                  v263 = v348 + 1;
                  v13 = v393;
                  v216 = v364;
                }
                v262 = v263;
                v260 += 8;
                v261 += 16;
                v215 = v263;
                v230 = v264 - 1;
                if (v264 == 1)
                  goto LABEL_250;
              }
            }
            v215 = v354;
          }
LABEL_250:
          v350 = v215;
          v217 = v216;
          oqdispose((uint64_t)v355);
          oqdispose(v388[v217]);
          free((void *)v388[v217]);
          v388[v217] = 0;
          v218 = *(_QWORD *)(v375[v217] + 64);
          v219 = *(_QWORD *)(a1 + 72);
          v220 = atomic_load((unsigned int *)(a1 + 28));
          *(_OWORD *)(v218 + 120) = *(_OWORD *)v363;
          v221 = *((_OWORD *)v363 + 1);
          v222 = *((_OWORD *)v363 + 2);
          v223 = *((_OWORD *)v363 + 3);
          *(_QWORD *)(v218 + 184) = v363[8];
          *(_OWORD *)(v218 + 168) = v223;
          *(_OWORD *)(v218 + 152) = v222;
          *(_OWORD *)(v218 + 136) = v221;
          *(_BYTE *)(v218 + 192) = 0;
          *(_OWORD *)(v218 + 208) = xmmword_1B8631FF0;
          v224 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x120uLL, 0x6085D6BuLL);
          if (!v224 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
          }
          *(_QWORD *)(v218 + 200) = v224;
          *v224 = 0;
          v224[1] = 0;
          *(_QWORD *)(v218 + 40) = PayloadIterate__Positions;
          *(_QWORD *)(v218 + 48) = 0;
          *(_QWORD *)(v218 + 56) = PayloadIterator__Positions_UpdateSet;
          *(_QWORD *)(v218 + 224) = 0;
          *(_QWORD *)(v218 + 232) = 0;
          *(_BYTE *)(v218 + 80) = (v220 & 4) != 0;
          *(_QWORD *)(v218 + 8) = 0;
          *(_QWORD *)(v218 + 16) = 0;
          *(_QWORD *)v218 = 0;
          *(_QWORD *)(v218 + 96) = 0;
          *(_QWORD *)(v218 + 104) = v219;
          *(_QWORD *)(v218 + 88) = CIIndexSetCreateWithRange(0, v371, 0);
          *(_BYTE *)(v218 + 81) = 0;
          CICleanUpClearItem(v347, v358);
          v225 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0xC8uLL, 0x6085D6BuLL);
          v11 = v397;
          if (!v225)
            _log_fault_for_malloc_failure();
          *(_QWORD *)(v375[v364] + 72) = v225;
          v226 = *(_QWORD *)(v375[v364] + 72);
          v227 = *(_OWORD *)v361;
          v228 = *((_OWORD *)v361 + 1);
          v229 = *((_OWORD *)v361 + 2);
          *(_OWORD *)(v226 + 104) = *((_OWORD *)v361 + 3);
          *(_OWORD *)(v226 + 88) = v229;
          *(_OWORD *)(v226 + 72) = v228;
          *(_OWORD *)(v226 + 56) = v227;
          *(_OWORD *)(v226 + 128) = xmmword_1B8631BB0;
          *(_QWORD *)(v226 + 120) = 0;
          *(_OWORD *)v226 = xmmword_1B8632000;
          *(_BYTE *)(v226 + 144) = 0;
          *(_QWORD *)(v226 + 40) = 0;
          *(_DWORD *)(v226 + 148) = 0;
          *(_DWORD *)(v226 + 48) = 0;
          *(_QWORD *)(v226 + 160) = 0;
          *(_DWORD *)(v226 + 168) = 0;
          *(_QWORD *)(v226 + 16) = 0;
          *(_QWORD *)(v226 + 24) = 0;
          *(_QWORD *)(v226 + 176) = 0;
          *(_QWORD *)(v226 + 184) = 0;
          *(_QWORD *)(*(_QWORD *)(v375[v364] + 72) + 192) = v378;
          CICleanUpClearItem(v347, v359);
          v407 = v364 + 1;
          free(v363);
          free(v361);
          CICleanUpClearItem(v347, v362);
          CICleanUpClearItem(v347, v360);
          CICleanUpReset(v347, v366);
          v191 = v364 + 1;
          v204 = v350;
          v57 = v391;
        }
        else
        {
          v195 = *(_QWORD *)(v375[v191] + 64);
          v196 = &v57[72 * v191];
          v197 = *(_QWORD *)(a1 + 72);
          v198 = atomic_load((unsigned int *)(a1 + 28));
          *(_OWORD *)(v195 + 160) = *(_OWORD *)v196;
          v199 = *((_OWORD *)v196 + 1);
          v200 = *((_OWORD *)v196 + 2);
          v201 = *((_OWORD *)v196 + 3);
          *(_QWORD *)(v195 + 224) = *((_QWORD *)v196 + 8);
          *(_OWORD *)(v195 + 192) = v200;
          *(_OWORD *)(v195 + 208) = v201;
          *(_OWORD *)(v195 + 176) = v199;
          *(_BYTE *)(v195 + 232) = 0;
          *(_OWORD *)(v195 + 248) = xmmword_1B8631BF0;
          v202 = v191;
          v203 = malloc_type_zone_malloc(v192[114], 0x110uLL, 0x6085D6BuLL);
          if (!v203 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
          }
          *(_QWORD *)(v195 + 240) = v203;
          *v203 = 0;
          *(_QWORD *)(v195 + 40) = PayloadIterate;
          *(_QWORD *)(v195 + 48) = PayloadIterator_ConsumeUpdates;
          *(_QWORD *)(v195 + 56) = PayloadIterate_UpdateSet;
          *(_QWORD *)(v195 + 112) = v197;
          *(_BYTE *)(v195 + 80) = (v198 & 4) != 0;
          *(_QWORD *)(v195 + 8) = 0;
          *(_QWORD *)(v195 + 16) = 0;
          *(_QWORD *)v195 = 0;
          *(_QWORD *)(v195 + 88) = CIIndexSetCreateWithRange(0, v371, 0);
          *(_QWORD *)(v195 + 96) = CIIndexSetCreateWithRange(0, v371, 0);
          *(_DWORD *)(v195 + 104) = 0;
          *(_BYTE *)(v195 + 81) = 0;
          *(_BYTE *)(v195 + 64) = 0;
          *(_OWORD *)(v195 + 128) = 0u;
          *(_OWORD *)(v195 + 144) = 0u;
          v191 = v202 + 1;
          v204 = v354;
          v407 = v202 + 1;
        }
        v190 = v204;
        v192 = (malloc_zone_t **)&unk_1EDBEA000;
        v58 = v388;
      }
      while (v191 < v365);
      v12 = v395;
      if (v204 && !*a9 && dword_1EF19FC90 >= 5)
      {
        v338 = *__error();
        v339 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v339, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = a1;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v204;
          _os_log_impl(&dword_1B8270000, v339, OS_LOG_TYPE_DEFAULT, "### position index set count %p %ld", buf, 0x16u);
        }
        *__error() = v338;
        v11 = v397;
        v12 = v395;
        v13 = v393;
        v57 = v391;
        v58 = v388;
      }
    }
    if (v387)
    {
      v290 = a9;
      if (*a9)
      {
LABEL_330:
        v71 = 0;
        goto LABEL_337;
      }
      if (v386)
        v291 = a6;
      else
        v291 = 0;
      if ((termUpdateSetResolveQueryInfo((uint64_t)v387, v370, v376, (uint64_t)v374, 0, v291, 0) & 1) == 0)
      {
        if (v390 >= 1)
        {
          for (i = 0; i != v390; ++i)
          {
            if (*(_DWORD *)(v375[i] + 48) == 8)
            {
              do
                v315 = __ldaxr(v387);
              while (__stlxr(v315 + 1, v387));
              *(_QWORD *)(v375[i] + 80) = v387;
              *(_QWORD *)(v375[i] + 96) = TermUpdateSetRelease;
            }
          }
        }
        goto LABEL_330;
      }
      v71 = 1;
    }
    else
    {
      v71 = 0;
      v290 = a9;
    }
LABEL_337:
    if (v384)
    {
      if (!*v290)
      {
        termUpdateSetResolveQueryInfo((uint64_t)v384, v370, v376, (uint64_t)v374, 1, 0, 0);
        if (v390 >= 1)
        {
          for (j = 0; j != v390; ++j)
          {
            if (*(_DWORD *)(v375[j] + 48) == 8)
            {
              do
                v293 = __ldaxr(v384);
              while (__stlxr(v293 + 1, v384));
              *(_QWORD *)(v375[j] + 88) = v384;
              *(_QWORD *)(v375[j] + 96) = TermUpdateSetRelease;
            }
          }
        }
      }
    }
    v72 = v371;
    goto LABEL_346;
  }
  v53 = *__error();
  v54 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "__CIMatchQueryNodesLazy";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1142;
    _os_log_error_impl(&dword_1B8270000, v54, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
  }
  *__error() = v53;
  *(_DWORD *)(v51 + 312) = v381;
  CIOnThreadCleanUpReset(v402);
  dropThreadId(v405, 1, v382);
  CICleanUpReset(v405, v403);
  v55 = 0;
  v56 = 0;
  v57 = v391;
  v58 = v388;
LABEL_352:
  free(v375);
  if (*a9 || (!v406 ? (v300 = 1) : (v300 = v55), (v300 & 1) != 0))
  {
    v406 = 0;
    if (v13 >= 1)
    {
      v301 = v11;
      v302 = v13;
      do
      {
        if (*v301)
        {
          ContentIndexDocSetDispose(*v301);
          *v301 = 0;
        }
        ++v301;
        --v302;
      }
      while (v302);
    }
    if (v388 && v38 >= 1)
    {
      v303 = v38;
      v304 = v388;
      do
      {
        if (*v304)
        {
          oqdispose(*v304);
          free((void *)*v304);
          *v304 = 0;
        }
        ++v304;
        --v303;
      }
      while (v303);
    }
    for (; v407 < v390; ++v407)
      oqdispose((uint64_t)&v57[72 * v407]);
    v305 = (char *)v410;
    if (v410)
    {
      fd_release(v410[560]);
      free(v305);
      v410 = 0;
    }
    v306 = v409;
    v58 = v388;
    if (v409)
    {
      fd_release(v409[560]);
      free(v306);
      v409 = 0;
    }
    if (v408)
      posreadunlock(v408);
    v408 = 0;
  }
  if (v387)
    TermUpdateSetRelease((uint64_t)v387);
  if (v384)
    TermUpdateSetRelease((uint64_t)v384);
  free(v58);
  free(v373);
  free(v374);
  free(v57);
  free(v376);
  if (!v406)
    return 0;
  if (v55)
    return __CIMatchQueryNodesLazy(a1, a2, v13, v12, v11, 0, v385, 0, a9);
  v309 = v409;
  v308 = v410;
  v310 = v408;
  v307 = (unsigned int *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x30uLL, 0x6085D6BuLL);
  if (!v307 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
  }
  atomic_store(1u, v307);
  *((_QWORD *)v307 + 1) = v308;
  *((_QWORD *)v307 + 2) = v309;
  *((_QWORD *)v307 + 3) = v310;
  v307[8] = v389;
  v307[9] = v56;
  *((_BYTE *)v307 + 40) = v386;
  *((_BYTE *)v307 + 41) = v385;
  if (!v308 && v56)
  {
    v311 = *__error();
    v312 = _SILogForLogForCategory(10);
    v313 = 2 * (dword_1EF19FCB4 < 4);
    if (os_log_type_enabled(v312, v313))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v56;
      _os_log_impl(&dword_1B8270000, v312, v313, "null payloadData with payloadCount %u", buf, 8u);
    }
    *__error() = v311;
  }
  return (uint64_t)v307;
}

uint64_t ContentIndexFlattenDocSet(uint64_t result, const __CFSet *a2)
{
  uint64_t v2;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v20;

  if (*(float *)(result + 12) == 0.0)
  {
    v2 = result;
    if (*(float *)(result + 16) == 0.0 && *(float *)(result + 20) == 0.0)
    {
      switch(*(_DWORD *)(result + 48))
      {
        case 4:
          if (!*(_DWORD *)(result + 96))
            return result;
          v4 = 0;
          break;
        case 5:
          if (*(_DWORD *)(result + 96))
          {
            v5 = 0;
            do
            {
              v6 = 8 * v5;
              result = ContentIndexFlattenDocSet(*(_QWORD *)(*(_QWORD *)(v2 + 72) + v6), a2);
              v7 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + v6);
              if (*(float *)(v7 + 16) == 0.0
                && *(float *)(v7 + 12) == 0.0
                && *(_DWORD *)(v7 + 48) == *(_DWORD *)(v2 + 48)
                && !*(_DWORD *)(v7 + 8))
              {
                *(_DWORD *)(v2 + 52) |= *(_DWORD *)(v7 + 52);
                result = flattenChildrenAtIndex((void *)v2, v5, a2);
                v5 += result;
              }
              ++v5;
            }
            while (v5 < *(_DWORD *)(v2 + 96));
          }
          return result;
        case 6:
          if (*(_DWORD *)(result + 96))
          {
            v8 = 0;
            do
            {
              v9 = 8 * v8;
              result = ContentIndexFlattenDocSet(*(_QWORD *)(*(_QWORD *)(v2 + 72) + v9), a2);
              v10 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + v9);
              if (*(float *)(v10 + 16) == 0.0
                && *(float *)(v10 + 12) == 0.0
                && *(_DWORD *)(v10 + 48) == 4
                && !*(_DWORD *)(v10 + 8))
              {
                *(_DWORD *)(v2 + 52) |= *(_DWORD *)(v10 + 52);
                result = flattenChildrenAtIndex((void *)v2, v8, a2);
                v8 += result;
              }
              ++v8;
            }
            while (v8 < *(_DWORD *)(v2 + 96));
          }
          return result;
        case 7:
          result = ContentIndexFlattenDocSet(**(_QWORD **)(result + 72), a2);
          if (*(_DWORD *)(v2 + 96) >= 2u)
          {
            v11 = 1;
            do
            {
              v12 = 8 * v11;
              result = ContentIndexFlattenDocSet(*(_QWORD *)(*(_QWORD *)(v2 + 72) + v12), a2);
              v13 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + v12);
              if (*(float *)(v13 + 16) == 0.0
                && *(float *)(v13 + 12) == 0.0
                && *(_DWORD *)(v13 + 48) == 4
                && !*(_DWORD *)(v13 + 8))
              {
                *(_DWORD *)(v2 + 52) |= *(_DWORD *)(v13 + 52);
                result = flattenChildrenAtIndex((void *)v2, v11, a2);
                v11 += result;
              }
              ++v11;
            }
            while (v11 < *(_DWORD *)(v2 + 96));
          }
          return result;
        default:
          return result;
      }
      while (1)
      {
        v15 = 8 * v4;
        result = ContentIndexFlattenDocSet(*(_QWORD *)(*(_QWORD *)(v2 + 72) + v15), a2);
        v16 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + v15);
        if (*(float *)(v16 + 16) != 0.0
          || *(float *)(v16 + 12) != 0.0
          || *(_DWORD *)(v16 + 48) != *(_DWORD *)(v2 + 48)
          || *(_DWORD *)(v16 + 8))
        {
          goto LABEL_35;
        }
        v17 = *(_DWORD *)(v16 + 52);
        v18 = *(_DWORD *)(v2 + 52);
        if (v17 != v18)
          break;
LABEL_34:
        result = flattenChildrenAtIndex((void *)v2, v4, a2);
        v4 += result;
LABEL_35:
        if (++v4 >= *(_DWORD *)(v2 + 96))
          return result;
      }
      if (v17 != 1 || v18 == 1)
      {
        if (v18 == 1)
          goto LABEL_34;
        if (v17 == 3)
        {
          if (v4)
            v14 = 1;
          else
            v14 = 3;
          goto LABEL_33;
        }
        if (v17)
          v20 = 0;
        else
          v20 = v18 == 3;
        if (!v20)
          goto LABEL_34;
      }
      v14 = 1;
LABEL_33:
      *(_DWORD *)(v2 + 52) = v14;
      goto LABEL_34;
    }
  }
  return result;
}

uint64_t db_string_table_rdlock(_DWORD *a1)
{
  char *v2;
  char *v3;
  const char *v4;

  if (*a1 != 1685287992)
  {
    v2 = __si_assert_copy_extra_268();
    v3 = v2;
    if (v2)
      v4 = v2;
    else
      v4 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 478, v4);
    free(v3);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return db2_string_table_rdlock((uint64_t)a1);
}

void TermUpdateSetRelease(uint64_t a1)
{
  unsigned int v2;
  const void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  OSQueueHead *v7;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  size_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  OSQueueHead *v31;
  _QWORD *v32;
  size_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _OWORD v39[2];

  do
    v2 = __ldaxr((unsigned int *)a1);
  while (__stlxr(v2 - 1, (unsigned int *)a1));
  if (a1 && v2 == 1)
  {
    v3 = *(const void **)(a1 + 32);
    if (v3)
      _Block_release(v3);
    v4 = *(_QWORD **)(*(_QWORD *)(a1 + 24) + 24);
    v5 = (_QWORD *)MEMORY[0x1E0C85AD8];
    while (v4)
    {
      while (1)
      {
        v8 = v4;
        v4 = (_QWORD *)*v4;
        v9 = v8[2] - (_QWORD)v8;
        if (v9 == 0x100000)
          break;
        if (*v5 != v9)
          goto LABEL_20;
        v6 = node_alloc();
        v6[1] = v8;
        do
          v13 = __ldxr((unint64_t *)&unk_1EDBBE090);
        while (__stxr(v13 - v9, (unint64_t *)&unk_1EDBBE090));
        v7 = &stru_1EDBBDE20;
LABEL_9:
        OSAtomicEnqueue(v7, v6, 0);
        if (!v4)
          goto LABEL_22;
      }
      do
        v10 = __ldxr((unint64_t *)&unk_1EDBBE090);
      while (__stxr(v10 - 0x100000, (unint64_t *)&unk_1EDBBE090));
      do
        v11 = __ldaxr(qword_1EDBBDE40);
      while (__stlxr(v11 + 1, qword_1EDBBDE40));
      if (v11 < 5)
      {
        v6 = node_alloc();
        v6[1] = v8;
        v7 = &stru_1EDBBDE30;
        goto LABEL_9;
      }
      do
        v12 = __ldaxr(qword_1EDBBDE40);
      while (__stlxr(v12 - 1, qword_1EDBBDE40));
      do
LABEL_20:
        v14 = __ldxr((unint64_t *)&unk_1EDBBE090);
      while (__stxr(v14 - v9, (unint64_t *)&unk_1EDBBE090));
      munmap(v8, v9);
    }
LABEL_22:
    v15 = *(void **)(a1 + 88);
    v16 = 12 * *(unsigned int *)(a1 + 96);
    v17 = -12 * *(unsigned int *)(a1 + 96);
    do
      v18 = __ldxr(&qword_1EDBBE088);
    while (__stxr(v18 + v17, &qword_1EDBBE088));
    munmap(v15, v16);
    v19 = *(void **)(a1 + 240);
    if (v19)
    {
      v20 = 32 * *(unsigned int *)(a1 + 252);
      v21 = -32 * *(unsigned int *)(a1 + 252);
      do
        v22 = __ldxr(&qword_1EDBBE0A0);
      while (__stxr(v22 + v21, &qword_1EDBBE0A0));
      munmap(v19, v20);
    }
    v23 = *(void **)(a1 + 256);
    if (v23)
    {
      v24 = 8 * *(unsigned int *)(a1 + 272);
      v25 = -8 * *(unsigned int *)(a1 + 272);
      do
        v26 = __ldxr(&qword_1EDBBE0A8);
      while (__stxr(v26 + v25, &qword_1EDBBE0A8));
      munmap(v23, v24);
    }
    *(_QWORD *)(a1 + 256) = 0;
    v27 = *(_OWORD *)(a1 + 64);
    v39[0] = *(_OWORD *)(a1 + 48);
    v39[1] = v27;
    freeDirectory((uint64_t)v39);
    if (_os_feature_enabled_impl())
    {
      v28 = *(_QWORD *)(a1 + 80);
      if (v28)
        freeVectorUpdates(v28);
    }
    db_rwlock_destroy((pthread_mutex_t *)(a1 + 304));
    pthread_mutex_destroy((pthread_mutex_t *)(a1 + 520));
    v29 = *(_QWORD **)(a1 + 232);
    while (v29)
    {
      while (1)
      {
        v32 = v29;
        v29 = (_QWORD *)*v29;
        v33 = v32[2] - (_QWORD)v32;
        if (v33 == 0x100000)
          break;
        if (*v5 != v33)
          goto LABEL_49;
        v30 = node_alloc();
        v30[1] = v32;
        do
          v37 = __ldxr((unint64_t *)&unk_1EDBBE090);
        while (__stxr(v37 - v33, (unint64_t *)&unk_1EDBBE090));
        v31 = &stru_1EDBBDE20;
LABEL_38:
        OSAtomicEnqueue(v31, v30, 0);
        if (!v29)
          goto LABEL_51;
      }
      do
        v34 = __ldxr((unint64_t *)&unk_1EDBBE090);
      while (__stxr(v34 - 0x100000, (unint64_t *)&unk_1EDBBE090));
      do
        v35 = __ldaxr(qword_1EDBBDE40);
      while (__stlxr(v35 + 1, qword_1EDBBDE40));
      if (v35 < 5)
      {
        v30 = node_alloc();
        v30[1] = v32;
        v31 = &stru_1EDBBDE30;
        goto LABEL_38;
      }
      do
        v36 = __ldaxr(qword_1EDBBDE40);
      while (__stlxr(v36 - 1, qword_1EDBBDE40));
      do
LABEL_49:
        v38 = __ldxr((unint64_t *)&unk_1EDBBE090);
      while (__stxr(v38 - v33, (unint64_t *)&unk_1EDBBE090));
      munmap(v32, v33);
    }
LABEL_51:
    free((void *)a1);
  }
}

uint64_t si_livequery_hash(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t ContentIndexMatchLocalizedFields(int *a1, uint64_t a2, _DWORD *a3)
{
  int v6;
  int v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  _BYTE **v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char *v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  _QWORD v35[7];
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  _QWORD v40[3];
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  v42 = 0;
  v43 = &v42;
  v44 = 0x2000000000;
  v45 = 0;
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x2000000000;
  v41 = 0;
  v36 = 0;
  v37 = &v36;
  v38 = 0x2000000000;
  v39 = 0;
  v6 = *a1;
  if (*a1 < 1)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = a1 + 6;
    v9 = *a1;
    do
    {
      v10 = *v8;
      v8 += 4;
      v11 = v10 - 1;
      if (v10 <= 1)
        v11 = 0;
      v7 += v11;
      --v9;
    }
    while (v9);
  }
  v12 = v7 + v6;
  v13 = (_BYTE **)malloc_type_zone_malloc((malloc_zone_t *)queryZone, (uint64_t)(v7 + v6) << 6, 0x6085D6BuLL);
  if (!v13)
    _log_fault_for_malloc_failure();
  v14 = *a1;
  if (*a1 < 1)
  {
    LODWORD(v16) = 0;
    if (!a2)
      goto LABEL_23;
    goto LABEL_22;
  }
  v15 = 0;
  LODWORD(v16) = 0;
  do
  {
    v17 = (unsigned int *)&a1[4 * v15];
    v19 = v17[6];
    v18 = (int *)(v17 + 6);
    if (v19 >= 1)
    {
      v20 = 0;
      v21 = (int)v16;
      if ((int)v16 <= v12)
        v22 = v12;
      else
        v22 = v16;
      v23 = (v22 - v16);
      do
      {
        if (v20 == v23)
        {
          v31 = __si_assert_copy_extra_268();
          v32 = v31;
          v33 = "";
          if (v31)
            v33 = v31;
          __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 1224, "pos<(secondaryCount+nodeCount)", v33);
          free(v32);
          if (__valid_fs(-1))
            v34 = 2989;
          else
            v34 = 3072;
          *(_DWORD *)v34 = -559038737;
          abort();
        }
        v16 = v21 + 1;
        v24 = &v13[8 * v21];
        v25 = (__int128 *)(*(_QWORD *)&a1[4 * v15 + 8] + (v20 << 6));
        v26 = *v25;
        v27 = v25[1];
        v28 = v25[3];
        v24[2] = v25[2];
        v24[3] = v28;
        *v24 = v26;
        v24[1] = v27;
        ++v20;
        v21 = v16;
      }
      while (v20 < *v18);
      v14 = *a1;
    }
    ++v15;
  }
  while (v15 < v14);
  if (a2)
  {
LABEL_22:
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 0x40000000;
    v35[2] = ___CIMatchLocalizedFields_block_invoke;
    v35[3] = &unk_1E6E36F10;
    v35[4] = &v36;
    v35[5] = v40;
    v35[6] = &v42;
    termUpdateSetResolveQueryInfo(a2, v16, v13, 0, 0, 0, (uint64_t)v35);
  }
LABEL_23:
  free(v13);
  *a3 = *((_DWORD *)v37 + 6);
  v29 = v43[3];
  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(v40, 8);
  _Block_object_dispose(&v42, 8);
  return v29;
}

uint64_t termUpdateSetResolveQueryInfo(uint64_t a1, unsigned int a2, _BYTE **a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _BYTE **v23;
  __CFSet *Mutable;
  void *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t (*v29)(_QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE **v34;
  int v35;
  const char *v36;
  size_t v37;
  uint64_t v38;
  _BYTE **v39;
  uint64_t *v40;
  int v41;
  unint64_t v42;
  const char *v43;
  int v44;
  int v45;
  int v47;
  int v48;
  _BOOL4 v49;
  int v50;
  uint64_t v51;
  int8x8_t *v52;
  int v53;
  unint64_t v54;
  uint64_t v55;
  int8x8_t *v56;
  unint64_t v57;
  uint8x8_t v58;
  uint8x8_t v59;
  uint8x8_t v60;
  uint8x8_t v61;
  int v62;
  const void *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  const void **v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int8x8_t *v79;
  int v80;
  unint64_t v81;
  uint64_t v82;
  int8x8_t *v83;
  unint64_t v84;
  uint8x8_t v85;
  uint8x8_t v86;
  uint8x8_t v87;
  uint8x8_t v88;
  int v89;
  int v90;
  char *v91;
  size_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int32 v100;
  uint64_t v101;
  BOOL v102;
  unsigned int v103;
  char v104;
  BOOL v105;
  char v106;
  uint64_t v107;
  unint64_t v108;
  unsigned int v109;
  int8x8_t v110;
  uint64_t v111;
  uint64_t v112;
  int8x8_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __CFSet *v117;
  __int128 v118;
  int v120;
  int info;
  int v122;
  int v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t j;
  uint64_t k;
  uint64_t i;
  unsigned __int8 *v134;
  int v135;
  unsigned __int8 *v136;
  unsigned int v137;
  uint64_t v138;
  int v139;
  __int128 v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  BOOL v155;
  uint64_t v156;
  int8x8_t *v157;
  int v158;
  unint64_t v159;
  uint64_t v160;
  int8x8_t *v161;
  unint64_t v162;
  uint8x8_t v163;
  uint8x8_t v164;
  uint8x8_t v165;
  uint8x8_t v166;
  int v167;
  int v168;
  __int128 v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  const void *v174;
  void (__cdecl *v175)(const void *, void *);
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  _BYTE **v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v186;
  uint64_t v187;
  unsigned int *v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  float v195;
  _QWORD *v196;
  unint64_t v197;
  _QWORD *v198;
  unint64_t v199;
  BOOL v200;
  _QWORD *v201;
  std::__shared_weak_count *v202;
  uint64_t v203;
  int v204;
  NSObject *v205;
  NSObject *v206;
  int8x8_t *v207;
  uint64_t Directory_290;
  _BOOL8 v209;
  int8x8_t *v210;
  unint64_t *v211;
  unint64_t v212;
  int8x8_t v213;
  unint64_t *p_shared_owners;
  unint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  const char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  NSObject *log;
  unsigned int v224;
  uint64_t v225;
  unint64_t v226;
  int *v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  int item_count;
  _BYTE **v232;
  size_t count;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _DWORD *v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD v240[6];
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  _QWORD v247[2];
  uint64_t (*v248)(uint64_t, uint64_t);
  void *v249;
  uint64_t v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  void (*context)(unsigned int, unsigned __int8 *, uint64_t, int, uint64_t);
  uint64_t v258;
  _BYTE *v259;
  __CFSet *v260;
  _QWORD v261[5];
  _QWORD v262[7];
  __int128 v263;
  _QWORD v264[4];
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  _QWORD v271[4];
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277;
  char *__s;
  int v279;
  uint64_t v280;
  _QWORD v281[5];
  _BYTE v282[88];
  __int128 v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  int8x8_t buf[10];
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  uint8_t v299[23];
  char v300;
  uint8_t v301[24];
  uint64_t v302;

  v13 = a1;
  v302 = *MEMORY[0x1E0C80C00];
  db_read_lock(a1 + 304);
  if (a6 && *(_QWORD *)(v13 + 584) != a6)
  {
    _TermUpdateSetReadUnlock(v13);
    return 1;
  }
  v225 = a6;
  memset(&v282[56], 0, 32);
  *(_OWORD *)&v282[40] = 0u;
  *(_OWORD *)&v282[24] = 0u;
  *(_OWORD *)&v282[8] = 0u;
  v14 = (uint64_t)CICleanUpThreadLoc();
  CIOnThreadCleanUpPush(v14, (uint64_t)_TermUpdateSetReadUnlock, v13);
  v15 = threadData[18 * v14 + 8];
  *(_QWORD *)v282 = *(_QWORD *)(v13 + 88);
  *(_DWORD *)&v282[8] = a2;
  *(_QWORD *)&v282[16] = a3;
  *(_QWORD *)&v282[24] = a4;
  *(_QWORD *)&v282[64] = a7;
  *(_DWORD *)&v282[56] = a5;
  v16 = *(_QWORD *)(v13 + 256);
  *(_QWORD *)&v282[40] = *(_QWORD *)(v13 + 240);
  *(_QWORD *)&v282[48] = v16;
  count = a2;
  if (a2 <= 0xFFF && 32 * (unint64_t)a2 > *MEMORY[0x1E0C85AD8])
    ++sTotal_9538;
  v17 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, a2, 0x20uLL, 0x31F9A007uLL);
  v226 = v15;
  if (v17)
  {
    v18 = MEMORY[0x1E0C834A8];
    v19 = v14;
    v20 = (uint64_t)v17;
  }
  else
  {
    _log_fault_for_malloc_failure();
    v18 = MEMORY[0x1E0C834A8];
    v19 = v14;
    v20 = 0;
  }
  CICleanUpPush(v19, (uint64_t)v18, v20);
  *(_QWORD *)&v282[32] = v17;
  v282[80] = (*(_BYTE *)(v13 + 616) & 0x40) != 0;
  v228 = a4;
  v229 = v13;
  v232 = a3;
  if (!a2)
  {
LABEL_14:
    Mutable = CFSetCreateMutable(0, 0, 0);
    *(_QWORD *)v299 = 128;
    v25 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0xC00uLL, 0x6085D6BuLL);
    if (!v25)
      _log_fault_for_malloc_failure();
    *(_QWORD *)&v299[8] = v25;
    *(_QWORD *)v301 = 128;
    v26 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0xC00uLL, 0x6085D6BuLL);
    if (!v26)
      _log_fault_for_malloc_failure();
    *(_QWORD *)&v301[8] = v26;
    v27 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x10uLL, 0x6085D6BuLL);
    v28 = v27;
    if (v27)
    {
      *(_QWORD *)&v282[72] = v27;
      v29 = MEMORY[0x1E0C834A8];
      v30 = v14;
      v31 = (uint64_t)v28;
    }
    else
    {
      _log_fault_for_malloc_failure();
      *(_QWORD *)&v282[72] = 0;
      v29 = MEMORY[0x1E0C834A8];
      v30 = v14;
      v31 = 0;
    }
    CICleanUpPush(v30, (uint64_t)v29, v31);
    *v28 = 0;
    v28[1] = 0;
    v224 = a2;
    if (!a2)
      goto LABEL_300;
    v33 = 0;
    while (1)
    {
      *(_DWORD *)&v299[4] = 0;
      *(_DWORD *)&v301[4] = 0;
      v234 = v33;
      v34 = &a3[8 * v33];
      v35 = *((_DWORD *)v34 + 4);
      v237 = v34 + 2;
      if ((v35 & 0x10) != 0)
        goto LABEL_287;
      v36 = a3[8 * v33];
      v37 = strlen(v36);
      v38 = (*(_QWORD *)(v13 + 24) + 32) | 1;
      if ((v35 & 4) != 0)
      {
        v43 = a3[8 * v234 + 1];
        v44 = strcmp(v36, v43);
        v45 = *(unsigned __int8 *)v36;
        if (v45 != *(unsigned __int8 *)v43 || (v45 - 2) > 2)
          goto LABEL_287;
        v47 = *((unsigned __int8 *)v36 + 1);
        if (v36[1] < 0)
        {
          v50 = *((unsigned __int8 *)v36 + 2);
          if (v36[2] < 0)
          {
            v64 = *((unsigned __int8 *)v36 + 3);
            if (v36[3] < 0)
            {
              v66 = *((unsigned __int8 *)v36 + 4);
              if (v36[4] < 0)
              {
                v70 = v36[5];
                if (v70 < 0)
                  goto LABEL_385;
                v48 = 6;
                v47 = ((v66 & 0x7F) << 21) | (v70 << 28) | ((v64 & 0x7F) << 14) | ((v50 & 0x7F) << 7) | v47 & 0x7F;
                if (v44)
                  goto LABEL_87;
              }
              else
              {
                v48 = 5;
                v47 = ((v64 & 0x7F) << 14) | (v66 << 21) | ((v50 & 0x7F) << 7) | v47 & 0x7F;
                if (v44)
                  goto LABEL_87;
              }
            }
            else
            {
              v48 = 4;
              v47 = ((v50 & 0x7F) << 7) | (v64 << 14) | v47 & 0x7F;
              if (v44)
                goto LABEL_87;
            }
          }
          else
          {
            v47 = v47 & 0x7F | (v50 << 7);
            v48 = 3;
            if (v44)
              goto LABEL_87;
          }
        }
        else
        {
          v48 = 2;
          if (!v44)
            goto LABEL_264;
LABEL_87:
          v71 = *((unsigned __int8 *)v43 + 1);
          if (v43[1] < 0)
          {
            v72 = *((unsigned __int8 *)v43 + 2);
            if (v43[2] < 0)
            {
              v73 = *((unsigned __int8 *)v43 + 3);
              if (v43[3] < 0)
              {
                v74 = *((unsigned __int8 *)v43 + 4);
                if (v43[4] < 0)
                {
                  v154 = v43[5];
                  if (v154 < 0)
                    goto LABEL_385;
                  v71 = ((v74 & 0x7F) << 21) | (v154 << 28) | ((v73 & 0x7F) << 14) | ((v72 & 0x7F) << 7) | v71 & 0x7F;
                }
                else
                {
                  v71 = ((v73 & 0x7F) << 14) | (v74 << 21) | ((v72 & 0x7F) << 7) | v71 & 0x7F;
                }
              }
              else
              {
                v71 = ((v72 & 0x7F) << 7) | (v73 << 14) | v71 & 0x7F;
              }
            }
            else
            {
              v71 = v71 & 0x7F | (v72 << 7);
            }
          }
          if (v47)
            v155 = v47 == v71;
          else
            v155 = 0;
          if (!v155)
            goto LABEL_287;
        }
LABEL_264:
        v156 = 0;
        while (2)
        {
          v157 = (int8x8_t *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
          v158 = v38 & 3;
          switch(v158)
          {
            case 1:
              v38 = (uint64_t)v157[*((unsigned __int8 *)&tcm + v36[v156]) + 1];
              if (!v38)
                goto LABEL_287;
              break;
            case 2:
              v159 = *((unsigned __int8 *)&tcm + v36[v156]);
              if (((*(unsigned __int32 *)((char *)v157[1].i32 + ((v159 >> 3) & 0x1C)) >> v159) & 1) == 0)
                goto LABEL_287;
              v160 = 0;
              v161 = v157 + 1;
              v162 = v159 >> 6;
              if ((v159 >> 6) == 1)
                goto LABEL_273;
              if ((_DWORD)v162 == 2)
                goto LABEL_272;
              if ((_DWORD)v162 == 3)
              {
                v163 = (uint8x8_t)vcnt_s8(v157[3]);
                v163.i16[0] = vaddlv_u8(v163);
                v160 = v163.u32[0];
LABEL_272:
                v164 = (uint8x8_t)vcnt_s8(v157[2]);
                v164.i16[0] = vaddlv_u8(v164);
                v160 += v164.u32[0];
LABEL_273:
                v165 = (uint8x8_t)vcnt_s8(*v161);
                v165.i16[0] = vaddlv_u8(v165);
                v160 += v165.u32[0];
              }
              v166 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v161[v162] & ~(-1 << v159)));
              v166.i16[0] = vaddlv_u8(v166);
              v38 = (uint64_t)v157[v166.u32[0] + 6 + v160];
              if (!v38)
                goto LABEL_287;
              break;
            case 3:
              v38 |= 3uLL;
              v48 = v156;
LABEL_281:
              if ((~(_BYTE)v38 & 3) != 0)
              {
                bzero(buf, 0x400uLL);
                TermTrieMatchRangeChars(v38, (uint64_t)&v36[v48], (uint64_t)&v43[v48], Mutable, (uint64_t)buf, 0);
                goto LABEL_287;
              }
              v63 = (const void *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
              goto LABEL_283;
            default:
              goto LABEL_287;
          }
          if (v48 == ++v156)
            goto LABEL_281;
          continue;
        }
      }
      v39 = &a3[8 * v234];
      v40 = (uint64_t *)(v39 + 4);
      if (v39[4])
      {
        v227 = (int *)v39 + 5;
        if (*((int *)v39 + 5) < 7)
          goto LABEL_124;
        if (*v36 != 1)
          goto LABEL_133;
        v41 = *((unsigned __int8 *)v36 + 1);
        if ((v36[1] & 0x80000000) == 0)
        {
          v42 = 2;
          goto LABEL_97;
        }
        v65 = *((unsigned __int8 *)v36 + 2);
        if ((v36[2] & 0x80000000) == 0)
        {
          v41 = v41 & 0x7F | (v65 << 7);
          v42 = 3;
          goto LABEL_97;
        }
        v67 = *((unsigned __int8 *)v36 + 3);
        if ((v36[3] & 0x80000000) == 0)
        {
          v68 = ((v65 & 0x7F) << 7) | (v67 << 14) | v41 & 0x7F;
          v42 = 4;
          goto LABEL_96;
        }
        v75 = *((unsigned __int8 *)v36 + 4);
        if (v36[4] < 0)
        {
          v167 = v36[5];
          if ((v167 & 0x80000000) == 0)
          {
            v168 = ((v75 & 0x7F) << 21) | (v167 << 28) | ((v67 & 0x7F) << 14) | ((v65 & 0x7F) << 7) | v41 & 0x7F;
            v42 = 6;
            v41 = v168;
            goto LABEL_97;
          }
          goto LABEL_385;
        }
        v68 = ((v67 & 0x7F) << 14) | (v75 << 21) | ((v65 & 0x7F) << 7) | v41 & 0x7F;
        v42 = 5;
LABEL_96:
        v41 = v68;
LABEL_97:
        if (v41 == 2)
        {
          v76 = v42 + 1;
          if ((v36[v42] & 0x80000000) == 0)
            goto LABEL_99;
          v77 = v42 + 2;
          if ((v36[v76] & 0x80000000) == 0)
          {
LABEL_101:
            v42 = v77;
            goto LABEL_102;
          }
          v76 = v42 + 3;
          if ((v36[v77] & 0x80000000) == 0)
          {
LABEL_99:
            v42 = v76;
            goto LABEL_102;
          }
          v77 = v42 + 4;
          if ((v36[v76] & 0x80000000) == 0)
            goto LABEL_101;
          if ((v36[v77] & 0x80000000) == 0)
          {
            v42 += 5;
            goto LABEL_102;
          }
LABEL_385:
          v221 = __si_assert_copy_extra_268();
          __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t");
          goto LABEL_381;
        }
LABEL_102:
        if (v42 > v37)
          goto LABEL_133;
        v78 = 0;
        while (2)
        {
          v79 = (int8x8_t *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
          v80 = v38 & 3;
          if (v80 == 1)
          {
            v38 = (uint64_t)v79[*((unsigned __int8 *)&tcm + v36[v78]) + 1];
            if (!v38)
              goto LABEL_133;
          }
          else
          {
            if (v80 != 2)
            {
              if (v80 == 3 && (_DWORD)v78)
              {
                v38 |= 3uLL;
LABEL_121:
                if ((~(_BYTE)v38 & 3) == 0)
                {
                  CFSetAddValue(Mutable, (const void *)(v38 & 0xFFFFFFFFFFFFFFFCLL));
                  goto LABEL_133;
                }
                if (v42 == (int)v78)
                {
LABEL_124:
                  v89 = *(_DWORD *)v299;
                  if (*(int *)v299 < 1)
                  {
                    *(_DWORD *)v299 *= 2;
                    v92 = 48 * v89;
                    if (*(_QWORD *)&v299[8])
                      v93 = (char *)malloc_type_zone_realloc((malloc_zone_t *)queryZone, *(void **)&v299[8], v92, 0xECA6AA46uLL);
                    else
                      v93 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v92, 0x8DDAA030uLL);
                    v91 = v93;
                    if (!v93)
                      _log_fault_for_malloc_failure();
                    *(_QWORD *)&v299[8] = v91;
                    v90 = *(_DWORD *)&v299[4];
                  }
                  else
                  {
                    v90 = 0;
                    v91 = *(char **)&v299[8];
                  }
                  v94 = &v91[24 * v90];
                  *(_QWORD *)v94 = v38;
                  *(_OWORD *)(v94 + 8) = xmmword_1B8631BC0;
                  ++*(_DWORD *)&v299[4];
                }
              }
LABEL_133:
              v280 = 0;
              v279 = 0;
              __s = 0;
              if (icu_search_context_is_fuzzy())
              {
                v95 = *(_QWORD *)&v282[72];
                if (!**(_QWORD **)&v282[72])
                  **(_QWORD **)&v282[72] = Mutable;
                if (!*(_QWORD *)(v95 + 8))
                {
                  v96 = la_init(*v40, (*v237 & 0x800) != 0);
                  *(_QWORD *)(*(_QWORD *)&v282[72] + 8) = v96;
                  if (v96)
                    CICleanUpPush(v14, (uint64_t)la_free, (uint64_t)v96);
                }
                while (*(_DWORD *)&v299[4])
                {
                  if (*(int *)&v299[4] >= 1)
                  {
                    v97 = 0;
                    v98 = 0;
                    do
                    {
                      v99 = *(_QWORD *)(*(_QWORD *)&v299[8] + v97 + 8);
                      v100 = *(_DWORD *)(*(_QWORD *)&v299[8] + v97 + 16);
                      v101 = *(_QWORD *)(*(_QWORD *)&v282[72] + 8);
                      if (*(_BYTE *)(v101 + 48))
                        v102 = v99 == 0;
                      else
                        v102 = 1;
                      if (v102)
                        goto LABEL_154;
                      v103 = *(_DWORD *)(v101 + 16) - *(unsigned __int8 *)(v101 + 32);
                      v104 = 5 * (v100 - v103);
                      v105 = v103 >= v100;
                      v106 = 5 * (v103 - v100);
                      if (v105)
                        v104 = 0;
                      if (!v105)
                        v106 = 0;
                      if ((((unint64_t)(v99 << v104) >> v106) & 0x1F79C61) == 0)
                      {
LABEL_154:
                        v109 = (2 * *(unsigned __int8 *)(v101 + 32)) | 1;
                        if (v109 >= *(_DWORD *)(v101 + 16) - v100)
                          LOBYTE(v109) = *(_BYTE *)(v101 + 16) - v100;
                        LOBYTE(v283) = 0;
                        buf[0] = 0;
                        tt_transition_for_state(**(_QWORD ***)v101, v99, v109 << 8, buf, &v283);
                        v110 = buf[0];
                        v111 = *(_QWORD *)(v101 + 40) + 24 * v100;
                        *(int8x8_t *)(v111 + 8) = buf[0];
                        *(_DWORD *)(v111 + 16) = v283 + v100;
                        v112 = *(_QWORD *)v111;
                        v113 = *(int8x8_t *)(v111 + 16);
                        if (dword_1EF19FC90 >= 5)
                        {
                          v230 = *__error();
                          log = _SILogForLogForCategory(1);
                          if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
                          {
                            buf[0].i32[0] = 134218752;
                            *(int8x8_t *)((char *)buf + 4) = (int8x8_t)v99;
                            buf[1].i16[2] = 1024;
                            *(__int32 *)((char *)&buf[1].i32[1] + 2) = v100;
                            buf[2].i16[1] = 2048;
                            *(int8x8_t *)((char *)&buf[2] + 4) = v110;
                            buf[3].i16[2] = 1024;
                            *(__int32 *)((char *)&buf[3].i32[1] + 2) = v113.i32[0];
                            _os_log_impl(&dword_1B8270000, log, OS_LOG_TYPE_DEFAULT, "la_transition_context_for_state, current_state: %llu %d: transition_ctx.default_state: %llu %d", (uint8_t *)buf, 0x22u);
                          }
                          *__error() = v230;
                        }
                        v114 = *(_QWORD *)(*(_QWORD *)&v299[8] + v97);
                        v263 = *(_OWORD *)(*(_QWORD *)&v299[8] + v97 + 8);
                        *(_QWORD *)&v283 = MEMORY[0x1E0C809B0];
                        *((_QWORD *)&v283 + 1) = 0x40000000;
                        v284 = (uint64_t)__term_trie_resolve_fuzzy_transition_block_invoke;
                        v285 = &__block_descriptor_tmp_55_9586;
                        v286 = *(_QWORD *)&v282[72];
                        buf[0] = (int8x8_t)MEMORY[0x1E0C809B0];
                        buf[1] = (int8x8_t)0x40000000;
                        buf[2] = (int8x8_t)__term_trie_resolve_fuzzy_transition_block_invoke_2;
                        buf[3] = (int8x8_t)&__block_descriptor_tmp_57_9587;
                        buf[4] = v110;
                        buf[5] = v113;
                        *(_OWORD *)buf[7].i8 = v263;
                        buf[6] = (int8x8_t)v114;
                        buf[9] = *(int8x8_t *)&v282[72];
                        *(_QWORD *)&v288 = v301;
                        _term_trie_resolve_sub_trie(v114, v112, *(_QWORD *)&v110 != 0, (uint64_t)&v283, (uint64_t)buf);
                      }
                      else
                      {
                        v107 = *(_QWORD *)(*(_QWORD *)&v299[8] + v97) & 3;
                        v108 = *(_QWORD *)(*(_QWORD *)&v299[8] + v97) & 0xFFFFFFFFFFFFFFFCLL;
                        if ((_DWORD)v107 == 2)
                        {
                          v264[0] = MEMORY[0x1E0C809B0];
                          v264[1] = 0x40000000;
                          v264[2] = __termUpdateSetResolveQueryInfo_block_invoke_3;
                          v264[3] = &__block_descriptor_tmp_34_9584;
                          v267 = *(_OWORD *)&v282[32];
                          v268 = *(_OWORD *)&v282[48];
                          v269 = *(_OWORD *)&v282[64];
                          v270 = *(_QWORD *)&v282[80];
                          v265 = *(_OWORD *)v282;
                          v266 = *(_OWORD *)&v282[16];
                          _TermTrieWalkCompactWithOptions(v108, 0, 0, 1, (uint64_t)v264, 0, 0);
                        }
                        else if ((_DWORD)v107 == 1)
                        {
                          v271[0] = MEMORY[0x1E0C809B0];
                          v271[1] = 0x40000000;
                          v271[2] = __termUpdateSetResolveQueryInfo_block_invoke_2;
                          v271[3] = &__block_descriptor_tmp_33_9583;
                          v274 = *(_OWORD *)&v282[32];
                          v275 = *(_OWORD *)&v282[48];
                          v276 = *(_OWORD *)&v282[64];
                          v277 = *(_QWORD *)&v282[80];
                          v272 = *(_OWORD *)v282;
                          v273 = *(_OWORD *)&v282[16];
                          _TermTrieWalkFatWithOptions(v108, 0, 0, 1, (uint64_t)v271, 0, 0);
                        }
                      }
                      ++v98;
                      v97 += 24;
                    }
                    while (v98 < *(int *)&v299[4]);
                  }
                  if ((*(_BYTE *)v237 & 2) != 0 && *(int *)&v301[4] >= 1)
                  {
                    v115 = 0;
                    v116 = 0;
                    do
                    {
                      v117 = **(__CFSet ***)&v282[72];
                      *(_OWORD *)buf[0].i8 = *(_OWORD *)(*(_QWORD *)&v301[8] + v115);
                      buf[2] = *(int8x8_t *)(*(_QWORD *)&v301[8] + v115 + 16);
                      term_trie_resolve_combining(buf, v117, (int *)v301);
                      ++v116;
                      v115 += 24;
                    }
                    while (v116 < *(int *)&v301[4]);
                  }
                  v118 = *(_OWORD *)v301;
                  *(_OWORD *)v301 = *(_OWORD *)v299;
                  *(_DWORD *)&v301[4] = 0;
                  *(_OWORD *)v299 = v118;
                }
                if (!icu_search_context_is_fuzzy())
                  goto LABEL_289;
LABEL_216:
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v282[72] + 8) + 48))
                  goto LABEL_289;
                goto LABEL_217;
              }
              item_count = icu_search_context_item_get_item_count();
              if (item_count < 1 || *(_DWORD *)&v299[4] == 0)
              {
                if ((icu_search_context_is_fuzzy() & 1) != 0)
                  goto LABEL_216;
                goto LABEL_289;
              }
              v120 = 0;
              while (1)
              {
                info = icu_search_context_item_get_info();
                if (!info)
                  break;
                v122 = info;
                v123 = *(_DWORD *)&v299[4];
                if (*(int *)&v299[4] >= 1)
                {
                  v124 = 0;
                  v125 = info & 0xFFFFFFFE;
                  while (2)
                  {
                    switch(v122)
                    {
                      case 1:
                        v126 = *(_QWORD *)(*(_QWORD *)&v299[8] + 24 * v124) & 3;
                        v127 = *(_QWORD *)(*(_QWORD *)&v299[8] + 24 * v124) & 0xFFFFFFFFFFFFFFFCLL;
                        if ((_DWORD)v126 == 2)
                        {
                          v261[0] = MEMORY[0x1E0C809B0];
                          v261[1] = 0x40000000;
                          v261[2] = __termUpdateSetResolveQueryInfo_block_invoke_2_38;
                          v261[3] = &__block_descriptor_tmp_39_9590;
                          v261[4] = Mutable;
                          _TermTrieWalkCompactWithOptions(v127, 0, 0, 1, (uint64_t)v261, 0, 0);
                        }
                        else if ((_DWORD)v126 == 1)
                        {
                          v262[0] = MEMORY[0x1E0C809B0];
                          v262[1] = 0x40000000;
                          v262[2] = __termUpdateSetResolveQueryInfo_block_invoke_36;
                          v262[3] = &__block_descriptor_tmp_37_9589;
                          v262[4] = Mutable;
                          _TermTrieWalkFatWithOptions(v127, 0, 0, 1, (uint64_t)v262, 0, 0);
                        }
                        goto LABEL_208;
                      case 2:
                        v128 = *(_QWORD *)&v299[8] + 24 * v124;
                        *(_OWORD *)buf[0].i8 = *(_OWORD *)v128;
                        buf[2] = *(int8x8_t *)(v128 + 16);
                        term_trie_resolve_combining(buf, Mutable, (int *)v299);
                        goto LABEL_208;
                      case 3:
                        v129 = *(_QWORD *)&v299[8] + 24 * v124;
                        v130 = __s;
                        goto LABEL_207;
                      case 4:
                        if ((*(_BYTE *)v237 & 2) != 0)
                        {
                          if (v279 >= 1)
                          {
                            for (i = 0; i < v279; ++i)
                            {
                              v134 = *(unsigned __int8 **)(v280 + 8 * i);
                              v135 = *v134;
                              v137 = v134[1];
                              v136 = v134 + 1;
                              v138 = *(_QWORD *)&v299[8] + 24 * v124;
                              if (utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)v137 >> 4] == v135)
                              {
                                term_trie_resolve_sub_string(*(_QWORD *)v138, (uint64_t)v136, v135, (int *)v301, Mutable, *(__n128 *)(v138 + 8));
                              }
                              else
                              {
                                v283 = *(_OWORD *)v138;
                                v284 = *(_QWORD *)(v138 + 16);
                                v297 = 0u;
                                v298 = 0u;
                                v295 = 0u;
                                v296 = 0u;
                                v293 = 0u;
                                v294 = 0u;
                                v291 = 0u;
                                v292 = 0u;
                                v289 = 0u;
                                v290 = 0u;
                                v288 = 0u;
                                memset(buf, 0, sizeof(buf));
                                _term_trie_resolve_sub_string_ignore_diacritics((int8x8_t *)&v283, v136, v135, (int *)v301, Mutable, (uint64_t)buf, 0);
                              }
                            }
                          }
                        }
                        else if (v279 >= 1)
                        {
                          for (j = 0; j < v279; ++j)
                            term_trie_resolve_sub_string(*(_QWORD *)(*(_QWORD *)&v299[8] + 24 * v124), *(_QWORD *)(v280 + 8 * j) + 1, **(unsigned __int8 **)(v280 + 8 * j), (int *)v301, Mutable, *(__n128 *)(*(_QWORD *)&v299[8] + 24 * v124 + 8));
                        }
                        goto LABEL_205;
                      case 5:
                        if (v279 >= 1)
                        {
                          for (k = 0; k < v279; ++k)
                            term_trie_resolve_sub_string(*(_QWORD *)(*(_QWORD *)&v299[8] + 24 * v124), *(_QWORD *)(v280 + 8 * k) + 1, **(unsigned __int8 **)(v280 + 8 * k), (int *)v301, Mutable, *(__n128 *)(*(_QWORD *)&v299[8] + 24 * v124 + 8));
                        }
LABEL_205:
                        v130 = __s;
                        if (__s)
                        {
                          v129 = *(_QWORD *)&v299[8] + 24 * v124;
LABEL_207:
                          v139 = strlen(v130);
                          term_trie_resolve_sub_string(*(_QWORD *)v129, (uint64_t)v130, v139, (int *)v301, Mutable, *(__n128 *)(v129 + 8));
                        }
                        goto LABEL_208;
                      default:
                        if (v125 != 6)
                          goto LABEL_380;
LABEL_208:
                        ++v124;
                        v123 = *(_DWORD *)&v299[4];
                        if (v124 >= *(int *)&v299[4])
                          break;
                        continue;
                    }
                    break;
                  }
                }
                if (v122 != 2)
                {
                  v140 = *(_OWORD *)v301;
                  *(_OWORD *)v301 = *(_OWORD *)v299;
                  *(_DWORD *)&v301[4] = 0;
                  *(_OWORD *)v299 = v140;
                  v123 = DWORD1(v140);
                }
                if (++v120 >= item_count || !v123)
                {
                  if ((icu_search_context_is_fuzzy() & 1) != 0)
                    goto LABEL_216;
                  if (v120 != item_count
                    || !*(_DWORD *)&v299[4]
                    || icu_search_context_item_get_info() == 1)
                  {
LABEL_289:
                    v13 = v229;
                    goto LABEL_287;
                  }
LABEL_217:
                  v141 = *v227;
                  if ((*v237 & 0x800) == 0)
                  {
                    if (v141)
                    {
                      if (v141 == 1)
                      {
                        if (*(int *)&v299[4] >= 1)
                        {
                          v142 = 0;
                          v143 = 0;
                          do
                          {
                            term_trie_resolve_sub_string(*(_QWORD *)(*(_QWORD *)&v299[8] + v142), (uint64_t)"\x01\x01", 2, (int *)v301, Mutable, *(__n128 *)(*(_QWORD *)&v299[8] + v142 + 8));
                            term_trie_resolve_sub_string(*(_QWORD *)(*(_QWORD *)&v299[8] + v142), (uint64_t)"\x01\x01\x03", 3, (int *)v301, Mutable, *(__n128 *)(*(_QWORD *)&v299[8] + v142 + 8));
                            ++v143;
                            v142 += 24;
                          }
                          while (v143 < *(int *)&v299[4]);
                        }
                      }
                      else if (v141 >= 7 && *(int *)&v299[4] >= 1)
                      {
                        v148 = 0;
                        v149 = 0;
                        do
                        {
                          term_trie_resolve_sub_string(*(_QWORD *)(*(_QWORD *)&v299[8] + v148), (uint64_t)"\x01\x03", 2, (int *)v301, Mutable, *(__n128 *)(*(_QWORD *)&v299[8] + v148 + 8));
                          ++v149;
                          v148 += 24;
                        }
                        while (v149 < *(int *)&v299[4]);
                      }
                    }
                    else if ((*v237 & 0x3080) == 0 && *(int *)&v299[4] >= 1)
                    {
                      v146 = 0;
                      v147 = 0;
                      do
                      {
                        term_trie_resolve_sub_string(*(_QWORD *)(*(_QWORD *)&v299[8] + v146), (uint64_t)"\x01\x02", 2, (int *)v301, Mutable, *(__n128 *)(*(_QWORD *)&v299[8] + v146 + 8));
                        ++v147;
                        v146 += 24;
                      }
                      while (v147 < *(int *)&v299[4]);
                    }
                    goto LABEL_291;
                  }
                  if (v141)
                  {
                    if (v141 == 1)
                    {
                      if (*(int *)&v299[4] >= 1)
                      {
                        v152 = 0;
                        v153 = 0;
                        do
                        {
                          term_trie_resolve_sub_string(*(_QWORD *)(*(_QWORD *)&v299[8] + v152), (uint64_t)"\x01\x04", 2, (int *)v301, Mutable, *(__n128 *)(*(_QWORD *)&v299[8] + v152 + 8));
                          term_trie_resolve_sub_string(*(_QWORD *)(*(_QWORD *)&v299[8] + v152), (uint64_t)"\x01\x04\x03", 2, (int *)v301, Mutable, *(__n128 *)(*(_QWORD *)&v299[8] + v152 + 8));
                          ++v153;
                          v152 += 24;
                        }
                        while (v153 < *(int *)&v299[4]);
                      }
                    }
                    else if (v141 == 5 && *(int *)&v299[4] >= 1)
                    {
                      v144 = 0;
                      v145 = 0;
                      do
                      {
                        term_trie_resolve_sub_string(*(_QWORD *)(*(_QWORD *)&v299[8] + v144), (uint64_t)"\x01\x05", 2, (int *)v301, Mutable, *(__n128 *)(*(_QWORD *)&v299[8] + v144 + 8));
                        term_trie_resolve_sub_string(*(_QWORD *)(*(_QWORD *)&v299[8] + v144), (uint64_t)"\x01\x05\x03", 2, (int *)v301, Mutable, *(__n128 *)(*(_QWORD *)&v299[8] + v144 + 8));
                        ++v145;
                        v144 += 24;
                      }
                      while (v145 < *(int *)&v299[4]);
                    }
                  }
                  else if (*(int *)&v299[4] >= 1)
                  {
                    v150 = 0;
                    v151 = 0;
                    do
                    {
                      term_trie_resolve_sub_string(*(_QWORD *)(*(_QWORD *)&v299[8] + v150), (uint64_t)"\x01", 1, (int *)v301, Mutable, *(__n128 *)(*(_QWORD *)&v299[8] + v150 + 8));
                      ++v151;
                      v150 += 24;
                    }
                    while (v151 < *(int *)&v299[4]);
                  }
                  do
                  {
                    v169 = *(_OWORD *)v301;
                    *(_OWORD *)v301 = *(_OWORD *)v299;
                    *(_DWORD *)&v301[4] = 0;
                    *(_OWORD *)v299 = v169;
LABEL_291:
                    v170 = *(_DWORD *)&v299[4];
                    if (*(int *)&v299[4] >= 1)
                    {
                      v171 = 0;
                      v172 = 0;
                      do
                      {
                        v173 = *(_QWORD *)(*(_QWORD *)&v299[8] + v171) & 3;
                        if ((_DWORD)v173 == 1 || (_DWORD)v173 == 2)
                        {
                          v174 = *(const void **)(*(_QWORD *)(*(_QWORD *)&v299[8] + v171) & 0xFFFFFFFFFFFFFFFCLL);
                          if (v174)
                          {
                            CFSetAddValue(Mutable, v174);
                            v170 = *(_DWORD *)&v299[4];
                          }
                        }
                        ++v172;
                        v171 += 24;
                      }
                      while (v172 < v170);
                    }
                  }
                  while (*(_DWORD *)&v301[4]);
                  goto LABEL_289;
                }
              }
LABEL_380:
              v221 = __si_assert_copy_extra_268();
              __message_assert("%s:%u: failed assertion '%s' %s ");
LABEL_381:
              free(v221);
              if (__valid_fs(-1))
                v222 = 2989;
              else
                v222 = 3072;
              *(_DWORD *)v222 = -559038737;
              abort();
            }
            v81 = *((unsigned __int8 *)&tcm + v36[v78]);
            if (((*(unsigned __int32 *)((char *)v79[1].i32 + ((v81 >> 3) & 0x1C)) >> v81) & 1) == 0)
              goto LABEL_133;
            v82 = 0;
            v83 = v79 + 1;
            v84 = v81 >> 6;
            if ((v81 >> 6) == 1)
              goto LABEL_112;
            if ((_DWORD)v84 == 2)
              goto LABEL_111;
            if ((_DWORD)v84 == 3)
            {
              v85 = (uint8x8_t)vcnt_s8(v79[3]);
              v85.i16[0] = vaddlv_u8(v85);
              v82 = v85.u32[0];
LABEL_111:
              v86 = (uint8x8_t)vcnt_s8(v79[2]);
              v86.i16[0] = vaddlv_u8(v86);
              v82 += v86.u32[0];
LABEL_112:
              v87 = (uint8x8_t)vcnt_s8(*v83);
              v87.i16[0] = vaddlv_u8(v87);
              v82 += v87.u32[0];
            }
            v88 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v83[v84] & ~(-1 << v81)));
            v88.i16[0] = vaddlv_u8(v88);
            v38 = (uint64_t)v79[v88.u32[0] + 6 + v82];
            if (!v38)
              goto LABEL_133;
          }
          if (v42 == ++v78)
          {
            LODWORD(v78) = v42;
            goto LABEL_121;
          }
          continue;
        }
      }
      v49 = v37 >= 2 && v36[v37 - 1] == 42;
      if ((int)v37 - v49 < 1)
      {
LABEL_60:
        LODWORD(v51) = v37 - v49;
        goto LABEL_61;
      }
      v51 = 0;
      while (1)
      {
        v52 = (int8x8_t *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
        v53 = v38 & 3;
        if (v53 != 1)
          break;
        v38 = (uint64_t)v52[*((unsigned __int8 *)&tcm + v36[v51]) + 1];
        if (!v38)
          goto LABEL_287;
LABEL_59:
        if ((_DWORD)v37 - v49 == ++v51)
          goto LABEL_60;
      }
      if (v53 == 2)
        break;
      if (v53 != 3)
        goto LABEL_287;
      v38 |= 3uLL;
LABEL_61:
      v281[0] = MEMORY[0x1E0C809B0];
      v281[1] = 0x40000000;
      v281[2] = __termUpdateSetResolveQueryInfo_block_invoke;
      v281[3] = &__block_descriptor_tmp_31_9582;
      v62 = v38 & 3;
      v281[4] = Mutable;
      if (v62 == 3)
      {
        v63 = (const void *)(v38 & 0xFFFFFFFFFFFFFFFCLL);
        if ((v38 & 0xFFFFFFFFFFFFFFFCLL) == 0)
          goto LABEL_287;
LABEL_283:
        CFSetAddValue(Mutable, v63);
        goto LABEL_287;
      }
      if ((_DWORD)v51 != (_DWORD)v37 - v49)
        goto LABEL_287;
      if (v62 == 1)
      {
        v69 = (const void **)(v38 & 0xFFFFFFFFFFFFFFFCLL);
        if (v49)
        {
          _TermTrieWalkFatWithOptions((uint64_t)v69, 0, 0, 1, 0, (uint64_t)v281, 0);
          goto LABEL_287;
        }
        v63 = *v69;
        if (*v69)
          goto LABEL_283;
      }
      else if (v62 == 2 && v49)
      {
        _TermTrieWalkCompactWithOptions(v38 & 0xFFFFFFFFFFFFFFFCLL, 0, 0, 1, 0, (uint64_t)v281, 0);
      }
LABEL_287:
      v33 = v234 + 1;
      if (v234 + 1 == count)
      {
LABEL_300:
        context = resolveQueryInfoCallback;
        v258 = 0;
        v259 = v282;
        v260 = Mutable;
        if (v225)
        {
          LODWORD(v258) = v225 - *(_DWORD *)(v13 + 8);
          v175 = (void (__cdecl *)(const void *, void *))flat_levels_cf_set_applier2;
        }
        else
        {
          v175 = (void (__cdecl *)(const void *, void *))flat_levels_cf_set_applier1;
        }
        a4 = v228;
        a2 = v224;
        CFSetApplyFunction(Mutable, v175, &context);
        CFRelease(Mutable);
        free(*(void **)&v299[8]);
        free(*(void **)&v301[8]);
        if (v228)
          goto LABEL_304;
        goto LABEL_373;
      }
    }
    v54 = *((unsigned __int8 *)&tcm + v36[v51]);
    if (((*(unsigned __int32 *)((char *)v52[1].i32 + ((v54 >> 3) & 0x1C)) >> v54) & 1) == 0)
      goto LABEL_287;
    v55 = 0;
    v56 = v52 + 1;
    v57 = v54 >> 6;
    if ((v54 >> 6) != 1)
    {
      if ((_DWORD)v57 != 2)
      {
        if ((_DWORD)v57 != 3)
          goto LABEL_56;
        v58 = (uint8x8_t)vcnt_s8(v52[3]);
        v58.i16[0] = vaddlv_u8(v58);
        v55 = v58.u32[0];
      }
      v59 = (uint8x8_t)vcnt_s8(v52[2]);
      v59.i16[0] = vaddlv_u8(v59);
      v55 += v59.u32[0];
    }
    v60 = (uint8x8_t)vcnt_s8(*v56);
    v60.i16[0] = vaddlv_u8(v60);
    v55 += v60.u32[0];
LABEL_56:
    v61 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v56[v57] & ~(-1 << v54)));
    v61.i16[0] = vaddlv_u8(v61);
    v38 = (uint64_t)v52[v61.u32[0] + 6 + v55];
    if (!v38)
      goto LABEL_287;
    goto LABEL_59;
  }
  v22 = a2;
  v23 = a3;
  while (**v23 != 42)
  {
    v23 += 8;
    if (!--v22)
      goto LABEL_14;
  }
  *(_QWORD *)v299 = resolveQueryInfoCallback;
  *(_QWORD *)&v299[8] = v282;
  v32 = *(_QWORD *)(v13 + 24);
  *(_QWORD *)&v283 = 0;
  *((_QWORD *)&v283 + 1) = &v283;
  LODWORD(v285) = 0;
  v284 = 0x2000000000;
  buf[0] = (int8x8_t)MEMORY[0x1E0C809B0];
  buf[1] = (int8x8_t)0x40000000;
  buf[2] = (int8x8_t)___hashTableIterate_block_invoke_2;
  buf[3] = (int8x8_t)&unk_1E6E2F4F8;
  buf[6] = (int8x8_t)v299;
  buf[5] = (int8x8_t)termUpdateSetApplier;
  buf[4] = (int8x8_t)&v283;
  _TermTrieWalkFatWithOptions(v32 + 32, 0, 0, 0, (uint64_t)buf, 0, 0);
  _Block_object_dispose(&v283, 8);
  if (a4)
  {
LABEL_304:
    if (a2)
    {
      v176 = 0;
      v177 = (_QWORD *)(v229 + 48);
      v178 = MEMORY[0x1E0C809B0];
      do
      {
        v179 = *(_QWORD *)(a4 + 8 * v176);
        v180 = &a3[8 * v176];
        v181 = *((_DWORD *)v180 + 4);
        if ((v181 & 0x600) != 0)
        {
          v182 = *((_DWORD *)v180 + 5);
          v183 = (uint64_t)*v180;
          v247[0] = v178;
          v247[1] = 0x40000000;
          v248 = __termUpdateSetResolveQueryInfo_block_invoke_3_49;
          v249 = &__block_descriptor_tmp_51_9601;
          v250 = v179;
          v253 = *(_OWORD *)&v282[32];
          v254 = *(_OWORD *)&v282[48];
          v255 = *(_OWORD *)&v282[64];
          v256 = *(_QWORD *)&v282[80];
          v251 = *(_OWORD *)v282;
          v252 = *(_OWORD *)&v282[16];
          if (v182)
          {
            v184 = *(_QWORD *)(v183 + 8 * (v182 - 1));
            if (v184 == *v177 || v184 == 2)
              --v182;
            v186 = v182 - 1;
          }
          else
          {
            v186 = -1;
          }
          Directory_290 = getDirectory_290(v177, v186, v183, 0);
          if (Directory_290)
          {
            if ((v181 & 0x400) != 0)
            {
              if (*(_DWORD *)(Directory_290 + 24))
                v248((uint64_t)v247, Directory_290 + 16);
            }
            else
            {
              getAllPostings(Directory_290, (uint64_t)v247);
            }
          }
        }
        else if ((v181 & 0x10) != 0)
        {
          *(_QWORD *)&v283 = 0;
          *((_QWORD *)&v283 + 1) = &v283;
          v284 = 0x2000000000;
          v285 = 0;
          v187 = 0;
          if (_os_feature_enabled_impl())
            v187 = *(_QWORD *)(v229 + 80);
          v188 = (unsigned int *)&a3[8 * v176];
          v189 = v188[15];
          v190 = v188[5];
          v191 = v189 >> 25;
          if (!(_DWORD)v191)
          {
            if (current_vector_version::onceToken != -1)
            {
              v216 = v188[5];
              dispatch_once(&current_vector_version::onceToken, &__block_literal_global_5670);
              v190 = v216;
            }
            v191 = (unsigned __int16)current_vector_version::vecVersion;
            v189 = v188[15];
          }
          v192 = (uint64_t)*v180;
          v193 = v189 & 3;
          v194 = (v189 >> 2) & 3;
          v195 = *((float *)v188 + 14);
          v240[0] = MEMORY[0x1E0C809B0];
          v240[1] = 0x40000000;
          v240[2] = __termUpdateSetResolveQueryInfo_block_invoke_4;
          v240[3] = &unk_1E6E37018;
          v243 = *(_OWORD *)&v282[32];
          v244 = *(_OWORD *)&v282[48];
          v245 = *(_OWORD *)&v282[64];
          v246 = *(_QWORD *)&v282[80];
          v241 = *(_OWORD *)v282;
          v242 = *(_OWORD *)&v282[16];
          v240[4] = &v283;
          v240[5] = v179;
          v196 = *(_QWORD **)(v187 + 8);
          v238 = v194;
          v239 = v190;
          v235 = v192;
          v236 = v193;
          if (!v196)
            goto LABEL_332;
          v197 = 2 * ((v193 << 50) | (v194 << 48) | (v191 << 32) | v190);
          v198 = (_QWORD *)(v187 + 8);
          do
          {
            v199 = v196[4];
            v200 = v199 >= v197;
            if (v199 >= v197)
              v201 = v196;
            else
              v201 = v196 + 1;
            if (v200)
              v198 = v196;
            v196 = (_QWORD *)*v201;
          }
          while (*v201);
          if (v198 != (_QWORD *)(v187 + 8) && v197 >= v198[4])
          {
            v203 = v198[5];
            if (*(_DWORD *)(v203 + 8) != (_DWORD)v190
              || *(unsigned __int16 *)(v203 + 20) != (_DWORD)v191
              || (_DWORD)v194 == 3
              || *(_DWORD *)(v203 + 12) != vector_dimension_vec_sizes_10743[v193]
              || vector_size_elem_sizes_10742[v194] != *(_DWORD *)(v203 + 16))
            {
              v217 = __si_assert_copy_extra_268();
              v218 = v217;
              v219 = "";
              if (v217)
                v219 = v217;
              __message_assert("%s:%u: failed assertion '%s' %s ", "IVFVectorIndex.hh", 3627, "it->second->isCompatible(propertyId, vecVersion, dim, form)", v219);
              free(v218);
              if (__valid_fs(-1))
                v220 = 2989;
              else
                v220 = 3072;
              *(_DWORD *)v220 = -559038737;
              abort();
            }
            v202 = (std::__shared_weak_count *)v198[6];
            if (v202)
            {
              p_shared_owners = (unint64_t *)&v202->__shared_owners_;
              do
                v215 = __ldxr(p_shared_owners);
              while (__stxr(v215 + 1, p_shared_owners));
            }
          }
          else
          {
LABEL_332:
            v202 = 0;
            v203 = 0;
          }
          v204 = *__error();
          v205 = _SILogForLogForCategory(16);
          v206 = v205;
          if (v203)
          {
            if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
            {
              v300 = 3;
              strcpy((char *)v299, "<U>");
              (*(void (**)(int8x8_t *__return_ptr, uint64_t, uint8_t *))(*(_QWORD *)v203 + 312))(buf, v203, v299);
              v207 = buf;
              if (buf[2].i8[7] < 0)
                v207 = (int8x8_t *)buf[0];
              *(_DWORD *)v301 = 134218242;
              *(_QWORD *)&v301[4] = v187;
              *(_WORD *)&v301[12] = 2080;
              *(_QWORD *)&v301[14] = v207;
              _os_log_impl(&dword_1B8270000, v206, OS_LOG_TYPE_DEFAULT, "aNN search on <UpdateSet> %p %s", v301, 0x16u);
              if (buf[2].i8[7] < 0)
                operator delete(*(void **)buf);
              if (v300 < 0)
                operator delete(*(void **)v299);
            }
            *__error() = v204;
            buf[0] = (int8x8_t)MEMORY[0x1E0C809B0];
            buf[1] = (int8x8_t)0x40000000;
            buf[2] = (int8x8_t)___ZNK23IVFVectorIndexUpdateSet3aNNEjtPKv14vec_dimensions15vec_data_formatfjbU13block_pointerFvPN18vi_memory_postings12storage_formEfE_block_invoke;
            buf[3] = (int8x8_t)&unk_1E6E30A58;
            buf[4] = (int8x8_t)v240;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, float, int8x8_t *))(*(_QWORD *)v203 + 224))(v203, v239, v191, v235, v236, v238, (v189 >> 4) & 0xFFFFF, HIBYTE(v189) & 1, v195, buf);
          }
          else
          {
            v209 = dword_1EF19FCCC < 3;
            if (os_log_type_enabled(v205, (os_log_type_t)(dword_1EF19FCCC < 3)))
            {
              IVFIndexName((uint64_t)buf, v239, v191, v236, v238);
              v210 = buf;
              if (buf[2].i8[7] < 0)
                v210 = (int8x8_t *)buf[0];
              *(_DWORD *)v299 = 134218242;
              *(_QWORD *)&v299[4] = v187;
              *(_WORD *)&v299[12] = 2080;
              *(_QWORD *)&v299[14] = v210;
              _os_log_impl(&dword_1B8270000, v206, (os_log_type_t)v209, "*warn* aNN search on <UpdateSet> %p %s not found", v299, 0x16u);
              if (buf[2].i8[7] < 0)
                operator delete(*(void **)buf);
            }
            *__error() = v204;
          }
          a4 = v228;
          v177 = (_QWORD *)(v229 + 48);
          a3 = v232;
          v178 = MEMORY[0x1E0C809B0];
          if (v202)
          {
            v211 = (unint64_t *)&v202->__shared_owners_;
            do
              v212 = __ldaxr(v211);
            while (__stlxr(v212 - 1, v211));
            if (!v212)
            {
              ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
              std::__shared_weak_count::__release_weak(v202);
            }
          }
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            v213 = *(int8x8_t *)(*((_QWORD *)&v283 + 1) + 24);
            buf[0].i32[0] = 134217984;
            *(int8x8_t *)((char *)buf + 4) = v213;
            _os_log_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "update set ANN found %zu", (uint8_t *)buf, 0xCu);
          }
          _Block_object_dispose(&v283, 8);
        }
        ++v176;
      }
      while (v176 != count);
    }
  }
LABEL_373:
  CIOnThreadCleanUpPop(v14);
  CICleanUpReset(v14, v226);
  return 0;
}

uint64_t indexFindBulk(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t *a6, int a7, unsigned __int8 a8, _BYTE *a9, char **a10, char **a11, _QWORD *a12)
{
  int32_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void (*v24)(_QWORD);
  _DWORD *v25;
  int v26;
  NSObject *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int *v32;
  unsigned int v33;
  void *v35;
  void *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  char v46;
  _BYTE *v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD);
  unsigned __int8 *v54;
  uint64_t v55;
  int v57;
  __int128 v58;
  char v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  _BOOL4 Bulk;
  int v67;
  char v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  double Current;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  CFMutableSetRef Mutable;
  __CFSet *v84;
  const void **v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  size_t v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  unsigned __int8 *v119;
  void *v120;
  uint64_t v121;
  void *v122;
  unint64_t v123;
  int32_t v124;
  unint64_t v125;
  unint64_t v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  void (*v132)(_QWORD);
  _DWORD *v133;
  int v134;
  NSObject *v135;
  int32_t v136;
  unint64_t v137;
  unint64_t v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(_QWORD);
  _DWORD *v144;
  int v145;
  NSObject *v146;
  int v147;
  NSObject *v148;
  os_log_type_t v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(_QWORD);
  int v155;
  NSObject *v156;
  os_log_type_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(_QWORD);
  int v161;
  char v162;
  int v163;
  char **v164;
  char **v165;
  char *v166;
  char *v167;
  const char *v168;
  int v169;
  NSObject *v170;
  os_log_type_t v171;
  float v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  __int128 *v202;
  __int128 *v203;
  uint64_t v208;
  uint64_t v209;
  uint64_t v212;
  uint64_t *v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  uint64_t *ptr;
  uint64_t v218;
  uint64_t Next;
  size_t v220;
  uint64_t v221;
  float v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t *v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  size_t v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t *v244;
  unint64_t v245;
  unint64_t v246;
  uint64_t v247;
  __int128 *v248;
  uint64_t v249;
  __int128 v250;
  __int128 v251;
  uint64_t v252;
  __int128 *v253;
  uint64_t v254;
  __int128 v255;
  uint64_t v256;
  char *v257;
  char *v258;
  const char *v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  unsigned __int8 v264;
  uint64_t v265;
  uint64_t v266;
  int v267;
  uint64_t v268;
  int v270;
  int v271;
  uint64_t v272;
  int v274;
  int32_t v275;
  int v276;
  char v277;
  unsigned __int8 *v278;
  unint64_t v279;
  uint64_t v280;
  unsigned int v281;
  int v283;
  int v285;
  int32_t v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  unsigned int v290;
  char v291;
  unsigned int v292;
  unsigned int v293;
  __int128 v294;
  uint64_t v295;
  __int128 v296;
  uint64_t v297;
  _BYTE buf[24];
  uint64_t v299;

  v299 = *MEMORY[0x1E0C80C00];
  v16 = OSAtomicIncrement32((int32_t *)exceptionSequenceNum);
  v17 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v16);
  v18 = v17;
  v293 = v19;
  v292 = v20;
  v21 = *(_QWORD *)&threadData[18 * v17 + 2];
  v22 = v21 + 320 * HIDWORD(v17);
  v23 = *(_DWORD *)(v22 + 312);
  v24 = *(void (**)(_QWORD))(v22 + 224);
  if (v24)
    v24(*(_QWORD *)(v21 + 320 * HIDWORD(v17) + 288));
  if (_setjmp((int *)v22))
  {
    v25 = (_DWORD *)(v22 + 312);
    v26 = *__error();
    v27 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "indexFindBulk";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 980;
      _os_log_error_impl(&dword_1B8270000, v27, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v26;
    *v25 = v23;
    if (__THREAD_SLOT_KEY)
    {
      v28 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v28)
        goto LABEL_213;
    }
    else
    {
      makeThreadId();
      v28 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v28)
        goto LABEL_213;
    }
    v29 = v28;
    if ((unint64_t)v28 < 0x801)
    {
LABEL_9:
      v30 = (uint64_t)v29 - 1;
      v31 = &threadData[18 * ((uint64_t)v29 - 1)];
      v33 = v31[14];
      v32 = v31 + 14;
      if (v33 > v292)
      {
        do
          CIOnThreadCleanUpPop(v30);
        while (*v32 > v292);
      }
      dropThreadId(v18, 1, v16);
      return CICleanUpReset(v18, v293);
    }
LABEL_213:
    makeThreadId();
    v29 = pthread_getspecific(__THREAD_SLOT_KEY);
    goto LABEL_9;
  }
  if (__THREAD_SLOT_KEY)
  {
    v35 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (v35)
      goto LABEL_14;
  }
  else
  {
    makeThreadId();
    v35 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (v35)
    {
LABEL_14:
      v36 = v35;
      if ((unint64_t)v35 < 0x801)
        goto LABEL_15;
    }
  }
  makeThreadId();
  v36 = pthread_getspecific(__THREAD_SLOT_KEY);
LABEL_15:
  v37 = threadData[18 * ((uint64_t)v36 - 1) + 8];
  if (a3)
  {
    v38 = a3;
    v39 = (uint64_t *)a5;
    do
    {
      v40 = *v39++;
      *(_BYTE *)v40 = 0;
      *(_OWORD *)(v40 + 16) = 0uLL;
      *(_OWORD *)(v40 + 32) = 0uLL;
      *(_OWORD *)(v40 + 44) = 0uLL;
      *(_QWORD *)(v40 + 64) = 0xFFFFFFFFLL;
      *(_DWORD *)(v40 + 8) = 0;
      --v38;
    }
    while (v38);
  }
  v280 = (uint64_t)v36 - 1;
  v286 = v16;
  v285 = v23;
  v281 = v37;
  if (!a6)
  {
    v41 = -1;
    goto LABEL_24;
  }
  if (!a12)
  {
    v41 = -1;
    if (!a3)
      goto LABEL_24;
    goto LABEL_57;
  }
  if (pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 14144)))
  {
    v257 = __si_assert_copy_extra_268();
    v258 = v257;
    v259 = "";
    if (v257)
      v259 = v257;
    __message_assert(v257, "poslock.c", 14, "result==0", v259);
    free(v258);
LABEL_219:
    if (__valid_fs(-1))
      v260 = 2989;
    else
      v260 = 3072;
    *(_DWORD *)v260 = -559038737;
    abort();
  }
  v41 = CIOnThreadCleanUpPush(v280, (uint64_t)posreadunlock, a1 + 14144);
  if (a3)
  {
LABEL_57:
    v75 = a3;
    v76 = a6;
    do
    {
      v77 = *v76;
      if (*v76)
      {
        *(_BYTE *)v77 = 0;
        *(_OWORD *)(v77 + 16) = 0uLL;
        *(_OWORD *)(v77 + 32) = 0uLL;
        *(_OWORD *)(v77 + 44) = 0uLL;
        *(_QWORD *)(v77 + 64) = 0xFFFFFFFFLL;
        *(_DWORD *)(v77 + 8) = 0;
      }
      ++v76;
      --v75;
    }
    while (v75);
  }
LABEL_24:
  v283 = a7;
  v279 = v41;
  v42 = *__error();
  v43 = _SILogForLogForCategory(1);
  v44 = 2 * (dword_1EF19FC90 < 4);
  if (os_log_type_enabled(v43, v44))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = a1;
    _os_log_impl(&dword_1B8270000, v43, v44, "process for %p", buf, 0xCu);
  }
  *__error() = v42;
  v45 = a1;
  v46 = atomic_load((unsigned int *)(a1 + 28));
  v47 = a9;
  if (!*a9)
  {
    v264 = a8;
    v54 = (unsigned __int8 *)(a1 + 4669);
    v55 = a3;
    if (a3)
      _ZF = a6 == 0;
    else
      _ZF = 1;
    v57 = !_ZF;
    v58 = 0uLL;
    while (1)
    {
      v59 = v46;
      v60 = *(_DWORD *)(v45 + 4664);
      if ((a7 & 1) != 0)
      {
        v61 = 0;
      }
      else
      {
        v62 = (uint64_t)a6;
        if (!v60)
          v62 = 0;
        v63 = a4;
        v64 = a4;
        v65 = v54;
        Bulk = _bt_findBulk(v45, a1 + 88, *(_QWORD *)(v45 + 4896), *(_QWORD *)(v45 + 4904), a2, a3, v63, a5, v62, v47, 0, 0, v264);
        v58 = 0uLL;
        v47 = a9;
        v45 = a1;
        if (*a9)
          goto LABEL_27;
        v54 = v65;
        a4 = v64;
        v61 = Bulk;
      }
      v67 = v61;
      if (v61 == *v54)
      {
        if ((v59 & 4) != 0)
          break;
        v68 = atomic_load((unsigned int *)(v45 + 28));
        if ((v68 & 4) == 0)
          break;
      }
      v69 = (uint64_t *)a5;
      v70 = a3;
      if (a3)
      {
        do
        {
          v71 = *v69++;
          *(_BYTE *)v71 = 0;
          *(_OWORD *)(v71 + 16) = v58;
          *(_OWORD *)(v71 + 32) = v58;
          *(_OWORD *)(v71 + 44) = v58;
          *(_QWORD *)(v71 + 64) = 0xFFFFFFFFLL;
          *(_DWORD *)(v71 + 8) = 0;
          --v70;
        }
        while (v70);
        v72 = a6;
        v73 = a3;
        if (v57)
        {
          do
          {
            v74 = *v72;
            if (*v72)
            {
              *(_BYTE *)v74 = 0;
              *(_OWORD *)(v74 + 16) = v58;
              *(_OWORD *)(v74 + 32) = v58;
              *(_OWORD *)(v74 + 44) = v58;
              *(_QWORD *)(v74 + 64) = 0xFFFFFFFFLL;
              *(_DWORD *)(v74 + 8) = 0;
            }
            ++v72;
            --v73;
          }
          while (v73);
        }
      }
      v46 = atomic_load((unsigned int *)(v45 + 28));
      if (*v47)
        goto LABEL_27;
    }
    v276 = v67;
    v277 = v59;
    v278 = v54;
    Current = CFAbsoluteTimeGetCurrent();
    v267 = v60;
    if (v60)
    {
      v79 = 0;
      v80 = v280;
    }
    else
    {
      v81 = malloc_type_malloc(0x18uLL, 0x102004024DAA5DEuLL);
      v79 = v81;
      v81[1] = a3;
      v81[2] = 1;
      v80 = v280;
      if (a3)
      {
        v82 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 40 * a3 + 80, 0x6085D6BuLL);
        if (!v82)
          _log_fault_for_malloc_failure();
        *v79 = v82;
        v82[4] = 0;
        *(_OWORD *)v82 = 0u;
        *((_OWORD *)v82 + 1) = 0u;
      }
      else
      {
        *v81 = 0;
      }
      CICleanUpPush(v280, (uint64_t)PQueue_bulk_TermIdQueue_free, (uint64_t)v79);
    }
    Mutable = CFSetCreateMutable((CFAllocatorRef)kCIQueryZoneAllocator, a3, 0);
    CICleanUpPush(v80, (uint64_t)MEMORY[0x1E0C98BC0], (uint64_t)Mutable);
    if (!a3)
    {
LABEL_97:
      v291 = 0;
      if (v267)
      {
        v291 = 1;
        v117 = a1;
        v118 = a9;
        v119 = v278;
        goto LABEL_132;
      }
      v120 = malloc_type_malloc(0x18uLL, 0x1020040F21E5318uLL);
      storage_reader_init(a1 + 4960, (uint64_t)v120);
      CICleanUpPush(v280, (uint64_t)storage_reader_free, (uint64_t)v120);
      v121 = (uint64_t)a6;
      if (a6)
      {
        v122 = malloc_type_malloc(0x18uLL, 0x1020040F21E5318uLL);
        storage_reader_init(a1 + 9672, (uint64_t)v122);
        CICleanUpPush(v280, (uint64_t)storage_reader_free, (uint64_t)v122);
        v121 = (uint64_t)v122;
      }
      v123 = *(unsigned int *)(a1 + 9368);
      if (v120 && !*((_BYTE *)v120 + 16))
      {
        v147 = *__error();
        v148 = _SILogForLogForCategory(0);
        v149 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v148, v149))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v148, v149, "Skipping because index is shut down", buf, 2u);
        }
        *__error() = v147;
LABEL_130:
        v118 = a9;
        v117 = a1;
        v119 = v278;
        if (!*a9 && v79[2] != 1)
        {
          v261 = __si_assert_copy_extra_2151(0, -1);
          __message_assert("%s:%u: failed assertion '%s' %s ");
          goto LABEL_225;
        }
LABEL_132:
        if (!v291 || *v118)
          goto LABEL_27;
        v161 = *v119;
        if (v276 != v161 || (v277 & 4) != 0)
        {
          v163 = v283;
          v164 = a10;
          v165 = a11;
          if (v276 != v161)
            goto LABEL_137;
        }
        else
        {
          v162 = atomic_load((unsigned int *)(v117 + 28));
          v163 = v283;
          v164 = a10;
          v165 = a11;
          if ((v162 & 4) != 0)
          {
LABEL_137:
            v166 = __si_assert_copy_extra_2151(0, -1);
            v167 = v166;
            v168 = "";
            if (v166)
              v168 = v166;
            __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 948, "!((renamed != cindex->trie.renamed) || (!isCompact && (cindex->flags & kIndexFlagCompact)))", v168);
            free(v167);
            goto LABEL_219;
          }
        }
        if (v164)
          *v164 = clonePayloadData((uint64_t *)(v117 + 4920), *(_DWORD *)(v117 + 48), v163 ^ 1u);
        v48 = v286;
        v49 = v285;
        if (a6 && v165)
          *v165 = clonePayloadData((uint64_t *)(a1 + 9632), *(_DWORD *)(a1 + 48), v163 ^ 1u);
        v169 = *__error();
        v170 = _SILogForLogForCategory(1);
        v171 = 2 * (dword_1EF19FC90 < 4);
        if (os_log_type_enabled(v170, v171))
        {
          v172 = CFAbsoluteTimeGetCurrent() - Current;
          *(_DWORD *)buf = 134217984;
          *(double *)&buf[4] = v172;
          _os_log_impl(&dword_1B8270000, v170, v171, "resolve term ids: %f seconds", buf, 0xCu);
        }
        *__error() = v169;
        v50 = v280;
        if (v279 == -1)
          goto LABEL_29;
        CIOnThreadCleanUpClearItem(v280, v279);
        *a12 = a1 + 14144;
        goto LABEL_28;
      }
      v272 = v121;
      v124 = OSAtomicIncrement32((int32_t *)exceptionSequenceNum);
      v125 = setThreadIdAndInfo(-1, sStorageReaderExceptionCallbacks, (uint64_t)v120, 0, v124);
      v126 = v125;
      v290 = v127;
      v289 = v128;
      v129 = *(_QWORD *)&threadData[18 * v125 + 2];
      v130 = v129 + 320 * HIDWORD(v125);
      v131 = *(_DWORD *)(v130 + 312);
      v132 = *(void (**)(_QWORD))(v130 + 224);
      if (v132)
        v132(*(_QWORD *)(v129 + 320 * HIDWORD(v125) + 288));
      if (_setjmp((int *)v130))
      {
        v133 = (_DWORD *)(v130 + 312);
        v134 = *__error();
        v135 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "indexFindBulk";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 939;
          _os_log_error_impl(&dword_1B8270000, v135, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
        }
        *__error() = v134;
        *v133 = v131;
        CIOnThreadCleanUpReset(v289);
        dropThreadId(v126, 1, v124);
        CICleanUpReset(v126, v290);
        goto LABEL_130;
      }
      if (v272 && !*(_BYTE *)(v272 + 16))
      {
        v155 = *__error();
        v156 = _SILogForLogForCategory(0);
        v157 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v156, v157))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v156, v157, "Skipping because index is shut down", buf, 2u);
        }
        *__error() = v155;
        goto LABEL_127;
      }
      v136 = OSAtomicIncrement32((int32_t *)exceptionSequenceNum);
      v137 = setThreadIdAndInfo(-1, sStorageReaderExceptionCallbacks, v272, 0, v136);
      v138 = v137;
      v288 = v139;
      v287 = v140;
      v141 = *(_QWORD *)&threadData[18 * v137 + 2];
      v142 = v141 + 320 * HIDWORD(v137);
      v270 = *(_DWORD *)(v142 + 312);
      v143 = *(void (**)(_QWORD))(v142 + 224);
      if (v143)
        v143(*(_QWORD *)(v141 + 320 * HIDWORD(v137) + 288));
      v271 = v136;
      if (_setjmp((int *)v142))
      {
        v144 = (_DWORD *)(v142 + 312);
        v145 = *__error();
        v146 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "indexFindBulk";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 938;
          _os_log_error_impl(&dword_1B8270000, v146, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
        }
        *__error() = v145;
        *v144 = v270;
        CIOnThreadCleanUpReset(v287);
        dropThreadId(v138, 1, v271);
        CICleanUpReset(v138, v288);
LABEL_127:
        v158 = *(_QWORD *)&threadData[18 * v126 + 2];
        v159 = v158 + 320 * HIDWORD(v126);
        *(_DWORD *)(v159 + 312) = v131;
        v160 = *(void (**)(_QWORD))(v159 + 232);
        if (v160)
          v160(*(_QWORD *)(v158 + 320 * HIDWORD(v126) + 288));
        dropThreadId(v126, 0, v124);
        goto LABEL_130;
      }
      v274 = v131;
      v275 = v124;
      v150 = v79[2];
      v151 = a9;
      if (v150 == 1)
      {
LABEL_121:
        v291 = 1;
        v152 = *(_QWORD *)&threadData[18 * v138 + 2];
        v153 = v152 + 320 * HIDWORD(v138);
        *(_DWORD *)(v153 + 312) = v270;
        v154 = *(void (**)(_QWORD))(v153 + 232);
        if (v154)
          v154(*(_QWORD *)(v152 + 320 * HIDWORD(v138) + 288));
        dropThreadId(v138, 0, v136);
        v124 = v275;
        v131 = v274;
        goto LABEL_127;
      }
LABEL_153:
      if (*v151)
        goto LABEL_121;
      v173 = *v79;
      v174 = *(_QWORD *)(*v79 + 40);
      v175 = *(_QWORD *)(*v79 + 56);
      v176 = *(_QWORD *)(*v79 + 64);
      v177 = v175;
      v178 = *(_QWORD *)(*v79 + 72);
      v179 = v178;
      v180 = *v79 + 40 * v150;
      v181 = *(_QWORD *)(v180 - 32);
      v182 = *(_QWORD *)(v180 - 40);
      v294 = *(_OWORD *)(v180 - 24);
      v183 = *(_QWORD *)(v180 - 8);
      *(_QWORD *)(v173 + 40) = v182;
      *(_QWORD *)(v173 + 48) = v181;
      *(_OWORD *)(v173 + 56) = v294;
      *(_QWORD *)(v173 + 72) = v183;
      v185 = v79[1];
      v184 = v79[2];
      v295 = v183;
      v79[2] = v184 - 1;
      v186 = v185 >> 1;
      v187 = 3;
      v188 = 2;
      v189 = 1;
      while (1)
      {
        v190 = v187;
        v191 = *v79;
        v192 = *v79 + 40 * v188;
        v193 = *(_QWORD *)v192;
        v194 = *(_QWORD *)(v192 + 8);
        *(_OWORD *)buf = *(_OWORD *)(v192 + 16);
        *(_QWORD *)&buf[16] = *(_QWORD *)(v192 + 32);
        v195 = (uint64_t *)(v191 + 40 * v190);
        v196 = *v195;
        v197 = v195[1];
        v296 = *((_OWORD *)v195 + 1);
        v297 = v195[4];
        if (v190 >= v184)
        {
          v296 = 0uLL;
          v297 = 0;
          if (v188 >= v184)
            goto LABEL_172;
          v200 = 0;
          v199 = -1;
          if (v194 < v181)
          {
LABEL_157:
            _CF = v199 >= v194;
            if (v199 >= v194)
            {
              v202 = (__int128 *)buf;
            }
            else
            {
              v193 = v200;
              v194 = v199;
              v202 = &v296;
            }
            if (_CF)
              v190 = v188;
            v203 = v202;
            goto LABEL_164;
          }
        }
        else
        {
          v198 = v196;
          v199 = v197;
          v200 = v198;
          if (v194 < v181)
            goto LABEL_157;
        }
        if (v199 >= v181)
        {
          _X8 = v191 + 80 * v189;
          __asm { PRFM            #1, [X8] }
LABEL_172:
          v212 = *(_QWORD *)(v174 + 16);
          v213 = (uint64_t *)(v212 + 16 * v175);
          v214 = (uint64_t *)(v212 + 8 * v175);
          if (*(_BYTE *)v174)
            v215 = v213;
          else
            v215 = v214;
          v216 = *v215;
          v268 = v176;
          if ((*v215 & 0x3FFFFFFFFFFFFFFFuLL) >= v123)
          {
            v223 = v178;
            goto LABEL_193;
          }
          v265 = v175;
          v266 = v178;
          ptr = (uint64_t *)storage_reader_get_ptr(*(_QWORD *)v120, *((_QWORD *)v120 + 1), 8 * *v215, 8uLL);
          if (ptr == (uint64_t *)-1)
          {
            v261 = __si_assert_copy_extra_2151(0, -1);
            __message_assert("%s:%u: failed assertion '%s' %s failed to read offset for term %d");
LABEL_225:
            free(v261);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          v218 = *ptr;
          if (*ptr)
          {
            if (v272 && (*(_WORD *)(a4 + (v176 << 6) + 16) & 0x3080) != 0)
            {
              Next = termIdStoreReaderGetNext(*(_QWORD *)v272, *(_QWORD *)(v272 + 8), v216);
              oqpush_2205(a6[v176], Next, v220);
            }
            v221 = v218 | v216 & 0x4000000000000000;
            if (*(_BYTE *)v174)
            {
              v222 = oq_meta_at_index(v174, v177);
              oq_set_offset_with_meta_at_index(v174, v179, v221, LODWORD(v222));
            }
            else
            {
              oq_set_offset_at_index(v174, v179, v221);
            }
            v175 = v265;
            v224 = *(_QWORD *)(v174 + 16);
            v225 = (_QWORD *)(v224 + 16 * v266);
            v226 = (_QWORD *)(v224 + 8 * v266);
            if (*(_BYTE *)v174)
              v227 = v225;
            else
              v227 = v226;
            if (*v227)
              v223 = v266 + 1;
            else
              v223 = v266;
            v151 = a9;
          }
          else
          {
            v223 = v179;
            v151 = a9;
            v175 = v265;
          }
LABEL_193:
          v228 = v175 + 1;
          if (v175 + 1 >= *(_QWORD *)(v174 + 32))
          {
            *(_QWORD *)(v174 + 32) = v223;
          }
          else
          {
            v229 = *(_QWORD *)(v174 + 16);
            v230 = (uint64_t *)(v229 + 16 * v228);
            v231 = (uint64_t *)(v229 + 8 * v228);
            if (*(_BYTE *)v174)
              v232 = v230;
            else
              v232 = v231;
            v233 = *v232;
            v234 = v79[1];
            v235 = v79[2];
            v236 = v235;
            v237 = (char *)*v79;
            if (v235 + 2 >= v234)
            {
              v263 = v233;
              v239 = 2 * v234;
              v99 = v234 < 4;
              v240 = 4;
              if (!v99)
                v240 = v239;
              v79[1] = v240;
              v241 = 40 * v240 + 80;
              if (v237)
                v242 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, v237, v241, 0xECA6AA46uLL);
              else
                v242 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v241, 0x8DDAA030uLL);
              v243 = v242;
              v151 = a9;
              if (!v242)
              {
                _log_fault_for_malloc_failure();
                v151 = a9;
              }
              *v79 = v243;
              v243[4] = 0;
              *(_OWORD *)v243 = 0u;
              *((_OWORD *)v243 + 1) = 0u;
              v238 = v79[2];
              v237 = (char *)*v79;
              v233 = v263;
              v236 = v235;
            }
            else
            {
              v238 = v79[2];
            }
            v79[2] = v238 + 1;
            v244 = (uint64_t *)&v237[40 * v235];
            *v244 = v174;
            v244[1] = v233;
            v244[2] = v228;
            v244[3] = v268;
            v244[4] = v223;
            if (v235 >= 2)
            {
              v245 = v236;
              do
              {
                v246 = v245;
                v247 = *v79;
                if (*(_QWORD *)(*v79 + 40 * v246 + 8) > *(_QWORD *)(*v79 + 40 * (v246 >> 1) + 8))
                  break;
                v248 = (__int128 *)(v247 + 40 * v246);
                v249 = *((_QWORD *)v248 + 4);
                v251 = *v248;
                v250 = v248[1];
                v252 = 40 * (v246 >> 1);
                v253 = (__int128 *)(v247 + v252);
                v254 = *((_QWORD *)v253 + 4);
                v255 = v253[1];
                *v248 = *v253;
                v248[1] = v255;
                *((_QWORD *)v248 + 4) = v254;
                v256 = *v79 + v252;
                *(_OWORD *)v256 = v251;
                *(_OWORD *)(v256 + 16) = v250;
                *(_QWORD *)(v256 + 32) = v249;
                v245 = v246 >> 1;
              }
              while (v246 > 3);
            }
          }
          v150 = v79[2];
          if (v150 == 1)
            goto LABEL_121;
          goto LABEL_153;
        }
        v203 = &v296;
        v193 = v200;
        v194 = v199;
LABEL_164:
        _X1 = v191 + 80 * v190;
        __asm { PRFM            #1, [X1] }
        if (v190 != v189)
        {
          v208 = v191 + 40 * v190;
          *(_QWORD *)v208 = v182;
          *(_QWORD *)(v208 + 8) = v181;
          *(_OWORD *)(v208 + 16) = v294;
          *(_QWORD *)(v208 + 32) = v295;
          v209 = *v79 + 40 * v189;
          *(_QWORD *)v209 = v193;
          *(_QWORD *)(v209 + 8) = v194;
          *(_OWORD *)(v209 + 16) = *v203;
          *(_QWORD *)(v209 + 32) = *((_QWORD *)v203 + 2);
          v189 = v190;
          v188 = 2 * v190;
          v187 = (2 * v190) | 1;
          if (v190 < v186)
            continue;
        }
        goto LABEL_172;
      }
    }
    v84 = Mutable;
    if (v267)
    {
      v85 = (const void **)a5;
      v86 = v55;
      do
      {
        v87 = (unsigned __int8 *)*v85;
        if (!CFSetContainsValue(v84, *v85))
        {
          CFSetAddValue(v84, v87);
          v89 = *v87;
          v88 = (uint64_t)(v87 + 8);
          if (v89)
            oqsort_offset_with_meta_t(v88);
          else
            oqsort_offset_t(v88);
        }
        ++v85;
        --v86;
      }
      while (v86);
      goto LABEL_97;
    }
    v90 = 0;
    while (1)
    {
      v91 = *(_BYTE **)(a5 + 8 * v90);
      if (!CFSetContainsValue(v84, v91))
      {
        CFSetAddValue(v84, v91);
        v92 = (uint64_t)(v91 + 8);
        if (*v91)
        {
          oqsort_offset_with_meta_t(v92);
          if (*((_QWORD *)v91 + 4))
            goto LABEL_84;
        }
        else
        {
          oqsort_offset_t(v92);
          if (*((_QWORD *)v91 + 4))
          {
LABEL_84:
            v93 = **((_QWORD **)v91 + 2);
            v94 = v79[1];
            v95 = v79[2];
            v96 = v95;
            v97 = v95;
            if (v95 + 2 >= v94)
            {
              v262 = **((_QWORD **)v91 + 2);
              v98 = 2 * v94;
              v99 = v94 < 4;
              v100 = 4;
              if (!v99)
                v100 = v98;
              v79[1] = v100;
              v101 = 40 * v100 + 80;
              if (*v79)
                v102 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, (void *)*v79, v101, 0xECA6AA46uLL);
              else
                v102 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v101, 0x8DDAA030uLL);
              v103 = v102;
              v93 = v262;
              if (!v102)
              {
                _log_fault_for_malloc_failure();
                v93 = v262;
              }
              *v79 = v103;
              v103[4] = 0;
              *(_OWORD *)v103 = 0u;
              *((_OWORD *)v103 + 1) = 0u;
              v97 = v79[2];
            }
            v79[2] = v97 + 1;
            v104 = (_QWORD *)(*v79 + 40 * v95);
            *v104 = v91;
            v104[1] = v93;
            v104[2] = 0;
            v104[3] = v90;
            v104[4] = 0;
            if (v95 >= 2)
            {
              do
              {
                v105 = (char *)*v79;
                v106 = v96 >> 1;
                if (*(_QWORD *)(*v79 + 40 * v96 + 8) > *(_QWORD *)(*v79 + 40 * (v96 >> 1) + 8))
                  break;
                v107 = v96;
                v96 >>= 1;
                v108 = &v105[40 * v107];
                v109 = *((_QWORD *)v108 + 4);
                v111 = *(_OWORD *)v108;
                v110 = *((_OWORD *)v108 + 1);
                v112 = 40 * v106;
                v113 = &v105[v112];
                v114 = *((_QWORD *)v113 + 4);
                v115 = *((_OWORD *)v113 + 1);
                *(_OWORD *)v108 = *(_OWORD *)v113;
                *((_OWORD *)v108 + 1) = v115;
                *((_QWORD *)v108 + 4) = v114;
                v116 = *v79 + v112;
                *(_OWORD *)v116 = v111;
                *(_OWORD *)(v116 + 16) = v110;
                *(_QWORD *)(v116 + 32) = v109;
              }
              while (v107 > 3);
            }
          }
        }
      }
      if (++v90 == v55)
        goto LABEL_97;
    }
  }
LABEL_27:
  v48 = v286;
  v49 = v285;
  v50 = v280;
  if (v279 != -1)
LABEL_28:
    CIOnThreadCleanUpPop(v50);
LABEL_29:
  CICleanUpReset(v50, v281);
  v51 = *(_QWORD *)&threadData[18 * v18 + 2];
  v52 = v51 + 320 * HIDWORD(v18);
  *(_DWORD *)(v52 + 312) = v49;
  v53 = *(void (**)(_QWORD))(v52 + 232);
  if (v53)
    v53(*(_QWORD *)(v51 + 320 * HIDWORD(v18) + 288));
  return dropThreadId(v18, 0, v48);
}

uint64_t CICleanUpPush(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  char *v11;
  unsigned int v12;
  void **v13;
  char *v14;
  char *v16;
  char *v17;
  const char *v18;
  uint64_t v19;

  v5 = &threadData[18 * a1];
  v8 = v5[8];
  v7 = v5 + 8;
  v6 = v8;
  v10 = v7 + 1;
  v9 = v7[1];
  if (v8 >= v9)
  {
    v12 = 2 * v9;
    if (!v9)
      v12 = 4;
    *v10 = v12;
    v13 = (void **)&threadData[18 * a1];
    v11 = (char *)malloc_type_realloc(v13[6], 16 * v12, 0x80040803F642BuLL);
    v13[6] = v11;
    if (!*v10)
    {
      v16 = __si_assert_copy_extra_268();
      v17 = v16;
      v18 = "";
      if (v16)
        v18 = v16;
      __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexExceptionHandler.c", 1528, "td->cleanUpSize", v18);
      free(v17);
      if (__valid_fs(-1))
        v19 = 2989;
      else
        v19 = 3072;
      *(_DWORD *)v19 = -559038737;
      abort();
    }
    v6 = *v7;
  }
  else
  {
    v11 = *(char **)&threadData[18 * a1 + 12];
  }
  v14 = &v11[16 * v6];
  *(_QWORD *)v14 = a2;
  *((_QWORD *)v14 + 1) = a3;
  *v7 = v6 + 1;
  return v6;
}

uint64_t termIdStoreReaderGetNext(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t ptr;
  char *v6;
  char *v7;
  const char *v8;

  ptr = storage_reader_get_ptr(a1, a2, 8 * a3, 8uLL);
  if (ptr == -1)
  {
    v6 = __si_assert_copy_extra_2151(0, -1);
    v7 = v6;
    v8 = "";
    if (v6)
      v8 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s failed to read offset for term %d", "TermIdStore.h", 89, "(intptr_t)ptr!=-1", v8, a3);
    free(v7);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return *(_QWORD *)ptr;
}

uint64_t storage_reader_init(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  pthread_rwlock_t *v5;
  uint64_t sig;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  v3 = 1;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)a2 = result;
  if (*(_BYTE *)(result + 244))
    goto LABEL_4;
  v4 = result;
  if (*(_DWORD *)(result + 4360))
  {
    v3 = 2;
LABEL_4:
    *(_DWORD *)(a2 + 20) = v3;
    *(_QWORD *)(a2 + 8) = 0;
    return result;
  }
  *(_DWORD *)(a2 + 20) = 0;
  v5 = *(pthread_rwlock_t **)(result + 4400);
  pthread_rwlock_rdlock(v5);
  sig = v5[1].__sig;
  if (sig)
  {
    v7 = (unsigned int *)(sig + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
LABEL_13:
    result = pthread_rwlock_unlock(v5);
    *(_QWORD *)(a2 + 8) = sig;
    return result;
  }
  pthread_rwlock_unlock(v5);
  pthread_rwlock_wrlock(v5);
  sig = v5[1].__sig;
  if (sig)
  {
    v9 = (unsigned int *)(sig + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    goto LABEL_13;
  }
  v11 = (char *)OSAtomicDequeue(&availableReaders, 0);
  if (!v11)
    v11 = (char *)malloc_type_calloc(1uLL, 0x1240uLL, 0x10A004052BF89C3uLL);
  *((_DWORD *)v11 + 2) = 2;
  *((_DWORD *)v11 + 138) = *(_DWORD *)(v4 + 240);
  v11[568] = *(_BYTE *)(v4 + 256);
  *((_QWORD *)v11 + 66) = 0;
  *(_OWORD *)(v11 + 536) = *(_OWORD *)(v4 + 224);
  v11[557] = 1;
  v12 = *(_DWORD *)(v4 + 240);
  if (v12 >= 2)
  {
    v13 = 0;
    while (1)
    {
      v14 = *(_QWORD *)(v4 + 8 * v13 + 264);
      if (v14 && *(_QWORD *)(v14 + 24) && *(_QWORD *)(v14 + 8))
      {
        v11[v13 + 12] = 0;
        do
          v15 = __ldaxr((unsigned int *)v14);
        while (__stlxr(v15 + 1, (unsigned int *)v14));
        *(_QWORD *)&v11[8 * v13 + 576] = v14;
      }
      else if (!setupReaderOwnedWindow(v13, (uint64_t)v11, v4 + 216))
      {
LABEL_45:
        _release_read_window(&availableReaders, (unsigned int *)v11);
        result = pthread_rwlock_unlock(v5);
        *(_QWORD *)(a2 + 8) = 0;
        goto LABEL_46;
      }
      ++v13;
      v16 = *(_DWORD *)(v4 + 240) - 1;
      if (v13 >= v16)
        goto LABEL_28;
    }
  }
  v16 = v12 - 1;
LABEL_28:
  v17 = v16;
  if (*(_BYTE *)(v4 + 245))
  {
    do
    {
      v18 = *(_QWORD *)(v4 + 8 * v17 + 264);
      if (v18 && *(_QWORD *)(v18 + 24) && *(_QWORD *)(v18 + 8))
      {
        v11[v17 + 12] = 0;
        do
          v19 = __ldaxr((unsigned int *)v18);
        while (__stlxr(v19 + 1, (unsigned int *)v18));
        *(_QWORD *)&v11[8 * v17 + 576] = v18;
      }
      else if (!setupReaderOwnedWindow(v17, (uint64_t)v11, v4 + 216))
      {
        goto LABEL_45;
      }
      ++v17;
    }
    while (v17 < *(int *)(v4 + 240));
  }
  else
  {
    v20 = 0;
    do
    {
      if ((unint64_t)((v17 + v20) << *(_BYTE *)(v4 + 256)) > *(_QWORD *)(v4 + 224))
        break;
      if (!setupReaderOwnedWindow(v17 + v20, (uint64_t)v11, v4 + 216))
        goto LABEL_45;
      ++v20;
    }
    while (v17 + v20 < *(int *)(v4 + 240));
    *((_DWORD *)v11 + 138) = v20;
  }
  v5[1].__sig = (uint64_t)v11;
  result = pthread_rwlock_unlock(v5);
  *(_QWORD *)(a2 + 8) = v11;
  if (!v11)
LABEL_46:
    *(_BYTE *)(a2 + 16) = 0;
  return result;
}

char *clonePayloadData(uint64_t *a1, int a2, int a3)
{
  char *v6;
  _DWORD *v7;

  v6 = (char *)malloc_type_malloc(0x1268uLL, 0x10A0040BB3328A6uLL);
  memcpy(v6, a1, 0x1268uLL);
  bzero(v6 + 40, 0x1158uLL);
  v7 = fd_dup(a1[560]);
  *((_QWORD *)v6 + 560) = v7;
  *((_DWORD *)v6 + 1126) = a2;
  if (a3)
    *((_DWORD *)v6 + 1122) = _fd_acquire_fd((uint64_t)v7, (_QWORD *)v6 + 562);
  return v6;
}

void oqsort_offset_t(uint64_t a1)
{
  qos_class_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  const char *v7;

  if (*(uint64_t *)(a1 + 24) >= 2)
  {
    v2 = qos_class_self();
    v3 = *(_QWORD *)(a1 + 8);
    v4 = *(_QWORD *)(a1 + 24);
    if (v2 < 0x12)
      _qsort_offset_t(v3, 0, v4 - 1);
    else
      parallel_qsort_offset_t(v3, v4);
  }
  if (*(_DWORD *)(a1 + 48))
  {
    v5 = __si_assert_copy_extra_268();
    v6 = v5;
    v7 = "";
    if (v5)
      v7 = v5;
    __message_assert(v5, "OQueue.c", 14, "!queue->split", v7);
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
}

void _qsort_offset_t(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  char *v22;
  char *v23;
  const char *v24;

  v6 = malloc_type_malloc(0x800uLL, 0x1000040451B5BE8uLL);
  *v6 = 0;
  v6[1] = 0;
  v7 = 1;
  do
  {
    if (a3 > a2)
    {
      if (v7 <= 128)
        v9 = 128;
      else
        v9 = v7;
      v10 = &v6[2 * v7 + 1];
      while (a3 - a2 > 32)
      {
        v11 = _partition_offset_t(a1, a2, a3);
        v12 = v11 - a2;
        if (v11 < a2)
        {
          v22 = __si_assert_copy_extra_268();
          v23 = v22;
          v24 = "";
          if (v22)
            v24 = v22;
          __message_assert(v22, "OQueue.c", 14, "q>=left", v24);
          free(v23);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v9 == v7)
        {
          heapsort_b((void *)(a1 + 8 * a2), a3 - a2 + 1, 8uLL, &__block_literal_global_25);
          v7 = v9;
          goto LABEL_3;
        }
        v13 = v12 <= a3 - v11;
        if (v12 <= a3 - v11)
          v14 = v11 - 1;
        else
          v14 = a3;
        if (v13)
          v15 = a2;
        else
          v15 = v11;
        if (v13)
          a2 = v11;
        else
          a3 = v11 - 1;
        *(v10 - 1) = v15;
        *v10 = v14;
        ++v7;
        v10 += 2;
        if (a3 <= a2)
          goto LABEL_3;
      }
      v16 = a2;
      do
      {
        v17 = v16++;
        v18 = *(_QWORD *)(a1 + 8 * v16);
        v19 = *(_QWORD *)(a1 + 8 * v17);
        for (i = v16; (v19 & 0x3FFFFFFFFFFFFFFFuLL) > (v18 & 0x3FFFFFFFFFFFFFFFuLL); v17 = i - 1)
        {
          i = v17;
          v21 = a1 + 8 * v17;
          *(_QWORD *)(v21 + 8) = v19;
          if (i <= a2)
            break;
          v19 = *(_QWORD *)(v21 - 8);
        }
        *(_QWORD *)(a1 + 8 * i) = v18;
      }
      while (v16 != a3);
    }
LABEL_3:
    --v7;
    v8 = &v6[2 * v7];
    a2 = *v8;
    a3 = v8[1];
  }
  while (v7);
  free(v6);
}

uint64_t _partition_offset_t(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = a3 - a2;
  v4 = (uint64_t *)(a1 + 8 * a2);
  v5 = a3 - a2 + 2;
  if (a3 - a2 >= -1)
    v5 = v3 + 1;
  v6 = &v4[v5 >> 1];
  v7 = (uint64_t *)(a1 + 8 * a3);
  if (v3 < 1024)
  {
    v22 = v6;
    v25 = (uint64_t *)(a1 + 8 * a3);
  }
  else
  {
    v8 = (unint64_t)(a3 - a2 + 1) >> 3;
    v9 = &v4[v8];
    v10 = *v4 & 0x3FFFFFFFFFFFFFFFLL;
    v11 = *v9 & 0x3FFFFFFFFFFFFFFFLL;
    if (v10 != v11)
    {
      v12 = &v4[2 * v8];
      v13 = *v12 & 0x3FFFFFFFFFFFFFFFLL;
      if (v10 >= v13)
        v14 = &v4[2 * v8];
      else
        v14 = (uint64_t *)(a1 + 8 * a2);
      if (v11 > v13)
        v14 = &v4[v8];
      if (v10 < v13)
        v4 += 2 * v8;
      if (v11 < v13)
        v4 = v9;
      if (v10 >= v11)
        v4 = v14;
      if (v13 == v10 || v13 == v11)
        v4 = v12;
    }
    v16 = 2 * v8;
    v17 = -(uint64_t)v8;
    v18 = 8 * v8;
    v19 = &v6[v18 / 0xFFFFFFFFFFFFFFF8];
    v20 = v6[v18 / 0xFFFFFFFFFFFFFFF8] & 0x3FFFFFFFFFFFFFFFLL;
    v21 = *v6 & 0x3FFFFFFFFFFFFFFFLL;
    if (v20 == v21)
    {
      v22 = &v6[v18 / 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v22 = &v6[(unint64_t)v18 / 8];
      v23 = *v22 & 0x3FFFFFFFFFFFFFFFLL;
      if (v23 != v20 && v23 != v21)
      {
        if (v20 >= v21)
        {
          if (v20 < v23)
            v22 = v19;
          if (v21 > v23)
            v22 = v6;
        }
        else
        {
          if (v20 >= v23)
            v22 = v19;
          if (v21 < v23)
            v22 = v6;
        }
      }
    }
    v25 = &v7[-v16];
    v26 = &v7[v17];
    v27 = *v25 & 0x3FFFFFFFFFFFFFFFLL;
    v28 = *v26 & 0x3FFFFFFFFFFFFFFFLL;
    if (v27 != v28)
    {
      v29 = *v7 & 0x3FFFFFFFFFFFFFFFLL;
      if (v27 >= v29)
        v30 = (uint64_t *)(a1 + 8 * a3);
      else
        v30 = v25;
      if (v28 > v29)
        v30 = v26;
      if (v27 < v29)
        v25 = (uint64_t *)(a1 + 8 * a3);
      if (v28 < v29)
        v25 = v26;
      if (v27 >= v28)
        v25 = v30;
      if (v29 == v28)
        v25 = (uint64_t *)(a1 + 8 * a3);
      if (v29 == v27)
        v25 = (uint64_t *)(a1 + 8 * a3);
    }
  }
  v31 = *v4 & 0x3FFFFFFFFFFFFFFFLL;
  v32 = *v22 & 0x3FFFFFFFFFFFFFFFLL;
  if (v31 == v32)
  {
    v22 = v4;
  }
  else
  {
    v33 = *v25 & 0x3FFFFFFFFFFFFFFFLL;
    if (v33 == v31 || v33 == v32)
    {
      v22 = v25;
    }
    else if (v31 >= v32)
    {
      if (v32 <= v33)
      {
        if (v31 >= v33)
          v22 = v25;
        else
          v22 = v4;
      }
    }
    else if (v32 >= v33)
    {
      if (v31 >= v33)
        v22 = v4;
      else
        v22 = v25;
    }
  }
  v35 = *v22;
  *v22 = *v7;
  *v7 = v35;
  v36 = a3 - a2;
  if (a3 > a2)
  {
    v37 = (uint64_t *)(a1 + 8 * a2);
    v40 = *v37;
    v38 = v37 + 1;
    v39 = v40;
    v41 = v35 & 0x3FFFFFFFFFFFFFFFLL;
    do
    {
      v42 = *v38;
      if ((v39 & 0x3FFFFFFFFFFFFFFFuLL) <= v41)
      {
        *(v38 - 1) = *(_QWORD *)(a1 + 8 * a2);
        *(_QWORD *)(a1 + 8 * a2++) = v39;
      }
      ++v38;
      v39 = v42;
      --v36;
    }
    while (v36);
    v35 = *v7;
  }
  v43 = *(_QWORD *)(a1 + 8 * a2);
  *(_QWORD *)(a1 + 8 * a2) = v35;
  *v7 = v43;
  return a2;
}

uint64_t index_FlushCache(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  host_t v16;
  kern_return_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  signed int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  pthread_override_s *v28;
  char v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  signed int v33;
  uint64_t v34;
  char *v35;
  char v36;
  uint64_t v37;
  double Current;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  double v43;
  void *v44;
  const void *v45;
  __int16 v46;
  int v47;
  int v48;
  NSObject *v49;
  unsigned int v50;
  unint64_t v51;
  signed int v52;
  int v53;
  NSObject *v54;
  uint64_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t v62;
  int8x16_t v63;
  unint64_t v64;
  int v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  unsigned int v71;
  int v72;
  NSObject *v73;
  os_log_type_t v74;
  integer_t v75;
  integer_t v76;
  pthread_override_s *v77;
  char v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  const char *v91;
  uint64_t v92;
  unint64_t v93;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[12];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v10 = a1 + 14856;
  v11 = index_FlushCache_physMem;
  if (index_FlushCache_physMem)
  {
    if (*(_BYTE *)(a1 + 15163))
    {
LABEL_3:
      if ((index_FlushCache__COUNT_ & 1) == 0)
      {
        index_FlushCache__COUNT_ = 1;
        v12 = *__error();
        v13 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          host_info_out[0] = 136315650;
          *(_QWORD *)&host_info_out[1] = "index_FlushCache";
          LOWORD(host_info_out[3]) = 1024;
          *(integer_t *)((char *)&host_info_out[3] + 2) = 306;
          HIWORD(host_info_out[4]) = 2080;
          *(_QWORD *)&host_info_out[5] = a1 + 15168;
          _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: trying to modify read only index %s", (uint8_t *)host_info_out, 0x1Cu);
        }
        *__error() = v12;
      }
      (*(void (**)(uint64_t))(a5 + 16))(a5);
      return 1;
    }
  }
  else
  {
    memset(host_info_out, 0, sizeof(host_info_out));
    host_info_outCnt = 12;
    v16 = MEMORY[0x1BCCB1010]();
    v17 = host_info(v16, 1, host_info_out, &host_info_outCnt);
    v18 = *(_QWORD *)&host_info_out[10];
    if (*(_QWORD *)&host_info_out[10] >= 0x80000000uLL)
      v18 = 0x80000000;
    if (v17)
      v11 = 0x40000000;
    else
      v11 = v18;
    index_FlushCache_physMem = v11;
    if (*(_BYTE *)(v10 + 307))
      goto LABEL_3;
  }
  if (!*(_QWORD *)(a1 + 14352))
  {
    (*(void (**)(uint64_t))(a5 + 16))(a5);
    return 0;
  }
  v19 = v11 >> 3;
  v20 = (v11 >> 3) - 0x800000;
  if (v11 <= 0x40000007)
    v20 = v11 >> 3;
  v92 = *MEMORY[0x1E0C85AD8];
  v93 = v20;
  HIDWORD(v22) = qos_class_self() - 9;
  LODWORD(v22) = HIDWORD(v22);
  v21 = v22 >> 2;
  if (v21 > 6)
    v23 = 0;
  else
    v23 = dword_1B8630ED0[v21];
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14680));
  if (*(_QWORD *)(a1 + 14864) || *(_DWORD *)(a1 + 14876) || *(_BYTE *)(v10 + 36))
    goto LABEL_25;
  if (v23 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v23 + 14744))
    {
LABEL_25:
      db_rwlock_wait(a1 + 14680, v23, 2);
      goto LABEL_26;
    }
    v79 = v23 - 1;
    v80 = (uint64_t *)(a1 + 16 * v23 + 14760);
    while (v79 != 4)
    {
      v81 = *v80;
      v80 += 2;
      ++v79;
      if (v81)
      {
        if (v79 <= 4)
          goto LABEL_25;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 14864) = pthread_self();
LABEL_26:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14680));
  if (*(_QWORD *)(a1 + 14360))
  {
    v89 = __si_assert_copy_extra_2151(0, *(_DWORD *)(a1 + 56));
    v90 = v89;
    v91 = "";
    if (v89)
      v91 = v89;
    __message_assert("%s:%u: failed assertion '%s' %s Expected cindex->_oldSet==0, got %p", "JHContentIndex.c", 401, "cindex->_oldSet==0", v91, *(const void **)(a1 + 14360));
    free(v90);
    if (__valid_fs(*(_DWORD *)(a1 + 56)))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v24 = *(_QWORD *)(a1 + 14352);
  *(_QWORD *)(a1 + 14360) = v24;
  TermUpdateSetRemoveFromAccounting(v24);
  v25 = *(_DWORD *)(a1 + 60);
  v26 = 32 * *(unsigned __int8 *)(a1 + 38);
  *(_BYTE *)(v10 + 1536) = 0;
  *(_QWORD *)(a1 + 14352) = TermUpdateSetCreate((uint64_t (*)())_indexProgress, a1, *(_QWORD *)(a1 + 72), v25, v26, *(_QWORD *)(a1 + 14344), *(_DWORD *)(a1 + 48), *(const void **)(a1 + 4912));
  (*(void (**)(uint64_t))(a5 + 16))(a5);
  v27 = *(_QWORD *)(a1 + 14352);
  if (v27)
  {
    if (*(_BYTE *)(v10 + 306))
      *(_QWORD *)(v27 + 608) = getPropertyStringCallback;
    *(_QWORD *)(v27 + 280) = a1 + 14144;
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14680));
  *(_DWORD *)(a1 + 14884) = 0;
  v28 = *(pthread_override_s **)(a1 + 14856);
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  v29 = *(_DWORD *)(a1 + 14876) != 0;
  *(_BYTE *)(v10 + 36) = 0;
  db_rwlock_wakeup(a1 + 14680, v29, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14680));
  if (v28)
    pthread_override_qos_class_end_np(v28);
  v30 = *(_QWORD *)(a1 + 14360);
  if ((a2 & 1) != 0)
  {
    if (!v30)
    {
      HIDWORD(v32) = qos_class_self() - 9;
      LODWORD(v32) = HIDWORD(v32);
      v31 = v32 >> 2;
      if (v31 > 6)
        v33 = 0;
      else
        v33 = dword_1B8630ED0[v31];
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 14680));
      if (*(_QWORD *)(a1 + 14864) || *(_DWORD *)(a1 + 14876) || *(_BYTE *)(v10 + 36))
        goto LABEL_89;
      if (v33 <= 5)
      {
        if (*(_QWORD *)(a1 + 16 * v33 + 14744))
        {
LABEL_89:
          db_rwlock_wait(a1 + 14680, v33, 2);
          goto LABEL_90;
        }
        v86 = v33 - 1;
        v87 = (uint64_t *)(a1 + 16 * v33 + 14760);
        while (v86 != 4)
        {
          v88 = *v87;
          v87 += 2;
          ++v86;
          if (v88)
          {
            if (v86 <= 4)
              goto LABEL_89;
            break;
          }
        }
      }
      *(_QWORD *)(a1 + 14864) = pthread_self();
LABEL_90:
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14680));
      if (!v25)
        goto LABEL_66;
LABEL_65:
      *(_QWORD *)(a1 + 4936) = *(_QWORD *)(a1 + 4928);
      *(_QWORD *)(a1 + 9648) = *(_QWORD *)(a1 + 9640);
      *(_DWORD *)(a1 + 52) = v25 - 1;
      goto LABEL_66;
    }
  }
  else
  {
    *(_QWORD *)(v30 + 592) = _termUpdateSetProgress;
    *(_QWORD *)(v30 + 600) = 0;
  }
  v34 = *(_QWORD *)(a1 + 16304);
  **(_QWORD **)(a1 + 96) = v34;
  **(_QWORD **)(a1 + 104) = v34;
  v35 = storageResolvePtr(a1 + 248, 0, 8uLL, 1);
  if (v35)
  {
    *(_QWORD *)v35 = *(_QWORD *)(a1 + 16304);
    host_info_outCnt = 0;
    *(_QWORD *)host_info_out = 0;
    v36 = atomic_load((unsigned int *)(a1 + 28));
    if ((v36 & 0xC) == 8)
      indexCopyDeleteDocIds(a1, a2 ^ 1, host_info_out);
    v37 = *(_QWORD *)(a1 + 4904);
    Current = CFAbsoluteTimeGetCurrent();
    v39 = *(_QWORD *)host_info_out;
    v40 = *(_QWORD *)(a1 + 4896);
    v41 = *(_QWORD **)(a1 + 14360);
    v42 = atomic_load((unsigned int *)(a1 + 28));
    v14 = bt_mergeSet(a1 + 88, v39, a1 + 4920, a1 + 9632, v37, v40, v41, &host_info_outCnt, (v42 & 8) != 0, a3, a4);
    v43 = CFAbsoluteTimeGetCurrent();
    v44 = *(void **)host_info_out;
    v19 = v11 >> 3;
    if (*(_QWORD *)host_info_out)
    {
      v45 = *(const void **)(*(_QWORD *)host_info_out + 16);
      if (v45)
        CFRelease(v45);
      free(v44);
    }
    if (host_info_outCnt
      && *(_QWORD *)(a1 + 120) + 1028 * (unint64_t)*(unsigned int *)(a1 + 232) + *(_QWORD *)(a1 + 480) > v11 / (4 * v92 / 5uLL)
      && ((v46 = atomic_load((unsigned int *)(a1 + 28)), (v46 & 0x800) != 0) ? (v47 = 4) : (v47 = 10),
          v43 - Current > (double)v47)
      || *(_QWORD *)(a1 + 120) + 1028 * (unint64_t)*(unsigned int *)(a1 + 232) + *(_QWORD *)(a1 + 480) >= 0x8000001)
    {
      *(_BYTE *)(v10 + 304) |= 2u;
    }
  }
  else
  {
    v48 = *__error();
    v49 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      v85 = *__error();
      host_info_out[0] = 136315650;
      *(_QWORD *)&host_info_out[1] = "index_FlushCache";
      LOWORD(host_info_out[3]) = 1024;
      *(integer_t *)((char *)&host_info_out[3] + 2) = 475;
      HIWORD(host_info_out[4]) = 1024;
      host_info_out[5] = v85;
      _os_log_error_impl(&dword_1B8270000, v49, OS_LOG_TYPE_ERROR, "%s:%d: error %d updating sync count", (uint8_t *)host_info_out, 0x18u);
    }
    *__error() = v48;
    v14 = *__error();
  }
  HIDWORD(v51) = qos_class_self() - 9;
  LODWORD(v51) = HIDWORD(v51);
  v50 = v51 >> 2;
  if (v50 > 6)
    v52 = 0;
  else
    v52 = dword_1B8630ED0[v50];
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14680));
  if (*(_QWORD *)(a1 + 14864) || *(_DWORD *)(a1 + 14876) || *(_BYTE *)(v10 + 36))
    goto LABEL_62;
  if (v52 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v52 + 14744))
    {
LABEL_62:
      db_rwlock_wait(a1 + 14680, v52, 2);
      goto LABEL_63;
    }
    v82 = v52 - 1;
    v83 = (uint64_t *)(a1 + 16 * v52 + 14760);
    while (v82 != 4)
    {
      v84 = *v83;
      v83 += 2;
      ++v82;
      if (v84)
      {
        if (v82 <= 4)
          goto LABEL_62;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 14864) = pthread_self();
LABEL_63:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14680));
  if ((_DWORD)v14)
    goto LABEL_71;
  if (v25)
    goto LABEL_65;
LABEL_66:
  v14 = indexFastFlush(a1, 0);
  if ((_DWORD)v14)
  {
    *(_BYTE *)(a1 + 8) = 0;
    v53 = *__error();
    v54 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      host_info_out[0] = 136315906;
      *(_QWORD *)&host_info_out[1] = "index_FlushCache";
      LOWORD(host_info_out[3]) = 1024;
      *(integer_t *)((char *)&host_info_out[3] + 2) = 560;
      HIWORD(host_info_out[4]) = 2080;
      *(_QWORD *)&host_info_out[5] = a1 + 15168;
      LOWORD(host_info_out[7]) = 1024;
      *(integer_t *)((char *)&host_info_out[7] + 2) = 560;
      _os_log_error_impl(&dword_1B8270000, v54, OS_LOG_TYPE_ERROR, "%s:%d: %s marking invalid at %d", (uint8_t *)host_info_out, 0x22u);
    }
    *__error() = v53;
  }
  else
  {
    *(CFAbsoluteTime *)(a1 + 15000) = CFAbsoluteTimeGetCurrent();
    v55 = *(_QWORD *)(a1 + 14360);
    v56 = *(int8x16_t *)(v55 + 120);
    v57 = *(int8x16_t *)(v55 + 136);
    v58 = *(int8x16_t *)(v55 + 152);
    v59 = *(int8x16_t *)(v55 + 168);
    v60 = *(int8x16_t *)(v55 + 184);
    v61 = *(int8x16_t *)(v55 + 200);
    v62 = *(_QWORD *)(a1 + 14992) + *(unsigned int *)(v55 + 216);
    v63.i64[0] = 0xFFFFFFFFLL;
    v63.i64[1] = 0xFFFFFFFFLL;
    *(int64x2_t *)(a1 + 14944) = vaddq_s64(*(int64x2_t *)(a1 + 14944), (int64x2_t)vandq_s8(v59, v63));
    *(int64x2_t *)(a1 + 14896) = vaddq_s64(*(int64x2_t *)(a1 + 14896), (int64x2_t)vandq_s8(v56, v63));
    *(int64x2_t *)(a1 + 14928) = vaddq_s64(*(int64x2_t *)(a1 + 14928), (int64x2_t)vandq_s8(v58, v63));
    *(int64x2_t *)(a1 + 14912) = vaddq_s64(*(int64x2_t *)(a1 + 14912), (int64x2_t)vandq_s8(v57, v63));
    *(int64x2_t *)(a1 + 14960) = vaddq_s64(*(int64x2_t *)(a1 + 14960), (int64x2_t)vandq_s8(v60, v63));
    *(int64x2_t *)(a1 + 14976) = vaddq_s64(*(int64x2_t *)(a1 + 14976), (int64x2_t)vandq_s8(v61, v63));
    *(_QWORD *)(a1 + 14992) = v62;
  }
LABEL_71:
  TermUpdateSetRelease(*(_QWORD *)(a1 + 14360));
  *(_QWORD *)(a1 + 14360) = 0;
  v64 = *(_QWORD *)(a1 + 9656);
  if (v64 >= v19 || *(_QWORD *)(a1 + 9632) + v64 - *(_QWORD *)(a1 + 9640) >= v93)
  {
    v65 = *__error();
    v66 = _SILogForLogForCategory(10);
    v67 = 2 * (dword_1EF19FCB4 < 4);
    if (os_log_type_enabled(v66, v67))
    {
      v68 = *(_QWORD *)(a1 + 9656);
      v69 = *(_QWORD *)(a1 + 9632) + v68 - *(_QWORD *)(a1 + 9640);
      host_info_out[0] = 134218752;
      *(_QWORD *)&host_info_out[1] = v68;
      LOWORD(host_info_out[3]) = 2048;
      *(_QWORD *)((char *)&host_info_out[3] + 2) = v19;
      HIWORD(host_info_out[5]) = 2048;
      *(_QWORD *)&host_info_out[6] = v69;
      LOWORD(host_info_out[8]) = 2048;
      *(_QWORD *)((char *)&host_info_out[8] + 2) = v93;
      _os_log_impl(&dword_1B8270000, v66, v67, "Force split for large index %lld (%lld) %lld (%lld)", (uint8_t *)host_info_out, 0x2Au);
    }
    *__error() = v65;
    v70 = *(_BYTE *)(v10 + 304) | 2;
    *(_BYTE *)(v10 + 304) = v70;
    if ((v70 & 6) != 0)
      goto LABEL_83;
    goto LABEL_78;
  }
  if ((*(_BYTE *)(v10 + 304) & 6) == 0)
  {
LABEL_78:
    if (*(_DWORD *)(a1 + 60) >= 0x2711u)
    {
      v71 = atomic_load((unsigned int *)(a1 + 12));
      if (*(_DWORD *)(a1 + 60) < 4 * v71)
      {
        v72 = *__error();
        v73 = _SILogForLogForCategory(10);
        v74 = 2 * (dword_1EF19FCB4 < 4);
        if (os_log_type_enabled(v73, v74))
        {
          v75 = *(_DWORD *)(a1 + 60);
          v76 = atomic_load((unsigned int *)(a1 + 12));
          host_info_out[0] = 67109376;
          host_info_out[1] = v75;
          LOWORD(host_info_out[2]) = 1024;
          *(integer_t *)((char *)&host_info_out[2] + 2) = v76;
          _os_log_impl(&dword_1B8270000, v73, v74, "Force split for high delete count; %d %d",
            (uint8_t *)host_info_out,
            0xEu);
        }
        *__error() = v72;
        *(_BYTE *)(v10 + 304) |= 2u;
      }
    }
  }
LABEL_83:
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14680));
  *(_DWORD *)(a1 + 14884) = 0;
  v77 = *(pthread_override_s **)(a1 + 14856);
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  v78 = *(_DWORD *)(a1 + 14876) != 0;
  *(_BYTE *)(v10 + 36) = 0;
  db_rwlock_wakeup(a1 + 14680, v78, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14680));
  if (v77)
    pthread_override_qos_class_end_np(v77);
  return v14;
}

uint64_t bt_mergeCallback(unsigned int a1, void *__s2, int **a3)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v13;
  char v14;
  char v16;
  int v17;
  _QWORD v18[2];

  v3 = a3 + 1;
  v4 = (unsigned int *)*a3;
  v5 = **a3;
  v6 = v5 >> 3;
  v7 = (unint64_t)(v5 & 7) << 32;
  if ((v5 & 3) == 1)
  {
    v7 = 0x100000000;
    v6 = v5 >> 2;
  }
  if ((v5 & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  if ((v5 & 1) != 0)
    v9 = v6;
  else
    v9 = v5 >> 1;
  if (*((_DWORD *)a3 + 3))
    return 0;
  v18[0] = 0;
  v18[1] = 0;
  ++currentCount;
  v13 = *((_DWORD *)a3 + 11);
  if (v13 && a1 > v13 && !memcmp(a3 + 6, __s2, *((unsigned int *)a3 + 11)))
  {
    if ((mergeEntryFlat((uint64_t)v4) & 1) == 0)
      return LODWORD(v18[0]);
    if (*((_DWORD *)a3 + 3))
      return 0;
    if (*((_DWORD *)a3 + 11))
    {
      v14 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    a3[4] = 0;
    a3[5] = 0;
  }
  *(_OWORD *)((char *)a3 + 1092) = 0u;
  v14 = 1;
LABEL_15:
  bt_mergeEntry((uint64_t)v4, v3, v8 | v9, v18, (unsigned __int8 *)__s2, a1);
  if (*((_DWORD *)a3 + 3))
    return 0;
  v16 = v14 ^ 1;
  if (*((_DWORD *)a3 + 10))
    v16 = 1;
  if ((v16 & 1) == 0 && *((_DWORD *)a3 + 8))
  {
    v17 = *((_DWORD *)a3 + 11);
    if (v17)
    {
      *((_DWORD *)a3 + 11) = a1 - v17;
      __strncpy_chk();
      *((_BYTE *)a3 + *((unsigned int *)a3 + 11) + 48) = 0;
    }
  }
  return LODWORD(v18[0]);
}

uint64_t db_upgrade_lock(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  unsigned int v5;
  pthread_cond_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  HIDWORD(v4) = qos_class_self() - 9;
  LODWORD(v4) = HIDWORD(v4);
  v3 = v4 >> 2;
  if (v3 > 6)
    v5 = 0;
  else
    v5 = dword_1B8630ED0[v3];
  if (*(_DWORD *)(a1 + 196))
  {
LABEL_5:
    v6 = db_rwlock_alloc_waiter(a1);
    LODWORD(v6[1].__sig) = 1;
    *(_QWORD *)v6[1].__opaque = pthread_self();
    *(_QWORD *)(a1 + 160) = v6;
    *(_DWORD *)(a1 + 192) = v5;
    while (!BYTE4(v6[1].__sig))
      pthread_cond_wait(v6, (pthread_mutex_t *)a1);
    *(_QWORD *)&v6[1].__opaque[8] = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v6;
  }
  else
  {
    v7 = (uint64_t *)(a1 + 16 * v5 + 80);
    v8 = v5 - 6;
    while (!__CFADD__(v8++, 1))
    {
      v11 = *v7;
      v7 += 2;
      v10 = v11;
      if (v11)
      {
        if (*(_DWORD *)(v10 + 48) >= 4u)
          goto LABEL_5;
        break;
      }
    }
    *(_BYTE *)(a1 + 212) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v2;
}

unint64_t bt_getOffset(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int8x8_t *v24;
  unint64_t v25;
  uint8x8_t v26;
  uint8x8_t v27;
  uint8x8_t v28;
  uint8x8_t v29;
  unsigned int v30;
  char *v32;
  char *v33;
  const char *v34;
  char *v35;
  char *v36;
  const char *v37;

  v5 = *(_DWORD *)a1 >> 3;
  v6 = *(_DWORD *)a1 & 7;
  if ((*(_DWORD *)a1 & 3) == 1)
  {
    v6 = 1;
    v5 = *(_DWORD *)a1 >> 2;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
    v7 = v6;
  else
    v7 = 0;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = v5;
  else
    v8 = *(_DWORD *)a1 >> 1;
  if (v8)
    v9 = a2 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v12 = 0;
    v13 = a2 - 1;
    while ((_DWORD)v7 != 1)
    {
      if ((_DWORD)v7 != 3)
      {
        if ((_DWORD)v7)
        {
          v35 = __si_assert_copy_extra_1644(0);
          v36 = v35;
          if (v35)
            v37 = v35;
          else
            v37 = "";
          __message_assert("%s:%u: Unexpected code path %s ", "BurstTrie.c", 1152, v37);
          free(v36);
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        goto LABEL_45;
      }
      if (v8 > *(_DWORD *)(a1 + 144))
      {
        v32 = __si_assert_copy_extra_1644(*(_DWORD **)(a1 + 4568));
        v33 = v32;
        v34 = "";
        if (v32)
          v34 = v32;
        __message_assert("%s:%u: failed assertion '%s' %s s: %d, c: %d", "BurstTrie.c", 1115, "ptr.next<=getNum(t->baseFatCount)", v34, v8, *(_DWORD *)(a1 + 144));
        free(v33);
        if (__valid_fsp(*(_DWORD **)(a1 + 4568)))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v16 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 1028 * v8 + 4 * *(unsigned __int8 *)(a3 + v12) + 4);
      v17 = v16 >> 1;
      v18 = v16 >> 3;
      v19 = v16 & 7;
      if ((v16 & 3) == 1)
      {
        v19 = 1;
        v18 = v16 >> 2;
      }
      v20 = (v16 & 1) == 0;
      if ((v16 & 1) != 0)
        v7 = v19;
      else
        v7 = 0;
      if (v20)
        v8 = v17;
      else
        v8 = v18;
LABEL_18:
      v14 = v12++;
      if (v8)
        v15 = v13 == v14;
      else
        v15 = 1;
      if (v15)
        goto LABEL_15;
    }
    v21 = mgetBase(a1, v8);
    v22 = *(unsigned __int8 *)(a3 + v12);
    if (((*(_DWORD *)(v21 + ((v22 >> 3) & 0x1C) + 4) >> v22) & 1) == 0)
    {
      v8 = 0;
      v7 = 1;
      return v8 | (unint64_t)(v7 << 32);
    }
    v23 = 0;
    v24 = (int8x8_t *)(v21 + 4);
    v25 = v22 >> 6;
    if ((v22 >> 6) != 1)
    {
      if ((_DWORD)v25 != 2)
      {
        if ((_DWORD)v25 != 3)
          goto LABEL_40;
        v26 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v21 + 20));
        v26.i16[0] = vaddlv_u8(v26);
        v23 = v26.u32[0];
      }
      v27 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v21 + 12));
      v27.i16[0] = vaddlv_u8(v27);
      v23 += v27.u32[0];
    }
    v28 = (uint8x8_t)vcnt_s8(*v24);
    v28.i16[0] = vaddlv_u8(v28);
    v23 += v28.u32[0];
LABEL_40:
    v29 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v24[v25] & ~(-1 << v22)));
    v29.i16[0] = vaddlv_u8(v29);
    v30 = *(_DWORD *)(v21 + 4 * (v29.u32[0] + v23) + 38);
    if ((v30 & 1) != 0)
    {
      if ((v30 & 3) == 1)
      {
        v8 = v30 >> 2;
        v7 = 1;
      }
      else
      {
        v8 = v30 >> 3;
        v7 = v30 & 7;
      }
    }
    else
    {
      v7 = 0;
      v8 = v30 >> 1;
    }
    goto LABEL_18;
  }
  LODWORD(v12) = 0;
LABEL_15:
  if ((_DWORD)v7)
  {
    v8 = 0;
  }
  else
  {
LABEL_45:
    v7 = 0;
    *a4 = v12;
  }
  return v8 | (unint64_t)(v7 << 32);
}

uint64_t si_get_object_for_identifier_createParentDBO(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, int a5, unint64_t *a6, _QWORD *a7, unsigned __int8 a8)
{
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  unsigned __int8 v19;
  int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void (*v29)(_QWORD);
  int v30;
  NSObject *v31;
  uint64_t ParentDBO;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD);
  char *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int v44[3];
  char v45;
  int v46[3];
  char v47;
  int v48[3];
  char v49;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  int v53;
  _OWORD v54[8];
  char v55[136];
  char v56[1024];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  bzero(v56, 0x400uLL);
  v49 = 0;
  *(_QWORD *)v48 = 0;
  if (a3)
    v14 = fasterUTF8String(a3, v48, v56, 1024, &v49);
  else
    v14 = "";
  v15 = 0uLL;
  v39 = v14;
  memset(v55, 0, 128);
  v47 = 0;
  *(_QWORD *)v46 = 0;
  if (a2)
  {
    v16 = fasterUTF8String(a2, v46, v55, 128, &v47);
    v15 = 0uLL;
    v17 = v16;
  }
  else
  {
    v17 = "";
  }
  v54[6] = v15;
  v54[7] = v15;
  v54[4] = v15;
  v54[5] = v15;
  v54[2] = v15;
  v54[3] = v15;
  v54[1] = v15;
  v54[0] = v15;
  *(_QWORD *)v44 = 0;
  if (a4)
    v18 = fasterUTF8String(a4, v44, (char *)v54, 128, &v45);
  else
    v18 = 0;
  v19 = a8;
  v20 = a5;
  do
  {
    v21 = __ldxr(exceptionSequenceNum);
    v22 = v21 + 1;
  }
  while (__stxr(v21 + 1, exceptionSequenceNum));
  v23 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, *(_QWORD *)(a1 + 1184), 0x40000000, v22);
  v42 = HIDWORD(v23);
  v43 = v23;
  v40 = v25;
  v41 = v24;
  v26 = *(_QWORD *)&threadData[18 * v23 + 2];
  v27 = v26 + 320 * HIDWORD(v23);
  *(_BYTE *)(v27 + 216) = 0;
  v28 = *(_DWORD *)(v27 + 312);
  v29 = *(void (**)(_QWORD))(v27 + 224);
  if (v29)
    v29(*(_QWORD *)(v26 + 320 * HIDWORD(v23) + 288));
  if (_setjmp((int *)v27))
  {
    v30 = *__error();
    v31 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v51 = "si_get_object_for_identifier_createParentDBO";
      v52 = 1024;
      v53 = 24144;
      _os_log_error_impl(&dword_1B8270000, v31, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v30;
    *(_DWORD *)(v27 + 312) = v28;
    CIOnThreadCleanUpReset(v40);
    dropThreadId(v43, 1, v22);
    CICleanUpReset(v43, v41);
    ParentDBO = 0xFFFFFFFFLL;
  }
  else
  {
    ParentDBO = _si_get_object_for_identifier_createParentDBO(a1, v48[0], v39, v46[0], (uint64_t)v17, v44[0], v18, a7, a6, v20, v19);
    v33 = *(_QWORD *)&threadData[18 * v43 + 2];
    v34 = v33 + 320 * v42;
    *(_DWORD *)(v34 + 312) = v28;
    v35 = *(void (**)(_QWORD))(v34 + 232);
    if (v35)
      v35(*(_QWORD *)(v33 + 320 * v42 + 288));
    dropThreadId(v43, 0, v22);
  }
  if (v49)
    free(v39);
  if (v47)
    free(v17);
  return ParentDBO;
}

BOOL SIQueryAddResultFilter(uint64_t a1, const void *a2)
{
  _QWORD *v4;
  _BOOL8 v5;
  _QWORD *tree_apply_block_with_meta;
  __CFArray *Mutable;
  CFIndex Count;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  int v15;
  NSObject *v16;
  uint64_t v17;
  _BYTE buf[32];
  void *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = queryFromCFString((uint64_t)a2);
  if (dword_1EF19FC90 >= 5)
  {
    v15 = *__error();
    v16 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v17;
      _os_log_impl(&dword_1B8270000, v16, OS_LOG_TYPE_DEFAULT, "Adding filter %@ to query %@", buf, 0x16u);
    }
    *__error() = v15;
  }
  v5 = v4 != 0;
  if (v4)
  {
    if (*(_BYTE *)(a1 + 672))
    {
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E6E377F8;
      v19 = &__block_literal_global_17_10736;
      tree_apply_block_with_meta = (_QWORD *)db_query_tree_apply_block_with_meta(v4, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
      *(_QWORD *)buf = tree_apply_block_with_meta;
      if (tree_apply_block_with_meta)
      {
        decorateExpandingFunctions(tree_apply_block_with_meta, *(_QWORD *)a1, *(const void **)(a1 + 656), *(double *)(a1 + 360));
        db_optimize_query_tree((_QWORD **)buf);
        Mutable = *(__CFArray **)(a1 + 720);
        if (!Mutable)
        {
          Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
          *(_QWORD *)(a1 + 720) = Mutable;
        }
        CFArrayAppendValue(Mutable, a2);
        Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 720));
        v9 = malloc_type_realloc(*(void **)(a1 + 728), 8 * Count, 0x80040B8603338uLL);
        *(_QWORD *)(a1 + 728) = v9;
        v9[Count - 1] = *(_QWORD *)buf;
      }
    }
    v10 = *(_QWORD *)(a1 + 80);
    if (v10)
      v4 = (_QWORD *)makeAndNode(v10, (uint64_t)v4, 1, 1);
    *(_QWORD *)(a1 + 80) = v4;
  }
  else
  {
    v11 = *__error();
    v12 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "SIQueryAddResultFilter";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 974;
      *(_WORD *)&buf[18] = 2112;
      *(_QWORD *)&buf[20] = a2;
      _os_log_error_impl(&dword_1B8270000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Failed adding filter: %@", buf, 0x1Cu);
    }
    *__error() = v11;
  }
  return v5;
}

const __CFString *queryFromCFString(uint64_t a1)
{
  const __CFString *result;
  const __CFDictionary *v2;
  _BYTE *v3;
  char v4;
  int v5;
  double v6;
  int v7;
  char v8;
  double v9;
  _BYTE *v10;
  const __CFDictionary *v11;
  const __CFString *v12;
  CFTypeID TypeID;
  char *v14;
  char *v15;
  int v16;
  _BOOL4 tree;
  BOOL v19;
  CFStringRef v20;
  CFStringRef v21;
  int v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  NSObject *v26;
  int *v27;
  char v28;
  uint64_t v29;
  _QWORD *query_node_with_ann;
  char *cStr;
  char v32[4096];
  int buf;
  CFStringRef v34;
  uint64_t v35;

  result = (const __CFString *)MEMORY[0x1E0C80A78](a1);
  v35 = *MEMORY[0x1E0C80C00];
  v28 = 0;
  if (!result)
    return result;
  v7 = v5;
  v8 = v4;
  v9 = v6;
  v10 = v3;
  v11 = v2;
  v12 = result;
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v12))
    return 0;
  bzero(v32, 0x1000uLL);
  v14 = fasterUTF8String(v12, &v29, v32, 4096, &v28);
  if (v14)
  {
    v15 = v14;
    v16 = *v14;
    if ((v16 - 35) > 0x1D || ((1 << (v16 - 35)) & 0x20000003) == 0)
    {
      *v10 = 0;
    }
    else
    {
      *v10 = v16;
      ++v14;
    }
    query_node_with_ann = db_make_query_node_with_ann(v14, v11);
    if (query_node_with_ann && v7)
    {
      tree = db_sanitize_query_tree((uint64_t *)&query_node_with_ann, 1, v8, v9);
      v19 = tree;
      if (tree && dword_1EF19FC90 >= 4)
      {
        cStr = (char *)malloc_type_malloc(0x400uLL, 0xD9751782uLL);
        if (_db_render_query_tree((uint64_t)&query_node_with_ann))
        {
          v20 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
          if (v20)
          {
            v21 = v20;
            v22 = *__error();
            v23 = _SILogForLogForCategory(1);
            v24 = 2 * (dword_1EF19FC90 < 4);
            if (os_log_type_enabled(v23, v24))
            {
              buf = 138412290;
              v34 = v21;
              _os_log_impl(&dword_1B8270000, v23, v24, "Sanitized to %@", (uint8_t *)&buf, 0xCu);
            }
            *__error() = v22;
            CFRelease(v21);
          }
        }
        free(cStr);
      }
      if (!v19)
      {
        db_free_query_node(query_node_with_ann);
        query_node_with_ann = 0;
      }
    }
    if (v28)
      free(v15);
    return (const __CFString *)query_node_with_ann;
  }
  if (dword_1EF19FC90 < 5)
    return 0;
  v25 = *__error();
  v26 = _SILogForLogForCategory(1);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_1B8270000, v26, OS_LOG_TYPE_DEFAULT, "Couldn't make query string", (uint8_t *)&buf, 2u);
  }
  v27 = __error();
  result = 0;
  *v27 = v25;
  return result;
}

char *fasterUTF8String(const __CFString *a1, _QWORD *a2, char *a3, CFIndex a4, _BYTE *a5)
{
  const char *CStringPtr;
  const char *v11;
  CFIndex Length;
  CFIndex v13;

  CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  if (CStringPtr)
  {
    v11 = CStringPtr;
    *a5 = 0;
    *a2 = CFStringGetLength(a1) + 1;
    return (char *)v11;
  }
  else if (CFStringGetCString(a1, a3, a4, 0x8000100u))
  {
    *a2 = strlen(a3) + 1;
    *a5 = 0;
  }
  else
  {
    Length = CFStringGetLength(a1);
    v13 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    a3 = (char *)malloc_type_malloc(v13, 0x9057F75EuLL);
    CFStringGetCString(a1, a3, v13, 0x8000100u);
    *a2 = strlen(a3) + 1;
    *a5 = 1;
  }
  return a3;
}

_QWORD *or_expr(unsigned __int8 **a1, int a2, _DWORD *a3)
{
  unsigned __int8 *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *result;
  _QWORD *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v17;
  unsigned __int8 *i;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint8_t buf[8];
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  void *v39;
  void *v40;

  v6 = *a1;
  if (*a1)
  {
    while (1)
    {
      v7 = *v6;
      v8 = v7 > 0x20;
      v9 = (1 << v7) & 0x100001600;
      if (v8 || v9 == 0)
        break;
      ++v6;
    }
  }
  *a1 = v6;
  result = and_expr(a1, a2, a3);
  if (!result)
    return result;
  v12 = result;
  v13 = *a1;
  if (*a1)
  {
    while (1)
    {
      v14 = *v13;
      v8 = v14 > 0x20;
      v15 = (1 << v14) & 0x100001600;
      if (v8 || v15 == 0)
        break;
      ++v13;
    }
  }
  *a1 = v13;
  if (*v13 != 124)
  {
    v35 = 0;
LABEL_42:
    if (v35)
      return v35;
    else
      return v12;
  }
  v35 = 0;
  v17 = 0;
  while (1)
  {
    *a1 = v13 + 1;
    if (v13[1] != 124)
      goto LABEL_47;
    for (i = v13 + 2; ; ++i)
    {
      v19 = *i;
      v8 = v19 > 0x20;
      v20 = (1 << v19) & 0x100001600;
      if (v8 || v20 == 0)
        break;
    }
    *a1 = i;
    v22 = and_expr(a1, a2, a3);
    v23 = v22;
    v24 = *a1;
    if (*a1)
    {
      while (1)
      {
        v25 = *v24;
        v8 = v25 > 0x20;
        v26 = (1 << v25) & 0x100001600;
        if (v8 || v26 == 0)
          break;
        ++v24;
      }
    }
    *a1 = v24;
    if (!v22)
    {
      v32 = v35;
      if (v35)
      {
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v37 = 0x40000000;
        v38 = __db_query_tree_apply_block_block_invoke;
        v39 = &unk_1E6E377F8;
        v40 = &__block_literal_global_143;
        goto LABEL_55;
      }
LABEL_47:
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v37 = 0x40000000;
      v38 = __db_query_tree_apply_block_block_invoke;
      v39 = &unk_1E6E377F8;
      v40 = &__block_literal_global_143;
      v32 = v12;
      goto LABEL_55;
    }
    v28 = (*a3)++;
    if (v28 > 2048)
      return 0;
    if (!v17)
      break;
    if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
      ++sTotal_10673;
    v29 = v17[1];
    v30 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
    if (!v30)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      v17[1] = 0;
      v33 = MEMORY[0x1E0C809B0];
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v37 = 0x40000000;
      v38 = __db_query_tree_apply_block_block_invoke;
      v39 = &unk_1E6E377F8;
      v40 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(v35, (uint64_t)buf, 0);
      *(_QWORD *)buf = v33;
      v37 = 0x40000000;
      v38 = __db_query_tree_apply_block_block_invoke;
      v39 = &unk_1E6E377F8;
      v40 = &__block_literal_global_143;
      goto LABEL_54;
    }
    v17[1] = v30;
    *v30 = v29;
    v17 = v30;
LABEL_16:
    *((_WORD *)v17 + 20) = 1;
    v17[1] = v23;
    v13 = *a1;
    if (**a1 != 124)
      goto LABEL_42;
  }
  if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
    ++sTotal_10673;
  v31 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
  if (v31)
  {
    v17 = v31;
    *v31 = v12;
    v35 = v31;
    goto LABEL_16;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
  }
  v34 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v37 = 0x40000000;
  v38 = __db_query_tree_apply_block_block_invoke;
  v39 = &unk_1E6E377F8;
  v40 = &__block_literal_global_143;
  db_query_tree_apply_block_with_meta(v12, (uint64_t)buf, 0);
  *(_QWORD *)buf = v34;
  v37 = 0x40000000;
  v38 = __db_query_tree_apply_block_block_invoke;
  v39 = &unk_1E6E377F8;
  v40 = &__block_literal_global_143;
LABEL_54:
  v32 = v23;
LABEL_55:
  db_query_tree_apply_block_with_meta(v32, (uint64_t)buf, 0);
  return 0;
}

_QWORD *and_expr(unsigned __int8 **a1, int a2, _DWORD *a3)
{
  _QWORD *result;
  _QWORD *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v13;
  unsigned __int8 *i;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  unsigned int v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint8_t buf[8];
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  void *v36;

  result = factor(a1, a2, a3);
  if (!result)
    return result;
  v7 = result;
  v8 = *a1;
  if (*a1)
  {
    while (1)
    {
      v9 = *v8;
      v10 = v9 > 0x20;
      v11 = (1 << v9) & 0x100001600;
      if (v10 || v11 == 0)
        break;
      ++v8;
    }
  }
  *a1 = v8;
  if (*v8 != 38)
  {
    v31 = 0;
LABEL_36:
    if (v31)
      return v31;
    else
      return v7;
  }
  v31 = 0;
  v13 = 0;
  while (1)
  {
    *a1 = v8 + 1;
    if (v8[1] != 38)
      goto LABEL_41;
    for (i = v8 + 2; ; ++i)
    {
      v15 = *i;
      v10 = v15 > 0x20;
      v16 = (1 << v15) & 0x100001600;
      if (v10 || v16 == 0)
        break;
    }
    *a1 = i;
    v18 = factor(a1, a2, a3);
    v19 = v18;
    v20 = *a1;
    if (*a1)
    {
      while (1)
      {
        v21 = *v20;
        v10 = v21 > 0x20;
        v22 = (1 << v21) & 0x100001600;
        if (v10 || v22 == 0)
          break;
        ++v20;
      }
    }
    *a1 = v20;
    if (!v18)
    {
      v28 = v31;
      if (v31)
      {
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        v33 = 0x40000000;
        v34 = __db_query_tree_apply_block_block_invoke;
        v35 = &unk_1E6E377F8;
        v36 = &__block_literal_global_143;
        goto LABEL_49;
      }
LABEL_41:
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v33 = 0x40000000;
      v34 = __db_query_tree_apply_block_block_invoke;
      v35 = &unk_1E6E377F8;
      v36 = &__block_literal_global_143;
      v28 = v7;
      goto LABEL_49;
    }
    v24 = (*a3)++;
    if (v24 > 2048)
      return 0;
    if (!v13)
      break;
    if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
      ++sTotal_10673;
    v25 = v13[1];
    v26 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
    if (!v26)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      v13[1] = 0;
      v29 = MEMORY[0x1E0C809B0];
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      v33 = 0x40000000;
      v34 = __db_query_tree_apply_block_block_invoke;
      v35 = &unk_1E6E377F8;
      v36 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(v31, (uint64_t)buf, 0);
      *(_QWORD *)buf = v29;
      v33 = 0x40000000;
      v34 = __db_query_tree_apply_block_block_invoke;
      v35 = &unk_1E6E377F8;
      v36 = &__block_literal_global_143;
      goto LABEL_48;
    }
    v13[1] = v26;
    *v26 = v25;
    v13 = v26;
LABEL_10:
    *((_WORD *)v13 + 20) = 2;
    v13[1] = v19;
    v8 = *a1;
    if (**a1 != 38)
      goto LABEL_36;
  }
  if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
    ++sTotal_10673;
  v27 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
  if (v27)
  {
    v13 = v27;
    *v27 = v7;
    v31 = v27;
    goto LABEL_10;
  }
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
  }
  v30 = MEMORY[0x1E0C809B0];
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  v33 = 0x40000000;
  v34 = __db_query_tree_apply_block_block_invoke;
  v35 = &unk_1E6E377F8;
  v36 = &__block_literal_global_143;
  db_query_tree_apply_block_with_meta(v7, (uint64_t)buf, 0);
  *(_QWORD *)buf = v30;
  v33 = 0x40000000;
  v34 = __db_query_tree_apply_block_block_invoke;
  v35 = &unk_1E6E377F8;
  v36 = &__block_literal_global_143;
LABEL_48:
  v28 = v19;
LABEL_49:
  db_query_tree_apply_block_with_meta(v28, (uint64_t)buf, 0);
  return 0;
}

_QWORD *factor(unsigned __int8 **a1, int a2, _DWORD *a3)
{
  unsigned __int8 *v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t query_piece;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *i;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v21;
  int v22;
  _WORD *v23;
  uint64_t v24;
  BOOL v25;
  __int16 v26;
  __int16 v27;
  _QWORD *v28;
  uint64_t v29;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  void *v36;

  v5 = *a1;
  v6 = *v5;
  if (v6 == 33)
  {
    ++v5;
    while (1)
    {
      v7 = *v5;
      v8 = v7 > 0x20;
      v9 = (1 << v7) & 0x100001600;
      if (v8 || v9 == 0)
        break;
      ++v5;
    }
    *a1 = v5;
    if (*v5 == 40)
      goto LABEL_17;
LABEL_9:
    query_piece = get_query_piece((uint64_t)v5);
    if (!query_piece)
      return 0;
    v12 = query_piece;
    v13 = *a1;
    if (*a1)
    {
      while (1)
      {
        v14 = *v13;
        v8 = v14 > 0x20;
        v15 = (1 << v14) & 0x100001600;
        if (v8 || v15 == 0)
          break;
        ++v13;
      }
    }
    *a1 = v13;
    v22 = (*a3)++;
    if (v22 < 2049)
    {
      if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
        ++sTotal_10673;
      v23 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
      if (v23)
      {
        v21 = v23;
        v24 = *(unsigned int *)(v12 + 24);
        if ((_DWORD)v24 == 9)
        {
          free_qp(v12);
          v25 = v6 == 33;
          v26 = 16;
          v27 = 32;
        }
        else
        {
          if ((_DWORD)v24 != 10)
          {
            v23[20] = 4;
            *((_QWORD *)v23 + 2) = v12;
            if (v6 == 33)
            {
              if ((v24 - 16) >= 0xFFFFFFF1)
                v31 = dword_1B8631838[v24];
              else
                v31 = 0;
              *(_DWORD *)(v12 + 24) = v31;
            }
            return v21;
          }
          free_qp(v12);
          v25 = v6 == 33;
          v26 = 32;
          v27 = 16;
        }
        if (v25)
          v26 = v27;
        *((_WORD *)v21 + 20) = v26;
        return v21;
      }
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        LOWORD(v32) = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)&v32, 2u);
      }
    }
    free_qp(v12);
    return 0;
  }
  if (v6 != 40)
    goto LABEL_9;
LABEL_17:
  for (i = v5 + 1; ; ++i)
  {
    v18 = *i;
    v8 = v18 > 0x20;
    v19 = (1 << v18) & 0x100001600;
    if (v8 || v19 == 0)
      break;
  }
  *a1 = i;
  if (a2 > 99)
    return 0;
  v28 = (_QWORD *)or_expr(a1, (a2 + 1), a3);
  v21 = v28;
  if (v28)
  {
    v29 = MEMORY[0x1E0C809B0];
    if (v6 == 33)
    {
      v32 = MEMORY[0x1E0C809B0];
      v33 = 0x40000000;
      v34 = __db_query_tree_apply_block_block_invoke;
      v35 = &unk_1E6E377F8;
      v36 = &__block_literal_global_10697;
      db_query_tree_apply_block_with_meta(v28, (uint64_t)&v32, 0);
    }
    if (**a1 == 41)
    {
      ++*a1;
    }
    else
    {
      v32 = v29;
      v33 = 0x40000000;
      v34 = __db_query_tree_apply_block_block_invoke;
      v35 = &unk_1E6E377F8;
      v36 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta(v21, (uint64_t)&v32, 0);
      return 0;
    }
  }
  return v21;
}

uint64_t get_query_piece(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char **v5;
  char *v6;
  void *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  char *v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  int v17;
  char *v18;
  int v19;
  int v20;
  const char *v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  unsigned int v33;
  char *v34;
  int v35;
  unsigned int v36;
  char *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  char *v42;
  int v43;
  char *v44;
  unsigned int v45;
  char *v46;
  size_t v47;
  char v48;
  int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  size_t v53;
  void *v54;
  char v55;
  char *v56;
  int v57;
  unsigned int v59;
  int v60;
  char *v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  char *v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  char *v70;
  uint64_t v71;
  int v72;
  size_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  int v80;
  unsigned int v81;
  int v82;
  unsigned __int8 *v83;
  int v84;
  float v86;
  char *v87;
  int v88;
  uint64_t v89;
  int v90;
  char *v91;
  char *v92;
  void *v93;
  unsigned int v94;
  char *v95;
  unsigned int v96;
  float v97;
  char *v98;
  char *v99;
  int v100;
  void *v101;
  uint64_t v102;
  char *v103;
  unsigned int v109;
  char *v110;
  int v111;
  unsigned int v112;
  char *v113;
  unsigned int v114;
  float v115;
  char *v116;
  int v117;
  void *v118;
  char *v120;
  char *__str;
  int v122;
  uint8_t v123[8];
  char __src[1056];
  char __s[8];
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint8_t buf[8];
  uint64_t v130;
  void (*v131)(uint64_t, float);
  void *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = (char *)v1;
  v135 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C85AD8] <= 0x12FuLL)
    ++sTotal_10673;
  v7 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x130uLL, 0x31F9A007uLL);
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    return 0;
  }
  v8 = (uint64_t)v7;
  v9 = *v6;
  if (*v6)
  {
    v10 = MEMORY[0x1E0C80978];
    do
    {
      if (v9 < 0)
      {
        if (!__maskrune(v9, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v10 + 4 * v9 + 60) & 0x4000) == 0)
      {
        break;
      }
      v11 = *++v6;
      v9 = v11;
    }
    while (v11);
  }
  v122 = 0;
  bzero(__src, 0x420uLL);
  __str = v6;
  if (!*v6)
    goto LABEL_263;
  __str = parse_string_piece(v6, __src, 1056, &v122);
  v12 = process_qp_field_name(v8, __src, v122);
  if (!v12)
    goto LABEL_263;
  v13 = v12;
  *(_QWORD *)v8 = v12;
  v14 = *__str;
  if (*__str)
  {
    v15 = __str + 1;
    v16 = MEMORY[0x1E0C80978];
    while (1)
    {
      if (v14 < 0)
      {
        if (!__maskrune(v14, 0x4000uLL))
          goto LABEL_18;
      }
      else if ((*(_DWORD *)(v16 + 4 * v14 + 60) & 0x4000) == 0)
      {
LABEL_18:
        v13 = *(char **)v8;
        break;
      }
      __str = v15;
      v17 = *v15++;
      v14 = v17;
      if (!v17)
        goto LABEL_18;
    }
  }
  if (!strcasecmp(v13, "true"))
  {
    *(_DWORD *)(v8 + 24) = 10;
    if (!v13)
    {
LABEL_37:
      *(_QWORD *)v8 = 0;
      *v5 = __str;
      return v8;
    }
LABEL_36:
    free(v13);
    goto LABEL_37;
  }
  if (!strcasecmp(v13, "false"))
  {
    *(_DWORD *)(v8 + 24) = 9;
    if (!v13)
      goto LABEL_37;
    goto LABEL_36;
  }
  v18 = __str;
  v19 = *__str;
  if (v19 != 40)
    goto LABEL_30;
  if (_os_feature_enabled_impl() && !strcmp("aNN.data", *(const char **)v8))
  {
    *(_DWORD *)(v8 + 24) = 15;
    v27 = __str + 1;
    v28 = MEMORY[0x1E0C80978];
    while (1)
    {
      __str = v27;
      v30 = *v27++;
      v29 = v30;
      if (!v30)
        break;
      if ((v29 & 0x80000000) != 0)
      {
        if (!__maskrune(v29, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v28 + 4 * v29 + 60) & 0x4000) == 0)
      {
        break;
      }
    }
    free(*(void **)v8);
    __str = parse_string_piece(__str, __src, 1056, &v122);
    *(_QWORD *)v8 = process_qp_field_name(v8, __src, v122);
    if (!parse_comma(__str, &__str))
      goto LABEL_263;
    *(_QWORD *)buf = 0;
    v31 = strtol(__str, (char **)buf, 0);
    v32 = *(char **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_263;
    if (*(char **)buf == __str)
      goto LABEL_263;
    __str = *(char **)buf;
    *(_QWORD *)buf = 0;
    if (!parse_comma(v32, &__str))
      goto LABEL_263;
    v33 = strtol(__str, (char **)buf, 0);
    v34 = *(char **)buf;
    if (!*(_QWORD *)buf || *(char **)buf == __str)
      goto LABEL_263;
    v35 = *(_DWORD *)(v8 + 60);
    v36 = v33 < 0x100000 ? v35 & 0xFF00000F | (16 * (v33 & 0xFFFFF)) : v35 | 0xFFFFF0;
    *(_DWORD *)(v8 + 60) = v36;
    __str = v34;
    ++*(_DWORD *)(v8 + 40);
    *(_QWORD *)buf = 0;
    if (!parse_comma(v34, &__str))
      goto LABEL_263;
    v97 = strtof(__str, (char **)buf);
    v98 = *(char **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_263;
    if (*(char **)buf == __str)
      goto LABEL_263;
    *(float *)(v8 + 64) = v97;
    ++*(_DWORD *)(v8 + 40);
    __str = v98;
    if (!parse_comma(v98, &__str))
      goto LABEL_263;
    *(_DWORD *)(v8 + 160) |= 0x10000u;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v3, v8, v31) & 1) == 0)
      *(_DWORD *)(v8 + 60) &= 0xFF00000F;
    *(_DWORD *)(v8 + 40) += 3;
    v99 = __str;
    v100 = *__str;
    if (v100 == 49)
    {
      v113 = __str + 1;
      goto LABEL_249;
    }
    if (v100 == 48)
    {
      v113 = __str + 1;
LABEL_251:
      __str = v113;
      v114 = *(_DWORD *)(v8 + 60) & 0xFEFFFFFF;
LABEL_252:
      *(_DWORD *)(v8 + 60) = v114;
      v99 = parse_whitespace(v113);
      __str = v99;
      if (*v99 != 41)
        goto LABEL_263;
      goto LABEL_253;
    }
    if (v100 != 41)
      goto LABEL_263;
LABEL_228:
    *(_DWORD *)(v8 + 60) &= ~0x1000000u;
LABEL_253:
    v46 = v99 + 1;
    goto LABEL_120;
  }
  v20 = _os_feature_enabled_impl();
  v21 = *(const char **)v8;
  if (v20 && !strcmp("aNN", *(const char **)v8))
  {
    *(_DWORD *)(v8 + 24) = 15;
    v61 = __str + 1;
    v62 = MEMORY[0x1E0C80978];
    while (1)
    {
      __str = v61;
      v64 = *v61++;
      v63 = v64;
      if (!v64)
        break;
      if ((v63 & 0x80000000) != 0)
      {
        if (!__maskrune(v63, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v62 + 4 * v63 + 60) & 0x4000) == 0)
      {
        break;
      }
    }
    free(*(void **)v8);
    __str = parse_string_piece(__str, __src, 1056, &v122);
    *(_QWORD *)v8 = process_qp_field_name(v8, __src, v122);
    if (parse_comma(__str, &__str))
    {
      v65 = __str;
      v66 = *__str;
      if (v66 == 52)
      {
        v67 = 0;
        v65 = ++__str;
        *(_DWORD *)(v8 + 60) &= 0xFFFFFFF3;
        v68 = 1;
        v69 = 4;
      }
      else if (v66 == 50)
      {
        v68 = 0;
        v65 = ++__str;
        *(_DWORD *)(v8 + 60) = *(_DWORD *)(v8 + 60) & 0xFFFFFFF3 | 4;
        v67 = 1;
        v69 = 2;
      }
      else
      {
        v67 = 0;
        v68 = 0;
        if (v66 == 49)
        {
          v65 = ++__str;
          *(_DWORD *)(v8 + 60) = *(_DWORD *)(v8 + 60) & 0xFFFFFFF3 | 8;
          v69 = 1;
        }
        else
        {
          v69 = 0;
        }
      }
      ++*(_DWORD *)(v8 + 40);
      if (parse_comma(v65, &__str))
      {
        *(_QWORD *)buf = 0;
        v94 = strtol(__str, (char **)buf, 0);
        v95 = *(char **)buf;
        if (*(_QWORD *)buf)
        {
          if (*(char **)buf != __str)
          {
            switch(v94)
            {
              case 0x100u:
                v96 = *(_DWORD *)(v8 + 60) & 0xFFFFFFFC;
                break;
              case 0x200u:
                v96 = *(_DWORD *)(v8 + 60) & 0xFFFFFFFC | 1;
                break;
              case 0x300u:
                v96 = *(_DWORD *)(v8 + 60) & 0xFFFFFFFC | 2;
                break;
              default:
                goto LABEL_263;
            }
            *(_DWORD *)(v8 + 60) = v96;
            ++*(_DWORD *)(v8 + 40);
            __str = v95;
            if (parse_comma(v95, &__str))
            {
              if (*__str == 118)
              {
                *(_DWORD *)(v8 + 60) = *(_DWORD *)(v8 + 60) & 0x1FFFFFF | (strtoul(++__str, (char **)buf, 0) << 25);
                __str = *(char **)buf;
                if ((parse_comma(*(char **)buf, &__str) & 1) == 0)
                  goto LABEL_263;
              }
              else
              {
                *(_DWORD *)(v8 + 60) &= 0x1FFFFFFu;
              }
              v101 = malloc_type_malloc(v94 * (unint64_t)v69, 0xBB21BF55uLL);
              v102 = 0;
              *(_QWORD *)(v8 + 296) = v101;
              *(_DWORD *)(v8 + 160) |= 0x10000u;
              v103 = __str;
              do
              {
                *(_QWORD *)buf = 0;
                _S0 = strtof(v103, (char **)buf);
                if (v67)
                {
                  __asm { FCVT            H0, S0 }
                  *(_WORD *)(*(_QWORD *)(v8 + 296) + 2 * v102) = _H0;
                }
                else
                {
                  if (!v68)
                    goto LABEL_263;
                  *(float *)(*(_QWORD *)(v8 + 296) + 4 * v102) = _S0;
                }
                if (!*(_QWORD *)buf)
                  goto LABEL_263;
                __str = *(char **)buf;
                v103 = parse_whitespace(*(_BYTE **)buf);
                __str = v103;
                ++v102;
              }
              while (v94 != v102);
              ++*(_DWORD *)(v8 + 40);
              if (!parse_comma(v103, &__str))
                goto LABEL_263;
              *(_QWORD *)buf = 0;
              v109 = strtol(__str, (char **)buf, 0);
              v110 = *(char **)buf;
              if (!*(_QWORD *)buf || *(char **)buf == __str)
                goto LABEL_263;
              v111 = *(_DWORD *)(v8 + 60);
              v112 = v109 < 0x100000 ? v111 & 0xFF00000F | (16 * (v109 & 0xFFFFF)) : v111 | 0xFFFFF0;
              *(_DWORD *)(v8 + 60) = v112;
              __str = v110;
              ++*(_DWORD *)(v8 + 40);
              if (!parse_comma(v110, &__str))
                goto LABEL_263;
              v115 = strtof(__str, (char **)buf);
              v116 = *(char **)buf;
              if (!*(_QWORD *)buf || *(char **)buf == __str)
                goto LABEL_263;
              *(float *)(v8 + 64) = v115;
              ++*(_DWORD *)(v8 + 40);
              __str = v116;
              v99 = parse_whitespace(v116);
              __str = v99;
              if (*v99 != 41)
              {
                if (!parse_comma(v99, &__str))
                  goto LABEL_263;
                v117 = *__str;
                if (v117 != 49)
                {
                  if (v117 != 48)
                    goto LABEL_263;
                  v113 = __str + 1;
                  goto LABEL_251;
                }
                v113 = __str + 1;
LABEL_249:
                __str = v113;
                v114 = *(_DWORD *)(v8 + 60) | 0x1000000;
                goto LABEL_252;
              }
              goto LABEL_228;
            }
          }
        }
      }
    }
LABEL_263:
    if (*(_QWORD *)v8)
    {
      free(*(void **)v8);
      *(_QWORD *)v8 = 0;
    }
    v118 = *(void **)(v8 + 72);
    if (v118)
      free(v118);
    free((void *)v8);
    return 0;
  }
  if (!strcmp("InRange", v21))
  {
    v23 = 11;
  }
  else
  {
    if (strcmp("FieldMatch", v21))
    {
      v18 = __str;
      if (!*(_DWORD *)(v8 + 24))
      {
        v19 = *__str;
LABEL_30:
        switch(v19)
        {
          case '!':
            if (v18[1] != 61)
              goto LABEL_263;
            v22 = 5;
            goto LABEL_48;
          case '<':
            v24 = (unsigned __int8 *)(v18 + 1);
            __str = v18 + 1;
            if (v18[1] == 61)
            {
              v22 = 3;
              goto LABEL_48;
            }
            v26 = 7;
            goto LABEL_133;
          case '=':
            *(_DWORD *)(v8 + 24) = 1;
            v24 = (unsigned __int8 *)(v18 + 1);
            __str = v18 + 1;
            v25 = v18[1];
            if (v25 != 61)
              goto LABEL_135;
            v24 = (unsigned __int8 *)(v18 + 2);
            __str = v18 + 2;
            v25 = v18[2];
            if (v25 != 61)
              goto LABEL_135;
            v24 = (unsigned __int8 *)(v18 + 3);
            __str = v18 + 3;
            v26 = 2;
            goto LABEL_133;
          case '>':
            v24 = (unsigned __int8 *)(v18 + 1);
            __str = v18 + 1;
            if (v18[1] == 61)
            {
              v22 = 4;
LABEL_48:
              *(_DWORD *)(v8 + 24) = v22;
              v24 = (unsigned __int8 *)(v18 + 2);
              __str = v18 + 2;
            }
            else
            {
              v26 = 8;
LABEL_133:
              *(_DWORD *)(v8 + 24) = v26;
            }
            v25 = *v24;
LABEL_135:
            if (!v25)
              goto LABEL_263;
            v70 = (char *)(v24 + 1);
            v71 = MEMORY[0x1E0C80978];
            break;
          default:
            goto LABEL_263;
        }
        while (1)
        {
          if ((v25 & 0x80) != 0)
          {
            if (!__maskrune((char)v25, 0x4000uLL))
              goto LABEL_141;
          }
          else if ((*(_DWORD *)(v71 + 4 * (char)v25 + 60) & 0x4000) == 0)
          {
LABEL_141:
            if (*__str)
            {
              __str = parse_string_piece(__str, __src, 1056, &v122);
              v73 = strlen(__src);
              v74 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v73 + 1, 0x6085D6BuLL);
              if (!v74)
                _log_fault_for_malloc_failure();
              memcpy(v74, __src, v73);
              *((_BYTE *)v74 + v73) = 0;
              *(_QWORD *)(v8 + 72) = v74;
              v75 = MEMORY[0x1E0C809B0];
              while (1)
              {
                v46 = __str;
                switch(*__str)
                {
                  case 'L':
                    v77 = ++__str;
                    if (v46[1] != 40)
                      continue;
                    *(_QWORD *)__s = 0;
                    v126 = __s;
                    v127 = 0x2000000000;
                    v128 = 0;
                    *(_QWORD *)buf = v75;
                    v130 = 0x40000000;
                    v131 = (void (*)(uint64_t, float))__get_wildcard_limit_block_invoke;
                    v132 = &unk_1E6E37CF0;
                    v133 = __s;
                    v134 = v8;
                    __str = _process_proximities(v77, (uint64_t)buf);
                    goto LABEL_201;
                  case 'W':
                    v78 = ++__str;
                    if (v46[1] != 40)
                      continue;
                    *(_QWORD *)__s = 0;
                    v126 = __s;
                    v127 = 0x2000000000;
                    v128 = 0;
                    *(_QWORD *)buf = v75;
                    v130 = 0x40000000;
                    v131 = (void (*)(uint64_t, float))__get_weights_block_invoke;
                    v132 = &unk_1E6E37CC8;
                    v133 = __s;
                    v134 = v8;
                    if (*v78 != 40)
                      goto LABEL_200;
                    v79 = v46 + 2;
                    break;
                  case 'a':
                    v89 = *(_QWORD *)(v8 + 32) | 0x6000000000;
                    goto LABEL_190;
                  case 'b':
                    v76 = *(_QWORD *)(v8 + 32) | 0x20000000;
                    goto LABEL_146;
                  case 'c':
                    v76 = *(_QWORD *)(v8 + 32) | 0x10;
                    goto LABEL_146;
                  case 'd':
                    v76 = *(_QWORD *)(v8 + 32) | 0x20;
                    goto LABEL_146;
                  case 'f':
                    *(_QWORD *)(v8 + 32) |= 0x800000uLL;
                    __str = v46 + 2;
                    v90 = 100 * __maskrune(v46[1], 0xFuLL);
                    v91 = __str++;
                    LOBYTE(v90) = v90 + 10 * __maskrune(*v91, 0xFuLL);
                    v92 = __str++;
                    *(_BYTE *)(v8 + 28) = (v90 + __maskrune(*v92, 0xFuLL)) & 0x7F;
                    continue;
                  case 'i':
                    v76 = *(_QWORD *)(v8 + 32) | 0x200000000;
                    goto LABEL_146;
                  case 'j':
                    v76 = *(_QWORD *)(v8 + 32) | 8;
                    goto LABEL_146;
                  case 'n':
                    v89 = *(_QWORD *)(v8 + 32) | 0x2000000000;
                    goto LABEL_190;
                  case 'o':
                    v89 = *(_QWORD *)(v8 + 32) | 0x4000000000;
LABEL_190:
                    *(_QWORD *)(v8 + 32) = v89;
                    __str = v46 + 1;
                    if (v46[1] == 40)
                      get_proximities(v8, v46 + 1, &__str);
                    continue;
                  case 'p':
                    v76 = *(_QWORD *)(v8 + 32) | 0x40000000;
                    goto LABEL_146;
                  case 'r':
                    v76 = *(_QWORD *)(v8 + 32) | 2;
                    goto LABEL_146;
                  case 's':
                    v76 = *(_QWORD *)(v8 + 32) | 0x1000000;
                    goto LABEL_146;
                  case 't':
                    v76 = *(_QWORD *)(v8 + 32) | 4;
                    goto LABEL_146;
                  case 'w':
                    v76 = *(_QWORD *)(v8 + 32) | 0x40;
                    goto LABEL_146;
                  case 'x':
                    v76 = *(_QWORD *)(v8 + 32) | 0x100000000;
                    goto LABEL_146;
                  case 'z':
                    v76 = *(_QWORD *)(v8 + 32) | 0x80000000;
LABEL_146:
                    *(_QWORD *)(v8 + 32) = v76;
                    __str = v46 + 1;
                    continue;
                  default:
                    goto LABEL_120;
                }
                do
                {
                  while (1)
                  {
                    v78 = v79;
                    v81 = *v79;
                    if (!*v79)
                      goto LABEL_180;
                    if ((v81 & 0x80000000) == 0)
                      break;
                    v80 = __maskrune(v81, 0x4000uLL);
                    v79 = v78 + 1;
                    if (!v80)
                      goto LABEL_180;
                  }
                  ++v79;
                }
                while ((*(_DWORD *)(v71 + 4 * v81 + 60) & 0x4000) != 0);
LABEL_180:
                *(_QWORD *)v123 = v78;
LABEL_158:
                v82 = *v78;
                if (!*v78)
                  goto LABEL_200;
                if (v82 != 41)
                  break;
                ++v78;
LABEL_200:
                __str = v78;
LABEL_201:
                _Block_object_dispose(__s, 8);
              }
              v83 = (unsigned __int8 *)(v78 + 1);
              do
              {
                if ((v82 & 0x80) != 0)
                {
                  if (!__maskrune((char)v82, 0x4000uLL))
                    goto LABEL_165;
                }
                else if ((*(_DWORD *)(v71 + 4 * (char)v82 + 60) & 0x4000) == 0)
                {
LABEL_165:
                  v78 = *(char **)v123;
                  v82 = **(_BYTE **)v123;
                  goto LABEL_167;
                }
                *(_QWORD *)v123 = v83;
                v84 = *v83++;
                v82 = v84;
              }
              while (v84);
              v78 = (char *)(v83 - 1);
LABEL_167:
              if (v82 == 46 || ((char)v82 - 48) <= 9)
              {
                v86 = strtof(v78, (char **)v123);
                v131((uint64_t)buf, v86);
                v78 = *(char **)v123;
                v82 = **(_BYTE **)v123;
              }
              if (!v82)
              {
LABEL_179:
                ++v78;
                goto LABEL_180;
              }
              v87 = v78 + 1;
              while (1)
              {
                if ((v82 & 0x80) != 0)
                {
                  if (!__maskrune((char)v82, 0x4000uLL))
                    goto LABEL_178;
                }
                else if ((*(_DWORD *)(v71 + 4 * (char)v82 + 60) & 0x4000) == 0)
                {
LABEL_178:
                  v78 = *(char **)v123;
                  if (**(_BYTE **)v123 != 41)
                    goto LABEL_179;
                  goto LABEL_158;
                }
                *(_QWORD *)v123 = v87;
                v88 = *v87++;
                LOBYTE(v82) = v88;
                if (!v88)
                {
                  v78 = v87;
                  goto LABEL_180;
                }
              }
            }
            goto LABEL_263;
          }
          __str = v70;
          v72 = *v70++;
          LOBYTE(v25) = v72;
          if (!v72)
            goto LABEL_263;
        }
      }
      goto LABEL_64;
    }
    v23 = 13;
  }
  *(_DWORD *)(v8 + 24) = v23;
  v18 = __str;
LABEL_64:
  v37 = v18 + 1;
  v38 = MEMORY[0x1E0C80978];
  while (1)
  {
    __str = v37;
    v40 = *v37++;
    v39 = v40;
    if (!v40)
      break;
    if ((v39 & 0x80000000) != 0)
    {
      if (!__maskrune(v39, 0x4000uLL))
        break;
    }
    else if ((*(_DWORD *)(v38 + 4 * v39 + 60) & 0x4000) == 0)
    {
      break;
    }
  }
  free(*(void **)v8);
  __str = parse_string_piece(__str, __src, 1056, &v122);
  *(_QWORD *)v8 = process_qp_field_name(v8, __src, v122);
  v41 = *__str;
  if (!*__str)
    goto LABEL_82;
  v42 = __str + 1;
  while (v41 < 0)
  {
    if (!__maskrune(v41, 0x4000uLL))
      goto LABEL_75;
LABEL_72:
    v43 = *v42++;
    v41 = v43;
    if (!v43)
      goto LABEL_82;
  }
  if ((*(_DWORD *)(v38 + 4 * v41 + 60) & 0x4000) != 0)
    goto LABEL_72;
LABEL_75:
  if (*(v42 - 1) == 44)
  {
    while (1)
    {
      v44 = v42;
      v45 = *v42;
      if (!*v42)
        break;
      if ((v45 & 0x80000000) != 0)
      {
        ++v42;
        if (!__maskrune(v45, 0x4000uLL))
          break;
      }
      else
      {
        ++v42;
        if ((*(_DWORD *)(v38 + 4 * v45 + 60) & 0x4000) == 0)
          break;
      }
    }
    __str = v44;
  }
LABEL_82:
  v46 = __str;
  v47 = strlen(__str);
  v48 = *__str;
  if (!*__str)
  {
LABEL_114:
    *(_DWORD *)(v8 + 40) = 0;
    goto LABEL_115;
  }
  v120 = &__str[v47];
  while (2)
  {
    if (v48 < 0)
    {
      if (!__maskrune(v48, 0x4000uLL))
        goto LABEL_88;
LABEL_85:
      v49 = *++v46;
      v48 = v49;
      if (!v49)
        goto LABEL_114;
      continue;
    }
    break;
  }
  if ((*(_DWORD *)(v38 + 4 * v48 + 60) & 0x4000) != 0)
    goto LABEL_85;
LABEL_88:
  v50 = *v46;
  if (!*v46)
    goto LABEL_114;
  bzero(buf, 0x2000uLL);
  v51 = 0;
  v52 = 0;
  while (v50 != 41)
  {
    bzero(__s, 0x400uLL);
    v46 = parse_string_piece(v46, __s, 1024, 0);
    v53 = strlen(__s);
    v54 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v53 + 1, 0x6085D6BuLL);
    if (!v54 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v123 = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v123, 2u);
    }
    memcpy(v54, __s, v53);
    *((_BYTE *)v54 + v53) = 0;
    *(_QWORD *)&buf[8 * v51] = v54;
    v55 = *v46;
    if (!*v46)
      goto LABEL_110;
    v56 = v46 + 1;
    while (v55 < 0)
    {
      if (!__maskrune(v55, 0x4000uLL))
        goto LABEL_100;
LABEL_97:
      v57 = *++v46;
      v55 = v57;
      ++v56;
      if (!v57)
        goto LABEL_110;
    }
    if ((*(_DWORD *)(v38 + 4 * v55 + 60) & 0x4000) != 0)
      goto LABEL_97;
LABEL_100:
    _CF = *v46 != 44 || v46 >= v120;
    if (!_CF)
    {
      while (1)
      {
        v46 = v56;
        v59 = *v56;
        if (!*v56)
          break;
        if ((v59 & 0x80000000) != 0)
        {
          ++v56;
          if (!__maskrune(v59, 0x4000uLL))
            break;
        }
        else
        {
          ++v56;
          if ((*(_DWORD *)(v38 + 4 * v59 + 60) & 0x4000) == 0)
            break;
        }
      }
    }
LABEL_110:
    ++v51;
    v50 = *v46;
    if (*v46)
    {
      _CF = v52++ >= 0x3FF;
      if (!_CF)
        continue;
    }
    goto LABEL_203;
  }
  ++v46;
LABEL_203:
  *(_DWORD *)(v8 + 40) = v51;
  if ((_DWORD)v51)
  {
    v93 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * v51, 0x6085D6BuLL);
    if (!v93 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__s = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", (uint8_t *)__s, 2u);
    }
    *(_QWORD *)(v8 + 168) = v93;
    memcpy(v93, buf, 8 * v51);
  }
LABEL_115:
  __str = v46;
  v60 = *(_DWORD *)(v8 + 24);
  if (v60 == 13)
  {
    if (*(int *)(v8 + 40) < 1)
      goto LABEL_263;
  }
  else if (v60 == 11 && *(_DWORD *)(v8 + 40) != 2)
  {
    goto LABEL_263;
  }
LABEL_120:
  *v5 = v46;
  return v8;
}

_BYTE *parse_string_piece(_BYTE *__src, _BYTE *a2, int a3, _DWORD *a4)
{
  int v5;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  int v24;

  v5 = (int)a2;
  v7 = (unint64_t)&a2[a3 - 1];
  while (2)
  {
    v8 = *__src;
    switch(*__src)
    {
      case 0:
        goto LABEL_24;
      case 9:
      case 0xA:
      case 0x20:
        ++__src;
        continue;
      case 0x22:
      case 0x27:
        v10 = *++__src;
        LOBYTE(v9) = v10;
        if (v10)
        {
          v11 = a2;
          while (1)
          {
            if (v8 == v9)
            {
              ++__src;
              goto LABEL_64;
            }
            if (v9 == 92)
            {
              v9 = __src[1];
              if (v9 != 34 && v9 != 39)
              {
                if (v9 == 92)
                {
                  if ((unint64_t)v11 < v7)
                    *v11++ = 92;
                  v12 = 5;
                  ++__src;
                }
                else
                {
                  v12 = 5u;
                }
LABEL_20:
                v13 = utf8_byte_length(unsigned char)::utf8_len_table[v12];
                v14 = &v11[v13];
                if ((unint64_t)&v11[v13] >= v7)
                {
                  v7 = (unint64_t)v11;
                }
                else
                {
                  memcpy(v11, __src, utf8_byte_length(unsigned char)::utf8_len_table[v12]);
                  v11 = v14;
                }
                __src += v13;
                goto LABEL_7;
              }
              ++__src;
            }
            v12 = v9 >> 4;
            if ((v12 & 0xC) != 8)
              goto LABEL_20;
            ++__src;
LABEL_7:
            LOBYTE(v9) = *__src;
            if (!*__src)
              goto LABEL_64;
          }
        }
LABEL_24:
        LODWORD(v11) = (_DWORD)a2;
        *a2 = 0;
        if (a4)
          goto LABEL_65;
        return __src;
      case 0x24:
        v19 = *++__src;
        LOBYTE(v18) = v19;
        *a2 = 36;
        v11 = a2 + 1;
        if (!v19)
          goto LABEL_64;
        v20 = 0;
        v21 = 1;
        while (1)
        {
          v22 = __src++;
          switch((char)v18)
          {
            case 9:
            case 10:
            case 32:
            case 33:
            case 38:
            case 44:
            case 60:
            case 61:
            case 62:
            case 124:
              if (!v20)
                goto LABEL_70;
              goto LABEL_46;
            case 40:
              ++v20;
              goto LABEL_46;
            case 41:
              if (!v20)
                goto LABEL_70;
              if (!--v20)
              {
                if ((unint64_t)v11 < v7)
                  *v11++ = v18;
                v21 = 2;
LABEL_70:
                __src = &v22[v21 - 1];
                *v11 = 0;
                if (!a4)
                  return __src;
LABEL_65:
                *a4 = (_DWORD)v11 - v5;
                return __src;
              }
LABEL_46:
              if ((_BYTE)v18 && (unint64_t)v11 < v7)
                *v11++ = v18;
              LOBYTE(v18) = *__src;
              if (!*__src)
              {
LABEL_64:
                *v11 = 0;
                if (!a4)
                  return __src;
                goto LABEL_65;
              }
              break;
            case 92:
              if (v18 == 92)
              {
                v18 = *__src;
                if (v18 == 39 || v18 == 34)
                {
                  __src = v22 + 2;
                }
                else
                {
                  v24 = v22[2];
                  v23 = v22 + 2;
                  if (v24 == 92)
                  {
                    if ((unint64_t)v11 < v7)
                    {
                      *v11++ = 92;
                      LOBYTE(v18) = *__src;
                    }
                    __src = v23;
                  }
                  else
                  {
                    LOBYTE(v18) = 92;
                  }
                }
              }
              goto LABEL_46;
            default:
              goto LABEL_46;
          }
        }
      default:
        v11 = a2;
        while (2)
        {
          v15 = __src + 1;
          switch((char)v8)
          {
            case 9:
            case 10:
            case 32:
            case 33:
            case 38:
            case 40:
            case 41:
            case 44:
            case 60:
            case 61:
            case 62:
            case 124:
              goto LABEL_64;
            case 92:
              if (v8 == 92)
              {
                v8 = *v15;
                if (v8 == 39 || v8 == 34)
                {
                  v15 = __src + 2;
                }
                else
                {
                  v17 = __src[2];
                  v16 = __src + 2;
                  if (v17 == 92)
                  {
                    if ((unint64_t)v11 < v7)
                    {
                      *v11++ = 92;
                      LOBYTE(v8) = *v15;
                    }
                    v15 = v16;
                  }
                  else
                  {
                    LOBYTE(v8) = 92;
                  }
                }
              }
              goto LABEL_33;
            default:
LABEL_33:
              if ((_BYTE)v8 && (unint64_t)v11 < v7)
                *v11++ = v8;
              LOBYTE(v8) = *v15;
              __src = v15;
              if (*v15)
                continue;
              goto LABEL_64;
          }
        }
    }
  }
}

char *process_qp_field_name(uint64_t a1, char *__s1, int a3)
{
  unsigned int v4;
  char v6;
  const char *v7;
  char *v8;
  _BOOL4 v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  int v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  char *result;
  size_t v18;
  char *v19;
  uint8_t v20[16];

  v4 = a3 - 2;
  if (a3 >= 2 && __s1[a3 - 1] == 93)
  {
    if (a3 > 3)
    {
      v6 = 0;
      v7 = 0;
      v8 = &__s1[a3 - 2];
      v9 = 1;
      v10 = MEMORY[0x1E0C80978];
      while (1)
      {
        v11 = &__s1[v4];
        v12 = *v11;
        if (v12 == 36)
        {
          if ((v6 & 1) != 0)
            v9 = 0;
          v6 = 1;
          goto LABEL_26;
        }
        if (v12 == 91)
        {
          *v11 = 0;
          v15 = v9;
LABEL_31:
          v16 = *(_QWORD *)(a1 + 32);
          if ((v6 & 1) == 0 && v7)
          {
            *(_QWORD *)(a1 + 32) = v16 | 0x4000000;
            *(_DWORD *)(a1 + 44) = 0;
            goto LABEL_36;
          }
LABEL_35:
          *(_QWORD *)(a1 + 32) = v16 | 0x2000000;
          *(_DWORD *)(a1 + 44) = 0;
          if (v7)
          {
LABEL_36:
            *(_DWORD *)(a1 + 44) = atoi(v7);
            if ((v15 & 1) == 0)
              return 0;
            goto LABEL_37;
          }
          if (v15)
            goto LABEL_37;
          return 0;
        }
        if ((v12 & 0x80000000) != 0)
        {
          if (!__maskrune(*v11, 0x400uLL))
          {
            v13 = __maskrune(v12, 0x4000uLL);
            goto LABEL_25;
          }
        }
        else if ((*(_DWORD *)(v10 + 4 * v12 + 60) & 0x400) == 0)
        {
          v13 = *(_DWORD *)(v10 + 4 * v12 + 60) & 0x4000;
LABEL_25:
          v9 = v13 != 0;
          goto LABEL_26;
        }
        if ((v6 & 1) != 0)
        {
          v15 = 0;
          v16 = *(_QWORD *)(a1 + 32);
          goto LABEL_35;
        }
        v6 = 0;
        if (v7)
          v14 = v7 == v11 + 1;
        else
          v14 = 1;
        v9 = v14;
        if (v14)
          v7 = v8;
LABEL_26:
        v15 = v9;
        if (v4 >= 3)
        {
          --v4;
          if (v9)
            continue;
        }
        goto LABEL_31;
      }
    }
    *(_QWORD *)(a1 + 32) |= 0x2000000uLL;
    *(_DWORD *)(a1 + 44) = 0;
  }
LABEL_37:
  if (!*__s1)
    return 0;
  switch(*__s1)
  {
    case 'c':
      if (strncmp(__s1, "created.", 8uLL))
        goto LABEL_64;
      if (!strcmp(__s1 + 9, "date"))
      {
        v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x1DuLL, 0x6085D6BuLL);
        if (!v19)
          _log_fault_for_malloc_failure();
        strcpy(v19, "kMDItemUserCreatedUserHandle");
        return v19;
      }
      if (strcmp(__s1 + 9, "user"))
        goto LABEL_64;
      return (char *)query_strdup("kMDItemUserCreatedDate");
    case 'd':
      if (strncmp(__s1, "downloaded.", 0xBuLL))
        goto LABEL_64;
      if (!strcmp(__s1 + 12, "date"))
      {
        v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x20uLL, 0x6085D6BuLL);
        if (!v19)
          _log_fault_for_malloc_failure();
        strcpy(v19, "kMDItemUserDownloadedUserHandle");
        return v19;
      }
      if (strcmp(__s1 + 12, "user"))
        goto LABEL_64;
      return (char *)query_strdup("kMDItemUserDownloadedDate");
    case 'm':
      if (strncmp(__s1, "modified.", 9uLL))
        goto LABEL_64;
      if (!strcmp(__s1 + 10, "date"))
      {
        v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x18uLL, 0x6085D6BuLL);
        if (!v19)
          _log_fault_for_malloc_failure();
        strcpy(v19, "kMDItemUserModifiedDate");
        return v19;
      }
      if (strcmp(__s1 + 10, "user"))
        goto LABEL_64;
      return (char *)query_strdup("kMDItemUserModifiedUserHandle");
    case 'p':
      if (strncmp(__s1, "printed.", 8uLL))
        goto LABEL_64;
      if (!strcmp(__s1 + 9, "date"))
      {
        v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x17uLL, 0x6085D6BuLL);
        if (!v19)
          _log_fault_for_malloc_failure();
        strcpy(v19, "kMDItemUserPrintedDate");
        return v19;
      }
      if (strcmp(__s1 + 9, "user"))
        goto LABEL_64;
      return (char *)query_strdup("kMDItemUserPrintedUserHandle");
    case 'r':
      if (strncmp(__s1, "received.", 9uLL))
        goto LABEL_64;
      if (!strcmp(__s1 + 10, "date"))
      {
        v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x1EuLL, 0x6085D6BuLL);
        if (!v19)
          _log_fault_for_malloc_failure();
        strcpy(v19, "kMDItemUserSharedReceivedDate");
        return v19;
      }
      if (!strcmp(__s1 + 10, "sender"))
        return (char *)query_strdup("kMDItemUserSharedReceivedSender");
      if (!strcmp(__s1 + 10, "receivers"))
        return (char *)query_strdup("kMDItemUserSharedReceivedRecipient");
      if (!strcmp(__s1 + 10, "transport"))
        return (char *)query_strdup("kMDItemUserSharedReceivedTransport");
      if (!strcmp(__s1 + 10, "senderHandle"))
        return (char *)query_strdup("kMDItemUserSharedReceivedSenderHandle");
      if (strcmp(__s1 + 10, "receiverHandles"))
        goto LABEL_64;
      return (char *)query_strdup("kMDItemUserSharedReceivedRecipientHandle");
    case 's':
      if (strncmp(__s1, "sent.", 5uLL))
        goto LABEL_64;
      if (!strcmp(__s1 + 6, "date"))
      {
        v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x1AuLL, 0x6085D6BuLL);
        if (!v19)
          _log_fault_for_malloc_failure();
        strcpy(v19, "kMDItemUserSharedSentDate");
        return v19;
      }
      if (!strcmp(__s1 + 6, "sender"))
      {
        result = (char *)query_strdup("kMDItemUserSharedSentSender");
      }
      else if (!strcmp(__s1 + 6, "recipients"))
      {
        result = (char *)query_strdup("kMDItemUserSharedSentRecipient");
      }
      else if (!strcmp(__s1 + 6, "transport"))
      {
        result = (char *)query_strdup("kMDItemUserSharedSentTransport");
      }
      else if (!strcmp(__s1 + 6, "senderHandle"))
      {
        result = (char *)query_strdup("kMDItemUserSharedSentSenderHandle");
      }
      else
      {
        if (strcmp(__s1 + 6, "recipientHandles"))
          goto LABEL_64;
        result = (char *)query_strdup("kMDItemUserSharedSentRecipientHandle");
      }
      break;
    default:
LABEL_64:
      v18 = strlen(__s1);
      v19 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v18 + 1, 0x6085D6BuLL);
      if (!v19 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v20 = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v20, 2u);
      }
      memcpy(v19, __s1, v18);
      v19[v18] = 0;
      return v19;
  }
  return result;
}

uint64_t check_and_decompose_string(unsigned __int8 *a1, unint64_t a2, unsigned __int8 **a3, unint64_t *a4)
{
  unint64_t v8;
  unsigned __int8 *v9;
  unint64_t v10;
  int v11;
  uint64_t i;
  _WORD *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  int v26;
  unint64_t v27;
  int v28;

  v27 = 0;
  *a3 = a1;
  *a4 = a2;
  if (!a2)
    return 0;
  v8 = 0;
  v28 = 0;
  v9 = a1;
  do
  {
    if (((char)*v9 & 0x80000000) == 0)
      goto LABEL_4;
    v26 = 0;
    v10 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v9 >> 4];
    if (utf8_decodestr(v9, v10, &v26, &v27, 4, &v28, 0))
      return 22;
    if ((unsigned __int16)v26 >= 0xC0u)
    {
      v11 = __CFUniCharDecomposableBitmap[(unint64_t)(unsigned __int16)v26 >> 8];
      if (__CFUniCharDecomposableBitmap[(unint64_t)(unsigned __int16)v26 >> 8])
      {
        if (v11 == 255
          || ((__CFUniCharDecomposableBitmap[(v26 >> 3) + 256 + 32 * v11 - 32] >> (v26 & 7)) & 1) != 0)
        {
          break;
        }
      }
    }
    v8 += v10 - 1;
    v9 += v10 - 1;
LABEL_4:
    ++v8;
    ++v9;
  }
  while (v8 < a2);
  if (v8 >= a2)
  {
    if (v8 <= a2)
      return 0;
    return 22;
  }
  for (i = 2 * a2 + 2 * (a2 >> 2) + 2; ; i += 64)
  {
    v13 = malloc_type_malloc(i, 0xBDF9019uLL);
    if (!v13)
      break;
    v14 = utf8_decodestr(a1, a2, v13, &v27, i, &v28, 4);
    if (!v14)
      break;
    if (v14 == 22)
    {
      free(v13);
      return 22;
    }
    free(v13);
  }
  v16 = v27;
  if (v27 >= 2)
  {
    v17 = 0;
    v20 = v27 >> 1;
    v21 = v13;
    do
    {
      v24 = *v21++;
      v23 = v24;
      if (!v24)
        v23 = 9216;
      if (v23 < 0x80)
      {
        v22 = 1;
      }
      else if (v23 >= 0x800)
      {
        if ((v23 & 0xF800) == 0xD800)
          v22 = 2;
        else
          v22 = 3;
      }
      else
      {
        v22 = 2;
      }
      v17 += v22;
      --v20;
    }
    while (v20);
  }
  else
  {
    v17 = 0;
  }
  v18 = malloc_type_malloc(v17 + 1, 0xB67BE8AFuLL);
  v19 = utf8_encodestr(v13, v16, v18, &v27, v17 + 1);
  if ((_DWORD)v19)
  {
    v15 = v19;
    free(v13);
    free(v18);
    return v15;
  }
  v18[v17] = 0;
  *a3 = v18;
  *a4 = v17 + 1;
  free(v13);
  return 0;
}

BOOL db_sanitize_query_tree(uint64_t *a1, char a2, char a3, double a4)
{
  _QWORD *v5;
  void *v6;
  _BOOL8 v7;
  _QWORD v9[6];
  char v10;
  _QWORD v11[6];
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _QWORD v21[5];

  v5 = (_QWORD *)*a1;
  v17 = 0;
  v18 = &v17;
  v20 = 0;
  v19 = 0x2000000000;
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = __db_sanitize_query_tree_block_invoke;
  v11[3] = &unk_1E6E37A80;
  v11[4] = &v13;
  v12 = a2;
  *(double *)&v11[5] = a4;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __db_sanitize_query_tree_block_invoke_2;
  v9[3] = &unk_1E6E37AA8;
  v9[4] = v11;
  v9[5] = &v17;
  v10 = a3;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 0x40000000;
  v21[2] = __db_query_tree_apply_block_block_invoke;
  v21[3] = &unk_1E6E377F8;
  v21[4] = v9;
  *a1 = db_query_tree_apply_block_with_meta(v5, (uint64_t)v21, (uint64_t)&__block_literal_global_37);
  v6 = (void *)v14[3];
  if (v6)
    OSAtomicEnqueue(&s_si_calendar_head, v6, 0);
  v7 = *((_DWORD *)v18 + 6) < 2049;
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
  return v7;
}

uint64_t makeAndNode(uint64_t a1, uint64_t a2, int a3, int a4)
{
  char v4;
  char v5;
  _QWORD *v6;
  _QWORD *tree_apply_block_with_meta;
  int v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  void *v17;
  void *v18;

  v4 = a4;
  v5 = a3;
  v6 = (_QWORD *)a2;
  tree_apply_block_with_meta = (_QWORD *)a1;
  v8 = *(unsigned __int16 *)(a1 + 40);
  if (v8 == 32)
  {
    if (a3)
    {
      v14 = MEMORY[0x1E0C809B0];
      v15 = 0x40000000;
      v16 = __db_query_tree_apply_block_block_invoke;
      v17 = &unk_1E6E377F8;
      v18 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta((_QWORD *)a1, (uint64_t)&v14, 0);
    }
    if ((v4 & 1) != 0)
      return (uint64_t)v6;
    goto LABEL_20;
  }
  v10 = *(unsigned __int16 *)(a2 + 40);
  if (v10 == 32)
  {
    if (a4)
    {
      v14 = MEMORY[0x1E0C809B0];
      v15 = 0x40000000;
      v16 = __db_query_tree_apply_block_block_invoke;
      v17 = &unk_1E6E377F8;
      v18 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta((_QWORD *)a2, (uint64_t)&v14, 0);
    }
    if ((v5 & 1) != 0)
      return (uint64_t)tree_apply_block_with_meta;
LABEL_15:
    v14 = MEMORY[0x1E0C809B0];
    v15 = 0x40000000;
    v16 = __db_query_tree_apply_block_block_invoke;
    v17 = &unk_1E6E377F8;
    v18 = &__block_literal_global_17_10736;
    v11 = tree_apply_block_with_meta;
    return db_query_tree_apply_block_with_meta(v11, (uint64_t)&v14, (uint64_t)&__block_literal_global_20_10737);
  }
  if (v8 == 16)
  {
    if (a4)
    {
      v14 = MEMORY[0x1E0C809B0];
      v15 = 0x40000000;
      v16 = __db_query_tree_apply_block_block_invoke;
      v17 = &unk_1E6E377F8;
      v18 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta((_QWORD *)a2, (uint64_t)&v14, 0);
    }
    if ((v5 & 1) != 0)
      return (uint64_t)tree_apply_block_with_meta;
    goto LABEL_15;
  }
  if (v10 == 16)
  {
    if (a3)
    {
      v14 = MEMORY[0x1E0C809B0];
      v15 = 0x40000000;
      v16 = __db_query_tree_apply_block_block_invoke;
      v17 = &unk_1E6E377F8;
      v18 = &__block_literal_global_143;
      db_query_tree_apply_block_with_meta((_QWORD *)a1, (uint64_t)&v14, 0);
    }
    if ((v4 & 1) != 0)
      return (uint64_t)v6;
LABEL_20:
    v14 = MEMORY[0x1E0C809B0];
    v15 = 0x40000000;
    v16 = __db_query_tree_apply_block_block_invoke;
    v17 = &unk_1E6E377F8;
    v18 = &__block_literal_global_17_10736;
    v11 = v6;
    return db_query_tree_apply_block_with_meta(v11, (uint64_t)&v14, (uint64_t)&__block_literal_global_20_10737);
  }
  v9 = malloc_type_calloc(1uLL, 0x48uLL, 0x10E0040D742DA1DuLL);
  v13 = MEMORY[0x1E0C809B0];
  if ((v5 & 1) == 0)
  {
    v14 = MEMORY[0x1E0C809B0];
    v15 = 0x40000000;
    v16 = __db_query_tree_apply_block_block_invoke;
    v17 = &unk_1E6E377F8;
    v18 = &__block_literal_global_17_10736;
    tree_apply_block_with_meta = (_QWORD *)db_query_tree_apply_block_with_meta(tree_apply_block_with_meta, (uint64_t)&v14, (uint64_t)&__block_literal_global_20_10737);
  }
  *v9 = tree_apply_block_with_meta;
  if ((v4 & 1) == 0)
  {
    v14 = v13;
    v15 = 0x40000000;
    v16 = __db_query_tree_apply_block_block_invoke;
    v17 = &unk_1E6E377F8;
    v18 = &__block_literal_global_17_10736;
    v6 = (_QWORD *)db_query_tree_apply_block_with_meta(v6, (uint64_t)&v14, (uint64_t)&__block_literal_global_20_10737);
  }
  v9[1] = v6;
  *((_WORD *)v9 + 20) = 2;
  return (uint64_t)v9;
}

uint64_t _si_get_object_for_identifier_createParentDBO(uint64_t a1, int a2, char *__str, int a4, uint64_t a5, int a6, char *a7, _QWORD *a8, unint64_t *a9, int a10, unsigned __int8 a11)
{
  char *v13;
  char *v14;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  __int128 v23;
  size_t v24;
  char *v25;
  _DWORD *v26;
  int v27;
  __n128 v28;
  int v29;
  __n128 v30;
  int v31;
  __n128 v32;
  uint64_t obj_callback;
  int field_by_id;
  int v36;
  unsigned __int16 *v37;
  const char *string_for_id;
  const char *v39;
  int v40;
  NSObject *v41;
  int v42;
  int v43;
  NSObject *v44;
  const char *v45;
  NSObject *v46;
  void *v47;
  int v48;
  int updated;
  int v50;
  char *v51;
  char *v52;
  char *v53;
  int v54;
  NSObject *v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  NSObject *v60;
  int v61;
  int v62;
  NSObject *v63;
  _QWORD *v64;
  unint64_t *v65;
  uint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  NSObject *v73;
  int v74;
  char *v75;
  char *v76;
  const char *v77;
  __int128 v78;
  unint64_t *v79;
  _QWORD *v80;
  int v81;
  int v82;
  uint64_t v83;
  int *v84;
  unsigned __int16 *v85;
  int *v86;
  unsigned __int16 *v87;
  _DWORD *v88;
  _DWORD *v89;
  uint8_t buf[4];
  const char *v91;
  __int16 v92;
  int v93;
  __int16 v94;
  unint64_t v95;
  __int16 v96;
  unint64_t v97;
  __int16 v98;
  _BYTE v99[10];
  _BYTE v100[6];
  __int16 v101;
  int v102;
  int v103[2];
  _QWORD v104[3];

  v80 = a8;
  v13 = (char *)a5;
  v14 = __str;
  v82 = a10;
  v79 = a9;
  v104[1] = *MEMORY[0x1E0C80C00];
  v89 = 0;
  v17 = *(int **)(a1 + 1184);
  v18 = si_compute_oid_for_identifier_bundle_id(__str, a2, a5, a4);
  v19 = v18;
  v20 = a6 + a2;
  v21 = a11;
  v22 = *(_DWORD *)(a1 + 2060);
  v83 = (v20 + 250);
  v104[0] = v22;
  v103[0] = *(_DWORD *)(a1 + 2064);
  v103[1] = 0;
  *(_QWORD *)&v23 = 136316418;
  v78 = v23;
  v81 = a11;
  while (1)
  {
    v88 = 0;
    MEMORY[0x1E0C80A78](v18);
    v25 = (char *)&v78 - ((v24 + 15) & 0x1FFFFFFF0);
    bzero(v25, v24);
    if (v21)
    {
      if (*v17 != 1685287992)
      {
        v72 = *__error();
        v73 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          v74 = *v17;
          *(_DWORD *)buf = 136315650;
          v91 = "db_create_obj_with_buffer";
          v92 = 1024;
          v93 = 313;
          v94 = 1024;
          LODWORD(v95) = v74;
          _os_log_error_impl(&dword_1B8270000, v73, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
        }
        *__error() = v72;
        v75 = __si_assert_copy_extra_268();
        v76 = v75;
        if (v75)
          v77 = v75;
        else
          v77 = "";
        __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 313, v77);
        free(v76);
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      v26 = 0;
      if (v83 >= 0x30 && (v17[201] & 8) == 0)
      {
        *((_DWORD *)v25 + 2) = v83;
        *((_DWORD *)v25 + 3) = 48;
        *((_QWORD *)v25 + 3) = 0;
        *((_QWORD *)v25 + 4) = 0;
        v26 = v25;
        *((_QWORD *)v25 + 5) = 520;
      }
      v88 = v26;
      *(_QWORD *)v26 = v19;
      v27 = strlen(v14);
      db_add_field(v17, &v88, 0, "_kMDItemExternalID", *(unsigned int *)(a1 + 2060), 0x2308u, 11, (unsigned __int8 *)v14, v28, v27 + 1);
      v29 = strlen(v13);
      db_add_field(v17, &v88, 0x10u, "_kMDItemBundleID", *(unsigned int *)(a1 + 2064), 0x4318u, 11, (unsigned __int8 *)v13, v30, v29 + 1);
      if (a7)
      {
        v31 = strlen(a7);
        db_add_field(v17, &v88, 0x10u, "_kMDItemDomainIdentifier", *(unsigned int *)(a1 + 2068), 0x4300u, 11, (unsigned __int8 *)a7, v32, v31 + 1);
      }
    }
    obj_callback = db_get_obj_callback(v17, v19, (void **)&v89, 1, *(_QWORD *)(a1 + 2368), v88);
    if ((_DWORD)obj_callback && (_DWORD)obj_callback != 3)
      break;
    v86 = 0;
    v87 = 0;
    field_by_id = db_get_field_by_id(v17, (uint64_t)v89, (int *)v104, (unint64_t *)&v87, (unint64_t *)&v86);
    v84 = 0;
    v85 = 0;
    v36 = db_get_field_by_id(v17, (uint64_t)v89, v103, (unint64_t *)&v85, (unint64_t *)&v84);
    if (field_by_id | v36)
    {
      v61 = v36;
      v62 = *__error();
      v63 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = v78;
        v91 = "_si_get_object_for_identifier_createParentDBO";
        v92 = 1024;
        v93 = 24053;
        v94 = 2048;
        v95 = v19;
        v96 = 2048;
        v97 = v19;
        v98 = 1024;
        *(_DWORD *)v99 = field_by_id;
        *(_WORD *)&v99[4] = 1024;
        *(_DWORD *)&v99[6] = v61;
        _os_log_error_impl(&dword_1B8270000, v63, OS_LOG_TYPE_ERROR, "%s:%d: Failed to fetch the bundleId/identifier field, oid:0x%llx(%lld), rc1:%d, rc2:%d", buf, 0x32u);
      }
      *__error() = v62;
LABEL_47:
      v67 = 22;
LABEL_48:
      v64 = v80;
      v65 = v79;
LABEL_49:
      if (!v65)
        goto LABEL_51;
LABEL_50:
      *v65 = v19;
      goto LABEL_51;
    }
    if (*v87 != 11 || (v37 = v85, *v85 != 11))
    {
      v59 = *__error();
      v60 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        v68 = *v87;
        v69 = v87[1];
        v70 = *v85;
        v71 = v85[1];
        *(_DWORD *)buf = 136316930;
        v91 = "_si_get_object_for_identifier_createParentDBO";
        v92 = 1024;
        v93 = 24058;
        v94 = 2048;
        v95 = v19;
        v96 = 2048;
        v97 = v19;
        v98 = 1024;
        *(_DWORD *)v99 = v68;
        *(_WORD *)&v99[4] = 1024;
        *(_DWORD *)&v99[6] = v69;
        *(_WORD *)v100 = 1024;
        *(_DWORD *)&v100[2] = v70;
        v101 = 1024;
        v102 = v71;
        _os_log_error_impl(&dword_1B8270000, v60, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type for bundleId/identifier field, oid:0x%llx(%lld), type1:%d, flags1:0x%x, type2:%d, flags2:0x%x", buf, 0x3Eu);
      }
      *__error() = v59;
      goto LABEL_47;
    }
    string_for_id = (const char *)v86;
    if ((v87[1] & 0x10) != 0)
    {
      string_for_id = (const char *)db_get_string_for_id(v17, *v86);
      v37 = v85;
    }
    v39 = (const char *)v84;
    if ((v37[1] & 0x10) != 0)
      v39 = (const char *)db_get_string_for_id(v17, *v84);
    if (!string_for_id || !v39)
    {
      if (string_for_id)
      {
        if (v39)
          goto LABEL_32;
        v40 = *__error();
        v41 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
        {
          v42 = *v85;
          v43 = v85[1];
          *(_DWORD *)buf = v78;
          v91 = "_si_get_object_for_identifier_createParentDBO";
          v92 = 1024;
          v93 = 24073;
          v94 = 2048;
          v95 = v19;
          v96 = 2048;
          v97 = v19;
          v98 = 1024;
          *(_DWORD *)v99 = v42;
          *(_WORD *)&v99[4] = 1024;
          *(_DWORD *)&v99[6] = v43;
          v44 = v41;
          v45 = "%s:%d: Missing bundleId field, oid:0x%llx(%lld), type:%d, flags:0x%x";
          goto LABEL_40;
        }
      }
      else
      {
        v40 = *__error();
        v46 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          v57 = *v87;
          v58 = v87[1];
          *(_DWORD *)buf = v78;
          v91 = "_si_get_object_for_identifier_createParentDBO";
          v92 = 1024;
          v93 = 24071;
          v94 = 2048;
          v95 = v19;
          v96 = 2048;
          v97 = v19;
          v98 = 1024;
          *(_DWORD *)v99 = v57;
          *(_WORD *)&v99[4] = 1024;
          *(_DWORD *)&v99[6] = v58;
          v44 = v46;
          v45 = "%s:%d: Missing identifier field, oid:0x%llx(%lld), type:%d, flags:0x%x";
LABEL_40:
          _os_log_error_impl(&dword_1B8270000, v44, OS_LOG_TYPE_ERROR, v45, buf, 0x32u);
        }
      }
      *__error() = v40;
      goto LABEL_32;
    }
    if (!strcmp(string_for_id, v14) && !strcmp(v39, v13))
    {
      v67 = 0;
      goto LABEL_48;
    }
LABEL_32:
    v47 = v89;
    v48 = v89[10];
    if (v82)
    {
      v89[10] = v48 | 0x10;
      updated = db_update_obj(v17, (uint64_t)v47, 11);
      if (updated)
      {
        v50 = updated;
        v51 = v14;
        v52 = v13;
        v53 = a7;
        v54 = *__error();
        v55 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          v56 = v89[10];
          *(_DWORD *)buf = v78;
          v91 = "_si_get_object_for_identifier_createParentDBO";
          v92 = 1024;
          v93 = 24084;
          v94 = 2048;
          v95 = v19;
          v96 = 2048;
          v97 = v19;
          v98 = 2048;
          *(_QWORD *)v99 = v56;
          *(_WORD *)&v99[8] = 1024;
          *(_DWORD *)v100 = v50;
          _os_log_error_impl(&dword_1B8270000, v55, OS_LOG_TYPE_ERROR, "%s:%d: Failed to update the dbo for oid:0x%llx(%lld), flags:0x%lx, rc:%d", buf, 0x36u);
        }
        *__error() = v54;
        a7 = v53;
        v13 = v52;
        v14 = v51;
        v21 = v81;
      }
    }
    else if ((v48 & 0x10) == 0)
    {
      v65 = v79;
      if (v79)
        *v79 = 0;
      v64 = v80;
      if (v80)
        *v80 = 0;
      free(v47);
      v89 = 0;
      v67 = 2;
      goto LABEL_49;
    }
    free(v89);
    v89 = 0;
    ++v19;
  }
  v67 = obj_callback;
  v89 = 0;
  v64 = v80;
  v65 = v79;
  if (v79)
    goto LABEL_50;
LABEL_51:
  if (v64)
  {
    *v64 = v89;
  }
  else if (v89)
  {
    free(v89);
  }
  return v67;
}

unint64_t ContentIndexDocSetHash(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  unsigned int v16;

  v1 = *(unsigned int *)(a1 + 48);
  v2 = v1 ^ ((unint64_t)*(unsigned __int8 *)(a1 + 33) << 10) ^ (16 * *(_DWORD *)(a1 + 52));
  if (v1 < 4 || (_DWORD)v1 == 8)
    return v2 ^ *(_QWORD *)(a1 + 64);
  v5 = *(_DWORD *)(a1 + 96);
  v6 = (*(unsigned __int8 *)(a1 + 34) << 16) ^ (v5 << 11) ^ v2 ^ (uint64_t)*(float *)(a1 + 20);
  v7 = 8 * v5;
  v8 = v6 ^ 0x971E137B;
  if (((8 * v5) | 3u) >= 7)
  {
    v9 = *(_QWORD *)(a1 + 72) + v7;
    v10 = -(v7 >> 2);
    v11 = -1789642873;
    v12 = 718793509;
    do
    {
      v11 = 5 * v11 + 2071795100;
      v12 = 5 * v12 + 1808688022;
      HIDWORD(v13) = v11 * *(_DWORD *)(v9 + 4 * v10);
      LODWORD(v13) = HIDWORD(v13);
      v14 = (v13 >> 21) * v12;
      HIDWORD(v13) = v8;
      LODWORD(v13) = v8;
      v8 = v14 ^ (5 * (v13 >> 19) + 1390208809);
    }
    while (!__CFADD__(v10++, 1));
  }
  v16 = (-2048144789 * (v8 ^ v7)) ^ ((-2048144789 * (v8 ^ v7)) >> 13);
  return v6 ^ ((-1028477387 * v16) >> 16) ^ (-1028477387 * v16);
}

void _si_querypipe_addoids(uint64_t a1, int a2, const void *a3, uint64_t a4, const void *a5, int a6, uint64_t a7)
{
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  uint8_t buf[4];
  uint64_t VectorCount;
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (*MEMORY[0x1E0C85AD8] <= 0x3FuLL)
    ++sTotal;
  v14 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x40uLL, 0x31F9A007uLL);
  if (!v14)
    _log_fault_for_malloc_failure();
  v15 = a1;
  do
  {
    v16 = v15;
    v15 = *(_QWORD *)(v15 + 80);
  }
  while (v15);
  v17 = *(_QWORD *)(v16 + 8);
  v14[1] = *(_OWORD *)(a1 + 48);
  *((_QWORD *)v14 + 1) = si_querypipe_copy_jobid(a1);
  if (*(_BYTE *)(a1 + 99))
  {
    if (a2)
    {
      *(_DWORD *)v14 = 7;
      *((_QWORD *)v14 + 4) = a3;
      *((_QWORD *)v14 + 5) = a5;
      *((_DWORD *)v14 + 14) = a2;
    }
    else
    {
      *(_DWORD *)v14 = 1;
      *((_QWORD *)v14 + 4) = a3;
      *((_QWORD *)v14 + 5) = a5;
    }
    if (*(_BYTE *)(a1 + 98))
      *((_QWORD *)v14 + 6) = a4;
    else
      *((_QWORD *)v14 + 6) = 0;
    if (dword_1EF19FC90 >= 5)
    {
      v18 = *__error();
      v19 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218496;
        VectorCount = _MDStoreOIDArrayGetVectorCount();
        v24 = 1024;
        v25 = a2;
        v26 = 2048;
        v27 = _MDStoreOIDArrayGetVectorCount() - a4;
        _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "Passing up %ld results for mode %d (removed %ld duplicates)", buf, 0x1Cu);
      }
      *__error() = v18;
      if (a6)
        goto LABEL_23;
      goto LABEL_27;
    }
    goto LABEL_22;
  }
  if (a3)
    CFRelease(a3);
  if (a5)
    CFRelease(a5);
  if (!*(_BYTE *)(a1 + 98))
  {
LABEL_22:
    if (a6)
      goto LABEL_23;
    goto LABEL_27;
  }
  *(_DWORD *)v14 = 6;
  *((_QWORD *)v14 + 4) = a4;
  if (a6)
  {
LABEL_23:
    si_querypipe_remove_process(a1, a7, (void **)v14, 0);
    return;
  }
LABEL_27:
  if (!si_resultqueue_enqueue(v17, (int *)v14))
  {
    if (dword_1EF19FC90 >= 5)
    {
      v20 = *__error();
      v21 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B8270000, v21, OS_LOG_TYPE_DEFAULT, "Attempt to append to queue failed. Releasing result batch", buf, 2u);
      }
      *__error() = v20;
    }
    SIResultBatchFree((void **)v14);
  }
}

void userinteractive_query_runLoop(uint64_t a1, void (*a2)(uint64_t, _QWORD), uint64_t a3)
{
  pthread_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  void *v13;
  uint64_t v14;
  pthread_t v15;

  v6 = pthread_self();
  v7 = *(NSObject **)(a1 + 32);
  v8 = MEMORY[0x1E0C809B0];
  v10 = MEMORY[0x1E0C809B0];
  v11 = 0x40000000;
  v12 = __si_scheduler_set_thread_block_invoke;
  v13 = &__block_descriptor_tmp_29_1050;
  v14 = a1;
  v15 = v6;
  dispatch_sync(v7, &v10);
  a2(a3, 0);
  v9 = *(NSObject **)(a1 + 32);
  v10 = v8;
  v11 = 0x40000000;
  v12 = __si_scheduler_set_thread_block_invoke;
  v13 = &__block_descriptor_tmp_29_1050;
  v14 = a1;
  v15 = 0;
  dispatch_sync(v9, &v10);
}

void executeSearchCtx_Start(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int v5;
  NSObject *v6;
  os_log_type_t v7;
  double Current;
  double v9;
  int v10;
  uint64_t v11;
  CFAbsoluteTime v12;
  int v13;
  NSObject *v14;
  int v15;
  NSObject *v16;
  qos_class_t v17;
  int v18;
  NSObject *v19;
  CFAbsoluteTime v20;
  qos_class_t v21;
  int v22;
  NSObject *v23;
  CFAbsoluteTime v24;
  qos_class_t v25;
  double v26;
  uint8_t buf[4];
  CFAbsoluteTime v28;
  __int16 v29;
  qos_class_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (dword_1EF19FCC0 >= 5)
  {
    v13 = *__error();
    v14 = _SILogForLogForCategory(13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v28) = qos_class_self();
      _os_log_impl(&dword_1B8270000, v14, OS_LOG_TYPE_DEFAULT, "QOS executeSearchCtx_Start: %d", buf, 8u);
    }
    *__error() = v13;
  }
  v4 = *(uint64_t **)a1;
  if ((_DWORD)a2)
  {
    v5 = *__error();
    v6 = _SILogForLogForCategory(1);
    v7 = 2 * (dword_1EF19FC90 < 4);
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v6, v7, "Search canceled while waiting on scheduler\n", buf, 2u);
    }
    *__error() = v5;
    si_querypipe_remove_process(v4[13], v4[1], 0, 1);
    search_ctx_destroy((_QWORD *)a1, a2);
    return;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v9 = Current - *(double *)(a1 + 8);
  *(double *)(v4[1] + 448) = *(double *)(v4[1] + 448) + v9;
  if (dword_1EF19FC90 >= 5)
  {
    v26 = v9;
    v15 = *__error();
    v16 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = qos_class_self();
      *(_DWORD *)buf = 134218240;
      v28 = v26;
      v29 = 1024;
      v30 = v17;
      _os_log_impl(&dword_1B8270000, v16, OS_LOG_TYPE_DEFAULT, "Search waited %f seconds on the scheduler at qos 0x%x\n", buf, 0x12u);
    }
    *__error() = v15;
  }
  *(_QWORD *)(a1 + 16) = "executeSearchCtx_Start";
  v10 = (*(uint64_t (**)(uint64_t *))(*v4 + 40))(v4);
  v11 = v4[1];
  v12 = CFAbsoluteTimeGetCurrent();
  siquery_addactivetime(v11, v12 - Current);
  if (dword_1EF19FC90 >= 5)
  {
    v18 = *__error();
    v19 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v20 = CFAbsoluteTimeGetCurrent() - Current;
      v21 = qos_class_self();
      *(_DWORD *)buf = 134218240;
      v28 = v20;
      v29 = 1024;
      v30 = v21;
      _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "Search was active (preIterate) for %f seconds on the scheduler at qos 0x%x\n", buf, 0x12u);
    }
    *__error() = v18;
    if (v10)
      goto LABEL_9;
  }
  else if (v10)
  {
LABEL_9:
    executeSearchContextCracked_2(*(_QWORD *)a1);
    goto LABEL_20;
  }
  si_querypipe_remove_process(v4[13], v4[1], 0, 0);
  search_ctx_destroy((_QWORD *)a1, 0);
LABEL_20:
  if (dword_1EF19FC90 >= 5)
  {
    v22 = *__error();
    v23 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = CFAbsoluteTimeGetCurrent() - Current;
      v25 = qos_class_self();
      *(_DWORD *)buf = 134218240;
      v28 = v24;
      v29 = 1024;
      v30 = v25;
      _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "Search was active for %f seconds on the scheduler at qos 0x%x\n", buf, 0x12u);
    }
    *__error() = v22;
  }
}

void queryGo(uint64_t *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  NSObject *v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  const char *v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    v4 = a1[2];
    if (!*(_BYTE *)(v4 + 96))
    {
      v5 = a1[2];
      do
      {
        v6 = v5;
        v5 = *(_QWORD *)(v5 + 80);
      }
      while (v5);
      if (!*(_BYTE *)(*(_QWORD *)(v6 + 8) + 12) && !*(_BYTE *)(v4 + 97))
      {
        v7 = *a1;
        v8 = *(NSObject **)(v7 + 8 * query_priority((_QWORD *)a1[1]) + 832);
        if (*(NSObject **)(a1[2] + 16) == v8)
        {
          v9 = *__error();
          v10 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            v17 = 136315394;
            v18 = "queryGo";
            v19 = 1024;
            v20 = 4193;
            _os_log_error_impl(&dword_1B8270000, v10, OS_LOG_TYPE_ERROR, "%s:%d: queryGo attempted to wait on already held semaphore", (uint8_t *)&v17, 0x12u);
          }
          *__error() = v9;
        }
        else
        {
          dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
          si_querypipe_set_semaphore(a1[2], v8);
        }
        _queryGoCracked(a1[1], *a1, 0, a1[2]);
      }
    }
  }
  si_querypipe_remove_process(a1[2], a1[1], 0, a2 != 0);
  v11 = a1[1];
  if ((*(_BYTE *)(v11 + 202) & 4) == 0)
    si_querypipe_remove_process(a1[2], v11, 0, a2 != 0);
  v12 = (const void *)a1[4];
  if (v12)
    CFRelease(v12);
  a1[4] = 0;
  v13 = a1[1];
  v14 = (unsigned int *)(v13 + 584);
  do
  {
    v15 = __ldaxr(v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v14));
  if (!v16)
    si_query_free(v13);
  si_querypipe_release(a1[2]);
  free(a1);
}

void si_querypipe_remove_process(uint64_t a1, uint64_t a2, void **a3, _BOOL4 a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  CFDictionaryRef v9;
  uint64_t v10;
  const __CFAllocator *v11;
  const __CFString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  xpc_object_t empty;
  const char *CStringPtr;
  void **v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _OWORD *v32;
  int v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, _QWORD);
  uint64_t v40;
  NSObject *v41;
  uint64_t value;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  CFNumberRef v57;
  CFNumberRef v58;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  CFNumberRef v62;
  CFNumberRef v63;
  CFNumberRef v64;
  CFNumberRef v65;
  CFNumberRef v66;
  CFNumberRef v67;
  CFNumberRef v68;
  CFNumberRef v69;
  CFNumberRef v70;
  CFNumberRef v71;
  CFNumberRef v72;
  CFNumberRef v73;
  CFNumberRef v74;
  uint64_t v76;
  double valuePtr;
  void *values[28];
  void *keys[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  const __CFString *v92;
  uint64_t v93;

  v6 = a1;
  v93 = *MEMORY[0x1E0C80C00];
  v7 = (unsigned int *)(a1 + 64);
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 - 1, v7));
  if (v8 == 1 || v8 == 2 && *(_BYTE *)(a1 + 100))
  {
    if ((*(_BYTE *)(a2 + 201) & 0x20) != 0)
    {
      v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v74 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, (const void *)(a2 + 416));
      v73 = CFNumberCreate(v11, kCFNumberDoubleType, (const void *)(a2 + 400));
      v72 = CFNumberCreate(v11, kCFNumberDoubleType, (const void *)(a2 + 392));
      v71 = CFNumberCreate(v11, kCFNumberDoubleType, (const void *)(a2 + 408));
      v70 = CFNumberCreate(v11, kCFNumberDoubleType, (const void *)(a2 + 552));
      v69 = CFNumberCreate(v11, kCFNumberDoubleType, (const void *)(a2 + 536));
      v68 = CFNumberCreate(v11, kCFNumberDoubleType, (const void *)(a2 + 528));
      v67 = CFNumberCreate(v11, kCFNumberDoubleType, (const void *)(a2 + 544));
      v66 = CFNumberCreate(v11, kCFNumberDoubleType, (const void *)(a2 + 368));
      valuePtr = CFAbsoluteTimeGetCurrent();
      v65 = CFNumberCreate(v11, kCFNumberDoubleType, &valuePtr);
      v64 = CFNumberCreate(v11, kCFNumberDoubleType, (const void *)(a2 + 376));
      v63 = CFNumberCreate(v11, kCFNumberLongType, (const void *)(a2 + 464));
      v62 = CFNumberCreate(v11, kCFNumberLongType, (const void *)(a2 + 472));
      v61 = CFNumberCreate(v11, kCFNumberLongType, (const void *)(a2 + 480));
      v60 = CFNumberCreate(v11, kCFNumberLongType, (const void *)(a2 + 488));
      v59 = CFNumberCreate(v11, kCFNumberLongType, (const void *)(a2 + 496));
      v58 = CFNumberCreate(v11, kCFNumberLongType, (const void *)(a2 + 504));
      v57 = CFNumberCreate(v11, kCFNumberLongType, (const void *)(a2 + 512));
      v56 = CFNumberCreate(v11, kCFNumberLongType, (const void *)(a2 + 520));
      v55 = CFNumberCreate(v11, kCFNumberLongLongType, (const void *)(a2 + 608));
      v54 = CFNumberCreate(v11, kCFNumberLongType, (const void *)(a2 + 152));
      v53 = CFNumberCreate(v11, kCFNumberIntType, (const void *)(a2 + 156));
      v76 = qos_class_self();
      v52 = CFNumberCreate(v11, kCFNumberLongType, &v76);
      v51 = CFNumberCreate(v11, kCFNumberDoubleType, (const void *)(a2 + 448));
      v50 = CFNumberCreate(v11, kCFNumberDoubleType, (const void *)(a2 + 456));
      v49 = CFNumberCreate(v11, kCFNumberDoubleType, (const void *)(a2 + 384));
      v12 = *(const __CFString **)(a2 + 656);
      v13 = v76;
      v14 = *(unsigned int *)(a2 + 152);
      v15 = *(int *)(a2 + 156);
      v16 = valuePtr - *(double *)(a2 + 368);
      v17 = *(double *)(a2 + 392);
      v18 = valuePtr - *(double *)(a2 + 384);
      v19 = *(double *)(a2 + 448);
      v20 = *(double *)(a2 + 456);
      v21 = *(double *)(a2 + 408);
      v22 = *(double *)(a2 + 416);
      v23 = *(double *)(a2 + 400);
      v24 = *(_QWORD *)(a2 + 504);
      value = *(_QWORD *)(a2 + 496);
      v43 = *(_QWORD *)(a2 + 512);
      v44 = *(_QWORD *)(a2 + 480);
      v45 = *(_QWORD *)(a2 + 488);
      v46 = *(_QWORD *)(a2 + 464);
      v47 = *(_QWORD *)(a2 + 472);
      v48 = *(_QWORD *)(a2 + 520);
      empty = xpc_dictionary_create_empty();
      if (v12)
      {
        CStringPtr = CFStringGetCStringPtr(v12, 0x8000100u);
        xpc_dictionary_set_string(empty, "client", CStringPtr);
      }
      xpc_dictionary_set_uint64(empty, "kind", v14);
      xpc_dictionary_set_uint64(empty, "qosLevel", v13);
      xpc_dictionary_set_uint64(empty, "protectionClass", v15);
      xpc_dictionary_set_double(empty, "totalTime", v16);
      xpc_dictionary_set_double(empty, "totalExecutionTime", v18);
      xpc_dictionary_set_double(empty, "activeTime", v20);
      xpc_dictionary_set_double(empty, "waitTime", v19);
      xpc_dictionary_set_double(empty, "setupTime", v17);
      xpc_dictionary_set_double(empty, "attributeTime", v22);
      xpc_dictionary_set_double(empty, "termTime", v23);
      xpc_dictionary_set_double(empty, "postTime", v21);
      xpc_dictionary_set_uint64(empty, "matchesCollected", v24);
      xpc_dictionary_set_uint64(empty, "matchesDiscarded", value);
      xpc_dictionary_set_uint64(empty, "matchesChecked", v43);
      xpc_dictionary_set_uint64(empty, "sdbIteratorCount", v44);
      xpc_dictionary_set_uint64(empty, "sdbObjectCount", v45);
      xpc_dictionary_set_uint64(empty, "sdbPageCount", v46);
      xpc_dictionary_set_uint64(empty, "sdbCacheHits", v47);
      xpc_dictionary_set_uint64(empty, "plistObjects", v48);
      xpc_dictionary_set_BOOL(empty, "canceled", a4);
      analytics_send_event();
      xpc_release(empty);
      v89 = xmmword_1E6E350E8;
      v90 = *(_OWORD *)&off_1E6E350F8;
      v91 = xmmword_1E6E35108;
      v92 = CFSTR("kSICanceled");
      v85 = xmmword_1E6E350A8;
      v86 = *(_OWORD *)&off_1E6E350B8;
      v87 = xmmword_1E6E350C8;
      v88 = *(_OWORD *)&off_1E6E350D8;
      v81 = xmmword_1E6E35068;
      v82 = *(_OWORD *)&off_1E6E35078;
      v83 = xmmword_1E6E35088;
      v84 = *(_OWORD *)&off_1E6E35098;
      *(_OWORD *)keys = xmmword_1E6E35048;
      v80 = *(_OWORD *)&off_1E6E35058;
      values[0] = v72;
      values[1] = v73;
      values[2] = v71;
      values[3] = v74;
      values[4] = v68;
      values[5] = v69;
      values[6] = v67;
      values[7] = v55;
      values[8] = v54;
      values[9] = v53;
      values[10] = v70;
      values[11] = v66;
      values[12] = v65;
      values[13] = v64;
      values[14] = v63;
      values[15] = v61;
      values[16] = v60;
      values[17] = v62;
      values[18] = v52;
      values[19] = v51;
      values[20] = v50;
      values[21] = v58;
      values[22] = v57;
      values[23] = v59;
      values[24] = v56;
      values[25] = v49;
      v27 = (void **)MEMORY[0x1E0C9AE50];
      if (!a4)
        v27 = (void **)MEMORY[0x1E0C9AE40];
      values[26] = *v27;
      v9 = CFDictionaryCreate(v11, (const void **)keys, (const void **)values, 27, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      for (i = 0; i != 27; ++i)
        CFRelease(values[i]);
    }
    else
    {
      v9 = 0;
    }
    if (*(_QWORD *)(v6 + 80))
    {
      if (a3)
      {
        v29 = v6;
        do
        {
          v30 = v29;
          v29 = *(_QWORD *)(v29 + 80);
        }
        while (v29);
        if (!si_resultqueue_enqueue(*(_QWORD *)(v30 + 8), (int *)a3))
          SIResultBatchFree(a3);
      }
      if (v9)
        CFRelease(v9);
      goto LABEL_41;
    }
    *(_OWORD *)keys = *(_OWORD *)(v6 + 48);
    v31 = *(uint64_t **)(v6 + 8);
    v32 = malloc_type_calloc(1uLL, 0x40uLL, 0x10720403C4CCC75uLL);
    v33 = *__error();
    v34 = _SILogForLogForCategory(1);
    v35 = 2 * (dword_1EF19FC90 < 4);
    if (os_log_type_enabled(v34, v35))
    {
      LOWORD(values[0]) = 0;
      _os_log_impl(&dword_1B8270000, v34, v35, "Passing up out of results", (uint8_t *)values, 2u);
    }
    *__error() = v33;
    v32[1] = *(_OWORD *)keys;
    v36 = 4;
    if (v8 == 2)
    {
      if (*(_BYTE *)(v6 + 100))
        v36 = 5;
      else
        v36 = 4;
    }
    *(_DWORD *)v32 = v36;
    *((_QWORD *)v32 + 1) = si_querypipe_copy_jobid(v6);
    *((_QWORD *)v32 + 5) = v9;
    if (a3)
    {
      v37 = countForBatch((int *)a3);
      v38 = countForBatch((int *)v32);
      pthread_mutex_lock((pthread_mutex_t *)(*v31 + 8));
      if (!*((_BYTE *)v31 + 12))
      {
        v31[9] += v38 + v37;
        si_enqueue_locked(*v31, (uint64_t)a3);
        si_enqueue_locked(*v31, (uint64_t)v32);
        v39 = (void (*)(uint64_t, _QWORD))v31[6];
        if (v39 && !*((_DWORD *)v31 + 21))
        {
          v40 = v31[7];
          v31[6] = 0;
          v31[7] = 0;
          pthread_mutex_unlock((pthread_mutex_t *)(*v31 + 8));
          v39(v40, 0);
        }
        else
        {
          pthread_mutex_unlock((pthread_mutex_t *)(*v31 + 8));
        }
        goto LABEL_41;
      }
      pthread_mutex_unlock((pthread_mutex_t *)(*v31 + 8));
      SIResultBatchFree((void **)v32);
      v32 = a3;
    }
    else if (si_resultqueue_enqueue((uint64_t)v31, (int *)v32))
    {
LABEL_41:
      v41 = *(NSObject **)(v6 + 16);
      if (v41)
      {
        dispatch_semaphore_signal(v41);
        dispatch_release(*(dispatch_object_t *)(v6 + 16));
        *(_QWORD *)(v6 + 16) = 0;
      }
      *(_BYTE *)(v6 + 97) = 1;
      return;
    }
    SIResultBatchFree((void **)v32);
    goto LABEL_41;
  }
  if (a3)
  {
    do
    {
      v10 = v6;
      v6 = *(_QWORD *)(v6 + 80);
    }
    while (v6);
    if (!si_resultqueue_enqueue(*(_QWORD *)(v10 + 8), (int *)a3))
      SIResultBatchFree(a3);
  }
}

void si_querypipe_set_semaphore(uint64_t a1, dispatch_object_t object)
{
  NSObject *v4;

  if (object)
    dispatch_retain(object);
  v4 = *(NSObject **)(a1 + 16);
  if (v4)
  {
    dispatch_semaphore_signal(v4);
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
  }
  *(_QWORD *)(a1 + 16) = object;
}

void _queryGoCracked(uint64_t a1, uint64_t a2, CFArrayRef cf, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  int v12;
  BOOL v13;
  const char *v14;
  const __CFAllocator *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  unint64_t *v22;
  _QWORD *query_node_with_ann;
  uint64_t j;
  _QWORD *v26;
  int *v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  void *v32;
  int **v33;
  int *v34;
  int v35;
  NSObject *v36;
  int v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  const __CFString *Length;
  int v43;
  NSObject *v44;
  int v45;
  NSObject *v46;
  uint8_t buf[16];
  _QWORD v48[6];
  void *values[3];
  char v50;
  _OWORD v51[2];
  uint64_t v52;
  _BYTE block[24];
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (dword_1EF19FC90 >= 5)
  {
    v37 = *__error();
    v38 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      v39 = *(_QWORD *)(a1 + 608);
      v40 = *(_QWORD *)(a1 + 616);
      v41 = *(_DWORD *)(a2 + 60) & 1;
      Length = *(const __CFString **)(a1 + 32);
      if (Length)
        Length = (const __CFString *)CFStringGetLength(Length);
      *(_DWORD *)block = 134218752;
      *(_QWORD *)&block[4] = v39;
      *(_WORD *)&block[12] = 2048;
      *(_QWORD *)&block[14] = v40;
      *(_WORD *)&block[22] = 1024;
      LODWORD(v54) = v41;
      WORD2(v54) = 2048;
      *(_QWORD *)((char *)&v54 + 6) = Length;
      _os_log_impl(&dword_1B8270000, v38, OS_LOG_TYPE_DEFAULT, "Start execution: qid=(%lld,%lld), pc=%d, uql=%ld", block, 0x26u);
    }
    *__error() = v37;
    if (a1)
      goto LABEL_3;
  }
  else if (a1)
  {
LABEL_3:
    *(CFAbsoluteTime *)(a1 + 384) = CFAbsoluteTimeGetCurrent();
  }
  if (*(_BYTE *)(a4 + 96))
    return;
  v8 = a4;
  do
  {
    v9 = v8;
    v8 = *(_QWORD *)(v8 + 80);
  }
  while (v8);
  if (*(_BYTE *)(*(_QWORD *)(v9 + 8) + 12) || *(_BYTE *)(a4 + 97))
    return;
  if (cf || (cf = *(CFArrayRef *)(a1 + 176)) != 0 || (cf = *(CFArrayRef *)(a1 + 184)) != 0)
  {
    CFRetain(cf);
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  v52 = 0;
  memset(v51, 0, sizeof(v51));
  si_opt_cache_init((CFMutableSetRef *)v51, *(_QWORD *)(a4 + 88));
  if (!*(_BYTE *)(a1 + 688))
    si_query_prepare_lifting(a2, a1, (uint64_t)v51);
  si_opt_cache_destroy((uint64_t)v51);
  if ((*(_BYTE *)(a1 + 201) & 2) != 0)
  {
    if ((v10 & 1) == 0)
    {
      if (CFArrayGetCount(cf))
        goto LABEL_28;
      CFRelease(cf);
    }
    bzero(block, 0x400uLL);
    v11 = *(_DWORD *)(a2 + 48);
    if (v11 == -1)
    {
      v14 = "/";
    }
    else
    {
      v12 = fcntl(v11, 50, block);
      if (block[0])
        v13 = v12 < 0;
      else
        v13 = 1;
      if (v13)
        v14 = 0;
      else
        v14 = block;
    }
    v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    values[0] = (void *)CFStringCreateWithFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v14);
    cf = CFArrayCreate(v15, (const void **)values, 1, MEMORY[0x1E0C9B378]);
    CFRelease(values[0]);
  }
LABEL_28:
  v16 = *(_QWORD *)(a1 + 200);
  if ((v16 & 0x1000000) == 0 && (*(_BYTE *)(a2 + 828) & 0x28) != 0)
    *(_QWORD *)(a1 + 200) = v16 | 0x1000000;
  v17 = *(_QWORD **)(a1 + 72);
  if (v17)
  {
    if (!cf)
      goto LABEL_35;
    if (CFArrayGetCount(cf))
    {
      v17 = *(_QWORD **)(a1 + 72);
LABEL_35:
      values[0] = 0;
      values[1] = values;
      values[2] = (void *)0x2000000000;
      v50 = 0;
      v18 = MEMORY[0x1E0C809B0];
      v48[0] = MEMORY[0x1E0C809B0];
      v48[1] = 0x40000000;
      v48[2] = ___queryGoCracked_block_invoke;
      v48[3] = &unk_1E6E35518;
      v48[4] = values;
      v48[5] = a2;
      *(_QWORD *)block = MEMORY[0x1E0C809B0];
      *(_QWORD *)&block[8] = 0x40000000;
      *(_QWORD *)&block[16] = __db_query_tree_apply_block_block_invoke;
      *(_QWORD *)&v54 = &unk_1E6E377F8;
      *((_QWORD *)&v54 + 1) = v48;
      *(_QWORD *)(a1 + 72) = db_query_tree_apply_block_with_meta(v17, (uint64_t)block, (uint64_t)&__block_literal_global_333);
      v19 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)block = v18;
      *(_QWORD *)&block[8] = 0x40000000;
      *(_QWORD *)&block[16] = __query_once_block_invoke;
      *(_QWORD *)&v54 = &__block_descriptor_tmp_418;
      *((_QWORD *)&v54 + 1) = a1;
      if (v19 != -1)
        dispatch_once((dispatch_once_t *)(a1 + 144), block);
      v20 = *(_QWORD *)(a1 + 200);
      if (*(_DWORD *)(a1 + 152) == 1 && (v20 & 0x80) != 0)
      {
        if ((_getByGroupGroupingQueries_initialized & 1) == 0)
        {
          for (i = 0; i != 17; ++i)
          {
            v22 = &grouping_queryByGroupNodes[i];
            if (!*v22)
            {
              query_node_with_ann = db_make_query_node_with_ann(grouping_queryByGroupStrings[i], 0);
              while (!__ldxr(v22))
              {
                if (!__stxr((unint64_t)query_node_with_ann, v22))
                  goto LABEL_47;
              }
              __clrex();
              db_free_query_node(query_node_with_ann);
            }
LABEL_47:
            ;
          }
          __dmb(0xBu);
          _getByGroupGroupingQueries_initialized = 1;
        }
        for (j = 0; j != 17; ++j)
        {
          v26 = (_QWORD *)makeAndNode(grouping_queryByGroupNodes[j], *(_QWORD *)(a1 + 72), 0, 0);
          v27 = (int *)translateSDBQuery((uint64_t)v26);
          *(_QWORD *)block = 0;
          if (cf)
            v28 = CFArrayGetCount(cf) != 0;
          else
            v28 = 0;
          v29 = rewriteForSources((uint64_t)v27, (uint64_t **)block, v28);
          siquerynode_release(v27);
          v30 = a2;
          v31 = doExecuteCracked(a1, a2, cf, *(_QWORD *)(a1 + 200) & 0xFFFFFFFFFFFFBFFFLL, *(uint64_t *)block, v29, *(_QWORD *)(a1 + 16), a4);
          if (dword_1EF19FC90 >= 5)
          {
            v35 = *__error();
            v36 = _SILogForLogForCategory(1);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1B8270000, v36, OS_LOG_TYPE_DEFAULT, "Started normal (grouping) query threadlet.", buf, 2u);
            }
            *__error() = v35;
          }
          v32 = *(void **)block;
          if (v29 >= 1)
          {
            v33 = (int **)(*(_QWORD *)block + 8);
            do
            {
              v34 = *(v33 - 1);
              if (v34)
                siquerynode_release(v34);
              if (*v33)
                siquerynode_release(*v33);
              v33 += 2;
              --v29;
            }
            while (v29);
          }
          free(v32);
          db_free_query_node(v26);
          a2 = v30;
        }
      }
      else
      {
        v31 = doExecuteCracked(a1, a2, cf, v20, *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 16), a4);
        if (dword_1EF19FC90 >= 5)
        {
          v45 = *__error();
          v46 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)block = 0;
            _os_log_impl(&dword_1B8270000, v46, OS_LOG_TYPE_DEFAULT, "Started normal query threadlet.", block, 2u);
          }
          *__error() = v45;
        }
      }
      _Block_object_dispose(values, 8);
      if (v31 == 1)
      {
LABEL_70:
        if (!cf)
          return;
        goto LABEL_71;
      }
    }
  }
  if (dword_1EF19FC90 < 5)
    goto LABEL_70;
  v43 = *__error();
  v44 = _SILogForLogForCategory(1);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)block = 134217984;
    *(_QWORD *)&block[4] = a2;
    _os_log_impl(&dword_1B8270000, v44, OS_LOG_TYPE_DEFAULT, "Could not execute query for %p (!)", block, 0xCu);
  }
  *__error() = v43;
  if (cf)
LABEL_71:
    CFRelease(cf);
}

uint64_t SISearchCtx_METADATA::preIterate(SISearchCtx_METADATA *this)
{
  SISearchCtx *v2;
  double Current;
  unsigned int *v4;
  NSObject *Log;
  os_signpost_id_t v6;
  uint64_t v7;
  CFIndex Length;
  const __CFArray *v9;
  CFIndex Count;
  size_t v11;
  CFIndex v12;
  int v13;
  const __CFString *ValueAtIndex;
  CFIndex v15;
  uint64_t v16;
  __CFArray *Mutable;
  CFStringRef v18;
  BOOL *v19;
  uint64_t v20;
  const __CFString *v21;
  int HasPrefix;
  BOOL v23;
  const __CFArray *v24;
  CFIndex v25;
  CFIndex v26;
  uint64_t v27;
  const __CFString *v28;
  int v29;
  BOOL v30;
  NSObject *v31;
  uint64_t v32;
  qos_class_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  const __CFArray *v37;
  CFIndex v38;
  CFIndex v39;
  CFIndex i;
  const void *v41;
  const __CFNumber *Value;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned int v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  int has_ann;
  unint64_t v70;
  BOOL v71;
  _QWORD *v72;
  uint64_t tree_apply_block_with_meta;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  int v79;
  char v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  int v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  char v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  BOOL v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  NSObject *v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _OWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  unsigned int v134;
  _OWORD *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  int v139;
  const __CFArray *v140;
  const void *v141;
  CFTypeID v142;
  uint64_t v143;
  const __CFDictionary *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t j;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  NSObject *v153;
  os_signpost_id_t v154;
  NSObject *v155;
  uint64_t v156;
  qos_class_t v157;
  char *v159;
  char *v160;
  const char *v161;
  uint64_t v162;
  int v163;
  NSObject *v164;
  char *v165;
  const char *v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  char *v170;
  __CFArray *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  _BYTE buf[24];
  void *v178;
  void *v179;
  uint64_t v180;
  CFRange v181;

  v180 = *MEMORY[0x1E0C80C00];
  Current = CFAbsoluteTimeGetCurrent();
  if (dword_1EF19FCC0 >= 5)
  {
    v163 = *__error();
    v164 = _SILogForLogForCategory(13);
    if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = qos_class_self();
      _os_log_impl(&dword_1B8270000, v164, OS_LOG_TYPE_DEFAULT, "at qos 0x%x", buf, 8u);
    }
    *__error() = v163;
  }
  SISearchCtx::common_preIterate((CFAbsoluteTime *)this, v2);
  if (!*(_QWORD *)(*((_QWORD *)this + 3) + 1184))
  {
    v165 = __si_assert_copy_extra_268();
    v160 = v165;
    v166 = "";
    if (v165)
      v166 = v165;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 4770, "_store->store", v166);
LABEL_188:
    free(v160);
    if (__valid_fs(-1))
      v162 = 2989;
    else
      v162 = 3072;
    *(_DWORD *)v162 = -559038737;
    abort();
  }
  v4 = si_querypipe_copy_jobid(*((_QWORD *)this + 13));
  *((_QWORD *)this + 113) = v4;
  if (v4)
    si_release_qid((uint64_t)v4);
  kdebug_trace();
  Log = _MDPerf_QueryLog();
  v6 = *((_QWORD *)this + 1);
  if (v6 + 1 >= 2)
  {
    v31 = Log;
    if (os_signpost_enabled(Log))
    {
      v32 = *(_QWORD *)(v6 + 608);
      v33 = qos_class_self();
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v32;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v33;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v31, OS_SIGNPOST_INTERVAL_BEGIN, v6, "Preiterate", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x", buf, 0x12u);
    }
  }
  v7 = *((_QWORD *)this + 3);
  Length = CFStringGetLength(CFSTR("kMDQueryResultMatchingArrayIndexes."));
  v9 = (const __CFArray *)*((_QWORD *)this + 7);
  if (v9)
  {
    Count = CFArrayGetCount(v9);
    MEMORY[0x1E0C80A78](Count);
    v170 = (char *)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v170, v11);
    if (Count > 0)
    {
      v12 = 0;
      v13 = 0;
      v171 = 0;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 7), v12);
        if (CFStringHasPrefix(ValueAtIndex, CFSTR("kMDQueryResultMatchingArrayIndexes.")))
        {
          v15 = CFStringGetLength(ValueAtIndex) - Length;
          if (v15 >= 2)
          {
            v16 = v7;
            Mutable = v171;
            if (!v171)
              Mutable = CFArrayCreateMutable((CFAllocatorRef)kCIQueryZoneAllocator, 0, MEMORY[0x1E0C9B378]);
            v181.location = Length;
            v181.length = v15;
            v18 = CFStringCreateWithSubstring((CFAllocatorRef)kCIQueryZoneAllocator, ValueAtIndex, v181);
            *(_DWORD *)&v170[4 * v13++] = v12;
            v171 = Mutable;
            CFArrayAppendValue(Mutable, v18);
            CFRelease(v18);
            v7 = v16;
          }
        }
        ++v12;
      }
      while (Count != v12);
      v19 = (BOOL *)this + 645;
      if (!*((_BYTE *)this + 645))
      {
        v20 = 1;
        while (1)
        {
          v21 = (const __CFString *)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 7), v20 - 1);
          if (CFStringHasPrefix(v21, CFSTR("kMDItemFS")))
            break;
          HasPrefix = CFStringHasPrefix(v21, CFSTR("_kMDItemFS"));
          *v19 = HasPrefix != 0;
          if (HasPrefix)
            v23 = 1;
          else
            v23 = Count <= v20;
          ++v20;
          if (v23)
            goto LABEL_26;
        }
        *v19 = 1;
      }
      goto LABEL_26;
    }
  }
  else
  {
    MEMORY[0x1E0C80A78](0);
    v170 = (char *)&v167;
  }
  v171 = 0;
  v19 = (BOOL *)this + 645;
LABEL_26:
  v24 = (const __CFArray *)*((_QWORD *)this + 8);
  if (v24)
  {
    v25 = CFArrayGetCount(v24);
    if (!*v19)
    {
      v26 = v25;
      if (v25 >= 1)
      {
        v27 = 1;
        while (1)
        {
          v28 = (const __CFString *)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 8), v27 - 1);
          if (CFStringHasPrefix(v28, CFSTR("kMDItemFS")))
            break;
          v29 = CFStringHasPrefix(v28, CFSTR("_kMDItemFS"));
          *v19 = v29 != 0;
          if (v29)
            v30 = 1;
          else
            v30 = v26 <= v27;
          ++v27;
          if (v30)
            goto LABEL_40;
        }
        *v19 = 1;
      }
    }
  }
LABEL_40:
  v34 = *((_QWORD *)this + 1);
  v35 = *(_QWORD *)(v34 + 288);
  v36 = *(_QWORD **)(v34 + 272);
  v173 = *(_QWORD *)(v34 + 264);
  if (v36)
  {
    v37 = *(const __CFArray **)(v34 + 680);
    if (v37)
    {
      v38 = CFArrayGetCount(*(CFArrayRef *)(v34 + 680));
      if (v38 >= 1)
      {
        v39 = v38;
        for (i = 0; i != v39; ++i)
        {
          v41 = CFArrayGetValueAtIndex(v37, i);
          os_unfair_lock_lock((os_unfair_lock_t)&group_assignment_lock);
          Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 2088), v41);
          os_unfair_lock_unlock((os_unfair_lock_t)&group_assignment_lock);
          if (Value)
          {
            buf[0] = 0;
            CFNumberGetValue(Value, kCFNumberCharType, buf);
            if (buf[0])
              *(_QWORD *)((char *)this + (((unint64_t)buf[0] >> 3) & 0x18) + 1064) |= 1 << buf[0];
          }
        }
      }
    }
  }
  v43 = *(_QWORD **)(*((_QWORD *)this + 1) + 72);
  if (v43 && db_query_has_ann(v43))
  {
    v44 = 1;
    *((_BYTE *)this + 1032) = 1;
  }
  else
  {
    v44 = 0;
  }
  v176 = v44;
  if (!v35)
  {
    v52 = *((_QWORD *)this + 29);
    if (v36)
      v53 = 0;
    else
      v53 = v52 == 0;
    if (!v53)
      *((_QWORD *)this + 105) = malloc_type_realloc(*((void **)this + 105), 48 * (v52 + *((unsigned int *)this + 208)) + 48, 0x1020040081E4708uLL);
    goto LABEL_147;
  }
  *((_QWORD *)this + 120) = v35;
  v45 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * v35, 0x6085D6BuLL);
  if (!v45)
    _log_fault_for_malloc_failure();
  *((_QWORD *)this + 121) = v45;
  v46 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * v35, 0x6085D6BuLL);
  v47 = v173;
  if (!v46)
    _log_fault_for_malloc_failure();
  *((_QWORD *)this + 122) = v46;
  if (v35 < 1)
  {
    v48 = 0;
  }
  else
  {
    v48 = 0;
    v49 = (uint64_t *)(v47 + 8);
    v50 = v35;
    do
    {
      v51 = *v49;
      v49 += 3;
      v48 += v51;
      --v50;
    }
    while (v50);
  }
  if (v36)
    ++v48;
  v54 = v48 + *((unsigned int *)this + 208) + *((_QWORD *)this + 29);
  v55 = (char *)malloc_type_realloc(*((void **)this + 105), 48 * v54, 0x1020040081E4708uLL);
  *((_QWORD *)this + 105) = v55;
  bzero(v55 + 48, 48 * v54 - 48);
  v56 = 0x7FFFFFFFFFFFFFFFLL;
  if (v35 < 1)
  {
    v58 = 0;
    v76 = -1;
    v77 = -1;
    goto LABEL_96;
  }
  v168 = v36;
  v169 = 0x7FFFFFFFFFFFFFFFLL;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v172 = v35;
  do
  {
    v175 = v58;
    v60 = v47 + 24 * v57;
    v61 = *(_QWORD *)(v60 + 8);
    v62 = *(_QWORD *)(v60 + 16);
    v63 = (uint64_t *)(v60 + 8);
    v174 = v62;
    *(_QWORD *)(*((_QWORD *)this + 121) + 8 * v57) = v61;
    *(_QWORD *)(*((_QWORD *)this + 122) + 8 * v57) = v63[1];
    if (*v63 >= 1)
    {
      v64 = 0;
      v65 = *((_DWORD *)this + 208);
      v66 = (_QWORD *)(v47 + 24 * v57);
      while (1)
      {
        if (v54 < v65)
        {
          v159 = __si_assert_copy_extra_268();
          v160 = v159;
          v161 = "";
          if (v159)
            v161 = v159;
          __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 4943, "nodeSize>=nodeCount", v161);
          goto LABEL_188;
        }
        v67 = *(_QWORD *)(*v66 + 8 * v64);
        if (v67)
        {
          if ((*(_WORD *)(v67 + 48) & 1) == 0 || v59 > 4)
          {
            v68 = v59;
LABEL_81:
            has_ann = db_query_has_ann((_QWORD *)v67);
            v70 = v176;
            if (has_ann)
              v71 = v176 > 2;
            else
              v71 = 1;
            if (!v71)
            {
              *((_BYTE *)this + v176 + 1032) = *((_BYTE *)this + 832) + 1;
              v176 = v70 + 1;
            }
            goto LABEL_86;
          }
          v68 = v59 + 1;
          *((_BYTE *)this + v59 + 984) = v65;
          v67 = *(_QWORD *)(*v66 + 8 * v64);
          if (v67)
            goto LABEL_81;
        }
        else
        {
          v68 = v59;
        }
LABEL_86:
        v72 = *(_QWORD **)(*v66 + 8 * v64);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
        v178 = &unk_1E6E377F8;
        v179 = &__block_literal_global_17_10736;
        tree_apply_block_with_meta = db_query_tree_apply_block_with_meta(v72, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
        v74 = *((_QWORD *)this + 105);
        v75 = *((_DWORD *)this + 208);
        v65 = v75 + 1;
        *((_DWORD *)this + 208) = v75 + 1;
        *(_QWORD *)(v74 + 48 * v75) = tree_apply_block_with_meta;
        ++v64;
        v59 = v68;
        if (v64 >= *v63)
          goto LABEL_89;
      }
    }
    v68 = v59;
LABEL_89:
    v58 = v174 + v175;
    ++v57;
    v59 = v68;
    v47 = v173;
  }
  while (v57 != v172);
  v76 = -1 << v58;
  v56 = v169;
  v77 = (-1 << v58) | (v169 >> ~(_BYTE)v58);
  if ((v58 & 0x40) != 0)
  {
    v77 = -1 << v58;
    v76 = 0;
  }
  if (v58 > 0x7F)
  {
    v76 = 0;
    v77 = 0;
  }
  v36 = v168;
LABEL_96:
  *((_QWORD *)this + 66) = v76;
  *((_QWORD *)this + 67) = v77;
  v78 = (_DWORD *)*((_QWORD *)this + 1);
  *((_DWORD *)this + 96) = v78[81];
  v79 = v78[82];
  if (v79)
  {
    v80 = v58 - v79;
    v81 = -1 << v80;
    v82 = (v80 & 0x40) == 0;
    if ((v80 & 0x40) != 0)
      v83 = -1 << v80;
    else
      v83 = (-1 << v80) | (v56 >> ~v80);
    if (!v82)
      v81 = 0;
    *((_QWORD *)this + 50) = v81;
    *((_QWORD *)this + 51) = v83;
    v84 = v78[83] + 1;
    v85 = (v84 & 0x40) == 0;
    if ((v84 & 0x40) != 0)
      v86 = -1 << (*((_BYTE *)v78 + 332) + 1);
    else
      v86 = (-1 << (*((_BYTE *)v78 + 332) + 1)) | (v56 >> ~(*((_BYTE *)v78 + 332) + 1));
    if (v85)
      v87 = -1 << (*((_BYTE *)v78 + 332) + 1);
    else
      v87 = 0;
    v88 = ~v86;
    v89 = ~v87;
    *((_QWORD *)this + 52) = v87;
    *((_QWORD *)this + 53) = v86;
    v90 = v78[87];
    v91 = v78[88];
    v92 = v90 - v91 + 1;
    *((_DWORD *)this + 128) = v92;
    v93 = v78[85];
    v94 = v78[86];
    v95 = v93 - v94 + 1;
    v96 = v90 + 1;
    v97 = v93 - v96 + 1;
    *((_DWORD *)this + 129) = v97;
    *((_QWORD *)this + 54) = v89;
    *((_QWORD *)this + 55) = v88;
    v98 = v78[84];
    v99 = 1 << v98;
    v100 = (v98 & 0x40) == 0;
    if ((v98 & 0x40) != 0)
      v101 = 1 << v98;
    else
      v101 = 0;
    if (!v100)
      v99 = 0;
    *((_QWORD *)this + 56) = ~v99;
    *((_QWORD *)this + 57) = ~v101;
    v102 = -1 << v92;
    if ((v92 & 0x40) != 0)
      v103 = 0;
    else
      v103 = -1 << v92;
    if ((v92 & 0x40) == 0)
      v102 |= v56 >> ~(_BYTE)v92;
    v104 = ~v103;
    v105 = (~v102 << v91) | (v104 >> 1 >> ~(_BYTE)v91);
    v106 = v104 << v91;
    if ((v91 & 0x40) != 0)
    {
      v105 = v106;
      v106 = 0;
    }
    *((_QWORD *)this + 62) = v106;
    *((_QWORD *)this + 63) = v105;
    v107 = -1 << v95;
    if ((v95 & 0x40) != 0)
      v108 = 0;
    else
      v108 = -1 << v95;
    if ((v95 & 0x40) == 0)
      v107 |= v56 >> ~v95;
    v109 = ~v108;
    v110 = (~v107 << v94) | (v109 >> 1 >> ~(_BYTE)v94);
    v111 = v109 << v94;
    v112 = (v94 & 0x40) == 0;
    if ((v94 & 0x40) != 0)
      v113 = v111;
    else
      v113 = v110;
    if (v112)
      v114 = v111;
    else
      v114 = 0;
    *((_QWORD *)this + 58) = v114;
    *((_QWORD *)this + 59) = v113;
    v115 = -1 << v97;
    v116 = (v97 & 0x40) == 0;
    if ((v97 & 0x40) != 0)
      v117 = 0;
    else
      v117 = -1 << v97;
    v118 = v115 | (v56 >> ~(_BYTE)v97);
    if (!v116)
      v118 = v115;
    v119 = (~v118 << v96) | ((unint64_t)~v117 >> 1 >> ~(_BYTE)v96);
    v120 = ~v117 << v96;
    v121 = (v96 & 0x40) == 0;
    if ((v96 & 0x40) != 0)
      v122 = ~v117 << v96;
    else
      v122 = v119;
    if (v121)
      v123 = v120;
    else
      v123 = 0;
    *((_QWORD *)this + 60) = v123;
    *((_QWORD *)this + 61) = v122;
    if (dword_1EF19FCC0 >= 5)
    {
      v124 = *__error();
      v125 = _SILogForLogForCategory(13);
      if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v58;
        _os_log_impl(&dword_1B8270000, v125, OS_LOG_TYPE_DEFAULT, "bitCount: %ld", buf, 0xCu);
      }
      *__error() = v124;
    }
  }
  else
  {
    *((_QWORD *)this + 50) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_QWORD *)this + 52) = -1;
    *((_QWORD *)this + 53) = -1;
    *((_OWORD *)this + 28) = 0u;
    *((_OWORD *)this + 29) = 0u;
    *((_OWORD *)this + 30) = 0u;
    *((_OWORD *)this + 31) = 0u;
  }
LABEL_147:
  v126 = *((_QWORD *)this + 29);
  if (v126)
  {
    *((_DWORD *)this + 275) = v126;
    *((_DWORD *)this + 276) = currentCategoryCount(*((_QWORD *)this + 3));
    v127 = *((_DWORD *)this + 208);
    *((_DWORD *)this + 274) = v127;
    if (*((uint64_t *)this + 29) >= 1)
    {
      v128 = 0;
      v129 = *((_QWORD *)this + 105);
      v130 = MEMORY[0x1E0C809B0];
      do
      {
        v131 = (_OWORD *)(v129 + 48 * v127);
        v131[1] = 0u;
        v131[2] = 0u;
        *v131 = 0u;
        v132 = *(_QWORD **)(*((_QWORD *)this + 28) + 8 * v128);
        *(_QWORD *)buf = v130;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
        v178 = &unk_1E6E377F8;
        v179 = &__block_literal_global_17_10736;
        v133 = db_query_tree_apply_block_with_meta(v132, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
        v129 = *((_QWORD *)this + 105);
        v134 = *((_DWORD *)this + 208);
        v127 = v134 + 1;
        *((_DWORD *)this + 208) = v134 + 1;
        *(_QWORD *)(v129 + 48 * v134) = v133;
        ++v128;
      }
      while (v128 < *((_QWORD *)this + 29));
    }
  }
  if (v36)
  {
    v135 = (_OWORD *)(*((_QWORD *)this + 105) + 48 * *((unsigned int *)this + 208));
    v135[1] = 0u;
    v135[2] = 0u;
    *v135 = 0u;
    *((_DWORD *)this + 212) = *((_DWORD *)this + 208);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = __db_query_tree_apply_block_block_invoke;
    v178 = &unk_1E6E377F8;
    v179 = &__block_literal_global_17_10736;
    v136 = db_query_tree_apply_block_with_meta(v36, (uint64_t)buf, (uint64_t)&__block_literal_global_20_10737);
    v137 = *((_QWORD *)this + 105);
    v138 = *((_DWORD *)this + 208);
    *((_DWORD *)this + 208) = v138 + 1;
    *(_QWORD *)(v137 + 48 * v138) = v136;
    if (db_query_has_ann(v36))
    {
      if (v176 <= 2)
        *((_BYTE *)this + v176 + 1032) = *((_DWORD *)this + 208);
    }
  }
  v139 = _os_feature_enabled_impl();
  v140 = v171;
  if (v139)
  {
    v141 = *(const void **)(*((_QWORD *)this + 1) + 744);
    if (v141
      || (v143 = *((_QWORD *)this + 2)) != 0
      && (v144 = *(const __CFDictionary **)(v143 + 168)) != 0
      && (v141 = CFDictionaryGetValue(v144, CFSTR("kMDQueryResultMatchingAttributes"))) != 0)
    {
      v142 = CFGetTypeID(v141);
      if (v142 == CFArrayGetTypeID())
        *((_QWORD *)this + 107) = SISearchCtx_METADATA::addMatchingAttributeNodes(this, (CFArrayRef)v141, 0, (uint64_t *)this + 108, 0);
    }
    if (v140)
    {
      v145 = SISearchCtx_METADATA::addMatchingAttributeNodes(this, v140, (const int *)v170, (uint64_t *)this + 110, 0);
      *((_QWORD *)this + 109) = v145;
      v146 = *((_QWORD *)this + 110);
      if (v146 >= 1)
      {
        do
        {
          if (*(_WORD *)(*(_QWORD *)v145 + 40) == 4)
          {
            v147 = *(_QWORD **)(*(_QWORD *)v145 + 16);
            if (v147)
            {
              if (*v147)
                v147[4] |= 0x400000000uLL;
            }
          }
          v145 += 8;
          --v146;
        }
        while (v146);
        goto LABEL_169;
      }
LABEL_170:
      CFRelease(v140);
    }
  }
  else
  {
LABEL_169:
    if (v140)
      goto LABEL_170;
  }
  if (*(_BYTE *)(*((_QWORD *)this + 1) + 753))
  {
    if (SISearchCtx_METADATA::preIterate(void)::onceToken != -1)
      dispatch_once(&SISearchCtx_METADATA::preIterate(void)::onceToken, &__block_literal_global_25_4099);
    *((_QWORD *)this + 111) = SISearchCtx_METADATA::addMatchingAttributeNodes(this, (CFArrayRef)SISearchCtx_METADATA::preIterate(void)::sAttributesToConsider, SISearchCtx_METADATA::preIterate(void)::sAttributeIndexArray, (uint64_t *)this + 112, 1);
    v148 = *((_QWORD *)this + 112);
    if (v148 >= 1)
    {
      for (j = 0; j < v148; ++j)
      {
        v150 = *(_QWORD *)(*((_QWORD *)this + 111) + 8 * j);
        if (*(_WORD *)(v150 + 40) == 4)
        {
          v151 = *(_QWORD **)(v150 + 16);
          if (v151)
          {
            if (*v151)
            {
              convert_value_to_type(0xBu, (uint64_t)v151);
              *(_QWORD *)(*(_QWORD *)(v150 + 16) + 32) |= 0x400000000uLL;
              v148 = *((_QWORD *)this + 112);
            }
          }
        }
      }
    }
  }
  v152 = *((_QWORD *)this + 1);
  *(double *)(v152 + 392) = *(double *)(v152 + 392) + CFAbsoluteTimeGetCurrent() - Current;
  kdebug_trace();
  v153 = _MDPerf_QueryLog();
  v154 = *((_QWORD *)this + 1);
  if (v154 + 1 >= 2)
  {
    v155 = v153;
    if (os_signpost_enabled(v153))
    {
      v156 = *(_QWORD *)(v154 + 608);
      v157 = qos_class_self();
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v156;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v157;
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v155, OS_SIGNPOST_INTERVAL_END, v154, "Preiterate", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x", buf, 0x12u);
    }
  }
  return gatherIndexInfo(this, 0, 0);
}

void SISearchCtx::common_preIterate(CFAbsoluteTime *this, SISearchCtx *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  NSObject *v14;
  int v15;
  char *v16;
  char *v17;
  const char *v18;
  _BYTE buf[12];
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  this[16] = CFAbsoluteTimeGetCurrent();
  this[18] = 0.0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 1184);
  if (v3)
  {
    if (*(_DWORD *)v3 != 1685287992)
    {
      v13 = *__error();
      v14 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = *(_DWORD *)v3;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "db_open_files";
        v20 = 1024;
        v21 = 418;
        v22 = 1024;
        v23 = v15;
        _os_log_error_impl(&dword_1B8270000, v14, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
      }
      *__error() = v13;
      v16 = __si_assert_copy_extra_268();
      v17 = v16;
      if (v16)
        v18 = v16;
      else
        v18 = "";
      __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 418, v18);
      free(v17);
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    if (db_read_lock(v3 + 584))
      sdb2_die(v3, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 14869);
    *(_QWORD *)buf = 0;
    v4 = _fd_acquire_fd(*(_QWORD *)(v3 + 848), buf);
    if (v4 == -1)
    {
      v7 = 0;
    }
    else
    {
      v5 = v4;
      v6 = malloc_type_malloc(0x18uLL, 0x1020040A122CEF7uLL);
      v7 = v6;
      v6[2] = v5;
      *((_QWORD *)v6 + 2) = *(_QWORD *)buf;
      v8 = *(_QWORD *)(v3 + 848);
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 32);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      *(_QWORD *)v6 = v8;
    }
    v11 = pthread_mutex_lock((pthread_mutex_t *)(v3 + 584));
    v12 = *(_DWORD *)(v3 + 780) - 1;
    *(_DWORD *)(v3 + 780) = v12;
    if (!v12)
      db_rwlock_wakeup(v3 + 584, 0, 0);
    pthread_mutex_unlock((pthread_mutex_t *)(v3 + 584));
    if (v11)
      sdb2_die(v3, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 14878);
    *((_QWORD *)this + 18) = v7;
  }
}

void search_ctx_destroy(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (a1)
  {
    v3 = a1[5];
    if (v3)
    {
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 16))(v3, a1, a2);
      _Block_release((const void *)a1[5]);
    }
    if (!*((_BYTE *)a1 + 32) && *a1)
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
  }
  free(a1);
}

uint64_t doExecuteCracked(uint64_t a1, uint64_t a2, CFArrayRef theArray, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *ValueAtIndex;
  CFTypeID v17;
  int v18;
  BOOL v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t *v27;
  BOOL v29;
  NSObject *v30;
  int log;
  NSObject *loga;
  int v33;
  uint8_t buf[8];
  int v35;
  uint64_t v36[3];
  char buffer[8];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (theArray && CFArrayGetCount(theArray) == 1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
    v17 = CFGetTypeID(ValueAtIndex);
    if (v17 == CFStringGetTypeID()
      && (bzero(buffer, 0x400uLL), CFStringGetFileSystemRepresentation(ValueAtIndex, buffer, 1024))
      && (v36[1] = 0x200000000,
          v36[2] = 0,
          v35 = 0,
          *(_QWORD *)buf = 0,
          v36[0] = 0x800000005,
          !getattrlist(buffer, v36, buf, 0xCuLL, 0x200u)))
    {
      if (v35)
        v29 = 0;
      else
        v29 = *(_DWORD *)&buf[4] == 2;
      v18 = v29;
      v19 = v29 || *(_DWORD *)&buf[4] == 1;
    }
    else
    {
      v18 = 0;
      v19 = 0;
    }
    LOBYTE(v20) = 0;
    if (v18)
      v21 = v19;
    else
      v21 = 0;
    if (!a6 || v21)
      return v20 & 1;
  }
  else if (!a6)
  {
    LOBYTE(v20) = 0;
    return v20 & 1;
  }
  if (a6 < 2)
  {
    v22 = 0;
  }
  else
  {
    v22 = 0;
    v23 = (uint64_t *)(a5 + 16);
    v24 = 1;
    do
    {
      v25 = *v23;
      v23 += 2;
      if (*(_DWORD *)(*(_QWORD *)(a5 + 16 * v22) + 8) > *(_DWORD *)(v25 + 8))
        v22 = v24;
      ++v24;
    }
    while (a6 != v24);
  }
  v26 = (int *)&unk_1EF19F000;
  if (!*(_QWORD *)(a5 + 16 * v22))
  {
    v20 = 0;
    if (a6 < 2)
      return v20 & 1;
    goto LABEL_27;
  }
  *(_QWORD *)buffer = 0;
  v36[0] = 0;
  si_query_copy_grouping(a1, buffer, v36);
  if (dword_1EF19FC90 >= 5)
  {
    log = *__error();
    v30 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "We do have a primary query", buf, 2u);
    }
    *__error() = log;
  }
  v20 = executeOneCracked(a1, *(_QWORD *)(a5 + 16 * v22), *(_QWORD *)(a5 + 16 * v22 + 8), a2, (uint64_t)theArray, a4, a7, a8, *(void **)buffer, v36[0]);
  v26 = (_DWORD *)&unk_1EF19F000;
  if (a6 >= 2)
  {
LABEL_27:
    if (v26[804] >= 5)
    {
      v33 = *__error();
      loga = _SILogForLogForCategory(1);
      if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buffer = 67109120;
        *(_DWORD *)&buffer[4] = 0;
        _os_log_impl(&dword_1B8270000, loga, OS_LOG_TYPE_DEFAULT, "We do have %d secondary queries", (uint8_t *)buffer, 8u);
      }
      *__error() = v33;
    }
    v27 = (uint64_t *)(a5 + 8);
    do
    {
      *(_QWORD *)buffer = 0;
      v36[0] = 0;
      if (v22)
      {
        si_query_copy_grouping(a1, buffer, v36);
        v20 |= executeOneCracked(a1, *(v27 - 1), *v27, a2, (uint64_t)theArray, a4, a7, a8, *(void **)buffer, v36[0]);
      }
      v27 += 2;
      --v22;
      --a6;
    }
    while (a6);
  }
  return v20 & 1;
}

void si_query_copy_grouping(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  size_t v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[5];

  *a3 = *(_QWORD *)(a1 + 256);
  *a2 = 0;
  if (*(_QWORD *)(a1 + 248))
  {
    v5 = *(_QWORD *)(a1 + 256);
    if (((v5 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && 8 * v5 > *MEMORY[0x1E0C85AD8])
      ++sTotal_7175;
    v7 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, v5, 8uLL, 0x31F9A007uLL);
    if (!v7)
      _log_fault_for_malloc_failure();
    *a2 = v7;
    if (*(uint64_t *)(a1 + 256) >= 1)
    {
      v8 = 0;
      v9 = MEMORY[0x1E0C809B0];
      do
      {
        v10 = *(_QWORD **)(*(_QWORD *)(a1 + 248) + 8 * v8);
        v11[0] = v9;
        v11[1] = 0x40000000;
        v11[2] = __db_query_tree_apply_block_block_invoke;
        v11[3] = &unk_1E6E377F8;
        v11[4] = &__block_literal_global_17_10736;
        *(_QWORD *)(*a2 + 8 * v8++) = db_query_tree_apply_block_with_meta(v10, (uint64_t)v11, (uint64_t)&__block_literal_global_20_10737);
      }
      while (v8 < *(_QWORD *)(a1 + 256));
    }
  }
}

uint64_t si_resultqueue_enqueue(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  void (*v7)(uint64_t, _QWORD);
  uint64_t v8;

  v4 = countForBatch(a2);
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
  v5 = *(unsigned __int8 *)(a1 + 12);
  if (*(_BYTE *)(a1 + 12)
    || (*(_QWORD *)(a1 + 72) += v4,
        si_enqueue_locked(*(_QWORD *)a1, (uint64_t)a2),
        (v7 = *(void (**)(uint64_t, _QWORD))(a1 + 48)) == 0)
    || *(_DWORD *)(a1 + 84))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
    v7(v8, 0);
  }
  return v5 ^ 1u;
}

int *si_enqueue_locked(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *result;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  NSObject *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint8_t buf[4];
  int v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned int *)(a1 + 128);
  v3 = *(unsigned int *)(a1 + 120);
  if ((-(int)v3 & v2) != 0 || (*(_DWORD *)(a1 + 124) & ~((_DWORD)v3 - 1)) != 0)
  {
    v12 = __si_assert_copy_extra_268();
    v20 = v12;
    goto LABEL_17;
  }
  result = *(int **)(a1 + 136);
  if (*(_QWORD *)&result[2 * v2])
  {
    *(_DWORD *)(a1 + 120) = 2 * v3;
    v7 = (char *)malloc_type_realloc(result, 8 * (2 * v3), 0x80040B8603338uLL);
    *(_QWORD *)(a1 + 136) = v7;
    memcpy(&v7[8 * v3], v7, 8 * *(unsigned int *)(a1 + 124));
    v8 = *(unsigned int *)(a1 + 124);
    *(_DWORD *)(a1 + 128) = (*(_DWORD *)(a1 + 120) - 1) & (v8 + v3);
    bzero(*(void **)(a1 + 136), 8 * v8);
    bzero((void *)(*(_QWORD *)(a1 + 136) + 8 * *(unsigned int *)(a1 + 128)), 8 * (*(_DWORD *)(a1 + 120) - *(_DWORD *)(a1 + 128)));
    result = *(int **)(a1 + 136);
    v2 = *(unsigned int *)(a1 + 128);
  }
  *(_QWORD *)&result[2 * v2] = a2;
  v9 = v2 + 1;
  *(_DWORD *)(a1 + 128) = v2 + 1;
  if (gSILogLevels[0] >= 5)
  {
    v21 = *__error();
    v22 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(_DWORD *)(a1 + 124);
      v24 = *(_DWORD *)(a1 + 128);
      *(_DWORD *)buf = 67109376;
      v27 = v23;
      v28 = 1024;
      v29 = v24;
      _os_log_impl(&dword_1B8270000, v22, OS_LOG_TYPE_DEFAULT, "Enqueueing result: %d %d\n", buf, 0xEu);
    }
    result = __error();
    *result = v21;
    v9 = *(_DWORD *)(a1 + 128);
  }
  v10 = *(_DWORD *)(a1 + 120) - 1;
  v11 = v9 & v10;
  *(_DWORD *)(a1 + 128) = v11;
  if (*(_DWORD *)(a1 + 132))
  {
    result = (int *)pthread_cond_broadcast((pthread_cond_t *)(a1 + 72));
    v11 = *(_DWORD *)(a1 + 128);
    v10 = *(_DWORD *)(a1 + 120) - 1;
  }
  if ((v11 & ~v10) != 0 || (*(_DWORD *)(a1 + 124) & ~v10) != 0)
  {
    v12 = __si_assert_copy_extra_268();
    v20 = v12;
LABEL_17:
    __message_assert_272((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19, (char)"SISimpleQueue.c");
    free(v20);
    if (__valid_fs(-1))
      v25 = 2989;
    else
      v25 = 3072;
    *(_DWORD *)v25 = -559038737;
    abort();
  }
  return result;
}

void SISearchCtx_METADATA::~SISearchCtx_METADATA(SISearchCtx_METADATA *this)
{
  SISearchCtx_METADATA::~SISearchCtx_METADATA(this);
  JUMPOUT(0x1BCCB06A4);
}

{
  unsigned int *v2;
  unint64_t v3;
  void **v4;
  void *v5;
  void *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  void **v16;
  void *v17;
  const void *v18;
  unint64_t v19;
  uint64_t *v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  const void *v29;
  const void *v30;
  _QWORD v31[5];

  *(_QWORD *)this = &off_1E6E2A138;
  if (*((_BYTE *)this + 1129))
    si_makeUnavailable(*((_QWORD *)this + 3), 0, 0, 23, (uint64_t)"Recycle for error during query");
  v2 = (unsigned int *)*((_QWORD *)this + 116);
  if (v2)
  {
    if (v2[1])
    {
      v3 = 0;
      v4 = (void **)(v2 + 16);
      do
      {
        L1ComboQueueDestroy((void ***)*(v4 - 3));
        L1ComboQueueDestroy((void ***)*(v4 - 2));
        free(*(v4 - 1));
        v5 = *v4;
        v4 += 4;
        free(v5);
        ++v3;
      }
      while (v3 < v2[1]);
      v2 = (unsigned int *)*((_QWORD *)this + 116);
    }
    free(v2);
  }
  v6 = (void *)*((_QWORD *)this + 147);
  if (v6)
  {
    if (*((int *)this + 90) >= 1)
    {
      v7 = 0;
      do
        free(*(void **)(*((_QWORD *)this + 147) + 8 * v7++));
      while (v7 < *((int *)this + 90));
      v6 = (void *)*((_QWORD *)this + 147);
    }
    free(v6);
  }
  v8 = (char *)*((_QWORD *)this + 105);
  if (*((_DWORD *)this + 208))
  {
    v9 = 0;
    v10 = 16;
    do
    {
      if (*(_QWORD *)&v8[v10 + 16])
      {
        ContentIndexDocSetCleanupBorrowedChildren(*(_QWORD *)&v8[v10 + 16]);
        ContentIndexDocSetDispose(*(_QWORD *)(*((_QWORD *)this + 105) + v10 + 16));
        v8 = (char *)*((_QWORD *)this + 105);
        *(_QWORD *)&v8[v10 + 16] = 0;
      }
      if (*(_QWORD *)&v8[v10 - 16])
      {
        clear_node_caches(*(_QWORD *)&v8[v10 - 16]);
        db_free_query_node(*(_QWORD **)(*((_QWORD *)this + 105) + v10 - 16));
        v8 = (char *)*((_QWORD *)this + 105);
      }
      *(_QWORD *)&v8[v10 - 16] = 0;
      if (*(_QWORD *)&v8[v10 + 8])
      {
        clear_node_caches(*(_QWORD *)&v8[v10 + 8]);
        db_free_query_node(*(_QWORD **)(*((_QWORD *)this + 105) + v10 + 8));
        v8 = (char *)*((_QWORD *)this + 105);
        *(_QWORD *)&v8[v10 + 8] = 0;
      }
      if (*(_QWORD *)&v8[v10 - 8])
      {
        clear_node_caches(*(_QWORD *)&v8[v10 - 8]);
        db_free_query_node(*(_QWORD **)(*((_QWORD *)this + 105) + v10 - 8));
        v8 = (char *)*((_QWORD *)this + 105);
        *(_QWORD *)&v8[v10 - 8] = 0;
      }
      if (*(_QWORD *)&v8[v10])
      {
        clear_node_caches(*(_QWORD *)&v8[v10]);
        db_free_query_node(*(_QWORD **)(*((_QWORD *)this + 105) + v10));
        v8 = (char *)*((_QWORD *)this + 105);
        *(_QWORD *)&v8[v10] = 0;
      }
      ++v9;
      v10 += 48;
    }
    while (v9 < *((unsigned int *)this + 208));
  }
  free(v8);
  if (*((uint64_t *)this + 110) >= 1)
  {
    v11 = 0;
    do
    {
      clear_node_caches(*(_QWORD *)(*((_QWORD *)this + 109) + 8 * v11));
      db_free_query_node(*(_QWORD **)(*((_QWORD *)this + 109) + 8 * v11++));
    }
    while (v11 < *((_QWORD *)this + 110));
  }
  free(*((void **)this + 109));
  if (*((uint64_t *)this + 108) >= 1)
  {
    v12 = 0;
    do
    {
      clear_node_caches(*(_QWORD *)(*((_QWORD *)this + 107) + 8 * v12));
      db_free_query_node(*(_QWORD **)(*((_QWORD *)this + 107) + 8 * v12++));
    }
    while (v12 < *((_QWORD *)this + 108));
  }
  free(*((void **)this + 107));
  if (*((uint64_t *)this + 112) >= 1)
  {
    v13 = 0;
    do
    {
      clear_node_caches(*(_QWORD *)(*((_QWORD *)this + 111) + 8 * v13));
      db_free_query_node(*(_QWORD **)(*((_QWORD *)this + 111) + 8 * v13++));
    }
    while (v13 < *((_QWORD *)this + 112));
  }
  free(*((void **)this + 111));
  free(*((void **)this + 117));
  free(*((void **)this + 118));
  free(*((void **)this + 119));
  free(*((void **)this + 121));
  free(*((void **)this + 122));
  free(*((void **)this + 115));
  v14 = (int *)*((_QWORD *)this + 139);
  if (v14)
  {
    if (*v14 >= 1)
    {
      v15 = 0;
      v16 = (void **)(v14 + 10);
      do
      {
        free(*(v16 - 4));
        free(*(v16 - 1));
        v17 = *v16;
        v16 += 5;
        free(v17);
        ++v15;
      }
      while (v15 < *v14);
    }
    free(v14);
  }
  v18 = (const void *)*((_QWORD *)this + 140);
  if (v18)
    CFRelease(v18);
  if (*((_QWORD *)this + 47))
  {
    v19 = 0;
    do
      ContentIndexQueryNodeDispose(*(char **)(*((_QWORD *)this + 46) + 8 * v19++));
    while (v19 < *((_QWORD *)this + 47));
  }
  free(*((void **)this + 46));
  v20 = (uint64_t *)*((_QWORD *)this + 85);
  if (v20)
    ContentIndexDocSetIteratorDispose(v20);
  *((_QWORD *)this + 85) = 0;
  v21 = (void *)*((_QWORD *)this + 83);
  if (v21)
    free(v21);
  *((_QWORD *)this + 83) = 0;
  v22 = (_QWORD *)*((_QWORD *)this + 102);
  if (v22)
  {
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 0x40000000;
    v31[2] = __db_query_tree_apply_block_block_invoke;
    v31[3] = &unk_1E6E377F8;
    v31[4] = &__block_literal_global_143;
    db_query_tree_apply_block_with_meta(v22, (uint64_t)v31, 0);
  }
  *((_QWORD *)this + 102) = 0;
  v23 = (void *)*((_QWORD *)this + 77);
  if (v23)
  {
    free(v23);
    *((_QWORD *)this + 77) = 0;
  }
  v24 = (void *)*((_QWORD *)this + 78);
  if (v24)
  {
    free(v24);
    *((_QWORD *)this + 78) = 0;
  }
  v25 = (void *)*((_QWORD *)this + 79);
  if (v25)
  {
    free(v25);
    *((_QWORD *)this + 79) = 0;
  }
  v26 = *((_QWORD *)this + 114);
  if (v26)
    db_obj_iter_release(v26);
  CIIndexSetClearCache((uint64_t)this + 688);
  v27 = *((_QWORD *)this + 142);
  if (v27)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
    *((_QWORD *)this + 142) = 0;
  }
  if (*((_QWORD *)this + 143))
  {
    for (i = 0; i != 72; i += 8)
    {
      v29 = *(const void **)(*((_QWORD *)this + 143) + i);
      if (v29)
        CFRelease(v29);
    }
    free(*((void **)this + 143));
  }
  v30 = (const void *)*((_QWORD *)this + 145);
  if (v30)
    CFRelease(v30);
  SISearchCtx::~SISearchCtx(this);
}

void clear_node_caches(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(void);
  uint64_t v5;
  void **v6;

  if (*(_QWORD *)a1)
    clear_node_caches();
  if (*(_QWORD *)(a1 + 8))
    clear_node_caches();
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 120);
    if (v3 != -1)
    {
      if (!v3)
      {
LABEL_11:
        v5 = *(_QWORD *)(a1 + 32);
        if (v5 && v2 && (*(_BYTE *)(v2 + 33) & 8) == 0)
        {
          if (v5 != -1)
            ContentIndexDocSetDispose(v5);
          *(_QWORD *)(a1 + 32) = 0;
        }
        goto LABEL_17;
      }
      v4 = *(void (**)(void))(v2 + 128);
      if (v4)
      {
        v4();
        v2 = *(_QWORD *)(a1 + 16);
      }
    }
    *(_QWORD *)(v2 + 120) = 0;
    *(_QWORD *)(v2 + 128) = 0;
    goto LABEL_11;
  }
LABEL_17:
  v6 = *(void ***)(a1 + 24);
  if (v6)
  {
    if ((*(_WORD *)(a1 + 48) & 1) != 0)
    {
      free(*v6);
      free(*(void **)(a1 + 24));
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
}

uint64_t CIIndexSetClearCache(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  const __CFAllocator *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  __CFSet *Mutable;
  const void *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  __CFSet *v14;
  const void *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  __CFSet *v19;
  const void *v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  _QWORD *v24;
  __CFSet *v25;
  const void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = a1 + 8;
  for (i = cicachelistdequeue(a1 + 8, 20); i; i = cicachelistdequeue(v2, 20))
  {
    do
    {
      v4 = *(_QWORD *)(i + 40);
      *(_DWORD *)(i + 16) = -2;
      CFRelease((CFTypeRef)i);
      i = v4;
    }
    while (v4);
  }
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = cicachelistdequeue(a1 + 32, 0);
  if (v6)
  {
    v7 = (_QWORD *)v6;
    v8 = (_QWORD *)MEMORY[0x1E0C85AD8];
    do
    {
      Mutable = CFSetCreateMutable(v5, 0, 0);
      do
      {
        while (1)
        {
          CFSetAddValue(Mutable, v7);
          v10 = (const void *)v7[1];
          if (CFSetContainsValue(Mutable, v10))
          {
LABEL_40:
            v27 = __si_assert_copy_extra_268();
            __message_assert_272((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34, (char)"CIIndexSet.c");
            free(v27);
            if (__valid_fs(-1))
              v35 = 2986;
            else
              v35 = 3072;
            *(_DWORD *)v35 = -559038737;
            abort();
          }
          if (*v8 <= 0x41uLL)
            break;
          free(v7);
          v7 = v10;
          if (!v10)
            goto LABEL_6;
        }
        munmap(v7, (*v8 + 31) & -*v8);
        v7 = v10;
      }
      while (v10);
LABEL_6:
      CFRelease(Mutable);
      v7 = (_QWORD *)cicachelistdequeue(a1 + 32, 0);
    }
    while (v7);
  }
  v11 = cicachelistdequeue(a1 + 56, 0);
  if (v11)
  {
    v12 = (_QWORD *)v11;
    v13 = (_QWORD *)MEMORY[0x1E0C85AD8];
    do
    {
      v14 = CFSetCreateMutable(v5, 0, 0);
      do
      {
        while (1)
        {
          CFSetAddValue(v14, v12);
          v15 = (const void *)v12[1];
          if (CFSetContainsValue(v14, v15))
            goto LABEL_40;
          if (*v13 <= 0x81uLL)
            break;
          free(v12);
          v12 = v15;
          if (!v15)
            goto LABEL_15;
        }
        munmap(v12, (*v13 + 63) & -*v13);
        v12 = v15;
      }
      while (v15);
LABEL_15:
      CFRelease(v14);
      v12 = (_QWORD *)cicachelistdequeue(a1 + 56, 0);
    }
    while (v12);
  }
  v16 = cicachelistdequeue(a1 + 80, 0);
  if (v16)
  {
    v17 = (_QWORD *)v16;
    v18 = (_QWORD *)MEMORY[0x1E0C85AD8];
    do
    {
      v19 = CFSetCreateMutable(v5, 0, 0);
      do
      {
        while (1)
        {
          CFSetAddValue(v19, v17);
          v20 = (const void *)v17[1];
          if (CFSetContainsValue(v19, v20))
            goto LABEL_40;
          if (*v18 <= 0x101uLL)
            break;
          free(v17);
          v17 = v20;
          if (!v20)
            goto LABEL_24;
        }
        munmap(v17, (*v18 + 127) & -*v18);
        v17 = v20;
      }
      while (v20);
LABEL_24:
      CFRelease(v19);
      v17 = (_QWORD *)cicachelistdequeue(a1 + 80, 0);
    }
    while (v17);
  }
  v21 = a1 + 104;
  result = cicachelistdequeue(v21, 0);
  if (result)
  {
    v23 = (_QWORD *)result;
    v24 = (_QWORD *)MEMORY[0x1E0C85AD8];
    do
    {
      v25 = CFSetCreateMutable(v5, 0, 0);
      do
      {
        while (1)
        {
          CFSetAddValue(v25, v23);
          v26 = (const void *)v23[1];
          if (CFSetContainsValue(v25, v26))
            goto LABEL_40;
          if (*v24 <= 0x201uLL)
            break;
          free(v23);
          v23 = v26;
          if (!v26)
            goto LABEL_33;
        }
        munmap(v23, (*v24 + 255) & -*v24);
        v23 = v26;
      }
      while (v26);
LABEL_33:
      CFRelease(v25);
      result = cicachelistdequeue(v21, 0);
      v23 = (_QWORD *)result;
    }
    while (result);
  }
  return result;
}

uint64_t cicachelistdequeue(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_QWORD *)a1 != 4292677391)
  {
    v7 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v7, v8, v9, v10, v11, v12, v13, v14, (char)"CIIndexSet.c");
    free(v7);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAA] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v4 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v5 + a2);
  os_unfair_lock_unlock(v4);
  return v5;
}

void ContentIndexQueryNodeDispose(char *a1)
{
  int v2;
  uint64_t v3;
  char *v4;
  int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  void *v12;

  v2 = *(_DWORD *)a1;
  if (*(int *)a1 >= 1)
  {
    v3 = 0;
    do
    {
      v4 = &a1[16 * v3];
      v6 = *((_DWORD *)v4 + 6);
      v5 = (int *)(v4 + 24);
      if (v6 >= 1)
      {
        v7 = 0;
        v8 = 0;
        v9 = &a1[16 * v3 + 32];
        do
        {
          v10 = *(_QWORD *)v9;
          v11 = *(_DWORD *)(*(_QWORD *)v9 + v7 + 16);
          if ((v11 & 0x610) != 0)
          {
            if ((v11 & 0x10) != 0)
              free(*(void **)(v10 + v7));
          }
          else
          {
            free(*(void **)(v10 + v7));
            free(*(void **)(*(_QWORD *)v9 + v7 + 8));
            icu_ctx_release();
          }
          v12 = *(void **)(*(_QWORD *)v9 + v7 + 48);
          if (v12)
            la_free(v12);
          ++v8;
          v7 += 64;
        }
        while (v8 < *v5);
        v2 = *(_DWORD *)a1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  free(a1);
}

void **L1RankQueueDestroy(void **result)
{
  if (result)
  {
    free(*result);
    JUMPOUT(0x1BCCB06A4);
  }
  return result;
}

void __get_pages_for_keys_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int *v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  NSObject *log;
  int v60;
  _BYTE v61[4096];
  __int128 buf;
  uint64_t v63;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = (_QWORD *)v1;
  v63 = *MEMORY[0x1E0C80C00];
  bzero(v61, 0x1000uLL);
  v5 = *(_DWORD *)(*(_QWORD *)(v4[4] + 856) + 8);
  v6 = v5 + 3;
  if (v5 < -3)
    v6 = v5 + 6;
  if (v5 > 0x4000)
  {
    v7 = malloc_type_calloc((v6 >> 2), 1uLL, 0x2F473519uLL);
  }
  else
  {
    v7 = v61;
    __memset_chk();
  }
  v8 = v4[5];
  v9 = v8 * v3;
  v10 = v8 * v3 + v8;
  if (v10 >= v4[6])
    v11 = v4[6];
  else
    v11 = v10;
  if (v9 < v11)
  {
    v12 = 0;
    do
    {
      v18 = v4[7];
      v19 = v18 + 32 * v9;
      if ((*(_BYTE *)(v19 + 24) & 1) != 0)
      {
        v30 = 32 * v9;
        if (dword_1EF19FC90 >= 5)
        {
          v60 = *__error();
          log = _SILogForLogForCategory(1);
          if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
          {
            v58 = *(_QWORD *)(v4[7] + 32 * v9);
            LODWORD(buf) = 134217984;
            *(_QWORD *)((char *)&buf + 4) = v58;
            _os_log_impl(&dword_1B8270000, log, OS_LOG_TYPE_DEFAULT, "Already found %lld", (uint8_t *)&buf, 0xCu);
          }
          *__error() = v60;
          v18 = v4[7];
        }
        *(_QWORD *)(v18 + v30 + 16) &= 0xFFFFFFFC00000003;
        *(_BYTE *)(v4[7] + v30 + 25) = 0;
        goto LABEL_14;
      }
      v22 = *(_QWORD *)(v19 + 16);
      v20 = (unint64_t *)(v19 + 16);
      v21 = v22;
      v23 = v22 & 3;
      if (v23 == 3)
        v23 = *(unsigned __int8 *)(v4[8] + 112);
      v24 = *(_QWORD *)(v18 + 32 * v9);
      v25 = *(_QWORD *)(v4[4] + 856);
      v26 = *(_DWORD *)(v25 + 8);
      if (!v12 || v26 <= v12)
        goto LABEL_26;
      v27 = v25 + 16 * v12;
      v28 = v27 + 20;
      v29 = v23 - (*(_DWORD *)(v27 + 32) >> 28);
      if (v29)
      {
        if (v29 > 0)
          goto LABEL_26;
      }
      else if (v24 - *(_QWORD *)v28 > 0)
      {
        goto LABEL_26;
      }
      v56 = v25 + 16 * (v12 - 1);
      v57 = v23 - (*(_DWORD *)(v56 + 32) >> 28);
      if (v57)
      {
        if (v57 > 0)
          goto LABEL_45;
      }
      else if (v24 - *(_QWORD *)(v56 + 20) > 0)
      {
        goto LABEL_45;
      }
LABEL_26:
      if (v26 >= 1)
      {
        v31 = 0;
        v32 = *(unsigned int *)(v25 + 8);
        while (1)
        {
          if ((int)v32 + v31 < 0 != __OFADD__((_DWORD)v32, v31))
            v33 = v32 + v31 + 1;
          else
            v33 = v32 + v31;
          v34 = (v33 >> 1);
          v35 = v23 - (*(_DWORD *)(v25 + 16 * (int)v34 + 32) >> 28);
          if (v35)
          {
            v36 = v35;
            v37 = v34;
            if ((v36 & 0x8000000000000000) == 0)
            {
LABEL_36:
              if (!v36)
                goto LABEL_40;
              v31 = v34 + 1;
              v37 = v32;
            }
          }
          else
          {
            v36 = v24 - *(_QWORD *)(v25 + 16 * ((uint64_t)v33 >> 1) + 20);
            v37 = v34;
            if ((v36 & 0x8000000000000000) == 0)
              goto LABEL_36;
          }
          v32 = v37;
          if (v31 >= (int)v37)
          {
            v38 = v36 > 0;
            goto LABEL_41;
          }
        }
      }
      LODWORD(v34) = 0;
LABEL_40:
      v38 = 0;
LABEL_41:
      v39 = v26 - 1 > (int)v34 && v38;
      v12 = v34 + v39;
      v28 = v25 + 16 * ((int)v34 + v39) + 20;
LABEL_45:
      *v20 = v21 & 0xFFFFFFFC00000003 | (4 * *(unsigned int *)(v28 + 8));
      v40 = v4[7];
      *(_BYTE *)(v40 + 32 * v9 + 25) = *(_DWORD *)(v28 + 12) >> 12;
      if (!v7)
        goto LABEL_49;
      v41 = ((char)v7[v12 / 4] >> (2 * (v12 & 3))) & 3;
      if (v41 != 2)
      {
        if (v41 == 1)
        {
          v42 = v40 + 32 * v9;
          v43 = *(_QWORD *)(v42 + 16);
          v14 = (unint64_t *)(v42 + 16);
          v15 = v43;
          v17 = 0x400000000;
          goto LABEL_13;
        }
LABEL_49:
        v44 = *(_QWORD *)(v4[4] + 928);
        v45 = *(_DWORD *)(v28 + 8);
        v46 = *(unsigned int *)(v44 + 220);
        if ((int)v46 < 1)
        {
LABEL_53:
          buf = 0uLL;
          v49 = atomic_load((unsigned int *)(v44 + 248));
          if (v49 <= v45)
            goto LABEL_59;
          *((_QWORD *)&buf + 1) = 0;
          *(_QWORD *)&buf = *(_QWORD *)v44;
          DWORD2(buf) = v45;
          if (sdb_init_cache_onceToken != -1)
            dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_27_11254);
          if (sdb_init_cache_status == 1)
          {
            cache_get_info_for_key();
            v50 = 2;
            if (!v7)
              goto LABEL_66;
          }
          else
          {
LABEL_59:
            v50 = 2;
            if (!v7)
              goto LABEL_66;
          }
        }
        else
        {
          v47 = (int *)(v44 + 252);
          while (1)
          {
            v48 = *v47++;
            if (v48 == v45)
              break;
            if (!--v46)
              goto LABEL_53;
          }
          v50 = 0;
          if (!v7)
          {
LABEL_66:
            v54 = v4[7] + 32 * v9;
            v55 = *(_QWORD *)(v54 + 16);
            v14 = (unint64_t *)(v54 + 16);
            v15 = v55;
            if (v50)
            {
              v17 = 0x400000000;
              goto LABEL_13;
            }
            goto LABEL_12;
          }
        }
        if (v50)
          v51 = 1;
        else
          v51 = 2;
        v52 = v51 << (2 * (v12 & 3));
        v53 = v12 + 3;
        if (v12 >= 0)
          v53 = v12;
        v7[(uint64_t)v53 >> 2] |= v52;
        goto LABEL_66;
      }
      v13 = v40 + 32 * v9;
      v16 = *(_QWORD *)(v13 + 16);
      v14 = (unint64_t *)(v13 + 16);
      v15 = v16;
LABEL_12:
      v17 = 0;
LABEL_13:
      *v14 = v17 | v15 & 0xFFFFFFFBFFFFFFFFLL;
LABEL_14:
      ++v9;
    }
    while (v9 != v11);
  }
  if (v7 != v61)
    free(v7);
}

void db_obj_iter_create_subiterators(uint64_t a1, unint64_t a2, _QWORD *a3, double a4, double a5, __n128 a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t i;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  const char *v35;
  unint64_t v36;

  if (*(_DWORD *)a1 != 3506)
  {
    v33 = __si_assert_copy_extra_268();
    v34 = v33;
    if (v33)
      v35 = v33;
    else
      v35 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 717, v35);
    free(v34);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if (*(_BYTE *)(a1 + 74))
    obj_iter_resume(a1, a4, a5, a6);
  v9 = a2 - 1;
  if (a2 == 1)
  {
    *a3 = a1 + 80;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 136);
    v11 = (v9 + v10) / a2;
    v12 = v10 + v11;
    if (v11 * a2 <= v10 + v11)
    {
      v16 = 0;
      v14 = a2;
    }
    else
    {
      v13 = 0;
      v14 = a2;
      do
      {
        while (1)
        {
          v15 = v14 + 1;
          v14 = (v14 + 1) >> 1;
          v16 = v13 + (v15 >> 1);
          if (v16 > a2 || v14 > *(_QWORD *)(a1 + 136))
            break;
          v36 = v9;
          v17 = 0;
          if (v14 <= 1)
            v18 = 1;
          else
            v18 = v14;
          do
            initializeSubIter(v13, a1, v17++, v11, (uint64_t)a3);
          while (v18 != v17);
          v10 -= v11 * v14;
          v11 = (v14 + v10 - 1) / v14;
          v12 = v10 + v11;
          v13 = v16;
          v9 = v36;
          if (v11 * v14 <= v10 + v11)
            goto LABEL_19;
        }
      }
      while (v11 * v14 > v12);
      v16 = v13;
    }
LABEL_19:
    v19 = a2 - v16;
    if (a2 < v16)
      v19 = 0;
    if (v16 + v14 <= a2)
      v20 = v14;
    else
      v20 = v19;
    if (v20)
    {
      for (i = 0; i != v20; ++i)
        initializeSubIter(v16, a1, i, v11, (uint64_t)a3);
    }
    v22 = v20 + v16;
    v23 = a2 - (v20 + v16);
    if (a2 > v20 + v16)
    {
      v24 = 0;
      do
        initializeSubIter(v22, a1, v24++, 0, (uint64_t)a3);
      while (v23 != v24);
    }
    v25 = a3[v9];
    v26 = *(_QWORD *)(v25 + 8);
    v27 = *(_QWORD *)(v25 + 56) + v26;
    v28 = *(_QWORD *)(a1 + 136);
    if (v27 != v28)
    {
      if (v27 >= v28)
      {
        if (v27 > v28)
        {
          v29 = v28 >= v26;
          v30 = v28 - v26;
          if (v29)
          {
            *(_QWORD *)(v25 + 56) = v30;
          }
          else
          {
            *(_QWORD *)(v25 + 8) = v28;
            *(_QWORD *)(v25 + 56) = 0;
            do
            {
              v31 = a3[a2 - 2];
              v32 = *(_QWORD *)(v31 + 8);
              if (v28 <= v32)
              {
                *(_QWORD *)(v31 + 8) = v28;
                *(_QWORD *)(v31 + 56) = 0;
              }
              else
              {
                if (*(_QWORD *)(v31 + 56) + v32 <= v28)
                  return;
                *(_QWORD *)(v31 + 56) = v28 - v32;
                v28 = v32;
              }
              --a2;
            }
            while (a2 > 1);
          }
        }
      }
      else
      {
        *(_QWORD *)(v25 + 56) = v28 - v26;
      }
    }
  }
}

void initializeSubIter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  const char *v26;
  uint8_t buf[16];

  v10 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x100C8uLL, 0x6085D6BuLL);
  if (!v10 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
  }
  v11 = a3 + a1;
  v12 = 8 * (a3 + a1);
  *(_QWORD *)(a5 + v12) = v10;
  v10[14] = 0;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)v10 = 0u;
  **(_QWORD **)(a5 + v12) = a2;
  v13 = *(_QWORD *)(a5 + v12);
  *(_BYTE *)(v13 + 112) = *(_BYTE *)(a2 + 192);
  *(_QWORD *)(v13 + 120) = 0;
  *(_QWORD *)(v13 + 192) = 0;
  if (a3 + a1)
    v14 = *(_QWORD *)(*(_QWORD *)(a5 + 8 * v11 - 8) + 56) + *(_QWORD *)(*(_QWORD *)(a5 + 8 * v11 - 8) + 8);
  else
    v14 = 0;
  v15 = *(_QWORD *)(a5 + 8 * v11);
  *(_QWORD *)(v15 + 8) = v14;
  v16 = *(_QWORD *)(a2 + 136);
  if (v14 + a4 <= v16)
    v17 = a4;
  else
    v17 = v16 - v14;
  *(_QWORD *)(v15 + 56) = v17;
  if (v17 < 0)
  {
    v20 = __si_assert_copy_extra_2151(0, -1);
    v21 = v20;
    v22 = "";
    if (v20)
      v22 = v20;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 12400, "(ssize_t)subiters[base+i]->count>=0", v22);
    free(v21);
    if (__valid_fs(-1))
      v23 = 2989;
    else
      v23 = 3072;
    *(_DWORD *)v23 = -559038737;
    abort();
  }
  if (v17)
  {
    v18 = v17 + v14;
    if (v18 < *(_QWORD *)(a2 + 136) - 1)
    {
      v19 = (_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * v18 + 16);
      do
      {
        if ((*(v19 - 4) >> 2) != (*v19 >> 2))
          break;
        v19 += 4;
        *(_QWORD *)(v15 + 56) = v18 - v14 + 1;
        ++v18;
      }
      while (v18 < *(_QWORD *)(a2 + 136) - 1);
      if (((v18 - v14) & 0x8000000000000000) != 0)
      {
        v24 = __si_assert_copy_extra_2151(0, -1);
        v25 = v24;
        v26 = "";
        if (v24)
          v26 = v24;
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 12406, "(ssize_t)subiters[base+i]->count>=0", v26);
        free(v25);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
    }
  }
}

void obj_iter_resume(uint64_t a1, double a2, double a3, __n128 a4)
{
  uint64_t v5;
  int v6;
  NSObject *v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 74))
  {
    v5 = *(_QWORD *)(a1 + 24);
    if (!*(_BYTE *)(a1 + 76) && db_read_lock(v5 + 584))
      sdb2_die(v5, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 12099);
    if (!*(_BYTE *)(a1 + 75))
      subiter_do_lookups((unint64_t *)(a1 + 80), a2, a3, a4);
    if (*(_DWORD *)(a1 + 4) == -1)
      *(_DWORD *)(a1 + 4) = _fd_acquire_fd(*(_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
    if (dword_1EF19FC90 >= 5)
    {
      v6 = *__error();
      v7 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8 = atomic_load((unint64_t *)(a1 + 144));
        v9 = 134217984;
        v10 = v8;
        _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "Prefetch pages from %ld", (uint8_t *)&v9, 0xCu);
      }
      *__error() = v6;
    }
    *(_BYTE *)(a1 + 74) = 0;
    if (!*(_BYTE *)(a1 + 76))
      db2_string_table_rdlock(v5);
  }
}

uint64_t db2_string_table_rdlock(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  v2 = *(_QWORD *)(a1 + 880);
  if ((*(_BYTE *)(a1 + 804) & 0x14) == 0)
  {
    pthread_rwlock_rdlock(*(pthread_rwlock_t **)(v2 + 16));
    pthread_rwlock_rdlock(*(pthread_rwlock_t **)(*(_QWORD *)(a1 + 888) + 16));
    pthread_rwlock_rdlock(*(pthread_rwlock_t **)(*(_QWORD *)(a1 + 896) + 16));
    pthread_rwlock_rdlock(*(pthread_rwlock_t **)(*(_QWORD *)(a1 + 904) + 16));
    pthread_rwlock_rdlock(*(pthread_rwlock_t **)(*(_QWORD *)(a1 + 912) + 16));
    result = *(_QWORD *)(a1 + 920);
    if (!result)
      return result;
    goto LABEL_48;
  }
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 216);
    switch(v3)
    {
      case -270471200:
        _data_map_ext_rdlock(v2);
        break;
      case 1684300900:
        _data_map64_rdlock(v2);
        v4 = *(_QWORD *)(a1 + 888);
        if (!v4)
          goto LABEL_20;
        goto LABEL_12;
      case 842150450:
        _data_map32_rdlock(v2);
        v4 = *(_QWORD *)(a1 + 888);
        if (!v4)
          goto LABEL_20;
        goto LABEL_12;
    }
  }
  v4 = *(_QWORD *)(a1 + 888);
  if (!v4)
    goto LABEL_20;
LABEL_12:
  v6 = *(_DWORD *)(v4 + 216);
  switch(v6)
  {
    case -270471200:
      _data_map_ext_rdlock(v4);
      break;
    case 1684300900:
      _data_map64_rdlock(v4);
      v7 = *(_QWORD *)(a1 + 896);
      if (!v7)
        goto LABEL_29;
      goto LABEL_21;
    case 842150450:
      _data_map32_rdlock(v4);
      v7 = *(_QWORD *)(a1 + 896);
      if (!v7)
        goto LABEL_29;
      goto LABEL_21;
  }
LABEL_20:
  v7 = *(_QWORD *)(a1 + 896);
  if (!v7)
    goto LABEL_29;
LABEL_21:
  v8 = *(_DWORD *)(v7 + 216);
  switch(v8)
  {
    case -270471200:
      _data_map_ext_rdlock(v7);
      break;
    case 1684300900:
      _data_map64_rdlock(v7);
      v9 = *(_QWORD *)(a1 + 904);
      if (!v9)
        goto LABEL_38;
      goto LABEL_30;
    case 842150450:
      _data_map32_rdlock(v7);
      v9 = *(_QWORD *)(a1 + 904);
      if (!v9)
        goto LABEL_38;
      goto LABEL_30;
  }
LABEL_29:
  v9 = *(_QWORD *)(a1 + 904);
  if (!v9)
    goto LABEL_38;
LABEL_30:
  v10 = *(_DWORD *)(v9 + 216);
  switch(v10)
  {
    case -270471200:
      _data_map_ext_rdlock(v9);
      break;
    case 1684300900:
      _data_map64_rdlock(v9);
      v11 = *(_QWORD *)(a1 + 912);
      if (!v11)
        goto LABEL_47;
      goto LABEL_39;
    case 842150450:
      _data_map32_rdlock(v9);
      v11 = *(_QWORD *)(a1 + 912);
      if (!v11)
        goto LABEL_47;
      goto LABEL_39;
  }
LABEL_38:
  v11 = *(_QWORD *)(a1 + 912);
  if (!v11)
    goto LABEL_47;
LABEL_39:
  v12 = *(_DWORD *)(v11 + 216);
  switch(v12)
  {
    case -270471200:
      _data_map_ext_rdlock(v11);
      break;
    case 1684300900:
      _data_map64_rdlock(v11);
      result = *(_QWORD *)(a1 + 920);
      if (!result)
        return result;
      goto LABEL_48;
    case 842150450:
      _data_map32_rdlock(v11);
      result = *(_QWORD *)(a1 + 920);
      if (!result)
        return result;
      goto LABEL_48;
  }
LABEL_47:
  result = *(_QWORD *)(a1 + 920);
  if (!result)
    return result;
LABEL_48:
  v13 = *(_DWORD *)(result + 216);
  switch(v13)
  {
    case -270471200:
      return _data_map_ext_rdlock(result);
    case 1684300900:
      return _data_map64_rdlock(result);
    case 842150450:
      return _data_map32_rdlock(result);
  }
  return result;
}

void subiter_do_lookups(unint64_t *a1, double a2, double a3, __n128 a4)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  size_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t i;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  NSObject *log;
  NSObject *loga;
  int v59;
  int v60;
  __n128 v61;
  unint64_t v62;
  uint64_t v63;
  size_t v64;
  _BYTE buf[24];
  void *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  unint64_t *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v5 = a1[7];
  v6 = atomic_load(a1 + 8);
  v7 = v5 - v6;
  v8 = (_QWORD *)*a1;
  v9 = *(_QWORD *)(*a1 + 32);
  v10 = atomic_load(a1 + 8);
  v62 = v10;
  v63 = v9;
  v11 = (char *)(v9 + 32 * v10);
  v12 = v5 - v6 - 1;
  if (v12 >= 1)
  {
    if ((unint64_t)v12 > 0x7FE)
    {
      v13 = OSAtomicDequeue(&qsort_cached_allocations, 0);
      if (!v13)
        v13 = malloc_type_malloc(0x40uLL, 0x102004053A8A26AuLL);
      v14 = dispatch_group_create();
      v13[3] = v14;
      v13[4] = 0;
      v13[1] = 0;
      v13[2] = v12;
      *v13 = v11;
      v15 = thread_count;
      if (!thread_count)
      {
        *(_QWORD *)buf = 0x1900000006;
        v64 = 4;
        sysctl((int *)buf, 2u, &thread_count, &v64, 0, 0);
        v15 = thread_count;
      }
      *((_DWORD *)v13 + 14) = v15;
      v13[5] = (uint64_t)sqrt((double)v7) / 2;
      if (!v15)
      {
        *(_QWORD *)buf = 0x1900000006;
        v64 = 4;
        sysctl((int *)buf, 2u, &thread_count, &v64, 0, 0);
        v15 = thread_count;
      }
      v16 = v7 / (2 * v15);
      if (v16 <= 0x8000)
      {
        v16 = 0x8000;
      }
      else if (!v15)
      {
        *(_QWORD *)buf = 0x1900000006;
        v64 = 4;
        sysctl((int *)buf, 2u, &thread_count, &v64, 0, 0);
        v16 = v7 / (2 * thread_count);
      }
      v13[6] = v16;
      if ((uint64_t)v13[5] <= 2047)
        v13[5] = 2048;
      _qsort_big_oid_lookups(v13);
      dispatch_group_wait(v14, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v14);
    }
    else
    {
      _qsort_oid_lookups(v9 + 32 * v10, 0, v5 - v6 - 1);
    }
  }
  if (v8 + 10 == a1 && v8[5])
  {
    if (v5 == v6)
    {
      v23 = 0;
      v24 = v8 + 10;
      goto LABEL_41;
    }
    v25 = 0;
    v26 = 0;
    v17 = 0;
    v27 = v11;
    do
    {
      if (*(_QWORD *)v27 == v26 || !(*(unsigned int (**)(void))(v8[5] + 16))())
      {
        if (dword_1EF19FC90 >= 5)
        {
          v60 = *__error();
          loga = _SILogForLogForCategory(1);
          if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
          {
            v31 = *(_QWORD *)v27;
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = v31;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v25;
            _os_log_impl(&dword_1B8270000, loga, OS_LOG_TYPE_DEFAULT, "1) Skipping oid %lld at index %ld", buf, 0x16u);
          }
          *__error() = v60;
        }
      }
      else
      {
        v29 = &v11[32 * v17];
        v30 = *((_OWORD *)v27 + 1);
        ++v17;
        *(_OWORD *)v29 = *(_OWORD *)v27;
        *((_OWORD *)v29 + 1) = v30;
      }
      v28 = *(_QWORD *)v27;
      v27 += 32;
      v26 = v28;
      ++v25;
    }
    while (v7 != v25);
  }
  else
  {
    v17 = v5 != v6;
    if ((unint64_t)v7 >= 2)
    {
      v18 = v63 + 32 * v62 + 32;
      v19 = 1;
      a4.n128_u64[0] = 134218240;
      do
      {
        if (*(_QWORD *)v18 == *(_QWORD *)(v18 - 32))
        {
          if (dword_1EF19FC90 >= 5)
          {
            v61 = a4;
            v59 = *__error();
            log = _SILogForLogForCategory(1);
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
            {
              v22 = *(_QWORD *)v18;
              *(_DWORD *)buf = v61.n128_u32[0];
              *(_QWORD *)&buf[4] = v22;
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v19;
              _os_log_impl(&dword_1B8270000, log, OS_LOG_TYPE_DEFAULT, "2) Skipping oid %lld at index %ld", buf, 0x16u);
            }
            *__error() = v59;
            a4 = v61;
          }
        }
        else
        {
          v20 = &v11[32 * v17];
          v21 = *(_OWORD *)(v18 + 16);
          ++v17;
          *(_OWORD *)v20 = *(_OWORD *)v18;
          *((_OWORD *)v20 + 1) = v21;
        }
        v18 += 32;
        ++v19;
      }
      while (v7 != v19);
    }
  }
  v24 = v8 + 10;
  if (v8 + 10 == a1 && v8[6])
  {
    v23 = 0;
    if (v17)
    {
      v51 = v63 + 32 * v62 + 8;
      do
      {
        if ((*(unsigned int (**)(void))(v8[6] + 16))())
        {
          v52 = &v11[32 * v23];
          v53 = *(_OWORD *)(v51 + 8);
          ++v23;
          *(_OWORD *)v52 = *(_OWORD *)(v51 - 8);
          *((_OWORD *)v52 + 1) = v53;
        }
        v51 += 32;
        --v17;
      }
      while (v17);
    }
  }
  else
  {
    v23 = v17;
  }
LABEL_41:
  v32 = atomic_load(a1 + 8);
  a1[7] = v32 + v23;
  v33 = *(_QWORD *)(*a1 + 24);
  if (v33)
  {
    v34 = *(_QWORD *)(v33 + 856);
    if (v34)
    {
      if (*(_DWORD *)(v34 + 8))
      {
        v35 = (v23 + 31) >> 5;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        if (v23 >= 0x20)
          v36 = 32;
        else
          v36 = v23;
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = __get_pages_for_keys_block_invoke;
        v66 = &__block_descriptor_tmp_159;
        if (v23 < 0x20)
          v35 = 1;
        v67 = v33;
        v68 = v35;
        v69 = v23;
        v70 = v11;
        v71 = a1;
        dispatch_apply(v36, 0, buf);
      }
    }
  }
  if (v23 >= 2)
  {
    v37 = (char *)malloc_type_malloc(24 * v23, 0x10000402C707793uLL);
    v38 = (uint64_t *)v37;
    v39 = 0;
    *(_OWORD *)v37 = xmmword_1B8631BB0;
    v40 = v63 + 32 * v62;
    v37[20] = (*(_QWORD *)(v40 + 16) & 0x400000000) != 0;
    *((_DWORD *)v37 + 4) = *(_QWORD *)(v40 + 16) >> 2;
    v41 = (_QWORD *)(v40 + 48);
    for (i = 1; i != v23; ++i)
    {
      if ((*v41 >> 2) == (*(v41 - 4) >> 2))
      {
        v43 = &v37[24 * v39];
        ++*((_QWORD *)v43 + 1);
        v43[20] |= (*v41 & 0x400000000) != 0;
      }
      else
      {
        ++v39;
        v44 = &v37[24 * v39];
        *((_QWORD *)v44 + 1) = 1;
        *((_DWORD *)v44 + 4) = *v41 >> 2;
        v44[20] = (*v41 & 0x400000000) != 0;
        *(_QWORD *)v44 = i;
      }
      v41 += 4;
    }
    v45 = v39 + 1;
    if ((unint64_t)(v39 + 1) > 1)
    {
      psort_b(v37, v39 + 1, 0x18uLL, &__block_literal_global_190);
      v46 = (char *)malloc_type_malloc(32 * v23, 0x1000040E990BCCAuLL);
      madvise(v46, 32 * v23, 3);
      v47 = atomic_load(a1 + 8);
      if (v24 != a1 || v47)
      {
        memcpy(v46, v11, 32 * v23);
        v54 = 0;
        v55 = v38 + 1;
        do
        {
          memcpy(&v11[32 * v54], &v46[32 * *(v55 - 1)], 32 * *v55);
          v56 = *v55;
          v55 += 3;
          v54 += v56;
          --v45;
        }
        while (v45);
        v11 = v46;
      }
      else
      {
        v48 = 0;
        v49 = v38 + 1;
        do
        {
          memcpy(&v46[32 * v48], &v11[32 * *(v49 - 1)], 32 * *v49);
          v50 = *v49;
          v49 += 3;
          v48 += v50;
          --v45;
        }
        while (v45);
        v8[4] = v46;
      }
      free(v11);
    }
    free(v38);
  }
}

uint64_t RLEOIDArrayContainsOid(uint64_t a1, unint64_t a2)
{
  pthread_rwlock_t *v4;
  uint64_t v5;
  int v7;
  char v8;
  uint64_t v9;
  int v10;

  v4 = (pthread_rwlock_t *)(a1 + 16);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 16));
  if (*(_BYTE *)(a1 + 384))
    goto LABEL_2;
  v7 = *(_DWORD *)(a1 + 224);
  if (v7)
  {
    if ((*(_QWORD *)(a1 + 216) ^ a2) >> (-4 * v7))
      goto LABEL_2;
  }
  v8 = (60 - 4 * v7) & 0xFC;
  v9 = *(_QWORD *)(a1 + 8 * ((a2 >> v8) & 0xF) + 256);
  if ((v9 & 1) != 0)
  {
    v10 = v7 + 2;
    do
    {
      v8 = (64 - 4 * v10) & 0xFC;
      v9 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((a2 >> v8) & 0xF));
      ++v10;
    }
    while ((v9 & 1) != 0);
  }
  if (!v9)
LABEL_2:
    v5 = 0;
  else
    v5 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a2, ~(-1 << v8));
  pthread_rwlock_unlock(v4);
  return v5;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::ContainsKey(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;
  uint64_t result;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;

  v3 = a2 & a3 & 0x7FFFFFFF;
  v4 = (unsigned int *)(a1 + 12);
  v5 = *(unsigned int *)(a1 + 8);
  v6 = a1 + 12 + 4 * v5;
  if (v5 >= 3)
  {
    v7 = 4 * v5;
    v8 = a1 + 12 + 4 * v5;
    do
    {
      v9 = &v4[v7 >> 3];
      v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        v11 = *--v9;
        v10 = v11;
      }
      if (v9 <= v4)
        break;
      if (v10 == (_DWORD)v3)
      {
        v4 = v9;
        if ((unint64_t)v9 < v6)
          goto LABEL_15;
        return 0;
      }
      if (v10 > v3)
        v8 = (unint64_t)v9;
      else
        v4 = v9;
      v7 = v8 - (_QWORD)v4;
    }
    while (v8 > (unint64_t)v4 && (unint64_t)v7 > 0xB);
  }
  if ((unint64_t)v4 >= v6)
    return 0;
LABEL_15:
  v13 = *v4;
  if (v3 != v13)
  {
    v15 = v4 + 1;
    do
    {
      if ((v13 & 0x80000000) != 0)
      {
        v17 = *(v15 - 2);
        v18 = v17 + (v13 & 0x7FFFFFFF);
        if (v3 >= v17 && v3 <= v18)
          return 1;
        if ((unint64_t)v15 >= v6)
          return 0;
      }
      else
      {
        result = 0;
        if (v3 < v13 || (unint64_t)v15 >= v6)
          return result;
      }
      v16 = *v15++;
      v13 = v16;
    }
    while (v3 != v16);
  }
  return 1;
}

void _qsort_oid_lookups(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  _BOOL4 v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  BOOL v31;
  _OWORD *v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  const char *v36;
  uint64_t v37;

  v6 = malloc_type_malloc(0x800uLL, 0x1000040451B5BE8uLL);
  v6[1] = 0;
  *v6 = 0;
  v7 = 1;
  do
  {
    if (a3 > a2)
    {
      if (v7 <= 128)
        v8 = 128;
      else
        v8 = v7;
      v9 = &v6[2 * v7 + 1];
      while (a3 - a2 > 16)
      {
        v10 = _partition_oid_lookups(a1, a2, a3);
        v11 = v10 - a2;
        if (v10 < a2)
        {
          v34 = __si_assert_copy_extra_268();
          v35 = v34;
          v36 = "";
          if (v34)
            v36 = v34;
          __message_assert(v34, "sdb2_qsort.cpp", 17, "q>=left", v36);
          free(v35);
          if (__valid_fs(-1))
            v37 = 2989;
          else
            v37 = 3072;
          *(_DWORD *)v37 = -559038737;
          abort();
        }
        if (v8 == v7)
        {
          heapsort_b((void *)(a1 + 32 * a2), a3 - a2 + 1, 0x20uLL, &__block_literal_global_10985);
          v7 = v8;
          goto LABEL_36;
        }
        v12 = v11 <= a3 - v10;
        if (v11 <= a3 - v10)
          v13 = v10 - 1;
        else
          v13 = a3;
        if (v12)
          v14 = a2;
        else
          v14 = v10;
        if (v12)
          a2 = v10;
        else
          a3 = v10 - 1;
        *(v9 - 1) = v14;
        *v9 = v13;
        ++v7;
        v9 += 2;
        if (a3 <= a2)
          goto LABEL_36;
      }
      v15 = a1 + 24 + 32 * a2;
      v16 = a2;
      do
      {
        v17 = v16++;
        v18 = (__int128 *)(a1 + 32 * v16);
        v19 = *v18;
        v20 = v18[1];
        v21 = (uint64_t *)(a1 + 32 * v17);
        v22 = *v21;
        v23 = v21[2];
        v24 = v23 == (_QWORD)v20;
        if (*v21 <= (uint64_t)v19)
          v24 = 0;
        v25 = v23 <= (unint64_t)v20 && !v24;
        v26 = v16;
        if (!v25)
        {
          v27 = (uint64_t *)v15;
          while (1)
          {
            v26 = v17;
            v28 = *(v27 - 2);
            v29 = *v27;
            v27[1] = v22;
            v27[2] = v28;
            v27[3] = v23;
            v27[4] = v29;
            if (v26 <= a2)
              break;
            v30 = v27 - 4;
            v22 = *(v27 - 7);
            v23 = *(v27 - 5);
            v31 = v22 > (uint64_t)v19 && v23 == (_QWORD)v20;
            v17 = v26 - 1;
            v27 -= 4;
            if (v23 <= (unint64_t)v20)
            {
              v27 = v30;
              if (!v31)
                break;
            }
          }
        }
        v32 = (_OWORD *)(a1 + 32 * v26);
        *v32 = v19;
        v32[1] = v20;
        v15 += 32;
      }
      while (v16 != a3);
    }
LABEL_36:
    --v7;
    v33 = &v6[2 * v7];
    a2 = *v33;
    a3 = v33[1];
  }
  while (v7);
  free(v6);
}

uint64_t _partition_oid_lookups(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  int64x2_t *v5;
  unint64_t v6;
  int64x2_t *v7;
  int64x2_t *v8;
  unint64_t v9;
  int64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t *v13;
  int64x2_t *v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _BOOL4 v20;
  BOOL v22;
  int64x2_t *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int64x2_t *v27;
  uint64_t v28;
  uint64_t v29;
  int64x2_t *v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BOOL4 v36;
  BOOL v38;
  BOOL v40;
  int64x2_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _BOOL4 v48;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _BOOL4 v58;
  BOOL v60;
  BOOL v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  uint64_t v65;
  int64x2_t v66;
  int64x2_t v67;
  unint64_t v68;
  int64x2_t *v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t *v72;
  int64x2_t v73;
  __int128 *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;

  v3 = a3 - a2;
  v4 = a3 - a2 + 1;
  v5 = (int64x2_t *)(a1 + 32 * a2);
  v6 = a3 - a2 + 2;
  if (a3 - a2 >= -1)
    v6 = v3 + 1;
  v7 = &v5[2 * (v6 >> 1)];
  v8 = (int64x2_t *)(a1 + 32 * a3);
  if (v3 < 1024)
  {
    v13 = (int64x2_t *)(a1 + 32 * a2);
    goto LABEL_24;
  }
  v9 = v4 >> 3;
  v10 = &v5[2 * (v4 >> 3)];
  v11 = v5->i64[0];
  v12 = v10->i64[0];
  v13 = (int64x2_t *)(a1 + 32 * a2);
  if (v5->i64[0] == v10->i64[0])
    goto LABEL_34;
  v14 = &v5[4 * v9];
  v15 = v14->i64[0];
  if (v14->i64[0] != v11 && v15 != v12)
  {
    v17 = v5[1].u64[0];
    v18 = v10[1].u64[0];
    v19 = v14[1].u64[0];
    v20 = v11 < v12;
    if (v17 != v18)
      v20 = 0;
    if (v17 >= v18 && !v20)
    {
      v24 = v12 > v15;
      if (v18 != v19)
        v24 = 0;
      if (v18 <= v19)
      {
        v13 = v10;
        if (!v24)
        {
          if (v11 < v15 && v17 == v19 || (v13 = &v5[4 * v9], v17 < v19))
            v13 = (int64x2_t *)(a1 + 32 * a2);
        }
        goto LABEL_34;
      }
    }
    else
    {
      v22 = v12 < v15;
      if (v18 != v19)
        v22 = 0;
      if (v18 >= v19)
      {
        v13 = v10;
        if (v22)
          goto LABEL_34;
        if (v11 >= v15 || v17 != v19)
        {
          v13 = (int64x2_t *)(a1 + 32 * a2);
          if (v17 >= v19)
            goto LABEL_34;
        }
        goto LABEL_22;
      }
    }
    v13 = v10;
    goto LABEL_34;
  }
LABEL_22:
  v13 = &v5[4 * v9];
LABEL_34:
  v25 = 2 * v9;
  v26 = -(uint64_t)v9;
  v27 = &v7[-2 * v9];
  v28 = v27->i64[0];
  v29 = v7->i64[0];
  if (v27->i64[0] == v7->i64[0])
    goto LABEL_65;
  v30 = &v7[2 * v9];
  v31 = v30->i64[0];
  if (v30->i64[0] == v28 || v31 == v29)
  {
    v7 = v30;
    goto LABEL_66;
  }
  v33 = v27[1].u64[0];
  v34 = v7[1].u64[0];
  v35 = v30[1].u64[0];
  v36 = v28 < v29;
  if (v33 != v34)
    v36 = 0;
  if (v33 < v34 || v36)
  {
    v38 = v29 < v31;
    if (v34 != v35)
      v38 = 0;
    if (v34 >= v35 && !v38)
    {
      v7 = v33 < v35 ? v30 : v27;
      if (v28 < v31 && v33 == v35)
        v7 = v30;
    }
    goto LABEL_66;
  }
  v40 = v29 > v31;
  if (v34 != v35)
    v40 = 0;
  if (v34 <= v35 && !v40)
  {
    if (v28 < v31 && v33 == v35 || (v7 = v30, v33 < v35))
LABEL_65:
      v7 = v27;
  }
LABEL_66:
  v23 = &v8[-2 * v25];
  v41 = &v8[2 * v26];
  v42 = v23->i64[0];
  v43 = v41->i64[0];
  if (v23->i64[0] == v41->i64[0])
    goto LABEL_91;
  v44 = v8->i64[0];
  if (v8->i64[0] == v42 || v44 == v43)
    goto LABEL_24;
  v45 = v23[1].u64[0];
  v46 = v41[1].u64[0];
  v47 = v8[1].u64[0];
  v48 = v42 < v43;
  if (v45 != v46)
    v48 = 0;
  if (v45 >= v46 && !v48)
  {
    v49 = v43 > v44;
    if (v46 != v47)
      v49 = 0;
    if (v46 <= v47 && !v49)
    {
      if (v42 < v44 && v45 == v47 || v45 < v47)
        goto LABEL_91;
LABEL_24:
      v23 = (int64x2_t *)(a1 + 32 * a3);
      goto LABEL_91;
    }
LABEL_90:
    v23 = v41;
    goto LABEL_91;
  }
  v50 = v43 < v44;
  if (v46 != v47)
    v50 = 0;
  if (v46 < v47 || v50)
    goto LABEL_90;
  if (v42 < v44 && v45 == v47)
    goto LABEL_24;
  if (v45 < v47)
    v23 = (int64x2_t *)(a1 + 32 * a3);
LABEL_91:
  v51 = v13->i64[0];
  v52 = v7->i64[0];
  if (v13->i64[0] == v7->i64[0])
    goto LABEL_116;
  v53 = v23->i64[0];
  if (v23->i64[0] == v51 || v53 == v52)
    goto LABEL_108;
  v55 = v13[1].u64[0];
  v56 = v7[1].u64[0];
  v57 = v23[1].u64[0];
  v58 = v51 < v52;
  if (v55 != v56)
    v58 = 0;
  if (v55 >= v56 && !v58)
  {
    v61 = v52 > v53;
    if (v56 != v57)
      v61 = 0;
    if (v56 > v57 || v61)
      goto LABEL_120;
    if (v51 >= v53 || v55 != v57)
    {
      v7 = v23;
      if (v55 >= v57)
        goto LABEL_120;
    }
LABEL_116:
    v7 = v13;
    goto LABEL_120;
  }
  v60 = v52 < v53;
  if (v56 != v57)
    v60 = 0;
  if (v56 >= v57 && !v60)
  {
    if (v51 < v53 && v55 == v57)
    {
LABEL_108:
      v7 = v23;
      goto LABEL_120;
    }
    if (v55 < v57)
      v7 = v23;
    else
      v7 = v13;
  }
LABEL_120:
  v62 = *v7;
  v63 = v7[1];
  v64 = v8[1];
  *v7 = *v8;
  v7[1] = v64;
  *v8 = v62;
  v8[1] = v63;
  v65 = a3 - a2;
  if (a3 > a2)
  {
    v66 = *v5;
    v67 = v5[1];
    v68 = v63.i64[0];
    v69 = (int64x2_t *)(a1 + 32 * a2 + 48);
    do
    {
      v70 = v67;
      v71 = v66;
      v66 = v69[-1];
      v67 = *v69;
      if (v70.i64[0] < v68 || v70.i64[0] == v68 && (vmovn_s64(vcgtq_s64(v71, v62)).u8[0] & 1) == 0)
      {
        v72 = (int64x2_t *)(a1 + 32 * a2);
        v73 = v72[1];
        v69[-3] = *v72;
        v69[-2] = v73;
        *v72 = v71;
        v72[1] = v70;
        ++a2;
      }
      v69 += 2;
      --v65;
    }
    while (v65);
  }
  v74 = (__int128 *)(a1 + 32 * a2);
  v76 = *v74;
  v75 = v74[1];
  v77 = (__int128)v8[1];
  *v74 = (__int128)*v8;
  v74[1] = v77;
  *v8 = (int64x2_t)v76;
  v8[1] = (int64x2_t)v75;
  return a2;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::ContainsKey(uint64_t a1, int a2, int a3)
{
  return (*(_QWORD *)(a1 + 8 * ((a3 & a2) << 16 >> 22) + 8) >> (a3 & a2)) & 1;
}

uint64_t flatPageSearchBucketCompare(unsigned int **a1, unsigned int **a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  const char *v9;
  uint64_t v10;

  v2 = (unint64_t)**a1 >> 3;
  v3 = (unint64_t)**a2 >> 3;
  if (v2 > v3)
    return 1;
  if (v2 >= v3)
  {
    v5 = (unint64_t)**a1 >> 3;
    v6 = (unint64_t)**a2 >> 3;
    v7 = __si_assert_copy_extra(0);
    v8 = v7;
    v9 = "";
    if (v7)
      v9 = v7;
    __message_assert("%s:%u: failed assertion '%s' %s duplicate pages %ld %ld", "FindTermIDs.c", 617, "false", v9, v5, v6);
    free(v8);
    if (__valid_fs(-1))
      v10 = 2989;
    else
      v10 = 3072;
    *(_DWORD *)v10 = -559038737;
    abort();
  }
  return 0xFFFFFFFFLL;
}

void __si_enqueue_work_for_job_block_invoke(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t);
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  _BOOL4 v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  NSObject *v11;
  _QWORD *v12;
  BOOL v13;
  qos_class_t v14;
  qos_class_t v15;
  _opaque_pthread_t *v16;
  pthread_override_s *v17;
  dispatch_block_t v18;
  unsigned int *v19;
  unsigned int v20;
  char *v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  const char *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  unint64_t v31;
  uint64_t block;
  __int128 v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[5];
  if (!v1)
  {
    v21 = __si_assert_copy_extra_521(-1);
    v22 = v21;
    v23 = "";
    if (v21)
      v23 = v21;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIScheduler.c", 714, "queue", v23);
    free(v22);
    if (__valid_fs(-1))
      v24 = 2989;
    else
      v24 = 3072;
    *(_DWORD *)v24 = -559038737;
    abort();
  }
  v2 = a1[4];
  v3 = (void (*)(_QWORD, uint64_t))a1[6];
  v4 = a1[7];
  v5 = (unsigned int *)a1[8];
  v6 = *v1;
  v7 = v2 == 0;
  if (v5)
  {
    if (v2)
    {
      v8 = (unsigned int *)(v2 + 112);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v31 = (unint64_t)v3;
    do
      v10 = __ldaxr(v5);
    while (__stlxr(v10 + 1, v5));
  }
  else
  {
    if (!v2 || v6 && (*(_DWORD *)(v6 + 88) || *(_BYTE *)(v6 + 48)))
    {
      v3(a1[7], 1);
      return;
    }
    v31 = a1[6];
    v19 = (unsigned int *)(v2 + 112);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v7 = 0;
    v5 = 0;
  }
  v11 = v1[2];
  *(int64x2_t *)(v1 + 7) = vaddq_s64(*(int64x2_t *)(v1 + 7), vdupq_n_s64(1uLL));
  v12 = malloc_type_malloc(0x48uLL, 0x10A0040047F2C8DuLL);
  v12[3] = v31;
  v12[4] = v4;
  v12[5] = v5;
  v12[6] = 0;
  v12[7] = v4 ^ v31 ^ (unint64_t)v5;
  if (v7)
  {
    v25 = __si_assert_copy_extra_521(-1);
    v26 = v25;
    v27 = "";
    if (v25)
      v27 = v25;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIScheduler.c", 638, "root", v27);
    free(v26);
    if (__valid_fs(-1))
      v28 = 2989;
    else
      v28 = 3072;
    *(_DWORD *)v28 = -559038737;
    abort();
  }
  *v12 = v2;
  v12[1] = v6;
  v12[2] = v1;
  v13 = *(_DWORD *)(v2 + 116) == 1 && (v1[7] & 0xF) == 0;
  *((_BYTE *)v12 + 64) = v13;
  v14 = qos_class_self();
  v15 = v14;
  if (*(_QWORD *)(v6 + 160) && *(_DWORD *)(v6 + 184) < v14)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(v6 + 8));
    v16 = *(_opaque_pthread_t **)(v6 + 160);
    if (v16)
    {
      if (*(_DWORD *)(v6 + 184) < v15)
      {
        v17 = *(pthread_override_s **)(v6 + 176);
        *(_QWORD *)(v6 + 176) = pthread_override_qos_class_start_np(v16, v15, 0);
        *(_DWORD *)(v6 + 184) = v15;
        if (v17)
          pthread_override_qos_class_end_np(v17);
      }
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 8));
  }
  if (dword_1EF19FCC0 >= 5)
  {
    v29 = *__error();
    v30 = _SILogForLogForCategory(13);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(block) = 67109376;
      HIDWORD(block) = v15;
      LOWORD(v33) = 2048;
      *(_QWORD *)((char *)&v33 + 2) = v12;
      _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "QOS enqueue_work: %d %p", (uint8_t *)&block, 0x12u);
    }
    *__error() = v29;
  }
  if (v15 == QOS_CLASS_USER_INTERACTIVE)
  {
    block = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v33 = 0x40000000;
    *((_QWORD *)&v33 + 1) = __enqueue_work_block_invoke;
    v34 = &__block_descriptor_tmp_54;
    v35 = v12;
    v18 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, &block);
    dispatch_async(v11, v18);
    _Block_release(v18);
  }
  else
  {
    dispatch_async_enforce_qos_class_f();
  }
}

uint64_t SISyncIndex(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result)
  {
    v1 = result;
    if (*(_QWORD *)(result + 1184) && *(_QWORD *)(result + 1040) && *(_QWORD *)(result + 1048))
    {
      si_sync_ctx_create_with_defer_fd(result, 0);
      si_enqueue_work_with_qos(*(_QWORD *)(v1 + 1096), 9, (uint64_t)si_sync_index_delayed0, v2);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

int8x16_t si_sync_ctx_create_with_defer_fd(uint64_t a1, uint64_t a2)
{
  int8x16_t *v4;
  int8x16_t result;
  int8x16_t *v6;

  v4 = (int8x16_t *)malloc_type_calloc(1uLL, 0x90uLL, 0x10B00402663C8FFuLL);
  if (a1)
  {
    v4->i64[0] = a1;
    v4[4].i64[1] = a2;
    v4[5].i64[1] = *(_QWORD *)(a1 + 2128);
    v6 = *(int8x16_t **)(a1 + 2360);
    if (v6)
    {
      v4[2].i64[0] = v6[8].i64[1];
      result = vextq_s8(*v6, *v6, 8uLL);
      v4[1] = result;
    }
  }
  return result;
}

void __si_querypipe_addresults_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14[2];

  v6 = *(_QWORD *)(a1 + 48);
  do
  {
    v7 = v6;
    v6 = *(_QWORD *)(v6 + 80);
  }
  while (v6);
  v8 = (a5 - 1);
  if (a5 == 1)
  {
    v13 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = (const void *)(a4 + 8);
    v11 = *(_QWORD *)(v7 + 40);
    v12 = malloc_type_malloc(8 * v8, 0x100004000313F17uLL);
    memcpy(v12, v10, 8 * v8);
    qsort_oids((uint64_t)v12, v8);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(v9 + 16));
    pthread_rwlock_wrlock((pthread_rwlock_t *)(v11 + 16));
    v14[0] = 0;
    v14[1] = v9 + 216;
    v13 = SIValueSet<unsigned long long>::_SIValueSetAddSortedValues((unint64_t *)(v11 + 216), v12, v8, v14);
    pthread_rwlock_unlock((pthread_rwlock_t *)(v11 + 16));
    pthread_rwlock_unlock((pthread_rwlock_t *)(v9 + 16));
    free(v12);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * *(unsigned int *)(a1 + 64)) += v13;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v8;
}

void qsort_oids(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  size_t v8;
  int v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)a2 >= 2)
  {
    if (a2 > 2047)
    {
      v4 = OSAtomicDequeue(&qsort_cached_allocations_8426, 0);
      if (!v4)
        v4 = malloc_type_malloc(0x40uLL, 0x10300409C00947AuLL);
      v5 = dispatch_group_create();
      v4[3] = v5;
      v4[4] = 0;
      v4[1] = 0;
      v4[2] = a2 - 1;
      *v4 = a1;
      v6 = thread_count_8427;
      if (!thread_count_8427)
      {
        *(_QWORD *)v9 = 0x1900000006;
        v8 = 4;
        sysctl(v9, 2u, &thread_count_8427, &v8, 0, 0);
        v6 = thread_count_8427;
      }
      *((_DWORD *)v4 + 14) = v6;
      v4[5] = (uint64_t)sqrt((double)a2) / 2;
      if (!v6)
      {
        *(_QWORD *)v9 = 0x1900000006;
        v8 = 4;
        sysctl(v9, 2u, &thread_count_8427, &v8, 0, 0);
        v6 = thread_count_8427;
      }
      v7 = a2 / (2 * v6);
      if (v7 <= 0x8000)
      {
        v7 = 0x8000;
      }
      else if (!v6)
      {
        *(_QWORD *)v9 = 0x1900000006;
        v8 = 4;
        sysctl(v9, 2u, &thread_count_8427, &v8, 0, 0);
        v7 = a2 / (2 * thread_count_8427);
      }
      v4[6] = v7;
      if ((uint64_t)v4[5] <= 2047)
        v4[5] = 2048;
      _qsort_big_oid_t(v4);
      dispatch_group_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v5);
    }
    else
    {
      _qsort_oid_t(a1, 0, a2 - 1);
    }
  }
}

uint64_t SIValueSet<unsigned long long>::_SIValueSetAddSortedValues(unint64_t *a1, _QWORD *a2, uint64_t a3, unint64_t *a4)
{
  unint64_t *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD **v9;
  _OWORD *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v30;
  const char *v31;
  char *v32;
  const char *v33;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;

  v4 = a4;
  v36 = a2;
  v37 = &a2[a3];
  v38 = 0;
  v39 = 0;
  if (a3 >= 1 && *((_BYTE *)a1 + 168))
  {
    v6 = *a2;
    v7 = 12;
    *((_DWORD *)a1 + 2) = 12;
    *a1 = v6 & 0xFFFFFFFFFFFF0000;
    *((_BYTE *)a1 + 168) = 0;
LABEL_6:
    v8 = 0;
    v9 = (_QWORD **)(a1 + 2);
    v10 = a1 + 5;
    while (1)
    {
      v11 = *a1;
      if (!v7)
        goto LABEL_24;
      v35 = v8;
      v12 = *a2;
      v13 = 4 * v7;
      v14 = -1 << (-4 * v7);
      if (((v11 ^ *a2) & v14) != 0)
      {
        while (1)
        {
          v24 = *((_DWORD *)a1 + 2);
          *((_DWORD *)a1 + 2) = v24 - 1;
          if (v24 <= 0)
            break;
          if (v24 == 1)
            v14 = 0;
          else
            v14 = -1 << (-4 * (v24 - 1));
          v16 = a1[3];
          if (v16 == 63 || (v15 = *v9) == 0)
          {
            v15 = CFAllocatorAllocate((CFAllocatorRef)a1[4], 8072, 0);
            *v15 = a1[2];
            bzero(v15 + 1, 0x1F80uLL);
            v16 = 0;
            a1[2] = (unint64_t)v15;
          }
          a1[3] = v16 + 1;
          v17 = &v15[16 * v16];
          v18 = *v10;
          v19 = *(_OWORD *)(a1 + 7);
          v20 = *(_OWORD *)(a1 + 9);
          *(_OWORD *)(v17 + 7) = *(_OWORD *)(a1 + 11);
          *(_OWORD *)(v17 + 5) = v20;
          *(_OWORD *)(v17 + 3) = v19;
          *(_OWORD *)(v17 + 1) = v18;
          v21 = *(_OWORD *)(a1 + 13);
          v22 = *(_OWORD *)(a1 + 15);
          v23 = *(_OWORD *)(a1 + 17);
          *(_OWORD *)(v17 + 15) = *(_OWORD *)(a1 + 19);
          *(_OWORD *)(v17 + 13) = v23;
          *(_OWORD *)(v17 + 11) = v22;
          *(_OWORD *)(v17 + 9) = v21;
          *(_OWORD *)(a1 + 9) = 0u;
          *(_OWORD *)(a1 + 11) = 0u;
          *(_OWORD *)(a1 + 13) = 0u;
          *(_OWORD *)(a1 + 15) = 0u;
          *(_OWORD *)(a1 + 17) = 0u;
          *(_OWORD *)(a1 + 19) = 0u;
          *v10 = 0u;
          *(_OWORD *)(a1 + 7) = 0u;
          *((_QWORD *)v10 + ((v11 >> ((64 - 4 * v24) & 0xFC)) & 0xF)) = (unint64_t)(v17 + 1) | 1;
          v11 = *a1;
          if (((*a1 ^ v12) & v14) == 0)
          {
            v7 = *((_DWORD *)a1 + 2);
            v13 = 4 * v7;
            v4 = a4;
            goto LABEL_20;
          }
        }
        v30 = __si_assert_copy_extra_268();
        v27 = v30;
        v31 = "";
        if (v30)
          v31 = v30;
        __message_assert(v30, "SIValueSetInternals.h", 2014, "s->sharedDepth>=0", v31);
LABEL_35:
        free(v27);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
LABEL_20:
      v11 &= v14;
      *a1 = v11;
      if ((v13 - 61) <= 0xFFFFFFBE)
      {
        v32 = __si_assert_copy_extra_268();
        v27 = v32;
        v33 = "";
        if (v32)
          v33 = v32;
        __message_assert(v32, "SIValueSetInternals.h", 2026, "((sizeof(ValueType) * 8) -4*(1+(s->sharedDepth))) <= sizeof(ValueType)*8", v33);
        goto LABEL_35;
      }
      if (!v7)
        break;
      v25 = -1 << (-4 * v7);
      v8 = v35;
LABEL_25:
      v38 = v11;
      v39 = v25;
      v8 += SIValueSet<unsigned long long>::_SIValueSetInnerInsertBulk((uint64_t)(a1 + 5), (uint64_t)&v36, v7, (uint64_t)(a1 + 2), v4);
      v38 = 0;
      v39 = 0;
      a2 = v36;
      if (v36 >= v37)
        return v8;
      v7 = *((_DWORD *)a1 + 2);
      if (!v7)
      {
        v26 = __si_assert_copy_extra_268();
        v27 = v26;
        v28 = "";
        if (v26)
          v28 = v26;
        __message_assert(v26, "SIValueSetInternals.h", 2039, "s->sharedDepth", v28);
        goto LABEL_35;
      }
    }
    v8 = v35;
LABEL_24:
    v7 = 0;
    v25 = 0;
    goto LABEL_25;
  }
  if (a3 >= 1)
  {
    v7 = *((_DWORD *)a1 + 2);
    goto LABEL_6;
  }
  return 0;
}

uint64_t SIValueSet<unsigned long long>::_SIValueSetInnerInsertBulk(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t (**v17)();
  const __CFAllocator *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (***v24)();
  unint64_t v25;
  uint64_t (**v26)();
  uint64_t inserted;
  char *v28;
  char *v30;
  char *v31;
  const char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t (***v35)();
  unint64_t v36;
  char *v37;
  uint64_t (**v38)();
  char *v39;
  char *v40;
  const char *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v45;
  char v47;

  v9 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v45 = a3 + 1;
  if (a3 == -1)
    v10 = 0;
  else
    v10 = -1 << (-4 * (a3 + 1));
  v11 = 64 - 4 * (a3 + 1);
  v47 = 64 - 4 * (a3 + 1);
  if (v11 << 16 > 786432)
  {
    v43 = v11 << 16;
    v12 = 0;
    while (1)
    {
      v13 = SIValueSet<unsigned long long>::FlatContextWithPfx::peek((uint64_t **)a2);
      v14 = (v13 >> v47) & 0xF;
      v15 = *(_QWORD *)(a1 + 8 * v14);
      v16 = (v13 | v9) & v10;
      *(_QWORD *)(a2 + 16) = v16;
      *(_QWORD *)(a2 + 24) = v10;
      if (a5)
        *a5 = v16;
      if ((v15 & 1) != 0)
        goto LABEL_23;
      if (v15)
      {
        v17 = *(uint64_t (***)())v15;
        goto LABEL_18;
      }
      v18 = *(const __CFAllocator **)(a4 + 16);
      if (v43 <= 0x1F0000)
      {
        if (v43 <= 0xF0000)
        {
          v15 = (unint64_t)CFAllocatorAllocate(v18, 136, 0);
          v17 = off_1E6E2A780;
          *(_QWORD *)v15 = off_1E6E2A780;
          *(_OWORD *)(v15 + 8) = 0u;
          *(_OWORD *)(v15 + 24) = 0u;
          *(_OWORD *)(v15 + 40) = 0u;
          *(_OWORD *)(v15 + 56) = 0u;
          *(_OWORD *)(v15 + 72) = 0u;
          *(_OWORD *)(v15 + 88) = 0u;
          *(_OWORD *)(v15 + 104) = 0u;
          *(_OWORD *)(v15 + 120) = 0u;
          goto LABEL_17;
        }
        v19 = (char *)CFAllocatorAllocate(v18, 264, 0);
        v15 = (unint64_t)v19;
        v17 = off_1E6E2A6E0;
        *(_QWORD *)v19 = off_1E6E2A6E0;
        v20 = 0uLL;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        *(_OWORD *)(v19 + 136) = 0u;
        *(_OWORD *)(v19 + 152) = 0u;
        *(_OWORD *)(v19 + 168) = 0u;
        *(_OWORD *)(v19 + 184) = 0u;
        *(_OWORD *)(v19 + 200) = 0u;
        *(_OWORD *)(v19 + 216) = 0u;
        *(_OWORD *)(v19 + 232) = 0u;
      }
      else
      {
        v19 = (char *)CFAllocatorAllocate(v18, 520, 0);
        v15 = (unint64_t)v19;
        *(_QWORD *)v19 = off_1E6E2A820;
        v20 = 0uLL;
        *(_OWORD *)(v19 + 24) = 0u;
        *(_OWORD *)(v19 + 40) = 0u;
        *(_OWORD *)(v19 + 56) = 0u;
        *(_OWORD *)(v19 + 72) = 0u;
        *(_OWORD *)(v19 + 88) = 0u;
        *(_OWORD *)(v19 + 104) = 0u;
        *(_OWORD *)(v19 + 120) = 0u;
        *(_OWORD *)(v19 + 136) = 0u;
        *(_OWORD *)(v19 + 152) = 0u;
        *(_OWORD *)(v19 + 168) = 0u;
        *(_OWORD *)(v19 + 184) = 0u;
        *(_OWORD *)(v19 + 200) = 0u;
        *(_OWORD *)(v19 + 216) = 0u;
        *(_OWORD *)(v19 + 232) = 0u;
        *(_OWORD *)(v19 + 8) = 0u;
        *(_OWORD *)(v19 + 264) = 0u;
        *(_OWORD *)(v19 + 280) = 0u;
        *(_OWORD *)(v19 + 296) = 0u;
        *(_OWORD *)(v19 + 312) = 0u;
        *(_OWORD *)(v19 + 328) = 0u;
        *(_OWORD *)(v19 + 344) = 0u;
        *(_OWORD *)(v19 + 360) = 0u;
        *(_OWORD *)(v19 + 376) = 0u;
        *(_OWORD *)(v19 + 392) = 0u;
        *(_OWORD *)(v19 + 408) = 0u;
        *(_OWORD *)(v19 + 424) = 0u;
        *(_OWORD *)(v19 + 440) = 0u;
        *(_OWORD *)(v19 + 456) = 0u;
        *(_OWORD *)(v19 + 472) = 0u;
        *(_OWORD *)(v19 + 488) = 0u;
        *(_OWORD *)(v19 + 504) = 0u;
        v17 = off_1E6E2A820;
      }
      *(_OWORD *)(v19 + 248) = v20;
LABEL_17:
      *(_QWORD *)(a1 + 8 * v14) = v15;
LABEL_18:
      v12 += ((uint64_t (*)(unint64_t, uint64_t, unint64_t *))v17[1])(v15, a2, a5);
      if ((unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 56))(v15) < 0x3E)
        goto LABEL_24;
      if ((unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v15 + 56))(v15) > 0x3F)
      {
        v30 = __si_assert_copy_extra_268();
        v31 = v30;
        v32 = "";
        if (v30)
          v32 = v30;
        __message_assert(v30, "SIValueSetInternals.h", 1331, "holder->GetRawCount() <= (63)", v32);
        free(v31);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v21 = SIValueSet<unsigned long long>::_SIValueSetBurstRLE((_QWORD *)v15, a3, a4);
      *(_QWORD *)(a1 + 8 * v14) = v21 | 1;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (*(_QWORD *)(a2 + 24) & **(_QWORD **)a2) != *(_QWORD *)(a2 + 16))
        goto LABEL_24;
      v15 = v21;
LABEL_23:
      v12 += SIValueSet<unsigned long long>::_SIValueSetInnerInsertBulk(v15 & 0xFFFFFFFFFFFFFFFELL, a2, v45, a4, a5);
LABEL_24:
      if ((v9 & ~v8) != 0)
        goto LABEL_54;
      *(_QWORD *)(a2 + 16) = v9;
      *(_QWORD *)(a2 + 24) = v8;
      if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8) || (**(_QWORD **)a2 & v8) != v9)
        return v12;
    }
  }
  if ((v9 & ~v8) != 0)
  {
    v33 = SIValueSet<unsigned long long>::FlatContextWithPfx::peek((uint64_t **)a2);
    v34 = (v33 >> v47) & 0xF;
    v35 = *(uint64_t (****)())(a1 + 8 * v34);
    v36 = (v33 | v9) & v10;
    *(_QWORD *)(a2 + 16) = v36;
    *(_QWORD *)(a2 + 24) = v10;
    if (a5)
      *a5 = v36;
    if ((v35 & 1) != 0)
    {
      SIValueSet<unsigned long long>::_SIValueSetInnerInsertBulk((unint64_t)v35 & 0xFFFFFFFFFFFFFFFELL, a2, v45, a4, a5);
    }
    else
    {
      if (v35)
      {
        v38 = *v35;
      }
      else
      {
        v37 = (char *)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
        v38 = off_1E6E2A608;
        *(_QWORD *)v37 = off_1E6E2A608;
        *(_OWORD *)(v37 + 24) = 0u;
        *(_OWORD *)(v37 + 40) = 0u;
        *(_OWORD *)(v37 + 56) = 0u;
        *(_OWORD *)(v37 + 72) = 0u;
        *(_OWORD *)(v37 + 88) = 0u;
        *(_OWORD *)(v37 + 104) = 0u;
        *(_OWORD *)(v37 + 120) = 0u;
        *(_OWORD *)(v37 + 136) = 0u;
        *(_OWORD *)(v37 + 152) = 0u;
        *(_OWORD *)(v37 + 168) = 0u;
        *(_OWORD *)(v37 + 184) = 0u;
        *(_OWORD *)(v37 + 200) = 0u;
        *(_OWORD *)(v37 + 216) = 0u;
        *(_OWORD *)(v37 + 232) = 0u;
        *(_OWORD *)(v37 + 248) = 0u;
        *(_OWORD *)(v37 + 8) = 0u;
        *(_OWORD *)(v37 + 264) = 0u;
        *(_OWORD *)(v37 + 280) = 0u;
        *(_OWORD *)(v37 + 296) = 0u;
        *(_OWORD *)(v37 + 312) = 0u;
        *(_OWORD *)(v37 + 328) = 0u;
        *(_OWORD *)(v37 + 344) = 0u;
        *(_OWORD *)(v37 + 360) = 0u;
        *(_OWORD *)(v37 + 376) = 0u;
        *(_OWORD *)(v37 + 392) = 0u;
        *(_OWORD *)(v37 + 408) = 0u;
        *(_OWORD *)(v37 + 424) = 0u;
        *(_OWORD *)(v37 + 440) = 0u;
        *(_OWORD *)(v37 + 456) = 0u;
        *(_OWORD *)(v37 + 472) = 0u;
        *(_OWORD *)(v37 + 488) = 0u;
        *(_OWORD *)(v37 + 504) = 0u;
        *(_QWORD *)(a1 + 8 * v34) = v37;
      }
      v38[1]();
    }
LABEL_54:
    v39 = __si_assert_copy_extra_268();
    v40 = v39;
    v41 = "";
    if (v39)
      v41 = v39;
    __message_assert(v39, "SIValueSetInternals.h", 1380, "startPrefix == (startPrefix & startMask)", v41);
    free(v40);
    if (__valid_fs(-1))
      v42 = 2989;
    else
      v42 = 3072;
    *(_DWORD *)v42 = -559038737;
    abort();
  }
  v12 = 0;
  do
  {
    v22 = SIValueSet<unsigned long long>::FlatContextWithPfx::peek((uint64_t **)a2);
    v23 = (v22 >> v47) & 0xF;
    v24 = *(uint64_t (****)())(a1 + 8 * v23);
    v25 = (v22 | v9) & v10;
    *(_QWORD *)(a2 + 16) = v25;
    *(_QWORD *)(a2 + 24) = v10;
    if (a5)
      *a5 = v25;
    if ((v24 & 1) != 0)
    {
      inserted = SIValueSet<unsigned long long>::_SIValueSetInnerInsertBulk((unint64_t)v24 & 0xFFFFFFFFFFFFFFFELL, a2, v45, a4, a5);
    }
    else
    {
      if (v24)
      {
        v26 = *v24;
      }
      else
      {
        v28 = (char *)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
        *(_QWORD *)v28 = off_1E6E2A608;
        *(_OWORD *)(v28 + 24) = 0u;
        *(_OWORD *)(v28 + 40) = 0u;
        *(_OWORD *)(v28 + 56) = 0u;
        *(_OWORD *)(v28 + 72) = 0u;
        *(_OWORD *)(v28 + 88) = 0u;
        *(_OWORD *)(v28 + 104) = 0u;
        *(_OWORD *)(v28 + 120) = 0u;
        *(_OWORD *)(v28 + 136) = 0u;
        *(_OWORD *)(v28 + 152) = 0u;
        *(_OWORD *)(v28 + 168) = 0u;
        *(_OWORD *)(v28 + 184) = 0u;
        *(_OWORD *)(v28 + 200) = 0u;
        *(_OWORD *)(v28 + 216) = 0u;
        *(_OWORD *)(v28 + 232) = 0u;
        *(_OWORD *)(v28 + 8) = 0u;
        *(_OWORD *)(v28 + 264) = 0u;
        *(_OWORD *)(v28 + 280) = 0u;
        *(_OWORD *)(v28 + 296) = 0u;
        *(_OWORD *)(v28 + 312) = 0u;
        *(_OWORD *)(v28 + 328) = 0u;
        *(_OWORD *)(v28 + 344) = 0u;
        *(_OWORD *)(v28 + 360) = 0u;
        *(_OWORD *)(v28 + 376) = 0u;
        *(_OWORD *)(v28 + 392) = 0u;
        *(_OWORD *)(v28 + 408) = 0u;
        *(_OWORD *)(v28 + 424) = 0u;
        *(_OWORD *)(v28 + 440) = 0u;
        *(_OWORD *)(v28 + 456) = 0u;
        *(_OWORD *)(v28 + 472) = 0u;
        *(_OWORD *)(v28 + 488) = 0u;
        *(_OWORD *)(v28 + 504) = 0u;
        v26 = off_1E6E2A608;
        *(_OWORD *)(v28 + 248) = 0u;
        *(_QWORD *)(a1 + 8 * v23) = v28;
      }
      inserted = v26[1]();
    }
    v12 += inserted;
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 24) = v8;
  }
  while (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8) && (**(_QWORD **)a2 & v8) == v9);
  return v12;
}

uint64_t SIValueSet<unsigned long long>::FlatContextWithPfx::peek(uint64_t **a1)
{
  uint64_t v1;
  uint64_t *v2;
  char *v4;
  char *v5;
  const char *v6;

  v1 = **a1;
  v2 = a1[3];
  if ((uint64_t *)((unint64_t)v2 & v1) != a1[2])
  {
    v4 = __si_assert_copy_extra_268();
    v5 = v4;
    v6 = "";
    if (v4)
      v6 = v4;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 164, "(key & fMask) == fPfx", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v1 & ~(unint64_t)v2;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::GetRawCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::AddSortedKeysWithContext(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v18;
  unint64_t v19;
  char *v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  _DWORD *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  const char *v52;
  char *v53;
  char *v54;
  const char *v55;
  uint64_t v56;
  char *v57;
  const char *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  const char *v62;
  char *v63;
  char *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;

  if (*a2 >= a2[1] || (uint64_t *)((unint64_t)a2[3] & **a2) != a2[2])
    return 0;
  v6 = SIValueSet<unsigned long long>::FlatContextWithPfx::peek(a2);
  v7 = v6;
  v8 = (char *)(a1 + 12);
  v9 = *(unsigned int *)(a1 + 8);
  v10 = a1 + 12 + 4 * v9;
  v67 = a1 + 12;
  if (v9 >= 3)
  {
    v11 = 4 * v9;
    v12 = a1 + 12 + 4 * v9;
    do
    {
      v13 = &v8[4 * (v11 >> 3)];
      v14 = *(_DWORD *)v13;
      if ((*(_DWORD *)v13 & 0x80000000) != 0)
      {
        v15 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        v14 = v15;
      }
      if (v13 <= v8)
        break;
      if (v14 == v6)
      {
        v8 = v13;
        break;
      }
      if (v14 > v6)
        v12 = (unint64_t)v13;
      else
        v8 = v13;
      v11 = v12 - (_QWORD)v8;
    }
    while (v12 > (unint64_t)v8 && (unint64_t)v11 > 0xB);
  }
  v71 = a3;
  v18 = 0;
  result = 0;
  v66 = a1;
  v19 = a1 + 264;
  v20 = v8;
  v21 = 1;
  v69 = v19;
  while (2)
  {
    v70 = v20;
    v23 = 0;
    v24 = 0;
    v25 = v8;
    while (1)
    {
      v27 = v24;
      v28 = v23;
      if ((unint64_t)v25 >= v10)
        break;
LABEL_29:
      v23 = *(_DWORD *)v25;
      if (v7 < *(_DWORD *)v25)
        break;
      v30 = 1;
LABEL_53:
      if ((unint64_t)(v25 + 4) >= v10)
      {
        v42 = 1;
        v24 = 1;
        if (v27)
          goto LABEL_60;
      }
      else
      {
        v39 = *((_DWORD *)v25 + 1);
        v40 = v39 & 0x7FFFFFFF;
        v41 = v39 >= 0;
        v42 = 2;
        if (v41)
        {
          v42 = 1;
          v24 = 1;
        }
        else
        {
          v24 = v40 + 1;
        }
        if (v27)
        {
LABEL_60:
          v43 = v24 + v23;
          if (v27 + (unint64_t)v28 < v23 || v43 < v28)
            goto LABEL_73;
          v45 = v27 - v24 + v28;
          v46 = v45 + v23;
          v47 = v28 > v23;
          if (v28 < v23)
            v23 = v28;
          if (!v47)
          {
            v45 = v27;
            v46 = v27 + v28;
          }
          if (v43 > v46)
            v24 = v45 + v43 - v46;
          else
            v24 = v45;
        }
      }
      v25 += 4 * v42;
      if (v24 + (unint64_t)v23 >= v7)
        v26 = v30;
      else
        v26 = 0;
      if ((v26 & 1) == 0)
        goto LABEL_74;
    }
    while (2)
    {
      if (!v27)
      {
        v27 = 1;
        v28 = v7;
LABEL_39:
        v31 = 1;
        goto LABEL_40;
      }
      v29 = v27 + v28;
      v30 = 1;
      if (v29 < v7 || (unint64_t)v7 + 1 < v28)
        goto LABEL_51;
      if (v28 <= v7)
      {
        v31 = 0;
        if (v29 > v7)
          goto LABEL_40;
        goto LABEL_38;
      }
      v27 = v27 + v28 - 1;
      v29 = v27 + v7;
      v31 = 1;
      v28 = v7;
      if (v29 <= v7)
      {
LABEL_38:
        v27 = v27 + v7 + 1 - v29;
        goto LABEL_39;
      }
LABEL_40:
      v32 = *a2 + 1;
      v33 = **a2;
      *a2 = v32;
      v34 = (unint64_t)a2[3];
      if ((uint64_t *)(v34 & v33) != a2[2])
      {
        v50 = __si_assert_copy_extra_268();
        v51 = v50;
        v52 = "";
        if (v50)
          v52 = v50;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 172, "(key & fMask) == fPfx", v52);
LABEL_92:
        free(v51);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (v7 != (v33 & ~(_DWORD)v34))
      {
        v53 = __si_assert_copy_extra_268();
        v54 = v53;
        v55 = "";
        if (v53)
          v55 = v53;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v55);
        goto LABEL_97;
      }
      if (v31)
      {
        ++result;
      }
      else if (v71)
      {
        v35 = result;
        v36 = v10;
        SIValueSet<unsigned long long>::SIValueSetInsert(*(unint64_t **)(v71 + 8), *(_QWORD *)v71 | v7);
        result = v35;
        v10 = v36;
        v32 = *a2;
      }
      if (v32 < a2[1])
      {
        v37 = *v32;
        v38 = (unint64_t)a2[3];
        if ((uint64_t *)(v38 & v37) == a2[2])
        {
          v7 = v37 & ~(_DWORD)v38;
          ++v21;
          ++v18;
          if ((unint64_t)v25 < v10)
            goto LABEL_29;
          continue;
        }
      }
      break;
    }
    v30 = 0;
    ++v18;
LABEL_51:
    if ((unint64_t)v25 < v10)
    {
      v23 = *(_DWORD *)v25;
      goto LABEL_53;
    }
LABEL_73:
    v23 = v28;
    v24 = v27;
LABEL_74:
    if (v24 == 1)
    {
      if (v70 >= v25)
      {
        v22 = v69;
        if (v10 + 8 > v69)
          goto LABEL_114;
        v8 = (char *)(v69 - (v10 - (_QWORD)v25));
        if ((char *)v10 != v25)
        {
          v49 = result;
          memmove((void *)(v69 - (v10 - (_QWORD)v25)), v25, v10 - (_QWORD)v25);
          result = v49;
          v22 = v69;
        }
        v10 = v22;
      }
      else
      {
        v8 = v25;
        v22 = v69;
      }
      *(_DWORD *)v70 = v23;
      v20 = v70 + 4;
      if (v30)
        goto LABEL_22;
      goto LABEL_88;
    }
    v20 = v70;
    if (v24)
    {
      v48 = v70 + 4;
      if (v70 + 4 < v25)
      {
        v8 = v25;
        goto LABEL_21;
      }
      if (v10 + 8 <= v69)
      {
        v8 = (char *)(v69 - (v10 - (_QWORD)v25));
        if ((char *)v10 != v25)
        {
          v68 = result;
          memmove((void *)(v69 - (v10 - (_QWORD)v25)), v25, v10 - (_QWORD)v25);
          v48 = v70 + 4;
          result = v68;
        }
        v10 = v69;
LABEL_21:
        *(_DWORD *)v70 = v23;
        *((_DWORD *)v70 + 1) = (v24 - 1) | 0x80000000;
        v22 = v69;
        v20 = (char *)(v48 + 1);
        if (v30)
        {
LABEL_22:
          if ((unint64_t)&v20[v10 - (_QWORD)v8 + 8] > v22)
            goto LABEL_103;
          continue;
        }
LABEL_88:
        v25 = v8;
LABEL_107:
        v8 = v25;
        if (v18 == v21)
          goto LABEL_108;
        v61 = __si_assert_copy_extra_268();
        v54 = v61;
        v62 = "";
        if (v61)
          v62 = v61;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v62);
LABEL_97:
        free(v54);
        if (__valid_fs(-1))
LABEL_98:
          v56 = 2989;
        else
          v56 = 3072;
        *(_DWORD *)v56 = -559038737;
        abort();
      }
LABEL_114:
      v63 = __si_assert_copy_extra_268();
      v64 = v63;
      if (v63)
        v65 = v63;
      else
        v65 = "";
      __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v65);
      free(v64);
      goto LABEL_98;
    }
    break;
  }
  v8 = v25;
  if (!v30)
    goto LABEL_107;
LABEL_103:
  if (v18 >= v21)
  {
    v57 = __si_assert_copy_extra_268();
    v51 = v57;
    v58 = "";
    if (v57)
      v58 = v57;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v58);
    goto LABEL_92;
  }
LABEL_108:
  v59 = v10 - (_QWORD)v8;
  if (v10 > (unint64_t)v8)
  {
    v60 = result;
    memmove(v20, v8, v10 - (_QWORD)v8);
    result = v60;
    v20 += v59;
  }
  *(_DWORD *)(v66 + 8) = (unint64_t)&v20[-v67] >> 2;
  return result;
}

void _qsort_oid_t(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  const char *v24;
  uint64_t v25;

  v6 = malloc_type_malloc(0x800uLL, 0x1000040451B5BE8uLL);
  *v6 = 0;
  v6[1] = 0;
  v7 = 1;
  do
  {
    if (a3 > a2)
    {
      if (v7 <= 128)
        v8 = 128;
      else
        v8 = v7;
      v9 = &v6[2 * v7 + 1];
      while (a3 - a2 > 32)
      {
        v10 = _partition_oid_t(a1, a2, a3);
        v11 = v10 - a2;
        if (v10 < a2)
        {
          v22 = __si_assert_copy_extra_268();
          v23 = v22;
          v24 = "";
          if (v22)
            v24 = v22;
          __message_assert(v22, "qsort_oids.c", 24, "q>=left", v24);
          free(v23);
          if (__valid_fs(-1))
            v25 = 2989;
          else
            v25 = 3072;
          *(_DWORD *)v25 = -559038737;
          abort();
        }
        if (v8 == v7)
        {
          heapsort_b((void *)(a1 + 8 * a2), a3 - a2 + 1, 8uLL, &__block_literal_global_8442);
          v7 = v8;
          goto LABEL_27;
        }
        v12 = v11 <= a3 - v10;
        if (v11 <= a3 - v10)
          v13 = v10 - 1;
        else
          v13 = a3;
        if (v12)
          v14 = a2;
        else
          v14 = v10;
        if (v12)
          a2 = v10;
        else
          a3 = v10 - 1;
        *(v9 - 1) = v14;
        *v9 = v13;
        ++v7;
        v9 += 2;
        if (a3 <= a2)
          goto LABEL_27;
      }
      v15 = a2;
      do
      {
        v16 = v15++;
        v17 = *(_QWORD *)(a1 + 8 * v15);
        v18 = *(_QWORD *)(a1 + 8 * v16);
        for (i = v15; v18 > v17; v16 = i - 1)
        {
          i = v16;
          v20 = a1 + 8 * v16;
          *(_QWORD *)(v20 + 8) = v18;
          if (i <= a2)
            break;
          v18 = *(_QWORD *)(v20 - 8);
        }
        *(_QWORD *)(a1 + 8 * i) = v17;
      }
      while (v15 != a3);
    }
LABEL_27:
    --v7;
    v21 = &v6[2 * v7];
    a2 = *v21;
    a3 = v21[1];
  }
  while (v7);
  free(v6);
}

uint64_t _partition_oid_t(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;

  v3 = a3 - a2;
  v4 = a3 - a2 + 1;
  v5 = (uint64_t *)(a1 + 8 * a2);
  v6 = a3 - a2 + 2;
  if (a3 - a2 >= -1)
    v6 = v3 + 1;
  v7 = &v5[v6 >> 1];
  v8 = (uint64_t *)(a1 + 8 * a3);
  if (v3 < 1024)
  {
    v23 = v7;
    v27 = (uint64_t *)(a1 + 8 * a3);
    v13 = (uint64_t *)(a1 + 8 * a2);
  }
  else
  {
    v9 = v4 >> 3;
    v10 = &v5[v4 >> 3];
    v11 = *v5;
    v12 = *v10;
    v13 = (uint64_t *)(a1 + 8 * a2);
    if (*v5 != *v10)
    {
      v13 = &v5[2 * v9];
      v14 = *v13;
      if (v11 >= *v13)
        v15 = &v5[2 * v9];
      else
        v15 = (uint64_t *)(a1 + 8 * a2);
      if (v12 > v14)
        v15 = v10;
      if (v11 >= v14)
        v16 = (uint64_t *)(a1 + 8 * a2);
      else
        v16 = &v5[2 * v9];
      if (v12 >= v14)
        v10 = v16;
      if (v11 >= v12)
        v10 = v15;
      if (v14 != v11 && v14 != v12)
        v13 = v10;
    }
    v18 = 2 * v9;
    v19 = -(uint64_t)v9;
    v20 = &v7[-v9];
    v21 = *v20;
    v22 = *v7;
    if (*v20 == *v7)
    {
      v23 = &v7[-v9];
    }
    else
    {
      v23 = &v7[v9];
      v24 = *v23;
      if (*v23 != v21 && v24 != v22)
      {
        if (v21 >= v24)
          v26 = v23;
        else
          v26 = v20;
        if (v22 > v24)
          v26 = v7;
        if (v21 >= v24)
          v23 = v20;
        if (v22 < v24)
          v23 = v7;
        if (v21 >= v22)
          v23 = v26;
      }
    }
    v27 = &v8[-v18];
    v28 = &v8[v19];
    v29 = *v27;
    v30 = *v28;
    if (*v27 != *v28)
    {
      v31 = *v8;
      if (v29 >= *v8)
        v32 = (uint64_t *)(a1 + 8 * a3);
      else
        v32 = v27;
      if (v30 > v31)
        v32 = v28;
      if (v29 < v31)
        v27 = (uint64_t *)(a1 + 8 * a3);
      if (v30 < v31)
        v27 = v28;
      if (v29 >= v30)
        v27 = v32;
      if (v31 == v30)
        v27 = (uint64_t *)(a1 + 8 * a3);
      if (v31 == v29)
        v27 = (uint64_t *)(a1 + 8 * a3);
    }
  }
  v33 = *v13;
  v34 = *v23;
  if (*v13 == *v23)
  {
    v23 = v13;
  }
  else
  {
    v35 = *v27;
    if (*v27 == v33 || v35 == v34)
    {
      v23 = v27;
    }
    else if (v33 >= v34)
    {
      if (v34 <= v35)
      {
        if (v33 >= v35)
          v23 = v27;
        else
          v23 = v13;
      }
    }
    else if (v34 >= v35)
    {
      if (v33 >= v35)
        v23 = v13;
      else
        v23 = v27;
    }
  }
  v37 = *v23;
  *v23 = *v8;
  *v8 = v37;
  v38 = *v5;
  v39 = a3 - a2;
  if (a3 > a2)
  {
    v40 = (uint64_t *)(a1 + 8 * a2 + 8);
    do
    {
      v41 = *v40;
      if (v38 <= v37)
      {
        *(v40 - 1) = *(_QWORD *)(a1 + 8 * a2);
        *(_QWORD *)(a1 + 8 * a2++) = v38;
      }
      ++v40;
      v38 = v41;
      --v39;
    }
    while (v39);
    v38 = *(_QWORD *)(a1 + 8 * a2);
    v37 = *v8;
  }
  *(_QWORD *)(a1 + 8 * a2) = v37;
  *v8 = v38;
  return a2;
}

uint64_t SIValueSet<unsigned long long>::FlatContextWithPfx::nextKey(uint64_t **a1)
{
  uint64_t v1;
  uint64_t *v2;
  char *v4;
  char *v5;
  const char *v6;

  v1 = *(*a1)++;
  v2 = a1[3];
  if ((uint64_t *)((unint64_t)v2 & v1) != a1[2])
  {
    v4 = __si_assert_copy_extra_268();
    v5 = v4;
    v6 = "";
    if (v4)
      v6 = v4;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 172, "(key & fMask) == fPfx", v6);
    free(v5);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  return v1 & ~(unint64_t)v2;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::AddSortedKeysWithContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t Key;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(uint64_t **)a2;
  if (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8))
  {
    if (a3)
    {
      do
      {
        if ((*(_QWORD *)(a2 + 24) & *v3) != *(_QWORD *)(a2 + 16))
          break;
        Key = SIValueSet<unsigned long long>::FlatContextWithPfx::nextKey((uint64_t **)a2);
        v8 = 1 << Key;
        v9 = a1 + ((uint64_t)((unint64_t)((__int16)Key >> 6) << 48) >> 45);
        v12 = *(_QWORD *)(v9 + 8);
        v10 = (uint64_t *)(v9 + 8);
        v11 = v12;
        if (((1 << Key) & v12) == 0)
          goto LABEL_11;
        SIValueSet<unsigned long long>::SIValueSetInsert(*(unint64_t **)(a3 + 8), *(_QWORD *)a3 | Key);
        v3 = *(uint64_t **)a2;
      }
      while (*(_QWORD *)a2 < *(_QWORD *)(a2 + 8));
    }
    else
    {
      while ((*(_QWORD *)(a2 + 24) & *v3) == *(_QWORD *)(a2 + 16))
      {
        v13 = SIValueSet<unsigned long long>::FlatContextWithPfx::nextKey((uint64_t **)a2);
        v8 = 1 << v13;
        v14 = a1 + ((uint64_t)((unint64_t)(v13 >> 6) << 48) >> 45);
        v15 = *(_QWORD *)(v14 + 8);
        v10 = (uint64_t *)(v14 + 8);
        v11 = v15;
        if (((1 << v13) & v15) == 0)
        {
LABEL_11:
          *v10 = v8 | v11;
          return 1;
        }
        v3 = *(uint64_t **)a2;
        if (*(_QWORD *)a2 >= *(_QWORD *)(a2 + 8))
          return 0;
      }
    }
  }
  return 0;
}

uint64_t db_get_id_for_field_locked(int *a1, char *a2)
{
  uint8_t *v2;
  uint64_t v3;
  int v6;
  NSObject *v7;
  int v8;
  char *v9;
  char *v10;
  const char *v11;
  uint8_t buf[40];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *a1;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "db_get_id_for_field_locked";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 289;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v8;
      _os_log_error_impl(&dword_1B8270000, v7, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v6;
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    if (v9)
      v11 = v9;
    else
      v11 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 289, v11);
    free(v10);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  memset(buf, 0, 32);
  v2 = (uint8_t *)internal_copy_field_ids((uint64_t)a1, a2, (uint64_t)buf, 8uLL, 1);
  if (v2)
    v3 = *(unsigned int *)v2;
  else
    v3 = 4294967294;
  if (v2 != buf)
    free(v2);
  return v3;
}

BOOL everythingQuery(uint64_t a1)
{
  _BYTE *v1;

  if (**(_BYTE **)a1 == 42
    && !*(_BYTE *)(*(_QWORD *)a1 + 1)
    && *(_DWORD *)(a1 + 24) == 1
    && (v1 = *(_BYTE **)(a1 + 72), *v1 == 42))
  {
    return v1[1] == 0;
  }
  else
  {
    return 0;
  }
}

CFStringRef copyQueryString(uint64_t a1)
{
  uint64_t v1;
  const UInt8 *v2;
  size_t v3;
  CFStringRef v4;
  CFStringRef v5;

  if ((*(_WORD *)(a1 + 40) & 0xFFF7) != 4)
    return 0;
  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(const UInt8 **)(v1 + 72);
  if (v2)
    v3 = strlen(*(const char **)(v1 + 72));
  else
    v3 = 0;
  v5 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, v3, 0x8000100u, 0);
  v4 = v5;
  if (v5)
  {
    CFRetain(v5);
    CFRelease(v4);
  }
  return v4;
}

int *_CIQueryNodeForString(uint64_t a1, const __CFString *a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, int a7, int a8)
{
  int v15;
  int v16;
  _BOOL4 v17;
  unsigned int v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  int *v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  unsigned int v27;
  char v28;
  int v29;
  char v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  unint64_t v50;
  const char *v51;
  char *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int is_fuzzy;
  uint64_t v59;
  uint64_t v60;
  char is_prefix;
  _QWORD *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  __int16 v83;
  uint64_t v84;
  char *v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  char *v93;
  size_t v94;
  _BOOL4 v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 *v98;
  _BOOL4 v99;
  int v100;
  int v101;
  unsigned __int8 *v102;
  unint64_t v103;
  unint64_t v105;
  UChar32 v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  char v121;
  unint64_t v122;
  int v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char v129;
  unsigned __int8 *v130;
  BOOL v132;
  BOOL v133;
  _BOOL4 v134;
  unsigned int v135;
  unint64_t v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  int v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  _OWORD *v146;
  _BYTE *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  _BYTE *Term;
  uint64_t v155;
  uint64_t raw;
  char v157;
  unsigned __int8 *v158;
  char v159;
  uint64_t v160;
  unsigned __int8 *v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  unsigned __int8 *v166;
  char v167;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 *v173;
  char v174;
  unsigned int v176;
  unsigned int v177;
  int v179;
  int v181;
  uint64_t v182;
  char v183;
  _QWORD *v184;
  int v185;
  int v186;
  int v187;
  int v189;
  char *v191;
  unint64_t v192;
  char v193;
  _QWORD *v195;
  _BOOL4 v196;
  uint64_t v197;
  _BOOL4 v198;
  int *v199;
  int v200;
  int v201;
  int v202;
  char __s1[33];
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  _BYTE v216[31];
  uint64_t v217;

  v217 = *MEMORY[0x1E0C80C00];
  icu_locale_create();
  if ((a4 & 0x820) == 0x20)
    v15 = a4 & 0x7FFDB00F;
  else
    v15 = a4 & 0x7FFDB00F | 0x100;
  if ((a4 & 4) != 0)
    v16 = a4 & 0x7FFDB00F;
  else
    v16 = v15;
  v200 = a4;
  if (a1 && *(_BYTE *)(a1 + 37))
  {
    v17 = (a7 & 0x84) == 4 && (int)a3 > 1;
    if ((_DWORD)a3 == 1 && (a4 & 4) == 0)
    {
      if (CFStringGetLength(a2) && CFStringGetCharacterAtIndex(a2, 0) == 42)
      {
        bzero(&__s1[3], 0x411uLL);
        *(_WORD *)__s1 = 513;
        LOBYTE(v18) = 1;
        v19 = 3;
        v20 = 2;
        goto LABEL_76;
      }
      v202 = 0;
      v29 = a4;
      if ((a4 & 0x800) == 0)
        goto LABEL_47;
LABEL_54:
      v31 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8uLL, 0x6085D6BuLL);
      if (!v31)
        _log_fault_for_malloc_failure();
      v201 = v16;
      v35 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x400uLL, 0x6085D6BuLL);
      if (!v35)
        _log_fault_for_malloc_failure();
      *v31 = v35;
      CFStringGetFileSystemRepresentation(a2, v35, 1024);
      v193 = 0;
      v198 = 0;
      v36 = 1;
      v202 = 1;
      v34 = a3;
      goto LABEL_134;
    }
  }
  else
  {
    v17 = (~a7 & 0xC) == 0;
  }
  if ((int)a3 >= 2 && !a4 && CFEqual(a2, CFSTR("*")))
  {
    if (v17)
      v21 = 296;
    else
      v21 = 360;
    if (v21 > *MEMORY[0x1E0C85AD8])
      ++sTotal_9538;
    v22 = 1;
    v23 = (int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v21, 0x31F9A007uLL);
    v24 = a3;
    if (!v23)
      _log_fault_for_malloc_failure();
    *((_QWORD *)v23 + 4) = v23 + 10;
    *v23 = 1;
    v23[1] = v16;
    v23[2] = 0;
    memset(v216, 0, sizeof(v216));
    v215 = 0u;
    v214 = 0u;
    v213 = 0u;
    v212 = 0u;
    v211 = 0u;
    v210 = 0u;
    v209 = 0u;
    v208 = 0u;
    v207 = 0u;
    v206 = 0u;
    v205 = 0u;
    v204 = 0u;
    memset(&__s1[1], 0, 32);
    __s1[0] = 1;
    if ((a7 & 4) == 0)
    {
      v22 = 2;
      __s1[1] = 2;
    }
    v25 = a3 >> 28;
    if (a3 >> 28)
    {
      v37 = &__s1[v22];
      *v37 = a3 | 0x80;
      v37[1] = (a3 >> 7) | 0x80;
      v37[2] = (a3 >> 14) | 0x80;
      v22 |= 4uLL;
      v37[3] = (a3 >> 21) | 0x80;
      v27 = a3 >> 28;
    }
    else if ((a3 & 0xFE00000) != 0)
    {
      v26 = &__s1[v22];
      *v26 = a3 | 0x80;
      v26[1] = (a3 >> 7) | 0x80;
      v22 += 3;
      v26[2] = (a3 >> 14) | 0x80;
      v27 = (a3 & 0xFE00000) >> 21;
    }
    else if ((a3 & 0x1FC000) != 0)
    {
      v191 = &__s1[v22];
      *v191 = a3 | 0x80;
      v22 += 2;
      v191[1] = (a3 >> 7) | 0x80;
      v27 = (a3 & 0x1FC000) >> 14;
    }
    else if ((a3 & 0x3F80) != 0)
    {
      __s1[v22++] = a3 | 0x80;
      v27 = (unsigned __int16)(a3 & 0x3F80) >> 7;
    }
    else
    {
      LOBYTE(v27) = a3;
    }
    v38 = &__s1[v22];
    *v38 = v27;
    *(_WORD *)(v38 + 1) = 42;
    v39 = *((_QWORD *)v23 + 4);
    v40 = strdup(__s1);
    if ((v16 & 0x8000) != 0)
      v41 = v16 & 0x7FFCB108;
    else
      v41 = v16;
    if ((v41 & 0x3100) != 0)
      v42 = 8;
    else
      v42 = 12;
    v43 = v42 & 0xFFFFFFFE | v41 & 1;
    if ((v41 & 0x10000) != 0)
      v43 |= (v41 >> 8) & 0x7C00 | 0x10;
    v44 = v43 | v41 & 2;
    *(_QWORD *)v39 = v40;
    *(_QWORD *)(v39 + 8) = 0;
    *(_DWORD *)(v39 + 16) = v41;
    *(_DWORD *)(v39 + 20) = -1;
    *(_QWORD *)(v39 + 24) = v44;
    *(_OWORD *)(v39 + 32) = 0u;
    *(_OWORD *)(v39 + 48) = 0u;
    if (v17)
    {
      v45 = 1;
    }
    else
    {
      *(_WORD *)__s1 = 513;
      if (v25)
      {
        __s1[2] = a3 | 0x80;
        __s1[3] = (a3 >> 7) | 0x80;
        __s1[4] = (a3 >> 14) | 0x80;
        __s1[5] = (a3 >> 21) | 0x80;
        v47 = 7;
        v48 = 6;
        v46 = a3 >> 28;
      }
      else if ((a3 & 0xFE00000) != 0)
      {
        __s1[2] = a3 | 0x80;
        __s1[3] = (a3 >> 7) | 0x80;
        __s1[4] = (a3 >> 14) | 0x80;
        v46 = (a3 & 0xFE00000) >> 21;
        v47 = 6;
        v48 = 5;
      }
      else if ((a3 & 0x1FC000) != 0)
      {
        __s1[2] = a3 | 0x80;
        __s1[3] = (a3 >> 7) | 0x80;
        v46 = (a3 & 0x1FC000) >> 14;
        v47 = 5;
        v48 = 4;
      }
      else if ((a3 & 0x3F80) != 0)
      {
        __s1[2] = a3 | 0x80;
        v46 = (unsigned __int16)(a3 & 0x3F80) >> 7;
        v47 = 4;
        v48 = 3;
      }
      else
      {
        v47 = 3;
        v48 = 2;
        LOBYTE(v46) = a3;
      }
      __s1[v48] = v46;
      v66 = &__s1[v47];
      *v66 = 42;
      v66[1] = 0;
      v67 = *((_QWORD *)v23 + 4);
      *(_QWORD *)(v67 + 64) = strdup(__s1);
      *(_QWORD *)(v67 + 72) = 0;
      *(_DWORD *)(v67 + 80) = v41;
      *(_DWORD *)(v67 + 84) = -1;
      *(_QWORD *)(v67 + 88) = v44;
      v45 = 2;
      *(_OWORD *)(v67 + 96) = 0u;
      *(_OWORD *)(v67 + 112) = 0u;
      v24 = a3;
    }
    __s1[0] = 4;
    if (v25)
    {
      __s1[1] = v24 | 0x80;
      __s1[2] = (v24 >> 7) | 0x80;
      __s1[3] = (v24 >> 14) | 0x80;
      __s1[4] = (v24 >> 21) | 0x80;
      v69 = 6;
      v70 = 5;
      LOBYTE(v68) = a3 >> 28;
    }
    else if ((v24 & 0xFE00000) != 0)
    {
      __s1[1] = v24 | 0x80;
      __s1[2] = (v24 >> 7) | 0x80;
      __s1[3] = (v24 >> 14) | 0x80;
      v68 = (v24 & 0xFE00000) >> 21;
      v69 = 5;
      v70 = 4;
    }
    else if ((v24 & 0x1FC000) != 0)
    {
      __s1[1] = v24 | 0x80;
      __s1[2] = (v24 >> 7) | 0x80;
      v68 = (v24 & 0x1FC000) >> 14;
      v69 = 4;
      v70 = 3;
    }
    else if ((v24 & 0x3F80) != 0)
    {
      __s1[1] = v24 | 0x80;
      v68 = (unsigned __int16)(v24 & 0x3F80) >> 7;
      v69 = 3;
      v70 = 2;
    }
    else
    {
      v69 = 2;
      v70 = 1;
      LOBYTE(v68) = v24;
    }
    __s1[v70] = v68;
    v71 = &__s1[v69];
    *v71 = 42;
    v71[1] = 0;
    v72 = *((_QWORD *)v23 + 4) + ((unint64_t)v45 << 6);
    *(_QWORD *)v72 = strdup(__s1);
    *(_QWORD *)(v72 + 8) = 0;
    *(_DWORD *)(v72 + 16) = v41;
    *(_DWORD *)(v72 + 20) = -1;
    *(_QWORD *)(v72 + 24) = v44;
    *(_OWORD *)(v72 + 32) = 0u;
    *(_OWORD *)(v72 + 48) = 0u;
    __s1[0] = 2;
    if (v25)
    {
      __s1[1] = a3 | 0x80;
      __s1[2] = (a3 >> 7) | 0x80;
      __s1[3] = (a3 >> 14) | 0x80;
      __s1[4] = (a3 >> 21) | 0x80;
      v74 = 6;
      v75 = 5;
      LOBYTE(v73) = a3 >> 28;
    }
    else if ((a3 & 0xFE00000) != 0)
    {
      __s1[1] = a3 | 0x80;
      __s1[2] = (a3 >> 7) | 0x80;
      __s1[3] = (a3 >> 14) | 0x80;
      v73 = (a3 & 0xFE00000) >> 21;
      v74 = 5;
      v75 = 4;
    }
    else if ((a3 & 0x1FC000) != 0)
    {
      __s1[1] = a3 | 0x80;
      __s1[2] = (a3 >> 7) | 0x80;
      v73 = (a3 & 0x1FC000) >> 14;
      v74 = 4;
      v75 = 3;
    }
    else if ((a3 & 0x3F80) != 0)
    {
      __s1[1] = a3 | 0x80;
      v73 = (unsigned __int16)(a3 & 0x3F80) >> 7;
      v74 = 3;
      v75 = 2;
    }
    else
    {
      v74 = 2;
      v75 = 1;
      LOBYTE(v73) = a3;
    }
    __s1[v75] = v73;
    v76 = &__s1[v74];
    *v76 = 42;
    v76[1] = 0;
    v77 = *((_QWORD *)v23 + 4) + ((unint64_t)(v45 + 1) << 6);
    *(_QWORD *)v77 = strdup(__s1);
    *(_QWORD *)(v77 + 8) = 0;
    *(_DWORD *)(v77 + 16) = v41;
    *(_DWORD *)(v77 + 20) = -1;
    *(_QWORD *)(v77 + 24) = v44;
    *(_OWORD *)(v77 + 32) = 0u;
    *(_OWORD *)(v77 + 48) = 0u;
    __s1[0] = 3;
    if (v25)
    {
      __s1[1] = a3 | 0x80;
      __s1[2] = (a3 >> 7) | 0x80;
      __s1[3] = (a3 >> 14) | 0x80;
      __s1[4] = (a3 >> 21) | 0x80;
      v78 = 6;
      v79 = 5;
    }
    else if ((a3 & 0xFE00000) != 0)
    {
      __s1[1] = a3 | 0x80;
      __s1[2] = (a3 >> 7) | 0x80;
      __s1[3] = (a3 >> 14) | 0x80;
      v25 = (a3 & 0xFE00000) >> 21;
      v78 = 5;
      v79 = 4;
    }
    else if ((a3 & 0x1FC000) != 0)
    {
      __s1[1] = a3 | 0x80;
      __s1[2] = (a3 >> 7) | 0x80;
      v25 = (a3 & 0x1FC000) >> 14;
      v78 = 4;
      v79 = 3;
    }
    else if ((a3 & 0x3F80) != 0)
    {
      __s1[1] = a3 | 0x80;
      v25 = (unsigned __int16)(a3 & 0x3F80) >> 7;
      v78 = 3;
      v79 = 2;
    }
    else
    {
      v78 = 2;
      v79 = 1;
      LOBYTE(v25) = a3;
    }
    __s1[v79] = v25;
    v80 = &__s1[v78];
    *v80 = 42;
    v80[1] = 0;
    v81 = *((_QWORD *)v23 + 4) + ((unint64_t)(v45 + 2) << 6);
    *(_QWORD *)v81 = strdup(__s1);
    *(_QWORD *)(v81 + 8) = 0;
    *(_DWORD *)(v81 + 16) = v41;
    *(_DWORD *)(v81 + 20) = -1;
    *(_QWORD *)(v81 + 24) = v44;
    *(_OWORD *)(v81 + 32) = 0u;
    *(_OWORD *)(v81 + 48) = 0u;
    v23[6] = v45 + 3;
    goto LABEL_313;
  }
  v28 = (int)a3 < 2 || v17;
  v29 = a4;
  if ((v28 & 1) == 0 && (a4 & 0x824) == 0 && *(_BYTE *)(a1 + 15162))
  {
    bzero(&__s1[2], 0x412uLL);
    *(_WORD *)__s1 = 513;
    v18 = a3 >> 28;
    if (a3 >> 28)
    {
      __s1[2] = a3 | 0x80;
      __s1[3] = (a3 >> 7) | 0x80;
      __s1[4] = (a3 >> 14) | 0x80;
      __s1[5] = (a3 >> 21) | 0x80;
      v19 = 7;
      v20 = 6;
    }
    else if ((a3 & 0xFE00000) != 0)
    {
      __s1[2] = a3 | 0x80;
      __s1[3] = (a3 >> 7) | 0x80;
      __s1[4] = (a3 >> 14) | 0x80;
      v18 = (a3 & 0xFE00000) >> 21;
      v19 = 6;
      v20 = 5;
    }
    else if ((a3 & 0x1FC000) != 0)
    {
      __s1[2] = a3 | 0x80;
      __s1[3] = (a3 >> 7) | 0x80;
      v18 = (a3 & 0x1FC000) >> 14;
      v19 = 5;
      v20 = 4;
    }
    else if ((a3 & 0x3F80) != 0)
    {
      __s1[2] = a3 | 0x80;
      v18 = (unsigned __int16)(a3 & 0x3F80) >> 7;
      v19 = 4;
      v20 = 3;
    }
    else
    {
      v19 = 3;
      v20 = 2;
      LOBYTE(v18) = a3;
    }
LABEL_76:
    __s1[v20] = v18;
    v49 = CIDecomposeCFString(a2, __s1, v19);
    v50 = *MEMORY[0x1E0C85AD8];
    if (v49)
    {
      v51 = v49;
      if (v50 <= 0xE7)
        ++sTotal_9538;
      v23 = (int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0xE8uLL, 0x31F9A007uLL);
      if (!v23)
        _log_fault_for_malloc_failure();
      *((_QWORD *)v23 + 4) = v23 + 10;
      *v23 = 1;
      v23[1] = v16;
      v23[2] = 1;
      if ((a4 & 0x8000) != 0)
      {
        v82 = (char *)&v51[v19];
        v83 = *(_WORD *)&v51[v19];
        *(_WORD *)&v51[v19] = 42;
        v84 = *((_QWORD *)v23 + 4);
        v85 = strdup(v51);
        v86 = v16 & 0x7FFCB108;
        if ((v16 & 0x8000) == 0)
          v86 = v16;
        if ((v86 & 0x3100) != 0)
          v87 = 8;
        else
          v87 = 12;
        v88 = v87 & 0xFFFFFFFE | v86 & 1;
        *(_QWORD *)v84 = v85;
        *(_QWORD *)(v84 + 8) = 0;
        if ((v86 & 0x10000) != 0)
          v88 |= (v86 >> 8) & 0x7C00 | 0x10;
        v89 = v88 | v86 & 2;
        if (a3 > 1)
          v90 = -1;
        else
          v90 = a3;
        *(_DWORD *)(v84 + 16) = v86;
        *(_DWORD *)(v84 + 20) = v90;
        *(_QWORD *)(v84 + 24) = v89;
        *(_OWORD *)(v84 + 32) = 0u;
        *(_OWORD *)(v84 + 48) = 0u;
        *(_WORD *)v82 = v83;
        *(_QWORD *)(*((_QWORD *)v23 + 4) + 8) = strdup(v82);
        v91 = icu_regex_create();
        v65 = *((_QWORD *)v23 + 4);
        *(_QWORD *)(v65 + 40) = v91;
        v64 = 1;
      }
      else
      {
        v52 = strdup(v51);
        v53 = v16 & 0x7FFCB108;
        if ((v16 & 0x8000) == 0)
          v53 = v16;
        if ((v53 & 0x3100) != 0)
          v54 = 8;
        else
          v54 = 12;
        v55 = v54 & 0xFFFFFFFE | v53 & 1;
        *((_QWORD *)v23 + 10) = 0;
        *((_QWORD *)v23 + 11) = 0;
        if ((v53 & 0x10000) != 0)
          v55 |= (v53 >> 8) & 0x7C00 | 0x10;
        v56 = v55 | v53 & 2;
        if (a3 > 1)
          v57 = -1;
        else
          v57 = a3;
        *((_QWORD *)v23 + 5) = v52;
        *((_QWORD *)v23 + 6) = 0;
        v23[14] = v53;
        v23[15] = v57;
        *((_QWORD *)v23 + 8) = v56;
        *((_QWORD *)v23 + 9) = 0;
        v23[24] = 0;
        v23[25] = a8;
        icu_local_id();
        *(_QWORD *)(*((_QWORD *)v23 + 4) + 32) = icu_search_context_create_with_wildcard_limit();
        is_fuzzy = icu_search_context_is_fuzzy();
        v59 = *((_QWORD *)v23 + 4);
        if (is_fuzzy)
        {
          v60 = *(_QWORD *)(v59 + 32);
          is_prefix = icu_search_context_is_prefix();
          v62 = la_init(v60, is_prefix);
          v59 = *((_QWORD *)v23 + 4);
          *(_QWORD *)(v59 + 48) = v62;
        }
        *(_QWORD *)(v59 + 64) = 0;
        *(_QWORD *)(v59 + 72) = 0;
        *(_DWORD *)(v59 + 80) = 100;
        *(_DWORD *)(v59 + 84) = a3;
        *(_DWORD *)(v59 + 88) = 8;
        *(_OWORD *)(v59 + 92) = 0u;
        *(_OWORD *)(v59 + 108) = 0u;
        *(_DWORD *)(v59 + 124) = 0;
        v63 = *((_QWORD *)v23 + 4);
        *(_QWORD *)(v63 + 128) = 0;
        *(_QWORD *)(v63 + 136) = 0;
        *(_DWORD *)(v63 + 144) = 100;
        *(_DWORD *)(v63 + 148) = a3;
        *(_DWORD *)(v63 + 152) = 8;
        *(_OWORD *)(v63 + 156) = 0u;
        *(_OWORD *)(v63 + 172) = 0u;
        *(_DWORD *)(v63 + 188) = 0;
        v64 = FillQueryNodeRangePatternsCopy(*((_QWORD *)v23 + 4) + 64, a2, a2) + 1;
        v65 = *((_QWORD *)v23 + 4);
      }
      v92 = *(_DWORD *)(v65 + 20);
      *(_DWORD *)(v65 + 16) |= 8u;
      if (v92 == -1)
        *(_DWORD *)(v65 + 20) = a3;
      v23[6] = v64;
      if (v51 != __s1)
      {
        v93 = (char *)v51;
LABEL_312:
        free(v93);
        goto LABEL_313;
      }
    }
    else
    {
      if (v50 <= 0x27)
        ++sTotal_9538;
      v23 = (int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
      if (!v23)
        _log_fault_for_malloc_failure();
      v23[2] = 0;
    }
    goto LABEL_313;
  }
  v202 = 0;
  if ((a4 & 0x800) != 0)
    goto LABEL_54;
  if (!(_DWORD)a3)
  {
    v30 = atomic_load((unsigned int *)(a1 + 28));
    if ((v30 & 0x10) != 0)
    {
      v201 = v16;
      v31 = 0;
LABEL_74:
      v198 = 1;
      goto LABEL_131;
    }
  }
LABEL_47:
  v201 = v16;
  if ((v29 & 0x6008000) == 0)
  {
    v31 = (_QWORD *)ContentIndexCopyQueryTerms((uint64_t)a2, a6, a5, 16 * *(unsigned __int8 *)(a1 + 38), &v202);
    goto LABEL_74;
  }
  bzero(__s1, 0x414uLL);
  v32 = CIDecomposeCFString(a2, __s1, 0);
  v198 = v32 == 0;
  if (v32)
  {
    v33 = v32;
    v31 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8uLL, 0x6085D6BuLL);
    v34 = a3;
    if (!v31)
      _log_fault_for_malloc_failure();
    if (v33 == __s1)
      v33 = strdup(__s1);
    *v31 = v33;
    v202 = 1;
    goto LABEL_132;
  }
  v31 = 0;
LABEL_131:
  v34 = a3;
LABEL_132:
  v36 = v202;
  if (!v202)
  {
    if (*MEMORY[0x1E0C85AD8] <= 0x27uLL)
      ++sTotal_9538;
    v23 = (int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x28uLL, 0x31F9A007uLL);
    if (!v23)
      _log_fault_for_malloc_failure();
LABEL_309:
    v189 = 0;
    goto LABEL_310;
  }
  v193 = 1;
LABEL_134:
  v197 = (v36 - 1);
  v94 = ((uint64_t)v36 << 6) + 16 * (int)v197 + 40;
  if (!(v94 >> 17) && v94 > *MEMORY[0x1E0C85AD8])
    ++sTotal_9538;
  v23 = (int *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v94, 0x31F9A007uLL);
  if (!v23)
    _log_fault_for_malloc_failure();
  *v23 = 0;
  v23[1] = v201;
  v95 = v34 == 0;
  if (v36 <= 1)
    v95 = 0;
  v196 = v95;
  if (v36 >= 1)
  {
    v96 = 0;
    v97 = (uint64_t)&v23[4 * (int)v197 + 10];
    v199 = v23;
    v195 = v31;
    while (1)
    {
      v98 = (unsigned __int8 *)v31[v96];
      v99 = v196;
      if (v96 != v197)
        v99 = 0;
      if (v99 && v198)
      {
        v100 = strlen((const char *)v31[v96]);
        v101 = v100;
        if (v100 >= 2)
        {
          v102 = &v98[v100];
          if (*(v102 - 1) == 42)
          {
            v103 = (unint64_t)(v102 - 2);
            if (*(v102 - 2) != 92 || v103 <= (unint64_t)v98)
            {
              v105 = *v98;
              v106 = v105;
              if ((char)*v98 < 0)
              {
                v107 = v105 >> 4;
                v108 = utf8_byte_length(unsigned char)::utf8_len_table[v105 >> 4];
                v106 = v105 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v108];
                if ((~(v105 >> 4) & 0xC) == 0)
                {
                  if (v108 <= 2)
                    v109 = 2;
                  else
                    v109 = utf8_byte_length(unsigned char)::utf8_len_table[v105 >> 4];
                  v110 = v109 - 1;
                  v111 = (char *)(v98 + 1);
                  do
                  {
                    v112 = *v111++;
                    v106 = v112 & 0x3F | (v106 << 6);
                    --v110;
                  }
                  while (v110);
                }
              }
              else
              {
                v107 = v105 >> 4;
              }
              v113 = utf8_byte_length_noerror(unsigned char)::utf8_len_table[v107];
              v114 = (char *)&v98[v113];
              v192 = v103;
              if (v106 == 92)
              {
                v115 = *v114;
                v106 = v115;
                if (*v114 < 0)
                {
                  v116 = v115 >> 4;
                  v117 = utf8_byte_length(unsigned char)::utf8_len_table[v115 >> 4];
                  v106 = v115 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v117];
                  if ((~(v115 >> 4) & 0xC) == 0)
                  {
                    if (v117 <= 2)
                      v118 = 2;
                    else
                      v118 = utf8_byte_length(unsigned char)::utf8_len_table[v115 >> 4];
                    v119 = v118 - 1;
                    v120 = &v98[v113 + 1];
                    do
                    {
                      v121 = *v120++;
                      v106 = v121 & 0x3F | (v106 << 6);
                      --v119;
                    }
                    while (v119);
                  }
                }
                else
                {
                  v116 = v115 >> 4;
                }
                v114 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[v116];
              }
              if (u_ispunct(v106))
              {
                if ((unint64_t)v114 > v192)
                  goto LABEL_183;
                v122 = *v114;
                v123 = v122;
                if (*v114 < 0)
                {
                  v124 = v122 >> 4;
                  v125 = utf8_byte_length(unsigned char)::utf8_len_table[v122 >> 4];
                  v123 = v122 & utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v125];
                  if ((~(v122 >> 4) & 0xC) == 0)
                  {
                    if (v125 <= 2)
                      v126 = 2;
                    else
                      v126 = utf8_byte_length(unsigned char)::utf8_len_table[v122 >> 4];
                    v127 = v126 - 1;
                    v128 = v114 + 1;
                    do
                    {
                      v129 = *v128++;
                      v123 = v129 & 0x3F | (v123 << 6);
                      --v127;
                    }
                    while (v127);
                  }
                }
                else
                {
                  v124 = v122 >> 4;
                }
                v130 = (unsigned __int8 *)&v114[utf8_byte_length_noerror(unsigned char)::utf8_len_table[v124]];
                if (v123 == 92)
                  v130 += utf8_byte_length_noerror(unsigned char)::utf8_len_table[(unint64_t)*v130 >> 4];
                if ((unint64_t)v130 > v192)
LABEL_183:
                  v98[v101 - 1] = 0;
              }
            }
          }
        }
      }
      if (!v96 && *v98 == 46 && !v98[1] && (_DWORD)v34 != 0)
        goto LABEL_297;
      v132 = !(_DWORD)v34 && v36 == 1;
      v133 = v132 || (v34 & 0xFFFFFFFD) == 1;
      v134 = v133;
      if ((v200 & 0x20) != 0)
        break;
      v137 = v34;
      v135 = v201;
LABEL_205:
      *(_QWORD *)&v23[4 * *v23 + 8] = v97;
      v138 = v135;
      if ((v135 & 0x8000) != 0)
        v139 = v135 & 0xFFFEFFF8;
      else
        v139 = v135;
      if ((v139 & 0x3180) != 0)
        v140 = 8;
      else
        v140 = 12;
      v141 = v140 & 0xFFFFFFFE | v139 & 1;
      if ((v139 & 0x10000) != 0)
        v141 |= (v139 >> 8) & 0x7C00 | 0x10;
      v142 = v141 | v139 & 2;
      v143 = v97;
      v144 = v34;
      if ((int)v34 > 1)
        v145 = -1;
      else
        v145 = v34;
      v146 = (_OWORD *)(v143 + 32);
      if ((v200 & 0x8000) != 0)
      {
        Term = copyQueryTerm("*", v137);
        memset(__s1, 0, 28);
        *(_QWORD *)v143 = Term;
        *(_QWORD *)(v143 + 8) = 0;
        *(_DWORD *)(v143 + 16) = v139;
        *(_DWORD *)(v143 + 20) = v145;
        *(_QWORD *)(v143 + 24) = v142;
        *v146 = *(_OWORD *)__s1;
        *(_OWORD *)(v143 + 44) = *(_OWORD *)&__s1[12];
        v148 = v143;
        *(_DWORD *)(v143 + 60) = 0;
        *(_QWORD *)(*(_QWORD *)&v23[4 * *v23 + 8] + 8) = strdup((const char *)v98);
        v155 = icu_regex_create();
        v150 = *v23;
        v153 = *v23;
        v151 = *(_QWORD *)&v23[4 * v153 + 8];
        *(_QWORD *)(v151 + 40) = v155;
      }
      else
      {
        v147 = copyQueryTerm((const char *)v98, v137);
        memset(__s1, 0, 28);
        *(_QWORD *)v143 = v147;
        *(_QWORD *)(v143 + 8) = 0;
        *(_DWORD *)(v143 + 16) = v139;
        *(_DWORD *)(v143 + 20) = v145;
        *(_QWORD *)(v143 + 24) = v142;
        *v146 = *(_OWORD *)__s1;
        *(_OWORD *)(v143 + 44) = *(_OWORD *)&__s1[12];
        v148 = v143;
        *(_DWORD *)(v143 + 60) = a8;
        if ((v193 & 1) != 0)
        {
          icu_local_id();
          v149 = icu_search_context_create_with_wildcard_limit();
          v150 = *v199;
          v151 = *(_QWORD *)&v199[4 * *v199 + 8];
          *(_QWORD *)(v151 + 32) = v149;
          v152 = v138;
          v34 = v144;
          if ((v200 & 0x10000) != 0)
          {
            v182 = v149;
            v183 = icu_search_context_is_prefix();
            v184 = la_init(v182, v183);
            v150 = *v199;
            v153 = *v199;
            v151 = *(_QWORD *)&v199[4 * v153 + 8];
            *(_QWORD *)(v151 + 48) = v184;
          }
          else
          {
            v153 = v150;
          }
          v31 = v195;
          goto LABEL_284;
        }
        raw = icu_search_context_create_raw();
        v150 = *v199;
        v153 = *v199;
        v151 = *(_QWORD *)&v199[4 * v153 + 8];
        *(_QWORD *)(v151 + 32) = raw;
      }
      v152 = v138;
      v31 = v195;
      v34 = v144;
LABEL_284:
      v201 = v152;
      if (*(_DWORD *)(v151 + 20) == -1)
      {
        if ((_DWORD)v34 == -1)
          v185 = 1;
        else
          v185 = v34;
        *(_DWORD *)(v151 + 20) = v185;
      }
      v23 = v199;
      v199[4 * v153 + 6] = 1;
      v36 = v202;
      if (!(_DWORD)v34)
      {
        if (v202 == 1)
        {
          v186 = (*v98 == 42) << 8;
          v187 = v199[1];
        }
        else
        {
          v187 = v199[1];
          if ((v187 & 0x3000) != 0)
            v186 = 256;
          else
            v186 = 384;
        }
        v199[1] = v187 | v186;
        *(_DWORD *)(v151 + 16) |= v186;
      }
      v97 = v148 + 64;
      *v199 = v150 + 1;
LABEL_297:
      free((void *)v31[v96]);
      v31[v96++] = 0;
      if (v96 >= v36)
        goto LABEL_298;
    }
    v135 = v201;
    if (!v134 || (LODWORD(v136) = *v98, (_DWORD)v136 == 42))
    {
      v137 = v34;
      goto LABEL_205;
    }
    v157 = 1;
    v137 = v34;
    v158 = v98;
    while (1)
    {
      v159 = v157;
      v160 = utf8_byte_length(unsigned char)::utf8_len_table[(unint64_t)v136 >> 4];
      v161 = &v158[v160];
      v136 = v158[v160];
      if (!v158[v160])
        goto LABEL_205;
      if ((v136 & 0x80) != 0)
      {
        v162 = utf8_byte_length(unsigned char)::utf8_len_table[v136 >> 4];
        v163 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v162] & v136;
        if ((~(v136 >> 4) & 0xC) != 0)
          goto LABEL_233;
        v164 = v162 <= 2 ? 2 : utf8_byte_length(unsigned char)::utf8_len_table[v136 >> 4];
        v165 = v164 - 1;
        v166 = &v158[v160 + 1];
        do
        {
          v167 = *v166++;
          v163 = v167 & 0x3F | (v163 << 6);
          --v165;
        }
        while (v165);
        if (v163 < 0x10000)
        {
LABEL_233:
          if ((v163 - 12441) >= 4 && (v163 - 65438) >= 2)
          {
            if ((unsigned __int16)v163 < 0x300u)
              goto LABEL_251;
            v179 = __CFUniCharCombiningBitmap[BYTE1(v163)];
            if (!__CFUniCharCombiningBitmap[BYTE1(v163)]
              || v179 != 255
              && ((__CFUniCharCombiningBitmap[(v163 >> 3) + 256 + 32 * v179 - 32] >> (v163 & 7)) & 1) == 0)
            {
              goto LABEL_251;
            }
          }
        }
        else
        {
          v176 = v163 - 917760;
          v177 = v163 - 127995;
          if (v176 >= 0xF0 && v177 > 4)
            goto LABEL_251;
        }
        v161 += v162;
        v136 = *v161;
        if ((v159 & 1) != 0)
        {
          if ((_DWORD)v136 == 42)
            goto LABEL_252;
          if ((v136 & 0x80) == 0)
            goto LABEL_205;
          v169 = utf8_byte_length(unsigned char)::utf8_len_table[v136 >> 4];
          v170 = utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v169] & v136;
          if ((~(v136 >> 4) & 0xC) != 0)
            goto LABEL_247;
          v171 = v169 <= 2 ? 2 : utf8_byte_length(unsigned char)::utf8_len_table[v136 >> 4];
          v172 = v171 - 1;
          v173 = &v158[v162 + 1 + v160];
          do
          {
            v174 = *v173++;
            v170 = v174 & 0x3F | (v170 << 6);
            --v172;
          }
          while (v172);
          if (v170 < 0x10000)
          {
LABEL_247:
            if ((v170 - 12441) >= 4 && (v170 - 65438) >= 2)
            {
              if ((unsigned __int16)v170 < 0x300u)
                goto LABEL_205;
              v181 = __CFUniCharCombiningBitmap[BYTE1(v170)];
              if (v181 != 255
                && (!__CFUniCharCombiningBitmap[BYTE1(v170)]
                 || ((__CFUniCharCombiningBitmap[(v170 >> 3) + 256 + 32 * v181 - 32] >> (v170 & 7)) & 1) == 0))
              {
                goto LABEL_205;
              }
            }
          }
          else if ((v170 - 917760) >= 0xF0 && (v170 - 127995) > 4)
          {
            goto LABEL_205;
          }
        }
      }
LABEL_251:
      if ((_DWORD)v136 == 42)
      {
LABEL_252:
        if (v161[1] || *(v161 - 1) == 92)
        {
          LODWORD(v136) = 42;
        }
        else
        {
          LODWORD(v136) = 0;
          *v161 = 0;
          v135 |= 0x800u;
          if ((_DWORD)v34 == 3)
          {
            v137 = 0;
            v34 = 5;
          }
          else
          {
            v34 = v34;
          }
        }
      }
      v157 = 0;
      v158 = v161;
      if ((v159 & 1) == 0)
        goto LABEL_205;
    }
  }
LABEL_298:
  if (!(_DWORD)v34)
    goto LABEL_309;
  if ((v200 & 0x20) != 0 && v36 == 1)
    v189 = 1;
  else
    v189 = 3;
LABEL_310:
  v23[2] = v189;
  if (v31)
  {
    v93 = (char *)v31;
    goto LABEL_312;
  }
LABEL_313:
  icu_locale_release();
  return v23;
}

void db_apply_for_field_ids_matching_name_locked(uint64_t a1, char *a2, uint64_t a3)
{
  _DWORD *v4;
  _OWORD *v5;
  _DWORD *v6;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  memset(v8, 0, sizeof(v8));
  v4 = db_copy_field_ids_with_buffer_locked(a1, a2, (uint64_t)v8, 8uLL, 0);
  if (v4)
  {
    v5 = v4;
    if (*v4)
    {
      v6 = v4 + 1;
      do
        (*(void (**)(uint64_t))(a3 + 16))(a3);
      while (*v6++);
    }
    if (v5 != v8)
      free(v5);
  }
}

void *db_copy_field_ids_with_buffer_locked(uint64_t a1, char *a2, uint64_t a3, unint64_t a4, _DWORD *a5)
{
  void *result;
  uint64_t v8;
  int v9;
  int v10;
  NSObject *v11;
  int v12;
  char *v13;
  char *v14;
  const char *v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 != 1685287992)
  {
    v10 = *__error();
    v11 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_DWORD *)a1;
      *(_DWORD *)buf = 136315650;
      v17 = "db_copy_field_ids_with_buffer_locked";
      v18 = 1024;
      v19 = 286;
      v20 = 1024;
      v21 = v12;
      _os_log_error_impl(&dword_1B8270000, v11, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v10;
    v13 = __si_assert_copy_extra_268();
    v14 = v13;
    if (v13)
      v15 = v13;
    else
      v15 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 286, v15);
    free(v14);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  result = internal_copy_field_ids(a1, a2, a3, a4, 1);
  if (a5)
  {
    v8 = *(_QWORD *)(a1 + 880);
    if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
    {
      if (v8)
      {
        v9 = *(_DWORD *)(v8 + 216);
        if (v9 == -270471200)
        {
          v8 = *(_QWORD *)(v8 + 376);
        }
        else
        {
          if (v9 != 1684300900)
          {
            if (v9 == 842150450)
              LODWORD(v8) = *(_DWORD *)(v8 + 364) - 1;
            else
              LODWORD(v8) = 0;
            goto LABEL_14;
          }
          v8 = *(_QWORD *)(v8 + 4496);
        }
        LODWORD(v8) = v8 - 1;
      }
    }
    else
    {
      LODWORD(v8) = *(_DWORD *)(v8 + 56);
    }
LABEL_14:
    *a5 = v8;
  }
  return result;
}

uint64_t db_get_field_name_for_id_locked(int *a1, int a2)
{
  int v4;
  NSObject *v5;
  int v6;
  char *v7;
  char *v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v4 = *__error();
    v5 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *a1;
      *(_DWORD *)buf = 136315650;
      v11 = "db_get_field_name_for_id_locked";
      v12 = 1024;
      v13 = 388;
      v14 = 1024;
      v15 = v6;
      _os_log_error_impl(&dword_1B8270000, v5, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v4;
    v7 = __si_assert_copy_extra_268();
    v8 = v7;
    if (v7)
      v9 = v7;
    else
      v9 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 388, v9);
    free(v8);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return get_string_and_length_for_id_10395((uint64_t)a1, 0, a2, 0, 1);
}

uint64_t FillQueryNodeRangePatternsCopy(uint64_t a1, CFTypeRef cf, CFTypeRef a3)
{
  CFTypeID v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  const __CFNumber *v11;
  const __CFNumber *v12;
  CFDateRef v13;
  CFDateRef v14;
  const __CFNumber *v15;
  const __CFNumber *v16;
  const __CFNumber *v17;
  int v18;
  uint64_t result;
  const __CFNumber *v20;
  CFDateRef v21;
  CFDateRef v22;
  const __CFNumber *v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  void *v26;
  void *v27;
  float v28;
  double valuePtr;
  char buffer[16];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (!((unint64_t)cf | (unint64_t)a3))
    goto LABEL_45;
  if (cf)
  {
    v6 = CFGetTypeID(cf);
    if (a3 && v6 != CFGetTypeID(a3))
      goto LABEL_45;
    if (v6 == CFNumberGetTypeID())
    {
      v7 = copyNumberTermFromNumber(cf, *(_DWORD *)(a1 + 20));
LABEL_9:
      *(_QWORD *)a1 = v7;
      v8 = *(_DWORD *)(a1 + 20);
      if (a3)
      {
        v9 = copyNumberTermFromNumber(a3, v8);
LABEL_30:
        *(_QWORD *)(a1 + 8) = v9;
        *(_DWORD *)(a1 + 20) = -1;
        return 1;
      }
      v18 = 1;
      goto LABEL_29;
    }
    if (v6 == CFDateGetTypeID())
    {
      v10 = copyDateTermFromDate(cf, *(_DWORD *)(a1 + 20));
LABEL_15:
      *(_QWORD *)a1 = v10;
      v8 = *(_DWORD *)(a1 + 20);
      if (a3)
      {
        v9 = copyDateTermFromDate(a3, v8);
        goto LABEL_30;
      }
      v18 = 0;
LABEL_29:
      v9 = copyMaximumTerm(v18, v8);
      goto LABEL_30;
    }
  }
  else
  {
    v6 = CFGetTypeID(a3);
    if (v6 == CFNumberGetTypeID())
    {
      v7 = copyMinimumTerm(1, *(_DWORD *)(a1 + 20));
      goto LABEL_9;
    }
    if (v6 == CFDateGetTypeID())
    {
      v10 = copyMinimumTerm(0, *(_DWORD *)(a1 + 20));
      goto LABEL_15;
    }
  }
  if (v6 == CFStringGetTypeID())
  {
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    *(_OWORD *)buffer = 0u;
    v31 = 0u;
    valuePtr = 0.0;
    if (cf)
    {
      CFStringGetCString((CFStringRef)cf, buffer, 256, 0x8000100u);
      v11 = copyCFNumberTermFromString(buffer);
      if (!v11)
        goto LABEL_45;
      v12 = v11;
      CFNumberGetValue(v11, kCFNumberDoubleType, &valuePtr);
      v13 = CFDateCreate(0, valuePtr);
      if (!v13)
      {
LABEL_44:
        CFRelease(v12);
        goto LABEL_45;
      }
      v14 = v13;
      if (CFNumberIsFloatType(v12))
      {
        v28 = 0.0;
        v15 = copyCFNumberFloatTermFromString(buffer);
        if (v15)
        {
          v16 = v15;
          CFNumberGetValue(v15, kCFNumberFloatType, &v28);
          if (fabsf(v28) == INFINITY || v28 == 0.0 || valuePtr <= v28)
          {
            v17 = v16;
          }
          else
          {
            v17 = v12;
            v12 = v16;
          }
          CFRelease(v17);
        }
      }
      *(_QWORD *)a1 = copyDateTermFromDate(v14, *(_DWORD *)(a1 + 20));
      *(_QWORD *)(a1 + 64) = copyNumberTermFromNumber(v12, *(_DWORD *)(a1 + 84));
      CFRelease(v12);
      CFRelease(v14);
    }
    else
    {
      *(_QWORD *)a1 = copyMinimumTerm(0, *(_DWORD *)(a1 + 20));
      *(_QWORD *)(a1 + 64) = copyMinimumTerm(1, *(_DWORD *)(a1 + 84));
    }
    if (!a3)
    {
      *(_QWORD *)(a1 + 8) = copyMaximumTerm(0, *(_DWORD *)(a1 + 20));
      *(_QWORD *)(a1 + 72) = copyMaximumTerm(1, *(_DWORD *)(a1 + 20));
LABEL_58:
      *(_DWORD *)(a1 + 20) = -1;
      *(_DWORD *)(a1 + 84) = -1;
      return 2;
    }
    CFStringGetCString((CFStringRef)a3, buffer, 256, 0x8000100u);
    v20 = copyCFNumberTermFromString(buffer);
    if (v20)
    {
      v12 = v20;
      CFNumberGetValue(v20, kCFNumberDoubleType, &valuePtr);
      v21 = CFDateCreate(0, valuePtr);
      if (v21)
      {
        v22 = v21;
        if (CFNumberIsFloatType(v12))
        {
          v28 = 0.0;
          v23 = copyCFNumberFloatTermFromString(buffer);
          if (v23)
          {
            v24 = v23;
            CFNumberGetValue(v23, kCFNumberFloatType, &v28);
            if (fabsf(v28) == INFINITY || v28 == 0.0 || valuePtr >= v28)
            {
              v25 = v24;
            }
            else
            {
              v25 = v12;
              v12 = v24;
            }
            CFRelease(v25);
          }
        }
        *(_QWORD *)(a1 + 8) = copyDateTermFromDate(v22, *(_DWORD *)(a1 + 20));
        *(_QWORD *)(a1 + 72) = copyNumberTermFromNumber(v12, *(_DWORD *)(a1 + 84));
        CFRelease(v12);
        CFRelease(v22);
        goto LABEL_58;
      }
      goto LABEL_44;
    }
  }
LABEL_45:
  if (*(_QWORD *)a1)
    free(*(void **)a1);
  v26 = *(void **)(a1 + 8);
  if (v26)
    free(v26);
  v27 = *(void **)(a1 + 64);
  if (v27)
    free(v27);
  result = *(_QWORD *)(a1 + 72);
  if (result)
  {
    free((void *)result);
    return 0;
  }
  return result;
}

CFNumberRef copyCFNumberTermFromString(char *__str)
{
  const char *v1;
  uint64_t v2;
  char *v3;
  unsigned int v4;
  uint64_t *p_valuePtr;
  CFNumberType v6;
  char *v7;
  unsigned int v8;
  char *v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  double valuePtr;
  uint64_t v15;
  char *__endptr;

  v1 = __str;
  if (*__str == 1)
  {
    if (__str[1] < 0)
    {
      if (__str[2] < 0)
      {
        if (__str[3] < 0)
        {
          if (__str[4] < 0)
          {
            if (__str[5] < 0)
            {
              v10 = __si_assert_copy_extra_268();
              v11 = v10;
              v12 = "";
              if (v10)
                v12 = v10;
              __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", "VIntUtils.h", 341, "(b4 & 0x80) == 0", v12);
              free(v11);
              if (__valid_fs(-1))
                v13 = 2989;
              else
                v13 = 3072;
              *(_DWORD *)v13 = -559038737;
              abort();
            }
            v2 = 5;
          }
          else
          {
            v2 = 4;
          }
        }
        else
        {
          v2 = 3;
        }
      }
      else
      {
        v2 = 2;
      }
    }
    else
    {
      v2 = 1;
    }
    v1 = &__str[v2 + 1];
  }
  __endptr = 0;
  v15 = strtoll(v1, &__endptr, 0);
  v3 = __endptr;
  if (__endptr != v1)
  {
    v4 = *__endptr;
    if (v4 == 42)
    {
      ++__endptr;
      v4 = v3[1];
    }
    if (v4 <= 1)
    {
      p_valuePtr = &v15;
      v6 = kCFNumberLongLongType;
      return CFNumberCreate(0, v6, p_valuePtr);
    }
    valuePtr = strtod(v1, &__endptr);
    v7 = __endptr;
    if (__endptr != v1)
    {
      v8 = *__endptr;
      if (v8 == 42)
      {
        ++__endptr;
        v8 = v7[1];
      }
      if (v8 <= 1)
      {
        p_valuePtr = (uint64_t *)&valuePtr;
        v6 = kCFNumberDoubleType;
        return CFNumberCreate(0, v6, p_valuePtr);
      }
    }
  }
  return 0;
}

_BYTE *CIDecomposeCFString(const __CFString *a1, _BYTE *a2, size_t a3)
{
  CFTypeID v6;
  CFIndex Length;
  CFIndex MaximumSizeForEncoding;
  const UniChar *CharactersPtr;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  UniChar *v12;
  _BYTE *v13;
  _BYTE *v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v19;
  CFRange v20;

  v19 = 0;
  if (!a1)
    return 0;
  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    return 0;
  Length = CFStringGetLength(a1);
  MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CharactersPtr = CFStringGetCharactersPtr(a1);
  if (CharactersPtr)
  {
    v10 = (unsigned __int16 *)CharactersPtr;
    v11 = 0;
    goto LABEL_7;
  }
  v12 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
  if (!v12)
    return 0;
  v10 = v12;
  v20.location = 0;
  v20.length = Length;
  CFStringGetCharacters(a1, v20, v12);
  v11 = v10;
LABEL_7:
  v13 = a2;
  if (MaximumSizeForEncoding >= (uint64_t)(1044 - a3))
  {
    v14 = malloc_type_malloc(MaximumSizeForEncoding + 1 + a3, 0xD7682243uLL);
    v13 = v14;
    if (a2)
    {
      if (a3)
        memcpy(v14, a2, a3);
    }
  }
  if (v13)
  {
    v15 = utf8_encodestr(v10, 2 * Length, &v13[a3], &v19, MaximumSizeForEncoding + 1);
    if (v15)
      v16 = v13;
    else
      v16 = 0;
    if (v15)
      v17 = 0;
    else
      v17 = v13;
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  free(v11);
  if (v16 && v16 != a2)
    free(v16);
  return v17;
}

char *copyNumberTermFromNumber(const void *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;
  const char *v8;
  uint64_t v9;
  char __s1;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[31];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((int)a2 <= 0)
  {
    v6 = __si_assert_copy_extra_268();
    v7 = v6;
    v8 = "";
    if (v6)
      v8 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 146, "field >= 1", v8);
    free(v7);
    if (__valid_fs(-1))
      v9 = 2989;
    else
      v9 = 3072;
    *(_DWORD *)v9 = -559038737;
    abort();
  }
  memset(v25, 0, sizeof(v25));
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  __s1 = 2;
  v2 = a2 >> 28;
  v11 = 0u;
  if (a2 >> 28)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    BYTE2(v11) = (a2 >> 14) | 0x80;
    BYTE3(v11) = (a2 >> 21) | 0x80;
    v3 = 6;
    v4 = 5;
  }
  else if ((a2 & 0xFE00000) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    BYTE2(v11) = (a2 >> 14) | 0x80;
    v2 = (a2 & 0xFE00000) >> 21;
    v3 = 5;
    v4 = 4;
  }
  else if ((a2 & 0x1FC000) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    v2 = (a2 & 0x1FC000) >> 14;
    v3 = 4;
    v4 = 3;
  }
  else if ((a2 & 0x3F80) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    v2 = (unsigned __int16)(a2 & 0x3F80) >> 7;
    v3 = 3;
    v4 = 2;
  }
  else
  {
    v3 = 2;
    v4 = 1;
    LOBYTE(v2) = a2;
  }
  *(&__s1 + v4) = v2;
  FlattenCFTypeToBuffer(a1, &__s1 + v3);
  return strdup(&__s1);
}

char *copyDateTermFromDate(const void *a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;
  const char *v8;
  uint64_t v9;
  char __s1;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[31];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if ((int)a2 <= 0)
  {
    v6 = __si_assert_copy_extra_268();
    v7 = v6;
    v8 = "";
    if (v6)
      v8 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 158, "field >= 1", v8);
    free(v7);
    if (__valid_fs(-1))
      v9 = 2989;
    else
      v9 = 3072;
    *(_DWORD *)v9 = -559038737;
    abort();
  }
  memset(v25, 0, sizeof(v25));
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  __s1 = 3;
  v2 = a2 >> 28;
  v11 = 0u;
  if (a2 >> 28)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    BYTE2(v11) = (a2 >> 14) | 0x80;
    BYTE3(v11) = (a2 >> 21) | 0x80;
    v3 = 6;
    v4 = 5;
  }
  else if ((a2 & 0xFE00000) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    BYTE2(v11) = (a2 >> 14) | 0x80;
    v2 = (a2 & 0xFE00000) >> 21;
    v3 = 5;
    v4 = 4;
  }
  else if ((a2 & 0x1FC000) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    BYTE1(v11) = (a2 >> 7) | 0x80;
    v2 = (a2 & 0x1FC000) >> 14;
    v3 = 4;
    v4 = 3;
  }
  else if ((a2 & 0x3F80) != 0)
  {
    LOBYTE(v11) = a2 | 0x80;
    v2 = (unsigned __int16)(a2 & 0x3F80) >> 7;
    v3 = 3;
    v4 = 2;
  }
  else
  {
    v3 = 2;
    v4 = 1;
    LOBYTE(v2) = a2;
  }
  *(&__s1 + v4) = v2;
  FlattenCFTypeToBuffer(a1, &__s1 + v3);
  return strdup(&__s1);
}

uint64_t FlattenCFTypeToBuffer(const void *a1, _BYTE *a2)
{
  CFTypeID v4;
  double Value;
  CFNumberType Type;
  _BYTE *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  CFTypeID TypeID;
  double v14;
  char *v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  const char *v22;
  uint64_t valuePtr;

  v4 = CFGetTypeID(a1);
  if (v4 == CFDateGetTypeID())
  {
    MEMORY[0x1BCCAF690](a1);
LABEL_18:
    v14 = Value;
    goto LABEL_19;
  }
  if (v4 == CFNumberGetTypeID())
  {
    Type = CFNumberGetType((CFNumberRef)a1);
    v7 = a2;
    if ((unint64_t)Type <= kCFNumberCGFloatType)
    {
      if (((1 << Type) & 0xCF9E) != 0)
      {
        valuePtr = 0;
        if (!CFNumberGetValue((CFNumberRef)a1, kCFNumberLongLongType, &valuePtr))
        {
          v16 = __si_assert_copy_extra_268();
          v17 = v16;
          v18 = "";
          if (v16)
            v18 = v16;
          __message_assert(v16, "n2s.c", 184, "conversionSucceeded", v18);
          free(v17);
          if (__valid_fs(-1))
            v19 = 2989;
          else
            v19 = 3072;
          *(_DWORD *)v19 = -559038737;
          abort();
        }
        if (valuePtr >= 0)
          v8 = valuePtr;
        else
          v8 = -valuePtr;
        v9 = __clz(v8);
        v10 = (unint64_t)valuePtr >> 63;
        if (valuePtr)
          v11 = 2 * (v8 << v9);
        else
          v11 = 0;
        if (valuePtr)
          v12 = 1086 - v9;
        else
          v12 = 0;
        goto LABEL_20;
      }
      v7 = a2;
      if (((1 << Type) & 0x13060) == 0)
        goto LABEL_21;
      valuePtr = 0;
      if (!CFNumberGetValue((CFNumberRef)a1, kCFNumberFloat64Type, &valuePtr))
      {
        v20 = __si_assert_copy_extra_268();
        v21 = v20;
        v22 = "";
        if (v20)
          v22 = v20;
        __message_assert(v20, "n2s.c", 165, "conversionSucceeded", v22);
        free(v21);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v14 = *(double *)&valuePtr;
LABEL_19:
      v11 = *(_QWORD *)&v14 << 12;
      v10 = *(_QWORD *)&v14 >> 63;
      v12 = (*(_QWORD *)&v14 >> 52) & 0x7FFLL;
LABEL_20:
      v7 = WriteCharactersFromSignBiasedExponentStrippedMantissa(a2, v10, v12, v11);
    }
  }
  else
  {
    TypeID = CFBooleanGetTypeID();
    v7 = a2;
    if (v4 == TypeID)
    {
      Value = (double)CFBooleanGetValue((CFBooleanRef)a1);
      goto LABEL_18;
    }
  }
LABEL_21:
  *v7 = 0;
  return ((_DWORD)v7 - (_DWORD)a2);
}

_BYTE *WriteCharactersFromSignBiasedExponentStrippedMantissa(_BYTE *a1, int a2, unint64_t a3, unint64_t a4)
{
  BOOL v4;

  if (a2)
  {
    v4 = a4 == 0;
    a4 = -(uint64_t)a4;
    if (v4)
      a3 = (a3 ^ 0x7FF) + 1;
    else
      a3 ^= 0x7FFuLL;
    *a1++ = 45;
  }
  *a1 = kHexDigits[(a3 >> 8) & 0xF];
  a1[1] = kHexDigits[a3 >> 4];
  a1[2] = kHexDigits[a3 & 0xF];
  a1[3] = 95;
  if (!a4)
    return a1 + 4;
  a1[4] = kHexDigits[a4 >> 60];
  if ((a4 & 0xFFFFFFFFFFFFFFFLL) == 0)
    return a1 + 5;
  a1[5] = kHexDigits[HIBYTE(a4) & 0xF];
  if ((a4 & 0xFFFFFFFFFFFFFFLL) == 0)
    return a1 + 6;
  a1[6] = kHexDigits[(a4 >> 52) & 0xF];
  if ((a4 & 0xFFFFFFFFFFFFFLL) == 0)
    return a1 + 7;
  a1[7] = kHexDigits[HIWORD(a4) & 0xF];
  if ((a4 & 0xFFFFFFFFFFFFLL) == 0)
    return a1 + 8;
  a1[8] = kHexDigits[(a4 >> 44) & 0xF];
  if ((a4 & 0xFFFFFFFFFFFLL) == 0)
    return a1 + 9;
  a1[9] = kHexDigits[(a4 >> 40) & 0xF];
  if ((a4 & 0xFFFFFFFFFFLL) == 0)
    return a1 + 10;
  a1[10] = kHexDigits[(a4 >> 36) & 0xF];
  if ((a4 & 0xFFFFFFFFFLL) == 0)
    return a1 + 11;
  a1[11] = kHexDigits[HIDWORD(a4) & 0xF];
  if (!(_DWORD)a4)
    return a1 + 12;
  a1[12] = kHexDigits[a4 >> 28];
  if ((a4 & 0xFFFFFFF) == 0)
    return a1 + 13;
  a1[13] = kHexDigits[(a4 >> 24) & 0xF];
  if ((a4 & 0xFFFFFF) == 0)
    return a1 + 14;
  a1[14] = kHexDigits[(a4 >> 20) & 0xF];
  if ((a4 & 0xFFFFF) == 0)
    return a1 + 15;
  a1[15] = kHexDigits[(a4 >> 16) & 0xF];
  if (!(_WORD)a4)
    return a1 + 16;
  a1[16] = kHexDigits[(unsigned __int16)a4 >> 12];
  if ((a4 & 0xFFF) == 0)
    return a1 + 17;
  a1[17] = kHexDigits[(a4 >> 8) & 0xF];
  if (!(_BYTE)a4)
    return a1 + 18;
  a1[18] = kHexDigits[a4 >> 4];
  if ((a4 & 0xF) == 0)
    return a1 + 19;
  a1[19] = kHexDigits[a4 & 0xF];
  return a1 + 20;
}

char *copyMinimumTerm(int a1, unsigned int a2)
{
  char v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  char *v8;
  const char *v9;
  uint64_t v10;
  char __s1;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[31];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((int)a2 <= 0)
  {
    v7 = __si_assert_copy_extra_268();
    v8 = v7;
    v9 = "";
    if (v7)
      v9 = v7;
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 169, "field >= 1", v9);
    free(v8);
    if (__valid_fs(-1))
      v10 = 2989;
    else
      v10 = 3072;
    *(_DWORD *)v10 = -559038737;
    abort();
  }
  memset(v26, 0, sizeof(v26));
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  if (a1)
    v2 = 2;
  else
    v2 = 3;
  v3 = a2 >> 28;
  __s1 = v2;
  if (a2 >> 28)
  {
    LOBYTE(v12) = a2 | 0x80;
    BYTE1(v12) = (a2 >> 7) | 0x80;
    BYTE2(v12) = (a2 >> 14) | 0x80;
    BYTE3(v12) = (a2 >> 21) | 0x80;
    v4 = 6;
    v5 = 5;
  }
  else if ((a2 & 0xFE00000) != 0)
  {
    LOBYTE(v12) = a2 | 0x80;
    BYTE1(v12) = (a2 >> 7) | 0x80;
    BYTE2(v12) = (a2 >> 14) | 0x80;
    v3 = (a2 & 0xFE00000) >> 21;
    v4 = 5;
    v5 = 4;
  }
  else if ((a2 & 0x1FC000) != 0)
  {
    LOBYTE(v12) = a2 | 0x80;
    BYTE1(v12) = (a2 >> 7) | 0x80;
    v3 = (a2 & 0x1FC000) >> 14;
    v4 = 4;
    v5 = 3;
  }
  else if ((a2 & 0x3F80) != 0)
  {
    LOBYTE(v12) = a2 | 0x80;
    v3 = (unsigned __int16)(a2 & 0x3F80) >> 7;
    v4 = 3;
    v5 = 2;
  }
  else
  {
    v4 = 2;
    v5 = 1;
    LOBYTE(v3) = a2;
  }
  *(&__s1 + v5) = v3;
  *(&__s1 + v4) = 0;
  __strlcat_chk();
  return strdup(&__s1);
}

char *copyMaximumTerm(int a1, unsigned int a2)
{
  char v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char *v7;
  char *v8;
  const char *v9;
  uint64_t v10;
  char __s1;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[31];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if ((int)a2 <= 0)
  {
    v7 = __si_assert_copy_extra_268();
    v8 = v7;
    v9 = "";
    if (v7)
      v9 = v7;
    __message_assert("%s:%u: failed assertion '%s' %s ", "CIQuery.c", 179, "field >= 1", v9);
    free(v8);
    if (__valid_fs(-1))
      v10 = 2989;
    else
      v10 = 3072;
    *(_DWORD *)v10 = -559038737;
    abort();
  }
  memset(v26, 0, sizeof(v26));
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  if (a1)
    v2 = 2;
  else
    v2 = 3;
  v3 = a2 >> 28;
  __s1 = v2;
  if (a2 >> 28)
  {
    LOBYTE(v12) = a2 | 0x80;
    BYTE1(v12) = (a2 >> 7) | 0x80;
    BYTE2(v12) = (a2 >> 14) | 0x80;
    BYTE3(v12) = (a2 >> 21) | 0x80;
    v4 = 6;
    v5 = 5;
  }
  else if ((a2 & 0xFE00000) != 0)
  {
    LOBYTE(v12) = a2 | 0x80;
    BYTE1(v12) = (a2 >> 7) | 0x80;
    BYTE2(v12) = (a2 >> 14) | 0x80;
    v3 = (a2 & 0xFE00000) >> 21;
    v4 = 5;
    v5 = 4;
  }
  else if ((a2 & 0x1FC000) != 0)
  {
    LOBYTE(v12) = a2 | 0x80;
    BYTE1(v12) = (a2 >> 7) | 0x80;
    v3 = (a2 & 0x1FC000) >> 14;
    v4 = 4;
    v5 = 3;
  }
  else if ((a2 & 0x3F80) != 0)
  {
    LOBYTE(v12) = a2 | 0x80;
    v3 = (unsigned __int16)(a2 & 0x3F80) >> 7;
    v4 = 3;
    v5 = 2;
  }
  else
  {
    v4 = 2;
    v5 = 1;
    LOBYTE(v3) = a2;
  }
  *(&__s1 + v5) = v3;
  *(&__s1 + v4) = 0;
  __strlcat_chk();
  return strdup(&__s1);
}

char *ContentIndexQueryNodeForRange(const void *a1, const void *a2, int a3, int a4, int a5)
{
  char *v10;
  int v11;
  int NodeRangePatternsCopy;

  if (*MEMORY[0x1E0C85AD8] <= 0xA7uLL)
    ++sTotal_9538;
  v10 = (char *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0xA8uLL, 0x31F9A007uLL);
  if (v10)
  {
    if (!a3)
      return v10;
  }
  else
  {
    _log_fault_for_malloc_failure();
    if (!a3)
      return v10;
  }
  *(_DWORD *)v10 = 1;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 4) = v10 + 40;
  if (a4)
    v11 = 36;
  else
    v11 = 4;
  *((_QWORD *)v10 + 6) = 0;
  *(_OWORD *)(v10 + 72) = 0u;
  if (a5)
    v11 |= 0x40u;
  *(_OWORD *)(v10 + 88) = 0uLL;
  *((_DWORD *)v10 + 14) = v11;
  *((_DWORD *)v10 + 15) = a3;
  *((_QWORD *)v10 + 8) = 8;
  *((_QWORD *)v10 + 13) = 0;
  *((_QWORD *)v10 + 14) = 0;
  *(_OWORD *)(v10 + 136) = 0uLL;
  *(_OWORD *)(v10 + 152) = 0uLL;
  *((_DWORD *)v10 + 30) = v11;
  *((_DWORD *)v10 + 31) = a3;
  *((_QWORD *)v10 + 16) = 8;
  NodeRangePatternsCopy = FillQueryNodeRangePatternsCopy((uint64_t)(v10 + 40), a1, a2);
  *((_DWORD *)v10 + 6) = NodeRangePatternsCopy;
  if (!NodeRangePatternsCopy)
    *(_DWORD *)v10 = 0;
  return v10;
}

void SIIndexInactive(uint64_t a1)
{
  uint64_t v2;
  qos_class_t v3;
  NSObject *global_queue;

  if (a1)
  {
    if (*(_QWORD *)(a1 + 1184))
    {
      v2 = *(_QWORD *)(a1 + 1040);
      if (v2)
        si_enqueue_work(v2, (uint64_t)si_index_inactive, a1);
    }
  }
  else
  {
    v3 = qos_class_self();
    global_queue = dispatch_get_global_queue(v3, 0);
    dispatch_async(global_queue, &__block_literal_global_392);
  }
}

BOOL ContentIndexDocSetEquals(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;

  if (a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33))
  {
    v2 = *(_DWORD *)(a1 + 48);
    if (v2 == *(_DWORD *)(a2 + 48)
      && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
      && *(float *)(a1 + 20) == *(float *)(a2 + 20)
      && (v2 >= 9 || ((0x10Fu >> v2) & 1) == 0)
      && *(unsigned __int8 *)(a1 + 34) == *(unsigned __int8 *)(a2 + 34))
    {
      v4 = *(unsigned int *)(a1 + 96);
      if ((_DWORD)v4 == *(_DWORD *)(a2 + 96))
        return memcmp(*(const void **)(a1 + 72), *(const void **)(a2 + 72), 8 * v4) == 0;
    }
  }
  return 0;
}

BOOL si_livequery_equals(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

size_t __query_node_unique_retain_block_invoke(uint64_t a1, _OWORD *value)
{
  const void *v4;
  size_t v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t piece;
  uint8_t v13[16];

  if (!*((_QWORD *)value + 2) && (*((_WORD *)value + 20) & 0x30) == 0
    || (v4 = CFBagGetValue(*(CFBagRef *)(*(_QWORD *)(a1 + 32) + 64), value)) == 0)
  {
    if (*MEMORY[0x1E0C85AD8] <= 0x47uLL)
      ++sTotal_10673;
    v6 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x48uLL, 0x31F9A007uLL);
    if (v6)
    {
      v5 = (size_t)v6;
      *(_OWORD *)v6 = *value;
      v7 = value[1];
      v8 = value[2];
      v9 = value[3];
      v6[8] = *((_QWORD *)value + 8);
      *((_OWORD *)v6 + 2) = v8;
      *((_OWORD *)v6 + 3) = v9;
      *((_OWORD *)v6 + 1) = v7;
      v10 = *((_QWORD *)value + 2);
      if (!v10)
      {
LABEL_11:
        if ((*((_WORD *)value + 20) & 0x30) == 0)
        {
LABEL_13:
          _assessNodeCost(v5);
          return v5;
        }
LABEL_12:
        CFBagAddValue(*(CFMutableBagRef *)(*(_QWORD *)(a1 + 32) + 64), (const void *)v5);
        goto LABEL_13;
      }
      piece = clone_query_piece(v10);
      *(_QWORD *)(v5 + 16) = piece;
      if (piece)
      {
        if (*((_QWORD *)value + 2))
          goto LABEL_12;
        goto LABEL_11;
      }
      free((void *)v5);
    }
    else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", v13, 2u);
    }
    return 0;
  }
  v5 = (size_t)v4;
  CFBagAddValue(*(CFMutableBagRef *)(*(_QWORD *)(a1 + 32) + 64), v4);
  _assessNodeCost(v5);
  *(_DWORD *)(v5 + 44) >>= 1;
  return v5;
}

size_t _assessNodeCost(size_t result)
{
  uint64_t v1;
  const char *v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;

  if (*(_WORD *)(result + 40) == 4)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      if ((*(_BYTE *)(v1 + 33) & 4) == 0)
      {
        v2 = *(const char **)v1;
        if (!*(_QWORD *)v1
          || (result = strcmp(*(const char **)v1, "kMDItemTextContent"), (_DWORD)result)
          && (result = strncmp(v2, "_kMDItemOCRContent", 0x12uLL), (_DWORD)result))
        {
          v3 = *(unsigned __int8 **)(v1 + 72);
          if (!v3)
          {
            v5 = 0;
            goto LABEL_24;
          }
          result = strlen(*(const char **)(v1 + 72));
          v4 = *v3;
          if ((int)result < 1)
          {
            if (v4 != 42)
            {
LABEL_11:
              v5 = 5;
LABEL_24:
              *(_DWORD *)(v1 + 48) = v5;
              return result;
            }
          }
          else if (v4 != 42 && v3[(result - 1)] != 42)
          {
            goto LABEL_11;
          }
          v5 = 9;
          goto LABEL_24;
        }
      }
      v6 = *(unsigned __int8 **)(v1 + 72);
      if (!v6)
      {
        v9 = 0;
        goto LABEL_23;
      }
      result = strlen(*(const char **)(v1 + 72));
      v7 = *v6;
      if ((int)result < 1)
      {
        if (v7 == 42)
          goto LABEL_19;
      }
      else
      {
        v8 = v6[(result - 1)];
        if (v7 == 42)
        {
          if (v8 == 42)
          {
            v9 = 99;
LABEL_23:
            v5 = 100 * v9;
            goto LABEL_24;
          }
LABEL_19:
          v9 = 99 - result;
          goto LABEL_23;
        }
        if (v8 == 42)
        {
          v9 = 50 - result;
          goto LABEL_23;
        }
      }
      v9 = -(int)result;
      goto LABEL_23;
    }
  }
  return result;
}

unsigned int *si_livequery_retain2(uint64_t a1, unsigned int *a2)
{
  unsigned int *result;
  unsigned int v3;

  result = a2;
  do
    v3 = __ldaxr(a2);
  while (__stlxr(v3 + 1, a2));
  return result;
}

unsigned int *_db_obj_iter_next(uint64_t a1, unint64_t *a2, int a3, double a4, double a5, __n128 a6)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  size_t *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  _QWORD *v25;
  int8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  unsigned int *result;
  uint64_t **v31;
  uint64_t *i;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  _DWORD *v44;
  unsigned int v45;
  unint64_t v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *j;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  int *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  char v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  NSObject *v70;
  unint64_t v71;
  uint64_t v72;
  unsigned int v73;
  char *v74;
  char *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  char VInt16;
  int v80;
  unint64_t v81;
  unint64_t v82;
  _BOOL4 v83;
  int v84;
  unint64_t k;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  int v101;
  NSObject *v102;
  os_log_type_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  int *v107;
  char *v108;
  char *v109;
  const char *v110;
  char *v111;
  const char *v112;
  unint64_t v113;
  __int128 v114;
  _BYTE block[40];
  int64x2_t v116;
  unint64_t *v117;
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 74))
  {
    if (v9 + 80 != a1)
    {
      v74 = __si_assert_copy_extra_2151(0, -1);
      v75 = v74;
      v76 = "";
      if (v74)
        v76 = v74;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 12687, "iter==&dboi->subiterator", v76);
      free(v75);
      if (__valid_fs(-1))
        v77 = 2989;
      else
        v77 = 3072;
      *(_DWORD *)v77 = -559038737;
      abort();
    }
    obj_iter_resume(*(_QWORD *)a1, a4, a5, a6);
  }
  v10 = (_QWORD *)(a1 + 96);
  if (*(_QWORD *)(a1 + 96))
    goto LABEL_15;
  if (*(_QWORD *)(v9 + 64))
  {
    os_unfair_lock_lock((os_unfair_lock_t)&slabQueueLock);
    v11 = *(_QWORD *)(v9 + 64);
    if (v11)
    {
      *v10 = v11;
      *(_QWORD *)(v9 + 64) = *(_QWORD *)(v11 + 24);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&slabQueueLock);
    if (*v10)
      goto LABEL_15;
  }
  v12 = (size_t *)MEMORY[0x1E0C85AD8];
  v13 = *MEMORY[0x1E0C85AD8];
  v14 = OSAtomicDequeue(&stru_1EDBBE030, 0);
  if (v14)
  {
    v15 = (_QWORD *)v14[1];
    OSAtomicEnqueue(&slab_cache, v14, 0);
    do
LABEL_12:
      v16 = __ldxr(qword_1EDBBE0C0);
    while (__stxr(v16 + v13, qword_1EDBBE0C0));
    *v15 = 0;
    v15[1] = v15 + 3;
    v15[2] = (char *)v15 + v13;
    madvise(v15 + 3, *v12, 3);
    goto LABEL_14;
  }
  v15 = mmap(0, v13, 3, 4098, -100663296, 0);
  if (v15 != (_QWORD *)-1)
    goto LABEL_12;
  v15 = 0;
LABEL_14:
  *v10 = v15;
LABEL_15:
  v17 = (unint64_t *)(a1 + 64);
  v18 = atomic_load((unint64_t *)(a1 + 64));
  if (v18 >= *(_QWORD *)(a1 + 56))
  {
    result = 0;
    *a2 = -1;
    return result;
  }
  v19 = atomic_load(v17);
  v20 = *(_QWORD *)(v9 + 32);
  v21 = *(_QWORD *)(a1 + 8);
  do
    v22 = __ldaxr(v17);
  while (__stlxr(v22 + 1, v17));
  while (1)
  {
    v24 = (unint64_t *)(v20 + 32 * (v22 + v21));
    if ((v24[3] & 1) == 0)
      break;
    v23 = atomic_load((unint64_t *)(a1 + 64));
    if (v23 >= *(_QWORD *)(a1 + 56))
      return 0;
    v20 = *(_QWORD *)(v9 + 32);
    v21 = *(_QWORD *)(a1 + 8);
    do
      v22 = __ldaxr(v17);
    while (__stlxr(v22 + 1, v17));
  }
  *a2 = v24[1];
  v25 = *(_QWORD **)(*(_QWORD *)(v9 + 24) + 992);
  v26 = (int8x8_t)v25[1];
  if (v26)
  {
    v27 = *v24;
    v28 = (uint8x8_t)vcnt_s8(v26);
    v28.i16[0] = vaddlv_u8(v28);
    if (v28.u32[0] > 1uLL)
    {
      v29 = *v24;
      if (v27 >= *(_QWORD *)&v26)
        v29 = v27 % *(_QWORD *)&v26;
    }
    else
    {
      v29 = (*(_QWORD *)&v26 - 1) & v27;
    }
    v31 = *(uint64_t ***)(*v25 + 8 * v29);
    if (v31)
    {
      for (i = *v31; i; i = (uint64_t *)*i)
      {
        v33 = i[1];
        if (v33 == v27)
        {
          if (i[2] == v27)
          {
            if (*((_DWORD *)i + 6) != 3)
            {
              v43 = (unsigned int *)i[4];
              *((_BYTE *)v24 + 24) |= 1u;
              ++*(_QWORD *)(a1 + 80);
              return dboi_inflateDBO(v9, (_QWORD **)(a1 + 96), v43, (v24[3] & 4) != 0);
            }
            return 0;
          }
        }
        else
        {
          if (v28.u32[0] > 1uLL)
          {
            if (v33 >= *(_QWORD *)&v26)
              v33 %= *(_QWORD *)&v26;
          }
          else
          {
            v33 &= *(_QWORD *)&v26 - 1;
          }
          if (v33 != v29)
            break;
        }
      }
    }
  }
  v34 = v24[2];
  if ((~v34 & 0x3FFFFFFFCLL) == 0)
    return 0;
  if (*(_BYTE *)(v9 + 75))
  {
    v35 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    if (!v35)
      return 0;
    v36 = *(_QWORD *)(v35 + 856);
    if (!v36 || !*(_DWORD *)(v36 + 8))
      return 0;
    *(_QWORD *)block = MEMORY[0x1E0C809B0];
    *(_QWORD *)&block[8] = 0x40000000;
    *(_QWORD *)&block[16] = __get_pages_for_keys_block_invoke;
    *(_QWORD *)&block[24] = &__block_descriptor_tmp_159;
    *(_QWORD *)&block[32] = v35;
    v116 = vdupq_n_s64(1uLL);
    v117 = v24;
    v118 = a1;
    dispatch_apply(1uLL, 0, block);
    v34 = v24[2];
  }
  v37 = v34 >> 2;
  v38 = *(_DWORD *)(a1 + 40);
  if (v38 == (_DWORD)v37)
    goto LABEL_48;
  if (a3)
  {
    result = 0;
    *a2 = v19;
    atomic_store(v19, v17);
    return result;
  }
  v44 = *(_DWORD **)(a1 + 16);
  v45 = -1;
  if (v44)
  {
    *(_DWORD *)(a1 + 40) = -1;
    v45 = v38;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*v10)
    slab_reset((_QWORD *)(a1 + 96), -1);
  v46 = v24[2] >> 2;
  subiter_fetch_page(a1);
  if (*(_QWORD *)(a1 + 88))
  {
    v48 = atomic_load((unint64_t *)(a1 + 64));
    v49 = *(_QWORD *)(a1 + 56);
    if (v48 < v49)
    {
      v50 = *(_QWORD *)(v9 + 32);
      v51 = *(_QWORD *)(a1 + 8);
      for (j = (_BYTE *)(v50 + 32 * (v48 + v51) + 24); ; j += 32)
      {
        v53 = v48 + 1;
        if ((*j & 1) != 0)
        {
          if (v53 >= v49)
            goto LABEL_71;
        }
        else if (v53 >= v49 || (_DWORD)v46 != (*((_QWORD *)j - 1) >> 2))
        {
LABEL_71:
          v54 = v48 + 1;
          v55 = v51 + v48;
          if (v54 < v49)
          {
            *(_QWORD *)(a1 + 48) = v54;
            subiter_fetch_next_page(a1, *(_QWORD *)(v50 + 32 * v55 + 16) >> 2, *(unsigned __int8 *)(v50 + 32 * v55 + 25), (v24[2] & 0x400000000) != 0);
          }
          break;
        }
        ++v48;
      }
    }
  }
  if (v44)
  {
    if (*(_BYTE *)(*(_QWORD *)a1 + 73))
      v56 = 24;
    else
      v56 = 16;
    page_release(*(_QWORD *)(v9 + 24), v44, v45, v56, 0);
  }
  if (*(_QWORD *)(a1 + 88))
  {
    v57 = *(_QWORD *)(a1 + 72);
    if (v57 < *(_QWORD *)(a1 + 56))
    {
      LODWORD(v58) = -1;
      v59 = (int *)&unk_1EF19F000;
      *(_QWORD *)&v47 = 134218240;
      do
      {
        v60 = *(_QWORD *)(v9 + 32);
        v61 = *(_QWORD *)(a1 + 8) + v57;
        v62 = v60 + 32 * v61;
        v63 = (_BYTE *)(v62 + 24);
        v64 = *(_BYTE *)(v62 + 24);
        if ((v64 & 2) == 0)
        {
          v67 = *(_QWORD *)(v62 + 16);
          v66 = (_QWORD *)(v62 + 16);
          v65 = v67;
          if ((v67 & 0x400000000) != 0)
          {
            *v63 = v64 | 2;
            v68 = v65 >> 2;
            if ((_DWORD)v58 != (v65 >> 2))
            {
              if (*(_DWORD *)(a1 + 44) != (_DWORD)v68 && *(_DWORD *)(a1 + 40) != (_DWORD)v68)
              {
                obj_iter_prefetch_page(v9, v68, *(unsigned __int8 *)(v60 + 32 * v61 + 25));
                break;
              }
              if (v59[804] >= 5)
              {
                v114 = v47;
                v113 = v65 >> 2;
                v69 = *__error();
                v70 = _SILogForLogForCategory(1);
                if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
                {
                  v71 = atomic_load(v17);
                  v72 = (*v66 >> 34) & 1;
                  *(_DWORD *)block = v114;
                  *(_QWORD *)&block[4] = v71;
                  *(_WORD *)&block[12] = 1024;
                  *(_DWORD *)&block[14] = v72;
                  _os_log_impl(&dword_1B8270000, v70, OS_LOG_TYPE_DEFAULT, "(nextpage)Skip prefetch of %ld cache:%d", block, 0x12u);
                }
                *__error() = v69;
                LODWORD(v58) = v113;
                v59 = (_DWORD *)&unk_1EF19F000;
                v47 = v114;
              }
              else
              {
                v58 = v65 >> 2;
              }
            }
          }
        }
        v57 = *(_QWORD *)(a1 + 72) + 1;
        *(_QWORD *)(a1 + 72) = v57;
      }
      while (v57 < *(_QWORD *)(a1 + 56));
    }
  }
LABEL_48:
  v39 = *(_QWORD *)(a1 + 16);
  if (!v39)
    return 0;
  if (*(_DWORD *)v39 != 1684172850 && (*(_DWORD *)v39 || *(_DWORD *)(v39 + 4)))
  {
    v111 = __si_assert_copy_extra_2151(0, -1);
    v109 = v111;
    v112 = "";
    if (v111)
      v112 = v111;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 12798, "iter->dbp->signature == 0x64627032 || (iter->dbp->signature==0 && iter->dbp->size==0)", v112);
LABEL_197:
    free(v109);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v40 = *(int *)(v39 + 8);
  v41 = *(unsigned __int8 *)(v39 + 24);
  if (*(char *)(v39 + 24) < 0)
  {
    v73 = *(unsigned __int8 *)(v39 + 24);
    if (v73 > 0xBF)
    {
      if (v73 > 0xDF)
      {
        if (v73 > 0xEF)
        {
          if (v73 > 0xF7)
          {
            if (v73 > 0xFB)
            {
              if (v73 > 0xFD)
              {
                if (v73 == 255)
                {
                  v41 = *(_QWORD *)(v39 + 25);
                  v42 = 9;
                }
                else
                {
                  v41 = ((unint64_t)*(unsigned __int8 *)(v39 + 25) << 48) | ((unint64_t)*(unsigned __int8 *)(v39 + 26) << 40) | ((unint64_t)*(unsigned __int8 *)(v39 + 27) << 32) | ((unint64_t)*(unsigned __int8 *)(v39 + 28) << 24) | ((unint64_t)*(unsigned __int8 *)(v39 + 29) << 16) | ((unint64_t)*(unsigned __int8 *)(v39 + 30) << 8) | *(unsigned __int8 *)(v39 + 31);
                  v42 = 8;
                }
              }
              else
              {
                v41 = ((v41 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v39 + 25) << 40) | ((unint64_t)*(unsigned __int8 *)(v39 + 26) << 32) | ((unint64_t)*(unsigned __int8 *)(v39 + 27) << 24) | ((unint64_t)*(unsigned __int8 *)(v39 + 28) << 16) | ((unint64_t)*(unsigned __int8 *)(v39 + 29) << 8) | *(unsigned __int8 *)(v39 + 30);
                v42 = 7;
              }
            }
            else
            {
              v41 = ((v41 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v39 + 25) << 32) | ((unint64_t)*(unsigned __int8 *)(v39 + 26) << 24) | ((unint64_t)*(unsigned __int8 *)(v39 + 27) << 16) | ((unint64_t)*(unsigned __int8 *)(v39 + 28) << 8) | *(unsigned __int8 *)(v39 + 29);
              v42 = 6;
            }
          }
          else
          {
            v41 = ((v41 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v39 + 25) << 24) | ((unint64_t)*(unsigned __int8 *)(v39 + 26) << 16) | ((unint64_t)*(unsigned __int8 *)(v39 + 27) << 8) | *(unsigned __int8 *)(v39 + 28);
            v42 = 5;
          }
        }
        else
        {
          v41 = ((v41 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v39 + 25) << 16) | ((unint64_t)*(unsigned __int8 *)(v39 + 26) << 8) | *(unsigned __int8 *)(v39 + 27);
          v42 = 4;
        }
      }
      else
      {
        v41 = ((v41 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v39 + 25) << 8) | *(unsigned __int8 *)(v39 + 26);
        v42 = 3;
      }
    }
    else
    {
      v41 = *(unsigned __int8 *)(v39 + 25) | ((v41 & 0x3F) << 8);
      v42 = 2;
    }
  }
  else
  {
    v42 = 1;
  }
  v78 = v39 + 20;
  *(_QWORD *)block = v42;
  VInt16 = ldb_readVInt16(v39 + 24, (uint64_t *)block);
  v80 = *(_DWORD *)(*(_QWORD *)(v9 + 24) + 804);
  v81 = *(_QWORD *)(a1 + 24);
  if (!v81)
  {
    *(_QWORD *)(a1 + 24) = v78;
    v81 = v39 + 20;
  }
  v82 = v39 + v40;
  v83 = (VInt16 & 0x20) == 0 || (v80 & 1) == 0;
  if (v83)
    v84 = 3;
  else
    v84 = 1;
  if ((v24[2] & 3) == 3)
  {
    if (v83)
    {
      for (k = *(_QWORD *)(a1 + 16) + 20; ; k += (*(_DWORD *)k + 4))
      {
        *(_QWORD *)(a1 + 24) = k;
        if (k >= v82)
          break;
        v86 = k + 4;
        v87 = *(unsigned __int8 *)(k + 4);
        if (*(char *)(k + 4) < 0)
        {
          v89 = *(unsigned __int8 *)(k + 4);
          if (v89 > 0xBF)
          {
            if (v89 > 0xDF)
            {
              if (v89 > 0xEF)
              {
                if (v89 > 0xF7)
                {
                  if (v89 > 0xFB)
                  {
                    if (v89 > 0xFD)
                    {
                      if (v89 == 255)
                      {
                        v87 = *(_QWORD *)(k + 5);
                        v88 = 9;
                      }
                      else
                      {
                        v87 = ((unint64_t)*(unsigned __int8 *)(k + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(k + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(k + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(k + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(k + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(k + 10) << 8) | *(unsigned __int8 *)(k + 11);
                        v88 = 8;
                      }
                    }
                    else
                    {
                      v87 = ((v87 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(k + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(k + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(k + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(k + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(k + 9) << 8) | *(unsigned __int8 *)(k + 10);
                      v88 = 7;
                    }
                  }
                  else
                  {
                    v87 = ((v87 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(k + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(k + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(k + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(k + 8) << 8) | *(unsigned __int8 *)(k + 9);
                    v88 = 6;
                  }
                }
                else
                {
                  v87 = ((v87 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(k + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(k + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(k + 7) << 8) | *(unsigned __int8 *)(k + 8);
                  v88 = 5;
                }
              }
              else
              {
                v87 = ((v87 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(k + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(k + 6) << 8) | *(unsigned __int8 *)(k + 7);
                v88 = 4;
              }
            }
            else
            {
              v87 = ((v87 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(k + 5) << 8) | *(unsigned __int8 *)(k + 6);
              v88 = 3;
            }
          }
          else
          {
            v87 = *(unsigned __int8 *)(k + 5) | ((v87 & 0x3F) << 8);
            v88 = 2;
          }
        }
        else
        {
          v88 = 1;
        }
        v90 = *(unsigned __int8 *)(v86 + v88);
        if (*(char *)(v86 + v88) < 0)
        {
          if (v90 >= 0xC0)
          {
            if (v90 >= 0xE0)
            {
LABEL_191:
              v108 = __si_assert_copy_extra_2151(0, -1);
              v109 = v108;
              v110 = "";
              if (v108)
                v110 = v108;
              __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v110);
              goto LABEL_197;
            }
            v91 = v88 + 2;
          }
          else
          {
            v91 = v88 + 1;
          }
          v90 = *(unsigned __int8 *)(v86 + v91);
        }
        if (v87 == *v24)
        {
          if ((v80 & 1) != 0)
            v100 = (v90 >> 5) & 1;
          else
            v100 = 0;
          v24[2] = v100 | v24[2] & 0xFFFFFFFFFFFFFFFCLL;
          goto LABEL_187;
        }
      }
      result = 0;
      *(_QWORD *)(a1 + 24) = v81;
      return result;
    }
  }
  else
  {
    v84 = v24[2] & 3;
  }
  if (v81 >= v82)
    return 0;
  while (1)
  {
    v92 = v81 + 4;
    v93 = *(unsigned __int8 *)(v81 + 4);
    if (*(char *)(v81 + 4) < 0)
    {
      v95 = *(unsigned __int8 *)(v81 + 4);
      if (v95 > 0xBF)
      {
        if (v95 > 0xDF)
        {
          if (v95 > 0xEF)
          {
            if (v95 > 0xF7)
            {
              if (v95 > 0xFB)
              {
                if (v95 > 0xFD)
                {
                  if (v95 == 255)
                  {
                    v93 = *(_QWORD *)(v81 + 5);
                    v94 = 9;
                  }
                  else
                  {
                    v93 = ((unint64_t)*(unsigned __int8 *)(v81 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v81 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v81 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v81 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v81 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v81 + 10) << 8) | *(unsigned __int8 *)(v81 + 11);
                    v94 = 8;
                  }
                }
                else
                {
                  v93 = ((v93 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v81 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v81 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(v81 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(v81 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(v81 + 9) << 8) | *(unsigned __int8 *)(v81 + 10);
                  v94 = 7;
                }
              }
              else
              {
                v93 = ((v93 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v81 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v81 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(v81 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(v81 + 8) << 8) | *(unsigned __int8 *)(v81 + 9);
                v94 = 6;
              }
            }
            else
            {
              v93 = ((v93 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v81 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(v81 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v81 + 7) << 8) | *(unsigned __int8 *)(v81 + 8);
              v94 = 5;
            }
          }
          else
          {
            v93 = ((v93 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v81 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v81 + 6) << 8) | *(unsigned __int8 *)(v81 + 7);
            v94 = 4;
          }
        }
        else
        {
          v93 = ((v93 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v81 + 5) << 8) | *(unsigned __int8 *)(v81 + 6);
          v94 = 3;
        }
      }
      else
      {
        v93 = *(unsigned __int8 *)(v81 + 5) | ((v93 & 0x3F) << 8);
        v94 = 2;
      }
    }
    else
    {
      v94 = 1;
    }
    v96 = *(unsigned __int8 *)(v92 + v94);
    if (*(char *)(v92 + v94) < 0)
    {
      if (v96 >= 0xC0)
      {
        if (v96 >= 0xE0)
          goto LABEL_191;
        v97 = v94 + 2;
      }
      else
      {
        v97 = v94 + 1;
      }
      v96 = *(unsigned __int8 *)(v92 + v97);
    }
    v98 = *v24 - v93;
    if (*v24 == v93)
      break;
    v99 = v84 - (v80 & (v96 >> 5) & 1);
    if (v99)
      v98 = v99;
    if (v98 <= 0)
    {
      v101 = *__error();
      v102 = _SILogForLogForCategory(1);
      v103 = 2 * (dword_1EF19FC90 < 4);
      if (os_log_type_enabled(v102, v103))
      {
        v104 = *v24;
        v105 = v24[2] & 3;
        v106 = *(_QWORD *)(a1 + 24) - v78;
        *(_DWORD *)block = 134218752;
        *(_QWORD *)&block[4] = v104;
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = v105;
        *(_WORD *)&block[18] = 2048;
        *(_QWORD *)&block[20] = v106;
        *(_WORD *)&block[28] = 2048;
        *(_QWORD *)&block[30] = v41;
        _os_log_impl(&dword_1B8270000, v102, v103, "Failed to find %lld (%d) (offset:%lu first:%llu)", block, 0x26u);
      }
      v107 = __error();
      result = 0;
      *v107 = v101;
      return result;
    }
    result = 0;
    v81 += (*(_DWORD *)v81 + 4);
    *(_QWORD *)(a1 + 24) = v81;
    if (v81 >= v82)
      return result;
  }
LABEL_187:
  *((_BYTE *)v24 + 24) |= 1u;
  ++*(_QWORD *)(a1 + 80);
  return dboi_inflateDBO(v9, (_QWORD **)(a1 + 96), *(unsigned int **)(a1 + 24), (v24[3] & 4) != 0);
}

uint64_t ldb_readVInt16(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  __int16 v5;
  char *v7;
  char *v8;
  const char *v9;

  v2 = *a2;
  v3 = *a2 + 1;
  v4 = *(unsigned __int8 *)(a1 + *a2);
  if (*(char *)(a1 + *a2) < 0)
  {
    if (v4 > 0xBF)
    {
      if (v4 >= 0xE0)
      {
        v7 = __si_assert_copy_extra_2151(0, -1);
        v8 = v7;
        v9 = "";
        if (v7)
          v9 = v7;
        __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v9);
        free(v8);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      LOWORD(v4) = *(unsigned __int8 *)(v2 + a1 + 2) | (*(unsigned __int8 *)(a1 + v3) << 8);
      v3 = v2 + 3;
    }
    else
    {
      v5 = *(unsigned __int8 *)(a1 + v3) | ((v4 & 0x3F) << 8);
      v3 = v2 + 2;
      LOWORD(v4) = v5;
    }
  }
  *a2 = v3;
  return (unsigned __int16)v4;
}

unsigned int *dboi_inflateDBO(uint64_t a1, _QWORD **a2, unsigned int *a3, char a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int *v11;
  unint64_t v12;
  char *v14;
  char *v15;
  const char *v16;
  _QWORD v17[5];
  unsigned int *v18;

  v7 = 0;
  v8 = *(unsigned __int8 *)(a1 + 72);
  v18 = 0;
  v9 = *(_QWORD *)(a1 + 24);
  if ((a4 & 1) == 0)
    v7 = *(_QWORD *)(a1 + 56);
  if (v8)
    v10 = 98304;
  else
    v10 = 0x10000;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 0x40000000;
  v17[2] = __dboi_inflateDBO_block_invoke;
  v17[3] = &__block_descriptor_tmp_157;
  v17[4] = a2;
  _inflateDBO(v9, a3, (void **)&v18, v7, v10, (uint64_t)v17);
  v11 = v18;
  v12 = v18[3];
  if (v12 <= 0x2F)
  {
    v14 = __si_assert_copy_extra_2151(0, -1);
    v15 = v14;
    v16 = "";
    if (v14)
      v16 = v14;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13332, "dbo->used_bytes >= sizeof(external_db_obj)", v16);
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if ((unint64_t)v18 + v12 > (*a2)[2])
    slab_new(a2, v12, 250);
  else
    (*a2)[1] = (char *)v18 + v12;
  v11[2] = v11[3];
  return v11;
}

void subiter_fetch_page(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  BOOL v20;
  int v21;
  char *v22;
  char *v23;
  const char *v24;
  int v25;
  NSObject *v26;
  char *v27;
  char *v28;
  const char *v29;
  int v30;
  void *value_out;
  uint8_t v32[4];
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  unsigned int v37;
  uint8_t buf[4];
  int v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v8 = (int *)v1;
  v42 = *MEMORY[0x1E0C80C00];
  v9 = *(NSObject **)(v1 + 88);
  if (v9)
    dispatch_sync(v9, &__block_literal_global_161);
  v10 = *((_QWORD *)v8 + 4);
  if (v8[11] == v7)
  {
    *((_QWORD *)v8 + 4) = 0;
    v8[10] = v7;
    v8[11] = -1;
    if (v10)
    {
      *((_QWORD *)v8 + 2) = v10;
      *((_QWORD *)v8 + 3) = v10 + 20;
    }
    else
    {
      *((_QWORD *)v8 + 2) = 0;
    }
  }
  else
  {
    if (v10)
    {
      v11 = *__error();
      v12 = _SILogForLogForCategory(7);
      v13 = 2 * (dword_1EF19FCA8 < 4);
      if (os_log_type_enabled(v12, v13))
      {
        v14 = v8[11];
        v15 = *((_QWORD *)v8 + 4);
        *(_DWORD *)buf = 67109376;
        v39 = v14;
        v40 = 2048;
        v41 = v15;
        _os_log_impl(&dword_1B8270000, v12, v13, "Wrong next page in db iterator 0x%x %p", buf, 0x12u);
      }
      *__error() = v11;
      page_release(*(_QWORD *)(*(_QWORD *)v8 + 24), *((_DWORD **)v8 + 4), v8[11], 0x10u, 0);
      v8[11] = -1;
      *((_QWORD *)v8 + 4) = 0;
    }
    value_out = 0;
    v30 = 0;
    bzero(buf, 0x4000uLL);
    *((_QWORD *)v8 + 24) = buf;
    subiter_attempt_prefetch((ssize_t)v8, v7, v5);
    if (*(_BYTE *)(*(_QWORD *)v8 + 77))
      v16 = 57;
    else
      v16 = 25;
    if (v3)
      v17 = 0x2000;
    else
      v17 = 0;
    v18 = _page_fetch_with_fd(*(_QWORD *)(*(_QWORD *)v8 + 24), &value_out, v7, v5 << 12, v16 | v17, &v30, *(unsigned int *)(*(_QWORD *)v8 + 4), v8 + 30);
    v19 = value_out;
    if (v18)
      v20 = 1;
    else
      v20 = value_out == 0;
    if (!v20)
    {
      v21 = *((_DWORD *)value_out + 3);
      if ((v21 & 8) != 0)
      {
        v25 = *__error();
        v26 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v32 = 136315650;
          v33 = "subiter_fetch_page";
          v34 = 1024;
          v35 = 12319;
          v36 = 1024;
          v37 = v7;
          _os_log_error_impl(&dword_1B8270000, v26, OS_LOG_TYPE_ERROR, "%s:%d: obj_iter_fetch_page: ERR: page came back compressed! pgnum 0x%x\n", v32, 0x18u);
        }
        *__error() = v25;
        v27 = __si_assert_copy_extra_2151(0, -1);
        v28 = v27;
        if (v27)
          v29 = v27;
        else
          v29 = "";
        __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 12320, v29);
        free(v28);
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      if ((v21 & 0xF0) != 0)
      {
        v22 = __si_assert_copy_extra_2151(0, *(_DWORD *)(*(_QWORD *)v8 + 4));
        v23 = v22;
        v24 = "";
        if (v22)
          v24 = v22;
        __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: tried to read attr name table data! pgnum 0x%x, flags 0x%x\n", "sdb2.c", 12324, "(dbp->flags & 0x000000f0)==0", v24, v7, *((_DWORD *)value_out + 3));
        free(v23);
        if (__valid_fs(*(_DWORD *)(*(_QWORD *)v8 + 4)))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if (v30)
        ++*((_QWORD *)v8 + 13);
      v8[10] = v7;
      *((_QWORD *)v8 + 2) = v19;
    }
  }
}

uint64_t _page_fetch_with_fd(uint64_t a1, void **value_out, unsigned int a3, size_t __nbyte, int a5, _DWORD *a6, uint64_t __fd, int *a8)
{
  unsigned int v12;
  uint64_t v15;
  uint64_t v16;
  pthread_rwlock_t *v17;
  pthread_rwlock_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  _BOOL4 v29;
  _DWORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v35;
  int *v36;
  unsigned int *v37;
  unsigned int v38;
  int v39;
  signed int v40;
  int v41;
  int v43;
  void *v44;
  __n128 *v45;
  unsigned int v46;
  int v47;
  signed int v48;
  int v49;
  int v51;
  size_t v52;
  malloc_type_id_t v53;
  unsigned int *v54;
  unsigned int v55;
  size_t v56;
  size_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  size_t v61;
  off_t v62;
  ssize_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  NSObject *v72;
  uint64_t v73;
  int v74;
  int v75;
  NSObject *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  const char *v80;
  void *(*v81)(int, size_t);
  uint64_t v82;
  uint64_t v83;
  int v84;
  NSObject *v85;
  unsigned int v86;
  uint64_t v87;
  int v88;
  NSObject *v89;
  CFStringRef v90;
  _DWORD *v91;
  unsigned int v92;
  int v93;
  int v94;
  uint64_t v95;
  BOOL v96;
  int v97;
  NSObject *v98;
  unsigned int v99;
  CFStringRef v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void **v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  int v112;
  NSObject *v113;
  uint64_t v115;
  __n128 *v116;
  void *v117;
  unint64_t v118;
  int v119;
  int v120;
  int v121;
  int v122;
  unint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  unint64_t v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  unint64_t v134;
  char *v135;
  const char *v136;
  uint64_t v137;
  char *v138;
  const char *v139;
  char *v140;
  const char *v141;
  char *v142;
  char *v143;
  const char *v144;
  unsigned int size;
  unsigned int sizea;
  int size_4;
  int size_4a;
  _BOOL4 size_4b;
  void *__buf;
  _QWORD v151[5];
  int v152;
  void *ptr;
  _DWORD *v154;
  _BYTE buf[62];
  __int16 v156;
  _QWORD v157[6];

  v12 = __nbyte;
  v15 = a1;
  v157[3] = *MEMORY[0x1E0C80C00];
  ptr = 0;
  if (a8)
  {
    __buf = (void *)*((_QWORD *)a8 + 9);
    if ((a5 & 0x2000) != 0)
      goto LABEL_33;
  }
  else
  {
    __buf = 0;
    if ((a5 & 0x2000) != 0)
      goto LABEL_33;
  }
  v16 = *(_QWORD *)(a1 + 928);
  if (a3 && (a5 & 0x10) != 0)
  {
    v17 = (pthread_rwlock_t *)(v16 + 8);
    size_4 = a5 & 3;
    if ((a5 & 3) != 0)
      pthread_rwlock_rdlock(v17);
    else
      pthread_rwlock_wrlock(v17);
    v19 = *(unsigned int *)(v16 + 220);
    if ((int)v19 >= 1)
    {
      v20 = 0;
      while (*(_DWORD *)(v16 + 252 + 4 * v20) != a3)
      {
        if (v19 == ++v20)
          goto LABEL_29;
      }
      v21 = (unsigned int *)(v16 + 216);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      v23 = v16 + 48 * v20;
      v24 = malloc_type_malloc(*(int *)(*(_QWORD *)(v23 + 272) + 8), 0x71D6761EuLL);
      memcpy(v24, *(const void **)(v23 + 272), *(int *)(*(_QWORD *)(v23 + 272) + 8));
      v24[1] = *(_DWORD *)(*(_QWORD *)(v23 + 272) + 8);
      *value_out = v24;
      if (size_4)
        goto LABEL_23;
      goto LABEL_22;
    }
LABEL_29:
    pthread_rwlock_unlock((pthread_rwlock_t *)(v16 + 8));
    goto LABEL_30;
  }
  if (a3 && (a5 & 4) == 0)
  {
    v18 = (pthread_rwlock_t *)(v16 + 8);
    size_4a = a5 & 3;
    if ((a5 & 3) != 0)
      pthread_rwlock_rdlock(v18);
    else
      pthread_rwlock_wrlock(v18);
    v26 = *(unsigned int *)(v16 + 220);
    if ((int)v26 >= 1)
    {
      v20 = 0;
      while (*(_DWORD *)(v16 + 252 + 4 * v20) != a3)
      {
        if (v26 == ++v20)
          goto LABEL_29;
      }
      v54 = (unsigned int *)(v16 + 216);
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 + 1, v54));
      *value_out = *(void **)(v16 + 48 * v20 + 272);
      if (size_4a)
        goto LABEL_23;
LABEL_22:
      db_cache_mru((__n128 *)v16, v20);
LABEL_23:
      pthread_rwlock_unlock((pthread_rwlock_t *)(v16 + 8));
      v25 = 0;
      *a6 = 1;
      return v25;
    }
    goto LABEL_29;
  }
LABEL_30:
  v27 = (unsigned int *)(v16 + 228);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  if ((a5 & 0x2002) != 0)
    goto LABEL_33;
  if ((a5 & 8) != 0)
  {
    if (page_cache_fetch(*(unsigned int **)(v15 + 928), value_out, a3))
      goto LABEL_33;
    *a6 = 2;
    if ((*((_BYTE *)*value_out + 12) & 0xF0) == 0)
      return 0;
    v135 = __si_assert_copy_extra_2151(0, -1);
    v79 = v135;
    v136 = "";
    if (v135)
      v136 = v135;
    __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: tried to read attr name table data! pgnum 0x%x, flags 0x%x\n", "sdb2.c", 2389, "((*dbpp)->flags & DB_PAGE_STRING_DATA)==0", v136, a3, *((_DWORD *)*value_out + 3));
    goto LABEL_216;
  }
  v45 = *(__n128 **)(v15 + 928);
  if ((a5 & 1) != 0)
  {
    if (page_cache_copy_page(*(unsigned int **)(v15 + 928), (const void **)value_out, a3, a5))
      goto LABEL_33;
    if ((*((_BYTE *)*value_out + 12) & 0xF0) == 0)
    {
LABEL_212:
      v25 = 0;
      *a6 = 2;
      return v25;
    }
    v78 = __si_assert_copy_extra_2151(0, -1);
    v79 = v78;
    v80 = "";
    if (v78)
      v80 = v78;
    __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: tried to read attr name table data! pgnum 0x%x, flags 0x%x\n", "sdb2.c", 2397, "((*dbpp)->flags & DB_PAGE_STRING_DATA)==0", v80, a3, *((_DWORD *)*value_out + 3));
LABEL_216:
    free(v79);
    if (__valid_fs(-1))
      v137 = 2989;
    else
      v137 = 3072;
    *(_DWORD *)v137 = -559038737;
    abort();
  }
  v151[0] = MEMORY[0x1E0C809B0];
  v151[1] = 0x40000000;
  v151[2] = ___page_fetch_with_fd_block_invoke;
  v151[3] = &__block_descriptor_tmp_165_10079;
  v151[4] = v15;
  v152 = a5;
  *(_QWORD *)buf = 0;
  if (!page_cache_copy_page((unsigned int *)v45, (const void **)buf, a3, 4))
  {
    if (v45[13].n128_u32[3])
    {
      v46 = atomic_load(&v45[14].n128_u32[1]);
      v47 = 100 * v46;
      v48 = atomic_load(&v45[13].n128_u32[2]);
      v49 = v45[13].n128_i32[3];
      if (v47 > v48 && v49 <= 3)
      {
        if (v45[15].n128_u32[v49 + 2])
        {
          v51 = atomic_load(&v45[14].n128_u32[1]);
          v49 = v45[13].n128_i32[3];
          if (v51 > 10 * v49 && MEMORY[0xFFFFFC030] <= 0x32u)
          {
            v45[13].n128_u32[3] = ++v49;
            atomic_store(0, &v45[14].n128_u32[1]);
            atomic_store(0, &v45[13].n128_u32[2]);
          }
        }
      }
    }
    else
    {
      v49 = 2;
      v45[13].n128_u32[3] = 2;
    }
    v115 = v49 - 1;
    if (!db_cache_flush_entry((unsigned int *)v45, v49 - 1, (uint64_t)v151))
    {
      v116 = &v45[3 * v115];
      free((void *)v116[17].n128_u64[1]);
      v116[17].n128_u64[1] = 0;
      v117 = *(void **)buf;
      free((void *)v116[17].n128_u64[0]);
      v116[17].n128_u64[0] = (unint64_t)v117;
      v45[15].n128_u32[v115 + 3] = a3;
      v116[18].n128_u32[0] = 0;
      *value_out = v117;
      db_cache_mru(v45, v115);
      v45[18].n128_u64[1] = 0;
      v45[19].n128_u32[0] = 0;
      v45[19].n128_u64[1] = 0;
      if ((*((_BYTE *)*value_out + 12) & 0xF0) == 0)
        goto LABEL_212;
      v140 = __si_assert_copy_extra_2151(0, -1);
      v79 = v140;
      v141 = "";
      if (v140)
        v141 = v140;
      __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: tried to read attr name table data! pgnum 0x%x, flags 0x%x\n", "sdb2.c", 2404, "((*dbpp)->flags & DB_PAGE_STRING_DATA)==0", v141, a3, *((_DWORD *)*value_out + 3));
      goto LABEL_216;
    }
  }
LABEL_33:
  *a6 = 0;
  v29 = (a5 & 4) == 0;
  if ((a5 & 4) != 0)
  {
    v44 = *value_out;
    ptr = *value_out;
    goto LABEL_88;
  }
  if ((a5 & 1) != 0)
  {
    v44 = __buf;
    if (__buf)
    {
      v29 = 0;
      ptr = __buf;
      goto LABEL_89;
    }
    v52 = v12;
    v53 = 654065978;
    goto LABEL_87;
  }
  if (a3 && (db_cache_contains(*(_QWORD *)(v15 + 928), a3, 0) & 1) == 0)
  {
    size = v12;
    *(_QWORD *)buf = (unint64_t)a3 << *(_DWORD *)(v15 + 12);
    *(_QWORD *)&buf[8] = v12;
    v30 = *(_DWORD **)(v15 + 848);
    v154 = 0;
    v31 = _fd_acquire_fd((uint64_t)v30, &v154);
    do
    {
      v32 = fcntl(v31, 44, buf);
      v33 = g_prot_error_callback;
      if (v32 != -1 || g_prot_error_callback == 0)
        break;
      v35 = v30[10];
      v36 = __error();
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v33 + 16))(v33, v35, *v36, 12) & 1) != 0);
    _fd_release_fd(v30, v31, 0, (uint64_t)v154);
    v12 = size;
    v29 = (a5 & 4) == 0;
  }
  ptr = 0;
  if ((*(_BYTE *)(v15 + 804) & 8) != 0)
    goto LABEL_85;
  v37 = *(unsigned int **)(v15 + 928);
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = __db_flush_cache_lru_block_invoke;
  *(_QWORD *)&buf[24] = &__block_descriptor_tmp_184_10080;
  *(_QWORD *)&buf[32] = v15;
  *(_QWORD *)&buf[40] = &ptr;
  *(_DWORD *)&buf[48] = a5 & 0x4000;
  if (v37[55])
  {
    v38 = atomic_load(v37 + 57);
    v39 = 100 * v38;
    v40 = atomic_load(v37 + 54);
    v41 = v37[55];
    if (v39 > v40 && v41 <= 3)
    {
      if (v37[v41 + 62])
      {
        v43 = atomic_load(v37 + 57);
        v41 = v37[55];
        if (v43 > 10 * v41 && MEMORY[0xFFFFFC030] <= 0x32u)
        {
          v37[55] = ++v41;
          atomic_store(0, v37 + 57);
          atomic_store(0, v37 + 54);
        }
      }
    }
  }
  else
  {
    v41 = 2;
    v37[55] = 2;
  }
  v25 = db_cache_flush_entry(v37, v41 - 1, (uint64_t)buf);
  if ((_DWORD)v25)
  {
    free(ptr);
    return v25;
  }
  if (!ptr)
  {
LABEL_85:
    v44 = 0;
    v56 = v12;
    goto LABEL_86;
  }
  v56 = v12;
  v57 = malloc_size(ptr);
  v44 = ptr;
  if (v57 < v12)
  {
LABEL_86:
    free(v44);
    v52 = v56;
    v53 = 2553078630;
LABEL_87:
    v44 = malloc_type_valloc(v52, v53);
    ptr = v44;
  }
LABEL_88:
  if (!v44)
    return 12;
LABEL_89:
  if (!a8)
  {
LABEL_96:
    if ((_DWORD)__fd == -1)
    {
      v67 = v12;
      v68 = fd_pread(*(_DWORD **)(v15 + 848), v44, v12, (unint64_t)a3 << *(_DWORD *)(v15 + 12));
      if (v68 == v12)
      {
        sizea = v12;
        v69 = 0;
        goto LABEL_130;
      }
      v73 = v68;
      *(_DWORD *)(v15 + 4) |= 4u;
      v74 = *__error();
      v75 = *__error();
      v76 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "_page_fetch_with_fd";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2474;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = a3;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v74;
        *(_WORD *)&buf[30] = 2080;
        *(_QWORD *)&buf[32] = v15 + 324;
        *(_WORD *)&buf[40] = 2048;
        *(_QWORD *)&buf[42] = v73;
        *(_WORD *)&buf[50] = 2048;
        *(_QWORD *)&buf[52] = v67;
        _os_log_error_impl(&dword_1B8270000, v76, OS_LOG_TYPE_ERROR, "%s:%d: Failed reading pgnum %d error:%d (%s) %zd != %zd", buf, 0x3Cu);
      }
      *__error() = v75;
      *__error() = v74;
      if (*__error())
      {
        if (!v29)
          return *__error();
      }
      else
      {
        *__error() = 22;
        if (!v29)
          return *__error();
      }
    }
    else
    {
      sizea = v12;
      size_4b = v29;
      v61 = v12;
      v62 = (unint64_t)a3 << *(_DWORD *)(v15 + 12);
      while (1)
      {
        v63 = pread(__fd, v44, v61, v62);
        v64 = v63;
        if (v63 != -1)
          break;
        v65 = g_prot_error_callback;
        if (!g_prot_error_callback)
          break;
        v66 = __error();
        if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v65 + 16))(v65, __fd, *v66, 4) & 1) == 0)
        {
          v64 = -1;
          goto LABEL_107;
        }
      }
      if (v63 == v61)
      {
        v69 = 0;
        v29 = size_4b;
        goto LABEL_130;
      }
LABEL_107:
      *(_DWORD *)(v15 + 4) |= 4u;
      v70 = *__error();
      v71 = *__error();
      v72 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        *(_QWORD *)&buf[4] = "_page_fetch_with_fd";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2488;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = a3;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v70;
        *(_WORD *)&buf[30] = 2080;
        *(_QWORD *)&buf[32] = v15 + 324;
        *(_WORD *)&buf[40] = 2048;
        *(_QWORD *)&buf[42] = v64;
        *(_WORD *)&buf[50] = 2048;
        *(_QWORD *)&buf[52] = v61;
        _os_log_error_impl(&dword_1B8270000, v72, OS_LOG_TYPE_ERROR, "%s:%d: Failed reading pgnum %d error:%d (%s) %zd != %zd", buf, 0x3Cu);
      }
      *__error() = v71;
      *__error() = v70;
      if (!*__error())
        *__error() = 22;
      if (!size_4b)
        return *__error();
    }
    free(ptr);
    return *__error();
  }
  v59 = *a8;
  v58 = a8[1];
  while (1)
  {
    while (1)
    {
      if (v58 >= v59)
        goto LABEL_96;
      v60 = a8[v58 + 10];
      if (v60 >= a3)
        break;
      a8[1] = ++v58;
    }
    if (v60 == a3)
      break;
    a8[1] = ++v58;
    if (v60 > a3)
      goto LABEL_96;
  }
  sizea = v12;
  if (v29)
  {
    free(v44);
    v77 = a8[1];
    v58 = a8[1];
  }
  else
  {
    v77 = v58;
  }
  v29 = 0;
  a8[1] = v58 + 1;
  ptr = *(void **)&a8[2 * v77 + 2];
  v69 = 1;
LABEL_130:
  v154 = 0;
  if ((a5 & 1) != 0)
  {
    v87 = db2_page_uncompress_swap(v15, (int8x16_t *)ptr, &v154, 0);
    if ((_DWORD)v87)
    {
      v83 = v87;
      v88 = *__error();
      v89 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
      {
        v128 = (unint64_t)a3 << *(_DWORD *)(v15 + 12);
        v129 = *(_DWORD *)ptr;
        v130 = *((_DWORD *)ptr + 1);
        v132 = *((_DWORD *)ptr + 2);
        v131 = *((_DWORD *)ptr + 3);
        *(_DWORD *)buf = 136317442;
        *(_QWORD *)&buf[4] = "_page_fetch_with_fd";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2509;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v83;
        *(_WORD *)&buf[24] = 2048;
        *(_QWORD *)&buf[26] = a3;
        *(_WORD *)&buf[34] = 2048;
        *(_QWORD *)&buf[36] = v128;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v129;
        *(_WORD *)&buf[50] = 1024;
        *(_DWORD *)&buf[52] = v130;
        *(_WORD *)&buf[56] = 1024;
        *(_DWORD *)&buf[58] = v132;
        v156 = 1024;
        LODWORD(v157[0]) = v131;
        WORD2(v157[0]) = 2080;
        *(_QWORD *)((char *)v157 + 6) = v15 + 324;
        _os_log_error_impl(&dword_1B8270000, v89, OS_LOG_TYPE_ERROR, "%s:%d: db2_page_uncompress_swap failed, error:%d, pgnum:%lu, pgoff:0x%llx, signature:0x%x, size:%d, used_bytes:%d, flags:0x%x, name:%s", buf, 0x4Eu);
      }
      *__error() = v88;
      if (SIIsAppleInternal_onceToken != -1)
        dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_4644);
      if (SIIsAppleInternal_internal)
      {
        do
          v86 = __ldxr(&_page_fetch_with_fd__crashCount);
        while (__stxr(v86 + 1, &_page_fetch_with_fd__crashCount));
        goto LABEL_149;
      }
LABEL_183:
      if ((a5 & 0x1000) == 0 && (*(_BYTE *)(v15 + 4) & 0x40) == 0)
        analytics_send_event_lazy();
      if ((a5 & 4) != 0)
        goto LABEL_199;
      if ((a5 & 1) != 0)
      {
        if (!v29)
          goto LABEL_199;
        v105 = ptr;
      }
      else
      {
        v101 = *(_QWORD *)(v15 + 928);
        v102 = *(unsigned int *)(v101 + 220);
        if ((int)v102 < 1)
          goto LABEL_199;
        v103 = 0;
        v104 = (void **)(v101 + 272);
        while (*v104 != ptr)
        {
          ++v103;
          v104 += 6;
          if (v102 == v103)
            goto LABEL_199;
        }
        v106 = v15;
        *(_DWORD *)(v101 + 4 * v103 + 252) = 0;
        v107 = v101 + 272;
        v108 = v107 + 48 * v103;
        v110 = *(void **)(v108 + 8);
        v109 = v108 + 8;
        v105 = v110;
        *(_DWORD *)(v109 + 8) = 0;
        v111 = v107 + 48 * v103;
        *(_QWORD *)(v111 + 24) = 0;
        *(_DWORD *)(v111 + 32) = 0;
        *(_QWORD *)(v111 + 40) = 0;
        *v104 = 0;
        if (v110)
        {
          free(v105);
          *(_QWORD *)v109 = 0;
          v105 = *v104;
        }
        v15 = v106;
      }
      free(v105);
LABEL_199:
      if ((a5 & 0x1000) == 0 && (*(_BYTE *)(v15 + 4) & 0x40) == 0)
      {
        v112 = *__error();
        v113 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
        {
          v133 = *(_DWORD *)(v15 + 4);
          v134 = (unint64_t)a3 << *(_DWORD *)(v15 + 12);
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = "_page_fetch_with_fd";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2633;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = a3;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v134;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = v133;
          *(_WORD *)&buf[44] = 2080;
          *(_QWORD *)&buf[46] = v15 + 324;
          _os_log_error_impl(&dword_1B8270000, v113, OS_LOG_TYPE_ERROR, "%s:%d: page_fetch marking the dst as corrupted, pgnum:%lu, pgoff:0x%llx, flags:0x%x, name:%s", buf, 0x36u);
        }
        *__error() = v112;
        *(_DWORD *)(v15 + 4) |= 0x40u;
      }
      return 22;
    }
  }
  else
  {
    if ((*((_DWORD *)ptr + 3) & 0x1000) != 0)
      v81 = dst_malloc;
    else
      v81 = 0;
    v82 = db2_page_uncompress_swap(v15, (int8x16_t *)ptr, &v154, v81);
    if ((_DWORD)v82)
    {
      v83 = v82;
      v84 = *__error();
      v85 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
      {
        v123 = (unint64_t)a3 << *(_DWORD *)(v15 + 12);
        v124 = *(_DWORD *)ptr;
        v125 = *((_DWORD *)ptr + 1);
        v127 = *((_DWORD *)ptr + 2);
        v126 = *((_DWORD *)ptr + 3);
        *(_DWORD *)buf = 136317442;
        *(_QWORD *)&buf[4] = "_page_fetch_with_fd";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2527;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v83;
        *(_WORD *)&buf[24] = 2048;
        *(_QWORD *)&buf[26] = a3;
        *(_WORD *)&buf[34] = 2048;
        *(_QWORD *)&buf[36] = v123;
        *(_WORD *)&buf[44] = 1024;
        *(_DWORD *)&buf[46] = v124;
        *(_WORD *)&buf[50] = 1024;
        *(_DWORD *)&buf[52] = v125;
        *(_WORD *)&buf[56] = 1024;
        *(_DWORD *)&buf[58] = v127;
        v156 = 1024;
        LODWORD(v157[0]) = v126;
        WORD2(v157[0]) = 2080;
        *(_QWORD *)((char *)v157 + 6) = v15 + 324;
        _os_log_error_impl(&dword_1B8270000, v85, OS_LOG_TYPE_ERROR, "%s:%d: db2_page_uncompress_swap failed, error:%d, pgnum:%lu, pgoff:0x%llx, signature:0x%x, size:%d, used_bytes:%d, flags:0x%x, name:%s", buf, 0x4Eu);
      }
      *__error() = v84;
      if (SIIsAppleInternal_onceToken != -1)
        dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_4644);
      if (SIIsAppleInternal_internal)
      {
        do
          v86 = __ldxr(&_page_fetch_with_fd__crashCount_167);
        while (__stxr(v86 + 1, &_page_fetch_with_fd__crashCount_167));
LABEL_149:
        if (v86)
          goto LABEL_183;
        v90 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("db2_page_uncompress_swap failed, error:%d, pgnum:%lu, pgoff:0x%llx, signature:0x%x, size:%d, used_bytes:%d, flags:0x%x, name:%s"), v83, a3, (unint64_t)a3 << *(_DWORD *)(v15 + 12), *(unsigned int *)ptr, *((unsigned int *)ptr + 1), *((unsigned int *)ptr + 2), *((unsigned int *)ptr + 3), v15 + 324);
        goto LABEL_181;
      }
      goto LABEL_183;
    }
  }
  v91 = v154;
  if (v154)
  {
    if (v29)
    {
      free(ptr);
      v91 = v154;
    }
    ptr = v91;
    goto LABEL_158;
  }
  if (((ptr != __buf) & ~v69) != 0)
  {
    v93 = malloc_size(ptr);
    v91 = ptr;
    *((_DWORD *)ptr + 1) = v93;
LABEL_158:
    v92 = sizea;
    goto LABEL_159;
  }
  v154 = malloc_type_valloc(sizea, 0x4CB75EF5uLL);
  v92 = sizea;
  memcpy(v154, ptr, sizea);
  v91 = v154;
  ptr = v154;
  v154[1] = sizea;
LABEL_159:
  if (*v91 != 1684172850)
    goto LABEL_173;
  v94 = v91[3];
  v95 = 4;
  if ((v94 & 4) == 0)
    v95 = 1;
  if (v91[v95] != v92 || (v94 & 1) == 0 || v91[2] > v91[1])
  {
LABEL_173:
    v97 = *__error();
    v98 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
    {
      v118 = (unint64_t)a3 << *(_DWORD *)(v15 + 12);
      v119 = *(_DWORD *)ptr;
      v120 = *((_DWORD *)ptr + 1);
      v122 = *((_DWORD *)ptr + 2);
      v121 = *((_DWORD *)ptr + 3);
      *(_DWORD *)buf = 136317186;
      *(_QWORD *)&buf[4] = "_page_fetch_with_fd";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2567;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a3;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v118;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v119;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v120;
      *(_WORD *)&buf[50] = 1024;
      *(_DWORD *)&buf[52] = v122;
      *(_WORD *)&buf[56] = 1024;
      *(_DWORD *)&buf[58] = v121;
      v156 = 2080;
      v157[0] = v15 + 324;
      _os_log_error_impl(&dword_1B8270000, v98, OS_LOG_TYPE_ERROR, "%s:%d: page_fetch found an invalid page, pgnum:%lu, pgoff:0x%llx, signature:0x%x, size:%d, used_bytes:%d, flags:0x%x, name:%s", buf, 0x48u);
    }
    *__error() = v97;
    if (SIIsAppleInternal_onceToken != -1)
      dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_4644);
    if (SIIsAppleInternal_internal)
    {
      do
        v99 = __ldxr(&_page_fetch_with_fd__crashCount_168);
      while (__stxr(v99 + 1, &_page_fetch_with_fd__crashCount_168));
      if (!v99)
      {
        v90 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("page_fetch found an invalid page, pgnum:%lu, pgoff:0x%llx, signature:0x%x, size:%d, used_bytes:%d, flags:0x%x, name:%s"), a3, (unint64_t)a3 << *(_DWORD *)(v15 + 12), *(unsigned int *)ptr, *((unsigned int *)ptr + 1), *((unsigned int *)ptr + 2), *((unsigned int *)ptr + 3), v15 + 324);
LABEL_181:
        v100 = v90;
        getpid();
        SISimulateCrashForPid(0, (uint64_t)v100);
        if (v100)
          CFRelease(v100);
        goto LABEL_183;
      }
    }
    goto LABEL_183;
  }
  v96 = (a5 & 3) != 0;
  if ((v94 & 0xC) != 0)
    v96 = 0;
  if ((v94 & 0xF0) != 0 && !v96)
  {
    v138 = __si_assert_copy_extra_2151(0, -1);
    v79 = v138;
    v139 = "";
    if (v138)
      v139 = v138;
    __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: tried to read attr name table data! pgnum 0x%x, flags 0x%x\n", "sdb2.c", 2577, "(dbp->flags & 0x000000f0)==0", v139, a3, *((_DWORD *)ptr + 3));
    goto LABEL_216;
  }
  if ((a5 & 4) == 0)
  {
    *value_out = v91;
    if ((a5 & 1) == 0)
    {
      if ((v94 & 0xC) != 0)
      {
        db_cache_add_page(*(__n128 **)(v15 + 928), v91, v91, a3);
        return 0;
      }
      return 0;
    }
  }
  if ((a5 & 0x23) != 1)
    return 0;
  if ((*((_BYTE *)*value_out + 12) & 0xF0) != 0)
  {
    v142 = __si_assert_copy_extra_2151(0, -1);
    v143 = v142;
    v144 = "";
    if (v142)
      v144 = v142;
    __message_assert("%s:%u: failed assertion '%s' %s obj_iter_fetch_page: ERR: tried to read attr name table data! pgnum 0x%x, flags 0x%x\n", "sdb2.c", 2595, "((*dbpp)->flags & 0x000000f0)==0", v144, a3, *((_DWORD *)ptr + 3));
    free(v143);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  page_cache_add(*(unsigned int **)(v15 + 928), (_DWORD **)value_out, a3, (a5 & 8) != 0);
  return 0;
}

__n128 db_cache_mru(__n128 *a1, int a2)
{
  __n128 *v3;
  int v4;
  uint64_t v6;
  __n128 *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 *v10;
  __n128 *v11;
  __n128 v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  const char *v17;
  __n128 result;
  __n128 v19;
  __n128 v20;
  __n128 v21;

  v3 = &a1[3 * a2];
  v19 = v3[17];
  v20 = v3[18];
  v21 = v3[19];
  v4 = a1[15].n128_i32[a2 + 3];
  if (a2 >= 1)
  {
    v6 = a2;
    v7 = a1 + 17;
    v8 = 3 * a2;
    do
    {
      v9 = v6 - 1;
      v10 = &v7[v8];
      v11 = &a1[3 * (v6 - 1)];
      v12 = v11[17];
      v13 = v11[19];
      v10[1] = v11[18];
      v10[2] = v13;
      *v10 = v12;
      *((_DWORD *)&v7[-1] + v6 - 1) = a1[15].n128_u32[(v6 - 1) + 3];
      v14 = v7[v8].n128_i64[0];
      if (v14 && (*(_BYTE *)(v14 + 12) & 0xC) == 0)
      {
        v15 = __si_assert_copy_extra_268();
        v16 = v15;
        v17 = "";
        if (v15)
          v17 = v15;
        __message_assert("%s:%u: failed assertion '%s' %s Bad cache page at index %d; max %d, start %d",
          "page-cache.c",
          679,
          "cache->cache_entries[i].cache_dbps->flags & DB_PAGE_COMPRESSION_ENABLED",
          v17,
          v6,
          a1[13].n128_u32[3],
          a2);
        free(v16);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v8 -= 3;
      --v6;
    }
    while ((unint64_t)(v9 + 1) > 1);
  }
  a1[17] = v19;
  a1[18] = v20;
  result = v21;
  a1[19] = v21;
  a1[15].n128_u32[3] = v4;
  return result;
}

_QWORD *slab_reset(_QWORD *result, int a2)
{
  _QWORD **v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = (_QWORD **)*result;
  if (*result)
  {
    v3 = result;
    result = *v2;
    *v2 = 0;
    *(_QWORD *)(*v3 + 8) = *v3 + 24;
    if (result)
    {
      do
      {
        v5 = (_QWORD *)*result;
        slab_vm_deallocate(result, result[2] - (_QWORD)result, a2);
        result = v5;
      }
      while (v5);
    }
  }
  return result;
}

ssize_t subiter_attempt_prefetch(ssize_t result, unsigned int a2, unsigned int a3)
{
  _DWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  off_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;

  if (*(_DWORD *)(result + 124) >= *(_DWORD *)(result + 120))
  {
    v3 = (_DWORD *)result;
    *(_QWORD *)(result + 120) = 0;
    v4 = atomic_load((unint64_t *)(result + 64));
    v5 = *(_QWORD *)(result + 56);
    if (v4 < v5)
    {
      *(_DWORD *)(result + 120) = 1;
      *(_DWORD *)(result + 160) = a2;
      *(_DWORD *)(result + 176) = a3;
      v6 = *(_QWORD *)result;
      v7 = *(_QWORD *)(result + 8);
      v8 = *(_QWORD *)(*(_QWORD *)result + 32);
      v9 = v8 + 32 * (v7 + v4);
      v10 = *(_QWORD *)(v9 + 16);
      if ((v10 & 0x400000000) == 0)
        goto LABEL_54;
      v11 = v4 + 1;
      v12 = v10 >> 2;
      if ((*(_BYTE *)(v9 + 24) & 1) != 0 || (_DWORD)v12 == a2)
      {
        v14 = v8 + 32 * (v4 + v7);
        while (1)
        {
          v13 = v10 & 0x400000000;
          if ((v10 & 0x400000000) == 0 || v11 >= v5)
            break;
          result = v11 + 1;
          v9 = v8 + 32 * (v11 + v7);
          v15 = *(_BYTE *)(v14 + 56);
          v10 = *(_QWORD *)(v14 + 48);
          v12 = v10 >> 2;
          v14 += 32;
          ++v11;
          if ((v15 & 1) == 0)
          {
            v11 = result;
            if ((_DWORD)v12 != a2)
            {
              v13 = v10 & 0x400000000;
              v11 = result;
              v9 = v14;
              goto LABEL_13;
            }
          }
        }
      }
      else
      {
        v13 = 1;
      }
      if (v11 >= v5 || !v13 || v12 < a2 || a3 + a2 < v12)
        goto LABEL_54;
LABEL_13:
      v16 = a3;
      v3[41] = v12;
      v17 = *(unsigned __int8 *)(v9 + 25);
      v3[45] = v17;
      v18 = v16 + v17;
      v3[30] = 2;
      if (v18 <= 0xF)
      {
        v19 = *(_QWORD *)(v9 + 16);
        v20 = v19 >> 2;
        if ((*(_BYTE *)(v9 + 24) & 1) != 0 || (_DWORD)v12 == (_DWORD)v20)
        {
          v22 = v8 + 32 * (v11 + v7) - 32;
          while ((v19 & 0x400000000) != 0 && v11 < v5)
          {
            v21 = v11 + 1;
            v9 = v8 + 32 * (v11 + v7);
            v23 = *(_BYTE *)(v22 + 56);
            v19 = *(_QWORD *)(v22 + 48);
            v20 = v19 >> 2;
            v22 += 32;
            ++v11;
            if ((v23 & 1) == 0)
            {
              v11 = v21;
              if ((_DWORD)v12 != (_DWORD)v20)
                goto LABEL_26;
            }
          }
        }
        v21 = v11;
        v22 = v9;
LABEL_26:
        if (v21 < v5
          && (v19 & 0x400000000) != 0
          && v12 <= v20
          && (int)v12 + (int)v17 >= v20)
        {
          v3[42] = v20;
          v24 = *(unsigned __int8 *)(v22 + 25);
          v3[46] = v24;
          v18 += v24;
          v3[30] = 3;
          if (v18 <= 0xF)
          {
            v25 = *(_QWORD *)(v22 + 16);
            v26 = v25 >> 2;
            if ((*(_BYTE *)(v22 + 24) & 1) != 0 || (_DWORD)v20 == (_DWORD)v26)
            {
              v28 = v8 + 32 * (v21 + v7) - 32;
              while ((v25 & 0x400000000) != 0 && v21 < v5)
              {
                v27 = v21 + 1;
                v22 = v8 + 32 * (v21 + v7);
                v29 = *(_BYTE *)(v28 + 56);
                v25 = *(_QWORD *)(v28 + 48);
                v26 = v25 >> 2;
                v28 += 32;
                ++v21;
                if ((v29 & 1) == 0)
                {
                  v21 = v27;
                  if ((_DWORD)v20 != (_DWORD)v26)
                    goto LABEL_39;
                }
              }
            }
            v27 = v21;
            v28 = v22;
LABEL_39:
            if (v27 < v5
              && (v25 & 0x400000000) != 0
              && v20 <= v26
              && (int)v20 + (int)v24 >= v26)
            {
              v3[43] = v26;
              v30 = *(unsigned __int8 *)(v28 + 25);
              v3[47] = v30;
              v18 += v30;
              v3[30] = 4;
            }
          }
        }
      }
      v31 = *(unsigned int *)(v6 + 4);
      v32 = v18 << 12;
      v33 = a2 << 12;
      while (1)
      {
        result = pread(v31, v3 + 50, v32, v33);
        if (result != -1)
          break;
        v34 = g_prot_error_callback;
        if (!g_prot_error_callback)
          break;
        v35 = __error();
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v34 + 16))(v34, v31, *v35, 4);
        if ((result & 1) == 0)
          goto LABEL_54;
      }
      if (result == v32)
      {
        v36 = v3[30];
        if ((_DWORD)v36)
        {
          v37 = 0;
          v38 = 0;
          v39 = v3 + 32;
          do
          {
            *(_QWORD *)&v39[2 * v37] = (char *)v3 + v38 + 200;
            v38 += (v39[v37++ + 12] << 12);
          }
          while (v36 != v37);
        }
      }
      else
      {
LABEL_54:
        v3[30] = 0;
      }
    }
  }
  return result;
}

unsigned int *db_obj_subiter_next(unsigned int *result, unint64_t *a2, double a3, double a4, __n128 a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (result)
  {
    v6 = (uint64_t)result;
    v7 = *(_QWORD *)result;
    while (1)
    {
      result = _db_obj_iter_next(v6, a2, 0, a3, a4, a5);
      if (result)
        break;
      v8 = atomic_load((unint64_t *)(v6 + 64));
      v9 = *(_QWORD *)(v6 + 56);
      if (v8 >= v9)
      {
        v10 = *(_BYTE *)(v6 + 112) + 1;
        *(_BYTE *)(v6 + 112) = v10;
        if (v10 > 1u || *(_QWORD *)(v6 + 80) == v9)
          return 0;
        atomic_store(0, (unint64_t *)(v6 + 64));
        if (v9)
        {
          v11 = 0;
          do
          {
            v12 = *(_QWORD *)(v7 + 32) + 32 * (v11 + *(_QWORD *)(v6 + 8));
            *(_QWORD *)(v12 + 16) |= 0x3FFFFFFFCuLL;
            v13 = *(_QWORD *)(v7 + 32) + 32 * (v11 + *(_QWORD *)(v6 + 8));
            *(_BYTE *)(v13 + 25) = 0;
            *(_QWORD *)(v13 + 16) |= 0x400000000uLL;
            ++v11;
          }
          while (v11 < *(_QWORD *)(v6 + 56));
        }
        subiter_do_lookups((unint64_t *)v6, a3, a4, a5);
      }
      else if (*(_BYTE *)(v6 + 112))
      {
        return 0;
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void page_cache_add(unsigned int *a1, _DWORD **a2, unsigned int a3, char a4)
{
  _DWORD *v4;
  unsigned int *v8;
  unsigned int i;
  unsigned int v10;
  size_t v11;
  malloc_zone_t *v12;
  _DWORD *v13;
  int v14;
  malloc_zone_t *v15;
  NSObject *v16;
  int v17;
  int v18;
  int v19;
  uint64_t key;
  uint64_t v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  _DWORD *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (!*a2)
    return;
  if ((v4[3] & 0xC) == 0 || (v4[3] & 0x1000) != 0)
    return;
  v8 = a1 + 62;
  for (i = atomic_load(a1 + 62); i <= a3; i = v10)
  {
    while (1)
    {
      v10 = __ldaxr(v8);
      if (v10 != i)
        break;
      if (!__stlxr(a3 + 1, v8))
        goto LABEL_12;
    }
    __clrex();
  }
LABEL_12:
  key = *(_QWORD *)a1;
  v21 = a3;
  v11 = ((int)v4[2] + *MEMORY[0x1E0C85AD8] - 1) & ~*MEMORY[0x1E0C85AC0];
  v12 = malloc_default_purgeable_zone();
  v13 = malloc_type_zone_valloc(v12, v11, 0x2A35C422uLL);
  memcpy(v13, v4, (int)v4[2]);
  v13[1] = v11;
  if (sdb_init_cache_onceToken != -1)
    dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_27_11254);
  if (sdb_init_cache_status == 1)
    v14 = cache_set_and_retain((cache_t *)sdbLargeCacheArray, &key, v13, v11);
  else
    v14 = 1;
  if (dword_1EF19FCA8 >= 5)
  {
    v19 = *__error();
    v16 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = v4[1];
      v18 = v4[2];
      *(_DWORD *)buf = 67110656;
      v23 = v14;
      v24 = 2048;
      v25 = key;
      v26 = 1024;
      v27 = v21;
      v28 = 2048;
      v29 = v13;
      v30 = 1024;
      v31 = v17;
      v32 = 1024;
      v33 = v18;
      v34 = 1024;
      v35 = v11;
      _os_log_impl(&dword_1B8270000, v16, OS_LOG_TYPE_DEFAULT, "Cache add %d %p %d %p %d %d %d", buf, 0x34u);
    }
    *__error() = v19;
    if (v14)
      goto LABEL_18;
  }
  else if (v14)
  {
LABEL_18:
    v15 = malloc_default_purgeable_zone();
    malloc_zone_free(v15, v13);
    return;
  }
  if ((a4 & 1) != 0)
  {
    free(v4);
    *a2 = v13;
  }
  else
  {
    if (sdb_init_cache_onceToken != -1)
      dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_27_11254);
    if (sdb_init_cache_status == 1)
      cache_release_value((cache_t *)sdbLargeCacheArray, v13);
  }
}

void __SIUserCtxFinalize(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  void **v11;
  void *v12;
  uint64_t v13;
  const void *v14;
  const void *v15;
  const void *v16;

  v2 = *(const void **)(a1 + 56);
  if (v2)
    CFRelease(v2);
  *(_QWORD *)(a1 + 56) = 0;
  v3 = *(const void **)(a1 + 64);
  if (v3)
    CFRelease(v3);
  *(_QWORD *)(a1 + 64) = 0;
  v4 = *(const void **)(a1 + 72);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 72) = 0;
  v5 = *(const void **)(a1 + 80);
  if (v5)
    CFRelease(v5);
  *(_QWORD *)(a1 + 80) = 0;
  v6 = *(const void **)(a1 + 88);
  if (v6)
    CFRelease(v6);
  *(_QWORD *)(a1 + 88) = 0;
  v7 = *(const void **)(a1 + 136);
  if (v7)
    CFRelease(v7);
  *(_QWORD *)(a1 + 136) = 0;
  v8 = *(const void **)(a1 + 96);
  if (v8)
    CFRelease(v8);
  *(_QWORD *)(a1 + 96) = 0;
  v9 = *(const void **)(a1 + 104);
  if (v9)
    CFRelease(v9);
  *(_QWORD *)(a1 + 104) = 0;
  v10 = *(const void **)(a1 + 112);
  if (v10)
    CFRelease(v10);
  *(_QWORD *)(a1 + 112) = 0;
  v11 = *(void ***)(a1 + 120);
  if (v11)
  {
    v12 = *v11;
    if (*v11)
    {
      v13 = 1;
      do
      {
        free(v12);
        v11 = *(void ***)(a1 + 120);
        v12 = v11[v13++];
      }
      while (v12);
    }
    free(v11);
  }
  free(*(void **)(a1 + 128));
  v14 = *(const void **)(a1 + 144);
  if (v14)
    CFRelease(v14);
  *(_QWORD *)(a1 + 144) = 0;
  v15 = *(const void **)(a1 + 152);
  if (v15)
    CFRelease(v15);
  *(_QWORD *)(a1 + 152) = 0;
  v16 = *(const void **)(a1 + 168);
  if (v16)
    CFRelease(v16);
  *(_QWORD *)(a1 + 168) = 0;
}

double SIGetAccumulatedWorkTimeSinceLastSync(uint64_t a1)
{
  if (a1)
    return *(double *)(a1 + 2152);
  else
    return 0.0;
}

uint64_t ContentIndexDocSet_Step(uint64_t result, _QWORD *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v5;
  pthread_rwlock_t *v6;
  uint64_t v7;
  pthread_rwlock_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int8x8_t v13;
  const __CFAllocator *v14;
  CFMutableSetRef Mutable;
  CFMutableSetRef v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD);
  _DWORD *v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD);
  int v37;
  _DWORD *v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  NSObject *v62;
  int v63;
  int v64;
  const char *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  NSObject *v86;
  int v87;
  int v88;
  _DWORD *v89;
  int8x8_t v90;
  uint64_t locked;
  uint64_t v92;
  int v93;
  NSObject *v94;
  int v95;
  int v96;
  int v97;
  NSObject *v98;
  os_log_type_t v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  void (*v104)(_QWORD);
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  void (*v108)(_QWORD);
  uint64_t v109;
  uint64_t v110;
  _DWORD *v111;
  _BYTE *v112;
  int v113;
  NSObject *v114;
  int v115;
  int v116;
  NSObject *v117;
  int v118;
  int v119;
  int v120;
  NSObject *v121;
  int v122;
  int v123;
  int v124;
  const __CFSet *v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unsigned int v130;
  unsigned int v131;
  unint64_t v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unint64_t v139;
  unsigned int v140;
  unsigned int v141;
  unint64_t v142;
  unsigned int v143;
  char v144;
  uint8_t v145[4];
  const char *v146;
  __int16 v147;
  int v148;
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  _BYTE *v152;
  uint8_t buf[4];
  _BYTE v154[10];
  _BYTE v155[6];
  __int16 v156;
  int v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v3 = result;
  if (*(_BYTE *)(result + 53))
    return 0;
  v5 = *(_QWORD *)(result + 80);
  if (!*(_BYTE *)(result + 56))
  {
    v144 = 1;
    if (!v5 || !*(_QWORD *)(v5 + 56) || (*(_DWORD *)(v5 + 48) | 2) == 2)
    {
      v8 = *(pthread_rwlock_t **)(*(_QWORD *)result + 24);
      if (v8)
      {
        posreadunlock(v8);
        *(_QWORD *)(*(_QWORD *)v3 + 24) = 0;
      }
      return 0;
    }
    v10 = *(_QWORD *)(result + 72);
    if (v10 >= 1)
    {
      v12 = 0;
      while (!ContentIndexDocSetContainsPhrase(*(_QWORD *)(v3 + 8 * v12 + 80)))
      {
        if (v10 == ++v12)
          goto LABEL_23;
      }
      return ContentIndexDocSet_PositionRead((uint64_t *)v3, a2, *(unsigned __int8 *)(v5 + 33), a3, v13);
    }
LABEL_23:
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    v16 = CFSetCreateMutable(v14, 0, 0);
    do
    {
      v17 = __ldxr(exceptionSequenceNum);
      v18 = v17 + 1;
    }
    while (__stxr(v17 + 1, exceptionSequenceNum));
    *(_DWORD *)v145 = 0;
    v143 = 0;
    v142 = 0;
    v19 = setThreadIdAndInfo(-1, sIteratorExceptionCallbacks, *(_QWORD *)(v3 + 16), 0, v18);
    v143 = HIDWORD(v19);
    *(_DWORD *)v145 = v19;
    v142 = __PAIR64__(v20, v21);
    v22 = *(_QWORD *)&threadData[18 * v19 + 2];
    v23 = v22 + 320 * HIDWORD(v19);
    v128 = *(_DWORD *)(v23 + 312);
    v24 = *(void (**)(_QWORD))(v23 + 224);
    if (v24)
      v24(*(_QWORD *)(v22 + 320 * HIDWORD(v19) + 288));
    v141 = *(_DWORD *)v145;
    v140 = v143;
    v139 = v142;
    if (_setjmp((int *)v23))
    {
      v25 = (_DWORD *)(v23 + 312);
      v26 = *__error();
      v27 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v154 = "ContentIndexDocSet_Step";
        *(_WORD *)&v154[8] = 1024;
        *(_DWORD *)v155 = 3887;
        _os_log_error_impl(&dword_1B8270000, v27, OS_LOG_TYPE_ERROR, "%s:%d: Caught assertion", buf, 0x12u);
      }
      *__error() = v26;
      *v25 = v128;
      CIOnThreadCleanUpReset(v139);
      dropThreadId(v141, 1, v18);
      CICleanUpReset(v141, HIDWORD(v139));
      v9 = 35;
      v28 = 0;
LABEL_94:
      if (Mutable)
        CFRelease(Mutable);
      if (v16)
        CFRelease(v16);
      if (!v144)
      {
        *a2 += v28;
        return v9;
      }
      if (*(_QWORD *)v3)
      {
        v110 = *(_QWORD *)(*(_QWORD *)v3 + 8);
        if (v110)
        {
          v111 = *(_DWORD **)(v110 + 4480);
          if (v111)
          {
            bzero(buf, 0x400uLL);
            v112 = fd_realpath(v111, buf);
            v113 = *__error();
            v114 = _SILogForLogForCategory(10);
            if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v145 = 136315906;
              v146 = "ContentIndexDocSet_Step";
              v147 = 1024;
              v148 = 3898;
              v149 = 2048;
              v150 = v3;
              v151 = 2080;
              v152 = v112;
              _os_log_error_impl(&dword_1B8270000, v114, OS_LOG_TYPE_ERROR, "%s:%d: Caught assertion for iterator %p %s", v145, 0x26u);
            }
            *__error() = v113;
          }
        }
      }
      *(_BYTE *)(v3 + 58) = 1;
      *(_BYTE *)(v3 + 53) = 1;
      return 0;
    }
    do
    {
      v29 = __ldxr(exceptionSequenceNum);
      v30 = v29 + 1;
    }
    while (__stxr(v29 + 1, exceptionSequenceNum));
    v31 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v30);
    v137 = HIDWORD(v31);
    v138 = v31;
    v135 = v33;
    v136 = v32;
    v34 = *(_QWORD *)&threadData[18 * v31 + 2];
    v35 = v34 + 320 * HIDWORD(v31);
    v126 = *(_DWORD *)(v35 + 312);
    v36 = *(void (**)(_QWORD))(v35 + 224);
    if (v36)
      v36(*(_QWORD *)(v34 + 320 * HIDWORD(v31) + 288));
    v127 = v30;
    v134 = v138;
    v133 = v137;
    v132 = __PAIR64__(v136, v135);
    v37 = _setjmp((int *)v35);
    if (v37)
    {
      v38 = (_DWORD *)(v35 + 312);
      v39 = *__error();
      v40 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)v154 = "ContentIndexDocSet_Step";
        *(_WORD *)&v154[8] = 1024;
        *(_DWORD *)v155 = 3885;
        _os_log_error_impl(&dword_1B8270000, v40, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v39;
      *v38 = v126;
      CIOnThreadCleanUpReset(v132);
      dropThreadId(v134, 1, v127);
      CICleanUpReset(v134, HIDWORD(v132));
      v41 = 0;
LABEL_88:
      v144 = 0;
      v105 = *(_QWORD *)&threadData[18 * v141 + 2];
      v106 = v140;
      v107 = v105 + 320 * v140;
      *(_DWORD *)(v107 + 312) = v128;
      v108 = *(void (**)(_QWORD))(v107 + 232);
      if (v108)
        v108(*(_QWORD *)(v105 + 320 * v106 + 288));
      dropThreadId(v141, 0, v18);
      if (v37)
        v109 = 35;
      else
        v109 = 0;
      v28 = v41;
      v9 = v109;
      goto LABEL_94;
    }
    v130 = 0;
    v131 = 0;
    if (*(_DWORD *)(v3 + 72))
    {
      v42 = 0;
      do
      {
        v43 = v42;
        ContentIndexDocSetIteratorFlatten(*(_QWORD *)(v3 + 80 + 8 * v42), Mutable, v16, 0);
        v42 = v43 + 1;
      }
      while (v43 + 1 < (unint64_t)*(unsigned int *)(v3 + 72));
    }
    v129 = v18;
    if (*(_BYTE *)(v3 + 52))
    {
      v44 = *(_QWORD *)(v3 + 16);
      v45 = *(_QWORD *)(v44 + 104);
      v46 = *(_BYTE *)(v44 + 40);
      v47 = *(_OWORD *)(v44 + 56);
      v48 = *(_QWORD *)(v44 + 72);
      v49 = *(_QWORD *)(v44 + 80);
      v50 = *(_QWORD *)(v44 + 88);
      v51 = *(_QWORD *)(v44 + 96);
      v52 = *(_QWORD *)(v44 + 48);
      v130 = 0;
      v131 = 0;
      if (v52)
        *(_QWORD *)(v44 + 48) = -1;
      v125 = Mutable;
      *(_QWORD *)(v44 + 104) = v45;
      *(_BYTE *)(v44 + 40) = v46;
      *(_OWORD *)(v44 + 56) = v47;
      *(_QWORD *)(v44 + 72) = v48;
      *(_QWORD *)(v44 + 80) = v49;
      *(_QWORD *)(v44 + 88) = v50;
      *(_QWORD *)(v44 + 96) = v51;
      BulkPayloadIterator_Step(*(_QWORD *)(v3 + 16), &v131, &v130);
      *(_BYTE *)(v3 + 54) = 0;
      v53 = *(_DWORD *)(v3 + 32);
      v54 = *(_DWORD *)(v3 + 36);
      v55 = v130;
      if (v54 <= v130)
        v56 = v130;
      else
        v56 = *(_DWORD *)(v3 + 36);
      *(_DWORD *)(v3 + 44) = v56;
      if (dword_1EF19FCB4 >= 5)
      {
        v115 = v53;
        v116 = *__error();
        v117 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
        {
          v118 = *(_DWORD *)(v3 + 32);
          v119 = *(_DWORD *)(v3 + 36);
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)v154 = v131;
          *(_WORD *)&v154[4] = 1024;
          *(_DWORD *)&v154[6] = v55;
          *(_WORD *)v155 = 1024;
          *(_DWORD *)&v155[2] = v118;
          v156 = 1024;
          v157 = v119;
          _os_log_impl(&dword_1B8270000, v117, OS_LOG_TYPE_DEFAULT, "Got (%d to %d) Squashed (%d to %d)", buf, 0x1Au);
        }
        *__error() = v116;
        v53 = v115;
      }
      v57 = *(_DWORD *)(v3 + 28);
      v58 = *(_QWORD *)(v3 + 8);
      v59 = v53;
      processLeaves(v16, v57, 0, v53, v54, v58);
      v60 = v54;
      Mutable = v125;
      processNodes(v125, v57, 0, v59, v60, v58);
      if (dword_1EF19FCB4 >= 5)
      {
        v61 = *__error();
        v62 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          v63 = *(_DWORD *)(v3 + 32);
          v64 = *(_DWORD *)(v3 + 36);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v154 = v63;
          *(_WORD *)&v154[4] = 1024;
          *(_DWORD *)&v154[6] = v64;
          v65 = "Range %d to %d";
LABEL_115:
          _os_log_impl(&dword_1B8270000, v62, OS_LOG_TYPE_DEFAULT, v65, buf, 0xEu);
          goto LABEL_116;
        }
        goto LABEL_116;
      }
    }
    else
    {
      v66 = *(_DWORD *)(v3 + 28);
      v67 = *(_DWORD *)(v3 + 24) + 1;
      if (v67 <= v66)
        ContentIndexDocSetIteratorProcessIterHits(1, *(_DWORD *)(v3 + 24) + 1, *(_DWORD *)(v3 + 28), *(_DWORD *)(v3 + 28), Mutable, v16, *(_QWORD *)(v3 + 8));
      if (dword_1EF19FCB4 >= 5)
      {
        v120 = *__error();
        v121 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v154 = v67;
          *(_WORD *)&v154[4] = 1024;
          *(_DWORD *)&v154[6] = v66;
          _os_log_impl(&dword_1B8270000, v121, OS_LOG_TYPE_DEFAULT, "Updates from %d to %d", buf, 0xEu);
        }
        *__error() = v120;
      }
      *(_BYTE *)(v3 + 52) = 1;
      *(_BYTE *)(v3 + 54) = 1;
      *(_DWORD *)(v3 + 32) = v67;
      *(_DWORD *)(v3 + 36) = v66;
      if (v66 + 1 < *(_DWORD *)(*(_QWORD *)v3 + 36))
        v68 = v66 + 1;
      else
        v68 = *(_DWORD *)(*(_QWORD *)v3 + 36);
      *(_DWORD *)(v3 + 40) = v68;
      *(_DWORD *)(v3 + 44) = v67;
      v69 = *(_QWORD *)(v3 + 16);
      v70 = *(_QWORD *)(v69 + 104);
      v71 = *(_BYTE *)(v69 + 40);
      v72 = *(_OWORD *)(v69 + 56);
      v73 = *(_QWORD *)(v69 + 72);
      v74 = *(_QWORD *)(v69 + 80);
      v75 = *(_QWORD *)(v69 + 88);
      v76 = *(_QWORD *)(v69 + 96);
      *(_DWORD *)(v3 + 32) = v67;
      *(_DWORD *)(v3 + 36) = v66;
      v77 = *(_QWORD *)(v69 + 48);
      v130 = v66;
      v131 = v67;
      if (v77)
        *(_QWORD *)(v69 + 48) = -1;
      *(_QWORD *)(v69 + 104) = v70;
      *(_BYTE *)(v69 + 40) = v71;
      *(_OWORD *)(v69 + 56) = v72;
      *(_QWORD *)(v69 + 72) = v73;
      *(_QWORD *)(v69 + 80) = v74;
      *(_QWORD *)(v69 + 88) = v75;
      *(_QWORD *)(v69 + 96) = v76;
      BulkPayloadIterator_Step(*(_QWORD *)(v3 + 16), &v131, &v130);
      v79 = *(_DWORD *)(v3 + 32);
      v78 = *(_DWORD *)(v3 + 36);
      v80 = *(_DWORD *)(v3 + 28);
      v81 = *(_QWORD *)(v3 + 8);
      processLeaves(v16, v80, 0, v79, v78, v81);
      processNodes(Mutable, v80, 0, v79, v78, v81);
      if (dword_1EF19FCB4 >= 5)
      {
        v125 = Mutable;
        v61 = *__error();
        v62 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          v122 = *(_DWORD *)(v3 + 32);
          v123 = *(_DWORD *)(v3 + 36);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v154 = v122;
          *(_WORD *)&v154[4] = 1024;
          *(_DWORD *)&v154[6] = v123;
          v65 = "1 Disk from %d to %d";
          goto LABEL_115;
        }
LABEL_116:
        *__error() = v61;
        Mutable = v125;
      }
    }
    if (*(uint64_t *)(v3 + 72) >= 1)
    {
      v82 = 0;
      do
      {
        v83 = *(_QWORD *)(v3 + 80 + 8 * v82);
        v84 = ContentIndexDocSetSquashUpdate(v83, 0);
        v85 = *(_DWORD *)(v3 + 32);
        if (v84 > v85)
          v85 = ContentIndexDocSetSquashUpdate(v83, 0);
        *(_DWORD *)(v3 + 32) = v85;
        if (dword_1EF19FCB4 >= 5)
        {
          v124 = *__error();
          v86 = _SILogForLogForCategory(10);
          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
          {
            v87 = *(_DWORD *)(v3 + 32);
            v88 = *(_DWORD *)(v3 + 36);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v154 = v87;
            *(_WORD *)&v154[4] = 1024;
            *(_DWORD *)&v154[6] = v88;
            _os_log_impl(&dword_1B8270000, v86, OS_LOG_TYPE_DEFAULT, "Finished iterator. Squashed (0 to %d) end:  %d", buf, 0xEu);
          }
          *__error() = v124;
        }
        ++v82;
      }
      while (v82 < *(_QWORD *)(v3 + 72));
    }
    ContentIndexDocSetIteratorProcessIterHits(0, 1, *(_DWORD *)(v3 + 32), *(_DWORD *)(v3 + 28), Mutable, v16, *(_QWORD *)(v3 + 8));
    *(_DWORD *)(v3 + 44) = 1;
    *(_BYTE *)(v3 + 53) = 1;
    v89 = (_DWORD *)ContentIndexDocSetGrabBitVector(*(_QWORD *)(v3 + 80));
    if (v89)
      locked = lockedCountItemsInRange(v89, *(_DWORD *)(v3 + 44), *(_DWORD *)(v3 + 40) - 1, v90);
    else
      locked = 0;
    v18 = v129;
    v37 = 0;
    if (dword_1EF19FCB4 >= 5)
    {
      v93 = *__error();
      v94 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        v95 = *(_DWORD *)(v3 + 44);
        v96 = *(_DWORD *)(v3 + 40) - 1;
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)v154 = v95;
        *(_WORD *)&v154[4] = 1024;
        *(_DWORD *)&v154[6] = v96;
        _os_log_impl(&dword_1B8270000, v94, OS_LOG_TYPE_DEFAULT, "OID Range %d to %d", buf, 0xEu);
      }
      *__error() = v93;
      v37 = 0;
      if (*(_BYTE *)(v5 + 33))
        goto LABEL_76;
    }
    else if (*(_BYTE *)(v5 + 33))
    {
LABEL_76:
      v92 = (*(_DWORD *)(v3 + 40) - *(_DWORD *)(v3 + 44)) - locked;
      v41 = v92 & ~(v92 >> 63);
LABEL_81:
      v97 = *__error();
      v98 = _SILogForLogForCategory(10);
      v99 = 2 * (dword_1EF19FCB4 < 4);
      if (os_log_type_enabled(v98, v99))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)v154 = v41;
        _os_log_impl(&dword_1B8270000, v98, v99, "Found: %ld", buf, 0xCu);
      }
      *__error() = v97;
      v100 = *(_DWORD *)(v3 + 32);
      if (v100 >= v130)
        v100 = v130;
      *(_DWORD *)(v3 + 32) = v131;
      *(_DWORD *)(v3 + 36) = v100;
      v101 = *(_QWORD *)&threadData[18 * v134 + 2];
      v102 = v133;
      v103 = v101 + 320 * v133;
      *(_DWORD *)(v103 + 312) = v126;
      v104 = *(void (**)(_QWORD))(v103 + 232);
      if (v104)
        v104(*(_QWORD *)(v101 + 320 * v102 + 288));
      dropThreadId(v134, 0, v127);
      goto LABEL_88;
    }
    v41 = locked;
    goto LABEL_81;
  }
  v6 = *(pthread_rwlock_t **)(*(_QWORD *)result + 24);
  if (v6)
  {
    posreadunlock(v6);
    *(_QWORD *)(*(_QWORD *)v3 + 24) = 0;
  }
  if (*(_BYTE *)(v5 + 33))
    v7 = 0;
  else
    v7 = *(unsigned int *)(v3 + 28);
  result = 0;
  *a2 = v7;
  return result;
}

void __processNodes_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void (*v14)(_QWORD);
  int v15;
  NSObject *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  _DWORD *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void (*v31)(_QWORD);
  _DWORD *v32;
  int v33;
  NSObject *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  _DWORD *v38;
  unsigned int *v39;
  unsigned int v40;
  int v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(_QWORD);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD);
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  char v63;
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  int v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  makeThreadId();
  v63 = 0;
  v4 = *(_QWORD *)(a1 + 40);
  v59 = *(_QWORD *)(a1 + 32);
  v60 = 0u;
  v61 = 0u;
  v62 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8 * a2) + 56);
  if (*(_BYTE *)(v5 + 8))
  {
    do
    {
      v6 = __ldxr(exceptionSequenceNum);
      v7 = v6 + 1;
    }
    while (__stxr(v6 + 1, exceptionSequenceNum));
    v8 = setThreadIdAndInfo(-1, (__int128 *)sIndexExceptionCallbacks, v5, 0, v7);
    v57 = HIDWORD(v8);
    v58 = v8;
    v55 = v10;
    v56 = v9;
    v11 = *(_QWORD *)&threadData[18 * v8 + 2];
    v12 = v11 + 320 * HIDWORD(v8);
    *(_BYTE *)(v12 + 216) = 0;
    v13 = *(_DWORD *)(v12 + 312);
    v14 = *(void (**)(_QWORD))(v12 + 224);
    if (v14)
      v14(*(_QWORD *)(v11 + 320 * HIDWORD(v8) + 288));
    if (_setjmp((int *)v12))
    {
      v15 = *__error();
      v16 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v65 = "processNodes_block_invoke";
        v66 = 1024;
        v67 = 3130;
        _os_log_error_impl(&dword_1B8270000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v15;
      *(_DWORD *)(v12 + 312) = v13;
      if (__THREAD_SLOT_KEY)
      {
        v17 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v17)
          goto LABEL_39;
      }
      else
      {
        makeThreadId();
        v17 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v17)
          goto LABEL_39;
      }
      v18 = v17;
      if ((unint64_t)v17 < 0x801)
      {
LABEL_11:
        v19 = (uint64_t)v18 - 1;
        v20 = &threadData[18 * ((uint64_t)v18 - 1)];
        v22 = v20[14];
        v21 = v20 + 14;
        if (v22 > v55)
        {
          do
            CIOnThreadCleanUpPop(v19);
          while (*v21 > v55);
        }
        dropThreadId(v58, 1, v7);
        CICleanUpReset(v58, v56);
        goto LABEL_35;
      }
LABEL_39:
      makeThreadId();
      v18 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_11;
    }
    do
    {
      v23 = __ldxr(exceptionSequenceNum);
      v24 = v23 + 1;
    }
    while (__stxr(v23 + 1, exceptionSequenceNum));
    v25 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v24);
    v53 = HIDWORD(v25);
    v54 = v25;
    v51 = v27;
    v52 = v26;
    v28 = *(_QWORD *)&threadData[18 * v25 + 2];
    v29 = v28 + 320 * HIDWORD(v25);
    v30 = *(_DWORD *)(v29 + 312);
    v31 = *(void (**)(_QWORD))(v29 + 224);
    if (v31)
      v31(*(_QWORD *)(v28 + 320 * HIDWORD(v25) + 288));
    if (!_setjmp((int *)v29))
    {
      v63 = 1;
      v44 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * a2);
      _ContentIndexDocSetIteratorProcessIterHits(v44, *(unsigned __int8 *)(a1 + 68), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 64), *(unsigned __int8 *)(v44 + 34), &v59);
      v63 = 0;
      v45 = *(_QWORD *)&threadData[18 * v54 + 2];
      v46 = v45 + 320 * v53;
      *(_DWORD *)(v46 + 312) = v30;
      v47 = *(void (**)(_QWORD))(v46 + 232);
      if (v47)
        v47(*(_QWORD *)(v45 + 320 * v53 + 288));
      dropThreadId(v54, 0, v24);
      goto LABEL_32;
    }
    v32 = (_DWORD *)(v29 + 312);
    v33 = *__error();
    v34 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v65 = "processNodes_block_invoke";
      v66 = 1024;
      v67 = 3129;
      _os_log_error_impl(&dword_1B8270000, v34, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v33;
    *v32 = v30;
    if (__THREAD_SLOT_KEY)
    {
      v35 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v35)
        goto LABEL_41;
    }
    else
    {
      makeThreadId();
      v35 = pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v35)
        goto LABEL_41;
    }
    v36 = v35;
    if ((unint64_t)v35 < 0x801)
    {
LABEL_23:
      v37 = (uint64_t)v36 - 1;
      v38 = &threadData[18 * ((uint64_t)v36 - 1)];
      v40 = v38[14];
      v39 = v38 + 14;
      if (v40 > v51)
      {
        do
          CIOnThreadCleanUpPop(v37);
        while (*v39 > v51);
      }
      dropThreadId(v54, 1, v24);
      CICleanUpReset(v54, v52);
LABEL_32:
      v48 = *(_QWORD *)&threadData[18 * v58 + 2];
      v49 = v48 + 320 * v57;
      *(_DWORD *)(v49 + 312) = v13;
      v50 = *(void (**)(_QWORD))(v49 + 232);
      if (v50)
        v50(*(_QWORD *)(v48 + 320 * v57 + 288));
      dropThreadId(v58, 0, v7);
      goto LABEL_35;
    }
LABEL_41:
    makeThreadId();
    v36 = pthread_getspecific(__THREAD_SLOT_KEY);
    goto LABEL_23;
  }
  v41 = *__error();
  v42 = _SILogForLogForCategory(0);
  v43 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v42, v43))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8270000, v42, v43, "Skipping because index is shut down", buf, 2u);
  }
  *__error() = v41;
LABEL_35:
  CIIndexSetDisposePerThreadCache(&v59);
  if (v63)
    **(_BYTE **)(a1 + 48) = 1;
}

uint64_t _ContentIndexDocSetIteratorProcessIterHits(uint64_t result, int a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, _QWORD *a7)
{
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void (*v23)(_QWORD);
  _DWORD *v24;
  int v25;
  NSObject *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  unsigned int v32;
  int v33;
  NSObject *v34;
  os_log_type_t v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD);
  uint64_t v44;
  int8x8_t v45;
  _DWORD *v46;
  int v47;
  NSObject *v48;
  int v49;
  void *v50;
  void *v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  BOOL v61;
  int v62;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  void (*v67)(_QWORD);
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  void (*v71)(_QWORD);
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _DWORD **v75;
  uint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  int8x8_t v88;
  _DWORD *v89;
  unint64_t v90;
  uint64_t *v91;
  int v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  uint64_t *v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  uint64_t *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  _DWORD *v120;
  uint64_t *v121;
  uint64_t v122;
  int v124;
  unsigned int v125;
  unsigned int *v126;
  int8x8_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  int v136;
  uint64_t v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  int v146;
  _DWORD *v147;
  uint64_t v148;
  unint64_t v149;
  unsigned int *v150;
  unint64_t v151;
  uint64_t v152;
  _DWORD *v153;
  unsigned int v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  int v158;
  _DWORD **v159;
  uint64_t v160;
  unint64_t i;
  unint64_t v162;
  uint64_t v163;
  unsigned int v164;
  _DWORD *v165;
  _DWORD **v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  _BYTE v171[4];
  int v172;
  int v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  int v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint8_t buf[4];
  const char *v187;
  __int16 v188;
  int v189;
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(result + 32))
  {
    v13 = result;
    makeThreadId();
    v14 = *(_QWORD *)(v13 + 56);
    if (!*(_BYTE *)(v14 + 8))
    {
      v33 = *__error();
      v34 = _SILogForLogForCategory(0);
      v35 = 2 * (gSILogLevels[0] < 4);
      if (os_log_type_enabled(v34, v35))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B8270000, v34, v35, "Skipping because index is shut down", buf, 2u);
      }
      result = (uint64_t)__error();
      *(_DWORD *)result = v33;
      goto LABEL_62;
    }
    v175 = a4;
    v176 = a3;
    v173 = a6;
    do
    {
      v15 = __ldxr(exceptionSequenceNum);
      v16 = v15 + 1;
    }
    while (__stxr(v15 + 1, exceptionSequenceNum));
    v17 = setThreadIdAndInfo(-1, (__int128 *)sIndexExceptionCallbacks, v14, 0, v16);
    v185 = __PAIR64__(v17, HIDWORD(v17));
    v184 = __PAIR64__(v18, v19);
    v20 = *(_QWORD *)&threadData[18 * v17 + 2];
    v21 = v20 + 320 * HIDWORD(v17);
    *(_BYTE *)(v21 + 216) = 0;
    v22 = *(_DWORD *)(v21 + 312);
    v23 = *(void (**)(_QWORD))(v21 + 224);
    if (v23)
      v23(*(_QWORD *)(v20 + 320 * HIDWORD(v17) + 288));
    v183 = v185;
    v182 = v184;
    if (_setjmp((int *)v21))
    {
      v24 = (_DWORD *)(v21 + 312);
      v25 = *__error();
      v26 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v187 = "_ContentIndexDocSetIteratorProcessIterHits";
        v188 = 1024;
        v189 = 2639;
        _os_log_error_impl(&dword_1B8270000, v26, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v25;
      *v24 = v22;
      if (__THREAD_SLOT_KEY)
      {
        v27 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v27)
          goto LABEL_242;
      }
      else
      {
        makeThreadId();
        v27 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v27)
          goto LABEL_242;
      }
      v28 = v27;
      if ((unint64_t)v27 < 0x801)
      {
LABEL_13:
        v29 = (uint64_t)v28 - 1;
        v30 = &threadData[18 * ((uint64_t)v28 - 1)];
        v32 = v30[14];
        v31 = v30 + 14;
        if (v32 > v182)
        {
          do
            CIOnThreadCleanUpPop(v29);
          while (*v31 > v182);
        }
        dropThreadId(HIDWORD(v183), 1, v16);
        result = CICleanUpReset(HIDWORD(v183), HIDWORD(v182));
LABEL_62:
        *(_BYTE *)(v13 + 32) = 1;
        return result;
      }
LABEL_242:
      makeThreadId();
      v28 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_13;
    }
    v177 = v22;
    do
    {
      v36 = __ldxr(exceptionSequenceNum);
      v37 = v36 + 1;
    }
    while (__stxr(v36 + 1, exceptionSequenceNum));
    v38 = setThreadIdAndInfo(-1, sAssertExceptionCallbacks, 0, 0, v37);
    v181 = __PAIR64__(v38, HIDWORD(v38));
    v180 = __PAIR64__(v39, v40);
    v41 = *(_QWORD *)&threadData[18 * v38 + 2];
    v42 = v41 + 320 * HIDWORD(v38);
    v174 = *(_DWORD *)(v42 + 312);
    v43 = *(void (**)(_QWORD))(v42 + 224);
    if (v43)
      v43(*(_QWORD *)(v41 + 320 * HIDWORD(v38) + 288));
    v179 = v181;
    v178 = v180;
    v44 = _setjmp((int *)v42);
    if ((_DWORD)v44)
    {
      v46 = (_DWORD *)(v42 + 312);
      v47 = *__error();
      v48 = _SILogForLogForCategory(0);
      v49 = v177;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v187 = "_ContentIndexDocSetIteratorProcessIterHits";
        v188 = 1024;
        v189 = 2638;
        _os_log_error_impl(&dword_1B8270000, v48, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v47;
      *v46 = v174;
      if (__THREAD_SLOT_KEY)
      {
        v50 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v50)
          goto LABEL_244;
      }
      else
      {
        makeThreadId();
        v50 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (!v50)
          goto LABEL_244;
      }
      v51 = v50;
      if ((unint64_t)v50 < 0x801)
      {
LABEL_29:
        v52 = (uint64_t)v51 - 1;
        v53 = &threadData[18 * ((uint64_t)v51 - 1)];
        v55 = v53[14];
        v54 = v53 + 14;
        if (v55 > v178)
        {
          do
            CIOnThreadCleanUpPop(v52);
          while (*v54 > v178);
        }
        dropThreadId(HIDWORD(v179), 1, v37);
        CICleanUpReset(HIDWORD(v179), HIDWORD(v178));
LABEL_59:
        v68 = *(_QWORD *)&threadData[18 * HIDWORD(v183) + 2];
        v69 = v183;
        v70 = v68 + 320 * v183;
        *(_DWORD *)(v70 + 312) = v49;
        v71 = *(void (**)(_QWORD))(v70 + 232);
        if (v71)
          v71(*(_QWORD *)(v68 + 320 * v69 + 288));
        result = dropThreadId(HIDWORD(v183), 0, v16);
        goto LABEL_62;
      }
LABEL_244:
      makeThreadId();
      v51 = pthread_getspecific(__THREAD_SLOT_KEY);
      goto LABEL_29;
    }
    v56 = *(_DWORD *)(v13 + 48);
    if ((v56 - 4) >= 4)
    {
      v57 = *(_DWORD *)(v13 + 48);
      if (v56 != 3)
      {
LABEL_39:
        switch(v57)
        {
          case 0:
          case 1:
          case 2:
          case 3:
          case 8:
          case 9:
            goto LABEL_40;
          case 4:
            *(_DWORD *)(v13 + 52) = 0;
            v44 = *(unsigned int *)(v13 + 96);
            if (!(_DWORD)v44)
              goto LABEL_40;
            v91 = *(uint64_t **)(v13 + 72);
            v92 = 0;
            v93 = v91;
            v94 = *(unsigned int *)(v13 + 96);
            do
            {
              v95 = *v93++;
              v96 = v92 | *(_DWORD *)(v95 + 52);
              *(_DWORD *)(v13 + 52) = v96;
              v92 = v96;
              --v94;
            }
            while (v94);
            v97 = v91;
            v98 = v44;
            while (1)
            {
              v99 = *(_DWORD *)(*v97 + 52);
              if (v173 && v99 == 1)
              {
                v96 = 3;
                goto LABEL_165;
              }
              if (v96)
              {
                if (v99 != 3 && a6 == 0)
                  break;
              }
              ++v97;
              if (!--v98)
                goto LABEL_166;
            }
            v96 = 1;
LABEL_165:
            *(_DWORD *)(v13 + 52) = v96;
LABEL_166:
            v105 = v96;
            goto LABEL_167;
          case 5:
            *(_DWORD *)(v13 + 52) = 0;
            v44 = *(unsigned int *)(v13 + 96);
            if (!(_DWORD)v44)
              goto LABEL_40;
            v101 = *(uint64_t **)(v13 + 72);
            v102 = *(unsigned int *)(v13 + 96);
            v103 = 0;
            do
            {
              v104 = *v101++;
              v105 = v103 | *(_DWORD *)(v104 + 52);
              *(_DWORD *)(v13 + 52) = v105;
              v103 = v105;
              --v102;
            }
            while (v102);
            goto LABEL_167;
          case 6:
            *(_DWORD *)(v13 + 52) = 0;
            v44 = *(unsigned int *)(v13 + 96);
            if (!(_DWORD)v44)
              goto LABEL_40;
            v106 = *(uint64_t **)(v13 + 72);
            v107 = *(unsigned int *)(v13 + 96);
            v108 = 0;
            do
            {
              v109 = *v106++;
              v110 = *(_DWORD *)(v109 + 52);
              if (v110 == 1)
                v111 = a6;
              else
                v111 = 1;
              if (!v111)
                v108 = 3;
              v112 = v108 | v110;
              *(_DWORD *)(v13 + 52) = v108 | v110;
              v108 |= v110;
              --v107;
            }
            while (v107);
            v105 = v112;
            goto LABEL_167;
          case 7:
            if (v173)
            {
              v44 = *(unsigned int *)(v13 + 96);
              if ((_DWORD)v44)
              {
                v113 = *(uint64_t **)(v13 + 72);
                v114 = *(_DWORD *)(v13 + 52);
                v115 = *(unsigned int *)(v13 + 96);
                do
                {
                  v116 = *v113++;
                  v105 = v114 | *(_DWORD *)(v116 + 52);
                  *(_DWORD *)(v13 + 52) = v105;
                  v114 = v105;
                  --v115;
                }
                while (v115);
                goto LABEL_167;
              }
              v44 = 0;
              v140 = *(_DWORD *)(v13 + 52);
              v133 = 0;
            }
            else
            {
              v132 = *(uint64_t **)(v13 + 72);
              v44 = *(unsigned int *)(*v132 + 52);
              *(_DWORD *)(v13 + 52) = v44;
              if (v44 > 2)
                goto LABEL_40;
              v133 = *(unsigned int *)(v13 + 96);
              if (v133 >= 2)
              {
                v134 = v133 - 1;
                v135 = v132 + 1;
                v136 = v44;
                do
                {
                  v137 = *v135++;
                  v138 = *(_DWORD *)(v137 + 52);
                  if (v138 == 3)
                    v138 = 1;
                  v139 = v136 | v138;
                  *(_DWORD *)(v13 + 52) = v136 | v138;
                  v136 |= v138;
                  --v134;
                }
                while (v134);
                v105 = v139;
                v44 = v133;
LABEL_167:
                v133 = v44;
                v140 = v105;
                switch(v57)
                {
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 8:
                  case 9:
                    goto LABEL_40;
                  case 4:
                    if (v105 != 1)
                      goto LABEL_40;
                    if (!*(_QWORD *)(v13 + 88))
                    {
                      *(_QWORD *)(v13 + 88) = NormalResolvedDocSet(a5);
                      v44 = *(unsigned int *)(v13 + 96);
                    }
                    if (!v44)
                      goto LABEL_40;
                    v149 = 0;
                    do
                    {
                      v44 = *(_QWORD *)(*(_QWORD *)(v13 + 72) + 8 * v149);
                      if (*(_DWORD *)(v44 + 52) == 3)
                      {
                        if (*(_DWORD *)(v44 + 48) == 1)
                        {
                          v150 = *(unsigned int **)(v13 + 88);
                          *(_DWORD *)buf = -1;
                          v44 = (uint64_t)_CIIndexSetAddIndexesInRange(v150, v176, v175, (int *)buf, v45);
                        }
                        else
                        {
                          v44 = ContentIndexDocSetGrabBitVector(v44);
                          if (v44)
                            CIIndexSetAddRange(*(unsigned int **)(v13 + 88), (_DWORD *)v44, v176, v175, v45);
                        }
                      }
                      ++v149;
                      v151 = *(unsigned int *)(v13 + 96);
                    }
                    while (v149 < v151);
                    if (!(_DWORD)v151)
                      goto LABEL_40;
                    for (i = 0; i < v162; ++i)
                    {
                      v163 = *(_QWORD *)(*(_QWORD *)(v13 + 72) + 8 * i);
                      if (*(_DWORD *)(v163 + 52) == 1)
                      {
                        v44 = *(_QWORD *)(*(_QWORD *)(v13 + 72) + 8 * i);
                        v164 = *(_DWORD *)(v163 + 48);
                        if (v164 > 9)
                          goto LABEL_245;
                        if (((1 << v164) & 0x307) != 0)
                        {
                          v165 = 0;
LABEL_225:
                          switch(v164)
                          {
                            case 0u:
                            case 1u:
                            case 2u:
                              goto LABEL_228;
                            case 3u:
                            case 8u:
                              v168 = *(_QWORD *)(v163 + 64);
                              if (!v168)
                                goto LABEL_228;
                              v167 = *(_QWORD *)(v168 + 88);
                              if (!v167)
                                goto LABEL_228;
                              goto LABEL_227;
                            case 4u:
                            case 5u:
                            case 6u:
                            case 7u:
                            case 9u:
                              v167 = *(_QWORD *)(v163 + 80);
                              if (v167)
LABEL_227:
                                CIIndexSetRemoveRange(*(unsigned int **)(v13 + 88), v167, v176, v175);
LABEL_228:
                              if (v165)
                                CIIndexSetAddRange(*(unsigned int **)(v13 + 88), v165, v176, v175, v45);
                              goto LABEL_217;
                            default:
                              goto LABEL_245;
                          }
                        }
                        if (((1 << v164) & 0xF0) != 0)
                        {
                          v166 = (_DWORD **)(v163 + 88);
LABEL_224:
                          v165 = *v166;
                          goto LABEL_225;
                        }
                        v169 = *(_QWORD *)(v163 + 64);
                        if (v169)
                        {
                          v166 = (_DWORD **)(v169 + 96);
                          goto LABEL_224;
                        }
                      }
LABEL_217:
                      v162 = *(unsigned int *)(v13 + 96);
                    }
                    if ((_DWORD)v162)
                    {
                      v170 = 0;
                      do
                      {
                        v44 = *(_QWORD *)(*(_QWORD *)(v13 + 72) + 8 * v170);
                        if (!*(_DWORD *)(v44 + 52))
                        {
                          v44 = ContentIndexDocSetGrabBitVector(v44);
                          if (v44)
                            CIIndexSetRemoveRange(*(unsigned int **)(v13 + 88), v44, v176, v175);
                        }
                        ++v170;
                      }
                      while (v170 < *(unsigned int *)(v13 + 96));
                    }
                    goto LABEL_40;
                  case 5:
                  case 6:
                    if (v105 != 1)
                      goto LABEL_40;
                    if (!*(_QWORD *)(v13 + 88))
                    {
                      *(_QWORD *)(v13 + 88) = NormalResolvedDocSet(a5);
                      v44 = *(unsigned int *)(v13 + 96);
                    }
                    if (!v44)
                      goto LABEL_40;
                    v141 = v44;
                    v44 = 0;
                    v142 = v141;
                    v143 = 0;
                    break;
                  case 7:
                    goto LABEL_197;
                  default:
                    goto LABEL_246;
                }
                while (1)
                {
                  v144 = *(_QWORD *)(*(_QWORD *)(v13 + 72) + 8 * v143);
                  if (*(_DWORD *)(v144 + 52) == 1)
                  {
                    v44 = *(_QWORD *)(*(_QWORD *)(v13 + 72) + 8 * v143);
                    v145 = *(_DWORD *)(v144 + 48);
                    if (v145 > 9)
                      goto LABEL_245;
                    v146 = 1 << v145;
                    if ((v146 & 0x307) == 0)
                    {
                      if ((v146 & 0xF0) != 0)
                      {
                        v147 = *(_DWORD **)(v144 + 88);
                        if (!v147)
                          goto LABEL_174;
                      }
                      else
                      {
                        v148 = *(_QWORD *)(v144 + 64);
                        if (!v148)
                          goto LABEL_174;
                        v147 = *(_DWORD **)(v148 + 96);
                        if (!v147)
                          goto LABEL_174;
                      }
                      CIIndexSetAddRange(*(unsigned int **)(v13 + 88), v147, v176, v175, v45);
                      v142 = *(unsigned int *)(v13 + 96);
                    }
                  }
LABEL_174:
                  if (++v143 >= v142)
                    goto LABEL_40;
                }
              }
              v140 = v44;
            }
LABEL_197:
            if (v140 == 1)
            {
              if (!*(_QWORD *)(v13 + 88))
              {
                v44 = (uint64_t)NormalResolvedDocSet(a5);
                *(_QWORD *)(v13 + 88) = v44;
                v133 = *(unsigned int *)(v13 + 96);
              }
              if (v133)
              {
                v152 = 0;
                while (1)
                {
                  v155 = *(_QWORD *)(*(_QWORD *)(v13 + 72) + 8 * v152);
                  v44 = v155;
                  v156 = *(_DWORD *)(v155 + 52);
                  if (v156 != 3)
                    break;
                  v44 = ContentIndexDocSetGrabBitVector(v155);
                  v153 = (_DWORD *)v44;
                  v154 = v176;
                  if (v44)
                    goto LABEL_203;
LABEL_204:
                  if (++v152 >= (unint64_t)*(unsigned int *)(v13 + 96))
                    goto LABEL_40;
                }
                v154 = v176;
                if (v156 != 1)
                  goto LABEL_204;
                v157 = *(_DWORD *)(v155 + 48);
                if (v157 > 9)
LABEL_245:
                  assert_invalid_doc_type((_DWORD *)v44);
                v158 = 1 << v157;
                if ((v158 & 0x307) != 0)
                  goto LABEL_204;
                if ((v158 & 0xF0) != 0)
                {
                  v159 = (_DWORD **)(v155 + 88);
                }
                else
                {
                  v160 = *(_QWORD *)(v155 + 64);
                  if (!v160)
                    goto LABEL_204;
                  v159 = (_DWORD **)(v160 + 96);
                }
                v153 = *v159;
                if (!*v159)
                  goto LABEL_204;
LABEL_203:
                CIIndexSetAddRange(*(unsigned int **)(v13 + 88), v153, v154, v175, v45);
                goto LABEL_204;
              }
            }
LABEL_40:
            v58 = *(_DWORD *)(v13 + 48);
            v59 = v58;
            v60 = v176;
            if (v176 == 1)
            {
              v61 = v58 == 9 || (v58 & 0xFFFFFFFC) == 4;
              v49 = v177;
              if (v61)
              {
                v44 = (uint64_t)CIIndexSetShrink(*(_DWORD **)(v13 + 88), v45);
                v59 = *(_DWORD *)(v13 + 48);
              }
            }
            else
            {
              v49 = v177;
            }
            switch(v59)
            {
              case 0:
              case 1:
              case 2:
              case 3:
              case 8:
              case 9:
                goto LABEL_49;
              case 4:
                if (*(_DWORD *)(v13 + 96))
                {
                  v72 = 0;
                  v73 = *(unsigned int *)(v13 + 96);
                  do
                  {
                    v44 = *(_QWORD *)(*(_QWORD *)(v13 + 72) + 8 * v72);
                    if (v173 && *(_DWORD *)(v44 + 52))
                    {
LABEL_67:
                      v74 = v73;
                    }
                    else
                    {
                      v74 = v73;
                      switch(*(_DWORD *)(v44 + 48))
                      {
                        case 0:
                        case 1:
                        case 2:
                          break;
                        case 3:
                        case 8:
                          v76 = *(_QWORD *)(v44 + 64);
                          if (!v76)
                            goto LABEL_67;
                          v75 = (_DWORD **)(v76 + 88);
LABEL_74:
                          v77 = *v75;
                          v74 = v73;
                          if (v77)
                          {
                            CIIndexSetAddRange(*(unsigned int **)(v13 + 80), v77, v176, v175, v45);
                            v74 = *(unsigned int *)(v13 + 96);
                          }
                          break;
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 9:
                          v75 = (_DWORD **)(*(_QWORD *)(*(_QWORD *)(v13 + 72) + 8 * v72) + 80);
                          goto LABEL_74;
                        default:
                          goto LABEL_245;
                      }
                    }
                    ++v72;
                    v73 = v74;
                  }
                  while (v72 < v74);
                }
                goto LABEL_49;
              case 5:
                if (!v173 || *(_DWORD *)(v13 + 52) != 3)
                {
                  v78 = *(unsigned int *)(v13 + 96);
                  if (!*(_QWORD *)(v13 + 80))
                  {
                    v44 = (uint64_t)NormalResolvedDocSet(a5);
                    *(_QWORD *)(v13 + 80) = v44;
                  }
                  if ((_DWORD)v78)
                  {
                    v79 = 8 * v78;
                    MEMORY[0x1E0C80A78](v44);
                    bzero(&v171[-((8 * v78 + 15) & 0xFFFFFFFF0)], 8 * v78);
                    v80 = *(_QWORD *)(v13 + 72);
                    v81 = 0;
                    while (2)
                    {
                      v82 = *(_QWORD *)(v80 + v81);
                      v44 = v82;
                      switch(*(_DWORD *)(v82 + 48))
                      {
                        case 0:
                        case 1:
                        case 2:
                          goto LABEL_49;
                        case 3:
                        case 8:
                          v84 = *(_QWORD *)(v82 + 64);
                          if (!v84)
                            goto LABEL_49;
                          v83 = (uint64_t *)(v84 + 88);
LABEL_86:
                          v85 = *v83;
                          *(_QWORD *)&v171[v81 - ((v79 + 15) & 0xFFFFFFFF0)] = v85;
                          if (!v85)
                            goto LABEL_49;
                          v81 += 8;
                          if (v79 != v81)
                            continue;
                          CIIndexSetAddIntersectionInRange(*(unsigned int **)(v13 + 80), (uint64_t *)&v171[-((v79 + 15) & 0xFFFFFFFF0)], v78, v60, v175);
                          break;
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 9:
                          v83 = (uint64_t *)(v82 + 80);
                          goto LABEL_86;
                        default:
                          goto LABEL_245;
                      }
                      break;
                    }
                  }
                }
                goto LABEL_49;
              case 6:
                if (!v173 || !*(_DWORD *)(v13 + 52))
                {
                  _CIIndexSetClearRange(*(int **)(v13 + 80), v176, v175);
                  v86 = **(_QWORD **)(v13 + 72);
                  if (!*(_DWORD *)(v86 + 52) || *(_DWORD *)(v86 + 48) >= 4u)
                  {
                    v87 = (_DWORD *)ContentIndexDocSetGrabBitVector(v86);
                    if (v87)
                      CIIndexSetAddRange(*(unsigned int **)(v13 + 80), v87, v176, v175, v88);
                  }
                  CIIndexSetInvertRange(*(_QWORD *)(v13 + 80), v176, v175);
                }
                goto LABEL_49;
              case 7:
                if (v173 && *(_DWORD *)(v13 + 52))
                  goto LABEL_49;
                v89 = (_DWORD *)ContentIndexDocSetGrabBitVector(**(_QWORD **)(v13 + 72));
                if (!v89)
                  goto LABEL_49;
                CIIndexSetAddRange(*(unsigned int **)(v13 + 80), v89, v176, v175, v45);
                if (*(_DWORD *)(v13 + 96) < 2u)
                  goto LABEL_49;
                v172 = v175 + 32;
                v90 = 1;
                break;
              default:
                goto LABEL_246;
            }
            do
            {
              v117 = *(_QWORD *)(*(_QWORD *)(v13 + 72) + 8 * v90);
              v44 = v117;
              v118 = *(_DWORD *)(v117 + 52);
              if (v118)
              {
                v119 = *(_DWORD *)(v117 + 48);
                switch(v119)
                {
                  case 0:
                  case 1:
                  case 2:
                    break;
                  case 3:
                  case 8:
                    v130 = *(_QWORD *)(v117 + 64);
                    if (!v130)
                      break;
                    v120 = *(_DWORD **)(v130 + 88);
                    if (!v120)
                      break;
                    goto LABEL_139;
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 9:
                    v120 = *(_DWORD **)(v117 + 80);
                    if (!v120)
                      break;
LABEL_139:
                    if ((v119 - 4) < 4)
                    {
                      v121 = (uint64_t *)(v117 + 88);
                      goto LABEL_141;
                    }
                    if ((v119 - 8) >= 2)
                    {
                      if (v119 != 3)
                        goto LABEL_245;
                      v131 = *(_QWORD *)(v117 + 64);
                      if (v131)
                      {
                        v121 = (uint64_t *)(v131 + 96);
LABEL_141:
                        v122 = *v121;
                        if (v118 == 1 && v122 != 0)
                        {
                          v124 = *(_DWORD *)(*(_QWORD *)(v44 + 56) + 60);
                          if (v175 == v124)
                            v125 = *(_DWORD *)(*(_QWORD *)(v44 + 56) + 60);
                          else
                            v125 = v172 - (((_BYTE)v175 - (_BYTE)v124) & 0x1F);
                          v126 = CIIndexSetCreateWithRangeWithCache(v176, v125, (uint64_t)a7);
                          CIIndexSetAddRange(v126, v120, v176, v175, v127);
                          CIIndexSetRemoveRange(v126, v122, v176, v175);
                          CIIndexSetRemoveRange(*(unsigned int **)(v13 + 80), (uint64_t)v126, v176, v175);
                          v128 = (uint64_t)v126;
                          v49 = v177;
                          CIIndexSetReleaseToPerThreadCache(v128, a7);
                        }
                        break;
                      }
                    }
                    break;
                  default:
                    goto LABEL_245;
                }
              }
              else
              {
                v129 = ContentIndexDocSetGrabBitVector(v117);
                if (v129)
                  CIIndexSetRemoveRange(*(unsigned int **)(v13 + 80), v129, v176, v175);
              }
              ++v90;
            }
            while (v90 < *(unsigned int *)(v13 + 96));
LABEL_49:
            if (v60 == 1)
            {
              v62 = *(_DWORD *)(v13 + 48);
              if (v62 == 9 || (v62 & 0xFFFFFFFC) == 4)
                CIIndexSetShrink(*(_DWORD **)(v13 + 80), v45);
            }
            v64 = *(_QWORD *)&threadData[18 * HIDWORD(v179) + 2];
            v65 = v179;
            v66 = v64 + 320 * v179;
            *(_DWORD *)(v66 + 312) = v174;
            v67 = *(void (**)(_QWORD))(v66 + 232);
            if (v67)
              v67(*(_QWORD *)(v64 + 320 * v65 + 288));
            dropThreadId(HIDWORD(v179), 0, v37);
            goto LABEL_59;
          default:
LABEL_246:
            assert_invalid_doc_type((_DWORD *)v13);
        }
      }
      if (!a2)
        goto LABEL_40;
      v44 = ContentIndexDocSetSquashUpdate(v13, v176);
    }
    else if (!*(_QWORD *)(v13 + 80))
    {
      v44 = (uint64_t)NormalResolvedDocSet(a5);
      *(_QWORD *)(v13 + 80) = v44;
    }
    v57 = *(_DWORD *)(v13 + 48);
    goto LABEL_39;
  }
  return result;
}

_DWORD *CIIndexSetShrink(_DWORD *result, int8x8_t a2)
{
  _DWORD *v2;
  int8x8_t v3;

  if (result)
  {
    v2 = result;
    if ((int)result[4] <= -10)
    {
      result = (_DWORD *)_CIIndexSetConvertIfArrayIsMuchMoreEfficient(result, result[5], result[6], 0, 0, a2);
      if ((int)v2[4] <= -10)
        return _CIIndexSetConvertIfInvertedArrayIsMoreEfficient(v2, 0, v3);
    }
  }
  return result;
}

void CIIndexSetAddRange(unsigned int *cf, _DWORD *a2, unsigned int a3, unsigned int a4, int8x8_t a5)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  _BOOL4 v23;
  int locked;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  CFTypeID v43;
  int8x8_t v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  signed int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int *v77;
  int *v78;
  unsigned int v79;
  int v80;
  int v81;
  unsigned int v82;
  int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  NSObject *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint8_t buf[4];
  unsigned int v126;
  uint64_t v127;
  _DWORD *v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v6 = cf[5];
  v5 = cf[6];
  v7 = a2[5];
  v8 = a2[6];
  if (v5 >= v8)
    v9 = a2[6];
  else
    v9 = cf[6];
  v10 = v8 >= a4 && v5 >= a4;
  if (v10)
    v11 = a4;
  else
    v11 = v9;
  if (v6 <= v7)
    v12 = a2[5];
  else
    v12 = cf[5];
  v13 = v7 > a3 || v6 > a3;
  if (v13)
    v14 = v12;
  else
    v14 = a3;
  if (v14 > v11)
  {
    if (dword_1EF19FC90 >= 5)
    {
      v102 = *__error();
      v103 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        v126 = v14;
        LOWORD(v127) = 1024;
        *(_DWORD *)((char *)&v127 + 2) = v11;
        _os_log_impl(&dword_1B8270000, v103, OS_LOG_TYPE_DEFAULT, "%d start, end:%d", buf, 0xEu);
      }
      *__error() = v102;
    }
    return;
  }
  if (v14 != v11)
  {
    if ((int)cf[4] >= -9)
    {
      if ((int)a2[4] > -10)
      {
        if (CFGetTypeID(cf) != __kCIIndexSetInvertedTypeID)
        {
          locked = lockedCountItemsInRange(a2, v14, v11, a5);
          v25 = cf[4];
          if (v25 > -10
            || ((v26 = cf[6] - cf[5], v27 = locked - v25 - 10, v26 + 1 < v27) ? (v28 = v26 + 1) : (v28 = v27),
                v25 = -10 - v28,
                cf[4] = -10 - v28,
                (v28 & 0x80000000) != 0))
          {
            if (v25 >= -1)
              v29 = cf[8];
            else
              v29 = 4;
            if (v25 < -1)
              v25 = -2 - v25;
            if (v29 < v25 + locked)
              _CIIndexSetMakeSpace(cf, locked, 0, 0, 0);
          }
        }
      }
      else
      {
        _CIIndexSetForceBitmap((uint64_t)cf, 0, 0);
      }
    }
    if ((int)a2[4] <= -10)
    {
      v30 = cf[6];
      v31 = (v30 - v11) >> 5;
      v32 = (v30 - v11) & 0x1F;
      v33 = (v30 - v14) >> 5;
      v34 = (v30 - v14) & 0x1F;
      v35 = a2[6];
      v36 = v30 - v35;
      if (v36)
      {
        if ((v36 & 0x1F) != 0)
        {
          if (v35 >= v11)
            v104 = v11;
          else
            v104 = a2[6];
          v105 = a2[5];
          if (v105 <= v14)
            v105 = v14;
          *(_DWORD *)buf = v104;
          v126 = v105;
          v127 = 0;
          v128 = a2;
          while (1)
          {
            v106 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
            if (!v106)
              break;
            v124 = -1;
            _CIIndexSetAddIndex(cf, v106, 0, &v124, a5);
          }
          goto LABEL_83;
        }
        v107 = (v35 - v11) >> 5;
        v108 = *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v107);
        v109 = v33 - v31;
        if ((_DWORD)v33 == (_DWORD)v31)
        {
          v110 = v34 + 1;
          v111 = masks[v32];
          if (v32 != v110)
            v111 = masks[v110] & ~v111;
          v40 = v111 & v108;
          v41 = *((_QWORD *)cf + 5);
          v42 = 4 * v31;
          goto LABEL_60;
        }
        *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v31) |= v108 & ~masks[v32];
        if (v109 >= 2)
        {
          v112 = 1 - v109;
          v113 = v31 + 1;
          v114 = v107 + 1;
          do
          {
            *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v113++) |= *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v114++);
            v10 = __CFADD__(v112++, 1);
          }
          while (!v10);
        }
        v53 = masks[v34 + 1] & *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * ((v35 - v14) >> 5));
        v54 = *((_QWORD *)cf + 5);
        v52 = 4 * v33;
      }
      else
      {
        v37 = *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v31);
        if ((_DWORD)v33 == (_DWORD)v31)
        {
          v38 = v34 + 1;
          v39 = masks[v32];
          if (v32 != v38)
            v39 = masks[v38] & ~v39;
          v40 = v39 & v37;
          v41 = *((_QWORD *)cf + 5);
          v42 = 4 * v31;
LABEL_60:
          *(_DWORD *)(v41 + v42) |= v40;
          goto LABEL_83;
        }
        *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v31) |= v37 & ~masks[v32];
        v51 = (v31 + 1);
        if (v51 < v33)
        {
          do
          {
            *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v51) |= *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v51);
            ++v51;
          }
          while (v33 != v51);
        }
        v52 = 4 * v33;
        v53 = masks[v34 + 1] & *(_DWORD *)(*((_QWORD *)a2 + 5) + v52);
        v54 = *((_QWORD *)cf + 5);
      }
      *(_DWORD *)(v54 + v52) |= v53;
LABEL_83:
      v55 = cf[4];
      if (v55 <= -10)
      {
        v56 = cf[6] - cf[5];
        v57 = -20 - (v55 + a2[4]);
        if (v56 + 1 < v57)
          v57 = v56 + 1;
        cf[4] = -10 - v57;
        _CIIndexSetConvertIfInvertedArrayIsMoreEfficient(cf, 0, a5);
      }
      return;
    }
    v43 = CFGetTypeID(a2);
    v45 = a2[4];
    if (v43 == __kCIIndexSetInvertedTypeID)
    {
      if (v45 == a2[6] - a2[5] + 1)
        return;
    }
    else if (v45 == -2 || !v45)
    {
      return;
    }
    v46 = cf[4];
    if (v46 <= -10)
    {
      if ((v45 & 0x80000000) != 0)
      {
        v68 = -2 - v45;
        v69 = (char *)(a2 + 8);
        if (v45 > 0xFFFFFFFD)
        {
          LODWORD(v70) = 0;
        }
        else
        {
          v70 = 0;
          while (*(_DWORD *)&v69[4 * v70] > v11)
          {
            if (v68 == ++v70)
            {
              LODWORD(v70) = -2 - v45;
              break;
            }
          }
        }
        if ((int)v70 >= (int)v68)
          v80 = -2 - v45;
        else
          v80 = v70;
        v81 = cf[6] - cf[5];
        v82 = -12 - (v45 + v46);
        if (v81 + 1 < v82)
          v82 = v81 + 1;
        cf[4] = -10 - v82;
        if ((int)v68 > (int)v70 && *(_DWORD *)&v69[4 * v80] > v11)
          ++v80;
        if (v80 < (int)v68)
        {
          v83 = v80 + v45 + 2;
          v84 = &a2[v80 + 8];
          do
          {
            v86 = *v84++;
            v85 = v86;
            if (v86 < v14)
              break;
            *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * ((cf[6] - v85) >> 5)) |= 1 << (*((_BYTE *)cf + 24) - v85);
            v10 = __CFADD__(v83++, 1);
          }
          while (!v10);
        }
      }
      else
      {
        if (a2[6] >= v11)
          v47 = v11;
        else
          v47 = a2[6];
        if (a2[5] <= v14)
          v48 = v14;
        else
          v48 = a2[5];
        *(_DWORD *)buf = v47;
        v126 = v48;
        v127 = 0;
        v128 = a2;
        if (v45)
        {
          v49 = binarySearchMap((uint64_t)a2, v47);
          LODWORD(v127) = v49;
          if (v49 == a2[9])
            LODWORD(v127) = a2[8] + v49 - a2[4];
        }
        while (1)
        {
          v50 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
          if (!v50)
            break;
          *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * ((cf[6] - v50) >> 5)) |= 1 << (*((_BYTE *)cf + 24) - v50);
        }
        if (CFGetTypeID(a2) == __kCIIndexSetInvertedTypeID)
          v67 = a2[6] - (a2[5] + a2[4]) + 1;
        else
          v67 = a2[4];
        v75 = cf[6] - cf[5];
        v76 = v67 - cf[4] - 10;
        if (v75 + 1 < v76)
          v76 = v75 + 1;
        cf[4] = -10 - v76;
      }
      _CIIndexSetConvertIfInvertedArrayIsMoreEfficient(cf, 0, v44);
      return;
    }
    if ((v45 & 0x80000000) != 0)
    {
      v71 = -2 - v45;
      v72 = (char *)(a2 + 8);
      if (v45 > 0xFFFFFFFD)
      {
        LODWORD(v73) = 0;
      }
      else
      {
        v73 = 0;
        while (*(_DWORD *)&v72[4 * v73] > v11)
        {
          if (v71 == ++v73)
          {
            v74 = -2 - v45;
LABEL_158:
            LODWORD(v88) = v71;
            goto LABEL_167;
          }
        }
      }
      if ((int)v73 >= (int)v71)
        v74 = -2 - v45;
      else
        v74 = v73;
      v87 = v14 - 1;
      if (!v14)
        v87 = 0;
      if ((int)v71 <= (int)v73)
      {
        LODWORD(v88) = v74;
      }
      else
      {
        v88 = v74;
        while (*(_DWORD *)&v72[4 * v88] > v87)
        {
          if ((_DWORD)v71 == (_DWORD)++v88)
            goto LABEL_158;
        }
      }
LABEL_167:
      if ((int)v88 < (int)v71)
        LODWORD(v71) = v88;
      v79 = v71 - v74;
      if ((int)v71 >= v74)
      {
        v77 = (unsigned int *)&v72[4 * v74];
        goto LABEL_171;
      }
    }
    else
    {
      if (v14)
        v58 = v14 - 1;
      else
        v58 = 0;
      v59 = binarySearchMap((uint64_t)a2, v58);
      v60 = binarySearchMap((uint64_t)a2, v11);
      v61 = v59 - v60;
      if (v59 >= v60)
      {
        v62 = v60;
        v63 = a2[9];
        if (v60 >= v63 && v59 >= v63 || v60 <= v63 && v59 <= v63)
        {
          if (CFGetTypeID(a2) == __kCIIndexSetInvertedTypeID)
          {
            *(_DWORD *)buf = -1;
            if (v59 > v62)
            {
              v64 = *((_QWORD *)a2 + 5);
              v65 = v59 - 1;
              do
              {
                v66 = *(_DWORD *)(v64 + 4 * v65);
                if (v66 > v14)
                {
                  *(_DWORD *)buf = -1;
                  _CIIndexSetAddIndexesInRange(cf, v14, *(_DWORD *)(v64 + 4 * v65) - 1, (int *)buf, v44);
                  v64 = *((_QWORD *)a2 + 5);
                  v66 = *(_DWORD *)(v64 + 4 * v65);
                }
                v14 = v66 + 1;
                v13 = v65-- <= v62;
              }
              while (!v13);
              if (*(_DWORD *)(v64 + 4 * v62) == v11)
                return;
            }
            goto LABEL_188;
          }
          v77 = (unsigned int *)(*((_QWORD *)a2 + 5) + 4 * v62);
          v78 = (int *)cf;
          v79 = v61;
LABEL_172:
          _CIIndexSetAddSortedIndexes(v78, v77, v79, 1, 0, 0, v44);
          return;
        }
        if (CFGetTypeID(a2) == __kCIIndexSetInvertedTypeID)
        {
          *(_DWORD *)buf = -1;
          v89 = a2[4];
          v91 = a2[8];
          v90 = a2[9];
          v92 = v91 - v89 + v90;
          if (v59 <= v92)
          {
            v97 = 0;
          }
          else
          {
            if (v59 <= (int)v92)
            {
              v93 = *((_QWORD *)a2 + 5);
            }
            else
            {
              v93 = *((_QWORD *)a2 + 5);
              v94 = v59 - 1;
              do
              {
                v95 = *(_DWORD *)(v93 + 4 * v94);
                if (v95 > v14)
                {
                  *(_DWORD *)buf = -1;
                  _CIIndexSetAddIndexesInRange(cf, v14, *(_DWORD *)(v93 + 4 * v94) - 1, (int *)buf, v44);
                  v93 = *((_QWORD *)a2 + 5);
                  v89 = a2[4];
                  v91 = a2[8];
                  v90 = a2[9];
                  v95 = *(_DWORD *)(v93 + 4 * v94);
                }
                v14 = v95 + 1;
                v92 = v91 - v89 + v90;
                v13 = v94-- <= (int)v92;
              }
              while (!v13);
            }
            v97 = *(_DWORD *)(v93 + 4 * v92) == v11;
          }
          if (v90 > v62)
          {
            v98 = v90;
            v99 = *((_QWORD *)a2 + 5);
            v100 = v98 - 1;
            do
            {
              v101 = *(_DWORD *)(v99 + 4 * v100);
              if (v101 > v14)
              {
                *(_DWORD *)buf = -1;
                _CIIndexSetAddIndexesInRange(cf, v14, *(_DWORD *)(v99 + 4 * v100) - 1, (int *)buf, v44);
                v99 = *((_QWORD *)a2 + 5);
                v101 = *(_DWORD *)(v99 + 4 * v100);
              }
              v14 = v101 + 1;
              v13 = v100-- <= v62;
            }
            while (!v13);
            if (*(_DWORD *)(v99 + 4 * v62) == v11)
              v97 = 1;
          }
          if (v97)
            return;
LABEL_188:
          if (v11 >= v14)
          {
            *(_DWORD *)buf = -1;
            _CIIndexSetAddIndexesInRange(cf, v14, v11, (int *)buf, v44);
          }
          return;
        }
        v96 = a2[8] - a2[4] + a2[9];
        _CIIndexSetAddSortedIndexes((int *)cf, (unsigned int *)(*((_QWORD *)a2 + 5) + 4 * v96), v59 - v96, 1, 0, 0, v44);
        v77 = (unsigned int *)(*((_QWORD *)a2 + 5) + 4 * v62);
        v79 = a2[9] - v62;
LABEL_171:
        v78 = (int *)cf;
        goto LABEL_172;
      }
    }
    v115 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v115, v116, v117, v118, v119, v120, v121, v122, (char)"CIIndexSet.c");
    free(v115);
    if (__valid_fs(-1))
      v123 = 2989;
    else
      v123 = 3072;
    *(_DWORD *)v123 = -559038737;
    abort();
  }
  if (v7 <= v11)
  {
    v17 = a2[4];
    if (v17 <= -10)
    {
      if (((*(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * ((v8 - v11) >> 5)) >> (v8 - v11)) & 1) == 0)
        return;
LABEL_48:
      *(_DWORD *)buf = -1;
      _CIIndexSetAddIndex(cf, v11, 0, buf, a5);
      return;
    }
    if (v17 < 0)
    {
      if (v17 < 0xFFFFFFFE
        && (a2[8] == v11
         || v17 != -3
         && (a2[9] == v11
          || v17 != -4
          && (a2[10] == v11
           || v17 != -5
           && (a2[11] == v11
            || v17 != -6 && (a2[12] == v11 || v17 != -7 && (a2[13] == v11 || v17 != -8 && a2[14] == v11)))))))
      {
        goto LABEL_48;
      }
    }
    else
    {
      v18 = binarySearchMap((uint64_t)a2, v11);
      v19 = a2[9];
      v23 = (v18 < v19 || ((v20 = a2[8], v21 = v20 + v19 - a2[4], v18 < v20) ? (v22 = v18 >= v21) : (v22 = 0), v22))
         && *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v18) == v11;
      if (v23 != (CFGetTypeID(a2) == __kCIIndexSetInvertedTypeID))
        goto LABEL_48;
    }
  }
}

_DWORD *CIIndexSetCreateWithRange(unsigned int a1, unsigned int a2, int a3)
{
  unsigned int v6;
  int v7;
  _DWORD *Instance;
  _DWORD *v9;
  unsigned int v10;
  size_t v11;
  size_t v12;
  void *v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[16];

  if (CIIndexSetGetTypeID_onceToken != -1)
    dispatch_once(&CIIndexSetGetTypeID_onceToken, &__block_literal_global_4339);
  if (a1 <= 1)
    v6 = 1;
  else
    v6 = a1;
  v7 = a2 - v6;
  if (a2 < v6)
  {
    v15 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, (char)"CIIndexSet.c");
    free(v15);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  Instance = (_DWORD *)_CFRuntimeCreateInstance();
  v9 = Instance;
  if (a3 == 2 || a3 == 4)
  {
    Instance[4] = -10;
    v10 = (v7 + 32) >> 5;
    Instance[8] = v10;
    Instance[9] = -1;
    v11 = 4 * v10;
    v12 = *MEMORY[0x1E0C85AD8];
    if (v11 >= *MEMORY[0x1E0C85AD8] >> 1)
    {
      v13 = mmap(0, (v11 + v12 - 1) & -(uint64_t)v12, 3, 4098, -134217728, 0);
    }
    else
    {
      if (!((v7 + 32) >> 20) && v12 < v11)
        ++sTotal_4358;
      v13 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v11, 0x31F9A007uLL);
      if (!v13)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
        }
        v13 = 0;
      }
    }
    *((_QWORD *)v9 + 5) = v13;
  }
  else
  {
    Instance[4] = -2;
  }
  v9[5] = v6;
  v9[6] = a2;
  return v9;
}

uint64_t ContentIndexDocSetSquashUpdate(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_DWORD *)(a1 + 48);
  if ((v4 - 4) >= 4)
  {
    if (v4 == 3)
    {
      v7 = *(_QWORD **)(a1 + 64);
      if (v7)
        return PayloadIterator_ConsumeUpdates(v7, a2);
    }
  }
  else if (*(_DWORD *)(a1 + 96))
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (ContentIndexDocSetSquashUpdate(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v5), a2) > v6)
        v6 = ContentIndexDocSetSquashUpdate(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v5), a2);
      ++v5;
    }
    while (v5 < *(unsigned int *)(a1 + 96));
    return v6;
  }
  return 0;
}

uint64_t ContentIndexDocSetSquashUpdatesForPulse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v6;
  unint64_t v7;
  _QWORD *v8;

  v3 = a3;
  v6 = *(_DWORD *)(a1 + 48);
  if ((v6 - 4) >= 4)
  {
    if (v6 == 3)
    {
      v8 = *(_QWORD **)(a1 + 64);
      if (v8)
      {
        if (PayloadIterator_ConsumeUpdates(v8, a2) > a3)
          return PayloadIterator_ConsumeUpdates(*(_QWORD **)(a1 + 64), a2);
      }
    }
  }
  else if (*(_DWORD *)(a1 + 96))
  {
    v7 = 0;
    do
      v3 = ContentIndexDocSetSquashUpdatesForPulse(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v7++), a2, v3);
    while (v7 < *(unsigned int *)(a1 + 96));
  }
  return v3;
}

uint64_t PayloadIterator_ConsumeUpdates(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  _QWORD **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int8x8_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  const char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  const char *v49;
  uint64_t v50;
  NSObject *log;
  int v52;
  NSObject *v53;
  int v54;
  uint64_t v55;
  uint8_t buf[4];
  int v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  _QWORD **v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v2 = a1[19];
  v3 = a1[17];
  v4 = v2 - v3;
  if (v2 > v3)
  {
    v44 = __si_assert_copy_extra(0);
    v37 = v44;
    v45 = "";
    if (v44)
      v45 = v44;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 261, "changes->hole <= changes->count", v45);
LABEL_49:
    free(v37);
    if (__valid_fs(-1))
      v46 = 2989;
    else
      v46 = 3072;
    *(_DWORD *)v46 = -559038737;
    abort();
  }
  v5 = a2;
  v7 = a1[14] + a2;
  v8 = (_QWORD **)(a1 + 16);
  if (v2 == v3)
  {
    v9 = a2;
  }
  else
  {
    v10 = a1[18];
    v11 = (unint64_t *)a1[16];
    if (v2 < 1)
    {
      v21 = a1[18];
      v9 = a2;
    }
    else
    {
      v12 = *v11;
      if (v7 >= *v11)
      {
        v14 = 0;
LABEL_41:
        v39 = v2 - v14;
        if (v2 - v14 >= 1)
        {
          v40 = 0;
          v41 = 0;
          do
          {
            *(_OWORD *)(a1[16] + v40) = *(_OWORD *)(a1[16] + v40 + 16 * v14);
            ++v41;
            v2 = a1[19];
            v39 = v2 - v14;
            v40 += 16;
          }
          while (v2 - v14 > v41);
        }
        a1[19] = v39;
        v42 = a1[17];
        a1[17] = v42 - v14;
        if (v2 > v42)
        {
          v47 = __si_assert_copy_extra(0);
          v48 = v47;
          v49 = "";
          if (v47)
            v49 = v47;
          __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 271, "changes->hole <= changes->count", v49);
          free(v48);
          if (__valid_fs(-1))
            v50 = 2989;
          else
            v50 = 3072;
          *(_DWORD *)v50 = -559038737;
          abort();
        }
        return v5;
      }
      v55 = a1[18];
      v13 = 0;
      v14 = 0;
      v15 = (int8x8_t)67109632;
      v9 = a2;
      while (1)
      {
        if ((v11[v13 + 1] & 0x80000000) == 0)
        {
          v16 = (unsigned int *)a1[11];
          v17 = v12 - *((_DWORD *)a1 + 28);
          *(_DWORD *)buf = -1;
          _CIIndexSetAddIndex(v16, v17, 0, buf, v15);
          v18 = *(_DWORD *)(a1[16] + v13 * 8) - *((_DWORD *)a1 + 28);
          v9 = v18 <= v5 ? v5 : v18;
          if (dword_1EF19FCB4 >= 5)
          {
            v52 = *__error();
            log = _SILogForLogForCategory(10);
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
            {
              v19 = *(_QWORD *)(a1[16] + v13 * 8);
              v20 = v19 - *((_DWORD *)a1 + 28);
              *(_DWORD *)buf = 67109632;
              v57 = v20;
              v58 = 2048;
              v59 = v19;
              v60 = 2048;
              v61 = v8;
              _os_log_impl(&dword_1B8270000, log, OS_LOG_TYPE_DEFAULT, "Squashed update %u (%llu) from %p\n", buf, 0x1Cu);
            }
            *__error() = v52;
          }
        }
        ++v14;
        v2 = a1[19];
        if (v14 >= v2)
          break;
        v11 = *v8;
        v12 = (*v8)[v13 + 2];
        v13 += 2;
        if (v7 >= v12)
        {
          v5 = v9;
          goto LABEL_41;
        }
      }
      v21 = a1[18];
      v11 = (unint64_t *)a1[16];
      v10 = v55;
    }
    v22 = v21 - (v10 + v4);
    a1[17] = v22;
    memmove(v11, &v11[2 * v10 + 2 * v4], 16 * v22);
    v2 = a1[17];
    a1[19] = v2;
  }
  v23 = *v8;
  if (v2 < 1 || (v24 = *v23, v7 >= *v23))
  {
    v28 = 0;
  }
  else
  {
    v25 = 0;
    v26 = 1;
    v27 = (int8x8_t)67109632;
    do
    {
      v28 = v26;
      if ((v23[v25 + 1] & 0x80000000) == 0)
      {
        v29 = (unsigned int *)a1[11];
        v30 = v24 - *((_DWORD *)a1 + 28);
        *(_DWORD *)buf = -1;
        _CIIndexSetAddIndex(v29, v30, 0, buf, v27);
        v23 = (unint64_t *)a1[16];
        v31 = LODWORD(v23[v25]) - *((_DWORD *)a1 + 28);
        v9 = v31 <= v5 ? v5 : v31;
        if (dword_1EF19FCB4 >= 5)
        {
          v54 = *__error();
          v53 = _SILogForLogForCategory(10);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            v32 = *(_QWORD *)(a1[16] + v25 * 8);
            v33 = v32 - *((_DWORD *)a1 + 28);
            *(_DWORD *)buf = 67109632;
            v57 = v33;
            v58 = 2048;
            v59 = v32;
            v60 = 2048;
            v61 = v8;
            _os_log_impl(&dword_1B8270000, v53, OS_LOG_TYPE_DEFAULT, "Squashed update %u (%llu) from %p\n", buf, 0x1Cu);
          }
          *__error() = v54;
          v23 = *v8;
        }
      }
      v2 = a1[17];
      if (v28 >= v2)
        break;
      v24 = v23[v25 + 2];
      v26 = v28 + 1;
      v25 += 2;
    }
    while (v7 < v24);
  }
  memmove(v23, &v23[2 * v28], 16 * (v2 - v28));
  v34 = a1[17];
  a1[17] = v34 - v28;
  v35 = a1[19];
  a1[19] = v35 - v28;
  v5 = v9;
  if (v35 > v34)
  {
    v36 = __si_assert_copy_extra(0);
    v37 = v36;
    v38 = "";
    if (v36)
      v38 = v36;
    __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 316, "changes->hole <= changes->count", v38);
    goto LABEL_49;
  }
  return v5;
}

void ContentIndexDocSetIteratorFlatten(uint64_t a1, __CFSet *a2, __CFSet *a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;

  if (a1 && !CFSetContainsValue(a2, (const void *)a1))
  {
    switch(*(_DWORD *)(a1 + 48))
    {
      case 0:
      case 1:
      case 2:
      case 3:
        if (!a3)
          goto LABEL_10;
        if (!CFSetContainsValue(a3, (const void *)a1))
LABEL_9:
          CFSetAddValue(a3, (const void *)a1);
        break;
      case 4:
      case 5:
      case 6:
      case 7:
        goto LABEL_15;
      case 8:
        if (a3)
          goto LABEL_9;
LABEL_10:
        if ((_DWORD)a4)
          *(_BYTE *)(a1 + 32) = 1;
        break;
      case 9:
        CFSetAddValue(a2, (const void *)a1);
        if ((*(_DWORD *)(a1 + 128) & 0x7FFFFFFF) != 0)
        {
          v8 = 0;
          do
            ContentIndexDocSetIteratorFlatten(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v8++), a2, a3, a4);
          while (v8 < (*(_DWORD *)(a1 + 128) & 0x7FFFFFFFu));
        }
LABEL_15:
        CFSetAddValue(a2, (const void *)a1);
        if (*(_DWORD *)(a1 + 96))
        {
          v9 = 0;
          do
            ContentIndexDocSetIteratorFlatten(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v9++), a2, a3, a4);
          while (v9 < *(unsigned int *)(a1 + 96));
        }
        if ((a4 & 1) != 0)
          *(_BYTE *)(a1 + 32) = 0;
        break;
      default:
        assert_invalid_doc_type((_DWORD *)a1);
    }
  }
}

uint64_t ContentIndexDocSetContainsPhrase(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *(_DWORD *)(a1 + 48);
  if ((v1 - 4) >= 4)
    return (v1 - 8) <= 1;
  v3 = *(unsigned int *)(a1 + 96);
  if (!(_DWORD)v3)
    return 0;
  v4 = 0;
  LOBYTE(result) = 0;
  v6 = 8 * v3;
  do
  {
    if ((result & 1) != 0)
      result = 1;
    else
      result = ContentIndexDocSetContainsPhrase(*(_QWORD *)(*(_QWORD *)(a1 + 72) + v4));
    v4 += 8;
  }
  while (v6 != v4);
  return result;
}

void ContentIndexDocSetIteratorProcessIterHits(char a1, int a2, int a3, int a4, const __CFSet *a5, const __CFSet *a6, uint64_t a7)
{
  processLeaves(a6, a4, a1, a2, a3, a7);
  processNodes(a5, a4, a1, a2, a3, a7);
}

void processLeaves(const __CFSet *a1, int a2, char a3, int a4, int a5, uint64_t a6)
{
  CFIndex Count;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  const char *v18;
  _QWORD block[7];
  int v20;
  int v21;
  int v22;
  char v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  Count = CFSetGetCount(a1);
  v13 = Count;
  MEMORY[0x1E0C80A78](Count);
  v15 = (char *)block - ((v14 + 15) & 0xFFFFFFFF0);
  bzero(v15, v14);
  CFSetGetValues(a1, (const void **)v15);
  v24 = 0;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = __processLeaves_block_invoke;
  block[3] = &__block_descriptor_tmp_20_4568;
  block[4] = v15;
  block[5] = a6;
  v23 = a3;
  v20 = a4;
  v21 = a5;
  v22 = a2;
  block[6] = &v24;
  dispatch_apply(v13, 0, block);
  if ((v24 & 1) != 0)
  {
    v16 = __si_assert_copy_extra_268();
    v17 = v16;
    v18 = "";
    if (v16)
      v18 = v16;
    __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexQuery.c", 3032, "__c11_atomic_load(didAssertPtr, memory_order_relaxed)==0", v18);
    free(v17);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
}

void CIIndexSetAddIntersectionInRange(unsigned int *a1, uint64_t *a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unsigned int v5;
  size_t v10;
  size_t v11;
  _DWORD **v12;
  BOOL *v13;
  size_t v14;
  uint64_t v15;
  int8x8_t v16;
  unsigned int v17;
  unsigned int v18;
  size_t v19;
  unsigned int **v20;
  size_t v21;
  unsigned int *v22;
  unsigned int v23;
  BOOL v24;
  size_t v25;
  unsigned int **v26;
  unsigned int *v27;
  _QWORD v28[2];
  _QWORD __compar[4];
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a4 <= a5)
  {
    v5 = a5;
    v28[1] = v28;
    v10 = a3;
    MEMORY[0x1E0C80A78](a1);
    v12 = (_DWORD **)((char *)v28 - v11);
    bzero((char *)v28 - v11, v11);
    v13 = (BOOL *)v12 + 13;
    v14 = v10;
    do
    {
      v15 = *a2;
      if (!*a2)
        return;
      *(_QWORD *)(v13 - 13) = v15;
      *v13 = *(_DWORD *)(v15 + 16) < -9;
      *(v13 - 1) = 0;
      v13 += 16;
      ++a2;
      --v14;
    }
    while (v14);
    __compar[0] = MEMORY[0x1E0C809B0];
    __compar[1] = 0x40000000;
    __compar[2] = __CIIndexSetAddIntersectionInRange_block_invoke;
    __compar[3] = &__block_descriptor_tmp_12_4387;
    v30 = a4;
    v31 = v5;
    qsort_b(v12, v10, 0x10uLL, __compar);
    if (*((_BYTE *)v12 + 13))
    {
      if (a3 <= 1)
      {
        v17 = *((_DWORD *)v12 + 2);
        goto LABEL_20;
      }
    }
    else
    {
      v17 = *((_DWORD *)v12 + 2);
      if (a3 < 2 || v17 < 0x400)
      {
LABEL_20:
        if (v17 || !*((_BYTE *)v12 + 12))
        {
          CIIndexSetAddRange(a1, *v12, a4, v5, v16);
          if (a3 >= 2)
          {
            v25 = v10 - 1;
            v26 = v12 + 2;
            do
            {
              v27 = *v26;
              v26 += 2;
              CIIndexSetIntersectRanges(a1, v27, a4, v5);
              --v25;
            }
            while (v25);
          }
        }
        return;
      }
    }
    if (a4 + 0x2000 >= v5)
      v18 = a4;
    else
      v18 = v5 - 0x2000;
    v19 = v10 - 1;
    do
    {
      CIIndexSetAddRange(a1, *v12, v18, v5, v16);
      v20 = v12 + 2;
      v21 = v19;
      do
      {
        v22 = *v20;
        v20 += 2;
        CIIndexSetIntersectRanges(a1, v22, v18, v5);
        --v21;
      }
      while (v21);
      v23 = v18 - 0x2000;
      if (v18 <= a4 + 0x2000)
        v23 = a4;
      v5 = v18;
      v24 = v18 > a4;
      v18 = v23;
    }
    while (v24);
  }
}

uint64_t ContentIndexDocSetGrabBitVector(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 0;
  switch(*(_DWORD *)(a1 + 48))
  {
    case 0:
    case 1:
    case 2:
      return v1;
    case 3:
    case 8:
      v1 = *(_QWORD *)(a1 + 64);
      if (!v1)
        return v1;
      v2 = v1 + 88;
      return *(_QWORD *)v2;
    case 4:
    case 5:
    case 6:
    case 7:
    case 9:
      v2 = a1 + 80;
      return *(_QWORD *)v2;
    default:
      assert_invalid_doc_type((_DWORD *)a1);
  }
}

_DWORD *NormalResolvedDocSet(unsigned int a1)
{
  return CIIndexSetCreateWithRange(0, a1, 1);
}

void CIIndexSetRemoveRange(unsigned int *cf, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  _BOOL4 v38;
  BOOL v39;
  CFTypeID v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  _BOOL4 v50;
  BOOL v51;
  CFTypeID v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  char v62;
  char v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  unsigned int *v71;
  int v72;
  int v73;
  unsigned int *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int *i;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  _BOOL4 v97;
  unsigned int v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  unsigned int v117;
  unsigned int v118;
  BOOL v119;
  BOOL v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  unsigned int v132;
  int v133;
  NSObject *v134;
  _DWORD v135[2];
  __int16 v136;
  unsigned int v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v5 = cf[5];
  v4 = cf[6];
  v7 = *(_DWORD *)(a2 + 20);
  v6 = *(_DWORD *)(a2 + 24);
  if (v4 >= v6)
    v8 = *(_DWORD *)(a2 + 24);
  else
    v8 = cf[6];
  v9 = v6 >= a4 && v4 >= a4;
  if (v9)
    v10 = a4;
  else
    v10 = v8;
  if (v5 <= v7)
    v11 = *(_DWORD *)(a2 + 20);
  else
    v11 = cf[5];
  v12 = v7 > a3 || v5 > a3;
  if (v12)
    v13 = v11;
  else
    v13 = a3;
  if (v13 > v10)
  {
    if (dword_1EF19FC90 >= 5)
    {
      v133 = *__error();
      v134 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
      {
        v135[0] = 67109376;
        v135[1] = v13;
        v136 = 1024;
        v137 = v10;
        _os_log_impl(&dword_1B8270000, v134, OS_LOG_TYPE_DEFAULT, "%d start, end:%d", (uint8_t *)v135, 0xEu);
      }
      *__error() = v133;
    }
  }
  else
  {
    v16 = *(_DWORD *)(a2 + 16);
    if (v16 <= -10)
    {
      if (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID)
        _CIIndexSetForceBitmap((uint64_t)cf, 0, 0);
      v16 = *(_DWORD *)(a2 + 16);
    }
    v17 = cf[4];
    if (v17 <= -10)
    {
      if (v16 <= -10)
      {
        v18 = cf[6];
        v19 = (v18 - v10) >> 5;
        v20 = (v18 - v10) & 0x1F;
        v21 = (v18 - v13) >> 5;
        v22 = (v18 - v13) & 0x1F;
        v23 = *(_DWORD *)(a2 + 24);
        v24 = v18 - v23;
        if (!v24)
        {
          v25 = *(_DWORD *)(*(_QWORD *)(a2 + 40) + 4 * v19);
          if ((_DWORD)v21 == (_DWORD)v19)
          {
            v26 = v22 + 1;
            v27 = masks[v20];
            if (v20 != v26)
              v27 = masks[v26] & ~v27;
            *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v19) &= ~(v27 & v25);
            return;
          }
          *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v19) &= masks[v20] | ~v25;
          v104 = (v19 + 1);
          if (v104 < v21)
          {
            do
            {
              *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v104) &= ~*(_DWORD *)(*(_QWORD *)(a2 + 40) + 4 * v104);
              ++v104;
            }
            while (v21 != v104);
          }
          v105 = 4 * v21;
          v106 = masks[v22 + 1] & *(_DWORD *)(*(_QWORD *)(a2 + 40) + v105);
          v107 = *((_QWORD *)cf + 5);
LABEL_238:
          *(_DWORD *)(v107 + v105) &= ~v106;
          return;
        }
        v60 = (v23 - v10) >> 5;
        v61 = (v23 - v13) >> 5;
        v62 = v24 & 0x1F;
        if ((v24 & 0x1F) != 0)
        {
          v63 = 32 - v62;
          v64 = *(_QWORD *)(a2 + 40);
          v65 = *(_DWORD *)(v64 + 4 * v60);
          v66 = v60 + 1;
          v67 = *(_DWORD *)(a2 + 32);
          v68 = v21 - v19;
          if ((_DWORD)v21 == (_DWORD)v19)
          {
            v69 = v65 << v62;
            if (v66 < v67)
              v69 |= *(_DWORD *)(v64 + 4 * v66) >> v63;
            v70 = ~v69;
            goto LABEL_210;
          }
          v114 = v65 >> v63;
          if (v66 >= v67)
            v115 = 0;
          else
            v115 = *(_DWORD *)(v64 + 4 * v66) << v62;
          *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v19) &= masks[v20] | ~(v115 | v114);
          if (v68 >= 2)
          {
            v121 = 1 - v68;
            v122 = v19 + 1;
            v123 = v60 + 2;
            do
            {
              v125 = *(_QWORD *)(a2 + 40);
              if (v123 < *(_DWORD *)(a2 + 32))
                v124 = *(_DWORD *)(v125 + 4 * v123) << v62;
              else
                v124 = 0;
              *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v122++) &= ~(v124 | (*(_DWORD *)(v125 + 4 * (v123++ - 1)) >> v63));
              v9 = __CFADD__(v121++, 1);
            }
            while (!v9);
          }
          v106 = (*(_DWORD *)(*(_QWORD *)(a2 + 40) + 4 * v61) >> v63) & masks[v22 + 1];
        }
        else
        {
          v108 = *(_DWORD *)(*(_QWORD *)(a2 + 40) + 4 * v60);
          v109 = v21 - v19;
          if ((_DWORD)v21 == (_DWORD)v19)
          {
            v70 = ~v108;
LABEL_210:
            v110 = v22 + 1;
            v111 = masks[v20];
            v112 = v111;
            v113 = v111;
            if (v20 != v110)
            {
              v112 = masks[v110];
              v113 = v112 & ~v111;
            }
            *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v19) &= v113 & v70 | ~v112 | v111;
            return;
          }
          *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v19) &= masks[v20] | ~v108;
          if (v109 >= 2)
          {
            v116 = 1 - v109;
            v117 = v19 + 1;
            v118 = v60 + 1;
            do
            {
              *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v117++) &= ~*(_DWORD *)(*(_QWORD *)(a2 + 40) + 4 * v118++);
              v9 = __CFADD__(v116++, 1);
            }
            while (!v9);
          }
          v106 = masks[v22 + 1] & *(_DWORD *)(*(_QWORD *)(a2 + 40) + 4 * v61);
        }
        v107 = *((_QWORD *)cf + 5);
        v105 = 4 * v21;
        goto LABEL_238;
      }
      if ((v16 & 0x80000000) == 0)
      {
        if (v13)
          v34 = v13 - 1;
        else
          v34 = 0;
        v35 = binarySearchMap(a2, v34);
        LODWORD(v36) = binarySearchMap(a2, v10);
        v37 = *(_DWORD *)(a2 + 36);
        v38 = v35 > v37 && (int)v36 > v37;
        v39 = v35 > v37 || (int)v36 >= v37;
        v40 = CFGetTypeID((CFTypeRef)a2);
        if (!v38 && v39)
        {
          if (v40 == __kCIIndexSetInvertedTypeID)
          {
            v41 = *(_DWORD *)(a2 + 16);
            v43 = *(_DWORD *)(a2 + 32);
            v42 = *(_DWORD *)(a2 + 36);
            v44 = v43 - v41 + v42;
            if (v35 <= v44)
            {
              v119 = 0;
            }
            else
            {
              if (v35 <= v44)
              {
                v45 = *(_QWORD *)(a2 + 40);
              }
              else
              {
                v45 = *(_QWORD *)(a2 + 40);
                v46 = v35 - 1;
                do
                {
                  v47 = *(_DWORD *)(v45 + 4 * v46);
                  if (v47 > v13)
                  {
                    _CIIndexSetClearRange((int *)cf, v13, v47 - 1);
                    v45 = *(_QWORD *)(a2 + 40);
                    v41 = *(_DWORD *)(a2 + 16);
                    v43 = *(_DWORD *)(a2 + 32);
                    v42 = *(_DWORD *)(a2 + 36);
                    v47 = *(_DWORD *)(v45 + 4 * v46);
                  }
                  v13 = v47 + 1;
                  v44 = v43 - v41 + v42;
                  v12 = v46-- <= v44;
                }
                while (!v12);
              }
              v119 = *(_DWORD *)(v45 + 4 * v44) == v10;
            }
            if (v42 > (int)v36)
            {
              v126 = v42;
              v36 = (int)v36;
              v127 = *(_QWORD *)(a2 + 40);
              v128 = v126 - 1;
              do
              {
                v129 = *(_DWORD *)(v127 + 4 * v128);
                if (v129 > v13)
                {
                  _CIIndexSetClearRange((int *)cf, v13, v129 - 1);
                  v127 = *(_QWORD *)(a2 + 40);
                  v129 = *(_DWORD *)(v127 + 4 * v128);
                }
                v13 = v129 + 1;
                v12 = v128-- <= (int)v36;
              }
              while (!v12);
LABEL_265:
              if (*(_DWORD *)(v127 + 4 * v36) == v10)
                v119 = 1;
              goto LABEL_267;
            }
            goto LABEL_267;
          }
LABEL_138:
          v85 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 16) + *(_DWORD *)(a2 + 36);
          CIIndexSetRemoveSortedIndexes((uint64_t)cf, (unsigned int *)(*(_QWORD *)(a2 + 40) + 4 * v85), v35 - v85);
          v86 = (unsigned int *)(*(_QWORD *)(a2 + 40) + 4 * (int)v36);
          v87 = *(_DWORD *)(a2 + 36) - v36;
LABEL_204:
          CIIndexSetRemoveSortedIndexes((uint64_t)cf, v86, v87);
          return;
        }
        if (v40 == __kCIIndexSetInvertedTypeID)
        {
          if (v35 <= (int)v36)
          {
            v120 = 0;
          }
          else
          {
            v79 = *(_QWORD *)(a2 + 40);
            v80 = v35 - 1;
            do
            {
              v81 = *(_DWORD *)(v79 + 4 * v80);
              if (v81 > v13)
              {
                _CIIndexSetClearRange((int *)cf, v13, v81 - 1);
                v79 = *(_QWORD *)(a2 + 40);
                v81 = *(_DWORD *)(v79 + 4 * v80);
              }
              v13 = v81 + 1;
              v12 = v80-- <= (int)v36;
            }
            while (!v12);
            v120 = *(_DWORD *)(v79 + 4 * (int)v36) == v10;
          }
          if (v120)
            return;
LABEL_268:
          if (v10 >= v13)
            _CIIndexSetClearRange((int *)cf, v13, v10);
          return;
        }
LABEL_139:
        v86 = (unsigned int *)(*(_QWORD *)(a2 + 40) + 4 * (int)v36);
        v87 = v35 - v36;
        goto LABEL_204;
      }
      v73 = -2 - v16;
      v74 = (unsigned int *)(a2 + 32);
      if (v16 > 0xFFFFFFFD || *v74 <= v10)
      {
        v75 = 0;
      }
      else
      {
        if (v16 == -3)
          goto LABEL_122;
        if (*(_DWORD *)(a2 + 36) <= v10)
        {
          v75 = 1;
        }
        else
        {
          if (v16 == -4)
            goto LABEL_122;
          if (*(_DWORD *)(a2 + 40) <= v10)
          {
            v75 = 2;
          }
          else
          {
            if (v16 == -5)
              goto LABEL_122;
            if (*(_DWORD *)(a2 + 44) <= v10)
            {
              v75 = 3;
            }
            else
            {
              if (v16 == -6)
                goto LABEL_122;
              if (*(_DWORD *)(a2 + 48) <= v10)
              {
                v75 = 4;
              }
              else
              {
                if (v16 == -7)
                  goto LABEL_122;
                if (*(_DWORD *)(a2 + 52) > v10)
                {
                  if (v16 != -8 && *(_DWORD *)(a2 + 56) <= v10)
                  {
                    v75 = 6;
                    goto LABEL_177;
                  }
LABEL_122:
                  v76 = v73;
                  goto LABEL_200;
                }
                v75 = 5;
              }
            }
          }
        }
      }
LABEL_177:
      if (v75 >= v73)
        v76 = -2 - v16;
      else
        v76 = v75;
      if (v13)
        v99 = v13 - 1;
      else
        v99 = 0;
      if (v73 > v75)
      {
        v100 = v76;
        v101 = v76;
        while (v74[v101] > v99)
        {
          if (v73 == (_DWORD)++v101)
            goto LABEL_199;
        }
        goto LABEL_201;
      }
LABEL_200:
      v100 = v76;
      LODWORD(v101) = v76;
LABEL_201:
      if ((int)v101 < v73)
        v73 = v101;
      v86 = &v74[v100];
      v87 = v73 - v76;
      goto LABEL_204;
    }
    if (v16 <= -10)
    {
      if ((v17 & 0x80000000) == 0)
      {
        v28 = (int)cf[9];
        if ((_DWORD)v28 != v17)
        {
          memmove((void *)(*((_QWORD *)cf + 5) + 4 * v28), (const void *)(*((_QWORD *)cf + 5) + 4 * ((_DWORD)v28 - v17 + cf[8])), 4 * (v17 - (int)v28));
          cf[9] = cf[4];
        }
        v29 = binarySearchMap((uint64_t)cf, v10);
        v30 = cf[4];
        if (v29 < v30 && *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v29) > v10)
          ++v29;
        if (v29 >= v30)
        {
          v77 = v29;
        }
        else
        {
          v31 = v29;
          do
          {
            v32 = *((_QWORD *)cf + 5);
            v33 = *(_DWORD *)(v32 + 4 * v31);
            if (v33 > v10)
              break;
            if (v33 < v13
              || ((*(_DWORD *)(*(_QWORD *)(a2 + 40) + 4 * ((*(_DWORD *)(a2 + 24) - v33) >> 5)) >> (*(_BYTE *)(a2 + 24) - v33)) & 1) == 0)
            {
              *(_DWORD *)(v32 + 4 * v29) = v33;
              v30 = cf[4];
              ++v29;
            }
            ++v31;
          }
          while (v31 < v30);
          v77 = v29;
          v29 = v31;
        }
        v78 = v77 - v29 + v30;
        cf[4] = v78;
        cf[9] = v78;
        return;
      }
      v71 = cf + 8;
      if (v17 > 0xFFFFFFFD || *v71 <= v10)
      {
        v72 = 0;
      }
      else
      {
        if (v17 == -3)
          return;
        if (cf[9] <= v10)
        {
          v72 = 1;
        }
        else
        {
          if (v17 == -4)
            return;
          if (cf[10] <= v10)
          {
            v72 = 2;
          }
          else
          {
            if (v17 == -5)
              return;
            if (cf[11] <= v10)
            {
              v72 = 3;
            }
            else
            {
              if (v17 == -6)
                return;
              if (cf[12] <= v10)
              {
                v72 = 4;
              }
              else
              {
                if (v17 == -7)
                  return;
                if (cf[13] <= v10)
                {
                  v72 = 5;
                }
                else
                {
                  if (v17 == -8 || cf[14] > v10)
                    return;
                  v72 = 6;
                }
              }
            }
          }
        }
      }
      v88 = (-2 - v17);
      if (v72 >= (int)v88)
        return;
      v89 = v88 - v72;
      for (i = &cf[v72 + 8]; ; ++i)
      {
        v91 = *i;
        if (*i < v13)
          return;
        if (a2)
        {
          if (*(_DWORD *)(a2 + 20) <= v91)
          {
            v92 = *(_DWORD *)(a2 + 24);
            v93 = v92 - v91;
            if (v92 >= v91)
            {
              v94 = *(_DWORD *)(a2 + 16);
              if (v94 > -10)
              {
                if (v94 < 0)
                {
                  if (v94 < 0xFFFFFFFE
                    && (*(_DWORD *)(a2 + 32) == v91
                     || v94 != -3
                     && (*(_DWORD *)(a2 + 36) == v91
                      || v94 != -4
                      && (*(_DWORD *)(a2 + 40) == v91
                       || v94 != -5
                       && (*(_DWORD *)(a2 + 44) == v91
                        || v94 != -6
                        && (*(_DWORD *)(a2 + 48) == v91
                         || v94 != -7 && (*(_DWORD *)(a2 + 52) == v91 || v94 != -8 && *(_DWORD *)(a2 + 56) == v91)))))))
                  {
                    goto LABEL_162;
                  }
                }
                else
                {
                  v95 = binarySearchMap(a2, *i);
                  v96 = *(_DWORD *)(a2 + 36);
                  if (v95 < v96
                    || (v97 = 0, v98 = *(_DWORD *)(a2 + 32), v95 < v98) && v95 >= v98 + v96 - *(_DWORD *)(a2 + 16))
                  {
                    v97 = *(_DWORD *)(*(_QWORD *)(a2 + 40) + 4 * v95) == v91;
                  }
                  if (((v97 ^ (CFGetTypeID((CFTypeRef)a2) == __kCIIndexSetInvertedTypeID)) & 1) != 0)
                  {
LABEL_162:
                    ++cf[4];
                    goto LABEL_148;
                  }
                  v91 = *i;
                }
              }
              else if (((*(_DWORD *)(*(_QWORD *)(a2 + 40) + 4 * (v93 >> 5)) >> v93) & 1) != 0)
              {
                goto LABEL_162;
              }
            }
          }
        }
        v71[v72++] = v91;
LABEL_148:
        if (!--v89)
          return;
      }
    }
    if (v16 < 0)
    {
      v73 = -2 - v16;
      v74 = (unsigned int *)(a2 + 32);
      if (v16 > 0xFFFFFFFD || *v74 <= v10)
      {
        v102 = 0;
      }
      else
      {
        if (v16 == -3)
          goto LABEL_122;
        if (*(_DWORD *)(a2 + 36) <= v10)
        {
          v102 = 1;
        }
        else
        {
          if (v16 == -4)
            goto LABEL_122;
          if (*(_DWORD *)(a2 + 40) <= v10)
          {
            v102 = 2;
          }
          else
          {
            if (v16 == -5)
              goto LABEL_122;
            if (*(_DWORD *)(a2 + 44) <= v10)
            {
              v102 = 3;
            }
            else
            {
              if (v16 == -6)
                goto LABEL_122;
              if (*(_DWORD *)(a2 + 48) <= v10)
              {
                v102 = 4;
              }
              else
              {
                if (v16 == -7)
                  goto LABEL_122;
                if (*(_DWORD *)(a2 + 52) <= v10)
                {
                  v102 = 5;
                }
                else
                {
                  if (v16 == -8 || *(_DWORD *)(a2 + 56) > v10)
                    goto LABEL_122;
                  v102 = 6;
                }
              }
            }
          }
        }
      }
      if (v102 >= v73)
        v76 = -2 - v16;
      else
        v76 = v102;
      if (v13)
        v103 = v13 - 1;
      else
        v103 = 0;
      if (v73 > v102)
      {
        v100 = v76;
        v101 = v76;
        while (v74[v101] > v103)
        {
          if (v73 == (_DWORD)++v101)
          {
LABEL_199:
            LODWORD(v101) = v73;
            goto LABEL_201;
          }
        }
        goto LABEL_201;
      }
      goto LABEL_200;
    }
    if (v13)
      v48 = v13 - 1;
    else
      v48 = 0;
    v35 = binarySearchMap(a2, v48);
    LODWORD(v36) = binarySearchMap(a2, v10);
    v49 = *(_DWORD *)(a2 + 36);
    v50 = v35 > v49 && (int)v36 > v49;
    v51 = v35 > v49 || (int)v36 >= v49;
    v52 = CFGetTypeID((CFTypeRef)a2);
    if (!v50 && v51)
    {
      if (v52 == __kCIIndexSetInvertedTypeID)
      {
        v53 = *(_DWORD *)(a2 + 16);
        v55 = *(_DWORD *)(a2 + 32);
        v54 = *(_DWORD *)(a2 + 36);
        v56 = v55 - v53 + v54;
        if (v35 <= v56)
        {
          v119 = 0;
        }
        else
        {
          if (v35 <= v56)
          {
            v57 = *(_QWORD *)(a2 + 40);
          }
          else
          {
            v57 = *(_QWORD *)(a2 + 40);
            v58 = v35 - 1;
            do
            {
              v59 = *(_DWORD *)(v57 + 4 * v58);
              if (v59 > v13)
              {
                _CIIndexSetClearRange((int *)cf, v13, v59 - 1);
                v57 = *(_QWORD *)(a2 + 40);
                v53 = *(_DWORD *)(a2 + 16);
                v55 = *(_DWORD *)(a2 + 32);
                v54 = *(_DWORD *)(a2 + 36);
                v59 = *(_DWORD *)(v57 + 4 * v58);
              }
              v13 = v59 + 1;
              v56 = v55 - v53 + v54;
              v12 = v58-- <= v56;
            }
            while (!v12);
          }
          v119 = *(_DWORD *)(v57 + 4 * v56) == v10;
        }
        if (v54 > (int)v36)
        {
          v130 = v54;
          v36 = (int)v36;
          v127 = *(_QWORD *)(a2 + 40);
          v131 = v130 - 1;
          do
          {
            v132 = *(_DWORD *)(v127 + 4 * v131);
            if (v132 > v13)
            {
              _CIIndexSetClearRange((int *)cf, v13, v132 - 1);
              v127 = *(_QWORD *)(a2 + 40);
              v132 = *(_DWORD *)(v127 + 4 * v131);
            }
            v13 = v132 + 1;
            v12 = v131-- <= (int)v36;
          }
          while (!v12);
          goto LABEL_265;
        }
LABEL_267:
        if (v119)
          return;
        goto LABEL_268;
      }
      goto LABEL_138;
    }
    if (v52 != __kCIIndexSetInvertedTypeID)
      goto LABEL_139;
    if (v35 <= (int)v36)
      goto LABEL_268;
    v82 = *(_QWORD *)(a2 + 40);
    v83 = v35 - 1;
    do
    {
      v84 = *(_DWORD *)(v82 + 4 * v83);
      if (v84 > v13)
      {
        _CIIndexSetClearRange((int *)cf, v13, v84 - 1);
        v82 = *(_QWORD *)(a2 + 40);
        v84 = *(_DWORD *)(v82 + 4 * v83);
      }
      v13 = v84 + 1;
      v12 = v83-- <= (int)v36;
    }
    while (!v12);
    if (*(_DWORD *)(v82 + 4 * (int)v36) != v10)
      goto LABEL_268;
  }
}

void CIIndexSetIntersectRanges(_DWORD *cf, unsigned int *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  int v34;
  char *v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  char v46;
  char v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  _BOOL4 v66;
  unsigned int v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  unsigned int *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  unsigned int *v88;
  int8x8_t v89;
  int v90;
  unsigned int v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  unsigned int v120;
  _BOOL4 v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  int v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v139;
  unsigned int v140;
  int v141;
  uint64_t *v142;
  unsigned int v143;
  unsigned int v144;
  _BOOL4 v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  unsigned int v152;
  BOOL v153;
  int v154;
  unsigned int v155;
  int v156;
  unsigned int v157;
  uint8_t buf[8];
  uint64_t v159;
  unsigned int *v160;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  if (cf[6] >= a2[6])
    v7 = a2[6];
  else
    v7 = cf[6];
  if (v7 >= a4)
    v8 = a4;
  else
    v8 = v7;
  if (cf[5] <= a2[5])
    v9 = a2[5];
  else
    v9 = cf[5];
  if (v9 >= a3)
  {
    if (v9 <= a3)
    {
      if (v7 < a4)
        goto LABEL_30;
    }
    else
    {
      _CIIndexSetClearRange(cf, a3, v9 - 1);
      if (v7 < a4)
        goto LABEL_30;
    }
LABEL_12:
    if (v9 <= v8)
      goto LABEL_13;
LABEL_31:
    if (dword_1EF19FC90 >= 5)
    {
      v29 = *__error();
      v30 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&buf[4] = v9;
        LOWORD(v159) = 1024;
        *(_DWORD *)((char *)&v159 + 2) = v8;
        _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "%d start, end:%d", buf, 0xEu);
      }
      *__error() = v29;
    }
    return;
  }
  v9 = a3;
  if (v7 >= a4)
    goto LABEL_12;
LABEL_30:
  _CIIndexSetClearRange(cf, v8, a4);
  if (v9 > v8)
    goto LABEL_31;
LABEL_13:
  v10 = cf[4];
  if (v10)
  {
    if (v10 == -2)
      return;
  }
  else if (CFGetTypeID(cf) != __kCIIndexSetInvertedTypeID || cf[4] == -2)
  {
    return;
  }
  v11 = a2[4];
  if (!v11)
  {
    if (CFGetTypeID(a2) == __kCIIndexSetInvertedTypeID && a2[4] != -2)
      goto LABEL_17;
LABEL_40:
    _CIIndexSetClearRange(cf, v9, v8);
    return;
  }
  if (v11 == -2)
    goto LABEL_40;
LABEL_17:
  v12 = &CurrentYear(void)::currYear;
  if (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID)
    _CIIndexSetForceBitmap((uint64_t)cf, 0, 0);
  v13 = a2[4];
  v14 = cf[4];
  if ((int)v13 <= -10)
  {
    if (v14 <= -10)
    {
      v15 = cf[6];
      v16 = (v15 - v8) >> 5;
      v17 = (v15 - v8) & 0x1F;
      v18 = (v15 - v9) >> 5;
      v19 = (v15 - v9) & 0x1F;
      v20 = a2[6];
      v21 = v15 - v20;
      if (!v21)
      {
        if ((_DWORD)v18 == v16)
        {
          v22 = v19 + 1;
          v23 = masks[v17];
          v24 = v23;
          v25 = v23;
          if (v17 != v22)
          {
            v24 = masks[v22];
            v25 = v24 & ~v23;
          }
          v26 = 4 * v16;
          v27 = *(_DWORD *)(*((_QWORD *)a2 + 5) + v26) & v25 | ~v24 | v23;
          v28 = *((_QWORD *)cf + 5);
          goto LABEL_226;
        }
        *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v16) &= masks[v17] | *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v16);
        v78 = v16 + 1;
        if (v78 < v18)
        {
          do
          {
            *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v78) &= *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v78);
            ++v78;
          }
          while (v18 != v78);
        }
        v79 = 4 * v18;
        v80 = *(_DWORD *)(*((_QWORD *)a2 + 5) + v79) | ~masks[v19 + 1];
        v81 = *((_QWORD *)cf + 5);
LABEL_236:
        *(_DWORD *)(v81 + v79) &= v80;
        return;
      }
      v44 = (v20 - v8) >> 5;
      v45 = (v20 - v9) >> 5;
      v46 = v21 & 0x1F;
      if ((v21 & 0x1F) != 0)
      {
        v47 = 32 - v46;
        v48 = *((_QWORD *)a2 + 5);
        v49 = *(_DWORD *)(v48 + 4 * v44);
        v50 = v44 + 1;
        v51 = a2[8];
        v52 = v18 - v16;
        if ((_DWORD)v18 == v16)
        {
          if (v50 >= v51)
            v53 = 0;
          else
            v53 = *(_DWORD *)(v48 + 4 * v50) >> v47;
          v128 = v53 | (v49 << v46);
          v129 = v19 + 1;
          v93 = masks[v17];
          v130 = v93;
          v131 = v93;
          if (v17 != v129)
          {
            v130 = masks[v129];
            v131 = v130 & ~v93;
          }
          v96 = v131 & v128 | ~v130;
LABEL_225:
          v27 = v96 | v93;
          v28 = *((_QWORD *)cf + 5);
          v26 = 4 * v16;
LABEL_226:
          *(_DWORD *)(v28 + v26) &= v27;
          return;
        }
        v104 = v49 >> v47;
        if (v50 >= v51)
          v105 = 0;
        else
          v105 = *(_DWORD *)(v48 + 4 * v50) << v46;
        *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v16) &= v105 | masks[v17] | v104;
        if (v52 >= 2)
        {
          v132 = 1 - v52;
          v133 = v16 + 1;
          v134 = v44 + 2;
          do
          {
            v136 = *((_QWORD *)a2 + 5);
            if (v134 < a2[8])
              v135 = *(_DWORD *)(v136 + 4 * v134) << v46;
            else
              v135 = 0;
            *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v133++) &= v135 | (*(_DWORD *)(v136 + 4 * (v134++ - 1)) >> v47);
            v153 = __CFADD__(v132++, 1);
          }
          while (!v153);
        }
        v126 = *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v45) >> v47;
        v127 = masks[v19 + 1];
      }
      else
      {
        v90 = *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v44);
        v91 = v18 - v16;
        if ((_DWORD)v18 == v16)
        {
          v92 = v19 + 1;
          v93 = masks[v17];
          v94 = v93;
          v95 = v93;
          if (v17 != v92)
          {
            v94 = masks[v92];
            v95 = v94 & ~v93;
          }
          v96 = v95 & v90 | ~v94;
          goto LABEL_225;
        }
        *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v16) &= masks[v17] | v90;
        if (v91 >= 2)
        {
          v123 = 1 - v91;
          v124 = v16 + 1;
          v125 = v44 + 1;
          do
          {
            *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v124++) &= *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v125++);
            v153 = __CFADD__(v123++, 1);
          }
          while (!v153);
        }
        v126 = *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v45);
        v127 = masks[v19 + 1];
      }
      v80 = v126 | ~v127;
      v81 = *((_QWORD *)cf + 5);
      v79 = 4 * v18;
      goto LABEL_236;
    }
    if (v14 <= -2)
    {
      v34 = -2 - v14;
      v35 = (char *)(cf + 8);
      if (v14 == -2)
      {
        v36 = 0;
LABEL_123:
        if (v36 >= v34)
          LODWORD(v83) = v34;
        else
          LODWORD(v83) = v36;
        v84 = v83;
      }
      else
      {
        v82 = 0;
        while (*(_DWORD *)&v35[4 * v82] > v8)
        {
          if (v34 == (_DWORD)++v82)
          {
            v36 = -2 - v14;
            goto LABEL_123;
          }
        }
        if ((int)v82 >= v34)
          v84 = -2 - v14;
        else
          v84 = v82;
        if (v34 <= (int)v82)
        {
          LODWORD(v83) = v84;
        }
        else
        {
          v83 = (int)v82;
          v112 = -2 - (v14 + v82);
          while (1)
          {
            v113 = *(_DWORD *)&v35[4 * v83];
            if (v113 < v9)
              break;
            if (((*(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * ((a2[6] - v113) >> 5)) >> (*((_BYTE *)a2 + 24) - v113)) & 1) != 0)
              *(_DWORD *)&v35[4 * v84++] = v113;
            ++v83;
            if (!--v112)
            {
              LODWORD(v83) = v34;
              break;
            }
          }
        }
      }
      memmove(&v35[4 * v84], &v35[4 * (int)v83], 4 * (v34 - (int)v83));
      cf[4] += v83 - v84;
      return;
    }
    if ((v14 & 0x80000000) == 0)
    {
      v68 = (int)cf[9];
      if ((_DWORD)v68 != v14)
      {
        memmove((void *)(*((_QWORD *)cf + 5) + 4 * v68), (const void *)(*((_QWORD *)cf + 5) + 4 * (v68 - v14 + cf[8])), 4 * (v14 - (int)v68));
        cf[9] = cf[4];
      }
    }
    v69 = binarySearchMap((uint64_t)cf, v8);
    v70 = v69;
    v71 = cf[4];
    if (v69 >= v71)
    {
      v85 = v69;
    }
    else
    {
      v72 = v69;
      do
      {
        v73 = *((_QWORD *)cf + 5);
        v74 = *(_DWORD *)(v73 + 4 * v72);
        if (v74 < v9)
          break;
        if (((*(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * ((a2[6] - v74) >> 5)) >> (*((_BYTE *)a2 + 24) - v74)) & 1) != 0)
        {
          *(_DWORD *)(v73 + 4 * v70++) = v74;
          v71 = cf[4];
        }
        ++v72;
      }
      while (v72 < v71);
      v85 = v70;
      v70 = v72;
    }
    memmove((void *)(*((_QWORD *)cf + 5) + 4 * v85), (const void *)(*((_QWORD *)cf + 5) + 4 * v70), 4 * (v71 - v70));
    v86 = v85 - v70;
LABEL_279:
    v150 = cf[4] + v86;
    cf[4] = v150;
    cf[9] = v150;
    return;
  }
  if (v14 <= -10)
  {
    if ((int)v13 <= -2)
    {
      *(_QWORD *)buf = 0;
      v159 = 0;
      if ((_DWORD)v13 != -2)
      {
        v31 = 0;
        v32 = 4294967294 - v13;
        v33 = a2 + 8;
        while (1)
        {
          v59 = *v33;
          if (*v33 < v9 || v59 > v8)
            goto LABEL_75;
          if (cf[5] > v59)
            goto LABEL_75;
          v61 = cf[6];
          v62 = v61 - v59;
          if (v61 < v59)
            goto LABEL_75;
          v63 = cf[4];
          if (v63 > -10)
            break;
          if (((*(_DWORD *)(*((_QWORD *)cf + 5) + 4 * (v62 >> 5)) >> v62) & 1) != 0)
            goto LABEL_74;
LABEL_75:
          ++v33;
          if (!--v32)
            goto LABEL_134;
        }
        if (v63 < 0)
        {
          if (v63 >= 0xFFFFFFFE
            || cf[8] != v59
            && (v63 == -3
             || cf[9] != v59
             && (v63 == -4
              || cf[10] != v59
              && (v63 == -5
               || cf[11] != v59
               && (v63 == -6 || cf[12] != v59 && (v63 == -7 || cf[13] != v59 && (v63 == -8 || cf[14] != v59)))))))
          {
            goto LABEL_75;
          }
        }
        else
        {
          v64 = binarySearchMap((uint64_t)cf, *v33);
          v65 = cf[9];
          if (v64 < v65 || (v66 = 0, v67 = cf[8], v64 < v67) && v64 >= v67 + v65 - cf[4])
            v66 = *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v64) == v59;
          if (v66 == (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID))
            goto LABEL_75;
          v59 = *v33;
        }
LABEL_74:
        *(_DWORD *)&buf[4 * v31++] = v59;
        goto LABEL_75;
      }
LABEL_133:
      v31 = 0;
LABEL_134:
      _CIIndexSetClearRange(cf, v9, v8);
      _CIIndexSetAddSortedIndexes(cf, (unsigned int *)buf, v31, 1, 0, 0, v89);
      return;
    }
    v54 = cf[6];
    if (a2[6] >= v8)
      v55 = v8;
    else
      v55 = a2[6];
    if (a2[5] <= v9)
      v56 = v9;
    else
      v56 = a2[5];
    *(_DWORD *)buf = v55;
    *(_DWORD *)&buf[4] = v56;
    v159 = 0;
    v160 = a2;
    if ((int)v13 < 1)
    {
      if ((v13 & 0x80000000) == 0)
        goto LABEL_142;
      v58 = -1;
    }
    else
    {
      v57 = binarySearchMap((uint64_t)a2, v55);
      LODWORD(v159) = v57;
      if (v57 != a2[9])
        goto LABEL_142;
      v58 = a2[8] + v57 - a2[4];
    }
    LODWORD(v159) = v58;
LABEL_142:
    v97 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
    if (v97)
    {
      v98 = v97;
      v99 = (v54 - v8) & 0x1F;
      v100 = (v54 - v8) >> 5;
      v101 = cf[6] - v97;
      v102 = v101 >> 5;
      if (v101 >> 5 == v100)
        v103 = masks[v99];
      else
        v103 = 0;
      v106 = 1 << v101;
      v155 = (v54 - v8) >> 5;
      v157 = (v54 - v9) >> 5;
      v154 = ((_BYTE)v54 - (_BYTE)v9) & 0x1F;
      if (v100 == v157)
      {
        v103 = masks[v99] | ~masks[(((_BYTE)v54 - (_BYTE)v9) & 0x1F) + 1];
      }
      else if (v97 + 1 <= v8)
      {
        _CIIndexSetClearRange(cf, v97 + 1, v8);
      }
LABEL_153:
      v107 = v98;
      v108 = v106;
      while (1)
      {
        v109 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
        if (!v109)
          break;
        v98 = v109;
        v110 = (cf[6] - v109) >> 5;
        v106 = 1 << (*((_BYTE *)cf + 24) - v109);
        if (v110 != v102)
        {
          *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v102) &= v103 | v108;
          v102 = v110;
          v103 = 0;
          if (v107 - 1 >= v109 + 1)
          {
            _CIIndexSetClearRange(cf, v109 + 1, v107 - 1);
            v103 = 0;
            v102 = v110;
          }
          goto LABEL_153;
        }
        v108 |= v106;
        v107 = v109;
      }
      if (v155 == v157 || v102 != v157)
      {
        v111 = v103 | v108;
      }
      else
      {
        v111 = v108 | ~masks[v154 + 1];
        v102 = v157;
      }
      *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v102) &= v111;
      if (v107 <= v9)
        return;
      v8 = v107 - 1;
    }
    _CIIndexSetClearRange(cf, v9, v8);
    return;
  }
  if ((v14 & 0x80000000) == 0)
  {
    if ((v13 & 0x80000000) == 0)
    {
      v37 = (int)cf[9];
      if ((_DWORD)v37 != v14)
      {
        memmove((void *)(*((_QWORD *)cf + 5) + 4 * v37), (const void *)(*((_QWORD *)cf + 5) + 4 * (v37 - v14 + cf[8])), 4 * (v14 - (int)v37));
        cf[9] = cf[4];
      }
      v38 = binarySearchMap((uint64_t)cf, v8);
      v39 = a2[5];
      if (a2[6] >= v8)
        v40 = v8;
      else
        v40 = a2[6];
      v41 = a2[4];
      if (v39 <= v9)
        v39 = v9;
      *(_DWORD *)buf = v40;
      *(_DWORD *)&buf[4] = v39;
      v159 = 0;
      v160 = a2;
      if (v41 >= 1)
      {
        v42 = binarySearchMap((uint64_t)a2, v40);
        LODWORD(v159) = v42;
        if (v42 != a2[9])
          goto LABEL_275;
        v43 = a2[8] + v42 - a2[4];
        goto LABEL_274;
      }
      if (v41 < 0xFFFFFFF7)
        goto LABEL_275;
      if (v41 <= 0xFFFFFFFD)
      {
        if (v40 >= a2[8])
        {
          v43 = 0;
          goto LABEL_274;
        }
        if (v41 != -3)
        {
          if (v40 >= a2[9])
          {
            v43 = 1;
            goto LABEL_274;
          }
          if (v41 != -4)
          {
            if (v40 >= a2[10])
            {
              v43 = 2;
              goto LABEL_274;
            }
            if (v41 != -5)
            {
              if (v40 >= a2[11])
              {
                v43 = 3;
                goto LABEL_274;
              }
              if (v41 != -6)
              {
                if (v40 >= a2[12])
                {
                  v43 = 4;
                  goto LABEL_274;
                }
                if (v41 != -7)
                {
                  if (v40 >= a2[13])
                  {
                    v43 = 5;
                    goto LABEL_274;
                  }
                  if (v41 != -8 && v40 >= a2[14])
                  {
                    v43 = 6;
                    goto LABEL_274;
                  }
                }
              }
            }
          }
        }
      }
      v43 = -2 - v41;
LABEL_274:
      LODWORD(v159) = v43;
LABEL_275:
      LODWORD(v147) = cf[4];
      if (v38 < (int)v147 && (v148 = *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v38), v148 >= v9))
      {
        v149 = v38;
        v151 = -1;
        while (1)
        {
          if (v148 < v151)
          {
            v151 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
            if (!v151)
              break;
          }
          if (v148 < v151)
          {
            do
              v151 = _CIIndexSetEnumeratorNext((unsigned int *)buf);
            while (v148 < v151);
            if (!v151)
              break;
          }
          if (v148 == v151)
            *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v38++) = *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v149);
          ++v149;
          v147 = (int)cf[4];
          if (v149 < v147)
          {
            v148 = *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v149);
            if (v148 >= v9)
              continue;
          }
          goto LABEL_278;
        }
        LODWORD(v147) = cf[4];
        if ((int)v147 > (int)v149)
        {
          while (1)
          {
            v152 = *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v149);
            v153 = v8 >= v152 && v152 >= v9;
            if (!v153)
              break;
            if (++v149 >= (int)v147)
            {
              LODWORD(v149) = cf[4];
              break;
            }
          }
        }
      }
      else
      {
        LODWORD(v149) = v38;
      }
LABEL_278:
      memmove((void *)(*((_QWORD *)cf + 5) + 4 * v38), (const void *)(*((_QWORD *)cf + 5) + 4 * (int)v149), 4 * ((int)v147 - (int)v149));
      v86 = v38 - v149;
      goto LABEL_279;
    }
    *(_QWORD *)buf = 0;
    v159 = 0;
    if (v13 > 0xFFFFFFFD)
      goto LABEL_133;
    v31 = 0;
    v87 = (-2 - v13);
    v88 = a2 + 8;
    while (1)
    {
      v137 = *v88;
      if (*v88 < v9 || v137 > v8)
        goto LABEL_239;
      if (cf[5] > v137)
        goto LABEL_239;
      v139 = cf[6];
      v140 = v139 - v137;
      if (v139 < v137)
        goto LABEL_239;
      v141 = cf[4];
      if (v141 > -10)
      {
        if (v141 < 0)
        {
          if (v141 >= 0xFFFFFFFE
            || cf[8] != v137
            && (v141 == -3
             || cf[9] != v137
             && (v141 == -4
              || cf[10] != v137
              && (v141 == -5
               || cf[11] != v137
               && (v141 == -6 || cf[12] != v137 && (v141 == -7 || cf[13] != v137 && (v141 == -8 || cf[14] != v137)))))))
          {
            goto LABEL_239;
          }
        }
        else
        {
          v142 = v12;
          v143 = binarySearchMap((uint64_t)cf, *v88);
          v144 = cf[9];
          if (v143 < v144 || (v145 = 0, v146 = cf[8], v143 < v146) && v143 >= v146 + v144 - cf[4])
            v145 = *(_DWORD *)(*((_QWORD *)cf + 5) + 4 * v143) == v137;
          if (v145 == (CFGetTypeID(cf) == v142[232]))
          {
            v12 = v142;
            goto LABEL_239;
          }
          v137 = *v88;
          v12 = v142;
        }
      }
      else if (((*(_DWORD *)(*((_QWORD *)cf + 5) + 4 * (v140 >> 5)) >> v140) & 1) == 0)
      {
        goto LABEL_239;
      }
      *(_DWORD *)&buf[4 * v31++] = v137;
LABEL_239:
      ++v88;
      if (!--v87)
        goto LABEL_134;
    }
  }
  v75 = (-2 - v14);
  if (v14 > 0xFFFFFFFD)
  {
    v76 = 0;
    goto LABEL_215;
  }
  v76 = 0;
  v77 = cf + 8;
  v156 = -2 - v14;
  do
  {
    v114 = *v77;
    if (*v77 < v9 || v114 > v8)
      goto LABEL_181;
    if (a2[5] <= v114)
    {
      v116 = a2[6];
      v117 = v116 - v114;
      if (v116 >= v114)
      {
        v118 = a2[4];
        if (v118 > -10)
        {
          if (v118 < 0)
          {
            if (v118 < 0xFFFFFFFE
              && (a2[8] == v114
               || v118 != -3
               && (a2[9] == v114
                || v118 != -4
                && (a2[10] == v114
                 || v118 != -5
                 && (a2[11] == v114
                  || v118 != -6 && (a2[12] == v114 || v118 != -7 && (a2[13] == v114 || v118 != -8 && a2[14] == v114)))))))
            {
              goto LABEL_181;
            }
          }
          else
          {
            v119 = binarySearchMap((uint64_t)a2, *v77);
            v120 = a2[9];
            if (v119 < v120 || (v121 = 0, v122 = a2[8], v119 < v122) && v119 >= v122 + v120 - a2[4])
              v121 = *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v119) == v114;
            if (v121 != (CFGetTypeID(a2) == __kCIIndexSetInvertedTypeID))
            {
              v114 = *v77;
LABEL_181:
              cf[v76++ + 8] = v114;
            }
          }
        }
        else if (((*(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * (v117 >> 5)) >> v117) & 1) != 0)
        {
          goto LABEL_181;
        }
      }
    }
    ++v77;
    --v75;
  }
  while (v75);
  v14 = cf[4];
  LODWORD(v75) = v156;
LABEL_215:
  cf[4] = v14 + v75 - v76;
}

void CIIndexSetRemoveSortedIndexes(uint64_t a1, unsigned int *a2, int a3)
{
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  signed int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _OWORD *v46;
  __int128 *v47;
  unint64_t v48;
  __int128 v49;
  int *v50;
  uint64_t v51;
  _DWORD *v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  int v85;

  if (a3 >= 1)
  {
    if (CFGetTypeID((CFTypeRef)a1) == __kCIIndexSetInvertedTypeID)
    {
      v6 = *(_DWORD *)(a1 + 16);
      if (v6 > -10
        || ((v7 = *(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 20), v8 = a3 - v6 - 10, v7 + 1 < v8)
          ? (v9 = v7 + 1)
          : (v9 = v8),
            v6 = -10 - v9,
            *(_DWORD *)(a1 + 16) = -10 - v9,
            (v9 & 0x80000000) != 0))
      {
        if (v6 >= -1)
          v10 = *(_DWORD *)(a1 + 32);
        else
          v10 = 4;
        if (v6 < -1)
          v6 = -2 - v6;
        if (v10 < v6 + a3)
          _CIIndexSetMakeSpace((unsigned int *)a1, a3, 0, 0, 0);
      }
    }
    v11 = *(int *)(a1 + 16);
    if ((int)v11 <= -10)
    {
      v12 = a3;
      while (1)
      {
        v14 = *a2++;
        v13 = v14;
        if (v14 >= *(_DWORD *)(a1 + 20))
        {
          v15 = *(_DWORD *)(a1 + 24);
          v16 = v15 >= v13;
          v17 = v15 - v13;
          if (!v16)
            return;
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * (v17 >> 5)) &= ~(1 << v17);
        }
        if (!--v12)
          return;
      }
    }
    if ((v11 & 0x80000000) != 0)
    {
      v21 = -2 - v11;
      if (v11 > 0xFFFFFFFD)
      {
        LODWORD(v24) = 0;
        v22 = 0;
      }
      else
      {
        v22 = 0;
        v23 = 0;
        LODWORD(v24) = 0;
        v25 = a1 + 32;
        do
        {
          v26 = a2[v23];
          v27 = *(_DWORD *)(v25 + 4 * (int)v24);
          if (v27 == v26)
          {
            LODWORD(v24) = v24 + 1;
            ++v23;
            ++*(_DWORD *)(a1 + 16);
          }
          else if (v27 > v26)
          {
            LODWORD(v24) = v24 + 1;
            *(_DWORD *)(v25 + 4 * v22++) = v27;
          }
          else
          {
            ++v23;
          }
        }
        while ((int)v24 < v21 && v23 < a3);
      }
      if ((int)v24 < v21)
      {
        v41 = v22;
        v24 = (int)v24;
        v42 = -2 - ((int)v24 + v11);
        if (v42 > 0xB)
        {
          v43 = 4 * v41 + a1;
          v44 = 4 * (int)v24 + a1;
          if ((unint64_t)(v43 - v44) >= 0x20)
          {
            v45 = v42 & 0xFFFFFFFFFFFFFFF8;
            v24 = (v42 & 0xFFFFFFFFFFFFFFF8) + (int)v24;
            v46 = (_OWORD *)(v43 + 48);
            v47 = (__int128 *)(v44 + 48);
            v48 = v42 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v49 = *v47;
              *(v46 - 1) = *(v47 - 1);
              *v46 = v49;
              v46 += 2;
              v47 += 2;
              v48 -= 8;
            }
            while (v48);
            if (v42 == v45)
              return;
            v41 += v45;
          }
        }
        v50 = (int *)(a1 + 4 * v24 + 32);
        v51 = v24 + v11 + 2;
        v52 = (_DWORD *)(a1 + 4 * v41 + 32);
        do
        {
          v53 = *v50++;
          *v52++ = v53;
          v16 = __CFADD__(v51++, 1);
        }
        while (!v16);
      }
    }
    else
    {
      if (CFGetTypeID((CFTypeRef)a1) == __kCIIndexSetInvertedTypeID)
      {
        if (a3 != 1)
        {
          CIIndexSetAddSortedIndexes_ArrayBackwards(a1, a2, a3);
          return;
        }
        v85 = -1;
        v18 = *a2;
        v19 = *(_DWORD *)(a1 + 16);
        if (v19)
          v20 = searchMapWithHint(a1, v18, &v85, 1);
        else
          v20 = 0;
        v73 = *(_DWORD *)(a1 + 32);
        v74 = *(int *)(a1 + 36);
        if ((_DWORD)v74 == v20)
        {
          if (v73 <= v19)
            return;
          v75 = *(_QWORD *)(a1 + 40);
        }
        else
        {
          if (v20 == v73)
          {
            if (v19 >= v20)
              return;
            v75 = *(_QWORD *)(a1 + 40);
          }
          else
          {
            v75 = *(_QWORD *)(a1 + 40);
            if (*(_DWORD *)(v75 + 4 * v20) == v18 || v73 <= v19)
              return;
          }
          if ((int)v74 >= v20)
          {
            memmove((void *)(v75 + 4 * (v20 - v19 + v73)), (const void *)(v75 + 4 * v20), 4 * ((int)v74 - v20));
          }
          else
          {
            memmove((void *)(v75 + 4 * v74), (const void *)(v75 + 4 * (v73 - v19 + v74)), 4 * (v20 - (v73 - v19 + v74)));
            v20 = v20 + v19 - v73;
          }
        }
        if (!v20 || *(_DWORD *)(v75 + 4 * v20 - 4) > v18)
        {
          *(_DWORD *)(v75 + 4 * v20) = v18;
          *(_DWORD *)(a1 + 36) = v20 + 1;
          *(_DWORD *)(a1 + 16) = v19 + 1;
          return;
        }
        v76 = __si_assert_copy_extra_268();
        v84 = v76;
LABEL_115:
        __message_assert_272((uint64_t)v76, v77, v78, v79, v80, v81, v82, v83, (char)"CIIndexSet.c");
        free(v84);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      v28 = *(int *)(a1 + 36);
      v29 = *(_DWORD *)(a1 + 16);
      if ((int)v28 > v29)
      {
        v76 = __si_assert_copy_extra_268();
        v84 = v76;
        goto LABEL_115;
      }
      LODWORD(v30) = *(_DWORD *)(a1 + 32) - v29;
      memmove((void *)(*(_QWORD *)(a1 + 40) + 4 * v30), *(const void **)(a1 + 40), 4 * v28);
      v31 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 36) = v31;
      if (v31 >= 1 && v31 + a3 > (int)((__clz(v31) ^ 0x1F) * a3))
      {
        v32 = 0;
        v33 = 0;
        while (1)
        {
          v54 = a2[v32];
          if (v54 >= *(_DWORD *)(a1 + 20))
          {
            if (v54 > *(_DWORD *)(a1 + 24))
            {
LABEL_95:
              v72 = *(_DWORD *)(a1 + 16);
              if (v33 <= v72)
                *(_DWORD *)(a1 + 36) = v33;
              else
                *(_DWORD *)(a1 + 36) = v72;
              return;
            }
            v55 = *(_QWORD *)(a1 + 40);
            v56 = *(_DWORD *)(a1 + 32);
            v57 = v56 - 1;
            LODWORD(v58) = v30;
            if ((int)(v56 - 33) < (int)v30)
            {
LABEL_80:
              v58 = (int)v58;
              v60 = v57 + 1 > (int)v58 ? v57 + 1 : v58;
              while (v58 <= v57)
              {
                v62 = *(_DWORD *)(v55 + 4 * v58++);
                if (v62 <= v54)
                {
                  v60 = v58 - 1;
                  break;
                }
              }
            }
            else
            {
              while (1)
              {
                v59 = v57 - v58;
                if (v57 < (int)v58)
                  ++v59;
                v60 = v58 + (v59 >> 1);
                v61 = *(_DWORD *)(v55 + 4 * (int)v60);
                if (v61 == v54)
                  break;
                if (v61 <= v54)
                  v57 = v60 - 1;
                else
                  LODWORD(v58) = v60 + 1;
                if ((int)v58 > v57 - 32)
                  goto LABEL_80;
              }
            }
            if (v60 < v56)
            {
              if (v60 == (_DWORD)v30)
              {
                if (*(_DWORD *)(v55 + 4 * v30) != v54)
                  goto LABEL_69;
              }
              else
              {
                memmove((void *)(v55 + 4 * v33), (const void *)(v55 + 4 * v30), 4 * (v60 - v30));
                v33 += v60 - v30;
                if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v60) != v54)
                {
                  LODWORD(v30) = v60;
                  if (v33 >= *(_DWORD *)(a1 + 32))
                  {
                    v63 = __si_assert_copy_extra_268();
                    __message_assert_272((uint64_t)v63, v64, v65, v66, v67, v68, v69, v70, (char)"CIIndexSet.c");
                    free(v63);
                    if (__valid_fs(-1))
                      v71 = 2989;
                    else
                      v71 = 3072;
                    *(_DWORD *)v71 = -559038737;
                    abort();
                  }
                  goto LABEL_69;
                }
                LODWORD(v30) = v60;
              }
              --*(_DWORD *)(a1 + 16);
              LODWORD(v30) = v30 + 1;
            }
          }
LABEL_69:
          if (++v32 == a3)
            goto LABEL_95;
        }
      }
      v34 = 0;
      LODWORD(v35) = 0;
      do
      {
        v36 = a2[v34];
        if (v36 > *(_DWORD *)(a1 + 24) || v36 < *(_DWORD *)(a1 + 20))
          break;
        if (v30 < *(_DWORD *)(a1 + 32))
        {
          v35 = (int)v35;
          v30 = v30;
          while (1)
          {
            v37 = *(_QWORD *)(a1 + 40);
            v38 = *(_DWORD *)(v37 + 4 * v30);
            if (v38 <= v36)
              break;
            ++v30;
            v39 = v35 + 1;
            *(_DWORD *)(v37 + 4 * v35++) = v38;
            if (v30 >= *(unsigned int *)(a1 + 32))
            {
              LODWORD(v35) = v39;
              goto LABEL_42;
            }
          }
          if (*(_DWORD *)(v37 + 4 * v30) == v36)
          {
            --*(_DWORD *)(a1 + 16);
            LODWORD(v30) = v30 + 1;
          }
        }
LABEL_42:
        ++v34;
      }
      while (v34 != a3);
      v40 = *(_DWORD *)(a1 + 16);
      if ((int)v35 <= v40)
        *(_DWORD *)(a1 + 36) = v35;
      else
        *(_DWORD *)(a1 + 36) = v40;
    }
  }
}

void CIIndexSetReleaseToPerThreadCache(uint64_t a1, _QWORD *a2)
{
  if (*(_DWORD *)(a1 + 16) <= 0xFFFFFFF6)
    blob_free(*(_QWORD **)(a1 + 40), *(_DWORD *)(a1 + 32), a2);
  *(_QWORD *)(a1 + 40) = a2[1];
  *(_DWORD *)(a1 + 32) = -2;
  a2[1] = a1;
}

_DWORD *CIIndexSetCreateWithRangeWithCache(unsigned int a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  _QWORD *v6;
  uint64_t v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (a1 <= 1)
    v3 = 1;
  else
    v3 = a1;
  if (v3 > a2)
  {
    v9 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16, (char)"CIIndexSet.c");
    free(v9);
    if (__valid_fs(-1))
      v17 = 2989;
    else
      v17 = 3072;
    *(_DWORD *)v17 = -559038737;
    abort();
  }
  if (a3)
  {
    v6 = *(_QWORD **)a3;
    if (*(_QWORD *)a3)
    {
      if (*v6 != 2882339105)
      {
        v18 = __si_assert_copy_extra_268();
        __message_assert_272((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25, (char)"CIIndexSet.c");
        free(v18);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAA] = -559038737;
          abort();
        }
        goto LABEL_23;
      }
      v7 = *(_QWORD *)(a3 + 8);
      if (v7 || (v7 = cicachelistdequeue((uint64_t)(v6 + 1), 20)) != 0)
      {
        *(_QWORD *)(a3 + 8) = *(_QWORD *)(v7 + 40);
        *(_DWORD *)(v7 + 16) = -2;
        *(_DWORD *)(v7 + 20) = v3;
        *(_DWORD *)(v7 + 24) = a2;
        *(_QWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        if (CIIndexSetGetTypeID_onceToken != -1)
          dispatch_once(&CIIndexSetGetTypeID_onceToken, &__block_literal_global_4339);
        _CFRuntimeSetInstanceTypeID();
        if (*(_DWORD *)(v7 + 20) <= *(_DWORD *)(v7 + 24))
          return (_DWORD *)v7;
        v26 = __si_assert_copy_extra_268();
        __message_assert_272((uint64_t)v26, v27, v28, v29, v30, v31, v32, v33, (char)"CIIndexSet.c");
        free(v26);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
LABEL_23:
        MEMORY[0xC00] = -559038737;
        abort();
      }
    }
  }
  return CIIndexSetCreateWithRange(v3, a2, 1);
}

uint64_t CIIndexSetAddSortedIndexes_ArrayBackwards(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t result;
  unsigned int v7;
  signed int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  signed int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  void *v34;
  const void *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;

  result = binarySearchMap(a1, *a2);
  v7 = result;
  v8 = *(_DWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 32);
  if (v9 == v8)
  {
    v9 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v10 = *(int *)(a1 + 36);
    if ((_DWORD)v10 == (_DWORD)result)
      goto LABEL_5;
    v36 = *(_QWORD *)(a1 + 40);
    if ((int)v10 >= (int)result)
    {
      result = (uint64_t)memmove((void *)(v36 + 4 * (v9 - v8 + result)), (const void *)(v36 + 4 * (int)result), 4 * ((int)v10 - (int)result));
      v9 = *(_DWORD *)(a1 + 32);
      v8 = *(_DWORD *)(a1 + 16);
    }
    else
    {
      result = (uint64_t)memmove((void *)(v36 + 4 * v10), (const void *)(v36 + 4 * (v10 + v9 - v8)), 4 * (result - (v10 + v9 - v8)));
      v9 = *(_DWORD *)(a1 + 32);
      v8 = *(_DWORD *)(a1 + 16);
      v7 = v7 - v9 + v8;
    }
  }
  *(_DWORD *)(a1 + 36) = v7;
LABEL_5:
  v11 = v9 - v8 + v7;
  v14 = v8 < 1;
  v12 = v8 + a3;
  v13 = (__clz(v8) ^ 0x1F) * a3;
  v14 = v14 || v12 <= v13;
  v15 = a3;
  if (v14)
  {
    v16 = 0;
    while (1)
    {
      v18 = a2[v16];
      if (v18 <= *(_DWORD *)(a1 + 24) && v18 >= *(_DWORD *)(a1 + 20))
      {
        if (v11 >= *(_DWORD *)(a1 + 32))
          goto LABEL_11;
        v11 = v11;
        while (1)
        {
          v19 = *(_QWORD *)(a1 + 40);
          v20 = *(_DWORD *)(v19 + 4 * v11);
          if (v20 <= v18)
            break;
          ++v11;
          v17 = v7 + 1;
          *(_DWORD *)(v19 + 4 * v7++) = v20;
          if (v11 >= *(unsigned int *)(a1 + 32))
            goto LABEL_12;
        }
        if (v20 == v18)
        {
          LODWORD(v11) = v11 + 1;
          *(_DWORD *)(v19 + 4 * v7++) = v18;
        }
        else
        {
LABEL_11:
          v17 = v7;
LABEL_12:
          v7 = v17 + 1;
          *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v17) = v18;
          ++*(_DWORD *)(a1 + 16);
        }
      }
      if (++v16 == a3)
        goto LABEL_52;
    }
  }
  v59 = a3;
  v21 = 0;
  v22 = a2 + 1;
  v23 = 1;
  while (1)
  {
    v25 = a2[v21];
    if (v25 > *(_DWORD *)(a1 + 24) || v25 < *(_DWORD *)(a1 + 20))
      goto LABEL_25;
    v26 = *(_QWORD *)(a1 + 40);
    v27 = *(_DWORD *)(a1 + 32);
    v28 = v27 - 1;
    LODWORD(v29) = v11;
    if ((int)(v27 - 33) < (int)v11)
    {
LABEL_36:
      v29 = (int)v29;
      v24 = v28 + 1 > (int)v29 ? v28 + 1 : (int)v29;
      while (v29 <= v28)
      {
        v32 = *(_DWORD *)(v26 + 4 * v29++);
        if (v32 <= v25)
        {
          v24 = v29 - 1;
          break;
        }
      }
    }
    else
    {
      while (1)
      {
        v30 = v28 - v29;
        if (v28 < (int)v29)
          ++v30;
        v24 = (v29 + (v30 >> 1));
        v31 = *(_DWORD *)(v26 + 4 * (int)v24);
        if (v31 == v25)
          break;
        if (v31 <= v25)
          v28 = v24 - 1;
        else
          LODWORD(v29) = v24 + 1;
        if ((int)v29 > v28 - 32)
          goto LABEL_36;
      }
    }
    if (v24 < v27 && v25 == *(_DWORD *)(v26 + 4 * v24))
      goto LABEL_25;
    ++*(_DWORD *)(a1 + 16);
    v33 = v24 - v11;
    if ((_DWORD)v24 != (_DWORD)v11)
      break;
    v24 = v11;
LABEL_24:
    *(_DWORD *)(v26 + 4 * v7++) = v25;
    v11 = v24;
LABEL_25:
    ++v21;
    ++v23;
    ++v22;
    if (v21 == v15)
      goto LABEL_52;
  }
  v34 = (void *)(v26 + 4 * v7);
  v35 = (const void *)(v26 + 4 * v11);
  if ((_DWORD)v24 != v27)
  {
    result = (uint64_t)memmove(v34, v35, 4 * (v24 - v11));
    v7 += v33;
    v26 = *(_QWORD *)(a1 + 40);
    goto LABEL_24;
  }
  v37 = v27 - v11;
  result = (uint64_t)memmove(v34, v35, 4 * (v27 - v11));
  v38 = v37 + v7;
  if ((signed int)(v37 + v7) > *(_DWORD *)(a1 + 16))
  {
    v51 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v51, v52, v53, v54, v55, v56, v57, v58, (char)"CIIndexSet.c");
    free(v51);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v7 = v38 + 1;
  *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v38) = v25;
  if ((int)v21 + 1 < v59)
  {
    do
    {
      v40 = *v22++;
      v39 = v40;
      if (v40 <= *(_DWORD *)(a1 + 24) && v39 >= *(_DWORD *)(a1 + 20))
      {
        v41 = *(_QWORD *)(a1 + 40);
        if (v39 >= *(_DWORD *)(v41 + 4 * (v7 - 1)))
        {
          v42 = __si_assert_copy_extra_268();
          __message_assert_272((uint64_t)v42, v43, v44, v45, v46, v47, v48, v49, (char)"CIIndexSet.c");
          free(v42);
          if (__valid_fs(-1))
            v50 = 2989;
          else
            v50 = 3072;
          *(_DWORD *)v50 = -559038737;
          abort();
        }
        *(_DWORD *)(v41 + 4 * v7++) = v39;
        ++*(_DWORD *)(a1 + 16);
      }
      --v15;
    }
    while (v23 != v15);
  }
LABEL_52:
  *(_DWORD *)(a1 + 36) = v7;
  return result;
}

void _CIIndexSetClearRange(int *cf, unsigned int a2, unsigned int a3)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 *v40;
  _OWORD *v41;
  uint64_t v42;
  __int128 v43;
  int *v44;
  int *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  int v55;

  if (cf[6] >= a3)
    v4 = a3;
  else
    v4 = cf[6];
  if (cf[5] <= a2)
    v5 = a2;
  else
    v5 = cf[5];
  v6 = v4 - v5;
  if (v4 == v5)
  {
    _CIIndexSetRemoveIndex(cf, v4);
    return;
  }
  if (v4 >= v5)
  {
    if (CFGetTypeID(cf) == __kCIIndexSetInvertedTypeID)
    {
      v7 = cf[4];
      if (v7 > -10
        || ((v8 = cf[6] - cf[5], v9 = v6 - v7 - 9, v8 + 1 < v9) ? (v10 = v8 + 1) : (v10 = v9),
            v7 = -10 - v10,
            cf[4] = -10 - v10,
            (v10 & 0x80000000) != 0))
      {
        v11 = v6 + 1;
        if (v7 >= -1)
          v12 = cf[8];
        else
          v12 = 4;
        if (v7 < -1)
          v7 = -2 - v7;
        if (v12 < v7 + v11)
          _CIIndexSetMakeSpace((unsigned int *)cf, v11, 0, 0, 0);
      }
    }
    v13 = cf[4];
    if (v13 <= -10)
    {
      v14 = cf[6];
      v15 = v14 - v4;
      v16 = (v14 - v4) >> 5;
      v17 = v14 - v5;
      v18 = v17 >> 5;
      v19 = v17 & 0x1F;
      v20 = masks[v15 & 0x1F];
      if (v16 == v18)
      {
        v21 = v20 | ~masks[v19 + 1];
        v22 = *((_QWORD *)cf + 5);
        v18 = v16;
      }
      else
      {
        v22 = *((_QWORD *)cf + 5);
        *(_DWORD *)(v22 + 4 * v16) &= v20;
        if (v16 + 1 < v18)
          bzero((void *)(v22 + ((v15 >> 3) & 0x1FFFFFFC) + 4), 4 * (v18 - v16 - 2) + 4);
        v21 = ~masks[v19 + 1];
      }
      *(_DWORD *)(v22 + 4 * v18) &= v21;
      return;
    }
    if ((v13 & 0x80000000) == 0)
    {
      if (CFGetTypeID(cf) != __kCIIndexSetInvertedTypeID)
      {
        CIIndexSetClearRange_Array((uint64_t)cf, v5, v4);
        return;
      }
      v55 = -1;
      if (v5)
        v23 = v5 - 1;
      else
        v23 = 0;
      v24 = searchMapWithHint((uint64_t)cf, v23, &v55, 1);
      v25 = v24;
      v26 = cf[4];
      v27 = cf[8];
      if (v27 != v26)
      {
        v28 = cf[9];
        if ((_DWORD)v28 == v24)
        {
LABEL_75:
          v47 = *((_QWORD *)cf + 5);
          v48 = v25 - 1;
          if (v25 >= 33)
          {
            LODWORD(v49) = 0;
            while (1)
            {
              v50 = v48 - v49;
              if (v48 < (int)v49)
                ++v50;
              v51 = v49 + (v50 >> 1);
              v52 = *(_DWORD *)(v47 + 4 * v51);
              if (v52 == v4)
                break;
              if (v52 <= v4)
                v48 = v51 - 1;
              else
                LODWORD(v49) = v51 + 1;
              if ((int)v49 > v48 - 32)
              {
                v49 = (int)v49;
                goto LABEL_86;
              }
            }
          }
          else
          {
            v49 = 0;
LABEL_86:
            if (v48 + 1 > v49)
              v51 = v48 + 1;
            else
              v51 = v49;
            while (v49 <= v48)
            {
              v53 = *(_DWORD *)(v47 + 4 * v49++);
              if (v53 <= v4)
              {
                v51 = v49 - 1;
                break;
              }
            }
          }
          if (v6 + 1 > v25 - v51)
          {
            cf[4] -= v25 - v51;
            cf[9] = v51;
            v54 = 4 * v51;
            do
            {
              *(_DWORD *)(*((_QWORD *)cf + 5) + v54) = v4;
              ++cf[4];
              ++cf[9];
              --v4;
              v54 += 4;
            }
            while (v4 >= v5);
          }
          return;
        }
        v29 = *((_QWORD *)cf + 5);
        if ((int)v28 >= v24)
        {
          memmove((void *)(v29 + 4 * (v27 - v26 + v24)), (const void *)(v29 + 4 * v24), 4 * ((int)v28 - v24));
        }
        else
        {
          memmove((void *)(v29 + 4 * v28), (const void *)(v29 + 4 * (v28 + v27 - v26)), 4 * (v24 - (v28 + v27 - v26)));
          v25 = v25 - cf[8] + cf[4];
        }
      }
      cf[9] = v25;
      goto LABEL_75;
    }
    v30 = (-2 - v13);
    v31 = (unsigned int *)(cf + 8);
    if (v13 > 0xFFFFFFFD || *v31 <= v4)
    {
      LODWORD(v32) = 0;
    }
    else
    {
      if (v13 == -3)
      {
LABEL_43:
        LODWORD(v32) = -2 - v13;
LABEL_50:
        cf[4] = -(int)v32 - 2;
        return;
      }
      if (cf[9] <= v4)
      {
        LODWORD(v32) = 1;
      }
      else
      {
        if (v13 == -4)
          goto LABEL_43;
        if (cf[10] <= v4)
        {
          LODWORD(v32) = 2;
        }
        else
        {
          if (v13 == -5)
            goto LABEL_43;
          if (cf[11] <= v4)
          {
            LODWORD(v32) = 3;
          }
          else
          {
            if (v13 == -6)
              goto LABEL_43;
            if (cf[12] <= v4)
            {
              LODWORD(v32) = 4;
            }
            else
            {
              if (v13 == -7)
                goto LABEL_43;
              if (cf[13] <= v4)
              {
                LODWORD(v32) = 5;
              }
              else
              {
                if (v13 == -8)
                  goto LABEL_43;
                LODWORD(v32) = -2 - v13;
                if (cf[14] > v4)
                  goto LABEL_50;
                LODWORD(v32) = 6;
              }
            }
          }
        }
      }
    }
    LODWORD(v33) = v32;
    if ((int)v32 < (int)v30)
    {
      v33 = v32;
      while (v31[v33] >= v5)
      {
        if (v30 == ++v33)
          goto LABEL_50;
      }
    }
    cf[4] = v13 - v32 + v33;
    if ((int)v33 < (int)v30)
    {
      v32 = v32;
      v34 = v33;
      v35 = (-3 - (v33 + v13));
      if (v35 >= 0xB)
      {
        v36 = &cf[v32];
        v37 = &cf[v33];
        if ((unint64_t)((char *)v36 - (char *)v37) >= 0x20)
        {
          v38 = v35 + 1;
          v39 = (v35 + 1) & 0x1FFFFFFF8;
          v34 += v39;
          v40 = (__int128 *)(v37 + 12);
          v41 = v36 + 12;
          v42 = v39;
          do
          {
            v43 = *v40;
            *(v41 - 1) = *(v40 - 1);
            *v41 = v43;
            v40 += 2;
            v41 += 2;
            v42 -= 8;
          }
          while (v42);
          if (v38 == v39)
            return;
          v32 = v39 | v32;
        }
      }
      v44 = &cf[v34 + 8];
      v45 = &cf[v32 + 8];
      do
      {
        v46 = *v44++;
        *v45++ = v46;
        LODWORD(v34) = v34 + 1;
      }
      while ((int)v30 > (int)v34);
    }
  }
}

void *SIResultQueueCreate(int a1)
{
  void *v2;
  char *v3;

  v2 = malloc_type_calloc(1uLL, 0x58uLL, 0x10A00408576B1E0uLL);
  *((_BYTE *)v2 + 12) = 0;
  atomic_store(1u, (unsigned int *)v2 + 2);
  v3 = (char *)malloc_type_calloc(1uLL, 0x90uLL, 0x1090040E44D38CFuLL);
  *(_QWORD *)v3 = "simple queue";
  pthread_mutex_init((pthread_mutex_t *)(v3 + 8), 0);
  pthread_cond_init((pthread_cond_t *)(v3 + 72), 0);
  *((_DWORD *)v3 + 31) = 0;
  *((_DWORD *)v3 + 32) = 0;
  *((_DWORD *)v3 + 30) = 4;
  *((_QWORD *)v3 + 17) = malloc_type_calloc(4uLL, 8uLL, 0x80040B8603338uLL);
  *(_QWORD *)v2 = v3;
  *((_QWORD *)v2 + 6) = 0;
  *((_DWORD *)v2 + 20) = a1;
  return v2;
}

void processNodes(const __CFSet *a1, int a2, char a3, int a4, int a5, uint64_t a6)
{
  CFIndex Count;
  size_t v13;
  char *v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unsigned int v24;
  CFIndex v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  const char *v36;
  char *v37;
  const char *v38;
  char *v39;
  const char *v40;
  _QWORD block[7];
  int v42;
  int v43;
  int v44;
  char v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  Count = CFSetGetCount(a1);
  MEMORY[0x1E0C80A78](Count);
  v14 = (char *)block - ((v13 + 15) & 0xFFFFFFFF0);
  bzero(v14, v13);
  CFSetGetValues(a1, (const void **)v14);
  if ((_DWORD)Count)
  {
    if (Count > 1uLL)
    {
      v15 = Count - (unint64_t)(Count & 1);
      v16 = (uint64_t *)(v14 + 8);
      v17 = v15;
      do
      {
        v18 = *v16;
        *(_BYTE *)(*(v16 - 1) + 32) = 0;
        *(_BYTE *)(v18 + 32) = 0;
        v16 += 2;
        v17 -= 2;
      }
      while (v17);
      if ((Count & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v15 = 0;
    }
    v19 = Count - v15;
    v20 = &v14[8 * v15];
    do
    {
      v21 = *(_QWORD *)v20;
      v20 += 8;
      *(_BYTE *)(v21 + 32) = 0;
      --v19;
    }
    while (v19);
    goto LABEL_9;
  }
  do
  {
LABEL_9:
    if ((_DWORD)Count)
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = Count;
      do
      {
        v26 = *(_QWORD *)&v14[8 * v24];
        if (*(_BYTE *)(v26 + 32))
        {
          v25 = (v25 - 1);
          if (v24 < v25)
          {
            v27 = 8 * v25;
            *(_QWORD *)&v14[8 * v24] = *(_QWORD *)&v14[v27];
            *(_QWORD *)&v14[v27] = v26;
          }
        }
        else
        {
          v28 = *(_DWORD *)(v26 + 48);
          v29 = (v28 - 4) < 4 || v28 == 9;
          if (v29 && (v30 = *(unsigned int *)(v26 + 96), (_DWORD)v30))
          {
            v31 = *(_QWORD *)(v26 + 72);
            while (*(_BYTE *)(*(_QWORD *)v31 + 32))
            {
              v31 += 8;
              if (!--v30)
                goto LABEL_26;
            }
            v22 = 1;
          }
          else
          {
LABEL_26:
            if (v23 < v24)
            {
              v32 = 8 * v23;
              v33 = *(_QWORD *)&v14[v32];
              *(_QWORD *)&v14[v32] = v26;
              *(_QWORD *)&v14[8 * v24] = v33;
            }
            ++v23;
          }
          ++v24;
        }
      }
      while (v24 < v25);
    }
    else
    {
      v25 = 0;
      v23 = 0;
      v22 = 0;
    }
    if (Count < v25)
    {
      v34 = __si_assert_copy_extra_268();
      v35 = v34;
      v36 = "";
      if (v34)
        v36 = v34;
      __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexQuery.c", 3112, "oldNodeCount >= nodeCount", v36);
LABEL_45:
      free(v35);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    if ((_DWORD)v25 && !v23)
    {
      v37 = __si_assert_copy_extra_268();
      v35 = v37;
      v38 = "";
      if (v37)
        v38 = v37;
      __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexQuery.c", 3113, "processCount || nodeCount == 0", v38);
      goto LABEL_45;
    }
    v46 = 0;
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __processNodes_block_invoke;
    block[3] = &__block_descriptor_tmp_24_4559;
    block[4] = a6;
    block[5] = v14;
    v45 = a3;
    v42 = a4;
    v43 = a5;
    v44 = a2;
    block[6] = &v46;
    dispatch_apply(v23, 0, block);
    if ((v46 & 1) != 0)
    {
      v39 = __si_assert_copy_extra_268();
      v35 = v39;
      v40 = "";
      if (v39)
        v40 = v39;
      __message_assert("%s:%u: failed assertion '%s' %s ", "ContentIndexQuery.c", 3137, "__c11_atomic_load(didAssertPtr, memory_order_relaxed)==0", v40);
      goto LABEL_45;
    }
    Count = v25;
  }
  while ((((_DWORD)v25 != 0) & v22) != 0);
}

void db_obj_subiter_release(unint64_t *a1, char a2, __n128 a3)
{
  unint64_t v3;
  _QWORD **v6;
  _QWORD *v7;
  size_t *v8;
  _QWORD *v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  OSQueueHead *v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v20;
  unint64_t v21;
  int v22;
  NSObject *v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  _DWORD *v31;
  _QWORD **v32;
  _QWORD *v33;
  _QWORD *v34;
  _DWORD *v35;
  NSObject *v36;
  int v37;
  NSObject *v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  uint8_t buf[4];
  unint64_t v43;
  __int16 v44;
  _BYTE v45[10];
  __int16 v46;
  unint64_t v47;
  __int16 v48;
  unint64_t v49;
  __int16 v50;
  unint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  if ((unint64_t *)(*a1 + 80) != a1)
  {
    v6 = (_QWORD **)a1[12];
    if (v6)
    {
      v7 = *v6;
      *v6 = 0;
      *(_QWORD *)(a1[12] + 8) = a1[12] + 24;
      if (v7)
      {
        v8 = (size_t *)MEMORY[0x1E0C85AD8];
        do
        {
          while (1)
          {
            v9 = v7;
            v7 = (_QWORD *)*v7;
            v10 = v9[2] - (_QWORD)v9;
            if (v10 == 0x100000)
              break;
            if (*v8 == v10)
            {
              v16 = node_alloc();
              v16[1] = v9;
              madvise(v9, *v8, 5);
              do
                v17 = __ldxr(qword_1EDBBE0C0);
              while (__stxr(v17 - v10, qword_1EDBBE0C0));
              v14 = &stru_1EDBBE030;
              v13 = v16;
              goto LABEL_17;
            }
            do
LABEL_19:
              v18 = __ldxr(qword_1EDBBE0C0);
            while (__stxr(v18 - v10, qword_1EDBBE0C0));
            munmap(v9, v10);
            if (!v7)
              goto LABEL_21;
          }
          madvise(v9, 0x100000uLL, 5);
          do
            v11 = __ldxr(qword_1EDBBE0C0);
          while (__stxr(v11 - 0x100000, qword_1EDBBE0C0));
          do
            v12 = __ldaxr(qword_1EDBBE050);
          while (__stlxr(v12 + 1, qword_1EDBBE050));
          if (v12 >= 5)
          {
            do
              v15 = __ldaxr(qword_1EDBBE050);
            while (__stlxr(v15 - 1, qword_1EDBBE050));
            goto LABEL_19;
          }
          v13 = node_alloc();
          v13[1] = v9;
          v14 = &stru_1EDBBE040;
LABEL_17:
          OSAtomicEnqueue(v14, v13, 0);
        }
        while (v7);
      }
LABEL_21:
      os_unfair_lock_lock((os_unfair_lock_t)&slabQueueLock);
      *(_QWORD *)(a1[12] + 24) = *(_QWORD *)(v3 + 64);
      *(_QWORD *)(v3 + 64) = a1[12];
      os_unfair_lock_unlock((os_unfair_lock_t)&slabQueueLock);
      a1[12] = 0;
    }
    if ((a2 & 1) == 0 && a1[10] < a1[7])
    {
      if (dword_1EF19FC90 >= 5)
      {
        v37 = *__error();
        v38 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          v39 = a1[7];
          v40 = a1[10];
          *(_DWORD *)buf = 134218240;
          v43 = v39;
          v44 = 2048;
          *(_QWORD *)v45 = v40;
          _os_log_impl(&dword_1B8270000, v38, OS_LOG_TYPE_DEFAULT, "Expected %ld, found %ld", buf, 0x16u);
        }
        *__error() = v37;
      }
      if (atomic_load(a1 + 8))
      {
        v20 = 0;
        a3.n128_u64[0] = 134219520;
        do
        {
          if ((*(_BYTE *)(*(_QWORD *)(*a1 + 32) + 32 * (v20 + a1[1]) + 24) & 1) == 0 && dword_1EF19FC90 >= 5)
          {
            v41 = a3;
            v22 = *__error();
            v23 = _SILogForLogForCategory(1);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              v24 = a1[1];
              v25 = (uint64_t *)(*(_QWORD *)(*a1 + 32) + 32 * (v20 + v24));
              v26 = *v25;
              v27 = v25[2];
              v28 = a1[7];
              v29 = *(_QWORD *)(*a1 + 136);
              *(_DWORD *)buf = v41.n128_u32[0];
              v43 = v26;
              v44 = 1024;
              *(_DWORD *)v45 = v27 >> 2;
              *(_WORD *)&v45[4] = 1024;
              *(_DWORD *)&v45[6] = v27 & 3;
              v46 = 2048;
              v47 = v20;
              v48 = 2048;
              v49 = v28;
              v50 = 2048;
              v51 = v24;
              v52 = 2048;
              v53 = v29;
              _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "Missing item: %lld page:%d type %d. Lookup %ld of %ld. startIndex %ld of %ld", buf, 0x40u);
            }
            *__error() = v22;
            a3 = v41;
          }
          ++v20;
          v21 = atomic_load(a1 + 8);
        }
        while (v20 < v21);
      }
    }
    v30 = a1[11];
    if (v30)
      dispatch_sync(v30, &__block_literal_global_76);
    v31 = (_DWORD *)a1[2];
    if (v31)
    {
      page_release(*(_QWORD *)(*a1 + 24), v31, *((_DWORD *)a1 + 10), 0x18u, 0);
      *((_DWORD *)a1 + 10) = -1;
      a1[2] = 0;
      a1[3] = 0;
    }
    v32 = (_QWORD **)a1[12];
    if (v32)
    {
      v33 = *v32;
      *v32 = 0;
      *(_QWORD *)(a1[12] + 8) = a1[12] + 24;
      if (v33)
      {
        do
        {
          v34 = (_QWORD *)*v33;
          munmap(v33, v33[2] - (_QWORD)v33);
          v33 = v34;
        }
        while (v34);
      }
    }
    v35 = (_DWORD *)a1[4];
    if (v35)
    {
      page_release(*(_QWORD *)(*a1 + 24), v35, *((_DWORD *)a1 + 11), 0x18u, 0);
      *((_DWORD *)a1 + 11) = -1;
      a1[4] = 0;
    }
    v36 = a1[11];
    if (v36)
      dispatch_release(v36);
    free(a1);
  }
}

void db_obj_iter_release(uint64_t a1)
{
  char *v2;
  void *v3;
  const void *v4;
  const void *v5;
  _QWORD *v6;
  size_t *i;
  _QWORD *v8;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  OSQueueHead *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  size_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  OSQueueHead *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  const char *v31;

  if (*(_DWORD *)a1 != 3506)
  {
    v29 = __si_assert_copy_extra_268();
    v30 = v29;
    if (v29)
      v31 = v29;
    else
      v31 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 703, v31);
    free(v30);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  db2_obj_iter_suspend((_DWORD *)a1);
  v2 = *(char **)(a1 + 8);
  if (v2)
    fd_release(v2);
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v4 = *(const void **)(a1 + 48);
  if (v4)
  {
    _Block_release(v4);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v5 = *(const void **)(a1 + 40);
  if (v5)
  {
    _Block_release(v5);
    *(_QWORD *)(a1 + 40) = 0;
  }
  v6 = *(_QWORD **)(a1 + 64);
  for (i = (size_t *)MEMORY[0x1E0C85AD8]; v6; v6 = *(_QWORD **)(a1 + 64))
  {
    *(_QWORD *)(a1 + 64) = v6[3];
    do
    {
      while (1)
      {
        v8 = v6;
        v6 = (_QWORD *)*v6;
        v9 = v8[2] - (_QWORD)v8;
        if (v9 != 0x100000)
          break;
        madvise(v8, 0x100000uLL, 5);
        do
          v10 = __ldxr(qword_1EDBBE0C0);
        while (__stxr(v10 - 0x100000, qword_1EDBBE0C0));
        do
          v11 = __ldaxr(qword_1EDBBE050);
        while (__stlxr(v11 + 1, qword_1EDBBE050));
        if (v11 >= 5)
        {
          do
            v14 = __ldaxr(qword_1EDBBE050);
          while (__stlxr(v14 - 1, qword_1EDBBE050));
          goto LABEL_26;
        }
        v12 = node_alloc();
        v12[1] = v8;
        v13 = &stru_1EDBBE040;
LABEL_24:
        OSAtomicEnqueue(v13, v12, 0);
        if (!v6)
          goto LABEL_28;
      }
      if (*i == v9)
      {
        v15 = node_alloc();
        v15[1] = v8;
        madvise(v8, *i, 5);
        do
          v16 = __ldxr(qword_1EDBBE0C0);
        while (__stxr(v16 - v9, qword_1EDBBE0C0));
        v13 = &stru_1EDBBE030;
        v12 = v15;
        goto LABEL_24;
      }
      do
LABEL_26:
        v17 = __ldxr(qword_1EDBBE0C0);
      while (__stxr(v17 - v9, qword_1EDBBE0C0));
      munmap(v8, v9);
    }
    while (v6);
LABEL_28:
    ;
  }
  v18 = *(_QWORD **)(a1 + 176);
  while (v18)
  {
    while (1)
    {
      v19 = v18;
      v18 = (_QWORD *)*v18;
      v20 = v19[2] - (_QWORD)v19;
      if (v20 == 0x100000)
        break;
      if (*i == v20)
      {
        v26 = node_alloc();
        v26[1] = v19;
        madvise(v19, *i, 5);
        do
          v27 = __ldxr(qword_1EDBBE0C0);
        while (__stxr(v27 - v20, qword_1EDBBE0C0));
        v24 = &stru_1EDBBE030;
        v23 = v26;
        goto LABEL_42;
      }
      do
LABEL_44:
        v28 = __ldxr(qword_1EDBBE0C0);
      while (__stxr(v28 - v20, qword_1EDBBE0C0));
      munmap(v19, v20);
      if (!v18)
        goto LABEL_46;
    }
    madvise(v19, 0x100000uLL, 5);
    do
      v21 = __ldxr(qword_1EDBBE0C0);
    while (__stxr(v21 - 0x100000, qword_1EDBBE0C0));
    do
      v22 = __ldaxr(qword_1EDBBE050);
    while (__stlxr(v22 + 1, qword_1EDBBE050));
    if (v22 >= 5)
    {
      do
        v25 = __ldaxr(qword_1EDBBE050);
      while (__stlxr(v25 - 1, qword_1EDBBE050));
      goto LABEL_44;
    }
    v23 = node_alloc();
    v23[1] = v19;
    v24 = &stru_1EDBBE040;
LABEL_42:
    OSAtomicEnqueue(v24, v23, 0);
  }
LABEL_46:
  dispatch_release(*(dispatch_object_t *)(a1 + 168));
  free((void *)a1);
}

void *node_alloc()
{
  void *v0;
  unint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;

  v0 = OSAtomicDequeue(&slab_cache, 0);
  if (!v0)
  {
    os_unfair_lock_lock(&node_alloc_node_lock);
    v0 = OSAtomicDequeue(&slab_cache, 0);
    if (!v0)
    {
      v1 = *MEMORY[0x1E0C85AD8];
      v2 = (char *)malloc_type_malloc(*MEMORY[0x1E0C85AD8], 0xBFCC7F5uLL);
      v0 = v2;
      if (v1 >= 0x20)
      {
        v3 = (v1 >> 4) - 1;
        v4 = v2 + 16;
        do
        {
          OSAtomicEnqueue(&slab_cache, v4, 0);
          v4 += 16;
          --v3;
        }
        while (v3);
      }
    }
    os_unfair_lock_unlock(&node_alloc_node_lock);
  }
  return v0;
}

_DWORD *db2_obj_iter_suspend(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  _DWORD *v3;
  unsigned int v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  unsigned int v9;
  int v10;
  int v11;

  if (result)
  {
    v1 = result;
    if (!*((_BYTE *)result + 74))
    {
      v2 = *((_QWORD *)result + 3);
      if (!*((_BYTE *)result + 76))
        db2_string_table_unlock(*((_QWORD *)result + 3));
      dispatch_sync(*((dispatch_queue_t *)v1 + 21), &__block_literal_global_74);
      v3 = (_DWORD *)*((_QWORD *)v1 + 12);
      if (v3)
      {
        if (*((_BYTE *)v1 + 73))
          v4 = 24;
        else
          v4 = 16;
        page_release(*(_QWORD *)(*((_QWORD *)v1 + 10) + 24), v3, v1[30], v4, 0);
        v1[30] = -1;
        *((_QWORD *)v1 + 12) = 0;
        *((_QWORD *)v1 + 13) = 0;
      }
      v5 = (_QWORD **)*((_QWORD *)v1 + 22);
      if (v5)
      {
        v6 = *v5;
        *v5 = 0;
        *(_QWORD *)(*((_QWORD *)v1 + 22) + 8) = *((_QWORD *)v1 + 22) + 24;
        if (v6)
        {
          do
          {
            v7 = (_QWORD *)*v6;
            munmap(v6, v6[2] - (_QWORD)v6);
            v6 = v7;
          }
          while (v7);
        }
      }
      v8 = (_DWORD *)*((_QWORD *)v1 + 14);
      if (v8)
      {
        if (*((_BYTE *)v1 + 73))
          v9 = 24;
        else
          v9 = 16;
        page_release(*(_QWORD *)(*((_QWORD *)v1 + 10) + 24), v8, v1[31], v9, 0);
        v1[31] = -1;
        *((_QWORD *)v1 + 14) = 0;
      }
      *((_WORD *)v1 + 37) = 257;
      if (!*((_BYTE *)v1 + 76))
      {
        v10 = pthread_mutex_lock((pthread_mutex_t *)(v2 + 584));
        v11 = *(_DWORD *)(v2 + 780) - 1;
        *(_DWORD *)(v2 + 780) = v11;
        if (!v11)
          db_rwlock_wakeup(v2 + 584, 0, 0);
        pthread_mutex_unlock((pthread_mutex_t *)(v2 + 584));
        if (v10)
          sdb2_die(v2, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 12944);
      }
      result = _fd_release_fd(*((_DWORD **)v1 + 1), v1[1], 0, *((_QWORD *)v1 + 2));
      v1[1] = -1;
    }
  }
  return result;
}

uint64_t db2_string_table_unlock(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;

  v2 = *(_QWORD *)(a1 + 912);
  if ((*(_BYTE *)(a1 + 804) & 0x14) == 0)
  {
    pthread_rwlock_unlock(*(pthread_rwlock_t **)(v2 + 16));
    pthread_rwlock_unlock(*(pthread_rwlock_t **)(*(_QWORD *)(a1 + 904) + 16));
    pthread_rwlock_unlock(*(pthread_rwlock_t **)(*(_QWORD *)(a1 + 896) + 16));
    pthread_rwlock_unlock(*(pthread_rwlock_t **)(*(_QWORD *)(a1 + 888) + 16));
    pthread_rwlock_unlock(*(pthread_rwlock_t **)(*(_QWORD *)(a1 + 880) + 16));
    result = *(_QWORD *)(a1 + 920);
    if (!result)
      return result;
    goto LABEL_48;
  }
  if (v2)
  {
    v3 = *(_DWORD *)(v2 + 216);
    switch(v3)
    {
      case -270471200:
        _data_map_ext_unlock(v2);
        break;
      case 1684300900:
        _data_map64_unlock(v2);
        v4 = *(_QWORD *)(a1 + 904);
        if (!v4)
          goto LABEL_20;
        goto LABEL_12;
      case 842150450:
        _data_map32_unlock(v2);
        v4 = *(_QWORD *)(a1 + 904);
        if (!v4)
          goto LABEL_20;
        goto LABEL_12;
    }
  }
  v4 = *(_QWORD *)(a1 + 904);
  if (!v4)
    goto LABEL_20;
LABEL_12:
  v6 = *(_DWORD *)(v4 + 216);
  switch(v6)
  {
    case -270471200:
      _data_map_ext_unlock(v4);
      break;
    case 1684300900:
      _data_map64_unlock(v4);
      v7 = *(_QWORD *)(a1 + 896);
      if (!v7)
        goto LABEL_29;
      goto LABEL_21;
    case 842150450:
      _data_map32_unlock(v4);
      v7 = *(_QWORD *)(a1 + 896);
      if (!v7)
        goto LABEL_29;
      goto LABEL_21;
  }
LABEL_20:
  v7 = *(_QWORD *)(a1 + 896);
  if (!v7)
    goto LABEL_29;
LABEL_21:
  v8 = *(_DWORD *)(v7 + 216);
  switch(v8)
  {
    case -270471200:
      _data_map_ext_unlock(v7);
      break;
    case 1684300900:
      _data_map64_unlock(v7);
      v9 = *(_QWORD *)(a1 + 888);
      if (!v9)
        goto LABEL_38;
      goto LABEL_30;
    case 842150450:
      _data_map32_unlock(v7);
      v9 = *(_QWORD *)(a1 + 888);
      if (!v9)
        goto LABEL_38;
      goto LABEL_30;
  }
LABEL_29:
  v9 = *(_QWORD *)(a1 + 888);
  if (!v9)
    goto LABEL_38;
LABEL_30:
  v10 = *(_DWORD *)(v9 + 216);
  switch(v10)
  {
    case -270471200:
      _data_map_ext_unlock(v9);
      break;
    case 1684300900:
      _data_map64_unlock(v9);
      v11 = *(_QWORD *)(a1 + 880);
      if (!v11)
        goto LABEL_47;
      goto LABEL_39;
    case 842150450:
      _data_map32_unlock(v9);
      v11 = *(_QWORD *)(a1 + 880);
      if (!v11)
        goto LABEL_47;
      goto LABEL_39;
  }
LABEL_38:
  v11 = *(_QWORD *)(a1 + 880);
  if (!v11)
    goto LABEL_47;
LABEL_39:
  v12 = *(_DWORD *)(v11 + 216);
  switch(v12)
  {
    case -270471200:
      _data_map_ext_unlock(v11);
      break;
    case 1684300900:
      _data_map64_unlock(v11);
      result = *(_QWORD *)(a1 + 920);
      if (!result)
        return result;
      goto LABEL_48;
    case 842150450:
      _data_map32_unlock(v11);
      result = *(_QWORD *)(a1 + 920);
      if (!result)
        return result;
      goto LABEL_48;
  }
LABEL_47:
  result = *(_QWORD *)(a1 + 920);
  if (!result)
    return result;
LABEL_48:
  v13 = *(_DWORD *)(result + 216);
  switch(v13)
  {
    case -270471200:
      return _data_map_ext_unlock(result);
    case 1684300900:
      return _data_map64_unlock(result);
    case 842150450:
      return _data_map32_unlock(result);
  }
  return result;
}

uint64_t _page_delete_obj_by_oid_and_type(uint64_t a1, int64_t a2, unsigned int a3, unsigned int a4, size_t __nbyte, __int16 a6)
{
  int v6;
  int v11;
  uint64_t v12;
  int v13;
  int slot_for_oid_and_type;
  uint64_t v15;
  char *v16;
  _DWORD *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int VInt16;
  uint64_t v48;
  char *v49;
  char *v50;
  const char *v51;
  int v52;
  NSObject *v53;
  char *v54;
  char *v55;
  const char *v56;
  uint64_t v57;
  char *v58;
  const char *v59;
  int v60;
  NSObject *v61;
  char *v62;
  char *v63;
  const char *v64;
  int v65;
  NSObject *v66;
  char *v67;
  const char *v68;
  char *v69;
  uint64_t v70;
  void *__dst;
  void *value_out;
  _BYTE buf[12];
  __int16 v74;
  int v75;
  __int16 v76;
  int64_t v77;
  uint64_t v78;

  v6 = __nbyte;
  v78 = *MEMORY[0x1E0C80C00];
  __dst = 0;
  value_out = 0;
  v69 = 0;
  v70 = 0;
  v11 = a6 & 0x4000;
  v12 = _page_fetch_with_fd(a1, &value_out, a4, __nbyte, v11, buf, 0xFFFFFFFFLL, 0);
  if (!(_DWORD)v12)
  {
    v13 = *((_DWORD *)value_out + 3);
    if ((v13 & 0xF0) != 0)
    {
      v60 = *__error();
      v61 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "_page_delete_obj_by_oid_and_type";
        v74 = 1024;
        v75 = 5700;
        v76 = 1024;
        LODWORD(v77) = a4;
        _os_log_error_impl(&dword_1B8270000, v61, OS_LOG_TYPE_ERROR, "%s:%d: page_delete_obj: ERR: tried to read attr name table data! pgnum 0x%x\n", buf, 0x18u);
      }
      *__error() = v60;
      v62 = __si_assert_copy_extra_2151(0, -1);
      v63 = v62;
      v64 = "";
      if (v62)
        v64 = v62;
      __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5701, v64);
    }
    else
    {
      if ((v13 & 8) == 0)
      {
        slot_for_oid_and_type = find_slot_for_oid_and_type(a1, (uint64_t)value_out, a2, a3, (unint64_t *)&__dst, &v70, 1);
        v15 = *((int *)value_out + 2);
        v16 = (char *)value_out + v15;
        v69 = (char *)value_out + v15;
        if (slot_for_oid_and_type == 2)
          return 2;
        v17 = __dst;
        v18 = (char *)__dst + 4;
        v19 = *((unsigned __int8 *)__dst + 4);
        if (*((char *)__dst + 4) < 0)
        {
          v21 = *((unsigned __int8 *)__dst + 4);
          if (v21 > 0xBF)
          {
            if (v21 > 0xDF)
            {
              if (v21 > 0xEF)
              {
                if (v21 > 0xF7)
                {
                  if (v21 > 0xFB)
                  {
                    if (v21 > 0xFD)
                    {
                      if (v21 == 255)
                      {
                        v19 = *(_QWORD *)((char *)__dst + 5);
                        v20 = 9;
                      }
                      else
                      {
                        v19 = ((unint64_t)*((unsigned __int8 *)__dst + 5) << 48) | ((unint64_t)*((unsigned __int8 *)__dst + 6) << 40) | ((unint64_t)*((unsigned __int8 *)__dst + 7) << 32) | ((unint64_t)*((unsigned __int8 *)__dst + 8) << 24) | ((unint64_t)*((unsigned __int8 *)__dst + 9) << 16) | ((unint64_t)*((unsigned __int8 *)__dst + 10) << 8) | *((unsigned __int8 *)__dst + 11);
                        v20 = 8;
                      }
                    }
                    else
                    {
                      v19 = ((v19 & 1) << 48) | ((unint64_t)*((unsigned __int8 *)__dst + 5) << 40) | ((unint64_t)*((unsigned __int8 *)__dst + 6) << 32) | ((unint64_t)*((unsigned __int8 *)__dst + 7) << 24) | ((unint64_t)*((unsigned __int8 *)__dst + 8) << 16) | ((unint64_t)*((unsigned __int8 *)__dst + 9) << 8) | *((unsigned __int8 *)__dst + 10);
                      v20 = 7;
                    }
                  }
                  else
                  {
                    v19 = ((v19 & 3) << 40) | ((unint64_t)*((unsigned __int8 *)__dst + 5) << 32) | ((unint64_t)*((unsigned __int8 *)__dst + 6) << 24) | ((unint64_t)*((unsigned __int8 *)__dst + 7) << 16) | ((unint64_t)*((unsigned __int8 *)__dst + 8) << 8) | *((unsigned __int8 *)__dst + 9);
                    v20 = 6;
                  }
                }
                else
                {
                  v19 = ((v19 & 7) << 32) | ((unint64_t)*((unsigned __int8 *)__dst + 5) << 24) | ((unint64_t)*((unsigned __int8 *)__dst + 6) << 16) | ((unint64_t)*((unsigned __int8 *)__dst + 7) << 8) | *((unsigned __int8 *)__dst + 8);
                  v20 = 5;
                }
              }
              else
              {
                v19 = ((v19 & 0xF) << 24) | ((unint64_t)*((unsigned __int8 *)__dst + 5) << 16) | ((unint64_t)*((unsigned __int8 *)__dst + 6) << 8) | *((unsigned __int8 *)__dst + 7);
                v20 = 4;
              }
            }
            else
            {
              v19 = ((v19 & 0x1F) << 16) | ((unint64_t)*((unsigned __int8 *)__dst + 5) << 8) | *((unsigned __int8 *)__dst + 6);
              v20 = 3;
            }
          }
          else
          {
            v19 = *((unsigned __int8 *)__dst + 5) | ((v19 & 0x3F) << 8);
            v20 = 2;
          }
        }
        else
        {
          v20 = 1;
        }
        v22 = v18[v20];
        if (v18[v20] < 0)
        {
          if (v22 >= 0xC0)
          {
            if (v22 >= 0xE0)
            {
              v54 = __si_assert_copy_extra_2151(0, -1);
              v55 = v54;
              v56 = "";
              if (v54)
                v56 = v54;
              __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v56);
              goto LABEL_91;
            }
            v23 = v20 + 2;
          }
          else
          {
            v23 = v20 + 1;
          }
          v22 = v18[v23];
        }
        if (__dst >= v16 || (*(_BYTE *)(a1 + 804) & (v22 >> 5) & 1) != a3 || v19 != a2)
        {
          page_release(a1, value_out, a4, 0, 0);
          return 2;
        }
        v26 = (*(_DWORD *)__dst + 4);
        v27 = (char *)__dst + v26;
        v28 = *((_DWORD *)value_out + 1);
        *((_DWORD *)value_out + 2) = v15 - v26;
        memmove(v17, (char *)v17 + (*v17 + 4), v16 - ((char *)v17 + (*v17 + 4)));
        set_offset_hint(a1, (uint64_t)value_out, v70);
        v32 = (int *)value_out;
        if (v27 == v16)
        {
          v33 = *(_QWORD *)(a1 + 928);
          if (!value_out)
          {
            LODWORD(v35) = 4;
LABEL_45:
            *(_DWORD *)(v33 + 224) = v35;
            goto LABEL_46;
          }
          v34 = *(unsigned int *)(v33 + 220);
          if ((int)v34 >= 1)
          {
            v35 = 0;
            v36 = (void **)(v33 + 272);
            while (*v36 != value_out)
            {
              ++v35;
              v36 += 6;
              if (v34 == v35)
                goto LABEL_46;
            }
            goto LABEL_45;
          }
        }
LABEL_46:
        if ((v32[3] & 0xC) != 0)
        {
          page_resize(a1, &value_out, 0, v28 - v26, (unint64_t *)&__dst, v29, v30, v31, (uint64_t)&v69);
          v32 = (int *)value_out;
        }
        v37 = v32[2];
        if (v27 != v16)
        {
          if ((_DWORD)v37 == 20)
          {
            v49 = __si_assert_copy_extra_2151(*(_DWORD **)(a1 + 848), -1);
            v50 = v49;
            v51 = "";
            if (v49)
              v51 = v49;
            __message_assert("%s:%u: failed assertion '%s' %s Unexpected", "sdb2.c", 5846, "dbp->used_bytes != sizeof(db_page)", v51);
            free(v50);
            if (__valid_fsp(*(_DWORD **)(a1 + 848)))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          if (dword_1EF19FCA8 >= 5)
          {
            v52 = *__error();
            v53 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = a1 + 324;
              v74 = 1024;
              v75 = a4;
              v76 = 2048;
              v77 = a2;
              _os_log_impl(&dword_1B8270000, v53, OS_LOG_TYPE_DEFAULT, "%s : no map update for deleting at pgnum %d (%.16llx)\n", buf, 0x1Cu);
            }
            *__error() = v52;
          }
LABEL_51:
          v38 = 1;
LABEL_54:
          *(_DWORD *)(*(_QWORD *)(a1 + 928) + 224) = 4;
          page_release(a1, value_out, a4, v38, 0);
          v12 = 0;
          --*(_QWORD *)(a1 + 20);
          return v12;
        }
        if ((_DWORD)v37 == 20)
        {
          *(_DWORD *)buf = 0;
          map_delete((_QWORD *)a1, a2, a3);
          page_free(a1, a4, buf, v11);
          v38 = *(_DWORD *)buf == 0;
          goto LABEL_54;
        }
        v40 = v70;
        if (v70)
          goto LABEL_62;
        v41 = v32 + 5;
        __dst = v32 + 5;
        v69 = (char *)v32 + v37;
        if ((int)v37 < 21)
        {
          v42 = 0;
        }
        else
        {
          do
          {
            v42 = (uint64_t)v41;
            v41 = (_DWORD *)((char *)v41 + (*v41 + 4));
          }
          while (v41 < (int *)((char *)v32 + v37));
          v70 = v42;
          __dst = v41;
        }
        set_offset_hint(a1, (uint64_t)v32, v42);
        v40 = v70;
        if (v70)
        {
LABEL_62:
          v43 = v40 + 4;
          v44 = *(unsigned __int8 *)(v40 + 4);
          if (*(char *)(v40 + 4) < 0)
          {
            v46 = *(unsigned __int8 *)(v40 + 4);
            if (v46 > 0xBF)
            {
              if (v46 > 0xDF)
              {
                if (v46 > 0xEF)
                {
                  if (v46 > 0xF7)
                  {
                    if (v46 > 0xFB)
                    {
                      if (v46 > 0xFD)
                      {
                        if (v46 == 255)
                        {
                          v44 = *(_QWORD *)(v40 + 5);
                          v45 = 9;
                        }
                        else
                        {
                          v44 = ((unint64_t)*(unsigned __int8 *)(v40 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v40 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v40 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v40 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v40 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v40 + 10) << 8) | *(unsigned __int8 *)(v40 + 11);
                          v45 = 8;
                        }
                      }
                      else
                      {
                        v44 = ((v44 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v40 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v40 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(v40 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(v40 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(v40 + 9) << 8) | *(unsigned __int8 *)(v40 + 10);
                        v45 = 7;
                      }
                    }
                    else
                    {
                      v44 = ((v44 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v40 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v40 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(v40 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(v40 + 8) << 8) | *(unsigned __int8 *)(v40 + 9);
                      v45 = 6;
                    }
                  }
                  else
                  {
                    v44 = ((v44 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v40 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(v40 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v40 + 7) << 8) | *(unsigned __int8 *)(v40 + 8);
                    v45 = 5;
                  }
                }
                else
                {
                  v44 = ((v44 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v40 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v40 + 6) << 8) | *(unsigned __int8 *)(v40 + 7);
                  v45 = 4;
                }
              }
              else
              {
                v44 = ((v44 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v40 + 5) << 8) | *(unsigned __int8 *)(v40 + 6);
                v45 = 3;
              }
            }
            else
            {
              v44 = *(unsigned __int8 *)(v40 + 5) | ((v44 & 0x3F) << 8);
              v45 = 2;
            }
          }
          else
          {
            v45 = 1;
          }
          *(_QWORD *)buf = v45;
          VInt16 = ldb_readVInt16(v43, (uint64_t *)buf);
          v48 = map_update(a1, a4, v6, a2, v44, a3, *(_DWORD *)(a1 + 804) & (VInt16 >> 5) & 1, 0);
          if ((_DWORD)v48)
          {
            v12 = v48;
            page_release(a1, value_out, a4, 1u, 0);
            return v12;
          }
          goto LABEL_51;
        }
        v58 = __si_assert_copy_extra_2151(0, -1);
        v55 = v58;
        v59 = "";
        if (v58)
          v59 = v58;
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 5819, "prev", v59);
LABEL_91:
        free(v55);
        if (!__valid_fs(-1))
        {
          v57 = 3072;
LABEL_95:
          *(_DWORD *)v57 = -559038737;
          abort();
        }
LABEL_92:
        v57 = 2989;
        goto LABEL_95;
      }
      v65 = *__error();
      v66 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "_page_delete_obj_by_oid_and_type";
        v74 = 1024;
        v75 = 5706;
        v76 = 1024;
        LODWORD(v77) = a4;
        _os_log_error_impl(&dword_1B8270000, v66, OS_LOG_TYPE_ERROR, "%s:%d: page_delete_obj: ERR: page is still compressed! pgnum 0x%x\n", buf, 0x18u);
      }
      *__error() = v65;
      v67 = __si_assert_copy_extra_2151(0, -1);
      v63 = v67;
      v68 = "";
      if (v67)
        v68 = v67;
      __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5707, v68);
    }
    free(v63);
    goto LABEL_92;
  }
  return v12;
}

uint64_t find_slot_for_oid_and_type(uint64_t a1, uint64_t a2, int64_t a3, unsigned int a4, unint64_t *a5, _QWORD *a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  const void *v34;
  const void *i;
  uint64_t v36;
  unsigned int v37;
  const void *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t result;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  const char *v52;
  uint64_t v53;
  unsigned int v54;
  char *v55;
  char *v56;
  const char *v57;
  unsigned int v58;
  uint64_t v59;
  const void *v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  char *v68;
  char *v69;
  const char *v70;
  _QWORD *v71;

  v13 = *(_QWORD *)(a1 + 928);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(v13 + 8));
  v14 = *(unsigned int *)(v13 + 220);
  v71 = a6;
  if ((int)v14 < 1)
  {
LABEL_9:
    v18 = 0;
    ++*(_DWORD *)(v13 + 244);
  }
  else
  {
    v15 = 0;
    v16 = 272;
    while (*(_QWORD *)(v13 + v16) != a2 || !*(_DWORD *)(v13 + 4 * v15 + 252))
    {
      ++v15;
      v16 += 48;
      if (v14 == v15)
        goto LABEL_9;
    }
    v17 = *(_DWORD *)(v13 + 48 * v15 + 304) - a4;
    if (v17)
    {
      if (v17 > 0)
        goto LABEL_8;
    }
    else if (*(_QWORD *)(v13 + 48 * v15 + 296) - a3 > 0)
    {
LABEL_8:
      v18 = 0;
      ++*(_DWORD *)(v13 + 240);
      goto LABEL_10;
    }
    ++*(_DWORD *)(v13 + 236);
    v18 = *(_QWORD *)(v13 + 48 * v15 + 312);
  }
LABEL_10:
  pthread_rwlock_unlock((pthread_rwlock_t *)(v13 + 8));
  v19 = a2 + 20;
  v20 = a2 + 20 + v18;
  v21 = *(int *)(a2 + 8);
  v22 = v20 + 4;
  v23 = *(unsigned __int8 *)(v20 + 4);
  if ((*(_BYTE *)(v20 + 4) & 0x80) != 0)
  {
    if (v23 > 0xBF)
    {
      if (v23 > 0xDF)
      {
        if (v23 > 0xEF)
        {
          if (v23 > 0xF7)
          {
            if (v23 > 0xFB)
            {
              if (v23 > 0xFD)
              {
                if ((_DWORD)v23 == 255)
                {
                  v23 = *(_QWORD *)(v20 + 5);
                  v24 = 9;
                }
                else
                {
                  v23 = ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 10) << 8) | *(unsigned __int8 *)(v20 + 11);
                  v24 = 8;
                }
              }
              else
              {
                v23 = ((unint64_t)(v23 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 9) << 8) | *(unsigned __int8 *)(v20 + 10);
                v24 = 7;
              }
            }
            else
            {
              v23 = ((unint64_t)(v23 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 8) << 8) | *(unsigned __int8 *)(v20 + 9);
              v24 = 6;
            }
          }
          else
          {
            v23 = ((unint64_t)(v23 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 8) | *(unsigned __int8 *)(v20 + 8);
            v24 = 5;
          }
        }
        else
        {
          v23 = ((unint64_t)(v23 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 8) | *(unsigned __int8 *)(v20 + 7);
          v24 = 4;
        }
      }
      else
      {
        v23 = ((unint64_t)(v23 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 8) | *(unsigned __int8 *)(v20 + 6);
        v24 = 3;
      }
    }
    else
    {
      v23 = *(unsigned __int8 *)(v20 + 5) | ((unint64_t)(v23 & 0x3F) << 8);
      v24 = 2;
    }
  }
  else
  {
    v24 = 1;
  }
  v25 = *(unsigned __int8 *)(v22 + v24);
  if (*(char *)(v22 + v24) < 0)
  {
    if (v25 >= 0xC0)
    {
      if (v25 >= 0xE0)
        goto LABEL_182;
      v26 = v24 + 2;
    }
    else
    {
      v26 = v24 + 1;
    }
    v25 = *(unsigned __int8 *)(v22 + v26);
  }
  v27 = *(_DWORD *)(a1 + 804);
  v28 = v27 & (v25 >> 5) & 1;
  if (v18 && v28 > a4)
  {
    v29 = a2 + 24;
    v23 = *(unsigned __int8 *)(a2 + 24);
    if (*(char *)(a2 + 24) < 0)
    {
      v31 = *(unsigned __int8 *)(a2 + 24);
      if (v31 > 0xBF)
      {
        if (v31 > 0xDF)
        {
          if (v31 > 0xEF)
          {
            if (v31 > 0xF7)
            {
              if (v31 > 0xFB)
              {
                if (v31 > 0xFD)
                {
                  if (v31 == 255)
                  {
                    v23 = *(_QWORD *)(a2 + 25);
                    v30 = 9;
                  }
                  else
                  {
                    v23 = ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 29) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 30) << 8) | *(unsigned __int8 *)(a2 + 31);
                    v30 = 8;
                  }
                }
                else
                {
                  v23 = ((unint64_t)(v23 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 29) << 8) | *(unsigned __int8 *)(a2 + 30);
                  v30 = 7;
                }
              }
              else
              {
                v23 = ((unint64_t)(v23 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 8) | *(unsigned __int8 *)(a2 + 29);
                v30 = 6;
              }
            }
            else
            {
              v23 = ((unint64_t)(v23 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 8) | *(unsigned __int8 *)(a2 + 28);
              v30 = 5;
            }
          }
          else
          {
            v23 = ((unint64_t)(v23 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 8) | *(unsigned __int8 *)(a2 + 27);
            v30 = 4;
          }
        }
        else
        {
          v23 = ((unint64_t)(v23 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 8) | *(unsigned __int8 *)(a2 + 26);
          v30 = 3;
        }
      }
      else
      {
        v23 = *(unsigned __int8 *)(a2 + 25) | ((unint64_t)(v23 & 0x3F) << 8);
        v30 = 2;
      }
    }
    else
    {
      v30 = 1;
    }
    v32 = *(unsigned __int8 *)(v29 + v30);
    if (*(char *)(v29 + v30) < 0)
    {
      if (v32 >= 0xC0)
      {
        if (v32 >= 0xE0)
        {
LABEL_129:
          v55 = __si_assert_copy_extra_2151(0, -1);
          v56 = v55;
          v57 = "";
          if (v55)
            v57 = v55;
          __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v57);
          free(v56);
          if (__valid_fs(-1))
          {
            v53 = 2989;
            goto LABEL_136;
          }
          goto LABEL_135;
        }
        v33 = v30 + 2;
      }
      else
      {
        v33 = v30 + 1;
      }
      v32 = *(unsigned __int8 *)(v29 + v33);
    }
    v28 = v27 & (v32 >> 5) & 1;
    v20 = a2 + 20;
  }
  v34 = (const void *)(a2 + v21);
  if (v20 >= a2 + v21)
  {
    i = 0;
    *a5 = v20;
  }
  else
  {
    for (i = 0; ; i = v38)
    {
      v38 = (const void *)v20;
      if (v28 >= a4 && (v28 != a4 || v23 >= a3))
        break;
      v20 += (*(_DWORD *)v20 + 4);
      if (v20 >= (unint64_t)v34)
      {
        i = v38;
        if (v20 <= (unint64_t)v34)
          goto LABEL_93;
LABEL_115:
        if (__valid_fs(-1))
        {
          v50 = __si_assert_copy_extra_2151(0, -1);
          v51 = v50;
          v52 = "";
          if (v50)
            v52 = v50;
          si_analytics_log_2520("%s:%u: failed assertion '%s' %s dbo ends past end of page ([%p, %p] > [%p, %p])", "sdb2.c", 4981, "dbo<=end", v52, i, (const void *)v20, (const void *)(a2 + 20), v34);
          free(v51);
          v53 = 2816;
LABEL_136:
          *(_DWORD *)v53 = -559038737;
          abort();
        }
LABEL_135:
        v53 = 3072;
        goto LABEL_136;
      }
      v39 = v20 + 4;
      v23 = *(unsigned __int8 *)(v20 + 4);
      if (*(char *)(v20 + 4) < 0)
      {
        v41 = *(unsigned __int8 *)(v20 + 4);
        if (v41 > 0xBF)
        {
          if (v41 > 0xDF)
          {
            if (v41 > 0xEF)
            {
              if (v41 > 0xF7)
              {
                if (v41 > 0xFB)
                {
                  if (v41 > 0xFD)
                  {
                    if (v41 == 255)
                    {
                      v23 = *(_QWORD *)(v20 + 5);
                      v40 = 9;
                    }
                    else
                    {
                      v23 = ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 10) << 8) | *(unsigned __int8 *)(v20 + 11);
                      v40 = 8;
                    }
                  }
                  else
                  {
                    v23 = ((unint64_t)(v23 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 9) << 8) | *(unsigned __int8 *)(v20 + 10);
                    v40 = 7;
                  }
                }
                else
                {
                  v23 = ((unint64_t)(v23 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 8) << 8) | *(unsigned __int8 *)(v20 + 9);
                  v40 = 6;
                }
              }
              else
              {
                v23 = ((unint64_t)(v23 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 7) << 8) | *(unsigned __int8 *)(v20 + 8);
                v40 = 5;
              }
            }
            else
            {
              v23 = ((unint64_t)(v23 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 6) << 8) | *(unsigned __int8 *)(v20 + 7);
              v40 = 4;
            }
          }
          else
          {
            v23 = ((unint64_t)(v23 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v20 + 5) << 8) | *(unsigned __int8 *)(v20 + 6);
            v40 = 3;
          }
        }
        else
        {
          v23 = *(unsigned __int8 *)(v20 + 5) | ((unint64_t)(v23 & 0x3F) << 8);
          v40 = 2;
        }
      }
      else
      {
        v40 = 1;
      }
      v37 = *(unsigned __int8 *)(v39 + v40);
      if (*(char *)(v39 + v40) < 0)
      {
        if (v37 < 0xC0)
        {
          v36 = v40 + 1;
        }
        else
        {
          if (v37 >= 0xE0)
            goto LABEL_129;
          v36 = v40 + 2;
        }
        v37 = *(unsigned __int8 *)(v39 + v36);
      }
      v28 = v27 & (v37 >> 5) & 1;
    }
    if (v20 > (unint64_t)v34)
      goto LABEL_115;
LABEL_93:
    *a5 = v20;
    if (i)
    {
      set_offset_hint(a1, a2, (uint64_t)i);
      v42 = 0;
      if (a7 != 2)
        goto LABEL_100;
      goto LABEL_97;
    }
  }
  v42 = 1;
  if (a7 != 2)
    goto LABEL_100;
LABEL_97:
  if (v20 < (unint64_t)v34 && v23 == a3)
    return 17;
LABEL_100:
  v45 = v20 < (unint64_t)v34 && v23 == a3;
  if (a7 == 1 && !v45)
    return 2;
  if (!v71)
    return 0;
  if (v42)
  {
    v46 = *(int *)(a2 + 8);
    if ((int)v46 >= 21)
    {
      v47 = a2 + 24;
      v48 = *(unsigned __int8 *)(a2 + 24);
      if (*(char *)(a2 + 24) < 0)
      {
        v54 = *(unsigned __int8 *)(a2 + 24);
        if (v54 > 0xBF)
        {
          if (v54 > 0xDF)
          {
            if (v54 > 0xEF)
            {
              if (v54 > 0xF7)
              {
                if (v54 > 0xFB)
                {
                  if (v54 > 0xFD)
                  {
                    if (v54 == 255)
                    {
                      v48 = *(_QWORD *)(a2 + 25);
                      v49 = 9;
                    }
                    else
                    {
                      v48 = ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 29) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 30) << 8) | *(unsigned __int8 *)(a2 + 31);
                      v49 = 8;
                    }
                  }
                  else
                  {
                    v48 = ((unint64_t)(v48 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 29) << 8) | *(unsigned __int8 *)(a2 + 30);
                    v49 = 7;
                  }
                }
                else
                {
                  v48 = ((unint64_t)(v48 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 8) | *(unsigned __int8 *)(a2 + 29);
                  v49 = 6;
                }
              }
              else
              {
                v48 = ((unint64_t)(v48 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 27) << 8) | *(unsigned __int8 *)(a2 + 28);
                v49 = 5;
              }
            }
            else
            {
              v48 = ((unint64_t)(v48 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 26) << 8) | *(unsigned __int8 *)(a2 + 27);
              v49 = 4;
            }
          }
          else
          {
            v48 = ((unint64_t)(v48 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 25) << 8) | *(unsigned __int8 *)(a2 + 26);
            v49 = 3;
          }
        }
        else
        {
          v48 = *(unsigned __int8 *)(a2 + 25) | ((unint64_t)(v48 & 0x3F) << 8);
          v49 = 2;
        }
      }
      else
      {
        v49 = 1;
      }
      v58 = *(unsigned __int8 *)(v47 + v49);
      if ((*(char *)(v47 + v49) & 0x80000000) == 0)
      {
LABEL_148:
        v60 = 0;
        v61 = a2 + v46;
        while (1)
        {
          i = v60;
          v60 = (const void *)v19;
          v62 = *(_DWORD *)(a1 + 804) & (v58 >> 5) & 1;
          if (v62 >= a4 && (v62 != a4 || v48 >= a3))
            break;
          v64 = (*(_DWORD *)v19 + 4);
          v19 += v64;
          if ((unint64_t)v60 + v64 >= v61)
          {
            i = v60;
            goto LABEL_180;
          }
          v65 = v19 + 4;
          v48 = *(unsigned __int8 *)(v19 + 4);
          if (*(char *)(v19 + 4) < 0)
          {
            v67 = *(unsigned __int8 *)(v19 + 4);
            if (v67 > 0xBF)
            {
              if (v67 > 0xDF)
              {
                if (v67 > 0xEF)
                {
                  if (v67 > 0xF7)
                  {
                    if (v67 > 0xFB)
                    {
                      if (v67 > 0xFD)
                      {
                        if (v67 == 255)
                        {
                          v48 = *(_QWORD *)(v19 + 5);
                          v66 = 9;
                        }
                        else
                        {
                          v48 = ((unint64_t)*(unsigned __int8 *)(v19 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(v19 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(v19 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v19 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(v19 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 10) << 8) | *(unsigned __int8 *)(v19 + 11);
                          v66 = 8;
                        }
                      }
                      else
                      {
                        v48 = ((unint64_t)(v48 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(v19 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(v19 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(v19 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(v19 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 9) << 8) | *(unsigned __int8 *)(v19 + 10);
                        v66 = 7;
                      }
                    }
                    else
                    {
                      v48 = ((unint64_t)(v48 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(v19 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(v19 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(v19 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 8) << 8) | *(unsigned __int8 *)(v19 + 9);
                      v66 = 6;
                    }
                  }
                  else
                  {
                    v48 = ((unint64_t)(v48 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(v19 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(v19 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 7) << 8) | *(unsigned __int8 *)(v19 + 8);
                    v66 = 5;
                  }
                }
                else
                {
                  v48 = ((unint64_t)(v48 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(v19 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 6) << 8) | *(unsigned __int8 *)(v19 + 7);
                  v66 = 4;
                }
              }
              else
              {
                v48 = ((unint64_t)(v48 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(v19 + 5) << 8) | *(unsigned __int8 *)(v19 + 6);
                v66 = 3;
              }
            }
            else
            {
              v48 = *(unsigned __int8 *)(v19 + 5) | ((unint64_t)(v48 & 0x3F) << 8);
              v66 = 2;
            }
          }
          else
          {
            v66 = 1;
          }
          v58 = *(unsigned __int8 *)(v65 + v66);
          if (*(char *)(v65 + v66) < 0)
          {
            if (v58 < 0xC0)
            {
              v58 = *(unsigned __int8 *)(v65 + v66 + 1);
            }
            else
            {
              if (v58 >= 0xE0)
                goto LABEL_182;
              v58 = *(unsigned __int8 *)(v65 + v66 + 2);
            }
          }
        }
        if (!i)
          goto LABEL_181;
LABEL_180:
        set_offset_hint(a1, a2, (uint64_t)i);
        goto LABEL_181;
      }
      if (v58 < 0xC0)
      {
        v59 = v49 + 1;
LABEL_147:
        v58 = *(unsigned __int8 *)(v47 + v59);
        goto LABEL_148;
      }
      if (v58 < 0xE0)
      {
        v59 = v49 + 2;
        goto LABEL_147;
      }
LABEL_182:
      v68 = __si_assert_copy_extra_2151(0, -1);
      v69 = v68;
      v70 = "";
      if (v68)
        v70 = v68;
      __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v70);
      free(v69);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    i = 0;
  }
LABEL_181:
  result = 0;
  *v71 = i;
  return result;
}

