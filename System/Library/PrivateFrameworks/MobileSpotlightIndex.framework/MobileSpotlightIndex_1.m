uint64_t set_offset_hint(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pthread_rwlock_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *j;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _QWORD *i;
  uint64_t v24;
  unint64_t v25;
  char *v27;
  char *v28;
  const char *v29;

  if (a3)
  {
    v5 = a3 + 4;
    v6 = *(unsigned __int8 *)(a3 + 4);
    if (*(char *)(a3 + 4) < 0)
    {
      v13 = *(unsigned __int8 *)(a3 + 4);
      if (v13 > 0xBF)
      {
        if (v13 > 0xDF)
        {
          if (v13 > 0xEF)
          {
            if (v13 > 0xF7)
            {
              if (v13 > 0xFB)
              {
                if (v13 > 0xFD)
                {
                  if (v13 == 255)
                  {
                    v6 = *(_QWORD *)(a3 + 5);
                    v7 = 9;
                  }
                  else
                  {
                    v6 = ((unint64_t)*(unsigned __int8 *)(a3 + 5) << 48) | ((unint64_t)*(unsigned __int8 *)(a3 + 6) << 40) | ((unint64_t)*(unsigned __int8 *)(a3 + 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 8) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 10) << 8) | *(unsigned __int8 *)(a3 + 11);
                    v7 = 8;
                  }
                }
                else
                {
                  v6 = ((v6 & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(a3 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(a3 + 6) << 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 7) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 8) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 9) << 8) | *(unsigned __int8 *)(a3 + 10);
                  v7 = 7;
                }
              }
              else
              {
                v6 = ((v6 & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(a3 + 5) << 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 6) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 7) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 8) << 8) | *(unsigned __int8 *)(a3 + 9);
                v7 = 6;
              }
            }
            else
            {
              v6 = ((v6 & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a3 + 5) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 6) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 7) << 8) | *(unsigned __int8 *)(a3 + 8);
              v7 = 5;
            }
          }
          else
          {
            v6 = ((v6 & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(a3 + 5) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 6) << 8) | *(unsigned __int8 *)(a3 + 7);
            v7 = 4;
          }
        }
        else
        {
          v6 = ((v6 & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(a3 + 5) << 8) | *(unsigned __int8 *)(a3 + 6);
          v7 = 3;
        }
      }
      else
      {
        v6 = *(unsigned __int8 *)(a3 + 5) | ((v6 & 0x3F) << 8);
        v7 = 2;
      }
    }
    else
    {
      v7 = 1;
    }
    v15 = *(unsigned __int8 *)(v5 + v7);
    if (*(char *)(v5 + v7) < 0)
    {
      if (v15 >= 0xC0)
      {
        if (v15 >= 0xE0)
        {
          v27 = __si_assert_copy_extra_2151(0, -1);
          v28 = v27;
          v29 = "";
          if (v27)
            v29 = v27;
          __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.h", 133, "b0 < 0xE0", v29);
          free(v28);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        v16 = v7 + 2;
      }
      else
      {
        v16 = v7 + 1;
      }
      v15 = *(unsigned __int8 *)(v5 + v16);
    }
    v17 = *(_QWORD *)(a1 + 928);
    v18 = *(_DWORD *)(a1 + 804);
    v9 = (pthread_rwlock_t *)(v17 + 8);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(v17 + 8));
    v19 = *(unsigned int *)(v17 + 220);
    if ((int)v19 >= 1)
    {
      v20 = 0;
      v21 = v18 & (v15 >> 5) & 1;
      v22 = a3 - a2 - 20;
      for (i = (_QWORD *)(v17 + 272); *i != a2; i += 6)
      {
        if (v19 == ++v20)
          return pthread_rwlock_unlock(v9);
      }
      v24 = v17 + 48 * v20;
      if (v22 <= 0)
        v25 = 0;
      else
        v25 = v6;
      if (v22 <= 0)
        v21 = 0;
      *(_QWORD *)(v24 + 296) = v25;
      *(_DWORD *)(v24 + 304) = v21;
      *(_QWORD *)(v24 + 312) = v22 & ~(v22 >> 63);
    }
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 928);
    v9 = (pthread_rwlock_t *)(v8 + 8);
    pthread_rwlock_wrlock((pthread_rwlock_t *)(v8 + 8));
    v10 = *(unsigned int *)(v8 + 220);
    if ((int)v10 >= 1)
    {
      v11 = 0;
      for (j = (_QWORD *)(v8 + 272); *j != a2; j += 6)
      {
        if (v10 == ++v11)
          return pthread_rwlock_unlock(v9);
      }
      v14 = v8 + 48 * v11;
      *(_QWORD *)(v14 + 296) = 0;
      *(_DWORD *)(v14 + 304) = 0;
      *(_QWORD *)(v14 + 312) = 0;
    }
  }
  return pthread_rwlock_unlock(v9);
}

uint64_t page_resize(uint64_t a1, void **a2, char a3, int a4, unint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _DWORD *v10;
  char v13;
  uint64_t result;
  int v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  size_t v23;
  _DWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t **v29;
  unint64_t v30;
  BOOL v31;
  char *v33;
  char *v34;
  const char *v35;
  unint64_t **v36;

  if (!a2)
    return 22;
  v10 = *a2;
  if (!*a2)
    return 22;
  v13 = a3 ^ 1;
  result = 22;
  if (a4 <= 0x1000000)
    v13 = 0;
  if ((v13 & 1) == 0 && v10[2] <= a4)
  {
    v16 = malloc_size(v10);
    v17 = v16;
    v18 = *a2;
    if (v16 >= a4)
    {
      result = 0;
      v18[1] = v17;
    }
    else
    {
      v19 = 4;
      if ((v18[3] & 4) == 0)
        v19 = 1;
      v20 = v18[v19];
      if (v20 <= v16)
        v21 = v16;
      else
        v21 = v20;
      do
        v21 *= 2;
      while (v21 < a4);
      v22 = (int)v18[1];
      v23 = v21;
      v24 = malloc_type_realloc(*a2, v21, 0xE92997F3uLL);
      *a2 = v24;
      if (v24)
      {
        v25 = v24;
        v24[1] = v21;
        if (v24 != v18)
        {
          v26 = *(_QWORD *)(a1 + 928);
          if (*(int *)(v26 + 220) < 1)
            goto LABEL_29;
          v27 = 0;
          v28 = v26 + 272;
          while (1)
          {
            if (*(void **)v28 == v25)
            {
              *(_QWORD *)v28 = 0;
              *(_DWORD *)(v26 + 252 + 4 * v27) = 0;
              free(*(void **)(v28 + 8));
              *(_QWORD *)(v28 + 8) = 0;
              *(_QWORD *)(v28 + 24) = 0;
              *(_DWORD *)(v28 + 32) = 0;
              *(_QWORD *)(v28 + 40) = 0;
              if (*(_DWORD **)v28 == v18)
                goto LABEL_24;
            }
            else if (*(_DWORD **)v28 == v18)
            {
LABEL_24:
              *(_QWORD *)v28 = v25;
              free(*(void **)(v28 + 8));
              *(_QWORD *)(v28 + 8) = 0;
              *(_QWORD *)(v28 + 24) = 0;
              *(_DWORD *)(v28 + 32) = 0;
              *(_QWORD *)(v28 + 40) = 0;
            }
            ++v27;
            v28 += 48;
            if (v27 >= *(int *)(v26 + 220))
            {
              v25 = *a2;
              v23 = *((int *)*a2 + 1);
              goto LABEL_29;
            }
          }
        }
        v25 = v18;
LABEL_29:
        if (malloc_size(v25) < v23)
        {
          v33 = __si_assert_copy_extra_2151(0, -1);
          v34 = v33;
          v35 = "";
          if (v33)
            v35 = v33;
          __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 2717, "(size_t)(*dbpp)->size <= malloc_size(*dbpp)", v35);
          free(v34);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        v36 = (unint64_t **)&a9;
        if (a5)
        {
          do
          {
            v30 = *a5;
            if (*a5)
              v31 = v30 >= (unint64_t)v18;
            else
              v31 = 0;
            if (v31 && v30 <= (unint64_t)v18 + v22)
              *a5 = (unint64_t)*a2 + v30 - (_QWORD)v18;
            v29 = v36++;
            a5 = *v29;
          }
          while (*v29);
        }
        return 0;
      }
      else
      {
        *a2 = v18;
        return 12;
      }
    }
  }
  return result;
}

uint64_t page_find_oid_with_flags(uint64_t a1, unsigned int a2, size_t __nbyte, unint64_t a4, unsigned int a5, _QWORD *a6, int a7, uint64_t a8)
{
  unsigned int v14;
  _QWORD *v15;
  int8x8_t v16;
  uint8x8_t v17;
  unint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t slot_for_oid_and_type;
  _DWORD *v25;
  int v27;
  NSObject *v28;
  char *v29;
  char *v30;
  const char *v31;
  int v32;
  NSObject *v33;
  char *v34;
  const char *v35;
  void *value_out;
  _BYTE buf[12];
  __int16 v38;
  int v39;
  __int16 v40;
  unsigned int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (a7)
    v14 = 16;
  else
    v14 = 0;
  v15 = *(_QWORD **)(a1 + 992);
  v16 = (int8x8_t)v15[1];
  if (!*(_QWORD *)&v16)
    goto LABEL_20;
  v17 = (uint8x8_t)vcnt_s8(v16);
  v17.i16[0] = vaddlv_u8(v17);
  if (v17.u32[0] > 1uLL)
  {
    v18 = a4;
    if (*(_QWORD *)&v16 <= a4)
      v18 = a4 % *(_QWORD *)&v16;
  }
  else
  {
    v18 = (*(_QWORD *)&v16 - 1) & a4;
  }
  v19 = *(uint64_t ***)(*v15 + 8 * v18);
  if (!v19 || (v20 = *v19) == 0)
  {
LABEL_20:
    value_out = 0;
    v22 = _page_fetch_with_fd(a1, &value_out, a2, __nbyte, a7, buf, 0xFFFFFFFFLL, 0);
    if ((_DWORD)v22)
      return v22;
    v23 = *((_DWORD *)value_out + 3);
    if ((v23 & 0xF0) != 0)
    {
      v27 = *__error();
      v28 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "page_find_oid_with_flags";
        v38 = 1024;
        v39 = 5902;
        v40 = 1024;
        v41 = a2;
        _os_log_error_impl(&dword_1B8270000, v28, OS_LOG_TYPE_ERROR, "%s:%d: page_find_oid: ERR: tried to read attr name table data! pgnum 0x%x\n", buf, 0x18u);
      }
      *__error() = v27;
      v29 = __si_assert_copy_extra_2151(0, -1);
      v30 = v29;
      v31 = "";
      if (v29)
        v31 = v29;
      __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5903, v31);
    }
    else
    {
      if ((v23 & 8) == 0)
      {
        *(_QWORD *)buf = 0;
        slot_for_oid_and_type = find_slot_for_oid_and_type(a1, (uint64_t)value_out, a4, a5, (unint64_t *)buf, 0, 1);
        v25 = value_out;
        if ((_DWORD)slot_for_oid_and_type)
        {
          v22 = slot_for_oid_and_type;
          page_release(a1, value_out, a2, v14, 0);
        }
        else
        {
          *a6 = *(_QWORD *)buf;
          if (a8)
          {
            v22 = 0;
            *(_DWORD *)(a8 + 8) = v14;
            *(_DWORD *)(a8 + 12) = a2;
            *(_QWORD *)a8 = v25;
          }
          else
          {
            page_release(a1, v25, a2, v14, 0);
            return 0;
          }
        }
        return v22;
      }
      v32 = *__error();
      v33 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "page_find_oid_with_flags";
        v38 = 1024;
        v39 = 5908;
        v40 = 1024;
        v41 = a2;
        _os_log_error_impl(&dword_1B8270000, v33, OS_LOG_TYPE_ERROR, "%s:%d: page_find_oid: ERR: page is still compressed! pgnum 0x%x\n", buf, 0x18u);
      }
      *__error() = v32;
      v34 = __si_assert_copy_extra_2151(0, -1);
      v30 = v34;
      v35 = "";
      if (v34)
        v35 = v34;
      __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 5909, v35);
    }
    free(v30);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  while (1)
  {
    v21 = v20[1];
    if (v21 == a4)
      break;
    if (v17.u32[0] > 1uLL)
    {
      if (v21 >= *(_QWORD *)&v16)
        v21 %= *(_QWORD *)&v16;
    }
    else
    {
      v21 &= *(_QWORD *)&v16 - 1;
    }
    if (v21 != v18)
      goto LABEL_20;
LABEL_13:
    v20 = (uint64_t *)*v20;
    if (!v20)
      goto LABEL_20;
  }
  if (v20[2] != a4)
    goto LABEL_13;
  if (*((_DWORD *)v20 + 6) == 3)
  {
    v22 = 2;
  }
  else
  {
    v22 = 0;
    *a6 = v20[4];
  }
  if (a8)
  {
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
  }
  return v22;
}

uint64_t page_release(uint64_t a1, _DWORD *value, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v5;
  _DWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void **v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _QWORD *v20;
  pthread_rwlock_t *v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  int v47;
  NSObject *v48;
  int v50;
  _QWORD *v51;
  int *v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  int v56;
  signed int v57;
  int v58;
  BOOL v59;
  int v60;
  uint64_t v61;
  int *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  const char *v74;
  char *v75;
  char *v76;
  const char *v77;
  int v78;
  NSObject *v79;
  int v80;
  NSObject *v81;
  int v82;
  char *v83;
  char *v84;
  const char *v85;
  _QWORD v86[5];
  void *v87;
  _DWORD *v88;
  _BYTE buf[32];
  __int128 v90;
  uint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v88 = value;
  if (!value)
    return 22;
  LODWORD(v5) = a5;
  v8 = value;
  if (!a5)
  {
    v10 = 4;
    if ((value[3] & 4) == 0)
      v10 = 1;
    LODWORD(v5) = value[v10];
  }
  v87 = 0;
  v11 = *(_QWORD *)(a1 + 928);
  if ((a4 & 0x10) != 0)
  {
    pthread_rwlock_rdlock((pthread_rwlock_t *)(v11 + 8));
    v18 = *(unsigned int *)(v11 + 220);
    if ((int)v18 >= 1)
    {
      v19 = (_DWORD *)(v11 + 252);
      v20 = (_QWORD *)(v11 + 272);
      while ((_DWORD *)*v20 != v8 || *v19 != a3)
      {
        ++v19;
        v20 += 6;
        if (!--v18)
          goto LABEL_30;
      }
      v21 = (pthread_rwlock_t *)(v11 + 8);
      goto LABEL_84;
    }
LABEL_30:
    pthread_rwlock_unlock((pthread_rwlock_t *)(v11 + 8));
    if ((a4 & 1) == 0)
    {
LABEL_12:
      v15 = atomic_load((unsigned int *)(*(_QWORD *)(a1 + 928) + 248));
      if (v15 > a3)
      {
        if (sdb_init_cache_onceToken != -1)
          dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_27_11254);
        if (sdb_init_cache_status != 1 || !cache_release_value((cache_t *)sdbLargeCacheArray, v8))
          return 0;
      }
      if ((a4 & 8) != 0)
      {
        if ((*((_BYTE *)v8 + 13) & 0x10) != 0)
          goto LABEL_21;
        v16 = *(_QWORD *)(a1 + 928);
        pthread_rwlock_wrlock((pthread_rwlock_t *)(v16 + 8));
        if (*(_BYTE *)(v16 + 232))
        {
LABEL_20:
          pthread_rwlock_unlock((pthread_rwlock_t *)(v16 + 8));
LABEL_21:
          if ((a4 & 4) != 0)
            return 0;
LABEL_66:
          v38 = *(_QWORD *)(a1 + 928);
          pthread_rwlock_rdlock((pthread_rwlock_t *)(v38 + 8));
          v39 = *(unsigned int *)(v38 + 220);
          if ((int)v39 >= 1)
          {
            v40 = (_DWORD *)(v38 + 252);
            v41 = (_QWORD *)(v38 + 272);
            while ((_DWORD *)*v41 != v8 || *v40 != a3)
            {
              ++v40;
              v41 += 6;
              if (!--v39)
                goto LABEL_72;
            }
            v21 = (pthread_rwlock_t *)(v38 + 8);
            goto LABEL_84;
          }
LABEL_72:
          pthread_rwlock_unlock((pthread_rwlock_t *)(v38 + 8));
          v42 = *(_QWORD *)(a1 + 928);
          v43 = v88;
          pthread_rwlock_rdlock((pthread_rwlock_t *)(v42 + 8));
          v44 = *(unsigned int *)(v42 + 220);
          if ((int)v44 >= 1)
          {
            v45 = (_QWORD *)(v42 + 272);
            while ((_DWORD *)*v45 != v43)
            {
              v45 += 6;
              if (!--v44)
                goto LABEL_76;
            }
            v21 = (pthread_rwlock_t *)(v42 + 8);
LABEL_84:
            pthread_rwlock_unlock(v21);
            return 0;
          }
LABEL_76:
          pthread_rwlock_unlock((pthread_rwlock_t *)(v42 + 8));
          v46 = v43;
LABEL_77:
          free(v46);
          return 0;
        }
        v50 = *(_DWORD *)(v16 + 220);
        if (v50 >= 1)
        {
          v51 = (_QWORD *)(v16 + 272);
          v52 = (int *)(v16 + 252);
          v53 = *(unsigned int *)(v16 + 220);
          do
          {
            v54 = *v52++;
            if (v54 == a3)
              goto LABEL_20;
            if ((_DWORD *)*v51 == v8)
            {
              v72 = __si_assert_copy_extra_268();
              v73 = v72;
              v74 = "";
              if (v72)
                v74 = v72;
              __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 1251, "dbp != cache->cache_entries[i].cache_dbps", v74);
              free(v73);
              if (__valid_fs(-1))
              {
                MEMORY[0xBAD] = -559038737;
                abort();
              }
              MEMORY[0xC00] = -559038737;
              abort();
            }
            v51 += 6;
          }
          while (--v53);
        }
        if (v50)
        {
          v55 = atomic_load((unsigned int *)(v16 + 228));
          v56 = 100 * v55;
          v57 = atomic_load((unsigned int *)(v16 + 216));
          v58 = *(_DWORD *)(v16 + 220);
          v59 = v56 > v57 && v58 <= 3;
          if (v59)
          {
            if (*(_DWORD *)(v16 + 4 * (v58 - 1) + 252))
            {
              v60 = atomic_load((unsigned int *)(v16 + 228));
              v58 = *(_DWORD *)(v16 + 220);
              if (v60 > 10 * v58 && MEMORY[0xFFFFFC030] <= 0x32u)
              {
                *(_DWORD *)(v16 + 220) = ++v58;
                atomic_store(0, (unsigned int *)(v16 + 228));
                atomic_store(0, (unsigned int *)(v16 + 216));
              }
            }
          }
          v61 = v58 - 1;
          if (!*(_DWORD *)(v16 + 48 * v61 + 288))
          {
LABEL_107:
            v58 = v61;
            goto LABEL_111;
          }
          if (v58 >= 4)
          {
            v61 = v58;
            v62 = (int *)(v16 + 48 * v58 + 240);
            while (1)
            {
              v59 = v61-- < 1;
              if (v59)
                goto LABEL_20;
              v63 = *v62;
              v62 -= 12;
              if (!v63)
                goto LABEL_107;
            }
          }
        }
        else
        {
          v58 = 2;
          *(_DWORD *)(v16 + 220) = 2;
          if (!*(_DWORD *)(v16 + 336))
          {
            v58 = 1;
LABEL_111:
            v65 = v16 + 48 * v58;
            v66 = v65 + 272;
            v68 = *(void **)(v65 + 272);
            v67 = *(void **)(v65 + 280);
            v69 = *(_DWORD *)(v65 + 288);
            *(_OWORD *)&buf[12] = *(_OWORD *)(v65 + 304);
            *(_OWORD *)buf = *(_OWORD *)(v65 + 292);
            if (!v69)
            {
              v70 = v58;
              if (v67)
                free(v67);
              *(_DWORD *)(v16 + 4 * v70 + 252) = a3;
              *(_QWORD *)v66 = v8;
              *(_QWORD *)(v66 + 8) = 0;
              *(_DWORD *)(v66 + 16) = 0;
              *(_OWORD *)(v66 + 32) = *(_OWORD *)&buf[12];
              *(_OWORD *)(v66 + 20) = *(_OWORD *)buf;
              v71 = v16 + 48 * (int)v70;
              *(_QWORD *)(v71 + 296) = 0;
              *(_DWORD *)(v71 + 304) = 0;
              *(_QWORD *)(v71 + 312) = 0;
              db_cache_mru((__n128 *)v16, v70);
              pthread_rwlock_unlock((pthread_rwlock_t *)(v16 + 8));
              v46 = v68;
              goto LABEL_77;
            }
            goto LABEL_20;
          }
        }
        *(_DWORD *)(v16 + 220) = v58 + 1;
        atomic_store(0, (unsigned int *)(v16 + 228));
        atomic_store(0, (unsigned int *)(v16 + 216));
        goto LABEL_111;
      }
LABEL_64:
      if ((a4 & 4) != 0)
        return 0;
      v8 = v88;
      goto LABEL_66;
    }
  }
  else
  {
    v86[0] = MEMORY[0x1E0C809B0];
    v86[1] = 0x40000000;
    v86[2] = __page_release_block_invoke;
    v86[3] = &__block_descriptor_tmp_135_10172;
    v86[4] = a1;
    v12 = *(unsigned int *)(v11 + 220);
    if ((int)v12 >= 1)
    {
      v13 = 0;
      v14 = (const void **)(v11 + 272);
      while (*v14 != value)
      {
        ++v13;
        v14 += 6;
        if (v12 == v13)
          goto LABEL_11;
      }
      v30 = v11 + 4 * v13;
      v32 = *(_DWORD *)(v30 + 252);
      v31 = (_DWORD *)(v30 + 252);
      v33 = v32 | a4 & 1;
      if (v32 != a3 && v33 != 0)
      {
        v75 = __si_assert_copy_extra_268();
        v76 = v75;
        v77 = "";
        if (v75)
          v77 = v75;
        __message_assert("%s:%u: failed assertion '%s' %s Pgnum: %u dbp:%p cached_pgnum::%u cached_dbp:%p index:%d size:%d", "page-cache.c", 949, "cache->cache_pgnum[i]==pgnum || (cache->cache_pgnum[i]==0 && (flags & PAGE_DIRTY)==0)", v77, a3, v8, *v31, *v14, v13, *(_DWORD *)(v11 + 220));
        free(v76);
        if (__valid_fs(-1))
        {
          MEMORY[0xBAD] = -559038737;
          abort();
        }
        MEMORY[0xC00] = -559038737;
        abort();
      }
      if ((a4 & 1) != 0)
      {
        v35 = v11 + 48 * v13;
        *(_DWORD *)(v35 + 288) = 1;
        free(*(void **)(v35 + 280));
        *(_QWORD *)(v35 + 280) = 0;
      }
      if ((a4 & 2) != 0)
      {
        *(_OWORD *)&buf[16] = 0u;
        v90 = 0u;
        *(_OWORD *)buf = 0u;
        *(_DWORD *)buf = a3;
        *(_OWORD *)&buf[8] = *(_OWORD *)v14;
        v36 = v11 + 48 * v13;
        *(_DWORD *)&buf[24] = *(_DWORD *)(v36 + 288);
        *(_QWORD *)&v90 = *(_QWORD *)(v36 + 296);
        DWORD2(v90) = *(_DWORD *)(v36 + 304);
        v91 = *(_QWORD *)(v36 + 312);
        __page_release_block_invoke((uint64_t)v86, (uint64_t)buf);
        v17 = 0;
        *(_OWORD *)v14 = *(_OWORD *)&buf[8];
        *(_DWORD *)(v36 + 288) = *(_DWORD *)&buf[24];
        *(_QWORD *)(v36 + 296) = v90;
        *(_DWORD *)(v36 + 304) = DWORD2(v90);
        *(_QWORD *)(v36 + 312) = v91;
        *v31 = *(_DWORD *)buf;
        return v17;
      }
      return 0;
    }
LABEL_11:
    if ((a4 & 1) == 0)
      goto LABEL_12;
  }
  _add_dirty_chunk(a1, a3, v5, (a4 >> 14) & 1);
  v22 = *(_QWORD *)(a1 + 928);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v23 = atomic_load((unsigned int *)(v22 + 248));
  if (v23 > a3)
  {
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)buf = *(_QWORD *)v22;
    *(_DWORD *)&buf[8] = a3;
    _cache_remove((uint64_t *)buf);
  }
  v24 = v8[3];
  if ((v24 & 0xF0) == 0)
  {
    v25 = 4;
    if ((v24 & 4) == 0)
      v25 = 1;
    if ((_DWORD)v5 == v8[v25])
    {
      page_cache_add(*(unsigned int **)(a1 + 928), &v88, a3, 0);
      v8 = v88;
      v24 = v88[3];
    }
  }
  if ((v24 & 0xC) == 0)
    goto LABEL_59;
  if ((*(_DWORD *)(a1 + 804) & 2) != 0)
    v26 = 3;
  else
    v26 = 2;
  v27 = page_compress(a1, (size_t)v8, (int8x16_t **)&v87, 0, v26);
  if ((_DWORD)v27)
  {
    v17 = v27;
    if ((_DWORD)v27 == 7)
    {
      v78 = *__error();
      v79 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "page_release";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2815;
        _os_log_error_impl(&dword_1B8270000, v79, OS_LOG_TYPE_ERROR, "%s:%d: page_release: ERROR: page_fetch caller responsible for making sure compressed page fits after changes.\n", buf, 0x12u);
      }
      *__error() = v78;
      v80 = *__error();
      v81 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        v82 = v88[2];
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "page_release";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2816;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = a3;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v82;
        *(_WORD *)&buf[30] = 1024;
        LODWORD(v90) = v5;
        _os_log_error_impl(&dword_1B8270000, v81, OS_LOG_TYPE_ERROR, "%s:%d: page_release: page %d used_bytes %d disk page size %d\n", buf, 0x24u);
      }
      *__error() = v80;
      v83 = __si_assert_copy_extra_2151(0, -1);
      v84 = v83;
      if (v83)
        v85 = v83;
      else
        v85 = "";
      __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 2817, v85);
      free(v84);
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    v28 = *__error();
    v29 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      v64 = v88[2];
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "page_release";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2822;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v17;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = a3;
      *(_WORD *)&buf[30] = 1024;
      LODWORD(v90) = v64;
      WORD2(v90) = 1024;
      *(_DWORD *)((char *)&v90 + 6) = v5;
      _os_log_error_impl(&dword_1B8270000, v29, OS_LOG_TYPE_ERROR, "%s:%d: page_release: ERR: compress error %d with page %d used_bytes %d disk page size %d\n", buf, 0x2Au);
    }
    *__error() = v28;
    *(_DWORD *)(a1 + 4) |= 2u;
    *(_DWORD *)(a1 + 800) = v17;
    return v17;
  }
  if (!v87)
  {
    v8 = v88;
LABEL_59:
    if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
    {
      db2_swap_page((size_t)v8);
      v8 = v88;
    }
    v5 = (int)v5;
    v37 = sdb_pwrite(*(_QWORD *)(a1 + 848), (uint64_t)v8, (int)v5, (unint64_t)a3 << *(_DWORD *)(a1 + 12));
    if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
      db2_swap_page((size_t)v88);
    goto LABEL_63;
  }
  v5 = (int)v5;
  v37 = sdb_pwrite(*(_QWORD *)(a1 + 848), (uint64_t)v87, (int)v5, (unint64_t)a3 << *(_DWORD *)(a1 + 12));
  free(v87);
LABEL_63:
  if (v37 == v5)
    goto LABEL_64;
  *(_DWORD *)(a1 + 4) |= 2u;
  v47 = *__error();
  v48 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "page_release";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2859;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    _os_log_error_impl(&dword_1B8270000, v48, OS_LOG_TYPE_ERROR, "%s:%d: Failed writing pgnum %d", buf, 0x18u);
  }
  *__error() = v47;
  if (!*__error())
    *__error() = 22;
  *(_DWORD *)(a1 + 800) = *__error();
  return *__error();
}

void _SIPreHeatIndex(uint64_t a1, const void *a2, char a3)
{
  _BYTE *v6;

  if (*(_QWORD *)(a1 + 1184) && *(_QWORD *)(a1 + 1088))
  {
    v6 = malloc_type_calloc(1uLL, 0x18uLL, 0x1020040A95220FAuLL);
    v6[16] = a3;
    *(_QWORD *)v6 = a1;
    if (a2)
      CFRetain(a2);
    *((_QWORD *)v6 + 1) = a2;
    si_enqueue_work(*(_QWORD *)(a1 + 1088), (uint64_t)si_preheat, (uint64_t)v6);
  }
}

uint64_t SIQuerySetBatchingParameters(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, float a5, float a6, float a7)
{
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  const __CFArray *v17;
  int v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  CFRange v23;

  v13 = result;
  v14 = (_OWORD *)(result + 324);
  v15 = *(_OWORD *)(result + 324);
  v16 = *(_OWORD *)(result + 340);
  v17 = *(const __CFArray **)(result + 16);
  if (v17)
  {
    v21 = *(_OWORD *)(result + 340);
    v22 = *(_OWORD *)(result + 324);
    v23.length = CFArrayGetCount(*(CFArrayRef *)(result + 16));
    v23.location = 0;
    result = CFArrayContainsValue(v17, v23, CFSTR("_kMDItemSDBInfo"));
    v16 = v21;
    v15 = v22;
    if (a3 >= 0x64)
      v18 = 100;
    else
      v18 = a3;
    if (a4 >= 0x64)
      v19 = 100;
    else
      v19 = a4;
    if (a2 >= 0x64)
      v20 = 100;
    else
      v20 = a2;
    if ((_DWORD)result)
    {
      a3 = v18;
      a4 = v19;
      a2 = v20;
    }
  }
  *(_BYTE *)(v13 + 356) = 1;
  *(float *)(v13 + 300) = a5;
  *(_DWORD *)(v13 + 304) = a2;
  *(float *)(v13 + 308) = a6;
  *(_DWORD *)(v13 + 312) = a3;
  *(float *)(v13 + 316) = a7;
  *(_DWORD *)(v13 + 320) = a4;
  *v14 = v15;
  v14[1] = v16;
  return result;
}

void __si_enqueue_work_bulk_with_qos_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  qos_class_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  si_push_tag_locked(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), *(const void ***)(a1 + 48), *(unsigned int *)(a1 + 80));
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(uint64_t **)(a1 + 32);
  v4 = *(_DWORD *)(a1 + 84);
  v5 = *(_QWORD *)(a1 + 64);
  v6 = **(_QWORD **)(a1 + 72);
  if (*(_QWORD *)(a1 + 48))
  {
    if (*(_BYTE *)(a1 + 88))
      si_enqueue_barrier_inner_with_qos(v2, v3, v4, v5, v6);
    else
      si_enqueue_work_inner_with_qos(v2, v3, v4, v5, v6);
    if (*(_DWORD *)(a1 + 80) >= 2u)
    {
      v7 = 1;
      do
        si_enqueue_work_inner_with_qos(*(_QWORD *)(a1 + 56), *(uint64_t **)(a1 + 32), *(qos_class_t *)(a1 + 84), *(_QWORD *)(a1 + 64), *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v7++));
      while (v7 < *(unsigned int *)(a1 + 80));
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 88))
      si_enqueue_barrier_inner_with_qos(v2, v3, v4, v5, v6);
    else
      si_enqueue_work_inner_with_qos(v2, v3, v4, v5, v6);
    if (*(_DWORD *)(a1 + 80) >= 2u)
    {
      v8 = 1;
      do
        si_enqueue_work_inner_with_qos(*(_QWORD *)(a1 + 56), *(uint64_t **)(a1 + 32), *(qos_class_t *)(a1 + 84), *(_QWORD *)(a1 + 64), *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v8++));
      while (v8 < *(unsigned int *)(a1 + 80));
    }
  }
}

void si_enqueue_barrier_inner_with_qos(uint64_t a1, uint64_t *a2, qos_class_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  NSObject *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  _opaque_pthread_t *v16;
  pthread_override_s *v17;
  dispatch_block_t v18;
  char *v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  _QWORD block[5];

  if (!a2)
  {
    v19 = __si_assert_copy_extra_521(-1);
    v20 = v19;
    v21 = "";
    if (v19)
      v21 = v19;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIScheduler.c", 533, "queue", v21);
    free(v20);
    if (__valid_fs(-1))
      v22 = 2989;
    else
      v22 = 3072;
    *(_DWORD *)v22 = -559038737;
    abort();
  }
  if (a1 && (v8 = *a2) != 0 && !*(_DWORD *)(v8 + 88) && !*(_BYTE *)(v8 + 48))
  {
    v10 = (unsigned int *)(a1 + 112);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = a2[2];
    *(int64x2_t *)(a2 + 7) = vaddq_s64(*(int64x2_t *)(a2 + 7), vdupq_n_s64(1uLL));
    v13 = malloc_type_malloc(0x48uLL, 0x10A0040047F2C8DuLL);
    v13[4] = a5;
    v13[5] = 0;
    v13[6] = 0;
    v13[7] = a5 ^ a4;
    *v13 = a1;
    v13[1] = v8;
    v13[2] = a2;
    v13[3] = a4;
    v14 = *(_DWORD *)(a1 + 116) == 1 && (a2[7] & 0xF) == 0;
    *((_BYTE *)v13 + 64) = v14;
    if (a3 <= QOS_CLASS_USER_INITIATED)
      v15 = 25;
    else
      v15 = a3;
    if (gTurboMode)
      a3 = v15;
    if (*(_QWORD *)(v8 + 160) && *(_DWORD *)(v8 + 184) < a3)
    {
      pthread_mutex_lock(*(pthread_mutex_t **)(v8 + 8));
      v16 = *(_opaque_pthread_t **)(v8 + 160);
      if (v16 && *(_DWORD *)(v8 + 184) < a3)
      {
        v17 = *(pthread_override_s **)(v8 + 176);
        *(_QWORD *)(v8 + 176) = pthread_override_qos_class_start_np(v16, a3, 0);
        *(_DWORD *)(v8 + 184) = a3;
        if (v17)
          pthread_override_qos_class_end_np(v17);
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)(v8 + 8));
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 0x40000000;
    block[2] = __enqueue_barrier_with_qos_block_invoke;
    block[3] = &__block_descriptor_tmp_45_948;
    block[4] = v13;
    v18 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, a3, 0, block);
    dispatch_barrier_async(v12, v18);
    _Block_release(v18);
  }
  else
  {
    ((void (*)(uint64_t, uint64_t))a4)(a5, 1);
  }
}

void si_push_tag_locked(uint64_t a1, void *key, const void **a3, uint64_t a4)
{
  const __CFDictionary *Mutable;
  const CFDictionaryKeyCallBacks *v9;
  __CFBag *Value;
  const void *v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  int v17;
  void *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (dword_1EF19FC9C >= 5)
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(a1 + 72);
      v17 = 134218240;
      v18 = key;
      v19 = 2048;
      v20 = v14;
      _os_log_impl(&dword_1B8270000, v13, OS_LOG_TYPE_DEFAULT, "Push %p to tags %p", (uint8_t *)&v17, 0x16u);
    }
    *__error() = v12;
  }
  Mutable = *(const __CFDictionary **)(a1 + 72);
  if (!Mutable)
  {
    if (*(_BYTE *)(a1 + 33))
      v9 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    else
      v9 = (const CFDictionaryKeyCallBacks *)&kUInt64DictionaryKeyCallBacks;
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v9, MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 72) = Mutable;
  }
  Value = (__CFBag *)CFDictionaryGetValue(Mutable, key);
  if (Value
    || (Value = CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &kUint64BagCallbacks),
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 72), key, Value),
        CFRelease(Value),
        dword_1EF19FC9C < 5))
  {
    if (a3)
    {
LABEL_10:
      while (a4)
      {
        v11 = *a3++;
        CFBagAddValue(Value, v11);
        --a4;
      }
      return;
    }
  }
  else
  {
    v15 = *__error();
    v16 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 134217984;
      v18 = key;
      _os_log_impl(&dword_1B8270000, v16, OS_LOG_TYPE_DEFAULT, "Created tag bag for %p", (uint8_t *)&v17, 0xCu);
    }
    *__error() = v15;
    if (a3)
      goto LABEL_10;
  }
  for (; a4; --a4)
    CFBagAddValue(Value, 0);
}

void SISynchedOp(uint64_t a1, int a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v7;
  void *v8;

  if (a1 && *(_QWORD *)(a1 + 1048))
  {
    v7 = malloc_type_malloc(0x20uLL, 0x10A0040D5506429uLL);
    v7[1] = a1;
    v7[2] = a3;
    *v7 = a4;
    *((_DWORD *)v7 + 6) = a2;
    if (a2 == 1)
      v8 = delayed_op_final;
    else
      v8 = delayed_op0;
    si_enqueue_work_with_qos(*(_QWORD *)(a1 + 1096), 5, (uint64_t)v8, (uint64_t)v7);
  }
  else
  {
    a3(a4, 1);
  }
}

void *ContentIndexDocSetsCreateIterator(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6)
{
  size_t v12;
  BOOL v13;
  _BYTE *v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void (*v25)(_QWORD);
  int v26;
  NSObject *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  _DWORD *v31;
  unsigned int *v32;
  unsigned int v33;
  int v35;
  NSObject *v36;
  os_log_type_t v37;
  CFMutableSetRef Mutable;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  size_t v49;
  size_t *v50;
  BOOL v51;
  uint64_t v52;
  char *v53;
  _QWORD *v54;
  size_t v55;
  size_t v56;
  char *v57;
  _DWORD *v58;
  int v59;
  int v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  int v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint8_t *v68;
  void *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t i;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(_QWORD);
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  const void *__src;
  int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  void *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  uint8_t v98[8];
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint8_t *v102;
  __int16 v103;
  uint8_t *v104;
  uint8_t buf[4];
  const char *v106;
  __int16 v107;
  int v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a3 + 8))
    return 0;
  v97 = 0;
  v12 = 8 * a2 + 80;
  if (v12 >> 17)
    v13 = 1;
  else
    v13 = *MEMORY[0x1E0C85AD8] >= v12;
  if (!v13)
    ++sTotal_4476;
  v14 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v12, 0x31F9A007uLL);
  if (!v14 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
  }
  v97 = v14;
  v14[55] = a5;
  v95 = 0;
  v96 = 8;
  v94 = 1;
  v15 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x40uLL, 0x6085D6BuLL);
  if (!v15 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
  }
  v93 = v15;
  *((_QWORD *)v97 + 1) = a6;
  v16 = *(_QWORD *)(*a1 + 56);
  if (*(_BYTE *)(v16 + 8))
  {
    v84 = a4;
    do
    {
      v17 = __ldxr(exceptionSequenceNum);
      v18 = v17 + 1;
    }
    while (__stxr(v17 + 1, exceptionSequenceNum));
    v19 = setThreadIdAndInfo(-1, (__int128 *)sIndexExceptionCallbacks, v16, 0, v18);
    v91 = HIDWORD(v19);
    v92 = v19;
    v89 = v21;
    v90 = v20;
    v22 = *(_QWORD *)&threadData[18 * v19 + 2];
    v23 = v22 + 320 * HIDWORD(v19);
    *(_BYTE *)(v23 + 216) = 0;
    v24 = *(_DWORD *)(v23 + 312);
    v25 = *(void (**)(_QWORD))(v23 + 224);
    if (v25)
      v25(*(_QWORD *)(v22 + 320 * HIDWORD(v19) + 288));
    if (_setjmp((int *)v23))
    {
      v26 = *__error();
      v27 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v106 = "ContentIndexDocSetsCreateIterator";
        v107 = 1024;
        v108 = 1729;
        _os_log_error_impl(&dword_1B8270000, v27, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v26;
      *(_DWORD *)(v23 + 312) = v24;
      if (__THREAD_SLOT_KEY)
      {
        v28 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (v28)
          goto LABEL_23;
      }
      else
      {
        makeThreadId();
        v28 = pthread_getspecific(__THREAD_SLOT_KEY);
        if (v28)
        {
LABEL_23:
          v29 = v28;
          if ((unint64_t)v28 < 0x801)
            goto LABEL_24;
        }
      }
      makeThreadId();
      v29 = pthread_getspecific(__THREAD_SLOT_KEY);
LABEL_24:
      v30 = (uint64_t)v29 - 1;
      v31 = &threadData[18 * ((uint64_t)v29 - 1)];
      v33 = v31[14];
      v32 = v31 + 14;
      if (v33 > v89)
      {
        do
          CIOnThreadCleanUpPop(v30);
        while (*v32 > v89);
      }
      dropThreadId(v92, 1, v18);
      CICleanUpReset(v92, v90);
      if (!v94)
        return v97;
      goto LABEL_32;
    }
    v87 = v24;
    Mutable = CFSetCreateMutable((CFAllocatorRef)kCIQueryZoneAllocator, 0, 0);
    if (a2 == 1)
    {
      v39 = *a1;
      if (*(_DWORD *)(*a1 + 48) == 1)
      {
        *((_DWORD *)v97 + 7) = *(_DWORD *)(*(_QWORD *)(v39 + 56) + 60);
        *((_DWORD *)v97 + 10) = *((_DWORD *)v97 + 7);
        if (*((_DWORD *)v97 + 10))
        {
          *((_DWORD *)v97 + 11) = 1;
          *((_BYTE *)v97 + 56) = 1;
          do
            v40 = __ldaxr((unsigned int *)v39);
          while (__stlxr(v40 + 1, (unsigned int *)v39));
          *((_QWORD *)v97 + 10) = v39;
          do
            v41 = __ldaxr((unsigned int *)a3);
          while (__stlxr(v41 + 1, (unsigned int *)a3));
          *(_QWORD *)v97 = a3;
          *((_QWORD *)v97 + 9) = 1;
          free(v93);
        }
        else
        {
          free(v97);
          v97 = 0;
        }
        v64 = v87;
        if (Mutable)
          CFRelease(Mutable);
        goto LABEL_95;
      }
      v88 = v18;
      ContentIndexDocSetCreatePhraseIterators(v39, *(_QWORD *)(a3 + 16), *(unsigned int *)(*(_QWORD *)(v39 + 56) + 60), *(unsigned __int8 *)(a3 + 41));
      ContentIndexDocSetAppendIterators(v39, &v96, &v95, &v93, Mutable);
      do
        v45 = __ldaxr((unsigned int *)v39);
      while (__stlxr(v45 + 1, (unsigned int *)v39));
      *((_QWORD *)v97 + 10) = v39;
    }
    else
    {
      v88 = v18;
      if (a2 >= 1)
      {
        v42 = 0;
        do
        {
          v43 = a1[v42];
          ContentIndexDocSetCreatePhraseIterators(v43, *(_QWORD *)(a3 + 16), *(unsigned int *)(*(_QWORD *)(v43 + 56) + 60), *(unsigned __int8 *)(a3 + 41));
          ContentIndexDocSetAppendIterators(v43, &v96, &v95, &v93, Mutable);
          do
            v44 = __ldaxr((unsigned int *)v43);
          while (__stlxr(v44 + 1, (unsigned int *)v43));
          *((_QWORD *)v97 + v42++ + 10) = v43;
        }
        while (v42 != a2);
      }
    }
    CFRelease(Mutable);
    v46 = v95;
    v47 = *(_QWORD *)(*a1 + 56);
    v48 = 8 * v95;
    v49 = 8 * v95 + 160;
    v50 = (size_t *)MEMORY[0x1E0C85AD8];
    if (v49 >> 17)
      v51 = 1;
    else
      v51 = *MEMORY[0x1E0C85AD8] >= v49;
    if (!v51)
      ++sTotal_9165;
    v52 = *(_QWORD *)(a3 + 8);
    __src = v93;
    v85 = *(_DWORD *)(v47 + 60);
    v53 = (char *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v49, 0x31F9A007uLL);
    if (!v53 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    *((_QWORD *)v53 + 2) = v46;
    *((_QWORD *)v53 + 3) = 1;
    v54 = v53 + 8;
    if (v46)
    {
      v54 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v48 + 16, 0x6085D6BuLL);
      if (!v54 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
      }
      *((_QWORD *)v53 + 1) = v54;
    }
    *v54 = 0;
    *((_QWORD *)v53 + 7) = -1;
    *((_QWORD *)v53 + 8) = -1;
    *((_QWORD *)v53 + 10) = v52;
    *((_DWORD *)v53 + 25) = v85;
    v53[40] = 0;
    if (v84)
    {
      v55 = v48;
      *((_QWORD *)v53 + 6) = 0;
      v56 = ((*MEMORY[0x1E0C85AC0] + *(_QWORD *)(v52 + 24)) & ~*MEMORY[0x1E0C85AC0]) + *v50;
      *((_QWORD *)v53 + 11) = v56;
      v57 = (char *)mmap(0, v56, 1, 2, *(_DWORD *)(v52 + 4488), 0);
      *((_QWORD *)v53 + 4) = v57;
      if (v57 == (char *)-1)
      {
        v83 = *__error();
        bzero(buf, 0x400uLL);
        v58 = *(_DWORD **)(v52 + 4480);
        *(_QWORD *)v98 = 0;
        v59 = _fd_acquire_fd((uint64_t)v58, v98);
        if (v59 != -1)
        {
          v60 = v59;
          fcntl(v59, 50, buf);
          _fd_release_fd(v58, v60, 0, *(uint64_t *)v98);
        }
        v80 = *__error();
        v61 = _SILogForLogForCategory(10);
        v62 = dword_1EF19FCB4 < 3;
        if (os_log_type_enabled(v61, (os_log_type_t)(dword_1EF19FCB4 < 3)))
        {
          v63 = *((_QWORD *)v53 + 11);
          *(_DWORD *)v98 = 67109634;
          *(_DWORD *)&v98[4] = v83;
          v99 = 2048;
          v100 = v63;
          v101 = 2080;
          v102 = buf;
          _os_log_impl(&dword_1B8270000, v61, v62, "*warn* Failed to map postings: %d, %zd, %s", v98, 0x1Cu);
        }
        *__error() = v80;
        *__error() = v83;
      }
      else
      {
        if (mmap(&v57[*((_QWORD *)v53 + 11) - *v50], *v50, 1, 4114, -83886080, 0) != (void *)-1)
        {
          v53[40] = 1;
LABEL_83:
          v70 = 0;
          *((_DWORD *)v53 + 18) = v85;
          *((_DWORD *)v53 + 19) = v85;
          *((_QWORD *)v53 + 19) = 0;
          v71 = *(_QWORD *)(v52 + 24) >> 1;
          *((_QWORD *)v53 + 13) = v71;
          if (v71 >= *(_QWORD *)(v52 + 32))
            v70 = v71;
          *((_QWORD *)v53 + 13) = v70;
          memcpy(v53 + 160, __src, v48);
          *((_QWORD *)v53 + 14) = v46;
          *((_QWORD *)v53 + 15) = __src;
          if (v46 >= 1)
          {
            for (i = 0; i != v46; ++i)
            {
              v74 = &v53[8 * i];
              if ((*(unsigned int (**)(void))(*((_QWORD *)v74 + 20) + 40))())
              {
                v75 = *((_QWORD *)v74 + 20);
                if ((*(_QWORD *)(v75 + 8) & 0x3FFFFFFFFFFFFFFFuLL) <= *((_QWORD *)v53 + 13))
                {
                  v73 = *((_QWORD *)v53 + 19);
                  *((_QWORD *)v53 + 19) = v73 + 1;
                  *(_QWORD *)&v53[8 * v73 + 160] = v75;
                }
                else
                {
                  ipqpush((uint64_t)(v53 + 8), v75);
                }
              }
              *v53 |= *(_BYTE *)(*((_QWORD *)v74 + 20) + 64);
            }
          }
          v93 = 0;
          *((_QWORD *)v97 + 2) = v53;
          *((_BYTE *)v97 + 52) = 0;
          *((_DWORD *)v97 + 7) = *(_DWORD *)(a3 + 36);
          *((_DWORD *)v97 + 6) = *(_DWORD *)(a3 + 32);
          do
            v76 = __ldaxr((unsigned int *)a3);
          while (__stlxr(v76 + 1, (unsigned int *)a3));
          *(_QWORD *)v97 = a3;
          *((_DWORD *)v97 + 10) = 0;
          *((_DWORD *)v97 + 11) = 0;
          *((_QWORD *)v97 + 9) = a2;
          *((_BYTE *)v97 + 58) = *v53;
          v64 = v87;
          v18 = v88;
LABEL_95:
          v94 = 0;
          v77 = *(_QWORD *)&threadData[18 * v92 + 2];
          v78 = v77 + 320 * v91;
          *(_DWORD *)(v78 + 312) = v64;
          v79 = *(void (**)(_QWORD))(v78 + 232);
          if (v79)
            v79(*(_QWORD *)(v77 + 320 * v91 + 288));
          dropThreadId(v92, 0, v18);
          if (!v94)
            return v97;
          goto LABEL_32;
        }
        v82 = *__error();
        bzero(buf, 0x400uLL);
        fd_realpath(*(_DWORD **)(v52 + 4480), buf);
        v81 = *__error();
        v65 = _SILogForLogForCategory(10);
        v66 = dword_1EF19FCB4 < 3;
        if (os_log_type_enabled(v65, (os_log_type_t)(dword_1EF19FCB4 < 3)))
        {
          v67 = *((_QWORD *)v53 + 11);
          v68 = (uint8_t *)*MEMORY[0x1E0C85AD8];
          *(_DWORD *)v98 = 67109890;
          *(_DWORD *)&v98[4] = v82;
          v99 = 2048;
          v100 = v67;
          v101 = 2048;
          v102 = v68;
          v103 = 2080;
          v104 = buf;
          _os_log_impl(&dword_1B8270000, v65, v66, "*warn* Failed to allocated guard page error %d, %zd, %lu, %s", v98, 0x26u);
        }
        *__error() = v81;
        *__error() = v82;
        munmap(*((void **)v53 + 4), *((_QWORD *)v53 + 11));
      }
      v48 = v55;
      if (v53[40])
        goto LABEL_83;
    }
    *((_QWORD *)v53 + 6) = -1;
    v69 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x10004uLL, 0x6085D6BuLL);
    if (!v69)
      _log_fault_for_malloc_failure();
    *((_QWORD *)v53 + 4) = v69;
    *((_QWORD *)v53 + 11) = 0x10000;
    goto LABEL_83;
  }
  v35 = *__error();
  v36 = _SILogForLogForCategory(0);
  v37 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v36, v37))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1B8270000, v36, v37, "Skipping because index is shut down", buf, 2u);
  }
  *__error() = v35;
  if (!v94)
    return v97;
LABEL_32:
  free(v93);
  free(v97);
  return 0;
}

void ContentIndexDocSetCreatePhraseIterators(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  int v6;
  unint64_t v10;
  size_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int *v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  size_t v30;
  size_t v31;
  unsigned int v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  _QWORD *v37;
  unsigned int v38;
  BOOL v39;
  char v40;
  qos_class_t v41;
  NSObject *v42;
  int v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  int32x2_t v47;
  uint64_t v48;
  int32x2_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char *v58;
  char *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  unsigned int v64;
  uint64_t v65;
  uint8_t buf[8];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 > 9)
    assert_invalid_doc_type((_DWORD *)a1);
  v6 = 1 << v5;
  if ((v6 & 0x10F) == 0)
  {
    if ((v6 & 0xF0) != 0)
    {
      if (*(_DWORD *)(a1 + 96))
      {
        v10 = 0;
        do
          ContentIndexDocSetCreatePhraseIterators(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v10++), a2, a3, a4);
        while (v10 < *(unsigned int *)(a1 + 96));
      }
      return;
    }
    if (*(_QWORD *)(a1 + 112))
      return;
    v62 = (uint64_t)&v62;
    MEMORY[0x1E0C80A78](a1);
    v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFF0);
    bzero(v12, v11);
    v13 = *(unsigned int *)(a1 + 96);
    if (!(_DWORD)v13)
      goto LABEL_17;
    v14 = *(_QWORD *)(a1 + 72);
    if ((_DWORD)v13 == 1)
    {
      v15 = 0;
    }
    else
    {
      v15 = v13 & 0xFFFFFFFE;
      v16 = v14 + 8;
      v17 = v12 + 8;
      v18 = v15;
      do
      {
        v19 = *(_QWORD *)(*(_QWORD *)v16 + 72);
        *(v17 - 1) = *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72);
        *v17 = v19;
        v16 += 16;
        v17 += 2;
        v18 -= 2;
      }
      while (v18);
      if (v15 == v13)
        goto LABEL_17;
    }
    v20 = v13 - v15;
    v21 = 8 * v15;
    v22 = &v12[8 * v15];
    v23 = (uint64_t *)(v14 + v21);
    do
    {
      v24 = *v23++;
      *(_QWORD *)v22 = *(_QWORD *)(v24 + 72);
      v22 += 8;
      --v20;
    }
    while (v20);
LABEL_17:
    v63 = v12;
    v25 = (unsigned int *)(*(_QWORD *)(a1 + 56) + 28);
    v26 = atomic_load(v25);
    v27 = atomic_load(v25);
    v28 = atomic_load((unsigned int *)(*(_QWORD *)(a1 + 56) + 28));
    v29 = *(unsigned int *)(a1 + 96);
    v30 = 8 * v29;
    v31 = 8 * v29 + 3352;
    v65 = v29;
    if (v29 <= 0x3E5C && *MEMORY[0x1E0C85AD8] < v31)
      ++sTotal_9165;
    v64 = v27 & 0x40;
    v32 = v26 & 4;
    v33 = v28 & 0xC;
    v34 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v31, 0x31F9A007uLL);
    v35 = (uint64_t)v34;
    if (v34)
    {
      v36 = v65;
      v34[1] = v65;
      v34[2] = 1;
      v37 = v34;
      if (v36)
      {
        v37 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v30 + 16, 0x6085D6BuLL);
        if (!v37)
          _log_fault_for_malloc_failure();
        *(_QWORD *)v35 = v37;
      }
      *v37 = 0;
    }
    else
    {
      _log_fault_for_malloc_failure();
      pqinit_ItemIteratorRef(0, v65);
    }
    v38 = v64 >> 6;
    *(_QWORD *)(v35 + 3160) = a2;
    *(_QWORD *)(v35 + 3168) = 0x10000;
    *(_BYTE *)(v35 + 3176) = v32 >> 2;
    if (v32)
      v39 = 0;
    else
      v39 = v33 == 8;
    v40 = v39;
    *(_BYTE *)(v35 + 3177) = v40;
    *(_BYTE *)(v35 + 3178) = 0;
    *(_BYTE *)(v35 + 3179) = v38;
    v41 = qos_class_self();
    v42 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x1E0C80D50], v41, 0);
    *(_QWORD *)(v35 + 3184) = dispatch_queue_create("com.apple.spotlight.positions", v42);
    v43 = gCPUCount;
    if (gCPUCount >= 0x10)
      v43 = 16;
    *(_DWORD *)(v35 + 3180) = v43;
    if (v43)
    {
      v44 = 0;
      do
        *(_QWORD *)(v35 + 3192 + 8 * v44++) = dispatch_queue_create_with_target_V2(0, 0, *(dispatch_queue_t *)(v35 + 3184));
      while (v44 < *(unsigned int *)(v35 + 3180));
    }
    *(_QWORD *)(v35 + 3320) = dispatch_semaphore_create(16);
    if (v64 && (_DWORD)a4)
    {
      v45 = gCPUCount;
      if (gCPUCount >= v65)
        v45 = v65;
      if (v45 >= 8)
        v45 = 8;
      *(_DWORD *)(v35 + 3348) = v45;
      if (v45)
      {
        v46 = 0;
        v47 = vdup_n_s32(a3);
        v48 = v35;
        do
        {
          v49 = (int32x2_t *)(v35 + 392 * v46);
          v49[4] = (int32x2_t)-1;
          v49[3] = (int32x2_t)malloc_type_malloc(0x10004uLL, 0xCB95AF59uLL);
          v49[5] = v47;
          v49[7].i32[0] = 1;
          v49[51] = (int32x2_t)(v35 + 3160);
          v49[25] = 0;
          v49[26] = 0;
          if (*(_DWORD *)(v35 + 3180))
          {
            v50 = 0;
            do
            {
              *(_DWORD *)(v48 + 4 * v50 + 344) = 0;
              *(_QWORD *)(v48 + 8 * v50++ + 216) = 0;
            }
            while (v50 < *(unsigned int *)(v35 + 3180));
          }
          ++v46;
          v48 += 392;
        }
        while (v46 < *(unsigned int *)(v35 + 3348));
      }
    }
    else
    {
      *(_DWORD *)(v35 + 3348) = 0;
      initFileState(v35 + 24, v35 + 3160, a3);
    }
    *(_QWORD *)(v35 + 3336) = 0;
    v51 = *(_QWORD *)(a2 + 24) >> 1;
    *(_QWORD *)(v35 + 3328) = v51;
    if (v51 >= *(_QWORD *)(a2 + 32))
      v52 = v51;
    else
      v52 = 0;
    *(_QWORD *)(v35 + 3328) = v52;
    memcpy((void *)(v35 + 3352), v63, v30);
    if ((_DWORD)v65)
    {
      v53 = 0;
      do
      {
        PositionIterator_Split(*(_QWORD *)(v35 + v53 + 3352), *(_QWORD *)(v35 + 3328));
        v54 = *(_QWORD **)(v35 + v53 + 3352);
        v55 = *(_QWORD *)(v35 + 3328);
        if ((*v54 & 0x3FFFFFFFFFFFFFFFLL) != 0)
        {
          if (v55)
            v56 = *v54 > (unint64_t)(2 * v55);
          else
            v56 = 0;
          if (v56)
          {
            v58 = __si_assert_copy_extra(0);
            v59 = v58;
            v60 = "";
            if (v58)
              v60 = v58;
            __message_assert("%s:%u: failed assertion '%s' %s ", "PayloadIterator.c", 4899, "!bulkIter->split ||bulkIter->future[i]->ptr <= 2*bulkIter->split", v60);
            free(v59);
            if (__valid_fs(-1))
              v61 = 2989;
            else
              v61 = 3072;
            *(_DWORD *)v61 = -559038737;
            abort();
          }
          ipqpush(v35, (uint64_t)v54);
        }
        else if (v55)
        {
          v57 = *(_QWORD *)(v35 + 3336);
          *(_QWORD *)(v35 + 3336) = v57 + 1;
          *(_QWORD *)(v35 + 8 * v57 + 3352) = v54;
        }
        v53 += 8;
      }
      while (v30 != v53);
      v52 = *(_QWORD *)(v35 + 3328);
    }
    if (!v52 && *(uint64_t *)(v35 + 3336) >= 1 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "renedebug\n", buf, 2u);
    }
    *(_QWORD *)(a1 + 112) = v35;
  }
}

void ContentIndexDocSetAppendIterators(uint64_t a1, uint64_t *a2, uint64_t *a3, void **a4, __CFSet *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  if (!CFSetContainsValue(a5, (const void *)a1))
  {
    CFSetAddValue(a5, (const void *)a1);
    switch(*(_DWORD *)(a1 + 48))
    {
      case 0:
        return;
      case 1:
      case 2:
        if (*(_DWORD *)(a1 + 96))
        {
          v11 = 0;
          do
            ContentIndexDocSetAppendIterators(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v11++), a2, a3, a4, a5);
          while (v11 < *(unsigned int *)(a1 + 96));
        }
        break;
      case 3:
      case 8:
        v12 = *(_QWORD *)(a1 + 64);
        if (v12)
        {
          v13 = *a3;
          v14 = *a2;
          v15 = *a4;
          if (*a3 >= *a2)
          {
            *a2 = 2 * v14;
            v15 = malloc_type_realloc(v15, 16 * v14, 0x2004093837F09uLL);
            *a4 = v15;
            v12 = *(_QWORD *)(a1 + 64);
            v13 = *a3;
          }
          *a3 = v13 + 1;
          *((_QWORD *)v15 + v13) = v12;
        }
        break;
      case 4:
      case 5:
      case 6:
      case 7:
      case 9:
        if (*(_DWORD *)(a1 + 96))
        {
          v10 = 0;
          do
            ContentIndexDocSetAppendIterators(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * v10++), a2, a3, a4, a5);
          while (v10 < *(unsigned int *)(a1 + 96));
        }
        break;
      default:
        assert_invalid_doc_type((_DWORD *)a1);
    }
  }
}

void SIResultQueueCancel(uint64_t a1)
{
  char *v2;
  char *v3;
  void (*v4)(_QWORD, uint64_t);
  uint64_t v5;
  int v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t v10[16];

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
  if (*(_BYTE *)(a1 + 12))
  {
    pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
    v2 = 0;
    v3 = 0;
    v4 = 0;
  }
  else
  {
    v3 = *(char **)(a1 + 24);
    v2 = *(char **)(a1 + 32);
    v5 = *(unsigned int *)(a1 + 40);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v4 = *(void (**)(_QWORD, uint64_t))(a1 + 48);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 12) = 1;
    v6 = *__error();
    v7 = _SILogForLogForCategory(1);
    v8 = 2 * (dword_1EF19FC90 < 4);
    if (os_log_type_enabled(v7, v8))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1B8270000, v7, v8, "Canceling result queue", v10, 2u);
    }
    *__error() = v6;
    pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
    if ((_DWORD)v5)
    {
      v9 = 0;
      do
      {
        (*(void (**)(_QWORD, uint64_t))&v3[v9])(*(_QWORD *)&v2[v9], 1);
        v9 += 8;
      }
      while (8 * v5 != v9);
    }
  }
  free(v2);
  free(v3);
  if (v4)
    v4(*(_QWORD *)(a1 + 56), 1);
}

uint64_t si_writeBackAndIndexWithLiveQueryToggle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, unsigned __int8 a12, int a13, int a14, NSObject *a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  __n128 v22;
  const void *v23;
  CFTypeID v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  CFDictionaryRef *v31;
  float v32;
  uint64_t v33;
  CFStringRef v34;
  _BOOL4 v35;
  char v36;
  uint64_t *v37;
  uint64_t *v38;
  const __CFString *Value;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  const void *v43;
  const void *v44;
  CFTypeID TypeID;
  const void *v46;
  const void *v47;
  CFTypeID v48;
  const void *v49;
  const void *v50;
  int Path;
  uint64_t v52;
  unsigned int tv_sec;
  uint64_t tv_usec;
  const __CFAllocator *allocator;
  __CFDictionary *v56;
  __CFDictionary *v57;
  CFDictionaryRef v58;
  CFDictionaryRef v59;
  CFDictionaryRef v60;
  CFDictionaryRef v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  BOOL v66;
  char v67;
  _BOOL4 HasContent;
  char *v69;
  int v70;
  int v71;
  off_t v72;
  size_t v73;
  UInt8 *v74;
  UInt8 *v75;
  char v77;
  unsigned int v78;
  CFTypeRef *v79;
  const void *v80;
  const void *v81;
  uint64_t v82;
  int v83;
  NSObject *v84;
  char v85;
  CFStringRef v86;
  CFStringRef v87;
  int *v88;
  int v89;
  NSObject *v90;
  __darwin_time_t v91;
  const char *v92;
  NSObject *v93;
  uint32_t v94;
  CFDictionaryRef *v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  BOOL v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  _DWORD *SyncIndex;
  __darwin_time_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  _BOOL4 v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  int v129;
  unint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  _BOOL4 v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  NSObject *v138;
  os_log_type_t v139;
  uint64_t v140;
  __darwin_time_t v141;
  uint64_t v142;
  CFMutableSetRef Mutable;
  _QWORD *v144;
  uint64_t v145;
  int v146;
  NSObject *v147;
  int v148;
  int v149;
  NSObject *v150;
  __darwin_time_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  char v155;
  CFDictionaryRef v156;
  __darwin_time_t v157;
  uint64_t *v158;
  uint64_t *v159;
  const __CFDictionary *v160;
  unint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  const void *v167;
  int v168;
  NSObject *v169;
  _BOOL4 v170;
  unsigned int v171;
  CFTypeID v172;
  __darwin_time_t v173;
  CFTypeID v174;
  pthread_mutex_t *v175;
  uint64_t v176;
  int v177;
  NSObject *v178;
  os_log_type_t v179;
  __darwin_time_t v180;
  uint64_t v181;
  int v182;
  uint64_t updated;
  int v184;
  NSObject *v185;
  int v186;
  NSObject *v187;
  int v188;
  NSObject *v189;
  int *v190;
  _DWORD *v191;
  int v192;
  _DWORD *v193;
  int v194;
  __darwin_time_t v195;
  uint64_t v196;
  uint64_t v197;
  __darwin_time_t v198;
  _DWORD *v199;
  int v200;
  _DWORD *v201;
  int v202;
  _DWORD *v203;
  int v204;
  _DWORD *v205;
  int v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  int v210;
  NSObject *v211;
  os_log_type_t v212;
  DocStore *v213;
  int v214;
  int v215;
  NSObject *v216;
  os_log_type_t v217;
  int v218;
  NSObject *v219;
  uint64_t *v220;
  const void *v221;
  _QWORD *v222;
  _QWORD *v223;
  unsigned __int8 v224;
  unsigned int v225;
  CFStringRef v226;
  uint64_t v228;
  int v229;
  __darwin_suseconds_t v230;
  __darwin_time_t v231;
  uint64_t v232;
  __darwin_time_t v233;
  __darwin_suseconds_t v234;
  uint64_t v235;
  __darwin_time_t v236;
  char *v237;
  char *v238;
  const char *v239;
  uint64_t v240;
  int v241;
  __darwin_suseconds_t v242;
  __darwin_time_t v243;
  uint64_t v244;
  __darwin_time_t v245;
  __darwin_suseconds_t v246;
  char *v247;
  char *v248;
  const char *v249;
  uint64_t v250;
  char *v251;
  const char *v252;
  uint64_t v253;
  NSObject *v254;
  int v255;
  int v256;
  NSObject *v257;
  int v258;
  NSObject *v259;
  uint64_t v260;
  __darwin_time_t v261;
  int v262;
  NSObject *v263;
  int v264;
  char *v265;
  char *v266;
  const char *v267;
  char *v268;
  char *v269;
  const char *v270;
  uint64_t v271;
  uint64_t v272;
  NSObject *log;
  int v274;
  int v275;
  NSObject *v276;
  const __CFDictionary *theDict;
  const __CFString *v278;
  int v279;
  __darwin_time_t v280;
  __darwin_time_t v281;
  __darwin_time_t v282;
  uint64_t v283;
  _BOOL4 v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  __CFDictionary *v288;
  uint64_t *v289;
  const void *v290;
  CFDictionaryRef *v291;
  uint64_t v292;
  _QWORD v293[2];
  void (*v294)(uint64_t, uint64_t);
  void *v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t v298;
  CFTypeID *v299;
  CFTypeID v300;
  int v301;
  int v302;
  char v303;
  char v304;
  char v305;
  __darwin_time_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  char v312;
  __int16 v313;
  _QWORD *v314;
  unint64_t v315[2];
  timeval valuePtr[64];
  unint64_t v317[4096];
  _BYTE v318[4096];
  CFTypeID v319;
  uint64_t v320;
  _BYTE buf[12];
  __int16 v322;
  int v323;
  uint64_t v324;

  v15 = MEMORY[0x1E0C80A78](a1);
  v290 = v23;
  v24 = v15;
  v324 = *MEMORY[0x1E0C80C00];
  v25 = *(_QWORD *)(v15 + 1184);
  v26 = *(_QWORD *)*v19;
  v313 = 0;
  v292 = v25;
  if ((*(_BYTE *)(v25 + 4) & 0x40) != 0)
  {
    v40 = 89;
    si_makeUnavailable(v15, 89, 2, 18, (uint64_t)"si_writeBackAndIndex detected corrupted sdb on entry");
    return v40;
  }
  v27 = v21;
  v28 = v20;
  v29 = v19;
  v30 = v18;
  v31 = (CFDictionaryRef *)v17;
  v32 = v22.n128_f32[0];
  v33 = v16;
  v286 = v26;
  v34 = *(CFStringRef *)(v17 + 8);
  v35 = v34 != 0;
  if (v34)
  {
    LODWORD(v319) = 1;
    db_add_field((int *)v25, (_DWORD **)v19, 0, "_kMDItemContentIndexVersion", 0, 0x108u, 6, (unsigned __int8 *)&v319, v22, 4);
  }
  v36 = atomic_load((unsigned int *)(v33 + 28));
  if ((v36 & 3) != 0 || *(_BYTE *)(v33 + 15163))
  {
    v237 = __si_assert_copy_extra_521(-1);
    v238 = v237;
    v239 = "";
    if (v237)
      v239 = v237;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIStoring.c", 1833, "ContentIndexWritable(content_index)", v239);
LABEL_438:
    free(v238);
    if (__valid_fs(-1))
      v253 = 2989;
    else
      v253 = 3072;
    *(_DWORD *)v253 = -559038737;
    abort();
  }
  _checkIndexSetValidity(*(int **)(v24 + 1384));
  _checkIndexSetValidity(*(int **)(v24 + 1392));
  v37 = *(uint64_t **)(v24 + 1384);
  v319 = v24;
  __checkIndexSetDocIdOrder(v24, v37);
  v38 = *(uint64_t **)(v24 + 1392);
  v319 = v24;
  __checkIndexSetDocIdOrder(v24, v38);
  v291 = v31;
  v283 = v30;
  theDict = *v31;
  if (*(_BYTE *)(v24 + 2072))
    Value = (const __CFString *)CFDictionaryGetValue(*v31, CFSTR("_kMDItemBundleID"));
  else
    Value = 0;
  v278 = Value;
  v312 = 0;
  si_populategroup(v24, v29, Value, (v27 >> 2) & 1, (v27 >> 6) & 1, (_BYTE *)&v313 + 1, &v313, &v312);
  v41 = (uint64_t *)*v29;
  v314 = (_QWORD *)*v29;
  v308 = 0;
  v309 = &v308;
  v310 = 0x2000000000;
  v311 = 0;
  bzero(&v319, 0x1000uLL);
  v307 = 0;
  bzero(v318, 0x1000uLL);
  v287 = v28;
  v289 = v29;
  if (*(_QWORD *)(v24 + 6624))
  {
    if (*(_QWORD *)(v24 + 1416))
    {
      if (v28 != 5 || (v27 & 0x20) != 0 || v34 || !v41[3] || (v42 = v41[4], v42 == -1) || !v290 || !v42)
      {
        if (*(_BYTE *)(v24 + 2072))
        {
          if (v30 != -1 && !v41[3])
            goto LABEL_37;
          v43 = CFDictionaryGetValue(theDict, CFSTR("kMDItemFileProviderID"));
          if (!v43 || (v44 = v43, TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v44)))
          {
            if ((v27 & 8) != 0)
            {
              Path = directoryStoreWriterGetPath(*(_QWORD *)(v24 + 6624), v41[3], (uint64_t)&v320);
              v307 = Path;
              if (Path || v41[3] == 2)
              {
                v319 = v41[3];
                v307 = Path + 1;
              }
            }
            goto LABEL_37;
          }
          v46 = CFDictionaryGetValue(theDict, CFSTR("_kMDItemExternalID"));
          if (!v46)
            goto LABEL_37;
          v47 = v46;
          v48 = CFStringGetTypeID();
          v63 = v48 == CFGetTypeID(v47);
          v29 = v289;
          if (!v63)
            goto LABEL_37;
          v49 = CFDictionaryGetValue(theDict, CFSTR("FPDomainIdentifier"));
          if (v49)
          {
            v50 = v49;
            CFStringGetTypeID();
            CFGetTypeID(v50);
          }
          v80 = CFDictionaryGetValue(theDict, CFSTR("FPParentFileItemID"));
          if (v80)
          {
            v81 = v80;
            CFStringGetTypeID();
            CFGetTypeID(v81);
          }
          v29 = v289;
          v82 = computePath(v24);
          if (!(_DWORD)v82)
            goto LABEL_37;
          v40 = v82;
          v83 = *__error();
          v84 = _SILogForLogForCategory(4);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
          {
            v235 = *v41;
            v236 = v41[3];
            LODWORD(valuePtr[0].tv_sec) = 136316162;
            *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = (__darwin_time_t)"si_writeBackAndIndexWithLiveQueryToggle";
            *((_WORD *)&valuePtr[0].tv_usec + 2) = 1024;
            *(__darwin_suseconds_t *)((char *)&valuePtr[0].tv_usec + 6) = 1893;
            WORD1(valuePtr[1].tv_sec) = 1024;
            HIDWORD(valuePtr[1].tv_sec) = v40;
            LOWORD(valuePtr[1].tv_usec) = 2048;
            *(_QWORD *)((char *)&valuePtr[1].tv_usec + 2) = v235;
            WORD1(valuePtr[2].tv_sec) = 2048;
            *(__darwin_time_t *)((char *)&valuePtr[2].tv_sec + 4) = v236;
            _os_log_error_impl(&dword_1B8270000, v84, OS_LOG_TYPE_ERROR, "%s:%d: computePath error: %d oid: %lld parent: %lld", (uint8_t *)valuePtr, 0x2Cu);
          }
          *__error() = v83;
          v29 = v289;
        }
        else
        {
          v40 = computePath(v24);
        }
        if (v40 > 0x3C || ((1 << v40) & 0x1000000000000005) == 0)
        {
          v284 = 0;
          v288 = 0;
          goto LABEL_386;
        }
      }
    }
  }
LABEL_37:
  v52 = *v29;
  v314 = (_QWORD *)*v29;
  valuePtr[0].tv_sec = 0;
  *(_QWORD *)&valuePtr[0].tv_usec = 0;
  if (gettimeofday(valuePtr, 0))
  {
    tv_sec = time(0);
    tv_usec = 0;
  }
  else
  {
    tv_sec = valuePtr[0].tv_sec;
    tv_usec = valuePtr[0].tv_usec;
  }
  *(_QWORD *)(v52 + 16) = tv_usec + 1000000 * tv_sec;
  bzero(v317, 0x8001uLL);
  allocator = _SIStackAllocatorCreate(v317, 0x8000, indexingZone);
  v56 = decodeDBOToDictionary((int *)v292, v52, 0, 0x2000, 2, *(_DWORD *)(v24 + 2028), *(_DWORD *)(v24 + 2060), (v27 >> 10) & 1, 1, allocator);
  v57 = v56;
  v306 = 0;
  v288 = v56;
  if (v34 == (CFStringRef)*MEMORY[0x1E0C9B0D0])
  {
    CFDictionarySetValue(v56, 0, v34);
    v35 = 0;
    goto LABEL_59;
  }
  if (v34)
    CFDictionarySetValue(v56, 0, v34);
  v58 = v291[5];
  if (v58)
  {
    CFDictionarySetValue(v57, (const void *)2, v58);
    v35 = 1;
  }
  v59 = v291[6];
  if (v59)
  {
    CFDictionarySetValue(v57, (const void *)3, v59);
    v35 = 1;
  }
  v60 = v291[7];
  if (v60)
  {
    CFDictionarySetValue(v57, (const void *)4, v60);
    v35 = 1;
  }
  v61 = v291[8];
  if (!v61)
  {
LABEL_59:
    LOBYTE(v62) = 0;
    v65 = *(unsigned __int8 *)(v24 + 2072);
    if (v34)
      v66 = 0;
    else
      v66 = v65 == 0;
    v67 = !v66;
    if (v66)
      v34 = 0;
    v64 = v35;
    if (!v35 && (v67 & 1) == 0)
    {
      if ((v27 & 0x100) == 0)
      {
        v34 = 0;
        v64 = 0;
        LOBYTE(v62) = 0;
        goto LABEL_102;
      }
      HasContent = objectHasContent(*(int **)(v24 + 1184), v52);
      v65 = *(unsigned __int8 *)(v24 + 2072);
      if (HasContent)
      {
        bzero(valuePtr, 0x400uLL);
        v69 = si_cache_relative_path_for_oid(*(_QWORD *)v52, "txt", (char *)valuePtr, v65 != 0);
        if (!v69 || (v70 = openat(*(_DWORD *)(v24 + 32), v69, 0), v70 == -1))
        {
          v62 = 0;
          v34 = 0;
          goto LABEL_101;
        }
        v71 = v70;
        fcntl(v70, 48, 1);
        fcntl(v71, 76, 1);
        v72 = lseek(v71, 0, 2);
        if (v72 >= 1)
        {
          v73 = v72;
          v74 = (UInt8 *)malloc_type_zone_malloc((malloc_zone_t *)indexingZone, v72, 0xB079FE1CuLL);
          if (v74)
          {
            v75 = v74;
            if (v73 == pread(v71, v74, v73, 0))
            {
              v34 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v75, v73, 0x8000100u, 1u, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
              if (v34)
              {
                CFDictionarySetValue(v288, 0, v34);
                CFRelease(v34);
                v62 = 1;
              }
              else
              {
                v62 = 0;
              }
              goto LABEL_100;
            }
            free(v75);
          }
        }
        v62 = 0;
        v34 = 0;
LABEL_100:
        close(v71);
LABEL_101:
        v64 = v62;
        if (*(_BYTE *)(v24 + 2072))
          goto LABEL_82;
        goto LABEL_102;
      }
      LOBYTE(v62) = 0;
      v64 = 0;
      v34 = 0;
    }
    if (v65)
      goto LABEL_82;
LABEL_102:
    v78 = v287;
    v79 = (CFTypeRef *)v291;
    if ((v27 & 0x200) != 0 && (*(_DWORD *)(v52 + 40) & 0x20) == 0)
    {
      if (HIBYTE(v313) == 1)
        v85 = 1;
      else
        v85 = v62;
      if ((v85 & 1) == 0)
      {
        si_update_text_content_cache_for_oid(v24, *(_QWORD *)v52, v34, a15);
        v52 = (uint64_t)v314;
      }
      si_update_icon_cache_for_oid(v24, *(_QWORD *)v52, v291[2]);
    }
    goto LABEL_110;
  }
  CFDictionarySetValue(v57, (const void *)5, v61);
  LOBYTE(v62) = 0;
  if (*(_BYTE *)(v24 + 2072))
    v63 = 0;
  else
    v63 = v34 == 0;
  if (v63)
    v34 = 0;
  v64 = 1;
  if (!*(_BYTE *)(v24 + 2072))
    goto LABEL_102;
LABEL_82:
  if ((v27 & 0x200) != 0 && (*(_DWORD *)(v52 + 40) & 0x20 | v27 & 0x80) == 0)
    v77 = v62;
  else
    v77 = 1;
  v78 = v287;
  if ((v77 & 1) == 0)
    si_update_text_content_cache_for_oid(v24, *(_QWORD *)v52, v34, a15);
  v79 = (CFTypeRef *)v291;
LABEL_110:
  if ((v27 & 0x8000) != 0)
  {
    if (v34)
    {
      if (v64)
      {
        v86 = SICreateStringByRemovingWhitespaceFromTextContent((const __CFAllocator *)*MEMORY[0x1E0C9AE00], v34, 1000);
        if (v86)
        {
          v87 = v86;
          *(_QWORD *)buf = 0;
          v315[0] = 0;
          v88 = (int *)db_copy_field_ids_with_buffer((int *)v292, "com_apple_mail_dateReceived", 0, 0);
          if (!db_get_field_by_id((int *)v292, (uint64_t)v314, v88, v315, (unint64_t *)buf)
            && v315[0]
            && *(_WORD *)v315[0] == 12)
          {
            if (CFAbsoluteTimeGetCurrent() - **(double **)buf <= 31536000.0)
            {
              v148 = si_text_store_put(v24);
              if (v148)
              {
                v149 = v148;
                v89 = *__error();
                v150 = _SILogForLogForCategory(8);
                if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(valuePtr[0].tv_sec) = 136315906;
                  *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = (__darwin_time_t)"si_writeBackAndIndexWithLiveQueryToggle";
                  *((_WORD *)&valuePtr[0].tv_usec + 2) = 1024;
                  *(__darwin_suseconds_t *)((char *)&valuePtr[0].tv_usec + 6) = 2035;
                  WORD1(valuePtr[1].tv_sec) = 1024;
                  HIDWORD(valuePtr[1].tv_sec) = v149;
                  LOWORD(valuePtr[1].tv_usec) = 2048;
                  *(_QWORD *)((char *)&valuePtr[1].tv_usec + 2) = v286;
                  _os_log_error_impl(&dword_1B8270000, v150, OS_LOG_TYPE_ERROR, "%s:%d: Doc store put operation failed. Error code: %d, oid: %lld", (uint8_t *)valuePtr, 0x22u);
                }
                goto LABEL_214;
              }
            }
            else if (dword_1EF19FCAC >= 5)
            {
              v89 = *__error();
              v90 = _SILogForLogForCategory(8);
              if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
              {
                v91 = **(_QWORD **)buf;
                LODWORD(valuePtr[0].tv_sec) = 134218240;
                *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = v91;
                *((_WORD *)&valuePtr[0].tv_usec + 2) = 2048;
                *(_QWORD *)((char *)&valuePtr[0].tv_usec + 6) = v286;
                v92 = "Did not put into doc store because timestamp is too old, timestamp is %f, doc id %lld";
                v93 = v90;
                v94 = 22;
LABEL_446:
                _os_log_impl(&dword_1B8270000, v93, OS_LOG_TYPE_DEFAULT, v92, (uint8_t *)valuePtr, v94);
                goto LABEL_214;
              }
              goto LABEL_214;
            }
          }
          else if (dword_1EF19FCAC >= 5)
          {
            v89 = *__error();
            v254 = _SILogForLogForCategory(8);
            if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(valuePtr[0].tv_sec) = 134217984;
              *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = v286;
              v92 = "Get timestamp failed for id : %lld, won't be put in doc store";
              v93 = v254;
              v94 = 12;
              goto LABEL_446;
            }
LABEL_214:
            *__error() = v89;
            v78 = v287;
          }
          free(v88);
          CFRelease(v87);
          v79 = (CFTypeRef *)v291;
        }
      }
    }
  }
  if ((v27 & 0x10000) != 0 && SpotlightCacheBundleID())
  {
    v95 = (CFDictionaryRef *)malloc_type_calloc(1uLL, 0x10uLL, 0x60040FAFB2B2FuLL);
    *v95 = (CFDictionaryRef)v24;
    v95[1] = (CFDictionaryRef)CFRetain(*v79);
    si_setCacheEntry(v95, 0);
  }
  v96 = v314;
  v97 = v314[4];
  v293[0] = MEMORY[0x1E0C809B0];
  v293[1] = 0x40000000;
  v294 = __si_writeBackAndIndexWithLiveQueryToggle_block_invoke;
  v295 = &unk_1E6E34D08;
  v303 = v312;
  v304 = (v27 & 0x20) >> 5;
  v98 = v307;
  v298 = v307;
  v299 = &v319;
  v305 = v64;
  v300 = v24;
  v296 = &v308;
  v297 = v289;
  v99 = v313;
  v100 = v313 == 8 && *(_BYTE *)(v24 + 2072) == 0;
  v101 = v27 | 2;
  v301 = v27;
  if (v100)
    v27 = v101;
  else
    v27 = v27;
  v302 = a13;
  v285 = v97;
  if (v78 != 6 && v78)
  {
    if (v78 == 4)
      v27 = v101;
    else
      v27 = v27;
  }
  else
  {
    if (si_getLiveIndex(*(_QWORD *)(v24 + 1384)) == (_DWORD *)v33)
      goto LABEL_159;
    v102 = *(uint64_t **)(v24 + 1384);
    v103 = *((unsigned int *)v102 + 2);
    if ((_DWORD)v103)
    {
      v104 = *v102;
      v105 = *(_QWORD *)(v104 + 8 * v103 - 8);
      if (v105 == v33)
        goto LABEL_159;
      v106 = v104 - 16;
      while (1)
      {
        v107 = v105;
        if (v103 < 2)
          break;
        v105 = *(_QWORD *)(v106 + 8 * v103--);
        if (v105 == v33)
          goto LABEL_150;
      }
      v108 = v105;
    }
    else
    {
      v108 = 0;
    }
    v107 = v33;
    if (v108 == v33)
    {
LABEL_150:
      if (v107)
      {
        v111 = *(_QWORD *)(v107 + 72);
        if (v111)
        {
          LODWORD(v112) = *(_DWORD *)(v33 + 60);
          v113 = *(_QWORD *)(v33 + 72);
          v112 = v112 >= 2 ? v112 : 0;
          v114 = v113 + v112;
          if (v113 + v112 + 1 >= v111)
          {
            v274 = *__error();
            v115 = _SILogForLogForCategory(0);
            v116 = 2 * (gSILogLevels[0] < 4);
            if (os_log_type_enabled(v115, v116))
            {
              LODWORD(valuePtr[0].tv_sec) = 134218240;
              *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = v111;
              *((_WORD *)&valuePtr[0].tv_usec + 2) = 2048;
              *(_QWORD *)((char *)&valuePtr[0].tv_usec + 6) = v114;
              _os_log_impl(&dword_1B8270000, v115, v116, "limit:%llu, used:%lld - using live index", (uint8_t *)valuePtr, 0x16u);
            }
            *__error() = v274;
            v27 = v101;
            v78 = v287;
          }
        }
      }
    }
    else
    {
      v109 = *(_QWORD *)(v24 + 1392);
      v110 = *(unsigned int *)(v109 + 8);
      while (v110 >= 1)
      {
        v107 = v108;
        v108 = *(_QWORD *)(*(_QWORD *)v109 + 8 * v110-- - 8);
        if (v108 == v33)
          goto LABEL_150;
      }
    }
  }
LABEL_159:
  if ((v27 & 2) == 0)
  {
    SyncIndex = si_getSyncIndex(v24, a10);
    goto LABEL_162;
  }
  SyncIndex = si_getLiveIndex(*(_QWORD *)(v24 + 1384));
  if (!*(_DWORD *)(*(_QWORD *)(v24 + 1384) + 8))
  {
    v251 = __si_assert_copy_extra_521(-1);
    v238 = v251;
    v252 = "";
    if (v251)
      v252 = v251;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIStoring.c", 2124, "db->liveSet->indexCount", v252);
    goto LABEL_438;
  }
LABEL_162:
  v33 = (uint64_t)SyncIndex;
  v118 = v96[4];
  if (v118 == -1)
  {
    v118 = 0;
    v96[4] = 0;
    goto LABEL_218;
  }
  if (v290 && v118)
  {
    v119 = si_indexForDocId(v24, v96[4]);
    if (v119)
    {
      v120 = v119;
    }
    else
    {
      v130 = si_indexIdForOID(v24, *v96);
      if (!v130)
        v130 = v96[4];
      v96[4] = v130;
      v120 = si_indexForDocId(v24, v130);
      v279 = *__error();
      v131 = _SILogForLogForCategory(0);
      v132 = 2 * (gSILogLevels[0] < 4);
      v276 = v131;
      v133 = os_log_type_enabled(v131, v132);
      if (v120)
      {
        if (v133)
        {
          v134 = v96[4];
          v135 = *v96;
          LODWORD(valuePtr[0].tv_sec) = 134218496;
          *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = v118;
          *((_WORD *)&valuePtr[0].tv_usec + 2) = 2048;
          *(_QWORD *)((char *)&valuePtr[0].tv_usec + 6) = v134;
          HIWORD(valuePtr[1].tv_sec) = 2048;
          *(_QWORD *)&valuePtr[1].tv_usec = v135;
          _os_log_impl(&dword_1B8270000, v276, v132, "DocID<->OID mapping out of sync. Had to do a brute force search. (Expected docId:%lld. Actual docID: %lld. OID: %llu", (uint8_t *)valuePtr, 0x20u);
        }
      }
      else
      {
        if (v133)
        {
          v141 = v96[4];
          v142 = *v96;
          LODWORD(valuePtr[0].tv_sec) = 134218240;
          *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = v141;
          *((_WORD *)&valuePtr[0].tv_usec + 2) = 2048;
          *(_QWORD *)((char *)&valuePtr[0].tv_usec + 6) = v142;
          _os_log_impl(&dword_1B8270000, v276, v132, "DocID<->OID mapping out of sync. Orphaned oid. (DocId:%lld. OID: %llu", (uint8_t *)valuePtr, 0x16u);
        }
        v120 = 0;
      }
      *__error() = v279;
      v118 = v96[4];
    }
    db_fast_dirty_datastore_if_necessary(v292);
    Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    v309[3] = (uint64_t)Mutable;
    v144 = v293;
    if (((v27 >> 14) & 1 & v64) == 0)
      v144 = 0;
    v145 = _CIUpdateContent(v33, v98, &v319, 0, v318, v286, (char)v99, v290, 0.0, v288, v96[4], &v306, v287, (uint64_t)Mutable, (*(_DWORD *)(v24 + 6584) >> 19) & 3, (uint64_t (*)(uint64_t))lowDiskSpaceCallback, v24, a13, 0,
             *(_QWORD *)(v24 + 2464),
             (v27 & 0x4000) != 0,
             (uint64_t)v144);
    if ((_DWORD)v145)
    {
      v40 = v145;
      v146 = *__error();
      v147 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
      {
        LODWORD(valuePtr[0].tv_sec) = 136315650;
        *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = (__darwin_time_t)"si_writeBackAndIndexWithLiveQueryToggle";
        *((_WORD *)&valuePtr[0].tv_usec + 2) = 1024;
        *(__darwin_suseconds_t *)((char *)&valuePtr[0].tv_usec + 6) = 2214;
        WORD1(valuePtr[1].tv_sec) = 1024;
        HIDWORD(valuePtr[1].tv_sec) = v40;
        _os_log_error_impl(&dword_1B8270000, v147, OS_LOG_TYPE_ERROR, "%s:%d: ContentIndexUpdateContent failed  (%d)", (uint8_t *)valuePtr, 0x18u);
      }
      v284 = 0;
      *__error() = v146;
LABEL_386:
      si_remove_text_content_cache_for_oid(v24, v286);
      v210 = *__error();
      v211 = _SILogForLogForCategory(8);
      v212 = 2 * (dword_1EF19FCAC < 4);
      if (os_log_type_enabled(v211, v212))
      {
        LODWORD(valuePtr[0].tv_sec) = 134217984;
        *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = v286;
        _os_log_impl(&dword_1B8270000, v211, v212, "Deleted document %lld", (uint8_t *)valuePtr, 0xCu);
      }
      *__error() = v210;
      v213 = *(DocStore **)(v24 + 1296);
      memset(valuePtr, 0, 512);
      snprintf((char *)valuePtr, 0x200uLL, "doc_store_delete_document(%p, %lld)", v213, v286);
      v315[0] = 0;
      v315[1] = 0;
      ScopeLogger::ScopeLogger((ScopeLogger *)v315, (const char *)valuePtr);
      if (v213)
      {
        *(_QWORD *)buf = v286;
        v214 = DocStore::DeleteDocumentsBulk(v213, 1, (unint64_t *)buf);
        v215 = *__error();
        v216 = _SILogForLogForCategory(8);
        v217 = 2 * (dword_1EF19FCAC < 4);
        if (os_log_type_enabled(v216, v217))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "doc_store_delete_document";
          v322 = 1024;
          v323 = v214;
          _os_log_impl(&dword_1B8270000, v216, v217, "%s returns %d\n", buf, 0x12u);
        }
        *__error() = v215;
        ScopeLogger::~ScopeLogger((ScopeLogger *)v315);
        if (!v214)
          goto LABEL_397;
      }
      else
      {
        ScopeLogger::~ScopeLogger((ScopeLogger *)v315);
        v214 = -14;
      }
      v218 = *__error();
      v219 = _SILogForLogForCategory(8);
      if (os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
      {
        LODWORD(valuePtr[0].tv_sec) = 136315906;
        *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = (__darwin_time_t)"si_writeBackAndIndexWithLiveQueryToggle";
        *((_WORD *)&valuePtr[0].tv_usec + 2) = 1024;
        *(__darwin_suseconds_t *)((char *)&valuePtr[0].tv_usec + 6) = 2475;
        WORD1(valuePtr[1].tv_sec) = 1024;
        HIDWORD(valuePtr[1].tv_sec) = v214;
        LOWORD(valuePtr[1].tv_usec) = 2048;
        *(_QWORD *)((char *)&valuePtr[1].tv_usec + 2) = v286;
        _os_log_error_impl(&dword_1B8270000, v219, OS_LOG_TYPE_ERROR, "%s:%d: Doc store delete operation failed. Error code: %d, oid: %lld", (uint8_t *)valuePtr, 0x22u);
      }
      *__error() = v218;
LABEL_397:
      v170 = v284;
      goto LABEL_398;
    }
    if (!v306 || v118 == v306)
    {
      if (v120 && (a13 || v99))
      {
        if (gSILogLevels[0] >= 5)
        {
          v258 = *__error();
          v259 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v259, OS_LOG_TYPE_DEFAULT))
          {
            v260 = *v96;
            v261 = v96[4];
            LODWORD(valuePtr[0].tv_sec) = 67109632;
            HIDWORD(valuePtr[0].tv_sec) = a13;
            LOWORD(valuePtr[0].tv_usec) = 2048;
            *(_QWORD *)((char *)&valuePtr[0].tv_usec + 2) = v260;
            WORD1(valuePtr[1].tv_sec) = 2048;
            *(__darwin_time_t *)((char *)&valuePtr[1].tv_sec + 4) = v261;
            _os_log_impl(&dword_1B8270000, v259, OS_LOG_TYPE_DEFAULT, "Update date to %d for oid %llx docId %llx", (uint8_t *)valuePtr, 0x1Cu);
          }
          *__error() = v258;
        }
        _CIUpdateGroupAndDate(v120, v96[4], (char)v99, a13);
      }
LABEL_210:
      v118 = 0;
    }
LABEL_223:
    v155 = v64;
    if (*(_BYTE *)(v24 + 2072))
    {
      if ((v96[5] & 0x20) == 0)
      {
        v156 = v291[2];
        if (v156)
          si_update_icon_cache_for_oid(v24, *v96, v156);
      }
    }
    if (!v33)
    {
      v247 = __si_assert_copy_extra_521(-1);
      v248 = v247;
      v249 = "";
      if (v247)
        v249 = v247;
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIStoring.c", 2239, "content_index", v249);
      free(v248);
      if (!__valid_fs(-1))
      {
        v250 = 3072;
LABEL_443:
        *(_DWORD *)v250 = -559038737;
        abort();
      }
LABEL_434:
      v250 = 2989;
      goto LABEL_443;
    }
    v157 = v306;
    if (v306)
      v96[4] = v306;
    db_validate_obj((int *)v292);
    v158 = *(uint64_t **)(v24 + 1384);
    valuePtr[0].tv_sec = v24;
    __checkIndexSetDocIdOrder(v24, v158);
    v159 = *(uint64_t **)(v24 + 1392);
    valuePtr[0].tv_sec = v24;
    __checkIndexSetDocIdOrder(v24, v159);
    db_validate_obj(*(int **)(v24 + 1184));
    v160 = v288;
    if (*((_DWORD *)v96 + 3) <= 0x30u)
    {
      v165 = db_delete_obj(*(int **)(v24 + 1184), (uint64_t)v96);
      if (v165 && dword_1EF19FCA8 >= 5)
      {
        v255 = v165;
        v282 = v157;
        v256 = *__error();
        v257 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v257, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(valuePtr[0].tv_sec) = 67109120;
          HIDWORD(valuePtr[0].tv_sec) = v255;
          _os_log_impl(&dword_1B8270000, v257, OS_LOG_TYPE_DEFAULT, "Deleting empty object failed with error %d", (uint8_t *)valuePtr, 8u);
        }
        *__error() = v256;
        v160 = v288;
        v157 = v282;
      }
LABEL_241:
      v280 = v157;
      v166 = HIBYTE(v313);
      if (HIBYTE(v313) | a12)
      {
        if (v160)
          v167 = CFDictionaryGetValue(v160, (const void *)*(unsigned int *)(v24 + 2012));
        else
          v167 = 0;
        if (*(_BYTE *)(v24 + 2072))
          v171 = 0;
        else
          v171 = 22;
        if ((_DWORD)v166 != a12)
        {
          valuePtr[0].tv_sec = 0;
          if ((_DWORD)v166)
          {
            if (v167)
            {
              v174 = CFGetTypeID(v167);
              if (v174 == CFNumberGetTypeID())
                CFNumberGetValue((CFNumberRef)v167, kCFNumberLongLongType, valuePtr);
            }
          }
          v175 = (pthread_mutex_t *)(v24 + 6976);
          pthread_mutex_lock((pthread_mutex_t *)(v24 + 6976));
          if (v166 < v171)
          {
            *(_QWORD *)(v24 + 8 * v166 + 7040) += valuePtr[0].tv_sec;
            if ((_DWORD)v166)
              ++*(_DWORD *)(v24 + 4 * v166 + 9088);
          }
          if (v171 > a12)
          {
            *(_QWORD *)(v24 + 8 * a12 + 7040) -= a11;
            if (a12)
              --*(_DWORD *)(v24 + 4 * a12 + 9088);
          }
          if ((*(_QWORD *)(v24 + 8 * v166 + 7040) & 0x8000000000000000) == 0)
            goto LABEL_271;
LABEL_270:
          _SIRecomputeSizesWithCallback(v24, 0, &__block_literal_global_6728);
LABEL_271:
          pthread_mutex_unlock(v175);
          goto LABEL_272;
        }
        if (v171 > a12)
        {
          if (v167 && (v172 = CFGetTypeID(v167), v172 == CFNumberGetTypeID()))
          {
            valuePtr[0].tv_sec = 0;
            CFNumberGetValue((CFNumberRef)v167, kCFNumberLongLongType, valuePtr);
            v173 = valuePtr[0].tv_sec;
          }
          else
          {
            v173 = 0;
          }
          v195 = v173 - a11;
          if (v173 != a11)
          {
            v175 = (pthread_mutex_t *)(v24 + 6976);
            pthread_mutex_lock((pthread_mutex_t *)(v24 + 6976));
            v196 = v24 + 6976 + 8 * a12;
            v197 = *(_QWORD *)(v196 + 64) + v195;
            *(_QWORD *)(v196 + 64) = v197;
            if (v197 >= 0)
              goto LABEL_271;
            goto LABEL_270;
          }
        }
      }
LABEL_272:
      if ((v27 & 0x20) == 0 || (*(_BYTE *)(v24 + 6584) & 0x10) != 0)
      {
        if ((v27 & 0x1004) != 0x1000)
          goto LABEL_286;
        if (!v290 && theDict && CFDictionaryGetValue(theDict, CFSTR("_kMDItemUserTags")))
          v176 = 4;
        else
          v176 = 2;
      }
      else
      {
        v176 = 0;
        if (v280 && (v27 & 0x1000) == 0)
          goto LABEL_286;
      }
      v177 = *__error();
      v178 = _SILogForLogForCategory(0);
      v179 = 2 * (gSILogLevels[0] < 4);
      if (os_log_type_enabled(v178, v179))
      {
        v180 = *v96;
        LODWORD(valuePtr[0].tv_sec) = 134218240;
        *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = v180;
        *((_WORD *)&valuePtr[0].tv_usec + 2) = 1024;
        *(__darwin_suseconds_t *)((char *)&valuePtr[0].tv_usec + 6) = v176;
        _os_log_impl(&dword_1B8270000, v178, v179, "bad data in dbo (%lld) reimporting flags:%d", (uint8_t *)valuePtr, 0x12u);
      }
      *__error() = v177;
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 + 2360) + 16))(*(_QWORD *)(*(_QWORD *)(v24 + 2360) + 136), *v96, v176, a9);
LABEL_286:
      if ((v64 & ((unsigned __int16)(v27 & 0x4000) >> 14) & 1) == 0)
        v294((uint64_t)v293, v96[4]);
      v170 = 0;
      v40 = 0;
      if (!v118)
        goto LABEL_384;
LABEL_381:
      v208 = (uint64_t *)*v289;
      if (v118 != *(_QWORD *)(*v289 + 32))
      {
        v209 = si_indexForDocId(v24, v118);
        if (v209)
          _CIDelete(v209, v118, *v208, 1);
      }
      goto LABEL_384;
    }
    v161 = *v96;
    *(_QWORD *)buf = 0;
    v162 = *((_DWORD *)v96 + 10);
    if ((v162 & 0x208) == 0)
    {
      if (db_get_obj_callback(*(int **)(v24 + 1184), v161, (void **)buf, 0x10000, *(_QWORD *)(v24 + 2368), 0) == 9)
      {
        v40 = 9;
        goto LABEL_306;
      }
      if (*(_QWORD *)buf)
      {
        db_validate_obj(*(int **)(v24 + 1184));
        if (v157)
          v182 = 9;
        else
          v182 = 11;
        updated = db_update_obj(*(int **)(v24 + 1184), (uint64_t)v96, v182);
        v40 = updated;
        if (updated > 0x1C || ((1 << updated) & 0x10000081) == 0)
        {
          v281 = v157;
          v184 = *__error();
          v185 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v185, OS_LOG_TYPE_ERROR))
          {
            v240 = *v96;
            v241 = *((_DWORD *)v96 + 2);
            v242 = *((_DWORD *)v96 + 3);
            v243 = v96[2];
            v244 = v96[3];
            v245 = v96[4];
            v246 = *((_DWORD *)v96 + 10);
            LODWORD(valuePtr[0].tv_sec) = 136317442;
            *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = (__darwin_time_t)"si_writeBackDBO";
            *((_WORD *)&valuePtr[0].tv_usec + 2) = 1024;
            *(__darwin_suseconds_t *)((char *)&valuePtr[0].tv_usec + 6) = 9112;
            WORD1(valuePtr[1].tv_sec) = 1024;
            HIDWORD(valuePtr[1].tv_sec) = v40;
            LOWORD(valuePtr[1].tv_usec) = 2048;
            *(_QWORD *)((char *)&valuePtr[1].tv_usec + 2) = v240;
            WORD1(valuePtr[2].tv_sec) = 1024;
            HIDWORD(valuePtr[2].tv_sec) = v241;
            LOWORD(valuePtr[2].tv_usec) = 1024;
            *(__darwin_suseconds_t *)((char *)&valuePtr[2].tv_usec + 2) = v242;
            *((_WORD *)&valuePtr[2].tv_usec + 3) = 2048;
            valuePtr[3].tv_sec = v243;
            LOWORD(valuePtr[3].tv_usec) = 2048;
            *(_QWORD *)((char *)&valuePtr[3].tv_usec + 2) = v244;
            WORD1(valuePtr[4].tv_sec) = 2048;
            *(__darwin_time_t *)((char *)&valuePtr[4].tv_sec + 4) = v245;
            *((_WORD *)&valuePtr[4].tv_usec + 2) = 1024;
            *(__darwin_suseconds_t *)((char *)&valuePtr[4].tv_usec + 6) = v246;
            _os_log_error_impl(&dword_1B8270000, v185, OS_LOG_TYPE_ERROR, "%s:%d: Error %d updating dbo(%llx,%x,%x,%llx,%llx,%llx,%x)", (uint8_t *)valuePtr, 0x52u);
          }
          *__error() = v184;
          v157 = v281;
        }
        free(*(void **)buf);
LABEL_237:
        LOBYTE(v64) = v155;
        if (!(_DWORD)v40)
          goto LABEL_241;
        goto LABEL_306;
      }
      v162 = *((_DWORD *)v96 + 10);
    }
    if ((v162 & 0x200) != 0)
      v163 = 9;
    else
      v163 = 11;
    v164 = db_store_obj(*(_QWORD *)(v24 + 1184), (uint64_t)v96, v163);
    v40 = v164;
    if (v164 <= 0x1C && ((1 << v164) & 0x10020081) != 0)
      goto LABEL_237;
    v186 = *__error();
    v187 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
    {
      v228 = *v96;
      v229 = *((_DWORD *)v96 + 2);
      v230 = *((_DWORD *)v96 + 3);
      v231 = v96[2];
      v232 = v96[3];
      v233 = v96[4];
      v234 = *((_DWORD *)v96 + 10);
      LODWORD(valuePtr[0].tv_sec) = 136317442;
      *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = (__darwin_time_t)"si_writeBackDBO";
      *((_WORD *)&valuePtr[0].tv_usec + 2) = 1024;
      *(__darwin_suseconds_t *)((char *)&valuePtr[0].tv_usec + 6) = 9097;
      WORD1(valuePtr[1].tv_sec) = 1024;
      HIDWORD(valuePtr[1].tv_sec) = v40;
      LOWORD(valuePtr[1].tv_usec) = 2048;
      *(_QWORD *)((char *)&valuePtr[1].tv_usec + 2) = v228;
      WORD1(valuePtr[2].tv_sec) = 1024;
      HIDWORD(valuePtr[2].tv_sec) = v229;
      LOWORD(valuePtr[2].tv_usec) = 1024;
      *(__darwin_suseconds_t *)((char *)&valuePtr[2].tv_usec + 2) = v230;
      *((_WORD *)&valuePtr[2].tv_usec + 3) = 2048;
      valuePtr[3].tv_sec = v231;
      LOWORD(valuePtr[3].tv_usec) = 2048;
      *(_QWORD *)((char *)&valuePtr[3].tv_usec + 2) = v232;
      WORD1(valuePtr[4].tv_sec) = 2048;
      *(__darwin_time_t *)((char *)&valuePtr[4].tv_sec + 4) = v233;
      *((_WORD *)&valuePtr[4].tv_usec + 2) = 1024;
      *(__darwin_suseconds_t *)((char *)&valuePtr[4].tv_usec + 6) = v234;
      _os_log_error_impl(&dword_1B8270000, v187, OS_LOG_TYPE_ERROR, "%s:%d: Error %d storing dbo(%llx,%x,%x,%llx,%llx,%llx,%x)", (uint8_t *)valuePtr, 0x52u);
    }
    *__error() = v186;
LABEL_306:
    v188 = *__error();
    v189 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
    {
      v198 = *v96;
      LODWORD(valuePtr[0].tv_sec) = 136316162;
      *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = (__darwin_time_t)"si_writeBackAndIndexWithLiveQueryToggle";
      *((_WORD *)&valuePtr[0].tv_usec + 2) = 1024;
      *(__darwin_suseconds_t *)((char *)&valuePtr[0].tv_usec + 6) = 2419;
      WORD1(valuePtr[1].tv_sec) = 2048;
      *(__darwin_time_t *)((char *)&valuePtr[1].tv_sec + 4) = v198;
      *((_WORD *)&valuePtr[1].tv_usec + 2) = 2048;
      *(_QWORD *)((char *)&valuePtr[1].tv_usec + 6) = v198;
      HIWORD(valuePtr[2].tv_sec) = 1024;
      valuePtr[2].tv_usec = v40;
      _os_log_error_impl(&dword_1B8270000, v189, OS_LOG_TYPE_ERROR, "%s:%d: si_writeBackDBO failed, oid:0x%llx(%lld), rc:%d", (uint8_t *)valuePtr, 0x2Cu);
    }
    *__error() = v188;
    v96[4] = v285;
    if ((_DWORD)v40 == 7)
    {
      if (shrinkLocalizedField(v24, (uint64_t *)&v314, "com_apple_system_prefs_keywords"))
      {
        v40 = 0;
        v170 = 1;
      }
      else
      {
        v170 = shrinkLocalizedField(v24, (uint64_t *)&v314, "kMDItemKeywords");
        v40 = 0;
      }
      goto LABEL_380;
    }
    v190 = *(int **)(v24 + 1184);
    if (*v190 == 1685287992)
    {
      if ((v190[201] & 0x14) != 0)
      {
        v191 = (_DWORD *)*((_QWORD *)v190 + 110);
        if (v191)
        {
          v192 = v191[54];
          if (v192 == 1684300900)
          {
            if (v191[1142])
              goto LABEL_376;
          }
          else if (v192 == 842150450)
          {
            if (v191[110])
              goto LABEL_376;
          }
          else if (v192 == -270471200 && v191[116])
          {
            goto LABEL_376;
          }
        }
        v199 = (_DWORD *)*((_QWORD *)v190 + 111);
        if (v199)
        {
          v200 = v199[54];
          if (v200 == 1684300900)
          {
            if (v199[1142])
              goto LABEL_376;
          }
          else if (v200 == 842150450)
          {
            if (v199[110])
              goto LABEL_376;
          }
          else if (v200 == -270471200 && v199[116])
          {
            goto LABEL_376;
          }
        }
        v201 = (_DWORD *)*((_QWORD *)v190 + 112);
        if (v201)
        {
          v202 = v201[54];
          if (v202 == 1684300900)
          {
            if (v201[1142])
              goto LABEL_376;
          }
          else if (v202 == 842150450)
          {
            if (v201[110])
              goto LABEL_376;
          }
          else if (v202 == -270471200 && v201[116])
          {
            goto LABEL_376;
          }
        }
        v203 = (_DWORD *)*((_QWORD *)v190 + 113);
        if (v203)
        {
          v204 = v203[54];
          if (v204 == 1684300900)
          {
            if (v203[1142])
              goto LABEL_376;
          }
          else if (v204 == 842150450)
          {
            if (v203[110])
              goto LABEL_376;
          }
          else if (v204 == -270471200 && v203[116])
          {
            goto LABEL_376;
          }
        }
        v205 = (_DWORD *)*((_QWORD *)v190 + 114);
        if (v205)
        {
          v206 = v205[54];
          if (v206 == 1684300900)
          {
            if (v205[1142])
              goto LABEL_376;
          }
          else if (v206 == 842150450)
          {
            if (v205[110])
              goto LABEL_376;
          }
          else if (v206 == -270471200 && v205[116])
          {
            goto LABEL_376;
          }
        }
        if ((data_map_valid(*((_DWORD **)v190 + 115)) & 1) != 0)
          goto LABEL_375;
LABEL_376:
        if ((_DWORD)v40 == 28)
          v207 = 1;
        else
          v207 = 2;
        si_makeUnavailable(v24, v40, v207, 19, (uint64_t)"set attributes err");
        v170 = 0;
LABEL_380:
        v118 = v306;
        if (!v306)
          goto LABEL_384;
        goto LABEL_381;
      }
      v193 = (_DWORD *)*((_QWORD *)v190 + 115);
      if (!v193)
        goto LABEL_375;
      v194 = v193[54];
      if (v194 == 1684300900)
      {
        if (v193[1142])
          goto LABEL_376;
      }
      else if (v194 == 842150450)
      {
        if (v193[110])
          goto LABEL_376;
      }
      else if (v194 == -270471200 && v193[116])
      {
        goto LABEL_376;
      }
LABEL_375:
      if ((v190[1] & 6) == 0)
      {
        v268 = __si_assert_copy_extra_521(*(_DWORD *)(v24 + 32));
        v269 = v268;
        v270 = "";
        if (v268)
          v270 = v268;
        __message_assert("%s:%u: failed assertion '%s' %s si_writeBackDBO failed %d", "SIStoring.c", 2429, "0", v270, v40);
        free(v269);
        if (__valid_fs(*(_DWORD *)(v24 + 32)))
          v271 = 2989;
        else
          v271 = 3072;
        *(_DWORD *)v271 = -559038737;
        abort();
      }
      goto LABEL_376;
    }
    v262 = *__error();
    v263 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v263, OS_LOG_TYPE_ERROR))
    {
      v264 = *v190;
      LODWORD(valuePtr[0].tv_sec) = 136315650;
      *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = (__darwin_time_t)"db_io_error";
      *((_WORD *)&valuePtr[0].tv_usec + 2) = 1024;
      *(__darwin_suseconds_t *)((char *)&valuePtr[0].tv_usec + 6) = 246;
      WORD1(valuePtr[1].tv_sec) = 1024;
      HIDWORD(valuePtr[1].tv_sec) = v264;
      _os_log_error_impl(&dword_1B8270000, v263, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", (uint8_t *)valuePtr, 0x18u);
    }
    *__error() = v262;
    v265 = __si_assert_copy_extra_268();
    v266 = v265;
    if (v265)
      v267 = v265;
    else
      v267 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 246, v267);
    free(v266);
    goto LABEL_434;
  }
  if (v118)
  {
    if (!si_indexForDocId(v24, v96[4]))
    {
      v121 = si_indexIdForOID(v24, *v96);
      if (!v121)
        v121 = v96[4];
      v96[4] = v121;
      v122 = si_indexForDocId(v24, v121);
      v275 = *__error();
      v123 = _SILogForLogForCategory(0);
      v124 = 2 * (gSILogLevels[0] < 4);
      log = v123;
      v125 = os_log_type_enabled(v123, v124);
      if (!v122)
      {
        if (v125)
        {
          v151 = v96[4];
          v152 = *v96;
          LODWORD(valuePtr[0].tv_sec) = 134218240;
          *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = v151;
          *((_WORD *)&valuePtr[0].tv_usec + 2) = 2048;
          *(_QWORD *)((char *)&valuePtr[0].tv_usec + 6) = v152;
          _os_log_impl(&dword_1B8270000, log, v124, "DocID<->OID mapping out of sync. Orphaned oid. (DocId:%lld. OID: %llu", (uint8_t *)valuePtr, 0x16u);
        }
        v118 = 0;
        *__error() = v275;
        v78 = v287;
        goto LABEL_218;
      }
      if (v125)
      {
        v126 = v96[4];
        v127 = *v96;
        LODWORD(valuePtr[0].tv_sec) = 134218496;
        *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = v118;
        *((_WORD *)&valuePtr[0].tv_usec + 2) = 2048;
        *(_QWORD *)((char *)&valuePtr[0].tv_usec + 6) = v126;
        HIWORD(valuePtr[1].tv_sec) = 2048;
        *(_QWORD *)&valuePtr[1].tv_usec = v127;
        _os_log_impl(&dword_1B8270000, log, v124, "DocID<->OID mapping out of sync. Had to do a brute force search. (Expected docId:%lld. Actual docID: %lld. OID: %llu", (uint8_t *)valuePtr, 0x20u);
      }
      *__error() = v275;
      v78 = v287;
    }
    if (v278)
      v128 = *(_BYTE *)(v24 + 2072) == 0;
    else
      v128 = 1;
    if (v128)
      v129 = 1;
    else
      v129 = v64;
    if (v129 == 1)
    {
      v118 = v96[4];
    }
    else
    {
      v136 = _skipIndexForUpdate(theDict, v278);
      v118 = v96[4];
      if (v136)
      {
        v306 = v96[4];
        v137 = *__error();
        v138 = _SILogForLogForCategory(0);
        v139 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v138, v139))
        {
          v140 = *v96;
          LODWORD(valuePtr[0].tv_sec) = 134218240;
          *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = v306;
          *((_WORD *)&valuePtr[0].tv_usec + 2) = 2048;
          *(_QWORD *)((char *)&valuePtr[0].tv_usec + 6) = v140;
          _os_log_impl(&dword_1B8270000, v138, v139, "sdb only update docId: %lld oid: %llu", (uint8_t *)valuePtr, 0x16u);
        }
        *__error() = v137;
        db_fast_dirty_datastore_if_necessary(v292);
        goto LABEL_210;
      }
    }
  }
LABEL_218:
  db_fast_dirty_datastore_if_necessary(v292);
  v153 = v293;
  if (((v27 >> 14) & 1 & v64) == 0)
    v153 = 0;
  v154 = _CIUpdateContent(v33, v98, &v319, 0, 0, v286, (char)v99, 0, v32, v288, v96[4], &v306, v78, 0, (*(_DWORD *)(v24 + 6584) >> 19) & 3, (uint64_t (*)(uint64_t))lowDiskSpaceCallback, v24, a13, a14,
           *(_QWORD *)(v24 + 2464),
           (v27 & 0x4000) != 0,
           (uint64_t)v153);
  if (!(_DWORD)v154)
    goto LABEL_223;
  v40 = v154;
  if ((_DWORD)v154 == -3)
  {
    if (!*(_BYTE *)(v24 + 2458))
    {
      *(_BYTE *)(v24 + 2458) = 1;
      if (*(_QWORD *)(v24 + 1184))
      {
        v181 = *(_QWORD *)(v24 + 1056);
        if (v181)
          si_enqueue_work_with_qos(v181, 9, (uint64_t)si_consistencyCheck, v24);
      }
    }
    goto LABEL_223;
  }
  v168 = *__error();
  v169 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
  {
    LODWORD(valuePtr[0].tv_sec) = 136315650;
    *(__darwin_time_t *)((char *)&valuePtr[0].tv_sec + 4) = (__darwin_time_t)"si_writeBackAndIndexWithLiveQueryToggle";
    *((_WORD *)&valuePtr[0].tv_usec + 2) = 1024;
    *(__darwin_suseconds_t *)((char *)&valuePtr[0].tv_usec + 6) = 2175;
    WORD1(valuePtr[1].tv_sec) = 1024;
    HIDWORD(valuePtr[1].tv_sec) = v40;
    _os_log_error_impl(&dword_1B8270000, v169, OS_LOG_TYPE_ERROR, "%s:%d: ContentIndexUpdateContent failed (%d)", (uint8_t *)valuePtr, 0x18u);
  }
  v170 = 0;
  *__error() = v168;
  if (v118)
    goto LABEL_381;
LABEL_384:
  if ((_DWORD)v40)
  {
    v284 = v170;
    goto LABEL_386;
  }
LABEL_398:
  v220 = v309;
  v221 = (const void *)v309[3];
  if (v221)
  {
    CFRelease(v221);
    v220 = v309;
  }
  v220[3] = 0;
  if (v288)
    CFRelease(v288);
  if (v170)
  {
    v222 = *(_QWORD **)(v33 + 14352);
    switch(v287)
    {
      case 0u:
        v223 = v222 + 16;
        goto LABEL_423;
      case 1u:
        v223 = v222 + 21;
        goto LABEL_423;
      case 2u:
        v223 = v222 + 18;
        goto LABEL_423;
      case 3u:
        v223 = v222 + 15;
        goto LABEL_423;
      case 6u:
        v223 = v222 + 17;
        goto LABEL_423;
      case 7u:
        v223 = v222 + 24;
        goto LABEL_423;
      case 9u:
        v223 = v222 + 25;
        goto LABEL_423;
      case 0xAu:
        v223 = v222 + 26;
        goto LABEL_423;
      case 0xBu:
        v223 = v222 + 27;
LABEL_423:
        --*v223;
        break;
      default:
        break;
    }
    HIDWORD(v272) = a13;
    LOBYTE(v272) = a12;
    v40 = si_writeBackAndIndexWithLiveQueryToggle(v24, v33, v291, v290, v283, v289, v287, v27, v32, a9, a10, a11, v272, a14, a15);
  }
  else if ((*(_BYTE *)(v292 + 4) & 0x40) != 0)
  {
    v224 = atomic_load((unsigned __int8 *)(v24 + 2439));
    if ((v224 & 1) == 0)
    {
      if (SIIsAppleInternal_onceToken != -1)
        dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_4644);
      if (SIIsAppleInternal_internal)
      {
        do
          v225 = __ldxr((unsigned int *)&si_writeBackAndIndexWithLiveQueryToggle__crashCount);
        while (__stxr(v225 + 1, (unsigned int *)&si_writeBackAndIndexWithLiveQueryToggle__crashCount));
        if (!v225)
        {
          v226 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("si_writeBackAndIndex"));
          getpid();
          SISimulateCrashForPid(0, (uint64_t)v226);
          if (v226)
            CFRelease(v226);
        }
      }
    }
    v40 = 89;
    si_makeUnavailable(v24, 89, 2, 20, (uint64_t)"si_writeBackAndIndex detected corrupted sdb on exit");
  }
  _Block_object_dispose(&v308, 8);
  return v40;
}

int *db_validate_obj(int *result)
{
  int *v1;
  int v2;
  NSObject *v3;
  int v4;
  char *v5;
  char *v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*result != 1685287992)
  {
    v1 = result;
    v2 = *__error();
    v3 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = *v1;
      *(_DWORD *)buf = 136315650;
      v9 = "db_validate_obj";
      v10 = 1024;
      v11 = 327;
      v12 = 1024;
      v13 = v4;
      _os_log_error_impl(&dword_1B8270000, v3, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v2;
    v5 = __si_assert_copy_extra_268();
    v6 = v5;
    if (v5)
      v7 = v5;
    else
      v7 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 327, v7);
    free(v6);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return result;
}

void __checkIndexSetDocIdOrder(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a2 && *((_DWORD *)a2 + 2) >= 2u)
  {
    v4 = 0;
    do
    {
      v5 = v4;
      v6 = *a2;
      v7 = *(_QWORD *)(*a2 + 8 * v4++);
      if (*(_QWORD *)(v7 + 72) > *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v4) + 72))
      {
        v8 = *__error();
        v9 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v21 = "__checkIndexSetDocIdOrder";
          v22 = 1024;
          v23 = 164;
          _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: Unexpected index base id order, recycling", buf, 0x12u);
        }
        *__error() = v8;
        si_recycleForBadIndex(a1, *(_QWORD *)(*a2 + 8 * v5), (uint64_t)"unexpected index base");
        v6 = *a2;
        v7 = *(_QWORD *)(*a2 + 8 * v5);
      }
      v10 = *(unsigned int *)(v7 + 60);
      if (v10 >= 2)
      {
        v11 = *(_QWORD *)(v6 + 8 * v4);
        if (*(_DWORD *)(v11 + 60) >= 2u && (unint64_t)(*(_QWORD *)(v7 + 72) + v10) > *(_QWORD *)(v11 + 72))
        {
          v12 = *__error();
          v13 = _SILogForLogForCategory(4);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            v14 = *(_QWORD *)(*a2 + 8 * v5);
            LODWORD(v15) = *(_DWORD *)(v14 + 60);
            v16 = *(_QWORD *)(v14 + 72);
            if (v15 >= 2)
              v15 = v15;
            else
              v15 = 0;
            v17 = v16 + v15;
            v18 = *(_QWORD *)(*(_QWORD *)(*a2 + 8 * v4) + 72);
            v19 = *((_DWORD *)a2 + 2);
            *(_DWORD *)buf = 136316674;
            v21 = "__checkIndexSetDocIdOrder";
            v22 = 1024;
            v23 = 171;
            v24 = 2048;
            v25 = v17;
            v26 = 2048;
            v27 = v18;
            v28 = 1024;
            v29 = v5;
            v30 = 1024;
            v31 = v4;
            v32 = 1024;
            v33 = v19;
            _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: Overlapping doc ids (%lld>%lld) between indexes %d and %d out of %d. Recycling", buf, 0x38u);
          }
          *__error() = v12;
          si_recycleForBadIndex(a1, *(_QWORD *)(*a2 + 8 * v5), (uint64_t)"overlapping doc ids");
        }
      }
    }
    while (v4 < (*((_DWORD *)a2 + 2) - 1));
  }
}

_DWORD *si_getLiveIndex(uint64_t a1)
{
  int v1;
  _DWORD *result;
  char *v3;
  char *v4;
  const char *v5;
  char *v6;
  const char *v7;
  char *v8;
  const char *v9;
  uint64_t v10;

  v1 = *(_DWORD *)(a1 + 8);
  if (!v1)
  {
    v3 = __si_assert_copy_extra_521(-1);
    v4 = v3;
    v5 = "";
    if (v3)
      v5 = v3;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 9284, "indexSet->indexCount", v5);
LABEL_14:
    free(v4);
    if (__valid_fs(-1))
      v10 = 2989;
    else
      v10 = 3072;
    *(_DWORD *)v10 = -559038737;
    abort();
  }
  result = *(_DWORD **)(*(_QWORD *)a1 + 8 * (v1 - 1));
  if (!result)
  {
    v6 = __si_assert_copy_extra_521(-1);
    v4 = v6;
    v7 = "";
    if (v6)
      v7 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 9285, "indexSet->index[indexSet->indexCount-1]", v7);
    goto LABEL_14;
  }
  if (*result != -1163003219)
  {
    v8 = __si_assert_copy_extra_521(-1);
    v4 = v8;
    v9 = "";
    if (v8)
      v9 = v8;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 9286, "ContentIndexValidIndex(indexSet->index[indexSet->indexCount-1])", v9);
    goto LABEL_14;
  }
  return result;
}

int *_checkIndexSetValidity(int *result)
{
  unsigned int v1;
  int *v2;
  unsigned int v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  char v7;
  int v8;
  NSObject *v9;
  char v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char *v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  const char *v23;
  unsigned int v24;
  uint64_t v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  _BYTE v31[10];
  _BYTE v32[6];
  _DWORD v33[5];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = result[4];
  if (v1 != -1)
  {
    v2 = result;
    v3 = result[2];
    if (v1 >= v3)
    {
      v4 = *__error();
      v5 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v15 = v2[2];
        v16 = v2[4];
        *(_DWORD *)buf = 136316162;
        v27 = "_checkIndexSetValidity";
        v28 = 1024;
        v29 = 135;
        v30 = 2048;
        *(_QWORD *)v31 = v2;
        *(_WORD *)&v31[8] = 1024;
        *(_DWORD *)v32 = v15;
        *(_WORD *)&v32[4] = 1024;
        v33[0] = v16;
        _os_log_error_impl(&dword_1B8270000, v5, OS_LOG_TYPE_ERROR, "%s:%d: indexSet:%p count:%d current:%d", buf, 0x28u);
      }
      result = __error();
      *result = v4;
      v1 = v2[4];
      v3 = v2[2];
    }
    if (v1 >= v3)
    {
      v17 = __si_assert_copy_extra_521(-1);
      v18 = v17;
      v19 = "";
      if (v17)
        v19 = v17;
      __message_assert("%s:%u: failed assertion '%s' %s Expected current index (%d) less than count (%d)", "SIStoring.c", 141, "(uint32_t)indexSet->currentIndex<(uint32_t)indexSet->indexCount", v19, v2[4], v2[2]);
      free(v18);
      if (__valid_fs(-1))
        v20 = 2989;
      else
        v20 = 3072;
      *(_DWORD *)v20 = -559038737;
      abort();
    }
    v6 = *(_QWORD *)(*(_QWORD *)v2 + 8 * (int)v1);
    v7 = atomic_load((unsigned int *)(v6 + 28));
    if ((v7 & 3) != 0 || *(_BYTE *)(v6 + 15163))
    {
      v8 = *__error();
      v9 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v11 = atomic_load((unsigned int *)(v6 + 28));
        v12 = *(unsigned __int8 *)(v6 + 15163);
        v13 = v2[2];
        v14 = v2[4];
        *(_DWORD *)buf = 136316418;
        v27 = "_checkIndexSetValidity";
        v28 = 1024;
        v29 = 146;
        v30 = 1024;
        *(_DWORD *)v31 = v11;
        *(_WORD *)&v31[4] = 1024;
        *(_DWORD *)&v31[6] = v12;
        *(_WORD *)v32 = 1024;
        *(_DWORD *)&v32[2] = v13;
        LOWORD(v33[0]) = 1024;
        *(_DWORD *)((char *)v33 + 2) = v14;
        _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: Expected current index is writable. flags: %08x, readOnly:%d, count:%d, current:%d", buf, 0x2Au);
      }
      result = __error();
      *result = v8;
    }
    v10 = atomic_load((unsigned int *)(v6 + 28));
    if ((v10 & 3) != 0 || *(_BYTE *)(v6 + 15163))
    {
      v21 = __si_assert_copy_extra_521(-1);
      v22 = v21;
      v23 = "";
      if (v21)
        v23 = v21;
      v24 = atomic_load((unsigned int *)(v6 + 28));
      __message_assert("%s:%u: failed assertion '%s' %s Expected current index is writable. flags: %08x, readOnly:%d, count:%d, current:%d", "SIStoring.c", 153, "ContentIndexWritable(ref)", v23, v24, *(unsigned __int8 *)(v6 + 15163), v2[2], v2[4]);
      free(v22);
      if (__valid_fs(-1))
        v25 = 2989;
      else
        v25 = 3072;
      *(_DWORD *)v25 = -559038737;
      abort();
    }
  }
  return result;
}

_DWORD *si_populategroup(uint64_t a1, uint64_t *a2, const __CFString *a3, int a4, int a5, _BYTE *a6, _BYTE *a7, _BYTE *a8)
{
  uint64_t *v12;
  uint64_t v14;
  const __CFNumber *Value;
  unsigned int v17;
  _BOOL4 GroupFromDBO;
  CFIndex FirstIndexOfBit;
  const __CFAllocator *v20;
  CFIndex v21;
  int v22;
  _BYTE *v23;
  _BYTE *v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFIndex v27;
  int v28;
  os_unfair_lock_s *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint8_t *v33;
  int v34;
  uint64_t v35;
  int *v36;
  __n128 v37;
  unsigned int v38;
  unsigned int v39;
  _DWORD *result;
  int v41;
  int v42;
  NSObject *v43;
  uint64_t v44;
  int v45;
  CFStringRef cf;
  uint64_t *v47;
  CFNumberRef v48;
  unint64_t v50;
  unint64_t valuePtr;
  unsigned __int8 v52;
  uint8_t buf[48];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[21];
  uint64_t v67;
  CFRange v68;

  v12 = a2;
  v67 = *MEMORY[0x1E0C80C00];
  v14 = *a2;
  v52 = 0;
  if (*(_BYTE *)(a1 + 2072))
  {
    if (!a3)
    {
      GroupFromDBO = 0;
      v17 = 255;
      goto LABEL_31;
    }
    os_unfair_lock_lock((os_unfair_lock_t)&group_assignment_lock);
    Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 2088), a3);
    LODWORD(valuePtr) = 0;
    if (Value
      && CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr)
      && (v17 = valuePtr, (v52 = valuePtr) != 0))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&group_assignment_lock);
    }
    else
    {
      v68.location = 1;
      v68.length = 256;
      FirstIndexOfBit = CFBitVectorGetFirstIndexOfBit(*(CFBitVectorRef *)(a1 + 2096), v68, 0);
      if (FirstIndexOfBit == -1)
      {
        os_unfair_lock_unlock((os_unfair_lock_t)&group_assignment_lock);
        v17 = 0;
      }
      else
      {
        LODWORD(valuePtr) = FirstIndexOfBit;
        v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v47 = v12;
        v21 = FirstIndexOfBit;
        v22 = a5;
        v23 = a7;
        v24 = a6;
        v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
        cf = CFStringCreateCopy(v20, a3);
        v48 = v25;
        v26 = v25;
        a6 = v24;
        a7 = v23;
        a5 = v22;
        v27 = v21;
        v12 = v47;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 2088), cf, v26);
        CFBitVectorSetBitAtIndex(*(CFMutableBitVectorRef *)(a1 + 2096), v27, 1u);
        os_unfair_lock_unlock((os_unfair_lock_t)&group_assignment_lock);
        v65 = 0u;
        memset(v66, 0, sizeof(v66));
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v58 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        memset(buf, 0, sizeof(buf));
        if (CFStringGetCString(a3, (char *)&buf[5], 256, 0x8000100u))
        {
          v28 = strlen((const char *)&buf[5]) + 1;
          if (v27 >= 0x80)
          {
            v45 = v28;
            if (v27 >= 0x4000)
            {
              if (v27 >= 0x200000)
              {
                v35 = -5;
                if (!(v27 >> 28))
                  v35 = -4;
                v33 = &buf[v35 + 5];
                v29 = (os_unfair_lock_s *)(a1 + 2224);
                os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2224));
                if (v27 >> 28)
                {
                  *v33 = -16;
                  *(_DWORD *)(v33 + 1) = v27;
                  v34 = 5;
                }
                else
                {
                  *v33 = BYTE3(v27) | 0xE0;
                  v33[1] = BYTE2(v27);
                  v33[2] = BYTE1(v27);
                  v33[3] = v27;
                  v34 = 4;
                }
              }
              else
              {
                v33 = &buf[2];
                v29 = (os_unfair_lock_s *)(a1 + 2224);
                os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2224));
                buf[2] = BYTE2(v27) | 0xC0;
                buf[3] = BYTE1(v27);
                buf[4] = v27;
                v34 = 3;
              }
            }
            else
            {
              v33 = &buf[3];
              v29 = (os_unfair_lock_s *)(a1 + 2224);
              os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2224));
              buf[3] = BYTE1(v27) | 0x80;
              buf[4] = v27;
              v34 = 2;
            }
            v32 = a1 + 2192;
            v31 = v45;
          }
          else
          {
            v29 = (os_unfair_lock_s *)(a1 + 2224);
            v30 = v28;
            os_unfair_lock_lock((os_unfair_lock_t)(a1 + 2224));
            v31 = v30;
            v33 = &buf[4];
            v32 = a1 + 2192;
            buf[4] = v27;
            v34 = 1;
          }
          activityJournalWrite(v32, 23, v33, v31 + v34);
          os_unfair_lock_unlock(v29);
        }
        CFRelease(cf);
        CFRelease(v48);
        v17 = v27;
        v52 = v27;
      }
    }
    GroupFromDBO = 1;
  }
  else
  {
    GroupFromDBO = si_getGroupFromDBO(a1, v14, &v52);
    v17 = v52;
  }
  *v12 = v14;
  if (v17)
    goto LABEL_32;
  if (*(_BYTE *)(a1 + 2072))
    v17 = 255;
  else
    v17 = 18;
LABEL_31:
  v52 = v17;
LABEL_32:
  memset(buf, 0, 32);
  v36 = (int *)db_copy_field_ids_with_buffer(*(int **)(a1 + 1184), "kMDItemSupportFileType", (uint64_t)buf, 8uLL);
  v50 = 0;
  valuePtr = 0;
  if (v17 >= 0x16)
  {
    v17 = 18;
    v52 = 18;
  }
  if (GroupFromDBO && db_get_field_by_id(*(int **)(a1 + 1184), v14, v36, &valuePtr, &v50))
  {
    v38 = *(_DWORD *)(v14 + 40) & 0xFFFFFFDF;
    *(_DWORD *)(v14 + 40) = v38;
    if (!a5)
      goto LABEL_37;
LABEL_40:
    LOBYTE(v17) = v17 | 0x20;
    v39 = v38 | 0x40;
    goto LABEL_41;
  }
  v38 = *(_DWORD *)(v14 + 40) | 0x20;
  *(_DWORD *)(v14 + 40) = v38;
  v17 = 17;
  if (a5)
    goto LABEL_40;
LABEL_37:
  if (a4)
  {
    v39 = v38 & 0xFFFFFFBF;
LABEL_41:
    *(_DWORD *)(v14 + 40) = v39;
    goto LABEL_43;
  }
  v17 |= (v38 >> 1) & 0x20;
LABEL_43:
  if (v36 != (int *)buf)
    free(v36);
  result = (_DWORD *)db_add_field(*(int **)(a1 + 1184), (_DWORD **)v12, 1u, "_kMDItemGroupId", 0, 0x108u, 2, &v52, v37, 1);
  if ((_DWORD)result)
  {
    v41 = (int)result;
    v42 = *__error();
    v43 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      v44 = *(_QWORD *)v14;
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "si_populategroup";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1688;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v44;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v44;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v41;
      _os_log_error_impl(&dword_1B8270000, v43, OS_LOG_TYPE_ERROR, "%s:%d: db_add_field(_kMDItemGroupId) failed, oid:0x%llx(%lld), rc:%d", buf, 0x2Cu);
    }
    result = __error();
    *result = v42;
  }
  *a7 = v17;
  *a6 = v52;
  *a8 = GroupFromDBO;
  return result;
}

void prepareFieldIds(SISearchCtx_METADATA *a1, PartialQueryResults *a2)
{
  _QWORD *v4;
  CFIndex *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  CFIndex v9;
  _QWORD *v10;
  size_t **v11;
  CFIndex v12;
  _DWORD *v13;
  _DWORD *v14;
  size_t **v16;
  char *v17;
  const __CFArray *v18;
  char *v19;
  const __CFArray *v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  const __CFArray *v24;
  const __CFArray *v25;
  uint64_t (*v26)(_QWORD);
  _QWORD *v27;
  uint64_t v29;
  uint64_t i;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v34;
  uint64_t j;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v39;
  void **v40;
  size_t v41;
  CFIndex v42;
  _QWORD *v43;
  char **v44;
  CFIndex v45;
  char **v46;
  char *v47;
  const __CFArray *v48;
  char **v49;
  char *v50;
  const __CFArray *v51;
  char **v52;
  char **v53;
  uint64_t (*v54)(_QWORD);
  char **v55;
  char *v56;
  _QWORD *v57;
  CFIndex *v58;
  _QWORD *v59;
  char **v60;
  char *v61;
  int *v62;
  int *v63;
  int *v64;
  _DWORD *v65;
  _DWORD *v67;
  _DWORD *v69;
  uint64_t v71;
  uint64_t k;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *malloc;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  int *v81;
  int v82;
  int *v83;
  size_t v84;
  int v85;
  size_t v86;
  int v87;
  int *v88;
  size_t v89;
  int v90;
  int v91;
  int *v92;
  size_t v93;
  int v94;
  int v95;
  int *v96;
  int v97;
  uint64_t v98;
  int v99;
  uint64_t m;
  int *v101;
  int v102;
  int *v103;
  int v104;
  uint64_t n;
  int *v106;
  int v107;
  int *v108;
  size_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t ii;
  int *v114;
  int v115;
  int *v116;
  size_t v117;
  int v118;
  void *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  size_t *v140;
  size_t **v141;
  char **v142;
  char **v143;
  char **v144;
  _QWORD *v145;
  _QWORD *v146;
  CFIndex v147;
  size_t v148[2];

  v148[1] = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)a1 + 115) || *((_BYTE *)a1 + 641) || *(_OWORD *)(*((_QWORD *)a1 + 105) + 16) != 0)
    return;
  v4 = (_QWORD *)PartialQueryResults::attributeIdVector(a2, *(int **)(*((_QWORD *)a1 + 3) + 1184));
  v5 = (CFIndex *)((char *)a2 + 232);
  if (*((uint64_t *)a2 + 29) >= 1)
  {
    v6 = v4;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = (_QWORD *)((char *)a2 + 200);
    v11 = (size_t **)((char *)a2 + 192);
    v146 = (_QWORD *)((char *)a2 + 216);
    v144 = (char **)((char *)a2 + 104);
    v145 = (_QWORD *)((char *)a2 + 208);
    v142 = (char **)((char *)a2 + 8);
    v143 = (char **)((char *)a2 + 96);
    v140 = (size_t *)((char *)a2 + 240);
    v141 = (size_t **)((char *)a2 + 192);
    v12 = 1;
    while (1)
    {
      v13 = (_DWORD *)v6[v9];
      if (v13 && *v13)
      {
        v14 = v13 + 1;
        do
          ++v7;
        while (*v14++);
      }
      if (*(_BYTE *)a2)
      {
        v16 = (size_t **)((char *)a2 + 200);
        if (!*v10)
        {
          v17 = *v144;
          if (!*v144)
          {
            v18 = (const __CFArray *)*((_QWORD *)a2 + 16);
            if (v18)
            {
              v148[0] = 0;
              SIFlattenArrayToCStringVector(v18, v144, v148, &v147);
              v17 = *v144;
              v11 = v141;
            }
            else
            {
              v17 = 0;
            }
          }
          PartialQueryResults::setupCannedAttributeVector((uint64_t)a2, (uint64_t)v17, (_QWORD *)a2 + 25, v148);
          v16 = (size_t **)((char *)a2 + 200);
        }
      }
      else
      {
        v16 = v11;
        if (!*v11)
        {
          v19 = *v143;
          if (v12 && !v19)
          {
            v20 = (const __CFArray *)*((_QWORD *)a2 + 15);
            if (v20)
            {
              SIFlattenArrayToCStringVector(v20, v143, v140, (CFIndex *)a2 + 29);
              v19 = *v143;
              if (!*v143)
              {
                v120 = __si_assert_copy_extra_268();
                v128 = v120;
                __message_assert_272((uint64_t)v120, v121, v122, v123, v124, v125, v126, v127, (char)"SISearchCtx.h");
                free(v128);
                if (__valid_fs(-1))
                  v129 = 2989;
                else
                  v129 = 3072;
                *(_DWORD *)v129 = -559038737;
                abort();
              }
            }
            else
            {
              v19 = 0;
            }
          }
          PartialQueryResults::setupCannedAttributeVector((uint64_t)a2, (uint64_t)v19, v11, v142);
          v16 = v11;
        }
      }
      if ((*v16)[v9])
      {
        v21 = *((_QWORD *)a2 + 29);
        if (*(_BYTE *)a2)
        {
          v22 = v146;
          if (v21)
          {
            v22 = v146;
            if (!*v10)
            {
              v23 = *v144;
              if (!*v144)
              {
                v24 = (const __CFArray *)*((_QWORD *)a2 + 16);
                if (v24)
                {
                  v148[0] = 0;
                  SIFlattenArrayToCStringVector(v24, v144, v148, &v147);
                  v23 = *v144;
                  v11 = v141;
                }
                else
                {
                  v23 = 0;
                }
              }
              PartialQueryResults::setupCannedAttributeVector((uint64_t)a2, (uint64_t)v23, (_QWORD *)a2 + 25, v148);
              v22 = v146;
            }
          }
        }
        else
        {
          v22 = v145;
          if (v21)
          {
            v22 = v145;
            if (!*v145)
            {
              v25 = PartialQueryResults::_attributeVector(a2);
              PartialQueryResults::setupCannedRequiredAttributeVector((uint64_t)a2, (uint64_t)v25, v145);
              v22 = v145;
            }
          }
        }
        v26 = *(uint64_t (**)(_QWORD))(*v22 + 8 * v9);
        if (!v26)
          return;
        v4 = (_QWORD *)v26(*((_QWORD *)a1 + 3));
        if (v4 && *v4)
        {
          v27 = v4 + 1;
          do
            ++v8;
          while (*v27++);
        }
      }
      ++v9;
      v12 = *v5;
      if (v9 >= *v5)
        goto LABEL_46;
    }
  }
  v8 = 0;
  v7 = 0;
LABEL_46:
  if (*(_BYTE *)(*((_QWORD *)a1 + 1) + 753))
  {
    v4 = (_QWORD *)SISearchCtx_METADATA::photosDerivedAttributes((uint64_t)a1, *(int **)(*((_QWORD *)a1 + 3) + 1184));
    v29 = *((int *)a1 + 90);
    if ((int)v29 >= 1)
    {
      for (i = 0; i != v29; ++i)
      {
        v31 = (_DWORD *)v4[i];
        if (v31 && *v31)
        {
          v32 = v31 + 1;
          do
            ++v7;
          while (*v32++);
        }
      }
    }
  }
  if (*((_DWORD *)a1 + 40) == 3)
  {
    v4 = (_QWORD *)PartialQueryResults::completionAttributeIdVector((uint64_t)a2, *(int **)(*((_QWORD *)a1 + 3) + 1184));
    v34 = *((_QWORD *)a2 + 45);
    if (v34 >= 1)
    {
      for (j = 0; j != v34; ++j)
      {
        v36 = (_DWORD *)v4[j];
        if (v36 && *v36)
        {
          v37 = v36 + 1;
          do
            ++v7;
          while (*v37++);
        }
      }
    }
  }
  v141 = &v140;
  MEMORY[0x1E0C80A78](v4);
  v40 = (void **)((char *)&v140 - v39);
  bzero((char *)&v140 - v39, v41);
  if (!v8)
    goto LABEL_87;
  if (*v5 >= 1)
  {
    v42 = 0;
    v43 = (_QWORD *)((char *)a2 + 200);
    v144 = (char **)((char *)a2 + 104);
    v145 = 0;
    v44 = (char **)((char *)a2 + 216);
    v146 = (_QWORD *)((char *)a2 + 208);
    v142 = (char **)((char *)a2 + 96);
    v143 = (char **)((char *)a2 + 216);
    v140 = (size_t *)((char *)a2 + 240);
    v45 = 1;
    do
    {
      if (*(_BYTE *)a2)
      {
        v46 = v44;
        if (!*v43)
        {
          v47 = *v144;
          if (!*v144)
          {
            v48 = (const __CFArray *)*((_QWORD *)a2 + 16);
            if (v48)
            {
              v148[0] = 0;
              v49 = v144;
              SIFlattenArrayToCStringVector(v48, v144, v148, &v147);
              v47 = *v49;
            }
            else
            {
              v47 = 0;
            }
          }
          PartialQueryResults::setupCannedAttributeVector((uint64_t)a2, (uint64_t)v47, v43, v148);
          v46 = v44;
        }
      }
      else
      {
        v46 = (char **)v146;
        if (!*v146)
        {
          v50 = *v142;
          if (v45 && !v50)
          {
            v51 = (const __CFArray *)*((_QWORD *)a2 + 15);
            if (v51)
            {
              v52 = v142;
              SIFlattenArrayToCStringVector(v51, v142, v140, v5);
              v50 = *v52;
              if (!*v52)
              {
                v130 = __si_assert_copy_extra_268();
                v138 = v130;
                __message_assert_272((uint64_t)v130, v131, v132, v133, v134, v135, v136, v137, (char)"SISearchCtx.h");
                free(v138);
                if (__valid_fs(-1))
                  v139 = 2989;
                else
                  v139 = 3072;
                *(_DWORD *)v139 = -559038737;
                abort();
              }
            }
            else
            {
              v50 = 0;
            }
          }
          v53 = (char **)v146;
          PartialQueryResults::setupCannedRequiredAttributeVector((uint64_t)a2, (uint64_t)v50, v146);
          v46 = v53;
        }
      }
      v54 = *(uint64_t (**)(_QWORD))&(*v46)[8 * v42];
      if (v54)
      {
        v55 = (char **)v54(*((_QWORD *)a1 + 3));
        if (v55)
        {
          v56 = *v55;
          if (*v55)
          {
            v57 = v43;
            v58 = v5;
            v59 = (_QWORD *)(int)v145;
            v60 = v55 + 1;
            do
            {
              v40[(_QWORD)v59] = db_copy_field_ids_with_buffer(*(int **)(*((_QWORD *)a1 + 3) + 1184), v56, 0, 0);
              v59 = (_QWORD *)((char *)v59 + 1);
              v61 = *v60++;
              v56 = v61;
            }
            while (v61);
            v145 = v59;
            v5 = v58;
            v43 = v57;
            v44 = v143;
          }
        }
      }
      ++v42;
      v45 = *v5;
    }
    while (v42 < *v5);
LABEL_87:
    if (!v8 && !v7)
      return;
  }
  v62 = (int *)*((_QWORD *)a2 + 34);
  v63 = (int *)*((_QWORD *)a2 + 35);
  v64 = (int *)*((_QWORD *)a2 + 36);
  if (*((_DWORD *)a1 + 40) == 3)
  {
    if (v63 && *v63)
    {
      v65 = v63 + 1;
      do
        ++v7;
      while (*v65++);
    }
    if (v62 && *v62)
    {
      v67 = v62 + 1;
      do
        ++v7;
      while (*v67++);
    }
    if (v64 && *v64)
    {
      v69 = v64 + 1;
      do
        ++v7;
      while (*v69++);
    }
  }
  v71 = v8;
  if (v8 >= 1)
  {
    for (k = 0; k != v8; ++k)
    {
      v73 = v40[k];
      if (v73 && *v73)
      {
        v74 = v73 + 1;
        do
          ++v7;
        while (*v74++);
      }
    }
  }
  malloc = query_malloc(4 * v7 + 4);
  if (*((_DWORD *)a1 + 40) == 3)
  {
    v77 = PartialQueryResults::completionAttributeIdVector((uint64_t)a2, *(int **)(*((_QWORD *)a1 + 3) + 1184));
    v78 = *((_QWORD *)a2 + 45);
    if (v78 < 1)
    {
      v84 = 0;
    }
    else
    {
      v79 = 0;
      v80 = 0;
      do
      {
        v81 = *(int **)(v77 + 8 * v79);
        if (v81 && (v82 = *v81) != 0)
        {
          v83 = v81 + 1;
          do
          {
            v84 = v80 + 1;
            malloc[v80] = v82;
            v85 = *v83++;
            v82 = v85;
            ++v80;
          }
          while (v85);
        }
        else
        {
          v84 = v80;
        }
        ++v79;
        v80 = v84;
      }
      while (v79 != v78);
    }
    if (v63 && (v87 = *v63) != 0)
    {
      v88 = v63 + 1;
      do
      {
        v89 = v84 + 1;
        malloc[v84] = v87;
        v90 = *v88++;
        v87 = v90;
        ++v84;
      }
      while (v90);
    }
    else
    {
      v89 = v84;
    }
    if (v62 && (v91 = *v62) != 0)
    {
      v92 = v62 + 1;
      do
      {
        v93 = v89 + 1;
        malloc[v89] = v91;
        v94 = *v92++;
        v91 = v94;
        ++v89;
      }
      while (v94);
    }
    else
    {
      v93 = v89;
    }
    if (v64 && (v95 = *v64) != 0)
    {
      v96 = v64 + 1;
      do
      {
        v86 = v93 + 1;
        malloc[v93] = v95;
        v97 = *v96++;
        v95 = v97;
        ++v93;
      }
      while (v97);
    }
    else
    {
      v86 = v93;
    }
  }
  else
  {
    v86 = 0;
  }
  if (*(_BYTE *)(*((_QWORD *)a1 + 1) + 753))
  {
    v98 = SISearchCtx_METADATA::photosDerivedAttributes((uint64_t)a1, *(int **)(*((_QWORD *)a1 + 3) + 1184));
    v99 = *((_DWORD *)a1 + 90);
    if (v99 >= 1)
    {
      for (m = 0; m < v99; ++m)
      {
        v101 = *(int **)(v98 + 8 * m);
        if (v101)
        {
          v102 = *v101;
          if (*v101)
          {
            v103 = v101 + 1;
            do
            {
              malloc[v86++] = v102;
              v104 = *v103++;
              v102 = v104;
            }
            while (v104);
            v99 = *((_DWORD *)a1 + 90);
          }
        }
      }
    }
  }
  if (v8 < 1)
  {
    v109 = v86;
  }
  else
  {
    for (n = 0; n != v8; ++n)
    {
      v106 = (int *)v40[n];
      if (v106 && (v107 = *v106) != 0)
      {
        v108 = v106 + 1;
        do
        {
          v109 = v86 + 1;
          malloc[v86] = v107;
          v110 = *v108++;
          v107 = v110;
          ++v86;
        }
        while (v110);
      }
      else
      {
        v109 = v86;
      }
      v86 = v109;
    }
  }
  v111 = PartialQueryResults::attributeIdVector(a2, *(int **)(*((_QWORD *)a1 + 3) + 1184));
  v112 = *((_QWORD *)a2 + 29);
  if (v112 < 1)
  {
    v117 = v109;
  }
  else
  {
    for (ii = 0; ii != v112; ++ii)
    {
      v114 = *(int **)(v111 + 8 * ii);
      if (v114 && (v115 = *v114) != 0)
      {
        v116 = v114 + 1;
        do
        {
          v117 = v109 + 1;
          malloc[v109] = v115;
          v118 = *v116++;
          v115 = v118;
          ++v109;
        }
        while (v118);
      }
      else
      {
        v117 = v109;
      }
      v109 = v117;
    }
  }
  malloc[v117] = 0;
  qsort_b(malloc, v117, 4uLL, &__block_literal_global_114);
  *((_QWORD *)a1 + 115) = malloc;
  if (v8 >= 1)
  {
    do
    {
      v119 = *v40++;
      free(v119);
      --v71;
    }
    while (v71);
  }
}

uint64_t PartialQueryResults::attributeIdVector(_QWORD *a1, int *a2)
{
  unint64_t v3;
  CFIndex *v4;
  char **v6;
  uint64_t v7;
  const __CFArray *v8;
  size_t v9;
  BOOL v10;
  void *v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a1 + 29;
  v3 = a1[29];
  if (v3 && !a1[17])
  {
    v6 = (char **)(a1 + 12);
    v7 = a1[12];
    if (!v7)
    {
      v8 = (const __CFArray *)a1[15];
      if (v8)
      {
        SIFlattenArrayToCStringVector(v8, v6, a1 + 30, v4);
        v7 = a1[12];
        if (!v7)
        {
          v19 = __si_assert_copy_extra_268();
          __message_assert_272((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26, (char)"SISearchCtx.h");
          free(v19);
          if (__valid_fs(-1))
            v27 = 2989;
          else
            v27 = 3072;
          *(_DWORD *)v27 = -559038737;
          abort();
        }
        v3 = *v4;
      }
      else
      {
        v7 = 0;
      }
    }
    v9 = 8 * v3;
    if (v3 >> 14)
      v10 = 1;
    else
      v10 = *MEMORY[0x1E0C85AD8] >= v9;
    if (!v10)
      ++sTotal;
    v11 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v9, 0x31F9A007uLL);
    if (!v11)
      _log_fault_for_malloc_failure();
    a1[17] = v11;
    v12 = a1[29];
    if (v12 >= 1)
    {
      for (i = 0; i < v12; ++i)
      {
        if (a2)
        {
          v14 = db_copy_field_ids_with_buffer(a2, *(char **)(v7 + 8 * i), 0, 0);
          v12 = *v4;
        }
        else
        {
          v14 = 0;
        }
        *(_QWORD *)(a1[17] + 8 * i) = v14;
      }
    }
    if (!a1[34])
    {
      if (a2)
        v15 = db_copy_field_ids_with_buffer(a2, "kMDItemLastUsedDate", 0, 0);
      else
        v15 = 0;
      a1[34] = v15;
    }
    if (!a1[35])
    {
      if (a2)
        v16 = db_copy_field_ids_with_buffer(a2, "kMDItemContentCreationDate", 0, 0);
      else
        v16 = 0;
      a1[35] = v16;
    }
    if (!a1[36])
    {
      if (a2)
        v17 = db_copy_field_ids_with_buffer(a2, "kMDItemEmailConversationID", 0, 0);
      else
        v17 = 0;
      a1[36] = v17;
    }
  }
  return a1[17];
}

void *db_copy_field_ids_with_buffer(int *a1, char *a2, uint64_t a3, unint64_t a4)
{
  int v6;
  NSObject *v7;
  int v8;
  char *v9;
  char *v10;
  const char *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *a1;
      *(_DWORD *)buf = 136315650;
      v13 = "db_copy_field_ids_with_buffer";
      v14 = 1024;
      v15 = 285;
      v16 = 1024;
      v17 = v8;
      _os_log_error_impl(&dword_1B8270000, v7, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v6;
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    if (v9)
      v11 = v9;
    else
      v11 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 285, v11);
    free(v10);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return internal_copy_field_ids((uint64_t)a1, a2, a3, a4, 0);
}

void *query_malloc(size_t size)
{
  void *v1;

  v1 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, size, 0x6085D6BuLL);
  if (!v1)
    _log_fault_for_malloc_failure();
  return v1;
}

uint64_t db_update_obj(int *a1, uint64_t a2, int a3)
{
  int v5;
  NSObject *v6;
  int v7;
  char *v8;
  char *v9;
  const char *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v5 = *__error();
    v6 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = *a1;
      *(_DWORD *)buf = 136315650;
      v12 = "db_update_obj";
      v13 = 1024;
      v14 = 320;
      v15 = 1024;
      v16 = v7;
      _os_log_error_impl(&dword_1B8270000, v6, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v5;
    v8 = __si_assert_copy_extra_268();
    v9 = v8;
    if (v8)
      v10 = v8;
    else
      v10 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 320, v10);
    free(v9);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return db2_update_obj_callback((uint64_t)a1, a2, a3, 0, 0);
}

uint64_t db_fast_dirty_datastore_if_necessary(uint64_t result)
{
  int *v1;
  int v2;
  NSObject *v3;
  int v4;
  char *v5;
  char *v6;
  const char *v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)result != 1685287992)
  {
    v1 = (int *)result;
    v2 = *__error();
    v3 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = *v1;
      *(_DWORD *)buf = 136315650;
      v9 = "db_fast_dirty_datastore_if_necessary";
      v10 = 1024;
      v11 = 253;
      v12 = 1024;
      v13 = v4;
      _os_log_error_impl(&dword_1B8270000, v3, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v2;
    v5 = __si_assert_copy_extra_268();
    v6 = v5;
    if (v5)
      v7 = v5;
    else
      v7 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 253, v7);
    free(v6);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if ((*(_BYTE *)(result + 4) & 1) != 0)
    return db2_dirty_datastore(result);
  return result;
}

uint64_t db2_update_obj_callback(uint64_t a1, uint64_t a2, int a3, void (*a4)(uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v10;
  unsigned int v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  int v17;
  pthread_key_t v18;
  void *v19;
  unsigned int v20;
  unint64_t v21;
  signed int v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int inserted;
  int v27;
  int v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _BOOL4 v53;
  int v54;
  unsigned int *v55;
  size_t v56;
  unsigned int v57;
  int updated;
  int v59;
  NSObject *v60;
  int v61;
  NSObject *v62;
  int v63;
  pthread_override_s *v64;
  char v65;
  _DWORD *v66;
  _DWORD *v67;
  int v68;
  int v69;
  char *v71;
  char *v72;
  const char *v73;
  int v74;
  NSObject *v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  _BYTE v82[18];
  __int16 v83;
  int v84;
  __int16 v85;
  uint64_t v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)a2;
  if ((*(_BYTE *)(a1 + 804) & 8) != 0)
  {
    v14 = 13;
    if (!a4)
    {
LABEL_7:
      v15 = *__error();
      v16 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v82 = 136315906;
        *(_QWORD *)&v82[4] = "db2_update_obj_callback";
        *(_WORD *)&v82[12] = 1024;
        *(_DWORD *)&v82[14] = 11621;
        v83 = 1024;
        v84 = v14;
        v85 = 2048;
        v86 = v10;
        _os_log_error_impl(&dword_1B8270000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Error %d, oid %llx", v82, 0x22u);
      }
      *__error() = v15;
      return v14;
    }
    goto LABEL_11;
  }
  v11 = *(_DWORD *)(a2 + 12);
  if (v11 < 0x30 || *(_DWORD *)(a2 + 8) <= 0x2Fu)
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v82 = 136315394;
      *(_QWORD *)&v82[4] = "db2_update_obj_callback";
      *(_WORD *)&v82[12] = 1024;
      *(_DWORD *)&v82[14] = 11608;
      _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: dbo too small", v82, 0x12u);
    }
    *__error() = v12;
    v14 = 22;
    if (!a4)
      goto LABEL_7;
LABEL_11:
    v17 = 0;
    v79 = 1;
LABEL_12:
    v80 = 1;
    goto LABEL_13;
  }
  if (v11 > 0xFFEB)
  {
    v14 = 7;
    if (!a4)
      return v14;
    v79 = 0;
    v17 = 0;
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 40) &= ~8u;
  if ((a3 & 1) != 0)
  {
    v14 = 0;
    v80 = 0;
  }
  else
  {
    *(_QWORD *)v82 = 0;
    *(_QWORD *)&v82[8] = 0;
    if (gettimeofday((timeval *)v82, 0))
    {
      v44 = time(0);
      v45 = 0;
    }
    else
    {
      v44 = *(_DWORD *)v82;
      v45 = *(unsigned int *)&v82[8];
    }
    v14 = 0;
    v80 = 0;
    *(_QWORD *)(a2 + 16) = v45 + 1000000 * v44;
  }
  v79 = 1;
  v17 = 1;
LABEL_13:
  v78 = v10;
  v18 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v18 = __THREAD_SLOT_KEY;
  }
  v19 = pthread_getspecific(v18);
  HIDWORD(v21) = qos_class_self() - 9;
  LODWORD(v21) = HIDWORD(v21);
  v20 = v21 >> 2;
  if (v20 > 6)
    v22 = 0;
  else
    v22 = dword_1B8630ED0[v20];
  v23 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(_QWORD *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(_BYTE *)(a1 + 796))
    goto LABEL_21;
  if (v22 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v22 + 648))
    {
LABEL_21:
      db_rwlock_wait(a1 + 584, v22, 2);
      goto LABEL_22;
    }
    v50 = v22 - 1;
    v51 = (uint64_t *)(a1 + 16 * v22 + 664);
    while (v50 != 4)
    {
      v52 = *v51;
      v51 += 2;
      ++v50;
      if (v52)
      {
        if (v50 <= 4)
          goto LABEL_21;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 768) = pthread_self();
LABEL_22:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v23)
  {
    v74 = *__error();
    v75 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v82 = 136315650;
      *(_QWORD *)&v82[4] = "db2_update_obj_callback";
      *(_WORD *)&v82[12] = 1024;
      *(_DWORD *)&v82[14] = 11626;
      v83 = 1024;
      v84 = v23;
      _os_log_error_impl(&dword_1B8270000, v75, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", v82, 0x18u);
    }
    *__error() = v74;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11626);
  }
  v24 = (uint64_t)v19 - 1;
  if (v19)
  {
    v25 = CIOnThreadCleanUpPush((uint64_t)v19 - 1, (uint64_t)db_write_unlock, a1 + 584);
    if (!v17)
      goto LABEL_88;
LABEL_27:
    if (*(_DWORD *)(a2 + 12) <= 0x2Fu)
    {
      v71 = __si_assert_copy_extra_2151(0, -1);
      v72 = v71;
      v73 = "";
      if (v71)
        v73 = v71;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13332, "dbo->used_bytes >= sizeof(external_db_obj)", v73);
      free(v72);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    if ((a3 & 4) == 0)
    {
      inserted = _insert_obj(a1, (uint64_t *)a2, (a3 & 0xA) != 0, a3 | 8u);
      if (!inserted)
        goto LABEL_88;
      v27 = inserted;
      if (inserted == 7)
        goto LABEL_88;
      v77 = v25;
      v28 = *__error();
      v29 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v82 = 136315906;
        *(_QWORD *)&v82[4] = "update_obj_locked";
        *(_WORD *)&v82[12] = 1024;
        *(_DWORD *)&v82[14] = 11563;
        v83 = 1024;
        v84 = v27;
        v85 = 2048;
        v86 = v78;
        _os_log_error_impl(&dword_1B8270000, v29, OS_LOG_TYPE_ERROR, "%s:%d: Error %d, oid %llx", v82, 0x22u);
      }
      *__error() = v28;
      v24 = (uint64_t)v19 - 1;
      goto LABEL_87;
    }
    v30 = 0;
    v81 = 0;
    if ((*(_BYTE *)(a1 + 804) & 1) != 0)
      v30 = (*(_DWORD *)(a2 + 40) >> 5) & 1;
    v31 = *(_QWORD *)(a1 + 856);
    v32 = *(unsigned int *)(v31 + 8);
    v77 = v25;
    if ((_DWORD)v32)
    {
      v33 = *(_QWORD *)a2;
      v34 = *(int *)(v31 + 16);
      if ((int)v34 >= (int)v32
        || (v35 = v31 + 16 * v34, *(_QWORD *)(v35 + 20) != v33)
        || (v36 = *(_DWORD *)(v35 + 32), v30 != v36 >> 28))
      {
        v37 = (int)v32;
        if ((int)v32 >= 1)
        {
          v38 = 0;
          while (1)
          {
            if ((int)v32 + v38 < 0 != __OFADD__((_DWORD)v32, v38))
              v41 = v32 + v38 + 1;
            else
              v41 = v32 + v38;
            v42 = (v41 >> 1);
            v43 = v30 - (*(_DWORD *)(v31 + 16 * (int)v42 + 32) >> 28);
            if (v43)
            {
              v39 = v43;
              v40 = v42;
              if ((v39 & 0x8000000000000000) == 0)
                goto LABEL_43;
            }
            else
            {
              v39 = v33 - *(_QWORD *)(v31 + 16 * ((uint64_t)v41 >> 1) + 20);
              v40 = v42;
              if ((v39 & 0x8000000000000000) == 0)
              {
LABEL_43:
                if (!v39)
                  goto LABEL_71;
                v38 = v42 + 1;
                v40 = v32;
              }
            }
            v32 = v40;
            if (v38 >= (int)v40)
            {
              v53 = v39 > 0;
              goto LABEL_72;
            }
          }
        }
        LODWORD(v42) = 0;
LABEL_71:
        v53 = 0;
LABEL_72:
        if (v37 - 1 <= (int)v42)
          v53 = 0;
        v54 = v42 + v53;
        v34 = v54;
        *(_DWORD *)(v31 + 16) = v54;
        v36 = *(_DWORD *)(v31 + 16 * v54 + 32);
      }
      v76 = v14;
      v55 = (unsigned int *)(v31 + 16 * v34 + 28);
      v56 = v36 & 0xFFFFFFF;
    }
    else
    {
      *(_QWORD *)v82 = 0;
      v46 = _page_alloc_fetch(a1, (int8x16_t **)v82, 0, (unsigned int *)&v81 + 1, (signed int *)&v81, 4u);
      if (v46)
      {
        v47 = v46;
        v48 = *__error();
        v49 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v82 = 136315906;
          *(_QWORD *)&v82[4] = "update_obj_locked";
          *(_WORD *)&v82[12] = 1024;
          *(_DWORD *)&v82[14] = 11592;
          v83 = 1024;
          v84 = v47;
          v85 = 2048;
          v86 = v78;
          _os_log_error_impl(&dword_1B8270000, v49, OS_LOG_TYPE_ERROR, "%s:%d: Error %d, oid %llx", v82, 0x22u);
        }
        *__error() = v48;
        goto LABEL_86;
      }
      v76 = v14;
      free(*(void **)v82);
      v55 = (unsigned int *)&v81 + 1;
      v56 = v81;
    }
    v57 = *v55;
    serializeDBO(a1);
    updated = _page_update_obj(a1, 0, v57, v56, a3 & 0x4002);
    if (updated == 2)
    {
      if ((a3 & 8) == 0)
      {
        updated = 2;
        goto LABEL_82;
      }
      updated = _real_page_insert_obj(a1, 0, a3, v57, v56);
    }
    if (!updated)
    {
LABEL_85:
      free(0);
      v14 = v76;
LABEL_86:
      v24 = (uint64_t)v19 - 1;
LABEL_87:
      v25 = v77;
      goto LABEL_88;
    }
LABEL_82:
    v59 = *__error();
    v60 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v82 = 136315906;
      *(_QWORD *)&v82[4] = "update_obj_locked";
      *(_WORD *)&v82[12] = 1024;
      *(_DWORD *)&v82[14] = 11585;
      v83 = 1024;
      v84 = updated;
      v85 = 2048;
      v86 = v78;
      _os_log_error_impl(&dword_1B8270000, v60, OS_LOG_TYPE_ERROR, "%s:%d: Error %d, oid %llx", v82, 0x22u);
    }
    *__error() = v59;
    goto LABEL_85;
  }
  v25 = -1;
  if (v17)
    goto LABEL_27;
LABEL_88:
  if (a4)
    a4(a2, a5, v14);
  if ((v79 & v80) == 1)
  {
    v61 = *__error();
    v62 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v82 = 136315906;
      *(_QWORD *)&v82[4] = "db2_update_obj_callback";
      *(_WORD *)&v82[12] = 1024;
      *(_DWORD *)&v82[14] = 11637;
      v83 = 1024;
      v84 = v14;
      v85 = 2048;
      v86 = v78;
      _os_log_error_impl(&dword_1B8270000, v62, OS_LOG_TYPE_ERROR, "%s:%d: Error %d, oid %llx", v82, 0x22u);
    }
    *__error() = v61;
  }
  v63 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_DWORD *)(a1 + 788) = 0;
  v64 = *(pthread_override_s **)(a1 + 760);
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  v65 = *(_DWORD *)(a1 + 780) != 0;
  *(_BYTE *)(a1 + 796) = 0;
  db_rwlock_wakeup(a1 + 584, v65, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v64)
    pthread_override_qos_class_end_np(v64);
  if (v63)
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11641);
  if (v19)
  {
    CIOnThreadCleanUpClearItem(v24, v25);
    v66 = &threadData[18 * v24];
    v69 = v66[14];
    v67 = v66 + 14;
    v68 = v69;
    if (v25 + 1 == v69)
      *v67 = v68 - 1;
  }
  return v14;
}

uint64_t _skipIndexForUpdate(const __CFDictionary *a1, const __CFString *a2)
{
  CFIndex Count;
  CFComparisonResult v5;
  BOOL v6;
  CFStringRef *v7;
  uint64_t v8;
  CFTypeRef *v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  CFTypeID v13;
  uint64_t result;
  const __CFString *Value;
  const __CFString *v16;
  CFTypeID v17;
  const __CFString *v18;
  const __CFString *v19;
  CFTypeID v20;
  int v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  uint8_t *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint32_t v28;
  NSObject *v29;
  os_log_type_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _QWORD v33[2];
  int v34;
  _DWORD *v35;
  __int16 v36;
  _WORD *v37;
  _DWORD v38[32];
  _WORD v39[64];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  Count = CFDictionaryGetCount(a1);
  v5 = CFStringCompare(a2, CFSTR("com.apple.searchd"), 0);
  if (v5)
    v6 = 1;
  else
    v6 = (unint64_t)(Count - 3) > 1;
  if (!v6)
  {
    v33[1] = v33;
    MEMORY[0x1E0C80A78](v5);
    v7 = (CFStringRef *)((char *)v33 - ((8 * Count + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v7, 8 * Count);
    MEMORY[0x1E0C80A78](v8);
    v9 = (CFTypeRef *)v7;
    bzero(v7, 8 * Count);
    CFDictionaryGetKeysAndValues(a1, (const void **)v7, (const void **)v7);
    v10 = 0;
    v11 = 0;
    v12 = (CFTypeRef)*MEMORY[0x1E0C9B0D0];
    do
    {
      if (*v9 != v12)
      {
        v13 = CFGetTypeID(*v9);
        if (v13 == CFDataGetTypeID() && CFStringHasPrefix(*v7, CFSTR("_kMDItemStateInfo")))
        {
          ++v10;
        }
        else
        {
          if (v11 >= 2)
            goto LABEL_15;
          ++v11;
        }
      }
      ++v7;
      ++v9;
      --Count;
    }
    while (Count);
    if (v10 && v11 == 2)
      return 1;
  }
LABEL_15:
  if (CFDictionaryGetValue(a1, CFSTR("_kMDItemRenderDate"))
    || CFDictionaryGetValue(a1, CFSTR("_kMDItemEngagementDate"))
    || CFDictionaryGetValue(a1, CFSTR("_kMDItemLastSpotlightEngagementQuery"))
    || (result = (uint64_t)CFDictionaryGetValue(a1, CFSTR("_kMDItemLastOutOfSpotlightEngagementDate"))) != 0)
  {
    if (SIIsAppleInternal_onceToken != -1)
      dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_4644);
    if (SIIsAppleInternal_internal)
    {
      Value = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("_kMDItemExternalID"));
      if (Value)
      {
        v16 = Value;
        v17 = CFGetTypeID(Value);
        if (v17 == CFStringGetTypeID())
        {
          memset(v39, 0, sizeof(v39));
          CFStringGetCString(v16, (char *)v39, 128, 0x8000100u);
          v18 = (const __CFString *)CFDictionaryGetValue(a1, CFSTR("_kMDItemBundleID"));
          if (!v18 || (v19 = v18, v20 = CFGetTypeID(v18), v20 != CFStringGetTypeID()))
          {
            v21 = *__error();
            v31 = _SILogForLogForCategory(0);
            v32 = 2 * (gSILogLevels[0] < 4);
            if (!os_log_type_enabled(v31, v32))
              goto LABEL_34;
            v38[0] = 136315138;
            *(_QWORD *)&v38[1] = v39;
            v24 = "Skipping index for feedback item %s";
            v25 = (uint8_t *)v38;
            v26 = v31;
            v27 = v32;
            v28 = 12;
            goto LABEL_33;
          }
          memset(v38, 0, sizeof(v38));
          CFStringGetCString(v19, (char *)v38, 128, 0x8000100u);
          v21 = *__error();
          v22 = _SILogForLogForCategory(0);
          v23 = 2 * (gSILogLevels[0] < 4);
          if (os_log_type_enabled(v22, v23))
          {
            v34 = 136315394;
            v35 = v38;
            v36 = 2080;
            v37 = v39;
            v24 = "Skpping index for feedback item (%s, %s)";
            v25 = (uint8_t *)&v34;
            v26 = v22;
            v27 = v23;
            v28 = 22;
LABEL_33:
            _os_log_impl(&dword_1B8270000, v26, v27, v24, v25, v28);
          }
LABEL_34:
          *__error() = v21;
          return 1;
        }
      }
      v21 = *__error();
      v29 = _SILogForLogForCategory(0);
      v30 = 2 * (gSILogLevels[0] < 4);
      if (!os_log_type_enabled(v29, v30))
        goto LABEL_34;
      v39[0] = 0;
      v24 = "Skipping index for feedback item";
    }
    else
    {
      v21 = *__error();
      v29 = _SILogForLogForCategory(0);
      v30 = 2 * (gSILogLevels[0] < 4);
      if (!os_log_type_enabled(v29, v30))
        goto LABEL_34;
      v39[0] = 0;
      v24 = "Skipping index for feedback item";
    }
    v25 = (uint8_t *)v39;
    v26 = v29;
    v27 = v30;
    v28 = 2;
    goto LABEL_33;
  }
  return result;
}

__CFDictionary *decodeDBOToDictionary(int *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, CFAllocatorRef allocator)
{
  const CFDictionaryKeyCallBacks *v15;
  uint64_t *p_cStr;
  uint64_t v17;
  int v18;
  int v20;
  CFStringRef v21;
  int id_for_field;
  int v24;
  int v25;
  CFDictionaryRef v26;
  CFDictionaryRef v27;
  unint64_t v28;
  const __CFString *v29;
  CFDateRef v30;
  const __CFAllocator *v31;
  CFMutableArrayRef Mutable;
  CFDictionaryRef v33;
  CFDictionaryRef v34;
  CFDictionaryRef v35;
  unint64_t v36;
  __CFDictionary *theDict;
  uint64_t v42;
  int v43[2];
  _QWORD v44[2];
  void (*v45)(uint64_t, const __CFArray *);
  void *v46;
  CFMutableArrayRef v47;
  int v48[2];
  char *cStr;
  int v50;

  if (a5)
    v15 = (const CFDictionaryKeyCallBacks *)&kSIDictionaryPropertyIdKeyCallbacks;
  else
    v15 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  theDict = CFDictionaryCreateMutable(allocator, 0, v15, MEMORY[0x1E0C9B3A0]);
  v50 = 0;
  *(_QWORD *)v48 = 0;
  cStr = 0;
  if (a5 == 1)
    p_cStr = 0;
  else
    p_cStr = (uint64_t *)&cStr;
  while (db_next_field(a1, a2, 0, &v50, p_cStr, v48) == 35)
  {
    v17 = *(_QWORD *)v48;
    v18 = *(unsigned __int16 *)(*(_QWORD *)v48 + 2);
    if ((v18 & a4) == 0 && (v18 & a3) == a3)
    {
      switch(a5)
      {
        case 0:
          v21 = CFStringCreateWithCString(allocator, cStr, 0x8000100u);
          v17 = *(_QWORD *)v48;
          goto LABEL_34;
        case 1:
          v20 = *(_DWORD *)(*(_QWORD *)v48 + 4);
LABEL_16:
          v21 = (CFStringRef)(v20 | ((unsigned __int16)(v18 & 0x100) << 23));
          goto LABEL_34;
        case 2:
          id_for_field = db_get_id_for_field(a1, cStr);
          if (!a7 || id_for_field != a7)
          {
            if (id_for_field != a6 || a6 == 0)
              v24 = id_for_field;
            else
              v24 = id_for_field | 0x20000000;
            v17 = *(_QWORD *)v48;
            v18 = *(unsigned __int16 *)(*(_QWORD *)v48 + 2);
            v25 = (v18 << 24) & 0x8000000;
            if ((v18 & 0x4000) != 0)
              v25 = 0x10000000;
            v20 = v25 | v24;
            if ((~v18 & 0x5020) == 0 && **(_WORD **)v48 == 14)
              v20 |= 0x4000000u;
            goto LABEL_16;
          }
          break;
        default:
          v21 = 0;
LABEL_34:
          v26 = _decodeSDBField((unint64_t)a1, (unsigned __int16 *)v17, (unsigned __int8 *)(v17 + 13), 0, a8, a9, 0, allocator);
          if (v26)
          {
            v27 = v26;
            CFDictionarySetValue(theDict, v21, v26);
            CFRelease(v27);
          }
          if (!a5)
          {
            if (v21)
              CFRelease(v21);
          }
          break;
      }
    }
  }
  if ((a3 & 0x800) != 0 || (v28 = *(_QWORD *)(a2 + 16)) == 0)
  {
    if ((a3 & 0x800) == 0)
      goto LABEL_47;
  }
  else
  {
    if (a5)
    {
      v29 = (const __CFString *)(db_get_id_for_field(a1, "kMDItemAttributeChangeDate") | 0x80000000);
      v28 = *(_QWORD *)(a2 + 16);
    }
    else
    {
      v29 = CFSTR("kMDItemAttributeChangeDate");
    }
    v30 = CFDateCreate(allocator, (double)v28 / 1000000.0 - *MEMORY[0x1E0C9ADF8]);
    CFDictionarySetValue(theDict, v29, v30);
    CFRelease(v30);
LABEL_47:
    v31 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 0x40000000;
    v45 = __decodeDBOToDictionary_block_invoke;
    v46 = &__block_descriptor_tmp_91_6748;
    v47 = Mutable;
    if (a1)
    {
      v42 = 0;
      *(_QWORD *)v43 = 0;
      if (!db_get_field(a1, a2, "kMDItemPrimaryRecipientEmailAddresses", (unint64_t *)v43, &v42))
      {
        v33 = _decodeSDBField((unint64_t)a1, *(unsigned __int16 **)v43, (unsigned __int8 *)(*(_QWORD *)v43 + 13), 0, 0, 0, 0, v31);
        v45((uint64_t)v44, v33);
        CFRelease(v33);
      }
      if (!db_get_field(a1, a2, "kMDItemAdditionalRecipientEmailAddresses", (unint64_t *)v43, &v42))
      {
        v34 = _decodeSDBField((unint64_t)a1, *(unsigned __int16 **)v43, (unsigned __int8 *)(*(_QWORD *)v43 + 13), 0, 0, 0, 0, v31);
        v45((uint64_t)v44, v34);
        CFRelease(v34);
      }
      if (!db_get_field(a1, a2, "kMDItemHiddenAdditionalRecipientEmailAddresses", (unint64_t *)v43, &v42))
      {
        v35 = _decodeSDBField((unint64_t)a1, *(unsigned __int16 **)v43, (unsigned __int8 *)(*(_QWORD *)v43 + 13), 0, 0, 0, 0, v31);
        v45((uint64_t)v44, v35);
        CFRelease(v35);
      }
    }
    if (CFArrayGetCount(Mutable))
    {
      if (a5)
        v36 = db_get_id_for_field(a1, "kMDItemRecipientEmailAddresses");
      else
        v36 = (unint64_t)CFSTR("kMDItemRecipientEmailAddresses");
      CFDictionarySetValue(theDict, (const void *)v36, Mutable);
    }
    CFRelease(Mutable);
  }
  return theDict;
}

uint64_t db_next_field(_DWORD *a1, uint64_t a2, int a3, _DWORD *a4, uint64_t *a5, _QWORD *a6)
{
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t string_and_length_for_id_10395;
  int v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  int v19;
  NSObject *v20;
  int v21;
  char *v22;
  char *v23;
  const char *v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v19 = *__error();
    v20 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = *a1;
      *(_DWORD *)buf = 136315650;
      v26 = "db_next_field";
      v27 = 1024;
      v28 = 409;
      v29 = 1024;
      v30 = v21;
      _os_log_error_impl(&dword_1B8270000, v20, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v19;
    v22 = __si_assert_copy_extra_268();
    v23 = v22;
    if (v22)
      v24 = v22;
    else
      v24 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 409, v24);
    free(v23);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  v8 = a2;
  LODWORD(v9) = *a4;
  if (*a4)
    v9 = v9;
  else
    v9 = 48;
  if (v9 >= *(_DWORD *)(a2 + 12))
    return 0;
  v12 = a2 + v9;
  if (a5
    && (string_and_length_for_id_10395 = get_string_and_length_for_id_10395((uint64_t)a1, 0, *(_DWORD *)(v12 + 4), 0, a3), (*a5 = string_and_length_for_id_10395) == 0))
  {
    v15 = *__error();
    v16 = _SILogForLogForCategory(7);
    v17 = 2 * (dword_1EF19FCA8 < 4);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = *(_DWORD *)(v12 + 4);
      *(_DWORD *)buf = 136315394;
      v26 = (const char *)(a1 + 81);
      v27 = 1024;
      v28 = v18;
      _os_log_impl(&dword_1B8270000, v16, v17, "%s : ERR: XXXdbg - whoa dude... can't get name ptr for name id %d\n", buf, 0x12u);
    }
    *__error() = v15;
    return 2;
  }
  else
  {
    if (a6)
      *a6 = v12;
    *a4 = v12 + *(_DWORD *)(v12 + 8) - v8 + 13;
    return 35;
  }
}

uint64_t db_get_id_for_field(int *a1, char *a2)
{
  uint8_t *v2;
  uint64_t v3;
  int v6;
  NSObject *v7;
  int v8;
  char *v9;
  char *v10;
  const char *v11;
  uint8_t buf[40];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *a1;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "db_get_id_for_field";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 288;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v8;
      _os_log_error_impl(&dword_1B8270000, v7, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v6;
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    if (v9)
      v11 = v9;
    else
      v11 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 288, v11);
    free(v10);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  memset(buf, 0, 32);
  v2 = (uint8_t *)internal_copy_field_ids((uint64_t)a1, a2, (uint64_t)buf, 8uLL, 0);
  if (v2)
    v3 = *(unsigned int *)v2;
  else
    v3 = 4294967294;
  if (v2 != buf)
    free(v2);
  return v3;
}

CFDictionaryRef _decodeSDBField(unint64_t a1, unsigned __int16 *a2, unsigned __int8 *a3, char **a4, int a5, int a6, int a7, CFAllocatorRef allocator)
{
  uint64_t v9;
  const char *v12;
  CFIndex v14;
  int v15;
  CFDictionaryRef v16;
  uint64_t v17;
  CFIndex v18;
  const UInt8 *v19;
  CFNumberRef v20;
  unint64_t v21;
  CFDataRef v22;
  CFDictionaryRef v23;
  const UInt8 *v24;
  void *UniquedDBFValue;
  int v27;
  NSObject *v28;
  int *v29;
  os_log_type_t v30;
  int v31;
  CFDataRef v32;
  void *v33;
  int v34;
  NSObject *v35;
  const char *v36;
  NSObject *v37;
  uint32_t v38;
  CFDateRef Value;
  NSObject *v40;
  unint64_t v41;
  uint64_t v42;
  const UInt8 *v43;
  const char *v44;
  const __CFString *v45;
  int64_t v46;
  unint64_t v47;
  const UInt8 *v48;
  int v49;
  const char *string_for_id_locked;
  CFIndex v51;
  CFStringRef v52;
  int64_t v53;
  CFStringRef v54;
  CFStringRef v55;
  CFMutableArrayRef Mutable;
  CFNumberRef v57;
  void **v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  CFIndex v62;
  const UInt8 *v63;
  unsigned int v64;
  CFNumberRef v65;
  CFDataRef v66;
  uint64_t v67;
  CFIndex v68;
  CFDictionaryRef v69;
  __CFArray *StringArray;
  __CFArray *ScalarArray;
  uint64_t v72;
  uint64_t vector_for_id_locked;
  CFDataRef v74;
  CFDictionaryRef v75;
  const UInt8 *v76;
  char *v77;
  char *v78;
  const char *v79;
  const __CFAllocator *allocatora;
  CFNumberRef cf;
  CFNumberRef v82;
  CFNumberRef v83;
  __CFArray *theArray;
  __CFDictionary *theArraya;
  __CFArray *theArrayb;
  void *v87;
  unsigned __int16 valuePtr;
  __int16 v89;
  int v90;
  void *values;
  CFNumberRef v92;
  CFDataRef v93;
  CFNumberRef v94;
  CFNumberRef v95;
  void *keys[2];
  __int128 v97;
  const __CFString *v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  v9 = *a2;
  if ((v9 - 1) > 0xF)
    return 0;
  v12 = (const char *)a3;
  v14 = *((unsigned int *)a2 + 2);
  v90 = *((_DWORD *)a2 + 2);
  v15 = a2[1];
  if ((_DWORD)v9 != 14)
  {
    if (a4 || (v15 & 0x80) == 0)
    {
      if ((v15 & 0x80) != 0)
      {
        keys[0] = a3;
        values = 0;
        if (db_get_localized_string((int *)a1, (uint64_t)a2, a4, (uint64_t)keys, (uint64_t)&values, a7))
          v55 = CFStringCreateWithCString(allocator, "", 0x8000100u);
        else
          v55 = CFStringCreateWithBytes(allocator, (const UInt8 *)keys[0], (CFIndex)values - (unint64_t)keys[0], 0x8000100u, 0);
        v16 = (CFDictionaryRef)v55;
        if (dword_1EF19FC9C < 5)
          return v16;
        v33 = (void *)v55;
        v34 = *__error();
        v40 = _SILogForLogForCategory(4);
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          goto LABEL_114;
        LODWORD(keys[0]) = 138412290;
        *(void **)((char *)keys + 4) = v33;
        v36 = "DB_FIELD_LOCALIZED_STR: %@. ";
      }
      else if ((v15 & 0x20) != 0)
      {
        if ((_DWORD)v9 == 11)
        {
          StringArray = createStringArray((int *)a1, a2[1], (const char *)a3, v14, a7, allocator);
          v16 = StringArray;
          if (dword_1EF19FC9C < 5)
            return v16;
          v33 = StringArray;
          v34 = *__error();
          v40 = _SILogForLogForCategory(4);
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            goto LABEL_114;
          LODWORD(keys[0]) = 138412290;
          *(void **)((char *)keys + 4) = v33;
          v36 = "db_utf8str: %@. ";
        }
        else
        {
          ScalarArray = createScalarArray((int *)a1, v9, a2[1], (const char *)a3, v14 / SDBTypeSizes[v9], a7, allocator);
          v16 = ScalarArray;
          if (dword_1EF19FC9C < 5)
            return v16;
          v33 = ScalarArray;
          v34 = *__error();
          v40 = _SILogForLogForCategory(4);
          if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            goto LABEL_114;
          LODWORD(keys[0]) = 138412290;
          *(void **)((char *)keys + 4) = v33;
          v36 = "Scalar array: %@. ";
        }
      }
      else
      {
        Value = createValue((int *)a1, v9, a2[1], (const char *)a3, a7, allocator);
        v16 = Value;
        if (dword_1EF19FC9C < 5)
          return v16;
        v33 = Value;
        v34 = *__error();
        v40 = _SILogForLogForCategory(4);
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          goto LABEL_114;
        LODWORD(keys[0]) = 138412290;
        *(void **)((char *)keys + 4) = v33;
        v36 = "DB_VAL: %@. ";
      }
LABEL_112:
      v37 = v40;
      v38 = 12;
      goto LABEL_113;
    }
    if ((v15 & 0x110) == 0x10 && a5)
    {
      UniquedDBFValue = (void *)getUniquedDBFValue(a1, 4, a2, a6);
      keys[0] = UniquedDBFValue;
      if ((_DWORD)UniquedDBFValue != -2 && (_DWORD)UniquedDBFValue)
      {
        values = CFNumberCreate(allocator, kCFNumberCFIndexType, keys);
        v29 = (_DWORD *)&unk_1EF19F000;
        if (values)
        {
          v87 = &stru_1E6E3A6D8;
          v16 = CFDictionaryCreate(allocator, (const void **)&v87, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFRelease(values);
        }
        else
        {
          v16 = 0;
        }
      }
      else
      {
        v27 = *__error();
        v28 = _SILogForLogForCategory(4);
        v29 = (int *)&unk_1EF19F000;
        v30 = dword_1EF19FC9C < 3;
        if (os_log_type_enabled(v28, (os_log_type_t)(dword_1EF19FC9C < 3)))
        {
          v31 = *((_DWORD *)a2 + 1);
          LODWORD(values) = 67109120;
          HIDWORD(values) = v31;
          _os_log_impl(&dword_1B8270000, v28, v30, "*warn* could not resolve unique dbf value for field %d", (uint8_t *)&values, 8u);
        }
        v16 = 0;
        *__error() = v27;
      }
      goto LABEL_77;
    }
    theArraya = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!(_DWORD)v14)
    {
LABEL_76:
      v16 = theArraya;
      v29 = (int *)&unk_1EF19F000;
LABEL_77:
      if (v29[807] < 5)
        return v16;
      v33 = v16;
      v34 = *__error();
      v40 = _SILogForLogForCategory(4);
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        goto LABEL_114;
      LODWORD(keys[0]) = 138412290;
      *(void **)((char *)keys + 4) = v33;
      v36 = "DB_FIELD_LOCALIZED_STR: %@. ";
      goto LABEL_112;
    }
    v44 = &v12[v14];
    while (1)
    {
      if ((v15 & 0x10) != 0)
      {
        v49 = *(_DWORD *)v12;
        if (a7)
          string_for_id_locked = (const char *)db_get_string_for_id_locked((int *)a1, v49);
        else
          string_for_id_locked = (const char *)db_get_string_for_id((int *)a1, v49);
        v48 = (const UInt8 *)string_for_id_locked;
        v47 = (unint64_t)(v12 + 4);
        if (!string_for_id_locked)
        {
          v45 = &stru_1E6E3A6D8;
          goto LABEL_52;
        }
        v46 = strlen(string_for_id_locked);
        if (v46 >= 2)
        {
LABEL_61:
          v51 = 0;
          while (v48[v51] != 22 || v48[v51 + 1] != 2)
          {
            if (v46 - 1 == ++v51)
              goto LABEL_71;
          }
          v52 = CFStringCreateWithBytes(allocator, v48, v51, 0x8000100u, 0);
          v53 = (v51 + 2);
          if (v46 > v53)
          {
            v54 = CFStringCreateWithCString(allocator, (const char *)&v48[v53], 0x8000100u);
            if (v54)
              v45 = v54;
            else
              v45 = &stru_1E6E3A6D8;
            if (!v52)
              goto LABEL_52;
LABEL_73:
            CFDictionarySetValue(theArraya, v45, v52);
            CFRelease(v52);
            goto LABEL_52;
          }
          goto LABEL_72;
        }
      }
      else
      {
        v46 = strlen(v12);
        v47 = (unint64_t)&v12[v46 + 1];
        v48 = (const UInt8 *)v12;
        if (v46 >= 2)
          goto LABEL_61;
      }
LABEL_71:
      v52 = CFStringCreateWithBytes(allocator, v48, v46, 0x8000100u, 0);
LABEL_72:
      v45 = &stru_1E6E3A6D8;
      if (v52)
        goto LABEL_73;
LABEL_52:
      CFRelease(v45);
      v12 = (const char *)v47;
      if (v47 >= (unint64_t)v44)
        goto LABEL_76;
    }
  }
  if ((~v15 & 0x5020) != 0)
  {
    v32 = CFDataCreate(allocator, a3, v14);
    v16 = v32;
    if (dword_1EF19FC9C < 5)
      return v16;
    v33 = v32;
    v34 = *__error();
    v35 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(keys[0]) = 0;
      v36 = "DB Raw";
      v37 = v35;
      v38 = 2;
LABEL_113:
      _os_log_impl(&dword_1B8270000, v37, OS_LOG_TYPE_DEFAULT, v36, (uint8_t *)keys, v38);
    }
LABEL_114:
    *__error() = v34;
    return (CFDictionaryRef)v33;
  }
  if ((v15 & 8) != 0)
  {
    if ((v15 & 0x10) != 0)
    {
      v41 = *(_QWORD *)((char *)a2 + 13);
      if (v14 >= 8 && v41 && v41 != 4294967294)
      {
        v72 = *(_QWORD *)(a1 + 920);
        if (a7)
          vector_for_id_locked = db2_get_vector_for_id_locked(v72, v41, &v90, keys);
        else
          vector_for_id_locked = db2_get_vector_for_id(v72, v41, &v90, keys);
        LODWORD(v14) = v90;
        if (vector_for_id_locked)
        {
          v12 = (const char *)(vector_for_id_locked - 2);
          LODWORD(v14) = v90 + 2;
          v90 += 2;
          v16 = 0;
          if (vector_for_id_locked == 2)
            return v16;
          goto LABEL_44;
        }
      }
      else
      {
        si_analytics_log_2520("Malformed sdb entry for vector %llx %u", *(_QWORD *)((char *)a2 + 13), v14);
      }
      v12 = 0;
    }
    v16 = 0;
    if (!v12)
      return v16;
LABEL_44:
    if (v14 < 3)
      return v16;
    v16 = 0;
    LOBYTE(valuePtr) = 0;
    LOBYTE(valuePtr) = *v12;
    v42 = *((unsigned __int8 *)v12 + 1);
    HIBYTE(v89) = v12[1];
    if (valuePtr > 2uLL || v42 > 2)
      return v16;
    v18 = (vector_dimension_vec_sizes_10743[v42] * vector_size_elem_sizes_10742[valuePtr]);
    v43 = (const UInt8 *)(v12 + 2);
    v87 = (void *)(v12 + 2);
    v82 = CFNumberCreate(allocator, kCFNumberCharType, &valuePtr);
    v20 = CFNumberCreate(allocator, kCFNumberCharType, (char *)&v89 + 1);
    v21 = (unint64_t)&v12[v14];
    if ((unint64_t)&v43[v18] <= v21)
    {
      if ((a2[1] & 0x20) != 0)
      {
        theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
        do
        {
          v74 = CFDataCreate(allocator, v43, v18);
          *(_OWORD *)keys = xmmword_1E6E37120;
          v97 = xmmword_1E6E37130;
          v98 = CFSTR("vec_version");
          values = v82;
          v92 = v20;
          v93 = v74;
          v94 = 0;
          v95 = 0;
          v75 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          CFRelease(v74);
          if (v75)
          {
            CFArrayAppendValue(theArray, v75);
            CFRelease(v75);
          }
          if ((unint64_t)&v43[v18] >= v21)
            break;
          v76 = &v43[2 * v18];
          v43 += v18;
        }
        while ((unint64_t)v76 <= v21);
        goto LABEL_136;
      }
      goto LABEL_127;
    }
LABEL_48:
    v16 = 0;
LABEL_137:
    CFRelease(v82);
    CFRelease(v20);
    return v16;
  }
  if ((v15 & 0x10) == 0)
  {
    if (v14 >= 3)
    {
      v16 = 0;
      LOBYTE(valuePtr) = *a3;
      v17 = a3[1];
      HIBYTE(v89) = a3[1];
      if (valuePtr > 2uLL || v17 > 2)
        return v16;
      v18 = (vector_dimension_vec_sizes_10743[v17]
                         * vector_size_elem_sizes_10742[valuePtr]);
      v19 = a3 + 2;
      v87 = a3 + 2;
      v82 = CFNumberCreate(allocator, kCFNumberCharType, &valuePtr);
      v20 = CFNumberCreate(allocator, kCFNumberCharType, (char *)&v89 + 1);
      v21 = (unint64_t)&v12[v14];
      if ((unint64_t)&v19[v18] <= v21)
      {
        if ((a2[1] & 0x20) != 0)
        {
          theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
          do
          {
            v22 = CFDataCreate(allocator, v19, v18);
            *(_OWORD *)keys = xmmword_1E6E37120;
            v97 = xmmword_1E6E37130;
            v98 = CFSTR("vec_version");
            values = v82;
            v92 = v20;
            v93 = v22;
            v94 = 0;
            v95 = 0;
            v23 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)&values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
            CFRelease(v22);
            if (v23)
            {
              CFArrayAppendValue(theArray, v23);
              CFRelease(v23);
            }
            if ((unint64_t)&v19[v18] >= v21)
              break;
            v24 = &v19[2 * v18];
            v19 += v18;
          }
          while ((unint64_t)v24 <= v21);
LABEL_136:
          v16 = theArray;
          goto LABEL_137;
        }
LABEL_127:
        v16 = decodeVector(allocator, v18, (const UInt8 **)&v87, v21, v82, v20);
        goto LABEL_137;
      }
      goto LABEL_48;
    }
    return 0;
  }
  v89 = 0;
  valuePtr = 0;
  allocatora = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v16 = Mutable;
  if (v14 < 8)
    return v16;
  v83 = 0;
  theArrayb = Mutable;
  cf = 0;
  v57 = 0;
  v58 = (void **)((char *)a2 + 13);
  if (v14 >> 3 <= 1)
    v59 = 1;
  else
    v59 = v14 >> 3;
  do
  {
    v61 = *v58++;
    v60 = (unint64_t)v61;
    v87 = v61;
    if (v61 == (void *)4294967294)
    {
      v77 = __si_assert_copy_extra_1644(0);
      v78 = v77;
      v79 = "";
      if (v77)
        v79 = v77;
      __message_assert("%s:%u: failed assertion '%s' %s ", "ldb.c", 2483, "((db_uint32_t)-2) != chunk", v79);
      free(v78);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    LOBYTE(values) = 0;
    keys[0] = 0;
    keys[1] = 0;
    *(_QWORD *)&v97 = 0;
    data_map_get_data_entry((uint64_t)keys, *(_QWORD *)(a1 + 920), v60, &values, a7 != 0);
    if ((_BYTE)values)
    {
      v62 = LODWORD(keys[1]);
      v63 = (const UInt8 *)keys[0];
      if (keys[0])
      {
        v64 = BYTE2(v97) | (BYTE3(v97) << 8);
        if (v57)
        {
          if (v97 != HIBYTE(v89) || BYTE1(v97) != v89 || v64 != valuePtr)
            goto LABEL_84;
        }
        else
        {
          LOBYTE(v89) = BYTE1(v97);
          HIBYTE(v89) = v97;
          valuePtr = BYTE2(v97) | (BYTE3(v97) << 8);
          v57 = CFNumberCreate(allocator, kCFNumberCharType, (char *)&v89 + 1);
          v83 = CFNumberCreate(allocator, kCFNumberCharType, &v89);
          if (v64)
            cf = CFNumberCreate(allocator, kCFNumberSInt16Type, &valuePtr);
        }
        v65 = CFNumberCreate(allocatora, kCFNumberSInt64Type, &v87);
        v66 = CFDataCreate(allocator, v63, v62);
        *(_OWORD *)keys = xmmword_1E6E37120;
        v97 = xmmword_1E6E37130;
        v98 = CFSTR("vec_version");
        values = v57;
        v92 = v83;
        v93 = v66;
        v94 = v65;
        v67 = 4;
        if (cf)
          v67 = 5;
        if (v65)
          v68 = v67;
        else
          v68 = 3;
        v95 = cf;
        v69 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)&values, v68, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        CFRelease(v66);
        CFRelease(v65);
        if (v69)
        {
          CFArrayAppendValue(theArrayb, v69);
          CFRelease(v69);
        }
      }
    }
LABEL_84:
    --v59;
  }
  while (v59);
  if (v57)
    CFRelease(v57);
  v16 = theArrayb;
  if (v83)
    CFRelease(v83);
  if (cf)
    CFRelease(cf);
  return v16;
}

CFDateRef createValue(int *a1, int a2, __int16 a3, const char *a4, int a5, CFAllocatorRef alloc)
{
  double v12;
  uint64_t *v13;
  CFDateRef result;
  const __CFAllocator *v15;
  CFNumberType v16;
  double v17;
  uint64_t *v18;
  int v19;
  NSObject *v20;
  char *v21;
  char *v22;
  const char *v23;
  double valuePtr;
  const char *v25;

  v25 = a4;
  if (dword_1EF19FC9C >= 5)
  {
    v19 = *__error();
    v20 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(valuePtr) = 0;
      _os_log_impl(&dword_1B8270000, v20, OS_LOG_TYPE_DEFAULT, (const char *)&unk_1B865F3E6, (uint8_t *)&valuePtr, 2u);
    }
    *__error() = v19;
  }
  switch(a2)
  {
    case 1:
      *(_QWORD *)&v12 = *a4;
      valuePtr = v12;
      if ((a3 & 0x400) == 0)
        goto LABEL_17;
      goto LABEL_12;
    case 2:
      *(_QWORD *)&v12 = *(unsigned __int8 *)a4;
      valuePtr = v12;
      if ((a3 & 0x400) == 0)
        goto LABEL_17;
      goto LABEL_12;
    case 3:
      *(_QWORD *)&v12 = *(__int16 *)a4;
      valuePtr = v12;
      if ((a3 & 0x400) == 0)
        goto LABEL_17;
      goto LABEL_12;
    case 4:
      *(_QWORD *)&v12 = *(unsigned __int16 *)a4;
      valuePtr = v12;
      if ((a3 & 0x400) != 0)
        goto LABEL_12;
      goto LABEL_17;
    case 5:
    case 7:
    case 8:
      v12 = *(double *)a4;
      valuePtr = *(double *)a4;
      if ((a3 & 0x400) == 0)
        goto LABEL_17;
      goto LABEL_12;
    case 6:
      *(_QWORD *)&v12 = *(unsigned int *)a4;
      valuePtr = v12;
      if ((a3 & 0x400) == 0)
      {
LABEL_17:
        v15 = alloc;
        v16 = kCFNumberSInt64Type;
        goto LABEL_18;
      }
LABEL_12:
      if (v12 == 0.0)
        v13 = (uint64_t *)MEMORY[0x1E0C9AE40];
      else
        v13 = (uint64_t *)MEMORY[0x1E0C9AE50];
      result = (CFDateRef)*v13;
      break;
    case 9:
      v17 = *(float *)a4;
      valuePtr = v17;
      if ((a3 & 0x400) != 0)
        goto LABEL_21;
      goto LABEL_25;
    case 10:
      v17 = *(double *)a4;
      valuePtr = *(double *)a4;
      if ((a3 & 0x400) != 0)
      {
LABEL_21:
        v18 = (uint64_t *)MEMORY[0x1E0C9AE40];
        if (v17 != 0.0)
          v18 = (uint64_t *)MEMORY[0x1E0C9AE50];
        result = (CFDateRef)*v18;
      }
      else
      {
LABEL_25:
        v15 = alloc;
        v16 = kCFNumberFloat64Type;
LABEL_18:
        result = CFNumberCreate(v15, v16, &valuePtr);
      }
      break;
    case 11:
      return (CFDateRef)createString_9893(a1, a3, &v25, a5, alloc);
    case 12:
      return CFDateCreate(alloc, *(CFAbsoluteTime *)a4);
    default:
      v21 = __si_assert_copy_extra_1644(0);
      v22 = v21;
      v23 = "";
      if (v21)
        v23 = v21;
      __message_assert("%s:%u: failed assertion '%s' %s Unexpected type %d", "ldb.c", 2297, "0", v23, a2);
      free(v22);
      if (__valid_fsp(0))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
  }
  return result;
}

CFStringRef createString(int *a1, char a2, const char **a3)
{
  const char *v3;
  CFStringRef v5;
  uint64_t v6;
  uint64_t string_for_id;
  const char *v8;

  v3 = *a3;
  if (!*a3)
    return 0;
  if ((a2 & 0x10) != 0)
  {
    string_for_id = db_get_string_for_id(a1, *(_DWORD *)v3);
    if (string_for_id)
      v8 = (const char *)string_for_id;
    else
      v8 = "";
    v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8, 0x8000100u);
    v6 = (uint64_t)(*a3 + 4);
  }
  else
  {
    v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *a3, 0x8000100u);
    v6 = (uint64_t)&v3[strlen(v3) + 1];
  }
  *a3 = (const char *)v6;
  return v5;
}

uint64_t ___ZN19PartialQueryResults17removeDupsInPlaceEPK13__RLEOIDArray_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;
  uint64_t v19;
  int v20;
  unint64_t *v21;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (a5 - 1);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(v6 + 16));
  pthread_rwlock_rdlock((pthread_rwlock_t *)(v7 + 16));
  if ((_DWORD)v8 && !*(_BYTE *)(v6 + 384))
  {
    v10 = 0;
    v11 = a4 + 8;
    v21 = (unint64_t *)(v7 + 216);
LABEL_7:
    v12 = *(_QWORD *)(v11 + 8 * v10);
    v13 = *(_DWORD *)(v6 + 224);
    if (!v13 || !((*(_QWORD *)(v6 + 216) ^ v12) >> (-4 * v13)))
    {
      v14 = (60 - 4 * v13) & 0xFC;
      v15 = *(_QWORD *)(v6 + 256 + 8 * ((v12 >> v14) & 0xF));
      if ((v15 & 1) != 0)
      {
        v16 = v13 + 2;
        do
        {
          v14 = (64 - 4 * v16) & 0xFC;
          v15 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v12 >> v14) & 0xF));
          ++v16;
        }
        while ((v15 & 1) != 0);
      }
      if (v15
        && (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v15 + 16))(v15, *(_QWORD *)(v11 + 8 * v10), ~(-1 << v14)))
      {
        if (*(_BYTE *)(v7 + 384))
          goto LABEL_15;
        v17 = *(_DWORD *)(v7 + 224);
        if (v17)
        {
          if ((*v21 ^ v12) >> (-4 * v17))
            goto LABEL_15;
        }
        v18 = (60 - 4 * v17) & 0xFC;
        v19 = *(_QWORD *)(v7 + 256 + 8 * ((v12 >> v18) & 0xF));
        if ((v19 & 1) != 0)
        {
          v20 = v17 + 2;
          do
          {
            v18 = (64 - 4 * v20) & 0xFC;
            v19 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFFELL) + 8 * ((v12 >> v18) & 0xF));
            ++v20;
          }
          while ((v19 & 1) != 0);
        }
        if (!v19
          || !(*(unsigned int (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v19 + 16))(v19, v12, ~(-1 << v18)))
        {
LABEL_15:
          SIValueSet<unsigned long long>::SIValueSetInsert(v21, v12);
        }
        else
        {
          *(_QWORD *)(v11 + 8 * v10) = 0;
        }
      }
    }
    while (++v10 != v8)
    {
      if (!*(_BYTE *)(v6 + 384))
        goto LABEL_7;
    }
  }
  pthread_rwlock_unlock((pthread_rwlock_t *)(v6 + 16));
  return pthread_rwlock_unlock((pthread_rwlock_t *)(v7 + 16));
}

CFStringRef _copyMDPlistObject(const __CFAllocator *a1)
{
  CFMutableArrayRef Mutable;
  const UInt8 *Value;
  const UniChar *v5;
  const UInt8 *BytePtr;

  switch(_MDPlistGetPlistObjectType())
  {
    case 0xF0u:
      if (_MDPlistArrayGetCount() == 2)
      {
        _MDPlistArrayGetPlistObjectAtIndex();
        if (_MDPlistGetPlistObjectType() == 244)
          _MDPlistStringGetValue();
      }
      Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E0C9B378]);
      if (Mutable)
        _MDPlistArrayIterate();
      return (CFStringRef)Mutable;
    case 0xF1u:
      Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      _MDPlistDictionaryIterate();
      return (CFStringRef)Mutable;
    case 0xF4u:
      Value = (const UInt8 *)_MDPlistStringGetValue();
      return CFStringCreateWithBytesNoCopy(a1, Value, 0, 0, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    case 0xF5u:
      v5 = (const UniChar *)_MDPlistStringGetValue();
      return CFStringCreateWithCharactersNoCopy(a1, v5, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    case 0xF6u:
      BytePtr = (const UInt8 *)_MDPlistDataGetBytePtr();
      return (CFStringRef)CFDataCreateWithBytesNoCopy(a1, BytePtr, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    default:
      return (CFStringRef)_MDPlistContainerCopyObject();
  }
}

_QWORD *SIUserCtxCreateWithLanguages(uint64_t a1, const void *a2)
{
  uint64_t Instance;
  _QWORD *v4;
  CFTypeID TypeID;
  CFIndex Count;
  _QWORD *v7;
  CFIndex v8;
  uint64_t v9;
  const __CFString *ValueAtIndex;
  const void *v11;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char buffer[1024];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!__kSIUserCtxTypeID)
    __kSIUserCtxTypeID = _CFRuntimeRegisterClass();
  Instance = _CFRuntimeCreateInstance();
  v4 = (_QWORD *)Instance;
  *(_OWORD *)(Instance + 16) = 0u;
  *(_OWORD *)(Instance + 32) = 0u;
  *(_DWORD *)(Instance + 164) = 0;
  *(_BYTE *)(Instance + 160) = 0;
  *(_QWORD *)(Instance + 56) = 0;
  *(_QWORD *)(Instance + 136) = 0;
  *(_OWORD *)(Instance + 80) = 0u;
  *(_OWORD *)(Instance + 96) = 0u;
  if (a2)
  {
    CFRetain(a2);
    v4[14] = a2;
    TypeID = CFArrayGetTypeID();
    if (TypeID != CFGetTypeID(a2))
    {
      v13 = __si_assert_copy_extra_268();
      __message_assert_272((uint64_t)v13, v14, v15, v16, v17, v18, v19, v20, (char)"SIUserCtx.c");
      free(v13);
      if (__valid_fs(-1))
        v21 = 2989;
      else
        v21 = 3072;
      *(_DWORD *)v21 = -559038737;
      abort();
    }
    Count = CFArrayGetCount((CFArrayRef)a2);
    v7 = malloc_type_calloc(Count + 1, 8uLL, 0x10040436913F5uLL);
    if (Count < 1)
    {
      v9 = 0;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)a2, v8);
        bzero(buffer, 0x400uLL);
        if (CFStringGetCString(ValueAtIndex, buffer, 1024, 0x8000100u))
          v7[v9++] = strdup(buffer);
        ++v8;
      }
      while (Count != v8);
    }
    v7[v9] = 0;
    v4[15] = v7;
    if (CFArrayGetCount((CFArrayRef)a2))
    {
      v11 = CFArrayGetValueAtIndex((CFArrayRef)a2, 0);
      v4[18] = CFRetain(v11);
    }
  }
  else
  {
    *(_QWORD *)(Instance + 112) = 0;
  }
  return v4;
}

uint64_t inner_performSearch(SISearchCtx_METADATA *a1, PartialQueryResults *a2)
{
  SISearchCtx_METADATA *v2;
  PartialQueryResults *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  unsigned __int16 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  const __CFArray *v42;
  __int128 v43;
  double Current;
  uint64_t v45;
  uint64_t v46;
  const __CFArray *v47;
  _DWORD *v48;
  unsigned int *v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  size_t v54;
  off_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  _DWORD *v59;
  _DWORD *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  NSObject *v65;
  os_log_type_t v66;
  const __CFArray *v67;
  uint64_t v68;
  _QWORD **v69;
  char **v70;
  uint64_t *v71;
  unsigned __int8 *v72;
  uint64_t v74;
  uint64_t v75;
  _DWORD *v76;
  unsigned int v77;
  uint64_t *v78;
  char **v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  unsigned __int8 *v83;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  NSObject *v92;
  os_log_type_t v93;
  CFAbsoluteTime v94;
  int v95;
  NSObject *v96;
  int v97;
  _DWORD *v98;
  uint64_t v99;
  _DWORD *v100;
  _DWORD *v101;
  unsigned int v102;
  unsigned int v103;
  int v105;
  NSObject *v106;
  os_log_type_t v107;
  int v108;
  NSObject *v109;
  os_log_type_t v110;
  uint64_t v111;
  size_t v112;
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  char *v117;
  unint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  _DWORD *v122;
  unsigned int v123;
  _QWORD *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int *v129;
  int v130;
  int v131;
  int v132;
  int v133;
  NSObject *v134;
  int v135;
  NSObject *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  const char *v149;
  int v150;
  int v151;
  NSObject *v152;
  uint64_t v153;
  os_log_t v154;
  __int128 v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  char **v159;
  os_log_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  _QWORD v165[6];
  void *v166;
  uint64_t v167;
  _DWORD *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  _BYTE v174[1024];
  _OWORD v175[512];
  _BYTE v176[38];
  __int16 v177;
  _QWORD v178[3];
  __int128 v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;

  v2 = (SISearchCtx_METADATA *)MEMORY[0x1E0C80A78](a1);
  v183 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)v2 + 13);
  if (*(_BYTE *)(v4 + 96))
    goto LABEL_5;
  v5 = v3;
  v6 = (uint64_t)v2;
  do
  {
    v7 = v4;
    v4 = *(_QWORD *)(v4 + 80);
  }
  while (v4);
  if (*(_BYTE *)(*(_QWORD *)(v7 + 8) + 12))
  {
LABEL_5:
    v8 = *__error();
    v9 = _SILogForLogForCategory(1);
    v10 = 2 * (dword_1EF19FC90 < 4);
    if (os_log_type_enabled(v9, v10))
    {
      LOWORD(v175[0]) = 0;
      _os_log_impl(&dword_1B8270000, v9, v10, "query invalidated", (uint8_t *)v175, 2u);
    }
    v11 = 0;
    *__error() = v8;
    return v11;
  }
  v12 = *((_QWORD *)v2 + 103);
  if (!v12)
  {
    if (*((_QWORD *)v2 + 85) || *((_QWORD *)v2 + 76) < *((_QWORD *)v2 + 75))
    {
      v15 = *((_QWORD *)v2 + 3);
      if (*((_QWORD *)v2 + 69) != *(_DWORD *)(v15 + 1400)
        || (v16 = *((_QWORD *)v2 + 73)) != 0 && v16 != *(_QWORD *)(v15 + 1384)
        || (v17 = *((_QWORD *)v2 + 72)) != 0 && v17 != *(_QWORD *)(v15 + 1392))
      {
        v18 = *__error();
        v19 = _SILogForLogForCategory(1);
        v20 = 2 * (dword_1EF19FC90 < 4);
        if (os_log_type_enabled(v19, v20))
        {
          LOWORD(v175[0]) = 0;
          _os_log_impl(&dword_1B8270000, v19, v20, "merge completed; restart query", (uint8_t *)v175, 2u);
        }
        *__error() = v18;
        cleanUp((SISearchCtx_METADATA *)v6);
        return gatherIndexInfo((SISearchCtx_METADATA *)v6, 0, 1);
      }
      v63 = _performSearch(v2, v3);
      if (v63 != -1)
      {
        if (v63 == 1)
        {
          v64 = *__error();
          v65 = _SILogForLogForCategory(1);
          v66 = 2 * (dword_1EF19FC90 < 4);
          if (os_log_type_enabled(v65, v66))
          {
            LOWORD(v175[0]) = 0;
            _os_log_impl(&dword_1B8270000, v65, v66, "inner_performSearch: continue", (uint8_t *)v175, 2u);
          }
          *__error() = v64;
          return 1;
        }
        else
        {
          v108 = *__error();
          v109 = _SILogForLogForCategory(1);
          v110 = 2 * (dword_1EF19FC90 < 4);
          if (os_log_type_enabled(v109, v110))
          {
            LOWORD(v175[0]) = 0;
            _os_log_impl(&dword_1B8270000, v109, v110, "inner_performSearch: emit", (uint8_t *)v175, 2u);
          }
          *__error() = v108;
          emitResults((SISearchCtx_METADATA *)v6, (PartialQueryResults *)v5, 0);
          MEMORY[0x1E0C80A78](v111);
          v113 = (char *)&v153 - ((v112 + 15) & 0xFFFFFFFF0);
          bzero(v113, v112);
          v114 = *(unsigned int *)(v6 + 832);
          if ((_DWORD)v114)
          {
            v115 = (_QWORD *)(*(_QWORD *)(v6 + 840) + 32);
            v116 = v113;
            do
            {
              *v116++ = *v115;
              *v115 = 0;
              v115 += 6;
              --v114;
            }
            while (v114);
          }
          SISearchCtx_METADATA::cleanUp((SISearchCtx_METADATA *)v6, 0);
          *(_QWORD *)&v175[0] = v6;
          *((_QWORD *)&v175[0] + 1) = v113;
          v117 = CICleanUpThreadLoc();
          v118 = CICleanUpPush((uint64_t)v117, (uint64_t)cleanupDocSets, (uint64_t)v175);
          v11 = gatherIndexInfo((SISearchCtx_METADATA *)v6, (uint64_t)v113, 1);
          CICleanUpClearItem((uint64_t)v117, v118);
          cleanupDocSets(v175);
        }
        return v11;
      }
      v105 = *__error();
      v106 = _SILogForLogForCategory(1);
      v107 = 2 * (dword_1EF19FC90 < 4);
      if (os_log_type_enabled(v106, v107))
      {
        LOWORD(v175[0]) = 0;
        _os_log_impl(&dword_1B8270000, v106, v107, "_performSearch returned -1", (uint8_t *)v175, 2u);
      }
      *__error() = v105;
      cleanUp((SISearchCtx_METADATA *)v6);
    }
    return 0;
  }
  v165[4] = 0;
  v165[5] = 0;
  v14 = *((_QWORD *)v2 + 2);
  v13 = *((_QWORD *)v2 + 3);
  v165[2] = v2;
  v165[3] = v14;
  v165[0] = &off_1E6E2A2C0;
  v165[1] = v13;
  *(_QWORD *)(v12 + 24) = v165;
  if (dword_1EF19FC90 >= 5)
  {
    v133 = *__error();
    v134 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v175[0]) = 136315138;
      *(_QWORD *)((char *)v175 + 4) = "_performSearch_degenerate";
      _os_log_impl(&dword_1B8270000, v134, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)v175, 0xCu);
    }
    *__error() = v133;
  }
  if (*(_DWORD *)(v6 + 160) == 4)
  {
    v162 = 0;
  }
  else
  {
    v21 = *(_QWORD *)(v6 + 104);
    v22 = v21;
    do
    {
      v23 = v22;
      v22 = *(_QWORD *)(v22 + 80);
    }
    while (v22);
    v24 = *(_DWORD *)(*(_QWORD *)(v23 + 8) + 80);
    v25 = *(_QWORD *)(v21 + 80);
    if (!v25)
      goto LABEL_29;
    v26 = 0;
    do
    {
      v26 ^= *(_DWORD *)(v21 + 104) == 0;
      v21 = v25;
      v25 = *(_QWORD *)(v25 + 80);
    }
    while (v25);
    if ((v26 & 1) != 0)
      v27 = 3553;
    else
LABEL_29:
      v27 = 2781;
    v162 = PartialQueryResults::start((PartialQueryResults *)v5, v24, v27, 0x400uLL, 0);
  }
  bzero(v175, 0x2000uLL);
  bzero(v174, 0x400uLL);
  v29 = *(_QWORD *)(v6 + 824);
  if (*(_DWORD *)v29 != 3506)
  {
    v147 = __si_assert_copy_extra_268();
    v148 = v147;
    if (v147)
      v149 = v147;
    else
      v149 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 571, v149);
    free(v148);
    goto LABEL_191;
  }
  v30 = *(_QWORD *)(v29 + 16);
  v163 = v6;
  if (!v30)
  {
    *(_DWORD *)(v29 + 1996) = 0;
    goto LABEL_42;
  }
  if (!*(_QWORD *)(v29 + 2000))
    goto LABEL_42;
  if (*(int *)(v29 + 1996) >= 1)
  {
    v31 = 0;
    do
      free(*(void **)(v29 + 32 + 8 * v31++));
    while (v31 < *(int *)(v29 + 1996));
  }
  *(_DWORD *)(v29 + 1996) = 0;
  if (*(_DWORD *)(v29 + 2008) == -1)
    goto LABEL_42;
  v167 = 0;
  v168 = 0;
  v32 = CICleanUpThreadLocGet(&v167);
  v33 = _db_write_lock(v30 + 584);
  if (v33)
  {
    v150 = v33;
    v151 = *__error();
    v152 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v176 = 136315650;
      *(_QWORD *)&v176[4] = "db2_read_query";
      *(_WORD *)&v176[12] = 1024;
      *(_DWORD *)&v176[14] = 146;
      *(_WORD *)&v176[18] = 1024;
      *(_DWORD *)&v176[20] = v150;
      _os_log_error_impl(&dword_1B8270000, v152, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", v176, 0x18u);
    }
    *__error() = v151;
    sdb2_die(v30, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2_query.c", 146);
  }
  LODWORD(v164) = v32;
  if (v32)
    v34 = CIOnThreadCleanUpPush(v167, (uint64_t)db_write_unlock, v30 + 584);
  else
    v34 = -1;
  v48 = *(_DWORD **)(v29 + 2040);
  v49 = (_DWORD *)((char *)v48 + *(int *)(v29 + 2024));
  v50 = (int)v48[2];
  v51 = (unint64_t)v48 + v50;
  if (v49 + 1 < (_DWORD *)((char *)v48 + v50) && (unint64_t)v49 + *v49 <= v51)
  {
    v57 = *v48;
    goto LABEL_133;
  }
  v160 = (os_log_t)v34;
  v52 = v48[3];
  while (1)
  {
    if ((v52 & 4) != 0)
      v53 = 4;
    else
      v53 = 1;
    v54 = (int)v48[v53];
    v55 = *(_QWORD *)(v29 + 2016) + v54;
    *(_QWORD *)(v29 + 2016) = v55;
    v56 = fd_pread(*(_DWORD **)(*(_QWORD *)(v29 + 16) + 848), v48, v54, v55);
    if (!v56)
    {
      if (db_write_unlock(v30 + 584))
        sdb2_die(v30, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2_query.c", 160);
      v6 = v163;
      if ((_DWORD)v164)
      {
        v75 = v167;
        CIOnThreadCleanUpClearItem(v167, (unint64_t)v160);
        v76 = &threadData[18 * v75];
        v77 = v76[14];
        v60 = v76 + 14;
        v61 = v77;
        if ((Class *)((char *)&v160->isa + 1) == (Class *)v77)
          goto LABEL_106;
      }
      goto LABEL_42;
    }
    if (v56 != v54)
      *(_DWORD *)(v29 + 2008) = -1;
    if (db2_page_uncompress_swap(v30, *(int8x16_t **)(v29 + 2040), &v168, 0))
      *(_DWORD *)(v29 + 2008) = -1;
    v48 = *(_DWORD **)(v29 + 2040);
    if (v168)
    {
      free(*(void **)(v29 + 2040));
      v48 = v168;
      *(_QWORD *)(v29 + 2040) = v168;
    }
    v57 = *v48;
    if (*v48 != 1684172850)
      goto LABEL_132;
    v52 = v48[3];
    if ((v52 & 0xF0) == 0)
      break;
    if (*(_DWORD *)(v29 + 2008) == -1)
    {
      if (db_write_unlock(v30 + 584))
        sdb2_die(v30, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2_query.c", 192);
      v6 = v163;
LABEL_78:
      if ((_DWORD)v164)
      {
        v58 = v167;
        CIOnThreadCleanUpClearItem(v167, (unint64_t)v160);
        v59 = &threadData[18 * v58];
        v62 = v59[14];
        v60 = v59 + 14;
        v61 = v62;
        if ((Class *)((char *)&v160->isa + 1) == (Class *)v62)
LABEL_106:
          *v60 = v61 - 1;
      }
LABEL_42:
      v35 = *(_QWORD *)(v6 + 824);
      v36 = *(_DWORD *)(v35 + 1996);
      if (!v36)
      {
        v11 = 0;
        goto LABEL_144;
      }
      goto LABEL_43;
    }
  }
  v57 = 1684172850;
LABEL_132:
  *(_DWORD *)(v29 + 2024) = 20;
  v49 = v48 + 5;
  v50 = (int)v48[2];
  v51 = (unint64_t)v48 + v50;
  v34 = (unint64_t)v160;
LABEL_133:
  if (v57 != 1684172850 || (int)v50 > v48[1] || (v48[3] & 1) == 0)
  {
    v95 = *__error();
    v96 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      v127 = *(_QWORD *)(v29 + 2016);
      v128 = *(_DWORD *)(*(_QWORD *)(v29 + 16) + 44);
      v129 = *(int **)(v29 + 2040);
      v130 = *v129;
      v131 = v129[1];
      v132 = v129[2];
      LODWORD(v129) = v129[3];
      *(_DWORD *)v176 = 136317186;
      *(_QWORD *)&v176[4] = "db2_read_query";
      *(_WORD *)&v176[12] = 1024;
      *(_DWORD *)&v176[14] = 210;
      *(_WORD *)&v176[18] = 2080;
      *(_QWORD *)&v176[20] = v30 + 324;
      *(_WORD *)&v176[28] = 2048;
      *(_QWORD *)&v176[30] = v127;
      v177 = 1024;
      WORD2(v178[0]) = 1024;
      *(_DWORD *)((char *)v178 + 6) = v130;
      WORD1(v178[1]) = 1024;
      LODWORD(v178[0]) = v128;
      HIDWORD(v178[1]) = v131;
      LOWORD(v178[2]) = 1024;
      *(_DWORD *)((char *)&v178[2] + 2) = v132;
      HIWORD(v178[2]) = 1024;
      LODWORD(v179) = (_DWORD)v129;
      _os_log_error_impl(&dword_1B8270000, v96, OS_LOG_TYPE_ERROR, "%s:%d: %s : read_query: page at offset 0x%llx not valid (skipping %d)! (0x%x %d %d 0x%x)\n", v176, 0x44u);
    }
    *__error() = v95;
    *(_DWORD *)(*(_QWORD *)(v29 + 16) + 4) |= 0x40u;
    *(_QWORD *)&v169 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v169 + 1) = 0x40000000;
    *(_QWORD *)&v170 = __db2_read_query_block_invoke;
    *((_QWORD *)&v170 + 1) = &__block_descriptor_tmp_9932;
    *(_QWORD *)&v171 = v30;
    *((_QWORD *)&v171 + 1) = v29;
    analytics_send_event_lazy();
    v97 = *(_DWORD *)(*(_QWORD *)(v29 + 16) + 44);
    v98 = *(_DWORD **)(v29 + 2040);
    v98[1] = v97;
    v98[2] = v97;
    v98[4] = v97;
    *(_DWORD *)(v29 + 2024) = *(_DWORD *)(*(_QWORD *)(v29 + 16) + 44);
    if (db_write_unlock(v30 + 584))
      sdb2_die(v30, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2_query.c", 241);
    v6 = v163;
    if ((_DWORD)v164)
    {
      v99 = v167;
      CIOnThreadCleanUpClearItem(v167, v34);
      v100 = &threadData[18 * v99];
      v103 = v100[14];
      v101 = v100 + 14;
      v102 = v103;
      if (v34 + 1 == v103)
        goto LABEL_141;
    }
    goto LABEL_142;
  }
  v160 = (os_log_t)v34;
  if ((unint64_t)v49 + *v49 <= v51 && *(int *)(v29 + 1996) <= 244 && (unint64_t)v49 < v51)
  {
    do
    {
      v124 = v5;
      v166 = 0;
      _inflateDBO(v30, v49, &v166, 0, 0, 0);
      v125 = v166;
      *(_QWORD *)v176 = v166;
      *(_QWORD *)&v176[8] = 0;
      *(_QWORD *)&v176[16] = 0;
      if ((*((_BYTE *)v166 + 40) & 5) != 0)
      {
        free(v166);
      }
      else if (db_eval_obj_with_options(*(_QWORD *)(v29 + 16)))
      {
        v126 = *(int *)(v29 + 1996);
        *(_DWORD *)(v29 + 1996) = v126 + 1;
        *(_QWORD *)(v29 + 8 * v126 + 32) = v125;
      }
      else
      {
        free(v125);
        ++*(_DWORD *)(v29 + 1992);
      }
      if (*v49)
        v49 = (unsigned int *)((char *)v49 + *v49 + 4);
      else
        v49 = (unsigned int *)v51;
      *(_DWORD *)(v29 + 2024) = (_DWORD)v49 - *(_DWORD *)(v29 + 2040);
      v5 = v124;
    }
    while ((unint64_t)(v49 + 1) < v51 && (unint64_t)v49 + *v49 + 4 <= v51 && *(int *)(v29 + 1996) < 245);
  }
  v119 = *(_DWORD *)(v29 + 2008);
  v120 = db_write_unlock(v30 + 584);
  if (v119 == -1)
  {
    v6 = v163;
    if (v120)
      sdb2_die(v30, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2_query.c", 277);
    goto LABEL_78;
  }
  v6 = v163;
  if (v120)
    sdb2_die(v30, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2_query.c", 281);
  if ((_DWORD)v164)
  {
    v121 = v167;
    CIOnThreadCleanUpClearItem(v167, (unint64_t)v160);
    v122 = &threadData[18 * v121];
    v123 = v122[14];
    v101 = v122 + 14;
    v102 = v123;
    if ((Class *)((char *)&v160->isa + 1) == (Class *)v123)
LABEL_141:
      *v101 = v102 - 1;
  }
LABEL_142:
  v35 = *(_QWORD *)(v6 + 824);
  v36 = *(_DWORD *)(v35 + 1996);
  if (!v36)
  {
LABEL_143:
    v11 = 1;
    goto LABEL_144;
  }
LABEL_43:
  v37 = 0;
  v38 = v5 + 29;
  v39 = v5 + 13;
  while (v36 != v37)
  {
    *((_QWORD *)v175 + v37) = **(_QWORD **)(v35 + 8 * v37 + 32);
    ++v37;
  }
  if (!(_DWORD)v37)
    goto LABEL_143;
  if (*(_DWORD *)(v6 + 160) != 4)
  {
    Current = CFAbsoluteTimeGetCurrent();
    v45 = *v38;
    v46 = *(_QWORD *)(v6 + 24);
    v161 = v5;
    if (v45)
    {
      if (*(_BYTE *)v5)
      {
        if (!*v39)
        {
          v47 = (const __CFArray *)v5[16];
          if (v47)
          {
            *(_QWORD *)v176 = 0;
            SIFlattenArrayToCStringVector(v47, (char **)v5 + 13, (size_t *)v176, (CFIndex *)&v169);
          }
        }
      }
      else
      {
        PartialQueryResults::_attributeVector((PartialQueryResults *)v5);
      }
      LODWORD(v160) = *v38 > 0;
    }
    else
    {
      LODWORD(v160) = 0;
    }
    v78 = (uint64_t *)(*(_QWORD *)(v6 + 824) + 32);
    v79 = *(char ***)(v6 + 152);
    *(_QWORD *)&v164 = *(_QWORD *)(v6 + 16);
    v158 = *(_QWORD *)(v6 + 224);
    v159 = v79;
    v80 = *(_QWORD *)(v6 + 232);
    v156 = &v176[8];
    v157 = v80;
    v81 = v37;
    v82 = (uint64_t *)v175;
    v83 = v174;
    *(_QWORD *)&v43 = 134217984;
    v155 = v43;
    do
    {
      if (*v83++)
      {
        if (dword_1EF19FC90 >= 5)
        {
          v85 = *__error();
          v154 = (os_log_t)_SILogForLogForCategory(1);
          if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
          {
            v86 = *v82;
            *(_DWORD *)v176 = v155;
            *(_QWORD *)&v176[4] = v86;
            _os_log_impl(&dword_1B8270000, v154, OS_LOG_TYPE_DEFAULT, "No permission for %llx", v176, 0xCu);
          }
          *__error() = v85;
        }
      }
      else
      {
        if ((_DWORD)v160)
          v87 = *v78;
        else
          v87 = 0;
        bzero(v156, 0x470uLL);
        v88 = *v82;
        *(_QWORD *)&v176[16] = v46;
        *(_QWORD *)&v176[24] = v164;
        *(_OWORD *)&v178[1] = 0u;
        v179 = 0u;
        v180 = 0;
        if (v46)
          v89 = (*(unsigned __int8 *)(v46 + 6586) >> 1) & 1;
        else
          LOBYTE(v89) = 1;
        v181 = v89;
        v182 = v88;
        *(_QWORD *)v176 = &off_1E6E2A0B8;
        v178[0] = v87;
        if (v163)
          v90 = *(_QWORD *)(v163 + 8);
        else
          v90 = 0;
        *(_DWORD *)&v176[8] = 8;
        v171 = xmmword_1B86318D0;
        v172 = unk_1B86318E0;
        v173 = xmmword_1B86318F0;
        v37 &= 0xFFFFFF0000000000;
        v169 = ZERO_RANKING_BITS;
        v170 = unk_1B86318C0;
        writeDBOToPlistBytes(v46, v162, v161, v159, v176, v164, v158, v157, 0, (uint64_t *)&v169, v37, SBYTE4(v37), 0, 0, 0, 0, v163, v90, 0);
        if (v178[0] == v87)
          v178[0] = 0;
        CatInfoGotten_OID::~CatInfoGotten_OID((CatInfoGotten_OID *)v176);
      }
      ++v78;
      ++v82;
      --v81;
    }
    while (v81);
    v91 = *__error();
    v92 = _SILogForLogForCategory(1);
    v93 = 2 * (dword_1EF19FC90 < 4);
    if (os_log_type_enabled(v92, v93))
    {
      v94 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)v176 = v155;
      *(double *)&v176[4] = v94 - Current;
      _os_log_impl(&dword_1B8270000, v92, v93, "Encoded results in %f seconds!", v176, 0xCu);
    }
    *__error() = v91;
    v11 = 1;
    v6 = v163;
    v5 = v161;
    goto LABEL_144;
  }
  v40 = *(_QWORD *)(v6 + 24);
  v41 = v5[29];
  if (!*(_BYTE *)v5)
  {
    if (!v41)
      goto LABEL_90;
    if (v5[12])
      goto LABEL_90;
    v67 = (const __CFArray *)v5[15];
    if (!v67)
      goto LABEL_90;
    SIFlattenArrayToCStringVector(v67, (char **)v5 + 12, v5 + 30, v5 + 29);
    if (v5[12])
      goto LABEL_90;
    v138 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v138, v139, v140, v141, v142, v143, v144, v145, (char)"SISearchCtx.h");
    free(v138);
    if (!__valid_fs(-1))
    {
      v146 = 3072;
LABEL_193:
      *(_DWORD *)v146 = -559038737;
      abort();
    }
LABEL_191:
    v146 = 2989;
    goto LABEL_193;
  }
  if (v41 && !*v39)
  {
    v42 = (const __CFArray *)v5[16];
    if (v42)
    {
      *(_QWORD *)v176 = 0;
      SIFlattenArrayToCStringVector(v42, (char **)v5 + 13, (size_t *)v176, (CFIndex *)&v169);
    }
LABEL_90:
    v41 = *v38;
    v35 = *(_QWORD *)(v6 + 824);
  }
  v68 = (uint64_t)v5;
  v69 = (_QWORD **)(v35 + 32);
  v70 = *(char ***)(v6 + 152);
  v37 = v37;
  v71 = (uint64_t *)v175;
  v72 = v174;
  *(_QWORD *)&v28 = 134217984;
  v164 = v28;
  do
  {
    if (*v72++)
    {
      if (dword_1EF19FC90 >= 5)
      {
        LODWORD(v162) = *__error();
        v160 = (os_log_t)_SILogForLogForCategory(1);
        if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
        {
          v74 = *v71;
          *(_DWORD *)v176 = v164;
          *(_QWORD *)&v176[4] = v74;
          _os_log_impl(&dword_1B8270000, v160, OS_LOG_TYPE_DEFAULT, "No permission for %llx", v176, 0xCu);
        }
        *__error() = v162;
      }
    }
    else if (v41 >= 1)
    {
      collectAttributesFromDBO(v40, *v69, v41, v68, v70);
    }
    ++v71;
    ++v69;
    --v37;
  }
  while (v37);
  v11 = 1;
  v6 = v163;
  v5 = (_QWORD *)v68;
LABEL_144:
  if (*(_DWORD *)(v6 + 160) != 4)
  {
    if (v5[186])
    {
      _MDPlistBytesEndArray();
      _MDPlistBytesEndPlist();
    }
    if (v5[58])
    {
      _MDStoreOIDArrayEndBulkAdd();
      _MDStoreOIDArrayEndSequence();
      v5[443] = 0;
    }
    if (dword_1EF19FC90 >= 5)
    {
      v135 = *__error();
      v136 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
      {
        v137 = PartialQueryResults::totalcount((PartialQueryResults *)v5);
        *(_DWORD *)v176 = 134218240;
        *(_QWORD *)&v176[4] = v6;
        *(_WORD *)&v176[12] = 2048;
        *(_QWORD *)&v176[14] = v137;
        _os_log_impl(&dword_1B8270000, v136, OS_LOG_TYPE_DEFAULT, "%p found %ld results\n", v176, 0x16u);
      }
      *__error() = v135;
    }
  }
  *(_QWORD *)(*(_QWORD *)(v6 + 824) + 24) = 0;
  QueryFunctionCallbackContext_METADATA::~QueryFunctionCallbackContext_METADATA((QueryFunctionCallbackContext_METADATA *)v165);
  return v11;
}

void emitResults(SISearchCtx_METADATA *this, PartialQueryResults *a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  const void *Mutable;
  _QWORD *v8;
  uint64_t v9;
  const void *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  int v15;
  int updated;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  int *v24;
  int v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  void *v31;
  char *v32;
  int *v33;
  _WORD *v34;
  unsigned int *v35;
  _BYTE *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _OWORD *v43;
  uint64_t *v44;
  __int16 v45;
  void **v46;
  void *v47;
  char *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  char *v54;
  int v55;
  char v56;
  uint64_t v57;
  __int128 *v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t *v66;
  unsigned int *v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  unint64_t v71;
  unsigned int *v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  unsigned int *v79;
  uint64_t v80;
  _OWORD *v81;
  unsigned int *v82;
  unint64_t v83;
  unint64_t v84;
  unsigned int *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  unsigned int *v92;
  uint64_t v93;
  unsigned int *v94;
  size_t v95;
  PartialQueryResults *v96;
  unint64_t v97;
  void *v98;
  _WORD *v99;
  uint64_t v100;
  __int128 *v102;
  _QWORD v103[2];
  __n128 (*v104)(_QWORD *, uint64_t);
  void *v105;
  uint64_t *v106;
  void **v107;
  int *v108;
  unsigned int *v109;
  void *v110;
  _BYTE *v111;
  void *v112;
  char *v113;
  _QWORD v114[2];
  __n128 (*v115)(_QWORD *, uint64_t);
  void *v116;
  uint64_t *v117;
  void **v118;
  int *v119;
  unsigned int *v120;
  void *v121;
  _BYTE *v122;
  void *v123;
  char *v124;
  _OWORD v125[9];
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  void **v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD v134[6];
  _QWORD v135[5];
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)this + 212))
  {
    v5 = (_QWORD *)**((_QWORD **)this + 105);
    v6 = MEMORY[0x1E0C809B0];
    v135[0] = MEMORY[0x1E0C809B0];
    v135[1] = 0x40000000;
    v135[2] = ___ZL11emitResultsP20SISearchCtx_METADATAP19PartialQueryResultsb_block_invoke;
    v135[3] = &__block_descriptor_tmp_139;
    v135[4] = this;
    *(_QWORD *)&v136 = MEMORY[0x1E0C809B0];
    *((_QWORD *)&v136 + 1) = 0x40000000;
    *(_QWORD *)&v137 = __db_query_tree_apply_block_block_invoke;
    *((_QWORD *)&v137 + 1) = &unk_1E6E377F8;
    *(_QWORD *)&v138 = v135;
    db_query_tree_apply_block_with_meta(v5, (uint64_t)&v136, 0);
    if (a3)
    {
      v130 = malloc_type_malloc(0x100uLL, 0xC7579DCFuLL);
      Mutable = (const void *)_MDPlistContainerCreateMutable();
      _MDPlistContainerBeginContainer();
      _MDPlistContainerBeginDictionary();
      v8 = (_QWORD *)**((_QWORD **)this + 105);
      v134[0] = v6;
      v134[1] = 0x40000000;
      v134[2] = ___ZL11emitResultsP20SISearchCtx_METADATAP19PartialQueryResultsb_block_invoke_2;
      v134[3] = &__block_descriptor_tmp_140_4151;
      v134[4] = &v130;
      v134[5] = Mutable;
      *(_QWORD *)&v136 = v6;
      *((_QWORD *)&v136 + 1) = 0x40000000;
      *(_QWORD *)&v137 = __db_query_tree_apply_block_block_invoke;
      *((_QWORD *)&v137 + 1) = &unk_1E6E377F8;
      *(_QWORD *)&v138 = v134;
      db_query_tree_apply_block_with_meta(v8, (uint64_t)&v136, 0);
      _MDPlistContainerEndDictionary();
      _MDPlistContainerEndContainer();
      _MDPlistContainerGetBytes();
      _MDPlistContainerGetLength();
      v9 = _MDPlistContainerCreateWithCopiedBytes();
      v10 = (const void *)*((_QWORD *)a2 + 57);
      if (v10)
        CFRelease(v10);
      *((_QWORD *)a2 + 57) = v9;
      free(v130);
      CFRelease(Mutable);
    }
  }
  v11 = *((_QWORD *)this + 139);
  if (v11)
  {
    v12 = *((_DWORD *)this + 40);
    v13 = 1;
    v14 = v12 > 6;
    v15 = (1 << v12) & 0x4A;
    if (!v14 && v15 != 0)
    {
      updated = SISearchCtx_METADATA::updateGroupingCount(this);
      if (updated < 1)
        return;
      v11 = *((_QWORD *)this + 139);
      v13 = updated;
    }
    v18 = 0;
    v19 = 0;
    do
    {
      v20 = v11 + 40 * v18;
      v21 = *(unsigned int **)(v20 + 32);
      if (v21 && (v22 = *v21, (_DWORD)v22))
      {
        v23 = 0;
        v24 = (int *)(v21 + 18);
        do
        {
          v25 = *v24;
          v24 += 36;
          if (v25)
            ++v23;
          --v22;
        }
        while (v22);
      }
      else
      {
        v23 = 0;
      }
      v26 = *(unsigned int **)(v11 + 40 * v18 + 40);
      if (v26 && (v27 = *v26, (_DWORD)v27))
      {
        v28 = 0;
        v29 = (int *)(v26 + 18);
        do
        {
          v30 = *v29;
          v29 += 36;
          if (v30)
            ++v28;
          --v27;
        }
        while (v27);
      }
      else
      {
        v28 = 0;
      }
      v19 = v19 + *(_QWORD *)(v20 + 24) + v23 + v28 - 1;
      ++v18;
    }
    while (v18 != v13);
    if (v19)
    {
      v31 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * v19, 0x6085D6BuLL);
      if (!v31)
        _log_fault_for_malloc_failure();
      v99 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 2 * v19, 0x6085D6BuLL);
      if (!v99)
        _log_fault_for_malloc_failure();
      v96 = a2;
      v32 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 80 * v19, 0x6085D6BuLL);
      if (!v32)
        _log_fault_for_malloc_failure();
      v33 = (int *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 5 * v19, 0x6085D6BuLL);
      v34 = v99;
      if (!v33)
        _log_fault_for_malloc_failure();
      v35 = (unsigned int *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 16 * v19, 0x6085D6BuLL);
      if (!v35)
        _log_fault_for_malloc_failure();
      v95 = v19;
      v36 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v19, 0x6085D6BuLL);
      if (!v36)
        _log_fault_for_malloc_failure();
      v37 = 0;
      v130 = 0;
      v131 = &v130;
      v132 = 0x2000000000;
      v133 = 0;
      v126 = 0;
      v127 = &v126;
      v128 = 0x2000000000;
      v129 = 0;
      v97 = v13;
      v98 = v31;
      do
      {
        v100 = *(_QWORD *)(*((_QWORD *)this + 139) + 40 * v37 + 24);
        v38 = v100 - 1;
        v102 = (__int128 *)malloc_type_malloc(144 * (v100 - 1), 0x100004073BE1144uLL);
        v39 = *((_QWORD *)this + 139) + 40 * v127[3];
        if (*(_QWORD *)(v39 + 24) != 1)
        {
          v40 = v34;
          v41 = v31;
          v42 = (_QWORD *)(v39 + 8);
          v43 = v102 + 8;
          do
          {
            pqpop_rankAndFetchInfo_t((uint64_t)&v136, v42);
            *(v43 - 8) = v136;
            *(v43 - 7) = v137;
            *(v43 - 3) = v141;
            *(v43 - 2) = v142;
            *(v43 - 1) = v143;
            *v43 = v144;
            *(v43 - 6) = v138;
            *(v43 - 5) = v139;
            *(v43 - 4) = v140;
            v44 = v127;
            v45 = *((unsigned __int8 *)v127 + 24);
            v46 = v131;
            v47 = v131[3];
            v41[(_QWORD)v47] = *((_QWORD *)v43 - 1);
            v40[(_QWORD)v47] = v45;
            v48 = &v32[80 * (_QWORD)v47];
            v49 = *(v43 - 7);
            v50 = *(v43 - 6);
            v51 = *(v43 - 5);
            *((_OWORD *)v48 + 4) = *(v43 - 4);
            v52 = *(v43 - 8);
            *((_OWORD *)v48 + 2) = v50;
            *((_OWORD *)v48 + 3) = v51;
            *(_OWORD *)v48 = v52;
            *((_OWORD *)v48 + 1) = v49;
            v53 = *((_QWORD *)v43 - 5);
            *(_QWORD *)v48 = *((_QWORD *)v43 - 6);
            *((_QWORD *)v48 + 1) = v53;
            v54 = (char *)v33 + 5 * (_QWORD)v47;
            v55 = *((_DWORD *)v43 - 8);
            v54[4] = *((_BYTE *)v43 - 28);
            *(_DWORD *)v54 = v55;
            *(_OWORD *)&v35[4 * (_QWORD)v47] = *(_OWORD *)((char *)v43 - 24);
            v56 = *(_BYTE *)v43;
            v43 += 9;
            *((_BYTE *)v47 + (_QWORD)v36) = v56;
            v46[3] = (char *)v46[3] + 1;
            v57 = *((_QWORD *)this + 139) + 40 * v44[3];
            v42 = (_QWORD *)(v57 + 8);
          }
          while (*(_QWORD *)(v57 + 24) != 1);
        }
        if (v100 >= 2 && (a3 & 1) == 0)
        {
          v58 = v102;
          do
          {
            v59 = *((_QWORD *)this + 139) + 40 * v127[3] + 8;
            v60 = v58[7];
            v125[6] = v58[6];
            v125[7] = v60;
            v125[8] = v58[8];
            v61 = v58[3];
            v125[2] = v58[2];
            v125[3] = v61;
            v62 = v58[5];
            v125[4] = v58[4];
            v125[5] = v62;
            v64 = *v58;
            v63 = v58[1];
            v58 += 9;
            v125[0] = v64;
            v125[1] = v63;
            pqpush_rankAndFetchInfo_t(v59, (uint64_t)v125);
            --v38;
          }
          while (v38);
        }
        free(v102);
        v65 = *((_QWORD *)this + 139);
        v66 = v127;
        v67 = *(unsigned int **)(v65 + 40 * v127[3] + 32);
        v68 = MEMORY[0x1E0C809B0];
        v114[0] = MEMORY[0x1E0C809B0];
        v114[1] = 0x40000000;
        v115 = ___ZL11emitResultsP20SISearchCtx_METADATAP19PartialQueryResultsb_block_invoke_3;
        v116 = &unk_1E6E30280;
        v119 = v33;
        v120 = v35;
        v117 = &v126;
        v118 = &v130;
        v31 = v98;
        v34 = v99;
        v121 = v99;
        v122 = v36;
        v123 = v98;
        v124 = v32;
        if (v67)
        {
          v69 = *v67;
          v70 = a3;
          if ((_DWORD)v69)
          {
            v71 = 0;
            v72 = v67 + 18;
            do
            {
              if (*v72)
              {
                v136 = *(_OWORD *)(v72 - 14);
                v73 = *(_OWORD *)(v72 - 10);
                v74 = *(_OWORD *)(v72 - 6);
                v75 = *(_OWORD *)(v72 + 2);
                v139 = *(_OWORD *)(v72 - 2);
                v140 = v75;
                v137 = v73;
                v138 = v74;
                v76 = *(_OWORD *)(v72 + 6);
                v77 = *(_OWORD *)(v72 + 10);
                v78 = *(_OWORD *)(v72 + 18);
                v143 = *(_OWORD *)(v72 + 14);
                v144 = v78;
                v141 = v76;
                v142 = v77;
                v115(v114, (uint64_t)&v136);
                v69 = *v67;
              }
              ++v71;
              v72 += 36;
            }
            while (v71 < v69);
            v65 = *((_QWORD *)this + 139);
            v66 = v127;
            v70 = a3;
            v31 = v98;
            v34 = v99;
          }
        }
        else
        {
          v70 = a3;
        }
        if (v70)
        {
          v79 = *(unsigned int **)(v65 + 40 * v66[3] + 32);
          if (v79)
          {
            v80 = *v79;
            if ((_DWORD)v80)
            {
              v81 = v79 + 4;
              do
              {
                v81[6] = xmmword_1B8630980;
                v81[7] = unk_1B8630990;
                v81[8] = xmmword_1B86309A0;
                v81[2] = xmmword_1B8630940;
                v81[3] = unk_1B8630950;
                v81[4] = xmmword_1B8630960;
                v81[5] = unk_1B8630970;
                *v81 = ZERO_FETCHINFO;
                v81[1] = *(_OWORD *)algn_1B8630930;
                v81 += 9;
                --v80;
              }
              while (v80);
              v65 = *((_QWORD *)this + 139);
            }
          }
        }
        v82 = *(unsigned int **)(v65 + 40 * v66[3] + 40);
        v103[0] = v68;
        v103[1] = 0x40000000;
        v104 = ___ZL11emitResultsP20SISearchCtx_METADATAP19PartialQueryResultsb_block_invoke_4;
        v105 = &unk_1E6E302A8;
        v108 = v33;
        v109 = v35;
        v106 = &v126;
        v107 = &v130;
        v110 = v34;
        v111 = v36;
        v112 = v31;
        v113 = v32;
        if (v82)
        {
          v83 = *v82;
          if ((_DWORD)v83)
          {
            v84 = 0;
            v85 = v82 + 18;
            do
            {
              if (*v85)
              {
                v136 = *(_OWORD *)(v85 - 14);
                v86 = *(_OWORD *)(v85 - 10);
                v87 = *(_OWORD *)(v85 - 6);
                v88 = *(_OWORD *)(v85 + 2);
                v139 = *(_OWORD *)(v85 - 2);
                v140 = v88;
                v137 = v86;
                v138 = v87;
                v89 = *(_OWORD *)(v85 + 6);
                v90 = *(_OWORD *)(v85 + 10);
                v91 = *(_OWORD *)(v85 + 18);
                v143 = *(_OWORD *)(v85 + 14);
                v144 = v91;
                v141 = v89;
                v142 = v90;
                v104(v103, (uint64_t)&v136);
                v83 = *v82;
              }
              ++v84;
              v85 += 36;
            }
            while (v84 < v83);
            v66 = v127;
            v70 = a3;
            v31 = v98;
            v34 = v99;
          }
        }
        if (v70)
        {
          v92 = *(unsigned int **)(*((_QWORD *)this + 139) + 40 * v66[3] + 40);
          if (v92)
          {
            v93 = *v92;
            if ((_DWORD)v93)
            {
              v94 = v92 + 4;
              do
              {
                *((_BYTE *)v94 + 128) = 0;
                *((_OWORD *)v94 + 4) = xmmword_1B8628420;
                *((_OWORD *)v94 + 5) = unk_1B8628430;
                *((_OWORD *)v94 + 6) = xmmword_1B8628440;
                *((_OWORD *)v94 + 7) = unk_1B8628450;
                *(_OWORD *)v94 = ZERO_FETCHINFO_Q2;
                *((_OWORD *)v94 + 1) = *(_OWORD *)algn_1B86283F0;
                *((_OWORD *)v94 + 2) = xmmword_1B8628400;
                *((_OWORD *)v94 + 3) = unk_1B8628410;
                v94 += 36;
                --v93;
              }
              while (v93);
            }
          }
        }
        v37 = v66[3] + 1;
        v66[3] = v37;
      }
      while (v37 < v97);
      _Block_object_dispose(&v126, 8);
      _Block_object_dispose(&v130, 8);
      readSDBForOids(this, (uint64_t)v31, (uint64_t)v34, (uint64_t)v32, v33, v35, v95, v36, v96, 0, 1u);
      free(v31);
      free(v34);
      free(v32);
      free(v33);
      free(v35);
      free(v36);
    }
  }
}

uint64_t pqpop_rankAndFetchInfo_t(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float v12;
  int v13;
  float v14;
  int v15;
  char v16;
  char v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  float v30;
  int v31;
  float v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  unsigned int v38;
  float v39;
  int v40;
  float v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 *v47;
  int *v48;
  uint64_t *v49;
  __int128 *v50;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  char v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  int v84;
  char v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v2 = a2[2];
  if (v2 != 1)
  {
    v3 = *a2;
    v4 = *(_OWORD *)(*a2 + 256);
    *(_OWORD *)(result + 96) = *(_OWORD *)(*a2 + 240);
    *(_OWORD *)(result + 112) = v4;
    *(_OWORD *)(result + 128) = *(_OWORD *)(v3 + 272);
    v5 = *(_OWORD *)(v3 + 192);
    *(_OWORD *)(result + 32) = *(_OWORD *)(v3 + 176);
    *(_OWORD *)(result + 48) = v5;
    v6 = *(_OWORD *)(v3 + 224);
    *(_OWORD *)(result + 64) = *(_OWORD *)(v3 + 208);
    *(_OWORD *)(result + 80) = v6;
    v7 = *(_OWORD *)(v3 + 160);
    *(_OWORD *)result = *(_OWORD *)(v3 + 144);
    *(_OWORD *)(result + 16) = v7;
    v8 = v3 + 144 * v2;
    v9 = *(_QWORD *)(v8 - 144);
    v10 = *(_QWORD *)(v8 - 136);
    v78 = *(_OWORD *)(v8 - 128);
    v79 = *(_OWORD *)(v8 - 112);
    v11 = *(_DWORD *)(v8 - 96);
    v12 = *(float *)(v8 - 92);
    v13 = *(_DWORD *)(v8 - 88);
    v14 = *(float *)(v8 - 84);
    v15 = *(_DWORD *)(v8 - 80);
    v16 = *(_BYTE *)(v8 - 76);
    v17 = *(_BYTE *)(v8 - 75);
    v18 = *(_QWORD *)(v8 - 74);
    v19 = *(_WORD *)(v8 - 66);
    v73 = *(_OWORD *)(v8 - 64);
    v74 = *(_OWORD *)(v8 - 48);
    v75 = *(_OWORD *)(v8 - 32);
    v76 = *(_OWORD *)(v8 - 16);
    *(_OWORD *)(v3 + 160) = v78;
    *(_OWORD *)(v3 + 176) = v79;
    *(_OWORD *)(v3 + 256) = v75;
    *(_OWORD *)(v3 + 272) = v76;
    *(_OWORD *)(v3 + 224) = v73;
    *(_OWORD *)(v3 + 240) = v74;
    v77 = v15;
    v91 = v19;
    v90 = v18;
    *(_QWORD *)(v3 + 144) = v9;
    *(_QWORD *)(v3 + 152) = v10;
    *(_DWORD *)(v3 + 192) = v11;
    *(float *)(v3 + 196) = v12;
    *(_DWORD *)(v3 + 200) = v13;
    *(float *)(v3 + 204) = v14;
    *(_BYTE *)(v3 + 212) = v16;
    *(_DWORD *)(v3 + 208) = v15;
    *(_BYTE *)(v3 + 213) = v17;
    *(_WORD *)(v3 + 222) = v19;
    *(_QWORD *)(v3 + 214) = v18;
    v21 = a2[1];
    v20 = a2[2];
    a2[2] = v20 - 1;
    v89 = v91;
    v88 = v18;
    v22 = v21 >> 1;
    v23 = 3;
    v24 = 2;
    result = 1;
    while (1)
    {
      v25 = *a2;
      v26 = *a2 + 144 * v24;
      v27 = *(_QWORD *)v26;
      v28 = *(_QWORD *)(v26 + 8);
      v29 = *(_DWORD *)(v26 + 48);
      v30 = *(float *)(v26 + 52);
      v31 = *(_DWORD *)(v26 + 56);
      v32 = *(float *)(v26 + 60);
      v33 = *(unsigned __int8 *)(v26 + 69);
      v34 = *a2 + 144 * v23;
      v35 = *(_QWORD *)v34;
      v36 = *(_QWORD *)(v34 + 8);
      v37 = *(_OWORD *)(v34 + 32);
      v86 = *(_OWORD *)(v34 + 16);
      v87 = v37;
      v38 = *(_DWORD *)(v34 + 48);
      v39 = *(float *)(v34 + 52);
      v40 = *(_DWORD *)(v34 + 56);
      v41 = *(float *)(v34 + 60);
      v84 = *(_DWORD *)(v34 + 64);
      v85 = *(_BYTE *)(v34 + 68);
      v42 = *(unsigned __int8 *)(v34 + 69);
      v43 = *(_QWORD *)(v34 + 70);
      v93 = *(_WORD *)(v34 + 78);
      v92 = v43;
      v44 = *(_OWORD *)(v34 + 96);
      v80 = *(_OWORD *)(v34 + 80);
      v81 = v44;
      v45 = *(_OWORD *)(v34 + 128);
      v82 = *(_OWORD *)(v34 + 112);
      v83 = v45;
      if (v23 >= v20)
      {
        v86 = xmmword_1B8630B00;
        v87 = unk_1B8630B10;
        v84 = 0;
        v85 = 0;
        v92 = 0;
        v93 = 0;
        v80 = 0uLL;
        v81 = 0uLL;
        v82 = 0uLL;
        v83 = 0uLL;
        if (v24 >= v20)
          return result;
        v38 = 0;
        v40 = 0;
        v42 = 0;
        v35 = -1;
        v39 = 0.0;
        v41 = 3.4028e38;
        v36 = -1;
        if (!v33)
        {
LABEL_12:
          if (__PAIR128__(v28, v27) < __PAIR128__(v10, v9))
            goto LABEL_21;
          if (v28 != v10 || v27 != v9)
          {
LABEL_44:
            if (!v42)
            {
              if (__PAIR128__(v36, v35) >= __PAIR128__(v10, v9))
              {
                v62 = v36 == v10 && v35 == v9;
                if (!v62 || v39 >= v12 && (v39 != v12 || v38 <= v11))
                {
LABEL_61:
                  _X8 = v25 + 288 * result;
                  __asm { PRFM            #1, [X8] }
                  return result;
                }
                LOBYTE(v33) = 0;
                v50 = &v80;
                v49 = &v92;
                v48 = &v84;
                v47 = &v86;
                v32 = v41;
                v31 = v40;
                v30 = v39;
                v29 = v38;
                v27 = v9;
                v28 = v10;
                goto LABEL_31;
              }
              goto LABEL_29;
            }
            if (v41 >= v14 && (v41 != v14 || v39 >= v12 && (v39 != v12 || v38 <= v11)))
              goto LABEL_61;
            goto LABEL_27;
          }
          goto LABEL_18;
        }
      }
      else if (!v33)
      {
        goto LABEL_12;
      }
      if (v32 < v14)
        goto LABEL_21;
      if (v32 != v14)
        goto LABEL_44;
LABEL_18:
      if (v30 >= v12 && (v30 != v12 || v29 <= v11))
        goto LABEL_44;
LABEL_21:
      v47 = (__int128 *)(v26 + 16);
      v48 = (int *)(v26 + 64);
      v49 = (uint64_t *)(v26 + 70);
      v50 = (__int128 *)(v26 + 80);
      if (!v42)
      {
        if (__PAIR128__(v36, v35) >= __PAIR128__(v28, v27))
        {
          v61 = v36 == v28 && v35 == v27;
          if (!v61 || v39 >= v30 && (v39 != v30 || v38 <= v29))
            goto LABEL_32;
          LOBYTE(v33) = 0;
          v50 = &v80;
          v49 = &v92;
          v48 = &v84;
          v47 = &v86;
          v32 = v41;
          v31 = v40;
          v30 = v39;
          v29 = v38;
          goto LABEL_31;
        }
LABEL_29:
        LOBYTE(v33) = 0;
        v50 = &v80;
        v49 = &v92;
        v48 = &v84;
        v47 = &v86;
        goto LABEL_30;
      }
      if (v41 >= v32 && (v41 != v32 || v39 >= v30 && (v39 != v30 || v38 <= v29)))
        goto LABEL_32;
LABEL_27:
      v50 = &v80;
      v49 = &v92;
      v48 = &v84;
      v47 = &v86;
      LOBYTE(v33) = v42;
LABEL_30:
      v32 = v41;
      v31 = v40;
      v30 = v39;
      v29 = v38;
      v27 = v35;
      v28 = v36;
LABEL_31:
      v24 = v23;
LABEL_32:
      v71 = *v47;
      v72 = v47[1];
      v69 = *v48;
      v70 = *((_BYTE *)v48 + 4);
      v88 = *v49;
      v89 = *((_WORD *)v49 + 4);
      v67 = v50[2];
      v68 = v50[3];
      v65 = *v50;
      v66 = v50[1];
      _X4 = v25 + 288 * v24;
      __asm { PRFM            #1, [X4] }
      if (v24 != result)
      {
        v56 = v25 + 144 * v24;
        *(_QWORD *)v56 = v9;
        *(_QWORD *)(v56 + 8) = v10;
        *(_OWORD *)(v56 + 16) = v78;
        *(_OWORD *)(v56 + 32) = v79;
        *(_DWORD *)(v56 + 48) = v11;
        *(float *)(v56 + 52) = v12;
        *(_DWORD *)(v56 + 56) = v13;
        *(float *)(v56 + 60) = v14;
        *(_DWORD *)(v56 + 64) = v77;
        *(_BYTE *)(v56 + 68) = v16;
        *(_BYTE *)(v56 + 69) = v17;
        *(_WORD *)(v56 + 78) = v91;
        v57 = v90;
        *(_QWORD *)(v56 + 70) = v90;
        *(_OWORD *)(v56 + 80) = v73;
        *(_OWORD *)(v56 + 96) = v74;
        *(_OWORD *)(v56 + 112) = v75;
        *(_OWORD *)(v56 + 128) = v76;
        v58 = *a2 + 144 * result;
        *(_OWORD *)(v58 + 16) = v71;
        *(_OWORD *)(v58 + 32) = v72;
        *(float *)(v58 + 52) = v30;
        *(float *)(v58 + 60) = v32;
        *(_OWORD *)(v58 + 112) = v67;
        *(_OWORD *)(v58 + 128) = v68;
        *(_OWORD *)(v58 + 80) = v65;
        *(_OWORD *)(v58 + 96) = v66;
        result = v24;
        v23 = (2 * v24) | 1;
        *(_QWORD *)v58 = v27;
        *(_QWORD *)(v58 + 8) = v28;
        *(_DWORD *)(v58 + 48) = v29;
        *(_DWORD *)(v58 + 56) = v31;
        *(_BYTE *)(v58 + 68) = v70;
        *(_DWORD *)(v58 + 64) = v69;
        *(_BYTE *)(v58 + 69) = v33;
        v59 = v88;
        *(_WORD *)(v58 + 78) = v89;
        *(_QWORD *)(v58 + 70) = v59;
        v89 = v91;
        v88 = v57;
        v60 = v24 < v22;
        v24 *= 2;
        if (v60)
          continue;
      }
      return result;
    }
  }
  *(_OWORD *)(result + 96) = xmmword_1B8630980;
  *(_OWORD *)(result + 112) = unk_1B8630990;
  *(_OWORD *)(result + 128) = xmmword_1B86309A0;
  *(_OWORD *)(result + 32) = xmmword_1B8630940;
  *(_OWORD *)(result + 48) = unk_1B8630950;
  *(_OWORD *)(result + 64) = xmmword_1B8630960;
  *(_OWORD *)(result + 80) = unk_1B8630970;
  *(_OWORD *)result = ZERO_FETCHINFO;
  *(_OWORD *)(result + 16) = *(_OWORD *)algn_1B8630930;
  return result;
}

__n128 pqpush_rankAndFetchInfo_t(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float v22;
  float v23;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD *v32;
  BOOL v33;
  __int128 v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if ((uint64_t)(v5 + 2) >= v4)
  {
    v7 = 2 * v4;
    if (v4 < 4)
      v7 = 4;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = 144 * v7 + 288;
    if (*(_QWORD *)a1)
      v9 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, *(void **)a1, v8, 0xECA6AA46uLL);
    else
      v9 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v8, 0x8DDAA030uLL);
    v10 = v9;
    if (!v9)
      _log_fault_for_malloc_failure();
    *(_QWORD *)a1 = v10;
    v10[2] = xmmword_1B8630940;
    v10[3] = unk_1B8630950;
    v10[8] = xmmword_1B86309A0;
    v10[6] = xmmword_1B8630980;
    v10[7] = unk_1B8630990;
    v10[4] = xmmword_1B8630960;
    v10[5] = unk_1B8630970;
    *v10 = ZERO_FETCHINFO;
    v10[1] = *(_OWORD *)algn_1B8630930;
    v6 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = v6 + 1;
  v11 = (_OWORD *)(*(_QWORD *)a1 + 144 * v5);
  v12 = *(_OWORD *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 64);
  v11[3] = *(_OWORD *)(a2 + 48);
  v11[4] = v14;
  v11[1] = v12;
  v11[2] = v13;
  v15 = *(_OWORD *)(a2 + 80);
  v16 = *(_OWORD *)(a2 + 96);
  v17 = *(_OWORD *)(a2 + 128);
  v11[7] = *(_OWORD *)(a2 + 112);
  v11[8] = v17;
  v11[5] = v15;
  v11[6] = v16;
  result = *(__n128 *)a2;
  *v11 = *(_OWORD *)a2;
  if ((uint64_t)v5 >= 2)
  {
    do
    {
      v19 = *(_QWORD *)a1 + 144 * v5;
      result.n128_u32[0] = *(_DWORD *)(v19 + 52);
      v20 = *(_QWORD *)a1 + 144 * (v5 >> 1);
      v21 = *(float *)(v20 + 52);
      if (*(_BYTE *)(v19 + 69))
      {
        v22 = *(float *)(v19 + 60);
        v23 = *(float *)(v20 + 60);
        if (v22 < v23)
          goto LABEL_27;
        if (v22 != v23)
          return result;
      }
      else
      {
        if (*(_OWORD *)v19 < *(_OWORD *)v20)
          goto LABEL_27;
        if (*(_QWORD *)(v19 + 8) != *(_QWORD *)(v20 + 8) || *(_QWORD *)v19 != *(_QWORD *)v20)
          return result;
      }
      if (result.n128_f32[0] >= v21 && (result.n128_f32[0] != v21 || *(_DWORD *)(v19 + 48) < *(_DWORD *)(v20 + 48)))
        return result;
LABEL_27:
      v40 = *(_OWORD *)(v19 + 96);
      v41 = *(_OWORD *)(v19 + 112);
      v42 = *(_OWORD *)(v19 + 128);
      v36 = *(_OWORD *)(v19 + 32);
      v37 = *(_OWORD *)(v19 + 48);
      v38 = *(_OWORD *)(v19 + 64);
      v39 = *(_OWORD *)(v19 + 80);
      v34 = *(_OWORD *)v19;
      v35 = *(__n128 *)(v19 + 16);
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v26 = *(_OWORD *)(v20 + 16);
      v27 = *(_OWORD *)(v20 + 32);
      v28 = *(_OWORD *)(v20 + 64);
      *(_OWORD *)(v19 + 48) = *(_OWORD *)(v20 + 48);
      *(_OWORD *)(v19 + 64) = v28;
      *(_OWORD *)(v19 + 16) = v26;
      *(_OWORD *)(v19 + 32) = v27;
      v29 = *(_OWORD *)(v20 + 80);
      v30 = *(_OWORD *)(v20 + 96);
      v31 = *(_OWORD *)(v20 + 128);
      *(_OWORD *)(v19 + 112) = *(_OWORD *)(v20 + 112);
      *(_OWORD *)(v19 + 128) = v31;
      *(_OWORD *)(v19 + 80) = v29;
      *(_OWORD *)(v19 + 96) = v30;
      v32 = (_OWORD *)(*(_QWORD *)a1 + 144 * (v5 >> 1));
      v32[6] = v40;
      v32[7] = v41;
      v32[8] = v42;
      v32[2] = v36;
      v32[3] = v37;
      v32[4] = v38;
      v32[5] = v39;
      result = v35;
      *v32 = v34;
      v32[1] = v35;
      v33 = v5 > 3;
      v5 >>= 1;
    }
    while (v33);
  }
  return result;
}

uint64_t _performSearch(SISearchCtx_METADATA *this, PartialQueryResults *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t updated;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  size_t v19;
  PartialQueryResults *v20;
  uint64_t v21;
  CFIndex i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  const __CFArray *v31;
  const __CFArray *v32;
  const __CFArray *v33;
  const __CFArray *v34;
  const __CFArray *v35;
  const __CFBitVector *v36;
  CFIndex CountOfBit;
  const __CFArray *v38;
  uint64_t v39;
  const __CFBitVector *v40;
  unint64_t Count;
  const __CFArray *v42;
  uint64_t v43;
  const __CFBitVector *v44;
  CFIndex v45;
  const __CFArray *v46;
  uint64_t v47;
  const __CFBitVector *v48;
  unint64_t v49;
  const __CFArray *v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  NSObject *v58;
  os_log_type_t v59;
  int v60;
  double v61;
  __int128 v62;
  uint64_t v63;
  size_t v64;
  uint64_t v65;
  size_t v66;
  _BOOL4 v67;
  uint64_t v68;
  size_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  size_t v74;
  int v75;
  size_t v76;
  uint64_t v77;
  _WORD *v78;
  double Current;
  const __CFArray *v80;
  char v81;
  unsigned __int8 *v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t);
  double v87;
  int v88;
  NSObject *v89;
  os_log_type_t v90;
  double v91;
  uint64_t v92;
  unsigned __int8 *v93;
  _WORD *v94;
  size_t v95;
  char *v96;
  char *v97;
  unsigned __int8 *v98;
  _WORD *v99;
  char *v100;
  uint64_t *v101;
  int v102;
  int v103;
  char *v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  int v108;
  NSObject *v109;
  os_log_type_t v110;
  size_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  _WORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  unsigned int *v123;
  _BOOL4 v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  SISearchCtx_METADATA *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  size_t v135;
  _BYTE *v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  unint64_t v140;
  int v141;
  NSObject *v142;
  const char *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  CFAbsoluteTime v150;
  char v151;
  int v152;
  size_t v153;
  char *v154;
  char *v155;
  int *v156;
  unsigned int *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  char v164;
  unsigned __int16 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  int *v171;
  unsigned int *v172;
  char *v173;
  _QWORD *v174;
  int *v175;
  char *v176;
  char *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  int v181;
  char *v182;
  _WORD *v183;
  int *v184;
  _QWORD *v185;
  uint64_t v186;
  __int128 *v187;
  unint64_t v188;
  char *v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  int v193;
  char *v194;
  int v195;
  NSObject *v196;
  const char *v197;
  uint64_t v198;
  int v199;
  BOOL v200;
  char *v201;
  char *v202;
  const char *v203;
  int v204;
  NSObject *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  NSObject *v215;
  uint64_t v216;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  size_t v221;
  size_t v222;
  unsigned __int8 *v223;
  uint64_t v224;
  size_t *v225;
  PartialQueryResults *v226;
  char *v227;
  int v228;
  uint64_t v229;
  int v230;
  int *v231;
  char *v232;
  _WORD *v233;
  _BYTE buf[12];
  __int16 v235;
  double v236;
  __int16 v237;
  int v238;
  uint64_t v239;
  CFRange v240;
  CFRange v241;
  CFRange v242;
  CFRange v243;
  CFRange v244;
  CFRange v245;
  CFRange v246;
  CFRange v247;
  CFRange v248;

  v239 = *MEMORY[0x1E0C80C00];
  if (dword_1EF19FC90 >= 5)
  {
    v204 = *__error();
    v205 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "_performSearch";
      _os_log_impl(&dword_1B8270000, v205, OS_LOG_TYPE_DEFAULT, "Enter %s", buf, 0xCu);
    }
    *__error() = v204;
  }
  v4 = *(unsigned __int8 *)(*((_QWORD *)this + 3) + 2072);
  v5 = *((_QWORD *)this + 1);
  v6 = 304;
  if (!*((_BYTE *)this + 644))
    v6 = 320;
  v7 = *(unsigned int *)(v5 + v6);
  v8 = *((_QWORD *)this + 23);
  if (v8 || (v9 = v7, *((_QWORD *)this + 22)))
  {
    v9 = v7;
    if (*(_BYTE *)(*((_QWORD *)this + 13) + 99))
    {
      v10 = *((_DWORD *)this + 40);
      v9 = v7;
      if (v10 <= 6)
      {
        if (((1 << v10) & 0x4A) != 0)
        {
          v14 = *((_QWORD *)this + 1);
          updated = SISearchCtx_METADATA::updateGroupingCount(this);
          v16 = updated;
          MEMORY[0x1E0C80A78](updated);
          v18 = (char *)&v218 - v17;
          bzero((char *)&v218 - v17, v19);
          if (v16 < 2)
            goto LABEL_24;
          v20 = a2;
          v9 = 0;
          v21 = v16;
          for (i = 1; i != v21; ++i)
          {
            if (!v4 || CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(*((_QWORD *)this + 3) + 2096), i))
            {
              v23 = *((_QWORD *)this + 22);
              v200 = v23 <= *(int *)&v18[4 * i];
              v24 = v9 + 4 * v23;
              if (!v200)
                v9 = v24;
            }
          }
          a2 = v20;
          if (!v9)
LABEL_24:
            v9 = 8 * *((_QWORD *)this + 22);
          v5 = v14;
        }
        else if (((1 << v10) & 0x24) != 0 || (v9 = v7, v10 == 4) && (v9 = v7, *((_QWORD *)this + 22)))
        {
          v9 = v7;
          if (!*(_QWORD *)(v5 + 288))
          {
            v9 = v7;
            if (!*(_QWORD *)(v5 + 272))
            {
              v11 = atomic_load((unint64_t *)this + 68);
              if (v8 <= v11)
                return 0;
              v12 = *((_QWORD *)this + 23);
              v13 = atomic_load((unint64_t *)this + 68);
              v9 = v12 - v13;
            }
          }
        }
      }
    }
  }
  v25 = *((_QWORD *)this + 1);
  v26 = *((_DWORD *)this + 168);
  if (v26 >= 0xA)
    v27 = 10;
  else
    v27 = *((_DWORD *)this + 168);
  v28 = v9 + v9 * (*(_QWORD *)(v25 + 480) + (1 << v27));
  *((_DWORD *)this + 168) = v26 + 1;
  if (!v28)
    v28 = 4096;
  if (v28 >= v7)
    v29 = v7;
  else
    v29 = v28;
  if (*((_DWORD *)this + 208) >= 2u)
    v30 = v28;
  else
    v30 = v29;
  v31 = *(const __CFArray **)(v25 + 16);
  v224 = v5;
  if (v31)
  {
    v240.length = CFArrayGetCount(v31);
    v240.location = 0;
    if (CFArrayContainsValue(v31, v240, CFSTR("_kMDItemSDBInfo")))
      goto LABEL_43;
    v32 = *(const __CFArray **)(*((_QWORD *)this + 1) + 16);
    v241.length = CFArrayGetCount(v32);
    v241.location = 0;
    if (CFArrayContainsValue(v32, v241, CFSTR("kMDItemPhotosSceneClassificationLabels")))
      goto LABEL_43;
    v33 = *(const __CFArray **)(*((_QWORD *)this + 1) + 16);
    v242.length = CFArrayGetCount(v33);
    v242.location = 0;
    if (CFArrayContainsValue(v33, v242, CFSTR("kMDItemPhotosSceneClassificationSynonyms"))
      || (v34 = *(const __CFArray **)(*((_QWORD *)this + 1) + 16),
          v243.length = CFArrayGetCount(v34),
          v243.location = 0,
          CFArrayContainsValue(v34, v243, CFSTR("kMDItemPhotosSceneClassificationConfidences")))
      || (v35 = *(const __CFArray **)(*((_QWORD *)this + 1) + 16),
          v244.length = CFArrayGetCount(v35),
          v244.location = 0,
          CFArrayContainsValue(v35, v244, CFSTR("kMDItemPhotosSceneClassificationIdentifiers"))))
    {
LABEL_43:
      if (v30 > 0x10000)
        v30 = 65537;
      goto LABEL_69;
    }
    v25 = *((_QWORD *)this + 1);
  }
  v36 = *(const __CFBitVector **)(v25 + 24);
  if (v36)
  {
    v245.length = CFBitVectorGetCount(*(CFBitVectorRef *)(v25 + 24));
    v245.location = 0;
    CountOfBit = CFBitVectorGetCountOfBit(v36, v245, 1u);
  }
  else
  {
    v38 = *(const __CFArray **)(v25 + 16);
    if (!v38)
      goto LABEL_56;
    CountOfBit = CFArrayGetCount(v38);
  }
  if (CountOfBit >= 2)
  {
    v39 = *((_QWORD *)this + 1);
    v40 = *(const __CFBitVector **)(v39 + 24);
    if (v40)
    {
      v246.length = CFBitVectorGetCount(*(CFBitVectorRef *)(v39 + 24));
      v246.location = 0;
      Count = CFBitVectorGetCountOfBit(v40, v246, 1u);
      goto LABEL_57;
    }
    v42 = *(const __CFArray **)(v39 + 16);
    if (v42)
    {
      Count = CFArrayGetCount(v42);
      goto LABEL_57;
    }
  }
LABEL_56:
  Count = 1;
LABEL_57:
  if (v30 >= 0x28000 / Count)
  {
    v43 = *((_QWORD *)this + 1);
    v44 = *(const __CFBitVector **)(v43 + 24);
    if (v44)
    {
      v247.length = CFBitVectorGetCount(*(CFBitVectorRef *)(v43 + 24));
      v247.location = 0;
      v45 = CFBitVectorGetCountOfBit(v44, v247, 1u);
    }
    else
    {
      v46 = *(const __CFArray **)(v43 + 16);
      if (!v46)
        goto LABEL_67;
      v45 = CFArrayGetCount(v46);
    }
    if (v45 >= 2)
    {
      v47 = *((_QWORD *)this + 1);
      v48 = *(const __CFBitVector **)(v47 + 24);
      if (v48)
      {
        v248.length = CFBitVectorGetCount(*(CFBitVectorRef *)(v47 + 24));
        v248.location = 0;
        v49 = CFBitVectorGetCountOfBit(v48, v248, 1u);
LABEL_68:
        v30 = 0x28000 / v49;
        goto LABEL_69;
      }
      v50 = *(const __CFArray **)(v47 + 16);
      if (v50)
      {
        v49 = CFArrayGetCount(v50);
        goto LABEL_68;
      }
    }
LABEL_67:
    v49 = 1;
    goto LABEL_68;
  }
LABEL_69:
  v51 = 300;
  if (!*((_BYTE *)this + 644))
    v51 = 316;
  v52 = *(float *)(v224 + v51);
  v53 = **(_QWORD **)(*((_QWORD *)this + 3) + 8 * *((int *)this + 76) + 1024);
  v54 = (_QWORD *)v53;
  do
  {
    v55 = v54;
    v54 = (_QWORD *)*v54;
  }
  while (v54);
  if ((*((_DWORD *)v55 + 29) > 1u || *((int *)v55 + 28) <= 3)
    && (*(_DWORD *)(v53 + 116) > 1u || *(int *)(v53 + 112) < 4))
  {
    v56 = v30;
    v228 = 0;
  }
  else
  {
    v52 = fmin(v52, 0.05);
    if (v30 >= 0xBB8)
      v56 = 3000;
    else
      v56 = v30;
    v228 = 1;
  }
  v57 = *__error();
  v58 = _SILogForLogForCategory(1);
  v59 = 2 * (dword_1EF19FC90 < 4);
  if (os_log_type_enabled(v58, v59))
  {
    v60 = *((_DWORD *)v55 + 28);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v56;
    v235 = 2048;
    v236 = v52;
    v237 = 1024;
    v238 = v60;
    _os_log_impl(&dword_1B8270000, v58, v59, "Batch size: %ld. Timeout: %f. Waiting: %d", buf, 0x1Cu);
  }
  *__error() = v57;
  v61 = v52 + CFAbsoluteTimeGetCurrent();
  v225 = (size_t *)((char *)this + 600);
  *(_QWORD *)&v62 = 136315138;
  v218 = v62;
  *(_QWORD *)&v62 = 134218240;
  v220 = v62;
  *(_QWORD *)&v62 = 134217984;
  v219 = v62;
  v63 = 1;
  v64 = v56;
  v226 = a2;
  while (1)
  {
    v65 = *((_QWORD *)this + 75);
    v66 = *((_QWORD *)this + 76);
    if (v65 == v66)
    {
      if (*((_BYTE *)a2 + 432))
      {
        v67 = *((_BYTE *)a2 + 433) != 0;
      }
      else
      {
        v67 = PartialQueryResults::__needsWhatFieldsMatched(a2);
        *((_BYTE *)a2 + 433) = v67;
        *((_BYTE *)a2 + 432) = 1;
      }
      v69 = v225;
      *v225 = 0;
      v69[1] = 0;
      v68 = refillOids(this, !v67, v61, v64);
      if (dword_1EF19FC90 >= 5)
      {
        v195 = *__error();
        v196 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT))
        {
          v197 = "false";
          if ((_DWORD)v68)
            v197 = "true";
          *(_DWORD *)buf = v218;
          *(_QWORD *)&buf[4] = v197;
          _os_log_impl(&dword_1B8270000, v196, OS_LOG_TYPE_DEFAULT, "Refilled oids. More: %s", buf, 0xCu);
        }
        *__error() = v195;
      }
      v65 = *((_QWORD *)this + 75);
      v66 = *((_QWORD *)this + 76);
      if (!v65)
        return v68;
    }
    else
    {
      v68 = v63;
      if (!v66)
      {
        v201 = __si_assert_copy_extra_268();
        v202 = v201;
        v203 = "";
        if (v201)
          v203 = v201;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SISearchCtx_METADATA.cpp", 4102, "self->currentOid!=0", v203);
        goto LABEL_325;
      }
      if (!v65)
        return v68;
    }
    v70 = *((_QWORD *)this + 77);
    if (!v70)
      return v68;
    v71 = *((_QWORD *)this + 13);
    if (*(_BYTE *)(v71 + 96))
      return v68;
    do
    {
      v72 = v71;
      v71 = *(_QWORD *)(v71 + 80);
    }
    while (v71);
    if (*(_BYTE *)(*(_QWORD *)(v72 + 8) + 12))
      return v68;
    v73 = v65 - v66;
    if (v64 >= v73)
      v74 = v73;
    else
      v74 = v64;
    v75 = *(unsigned __int8 *)(*((_QWORD *)this + 3) + 2072);
    v230 = v68;
    if (v75)
    {
LABEL_102:
      v76 = v74;
      goto LABEL_142;
    }
    v77 = *((_QWORD *)this + 83);
    if (v77)
      v78 = (_WORD *)(v77 + 2 * v66);
    else
      v78 = 0;
    v232 = (char *)*((_QWORD *)this + 79);
    v233 = v78;
    v231 = (int *)*((_QWORD *)this + 117);
    Current = CFAbsoluteTimeGetCurrent();
    v80 = (const __CFArray *)*((_QWORD *)this + 4);
    if (v80 && CFArrayGetCount(v80))
    {
      v81 = 0;
    }
    else
    {
      if (*((_BYTE *)this + 649))
        goto LABEL_102;
      v81 = 1;
    }
    if (!(v74 >> 17) && *MEMORY[0x1E0C85AD8] < v74)
      ++sTotal;
    v82 = (unsigned __int8 *)malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v74, 0x31F9A007uLL);
    if (!v82)
      _log_fault_for_malloc_failure();
    v83 = CFAbsoluteTimeGetCurrent();
    *(double *)(*((_QWORD *)this + 1) + 424) = *(double *)(*((_QWORD *)this + 1) + 424) + v83 - Current;
    v84 = *((_QWORD *)this + 3);
    *(_QWORD *)buf = 0;
    v85 = *(_QWORD *)(v84 + 1416);
    v86 = *(void (**)(uint64_t))(v85 + 80);
    v229 = v70 + 8 * v66;
    v86(v85);
    if (*(_QWORD *)buf)
    {
      if (!malloc_size(*(const void **)buf))
      {
        munmap(*(void **)buf, 0x10000uLL);
        goto LABEL_119;
      }
      v202 = __si_assert_copy_extra_268();
      __message_assert_272((uint64_t)v202, v206, v207, v208, v209, v210, v211, v212, (char)"SIVirtualPSIDSupport.c");
LABEL_325:
      free(v202);
      if (__valid_fs(-1))
        v213 = 2989;
      else
        v213 = 3072;
      *(_DWORD *)v213 = -559038737;
      abort();
    }
LABEL_119:
    v223 = v82;
    v87 = CFAbsoluteTimeGetCurrent();
    v88 = *__error();
    v89 = _SILogForLogForCategory(1);
    v90 = 2 * (dword_1EF19FC90 < 4);
    v91 = v87 - v83;
    if (os_log_type_enabled(v89, v90))
    {
      *(_DWORD *)buf = v220;
      *(_QWORD *)&buf[4] = v74;
      v235 = 2048;
      v236 = v91;
      _os_log_impl(&dword_1B8270000, v89, v90, "Scope checked %ld dbos in %f seconds!", buf, 0x16u);
    }
    *__error() = v88;
    v92 = *((_QWORD *)this + 1);
    v93 = v223;
    if ((v81 & 1) != 0)
      *(double *)(v92 + 424) = *(double *)(v92 + 424) + v91;
    else
      *(double *)(v92 + 432) = *(double *)(v92 + 432) + v91;
    v94 = v233;
    v222 = v64;
    v221 = v74;
    if (v74)
    {
      v95 = v74;
      v76 = 0;
      v96 = &v232[v66];
      v97 = (char *)&v231[20 * v66];
      v98 = v93;
      v99 = v233;
      v227 = &v232[v66];
      v100 = v97;
      v101 = (uint64_t *)v229;
      do
      {
        v103 = *v98++;
        v102 = v103;
        if (v103 == 2)
        {
          _SIDeleteAttributes(*((_QWORD *)this + 3), *v101);
          v94 = v233;
        }
        else if (!v102)
        {
          if (v94)
            v94[v76] = *v99;
          if (v232)
            v227[v76] = *v96;
          if (v231)
          {
            v104 = &v97[80 * v76];
            *(_OWORD *)v104 = *(_OWORD *)v100;
            v105 = *((_OWORD *)v100 + 1);
            v106 = *((_OWORD *)v100 + 2);
            v107 = *((_OWORD *)v100 + 4);
            *((_OWORD *)v104 + 3) = *((_OWORD *)v100 + 3);
            *((_OWORD *)v104 + 4) = v107;
            *((_OWORD *)v104 + 1) = v105;
            *((_OWORD *)v104 + 2) = v106;
          }
          *(_QWORD *)(v229 + 8 * v76++) = *v101;
        }
        ++v101;
        v100 += 80;
        ++v96;
        ++v99;
        --v95;
      }
      while (v95);
    }
    else
    {
      v76 = 0;
    }
    free(v223);
    v108 = *__error();
    v109 = _SILogForLogForCategory(1);
    v110 = 2 * (dword_1EF19FC90 < 4);
    if (os_log_type_enabled(v109, v110))
    {
      *(_DWORD *)buf = v219;
      *(_QWORD *)&buf[4] = v76;
      _os_log_impl(&dword_1B8270000, v109, v110, "Permission for %ld items!", buf, 0xCu);
    }
    *__error() = v108;
    a2 = v226;
    v64 = v222;
    v74 = v221;
LABEL_142:
    if (*((_BYTE *)this + 644) && !v76)
    {
      v198 = *(unsigned int *)(v224 + 304);
      v199 = v230;
      if (v74 == v198)
        *(_DWORD *)(v224 + 304) = 4 * v198;
      v111 = *((_QWORD *)this + 76) + v74;
      *((_QWORD *)this + 76) = v111;
      if (!v199)
        return *v225 > v111;
      return 1;
    }
    v111 = *((_QWORD *)this + 76) + v74;
    *((_QWORD *)this + 76) = v111;
    if (!v76)
    {
      if (!v230)
        return *v225 > v111;
      return 1;
    }
    v112 = *((_QWORD *)this + 13);
    if (*(_BYTE *)(v112 + 96))
      return 0;
    do
    {
      v113 = v112;
      v112 = *(_QWORD *)(v112 + 80);
    }
    while (v112);
    if (*(_BYTE *)(*(_QWORD *)(v113 + 8) + 12))
      return 0;
    v114 = *((_QWORD *)a2 + 29);
    v115 = CFAbsoluteTimeGetCurrent();
    v116 = *((_QWORD *)this + 83);
    if (v116)
      v117 = (_WORD *)(v116 + 2 * v66);
    else
      v117 = 0;
    v118 = *((_QWORD *)this + 117);
    if (v118)
      v119 = v118 + 80 * v66;
    else
      v119 = 0;
    v120 = *((_QWORD *)this + 118);
    if (v120)
      v121 = (int *)(v120 + 5 * v66);
    else
      v121 = 0;
    v122 = *((_QWORD *)this + 119);
    if (v122)
      v123 = (unsigned int *)(v122 + 16 * v66);
    else
      v123 = 0;
    if (*((_BYTE *)this + 641) || *(_QWORD *)(*((_QWORD *)this + 105) + 16) || *((_DWORD *)this + 40) == 3)
    {
      v124 = 1;
    }
    else if (v114)
    {
      v124 = *(_BYTE *)(*((_QWORD *)this + 13) + 99) != 0;
    }
    else
    {
      v124 = 0;
    }
    if (!*((_BYTE *)this + 640) || ((v125 = *((_QWORD *)this + 79)) == 0 ? (v126 = 1) : (v126 = v124), (v126 & 1) != 0))
    {
      v127 = *((_QWORD *)this + 77) + 8 * v66;
      if (v124)
      {
        v128 = *((_QWORD *)this + 79);
        if (v128)
          v129 = (_BYTE *)(v128 + v66);
        else
          v129 = 0;
        readSDBForOids(this, v127, (uint64_t)v117, v119, v121, v123, v76, v129, a2, 0, 0);
        goto LABEL_190;
      }
      v130 = this;
      v131 = (uint64_t)v117;
      v132 = v119;
      v133 = v76;
LABEL_189:
      packOids((uint64_t)v130, v127, v131, v132, v133, a2, 0);
      goto LABEL_190;
    }
    if (v66 >= v76 + v66)
      goto LABEL_188;
    v134 = 0;
    v135 = 0;
    v136 = (_BYTE *)(v118 + 80 * v66 + 69);
    do
    {
      if (*(_BYTE *)(v125 + v66 + v134))
      {
        ++v135;
      }
      else if (v118)
      {
        if (*v136)
          v137 = *(v136 - 1) != 0;
        else
          v137 = *(_OWORD *)(v136 - 37) != 0;
        v135 += v137;
      }
      ++v134;
      v136 += 80;
    }
    while (v76 != v134);
    if (!v135)
    {
LABEL_188:
      v127 = *((_QWORD *)this + 77) + 8 * v66;
      v130 = this;
      v131 = (uint64_t)v117;
      v132 = v119;
      v133 = v76;
      a2 = v226;
      goto LABEL_189;
    }
    if (v76 == v135)
    {
      a2 = v226;
      readSDBForOids(this, *((_QWORD *)this + 77) + 8 * v66, (uint64_t)v117, v119, v121, v123, v76, (_BYTE *)(v125 + v66), v226, 0, 0);
      goto LABEL_190;
    }
    v223 = (unsigned __int8 *)(v76 - v135);
    if (v135 <= v76 - v135)
      v153 = v76 - v135;
    else
      v153 = v135;
    v233 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * v153, 0x6085D6BuLL);
    if (v233)
    {
      if (!v117)
        goto LABEL_235;
    }
    else
    {
      _log_fault_for_malloc_failure();
      if (!v117)
        goto LABEL_235;
    }
    v154 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 2 * v153, 0x6085D6BuLL);
    if (v154)
      goto LABEL_236;
    _log_fault_for_malloc_failure();
LABEL_235:
    v154 = 0;
LABEL_236:
    v232 = v154;
    v222 = v64;
    if (v119)
    {
      v155 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 80 * v153, 0x6085D6BuLL);
      if (!v155)
        _log_fault_for_malloc_failure();
    }
    else
    {
      v155 = 0;
    }
    if (v121)
    {
      v156 = (int *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 5 * v153, 0x6085D6BuLL);
      if (v156)
        goto LABEL_244;
      _log_fault_for_malloc_failure();
    }
    v156 = 0;
LABEL_244:
    v231 = v156;
    v227 = (char *)v153;
    if (v123)
    {
      v157 = (unsigned int *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 16 * v153, 0x6085D6BuLL);
      if (!v157)
        _log_fault_for_malloc_failure();
    }
    else
    {
      v157 = 0;
    }
    if (*((_QWORD *)this + 79))
    {
      v158 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, (size_t)v227, 0x6085D6BuLL);
      if (v158)
        goto LABEL_252;
      _log_fault_for_malloc_failure();
    }
    v158 = 0;
LABEL_252:
    v159 = *((_QWORD *)this + 13);
    v160 = v159;
    do
    {
      v161 = v160;
      v160 = *(_QWORD *)(v160 + 80);
    }
    while (v160);
    v162 = *(_DWORD *)(*(_QWORD *)(v161 + 8) + 80);
    v163 = *(_QWORD *)(v159 + 80);
    v227 = v158;
    v229 = v119;
    if (!v163)
      goto LABEL_259;
    v164 = 0;
    do
    {
      v164 ^= *(_DWORD *)(v159 + 104) == 0;
      v159 = v163;
      v163 = *(_QWORD *)(v163 + 80);
    }
    while (v163);
    if ((v164 & 1) != 0)
      v165 = 3553;
    else
LABEL_259:
      v165 = 2781;
    v166 = PartialQueryResults::start(v226, v162, v165, v76, 0);
    v167 = 0;
    v168 = 0;
    if (v76 <= 1)
      v169 = 1;
    else
      v169 = v76;
    v170 = (_BYTE *)(v229 + 69);
    v171 = v121;
    v172 = v123;
    v173 = v232;
    v174 = v233;
    v175 = v231;
    v176 = v227;
    do
    {
      if (!*(_BYTE *)(*((_QWORD *)this + 79) + v66 + v168))
      {
        if (!v155)
          goto LABEL_276;
        if (*v170)
        {
          if (!*(v170 - 1))
            goto LABEL_276;
        }
        else if (*(_OWORD *)(v170 - 37) == 0)
        {
          goto LABEL_276;
        }
      }
      if (v173)
        *(_WORD *)&v173[2 * v167] = v117[v168];
      if (v155)
      {
        v177 = &v155[80 * v167];
        *(_OWORD *)v177 = *(_OWORD *)(v170 - 69);
        v178 = *(_OWORD *)(v170 - 53);
        v179 = *(_OWORD *)(v170 - 37);
        v180 = *(_OWORD *)(v170 - 5);
        *((_OWORD *)v177 + 3) = *(_OWORD *)(v170 - 21);
        *((_OWORD *)v177 + 4) = v180;
        *((_OWORD *)v177 + 1) = v178;
        *((_OWORD *)v177 + 2) = v179;
      }
      if (v175)
      {
        v181 = *v171;
        v182 = (char *)v175 + 5 * v167;
        v182[4] = *((_BYTE *)v171 + 4);
        *(_DWORD *)v182 = v181;
      }
      if (v157)
        *(_OWORD *)&v157[4 * v167] = *(_OWORD *)v172;
      if (v176)
        v176[v167] = *(_BYTE *)(*((_QWORD *)this + 79) + v66 + v168);
      v174[v167++] = *(_QWORD *)(*((_QWORD *)this + 77) + 8 * v66 + 8 * v168);
LABEL_276:
      ++v168;
      v172 += 4;
      v171 = (int *)((char *)v171 + 5);
      v170 += 80;
    }
    while (v169 != v168);
    v221 = v166;
    readSDBForOids(this, (uint64_t)v233, (uint64_t)v232, (uint64_t)v155, v175, v157, v135, v176, v226, v166, 0);
    v184 = v231;
    v183 = v232;
    v185 = v233;
    v186 = 0;
    v187 = (__int128 *)(v229 + 32);
    v188 = (unint64_t)v223;
    do
    {
      if (!*(_BYTE *)(*((_QWORD *)this + 79) + v66) && (!v155 || *v187 == 0))
      {
        if (v183)
          v183[v186] = *v117;
        if (v155)
        {
          v189 = &v155[80 * v186];
          *(_OWORD *)v189 = *(v187 - 2);
          v190 = *(v187 - 1);
          v191 = *v187;
          v192 = v187[2];
          *((_OWORD *)v189 + 3) = v187[1];
          *((_OWORD *)v189 + 4) = v192;
          *((_OWORD *)v189 + 1) = v190;
          *((_OWORD *)v189 + 2) = v191;
        }
        if (v184)
        {
          v193 = *v121;
          v194 = (char *)v184 + 5 * v186;
          v194[4] = *((_BYTE *)v121 + 4);
          *(_DWORD *)v194 = v193;
        }
        if (v157)
          *(_OWORD *)&v157[4 * v186] = *(_OWORD *)v123;
        v185[v186++] = *(_QWORD *)(*((_QWORD *)this + 77) + 8 * v66);
      }
      v123 += 4;
      v121 = (int *)((char *)v121 + 5);
      v187 += 5;
      ++v117;
      ++v66;
      --v169;
    }
    while (v169);
    a2 = v226;
    packOids((uint64_t)this, (uint64_t)v185, (uint64_t)v183, (uint64_t)v155, v188, v226, v221);
    if (*((_QWORD *)a2 + 186))
    {
      _MDPlistBytesEndArray();
      _MDPlistBytesEndPlist();
    }
    if (*((_QWORD *)a2 + 58))
    {
      _MDStoreOIDArrayEndBulkAdd();
      _MDStoreOIDArrayEndSequence();
      *((_QWORD *)a2 + 443) = 0;
    }
    free(v233);
    free(v232);
    free(v155);
    free(v231);
    free(v157);
    free(v227);
    v64 = v222;
LABEL_190:
    *(double *)(*((_QWORD *)this + 1) + 416) = *(double *)(*((_QWORD *)this + 1) + 416)
                                               + CFAbsoluteTimeGetCurrent()
                                               - v115;
    *((_BYTE *)this + 644) = 0;
    v138 = *((_DWORD *)this + 40);
    switch(v138)
    {
      case 3:
LABEL_193:
        if ((*((_BYTE *)this + 40) & 0x80) == 0
          || (v139 = atomic_load((unint64_t *)this + 68), v139 < *((_QWORD *)this + 22))
          || (v140 = atomic_load((unint64_t *)this + 68), v140 < *(_QWORD *)(*((_QWORD *)this + 1) + 216)))
        {
          if (dword_1EF19FC90 >= 5)
          {
            v141 = *__error();
            v142 = _SILogForLogForCategory(1);
            if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
            {
              if (v230 || (v143 = "false", *((_QWORD *)this + 75) > *((_QWORD *)this + 76)))
                v143 = "true";
              *(_DWORD *)buf = v218;
              *(_QWORD *)&buf[4] = v143;
              _os_log_impl(&dword_1B8270000, v142, OS_LOG_TYPE_DEFAULT, "Not enough data yet. More to collect: %s", buf, 0xCu);
            }
            *__error() = v141;
          }
          goto LABEL_211;
        }
        return 0;
      case 2:
        v144 = atomic_load((unint64_t *)this + 68);
        if (v144 < *((_QWORD *)this + 22))
          goto LABEL_211;
        v145 = atomic_load((unint64_t *)this + 68);
        if (v145 < *(_QWORD *)(*((_QWORD *)this + 1) + 216) || *((_DWORD *)this + 208) >= 2u)
          goto LABEL_211;
        return 0xFFFFFFFFLL;
      case 1:
        goto LABEL_193;
    }
    if (*((_QWORD *)this + 22))
    {
      v146 = atomic_load((unint64_t *)this + 68);
      if (v146 >= *((_QWORD *)this + 22))
      {
        v147 = atomic_load((unint64_t *)this + 68);
        if (v147 >= *(_QWORD *)(*((_QWORD *)this + 1) + 216))
          *((_BYTE *)this + 96) = 1;
      }
    }
LABEL_211:
    v148 = *((_QWORD *)this + 13);
    if (*(_BYTE *)(v148 + 96))
      goto LABEL_307;
    do
    {
      v149 = v148;
      v148 = *(_QWORD *)(v148 + 80);
    }
    while (v148);
    if (*(_BYTE *)(*(_QWORD *)(v149 + 8) + 12) || 3 * v76 >= 2 * v64 || (v64 -= v76 >> 1) == 0)
    {
LABEL_307:
      v152 = v230;
      break;
    }
    v150 = CFAbsoluteTimeGetCurrent();
    v151 = v228;
    if (v61 <= v150)
      v151 = 1;
    v152 = v230;
    if ((v151 & 1) != 0)
      break;
    if (*((_BYTE *)this + 96))
      break;
    v63 = 1;
    if (!v230)
    {
      v63 = 0;
      if (*((_QWORD *)this + 75) <= *((_QWORD *)this + 76))
        break;
    }
  }
  if (dword_1EF19FC90 >= 5)
  {
    v214 = *__error();
    v215 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
    {
      v216 = PartialQueryResults::totalcount(a2);
      *(_DWORD *)buf = v220;
      *(_QWORD *)&buf[4] = this;
      v235 = 2048;
      v236 = *(double *)&v216;
      _os_log_impl(&dword_1B8270000, v215, OS_LOG_TYPE_DEFAULT, "%p found %ld results\n", buf, 0x16u);
    }
    *__error() = v214;
    if (!v152)
      return *((_QWORD *)this + 75) > *((_QWORD *)this + 76);
    return 1;
  }
  if (v152)
    return 1;
  return *((_QWORD *)this + 75) > *((_QWORD *)this + 76);
}

BOOL PartialQueryResults::__needsWhatFieldsMatched(PartialQueryResults *this)
{
  uint64_t v2;
  CFIndex *v3;
  char **v4;
  const __CFArray *v5;
  char **v6;
  BOOL v7;
  const __CFArray *v8;
  CFIndex v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  const char *v13;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFIndex v24;
  size_t v25;

  v3 = (CFIndex *)((char *)this + 232);
  v2 = *((_QWORD *)this + 29);
  if (*(_BYTE *)this)
  {
    if (!v2)
      return 0;
    v4 = (char **)((char *)this + 104);
    if (!*((_QWORD *)this + 13))
    {
      v5 = (const __CFArray *)*((_QWORD *)this + 16);
      if (v5)
      {
        v25 = 0;
        SIFlattenArrayToCStringVector(v5, v4, &v25, &v24);
      }
    }
  }
  else
  {
    v6 = (char **)((char *)this + 96);
    if (v2)
      v7 = *((_QWORD *)this + 12) == 0;
    else
      v7 = 0;
    if (v7)
    {
      v8 = (const __CFArray *)*((_QWORD *)this + 15);
      if (v8)
      {
        SIFlattenArrayToCStringVector(v8, v6, (size_t *)this + 30, v3);
        if (!*((_QWORD *)this + 12))
        {
          v15 = __si_assert_copy_extra_268();
          __message_assert_272((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22, (char)"SISearchCtx.h");
          free(v15);
          if (__valid_fs(-1))
            v23 = 2989;
          else
            v23 = 3072;
          *(_DWORD *)v23 = -559038737;
          abort();
        }
      }
    }
  }
  v9 = *v3;
  if (*v3 < 1)
    return 0;
  v10 = 0;
  v11 = 1;
  v12 = *((_QWORD *)this + 12);
  do
  {
    v13 = *(const char **)(v12 + 8 * v10);
    if (!strcmp("kMDQueryResultMatchedDisplayNameField", v13))
      break;
    if (!strcmp("kMDQueryResultMatchedFields", v13))
      break;
    if (!strcmp("kMDQueryResultContentRelevance", v13))
      break;
    if (!strcmp("kMDQueryResultGroupId", v13))
      break;
    if (!strcmp("kMDQueryResultTopMatchedField", v13))
      break;
    if (!strcmp("kMDQueryResultTextContentDistances", v13))
      break;
    if (!strcmp("kMDQueryResultHasTextContentMatch", v13))
      break;
    v11 = v9 > ++v10;
  }
  while (v9 != v10);
  return v11;
}

void SIFlattenArrayToCStringVector(const __CFArray *a1, char **a2, size_t *a3, CFIndex *a4)
{
  CFIndex Count;
  char *v8;
  size_t v9;
  uint64_t *v10;
  CFIndex v11;
  uint64_t v12;
  char *v13;
  const __CFString *ValueAtIndex;
  CFIndex Length;
  CFIndex v16;
  size_t v17;
  size_t v18;
  char *v19;
  size_t v20;
  size_t *v21;
  char *v22;
  CFIndex v23;
  uint64_t v24;
  uint64_t v25;
  char **v26;
  CFIndex *v27;
  char *v28;
  size_t *v29;
  uint64_t v30;

  v29 = a3;
  v30 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(a1);
  v8 = *a2;
  v9 = 8 * Count;
  MEMORY[0x1E0C80A78](Count);
  v10 = (uint64_t *)((char *)&v25 - ((8 * Count + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  if (Count < 1)
  {
    if (!v8)
      return;
    goto LABEL_17;
  }
  v26 = a2;
  v27 = a4;
  v11 = 0;
  v12 = 0;
  v28 = v8;
  v13 = &v8[8 * Count];
  do
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v11);
    Length = CFStringGetLength(ValueAtIndex);
    v16 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v17 = *v29;
    if ((uint64_t)*v29 < (uint64_t)(v16 + v9))
    {
      v19 = v28;
      do
      {
        if (v17)
          v20 = 2 * v17;
        else
          v20 = 4096;
        v21 = v29;
        *v29 = v20;
        v19 = (char *)malloc_type_realloc(v19, v20, 0x54B90296uLL);
        v17 = *v21;
      }
      while ((uint64_t)*v21 < (uint64_t)(v16 + v9));
      v28 = v19;
      v13 = &v19[8 * Count];
    }
    v10[v11] = v12;
    CFStringGetCString(ValueAtIndex, &v13[v12], v16, 0x8000100u);
    v18 = strlen(&v13[v12]);
    v12 += v18 + 1;
    v9 += v18 + 1;
    ++v11;
  }
  while (v11 != Count);
  a2 = v26;
  a4 = v27;
  v8 = v28;
  if (v28)
  {
    v22 = v28;
    v23 = Count;
    do
    {
      v24 = *v10++;
      *(_QWORD *)v22 = &v13[v24];
      v22 += 8;
      --v23;
    }
    while (v23);
LABEL_17:
    *a2 = v8;
    *a4 = Count;
  }
}

BOOL setDatastoreAttributes(uint64_t a1, uint64_t a2, const __CFDictionary *a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned __int8 a7, char a8)
{
  int v16;
  uint64_t v17;
  __int128 context;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (db_corespotlight_store(a1) | ((unsigned __int16)(a4 & 0x200) >> 9))
      v16 = 512;
    else
      v16 = 0;
    if (a5)
      v17 = a5;
    else
      v17 = gDefaultSchema;
    if (v17)
    {
      context = xmmword_1E6E2CA98;
      v20 = 0;
      _MDPlistContainerGetPlistObjectAtKeyArray();
    }
    v23 = a6;
    *(_QWORD *)&context = a1;
    *((_QWORD *)&context + 1) = a2;
    v20 = __PAIR64__(v16, a4);
    v21 = 0uLL;
    v22 = 0;
    v24 = a7;
    BYTE1(v24) = a8;
    CFDictionaryApplyFunction(a3, (CFDictionaryApplierFunction)setAttributeApplier, &context);
  }
  return a3 != 0;
}

void setAttributeApplier(CFStringRef theString, void *a2, uint64_t a3)
{
  __int128 *v6;
  unsigned int v7;
  int HasPrefix;
  CFAllocatorRef *v9;
  const __CFAllocator *v10;
  CFStringRef v11;
  int FlagsFromAttributes;
  CFTypeID v13;
  const __CFArray *v14;
  const __CFDictionary *v15;
  void *value;
  __int128 v17;
  uint64_t v18;
  void *values;
  CFRange v20;

  values = a2;
  v6 = (__int128 *)(a3 + 24);
  v7 = *(_DWORD *)(a3 + 20);
  if (!*(_QWORD *)(a3 + 24))
    goto LABEL_10;
  HasPrefix = CFStringHasPrefix(theString, CFSTR(":EA:"));
  v9 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (HasPrefix || CFStringHasPrefix(theString, CFSTR(":PR:")))
  {
    v10 = *v9;
    v20.length = CFStringGetLength(theString) - 4;
    v20.location = 4;
    v11 = CFStringCreateWithSubstring(v10, theString, v20);
    if (*(_QWORD *)v6)
    {
      v17 = *v6;
      v18 = *((_QWORD *)v6 + 2);
      FlagsFromAttributes = getFlagsFromAttributes((uint64_t)&v17);
    }
    else
    {
      FlagsFromAttributes = 0;
    }
    CFRelease(v11);
  }
  else
  {
    value = 0;
    v15 = *(const __CFDictionary **)(a3 + 48);
    if (v15 && CFDictionaryGetValueIfPresent(v15, theString, (const void **)&value))
    {
      FlagsFromAttributes = (int)value;
    }
    else if (*(_QWORD *)v6)
    {
      v17 = *v6;
      v18 = *((_QWORD *)v6 + 2);
      FlagsFromAttributes = getFlagsFromAttributes((uint64_t)&v17);
    }
    else
    {
      FlagsFromAttributes = 0;
    }
  }
  v7 |= FlagsFromAttributes;
  if ((v7 & 0x20) != 0 && (v13 = CFGetTypeID(a2), v13 != CFArrayGetTypeID()))
  {
    v14 = CFArrayCreate(*v9, (const void **)&values, 1, 0);
    setOneFieldLocked(theString, 0, v14, *(int **)a3, *(uint64_t **)(a3 + 8), v7, *(unsigned __int8 *)(a3 + 56), *(unsigned __int8 *)(a3 + 57));
    CFRelease(v14);
  }
  else
  {
LABEL_10:
    setOneFieldLocked(theString, 0, (const __CFArray *)a2, *(int **)a3, *(uint64_t **)(a3 + 8), v7, *(unsigned __int8 *)(a3 + 56), *(unsigned __int8 *)(a3 + 57));
  }
}

void setOneFieldLocked(const __CFString *a1, char *a2, const __CFArray *a3, int *a4, uint64_t *a5, unsigned int a6, int a7, int a8)
{
  unsigned int v8;
  uint64_t v12;
  int v13;
  __CFArray **v14;
  int v15;
  int v16;
  char v17;
  CFNumberRef v18;
  char v19;
  int v20;
  char v21;
  char v22;
  unsigned int v23;
  CFTypeID v24;
  int v25;
  CFIndex Count;
  uint64_t v27;
  const void *ValueAtIndex;
  _BYTE *v29;
  char v30;
  size_t v31;
  const __CFArray *v32;
  CFIndex i;
  const void *v34;
  int v35;
  CFTypeID TypeID;
  char v37;
  int *v38;
  unsigned int v39;
  __n128 v40;
  void *v41;
  __CFArray *MutableCopy;
  __CFArray **v43;
  const __CFAllocator *v44;
  const __CFArray *v45;
  CFDictionaryRef v46;
  CFTypeID v47;
  CFTypeID v48;
  CFIndex v49;
  const __CFAllocator *v50;
  CFDictionaryRef v51;
  CFTypeID v52;
  CFTypeID v53;
  const __CFArray *v54;
  CFTypeID v55;
  CFIndex v56;
  CFMutableArrayRef Mutable;
  unsigned int v58;
  __n128 v59;
  const __CFArray *v60;
  CFDictionaryRef v61;
  CFIndex j;
  CFIndex v63;
  const __CFArray *v64;
  __CFArray **v65;
  const void *v66;
  const void *v67;
  CFTypeID v68;
  CFTypeID v69;
  CFNumberRef v70;
  CFIndex v71;
  int *v72;
  const void *v73;
  unsigned int v74;
  CFIndex v75;
  unint64_t v76;
  const void **v77;
  int v78;
  CFAllocatorRef v79;
  const void **v80;
  const __CFString *v81;
  char *v82;
  BOOL v83;
  int v84;
  int v85;
  uint64_t v86;
  const __CFString *v87;
  char *v88;
  __n128 v89;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  NSObject *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  const char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  NSObject *v116;
  int v117;
  char *v118;
  char *v119;
  const char *v120;
  char v121[240];
  __int128 v122;
  __CFArray *v123;
  int *v124;
  __CFArray **v125;
  char *v126;
  CFIndex *v127;
  _WORD *v128;
  CFArrayRef v129;
  uint64_t *v130;
  int *v131;
  CFAllocatorRef v132;
  int v133;
  int v134;
  __int16 v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  unsigned int v139;
  const __CFData *v140;
  _BYTE v141[24];
  char v142[1024];
  int v143;
  _WORD v144[2];
  const void *v145[128];
  _BYTE valuePtr[12];
  __int16 v147;
  int v148;
  __int16 v149;
  int v150;
  uint64_t v151;
  CFRange v152;
  CFRange v153;
  CFRange v154;

  LODWORD(v128) = a8;
  LODWORD(v127) = a7;
  v8 = a6;
  v129 = a3;
  v130 = a5;
  v151 = *MEMORY[0x1E0C80C00];
  v139 = a6;
  if (dword_1EF19FC9C >= 5)
  {
    v93 = *__error();
    v94 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v141 = 138412546;
      *(_QWORD *)&v141[4] = a1;
      *(_WORD *)&v141[12] = 2112;
      *(_QWORD *)&v141[14] = v129;
      _os_log_impl(&dword_1B8270000, v94, OS_LOG_TYPE_DEFAULT, "Trying to store %@ = %@", v141, 0x16u);
    }
    *__error() = v93;
  }
  v138 = 0;
  v12 = db_corespotlight_store((uint64_t)a4);
  v13 = v12;
  if ((v8 & 0x800) != 0 && (_DWORD)v12)
  {
    v95 = __si_assert_copy_extra_268();
    v103 = v95;
    v104 = "";
    if (v95)
      v104 = v95;
    *(_QWORD *)&v122 = "((flags & DB_FIELD_EXTENDED_ATTR) && isCoreSpotlight) == 0";
    *((_QWORD *)&v122 + 1) = v104;
LABEL_206:
    __message_assert_272((uint64_t)v95, v96, v97, v98, v99, v100, v101, v102, (char)"SIIndexInternals.cpp");
    free(v103);
    if (__valid_fs(-1))
      v114 = 2989;
    else
      v114 = 3072;
    *(_DWORD *)v114 = -559038737;
    abort();
  }
  v14 = &v123;
  v137 = 0;
  MEMORY[0x1E0C80A78](v12);
  v122 = 0u;
  memset(v121, 0, sizeof(v121));
  if (!a2)
    a2 = fasterUTF8String(a1, &v137, v121, 256, &v138);
  v15 = *a2;
  v126 = a2;
  if (v15 == 58)
  {
    v125 = &v123;
    LODWORD(v131) = 0;
    LODWORD(v132) = 0;
    while (!strncmp(a2, ":EA:", 4uLL))
    {
      a2 += 4;
      if (v13)
        goto LABEL_16;
      v8 |= 0x800u;
LABEL_19:
      v139 = v8;
LABEL_20:
      if (*a2 != 58)
      {
LABEL_21:
        v16 = v8 & 0x800;
        v14 = v125;
        goto LABEL_23;
      }
    }
    if (strncmp(a2, ":PR:", 4uLL))
    {
      if (!strncmp(a2, ":A:", 3uLL))
      {
        a2 += 3;
        LODWORD(v131) = 1;
      }
      else
      {
        if (strncmp(a2, ":INC:", 5uLL))
          goto LABEL_21;
        a2 += 5;
        LODWORD(v132) = 1;
      }
      goto LABEL_20;
    }
    a2 += 4;
    if (!v13)
    {
      v8 |= 0x804u;
      goto LABEL_19;
    }
LABEL_16:
    v8 &= ~0x200u;
    goto LABEL_19;
  }
  LODWORD(v132) = 0;
  LODWORD(v131) = 0;
  v16 = v8 & 0x800;
LABEL_23:
  v83 = v16 == 0;
  v17 = v13 ^ 1;
  if (v83)
    v17 = 1;
  v18 = v129;
  if ((v17 & 1) == 0)
    goto LABEL_201;
  if (strncmp(a2, "_kMD", 4uLL))
    goto LABEL_28;
  if (!strcmp(a2, "_kMDItemExternalID"))
  {
    v8 = 8968;
LABEL_64:
    v139 = v8;
    goto LABEL_65;
  }
  if (!strcmp(a2, "_kMDItemBundleID"))
  {
    v8 = 17176;
    goto LABEL_64;
  }
  if (!strcmp(a2, "_kMDItemOwnerUserID"))
  {
    v8 = 776;
    goto LABEL_64;
  }
  if (!strcmp(a2, "_kMDItemRelatedObjects") || !strcmp(a2, "_kMDItemRelatedObjectsWithBundle"))
  {
    v20 = 0;
    v8 = 8480;
LABEL_136:
    v139 = v8;
    goto LABEL_88;
  }
  if (!strcmp(a2, "_kMDItemRankingLaunchStrings")
    || !strcmp(a2, "_kMDItemActivityLaunchDates")
    || !strcmp(a2, "_kMDItemRankingLaunchDates"))
  {
    v20 = 0;
    v8 = 32;
    goto LABEL_136;
  }
  if (!strcmp(a2, "_kMDItemOutgoingCounts")
    || !strcmp(a2, "_kMDItemIncomingCounts")
    || !strcmp(a2, "_kMDItemOutgoingMailCounts")
    || !strcmp(a2, "_kMDItemIncomingMailCounts")
    || !strcmp(a2, "_kMDItemOutgoingSMSCounts")
    || !strcmp(a2, "_kMDItemIncomingSMSCounts")
    || !strcmp(a2, "_kMDItemOutgoingCalendarCounts")
    || !strcmp(a2, "_kMDItemIncomingCalendarCounts")
    || !strcmp(a2, "_kMDItemOutgoingFileProviderCounts")
    || !strcmp(a2, "_kMDItemIncomingFileProviderCounts")
    || !strcmp(a2, "_kMDItemIncomingVideoCallDates")
    || !strcmp(a2, "_kMDItemOutgoingVideoCallDates")
    || !strcmp(a2, "_kMDItemIncomingAudioCallDates")
    || !strcmp(a2, "_kMDItemOutgoingAudioCallDates"))
  {
    v20 = 0;
    v8 = 288;
    goto LABEL_136;
  }
  if (!strcmp(a2, "_kMDItemLaunchString"))
  {
    v20 = 0;
    v8 = 256;
    v139 = 256;
    v18 = v129;
    goto LABEL_88;
  }
  if (strcmp(a2, "_kMDItemPrimaryTextEmbedding")
    && strcmp(a2, "_kMDItemSecondaryTextEmbedding")
    && strcmp(a2, "_kMDItemPhotoEmbedding"))
  {
    v8 |= 0x108u;
    v139 = v8;
  }
  v18 = v129;
LABEL_28:
  v19 = v13 ^ 1;
  if ((v8 & 0x800) == 0)
    v19 = 1;
  if ((v19 & 1) == 0)
    goto LABEL_201;
LABEL_65:
  if ((v8 & 0x200) != 0)
    v21 = v13 ^ 1;
  else
    v21 = 1;
  if ((v21 & 1) == 0
    && (!strncmp(a2, "kMDItemLastUsedDate", 0x13uLL)
     || !strcmp(a2, "kMDItemLastUsedDate_Ranking")
     || !strcmp(a2, "_kMDItemShortcutLastUsedDate")
     || !strcmp(a2, "kMDItemUsedDates")
     || !strcmp(a2, "_kMDItemRecentSpotlightEngagementDates")
     || !strcmp(a2, "_kMDItemRecentSpotlightEngagementQueries")
     || !strcmp(a2, "_kMDItemRecentSpotlightEngagementRenderPositions")
     || !strcmp(a2, "_kMDItemRecentSpotlightEngagementDatesNonUnique")
     || !strcmp(a2, "_kMDItemRecentSpotlightEngagementQueriesNonUnique")
     || !strcmp(a2, "_kMDItemRecentSpotlightEngagementRenderPositionsNonUnique")
     || !strcmp(a2, "_kMDItemRecentAppSearchEngagementDates")
     || !strcmp(a2, "_kMDItemRecentAppSearchEngagementQueries")
     || !strcmp(a2, "_kMDItemRecentAppSearchEngagementRenderPositions")
     || !strcmp(a2, "_kMDItemRecentOutOfSpotlightEngagementDates")))
  {
    v8 &= ~0x200u;
    v139 = v8;
  }
  v20 = v8 & 0x800;
  if ((v8 & 0x800) != 0)
    v22 = v13 ^ 1;
  else
    v22 = 1;
  if ((v22 & 1) == 0)
  {
    v95 = __si_assert_copy_extra_268();
    v103 = v95;
    goto LABEL_206;
  }
LABEL_88:
  v23 = v127 | v128 | v13;
  if (!v18 || CFEqual(v18, (CFTypeRef)*MEMORY[0x1E0C9B0D0]))
  {
    db_delete_field_weak(a4, v130, a2, v23);
    goto LABEL_91;
  }
  v124 = a4;
  v24 = CFGetTypeID(v18);
  if (v24 != CFArrayGetTypeID())
  {
    if ((v132 & 1) != 0)
    {
      TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(v18))
      {
        *(_QWORD *)v141 = 0;
        v145[0] = 0;
        *(_QWORD *)valuePtr = 0;
        CFNumberGetValue(v129, kCFNumberLongLongType, valuePtr);
        if (!db_get_field(v124, *v130, a2, (unint64_t *)v145, v141) && *(_WORD *)v145[0] == 7)
          *(_QWORD *)valuePtr += **(_QWORD **)v141;
        v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongLongType, valuePtr);
        v20 = v139 & 0x800;
      }
    }
    v37 = v13 ^ 1;
    if (!v20)
      v37 = 1;
    if ((v37 & 1) != 0)
    {
      bzero(&v141[8], 0x418uLL);
      *(_QWORD *)v141 = &off_1E6E2A098;
      *(_QWORD *)&v141[8] = fastFieldFromCFType((const __CFString *)v18, 0, &v143, v144, (CFIndex *)&v141[16], v142);
      v38 = v124;
      if (*(_QWORD *)&v141[8])
      {
        v39 = computeFlags(a2, (int *)&v139, v13, (char)v127, (char)v128);
        db_add_field(v38, (_DWORD **)v130, v39, a2, 0, v139 | v144[0], v143, *(unsigned __int8 **)&v141[8], v40, *(int *)&v141[16]);
      }
      if (v18 != v129)
        CFRelease(v18);
      *(_QWORD *)v141 = &off_1E6E2A338;
      v41 = *(void **)&v141[8];
      if (*(char **)&v141[8] != v142)
      {
LABEL_134:
        free(v41);
        goto LABEL_91;
      }
      goto LABEL_91;
    }
LABEL_201:
    v105 = __si_assert_copy_extra_268();
    __message_assert_272((uint64_t)v105, v106, v107, v108, v109, v110, v111, v112, (char)"SIIndexInternals.cpp");
    free(v105);
    if (__valid_fs(-1))
      goto LABEL_202;
    v113 = 3072;
    goto LABEL_204;
  }
  v25 = _os_feature_enabled_impl();
  if ((~v8 & 0x5020) == 0 && v25)
  {
    Count = CFArrayGetCount(v18);
    if (!Count)
      goto LABEL_91;
    v27 = Count;
    ValueAtIndex = CFArrayGetValueAtIndex(v18, 0);
    *(_QWORD *)v141 = 0;
    v145[0] = (const void *)4096;
    v29 = malloc_type_malloc(0x1000uLL, 0x93323CFBuLL);
    *(_QWORD *)valuePtr = v29;
    v136 = 0;
    v140 = 0;
    v135 = 0;
    if (isVectorDictionary(ValueAtIndex, (_DWORD *)&v136 + 1, &v136, &v135, (const void **)&v140))
    {
      v30 = BYTE4(v136);
      v31 = -1;
      if (SHIDWORD(v136) <= 2 && (int)v136 <= 2)
        v31 = (vector_dimension_vec_sizes_10743[HIDWORD(v136)]
                           * vector_size_elem_sizes_10742[v136]);
      *(_QWORD *)v141 = 4;
      *v29 = v136;
      v29[1] = v30;
      *((_WORD *)v29 + 1) = v135;
      appendVector(v31, (unint64_t *)v141, (char **)valuePtr, (unint64_t *)v145, v140);
      v133 = 0;
      v134 = 0;
      v139 = v8 | 0x5030;
      v32 = v129;
      if (v27 >= 2)
      {
        for (i = 1; i != v27; ++i)
        {
          v34 = CFArrayGetValueAtIndex(v32, i);
          if (isVectorDictionary(v34, &v134, &v133, &v135, (const void **)&v140))
            appendVector(v31, (unint64_t *)v141, (char **)valuePtr, (unint64_t *)v145, v140);
        }
      }
      v29 = *(_BYTE **)valuePtr;
      v35 = *(_DWORD *)v141;
    }
    else
    {
      v35 = 0;
    }
    v58 = computeFlags(a2, (int *)&v139, v13, (char)v127, (char)v128);
    db_add_field(v124, (_DWORD **)v130, v58, a2, 0, v139, 14, v29, v59, v35);
    v41 = *(void **)valuePtr;
    goto LABEL_134;
  }
  if ((v131 & 1) != 0)
  {
    *(_QWORD *)v141 = 0;
    v145[0] = 0;
    MutableCopy = v18;
    if (!db_get_field(v124, *v130, a2, (unint64_t *)v145, v141))
    {
      v43 = v14;
      v44 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v45 = v18;
      v46 = _decodeSDBField((unint64_t)v124, (unsigned __int16 *)v145[0], *(unsigned __int8 **)v141, 0, 0, 0, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      v47 = CFGetTypeID(v46);
      v48 = CFArrayGetTypeID();
      v49 = CFArrayGetCount(v45);
      if (v47 == v48)
      {
        MutableCopy = CFArrayCreateMutableCopy(v44, v49, v46);
      }
      else
      {
        MutableCopy = CFArrayCreateMutable(v44, v49 + 1, MEMORY[0x1E0C9B378]);
        CFArrayAppendValue(MutableCopy, v46);
      }
      v60 = v129;
      v154.length = CFArrayGetCount(v129);
      v154.location = 0;
      CFArrayAppendArray(MutableCopy, v60, v154);
      v61 = v46;
      v18 = v60;
      CFRelease(v61);
      v14 = v43;
    }
  }
  else
  {
    MutableCopy = v18;
    if ((v132 & 1) != 0)
    {
      *(_QWORD *)v141 = 0;
      v145[0] = 0;
      MutableCopy = v18;
      if (!db_get_field(v124, *v130, a2, (unint64_t *)v145, v141))
      {
        v50 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v51 = _decodeSDBField((unint64_t)v124, (unsigned __int16 *)v145[0], *(unsigned __int8 **)v141, 0, 0, 0, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
        v52 = CFGetTypeID(v51);
        v53 = CFArrayGetTypeID();
        v54 = v18;
        v55 = v53;
        v56 = CFArrayGetCount(v54);
        v132 = v50;
        if (v52 == v55)
          Mutable = CFArrayCreateMutableCopy(v50, v56, v51);
        else
          Mutable = CFArrayCreateMutable(v50, v56, MEMORY[0x1E0C9B378]);
        MutableCopy = Mutable;
        v131 = (int *)v51;
        for (j = 0; ; ++j)
        {
          v63 = CFArrayGetCount(MutableCopy);
          v64 = v129;
          if (j >= v63 || j >= CFArrayGetCount(v129))
            break;
          v65 = v14;
          v66 = CFArrayGetValueAtIndex(MutableCopy, j);
          v67 = CFArrayGetValueAtIndex(v64, j);
          v68 = CFGetTypeID(v66);
          if (v68 == CFNumberGetTypeID())
          {
            v69 = CFGetTypeID(v67);
            if (v69 == CFNumberGetTypeID())
            {
              *(_QWORD *)valuePtr = 0;
              v140 = 0;
              CFNumberGetValue((CFNumberRef)v66, kCFNumberSInt64Type, valuePtr);
              CFNumberGetValue((CFNumberRef)v67, kCFNumberSInt64Type, &v140);
              *(_QWORD *)valuePtr += v140;
              v70 = CFNumberCreate(v132, kCFNumberSInt64Type, valuePtr);
              CFArraySetValueAtIndex(MutableCopy, j, v70);
              CFRelease(v70);
            }
          }
          v14 = v65;
        }
        v71 = CFArrayGetCount(MutableCopy);
        v18 = v64;
        v72 = v131;
        while (v71 < CFArrayGetCount(v18))
        {
          v73 = CFArrayGetValueAtIndex(v18, v71);
          CFArraySetValueAtIndex(MutableCopy, v71++, v73);
        }
        CFRelease(v72);
      }
    }
  }
  if (db_delete_field_weak(v124, v130, a2, v23) != 1)
  {
    v74 = v139;
    v75 = CFArrayGetCount(MutableCopy);
    if (v75 >= 1)
    {
      v76 = v75;
      bzero(v145, 0x400uLL);
      v125 = v14;
      v123 = MutableCopy;
      v132 = (CFAllocatorRef)v76;
      if (v76 < 0x81)
      {
        v77 = v145;
        v153.location = 0;
        v153.length = v76;
        CFArrayGetValues(MutableCopy, v153, v145);
        if (v76 < 2)
        {
          v80 = v145;
          v78 = 0;
LABEL_172:
          v86 = 0;
          v140 = 0;
          v131 = &v143;
          v128 = v144;
          while (1)
          {
            bzero(v141, 0x420uLL);
            v87 = (const __CFString *)v80[v86];
            *(_QWORD *)&v141[8] = 0;
            *(_QWORD *)&v141[16] = 0;
            *(_QWORD *)v141 = &off_1E6E2A098;
            v88 = fastFieldFromCFType(v87, v78, v131, v128, (CFIndex *)&v141[16], v142);
            *(_QWORD *)&v141[8] = v88;
            if (v88)
            {
              v90 = (unsigned __int8 *)v88;
              v74 |= v144[0];
              if ((v74 & 0x100) == 0 && (*(_BYTE *)(*v130 + 40) & 2) != 0 && !strcmp(a2, "kMDItemAlternateNames"))
                v74 |= 0x100u;
              if (*v124 != 1685287992)
              {
                v115 = *__error();
                v116 = _SILogForLogForCategory(4);
                if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
                {
                  v117 = *v124;
                  *(_DWORD *)valuePtr = 136315650;
                  *(_QWORD *)&valuePtr[4] = "db_add_field_with_cache";
                  v147 = 1024;
                  v148 = 345;
                  v149 = 1024;
                  v150 = v117;
                  _os_log_error_impl(&dword_1B8270000, v116, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", valuePtr, 0x18u);
                }
                *__error() = v115;
                v118 = __si_assert_copy_extra_268();
                v119 = v118;
                if (v118)
                  v120 = v118;
                else
                  v120 = "";
                __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 345, v120);
                free(v119);
LABEL_202:
                v113 = 2989;
LABEL_204:
                *(_DWORD *)v113 = -559038737;
                abort();
              }
              if (v86)
                v91 = v74;
              else
                v91 = v74 | 0x20;
              if (v86)
                v92 = 2;
              else
                v92 = 1;
              db2_add_field_with_cache((unint64_t)v124, (_DWORD **)v130, v92, a2, 0, v91, v143, v90, v89, *(int *)&v141[16], &v140);
              v88 = *(char **)&v141[8];
              *(_QWORD *)v141 = &off_1E6E2A338;
              if (*(char **)&v141[8] == v142)
                goto LABEL_189;
            }
            else
            {
              *(_QWORD *)v141 = &off_1E6E2A338;
            }
            free(v88);
LABEL_189:
            if (v132 == (CFAllocatorRef)++v86)
            {
              MutableCopy = v123;
              if (v80 != v145)
                free(v80);
              v18 = v129;
              goto LABEL_193;
            }
          }
        }
      }
      else
      {
        v77 = (const void **)malloc_type_malloc(8 * v76, 0xC0040B8AA526DuLL);
        v152.location = 0;
        v152.length = v76;
        CFArrayGetValues(MutableCopy, v152, v77);
      }
      v78 = 0;
      v79 = 0;
      v131 = &v143;
      v127 = (CFIndex *)&v141[16];
      v128 = v144;
      do
      {
        bzero(v142, 0x408uLL);
        v80 = v77;
        v81 = (const __CFString *)v77[(_QWORD)v79];
        *(_QWORD *)&v141[8] = 0;
        *(_QWORD *)&v141[16] = 0;
        *(_QWORD *)v141 = &off_1E6E2A098;
        v82 = fastFieldFromCFType(v81, 0, v131, v128, v127, v142);
        v83 = v143 <= 10 || (v143 & 0xFFFFFFFD) == 12;
        v84 = !v83;
        if (v78 <= v143)
          v85 = v143;
        else
          v85 = v78;
        *(_QWORD *)v141 = &off_1E6E2A338;
        *(_QWORD *)&v141[8] = v82;
        if (v82 != v142)
          free(v82);
        if (v84)
          goto LABEL_172;
        v79 = (CFAllocatorRef)((char *)v79 + 1);
        v78 = v85;
        v77 = v80;
      }
      while (v132 != v79);
      v78 = v85;
      goto LABEL_172;
    }
  }
LABEL_193:
  if (MutableCopy != v18)
    CFRelease(MutableCopy);
LABEL_91:
  if (v138)
    free(v126);
}

uint64_t db_corespotlight_store(uint64_t a1)
{
  char *v2;
  char *v3;
  const char *v4;

  if (*(_DWORD *)a1 != 1685287992)
  {
    v2 = __si_assert_copy_extra_268();
    v3 = v2;
    if (v2)
      v4 = v2;
    else
      v4 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 464, v4);
    free(v3);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return (*(unsigned __int8 *)(a1 + 804) >> 2) & 1;
}

uint64_t getFlagsFromAttributes(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;
  char *v3;
  int CString;
  int v5;
  uint64_t result;
  int PlistObjectType;
  _BOOL4 v8;
  int v9;
  int v10;
  NSObject *v11;
  int v12;
  _BOOL4 v13;
  int v14;
  int v15;
  NSObject *v16;
  int v17;
  _BOOL4 v18;
  int v19;
  int v20;
  NSObject *v21;
  int v22;
  _BOOL4 v23;
  int v24;
  _BOOL4 v25;
  int v26;
  int v27;
  NSObject *v28;
  int v29;
  _BOOL4 v30;
  int v31;
  int v32;
  NSObject *v33;
  int *v34;
  unsigned int v35;
  int v36;
  int v37;
  NSObject *v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  const __CFString *v48;
  char buffer[4096];
  uint64_t v50;

  MEMORY[0x1E0C80A78](a1);
  v2 = v1;
  v50 = *MEMORY[0x1E0C80C00];
  v3 = buffer;
  bzero(buffer, 0x1000uLL);
  CString = CFStringGetCString(v2, buffer, 4096, 0x8000100u);
  if (!CString)
    v3 = 0;
  if (_os_feature_enabled_impl())
  {
    v5 = strcmp(v3, "kMDItemTextVector");
    if (v5)
      result = 0;
    else
      result = 20528;
    if (!v5 || !CString)
      return result;
  }
  else if (!CString)
  {
    return 0;
  }
  result = _MDPlistDictionaryGetPlistObjectForKey();
  if ((_DWORD)result)
  {
    if (_MDPlistDictionaryGetPlistObjectForKey())
    {
      PlistObjectType = _MDPlistGetPlistObjectType();
      if (PlistObjectType == 225)
      {
        v8 = _MDPlistBooleanGetValue() != 0;
      }
      else
      {
        v9 = PlistObjectType;
        v10 = *__error();
        v11 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v40 = "getFlagsFromAttributes";
          v41 = 1024;
          v42 = 134;
          v43 = 1024;
          v44 = v9;
          v45 = 2080;
          v46 = "uniqued";
          _os_log_error_impl(&dword_1B8270000, v11, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type:%d for schema field:\"%s\"", buf, 0x22u);
        }
        v8 = 0;
        *__error() = v10;
      }
    }
    else
    {
      v8 = 0;
    }
    if (_MDPlistDictionaryGetPlistObjectForKey())
    {
      v12 = _MDPlistGetPlistObjectType();
      if (v12 == 225)
      {
        v13 = _MDPlistBooleanGetValue() != 0;
      }
      else
      {
        v14 = v12;
        v15 = *__error();
        v16 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v40 = "getFlagsFromAttributes";
          v41 = 1024;
          v42 = 142;
          v43 = 1024;
          v44 = v14;
          v45 = 2080;
          v46 = "multivalued";
          _os_log_error_impl(&dword_1B8270000, v16, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type:%d for schema field:\"%s\"", buf, 0x22u);
        }
        v13 = 0;
        *__error() = v15;
      }
    }
    else
    {
      v13 = 0;
    }
    if (_MDPlistDictionaryGetPlistObjectForKey())
    {
      v17 = _MDPlistGetPlistObjectType();
      if (v17 == 225)
      {
        v18 = _MDPlistBooleanGetValue() != 0;
      }
      else
      {
        v19 = v17;
        v20 = *__error();
        v21 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v40 = "getFlagsFromAttributes";
          v41 = 1024;
          v42 = 150;
          v43 = 1024;
          v44 = v19;
          v45 = 2080;
          v46 = "nosearch";
          _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type:%d for schema field:\"%s\"", buf, 0x22u);
        }
        v18 = 0;
        *__error() = v20;
      }
    }
    else
    {
      v18 = 0;
    }
    if (_os_feature_enabled_impl() && _MDPlistDictionaryGetPlistObjectForKey())
    {
      v22 = _MDPlistGetPlistObjectType();
      if (v22 == 225)
      {
        v23 = _MDPlistBooleanGetValue() != 0;
      }
      else
      {
        v36 = v22;
        v37 = *__error();
        v38 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136316162;
          v40 = "getFlagsFromAttributes";
          v41 = 1024;
          v42 = 159;
          v43 = 1024;
          v44 = v36;
          v45 = 2080;
          v46 = "vector";
          v47 = 2112;
          v48 = v2;
          _os_log_error_impl(&dword_1B8270000, v38, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type:%d for schema field:\"%s\" %@", buf, 0x2Cu);
        }
        v23 = 0;
        *__error() = v37;
      }
    }
    else
    {
      v23 = 0;
    }
    if (_MDPlistDictionaryGetPlistObjectForKey())
    {
      v24 = _MDPlistGetPlistObjectType();
      if (v24 == 225)
      {
        v25 = _MDPlistBooleanGetValue() != 0;
      }
      else
      {
        v26 = v24;
        v27 = *__error();
        v28 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v40 = "getFlagsFromAttributes";
          v41 = 1024;
          v42 = 168;
          v43 = 1024;
          v44 = v26;
          v45 = 2080;
          v46 = "noindex";
          _os_log_error_impl(&dword_1B8270000, v28, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type:%d for schema field:\"%s\"", buf, 0x22u);
        }
        v25 = 0;
        *__error() = v27;
      }
    }
    else
    {
      v25 = 0;
    }
    if (_MDPlistDictionaryGetPlistObjectForKey())
    {
      v29 = _MDPlistGetPlistObjectType();
      if (v29 == 225)
      {
        v30 = _MDPlistBooleanGetValue() != 0;
      }
      else
      {
        v31 = v29;
        v32 = *__error();
        v33 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          v40 = "getFlagsFromAttributes";
          v41 = 1024;
          v42 = 175;
          v43 = 1024;
          v44 = v31;
          v45 = 2080;
          v46 = "notokenize";
          _os_log_error_impl(&dword_1B8270000, v33, OS_LOG_TYPE_ERROR, "%s:%d: Invalid type:%d for schema field:\"%s\"", buf, 0x22u);
        }
        v34 = __error();
        v30 = 0;
        *v34 = v32;
      }
    }
    else
    {
      v30 = 0;
    }
    if (v8)
      v35 = 16;
    else
      v35 = 0;
    if (v13)
      v35 |= 0x20u;
    if (v18)
      v35 |= 0x100u;
    if (v23)
      v35 |= 0x5030u;
    if (v25)
      v35 |= 0x2000u;
    if (v30)
      return v35 | 0x4000;
    else
      return v35;
  }
  return result;
}

char *fastFieldFromCFType(const __CFString *cf, int a2, int *a3, _WORD *a4, CFIndex *a5, char *a6)
{
  CFTypeID v12;
  CFTypeID v14;
  CFTypeID v15;
  CFTypeID v16;
  CFTypeID v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  size_t v22;
  const UInt8 *v23;
  char *v24;
  size_t v25;
  const UInt8 *BytePtr;
  int64_t Length;
  size_t v28;
  int v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  double v33;
  BOOL v34;
  int v35;
  NSObject *v36;
  __int16 v37;
  __int16 valuePtr;
  void *value;
  _BYTE cfa[24];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (fastFieldFromCFType_onceToken[0] != -1)
    dispatch_once(fastFieldFromCFType_onceToken, &__block_literal_global_7008);
  *a4 = 0;
  v12 = CFGetTypeID(cf);
  if (v12 == fastFieldFromCFType_sStringTypeID)
  {
    *a3 = 11;
    return fastUTF8String(cf, a5, a6);
  }
  if (v12 != fastFieldFromCFType_sDictionaryTypeID)
  {
    if (v12 == fastFieldFromCFType_sDataTypeID)
    {
      *a3 = 14;
      *a5 = CFDataGetLength((CFDataRef)cf);
      BytePtr = CFDataGetBytePtr((CFDataRef)cf);
      Length = CFDataGetLength((CFDataRef)cf);
      v28 = Length;
      if (Length >= 1025)
        a6 = (char *)malloc_type_malloc(Length, 0xF0385B8BuLL);
      v24 = a6;
      v23 = BytePtr;
      v25 = v28;
      goto LABEL_29;
    }
    if (v12 != fastFieldFromCFType_sNumberTypeID)
    {
      if (v12 == fastFieldFromCFType_sDateTypeID)
      {
        v33 = MEMORY[0x1BCCAF690](cf);
        *a3 = 12;
        *a5 = 8;
        *(double *)a6 = v33;
        return a6;
      }
      if (v12 == fastFieldFromCFType_sBoolTypeID)
      {
        if (cf)
          v34 = CFBooleanGetValue((CFBooleanRef)cf) != 0;
        else
          v34 = 0;
        *a3 = 1;
        *a4 = 1024;
        *a5 = 1;
        *a6 = v34;
        return a6;
      }
      if (v12 == fastFieldFromCFType_sNullTypeID)
      {
        if (dword_1EF19FCA8 >= 5)
        {
          v35 = *__error();
          v36 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)cfa = 0;
            _os_log_impl(&dword_1B8270000, v36, OS_LOG_TYPE_DEFAULT, "skipping CFNull", cfa, 2u);
          }
          a6 = 0;
          *__error() = v35;
          return a6;
        }
        return 0;
      }
      v29 = *__error();
      v30 = _SILogForLogForCategory(7);
      v31 = 2 * (dword_1EF19FCA8 < 4);
      if (os_log_type_enabled(v30, v31))
      {
        *(_DWORD *)cfa = 138412290;
        *(_QWORD *)&cfa[4] = cf;
        goto LABEL_32;
      }
LABEL_33:
      a6 = 0;
      *__error() = v29;
      return a6;
    }
    if ((a2 - 1) >= 8)
    {
      if (a2 != 9)
      {
        if (a2 != 10)
        {
          switch(CFNumberGetType((CFNumberRef)cf))
          {
            case kCFNumberFloat32Type:
            case kCFNumberFloatType:
              goto LABEL_48;
            case kCFNumberFloat64Type:
            case kCFNumberDoubleType:
              break;
            default:
              goto LABEL_37;
          }
        }
        *(_QWORD *)cfa = 0;
        if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberDoubleType, cfa))
          return 0;
        v32 = 10;
LABEL_39:
        *a3 = v32;
        *a5 = 8;
        *(_QWORD *)a6 = *(_QWORD *)cfa;
        return a6;
      }
LABEL_48:
      *(_DWORD *)cfa = 0;
      if (CFNumberGetValue((CFNumberRef)cf, kCFNumberFloatType, cfa))
      {
        *a3 = 9;
        *a5 = 4;
        *(_DWORD *)a6 = *(_DWORD *)cfa;
        return a6;
      }
    }
    else
    {
LABEL_37:
      *(_QWORD *)cfa = 0;
      if (CFNumberGetValue((CFNumberRef)cf, kCFNumberLongLongType, cfa))
      {
        v32 = 7;
        goto LABEL_39;
      }
    }
    return 0;
  }
  value = 0;
  if (!_os_feature_enabled_impl()
    || !CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, CFSTR("vec_data"), (const void **)&value)
    || (v14 = CFGetTypeID(value), v14 != CFDataGetTypeID()))
  {
    *a5 = 0;
    v29 = *__error();
    v30 = _SILogForLogForCategory(7);
    v31 = 2 * (dword_1EF19FCA8 < 4);
    if (os_log_type_enabled(v30, v31))
    {
      *(_DWORD *)cfa = 138412290;
      *(_QWORD *)&cfa[4] = cf;
LABEL_32:
      _os_log_impl(&dword_1B8270000, v30, v31, "no type conversion for %@", cfa, 0xCu);
      goto LABEL_33;
    }
    goto LABEL_33;
  }
  valuePtr = 0;
  v37 = 0;
  *(_QWORD *)cfa = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, CFSTR("vec_dim"), (const void **)cfa))
  {
    v15 = CFGetTypeID(*(CFTypeRef *)cfa);
    if (v15 == CFNumberGetTypeID())
      CFNumberGetValue(*(CFNumberRef *)cfa, kCFNumberSInt8Type, &valuePtr);
  }
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, CFSTR("vec_format"), (const void **)cfa))
  {
    v16 = CFGetTypeID(*(CFTypeRef *)cfa);
    if (v16 == CFNumberGetTypeID())
      CFNumberGetValue(*(CFNumberRef *)cfa, kCFNumberSInt8Type, (char *)&valuePtr + 1);
  }
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, CFSTR("vec_version"), (const void **)cfa))
  {
    v17 = CFGetTypeID(*(CFTypeRef *)cfa);
    if (v17 == CFNumberGetTypeID())
      CFNumberGetValue(*(CFNumberRef *)cfa, kCFNumberSInt16Type, &v37);
  }
  *a4 |= 0x5038u;
  v18 = CFDataGetLength((CFDataRef)value);
  v19 = v18;
  v20 = HIBYTE(valuePtr);
  v21 = -1;
  if (valuePtr <= 2uLL && HIBYTE(valuePtr) <= 2u)
    v21 = (vector_dimension_vec_sizes_10743[valuePtr]
                       * vector_size_elem_sizes_10742[HIBYTE(valuePtr)]);
  if (v21 > v18)
    return 0;
  *a3 = 14;
  v22 = v18 + 4;
  *a5 = v19 + 4;
  if (v19 >= 1021)
  {
    a6 = (char *)malloc_type_malloc(v22, 0xAF8E7574uLL);
    v20 = HIBYTE(valuePtr);
  }
  *a6 = v20;
  a6[1] = valuePtr;
  *((_WORD *)a6 + 1) = v37;
  v23 = CFDataGetBytePtr((CFDataRef)value);
  v24 = a6 + 4;
  v25 = v19;
LABEL_29:
  memcpy(v24, v23, v25);
  return a6;
}

uint64_t db_add_field(int *a1, _DWORD **a2, unsigned int a3, char *a4, uint64_t a5, unsigned int a6, int a7, unsigned __int8 *a8, __n128 a9, int a10)
{
  int v12;
  NSObject *v13;
  int v14;
  char *v15;
  char *v16;
  const char *v17;
  _BYTE buf[12];
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = *a1;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "db_add_field";
      v19 = 1024;
      v20 = 341;
      v21 = 1024;
      v22 = v14;
      _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v12;
    v15 = __si_assert_copy_extra_268();
    v16 = v15;
    if (v15)
      v17 = v15;
    else
      v17 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 341, v17);
    free(v16);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  *(_QWORD *)buf = 0;
  return db2_add_field_with_cache((unint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, buf);
}

uint64_t db2_add_field_with_cache(unint64_t a1, _DWORD **a2, unsigned int a3, char *__s, uint64_t a5, unsigned int a6, int a7, unsigned __int8 *a8, __n128 a9, int a10, _QWORD *a11)
{
  _DWORD *v11;
  unsigned int v12;
  int v14;
  NSObject *v15;
  uint64_t v16;
  unsigned int v18;
  int v19;
  char *v20;
  _BOOL4 v24;
  int v25;
  int v26;
  NSObject *v27;
  unsigned __int8 *v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  const UInt8 *data;
  unint64_t v34;
  int v35;
  int *v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  __int16 v44;
  int v45;
  int v46;
  char v48;
  unsigned __int8 v49;
  int v50;
  uint64_t string_and_length_for_id_10395;
  const char *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;
  int v56;
  unsigned __int8 *v57;
  int v58;
  int v59;
  unint64_t v60;
  NSObject *v61;
  int v62;
  NSObject *v63;
  int v64;
  const char *v65;
  int v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unsigned __int8 *v74;
  size_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t id_for_string;
  uint64_t v80;
  int v82;
  unsigned int v83;
  size_t v84;
  unint64_t v85;
  _DWORD *v86;
  unsigned int v87;
  size_t v88;
  unsigned __int8 *v89;
  unsigned int v90;
  char *v91;
  unsigned __int16 *v92;
  uint64_t v93;
  _DWORD *v94;
  unsigned __int16 *v95;
  int *v96;
  int v97;
  int v98;
  char v99;
  int v100;
  int v101;
  int v102;
  NSObject *v103;
  os_log_type_t v104;
  int v105;
  uint64_t v106;
  char *v107;
  char *v108;
  int v109;
  unsigned __int8 *v110;
  int v111;
  unsigned __int16 v112;
  uint64_t v113;
  unsigned int v114;
  char *v115;
  unsigned __int8 *v116;
  char *v117;
  NSObject *v118;
  os_log_type_t v119;
  NSObject *v120;
  int v121;
  int v122;
  int v123;
  NSObject *v124;
  int v125;
  NSObject *v126;
  char *v127;
  char *v128;
  const char *v129;
  char *v130;
  char *v131;
  const char *v132;
  char *v133;
  const char *v134;
  char *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  char *v141;
  const char *v142;
  char *v143;
  char *v144;
  const char *v145;
  __n128 v146;
  __n128 v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  _DWORD *v151;
  _QWORD *v152;
  int v153;
  unsigned int v154;
  int v155;
  int v156;
  unsigned int v157;
  char *v158;
  int v159;
  unsigned __int8 *v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  uint64_t v164;
  unsigned __int8 *v165;
  int v166;
  unint64_t v167;
  uint64_t v168;
  _QWORD v169[2];
  _DWORD v170[2];
  uint8_t buf[4];
  _BYTE v172[10];
  __int128 v173;
  unint64_t v174;
  __int128 v175;
  __int16 v176;
  _BYTE v177[14];
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  v166 = 0;
  v11 = *a2;
  v165 = 0;
  v12 = *(_DWORD *)(a1 + 804);
  if ((v12 & 8) != 0)
    return 13;
  v167 = 0;
  if ((a7 - 15) <= 0xFFFFFFF1)
  {
    v14 = *__error();
    v15 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v172 = "db2_add_field_with_cache";
      *(_WORD *)&v172[8] = 1024;
      LODWORD(v173) = 13414;
      WORD2(v173) = 1024;
      *(_DWORD *)((char *)&v173 + 6) = a7;
      _os_log_error_impl(&dword_1B8270000, v15, OS_LOG_TYPE_ERROR, "%s:%d: Field type %d out of bounds", buf, 0x18u);
    }
    *__error() = v14;
    return 22;
  }
  v18 = a6;
  v19 = a5;
  v20 = __s;
  if ((a5 + 1) <= 1 && (!__s || !*__s))
  {
    v26 = *__error();
    v27 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v172 = "db2_add_field_with_cache";
      *(_WORD *)&v172[8] = 1024;
      LODWORD(v173) = 13421;
      WORD2(v173) = 2080;
      *(_QWORD *)((char *)&v173 + 6) = v20;
      _os_log_error_impl(&dword_1B8270000, v27, OS_LOG_TYPE_ERROR, "%s:%d: Field name %s out of bounds", buf, 0x1Cu);
    }
    *__error() = v26;
    return 93;
  }
  v24 = (~a6 & 0x5020) == 0 && a7 == 14;
  if ((a6 & 0x10) == 0 && v24)
    return 22;
  if (v24)
  {
    v16 = 0;
    v25 = *(unsigned __int8 *)(a1 + 989);
    if (*(_BYTE *)(a1 + 989))
      return v16;
  }
  else
  {
    v25 = a7 == 11;
    if (a7 != 11 && (a6 & 0x10) != 0)
      return 22;
  }
  if ((a6 & 0x80) == 0)
  {
    if (a10 <= 0x4000)
      goto LABEL_32;
    return 7;
  }
  if (a10 > 60000)
    return 7;
LABEL_32:
  if ((v11[3] + a10) > 0xFFDE)
    return 7;
  LODWORD(v162) = 0;
  v148 = a1 + 324;
  v152 = a11;
  v155 = (16 * a3) & 0x20;
  v154 = (a3 >> 3) & 2 | 1;
  v157 = a3;
  if ((a3 & 4) != 0)
    v25 = 0;
  v159 = v25;
  v153 = (v12 >> 2) & 1;
  a9.n128_u64[0] = 136316930;
  v147 = a9;
  a9.n128_u64[0] = 136315906;
  v146 = a9;
  v149 = a10;
  v161 = a10;
  v150 = (char *)a8;
  v28 = a8;
  v29 = a5;
  v151 = v11;
  v158 = __s;
  while (1)
  {
    v170[0] = v29;
    v170[1] = 0;
    v169[0] = 0;
    v169[1] = 0;
    v160 = v28;
    if (!v19)
      break;
    v164 = v29;
    v31 = v29 & 0x7FFFFFFF;
    if (v31 > 0x7FFFFFFD)
    {
      v35 = 0;
      v36 = 0;
    }
    else
    {
      v32 = *(_QWORD *)(a1 + 880);
      if ((*(_BYTE *)(a1 + 804) & 0x14) != 0)
      {
        v168 = 0;
        data = data_map_get_data(v32, v31, &v168);
        if (!data)
        {
          v34 = data_map_count(v32);
          if (v34 < v31)
          {
            v60 = v34;
            LODWORD(v163) = *__error();
            v61 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
            {
              v156 = *(_DWORD *)(a1 + 4);
              v64 = data_map_valid((_DWORD *)v32);
              *(_DWORD *)buf = v147.n128_u32[0];
              v65 = "n";
              if (v64)
                v65 = "y";
              *(_QWORD *)v172 = "_get_string_and_length_for_id";
              *(_WORD *)&v172[8] = 1024;
              LODWORD(v173) = 571;
              WORD2(v173) = 2048;
              *(_QWORD *)((char *)&v173 + 6) = v31;
              HIWORD(v173) = 2048;
              v174 = v60;
              LOWORD(v175) = 1024;
              *(_DWORD *)((char *)&v175 + 2) = 0;
              WORD3(v175) = 2080;
              *((_QWORD *)&v175 + 1) = v148;
              v176 = 1024;
              *(_DWORD *)v177 = v156;
              *(_WORD *)&v177[4] = 2080;
              *(_QWORD *)&v177[6] = v65;
              _os_log_error_impl(&dword_1B8270000, v61, OS_LOG_TYPE_ERROR, "%s:%d: Invalid string_id:%lu, map_count:%lu, index:%d, dst->name:%s, dst->flags:0x%x valid:%s", buf, 0x46u);
            }
            *__error() = (int)v163;
            if ((*(_BYTE *)(a1 + 4) & 0x20) != 0)
            {
              v62 = *__error();
              v63 = _SILogForLogForCategory(7);
              if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
              {
                v66 = *(_DWORD *)(a1 + 4);
                *(_DWORD *)buf = v146.n128_u32[0];
                *(_QWORD *)v172 = "_get_string_and_length_for_id";
                *(_WORD *)&v172[8] = 1024;
                LODWORD(v173) = 573;
                WORD2(v173) = 2080;
                *(_QWORD *)((char *)&v173 + 6) = v148;
                HIWORD(v173) = 1024;
                LODWORD(v174) = v66;
                _os_log_error_impl(&dword_1B8270000, v63, OS_LOG_TYPE_ERROR, "%s:%d: marking invalid %s flags:0x%x", buf, 0x22u);
              }
              *__error() = v62;
              *(_DWORD *)(a1 + 4) |= 0x40u;
            }
          }
          goto LABEL_43;
        }
      }
      else
      {
        if (*(_DWORD *)(v32 + 56) <= v31
          || (v42 = *(_QWORD *)(*(_QWORD *)(v32 + 32) + 8 * v31)) == 0)
        {
          v59 = *(_DWORD *)(a1 + 4);
          if ((v59 & 0x20) != 0)
          {
            v35 = 0;
            v36 = 0;
            *(_DWORD *)(a1 + 4) = v59 | 0x40;
            goto LABEL_101;
          }
          if (SIIsAppleInternal_onceToken == -1)
          {
            v35 = 0;
            v36 = 0;
            goto LABEL_101;
          }
          dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_4644);
LABEL_43:
          v35 = 0;
          v36 = 0;
LABEL_101:
          v43 = v157;
          v20 = v158;
          goto LABEL_53;
        }
        data = (const UInt8 *)(v42 + 6);
      }
      v35 = *(data - 2);
      v36 = (int *)*(data - 1);
    }
    v43 = v157;
LABEL_53:
    if ((v18 & 0x400) != 0)
      v44 = 0;
    else
      v44 = a7;
    v45 = (v18 >> 1) & 4 | (v18 >> 7) & 1 | (v18 >> 4) & 2 | (v18 >> 5) & 8 | (v18 >> 3) & 0x40;
    if ((v12 & 4) != 0)
    {
      v46 = (v18 >> 8) & 0x20 | (v18 >> 14 << 7) | v45;
    }
    else
    {
      v46 = (v18 >> 6) & 0x20 | (v18 >> 12 << 7) | v45;
      if (v44 == 14 && (v18 & 0x4000) != 0)
        LOBYTE(v46) = v46 | 0x80;
    }
    if ((v18 & 0x10) != 0)
      v48 = 15;
    else
      v48 = v44;
    if (v44 == 11)
      v49 = v48;
    else
      v49 = v44;
    if ((v43 & 2) != 0 && (v18 & 0x20) == 0)
    {
      v135 = __si_assert_copy_extra_2151(0, -1);
      v131 = v135;
      v136 = "";
      if (v135)
        v136 = v135;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13460, "field_flags & DB_FIELD_ARRAY_VAL", v136);
LABEL_209:
      free(v131);
      if (!__valid_fs(-1))
      {
        v137 = 3072;
LABEL_212:
        *(_DWORD *)v137 = -559038737;
        abort();
      }
LABEL_210:
      v137 = 2989;
      goto LABEL_212;
    }
    v50 = v46;
    if (v46 == (_DWORD)v36 && v35 == v49)
    {
      v38 = v170;
      v41 = v164;
    }
    else
    {
      v41 = v164;
      v163 = v36;
      v156 = v35;
      string_and_length_for_id_10395 = get_string_and_length_for_id_10395(a1, 0, v164, 0, 0);
      v52 = "";
      if (string_and_length_for_id_10395)
        v52 = (const char *)string_and_length_for_id_10395;
      si_analytics_log_2520("field:%d extras:%d expected:%d type:%d expected:%d  %s", v164, (_DWORD)v163, v50, v156, v49, v52);
      if (!v20)
        return 28;
      v38 = v170;
    }
    LODWORD(v37) = v161;
LABEL_79:
    if ((v18 & 0xA0) == 0x80)
    {
      v133 = __si_assert_copy_extra_2151(0, -1);
      v131 = v133;
      v134 = "";
      if (v133)
        v134 = v133;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13494, "field_flags & DB_FIELD_ARRAY_VAL", v134);
      goto LABEL_209;
    }
    if (v41 >= 0xFFFFFFFE)
    {
      v127 = __si_assert_copy_extra_2151(0, -1);
      v128 = v127;
      v129 = "";
      if (v127)
        v129 = v127;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13499, "(db_uint32_t)name_id!=((db_uint32_t)~0) && (db_uint32_t)name_id!=((db_uint32_t)-2)", v129);
      goto LABEL_197;
    }
    v163 = v38;
    v164 = v41;
    if (!v159)
    {
      v67 = 0;
      v156 = v18;
      if ((v157 & 4) == 0 && a7 == 14 && (v18 & 0x5030) == 0x5030)
      {
        v68 = _os_feature_enabled_impl();
        if ((_DWORD)v68)
        {
          v69 = *v150;
          v70 = -1;
          if (v69 <= 2)
          {
            v71 = v150[1];
            if (v71 <= 2)
              v70 = vector_dimension_vec_sizes_10743[v71] * vector_size_elem_sizes_10742[v69];
          }
          v72 = v149;
          v160 = (unsigned __int8 *)(((int)v149 - 2) / v70);
          MEMORY[0x1E0C80A78](v68);
          v74 = (unsigned __int8 *)&v146 - v73;
          bzero((char *)&v146 - v73, v75);
          if (v72 >= 5)
          {
            v76 = 0;
            v77 = v150 + 4;
            v161 = v70;
            v162 = 8 * (_QWORD)v160;
            v78 = &v150[v72];
            while (1)
            {
              id_for_string = _get_id_for_string(a1, 5, v77, v70, -2147483647, v150);
              v80 = id_for_string;
              if ((unint64_t)(id_for_string - 4294967294) < 2 || id_for_string == 0)
                break;
              *(_QWORD *)&v74[v76] = id_for_string;
              if (v162 != v76)
              {
                v77 += v161;
                v76 += 8;
                if (v77 < v78)
                  continue;
              }
              goto LABEL_126;
            }
            v123 = *__error();
            v124 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
            {
              v138 = *(_QWORD *)v151;
              *(_DWORD *)buf = 136316674;
              *(_QWORD *)v172 = "db2_add_field_with_cache";
              *(_WORD *)&v172[8] = 1024;
              LODWORD(v173) = 13567;
              WORD2(v173) = 2048;
              *(_QWORD *)((char *)&v173 + 6) = a1;
              HIWORD(v173) = 2048;
              v174 = v80;
              LOWORD(v175) = 2048;
              *(_QWORD *)((char *)&v175 + 2) = v138;
              WORD5(v175) = 1024;
              HIDWORD(v175) = v164;
              v176 = 2080;
              *(_QWORD *)v177 = v20;
              _os_log_error_impl(&dword_1B8270000, v124, OS_LOG_TYPE_ERROR, "%s:%d: %p unexpected vec id: %llu oid: 0x%llx name id: %d name: %s", buf, 0x40u);
            }
            *__error() = v123;
            v16 = 22;
            goto LABEL_186;
          }
LABEL_126:
          v67 = 0;
          v82 = 8 * (_DWORD)v160;
          v54 = v74;
          goto LABEL_135;
        }
        v67 = 0;
      }
      v54 = (unsigned __int8 *)v150;
      v82 = v149;
LABEL_135:
      v83 = v82;
      v84 = v82;
      v85 = v82 + 13;
      v86 = v151;
      LODWORD(v88) = v151[2];
      v87 = v151[3];
      if (v85 > v88 - v87)
      {
        v89 = v54;
        v90 = v88 + 2 * v85;
        if (v90 >= 0x10000)
          v88 = 0x10000;
        else
          v88 = v90;
        v86 = malloc_type_realloc(v151, v88, 0x3599938BuLL);
        if (!v86)
        {
          v16 = 12;
          goto LABEL_184;
        }
        v86[2] = v88;
        *a2 = v86;
        v87 = v86[3];
        v54 = v89;
      }
      v91 = (char *)(v86 + 12);
      v92 = (unsigned __int16 *)((char *)v86 + *v152 + 48);
      v93 = v87;
      v94 = v86;
      v95 = (unsigned __int16 *)((char *)v86 + v87);
      if (v92 >= v95)
        goto LABEL_149;
      if (*v163)
      {
LABEL_143:
        v96 = v163 + 1;
        v97 = *v163;
        while (*((_DWORD *)v92 + 1) != v97)
        {
          v98 = *v96++;
          v97 = v98;
          if (!v98)
          {
            v92 = (unsigned __int16 *)((char *)v92 + *((unsigned int *)v92 + 2) + 13);
            if (v92 >= v95)
              goto LABEL_149;
            goto LABEL_143;
          }
        }
        *v152 = (char *)v92 - v91;
        if ((v157 & 8) != 0)
        {
          *v92 = a7;
          v92[1] = v156;
          v106 = *((unsigned int *)v92 + 2);
          v107 = (char *)v92 + 13;
          if (v83 > v106)
            goto LABEL_166;
          goto LABEL_180;
        }
        if ((v157 & 1) != 0 && ((*(_BYTE *)(a1 + 804) & 4) != 0 || (v92[1] & 0xA00) != 0x200))
        {
          *v92 = a7;
          v92[1] = v156;
          v106 = *((unsigned int *)v92 + 2);
          v107 = (char *)v92 + 13;
          if (v83 > v106)
          {
LABEL_166:
            v108 = &v107[v106];
            v109 = v83 - v106;
            v110 = v54;
            memmove(&v108[v109], v108, (char *)v95 - v108);
            memcpy((char *)v92 + 13, v110, v84);
            *((_DWORD *)v92 + 2) = v83;
            v111 = v94[3];
LABEL_181:
            v94[3] = v111 + v109;
LABEL_182:
            v101 = v164;
            goto LABEL_183;
          }
LABEL_180:
          memcpy((char *)v92 + 13, v54, v84);
          v111 = v83 - v106;
          *((_DWORD *)v92 + 2) = v83;
          memmove(&v107[v83], &v107[v106], (char *)v94 + v94[3] - &v107[v106]);
          v109 = v94[3];
          goto LABEL_181;
        }
        if ((v157 & 2) == 0)
        {
          v16 = 17;
          goto LABEL_184;
        }
        v112 = v92[1];
        v113 = *((unsigned int *)v92 + 2);
        v114 = v113 + v83;
        if ((v112 & 0x80) != 0)
        {
          if (v114 <= 0xEA60)
            goto LABEL_170;
        }
        else if (v114 <= 0x4000)
        {
LABEL_170:
          LODWORD(v162) = v67;
          if ((v156 | 0x20) == v156)
          {
            v115 = (char *)v92 + 13;
            if (*v92 != a7)
            {
              v125 = *__error();
              v126 = _SILogForLogForCategory(7);
              if (os_log_type_enabled(v126, OS_LOG_TYPE_ERROR))
              {
                v139 = v92[1];
                v140 = *v92;
                *(_DWORD *)buf = 136316418;
                *(_QWORD *)v172 = "db2_add_field_with_cache";
                *(_WORD *)&v172[8] = 1024;
                LODWORD(v173) = 13703;
                WORD2(v173) = 1024;
                *(_DWORD *)((char *)&v173 + 6) = v139;
                WORD5(v173) = 1024;
                HIDWORD(v173) = v140;
                LOWORD(v174) = 1024;
                *(_DWORD *)((char *)&v174 + 2) = v156;
                HIWORD(v174) = 1024;
                LODWORD(v175) = a7;
                _os_log_error_impl(&dword_1B8270000, v126, OS_LOG_TYPE_ERROR, "%s:%d: types don't match dbf_flags:%x dfb_type:%d flags:%x type:%d", buf, 0x2Au);
              }
              *__error() = v125;
              v16 = 22;
              v67 = v162;
              goto LABEL_184;
            }
            v116 = v54;
            v117 = &v115[v113];
            if ((v112 & 0x20) == 0)
            {
              LODWORD(v161) = *__error();
              v118 = _SILogForLogForCategory(7);
              v119 = 2 * (dword_1EF19FCA8 < 4);
              v120 = v118;
              if (os_log_type_enabled(v118, v119))
              {
                v121 = v92[1];
                v122 = *v92;
                *(_DWORD *)buf = 67109888;
                *(_DWORD *)v172 = v121;
                *(_WORD *)&v172[4] = 1024;
                *(_DWORD *)&v172[6] = v122;
                LOWORD(v173) = 1024;
                *(_DWORD *)((char *)&v173 + 2) = v156;
                WORD3(v173) = 1024;
                DWORD2(v173) = a7;
                _os_log_impl(&dword_1B8270000, v120, v119, "original field not an array, dbf_flags:%x dfb_type:%d flags:%x type:%d", buf, 0x1Au);
              }
              *__error() = v161;
              v93 = v94[3];
            }
            memmove(&v117[v84], v117, (char *)v94 + v93 - v117);
            memcpy(&v115[*((unsigned int *)v92 + 2)], v116, v84);
            *((_DWORD *)v92 + 2) += v83;
            v94[3] += v83;
            v92[1] |= (unsigned __int16)v156 | 0x20;
            v67 = v162;
            goto LABEL_182;
          }
          v143 = __si_assert_copy_extra_2151(0, -1);
          v144 = v143;
          if (v143)
            v145 = v143;
          else
            v145 = "";
          __message_assert("%s:%u: Unexpected code path %s ", "sdb2.c", 13697, v145);
          free(v144);
          goto LABEL_210;
        }
        v16 = 7;
LABEL_184:
        if (v67)
          free(v165);
        goto LABEL_186;
      }
      do
        v92 = (unsigned __int16 *)((char *)v92 + *((unsigned int *)v92 + 2) + 13);
      while (v92 < v95);
LABEL_149:
      if (v92 >= (unsigned __int16 *)((char *)v86 + v88))
      {
        v102 = *__error();
        v103 = _SILogForLogForCategory(7);
        v104 = 2 * (dword_1EF19FCA8 < 4);
        if (os_log_type_enabled(v103, v104))
        {
          v105 = v94[2];
          *(_DWORD *)buf = 134218496;
          *(_QWORD *)v172 = v92;
          *(_WORD *)&v172[8] = 2048;
          *(_QWORD *)&v173 = v94;
          WORD4(v173) = 1024;
          *(_DWORD *)((char *)&v173 + 10) = v105;
          _os_log_impl(&dword_1B8270000, v103, v104, "db_add_field: ERR: dbf is not valid! (dbf %p dbo %p size 0x%x)\n", buf, 0x1Cu);
        }
        *__error() = v102;
        v16 = 22;
        goto LABEL_184;
      }
      *v152 = (char *)v92 - v91;
      *v92 = a7;
      v99 = v156;
      v92[1] = v156;
      if ((v157 & 2) == 0 || (v99 & 0x20) != 0)
      {
        v100 = v164;
        *((_DWORD *)v92 + 1) = v164;
        *((_DWORD *)v92 + 2) = v83;
        memcpy((char *)v92 + 13, v54, v84);
        v101 = v100;
        v94[3] += v85;
LABEL_183:
        v16 = 0;
        *((_DWORD *)v92 + 1) = v101;
        goto LABEL_184;
      }
      v141 = __si_assert_copy_extra_2151(0, -1);
      v128 = v141;
      v142 = "";
      if (v141)
        v142 = v141;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13750, "dbf->flags & DB_FIELD_ARRAY_VAL", v142);
LABEL_197:
      free(v128);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v53 = check_and_decompose_string(v160, (int)v37, &v165, &v167);
    if ((_DWORD)v53)
    {
      v16 = v53;
LABEL_186:
      if (v163 != v170 && v163 != (int *)v169)
        free(v163);
      return v16;
    }
    v54 = v165;
    v55 = v162;
    if (v165 != v160)
      v55 = 1;
    LODWORD(v162) = v55;
    if (v165 == v160)
      v37 = v37;
    else
      v37 = v167;
    if ((v18 & 0x10) == 0)
    {
      v156 = v18;
      v82 = v37;
      v67 = v162;
      goto LABEL_135;
    }
    v161 = v37;
    v56 = v37 - 1;
    v57 = v165;
    if ((_DWORD)v37 - 1 != strlen((const char *)v165))
    {
      v130 = __si_assert_copy_extra_2151(0, -1);
      v131 = v130;
      v132 = "";
      if (v130)
        v132 = v130;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13521, "size-1 == (db_int32_t)strlen(data)", v132);
      goto LABEL_209;
    }
    v28 = v165;
    v58 = _get_id_for_string(a1, 1, (char *)v165, v56, -2147483647, 0);
    v166 = v58;
    v29 = v164;
    v20 = v158;
    if (v58 != -1 && (v58 != -2 || !*v57))
    {
      v156 = v18;
      v54 = (unsigned __int8 *)&v166;
      v82 = 4;
      v67 = v162;
      goto LABEL_135;
    }
    if (v163 != v170 && v163 != (int *)v169)
      free(v163);
    v30 = v18;
    v18 &= ~0x10u;
    v16 = 7;
    if ((v30 & 0x20) != 0)
      return v16;
  }
  LODWORD(v37) = v161;
  if (!v20)
    return 28;
  v18 |= v155;
  v38 = (int *)internal_copy_field_ids(a1, v20, (uint64_t)v169, 4uLL, 0);
  *(_WORD *)buf = ldbFlagsForTypeAndFieldFlags((unsigned __int16)a7, (unsigned __int16)v18, v153);
  v39 = strlen(v20);
  v40 = _get_id_for_string(a1, 0, v20, v39, v154, buf);
  if ((_DWORD)v40 != -1)
  {
    v41 = v40;
    if (!v38)
    {
      v170[0] = v40;
      v38 = v170;
    }
    goto LABEL_79;
  }
  if (v38 != (int *)v169)
    free(v38);
  return 28;
}

uint64_t _get_id_for_string(unint64_t data_id, int a2, char *__s, int a4, int a5, void *a6)
{
  char v7;
  char v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  pthread_rwlock_t *v19;
  unsigned int *v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  pthread_rwlock_t *v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v32;
  char *v33;
  size_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  os_unfair_lock_s *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void *v48;
  uint64_t v49;
  int v50;
  os_unfair_lock_s *v51;
  char *v52;
  char *v53;
  const char *v54;
  uint64_t v55;
  char *v56;
  const char *v57;
  char *v58;
  const char *v59;
  int v60;
  NSObject *v61;
  int v62;
  NSObject *v63;
  char *v64;
  char *v65;
  const char *v66;
  uint64_t v67;
  char *v68;
  const char *v69;
  uint64_t v70;
  os_unfair_lock_s *v71;
  size_t v72;
  uint64_t v73;
  os_unfair_lock *v74;
  size_t v75;
  uint8_t buf[4];
  char *v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  uint64_t v82;

  v7 = a5;
  v8 = a4;
  v11 = data_id;
  v82 = *MEMORY[0x1E0C80C00];
  v12 = a2;
  v13 = *(_QWORD *)(data_id + 8 * a2 + 880);
  if (a2 > 4 || (*(_DWORD *)(data_id + 804) & 0x14) != 0)
  {
    v22 = table_extra_bytes_10004[a2];
    if (!a2 && a5 < 0)
    {
      v58 = __si_assert_copy_extra_2151(0, -1);
      v53 = v58;
      v59 = "";
      if (v58)
        v59 = v58;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 11081, "!(flags& 0x80000000)", v59);
      goto LABEL_127;
    }
    if (a2 <= 1 && !*__s)
      return 4294967294;
    if (a2 == 1)
    {
      if (!*__s)
      {
        v26 = 1;
        goto LABEL_44;
      }
      v23 = __s + 1;
      v24 = -1;
      do
      {
        v25 = *v23++;
        ++v24;
      }
      while (v25);
      v26 = v24 + 2;
    }
    else
    {
      if (a2)
        v26 = a4;
      else
        v26 = a4 + 1;
      if (a2 == 5)
      {
LABEL_38:
        if (!v13)
          goto LABEL_55;
        v29 = *(_DWORD *)(v13 + 216);
        switch(v29)
        {
          case -270471200:
            data_id = data_map_ext_id_get_with_key(*(_QWORD *)(data_id + 8 * a2 + 880), __s, v26, a6);
            break;
          case 1684300900:
            data_id = data_map64_id_get_with_key(*(_QWORD *)(data_id + 8 * a2 + 880), (uint64_t)__s, v26, a6);
            break;
          case 842150450:
            data_id = data_map32_id_get_with_key(*(_QWORD *)(data_id + 8 * a2 + 880), (unsigned __int16 *)__s, v26, a6);
            v21 = data_id;
            goto LABEL_54;
          default:
            goto LABEL_55;
        }
        goto LABEL_53;
      }
    }
    if (!a2)
      goto LABEL_38;
LABEL_44:
    if (!v13)
      goto LABEL_55;
    v30 = *(_DWORD *)(v13 + 216);
    switch(v30)
    {
      case -270471200:
        data_id = _data_map_ext_get_data_id(v13, *(_DWORD *)(v13 + 220), __s, v26, 0);
        break;
      case 1684300900:
        data_id = _data_map64_get_data_id(v13, *(_DWORD *)(v13 + 220), __s, v26, 0);
        break;
      case 842150450:
        data_id = _data_map32_get_data_id(v13, *(_DWORD *)(v13 + 220), __s, v26, 0);
        v21 = data_id;
LABEL_54:
        if (v21)
          return v21;
LABEL_55:
        if ((v7 & 1) != 0)
        {
          v32 = (v26 + v22);
          if (a2)
          {
            if ((int)v32 > 32775)
              return 0xFFFFFFFFLL;
          }
          else if ((int)v32 > 16391)
          {
            return 0xFFFFFFFFLL;
          }
          if ((v7 & 2) != 0)
          {
            data_id = _dirty_datastore_locked(v11, 0);
          }
          else if ((*(_BYTE *)(v11 + 4) & 1) != 0)
          {
            data_id = db2_dirty_datastore(v11);
          }
          if (a2 != 5 && a2)
          {
            v21 = data_map_id_insert(v13, __s, v26);
            if (!v21)
              return 0xFFFFFFFFLL;
          }
          else
          {
            v75 = (size_t)&v70;
            MEMORY[0x1E0C80A78](data_id);
            v33 = (char *)&v70 - ((v32 + 15) & 0x1FFFFFFF0);
            if (v32 >= v22)
              v34 = v32 - v22;
            else
              v34 = 0;
            bzero(&v33[v22], v34);
            memcpy((char *)&v70 - ((v32 + 15) & 0x1FFFFFFF0), a6, v22);
            memcpy(&v33[v22], __s, v26);
            v21 = data_map_id_insert(v13, (char *)&v70 - ((v32 + 15) & 0x1FFFFFFF0), (int)v32);
            if (!v21)
              return 0xFFFFFFFFLL;
          }
          if (a2 == 4)
          {
            v35 = *(_QWORD *)(v11 + 968);
            if (v35)
              (*(void (**)(uint64_t, uint64_t))(v35 + 16))(v35, v21);
          }
          return v21;
        }
        return 4294967294;
      default:
        goto LABEL_55;
    }
LABEL_53:
    v21 = data_id;
    goto LABEL_54;
  }
  v14 = *(_QWORD *)(v13 + 24);
  if (!a2 && a5 < 0)
  {
    v56 = __si_assert_copy_extra_2151(0, -1);
    v53 = v56;
    v57 = "";
    if (v56)
      v57 = v56;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 11154, "!(flags& 0x80000000)", v57);
    goto LABEL_127;
  }
  v15 = *__s;
  if (a2 <= 1 && !*__s)
    return 4294967294;
  LODWORD(v16) = a4;
  if (a2 != 1)
    goto LABEL_16;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  while (1)
  {
    if (v15 == 22)
    {
      v18 = 1;
      v17 = v16;
      goto LABEL_10;
    }
    if (!v15)
      break;
LABEL_10:
    v15 = __s[++v16];
  }
  if ((v18 & 1) != 0)
    v8 = v17;
  else
    v8 = v16;
LABEL_16:
  v75 = table_extra_bytes_10004[a2];
  v19 = *(pthread_rwlock_t **)(v13 + 16);
  if (a2 > 1)
  {
    v20 = (unsigned int *)hash_field_lookup(v19, (unsigned __int8 *)__s);
    if (!v20)
      goto LABEL_29;
    return *v20;
  }
  v20 = (unsigned int *)hash_lookup_extended((uint64_t)v19, __s, a6, 0);
  if (v20)
    return *v20;
LABEL_29:
  if ((v7 & 1) == 0)
    return 4294967294;
  if ((int)v16 >= 0x2000)
    return 0xFFFFFFFFLL;
  v74 = (os_unfair_lock *)(v13 + 64);
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 64));
  v27 = *(pthread_rwlock_t **)(v13 + 16);
  if (a2 > 1)
    v28 = hash_field_lookup(v27, (unsigned __int8 *)__s);
  else
    v28 = hash_lookup_extended((uint64_t)v27, __s, a6, 0);
  if (v28)
  {
    v36 = (unsigned int *)v28;
    os_unfair_lock_unlock(v74);
    return *v36;
  }
  v73 = *(unsigned int *)(v13 + 56);
  LODWORD(v72) = *(_DWORD *)v13;
  if ((_DWORD)v72 == -1)
  {
    v71 = (os_unfair_lock_s *)(v13 + 68);
    os_unfair_lock_lock((os_unfair_lock_t)(v13 + 68));
    v38 = v11 + 4 * v12 + 48;
    do
    {
      v39 = (_DWORD *)v38;
      v37 = v14;
      v14 = *(_QWORD *)(v14 + 24);
      v38 = v37 + 20;
    }
    while (v14);
    LODWORD(v72) = *v39;
    os_unfair_lock_unlock(v71);
  }
  else
  {
    v37 = *(_QWORD *)(v13 + 8);
  }
  if ((v7 & 2) != 0)
  {
    _dirty_datastore_locked(v11, 0);
  }
  else if ((*(_BYTE *)(v11 + 4) & 1) != 0)
  {
    db2_dirty_datastore(v11);
  }
  v40 = *(int *)(v37 + 8);
  v41 = 4;
  if (a2 < 2)
    v41 = 5;
  v42 = v75;
  v43 = v41 + v75 + (int)v16;
  if (v43 <= *(int *)(v37 + 4) - v40)
  {
    v46 = *(_QWORD *)(v13 + 8);
    if (v46 && v46 != v37)
    {
      v64 = __si_assert_copy_extra_2151(0, -1);
      v65 = v64;
      v66 = "";
      if (v64)
        v66 = v64;
      __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 11234, "string_table->dirty_page == 0 ||string_table->dirty_page==dnt", v66);
      free(v65);
      if (__valid_fs(-1))
        v67 = 2989;
      else
        v67 = 3072;
      *(_DWORD *)v67 = -559038737;
      abort();
    }
    if (*(_DWORD *)v13 == -1)
    {
      *(_QWORD *)(v13 + 8) = v37;
      *(_DWORD *)v13 = v72;
    }
    v72 = v43;
    v47 = (char *)(v37 + v40);
    v48 = (void *)(v37 + v40 + v42 + 4);
    if (a2 > 1)
      memcpy(v48, __s, (int)v16);
    else
      strlcpy((char *)v48, __s, (int)v16 + 1);
    memcpy(v47 + 4, a6, v75);
    v50 = v73;
    *(_DWORD *)v47 = v73;
    if (grow_string_table_ptrs(v11, a2))
    {
      os_unfair_lock_unlock(v74);
      return -1;
    }
    v71 = (os_unfair_lock_s *)(v47 + 4);
    *(_DWORD *)(v37 + 8) += v72;
    ++*(_DWORD *)(v13 + 56);
    *(_QWORD *)(*(_QWORD *)(v13 + 32) + 8 * (v50 & 0x7FFFFFFF)) = v47;
    v44 = v74;
    os_unfair_lock_assert_owner(v74);
    if (a2 <= 1)
    {
      *(_BYTE *)(*(_QWORD *)(v13 + 40) + (v50 & 0x7FFFFFFF)) = v8;
      if (a6)
        v51 = v71;
      else
        v51 = 0;
      if (hash_insert_extended(*(_QWORD *)(v13 + 16), (char *)v71 + v75, v51, v47) == 17)
      {
        v52 = __si_assert_copy_extra_2151(0, -1);
        v53 = v52;
        v54 = "";
        if (v52)
          v54 = v52;
        __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 11278, "this_ret!=17", v54);
        goto LABEL_127;
      }
LABEL_115:
      v49 = *(unsigned int *)v47;
      goto LABEL_116;
    }
    if (hash_field_insert(*(pthread_rwlock_t **)(v13 + 16), (unsigned __int8 *)v71, (unsigned __int8 *)v47) != 17)goto LABEL_115;
    v68 = __si_assert_copy_extra_2151(0, -1);
    v53 = v68;
    v69 = "";
    if (v68)
      v69 = v68;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 11281, "this_ret!=17", v69);
LABEL_127:
    free(v53);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (dword_1EF19FCA8 >= 5)
  {
    v62 = *__error();
    v63 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v77 = (char *)v37;
      v78 = 1024;
      v79 = a2;
      _os_log_impl(&dword_1B8270000, v63, OS_LOG_TYPE_DEFAULT, "Grow string table %p (%d)", buf, 0x12u);
    }
    *__error() = v62;
  }
  v44 = v74;
  if ((v7 & 2) != 0)
    v45 = grow_string_table_locked(v11, a2, __s, v16, (uint64_t)a6, v73);
  else
    v45 = grow_string_table(v11, a2, __s, v16, (uint64_t)a6, v73);
  v49 = v45;
LABEL_116:
  os_unfair_lock_unlock(v44);
  if (a2 == 4)
  {
    v55 = *(_QWORD *)(v11 + 968);
    if (v55)
      (*(void (**)(uint64_t, uint64_t))(v55 + 16))(v55, v49);
  }
  if (dword_1EF19FCA8 >= 5)
  {
    v60 = *__error();
    v61 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      v77 = __s;
      v78 = 1024;
      v79 = v49;
      v80 = 1024;
      v81 = a2;
      _os_log_impl(&dword_1B8270000, v61, OS_LOG_TYPE_DEFAULT, "Inserted field name %s with id %d for %d", buf, 0x18u);
    }
    *__error() = v60;
  }
  return v49;
}

char *fastUTF8String(const __CFString *a1, _QWORD *a2, char *a3)
{
  CFTypeID v6;
  const char *CStringPtr;
  const char *v8;
  size_t v9;
  size_t v10;
  CFIndex Length;
  CFIndex v12;
  char *v13;

  v6 = CFGetTypeID(a1);
  if (v6 != CFStringGetTypeID())
    goto LABEL_11;
  CStringPtr = CFStringGetCStringPtr(a1, 0x600u);
  if (!CStringPtr)
  {
    if (CFStringGetCString(a1, a3, 1024, 0x8000100u))
    {
      *a2 = strlen(a3) + 1;
      return a3;
    }
    Length = CFStringGetLength(a1);
    v12 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v13 = (char *)malloc_type_malloc(v12, 0x6522FC6FuLL);
    if (CFStringGetCString(a1, v13, v12, 0x8000100u))
    {
      *a2 = strlen(v13) + 1;
      return v13;
    }
    free(v13);
LABEL_11:
    *a2 = 1;
    *a3 = 0;
    return a3;
  }
  v8 = CStringPtr;
  v9 = strlen(CStringPtr);
  v10 = v9 + 1;
  *a2 = v9 + 1;
  if ((uint64_t)(v9 + 1) >= 1025)
    a3 = (char *)malloc_type_malloc(v9 + 1, 0xF0385B8BuLL);
  memcpy(a3, v8, v10);
  return a3;
}

uint64_t db_delete_field_weak(_DWORD *a1, uint64_t *a2, char *a3, int a4)
{
  char *v5;
  char *v6;
  const char *v7;

  if (*a1 != 1685287992)
  {
    v5 = __si_assert_copy_extra_268();
    v6 = v5;
    if (v5)
      v7 = v5;
    else
      v7 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 366, v7);
    free(v6);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  return _delete_field((uint64_t)a1, *a2, a3, a4 ^ 1u);
}

uint64_t _delete_field(uint64_t a1, uint64_t a2, char *__s, int a4)
{
  int *v6;
  int *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 804) & 8) != 0)
    return 13;
  v17[0] = 0;
  v17[1] = 0;
  v6 = (int *)internal_copy_field_ids(a1, __s, (uint64_t)v17, 4uLL, 0);
  if (!v6)
    return 2;
  v7 = v6;
  v8 = *(unsigned int *)(a2 + 12);
  if (v8 < 0x31)
  {
LABEL_13:
    if (v7 != (int *)v17)
      free(v7);
    return 2;
  }
  v9 = a2 + v8;
  v10 = a2 + 48;
  while (1)
  {
    v12 = *(unsigned int *)(v10 + 8);
    if (v10 + v12 > v9)
    {
      *(_DWORD *)(a2 + 12) = v10 - a2;
      return 2;
    }
    v13 = *v7;
    if (*v7)
      break;
LABEL_6:
    v10 += v12 + 13;
    if (v10 >= v9)
      goto LABEL_13;
  }
  v14 = 1;
  while (*(_DWORD *)(v10 + 4) != v13)
  {
    v13 = v7[v14++];
    if (!v13)
      goto LABEL_6;
  }
  if (a4 && (*(_WORD *)(v10 + 2) & 0x200) != 0)
  {
    if (v17 != (_QWORD *)v7)
      free(v7);
    return 1;
  }
  else
  {
    v15 = v10 + v12;
    v16 = v10 - (v15 + 13);
    memmove((void *)v10, (const void *)(v15 + 13), v9 - (v15 + 13));
    *(_DWORD *)(a2 + 12) += v16;
    if (v17 != (_QWORD *)v7)
      free(v7);
    return 0;
  }
}

uint64_t RLEOIDArrayContainsOid_locked(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  int v3;
  int v4;

  if (*(_BYTE *)(a1 + 384))
    return 0;
  v3 = *(_DWORD *)(a1 + 224);
  if (v3)
  {
    if ((*(_QWORD *)(a1 + 216) ^ a2) >> (-4 * v3))
      return 0;
  }
  result = *(_QWORD *)(a1 + 8 * ((a2 >> ((60 - 4 * v3) & 0xFC)) & 0xF) + 256);
  if ((result & 1) != 0)
  {
    v4 = v3 + 2;
    do
      result = *(_QWORD *)((result & 0xFFFFFFFFFFFFFFFELL) + 8 * ((a2 >> ((64 - 4 * v4++) & 0xFC)) & 0xF));
    while ((result & 1) != 0);
  }
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t SIValueSet<unsigned long long>::_SIValueSetInnerInsert(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned __int16 v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (**v12)();
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFAllocator *v21;

  v5 = a3;
  v7 = 60 - 4 * a3;
  v8 = (60 - 4 * a3) & 0xFC;
  v9 = (a2 >> v8) & 0xF;
  v10 = *(_QWORD *)(a1 + 8 * v9);
  if ((v10 & 1) != 0)
  {
    do
    {
      v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      v7 = 56 - 4 * v5;
      v8 = (56 - 4 * v5) & 0xFC;
      v9 = (a2 >> v8) & 0xF;
      v10 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * v9);
      v5 = (v5 + 1);
    }
    while ((v10 & 1) != 0);
  }
  else
  {
    v11 = a1;
  }
  if ((__int16)v7 < 13)
  {
    if (!v10)
    {
      v10 = (unint64_t)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
      *(_QWORD *)v10 = off_1E6E2A608;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 120) = 0u;
      *(_OWORD *)(v10 + 136) = 0u;
      *(_OWORD *)(v10 + 152) = 0u;
      *(_OWORD *)(v10 + 168) = 0u;
      *(_OWORD *)(v10 + 184) = 0u;
      *(_OWORD *)(v10 + 200) = 0u;
      *(_OWORD *)(v10 + 216) = 0u;
      *(_OWORD *)(v10 + 232) = 0u;
      *(_OWORD *)(v10 + 248) = 0u;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_OWORD *)(v10 + 264) = 0u;
      *(_OWORD *)(v10 + 280) = 0u;
      *(_OWORD *)(v10 + 296) = 0u;
      *(_OWORD *)(v10 + 312) = 0u;
      *(_OWORD *)(v10 + 328) = 0u;
      *(_OWORD *)(v10 + 344) = 0u;
      *(_OWORD *)(v10 + 360) = 0u;
      *(_OWORD *)(v10 + 376) = 0u;
      *(_OWORD *)(v10 + 392) = 0u;
      *(_OWORD *)(v10 + 408) = 0u;
      *(_OWORD *)(v10 + 424) = 0u;
      *(_OWORD *)(v10 + 440) = 0u;
      *(_OWORD *)(v10 + 456) = 0u;
      *(_OWORD *)(v10 + 472) = 0u;
      *(_OWORD *)(v10 + 488) = 0u;
      *(_OWORD *)(v10 + 504) = 0u;
      *(_QWORD *)(v11 + 8 * v9) = v10;
    }
    v13 = a2 & ~(-1 << v8);
    v14 = (__int16)v13 >> 6;
    v15 = 1 << v13;
    v16 = (char *)(v10 + 8 * (__int16)v14);
    v19 = *((_QWORD *)v16 + 1);
    v17 = (uint64_t *)(v16 + 8);
    v18 = v19;
    if ((v19 & v15) != 0)
    {
      return 0;
    }
    else
    {
      *v17 = v18 | v15;
      return 1;
    }
  }
  else
  {
    if (v10)
    {
      v12 = *(uint64_t (***)())v10;
    }
    else
    {
      if (v7 < 0x20u)
      {
        v21 = *(const __CFAllocator **)(a4 + 16);
        if (v7 < 0x10u)
        {
          v10 = (unint64_t)CFAllocatorAllocate(v21, 136, 0);
          v12 = off_1E6E2A780;
          *(_QWORD *)v10 = off_1E6E2A780;
          *(_OWORD *)(v10 + 8) = 0u;
          *(_OWORD *)(v10 + 24) = 0u;
          *(_OWORD *)(v10 + 40) = 0u;
          *(_OWORD *)(v10 + 56) = 0u;
          *(_OWORD *)(v10 + 72) = 0u;
          *(_OWORD *)(v10 + 88) = 0u;
          *(_OWORD *)(v10 + 104) = 0u;
          *(_OWORD *)(v10 + 120) = 0u;
        }
        else
        {
          v10 = (unint64_t)CFAllocatorAllocate(v21, 264, 0);
          v12 = off_1E6E2A6E0;
          *(_QWORD *)v10 = off_1E6E2A6E0;
          *(_OWORD *)(v10 + 8) = 0u;
          *(_OWORD *)(v10 + 24) = 0u;
          *(_OWORD *)(v10 + 40) = 0u;
          *(_OWORD *)(v10 + 56) = 0u;
          *(_OWORD *)(v10 + 72) = 0u;
          *(_OWORD *)(v10 + 88) = 0u;
          *(_OWORD *)(v10 + 104) = 0u;
          *(_OWORD *)(v10 + 120) = 0u;
          *(_OWORD *)(v10 + 136) = 0u;
          *(_OWORD *)(v10 + 152) = 0u;
          *(_OWORD *)(v10 + 168) = 0u;
          *(_OWORD *)(v10 + 184) = 0u;
          *(_OWORD *)(v10 + 200) = 0u;
          *(_OWORD *)(v10 + 216) = 0u;
          *(_OWORD *)(v10 + 232) = 0u;
          *(_OWORD *)(v10 + 248) = 0u;
        }
      }
      else
      {
        v10 = (unint64_t)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
        v12 = off_1E6E2A820;
        *(_QWORD *)v10 = off_1E6E2A820;
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 40) = 0u;
        *(_OWORD *)(v10 + 56) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        *(_OWORD *)(v10 + 88) = 0u;
        *(_OWORD *)(v10 + 104) = 0u;
        *(_OWORD *)(v10 + 120) = 0u;
        *(_OWORD *)(v10 + 136) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 168) = 0u;
        *(_OWORD *)(v10 + 184) = 0u;
        *(_OWORD *)(v10 + 200) = 0u;
        *(_OWORD *)(v10 + 216) = 0u;
        *(_OWORD *)(v10 + 232) = 0u;
        *(_OWORD *)(v10 + 248) = 0u;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 264) = 0u;
        *(_OWORD *)(v10 + 280) = 0u;
        *(_OWORD *)(v10 + 296) = 0u;
        *(_OWORD *)(v10 + 312) = 0u;
        *(_OWORD *)(v10 + 328) = 0u;
        *(_OWORD *)(v10 + 344) = 0u;
        *(_OWORD *)(v10 + 360) = 0u;
        *(_OWORD *)(v10 + 376) = 0u;
        *(_OWORD *)(v10 + 392) = 0u;
        *(_OWORD *)(v10 + 408) = 0u;
        *(_OWORD *)(v10 + 424) = 0u;
        *(_OWORD *)(v10 + 440) = 0u;
        *(_OWORD *)(v10 + 456) = 0u;
        *(_OWORD *)(v10 + 472) = 0u;
        *(_OWORD *)(v10 + 488) = 0u;
        *(_OWORD *)(v10 + 504) = 0u;
      }
      *(_QWORD *)(v11 + 8 * v9) = v10;
    }
    v20 = ((uint64_t (*)(unint64_t, unint64_t, uint64_t))*v12)(v10, a2, ~(-1 << v8));
    if ((unint64_t)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 56))(v10) >= 0x3E)
      *(_QWORD *)(v11 + 8 * v9) = SIValueSet<unsigned long long>::_SIValueSetBurstRLE(v10, v5, a4);
  }
  return v20;
}

uint64_t SIValueSet<unsigned long long>::SIValueSetInsert(unint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  _OWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;
  uint64_t v18;
  char *v19;
  char *v20;
  const char *v21;
  char *v23;
  char *v24;
  const char *v25;
  uint64_t v26;

  v4 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v4)
  {
    v5 = 4 * v4;
    v6 = *a1;
    if ((*a1 ^ a2) >> (-4 * v4))
    {
      v7 = a1 + 5;
      do
      {
        v17 = *((_DWORD *)a1 + 2);
        *((_DWORD *)a1 + 2) = v17 - 1;
        if (v17 <= 0)
        {
          v23 = __si_assert_copy_extra_268();
          v24 = v23;
          v25 = "";
          if (v23)
            v25 = v23;
          __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 1650, "s->sharedDepth>=0", v25);
          free(v24);
          if (__valid_fs(-1))
            v26 = 2989;
          else
            v26 = 3072;
          *(_DWORD *)v26 = -559038737;
          abort();
        }
        if (v17 == 1)
          v18 = 0;
        else
          v18 = -1 << (-4 * (v17 - 1));
        *a1 = v6 & v18;
        v9 = a1[3];
        if (v9 == 63 || (v8 = (_QWORD *)a1[2]) == 0)
        {
          v8 = CFAllocatorAllocate((CFAllocatorRef)a1[4], 8072, 0);
          *v8 = a1[2];
          bzero(v8 + 1, 0x1F80uLL);
          v9 = 0;
          a1[2] = (unint64_t)v8;
        }
        a1[3] = v9 + 1;
        v10 = *v7;
        v11 = *(_OWORD *)(a1 + 7);
        v12 = *(_OWORD *)(a1 + 9);
        v13 = &v8[16 * v9];
        *(_OWORD *)(v13 + 7) = *(_OWORD *)(a1 + 11);
        *(_OWORD *)(v13 + 5) = v12;
        *(_OWORD *)(v13 + 3) = v11;
        *(_OWORD *)(v13 + 1) = v10;
        v14 = *(_OWORD *)(a1 + 13);
        v15 = *(_OWORD *)(a1 + 15);
        v16 = *(_OWORD *)(a1 + 17);
        *(_OWORD *)(v13 + 15) = *(_OWORD *)(a1 + 19);
        *(_OWORD *)(v13 + 13) = v16;
        *(_OWORD *)(v13 + 11) = v15;
        *(_OWORD *)(v13 + 9) = v14;
        *(_OWORD *)(a1 + 9) = 0u;
        *(_OWORD *)(a1 + 11) = 0u;
        *(_OWORD *)(a1 + 13) = 0u;
        *(_OWORD *)(a1 + 15) = 0u;
        *(_OWORD *)(a1 + 17) = 0u;
        *(_OWORD *)(a1 + 19) = 0u;
        *v7 = 0u;
        *(_OWORD *)(a1 + 7) = 0u;
        *((_QWORD *)v7 + ((v6 >> ((64 - 4 * v17) & 0xFC)) & 0xF)) = (unint64_t)(v13 + 1) | 1;
        v6 = *a1;
      }
      while (*a1 != (v18 & a2));
      v4 = *((unsigned int *)a1 + 2);
      v5 = 4 * v4;
    }
    if ((v5 - 61) <= 0xFFFFFFBE)
    {
      v19 = __si_assert_copy_extra_268();
      v20 = v19;
      v21 = "";
      if (v19)
        v21 = v19;
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 1670, "((sizeof(ValueType) * 8) -4*(1+(s->sharedDepth))) <= sizeof(ValueType)*8", v21);
      free(v20);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
  }
  else if (*((_BYTE *)a1 + 168))
  {
    v4 = 12;
    *((_DWORD *)a1 + 2) = 12;
    *a1 = a2 & 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v4 = 0;
  }
  *((_BYTE *)a1 + 168) = 0;
  return SIValueSet<unsigned long long>::_SIValueSetInnerInsert((unint64_t)(a1 + 5), a2, v4, (uint64_t)(a1 + 2));
}

uint64_t ci_donebits_push(os_unfair_lock_s *a1, unint64_t a2, unint64_t a3, uint32_t a4, unint64_t *a5)
{
  uint64_t *v10;
  float v11;
  float v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __n128 *v19;
  __int128 *v20;
  unsigned int v21;
  float v22;
  unsigned int v23;
  float v24;
  float v25;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t *v36;
  float v37;
  float v38;
  int v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  __n128 *v46;
  __int128 *v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  float v52;
  float v53;
  float v54;
  unint64_t v55;
  unint64_t v56;
  unsigned int v57;
  float v58;
  BOOL v59;
  BOOL v61;
  uint32_t os_unfair_lock_opaque;
  int v63;
  os_unfair_lock_s *v64;
  _DWORD *v65;
  os_unfair_lock_s *v66;
  _DWORD *v67;
  unint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  unsigned int v73;
  float v74;
  float v75;
  _DWORD *v76;
  unint64_t *v77;
  float v78;
  float v80;
  int v81;
  __int128 v82;
  int v83;
  os_unfair_lock_s *v84;
  _DWORD *v85;
  os_unfair_lock_s *v86;
  _DWORD *v87;
  unint64_t v88;
  unsigned int v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  float v97;
  _DWORD *v98;
  _DWORD *v99;
  unint64_t v100;
  unint64_t v101;
  _DWORD *v102;
  BOOL v103;
  float v104;
  int v105;
  __int128 v109;
  __int128 v110;
  _OWORD v111[5];
  _OWORD v112[5];
  _OWORD v113[5];
  _OWORD v114[5];
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock(a1);
  if (!a2)
    goto LABEL_38;
  if (a1[1]._os_unfair_lock_opaque <= a4)
    goto LABEL_53;
  v10 = *(uint64_t **)&a1[8 * a4 + 10]._os_unfair_lock_opaque;
  if (!v10)
    goto LABEL_53;
  v12 = *((float *)a5 + 15);
  v11 = *((float *)a5 + 16);
  if (*((_BYTE *)a5 + 69))
  {
    v13 = v10 + 1;
    if (v12 != v11)
      v10 += 2;
    if (v11 == 0.0)
      v10 = v13;
  }
  else
  {
    v14 = v10 + 1;
    if (v12 != v11)
      v10 += 2;
    if (*(_OWORD *)a5 == 0)
      v10 = v14;
  }
  v15 = *v10;
  if (*v10)
    v16 = *(_QWORD *)(v15 + 16) - 1;
  else
    v16 = 0;
  if (v16 < a2)
  {
    v17 = *((_OWORD *)a5 + 3);
    v113[2] = *((_OWORD *)a5 + 2);
    v113[3] = v17;
    v113[4] = *((_OWORD *)a5 + 4);
    v18 = *((_OWORD *)a5 + 1);
    v113[0] = *(_OWORD *)a5;
    v113[1] = v18;
    v19 = (__n128 *)v113;
LABEL_37:
    L1RankQueuePush(v15, v19);
    goto LABEL_38;
  }
  v20 = &ZERO_RANKING_WRAPPED_BITS;
  if (*(_QWORD *)v15)
    v20 = (__int128 *)(*(_QWORD *)v15 + 80);
  v21 = *((_DWORD *)v20 + 12);
  v22 = *((float *)v20 + 13);
  v23 = *((_DWORD *)a5 + 12);
  v24 = *((float *)a5 + 13);
  if (*((unsigned __int8 *)v20 + 69) | *((unsigned __int8 *)a5 + 69))
  {
    v25 = *((float *)v20 + 15);
    if (v12 <= v25)
    {
      if (v12 != v25)
        goto LABEL_53;
      if (v24 > v22)
        goto LABEL_36;
      if (v24 == v22 && v23 < v21)
        goto LABEL_36;
      if (v11 != *((float *)v20 + 16) || v23 != v21)
      {
LABEL_53:
        v33 = 0;
        if (!a3)
          goto LABEL_95;
        goto LABEL_54;
      }
      goto LABEL_52;
    }
LABEL_36:
    L1RankQueuePop(&v115, (__n128 **)v15);
    v31 = *((_OWORD *)a5 + 3);
    v114[2] = *((_OWORD *)a5 + 2);
    v114[3] = v31;
    v114[4] = *((_OWORD *)a5 + 4);
    v32 = *((_OWORD *)a5 + 1);
    v114[0] = *(_OWORD *)a5;
    v114[1] = v32;
    v19 = (__n128 *)v114;
    goto LABEL_37;
  }
  v30 = v20;
  v29 = *(_QWORD *)v20;
  v28 = *((_QWORD *)v30 + 1);
  if (__PAIR128__(v28, v29) < *(_OWORD *)a5)
    goto LABEL_36;
  if (a5[1] != v28 || *a5 != v29)
    goto LABEL_53;
  if (v24 > v22)
    goto LABEL_36;
  if (v24 == v22 && v23 < v21)
    goto LABEL_36;
  if (v23 != v21)
    goto LABEL_53;
LABEL_52:
  if (v24 != v22)
    goto LABEL_53;
LABEL_38:
  v33 = 1;
  if (!a3)
    goto LABEL_95;
LABEL_54:
  if (a3 >= a2)
    goto LABEL_95;
  if (a1[1]._os_unfair_lock_opaque <= a4)
    goto LABEL_94;
  v36 = *(uint64_t **)&a1[8 * a4 + 12]._os_unfair_lock_opaque;
  if (!v36)
    goto LABEL_94;
  v37 = *((float *)a5 + 15);
  v38 = *((float *)a5 + 16);
  v39 = *((unsigned __int8 *)a5 + 69);
  if (*((_BYTE *)a5 + 69))
  {
    v40 = v36 + 1;
    if (v37 != v38)
      v36 += 2;
    if (v38 == 0.0)
      v36 = v40;
  }
  else
  {
    v41 = v36 + 1;
    if (v37 != v38)
      v36 += 2;
    if (*(_OWORD *)a5 == 0)
      v36 = v41;
  }
  v42 = *v36;
  if (*v36)
    v43 = *(_QWORD *)(v42 + 16) - 1;
  else
    v43 = 0;
  if (v43 < a3)
  {
    v44 = *((_OWORD *)a5 + 3);
    v111[2] = *((_OWORD *)a5 + 2);
    v111[3] = v44;
    v111[4] = *((_OWORD *)a5 + 4);
    v45 = *((_OWORD *)a5 + 1);
    v111[0] = *(_OWORD *)a5;
    v111[1] = v45;
    v46 = (__n128 *)v111;
LABEL_72:
    L1RankQueuePush(v42, v46);
    goto LABEL_95;
  }
  if (*(_QWORD *)v42)
    v47 = (__int128 *)(*(_QWORD *)v42 + 80);
  else
    v47 = &ZERO_RANKING_WRAPPED_BITS;
  v48 = *((unsigned __int8 *)v47 + 69);
  v50 = *(_QWORD *)v47;
  v49 = *((_QWORD *)v47 + 1);
  v51 = *((_DWORD *)v47 + 12);
  v52 = *((float *)v47 + 13);
  v53 = *((float *)v47 + 15);
  v54 = *((float *)v47 + 16);
  v56 = *a5;
  v55 = a5[1];
  v57 = *((_DWORD *)a5 + 12);
  v58 = *((float *)a5 + 13);
  if (!(v39 | v48))
  {
    if (__PAIR128__(v55, v56) >= __PAIR128__(v49, v50))
    {
      v59 = v49 == v55 && v50 == v56;
      goto LABEL_82;
    }
LABEL_94:
    v33 = 0;
    goto LABEL_95;
  }
  v59 = v53 == v37;
  if (v53 > v37)
    goto LABEL_94;
LABEL_82:
  if (v59)
  {
    if (v52 > v58)
      goto LABEL_94;
    if (v52 == v58 && v51 < v57)
      goto LABEL_94;
  }
  if (v48 | v39)
    v61 = v37 == v53 && v38 == v54;
  else
    v61 = v55 == v49 && v56 == v50;
  if (!v61 || v57 != v51 || v58 != v52)
  {
    L1RankQueuePop(&v115, (__n128 **)v42);
    v109 = *((_OWORD *)a5 + 3);
    v112[2] = *((_OWORD *)a5 + 2);
    v112[3] = v109;
    v112[4] = *((_OWORD *)a5 + 4);
    v110 = *((_OWORD *)a5 + 1);
    v112[0] = *(_OWORD *)a5;
    v112[1] = v110;
    v46 = (__n128 *)v112;
    goto LABEL_72;
  }
LABEL_95:
  if (!(a3 | a2))
    goto LABEL_148;
  os_unfair_lock_opaque = a1[1]._os_unfair_lock_opaque;
  if (os_unfair_lock_opaque > a4)
  {
    v63 = *((_DWORD *)a5 + 14);
    if (v63)
    {
      v64 = &a1[8 * a4];
      v67 = *(_DWORD **)&v64[14]._os_unfair_lock_opaque;
      v66 = v64 + 14;
      v65 = v67;
      if (!v67)
      {
        if (a3)
          v68 = a3;
        else
          v68 = a2;
        if (v68 >= 0x19)
          v69 = 25;
        else
          v69 = v68;
        v65 = container_table_create(v69);
        *(_QWORD *)&v66->_os_unfair_lock_opaque = v65;
        v63 = *((_DWORD *)a5 + 14);
      }
      v71 = *a5;
      v70 = a5[1];
      v72 = *((_OWORD *)a5 + 2);
      v115 = *((_OWORD *)a5 + 1);
      v116 = v72;
      v73 = *((_DWORD *)a5 + 12);
      v74 = *((float *)a5 + 13);
      v75 = *((float *)a5 + 15);
      v117 = *((_OWORD *)a5 + 4);
      if (!*v65)
        goto LABEL_121;
      v76 = &v65[20 * ((v63 - 1) % *v65)];
      v77 = (unint64_t *)(v76 + 4);
      if (*((_BYTE *)v76 + 85))
      {
        v78 = *((float *)v76 + 19);
        if (v78 < v75)
          goto LABEL_122;
        if (v78 != v75)
        {
LABEL_120:
          if (v76[18])
          {
LABEL_121:
            v81 = 0;
LABEL_123:
            v33 = v33 | v81;
            os_unfair_lock_opaque = a1[1]._os_unfair_lock_opaque;
            goto LABEL_124;
          }
LABEL_122:
          *v77 = v71;
          *((_QWORD *)v76 + 3) = v70;
          v82 = v116;
          *((_OWORD *)v76 + 2) = v115;
          *((_OWORD *)v76 + 3) = v82;
          v76[16] = v73;
          *((float *)v76 + 17) = v74;
          v76[18] = v63;
          *((float *)v76 + 19) = v75;
          v81 = 1;
          *((_OWORD *)v76 + 5) = v117;
          goto LABEL_123;
        }
      }
      else
      {
        if (*(_OWORD *)v77 < __PAIR128__(v70, v71))
          goto LABEL_122;
        if (*((_QWORD *)v76 + 3) != v70 || *v77 != v71)
          goto LABEL_120;
      }
      v80 = *((float *)v76 + 17);
      if (v80 < v74 || v80 == v74 && v76[16] > v73)
        goto LABEL_122;
      goto LABEL_120;
    }
  }
LABEL_124:
  if (os_unfair_lock_opaque > a4)
  {
    v83 = *((_DWORD *)a5 + 14);
    if (v83)
    {
      v84 = &a1[8 * a4];
      v87 = *(_DWORD **)&v84[16]._os_unfair_lock_opaque;
      v86 = v84 + 16;
      v85 = v87;
      if (!v87)
      {
        if (a3)
          v88 = a3;
        else
          v88 = a2;
        if (v88 >= 0x19)
          v89 = 25;
        else
          v89 = v88;
        v85 = container_table_create(v89);
        *(_QWORD *)&v86->_os_unfair_lock_opaque = v85;
        v83 = *((_DWORD *)a5 + 14);
      }
      v91 = *a5;
      v90 = a5[1];
      v93 = a5[2];
      v92 = a5[3];
      v95 = a5[4];
      v94 = a5[5];
      v96 = *((_DWORD *)a5 + 12);
      v97 = *((float *)a5 + 13);
      v115 = *(_OWORD *)((char *)a5 + 60);
      LODWORD(v116) = *((_DWORD *)a5 + 19);
      if (*v85
        && ((v98 = &v85[20 * ((v83 - 1) % *v85)],
             v99 = v98 + 4,
             v102 = v98 + 8,
             v100 = *((_QWORD *)v98 + 4),
             v101 = *((_QWORD *)v102 + 1),
             __PAIR128__(v101, v100) < __PAIR128__(v92, v93))
         || (v101 == v92 ? (v103 = v100 == v93) : (v103 = 0),
             v103 && ((v104 = *((float *)v99 + 13), v104 < v97) || v104 == v97 && v99[12] > v96) || !v99[14])))
      {
        *(_QWORD *)v99 = v91;
        *((_QWORD *)v99 + 1) = v90;
        *((_QWORD *)v99 + 2) = v93;
        *((_QWORD *)v99 + 3) = v92;
        *((_QWORD *)v99 + 4) = v95;
        *((_QWORD *)v99 + 5) = v94;
        v99[12] = v96;
        *((float *)v99 + 13) = v97;
        v99[14] = v83;
        *(_OWORD *)(v99 + 15) = v115;
        v105 = 1;
        v99[19] = v116;
      }
      else
      {
        v105 = 0;
      }
      v33 = v33 | v105;
    }
  }
LABEL_148:
  os_unfair_lock_unlock(a1);
  return v33;
}

__n128 L1RankQueuePush(uint64_t a1, __n128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __n128 *v10;
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  BOOL v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v26 = a2[2];
  v27 = a2[3];
  v28 = a2[4];
  v24 = *a2;
  v25 = a2[1];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = v4;
  if ((uint64_t)(v4 + 2) >= v3)
  {
    v6 = 2 * v3;
    if (v3 < 4)
      v6 = 4;
    *(_QWORD *)(a1 + 8) = v6;
    v7 = 80 * v6 + 160;
    if (*(_QWORD *)a1)
      v8 = malloc_type_zone_realloc((malloc_zone_t *)queryZone, *(void **)a1, v7, 0xECA6AA46uLL);
    else
      v8 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v7, 0x8DDAA030uLL);
    v9 = v8;
    if (!v8)
      _log_fault_for_malloc_failure();
    *(_QWORD *)a1 = v9;
    v9[4] = xmmword_1B86285E0;
    v9[2] = xmmword_1B86285C0;
    v9[3] = unk_1B86285D0;
    *v9 = ZERO_RANKING_WRAPPED_BITS;
    v9[1] = *(_OWORD *)algn_1B86285B0;
    v5 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = v5 + 1;
  v10 = (__n128 *)(*(_QWORD *)a1 + 80 * v4);
  v10[2] = v26;
  v10[3] = v27;
  v10[4] = v28;
  result = v25;
  *v10 = v24;
  v10[1] = v25;
  if ((uint64_t)v4 >= 2)
  {
    do
    {
      v12 = *(_QWORD *)a1 + 80 * v4;
      result.n128_u32[0] = *(_DWORD *)(v12 + 52);
      v13 = *(_QWORD *)a1 + 80 * (v4 >> 1);
      v14 = *(float *)(v13 + 52);
      if (*(_BYTE *)(v12 + 69))
      {
        v15 = *(float *)(v12 + 60);
        v16 = *(float *)(v13 + 60);
        if (v15 < v16)
          goto LABEL_27;
        if (v15 != v16)
          return result;
      }
      else
      {
        if (*(_OWORD *)v12 < *(_OWORD *)v13)
          goto LABEL_27;
        if (*(_QWORD *)(v12 + 8) != *(_QWORD *)(v13 + 8) || *(_QWORD *)v12 != *(_QWORD *)v13)
          return result;
      }
      if (result.n128_f32[0] >= v14 && (result.n128_f32[0] != v14 || *(_DWORD *)(v12 + 48) < *(_DWORD *)(v13 + 48)))
        return result;
LABEL_27:
      v31 = *(_OWORD *)(v12 + 32);
      v32 = *(_OWORD *)(v12 + 48);
      v33 = *(_OWORD *)(v12 + 64);
      v29 = *(_OWORD *)v12;
      v30 = *(__n128 *)(v12 + 16);
      *(_OWORD *)v12 = *(_OWORD *)v13;
      v19 = *(_OWORD *)(v13 + 64);
      v21 = *(_OWORD *)(v13 + 16);
      v20 = *(_OWORD *)(v13 + 32);
      *(_OWORD *)(v12 + 48) = *(_OWORD *)(v13 + 48);
      *(_OWORD *)(v12 + 64) = v19;
      *(_OWORD *)(v12 + 16) = v21;
      *(_OWORD *)(v12 + 32) = v20;
      v22 = (_OWORD *)(*(_QWORD *)a1 + 80 * (v4 >> 1));
      v22[2] = v31;
      v22[3] = v32;
      v22[4] = v33;
      result = v30;
      *v22 = v29;
      v22[1] = v30;
      v23 = v4 > 3;
      v4 >>= 1;
    }
    while (v23);
  }
  return result;
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::AddKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v39;
  int v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  BOOL v55;
  _DWORD *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  const char *v60;
  char *v61;
  const char *v62;
  unint64_t v63;
  unsigned int *v64;
  char *v66;
  char *v67;
  const char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  const char *v72;
  uint64_t v73;
  _DWORD *v75;
  unint64_t v76;
  void *v77;
  void *v78;
  unsigned int *v79;
  unsigned int *v80;
  uint64_t v81;

  v3 = a3 & a2;
  v81 = a3 & a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = a1 + 12 + 4 * v4;
  if (v4 >= 3)
  {
    v7 = 4 * v4;
    v8 = a1 + 12 + 4 * v4;
    v6 = (unsigned int *)(a1 + 12);
    do
    {
      v9 = &v6[v7 >> 3];
      v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        v11 = *--v9;
        v10 = v11;
      }
      if (v9 <= v6)
        break;
      if (v10 == v3)
      {
        v6 = v9;
        break;
      }
      if (v10 > v3)
        v8 = (unint64_t)v9;
      else
        v6 = v9;
      v7 = v8 - (_QWORD)v6;
    }
    while (v8 > (unint64_t)v6 && (unint64_t)v7 > 0xB);
  }
  else
  {
    v6 = (unsigned int *)(a1 + 12);
  }
  v73 = a1 + 12;
  v13 = 0;
  v14 = 0;
  v15 = a1 + 264;
  v16 = (unsigned int *)&v81;
  v17 = v6;
  v18 = 1;
  while (2)
  {
    v19 = 0;
    v20 = 0;
    v21 = v6;
    while (1)
    {
      if ((unint64_t)v21 >= v5)
      {
        v16 += 2;
        v44 = (uint64_t *)(v16 - 2);
        if (!v20)
        {
          while (1)
          {
            v20 = 1;
            v19 = v3;
            v51 = 1;
LABEL_82:
            if (v3 != *(_DWORD *)v44)
              break;
            v14 += v51;
            if (v44 >= &v81)
            {
              v43 = 0;
              v34 = (v13 + 1);
              if ((unint64_t)v21 >= v5)
                goto LABEL_105;
              goto LABEL_95;
            }
            v52 = *v16;
            v16 += 2;
            v3 = v52;
            ++v18;
            v13 = (v13 + 1);
            v44 = (uint64_t *)(v16 - 2);
            if (v20)
              goto LABEL_67;
          }
LABEL_122:
          v58 = __si_assert_copy_extra_268();
          v59 = v58;
          v60 = "";
          if (v58)
            v60 = v58;
          __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", v60);
LABEL_125:
          free(v59);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
LABEL_67:
        v45 = v3 + 1;
        v46 = v20 + v19;
        if (v46 >= v3 && v45 >= v19)
        {
          v48 = v19 > v3;
          if (v19 <= v3)
          {
            v49 = 0;
          }
          else
          {
            v19 = v3;
            v20 = v46 - 1;
            v49 = 1;
          }
          if (v48)
            v46 = v46 - 1 + v3;
          v50 = v20 + v45 - v46;
          if (v46 > v3)
          {
            v51 = v49;
          }
          else
          {
            v20 = v50;
            v51 = 1;
          }
          goto LABEL_82;
        }
        v43 = 1;
        v16 = (unsigned int *)v44;
        v34 = v13;
        if ((unint64_t)v21 >= v5)
          goto LABEL_105;
      }
      else
      {
        v29 = *v21;
        if (v3 >= *v21)
        {
          v43 = 1;
          goto LABEL_96;
        }
        v33 = v16 + 2;
        while (1)
        {
          v34 = v13;
          v16 = v33;
          v35 = (uint64_t *)(v33 - 2);
          if (v20)
          {
            v36 = v3 + 1;
            v37 = v20 + v19;
            if (v37 < v3 || v36 < v19)
            {
              v43 = 1;
              v16 = (unsigned int *)v35;
              if ((unint64_t)v21 >= v5)
                goto LABEL_105;
              goto LABEL_95;
            }
            v39 = v19 > v3;
            if (v19 <= v3)
            {
              v40 = 0;
            }
            else
            {
              v19 = v3;
              v20 = v37 - 1;
              v40 = 1;
            }
            if (v39)
              v37 = v37 - 1 + v3;
            v41 = v20 + v36 - v37;
            if (v37 > v3)
            {
              v42 = v40;
            }
            else
            {
              v20 = v41;
              v42 = 1;
            }
          }
          else
          {
            v20 = 1;
            v19 = v3;
            v42 = 1;
          }
          if (v3 != *(_DWORD *)v35)
            goto LABEL_122;
          v14 += v42;
          if (v35 >= &v81)
            break;
          v33 = v16 + 2;
          v3 = *v16;
          ++v18;
          v13 = (v13 + 1);
          if (v29 <= *v16)
          {
            v43 = 1;
            goto LABEL_92;
          }
        }
        v43 = 0;
LABEL_92:
        v34 = (v34 + 1);
        if ((unint64_t)v21 >= v5)
        {
LABEL_105:
          v13 = v34;
          goto LABEL_106;
        }
      }
LABEL_95:
      v29 = *v21;
      v13 = v34;
LABEL_96:
      if ((unint64_t)(v21 + 1) < v5)
        break;
      v22 = 1;
      v23 = 1;
      if (v20)
        goto LABEL_23;
LABEL_39:
      v21 += v22;
      if (v23 + (unint64_t)v29 >= v3)
        v32 = v43;
      else
        v32 = 0;
      v19 = v29;
      v20 = v23;
      if ((v32 & 1) == 0)
        goto LABEL_107;
    }
    v53 = v21[1];
    v54 = v53 & 0x7FFFFFFF;
    v55 = v53 >= 0;
    if (v53 < 0)
      v22 = 2;
    else
      v22 = 1;
    if (v55)
      v23 = 1;
    else
      v23 = v54 + 1;
    if (!v20)
      goto LABEL_39;
LABEL_23:
    v24 = v23 + v29;
    v25 = v20 + v19;
    if (v25 >= v29 && v24 >= v19)
    {
      v27 = v20 - v23 + v19 + v29;
      v28 = v19 > v29;
      if (v19 < v29)
        v29 = v19;
      if (v28)
        v30 = v20 - v23 + v19;
      else
        v30 = v20;
      if (v28)
        v31 = v27;
      else
        v31 = v25;
      if (v24 > v31)
        v23 = v30 + v24 - v31;
      else
        v23 = v30;
      goto LABEL_39;
    }
LABEL_106:
    v29 = v19;
    v23 = v20;
LABEL_107:
    if (v23 == 1)
    {
      if (v17 < v21)
      {
        v6 = v21;
        goto LABEL_19;
      }
      if (v5 + 8 <= v15)
      {
        v6 = (unsigned int *)(v15 - (v5 - (_QWORD)v21));
        if ((unsigned int *)v5 == v21)
        {
          v5 = v15;
        }
        else
        {
          v77 = (void *)(v15 - (v5 - (_QWORD)v21));
          v79 = v17;
          v57 = v15;
          memmove(v77, v21, v5 - (_QWORD)v21);
          v6 = (unsigned int *)v77;
          v17 = v79;
          v15 = v57;
          v5 = v57;
        }
LABEL_19:
        *v17++ = v29;
        if (!v43)
          goto LABEL_128;
        goto LABEL_20;
      }
LABEL_144:
      v70 = __si_assert_copy_extra_268();
      v71 = v70;
      if (v70)
        v72 = v70;
      else
        v72 = "";
      __message_assert("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, v72);
      free(v71);
LABEL_141:
      v69 = 2989;
LABEL_143:
      *(_DWORD *)v69 = -559038737;
      abort();
    }
    if (v23)
    {
      v56 = v17 + 1;
      if (v17 + 1 < v21)
      {
        v6 = v21;
        goto LABEL_119;
      }
      if (v5 + 8 > v15)
        goto LABEL_144;
      v6 = (unsigned int *)(v15 - (v5 - (_QWORD)v21));
      if ((unsigned int *)v5 != v21)
      {
        v78 = (void *)(v15 - (v5 - (_QWORD)v21));
        v80 = v17;
        v75 = v17 + 1;
        v76 = v15;
        memmove(v78, v21, v5 - (_QWORD)v21);
        v56 = v75;
        v15 = v76;
        v6 = (unsigned int *)v78;
        v17 = v80;
      }
      v5 = v15;
LABEL_119:
      *v17 = v29;
      v17[1] = (v23 - 1) | 0x80000000;
      v17 = v56 + 1;
      if (!v43)
      {
LABEL_128:
        v21 = v6;
        goto LABEL_134;
      }
LABEL_20:
      if ((unint64_t)v17 + v5 - (_QWORD)v6 + 8 > v15)
        goto LABEL_130;
      continue;
    }
    break;
  }
  v6 = v21;
  if (v43)
  {
LABEL_130:
    if ((int)v13 >= v18)
    {
      v61 = __si_assert_copy_extra_268();
      v59 = v61;
      v62 = "";
      if (v61)
        v62 = v61;
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 810, "popped<peeked", v62);
      goto LABEL_125;
    }
  }
  else
  {
LABEL_134:
    v6 = v21;
    if ((_DWORD)v13 != v18)
    {
      v66 = __si_assert_copy_extra_268();
      v67 = v66;
      v68 = "";
      if (v66)
        v68 = v66;
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", v68);
      free(v67);
      if (__valid_fs(-1))
        goto LABEL_141;
      v69 = 3072;
      goto LABEL_143;
    }
  }
  v63 = v5 - (_QWORD)v6;
  if (v5 > (unint64_t)v6)
  {
    v64 = v17;
    memmove(v17, v6, v5 - (_QWORD)v6);
    v17 = (unsigned int *)((char *)v64 + v63);
  }
  *(_DWORD *)(a1 + 8) = ((unint64_t)v17 - v73) >> 2;
  return v14 != 0;
}

void PartialQueryResults::setupCannedAttributeVector(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v8;
  size_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char **v16;

  v8 = *(_QWORD *)(a1 + 232);
  v9 = 8 * v8;
  if (((v8 >> 14) & 0x7FFFFFFFFFFFLL) == 0 && v9 > *MEMORY[0x1E0C85AD8])
    ++sTotal;
  v11 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v9, 0x31F9A007uLL);
  if (!v11)
    _log_fault_for_malloc_failure();
  *a3 = v11;
  v12 = *(_QWORD *)(a1 + 232);
  if (v12 < 1)
  {
    v14 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = (const char *)strlen(*(const char **)(a2 + 8 * v13));
      v16 = CannedFieldTable::in_word_set(*(CannedFieldTable **)(a2 + 8 * v13), v15);
      if (v16)
      {
        *(_QWORD *)(*a3 + 8 * v13) = v16[1];
        ++v14;
      }
      ++v13;
    }
    while (v12 != v13);
  }
  *a4 = v14;
}

void PartialQueryResults::setupFixedFunctionVector(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  size_t v7;
  _DWORD *v9;
  uint64_t i;
  const char *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  int v15;

  v6 = *(_QWORD *)(a1 + 232);
  v7 = 4 * v6;
  if (((v6 >> 15) & 0x7FFFFFFFFFFFLL) == 0 && v7 > *MEMORY[0x1E0C85AD8])
    ++sTotal;
  v9 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, v7, 0x31F9A007uLL);
  if (!v9)
    _log_fault_for_malloc_failure();
  *a3 = v9;
  if (*(uint64_t *)(a1 + 232) >= 1)
  {
    for (i = 0; *(_QWORD *)(a1 + 232) > i; ++i)
    {
      v11 = *(const char **)(a2 + 8 * i);
      if (!strncmp(v11, "kMDQueryResult", 0xEuLL))
      {
        v12 = v11 + 14;
        if (!strcmp(v12, "SpotlightRelevance"))
        {
          v15 = 1;
        }
        else if (!strcmp(v12, "GroupId"))
        {
          v15 = 3;
        }
        else if (!strcmp(v12, "MatchedExtraQueriesField") || !strcmp(v12, "MenuRelevance"))
        {
          v15 = 2;
        }
        else if (!strcmp(v12, "NewMatchedExtraQueriesField"))
        {
          v15 = 5;
        }
        else if (!strcmp(v12, "ContentRelevance"))
        {
          v15 = 4;
        }
        else if (!strcmp(v12, "TextContentDistances"))
        {
          v15 = 6;
        }
        else if (!strcmp(v12, "HasTextContentMatch"))
        {
          v15 = 7;
        }
        else if (!strcmp(v12, "ScoreL1"))
        {
          v15 = 8;
        }
        else if (!strcmp(v12, "MatchingAttributes"))
        {
          v15 = 10;
        }
        else
        {
          v13 = 0;
          v14 = 77;
          while (v14 == v12[v13])
          {
            v14 = aMatchingarrayi[++v13];
            v15 = 11;
            if (v13 == 21)
              goto LABEL_29;
          }
          if (!strcmp(v12, "MatchingHints"))
          {
            v15 = 9;
          }
          else if (!strcmp(v12, "RetrievalType"))
          {
            v15 = 13;
          }
          else
          {
            if (!_os_feature_enabled_impl()
              || strcmp((const char *)(*(_QWORD *)(a2 + 8 * i) + 14), "EmbeddingDistances"))
            {
              continue;
            }
            v15 = 12;
          }
        }
LABEL_29:
        v9[i] = v15;
      }
    }
  }
}

_DWORD *container_table_create(unsigned int a1)
{
  _DWORD *v2;
  uint64_t v3;
  _OWORD *v4;

  v2 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 80 * a1 + 16, 0x6085D6BuLL);
  if (!v2)
    _log_fault_for_malloc_failure();
  *v2 = a1;
  if (a1)
  {
    v3 = a1;
    v4 = v2 + 4;
    do
    {
      v4[2] = xmmword_1B86318D0;
      v4[3] = unk_1B86318E0;
      v4[4] = xmmword_1B86318F0;
      *v4 = ZERO_RANKING_BITS;
      v4[1] = unk_1B86318C0;
      v4 += 5;
      --v3;
    }
    while (v3);
  }
  return v2;
}

_DWORD *createFetchInfo(int a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 40 * a1 + 8, 0x6085D6BuLL);
  if (!v4)
    _log_fault_for_malloc_failure();
  if (a1 >= 1)
  {
    v5 = a1;
    v6 = v4 + 8;
    do
    {
      pqinit_rankAndFetchInfo_t(v6 - 3, a2);
      *v6 = 0;
      v6[1] = 0;
      v6 += 5;
      --v5;
    }
    while (v5);
  }
  *v4 = a1;
  return v4;
}

void pqinit_rankAndFetchInfo_t(_QWORD *a1, uint64_t a2)
{
  _OWORD *v3;

  a1[1] = a2;
  a1[2] = 1;
  if (a2)
  {
    v3 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 144 * a2 + 288, 0x6085D6BuLL);
    if (!v3)
      _log_fault_for_malloc_failure();
    *a1 = v3;
    v3[6] = xmmword_1B8630980;
    v3[7] = unk_1B8630990;
    v3[8] = xmmword_1B86309A0;
    v3[2] = xmmword_1B8630940;
    v3[3] = unk_1B8630950;
    v3[4] = xmmword_1B8630960;
    v3[5] = unk_1B8630970;
    *v3 = ZERO_FETCHINFO;
    v3[1] = *(_OWORD *)algn_1B8630930;
  }
  else
  {
    *a1 = 0;
  }
}

void findMatchTerm(uint64_t a1, char a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 **v24;
  unsigned __int8 *v25;
  int v26;
  unsigned int v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t Child;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char *v44;
  uint64_t v45;
  UTF32Char v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char v50;
  UTF32Char v51;
  uint64_t v52;
  unsigned int v53;
  const __CFCharacterSet *Predefined;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned int v66;
  char *v67;
  int v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  char *v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  char *v93;
  char *v94;
  const char *v95;
  _DWORD *v96;
  char *v97;
  char *v98;
  const char *v99;
  int v100;
  int v101;
  uint64_t v102;
  unsigned __int16 v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  if (**(_BYTE **)a1)
    return;
  v4 = *(unsigned int *)(a1 + 52);
  v5 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v5 == 1)
  {
    v8 = *(_QWORD *)(a1 + 72);
    v9 = *(_QWORD *)(a1 + 8);
    if (v8 > v4)
    {
      v7 = (_DWORD *)mgetBase(v9, v4);
      if ((a2 & 1) != 0)
        goto LABEL_46;
      goto LABEL_10;
    }
    v97 = __si_assert_copy_extra_1644(*(_DWORD **)(v9 + 112));
    v98 = v97;
    v99 = "";
    if (v97)
      v99 = v97;
    __message_assert("%s:%u: failed assertion '%s' %s next: %d, max: %d", "BurstTrie.c", 4863, "ptr.next < ctx->trie_max", v99, v4, *(_QWORD *)(a1 + 64));
    free(v98);
    v96 = *(_DWORD **)(*(_QWORD *)(a1 + 8) + 112);
LABEL_206:
    if (__valid_fsp(v96))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if ((_DWORD)v5 != 3)
    return;
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 64) <= v4)
  {
    v93 = __si_assert_copy_extra_1644(*(_DWORD **)(v6 + 4568));
    v94 = v93;
    v95 = "";
    if (v93)
      v95 = v93;
    __message_assert("%s:%u: failed assertion '%s' %s next: %d, max: %d", "BurstTrie.c", 4860, "ptr.next < ctx->trie_fat_max", v95, v4, *(_QWORD *)(a1 + 64));
    free(v94);
    v96 = *(_DWORD **)(*(_QWORD *)(a1 + 8) + 4568);
    goto LABEL_206;
  }
  v7 = (_DWORD *)(*(_QWORD *)(v6 + 8) + 1028 * v4);
  if ((a2 & 1) != 0)
    goto LABEL_46;
LABEL_10:
  v10 = *v7;
  if (*(_DWORD *)(a1 + 48) == 1)
  {
    v11 = v10 >> 3;
    v12 = (unint64_t)(v10 & 7) << 32;
    if ((*v7 & 3) == 1)
    {
      v12 = 0x100000000;
      v11 = v10 >> 2;
    }
    if ((v10 & 1) != 0)
      v13 = v12;
    else
      v13 = 0;
    if ((v10 & 1) != 0)
      v14 = v11;
    else
      v14 = v10 >> 1;
    if ((_DWORD)v14)
    {
      v15 = (unsigned __int8 *)(a1 + 88);
      v16 = *(unsigned __int8 ***)(a1 + 1240);
      v17 = *v16;
      v18 = *((_DWORD *)v16 + 6);
      v19 = **v16;
      if (v19 > 4)
      {
        if (v19 == 42 && termPropertyID((unsigned __int8 *)(a1 + 88), *(_DWORD *)(a1 + 1140)) == 2)
          goto LABEL_46;
      }
      else
      {
        if (v19 != *v15)
          goto LABEL_46;
        v20 = v17 + 1;
        v21 = v17[1];
        if (v21 != *(unsigned __int8 *)(a1 + 89))
          goto LABEL_46;
        if (v21 == 2)
        {
          v23 = v17[2];
          v22 = v17 + 2;
          LOBYTE(v21) = v23;
          if (v23 != *(unsigned __int8 *)(a1 + 90))
            goto LABEL_46;
          v15 = (unsigned __int8 *)(a1 + 91);
          v20 = v22;
        }
        else
        {
          v15 = (unsigned __int8 *)(a1 + 90);
        }
        v17 = v20 + 1;
        if ((v21 & 0x80) != 0)
        {
          v88 = *v17;
          if (v88 != *v15)
            goto LABEL_46;
          v17 = v20 + 2;
          if ((char)v88 < 0)
          {
            v92 = *v17;
            if (v92 != v15[1])
              goto LABEL_46;
            if ((char)v92 < 0)
            {
              v101 = (char)v20[3];
              if (v101 < 0 || v15[2] != v101)
                goto LABEL_46;
              v15 += 3;
              v17 = v20 + 4;
            }
            else
            {
              v15 += 2;
              v17 = v20 + 3;
            }
          }
          else
          {
            ++v15;
          }
        }
      }
      if (matche(v17, v15, v18, 0, 0) == 1)
        findAddFlatBucket(a1, v13 | v14, 0, 0, 0, 0);
    }
  }
  else
  {
    if (!(_DWORD)v10)
      goto LABEL_46;
    v24 = *(unsigned __int8 ***)(a1 + 1240);
    v25 = *v24;
    v26 = *((_DWORD *)v24 + 6);
    v27 = **v24;
    if (v27 > 4)
    {
      if (v27 == 42)
      {
        v33 = termPropertyID((unsigned __int8 *)(a1 + 88), *(_DWORD *)(a1 + 1140));
        v32 = (unsigned __int8 *)(a1 + 88);
        if (v33 == 2)
          goto LABEL_46;
      }
      else
      {
        v32 = (unsigned __int8 *)(a1 + 88);
      }
    }
    else
    {
      if (v27 != *(unsigned __int8 *)(a1 + 88))
        goto LABEL_46;
      v28 = v25 + 1;
      v29 = v25[1];
      if (v29 != *(unsigned __int8 *)(a1 + 89))
        goto LABEL_46;
      if (v29 == 2)
      {
        v31 = v25[2];
        v30 = v25 + 2;
        LOBYTE(v29) = v31;
        if (v31 != *(unsigned __int8 *)(a1 + 90))
          goto LABEL_46;
        v32 = (unsigned __int8 *)(a1 + 91);
        v28 = v30;
      }
      else
      {
        v32 = (unsigned __int8 *)(a1 + 90);
      }
      v25 = v28 + 1;
      if ((v29 & 0x80) != 0)
      {
        v87 = *v25;
        if (v87 != *v32)
          goto LABEL_46;
        v25 = v28 + 2;
        if ((char)v87 < 0)
        {
          v91 = *v25;
          if (v91 != v32[1])
            goto LABEL_46;
          if ((char)v91 < 0)
          {
            v100 = (char)v28[3];
            if (v100 < 0 || v32[2] != v100)
              goto LABEL_46;
            v32 += 3;
            v25 = v28 + 4;
          }
          else
          {
            v32 += 2;
            v25 = v28 + 3;
          }
        }
        else
        {
          ++v32;
        }
      }
    }
    if (matche(v25, v32, v26, 0, 0) == 1)
      findHandleMatch(a1, v10, 0, (unsigned __int8 *)(a1 + 88), *(_DWORD *)(a1 + 1140), 0);
  }
LABEL_46:
  v34 = *(unsigned __int8 **)(a1 + 1224);
  v35 = (char)*v34;
  v36 = *v34;
  v37 = *v34;
  if (v35 < 0)
  {
    v38 = (v37 >> 4) & 0xC;
    if (v38 == 8)
    {
      v39 = v4 | (v5 << 32);
      Child = trieGetChild(*(_QWORD *)(a1 + 8), v39, *v34);
      if ((_DWORD)Child)
      {
        v41 = *(unsigned int *)(a1 + 1140);
        *(_DWORD *)(a1 + 1140) = v41 + 1;
        v42 = a1 + 88;
        *(_BYTE *)(v42 + v41) = v35;
        *(_BYTE *)(v42 + *(unsigned int *)(a1 + 1140)) = 0;
        ++*(_QWORD *)(a1 + 1224);
        if (HIDWORD(Child))
        {
          *(_QWORD *)(a1 + 52) = Child;
          findMatchTerm(a1, 0);
          *(_QWORD *)(a1 + 52) = v39;
        }
        else
        {
          findAddFlatBucket(a1, Child, 0, 0, 0, 0);
        }
        --*(_QWORD *)(a1 + 1224);
        --*(_DWORD *)(a1 + 1140);
      }
    }
    else
    {
      v45 = utf8_byte_length(unsigned char)::utf8_len_table[v37 >> 4];
      v46 = (utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v45] & v36);
      if (v38 == 12)
      {
        if (v45 <= 2)
          v47 = 2;
        else
          v47 = utf8_byte_length(unsigned char)::utf8_len_table[v37 >> 4];
        v48 = v47 - 1;
        v49 = (char *)(v34 + 1);
        do
        {
          v50 = *v49++;
          v51 = v50 & 0x3F | (v46 << 6);
          v46 = v51;
          --v48;
        }
        while (v48);
      }
      else
      {
        v51 = (utf8_to_code_point(unsigned char const*)::utf8_first_char_mask[v45] & v36);
      }
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 2) != 0)
      {
        if (v51 - 880 > 0xFFFFFF8F)
        {
          *(_QWORD *)(a1 + 1224) = &v34[v45];
          findMatchIgnoringDiacritics(a1, v4 | (v5 << 32));
          *(_QWORD *)(a1 + 1224) -= v45;
        }
        else
        {
          findMatchIgnoringDiacritics(a1, v4 | (v5 << 32));
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 1) != 0)
      {
        Predefined = (const __CFCharacterSet *)findMatchTerm_sLowerSet;
        if (!findMatchTerm_sLowerSet)
        {
          Predefined = CFCharacterSetGetPredefined(kCFCharacterSetLowercaseLetter);
          findMatchTerm_sLowerSet = (uint64_t)Predefined;
        }
        if (CFCharacterSetIsLongCharacterMember(Predefined, v51))
        {
          if (v51 <= 0xFFFE)
          {
            v55 = map_case((unsigned __int16)v51);
            v103 = v55;
            if (v51 != v55)
            {
              v105 = 0;
              v104 = 0;
              utf8_encodestr(&v103, 2uLL, &v104, &v102, 10);
              findMatchTermExpansion(a1, v45, &v104);
            }
          }
        }
      }
      v56 = v4 | (v5 << 32);
      v57 = trieGetChild(*(_QWORD *)(a1 + 8), v56, v35);
      if ((_DWORD)v57)
      {
        v58 = *(unsigned int *)(a1 + 1140);
        *(_DWORD *)(a1 + 1140) = v58 + 1;
        v59 = a1 + 88;
        *(_BYTE *)(v59 + v58) = v35;
        *(_BYTE *)(v59 + *(unsigned int *)(a1 + 1140)) = 0;
        ++*(_QWORD *)(a1 + 1224);
        if (HIDWORD(v57))
        {
          *(_QWORD *)(a1 + 52) = v57;
          findMatchTerm(a1, 0);
          *(_QWORD *)(a1 + 52) = v56;
        }
        else
        {
          findAddFlatBucket(a1, v57, 0, 0, 0, 0);
        }
        --*(_QWORD *)(a1 + 1224);
        --*(_DWORD *)(a1 + 1140);
      }
      switch(v36)
      {
        case 195:
          switch(*(_BYTE *)(*(_QWORD *)(a1 + 1224) + 1))
          {
            case 0x98:
              goto LABEL_177;
            case 0x99:
            case 0x9A:
            case 0x9B:
            case 0x9C:
            case 0x9D:
            case 0x9E:
            case 0xA0:
            case 0xA1:
            case 0xA2:
            case 0xA3:
            case 0xA4:
            case 0xA5:
            case 0xA7:
            case 0xA8:
            case 0xA9:
            case 0xAA:
            case 0xAB:
            case 0xAC:
            case 0xAD:
            case 0xAE:
            case 0xAF:
            case 0xB0:
            case 0xB1:
            case 0xB2:
            case 0xB3:
            case 0xB4:
            case 0xB5:
            case 0xB6:
            case 0xB7:
              return;
            case 0x9F:
              v60 = "ss";
              goto LABEL_178;
            case 0xA6:
              findMatchTermExpansion(a1, 2u, "ae");
              findMatchTermExpansion(a1, 2u, utf8_a_umlat_lower_str);
              if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 1) != 0)
                goto LABEL_175;
              return;
            case 0xB8:
              findMatchTermExpansion(a1, 2u, "oe");
              findMatchTermExpansion(a1, 2u, utf8_o_umlat_lower_str);
              findMatchTermExpansion(a1, 2u, utf8_oe_ligature_lower_str);
              if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 1) == 0)
                return;
LABEL_177:
              findMatchTermExpansion(a1, 2u, "OE");
              findMatchTermExpansion(a1, 2u, utf8_o_umlat_upper_str);
              v60 = (char *)&utf8_oe_ligature_upper_str;
              break;
            default:
              if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 1224) + 1) != 134)
                return;
LABEL_175:
              findMatchTermExpansion(a1, 2u, "AE");
              v60 = utf8_a_umlat_upper_str;
              break;
          }
          break;
        case 196:
          v61 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1224) + 1);
          if (v61 != 178)
          {
            if (v61 != 179)
              return;
            findMatchTermExpansion(a1, 2u, "ij");
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 1) == 0)
              return;
          }
          v60 = "IJ";
          break;
        case 197:
          v62 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1224) + 1);
          if (v62 != 146)
          {
            if (v62 != 147)
              return;
            findMatchTermExpansion(a1, 2u, "oe");
            findMatchTermExpansion(a1, 2u, utf8_o_umlat_lower_str);
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 1) == 0)
              return;
          }
          findMatchTermExpansion(a1, 2u, "OE");
          v60 = utf8_o_umlat_upper_str;
          break;
        case 226:
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 2) != 0)
          {
            v63 = *(_QWORD *)(a1 + 1224);
            if (*(unsigned __int8 *)(v63 + 1) == 128)
            {
              v64 = *(unsigned __int8 *)(v63 + 2);
              if ((v64 - 152) <= 0x1A && ((1 << (v64 + 104)) & 0x400000B) != 0)
              {
                findMatchTermExpansion(a1, 3u, utf8_left_single_quote_str);
                findMatchTermExpansion(a1, 3u, utf8_right_single_quote_str);
                findMatchTermExpansion(a1, 3u, utf8_right_inverted_quote_str);
                findMatchTermExpansion(a1, 3u, utf8_right_double_prime_str);
                findMatchTermExpansion(a1, 3u, "\"");
                v64 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 1224) + 2);
              }
              v66 = v64 - 155;
              if (v66 <= 0x17 && ((1 << v66) & 0x800007) != 0)
              {
                findMatchTermExpansion(a1, 3u, utf8_left_single_quote_str);
                findMatchTermExpansion(a1, 3u, utf8_right_single_quote_str);
                findMatchTermExpansion(a1, 3u, utf8_right_inverted_quote_str);
                findMatchTermExpansion(a1, 3u, utf8_prime_str);
                findMatchTermExpansion(a1, 3u, "'");
              }
            }
          }
          return;
        default:
          return;
      }
LABEL_178:
      findMatchTermExpansion(a1, 2u, v60);
    }
  }
  else if (*v34)
  {
    if ((a2 & 1) == 0 && (unint64_t)v34 >= *(_QWORD *)(a1 + 1232))
    {
      if (v36 == 92)
      {
        v68 = v34[1];
        v67 = (char *)(v34 + 1);
        if (v68)
        {
          *(_QWORD *)(a1 + 1224) = v67;
          findMatchTerm(a1, 1);
          --*(_QWORD *)(a1 + 1224);
          return;
        }
      }
      else if (v36 == 42)
      {
        findMatchTermWildcard(a1, v4 | (v5 << 32), 0, v34[1] == 0);
        return;
      }
    }
    v69 = v4 | (v5 << 32);
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 2) != 0)
      findMatchIgnoringDiacritics(a1, v69);
    v70 = trieGetChild(*(_QWORD *)(a1 + 8), v69, v35);
    if ((_DWORD)v70)
    {
      v71 = *(unsigned int *)(a1 + 1140);
      *(_DWORD *)(a1 + 1140) = v71 + 1;
      v72 = a1 + 88;
      *(_BYTE *)(v72 + v71) = v35;
      *(_BYTE *)(v72 + *(unsigned int *)(a1 + 1140)) = 0;
      ++*(_QWORD *)(a1 + 1224);
      if (HIDWORD(v70))
      {
        *(_QWORD *)(a1 + 52) = v70;
        findMatchTerm(a1, 0);
        *(_QWORD *)(a1 + 52) = v69;
      }
      else
      {
        findAddFlatBucket(a1, v70, 0, 0, 0, 0);
      }
      --*(_QWORD *)(a1 + 1224);
      --*(_DWORD *)(a1 + 1140);
    }
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 1) != 0 && v37 - 123 >= 0xFFFFFFFFFFFFFFE6)
    {
      v73 = sUpperTable[v37];
      v74 = trieGetChild(*(_QWORD *)(a1 + 8), v69, v73);
      if ((_DWORD)v74)
      {
        v75 = *(unsigned int *)(a1 + 1140);
        *(_DWORD *)(a1 + 1140) = v75 + 1;
        v76 = a1 + 88;
        *(_BYTE *)(v76 + v75) = v73;
        *(_BYTE *)(v76 + *(unsigned int *)(a1 + 1140)) = 0;
        ++*(_QWORD *)(a1 + 1224);
        if (HIDWORD(v74))
        {
          *(_QWORD *)(a1 + 52) = v74;
          findMatchTerm(a1, 0);
          *(_QWORD *)(a1 + 52) = v69;
        }
        else
        {
          findAddFlatBucket(a1, v74, 0, 0, 0, 0);
        }
        --*(_QWORD *)(a1 + 1224);
        --*(_DWORD *)(a1 + 1140);
      }
    }
    if (expansions_check[v37])
    {
      switch(v36)
      {
        case '"':
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 2) != 0)
          {
            findMatchTermExpansion(a1, 1u, utf8_left_double_quote_str);
            findMatchTermExpansion(a1, 1u, utf8_right_double_quote_str);
            findMatchTermExpansion(a1, 1u, utf8_right_inverted_double_quote_str);
            findMatchTermExpansion(a1, 1u, utf8_right_double_prime_str);
          }
          return;
        case '\'':
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 2) != 0)
          {
            findMatchTermExpansion(a1, 1u, utf8_left_single_quote_str);
            findMatchTermExpansion(a1, 1u, utf8_right_single_quote_str);
            findMatchTermExpansion(a1, 1u, utf8_right_inverted_quote_str);
            findMatchTermExpansion(a1, 1u, utf8_prime_str);
            findMatchTermChar(a1, v69, 0x60u);
          }
          return;
        case 'A':
          v77 = *(_QWORD *)(a1 + 1224);
          v78 = *(unsigned __int8 *)(v77 + 1);
          switch(v78)
          {
            case 204:
              v89 = *(unsigned __int8 *)(v77 + 2);
              if (v89 == 138)
                goto LABEL_192;
              if (v89 == 136)
                goto LABEL_188;
              break;
            case 69:
              goto LABEL_190;
            case 65:
              goto LABEL_147;
          }
          return;
        case 'I':
          if (*(_BYTE *)(*(_QWORD *)(a1 + 1224) + 1) == 74)
            goto LABEL_154;
          return;
        case 'O':
          v79 = *(_QWORD *)(a1 + 1224);
          v80 = *(unsigned __int8 *)(v79 + 1);
          if (v80 == 204)
          {
            if (*(unsigned __int8 *)(v79 + 2) == 136)
            {
              v86 = "OE";
              goto LABEL_173;
            }
          }
          else if (v80 == 69)
          {
            goto LABEL_158;
          }
          return;
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 2) != 0)
          {
            findMatchTermExpansion(a1, 1u, utf8_left_single_quote_str);
            findMatchTermExpansion(a1, 1u, utf8_right_single_quote_str);
            findMatchTermExpansion(a1, 1u, utf8_right_inverted_quote_str);
            findMatchTermExpansion(a1, 1u, utf8_prime_str);
            findMatchTermChar(a1, v69, 0x27u);
          }
          return;
        case 'a':
          v81 = *(_QWORD *)(a1 + 1224);
          v82 = *(unsigned __int8 *)(v81 + 1);
          switch(v82)
          {
            case 204:
              v90 = *(unsigned __int8 *)(v81 + 2);
              if (v90 == 138)
              {
                findMatchTermExpansion(a1, 3u, "aa");
                if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 1) == 0)
                  return;
LABEL_192:
                v44 = "AA";
              }
              else
              {
                if (v90 != 136)
                  return;
                findMatchTermExpansion(a1, 3u, "ae");
                findMatchTermExpansion(a1, 3u, utf8_ae_ligature_lower_str);
                if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 1) == 0)
                  return;
LABEL_188:
                findMatchTermExpansion(a1, 3u, "AE");
                v44 = (char *)&utf8_ae_ligature_upper_str;
              }
              v52 = a1;
              v53 = 3;
              goto LABEL_73;
            case 101:
              findMatchTermExpansion(a1, 2u, utf8_a_umlat_lower_str);
              findMatchTermExpansion(a1, 2u, utf8_ae_ligature_lower_str);
              if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 1) != 0)
              {
LABEL_190:
                findMatchTermExpansion(a1, 2u, utf8_a_umlat_upper_str);
                v44 = (char *)&utf8_ae_ligature_upper_str;
                goto LABEL_72;
              }
              break;
            case 97:
              findMatchTermExpansion(a1, 2u, utf8_a_ring_lower_str);
              if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 1) != 0)
              {
LABEL_147:
                v44 = (char *)&utf8_a_ring_upper_str;
                goto LABEL_72;
              }
              break;
          }
          return;
        case 'i':
          v83 = *(_DWORD *)(*(_QWORD *)(a1 + 1240) + 16);
          if ((v83 & 1) != 0)
          {
            if ((v83 & 2) == 0)
              findMatchTermExpansion(a1, 1u, utf8_upper_dotted_i_str);
            findMatchTermExpansion(a1, 1u, utf8_lower_dotless_i);
          }
          if (*(_BYTE *)(*(_QWORD *)(a1 + 1224) + 1) != 106)
            return;
          findMatchTermExpansion(a1, 2u, utf8_ij_ligature_lower_str);
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 1) == 0)
            return;
LABEL_154:
          v44 = (char *)&utf8_ij_ligature_upper_str;
          goto LABEL_72;
        case 'o':
          v84 = *(_QWORD *)(a1 + 1224);
          v85 = *(unsigned __int8 *)(v84 + 1);
          if (v85 == 204)
          {
            if (*(unsigned __int8 *)(v84 + 2) != 136)
              return;
            findMatchTermExpansion(a1, 2u, "oe");
            findMatchTermExpansion(a1, 2u, utf8_o_slash_lower_str);
            findMatchTermExpansion(a1, 2u, utf8_oe_ligature_lower_str);
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 1) == 0)
              return;
            findMatchTermExpansion(a1, 2u, "OE");
            v86 = utf8_o_slash_upper_str;
          }
          else
          {
            if (v85 != 101)
              return;
            findMatchTermExpansion(a1, 2u, utf8_o_slash_lower_str);
            findMatchTermExpansion(a1, 2u, utf8_o_umlat_lower_str);
            findMatchTermExpansion(a1, 2u, utf8_oe_ligature_lower_str);
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 1240) + 16) & 1) == 0)
              return;
LABEL_158:
            findMatchTermExpansion(a1, 2u, utf8_o_slash_upper_str);
            v86 = utf8_o_umlat_upper_str;
          }
LABEL_173:
          findMatchTermExpansion(a1, 2u, v86);
          v44 = (char *)&utf8_oe_ligature_upper_str;
          goto LABEL_72;
        case 's':
          if (*(_BYTE *)(*(_QWORD *)(a1 + 1224) + 1) != 115)
            return;
          v44 = (char *)&utf8_szed_str;
          goto LABEL_72;
        default:
          return;
      }
    }
  }
  else
  {
    v43 = *(_DWORD *)(*(_QWORD *)(a1 + 1240) + 20);
    if (v43 == 2)
    {
      v44 = "\x01\x02";
    }
    else
    {
      if (v43 != 1)
        return;
      v44 = "\x01\x01";
    }
LABEL_72:
    v52 = a1;
    v53 = 2;
LABEL_73:
    findMatchTermExpansion(v52, v53, v44);
  }
}

unint64_t trieGetChild(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int8x8_t *v7;
  unsigned int v8;
  uint8x8_t v9;
  uint8x8_t v10;
  uint8x8_t v11;
  uint8x8_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;

  v3 = *((unsigned __int8 *)&tcm + a3);
  if (HIDWORD(a2) == 1)
  {
    v5 = mgetBase(a1, a2);
    if (((*(_DWORD *)(v5 + 4 * (v3 >> 5) + 4) >> v3) & 1) == 0)
      return 0;
    v6 = 0;
    v7 = (int8x8_t *)(v5 + 4);
    v8 = v3 >> 6;
    if (v3 >> 6 != 1)
    {
      if (v8 != 2)
      {
        if (v8 != 3)
        {
LABEL_11:
          v12 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v7[v8] & ~(-1 << v3)));
          v12.i16[0] = vaddlv_u8(v12);
          v4 = *(_DWORD *)(v5 + 4 * (v12.u32[0] + v6) + 38);
          goto LABEL_12;
        }
        v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v5 + 20));
        v9.i16[0] = vaddlv_u8(v9);
        v6 = v9.u32[0];
      }
      v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v5 + 12));
      v10.i16[0] = vaddlv_u8(v10);
      v6 += v10.u32[0];
    }
    v11 = (uint8x8_t)vcnt_s8(*v7);
    v11.i16[0] = vaddlv_u8(v11);
    v6 += v11.u32[0];
    goto LABEL_11;
  }
  if (HIDWORD(a2) != 3)
    return 0;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 1028 * a2 + 4 * v3 + 4);
LABEL_12:
  LODWORD(v13) = v4 >> 1;
  v14 = v4 >> 3;
  v15 = (unint64_t)(v4 & 7) << 32;
  if ((v4 & 3) == 1)
  {
    v15 = 0x100000000;
    v14 = v4 >> 2;
  }
  v16 = (v4 & 1) == 0;
  if ((v4 & 1) != 0)
    v17 = v15;
  else
    v17 = 0;
  if (v16)
    v13 = v13;
  else
    v13 = v14;
  return v17 | v13;
}

void findAddFlatBucket(uint64_t a1, unint64_t a2, _BYTE *a3, size_t a4, _BYTE *a5, size_t a6)
{
  unsigned int v6;
  size_t v8;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  _BYTE *v28;
  uint8_t *v29;
  uint8_t *v30;
  unint64_t v31;
  __int32 v32;
  int8x8_t *v33;
  unint64_t v34;
  uint8x8_t v35;
  uint8x8_t v36;
  uint8x8_t v37;
  uint8x8_t v38;
  unint64_t v39;
  unsigned int v40;
  BOOL v41;
  _BYTE *v42;
  __int128 v43;
  __int32 v44;
  unint64_t v45;
  uint64_t v46;
  int8x8_t *v47;
  unint64_t v48;
  uint8x8_t v49;
  uint8x8_t v50;
  uint8x8_t v51;
  uint8x8_t v52;
  _QWORD *v53;
  uint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned __int8 v57;
  char *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  _BOOL4 v63;
  int v64;
  int *v65;
  int v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  uint64_t *v71;
  float v72;
  _BOOL4 v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  const void *v78;
  int v79;
  char *v80;
  size_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  uint64_t v86;
  int v87;
  NSObject *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  const char *v92;
  uint64_t v93;
  void *realloc;
  char *v95;
  char *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int v101;
  uint64_t v102;
  void *__src;
  size_t __n;
  size_t v105;
  uint8_t buf[4];
  uint64_t v107;
  __int16 v108;
  unsigned int v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  uint64_t v113;
  uint64_t v114;

  v6 = a2;
  v114 = *MEMORY[0x1E0C80C00];
  if (HIDWORD(a2) || !(_DWORD)a2)
  {
    if (dword_1EF19FC90 >= 5)
    {
      v87 = *__error();
      v88 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
      {
        v89 = **(_QWORD **)(a1 + 1240);
        *(_DWORD *)buf = 134218754;
        v107 = a1;
        v108 = 1024;
        v109 = v6;
        v110 = 2080;
        v111 = a1 + 88;
        v112 = 2080;
        v113 = v89;
        _os_log_impl(&dword_1B8270000, v88, OS_LOG_TYPE_DEFAULT, "FindTermIDsContext %p empty bucket %x %s %s", buf, 0x26u);
      }
      *__error() = v87;
    }
    return;
  }
  v8 = a6;
  v11 = (unint64_t)a3;
  v12 = *(_QWORD *)(a1 + 1240);
  if ((*(_WORD *)(v12 + 16) & 0x3080) != 0)
  {
    if (a3 || a6)
    {
      v16 = 3;
      if (a6 && (int)a6 >= 1)
      {
        v17 = a6;
        v18 = 3;
        do
        {
          if (a5[(v17 - 1)] == 1)
            return;
          v16 = v18 - 1;
          if (v17 < 2)
            break;
          --v17;
          --v18;
        }
        while (v18);
      }
      if (a4 && (int)a4 >= 1 && v16)
      {
        v19 = a4;
        v20 = v16 - 1;
        do
        {
          if (a3[(v19 - 1)] == 1)
            return;
          v41 = v20-- != 0;
          v21 = v41;
          if (v19 < 2)
            break;
          --v19;
        }
        while (v21);
      }
    }
    else
    {
      v13 = *(unsigned int *)(a1 + 1140);
      if ((int)v13 >= 1)
      {
        v14 = 0;
        do
        {
          if (*(_BYTE *)(a1 + (v13 + v14 - 1) + 88) == 1)
            return;
          if ((unint64_t)(v13 + v14) < 2)
            break;
          v15 = (_DWORD)v14-- == -2;
        }
        while (!v15);
      }
    }
  }
  if ((unint64_t)a2 << 6 >= *(_QWORD *)(a1 + 80))
  {
    v90 = __si_assert_copy_extra(*(_DWORD **)(*(_QWORD *)(a1 + 8) + 376));
    v91 = v90;
    v92 = "";
    if (v90)
      v92 = v90;
    __message_assert("%s:%u: failed assertion '%s' %s next: 0x%llx, max: 0x%llx", "FindTermIDs.c", 394, "flatStoreGetOffset(child) < ctx->flat_max", v92, (unint64_t)v6 << 6, *(_QWORD *)(a1 + 80));
    free(v91);
    if (__valid_fsp(*(_DWORD **)(*(_QWORD *)(a1 + 8) + 376)))
      v93 = 2989;
    else
      v93 = 3072;
    *(_DWORD *)v93 = -559038737;
    abort();
  }
  v22 = *(_QWORD *)(a1 + 1144);
  v23 = *(_BYTE **)(a1 + 1192);
  if (!v23)
  {
    v23 = UInt32TrieCreate(256, (_QWORD **)(a1 + 1208));
    *(_QWORD *)(a1 + 1192) = v23;
  }
  __n = a4;
  v105 = v8;
  __src = a5;
  if (*(_DWORD *)(a1 + 1204) == v6)
  {
    v24 = *(_DWORD *)(a1 + 1200);
    goto LABEL_76;
  }
  v102 = v12;
  v25 = 0;
  *(_DWORD *)buf = 0;
  v26 = v6;
  do
  {
    buf[v25++] = v26;
    v27 = v26 > 0xFF;
    v26 >>= 8;
  }
  while (v27);
  if ((v25 - 5) < 0xFCu)
  {
LABEL_71:
    v58 = __si_assert_copy_extra(0);
    __message_assert("%s:%u: failed assertion '%s' %s invalid key_len %d");
    goto LABEL_113;
  }
  v100 = v11;
  v101 = v6;
  LODWORD(v11) = 0;
  v28 = 0;
  v29 = &buf[v25 - 1];
  v99 = (*(_DWORD *)(a1 + 1184) + 1);
  v30 = buf;
  while (1)
  {
    v31 = *v30;
    if (((*(_DWORD *)&v23[((v31 >> 3) & 0x1C) + 4] >> v31) & 1) != 0)
    {
      v32 = 0;
      v33 = (int8x8_t *)(v23 + 4);
      v34 = v31 >> 6;
      if ((v31 >> 6) != 1)
      {
        if ((_DWORD)v34 != 2)
        {
          if ((_DWORD)v34 != 3)
            goto LABEL_45;
          v35 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v23 + 20));
          v35.i16[0] = vaddlv_u8(v35);
          v32 = v35.i32[0];
        }
        v36 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v23 + 12));
        v36.i16[0] = vaddlv_u8(v36);
        v32 += v36.i32[0];
      }
      v37 = (uint8x8_t)vcnt_s8(*v33);
      v37.i16[0] = vaddlv_u8(v37);
      v32 += v37.i32[0];
LABEL_45:
      v38 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v33[v34] & ~(-1 << v31)));
      v38.i16[0] = vaddlv_u8(v38);
      v11 = (v32 + v38.i32[0]);
      v39 = *(_QWORD *)&v23[8 * v11 + 40];
      v28 = v23;
      if ((v39 & 1) != 0)
        goto LABEL_67;
      goto LABEL_46;
    }
    v40 = v23[37];
    v41 = v40 != 255 && v23[36] + 1 >= v40;
    if (v41)
    {
      v42 = UInt32TrieCreate(2 * v40, (_QWORD **)(a1 + 1208));
      v42[36] = v23[36];
      *(_DWORD *)v42 = *(_DWORD *)v23;
      v43 = *(_OWORD *)(v23 + 4);
      *(_OWORD *)(v42 + 20) = *(_OWORD *)(v23 + 20);
      *(_OWORD *)(v42 + 4) = v43;
      memcpy(v42 + 40, v23 + 40, 8 * v23[36]);
      free(v23);
      if (v28)
        *(_QWORD *)&v28[8 * v11 + 40] = v42;
    }
    else
    {
      v42 = v23;
    }
    v44 = 0;
    v45 = *v30;
    v46 = v42[36];
    v47 = (int8x8_t *)(v42 + 4);
    *(_DWORD *)&v42[((v45 >> 3) & 0x1C) + 4] |= 1 << v45;
    v48 = v45 >> 6;
    if ((v45 >> 6) != 1)
    {
      if ((_DWORD)v48 != 2)
      {
        if ((_DWORD)v48 != 3)
          goto LABEL_61;
        v49 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v42 + 20));
        v49.i16[0] = vaddlv_u8(v49);
        v44 = v49.i32[0];
      }
      v50 = (uint8x8_t)vcnt_s8(*(int8x8_t *)(v42 + 12));
      v50.i16[0] = vaddlv_u8(v50);
      v44 += v50.i32[0];
    }
    v51 = (uint8x8_t)vcnt_s8(*v47);
    v51.i16[0] = vaddlv_u8(v51);
    v44 += v51.i32[0];
LABEL_61:
    v52 = (uint8x8_t)vcnt_s8((int8x8_t)(*(_QWORD *)&v47[v48] & ~(-1 << v45)));
    v52.i16[0] = vaddlv_u8(v52);
    v11 = (v44 + v52.i32[0]);
    if (v11 < v46)
    {
      v53 = &v42[8 * v46 + 40];
      v54 = (uint64_t *)&v42[8 * (v46 - 1) + 40];
      v55 = v46;
      do
      {
        v56 = *v54--;
        *v53-- = v56;
        --v55;
      }
      while (v11 < v55);
    }
    v57 = v46 + 1;
    v42[36] = v57;
    if (v42[37] < v57)
    {
      v58 = __si_assert_copy_extra(0);
      __message_assert("%s:%u: failed assertion '%s' %s size: %d count:%d");
LABEL_113:
      free(v58);
      if (__valid_fs(-1))
        v86 = 2989;
      else
        v86 = 3072;
      *(_DWORD *)v86 = -559038737;
      abort();
    }
    if (v25 == 1)
    {
      *(_QWORD *)&v42[8 * v11 + 40] = (2 * v99) | 1;
      LODWORD(v42) = v99;
      goto LABEL_75;
    }
    v39 = (unint64_t)UInt32TrieCreate(1, (_QWORD **)(a1 + 1208));
    *(_QWORD *)&v42[8 * v11 + 40] = v39;
    v28 = v42;
    if ((v39 & 1) != 0)
    {
LABEL_67:
      v42 = (_BYTE *)(v39 >> 1);
      if (v25 == 1)
        goto LABEL_75;
      v23 = UInt32TrieCreate(1, (_QWORD **)(a1 + 1208));
      *(_DWORD *)v23 = (_DWORD)v42;
      *(_QWORD *)&v28[8 * v11 + 40] = v23;
      goto LABEL_69;
    }
LABEL_46:
    v23 = (_BYTE *)v39;
    if (v25 == 1)
      break;
LABEL_69:
    LOBYTE(v25) = v25 - 1;
    v15 = v30++ == v29;
    if (v15)
      goto LABEL_71;
  }
  LODWORD(v42) = *(_DWORD *)v39;
  if (!*(_DWORD *)v39)
  {
    LODWORD(v42) = v99;
    *(_DWORD *)v39 = v99;
  }
LABEL_75:
  v24 = (_DWORD)v42 - 1;
  v11 = v100;
  v6 = v101;
  *(_DWORD *)(a1 + 1204) = v101;
  *(_DWORD *)(a1 + 1200) = v24;
  v8 = v105;
  v12 = v102;
LABEL_76:
  v59 = v12 - v22;
  if (v24 == *(_DWORD *)(a1 + 1184))
  {
    if (v24 == *(_DWORD *)(a1 + 1180))
    {
      realloc = query_realloc(*(void **)(a1 + 40), 16 * v24);
      if (!realloc)
      {
        v95 = __si_assert_copy_extra(0);
        v96 = v95;
        v97 = "";
        if (v95)
          v97 = v95;
        __message_assert("%s:%u: failed assertion '%s' %s grow buckets error, bucket count:%d", "FindTermIDs.c", 445, "buckets", v97, *(_DWORD *)(a1 + 1184));
        free(v96);
        if (__valid_fs(-1))
          v98 = 2989;
        else
          v98 = 3072;
        *(_DWORD *)v98 = -559038737;
        abort();
      }
      *(_QWORD *)(a1 + 40) = realloc;
      *(_DWORD *)(a1 + 1180) *= 2;
    }
    v60 = *(_DWORD *)(a1 + 1152) >> 3;
    v61 = v60 + 9;
    if (*(_BYTE *)(a1 + 1288))
    {
      v62 = *(_QWORD *)(a1 + 1272);
      v63 = v62 != 0;
      v64 = v60 + 13;
      if (v62)
        v61 = v64;
    }
    else
    {
      v63 = 0;
    }
    v73 = (v11 | v8) != 0;
    if (v11 | v8)
      v74 = v8 + a4;
    else
      v74 = *(_DWORD *)(a1 + 1140);
    v75 = v61 + v74 + 1;
    *(_QWORD *)(*(_QWORD *)(a1 + 1208) + 8) = (*(_QWORD *)(*(_QWORD *)(a1 + 1208) + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
    v76 = *(_QWORD *)(a1 + 1208);
    v77 = *(char **)(v76 + 8);
    v78 = (const void *)v11;
    if ((unint64_t)&v77[v75 + 8] >= *(_QWORD *)(v76 + 16))
      v77 = (char *)slab_new((_QWORD **)(a1 + 1208), v75, 248);
    else
      *(_QWORD *)(v76 + 8) = &v77[v75];
    bzero(v77, v75);
    v79 = 8 * v6;
    *(_DWORD *)v77 = 8 * v6;
    if (v63)
    {
      v79 |= 1u;
      *(_DWORD *)v77 = v79;
      *((float *)v77 + 2) = automaton_state_score(**(_QWORD **)(a1 + 1272), *(_QWORD *)(*(_QWORD *)(a1 + 1272) + 8));
    }
    if ((v79 & 3) != 0)
      v80 = v77 + 12;
    else
      v80 = v77 + 8;
    if (v73)
    {
      memcpy(v80, v78, __n);
      memcpy(&v80[__n], __src, v105);
      v81 = v74;
    }
    else
    {
      v81 = *(unsigned int *)(a1 + 1140);
      memcpy(v80, (const void *)(a1 + 88), v81);
      v74 = v81;
    }
    v80[v81] = 0;
    *((_DWORD *)v77 + 1) = v74;
    if ((*(_DWORD *)v77 & 3) != 0)
      v82 = v77 + 12;
    else
      v82 = v77 + 8;
    *((_BYTE *)v82 + v81 + ((unint64_t)(v59 >> 6) >> 3) + 1) |= 1 << (((unint64_t)v59 >> 6) & 7);
    v83 = *(unsigned int *)(a1 + 1184);
    *(_DWORD *)(a1 + 1184) = v83 + 1;
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v83) = v77;
  }
  else
  {
    v65 = *(int **)(*(_QWORD *)(a1 + 40) + 8 * v24);
    v66 = *v65;
    v67 = v65[1];
    v68 = v65 + 3;
    v69 = v65 + 2;
    if ((v66 & 3) != 0)
      v69 = v68;
    *((_BYTE *)v69 + v67 + ((unint64_t)(v59 >> 6) >> 3) + 1) |= 1 << (((unint64_t)v59 >> 6) & 7);
    if (*(_BYTE *)(a1 + 1288))
    {
      v70 = v24;
      v71 = *(uint64_t **)(a1 + 1272);
      v72 = v71 ? automaton_state_score(*v71, v71[1]) : 0.0;
      v84 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v70);
      if ((*(_BYTE *)v84 & 3) != 0)
      {
        v85 = *(float *)(v84 + 8);
        if (v85 != 0.0 && (v72 == 0.0 || v85 < v72))
          *(float *)(v84 + 8) = v72;
      }
    }
  }
}

_BYTE *UInt32TrieCreate(int a1, _QWORD **a2)
{
  unint64_t v3;
  _BYTE *v4;
  char v5;
  char *v7;
  char *v8;
  const char *v9;
  uint64_t v10;

  if (a1 >= 257)
  {
    v7 = __si_assert_copy_extra(0);
    v8 = v7;
    v9 = "";
    if (v7)
      v9 = v7;
    __message_assert("%s:%u: failed assertion '%s' %s bad length: %d", "FindTermIDs.c", 82, "size <= 256", v9, a1);
    free(v8);
    if (__valid_fs(-1))
      v10 = 2989;
    else
      v10 = 3072;
    *(_DWORD *)v10 = -559038737;
    abort();
  }
  v3 = 8 * a1 + 40;
  if (a1 == 256)
  {
    (*a2)[1] = ((*a2)[1] + 7) & 0xFFFFFFFFFFFFFFF8;
    v4 = (_BYTE *)(*a2)[1];
    if ((unint64_t)&v4[v3 + 8] >= (*a2)[2])
      v4 = slab_new(a2, 0x828uLL, 248);
    else
      (*a2)[1] = &v4[v3];
    bzero(v4, 0x828uLL);
  }
  else
  {
    if (*MEMORY[0x1E0C85AD8] < v3)
      ++sTotal_6637;
    v4 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 8 * a1 + 40, 0x31F9A007uLL);
    if (!v4)
      _log_fault_for_malloc_failure();
  }
  if (a1 >= 255)
    v5 = -1;
  else
    v5 = a1;
  v4[37] = v5;
  return v4;
}

void executeSearchCtx2(double *a1, uint64_t a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  int v7;
  NSObject *v8;
  double Current;
  double v10;
  int v11;
  NSObject *v12;
  qos_class_t v13;
  int v14;
  NSObject *v15;
  CFAbsoluteTime v16;
  qos_class_t v17;
  double v18;
  uint8_t buf[4];
  CFAbsoluteTime v20;
  __int16 v21;
  qos_class_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (dword_1EF19FCC0 >= 5)
  {
    v7 = *__error();
    v8 = _SILogForLogForCategory(13);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v20) = qos_class_self();
      _os_log_impl(&dword_1B8270000, v8, OS_LOG_TYPE_DEFAULT, "QOS executeSearchCtx2: %d", buf, 8u);
    }
    *__error() = v7;
    if ((_DWORD)a2)
      goto LABEL_3;
  }
  else if ((_DWORD)a2)
  {
LABEL_3:
    v4 = *__error();
    v5 = _SILogForLogForCategory(1);
    v6 = 2 * (dword_1EF19FC90 < 4);
    if (os_log_type_enabled(v5, v6))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v5, v6, "Search canceled while waiting on scheduler\n", buf, 2u);
    }
    *__error() = v4;
    si_querypipe_remove_process(*(_QWORD *)(*(_QWORD *)a1 + 104), *(_QWORD *)(*(_QWORD *)a1 + 8), 0, 1);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)a1 + 48))(*(_QWORD *)a1, 1);
    search_ctx_destroy(a1, a2);
    return;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v10 = Current - a1[1];
  *(double *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 448) = *(double *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 448) + v10;
  if (dword_1EF19FC90 >= 5)
  {
    v18 = v10;
    v11 = *__error();
    v12 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = qos_class_self();
      *(_DWORD *)buf = 134218240;
      v20 = v18;
      v21 = 1024;
      v22 = v13;
      _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "Search waited %f seconds on the scheduler at qos 0x%x\n", buf, 0x12u);
    }
    *__error() = v11;
  }
  executeSearchContextCracked_2(*(_QWORD *)a1, a1);
  if (dword_1EF19FC90 >= 5)
  {
    v14 = *__error();
    v15 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v16 = CFAbsoluteTimeGetCurrent() - Current;
      v17 = qos_class_self();
      *(_DWORD *)buf = 134218240;
      v20 = v16;
      v21 = 1024;
      v22 = v17;
      _os_log_impl(&dword_1B8270000, v15, OS_LOG_TYPE_DEFAULT, "Search was active for %f seconds on the scheduler at qos 0x%x\n", buf, 0x12u);
    }
    *__error() = v14;
  }
}

void executeSearchContextCracked_2(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  double Current;
  int *v6;
  uint64_t v7;
  const void *v8;
  const __CFArray *v9;
  uint64_t v10;
  const __CFArray *v11;
  const void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  unsigned int *v20;
  unsigned int *v21;
  void *v22;
  BOOL v23;
  _QWORD *v24;
  const __CFString *v25;
  size_t v26;
  CFStringRef v27;
  int v28;
  size_t v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  size_t v33;
  size_t v34;
  unint64_t i;
  const char *v36;
  int v37;
  int v39;
  uint64_t v40;
  CFAbsoluteTime v41;
  int v42;
  unsigned int *v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t VectorCount;
  int v49;
  int v50;
  int v51;
  char v52;
  unsigned int *v53;
  unsigned int v54;
  int v55;
  NSObject *v56;
  CFAbsoluteTime v57;
  qos_class_t v58;
  int v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t j;
  unsigned int *v78;
  __CFSet *Mutable;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  NSObject *v92;
  int v93;
  NSObject *v94;
  char *v95;
  char *v96;
  const char *v97;
  uint64_t v98;
  _QWORD *v99;
  const __CFAllocator *v100;
  const __CFAllocator *alloc;
  int v102[2];
  int v103;
  int v104[2];
  const __CFArray *v105;
  uint64_t v106;
  const __CFArray *v107;
  const void *v108;
  uint8_t v109[4];
  qos_class_t v110;
  char v111;
  unint64_t v112[12];
  unsigned int *v113;
  uint64_t v114;
  _QWORD v115[384];
  unsigned int v116;
  uint8_t buf[40];
  uint64_t v118;
  CFRange v119;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = v1;
  v118 = *MEMORY[0x1E0C80C00];
  if (dword_1EF19FCC0 >= 5)
  {
    v91 = *__error();
    v92 = _SILogForLogForCategory(13);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v109 = 67109120;
      v110 = qos_class_self();
      _os_log_impl(&dword_1B8270000, v92, OS_LOG_TYPE_DEFAULT, "QOS executeSearchContextCracked_2: %d", v109, 8u);
    }
    *__error() = v91;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v6 = (_DWORD *)&unk_1EF19F000;
  v100 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v99 = v3;
  while (1)
  {
    bzero(v109, 0x11E0uLL);
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(const void **)(v7 + 24);
    v9 = *(const __CFArray **)(v4 + 56);
    v10 = *(_QWORD *)(v4 + 64);
    v11 = *(const __CFArray **)(v4 + 72);
    v12 = *(const void **)(v4 + 208);
    v13 = *(_DWORD *)(v7 + 152);
    v14 = *(_QWORD *)(v4 + 104);
    do
    {
      v15 = v14;
      v14 = *(_QWORD *)(v14 + 80);
    }
    while (v14);
    v16 = *(_QWORD *)(v15 + 40);
    v17 = *(double *)(v7 + 360);
    v18 = *(_DWORD *)(v4 + 248);
    v20 = *(unsigned int **)(v4 + 256);
    v19 = *(const char **)(v4 + 264);
    v22 = *(void **)(v4 + 272);
    v21 = *(unsigned int **)(v4 + 280);
    if (v19)
      v23 = v22 == 0;
    else
      v23 = 0;
    if (v23)
    {
      *(_QWORD *)v102 = *(_QWORD *)(v15 + 40);
      v103 = *(_DWORD *)(v7 + 152);
      *(_QWORD *)v104 = *(_QWORD *)(v4 + 208);
      v105 = *(const __CFArray **)(v4 + 72);
      v106 = *(_QWORD *)(v4 + 64);
      v107 = *(const __CFArray **)(v4 + 56);
      v108 = *(const void **)(v7 + 24);
      v24 = CIRetainIndexingTokenizer(3u);
      v25 = CFStringCreateWithCStringNoCopy(alloc, v19, 0x8000100u, v100);
      v26 = strlen(v19);
      if (v26 >= 2 && v19[v26 - 1] == 42)
      {
        v119.length = CFStringGetLength(v25) - 1;
        v119.location = 0;
        v27 = CFStringCreateWithSubstring(alloc, v25, v119);
        CFRelease(v25);
        v28 = 1;
        v25 = v27;
        v3 = v99;
      }
      else
      {
        v28 = 0;
      }
      memset(buf, 0, 32);
      CIReleaseIndexingTokenizer((uint64_t)v24);
      if (v28 && *(_QWORD *)&buf[8])
      {
        v29 = strlen(*(const char **)(*(_QWORD *)&buf[24] + 8 * *(_QWORD *)&buf[8] - 8)) + 2;
        v30 = (char *)malloc_type_realloc(*(void **)(*(_QWORD *)&buf[24] + 8 * *(_QWORD *)&buf[8] - 8), v29, 0xAFABFE57uLL);
        v31 = v29;
        v3 = v99;
        strlcat(v30, "*", v31);
        ++*(_QWORD *)&buf[16];
        *(_QWORD *)(*(_QWORD *)&buf[24] + 8 * *(_QWORD *)&buf[8] - 8) = v30;
      }
      v22 = malloc_type_calloc(1uLL, 0x60uLL, 0x10F004045811E64uLL);
      *(_QWORD *)v22 = v19;
      v32 = *(_QWORD *)&buf[24];
      *((_QWORD *)v22 + 4) = *(_QWORD *)&buf[8];
      *((_QWORD *)v22 + 5) = v32;
      *((_QWORD *)v22 + 3) = CFStringGetLength(v25);
      CFRelease(v25);
      v6 = (int *)&unk_1EF19F000;
      if (*((_QWORD *)v22 + 5))
      {
        v33 = *(_QWORD *)&buf[16] + *((_QWORD *)v22 + 4) + 1;
        *((_QWORD *)v22 + 1) = malloc_type_malloc(v33, 0x82EB61D9uLL);
        *((_QWORD *)v22 + 2) = malloc_type_malloc(v33, 0xA36D1370uLL);
        strlcpy(*((char **)v22 + 1), **((const char ***)v22 + 5), v33);
        strlcpy(*((char **)v22 + 2), **((const char ***)v22 + 5), v33);
        v34 = *((_QWORD *)v22 + 4);
        if (v34 >= 2)
        {
          for (i = 1; i < v34; ++i)
          {
            v36 = *(const char **)(*((_QWORD *)v22 + 5) + 8 * i);
            if (*v36 != 42)
            {
              strlcat(*((char **)v22 + 1), "*", v33);
              strlcat(*((char **)v22 + 2), " ", v33);
              v36 = *(const char **)(*((_QWORD *)v22 + 5) + 8 * i);
            }
            strlcat(*((char **)v22 + 1), v36, v33);
            strlcat(*((char **)v22 + 2), *(const char **)(*((_QWORD *)v22 + 5) + 8 * i), v33);
            v34 = *((_QWORD *)v22 + 4);
          }
        }
        if (v34)
          *((_QWORD *)v22 + 10) = malloc_type_calloc(v34, 8uLL, 0x2004093837F09uLL);
      }
      *(_QWORD *)(v4 + 272) = v22;
      v9 = v107;
      v8 = v108;
      v11 = v105;
      v10 = v106;
      v12 = *(const void **)v104;
      v13 = v103;
      v16 = *(_QWORD *)v102;
    }
    v37 = gCPUCount;
    if (gCPUCount >= 0x80)
      v37 = 128;
    PartialQueryResults::PartialQueryResults((uint64_t)v109, v9, v8, v10, v11, v12, v13, v16, v17, v18, v20, v21, (uint64_t)v22, v37);
    if ((v111 & 1) != 0 && !atomic_load((unint64_t *)(v4 + 280)))
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "kicking off background suggestions model population task", buf, 2u);
      }
      dispatch_get_global_queue(-32768, 0);
      md_deadline_once_start();
    }
    v39 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)v4 + 32))(v4, v109);
    v40 = *(_QWORD *)(v4 + 8);
    v41 = CFAbsoluteTimeGetCurrent();
    siquery_addactivetime(v40, v41 - Current);
    if (v6[804] >= 5)
    {
      v55 = *__error();
      v56 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        v57 = CFAbsoluteTimeGetCurrent() - Current;
        v58 = qos_class_self();
        *(_DWORD *)buf = 134218240;
        *(CFAbsoluteTime *)&buf[4] = v57;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v58;
        _os_log_impl(&dword_1B8270000, v56, OS_LOG_TYPE_DEFAULT, "Search was active (performSearch) for %f seconds on the scheduler at qos 0x%x\n", buf, 0x12u);
      }
      *__error() = v55;
    }
    v42 = *(_DWORD *)(v4 + 248);
    if (!*(_QWORD *)(v4 + 256))
    {
      v43 = (unsigned int *)atomic_load(v112);
      if (v43)
      {
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 + 1, v43));
      }
      *(_QWORD *)(v4 + 256) = v43;
    }
    v45 = v116;
    if (!v116)
      goto LABEL_47;
    v46 = 0;
    v47 = 0;
    do
    {
      if (v115[v46])
      {
        VectorCount = _MDStoreOIDArrayGetVectorCount();
        v45 = v116;
      }
      else
      {
        VectorCount = 0;
      }
      v47 += VectorCount;
      ++v46;
    }
    while (v46 < v45);
    if (!v47)
    {
LABEL_47:
      v51 = *(_DWORD *)(v4 + 160);
      if (v51 != 3)
      {
        if (v51 == 4)
          si_querypipe_addcoalescedresults(*(_QWORD *)(v4 + 104), (PartialQueryResults *)v109, *(int **)(*(_QWORD *)(v4 + 24) + 1184), 0);
LABEL_52:
        LOBYTE(v50) = 0;
        goto LABEL_86;
      }
      query_updateTimingOnInitialResults(*(_QWORD *)(v4 + 8));
      si_querypipe_addresults(*(_QWORD *)(v4 + 104), (uint64_t)v109, *((unsigned __int8 *)v3 + 32), 0, *(_QWORD *)(v4 + 8));
      if (v6[804] >= 5)
      {
        v59 = *__error();
        v60 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          v61 = PartialQueryResults::totalcount((PartialQueryResults *)v109);
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v61;
          _os_log_impl(&dword_1B8270000, v60, OS_LOG_TYPE_DEFAULT, "Got %ld results", buf, 0xCu);
        }
        *__error() = v59;
        if ((v39 & 1) != 0)
          goto LABEL_52;
      }
      else if ((v39 & 1) != 0)
      {
        goto LABEL_52;
      }
      v62 = v114;
      v114 = 0;
      si_querypipe_send_matchinfo(*(_QWORD *)(v4 + 104), v62);
      if ((v42 & 0x100) != 0)
        SISearchCtx::pushCompletions((SISearchCtx *)v4, (PartialQueryResults *)v109);
      else
        SISearchCtx::pushCompletionsWithLanguage((SISearchCtx *)v4, (PartialQueryResults *)v109);
      v53 = (unsigned int *)atomic_load((unint64_t *)(v4 + 280));
      if (!v53)
      {
        md_deadline_once_wait();
        v53 = (unsigned int *)atomic_load((unint64_t *)(v4 + 280));
      }
      if (!v113)
      {
        if (v53)
        {
          do
            v63 = __ldaxr(v53);
          while (__stlxr(v63 + 1, v53));
        }
LABEL_84:
        v113 = v53;
      }
LABEL_85:
      si_querypipe_addcompletions(*(_QWORD *)(v4 + 104), (uint64_t)v109, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 8));
      LOBYTE(v50) = 1;
      goto LABEL_86;
    }
    v49 = *(_DWORD *)(v4 + 160);
    if (v49 >= 5)
    {
      LOBYTE(v50) = v39 ^ 1;
      si_querypipe_addresults(*(_QWORD *)(v4 + 104), (uint64_t)v109, *((unsigned __int8 *)v3 + 32), v39 ^ 1, *(_QWORD *)(v4 + 8));
      goto LABEL_86;
    }
    if (v49 == 3)
      v50 = 0;
    else
      v50 = v39 ^ 1;
    query_updateTimingOnInitialResults(*(_QWORD *)(v4 + 8));
    si_querypipe_addresults(*(_QWORD *)(v4 + 104), (uint64_t)v109, *((unsigned __int8 *)v3 + 32), v50, *(_QWORD *)(v4 + 8));
    if (v6[804] >= 5)
    {
      v67 = *__error();
      v68 = _SILogForLogForCategory(1);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        v69 = PartialQueryResults::totalcount((PartialQueryResults *)v109);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v69;
        _os_log_impl(&dword_1B8270000, v68, OS_LOG_TYPE_DEFAULT, "Got %ld results", buf, 0xCu);
      }
      *__error() = v67;
    }
    if (*(_DWORD *)(v4 + 160) == 3)
      v52 = v39;
    else
      v52 = 1;
    if ((v52 & 1) == 0)
    {
      if ((v42 & 0x100) != 0)
        SISearchCtx::pushCompletions((SISearchCtx *)v4, (PartialQueryResults *)v109);
      else
        SISearchCtx::pushCompletionsWithLanguage((SISearchCtx *)v4, (PartialQueryResults *)v109);
      v53 = (unsigned int *)atomic_load((unint64_t *)(v4 + 280));
      if (!v53)
      {
        md_deadline_once_wait();
        v53 = (unsigned int *)atomic_load((unint64_t *)(v4 + 280));
      }
      if (!v113)
      {
        if (v53)
        {
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 + 1, v53));
        }
        goto LABEL_84;
      }
      goto LABEL_85;
    }
LABEL_86:
    v64 = *(_QWORD *)(v4 + 104);
    if (*(_BYTE *)(v4 + 96))
      *(_BYTE *)(v64 + 99) = 0;
    if (*(_BYTE *)(v64 + 96))
      goto LABEL_102;
    v65 = v64;
    do
    {
      v66 = v65;
      v65 = *(_QWORD *)(v65 + 80);
    }
    while (v65);
    if (*(_BYTE *)(*(_QWORD *)(v66 + 8) + 12))
    {
LABEL_102:
      if (v6[804] >= 5)
      {
        v93 = *__error();
        v94 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v94, OS_LOG_TYPE_DEFAULT, "Query canceled", buf, 2u);
        }
        *__error() = v93;
      }
      goto LABEL_103;
    }
    if (!v39)
      goto LABEL_103;
    if (!*((_BYTE *)v3 + 32))
      break;
    PartialQueryResults::~PartialQueryResults((PartialQueryResults *)v109);
  }
  do
  {
    v70 = v64;
    v64 = *(_QWORD *)(v64 + 80);
  }
  while (v64);
  if (si_resultqueue_count(**(_QWORD **)(v70 + 8)) >= 0xB)
  {
    v74 = *__error();
    v75 = _SILogForLogForCategory(1);
    v76 = 2 * (v6[804] < 4);
    if (os_log_type_enabled(v75, v76))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v75, v76, "Result queue overflowed. Not rescheduling", buf, 2u);
    }
    *__error() = v74;
    v3[2] = "executeSearchContextCracked_2 (overflow)";
    *((CFAbsoluteTime *)v3 + 1) = CFAbsoluteTimeGetCurrent();
    if ((*(_DWORD *)(v4 + 304) & 0x80000000) == 0)
      *(_DWORD *)(v4 + 304) = -1;
    for (j = 312; j != 352; j += 8)
    {
      v78 = *(unsigned int **)(*v3 + j);
      *(_QWORD *)(*v3 + j) = 0;
      si_scheduler_resume_with_token(v78);
    }
    si_querypipe_set_semaphore(*(_QWORD *)(v4 + 104), 0);
    os_unfair_lock_lock((os_unfair_lock_t)&sActiveCtxLock);
    Mutable = (__CFSet *)activeCtxs;
    if (!activeCtxs)
    {
      Mutable = CFSetCreateMutable(alloc, 0, 0);
      activeCtxs = (uint64_t)Mutable;
    }
    CFSetAddValue(Mutable, (const void *)v4);
    os_unfair_lock_unlock((os_unfair_lock_t)&sActiveCtxLock);
    v80 = *(_QWORD *)(v4 + 104);
    do
    {
      v81 = v80;
      v80 = *(_QWORD *)(v80 + 80);
    }
    while (v80);
    *(_DWORD *)(*(_QWORD *)(v81 + 8) + 16) = 2;
    v82 = *(_QWORD *)(v4 + 104);
    do
    {
      v83 = v82;
      v82 = *(_QWORD *)(v82 + 80);
    }
    while (v82);
    v84 = *(_QWORD *)(v83 + 8);
    pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)v84 + 8));
    v85 = *(unsigned __int8 *)(v84 + 12);
    if (*(_BYTE *)(v84 + 12)
      || (v86 = si_simplequeue_count_locked(*(_QWORD *)v84), v87 = *(_DWORD *)(v84 + 16), v86 < v87))
    {
      pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)v84 + 8));
      lowWaterRoutine((uint64_t)v3, v85);
    }
    else
    {
      if (!v87)
      {
        v95 = __si_assert_copy_extra_268();
        v96 = v95;
        v97 = "";
        if (v95)
          v97 = v95;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SIResultQueue.c", 277, "queue->lowWaterMark!=0", v97);
        free(v96);
        if (__valid_fs(-1))
          v98 = 2989;
        else
          v98 = 3072;
        *(_DWORD *)v98 = -559038737;
        abort();
      }
      v88 = *(_DWORD *)(v84 + 40);
      v89 = *(_DWORD *)(v84 + 44);
      if (v88 >= v89)
      {
        v90 = 2 * v89;
        if (!v89)
          v90 = 4;
        *(_DWORD *)(v84 + 44) = v90;
        *(_QWORD *)(v84 + 24) = malloc_type_realloc(*(void **)(v84 + 24), 8 * v90, 0x80040B8603338uLL);
        *(_QWORD *)(v84 + 32) = malloc_type_realloc(*(void **)(v84 + 32), 8 * *(unsigned int *)(v84 + 44), 0x80040B8603338uLL);
        v88 = *(_DWORD *)(v84 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(v84 + 24) + 8 * v88) = lowWaterRoutine;
      *(_QWORD *)(*(_QWORD *)(v84 + 32) + 8 * v88) = v3;
      *(_DWORD *)(v84 + 40) = v88 + 1;
      pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)v84 + 8));
    }
    goto LABEL_121;
  }
  v3[2] = "executeSearchContextCracked_2";
  *((CFAbsoluteTime *)v3 + 1) = CFAbsoluteTimeGetCurrent();
  v71 = si_querypipe_copy_jobid(*(_QWORD *)(*v3 + 104));
  if (v71)
  {
    v72 = (uint64_t)v71;
    (*(void (**)(uint64_t, void (*)(double *, uint64_t), _QWORD *, unsigned int *))(*(_QWORD *)v4 + 24))(v4, executeSearchCtx2, v3, v71);
    si_release_qid(v72);
LABEL_121:
    PartialQueryResults::~PartialQueryResults((PartialQueryResults *)v109);
    return;
  }
LABEL_103:
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 48))(v4, 0);
  if ((v50 & 1) == 0)
  {
    v73 = v114;
    v114 = 0;
    si_querypipe_send_matchinfo(*(_QWORD *)(v4 + 104), v73);
    si_querypipe_remove_process(*(_QWORD *)(v4 + 104), *(_QWORD *)(v4 + 8), 0, 0);
  }
  PartialQueryResults::~PartialQueryResults((PartialQueryResults *)v109);
  search_ctx_destroy(v3, 0);
}

void PartialQueryResults::~PartialQueryResults(PartialQueryResults *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;

  md_deadline_once_cancel();
  SICompletionModelRelease(*((unsigned int **)this + 41));
  SIPommesSuggestionsModelRelease(*((_QWORD **)this + 53));
  if (*((_QWORD *)this + 49) && *((uint64_t *)this + 45) >= 1)
  {
    v2 = 0;
    do
      free(*(void **)(*((_QWORD *)this + 49) + 8 * v2++));
    while (*((_QWORD *)this + 45) > v2);
  }
  free(*((void **)this + 50));
  *((_QWORD *)this + 46) = 0;
  free(*((void **)this + 47));
  free(*((void **)this + 48));
  free(*((void **)this + 49));
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 47) = 0;
  if (*((_QWORD *)this + 17) && *((uint64_t *)this + 29) >= 1)
  {
    v3 = 0;
    do
      free(*(void **)(*((_QWORD *)this + 17) + 8 * v3++));
    while (*((_QWORD *)this + 29) > v3);
  }
  free(*((void **)this + 12));
  free(*((void **)this + 34));
  free(*((void **)this + 35));
  free(*((void **)this + 36));
  free(*((void **)this + 17));
  free(*((void **)this + 13));
  free(*((void **)this + 24));
  free(*((void **)this + 26));
  free(*((void **)this + 25));
  free(*((void **)this + 27));
  free(*((void **)this + 28));
  free(*((void **)this + 18));
  free(*((void **)this + 20));
  free(*((void **)this + 22));
  free(*((void **)this + 23));
  free(*((void **)this + 37));
  if (*((_BYTE *)this + 88))
  {
    *((_BYTE *)this + 88) = 0;
    free(*((void **)this + 4));
    free(*((void **)this + 5));
    free(*((void **)this + 6));
    free(*((void **)this + 7));
    free(*((void **)this + 8));
    free(*((void **)this + 9));
    free(*((void **)this + 10));
  }
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  if (*((_DWORD *)this + 884))
  {
    v4 = 0;
    do
    {
      v5 = (char *)this + 8 * v4;
      v6 = (const void *)*((_QWORD *)v5 + 186);
      if (v6)
        CFRelease(v6);
      *((_QWORD *)v5 + 186) = 0;
      v7 = (const void *)*((_QWORD *)v5 + 58);
      if (v7)
        CFRelease(v7);
      *((_QWORD *)v5 + 58) = 0;
      ++v4;
    }
    while (v4 < *((unsigned int *)this + 884));
  }
  v8 = (const void *)*((_QWORD *)this + 57);
  if (v8)
    CFRelease(v8);
  *((_QWORD *)this + 57) = 0;
  v9 = (const void *)*((_QWORD *)this + 14);
  if (v9)
    CFRelease(v9);
  *((_QWORD *)this + 14) = 0;
  v10 = (const void *)*((_QWORD *)this + 31);
  if (v10)
    CFRelease(v10);
  *((_QWORD *)this + 31) = 0;
  v11 = (const void *)*((_QWORD *)this + 56);
  if (v11)
    CFRelease(v11);
  *((_QWORD *)this + 56) = 0;
  v12 = (const void *)*((_QWORD *)this + 55);
  if (v12)
    CFRelease(v12);
  *((_QWORD *)this + 55) = 0;
  md_deadline_once_release();
}

_QWORD *SIPommesSuggestionsModelRelease(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;

  if (result)
  {
    v1 = result;
    do
    {
      v2 = __ldaxr((unsigned int *)result);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, (unsigned int *)result));
    if (!v3)
    {
      if (result[2])
        SILocalizationRelease();
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>>>::~__hash_table((uint64_t)(v1 + 38));
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>>>::~__hash_table((uint64_t)(v1 + 33));
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>>>::~__hash_table((uint64_t)(v1 + 28));
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>>>::~__hash_table((uint64_t)(v1 + 23));
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<_topicCandidate>>>>::~__hash_table((uint64_t)(v1 + 18));
      v4 = (_QWORD *)v1[15];
      if (v4)
      {
        do
        {
          v5 = (_QWORD *)*v4;
          std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_photosCandidate>>,0>((uint64_t)(v4 + 2));
          operator delete(v4);
          v4 = v5;
        }
        while (v5);
      }
      v6 = (void *)v1[13];
      v1[13] = 0;
      if (v6)
        operator delete(v6);
      v7 = (_QWORD *)v1[10];
      if (v7)
      {
        do
        {
          v8 = (_QWORD *)*v7;
          std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_peopleCandidate>>,0>((uint64_t)(v7 + 2));
          operator delete(v7);
          v7 = v8;
        }
        while (v8);
      }
      v9 = (void *)v1[8];
      v1[8] = 0;
      if (v9)
        operator delete(v9);
      v10 = (_QWORD *)v1[5];
      if (v10)
      {
        do
        {
          v11 = (_QWORD *)*v10;
          std::__destroy_at[abi:nn180100]<std::pair<std::string const,std::unique_ptr<_freeTextCandidate>>,0>((uint64_t)(v10 + 2));
          operator delete(v10);
          v10 = v11;
        }
        while (v11);
      }
      v12 = (void *)v1[3];
      v1[3] = 0;
      if (v12)
        operator delete(v12);
      JUMPOUT(0x1BCCB06A4);
    }
  }
  return result;
}

void SICompletionModelRelease(unsigned int *a1)
{
  unsigned int v2;
  unsigned int v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  if (a1)
  {
    do
    {
      v2 = __ldaxr(a1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, a1));
    if (!v3)
    {
      if (*((_QWORD *)a1 + 1) && (a1[1] & 0x10) != 0)
        SILanguageModelRelease();
      v4 = (const void *)*((_QWORD *)a1 + 5);
      if (v4)
      {
        CFRelease(v4);
        *((_QWORD *)a1 + 5) = 0;
      }
      v5 = (const void *)*((_QWORD *)a1 + 2);
      if (v5)
      {
        CFRelease(v5);
        *((_QWORD *)a1 + 2) = 0;
      }
      v6 = (const void *)*((_QWORD *)a1 + 3);
      if (v6)
      {
        CFRelease(v6);
        *((_QWORD *)a1 + 3) = 0;
      }
      v7 = (const void *)*((_QWORD *)a1 + 4);
      if (v7)
        CFRelease(v7);
      free(a1);
    }
  }
}

void SISearchCtx_METADATA::postIterate(SISearchCtx_METADATA *this, char a2)
{
  SISearchCtx *v3;

  SISearchCtx_METADATA::cleanUp(this, a2);
  SISearchCtx::common_postIterate(this, v3);
}

uint64_t refillOids(SISearchCtx_METADATA *a1, int a2, double a3, size_t a4)
{
  uint64_t v5;
  uint64_t v9;
  char v10;
  NSObject *Log;
  os_signpost_id_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  double Current;
  double v26;
  unint64_t v27;
  void *v28;
  size_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  size_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t i;
  unsigned int v52;
  BOOL v53;
  int v54;
  BOOL v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  BOOL v71;
  unint64_t v72;
  int v73;
  NSObject *v74;
  os_log_type_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  int64_t v97;
  unsigned __int8 v98;
  unint64_t v99;
  __int128 v100;
  double v101;
  double v102;
  int v103;
  int v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  double v108;
  const char *v109;
  uint64_t v110;
  int v111;
  const char *v112;
  uint64_t v113;
  const char *v114;
  const char *v115;
  const char *v116;
  const char *v117;
  size_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  _BYTE *v125;
  uint64_t v126;
  int v127;
  int v128;
  NSObject *v129;
  os_log_type_t v130;
  const char *v131;
  double v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  NSObject *v138;
  os_log_type_t v139;
  const char *v140;
  int *v141;
  uint64_t v142;
  size_t v143;
  uint64_t j;
  void *v145;
  uint64_t v146;
  void *v147;
  void *v148;
  uint64_t v149;
  void *v150;
  size_t v151;
  void *v152;
  size_t v153;
  void *v154;
  void *v155;
  uint64_t v156;
  void *v157;
  void *v158;
  uint64_t v159;
  size_t v160;
  void *v161;
  char *v162;
  uint64_t v163;
  size_t v164;
  char *v165;
  void *v166;
  uint64_t v167;
  size_t v168;
  void *v169;
  unsigned int v170;
  size_t v171;
  unint64_t v172;
  size_t v173;
  size_t v174;
  uint64_t v175;
  int v176;
  NSObject *v177;
  os_log_type_t v178;
  _BOOL4 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  int64_t v192;
  unint64_t v193;
  BOOL v194;
  int v195;
  NSObject *v196;
  os_log_type_t v197;
  int *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  int64_t v211;
  int v212;
  NSObject *v213;
  os_log_type_t v214;
  _BOOL4 v215;
  unint64_t v216;
  int *v217;
  int v218;
  NSObject *v219;
  os_log_type_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  int64_t v233;
  unint64_t v234;
  BOOL v235;
  NSObject *v236;
  os_log_type_t v237;
  int v238;
  NSObject *v239;
  os_log_type_t v240;
  _BOOL4 v241;
  uint64_t has_ranking_weights;
  int v243;
  uint64_t v244;
  int v245;
  NSObject *v246;
  os_log_type_t v247;
  uint64_t v248;
  int v249;
  NSObject *v250;
  os_log_type_t v251;
  uint64_t v252;
  unsigned int v253;
  uint64_t v254;
  size_t v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  unint64_t v262;
  uint64_t v263;
  int v264;
  NSObject *v265;
  os_log_type_t v266;
  NSObject *v267;
  os_signpost_id_t v268;
  NSObject *v269;
  int v270;
  NSObject *v271;
  os_log_type_t v272;
  NSObject *v273;
  os_signpost_id_t v274;
  NSObject *v275;
  uint64_t v276;
  qos_class_t v277;
  NSObject *v278;
  uint64_t v279;
  qos_class_t v280;
  __int128 v281;
  __int128 v282;
  int v283;
  size_t v284;
  uint64_t v285;
  size_t v286;
  int v287;
  uint64_t v288;
  __int128 v289;
  uint64_t v290;
  __int128 v291;
  _OWORD *v292;
  size_t v293;
  __int16 v294[8];
  _OWORD v295[11];
  _OWORD v296[11];
  _OWORD v297[11];
  size_t v298;
  _OWORD v299[11];
  _OWORD v300[11];
  _OWORD v301[11];
  uint64_t v302;
  char v303;
  unint64_t v304;
  _BYTE buf[22];
  __int16 v306;
  const char *v307;
  __int16 v308;
  const char *v309;
  __int16 v310;
  const char *v311;
  __int16 v312;
  const char *v313;
  __int16 v314;
  const char *v315;
  __int16 v316;
  const char *v317;
  __int16 v318;
  uint64_t v319;
  uint64_t v320;

  v320 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)a1 + 85))
    goto LABEL_5;
  v5 = *((_QWORD *)a1 + 13);
  if (*(_BYTE *)(v5 + 96))
    goto LABEL_5;
  do
  {
    v9 = v5;
    v5 = *(_QWORD *)(v5 + 80);
  }
  while (v5);
  if (*(_BYTE *)(*(_QWORD *)(v9 + 8) + 12))
  {
LABEL_5:
    v10 = 0;
    return v10 & 1;
  }
  kdebug_trace();
  Log = _MDPerf_QueryLog();
  v13 = *((_QWORD *)a1 + 1);
  if (v13 + 1 >= 2)
  {
    v14 = Log;
    if (os_signpost_enabled(Log))
    {
      v15 = *(_QWORD *)(v13 + 608);
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = v15;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = qos_class_self();
      _os_signpost_emit_with_name_impl(&dword_1B8270000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v13, "QueryRefillOids", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x", buf, 0x12u);
    }
  }
  v16 = *((_QWORD *)a1 + 5);
  v17 = (v16 >> 7) & 2 | ((v16 & 0x80) == 0);
  v18 = **((_QWORD **)a1 + 105);
  v19 = *(unsigned __int16 *)(v18 + 40);
  if (v19 == 4)
  {
    v20 = *(_QWORD *)(v18 + 16);
    if (v20)
      LODWORD(v20) = (*(_DWORD *)(v20 + 24) < 0xFu) & (0x5060u >> *(_DWORD *)(v20 + 24));
  }
  else
  {
    LODWORD(v20) = 0;
  }
  if ((_DWORD)v20 != ((v19 >> 3) & 1))
    v17 |= 4u;
  v21 = (v16 >> 9) & 8 | v17;
  v22 = ~(_DWORD)v16;
  if ((v16 & 0x100000) != 0)
    v23 = v21;
  else
    v23 = v21 | 0x10;
  if ((*(_QWORD *)&v22 & 0x600000) != 0)
    v24 = v23 | 0x20;
  else
    v24 = v23;
  Current = CFAbsoluteTimeGetCurrent();
  v26 = CFAbsoluteTimeGetCurrent();
  v27 = *((_QWORD *)a1 + 75);
  v304 = v27;
  *((_BYTE *)a1 + 640) = 0;
  v303 = 0;
  v302 = 0;
  v28 = (void *)*((_QWORD *)a1 + 77);
  v29 = 8 * a4;
  v290 = 8 * a4;
  if (malloc_size(v28) >= 8 * a4)
  {
    v30 = v28;
  }
  else
  {
    v30 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 8 * a4, 0x6085D6BuLL);
    if (!v30)
      _log_fault_for_malloc_failure();
    if (8 * v27 >= 4 * *MEMORY[0x1E0C85AD8])
      madvise(v30, 8 * v27, 3);
    memcpy(v30, v28, 8 * v27);
    free(v28);
    v29 = v290;
  }
  *((_QWORD *)a1 + 77) = v30;
  v31 = (void *)*((_QWORD *)a1 + 78);
  v32 = *((_QWORD *)a1 + 75);
  if (malloc_size(v31) >= v29)
  {
    v33 = v31;
  }
  else
  {
    v33 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v29, 0x6085D6BuLL);
    if (!v33)
      _log_fault_for_malloc_failure();
    if (8 * v32 >= (unint64_t)(4 * *MEMORY[0x1E0C85AD8]))
      madvise(v33, 8 * v32, 3);
    memcpy(v33, v31, 8 * v32);
    free(v31);
  }
  *((_QWORD *)a1 + 78) = v33;
  v34 = (void *)*((_QWORD *)a1 + 79);
  v35 = *((_QWORD *)a1 + 75);
  if (malloc_size(v34) >= a4)
  {
    v36 = v34;
  }
  else
  {
    v36 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, a4, 0x6085D6BuLL);
    if (!v36)
      _log_fault_for_malloc_failure();
    if (v35 >= 4 * *MEMORY[0x1E0C85AD8])
      madvise(v36, v35, 3);
    memcpy(v36, v34, v35);
    free(v34);
  }
  *((_QWORD *)a1 + 79) = v36;
  v37 = (void *)*((_QWORD *)a1 + 117);
  v38 = *((_QWORD *)a1 + 75);
  v285 = 80 * a4;
  if (malloc_size(v37) >= 80 * a4)
  {
    v39 = v37;
  }
  else
  {
    v39 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 80 * a4, 0x6085D6BuLL);
    if (!v39)
      _log_fault_for_malloc_failure();
    if (80 * v38 >= (unint64_t)(4 * *MEMORY[0x1E0C85AD8]))
      madvise(v39, 80 * v38, 3);
    memcpy(v39, v37, 80 * v38);
    free(v37);
  }
  *((_QWORD *)a1 + 117) = v39;
  v40 = (void *)*((_QWORD *)a1 + 118);
  v41 = *((_QWORD *)a1 + 75);
  if (malloc_size(v40) >= 5 * a4)
  {
    v42 = v40;
  }
  else
  {
    v42 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 5 * a4, 0x6085D6BuLL);
    if (!v42)
      _log_fault_for_malloc_failure();
    if (5 * v41 >= (unint64_t)(4 * *MEMORY[0x1E0C85AD8]))
      madvise(v42, 5 * v41, 3);
    memcpy(v42, v40, 5 * v41);
    free(v40);
  }
  v283 = a2;
  *((_QWORD *)a1 + 118) = v42;
  v43 = (char *)*((_QWORD *)a1 + 119);
  v44 = *((_QWORD *)a1 + 75);
  v293 = 16 * a4;
  if (malloc_size(v43) >= 16 * a4)
  {
    v46 = v43;
  }
  else
  {
    v45 = 16 * v44;
    v46 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 16 * a4, 0x6085D6BuLL);
    if (!v46)
      _log_fault_for_malloc_failure();
    if (v45 >= 4 * *MEMORY[0x1E0C85AD8])
      madvise(v46, 16 * v44, 3);
    memcpy(v46, v43, 16 * v44);
    free(v43);
    bzero(&v46[v45], v293 - v45);
  }
  *((_QWORD *)a1 + 119) = v46;
  v47 = (void *)*((_QWORD *)a1 + 83);
  v48 = *((_QWORD *)a1 + 75);
  v284 = 2 * a4;
  if (malloc_size(v47) >= 2 * a4)
  {
    v49 = v47;
  }
  else
  {
    v49 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 2 * a4, 0x6085D6BuLL);
    if (!v49)
      _log_fault_for_malloc_failure();
    if (2 * v48 >= (unint64_t)(4 * *MEMORY[0x1E0C85AD8]))
      madvise(v49, 2 * v48, 3);
    memcpy(v49, v47, 2 * v48);
    free(v47);
  }
  v50 = 0;
  v292 = (_OWORD *)((char *)a1 + 936);
  *((_QWORD *)a1 + 83) = v49;
  do
  {
    if (*((_BYTE *)a1 + v50 + 984))
      *((_QWORD *)a1 + v50 + 124) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 105)
                                                          + 48 * *((unsigned __int8 *)a1 + v50 + 984))
                                              + 24);
    ++v50;
  }
  while (v50 != 5);
  for (i = 0; i != 3; ++i)
  {
    if (*((_BYTE *)a1 + i + 1032))
      *((_QWORD *)a1 + i + 130) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 105)
                                                        + 48 * (*((unsigned __int8 *)a1 + i + 1032) - 1))
                                            + 24);
  }
  v52 = *((_DWORD *)a1 + 40);
  v53 = v52 > 6;
  v54 = (1 << v52) & 0x4A;
  v55 = v53 || v54 == 0;
  v286 = 5 * a4;
  if (v55)
  {
    v85 = *((_QWORD *)a1 + 85);
    v86 = *((_QWORD *)a1 + 77);
    v87 = *((_QWORD *)a1 + 78);
    v88 = *((_QWORD *)a1 + 79);
    v89 = v292[9];
    v299[8] = v292[8];
    v299[9] = v89;
    v299[10] = v292[10];
    v90 = v292[5];
    v299[4] = v292[4];
    v299[5] = v90;
    v91 = v292[7];
    v299[6] = v292[6];
    v299[7] = v91;
    v92 = v292[1];
    v299[0] = *v292;
    v299[1] = v92;
    v93 = v292[3];
    v299[2] = v292[2];
    v299[3] = v93;
    v94 = *((_QWORD *)a1 + 1);
    v95 = *(double *)(v94 + 360);
    v96 = *((_QWORD *)a1 + 116);
    v97 = *((_QWORD *)a1 + 22);
    if (!v97)
      v97 = *((_QWORD *)a1 + 23);
    v98 = *(_QWORD *)(v94 + 216) != 0;
    v287 = v24;
    ContentIndexDocSetResolveOIDsAndGroups_Step(v85, v86, v87, v88, (uint64_t)v49, (uint64_t *)v299, v95, v96, a4, &v304, &v303, &v302, v24, v97, 0, a4, v98);
    v99 = v304;
    *((_QWORD *)a1 + 75) = v304;
    v73 = *__error();
    v82 = _SILogForLogForCategory(1);
    v83 = 2 * (dword_1EF19FC90 < 4);
    if (!os_log_type_enabled(v82, v83))
      goto LABEL_107;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v99;
    v84 = "Real Count: %ld";
    goto LABEL_106;
  }
  v56 = v24 | 0x40;
  v57 = *((_QWORD *)a1 + 22);
  if (v57)
  {
    if (v57 <= a4)
      v58 = a4;
    else
      v58 = *((_QWORD *)a1 + 22);
    v59 = 4;
  }
  else
  {
    v60 = *((_QWORD *)a1 + 23);
    if (v60 <= a4)
      v58 = a4;
    else
      v58 = *((_QWORD *)a1 + 23);
    v55 = v60 == 0;
    v59 = 2 * (v60 != 0);
    if (v55)
      v58 = a4;
  }
  v61 = *((_QWORD *)a1 + 85);
  v62 = *((_QWORD *)a1 + 77);
  v63 = *((_QWORD *)a1 + 78);
  v64 = *((_QWORD *)a1 + 79);
  v65 = *((_BYTE *)a1 + 40);
  v287 = v56;
  if (v65 < 0)
  {
    v76 = v292[9];
    v301[8] = v292[8];
    v301[9] = v76;
    v301[10] = v292[10];
    v77 = v292[5];
    v301[4] = v292[4];
    v301[5] = v77;
    v78 = v292[6];
    v301[7] = v292[7];
    v301[6] = v78;
    v79 = v292[1];
    v301[0] = *v292;
    v301[1] = v79;
    v80 = v292[2];
    v301[3] = v292[3];
    v301[2] = v80;
    if (!v57)
      v57 = *((_QWORD *)a1 + 23);
    ContentIndexDocSetResolveOIDsAndGroups_Step(v61, v62, v63, v64, (uint64_t)v49, (uint64_t *)v301, *(double *)(*((_QWORD *)a1 + 1) + 360), *((_QWORD *)a1 + 116), a4, &v304, &v303, &v302, v56, v57, v59, v58, *(_QWORD *)(*((_QWORD *)a1 + 1) + 216) != 0);
    v81 = v304;
    *((_QWORD *)a1 + 75) = v304;
    v73 = *__error();
    v82 = _SILogForLogForCategory(1);
    v83 = 2 * (dword_1EF19FC90 < 4);
    if (!os_log_type_enabled(v82, v83))
      goto LABEL_107;
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v81;
    v84 = "Count: %ld";
LABEL_106:
    _os_log_impl(&dword_1B8270000, v82, v83, v84, buf, 0xCu);
LABEL_107:
    v71 = 0;
    goto LABEL_108;
  }
  v66 = v292[9];
  v300[8] = v292[8];
  v300[9] = v66;
  v300[10] = v292[10];
  v67 = v292[5];
  v300[4] = v292[4];
  v300[5] = v67;
  v68 = v292[7];
  v300[6] = v292[6];
  v300[7] = v68;
  v69 = v292[1];
  v300[0] = *v292;
  v300[1] = v69;
  v70 = v292[3];
  v300[2] = v292[2];
  v300[3] = v70;
  if (!v57)
    v57 = *((_QWORD *)a1 + 23);
  v71 = ContentIndexDocSetResolveOIDsAndGroups_Step(v61, v62, v63, v64, (uint64_t)v49, (uint64_t *)v300, *(double *)(*((_QWORD *)a1 + 1) + 360), *((_QWORD *)a1 + 116), a4, &v304, &v303, &v302, v56, v57, v59, v58, *(_QWORD *)(*((_QWORD *)a1 + 1) + 216) != 0) != 0;
  v72 = v304;
  *((_QWORD *)a1 + 75) = v304;
  v73 = *__error();
  v74 = _SILogForLogForCategory(1);
  v75 = 2 * (dword_1EF19FC90 < 4);
  if (os_log_type_enabled(v74, v75))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v72;
    _os_log_impl(&dword_1B8270000, v74, v75, "Real Count: %ld", buf, 0xCu);
  }
LABEL_108:
  *__error() = v73;
  *((_BYTE *)a1 + 640) |= v303;
  v101 = CFAbsoluteTimeGetCurrent();
  *(double *)(*((_QWORD *)a1 + 1) + 408) = *(double *)(*((_QWORD *)a1 + 1) + 408) + v101 - v26;
  if (!v71)
  {
    v102 = 0.0;
    *(_QWORD *)&v100 = 134218752;
    v291 = v100;
    *(_QWORD *)&v100 = 134218496;
    v282 = v100;
    *(_QWORD *)&v100 = 134217984;
    v289 = v100;
    *(_QWORD *)&v100 = 67109120;
    v281 = v100;
    v10 = 1;
    while (1)
    {
      v118 = *((_QWORD *)a1 + 75);
      if (v118 >= a4 || (v10 & 1) == 0)
      {
        v103 = 0;
        v10 &= v118 >= a4;
        goto LABEL_111;
      }
      if (!*((_QWORD *)a1 + 85))
        goto LABEL_300;
      v119 = *((_QWORD *)a1 + 13);
      if (*(_BYTE *)(v119 + 96))
        goto LABEL_300;
      v120 = *((_QWORD *)a1 + 13);
      do
      {
        v121 = v120;
        v120 = *(_QWORD *)(v120 + 80);
      }
      while (v120);
      if (*(_BYTE *)(*(_QWORD *)(v121 + 8) + 12))
      {
LABEL_300:
        v103 = 0;
        goto LABEL_110;
      }
      v298 = 0;
      v122 = 0;
      v123 = 1;
      if (v102 < a3)
      {
        do
        {
          if (*((_QWORD *)a1 + 75) >= a4 || v298 >= a4)
            break;
          if (!v123)
            break;
          v125 = (_BYTE *)(v119 + 96);
          do
          {
            v126 = v119;
            v119 = *(_QWORD *)(v119 + 80);
          }
          while (v119);
          if (*(_BYTE *)(*(_QWORD *)(v126 + 8) + 12))
            break;
          v127 = ContentIndexDocSet_Step(*((_QWORD *)a1 + 85), &v298, v125);
          v128 = *__error();
          v129 = _SILogForLogForCategory(1);
          v130 = 2 * (dword_1EF19FC90 < 4);
          if (os_log_type_enabled(v129, v130))
          {
            v131 = (const char *)*((_QWORD *)a1 + 75);
            *(_DWORD *)buf = v291;
            *(_QWORD *)&buf[4] = v122;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v298;
            v306 = 2048;
            v307 = v131;
            v308 = 1024;
            LODWORD(v309) = v127 == 35;
            _os_log_impl(&dword_1B8270000, v129, v130, "Available at %ld loops: %ld (%ld) keep going:%d", buf, 0x26u);
          }
          *__error() = v128;
          v123 = v127 == 35;
          v132 = CFAbsoluteTimeGetCurrent();
          v119 = *((_QWORD *)a1 + 13);
          if (*(_BYTE *)(v119 + 96))
            goto LABEL_292;
          v133 = *((_QWORD *)a1 + 13);
          do
          {
            v134 = v133;
            v133 = *(_QWORD *)(v133 + 80);
          }
          while (v133);
          if (*(_BYTE *)(*(_QWORD *)(v134 + 8) + 12))
            goto LABEL_292;
          v135 = *((_QWORD *)a1 + 13);
          do
          {
            v136 = v135;
            v135 = *(_QWORD *)(v135 + 80);
          }
          while (v135);
          if (*(_BYTE *)(*(_QWORD *)(v136 + 8) + 12))
          {
LABEL_292:
            *((_QWORD *)a1 + 75) = 0;
            *(double *)(*((_QWORD *)a1 + 1) + 408) = *(double *)(*((_QWORD *)a1 + 1) + 408)
                                                     + CFAbsoluteTimeGetCurrent()
                                                     - v101;
            v270 = *__error();
            v271 = _SILogForLogForCategory(1);
            v272 = 2 * (dword_1EF19FC90 < 4);
            if (os_log_type_enabled(v271, v272))
            {
              *(_DWORD *)buf = v289;
              *(_QWORD *)&buf[4] = v298;
              _os_log_impl(&dword_1B8270000, v271, v272, "Canceled; leaving with: %ld", buf, 0xCu);
            }
            *__error() = v270;
            kdebug_trace();
            v273 = _MDPerf_QueryLog();
            v274 = *((_QWORD *)a1 + 1);
            if (v274 + 1 >= 2)
            {
              v275 = v273;
              if (os_signpost_enabled(v273))
              {
                v276 = *(_QWORD *)(v274 + 608);
                v277 = qos_class_self();
                *(_DWORD *)buf = 134218240;
                *(_QWORD *)&buf[4] = v276;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v277;
                _os_signpost_emit_with_name_impl(&dword_1B8270000, v275, OS_SIGNPOST_INTERVAL_END, v274, "QueryRefillOids", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x", buf, 0x12u);
              }
            }
            goto LABEL_5;
          }
          ++v122;
        }
        while (v132 < a3);
      }
      v137 = *__error();
      v138 = _SILogForLogForCategory(1);
      v139 = 2 * (dword_1EF19FC90 < 4);
      if (os_log_type_enabled(v138, v139))
      {
        v140 = (const char *)*((_QWORD *)a1 + 75);
        *(_DWORD *)buf = v282;
        *(_QWORD *)&buf[4] = v122;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v298;
        v306 = 2048;
        v307 = v140;
        _os_log_impl(&dword_1B8270000, v138, v139, "Available after %ld loops: %ld (%ld)", buf, 0x20u);
      }
      v141 = __error();
      v142 = 0;
      *v141 = v137;
      v143 = v290;
      do
      {
        if (*((_BYTE *)a1 + v142 + 984))
          *((_QWORD *)a1 + v142 + 124) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 105)
                                                               + 48 * *((unsigned __int8 *)a1 + v142 + 984))
                                                   + 24);
        ++v142;
      }
      while (v142 != 5);
      for (j = 0; j != 3; ++j)
      {
        if (*((_BYTE *)a1 + j + 1032))
          *((_QWORD *)a1 + j + 130) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 105)
                                                            + 48
                                                            * (*((unsigned __int8 *)a1 + j + 1032) - 1))
                                                + 24);
      }
      v145 = (void *)*((_QWORD *)a1 + 77);
      v146 = *((_QWORD *)a1 + 75);
      if (malloc_size(v145) >= v143)
      {
        v147 = v145;
      }
      else
      {
        v147 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v143, 0x6085D6BuLL);
        if (!v147)
          _log_fault_for_malloc_failure();
        if (8 * v146 >= (unint64_t)(4 * *MEMORY[0x1E0C85AD8]))
          madvise(v147, 8 * v146, 3);
        memcpy(v147, v145, 8 * v146);
        free(v145);
      }
      *((_QWORD *)a1 + 77) = v147;
      v148 = (void *)*((_QWORD *)a1 + 78);
      v149 = *((_QWORD *)a1 + 75);
      if (malloc_size(v148) >= v143)
      {
        v150 = v148;
        v151 = v285;
      }
      else
      {
        v150 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v143, 0x6085D6BuLL);
        if (!v150)
          _log_fault_for_malloc_failure();
        v151 = v285;
        if (8 * v149 >= (unint64_t)(4 * *MEMORY[0x1E0C85AD8]))
          madvise(v150, 8 * v149, 3);
        memcpy(v150, v148, 8 * v149);
        free(v148);
      }
      *((_QWORD *)a1 + 78) = v150;
      v152 = (void *)*((_QWORD *)a1 + 79);
      v153 = *((_QWORD *)a1 + 75);
      if (malloc_size(v152) >= a4)
      {
        v154 = v152;
      }
      else
      {
        v154 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, a4, 0x6085D6BuLL);
        if (!v154)
          _log_fault_for_malloc_failure();
        if (v153 >= 4 * *MEMORY[0x1E0C85AD8])
          madvise(v154, v153, 3);
        memcpy(v154, v152, v153);
        free(v152);
      }
      *((_QWORD *)a1 + 79) = v154;
      v155 = (void *)*((_QWORD *)a1 + 117);
      v156 = *((_QWORD *)a1 + 75);
      if (malloc_size(v155) >= v151)
      {
        v157 = v155;
      }
      else
      {
        v157 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v151, 0x6085D6BuLL);
        if (!v157)
          _log_fault_for_malloc_failure();
        if (80 * v156 >= (unint64_t)(4 * *MEMORY[0x1E0C85AD8]))
          madvise(v157, 80 * v156, 3);
        memcpy(v157, v155, 80 * v156);
        free(v155);
      }
      *((_QWORD *)a1 + 117) = v157;
      v158 = (void *)*((_QWORD *)a1 + 118);
      v159 = *((_QWORD *)a1 + 75);
      v160 = malloc_size(v158);
      if (v160 >= v286)
      {
        v161 = v158;
      }
      else
      {
        v161 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v286, 0x6085D6BuLL);
        if (!v161)
          _log_fault_for_malloc_failure();
        if (5 * v159 >= (unint64_t)(4 * *MEMORY[0x1E0C85AD8]))
          madvise(v161, 5 * v159, 3);
        memcpy(v161, v158, 5 * v159);
        free(v158);
      }
      *((_QWORD *)a1 + 118) = v161;
      v162 = (char *)*((_QWORD *)a1 + 119);
      v163 = *((_QWORD *)a1 + 75);
      v164 = malloc_size(v162);
      if (v164 >= v293)
      {
        v165 = v162;
      }
      else
      {
        v165 = (char *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, v293, 0x6085D6BuLL);
        if (!v165)
          _log_fault_for_malloc_failure();
        if (16 * v163 >= (unint64_t)(4 * *MEMORY[0x1E0C85AD8]))
          madvise(v165, 16 * v163, 3);
        memcpy(v165, v162, 16 * v163);
        free(v162);
        bzero(&v165[16 * v163], v293 - 16 * v163);
      }
      *((_QWORD *)a1 + 119) = v165;
      v166 = (void *)*((_QWORD *)a1 + 83);
      v167 = *((_QWORD *)a1 + 75);
      v168 = malloc_size(v166);
      if (v168 >= v284)
      {
        v169 = v166;
      }
      else
      {
        v169 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v284, 0x6085D6BuLL);
        if (!v169)
          _log_fault_for_malloc_failure();
        if (2 * v167 >= (unint64_t)(4 * *MEMORY[0x1E0C85AD8]))
          madvise(v169, 2 * v167, 3);
        memcpy(v169, v166, 2 * v167);
        free(v166);
      }
      *((_QWORD *)a1 + 83) = v169;
      v170 = *((_DWORD *)a1 + 40);
      if (v170 > 6 || ((1 << v170) & 0x4A) == 0)
        break;
      v171 = *((_QWORD *)a1 + 22);
      if (v171)
      {
        if (v171 <= a4)
          v172 = a4;
        else
          v172 = *((_QWORD *)a1 + 22);
        v288 = 4;
      }
      else
      {
        v173 = *((_QWORD *)a1 + 23);
        if (v173 <= a4)
          v174 = a4;
        else
          v174 = *((_QWORD *)a1 + 23);
        v288 = 2 * (v173 != 0);
        if (v173)
          v172 = v174;
        else
          v172 = a4;
      }
      v175 = *((_QWORD *)a1 + 5);
      v176 = *__error();
      v177 = _SILogForLogForCategory(1);
      v178 = 2 * (dword_1EF19FC90 < 4);
      v179 = os_log_type_enabled(v177, v178);
      if ((v175 & 0x80) == 0)
      {
        if (v179)
        {
          v180 = *((_QWORD *)a1 + 75);
          *(_DWORD *)buf = v289;
          *(_QWORD *)&buf[4] = v180;
          _os_log_impl(&dword_1B8270000, v177, v178, "(Full)Available: %ld", buf, 0xCu);
        }
        *__error() = v176;
        v181 = *((_QWORD *)a1 + 85);
        v182 = *((_QWORD *)a1 + 77);
        v183 = *((_QWORD *)a1 + 78);
        v184 = *((_QWORD *)a1 + 79);
        v185 = *((_QWORD *)a1 + 83);
        v186 = v292[10];
        v187 = v292[8];
        v296[9] = v292[9];
        v296[10] = v186;
        v188 = v292[6];
        v296[7] = v292[7];
        v296[8] = v187;
        v189 = v292[4];
        v296[5] = v292[5];
        v296[6] = v188;
        v190 = v292[2];
        v296[3] = v292[3];
        v296[4] = v189;
        v191 = *v292;
        v296[1] = v292[1];
        v296[2] = v190;
        v296[0] = v191;
        v192 = *((_QWORD *)a1 + 22);
        if (!v192)
          v192 = *((_QWORD *)a1 + 23);
        LODWORD(v288) = ContentIndexDocSetResolveOIDsAndGroups_Step(v181, v182, v183, v184, v185, (uint64_t *)v296, *(double *)(*((_QWORD *)a1 + 1) + 360), *((_QWORD *)a1 + 116), a4, &v304, &v303, &v302, v287, v192, v288, v172, *(_QWORD *)(*((_QWORD *)a1 + 1) + 216) != 0) != 0;
        v193 = v304;
        v194 = v304 > *((_QWORD *)a1 + 75);
        *((_QWORD *)a1 + 75) = v304;
        v195 = *__error();
        v196 = _SILogForLogForCategory(1);
        v197 = 2 * (dword_1EF19FC90 < 4);
        if (os_log_type_enabled(v196, v197))
        {
          *(_DWORD *)buf = v289;
          *(_QWORD *)&buf[4] = v193;
          _os_log_impl(&dword_1B8270000, v196, v197, "(Full)Count: %ld", buf, 0xCu);
        }
        v10 = v194 || v123;
        v198 = __error();
LABEL_251:
        *v198 = v195;
        goto LABEL_252;
      }
      if (v179)
      {
        v199 = *((_QWORD *)a1 + 75);
        *(_DWORD *)buf = v289;
        *(_QWORD *)&buf[4] = v199;
        _os_log_impl(&dword_1B8270000, v177, v178, "(Full)Available: %ld", buf, 0xCu);
      }
      *__error() = v176;
      v200 = *((_QWORD *)a1 + 85);
      v201 = *((_QWORD *)a1 + 77);
      v202 = *((_QWORD *)a1 + 78);
      v203 = *((_QWORD *)a1 + 79);
      v204 = *((_QWORD *)a1 + 83);
      v205 = v292[10];
      v206 = v292[8];
      v297[9] = v292[9];
      v297[10] = v205;
      v207 = v292[6];
      v297[7] = v292[7];
      v297[8] = v206;
      v208 = v292[4];
      v297[5] = v292[5];
      v297[6] = v207;
      v209 = v292[2];
      v297[3] = v292[3];
      v297[4] = v208;
      v210 = *v292;
      v297[1] = v292[1];
      v297[2] = v209;
      v297[0] = v210;
      v211 = *((_QWORD *)a1 + 22);
      if (!v211)
        v211 = *((_QWORD *)a1 + 23);
      ContentIndexDocSetResolveOIDsAndGroups_Step(v200, v201, v202, v203, v204, (uint64_t *)v297, *(double *)(*((_QWORD *)a1 + 1) + 360), *((_QWORD *)a1 + 116), a4, &v304, &v303, &v302, v287, v211, v288, v172, *(_QWORD *)(*((_QWORD *)a1 + 1) + 216) != 0);
      v212 = *__error();
      v213 = _SILogForLogForCategory(1);
      v214 = 2 * (dword_1EF19FC90 < 4);
      v215 = os_log_type_enabled(v213, v214);
      v216 = v304;
      if (v215)
      {
        *(_DWORD *)buf = v289;
        *(_QWORD *)&buf[4] = v304;
        _os_log_impl(&dword_1B8270000, v213, v214, "(Full)Count: %ld", buf, 0xCu);
      }
      v217 = __error();
      LODWORD(v288) = 0;
      *v217 = v212;
      v10 = v216 > *((_QWORD *)a1 + 75) || v123;
      *((_QWORD *)a1 + 75) = v216;
LABEL_252:
      v102 = CFAbsoluteTimeGetCurrent();
      v238 = *__error();
      v239 = _SILogForLogForCategory(1);
      v240 = 2 * (dword_1EF19FC90 < 4);
      v241 = os_log_type_enabled(v239, v240);
      if (v102 > a3)
      {
        if (v241)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v239, v240, "Timeout", buf, 2u);
        }
        *__error() = v238;
        *((_BYTE *)a1 + 640) |= v303;
        v103 = v288;
        goto LABEL_111;
      }
      if (v241)
      {
        *(_DWORD *)buf = v281;
        *(_DWORD *)&buf[4] = v10 & 1;
        _os_log_impl(&dword_1B8270000, v239, v240, "keepGoing: %d", buf, 8u);
      }
      has_ranking_weights = (uint64_t)__error();
      *(_DWORD *)has_ranking_weights = v238;
      if ((v10 & 1) != 0)
      {
        v10 = 1;
      }
      else
      {
        v243 = v283;
        if (*((_QWORD *)a1 + 75) >= a4
          || !v283
          || (v303 || *((_BYTE *)a1 + 640)) && *((_QWORD *)a1 + 79)
          || *((_BYTE *)a1 + 641)
          || (v244 = *((_QWORD *)a1 + 105), *(_QWORD *)(v244 + 16))
          || *((_QWORD *)a1 + 108)
          || (v253 = *((_DWORD *)a1 + 212)) != 0
          && (has_ranking_weights = *(_QWORD *)(v244 + 48 * v253)) != 0
          && (has_ranking_weights = db_node_has_ranking_weights((_QWORD *)has_ranking_weights),
              (has_ranking_weights & 1) != 0)
          || (v254 = *((_QWORD *)a1 + 1), *(_QWORD *)(v254 + 96)) && *(_DWORD *)(v254 + 152) == 3
          || *((_QWORD *)a1 + 75) && (*(_DWORD *)(v254 + 152) - 1) < 3)
        {
          v245 = *__error();
          v246 = _SILogForLogForCategory(1);
          v247 = 2 * (dword_1EF19FC90 < 4);
          if (os_log_type_enabled(v246, v247))
          {
            v248 = *((_QWORD *)a1 + 75);
            *(_DWORD *)buf = v282;
            *(_QWORD *)&buf[4] = v248;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = a4;
            v306 = 1024;
            LODWORD(v307) = v243;
            _os_log_impl(&dword_1B8270000, v246, v247, "Abandoning %ld %ld %d", buf, 0x1Cu);
          }
          v10 = 0;
          *__error() = v245;
        }
        else
        {
          MEMORY[0x1E0C80A78](has_ranking_weights);
          v256 = (char *)&v281 - ((v255 + 15) & 0xFFFFFFFF0);
          bzero(v256, v255);
          v257 = CICleanUpThreadLoc();
          v258 = (uint64_t)v257;
          v259 = *((unsigned int *)a1 + 208);
          if ((_DWORD)v259)
          {
            v260 = (_QWORD *)(*((_QWORD *)a1 + 105) + 32);
            v261 = v256;
            do
            {
              *v261++ = *v260;
              *v260 = 0;
              v260 += 6;
              --v259;
            }
            while (v259);
          }
          *(_QWORD *)buf = a1;
          *(_QWORD *)&buf[8] = v256;
          v262 = CICleanUpPush((uint64_t)v257, (uint64_t)cleanupDocSets, (uint64_t)buf);
          SISearchCtx_METADATA::cleanUp(a1, 0);
          v263 = *((_QWORD *)a1 + 1);
          *(double *)(v263 + 408) = *(double *)(v263 + 408) + CFAbsoluteTimeGetCurrent() - v101;
          v10 = gatherIndexInfo(a1, (uint64_t)v256, 1);
          v101 = CFAbsoluteTimeGetCurrent();
          CICleanUpClearItem(v258, v262);
          cleanupDocSets(buf);
          if ((v10 & 1) == 0)
          {
            v264 = *__error();
            v265 = _SILogForLogForCategory(1);
            v266 = 2 * (dword_1EF19FC90 < 4);
            if (os_log_type_enabled(v265, v266))
            {
              v294[0] = 0;
              _os_log_impl(&dword_1B8270000, v265, v266, "Couldn't gather.", (uint8_t *)v294, 2u);
            }
            *__error() = v264;
          }
        }
      }
      *((_BYTE *)a1 + 640) |= v303;
      v249 = *__error();
      v250 = _SILogForLogForCategory(1);
      v251 = 2 * (dword_1EF19FC90 < 4);
      if (os_log_type_enabled(v250, v251))
      {
        v252 = *((_QWORD *)a1 + 75);
        *(_DWORD *)buf = v289;
        *(_QWORD *)&buf[4] = v252;
        _os_log_impl(&dword_1B8270000, v250, v251, "(Loop end)Available: %ld", buf, 0xCu);
      }
      *__error() = v249;
      if ((v288 & 1) != 0)
      {
        v103 = 1;
        goto LABEL_111;
      }
    }
    v218 = *__error();
    v219 = _SILogForLogForCategory(1);
    v220 = 2 * (dword_1EF19FC90 < 4);
    if (os_log_type_enabled(v219, v220))
    {
      v221 = *((_QWORD *)a1 + 75);
      *(_DWORD *)buf = v289;
      *(_QWORD *)&buf[4] = v221;
      _os_log_impl(&dword_1B8270000, v219, v220, "(Full)Available: %ld", buf, 0xCu);
    }
    *__error() = v218;
    v222 = *((_QWORD *)a1 + 85);
    v223 = *((_QWORD *)a1 + 77);
    v224 = *((_QWORD *)a1 + 78);
    v225 = *((_QWORD *)a1 + 79);
    v226 = *((_QWORD *)a1 + 83);
    v227 = v292[10];
    v228 = v292[8];
    v295[9] = v292[9];
    v295[10] = v227;
    v229 = v292[6];
    v295[7] = v292[7];
    v295[8] = v228;
    v230 = v292[4];
    v295[5] = v292[5];
    v295[6] = v229;
    v231 = v292[2];
    v295[3] = v292[3];
    v295[4] = v230;
    v232 = *v292;
    v295[1] = v292[1];
    v295[2] = v231;
    v295[0] = v232;
    v233 = *((_QWORD *)a1 + 22);
    if (!v233)
      v233 = *((_QWORD *)a1 + 23);
    ContentIndexDocSetResolveOIDsAndGroups_Step(v222, v223, v224, v225, v226, (uint64_t *)v295, *(double *)(*((_QWORD *)a1 + 1) + 360), *((_QWORD *)a1 + 116), a4, &v304, &v303, &v302, v287, v233, 0, a4, *(_QWORD *)(*((_QWORD *)a1 + 1) + 216) != 0);
    v234 = v304;
    v235 = v304 > *((_QWORD *)a1 + 75);
    *((_QWORD *)a1 + 75) = v304;
    v195 = *__error();
    v236 = _SILogForLogForCategory(1);
    v237 = 2 * (dword_1EF19FC90 < 4);
    if (os_log_type_enabled(v236, v237))
    {
      *(_DWORD *)buf = v289;
      *(_QWORD *)&buf[4] = v234;
      _os_log_impl(&dword_1B8270000, v236, v237, "(Full)Count: %ld", buf, 0xCu);
    }
    v10 = v235 || v123;
    v198 = __error();
    LODWORD(v288) = 0;
    goto LABEL_251;
  }
  v102 = 0.0;
  v103 = 1;
LABEL_110:
  v10 = 1;
LABEL_111:
  v104 = *__error();
  v105 = _SILogForLogForCategory(1);
  v106 = 2 * (dword_1EF19FC90 < 4);
  if (os_log_type_enabled(v105, v106))
  {
    v107 = *((_QWORD *)a1 + 75);
    v108 = CFAbsoluteTimeGetCurrent();
    v109 = "No";
    v110 = *((_QWORD *)a1 + 85);
    v111 = *((unsigned __int8 *)a1 + 640);
    if (v103)
      v112 = "Yes";
    else
      v112 = "No";
    v113 = v302;
    if (*((_QWORD *)a1 + 75) >= a4)
      v114 = "Yes";
    else
      v114 = "No";
    *(_DWORD *)buf = 134220034;
    if (v102 < a3)
      v115 = "No";
    else
      v115 = "Yes";
    *(_QWORD *)&buf[4] = v107;
    if ((v10 & 1) != 0)
      v116 = "Yes";
    else
      v116 = "No";
    if (v110)
      v117 = "Yes";
    else
      v117 = "No";
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v108 - Current;
    if (v111)
      v109 = "Yes";
    v306 = 2080;
    v307 = v112;
    v308 = 2080;
    v309 = v114;
    v310 = 2080;
    v311 = v115;
    v312 = 2080;
    v313 = v116;
    v314 = 2080;
    v315 = v117;
    v316 = 2080;
    v317 = v109;
    v318 = 2048;
    v319 = v302;
    _os_log_impl(&dword_1B8270000, v105, v106, "Extracted %ld oids in %f seconds! bad batch:%s batch full:%s timeout:%s keepgoing:%s iterator:%s check needed:%s discarded:%ld", buf, 0x5Cu);
  }
  else
  {
    v113 = v302;
  }
  *__error() = v104;
  *(_QWORD *)(*((_QWORD *)a1 + 1) + 504) += *((_QWORD *)a1 + 75);
  *(_QWORD *)(*((_QWORD *)a1 + 1) + 496) += v113;
  if (*((_QWORD *)a1 + 75))
  {
    kdebug_trace();
    v267 = _MDPerf_QueryLog();
    v268 = *((_QWORD *)a1 + 1);
    if (v268 + 1 >= 2)
    {
      v269 = v267;
      if (os_signpost_enabled(v267))
      {
LABEL_299:
        v279 = *(_QWORD *)(v268 + 608);
        v280 = qos_class_self();
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = v279;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v280;
        _os_signpost_emit_with_name_impl(&dword_1B8270000, v269, OS_SIGNPOST_INTERVAL_END, v268, "QueryRefillOids", "QueryId=%{signpost.description:attribute}lld CurrentQoS=%{signpost.description:attribute}x", buf, 0x12u);
      }
    }
  }
  else
  {
    *(double *)(*((_QWORD *)a1 + 1) + 408) = *(double *)(*((_QWORD *)a1 + 1) + 408)
                                             + CFAbsoluteTimeGetCurrent()
                                             - v101;
    kdebug_trace();
    v278 = _MDPerf_QueryLog();
    v268 = *((_QWORD *)a1 + 1);
    if (v268 + 1 >= 2)
    {
      v269 = v278;
      if (os_signpost_enabled(v278))
        goto LABEL_299;
    }
  }
  return v10 & 1;
}

_QWORD *SISearchCtx_METADATA::cleanUp(SISearchCtx_METADATA *this, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  qos_class_t v15;
  dispatch_block_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  const void *v23;
  NSObject *v24;
  qos_class_t v25;
  dispatch_block_t v26;
  const void *v27;
  uint64_t v28;
  int *v29;
  void (*v30)(void);
  void *v31;
  uint64_t v32;
  _QWORD *result;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  const char *v48;
  _QWORD block[5];
  _QWORD v50[2];
  uint64_t (*v51)(uint64_t, uint64_t);
  void *v52;
  SISearchCtx_METADATA *v53;
  int v54;
  _QWORD v55[2];
  uint64_t (*v56)(uint64_t, uint64_t);
  void *v57;
  SISearchCtx_METADATA *v58;
  int v59;
  _QWORD v60[2];
  uint64_t (*v61)(uint64_t, uint64_t);
  void *v62;
  SISearchCtx_METADATA *v63;
  int v64;
  _QWORD v65[5];

  if (*((_DWORD *)this + 208))
  {
    v4 = 0;
    v5 = 0;
    v6 = *((_QWORD *)this + 105);
    do
    {
      v7 = *(_QWORD **)(v6 + v4 + 16);
      if (v7)
      {
        clear_node_field_caches(v7);
        v6 = *((_QWORD *)this + 105);
      }
      v8 = *(_QWORD **)(v6 + v4 + 8);
      if (v8)
      {
        clear_node_field_caches(v8);
        v6 = *((_QWORD *)this + 105);
      }
      v9 = *(_QWORD **)(v6 + v4 + 24);
      if (v9)
      {
        clear_node_field_caches(v9);
        v6 = *((_QWORD *)this + 105);
      }
      v10 = *(_QWORD *)(v6 + v4 + 32);
      if (v10)
      {
        ContentIndexDocSetCleanupBorrowedChildren(v10);
        ContentIndexDocSetDispose(*(_QWORD *)(*((_QWORD *)this + 105) + v4 + 32));
        v6 = *((_QWORD *)this + 105);
        *(_QWORD *)(v6 + v4 + 32) = 0;
      }
      ++v5;
      v4 += 48;
    }
    while (v5 < *((unsigned int *)this + 208));
  }
  *((_BYTE *)this + 643) = 0;
  v11 = *((_QWORD *)this + 85);
  v12 = MEMORY[0x1E0C809B0];
  if (v11)
  {
    if ((a2 & 1) != 0)
    {
LABEL_14:
      v13 = *((_QWORD *)this + 85);
      v14 = freeQueue;
      v15 = qos_class_self();
      if (v15 < 0x1A)
        v16 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, &__block_literal_global_4080);
      else
        v16 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v15, 0, &__block_literal_global_4080);
      v23 = v16;
      dispatch_async(v14, v16);
      _Block_release(v23);
      dispatch_semaphore_wait((dispatch_semaphore_t)freeSemaphore, 0xFFFFFFFFFFFFFFFFLL);
      v24 = freeQueue;
      block[0] = v12;
      block[1] = 0x40000000;
      block[2] = ___ZN20SISearchCtx_METADATA7cleanUpEb_block_invoke_3;
      block[3] = &__block_descriptor_tmp_7_4081;
      block[4] = v13;
      v25 = qos_class_self();
      if (v25 < 0x1A)
        v26 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
      else
        v26 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v25, 0, block);
      v27 = v26;
      dispatch_async(v24, v26);
      _Block_release(v27);
      *((_QWORD *)this + 85) = 0;
      goto LABEL_33;
    }
    if (*(_BYTE *)(v11 + 58))
    {
LABEL_17:
      v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 4504);
      v18 = *((_QWORD *)this + 3);
      v19 = *(_QWORD *)(v18 + 1392);
      v20 = *(_QWORD *)(v18 + 1384);
      v60[0] = MEMORY[0x1E0C809B0];
      v60[1] = 0x40000000;
      v61 = ___ZN20SISearchCtx_METADATA7cleanUpEb_block_invoke;
      v62 = &__block_descriptor_tmp_4077;
      v64 = v17;
      v63 = this;
      if (v19 && *(_DWORD *)(v19 + 8))
      {
        v21 = 0;
        while (((unsigned int (*)(_QWORD *, _QWORD, _QWORD))v61)(v60, *(_QWORD *)(*(_QWORD *)v19 + 8 * v21), 0))
        {
          if (++v21 >= (unint64_t)*(unsigned int *)(v19 + 8))
            goto LABEL_22;
        }
      }
      else
      {
LABEL_22:
        if (v20 && *(_DWORD *)(v20 + 8))
        {
          v22 = 0;
          do
          {
            if (!((unsigned int (*)(_QWORD *, _QWORD, uint64_t))v61)(v60, *(_QWORD *)(*(_QWORD *)v20 + 8 * v22), 1))break;
            ++v22;
          }
          while (v22 < *(unsigned int *)(v20 + 8));
        }
      }
      goto LABEL_14;
    }
    v34 = *(_QWORD *)(v11 + 16);
    if (!v34)
      goto LABEL_56;
    if (*(_BYTE *)v34)
      goto LABEL_17;
    v35 = *(_QWORD *)(v34 + 112);
    if (v35 >= 1)
    {
      v36 = *(uint64_t **)(v34 + 120);
      while (1)
      {
        v37 = *v36;
        if (*v36)
        {
          if (*(BOOL (**)(unsigned __int8 *, uint64_t))(v37 + 40) == PayloadIterate
            && *(uint64_t *)(v37 + 136) > 0x8000)
          {
            break;
          }
        }
        ++v36;
        if (!--v35)
          goto LABEL_57;
      }
      LODWORD(v35) = 1;
    }
    else
    {
LABEL_56:
      LODWORD(v35) = 0;
    }
LABEL_57:
    v38 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v11 + 8) + 4504);
    v39 = *((_QWORD *)this + 3);
    v40 = *(_QWORD *)(v39 + 1392);
    v41 = *(_QWORD *)(v39 + 1384);
    if ((_DWORD)v35)
    {
      v55[0] = MEMORY[0x1E0C809B0];
      v55[1] = 0x40000000;
      v56 = ___ZN20SISearchCtx_METADATA7cleanUpEb_block_invoke_1;
      v57 = &__block_descriptor_tmp_2_4078;
      v59 = v38;
      v58 = this;
      if (v40 && *(_DWORD *)(v40 + 8))
      {
        v42 = 0;
        while (((unsigned int (*)(_QWORD *, _QWORD, _QWORD))v56)(v55, *(_QWORD *)(*(_QWORD *)v40 + 8 * v42), 0))
        {
          if (++v42 >= (unint64_t)*(unsigned int *)(v40 + 8))
            goto LABEL_63;
        }
      }
      else
      {
LABEL_63:
        if (v41 && *(_DWORD *)(v41 + 8))
        {
          v43 = 0;
          do
          {
            if (!((unsigned int (*)(_QWORD *, _QWORD, uint64_t))v56)(v55, *(_QWORD *)(*(_QWORD *)v41 + 8 * v43), 1))break;
            ++v43;
          }
          while (v43 < *(unsigned int *)(v41 + 8));
        }
      }
    }
    else
    {
      v50[0] = MEMORY[0x1E0C809B0];
      v50[1] = 0x40000000;
      v51 = ___ZN20SISearchCtx_METADATA7cleanUpEb_block_invoke_3;
      v52 = &__block_descriptor_tmp_4_4079;
      v54 = v38;
      v53 = this;
      if (v40 && *(_DWORD *)(v40 + 8))
      {
        v44 = 0;
        while (((unsigned int (*)(_QWORD *, _QWORD, _QWORD))v51)(v50, *(_QWORD *)(*(_QWORD *)v40 + 8 * v44), 0))
        {
          if (++v44 >= (unint64_t)*(unsigned int *)(v40 + 8))
            goto LABEL_74;
        }
      }
      else
      {
LABEL_74:
        if (v41 && *(_DWORD *)(v41 + 8))
        {
          v45 = 0;
          do
          {
            if (!((unsigned int (*)(_QWORD *, _QWORD, uint64_t))v51)(v50, *(_QWORD *)(*(_QWORD *)v41 + 8 * v45), 1))break;
            ++v45;
          }
          while (v45 < *(unsigned int *)(v41 + 8));
        }
      }
    }
    goto LABEL_14;
  }
LABEL_33:
  v28 = *((_QWORD *)this + 103);
  if (v28)
  {
    *(_QWORD *)(v28 + 24) = 0;
    v29 = (int *)*((_QWORD *)this + 103);
    if (*v29 != 3506)
    {
      v46 = __si_assert_copy_extra_268();
      v47 = v46;
      if (v46)
        v48 = v46;
      else
        v48 = "";
      __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 572, v48);
      free(v47);
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    if (*((_QWORD *)v29 + 250))
    {
      v30 = (void (*)(void))*((_QWORD *)v29 + 1);
      if (v30)
        v30();
    }
    v31 = (void *)*((_QWORD *)v29 + 255);
    if (v31)
      free(v31);
    if (v29[499] >= 1)
    {
      v32 = 0;
      do
        free(*(void **)&v29[2 * v32++ + 8]);
      while (v32 < v29[499]);
    }
    free(v29);
    *((_QWORD *)this + 103) = 0;
  }
  result = (_QWORD *)*((_QWORD *)this + 102);
  if (result)
  {
    v65[0] = v12;
    v65[1] = 0x40000000;
    v65[2] = __db_query_tree_apply_block_block_invoke;
    v65[3] = &unk_1E6E377F8;
    v65[4] = &__block_literal_global_143;
    result = (_QWORD *)db_query_tree_apply_block_with_meta(result, (uint64_t)v65, 0);
    *((_QWORD *)this + 102) = 0;
  }
  return result;
}

void SISearchCtx::common_postIterate(SISearchCtx *this, SISearchCtx *a2)
{
  char **v3;

  v3 = (char **)*((_QWORD *)this + 18);
  if (v3)
  {
    db_release_files(v3);
    *((_QWORD *)this + 18) = 0;
  }
  *((CFAbsoluteTime *)this + 17) = CFAbsoluteTimeGetCurrent();
}

void query_updateTimingOnInitialResults(uint64_t a1)
{
  __int128 v1;

  if (*(double *)(a1 + 560) == 0.0
    && *(double *)(a1 + 568) == 0.0
    && *(double *)(a1 + 552) == 0.0
    && *(double *)(a1 + 536) == 0.0
    && *(double *)(a1 + 544) == 0.0)
  {
    v1 = *(_OWORD *)(a1 + 424);
    *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 408);
    *(_OWORD *)(a1 + 560) = v1;
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a1 + 392);
    *(CFAbsoluteTime *)(a1 + 376) = CFAbsoluteTimeGetCurrent();
  }
}

uint64_t si_resultqueue_count(uint64_t a1)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  v3 = si_simplequeue_count_locked(a1);
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t db2_page_uncompress_swap(uint64_t a1, int8x16_t *a2, _QWORD *a3, void *(*a4)(int a1, size_t size))
{
  uint64_t v4;
  unsigned int v7;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int32 v15;
  int v16;
  NSObject *v17;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  NSObject *v26;
  int *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  NSObject *v34;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  NSObject *v44;
  int v45;
  char *v46;
  uint64_t v48;
  uLongf v49;
  unsigned int v50;
  const uint8_t *v51;
  size_t v52;
  int v53;
  int v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  size_t v59;
  uint64_t v60;
  compression_status v61;
  size_t v62;
  char *v63;
  uint64_t v64;
  unsigned int v65;
  NSObject *v66;
  int v67;
  NSObject *v68;
  _BYTE v69[64000];
  uint64_t v70;
  __int128 v71;
  _BYTE *v72;
  uint8_t *v73;
  size_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v77;
  uLongf destLen;
  _BYTE buf[64];
  __int16 v80;
  uLongf v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v4 = 22;
  if (!a2 || !a3)
    return v4;
  v7 = a2->i32[0];
  if (a2->i32[0] != 1684172850 && v7 != 846226020)
    return v4;
  v10 = a2->u32[3];
  v11 = bswap32(v10);
  if (v7 == 846226020)
    v12 = v11;
  else
    v12 = v10;
  v13 = *(_DWORD *)(a1 + 4);
  if ((v12 & 8) == 0)
  {
    if ((v13 & 0x80) != 0)
    {
      db2_swap_page((size_t)a2);
      v10 = a2->u32[3];
    }
    *a3 = 0;
    v14 = 4;
    if ((v10 & 4) == 0)
      v14 = 1;
    v15 = a2->i32[v14];
    a2->i32[1] = v15;
    if (a2->i32[2] <= v15)
      return 0;
    v16 = *__error();
    v17 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v57 = a2->i32[1];
      v56 = a2->i32[2];
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "db2_page_uncompress_swap";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3286;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v12;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v56;
      *(_WORD *)&buf[38] = 2048;
      *(_QWORD *)&buf[40] = v57;
      _os_log_error_impl(&dword_1B8270000, v17, OS_LOG_TYPE_ERROR, "%s:%d: db2_page_uncompress_swap: invalid page size, flags:0x%lx, used_bytes:%lu, size:%ld", buf, 0x30u);
    }
    *__error() = v16;
    return v4;
  }
  if ((v13 & 0x80) != 0)
  {
    v22 = a2->u32[2];
    v20 = bswap32(a2->u32[1]);
    a2->i32[0] = bswap32(v7);
    a2->i32[1] = v20;
    v19 = bswap32(v22);
    a2->i32[2] = v19;
    a2->i32[3] = v11;
    v21 = bswap32(a2[1].u32[0]);
    a2[1].i32[0] = v21;
  }
  else
  {
    v20 = a2->u32[1];
    v19 = a2->u32[2];
    v21 = a2[1].u32[0];
  }
  v23 = v19;
  if (v19 > 0x13)
  {
    v77 = v12;
    v30 = 4 * (v20 - v19);
    v31 = v30 + v21;
    if (__CFADD__((_DWORD)v30, v21))
    {
      v32 = v21;
      v33 = *__error();
      v34 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        goto LABEL_48;
      *(_DWORD *)buf = 136316418;
      *(_QWORD *)&buf[4] = "db2_page_uncompress_swap";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3313;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v77;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v31;
      *(_WORD *)&buf[38] = 2048;
      *(_QWORD *)&buf[40] = v32;
      *(_WORD *)&buf[48] = 2048;
      *(_QWORD *)&buf[50] = v30;
      v35 = "%s:%d: db2_page_uncompress_swap: invalid page, flags:0x%lx, uncompressed_size:%lu, uncompressed_used_bytes:%"
            "lu, compression_size_estimate:%lu";
      v36 = v34;
      v37 = 58;
    }
    else
    {
      v76 = v21;
      if (v31 <= v20)
        v38 = v20;
      else
        v38 = v31;
      v39 = (v38 - 20);
      if (v38 >= 0x14)
      {
        v40 = ((_DWORD)v38 + 4095) & 0xFFFFF000;
        if (v40 >= v38)
        {
          v75 = v38;
          if (a4
            && ((v41 = (uint64_t)a4(a1, ((_DWORD)v38 + 4095) & 0xFFFFF000), a4 == dst_malloc)
              ? (v42 = v41 == 0)
              : (v42 = 1),
                v42 ? (v29 = 0) : (v29 = 1),
                v41))
          {
            v28 = (char *)v41;
          }
          else
          {
            v28 = (char *)malloc_type_valloc(v40, 0x16C079CuLL);
            v29 = 1;
            if (!v28)
            {
              v4 = 12;
              goto LABEL_50;
            }
          }
          v74 = v39;
          destLen = 0;
          v48 = v77;
          if ((_DWORD)v23 == 20)
          {
            v49 = 20;
            v50 = v75;
LABEL_90:
            destLen = v49;
            v64 = v76;
            if (v49 == v76)
            {
              *(_DWORD *)v28 = 1684172850;
              *((_DWORD *)v28 + 1) = v50;
              v65 = v77 & 0xFFFFFFF3 | 4;
              *((_DWORD *)v28 + 2) = v49;
              *((_DWORD *)v28 + 3) = v65;
              *((_DWORD *)v28 + 4) = v20;
              if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
              {
                *(_DWORD *)v28 = 846226020;
                *((_DWORD *)v28 + 1) = bswap32(v50);
                *((_DWORD *)v28 + 2) = bswap32(v49);
                *((_DWORD *)v28 + 3) = bswap32(v65);
                *((_DWORD *)v28 + 4) = bswap32(v20);
                db2_swap_page((size_t)v28);
              }
              v4 = 0;
              goto LABEL_50;
            }
            v25 = *__error();
            v66 = _SILogForLogForCategory(7);
            if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = "db2_page_uncompress_swap";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3440;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = destLen;
              *(_WORD *)&buf[28] = 2048;
              *(_QWORD *)&buf[30] = v64;
              _os_log_error_impl(&dword_1B8270000, v66, OS_LOG_TYPE_ERROR, "%s:%d: db2_page_uncompress_swap: uncompressed size mismatch (%lu/%lu)", buf, 0x26u);
            }
            v27 = __error();
            goto LABEL_28;
          }
          v51 = &a2[1].u8[4];
          v52 = (v23 - 20);
          if ((v77 & 0x1000) != 0)
          {
            v58 = fast_uncompress((uint8_t *)v28 + 20, v74, v51, v52);
            v50 = v75;
            if (!v58)
            {
              *((_QWORD *)&v71 + 1) = v52;
              v54 = -3;
              v55 = "lz4";
              goto LABEL_98;
            }
LABEL_89:
            v49 = v58 + 20;
            goto LABEL_90;
          }
          if ((v77 & 0x2000) == 0)
          {
            destLen = v74;
            v53 = uncompress((Bytef *)v28 + 20, &destLen, v51, v52);
            if (v53)
            {
              v54 = v53;
              *((_QWORD *)&v71 + 1) = v52;
              v55 = "deflate";
LABEL_98:
              v67 = *__error();
              v68 = _SILogForLogForCategory(7);
              if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136316930;
                *(_QWORD *)&buf[4] = "db2_page_uncompress_swap";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3428;
                *(_WORD *)&buf[18] = 2080;
                *(_QWORD *)&buf[20] = v55;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v54;
                *(_WORD *)&buf[34] = 2048;
                *(_QWORD *)&buf[36] = v48;
                *(_WORD *)&buf[44] = 2048;
                *(_QWORD *)&buf[46] = *((_QWORD *)&v71 + 1);
                *(_WORD *)&buf[54] = 2048;
                *(_QWORD *)&buf[56] = v74;
                v80 = 2048;
                v81 = destLen;
                _os_log_error_impl(&dword_1B8270000, v68, OS_LOG_TYPE_ERROR, "%s:%d: db2_page_uncompress_swap: uncompress(%s) failed, status:%d, flags:0x%lx, src_size:%lu, out_size:%lu, uncompressed_used_bytes:%lu", buf, 0x4Au);
              }
              *__error() = v67;
              if (v54 == -4)
                v4 = 12;
              else
                v4 = 22;
              goto LABEL_50;
            }
            v58 = destLen;
            v50 = v75;
            goto LABEL_89;
          }
          *(_QWORD *)&v71 = (char *)a2 + 20;
          v59 = compression_decode_scratch_buffer_size(COMPRESSION_LZFSE);
          if (v59 < 0xFA01)
          {
            if (!v59)
              goto LABEL_97;
            MEMORY[0x1E0C80A78](v59);
            v73 = (uint8_t *)(v28 + 20);
            v63 = (char *)&v70 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
            bzero(v63, v62);
            v58 = compression_decode_buffer(v73, v74, (const uint8_t *)v71, v52, v63, COMPRESSION_LZFSE);
          }
          else
          {
            memset(buf, 0, 40);
            v60 = compression_stream_init((compression_stream *)buf, COMPRESSION_STREAM_DECODE, COMPRESSION_LZFSE);
            if ((_DWORD)v60 == -1)
            {
              v58 = 0;
            }
            else
            {
              v73 = (uint8_t *)(v28 + 20);
              *((_QWORD *)&v71 + 1) = v52;
              MEMORY[0x1E0C80A78](v60);
              bzero(v69, 0xFA00uLL);
              v58 = 0;
              v72 = v69;
              *(_QWORD *)buf = v69;
              *(_QWORD *)&buf[8] = 64000;
              *(_OWORD *)&buf[16] = v71;
              while (1)
              {
                v61 = compression_stream_process((compression_stream *)buf, 1);
                if (v61)
                  break;
                memcpy(&v73[v58], v69, 0xFA00uLL);
                *(_QWORD *)buf = v69;
                *(_QWORD *)&buf[8] = 64000;
                v58 += 64000;
              }
              if (v61 == COMPRESSION_STATUS_ERROR)
              {
                v58 = 0;
                v52 = *((_QWORD *)&v71 + 1);
                v48 = v77;
              }
              else
              {
                v52 = *((_QWORD *)&v71 + 1);
                v48 = v77;
                if (v61 == COMPRESSION_STATUS_END)
                {
                  *(_QWORD *)&v71 = 64000 - *(_QWORD *)&buf[8];
                  memcpy(&v73[v58], v72, 64000 - *(_QWORD *)&buf[8]);
                  v58 += v71;
                }
              }
              compression_stream_destroy((compression_stream *)buf);
            }
          }
          v50 = v75;
          if (v58)
            goto LABEL_89;
LABEL_97:
          *((_QWORD *)&v71 + 1) = v52;
          v54 = -3;
          v55 = "lzfse";
          goto LABEL_98;
        }
      }
      v43 = v38;
      v33 = *__error();
      v44 = _SILogForLogForCategory(7);
      if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
LABEL_48:
        v28 = 0;
        v29 = 0;
        *__error() = v33;
        goto LABEL_49;
      }
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = "db2_page_uncompress_swap";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3323;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v77;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = v43;
      *(_WORD *)&buf[38] = 2048;
      *(_QWORD *)&buf[40] = v76;
      v35 = "%s:%d: db2_page_uncompress_swap: invalid page, flags:0x%lx, uncompressed_size:%lu, uncompressed_used_bytes:%lu";
      v36 = v44;
      v37 = 48;
    }
    _os_log_error_impl(&dword_1B8270000, v36, OS_LOG_TYPE_ERROR, v35, buf, v37);
    goto LABEL_48;
  }
  v24 = v21;
  v25 = *__error();
  v26 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = "db2_page_uncompress_swap";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3305;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = v12;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = v23;
    *(_WORD *)&buf[38] = 2048;
    *(_QWORD *)&buf[40] = v24;
    _os_log_error_impl(&dword_1B8270000, v26, OS_LOG_TYPE_ERROR, "%s:%d: db2_page_uncompress_swap: invalid page, flags:0x%lx, used_bytes:%lu, uncompressed_used_bytes:%ld", buf, 0x30u);
  }
  v27 = __error();
  v28 = 0;
  v29 = 0;
LABEL_28:
  *v27 = v25;
LABEL_49:
  v4 = 22;
LABEL_50:
  if ((*(_BYTE *)(a1 + 4) & 0x80) != 0)
  {
    *a2 = vrev32q_s8(*a2);
    a2[1].i32[0] = bswap32(a2[1].u32[0]);
  }
  if ((_DWORD)v4)
    v45 = v29;
  else
    v45 = 0;
  if ((_DWORD)v4)
    v46 = 0;
  else
    v46 = v28;
  if (v45 == 1)
  {
    free(v28);
    v46 = 0;
  }
  *a3 = v46;
  return v4;
}

size_t fast_uncompress(uint8_t *a1, size_t a2, const uint8_t *a3, size_t a4)
{
  size_t result;

  result = compression_decode_buffer(a1, a2, a3, a4, 0, COMPRESSION_LZ4);
  if (!result)
  {
    madvise(a1, a2, 3);
    return compression_decode_buffer(a1, a2, a3, a4, 0, COMPRESSION_LZ4_RAW);
  }
  return result;
}

uint64_t performSearch_METADATA(SISearchCtx_METADATA *a1, PartialQueryResults *a2)
{
  int v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(_QWORD);
  int v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  int v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD);
  int v37;
  uint64_t v38;
  int v40;
  NSObject *v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = *__error();
  v5 = _SILogForLogForCategory(13);
  v6 = 2 * (dword_1EF19FCC0 < 4);
  if (os_log_type_enabled(v5, v6))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v46) = qos_class_self();
    _os_log_impl(&dword_1B8270000, v5, v6, "at qos 0x%x", buf, 8u);
  }
  *__error() = v4;
  v7 = *((_QWORD *)a1 + 3);
  v44 = 0;
  v8 = fd_setDir(*(unsigned int *)(v7 + 32), (int *)&v44);
  v9 = 0;
  if (v8)
  {
    v10 = v7;
    do
    {
      v11 = __ldxr(exceptionSequenceNum);
      v12 = v11 + 1;
    }
    while (__stxr(v11 + 1, exceptionSequenceNum));
    v13 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, *(_QWORD *)(v10 + 1184), 0x40000000, v12);
    v15 = v14;
    v16 = v13;
    v18 = v17;
    v19 = *(_QWORD *)&threadData[18 * v13 + 2];
    v20 = v19 + 320 * HIDWORD(v13);
    *(_BYTE *)(v20 + 216) = 0;
    v43 = *(_DWORD *)(v20 + 312);
    v21 = *(void (**)(_QWORD))(v20 + 224);
    if (v21)
      v21(*(_QWORD *)(v19 + 320 * HIDWORD(v13) + 288));
    if (_setjmp((int *)v20))
    {
      v22 = *__error();
      v23 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v46 = "performSearch_METADATA";
        v47 = 1024;
        v48 = 4512;
        _os_log_error_impl(&dword_1B8270000, v23, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v22;
      *(_DWORD *)(v20 + 312) = v43;
      CIOnThreadCleanUpReset(v15);
      dropThreadId(v16, 1, v12);
      CICleanUpReset(v16, v18);
      v24 = 0;
LABEL_28:
      v37 = v44;
      MEMORY[0x1BCCB1484](v44);
      if ((v37 & 0x80000000) == 0)
        close(v37);
      v9 = v24;
      goto LABEL_31;
    }
    v25 = inner_performSearch(a1, a2);
    if ((v25 & 1) != 0)
    {
LABEL_25:
      v34 = *(_QWORD *)&threadData[18 * v16 + 2];
      v35 = v34 + 320 * HIDWORD(v16);
      *(_DWORD *)(v35 + 312) = v43;
      v36 = *(void (**)(_QWORD))(v35 + 232);
      if (v36)
        v36(*(_QWORD *)(v34 + 320 * HIDWORD(v16) + 288));
      dropThreadId(v16, 0, v12);
      v24 = v25;
      goto LABEL_28;
    }
    v26 = *((unsigned __int8 *)a1 + 647);
    if (*((_BYTE *)a1 + 647))
    {
      v27 = *__error();
      v28 = _SILogForLogForCategory(1);
      v29 = 2 * (dword_1EF19FC90 < 4);
      if (os_log_type_enabled(v28, v29))
      {
        *(_WORD *)buf = 0;
        v30 = "Query detected merge is required";
LABEL_19:
        _os_log_impl(&dword_1B8270000, v28, v29, v30, buf, 2u);
      }
    }
    else
    {
      if (!*((_BYTE *)a1 + 646))
        goto LABEL_21;
      v27 = *__error();
      v28 = _SILogForLogForCategory(1);
      v29 = 2 * (dword_1EF19FC90 < 4);
      if (os_log_type_enabled(v28, v29))
      {
        *(_WORD *)buf = 0;
        v30 = "Query detected merge is needed";
        goto LABEL_19;
      }
    }
    *__error() = v27;
    si_merge_for_badness(*((_QWORD *)a1 + 3), v26 != 0);
LABEL_21:
    if (!*((_BYTE *)a1 + 1128))
    {
      v31 = *__error();
      v32 = _SILogForLogForCategory(1);
      v33 = 2 * (dword_1EF19FC90 < 4);
      if (os_log_type_enabled(v32, v33))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1B8270000, v32, v33, "performSearch_METADATA: complete", buf, 2u);
      }
      *__error() = v31;
      *((_BYTE *)a1 + 1128) = 1;
      emitResults(a1, a2, 1);
    }
    goto LABEL_25;
  }
LABEL_31:
  v38 = v9;
  if (dword_1EF19FC90 >= 5)
  {
    v40 = *__error();
    v41 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      v42 = atomic_load((unint64_t *)a1 + 68);
      *(_DWORD *)buf = 134217984;
      v46 = (const char *)v42;
      _os_log_impl(&dword_1B8270000, v41, OS_LOG_TYPE_DEFAULT, "Result count: %lld", buf, 0xCu);
    }
    *__error() = v40;
  }
  return v38;
}

void syncIndex(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _xpc_activity_s *v6;
  int v7;
  NSObject *v8;
  os_log_type_t v9;
  xpc_activity_state_t state;
  int v11;
  NSObject *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  pthread_mutex_t *v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void (*v29)(_QWORD);
  int v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t (*v33)(_QWORD, const char *, uint64_t, const char *);
  unsigned int v34;
  int v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD);
  int v42;
  NSObject *v43;
  int v44;
  NSObject *v45;
  os_log_type_t v46;
  const char *v47;
  CFDictionaryRef v48;
  CFAllocatorRef *v49;
  CFNumberRef v50;
  const __CFDictionary *v51;
  CFAllocatorRef v52;
  CFDictionaryRef Copy;
  const __CFAllocator *v54;
  CFNumberRef v55;
  CFNumberRef v56;
  CFNumberRef v57;
  CFNumberRef v58;
  const __CFArray *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, _QWORD);
  uint64_t v63;
  int v64;
  int v65;
  BOOL v66;
  uint64_t v67;
  void (*v68)(_QWORD, stat *, uint64_t);
  void (*v69)(_QWORD, _QWORD, stat *);
  uint64_t v70;
  void (*v71)(_QWORD, uint64_t, uint64_t);
  CFNumberRef v72;
  CFNumberRef v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  void (*v78)(_QWORD);
  uint64_t v79;
  __CFArray *v80;
  int v81;
  int v82;
  uint64_t v83;
  int v85;
  uint64_t v86;
  int v87;
  size_t v88;
  int v89;
  unsigned __int8 v90;
  unsigned int v91;
  CFStringRef v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  NSObject *v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  NSObject *v102;
  int v103;
  char *v104;
  char **v105;
  int v106;
  NSObject *v107;
  os_log_type_t v108;
  __darwin_ino64_t v109;
  uint64_t v110;
  _BOOL4 v111;
  int *v112;
  char v113;
  int v114;
  NSObject *v115;
  void (*v116)(uint64_t, _QWORD);
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  void (*v121)(_QWORD);
  uint64_t v122;
  unsigned int v123;
  uint64_t v124;
  void (*v125)(_QWORD);
  int v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  _BOOL4 v131;
  _BOOL4 v132;
  NSObject *v133;
  os_log_type_t v134;
  int *v135;
  int v136;
  int v137;
  NSObject *v138;
  int v139;
  char *v140;
  uint64_t v141;
  int v142;
  int v143;
  NSObject *v144;
  int v145;
  size_t v146;
  int v147;
  int v148;
  NSObject *v149;
  int v150;
  int v151;
  NSObject *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  int v156;
  int v157;
  char *v158;
  uint64_t v159;
  int v160;
  int v161;
  NSObject *v162;
  int v163;
  size_t v164;
  int v165;
  int v166;
  int v167;
  NSObject *v168;
  int v169;
  int v170;
  NSObject *v171;
  int v172;
  NSObject *v173;
  int v174;
  NSObject *v175;
  int v176;
  int v177;
  int v178;
  unsigned int v179;
  int v180;
  int v181;
  char *__s;
  const __CFArray *theArray;
  char v184;
  int v185;
  int v186;
  int v187;
  void *v188;
  uint64_t v189;
  _QWORD v190[5];
  uint64_t valuePtr;
  unint64_t v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unint64_t v196;
  unsigned int v197;
  unint64_t v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unint64_t v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  _BYTE v213[18];
  __int16 v214;
  _OWORD *v215;
  _OWORD __str[16];
  char *__endptr[4];
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  _BYTE v230[31];
  stat buf;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  _BYTE v237[31];
  uint64_t v238;
  CFRange v239;

  v238 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
LABEL_176:
    v13 = a2 != 0;
    goto LABEL_177;
  }
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + 139))
    *(_BYTE *)(v5 + 1480) = 0;
  if (!*(_QWORD *)(a1 + 128) && !*(_DWORD *)(a1 + 104))
  {
    v32 = *(_QWORD *)(v5 + 2360);
    if (v32)
    {
      v33 = *(uint64_t (**)(_QWORD, const char *, uint64_t, const char *))(v32 + 64);
      if (v33)
        *(_DWORD *)(a1 + 104) = v33(*(_QWORD *)(v32 + 136), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 2045, "void syncIndex(si_sync_ctx *, Boolean)");
    }
  }
  v6 = *(_xpc_activity_s **)(a1 + 112);
  if (!v6 || !xpc_activity_should_defer(v6))
  {
    v206 = *(_OWORD *)(a1 + 16);
    v14 = *(_QWORD *)(v5 + 1184);
    v207 = *(_QWORD *)(a1 + 32);
    v208 = v14;
    v209 = v5;
    v210 = 0;
    BYTE2(v210) = *(_BYTE *)(a1 + 138);
    v15 = *(_QWORD *)(v5 + 1384);
    v211 = *(_QWORD *)(v5 + 1392);
    v212 = v15;
    v16 = (void *)os_transaction_create();
    v17 = (unsigned int *)(v4 + 1452);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    si_scheduler_suspend(*(_QWORD *)(v5 + 872));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    v20 = (pthread_mutex_t *)(v4 + 1568);
    pthread_mutex_lock((pthread_mutex_t *)(v4 + 1568));
    v205 = 0;
    v204 = 0;
    if (!fd_setDir(*(unsigned int *)(v5 + 32), (int *)&v204))
    {
LABEL_171:
      if (g_fd_list)
        _fd_close_inactive(*(unsigned int *)(v5 + 32), 0, 0, *(_DWORD *)(v5 + 32) == -1);
      pthread_mutex_unlock(v20);
      if (!**(_DWORD **)(v5 + 6592))
        si_scheduler_resume(*(_QWORD *)(v5 + 872), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 2454);
      os_release(v16);
      goto LABEL_176;
    }
    v188 = v16;
    do
    {
      v21 = __ldxr(exceptionSequenceNum);
      v22 = v21 + 1;
    }
    while (__stxr(v21 + 1, exceptionSequenceNum));
    v203 = 0;
    v202 = 0;
    v201 = 0;
    v23 = setThreadIdAndInfo(*(_DWORD *)(v5 + 32), sFdExceptionCallbacks, 0, 1, v22);
    v203 = v23;
    v201 = v25;
    v202 = __PAIR64__(HIDWORD(v23), v24);
    v26 = *(_QWORD *)&threadData[18 * v23 + 2];
    v27 = v26 + 320 * HIDWORD(v23);
    *(_BYTE *)(v27 + 216) = 0;
    v28 = *(_DWORD *)(v27 + 312);
    v29 = *(void (**)(_QWORD))(v27 + 224);
    if (v29)
      v29(*(_QWORD *)(v26 + 320 * HIDWORD(v23) + 288));
    v200 = v203;
    v199 = HIDWORD(v202);
    v198 = __PAIR64__(v202, v201);
    if (_setjmp((int *)v27))
    {
      v30 = *__error();
      v31 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        buf.st_dev = 136315394;
        *(_QWORD *)&buf.st_mode = "syncIndex";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 2445;
        _os_log_error_impl(&dword_1B8270000, v31, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", (uint8_t *)&buf, 0x12u);
      }
      *__error() = v30;
      *(_DWORD *)(v27 + 312) = v28;
      CIOnThreadCleanUpReset(v198);
      dropThreadId(v200, 1, v22);
      CICleanUpReset(v200, HIDWORD(v198));
      v16 = v188;
LABEL_169:
      v126 = v204;
      MEMORY[0x1BCCB1484](v204);
      if ((v126 & 0x80000000) == 0)
        close(v126);
      goto LABEL_171;
    }
    v187 = v28;
    do
    {
      v34 = __ldxr(exceptionSequenceNum);
      v35 = v34 + 1;
    }
    while (__stxr(v34 + 1, exceptionSequenceNum));
    v197 = 0;
    v196 = 0;
    v195 = 0;
    v36 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, *(_QWORD *)(v5 + 1184), 0x40000000, v35);
    v197 = v36;
    v195 = v38;
    v196 = __PAIR64__(HIDWORD(v36), v37);
    v39 = *(_QWORD *)&threadData[18 * v36 + 2];
    v40 = v39 + 320 * HIDWORD(v36);
    *(_BYTE *)(v40 + 216) = 0;
    v185 = *(_DWORD *)(v40 + 312);
    v41 = *(void (**)(_QWORD))(v40 + 224);
    if (v41)
      v41(*(_QWORD *)(v39 + 320 * HIDWORD(v36) + 288));
    v186 = v35;
    v194 = v197;
    v193 = HIDWORD(v196);
    v192 = __PAIR64__(v196, v195);
    if (_setjmp((int *)v40))
    {
      v42 = *__error();
      v43 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        buf.st_dev = 136315394;
        *(_QWORD *)&buf.st_mode = "syncIndex";
        WORD2(buf.st_ino) = 1024;
        *(_DWORD *)((char *)&buf.st_ino + 6) = 2444;
        _os_log_error_impl(&dword_1B8270000, v43, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", (uint8_t *)&buf, 0x12u);
      }
      *__error() = v42;
      *(_DWORD *)(v40 + 312) = v185;
      CIOnThreadCleanUpReset(v192);
      dropThreadId(v194, 1, v186);
      CICleanUpReset(v194, HIDWORD(v192));
      v16 = v188;
LABEL_166:
      v122 = *(_QWORD *)&threadData[18 * v200 + 2];
      v123 = v199;
      v124 = v122 + 320 * v199;
      *(_DWORD *)(v124 + 312) = v28;
      v125 = *(void (**)(_QWORD))(v124 + 232);
      if (v125)
        v125(*(_QWORD *)(v122 + 320 * v123 + 288));
      dropThreadId(v200, 0, v22);
      goto LABEL_169;
    }
    if (gSILogLevels[0] >= 5)
    {
      v172 = *__error();
      v173 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.st_dev) = 0;
        _os_log_impl(&dword_1B8270000, v173, OS_LOG_TYPE_DEFAULT, "Starting sync!", (uint8_t *)&buf, 2u);
      }
      *__error() = v172;
    }
    v44 = *__error();
    v45 = _SILogForLogForCategory(11);
    v46 = 2 * (dword_1EF19FCB8 < 4);
    if (os_log_type_enabled(v45, v46))
    {
      if ((*(_BYTE *)(v5 + 2481) - 1) > 3u)
        v47 = "unknown";
      else
        v47 = off_1E6E2E448[(*(_BYTE *)(v5 + 2481) - 1)];
      buf.st_dev = 134218242;
      *(_QWORD *)&buf.st_mode = v5;
      WORD2(buf.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = (__darwin_ino64_t)v47;
      _os_log_impl(&dword_1B8270000, v45, v46, "%p state: %s", (uint8_t *)&buf, 0x16u);
    }
    *__error() = v44;
    _si_store_propery_cache(v5, 0, 1);
    si_storesizes(v5, 1);
    v48 = si_copyRemappingMetadata(v5);
    si_set_property(v5, CFSTR("kIndexRemappingData"), v48, 1, 0);
    CFRelease(v48);
    v49 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
    if (*(_QWORD *)(v5 + 2408))
    {
      v50 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, (const void *)(v4 + 2408));
      si_set_property(v5, CFSTR("database.recoverscantime"), v50, 1, 0);
      CFRelease(v50);
    }
    if (*(_BYTE *)(v5 + 2072))
    {
      v51 = *(const __CFDictionary **)(v5 + 2088);
      v52 = *v49;
      if (v51)
      {
        Copy = CFDictionaryCreateCopy(*v49, v51);
        si_set_property(v5, CFSTR("GroupAssignments"), Copy, 1, 0);
        CFRelease(Copy);
      }
      v54 = v52;
    }
    else
    {
      v54 = *v49;
    }
    if (*(_QWORD *)(a1 + 88))
    {
      v55 = CFNumberCreate(v54, kCFNumberSInt64Type, (const void *)(a1 + 88));
      if (v55)
      {
        v56 = v55;
        si_set_property(v5, CFSTR("JournalSerialNumber"), v55, 1, 0);
        CFRelease(v56);
      }
    }
    valuePtr = 0;
    valuePtr = *(_QWORD *)(v5 + 2136);
    v57 = CFNumberCreate(v54, kCFNumberSInt64Type, &valuePtr);
    if (v57)
    {
      v58 = v57;
      si_set_property(v5, CFSTR("ConsumedJournalSerialNumber"), v57, 1, 0);
      CFRelease(v58);
    }
    pthread_mutex_lock(&schlock);
    v59 = *(const __CFArray **)(v5 + 2376);
    *(_QWORD *)(v5 + 2376) = 0;
    pthread_mutex_unlock(&schlock);
    v61 = *(_QWORD *)(v5 + 1416);
    if (v61
      && (v62 = *(uint64_t (**)(uint64_t, _QWORD))(v61 + 88)) != 0
      && !*(_BYTE *)(v61 + 240)
      && (v94 = v62(v61, *(_QWORD *)(v61 + 24)), (_DWORD)v94))
    {
      v60 = 1;
      v66 = 0;
      v65 = 0;
      v63 = v94;
      v64 = 1;
    }
    else if ((*(_BYTE *)(v5 + 2481) & 4) == 0 || *(_BYTE *)(a1 + 96) || *(_QWORD *)(v5 + 6880) | (unint64_t)v59)
    {
      v63 = 0;
      v64 = 1;
      v65 = 1;
      v66 = 0;
    }
    else
    {
      v110 = *(_QWORD *)(a1 + 64);
      if (v110)
      {
        memset(&buf, 0, sizeof(buf));
        if (fd_stat(v110, &buf))
        {
          v111 = 0;
        }
        else
        {
          v111 = 0;
          if (!buf.st_size)
            v111 = *(_QWORD *)(a1 + 72) == 0;
        }
        v131 = v111;
      }
      else
      {
        v131 = *(_QWORD *)(a1 + 72) == 0;
      }
      v132 = v131;
      v66 = v131;
      if (v132)
      {
        v177 = *__error();
        v133 = _SILogForLogForCategory(11);
        v134 = 2 * (dword_1EF19FCB8 < 4);
        if (os_log_type_enabled(v133, v134))
        {
          LOWORD(buf.st_dev) = 0;
          _os_log_impl(&dword_1B8270000, v133, v134, "clean -- skip sync", (uint8_t *)&buf, 2u);
        }
        v135 = __error();
        v63 = 0;
        *v135 = v177;
        v64 = 2;
        v65 = 1;
        v66 = 1;
      }
      else
      {
        v64 = 2;
        v65 = 1;
        v63 = 0;
      }
    }
    v67 = *(_QWORD *)(v5 + 6880);
    if (v67)
      LOBYTE(v67) = *(_BYTE *)(v4 + 6892) != 0;
    else
      v60 = 0;
    v184 = v67;
    theArray = v59;
    if (v65)
    {
      if (v66)
      {
        v68 = *(void (**)(_QWORD, stat *, uint64_t))(a1 + 16);
        if (v68)
        {
          memset(&buf, 0, 96);
          v68(*(_QWORD *)(a1 + 32), &buf, v60);
        }
        v69 = *(void (**)(_QWORD, _QWORD, stat *))(a1 + 24);
        if (v69)
        {
          memset(&buf, 0, 96);
          v69(*(_QWORD *)(a1 + 32), 0, &buf);
        }
LABEL_88:
        v81 = _os_feature_enabled_impl();
        if ((v81 & 1) != 0
          || (v85 = _os_feature_enabled_impl(), !*(_BYTE *)(v5 + 2072))
          || !v85
          || (*(_BYTE *)(v5 + 829) & 0x10) != 0
          || (v86 = *(_QWORD *)(a1 + 64)) == 0 && (v86 = *(_QWORD *)(a1 + 72)) == 0)
        {
LABEL_89:
          v82 = v81;
          v83 = *(_QWORD *)(a1 + 64);
          if (v83)
          {
            v236 = 0u;
            memset(v237, 0, sizeof(v237));
            v234 = 0u;
            v235 = 0u;
            v232 = 0u;
            v233 = 0u;
            memset(&buf, 0, sizeof(buf));
            fd_name(v83, (char *)&buf, 0xFFuLL);
            if (*(int *)(v5 + 6960) >= 1)
            {
              if (*(_QWORD *)&buf.st_dev == 0x416C616E72756F6ALL && LODWORD(buf.st_ino) == 779252852)
              {
                __endptr[0] = 0;
                if (*(_DWORD *)(v5 + 6960) == strtoll((const char *)((unint64_t)&buf | 0xC), __endptr, 0))goto LABEL_133;
              }
LABEL_125:
              SIActivityJournalUnlinkJournal((os_unfair_lock_s *)(v4 + 2192), *(_QWORD *)(a1 + 64));
              if (v81)
                fd_make_readonly(*(_QWORD *)(a1 + 64));
              if (*(_DWORD *)(a1 + 56))
                v95 = *(_DWORD *)(a1 + 56);
              else
                v95 = 2280;
              _fd_unlink_with_origin(*(_QWORD *)(a1 + 64), v95);
              v96 = *__error();
              v97 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
              {
                v98 = *(_DWORD *)(a1 + 56);
                LODWORD(__endptr[0]) = 67109378;
                HIDWORD(__endptr[0]) = v98;
                LOWORD(__endptr[1]) = 2080;
                *(char **)((char *)&__endptr[1] + 2) = (char *)&buf;
                _os_log_impl(&dword_1B8270000, v97, OS_LOG_TYPE_DEFAULT, "(%d)Unlinked journal %s", (uint8_t *)__endptr, 0x12u);
              }
              *__error() = v96;
              goto LABEL_133;
            }
            if (!*(_BYTE *)(v4 + 6944))
              goto LABEL_125;
          }
LABEL_133:
          v99 = *(_QWORD *)(a1 + 72);
          if (!v99)
          {
LABEL_143:
            if (theArray)
              si_deleteExhaustedRemappings(v5, theArray);
            *(CFAbsoluteTime *)(v5 + 1464) = CFAbsoluteTimeGetCurrent();
            v106 = *__error();
            v107 = _SILogForLogForCategory(11);
            v108 = 2 * (dword_1EF19FCB8 < 4);
            if (os_log_type_enabled(v107, v108))
            {
              v109 = *(_QWORD *)(v5 + 2408);
              buf.st_dev = 134218240;
              *(_QWORD *)&buf.st_mode = v5;
              WORD2(buf.st_ino) = 2048;
              *(__darwin_ino64_t *)((char *)&buf.st_ino + 6) = v109;
              _os_log_impl(&dword_1B8270000, v107, v108, "synced SIRef:%p recoverTime:%llu", (uint8_t *)&buf, 0x16u);
            }
            *__error() = v106;
            v205 = 1;
            goto LABEL_154;
          }
          SIActivityJournalUnlinkJournal((os_unfair_lock_s *)(v4 + 2192), v99);
          if (v82)
            fd_make_readonly(*(_QWORD *)(a1 + 72));
          if (*(_DWORD *)(a1 + 56))
            v100 = *(_DWORD *)(a1 + 56);
          else
            v100 = 2291;
          _fd_unlink_with_origin(*(_QWORD *)(a1 + 72), v100);
          v236 = 0u;
          memset(v237, 0, sizeof(v237));
          v234 = 0u;
          v235 = 0u;
          v232 = 0u;
          v233 = 0u;
          memset(&buf, 0, sizeof(buf));
          v101 = *__error();
          v102 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
          {
LABEL_142:
            *__error() = v101;
            goto LABEL_143;
          }
          v103 = *(_DWORD *)(a1 + 56);
          v104 = fd_name(*(_QWORD *)(a1 + 72), (char *)&buf, 0xFFuLL);
          LODWORD(__endptr[0]) = 67109378;
          HIDWORD(__endptr[0]) = v103;
          LOWORD(__endptr[1]) = 2080;
          *(char **)((char *)&__endptr[1] + 2) = v104;
          v105 = __endptr;
LABEL_141:
          _os_log_impl(&dword_1B8270000, v102, OS_LOG_TYPE_DEFAULT, "(%d)Unlinked journal %s", (uint8_t *)v105, 0x12u);
          goto LABEL_142;
        }
        v87 = *(_DWORD *)(v86 + 44);
        bzero(&buf, 0x400uLL);
        if ((fcntl(v87, 50, &buf) & 0x80000000) == 0)
        {
          if (LOBYTE(buf.st_dev))
          {
            v88 = strlen((const char *)&buf);
            snprintf((char *)&buf + v88, 1024 - v88, "/%s", "skg_");
            v89 = open((const char *)&buf, 256);
            if ((v89 & 0x80000000) == 0)
            {
              close(v89);
              goto LABEL_89;
            }
          }
        }
        bzero(&buf, 0x400uLL);
        v229 = 0u;
        memset(v230, 0, sizeof(v230));
        v227 = 0u;
        v228 = 0u;
        v225 = 0u;
        v226 = 0u;
        v223 = 0u;
        v224 = 0u;
        v221 = 0u;
        v222 = 0u;
        v219 = 0u;
        v220 = 0u;
        v218 = 0u;
        memset(__endptr, 0, sizeof(__endptr));
        memset(__str, 0, 255);
        v127 = *(_QWORD *)(a1 + 64);
        if (v127)
        {
          v128 = fd_name(v127, (char *)__endptr, 0xFFuLL);
          v129 = v128;
          v130 = v128;
          if (*(int *)(v5 + 6960) >= 1)
          {
            if (!strncmp(v128, "journalAttr.", 0xCuLL))
            {
              *(_QWORD *)v213 = 0;
              if (*(_DWORD *)(v5 + 6960) == strtoll(v129 + 12, (char **)v213, 0))
                goto LABEL_213;
            }
LABEL_192:
            SIActivityJournalUnlinkJournal((os_unfair_lock_s *)(v4 + 2192), *(_QWORD *)(a1 + 64));
            if (!strncmp(v130, "journalAttr.", 0xCuLL))
            {
              __s = v130;
              snprintf((char *)__str, 0xFFuLL, "%s%s", "skg_knowledgeEntry.", v129 + 12);
              fd_rename(*(_QWORD *)(a1 + 64), (const char *)__str);
              v141 = *(_QWORD *)(a1 + 64);
              if (v141)
                v142 = *(_DWORD *)(v141 + 44);
              else
                v142 = -1;
              v181 = v142;
              v143 = *__error();
              v144 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
              {
                v145 = *(_DWORD *)(a1 + 56);
                *(_DWORD *)v213 = 67109634;
                *(_DWORD *)&v213[4] = v145;
                *(_WORD *)&v213[8] = 2080;
                *(_QWORD *)&v213[10] = __s;
                v214 = 2080;
                v215 = __str;
                _os_log_impl(&dword_1B8270000, v144, OS_LOG_TYPE_DEFAULT, "(%d)renamed journal %s -> %s", v213, 0x1Cu);
              }
              *__error() = v143;
              fcntl(v181, 50, &buf);
              v146 = strlen((const char *)&buf);
              snprintf((char *)&buf + v146, 0x400uLL, "/%s", (const char *)__str);
              v189 = 65541;
              v147 = open((const char *)&buf, 0);
              if ((v147 & 0x80000000) == 0)
              {
                v148 = v147;
                if (!ffsctl(v147, 0xC0084A44uLL, &v189, 0))
                {
                  v178 = *__error();
                  v149 = _SILogForLogForCategory(0);
                  if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
                  {
                    v150 = *(_DWORD *)(a1 + 56);
                    *(_DWORD *)v213 = 67109378;
                    *(_DWORD *)&v213[4] = v150;
                    *(_WORD *)&v213[8] = 2080;
                    *(_QWORD *)&v213[10] = __str;
                    _os_log_impl(&dword_1B8270000, v149, OS_LOG_TYPE_DEFAULT, "(%d)Mark skg journal purgeable %s", v213, 0x12u);
                  }
                  *__error() = v178;
                }
                close(v148);
              }
              strcpy(&v129[strlen(__s)], "_toc");
              v151 = *__error();
              v152 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v213 = 136315138;
                *(_QWORD *)&v213[4] = __s;
                _os_log_impl(&dword_1B8270000, v152, OS_LOG_TYPE_DEFAULT, "unlink toc %s", v213, 0xCu);
              }
              *__error() = v151;
              unlinkat(v181, __s, 0);
            }
            else
            {
              if (*(_DWORD *)(a1 + 56))
                v136 = *(_DWORD *)(a1 + 56);
              else
                v136 = 2348;
              _fd_unlink_with_origin(*(_QWORD *)(a1 + 64), v136);
              v137 = *__error();
              v138 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
              {
                v139 = *(_DWORD *)(a1 + 56);
                v140 = fd_name(*(_QWORD *)(a1 + 64), v130, 8uLL);
                *(_DWORD *)v213 = 67109378;
                *(_DWORD *)&v213[4] = v139;
                *(_WORD *)&v213[8] = 2080;
                *(_QWORD *)&v213[10] = v140;
                _os_log_impl(&dword_1B8270000, v138, OS_LOG_TYPE_DEFAULT, "(%d)Unlinked journal %s", v213, 0x12u);
              }
              *__error() = v137;
            }
            goto LABEL_213;
          }
          if (!*(_BYTE *)(v4 + 6944))
            goto LABEL_192;
        }
LABEL_213:
        v153 = *(_QWORD *)(a1 + 72);
        if (!v153)
          goto LABEL_143;
        SIActivityJournalUnlinkJournal((os_unfair_lock_s *)(v4 + 2192), v153);
        v154 = fd_name(*(_QWORD *)(a1 + 72), (char *)__endptr, 0xFFuLL);
        v155 = v154;
        if (!strncmp(v154, "journalAttr.", 0xCuLL))
        {
          snprintf((char *)__str, 0xFFuLL, "%s%s", "skg_knowledgeEntry.", v154 + 12);
          fd_rename(*(_QWORD *)(a1 + 72), (const char *)__str);
          v159 = *(_QWORD *)(a1 + 72);
          if (v159)
            v160 = *(_DWORD *)(v159 + 44);
          else
            v160 = -1;
          v180 = v160;
          v161 = *__error();
          v162 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
          {
            v163 = *(_DWORD *)(a1 + 56);
            *(_DWORD *)v213 = 67109634;
            *(_DWORD *)&v213[4] = v163;
            *(_WORD *)&v213[8] = 2080;
            *(_QWORD *)&v213[10] = v154;
            v214 = 2080;
            v215 = __str;
            _os_log_impl(&dword_1B8270000, v162, OS_LOG_TYPE_DEFAULT, "(%d)renamed journal %s -> %s", v213, 0x1Cu);
          }
          *__error() = v161;
          fcntl(v180, 50, &buf);
          v164 = strlen((const char *)&buf);
          snprintf((char *)&buf + v164, 0x400uLL, "/%s", (const char *)__str);
          v189 = 65541;
          v165 = open((const char *)&buf, 0);
          if ((v165 & 0x80000000) == 0)
          {
            v166 = v165;
            if (!ffsctl(v165, 0xC0084A44uLL, &v189, 0))
            {
              v176 = v22;
              v167 = *__error();
              v168 = _SILogForLogForCategory(0);
              if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
              {
                v169 = *(_DWORD *)(a1 + 56);
                *(_DWORD *)v213 = 67109378;
                *(_DWORD *)&v213[4] = v169;
                *(_WORD *)&v213[8] = 2080;
                *(_QWORD *)&v213[10] = __str;
                _os_log_impl(&dword_1B8270000, v168, OS_LOG_TYPE_DEFAULT, "(%d)Mark skg journal purgeable %s", v213, 0x12u);
              }
              *__error() = v167;
              v22 = v176;
            }
            close(v166);
          }
          strcat(v154, "_toc");
          v170 = *__error();
          v171 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v213 = 136315138;
            *(_QWORD *)&v213[4] = v155;
            _os_log_impl(&dword_1B8270000, v171, OS_LOG_TYPE_DEFAULT, "unlink toc %s", v213, 0xCu);
          }
          *__error() = v170;
          unlinkat(v180, v155, 0);
          goto LABEL_143;
        }
        if (*(_DWORD *)(a1 + 56))
          v156 = *(_DWORD *)(a1 + 56);
        else
          v156 = 2383;
        _fd_unlink_with_origin(*(_QWORD *)(a1 + 72), v156);
        v101 = *__error();
        v102 = _SILogForLogForCategory(0);
        if (!os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
          goto LABEL_142;
        v157 = *(_DWORD *)(a1 + 56);
        v158 = fd_name(*(_QWORD *)(a1 + 72), v155, 8uLL);
        *(_DWORD *)v213 = 67109378;
        *(_DWORD *)&v213[4] = v157;
        *(_WORD *)&v213[8] = 2080;
        *(_QWORD *)&v213[10] = v158;
        v105 = (char **)v213;
        goto LABEL_141;
      }
      v70 = *(_QWORD *)(v5 + 2360);
      if (v70)
      {
        v71 = *(void (**)(_QWORD, uint64_t, uint64_t))(v70 + 48);
        if (v71)
          v71(*(_QWORD *)(v70 + 136), v63, v60);
      }
      v72 = CFNumberCreate(v54, kCFNumberIntType, (const void *)(v4 + 2344));
      v73 = CFNumberCreate(v54, kCFNumberIntType, (const void *)(v4 + 2348));
      si_set_property(v5, CFSTR("kMDSIndexSyncCount"), v72, 1, 1);
      si_set_property(v5, CFSTR("kMDSIndexDeferSyncCount"), v73, 1, 1);
      CFRelease(v72);
      CFRelease(v73);
      v74 = *(_QWORD *)(v5 + 6592);
      *(_OWORD *)&buf.st_dev = xmmword_1E6E2DC80;
      *(_OWORD *)&buf.st_uid = *(_OWORD *)&off_1E6E2DC90;
      buf.st_atimespec = (timespec)xmmword_1E6E2DCA0;
      buf.st_mtimespec = *(timespec *)off_1E6E2DCB0;
      buf.st_ctimespec.tv_sec = (__darwin_time_t)&v206;
      v75 = _ContentIndexSyncIndexBulk(v4 + 1192, v211, v212, 0, (uint64_t)&buf, v74, (uint64_t)lowDiskSpaceCallback, v5);
      if (!atomic_load((unsigned int *)(v4 + 6888)))
      {
        v190[0] = MEMORY[0x1E0C809B0];
        v190[1] = 0x40000000;
        v190[2] = __syncIndex_block_invoke;
        v190[3] = &__block_descriptor_tmp_512;
        v190[4] = v5;
        ContentIndexListsApply(v211, v212, (uint64_t)v190);
      }
      v77 = *(_QWORD *)(v5 + 2360);
      if (v77)
      {
        v78 = *(void (**)(_QWORD))(v77 + 56);
        if (v78)
          v78(*(_QWORD *)(v77 + 136));
      }
      if (_os_feature_enabled_impl() && *(_BYTE *)(v5 + 2072))
        MDTrieSync();
      v64 = 3;
      v63 = v75;
    }
    if (!(_DWORD)v63)
      goto LABEL_88;
    v79 = v63;
    v179 = v64;
    pthread_mutex_lock(&schlock);
    v80 = *(__CFArray **)(v5 + 2376);
    if (v80)
    {
      v239.length = CFArrayGetCount(theArray);
      v239.location = 0;
      CFArrayAppendArray(v80, theArray, v239);
    }
    else
    {
      *(_QWORD *)(v5 + 2376) = 0;
    }
    pthread_mutex_unlock(&schlock);
    if ((_DWORD)v79 == 28)
    {
      v93 = 1;
    }
    else
    {
      if ((_DWORD)v79 == 89)
      {
LABEL_154:
        v112 = *(int **)(v5 + 6880);
        v113 = v184 ^ 1;
        if (!v112)
          v113 = 1;
        v28 = v187;
        if ((v113 & 1) == 0)
        {
          *(_QWORD *)(v5 + 6880) = 0;
          db_release_datastore_no_sync(v112);
          delete_index_recovery_files(*(_DWORD *)(v5 + 32));
          v114 = *__error();
          v115 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf.st_dev) = 0;
            _os_log_impl(&dword_1B8270000, v115, OS_LOG_TYPE_DEFAULT, "Recovery Complete!", (uint8_t *)&buf, 2u);
          }
          *__error() = v114;
        }
        v116 = *(void (**)(uint64_t, _QWORD))(a1 + 40);
        if (v116)
        {
          v117 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 40) = 0;
          *(_QWORD *)(a1 + 48) = 0;
          v116(v117, v205 ^ 1u);
        }
        v16 = v188;
        if (gSILogLevels[0] >= 5)
        {
          v174 = *__error();
          v175 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf.st_dev) = 0;
            _os_log_impl(&dword_1B8270000, v175, OS_LOG_TYPE_DEFAULT, "Finished sync!", (uint8_t *)&buf, 2u);
          }
          *__error() = v174;
          v16 = v188;
          v28 = v187;
        }
        creationTouchFileUnlink(*(_DWORD *)(v5 + 32));
        v118 = *(_QWORD *)&threadData[18 * v194 + 2];
        v119 = v193;
        v120 = v118 + 320 * v193;
        *(_DWORD *)(v120 + 312) = v185;
        v121 = *(void (**)(_QWORD))(v120 + 232);
        if (v121)
          v121(*(_QWORD *)(v118 + 320 * v119 + 288));
        dropThreadId(v194, 0, v186);
        goto LABEL_166;
      }
      v90 = atomic_load((unsigned __int8 *)(v4 + 2439));
      if ((v90 & 1) == 0)
      {
        if (SIIsAppleInternal_onceToken != -1)
          dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_4644);
        if (SIIsAppleInternal_internal)
        {
          do
            v91 = __ldxr(syncIndex__crashCount);
          while (__stxr(v91 + 1, syncIndex__crashCount));
          if (!v91)
          {
            v92 = CFStringCreateWithFormat(v54, 0, CFSTR("syncIndex, error:%d, step:%d"), v79, v179);
            getpid();
            SISimulateCrashForPid(v179, (uint64_t)v92);
            if (v92)
              CFRelease(v92);
          }
        }
      }
      if ((_DWORD)v79 == 1 || (_DWORD)v79 == 13)
        v93 = 0;
      else
        v93 = 2;
    }
    si_makeUnavailable(v5, v79, v93, 2, (uint64_t)"sync err");
    goto LABEL_154;
  }
  v7 = *__error();
  v8 = _SILogForLogForCategory(12);
  v9 = 2 * (dword_1EF19FCBC < 4);
  if (os_log_type_enabled(v8, v9))
  {
    state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 112));
    buf.st_dev = 134217984;
    *(_QWORD *)&buf.st_mode = state;
    _os_log_impl(&dword_1B8270000, v8, v9, "defer sync. activity state:%lu", (uint8_t *)&buf, 0xCu);
  }
  *__error() = v7;
  *(_QWORD *)(a1 + 120) = 1;
  if (!xpc_activity_set_state(*(xpc_activity_t *)(a1 + 112), 3))
  {
    v11 = *__error();
    v12 = _SILogForLogForCategory(12);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      buf.st_dev = 136315394;
      *(_QWORD *)&buf.st_mode = "syncIndex";
      WORD2(buf.st_ino) = 1024;
      *(_DWORD *)((char *)&buf.st_ino + 6) = 2050;
      _os_log_error_impl(&dword_1B8270000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Failed to defer activity state in syncIndex", (uint8_t *)&buf, 0x12u);
    }
    *__error() = v11;
  }
  v13 = 0;
LABEL_177:
  si_sync_ctx_free(a1, v13);
}

uint64_t fd_setDir(uint64_t a1, int *a2)
{
  uint64_t result;
  stat v5;

  *a2 = -1;
  memset(&v5, 0, sizeof(v5));
  if (!fstat(a1, &v5))
  {
    *a2 = open(".", 4);
    if (!MEMORY[0x1BCCB1484](a1))
      return 1;
    if ((*a2 & 0x80000000) == 0)
    {
      close(*a2);
      result = 0;
      *a2 = -1;
      return result;
    }
  }
  return 0;
}

uint64_t si_set_property(uint64_t result, const void *a2, const void *a3, int a4, int a5)
{
  uint64_t v5;
  pthread_mutex_t *v10;
  const __CFDictionary *v11;
  const void *v12;
  __CFDictionary *v13;
  const void *Value;
  __CFDictionary *v15;
  int v16;
  NSObject *v17;
  void *v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v18 = 0;
  if (result)
  {
    v5 = result;
    if (*(_QWORD *)(result + 1184))
    {
      if ((*(_BYTE *)(result + 828) & 4) == 0)
      {
        v10 = (pthread_mutex_t *)(result + 1504);
        pthread_mutex_lock((pthread_mutex_t *)(result + 1504));
        v11 = *(const __CFDictionary **)(v5 + 1496);
        if (!v11 || (a4 & 1) != 0 || (a5 & 1) != 0)
        {
          if (si_create_propertydict(v5, &v18, 1))
          {
            Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 1496), a2);
            if (Value != a3 && (!a3 || !Value || !CFEqual(Value, a3)))
            {
              v15 = *(__CFDictionary **)(v5 + 1496);
              if (!a3 || (const void *)*MEMORY[0x1E0C9B0D0] == a3)
                CFDictionaryRemoveValue(v15, a2);
              else
                CFDictionarySetValue(v15, a2, a3);
              *(_BYTE *)(v5 + 2460) = 1;
              if (a4)
                _si_store_propery_cache(v5, (_DWORD **)&v18, 1);
              if (a5)
                db_dirty_datastore(*(int **)(v5 + 1184));
            }
            free(v18);
          }
          else
          {
            v16 = *__error();
            v17 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              v20 = "si_set_property";
              v21 = 1024;
              v22 = 15704;
              _os_log_error_impl(&dword_1B8270000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Couldn't get index property dictionary", buf, 0x12u);
            }
            *__error() = v16;
          }
        }
        else
        {
          v12 = CFDictionaryGetValue(v11, a2);
          if (v12 != a3 && (!a3 || !v12 || !CFEqual(v12, a3)))
          {
            v13 = *(__CFDictionary **)(v5 + 1496);
            if (!a3 || (const void *)*MEMORY[0x1E0C9B0D0] == a3)
              CFDictionaryRemoveValue(v13, a2);
            else
              CFDictionarySetValue(v13, a2, a3);
            *(_BYTE *)(v5 + 2460) = 1;
          }
        }
        return pthread_mutex_unlock(v10);
      }
    }
  }
  return result;
}

BOOL si_create_propertydict(uint64_t a1, _QWORD *a2, int a3)
{
  _DWORD *indexmetadata;
  void *v6;
  _QWORD *v7;
  unsigned int v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void (*v16)(_QWORD);
  int v17;
  NSObject *v18;
  int v19;
  NSObject *v20;
  os_log_type_t v21;
  const __CFAllocator *v22;
  const __CFData *v23;
  const __CFData *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD);
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  const UInt8 *v33;
  unint64_t v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a2 && *(_QWORD *)(a1 + 1496) || (indexmetadata = si_create_indexmetadata(a1, a3)) == 0)
  {
    v7 = (_QWORD *)(a1 + 1496);
    return *v7 != 0;
  }
  v6 = indexmetadata;
  v7 = (_QWORD *)(a1 + 1496);
  if (!*(_QWORD *)(a1 + 1496))
  {
    v33 = 0;
    v34 = 0;
    do
    {
      v8 = __ldxr(exceptionSequenceNum);
      v9 = v8 + 1;
    }
    while (__stxr(v8 + 1, exceptionSequenceNum));
    v10 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, *(_QWORD *)(a1 + 1184), 0x40000000, v9);
    v31 = HIDWORD(v10);
    v32 = v10;
    v29 = v12;
    v30 = v11;
    v13 = *(_QWORD *)&threadData[18 * v10 + 2];
    v14 = v13 + 320 * HIDWORD(v10);
    *(_BYTE *)(v14 + 216) = 0;
    v15 = *(_DWORD *)(v14 + 312);
    v16 = *(void (**)(_QWORD))(v14 + 224);
    if (v16)
      v16(*(_QWORD *)(v13 + 320 * HIDWORD(v10) + 288));
    if (!_setjmp((int *)v14))
    {
      if (db_get_field(*(int **)(a1 + 1184), (uint64_t)v6, "kMDStoreProperties", &v34, &v33))
      {
        v19 = *__error();
        v20 = _SILogForLogForCategory(0);
        v21 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v20, v21))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1B8270000, v20, v21, "Creating index property dictionary", buf, 2u);
        }
        *__error() = v19;
        *v7 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      }
      else
      {
        v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v23 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v33, *(unsigned int *)(v34 + 8), (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
        if (v23)
        {
          v24 = v23;
          *v7 = CFPropertyListCreateWithData(v22, v23, 1uLL, 0, 0);
          CFRelease(v24);
        }
      }
      v25 = *(_QWORD *)&threadData[18 * v32 + 2];
      v26 = v25 + 320 * v31;
      *(_DWORD *)(v26 + 312) = v15;
      v27 = *(void (**)(_QWORD))(v26 + 232);
      if (v27)
        v27(*(_QWORD *)(v25 + 320 * v31 + 288));
      dropThreadId(v32, 0, v9);
      if (a2)
        goto LABEL_13;
LABEL_25:
      free(v6);
      return *v7 != 0;
    }
    v17 = *__error();
    v18 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v36 = "si_create_propertydict";
      v37 = 1024;
      v38 = 995;
      _os_log_error_impl(&dword_1B8270000, v18, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v17;
    *(_DWORD *)(v14 + 312) = v15;
    CIOnThreadCleanUpReset(v29);
    dropThreadId(v32, 1, v9);
    CICleanUpReset(v32, v30);
  }
  if (!a2)
    goto LABEL_25;
LABEL_13:
  *a2 = v6;
  return *v7 != 0;
}

_DWORD *si_create_indexmetadata(uint64_t a1, int a2)
{
  unsigned int v4;
  int v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void (*v12)(_QWORD);
  int v13;
  NSObject *v14;
  _BOOL4 v16;
  _DWORD *v17;
  unint64_t *v18;
  double v19;
  double v20;
  __n128 v21;
  unsigned int *v22;
  _DWORD *obj;
  __n128 v24;
  int v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  void (*v31)(_QWORD);
  uint8_t buf[4];
  int v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  unsigned int v40;
  _DWORD *v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v41 = 0;
  do
  {
    v4 = __ldxr(exceptionSequenceNum);
    v5 = v4 + 1;
  }
  while (__stxr(v4 + 1, exceptionSequenceNum));
  v6 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, *(_QWORD *)(a1 + 1184), 0x40000000, v5);
  v39 = HIDWORD(v6);
  v40 = v6;
  v38 = __PAIR64__(v7, v8);
  v9 = *(_QWORD *)&threadData[18 * v6 + 2];
  v10 = v9 + 320 * HIDWORD(v6);
  *(_BYTE *)(v10 + 216) = 0;
  v11 = *(_DWORD *)(v10 + 312);
  v12 = *(void (**)(_QWORD))(v10 + 224);
  if (v12)
    v12(*(_QWORD *)(v9 + 320 * HIDWORD(v6) + 288));
  v37 = v40;
  v36 = v39;
  v35 = v38;
  if (_setjmp((int *)v10))
  {
    v13 = *__error();
    v14 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v42 = 136315394;
      *(_QWORD *)&v42[4] = "si_create_indexmetadata";
      v43 = 1024;
      v44 = 969;
      _os_log_error_impl(&dword_1B8270000, v14, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v42, 0x12u);
    }
    *__error() = v13;
    *(_DWORD *)(v10 + 312) = v11;
    CIOnThreadCleanUpReset(v35);
    dropThreadId(v37, 1, v5);
    CICleanUpReset(v37, HIDWORD(v35));
    return 0;
  }
  else
  {
    v16 = 1;
    *(_QWORD *)v42 = 1;
    v17 = 0;
    v18 = db_obj_iter_create_with_filter(*(int **)(a1 + 1184), 1uLL, (uint64_t)v42, 0, 0, 0, 0, 0, 0);
    v22 = db_obj_iter_next((uint64_t)v18, &v34, 1, v19, v20, v21);
    if (v22)
    {
      v17 = db_copy_obj(v22, 512);
      v16 = v17 == 0;
    }
    db_obj_iter_release((uint64_t)v18);
    if (a2 == 1 && v16)
    {
      obj = db_create_obj(*(_QWORD *)(a1 + 1184), 21, 0);
      v41 = obj;
      if (obj)
      {
        *(_QWORD *)obj = 1;
        obj[10] |= 1u;
        v33 = 65549;
        db_add_field(*(int **)(a1 + 1184), &v41, 1u, "_kStoreMetadataVersion", 0, 0x108u, 6, (unsigned __int8 *)&v33, v24, 4);
        v17 = v41;
        if (db_update_obj(*(int **)(a1 + 1184), (uint64_t)v41, 12))
        {
          v25 = *__error();
          v26 = _SILogForLogForCategory(7);
          v27 = dword_1EF19FCA8 < 3;
          if (os_log_type_enabled(v26, (os_log_type_t)(dword_1EF19FCA8 < 3)))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1B8270000, v26, v27, "*warn* Failed updating index state", buf, 2u);
          }
          *__error() = v25;
        }
      }
      else
      {
        v17 = 0;
      }
    }
    v28 = *(_QWORD *)&threadData[18 * v37 + 2];
    v29 = v36;
    v30 = v28 + 320 * v36;
    *(_DWORD *)(v30 + 312) = v11;
    v31 = *(void (**)(_QWORD))(v30 + 232);
    if (v31)
      v31(*(_QWORD *)(v28 + 320 * v29 + 288));
    dropThreadId(v37, 0, v5);
    return v17;
  }
}

unint64_t *db_obj_iter_create_with_filter(int *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, const void *a7, const void *a8, unint64_t a9)
{
  unint64_t *v17;
  unint64_t *v18;
  void *v19;
  _DWORD *v21;
  qos_class_t v22;
  NSObject *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  NSObject *v43;
  int v44;
  char *v45;
  char *v46;
  const char *v47;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v42 = *__error();
    v43 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      v44 = *a1;
      *(_DWORD *)buf = 136315650;
      v49 = "db_obj_iter_create_with_filter";
      v50 = 1024;
      v51 = 611;
      v52 = 1024;
      v53 = v44;
      _os_log_error_impl(&dword_1B8270000, v43, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v42;
    v45 = __si_assert_copy_extra_268();
    v46 = v45;
    if (v45)
      v47 = v45;
    else
      v47 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 611, v47);
    free(v46);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if (!a3)
    return 0;
  v17 = (unint64_t *)malloc_type_zone_malloc((malloc_zone_t *)queryZone, 0x10118uLL, 0x6085D6BuLL);
  if (!v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    return 0;
  }
  v18 = v17;
  *(_DWORD *)v17 = 3506;
  v19 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, 32 * a2, 0x6085D6BuLL);
  if (!v19)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
    }
    free(v18);
    return 0;
  }
  v18[4] = (unint64_t)v19;
  madvise(v19, 32 * a2, 3);
  v18[23] = 0;
  v18[3] = (unint64_t)a1;
  v18[10] = (unint64_t)v18;
  v18[11] = 0;
  v18[17] = a2;
  atomic_store(0, v18 + 18);
  v18[20] = 0;
  *((_BYTE *)v18 + 192) = 0;
  v18[13] = 0;
  v18[14] = 0;
  v18[15] = -1;
  v18[34] = 0;
  v18[25] = 0;
  v18[12] = 0;
  *((_WORD *)v18 + 37) = 1;
  *((_BYTE *)v18 + 76) = (a6 & 0x10) != 0;
  *((_BYTE *)v18 + 73) = (a6 & 4) != 0;
  *((_BYTE *)v18 + 78) = (a6 & 8) != 0;
  v21 = fd_dup(*((_QWORD *)a1 + 106));
  v18[1] = (unint64_t)v21;
  *((_DWORD *)v18 + 1) = _fd_acquire_fd((uint64_t)v21, v18 + 2);
  v18[5] = (unint64_t)_Block_copy(a7);
  v18[6] = (unint64_t)_Block_copy(a8);
  v18[7] = a9;
  *((_BYTE *)v18 + 72) = 0;
  *((_BYTE *)v18 + 77) = 0;
  v18[8] = 0;
  v18[22] = 0;
  v22 = qos_class_self();
  v23 = dispatch_queue_attr_make_with_qos_class(0, v22, 0);
  v18[21] = (unint64_t)dispatch_queue_create("obj iter read queue", v23);
  v24 = a1[201];
  if ((v24 & 1) == 0)
    ++*((_BYTE *)v18 + 192);
  if (a2)
  {
    v25 = v18[4];
    if ((a6 & 1) != 0 || (v24 & 1) == 0)
    {
      v35 = 0;
      v36 = 16;
      do
      {
        v37 = (_QWORD *)(v25 + v36);
        *(v37 - 2) = *(_QWORD *)(a3 + 8 * v35);
        *v37 = 0;
        if (a5)
          v38 = *(_BYTE *)(a5 + v35);
        else
          v38 = 0;
        *(_BYTE *)(v18[4] + v36 + 8) = *(_BYTE *)(v18[4] + v36 + 8) & 0xFB | (4 * (v38 & 1));
        v39 = v18[4] + v36;
        *(_BYTE *)(v39 + 9) = 0;
        *(_BYTE *)(v39 + 8) &= ~1u;
        *(_QWORD *)(v18[4] + v36) |= 0x400000000uLL;
        *(_BYTE *)(v18[4] + v36 + 8) &= ~2u;
        v40 = (uint64_t *)(v18[4] + v36);
        v41 = *v40 | 0x3FFFFFFFCLL;
        *(v40 - 1) = v35;
        *v40 = v41;
        *(_QWORD *)(v18[4] + v36) &= 0xFFFFFFFFFFFFFFFCLL;
        v25 = v18[4];
        *(_QWORD *)(v25 + v36 - 8) = v35++;
        v36 += 32;
      }
      while (a2 != v35);
    }
    else
    {
      v26 = 0;
      v27 = 16;
      do
      {
        v28 = (_QWORD *)(v25 + v27);
        *(v28 - 2) = *(_QWORD *)(a3 + 8 * v26);
        *v28 = 0;
        if (a5)
          v29 = *(_BYTE *)(a5 + v26);
        else
          v29 = 0;
        *(_BYTE *)(v18[4] + v27 + 8) = *(_BYTE *)(v18[4] + v27 + 8) & 0xFB | (4 * (v29 & 1));
        v30 = v18[4] + v27;
        *(_BYTE *)(v30 + 9) = 0;
        *(_BYTE *)(v30 + 8) &= ~1u;
        *(_QWORD *)(v18[4] + v27) |= 0x400000000uLL;
        *(_BYTE *)(v18[4] + v27 + 8) &= ~2u;
        v31 = (uint64_t *)(v18[4] + v27);
        v32 = *v31 | 0x3FFFFFFFCLL;
        *(v31 - 1) = v26;
        *v31 = v32;
        if (a4)
          v33 = (*(_WORD *)(a4 + 2 * v26) & 0xFFDF) == 17;
        else
          v33 = 3;
        *(_QWORD *)(v18[4] + v27) = *(_QWORD *)(v18[4] + v27) & 0xFFFFFFFFFFFFFFFCLL | v33;
        v25 = v18[4];
        *(_QWORD *)(v25 + v27 - 8) = v26++;
        v27 += 32;
      }
      while (a2 != v26);
    }
  }
  return v18;
}

unsigned int *db_obj_iter_next(uint64_t a1, unint64_t *a2, int a3, double a4, double a5, __n128 a6)
{
  unint64_t *v9;
  uint64_t v10;
  unsigned int *result;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  const char *v20;

  if (*(_DWORD *)a1 != 3506)
  {
    v18 = __si_assert_copy_extra_268();
    v19 = v18;
    if (v18)
      v20 = v18;
    else
      v20 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 701, v20);
    free(v19);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  v9 = (unint64_t *)(a1 + 80);
  v10 = *(_QWORD *)(a1 + 80);
  while (1)
  {
    result = _db_obj_iter_next((uint64_t)v9, a2, 0, a4, a5, a6);
    if (result)
      return result;
    v12 = atomic_load((unint64_t *)(a1 + 144));
    v13 = *(_QWORD *)(a1 + 136);
    if (v12 >= v13)
    {
      v14 = *(_BYTE *)(a1 + 192) + 1;
      *(_BYTE *)(a1 + 192) = v14;
      if (v14 > 1u || *(_QWORD *)(a1 + 160) == v13)
      {
LABEL_13:
        if (a3)
          db2_obj_iter_suspend((_DWORD *)a1);
        return 0;
      }
      atomic_store(0, (unint64_t *)(a1 + 144));
      if (v13)
      {
        v15 = 0;
        do
        {
          v16 = *(_QWORD *)(v10 + 32) + 32 * (v15 + *(_QWORD *)(a1 + 88));
          *(_QWORD *)(v16 + 16) |= 0x3FFFFFFFCuLL;
          v17 = *(_QWORD *)(v10 + 32) + 32 * (v15 + *(_QWORD *)(a1 + 88));
          *(_BYTE *)(v17 + 25) = 0;
          *(_QWORD *)(v17 + 16) |= 0x400000000uLL;
          ++v15;
        }
        while (v15 < *(_QWORD *)(a1 + 136));
      }
      subiter_do_lookups(v9, a4, a5, a6);
    }
    else if (*(_BYTE *)(a1 + 192))
    {
      goto LABEL_13;
    }
  }
}

_DWORD *db_copy_obj(unsigned int *a1, uint64_t a2)
{
  _DWORD *v4;
  _DWORD *v5;

  v4 = malloc_type_malloc(a1[3] + a2, 0x1142DA9BuLL);
  v5 = v4;
  if (v4)
  {
    memcpy(v4, a1, a1[3]);
    v5[2] = a1[3] + a2;
    if (a2)
      v5[10] &= ~0x100u;
  }
  return v5;
}

uint64_t _SIAssertPowerCallback()
{
  return 0;
}

void si_storesizes(uint64_t a1, int a2)
{
  int *v3;
  _BOOL8 is_dirty;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  _BYTE *v14;
  _DWORD *indexmetadata;
  _DWORD *v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD);
  _DWORD *v25;
  int v26;
  NSObject *v27;
  __n128 v28;
  int v29;
  _DWORD *v30;
  int updated;
  int v32;
  int v33;
  NSObject *v34;
  os_log_type_t v35;
  __n128 v36;
  int v37;
  int v38;
  int v39;
  int v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  void (*v46)(_QWORD);
  _BYTE v47[12];
  int v48;
  int v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  unsigned int v55;
  const void *v56;
  unint64_t v57;
  _DWORD *v58;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v3 = *(int **)(a1 + 1184);
  if (v3)
  {
    is_dirty = db_is_dirty(v3);
    if (is_dirty)
    {
      v6 = 256;
      if (!*(_BYTE *)(a1 + 2072))
        v6 = 22;
      v7 = 8 * v6;
      v8 = MEMORY[0x1E0C80A78](is_dirty);
      v10 = &v47[-v9];
      v12 = 4 * v11;
      MEMORY[0x1E0C80A78](v8);
      v14 = &v47[-v13];
      pthread_mutex_lock((pthread_mutex_t *)(a1 + 6976));
      memcpy(v10, (const void *)(a1 + 7040), v7);
      memcpy(v14, (const void *)(a1 + 9088), v12);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 6976));
      indexmetadata = si_create_indexmetadata(a1, 1);
      v58 = indexmetadata;
      if (indexmetadata)
      {
        v49 = a2;
        v16 = indexmetadata;
        v56 = 0;
        v57 = 0;
        do
        {
          v17 = __ldxr(exceptionSequenceNum);
          v18 = v17 + 1;
        }
        while (__stxr(v17 + 1, exceptionSequenceNum));
        v19 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, *(_QWORD *)(a1 + 1184), 0x40000000, v18);
        v54 = HIDWORD(v19);
        v55 = v19;
        v53 = __PAIR64__(v20, v21);
        v22 = *(_QWORD *)&threadData[18 * v19 + 2];
        v23 = v22 + 320 * HIDWORD(v19);
        *(_BYTE *)(v23 + 216) = 0;
        v48 = *(_DWORD *)(v23 + 312);
        v24 = *(void (**)(_QWORD))(v23 + 224);
        if (v24)
          v24(*(_QWORD *)(v22 + 320 * HIDWORD(v19) + 288));
        v52 = v55;
        v51 = v54;
        v50 = v53;
        if (_setjmp((int *)v23))
        {
          v25 = (_DWORD *)(v23 + 312);
          v26 = *__error();
          v27 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v60 = "si_storesizes";
            v61 = 1024;
            v62 = 1167;
            _os_log_error_impl(&dword_1B8270000, v27, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
          }
          *__error() = v26;
          *v25 = v48;
          CIOnThreadCleanUpReset(v50);
          dropThreadId(v52, 1, v18);
          CICleanUpReset(v52, HIDWORD(v50));
LABEL_38:
          free(v16);
          return;
        }
        if (db_get_field(*(int **)(a1 + 1184), (uint64_t)v16, "kMDStoreAccumulatedSizes", &v57, &v56))
        {
          v29 = v7;
        }
        else
        {
          v29 = v7;
          if (*(_DWORD *)(v57 + 8) == (_DWORD)v7 && !memcmp(v56, v10, v7))
            goto LABEL_25;
        }
        db_add_field(*(int **)(a1 + 1184), &v58, 1u, "kMDStoreAccumulatedSizes", 0, 0x128u, 8, v10, v28, v29);
        v30 = v58;
        updated = db_update_obj(*(int **)(a1 + 1184), (uint64_t)v58, 12);
        if (updated)
        {
          v32 = updated;
          v33 = *__error();
          v34 = _SILogForLogForCategory(7);
          v35 = dword_1EF19FCA8 < 3;
          if (os_log_type_enabled(v34, (os_log_type_t)(dword_1EF19FCA8 < 3)))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v60) = v32;
            _os_log_impl(&dword_1B8270000, v34, v35, "*warn* Failed storing sizes (%d)", buf, 8u);
          }
          *__error() = v33;
        }
        else if (v49)
        {
          db_dirty_datastore(*(int **)(a1 + 1184));
        }
        v16 = v30;
LABEL_25:
        if (db_get_field(*(int **)(a1 + 1184), (uint64_t)v16, "kMDStoreAccumulatedCounts", &v57, &v56))
        {
          v37 = v12;
        }
        else
        {
          v37 = v12;
          if (*(_DWORD *)(v57 + 8) == (_DWORD)v12 && !memcmp(v56, v14, v12))
          {
LABEL_35:
            v43 = *(_QWORD *)&threadData[18 * v52 + 2];
            v44 = v51;
            v45 = v43 + 320 * v51;
            *(_DWORD *)(v45 + 312) = v48;
            v46 = *(void (**)(_QWORD))(v45 + 232);
            if (v46)
              v46(*(_QWORD *)(v43 + 320 * v44 + 288));
            dropThreadId(v52, 0, v18);
            goto LABEL_38;
          }
        }
        db_add_field(*(int **)(a1 + 1184), &v58, 1u, "kMDStoreAccumulatedCounts", 0, 0x128u, 6, v14, v36, v37);
        v16 = v58;
        v38 = db_update_obj(*(int **)(a1 + 1184), (uint64_t)v58, 12);
        if (v38)
        {
          v39 = v38;
          v40 = *__error();
          v41 = _SILogForLogForCategory(7);
          v42 = dword_1EF19FCA8 < 3;
          if (os_log_type_enabled(v41, (os_log_type_t)(dword_1EF19FCA8 < 3)))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v60) = v39;
            _os_log_impl(&dword_1B8270000, v41, v42, "*warn* Failed storing sizes (%d)", buf, 8u);
          }
          *__error() = v40;
        }
        else if (v49)
        {
          db_dirty_datastore(*(int **)(a1 + 1184));
        }
        goto LABEL_35;
      }
    }
  }
}

CFDictionaryRef si_copyRemappingMetadata(uint64_t a1)
{
  const __CFAllocator *v2;
  CFDictionaryRef v3;
  void *values;
  CFTypeRef cf;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, (const void *)(a1 + 2384));
  cf = si_copyRemappingMetadatas(a1);
  v3 = CFDictionaryCreate(v2, (const void **)remapping_keys, (const void **)&values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFRelease(values);
  CFRelease(cf);
  return v3;
}

__CFArray *si_copyRemappingMetadatas(uint64_t a1)
{
  CFIndex Count;
  CFIndex v2;
  size_t v3;
  uint64_t *v4;
  const __CFAllocator *v5;
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v7;
  const CFDictionaryValueCallBacks *v8;
  uint64_t v9;
  CFDictionaryRef v10;
  uint64_t v12;
  CFArrayRef v13;
  int valuePtr;
  void *values;
  CFNumberRef v16;
  uint64_t v17;
  CFRange v18;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v13 = 0;
  db_perform_callback(*(_QWORD *)(a1 + 1184), (void (*)(uint64_t))_copyRemappings, (uint64_t)&v12);
  if (v13 && (Count = CFArrayGetCount(v13)) != 0)
  {
    v2 = Count;
    MEMORY[0x1E0C80A78](Count);
    v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v4, v3);
    v18.location = 0;
    v18.length = v2;
    CFArrayGetValues(v13, v18, (const void **)v4);
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2, MEMORY[0x1E0C9B378]);
    if (v2 >= 1)
    {
      v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
      v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
      do
      {
        v9 = *v4++;
        valuePtr = *(_QWORD *)(v9 + 24);
        values = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
        v16 = CFNumberCreate(v5, kCFNumberCFIndexType, (const void *)(v9 + 40));
        v10 = CFDictionaryCreate(v5, (const void **)remapping_keys_8410, (const void **)&values, 2, v7, v8);
        CFRelease(values);
        CFRelease(v16);
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v10);
        --v2;
      }
      while (v2);
    }
  }
  else
  {
    Mutable = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B378]);
  }
  if (v13)
    CFRelease(v13);
  return Mutable;
}

uint64_t db_perform_callback(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  pthread_key_t v6;
  void *v7;
  unsigned int v8;
  unint64_t v9;
  signed int v10;
  int v11;
  unint64_t v12;
  int v13;
  pthread_override_s *v14;
  char v15;
  uint64_t result;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  int v26;
  char *v27;
  char *v28;
  const char *v29;
  int v30;
  NSObject *v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 != 1685287992)
  {
    v24 = *__error();
    v25 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v26 = *(_DWORD *)a1;
      *(_DWORD *)buf = 136315650;
      v33 = "db_perform_callback";
      v34 = 1024;
      v35 = 325;
      v36 = 1024;
      v37 = v26;
      _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v24;
    v27 = __si_assert_copy_extra_268();
    v28 = v27;
    if (v27)
      v29 = v27;
    else
      v29 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 325, v29);
    free(v28);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  v6 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v6 = __THREAD_SLOT_KEY;
  }
  v7 = pthread_getspecific(v6);
  HIDWORD(v9) = qos_class_self() - 9;
  LODWORD(v9) = HIDWORD(v9);
  v8 = v9 >> 2;
  if (v8 > 6)
    v10 = 0;
  else
    v10 = dword_1B8630ED0[v8];
  v11 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(_QWORD *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(_BYTE *)(a1 + 796))
    goto LABEL_10;
  if (v10 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v10 + 648))
    {
LABEL_10:
      db_rwlock_wait(a1 + 584, v10, 2);
      goto LABEL_11;
    }
    v21 = v10 - 1;
    v22 = (uint64_t *)(a1 + 16 * v10 + 664);
    while (v21 != 4)
    {
      v23 = *v22;
      v22 += 2;
      ++v21;
      if (v23)
      {
        if (v21 <= 4)
          goto LABEL_10;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 768) = pthread_self();
LABEL_11:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v11)
  {
    v30 = *__error();
    v31 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v33 = "db2_perform_callback";
      v34 = 1024;
      v35 = 13031;
      v36 = 1024;
      v37 = v11;
      _os_log_error_impl(&dword_1B8270000, v31, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
    }
    *__error() = v30;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13031);
  }
  if (v7)
    v12 = CIOnThreadCleanUpPush((uint64_t)v7 - 1, (uint64_t)db_write_unlock, a1 + 584);
  else
    v12 = -1;
  a2(a3);
  v13 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_DWORD *)(a1 + 788) = 0;
  v14 = *(pthread_override_s **)(a1 + 760);
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  v15 = *(_DWORD *)(a1 + 780) != 0;
  *(_BYTE *)(a1 + 796) = 0;
  db_rwlock_wakeup(a1 + 584, v15, 0);
  result = pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v14)
    result = pthread_override_qos_class_end_np(v14);
  if (v13)
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 13036);
  if (v7)
  {
    result = CIOnThreadCleanUpClearItem((uint64_t)v7 - 1, v12);
    v17 = &threadData[18 * ((uint64_t)v7 - 1)];
    v20 = v17[14];
    v18 = v17 + 14;
    v19 = v20;
    if (v12 + 1 == v20)
      *v18 = v19 - 1;
  }
  return result;
}

BOOL db_is_dirty(int *a1)
{
  uint64_t v2;
  pthread_rwlock_t *v3;
  unint64_t v4;
  int *v5;
  unint64_t v6;
  int v7;
  int v8;
  _BOOL8 v9;
  int v11;
  NSObject *v12;
  int v13;
  char *v14;
  char *v15;
  const char *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v11 = *__error();
    v12 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = *a1;
      *(_DWORD *)buf = 136315650;
      v18 = "db_is_dirty";
      v19 = 1024;
      v20 = 257;
      v21 = 1024;
      v22 = v13;
      _os_log_error_impl(&dword_1B8270000, v12, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v11;
    v14 = __si_assert_copy_extra_268();
    v15 = v14;
    if (v14)
      v16 = v14;
    else
      v16 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 257, v16);
    free(v15);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if ((a1[1] & 1) != 0)
    return 0;
  v2 = *((_QWORD *)a1 + 116);
  v3 = (pthread_rwlock_t *)(v2 + 8);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(v2 + 8));
  v4 = *(unsigned int *)(v2 + 220);
  if ((int)v4 < 1)
  {
    v9 = 0;
  }
  else
  {
    v5 = (int *)(v2 + 288);
    v6 = 1;
    do
    {
      v8 = *v5;
      v5 += 12;
      v7 = v8;
      v9 = v8 != 0;
      if (v6 >= v4)
        break;
      ++v6;
    }
    while (!v7);
  }
  pthread_rwlock_unlock(v3);
  return v9;
}

uint64_t _si_store_propery_cache(uint64_t result, _DWORD **a2, int a3)
{
  uint64_t v3;
  const __CFData *Data;
  unsigned __int8 *BytePtr;
  CFIndex Length;
  __n128 v9;
  int v10;
  int v11;
  int v12;
  NSObject *v13;
  _DWORD *v14;
  int v15;
  int v16;
  NSObject *v17;
  _DWORD *indexmetadata;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  CFIndex v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v3 = result;
    if (*(_BYTE *)(result + 2460))
    {
      if (*(_QWORD *)(result + 1184) && (*(_BYTE *)(result + 828) & 4) == 0)
      {
        if (a2)
        {
          indexmetadata = *a2;
          if (!indexmetadata)
            return result;
        }
        else
        {
          pthread_mutex_lock((pthread_mutex_t *)(result + 1504));
          indexmetadata = si_create_indexmetadata(v3, 0);
          if (!indexmetadata)
            return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 1504));
        }
        Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(CFPropertyListRef *)(v3 + 1496), kCFPropertyListXMLFormat_v1_0, 0, 0);
        BytePtr = (unsigned __int8 *)CFDataGetBytePtr(Data);
        Length = CFDataGetLength(Data);
        v10 = db_add_field(*(int **)(v3 + 1184), &indexmetadata, 1u, "kMDStoreProperties", 0, 0x108u, 14, BytePtr, v9, Length);
        if (v10)
        {
          v11 = v10;
          v12 = *__error();
          v13 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316162;
            v20 = "_si_store_propery_cache";
            v21 = 1024;
            v22 = 15631;
            v23 = 2080;
            v24 = "kMDStoreProperties";
            v25 = 2048;
            v26 = Length;
            v27 = 1024;
            v28 = v11;
            _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: Failed to add field \"%s\", length:%ld, rc:%d", buf, 0x2Cu);
          }
          *__error() = v12;
        }
        v14 = indexmetadata;
        if (a2)
          *a2 = indexmetadata;
        CFRelease(Data);
        result = db_store_obj(*(_QWORD *)(v3 + 1184), (uint64_t)v14, 12);
        v15 = result;
        if (a3 && !(_DWORD)result)
        {
          result = si_set_obj_state((os_unfair_lock_s *)v3, *(_QWORD *)(v3 + 1184));
          v15 = result;
        }
        if (v15)
        {
          v16 = *__error();
          v17 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            v20 = "_si_store_propery_cache";
            v21 = 1024;
            v22 = 15643;
            v23 = 2080;
            v24 = "kMDStoreProperties";
            v25 = 1024;
            LODWORD(v26) = v15;
            _os_log_error_impl(&dword_1B8270000, v17, OS_LOG_TYPE_ERROR, "%s:%d: Failed to store the dbo for field \"%s\", rc:%d", buf, 0x22u);
          }
          result = (uint64_t)__error();
          *(_DWORD *)result = v16;
        }
        *(_BYTE *)(v3 + 2460) = 0;
        if (!a2)
        {
          free(v14);
          return pthread_mutex_unlock((pthread_mutex_t *)(v3 + 1504));
        }
      }
    }
  }
  return result;
}

uint64_t _copyRemappings(_QWORD *a1)
{
  const __CFArray *v2;
  CFArrayRef Copy;

  v2 = *(const __CFArray **)(*a1 + 2368);
  if (v2)
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v2);
  else
    Copy = 0;
  a1[1] = Copy;
  return 0;
}

uint64_t si_scheduler_resume(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  _opaque_pthread_t *v8;
  pthread_override_s *v9;
  char *v10;
  char *v11;
  const char *v12;
  uint64_t v13;

  if (result)
  {
    v5 = result;
    pthread_mutex_lock(*(pthread_mutex_t **)(result + 8));
    v6 = *(_DWORD *)(v5 + 100);
    if (!v6)
    {
      v10 = __si_assert_copy_extra_521(-1);
      v11 = v10;
      v12 = "";
      if (v10)
        v12 = v10;
      __message_assert("%s:%u: failed assertion '%s' %s ", "SIScheduler.c", 1138, "scheduler->suspended", v12);
      free(v11);
      if (__valid_fs(-1))
        v13 = 2989;
      else
        v13 = 3072;
      *(_DWORD *)v13 = -559038737;
      abort();
    }
    v7 = v6 - 1;
    *(_DWORD *)(v5 + 100) = v7;
    if (!v7)
    {
      pthread_cond_broadcast(*(pthread_cond_t **)(v5 + 16));
      dispatch_resume(*(dispatch_object_t *)(v5 + 136));
      *(_QWORD *)(v5 + 144) = a2;
      *(_DWORD *)(v5 + 152) = a3;
    }
    v8 = *(_opaque_pthread_t **)(v5 + 160);
    if (v8 == pthread_self() || !*(_DWORD *)(v5 + 100))
    {
      *(_QWORD *)(v5 + 160) = 0;
      v9 = *(pthread_override_s **)(v5 + 176);
      if (v9)
        pthread_override_qos_class_end_np(v9);
      *(_QWORD *)(v5 + 176) = 0;
      *(_DWORD *)(v5 + 184) = 0;
    }
    return pthread_mutex_unlock(*(pthread_mutex_t **)(v5 + 8));
  }
  return result;
}

uint64_t _SISyncFinishedCallback()
{
  return 0;
}

uint64_t _SIPreSyncCallback()
{
  return 0;
}

uint64_t _fd_open(uint64_t a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, __n128 a9)
{
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int *v18;
  NSObject *v19;
  int v20;
  int v22;
  uint8_t buf[4];
  char *v24;
  __int16 v25;
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  a9.n128_u64[0] = 136315394;
  while (1)
  {
    v14 = a5 ? si_openat_protected(a1, a2, a3, a5) : _safe_open_at(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0x180u);
    v15 = v14;
    if (a4)
    {
      if ((_DWORD)v14 != -1)
        break;
    }
    if ((_DWORD)v14 != -1 || !g_prot_error_callback)
      return v15;
    v16 = *__error();
    if (gSILogLevels[0] >= 5)
    {
      v22 = *__error();
      v19 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v20 = *__error();
        *(_DWORD *)buf = 136315394;
        v24 = a2;
        v25 = 1024;
        v26 = v20;
        _os_log_impl(&dword_1B8270000, v19, OS_LOG_TYPE_DEFAULT, "~~~~########### file error %s %d", buf, 0x12u);
      }
      *__error() = v22;
    }
    v17 = g_prot_error_callback;
    v18 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v17 + 16))(v17, a1, *v18, 15) & 1) == 0)
    {
      *__error() = v16;
      return 0xFFFFFFFFLL;
    }
  }
  fcntl(v14, 48, 1);
  fcntl(v15, 76, 1);
  return v15;
}

uint64_t _safe_open_at(uint64_t a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, __n128 a9, unsigned __int16 a10)
{
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  int *v16;
  NSObject *v17;
  int v18;
  int v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  int *v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  NSObject *v28;
  const __CFAllocator *v29;
  __CFBag *Mutable;
  int v31;
  int v32;
  CFStringRef v33;
  NSObject *v34;
  char *v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  NSObject *v46;
  os_log_type_t v47;
  int v48;
  uint64_t v49;
  char *v50;
  char *v51;
  const char *v52;
  uint64_t v53;
  int v54;
  __n128 v55;
  __int128 v56;
  _QWORD v57[6];
  int v58;
  _BYTE v59[14];
  __int16 v60;
  _QWORD v61[5];
  int v62;
  char *v63;
  __int16 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x200) != 0)
  {
    bzero(&v62, 0x400uLL);
    if (fcntl(a1, 50, &v62) < 0 || !(_BYTE)v62)
    {
      v26 = *__error();
      v27 = *__error();
      v28 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v58 = 136316418;
        *(_QWORD *)v59 = "_safe_open_at";
        *(_WORD *)&v59[8] = 1024;
        *(_DWORD *)&v59[10] = 1342;
        v60 = 1024;
        LODWORD(v61[0]) = a1;
        WORD2(v61[0]) = 2080;
        *(_QWORD *)((char *)v61 + 6) = a2;
        HIWORD(v61[1]) = 2048;
        v61[2] = a3;
        LOWORD(v61[3]) = 1024;
        *(_DWORD *)((char *)&v61[3] + 2) = v26;
        _os_log_error_impl(&dword_1B8270000, v28, OS_LOG_TYPE_ERROR, "%s:%d: faccurate_realpath() failed, parent_fd:%d, path:%s, flags:0x%lx, errno:%d\n", (uint8_t *)&v58, 0x32u);
      }
    }
    else
    {
      if ((unsigned __int16)v62 != 47)
      {
        v13 = a10;
        goto LABEL_7;
      }
      v27 = *__error();
      v34 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        v58 = 136316162;
        *(_QWORD *)v59 = "_safe_open_at";
        *(_WORD *)&v59[8] = 1024;
        *(_DWORD *)&v59[10] = 1346;
        v60 = 2080;
        v61[0] = &v62;
        LOWORD(v61[1]) = 2080;
        *(_QWORD *)((char *)&v61[1] + 2) = a2;
        WORD1(v61[2]) = 2048;
        *(_QWORD *)((char *)&v61[2] + 4) = a3;
        _os_log_error_impl(&dword_1B8270000, v34, OS_LOG_TYPE_ERROR, "%s:%d: Invalid parent path, currentPath:%s, path:%s, flags:0x%lx\n", (uint8_t *)&v58, 0x30u);
      }
      v26 = 22;
    }
    *__error() = v27;
    *__error() = v26;
    return 0xFFFFFFFFLL;
  }
  v13 = 0;
LABEL_7:
  a9.n128_u64[0] = 136315394;
  v55 = a9;
  while (1)
  {
    result = openat(a1, a2, a3, v13);
    if ((_DWORD)result != -1)
      break;
    v15 = g_prot_error_callback;
    if (!g_prot_error_callback)
      break;
    if (gSILogLevels[0] >= 5)
    {
      LODWORD(v56) = *__error();
      v17 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *__error();
        v62 = v55.n128_u32[0];
        v63 = a2;
        v64 = 1024;
        v65 = v18;
        _os_log_impl(&dword_1B8270000, v17, OS_LOG_TYPE_DEFAULT, "~~~~########### file error %s %d", (uint8_t *)&v62, 0x12u);
      }
      *__error() = v56;
      v15 = g_prot_error_callback;
    }
    v16 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v15 + 16))(v15, a1, *v16, 13) & 1) == 0)
      goto LABEL_17;
  }
  if ((_DWORD)result == -1)
  {
LABEL_17:
    LODWORD(v56) = *__error();
    if ((v56 - 23) > 1)
      goto LABEL_32;
    v19 = *__error();
    v20 = _SILogForLogForCategory(0);
    v21 = gSILogLevels[0] < 3;
    if (os_log_type_enabled(v20, (os_log_type_t)(gSILogLevels[0] < 3)))
    {
      v62 = 67109120;
      LODWORD(v63) = v56;
      _os_log_impl(&dword_1B8270000, v20, v21, "*warn* too many open files, err: %d, closing inactive and trying again", (uint8_t *)&v62, 8u);
    }
    *__error() = v19;
    _fd_close_inactive(0xFFFFFFFFLL, 0, 0, 0);
    while (1)
    {
      result = openat(a1, a2, a3, v13);
      if ((_DWORD)result != -1)
        break;
      v22 = g_prot_error_callback;
      if (!g_prot_error_callback)
        break;
      if (gSILogLevels[0] >= 5)
      {
        v54 = *__error();
        v24 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          v25 = *__error();
          v62 = v55.n128_u32[0];
          v63 = a2;
          v64 = 1024;
          v65 = v25;
          _os_log_impl(&dword_1B8270000, v24, OS_LOG_TYPE_DEFAULT, "~~~~########### file error %s %d", (uint8_t *)&v62, 0x12u);
        }
        *__error() = v54;
        v22 = g_prot_error_callback;
      }
      v23 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v22 + 16))(v22, a1, *v23, 14) & 1) == 0)
        goto LABEL_32;
    }
    if ((_DWORD)result == -1)
    {
LABEL_32:
      if ((_DWORD)v56 == 23)
      {
        v35 = __si_assert_copy_extra_521(-1);
        v36 = v35;
        v37 = "";
        if (v35)
          v37 = v35;
        __message_assert("%s:%u: failed assertion '%s' %s Too many open files in system %d", "fd_obj.c", 1453, "false", v37, 23);
        free(v36);
        if (!__valid_fs(-1))
          goto LABEL_62;
        goto LABEL_50;
      }
      if ((_DWORD)v56 == 24)
      {
        v29 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        Mutable = CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B388]);
        bzero(&v62, 0x400uLL);
        if (gOpenLimit < 1)
        {
          v32 = 0;
        }
        else
        {
          v31 = 0;
          v32 = 0;
          do
          {
            if ((fcntl(v31, 50, &v62) & 0x80000000) == 0 && (_BYTE)v62)
            {
              v33 = CFStringCreateWithCString(v29, (const char *)&v62, 0x8000100u);
              CFBagAddValue(Mutable, v33);
              CFRelease(v33);
              ++v32;
            }
            ++v31;
          }
          while (v31 < gOpenLimit);
        }
        v39 = MEMORY[0x1BCCAF3E4](Mutable);
        MEMORY[0x1E0C80A78](v39);
        v41 = (uint64_t *)((char *)&v53 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
        bzero(v41, v40);
        CFBagGetValues(Mutable, (const void **)v41);
        v57[0] = MEMORY[0x1E0C809B0];
        v57[1] = 0x40000000;
        v57[2] = ___safe_open_at_block_invoke;
        v57[3] = &__block_descriptor_tmp_28_6379;
        v57[4] = Mutable;
        qsort_b(v41, v39, 8uLL, v57);
        pthread_mutex_lock(&g_fd_lock);
        if (v32 >= 1)
        {
          v43 = 0;
          v44 = v32;
          *(_QWORD *)&v42 = 67109378;
          v56 = v42;
          do
          {
            if (*v41 != v43)
            {
              v45 = *__error();
              v46 = _SILogForLogForCategory(0);
              v47 = gSILogLevels[0] < 3;
              if (os_log_type_enabled(v46, (os_log_type_t)(gSILogLevels[0] < 3)))
              {
                v48 = MEMORY[0x1BCCAF3F0](Mutable, *v41);
                v49 = *v41;
                v58 = v56;
                *(_DWORD *)v59 = v48;
                *(_WORD *)&v59[4] = 2112;
                *(_QWORD *)&v59[6] = v49;
                _os_log_impl(&dword_1B8270000, v46, v47, "*warn* (%d) - %@", (uint8_t *)&v58, 0x12u);
              }
              *__error() = v45;
              v43 = *v41;
            }
            ++v41;
            --v44;
          }
          while (v44);
        }
        pthread_mutex_unlock(&g_fd_lock);
        CFRelease(Mutable);
        v50 = __si_assert_copy_extra_521(-1);
        v51 = v50;
        v52 = "";
        if (v50)
          v52 = v50;
        __message_assert("%s:%u: failed assertion '%s' %s Too many open files %d (%d) (%d)", "fd_obj.c", 1450, "false", v52, 24, v32, 0);
        free(v51);
        if (!__valid_fs(-1))
        {
LABEL_62:
          v38 = 3072;
LABEL_63:
          *(_DWORD *)v38 = -559038737;
          abort();
        }
LABEL_50:
        v38 = 2989;
        goto LABEL_63;
      }
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t SIFetchCSClientState(uint64_t a1, void *a2, const void *a3, int a4, void (**a5)(_QWORD, _QWORD, _QWORD))
{
  pthread_rwlock_t *v10;
  const __CFDictionary *Value;
  const __CFDictionary *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  int v15;
  NSObject *v16;
  CFArrayRef v17;
  _QWORD *v18;
  void *v19;
  CFArrayRef v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *values;
  uint8_t buf[4];
  void *v27;
  __int16 v28;
  const void *v29;
  __int16 v30;
  const __CFArray *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  values = a2;
  v10 = (pthread_rwlock_t *)(a1 + 80);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 80));
  Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 72), CFSTR("clientStates"));
  if (Value)
  {
    v12 = (const __CFDictionary *)CFDictionaryGetValue(Value, a2);
    if (v12)
    {
      v13 = (const __CFArray *)CFDictionaryGetValue(v12, a3);
      if (v13)
      {
        v14 = v13;
        CFRetain(v13);
        pthread_rwlock_unlock(v10);
        v15 = *__error();
        v16 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          v27 = a2;
          v28 = 2112;
          v29 = a3;
          v30 = 2112;
          v31 = v14;
          _os_log_impl(&dword_1B8270000, v16, OS_LOG_TYPE_DEFAULT, "Found cached client state %@ %@ %@", buf, 0x20u);
        }
        *__error() = v15;
        ((void (**)(_QWORD, const __CFArray *, _QWORD))a5)[2](a5, v14, 0);
        v17 = v14;
LABEL_18:
        CFRelease(v17);
        return 0;
      }
    }
  }
  pthread_rwlock_unlock(v10);
  if (!a4)
  {
    v18 = malloc_type_calloc(1uLL, 0x20uLL, 0xE0040B6E8BBF2uLL);
    v18[2] = CFRetain(a2);
    v18[3] = CFRetain(a3);
    v19 = _Block_copy(a5);
    *v18 = a1;
    v18[1] = v19;
    v20 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 1320));
    v21 = *(_QWORD *)(a1 + 1144);
    if (v21 && si_peek_queue_for_tags(v21, (uint64_t)v20))
    {
      si_enqueue_work(*(_QWORD *)(a1 + 1144), (uint64_t)si_fetchClientState, (uint64_t)v18);
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1320));
    }
    else
    {
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1320));
      v22 = *(_QWORD *)(a1 + 1048);
      if (v22 && si_peek_queue_for_tags(v22, (uint64_t)v20))
        v23 = *(_QWORD *)(a1 + 1048);
      else
        v23 = *(_QWORD *)(a1 + 1080);
      si_enqueue_work(v23, (uint64_t)si_fetchClientState, (uint64_t)v18);
    }
    v17 = v20;
    goto LABEL_18;
  }
  a5[2](a5, 0, 1);
  return 0;
}

uint64_t ContentIndexQueryNodeEquals(float *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  size_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;

  if (a1 == (float *)a2)
    return 1;
  if (*((_DWORD *)a1 + 2) != *(_DWORD *)(a2 + 8))
    return 0;
  v4 = *(unsigned int *)a1;
  if ((_DWORD)v4 != *(_DWORD *)a2
    || a1[3] != *(float *)(a2 + 12)
    || a1[4] != *(float *)(a2 + 16)
    || *((_DWORD *)a1 + 1) != *(_DWORD *)(a2 + 4))
  {
    return 0;
  }
  if ((int)v4 < 1)
  {
    return 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = LODWORD(a1[4 * v5 + 6]);
      if ((_DWORD)v7 != *(_DWORD *)(a2 + 16 * v5 + 24))
        break;
      if ((int)v7 >= 1)
      {
        v8 = *(_QWORD *)&a1[4 * v5 + 8];
        v9 = *(_QWORD *)(a2 + 16 * v5 + 32);
        while (*(_DWORD *)(v8 + 24) == *(_DWORD *)(v9 + 24))
        {
          v10 = *(int *)(v8 + 20);
          if ((_DWORD)v10 != *(_DWORD *)(v9 + 20))
            break;
          v11 = *(_DWORD *)(v8 + 16);
          if (v11 != *(_DWORD *)(v9 + 16))
            break;
          v12 = *(unsigned int *)(v8 + 60);
          if ((_DWORD)v12 != *(_DWORD *)(v9 + 60))
            break;
          if ((v11 & 0x10) != 0)
          {
            v13 = *(_DWORD *)(v8 + 60) & 3;
            v14 = -1;
            if (v13 != 3)
            {
              v15 = (v12 >> 2) & 3;
              if ((_DWORD)v15 != 3)
                v14 = (vector_dimension_vec_sizes_10743[v13] * vector_size_elem_sizes_10742[v15]);
            }
            if (memcmp(*(const void **)v8, *(const void **)v9, v14))
              break;
          }
          if ((v11 & 0x600) != 0 && memcmp(*(const void **)v8, *(const void **)v9, 8 * v10))
            break;
          if ((v11 & 0x610) == 0 && strcmp(*(const char **)v8, *(const char **)v9))
            break;
          v16 = *(const char **)(v8 + 8);
          v17 = *(const char **)(v9 + 8);
          if (v16 != v17 && (!v16 || !v17 || strcmp(v16, v17)))
            break;
          v8 += 64;
          v9 += 64;
          if (!--v7)
            goto LABEL_30;
        }
        return v6;
      }
LABEL_30:
      v6 = ++v5 >= v4;
    }
    while (v5 != v4);
  }
  return v6;
}

uint64_t UInt64RefHashCallback(uint64_t a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  v1 = HIDWORD(a1) - a1 - 8;
  v2 = (a1 - (HIDWORD(a1) - a1) - 1640531527) ^ (v1 << 8);
  v3 = (16 - (HIDWORD(a1) - a1) - v2) ^ (v2 >> 13);
  v4 = (v1 - v2 - v3) ^ (v3 >> 12);
  v5 = (v2 - v3 - v4) ^ (v4 << 16);
  v6 = (v3 - v4 - v5) ^ (v5 >> 5);
  v7 = (v4 - v5 - v6) ^ (v6 >> 3);
  return (v6 - v7 - ((v5 - v6 - v7) ^ (v7 << 10))) ^ (((v5 - v6 - v7) ^ (v7 << 10)) >> 15);
}

uint64_t MurmurHash3_x86_32(uint64_t a1, int a2)
{
  int v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unint64_t v10;
  int v11;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;

  v2 = -1759636613;
  if (a2 >= 0)
    v3 = a2;
  else
    v3 = a2 + 3;
  v4 = (unsigned __int8 *)(a1 + (int)(v3 & 0xFFFFFFFC));
  if ((a2 + 3) >= 7)
  {
    v7 = -(v3 >> 2);
    v8 = -1789642873;
    v9 = 718793509;
    do
    {
      v8 = 5 * v8 + 2071795100;
      v9 = 5 * v9 + 1808688022;
      HIDWORD(v10) = *(_DWORD *)&v4[4 * v7] * v8;
      LODWORD(v10) = HIDWORD(v10);
      v11 = (v10 >> 21) * v9;
      HIDWORD(v10) = v2;
      LODWORD(v10) = v2;
      v2 = v11 ^ (5 * (v10 >> 19) + 1390208809);
    }
    while (!__CFADD__(v7++, 1));
    v6 = 5 * v8 + 2071795100;
    v5 = 5 * v9 + 1808688022;
  }
  else
  {
    v5 = 1107688271;
    v6 = 1713515327;
  }
  v13 = 0;
  v14 = a2 & 3;
  switch(v14)
  {
    case 1:
      goto LABEL_15;
    case 2:
LABEL_14:
      v13 |= v4[1] << 8;
LABEL_15:
      HIDWORD(v15) = (v13 ^ *v4) * v6;
      LODWORD(v15) = HIDWORD(v15);
      v16 = (v15 >> 21) * v5;
      HIDWORD(v15) = v2;
      LODWORD(v15) = v2;
      v2 = v16 ^ (5 * (v15 >> 19) + 1390208809);
      break;
    case 3:
      v13 = v4[2] << 16;
      goto LABEL_14;
  }
  v17 = -1028477387 * ((-2048144789 * (v2 ^ a2)) ^ ((-2048144789 * (v2 ^ a2)) >> 13));
  return v17 ^ HIWORD(v17);
}

uint64_t PartialQueryResults::start(PartialQueryResults *this, int a2, unsigned __int16 a3, unint64_t a4, uint64_t a5)
{
  char *v7;
  char *v8;
  uint64_t Mutable;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a4 >= 0xFFFFFFFF)
    goto LABEL_9;
  v7 = (char *)this + 464;
  v8 = (char *)this + 8 * a5 + 1488;
  if (!*(_QWORD *)v8)
  {
    Mutable = _MDPlistBytesCreateMutable();
    *(_QWORD *)v8 = Mutable;
    if (!Mutable)
      goto LABEL_9;
  }
  _MDPlistBytesBeginPlist();
  _MDPlistBytesBeginArray();
  _MDPlistBytesAddNull();
  if (*(_QWORD *)&v7[8 * a5])
  {
    if (*((_QWORD *)this + a5 + 443))
    {
LABEL_9:
      v11 = __si_assert_copy_extra_268();
      __message_assert_272((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, (char)"SISearchCtx.h");
      free(v11);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
  }
  else
  {
    *(_QWORD *)&v7[8 * a5] = _MDStoreOIDArrayCreateMutable();
    *((_QWORD *)this + a5 + 443) = 0;
  }
  _MDStoreOIDArrayBeginSequence();
  _MDStoreOIDArrayBeginBulkAdd();
  return *(_QWORD *)v8;
}

void SISynchedOpPropagatingPriority(uint64_t a1, int a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  _QWORD *v7;
  void *v8;

  if (a1 && *(_QWORD *)(a1 + 1048))
  {
    v7 = malloc_type_malloc(0x20uLL, 0x10A0040D5506429uLL);
    v7[1] = a1;
    v7[2] = a3;
    *v7 = a4;
    *((_DWORD *)v7 + 6) = a2;
    if (a2 == 1)
      v8 = delayed_op_final;
    else
      v8 = delayed_op_prop0;
    si_enqueue_work_for_job(*(_QWORD *)(a1 + 1096), (uint64_t)v8, (uint64_t)v7, 0);
  }
  else
  {
    a3(a4, 1);
  }
}

char *__db_sanitize_query_tree_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t v4;
  CFAbsoluteTime v5;
  void *v6;
  size_t v7;
  char *v9;
  uint8_t buf[8];
  uint64_t v11;
  uint64_t (*v12)(uint64_t, char *, size_t, CFAbsoluteTime);
  void *v13;
  uint64_t v14;
  char __s;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[31];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (!v4)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = si_calendar_retain();
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  v45 = 0u;
  memset(v46, 0, sizeof(v46));
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v29 = 0u;
  v28 = 0u;
  v27 = 0u;
  v26 = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v21 = 0u;
  v20 = 0u;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v9 = 0;
  __s = 0;
  v5 = *(double *)(a1 + 40);
  if (*(_BYTE *)(a1 + 48))
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v11 = 0x40000000;
    v12 = __expandFunctionsISO8601_block_invoke;
    v13 = &__block_descriptor_tmp_8_3882;
    v14 = v4;
    if (_expandFunctions(a2, &__s, 0x200uLL, v4, (uint64_t)buf, v5) == 0x10000)
    {
      asprintf(&v9, "$time.iso(%s)", &__s);
      return v9;
    }
  }
  else
  {
    _expandFunctions(a2, &__s, 0x200uLL, v4, (uint64_t)&__block_literal_global_3_3861, v5);
  }
  v7 = strlen(&__s);
  v6 = malloc_type_zone_malloc((malloc_zone_t *)queryZone, v7 + 1, 0x6085D6BuLL);
  if (!v6 && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "allocation function returned null", buf, 2u);
  }
  memcpy(v6, &__s, v7);
  *((_BYTE *)v6 + v7) = 0;
  return (char *)v6;
}

uint64_t _expandFunctions(const char *a1, char *a2, size_t a3, uint64_t a4, uint64_t a5, CFAbsoluteTime a6)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  unint64_t v28;
  int v29;
  unsigned __int8 *v30;
  _BYTE *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  char v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  char v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  char v58;
  int v59;
  unint64_t v60;
  char v61;
  char v62;
  int v63;
  _BOOL4 v64;
  int v65;
  unsigned int v66;
  char v67;
  unsigned int v68;
  char *v69;
  int v70;
  int v71;
  int v72;
  NSObject *v73;
  os_log_type_t v74;
  double v75;
  int v76;
  int v77;
  double v78;
  int v79;
  int OrdinalityOfUnit;
  _BYTE *v81;
  int v82;
  unsigned int v83;
  char v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  char v88;
  unsigned int v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  int v92;
  _BOOL4 v93;
  int v94;
  unsigned __int8 *v95;
  int v96;
  unsigned __int8 *v98;
  int v99;
  int v100;
  char v101;
  unsigned int v102;
  char v103;
  int v104;
  unsigned int v105;
  char v106;
  unsigned int v107;
  int v108;
  int v109;
  __CFCalendar *v110;
  int v111;
  NSObject *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  CFAbsoluteTime v117;
  _BYTE at[12];
  __int16 v119;
  char *v120;
  __int16 v121;
  const char *v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v117 = 0.0;
  *a2 = 0;
  if (strncmp(a1, "time.", 5uLL))
  {
LABEL_2:
    *(_WORD *)a2 = 36;
    strlcat(a2, a1, a3);
    return 0;
  }
  if (!strncmp(a1 + 5, "absolute(", 9uLL))
  {
    *(_QWORD *)at = a1 + 14;
    v117 = strtod(a1 + 14, (char **)at);
    if (*(const char **)at == a1 + 14)
      goto LABEL_105;
    goto LABEL_202;
  }
  if (!strncmp(a1 + 5, "iso(", 4uLL))
  {
    v19 = 0;
    v20 = (unsigned __int8 *)(a1 + 9);
    v21 = a1 + 8;
    while (v20[v19] && v20[v19] != 41)
      ++v19;
    v22 = v19 + 9;
    if ((unint64_t)(v19 + 9) >= 0xA)
    {
      v23 = v19;
      while (1)
      {
        v24 = *v20;
        v25 = v24 > 0x20;
        v26 = (1 << v24) & 0x100000600;
        if (v25 || v26 == 0)
          break;
        ++v20;
        if (!--v23)
          goto LABEL_105;
      }
    }
    v28 = (unint64_t)&a1[v22];
    if (v20 == (unsigned __int8 *)&a1[v22])
      goto LABEL_105;
    v29 = *v20;
    if (v29 == 39)
    {
      v30 = v20 + 1;
      v31 = v20 + 1;
      if ((unint64_t)(v20 + 1) < v28)
      {
        v33 = (unsigned __int8 *)&v21[v19];
        v31 = v20 + 1;
        while (*v31 != 39)
        {
          ++v31;
          if (v33 == ++v20)
          {
LABEL_47:
            v31 = (_BYTE *)v28;
            break;
          }
        }
      }
    }
    else
    {
      if (v29 != 34)
      {
        v34 = v28 - (_QWORD)v20;
        v30 = v20;
        goto LABEL_51;
      }
      v30 = v20 + 1;
      v31 = v20 + 1;
      if ((unint64_t)(v20 + 1) < v28)
      {
        v32 = v21 - (const char *)v20 + v19;
        v31 = v30;
        while (*v31 != 34)
        {
          ++v31;
          if (!--v32)
            goto LABEL_47;
        }
      }
    }
    if (v31 == (_BYTE *)v28)
      goto LABEL_105;
    v34 = v31 - v30;
LABEL_51:
    if (!v34)
      goto LABEL_105;
    v35 = (unint64_t)&v30[v34];
    if (v34 < 1)
    {
      v45 = 0;
      v43 = v30;
    }
    else
    {
      v36 = *v30;
      v37 = v36 - 48;
      v38 = 10 * v36 - 480;
      if (v37 >= 0xA)
        v38 = 0;
      v39 = v30[1] - 48;
      if (v39 >= 0xA)
        v39 = 0;
      v40 = v38 + v39;
      v41 = v30[2] - 48;
      if (v41 >= 0xA)
        v41 = 0;
      v42 = v41 + 10 * v40;
      v43 = v30 + 4;
      v44 = v30[3] - 48;
      if (v44 >= 0xA)
        v44 = 0;
      v45 = v44 + 10 * v42;
    }
    if ((unint64_t)v43 < v35 && *v43 == 45)
      ++v43;
    if ((unint64_t)v43 >= v35)
    {
      v51 = 0;
    }
    else
    {
      v46 = *v43;
      v47 = v46 - 48;
      v48 = 10 * v46 + 32;
      if (v47 >= 0xA)
        v48 = 0;
      v49 = v43[1];
      v43 += 2;
      v50 = v49 - 48;
      if (v50 >= 0xA)
        LOBYTE(v50) = 0;
      v51 = (char)(v50 + v48);
    }
    if ((unint64_t)v43 < v35 && *v43 == 45)
      ++v43;
    if ((unint64_t)v43 >= v35)
    {
      v57 = 0;
    }
    else
    {
      v52 = *v43;
      v53 = v52 - 48;
      v54 = 10 * v52 + 32;
      if (v53 >= 0xA)
        v54 = 0;
      v55 = v43[1];
      v43 += 2;
      v56 = v55 - 48;
      if (v56 >= 0xA)
        LOBYTE(v56) = 0;
      v57 = (char)(v56 + v54);
    }
    if ((unint64_t)v43 >= v35)
    {
      v58 = 0;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      goto LABEL_197;
    }
    v58 = 0;
    v60 = (unint64_t)(v43 + 1);
    v59 = *v43;
    if ((v59 - 32) > 0x3A)
    {
      v61 = 0;
      v62 = 0;
      v63 = 0;
      v64 = 0;
      goto LABEL_197;
    }
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    if (((1 << (v59 - 32)) & 0x410000000000001) == 0)
      goto LABEL_197;
    if (v60 >= v35)
    {
      v58 = 0;
    }
    else
    {
      v65 = v43[1];
      v66 = v65 - 48;
      v67 = 10 * v65 + 32;
      if (v66 >= 0xA)
        v67 = 0;
      v60 = (unint64_t)(v43 + 3);
      v68 = v43[2] - 48;
      if (v68 >= 0xA)
        LOBYTE(v68) = 0;
      v58 = v68 + v67;
    }
    if (v60 < v35)
    {
      v81 = (_BYTE *)(v60 + 1);
      if (*(_BYTE *)v60 == 58)
      {
        if ((unint64_t)v81 >= v35)
        {
          v61 = 0;
        }
        else
        {
          v82 = *(unsigned __int8 *)(v60 + 1);
          v83 = v82 - 48;
          v84 = 10 * v82 + 32;
          if (v83 >= 0xA)
            v84 = 0;
          v81 = (_BYTE *)(v60 + 3);
          v85 = *(unsigned __int8 *)(v60 + 2) - 48;
          if (v85 >= 0xA)
            LOBYTE(v85) = 0;
          v61 = v85 + v84;
        }
        if ((unint64_t)v81 < v35)
        {
          v60 = (unint64_t)(v81 + 1);
          if (*v81 == 58)
          {
            v86 = v81[1];
            v87 = v86 - 48;
            v88 = 10 * v86 + 32;
            if (v87 >= 0xA)
              v88 = 0;
            v60 = (unint64_t)(v81 + 3);
            v89 = v81[2] - 48;
            if (v89 >= 0xA)
              LOBYTE(v89) = 0;
            v62 = v89 + v88;
            goto LABEL_154;
          }
          goto LABEL_130;
        }
      }
      else
      {
        v61 = 0;
      }
      v62 = 0;
      v60 = (unint64_t)v81;
      goto LABEL_154;
    }
    v61 = 0;
LABEL_130:
    v62 = 0;
LABEL_154:
    if (v60 >= v35)
    {
      v93 = 0;
    }
    else if (*(_BYTE *)v60 == 32)
    {
      v90 = &v30[v34];
      v91 = &v90[~v60];
      while (v91)
      {
        v92 = *(unsigned __int8 *)++v60;
        --v91;
        if (v92 != 32)
          goto LABEL_163;
      }
      v60 = (unint64_t)v90;
LABEL_163:
      v93 = v60 < v35;
    }
    else
    {
      v93 = 1;
    }
    if (v59 != 84)
      v93 = 0;
    if (v59 == 32 || v93)
    {
      v94 = *(unsigned __int8 *)v60;
      v64 = v94 == 90;
      if (v94 == 90)
        v95 = (unsigned __int8 *)(v60 + 1);
      else
        v95 = (unsigned __int8 *)v60;
      v96 = *v95;
      if (v96 == 45 || v96 == 43)
        v98 = v95 + 1;
      else
        v98 = v95;
      if ((unint64_t)v98 >= v35)
      {
        v63 = 0;
      }
      else
      {
        v99 = 0;
        v100 = *v98;
        if ((v100 - 48) >= 0xA)
          v101 = 0;
        else
          v101 = 10 * v100 + 32;
        v102 = v98[1] - 48;
        if (v102 >= 0xA)
          LOBYTE(v102) = 0;
        v103 = v102 + v101;
        if ((unint64_t)(v98 + 2) < v35)
        {
          if (v98[2] == 58)
          {
            v104 = v98[3];
            v105 = v104 - 48;
            v106 = 10 * v104 + 32;
            if (v105 >= 0xA)
              v106 = 0;
            v107 = v98[4] - 48;
            if (v107 >= 0xA)
              LOBYTE(v107) = 0;
            v99 = (char)(v107 + v106);
          }
          else
          {
            v99 = 0;
          }
        }
        if (v96 == 45)
        {
          v108 = 3600 * v103;
          v109 = 60;
        }
        else
        {
          v108 = -3600 * v103;
          v109 = -60;
        }
        v63 = v108 + v99 * v109;
        v64 = 1;
      }
    }
    else
    {
      v63 = 0;
      v64 = v59 == 90;
    }
LABEL_197:
    *(_QWORD *)at = 0;
    if (a4)
      v110 = *(__CFCalendar **)(a4 + 8 * v64 + 8);
    else
      v110 = 0;
    if (CFCalendarComposeAbsoluteTime(v110, (CFAbsoluteTime *)at, "yMdHms", v45, v51, v57, v58, v61, v62))
    {
      v117 = *(double *)at + (double)v63;
      goto LABEL_202;
    }
LABEL_105:
    if (*a2)
      return 0;
    goto LABEL_2;
  }
  v115 = 0;
  v116 = 0;
  v114 = 0;
  *(CFAbsoluteTime *)at = a6;
  pthread_mutex_lock(&_expandFunctions_expand_mutex);
  if (_expandFunctions_once != -1)
    dispatch_once(&_expandFunctions_once, &__block_literal_global_13_3866);
  if (!CFCalendarDecomposeAbsoluteTime((CFCalendarRef)_expandFunctions_calendar, a6, "yMdHms", &v115, (char *)&v114 + 4, &v114, (char *)&v116 + 4, &v116, (char *)&v115 + 4))goto LABEL_101;
  if (strncmp(a1 + 5, "now", 3uLL))
  {
    if (!strncmp(a1 + 5, "today", 5uLL))
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = a1 + 10;
      v116 = 0;
      HIDWORD(v115) = 0;
      v18 = 100;
      v17 = v114;
      goto LABEL_96;
    }
    if (!strncmp(a1 + 5, "yesterday", 9uLL))
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = a1 + 14;
      v116 = 0;
      HIDWORD(v115) = 0;
      v17 = (v114 - 1);
    }
    else if (!strncmp(a1 + 5, "two_days_ago", 0xCuLL))
    {
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = a1 + 17;
      v116 = 0;
      HIDWORD(v115) = 0;
      v17 = (v114 - 2);
    }
    else
    {
      if (strncmp(a1 + 5, "three_days_ago", 0xEuLL))
      {
        if (!strncmp(a1 + 5, "this_week", 9uLL))
        {
          v16 = a1 + 14;
          v116 = 0;
          HIDWORD(v115) = 0;
          OrdinalityOfUnit = CFCalendarGetOrdinalityOfUnit((CFCalendarRef)_expandFunctions_calendar, 0x10uLL, 0x1000uLL, a6);
          v17 = (v114 - OrdinalityOfUnit + 1);
          LODWORD(v114) = v114 - OrdinalityOfUnit + 1;
          v14 = v116;
          v15 = HIDWORD(v116);
          v18 = 119;
          v13 = HIDWORD(v115);
        }
        else if (!strncmp(a1 + 5, "this_month", 0xAuLL))
        {
          v13 = 0;
          v14 = 0;
          v15 = 0;
          v16 = a1 + 15;
          v116 = 0;
          HIDWORD(v115) = 0;
          v17 = 1;
          LODWORD(v114) = 1;
          v18 = 77;
        }
        else
        {
          if (strncmp(a1 + 5, "this_year", 9uLL))
            goto LABEL_101;
          v13 = 0;
          v14 = 0;
          v15 = 0;
          v116 = 0;
          v16 = a1 + 14;
          HIDWORD(v115) = 0;
          v17 = 1;
          v114 = 0x100000001;
          v18 = 89;
        }
LABEL_96:
        if (CFCalendarComposeAbsoluteTime((CFCalendarRef)_expandFunctions_calendar, (CFAbsoluteTime *)at, "yMdHms", v115, HIDWORD(v114), v17, v15, v14, v13))
        {
          goto LABEL_97;
        }
LABEL_101:
        pthread_mutex_unlock(&_expandFunctions_expand_mutex);
LABEL_102:
        v72 = *__error();
        v73 = _SILogForLogForCategory(1);
        v74 = dword_1EF19FC90 < 3;
        if (os_log_type_enabled(v73, (os_log_type_t)(dword_1EF19FC90 < 3)))
        {
          *(_DWORD *)at = 136315138;
          *(_QWORD *)&at[4] = a1;
          _os_log_impl(&dword_1B8270000, v73, v74, "*warn* failed to parse %s", at, 0xCu);
        }
        *__error() = v72;
        goto LABEL_105;
      }
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = a1 + 19;
      v116 = 0;
      HIDWORD(v115) = 0;
      v17 = (v114 - 3);
    }
    LODWORD(v114) = v17;
    v18 = 100;
    goto LABEL_96;
  }
  v16 = a1 + 8;
  v18 = 115;
LABEL_97:
  if (*v16 == 40)
  {
    v70 = v16[1];
    v69 = v16 + 1;
    if (v70 != 41)
    {
      v113 = v69;
      v75 = strtod(v69, &v113);
      if (v113 == v69)
      {
LABEL_143:
        pthread_mutex_unlock(&_expandFunctions_expand_mutex);
        goto LABEL_202;
      }
      v76 = *v113;
      if ((v76 - 77) > 0x2A || ((1 << (v76 - 77)) & 0x44108801001) == 0)
        v76 = v18;
      v77 = (int)v75;
      if (v76 <= 103)
      {
        if (v76 == 77)
        {
          HIDWORD(v114) += v77;
          goto LABEL_99;
        }
        if (v76 == 89)
        {
          LODWORD(v115) = v115 + v77;
          goto LABEL_99;
        }
        if (v76 != 100)
          goto LABEL_99;
        v78 = *(double *)at;
        v79 = 86400;
      }
      else if (v76 > 114)
      {
        if (v76 != 119)
        {
          if (v76 != 115)
            goto LABEL_99;
          v78 = *(double *)at;
          goto LABEL_142;
        }
        v78 = *(double *)at;
        v79 = 604800;
      }
      else
      {
        if (v76 != 104)
        {
          if (v76 != 109)
            goto LABEL_99;
          v78 = *(double *)at;
          v77 *= 60;
          goto LABEL_142;
        }
        v78 = *(double *)at;
        v79 = 3600;
      }
      v77 *= v79;
LABEL_142:
      v117 = v78 + (double)v77;
      goto LABEL_143;
    }
  }
LABEL_99:
  v71 = CFCalendarComposeAbsoluteTime((CFCalendarRef)_expandFunctions_calendar, &v117, "yMdHms", v115, HIDWORD(v114), v114, HIDWORD(v116), v116, HIDWORD(v115));
  pthread_mutex_unlock(&_expandFunctions_expand_mutex);
  if (!v71)
    goto LABEL_102;
LABEL_202:
  (*(void (**)(uint64_t, char *, size_t, CFAbsoluteTime))(a5 + 16))(a5, a2, a3, v117);
  if (dword_1EF19FC90 >= 5)
  {
    v111 = *__error();
    v112 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)at = 134218498;
      *(_QWORD *)&at[4] = (uint64_t)v117;
      v119 = 2080;
      v120 = a2;
      v121 = 2080;
      v122 = a1;
      _os_log_impl(&dword_1B8270000, v112, OS_LOG_TYPE_DEFAULT, "Computed time (%lld) %s from %s", at, 0x20u);
    }
    *__error() = v111;
  }
  return 0x10000;
}

uint64_t __expandFunctions_block_invoke(int a1, char *__str, size_t __size, double a4)
{
  if (trunc(a4) == a4)
    return snprintf(__str, __size, "%lld");
  else
    return snprintf(__str, __size, "%f");
}

uint64_t __expandFunctionsISO8601_block_invoke(uint64_t a1, char *a2, size_t a3, CFAbsoluteTime a4)
{
  uint64_t v6;
  __CFCalendar *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    v7 = *(__CFCalendar **)(v6 + 16);
  else
    v7 = 0;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  CFCalendarDecomposeAbsoluteTime(v7, a4, "yMdHms", &v10, (char *)&v9 + 4, &v9, (char *)&v11 + 4, &v11, (char *)&v10 + 4);
  return snprintf(a2, a3, "%04i-%02i-%02iT%02i:%02i:%02iZ", v10, HIDWORD(v9), v9, HIDWORD(v11), v11, HIDWORD(v10));
}

void preProcess(const __CFString *a1, const __CFString *a2, double *a3)
{
  CFTypeID TypeID;
  CFTypeID v7;
  CFTypeID v8;
  __CFString *v9;
  const __CFString *v10;
  uint64_t v11;
  const __CFString *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  const void *v16;
  _BOOL4 v17;
  const __CFString *Value;
  CFTypeID v19;
  const __CFAllocator *v20;
  const __CFString *v21;
  CFUUIDRef v22;
  CFTypeID v23;
  int v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  CFTypeRef v28;
  const __CFString *v29;
  CFTypeRef v30;
  CFTypeRef v31;
  const __CFString *v32;
  const __CFString *v33;
  const __CFString *v34;
  uint64_t v35;
  int v36;
  int v37;
  NSObject *v38;
  const char *v39;
  uint64_t v40;
  const __CFAllocator *v41;
  const __CFString *v42;
  unsigned int v43;
  int v44;
  NSObject *v45;
  uint64_t v46;
  int HasPrefix;
  int v48;
  NSObject *v49;
  os_log_type_t v50;
  const char *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint32_t v54;
  const __CFDictionary *v55;
  int v56;
  int v57;
  uint64_t v58;
  const void *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  const __CFString *v63;
  uint64_t v64;
  const __CFString *v65;
  int v66;
  const __CFString *v67;
  const __CFString *v68;
  CFComparisonResult v69;
  int v70;
  __CFString *v71;
  __CFArray *Mutable;
  int v73;
  CFIndex Length;
  int v75;
  NSObject *v76;
  const char *v77;
  uint64_t v78;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  uint64_t v81;
  int64_t v82;
  BOOL v83;
  int64_t v84;
  uint64_t v85;
  uint64_t v86;
  CFIndex v87;
  UniChar v88;
  uint64_t v90;
  uint64_t v91;
  int64_t v92;
  CFIndex v93;
  CFIndex Count;
  __CFDictionary *v95;
  CFIndex i;
  const void *ValueAtIndex;
  unsigned int v98;
  int v99;
  NSObject *v100;
  uint64_t v101;
  const __CFArray *theArray;
  _OWORD valuePtr[8];
  CFStringRef theString;
  const UniChar *v105;
  const char *v106;
  uint64_t v107;
  CFIndex v108;
  int64_t v109;
  int64_t v110;
  uint64_t v111;
  CFRange v112;
  CFRange v113;
  CFRange v114;
  CFRange v115;

  v111 = *MEMORY[0x1E0C80C00];
  TypeID = CFDictionaryGetTypeID();
  v7 = CFGetTypeID(a1);
  if (v7 != CFStringGetTypeID())
    return;
  v8 = CFGetTypeID(a2);
  if (CFDateGetTypeID() != v8)
  {
LABEL_45:
    if (CFEqual(a1, CFSTR("kMDItemLastAppSearchEngagementQuery")))
    {
      v17 = 0;
      *((_QWORD *)a3 + 39) = CFRetain(a2);
LABEL_53:
      if (CFStringCompare(a1, CFSTR("kMDItemDisplayName"), 0) == kCFCompareEqualTo)
      {
        if (v8 == CFDictionaryGetTypeID())
        {
          Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, &stru_1E6E3A6D8);
          a2 = Value;
          if (Value)
            v8 = CFGetTypeID(Value);
        }
        v19 = CFStringGetTypeID();
        if (a2 && v8 == v19 && CFStringGetLength(a2) >= 36 && CFStringGetCharacterAtIndex(a2, 8) == 45)
        {
          v20 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v114.location = 0;
          v114.length = 36;
          v21 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, v114);
          v22 = CFUUIDCreateFromString(v20, v21);
          if (v22)
          {
            *((_DWORD *)a3 + 6) |= 0x4000u;
            CFRelease(v22);
          }
          CFRelease(v21);
        }
      }
      if (v17 && v8 == CFArrayGetTypeID())
        *((_DWORD *)a3 + 6) |= 0x2000u;
      return;
    }
    if (CFEqual(a1, CFSTR("kMDItemLastAppSearchEngagementRenderPosition")))
    {
      LODWORD(valuePtr[0]) = 0;
      if (CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, valuePtr))
        *((_DWORD *)a3 + 80) = valuePtr[0];
      goto LABEL_50;
    }
    if (CFEqual(a1, CFSTR("_kMDItemLastSpotlightEngagementQuery")))
    {
      v17 = 0;
      *((_QWORD *)a3 + 41) = CFRetain(a2);
      goto LABEL_53;
    }
    if (CFEqual(a1, CFSTR("_kMDItemLastSpotlightEngagementRenderPosition")))
    {
      LODWORD(valuePtr[0]) = 0;
      if (CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, valuePtr))
        *((_DWORD *)a3 + 84) = valuePtr[0];
      goto LABEL_50;
    }
    if (CFEqual(a1, CFSTR("_kMDItemLastOutOfSpotlightEngagementDate")))
    {
      v17 = 0;
      *((_QWORD *)a3 + 43) = CFRetain(a2);
      goto LABEL_53;
    }
    if (*a3 == -INFINITY && CFStringCompare(a1, CFSTR("com_apple_metadata_modtime"), 0) == kCFCompareEqualTo)
    {
      if (CFNumberGetTypeID() == v8)
        CFNumberGetValue((CFNumberRef)a2, kCFNumberDoubleType, a3);
      goto LABEL_50;
    }
    if (!*((_QWORD *)a3 + 6) && CFStringCompare(a1, CFSTR("_kMDItemIsFromImporter"), 0) == kCFCompareEqualTo)
    {
      *((_QWORD *)a3 + 6) = a2;
      if (a2)
      {
        v23 = CFGetTypeID(a2);
        if (v23 == CFBooleanGetTypeID())
        {
          v17 = 0;
          *((_DWORD *)a3 + 6) = (_DWORD)a3[3] & 0xFFFFFFFB | (4 * (CFBooleanGetValue(*((CFBooleanRef *)a3 + 6)) & 1));
          goto LABEL_53;
        }
      }
      goto LABEL_50;
    }
    if (!*((_QWORD *)a3 + 9) && CFEqual(a1, CFSTR("kMDItemTextContent")))
    {
      v17 = 0;
      *((_QWORD *)a3 + 9) = CFRetain(a2);
      goto LABEL_53;
    }
    if (CFStringHasPrefix(a1, CFSTR("_kMDItemOCRContent")))
    {
      if (v8 == CFStringGetTypeID() && CFStringGetLength(a2))
      {
        if (!*((_QWORD *)a3 + 10) && CFEqual(a1, CFSTR("_kMDItemOCRContentTitle")))
        {
          v17 = 0;
          *((_QWORD *)a3 + 10) = CFRetain(a2);
          goto LABEL_53;
        }
        if (!*((_QWORD *)a3 + 11) && CFEqual(a1, CFSTR("_kMDItemOCRContentLevel1")))
        {
          v17 = 0;
          *((_QWORD *)a3 + 11) = CFRetain(a2);
          goto LABEL_53;
        }
        if (!*((_QWORD *)a3 + 12) && CFEqual(a1, CFSTR("_kMDItemOCRContentLevel2")))
        {
          v17 = 0;
          *((_QWORD *)a3 + 12) = CFRetain(a2);
          goto LABEL_53;
        }
        if (!*((_QWORD *)a3 + 13) && CFEqual(a1, CFSTR("_kMDItemOCRContentLevel3")))
        {
          v17 = 0;
          *((_QWORD *)a3 + 13) = CFRetain(a2);
          goto LABEL_53;
        }
      }
      goto LABEL_50;
    }
    if (TypeID == v8)
    {
      if (CFStringCompare(a1, CFSTR("kMDItemTextVector"), 0))
      {
        InsertPreProcessContextAddLocAttr((uint64_t)a3, a1, a2, 1);
LABEL_50:
        v17 = 0;
        goto LABEL_53;
      }
      goto LABEL_159;
    }
    if (CFStringCompare(a1, CFSTR("kMDItemRecipientEmailAddresses"), 0) == kCFCompareEqualTo)
    {
      v17 = 0;
      *((_QWORD *)a3 + 25) = CFRetain(a2);
      goto LABEL_53;
    }
    if (CFStringCompare(a1, CFSTR("kMDItemPrimaryRecipientEmailAddresses"), 0))
    {
      if (CFStringCompare(a1, CFSTR("kMDItemAdditionalRecipientEmailAddresses"), 0))
      {
        if (CFStringCompare(a1, CFSTR("kMDItemHiddenAdditionalRecipientEmailAddresses"), 0))
        {
          if (CFStringCompare(a1, CFSTR("kMDItemPrimaryRecipients"), 0) == kCFCompareEqualTo
            || CFStringCompare(a1, CFSTR("kMDItemAdditionalRecipients"), 0) == kCFCompareEqualTo
            || CFStringCompare(a1, CFSTR("kMDItemHiddenAdditionalRecipients"), 0) == kCFCompareEqualTo
            || CFStringCompare(a1, CFSTR("kMDItemPrimaryRecipientContactIdentifiers"), 0) == kCFCompareEqualTo
            || CFStringCompare(a1, CFSTR("kMDItemAdditionalRecipientContactIdentifiers"), 0) == kCFCompareEqualTo
            || CFStringCompare(a1, CFSTR("kMDItemHiddenAdditionalRecipientContactIdentifiers"), 0) == kCFCompareEqualTo)
          {
            goto LABEL_50;
          }
          if ((*((_BYTE *)a3 + 25) & 1) != 0
            && CFStringCompare(a1, CFSTR("kMDItemThumbnailData"), 0) == kCFCompareEqualTo)
          {
            if (v8 != CFDataGetTypeID())
              goto LABEL_50;
            *((_QWORD *)a3 + 14) = a2;
            v33 = (const __CFString *)*MEMORY[0x1E0C9AE50];
            v34 = CFSTR("_kMDItemThumbnailDataExists");
            v35 = (uint64_t)a3;
            v36 = 0;
LABEL_160:
            InsertPreProcessContextAddAttr(v35, v34, v33, v36);
            goto LABEL_50;
          }
          if (CFStringHasPrefix(a1, CFSTR("_kMDItemTimeMachinePath")))
          {
            if (*((_QWORD *)a3 + 7))
            {
              v24 = *__error();
              v25 = _SILogForLogForCategory(4);
              v26 = dword_1EF19FC9C < 3;
              if (os_log_type_enabled(v25, (os_log_type_t)(dword_1EF19FC9C < 3)))
              {
                v27 = *((_QWORD *)a3 + 7);
                LODWORD(valuePtr[0]) = 138412802;
                *(_QWORD *)((char *)valuePtr + 4) = a1;
                WORD6(valuePtr[0]) = 2112;
                *(_QWORD *)((char *)valuePtr + 14) = a2;
                WORD3(valuePtr[1]) = 2112;
                *((_QWORD *)&valuePtr[1] + 1) = v27;
                _os_log_impl(&dword_1B8270000, v25, v26, "*warn* Skipping %@ %@ already had %@", (uint8_t *)valuePtr, 0x20u);
              }
              v17 = 0;
              *__error() = v24;
              goto LABEL_53;
            }
            if (v8 == CFStringGetTypeID())
            {
              if (((_BYTE)a3[3] & 0x80) != 0)
                v32 = CFSTR("_kMDItemTimeMachinePath");
              else
                v32 = a1;
              *((_QWORD *)a3 + 8) = CFRetain(v32);
              if (CFStringGetLength(a2) >= 6
                && CFStringGetCharacterAtIndex(a2, 2) != 58
                && CFStringGetCharacterAtIndex(a2, 5) != 58)
              {
                *((_DWORD *)a3 + 6) |= 0x200u;
              }
              *((_QWORD *)a3 + 7) = CFRetain(a2);
              if (dword_1EF19FC9C >= 5)
              {
                v37 = *__error();
                v38 = _SILogForLogForCategory(4);
                if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                {
                  v39 = "Marker";
                  v40 = *((_QWORD *)a3 + 8);
                  if (((_DWORD)a3[3] & 0x80) == 0)
                    v39 = "";
                  LODWORD(valuePtr[0]) = 136315650;
                  *(_QWORD *)((char *)valuePtr + 4) = v39;
                  WORD6(valuePtr[0]) = 2112;
                  *(_QWORD *)((char *)valuePtr + 14) = v40;
                  WORD3(valuePtr[1]) = 2112;
                  *((_QWORD *)&valuePtr[1] + 1) = a2;
                  _os_log_impl(&dword_1B8270000, v38, OS_LOG_TYPE_DEFAULT, "%s%@ = %@", (uint8_t *)valuePtr, 0x20u);
                }
                v17 = 0;
                *__error() = v37;
                goto LABEL_53;
              }
            }
            goto LABEL_50;
          }
          if (CFStringCompare(a1, CFSTR("_kMDItemUserTags"), 0) == kCFCompareEqualTo)
          {
            *((_QWORD *)a3 + 19) = CFRetain(a1);
            v17 = 0;
            *((_QWORD *)a3 + 20) = CFRetain(a2);
            goto LABEL_53;
          }
          if (CFStringCompare(a1, CFSTR("kMDItemUserTags"), 0) == kCFCompareEqualTo && (*((_BYTE *)a3 + 25) & 1) == 0
            || CFStringCompare(a1, CFSTR("kMDItemAttributeChangeDate"), 0) == kCFCompareEqualTo)
          {
            goto LABEL_50;
          }
          if (CFStringCompare(a1, CFSTR("_kMDItemPortraitStaticScore"), 0) == kCFCompareEqualTo
            || CFStringCompare(a1, CFSTR("_kMDItemPersonScore"), 0) == kCFCompareEqualTo)
          {
            if (v8 != CFNumberGetTypeID())
              goto LABEL_50;
            CFNumberGetValue((CFNumberRef)a2, kCFNumberFloatType, a3 + 38);
            goto LABEL_159;
          }
          if (CFStringCompare(a1, CFSTR("kMDItemContainerIdentifier"), 0)
            && CFStringCompare(a1, CFSTR("kMDItemEmailConversationID"), 0))
          {
            if (CFStringCompare(a1, CFSTR("_kMDItemDomainIdentifier"), 0) == kCFCompareEqualTo)
            {
              InsertPreProcessContextAddAttr((uint64_t)a3, a1, a2, 1);
              v17 = 0;
              *((_QWORD *)a3 + 37) = a2;
              goto LABEL_53;
            }
            if (((_BYTE)a3[3] & 8) != 0 || CFStringCompare(a1, CFSTR("_kMDItemFinderExcluded"), 0))
            {
              if (CFStringCompare(CFSTR("kMDItemPlayCount"), a1, 0) == kCFCompareEqualTo && CFNumberGetTypeID() == v8)
              {
                InsertPreProcessContextAddAttr((uint64_t)a3, a1, a2, 1);
                v17 = 0;
                *((_QWORD *)a3 + 34) = CFRetain(a2);
                goto LABEL_53;
              }
              if (CFStringCompare(a1, CFSTR("_kMDItemSupportFileType"), 0) == kCFCompareEqualTo)
              {
                v17 = 1;
                goto LABEL_53;
              }
              if (CFStringCompare(a1, CFSTR("_kMDItemRequiresImport"), 0))
              {
                if (CFStringHasPrefix(a1, CFSTR(":MD:"))
                  || CFStringHasPrefix(a1, CFSTR(":EA:"))
                  || CFStringHasPrefix(a1, CFSTR(":PR:")))
                {
                  v41 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                  v115.length = CFStringGetLength(a1) - 4;
                  v115.location = 4;
                  v42 = CFStringCreateWithSubstring(v41, a1, v115);
                  if (CFStringHasPrefix(a1, CFSTR(":EA:")))
                  {
                    v17 = CFStringCompare(v42, CFSTR("_kMDItemSupportFileType"), 0) == kCFCompareEqualTo;
                  }
                  else
                  {
                    HasPrefix = CFStringHasPrefix(a1, CFSTR(":PR:"));
                    v17 = CFStringCompare(v42, CFSTR("_kMDItemSupportFileType"), 0) == kCFCompareEqualTo;
                    if (!HasPrefix)
                      goto LABEL_202;
                  }
                  if (CFStringHasPrefix(v42, CFSTR("_kMDItemTimeMachinePath")))
                  {
                    v48 = *__error();
                    v49 = _SILogForLogForCategory(4);
                    v50 = 2 * (dword_1EF19FC9C < 4);
                    if (!os_log_type_enabled(v49, v50))
                    {
LABEL_184:
                      *__error() = v48;
LABEL_185:
                      CFRelease(v42);
                      goto LABEL_53;
                    }
                    LODWORD(valuePtr[0]) = 138412546;
                    *(_QWORD *)((char *)valuePtr + 4) = v42;
                    WORD6(valuePtr[0]) = 2112;
                    *(_QWORD *)((char *)valuePtr + 14) = a2;
                    v51 = "Skipping :EA:%@ %@";
                    goto LABEL_182;
                  }
                  v55 = (const __CFDictionary *)*((_QWORD *)a3 + 32);
                  if (v55 && CFDictionaryContainsKey(v55, v42)
                    || CFStringCompare(v42, CFSTR("kMDItemUserTags"), 0) == kCFCompareEqualTo)
                  {
                    goto LABEL_185;
                  }
                  if (CFStringCompare(CFSTR("kMDItemLastUsedDate"), v42, 0) == kCFCompareEqualTo
                    && CFDateGetTypeID() == v8)
                  {
                    *((_QWORD *)a3 + 1) = CFRetain(a2);
                    v56 = *((_DWORD *)a3 + 6);
                    v57 = ~(16 * v56) & 0x10;
                    if ((v56 & 2) != 0)
                      v57 = 0;
                    *((_DWORD *)a3 + 6) = v57 | v56 & 0xFFFFFFEF;
                    if (dword_1EF19FC9C >= 5)
                    {
                      v99 = *__error();
                      v100 = _SILogForLogForCategory(4);
                      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
                      {
                        v101 = *((_QWORD *)a3 + 1);
                        LODWORD(valuePtr[0]) = 138412290;
                        *(_QWORD *)((char *)valuePtr + 4) = v101;
                        _os_log_impl(&dword_1B8270000, v100, OS_LOG_TYPE_DEFAULT, "New last used date: %@", (uint8_t *)valuePtr, 0xCu);
                      }
                      *__error() = v99;
                    }
                    v58 = *((_QWORD *)a3 + 36);
                    if (v58 < 4 || v58 == 4 && CFDateCompare(*((CFDateRef *)a3 + 35), (CFDateRef)a2, 0) < 0)
                    {
                      v59 = (const void *)*((_QWORD *)a3 + 35);
                      if (v59)
                        CFRelease(v59);
                      a3[35] = 0.0;
                      *((_QWORD *)a3 + 35) = CFRetain(a2);
                      *((_QWORD *)a3 + 36) = 4;
                    }
                    goto LABEL_185;
                  }
                  if (CFStringCompare(v42, CFSTR("kMDItemIsUploading"), 0) == kCFCompareEqualTo
                    || CFStringCompare(v42, CFSTR(":MD:kMDItemIsUploading"), 0) == kCFCompareEqualTo
                    || CFStringCompare(v42, CFSTR("kMDItemIsUploaded"), 0) == kCFCompareEqualTo
                    || CFStringCompare(v42, CFSTR(":MD:kMDItemIsUploaded"), 0) == kCFCompareEqualTo)
                  {
                    v63 = CFSTR("kMDItemIsUploading");
                    v64 = (uint64_t)a3;
                    goto LABEL_208;
                  }
LABEL_202:
                  if (CFStringCompare(v42, CFSTR("_kMDItemUserTags"), 0) == kCFCompareEqualTo)
                  {
                    if (!*((_QWORD *)a3 + 19))
                    {
                      *((_QWORD *)a3 + 19) = CFRetain(a1);
                      *((_QWORD *)a3 + 20) = CFRetain(a2);
                    }
                    goto LABEL_185;
                  }
                  if (CFStringHasPrefix(v42, CFSTR("_kMDItemTimeMachinePath")))
                  {
                    if (!*((_QWORD *)a3 + 7))
                    {
                      if (v8 == CFStringGetTypeID())
                      {
                        v71 = ((_BYTE)a3[3] & 0x80) != 0 ? CFSTR("_kMDItemTimeMachinePath") : (__CFString *)v42;
                        *((_QWORD *)a3 + 8) = CFRetain(v71);
                        *((_QWORD *)a3 + 7) = CFRetain(a2);
                        if (dword_1EF19FC9C >= 5)
                        {
                          v75 = *__error();
                          v76 = _SILogForLogForCategory(4);
                          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
                          {
                            v77 = "Marker";
                            v78 = *((_QWORD *)a3 + 8);
                            if (((_DWORD)a3[3] & 0x80) == 0)
                              v77 = "";
                            LODWORD(valuePtr[0]) = 136315650;
                            *(_QWORD *)((char *)valuePtr + 4) = v77;
                            WORD6(valuePtr[0]) = 2112;
                            *(_QWORD *)((char *)valuePtr + 14) = v78;
                            WORD3(valuePtr[1]) = 2112;
                            *((_QWORD *)&valuePtr[1] + 1) = a2;
                            _os_log_impl(&dword_1B8270000, v76, OS_LOG_TYPE_DEFAULT, "%s%@ = %@", (uint8_t *)valuePtr, 0x20u);
                          }
                          *__error() = v75;
                        }
                      }
                      goto LABEL_185;
                    }
                    v48 = *__error();
                    v60 = _SILogForLogForCategory(4);
                    v61 = 2 * (dword_1EF19FC9C < 4);
                    if (!os_log_type_enabled(v60, v61))
                      goto LABEL_184;
                    v62 = *((_QWORD *)a3 + 7);
                    LODWORD(valuePtr[0]) = 138412802;
                    *(_QWORD *)((char *)valuePtr + 4) = v42;
                    WORD6(valuePtr[0]) = 2112;
                    *(_QWORD *)((char *)valuePtr + 14) = a2;
                    WORD3(valuePtr[1]) = 2112;
                    *((_QWORD *)&valuePtr[1] + 1) = v62;
                    v51 = "Skipping :MD:%@ %@ already had %@";
                    v52 = v60;
                    v53 = v61;
                    v54 = 32;
                    goto LABEL_183;
                  }
                  if (((_BYTE)a3[3] & 0x80) == 0)
                  {
LABEL_217:
                    if (CFStringHasPrefix(a1, CFSTR(":MD:")))
                    {
                      v68 = CFSTR("_kMDItemBackupMoveMarker");
                      if (CFStringCompare(v42, CFSTR("_kMDItemBackupMoveMarker"), 0))
                      {
                        v68 = CFSTR("_kMDItemBackupNameSpace");
                        if (CFStringCompare(v42, CFSTR("_kMDItemBackupNameSpace"), 0))
                        {
                          v68 = CFSTR("_kMDItemSupportFileType");
                          if (CFStringCompare(v42, CFSTR("_kMDItemSupportFileType"), 0))
                          {
                            v68 = CFSTR("_kMDItemTimeMachineMarkerNeedsFixup");
                            if (CFStringCompare(v42, CFSTR("_kMDItemTimeMachineMarkerNeedsFixup"), 0))
                            {
                              v68 = CFSTR("kMDItemIsUploading");
                              if (CFStringCompare(v42, CFSTR("kMDItemIsUploading"), 0))
                              {
                                v68 = CFSTR("kMDItemIsUploaded");
                                if (CFStringCompare(v42, CFSTR("kMDItemIsUploaded"), 0))
                                {
                                  if (CFStringCompare(v42, CFSTR("kMDItemApproximateModTime"), 0) == kCFCompareEqualTo)
                                  {
                                    *(_QWORD *)&valuePtr[0] = 0;
                                    if (CFNumberGetValue((CFNumberRef)a2, kCFNumberLongType, valuePtr)
                                      && *(_QWORD *)&valuePtr[0])
                                    {
                                      a3[33] = *(double *)valuePtr;
                                    }
                                    goto LABEL_185;
                                  }
                                  if (CFStringCompare(v42, CFSTR("kMDItemExpirationDate"), 0) == kCFCompareEqualTo)
                                  {
                                    if (v8 == CFDateGetTypeID())
                                      *((_QWORD *)a3 + 2) = CFRetain(a2);
                                    goto LABEL_185;
                                  }
                                  v69 = CFStringCompare(v42, CFSTR("kMDItemSeedLastUsedDate"), 0);
                                  v70 = *((_DWORD *)a3 + 6);
                                  if (v69 == kCFCompareEqualTo)
                                  {
                                    v98 = v70 | 0x800;
                                    goto LABEL_327;
                                  }
                                  if ((v70 & 0x100) == 0 || CFStringCompare(v42, CFSTR("kMDItemThumbnailData"), 0))
                                  {
                                    if (CFStringCompare(v42, CFSTR("kMDPreviewImageData"), 0) == kCFCompareEqualTo)
                                    {
                                      if (v8 == CFDataGetTypeID())
                                        *((_QWORD *)a3 + 14) = a2;
                                      goto LABEL_185;
                                    }
                                    if (CFStringCompare(v42, CFSTR("kMDItemWorkerHandled"), 0))
                                    {
                                      if (CFStringCompare(v42, CFSTR("kMDItemPath"), 0) == kCFCompareEqualTo
                                        || CFStringCompare(v42, CFSTR("DeviceId"), 0) == kCFCompareEqualTo)
                                      {
                                        goto LABEL_185;
                                      }
                                      if (CFStringCompare(v42, CFSTR("_kMDItemOIDParent"), 0) == kCFCompareEqualTo)
                                      {
                                        if (v8 == CFNumberGetTypeID())
                                          CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt64Type, a3 + 44);
                                        goto LABEL_185;
                                      }
                                      v48 = *__error();
                                      v49 = _SILogForLogForCategory(4);
                                      v50 = 2 * (dword_1EF19FC9C < 4);
                                      if (!os_log_type_enabled(v49, v50))
                                        goto LABEL_184;
                                      LODWORD(valuePtr[0]) = 138412546;
                                      *(_QWORD *)((char *)valuePtr + 4) = v42;
                                      WORD6(valuePtr[0]) = 2112;
                                      *(_QWORD *)((char *)valuePtr + 14) = a2;
                                      v51 = "Skipping :MD:%@ %@";
LABEL_182:
                                      v52 = v49;
                                      v53 = v50;
                                      v54 = 22;
LABEL_183:
                                      _os_log_impl(&dword_1B8270000, v52, v53, v51, (uint8_t *)valuePtr, v54);
                                      goto LABEL_184;
                                    }
                                    v98 = (_DWORD)a3[3] & 0xFFFFFFBF | ((CFBooleanGetValue((CFBooleanRef)a2) & 1) << 6);
LABEL_327:
                                    *((_DWORD *)a3 + 6) = v98;
                                    goto LABEL_185;
                                  }
                                  if (v8 != CFDataGetTypeID())
                                    goto LABEL_185;
                                  *((_QWORD *)a3 + 14) = a2;
                                  v65 = (const __CFString *)*MEMORY[0x1E0C9AE50];
                                  v63 = CFSTR("_kMDItemThumbnailDataExists");
                                  v64 = (uint64_t)a3;
                                  v66 = 0;
LABEL_209:
                                  InsertPreProcessContextAddAttr(v64, v63, v65, v66);
                                  goto LABEL_185;
                                }
                              }
                            }
                          }
                        }
                      }
                      v64 = (uint64_t)a3;
                      v63 = v68;
                    }
                    else
                    {
                      if (CFStringCompare(a1, CFSTR("kMDItemAttributeChangeDate"), 0) == kCFCompareEqualTo)
                        goto LABEL_185;
                      v64 = (uint64_t)a3;
                      v63 = a1;
                    }
LABEL_208:
                    v65 = a2;
                    v66 = 1;
                    goto LABEL_209;
                  }
                  if (CFStringHasPrefix(v42, CFSTR("_kTimeMachineNewestSnapshot")))
                  {
                    Mutable = (__CFArray *)*((_QWORD *)a3 + 4);
                    if (!Mutable)
                    {
                      Mutable = CFArrayCreateMutable(v41, 0, MEMORY[0x1E0C9B378]);
                      *((_QWORD *)a3 + 4) = Mutable;
                    }
                  }
                  else
                  {
                    if (((_BYTE)a3[3] & 0x80) == 0 || !CFStringHasPrefix(v42, CFSTR("_kTimeMachineOldestSnapshot")))
                      goto LABEL_217;
                    Mutable = (__CFArray *)*((_QWORD *)a3 + 5);
                    if (!Mutable)
                    {
                      Mutable = CFArrayCreateMutable(v41, 0, MEMORY[0x1E0C9B378]);
                      *((_QWORD *)a3 + 5) = Mutable;
                    }
                  }
                  CFArrayAppendValue(Mutable, a2);
                  goto LABEL_185;
                }
                if ((*((_BYTE *)a3 + 26) & 1) != 0
                  && CFStringCompare(a1, CFSTR("kMDItemContentURL"), 0) == kCFCompareEqualTo)
                {
                  InsertPreProcessContextAddAttr((uint64_t)a3, CFSTR("_kMDItemHasEmailContentURL"), (CFTypeRef)*MEMORY[0x1E0C9AE50], 1);
                  goto LABEL_159;
                }
                if (CFEqual(CFSTR("kMDItemEmailAddresses"), a1))
                {
                  v67 = CFSTR("_kMDItemEmailAddressesLocalParts");
LABEL_244:
                  generateLocalPartsWithNewFieldName((uint64_t)a3, v67, a2);
                  goto LABEL_159;
                }
                if (CFEqual(CFSTR("kMDItemAuthorEmailAddresses"), a1))
                {
                  v67 = CFSTR("_kMDItemAuthorEmailAddressesLocalParts");
                  goto LABEL_244;
                }
                v73 = *((_DWORD *)a3 + 6);
                if ((v73 & 0x1000) == 0)
                {
LABEL_260:
                  if ((v73 & 0x400) != 0 && CFStringGetTypeID() == v8)
                  {
                    if (preProcess_onceToken != -1)
                      dispatch_once(&preProcess_onceToken, &__block_literal_global_1312);
                    if (CFSetContainsValue((CFSetRef)preProcess_localizeFieldNames, a1))
                    {
                      CFStringGetLength(a2);
                      theArray = (const __CFArray *)_NLStringTokenizerCopyPossibleStringLanguages();
                      memset(valuePtr, 0, sizeof(valuePtr));
                      if (a2)
                        Length = CFStringGetLength(a2);
                      else
                        Length = 0;
                      theString = a2;
                      v107 = 0;
                      v108 = Length;
                      CharactersPtr = CFStringGetCharactersPtr(a2);
                      CStringPtr = 0;
                      v105 = CharactersPtr;
                      if (!CharactersPtr)
                        CStringPtr = CFStringGetCStringPtr(a2, 0x600u);
                      v109 = 0;
                      v110 = 0;
                      v106 = CStringPtr;
                      if (Length < 1)
                      {
                        v83 = 1;
                      }
                      else
                      {
                        v81 = 0;
                        v82 = 0;
                        v83 = 0;
                        v84 = 0;
                        v85 = 64;
                        do
                        {
                          if ((unint64_t)v84 >= 4)
                            v86 = 4;
                          else
                            v86 = v84;
                          v87 = v108;
                          if (v108 > v84)
                          {
                            if (v105)
                            {
                              v88 = v105[v84 + v107];
                            }
                            else if (v106)
                            {
                              v88 = v106[v107 + v84];
                            }
                            else
                            {
                              if (v110 <= v84 || v82 > v84)
                              {
                                v90 = v86 + v81;
                                v91 = v85 - v86;
                                v92 = v84 - v86;
                                v93 = v92 + 64;
                                if (v92 + 64 >= v108)
                                  v93 = v108;
                                v109 = v92;
                                v110 = v93;
                                if (v108 >= v91)
                                  v87 = v91;
                                v113.length = v87 + v90;
                                v113.location = v92 + v107;
                                CFStringGetCharacters(theString, v113, (UniChar *)valuePtr);
                                v82 = v109;
                              }
                              v88 = *((_WORD *)valuePtr + v84 - v82);
                            }
                            if ((v88 & 0xFF80) == 0xE00)
                              break;
                          }
                          v83 = ++v84 >= Length;
                          --v81;
                          ++v85;
                        }
                        while (Length != v84);
                      }
                      if (theArray)
                        Count = CFArrayGetCount(theArray);
                      else
                        Count = 0;
                      if (!v83 || Count != 0)
                      {
                        v95 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                        if (Count >= 1)
                        {
                          for (i = 0; i != Count; ++i)
                          {
                            ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
                            CFDictionaryAddValue(v95, ValueAtIndex, a2);
                          }
                        }
                        if (!v83)
                        {
                          CFDictionaryAddValue(v95, CFSTR("en"), a2);
                          CFDictionaryAddValue(v95, CFSTR("th"), a2);
                        }
                        CFDictionaryAddValue(v95, &stru_1E6E3A6D8, a2);
                        InsertPreProcessContextAddLocAttr((uint64_t)a3, a1, v95, 0);
                      }
                      if (theArray)
                        CFRelease(theArray);
                      if (!v83 || Count != 0)
                        goto LABEL_50;
                    }
                  }
                  goto LABEL_159;
                }
                if (CFStringCompare(a1, CFSTR("kMDItemContentTypeTree"), 0))
                {
                  v73 = *((_DWORD *)a3 + 6);
                  goto LABEL_260;
                }
                if (v8 != CFArrayGetTypeID())
                  goto LABEL_159;
                v112.length = CFArrayGetCount((CFArrayRef)a2);
                v112.location = 0;
                if (CFArrayGetFirstIndexOfValue((CFArrayRef)a2, v112, CFSTR("public.text")) == -1)
                  goto LABEL_159;
                v43 = (_DWORD)a3[3] & 0xFFFFEFFF;
              }
              else
              {
                v43 = *((_DWORD *)a3 + 6) | 0x8000;
              }
            }
            else
            {
              if (v8 != CFBooleanGetTypeID())
                goto LABEL_50;
              v43 = (_DWORD)a3[3] & 0xFFFFFFF7 | (8 * (CFBooleanGetValue((CFBooleanRef)a2) & 1));
            }
            *((_DWORD *)a3 + 6) = v43;
          }
          else
          {
            *((_DWORD *)a3 + 77) = CFHash(a2) % 0xFFFFFFFE + 1;
          }
LABEL_159:
          v35 = (uint64_t)a3;
          v34 = a1;
          v33 = a2;
          v36 = 1;
          goto LABEL_160;
        }
        v31 = CFRetain(a2);
        *((_QWORD *)a3 + 28) = v31;
        InsertPreProcessContextAddAttr((uint64_t)a3, a1, v31, 1);
        v29 = CFSTR("_kMDItemHiddenAdditionalRecipientEmailAddressesLocalParts");
      }
      else
      {
        v30 = CFRetain(a2);
        *((_QWORD *)a3 + 27) = v30;
        InsertPreProcessContextAddAttr((uint64_t)a3, a1, v30, 1);
        v29 = CFSTR("_kMDItemAdditionalRecipientEmailAddressesLocalParts");
      }
    }
    else
    {
      v28 = CFRetain(a2);
      *((_QWORD *)a3 + 26) = v28;
      InsertPreProcessContextAddAttr((uint64_t)a3, a1, v28, 1);
      v29 = CFSTR("_kMDItemPrimaryRecipientEmailAddressesLocalParts");
    }
    generateLocalPartsWithNewFieldName((uint64_t)a3, v29, a2);
    goto LABEL_50;
  }
  if (CFEqual(CFSTR("kMDItemContentCreationDate"), a1))
  {
    _InsertPreProcessContextAddDateAttr((uint64_t)a3, CFSTR("kMDItemContentCreationDate"), a2, (uint64_t)CFSTR("kMDItemContentCreationDate_Ranking"), 2);
    return;
  }
  if (CFEqual(CFSTR("kMDItemContentModificationDate"), a1))
  {
    v9 = CFSTR("kMDItemContentModificationDate");
    v10 = CFSTR("kMDItemContentModificationDate_Ranking");
LABEL_7:
    v11 = (uint64_t)a3;
    v12 = a2;
    v13 = 3;
LABEL_18:
    _InsertPreProcessContextAddDateAttr(v11, v9, v12, (uint64_t)v10, v13);
    return;
  }
  if (CFEqual(CFSTR("_kMDItemApplicationLastLaunchedDate"), a1))
  {
    v9 = CFSTR("_kMDItemApplicationLastLaunchedDate");
    v10 = CFSTR("_kMDItemApplicationLastLaunchedDate_Ranking");
LABEL_16:
    v11 = (uint64_t)a3;
    v12 = a2;
LABEL_17:
    v13 = 4;
    goto LABEL_18;
  }
  if (CFEqual(CFSTR("kMDItemStartDate"), a1))
  {
    v9 = CFSTR("kMDItemStartDate");
    v10 = CFSTR("kMDItemStartDate_Ranking");
    goto LABEL_16;
  }
  if (CFEqual(CFSTR("kMDItemCompletionDate"), a1))
  {
    v9 = CFSTR("kMDItemCompletionDate");
    v10 = CFSTR("kMDItemCompletionDate_Ranking");
    goto LABEL_16;
  }
  if (CFEqual(CFSTR("kMDItemDueDate"), a1))
  {
    v9 = CFSTR("kMDItemDueDate");
    v10 = CFSTR("kMDItemDueDate_Ranking");
    goto LABEL_16;
  }
  if (CFEqual(CFSTR("kMDItemDateAdded"), a1))
  {
    _InsertPreProcessContextAddDateAttr((uint64_t)a3, CFSTR("kMDItemDateAdded"), a2, (uint64_t)CFSTR("kMDItemDateAdded_Ranking"), 1);
    return;
  }
  if (CFEqual(CFSTR("_kMDItemRelatedActivityLastLaunchDate"), a1))
  {
    v9 = CFSTR("_kMDItemRelatedActivityLastLaunchDate");
    v11 = (uint64_t)a3;
    v12 = a2;
    v10 = 0;
    goto LABEL_17;
  }
  if (CFEqual(CFSTR("com_apple_mail_dateReceived"), a1))
  {
    v9 = CFSTR("com_apple_mail_dateReceived");
    v10 = CFSTR("kMDItemMailDateReceived_Ranking");
    goto LABEL_7;
  }
  if (CFEqual(CFSTR("com_apple_mail_dateLastViewed"), a1))
  {
    v9 = CFSTR("com_apple_mail_dateLastViewed");
    v10 = CFSTR("kMDItemMailDateLastViewed_Ranking");
    goto LABEL_7;
  }
  if (CFEqual(CFSTR("kMDItemEndDate"), a1))
  {
    _InsertPreProcessContextAddDateAttr((uint64_t)a3, CFSTR("kMDItemEndDate"), a2, 0, 0);
    return;
  }
  if (!CFEqual(CFSTR("kMDItemLastUsedDate"), a1))
  {
    if (CFEqual(a1, CFSTR("_kMDItemRenderDate")))
    {
      a3[29] = MEMORY[0x1BCCAF690](a2);
      return;
    }
    if (CFEqual(a1, CFSTR("_kMDItemEngagementDate")))
    {
      a3[30] = MEMORY[0x1BCCAF690](a2);
      return;
    }
    if (CFEqual(a1, CFSTR("kMDItemLastAppEngagementDate")))
    {
      a3[31] = MEMORY[0x1BCCAF690](a2);
      return;
    }
    goto LABEL_45;
  }
  *((_QWORD *)a3 + 1) = CFRetain(a2);
  v14 = (_DWORD)a3[3] & 0xFFFFFFEF | (16 * (((_DWORD)a3[3] & 3) == 0));
  *((_DWORD *)a3 + 6) = v14;
  if (dword_1EF19FC9C < 5)
  {
    if ((v14 & 0x10000) != 0)
      return;
    goto LABEL_32;
  }
  v44 = *__error();
  v45 = _SILogForLogForCategory(4);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    v46 = *((_QWORD *)a3 + 1);
    LODWORD(valuePtr[0]) = 138412290;
    *(_QWORD *)((char *)valuePtr + 4) = v46;
    _os_log_impl(&dword_1B8270000, v45, OS_LOG_TYPE_DEFAULT, "New last used date: %@", (uint8_t *)valuePtr, 0xCu);
  }
  *__error() = v44;
  if (((_DWORD)a3[3] & 0x10000) == 0)
  {
LABEL_32:
    v15 = *((_QWORD *)a3 + 36);
    if (v15 <= 3 || v15 == 4 && CFDateCompare(*((CFDateRef *)a3 + 35), (CFDateRef)a2, 0) < 0)
    {
      v16 = (const void *)*((_QWORD *)a3 + 35);
      if (v16)
        CFRelease(v16);
      a3[35] = 0.0;
      *((_QWORD *)a3 + 35) = CFRetain(a2);
      *((_QWORD *)a3 + 36) = 4;
    }
  }
}

void InsertPreProcessContextAddAttr(uint64_t a1, CFTypeRef cf, CFTypeRef a3, int a4)
{
  CFTypeRef v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  CFStringRef v11;

  if (*(_QWORD *)(a1 + 136) >= *(_QWORD *)(a1 + 144))
  {
    if (SIIsAppleInternal_onceToken != -1)
      dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_4644);
    if (SIIsAppleInternal_internal)
    {
      do
        v10 = __ldxr((unsigned int *)&InsertPreProcessContextAddAttr__crashCount);
      while (__stxr(v10 + 1, (unsigned int *)&InsertPreProcessContextAddAttr__crashCount));
      if (!v10)
      {
        v11 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("attr count %d exceeded %d"), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144));
        getpid();
        SISimulateCrashForPid(0, (uint64_t)v11);
        if (v11)
          CFRelease(v11);
      }
    }
    *(_DWORD *)(a1 + 28) = 22;
  }
  else
  {
    v7 = CFRetain(cf);
    v8 = *(_QWORD *)(a1 + 136);
    *(_QWORD *)(*(_QWORD *)(a1 + 120) + 8 * v8) = v7;
    if (a4)
    {
      a3 = CFRetain(a3);
      v8 = *(_QWORD *)(a1 + 136);
    }
    v9 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 136) = v8 + 1;
    *(_QWORD *)(v9 + 8 * v8) = a3;
  }
}

void QueryFunctionCallbackContext_METADATA::~QueryFunctionCallbackContext_METADATA(QueryFunctionCallbackContext_METADATA *this)
{
  const __CFDictionary *v2;

  *(_QWORD *)this = &off_1E6E2A2C0;
  v2 = (const __CFDictionary *)*((_QWORD *)this + 5);
  if (v2)
  {
    CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)deleteValue, 0);
    CFRelease(*((CFTypeRef *)this + 5));
  }
}

{
  QueryFunctionCallbackContext_METADATA::~QueryFunctionCallbackContext_METADATA(this);
  JUMPOUT(0x1BCCB06A4);
}

void si_querypipe_addresults(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t Mutable;
  const void *MutableUsingMalloc;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t VectorCount;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  const void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  NSObject *v50;
  uint64_t v51;
  _BOOL4 v52;
  size_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  const void *v69;
  BOOL v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const void *v75;
  uint64_t v76;
  const void *v77;
  unsigned int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  _QWORD *v85;
  const void *v86;
  uint64_t v87;
  const void *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  const void *v98;
  const void *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  _QWORD v126[6];
  int v127;
  _QWORD v128[2];
  void (*v129)(uint64_t, const void *, const void *);
  void *v130;
  uint64_t *v131;
  uint8_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t, uint64_t, uint64_t, int);
  void *v140;
  uint8_t *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint8_t buf[8];
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  LODWORD(v124) = a3;
  v8 = a1;
  v154 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  do
  {
    v10 = v9;
    v9 = *(_QWORD *)(v9 + 80);
  }
  while (v9);
  v11 = *(_DWORD **)(v10 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)v11 + 8));
  ++v11[21];
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)v11 + 8));
  if (a4)
  {
    v12 = *(_QWORD *)(a2 + 456);
    *(_QWORD *)(a2 + 456) = 0;
    si_querypipe_send_matchinfo(v8, v12);
  }
  Mutable = *(_QWORD *)(a2 + 440);
  if (Mutable)
  {
    *(_QWORD *)(a2 + 440) = 0;
    _MDPlistBytesEndArray();
    _MDPlistBytesEndPlist();
    MutableUsingMalloc = *(const void **)(a2 + 448);
    if (!MutableUsingMalloc)
      goto LABEL_10;
  }
  else
  {
    MutableUsingMalloc = *(const void **)(a2 + 448);
    if (!MutableUsingMalloc)
      goto LABEL_16;
  }
  *(_QWORD *)(a2 + 448) = 0;
  _MDPlistBytesEndArray();
  _MDPlistBytesEndPlist();
LABEL_10:
  v15 = v8;
  do
  {
    v16 = v15;
    v15 = *(_QWORD *)(v15 + 80);
  }
  while (v15);
  v17 = *(_QWORD *)(v16 + 8);
  v18 = malloc_type_calloc(1uLL, 0x40uLL, 0x10720403C4CCC75uLL);
  v18[1] = *(_OWORD *)(v8 + 48);
  *((_QWORD *)v18 + 1) = si_querypipe_copy_jobid(v8);
  if (Mutable)
  {
    if (MutableUsingMalloc)
      goto LABEL_14;
  }
  else
  {
    Mutable = _MDPlistBytesCreateMutable();
    _MDPlistBytesBeginPlist();
    _MDPlistBytesBeginArray();
    _MDPlistBytesEndArray();
    _MDPlistBytesEndPlist();
    if (MutableUsingMalloc)
      goto LABEL_14;
  }
  MutableUsingMalloc = (const void *)_MDPlistBytesCreateMutableUsingMalloc();
  _MDPlistBytesBeginPlist();
  _MDPlistBytesBeginArray();
  _MDPlistBytesEndArray();
  _MDPlistBytesEndPlist();
LABEL_14:
  _MDPlistBytesAppendPlistBytes();
  CFRelease(MutableUsingMalloc);
  *((_QWORD *)v18 + 5) = Mutable;
  *(_DWORD *)v18 = 11;
  if (!si_resultqueue_enqueue(v17, (int *)v18))
    SIResultBatchFree((void **)v18);
LABEL_16:
  v125 = a4;
  v19 = *(unsigned int *)(a2 + 3536);
  if (!(_DWORD)v19)
    goto LABEL_65;
  v20 = 0;
  v21 = 0;
  v22 = a2 + 464;
  do
  {
    if (*(_QWORD *)(a2 + 8 * v20 + 464))
    {
      VectorCount = _MDStoreOIDArrayGetVectorCount();
      v19 = *(unsigned int *)(a2 + 3536);
    }
    else
    {
      VectorCount = 0;
    }
    v21 += VectorCount;
    ++v20;
  }
  while (v20 < v19);
  if (!v21)
  {
LABEL_65:
    if (v125)
      si_querypipe_remove_process(v8, a5, 0, 0);
    goto LABEL_67;
  }
  if (*(_BYTE *)(v8 + 96))
    goto LABEL_166;
  v24 = v8;
  do
  {
    v25 = v24;
    v24 = *(_QWORD *)(v24 + 80);
  }
  while (v24);
  if (*(_BYTE *)(*(_QWORD *)(v25 + 8) + 12))
  {
LABEL_166:
    do
    {
LABEL_67:
      v51 = v8;
      v8 = *(_QWORD *)(v8 + 80);
    }
    while (v8);
    si_resultqueue_start(*(_QWORD *)(v51 + 8));
    return;
  }
  v26 = *(_QWORD *)(v8 + 80);
  v122 = a2 + 464;
  v123 = a5;
  if (!v26)
    goto LABEL_71;
  v27 = 0;
  v28 = v26;
  v29 = v8;
  do
  {
    v27 ^= *(_DWORD *)(v29 + 104) == 0;
    v29 = v28;
    v28 = *(_QWORD *)(v28 + 80);
  }
  while (v28);
  if ((v27 & 1) == 0)
  {
LABEL_71:
    v52 = v26 != 0;
    if ((_DWORD)v124)
      v52 = v124;
    v121 = v52;
    v124 = RLEOIDArrayCreateMutable((const __CFAllocator *)kCIQueryZoneAllocator);
    v120 = (uint64_t)&v120;
    v150 = 0;
    v151 = &v150;
    v152 = 0x2000000000;
    v153 = 0;
    *(_QWORD *)buf = 0;
    v147 = buf;
    v148 = 0x2000000000;
    v149 = 0;
    MEMORY[0x1E0C80A78](v124);
    v54 = (char *)&v120 - ((v53 + 15) & 0xFFFFFFFF0);
    bzero(v54, v53);
    v55 = *(unsigned int *)(a2 + 3536);
    if ((_DWORD)v55)
    {
      v56 = 0;
      v57 = 0;
      v58 = MEMORY[0x1E0C809B0];
      while (1)
      {
        v59 = a2 + 8 * v56;
        if (*(_QWORD *)(v59 + 3544))
          break;
        if (*(_QWORD *)(v59 + 464))
        {
          _MDStoreOIDArrayGetVectorCount();
          v137 = v58;
          v138 = 0x40000000;
          v139 = __si_querypipe_addresults_block_invoke;
          v140 = &unk_1E6E2FB88;
          v145 = v56;
          v143 = v8;
          v144 = v124;
          v141 = buf;
          v142 = v54;
          _MDStoreOIDArrayApplyBlock();
          v151[3] += *(_QWORD *)&v54[8 * v56];
          v60 = a2 + 8 * v56;
          if (!*(_QWORD *)(v60 + 1488))
            *(_QWORD *)(v60 + 1488) = _MDPlistBytesCreateMutableUsingMallocWithZone();
          v57 += _MDPlistBytesGetByteVectorCount();
          v55 = *(unsigned int *)(a2 + 3536);
        }
        if (++v56 >= v55)
          goto LABEL_83;
      }
LABEL_150:
      v100 = __si_assert_copy_extra_268();
      __message_assert_272((uint64_t)v100, v101, v102, v103, v104, v105, v106, v107, (char)"SISearchCtx.h");
      free(v100);
      if (__valid_fs(-1))
        v108 = 2989;
      else
        v108 = 3072;
      *(_DWORD *)v108 = -559038737;
      abort();
    }
    v55 = 0;
    v57 = 0;
LABEL_83:
    v61 = v151[3];
    v62 = v123;
    if (v61)
    {
      v63 = v121;
      if (v121 == 1)
      {
        v71 = v122;
        if (!v55)
          goto LABEL_130;
        v72 = 0;
        v73 = 0;
        do
        {
          if (*(_QWORD *)(v71 + 8 * v72))
          {
            v74 = _MDStoreOIDArrayGetVectorCount();
            v55 = *(unsigned int *)(a2 + 3536);
          }
          else
          {
            v74 = 0;
          }
          v73 += v74;
          ++v72;
        }
        while (v72 < v55);
        v68 = v61 == v73;
        v62 = v123;
        v63 = v121;
        if (!v68)
        {
LABEL_130:
          v69 = (const void *)v124;
          if (*(_BYTE *)(v8 + 99))
          {
            v128[0] = MEMORY[0x1E0C809B0];
            v128[1] = 0x40000000;
            v129 = __si_querypipe_addresults_block_invoke_2;
            v130 = &unk_1E6E2FBF0;
            v131 = &v150;
            v132 = buf;
            v133 = v124;
            v134 = v8;
            v135 = v62;
            v136 = 1;
            if (v57 >= 0xFFFFFFFF)
            {
              if (v55)
              {
                v96 = 0;
                while (1)
                {
                  v97 = (_QWORD *)(a2 + 8 * v96);
                  if (v97[443])
                    break;
                  v98 = (const void *)v97[58];
                  v97[58] = 0;
                  v99 = (const void *)v97[186];
                  v97[186] = 0;
                  v129((uint64_t)v128, v98, v99);
                  v70 = 0;
                  if (++v96 >= (unint64_t)*(unsigned int *)(a2 + 3536))
                    goto LABEL_106;
                }
                v109 = __si_assert_copy_extra_268();
                v117 = v109;
                goto LABEL_158;
              }
            }
            else
            {
              v90 = PartialQueryResults::ownOidArray((PartialQueryResults *)a2);
              v91 = PartialQueryResults::ownFields((PartialQueryResults *)a2);
              v129((uint64_t)v128, (const void *)v90, (const void *)v91);
            }
          }
          v70 = 0;
LABEL_106:
          if (v69)
            CFRelease(v69);
          if (v70)
          {
            if (v57 >= 0xFFFFFFFF)
            {
              v82 = *(unsigned int *)(a2 + 3536);
              v83 = v125;
              if ((_DWORD)v82)
              {
                v84 = 0;
                do
                {
                  v85 = (_QWORD *)(a2 + 8 * v84);
                  if (v85[443])
                    goto LABEL_150;
                  v86 = (const void *)v85[58];
                  v87 = *(_QWORD *)&v54[8 * v84];
                  v85[58] = 0;
                  v88 = (const void *)v85[186];
                  v85[186] = 0;
                  if (++v84 == v82)
                    v89 = v83;
                  else
                    v89 = 0;
                  _si_querypipe_addoids(v8, v63, v86, v87, v88, v89, v62);
                  v82 = *(unsigned int *)(a2 + 3536);
                }
                while (v84 < v82);
              }
            }
            else
            {
              if (*(_QWORD *)(a2 + 3544))
                goto LABEL_150;
              v75 = *(const void **)(a2 + 464);
              *(_QWORD *)(a2 + 464) = 0;
              _MDStoreOIDArrayAppendMultipleOIDArrays();
              v76 = v151[3];
              v77 = *(const void **)(a2 + 1488);
              *(_QWORD *)(a2 + 1488) = 0;
              v78 = *(_DWORD *)(a2 + 3536);
              v79 = v125;
              if (v77)
              {
LABEL_139:
                _MDPlistBytesAppendMultiplePlistBytes();
              }
              else
              {
                v92 = 0;
                if (v78 <= 1)
                  v93 = 1;
                else
                  v93 = v78;
                v94 = a2 + 1496;
                v95 = v93 - 1;
                while (v95 != v92)
                {
                  v77 = *(const void **)(v94 + 8 * v92);
                  *(_QWORD *)(v94 + 8 * v92++) = 0;
                  if (v77)
                    goto LABEL_139;
                }
                v77 = 0;
              }
              _si_querypipe_addoids(v8, v121, v75, v76, v77, v79, v62);
            }
          }
          else
          {
            if (v125)
              si_querypipe_remove_process(v8, v62, 0, 0);
            v80 = v8;
            do
            {
              v81 = v80;
              v80 = *(_QWORD *)(v80 + 80);
            }
            while (v80);
            si_resultqueue_start(*(_QWORD *)(v81 + 8));
          }
          _Block_object_dispose(buf, 8);
          _Block_object_dispose(&v150, 8);
          if (!v70)
            return;
          goto LABEL_67;
        }
      }
      else
      {
        v64 = v122;
        if (!v121)
        {
          if (!v55)
            goto LABEL_167;
          v65 = 0;
          v66 = 0;
          do
          {
            if (*(_QWORD *)(v64 + 8 * v65))
            {
              v67 = _MDStoreOIDArrayGetVectorCount();
              v55 = *(unsigned int *)(a2 + 3536);
            }
            else
            {
              v67 = 0;
            }
            v66 += v67;
            ++v65;
          }
          while (v65 < v55);
          v68 = v61 == v66;
          v62 = v123;
          v63 = v121;
          if (!v68)
          {
LABEL_167:
            if (*(_BYTE *)(v8 + 99))
            {
              v69 = (const void *)v124;
              PartialQueryResults::removeDupsInPlace(a2);
              v70 = 1;
              goto LABEL_106;
            }
          }
        }
      }
      v70 = 1;
    }
    else
    {
      v63 = v121;
      v70 = v121 > 1;
    }
    v69 = (const void *)v124;
    goto LABEL_106;
  }
  if (!v19)
    goto LABEL_67;
  v30 = 0;
  while (1)
  {
    if (*(_QWORD *)(v22 + 8 * v30))
      v31 = _MDStoreOIDArrayGetVectorCount();
    else
      v31 = 0;
    if (*(_QWORD *)(a2 + 8 * v30 + 3544))
    {
      v109 = __si_assert_copy_extra_268();
      v117 = v109;
LABEL_158:
      v118 = "SISearchCtx.h";
LABEL_159:
      __message_assert_272((uint64_t)v109, v110, v111, v112, v113, v114, v115, v116, (char)v118);
      free(v117);
      if (__valid_fs(-1))
        v119 = 2989;
      else
        v119 = 3072;
      *(_DWORD *)v119 = -559038737;
      abort();
    }
    v32 = *(_QWORD *)(v22 + 8 * v30) ? (const void *)_MDStoreOIDArrayGetVector() : 0;
    v33 = malloc_type_malloc(8 * v31, 0x100004000313F17uLL);
    v34 = v33;
    v150 = 0;
    v151 = &v150;
    v152 = 0x2000000000;
    v153 = 0;
    if (!v32)
      break;
    memcpy(v33, v32, 8 * v31);
    qsort(v34, v31, 8uLL, (int (__cdecl *)(const void *, const void *))_oidCmp);
    v35 = v8;
    do
    {
      v36 = v35;
      v35 = *(_QWORD *)(v35 + 80);
    }
    while (v35);
    v37 = *(_QWORD *)(v36 + 40);
    v126[0] = MEMORY[0x1E0C809B0];
    v126[1] = 0x40000000;
    v126[2] = __si_querypipe_addresults_block_invoke_5;
    v126[3] = &unk_1E6E2FC18;
    v127 = v124;
    v126[4] = &v150;
    v126[5] = v32;
    RLEOIDArrayRemoveSortedOids(v37, (unint64_t *)v34, v31, (uint64_t)v126);
    v38 = v8;
    if (!v151[3])
      break;
    do
    {
      v39 = v38;
      v38 = *(_QWORD *)(v38 + 80);
    }
    while (v38);
    if (*MEMORY[0x1E0C85AD8] <= 0x3FuLL)
      ++sTotal;
    v40 = *(_QWORD *)(v39 + 8);
    v41 = malloc_type_zone_calloc((malloc_zone_t *)queryZone, 1uLL, 0x40uLL, 0x31F9A007uLL);
    if (!v41)
      _log_fault_for_malloc_failure();
    v41[1] = *(_OWORD *)(v8 + 48);
    *((_QWORD *)v41 + 1) = si_querypipe_copy_jobid(v8);
    v42 = v151[3];
    v43 = 8 * v42;
    if (v42 < 512)
    {
      v44 = malloc_good_size(v43 + 8);
      v45 = malloc_type_malloc(v44, 0xC3AD8767uLL);
      goto LABEL_52;
    }
    v45 = mmap(0, ((v43 | 7) + *MEMORY[0x1E0C85AD8]) & ~*MEMORY[0x1E0C85AC0], 3, 4098, -268435456, 0);
    if (v45 == (_QWORD *)-1)
    {
      v109 = __si_assert_copy_extra_268();
      v117 = v109;
      v118 = "SIQueryPipe.cpp";
      goto LABEL_159;
    }
LABEL_52:
    v46 = v8;
    do
    {
      v47 = v46;
      v46 = *(_QWORD *)(v46 + 80);
    }
    while (v46);
    v48 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(v47 + 8) + 80) << 32) | 0xDE10000;
    *v45 = v48;
    *v45 = *((unsigned __int16 *)v151 + 12) | v48;
    memcpy(v45 + 1, v34, 8 * v151[3]);
    free(v34);
    *(_DWORD *)v41 = 7;
    *((_QWORD *)v41 + 5) = 0;
    *((_QWORD *)v41 + 4) = _MDStoreOIDArrayCreateMutableWithOids();
    _MDStoreOIDArraySetShouldUseMalloc();
    *((_DWORD *)v41 + 14) = 3;
    if (v125 && v30 == *(_DWORD *)(a2 + 3536) - 1)
    {
      a5 = v123;
      si_querypipe_remove_process(v8, v123, (void **)v41, 0);
      v22 = v122;
    }
    else
    {
      v22 = v122;
      a5 = v123;
      if (!si_resultqueue_enqueue(v40, (int *)v41))
      {
        if (dword_1EF19FC90 >= 5)
        {
          v49 = *__error();
          v50 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1B8270000, v50, OS_LOG_TYPE_DEFAULT, "Attempt to append to queue failed. Releasing result batch", buf, 2u);
          }
          *__error() = v49;
          v22 = v122;
          a5 = v123;
        }
        SIResultBatchFree((void **)v41);
      }
    }
    _Block_object_dispose(&v150, 8);
    if (++v30 >= (unint64_t)*(unsigned int *)(a2 + 3536))
      goto LABEL_67;
  }
  if (v125 && *(_DWORD *)(a2 + 3536) - 1 == (_DWORD)v30)
    si_querypipe_remove_process(v8, a5, 0, 0);
  free(v34);
  _Block_object_dispose(&v150, 8);
}

void si_querypipe_send_matchinfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;

  if (a2)
  {
    v4 = a1;
    do
    {
      v5 = v4;
      v4 = *(_QWORD *)(v4 + 80);
    }
    while (v4);
    v6 = *(_QWORD *)(v5 + 8);
    v7 = malloc_type_calloc(1uLL, 0x40uLL, 0x10720403C4CCC75uLL);
    v7[1] = *(_OWORD *)(a1 + 48);
    *((_QWORD *)v7 + 1) = si_querypipe_copy_jobid(a1);
    *((_QWORD *)v7 + 4) = a2;
    *(_DWORD *)v7 = 10;
    if (!si_resultqueue_enqueue(v6, (int *)v7))
      SIResultBatchFree((void **)v7);
  }
}

void PartialQueryResults::removeDupsInPlace(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  const void *Mutable;

  if (*(_DWORD *)(a1 + 3536))
  {
    v2 = 0;
    v3 = a1 + 464;
    do
    {
      Mutable = (const void *)RLEOIDArrayCreateMutable((const __CFAllocator *)kCIQueryZoneAllocator);
      if (*(_QWORD *)(v3 + 8 * v2))
      {
        _MDStoreOIDArrayGetVectorCount();
        _MDStoreOIDArrayApplyBlock();
      }
      CFRelease(Mutable);
      ++v2;
    }
    while (v2 < *(unsigned int *)(a1 + 3536));
  }
}

uint64_t si_resultqueue_start(uint64_t a1)
{
  int v2;
  uint64_t (*v4)(uint64_t, _QWORD);
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD);

  pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
  v2 = *(_DWORD *)(a1 + 84) - 1;
  *(_DWORD *)(a1 + 84) = v2;
  if (v2)
    return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
  if (*(_BYTE *)(a1 + 12))
    return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
  if (!*(_QWORD *)(a1 + 72))
    return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
  v4 = *(uint64_t (**)(uint64_t, _QWORD))(a1 + 48);
  if (!v4)
    return pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v6 = v4;
  pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)a1 + 8));
  return v6(v5, 0);
}

void termUpdateSetProcessFields(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, CFDictionaryRef theDict, unsigned int a7, int a8)
{
  CFIndex Count;
  char *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  CFTypeID v17;
  CFTypeID v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFIndex v23;
  CFIndex v24;
  CFIndex v25;
  BOOL v26;
  int v27;
  const __CFString *v28;
  const __CFString *v29;
  unsigned __int8 v30;
  CFIndex v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  CFTypeID v37;
  CFTypeID v38;
  uint64_t v39;
  CFIndex v40;
  CFTypeRef *v41;
  uint64_t v42;
  const __CFString **v43;
  CFTypeID TypeID;
  int v45;
  NSObject *v46;
  os_log_type_t v47;
  CFIndex v48;
  CFIndex v49;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  CFIndex v52;
  const __CFString *v53;
  uint64_t v54;
  __int128 v55;
  CFDictionaryRef v56;
  char *v57;
  char *v58;
  CFIndex v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t buf;
  __int16 v70;
  CFDictionaryRef v71;
  uint64_t v72;

  v64 = a5;
  v65 = a8;
  v68 = a7;
  v66 = a1;
  v67 = a4;
  v62 = a2;
  v63 = a3;
  v72 = *MEMORY[0x1E0C80C00];
  Count = CFDictionaryGetCount(theDict);
  MEMORY[0x1E0C80A78](Count);
  v10 = (char *)&v55 - ((8 * Count + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v10, 8 * Count);
  MEMORY[0x1E0C80A78](v11);
  bzero(v10, 8 * Count);
  v56 = theDict;
  v57 = v10;
  v58 = v10;
  CFDictionaryGetKeysAndValues(theDict, (const void **)v10, (const void **)v10);
  v59 = Count;
  if (Count >= 1)
  {
    v13 = 0;
    *(_QWORD *)&v12 = 67109378;
    v55 = v12;
    while (1)
    {
      v14 = *(_QWORD *)&v58[8 * v13];
      v15 = v14 & 0x3FFFFFF;
      v16 = *(const void **)&v57[8 * v13];
      v17 = CFGetTypeID(v16);
      v60 = v13;
      if ((v14 & 0x4000000) != 0 && _os_feature_enabled_impl())
      {
        if (termUpdateSetProcessVector_onceToken != -1)
          dispatch_once(&termUpdateSetProcessVector_onceToken, &__block_literal_global_31_3035);
        v18 = CFGetTypeID(v16);
        if (v18 == termUpdateSetProcessVector_sDictionaryTypeID)
        {
          termUpdateSetProcessSingleVector(v66, (CFDictionaryRef)v16, v68, v67, v15);
        }
        else if (v18 == termUpdateSetProcessVector_sArrayTypeID)
        {
          v48 = CFArrayGetCount((CFArrayRef)v16);
          if (v48 >= 1)
          {
            v49 = v48;
            for (i = 0; i != v49; ++i)
            {
              ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v16, i);
              if (CFGetTypeID(ValueAtIndex) == termUpdateSetProcessVector_sDictionaryTypeID)
                termUpdateSetProcessSingleVector(v66, ValueAtIndex, v68, v67, v15);
            }
          }
        }
        goto LABEL_4;
      }
      v19 = (int)v14 >= 0;
      v20 = (v14 >> 30) & 1;
      v21 = (v14 >> 28) & 1;
      v22 = (v14 >> 27) & 1;
      if (v17 == CFArrayGetTypeID())
        break;
      if (v17 == CFDictionaryGetTypeID())
      {
        if (!(_DWORD)v15)
        {
          v45 = *__error();
          v46 = _SILogForLogForCategory(10);
          v47 = 2 * (dword_1EF19FCB4 < 4);
          if (os_log_type_enabled(v46, v47))
            goto LABEL_42;
          goto LABEL_43;
        }
        v39 = v14 & 0x3FFFFFF;
        v40 = CFDictionaryGetCount((CFDictionaryRef)v16);
        v61 = &v55;
        MEMORY[0x1E0C80A78](v40);
        v41 = (CFTypeRef *)((char *)&v55 - ((8 * v40 + 15) & 0xFFFFFFFFFFFFFFF0));
        bzero(v41, 8 * v40);
        MEMORY[0x1E0C80A78](v42);
        v43 = (const __CFString **)v41;
        bzero(v41, 8 * v40);
        CFDictionaryGetKeysAndValues((CFDictionaryRef)v16, v41, v41);
        if (v40 == 1)
        {
          TypeID = CFNumberGetTypeID();
          if (TypeID != CFGetTypeID(*v41))
            goto LABEL_45;
          invertValueToUpdateSet(v66, 0, v63, v39, v67, v64, (uint64_t)*v41, v68, 0, 0, &stru_1E6E3A6D8, v21, v22, v65);
        }
        else if (v40 >= 1)
        {
LABEL_45:
          v52 = v40;
          do
          {
            if (v40 >= 2)
              v53 = *v43;
            else
              v53 = 0;
            v54 = (uint64_t)*v41++;
            invertValueToUpdateSet(v66, v62, v63, v39, v67, v64, v54, v68, v19, v20, v53, v21, v22, v65);
            ++v43;
            --v52;
          }
          while (v52);
        }
      }
      else
      {
        invertValueToUpdateSet(v66, v62, v63, v15, v67, v64, (uint64_t)v16, v68, v19, (v14 & 0x40000000) != 0, 0, (v14 & 0x10000000) != 0, (v14 & 0x8000000) != 0, v65);
      }
LABEL_4:
      v13 = v60 + 1;
      if (v60 + 1 == v59)
        return;
    }
    if ((_DWORD)v15)
    {
      v23 = CFArrayGetCount((CFArrayRef)v16);
      if (v23 >= 1)
      {
        v24 = v23;
        v25 = 0;
        v26 = (v14 & 0xA0000000) == 0x20000000 && (_DWORD)v20 == 0;
        v27 = v26;
        LODWORD(v61) = v27;
        do
        {
          v28 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v16, v25);
          v29 = v28;
          v30 = v19;
          if (v27)
          {
            v31 = v24;
            v32 = v16;
            v33 = v20;
            v34 = v22;
            v35 = v21;
            v36 = v15;
            v37 = CFGetTypeID(v28);
            v38 = CFStringGetTypeID();
            v30 = v19;
            v26 = v37 == v38;
            v15 = v36;
            v21 = v35;
            v22 = v34;
            v20 = v33;
            v16 = v32;
            v24 = v31;
            v27 = (int)v61;
            if (v26)
            {
              if (CFStringHasPrefix(v29, CFSTR("message:%3C")))
                v30 = 0;
              else
                v30 = v19;
            }
          }
          invertValueToUpdateSet(v66, v62, v63, v15, v67, v64, (uint64_t)v29, v68, v30, v20, 0, v21, v22, v65);
          ++v25;
        }
        while (v24 != v25);
      }
      goto LABEL_4;
    }
    v45 = *__error();
    v46 = _SILogForLogForCategory(10);
    v47 = 2 * (dword_1EF19FCB4 < 4);
    if (os_log_type_enabled(v46, v47))
    {
LABEL_42:
      buf = v55;
      v70 = 2112;
      v71 = v56;
      _os_log_impl(&dword_1B8270000, v46, v47, "invalid type for %d %@", (uint8_t *)&buf, 0x12u);
    }
LABEL_43:
    *__error() = v45;
    goto LABEL_4;
  }
}

unint64_t invertValueToUpdateSet(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, char a10, const __CFString *a11, char a12, char a13, char a14)
{
  uint64_t v14;
  int v15;
  int v16;
  const __CFString *v17;
  const __CFString *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD **v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  CFTypeID v31;
  size_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unint64_t v55;
  unsigned __int8 *v56;
  size_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t result;
  _DWORD *v65;
  _DWORD *v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  char *v74;
  uint64_t v75;
  _OWORD *v76;
  uint64_t v77;
  _QWORD **v78;
  const __CFString *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[15];
  _OWORD v85[2];
  unsigned __int8 v86;
  char v87;
  char v88;
  char v89;
  CFTypeRef cf;
  void *v91;
  uint64_t v92;

  v14 = MEMORY[0x1E0C80A78](a1);
  v16 = v15;
  v18 = v17;
  v69 = v19;
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v28 = v14;
  v92 = *MEMORY[0x1E0C80C00];
  if (__THREAD_SLOT_KEY)
  {
    v29 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v29)
      goto LABEL_105;
  }
  else
  {
    makeThreadId();
    v29 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v29)
    {
LABEL_105:
      makeThreadId();
      v29 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
      v30 = a9;
      if (!v29)
        goto LABEL_7;
      goto LABEL_5;
    }
  }
  if (v29 >= 0x801)
    goto LABEL_105;
  v30 = a9;
LABEL_5:
  if (v29 <= 0x800)
    ++threadData[18 * v29 - 12];
LABEL_7:
  v31 = CFGetTypeID(v18);
  bzero(&v86, 0x414uLL);
  if (v31 == CFStringGetTypeID())
  {
    if (!a12)
    {
      if (v23 < 6)
      {
        v74 = 0;
        v75 = 0;
        v38 = *(_QWORD *)(v28 + 40);
        v70 = v28;
        v71 = v38;
        v72 = v21;
        v73 = v69;
        LODWORD(v75) = v23;
        BYTE4(v75) = a14;
        v39 = *(_QWORD *)(v28 + 8) + v21;
        v40 = (*(_DWORD *)(v28 + 616) >> 1) & 0x10;
        *(_QWORD *)(v28 + 584) = v39;
        if (v23)
        {
          bzero(&cf, 0x1810uLL);
          v41 = *(void **)(v25 + 64);
          if (v41)
          {
            free(v41);
            *(_QWORD *)(v25 + 64) = 0;
            v42 = *(const void **)(v25 + 56);
            if (v42)
              CFRelease(v42);
            *(_QWORD *)(v25 + 56) = 0;
            *(_DWORD *)(v25 + 72) = MEMORY[0x1BCCB02D8](0);
          }
          v43 = *(_QWORD *)(v25 + 8);
          v44 = _getContentRankedTokensCallback;
          v45 = _getContentRankedSubTokensCallback;
        }
        else
        {
          bzero(&cf, 0x1810uLL);
          v48 = *(void **)(v25 + 64);
          if (v48)
          {
            free(v48);
            *(_QWORD *)(v25 + 64) = 0;
            v49 = *(const void **)(v25 + 56);
            if (v49)
              CFRelease(v49);
            *(_QWORD *)(v25 + 56) = 0;
            *(_DWORD *)(v25 + 72) = MEMORY[0x1BCCB02D8](0);
          }
          v43 = *(_QWORD *)(v25 + 8);
          v44 = _getContentTokensCallback;
          v45 = _getContentSubTokensCallback;
        }
        v50 = v25;
        v51 = (uint64_t)v18;
        v52 = v40;
        v53 = 0;
      }
      else
      {
        memset(v85, 0, sizeof(v85));
        if (v30)
        {
          LOWORD(v85[0]) = 257;
          v37 = 2;
        }
        else
        {
          v37 = 0;
        }
        v83 = 0;
        v82 = 0;
        memset(v84, 0, sizeof(v84));
        v81 = 1;
        if ((v23 & 0xFE00000) != 0)
        {
          LOBYTE(v82) = v23 | 0x80;
          BYTE1(v82) = (v23 >> 7) | 0x80;
          BYTE2(v82) = (v23 >> 14) | 0x80;
          v23 = (v23 & 0xFE00000) >> 21;
          v46 = 5;
          v47 = 4;
        }
        else if ((v23 & 0x1FC000) != 0)
        {
          LOBYTE(v82) = v23 | 0x80;
          BYTE1(v82) = (v23 >> 7) | 0x80;
          v23 = (v23 & 0x1FC000) >> 14;
          v46 = 4;
          v47 = 3;
        }
        else if ((v23 & 0x3F80) != 0)
        {
          LOBYTE(v82) = v23 | 0x80;
          v23 = (unsigned __int16)(v23 & 0x3F80) >> 7;
          v46 = 3;
          v47 = 2;
        }
        else
        {
          v46 = 2;
          v47 = 1;
        }
        *(&v81 + v47) = v23;
        *(&v81 + v46) = 0;
        v80 = 256;
        v70 = v28;
        v71 = v21;
        v72 = v69;
        v73 = v16;
        v74 = &v81;
        v75 = v46;
        v76 = v85;
        v77 = v37;
        v78 = v27;
        v79 = a11;
        if ((*(_BYTE *)(v28 + 616) & 0x20) != 0)
          v62 = 17;
        else
          v62 = 1;
        BYTE3(v80) = v30 != 0;
        if (a13)
          v63 = 0;
        else
          v63 = *(_QWORD *)(v28 + 608);
        bzero(&cf, 0x1810uLL);
        CITokenizerSetLocale(v25, a11, 0);
        v43 = *(_QWORD *)(v25 + 8);
        v44 = _getPropertyTokenCallback;
        v45 = _getPropertySubTokenCallback;
        v50 = v25;
        v51 = (uint64_t)v18;
        v52 = v62;
        v53 = v63;
      }
      _CITokenizerGetTokens(v50, v43, v51, (uint64_t)&cf, v52, v53, (uint64_t)v44, (uint64_t)v45, 0, 0, (uint64_t)&v70);
      if (cf)
        CFRelease(cf);
      v61 = v91;
      if (v91)
        goto LABEL_98;
      goto LABEL_99;
    }
    bzero(&cf, 0x414uLL);
    if (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 608) == getPropertyStringCallback)
    {
      if (v23)
      {
        LOWORD(cf) = 513;
        if ((v23 & 0xFE00000) != 0)
        {
          BYTE2(cf) = v23 | 0x80;
          BYTE3(cf) = (v23 >> 7) | 0x80;
          BYTE4(cf) = (v23 >> 14) | 0x80;
          v23 = (v23 & 0xFE00000) >> 21;
          v32 = 6;
          v33 = 5;
          goto LABEL_71;
        }
        if ((v23 & 0x1FC000) != 0)
        {
          BYTE2(cf) = v23 | 0x80;
          BYTE3(cf) = (v23 >> 7) | 0x80;
          v23 = (v23 & 0x1FC000) >> 14;
          goto LABEL_13;
        }
        if ((v23 & 0x3F80) != 0)
        {
          BYTE2(cf) = v23 | 0x80;
          v23 = (unsigned __int16)(v23 & 0x3F80) >> 7;
          goto LABEL_42;
        }
LABEL_69:
        v32 = 3;
        v33 = 2;
        goto LABEL_71;
      }
    }
    else if (v23)
    {
      LOBYTE(cf) = 1;
      if ((v23 & 0xFE00000) != 0)
      {
        BYTE1(cf) = v23 | 0x80;
        BYTE2(cf) = (v23 >> 7) | 0x80;
        BYTE3(cf) = (v23 >> 14) | 0x80;
        v23 = (v23 & 0xFE00000) >> 21;
LABEL_13:
        v32 = 5;
        v33 = 4;
LABEL_71:
        *((_BYTE *)&cf + v33) = v23;
        *((_BYTE *)&cf + v32) = 0;
LABEL_72:
        v58 = CIDecomposeCFString(v18, &cf, v32);
        v59 = v58;
        if (v58)
        {
          v60 = strlen((const char *)&v58[v32]) + v32;
          if (v60 >= 0x414)
          {
            if ((v59[1043] & 0xC0) == 0x80)
            {
              v60 = 1043;
            }
            else if ((v59[1042] & 0xC0) == 0x80)
            {
              v60 = 1042;
            }
            else if ((v59[1041] & 0xC0) == 0x80)
            {
              v60 = 1041;
            }
            else if ((v59[1040] & 0xC0) == 0x80)
            {
              v60 = 1040;
            }
            else
            {
              v60 = 1039;
            }
            v59[v60] = 0;
          }
          pushPropertyTerm(v28, v60, v59, v21, v69, v16, 1);
        }
        if (v59 != (unsigned __int8 *)&cf)
        {
          v61 = v59;
LABEL_98:
          free(v61);
          goto LABEL_99;
        }
        goto LABEL_99;
      }
      if ((v23 & 0x1FC000) != 0)
      {
        BYTE1(cf) = v23 | 0x80;
        BYTE2(cf) = (v23 >> 7) | 0x80;
        v23 = (v23 & 0x1FC000) >> 14;
LABEL_42:
        v32 = 4;
        v33 = 3;
        goto LABEL_71;
      }
      if ((v23 & 0x3F80) == 0)
      {
        v32 = 2;
        v33 = 1;
        goto LABEL_71;
      }
      BYTE1(cf) = v23 | 0x80;
      v23 = (unsigned __int16)(v23 & 0x3F80) >> 7;
      goto LABEL_69;
    }
    v32 = 0;
    goto LABEL_72;
  }
  if (v31 == CFNumberGetTypeID() || v31 == CFBooleanGetTypeID())
  {
    if (a11)
      v34 = 4;
    else
      v34 = 2;
  }
  else
  {
    if (v31 != CFDateGetTypeID())
      goto LABEL_99;
    v34 = 3;
  }
  v86 = v34;
  if ((v23 & 0xFE00000) != 0)
  {
    v87 = v23 | 0x80;
    v88 = (v23 >> 7) | 0x80;
    v89 = (v23 >> 14) | 0x80;
    v23 = (v23 & 0xFE00000) >> 21;
    v35 = 5;
    v36 = 4;
  }
  else if ((v23 & 0x1FC000) != 0)
  {
    v87 = v23 | 0x80;
    v88 = (v23 >> 7) | 0x80;
    v23 = (v23 & 0x1FC000) >> 14;
    v35 = 4;
    v36 = 3;
  }
  else if ((v23 & 0x3F80) != 0)
  {
    v87 = v23 | 0x80;
    v23 = (unsigned __int16)(v23 & 0x3F80) >> 7;
    v35 = 3;
    v36 = 2;
  }
  else
  {
    v35 = 2;
    v36 = 1;
  }
  *(&v86 + v36) = v23;
  v54 = &v86 + v35;
  v55 = FlattenCFTypeToBuffer(v18, &v86 + v35) + v35;
  if (!a10)
    pushPropertyTerm(v28, v55, &v86, v21, v69, v16, 1);
  if (v30)
  {
    *(v54 - 2) = v34;
    v56 = v54 - 2;
    v56[1] = 1;
    v57 = v55 + &v86 - (_DWORD)v56;
    if (v27)
      pushPropertyTermForWildCard(v27, v57, v56, v16);
    else
      pushPropertyTerm(v28, v57, v56, v21, v69, v16, 1);
  }
LABEL_99:
  result = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
  if (result && result <= 0x800)
  {
    v65 = &threadData[18 * result];
    v68 = *(v65 - 12);
    v66 = v65 - 12;
    v67 = v68;
    if (v68)
      *v66 = v67 - 1;
  }
  return result;
}

void _CITokenizerGetTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(_QWORD, _QWORD *, uint64_t *), void (*a10)(_QWORD, uint64_t, uint64_t), uint64_t a11)
{
  uint64_t v11;
  void (*v12)(_QWORD);
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v14)(_QWORD, _QWORD, uint64_t);
  void (*v15)(_QWORD, uint64_t, uint64_t);
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  const __CFString *v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  const __CFAllocator *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t NFCInstance;
  int v73;
  int v74;
  size_t v75;
  char *v76;
  int v77;
  int v78;
  CFStringRef v79;
  CFStringRef v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  BOOL v87;
  uint64_t v88;
  int v89;
  BOOL v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  char v94;
  uint64_t v95;
  uint64_t SubTokensOfCompound;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  int v108;
  uint64_t *v109;
  BOOL v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  int v120;
  BOOL v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unsigned __int16 *v131;
  uint64_t v132;
  int v133;
  char v134;
  char v135;
  char v137;
  uint64_t v138;
  char v139;
  uint64_t (*v140)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned __int16 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  unsigned __int16 *v146;
  int v147;
  const __CFCharacterSet *Predefined;
  uint64_t *v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  const __CFCharacterSet *v158;
  uint64_t *v159;
  int v160;
  BOOL v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  BOOL v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t v175;
  _BOOL4 v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  __CFString *v180;
  UniChar *v181;
  CFMutableStringRef MutableWithExternalCharactersNoCopy;
  uint64_t DerivedTokens;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  void (*v187)(_QWORD, uint64_t, uint64_t);
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  UniChar *v193;
  UniChar *v194;
  int v195;
  CFIndex v196;
  CFStringRef v197;
  CFStringRef v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  unsigned int v205;
  CFAllocatorRef v206;
  uint64_t *v207;
  uint64_t *v208;
  uint64_t *v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t v213;
  void (*v214)(_QWORD, uint64_t, uint64_t);
  uint64_t *v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t (*v218)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v219;
  void (*v220)(_QWORD, _QWORD *, uint64_t *);
  void (*v221)(_QWORD);
  _OWORD *v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  __int128 *v226;
  uint64_t v227;
  _QWORD v228[258];
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  __int128 v233;
  __int128 v234;
  _QWORD v235[4];
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  _DWORD v241[130];
  _QWORD v242[257];
  _QWORD v243[254];
  uint64_t v244;
  _QWORD v245[2];
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD v253[257];
  _OWORD v254[257];
  uint64_t v255;
  CFRange v256;

  v11 = MEMORY[0x1E0C80A78](a1);
  v221 = v12;
  v218 = v13;
  v15 = v14;
  v17 = v16;
  v213 = v18;
  v20 = v19;
  v22 = v21;
  v23 = v11;
  v255 = *MEMORY[0x1E0C80C00];
  bzero(v228, 0xC30uLL);
  v230 = -1;
  v24 = *(_QWORD *)(v23 + 8);
  v223 = v22;
  v224 = v23;
  v225 = v17;
  if (v24 != v22)
    goto LABEL_2;
  if ((v17 & 4) != 0)
  {
    LODWORD(v25) = 1;
  }
  else
  {
    v26 = *(_DWORD *)(v23 + 72);
    if (v26 > 0x36)
    {
LABEL_2:
      LODWORD(v25) = 0;
      goto LABEL_7;
    }
    v25 = (0x40000000300030uLL >> v26) & 1;
  }
LABEL_7:
  v27 = *(_DWORD *)(v224 + 40);
  v240 = 0;
  v239 = 0u;
  v238 = 0u;
  v237 = 0u;
  v236 = 0u;
  memset(v235, 0, sizeof(v235));
  v234 = 0u;
  v233 = 0u;
  bzero(v254, 0x1010uLL);
  bzero(v253, 0x808uLL);
  bzero(&v249, 0x1010uLL);
  bzero(v245, 0x808uLL);
  bzero(v243, 0x808uLL);
  bzero(v242, 0x808uLL);
  v28 = v25;
  v29 = v224;
  CITokenizerStateInit((uint64_t)&v233, v20, v28, (v225 >> 6) & 1);
  if (*(_QWORD *)(v224 + 16) == v223)
    LOBYTE(v240) = 1;
  v227 = a11;
  v214 = a10;
  v30 = *((_QWORD *)&v239 + 1);
  if (!*((_QWORD *)&v239 + 1))
  {
    v187 = v214;
    if ((v225 & 1) != 0)
    {
      if (v15)
        v15(0, 0, v227);
      if (v218)
        v218(0, 0, 0, v227);
    }
    goto LABEL_356;
  }
  _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  if (v15)
    v15(v238, v30, v227);
  v216 = v30;
  v219 = 0;
  v220 = a9;
  v31 = &v236;
  v222 = &v235[1];
  v32 = (const __CFAllocator *)*MEMORY[0x1E0C9AE20];
  v205 = v225 & 0xFFFFFFFE;
  v203 = v213 + 4112;
  v204 = v213 + 16;
  v217 = &v229;
  v33 = v245;
  v206 = v32;
  v207 = &v246;
  v202 = (_QWORD *)(v213 + 24);
  v215 = &v250;
  v211 = &v244;
  v212 = &v248;
  v210 = &v252;
  v208 = &v251;
  v209 = &v247;
  v34 = 1;
  v35 = 4294959088;
  v36 = 65293;
  v226 = &v236;
LABEL_13:
  while (2)
  {
    while (2)
    {
      while (2)
      {
        v37 = *((_QWORD *)&v234 + 1);
        while (1)
        {
          v38 = v234;
          if (v37 >= (uint64_t)v234)
          {
            v67 = *((_QWORD *)&v233 + 1);
            v68 = v233;
            if (*((uint64_t *)&v233 + 1) >= (uint64_t)v233)
            {
              *((_QWORD *)&v233 + 1) = 0;
              if ((v225 & 2) != 0)
                v68 = _NLStringTokenizerTokenize();
              else
                v68 = _NLStringTokenizerTokenizeWithTranscriptions();
              *(_QWORD *)&v233 = v68;
              v34 = 1;
              v35 = 4294959088;
              v36 = 65293;
              if (!v68)
              {
                if (v219 < v216 && *(_QWORD *)(v29 + 8) == v223)
                  handle_missing_punctuation(v238, v219, v216, v218, v227, 0);
                goto LABEL_334;
              }
              v219 = *((_QWORD *)&v254[v68 - 1] + 1) + *(_QWORD *)&v254[v68 - 1];
              v67 = *((_QWORD *)&v233 + 1);
              v33 = v245;
            }
            v69 = v67 + 1;
            v70 = v253[v67];
            *((_QWORD *)&v233 + 1) = v67 + 1;
            v235[3] = v70;
            *v222 = v254[v67];
            if (v235[2] == 1)
            {
              if (*(_WORD *)(v238 + 2 * v235[1]) == 8204)
                goto LABEL_13;
              if ((_BYTE)v240)
                goto LABEL_123;
            }
            else if ((_BYTE)v240)
            {
              if (v235[2] > 256)
                goto LABEL_13;
              goto LABEL_123;
            }
            if ((v70 & 1) != 0 || v69 < v68 && (v253[v69] & 1) != 0)
            {
              if ((v70 & 0x40001000) != 0
                || (v71 = *(unsigned __int16 *)(v238 + 2 * v235[1]), v71 >> 8 >= 0x11)
                && ((v71 & 0xFF00) == 0x1100 || (v71 - 11904) >> 7 < 0x197 || v71 - 65376 <= 0x4F))
              {
                v241[0] = 0;
                unorm2_getNFCInstance();
                v187 = v214;
                v30 = v216;
                if (v241[0] <= 0)
                {
                  v191 = v235[1];
                  v192 = v216 - v235[1];
                  v193 = (UniChar *)malloc_type_malloc(2 * (v216 - v235[1]), 0x4AF24339uLL);
                  if (v193)
                  {
                    v194 = v193;
                    v195 = unorm2_normalize();
                    if (v241[0] <= 0)
                    {
                      v196 = v192 >= v195 ? v195 : v30 - v191;
                      v197 = CFStringCreateWithCharactersNoCopy(0, v194, v196, v206);
                      if (v197)
                      {
                        v198 = v197;
                        v199 = v224;
                        if (!*(_QWORD *)(v224 + 16))
                          *(_QWORD *)(v199 + 16) = NLStringTokenizerCreate();
                        _NLStringTokenizerSetLocale();
                        _CITokenizerGetTokens(v199, *(_QWORD *)(v199 + 16), v198, v213, v205, 0, v218, v221, 0, 0, v227);
                        CFRelease(v198);
                      }
                    }
                    free(v194);
                  }
                }
                goto LABEL_356;
              }
            }
            if (v235[2] > 256)
              goto LABEL_13;
            if ((~(_WORD)v70 & 0x401) == 0)
            {
              v241[0] = 0;
              NFCInstance = unorm2_getNFCInstance();
              if (v241[0] <= 0)
              {
                v73 = v235[2];
                v74 = v235[2];
                MEMORY[0x1E0C80A78](NFCInstance);
                v76 = (char *)&v200 - ((v75 + 15) & 0x3FFFFFFF0);
                bzero(v76, v75);
                v77 = unorm2_normalize();
                if (v241[0] <= 0)
                {
                  v78 = v77;
                  if (v77 <= v73 && (v77 != v73 || !memcmp(v76, (const void *)(v238 + 2 * v235[1]), 2 * v74)))
                  {
                    v79 = CFStringCreateWithCharactersNoCopy(0, (const UniChar *)v76, v78, v206);
                    if (v79)
                    {
                      v80 = v79;
                      v31 = v226;
                      if (!*(_QWORD *)(v29 + 16))
                        *(_QWORD *)(v29 + 16) = NLStringTokenizerCreate();
                      _NLStringTokenizerSetLocale();
                      _CITokenizerGetTokens(v29, *(_QWORD *)(v29 + 16), v80, v213, v205, 0, v218, v221, 0, 0, v227);
                      CFRelease(v80);
                      v33 = v245;
                      v34 = 1;
                      v35 = 4294959088;
                      v36 = 65293;
                      goto LABEL_13;
                    }
                  }
                }
                v31 = v226;
              }
              v33 = v245;
              v34 = 1;
              v35 = 4294959088;
              v36 = 65293;
            }
LABEL_123:
            v94 = v225;
            if ((v225 & 2) == 0)
            {
              if (v243[v67])
              {
                *(_OWORD *)(v29 + 88) = *(_OWORD *)&v235[1];
                *(_QWORD *)(v29 + 104) = v67;
                if (v221)
                {
                  v221(v242[v67]);
                  v36 = 65293;
                  v35 = 4294959088;
                  v34 = 1;
                  v33 = v245;
                }
              }
            }
            *((_QWORD *)&v234 + 1) = 0;
            DWORD2(v237) = 0;
            if ((v235[3] & 0xFFFFFFFFFFFFFFFDLL) == 0)
            {
              *(_QWORD *)&v234 = 1;
              v249 = 0;
              v250 = v235[2];
              v245[0] = 0;
              goto LABEL_140;
            }
            if ((v235[3] & 0x400) == 0)
              goto LABEL_129;
            v180 = *(__CFString **)v213;
            if (*(_QWORD *)v213)
            {
              v256.length = CFStringGetLength(*(CFStringRef *)v213);
              v256.location = 0;
              CFStringDelete(v180, v256);
              v29 = v224;
              v31 = v226;
            }
            else
            {
              v181 = *(UniChar **)(v213 + 8);
              v29 = v224;
              v31 = v226;
              if (!v181)
              {
                v181 = (UniChar *)malloc_type_malloc(0x400uLL, 0x1000040BDFB0063uLL);
                *(_QWORD *)(v213 + 8) = v181;
                if (!v181)
                  goto LABEL_334;
              }
              MutableWithExternalCharactersNoCopy = CFStringCreateMutableWithExternalCharactersNoCopy(0, v181, 0, 512, v206);
              *(_QWORD *)v213 = MutableWithExternalCharactersNoCopy;
              if (!MutableWithExternalCharactersNoCopy)
                goto LABEL_334;
            }
            *(_QWORD *)&v234 = 0;
            DerivedTokens = _NLStringTokenizerGetDerivedTokens();
            *(_QWORD *)&v234 = DerivedTokens;
            if (DerivedTokens == 1)
            {
              v95 = v235[2];
              v94 = v225;
              v33 = v245;
              v35 = 4294959088;
              v36 = 65293;
              if (v235[2] == v250)
              {
                *(_QWORD *)&v234 = 0;
                v34 = 1;
                goto LABEL_130;
              }
              DerivedTokens = 1;
              v34 = 1;
            }
            else
            {
              v94 = v225;
              v33 = v245;
              v34 = 1;
              v35 = 4294959088;
              v36 = 65293;
              if (DerivedTokens < 1)
              {
LABEL_129:
                v95 = v235[2];
                v29 = v224;
                v31 = v226;
LABEL_130:
                if (v95 >= 2 && ((v94 & 0x20) == 0 || (v235[3] & 0x200) != 0))
                {
                  SubTokensOfCompound = _NLStringTokenizerGetSubTokensOfCompound();
                  *(_QWORD *)&v234 = SubTokensOfCompound;
                  if (SubTokensOfCompound)
                  {
                    v33 = v245;
                    v34 = 1;
                    v35 = 4294959088;
                    v36 = 65293;
                    if (SubTokensOfCompound >= 2)
                    {
                      if ((v235[3] & 0x20) == 0)
                        goto LABEL_143;
                      if ((v94 & 8) != 0 && (v235[3] & 0x40001000) == 0)
                      {
                        v97 = v235[2];
                        v98 = &v249 + 2 * *((_QWORD *)&v234 + 1);
                        *v98 = 0;
                        v98[1] = v97;
                        *(_QWORD *)&v234 = 1;
LABEL_140:
                        SubTokensOfCompound = 1;
                        goto LABEL_143;
                      }
                      v168 = 0;
                      v169 = 0;
                      v170 = 0;
                      v171 = 0;
                      v172 = v238;
                      v173 = v235[1];
                      v174 = v215;
                      v117 = SubTokensOfCompound;
                      while (1)
                      {
                        v175 = v245[v169];
                        if ((v175 & 0x20) != 0)
                          break;
                        v176 = (v175 & 0xFFFFFFFFFFFFFFF1) == 0;
                        if ((v176 & v170) != 1)
                          goto LABEL_305;
                        if (*v174 > 2)
                        {
                          v176 = 1;
LABEL_305:
                          v179 = v168 + (v170 & 1);
                          *((_OWORD *)&v249 + v179) = *(_OWORD *)(v174 - 1);
                          v168 = v179 + 1;
                          v245[v179] = v175;
                          v170 = 0;
                          goto LABEL_306;
                        }
                        v170 = 0;
                        v176 = 0;
                        *(&v249 + 2 * v168 + 1) += *v174;
                        v245[v168++] |= v175;
                        *(_QWORD *)&v234 = --v117;
LABEL_306:
                        v171 = v176;
                        ++v169;
                        v174 += 2;
                        if (SubTokensOfCompound == v169)
                          goto LABEL_173;
                      }
                      if (*v174 == 1)
                      {
                        v177 = *(unsigned __int16 *)(v172 + 2 * (*(v174 - 1) + v173));
                        if (v177 == 8217 || v177 == 39)
                        {
                          if (!v169)
                            goto LABEL_173;
                          if (v171)
                          {
                            --v168;
                            ++*(&v249 + 2 * v168 + 1);
                            v178 = v245[v168];
                            if ((v178 & 0x20) == 0)
                              v245[v168] = v178 | 0x10000020;
                            v176 = 0;
                            *(_QWORD *)&v234 = --v117;
                            v170 = 1;
                            goto LABEL_306;
                          }
                        }
                      }
                      v176 = 0;
                      goto LABEL_305;
                    }
                    v117 = SubTokensOfCompound;
LABEL_173:
                    SubTokensOfCompound = v117;
                    if (!v117)
                      goto LABEL_13;
LABEL_143:
                    v99 = *((_QWORD *)&v234 + 1);
                    v100 = &v249 + 2 * *((_QWORD *)&v234 + 1);
                    *v31 = *(_OWORD *)v100;
                    v101 = v245[v99];
                    *(_QWORD *)&v237 = v101;
                    if ((v101 & 0x20) == 0)
                    {
                      v102 = *v100;
                      v103 = *(&v249 + 2 * SubTokensOfCompound - 1) + *(&v249 + 2 * SubTokensOfCompound - 2);
                      v235[0] = v103;
                      if (v99 >= SubTokensOfCompound)
                      {
                        v112 = v101;
                        v61 = v103;
                        goto LABEL_196;
                      }
                      v104 = 0;
                      v105 = 0;
                      v106 = v238 + 2 * v235[1];
                      if (BYTE1(v240))
                        v107 = v235[2] + v235[1] == *((_QWORD *)&v239 + 1);
                      else
                        v107 = 0;
                      v108 = v107;
                      v109 = &v215[2 * v99];
                      v110 = 1;
                      v111 = v99;
                      v112 = v101;
                      while (1)
                      {
                        if ((v245[v111] & 0x10000020) == 0x20)
                        {
                          v61 = *(v109 - 1);
                          if (v27 < 2)
                            goto LABEL_190;
                          v113 = *v109;
                          if (*v109 != 1)
                          {
                            v114 = v113 == 2 ? v108 : 0;
                            if (v114 != 1 || *(_WORD *)(v106 + 2 * v61 + 2) != 42)
                              goto LABEL_190;
                          }
                          v115 = *(unsigned __int16 *)(v106 + 2 * v61);
                          if ((v115 - 8208) >= 2 && v115 != 45 && v115 != 65293)
                          {
                            v29 = v224;
LABEL_190:
                            v235[0] = *(v109 - 1);
                            v31 = v226;
LABEL_191:
                            v33 = v245;
                            v35 = 4294959088;
                            v36 = 65293;
                            if (v105 >= 9)
                            {
                              if (v104 - v102 <= 63 && (v104 - v102) / v105 > 2)
                              {
                                if (v110)
                                  v152 = v111;
                                else
                                  v152 = SubTokensOfCompound - 1;
                                if ((v245[v152] & 0x20) != 0)
                                {
                                  v34 = 1;
                                  if (v27 < 2
                                    || (v159 = &v249 + 2 * v152, v159[1] != 1)
                                    || (v160 = *(unsigned __int16 *)(v238 + 2 * v235[1] + 2 * *v159),
                                        (v160 - 8208) >= 2)
                                    && (v160 != 45 ? (v161 = v160 == 65293) : (v161 = 1), !v161))
                                  {
                                    --v152;
                                  }
                                }
                                else
                                {
                                  v34 = 1;
                                }
                                v162 = 0;
                                v163 = &v212[2 * v152];
                                v37 = v152 - 7;
                                v164 = &v211[v152];
                                v165 = &v210[2 * v99];
                                v166 = &v209[v99];
                                do
                                {
                                  v167 = *v166--;
                                  *v164-- = v167;
                                  *(_OWORD *)&v163[v162] = *(_OWORD *)&v165[v162];
                                  v162 -= 2;
                                }
                                while (v162 != -10);
                              }
                              else
                              {
                                *(_QWORD *)&v236 = v102;
                                *((_QWORD *)&v236 + 1) = v104 - v102;
                                v37 = v105 + v99;
                                v34 = 1;
                              }
                              goto LABEL_198;
                            }
                            v34 = 1;
LABEL_196:
                            *(_QWORD *)&v237 = v112 | v101;
LABEL_197:
                            v37 = v99 + 1;
LABEL_198:
                            *((_QWORD *)&v234 + 1) = v37;
                            v60 = v236;
                            goto LABEL_199;
                          }
                          v112 |= 0x10uLL;
                          v29 = v224;
                          v31 = v226;
                        }
                        else
                        {
                          ++v105;
                          v61 = *(v109 - 1);
                          v113 = *v109;
                        }
                        v104 = v113 + v61;
                        v110 = ++v111 < SubTokensOfCompound;
                        v109 += 2;
                        if (SubTokensOfCompound == v111)
                        {
                          v61 = v103;
                          v111 = SubTokensOfCompound;
                          goto LABEL_191;
                        }
                      }
                    }
                    v61 = *((_QWORD *)&v236 + 1) + v236;
                    v235[0] = *((_QWORD *)&v236 + 1) + v236;
                    goto LABEL_197;
                  }
                  v95 = v235[2];
                  v33 = v245;
                  v34 = 1;
                  v35 = 4294959088;
                  v36 = 65293;
                }
                *(_QWORD *)&v234 = 1;
                v249 = 0;
                v250 = v95;
                SubTokensOfCompound = 1;
                v245[0] = 0;
                goto LABEL_143;
              }
            }
            v184 = 0;
            v185 = v202;
            do
            {
              if (*v185)
              {
                v186 = v224;
                *(_OWORD *)(v224 + 88) = *(_OWORD *)&v235[1];
                *(_QWORD *)(v186 + 104) = v67;
                if (v221)
                {
                  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))v221)(*(_QWORD *)(v213 + 8) + 2 * *(v185 - 1), *v185, 2, v227, 1, 4294959088, v245, 65293);
                  v36 = 65293;
                  v35 = 4294959088;
                  v34 = 1;
                  v33 = v245;
                  DerivedTokens = v234;
                }
              }
              ++v184;
              v185 += 2;
            }
            while (v184 < DerivedTokens);
            goto LABEL_129;
          }
          v39 = &v249 + 2 * v37;
          *v31 = *(_OWORD *)v39;
          v40 = v245[v37];
          *(_QWORD *)&v237 = v40;
          if (v37)
          {
            v41 = v37 + 2;
            if (v37 + 2 < v38)
            {
              v42 = v37 - 1;
              v43 = v37 - 2;
              if (v37 < 2
                || (v245[v43] & 0x20) == 0
                || *(&v249 + 2 * v43 + 1) + *(&v249 + 2 * v43) != *(&v249 + 2 * v42))
              {
                v44 = v40 & 0x20;
                if ((v245[v42] & 0x30) == 0 && v44 != 0 && v39[1] == 1)
                {
                  v46 = v235[1];
                  v47 = v238 + 2 * v235[1];
                  if (*(_WORD *)(v47 + 2 * *v39) == 46)
                  {
                    v48 = v37 + 1;
                    if ((v245[v37 + 1] & 0x30) == 0 && (v245[v41] & 0x20) != 0)
                    {
                      v49 = &v249 + 2 * v41;
                      if (v49[1] == 1 && *(_WORD *)(v47 + 2 * *v49) == 46)
                      {
                        memset(v241, 0, 512);
                        v50 = &v249 + 2 * v42;
                        v51 = v50[1];
                        v201 = v50;
                        if (v51 > 255)
                        {
                          v53 = 0;
                        }
                        else
                        {
                          v52 = v51;
                          __memcpy_chk();
                          v53 = v52;
                        }
                        v54 = &v208[2 * v37];
                        v55 = &v207[v37];
                        while ((*(_BYTE *)(v55 - 1) & 0x30) == 0)
                        {
                          if ((*(_BYTE *)v55 & 0x20) == 0)
                            goto LABEL_42;
                          if (*v54 != 1)
                            goto LABEL_42;
                          if (*(_WORD *)(v47 + 2 * *(v54 - 1)) != 46)
                            goto LABEL_42;
                          v56 = *(v54 - 2);
                          v57 = v56 + v53;
                          if (v56 + v53 > 255)
                            goto LABEL_42;
                          memcpy((char *)v241 + 2 * v53, (const void *)(v47 + 2 * *(v54 - 3)), 2 * v56);
                          v48 += 2;
                          v41 += 2;
                          v54 += 4;
                          v55 += 2;
                          v53 = v57;
                          if (v41 >= v38)
                          {
                            v48 = v41 - 1;
                            goto LABEL_43;
                          }
                        }
                        v48 = v41 - 1;
LABEL_42:
                        v57 = v53;
LABEL_43:
                        v58 = *v201 + v46;
                        v59 = *(&v249 + 2 * v48 - 2) - v58 + *(&v249 + 2 * v48 - 1);
                        v29 = v224;
                        *(_QWORD *)(v224 + 88) = v58;
                        *(_QWORD *)(v29 + 96) = v59;
                        *(_QWORD *)(v29 + 104) = *((_QWORD *)&v233 + 1) - 1;
                        v31 = v226;
                        if (v221)
                          ((void (*)(_DWORD *, uint64_t, _QWORD, uint64_t))v221)(v241, v57, 0, v227);
                        v33 = v245;
                        v34 = 1;
                        v35 = 4294959088;
                        v36 = 65293;
                      }
                    }
                  }
                }
              }
            }
          }
          v60 = v236;
          v61 = v235[0];
          if (*((_QWORD *)&v236 + 1) + (_QWORD)v236 > v235[0])
            break;
          DWORD2(v237) = 1;
          v62 = *((_QWORD *)&v234 + 1);
          v37 = ++*((_QWORD *)&v234 + 1);
          if (v62 < 1)
            goto LABEL_199;
          v63 = v235[1];
          if (v27 >= 2 && *((_QWORD *)&v236 + 1) == 1)
          {
            v64 = *(unsigned __int16 *)(v238 + 2 * v235[1] + 2 * v236);
            v65 = (v64 - 8208) < 2 || v64 == 65293;
            if (v65 || v64 == 45)
              continue;
          }
          v66 = v235[2];
          goto LABEL_200;
        }
        if ((v237 & 0x20) != 0)
        {
          if (v27 < 2
            || *((_QWORD *)&v236 + 1) != 1
            || (v92 = *(unsigned __int16 *)(v238 + 2 * v235[1] + 2 * v236), (v92 - 8208) >= 2)
            && (v92 != 45 ? (v93 = v92 == 65293) : (v93 = 1), !v93))
          {
            v235[0] = *((_QWORD *)&v236 + 1) + v236;
            v37 = *((_QWORD *)&v234 + 1) + 1;
            v61 = *((_QWORD *)&v236 + 1) + v236;
            goto LABEL_120;
          }
        }
        v81 = *(&v249 + 2 * *((_QWORD *)&v234 + 1));
        v82 = *(&v249 + 2 * (_QWORD)v234 - 1) + *(&v249 + 2 * (_QWORD)v234 - 2);
        v235[0] = v82;
        if ((uint64_t)v234 <= *((uint64_t *)&v234 + 1))
        {
          v61 = v82;
LABEL_119:
          v37 = *((_QWORD *)&v234 + 1) + 1;
          goto LABEL_120;
        }
        v83 = 0;
        v84 = 0;
        v85 = v238 + 2 * v235[1];
        v86 = &v215[2 * *((_QWORD *)&v234 + 1)];
        v87 = 1;
        v88 = *((_QWORD *)&v234 + 1);
        while (2)
        {
          v61 = *(v86 - 1);
          if ((v245[v88] & 0x10000020) != 0x20)
          {
            v91 = *v86;
            goto LABEL_102;
          }
          if (v27 < 2 || *v86 != 1)
            break;
          v89 = *(unsigned __int16 *)(v85 + 2 * v61);
          if ((v89 - 8208) < 2)
          {
            v91 = 1;
            v33 = v245;
            goto LABEL_102;
          }
          v90 = v89 == 45 || v89 == 65293;
          v91 = 1;
          v33 = v245;
          if (v90)
          {
LABEL_102:
            ++v84;
            v83 = v91 + v61;
            v87 = ++v88 < (uint64_t)v234;
            v86 += 2;
            if ((_QWORD)v234 == v88)
            {
              v61 = v82;
              v84 = v234 - *((_QWORD *)&v234 + 1);
              v88 = v234;
              goto LABEL_114;
            }
            continue;
          }
          break;
        }
        v235[0] = *(v86 - 1);
LABEL_114:
        v34 = 1;
        v36 = 65293;
        if ((unint64_t)v84 < 9)
        {
          v35 = 4294959088;
          goto LABEL_119;
        }
        v35 = 4294959088;
        if (v83 - v81 <= 63 && (v83 - v81) / v84 > 2)
        {
          if (v87)
            v118 = v88;
          else
            v118 = v234 - 1;
          if ((v245[v118] & 0x20) != 0)
          {
            if (v27 < 2
              || (v119 = &v249 + 2 * v118, v119[1] != 1)
              || (v120 = *(unsigned __int16 *)(v85 + 2 * *v119), (v120 - 8208) >= 2)
              && (v120 != 45 ? (v121 = v120 == 65293) : (v121 = 1), !v121))
            {
              --v118;
            }
          }
          v122 = 0;
          v123 = &v212[2 * v118];
          v37 = v118 - 7;
          v124 = &v211[v118];
          v125 = &v210[2 * *((_QWORD *)&v234 + 1)];
          v126 = &v209[*((_QWORD *)&v234 + 1)];
          do
          {
            v127 = *v126--;
            *v124-- = v127;
            *(_OWORD *)&v123[v122] = *(_OWORD *)&v125[v122];
            v122 -= 2;
          }
          while (v122 != -10);
        }
        else
        {
          *(_QWORD *)&v236 = v81;
          *((_QWORD *)&v236 + 1) = v83 - v81;
          v37 = v84 + *((_QWORD *)&v234 + 1);
          v60 = v81;
        }
LABEL_120:
        *((_QWORD *)&v234 + 1) = v37;
        DWORD2(v237) = 0;
LABEL_199:
        v63 = v235[1];
        v66 = v235[2];
        v128 = v235[2];
        v129 = v235[1];
        if (v37)
        {
LABEL_200:
          v129 = v63;
          v128 = v66;
          v63 += v60;
          v66 -= v60;
        }
        *(_QWORD *)(v29 + 88) = v63;
        *(_QWORD *)(v29 + 96) = v66;
        v130 = v238;
        *(_QWORD *)(v29 + 104) = *((_QWORD *)&v233 + 1) - 1;
        v131 = (unsigned __int16 *)(v130 + 2 * v129 + 2 * v60);
        v132 = v61 - v60;
        v133 = *v131;
        if ((v133 - 12441) > 1)
        {
          if (v128 != 1 || (v133 & 0xF800 | 0x400) != 0xDC00)
            goto LABEL_204;
          continue;
        }
        break;
      }
      if (!v132)
        continue;
      break;
    }
    while (*v131 - 12441 <= 1)
    {
      ++v131;
      if (!--v132)
        goto LABEL_13;
    }
LABEL_204:
    if (DWORD2(v237))
    {
      if (v221)
      {
        v134 = ((uint64_t (*)(unsigned __int16 *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))v221)(v131, v132, 0, v227, 1, 4294959088, v245, 65293);
        v36 = 65293;
        v35 = 4294959088;
        v34 = 1;
        v33 = v245;
        v135 = v134;
        if ((v134 & 1) != 0)
          goto LABEL_257;
      }
      else
      {
        v135 = 0;
      }
LABEL_252:
      if (*(_QWORD *)(v29 + 8) == v223
        && (_QWORD)v234 == *((_QWORD *)&v234 + 1)
        && *((uint64_t *)&v233 + 1) < (uint64_t)v233)
      {
        v149 = (uint64_t *)&v254[*((_QWORD *)&v233 + 1)];
        v150 = *(v149 - 1) + *(v149 - 2);
        if (v150 < *v149)
        {
          v151 = handle_missing_punctuation(v238, v150, *v149, v218, v227, 0);
          v36 = 65293;
          v35 = 4294959088;
          v34 = 1;
          v33 = v245;
          v135 = v151;
        }
      }
      goto LABEL_257;
    }
    if ((v225 & 0x10) != 0 && (v235[3] & 0x40001000) != 0 && v132 >= 2)
    {
      v138 = 0;
      v139 = 0;
      v140 = v218;
      while (1)
      {
        v141 = &v131[v138];
        if ((*v141 & 0xFC00) == 0xD800)
        {
          if (++v138 >= v132 || (v131[v138] & 0xFC00) != 0xDC00)
          {
LABEL_229:
            if ((v139 & 1) != 0)
              v135 = v139;
            else
              v135 = 0;
            if ((v139 & 1) != 0)
            {
              v31 = v226;
            }
            else
            {
              v31 = v226;
              if (v221)
              {
                v137 = ((uint64_t (*)(unsigned __int16 *, uint64_t, uint64_t, uint64_t))v221)(v131, v132, 3, v227);
LABEL_235:
                v135 = v137;
              }
            }
            goto LABEL_236;
          }
          if (v140)
          {
            v142 = 2;
LABEL_225:
            v139 = ((uint64_t (*)(unsigned __int16 *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))v140)(v141, v142, v237, v227, v34, v35, v33, v36);
            goto LABEL_227;
          }
        }
        else if (v140)
        {
          v142 = 1;
          goto LABEL_225;
        }
        v139 = 0;
LABEL_227:
        if (++v138 >= v132 || (v139 & 1) != 0)
          goto LABEL_229;
      }
    }
    if (v218)
    {
      v137 = ((uint64_t (*)(unsigned __int16 *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))v218)(v131, v132, v237, v227, 1, 4294959088, v245, 65293);
      goto LABEL_235;
    }
    v135 = 0;
LABEL_236:
    if (v220)
    {
      if (v232 < 128)
      {
        v143 = (uint64_t)((uint64_t)v131 - v238) >> 1;
        if (v232)
        {
          v144 = v228[2 * v232 - 1] + v228[2 * v232 - 2];
          if (v144 < v143)
            handle_missing_punctuation(v238, v144, (uint64_t)((uint64_t)v131 - v238) >> 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sentenceTokenizerMissingPunctuation, (uint64_t)v228, 1);
        }
      }
      else
      {
        v220(v238, v228, v217);
        v232 = 0;
        v143 = (uint64_t)((uint64_t)v131 - v238) >> 1;
      }
      if (v132)
      {
        v230 = v143;
        v231 = v132;
        v145 = &v228[2 * v232];
        *v145 = v143;
        v145[1] = v132;
        v228[v232++ + 258] = v237;
      }
      v146 = &v131[v132];
      if ((unint64_t)v146 >= (uint64_t)v238 + 2 * v216)
        goto LABEL_249;
      v147 = *v146;
      switch(v147)
      {
        case 9:
          goto LABEL_249;
        case 8200:
          goto LABEL_249;
        case 12288:
          goto LABEL_249;
      }
      Predefined = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
      if (CFCharacterSetIsCharacterMember(Predefined, v147))
        goto LABEL_249;
      if (*((_QWORD *)&v234 + 1) == (_QWORD)v234)
      {
        v29 = v224;
        v33 = v245;
        v34 = 1;
        v35 = 4294959088;
        v36 = 65293;
        if (*((uint64_t *)&v233 + 1) >= (uint64_t)v233
          || (v153 = v238 + 2 * *(_QWORD *)&v254[*((_QWORD *)&v233 + 1)], (unint64_t)v146 >= v153))
        {
          v31 = v226;
          if ((v135 & 1) != 0)
            goto LABEL_257;
          goto LABEL_252;
        }
        v154 = *((_QWORD *)&v254[*((_QWORD *)&v233 + 1) - 1] + 1) + *(_QWORD *)&v254[*((_QWORD *)&v233 + 1) - 1];
        v155 = 2 * v154 + 2;
        while (1)
        {
          v156 = *v146;
          if (v156 == 9 || v156 == 8200)
            break;
          if (v156 == 12288)
            break;
          v158 = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
          if (CFCharacterSetIsCharacterMember(v158, v156))
            break;
          ++v154;
          v146 = (unsigned __int16 *)(v238 + v155);
          v155 += 2;
          if ((uint64_t)v238 + 2 * v154 >= v153)
            goto LABEL_250;
        }
LABEL_249:
        ((void (*)(_QWORD, _QWORD *, uint64_t *, uint64_t, uint64_t))v220)(v238, v228, v217, v232, v227);
        v232 = 0;
      }
LABEL_250:
      v29 = v224;
      v31 = v226;
    }
    v33 = v245;
    v34 = 1;
    v35 = 4294959088;
    v36 = 65293;
    if ((v135 & 1) == 0)
      goto LABEL_252;
LABEL_257:
    if ((v135 & 1) == 0)
    {
      if ((v135 & 2) != 0 && !DWORD2(v237))
        v235[3] &= ~0x400uLL;
      continue;
    }
    break;
  }
LABEL_334:
  v187 = v214;
  v30 = v216;
  if (v220)
  {
    v188 = v232;
    if (v232)
    {
      if (v232 <= 127)
      {
        v189 = v228[2 * v232 - 1] + v228[2 * v232 - 2];
        v190 = v238;
        if (v189 < v216)
        {
          handle_missing_punctuation(v238, v189, v216, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sentenceTokenizerMissingPunctuation, (uint64_t)v228, 1);
          v190 = v238;
          v188 = v232;
        }
        ((void (*)(uint64_t, _QWORD *, uint64_t *, uint64_t, uint64_t))v220)(v190, v228, v217, v188, v227);
        v232 = 0;
      }
    }
  }
LABEL_356:
  if (v187)
    v187(v238, v30, v227);
  if ((_QWORD)v239)
    CFRelease((CFTypeRef)v239);
  if (*((_QWORD *)&v238 + 1))
    free(*((void **)&v238 + 1));
}

uint64_t _getPropertySubTokenCallback(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  getPropertyTokenCallback(a1, a2, a4);
  return 0;
}

uint64_t getPropertyStringCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  _BYTE v10[1050];

  *(_QWORD *)&v10[1042] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a3 + 74))
  {
    v5 = (unsigned __int16 *)result;
    bzero(v10, 0x412uLL);
    v9 = 513;
    v6 = (*(_DWORD *)(a3 + 32) - 1);
    __memcpy_chk();
    v8 = 0;
    result = utf8_encodestr(v5, 2 * a2, &v10[v6], &v8, 1028);
    if (!(_DWORD)result)
    {
      v7 = v8 + v6 + 2;
      if (*(_BYTE *)(a3 + 75))
        v10[v7++ - 2] = 1;
      if (*(_QWORD *)(a3 + 64))
      {
        *(_WORD *)&v10[v7 - 2] = 769;
        v7 += 2;
      }
      return pushPropertyTerm(*(_QWORD *)a3, v7, (unsigned __int8 *)&v9, *(_QWORD *)(a3 + 8), *(_DWORD *)(a3 + 16), *(_DWORD *)(a3 + 20), 1);
    }
  }
  return result;
}

void CITokenizerStateInit(uint64_t a1, CFStringRef theString, int a3, int a4)
{
  CFIndex Length;
  const UniChar *CharactersPtr;
  UniChar *v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  char *v19;
  char *v20;
  const char *v21;
  int *v22;
  uint64_t v23;
  CFRange v24;

  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (theString)
    Length = CFStringGetLength(theString);
  else
    Length = 0;
  CharactersPtr = CFStringGetCharactersPtr(theString);
  *(_QWORD *)(a1 + 96) = CharactersPtr;
  if (!CharactersPtr)
  {
    v10 = (UniChar *)malloc_type_malloc(2 * Length + 32, 0xBD203FB0uLL);
    *(_QWORD *)(a1 + 104) = v10;
    if (!v10)
    {
      v19 = __si_assert_copy_extra_268();
      v20 = v19;
      if (v19)
        v21 = v19;
      else
        v21 = "";
      v22 = __error();
      __message_assert("%s:%u: failed assertion '%s' %s alloc err:%d (%x)", "CITokenizer.c", 78, "state->uniChars", v21, *v22, Length);
      free(v20);
      if (__valid_fs(-1))
        v23 = 2989;
      else
        v23 = 3072;
      *(_DWORD *)v23 = -559038737;
      abort();
    }
    v24.location = 0;
    v24.length = Length;
    CFStringGetCharacters(theString, v24, v10);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a1 + 104);
  }
  *(_QWORD *)(a1 + 120) = Length;
  if (!a3 || (int)Length < 1)
    goto LABEL_15;
  unorm2_getNFCInstance();
  if (unorm2_quickCheck() == 1)
  {
    *(_BYTE *)(a1 + 128) = 1;
    if (!a4)
      return;
    goto LABEL_16;
  }
  v11 = malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
  if (!v11)
  {
LABEL_15:
    if (!a4)
      return;
    goto LABEL_16;
  }
  v12 = v11;
  v13 = unorm2_normalize();
  v17 = v13;
  *(_BYTE *)(a1 + 128) = 1;
  if (v13 == (_DWORD)Length && !memcmp(*(const void **)(a1 + 96), v12, Length))
  {
    free(v12);
    goto LABEL_15;
  }
  if (v17 < (int)Length)
    LODWORD(Length) = v17;
  v18 = *(void **)(a1 + 104);
  if (v18)
    free(v18);
  *(_QWORD *)(a1 + 96) = v12;
  *(_QWORD *)(a1 + 104) = v12;
  *(_QWORD *)(a1 + 112) = CFStringCreateWithCharactersNoCopy(0, (const UniChar *)v12, (int)Length, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  *(_QWORD *)(a1 + 120) = (int)Length;
  if (a4)
  {
LABEL_16:
    v14 = *(_QWORD *)(a1 + 120);
    if (v14 >= 2)
    {
      v15 = *(_QWORD *)(a1 + 96);
      v16 = v15 + 2 * v14;
      if (*(_WORD *)(v16 - 2) == 42
        && (*(_WORD *)(v16 - 4) != 92 || (unint64_t)v14 >= 3 && *(_WORD *)(v15 + 2 * v14 - 6) != 92))
      {
        *(_BYTE *)(a1 + 129) = 1;
      }
    }
  }
}

void CITokenizerSetLocale(uint64_t a1, const __CFString *a2, const char *a3)
{
  char *v6;
  const __CFString *v7;
  char *v8;
  const void *v9;
  CFAllocatorRef *v10;
  CFLocaleRef v11;
  char buffer[1024];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  bzero(buffer, 0x400uLL);
  if (a2 && (v6 = buffer, CFStringGetCString(a2, buffer, 1024, 0x8000100u)) || (v6 = (char *)a3) != 0)
  {
    if (*v6)
      a3 = v6;
    else
      a3 = 0;
    if (*v6)
      v7 = a2;
    else
      v7 = 0;
  }
  else
  {
    v7 = a2;
  }
  v8 = *(char **)(a1 + 64);
  if (a3 == v8)
    return;
  if (a3 && v8)
  {
    if (!strcmp(a3, *(const char **)(a1 + 64)))
      return;
    goto LABEL_17;
  }
  if (v8)
LABEL_17:
    free(v8);
  *(_QWORD *)(a1 + 64) = 0;
  v9 = *(const void **)(a1 + 56);
  if (v9)
    CFRelease(v9);
  *(_QWORD *)(a1 + 56) = 0;
  v10 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  if (a3 && !v7)
    v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a3, 0x8000100u);
  if (v7)
  {
    v11 = CFLocaleCreate(*v10, v7);
    *(_QWORD *)(a1 + 56) = v11;
    if (v11)
      *(_QWORD *)(a1 + 64) = strdup(a3);
    if (v7 != a2)
      CFRelease(v7);
  }
  *(_DWORD *)(a1 + 72) = MEMORY[0x1BCCB02D8](*(_QWORD *)(a1 + 56));
}

uint64_t mergeIntoUpdateSet(uint64_t a1, int a2, int a3, uint64_t *a4, int a5, uint64_t a6, int a7, int a8, float a9, int a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, uint64_t *a15, uint64_t a16, int a17, uint64_t (*a18)(uint64_t), uint64_t a19, uint64_t a20)
{
  os_unfair_lock_s *v22;
  uint64_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  _BYTE *v27;
  unsigned int v28;
  unint64_t v29;
  signed int v30;
  unsigned int v31;
  unint64_t v32;
  signed int v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  pthread_override_s *v43;
  char v44;
  char *v45;
  int v46;
  uint64_t v47;
  pthread_override_s *v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  host_t v53;
  kern_return_t v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  signed int v58;
  unsigned int v59;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  unsigned int v70;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  host_t v77;
  kern_return_t v78;
  uint64_t v79;
  unint64_t v80;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  host_t v85;
  kern_return_t v86;
  uint64_t v87;
  unsigned int v88;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t **v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  unint64_t *p_shared_owners;
  unint64_t v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  BOOL v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  pthread_key_t v123;
  pthread_override_s *v124;
  char v125;
  uint64_t v126;
  pthread_override_s *v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  pthread_override_s *v131;
  char v132;
  pthread_override_s *v133;
  char v134;
  void *v135;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  const char *v148;
  char *v149;
  const char *v150;
  char *v151;
  const char *v152;
  int v153;
  NSObject *v154;
  pthread_mutex_t *v156;
  pthread_mutex_t *v157;
  pthread_mutex_t *v158;
  _BYTE *v160;
  uint64_t v166;
  _QWORD v167[2];
  void (*v168)(uint64_t);
  void *v169;
  uint64_t v170;
  _QWORD v171[2];
  void (*v172)(uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v173;
  uint64_t v174;
  BOOL v175;
  char v176;
  integer_t host_info_out[4];
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  pthread_key_t v190;
  BOOL v191;
  pthread_key_t v192;
  __int128 host_info_outCnt;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  _DWORD *v197;
  uint64_t v198;
  char v199;
  _DWORD v200[5];

  v22 = (os_unfair_lock_s *)(a1 + 16416);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16416));
  v23 = *(_QWORD *)(a1 + 16432);
  if (v23)
  {
    v24 = 0;
    do
    {
      v25 = *(_BYTE *)(v23 + 57) != 0;
      if (*(_BYTE *)(v23 + 57))
      {
        os_unfair_lock_unlock(v22);
        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 16424), 0xFFFFFFFFFFFFFFFFLL);
      }
      else
      {
        dispatch_group_enter(*(dispatch_group_t *)(v23 + 40));
        os_unfair_lock_unlock(v22);
        if (v24)
          dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 16424));
        v26 = *(_QWORD *)(a1 + 16432);
        term_fat_level_iterate_helper(*(_QWORD *)(v26 + 8), *(_QWORD *)(v26 + 16), *(_QWORD *)(v26 + 32), *(_QWORD *)(v26 + 24), *(unsigned int **)v26, *(unsigned __int8 *)(v26 + 56));
        dispatch_group_leave(*(dispatch_group_t *)(*(_QWORD *)(a1 + 16432) + 40));
      }
      os_unfair_lock_lock(v22);
      v23 = *(_QWORD *)(a1 + 16432);
      v24 = v25;
    }
    while (v23);
  }
  else
  {
    v25 = 0;
  }
  v27 = (_BYTE *)(a1 + 14676);
  *(_QWORD *)(a1 + 16432) = malloc_type_calloc(1uLL, 0x40uLL, 0x10A0040CF47B251uLL);
  *(_QWORD *)(*(_QWORD *)(a1 + 16432) + 40) = dispatch_group_create();
  HIDWORD(v29) = qos_class_self() - 9;
  LODWORD(v29) = HIDWORD(v29);
  v28 = v29 >> 2;
  if (v28 > 6)
    v30 = 0;
  else
    v30 = dword_1B8630ED0[v28];
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14464));
  if (*(_QWORD *)(a1 + 14648) || *(_DWORD *)(a1 + 14660) || *v27)
    goto LABEL_16;
  if (v30 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v30 + 14528))
    {
LABEL_16:
      db_rwlock_wait(a1 + 14464, v30, 2);
      goto LABEL_17;
    }
    v137 = v30 - 1;
    v138 = (uint64_t *)(a1 + 16 * v30 + 14544);
    while (v137 != 4)
    {
      v139 = *v138;
      v138 += 2;
      ++v137;
      if (v139)
      {
        if (v137 <= 4)
          goto LABEL_16;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 14648) = pthread_self();
LABEL_17:
  v157 = (pthread_mutex_t *)(a1 + 14464);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14464));
  HIDWORD(v32) = qos_class_self() - 9;
  LODWORD(v32) = HIDWORD(v32);
  v31 = v32 >> 2;
  if (v31 > 6)
    v33 = 0;
  else
    v33 = dword_1B8630ED0[v31];
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14680));
  if (*(_QWORD *)(a1 + 14864) || *(_DWORD *)(a1 + 14876) || *(_BYTE *)(a1 + 14892))
    goto LABEL_23;
  if (v33 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v33 + 14744))
    {
LABEL_23:
      db_rwlock_wait(a1 + 14680, v33, 2);
      goto LABEL_24;
    }
    v140 = v33 - 1;
    v141 = (uint64_t *)(a1 + 16 * v33 + 14760);
    while (v140 != 4)
    {
      v142 = *v141;
      v141 += 2;
      ++v140;
      if (v142)
      {
        if (v140 <= 4)
          goto LABEL_23;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 14864) = pthread_self();
LABEL_24:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14680));
  v156 = (pthread_mutex_t *)(a1 + 14680);
  v160 = (_BYTE *)(a1 + 14676);
  if (!a8)
  {
    v46 = a17;
    pthread_mutex_lock(v157);
    *(_DWORD *)(a1 + 14668) = 0;
    v48 = *(pthread_override_s **)(a1 + 14640);
    *(_QWORD *)(a1 + 14648) = 0;
    *(_QWORD *)(a1 + 14640) = 0;
    v49 = *(_DWORD *)(a1 + 14660) != 0;
    *v27 = 0;
    db_rwlock_wakeup((uint64_t)v157, v49, 0);
    v45 = (char *)pthread_mutex_unlock(v157);
    if (v48)
      v45 = (char *)pthread_override_qos_class_end_np(v48);
    v166 = 0;
    v47 = *(_QWORD *)(a1 + 14352);
    if (!v47)
    {
LABEL_43:
      v45 = TermUpdateSetCreate((uint64_t (*)())_indexProgress, a1, *(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 60), 32 * *(unsigned __int8 *)(a1 + 38), *(_QWORD *)(a1 + 14344), *(_DWORD *)(a1 + 48), *(const void **)(a1 + 4912));
      *(_QWORD *)(a1 + 14352) = v45;
      do
        v50 = __ldaxr(gTermUpdateSetCount);
      while (__stlxr(v50 + 1, gTermUpdateSetCount));
      v47 = *(_QWORD *)(a1 + 14352);
      if (v27[486])
        *(_QWORD *)(v47 + 608) = getPropertyStringCallback;
      *(_QWORD *)(v47 + 280) = a1 + 14144;
    }
LABEL_48:
    v51 = MEMORY[0x1E0C809B0];
    v52 = atomic_load((unsigned int *)(a1 + 28));
    v170 = a1;
    v171[0] = v51;
    v171[1] = 0x40000000;
    v172 = __mergeIntoUpdateSet_block_invoke;
    v173 = &__block_descriptor_tmp_105_2457;
    v174 = a1;
    v175 = v25;
    v167[0] = v51;
    v167[1] = 0x40000000;
    v168 = __mergeIntoUpdateSet_block_invoke_2;
    v169 = &__block_descriptor_tmp_106;
    if (!TermUpdateSetMergeUpdateSet_physMem)
    {
      v178 = 0u;
      v179 = 0u;
      *(_OWORD *)host_info_out = 0u;
      LODWORD(host_info_outCnt) = 12;
      v53 = MEMORY[0x1BCCB1010](v45);
      v54 = host_info(v53, 1, host_info_out, (mach_msg_type_number_t *)&host_info_outCnt);
      v55 = *((_QWORD *)&v179 + 1);
      if (*((_QWORD *)&v179 + 1) >= 0x80000000uLL)
        v55 = 0x80000000;
      if (v54)
        v55 = 0x40000000;
      TermUpdateSetMergeUpdateSet_physMem = v55;
    }
    HIDWORD(v57) = qos_class_self() - 9;
    LODWORD(v57) = HIDWORD(v57);
    v56 = v57 >> 2;
    if (v56 > 6)
      v58 = 0;
    else
      v58 = dword_1B8630ED0[v56];
    pthread_mutex_lock((pthread_mutex_t *)(v47 + 304));
    if (*(_QWORD *)(v47 + 488) || *(_DWORD *)(v47 + 500) || *(_BYTE *)(v47 + 516))
      goto LABEL_60;
    if (v58 <= 5)
    {
      if (*(_QWORD *)(v47 + 16 * v58 + 368))
      {
LABEL_60:
        db_rwlock_wait(v47 + 304, v58, 2);
        goto LABEL_61;
      }
      v143 = v58 - 1;
      v144 = (uint64_t *)(v47 + 16 * v58 + 384);
      while (v143 != 4)
      {
        v145 = *v144;
        v144 += 2;
        ++v143;
        if (v145)
        {
          if (v143 <= 4)
            goto LABEL_60;
          break;
        }
      }
    }
    *(_QWORD *)(v47 + 488) = pthread_self();
LABEL_61:
    pthread_mutex_unlock((pthread_mutex_t *)(v47 + 304));
    if (a10)
      doChildFile(v47 + 88, (_QWORD *)(v47 + 48), a10, a11, a6, 1);
    if (a13)
      doChildFile(v47 + 88, (_QWORD *)(v47 + 48), a13, a14, a6, 2);
    v59 = atomic_load((unsigned int *)(v47 + 100));
    v61 = atomic_load((unsigned int *)(a16 + 100));
    v62 = v61 + v59;
    v63 = atomic_load((unsigned int *)(*(_QWORD *)(a16 + 24) + 16));
    v64 = v62 + 2 * v63;
    v65 = *(unsigned int *)(v47 + 96);
    if (v65 < v64
      && (v66 = (v64 - 1) | ((unint64_t)(v64 - 1) >> 1) | (((v64 - 1) | ((unint64_t)(v64 - 1) >> 1)) >> 2),
          v67 = v66 | (v66 >> 4) | ((v66 | (v66 >> 4)) >> 8),
          v68 = (v67 | (v67 >> 16)) + 1,
          *(_DWORD *)(v47 + 96) = v68,
          my_vm_reallocate((void **)(v47 + 88), 12 * v65, 12 * v68, 243, *(_QWORD *)(v47 + 104))))
    {
      v146 = __si_assert_copy_extra_268();
      v147 = v146;
      v148 = "";
      if (v146)
        v148 = v146;
      __message_assert("%s:%u: failed assertion '%s' %s ", "TermUpdateSet.c", 449, "0 == kr", v148);
    }
    else
    {
      v69 = v52;
      v70 = atomic_load((unsigned int *)(v47 + 248));
      v72 = atomic_load((unsigned int *)(a16 + 248));
      v73 = v72 + v70;
      v74 = atomic_load((unsigned int *)(*(_QWORD *)(a16 + 24) + 16));
      v75 = v73 + v74;
      v76 = *(unsigned int *)(v47 + 252);
      if (v76 >= v75)
        goto LABEL_79;
      v178 = 0u;
      v179 = 0u;
      *(_OWORD *)host_info_out = 0u;
      LODWORD(host_info_outCnt) = 12;
      v77 = MEMORY[0x1BCCB1010]();
      v78 = host_info(v77, 1, host_info_out, (mach_msg_type_number_t *)&host_info_outCnt);
      v79 = *((_QWORD *)&v179 + 1);
      if (*((_QWORD *)&v179 + 1) >= 0x80000000uLL)
        v79 = 0x80000000;
      v80 = (unint64_t)(3 * v79) >> 18;
      if (v78)
        v81 = 12288;
      else
        v81 = v80;
      v82 = (v75 - 1) | ((unint64_t)(v75 - 1) >> 1) | (((v75 - 1) | ((unint64_t)(v75 - 1) >> 1)) >> 2);
      v83 = v82 | (v82 >> 4) | ((v82 | (v82 >> 4)) >> 8);
      v84 = (v83 | (v83 >> 16)) + 1;
      if (v81 > v84)
      {
        v178 = 0u;
        v179 = 0u;
        *(_OWORD *)host_info_out = 0u;
        LODWORD(host_info_outCnt) = 12;
        v85 = MEMORY[0x1BCCB1010]();
        v86 = host_info(v85, 1, host_info_out, (mach_msg_type_number_t *)&host_info_outCnt);
        v87 = *((_QWORD *)&v179 + 1);
        if (*((_QWORD *)&v179 + 1) >= 0x80000000uLL)
          v87 = 0x80000000;
        v84 = (unint64_t)(3 * v87) >> 18;
        if (v86)
          LODWORD(v84) = 12288;
      }
      *(_DWORD *)(v47 + 252) = v84;
      if (my_vm_reallocate((void **)(v47 + 240), 32 * v76, 32 * v84, 246, *(_QWORD *)(v47 + 104)))
      {
        v149 = __si_assert_copy_extra_268();
        v147 = v149;
        v150 = "";
        if (v149)
          v150 = v149;
        __message_assert("%s:%u: failed assertion '%s' %s ", "TermUpdateSet.c", 461, "0 == kr", v150);
      }
      else
      {
LABEL_79:
        v88 = atomic_load((unsigned int *)(v47 + 268));
        v90 = atomic_load((unsigned int *)(a16 + 268));
        v91 = v90 + 2 * v88;
        v92 = atomic_load((unsigned int *)(*(_QWORD *)(a16 + 24) + 16));
        v93 = v91 + v92;
        v94 = *(unsigned int *)(v47 + 272);
        if (v94 >= v93)
          goto LABEL_83;
        if ((((unint64_t)TermUpdateSetMergeUpdateSet_physMem >> 11) & 0xFFFFFFFE) > v93)
          v93 = ((unint64_t)TermUpdateSetMergeUpdateSet_physMem >> 11) & 0xFFFFFFFE;
        *(_DWORD *)(v47 + 272) = v93;
        if (!my_vm_reallocate((void **)(v47 + 256), 8 * v94, 8 * v93, 247, *(_QWORD *)(v47 + 104)))
        {
LABEL_83:
          v158 = (pthread_mutex_t *)(v47 + 304);
          v192 = 0;
          pthread_key_create(&v192, 0);
          v95 = *(_QWORD *)(a16 + 24);
          v96 = MEMORY[0x1E0C809B0];
          *(_QWORD *)host_info_out = MEMORY[0x1E0C809B0];
          *(_QWORD *)&host_info_out[2] = 0x40000000;
          *(_QWORD *)&v178 = __TermUpdateSetMergeUpdateSet_block_invoke;
          *((_QWORD *)&v178 + 1) = &__block_descriptor_tmp_2940;
          *(_QWORD *)&v179 = v47;
          *((_QWORD *)&v179 + 1) = a16;
          v180 = a6;
          v181 = v166;
          v182 = v46;
          v183 = 0;
          v184 = a13;
          v185 = a14;
          v186 = a10;
          v187 = 0;
          v188 = a11;
          v189 = a16;
          v190 = v192;
          v191 = (v69 & 8) != 0;
          v200[0] = 0;
          v172((uint64_t)v171, v95 + 16, v95 + 32, 0, (uint64_t)v200, (uint64_t)host_info_out, (uint64_t)&__block_literal_global_2941, (uint64_t)&__block_literal_global_8);
          if (*(_QWORD *)(v95 + 32))
            ((void (*)(integer_t *))v178)(host_info_out);
          *(_QWORD *)&host_info_outCnt = v96;
          *((_QWORD *)&host_info_outCnt + 1) = 0x40000000;
          *(_QWORD *)&v194 = ___TermTrieWalkFatParallel_block_invoke;
          *((_QWORD *)&v194 + 1) = &unk_1E6E35E48;
          *(_QWORD *)&v195 = host_info_out;
          *((_QWORD *)&v195 + 1) = &__block_literal_global_2941;
          *(_QWORD *)&v196 = &__block_literal_global_8;
          *((_QWORD *)&v196 + 1) = v95 + 32;
          v199 = 0;
          v197 = v200;
          v198 = v95 + 16;
          dispatch_apply(gCPUCount, 0, &host_info_outCnt);
          v168((uint64_t)v167);
          if (_os_feature_enabled_impl())
          {
            v97 = *(_QWORD **)(a16 + 80);
            v100 = (_QWORD *)*v97;
            v99 = v97 + 1;
            v98 = v100;
            if (v100 != v99)
            {
              v101 = *(uint64_t ***)(v47 + 80);
              do
              {
                v103 = v98[5];
                v102 = (std::__shared_weak_count *)v98[6];
                if (v102)
                {
                  p_shared_owners = (unint64_t *)&v102->__shared_owners_;
                  do
                    v105 = __ldxr(p_shared_owners);
                  while (__stxr(v105 + 1, p_shared_owners));
                }
                host_info_outCnt = 0uLL;
                v106 = *(_DWORD *)(v103 + 12);
                if (v106 == 512)
                  v107 = 1;
                else
                  v107 = 3;
                if (v106 == 768)
                  v107 = 2;
                if (v106 == 256)
                  v108 = 0;
                else
                  v108 = v107;
                v109 = *(_DWORD *)(v103 + 16);
                if (v109 == 2)
                  v110 = 1;
                else
                  v110 = 3;
                if (v109 == 4)
                  v111 = 0;
                else
                  v111 = v110;
                IVFVectorIndexUpdateSet::getOrCreateVectorIndex((uint64_t **)&host_info_outCnt, v101, *(unsigned int *)(v103 + 8), *(unsigned __int16 *)(v103 + 20), v108, v111);
                (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)host_info_outCnt + 104))(host_info_outCnt, v103, v47 + 88, v166, a6);
                v112 = (std::__shared_weak_count *)*((_QWORD *)&host_info_outCnt + 1);
                if (!*((_QWORD *)&host_info_outCnt + 1))
                  goto LABEL_110;
                v113 = (unint64_t *)(*((_QWORD *)&host_info_outCnt + 1) + 8);
                do
                  v114 = __ldaxr(v113);
                while (__stlxr(v114 - 1, v113));
                if (!v114)
                {
                  ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
                  std::__shared_weak_count::__release_weak(v112);
                  if (v102)
                  {
LABEL_111:
                    v115 = (unint64_t *)&v102->__shared_owners_;
                    do
                      v116 = __ldaxr(v115);
                    while (__stlxr(v116 - 1, v115));
                    if (!v116)
                    {
                      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                      std::__shared_weak_count::__release_weak(v102);
                    }
                  }
                }
                else
                {
LABEL_110:
                  if (v102)
                    goto LABEL_111;
                }
                v117 = (_QWORD *)v98[1];
                if (v117)
                {
                  do
                  {
                    v118 = v117;
                    v117 = (_QWORD *)*v117;
                  }
                  while (v117);
                }
                else
                {
                  do
                  {
                    v118 = (_QWORD *)v98[2];
                    v119 = *v118 == (_QWORD)v98;
                    v98 = v118;
                  }
                  while (!v119);
                }
                v98 = v118;
              }
              while (v118 != v99);
            }
          }
          *(_DWORD *)(v47 + 112) += *(_DWORD *)(a16 + 112);
          *(_QWORD *)(v47 + 192) += *(_QWORD *)(a16 + 192);
          v120 = *(_QWORD *)(v47 + 160);
          *(_QWORD *)(v47 + 168) += *(_QWORD *)(a16 + 168);
          *(int64x2_t *)(v47 + 144) = vaddq_s64(*(int64x2_t *)(v47 + 144), *(int64x2_t *)(a16 + 144));
          *(int64x2_t *)(v47 + 120) = vaddq_s64(*(int64x2_t *)(v47 + 120), *(int64x2_t *)(a16 + 120));
          *(int64x2_t *)(v47 + 176) = vaddq_s64(*(int64x2_t *)(v47 + 176), *(int64x2_t *)(a16 + 176));
          *(_QWORD *)(v47 + 160) = v120 + *(_QWORD *)(a16 + 160);
          *(_QWORD *)(v47 + 136) += *(_QWORD *)(a16 + 136);
          *(_QWORD *)(v47 + 216) += *(_QWORD *)(a16 + 216);
          *(int64x2_t *)(v47 + 200) = vaddq_s64(*(int64x2_t *)(v47 + 200), *(int64x2_t *)(a16 + 200));
          v197 = 0;
          v195 = 0u;
          v196 = 0u;
          host_info_outCnt = 0u;
          v194 = 0u;
          _TermUpdateSetGetStats(v47, (uint64_t)&host_info_outCnt, 1);
          v121 = v194 + v195 + host_info_outCnt - *(_QWORD *)(v47 + 224);
          do
            v122 = __ldaxr(&gTotalCurrentUsage);
          while (__stlxr(v122 + v121, &gTotalCurrentUsage));
          v123 = v192;
          *(_QWORD *)(v47 + 224) = v194 + v195 + host_info_outCnt;
          pthread_key_delete(v123);
          pthread_mutex_lock(v158);
          *(_DWORD *)(v47 + 508) = 0;
          v124 = *(pthread_override_s **)(v47 + 480);
          *(_QWORD *)(v47 + 480) = 0;
          *(_QWORD *)(v47 + 488) = 0;
          v125 = *(_DWORD *)(v47 + 500) != 0;
          *(_BYTE *)(v47 + 516) = 0;
          db_rwlock_wakeup((uint64_t)v158, v125, 0);
          pthread_mutex_unlock(v158);
          if (v124)
            pthread_override_qos_class_end_np(v124);
          if (!*(_BYTE *)(a1 + 16392)
            && (*(_BYTE *)(a1 + 16392) = index_termUpdateSetShouldFlush(a1, *(_QWORD *)(a1 + 14352), a7)) != 0
            && dword_1EF19FCB4 >= 5)
          {
            v153 = *__error();
            v154 = _SILogForLogForCategory(10);
            if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(host_info_out[0]) = 0;
              _os_log_impl(&dword_1B8270000, v154, OS_LOG_TYPE_DEFAULT, "Mark index needs flush", (uint8_t *)host_info_out, 2u);
            }
            *__error() = v153;
            v126 = a20;
            if (!a20)
              goto LABEL_131;
          }
          else
          {
            v126 = a20;
            if (!a20)
            {
LABEL_131:
              pthread_mutex_lock(v156);
              *(_DWORD *)(a1 + 14884) = 0;
              v127 = *(pthread_override_s **)(a1 + 14856);
              *(_QWORD *)(a1 + 14856) = 0;
              *(_QWORD *)(a1 + 14864) = 0;
              v128 = *(_DWORD *)(a1 + 14876) != 0;
              *(_BYTE *)(a1 + 14892) = 0;
              db_rwlock_wakeup((uint64_t)v156, v128, 0);
              pthread_mutex_unlock(v156);
              if (v127)
                pthread_override_qos_class_end_np(v127);
              *(_QWORD *)(a16 + 280) = 0;
              TermUpdateSetRelease(a16);
              if (a8)
                v129 = *(_QWORD *)(a1 + 72) + *a4;
              else
                v129 = 0;
              v130 = 0;
              *a15 = v129;
              return v130;
            }
          }
          pthread_mutex_lock(v156);
          *(_BYTE *)(a1 + 14892) = 1;
          db_rwlock_wakeup((uint64_t)v156, 1, 1);
          pthread_mutex_unlock(v156);
          (*(void (**)(uint64_t, uint64_t))(v126 + 16))(v126, a6);
          goto LABEL_131;
        }
        v151 = __si_assert_copy_extra_268();
        v147 = v151;
        v152 = "";
        if (v151)
          v152 = v151;
        __message_assert("%s:%u: failed assertion '%s' %s ", "TermUpdateSet.c", 470, "0 == kr", v152);
      }
    }
    free(v147);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  while (1)
  {
    if ((*(_DWORD *)(a1 + 60) + 1) >= *(_DWORD *)(a1 + 64))
    {
      v34 = indexGrowDocumentPayloads(a1, a18, a19);
      if ((_DWORD)v34)
        break;
    }
    v35 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
    *v35 = a1;
    v35[1] = a16;
    if (__THREAD_SLOT_KEY)
    {
      v36 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v36)
        goto LABEL_35;
    }
    else
    {
      makeThreadId();
      v36 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
      if (!v36)
      {
LABEL_35:
        makeThreadId();
        v36 = (unint64_t)pthread_getspecific(__THREAD_SLOT_KEY);
        goto LABEL_32;
      }
    }
    if (v36 >= 0x801)
      goto LABEL_35;
LABEL_32:
    v37 = v36 - 1;
    v38 = &threadData[18 * v36 - 18];
    v40 = v38[14];
    v39 = v38 + 14;
    CIOnThreadCleanUpPush(v36 - 1, (uint64_t)cleanUpTermUpdateMergeContext, (uint64_t)v35);
    v176 = 0;
    v41 = _getAndSetDocId(a1, a12, a5, a2, a3, &v176, 1, a9);
    CIOnThreadCleanUpClearItem(v37, v40);
    v42 = *v39;
    if (v40 + 1 == v42)
      *v39 = v42 - 1;
    free(v35);
    if (!v176)
    {
      *a4 = v41;
      pthread_mutex_lock(v157);
      *(_DWORD *)(a1 + 14668) = 0;
      v43 = *(pthread_override_s **)(a1 + 14640);
      *(_QWORD *)(a1 + 14648) = 0;
      *(_QWORD *)(a1 + 14640) = 0;
      v44 = *(_DWORD *)(a1 + 14660) != 0;
      v27 = (_BYTE *)(a1 + 14676);
      *v160 = 0;
      db_rwlock_wakeup((uint64_t)v157, v44, 0);
      v45 = (char *)pthread_mutex_unlock(v157);
      if (v43)
        v45 = (char *)pthread_override_qos_class_end_np(v43);
      v46 = 0;
      v166 = *a4;
      a6 = *(_QWORD *)(a1 + 72) + *a4;
      v47 = *(_QWORD *)(a1 + 14352);
      if (!v47)
        goto LABEL_43;
      goto LABEL_48;
    }
  }
  v130 = v34;
  pthread_mutex_lock(v157);
  *(_DWORD *)(a1 + 14668) = 0;
  v131 = *(pthread_override_s **)(a1 + 14640);
  *(_QWORD *)(a1 + 14648) = 0;
  *(_QWORD *)(a1 + 14640) = 0;
  v132 = *(_DWORD *)(a1 + 14660) != 0;
  *v160 = 0;
  db_rwlock_wakeup((uint64_t)v157, v132, 0);
  pthread_mutex_unlock(v157);
  if (v131)
    pthread_override_qos_class_end_np(v131);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    LOWORD(host_info_out[0]) = 0;
    _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Out of space growing payloads.", (uint8_t *)host_info_out, 2u);
  }
  pthread_mutex_lock(v156);
  *(_DWORD *)(a1 + 14884) = 0;
  v133 = *(pthread_override_s **)(a1 + 14856);
  *(_QWORD *)(a1 + 14856) = 0;
  *(_QWORD *)(a1 + 14864) = 0;
  v134 = *(_DWORD *)(a1 + 14876) != 0;
  *(_BYTE *)(a1 + 14892) = 0;
  db_rwlock_wakeup((uint64_t)v156, v134, 0);
  pthread_mutex_unlock(v156);
  if (v133)
    pthread_override_qos_class_end_np(v133);
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(a1 + 16432) + 40));
  v135 = *(void **)(a1 + 16432);
  *(_QWORD *)(a1 + 16432) = 0;
  os_unfair_lock_unlock(v22);
  free(v135);
  TermUpdateSetRelease(a16);
  return v130;
}

uint64_t term_fat_level_iterate_helper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  unsigned int v12;
  uint64_t v13;
  int v14;
  char *v16;
  char *v17;
  const char *v18;

  do
    v12 = __ldxr(a5);
  while (__stxr(v12 + 1, a5));
  if (v12 <= 0xFF)
  {
    do
    {
      v13 = *(_QWORD *)(a1 + 8 * v12 + 8);
      v14 = v13 & 3;
      switch(v14)
      {
        case 3:
          _TermTrieWalkListWithOptions(v13 & 0xFFFFFFFFFFFFFFFCLL, a6, 0, a2, a3, a4);
          break;
        case 2:
          _TermTrieWalkCompactWithOptions(v13 & 0xFFFFFFFFFFFFFFFCLL, 1, a6, 0, a2, a3, a4);
          break;
        case 1:
          _TermTrieWalkFatWithOptions(v13 & 0xFFFFFFFFFFFFFFFCLL, 1, a6, 0, a2, a3, a4);
          break;
        default:
          if (v13)
          {
            v16 = __si_assert_copy_extra_268();
            v17 = v16;
            v18 = "";
            if (v16)
              v18 = v16;
            __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 233, "level->follows[i]==0", v18);
            free(v17);
            if (__valid_fs(-1))
            {
              MEMORY[0xBAD] = -559038737;
              abort();
            }
            MEMORY[0xC00] = -559038737;
            abort();
          }
          break;
      }
      do
        v12 = __ldxr(a5);
      while (__stxr(v12 + 1, a5));
    }
    while (v12 < 0x100);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);
}

uint64_t SISetCodedAttributes(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFString *a8, char a9, void (*a10)(uint64_t, _QWORD), uint64_t a11)
{
  const __CFData *v13;
  const __CFData *v14;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __CFDictionary *clientstates_dict;
  const __CFAllocator *v22;
  const UInt8 *BytePtr;
  CFIndex Length;
  const __CFData *v25;
  const __CFData *v26;
  int v27;
  NSObject *v28;
  uint64_t v29;
  int v30;
  NSObject *v31;
  char v32;
  int v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  NSObject *v51;
  os_log_type_t v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  void (*v60)(uint64_t, _QWORD);
  int v62;
  NSObject *v63;
  uint64_t v65;
  uint8_t v68[4];
  const __CFString *v69;
  uint8_t buf[40];
  uint64_t v71;

  v13 = a6;
  v14 = a5;
  v71 = *MEMORY[0x1E0C80C00];
  v17 = *(_DWORD *)(a1 + 6972);
  if (!v17 && *(_BYTE *)(a1 + 1280))
  {
    v27 = *__error();
    v28 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v28, OS_LOG_TYPE_DEFAULT, "SISetCodedAttributes failed: index is read-only", buf, 2u);
    }
    v29 = 0;
    *__error() = v27;
    return v29;
  }
  v18 = a11;
  if (a7)
  {
    v19 = a11;
    pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 80));
    clientstates_dict = (__CFDictionary *)si_get_clientstates_dict(a1, a2);
    v22 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    BytePtr = CFDataGetBytePtr(a7);
    Length = CFDataGetLength(a7);
    v25 = CFDataCreate(v22, BytePtr, Length);
    if (v25)
    {
      v26 = v25;
      if (CFDataGetBytePtr(v25) && CFDataGetLength(v26) >= 1)
        CFDictionarySetValue(clientstates_dict, a8, v26);
      else
        CFDictionaryRemoveValue(clientstates_dict, a8);
      CFRelease(v26);
    }
    else
    {
      CFDictionaryRemoveValue(clientstates_dict, a8);
    }
    v13 = a6;
    pthread_rwlock_unlock((pthread_rwlock_t *)(a1 + 80));
    v30 = *__error();
    v31 = _SILogForLogForCategory(10);
    v18 = v19;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = a8;
      *(_WORD *)&buf[22] = 2112;
      *(_QWORD *)&buf[24] = a7;
      _os_log_impl(&dword_1B8270000, v31, OS_LOG_TYPE_DEFAULT, "Cached client state %@ %@ %@", buf, 0x20u);
    }
    *__error() = v30;
    v17 = *(_DWORD *)(a1 + 6972);
    v14 = a5;
  }
  memset(buf, 0, 32);
  if (v17 || (pthread_mutex_lock((pthread_mutex_t *)(a1 + 1320)), *(_DWORD *)(a1 + 6972)))
  {
    if (*(_DWORD *)(a1 + 6968))
      goto LABEL_20;
LABEL_38:
    v32 = 0;
    goto LABEL_39;
  }
  v46 = *(_QWORD *)(a1 + 1144);
  if (!v46 || (a9 & 1) == 0 && !si_peek_queue(v46, (uint64_t)a2, 0, 0))
    goto LABEL_38;
LABEL_20:
  v32 = 1;
  if (!mobile_journal_coded(a1, a2, a3, a4, v14, v13, a7, a8, a9, (uint64_t)buf, 1u))
  {
LABEL_39:
    v29 = 0;
    goto LABEL_43;
  }
  v65 = v18;
  v33 = *__error();
  v34 = _SILogForLogForCategory(4);
  v35 = 2 * (dword_1EF19FC9C < 4);
  if (os_log_type_enabled(v34, v35))
  {
    *(_DWORD *)v68 = 138412290;
    v69 = a2;
    _os_log_impl(&dword_1B8270000, v34, v35, "Defer work for %@", v68, 0xCu);
  }
  *__error() = v33;
  if (*(_DWORD *)(a1 + 6964))
  {
    v36 = *__error();
    v37 = _SILogForLogForCategory(4);
    v38 = 2 * (dword_1EF19FC9C < 4);
    if (os_log_type_enabled(v37, v38))
    {
      *(_DWORD *)v68 = 138412290;
      v69 = a2;
      _os_log_impl(&dword_1B8270000, v37, v38, "Only journaling while locked on defer queue for %@", v68, 0xCu);
    }
    *__error() = v36;
    if (*(_DWORD *)(a1 + 6972) || (v39 = *(_DWORD *)(a1 + 6964), (v39 & 4) != 0))
    {
      v44 = *(unsigned int **)buf;
      v18 = v65;
      if (*(_QWORD *)buf)
      {
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (v45 == 1)
        {
          v32 = 1;
          _si_mobile_journal_finalize((uint64_t)v44, 1);
LABEL_41:
          v29 = 1;
          goto LABEL_43;
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 6964) = v39 | 4;
      v40 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
      v41 = *(_QWORD *)buf;
      *v40 = a1;
      v40[1] = v41;
      v42 = (unsigned int *)(a1 + 6888);
      v18 = v65;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 + 1, v42));
      si_enqueue_barrier_with_qos(*(_QWORD *)(a1 + 1144), 0, (uint64_t)playBackMobileJournal, (uint64_t)v40);
    }
    v32 = 1;
    goto LABEL_41;
  }
  v18 = v65;
  enqueueForProcessing(a2, (uint64_t *)&a10, v65, a9, buf, a1, 0x11u);
  v32 = 1;
  v29 = 1;
LABEL_43:
  if (*(_DWORD *)(a1 + 6972))
  {
    if ((v32 & 1) != 0)
      goto LABEL_64;
  }
  else
  {
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 1320));
    if ((v32 & 1) != 0)
      goto LABEL_64;
  }
  if (mobile_journal_coded(a1, a2, a3, a4, v14, v13, a7, a8, a9, (uint64_t)buf, 0))
  {
    v47 = *__error();
    v48 = _SILogForLogForCategory(4);
    v49 = 2 * (dword_1EF19FC9C < 4);
    if (os_log_type_enabled(v48, v49))
    {
      *(_DWORD *)v68 = 138412290;
      v69 = a2;
      _os_log_impl(&dword_1B8270000, v48, v49, "Enqueue work for %@", v68, 0xCu);
    }
    *__error() = v47;
    if (!*(_DWORD *)(a1 + 6964))
    {
      enqueueForProcessing(a2, (uint64_t *)&a10, v18, a9, buf, a1, 5u);
LABEL_63:
      v29 = 1;
      goto LABEL_64;
    }
    v50 = *__error();
    v51 = _SILogForLogForCategory(4);
    v52 = 2 * (dword_1EF19FC9C < 4);
    if (os_log_type_enabled(v51, v52))
    {
      *(_DWORD *)v68 = 138412290;
      v69 = a2;
      _os_log_impl(&dword_1B8270000, v51, v52, "Only journaling while locked for %@", v68, 0xCu);
    }
    *__error() = v50;
    if (!*(_DWORD *)(a1 + 6972))
    {
      v53 = *(_DWORD *)(a1 + 6964);
      if ((v53 & 2) == 0)
      {
        *(_DWORD *)(a1 + 6964) = v53 | 2;
        v54 = malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
        v55 = *(_QWORD *)buf;
        *v54 = a1;
        v54[1] = v55;
        v56 = (unsigned int *)(a1 + 6888);
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 + 1, v56));
        si_enqueue_barrier_with_qos(*(_QWORD *)(a1 + 1048), 0, (uint64_t)playBackMobileJournal, (uint64_t)v54);
        goto LABEL_63;
      }
    }
    v58 = *(unsigned int **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_63;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (v59 != 1)
      goto LABEL_63;
    v29 = 1;
    _si_mobile_journal_finalize((uint64_t)v58, 1);
  }
LABEL_64:
  if ((_DWORD)v29)
  {
    v60 = a10;
    if (a10)
    {
      if (dword_1EF19FC9C >= 5)
      {
        v62 = *__error();
        v63 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v68 = 138412290;
          v69 = a2;
          _os_log_impl(&dword_1B8270000, v63, OS_LOG_TYPE_DEFAULT, "Callback for %@", v68, 0xCu);
        }
        *__error() = v62;
      }
      v60(v18, 0);
      return 1;
    }
  }
  return v29;
}

uint64_t mobile_journal_coded(uint64_t a1, const __CFString *a2, const __CFString *a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFString *a8, char a9, uint64_t a10, unsigned __int8 a11)
{
  pthread_mutex_t *v18;
  uint64_t DeferJournalFd;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  char *JournalFd;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  __int16 v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  uInt v33;
  uLong v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  _DWORD *v39;
  uint64_t v40;
  const UInt8 *v41;
  const UInt8 *v42;
  int v43;
  const UInt8 *v44;
  const UInt8 *BytePtr;
  int v47;
  int v48;
  NSObject *v49;
  os_log_type_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  unint64_t v59;
  off_t v60;
  unint64_t v61;
  const __CFData *v62;
  __int128 v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  unsigned int v69;
  int v70;
  unsigned __int16 v71;
  __int16 v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  int v76;
  int v77;
  unsigned __int16 v78;
  __int16 v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  uint8_t v83[4];
  int v84;
  Bytef buf[16];
  __int128 v86;
  char __s[1024];
  Bytef v88[1024];
  char buffer[1024];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v18 = (pthread_mutex_t *)(a1 + 1632);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1632));
  if (!a11)
  {
    JournalFd = getJournalFd(a1, 0, 0);
    if (JournalFd)
    {
      v62 = a6;
      v20 = *(_QWORD *)(a1 + 2104);
      if (v20)
      {
        if (*(char **)(v20 + 8) == JournalFd)
          goto LABEL_26;
        do
        {
          v24 = __ldaxr((unsigned int *)v20);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, (unsigned int *)v20));
        if (!v25)
          _si_mobile_journal_finalize(v20, 1);
        *(_QWORD *)(a1 + 2104) = 0;
      }
      if (*(_BYTE *)(a1 + 2072) && (*(_BYTE *)(a1 + 829) & 0x10) == 0 && _os_feature_enabled_impl())
        _os_feature_enabled_impl();
      v20 = si_mobile_journal_create(a1);
      *(_QWORD *)(a1 + 2104) = v20;
      if (v20)
        goto LABEL_26;
      goto LABEL_27;
    }
LABEL_24:
    v20 = 0;
    goto LABEL_94;
  }
  DeferJournalFd = getDeferJournalFd(a1, 0);
  if (!DeferJournalFd)
    goto LABEL_24;
  v62 = a6;
  v20 = *(_QWORD *)(a1 + 2112);
  if (!v20)
    goto LABEL_9;
  if (*(_QWORD *)(v20 + 8) == DeferJournalFd)
  {
    do
LABEL_26:
      v26 = __ldaxr((unsigned int *)v20);
    while (__stlxr(v26 + 1, (unsigned int *)v20));
    goto LABEL_27;
  }
  do
  {
    v21 = __ldaxr((unsigned int *)v20);
    v22 = v21 - 1;
  }
  while (__stlxr(v22, (unsigned int *)v20));
  if (!v22)
    _si_mobile_journal_finalize(v20, 1);
  *(_QWORD *)(a1 + 2112) = 0;
LABEL_9:
  if (*(_BYTE *)(a1 + 2072) && (*(_BYTE *)(a1 + 829) & 0x10) == 0 && _os_feature_enabled_impl())
    _os_feature_enabled_impl();
  v20 = si_mobile_journal_create(a1);
  *(_QWORD *)(a1 + 2112) = v20;
  if (v20)
    goto LABEL_26;
LABEL_27:
  v27 = (unint64_t *)(a1 + 2128);
  do
    v28 = __ldxr(v27);
  while (__stxr(v28 + 1, v27));
  if (si_clientstatesandmeta_update(a1, v28 + 1, a11))
  {
    v29 = *(NSObject **)(a1 + 1176);
    bzero(buffer, 0x400uLL);
    bzero(v88, 0x400uLL);
    bzero(__s, 0x400uLL);
    if (!a2
      || !CFStringGetCString(a2, buffer, 1024, 0x8000100u)
      || a7 && (!a8 || !CFStringGetCString(a8, __s, 1024, 0x8000100u))
      || a3 && !CFStringGetCString(a3, (char *)v88, 1024, 0x8000100u))
    {
      goto LABEL_90;
    }
    v30 = strlen(buffer);
    v31 = 0;
    if (a7 && a8)
      v31 = strlen(__s) + 1;
    v32 = v30 + 1;
    if (a3)
      LOWORD(a3) = strlen((const char *)v88) + 1;
    v78 = v32 & 0x3FF | ((_WORD)a3 << 10);
    v79 = v31 & 0x7FFF;
    v81 = 0;
    v82 = 0;
    *(_OWORD *)buf = 0u;
    v86 = 0u;
    if (v28)
    {
      if (v28 > 0x7F)
      {
        if (v28 >> 14)
        {
          if (v28 >> 21)
          {
            if (v28 >> 28)
            {
              if (v28 >> 35)
              {
                if (v28 >> 42)
                {
                  if (v28 >> 49)
                  {
                    if (HIBYTE(v28))
                    {
                      buf[0] = -1;
                      *(_QWORD *)&buf[1] = v28;
                      v33 = 9;
                    }
                    else
                    {
                      buf[0] = -2;
                      buf[1] = BYTE6(v28);
                      buf[2] = BYTE5(v28);
                      buf[3] = BYTE4(v28);
                      buf[4] = BYTE3(v28);
                      buf[5] = BYTE2(v28);
                      buf[6] = BYTE1(v28);
                      v33 = 8;
                      buf[7] = v28;
                    }
                  }
                  else
                  {
                    buf[0] = BYTE6(v28) | 0xFC;
                    buf[1] = BYTE5(v28);
                    buf[2] = BYTE4(v28);
                    buf[3] = BYTE3(v28);
                    buf[4] = BYTE2(v28);
                    buf[5] = BYTE1(v28);
                    v33 = 7;
                    buf[6] = v28;
                  }
                }
                else
                {
                  buf[0] = BYTE5(v28) | 0xF8;
                  buf[1] = BYTE4(v28);
                  buf[2] = BYTE3(v28);
                  buf[3] = BYTE2(v28);
                  buf[4] = BYTE1(v28);
                  buf[5] = v28;
                  v33 = 6;
                }
              }
              else
              {
                buf[0] = BYTE4(v28) | 0xF0;
                buf[1] = BYTE3(v28);
                buf[2] = BYTE2(v28);
                buf[3] = BYTE1(v28);
                buf[4] = v28;
                v33 = 5;
              }
            }
            else
            {
              buf[0] = BYTE3(v28) | 0xE0;
              buf[1] = BYTE2(v28);
              buf[2] = BYTE1(v28);
              buf[3] = v28;
              v33 = 4;
            }
          }
          else
          {
            buf[0] = BYTE2(v28) | 0xC0;
            buf[1] = BYTE1(v28);
            buf[2] = v28;
            v33 = 3;
          }
        }
        else
        {
          buf[0] = BYTE1(v28) | 0x80;
          buf[1] = v28;
          v33 = 2;
        }
      }
      else
      {
        buf[0] = v28;
        v33 = 1;
      }
      v34 = adler32(0, buf, v33);
    }
    else
    {
      v34 = 0;
      v33 = 0;
    }
    v35 = adler32(v34, (const Bytef *)buffer, v32);
    v36 = adler32(v35, v88, (unsigned __int16)a3);
    v76 = 0;
    v77 = adler32(v36, (const Bytef *)__s, v31);
    if (!checkSumCFData(a4, &v77, &v76))
      goto LABEL_90;
    v80 = 2 * v76;
    if (!checkSumCFData(a5, &v77, &v81)
      || !checkSumCFData(v62, &v77, (_DWORD *)&v81 + 1)
      || !checkSumCFData(a7, &v77, &v82))
    {
      goto LABEL_90;
    }
    v37 = v28 ? -260112659 : -262275347;
    v70 = v77;
    v53 = (unint64_t)v80 >> 1;
    v61 = v78 & 0x3FF;
    v56 = (unint64_t)v78 >> 10;
    v57 = v81;
    v38 = v80 & 0xFFFFFFFE | a9 & 1;
    v58 = v78;
    v59 = v79 & 0x7FFF;
    v71 = v78;
    v72 = v79 & 0x7FFF;
    v73 = v38;
    v74 = v81;
    v54 = HIDWORD(v81);
    v55 = v82;
    v75 = v82;
    v68 = v37;
    v69 = v33 + (v80 >> 1) + (v78 & 0x3FF) + v56 + (v79 & 0x7FFF) + v81 + HIDWORD(v81) + v82 + 20;
    v52 = v69;
    v39 = *(_DWORD **)(v20 + 8);
    v40 = fd_lseek(v39, 0, 2);
    if (v40 == -1)
    {
LABEL_90:
      v47 = 22;
LABEL_91:
      v48 = *__error();
      v49 = _SILogForLogForCategory(4);
      v50 = 2 * (dword_1EF19FC9C < 4);
      if (os_log_type_enabled(v49, v50))
      {
        *(_DWORD *)v83 = 67109120;
        v84 = v47;
        _os_log_impl(&dword_1B8270000, v49, v50, "Error writing to log file: %d", v83, 8u);
      }
      *__error() = v48;
      goto LABEL_94;
    }
    v60 = v40;
    if (fd_write((uint64_t)v39, (uint64_t)&v68, 0x20uLL) != -1
      && (!v33 || fd_write((uint64_t)v39, (uint64_t)buf, v33) != -1)
      && fd_write((uint64_t)v39, (uint64_t)buffer, v61) != -1
      && (v58 < 0x400 || fd_write((uint64_t)v39, (uint64_t)v88, v56) != -1)
      && (!(_DWORD)v59 || fd_write((uint64_t)v39, (uint64_t)__s, v59) != -1))
    {
      if (v38 < 2 || (v41 = CFDataGetBytePtr(a4), fd_write((uint64_t)v39, (uint64_t)v41, v53) != -1))
      {
        if (!(_DWORD)v57 || (v42 = CFDataGetBytePtr(a5), fd_write((uint64_t)v39, (uint64_t)v42, v57) != -1))
        {
          v43 = a9 & 2;
          if (!(_DWORD)v54)
          {
LABEL_87:
            if (!(_DWORD)v55 || (BytePtr = CFDataGetBytePtr(a7), fd_write((uint64_t)v39, (uint64_t)BytePtr, v55) != -1))
            {
              *(_QWORD *)&v64 = v28;
              *((_QWORD *)&v64 + 1) = v60;
              v65 = v52 + 12;
              v66 = bundleIdHash((uint64_t)buffer, v32);
              v67 = v43;
              _mobile_journal_update_toc(v20, &v64, v29);
              pthread_mutex_unlock(v18);
              *(_QWORD *)(a10 + 8) = v60;
              *(_QWORD *)(a10 + 16) = v52 + 12;
              *(_QWORD *)a10 = v20;
              *(_BYTE *)(a10 + 24) = v28 != 0;
              return 1;
            }
            goto LABEL_99;
          }
          v44 = CFDataGetBytePtr(v62);
          if (fd_write((uint64_t)v39, (uint64_t)v44, v54) != -1)
          {
            v43 |= 1u;
            goto LABEL_87;
          }
        }
      }
    }
LABEL_99:
    v47 = *__error();
    fd_truncate((uint64_t)v39, v60);
    *__error() = v47;
    goto LABEL_91;
  }
LABEL_94:
  pthread_mutex_unlock(v18);
  if (v20)
  {
    do
      v51 = __ldaxr((unsigned int *)v20);
    while (__stlxr(v51 - 1, (unsigned int *)v20));
    if (v51 == 1)
      _si_mobile_journal_finalize(v20, 1);
  }
  return 0;
}

uint64_t checkSumCFData(CFDataRef theData, _DWORD *a2, _DWORD *a3)
{
  const __CFData *v4;
  const UInt8 *BytePtr;
  const Bytef *v7;
  CFIndex Length;

  v4 = theData;
  if (!theData)
    goto LABEL_6;
  BytePtr = CFDataGetBytePtr(theData);
  if (!BytePtr)
  {
    LODWORD(v4) = 0;
    goto LABEL_6;
  }
  v7 = BytePtr;
  Length = CFDataGetLength(v4);
  if (Length <= 0x7FFFFFFF)
  {
    LODWORD(v4) = Length;
    *a2 = adler32(*a2, v7, Length);
LABEL_6:
    *a3 = (_DWORD)v4;
    return 1;
  }
  return 0;
}

void enqueueForProcessing(const void *a1, uint64_t *a2, uint64_t a3, char a4, _OWORD *a5, uint64_t a6, unsigned int a7)
{
  _QWORD *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t (*v22)();
  qos_class_t v23;
  int v24;
  int v25;
  NSObject *log;
  int v27;
  _QWORD *v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  const void *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v14 = si_mobile_set_attr_ctx_create(a6, a1);
  v28 = v14;
  v15 = *a5;
  *(_OWORD *)(v14 + 3) = a5[1];
  *(_OWORD *)(v14 + 1) = v15;
  v14[7] = a1;
  v16 = *((_QWORD *)a5 + 2);
  do
  {
    v17 = __ldxr(&gEnqueuedSize);
    v18 = v17 + v16;
  }
  while (__stxr(v17 + v16, &gEnqueuedSize));
  if ((a4 & 4) != 0 || v18 >= 0x40000)
  {
    v19 = *a2;
    if (*a2)
    {
      if (v18 >= 0x40000)
      {
        v27 = *__error();
        v20 = _SILogForLogForCategory(0);
        v21 = 2 * (gSILogLevels[0] < 4);
        log = v20;
        if (os_log_type_enabled(v20, v21))
        {
          *(_DWORD *)buf = 134218498;
          v30 = v16;
          v31 = 2048;
          v32 = v18;
          v33 = 2112;
          v34 = a1;
          _os_log_impl(&dword_1B8270000, log, v21, "#index too much enqueued (%lld/%lld), bundleID:%@ - deferring callback", buf, 0x20u);
        }
        *__error() = v27;
        v19 = *a2;
      }
      v14[5] = v19;
      v14[6] = a3;
      *a2 = 0;
    }
  }
  *((CFAbsoluteTime *)v14 + 8) = CFAbsoluteTimeGetCurrent();
  v22 = si_backtrace_routine_resolve(*v14, (const __CFString *)v14[9], (uint64_t (*)())setCSAttributes2, v14, &v28);
  v23 = qos_class_self();
  if (v23 >= QOS_CLASS_UTILITY)
    v24 = 17;
  else
    v24 = v23;
  if ((a4 & 8) != 0)
    v25 = 9;
  else
    v25 = v24;
  si_enqueue_work_bulk_with_qos(*(_QWORD *)(a6 + 8 * a7 + 1008), v25, (uint64_t)v22, (uint64_t)&v28, (uint64_t)a1, 1);
}

uint64_t (*si_backtrace_routine_resolve(uint64_t a1, const __CFString *cf1, uint64_t (*a3)(), _QWORD *a4, _QWORD *a5))()
{
  uint64_t (**v10)();
  uint64_t (*v11)();
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t (**v15)();
  uint64_t (*v16)();
  _QWORD *v17;
  int HasPrefix;

  if (cf1)
  {
    if (CFEqual(cf1, CFSTR("com.apple.mobilemail")))
    {
      v10 = &si_backtrace_table;
    }
    else if (CFEqual(cf1, CFSTR("com.apple.MobileSMS")))
    {
      v10 = &off_1EF19FB68;
    }
    else if (CFEqual(cf1, CFSTR("com.apple.mobilecal")))
    {
      v10 = &off_1EF19FB70;
    }
    else if (CFEqual(cf1, CFSTR("com.apple.FileProvider.LocalStorage")))
    {
      v10 = &off_1EF19FB80;
    }
    else if (CFEqual(cf1, CFSTR("com.apple.CloudDocs.iCloudDriveFileProvider"))
           || CFEqual(cf1, CFSTR("com.apple.CloudDocs.iCloudDriveFileProviderManaged"))
           || CFEqual(cf1, CFSTR("com.apple.CloudDocs.MobileDocumentsFileProvider")))
    {
      v10 = &off_1EF19FB78;
    }
    else if (CFEqual(cf1, CFSTR("com.apple.mobilenotes")))
    {
      v10 = &off_1EF19FB88;
    }
    else if (CFEqual(cf1, CFSTR("com.apple.mobileslideshow")))
    {
      v10 = &off_1EF19FB90;
    }
    else if (CFEqual(cf1, CFSTR("com.apple.pommesctl")))
    {
      v10 = &off_1EF19FB98;
    }
    else
    {
      HasPrefix = CFStringHasPrefix(cf1, CFSTR("com.apple."));
      v10 = &off_1EF19FBA0;
      if (!HasPrefix)
        v10 = &off_1EF19FBA8;
    }
    v11 = *v10;
    if (*v10)
    {
      v12 = malloc_type_malloc(0x18uLL, 0x1080040A502281CuLL);
      *v12 = a3;
      v12[1] = a4;
      *((_BYTE *)v12 + 16) = 1;
      a4 = v12;
      a3 = v11;
    }
  }
  if (a1)
  {
    v13 = *(_DWORD *)(a1 + 60);
    if ((v13 & 1) != 0)
    {
      v15 = &off_1EF19FBB0;
    }
    else
    {
      v14 = (v13 >> 1) - 1;
      if (v14 > 6 || ((0x47u >> v14) & 1) == 0)
        goto LABEL_24;
      v15 = (uint64_t (**)())off_1E6E2E410[v14];
    }
    v16 = *v15;
    if (*v15)
    {
      v17 = malloc_type_malloc(0x18uLL, 0x1080040A502281CuLL);
      *v17 = a3;
      v17[1] = a4;
      *((_BYTE *)v17 + 16) = 1;
      a4 = v17;
      a3 = v16;
    }
  }
LABEL_24:
  *a5 = a4;
  return a3;
}

_QWORD *si_mobile_set_attr_ctx_create(uint64_t a1, const void *a2)
{
  _QWORD *v4;

  v4 = malloc_type_calloc(1uLL, 0x58uLL, 0x10E0040A35325E4uLL);
  *v4 = a1;
  if (a2)
    v4[9] = CFRetain(a2);
  return v4;
}

void si_enqueue_work_bulk_with_qos(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v6;
  _QWORD *v7;
  NSObject *v8;
  _QWORD v9[10];
  int v10;
  int v11;
  char v12;

  v6 = *(_QWORD **)a1;
  if (!*(_QWORD *)a1)
  {
    v7 = 0;
    if (a2)
      goto LABEL_4;
LABEL_6:
    a2 = *(unsigned __int8 *)(a1 + 24);
    goto LABEL_4;
  }
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6);
  if (!a2)
    goto LABEL_6;
LABEL_4:
  v8 = *(NSObject **)(a1 + 8);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = __si_enqueue_work_bulk_with_qos_block_invoke;
  v9[3] = &__block_descriptor_tmp_920;
  v9[4] = a1;
  v9[5] = a5;
  v12 = a6;
  v9[6] = 0;
  v9[7] = v7;
  v10 = 1;
  v11 = a2;
  v9[8] = a3;
  v9[9] = a4;
  dispatch_sync(v8, v9);
}

void __si_enqueue_barrier_for_job_block_invoke(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t);
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  _BOOL4 v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  NSObject *v11;
  _QWORD *v12;
  BOOL v13;
  qos_class_t v14;
  qos_class_t v15;
  _opaque_pthread_t *v16;
  pthread_override_s *v17;
  dispatch_block_t v18;
  unsigned int *v19;
  unsigned int v20;
  char *v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  const char *v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  unint64_t v31;
  uint64_t block;
  __int128 v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[5];
  if (!v1)
  {
    v21 = __si_assert_copy_extra_521(-1);
    v22 = v21;
    v23 = "";
    if (v21)
      v23 = v21;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIScheduler.c", 735, "queue", v23);
    free(v22);
    if (__valid_fs(-1))
      v24 = 2989;
    else
      v24 = 3072;
    *(_DWORD *)v24 = -559038737;
    abort();
  }
  v2 = a1[4];
  v3 = (void (*)(_QWORD, uint64_t))a1[6];
  v4 = a1[7];
  v5 = (unsigned int *)a1[8];
  v6 = *v1;
  v7 = v2 == 0;
  if (v5)
  {
    if (v2)
    {
      v8 = (unsigned int *)(v2 + 112);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v31 = (unint64_t)v3;
    do
      v10 = __ldaxr(v5);
    while (__stlxr(v10 + 1, v5));
  }
  else
  {
    if (!v2 || v6 && (*(_DWORD *)(v6 + 88) || *(_BYTE *)(v6 + 48)))
    {
      v3(a1[7], 1);
      return;
    }
    v31 = a1[6];
    v19 = (unsigned int *)(v2 + 112);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v7 = 0;
    v5 = 0;
  }
  v11 = v1[2];
  *(int64x2_t *)(v1 + 7) = vaddq_s64(*(int64x2_t *)(v1 + 7), vdupq_n_s64(1uLL));
  v12 = malloc_type_malloc(0x48uLL, 0x10A0040047F2C8DuLL);
  v12[3] = v31;
  v12[4] = v4;
  v12[5] = v5;
  v12[6] = 0;
  v12[7] = v4 ^ v31 ^ (unint64_t)v5;
  if (v7)
  {
    v25 = __si_assert_copy_extra_521(-1);
    v26 = v25;
    v27 = "";
    if (v25)
      v27 = v25;
    __message_assert("%s:%u: failed assertion '%s' %s ", "SIScheduler.c", 680, "root", v27);
    free(v26);
    if (__valid_fs(-1))
      v28 = 2989;
    else
      v28 = 3072;
    *(_DWORD *)v28 = -559038737;
    abort();
  }
  *v12 = v2;
  v12[1] = v6;
  v12[2] = v1;
  v13 = *(_DWORD *)(v2 + 116) == 1 && (v1[7] & 0xF) == 0;
  *((_BYTE *)v12 + 64) = v13;
  v14 = qos_class_self();
  v15 = v14;
  if (*(_QWORD *)(v6 + 160) && *(_DWORD *)(v6 + 184) < v14)
  {
    pthread_mutex_lock(*(pthread_mutex_t **)(v6 + 8));
    v16 = *(_opaque_pthread_t **)(v6 + 160);
    if (v16)
    {
      if (*(_DWORD *)(v6 + 184) < v15)
      {
        v17 = *(pthread_override_s **)(v6 + 176);
        *(_QWORD *)(v6 + 176) = pthread_override_qos_class_start_np(v16, v15, 0);
        *(_DWORD *)(v6 + 184) = v15;
        if (v17)
          pthread_override_qos_class_end_np(v17);
      }
    }
    pthread_mutex_unlock(*(pthread_mutex_t **)(v6 + 8));
  }
  if (dword_1EF19FCC0 >= 5)
  {
    v29 = *__error();
    v30 = _SILogForLogForCategory(13);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(block) = 67109376;
      HIDWORD(block) = v15;
      LOWORD(v33) = 2048;
      *(_QWORD *)((char *)&v33 + 2) = v12;
      _os_log_impl(&dword_1B8270000, v30, OS_LOG_TYPE_DEFAULT, "QOS enqueue_work: %d %p", (uint8_t *)&block, 0x12u);
    }
    *__error() = v29;
  }
  block = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v33 = 0x40000000;
  *((_QWORD *)&v33 + 1) = __enqueue_barrier_block_invoke;
  v34 = &__block_descriptor_tmp_55;
  v35 = v12;
  v18 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v15, 0, &block);
  dispatch_barrier_async(v11, v18);
  _Block_release(v18);
}

uint64_t si_write_index_state(uint64_t a1, int a2, int a3)
{
  char *v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  NSObject *v29;
  os_log_type_t v30;
  const char *v31;
  int v32;
  NSObject *v33;
  char *v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t (*v40)(uint64_t, uint64_t);
  void *v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE buf[28];
  __int16 v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v5 = (char *)(a1 + 2480);
  if (a2)
  {
    *(_BYTE *)(a1 + 2480) = 1;
    v6 = *(_QWORD *)(a1 + 1392);
    v7 = *(_DWORD *)(v6 + 8);
    if ((*(_BYTE *)(a1 + 830) & 4) != 0)
    {
      if (v7)
      {
        v35 = __si_assert_copy_extra_521(-1);
        v36 = v35;
        v37 = "";
        if (v35)
          v37 = v35;
        __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", 29872, "ref->syncSet->indexCount == 0", v37);
        free(v36);
        if (__valid_fs(-1))
          v38 = 2989;
        else
          v38 = 3072;
        *(_DWORD *)v38 = -559038737;
        abort();
      }
      v9 = *(_QWORD *)(a1 + 1384);
      v10 = (_DWORD *)(v9 + 8);
      *(_WORD *)(a1 + 2486) = *(_DWORD *)(v9 + 8);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
      v8 = *(unsigned __int16 *)(a1 + 2484);
    }
    else
    {
      v8 = 0;
      *(_WORD *)(a1 + 2484) = v7;
      v9 = *(_QWORD *)(a1 + 1384);
      v10 = (_DWORD *)(v9 + 8);
      *(_WORD *)(a1 + 2486) = *(_DWORD *)(v9 + 8);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2000000000;
    }
    *(_DWORD *)&buf[24] = v8;
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 0x40000000;
    v40 = __si_write_index_state_block_invoke;
    v41 = &unk_1E6E2D160;
    v42 = buf;
    v43 = a1 + 2480;
    if (*(_DWORD *)(v6 + 8))
    {
      v11 = 0;
      while (((unsigned int (*)(_QWORD *, _QWORD, _QWORD))v40)(v39, *(_QWORD *)(*(_QWORD *)v6 + 8 * v11), 0))
      {
        if (++v11 >= (unint64_t)*(unsigned int *)(v6 + 8))
        {
          if (!v9)
            break;
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      if (*v10)
      {
        v12 = 0;
        do
        {
          if (!((unsigned int (*)(_QWORD *, _QWORD, uint64_t))v40)(v39, *(_QWORD *)(*(_QWORD *)v9 + 8 * v12), 1))break;
          ++v12;
        }
        while (v12 < *v10);
      }
    }
    _Block_object_dispose(buf, 8);
  }
  *(_DWORD *)buf = 0;
  if ((fd_setDir(*(unsigned int *)(a1 + 32), (int *)buf) & 1) == 0)
    goto LABEL_25;
  v18 = x_openat(*(_DWORD *)(a1 + 32), "tmp.spotlight.state", 536872449, v13, v14, v15, v16, v17, 0x180u);
  v19 = v18;
  if (*(_BYTE *)(a1 + 2072))
    fcntl(v18, 64, 3);
  v20 = *(_DWORD *)buf;
  MEMORY[0x1BCCB1484](*(unsigned int *)buf);
  if ((v20 & 0x80000000) == 0)
    close(v20);
  if ((_DWORD)v19 == -1)
  {
LABEL_25:
    v23 = *__error();
    v24 = *__error();
    v25 = _SILogForLogForCategory(11);
    v26 = v25;
    if ((_DWORD)v23 == 2)
    {
      v27 = 2 * (dword_1EF19FCB8 < 4);
      if (os_log_type_enabled(v25, v27))
      {
        *(_DWORD *)buf = 134218240;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2;
        _os_log_impl(&dword_1B8270000, v26, v27, "%p open index state error:%d", buf, 0x12u);
      }
      *__error() = v24;
      return 2;
    }
    else
    {
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "si_write_index_state";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 29897;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = a1;
        v45 = 1024;
        v46 = v23;
        _os_log_error_impl(&dword_1B8270000, v26, OS_LOG_TYPE_ERROR, "%s:%d: %p open index state error:%d", buf, 0x22u);
      }
      *__error() = v24;
    }
  }
  else
  {
    v21 = prot_pwrite(v19, v5, 0x1000uLL, 0);
    if (v21 == 4096)
    {
      prot_fsync(v19, a3);
      v28 = *__error();
      v29 = _SILogForLogForCategory(11);
      v30 = 2 * (dword_1EF19FCB8 < 4);
      if (os_log_type_enabled(v29, v30))
      {
        if ((*(_BYTE *)(a1 + 2481) - 1) > 3u)
          v31 = "unknown";
        else
          v31 = off_1E6E2E448[(*(_BYTE *)(a1 + 2481) - 1)];
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v31;
        _os_log_impl(&dword_1B8270000, v29, v30, "%p write state:%s", buf, 0x16u);
      }
      *__error() = v28;
      _si_dump_index_state(a1, 4);
      v23 = 0;
    }
    else
    {
      v22 = v21;
      if (v21 == -1)
        v23 = *__error();
      else
        v23 = 22;
      v32 = *__error();
      v33 = _SILogForLogForCategory(11);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = "si_write_index_state";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 29911;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = a1;
        v45 = 1024;
        v46 = v19;
        v47 = 2048;
        v48 = v22;
        v49 = 1024;
        v50 = v23;
        _os_log_error_impl(&dword_1B8270000, v33, OS_LOG_TYPE_ERROR, "%s:%d: %p write index state fd:%d rs:%ld error:%d", buf, 0x32u);
      }
      *__error() = v32;
    }
    close(v19);
  }
  return v23;
}

uint64_t __si_write_index_state_block_invoke(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a2 + 15161);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(int *)(v4 + 24);
  *(_DWORD *)(v4 + 24) = v5 + 1;
  *(_BYTE *)(v3 + v5 + 8) = v2;
  return 1;
}

void si_finish_text_store_deletions(uint64_t a1)
{
  uint64_t v2;

  os_unfair_lock_lock((os_unfair_lock_t)&text_store_docs_lock);
  v2 = *(_QWORD *)(a1 + 6936);
  if (v2)
  {
    *(_QWORD *)(a1 + 6936) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)&text_store_docs_lock);
    si_text_store_bulk_delete(a1, *(unint64_t **)v2, *(_QWORD *)(v2 + 8));
    free(*(void **)v2);
    free((void *)v2);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&text_store_docs_lock);
  }
}

void deleteCSAttributes(unsigned __int8 *a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  double Current;
  double v7;
  uint64_t v8;
  __uint64_t v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void (*v18)(_QWORD);
  int v19;
  NSObject *v20;
  uint64_t *base;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t VInt64;
  uint64_t v29;
  unint64_t v30;
  int v31;
  NSObject *v32;
  int v33;
  NSObject *v34;
  const char *v35;
  int v36;
  int v37;
  unsigned int v38;
  CFStringRef v39;
  uint64_t v40;
  const __CFString *v41;
  int v42;
  NSObject *v43;
  int v44;
  NSObject *v45;
  int v46;
  __uint64_t v47;
  const char *v48;
  uint32_t v49;
  __uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  void (*v54)(_QWORD);
  unint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  const void *v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  Bytef *v63;
  uint64_t v64;
  unsigned int v65;
  int v66;
  char *v67;
  uint64_t v68;
  int64_t v69;
  unint64_t v70;
  _QWORD v71[7];
  char v72;
  __int16 v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  _BYTE buf[12];
  __int16 v83;
  int v84;
  __int16 v85;
  uint64_t *v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  unint64_t v90;
  __int16 v91;
  unint64_t v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_QWORD *)a1 + 3);
  Current = CFAbsoluteTimeGetCurrent();
  if (!a2)
  {
    v7 = Current;
    v8 = *(_QWORD *)a1;
    v9 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    do
    {
      v10 = __ldxr(exceptionSequenceNum);
      v11 = v10 + 1;
    }
    while (__stxr(v10 + 1, exceptionSequenceNum));
    v12 = setThreadIdAndInfo(-1, (__int128 *)sJournalCtxExceptionCallbacks, (uint64_t)a1, 0x40000000, v11);
    v80 = HIDWORD(v12);
    v81 = v12;
    v78 = v14;
    v79 = v13;
    v15 = *(_QWORD *)&threadData[18 * v12 + 2];
    v16 = v15 + 320 * HIDWORD(v12);
    *(_BYTE *)(v16 + 216) = 0;
    v17 = *(_DWORD *)(v16 + 312);
    v18 = *(void (**)(_QWORD))(v16 + 224);
    if (v18)
      v18(*(_QWORD *)(v15 + 320 * HIDWORD(v12) + 288));
    v77 = v81;
    v76 = v80;
    v75 = __PAIR64__(v79, v78);
    if (_setjmp((int *)v16))
    {
      v19 = *__error();
      v20 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "deleteCSAttributes";
        v83 = 1024;
        v84 = 28304;
        _os_log_error_impl(&dword_1B8270000, v20, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v19;
      *(_DWORD *)(v16 + 312) = v17;
      CIOnThreadCleanUpReset(v75);
      dropThreadId(v77, 1, v11);
      CICleanUpReset(v77, HIDWORD(v75));
LABEL_52:
      bumpWorkTime(v8, v7);
      goto LABEL_53;
    }
    base = si_mobile_journal_get_base(*((uint64_t **)a1 + 1), v4, v5);
    v22 = base;
    if (!base || v5 <= 0x11)
    {
      v31 = *__error();
      v32 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "deleteCSAttributes";
        v83 = 1024;
        v84 = 28171;
        v85 = 2048;
        v86 = v22;
        v87 = 2048;
        v88 = v4;
        v89 = 2048;
        v90 = v5;
        _os_log_error_impl(&dword_1B8270000, v32, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, diskRecord:%p, journalEntryOffset:%lld, journalEntrySize:%ld", buf, 0x30u);
      }
      *__error() = v31;
      goto LABEL_49;
    }
    v23 = (uint64_t *)*(unsigned int *)base;
    if ((_DWORD)v23 == -262209811 || (_DWORD)v23 == -261161235)
    {
      v24 = (uint64_t *)*((unsigned int *)base + 1);
      if (v24 <= 0xFFFFFFF3 && v5 >= ((_DWORD)v24 + 12))
      {
        v67 = (char *)base + 18;
        v25 = *((unsigned __int16 *)base + 6);
        v65 = *(_DWORD *)((char *)base + 14);
        v26 = v65;
        v63 = (Bytef *)base + 18;
        if (a1[32])
        {
          *(_QWORD *)buf = 0;
          v68 = v8;
          v27 = v25;
          VInt64 = v2_readVInt64((uint64_t)base + 18, (uint64_t *)buf);
          v25 = v27;
          v26 = v65;
          v8 = v68;
          v29 = *(unsigned int *)buf;
          v30 = VInt64;
        }
        else
        {
          v29 = 0;
          v30 = 0;
        }
        v70 = v30;
        if ((_DWORD)v24 != (_DWORD)v29 + (_DWORD)v25 + 8 * (_DWORD)v26 + 6)
        {
          v60 = v29 + v25 + 8 * v26 + 6;
          v42 = *__error();
          v43 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "deleteCSAttributes";
            v83 = 1024;
            v84 = 28208;
            v85 = 2048;
            v86 = v24;
            v87 = 2048;
            v88 = v60;
            v89 = 2048;
            v90 = v4;
            v91 = 2048;
            v92 = v5;
            _os_log_error_impl(&dword_1B8270000, v43, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, size:%ld, extraSize:%ld, journalEntryOffset:%lld, journalEntrySize:%ld", buf, 0x3Au);
          }
          *__error() = v42;
          goto LABEL_47;
        }
        v61 = v29;
        v62 = v29 + v25;
        v66 = v25;
        v69 = v26;
        v36 = (int)v24;
        v64 = *((unsigned int *)v22 + 2);
        v37 = *((_DWORD *)v22 + 2);
        v38 = adler32(0, v63, v36 - 6);
        if (v37 == v38)
        {
          if (!v66)
          {
            if (!v65)
              goto LABEL_47;
            v41 = 0;
            v40 = v61;
LABEL_39:
            v46 = (a1[40] >> 4) & 1;
            v71[0] = MEMORY[0x1E0C809B0];
            v71[1] = 0x40000000;
            v71[2] = __deleteCSAttributes_block_invoke;
            v71[3] = &__block_descriptor_tmp_1478;
            v72 = v46;
            v71[4] = a1;
            v71[5] = v8;
            v73 = v66;
            v74 = v65;
            v71[6] = &v67[v40];
            si_indexingWatchdogPerform(v8, (uint64_t)v41, v65, 1u, (uint64_t)v71);
            if (!v41)
            {
              v50 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
              logDeleteEventInCoreAnalyticsWithBundleId(0, v69, 0, v50 - v9);
LABEL_47:
              if (v70)
                *(_QWORD *)(v8 + 2136) = v70;
              goto LABEL_49;
            }
            SIGetAccumulatedSizeForGroup(v8, v41, 0);
            v47 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
            logDeleteEventInCoreAnalyticsWithBundleId(v41, v69, 0, v47 - v9);
            v39 = v41;
LABEL_41:
            CFRelease(v39);
            goto LABEL_47;
          }
          v39 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &v67[v61], 0x8000100u);
          if (v39)
          {
            v40 = v62;
            v41 = v39;
            if (!v65)
              goto LABEL_41;
            goto LABEL_39;
          }
          v44 = *__error();
          v45 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316162;
            *(_QWORD *)&buf[4] = "deleteCSAttributes";
            v83 = 1024;
            v84 = 28228;
            v85 = 2048;
            v86 = 0;
            v87 = 2048;
            v88 = v4;
            v89 = 2048;
            v90 = v5;
            v48 = "%s:%d: Invalid journal entry, bundleID:%p, journalEntryOffset:%lld, journalEntrySize:%ld";
            v49 = 48;
LABEL_63:
            _os_log_error_impl(&dword_1B8270000, v45, OS_LOG_TYPE_ERROR, v48, buf, v49);
          }
        }
        else
        {
          v44 = *__error();
          v45 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136316418;
            *(_QWORD *)&buf[4] = "deleteCSAttributes";
            v83 = 1024;
            v84 = 28219;
            v85 = 2048;
            v86 = (uint64_t *)v38;
            v87 = 2048;
            v88 = v64;
            v89 = 2048;
            v90 = v4;
            v91 = 2048;
            v92 = v5;
            v48 = "%s:%d: Invalid journal entry, checkSum:0x%08lx, storedCheckSum:0x%08lx, journalEntryOffset:%lld, journalEntrySize:%ld";
            v49 = 58;
            goto LABEL_63;
          }
        }
        *__error() = v44;
        goto LABEL_47;
      }
      v33 = *__error();
      v34 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "deleteCSAttributes";
        v83 = 1024;
        v84 = 28186;
        v85 = 2048;
        v86 = v24;
        v87 = 2048;
        v88 = v4;
        v89 = 2048;
        v90 = v5;
        v35 = "%s:%d: Invalid journal entry, size:%ld, journalEntryOffset:%lld, journalEntrySize:%ld";
LABEL_43:
        _os_log_error_impl(&dword_1B8270000, v34, OS_LOG_TYPE_ERROR, v35, buf, 0x30u);
      }
    }
    else
    {
      v33 = *__error();
      v34 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = "deleteCSAttributes";
        v83 = 1024;
        v84 = 28177;
        v85 = 2048;
        v86 = v23;
        v87 = 2048;
        v88 = v4;
        v89 = 2048;
        v90 = v5;
        v35 = "%s:%d: Invalid journal entry, magic:0x%08lx, journalEntryOffset:%lld, journalEntrySize:%ld";
        goto LABEL_43;
      }
    }
    *__error() = v33;
LABEL_49:
    v51 = *(_QWORD *)&threadData[18 * v77 + 2];
    v52 = v76;
    v53 = v51 + 320 * v76;
    *(_DWORD *)(v53 + 312) = v17;
    v54 = *(void (**)(_QWORD))(v53 + 232);
    if (v54)
      v54(*(_QWORD *)(v51 + 320 * v52 + 288));
    dropThreadId(v77, 0, v11);
    goto LABEL_52;
  }
LABEL_53:
  if (v5)
  {
    do
      v55 = __ldxr(&gEnqueuedSize);
    while (__stxr(v55 - v5, &gEnqueuedSize));
  }
  v56 = (unsigned int *)*((_QWORD *)a1 + 1);
  if (v56)
  {
    do
    {
      v57 = __ldaxr(v56);
      v58 = v57 - 1;
    }
    while (__stlxr(v58, v56));
    if (!v58)
      _si_mobile_journal_finalize((uint64_t)v56, 1);
  }
  v59 = (const void *)*((_QWORD *)a1 + 7);
  if (v59)
    CFRelease(v59);
  free(a1);
}

void setCSAttributes2(unsigned __int8 *a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  double v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD);
  int v20;
  int v21;
  NSObject *v22;
  uint64_t *base;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  NSObject *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  void (*v40)(_QWORD);
  NSObject *v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(_QWORD, _QWORD, __n128);
  int v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  const void *v52;
  int v53;
  NSObject *v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t VInt64;
  unsigned int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  const __CFAllocator *v70;
  CFStringRef v71;
  const __CFString *v72;
  uint64_t v73;
  _BOOL4 v74;
  int v75;
  uint64_t v76;
  CFStringRef v77;
  uint64_t v78;
  int v79;
  NSObject *v80;
  NSObject *v81;
  int v82;
  NSObject *v83;
  CFStringRef v84;
  uint64_t v85;
  int v86;
  CFStringRef v87;
  CFStringRef v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int Count;
  int64_t v95;
  __uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  const __CFString *v101;
  BOOL v102;
  unsigned int v103;
  __int16 v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t, const __CFString *, uint64_t, _QWORD, _QWORD *);
  uint64_t v107;
  uint64_t v108;
  const __CFAllocator *v109;
  uint64_t Mutable;
  uint64_t v111;
  const __CFString *v112;
  const __CFString *v113;
  const __CFString *v114;
  int CString;
  const void *v116;
  const __CFString *v117;
  int64_t v118;
  __uint64_t v119;
  unint64_t v120[512];
  unsigned int v121;
  int v122;
  uint64_t v123;
  char *v124;
  const __CFString *v125;
  const Bytef *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  const void *v132;
  const __CFAllocator *v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  _BOOL4 v139;
  int v140;
  int v141;
  uint64_t v142;
  unsigned int v143;
  char *v144;
  CFAllocatorRef v145;
  unsigned int v146;
  CFStringEncoding v147;
  unsigned int v148;
  const __CFString *v149;
  CFStringRef v150;
  int v151;
  const __CFString *v152;
  uint64_t *v153;
  __uint64_t v154;
  uint64_t v155;
  int v156;
  int v157;
  dispatch_group_t v158;
  __int128 v159;
  _QWORD v160[7];
  __int128 v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  CFStringRef v166;
  dispatch_group_t v167;
  unsigned __int8 *v168;
  unsigned int v169;
  BOOL v170;
  char v171;
  __int16 v172;
  __int16 v173;
  unsigned int v174;
  unsigned int v175;
  int v176;
  int v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  _QWORD v182[5];
  __int128 v183;
  uint64_t v184;
  const __CFString *v185;
  uint64_t v186;
  unsigned int v187;
  char v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned __int8 v197;
  _BYTE v198[40];
  unint64_t v199;
  __int128 v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v197 = a2;
  v5 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3);
  v7.n128_f64[0] = CFAbsoluteTimeGetCurrent();
  if (!a2)
  {
    v8 = *(_QWORD *)a1;
    if (*(_BYTE *)(*(_QWORD *)a1 + 1280))
    {
      v9 = *__error();
      v10 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v198 = 0;
        _os_log_impl(&dword_1B8270000, v10, OS_LOG_TYPE_DEFAULT, "setCSAttributes2 failed: index is read-only", v198, 2u);
      }
      *__error() = v9;
      goto LABEL_38;
    }
    v11 = v7.n128_f64[0];
    v158 = dispatch_group_create();
    v154 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
    do
    {
      v12 = __ldxr(exceptionSequenceNum);
      v13 = v12 + 1;
    }
    while (__stxr(v12 + 1, exceptionSequenceNum));
    v14 = setThreadIdAndInfo(-1, (__int128 *)sJournalCtxExceptionCallbacks, (uint64_t)a1, 0x40000000, v13);
    v195 = HIDWORD(v14);
    v196 = v14;
    v194 = v15;
    v193 = v16;
    v17 = *(_QWORD *)&threadData[18 * v14 + 2];
    v18 = v17 + 320 * HIDWORD(v14);
    *(_BYTE *)(v18 + 216) = 0;
    v156 = *(_DWORD *)(v18 + 312);
    v19 = *(void (**)(_QWORD))(v18 + 224);
    if (v19)
      v19(*(_QWORD *)(v17 + 320 * HIDWORD(v14) + 288));
    v20 = v13;
    v192 = v196;
    v191 = v195;
    v190 = v194;
    v189 = v193;
    if (_setjmp((int *)v18))
    {
      v21 = *__error();
      v22 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v198 = 136315394;
        *(_QWORD *)&v198[4] = "setCSAttributes2";
        *(_WORD *)&v198[12] = 1024;
        *(_DWORD *)&v198[14] = 28133;
        _os_log_error_impl(&dword_1B8270000, v22, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v198, 0x12u);
      }
      *__error() = v21;
      *(_DWORD *)(v18 + 312) = v156;
      CIOnThreadCleanUpReset(v189);
      dropThreadId(v192, 1, v13);
      CICleanUpReset(v192, v190);
LABEL_37:
      bumpWorkTime(v8, v11);
      v41 = v158;
      dispatch_group_wait(v158, 0xFFFFFFFFFFFFFFFFLL);
      dispatch_release(v41);
LABEL_38:
      v6 = v8;
      goto LABEL_39;
    }
    base = si_mobile_journal_get_base(*((uint64_t **)a1 + 1), v5, v4);
    v24 = base;
    if (!base || v4 <= 0x1F)
    {
      v28 = *__error();
      v29 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v198 = 136316162;
        *(_QWORD *)&v198[4] = "setCSAttributes2";
        *(_WORD *)&v198[12] = 1024;
        *(_DWORD *)&v198[14] = 27653;
        *(_WORD *)&v198[18] = 2048;
        *(_QWORD *)&v198[20] = v24;
        *(_WORD *)&v198[28] = 2048;
        *(_QWORD *)&v198[30] = v5;
        *(_WORD *)&v198[38] = 2048;
        v199 = v4;
        _os_log_error_impl(&dword_1B8270000, v29, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, diskRecord:%p, journalEntryOffset:%lld, journalEntrySize:%ld", v198, 0x30u);
      }
      *__error() = v28;
      goto LABEL_22;
    }
    v25 = *(unsigned int *)base;
    v26 = v25;
    if ((int)v25 > -262275348)
    {
      if ((_DWORD)v25 != -262275347)
      {
        v27 = -260112659;
        goto LABEL_25;
      }
    }
    else if ((_DWORD)v25 != -263323923)
    {
      v27 = -263258387;
LABEL_25:
      if ((_DWORD)v25 == v27)
        goto LABEL_26;
      v53 = *__error();
      v54 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v198 = 136316162;
        *(_QWORD *)&v198[4] = "setCSAttributes2";
        *(_WORD *)&v198[12] = 1024;
        *(_DWORD *)&v198[14] = 27659;
        *(_WORD *)&v198[18] = 2048;
        *(_QWORD *)&v198[20] = v26;
        *(_WORD *)&v198[28] = 2048;
        *(_QWORD *)&v198[30] = v5;
        *(_WORD *)&v198[38] = 2048;
        v199 = v4;
        _os_log_error_impl(&dword_1B8270000, v54, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, magic:0x%08lx, journalEntryOffset:%lld, journalEntrySize:%ld", v198, 0x30u);
      }
      *__error() = v53;
LABEL_22:
      v30 = v156;
LABEL_34:
      v37 = *(_QWORD *)&threadData[18 * v192 + 2];
      v38 = v191;
      v39 = v37 + 320 * v191;
      *(_DWORD *)(v39 + 312) = v30;
      v40 = *(void (**)(_QWORD))(v39 + 232);
      if (v40)
        v40(*(_QWORD *)(v37 + 320 * v38 + 288));
      dropThreadId(v192, 0, v20);
      goto LABEL_37;
    }
LABEL_26:
    v31 = *((unsigned int *)base + 1);
    if (v31 > 0xFFFFFFF3 || v4 < (v31 + 12))
    {
      v129 = *((unsigned int *)base + 1);
      v35 = *__error();
      v36 = _SILogForLogForCategory(0);
      v30 = v156;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v198 = 136316162;
        *(_QWORD *)&v198[4] = "setCSAttributes2";
        *(_WORD *)&v198[12] = 1024;
        *(_DWORD *)&v198[14] = 27668;
        *(_WORD *)&v198[18] = 2048;
        *(_QWORD *)&v198[20] = v129;
        *(_WORD *)&v198[28] = 2048;
        *(_QWORD *)&v198[30] = v5;
        *(_WORD *)&v198[38] = 2048;
        v199 = v4;
        _os_log_error_impl(&dword_1B8270000, v36, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, size:%ld, journalEntryOffset:%lld, journalEntrySize:%ld", v198, 0x30u);
      }
      *__error() = v35;
      goto LABEL_34;
    }
    v32 = *((unsigned __int16 *)base + 6);
    v33 = *((_WORD *)base + 7) & 0x7FFF;
    v157 = v13;
    if ((_DWORD)v25 == -263258387 || (_DWORD)v25 == -263323923)
      v34 = 2 * *((_DWORD *)base + 4);
    else
      v34 = *((_DWORD *)base + 4);
    v55 = v34;
    v153 = base + 4;
    v143 = v32;
    v56 = v32;
    v134 = v33;
    v57 = v33;
    v58 = *((_DWORD *)base + 5);
    v59 = *((_DWORD *)base + 6);
    v151 = *((_DWORD *)base + 7);
    v60 = a1[32];
    v146 = v55;
    v136 = v59;
    v126 = (const Bytef *)(base + 4);
    if (v60)
    {
      *(_QWORD *)v198 = 0;
      v61 = v58;
      v62 = v31;
      v123 = v57;
      VInt64 = v2_readVInt64((uint64_t)(base + 4), (uint64_t *)v198);
      LODWORD(v57) = v123;
      v31 = v62;
      v59 = v136;
      v58 = v61;
      v55 = v146;
      v64 = *(_DWORD *)v198;
      v65 = VInt64;
    }
    else
    {
      v64 = 0;
      v65 = 0;
    }
    v155 = v65;
    v66 = (v56 & 0x3FF) + (v56 >> 10) + v57 + v64 + v58 + (v55 >> 1) + v59 + v151 + 20;
    if ((_DWORD)v31 == (_DWORD)v66)
    {
      v127 = v56 & 0x3FF;
      v128 = v56 >> 10;
      v137 = v58;
      v67 = *((unsigned int *)v24 + 2);
      v68 = adler32(0, v126, (int)v31 - 20);
      if ((_DWORD)v67 == v68)
      {
        v69 = v64;
        v70 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v71 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const char *)v153 + v69, 0x8000100u);
        v20 = v157;
        if (v71)
        {
          v144 = (char *)v153 + v69;
          v72 = v71;
          v73 = v155;
          v152 = v71;
          v74 = CFEqual(v71, CFSTR("com.apple.CloudDocs.iCloudDriveFileProvider"))
             || CFEqual(v72, CFSTR("com.apple.CloudDocs.iCloudDriveFileProviderManaged"))
             || CFEqual(v72, CFSTR("com.apple.CloudDocs.MobileDocumentsFileProvider"))
             || CFStringHasPrefix(v72, CFSTR("com.apple.FileProvider"));
          v75 = v134;
          v76 = v69 + v127;
          v139 = v74;
          if (v143 >= 0x400)
          {
            v84 = CFStringCreateWithCString(v70, (const char *)v153 + v76, 0x8000100u);
            v75 = v134;
            v77 = v84;
          }
          else
          {
            v77 = 0;
          }
          v150 = v77;
          v85 = v76 + v128;
          v86 = *((_DWORD *)a1 + 20);
          v140 = v75;
          if (v75)
          {
            v87 = CFStringCreateWithCString(v70, (const char *)v153 + v85, 0x8000100u);
            v88 = v87;
          }
          else
          {
            v87 = 0;
            v88 = 0;
          }
          v90 = v136;
          v89 = v137;
          v145 = v70;
          v149 = v88;
          v91 = v137;
          v147 = 134217984;
          v148 = v86 & 0x10;
          v92 = v85 + v134;
          v93 = v92;
          v138 = v137;
          if (v146 >= 2)
          {
            memset(v198, 0, 24);
            _MDPlistGetRootPlistObjectFromBytes();
            v93 = v92 + (v146 >> 1);
            v201 = *(_OWORD *)v198;
            v202 = *(_QWORD *)&v198[16];
            Count = _MDPlistArrayGetCount();
            v182[0] = MEMORY[0x1E0C809B0];
            v182[1] = 0x40000000;
            v182[2] = __setCSAttributes2_block_invoke;
            v182[3] = &__block_descriptor_tmp_1381;
            v187 = Count;
            v183 = *(_OWORD *)v198;
            v182[4] = a1;
            v184 = *(_QWORD *)&v198[16];
            v185 = v152;
            v186 = v8;
            v188 = v148 >> 4;
            si_indexingWatchdogPerform(v8, (uint64_t)v152, Count, 6u, (uint64_t)v182);
            v95 = SIGetAccumulatedSizeForGroup(v8, v152, 0);
            v96 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
            logDeleteEventInCoreAnalyticsWithBundleId(v152, Count, v95, v96 - v154);
            v90 = v136;
            v89 = v137;
            v91 = v138;
          }
          v97 = v93;
          v142 = v90;
          v141 = v151;
          if (v91)
          {
            v98 = v89;
            v99 = v90;
            memset(v198, 0, 24);
            v201 = 0uLL;
            v202 = 0;
            _MDPlistGetRootPlistObjectFromBytes();
            v100 = v93 + v98;
            v131 = v99;
            if (v99)
            {
              v180 = 0uLL;
              v181 = 0;
              _MDPlistGetRootPlistObjectFromBytes();
              v178 = 0u;
              v179 = 0;
              v101 = v152;
              if (_MDPlistGetPlistObjectType() == 240
                && (v178 = v180, v179 = v181, _MDPlistArrayGetCount() == 2))
              {
                _MDPlistArrayGetPlistObjectAtIndex();
                v178 = *(_OWORD *)v198;
                v179 = *(_QWORD *)&v198[16];
                v102 = _MDPlistGetPlistObjectType() == 241;
              }
              else
              {
                v102 = 0;
              }
              v104 = v143;
              LOBYTE(v99) = v102;
            }
            else
            {
              v101 = v152;
              v104 = v143;
            }
            v180 = v201;
            v181 = v202;
            if (_MDPlistGetPlistObjectType() == 240)
            {
              v180 = v201;
              v181 = v202;
              v103 = _MDPlistArrayGetCount();
            }
            else
            {
              v103 = 0;
            }
            v105 = *(_QWORD *)(v8 + 2360);
            v106 = *(uint64_t (**)(uint64_t, const __CFString *, uint64_t, _QWORD, _QWORD *))(v105 + 120);
            v107 = *(_QWORD *)(v105 + 136);
            v108 = a1[85];
            v160[0] = MEMORY[0x1E0C809B0];
            v160[1] = 0x40000000;
            v160[2] = __setCSAttributes2_block_invoke_1382;
            v160[3] = &__block_descriptor_tmp_1388;
            v160[4] = v8;
            v160[5] = v101;
            v169 = v103;
            v160[6] = a1;
            v170 = v139;
            v161 = v201;
            v162 = v202;
            v171 = v99;
            v163 = *(_OWORD *)v198;
            v73 = v155;
            v164 = *(_QWORD *)&v198[16];
            v165 = v155;
            v166 = v150;
            v167 = v158;
            v168 = &v197;
            v172 = v104;
            v173 = v140;
            v174 = v146;
            v175 = v138;
            v176 = v131;
            v177 = v141;
            v87 = (CFStringRef)v106(v107, v101, v108, v103, v160);
            v97 = v100;
          }
          else
          {
            v103 = 0;
          }
          v135 = v103;
          v130 = v97;
          MEMORY[0x1E0C80A78](v87);
          bzero(v120, 0x1000uLL);
          v109 = _SIStackAllocatorCreate(v120, 4096, indexingZone);
          v30 = v156;
          v20 = v157;
          if (v149)
          {
            if (!v120[3])
              v120[1] = (v120[0] + 55) & 0xFFFFFFFFFFFFFFF0;
            v133 = v109;
            Mutable = _MDPlistContainerCreateMutable();
            if (Mutable)
            {
              v124 = v144;
              v111 = Mutable;
              _MDPlistContainerBeginContainer();
              _MDPlistContainerBeginDictionary();
              _MDPlistContainerAddCString();
              _MDPlistContainerAddCString();
              _MDPlistContainerAddCString();
              v132 = (const void *)v111;
              v112 = v149;
              _MDPlistContainerAddCString();
              if (CFStringHasPrefix(v112, CFSTR("_kMDItemStateInfo_")))
                v113 = (const __CFString *)CFRetain(v112);
              else
                v113 = CFStringCreateWithFormat(v145, 0, CFSTR("_kMDItemStateInfo_%@"), v112);
              v114 = v113;
              bzero(v198, 0x400uLL);
              v125 = v114;
              CString = CFStringGetCString(v114, v198, 1024, v147);
              v116 = v132;
              if (CString)
              {
                strlen(v198);
                _MDPlistContainerAddCString();
                if (v141)
                  _MDPlistContainerAddDataValue();
                else
                  _MDPlistContainerAddNullValue();
              }
              CFRelease(v125);
              _MDPlistContainerEndDictionary();
              _MDPlistContainerEndContainer();
              v121 = v148 | 0x20000;
              _MDPlistGetRootPlistObjectFromPlist();
              processOne(v8, v73, (uint64_t)CFSTR("com.apple.searchd"), (uint64_t)v150, &v159, v121, v133, 0, 0, &v197);
              CFRelease(v116);
            }
          }
          v117 = v152;
          v118 = SIGetAccumulatedSizeForGroup(v8, v152, 0);
          v119 = clock_gettime_nsec_np(_CLOCK_UPTIME_RAW);
          logIndexingEventInCoreAnalyticsWithBundleId(v117, v135, v118, v119 - v154);
          CFRelease(v117);
          if (v150)
            CFRelease(v150);
          if (v149)
            CFRelease(v149);
        }
        else
        {
          v82 = *__error();
          v83 = _SILogForLogForCategory(0);
          v73 = v155;
          if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v198 = 136316162;
            *(_QWORD *)&v198[4] = "setCSAttributes2";
            *(_WORD *)&v198[12] = 1024;
            *(_DWORD *)&v198[14] = 27721;
            *(_WORD *)&v198[18] = 2048;
            *(_QWORD *)&v198[20] = 0;
            *(_WORD *)&v198[28] = 2048;
            *(_QWORD *)&v198[30] = v5;
            *(_WORD *)&v198[38] = 2048;
            v199 = v4;
            _os_log_error_impl(&dword_1B8270000, v83, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, bundleID:%p, journalEntryOffset:%lld, journalEntrySize:%ld", v198, 0x30u);
          }
          *__error() = v82;
          v30 = v156;
        }
        goto LABEL_77;
      }
      v122 = *__error();
      v81 = _SILogForLogForCategory(0);
      v20 = v157;
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v198 = 136316418;
        *(_QWORD *)&v198[4] = "setCSAttributes2";
        *(_WORD *)&v198[12] = 1024;
        *(_DWORD *)&v198[14] = 27714;
        *(_WORD *)&v198[18] = 2048;
        *(_QWORD *)&v198[20] = v68;
        *(_WORD *)&v198[28] = 2048;
        *(_QWORD *)&v198[30] = v67;
        *(_WORD *)&v198[38] = 2048;
        v199 = v5;
        LOWORD(v200) = 2048;
        *(_QWORD *)((char *)&v200 + 2) = v4;
        _os_log_error_impl(&dword_1B8270000, v81, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, checkSum:0x%08lx, storedCheckSum:0x%08lx, journalEntryOffset:%lld, journalEntrySize:%ld", v198, 0x3Au);
      }
      *__error() = v122;
    }
    else
    {
      v78 = v31;
      v79 = *__error();
      v80 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v198 = 136316418;
        *(_QWORD *)&v198[4] = "setCSAttributes2";
        *(_WORD *)&v198[12] = 1024;
        *(_DWORD *)&v198[14] = 27703;
        *(_WORD *)&v198[18] = 2048;
        *(_QWORD *)&v198[20] = v78;
        *(_WORD *)&v198[28] = 2048;
        *(_QWORD *)&v198[30] = v66;
        *(_WORD *)&v198[38] = 2048;
        v199 = v5;
        LOWORD(v200) = 2048;
        *(_QWORD *)((char *)&v200 + 2) = v4;
        _os_log_error_impl(&dword_1B8270000, v80, OS_LOG_TYPE_ERROR, "%s:%d: Invalid journal entry, size:%ld, extraSize:%ld, journalEntryOffset:%lld, journalEntrySize:%ld", v198, 0x3Au);
      }
      *__error() = v79;
      v20 = v157;
    }
    v30 = v156;
    v73 = v155;
LABEL_77:
    if (v73 && !v197)
      *(_QWORD *)(v8 + 2136) = v73;
    goto LABEL_34;
  }
LABEL_39:
  v42 = v6;
  if (v4)
  {
    do
      v43 = __ldxr(&gEnqueuedSize);
    while (__stxr(v43 - v4, &gEnqueuedSize));
  }
  v44 = (void (*)(_QWORD, _QWORD, __n128))*((_QWORD *)a1 + 5);
  v45 = v197;
  if (v44)
  {
    v44(*((_QWORD *)a1 + 6), v197, v7);
    v45 = v197;
  }
  if (!v45)
  {
    v46 = *((_QWORD *)a1 + 7);
    if (v46)
    {
      *(_QWORD *)&v201 = 0;
      v47 = *(_QWORD *)(v42 + 1048);
      v48 = *(NSObject **)(v47 + 8);
      *(_QWORD *)v198 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v198[8] = 0x40000000;
      *(_QWORD *)&v198[16] = __si_pop_queue_block_invoke;
      *(_QWORD *)&v198[24] = &__block_descriptor_tmp_39_1079;
      *(_QWORD *)&v198[32] = v47;
      v199 = v46;
      *(_QWORD *)&v200 = 1;
      *((_QWORD *)&v200 + 1) = &v201;
      dispatch_sync(v48, v198);
    }
  }
  v49 = (unsigned int *)*((_QWORD *)a1 + 1);
  if (v49)
  {
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
      _si_mobile_journal_finalize((uint64_t)v49, 1);
  }
  v52 = (const void *)*((_QWORD *)a1 + 9);
  if (v52)
    CFRelease(v52);
  free(a1);
}

unint64_t v2_readVInt64(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t result;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;

  v3 = *a2;
  v4 = *a2 + 1;
  v5 = *(char *)(a1 + *a2);
  result = *(unsigned __int8 *)(a1 + *a2);
  if (v5 < 0)
  {
    if (v5 > 0xBFu)
    {
      if (v5 > 0xDFu)
      {
        if (v5 > 0xEFu)
        {
          if (v5 > 0xF7u)
          {
            if (v5 > 0xFBu)
            {
              if (v5 > 0xFDu)
              {
                if (v5 == 255)
                {
                  result = *(_QWORD *)(a1 + v4);
                  v4 = v3 + 9;
                }
                else
                {
                  v9 = (unint64_t)*(unsigned __int8 *)(a1 + v4) << 48;
                  v10 = (unsigned __int8 *)(v3 + a1);
                  result = v9 | ((unint64_t)v10[2] << 40) | ((unint64_t)v10[3] << 32) | ((unint64_t)v10[4] << 24) | ((unint64_t)v10[5] << 16) | ((unint64_t)v10[6] << 8) | v10[7];
                  v4 = v3 + 8;
                }
              }
              else
              {
                v7 = ((result & 1) << 48) | ((unint64_t)*(unsigned __int8 *)(a1 + v4) << 40);
                v8 = (unsigned __int8 *)(v3 + a1);
                result = v7 | ((unint64_t)v8[2] << 32) | ((unint64_t)v8[3] << 24) | ((unint64_t)v8[4] << 16) | ((unint64_t)v8[5] << 8) | v8[6];
                v4 = v3 + 7;
              }
            }
            else
            {
              result = ((result & 3) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + v4) << 32) | ((unint64_t)*(unsigned __int8 *)(v3 + a1 + 2) << 24) | ((unint64_t)*(unsigned __int8 *)(v3 + a1 + 3) << 16) | ((unint64_t)*(unsigned __int8 *)(v3 + a1 + 4) << 8) | *(unsigned __int8 *)(v3 + a1 + 5);
              v4 = v3 + 6;
            }
          }
          else
          {
            result = ((result & 7) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + v4) << 24) | ((unint64_t)*(unsigned __int8 *)(v3 + a1 + 2) << 16) | ((unint64_t)*(unsigned __int8 *)(v3 + a1 + 3) << 8) | *(unsigned __int8 *)(v3 + a1 + 4);
            v4 = v3 + 5;
          }
        }
        else
        {
          result = ((result & 0xF) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + v4) << 16) | ((unint64_t)*(unsigned __int8 *)(v3 + a1 + 2) << 8) | *(unsigned __int8 *)(v3 + a1 + 3);
          v4 = v3 + 4;
        }
      }
      else
      {
        result = ((result & 0x1F) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + v4) << 8) | *(unsigned __int8 *)(v3 + a1 + 2);
        v4 = v3 + 3;
      }
    }
    else
    {
      result = *(unsigned __int8 *)(a1 + v4) | ((result & 0x3F) << 8);
      v4 = v3 + 2;
    }
  }
  *a2 = v4;
  return result;
}

CFAllocatorRef _SIStackAllocatorCreate(unint64_t *a1, uint64_t a2, unint64_t a3)
{
  CFAllocatorRef result;
  unint64_t v5;
  CFAllocatorContext context;

  *a1 = (unint64_t)a1;
  a1[1] = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF0;
  a1[2] = (unint64_t)a1 + a2;
  a1[3] = 0;
  a1[4] = a3;
  context.version = 0;
  context.info = a1;
  memset(&context.retain, 0, 24);
  context.allocate = (CFAllocatorAllocateCallBack)stack_allocate;
  context.reallocate = (CFAllocatorReallocateCallBack)stack_reallocate;
  context.deallocate = (CFAllocatorDeallocateCallBack)stack_deallocate;
  context.preferredSize = (CFAllocatorPreferredSizeCallBack)preferredSize;
  result = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE38], &context);
  v5 = (a1[1] + 15) & 0xFFFFFFFFFFFFFFF0;
  *a1 = v5;
  a1[1] = v5;
  return result;
}

uint64_t __deleteCSAttributes_block_invoke_2(uint64_t a1)
{
  unsigned int v2;
  int v3;
  unint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void (*v10)(_QWORD);
  int v11;
  NSObject *v12;
  unsigned int v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void (*v22)(_QWORD);
  _DWORD *v23;
  int v24;
  NSObject *v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD);
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  makeThreadId();
  do
  {
    v2 = __ldxr(exceptionSequenceNum);
    v3 = v2 + 1;
  }
  while (__stxr(v2 + 1, exceptionSequenceNum));
  v4 = setThreadIdAndInfo(*(_DWORD *)(a1 + 72), sFdExceptionCallbacks, 0, 1, v3);
  v43 = HIDWORD(v4);
  v44 = v4;
  v41 = v6;
  v42 = v5;
  v7 = *(_QWORD *)&threadData[18 * v4 + 2];
  v8 = v7 + 320 * HIDWORD(v4);
  *(_BYTE *)(v8 + 216) = 0;
  v9 = *(_DWORD *)(v8 + 312);
  v10 = *(void (**)(_QWORD))(v8 + 224);
  if (v10)
    v10(*(_QWORD *)(v7 + 320 * HIDWORD(v4) + 288));
  if (_setjmp((int *)v8))
  {
    v11 = *__error();
    v12 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v46 = "deleteCSAttributes_block_invoke";
      v47 = 1024;
      v48 = 28281;
      _os_log_error_impl(&dword_1B8270000, v12, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v11;
    *(_DWORD *)(v8 + 312) = v9;
    CIOnThreadCleanUpReset(v41);
    dropThreadId(v44, 1, v3);
    return CICleanUpReset(v44, v42);
  }
  else
  {
    do
    {
      v14 = __ldxr(exceptionSequenceNum);
      v15 = v14 + 1;
    }
    while (__stxr(v14 + 1, exceptionSequenceNum));
    v16 = setThreadIdAndInfo(-1, (__int128 *)sJournalCtxExceptionCallbacks, *(_QWORD *)(a1 + 32), 0x40000000, v15);
    v39 = HIDWORD(v16);
    v40 = v16;
    v37 = v18;
    v38 = v17;
    v19 = *(_QWORD *)&threadData[18 * v16 + 2];
    v20 = v19 + 320 * HIDWORD(v16);
    *(_BYTE *)(v20 + 216) = 0;
    v21 = *(_DWORD *)(v20 + 312);
    v22 = *(void (**)(_QWORD))(v20 + 224);
    if (v22)
      v22(*(_QWORD *)(v19 + 320 * HIDWORD(v16) + 288));
    if (_setjmp((int *)v20))
    {
      v23 = (_DWORD *)(v20 + 312);
      v24 = *__error();
      v25 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v46 = "deleteCSAttributes_block_invoke_2";
        v47 = 1024;
        v48 = 28280;
        _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v24;
      *v23 = v21;
      CIOnThreadCleanUpReset(v37);
      dropThreadId(v40, 1, v15);
      CICleanUpReset(v40, v38);
    }
    else
    {
      v26 = *(unint64_t **)(a1 + 40);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
      if (v27 < *(unsigned int *)(a1 + 78))
      {
        v28 = v27;
        do
        {
          _si_delete_attributes_inner(*(_QWORD *)(a1 + 56), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v28), *(unsigned __int8 *)(a1 + 82), 1u, 1u, *(_QWORD *)(a1 + 64), (_BYTE *)(a1 + 83));
          v29 = *(unint64_t **)(a1 + 40);
          do
            v30 = __ldxr(v29);
          while (__stxr(v30 + 1, v29));
          v28 = v30;
        }
        while (v30 < *(unsigned int *)(a1 + 78));
      }
      if (*(_BYTE *)(a1 + 84))
        si_indexDeleteDeferredItemsIfReady(*(_QWORD *)(a1 + 56));
      v31 = *(_QWORD *)&threadData[18 * v40 + 2];
      v32 = v31 + 320 * v39;
      *(_DWORD *)(v32 + 312) = v21;
      v33 = *(void (**)(_QWORD))(v32 + 232);
      if (v33)
        v33(*(_QWORD *)(v31 + 320 * v39 + 288));
      dropThreadId(v40, 0, v15);
    }
    v34 = *(_QWORD *)&threadData[18 * v44 + 2];
    v35 = v34 + 320 * v43;
    *(_DWORD *)(v35 + 312) = v9;
    v36 = *(void (**)(_QWORD))(v35 + 232);
    if (v36)
      v36(*(_QWORD *)(v34 + 320 * v43 + 288));
    return dropThreadId(v44, 0, v3);
  }
}

void si_indexDeleteDeferredItemsIfReady(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 288);
  if (v2 && (unint64_t)RLEOIDArrayGetOidCount(v2, 0x10000) >= 0xFFFF)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 280));
    v3 = *(_QWORD *)(a1 + 288);
    if (v3)
    {
      RLEOIDArrayGetOidCount(v3, 1);
      si_indexDeleteByOid(a1, *(_QWORD *)(a1 + 288));
      __dmb(0xBu);
      v4 = *(_QWORD *)(a1 + 288);
      *(_QWORD *)(a1 + 288) = 0;
      *(_QWORD *)(a1 + 296) = v4;
      RLEOIDArrayClear(v4);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 280));
  }
}

uint64_t RLEOIDArrayGetOidCount(uint64_t a1, uint64_t a2)
{
  pthread_rwlock_t *v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  v3 = (pthread_rwlock_t *)(a1 + 16);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 16));
  SIValueSet<unsigned long long>::_SIValueSetInnerIterate(a1 + 256, *(_QWORD *)(a1 + 216), *(_DWORD *)(a1 + 224), (uint64_t)countOids, (uint64_t)&v5, 1024);
  pthread_rwlock_unlock(v3);
  return v6;
}

uint64_t SIValueSet<unsigned long long>::_SIValueSetInnerIterate(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;

  v11 = 0;
  v12 = (a3 + 1);
  v13 = (64 - 4 * (a3 + 1)) & 0xFC;
  do
  {
    result = *(_QWORD *)(a1 + 8 * v11);
    if (result)
    {
      if ((result & 1) != 0)
        result = SIValueSet<unsigned long long>::_SIValueSetInnerIterate(result & 0xFFFFFFFFFFFFFFFELL, (v11 << v13) | a2, v12, a4, a5, a6);
      else
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, a6, (v11 << v13) | a2, a4, a5);
    }
    ++v11;
  }
  while (v11 != 16);
  return result;
}

uint64_t *si_mobile_journal_get_base(uint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  int v6;
  NSObject *v7;
  os_log_type_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  int v20;
  char *v21;
  _OWORD v22[16];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v5 = result;
    memset(v22, 0, 255);
    v6 = *__error();
    v7 = _SILogForLogForCategory(4);
    v8 = 2 * (dword_1EF19FC9C < 4);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = fd_name(v5[1], (char *)v22, 0xFFuLL);
      v20 = 136315138;
      v21 = v9;
      _os_log_impl(&dword_1B8270000, v7, v8, "Get_base for journal %s", (uint8_t *)&v20, 0xCu);
    }
    *__error() = v6;
    fd_assert_not_unlinked(v5[1]);
    v10 = (char *)v5[2];
    if (v10 != (char *)-1)
    {
      v11 = v5[4];
      v12 = a2 - v11;
      if (a2 >= v11 && a3 + a2 <= (unint64_t)(v5[3] + v11))
        return (uint64_t *)&v10[v12];
    }
    v13 = *MEMORY[0x1E0C85AD8];
    v14 = *MEMORY[0x1E0C85AD8] + a3;
    if (v14 <= 0x100000)
      v14 = 0x100000;
    v15 = v13 + v14;
    v16 = -v13;
    v17 = v16 & a2;
    v18 = (v15 - 1) & v16;
    v19 = v5[3];
    if (v19)
    {
      if (v10 != (char *)-1)
        munmap(v10, v19);
      v5[2] = -1;
      v5[3] = v18;
      v5[4] = 0;
      v10 = (char *)fd_mmap(v5[1]);
    }
    else
    {
      v10 = (char *)fd_guarded_mmap(v5[1]);
    }
    v5[2] = (uint64_t)v10;
    if (v10 != (char *)-1)
    {
      v5[3] = v18;
      v5[4] = v17;
      v12 = a2 - v17;
      return (uint64_t *)&v10[v12];
    }
    return 0;
  }
  return result;
}

void fd_assert_not_unlinked(uint64_t a1)
{
  __int16 v2;
  char *v3;
  char *v4;
  const char *v5;
  uint64_t v6;

  os_unfair_lock_lock((os_unfair_lock_t)&map_guard_lock);
  if (a1)
  {
    v2 = *(_WORD *)(a1 + 60);
    os_unfair_lock_unlock((os_unfair_lock_t)&map_guard_lock);
    if ((v2 & 0x200) != 0)
    {
      v3 = __si_assert_copy_extra_521(*(_DWORD *)(a1 + 44));
      v4 = v3;
      v5 = "";
      if (v3)
        v5 = v3;
      __message_assert("%s:%u: failed assertion '%s' %s Unexpected delete of %s from %d", "fd_obj.c", 1743, "!unlinked", v5, *(const char **)(a1 + 72), *(_DWORD *)(a1 + 64));
      free(v4);
      if (__valid_fs(*(_DWORD *)(a1 + 44)))
        v6 = 2989;
      else
        v6 = 3072;
      *(_DWORD *)v6 = -559038737;
      abort();
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&map_guard_lock);
  }
}

void bumpWorkTime(uint64_t a1, double a2)
{
  double v3;
  double v4;
  void (*v5)(_QWORD);
  double v6;
  BOOL v7;
  double v8;
  BOOL v9;

  if (a1)
  {
    v3 = *(double *)(a1 + 2152);
    v4 = v3 + CFAbsoluteTimeGetCurrent() - a2;
    *(double *)(a1 + 2152) = v4;
    v5 = *(void (**)(_QWORD))(a1 + 2160);
    if (v5)
    {
      v6 = *(double *)(a1 + 2176);
      v7 = v3 >= v6 || v4 < v6;
      if (!v7 || ((v8 = *(double *)(a1 + 2184), v3 < v8) ? (v9 = v4 < v8) : (v9 = 1), !v9))
        v5(*(_QWORD *)(a1 + 2168));
    }
  }
}

uint64_t SIGetAccumulatedSizeForGroup(uint64_t a1, const void *a2, unsigned int a3)
{
  const __CFNumber *Value;
  unsigned int v6;
  unsigned int valuePtr;

  if (a2)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 2088), a2);
    valuePtr = 0;
    if (Value)
    {
      if (CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr))
        a3 = valuePtr;
    }
  }
  if (a3 && (*(_BYTE *)(a1 + 2072) ? (v6 = 256) : (v6 = 22), a3 < v6))
    return *(_QWORD *)(a1 + 8 * a3 + 7040);
  else
    return 0;
}

BOOL processOne(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, unsigned int a6, const __CFAllocator *a7, unsigned __int8 a8, _BYTE *a9, _BYTE *a10)
{
  NSObject *v17;
  _BOOL8 v18;
  _QWORD v21[3];
  __int128 v22;
  uint64_t v23;

  memset(v21, 0, sizeof(v21));
  v17 = dispatch_group_create();
  v22 = *a5;
  v23 = *((_QWORD *)a5 + 2);
  v18 = processOneCS(a1, a2, a3, a4, a6, (uint64_t)&v22, (uint64_t)v21, 0, 0, a7, a8, v17, a9, a10);
  dispatch_group_wait(v17, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(v17);
  return v18;
}

void logIndexingEventInCoreAnalyticsWithBundleId(const __CFString *a1, int64_t a2, int64_t a3, int64_t a4)
{
  xpc_object_t v4;

  v4 = dictionaryFromIndexingEvent(a1, a2, a3, a4);
  analytics_send_event();
  xpc_release(v4);
}

xpc_object_t dictionaryFromIndexingEvent(const __CFString *a1, int64_t a2, int64_t a3, int64_t a4)
{
  xpc_object_t empty;
  char buffer[1024];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  bzero(buffer, 0x400uLL);
  empty = xpc_dictionary_create_empty();
  if (a1 && CFStringGetCString(a1, buffer, 1024, 0x8000100u))
    xpc_dictionary_set_string(empty, "bundleid", buffer);
  xpc_dictionary_set_int64(empty, "itemcount", a2);
  xpc_dictionary_set_int64(empty, "indexingtime", a4);
  xpc_dictionary_set_int64(empty, "aggregatedatasize", a3);
  return empty;
}

void si_indexingWatchdogPerform(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  int v8;
  uint64_t v10;
  NSObject *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  CFAbsoluteTime Current;
  CFAbsoluteTime v16;
  int v17;
  NSObject *v18;
  os_log_type_t v19;
  dispatch_time_t v20;
  double v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void (*v30)(_QWORD);
  _DWORD *v31;
  int v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD);
  uint64_t v37;
  double v38;
  int v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  double v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 *)(a1 + 2072);
  if (*(_BYTE *)(a1 + 2072))
  {
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *(NSObject **)v10;
    if (a4 <= 1)
      v12 = 1;
    else
      v12 = a4;
    v13 = 2 * a3 * v12;
    if (v13 >= 0x1A4)
      v13 = 420;
    v14 = v13 + 60;
    Current = CFAbsoluteTimeGetCurrent();
    *(CFAbsoluteTime *)(v10 + 48) = Current;
    v16 = Current;
    *(_QWORD *)(v10 + 40) = v14;
    *(_QWORD *)(v10 + 56) = 0;
    *(_DWORD *)(v10 + 72) = a3;
    *(_DWORD *)(v10 + 76) = a4;
    *(_QWORD *)(v10 + 88) = pthread_self();
    *(_BYTE *)(v10 + 16) = 0;
    *(_DWORD *)(v10 + 80) = 0;
    *(_DWORD *)(v10 + 84) = *(_DWORD *)(a1 + 60) >> 1;
    v17 = *__error();
    v18 = _SILogForLogForCategory(0);
    v19 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v18, v19))
    {
      *(_DWORD *)buf = 134219010;
      v49 = (const char *)v11;
      v50 = 2048;
      v51 = v14;
      v52 = 2048;
      v53 = v16;
      v54 = 2048;
      v55 = a3;
      v56 = 2112;
      v57 = a2;
      _os_log_impl(&dword_1B8270000, v18, v19, "Starting the indexing watchdog, timer:%p, delta:%llus, startTime:%.3f, itemCount:%lu, bundleID:%@", buf, 0x34u);
    }
    *__error() = v17;
    v20 = dispatch_time(0, 1000000000 * v14);
    dispatch_source_set_timer(v11, v20, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume(v11);
    v21 = v16;
  }
  else
  {
    v21 = 0.0;
    v11 = 0;
    v14 = 0;
  }
  v42 = v14;
  do
  {
    v22 = __ldxr(exceptionSequenceNum);
    v23 = v22 + 1;
  }
  while (__stxr(v22 + 1, exceptionSequenceNum));
  v24 = setThreadIdAndInfo(*(_DWORD *)(a1 + 32), sFdExceptionCallbacks, 0, 1, v23);
  v46 = HIDWORD(v24);
  v47 = v24;
  v44 = v26;
  v45 = v25;
  v27 = *(_QWORD *)&threadData[18 * v24 + 2];
  v28 = v27 + 320 * HIDWORD(v24);
  *(_BYTE *)(v28 + 216) = 0;
  v29 = *(_DWORD *)(v28 + 312);
  v30 = *(void (**)(_QWORD))(v28 + 224);
  if (v30)
    v30(*(_QWORD *)(v27 + 320 * HIDWORD(v24) + 288));
  if (_setjmp((int *)v28))
  {
    v31 = (_DWORD *)(v28 + 312);
    v32 = *__error();
    v33 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v49 = "si_indexingWatchdogPerform";
      v50 = 1024;
      LODWORD(v51) = 254;
      _os_log_error_impl(&dword_1B8270000, v33, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v32;
    *v31 = v29;
    CIOnThreadCleanUpReset(v44);
    dropThreadId(v47, 1, v23);
    CICleanUpReset(v47, v45);
  }
  else
  {
    (*(void (**)(uint64_t))(a5 + 16))(a5);
    v34 = *(_QWORD *)&threadData[18 * v47 + 2];
    v35 = v34 + 320 * v46;
    *(_DWORD *)(v35 + 312) = v29;
    v36 = *(void (**)(_QWORD))(v35 + 232);
    if (v36)
      v36(*(_QWORD *)(v34 + 320 * v46 + 288));
    dropThreadId(v47, 0, v23);
  }
  if (v8)
  {
    dispatch_suspend(v11);
    v37 = *(_QWORD *)(a1 + 64);
    *(_BYTE *)(v37 + 16) = 1;
    v38 = CFAbsoluteTimeGetCurrent();
    v39 = *__error();
    v40 = _SILogForLogForCategory(0);
    v41 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v40, v41))
    {
      *(_DWORD *)buf = 134219010;
      v49 = (const char *)v11;
      v50 = 2048;
      v51 = v42;
      v52 = 2048;
      v53 = v38 - v21;
      v54 = 2048;
      v55 = a3;
      v56 = 2112;
      v57 = a2;
      _os_log_impl(&dword_1B8270000, v40, v41, "Stopping the indexing watchdog, timer:%p, delta:%llus, time:%.3f, itemCount:%lu, bundleId:%@", buf, 0x34u);
    }
    *__error() = v39;
    dispatch_source_set_timer(v11, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    *(_DWORD *)(v37 + 80) = 0;
    *(_QWORD *)(v37 + 48) = 0;
    *(_QWORD *)(v37 + 56) = 0;
    *(_QWORD *)(v37 + 40) = 0;
  }
}

void logDeleteEventInCoreAnalyticsWithBundleId(const __CFString *a1, int64_t a2, int64_t a3, int64_t a4)
{
  xpc_object_t v4;

  v4 = dictionaryFromIndexingEvent(a1, a2, a3, a4);
  analytics_send_event();
  xpc_release(v4);
}

void __si_pop_queue_block_invoke(uint64_t a1)
{
  const __CFDictionary *v2;
  __CFBag *Value;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  NSObject *v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *(const __CFDictionary **)(*(_QWORD *)(a1 + 32) + 72);
  if (v2)
    Value = (__CFBag *)CFDictionaryGetValue(v2, *(const void **)(a1 + 40));
  else
    Value = 0;
  if (dword_1EF19FC9C >= 5)
  {
    v7 = *__error();
    v8 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 40);
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
      v18 = 134218240;
      v19 = v9;
      v20 = 2048;
      v21 = v10;
      _os_log_impl(&dword_1B8270000, v8, OS_LOG_TYPE_DEFAULT, "Pop %p from tags %p", (uint8_t *)&v18, 0x16u);
    }
    *__error() = v7;
    if (Value)
      goto LABEL_6;
  }
  else if (Value)
  {
LABEL_6:
    if (*(_QWORD *)(a1 + 48))
    {
      v4 = 0;
      do
        CFBagRemoveValue(Value, *(const void **)(*(_QWORD *)(a1 + 56) + 8 * v4++));
      while (v4 < *(_QWORD *)(a1 + 48));
    }
    if (!MEMORY[0x1BCCAF3E4](Value))
    {
      v5 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v5 + 33))
        v6 = dword_1EF19FC9C < 5;
      else
        v6 = 1;
      if (!v6)
      {
        v14 = *__error();
        v15 = _SILogForLogForCategory(4);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          v17 = *(_QWORD *)(a1 + 40);
          v18 = 134217984;
          v19 = v17;
          _os_log_impl(&dword_1B8270000, v15, OS_LOG_TYPE_DEFAULT, "Emptied tag bag for %p", (uint8_t *)&v18, 0xCu);
        }
        *__error() = v14;
        v5 = *(_QWORD *)(a1 + 32);
      }
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v5 + 72), *(const void **)(a1 + 40));
    }
    return;
  }
  if (gSILogLevels[0] >= 5)
  {
    v11 = *__error();
    v12 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_QWORD *)(a1 + 40);
      v18 = 134217984;
      v19 = v13;
      _os_log_impl(&dword_1B8270000, v12, OS_LOG_TYPE_DEFAULT, "Unknown tag %p", (uint8_t *)&v18, 0xCu);
    }
    *__error() = v11;
  }
}

uint64_t _insert_obj(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t inserted;
  int v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  const char *v14;
  _QWORD *v15;
  _QWORD v17[8];
  int v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  int v23;
  _QWORD v24[3];
  int v25;
  _QWORD v26[3];
  int v27;
  _BYTE buf[24];
  __int128 v29;
  char *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  serializeDBO(a1);
  if ((MEMORY[0] - 16360) <= 0xFFFFC013)
  {
    v8 = test_compress_obj(a1, 0x4000, 0);
    if ((_DWORD)v8)
    {
      inserted = v8;
      if ((_DWORD)v8 != 7)
      {
        v10 = *__error();
        v11 = _SILogForLogForCategory(7);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "_insert_obj";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5256;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = inserted;
          LOWORD(v29) = 2048;
          *(_QWORD *)((char *)&v29 + 2) = v7;
          _os_log_error_impl(&dword_1B8270000, v11, OS_LOG_TYPE_ERROR, "%s:%d: Error %d, oid %llx", buf, 0x22u);
        }
        *__error() = v10;
      }
      free(0);
      return inserted;
    }
  }
  inserted = db_updateset_insert_object(*(float **)(a1 + 992), 0, a3, a4);
  free(0);
  if ((_DWORD)inserted)
  {
    if ((_DWORD)inserted == 17)
      return inserted;
    v12 = *__error();
    v13 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "_insert_obj";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5272;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = inserted;
      v14 = "%s:%d: Error %d from db_updateset_insert_object";
LABEL_16:
      _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, v14, buf, 0x18u);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  v15 = *(_QWORD **)(a1 + 992);
  if ((unint64_t)(v15[7] + 16 * v15[6]) < 0x80000)
    return 0;
  v26[0] = 0;
  v26[1] = v26;
  v27 = 0;
  v26[2] = 0x2000000000;
  v24[0] = 0;
  v24[1] = v24;
  v25 = 0;
  v24[2] = 0x2000000000;
  v20 = 0;
  v21 = (char *)&v19 + 4;
  v23 = 0;
  v22 = 0x2000000000;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = __flush_updateset_locked_block_invoke;
  *(_QWORD *)&v29 = &unk_1E6E37628;
  v33 = 2;
  v34 = a4 & 0x4000;
  *((_QWORD *)&v29 + 1) = v26;
  v30 = (char *)&v19 + 4;
  v31 = v24;
  v32 = a1;
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 0x40000000;
  v17[2] = __flush_updateset_locked_block_invoke_118;
  v17[3] = &unk_1E6E37650;
  v17[4] = v26;
  v17[5] = (char *)&v19 + 4;
  v17[6] = v24;
  v17[7] = a1;
  v18 = 2;
  v19 = a4 & 0x4000;
  inserted = db_updateset_iterate(v15, (uint64_t)buf, (uint64_t)v17);
  _Block_object_dispose((char *)&v19 + 4, 8);
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(v26, 8);
  if ((_DWORD)inserted)
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "_insert_obj";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 5277;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = inserted;
      v14 = "%s:%d: Error %d from flush_updateset_locked";
      goto LABEL_16;
    }
LABEL_17:
    *__error() = v12;
  }
  return inserted;
}

void serializeDBO(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int16 *v10;
  int v11;
  _BYTE *v12;
  unsigned int v13;
  __int16 v14;
  int v15;
  int v16;
  char v18;
  uint64_t v19;
  size_t v20;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned __int16 *v35;
  _BYTE *v36;
  int v37;
  char v38;
  unsigned __int16 v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int UniquedDBFValue;
  _BYTE *v67;
  unsigned int v68;
  _BYTE *v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  unsigned __int16 v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  unsigned int v88;
  _BYTE *v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  const char *v95;
  char *v96;
  const char *v97;
  char *v98;
  char *v99;
  const char *v100;
  int v101;
  uint64_t string_and_length_for_id;
  const char *v103;
  _DWORD *v104;
  _QWORD *v105;
  _BYTE __base[4];
  _BYTE v107[16396];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  *(_QWORD *)&v107[16380] = *MEMORY[0x1E0C80C00];
  bzero(__base, 0x4000uLL);
  v7 = *(unsigned int *)(v5 + 12);
  if (v7 < 0x31)
  {
    v20 = 0;
  }
  else
  {
    v8 = 0;
    v9 = v5 + v7;
    v10 = (__int16 *)(v5 + 48);
    v11 = *(_DWORD *)v6;
    v12 = v107;
    do
    {
      if (v11 != 1685287992)
      {
        v93 = __si_assert_copy_extra_268();
        v94 = v93;
        v95 = "";
        if (v93)
          v95 = v93;
        __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 464, v95);
LABEL_157:
        free(v94);
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      v13 = (unsigned __int16)v10[1];
      v14 = *v10;
      if ((v13 & 0x400) != 0)
        v14 = 0;
      v15 = (v13 >> 1) & 4 | (v13 >> 7) & 1 | (v13 >> 4) & 2 | (v13 >> 5) & 8 | (v13 >> 3) & 0x40;
      if ((*(_BYTE *)(v6 + 804) & 4) != 0)
      {
        v16 = (v13 >> 8) & 0x20 | (v13 >> 7) & 0x180 | v15;
      }
      else
      {
        v16 = (v13 >> 5) & 0x780 | (v13 >> 6) & 0x20 | v15;
        if (v14 == 14 && (v13 & 0x4000) != 0)
          LOBYTE(v16) = v16 | 0x80;
      }
      if ((v13 & 0x10) != 0)
        v18 = 15;
      else
        v18 = v14;
      if (v14 != 11)
        v18 = v14;
      *v12 = v16;
      v12[1] = v18;
      v19 = *((unsigned int *)v10 + 2);
      *((_DWORD *)v12 - 1) = *((_DWORD *)v10 + 1);
      *(_QWORD *)(v12 + 4) = v10;
      v10 = (__int16 *)((char *)v10 + v19 + 13);
      v20 = v8 + 1;
      if ((unint64_t)v10 >= v9)
        break;
      v12 += 16;
    }
    while (v8++ < 0x3FF);
  }
  qsort_b(__base, v20, 0x10uLL, &__block_literal_global_10_9807);
  v22 = malloc_type_zone_malloc((malloc_zone_t *)indexingZone, (4 * *(_DWORD *)(v5 + 12)), 0x2145C67DuLL);
  v23 = (uint64_t)(v22 + 1);
  v24 = v2_writeVInt64((uint64_t)(v22 + 1), 0, *(_QWORD *)v5);
  v25 = *(_DWORD *)(v5 + 40);
  v104 = v22;
  v105 = v3;
  if ((v25 & 0x80) != 0)
  {
    v26 = v24 + 2;
    *(_BYTE *)(v24 + v23 + 1) = v25;
    LOBYTE(v25) = 0x80;
  }
  else
  {
    v26 = v24 + 1;
  }
  *(_BYTE *)(v23 + v24) = v25;
  v27 = v2_writeVInt64(v23, v26, *(_QWORD *)(v5 + 32));
  v28 = v2_writeVInt64(v23, v27, *(_QWORD *)(v5 + 24));
  v29 = v2_writeVInt64(v23, v28, *(_QWORD *)(v5 + 16));
  v30 = v29;
  if ((*(_BYTE *)(v5 + 40) & 0x80) != 0)
  {
    v88 = *(_DWORD *)(v5 + 44);
    if (v88 > 0x7F)
    {
      if (v88 >> 14)
      {
        if (v88 >> 21)
        {
          if (v88 >> 28)
          {
            v92 = v23 + v29;
            *(_BYTE *)v92 = -16;
            *(_DWORD *)(v92 + 1) = v88;
            v30 = v29 + 5;
            if (v20)
              goto LABEL_28;
          }
          else
          {
            v91 = (_BYTE *)(v23 + v29);
            *v91 = HIBYTE(v88) | 0xE0;
            v91[1] = BYTE2(v88);
            v91[2] = BYTE1(v88);
            v30 = v29 + 4;
            v91[3] = v88;
            if (v20)
              goto LABEL_28;
          }
        }
        else
        {
          v90 = (_BYTE *)(v23 + v29);
          *v90 = BYTE2(v88) | 0xC0;
          v90[1] = BYTE1(v88);
          v30 = v29 + 3;
          v90[2] = v88;
          if (v20)
            goto LABEL_28;
        }
      }
      else
      {
        v89 = (_BYTE *)(v23 + v29);
        *v89 = BYTE1(v88) | 0x80;
        v30 = v29 + 2;
        v89[1] = v88;
        if (v20)
          goto LABEL_28;
      }
    }
    else
    {
      *(_BYTE *)(v23 + v29) = v88;
      v30 = v29 + 1;
      if (v20)
        goto LABEL_28;
    }
  }
  else if (v20)
  {
LABEL_28:
    v31 = 0;
    v32 = 0;
    do
    {
      v33 = &__base[16 * v31];
      v34 = *(_DWORD *)v33 - v32;
      if (*(_DWORD *)v33 == v32)
      {
        si_analytics_log_2520("last_id(%u) == dbfs[%zu].name_id(%u)");
      }
      else
      {
        if (*(_DWORD *)v33 >= v32)
        {
          v35 = (unsigned __int16 *)*((_QWORD *)v33 + 1);
          v36 = &__base[16 * v31];
          v37 = v36[5];
          v38 = v36[4];
          if (*(_DWORD *)v6 != 1685287992)
          {
            v96 = __si_assert_copy_extra_268();
            v94 = v96;
            v97 = "";
            if (v96)
              v97 = v96;
            __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 470, v97);
            goto LABEL_157;
          }
          if (v34 > 0x7F)
          {
            if (v34 >> 14)
            {
              if (v34 >> 21)
              {
                if (v34 >> 28)
                {
                  v43 = v23 + v30;
                  *(_BYTE *)v43 = -16;
                  *(_DWORD *)(v43 + 1) = v34;
                  v30 += 5;
                  v39 = v35[1];
                  if ((v39 & 0x10) != 0)
                    goto LABEL_62;
                  goto LABEL_48;
                }
                v42 = (_BYTE *)(v23 + v30);
                *v42 = HIBYTE(v34) | 0xE0;
                v42[1] = BYTE2(v34);
                v42[2] = BYTE1(v34);
                v30 += 4;
                v42[3] = v34;
                v39 = v35[1];
                if ((v39 & 0x10) == 0)
                  goto LABEL_48;
              }
              else
              {
                v41 = (_BYTE *)(v23 + v30);
                *v41 = BYTE2(v34) | 0xC0;
                v41[1] = BYTE1(v34);
                v30 += 3;
                v41[2] = v34;
                v39 = v35[1];
                if ((v39 & 0x10) == 0)
                  goto LABEL_48;
              }
            }
            else
            {
              v40 = (_BYTE *)(v23 + v30);
              *v40 = BYTE1(v34) | 0x80;
              v30 += 2;
              v40[1] = v34;
              v39 = v35[1];
              if ((v39 & 0x10) == 0)
                goto LABEL_48;
            }
          }
          else
          {
            *(_BYTE *)(v23 + v30++) = v34;
            v39 = v35[1];
            if ((v39 & 0x10) != 0)
              goto LABEL_62;
LABEL_48:
            if ((v39 & 0x20) != 0 || (v44 = *v35, v44 == 14) || v44 == 11)
            {
              v45 = *((_DWORD *)v35 + 2);
              if (v45 <= 0x7F)
              {
                *(_BYTE *)(v23 + v30++) = v45;
                if ((v38 & 2) == 0)
                  goto LABEL_93;
LABEL_63:
                if (v37 == 14 || (v38 & 1) != 0)
                  goto LABEL_93;
                switch(v37)
                {
                  case 3:
                  case 4:
                    if (*((_DWORD *)v35 + 2) >= 2u)
                    {
                      v49 = 0;
                      do
                      {
                        v52 = *(unsigned __int16 *)((char *)&v35[v49 + 6] + 1);
                        if (v52 < 0x80)
                        {
                          v50 = 1;
                          v51 = v30;
                        }
                        else
                        {
                          if ((v52 & 0xFFFFC07F) != 0)
                          {
                            v53 = v30 + 1;
                            *(_BYTE *)(v23 + v30) = -64;
                            v54 = v52 >> 8;
                            v55 = 2;
                            v50 = 3;
                          }
                          else
                          {
                            v54 = (v52 >> 8) | 0x80;
                            v55 = 1;
                            v53 = v30;
                            v50 = 2;
                          }
                          v51 = v55 + v30;
                          *(_BYTE *)(v23 + v53) = v54;
                        }
                        v30 += v50;
                        *(_BYTE *)(v23 + v51) = v52;
                        ++v49;
                      }
                      while (v49 < (unint64_t)*((unsigned int *)v35 + 2) >> 1);
                    }
                    break;
                  case 5:
                  case 6:
                    if (*((_DWORD *)v35 + 2) >= 4u)
                    {
                      v56 = 0;
                      do
                      {
                        v58 = *(_DWORD *)((char *)&v35[2 * v56 + 6] + 1);
                        if (v58 >> 28)
                        {
                          v57 = v23 + v30;
                          *(_BYTE *)v57 = -16;
                          *(_DWORD *)(v57 + 1) = v58;
                          v30 += 5;
                        }
                        else if ((v58 & 0xFE00000) != 0)
                        {
                          v59 = (_BYTE *)(v23 + v30);
                          *v59 = HIBYTE(v58) | 0xE0;
                          v59[1] = BYTE2(v58);
                          v59[2] = BYTE1(v58);
                          v30 += 4;
                          v59[3] = v58;
                        }
                        else if ((v58 & 0x1FC000) != 0)
                        {
                          v60 = (_BYTE *)(v23 + v30);
                          *v60 = BYTE2(v58) | 0xC0;
                          v60[1] = BYTE1(v58);
                          v30 += 3;
                          v60[2] = v58;
                        }
                        else if ((v58 & 0x3F80) != 0)
                        {
                          v61 = (_BYTE *)(v23 + v30);
                          *v61 = BYTE1(v58) | 0x80;
                          v30 += 2;
                          v61[1] = v58;
                        }
                        else
                        {
                          *(_BYTE *)(v23 + v30++) = v58;
                        }
                        ++v56;
                      }
                      while (v56 < (unint64_t)*((unsigned int *)v35 + 2) >> 2);
                    }
                    break;
                  case 7:
                  case 8:
                    if (*((_DWORD *)v35 + 2) >= 8u)
                    {
                      v62 = 0;
                      do
                        v30 = ldb_writeVInt64(v23, v30, *(_QWORD *)((char *)&v35[4 * v62++ + 6] + 1));
                      while (v62 < (unint64_t)*((unsigned int *)v35 + 2) >> 3);
                    }
                    break;
                  case 15:
                    v63 = v6;
                    v64 = 3;
                    goto LABEL_101;
                  default:
                    goto LABEL_104;
                }
LABEL_129:
                v32 = *(_DWORD *)v33;
                goto LABEL_30;
              }
              if (!(v45 >> 14))
              {
                v46 = (_BYTE *)(v23 + v30);
                *v46 = BYTE1(v45) | 0x80;
                v30 += 2;
                v46[1] = v45;
                if ((v38 & 2) == 0)
                  goto LABEL_93;
                goto LABEL_63;
              }
              if (!(v45 >> 21))
              {
                v47 = (_BYTE *)(v23 + v30);
                *v47 = BYTE2(v45) | 0xC0;
                v47[1] = BYTE1(v45);
                v30 += 3;
                v47[2] = v45;
                if ((v38 & 2) == 0)
                  goto LABEL_93;
                goto LABEL_63;
              }
              if (!(v45 >> 28))
              {
                v48 = (_BYTE *)(v23 + v30);
                *v48 = HIBYTE(v45) | 0xE0;
                v48[1] = BYTE2(v45);
                v48[2] = BYTE1(v45);
                v30 += 4;
                v48[3] = v45;
                goto LABEL_62;
              }
              v65 = v23 + v30;
              *(_BYTE *)v65 = -16;
              *(_DWORD *)(v65 + 1) = v45;
              v30 += 5;
              if ((v38 & 2) != 0)
                goto LABEL_63;
LABEL_93:
              if ((v38 & 1) != 0)
              {
                if (v37 == 15)
                {
                  if ((v38 & 8) != 0)
                    v64 = 2;
                  else
                    v64 = 4;
                  v63 = v6;
LABEL_101:
                  UniquedDBFValue = getUniquedDBFValue(v63, v64, v35, 3);
                  if (UniquedDBFValue > 0x7F)
                  {
                    if (UniquedDBFValue >> 14)
                    {
                      if (UniquedDBFValue >> 21)
                      {
                        if (UniquedDBFValue >> 28)
                        {
                          v86 = v23 + v30;
                          *(_BYTE *)v86 = -16;
                          *(_DWORD *)(v86 + 1) = UniquedDBFValue;
                          v30 += 5;
                        }
                        else
                        {
                          v79 = (_BYTE *)(v23 + v30);
                          *v79 = HIBYTE(UniquedDBFValue) | 0xE0;
                          v79[1] = BYTE2(UniquedDBFValue);
                          v79[2] = BYTE1(UniquedDBFValue);
                          v30 += 4;
                          v79[3] = UniquedDBFValue;
                        }
                      }
                      else
                      {
                        v73 = (_BYTE *)(v23 + v30);
                        *v73 = BYTE2(UniquedDBFValue) | 0xC0;
                        v73[1] = BYTE1(UniquedDBFValue);
                        v30 += 3;
                        v73[2] = UniquedDBFValue;
                      }
                    }
                    else
                    {
                      v67 = (_BYTE *)(v23 + v30);
                      *v67 = BYTE1(UniquedDBFValue) | 0x80;
                      v30 += 2;
                      v67[1] = UniquedDBFValue;
                    }
                  }
                  else
                  {
                    *(_BYTE *)(v23 + v30++) = UniquedDBFValue;
                  }
                }
                else
                {
                  if ((v35[1] & 0x10) != 0)
                  {
                    v98 = __si_assert_copy_extra_1644(0);
                    v99 = v98;
                    if (v98)
                      v100 = v98;
                    else
                      v100 = "";
                    v101 = *((_DWORD *)v35 + 1);
                    string_and_length_for_id = get_string_and_length_for_id(v6, 0, v101, 0);
                    if (string_and_length_for_id)
                      v103 = (const char *)string_and_length_for_id;
                    else
                      v103 = "";
                    __message_assert("%s:%u: failed assertion '%s' %s field:%d(%s), type:%d, flags:0x%x", "ldb.c", 756, "0", v100, v101, v103, *v35, v35[1]);
                    free(v99);
                    if (__valid_fs(-1))
                    {
                      MEMORY[0xBAD] = -559038737;
                      abort();
                    }
                    MEMORY[0xC00] = -559038737;
                    abort();
                  }
LABEL_104:
                  memcpy((void *)(v23 + v30), (char *)v35 + 13, *((unsigned int *)v35 + 2));
                  v30 += *((unsigned int *)v35 + 2);
                }
              }
              else
              {
                switch(v37)
                {
                  case 0:
                  case 1:
                  case 2:
                    *(_BYTE *)(v23 + v30++) = *((_BYTE *)v35 + 13);
                    goto LABEL_129;
                  case 3:
                  case 4:
                    v70 = *(unsigned __int16 *)((char *)v35 + 13);
                    if (v70 >= 0x80)
                    {
                      if ((v70 & 0xFFFFC07F) != 0)
                      {
                        v76 = v30 + 1;
                        *(_BYTE *)(v23 + v30) = -64;
                        v77 = v70 >> 8;
                        v78 = 2;
                        v71 = 3;
                      }
                      else
                      {
                        v77 = (v70 >> 8) | 0x80;
                        v78 = 1;
                        v76 = v30;
                        v71 = 2;
                      }
                      v72 = v78 + v30;
                      *(_BYTE *)(v23 + v76) = v77;
                    }
                    else
                    {
                      v71 = 1;
                      v72 = v30;
                    }
                    v30 += v71;
                    *(_BYTE *)(v23 + v72) = v70;
                    goto LABEL_129;
                  case 5:
                  case 6:
                  case 15:
                    v68 = *(_DWORD *)((char *)v35 + 13);
                    if (v68 >> 28)
                    {
                      v74 = v23 + v30;
                      *(_BYTE *)v74 = -16;
                      *(_DWORD *)(v74 + 1) = v68;
                      v30 += 5;
                    }
                    else if ((v68 & 0xFE00000) != 0)
                    {
                      v69 = (_BYTE *)(v23 + v30);
                      *v69 = HIBYTE(v68) | 0xE0;
                      v69[1] = BYTE2(v68);
                      v69[2] = BYTE1(v68);
                      v30 += 4;
                      v69[3] = v68;
                    }
                    else if ((v68 & 0x1FC000) != 0)
                    {
                      v80 = (_BYTE *)(v23 + v30);
                      *v80 = BYTE2(v68) | 0xC0;
                      v80[1] = BYTE1(v68);
                      v30 += 3;
                      v80[2] = v68;
                    }
                    else if ((v68 & 0x3F80) != 0)
                    {
                      v87 = (_BYTE *)(v23 + v30);
                      *v87 = BYTE1(v68) | 0x80;
                      v30 += 2;
                      v87[1] = v68;
                    }
                    else
                    {
                      *(_BYTE *)(v23 + v30++) = v68;
                    }
                    goto LABEL_129;
                  case 7:
                  case 8:
                    goto LABEL_128;
                  case 14:
                    v75 = v35[1];
                    if ((v75 & 0x10) == 0)
                      goto LABEL_104;
                    if ((v75 & 8) != 0)
                    {
LABEL_128:
                      v30 = ldb_writeVInt64(v23, v30, *(_QWORD *)((char *)v35 + 13));
                    }
                    else
                    {
                      v81 = *((unsigned int *)v35 + 2);
                      v82 = v30 + 1;
                      if (v81 >= 8)
                      {
                        v83 = v81 >> 3;
                        v84 = (unint64_t *)((char *)v35 + 13);
                        do
                        {
                          v85 = *v84++;
                          v82 = ldb_writeVInt64(v23, v82, v85);
                          --v83;
                        }
                        while (v83);
                      }
                      *(_BYTE *)(v23 + v30) = v82 - v30;
                      v30 = v82;
                    }
                    break;
                  default:
                    goto LABEL_104;
                }
              }
              goto LABEL_129;
            }
          }
LABEL_62:
          if ((v38 & 2) != 0)
            goto LABEL_63;
          goto LABEL_93;
        }
        si_analytics_log_2520("last_id(%u) > dbfs[%zu].name_id(%u)");
      }
LABEL_30:
      ++v31;
    }
    while (v31 != v20);
  }
  *v104 = v30;
  *v105 = v104;
}

uint64_t v2_writeVInt64(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64x2_t v9;
  int16x8_t v10;
  uint64_t v11;
  uint64x2_t v12;
  int16x8_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64x2_t v16;
  int16x8_t v17;

  if (a3 > 0x7F)
  {
    if (a3 >> 14)
    {
      if (a3 >> 21)
      {
        if (a3 >> 28)
        {
          if (a3 >> 35)
          {
            if (a3 >> 42)
            {
              if (a3 >> 49)
              {
                v14 = a2 + 1;
                if (HIBYTE(a3))
                {
                  *(_BYTE *)(a1 + a2) = -1;
                  *(_QWORD *)(a1 + v14) = a3;
                  return a2 + 9;
                }
                else
                {
                  v15 = (_BYTE *)(a1 + a2);
                  *v15 = -2;
                  v16 = (uint64x2_t)vdupq_n_s64(a3);
                  v17 = (int16x8_t)vshlq_u64(v16, (uint64x2_t)xmmword_1B8631C40);
                  *(int32x2_t *)v16.i8 = vmovn_s64((int64x2_t)vshlq_u64(v16, (uint64x2_t)xmmword_1B8631C50));
                  *(int32x2_t *)v17.i8 = vmovn_s64((int64x2_t)v17);
                  v17.i16[1] = v17.i16[2];
                  v17.i16[2] = v16.i16[0];
                  v17.i16[3] = v16.i16[2];
                  *(_DWORD *)(a1 + v14) = vmovn_s16(v17).u32[0];
                  v15[5] = BYTE2(a3);
                  v15[6] = BYTE1(a3);
                  result = a2 + 8;
                  v15[7] = a3;
                }
              }
              else
              {
                v11 = a1 + a2;
                *(_BYTE *)v11 = BYTE6(a3) | 0xFC;
                v12 = (uint64x2_t)vdupq_n_s64(a3);
                v13 = (int16x8_t)vshlq_u64(v12, (uint64x2_t)xmmword_1B8631C60);
                *(int32x2_t *)v12.i8 = vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_1B8631C70));
                *(int32x2_t *)v13.i8 = vmovn_s64((int64x2_t)v13);
                v13.i16[1] = v13.i16[2];
                v13.i16[2] = v12.i16[0];
                v13.i16[3] = v12.i16[2];
                *(_DWORD *)(v11 + 1) = vmovn_s16(v13).u32[0];
                *(_BYTE *)(v11 + 5) = BYTE1(a3);
                result = a2 + 7;
                *(_BYTE *)(v11 + 6) = a3;
              }
            }
            else
            {
              v8 = a1 + a2;
              v9 = (uint64x2_t)vdupq_n_s64(a3);
              *(_BYTE *)v8 = BYTE5(a3) | 0xF8;
              v10 = (int16x8_t)vshlq_u64(v9, (uint64x2_t)xmmword_1B8631C50);
              *(int32x2_t *)v9.i8 = vmovn_s64((int64x2_t)vshlq_u64(v9, (uint64x2_t)xmmword_1B8631C80));
              *(int32x2_t *)v10.i8 = vmovn_s64((int64x2_t)v10);
              v10.i16[1] = v10.i16[2];
              v10.i16[2] = v9.i16[0];
              v10.i16[3] = v9.i16[2];
              *(_DWORD *)(v8 + 1) = vmovn_s16(v10).u32[0];
              result = a2 + 6;
              *(_BYTE *)(v8 + 5) = a3;
            }
          }
          else
          {
            v7 = (_BYTE *)(a1 + a2);
            *v7 = BYTE4(a3) | 0xF0;
            v7[1] = BYTE3(a3);
            v7[2] = BYTE2(a3);
            v7[3] = BYTE1(a3);
            result = a2 + 5;
            v7[4] = a3;
          }
        }
        else
        {
          v6 = (_BYTE *)(a1 + a2);
          *v6 = BYTE3(a3) | 0xE0;
          v6[1] = BYTE2(a3);
          v6[2] = BYTE1(a3);
          result = a2 + 4;
          v6[3] = a3;
        }
      }
      else
      {
        v5 = (_BYTE *)(a1 + a2);
        *v5 = BYTE2(a3) | 0xC0;
        v5[1] = BYTE1(a3);
        result = a2 + 3;
        v5[2] = a3;
      }
    }
    else
    {
      v4 = (_BYTE *)(a1 + a2);
      *v4 = BYTE1(a3) | 0x80;
      result = a2 + 2;
      v4[1] = a3;
    }
  }
  else
  {
    *(_BYTE *)(a1 + a2) = a3;
    return a2 + 1;
  }
  return result;
}

uint64_t db_updateset_insert_object(float *a1, unsigned __int8 *a2, int a3, int a4)
{
  void *v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  _DWORD *v16;
  int v17;
  int v18;
  _DWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unsigned int v22;
  uint64_t result;
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;

  v8 = malloc_type_malloc((*(_DWORD *)a2 + 4), 0x682DEDC8uLL);
  memcpy(v8, a2, (*(_DWORD *)a2 + 4));
  v9 = a2[4];
  if ((v9 & 0x80) != 0)
  {
    if (v9 <= 0xBF)
    {
      v9 = a2[5] | ((unint64_t)(v9 & 0x3F) << 8);
      goto LABEL_18;
    }
    if (v9 > 0xDF)
    {
      if (v9 > 0xEF)
      {
        if (v9 > 0xF7)
        {
          if (v9 > 0xFB)
          {
            if (v9 > 0xFD)
            {
              if ((_DWORD)v9 == 255)
              {
                v9 = *(_QWORD *)(a2 + 5);
                goto LABEL_18;
              }
              v10 = ((unint64_t)a2[5] << 48) | ((unint64_t)a2[6] << 40) | ((unint64_t)a2[7] << 32) | ((unint64_t)a2[8] << 24) | ((unint64_t)a2[9] << 16) | ((unint64_t)a2[10] << 8);
              v11 = a2[11];
            }
            else
            {
              v10 = ((unint64_t)(v9 & 1) << 48) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 32) | ((unint64_t)a2[7] << 24) | ((unint64_t)a2[8] << 16) | ((unint64_t)a2[9] << 8);
              v11 = a2[10];
            }
          }
          else
          {
            v10 = ((unint64_t)(v9 & 3) << 40) | ((unint64_t)a2[5] << 32) | ((unint64_t)a2[6] << 24) | ((unint64_t)a2[7] << 16) | ((unint64_t)a2[8] << 8);
            v11 = a2[9];
          }
        }
        else
        {
          v10 = ((unint64_t)(v9 & 7) << 32) | ((unint64_t)a2[5] << 24) | ((unint64_t)a2[6] << 16) | ((unint64_t)a2[7] << 8);
          v11 = a2[8];
        }
      }
      else
      {
        v10 = ((unint64_t)(v9 & 0xF) << 24) | ((unint64_t)a2[5] << 16) | ((unint64_t)a2[6] << 8);
        v11 = a2[7];
      }
    }
    else
    {
      v10 = ((unint64_t)(v9 & 0x1F) << 16) | ((unint64_t)a2[5] << 8);
      v11 = a2[6];
    }
    v9 = v10 | v11;
  }
LABEL_18:
  v12 = *((_QWORD *)a1 + 8);
  if (v12 <= v9)
    v12 = v9;
  *((_QWORD *)a1 + 8) = v12;
  v13 = std::__hash_table<std::__hash_value_type<unsigned long long,value_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,value_t>>>::find<unsigned long long>(a1, v9);
  if (!a3)
  {
    if (v13)
    {
      v18 = *((_DWORD *)v13 + 6);
      v19 = (_DWORD *)v13[4];
      if (v18)
      {
        if (v18 == 3)
        {
          v30 = v9;
          v20 = std::__hash_table<std::__hash_value_type<unsigned long long,value_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,value_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a1, v9, &v30);
          v20[3] = 0x800000002;
          v20[4] = v8;
          ++*((_QWORD *)a1 + 6);
LABEL_47:
          result = 0;
          v24 = *((_QWORD *)a1 + 7) + (*(_DWORD *)a2 + 4);
          goto LABEL_48;
        }
        if ((a4 & 8) == 0)
        {
          free(v8);
          return 17;
        }
        v26 = 0;
        if (v18 == 2)
          v27 = 2;
        else
          v27 = 1;
LABEL_37:
        v30 = v9;
        v28 = std::__hash_table<std::__hash_value_type<unsigned long long,value_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,value_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a1, v9, &v30);
        *((_DWORD *)v28 + 6) = v27;
        *((_DWORD *)v28 + 7) = 8;
        v28[4] = v8;
        if ((v26 & 1) != 0)
        {
          ++*((_QWORD *)a1 + 5);
        }
        else
        {
          if (v19)
            v29 = (*v19 + 4);
          else
            v29 = 0;
          *((_QWORD *)a1 + 7) -= v29;
          free(v19);
        }
        goto LABEL_47;
      }
    }
    else
    {
      v19 = 0;
    }
    v26 = 1;
    v27 = 1;
    goto LABEL_37;
  }
  v14 = 1;
  if (v13)
  {
    v15 = *((_DWORD *)v13 + 6);
    v16 = (_DWORD *)v13[4];
    if (v15 == 1)
      v17 = 1;
    else
      v17 = 2;
    v14 = v15 == 0;
  }
  else
  {
    v16 = 0;
    v17 = 2;
  }
  v30 = v9;
  v21 = std::__hash_table<std::__hash_value_type<unsigned long long,value_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,value_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a1, v9, &v30);
  *((_DWORD *)v21 + 6) = v17;
  *((_DWORD *)v21 + 7) = a4;
  v21[4] = v8;
  v22 = *(_DWORD *)a2 + 4;
  if (v14)
  {
    result = 0;
    v24 = *((_QWORD *)a1 + 7) + v22;
LABEL_48:
    *((_QWORD *)a1 + 7) = v24;
    return result;
  }
  if (v16)
    v25 = -4 - *v16;
  else
    v25 = 0;
  *((_QWORD *)a1 + 7) += v22 + v25;
  free(v16);
  return 0;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,value_t>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,value_t>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,value_t>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(float *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v34;

  v6 = *((_QWORD *)a1 + 1);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v8 = a2;
      if (v6 <= a2)
        v8 = a2 % v6;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v8);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v11 >= v6)
              v11 %= v6;
          }
          else
          {
            v11 &= v6 - 1;
          }
          if (v11 != v8)
            break;
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = a2;
  v12 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v12;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v6 || (float)(v14 * (float)v6) < v13)
  {
    v15 = 1;
    if (v6 >= 3)
      v15 = (v6 & (v6 - 1)) != 0;
    v16 = v15 | (2 * v6);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v6 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v6)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v6)
    {
      v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v6 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v6)
      {
        v6 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v22)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = a1 + 4;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v6 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v6 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= a2)
        v8 = a2 % v6;
      else
        v8 = a2;
    }
    else
    {
      v8 = (v6 - 1) & a2;
    }
  }
  v30 = *(_QWORD **)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
  if (v31)
  {
    *i = *v31;
LABEL_72:
    *v31 = i;
    goto LABEL_73;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v30[v8] = a1 + 4;
  if (*i)
  {
    v32 = *(_QWORD *)(*i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v32 >= v6)
        v32 %= v6;
    }
    else
    {
      v32 &= v6 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void SIActivityJournalCSItem(uint64_t a1, CFStringRef theString, uint64_t a3, unsigned int a4, unint64_t a5, int a6, int a7)
{
  CFIndex Length;
  char v15;
  unsigned int v16;
  char v17;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  unint64_t v21;
  char v22;
  unsigned int v23;
  char v24;
  char *v25;
  uint64_t v26;
  char v27[1024];
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  Length = CFStringGetLength(theString);
  bzero(v27, 0x400uLL);
  if (Length && Length <= 255 && CFStringGetCString(theString, v27, 1024, 0x8000100u))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 32));
    if (*(unsigned __int8 *)(a1 + 37) != a6)
    {
      *(_BYTE *)(a1 + 37) = a6;
      if (a6)
        v15 = 26;
      else
        v15 = 27;
      activityJournalWrite(a1, v15, 0, 0);
    }
    if (*(_DWORD *)(a1 + 12) != HIDWORD(a3))
    {
      *(_DWORD *)(a1 + 12) = HIDWORD(a3);
      v28 = 0u;
      v29 = 0u;
      if (HIDWORD(a3) > 0x7F)
      {
        if (HIDWORD(a3) >> 14)
        {
          if (HIDWORD(a3) >> 21)
          {
            if (HIDWORD(a3) >> 28)
            {
              LOBYTE(v28) = -16;
              *(_DWORD *)((char *)&v28 + 1) = HIDWORD(a3);
              v16 = 5;
            }
            else
            {
              LOBYTE(v28) = HIBYTE(a3) | 0xE0;
              BYTE1(v28) = BYTE6(a3);
              BYTE2(v28) = BYTE5(a3);
              BYTE3(v28) = BYTE4(a3);
              v16 = 4;
            }
          }
          else
          {
            LOBYTE(v28) = BYTE6(a3) | 0xC0;
            BYTE1(v28) = BYTE5(a3);
            BYTE2(v28) = BYTE4(a3);
            v16 = 3;
          }
        }
        else
        {
          LOBYTE(v28) = BYTE5(a3) | 0x80;
          BYTE1(v28) = BYTE4(a3);
          v16 = 2;
        }
      }
      else
      {
        LOBYTE(v28) = BYTE4(a3);
        v16 = 1;
      }
      activityJournalWrite(a1, 10, &v28, v16);
    }
    if (*(_DWORD *)(a1 + 8) != a4)
    {
      *(_DWORD *)(a1 + 8) = a4;
      v28 = 0u;
      v29 = 0u;
      if (a4 > 0x7F)
      {
        if (a4 >> 14)
        {
          if (a4 >> 21)
          {
            if (a4 >> 28)
            {
              LOBYTE(v28) = -16;
              *(_DWORD *)((char *)&v28 + 1) = a4;
              v18 = 5;
            }
            else
            {
              LOBYTE(v28) = HIBYTE(a4) | 0xE0;
              BYTE1(v28) = BYTE2(a4);
              BYTE2(v28) = BYTE1(a4);
              BYTE3(v28) = a4;
              v18 = 4;
            }
          }
          else
          {
            LOBYTE(v28) = BYTE2(a4) | 0xC0;
            BYTE1(v28) = BYTE1(a4);
            BYTE2(v28) = a4;
            v18 = 3;
          }
        }
        else
        {
          LOBYTE(v28) = BYTE1(a4) | 0x80;
          BYTE1(v28) = a4;
          v18 = 2;
        }
      }
      else
      {
        LOBYTE(v28) = a4;
        v18 = 1;
      }
      activityJournalWrite(a1, 9, &v28, v18);
    }
    if (*(_QWORD *)(a1 + 24) != a5)
    {
      *(_QWORD *)(a1 + 24) = a5;
      activityJournalWriteVInt64(a1, 32, a5);
    }
    if (Length <= 20)
    {
      if (Length < 1)
      {
LABEL_42:
        v21 = atol(v27);
        if (v21)
        {
          v28 = 0u;
          v29 = 0u;
          if (a7)
            v22 = 31;
          else
            v22 = 29;
          if (v21 > 0x7F)
          {
            if (v21 >> 14)
            {
              if (v21 >> 21)
              {
                if (v21 >> 28)
                {
                  if (v21 >> 35)
                  {
                    if (v21 >> 42)
                    {
                      if (v21 >> 49)
                      {
                        if (HIBYTE(v21))
                        {
                          LOBYTE(v28) = -1;
                          *(_QWORD *)((char *)&v28 + 1) = v21;
                          v23 = 9;
                        }
                        else
                        {
                          LOBYTE(v28) = -2;
                          BYTE1(v28) = BYTE6(v21);
                          BYTE2(v28) = BYTE5(v21);
                          BYTE3(v28) = BYTE4(v21);
                          BYTE4(v28) = BYTE3(v21);
                          BYTE5(v28) = BYTE2(v21);
                          BYTE6(v28) = BYTE1(v21);
                          v23 = 8;
                          BYTE7(v28) = v21;
                        }
                      }
                      else
                      {
                        LOBYTE(v28) = BYTE6(v21) | 0xFC;
                        BYTE1(v28) = BYTE5(v21);
                        BYTE2(v28) = BYTE4(v21);
                        BYTE3(v28) = BYTE3(v21);
                        BYTE4(v28) = BYTE2(v21);
                        BYTE5(v28) = BYTE1(v21);
                        v23 = 7;
                        BYTE6(v28) = v21;
                      }
                    }
                    else
                    {
                      LOBYTE(v28) = BYTE5(v21) | 0xF8;
                      BYTE1(v28) = BYTE4(v21);
                      BYTE2(v28) = BYTE3(v21);
                      BYTE3(v28) = BYTE2(v21);
                      BYTE4(v28) = BYTE1(v21);
                      BYTE5(v28) = v21;
                      v23 = 6;
                    }
                  }
                  else
                  {
                    LOBYTE(v28) = BYTE4(v21) | 0xF0;
                    BYTE1(v28) = BYTE3(v21);
                    BYTE2(v28) = BYTE2(v21);
                    BYTE3(v28) = BYTE1(v21);
                    BYTE4(v28) = v21;
                    v23 = 5;
                  }
                }
                else
                {
                  LOBYTE(v28) = BYTE3(v21) | 0xE0;
                  BYTE1(v28) = BYTE2(v21);
                  BYTE2(v28) = BYTE1(v21);
                  BYTE3(v28) = v21;
                  v23 = 4;
                }
              }
              else
              {
                LOBYTE(v28) = BYTE2(v21) | 0xC0;
                BYTE1(v28) = BYTE1(v21);
                BYTE2(v28) = v21;
                v23 = 3;
              }
            }
            else
            {
              LOBYTE(v28) = BYTE1(v21) | 0x80;
              BYTE1(v28) = v21;
              v23 = 2;
            }
          }
          else
          {
            LOBYTE(v28) = v21;
            v23 = 1;
          }
          v25 = (char *)&v28;
          v26 = a1;
LABEL_68:
          activityJournalWrite(v26, v22, v25, v23);
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 32));
          return;
        }
      }
      else
      {
        v19 = v27;
        while (1)
        {
          v20 = *v19++;
          if (v20 >= 0x3A)
            break;
          if (!--Length)
            goto LABEL_42;
        }
      }
    }
    if (a7)
      v24 = 30;
    else
      v24 = 28;
    v23 = strlen(v27) + 1;
    v25 = v27;
    v26 = a1;
    v22 = v24;
    goto LABEL_68;
  }
  if (a7)
    v17 = 13;
  else
    v17 = 11;
  _SIActivityJournalAdd(a1, v17, a3, a4, a5, a6);
}

void activityJournalWriteVInt64(uint64_t a1, char a2, unint64_t a3)
{
  unsigned int v3;
  _OWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  memset(v4, 0, sizeof(v4));
  if (a3 > 0x7F)
  {
    if (a3 >> 14)
    {
      if (a3 >> 21)
      {
        if (a3 >> 28)
        {
          if (a3 >> 35)
          {
            if (a3 >> 42)
            {
              if (a3 >> 49)
              {
                if (HIBYTE(a3))
                {
                  LOBYTE(v4[0]) = -1;
                  *(_QWORD *)((char *)v4 + 1) = a3;
                  v3 = 9;
                }
                else
                {
                  LOBYTE(v4[0]) = -2;
                  BYTE1(v4[0]) = BYTE6(a3);
                  BYTE2(v4[0]) = BYTE5(a3);
                  BYTE3(v4[0]) = BYTE4(a3);
                  BYTE4(v4[0]) = BYTE3(a3);
                  BYTE5(v4[0]) = BYTE2(a3);
                  BYTE6(v4[0]) = BYTE1(a3);
                  v3 = 8;
                  BYTE7(v4[0]) = a3;
                }
              }
              else
              {
                LOBYTE(v4[0]) = BYTE6(a3) | 0xFC;
                BYTE1(v4[0]) = BYTE5(a3);
                BYTE2(v4[0]) = BYTE4(a3);
                BYTE3(v4[0]) = BYTE3(a3);
                BYTE4(v4[0]) = BYTE2(a3);
                BYTE5(v4[0]) = BYTE1(a3);
                v3 = 7;
                BYTE6(v4[0]) = a3;
              }
            }
            else
            {
              LOBYTE(v4[0]) = BYTE5(a3) | 0xF8;
              BYTE1(v4[0]) = BYTE4(a3);
              BYTE2(v4[0]) = BYTE3(a3);
              BYTE3(v4[0]) = BYTE2(a3);
              BYTE4(v4[0]) = BYTE1(a3);
              BYTE5(v4[0]) = a3;
              v3 = 6;
            }
          }
          else
          {
            LOBYTE(v4[0]) = BYTE4(a3) | 0xF0;
            BYTE1(v4[0]) = BYTE3(a3);
            BYTE2(v4[0]) = BYTE2(a3);
            BYTE3(v4[0]) = BYTE1(a3);
            BYTE4(v4[0]) = a3;
            v3 = 5;
          }
        }
        else
        {
          LOBYTE(v4[0]) = BYTE3(a3) | 0xE0;
          BYTE1(v4[0]) = BYTE2(a3);
          BYTE2(v4[0]) = BYTE1(a3);
          BYTE3(v4[0]) = a3;
          v3 = 4;
        }
      }
      else
      {
        LOBYTE(v4[0]) = BYTE2(a3) | 0xC0;
        BYTE1(v4[0]) = BYTE1(a3);
        BYTE2(v4[0]) = a3;
        v3 = 3;
      }
    }
    else
    {
      LOBYTE(v4[0]) = BYTE1(a3) | 0x80;
      BYTE1(v4[0]) = a3;
      v3 = 2;
    }
  }
  else
  {
    LOBYTE(v4[0]) = a3;
    v3 = 1;
  }
  activityJournalWrite(a1, a2, v4, v3);
}

BOOL objectHasContent(int *a1, uint64_t a2)
{
  unint64_t v3;
  _BYTE *v4;

  v3 = 0;
  v4 = 0;
  return !db_get_field(a1, a2, "_kMDItemTextContentIndexExists", &v3, &v4) && *v4 != 0;
}

void si_perform_livequeries_updates(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  pthread_mutex_t *v8;
  CFIndex Count;
  uint64_t v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  os_unfair_lock_s *v21;
  const void *v22;
  const void *v23;
  CFMutableSetRef Mutable;
  _QWORD *v25;
  CFMutableSetRef v26;
  uint64_t v27;
  uint64_t v28;
  const __CFArray *v29;
  CFIndex v30;
  CFIndex v31;
  CFIndex i;
  const __CFString *ValueAtIndex;
  int *v34;
  _DWORD *v35;
  __int128 *v36;
  _DWORD *v37;
  const __CFArray *v39;
  const __CFArray *v40;
  CFIndex v41;
  uint64_t v42;
  CFIndex v43;
  const __CFSet *v44;
  const void *v45;
  CFIndex v46;
  CFIndex v47;
  CFIndex v48;
  const __CFSet *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  double Current;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  NSObject *v71;
  unint64_t v72;
  CFMutableDictionaryRef v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _OWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int v93;
  _QWORD *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  BOOL v112;
  unint64_t v113;
  uint64_t v114;
  CFMutableDictionaryRef v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int16 v118;
  uint64_t v119;
  double v120;
  int v121;
  NSObject *v122;
  os_log_type_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _OWORD *v128;
  uint64_t v129;
  unsigned int *v130;
  unsigned int v131;
  int v132;
  NSObject *v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  NSObject *v137;
  int v138;
  NSObject *v139;
  int v140;
  NSObject *v141;
  int v142;
  NSObject *v143;
  unint64_t v144;
  uint64_t v145;
  int v146;
  NSObject *v147;
  unint64_t v148;
  int v149;
  NSObject *v150;
  unint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  CFMutableDictionaryRef v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  char v162;
  char v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  const __CFAllocator *allocator;
  const void **v169;
  unsigned int fields_generation;
  uint64_t v171;
  unint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  char **v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD v178[2];
  void (*v179)(uint64_t, int);
  void *v180;
  uint64_t v181;
  CFMutableSetRef v182;
  uint64_t v183;
  _QWORD v184[7];
  uint64_t v185[2];
  __int128 v186;
  __int128 v187;
  unsigned int v188;
  uint64_t v189;
  __int128 v190;
  int v191;
  uint64_t v192[2];
  __int128 v193;
  __int128 v194;
  unsigned int v195;
  uint64_t v196;
  __int128 v197;
  int v198;
  unint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t (**v202)();
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *values[1024];
  int v210;
  unint64_t v211;
  __int16 v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  void *v217;
  void *v218[5];
  uint64_t v219;
  _BYTE v220[24];
  void *v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v172 = v6;
  v7 = v1;
  v228 = *MEMORY[0x1E0C80C00];
  bzero(values, 0x2000uLL);
  v8 = (pthread_mutex_t *)(v7 + 1712);
  pthread_mutex_lock((pthread_mutex_t *)(v7 + 1712));
  Count = CFSetGetCount(*(CFSetRef *)(v7 + 1776));
  v10 = Count;
  v177 = v7;
  if (Count >= 1024)
  {
    v11 = (const void **)malloc_type_malloc(8 * Count, 0x2004093837F09uLL);
    CFSetGetValues(*(CFSetRef *)(v7 + 1776), v11);
  }
  else
  {
    if (!Count)
    {
      v12 = 0;
      v11 = (const void **)values;
      goto LABEL_16;
    }
    v11 = (const void **)values;
    CFSetGetValues(*(CFSetRef *)(v7 + 1776), (const void **)values);
    if (v10 < 1)
    {
      v12 = 0;
      goto LABEL_16;
    }
  }
  v12 = 0;
  v13 = 0;
  do
  {
    v14 = *((_QWORD *)v11[v13] + 5);
    do
    {
      v15 = v14;
      v14 = *(_QWORD *)(v14 + 80);
    }
    while (v14);
    if (si_resultqueue_count(**(_QWORD **)(v15 + 8)) <= 0x400)
    {
      v16 = (unsigned int *)v11[v13];
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      v11[v12++] = v16;
    }
    ++v13;
  }
  while (v13 != v10);
  v7 = v177;
LABEL_16:
  v165 = *(_QWORD *)(v7 + 1792) + 1;
  *(_QWORD *)(v7 + 1792) = v165;
  pthread_mutex_unlock(v8);
  fields_generation = db_get_fields_generation(*(int **)(v7 + 1184));
  if (v12 >= 1)
  {
    v18 = 0;
    v163 = v3 | 8;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v169 = v11;
    v162 = v3;
    v171 = v12;
    while (1)
    {
      v174 = v18;
      v19 = (uint64_t)v11[v18];
      v20 = v3;
      if (!*(_QWORD *)(v5 + 24))
        break;
      v21 = (os_unfair_lock_s *)(v19 + 48);
      os_unfair_lock_lock((os_unfair_lock_t)(v19 + 48));
      if (*(_DWORD *)(v19 + 32) < fields_generation)
      {
        v22 = *(const void **)(v19 + 16);
        if (v22)
          CFRelease(v22);
        v23 = *(const void **)(v19 + 24);
        if (v23)
          CFRelease(v23);
        Mutable = CFSetCreateMutable(allocator, 0, 0);
        *(_QWORD *)(v19 + 16) = CFArrayCreateMutable(allocator, 0, 0);
        *(_QWORD *)(v19 + 24) = CFArrayCreateMutable(allocator, 0, 0);
        v184[0] = MEMORY[0x1E0C809B0];
        v184[1] = 0x40000000;
        v184[2] = __si_perform_livequeries_updates_block_invoke;
        v184[3] = &__block_descriptor_tmp_6_3481;
        v184[4] = v7;
        v184[5] = Mutable;
        v184[6] = v19;
        v25 = *(_QWORD **)(*(_QWORD *)(v19 + 8) + 104);
        *(_QWORD *)v220 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v220[8] = 0x40000000;
        *(_QWORD *)&v220[16] = __db_query_tree_apply_block_block_invoke;
        v221 = &unk_1E6E377F8;
        v222 = v184;
        db_query_tree_apply_block_with_meta(v25, (uint64_t)v220, 0);
        CFRelease(Mutable);
        v26 = CFSetCreateMutable(allocator, 0, 0);
        v27 = v19;
        v28 = *(_QWORD *)(v19 + 8);
        v29 = *(const __CFArray **)(v28 + 16);
        if (v29)
        {
          v30 = CFArrayGetCount(*(CFArrayRef *)(v28 + 16));
          if (v30 >= 1)
          {
            v31 = v30;
            for (i = 0; i != v31; ++i)
            {
              bzero(v220, 0x400uLL);
              ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v29, i);
              if (CFStringGetCString(ValueAtIndex, v220, 1024, 0x8000100u)
                && (!*(_BYTE *)(v7 + 2072)
                 || *(_QWORD *)v220 ^ 0x6D657449444D6B5FLL | *(_QWORD *)&v220[8] ^ 0x4449656C646E7542 | v220[16]))
              {
                v34 = *(int **)(v7 + 1184);
                v178[0] = MEMORY[0x1E0C809B0];
                v178[1] = 0x40000000;
                v179 = __si_perform_livequeries_updates_block_invoke_3;
                v180 = &__block_descriptor_tmp_7_3483;
                v181 = v7;
                v182 = v26;
                v183 = v27;
                v215 = 0u;
                v214 = 0u;
                v35 = db_copy_field_ids_with_buffer(v34, v220, (uint64_t)&v214, 8uLL);
                if (v35)
                {
                  v36 = (__int128 *)v35;
                  if (*v35)
                  {
                    v37 = v35 + 1;
                    do
                      ((void (*)(_QWORD *))v179)(v178);
                    while (*v37++);
                  }
                  v7 = v177;
                  if (v36 != &v214)
                    free(v36);
                }
              }
            }
          }
        }
        CFRelease(v26);
        v19 = v27;
        *(_DWORD *)(v27 + 32) = fields_generation;
        v11 = v169;
        v3 = v162;
      }
      v39 = (const __CFArray *)CFRetain(*(CFTypeRef *)(v19 + 16));
      v40 = (const __CFArray *)CFRetain(*(CFTypeRef *)(v19 + 24));
      os_unfair_lock_unlock(v21);
      v41 = CFArrayGetCount(v39);
      v20 = v3;
      if (v41)
      {
        v42 = v41;
        v20 = CFArrayGetValueAtIndex(v39, 0) ? v3 : v163;
        if (v42 >= 1)
        {
          v43 = 0;
          while (1)
          {
            v44 = *(const __CFSet **)(v5 + 24);
            v45 = CFArrayGetValueAtIndex(v39, v43);
            if (CFSetContainsValue(v44, v45))
              break;
            if (v42 == ++v43)
              goto LABEL_48;
          }
          v20 |= 2u;
LABEL_48:
          v11 = v169;
        }
      }
      CFRelease(v39);
      v46 = CFArrayGetCount(v40);
      if (v46 >= 1)
      {
        v47 = v46;
        v48 = 0;
        while (1)
        {
          v49 = *(const __CFSet **)(v5 + 24);
          v50 = CFArrayGetValueAtIndex(v40, v48);
          if (CFSetContainsValue(v49, v50))
            break;
          if (v47 == ++v48)
            goto LABEL_55;
        }
        v20 |= 4u;
      }
LABEL_55:
      CFRelease(v40);
      if ((v20 & 6) == 0 && dword_1EF19FC94 >= 5)
      {
        v132 = *__error();
        v133 = _SILogForLogForCategory(2);
        if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
        {
          v134 = *v172;
          v135 = *(_QWORD *)(v19 + 8);
          *(_DWORD *)v220 = 134218240;
          *(_QWORD *)&v220[4] = v134;
          *(_WORD *)&v220[12] = 2048;
          *(_QWORD *)&v220[14] = v135;
          _os_log_impl(&dword_1B8270000, v133, OS_LOG_TYPE_DEFAULT, "skip dbo:%lld %p", v220, 0x16u);
        }
        *__error() = v132;
        v7 = v177;
        goto LABEL_198;
      }
      if ((v20 & 6) != 0)
        break;
LABEL_198:
      si_livequery_release(v19);
      v18 = v174 + 1;
      if (v174 + 1 == v171)
        goto LABEL_221;
    }
    v51 = *(_QWORD *)(v19 + 8);
    v173 = v19;
    v52 = *(_QWORD *)(v19 + 40);
    v53 = *(_QWORD *)(v51 + 144);
    *(_QWORD *)v220 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v220[8] = 0x40000000;
    *(_QWORD *)&v220[16] = __query_once_block_invoke;
    v221 = &__block_descriptor_tmp_418;
    v222 = (_QWORD *)v51;
    if (v53 != -1)
      dispatch_once((dispatch_once_t *)(v51 + 144), v220);
    v54 = *(_QWORD *)(v52 + 88);
    if (*(_BYTE *)v5)
    {
      v55 = *(_QWORD *)(v51 + 136);
      if (v55 < 1)
      {
        v56 = 0;
      }
      else
      {
        v56 = 0;
        v57 = *(_QWORD *)(v51 + 128);
        v58 = *(_QWORD *)(v51 + 136);
        do
        {
          if ((*(_BYTE *)(*(_QWORD *)v57 + 4) & 1) != 0)
          {
            *(_BYTE *)(v5 + 16) = 0;
            ++v56;
          }
          v57 += 16;
          --v58;
        }
        while (v58);
      }
      if (v56 == v55)
      {
LABEL_197:
        v19 = v173;
        goto LABEL_198;
      }
    }
    v207 = 0;
    v204 = 0;
    v205 = v54;
    v206 = v20 & 1;
    v203 = v7;
    v202 = &off_1E6E2A268;
    BYTE1(v206) = *(_BYTE *)(v5 + 16);
    v59 = *(_DWORD *)(v5 + 4);
    HIDWORD(v206) = v59;
    v208 = *(_QWORD *)(v5 + 8);
    v199 = v172;
    v200 = 0;
    v201 = v165;
    if (v54)
      v175 = *(char ***)(v54 + 120);
    else
      v175 = 0;
    v60 = *(_DWORD *)(v5 + 20);
    if ((v60 & 1) != 0 && (*(_BYTE *)(v51 + 200) & 0x80) == 0)
    {
      Current = CFAbsoluteTimeGetCurrent();
      goto LABEL_116;
    }
    if ((v60 & 2) != 0)
    {
      v62 = *(_QWORD *)(v51 + 200);
      Current = CFAbsoluteTimeGetCurrent();
      if ((v62 & 0x100) != 0)
        goto LABEL_116;
    }
    else
    {
      Current = CFAbsoluteTimeGetCurrent();
    }
    v161 = v60;
    v7 = v177;
    if (*(_QWORD *)(v177 + 6624) && (v59 || *(_BYTE *)(v177 + 2072)))
    {
      v63 = *(_QWORD *)(v51 + 232);
      *(_QWORD *)v220 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v220[8] = 0x40000000;
      *(_QWORD *)&v220[16] = __si_query_get_scope_node_block_invoke;
      v221 = &__block_descriptor_tmp_144_7584;
      v222 = (_QWORD *)v51;
      v223 = v177;
      if (v63 != -1)
        dispatch_once((dispatch_once_t *)(v51 + 232), v220);
      v64 = *(_QWORD **)(v51 + 224);
      if (v64)
      {
        v65 = db_eval_obj_with_options(*(_QWORD *)(v177 + 1184));
        if (*(_QWORD **)(v51 + 224) != v64)
        {
          *(_QWORD *)v220 = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v220[8] = 0x40000000;
          *(_QWORD *)&v220[16] = __db_query_tree_apply_block_block_invoke;
          v221 = &unk_1E6E377F8;
          v222 = &__block_literal_global_143;
          db_query_tree_apply_block_with_meta(v64, (uint64_t)v220, 0);
        }
        if (!v65)
          goto LABEL_116;
      }
    }
    v159 = *(_QWORD *)(v51 + 256);
    v160 = *(_QWORD *)(v51 + 248);
    v66 = *(unsigned __int8 *)(v51 + 61);
    if ((v20 & 2) != 0)
    {
      if ((v20 & 8) != 0 && *(_BYTE *)(v5 + 16) && dword_1EF19FC94 >= 5)
      {
        v149 = *__error();
        v150 = _SILogForLogForCategory(2);
        if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
        {
          v151 = *v172;
          *(_DWORD *)v220 = 134218240;
          *(_QWORD *)&v220[4] = v151;
          *(_WORD *)&v220[12] = 2048;
          *(_QWORD *)&v220[14] = v51;
          _os_log_impl(&dword_1B8270000, v150, OS_LOG_TYPE_DEFAULT, "slow path dbo:%lld %p", v220, 0x16u);
        }
        *__error() = v149;
        v7 = v177;
      }
    }
    else if ((v20 & 4) != 0)
    {
      v67 = v52;
      do
      {
        v68 = v67;
        v67 = *(_QWORD *)(v67 + 80);
      }
      while (v67);
      v69 = *(_QWORD *)(v68 + 40);
      if (v69 && RLEOIDArrayContainsOid(v69, *v172))
      {
        if (dword_1EF19FC94 > 4)
        {
          v70 = *__error();
          v71 = _SILogForLogForCategory(2);
          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
          {
            v72 = *v172;
            *(_DWORD *)v220 = 134218240;
            *(_QWORD *)&v220[4] = v72;
            *(_WORD *)&v220[12] = 2048;
            *(_QWORD *)&v220[14] = v51;
            _os_log_impl(&dword_1B8270000, v71, OS_LOG_TYPE_DEFAULT, "update dbo:%lld %p", v220, 0x16u);
          }
          *__error() = v70;
          v7 = v177;
        }
        goto LABEL_103;
      }
      if (dword_1EF19FC94 >= 5)
      {
        v146 = *__error();
        v147 = _SILogForLogForCategory(2);
        if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
        {
          v148 = *v172;
          *(_DWORD *)v220 = 134218240;
          *(_QWORD *)&v220[4] = v148;
          *(_WORD *)&v220[12] = 2048;
          *(_QWORD *)&v220[14] = v51;
          _os_log_impl(&dword_1B8270000, v147, OS_LOG_TYPE_DEFAULT, "no match dbo:%lld %p", v220, 0x16u);
        }
        *__error() = v146;
      }
      goto LABEL_116;
    }
    if ((!*(_QWORD *)(v51 + 112) || db_eval_obj_with_options(*(_QWORD *)(v7 + 1184)))
      && db_eval_obj_with_options(*(_QWORD *)(v7 + 1184)))
    {
LABEL_103:
      v73 = CFDictionaryCreateMutable(allocator, 0, 0, MEMORY[0x1E0C9B3A0]);
      bzero(v220, 0x11E0uLL);
      v156 = v73;
      PartialQueryResults::PartialQueryResults((uint64_t)v220, *(CFArrayRef *)(v51 + 16), *(const void **)(v51 + 24), 0, 0, v73, *(_DWORD *)(v51 + 152), 0, *(double *)(v51 + 360), 0, 0, 0, 0, 1);
      if (*(int *)(v51 + 152) >= 4)
      {
        if (v224)
        {
          PartialQueryResults::attributeVector((PartialQueryResults *)v220);
          v81 = v224;
        }
        else
        {
          v81 = 0;
        }
        v115 = v73;
        collectAttributesFromDBO(v7, v172, v81, (uint64_t)v220, v175);
        si_querypipe_addcoalescedresults(v52, (PartialQueryResults *)v220, *(int **)(v7 + 1184), 1);
      }
      else
      {
        v74 = v52;
        do
        {
          v75 = v74;
          v74 = *(_QWORD *)(v74 + 80);
        }
        while (v74);
        v76 = RLEOIDArrayContainsOid(*(_QWORD *)(v75 + 40), *v172);
        v219 = 0;
        LOBYTE(v77) = 1;
        memset(&v218[1], 0, 32);
        if (v76)
          v78 = 2;
        else
          v78 = 1;
        v153 = v76;
        v154 = v78;
        v216 = 0;
        v217 = 0;
        *((_QWORD *)&v214 + 1) = 0;
        *(_QWORD *)&v215 = v7;
        *((_QWORD *)&v215 + 1) = v54;
        memset(v218, 0, sizeof(v218));
        if (v7)
          v77 = (*(unsigned __int8 *)(v7 + 6586) >> 1) & 1;
        LOBYTE(v219) = v77;
        *(_QWORD *)&v214 = &off_1E6E2A0F8;
        v217 = v172;
        DWORD2(v214) = 4;
        v155 = v51;
        if (v66)
        {
          v166 = 0;
          v79 = 0;
          v80 = -1;
        }
        else
        {
          v152 = v5;
          v164 = *(_QWORD *)(v51 + 288);
          if (v164 < 1)
          {
            v101 = 0;
            v79 = 0;
          }
          else
          {
            v98 = v51;
            v99 = 0;
            v100 = 0;
            v101 = 0;
            v79 = 0;
            v102 = *(_QWORD *)(v98 + 264);
            v157 = v102;
            v158 = v54;
            do
            {
              v103 = v102 + 24 * v99;
              v106 = *(_QWORD *)(v103 + 8);
              v105 = (uint64_t *)(v103 + 8);
              LOBYTE(v104) = v106;
              if (v106 < 1)
              {
                v108 = 0;
                v109 = 0;
              }
              else
              {
                v167 = v101;
                v107 = 0;
                v108 = 0;
                v109 = 0;
                v110 = (_QWORD *)(v102 + 24 * v99);
                do
                {
                  if (*(_QWORD *)(*v110 + 8 * v107))
                  {
                    v111 = db_eval_obj_with_options(*(_QWORD *)(v177 + 1184)) != 0;
                    v112 = __CFADD__(v108, v111);
                    v108 += v111;
                    if (v112)
                      ++v109;
                  }
                  ++v107;
                  v104 = *v105;
                }
                while (*v105 > v107);
                v102 = v157;
                v54 = v158;
                v101 = v167;
              }
              v113 = (v109 << v100) | (v108 >> 1 >> ~v100);
              if ((v100 & 0x40) != 0)
              {
                v113 = v108 << v100;
                v114 = 0;
              }
              else
              {
                v114 = v108 << v100;
              }
              v79 |= v113;
              v101 |= v114;
              v100 += v104;
              ++v99;
            }
            while (v164 > v99);
          }
          v166 = v101;
          v80 = *(double *)(v155 + 360);
          v3 = v162;
          v5 = v152;
          v7 = v177;
          v11 = v169;
        }
        v116 = v52;
        do
        {
          v117 = v116;
          v116 = *(_QWORD *)(v116 + 80);
        }
        while (v116);
        if (v153)
          v118 = 3213;
        else
          v118 = 2781;
        v119 = PartialQueryResults::start((PartialQueryResults *)v220, *(_DWORD *)(*(_QWORD *)(v117 + 8) + 80), v118, 2uLL, 0);
        DWORD2(v214) |= 8u;
        v192[1] = v79;
        v192[0] = v166;
        v193 = 0u;
        v194 = 0u;
        v195 = v80;
        v196 = 0;
        v197 = 0u;
        v198 = 0;
        writeDBOToPlistBytes(v7, v119, v220, v175, &v214, v54, v160, v159, 0, v192, 0, 0, 0, 0, 0, 0, 0, v155, 0);
        if ((v161 & 4) != 0 && v153)
        {
          v185[0] = v166;
          v185[1] = v79;
          v186 = 0u;
          v187 = 0u;
          v188 = v80;
          v189 = 0;
          v190 = 0u;
          v191 = 0;
          writeDBOToPlistBytes(v7, v119, v220, v175, &v214, v54, v160, v159, 0, v185, 0, 0, 0, 0, 0, 0, 0, v155, 0);
        }
        if (v226)
        {
          _MDPlistBytesEndArray();
          _MDPlistBytesEndPlist();
        }
        v51 = v155;
        v115 = v156;
        if (v225)
        {
          _MDStoreOIDArrayEndBulkAdd();
          _MDStoreOIDArrayEndSequence();
          v227 = 0;
        }
        if (v217 == v172)
          v217 = 0;
        si_querypipe_addresults(v52, (uint64_t)v220, v154, 0, v155);
        if (dword_1EF19FC94 >= 5)
        {
          v142 = *__error();
          v143 = _SILogForLogForCategory(2);
          if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
          {
            v144 = *v172;
            v145 = *(_QWORD *)(v155 + 8);
            v210 = 134218242;
            v211 = v144;
            v212 = 2112;
            v213 = v145;
            _os_log_impl(&dword_1B8270000, v143, OS_LOG_TYPE_DEFAULT, "True live query: (%lld) %@", (uint8_t *)&v210, 0x16u);
          }
          *__error() = v142;
          v7 = v177;
        }
        *(_QWORD *)&v214 = &off_1E6E2A0F8;
        if (BYTE2(v219) && v217)
          free(v217);
        *(_QWORD *)&v214 = off_1E6E2A058;
        if (v218[2])
        {
          CFRelease(v218[2]);
          v218[2] = 0;
        }
        if (v218[4])
        {
          free(v218[4]);
          v218[4] = 0;
        }
        if (v218[3])
        {
          CFRelease(v218[3]);
          v218[3] = 0;
        }
        if (BYTE1(v219))
          free(v218[0]);
      }
      CFRelease(v115);
      PartialQueryResults::~PartialQueryResults((PartialQueryResults *)v220);
      goto LABEL_183;
    }
LABEL_116:
    v82 = v51;
    v83 = *v172;
    v84 = v52;
    do
    {
      v85 = v84;
      v84 = *(_QWORD *)(v84 + 80);
    }
    while (v84);
    v86 = *(_QWORD *)(v85 + 40);
    if (RLEOIDArrayContainsOid(v86, *v172))
    {
      v87 = v52;
      do
      {
        v88 = v87;
        v87 = *(_QWORD *)(v87 + 80);
      }
      while (v87);
      v176 = *(_QWORD *)(v88 + 8);
      v89 = malloc_type_calloc(1uLL, 0x40uLL, 0x10720403C4CCC75uLL);
      if (dword_1EF19FC90 >= 5)
      {
        v136 = *__error();
        v137 = _SILogForLogForCategory(1);
        if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v220 = 0;
          _os_log_impl(&dword_1B8270000, v137, OS_LOG_TYPE_DEFAULT, "Passing up change to not match", v220, 2u);
        }
        *__error() = v136;
      }
      v89[1] = *(_OWORD *)(v52 + 48);
      v90 = v52;
      do
      {
        v91 = v90;
        v90 = *(_QWORD *)(v90 + 80);
      }
      while (v90);
      pthread_mutex_lock(&jobsLock);
      v92 = *(unsigned int **)(v91 + 32);
      if (v92)
      {
        do
          v93 = __ldaxr(v92);
        while (__stlxr(v93 + 1, v92));
      }
      pthread_mutex_unlock(&jobsLock);
      *((_QWORD *)v89 + 1) = v92;
      *((_QWORD *)v89 + 5) = 0;
      *(_DWORD *)v89 = 7;
      v94 = malloc_type_malloc(0x10uLL, 0x100004000313F17uLL);
      pthread_rwlock_wrlock((pthread_rwlock_t *)(v86 + 16));
      v7 = v177;
      if (!*(_BYTE *)(v86 + 384))
      {
        v95 = *(_DWORD *)(v86 + 224);
        if (!v95 || *(_QWORD *)(v86 + 216) == ((-1 << (-4 * v95)) & v83))
          SIValueSet<unsigned long long>::_SIValueSetInnerRemove(v86 + 256, v83, v95, v86 + 232);
      }
      pthread_rwlock_unlock((pthread_rwlock_t *)(v86 + 16));
      *v94 = 0;
      v96 = v52;
      do
      {
        v97 = v96;
        v96 = *(_QWORD *)(v96 + 80);
      }
      while (v96);
      *v94 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(v97 + 8) + 80) << 32) | 0xDE10001;
      v94[1] = v83;
      *((_QWORD *)v89 + 4) = _MDStoreOIDArrayCreateMutableWithOids();
      _MDStoreOIDArraySetShouldUseMalloc();
      *((_DWORD *)v89 + 14) = 3;
      v11 = v169;
      if (!si_resultqueue_enqueue(v176, (int *)v89))
      {
        v51 = v82;
        if (dword_1EF19FC90 >= 5)
        {
          v140 = *__error();
          v141 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v220 = 0;
            _os_log_impl(&dword_1B8270000, v141, OS_LOG_TYPE_DEFAULT, "Attempt to append to queue failed. Releasing result batch", v220, 2u);
          }
          *__error() = v140;
          v7 = v177;
        }
        SIResultBatchFree((void **)v89);
        goto LABEL_183;
      }
    }
    else
    {
      v7 = v177;
    }
    v51 = v82;
LABEL_183:
    v120 = *(double *)(v51 + 440) + CFAbsoluteTimeGetCurrent() - Current;
    *(double *)(v51 + 440) = v120;
    if (v120 > 1.0)
    {
      *(_QWORD *)(v51 + 440) = 0;
      v121 = *__error();
      v122 = _SILogForLogForCategory(2);
      v123 = 2 * (dword_1EF19FC94 < 4);
      if (os_log_type_enabled(v122, v123))
      {
        v124 = *(void **)(v51 + 8);
        *(_DWORD *)v220 = 134218498;
        *(_QWORD *)&v220[4] = v51;
        *(_WORD *)&v220[12] = 2048;
        *(double *)&v220[14] = v120;
        *(_WORD *)&v220[22] = 2112;
        v221 = v124;
        _os_log_impl(&dword_1B8270000, v122, v123, "live query:%p time:%f query:%@", v220, 0x20u);
      }
      *__error() = v121;
      v125 = v52;
      do
      {
        v126 = v125;
        v125 = *(_QWORD *)(v125 + 80);
      }
      while (v125);
      v127 = *(_QWORD *)(v126 + 8);
      v128 = malloc_type_calloc(1uLL, 0x40uLL, 0x10720403C4CCC75uLL);
      v128[1] = *(_OWORD *)(v52 + 48);
      do
      {
        v129 = v52;
        v52 = *(_QWORD *)(v52 + 80);
      }
      while (v52);
      pthread_mutex_lock(&jobsLock);
      v130 = *(unsigned int **)(v129 + 32);
      if (v130)
      {
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 + 1, v130));
      }
      pthread_mutex_unlock(&jobsLock);
      *((_QWORD *)v128 + 1) = v130;
      *((double *)v128 + 4) = v120;
      *(_DWORD *)v128 = 8;
      v7 = v177;
      if (!si_resultqueue_enqueue(v127, (int *)v128))
      {
        if (dword_1EF19FC90 >= 5)
        {
          v138 = *__error();
          v139 = _SILogForLogForCategory(1);
          if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v220 = 0;
            _os_log_impl(&dword_1B8270000, v139, OS_LOG_TYPE_DEFAULT, "Attempt to append to queue failed. Releasing result batch", v220, 2u);
          }
          *__error() = v138;
          v7 = v177;
        }
        SIResultBatchFree((void **)v128);
      }
    }
    v202 = &off_1E6E2A268;
    if (v207)
      (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
    goto LABEL_197;
  }
LABEL_221:
  if (v11 != (const void **)values)
    free(v11);
}

uint64_t db_get_fields_generation(int *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v4;
  int v6;
  NSObject *v7;
  int v8;
  char *v9;
  char *v10;
  const char *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*a1 != 1685287992)
  {
    v6 = *__error();
    v7 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = *a1;
      *(_DWORD *)buf = 136315650;
      v13 = "db_get_fields_generation";
      v14 = 1024;
      v15 = 291;
      v16 = 1024;
      v17 = v8;
      _os_log_error_impl(&dword_1B8270000, v7, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v6;
    v9 = __si_assert_copy_extra_268();
    v10 = v9;
    if (v9)
      v11 = v9;
    else
      v11 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 291, v11);
    free(v10);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  v1 = *((_QWORD *)a1 + 110);
  if ((a1[201] & 0x14) == 0)
    return *(unsigned int *)(v1 + 56);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 216);
  switch(v2)
  {
    case -270471200:
      v4 = *(_QWORD *)(v1 + 376);
      break;
    case 1684300900:
      v4 = *(_QWORD *)(v1 + 4496);
      break;
    case 842150450:
      return (*(_DWORD *)(v1 + 364) - 1);
    default:
      return 0;
  }
  return v4 - 1;
}

BOOL processOneCS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const __CFAllocator *a10, unsigned __int8 a11, NSObject *a12, _BYTE *a13, _BYTE *a14)
{
  uint64_t v14;
  const __CFString *v15;
  const void *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  const __CFString *v20;
  unint64_t v21;
  int v22;
  NSObject *v23;
  const __CFString *v25;
  uint64_t v26;
  uint64_t v27;
  const __CFString *v28;
  const __CFAllocator *v29;
  unint64_t v30;
  __CFDictionary *Mutable;
  const __CFDictionary *v32;
  CFNumberRef v33;
  const __CFString *Value;
  const __CFString *v35;
  const void *v36;
  const void *v37;
  const void *v38;
  BOOL v39;
  int v40;
  const void *v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  const __CFString *v46;
  uint64_t v47;
  int v48;
  int v49;
  _BOOL4 v50;
  int v51;
  const void *v52;
  const void *v53;
  const __CFString *v54;
  int v55;
  int v56;
  const __CFString *v57;
  unsigned int v58;
  CFTypeID v59;
  CFIndex Length;
  _BOOL4 v61;
  int v62;
  int v63;
  _BYTE *v64;
  _BYTE *v65;
  int v66;
  CFNumberRef v67;
  CFNumberRef v68;
  const void *v69;
  const void *v70;
  int v71;
  __int16 v72;
  CFNumberRef v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(_QWORD);
  _DWORD *v83;
  int v84;
  NSObject *v85;
  _BOOL8 v86;
  uint64_t v87;
  CFDictionaryRef v88;
  const __CFString *v89;
  const __CFString *v90;
  unsigned int v91;
  const __CFString *v92;
  const __CFString *v93;
  CFTypeID v94;
  CFIndex v95;
  CFIndex v96;
  CFIndex v97;
  const __CFString *v98;
  int object_for_identifier_createParentDBO;
  int v100;
  CFMutableStringRef v101;
  const __CFString *v102;
  int v103;
  unsigned int v104;
  CFMutableStringRef v105;
  CFIndex v106;
  CFMutableStringRef v107;
  const __CFString *v108;
  char v109;
  int v110;
  int v111;
  NSObject *v112;
  CFStringRef v113;
  CFStringRef v114;
  const void *v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  unsigned int v120;
  int v121;
  NSObject *v122;
  os_log_type_t v123;
  const void *v124;
  int v125;
  int v126;
  const __CFString *v127;
  int v128;
  NSObject *v129;
  os_log_type_t v130;
  const __CFAllocator *v131;
  CFDictionaryRef v132;
  const __CFString *v133;
  CFTypeID v134;
  CFDictionaryRef v135;
  CFDictionaryRef v136;
  int v137;
  int v138;
  const __CFString *v139;
  int v140;
  NSObject *v141;
  os_log_type_t v142;
  CFMutableStringRef v143;
  int v144;
  char *v145;
  CFIndex v146;
  CFIndex v147;
  __CFString *v148;
  const __CFString *v149;
  __CFString *v150;
  int v151;
  CFMutableStringRef v152;
  __CFString *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  int field;
  _BOOL4 v158;
  uint64_t v159;
  __n128 v160;
  __n128 v161;
  __n128 v162;
  __int16 v163;
  size_t v164;
  char *v165;
  size_t v166;
  size_t v167;
  char *v168;
  size_t v169;
  size_t v170;
  CFDictionaryRef v171;
  CFDictionaryRef v172;
  CFTypeID v173;
  CFNumberRef v174;
  char v175;
  const __CFString *v176;
  const __CFString *v177;
  CFTypeID v178;
  const __CFString *v179;
  int v180;
  NSObject *v181;
  _BOOL4 v182;
  const __CFString *v183;
  const __CFString *v184;
  const __CFString *v185;
  uint64_t v186;
  const void *v187;
  CFTypeID v188;
  char v189;
  uint64_t v190;
  char v191;
  _DWORD *LiveIndex;
  const __CFString *v193;
  const __CFString *v194;
  int v195;
  NSObject *v196;
  const __CFString *v197;
  _DWORD *v198;
  int ParentDBO;
  int v200;
  NSObject *v201;
  os_log_type_t v202;
  int v203;
  NSObject *v204;
  os_log_type_t v205;
  uint64_t v206;
  int v207;
  int v208;
  unsigned int v209;
  unsigned int v210;
  int v211;
  int *v212;
  int v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  _BOOL4 v217;
  int v218;
  uint64_t v219;
  CFIndex Count;
  CFIndex v221;
  int64_t v222;
  _BYTE *v223;
  int v224;
  _DWORD *v225;
  int v226;
  const __CFBoolean *v227;
  const __CFBoolean *v228;
  CFTypeID v229;
  const __CFBoolean *v230;
  int v231;
  const void *v232;
  const void *v233;
  CFTypeID v234;
  CFDictionaryRef v235;
  CFDictionaryRef v236;
  char v237;
  int *v238;
  const void *v239;
  const void *v240;
  CFTypeID v241;
  __CFDictionary *v242;
  CFStringRef v243;
  CFStringRef v244;
  _BOOL4 v245;
  unsigned int *v246;
  int v247;
  uint64_t v248;
  _BOOL8 HasContent;
  const __CFAllocator *allocator;
  _BOOL4 v251;
  uint64_t v252;
  int *v253;
  int v254;
  unsigned int *v255;
  int v256;
  __n128 v257;
  int v258;
  _BOOL4 v259;
  char v260;
  uint64_t v261;
  int v262;
  const __CFDictionary *v263;
  const __CFDictionary *v264;
  _BOOL4 v265;
  unsigned int v266;
  uint64_t v267;
  CFAbsoluteTime v268;
  CFTypeID v269;
  double Current;
  int v271;
  const char *v272;
  CFTypeID v273;
  double v274;
  int v275;
  const char *v276;
  int v277;
  CFTypeID v278;
  CFTypeID v279;
  double v280;
  CFDateRef v281;
  uint64_t v282;
  int v283;
  double v284;
  _BOOL4 v285;
  int v286;
  const char *v287;
  char *v288;
  double v289;
  size_t v290;
  int *v291;
  int v292;
  int v293;
  NSObject *v294;
  os_log_type_t v295;
  unsigned int v296;
  __n128 v297;
  int v298;
  int v299;
  NSObject *v300;
  _BOOL4 v301;
  const char *v302;
  _BOOL4 v303;
  int v304;
  NSObject *v305;
  uint64_t v306;
  __CFDictionary *v307;
  int v308;
  _BYTE *v309;
  int v310;
  int v311;
  const void *v312;
  unsigned int *v313;
  const __CFDictionary *v314;
  const __CFArray *v315;
  const __CFArray *v316;
  const __CFArray *v317;
  const __CFArray *v318;
  const __CFArray *v319;
  const __CFArray *v320;
  const __CFArray *v321;
  const __CFArray *v322;
  CFIndex v323;
  CFIndex v324;
  const __CFArray *v325;
  CFIndex v326;
  CFIndex v327;
  CFIndex v328;
  CFIndex v329;
  CFIndex v330;
  const __CFArray *v331;
  CFIndex v332;
  const __CFArray *v333;
  CFIndex v334;
  CFIndex v335;
  const __CFAllocator *v336;
  const __CFDictionary *v337;
  const __CFArray *v338;
  const __CFArray *v339;
  CFTypeID v340;
  CFIndex v341;
  const __CFNumber *v342;
  char v343;
  uint64_t v344;
  const __CFArray *v345;
  CFNumberRef v346;
  int v347;
  char v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  void (*v352)(_QWORD);
  char v353;
  _DWORD *v354;
  CFDictionaryRef v355;
  unsigned int *v356;
  int v357;
  unsigned int v358;
  const __CFDictionary *v359;
  const __CFString *v360;
  const __CFArray *v361;
  const __CFArray *v362;
  CFTypeID v363;
  CFIndex v364;
  uint64_t v365;
  int v366;
  CFMutableStringRef v367;
  CFIndex v368;
  const __CFAllocator *v369;
  const __CFString *ValueAtIndex;
  CFIndex v371;
  CFMutableStringRef v372;
  const __CFDictionary *v373;
  unint64_t v374;
  unint64_t v375;
  CFTypeID v376;
  CFTypeID v377;
  unsigned __int8 *v378;
  int v379;
  unsigned __int8 v380;
  unsigned int v381;
  char v382;
  char *v383;
  char *v384;
  const char *v385;
  int v386;
  uint64_t v387;
  const void *v388;
  const void *v389;
  const void *v390;
  CFTypeID v391;
  const void *v392;
  CFTypeID v393;
  CFTypeID v394;
  const void *v395;
  int v396;
  const __CFDictionary *v397;
  const __CFArray *v398;
  const void *v399;
  const void *v400;
  CFTypeID v401;
  CFIndex v402;
  _QWORD *v403;
  uint64_t v404;
  CFTypeID v405;
  _BOOL8 v406;
  __CFArray *v407;
  CFIndex i;
  const void *v409;
  const void *v410;
  const void *v411;
  const void *v412;
  CFTypeID v413;
  CFTypeID v414;
  __CFArray *v415;
  uint64_t v416;
  CFIndex v417;
  const __CFSet *v418;
  const void *v419;
  int v420;
  BOOL v421;
  BOOL v422;
  const char *CStringPtr;
  uint64_t v424;
  uint64_t (*v425)(_QWORD, const char *, uint64_t, const char *);
  const __CFSet *v426;
  const void *v427;
  __CFArray *v428;
  const void *v429;
  CFTypeID v430;
  CFTypeID v431;
  int v432;
  NSObject *v433;
  const __CFString *v434;
  const __CFString *v435;
  CFTypeID v436;
  uint64_t v437;
  BOOL v438;
  int v439;
  uint64_t v440;
  const __CFString *v441;
  CFIndex v442;
  char v443;
  const __CFString *v444;
  int v445;
  NSObject *v446;
  char *v447;
  const char *v448;
  int v449;
  int v450;
  NSObject *v451;
  char *v452;
  char *v453;
  const char *v454;
  int v455;
  char *v456;
  const char *v457;
  int v458;
  NSObject *v459;
  int v460;
  NSObject *v461;
  BOOL v462;
  _BOOL4 v463;
  const __CFAllocator *v464;
  CFStringRef v465;
  CFStringRef v466;
  const __CFString *v467;
  unint64_t v468;
  int v469;
  int v470;
  int v471;
  int v472;
  uint64_t v473;
  int v474;
  uint64_t v475;
  int v476;
  NSObject *v477;
  CFComparisonResult v478;
  const __CFString *v479;
  const __CFString *v480;
  const __CFDictionary *v481;
  const void *v482;
  const void *v483;
  const void *v484;
  const __CFNumber *v485;
  const __CFNumber *v486;
  CFTypeID v487;
  uint64_t *v488;
  int v489;
  uint64_t v490;
  CFStringRef v491;
  CFComparisonResult v492;
  const __CFString *v493;
  uint64_t v494;
  int v495;
  NSObject *v496;
  char *v497;
  const char *v498;
  uint64_t v499;
  const __CFData *v500;
  const __CFData *v501;
  CFTypeID v502;
  CFTypeID v503;
  CFIndex v504;
  const UInt8 *BytePtr;
  CFStringRef v506;
  CFStringRef v507;
  CFStringRef v508;
  CFStringRef v509;
  int v510;
  NSObject *v511;
  int v512;
  NSObject *v513;
  int v514;
  NSObject *v515;
  const void *v516;
  const void *v517;
  CFTypeID v518;
  int v519;
  NSObject *v520;
  int v521;
  NSObject *v522;
  int v523;
  NSObject *v524;
  int v525;
  NSObject *v526;
  unint64_t v527[418];
  unsigned __int8 v528[656];
  char v529[8];
  uint64_t v530;
  _BOOL4 v531;
  CFMutableStringRef v532;
  CFMutableStringRef v533;
  CFIndex v534;
  const __CFArray *v535;
  const __CFArray *v536;
  size_t v537;
  CFMutableStringRef v538;
  const __CFString *v539;
  char *v540;
  CFAllocatorRef v541;
  CFAllocatorRef v542;
  char *v543;
  __CFString *v544;
  const __CFArray *v545;
  const __CFArray *v546;
  const __CFString *v547;
  CFIndex v548;
  int v549;
  CFIndex v550;
  CFIndex v551;
  CFArrayRef v552;
  const __CFArray *v553;
  CFIndex v554;
  __CFString *v555;
  CFIndex v556;
  CFTypeRef v557;
  CFIndex v558;
  const void *v559;
  CFIndex v560;
  CFIndex v561;
  CFIndex v562;
  CFIndex v563;
  CFTypeRef v564;
  CFMutableStringRef v565;
  uint64_t v566;
  const __CFString *MutableCopy;
  _BOOL4 v568;
  const void **v569;
  _BOOL4 v570;
  int v571;
  unsigned int v572;
  _BYTE *v573;
  const __CFString *v574;
  int v575;
  uint64_t v576;
  const void *v577;
  int v578;
  int v579;
  uint64_t v580;
  _BOOL4 v581;
  __CFDictionary *v582;
  int v583;
  int v584;
  int v585;
  CFStringRef v586;
  _BYTE *v587;
  const __CFAllocator *v588;
  unsigned int v589;
  unsigned int *v590;
  int v591;
  int *v592;
  __CFDictionary *v593;
  _BYTE *v594;
  unsigned int v595;
  unint64_t cs_orphan_oid;
  int v597;
  CFStringRef v598;
  _BOOL4 v599;
  _BYTE *v600;
  NSObject *v601;
  _BYTE *v602;
  int v603;
  _DWORD *v604;
  CFTypeID TypeID;
  _DWORD *v606;
  const __CFString *v607;
  unsigned int v608;
  unsigned int v609;
  int v610;
  int v611;
  int v612;
  CFDictionaryRef v613;
  CFDictionaryRef v614;
  unint64_t v615;
  _QWORD v616[2];
  void (*v617)(uint64_t, CFArrayRef, uint64_t);
  void *v618;
  _BYTE *v619;
  unint64_t *v620;
  _BYTE *v621;
  _DWORD **v622;
  uint64_t v623;
  const __CFArray *v624;
  char v625;
  _DWORD *v626[3];
  int v627;
  unint64_t v628[3];
  int v629;
  uint64_t v630;
  uint64_t v631;
  unsigned int v632;
  unsigned int v633;
  _BYTE v634[12];
  unsigned int v635;
  uint64_t v636;
  uint64_t v637;
  void (*v638)(uint64_t, const char *);
  void *v639;
  uint64_t *v640;
  const __CFAllocator *v641;
  __CFDictionary *v642;
  CFTypeID v643;
  CFMutableDictionaryRef v644;
  uint64_t v645;
  uint64_t v646;
  void (*v647)(uint64_t, uint64_t, unint64_t);
  void *v648;
  uint64_t *v649;
  const __CFAllocator *v650;
  CFTypeID v651;
  __CFDictionary *v652;
  uint64_t v653;
  uint64_t *v654;
  uint64_t v655;
  uint64_t v656;
  int v657;
  unint64_t v658;
  _DWORD *v659;
  unint64_t v660;
  unint64_t v661;
  uint64_t v662;
  char v663;
  _BYTE v664[56];
  _BYTE v665[18];
  _BYTE v666[38];
  __int16 v667;
  unsigned int v668;
  __int16 v669;
  unint64_t v670;
  __int16 v671;
  unint64_t v672;
  __int16 v673;
  int v674;
  _BYTE v675[2048];
  _BYTE v676[264];
  __int128 v677;
  __int128 v678;
  __int128 v679;
  __int128 v680;
  __int128 v681;
  __int128 v682;
  uint64_t v683;
  CFRange v684;
  CFRange v685;
  CFRange v686;

  v14 = MEMORY[0x1E0C80A78](a1);
  v683 = *MEMORY[0x1E0C80C00];
  v658 = v21;
  if (*(_BYTE *)(v14 + 1280))
  {
    v22 = *__error();
    v23 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v676 = 0;
      _os_log_impl(&dword_1B8270000, v23, OS_LOG_TYPE_DEFAULT, "processOneCS failed: index is read-only", v676, 2u);
    }
    *__error() = v22;
    return 0;
  }
  v25 = v20;
  v26 = v19;
  v27 = v18;
  v28 = v15;
  v559 = v16;
  v29 = a10;
  v657 = 0;
  v595 = v17 & 0x20000;
  v609 = v17;
  v608 = v17 & 0x80000;
  v30 = v14;
  v568 = (v17 & 0x80000) == 0;
  v570 = v20 != 0;
  TypeID = CFStringGetTypeID();
  v653 = 0;
  v654 = &v653;
  v655 = 0x2000000000;
  v656 = 0;
  v615 = v30;
  cs_orphan_oid = si_get_cs_orphan_oid(v30);
  v588 = v29;
  Mutable = CFDictionaryCreateMutable(v29, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v593 = Mutable;
  *(_OWORD *)v676 = *(_OWORD *)v27;
  *(_QWORD *)&v676[16] = *(_QWORD *)(v27 + 16);
  if (_MDPlistGetPlistObjectType() == 241)
  {
    v645 = MEMORY[0x1E0C809B0];
    v646 = 0x40000000;
    v647 = __processOneCS_block_invoke;
    v648 = &unk_1E6E2DDF0;
    v650 = v588;
    v649 = &v653;
    v651 = TypeID;
    v652 = Mutable;
    *(_OWORD *)v676 = *(_OWORD *)v27;
    *(_QWORD *)&v676[16] = *(_QWORD *)(v27 + 16);
    _MDPlistDictionaryIterate();
  }
  *(_OWORD *)v676 = *(_OWORD *)v26;
  *(_QWORD *)&v676[16] = *(_QWORD *)(v26 + 16);
  if (_MDPlistGetPlistObjectType() == 241)
  {
    v644 = CFDictionaryCreateMutable(v588, 0, MEMORY[0x1E0C9B390], 0);
    v636 = MEMORY[0x1E0C809B0];
    v637 = 0x40000000;
    v638 = __processOneCS_block_invoke_2;
    v639 = &unk_1E6E2DE18;
    v642 = Mutable;
    v643 = TypeID;
    v641 = v588;
    v640 = &v653;
    *(_OWORD *)v676 = *(_OWORD *)v26;
    *(_QWORD *)&v676[16] = *(_QWORD *)(v26 + 16);
    _MDPlistDictionaryIterate();
    v32 = v644;
  }
  else
  {
    v32 = 0;
  }
  v613 = v32;
  if (!v595)
  {
    v33 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberLongType, &a9);
    CFDictionarySetValue(Mutable, CFSTR("kMDItemPhysicalSize"), v33);
    CFRelease(v33);
  }
  Value = (const __CFString *)CFDictionaryGetValue(Mutable, CFSTR("kMDItemFileProviderID"));
  v35 = Value;
  v36 = CFDictionaryGetValue(Mutable, CFSTR("kMDItemFileItemID"));
  v37 = v36;
  v38 = CFDictionaryGetValue(Mutable, CFSTR("_kMDItemUserActivityRequiredString"));
  if (Value)
    v39 = v36 == 0;
  else
    v39 = 1;
  v40 = !v39;
  v589 = v595;
  if (!v38)
  {
    if (!v40 || CFDictionaryGetValue(Mutable, CFSTR("_kMDItemHasClientData")) != (const void *)*MEMORY[0x1E0C9AE50])
    {
      v45 = 0;
      v35 = v28;
      v46 = 0;
      v47 = 0;
      v48 = 0;
      v43 = v40;
      v49 = v40;
      v50 = v568;
      if (!v28)
        goto LABEL_35;
      goto LABEL_30;
    }
    v115 = CFDictionaryGetValue(Mutable, CFSTR("_kMDItemExternalID"));
    v50 = v568;
    if (v115)
      CFDictionarySetValue(Mutable, CFSTR("_kMDItemClientExternalID"), v115);
    if (v28)
      CFDictionarySetValue(Mutable, CFSTR("_kMDItemClientBundleID"), v28);
    if (sSICoreSpotlightCopyBundleRemapCallback)
    {
      v116 = sSICoreSpotlightCopyBundleRemapCallback(Value);
      CFDictionarySetValue(Mutable, CFSTR("_kMDItemExternalID"), v37);
      if (v116)
      {
        v35 = (const __CFString *)v116;
        v43 = 0;
        v45 = 1;
        v47 = v116;
        goto LABEL_30;
      }
    }
    else
    {
      CFDictionarySetValue(Mutable, CFSTR("_kMDItemExternalID"), v37);
    }
    v45 = 1;
    v47 = 0;
    v43 = 0;
    goto LABEL_30;
  }
  if (!v40)
  {
    v42 = 0;
LABEL_27:
    v44 = 0;
    v43 = 0;
    goto LABEL_28;
  }
  v41 = CFDictionaryGetValue(Mutable, CFSTR("kMDItemRelatedUniqueIdentifier"));
  if (CFDictionaryGetValue(Mutable, CFSTR("_kMDItemHasClientData")) == (const void *)*MEMORY[0x1E0C9AE50])
  {
    if (v41)
    {
      CFDictionarySetValue(Mutable, CFSTR("kMDItemRelatedUniqueIdentifier"), v37);
      if (sSICoreSpotlightCopyBundleRemapCallback)
        v44 = sSICoreSpotlightCopyBundleRemapCallback(Value);
      else
        v44 = 0;
      if (v44)
        v124 = (const void *)v44;
      else
        v124 = Value;
      if (!CFEqual(v124, v28))
        CFDictionarySetValue(Mutable, CFSTR("_kMDItemRelatedBundleID"), v124);
      v43 = 0;
      v42 = 1;
      goto LABEL_28;
    }
    v42 = 1;
    goto LABEL_27;
  }
  v42 = 0;
  v43 = 1;
  v44 = 0;
LABEL_28:
  v50 = v568;
  v45 = v42;
  if (!v28)
  {
    v54 = 0;
    v53 = (const void *)v44;
    v49 = v43;
    goto LABEL_32;
  }
  v35 = v28;
  v47 = v44;
LABEL_30:
  v49 = v43;
  v51 = v45;
  v52 = (const void *)v47;
  CFDictionarySetValue(Mutable, CFSTR("_kMDItemBundleID"), v35);
  v53 = v52;
  v45 = v51;
  v54 = v35;
LABEL_32:
  v55 = v45;
  if (v53)
    CFRelease(v53);
  v46 = v54;
  v48 = v55;
LABEL_35:
  v56 = v48;
  v597 = v49;
  v57 = v46;
  if (v559)
    CFDictionarySetValue(Mutable, CFSTR("_kMDItemPersonaID"), v559);
  v58 = v609;
  if (v25)
  {
    v59 = CFGetTypeID(v25);
    if (v59 == CFStringGetTypeID())
    {
      Length = CFStringGetLength(v25);
      CFDictionarySetValue(Mutable, CFSTR("kMDItemTextContent"), v25);
      v654[3] += Length;
      if (v57)
      {
        if (!CFDictionaryGetValue(Mutable, CFSTR("_kMDItemSnippet")))
        {
          if (CFStringHasPrefix(v57, CFSTR("com.apple.")))
          {
            v113 = SICreateStringByRemovingWhitespaceFromTextContent(v588, v25, 300);
            if (v113)
            {
              v114 = v113;
              CFDictionarySetValue(Mutable, CFSTR("_kMDItemSnippet"), v113);
              CFRelease(v114);
            }
          }
        }
      }
    }
  }
  if (!CFEqual(v57, CFSTR("com.apple.MobileSMS")))
  {
    v61 = 0;
LABEL_58:
    v62 = 0;
    goto LABEL_59;
  }
  v61 = CFDictionaryContainsKey(Mutable, CFSTR("com_apple_mobilesms_isHighlightedContent"))
     || CFDictionaryContainsKey(Mutable, CFSTR("kMDItemSyndicationStatus"))
     || CFDictionaryContainsKey(Mutable, CFSTR("com_apple_mobilesms_isChatAutoDonating"));
  if (!CFDictionaryContainsKey(Mutable, CFSTR("com_apple_mobilesms_groupPhotoPath"))
    && !CFDictionaryContainsKey(Mutable, CFSTR("com_apple_mobilesms_fromMe"))
    && !CFDictionaryContainsKey(Mutable, CFSTR("com_apple_mobilesms_highlightedContentServerDate"))
    && !CFDictionaryContainsKey(Mutable, CFSTR("com_apple_mobilesms_chatAutoDonatingServerDate"))
    && !CFDictionaryContainsKey(Mutable, CFSTR("com_apple_mobilesms_fromMe"))
    && !CFDictionaryContainsKey(Mutable, CFSTR("kMDItemDisplayName"))
    && !CFDictionaryContainsKey(Mutable, CFSTR("kMDItemAuthors"))
    && !CFDictionaryContainsKey(Mutable, CFSTR("kMDItemAuthorAddresses"))
    && !CFDictionaryContainsKey(Mutable, CFSTR("kMDItemRecipients"))
    && !CFDictionaryContainsKey(Mutable, CFSTR("kMDItemRecipientAddresses")))
  {
    goto LABEL_58;
  }
  v62 = 1;
LABEL_59:
  v599 = v61;
  v63 = v62;
  if (!CFDictionaryGetValue(Mutable, CFSTR("_kMDItemWillModify")) && ((v58 >> 17) & 1 & v58) == 0)
    CFDictionarySetValue(Mutable, CFSTR("_kMDItemWillModify"), (const void *)*MEMORY[0x1E0C9B0D0]);
  v614 = Mutable;
  v65 = a13;
  v64 = a14;
  v66 = a11;
  v607 = v57;
  v591 = v56;
  v585 = v63;
  if (!v589)
  {
    v67 = CFNumberCreate(v588, kCFNumberCFIndexType, v654 + 3);
    if (v67)
    {
      v68 = v67;
      CFDictionarySetValue(v614, CFSTR("_kMDItemStorageSize"), v67);
      CFRelease(v68);
    }
    goto LABEL_68;
  }
  v69 = CFDictionaryGetValue(v614, CFSTR("_kMDItemBundleID"));
  if (!v69
    || (v70 = v69, CFEqual(v69, CFSTR("com.apple.parsec.maps")))
    || CFEqual(v70, CFSTR("com.apple.parsec.itunes.iosSoftware")))
  {
LABEL_68:
    v71 = v50;
    v72 = v570;
    goto LABEL_69;
  }
  v72 = v570;
  if (CFEqual(v70, CFSTR("com.apple.parsec.stocks"))
    || CFEqual(v70, CFSTR("com.apple.parsec.sports"))
    || CFEqual(v70, CFSTR("com.apple.searchd"))
    || CFEqual(v70, CFSTR("com.apple.spotlight.category"))
    || CFEqual(v70, CFSTR("com.apple.spotlight.contacts")))
  {
    v71 = v50;
  }
  else if (CFDictionaryGetValue(v614, CFSTR("_kMDItemRenderDate"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemEngagementDate"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemRenderData"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemEngagementData"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemAppEngagementData"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemLaunchString"))
         || CFDictionaryGetValue(v614, CFSTR("kMDItemLastAppEngagementDate"))
         || CFDictionaryGetValue(v614, CFSTR("kMDItemLastAppSearchEngagementQuery"))
         || CFDictionaryGetValue(v614, CFSTR("kMDItemLastAppSearchEngagementRenderPosition"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemLastSpotlightEngagementQuery"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemLastSpotlightEngagementRenderPosition"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemRecentSpotlightEngagementDates"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemRecentSpotlightEngagementQueries"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemRecentSpotlightEngagementRenderPositions"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemRecentSpotlightEngagementDatesNonUnique"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemRecentSpotlightEngagementQueriesNonUnique"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemRecentSpotlightEngagementRenderPositionsNonUnique"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemRecentAppSearchEngagementDates"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemRecentAppSearchEngagementQueries"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemRecentAppSearchEngagementRenderPositions"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemLastOutOfSpotlightEngagementDate"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemRecentOutOfSpotlightEngagementDates"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemKnowledgeIndexVersion"))
         || CFDictionaryGetValue(v614, CFSTR("kMDItemKeyphraseVersion"))
         || CFDictionaryGetValue(v614, CFSTR("kMDItemEmbeddingVersion"))
         || CFDictionaryGetValue(v614, CFSTR("_kMDItemAppEntitySN"))
         || CFDictionaryGetValue(v614, CFSTR("kMDItemTextContentLanguage"))
         || (v71 = v50, CFDictionaryGetValue(v614, CFSTR("kMDItemPhotosMediaTypes"))))
  {
    v71 = 0;
  }
LABEL_69:
  v602 = v64;
  v594 = v65;
  v601 = a12;
  v603 = v66;
  v583 = *(_DWORD *)&v72 & (v58 >> 20);
  v73 = CFNumberCreate(v588, kCFNumberSInt64Type, &v658);
  CFDictionarySetValue(v614, CFSTR("_kMDItemSerialNumber"), v73);
  CFRelease(v73);
  do
  {
    v74 = __ldxr(exceptionSequenceNum);
    v75 = v74 + 1;
  }
  while (__stxr(v74 + 1, exceptionSequenceNum));
  v635 = 0;
  *(_QWORD *)&v634[4] = 0;
  *(_DWORD *)v634 = 0;
  v76 = v615;
  v77 = setThreadIdAndInfo(-1, (__int128 *)sSDBExceptionCallbacks, *(_QWORD *)(v615 + 1184), 0x40000000, v75);
  *(_DWORD *)&v634[8] = HIDWORD(v77);
  v635 = v77;
  *(_DWORD *)&v634[4] = v78;
  *(_DWORD *)v634 = v79;
  v80 = *(_QWORD *)&threadData[18 * v77 + 2];
  v81 = v80 + 320 * HIDWORD(v77);
  *(_BYTE *)(v81 + 216) = 0;
  v610 = *(_DWORD *)(v81 + 312);
  v82 = *(void (**)(_QWORD))(v81 + 224);
  if (v82)
    v82(*(_QWORD *)(v80 + 320 * HIDWORD(v77) + 288));
  v633 = v635;
  v632 = *(_DWORD *)&v634[8];
  v631 = *(_QWORD *)v634;
  if (_setjmp((int *)v81))
  {
    v83 = (_DWORD *)(v81 + 312);
    v84 = *__error();
    v85 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v676 = 136315394;
      *(_QWORD *)&v676[4] = "processOneCS";
      *(_WORD *)&v676[12] = 1024;
      *(_DWORD *)&v676[14] = 27194;
      _os_log_error_impl(&dword_1B8270000, v85, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", v676, 0x12u);
    }
    *__error() = v84;
    *v83 = v610;
    CIOnThreadCleanUpReset(v631);
    dropThreadId(v633, 1, v75);
    CICleanUpReset(v633, HIDWORD(v631));
    v86 = 0;
    v87 = v615;
    v88 = v614;
    goto LABEL_540;
  }
  v89 = (const __CFString *)CFDictionaryGetValue(v614, CFSTR("_kMDItemExternalID"));
  v612 = v66;
  v611 = v75;
  if (!v89)
  {
    v108 = 0;
    v109 = 1;
    v110 = 0;
    v91 = v609;
    goto LABEL_212;
  }
  v90 = v89;
  v91 = v609;
  if (CFGetTypeID(v89) == TypeID)
  {
    v630 = 0;
    v660 = 0;
    v659 = 0;
    v574 = v90;
    if ((v609 & 0x8000) == 0)
    {
      v92 = (const __CFString *)CFDictionaryGetValue(v614, CFSTR("kMDItemRelatedUniqueIdentifier"));
      if (!v92
        || (v93 = v92, v94 = CFGetTypeID(v92), v94 != CFStringGetTypeID())
        || !CFDictionaryContainsKey(v614, CFSTR("_MDItemDeletedWithRelatedUniqueIdentifier"))
        && !CFDictionaryContainsKey(v614, CFSTR("_kMDItemUserActivityRequiredString"))
        && !CFEqual(v607, CFSTR("com.apple.MobileSMS")))
      {
        v117 = 0;
        v120 = v609;
LABEL_207:
        if (v659)
          free(v659);
        if (v117)
        {
          v174 = CFNumberCreate(v588, kCFNumberSInt64Type, &v630);
          CFDictionaryAddValue(v614, CFSTR("kMDItemDocumentIdentifier"), v174);
          CFRelease(v174);
        }
        v110 = 0;
        v109 = 0;
        v108 = v574;
        v91 = v120;
        goto LABEL_212;
      }
      v573 = v65;
      v542 = (CFAllocatorRef)*MEMORY[0x1E0C9AE00];
      v95 = CFStringGetLength(v93);
      MutableCopy = CFStringCreateMutableCopy(v542, v95, v93);
      v96 = CFStringGetLength(v607);
      v532 = CFStringCreateMutableCopy(v542, v96, v607);
      v97 = CFStringGetLength(v574);
      v565 = CFStringCreateMutableCopy(v542, v97, v574);
      v564 = CFRetain(v532);
      v98 = 0;
      object_for_identifier_createParentDBO = si_get_object_for_identifier_createParentDBO(v76, v607, MutableCopy, 0, 0, &v660, &v659, 0);
      if (object_for_identifier_createParentDBO)
      {
        v100 = object_for_identifier_createParentDBO;
        v101 = v532;
        v102 = (const __CFString *)CFDictionaryGetValue(v614, CFSTR("_kMDItemRelatedBundleID"));
        if (v102)
        {
          v98 = v102;
          v103 = si_get_object_for_identifier_createParentDBO(v76, v102, MutableCopy, 0, 0, &v660, &v659, 0);
          v104 = v609;
          v65 = v573;
          v105 = v532;
          if (!v103)
          {
            if (dword_1EF19FC9C >= 5)
            {
              v510 = *__error();
              v511 = _SILogForLogForCategory(4);
              if (os_log_type_enabled(v511, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v676 = 138412802;
                *(_QWORD *)&v676[4] = v607;
                *(_WORD *)&v676[12] = 2112;
                *(_QWORD *)&v676[14] = MutableCopy;
                *(_WORD *)&v676[22] = 2112;
                *(_QWORD *)&v676[24] = v98;
                _os_log_impl(&dword_1B8270000, v511, OS_LOG_TYPE_DEFAULT, "Remapped related identifier for %@ to relatedIdent %@, bundleID:%@", v676, 0x20u);
              }
              *__error() = v510;
              v76 = v615;
              v65 = v573;
              v105 = v101;
            }
            CFRelease(v105);
            v106 = CFStringGetLength(v607);
            v107 = CFStringCreateMutableCopy(v542, v106, v607);
LABEL_144:
            v143 = v107;
            *(_QWORD *)v676 = 0;
            *(_QWORD *)v664 = 0;
            if (db_get_field(*(int **)(v76 + 1184), (uint64_t)v659, "kMDItemDocumentIdentifier", (unint64_t *)v676, v664)|| **(_WORD **)v676 != 7)
            {
              v630 = 0;
            }
            else
            {
              v630 = **(_QWORD **)v664;
              if (v630)
              {
                v144 = 1;
                goto LABEL_150;
              }
            }
            v144 = 0;
LABEL_150:
            if (v659)
            {
              v549 = v144;
              memset(v676, 0, 256);
              v663 = 0;
              v145 = "_kMDItemRelatedObjects";
              *(_QWORD *)v666 = 0;
              v555 = v143;
              if (v98)
              {
                v146 = CFStringGetLength(v607);
                v147 = CFStringGetLength(v574);
                v148 = CFStringCreateMutableCopy(v542, v146 + v147 + 1, v607);
                CFStringAppend(v148, CFSTR(":"));
                CFStringAppend(v148, v574);
                v149 = v148;
                v150 = v148;
                v145 = "_kMDItemRelatedObjectsWithBundle";
              }
              else
              {
                v150 = 0;
                v149 = v574;
              }
              v153 = v150;
              v154 = fasterUTF8String(v149, v666, v676, 256, &v663);
              v155 = *(_QWORD *)v666;
              if (!*(_QWORD *)v666)
              {
                v456 = __si_assert_copy_extra_521(-1);
                v384 = v456;
                v457 = "";
                if (v456)
                  v457 = v456;
                *(_QWORD *)v529 = "identifierCStrSize";
                v530 = (uint64_t)v457;
                v386 = 24260;
                goto LABEL_580;
              }
              v156 = v154;
              v537 = *(_QWORD *)v666;
              v628[0] = 0;
              v626[0] = 0;
              field = db_get_field(*(int **)(v76 + 1184), (uint64_t)v659, v145, v628, v626);
              v543 = v156;
              v544 = v153;
              v540 = v145;
              if (field)
                goto LABEL_159;
              v163 = *(_WORD *)(v628[0] + 2);
              if ((v163 & 0x90) == 0)
              {
                v164 = *(unsigned int *)(v628[0] + 8);
                v165 = (char *)v626[0];
                if ((v163 & 0x20) == 0)
                {
                  v166 = strnlen((const char *)v626[0], v164);
                  if (v166 + 1 < v164)
                    v167 = v166 + 1;
                  else
                    v167 = v164;
                  if (v155 == v167)
                  {
                    v158 = memcmp(v165, v543, v537) == 0;
                    goto LABEL_160;
                  }
LABEL_159:
                  v158 = 0;
LABEL_160:
                  v531 = v158;
                  v626[0] = 0;
                  v628[0] = 0;
                  v662 = 1;
                  v159 = v615;
                  if (!db_get_field(*(int **)(v615 + 1184), (uint64_t)v659, "_kMDItemRelatedActivityLaunchCount", v628, v626))v662 = *(_QWORD *)v626[0] + 1;
                  v160.n128_f64[0] = CFAbsoluteTimeGetCurrent();
                  v661 = v160.n128_u64[0];
                  db_add_field(*(int **)(v615 + 1184), &v659, 1u, "_kMDItemRelatedActivityLastLaunchDate", 0, 0x2100u, 12, (unsigned __int8 *)&v661, v160, 8);
                  db_add_field(*(int **)(v615 + 1184), &v659, 1u, "_kMDItemRelatedActivityLaunchCount", 0, 0x2100u, 8, (unsigned __int8 *)&v662, v161, 8);
                  if (!v531)
                  {
                    db_add_field(*(int **)(v615 + 1184), &v659, 2u, v540, 0, 0x2120u, 11, (unsigned __int8 *)v543, v162, v537);
                    if (dword_1EF19FC9C >= 5)
                    {
                      v495 = *__error();
                      v496 = _SILogForLogForCategory(4);
                      if (os_log_type_enabled(v496, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)v664 = 136315906;
                        *(_QWORD *)&v664[4] = "_kMDItemRelatedObjects";
                        *(_WORD *)&v664[12] = 2112;
                        *(_QWORD *)&v664[14] = MutableCopy;
                        *(_WORD *)&v664[22] = 2112;
                        *(_QWORD *)&v664[24] = v607;
                        *(_WORD *)&v664[32] = 2112;
                        *(_QWORD *)&v664[34] = v574;
                        _os_log_impl(&dword_1B8270000, v496, OS_LOG_TYPE_DEFAULT, "Updated \"%s\" field for relatedIdentifier:%@, bundleID:%@, identifier:%@", v664, 0x2Au);
                      }
                      *__error() = v495;
                      v159 = v615;
                      v65 = v573;
                    }
                  }
                  db_update_obj(*(int **)(v159 + 1184), (uint64_t)v659, 3);
                  v76 = v159;
                  v120 = v609;
                  v152 = v565;
                  v105 = v555;
                  if (v663)
                    free(v543);
                  if (v544)
                    CFRelease(v544);
                  v151 = v549;
LABEL_169:
                  if (sCSRelatedItemCallback)
                    sCSRelatedItemCallback(v76, v105, MutableCopy, v152, (v120 >> 14) & 2);
                  if (v564)
                    CFRelease(v564);
                  if (v105)
                    CFRelease(v105);
                  if (v152)
                    CFRelease(v152);
                  v117 = v151;
                  v127 = MutableCopy;
                  goto LABEL_205;
                }
                if (!(_DWORD)v164)
                  goto LABEL_159;
                v168 = (char *)v626[0] + v164;
                while (1)
                {
                  v169 = v168 - v165;
                  v170 = strnlen(v165, v168 - v165);
                  if (v170 + 1 < v168 - v165)
                    v169 = v170 + 1;
                  if (!v169)
                    break;
                  v158 = v155 == v169 && memcmp(v165, v543, v537) == 0;
                  if (!v158)
                  {
                    v165 += v169;
                    if (v165 < v168)
                      continue;
                  }
                  goto LABEL_160;
                }
                v447 = __si_assert_copy_extra_521(-1);
                v384 = v447;
                v448 = "";
                if (v447)
                  v448 = v447;
                *(_QWORD *)v529 = "size";
                v530 = (uint64_t)v448;
                v386 = 24281;
LABEL_580:
                __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", v386, *(const char **)v529, (const char *)v530);
                free(v384);
                if (__valid_fs(-1))
                  v387 = 2989;
                else
                  v387 = 3072;
                *(_DWORD *)v387 = -559038737;
                abort();
              }
              v497 = __si_assert_copy_extra_521(-1);
              v453 = v497;
              v498 = "";
              if (v497)
                v498 = v497;
              *(_QWORD *)v529 = "(fieldFlags & (DB_FIELD_UNIQUED_VALS|DB_FIELD_LOCALIZED_STR)) == 0";
              v530 = (uint64_t)v498;
              v455 = 24269;
            }
            else
            {
              v452 = __si_assert_copy_extra_521(-1);
              v453 = v452;
              v454 = "";
              if (v452)
                v454 = v452;
              *(_QWORD *)v529 = "dbop && *dbop";
              v530 = (uint64_t)v454;
              v455 = 24239;
            }
            __message_assert("%s:%u: failed assertion '%s' %s ", "SpotlightIndex.c", v455, *(const char **)v529, (const char *)v530);
            free(v453);
            if (__valid_fs(-1))
              v499 = 2989;
            else
              v499 = 3072;
            *(_DWORD *)v499 = -559038737;
            abort();
          }
        }
        else
        {
          v103 = v100;
          v104 = v609;
          v65 = v573;
          v105 = v532;
        }
        if (dword_1EF19FC9C >= 5)
        {
          v458 = *__error();
          v459 = _SILogForLogForCategory(4);
          if (os_log_type_enabled(v459, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v676 = 138413058;
            *(_QWORD *)&v676[4] = MutableCopy;
            *(_WORD *)&v676[12] = 2112;
            *(_QWORD *)&v676[14] = v532;
            *(_WORD *)&v676[22] = 1024;
            *(_DWORD *)&v676[24] = v103;
            *(_WORD *)&v676[28] = 2112;
            *(_QWORD *)&v676[30] = v574;
            _os_log_impl(&dword_1B8270000, v459, OS_LOG_TYPE_DEFAULT, "Failed to fetch the dbo for relatedIdentifier:%@, bundleID:%@, rc:%d (dropping %@)", v676, 0x26u);
          }
          *__error() = v458;
          v76 = v615;
          v104 = v609;
          v65 = v573;
          v105 = v101;
        }
        v120 = v104 | 0x8000;
        v151 = 0;
        v152 = v565;
        goto LABEL_169;
      }
      v107 = v532;
      v65 = v573;
      goto LABEL_144;
    }
    v117 = 0;
    v118 = si_get_object_for_identifier_createParentDBO(v76, v607, v90, 0, 0, &v660, &v659, 0);
    if (v118)
    {
      v119 = v118;
      v120 = v609;
      if (v118 != 2)
      {
        v121 = *__error();
        v122 = _SILogForLogForCategory(4);
        v123 = dword_1EF19FC9C < 3;
        if (os_log_type_enabled(v122, (os_log_type_t)(dword_1EF19FC9C < 3)))
        {
          *(_DWORD *)v676 = 138412802;
          *(_QWORD *)&v676[4] = v574;
          *(_WORD *)&v676[12] = 2112;
          *(_QWORD *)&v676[14] = v607;
          *(_WORD *)&v676[22] = 1024;
          *(_DWORD *)&v676[24] = v119;
          _os_log_impl(&dword_1B8270000, v122, v123, "*warn* Failed to fetch the dbo for identifier:%@, bundleID:%@, rc:%d", v676, 0x1Cu);
        }
        v117 = 0;
        *__error() = v121;
        v120 = v609;
      }
      goto LABEL_207;
    }
    *(_QWORD *)v664 = 0;
    v125 = db_get_field(*(int **)(v76 + 1184), (uint64_t)v659, "kMDItemRelatedUniqueIdentifier", (unint64_t *)v664, 0);
    if (v125)
    {
      v126 = v125;
      v127 = 0;
      if (v126 != 2)
      {
        v128 = *__error();
        v129 = _SILogForLogForCategory(4);
        v130 = dword_1EF19FC9C < 3;
        if (os_log_type_enabled(v129, (os_log_type_t)(dword_1EF19FC9C < 3)))
        {
          *(_DWORD *)v676 = 136315906;
          *(_QWORD *)&v676[4] = "kMDItemRelatedUniqueIdentifier";
          *(_WORD *)&v676[12] = 2112;
          *(_QWORD *)&v676[14] = v574;
          *(_WORD *)&v676[22] = 2112;
          *(_QWORD *)&v676[24] = v607;
          *(_WORD *)&v676[32] = 1024;
          *(_DWORD *)&v676[34] = v126;
          _os_log_impl(&dword_1B8270000, v129, v130, "*warn* Failed to find the db field \"%s\" for identifier:%@, bundleID:%@, rc:%d", v676, 0x26u);
        }
        *__error() = v128;
        v127 = 0;
      }
    }
    else
    {
      v131 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v132 = _decodeSDBField(*(_QWORD *)(v76 + 1184), *(unsigned __int16 **)v664, (unsigned __int8 *)(*(_QWORD *)v664 + 13), 0, 0, 0, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      if (v132)
      {
        v133 = (const __CFString *)v132;
        v134 = CFGetTypeID(v132);
        if (v134 == CFStringGetTypeID())
        {
          v135 = 0;
          if (!db_get_field(*(int **)(v76 + 1184), (uint64_t)v659, "_kMDItemRelatedBundleID", (unint64_t *)v664, 0))
          {
            v135 = 0;
            v171 = _decodeSDBField(*(_QWORD *)(v76 + 1184), *(unsigned __int16 **)v664, (unsigned __int8 *)(*(_QWORD *)v664 + 13), 0, 0, 0, 0, v131);
            if (v171)
            {
              v172 = v171;
              v173 = CFGetTypeID(v171);
              if (v173 == CFStringGetTypeID())
              {
                v135 = v172;
              }
              else
              {
                CFRelease(v172);
                v135 = 0;
              }
            }
          }
          v136 = v135;
          free(v659);
          v659 = 0;
          v660 = 0;
          v137 = si_get_object_for_identifier_createParentDBO(v76, v607, v133, 0, 0, &v660, &v659, 0);
          if (v137)
          {
            v138 = v137;
            if (v137 != 2)
            {
              v139 = v133;
              v140 = *__error();
              v141 = _SILogForLogForCategory(4);
              v142 = dword_1EF19FC9C < 3;
              if (os_log_type_enabled(v141, (os_log_type_t)(dword_1EF19FC9C < 3)))
              {
                *(_DWORD *)v676 = 138412802;
                *(_QWORD *)&v676[4] = v139;
                *(_WORD *)&v676[12] = 2112;
                *(_QWORD *)&v676[14] = v607;
                *(_WORD *)&v676[22] = 1024;
                *(_DWORD *)&v676[24] = v138;
                _os_log_impl(&dword_1B8270000, v141, v142, "*warn* Failed to fetch the dbo for relatedIdentifier:%@, bundleID:%@, rc:%d", v676, 0x1Cu);
              }
              *__error() = v140;
              v127 = v139;
              goto LABEL_204;
            }
          }
          else
          {
            if (dword_1EF19FC9C >= 5)
            {
              v514 = *__error();
              v515 = _SILogForLogForCategory(4);
              if (os_log_type_enabled(v515, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v676 = 138413058;
                *(_QWORD *)&v676[4] = v133;
                *(_WORD *)&v676[12] = 2112;
                *(_QWORD *)&v676[14] = v607;
                *(_WORD *)&v676[22] = 2112;
                *(_QWORD *)&v676[24] = v574;
                *(_WORD *)&v676[32] = 2048;
                *(_QWORD *)&v676[34] = v660;
                _os_log_impl(&dword_1B8270000, v515, OS_LOG_TYPE_DEFAULT, "Found the dbo for relatedIdentifier: %@, bundleID: %@, identifier: %@, oid: %lld", v676, 0x2Au);
              }
              *__error() = v514;
              v76 = v615;
            }
            si_removeRelatedItem(v76, (uint64_t *)&v659, v607, v574, (uint64_t)v136, (const char *)v133);
            if (v136)
              CFRelease(v136);
          }
        }
        v127 = v133;
      }
      else
      {
        v127 = 0;
      }
    }
LABEL_204:
    v117 = 0;
    v120 = v609;
LABEL_205:
    if (v127)
      CFRelease(v127);
    goto LABEL_207;
  }
  v111 = *__error();
  v112 = _SILogForLogForCategory(10);
  if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v676 = 136315650;
    *(_QWORD *)&v676[4] = "processOneCS";
    *(_WORD *)&v676[12] = 1024;
    *(_DWORD *)&v676[14] = 26114;
    *(_WORD *)&v676[18] = 2112;
    *(_QWORD *)&v676[20] = v614;
    _os_log_error_impl(&dword_1B8270000, v112, OS_LOG_TYPE_ERROR, "%s:%d: bad identifier %@", v676, 0x1Cu);
  }
  v108 = 0;
  *__error() = v111;
  v109 = 1;
  v110 = 1;
LABEL_212:
  v175 = v109;
  v176 = (const __CFString *)CFDictionaryGetValue(v614, CFSTR("FPParentFileItemID"));
  if (!v176)
  {
    v179 = 0;
    if ((v91 & 0x8000) == 0)
      goto LABEL_216;
LABEL_234:
    if ((v175 & 1) == 0)
    {
      v194 = v108;
      v195 = *__error();
      v196 = _SILogForLogForCategory(4);
      v87 = v615;
      v88 = v614;
      LODWORD(v108) = v612;
      v197 = v607;
      if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v676 = 138412546;
        *(_QWORD *)&v676[4] = v607;
        *(_WORD *)&v676[12] = 2112;
        *(_QWORD *)&v676[14] = v194;
        _os_log_impl(&dword_1B8270000, v196, OS_LOG_TYPE_DEFAULT, "SpotlightIndex#processOneCS Deleting item, bundleID:%@ identifier:%@", v676, 0x16u);
      }
      *__error() = v195;
      *(_QWORD *)v676 = 0;
      if (!si_get_object_for_identifier_createParentDBO(v87, v197, v194, 0, 0, (unint64_t *)v676, 0, 0))
      {
        _si_delete_attributes_inner(v87, *(unint64_t *)v676, (v609 >> 4) & 1, 0, v108, 0, v594);
        si_finish_text_store_deletions(v87);
      }
      v189 = 1;
      v190 = 0;
LABEL_254:
      v86 = 0;
      goto LABEL_533;
    }
    v189 = 1;
    v190 = 0;
LABEL_236:
    v86 = 0;
LABEL_237:
    v87 = v615;
LABEL_288:
    v88 = v614;
    LOBYTE(v108) = v612;
    goto LABEL_533;
  }
  v177 = v176;
  v178 = CFGetTypeID(v176);
  v179 = 0;
  if (TypeID == v178)
    v179 = v177;
  if ((v91 & 0x8000) != 0)
    goto LABEL_234;
LABEL_216:
  v586 = v179;
  v180 = *__error();
  v181 = _SILogForLogForCategory(4);
  v182 = os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT);
  if (v589)
  {
    if (v182)
    {
      *(_DWORD *)v676 = 138412546;
      *(_QWORD *)&v676[4] = v607;
      *(_WORD *)&v676[12] = 2112;
      *(_QWORD *)&v676[14] = v108;
      _os_log_impl(&dword_1B8270000, v181, OS_LOG_TYPE_DEFAULT, "SpotlightIndex#processOneCS Index update bundleID:%@ identifier:%@", v676, 0x16u);
    }
    *__error() = v180;
  }
  else
  {
    if (v182)
    {
      *(_DWORD *)v676 = 138412546;
      *(_QWORD *)&v676[4] = v607;
      *(_WORD *)&v676[12] = 2112;
      *(_QWORD *)&v676[14] = v108;
      _os_log_impl(&dword_1B8270000, v181, OS_LOG_TYPE_DEFAULT, "SpotlightIndex#processOneCS Index Add bundleID:%@ identifier:%@", v676, 0x16u);
    }
    *__error() = v180;
    if ((!v614 || !CFDictionaryGetValue(v614, CFSTR("kMDItemSupportFileType")))
      && !CFDictionaryGetValue(v614, CFSTR("kMDItemKind")))
    {
      v183 = (const __CFString *)CFDictionaryGetValue(v614, CFSTR("kMDItemContentType"));
      if (v183)
      {
        v184 = v183;
        if (CFGetTypeID(v183) == TypeID
          && CFStringGetLength(v184)
          && CFStringCompare(v184, CFSTR("public.item"), 1uLL)
          && !CFStringHasPrefix(v184, CFSTR("dyn")))
        {
          v185 = v108;
          v186 = CopyUTITypeDescriptionDictionary(v615, v184);
          if (v186)
            v187 = (const void *)v186;
          else
            v187 = (const void *)*MEMORY[0x1E0C9B0D0];
          v188 = CFDictionaryGetTypeID();
          if (v188 == CFGetTypeID(v187))
            CFDictionarySetValue(v614, CFSTR("kMDItemKind"), v187);
          CFRelease(v187);
          v108 = v185;
        }
      }
    }
  }
  if (v593)
    v191 = v110;
  else
    v191 = 1;
  if ((v191 & 1) == 0)
  {
    bzero(&v676[16], 0x3F0uLL);
    strcpy(v676, "processing item");
    _si_set_error_str(v676);
  }
  LiveIndex = si_getLiveIndex(*(_QWORD *)(v615 + 1384));
  if (!v110)
  {
    v198 = LiveIndex;
    v606 = LiveIndex;
    bzero(v675, 0x800uLL);
    v592 = *(int **)(v615 + 1184);
    v628[0] = 0;
    v626[0] = 0;
    ParentDBO = si_get_object_for_identifier_createParentDBO(v615, v607, v108, 0, v71, v628, v626, 0);
    v87 = v615;
    if ((v71 & 1) == 0)
    {
      if (v626[0])
      {
        if (BOOLValueForDBOProperty(v592, (uint64_t)v626[0]))
        {
          v200 = *__error();
          v201 = _SILogForLogForCategory(4);
          v202 = dword_1EF19FC9C < 3;
          if (os_log_type_enabled(v201, (os_log_type_t)(dword_1EF19FC9C < 3)))
          {
            *(_DWORD *)v676 = 138412546;
            *(_QWORD *)&v676[4] = v607;
            *(_WORD *)&v676[12] = 2112;
            *(_QWORD *)&v676[14] = v108;
            _os_log_impl(&dword_1B8270000, v201, v202, "*warn* update requires non-zombie item :%@ %@", v676, 0x16u);
          }
          *__error() = v200;
          free(v626[0]);
          v87 = v615;
          goto LABEL_287;
        }
      }
      else
      {
        v203 = *__error();
        v204 = _SILogForLogForCategory(4);
        v205 = dword_1EF19FC9C < 3;
        if (os_log_type_enabled(v204, (os_log_type_t)(dword_1EF19FC9C < 3)))
        {
          *(_DWORD *)v676 = 138412546;
          *(_QWORD *)&v676[4] = v607;
          *(_WORD *)&v676[12] = 2112;
          *(_QWORD *)&v676[14] = v108;
          _os_log_impl(&dword_1B8270000, v204, v205, "*warn* update requires existing item :%@ %@", v676, 0x16u);
        }
        *__error() = v203;
        v87 = v615;
      }
      if (!v626[0])
      {
LABEL_287:
        v190 = 0;
        v86 = 0;
        v189 = 0;
        goto LABEL_288;
      }
    }
    v598 = v108;
    v206 = v87;
    v207 = ParentDBO;
    v208 = ParentDBO;
    v209 = v595;
    v210 = v595 >> 17;
    v211 = v595 >> 17;
    si_indexDeleteDeferredItemsIfItemIncluded(v206, v628[0]);
    v212 = v592;
    if (!v208)
    {
      db_validate_obj(v592);
      v213 = CFEqual(v607, CFSTR("com.apple.MobileSMS"));
      if (v594
        && v213
        && ((v585 & 1) != 0 || changesExistingSyndicationAttributes(v615, (uint64_t)v626[0], v614))
        && (v599 || isSyndicatedContent(v615, (uint64_t)v626[0])))
      {
        *v594 = 1;
      }
      v211 = v209 >> 17;
      v214 = v597 ^ 1;
      if (v209)
        v214 = 1;
      if ((v214 & 1) == 0)
      {
        v211 = v209 >> 17;
        *(_QWORD *)v676 = 0;
        *(_QWORD *)v664 = 0;
        if (!db_get_field(v212, (uint64_t)v626[0], "_kMDItemHasClientData", (unint64_t *)v664, v676))
        {
          if (**(_BYTE **)v676)
            v211 = 1;
          else
            v211 = v210;
        }
      }
    }
    v604 = v198;
    if (!v626[0])
    {
      v217 = v586 != 0;
      v218 = v597 | v591;
      v216 = 0;
      goto LABEL_302;
    }
    v215 = *((_QWORD *)v626[0] + 3);
    v216 = v215;
    v217 = v586 != 0;
    v218 = v597 | v591;
    if ((v597 | v591) != 1 || !v586 || v208 || !v215)
      goto LABEL_302;
    if (CFStringHasSuffix(v586, CFSTR("NSFileProviderRootContainerItemIdentifier")))
    {
      v218 = 1;
      v216 = 2;
    }
    else
    {
      v219 = *((_QWORD *)v626[0] + 3);
      if (v219)
      {
        if (v219 == cs_orphan_oid)
        {
          v218 = 1;
          v217 = 1;
          v216 = 0;
          goto LABEL_302;
        }
        *(_QWORD *)v664 = 0;
        *(_QWORD *)v666 = 0;
        if (!db_get_field(v592, (uint64_t)v626[0], "FPParentFileItemID", (unint64_t *)v664, v666)
          && **(_WORD **)v664 == 11
          && (*(_WORD *)(*(_QWORD *)v664 + 2) & 0x10) == 0)
        {
          bzero(v676, 0x400uLL);
          if (CFStringGetCString(v586, v676, 1024, 0x8000100u))
          {
            if (!strcmp(v676, (const char *)(*(_QWORD *)v664 + 13)))
              v216 = v215;
            else
              v216 = 0;
          }
        }
      }
      v218 = 1;
    }
    v217 = 1;
LABEL_302:
    v580 = v216;
    v581 = v217;
    v579 = v218;
    if (v614)
      Count = CFDictionaryGetCount(v614);
    else
      Count = 0;
    v221 = Count + 29;
    v222 = 16 * (Count + 29 + Count + 4);
    if (v222 >= 2048)
      v223 = malloc_type_calloc(1uLL, v222, 0x4AD487B8uLL);
    else
      v223 = v675;
    v681 = 0u;
    v682 = 0u;
    v679 = 0u;
    v680 = 0u;
    v677 = 0u;
    v678 = 0u;
    memset(&v676[8], 0, 256);
    *(_QWORD *)v676 = 0xFFF0000000000000;
    if (v583)
      v224 = 4352;
    else
      v224 = 256;
    *(_DWORD *)&v676[24] = v224;
    v587 = v223;
    *(_QWORD *)&v676[120] = v223;
    v569 = (const void **)&v223[8 * v221];
    *(_QWORD *)&v676[128] = v569;
    *(_QWORD *)&v676[144] = Count + 29;
    *(_QWORD *)&v676[168] = &v569[v221];
    *(_QWORD *)&v676[176] = *(_QWORD *)&v676[168] + 8 * Count;
    *(_QWORD *)&v676[192] = Count + 4;
    DWORD2(v680) = -1;
    DWORD2(v681) = -1;
    if (v607 && CFEqual(v607, CFSTR("com.apple.mobilemail")))
      *(_DWORD *)&v676[24] |= 0x10000u;
    v225 = v604;
    v226 = v207;
    if (v614)
    {
      if (CFStringCompare(v607, CFSTR("com.apple.MobileAddressBook"), 0) == kCFCompareEqualTo
        || CFStringCompare(v607, CFSTR("com.apple.Music"), 0) == kCFCompareEqualTo)
      {
        *(_DWORD *)&v676[24] |= 0x400u;
      }
      CFDictionaryApplyFunction(v614, (CFDictionaryApplierFunction)preProcess, v676);
      postPreprocess((uint64_t)v676, v607);
      handleUserTags((uint64_t)v676);
      if ((v676[24] & 0x10) != 0 && *(_QWORD *)&v676[136])
        *(_DWORD *)&v676[24] &= ~0x10u;
    }
    v566 = gDefaultSchema;
    if (!v208 && !v211 && ((v597 ^ 1) & 1) == 0 && (v676[25] & 0x80) != 0 && *(_QWORD *)(v615 + 1704))
    {
      v227 = (const __CFBoolean *)CFDictionaryGetValue(v614, CFSTR("FPDownloaded"));
      if (v227)
      {
        v228 = v227;
        v229 = CFGetTypeID(v227);
        if (v229 == CFBooleanGetTypeID())
        {
          if (CFBooleanGetValue(v228))
          {
            *(_QWORD *)v664 = 0;
            *(_QWORD *)v666 = 0;
            if (!db_get_field(*(int **)(v615 + 1184), (uint64_t)v626[0], "FPDownloaded", (unint64_t *)v666, v664))
            {
              v230 = _decodeSDBField(*(_QWORD *)(v615 + 1184), *(unsigned __int16 **)v666, *(unsigned __int8 **)v664, 0, 0, 0, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
              v231 = CFBooleanGetValue(v230);
              if (v230)
                CFRelease(v230);
              if (!v231)
                goto LABEL_340;
            }
          }
        }
      }
      v232 = CFDictionaryGetValue(v614, CFSTR("kMDItemContentModificationDate"));
      if (!v232)
      {
LABEL_340:
        v226 = v207;
      }
      else
      {
        v233 = v232;
        v234 = CFGetTypeID(v232);
        v226 = v207;
        if (v234 == CFDateGetTypeID())
        {
          *(_QWORD *)v664 = 0;
          *(_QWORD *)v666 = 0;
          if (!db_get_field(*(int **)(v615 + 1184), (uint64_t)v626[0], "kMDItemContentModificationDate", (unint64_t *)v666, v664))
          {
            v235 = _decodeSDBField(*(_QWORD *)(v615 + 1184), *(unsigned __int16 **)v666, *(unsigned __int8 **)v664, 0, 0, 0, 0, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
            if (v235)
            {
              v236 = v235;
              if (CFEqual(v235, v233))
                v211 = 1;
              CFRelease(v236);
            }
          }
        }
      }
    }
    v584 = v211;
    if ((v211 & 1) != 0)
    {
      v237 = v597 ^ 1;
      if (v226)
        v237 = 1;
      v238 = v592;
      if ((v237 & 1) != 0)
      {
        if (v208)
        {
          v242 = 0;
          v245 = 0;
          v246 = v626[0];
          v247 = 0;
          v248 = 0;
          goto LABEL_367;
        }
      }
      else if ((v676[25] & 0x80) != 0)
      {
        CFDictionaryRemoveValue(v614, CFSTR("_kMDItemRequiresImport"));
        CFDictionaryRemoveValue(v614, CFSTR("_kMDItemImportSandboxExtension"));
        CFDictionaryRemoveValue(v614, CFSTR("_kMDItemImportHasSandboxExtension"));
      }
      HasContent = objectHasContent(v592, (uint64_t)v626[0]);
      if (HasContent)
      {
        MEMORY[0x1E0C80A78](HasContent);
        bzero(v527, 0x1000uLL);
        allocator = _SIStackAllocatorCreate(v527, 4096, indexingZone);
        v242 = decodeDBOToDictionary(v238, (uint64_t)v626[0], 0, 0x2000, 2, *(_DWORD *)(v615 + 2028), *(_DWORD *)(v615 + 2060), 0, 0, allocator);
        goto LABEL_357;
      }
    }
    else if ((v676[25] & 0x80) != 0)
    {
      v239 = CFDictionaryGetValue(v614, CFSTR("_kMDItemExternalID"));
      if (v239)
      {
        v240 = v239;
        v241 = CFGetTypeID(v239);
        if (v241 == CFStringGetTypeID())
        {
          v242 = 0;
          v243 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@:%@"), v240, v607);
          if (!v243)
            goto LABEL_357;
          v244 = v243;
          os_unfair_lock_lock((os_unfair_lock_t)(v615 + 1696));
          CFBagAddValue(*(CFMutableBagRef *)(v615 + 1704), v244);
          os_unfair_lock_unlock((os_unfair_lock_t)(v615 + 1696));
          CFRelease(v244);
        }
      }
    }
    v242 = 0;
LABEL_357:
    v247 = 0;
    v251 = v211 == 0;
    v246 = v626[0];
    if (v208 || !v626[0])
    {
      v245 = v211 == 0;
      v248 = 0;
    }
    else
    {
      v248 = 0;
      v252 = v615;
      *(_QWORD *)v664 = *(unsigned int *)(v615 + 2012);
      *(_QWORD *)v666 = 0;
      v662 = 0;
      v253 = v592;
      if (!db_get_field_by_id(v592, (uint64_t)v626[0], (int *)v664, (unint64_t *)v666, (unint64_t *)&v662))v248 = *(_QWORD *)v662;
      *(_DWORD *)v664 = *(_DWORD *)(v252 + 2008);
      if (db_get_field_by_id(v253, (uint64_t)v626[0], (int *)v664, (unint64_t *)v666, (unint64_t *)&v662))v254 = 0;
      else
        v254 = *(unsigned __int8 *)v662;
      v246 = v626[0];
      v245 = v251;
      v247 = v254;
    }
    v238 = v592;
LABEL_367:
    v576 = v248;
    v575 = v247;
    v582 = v242;
    v590 = v246;
    if (v246)
    {
      v255 = v246;
      v626[0] = db_copy_obj(v246, 1024);
      db_validate_obj(v238);
      free(v255);
      if (!v584)
      {
        v258 = db_delete_fields_with_flags(v238, (uint64_t)v626[0]);
        v259 = v258 == 0;
        if (v258 && dword_1EF19FCA8 >= 5)
        {
          v449 = v258;
          v450 = *__error();
          v451 = _SILogForLogForCategory(7);
          if (os_log_type_enabled(v451, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v664 = 67109120;
            *(_DWORD *)&v664[4] = v449;
            _os_log_impl(&dword_1B8270000, v451, OS_LOG_TYPE_DEFAULT, "Deleting importer fields failed, rc:%d", v664, 8u);
          }
          *__error() = v450;
          v225 = v604;
        }
        if (!*(_QWORD *)&v676[72])
          InsertPreProcessContextAddAttr((uint64_t)v676, CFSTR("_kMDItemTextContentIndexExists"), (CFTypeRef)*MEMORY[0x1E0C9AE40], 0);
        v256 = 0;
        v238 = v592;
LABEL_383:
        v571 = v256;
        if ((v676[24] & 8) != 0)
          v626[0][10] |= 2u;
        v261 = v566;
        if (*(_QWORD *)&v676[184])
        {
          setDatastoreLocalizedAttributes((uint64_t)v238, (int)v626, *(const void ***)&v676[168], *(uint64_t *)&v676[176], *(uint64_t *)&v676[184], v566, v613, v245, 0);
          db_validate_obj(v238);
          v259 = 1;
        }
        v600 = (char *)v225 + 15163;
        v572 = v91 | 0x200;
        v262 = v259;
        v263 = v614;
        if (*(_QWORD *)&v676[136])
        {
          v264 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *(const void ***)&v676[120], v569, *(CFIndex *)&v676[136], MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v265 = setDatastoreAttributes((uint64_t)v238, (uint64_t)v626, v264, v572, v261, (uint64_t)v613, v245, 0);
          if (v264)
            CFRelease(v264);
          v266 = v609;
          if (!v265)
            goto LABEL_450;
          v262 = 1;
        }
        v267 = *(_QWORD *)&v676[8];
        if (*(_QWORD *)&v676[8])
        {
          v268 = *(double *)v676;
        }
        else
        {
          if ((v676[25] & 8) == 0)
            goto LABEL_397;
          v268 = *(double *)v676;
          v267 = 0;
        }
        markItemAsUsedForField(v238, (uint64_t *)v626, "kMDItemLastUsedDate", "kMDItemUsedDates", v267, 1, 1, 0, v268);
        v262 = 1;
LABEL_397:
        if ((_QWORD)v680)
        {
          memset(v664, 0, 32);
          v269 = CFStringGetTypeID();
          if (v269 == CFGetTypeID((CFTypeRef)v680) && CFStringGetCString((CFStringRef)v680, v664, 32, 0x8000100u))
          {
            Current = CFAbsoluteTimeGetCurrent();
            v271 = DWORD2(v680);
            v272 = v664;
          }
          else
          {
            v272 = 0;
            v271 = 0;
            Current = 0.0;
          }
          updateItemRecentEngagementData(v238, (uint64_t *)v626, v272, v271, "_kMDItemRecentAppSearchEngagementQueries", "_kMDItemRecentAppSearchEngagementDates", "_kMDItemRecentAppSearchEngagementRenderPositions", 1, Current);
          v262 = 1;
        }
        if ((_QWORD)v681)
        {
          memset(v664, 0, 32);
          v273 = CFStringGetTypeID();
          if (v273 == CFGetTypeID((CFTypeRef)v681) && CFStringGetCString((CFStringRef)v681, v664, 32, 0x8000100u))
          {
            v274 = CFAbsoluteTimeGetCurrent();
            v275 = DWORD2(v681);
            v276 = v664;
          }
          else
          {
            v276 = 0;
            v275 = 0;
            v274 = 0.0;
          }
          updateItemRecentSpotlightEngagementData(v238, (uint64_t *)v626, v276, v275, v274);
          v262 = 1;
        }
        v277 = v262;
        if ((_QWORD)v682)
        {
          v278 = CFDateGetTypeID();
          v279 = CFGetTypeID((CFTypeRef)v682);
          v280 = 0.0;
          if (v278 == v279)
            v280 = MEMORY[0x1BCCAF690](v682, 0.0);
          updateItemRecentOutOfSpotlightEngagementData(v238, (uint64_t *)v626, v280);
          v277 = 1;
        }
        if ((_QWORD)v678)
        {
          v657 = markItemAsUsedForField(v238, (uint64_t *)v626, "_kMDItemInterestingDate", 0, v678, 0, 0, 0x2108u, 0.0);
          v281 = SICopyRoundedDate();
          markItemAsUsedForField(v238, (uint64_t *)v626, "kMDItemInterestingDate_Ranking", 0, (uint64_t)v281, 0, 0, 0x100u, 0.0);
          CFRelease(v281);
          v283 = 1;
        }
        else
        {
          v282 = *((_QWORD *)&v677 + 1);
          if (*((_QWORD *)&v677 + 1))
            v282 = CFNumberGetValue(*((CFNumberRef *)&v677 + 1), kCFNumberSInt32Type, &v657);
          v283 = v277;
        }
        v266 = v609;
        v284 = *(double *)&v676[240];
        v285 = *(double *)&v676[232] == 0.0;
        if (*(double *)&v676[240] != 0.0)
          v285 = 0;
        if (*(double *)&v676[248] != 0.0)
          v285 = 0;
        if (v590)
          v286 = v285;
        else
          v286 = 1;
        if ((v286 & 1) != 0)
        {
          v263 = v614;
          if (v283)
            goto LABEL_575;
LABEL_450:
          v304 = *__error();
          v305 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v305, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v664 = 136316930;
            *(_QWORD *)&v664[4] = "processOneCS";
            *(_WORD *)&v664[12] = 1024;
            *(_DWORD *)&v664[14] = 26763;
            *(_WORD *)&v664[18] = 2112;
            *(_QWORD *)&v664[20] = v607;
            *(_WORD *)&v664[28] = 2112;
            *(_QWORD *)&v664[30] = v598;
            *(_WORD *)&v664[38] = 2048;
            *(_QWORD *)&v664[40] = v658;
            *(_WORD *)&v664[48] = 1024;
            *(_DWORD *)&v664[50] = v572;
            *(_WORD *)&v664[54] = 2048;
            *(_QWORD *)v665 = v628[0];
            *(_WORD *)&v665[8] = 2048;
            *(_QWORD *)&v665[10] = v628[0];
            _os_log_error_impl(&dword_1B8270000, v305, OS_LOG_TYPE_ERROR, "%s:%d: No write back for bundleId:%@, identifier:%@ serial:%lld, options:0x%x, oid:0x%lld(%lld)", v664, 0x4Au);
          }
          *__error() = v304;
          v306 = v615;
          goto LABEL_453;
        }
        v287 = "_kMDItemEngagementData";
        if (*(double *)&v676[240] == 0.0)
        {
          v287 = "_kMDItemAppEngagementData";
          v284 = *(double *)&v676[248];
        }
        if (*(double *)&v676[232] == 0.0)
          v288 = (char *)v287;
        else
          v288 = "_kMDItemRenderData";
        if (*(double *)&v676[232] == 0.0)
          v289 = v284;
        else
          v289 = *(double *)&v676[232];
        *(_QWORD *)v666 = 0;
        v662 = 0;
        MEMORY[0x1E0C80A78](v282);
        bzero(v528, v290);
        v291 = v592;
        db_validate_obj(v592);
        if (!*(_QWORD *)v626[0])
        {
          v263 = v614;
          goto LABEL_449;
        }
        v292 = db_get_field(v291, (uint64_t)v626[0], v288, (unint64_t *)&v662, v666);
        if (v292)
        {
          v293 = *__error();
          v294 = _SILogForLogForCategory(4);
          v295 = 2 * (dword_1EF19FC9C < 4);
          if (os_log_type_enabled(v294, v295))
          {
            *(_WORD *)v664 = 0;
            _os_log_impl(&dword_1B8270000, v294, v295, "db didn't find any existing values", v664, 2u);
          }
          *__error() = v293;
          v296 = 0;
          v291 = v592;
        }
        else
        {
          v296 = *(_DWORD *)(v662 + 8);
        }
        LODWORD(v661) = 0;
        if ((markItemAsRenderedOrEngaged((uint64_t)v528, *(uint64_t *)v666, v296, &v661, v292 == 0, v289) & 1) != 0)
        {
          v298 = db_add_field(v291, v626, 1u, v288, 0, 0, 14, v528, v297, v661);
          v266 = v609;
          if (!v298)
          {
            v225 = v604;
            goto LABEL_575;
          }
          v299 = *__error();
          v300 = _SILogForLogForCategory(4);
          v301 = os_log_type_enabled(v300, OS_LOG_TYPE_ERROR);
          v263 = v614;
          if (!v301)
            goto LABEL_448;
          *(_DWORD *)v664 = 136315394;
          *(_QWORD *)&v664[4] = "processOneCS";
          *(_WORD *)&v664[12] = 1024;
          *(_DWORD *)&v664[14] = 26620;
          v302 = "%s:%d: db get field failed in counts code";
        }
        else
        {
          v299 = *__error();
          v300 = _SILogForLogForCategory(4);
          v303 = os_log_type_enabled(v300, OS_LOG_TYPE_ERROR);
          v263 = v614;
          v266 = v609;
          if (!v303)
          {
LABEL_448:
            *__error() = v299;
LABEL_449:
            v225 = v604;
            if ((v283 & 1) == 0)
              goto LABEL_450;
LABEL_575:
            v382 = atomic_load(v225 + 7);
            if ((v382 & 3) != 0 || *v600)
            {
              v383 = __si_assert_copy_extra_521(-1);
              v384 = v383;
              v385 = "";
              if (v383)
                v385 = v383;
              *(_QWORD *)v529 = "ContentIndexWritable(content_index)";
              v530 = (uint64_t)v385;
              v386 = 26630;
              goto LABEL_580;
            }
            if ((v676[24] & 0x40) == 0)
            {
              if (*(_QWORD *)&v676[72])
              {
                v434 = (const __CFString *)CFDictionaryGetValue(v614, CFSTR("kMDItemContentType"));
                if (v434)
                {
                  v435 = v434;
                  v436 = CFGetTypeID(v434);
                  if (TypeID == v436)
                  {
                    if (CFEqual(v435, CFSTR("public.plain-text"))
                      || CFEqual(v435, CFSTR("public.data"))
                      || CFStringHasPrefix(v435, CFSTR("dyn."))
                      || v614
                      && (v516 = CFDictionaryGetValue(v614, CFSTR("kMDItemContentTypeTree"))) != 0
                      && (v517 = v516, v518 = CFArrayGetTypeID(), v518 == CFGetTypeID(v517))
                      && (v684.length = CFArrayGetCount((CFArrayRef)v517),
                          v684.location = 0,
                          CFArrayContainsValue((CFArrayRef)v517, v684, CFSTR("public.plain-text"))))
                    {
                      *(_DWORD *)&v676[24] |= 0x40u;
                    }
                  }
                }
              }
            }
            if (v657 && dword_1EF19FC9C >= 5)
            {
              v521 = *__error();
              v522 = _SILogForLogForCategory(4);
              if (os_log_type_enabled(v522, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v664 = 67109120;
                *(_DWORD *)&v664[4] = v657;
                _os_log_impl(&dword_1B8270000, v522, OS_LOG_TYPE_DEFAULT, "date:%x", v664, 8u);
              }
              *__error() = v521;
            }
            v437 = *((_QWORD *)v626[0] + 3);
            if (v608)
              v438 = v580 == 0;
            else
              v438 = 1;
            v439 = v579;
            if (!v438)
              v439 = 1;
            if (v439 != 1)
              goto LABEL_766;
            v440 = v580;
            *((_QWORD *)v626[0] + 3) = v580;
            if (v440)
              goto LABEL_766;
            v441 = v598;
            v442 = CFStringGetLength(v598);
            if (CFStringHasPrefix(v441, CFSTR("__fpdefault/")))
            {
              v443 = !v581;
              if (v442 < 13)
                v443 = 1;
              if ((v443 & 1) != 0)
                goto LABEL_765;
              v444 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%s%@"), "__fpdefault/", v586);
            }
            else
            {
              v437 = -1;
              if (!CFStringHasPrefix(v598, CFSTR("__fp/")) || v442 < 6)
              {
LABEL_766:
                if (v584)
                  v469 = 1026;
                else
                  v469 = 1030;
                v470 = v469 | HIWORD(v608) | (2 * *(_DWORD *)&v676[24]) & 0x20 | (8 * *(_DWORD *)&v676[24]) & 0x40 | (2 * *(_DWORD *)&v676[24]) & 0x80 | (*(_DWORD *)&v676[24] >> 3) & 0x200;
                if (!v590)
                  v470 |= 0x800u;
                if (v571)
                  v470 |= 0x1000u;
                if (v286)
                  v470 |= 0x2000u;
                if (v603)
                  v471 = v470 | 0x4000;
                else
                  v471 = v470;
                if (CFEqual(v607, CFSTR("com.apple.mobilemail")) || CFEqual(v607, CFSTR("com.apple.pommesctl")))
                  v472 = v471 | 0x8000;
                else
                  v472 = v471;
                *(_OWORD *)&v664[40] = *(_OWORD *)&v676[80];
                *(_QWORD *)v664 = v614;
                *(_QWORD *)&v664[8] = *(_QWORD *)&v676[72];
                *(_QWORD *)&v664[32] = 0;
                *(_QWORD *)&v664[16] = *(_QWORD *)&v676[112];
                *(_QWORD *)&v664[24] = 0;
                *(_OWORD *)v665 = *(_OWORD *)&v676[96];
                v473 = si_writeBackAndIndexWithLiveQueryToggle(v615, (uint64_t)v606, (uint64_t)v664, (uint64_t)v582, v437, (uint64_t)v626, 0, v472 | 0x10000u, 0, 0, v576, v575, v657, SHIDWORD(v679), v601);
                if (!(_DWORD)v473)
                {
LABEL_788:
                  LODWORD(v662) = 0;
                  if (CFStringCompare(v607, CFSTR("com.apple.mobilemail"), 0) == kCFCompareEqualTo)
                  {
                    v481 = v614;
                    v482 = CFDictionaryGetValue(v614, CFSTR("com_apple_mail_read"));
                    v483 = CFDictionaryGetValue(v481, CFSTR("com_apple_mail_flagged"));
                    v484 = CFDictionaryGetValue(v481, CFSTR("com_apple_mail_flagColor"));
                    v485 = (const __CFNumber *)CFDictionaryGetValue(v481, CFSTR("com_apple_mail_transaction"));
                    if (v485)
                    {
                      v486 = v485;
                      v487 = CFNumberGetTypeID();
                      if (v487 == CFGetTypeID(v486))
                        CFNumberGetValue(v486, kCFNumberSInt32Type, &v662);
                    }
                    v488 = (uint64_t *)v626[0];
                    if (!v482 && v582 && v626[0])
                    {
                      *(_QWORD *)v664 = 0;
                      *(_QWORD *)v666 = 0;
                      v489 = db_get_field(v592, (uint64_t)v626[0], "com_apple_mail_read", (unint64_t *)v666, v664);
                      v490 = 0;
                      if (!v489)
                      {
                        if (*(_DWORD *)(*(_QWORD *)v666 + 8) == 1)
                        {
                          if (**(_BYTE **)v664)
                            v490 = *MEMORY[0x1E0C9AE50];
                          else
                            v490 = 0;
                        }
                        else
                        {
                          v490 = 0;
                        }
                      }
                      v494 = v490;
                      v488 = (uint64_t *)v626[0];
                    }
                    else
                    {
                      v494 = (uint64_t)v482;
                    }
                    SIActivityJournalMailCSItem(v615 + 2192, v598, *v488, v662, v658, (v609 >> 4) & 1, v584, v494, (uint64_t)v483, v484);
                    goto LABEL_835;
                  }
                  v478 = CFStringCompare(v607, CFSTR("com.apple.searchd"), 0);
                  v479 = v598;
                  if (v478)
                  {
LABEL_790:
                    v480 = v479;
                    SIActivityJournalCSItem(v615 + 2192, v479, *(_QWORD *)v626[0], v662, v658, (v609 >> 4) & 1, v584);
                    if (v480 != v598)
                      CFRelease(v480);
LABEL_835:
                    db_validate_obj(v592);
                    v308 = 1;
                    v263 = v614;
                    v309 = v587;
                    v307 = v582;
LABEL_454:
                    v310 = v308;
                    v311 = v584;
                    if (v626[0])
                      free(v626[0]);
                    cleanupPreProcContext(v676);
                    if (v307)
                      CFRelease(v307);
                    if (v675 != v309)
                      free(v309);
                    v312 = CFDictionaryGetValue(v263, CFSTR("_kMDItemBundleID"));
                    v313 = v590;
                    if (!v311 || !CFEqual(CFSTR("com.apple.MobileAddressBook"), v312))
                      goto LABEL_524;
                    v577 = v312;
                    v578 = v310;
                    v314 = v614;
                    v539 = (const __CFString *)CFDictionaryGetValue(v614, CFSTR("_kMDItemExternalID"));
                    v315 = (const __CFArray *)CFDictionaryGetValue(v314, CFSTR("_kMDItemIncomingCounts"));
                    v552 = (CFArrayRef)CFDictionaryGetValue(v314, CFSTR("_kMDItemOutgoingCounts"));
                    v316 = (const __CFArray *)CFDictionaryGetValue(v314, CFSTR("_kMDItemIncomingMailCounts"));
                    v317 = (const __CFArray *)CFDictionaryGetValue(v314, CFSTR("_kMDItemOutgoingMailCounts"));
                    v318 = (const __CFArray *)CFDictionaryGetValue(v314, CFSTR("_kMDItemIncomingSMSCounts"));
                    v319 = (const __CFArray *)CFDictionaryGetValue(v314, CFSTR("_kMDItemOutgoingSMSCounts"));
                    v320 = (const __CFArray *)CFDictionaryGetValue(v314, CFSTR("_kMDItemIncomingCalendarCounts"));
                    v321 = (const __CFArray *)CFDictionaryGetValue(v314, CFSTR("_kMDItemOutgoingCalendarCounts"));
                    v535 = (const __CFArray *)CFDictionaryGetValue(v314, CFSTR("_kMDItemIncomingFileProviderCounts"));
                    v322 = (const __CFArray *)CFDictionaryGetValue(v314, CFSTR("_kMDItemOutgoingFileProviderCounts"));
                    v553 = v315;
                    v536 = v322;
                    v323 = v315 ? CFArrayGetCount(v315) : 0;
                    v563 = v323;
                    v312 = v577;
                    v313 = v590;
                    v324 = v552 ? CFArrayGetCount(v552) : 0;
                    v562 = v324;
                    v325 = v317;
                    v326 = v316 ? CFArrayGetCount(v316) : 0;
                    v310 = v578;
                    v561 = v326;
                    v327 = v325 ? CFArrayGetCount(v325) : 0;
                    v560 = v327;
                    v328 = v318 ? CFArrayGetCount(v318) : 0;
                    v558 = v328;
                    v329 = v319 ? CFArrayGetCount(v319) : 0;
                    v556 = v329;
                    v546 = v316;
                    v330 = v320 ? CFArrayGetCount(v320) : 0;
                    v554 = v330;
                    v331 = v535;
                    v545 = v325;
                    v332 = v321 ? CFArrayGetCount(v321) : 0;
                    v551 = v332;
                    v333 = v536;
                    v334 = v331 ? CFArrayGetCount(v331) : 0;
                    v550 = v334;
                    v547 = v539;
                    v335 = v333 ? CFArrayGetCount(v333) : 0;
                    if (!v547 || !v563 && !v562 && !v561 && !v560 && !v558 && !v556 && !v554 && !v551 && !v550 && !v335)
                    {
LABEL_524:
                      if (v313)
                        goto LABEL_525;
                      if (CFEqual(CFSTR("com.apple.MobileAddressBook"), v312))
                      {
                        v359 = v614;
                        v360 = (const __CFString *)CFDictionaryGetValue(v614, CFSTR("_kMDItemExternalID"));
                        v361 = (const __CFArray *)CFDictionaryGetValue(v359, CFSTR("kMDItemEmailAddresses"));
                        if (v361)
                        {
                          v362 = v361;
                          v363 = CFGetTypeID(v361);
                          if (v363 == CFArrayGetTypeID())
                          {
                            v364 = CFArrayGetCount(v362);
                            if (v364)
                            {
                              if (v360)
                              {
                                v365 = v364;
                                v366 = v310;
                                v367 = safeCFStringCopy(v360);
                                os_unfair_lock_lock((os_unfair_lock_t)&sEmailAddressMappingLock);
                                if (!sKnownEmailAdresses)
                                  sKnownEmailAdresses = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                                if (v365 >= 1)
                                {
                                  v368 = 0;
                                  v369 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                                  do
                                  {
                                    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v362, v368);
                                    v371 = CFStringGetLength(ValueAtIndex);
                                    v372 = CFStringCreateMutableCopy(v369, v371, ValueAtIndex);
                                    CFDictionarySetValue((CFMutableDictionaryRef)sKnownEmailAdresses, v372, v367);
                                    CFRelease(v372);
                                    ++v368;
                                  }
                                  while (v365 != v368);
                                }
                                os_unfair_lock_unlock((os_unfair_lock_t)&sEmailAddressMappingLock);
                                CFRelease(v367);
                                v310 = v366;
                              }
                            }
                          }
                        }
                        goto LABEL_525;
                      }
                      v577 = v312;
                      v373 = v614;
                      v374 = (unint64_t)CFDictionaryGetValue(v614, CFSTR("kMDItemAuthorContactIdentifiers"));
                      v375 = (unint64_t)CFDictionaryGetValue(v373, CFSTR("kMDItemRecipientContactIdentifiers"));
                      if (v374)
                      {
                        v376 = CFArrayGetTypeID();
                        if (v376 != CFGetTypeID((CFTypeRef)v374))
                          v374 = 0;
                      }
                      if (v375)
                      {
                        v377 = CFArrayGetTypeID();
                        if (v377 != CFGetTypeID((CFTypeRef)v375))
                          v375 = 0;
                      }
                      else
                      {
                        v375 = 0;
                      }
                      v388 = v577;
                      if (v374 | v375)
                      {
                        v389 = CFDictionaryGetValue(v373, CFSTR("kMDItemContentCreationDate"));
                        if (v389)
                        {
                          v390 = v389;
                          v391 = CFDateGetTypeID();
                          v39 = v391 == CFGetTypeID(v390);
                          v388 = v577;
                          if (v39)
                            updatedRelatedPersons(v615, (const __CFArray *)v374, (const __CFArray *)v375, (uint64_t)v390, v577);
                        }
                      }
                      if (dword_1EF19FC9C >= 5)
                      {
                        v460 = *__error();
                        v461 = _SILogForLogForCategory(4);
                        if (os_log_type_enabled(v461, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)v676 = 138412546;
                          *(_QWORD *)&v676[4] = sSIMeEmailAddresses;
                          *(_WORD *)&v676[12] = 2112;
                          *(_QWORD *)&v676[14] = v374;
                          _os_log_impl(&dword_1B8270000, v461, OS_LOG_TYPE_DEFAULT, "~~~ sSIMeEmailAddresses: %@, authorPersons: %@", v676, 0x16u);
                        }
                        *__error() = v460;
                        v388 = v577;
                        if (v374)
                          goto LABEL_525;
                      }
                      else if (v374)
                      {
                        goto LABEL_525;
                      }
                      if (!sSIMeEmailAddresses)
                        goto LABEL_525;
                      v392 = CFDictionaryGetValue(v614, CFSTR("kMDItemAuthorEmailAddresses"));
                      if (CFEqual(CFSTR("com.apple.mobilecal"), v388))
                      {
                        if (!v392)
                          goto LABEL_525;
                        v393 = CFGetTypeID(v392);
                        if (v393 != CFArrayGetTypeID())
                          goto LABEL_525;
                      }
                      else
                      {
                        if (!v392)
                          goto LABEL_525;
                        v394 = CFGetTypeID(v392);
                        if (v394 != CFArrayGetTypeID() || CFArrayGetCount((CFArrayRef)v392) != 1)
                          goto LABEL_525;
                      }
                      v578 = v310;
                      v395 = CFArrayGetValueAtIndex((CFArrayRef)v392, 0);
                      os_unfair_lock_lock(&sSIMeEmailAddressesLock);
                      v396 = CFSetContainsValue((CFSetRef)sSIMeEmailAddresses, v395);
                      os_unfair_lock_unlock(&sSIMeEmailAddressesLock);
                      v397 = v614;
                      v398 = (const __CFArray *)CFDictionaryGetValue(v614, CFSTR("kMDItemPrimaryRecipientEmailAddresses"));
                      v399 = CFDictionaryGetValue(v397, CFSTR("kMDItemAdditionalRecipientEmailAddresses"));
                      v400 = CFDictionaryGetValue(v397, CFSTR("kMDItemContentCreationDate"));
                      if (!v400)
                        v400 = CFDictionaryGetValue(v397, CFSTR("kMDItemStartDate"));
                      v557 = v400;
                      if (v398 && (v401 = CFGetTypeID(v398), v401 == CFArrayGetTypeID()))
                        v402 = CFArrayGetCount(v398);
                      else
                        v402 = 0;
                      v406 = v399
                          && (v405 = CFGetTypeID(v399), v405 == CFArrayGetTypeID())
                          && CFArrayGetCount((CFArrayRef)v399) != 0;
                      if (v396)
                      {
                        v310 = v578;
                        if (v406 + v402 && v557)
                        {
                          v407 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v406 + v402, MEMORY[0x1E0C9B378]);
                          os_unfair_lock_lock((os_unfair_lock_t)&sEmailAddressMappingLock);
                          if (sKnownEmailAdresses)
                          {
                            if (v402 >= 1)
                            {
                              for (i = 0; i != v402; ++i)
                              {
                                v409 = CFArrayGetValueAtIndex(v398, i);
                                v410 = CFDictionaryGetValue((CFDictionaryRef)sKnownEmailAdresses, v409);
                                if (v410)
                                  CFArrayAppendValue(v407, v410);
                              }
                            }
                            if (v406)
                            {
                              v411 = CFArrayGetValueAtIndex((CFArrayRef)v399, 0);
                              v412 = CFDictionaryGetValue((CFDictionaryRef)sKnownEmailAdresses, v411);
                              if (v412)
                                CFArrayAppendValue(v407, v412);
                            }
                          }
                          os_unfair_lock_unlock((os_unfair_lock_t)&sEmailAddressMappingLock);
                          if (v407)
                          {
                            v413 = CFGetTypeID(v407);
                            if (v413 == CFArrayGetTypeID())
                            {
                              if (CFArrayGetCount(v407))
                              {
                                v414 = CFDateGetTypeID();
                                if (v414 == CFGetTypeID(v557))
                                {
                                  if (dword_1EF19FC9C >= 5)
                                  {
                                    v519 = *__error();
                                    v520 = _SILogForLogForCategory(4);
                                    if (os_log_type_enabled(v520, OS_LOG_TYPE_DEFAULT))
                                    {
                                      *(_DWORD *)v676 = 138412290;
                                      *(_QWORD *)&v676[4] = v407;
                                      _os_log_impl(&dword_1B8270000, v520, OS_LOG_TYPE_DEFAULT, "~~~ authorIsMe, recipients: %@", v676, 0xCu);
                                    }
                                    *__error() = v519;
                                  }
                                  updatedRelatedPersons(v615, 0, v407, (uint64_t)v557, v577);
                                }
                              }
                            }
                          }
                          v415 = v407;
LABEL_634:
                          CFRelease(v415);
LABEL_699:
                          v310 = v578;
                        }
LABEL_525:
                        if (v604)
                          v347 = v310;
                        else
                          v347 = 0;
                        if (v347 == 1)
                        {
                          v348 = atomic_load(v604 + 7);
                          if ((v348 & 2) == 0 && !*v600 && v600[1229])
                          {
                            v87 = v615;
                            v378 = (unsigned __int8 *)(v615 + 1448);
                            LOBYTE(v108) = v612;
                            do
                              v379 = __ldaxr(v378);
                            while (__stlxr(v379 | 2, v378));
                            v88 = v614;
                            if (v379)
                            {
                              v380 = atomic_load(v378);
                              if ((v380 & 2) != 0)
                              {
                                v381 = atomic_load((unsigned int *)(v87 + 1452));
                                v86 = v381 == 0;
                                v189 = 1;
                                v190 = (uint64_t)v606;
                                goto LABEL_533;
                              }
                            }
                            else
                            {
                              if (dword_1EF19FC9C >= 5)
                              {
                                v512 = *__error();
                                v513 = _SILogForLogForCategory(4);
                                if (os_log_type_enabled(v513, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(_WORD *)v676 = 0;
                                  _os_log_impl(&dword_1B8270000, v513, OS_LOG_TYPE_DEFAULT, "Schedule index flush", v676, 2u);
                                }
                                *__error() = v512;
                                v87 = v615;
                                v88 = v614;
                                LOBYTE(v108) = v612;
                              }
                              v403 = malloc_type_calloc(1uLL, 0x60uLL, 0x10B0040E0DE4348uLL);
                              v404 = (uint64_t)v606;
                              *v403 = v87;
                              v403[1] = v404;
                              LODWORD(v404) = *(_DWORD *)(v404 + 48);
                              *((_DWORD *)v403 + 4) = 2;
                              *((_DWORD *)v403 + 5) = v404;
                              si_indexDeleteDeferredItems(v87);
                              v403[5] = copyHoldQueue(*v403);
                              v403[11] = si_scheduler_suspend_async(*(_QWORD *)(v87 + 872));
                              if (!v403[9] && !*((_DWORD *)v403 + 12))
                              {
                                v424 = *(_QWORD *)(v87 + 2360);
                                if (v424)
                                {
                                  v425 = *(uint64_t (**)(_QWORD, const char *, uint64_t, const char *))(v424 + 64);
                                  if (v425)
                                    *((_DWORD *)v403 + 12) = v425(*(_QWORD *)(v424 + 136), "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/index/SpotlightIndex/SpotlightIndex.c", 27173, "_Bool processOneCS(SIRef, int64_t, oid_t, CFStringRef, CFStringRef, int, MDPlistObject, MDPlistObject, CFStringRef, size_t, CFAllocatorRef, _Bool, dispatch_group_t, _Bool *, Boolean *)");
                                }
                              }
                              si_enqueue_work(*(_QWORD *)(v87 + 1040), (uint64_t)_flushCache, (uint64_t)v403);
                            }
                            v189 = 1;
                            v190 = (uint64_t)v606;
                            goto LABEL_254;
                          }
                        }
                        v87 = v615;
                        LOBYTE(v108) = v612;
                        if (dword_1EF19FC9C < 5)
                        {
                          v190 = (uint64_t)v606;
                          v189 = v310;
                          v86 = 0;
                          v88 = v614;
                          goto LABEL_533;
                        }
                        v445 = *__error();
                        v446 = _SILogForLogForCategory(4);
                        if (os_log_type_enabled(v446, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)v676 = 0;
                          _os_log_impl(&dword_1B8270000, v446, OS_LOG_TYPE_DEFAULT, "Flush not required", v676, 2u);
                        }
                        *__error() = v445;
                        v190 = (uint64_t)v606;
                        v189 = v310;
                        goto LABEL_236;
                      }
                      v310 = v578;
                      if (!(v402 + v406) || !v557)
                        goto LABEL_525;
                      os_unfair_lock_lock(&sSIMeEmailAddressesLock);
                      if (v402 < 1)
                      {
                        if (!v406)
                          goto LABEL_698;
                      }
                      else
                      {
                        v416 = 1;
                        do
                        {
                          v417 = v416;
                          v418 = (const __CFSet *)sSIMeEmailAddresses;
                          v419 = CFArrayGetValueAtIndex(v398, v416 - 1);
                          v420 = CFSetContainsValue(v418, v419);
                          v416 = v417 + 1;
                          if (v420)
                            v421 = 0;
                          else
                            v421 = v417 < v402;
                        }
                        while (v421);
                        if (v420)
                          v422 = 1;
                        else
                          v422 = !v406;
                        if (v422)
                        {
LABEL_687:
                          if (v420 && sKnownEmailAdresses)
                          {
                            v428 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1, MEMORY[0x1E0C9B378]);
                            v429 = CFDictionaryGetValue((CFDictionaryRef)sKnownEmailAdresses, v395);
                            os_unfair_lock_unlock(&sSIMeEmailAddressesLock);
                            if (v429)
                              CFArrayAppendValue(v428, v429);
                            if (v428)
                            {
                              v430 = CFGetTypeID(v428);
                              if (v430 == CFArrayGetTypeID())
                              {
                                if (CFArrayGetCount(v428))
                                {
                                  v431 = CFDateGetTypeID();
                                  if (v431 == CFGetTypeID(v557))
                                  {
                                    if (dword_1EF19FC9C >= 5)
                                    {
                                      v523 = *__error();
                                      v524 = _SILogForLogForCategory(4);
                                      if (os_log_type_enabled(v524, OS_LOG_TYPE_DEFAULT))
                                      {
                                        *(_DWORD *)v676 = 138412290;
                                        *(_QWORD *)&v676[4] = v428;
                                        _os_log_impl(&dword_1B8270000, v524, OS_LOG_TYPE_DEFAULT, "~~~ !authorIsMe, authorContacts: %@", v676, 0xCu);
                                      }
                                      *__error() = v523;
                                    }
                                    updatedRelatedPersons(v615, v428, 0, (uint64_t)v557, v577);
                                  }
                                }
                              }
                            }
                            v415 = v428;
                            goto LABEL_634;
                          }
LABEL_698:
                          os_unfair_lock_unlock(&sSIMeEmailAddressesLock);
                          goto LABEL_699;
                        }
                      }
                      v426 = (const __CFSet *)sSIMeEmailAddresses;
                      v427 = CFArrayGetValueAtIndex((CFArrayRef)v399, 0);
                      v420 = CFSetContainsValue(v426, v427);
                      goto LABEL_687;
                    }
                    v548 = v335;
                    *(_QWORD *)v664 = 0;
                    *(_QWORD *)&v664[8] = v664;
                    *(_QWORD *)&v664[16] = 0x2000000000;
                    *(_QWORD *)&v664[24] = 0;
                    v336 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                    *(_QWORD *)&v664[24] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
                    initCountsArray_block_invoke(*(CFMutableArrayRef *)(*(_QWORD *)&v664[8] + 24), 1);
                    *(_QWORD *)v666 = 0;
                    *(_QWORD *)&v666[8] = v666;
                    *(_QWORD *)&v666[16] = 0x2000000000;
                    *(_QWORD *)&v666[24] = 0;
                    v628[0] = 0;
                    v628[1] = (unint64_t)v628;
                    v628[2] = 0x2000000000;
                    v629 = 0;
                    os_unfair_lock_lock((os_unfair_lock_t)&sContactCountsLock);
                    v337 = (const __CFDictionary *)sKnownContactCounts;
                    if (!sKnownContactCounts)
                    {
                      v337 = CFDictionaryCreateMutable(v336, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
                      sKnownContactCounts = (uint64_t)v337;
                    }
                    v541 = v336;
                    v338 = (const __CFArray *)CFDictionaryGetValue(v337, v547);
                    v339 = v338;
                    if (v338 && (v340 = CFGetTypeID(v338), v340 == CFArrayGetTypeID()))
                    {
                      v341 = CFArrayGetCount(v339);
                      v662 = 0;
                      if (v341 >= 1)
                      {
                        v342 = (const __CFNumber *)CFArrayGetValueAtIndex(v339, 0);
                        CFNumberGetValue(v342, kCFNumberSInt64Type, &v662);
                        v343 = 1;
                        v344 = v662;
LABEL_511:
                        v345 = v553;
                        v534 = 0;
                        v626[0] = 0;
                        v626[1] = v626;
                        v626[2] = (_DWORD *)0x2000000000;
                        v627 = 1;
                        v616[0] = MEMORY[0x1E0C809B0];
                        v616[1] = 0x40000000;
                        v617 = __processOneCS_block_invoke_1133;
                        v618 = &unk_1E6E2DE40;
                        v619 = v666;
                        v620 = v628;
                        v625 = v343;
                        v621 = v664;
                        v622 = v626;
                        v623 = v344;
                        v624 = v339;
                        v533 = safeCFStringCopy(v547);
                        v538 = v533;
                        v617((uint64_t)v616, v345, v563);
                        v617((uint64_t)v616, v552, v562);
                        v617((uint64_t)v616, v546, v561);
                        v617((uint64_t)v616, v545, v560);
                        v617((uint64_t)v616, v318, v558);
                        v617((uint64_t)v616, v319, v556);
                        v617((uint64_t)v616, v320, v554);
                        v617((uint64_t)v616, v321, v551);
                        v617((uint64_t)v616, v331, v550);
                        v617((uint64_t)v616, v333, v548);
                        v346 = CFNumberCreate(v541, kCFNumberSInt64Type, (const void *)(*(_QWORD *)&v666[8] + 24));
                        CFArraySetValueAtIndex(*(CFMutableArrayRef *)(*(_QWORD *)&v664[8] + 24), v534, v346);
                        CFRelease(v346);
                        CFDictionarySetValue((CFMutableDictionaryRef)sKnownContactCounts, v533, *(const void **)(*(_QWORD *)&v664[8] + 24));
                        os_unfair_lock_unlock((os_unfair_lock_t)&sContactCountsLock);
                        if (((v563 | 4) != 4
                           || (v562 | 4) != 4
                           || (v561 | 4) != 4
                           || (v560 | 4) != 4
                           || (v558 | 4) != 4
                           || (v556 | 4) != 4
                           || (v554 | 4) != 4
                           || (v551 | 4) != 4
                           || (v550 | 4) != 4
                           || (v548 | 4) != 4)
                          && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
                        {
                          CStringPtr = CFStringGetCStringPtr(v547, 0x8000100u);
                          *(_DWORD *)v676 = 136317698;
                          *(_QWORD *)&v676[4] = CStringPtr;
                          *(_WORD *)&v676[12] = 2048;
                          *(_QWORD *)&v676[14] = v563;
                          *(_WORD *)&v676[22] = 2048;
                          *(_QWORD *)&v676[24] = v562;
                          *(_WORD *)&v676[32] = 2048;
                          *(_QWORD *)&v676[34] = v561;
                          *(_WORD *)&v676[42] = 2048;
                          *(_QWORD *)&v676[44] = v560;
                          *(_WORD *)&v676[52] = 2048;
                          *(_QWORD *)&v676[54] = v558;
                          *(_WORD *)&v676[62] = 2048;
                          *(_QWORD *)&v676[64] = v556;
                          *(_WORD *)&v676[72] = 2048;
                          *(_QWORD *)&v676[74] = v554;
                          *(_WORD *)&v676[82] = 2048;
                          *(_QWORD *)&v676[84] = v551;
                          *(_WORD *)&v676[92] = 2048;
                          *(_QWORD *)&v676[94] = v550;
                          *(_WORD *)&v676[102] = 2048;
                          *(_QWORD *)&v676[104] = v548;
                          _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "incoming or outgoing counts size mismatch: identifier=%s incomingArraySize=%lld outgoingArraySize=%lld incomingMailArraySize=%lld outgoingMailArraySize=%lld incomingSMSArraySize=%lld outgoingSMSArraySize=%lld incomingCalendarArraySize=%lld outgoingCalendarArraySize=%lld incomingFileProviderArraySize=%lld outgoingFileProviderArraySize=%lld", v676, 0x70u);
                        }
                        CFRelease(v538);
                        CFRelease(*(CFTypeRef *)(*(_QWORD *)&v664[8] + 24));
                        _Block_object_dispose(v626, 8);
                        _Block_object_dispose(v628, 8);
                        _Block_object_dispose(v666, 8);
                        _Block_object_dispose(v664, 8);
                        v310 = v578;
                        v312 = v577;
                        goto LABEL_524;
                      }
                      v344 = 0;
                    }
                    else
                    {
                      v344 = 0;
                      v662 = 0;
                    }
                    v343 = 0;
                    goto LABEL_511;
                  }
                  if (CFStringCompare(v598, CFSTR("com.apple.mobilemail"), 0))
                  {
                    v491 = v598;
                    v492 = CFStringCompare(v598, CFSTR("com.apple.searchstressattr"), 0);
                    v479 = v491;
                    if (v492)
                      goto LABEL_790;
                    v493 = CFSTR("_kMDItemStateInfo_com.apple.searchstressattr.state.test");
                  }
                  else
                  {
                    v493 = CFSTR("_kMDItemStateInfo_com.apple.mobilemail.contentIndex");
                  }
                  v500 = (const __CFData *)CFDictionaryGetValue(v614, v493);
                  v479 = v598;
                  if (v500)
                  {
                    v501 = v500;
                    v502 = CFGetTypeID(v500);
                    v503 = CFDataGetTypeID();
                    v479 = v598;
                    if (v502 == v503)
                    {
                      v504 = CFDataGetLength(v501);
                      BytePtr = CFDataGetBytePtr(v501);
                      v479 = v598;
                      if (v504)
                      {
                        v479 = v598;
                        if (BytePtr)
                        {
                          v506 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], BytePtr, v504, 0x8000100u, 0);
                          v479 = v598;
                          if (v506)
                          {
                            v507 = v506;
                            v508 = v598;
                            v509 = CFStringCreateWithFormat(0, 0, CFSTR("%@ %@"), v598, v506);
                            if (v509)
                              v508 = v509;
                            CFRelease(v507);
                            v479 = v508;
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_790;
                }
                v474 = v473;
                v475 = v473;
                v476 = *__error();
                v477 = _SILogForLogForCategory(0);
                if (os_log_type_enabled(v477, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)v666 = 136316930;
                  *(_QWORD *)&v666[4] = "processOneCS";
                  *(_WORD *)&v666[12] = 1024;
                  *(_DWORD *)&v666[14] = 26746;
                  *(_WORD *)&v666[18] = 2112;
                  *(_QWORD *)&v666[20] = v607;
                  *(_WORD *)&v666[28] = 2048;
                  *(_QWORD *)&v666[30] = v658;
                  v667 = 1024;
                  v668 = v572;
                  v669 = 2048;
                  v670 = v628[0];
                  v671 = 2048;
                  v672 = v628[0];
                  v673 = 1024;
                  v674 = v475;
                  _os_log_error_impl(&dword_1B8270000, v477, OS_LOG_TYPE_ERROR, "%s:%d: Failed to update the index for bundleId:%@, serial:%lld, options:0x%x, oid:0x%lld(%lld), updateErr:%d", v666, 0x46u);
                }
                *__error() = v476;
                if (v474 != 2 && v474 != 22)
                {
                  if (v474 == 89)
                  {
                    *v602 = 1;
                    goto LABEL_788;
                  }
                  si_makeUnavailable(v615, v475, 2, 17, (uint64_t)"set attributes err");
                }
                v306 = v615;
                v263 = v614;
                v266 = v609;
LABEL_453:
                v307 = v582;
                _SIActivityJournalAdd(v306 + 2192, 15, *(_QWORD *)v626[0], 0, v658, (v266 >> 4) & 1);
                v308 = 0;
                v309 = v587;
                goto LABEL_454;
              }
              v444 = 0;
              *(_QWORD *)&v664[8] = 0;
              *(_QWORD *)v664 = 0;
              v685.length = v442 - 5;
              v685.location = 5;
              if (CFStringFindWithOptions(v598, CFSTR("/"), v685, 0, (CFRange *)v664))
                v462 = *(_QWORD *)v664 == -1;
              else
                v462 = 1;
              v463 = v581;
              if (v462)
                v463 = 0;
              if (v463)
              {
                v444 = 0;
                v686.length = *(_QWORD *)v664 + 1;
                *(_QWORD *)&v664[8] = *(_QWORD *)v664 + 1;
                *(_QWORD *)v664 = 0;
                v464 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
                v686.location = 0;
                v465 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v598, v686);
                if (v465)
                {
                  v466 = v465;
                  v444 = CFStringCreateWithFormat(v464, 0, CFSTR("%@%@"), v465, v586);
                  CFRelease(v466);
                }
              }
            }
            if (v444)
            {
              *(_QWORD *)v666 = 0;
              if (CFStringCompare(v444, v598, 0))
                v467 = v444;
              else
                v467 = v586;
              if (!si_get_object_for_identifier_createParentDBO(v615, v607, v467, 0, 0, (unint64_t *)v666, 0, 1u))
              {
                if (gSILogLevels[0] >= 5)
                {
                  v525 = *__error();
                  v526 = _SILogForLogForCategory(0);
                  if (os_log_type_enabled(v526, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)v664 = 134218498;
                    *(_QWORD *)&v664[4] = *(_QWORD *)v666;
                    *(_WORD *)&v664[12] = 2112;
                    *(_QWORD *)&v664[14] = v467;
                    *(_WORD *)&v664[22] = 2112;
                    *(_QWORD *)&v664[24] = v598;
                    _os_log_impl(&dword_1B8270000, v526, OS_LOG_TYPE_DEFAULT, "found parent oid: %lld (%@) for %@", v664, 0x20u);
                  }
                  *__error() = v525;
                }
                v468 = *(_QWORD *)v666;
                *((_QWORD *)v626[0] + 3) = *(_QWORD *)v666;
                si_indexDeleteDeferredItemsIfItemIncluded(v615, v468);
              }
              CFRelease(v444);
            }
LABEL_765:
            v437 = -1;
            goto LABEL_766;
          }
          *(_DWORD *)v664 = 136315394;
          *(_QWORD *)&v664[4] = "processOneCS";
          *(_WORD *)&v664[12] = 1024;
          *(_DWORD *)&v664[14] = 26612;
          v302 = "%s:%d: marking item as rendered/engaged failed";
        }
        _os_log_error_impl(&dword_1B8270000, v300, OS_LOG_TYPE_ERROR, v302, v664, 0x12u);
        goto LABEL_448;
      }
      v256 = candidateForReimport(v615, (uint64_t *)v626);
    }
    else
    {
      v626[0] = db_create_obj((uint64_t)v238, 1024, 0);
      *(_QWORD *)v626[0] = v628[0];
      if (*(_QWORD *)&v676[16])
      {
        *(_QWORD *)v664 = 0;
        v257.n128_f64[0] = MEMORY[0x1BCCAF690]();
        *(_QWORD *)v664 = v257.n128_u64[0];
        db_add_field(v238, v626, 1u, "kMDItemExpirationDate", 0, 0, 12, v664, v257, 8);
        v256 = 0;
      }
      else
      {
        v256 = v584;
      }
      v260 = !v599;
      if (!v65)
        v260 = 1;
      if ((v260 & 1) == 0)
        *v594 = 1;
    }
    v259 = 0;
    goto LABEL_383;
  }
  v193 = v108;
  v88 = v614;
  LOBYTE(v108) = v612;
  if (dword_1EF19FC9C >= 5)
  {
    v190 = (uint64_t)LiveIndex;
    v432 = *__error();
    v433 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v433, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v676 = 138412546;
      *(_QWORD *)&v676[4] = v607;
      *(_WORD *)&v676[12] = 2112;
      *(_QWORD *)&v676[14] = v193;
      _os_log_impl(&dword_1B8270000, v433, OS_LOG_TYPE_DEFAULT, "isDummy :%@ %@", v676, 0x16u);
    }
    *__error() = v432;
    v86 = 0;
    v189 = 0;
    goto LABEL_237;
  }
  v190 = (uint64_t)LiveIndex;
  v86 = 0;
  v189 = 0;
  v87 = v615;
LABEL_533:
  v349 = *(_QWORD *)&threadData[18 * v633 + 2];
  v350 = v632;
  v351 = v349 + 320 * v632;
  *(_DWORD *)(v351 + 312) = v610;
  v352 = *(void (**)(_QWORD))(v351 + 232);
  if (v352)
    v352(*(_QWORD *)(v349 + 320 * v350 + 288));
  dropThreadId(v633, 0, v611);
  if (v190)
    v353 = v189;
  else
    v353 = 1;
  if ((v353 & 1) == 0)
  {
    v354 = si_getLiveIndex(*(_QWORD *)(v87 + 1384));
    _CIUpdateContent((uint64_t)v354, 0, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, (*(_DWORD *)(v87 + 6584) >> 19) & 3, (uint64_t (*)(uint64_t))lowDiskSpaceCallback, v87, 0, 0,
      *(_QWORD *)(v87 + 2464),
      v108,
      0);
  }
LABEL_540:
  v355 = v613;
  v356 = (unsigned int *)(v87 + 1484);
  v357 = *(_DWORD *)(v87 + 1484);
  while (1)
  {
    v358 = __ldxr(v356);
    if (v358 != v357)
      break;
    if (!__stxr(0, v356))
    {
      if (!v355)
        goto LABEL_545;
      goto LABEL_544;
    }
  }
  __clrex();
  if (v355)
LABEL_544:
    CFRelease(v355);
LABEL_545:
  if (v88)
    CFRelease(v88);
  _si_set_error_str(0);
  _Block_object_dispose(&v653, 8);
  return v86;
}

unint64_t si_get_cs_orphan_oid(unint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  _QWORD *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  void *v8;
  unint64_t v9;

  v9 = 0;
  if (result)
  {
    v1 = result;
    if (*(_BYTE *)(result + 2072))
    {
      v2 = (unint64_t *)(result + 2080);
      result = atomic_load((unint64_t *)(result + 2080));
      v9 = result;
      if (!result)
      {
        v8 = 0;
        si_get_object_for_identifier_createParentDBO(v1, CFSTR("com.apple.searchd"), CFSTR("com.apple.spotlight.missingparent"), 0, 1, &v9, &v8, 1u);
        v3 = v8;
        if (v8)
        {
          v4 = *((_DWORD *)v8 + 10);
          if ((v4 & 1) == 0)
            *((_DWORD *)v8 + 10) = v4 | 1;
          if (v3[3] != 2)
          {
            v3[3] = 2;
            db_update_obj(*(int **)(v1 + 1184), (uint64_t)v3, 0);
            v3 = v8;
          }
          free(v3);
        }
        v5 = v9;
        while (1)
        {
          v6 = __ldaxr(v2);
          if (v6)
            break;
          if (!__stlxr(v5, v2))
          {
            v7 = 1;
            goto LABEL_16;
          }
        }
        v7 = 0;
        __clrex();
LABEL_16:
        if (v7)
          return v9;
        else
          return v6;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void _si_set_error_str(const char *a1)
{
  void *v2;
  char *v3;
  pthread_key_t v4;

  if (a1)
  {
    _si_set_rebuild_reason(a1, 0);
    if (__si_error_str_key)
    {
      v2 = pthread_getspecific(__si_error_str_key);
    }
    else
    {
      pthread_key_create((pthread_key_t *)&__si_error_str_key, (void (__cdecl *)(void *))MEMORY[0x1E0C834A8]);
      v2 = 0;
    }
    v4 = __si_error_str_key;
    v3 = strdup(a1);
  }
  else
  {
    if (!__si_error_str_key)
      return;
    v2 = pthread_getspecific(__si_error_str_key);
    v3 = 0;
    v4 = __si_error_str_key;
  }
  if (pthread_setspecific(v4, v3) != -1)
    free(v2);
}

void si_indexDeleteDeferredItemsIfItemIncluded(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 288);
  if (v3 && RLEOIDArrayContainsOid(v3, a2))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 280));
    v5 = *(_QWORD *)(a1 + 288);
    if (v5)
    {
      if (RLEOIDArrayContainsOid(v5, a2))
      {
        si_indexDeleteByOid(a1, *(_QWORD *)(a1 + 288));
        __dmb(0xBu);
        v6 = *(_QWORD *)(a1 + 288);
        *(_QWORD *)(a1 + 288) = 0;
        *(_QWORD *)(a1 + 296) = v6;
        RLEOIDArrayClear(v6);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 280));
  }
}

void postPreprocess(uint64_t a1, CFTypeRef cf1)
{
  const void *v4;
  uint64_t v5;
  const __CFArray *v6;
  const __CFArray *v7;
  const __CFArray *v8;
  const void *v9;
  const void **v10;
  CFTypeID TypeID;
  const void *v12;
  CFNumberRef v13;
  const __CFString *v14;
  _QWORD v15[5];
  CFIndex valuePtr;
  CFIndex *p_valuePtr;
  uint64_t v18;
  CFMutableArrayRef Mutable;

  if (postPreprocess_onceToken != -1)
    dispatch_once(&postPreprocess_onceToken, &__block_literal_global_1336);
  if ((*(_DWORD *)(a1 + 24) & 0x6100) == 0x4000)
    InsertPreProcessContextAddAttr(a1, CFSTR("_kMDItemSupportFileType"), (CFTypeRef)postPreprocess_arrSystemFile, 1);
  v4 = *(const void **)(a1 + 200);
  v5 = *(_QWORD *)(a1 + 208);
  if (v4)
  {
    if (!v5)
    {
      InsertPreProcessContextAddAttr(a1, CFSTR("kMDItemPrimaryRecipientEmailAddresses"), v4, 1);
      generateLocalPartsWithNewFieldName(a1, CFSTR("_kMDItemPrimaryRecipientEmailAddressesLocalParts"), *(const __CFString **)(a1 + 200));
    }
  }
  else if (v5 || *(_QWORD *)(a1 + 216) || *(_QWORD *)(a1 + 224))
  {
    valuePtr = 0;
    p_valuePtr = &valuePtr;
    v18 = 0x2000000000;
    Mutable = 0;
    Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 0x40000000;
    v15[2] = __postPreprocess_block_invoke_2;
    v15[3] = &unk_1E6E2DF48;
    v15[4] = &valuePtr;
    v6 = *(const __CFArray **)(a1 + 208);
    if (v6)
      __postPreprocess_block_invoke_2((uint64_t)v15, v6);
    v7 = *(const __CFArray **)(a1 + 216);
    if (v7)
      __postPreprocess_block_invoke_2((uint64_t)v15, v7);
    v8 = *(const __CFArray **)(a1 + 224);
    if (v8)
      __postPreprocess_block_invoke_2((uint64_t)v15, v8);
    if (CFArrayGetCount((CFArrayRef)p_valuePtr[3]))
    {
      InsertPreProcessContextAddAttr(a1, CFSTR("kMDItemRecipientEmailAddresses"), (CFTypeRef)p_valuePtr[3], 1);
      generateLocalPartsWithNewFieldName(a1, CFSTR("_kMDItemRecipientEmailAddressesLocalParts"), (const __CFString *)p_valuePtr[3]);
    }
    CFRelease((CFTypeRef)p_valuePtr[3]);
    _Block_object_dispose(&valuePtr, 8);
  }
  if ((*(_BYTE *)(a1 + 25) & 1) != 0
    && !*(_DWORD *)(a1 + 308)
    && cf1
    && *(_QWORD *)(a1 + 296)
    && CFEqual(cf1, CFSTR("com.apple.MobileSMS")))
  {
    *(_DWORD *)(a1 + 308) = CFHash(*(CFTypeRef *)(a1 + 296)) % 0xFFFFFFFE + 1;
  }
  v9 = *(const void **)(a1 + 72);
  if (v9 == (const void *)*MEMORY[0x1E0C9B0D0])
  {
    InsertPreProcessContextAddAttr(a1, CFSTR("_kMDItemTextContentIndexExists"), *(CFTypeRef *)(a1 + 72), 0);
    InsertPreProcessContextAddAttr(a1, CFSTR("_kMDItemTextContentLength"), v9, 0);
    InsertPreProcessContextAddAttr(a1, CFSTR("_kMDItemSnippet"), v9, 0);
  }
  else
  {
    v10 = (const void **)MEMORY[0x1E0C9AE50];
    if (v9)
    {
      TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(*(CFTypeRef *)(a1 + 72)))
      {
        valuePtr = CFStringGetLength(*(CFStringRef *)(a1 + 72));
        v12 = *v10;
        if (valuePtr < 1)
        {
          v13 = (CFNumberRef)*MEMORY[0x1E0C9AE40];
          v14 = CFSTR("_kMDItemTextContentIndexExists");
        }
        else
        {
          v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberCFIndexType, &valuePtr);
          v14 = CFSTR("_kMDItemTextContentLength");
        }
        InsertPreProcessContextAddAttr(a1, v14, v13, 0);
        if (v12)
          goto LABEL_39;
      }
    }
    if (*(_QWORD *)(a1 + 80) || *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 96) || *(_QWORD *)(a1 + 104))
    {
      v12 = *v10;
      if (*v10)
      {
LABEL_39:
        InsertPreProcessContextAddAttr(a1, CFSTR("_kMDItemTextContentIndexExists"), v12, 0);
        *(_DWORD *)(a1 + 24) |= 0x20u;
      }
    }
  }
}

void handleUserTags(uint64_t a1)
{
  const __CFString *v2;
  int HasPrefix;
  const __CFString *v4;
  CFTypeID v5;
  __CFArray *Mutable;
  CFIndex Count;
  CFIndex v8;
  CFIndex i;
  const __CFString *ValueAtIndex;
  CFStringRef v11;
  const __CFString *v12;

  v2 = *(const __CFString **)(a1 + 152);
  if (v2)
  {
    HasPrefix = CFStringHasPrefix(v2, CFSTR(":EA"));
    v4 = *(const __CFString **)(a1 + 160);
    if (v4)
      v5 = CFGetTypeID(*(CFTypeRef *)(a1 + 160));
    else
      v5 = 0;
    if (v5 == CFStringGetTypeID())
    {
      Mutable = (__CFArray *)CopyUserTag(v4);
    }
    else if (v5 == CFArrayGetTypeID())
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      Count = CFArrayGetCount((CFArrayRef)v4);
      if (Count >= 1)
      {
        v8 = Count;
        for (i = 0; i != v8; ++i)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v4, i);
          v11 = CopyUserTag(ValueAtIndex);
          CFArrayAppendValue(Mutable, v11);
          CFRelease(v11);
        }
      }
    }
    else
    {
      Mutable = (__CFArray *)*MEMORY[0x1E0C9B0D0];
    }
    InsertPreProcessContextAddAttr(a1, CFSTR("kMDItemUserTags"), Mutable, 0);
    if (HasPrefix)
      v12 = CFSTR(":EA:_kMDItemUserTags");
    else
      v12 = CFSTR("_kMDItemUserTags");
    InsertPreProcessContextAddAttr(a1, v12, *(CFTypeRef *)(a1 + 160), 1);
  }
}

void cleanupPreProcContext(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;

  if ((uint64_t)a1[17] >= 1)
  {
    v2 = 0;
    do
    {
      CFRelease(*(CFTypeRef *)(a1[15] + 8 * v2));
      CFRelease(*(CFTypeRef *)(a1[16] + 8 * v2++));
    }
    while (v2 < a1[17]);
  }
  if ((uint64_t)a1[23] >= 1)
  {
    v3 = 0;
    do
    {
      CFRelease(*(CFTypeRef *)(a1[21] + 8 * v3));
      CFRelease(*(CFTypeRef *)(a1[22] + 8 * v3++));
    }
    while (v3 < a1[23]);
  }
  v4 = (const void *)a1[2];
  if (v4)
    CFRelease(v4);
  a1[2] = 0;
  v5 = (const void *)a1[1];
  if (v5)
    CFRelease(v5);
  a1[1] = 0;
  v6 = (const void *)a1[9];
  if (v6)
    CFRelease(v6);
  a1[9] = 0;
  v7 = (const void *)a1[10];
  if (v7)
    CFRelease(v7);
  a1[10] = 0;
  v8 = (const void *)a1[11];
  if (v8)
    CFRelease(v8);
  a1[11] = 0;
  v9 = (const void *)a1[12];
  if (v9)
    CFRelease(v9);
  a1[12] = 0;
  v10 = (const void *)a1[13];
  if (v10)
    CFRelease(v10);
  a1[13] = 0;
  v11 = (const void *)a1[4];
  if (v11)
    CFRelease(v11);
  a1[4] = 0;
  v12 = (const void *)a1[5];
  if (v12)
    CFRelease(v12);
  a1[5] = 0;
  v13 = (const void *)a1[8];
  if (v13)
    CFRelease(v13);
  a1[8] = 0;
  v14 = (const void *)a1[7];
  if (v14)
    CFRelease(v14);
  a1[7] = 0;
  v15 = (const void *)a1[19];
  if (v15)
    CFRelease(v15);
  a1[19] = 0;
  v16 = (const void *)a1[20];
  if (v16)
    CFRelease(v16);
  a1[20] = 0;
  v17 = (const void *)a1[25];
  if (v17)
    CFRelease(v17);
  a1[25] = 0;
  v18 = (const void *)a1[26];
  if (v18)
    CFRelease(v18);
  a1[26] = 0;
  v19 = (const void *)a1[27];
  if (v19)
    CFRelease(v19);
  a1[27] = 0;
  v20 = (const void *)a1[28];
  if (v20)
    CFRelease(v20);
  a1[28] = 0;
  v21 = (const void *)a1[35];
  if (v21)
    CFRelease(v21);
  a1[35] = 0;
  v22 = (const void *)a1[34];
  if (v22)
    CFRelease(v22);
  a1[34] = 0;
  v23 = (const void *)a1[39];
  if (v23)
    CFRelease(v23);
  a1[39] = 0;
  v24 = (const void *)a1[41];
  if (v24)
    CFRelease(v24);
  a1[41] = 0;
  v25 = (const void *)a1[43];
  if (v25)
    CFRelease(v25);
  a1[43] = 0;
}

uint64_t candidateForReimport(uint64_t a1, uint64_t *a2)
{
  int *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  _WORD *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v4 = *(int **)(a1 + 1184);
  v5 = *a2;
  v11 = 0;
  v12[0] = 0;
  if (!db_get_field(v4, v5, "_kMDItemImporterResult", (unint64_t *)&v11, v12) && *(_BYTE *)v12[0])
    return 0;
  v12[0] = *(unsigned int *)(a1 + 1996);
  v10 = 0;
  v11 = 0;
  if ((!db_get_field_by_id(v4, *a2, (int *)v12, (unint64_t *)&v11, &v10)
     || !db_get_field(v4, *a2, "kMDItemContentType", (unint64_t *)&v11, &v10))
    && *v11 == 11
    && (v11[1] & 0xB0) == 0x10)
  {
    return 0;
  }
  v7 = *(unsigned int *)(a1 + 1996);
  v8 = 1;
  db_add_field(v4, (_DWORD **)a2, 0, "kMDItemContentType", v7, 0x310u, 11, "", v6, 1);
  return v8;
}

uint64_t flat_levels_cf_set_applier1(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;
  _OWORD v6[8];
  uint64_t v7;

  v3 = result;
  v4 = 0;
  v7 = *MEMORY[0x1E0C80C00];
  memset(v6, 0, sizeof(v6));
  do
  {
    for (; v3; v3 = *(_QWORD *)v3 & 0x7FFFFFFFFFFFFFFFLL)
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))a2)(*(unsigned __int16 *)(v3 + 32), v3 + 34, v3 + 16, *(unsigned int *)(v3 + 28), *(_QWORD *)(a2 + 16));
      if ((*(_QWORD *)(v3 + 8) & 0x7FFFFFFFFFFFFFFFLL) != 0)
        *((_QWORD *)v6 + v4++) = *(_QWORD *)(v3 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    }
    v5 = __OFSUB__(v4--, 1);
    if (v4 < 0 != v5)
      break;
    v3 = *((_QWORD *)v6 + v4);
  }
  while (v3);
  return result;
}

void resolveQueryInfoCallback(unsigned int a1, unsigned __int8 *a2, uint64_t a3, int a4, uint64_t a5)
{
  __n128 v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  unint64_t i;
  uint64_t v14;
  unsigned __int8 **v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  BOOL v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  BOOL v36;
  unsigned __int8 *v37;
  unsigned int v38;
  _BOOL4 v39;
  BOOL v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  BOOL v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  unsigned int v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  BOOL v63;
  int v64;
  int v65;
  int v67;
  unsigned int v68;
  int v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  char *v74;
  char *v75;
  const char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  const char *v80;
  uint64_t v81;
  unsigned __int8 v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  if (a1 >= 0x415)
  {
    v74 = __si_assert_copy_extra_268();
    v75 = v74;
    v76 = "";
    if (v74)
      v76 = v74;
    __message_assert("%s:%u: failed assertion '%s' %s %d", "CIQuery.c", 1360, "termLen <= CI_UTF8CHARS_BUFFER_SIZE", v76, a1);
    free(v75);
    if (__valid_fs(-1))
      v77 = 2989;
    else
      v77 = 3072;
    *(_DWORD *)v77 = -559038737;
    abort();
  }
  bzero(&v83, 0x415uLL);
  if (a1)
  {
    v10 = &v83;
    v11 = a1;
    do
    {
      v12 = *a2++;
      *v10++ = tcmr[v12];
      --v11;
    }
    while (v11);
  }
  *(&v83 + a1) = 0;
  if (*(_DWORD *)(a5 + 8))
  {
    for (i = 0; i < *(unsigned int *)(a5 + 8); ++i)
    {
      v14 = *(_QWORD *)(a5 + 16);
      v15 = (unsigned __int8 **)(v14 + (i << 6));
      v16 = *((_DWORD *)v15 + 4);
      if ((v16 & 0x610) == 0)
      {
        if ((v16 & 4) != 0)
        {
          v20 = v83;
          v21 = *v15;
          if (v83 - 2 > 2 || v83 != *v21)
            continue;
          v23 = v21 + 1;
          v24 = &v84;
          if ((v16 & 0x20) != 0)
          {
            do
            {
              v32 = *v24++;
              v31 = v32;
              v34 = *v23++;
              v33 = v34;
              if (v31)
                v35 = v31 == v33;
              else
                v35 = 0;
            }
            while (v35);
            v36 = v33 != 0;
            if (v31)
              v36 = v31 < v33;
            if (v36)
              continue;
          }
          else
          {
            do
            {
              v26 = *v24++;
              v25 = v26;
              v28 = *v23++;
              v27 = v28;
              if (v25)
                v29 = v25 == v27;
              else
                v29 = 0;
            }
            while (v29);
            if (v25)
              v30 = v25 >= v27;
            else
              v30 = 0;
            if (!v30)
              continue;
          }
          v37 = *(unsigned __int8 **)(v14 + (i << 6) + 8);
          v38 = *v37;
          v39 = v83 == 0;
          v40 = v83 != v38 || v83 == 0;
          if ((v16 & 0x40) != 0)
          {
            if (!v40)
            {
              v59 = v37 + 1;
              v60 = &v84;
              do
              {
                v61 = *v60++;
                v20 = v61;
                LOBYTE(v39) = v61 == 0;
                v62 = *v59++;
                v38 = v62;
                if (v20)
                  v63 = v20 == v38;
                else
                  v63 = 0;
              }
              while (v63);
            }
            if (v20 >= v38 && !v39)
              continue;
          }
          else
          {
            if (!v40)
            {
              v41 = v37 + 1;
              v42 = &v84;
              do
              {
                v43 = *v42++;
                v20 = v43;
                v39 = v43 == 0;
                v44 = *v41++;
                v38 = v44;
                if (v20)
                  v45 = v20 == v38;
                else
                  v45 = 0;
              }
              while (v45);
            }
            if (v38)
              v46 = -1;
            else
              v46 = 0;
            v47 = (v20 < v38) << 31;
            if (v39)
              v47 = v46;
            if ((v47 & 0x80000000) == 0)
              continue;
          }
LABEL_89:
          v64 = *(_DWORD *)(v14 + (i << 6) + 20);
          if (v64 != -1)
          {
            v65 = termPropertyID_9607(&v83, a1);
            if (v65 != v64 && (v16 & 0x3080 | v64 || v65 != 2))
              continue;
          }
LABEL_13:
          v19 = *(_QWORD *)(a5 + 64);
          if (v19)
          {
            (*(void (**)(uint64_t, unint64_t, uint64_t, _QWORD))(v19 + 16))(v19, i, a3, *(_QWORD *)a5);
          }
          else if ((*(_WORD *)(*(_QWORD *)(a5 + 16) + (i << 6) + 16) & 0x3080) == 0 || a4)
          {
            v9.n128_u32[0] = 0;
            (*(void (**)(__n128))(*(_QWORD *)(*(_QWORD *)(a5 + 24) + 8 * i) + 56))(v9);
          }
          continue;
        }
        v17 = v14 + (i << 6);
        v18 = *(_QWORD *)(v17 + 32);
        if (v18)
        {
          if (localizedFieldTermMatch_9606(v18, *(_DWORD *)(v17 + 20), &v83, a1, *((_DWORD *)v15 + 4)))
            goto LABEL_13;
        }
        else
        {
          if (*(_QWORD *)(v17 + 40))
          {
            if (v83 != 1)
            {
              v48 = termPropertyID_9607(&v83, a1);
              v49 = 0;
              v14 = *(_QWORD *)(a5 + 16);
              goto LABEL_112;
            }
            v48 = v84;
            if (v84 == 2)
            {
              v48 = v85;
              if ((char)v85 < 0)
              {
                if (((char)v86 & 0x80000000) == 0)
                {
                  v48 = v85 & 0x7F | (v86 << 7);
                  v49 = 4;
                  goto LABEL_112;
                }
                if (((char)v87 & 0x80000000) == 0)
                {
                  v67 = ((v86 & 0x7F) << 7) | (v87 << 14);
                  goto LABEL_110;
                }
                if (((char)v88 & 0x80000000) == 0)
                {
                  v68 = ((v87 & 0x7F) << 14) | (v88 << 21) | ((v86 & 0x7F) << 7) | v85 & 0x7F;
                  v49 = 6;
                  goto LABEL_111;
                }
                if ((char)v89 < 0)
                  goto LABEL_138;
                v71 = ((v88 & 0x7F) << 21) | (v89 << 28) | ((v87 & 0x7F) << 14) | ((v86 & 0x7F) << 7) | v85 & 0x7F;
                v49 = 7;
LABEL_124:
                v48 = v71;
                goto LABEL_112;
              }
            }
            else
            {
              if ((v84 & 0x80) == 0)
              {
                v49 = 2;
                goto LABEL_112;
              }
              if ((char)v85 < 0)
              {
                if (((char)v86 & 0x80000000) == 0)
                {
                  v68 = ((v85 & 0x7F) << 7) | (v86 << 14) | v84 & 0x7F;
                  v49 = 4;
                  goto LABEL_111;
                }
                if ((char)v87 < 0)
                {
                  if ((char)v88 < 0)
                  {
LABEL_138:
                    v78 = __si_assert_copy_extra_268();
                    v79 = v78;
                    v80 = "";
                    if (v78)
                      v80 = v78;
                    __message_assert("%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", "VIntUtils.h", 341, "(b4 & 0x80) == 0", v80);
                    free(v79);
                    if (__valid_fs(-1))
                      v81 = 2989;
                    else
                      v81 = 3072;
                    *(_DWORD *)v81 = -559038737;
                    abort();
                  }
                  v71 = ((v87 & 0x7F) << 21) | (v88 << 28) | ((v86 & 0x7F) << 14) | ((v85 & 0x7F) << 7) | v84 & 0x7F;
                  v49 = 6;
                  goto LABEL_124;
                }
                v67 = ((v86 & 0x7F) << 14) | (v87 << 21) | ((v85 & 0x7F) << 7);
LABEL_110:
                v68 = v67 & 0xFFFFFF80 | v48 & 0x7F;
                v49 = 5;
LABEL_111:
                v48 = v68;
LABEL_112:
                if (*(_DWORD *)(v14 + (i << 6) + 20) == v48)
                {
                  v69 = a1 - v49;
                  while (v69 >= 1)
                  {
                    v70 = *(&v83 + v49 + v69 - 1);
                    if (v70 > 5)
                    {
                      if ((icu_regex_find() & 1) == 0)
                        goto LABEL_8;
                      goto LABEL_13;
                    }
                    --v69;
                    if ((v70 & 0xFFFFFFFD) != 1)
                      goto LABEL_8;
                  }
                }
                continue;
              }
              v48 = v84 & 0x7F | (v85 << 7);
            }
            v49 = 3;
            goto LABEL_112;
          }
          v50 = *v15;
          v51 = *(_DWORD *)(v14 + (i << 6) + 24);
          v52 = **v15;
          if (v52 > 4)
          {
            v55 = &v83;
            if (v52 == 42 && termPropertyID_9607(&v83, a1) == 2)
              continue;
          }
          else
          {
            if (v52 != v83)
              continue;
            v53 = v50 + 1;
            v54 = v50[1];
            if (v54 != v84)
              continue;
            v55 = &v85;
            if (v54 == 2)
            {
              v57 = v50[2];
              v56 = v50 + 2;
              LOBYTE(v54) = v57;
              if (v57 != v85)
                continue;
              v53 = v56;
              v55 = &v86;
            }
            v50 = v53 + 1;
            if ((v54 & 0x80) != 0)
            {
              v58 = *v50;
              if (v58 != *v55)
                continue;
              v50 = v53 + 2;
              if ((char)v58 < 0)
              {
                v72 = *v50;
                if (v72 != v55[1])
                  continue;
                if ((char)v72 < 0)
                {
                  v73 = (char)v53[3];
                  if (v73 < 0 || v55[2] != v73)
                    continue;
                  v55 += 3;
                  v50 = v53 + 4;
                }
                else
                {
                  v55 += 2;
                  v50 = v53 + 3;
                }
              }
              else
              {
                ++v55;
              }
            }
          }
          if (matche(v50, v55, v51, 0, 0) == 1)
          {
            v14 = *(_QWORD *)(a5 + 16);
            v16 = *(_DWORD *)(v14 + (i << 6) + 16);
            goto LABEL_89;
          }
        }
      }
LABEL_8:
      ;
    }
  }
}

uint64_t SIDeleteCSItems(uint64_t a1, const __CFString *a2, Bytef *a3, uint64_t a4)
{
  int v4;
  NSObject *v5;
  int *v6;
  uint64_t result;
  pthread_mutex_t *v12;
  char *JournalFd;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t *v19;
  unint64_t v20;
  uInt v21;
  uLong v22;
  int v23;
  int v24;
  unsigned int v25;
  uInt v26;
  unsigned int v27;
  uint64_t v28;
  off_t v29;
  uint64_t v30;
  BOOL v31;
  _QWORD *v32;
  unint64_t v33;
  int v34;
  NSObject *v35;
  os_log_type_t v36;
  unsigned int v37;
  pthread_mutex_t *v38;
  Bytef *v39;
  int v40;
  _DWORD v41[3];
  __int16 v42;
  int v43;
  uint8_t v44[4];
  int v45;
  Bytef v46[16];
  __int128 v47;
  Bytef buf[1024];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 1280))
  {
    v4 = *__error();
    v5 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v5, OS_LOG_TYPE_DEFAULT, "Cannot delete in SIDeleteCSItems because the index is read-only", buf, 2u);
    }
    v6 = __error();
    result = 0;
    *v6 = v4;
    return result;
  }
  v12 = (pthread_mutex_t *)(a1 + 1632);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 1632));
  JournalFd = getJournalFd(a1, 0, 0);
  if (!JournalFd)
  {
    v15 = 0;
    goto LABEL_64;
  }
  v14 = JournalFd;
  v15 = *(_QWORD *)(a1 + 2104);
  if (v15)
  {
    if (*(char **)(v15 + 8) == JournalFd)
    {
      do
LABEL_17:
        v18 = __ldaxr((unsigned int *)v15);
      while (__stlxr(v18 + 1, (unsigned int *)v15));
      goto LABEL_18;
    }
    do
    {
      v16 = __ldaxr((unsigned int *)v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v15));
    if (!v17)
      _si_mobile_journal_finalize(v15, 1);
    *(_QWORD *)(a1 + 2104) = 0;
  }
  if (*(_BYTE *)(a1 + 2072) && (*(_BYTE *)(a1 + 829) & 0x10) == 0 && _os_feature_enabled_impl())
    _os_feature_enabled_impl();
  v15 = si_mobile_journal_create(a1);
  *(_QWORD *)(a1 + 2104) = v15;
  if (v15)
    goto LABEL_17;
LABEL_18:
  v19 = (unint64_t *)(a1 + 2128);
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  if (si_clientstatesandmeta_update(a1, v20 + 1, 0))
  {
    bzero(buf, 0x400uLL);
    if (a2)
    {
      if (!CFStringGetCString(a2, (char *)buf, 1024, 0x8000100u))
      {
        v24 = 22;
LABEL_61:
        v34 = *__error();
        v35 = _SILogForLogForCategory(4);
        v36 = 2 * (dword_1EF19FC9C < 4);
        if (os_log_type_enabled(v35, v36))
        {
          *(_DWORD *)v44 = 67109120;
          v45 = v24;
          _os_log_impl(&dword_1B8270000, v35, v36, "Error writing to log file: %d", v44, 8u);
        }
        *__error() = v34;
        goto LABEL_64;
      }
      v40 = strlen((const char *)buf) + 1;
    }
    else
    {
      LOWORD(v40) = 0;
    }
    *(_OWORD *)v46 = 0u;
    v47 = 0u;
    v38 = v12;
    v39 = a3;
    if (v20)
    {
      if (v20 > 0x7F)
      {
        if (v20 >> 14)
        {
          if (v20 >> 21)
          {
            if (v20 >> 28)
            {
              if (v20 >> 35)
              {
                if (v20 >> 42)
                {
                  if (v20 >> 49)
                  {
                    if (HIBYTE(v20))
                    {
                      v46[0] = -1;
                      *(_QWORD *)&v46[1] = v20;
                      v21 = 9;
                    }
                    else
                    {
                      v46[0] = -2;
                      v46[1] = BYTE6(v20);
                      v46[2] = BYTE5(v20);
                      v46[3] = BYTE4(v20);
                      v46[4] = BYTE3(v20);
                      v46[5] = BYTE2(v20);
                      v46[6] = BYTE1(v20);
                      v21 = 8;
                      v46[7] = v20;
                    }
                  }
                  else
                  {
                    v46[0] = BYTE6(v20) | 0xFC;
                    v46[1] = BYTE5(v20);
                    v46[2] = BYTE4(v20);
                    v46[3] = BYTE3(v20);
                    v46[4] = BYTE2(v20);
                    v46[5] = BYTE1(v20);
                    v21 = 7;
                    v46[6] = v20;
                  }
                }
                else
                {
                  v46[0] = BYTE5(v20) | 0xF8;
                  v46[1] = BYTE4(v20);
                  v46[2] = BYTE3(v20);
                  v46[3] = BYTE2(v20);
                  v46[4] = BYTE1(v20);
                  v46[5] = v20;
                  v21 = 6;
                }
              }
              else
              {
                v46[0] = BYTE4(v20) | 0xF0;
                v46[1] = BYTE3(v20);
                v46[2] = BYTE2(v20);
                v46[3] = BYTE1(v20);
                v46[4] = v20;
                v21 = 5;
              }
            }
            else
            {
              v46[0] = BYTE3(v20) | 0xE0;
              v46[1] = BYTE2(v20);
              v46[2] = BYTE1(v20);
              v46[3] = v20;
              v21 = 4;
            }
          }
          else
          {
            v46[0] = BYTE2(v20) | 0xC0;
            v46[1] = BYTE1(v20);
            v46[2] = v20;
            v21 = 3;
          }
        }
        else
        {
          v46[0] = BYTE1(v20) | 0x80;
          v46[1] = v20;
          v21 = 2;
        }
      }
      else
      {
        v46[0] = v20;
        v21 = 1;
      }
      v22 = adler32(0, v46, v21);
      v23 = -262209811;
    }
    else
    {
      v22 = 0;
      v21 = 0;
      v23 = -261161235;
    }
    v25 = adler32(v22, buf, (unsigned __int16)v40);
    v42 = v40;
    v43 = a4;
    v26 = v21;
    v27 = 8 * a4 + (unsigned __int16)v40 + v21 + 6;
    v41[0] = v23;
    v41[1] = v27;
    v41[2] = adler32(v25, v39, 8 * (int)a4);
    v28 = fd_lseek(v14, 0, 2);
    if (v28 == -1)
    {
      v24 = 22;
    }
    else
    {
      v29 = v28;
      if (fd_write((uint64_t)v14, (uint64_t)v41, 0x12uLL) != -1
        && (!v26 || fd_write((uint64_t)v14, (uint64_t)v46, v26) != -1)
        && (!(_WORD)v40 || fd_write((uint64_t)v14, (uint64_t)buf, (unsigned __int16)v40) != -1)
        && (!(_DWORD)a4 || fd_write((uint64_t)v14, (uint64_t)v39, (8 * a4) & 0x7FFFFFFF8) != -1))
      {
        v30 = v27 + 12;
        pthread_mutex_unlock(v38);
        v31 = v20 != 0;
        v32 = si_mobile_delete_attr_ctx_create(a1, a2);
        v32[1] = v15;
        v32[2] = v29;
        v32[3] = v30;
        *((_BYTE *)v32 + 32) = v31;
        *(_DWORD *)((char *)v32 + 33) = 0;
        *((_DWORD *)v32 + 9) = 0;
        do
          v33 = __ldxr(&gEnqueuedSize);
        while (__stxr(v33 + v30, &gEnqueuedSize));
        *((CFAbsoluteTime *)v32 + 6) = CFAbsoluteTimeGetCurrent();
        si_enqueue_barrier_with_qos(*(_QWORD *)(a1 + 1048), 9, (uint64_t)deleteCSAttributes, (uint64_t)v32);
        return 1;
      }
      v24 = *__error();
      fd_truncate((uint64_t)v14, v29);
      *__error() = v24;
    }
    v12 = v38;
    goto LABEL_61;
  }
LABEL_64:
  pthread_mutex_unlock(v12);
  if (v15)
  {
    do
      v37 = __ldaxr((unsigned int *)v15);
    while (__stlxr(v37 - 1, (unsigned int *)v15));
    if (v37 == 1)
      _si_mobile_journal_finalize(v15, 1);
  }
  return 0;
}

_QWORD *si_mobile_delete_attr_ctx_create(uint64_t a1, const void *a2)
{
  _QWORD *v4;

  v4 = malloc_type_calloc(1uLL, 0x58uLL, 0x10E0040A35325E4uLL);
  *v4 = a1;
  if (a2)
    v4[7] = CFRetain(a2);
  return v4;
}

uint64_t x_openat(int a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int16 a9)
{
  uint64_t v12;
  uint64_t result;
  int *v14;

  if ((a3 & 0x200) != 0)
    v12 = a9;
  else
    v12 = 0;
  result = openat(a1, a2, a3, v12);
  if ((_DWORD)result == -1)
  {
    v14 = __error();
    result = 0xFFFFFFFFLL;
    if ((a3 & 0x20000000) != 0 && *v14 == 22)
      return openat(a1, a2, a3 & 0xDFFFFFFF, v12);
  }
  return result;
}

void value_release(void *a1)
{
  malloc_zone_t *v2;

  v2 = malloc_default_purgeable_zone();
  malloc_zone_free(v2, a1);
}

uint64_t termIdStoreAllocBulk(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  char *v10;
  char *v11;
  const char *v12;
  uint64_t v13;

  if (!a2)
    return 0;
  v4 = *(_DWORD *)(a1 + 4408);
  v5 = *(_QWORD *)(a1 + 232);
  v6 = a2;
  do
  {
    if (!storageAllocOffsetFromEnd(a1, 8u))
    {
      *(_QWORD *)(a1 + 232) = v5;
      v9 = *__error();
      if (v9)
        return v9;
      else
        return 0xFFFFFFFFLL;
    }
    --v6;
  }
  while (v6);
  v7 = (v4 + a2);
  if (v7 != *(_QWORD *)(a1 + 232) >> 3)
  {
    v10 = __si_assert_copy_extra(*(_DWORD **)(a1 + 216));
    v11 = v10;
    v12 = "";
    if (v10)
      v12 = v10;
    __message_assert("%s:%u: failed assertion '%s' %s tid:%d, ct:%d, fr:%llx", "TermIdStore.c", 73, "termID+count == ts->store._windows._freeRegion / sizeof(disk_TermData)", v12, v4, a2, *(_QWORD *)(a1 + 232));
    free(v11);
    if (__valid_fsp(*(_DWORD **)(a1 + 216)))
      v13 = 2989;
    else
      v13 = 3072;
    *(_DWORD *)v13 = -559038737;
    abort();
  }
  result = 0;
  *(_DWORD *)(a1 + 4408) = v7;
  return result;
}

uint64_t sync_invalidate_mapping(char *a1, uint64_t a2)
{
  char *v3;
  size_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  int v8;
  NSObject *v9;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a1 == (char *)-1)
  {
    *__error() = 22;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      v8 = *__error();
      v11 = 134218240;
      v12 = -1;
      v13 = 1024;
      v14 = v8;
      v9 = MEMORY[0x1E0C81028];
LABEL_16:
      _os_log_impl(&dword_1B8270000, v9, OS_LOG_TYPE_INFO, "msync(%p) err %d", (uint8_t *)&v11, 0x12u);
    }
  }
  else
  {
    v3 = &a1[a2];
    if (&a1[a2] > a1)
    {
      v4 = 0x20000;
      v5 = a1;
LABEL_4:
      if (&v5[v4] > v3)
        v4 = v3 - v5;
      do
      {
        v6 = msync(v5, v4, 16);
        v7 = *__error();
        madvise(v5, v4, 4);
        if ((_DWORD)v6 != -1)
        {
          v5 += v4;
          if (v5 < v3)
            goto LABEL_4;
          return v6;
        }
      }
      while (g_prot_error_callback && ((*(uint64_t (**)(void))(g_prot_error_callback + 16))() & 1) != 0);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
        return 0xFFFFFFFFLL;
      v11 = 134218240;
      v12 = (uint64_t)a1;
      v13 = 1024;
      v14 = v7;
      v9 = MEMORY[0x1E0C81028];
      goto LABEL_16;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sync_invalidate_fd(uint64_t result, uint64_t a2, uint64_t a3)
{
  off_t v3;
  size_t v4;
  char *v5;

  if (a3)
  {
    v3 = a2 & ~*MEMORY[0x1E0C85AC0];
    v4 = a2 - v3 + a3;
    v5 = (char *)mmap(0, v4, 1, 1025, result, v3);
    sync_invalidate_mapping(v5, v4);
    return munmap(v5, v4);
  }
  return result;
}

uint64_t store_stream_init_fd(uint64_t a1, uint64_t a2, uint64_t a3, off_t a4, char a5)
{
  int v10;
  int *v11;
  int v12;
  off_t st_size;
  void *v15;
  ssize_t v16;
  stat v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  memset(&v17, 0, sizeof(v17));
  *(_OWORD *)(a1 + 4) = 0u;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)a1 = -1;
  v10 = fstat(a2, &v17);
  *(_DWORD *)(a1 + 16) = v10;
  if (!v10)
  {
    st_size = 0x100000;
    *(_QWORD *)(a1 + 32) = 0x100000;
    if ((a5 & 1) == 0)
    {
      st_size = v17.st_size;
      if (v17.st_size >= 0x100000)
        st_size = 0x100000;
      else
        *(_QWORD *)(a1 + 32) = v17.st_size;
    }
    v15 = malloc_type_malloc(st_size, 0x96E29757uLL);
    *(_QWORD *)(a1 + 48) = v15;
    if (v15)
    {
      *(_QWORD *)(a1 + 24) = a4;
      if ((a5 & 1) != 0)
      {
LABEL_13:
        *(_DWORD *)a1 = a2;
        *(_QWORD *)(a1 + 8) = a3;
        return 1;
      }
      v16 = prot_pread(a2, v15, *(_QWORD *)(a1 + 32), a4);
      if (v16 != -1)
      {
        *(_QWORD *)(a1 + 24) += v16;
        *(_QWORD *)(a1 + 32) = v16;
        goto LABEL_13;
      }
    }
  }
  v11 = __error();
  v12 = *v11;
  *(_DWORD *)(a1 + 16) = *v11;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v17.st_dev = 67109120;
    *(_DWORD *)&v17.st_mode = v12;
    _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "store_stream_init err:%d", (uint8_t *)&v17, 8u);
  }
  store_stream_destroy(a1);
  return 0;
}

uint64_t store_stream_flush(unsigned int *a1, int a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  if ((_DWORD)v2)
    return v2;
  v6 = (uint64_t)(a1 + 2);
  v7 = *((_QWORD *)a1 + 1);
  v8 = *a1;
  if (v7)
    v9 = prot_pwrite_guarded(v8, v6, *((_QWORD *)a1 + 6), *((_QWORD *)a1 + 5), *((_QWORD *)a1 + 3));
  else
    v9 = prot_pwrite(v8, *((char **)a1 + 6), *((_QWORD *)a1 + 5), *((_QWORD *)a1 + 3));
  if (*((_QWORD *)a1 + 5) == v9)
  {
    *((_QWORD *)a1 + 3) += v9;
  }
  else
  {
    v2 = *__error();
    a1[4] = v2;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      goto LABEL_10;
    v11 = 67109120;
    v12 = v2;
    _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "store_stream_flush write err:%d", (uint8_t *)&v11, 8u);
  }
  v2 = a1[4];
LABEL_10:
  *((_QWORD *)a1 + 5) = 0;
  if (a2 && !(_DWORD)v2)
  {
    v10 = fsync(*a1);
    a1[4] = v10;
    if (v10)
    {
      v2 = *__error();
      a1[4] = v2;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
      {
        v11 = 67109120;
        v12 = v2;
        _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "store_stream_flush sync err:%d", (uint8_t *)&v11, 8u);
        return a1[4];
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void storageUnmap(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 244) && *(_BYTE *)(a1 + 246) && *(int *)(a1 + 240) >= 1)
  {
    v4 = 0;
    do
      storageWindowSync(*(_QWORD **)(a1 + 264 + 8 * v4++), 0);
    while (v4 < *(int *)(a1 + 240));
  }
  if (*(int *)(a1 + 240) >= 1)
  {
    v2 = 0;
    v3 = (uint64_t *)(a1 + 264);
    do
    {
      storageWindowReleaseImmediate(v3);
      ++v2;
      ++v3;
    }
    while (v2 < *(int *)(a1 + 240));
  }
}

unint64_t storageGrowOffset(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, int *a6)
{
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _BOOL4 v16;
  int v17;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v32;
  char *v33;
  const char *v34;
  uint64_t v35;
  _QWORD v36[2];

  v36[1] = *MEMORY[0x1E0C80C00];
  v12 = *(_DWORD *)(a1 + 4);
  v13 = a3 - v12;
  if (a3 <= v12)
  {
    v18 = 0;
  }
  else
  {
    v14 = __clz(v13);
    v16 = (v13 & (v13 - 1)) != 0 || a3 == v12;
    v17 = v16 - v14;
    if (v17 <= -29)
      v18 = 0;
    else
      v18 = v17 + 28;
  }
  v19 = a4 >= v12;
  v20 = a4 - v12;
  if (v20 != 0
    && v19
    && ((v21 = __clz(v20), (v20 & (v20 - 1)) == 0) ? (v22 = v20 == 0) : (v22 = 1),
        !v22 ? (v23 = 0) : (v23 = 1),
        v24 = v23 - v21,
        v24 > -29))
  {
    v25 = v24 + 28;
  }
  else
  {
    v25 = 0;
  }
  if (v18 > v25)
  {
    v32 = __si_assert_copy_extra(0);
    v33 = v32;
    v34 = "";
    if (v32)
      v34 = v32;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 1001, "oldIdx <= newIdx", v34);
    free(v33);
    if (__valid_fs(-1))
      v35 = 2989;
    else
      v35 = 3072;
    *(_DWORD *)v35 = -559038737;
    abort();
  }
  if (v25 == v18)
    return a2;
  v27 = a3;
  MEMORY[0x1E0C80A78](a1);
  v28 = storageResolvePtr(a1, a2, a3, 1);
  memcpy((char *)v36 - ((v27 + 15) & 0x1FFFFFFF0), v28, a3);
  storageFreeOffset(a1, a2, a3);
  v26 = storageAllocOffset(a1, a4, a5, a6);
  if (v26)
  {
    v29 = storageResolvePtr(a1, v26, a4, 1);
    memcpy(v29, (char *)v36 - ((v27 + 15) & 0x1FFFFFFF0), v27);
  }
  v30 = *a6;
  *(_QWORD *)(a5 + 8 * v30) = a2;
  *a6 = v30 + 1;
  return v26;
}

void storageFreeOffset(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  const char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  const char *v36;
  int v37;
  NSObject *v38;
  uint64_t v39;
  char *v40;
  const char *v41;
  unint64_t v42;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  unsigned int v48;
  __int16 v49;
  unint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)(a1 + 4);
  v6 = a3 >= v5;
  v7 = a3 - v5;
  if (v7 != 0 && v6)
  {
    v8 = __clz(v7);
    v10 = (v7 & (v7 - 1)) != 0 || v7 == 0;
    v11 = v10 - v8;
    v13 = 8;
    if (v11 < -28)
    {
      v12 = 0;
    }
    else
    {
      v12 = v11 + 28;
      if ((v11 + 28) >= 0x18)
      {
        v29 = __si_assert_copy_extra(0);
        v27 = v29;
        v30 = "";
        if (v29)
          v30 = v29;
        __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 934, "idx < (24)", v30);
LABEL_42:
        free(v27);
        if (!__valid_fs(-1))
        {
LABEL_47:
          v33 = 3072;
LABEL_48:
          *(_DWORD *)v33 = -559038737;
          abort();
        }
LABEL_43:
        v33 = 2989;
        goto LABEL_48;
      }
      v13 = 8 << v12;
    }
  }
  else
  {
    v12 = 0;
    v13 = 8;
  }
  if (v7 > v13)
  {
    v22 = __si_assert_copy_extra(0);
    v23 = v22;
    v24 = "";
    if (v22)
      v24 = v22;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 935, "inSize - baseSize <= rsize", v24);
LABEL_28:
    free(v23);
    if (__valid_fs(-1))
      v25 = 2989;
    else
      v25 = 3072;
    *(_DWORD *)v25 = -559038737;
    abort();
  }
  if (*(_QWORD *)(a1 + 224) <= a2)
  {
    v26 = __si_assert_copy_extra(0);
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 936, "inOffset < inStorage->_windows._size", v28);
    goto LABEL_42;
  }
  v14 = v13;
  if (a2 + v13 == *(_QWORD *)(a1 + 232))
  {
    v15 = storageResolvePtr(a1, a2, a3, 1);
    bzero(v15, v14);
    *(_QWORD *)(a1 + 232) = a2;
    return;
  }
  v16 = storageResolvePtr(a1, a2, v13, 1);
  if (!v16)
  {
    v31 = __si_assert_copy_extra(0);
    v27 = v31;
    v32 = "";
    if (v31)
      v32 = v31;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 948, "ptr", v32);
    goto LABEL_42;
  }
  v17 = v16;
  bzero(v16, v14);
  if (*(_QWORD *)(a1 + 200) < (unint64_t)v12)
    *(_QWORD *)(a1 + 200) = v12;
  v18 = a1 + 8 * v12;
  v21 = *(_QWORD *)(v18 + 8);
  v19 = (unint64_t *)(v18 + 8);
  v20 = v21;
  if (v21 && v20 >= *(_QWORD *)(a1 + 232))
  {
    v34 = __si_assert_copy_extra(*(_DWORD **)(a1 + 216));
    v35 = v34;
    v36 = "";
    if (v34)
      v36 = v34;
    __message_assert("%s:%u: failed assertion '%s' %s offset: 0x%lld, freeRegion: 0x%lld", "storage.c", 192, "(head==0) || (head < storage->_windows._freeRegion)", v36, v20, *(_QWORD *)(a1 + 232));
    free(v35);
    if (!__valid_fsp(*(_DWORD **)(a1 + 216)))
      goto LABEL_47;
    goto LABEL_43;
  }
  v42 = v20;
  *v17 = v20;
  dirtyStorageOffsets(a1, &v42, 1);
  if (a2 && *(_QWORD *)(a1 + 232) <= a2)
  {
    v37 = *__error();
    v38 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      v39 = *(_QWORD *)(a1 + 232);
      *(_DWORD *)buf = 136316162;
      v44 = "_storeageSetFreeListHead";
      v45 = 1024;
      v46 = 200;
      v47 = 1024;
      v48 = v12;
      v49 = 2048;
      v50 = a2;
      v51 = 2048;
      v52 = v39;
      _os_log_error_impl(&dword_1B8270000, v38, OS_LOG_TYPE_ERROR, "%s:%d: %d: offset(%lld) < freeRegion (%lld)", buf, 0x2Cu);
    }
    *__error() = v37;
    v40 = __si_assert_copy_extra(0);
    v23 = v40;
    v41 = "";
    if (v40)
      v41 = v40;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 959, "success", v41);
    goto LABEL_28;
  }
  *v19 = a2;
}

uint64_t storageExtendOffset(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  BOOL v21;
  uint64_t result;
  unint64_t v23;
  char *v24;
  char *v25;
  const char *v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  char *v39;
  const char *v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  unsigned int v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v7 = a2 + a3;
  v8 = *(_QWORD *)(a1 + 232);
  if (v7 == v8)
  {
    v9 = a2 + a4;
    if (v9 <= *(_QWORD *)(a1 + 224))
    {
      *(_QWORD *)(a1 + 232) = v9;
      goto LABEL_25;
    }
    return 0;
  }
  if (a4 > 2 * a3)
    return 0;
  v10 = *(_DWORD *)(a1 + 4);
  v21 = a3 >= v10;
  v11 = a3 - v10;
  if (v11 != 0
    && v21
    && ((v12 = __clz(v11), (v11 & (v11 - 1)) == 0) ? (v13 = v11 == 0) : (v13 = 1),
        !v13 ? (v14 = 0) : (v14 = 1),
        v15 = v14 - v12,
        v15 > -29))
  {
    v16 = v15 + 28;
  }
  else
  {
    v16 = 0;
  }
  v17 = a1 + 8 * v16;
  v20 = *(_QWORD *)(v17 + 8);
  v19 = (unint64_t *)(v17 + 8);
  v18 = v20;
  if (v20)
    v21 = v18 >= v8;
  else
    v21 = 0;
  if (v21)
  {
    v30 = v18;
    v31 = __si_assert_copy_extra(*(_DWORD **)(a1 + 216));
    v32 = v31;
    v33 = "";
    if (v31)
      v33 = v31;
    __message_assert("%s:%u: failed assertion '%s' %s offset: 0x%lld, freeRegion: 0x%lld", "storage.c", 192, "(head==0) || (head < storage->_windows._freeRegion)", v33, v30, *(_QWORD *)(a1 + 232));
    free(v32);
    if (__valid_fsp(*(_DWORD **)(a1 + 216)))
      v34 = 2989;
    else
      v34 = 3072;
    *(_DWORD *)v34 = -559038737;
    abort();
  }
  if (v18 != v7)
    return 0;
  result = _windowsGetPtr(a1 + 216, v7, a3);
  if (result)
  {
    v23 = *(_QWORD *)result;
    if (*(_QWORD *)result && v8 <= v23)
    {
      v35 = *(_QWORD *)result;
      v36 = *__error();
      v37 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        v38 = *(_QWORD *)(a1 + 232);
        *(_DWORD *)buf = 136316162;
        v42 = "_storeageSetFreeListHead";
        v43 = 1024;
        v44 = 200;
        v45 = 1024;
        v46 = v16;
        v47 = 2048;
        v48 = v35;
        v49 = 2048;
        v50 = v38;
        _os_log_error_impl(&dword_1B8270000, v37, OS_LOG_TYPE_ERROR, "%s:%d: %d: offset(%lld) < freeRegion (%lld)", buf, 0x2Cu);
      }
      *__error() = v36;
      v39 = __si_assert_copy_extra(0);
      v25 = v39;
      v40 = "";
      if (v39)
        v40 = v39;
      __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 983, "result", v40);
      goto LABEL_36;
    }
    *v19 = v23;
    v9 = *(_QWORD *)(a1 + 232);
LABEL_25:
    if (v9 <= a2)
    {
      v24 = __si_assert_copy_extra(0);
      v25 = v24;
      v26 = "";
      if (v24)
        v26 = v24;
      __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 989, "inOffset < inStorage->_windows._freeRegion", v26);
    }
    else
    {
      if (a2 + a4 <= v9)
        return 1;
      v27 = __si_assert_copy_extra(0);
      v25 = v27;
      v28 = "";
      if (v27)
        v28 = v27;
      __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 990, "inOffset+inNewSize <= inStorage->_windows._freeRegion", v28);
    }
LABEL_36:
    free(v25);
    if (__valid_fs(-1))
      v29 = 2989;
    else
      v29 = 3072;
    *(_DWORD *)v29 = -559038737;
    abort();
  }
  return result;
}

unint64_t storageAllocOffset(uint64_t a1, unsigned int a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  _BOOL4 v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  int v23;
  NSObject *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  char *v31;
  const char *v32;
  char *v33;
  const char *v34;
  char *v35;
  char *v36;
  const char *v37;
  uint64_t v38;
  char *v39;
  const char *v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  unsigned int v46;
  __int16 v47;
  unint64_t v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int *)(a1 + 4);
  v8 = a2 - v7;
  if (a2 <= v7)
  {
    v14 = 0;
    v13 = 8;
  }
  else
  {
    v9 = __clz(v8);
    v11 = (v8 & (v8 - 1)) != 0 || a2 == (_DWORD)v7;
    v12 = v11 - v9;
    v13 = 8;
    if (v12 < -28)
    {
      v14 = 0;
    }
    else
    {
      v14 = v12 + 28;
      if ((v12 + 28) >= 0x18)
      {
        v31 = __si_assert_copy_extra(0);
        v27 = v31;
        v32 = "";
        if (v31)
          v32 = v31;
        __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 865, "idx < (24)", v32);
        goto LABEL_48;
      }
      v13 = 8 << v14;
    }
  }
  if (v13 < v8)
  {
    v26 = __si_assert_copy_extra(0);
    v27 = v26;
    v28 = "";
    if (v26)
      v28 = v26;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 866, "((uint32_t)8<<idx) >= inSize - baseSize", v28);
    goto LABEL_48;
  }
  if (v13 + v7 < a2)
  {
    v29 = __si_assert_copy_extra(0);
    v27 = v29;
    v30 = "";
    if (v29)
      v30 = v29;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 867, "rsize+baseSize >= inSize", v30);
    goto LABEL_48;
  }
  *a4 = 0;
  v15 = a1 + 8 * v14;
  v18 = *(_QWORD *)(v15 + 8);
  v17 = (unint64_t *)(v15 + 8);
  v16 = v18;
  if (!v18)
  {
    v16 = takeBuddyPage_2842(a1, v14);
    if (!v16)
    {
      v16 = *(_QWORD *)(a1 + 232);
      if (v7 + (16 << v14) + v16 + 8 >= *(_QWORD *)(a1 + 224))
      {
        if (!_storageExpand(a1, v13))
          return 0;
        v16 = *(_QWORD *)(a1 + 232);
      }
      *(_QWORD *)(a1 + 232) = v7 + v13 + v16;
    }
    goto LABEL_23;
  }
  if (v16 >= *(_QWORD *)(a1 + 232))
  {
    v35 = __si_assert_copy_extra(*(_DWORD **)(a1 + 216));
    v36 = v35;
    v37 = "";
    if (v35)
      v37 = v35;
    __message_assert("%s:%u: failed assertion '%s' %s offset: 0x%lld, freeRegion: 0x%lld", "storage.c", 192, "(head==0) || (head < storage->_windows._freeRegion)", v37, v16, *(_QWORD *)(a1 + 232));
    free(v36);
    if (__valid_fsp(*(_DWORD **)(a1 + 216)))
      goto LABEL_49;
    goto LABEL_44;
  }
  v19 = storageResolvePtr(a1, v16, 8uLL, 1);
  if (!v19)
  {
    v39 = __si_assert_copy_extra(0);
    v27 = v39;
    v40 = "";
    if (v39)
      v40 = v39;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 873, "ptr", v40);
    goto LABEL_48;
  }
  v20 = *(_QWORD *)v19;
  if (!*(_QWORD *)v19 || *(_QWORD *)(a1 + 232) > v20)
  {
    *v17 = v20;
    v21 = *a4;
    *a4 = v21 + 1;
    *(_QWORD *)(a3 + 8 * v21) = v16;
    *(_QWORD *)storageResolvePtr(a1, v16, 8uLL, 1) = 0;
LABEL_23:
    if (v16 < *(_QWORD *)(a1 + 232))
      return v16;
    v33 = __si_assert_copy_extra(0);
    v27 = v33;
    v34 = "";
    if (v33)
      v34 = v33;
    __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 919, "result < inStorage->_windows._freeRegion", v34);
LABEL_48:
    free(v27);
    if (__valid_fs(-1))
    {
LABEL_49:
      v38 = 2989;
LABEL_50:
      *(_DWORD *)v38 = -559038737;
      abort();
    }
LABEL_44:
    v38 = 3072;
    goto LABEL_50;
  }
  v23 = *__error();
  v24 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    v25 = *(_QWORD *)(a1 + 232);
    *(_DWORD *)buf = 136316162;
    v42 = "_storeageSetFreeListHead";
    v43 = 1024;
    v44 = 200;
    v45 = 1024;
    v46 = v14;
    v47 = 2048;
    v48 = v20;
    v49 = 2048;
    v50 = v25;
    _os_log_error_impl(&dword_1B8270000, v24, OS_LOG_TYPE_ERROR, "%s:%d: %d: offset(%lld) < freeRegion (%lld)", buf, 0x2Cu);
  }
  v16 = 0;
  *__error() = v23;
  return v16;
}

_QWORD *slab_new_slab(_QWORD **a1, unint64_t a2, int a3)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  char *v7;
  _QWORD *v9;
  unint64_t v10;
  char *v12;
  char *v13;
  const char *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;

  v4 = *a1;
  v19 = *a1;
  if (a2 < 0xFFFE9)
  {
    if (!slab_vm_allocate(&v19, 0x100000uLL, a3))
    {
      v9 = *a1;
      v6 = v19;
      v19[2] = v19 + 0x20000;
      v10 = (unint64_t)v6 + a2 + 24;
      atomic_store(v10, v6 + 1);
      *v6 = v9;
      v6[1] = v10 + a2;
      __dmb(0xBu);
      *a1 = v19;
      return v6 + 3;
    }
    v15 = __si_assert_copy_extra_268();
    v13 = v15;
    v16 = "";
    if (v15)
      v16 = v15;
    __message_assert(v15, "slab_allocator.c", 496, "kr==0", v16);
LABEL_13:
    free(v13);
    if (__valid_fs(-1))
      v17 = 2989;
    else
      v17 = 3072;
    *(_DWORD *)v17 = -559038737;
    abort();
  }
  v18 = 0;
  v5 = a2 + 24;
  if (slab_vm_allocate(&v18, a2 + 24, a3))
  {
    v12 = __si_assert_copy_extra_268();
    v13 = v12;
    v14 = "";
    if (v12)
      v14 = v12;
    __message_assert(v12, "slab_allocator.c", 480, "kr == 0", v14);
    goto LABEL_13;
  }
  v6 = v18;
  v7 = (char *)v18 + v5;
  atomic_store((unint64_t)v18 + v5, v4 + 1);
  v6[2] = v7;
  *v6 = *v4;
  *v4 = v6;
  return v6 + 3;
}

void si_routine_protectionClassC(_BYTE *a1)
{
  (*(void (**)(_QWORD))a1)(*((_QWORD *)a1 + 1));
  if (a1[16])
    free(a1);
}

uint64_t si_openat_protected(uint64_t a1, const char *a2, int a3, int a4)
{
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v11;

  v11 = 0;
  if ((fd_setDir(a1, (int *)&v11) & 1) == 0)
    return 0xFFFFFFFFLL;
  v7 = open_dprotected_np(a2, a3, a4, 0, 384);
  v8 = *__error();
  v9 = v11;
  MEMORY[0x1BCCB1484](v11);
  if ((v9 & 0x80000000) == 0)
    close(v9);
  if ((_DWORD)v7 == -1 && v8)
  {
    *__error() = v8;
    return 0xFFFFFFFFLL;
  }
  return v7;
}

uint64_t si_indexDeleteByOid(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[2];
  uint64_t (*v10)(uint64_t, uint64_t);
  void *v11;
  uint64_t v12;

  result = RLEOIDArrayIsEmpty(a2);
  if (!(_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 1384);
    v6 = *(_QWORD *)(a1 + 1392);
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v10 = __si_indexDeleteByOid_block_invoke;
    v11 = &__block_descriptor_tmp_180;
    v12 = a2;
    if (v5 && *(_DWORD *)(v5 + 8))
    {
      v7 = 0;
      while (1)
      {
        result = ((uint64_t (*)(_QWORD *, _QWORD, _QWORD))v10)(v9, *(_QWORD *)(*(_QWORD *)v5 + 8 * v7), 0);
        if (!(_DWORD)result)
          break;
        if (++v7 >= (unint64_t)*(unsigned int *)(v5 + 8))
          goto LABEL_8;
      }
    }
    else
    {
LABEL_8:
      if (v6 && *(_DWORD *)(v6 + 8))
      {
        v8 = 0;
        do
        {
          result = ((uint64_t (*)(_QWORD *, _QWORD, uint64_t))v10)(v9, *(_QWORD *)(*(_QWORD *)v6 + 8 * v8), 1);
          if (!(_DWORD)result)
            break;
          ++v8;
        }
        while (v8 < *(unsigned int *)(v6 + 8));
      }
    }
  }
  return result;
}

uint64_t setDocumentAttributes(uint64_t a1, uint64_t a2, const void *a3, int a4, const void *a5, uint64_t a6, int a7, const __CFDictionary *a8, float a9, const void *a10, unint64_t a11, uint64_t *a12, unsigned int a13, uint64_t a14, uint64_t (*a15)(uint64_t), uint64_t a16, unsigned int a17, int a18, int a19, int a20,unsigned __int8 a21,uint64_t a22)
{
  int v24;
  NSObject *v25;
  uint64_t v26;
  int v27;
  NSObject *v28;
  char v36;
  const void *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  signed int v41;
  char *v42;
  char *v43;
  pthread_override_s *v44;
  char v45;
  void *v46;
  uint64_t v47;
  unsigned int v48;
  unint64_t v49;
  signed int v50;
  uint64_t v51;
  unsigned int v52;
  _QWORD *v53;
  _QWORD *v54;
  int v55;
  NSObject *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  int v61;
  BOOL v62;
  const char *v63;
  int v64;
  BOOL v65;
  const char *v66;
  char v67;
  const void *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  NSObject *v73;
  int v74;
  NSObject *v75;
  CFTypeID TypeID;
  CFTypeID v77;
  CFTypeID v78;
  int v79;
  uint64_t Count;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  CFTypeID v87;
  const __CFDictionary *v88;
  uint64_t v89;
  const void **v90;
  size_t v91;
  uint64_t v92;
  BOOL v93;
  const void *v94;
  const void *Value;
  CFTypeID v96;
  CFTypeID v97;
  const void *v98;
  int v99;
  unsigned __int8 v100;
  unsigned int v101;
  uint64_t v102;
  const void *v103;
  const void *v104;
  CFTypeID v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  void (__cdecl *v111)(const void *, const void *, void *);
  int v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  char v116;
  unsigned int updated;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  char v121;
  _BYTE *v122;
  BOOL v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  unint64_t v128;
  unsigned int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  unint64_t v139;
  int v140;
  unsigned int *v141;
  unsigned int v142;
  uint64_t v143;
  char v144;
  CFMutableDictionaryRef MutableCopy;
  CFMutableDictionaryRef v146;
  uint64_t v147;
  char v148;
  unsigned int v149;
  uint64_t v150;
  char v151;
  unsigned int v152;
  uint64_t v153;
  char v154;
  BOOL v155;
  uint64_t v156;
  int v157;
  NSObject *v158;
  __CFDictionary *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  BOOL v165;
  int v166;
  NSObject *v167;
  int v169;
  NSObject *v170;
  int v171;
  BOOL v172;
  int v173;
  const char *v174;
  char *v175;
  char *v176;
  const char *v177;
  uint64_t v178;
  char *v179;
  char *v180;
  const char *v181;
  const char *v182;
  char *v183;
  char *v184;
  int v185;
  NSObject *v186;
  char *v187;
  char *v188;
  const char *v189;
  uint64_t v190;
  const void *v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t (*v195)(uint64_t);
  int v196;
  int v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  const void *v206;
  unint64_t v207;
  _BYTE *v208;
  int v209;
  int v210;
  CFDictionaryRef v211;
  int v212;
  const void *v213;
  char v214;
  uint64_t v215;
  _BYTE v216[12];
  __int16 v217;
  int v218;
  __int16 v219;
  const char *v220;
  __int16 v221;
  uint64_t v222;
  __int16 v223;
  int v224;
  __int16 v225;
  uint64_t v226;
  _OWORD v227[2];
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  uint64_t v243;

  v243 = *MEMORY[0x1E0C80C00];
  v215 = 0;
  v242 = 0u;
  v241 = 0u;
  v240 = 0u;
  v239 = 0u;
  v238 = 0u;
  v237 = 0u;
  v236 = 0u;
  v235 = 0u;
  v234 = 0u;
  v233 = 0u;
  v232 = 0u;
  v231 = 0u;
  v230 = 766030772;
  if (!*(_BYTE *)(a1 + 8))
  {
    bzero(v227, 0x400uLL);
    if ((setDocumentAttributes__COUNT_ & 1) == 0)
    {
      setDocumentAttributes__COUNT_ = 1;
      v27 = *__error();
      v28 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        v64 = fcntl(*(_DWORD *)(a1 + 56), 50, v227);
        if (LOBYTE(v227[0]))
          v65 = v64 < 0;
        else
          v65 = 1;
        *(_DWORD *)v216 = 136315906;
        *(_QWORD *)&v216[4] = "setDocumentAttributes";
        v66 = "";
        if (!v65)
          v66 = (const char *)v227;
        v217 = 1024;
        v218 = 4264;
        v219 = 2080;
        v220 = v66;
        v221 = 2080;
        v222 = a1 + 15168;
        _os_log_error_impl(&dword_1B8270000, v28, OS_LOG_TYPE_ERROR, "%s:%d: trying to set to invalid index %s/%s", v216, 0x26u);
      }
      *__error() = v27;
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_BYTE *)(a1 + 15163))
  {
    bzero(v227, 0x400uLL);
    if ((setDocumentAttributes__COUNT__38 & 1) == 0)
    {
      setDocumentAttributes__COUNT__38 = 1;
      v24 = *__error();
      v25 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v61 = fcntl(*(_DWORD *)(a1 + 56), 50, v227);
        if (LOBYTE(v227[0]))
          v62 = v61 < 0;
        else
          v62 = 1;
        *(_DWORD *)v216 = 136315906;
        *(_QWORD *)&v216[4] = "setDocumentAttributes";
        v63 = "";
        if (!v62)
          v63 = (const char *)v227;
        v217 = 1024;
        v218 = 4270;
        v219 = 2080;
        v220 = v63;
        v221 = 2080;
        v222 = a1 + 15168;
        _os_log_error_impl(&dword_1B8270000, v25, OS_LOG_TYPE_ERROR, "%s:%d: trying to modify read only index %s/%s", v216, 0x26u);
      }
      *__error() = v24;
    }
    return 1;
  }
  if (_indexProgress(a1))
  {
    if (gSILogLevels[0] < 5)
      return 89;
    v169 = *__error();
    v170 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v227[0]) = 0;
      _os_log_impl(&dword_1B8270000, v170, OS_LOG_TYPE_DEFAULT, "setDocumentAttributes canceled", (uint8_t *)v227, 2u);
    }
    *__error() = v169;
    return 89;
  }
  v209 = a7;
  v212 = a4;
  v36 = atomic_load((unsigned int *)(a1 + 28));
  if ((v36 & 3) != 0)
  {
    v185 = *__error();
    v186 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v227[0]) = 136315394;
      *(_QWORD *)((char *)v227 + 4) = "setDocumentAttributes";
      WORD6(v227[0]) = 1024;
      *(_DWORD *)((char *)v227 + 14) = 4283;
      _os_log_error_impl(&dword_1B8270000, v186, OS_LOG_TYPE_ERROR, "%s:%d: trying to add to read only index", (uint8_t *)v227, 0x12u);
    }
    *__error() = v185;
    v187 = __si_assert_copy_extra_2151(0, -1);
    v188 = v187;
    v189 = "";
    if (v187)
      v189 = v187;
    __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 4284, "0", v189);
    free(v188);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v213 = a10;
  v210 = a21;
  if ((!a21 || !(_DWORD)a2 && !v213) && !*(_QWORD *)(a1 + 14352))
  {
    v37 = a5;
    v38 = a1 + 14680;
    HIDWORD(v40) = qos_class_self() - 9;
    LODWORD(v40) = HIDWORD(v40);
    v39 = v40 >> 2;
    if (v39 > 6)
      v41 = 0;
    else
      v41 = dword_1B8630ED0[v39];
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 14680));
    if (*(_QWORD *)(a1 + 14864) || *(_DWORD *)(a1 + 14876) || *(_BYTE *)(a1 + 14892))
      goto LABEL_25;
    if (v41 <= 5)
    {
      if (*(_QWORD *)(a1 + 16 * v41 + 14744))
      {
LABEL_25:
        db_rwlock_wait(a1 + 14680, v41, 2);
LABEL_26:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14680));
        if (!*(_QWORD *)(a1 + 14352))
        {
          v42 = TermUpdateSetCreate((uint64_t (*)())_indexProgress, a1, *(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 60), 32 * *(unsigned __int8 *)(a1 + 38), *(_QWORD *)(a1 + 14344), *(_DWORD *)(a1 + 48), *(const void **)(a1 + 4912));
          if (!v42)
          {
            v72 = *__error();
            v73 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v227[0]) = 136315394;
              *(_QWORD *)((char *)v227 + 4) = "setDocumentAttributes";
              WORD6(v227[0]) = 1024;
              *(_DWORD *)((char *)v227 + 14) = 4296;
              _os_log_error_impl(&dword_1B8270000, v73, OS_LOG_TYPE_ERROR, "%s:%d: TermUpdateSetCreate failed", (uint8_t *)v227, 0x12u);
            }
            *__error() = v72;
            db_write_unlock(v38);
            return 12;
          }
          v43 = v42;
          if (*(_BYTE *)(a1 + 15162))
            *((_QWORD *)v42 + 76) = getPropertyStringCallback;
          *((_QWORD *)v42 + 35) = a1 + 14144;
          OSMemoryBarrier();
          *(_QWORD *)(a1 + 14352) = v43;
        }
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 14680));
        *(_DWORD *)(a1 + 14884) = 0;
        v44 = *(pthread_override_s **)(a1 + 14856);
        *(_QWORD *)(a1 + 14856) = 0;
        *(_QWORD *)(a1 + 14864) = 0;
        v45 = *(_DWORD *)(a1 + 14876) != 0;
        *(_BYTE *)(a1 + 14892) = 0;
        db_rwlock_wakeup(a1 + 14680, v45, 0);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14680));
        a5 = v37;
        if (v44)
          pthread_override_qos_class_end_np(v44);
        goto LABEL_33;
      }
      v106 = v41 - 1;
      v107 = (uint64_t *)(a1 + 16 * v41 + 14760);
      while (v106 != 4)
      {
        v108 = *v107;
        v107 += 2;
        ++v106;
        if (v108)
        {
          if (v106 <= 4)
            goto LABEL_25;
          break;
        }
      }
    }
    *(_QWORD *)(a1 + 14864) = pthread_self();
    goto LABEL_26;
  }
LABEL_33:
  if (__THREAD_SLOT_KEY)
  {
    v46 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (v46)
      goto LABEL_35;
  }
  else
  {
    makeThreadId();
    v46 = pthread_getspecific(__THREAD_SLOT_KEY);
    if (v46)
    {
LABEL_35:
      if ((unint64_t)v46 < 0x801)
        goto LABEL_36;
    }
  }
  makeThreadId();
  v46 = pthread_getspecific(__THREAD_SLOT_KEY);
LABEL_36:
  v208 = (_BYTE *)(a1 + 14676);
  v47 = (uint64_t)v46 - 1;
  HIDWORD(v49) = qos_class_self() - 9;
  LODWORD(v49) = HIDWORD(v49);
  v48 = v49 >> 2;
  if (v48 > 6)
    v50 = 0;
  else
    v50 = dword_1B8630ED0[v48];
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14464));
  if (*(_QWORD *)(a1 + 14648) || *(_DWORD *)(a1 + 14660) || *v208)
    goto LABEL_42;
  if (v50 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v50 + 14528))
    {
LABEL_42:
      db_rwlock_wait(a1 + 14464, v50, 2);
      goto LABEL_43;
    }
    v69 = v50 - 1;
    v70 = (uint64_t *)(a1 + 16 * v50 + 14544);
    while (v69 != 4)
    {
      v71 = *v70;
      v70 += 2;
      ++v69;
      if (v71)
      {
        if (v69 <= 4)
          goto LABEL_42;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 14648) = pthread_self();
LABEL_43:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14464));
  v51 = v47;
  CIOnThreadCleanUpPush(v47, (uint64_t)si_rwlock_wrunlock_2447, a1 + 14464);
  if ((indexMarkDirty(a1) & 1) == 0)
  {
    v55 = *__error();
    v56 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v227[0]) = 136315394;
      *(_QWORD *)((char *)v227 + 4) = "setDocumentAttributes";
      WORD6(v227[0]) = 1024;
      *(_DWORD *)((char *)v227 + 14) = 4323;
      _os_log_error_impl(&dword_1B8270000, v56, OS_LOG_TYPE_ERROR, "%s:%d: indexMarkDirty failed", (uint8_t *)v227, 0x12u);
    }
    *__error() = v55;
    CIOnThreadCleanUpPop(v51);
    return 22;
  }
  v52 = a13;
  if (!(_DWORD)a2 && !v213)
  {
    CIOnThreadCleanUpPop(v51);
    v53 = *(_QWORD **)(a1 + 14352);
    switch(a13)
    {
      case 0u:
        v54 = v53 + 16;
        goto LABEL_92;
      case 1u:
        v54 = v53 + 21;
        goto LABEL_92;
      case 2u:
        v54 = v53 + 18;
        goto LABEL_92;
      case 3u:
        v54 = v53 + 15;
        goto LABEL_92;
      case 6u:
        v54 = v53 + 17;
        goto LABEL_92;
      case 7u:
        v54 = v53 + 24;
        goto LABEL_92;
      case 9u:
        v54 = v53 + 25;
        goto LABEL_92;
      case 0xAu:
        v54 = v53 + 26;
        goto LABEL_92;
      case 0xBu:
        v54 = v53 + 27;
LABEL_92:
        ++*v54;
        break;
      default:
        break;
    }
    v26 = 0;
    if (a12)
      *a12 = 0;
    return v26;
  }
  v201 = a22;
  v198 = a19;
  v197 = a18;
  v202 = a17;
  v57 = a11;
  v211 = a8;
  v206 = a5;
  v207 = a11;
  v199 = a6;
  v203 = a12;
  v196 = a20;
  v205 = a13;
  if (a11)
  {
    v58 = *(_QWORD *)(a1 + 72);
    if (a11 <= v58 || v58 + *(unsigned int *)(a1 + 60) <= a11)
    {
      LODWORD(v204) = 0;
    }
    else
    {
      v59 = *(_QWORD *)(*(_QWORD *)(a1 + 14368) + 8 * (a11 - v58));
      if (v59)
        v60 = v59 == a6;
      else
        v60 = 1;
      if (v60)
      {
        LODWORD(v204) = 0;
      }
      else
      {
        v204 = *(_QWORD *)(*(_QWORD *)(a1 + 14368) + 8 * (a11 - v58));
        bzero(v227, 0x400uLL);
        v57 = a11;
        if (setDocumentAttributes__COUNT__40 >= 1)
        {
          --setDocumentAttributes__COUNT__40;
          v74 = *__error();
          v75 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            v171 = fcntl(*(_DWORD *)(a1 + 56), 50, v227);
            if (LOBYTE(v227[0]))
              v172 = v171 < 0;
            else
              v172 = 1;
            v173 = *(_DWORD *)(a1 + 72);
            v174 = "";
            if (!v172)
              v174 = (const char *)v227;
            *(_DWORD *)v216 = 136316418;
            *(_QWORD *)&v216[4] = "setDocumentAttributes";
            v217 = 1024;
            v218 = 4345;
            v219 = 2080;
            v220 = v174;
            v221 = 2048;
            v222 = a6;
            v223 = 1024;
            v224 = v207 - v173;
            v225 = 2048;
            v226 = v204;
            _os_log_error_impl(&dword_1B8270000, v75, OS_LOG_TYPE_ERROR, "%s:%d: %s setDocumentAttributes error - bad oid/docid mapping oid: %lld, docId: %d, old oid: %lld ", v216, 0x36u);
          }
          *__error() = v74;
          a8 = v211;
          v57 = v207;
        }
        LODWORD(v204) = -3;
      }
      v52 = v205;
    }
    v68 = v213;
    if (v52 == 8)
    {
      v215 = v57;
      v67 = 1;
    }
    else
    {
      v67 = 0;
    }
  }
  else
  {
    LODWORD(v204) = 0;
    v67 = 0;
    v68 = v213;
  }
  v194 = a16;
  v195 = a15;
  v200 = a14;
  if (v68)
  {
    TypeID = CFDictionaryGetTypeID();
    v77 = CFGetTypeID(v68);
    if (a8)
    {
      if (TypeID == v77)
      {
        v78 = CFDictionaryGetTypeID();
        if (v78 == CFGetTypeID(a8))
          goto LABEL_111;
      }
    }
  }
  if (v212 && (v212 != (_DWORD)a2 || memcmp(v206, a3, 8 * a2)))
  {
    if (!v68)
    {
LABEL_113:
      v215 = v207;
      if (v207)
      {
        *(_QWORD *)v216 = 0;
        goto LABEL_117;
      }
      goto LABEL_115;
    }
LABEL_111:
    if (CFDictionaryGetValue((CFDictionaryRef)v68, 0))
    {
      v79 = 1;
      goto LABEL_116;
    }
    goto LABEL_113;
  }
LABEL_115:
  v79 = 0;
LABEL_116:
  *(_QWORD *)v216 = 0;
  if ((v67 & 1) != 0)
  {
LABEL_117:
    Count = CIOnThreadCleanUpPop(v51);
    if (v68)
    {
      Count = CFDictionaryGetCount((CFDictionaryRef)v68);
      v81 = Count;
    }
    else
    {
      v81 = 0;
    }
    v88 = v211;
    v193 = &v190;
    MEMORY[0x1E0C80A78](Count);
    v90 = (const void **)((char *)&v190 - v89);
    bzero((char *)&v190 - v89, v91);
    if (v68)
      CFDictionaryGetKeysAndValues((CFDictionaryRef)v68, v90, 0);
    if (v81 < 1)
    {
      v93 = 0;
      v100 = 0;
      goto LABEL_161;
    }
    if (v88)
    {
      v191 = a3;
      v192 = a2;
      v92 = 0;
      v93 = 1;
      while (1)
      {
        v94 = v90[v92];
        if ((v94 & 0x80000000) == 0)
        {
          Value = CFDictionaryGetValue((CFDictionaryRef)v68, v94);
          v96 = CFGetTypeID(Value);
          v97 = CFNullGetTypeID();
          v98 = CFDictionaryGetValue(v88, v90[v92]);
          if (v96 == v97)
          {
            v88 = v211;
            v68 = v213;
            if (v98)
              goto LABEL_141;
          }
          else
          {
            if (!v98)
            {
              v100 = 1;
              a3 = v191;
              LODWORD(a2) = v192;
              v88 = v211;
              v68 = v213;
              goto LABEL_161;
            }
            v99 = CFEqual(Value, v98);
            v88 = v211;
            v68 = v213;
            if (!v99)
            {
LABEL_141:
              v100 = 1;
LABEL_150:
              a3 = v191;
              LODWORD(a2) = v192;
              goto LABEL_161;
            }
          }
        }
        v93 = ++v92 < v81;
        if (v81 == v92)
        {
          v100 = 0;
          goto LABEL_150;
        }
      }
    }
    v102 = 0;
    v93 = 1;
    do
    {
      v103 = v90[v102];
      if ((v103 & 0x80000000) == 0)
      {
        v104 = CFDictionaryGetValue((CFDictionaryRef)v68, v103);
        v105 = CFGetTypeID(v104);
        v60 = v105 == CFNullGetTypeID();
        v88 = v211;
        if (!v60)
        {
          v100 = 1;
          goto LABEL_161;
        }
      }
      v93 = ++v102 < v81;
    }
    while (v81 != v102);
    v100 = 0;
LABEL_161:
    *(_QWORD *)&v227[0] = v88;
    *((_QWORD *)&v227[0] + 1) = v68;
    v227[1] = 0uLL;
    v228 = v200;
    v229 = v100;
    v109 = v209;
    v110 = v207;
    if (v68)
    {
      if (v88)
      {
        CFDictionaryApplyFunction((CFDictionaryRef)v68, (CFDictionaryApplierFunction)attributeMergeInfoApplier, v227);
        CFDictionaryApplyFunction(v88, (CFDictionaryApplierFunction)attributeMergeInfoRemoveApplier, v227);
        if (v93)
        {
          v111 = (void (__cdecl *)(const void *, const void *, void *))attributeMergeInfoWildcardApplier;
LABEL_167:
          CFDictionaryApplyFunction(v88, v111, v227);
        }
      }
      else if ((_DWORD)v205 == 8)
      {
        *((_QWORD *)&v227[1] + 1) = CFRetain(v68);
      }
    }
    else if (v88)
    {
      v111 = (void (__cdecl *)(const void *, const void *, void *))attributeMergeInfoRemoveApplier;
      goto LABEL_167;
    }
    v112 = v212;
    v26 = v204;
    if (v227[1] != 0 || v212 | a2 && (v212 != (_DWORD)a2 || memcmp(v206, a3, 8 * a2)))
    {
      if (v112 == (_DWORD)a2)
      {
        if (!memcmp(v206, a3, 8 * a2))
          v112 = 0;
        else
          v112 = a2;
        LODWORD(a2) = v112;
      }
      if (v210)
      {
        create_termupdateset(a1, (char **)v216, (uint64_t)&v230);
        v114 = v215;
        v113 = *(_QWORD *)v216;
        v115 = v227[1];
        v116 = atomic_load((unsigned int *)(a1 + 28));
        TermUpdateSetUpdateDocumentInfo(v113, v202, v114, *((const __CFDictionary **)&v115 + 1), (const __CFDictionary *)v115, v205, 0, 0, 0, 0, (v116 & 8) != 0);
        updated = mergeIntoUpdateSet(a1, v197, v198, &v215, v109, v110, v196, 0, a9, a2, (uint64_t)a3, v199, v112, (uint64_t)v206, v203, *(uint64_t *)v216, 0, v195, v194,
                    v201);
        if (updated)
          v26 = updated;
        else
          v26 = v26;
      }
      else
      {
        v118 = v215;
        if (!v215)
        {
          v118 = _getAndSetDocId(a1, v199, v109, v197, v198, &v214, 0, a9);
          v215 = v118;
        }
        db_read_lock(a1 + 14680);
        v119 = *(_QWORD *)(a1 + 14352);
        *(_QWORD *)v216 = v119;
        v120 = v227[1];
        v121 = atomic_load((unsigned int *)(a1 + 28));
        TermUpdateSetUpdateDocumentInfo(v119, v202, v118, *((const __CFDictionary **)&v120 + 1), (const __CFDictionary *)v120, v205, (uint64_t)a3, a2, (uint64_t)v206, v112, (v121 & 8) != 0);
        v122 = v208;
        if (v208[1716])
          v123 = 1;
        else
          v123 = index_termUpdateSetShouldFlush(a1, *(_QWORD *)(a1 + 14352), v196) != 0;
        v124 = v201;
        v125 = v207;
        v122[1716] = v123;
        if (v124)
          (*(void (**)(uint64_t, unint64_t))(v124 + 16))(v124, v125);
        db_read_unlock(a1 + 14680);
        *v203 = 0;
      }
      if (*(_QWORD *)&v227[1])
        CFRelease(*(CFTypeRef *)&v227[1]);
      if (*((_QWORD *)&v227[1] + 1))
        CFRelease(*((CFTypeRef *)&v227[1] + 1));
    }
    if (!(_DWORD)v26)
      return v26;
LABEL_256:
    v166 = *__error();
    v167 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v227[0]) = 136315650;
      *(_QWORD *)((char *)v227 + 4) = "setDocumentAttributes";
      WORD6(v227[0]) = 1024;
      *(_DWORD *)((char *)v227 + 14) = 4556;
      WORD1(v227[1]) = 1024;
      DWORD1(v227[1]) = v26;
      _os_log_error_impl(&dword_1B8270000, v167, OS_LOG_TYPE_ERROR, "%s:%d: Got error %d", (uint8_t *)v227, 0x18u);
    }
    *__error() = v166;
    return v26;
  }
  if ((v210 & 1) == 0 && (*(_DWORD *)(a1 + 60) + 1) >= *(_DWORD *)(a1 + 64))
  {
    v82 = indexGrowDocumentPayloads(a1, v195, v194);
    if ((_DWORD)v82)
    {
      v83 = v82;
      CIOnThreadCleanUpPop(v51);
      return v83;
    }
  }
  v84 = v207;
  if (!v207)
  {
    v101 = 0;
    v86 = v212;
    LOBYTE(v87) = v209;
    goto LABEL_215;
  }
  v85 = *(_QWORD *)(a1 + 72);
  v86 = v212;
  LOBYTE(v87) = v209;
  if (v207 <= v85 || v85 + *(unsigned int *)(a1 + 60) <= v207)
  {
    v101 = 0;
    goto LABEL_215;
  }
  if (!v209)
  {
    if (*(_BYTE *)(a1 + 37))
      LOBYTE(v87) = *(_BYTE *)(*(_QWORD *)(a1 + 14392) + (v207 - v85));
    else
      LODWORD(v87) = (*(_DWORD *)(*(_QWORD *)(a1 + 14392) + 4 * ((v207 - v85) / 5uLL)) >> (6 * (((int)v207 - (int)v85) % 5u))) & 0x3F;
  }
  if (!*(_BYTE *)(a1 + 37))
  {
    v127 = v207 - v85;
    v128 = (v207 - v85) / 5uLL;
    v129 = 6 * (v127 % 5);
    v130 = *(_QWORD *)(a1 + 14392);
    v131 = *(_DWORD *)(v130 + 4 * v128) & ~(63 << (6 * (v127 % 5)));
    v132 = *(_QWORD *)(a1 + 14400);
    if (v132)
    {
      v133 = (uint64_t *)MEMORY[0x1E0C85AD8];
      v134 = v128 / (8 * *MEMORY[0x1E0C85AD8]);
      v135 = (v128 / *MEMORY[0x1E0C85AD8]) & 7;
      *(_BYTE *)(v132 + v134) |= 1 << v135;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 14400) + v134))
      {
        v136 = *v133;
        v137 = v135 | (8 * (_DWORD)v134);
        if (v136 * v137 > v128)
        {
          v183 = __si_assert_copy_extra_2151(0, -1);
          v180 = v183;
          v181 = "";
          if (v183)
            v181 = v183;
          v182 = "vm_page_size*(gslot*8+bslot) <=slot";
        }
        else
        {
          if (v136 * (unint64_t)(v137 + 1) > v128)
          {
            v130 = *(_QWORD *)(a1 + 14392);
            v138 = *(unsigned __int8 *)(a1 + 37);
            *(_DWORD *)(v130 + 4 * v128) = v131;
            v139 = v84 - *(_QWORD *)(a1 + 72);
            if (v138)
            {
              v140 = *(unsigned __int8 *)(v130 + v139);
              goto LABEL_211;
            }
            v128 = v139 / 5uLL;
            v129 = 6 * (v139 % 5);
LABEL_210:
            v140 = (*(_DWORD *)(v130 + 4 * v128) >> v129) & 0x3F;
LABEL_211:
            if (v140)
            {
              v175 = __si_assert_copy_extra_2151(0, -1);
              v176 = v175;
              v177 = "";
              if (v175)
                v177 = v175;
              __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 4390, "((cindex)->coreSpotlight?({ ((uint8_t *)(cindex)->groups)[((uint32_t)(oldDocID-cindex->base))]; }):({ ui"
                "nt32_t __where=(uint32_t)((uint32_t)(oldDocID-cindex->base)); uint32_t __slot = __where/5; uint32_t __sh"
                "ift= (__where-(__slot*5))*6; uint32_t __word = ((uint32_t)((cindex)->groups[__slot])); (__word >> __shif"
                "t) & 0x3F ; }))==(inval&0x3F)",
                v177);
              free(v176);
              if (__valid_fs(-1))
                v178 = 2989;
              else
                v178 = 3072;
              *(_DWORD *)v178 = -559038737;
              abort();
            }
            goto LABEL_212;
          }
          v184 = __si_assert_copy_extra_2151(0, -1);
          v180 = v184;
          v181 = "";
          if (v184)
            v181 = v184;
          v182 = "vm_page_size*(gslot*8+bslot+1) >slot";
        }
      }
      else
      {
        v179 = __si_assert_copy_extra_2151(0, -1);
        v180 = v179;
        v181 = "";
        if (v179)
          v181 = v179;
        v182 = "(cindex)->groupMap[gslot]";
      }
      __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 4390, v182, v181);
      free(v180);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    *(_DWORD *)(v130 + 4 * v128) = v131;
    goto LABEL_210;
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 14392) + (v207 - v85)) = 0;
  v126 = *(_QWORD *)(a1 + 14400);
  if (v126)
    *(_BYTE *)(v126 + (v84 - *(_DWORD *)(a1 + 72)) / (unint64_t)(32 * *MEMORY[0x1E0C85AD8])) |= 1 << (((v84 - *(_DWORD *)(a1 + 72)) / (unint64_t)(4 * *MEMORY[0x1E0C85AD8])) & 7);
LABEL_212:
  v141 = (unsigned int *)(a1 + 12);
  do
    v142 = __ldaxr(v141);
  while (__stlxr(v142 + 1, v141));
  v101 = v84 - *(_DWORD *)(a1 + 72);
LABEL_215:
  CIOnThreadCleanUpPop(v51);
  v143 = v207;
  if (v211
    && v68
    && (v144 = v87, v87 = CFDictionaryGetTypeID(), v60 = v87 == CFGetTypeID(v68), LOBYTE(v87) = v144, v143 = v207, v60))
  {
    MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v211);
    *(_QWORD *)&v227[0] = v211;
    v146 = MutableCopy;
    *((_QWORD *)&v227[0] + 1) = v200;
    *(_QWORD *)&v227[1] = MutableCopy;
    CFDictionaryApplyFunction((CFDictionaryRef)v68, (CFDictionaryApplierFunction)mergeAttributesForNewEntryApplier, v227);
    if ((v210 & 1) != 0)
    {
      create_termupdateset(a1, (char **)v216, (uint64_t)&v230);
      if (v215 <= 1)
        v147 = 1;
      else
        v147 = v215;
      v148 = atomic_load((unsigned int *)(a1 + 28));
      TermUpdateSetAddDocumentInfo(*(uint64_t *)v216, v202, v147, v101, v146, 0, 0, v205, (v148 & 8) != 0);
      v149 = mergeIntoUpdateSet(a1, v197, v198, &v215, (char)v87, v207, v196, 1, a9, a2, (uint64_t)a3, v199, v86, (uint64_t)v206, v203, *(uint64_t *)v216, v101, v195, v194,
               v201);
      if (v149)
        v26 = v149;
      else
        v26 = v204;
    }
    else
    {
      v159 = v146;
      v160 = v215;
      if (!v215)
      {
        v160 = _getAndSetDocId(a1, v199, (char)v87, v197, v198, &v214, 0, a9);
        v215 = v160;
      }
      db_read_lock(a1 + 14680);
      v161 = *(_QWORD *)(a1 + 14352);
      *(_QWORD *)v216 = v161;
      v162 = v160;
      if (!v79)
        v162 = 1;
      if (v160)
        v163 = v162;
      else
        v163 = 1;
      v164 = atomic_load((unsigned int *)(a1 + 28));
      v146 = v159;
      TermUpdateSetAddDocumentInfo(v161, v202, v163, v101, v159, (uint64_t)a3, a2, v205, (v164 & 8) != 0);
      if (v208[1716])
        v165 = 1;
      else
        v165 = index_termUpdateSetShouldFlush(a1, *(_QWORD *)(a1 + 14352), v196) != 0;
      v208[1716] = v165;
      db_read_unlock(a1 + 14680);
      if (v203 && v215 && ((v79 ^ 1) & 1) == 0)
        *v203 = *(_QWORD *)(a1 + 72) + v215;
      v26 = v204;
    }
    CFRelease(v146);
    if ((_DWORD)v26)
      goto LABEL_256;
  }
  else
  {
    if ((v210 & 1) != 0)
    {
      create_termupdateset(a1, (char **)v216, (uint64_t)&v230);
      v215 = 1;
      v150 = *(_QWORD *)v216;
      v151 = atomic_load((unsigned int *)(a1 + 28));
      TermUpdateSetAddDocumentInfo(v150, v202, 1, v101, v68, 0, 0, v205, (v151 & 8) != 0);
      v152 = mergeIntoUpdateSet(a1, v197, v198, &v215, (char)v87, v143, v196, 1, a9, a2, (uint64_t)a3, v199, v86, (uint64_t)v206, v203, *(uint64_t *)v216, v101, v195, v194,
               v201);
      if (v152)
        v26 = v152;
      else
        v26 = v204;
    }
    else
    {
      LOBYTE(v227[0]) = 0;
      v215 = _getAndSetDocId(a1, v199, (char)v87, v197, v198, v227, 0, a9);
      db_read_lock(a1 + 14680);
      v153 = *(_QWORD *)(a1 + 14352);
      *(_QWORD *)v216 = v153;
      v154 = atomic_load((unsigned int *)(a1 + 28));
      TermUpdateSetAddDocumentInfo(v153, v202, v215, v101, v68, (uint64_t)a3, a2, v205, (v154 & 8) != 0);
      v26 = v204;
      if (v208[1716])
        v155 = 1;
      else
        v155 = index_termUpdateSetShouldFlush(a1, *(_QWORD *)(a1 + 14352), v196) != 0;
      v156 = v201;
      v208[1716] = v155;
      if (v156)
        (*(void (**)(uint64_t, uint64_t))(v156 + 16))(v156, *(_QWORD *)(a1 + 72) + v215);
      db_read_unlock(a1 + 14680);
      *v203 = *(_QWORD *)(a1 + 72) + v215;
    }
    if ((_DWORD)v26)
    {
      v157 = *__error();
      v158 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v158, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v227[0]) = 136315650;
        *(_QWORD *)((char *)v227 + 4) = "setDocumentAttributes";
        WORD6(v227[0]) = 1024;
        *(_DWORD *)((char *)v227 + 14) = 4464;
        WORD1(v227[1]) = 1024;
        DWORD1(v227[1]) = v26;
        _os_log_error_impl(&dword_1B8270000, v158, OS_LOG_TYPE_ERROR, "%s:%d: Got error %d", (uint8_t *)v227, 0x18u);
      }
      *__error() = v157;
      goto LABEL_256;
    }
  }
  return v26;
}

uint64_t sdb_value_release()
{
  return dispatch_async_enforce_qos_class_f();
}

uint64_t sdb_key_hash(_DWORD *a1)
{
  unint64_t v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  HIDWORD(v1) = 1713515327 * *a1;
  LODWORD(v1) = HIDWORD(v1);
  v2 = (1107688271 * (v1 >> 21)) ^ 0x1F0A2598;
  HIDWORD(v1) = 2049437143 * a1[1];
  LODWORD(v1) = HIDWORD(v1);
  v3 = -1242805215 * (v1 >> 21);
  HIDWORD(v1) = v2;
  LODWORD(v1) = v2;
  v4 = (5 * (v1 >> 19) + 1390208809) ^ v3;
  HIDWORD(v1) = -565921073 * a1[2];
  LODWORD(v1) = HIDWORD(v1);
  v5 = -110370757 * (v1 >> 21);
  HIDWORD(v1) = v4;
  LODWORD(v1) = v4;
  v6 = (5 * (v1 >> 19) + 1390208809) ^ v5;
  HIDWORD(v1) = -757810265 * a1[3];
  LODWORD(v1) = HIDWORD(v1);
  v7 = v1 >> 21;
  HIDWORD(v1) = v6;
  LODWORD(v1) = v6;
  v8 = -2048144789 * ((1256834237 * v7) ^ (5 * (v1 >> 19) + 1390208809) ^ 0x10);
  return (-1028477387 * (v8 ^ (v8 >> 13))) ^ ((-1028477387 * (v8 ^ (v8 >> 13))) >> 16);
}

BOOL sdb_key_equal(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8) && *(_QWORD *)a1 == *(_QWORD *)a2;
}

unint64_t reallocBlock(uint64_t a1, unint64_t a2, unsigned int a3, unint64_t *a4)
{
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  signed int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char v25;
  char *v26;
  char *v27;
  const char *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  char *v46;
  char *v47;
  const char *v48;
  char *v49;
  char *v50;
  const char *v51;
  uint64_t v52;
  char *v53;
  const char *v54;
  unint64_t *v55;
  unsigned int v56;
  _OWORD v57[12];
  uint64_t v58;

  v6 = a2;
  v58 = *MEMORY[0x1E0C80C00];
  v8 = a1 + 160;
  v9 = HIDWORD(a2);
  if (HIDWORD(a2))
    v10 = 0;
  else
    v10 = (unint64_t)a2 << 6;
  v11 = storageResolvePtr(a1 + 160, v10, 8uLL, 1);
  v12 = storageResolvePtr(v8, v10, 64 << v11[2], 1);
  v13 = 64 << v12[2];
  v14 = a3 + 8;
  LODWORD(v15) = v13;
  do
    v15 = (2 * v15);
  while (v14 > v15);
  if (v13 - 8 < *(unsigned __int16 *)v12)
  {
    v46 = __si_assert_copy_extra_1644(0);
    v47 = v46;
    v48 = "";
    if (v46)
      v48 = v46;
    __message_assert("%s:%u: failed assertion '%s' %s ", "FlatStore.c", 673, "storePageEnd(page) <= storePageDataSize(page)", v48);
    free(v47);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v55 = a4;
  v16 = *(unsigned int *)(a1 + 400);
  if ((int)v16 < 1)
  {
    v21 = -1;
  }
  else
  {
    v17 = 53;
    do
    {
      v18 = *(_QWORD **)(a1 + 8 * v17);
      if (v18
        && (v19 = v18[1], v19 + 1 >= 2)
        && v19 <= (unint64_t)v12
        && (v20 = v18[2], v19 - v20 + v18[3] > (unint64_t)v12))
      {
        v21 = (unint64_t)&v12[v20 - v19];
      }
      else
      {
        v21 = -1;
      }
      if (v17 - 52 >= v16)
        break;
      ++v17;
    }
    while (v21 == -1);
  }
  v22 = a1 + 4528;
  bit_vector_set_2851(a1 + 4528, (v21 >> 17));
  if ((v21 >> 17) != (v21 + v13) >> 17)
    bit_vector_set_2851(a1 + 4528, (v21 >> 17) + 1);
  if (storageExtendOffset(v8, v10, v13, v15))
  {
    v23 = storageResolvePtr(v8, v10, 8uLL, 1);
    v24 = storageResolvePtr(v8, v10, 64 << v23[2], 1);
    v25 = __clz(__rbit32(v15 >> 6));
    if (!(_DWORD)v15)
      v25 = -1;
    v24[2] = v25;
    if (v10 >= *(_QWORD *)(a1 + 392))
    {
      v26 = __si_assert_copy_extra_1644(*(_DWORD **)(a1 + 376));
      v27 = v26;
      v28 = "";
      if (v26)
        v28 = v26;
      __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 678, "flatStoreGetOffset(info) < storageGetCount(store)", v28);
      goto LABEL_77;
    }
  }
  else
  {
    if (!v55)
      return 0;
    memset(v57, 0, sizeof(v57));
    v56 = 0;
    if (v15 > 0x10000)
    {
      v49 = __si_assert_copy_extra_1644(0);
      v50 = v49;
      v51 = "";
      if (v49)
        v51 = v49;
      __message_assert("%s:%u: failed assertion '%s' %s ", "FlatStore.c", 685, "reSize<=4096*16", v51);
      free(v50);
      if (__valid_fs(-1))
        v52 = 2989;
      else
        v52 = 3072;
      *(_DWORD *)v52 = -559038737;
      abort();
    }
    v6 = storageGrowOffset(v8, v10, v13, v15, (uint64_t)v57, (int *)&v56);
    if (v6)
    {
      storageResolvePtr(v8, v6, v15, 1);
      if (v9)
        v6 = 0;
      else
        v6 = (v6 >> 6);
    }
    *v55 = v6;
    v29 = v56;
    if ((int)v56 < 1)
    {
      if (!(_DWORD)v6)
        return v6;
    }
    else
    {
      v30 = (unint64_t *)v57;
      do
      {
        v32 = *v30++;
        v31 = v32;
        bit_vector_set_2851(a1 + 4528, (v32 >> 17));
        if ((v32 >> 17) != (v32 + 8) >> 17)
          bit_vector_set_2851(a1 + 4528, (v31 >> 17) + 1);
        --v29;
      }
      while (v29);
      v6 = *v55;
      if (!*(_DWORD *)v55)
        return v6;
    }
    if (HIDWORD(v6))
      v33 = 0;
    else
      v33 = (unint64_t)v6 << 6;
    if (v33 >= *(_QWORD *)(a1 + 392))
    {
      v53 = __si_assert_copy_extra_1644(*(_DWORD **)(a1 + 376));
      v27 = v53;
      v54 = "";
      if (v53)
        v54 = v53;
      __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 690, "flatStoreGetOffset(*newOffset) < storageGetCount(store)", v54);
LABEL_77:
      free(v27);
      if (__valid_fsp(*(_DWORD **)(a1 + 376)))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v34 = storageResolvePtr(v8, v33, 8uLL, 1);
    v35 = storageResolvePtr(v8, v33, 64 << v34[2], 1);
    v36 = v35;
    v37 = 64 << v35[2];
    v38 = *(unsigned int *)(a1 + 400);
    if ((int)v38 < 1)
    {
      v42 = -1;
    }
    else
    {
      v39 = 53;
      do
      {
        v40 = *(_QWORD **)(a1 + 8 * v39);
        if (v40
          && (v41 = v40[1], v41 + 1 >= 2)
          && v41 <= (unint64_t)v35
          && (v43 = v40[2], v41 - v43 + v40[3] > (unint64_t)v35))
        {
          v42 = (unint64_t)&v35[v43 - v41];
        }
        else
        {
          v42 = -1;
        }
        if (v39 - 52 >= v38)
          break;
        ++v39;
      }
      while (v42 == -1);
    }
    bit_vector_set_2851(v22, (v42 >> 17));
    if ((v42 >> 17) != (v42 + v37) >> 17)
      bit_vector_set_2851(v22, (v42 >> 17) + 1);
    v44 = __clz(__rbit32(v15 >> 6));
    if (!(_DWORD)v15)
      v44 = -1;
    v36[2] = v44;
    return *v55;
  }
  return v6;
}

uint64_t prot_pwrite(uint64_t __fd, char *__buf, size_t __nbyte, off_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  BOOL v12;

  v8 = 0;
  do
  {
    while (1)
    {
      v9 = pwrite(__fd, __buf, __nbyte, a4);
      if ((v9 & 0x8000000000000000) != 0)
        break;
      v8 += v9;
      v12 = __nbyte > v9;
      __nbyte -= v9;
      if (!v12)
        return v8;
      __buf += v9;
      a4 += v9;
    }
    v10 = g_prot_error_callback;
    if (!g_prot_error_callback)
      break;
    v11 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v10 + 16))(v10, __fd, *v11, 5) & 1) != 0);
  return -1;
}

ssize_t prot_pread(uint64_t __fd, void *__buf, size_t __nbyte, off_t a4)
{
  ssize_t result;
  uint64_t v9;
  int *v10;

  while (1)
  {
    result = pread(__fd, __buf, __nbyte, a4);
    if (result != -1)
      break;
    v9 = g_prot_error_callback;
    if (!g_prot_error_callback)
      break;
    v10 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v9 + 16))(v9, __fd, *v10, 4) & 1) == 0)
      return -1;
  }
  return result;
}

uint64_t prot_fsync(uint64_t a1, int a2)
{
  double Current;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int *v9;
  int v10;
  double v11;
  int v12;
  NSObject *v13;
  os_log_type_t v14;
  double v15;
  int v16;
  BOOL v17;
  const char *v18;
  uint8_t buf[4];
  double v21;
  __int16 v22;
  const char *v23;
  _BYTE v24[1024];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    while (1)
    {
      Current = CFAbsoluteTimeGetCurrent();
      v4 = fcntl(a1, 85);
      if ((_DWORD)v4 != -1)
      {
        v5 = v4;
        goto LABEL_17;
      }
      if (*__error() == 25 || *__error() == 45)
      {
        *__error() = 0;
        v5 = fcntl(a1, 51);
      }
      else
      {
        v5 = 0xFFFFFFFFLL;
      }
      if ((_DWORD)v5 != -1)
        break;
      v6 = g_prot_error_callback;
      if (!g_prot_error_callback)
        break;
      v7 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, a1, *v7, 2) & 1) == 0)
        goto LABEL_13;
    }
    if ((_DWORD)v5 == -1)
      goto LABEL_13;
  }
  else
  {
LABEL_13:
    while (1)
    {
      Current = CFAbsoluteTimeGetCurrent();
      v5 = fsync(a1);
      if ((_DWORD)v5 != -1)
        break;
      v8 = g_prot_error_callback;
      if (!g_prot_error_callback)
        break;
      v9 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v8 + 16))(v8, a1, *v9, 3) & 1) == 0)
      {
        v5 = 0xFFFFFFFFLL;
        break;
      }
    }
  }
LABEL_17:
  v10 = *__error();
  v11 = CFAbsoluteTimeGetCurrent();
  bzero(v24, 0x400uLL);
  v12 = *__error();
  v13 = _SILogForLogForCategory(0);
  v14 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = v11 - Current;
    v16 = fcntl(a1, 50, v24);
    if (v24[0])
      v17 = v16 < 0;
    else
      v17 = 1;
    v18 = "";
    if (!v17)
      v18 = v24;
    *(_DWORD *)buf = 134218242;
    v21 = v15;
    v22 = 2080;
    v23 = v18;
    _os_log_impl(&dword_1B8270000, v13, v14, "fsync time %f - %s\n", buf, 0x16u);
  }
  *__error() = v12;
  *__error() = v10;
  return v5;
}

uint64_t poswriteunlock(pthread_rwlock_t *a1)
{
  uint64_t result;
  char *v2;
  char *v3;
  const char *v4;
  uint64_t v5;

  result = pthread_rwlock_unlock(a1);
  if ((_DWORD)result)
  {
    v2 = __si_assert_copy_extra_268();
    v3 = v2;
    v4 = "";
    if (v2)
      v4 = v2;
    __message_assert(v2, "poslock.c", 28, "result==0", v4);
    free(v3);
    if (__valid_fs(-1))
      v5 = 2989;
    else
      v5 = 3072;
    *(_DWORD *)v5 = -559038737;
    abort();
  }
  return result;
}

uint64_t poslock(pthread_rwlock_t *a1)
{
  uint64_t result;
  char *v2;
  char *v3;
  const char *v4;
  uint64_t v5;

  result = pthread_rwlock_wrlock(a1);
  if ((_DWORD)result)
  {
    v2 = __si_assert_copy_extra_268();
    v3 = v2;
    v4 = "";
    if (v2)
      v4 = v2;
    __message_assert(v2, "poslock.c", 8, "result==0", v4);
    free(v3);
    if (__valid_fs(-1))
      v5 = 2989;
    else
      v5 = 3072;
    *(_DWORD *)v5 = -559038737;
    abort();
  }
  return result;
}

uint64_t page_cache_fetch(unsigned int *a1, void **value_out, unsigned int a3)
{
  unsigned int v4;
  uint64_t v6;
  int v7;
  NSObject *v8;
  uint64_t v10;
  uint64_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!value_out)
    return 22;
  v10 = 0;
  v11 = 0;
  v4 = atomic_load(a1 + 62);
  if (v4 <= a3)
    return 2;
  v10 = *(_QWORD *)a1;
  v11 = a3;
  if (sdb_init_cache_onceToken != -1)
    dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_27_11254);
  if ((sdb_init_cache_status & 1) != 0)
  {
    v6 = cache_get_and_retain((cache_t *)sdbLargeCacheArray, &v10, value_out);
    if ((v6 & 0xFFFFFFFD) == 0)
      return v6;
  }
  else
  {
    v6 = 1;
  }
  v7 = *__error();
  v8 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    v13 = "page_cache_fetch";
    v14 = 1024;
    v15 = 442;
    v16 = 2048;
    v17 = a3;
    v18 = 1024;
    v19 = v6;
    _os_log_error_impl(&dword_1B8270000, v8, OS_LOG_TYPE_ERROR, "%s:%d: Large page cache fetch fail for pgnum:%ld, ret:%d", buf, 0x22u);
  }
  *__error() = v7;
  return v6;
}

uint64_t page_cache_copy_page(unsigned int *a1, const void **a2, unsigned int a3, char a4)
{
  uint64_t v8;
  malloc_type_id_t v9;
  size_t v10;
  size_t v11;
  void *v12;
  void *v13;
  size_t v14;
  unsigned int v15;
  unsigned int v16;
  char *v18;
  char *v19;
  const char *v20;
  void *v21;
  void *v22;
  void *__src;

  __src = 0;
  if (page_cache_fetch(a1, &__src, a3))
    return 2;
  v9 = 274903212;
  if ((a4 & 4) != 0 && *a2)
  {
    v10 = *((int *)__src + 1);
    v11 = malloc_size(*a2);
    v12 = (void *)*a2;
    if (v11 >= v10)
      goto LABEL_8;
    free(v12);
    v9 = 880252641;
  }
  v12 = malloc_type_valloc(*((int *)__src + 1), v9);
  *a2 = v12;
LABEL_8:
  v13 = __src;
  if (!v12)
  {
    v16 = atomic_load(a1 + 62);
    if (v16 <= a3)
      return 12;
    if (sdb_init_cache_onceToken != -1)
    {
      v22 = __src;
      dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_27_11254);
      v13 = v22;
    }
    v8 = 12;
    if ((sdb_init_cache_status & 1) == 0)
      return v8;
LABEL_19:
    cache_release_value((cache_t *)sdbLargeCacheArray, v13);
    return v8;
  }
  v14 = *((int *)__src + 2);
  if ((int)v14 > *((_DWORD *)__src + 1))
  {
    v18 = __si_assert_copy_extra_268();
    v19 = v18;
    v20 = "";
    if (v18)
      v20 = v18;
    __message_assert("%s:%u: failed assertion '%s' %s ", "page-cache.c", 376, "dbp->used_bytes<=dbp->size", v20);
    free(v19);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  memcpy(v12, __src, v14);
  v13 = __src;
  v15 = atomic_load(a1 + 62);
  if (v15 <= a3)
    return 0;
  if (sdb_init_cache_onceToken != -1)
  {
    v21 = __src;
    dispatch_once(&sdb_init_cache_onceToken, &__block_literal_global_27_11254);
    v13 = v21;
  }
  v8 = 0;
  if (sdb_init_cache_status == 1)
    goto LABEL_19;
  return v8;
}

uint64_t mergeOne(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  char *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v32;
  char *v33;
  const char *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  __int16 v47;
  BOOL v48;

  v48 = 0;
  v8 = *((_QWORD *)a2 + 1);
  if (v8)
  {
    v9 = &_directoryStoreGetPageInner(a1, v8, &v48)[16 * *((unsigned int *)a2 + 4) + 8];
    *(_QWORD *)a2 = v9;
  }
  else
  {
    v9 = *(char **)a2;
  }
  directoryStoreValidate(a1, (uint64_t)v9);
  v10 = *((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a3 + 8))
  {
    if (v10)
    {
      v11 = &_directoryStoreGetPageInner(a1, v10, &v48)[16 * *((unsigned int *)a2 + 4) + 8];
      *(_QWORD *)a2 = v11;
    }
    else
    {
      v11 = *(char **)a2;
    }
    directoryStoreValidate(a1, (uint64_t)v11);
    v12 = *((_QWORD *)a2 + 1);
    if (v12)
      *(_QWORD *)a2 = &_directoryStoreGetPageInner(a1, v12, &v48)[16 * *((unsigned int *)a2 + 4) + 8];
    v47 = 0;
    v13 = **(_QWORD **)(a3 + 8);
    v37 = *a2;
    *(_QWORD *)&v38 = *((_QWORD *)a2 + 2);
    directoryStoreEnsurePage(a1, (uint64_t)&v37, v13, 0, &v47, (BOOL *)&v47 + 1, 0, 0);
    v14 = *((_QWORD *)a2 + 1);
    if (v14)
      *(_QWORD *)a2 = &_directoryStoreGetPageInner(a1, v14, (BOOL *)&v47 + 1)[16 * *((unsigned int *)a2 + 4) + 8];
    v46 = 0;
    v45 = 0uLL;
    v15 = *(_QWORD *)(a3 + 8);
    if (*(_QWORD *)(v15 + 8))
    {
      v16 = 0;
      v17 = 16;
      do
      {
        if (*(uint64_t *)(v15 + v17) >= 2)
        {
          v18 = *((_QWORD *)a2 + 1);
          if (v18)
          {
            *(_QWORD *)a2 = &_directoryStoreGetPageInner(a1, v18, (BOOL *)&v47 + 1)[16 * *((unsigned int *)a2 + 4) + 8];
            v15 = *(_QWORD *)(a3 + 8);
          }
          v19 = v15 + v17;
          v44 = 0;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v37 = 0u;
          v35 = *a2;
          v36 = *((_QWORD *)a2 + 2);
          directoryStoreGetDirectoryWithPath((unsigned __int16 *)&v45, a1, (unint64_t *)&v35, 0, v15 + v17, 1, (uint64_t)&v37);
          v35 = v45;
          v36 = v46;
          mergeOne(a1, &v35, v19, a4);
          v15 = *(_QWORD *)(a3 + 8);
        }
        ++v16;
        v17 += 32;
      }
      while (v16 < *(_QWORD *)(v15 + 8));
    }
    v10 = *((_QWORD *)a2 + 1);
  }
  if (v10)
  {
    v20 = &_directoryStoreGetPageInner(a1, v10, &v48)[16 * *((unsigned int *)a2 + 4) + 8];
    *(_QWORD *)a2 = v20;
  }
  else
  {
    v20 = *(char **)a2;
  }
  directoryStoreValidate(a1, (uint64_t)v20);
  v21 = *((_QWORD *)a2 + 1);
  if (v21)
    *(_QWORD *)a2 = &_directoryStoreGetPageInner(a1, v21, &v48)[16 * *((unsigned int *)a2 + 4) + 8];
  if (*(_DWORD *)(a3 + 24))
  {
    v22 = *(_QWORD *)(a4 + 16);
    v23 = *(_QWORD *)(a4 + 8) + 1;
    if (v23 >= v22)
    {
      if (!v22)
      {
        v22 = 1024;
        *(_QWORD *)(a4 + 16) = 1024;
      }
      if (v23 >= v22)
      {
        do
        {
          v24 = v23 >= 2 * v22;
          v22 *= 2;
        }
        while (v24);
        *(_QWORD *)(a4 + 16) = v22;
      }
      *(_QWORD *)a4 = malloc_type_realloc(*(void **)a4, 24 * v22, 0x10200409F4E64B8uLL);
    }
    v25 = *(char **)a2;
    v26 = *(_QWORD *)(*(_QWORD *)a2 + 8);
    if (v26 < 0)
      goto LABEL_38;
    if (v26)
    {
      v44 = 0;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v37 = 0u;
      v45 = 0uLL;
      v46 = 0;
      v35 = *a2;
      v36 = *((_QWORD *)a2 + 2);
      directoryStoreGetDirectoryWithPath((unsigned __int16 *)&v45, a1, (unint64_t *)&v35, 0, a3, 1, (uint64_t)&v37);
      v25 = (char *)v45;
      v26 = *(_QWORD *)(v45 + 8);
      if (v26 < 0)
      {
LABEL_38:
        v27 = *(_DWORD **)a4;
        v28 = *(_QWORD *)(a4 + 8);
        v27[6 * v28] = v26;
        *(_QWORD *)&v27[6 * v28 + 2] = a3 + 16;
        *(_QWORD *)(a4 + 8) = v28 + 1;
        goto LABEL_39;
      }
      if (v26)
      {
        v32 = __si_assert_copy_extra(0);
        v33 = v32;
        if (v32)
          v34 = v32;
        else
          v34 = "";
        __message_assert("%s:%u: Unexpected code path %s ", "FileTree.c", 2250, v34);
        free(v33);
        MEMORY[0xBAD] = -559038737;
        abort();
      }
    }
    v26 = (*(_DWORD *)(a4 + 24) + 1);
    *(_DWORD *)(a4 + 24) = v26;
    *((_QWORD *)v25 + 1) = v26 | 0x8000000000000000;
    goto LABEL_38;
  }
LABEL_39:
  v29 = *((_QWORD *)a2 + 1);
  if (v29)
  {
    v30 = &_directoryStoreGetPageInner(a1, v29, &v48)[16 * *((unsigned int *)a2 + 4) + 8];
    *(_QWORD *)a2 = v30;
  }
  else
  {
    v30 = *(char **)a2;
  }
  return directoryStoreValidate(a1, (uint64_t)v30);
}

uint64_t ldb_writeVInt64(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64x2_t v4;
  int16x8_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64x2_t v9;
  int16x8_t v10;
  uint64_t v11;
  uint64x2_t v12;
  int16x8_t v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;

  if (HIBYTE(a3))
  {
    v7 = a1 + a2;
    *(_BYTE *)v7 = -1;
    *(_QWORD *)(v7 + 1) = a3;
    return a2 + 9;
  }
  else if ((a3 & 0xFE000000000000) != 0)
  {
    v3 = a1 + a2;
    *(_BYTE *)v3 = -2;
    v4 = (uint64x2_t)vdupq_n_s64(a3);
    v5 = (int16x8_t)vshlq_u64(v4, (uint64x2_t)xmmword_1B8631C40);
    *(int32x2_t *)v4.i8 = vmovn_s64((int64x2_t)vshlq_u64(v4, (uint64x2_t)xmmword_1B8631C50));
    *(int32x2_t *)v5.i8 = vmovn_s64((int64x2_t)v5);
    v5.i16[1] = v5.i16[2];
    v5.i16[2] = v4.i16[0];
    v5.i16[3] = v4.i16[2];
    *(_DWORD *)(v3 + 1) = vmovn_s16(v5).u32[0];
    *(_BYTE *)(v3 + 5) = BYTE2(a3);
    *(_BYTE *)(v3 + 6) = BYTE1(a3);
    result = a2 + 8;
    *(_BYTE *)(v3 + 7) = a3;
  }
  else if ((a3 & 0x1FC0000000000) != 0)
  {
    v8 = a1 + a2;
    *(_BYTE *)v8 = BYTE6(a3) | 0xFC;
    v9 = (uint64x2_t)vdupq_n_s64(a3);
    v10 = (int16x8_t)vshlq_u64(v9, (uint64x2_t)xmmword_1B8631C60);
    *(int32x2_t *)v9.i8 = vmovn_s64((int64x2_t)vshlq_u64(v9, (uint64x2_t)xmmword_1B8631C70));
    *(int32x2_t *)v10.i8 = vmovn_s64((int64x2_t)v10);
    v10.i16[1] = v10.i16[2];
    v10.i16[2] = v9.i16[0];
    v10.i16[3] = v9.i16[2];
    *(_DWORD *)(v8 + 1) = vmovn_s16(v10).u32[0];
    *(_BYTE *)(v8 + 5) = BYTE1(a3);
    result = a2 + 7;
    *(_BYTE *)(v8 + 6) = a3;
  }
  else if ((a3 & 0x3F800000000) != 0)
  {
    v11 = a1 + a2;
    v12 = (uint64x2_t)vdupq_n_s64(a3);
    *(_BYTE *)v11 = BYTE5(a3) | 0xF8;
    v13 = (int16x8_t)vshlq_u64(v12, (uint64x2_t)xmmword_1B8631C50);
    *(int32x2_t *)v12.i8 = vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_1B8631C80));
    *(int32x2_t *)v13.i8 = vmovn_s64((int64x2_t)v13);
    v13.i16[1] = v13.i16[2];
    v13.i16[2] = v12.i16[0];
    v13.i16[3] = v12.i16[2];
    *(_DWORD *)(v11 + 1) = vmovn_s16(v13).u32[0];
    result = a2 + 6;
    *(_BYTE *)(v11 + 5) = a3;
  }
  else if ((a3 & 0x7F0000000) != 0)
  {
    v14 = (_BYTE *)(a1 + a2);
    *v14 = BYTE4(a3) | 0xF0;
    v14[1] = BYTE3(a3);
    v14[2] = BYTE2(a3);
    v14[3] = BYTE1(a3);
    result = a2 + 5;
    v14[4] = a3;
  }
  else if ((a3 & 0xFE00000) != 0)
  {
    v15 = (_BYTE *)(a1 + a2);
    *v15 = BYTE3(a3) | 0xE0;
    v15[1] = BYTE2(a3);
    v15[2] = BYTE1(a3);
    result = a2 + 4;
    v15[3] = a3;
  }
  else if ((a3 & 0x1FC000) != 0)
  {
    v16 = (_BYTE *)(a1 + a2);
    *v16 = BYTE2(a3) | 0xC0;
    v16[1] = BYTE1(a3);
    result = a2 + 3;
    v16[2] = a3;
  }
  else if ((a3 & 0x3F80) != 0)
  {
    v17 = (_BYTE *)(a1 + a2);
    *v17 = BYTE1(a3) | 0x80;
    result = a2 + 2;
    v17[1] = a3;
  }
  else
  {
    *(_BYTE *)(a1 + a2) = a3;
    return a2 + 1;
  }
  return result;
}

uint64_t index_termUpdateSetShouldFlush(uint64_t a1, uint64_t a2, int a3)
{
  char v5;
  host_t v6;
  kern_return_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *p_host_info_outCnt;
  uint32_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  int v35;
  NSObject *v36;
  int v38;
  NSObject *v39;
  int v41;
  NSObject *v42;
  int *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  mach_msg_type_number_t host_info_outCnt;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  unint64_t v54;
  integer_t host_info_out[4];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (a3 >= 4)
    v5 = 4;
  else
    v5 = a3;
  if (!index_termUpdateSetShouldFlush_physMem)
  {
    v56 = 0u;
    v57 = 0u;
    *(_OWORD *)host_info_out = 0u;
    host_info_outCnt = 12;
    v6 = MEMORY[0x1BCCB1010]();
    v7 = host_info(v6, 1, host_info_out, &host_info_outCnt);
    v8 = *((_QWORD *)&v57 + 1);
    if (*((_QWORD *)&v57 + 1) >= 0x80000000uLL)
      v8 = 0x80000000;
    if (v7)
      v8 = 0x40000000;
    index_termUpdateSetShouldFlush_physMem = v8;
  }
  v9 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 24) + 16));
  if (v9 > (unint64_t)(3 * index_termUpdateSetShouldFlush_physMem) >> 18)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v10 = atomic_load((unsigned int *)(*(_QWORD *)(a2 + 24) + 16));
      host_info_out[0] = 67109376;
      host_info_out[1] = v10;
      LOWORD(host_info_out[2]) = 1024;
      *(integer_t *)((char *)&host_info_out[2] + 2) = (unint64_t)(3 * index_termUpdateSetShouldFlush_physMem) >> 18;
      v11 = MEMORY[0x1E0C81028];
      v12 = "should flush, tc:%d, limit:%d";
      p_host_info_outCnt = (uint8_t *)host_info_out;
      v14 = 14;
LABEL_51:
      _os_log_impl(&dword_1B8270000, v11, OS_LOG_TYPE_DEFAULT, v12, p_host_info_outCnt, v14);
      return 1;
    }
    return 1;
  }
  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  *(_OWORD *)host_info_out = 0u;
  v56 = 0u;
  _TermUpdateSetGetStats(a2, (uint64_t)host_info_out, 0);
  v15 = v5 + 2 * (MEMORY[0xFFFFFC030] > 0x32u);
  v16 = (unint64_t)index_termUpdateSetShouldFlush_physMem >> 8 >> v15;
  v17 = v57;
  v18 = dword_1EF19FC9C;
  if ((unint64_t)v57 <= (unint64_t)index_termUpdateSetShouldFlush_physMem >> 12 >> v15
    || dword_1EF19FC9C < 5)
  {
    v20 = (unint64_t)index_termUpdateSetShouldFlush_physMem >> 8 >> v15;
  }
  else
  {
    v34 = (unint64_t)index_termUpdateSetShouldFlush_physMem >> 8 >> v15;
    v35 = *__error();
    v36 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      host_info_outCnt = 134218240;
      v48 = v17;
      v49 = 2048;
      v50 = (unint64_t)index_termUpdateSetShouldFlush_physMem >> 12 >> v15;
      _os_log_impl(&dword_1B8270000, v36, OS_LOG_TYPE_DEFAULT, "positions exceed limit, used:%ld, limit:%ld", (uint8_t *)&host_info_outCnt, 0x16u);
    }
    *__error() = v35;
    v18 = dword_1EF19FC9C;
    v20 = (unint64_t)index_termUpdateSetShouldFlush_physMem >> 8 >> v15;
    v16 = v34;
  }
  v21 = *(_QWORD *)host_info_out;
  v22 = v56;
  v23 = v56 + *(_QWORD *)host_info_out;
  v24 = v16 - (v17 + v56 + *(_QWORD *)host_info_out);
  if ((_QWORD)v56 + *(_QWORD *)host_info_out <= v20 || v18 < 5)
  {
    if (v24 <= 0)
    {
LABEL_48:
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        return 1;
      host_info_outCnt = 134218752;
      v48 = v21;
      v49 = 2048;
      v50 = v22;
      v51 = 2048;
      v52 = v17;
      v53 = 2048;
      v54 = (unint64_t)index_termUpdateSetShouldFlush_physMem >> 8 >> v15;
      v11 = MEMORY[0x1E0C81028];
      v12 = "should flush Terms + Postings + Positions exceed limit, terms used:%ld, postings used:%ld positions used:%ld limit:%ld";
      goto LABEL_50;
    }
  }
  else
  {
    v45 = *(_QWORD *)host_info_out;
    v46 = v24;
    v44 = v56;
    v38 = *__error();
    v39 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      host_info_outCnt = 134218240;
      v48 = v23;
      v49 = 2048;
      v50 = (unint64_t)index_termUpdateSetShouldFlush_physMem >> 8 >> v15;
      _os_log_impl(&dword_1B8270000, v39, OS_LOG_TYPE_DEFAULT, "Terms + Postings exceed limit, used:%ld, limit:%ld", (uint8_t *)&host_info_outCnt, 0x16u);
    }
    *__error() = v38;
    v22 = v44;
    v21 = v45;
    if (v46 <= 0)
      goto LABEL_48;
  }
  v26 = v58;
  if ((unint64_t)v58 > 0xC00000)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      host_info_outCnt = 134218240;
      v48 = v26;
      v49 = 2048;
      v50 = 12582912;
      v11 = MEMORY[0x1E0C81028];
      v12 = "should flush term info (global), used:%ld, max:%ld";
      p_host_info_outCnt = (uint8_t *)&host_info_outCnt;
      v14 = 22;
      goto LABEL_51;
    }
    return 1;
  }
  v27 = index_termUpdateSetShouldFlush_physMem;
  if (v23 > (index_termUpdateSetShouldFlush_physMem / 0x300uLL) >> (v5 + 2 * (MEMORY[0xFFFFFC030] > 0x32u)))
  {
    v28 = *((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1) <= 1uLL)
      v28 = 1;
    v29 = (unint64_t)v58 / v28;
    if (v23 > (unint64_t)v58 / v28)
    {
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        return 1;
      host_info_outCnt = 134218752;
      v48 = v26;
      v49 = 2048;
      v50 = v23;
      v51 = 2048;
      v52 = v29;
      v53 = 2048;
      v54 = v27 >> 8;
      v11 = MEMORY[0x1E0C81028];
      v12 = "should flush, all:%ld, used:%ld, limit:%ld, total limit:%ld";
LABEL_50:
      p_host_info_outCnt = (uint8_t *)&host_info_outCnt;
      v14 = 42;
      goto LABEL_51;
    }
  }
  v30 = atomic_load((unsigned int *)(a1 + 12));
  v31 = *(_DWORD *)(a1 + 60);
  if (v31 >= 0x2711 && 6 * v30 > 5 * v31)
  {
    v32 = *(_QWORD *)(a1 + 14352);
    if (v32)
    {
      if (*(_DWORD *)(v32 + 112) > 0x1000u)
      {
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(host_info_outCnt) = 0;
          v11 = MEMORY[0x1E0C81028];
          v12 = "Flush for high delete count";
          p_host_info_outCnt = (uint8_t *)&host_info_outCnt;
          v14 = 2;
          goto LABEL_51;
        }
        return 1;
      }
    }
  }
  if (dword_1EF19FCB4 < 5)
    return 0;
  v41 = *__error();
  v42 = _SILogForLogForCategory(10);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(host_info_outCnt) = 0;
    _os_log_impl(&dword_1B8270000, v42, OS_LOG_TYPE_DEFAULT, "Flush not required", (uint8_t *)&host_info_outCnt, 2u);
  }
  v43 = __error();
  result = 0;
  *v43 = v41;
  return result;
}

uint64_t indexWriteShutdowState(uint64_t a1)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD v10[1024];
  uint64_t v11;

  v1 = MEMORY[0x1E0C80A78](a1);
  v11 = *MEMORY[0x1E0C80C00];
  bzero(v10, 0x1000uLL);
  atomic_store(0, (unsigned int *)(v1 + 24));
  v2 = *(_DWORD *)(v1 + 4);
  v3 = atomic_load((unsigned int *)(v1 + 24));
  v10[0] = v2;
  v10[1] = v3;
  v4 = atomic_load((unsigned int *)(v1 + 28));
  v5 = *(_DWORD *)(v1 + 40);
  v10[2] = v4;
  v10[3] = v5;
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 14680));
  *(_BYTE *)(v1 + 14892) = 1;
  db_rwlock_wakeup(v1 + 14680, 1, 1);
  result = pthread_mutex_unlock((pthread_mutex_t *)(v1 + 14680));
  v7 = *(_QWORD *)(v1 + 14440);
  if (v7)
  {
    result = fd_pwrite(v7, (uint64_t)v10, 0x10uLL, 0);
    if (result == 16)
    {
      v9 = 0;
      result = _fd_acquire_fd(v7, &v9);
      if ((_DWORD)result != -1)
      {
        v8 = result;
        prot_fsync(result, (*(_WORD *)(v7 + 56) & 8) == 0);
        return (uint64_t)_fd_release_fd((_DWORD *)v7, v8, 0, v9);
      }
    }
    else if (result == -1)
    {
      return (uint64_t)__error();
    }
  }
  return result;
}

uint64_t indexMarkDirty(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unint64_t v6;
  signed int v7;
  int v8;
  NSObject *v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  NSObject *v13;
  pthread_override_s *v14;
  char v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  _DWORD v27[7];

  *(_QWORD *)&v27[5] = *MEMORY[0x1E0C80C00];
  v2 = a1 + 14856;
  if (*(_BYTE *)(a1 + 15163))
  {
    if ((indexMarkDirty__COUNT_ & 1) != 0)
      return 0;
    indexMarkDirty__COUNT_ = 1;
    v8 = *__error();
    v9 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v22 = 136315650;
      v23 = "indexMarkDirty";
      v24 = 1024;
      v25 = 2508;
      v26 = 2080;
      *(_QWORD *)v27 = a1 + 15168;
      _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: trying to modify read only index %s", (uint8_t *)&v22, 0x1Cu);
    }
    v3 = 0;
    *__error() = v8;
    return v3;
  }
  if (!*(_BYTE *)(a1 + 8))
    return 1;
  if (!atomic_load((unsigned int *)(a1 + 24)))
    return 1;
  HIDWORD(v6) = qos_class_self() - 9;
  LODWORD(v6) = HIDWORD(v6);
  v5 = v6 >> 2;
  if (v5 > 6)
    v7 = 0;
  else
    v7 = dword_1B8630ED0[v5];
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14680));
  if (*(_QWORD *)(a1 + 14864) || *(_DWORD *)(a1 + 14876) || *(_BYTE *)(v2 + 36))
    goto LABEL_16;
  if (v7 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v7 + 14744))
    {
LABEL_16:
      db_rwlock_wait(a1 + 14680, v7, 2);
      goto LABEL_17;
    }
    v18 = v7 - 1;
    v19 = (uint64_t *)(a1 + 16 * v7 + 14760);
    while (v18 != 4)
    {
      v20 = *v19;
      v19 += 2;
      ++v18;
      if (v20)
      {
        if (v18 <= 4)
          goto LABEL_16;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 14864) = pthread_self();
LABEL_17:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14680));
  v10 = atomic_load((unsigned int *)(a1 + 24));
  if (v10 == -804450864 || (v11 = atomic_load((unsigned int *)(a1 + 15152))) != 0)
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v21 = atomic_load((unsigned int *)(a1 + 15152));
      v22 = 136315906;
      v23 = "indexMarkDirty";
      v24 = 1024;
      v25 = 2520;
      v26 = 1024;
      v27[0] = v10;
      LOWORD(v27[1]) = 1024;
      *(_DWORD *)((char *)&v27[1] + 2) = v21;
      _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: indexMarkDirty failed - state:%x closing:%d", (uint8_t *)&v22, 0x1Eu);
    }
    v3 = 0;
    *__error() = v12;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 15144);
    if (v17 && (*(unsigned int (**)(void))(v17 + 16))())
    {
      v3 = 0;
    }
    else
    {
      indexWriteShutdowState(a1);
      v3 = 1;
    }
  }
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14680));
  *(_DWORD *)(a1 + 14884) = 0;
  v14 = *(pthread_override_s **)(a1 + 14856);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  v15 = *(_DWORD *)(a1 + 14876) != 0;
  *(_BYTE *)(v2 + 36) = 0;
  db_rwlock_wakeup(a1 + 14680, v15, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14680));
  if (v14)
    pthread_override_qos_class_end_np(v14);
  return v3;
}

uint64_t indexFastFlush(uint64_t a1, _DWORD *a2)
{
  int v4;
  unsigned __int8 v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  UInt8 *v19;
  UInt8 *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  unsigned int *v27;
  char v28;
  CFRange v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  UInt8 *v36;
  CFRange v37;
  uint64_t v38;
  char *v39;
  char *v40;
  const char *v41;
  uint64_t v42;
  int v43;
  NSObject *v44;
  uint64_t v45;
  int v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  UInt8 *v53;
  CFRange v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  uint64_t v63;
  UInt8 *v64;
  char v65;
  CFRange v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  uint64_t v71;
  uint64_t v72;
  UInt8 *v73;
  char v74;
  char v75;
  uint64_t v76;
  char v77;
  void *v78;
  const void *v79;
  char v80;
  uint64_t v82;
  int v83;
  NSObject *v84;
  char v85;
  uint64_t v86;
  UInt8 *v87;
  int v88;
  NSObject *v89;
  UInt8 *v90;
  UInt8 *v91;
  UInt8 *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void *v96[2];
  char __str[1024];
  uint8_t buf[40];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v95 = 0u;
  *(_OWORD *)v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "%s%s", (const char *)(a1 + 15168), "indexUpdates");
  unlinkat(*(_DWORD *)(a1 + 56), __str, 0);
  if (a2)
  {
    v4 = 1538;
    v5 = 0;
  }
  else
  {
    v4 = 536872450;
    v5 = 3;
  }
  v6 = fd_create_protected(*(_DWORD *)(a1 + 56), __str, v4, v5);
  *(_QWORD *)buf = 0;
  v7 = _fd_acquire_fd((uint64_t)v6, buf);
  v8 = v7;
  v9 = *(_QWORD *)buf;
  if ((store_stream_init_fd((uint64_t)&v93, v7, *(uint64_t *)buf, 0, 1) & 1) == 0)
  {
    _fd_release_fd(v6, v8, 0, v9);
    return v94;
  }
  v96[1] = v6;
  v10 = *((_QWORD *)&v95 + 1);
  if ((_QWORD)v95 - *((_QWORD *)&v95 + 1) < 6uLL)
  {
    *(_QWORD *)&buf[9] = 0;
    *(_QWORD *)&buf[1] = 0;
    *(_QWORD *)&buf[24] = 0;
    *(_QWORD *)&buf[17] = 0;
    buf[0] = 2;
    store_stream_write_bytes_2184((uint64_t)&v93, (char *)buf, 1uLL);
  }
  else
  {
    *((_BYTE *)v96[0] + *((_QWORD *)&v95 + 1)) = 2;
    *((_QWORD *)&v95 + 1) = v10 + 1;
  }
  v11 = *(_QWORD *)(a1 + 4904);
  v12 = atomic_load((unsigned int *)(a1 + 28));
  if ((v12 & 2) != 0)
  {
    v13 = 0;
    if (!*(_QWORD *)(a1 + 4904))
      goto LABEL_18;
    goto LABEL_16;
  }
  v13 = *(_QWORD *)(a1 + 9376);
  if (*(_QWORD *)(a1 + 14088) > v13)
    v13 = *(_QWORD *)(a1 + 14088);
  if (*(_QWORD *)(a1 + 4616) > v13)
    v13 = *(_QWORD *)(a1 + 4616);
  if (*(_QWORD *)(a1 + 4904))
  {
LABEL_16:
    if (*(_QWORD *)(v11 + 4376) > v13)
      v13 = *(_QWORD *)(v11 + 4376);
  }
LABEL_18:
  v16 = v13 + 7;
  v15 = v13 < -7;
  v17 = v13 + 14;
  if (!v15)
    v17 = v16;
  v18 = v17 >> 3;
  v19 = (UInt8 *)malloc_type_malloc(v17 >> 3, 0xECC74DBCuLL);
  if (!v19)
  {
    v39 = __si_assert_copy_extra_2151(0, -1);
    v40 = v39;
    v41 = "";
    if (v39)
      v41 = v39;
    __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 2636, "bits", v41);
    free(v40);
    if (__valid_fs(-1))
      v42 = 2989;
    else
      v42 = 3072;
    *(_DWORD *)v42 = -559038737;
    abort();
  }
  v20 = v19;
  v21 = atomic_load((unsigned int *)(a1 + 28));
  if ((v21 & 2) != 0)
  {
    v22 = *((_QWORD *)&v95 + 1);
    if ((_QWORD)v95 - *((_QWORD *)&v95 + 1) < 6uLL)
    {
      memset(buf, 0, 32);
      store_stream_write_bytes_2184((uint64_t)&v93, (char *)buf, 1uLL);
      v23 = *((_QWORD *)&v95 + 1);
    }
    else
    {
      *((_BYTE *)v96[0] + *((_QWORD *)&v95 + 1)) = 0;
      v23 = v22 + 1;
      *((_QWORD *)&v95 + 1) = v23;
    }
    if ((unint64_t)(v95 - v23) < 6)
    {
      memset(buf, 0, 32);
      store_stream_write_bytes_2184((uint64_t)&v93, (char *)buf, 1uLL);
      v24 = *((_QWORD *)&v95 + 1);
    }
    else
    {
      *((_BYTE *)v96[0] + v23) = 0;
      v24 = v23 + 1;
      *((_QWORD *)&v95 + 1) = v24;
    }
    if ((unint64_t)(v95 - v24) < 6)
    {
      memset(buf, 0, 32);
      store_stream_write_bytes_2184((uint64_t)&v93, (char *)buf, 1uLL);
    }
    else
    {
      *((_BYTE *)v96[0] + v24) = 0;
      *((_QWORD *)&v95 + 1) = v24 + 1;
    }
  }
  else
  {
    store_stream_write_vint32_2186(&v93, *(_DWORD *)(a1 + 9376));
    store_stream_write_vint32_2186(&v93, *(_DWORD *)(a1 + 14088));
    store_stream_write_vint32_2186(&v93, *(_DWORD *)(a1 + 4616));
  }
  v25 = atomic_load((unsigned int *)(a1 + 28));
  if (v25 < 0)
  {
    if (v11)
      v26 = *(_DWORD *)(v11 + 4376);
    else
      v26 = 0;
    store_stream_write_vint32_2186(&v93, v26);
  }
  if (dword_1EF19FCB4 >= 5)
  {
    v43 = *__error();
    v44 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = *((_QWORD *)&v95 + 1) + *((_QWORD *)&v94 + 1);
      _os_log_impl(&dword_1B8270000, v44, OS_LOG_TYPE_DEFAULT, "Post counts at %lld", buf, 0xCu);
    }
    *__error() = v43;
  }
  v27 = (unsigned int *)(a1 + 28);
  v28 = atomic_load((unsigned int *)(a1 + 28));
  if ((v28 & 2) != 0)
    goto LABEL_85;
  v29.length = *(_QWORD *)(a1 + 9376);
  if (v29.length)
  {
    v29.location = 0;
    CFBitVectorGetBits(*(CFBitVectorRef *)(a1 + 9392), v29, v20);
  }
  else
  {
    bzero(v20, v18);
  }
  v30 = *(_QWORD *)(a1 + 9376);
  v31 = v30 + 7;
  v15 = v30 < -7;
  v32 = v30 + 14;
  if (!v15)
    v32 = v31;
  v33 = v32 >> 3;
  v34 = *((_QWORD *)&v95 + 1);
  v35 = v95;
  v36 = v20;
  if (v33 + *((_QWORD *)&v95 + 1) >= (unint64_t)v95)
  {
    while (1)
    {
      v45 = v35 - v34;
      v90 = v36;
      memcpy((char *)v96[0] + v34, v36, v35 - v34);
      *((_QWORD *)&v95 + 1) += v45;
      if (store_stream_flush((unsigned int *)&v93, 0))
        break;
      v36 = &v90[v45];
      v33 -= v45;
      v34 = *((_QWORD *)&v95 + 1);
      v35 = v95;
      if (*((_QWORD *)&v95 + 1) + v33 < (unint64_t)v95)
        goto LABEL_42;
    }
  }
  else
  {
LABEL_42:
    memcpy((char *)v96[0] + v34, v36, v33);
    *((_QWORD *)&v95 + 1) += v33;
  }
  if (dword_1EF19FCB4 >= 5)
  {
    v46 = *__error();
    v47 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = *((_QWORD *)&v95 + 1) + *((_QWORD *)&v94 + 1);
      _os_log_impl(&dword_1B8270000, v47, OS_LOG_TYPE_DEFAULT, "Post bv1 at %lld", buf, 0xCu);
    }
    *__error() = v46;
    v37.length = *(_QWORD *)(a1 + 14088);
    if (v37.length)
      goto LABEL_45;
  }
  else
  {
    v37.length = *(_QWORD *)(a1 + 14088);
    if (v37.length)
    {
LABEL_45:
      v37.location = 0;
      CFBitVectorGetBits(*(CFBitVectorRef *)(a1 + 14104), v37, v20);
      v38 = *(_QWORD *)(a1 + 14088);
      goto LABEL_66;
    }
  }
  v38 = 0;
LABEL_66:
  v48 = v38 + 7;
  v15 = v38 < -7;
  v49 = v38 + 14;
  if (!v15)
    v49 = v48;
  v50 = v49 >> 3;
  v51 = *((_QWORD *)&v95 + 1);
  v52 = v95;
  v53 = v20;
  if (v50 + *((_QWORD *)&v95 + 1) >= (unint64_t)v95)
  {
    while (1)
    {
      v56 = v52 - v51;
      v91 = v53;
      memcpy((char *)v96[0] + v51, v53, v52 - v51);
      *((_QWORD *)&v95 + 1) += v56;
      if (store_stream_flush((unsigned int *)&v93, 0))
        break;
      v53 = &v91[v56];
      v50 -= v56;
      v51 = *((_QWORD *)&v95 + 1);
      v52 = v95;
      if (*((_QWORD *)&v95 + 1) + v50 < (unint64_t)v95)
        goto LABEL_69;
    }
  }
  else
  {
LABEL_69:
    memcpy((char *)v96[0] + v51, v53, v50);
    *((_QWORD *)&v95 + 1) += v50;
  }
  if (dword_1EF19FCB4 >= 5)
  {
    v57 = *__error();
    v58 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = *((_QWORD *)&v95 + 1) + *((_QWORD *)&v94 + 1);
      _os_log_impl(&dword_1B8270000, v58, OS_LOG_TYPE_DEFAULT, "Post bv2 at %lld", buf, 0xCu);
    }
    *__error() = v57;
    v54.length = *(_QWORD *)(a1 + 4616);
    if (v54.length)
      goto LABEL_72;
  }
  else
  {
    v54.length = *(_QWORD *)(a1 + 4616);
    if (v54.length)
    {
LABEL_72:
      v54.location = 0;
      CFBitVectorGetBits(*(CFBitVectorRef *)(a1 + 4632), v54, v20);
      v55 = *(_QWORD *)(a1 + 4616);
      goto LABEL_80;
    }
  }
  v55 = 0;
LABEL_80:
  v59 = v55 + 7;
  v15 = v55 < -7;
  v60 = v55 + 14;
  if (!v15)
    v60 = v59;
  v61 = v60 >> 3;
  v62 = *((_QWORD *)&v95 + 1);
  v63 = v95;
  v64 = v20;
  if (v61 + *((_QWORD *)&v95 + 1) >= (unint64_t)v95)
  {
    while (1)
    {
      v82 = v63 - v62;
      v92 = v64;
      memcpy((char *)v96[0] + v62, v64, v63 - v62);
      *((_QWORD *)&v95 + 1) += v82;
      if (store_stream_flush((unsigned int *)&v93, 0))
        break;
      v64 = &v92[v82];
      v61 -= v82;
      v62 = *((_QWORD *)&v95 + 1);
      v63 = v95;
      if (*((_QWORD *)&v95 + 1) + v61 < (unint64_t)v95)
        goto LABEL_83;
    }
  }
  else
  {
LABEL_83:
    memcpy((char *)v96[0] + v62, v64, v61);
    *((_QWORD *)&v95 + 1) += v61;
  }
  if (dword_1EF19FCB4 < 5)
  {
LABEL_85:
    v65 = atomic_load(v27);
    if (v65 < 0)
      goto LABEL_86;
    goto LABEL_96;
  }
  v83 = *__error();
  v84 = _SILogForLogForCategory(10);
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = *((_QWORD *)&v95 + 1) + *((_QWORD *)&v94 + 1);
    _os_log_impl(&dword_1B8270000, v84, OS_LOG_TYPE_DEFAULT, "Post bv3 at %lld", buf, 0xCu);
  }
  *__error() = v83;
  v85 = atomic_load(v27);
  if (v85 < 0)
  {
LABEL_86:
    if (*(_QWORD *)(a1 + 4904))
    {
      if (v11 && (v66.length = *(_QWORD *)(v11 + 4376)) != 0)
      {
        v66.location = 0;
        CFBitVectorGetBits(*(CFBitVectorRef *)(v11 + 4392), v66, v20);
        v67 = *(_QWORD *)(v11 + 4376);
        v68 = v67 + 7;
        v15 = v67 < -7;
        v69 = v67 + 14;
        if (!v15)
          v69 = v68;
        v70 = v69 >> 3;
      }
      else
      {
        v70 = 0;
      }
      v71 = *((_QWORD *)&v95 + 1);
      v72 = v95;
      v73 = v20;
      if (*((_QWORD *)&v95 + 1) + v70 >= (unint64_t)v95)
      {
        while (1)
        {
          v86 = v72 - v71;
          v87 = v73;
          memcpy((char *)v96[0] + v71, v73, v72 - v71);
          *((_QWORD *)&v95 + 1) += v86;
          if (store_stream_flush((unsigned int *)&v93, 0))
            break;
          v73 = &v87[v86];
          v70 -= v86;
          v71 = *((_QWORD *)&v95 + 1);
          v72 = v95;
          if (*((_QWORD *)&v95 + 1) + v70 < (unint64_t)v95)
            goto LABEL_94;
        }
      }
      else
      {
LABEL_94:
        memcpy((char *)v96[0] + v71, v73, v70);
        *((_QWORD *)&v95 + 1) += v70;
      }
      if (dword_1EF19FCB4 >= 5)
      {
        v88 = *__error();
        v89 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = *((_QWORD *)&v95 + 1) + *((_QWORD *)&v94 + 1);
          _os_log_impl(&dword_1B8270000, v89, OS_LOG_TYPE_DEFAULT, "Post bv4 at %lld", buf, 0xCu);
        }
        *__error() = v88;
      }
    }
  }
LABEL_96:
  free(v20);
  v74 = atomic_load((unsigned int *)(a1 + 28));
  if ((v74 & 2) != 0)
  {
    v80 = atomic_load((unsigned int *)(a1 + 28));
    TermUpdateSetStore(0, 0, &v93, (v80 & 8) != 0);
  }
  else
  {
    *(_QWORD *)buf = 0;
    if (a2)
    {
      v75 = atomic_load((unsigned int *)(a1 + 28));
      if ((v75 & 0xC) == 8)
        indexCopyDeleteDocIds(a1, 0, buf);
    }
    v76 = *(_QWORD *)buf;
    v77 = atomic_load((unsigned int *)(a1 + 28));
    TermUpdateSetStore(a2, v76, &v93, (v77 & 8) != 0);
    v78 = *(void **)buf;
    if (*(_QWORD *)buf)
    {
      v79 = *(const void **)(*(_QWORD *)buf + 16);
      if (v79)
        CFRelease(v79);
      free(v78);
    }
  }
  store_stream_flush((unsigned int *)&v93, 1);
  v14 = v94;
  if (v96[0])
  {
    free(v96[0]);
    v96[0] = 0;
    *(_QWORD *)&v95 = 0;
    if ((_DWORD)v93 != -1 && v96[1])
    {
      _fd_release_fd((_DWORD *)v96[1], v93, 0, *((uint64_t *)&v93 + 1));
      LODWORD(v93) = -1;
    }
    v96[1] = 0;
  }
  fd_release((char *)v6);
  return v14;
}

uint64_t handle_missing_punctuation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, int a6)
{
  uint64_t v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  UChar32 v15;
  uint64_t result;

  if (a2 >= a3)
    return 0;
  v9 = a2;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  do
  {
    v15 = *(unsigned __int16 *)(a1 + 2 * v9);
    if (u_isUWhiteSpace(v15))
    {
      if (v13)
      {
        if (a4)
        {
          v11 = a4(a1 + 2 * v14, v13, v12, a5);
          v14 = 0;
          v13 = 0;
          v12 = 0;
          goto LABEL_19;
        }
        v14 = 0;
        v13 = 0;
        v12 = 0;
      }
      else
      {
        if (!a6)
          goto LABEL_8;
        if (a4)
        {
          v11 = a4(a1 + 2 * v14, 1, 2048, a5);
LABEL_8:
          v13 = 0;
          goto LABEL_19;
        }
        v13 = 0;
      }
      v11 = 0;
    }
    else
    {
      if (((1 << u_charType(v15)) & 0x30F80000) != 0)
        v12 |= 0x20uLL;
      if (!v13)
        v14 = v9;
      ++v13;
    }
LABEL_19:
    ++v9;
  }
  while (a3 != v9);
  if (v13)
    result = 0;
  else
    result = v11;
  if (v13)
  {
    if (a4)
      return a4(a1 + 2 * v14, v13, v12, a5);
  }
  return result;
}

uint64_t getUniquedDBFValue(unint64_t a1, int a2, _DWORD *a3, int a4)
{
  size_t v8;
  size_t v9;
  _BYTE *v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v22;
  _BYTE *v23;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  v8 = a3[2];
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)v24 - ((v9 + 15) & 0x1FFFFFFF0);
  bzero(v10, v9);
  if (a2 == 4)
  {
    v11 = a3[1];
    if (v11 >> 28)
      v12 = 5;
    else
      v12 = 4;
    if (v11 >= 0x200000)
      v13 = v12;
    else
      v13 = 3;
    if (v11 >= 0x4000)
      v14 = v13;
    else
      v14 = 2;
    if (v11 >= 0x80)
      v15 = v14;
    else
      v15 = 1;
    v16 = v15 + v8;
    if (v16 >> 28)
    {
      *v10 = -16;
      *(_DWORD *)(v10 + 1) = v16;
      v17 = 5;
    }
    else if ((v16 & 0xFE00000) != 0)
    {
      *v10 = HIBYTE(v16) | 0xE0;
      v10[1] = BYTE2(v16);
      v10[2] = BYTE1(v16);
      v10[3] = v16;
      v17 = 4;
    }
    else if ((v16 & 0x1FC000) != 0)
    {
      *v10 = BYTE2(v16) | 0xC0;
      v10[1] = BYTE1(v16);
      v10[2] = v16;
      v17 = 3;
    }
    else if ((v16 & 0x3F80) != 0)
    {
      *v10 = BYTE1(v16) | 0x80;
      v10[1] = v16;
      v17 = 2;
    }
    else
    {
      *v10 = v16;
      v17 = 1;
    }
    if (v11 >> 28)
    {
      v20 = &v10[v17];
      *v20 = -16;
      *(_DWORD *)(v20 + 1) = v11;
      v18 = v17 + 5;
    }
    else if ((v11 & 0xFE00000) != 0)
    {
      v19 = &v10[v17];
      *v19 = HIBYTE(v11) | 0xE0;
      v19[1] = BYTE2(v11);
      v19[2] = BYTE1(v11);
      v18 = v17 + 4;
      v19[3] = v11;
    }
    else if ((v11 & 0x1FC000) != 0)
    {
      v22 = &v10[v17];
      *v22 = BYTE2(v11) | 0xC0;
      v22[1] = BYTE1(v11);
      v18 = v17 + 3;
      v22[2] = v11;
    }
    else if ((v11 & 0x3F80) != 0)
    {
      v23 = &v10[v17];
      *v23 = BYTE1(v11) | 0x80;
      v18 = v17 + 2;
      v23[1] = v11;
    }
    else
    {
      v18 = v17 + 1;
      v10[v17] = v11;
    }
  }
  else if (v8 >> 28)
  {
    *v10 = -16;
    *(_DWORD *)(v10 + 1) = v8;
    v18 = 5;
  }
  else if ((v8 & 0xFE00000) != 0)
  {
    *v10 = BYTE3(v8) | 0xE0;
    v10[1] = BYTE2(v8);
    v10[2] = BYTE1(v8);
    v10[3] = v8;
    v18 = 4;
  }
  else if ((v8 & 0x1FC000) != 0)
  {
    *v10 = BYTE2(v8) | 0xC0;
    v10[1] = BYTE1(v8);
    v10[2] = v8;
    v18 = 3;
  }
  else if ((v8 & 0x3F80) != 0)
  {
    *v10 = BYTE1(v8) | 0x80;
    v10[1] = v8;
    v18 = 2;
  }
  else
  {
    *v10 = v8;
    v18 = 1;
  }
  memcpy(&v10[v18], (char *)a3 + 13, v8);
  return _get_id_for_string(a1, a2, v10, (int)v8 + (int)v18, a4, 0);
}

void freeDirectory(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  _OWORD v7[2];

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    if (v2[1] != 1)
    {
      v3 = 0;
      v4 = 2;
      do
      {
        v5 = &v2[v4];
        if ((uint64_t)v2[v4] >= 2)
        {
          v6 = v5[1];
          v7[0] = *v5;
          v7[1] = v6;
          freeDirectory(v7);
          v2 = *(_QWORD **)(a1 + 8);
        }
        ++v3;
        v4 += 4;
      }
      while (v3 < v2[1] - 1);
    }
    free(v2);
  }
}

uint64_t fd_truncate(uint64_t a1, off_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  __int16 v9;
  uint64_t v11;

  v11 = 0;
  v4 = _fd_acquire_fd(a1, &v11);
  if ((_DWORD)v4 == -1)
    return 0xFFFFFFFFLL;
  v5 = v4;
  v6 = _fd_ftruncate_guarded(v4, (uint64_t)&v11, a2);
  v7 = *__error();
  if ((_DWORD)v6 == -1 || a2 == 0)
    v9 = 0;
  else
    v9 = 2;
  *(_WORD *)(a1 + 56) = *(_WORD *)(a1 + 56) & 0xFFFD | v9;
  _fd_release_fd((_DWORD *)a1, v5, 0, v11);
  if ((_DWORD)v6 == -1)
    *__error() = v7;
  return v6;
}

uint64_t fd_pwrite(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  NSObject *v14;
  const char *v16;
  char *v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  char v36[1024];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    *__error() = 2;
    return -1;
  }
  if (*(_QWORD *)(a1 + 96))
  {
    v17 = __si_assert_copy_extra_521(-1);
    v18 = v17;
    v19 = "";
    if (v17)
      v19 = v17;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 651, "!obj->forbidder", v19);
    free(v18);
    if (__valid_fs(-1))
      v20 = 2989;
    else
      v20 = 3072;
    *(_DWORD *)v20 = -559038737;
    abort();
  }
  v21 = 0;
  v8 = _fd_acquire_fd(a1, &v21);
  v9 = v8;
  if ((_DWORD)v8 == -1)
  {
    v12 = *__error();
LABEL_9:
    bzero(v36, 0x400uLL);
    v13 = *__error();
    v14 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v16 = fd_realpath((_DWORD *)a1, v36);
      if (!v16)
      {
        v16 = fd_name(a1, v36, 0x400uLL);
        if (!v16)
          v16 = "";
      }
      *(_DWORD *)buf = 136316674;
      v23 = "fd_pwrite";
      v24 = 1024;
      v25 = 667;
      v26 = 1024;
      v27 = v9;
      v28 = 2080;
      v29 = v16;
      v30 = 2048;
      v31 = a4;
      v32 = 1024;
      v33 = a3;
      v34 = 1024;
      v35 = v12;
      _os_log_error_impl(&dword_1B8270000, v14, OS_LOG_TYPE_ERROR, "%s:%d: pwrite(%d %s, o:%lx, s:%d) err:%d", buf, 0x38u);
    }
    *__error() = v13;
    *__error() = v12;
    return -1;
  }
  v10 = prot_pwrite_guarded(v8, (uint64_t)&v21, a2, a3, a4);
  if (v10 == -1)
  {
    v12 = *__error();
    _fd_release_fd((_DWORD *)a1, v9, 0, v21);
    goto LABEL_9;
  }
  v11 = v10;
  _fd_release_fd((_DWORD *)a1, v9, 0, v21);
  return v11;
}

uint64_t fd_pread(_DWORD *a1, void *a2, size_t a3, off_t a4)
{
  uint64_t v8;
  int v9;
  ssize_t v10;
  int v11;
  int v12;
  NSObject *v13;
  const char *v15;
  uint64_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  off_t v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  char v31[1024];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v8 = _fd_acquire_fd((uint64_t)a1, &v16);
  v9 = v8;
  if ((_DWORD)v8 == -1 || (v10 = prot_pread(v8, a2, a3, a4), _fd_release_fd(a1, v9, 0, v16), v10 == -1))
  {
    bzero(v31, 0x400uLL);
    v11 = *__error();
    v12 = *__error();
    v13 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v15 = fd_realpath(a1, v31);
      if (!v15)
      {
        v15 = fd_name((uint64_t)a1, v31, 0x400uLL);
        if (!v15)
          v15 = "";
      }
      *(_DWORD *)buf = 136316674;
      v18 = "fd_pread";
      v19 = 1024;
      v20 = 637;
      v21 = 1024;
      v22 = v9;
      v23 = 2080;
      v24 = v15;
      v25 = 2048;
      v26 = a4;
      v27 = 1024;
      v28 = a3;
      v29 = 1024;
      v30 = v11;
      _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: pread(%d %s, o:%lx, s:%d) err:%d", buf, 0x38u);
    }
    *__error() = v12;
    *__error() = v11;
    return -1;
  }
  return v10;
}

uint64_t fd_mmap(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v8;

  if (!a1)
  {
    *__error() = 22;
    return -1;
  }
  v8 = 0;
  if (*(_DWORD *)(a1 + 44) == -1)
    v2 = *(_DWORD *)(a1 + 40);
  else
    v2 = _fd_acquire_fd(a1, &v8);
  if (v2 == -1)
    return -1;
  while (1)
  {
    v3 = __mmap();
    if (v3 != -1)
      break;
    v4 = g_prot_error_callback;
    if (!g_prot_error_callback)
      break;
    v5 = *(unsigned int *)(a1 + 40);
    v6 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v4 + 16))(v4, v5, *v6, 10) & 1) == 0)
    {
      v3 = -1;
      break;
    }
  }
  if (*(_DWORD *)(a1 + 44) != -1)
    _fd_release_fd((_DWORD *)a1, v2, (*(_WORD *)(a1 + 56) & 2) == 0, v8);
  return v3;
}

uint64_t fd_guarded_mmap(uint64_t a1)
{
  uint64_t v2;

  v2 = fd_mmap(a1);
  if (v2 != -1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&map_guard_lock);
    ++*(_BYTE *)(a1 + 60);
    os_unfair_lock_unlock((os_unfair_lock_t)&map_guard_lock);
  }
  return v2;
}

_QWORD *fd_create_protected(int a1, const char *a2, int a3, unsigned __int8 a4)
{
  _QWORD *v8;
  int v9;
  __int16 v10;
  __int16 v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  const char *v17;
  int v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  _BYTE v27[14];
  __int16 v28;
  _BYTE v29[10];
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  _BYTE v35[1024];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (fd_create_protected_once != -1)
    dispatch_once(&fd_create_protected_once, &__block_literal_global_6341);
  v8 = malloc_type_malloc(0x68uLL, 0x10300409CE040BCuLL);
  *(_DWORD *)v8 = -50529037;
  v8[2] = 0;
  v8[3] = 0;
  v8[1] = 0;
  v8[4] = 1;
  *((_DWORD *)v8 + 10) = -1;
  *((_DWORD *)v8 + 11) = a1;
  v9 = (a3 & 3) != 0;
  *((_DWORD *)v8 + 12) = a3 | (v9 << 29);
  v10 = *((_WORD *)v8 + 28);
  *((_WORD *)v8 + 30) &= 0xFC00u;
  v11 = v10 & 0xFFF0 | (4 * v9);
  *((_WORD *)v8 + 28) = v11;
  v12 = strdup(a2);
  *((_BYTE *)v8 + 52) = 0;
  *((_DWORD *)v8 + 17) = 0;
  v8[9] = v12;
  v8[10] = 0;
  v8[11] = 0;
  v8[12] = 0;
  *((_WORD *)v8 + 28) = v11 & 0xF00F | (16 * a4);
  v23 = 0;
  v13 = _fd_acquire_fd((uint64_t)v8, &v23);
  if (v13 == -1)
  {
    v14 = *__error();
    bzero(v35, 0x400uLL);
    v15 = fcntl(a1, 50, v35);
    if (v35[0])
      v16 = v15 < 0;
    else
      v16 = 1;
    if (v16)
      v17 = 0;
    else
      v17 = v35;
    if ((a3 & 0x200) != 0)
      v18 = 17;
    else
      v18 = 2;
    if (v14 == v18)
    {
      if (gSILogLevels[0] < 5)
      {
LABEL_21:
        fd_release((char *)v8);
        v8 = 0;
        *__error() = v14;
        return v8;
      }
      v19 = *__error();
      v20 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316162;
        v25 = v17;
        v26 = 2080;
        *(_QWORD *)v27 = a2;
        *(_WORD *)&v27[8] = 1024;
        *(_DWORD *)&v27[10] = a3;
        v28 = 1024;
        *(_DWORD *)v29 = a1;
        *(_WORD *)&v29[4] = 1024;
        *(_DWORD *)&v29[6] = v14;
        _os_log_impl(&dword_1B8270000, v20, OS_LOG_TYPE_DEFAULT, "fd_open failed, path:%s, name:%s, flags:0x%x, parent_fd:%d, errno:%d", buf, 0x28u);
      }
    }
    else
    {
      v19 = *__error();
      v21 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        v25 = "fd_create_protected";
        v26 = 1024;
        *(_DWORD *)v27 = 206;
        *(_WORD *)&v27[4] = 2080;
        *(_QWORD *)&v27[6] = v17;
        v28 = 2080;
        *(_QWORD *)v29 = a2;
        *(_WORD *)&v29[8] = 1024;
        v30 = a3;
        v31 = 1024;
        v32 = a1;
        v33 = 1024;
        v34 = v14;
        _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: fd_open failed, path:%s, name:%s, flags:0x%x, parent_fd:%d, errno:%d", buf, 0x38u);
      }
    }
    *__error() = v19;
    goto LABEL_21;
  }
  *((_DWORD *)v8 + 12) &= 0xFFFFF9FF;
  _fd_release_fd(v8, v13, 0, v23);
  return v8;
}

uint64_t extendBlock(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char v14;
  char *v16;
  char *v17;
  const char *v18;

  v5 = a1 + 160;
  v6 = (unint64_t)a2 << 6;
  v7 = storageResolvePtr(a1 + 160, v6, 8uLL, 1);
  v8 = storageResolvePtr(v5, v6, 64 << v7[2], 1);
  v9 = 64 << v8[2];
  if ((int)(v9 - 8) < *(unsigned __int16 *)v8)
  {
    v16 = __si_assert_copy_extra_1644(*(_DWORD **)(a1 + 376));
    v17 = v16;
    v18 = "";
    if (v16)
      v18 = v16;
    __message_assert("%s:%u: failed assertion '%s' %s flat store", "FlatStore.c", 649, "storePageEnd(page) <= storePageDataSize(page)", v18);
    free(v17);
    if (__valid_fsp(*(_DWORD **)(a1 + 376)))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  LODWORD(v10) = 64 << v8[2];
  do
    v10 = (2 * v10);
  while ((unint64_t)a3 + 8 > v10);
  v11 = storageExtendOffset(v5, v6, v9, v10);
  if ((_DWORD)v11)
  {
    v12 = storageResolvePtr(v5, v6, 8uLL, 1);
    v13 = storageResolvePtr(v5, v6, 64 << v12[2], 1);
    v14 = __clz(__rbit32(v10 >> 6));
    if (!(_DWORD)v10)
      v14 = -1;
    v13[2] = v14;
  }
  return v11;
}

void dirtyStorageOffsets(uint64_t a1, unint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if (a3 >= 1)
  {
    v4 = a1 + 4368;
    v5 = a3;
    do
    {
      v7 = *a2++;
      v6 = v7;
      bit_vector_set_2851(v4, (v7 >> 17));
      if ((v7 >> 17) != (v7 + 8) >> 17)
        bit_vector_set_2851(v4, (v6 >> 17) + 1);
      --v5;
    }
    while (v5);
  }
}

uint64_t directoryStoreValidate(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  const char *v8;
  uint64_t v9;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 + 8);
    if (*(_DWORD *)(result + 4392) && v2 >= 1)
    {
      v4 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      if ((v2 & 0x3FFFFFFFFFFFFFFFuLL) >= *(_QWORD *)(result + 232))
      {
        v5 = result;
        v6 = __si_assert_copy_extra(*(_DWORD **)(result + 216));
        v7 = v6;
        v8 = "";
        if (v6)
          v8 = v6;
        __message_assert("%s:%u: failed assertion '%s' %s Expected offset (%llx) to be less than free region (%llx)", "FileTree.c", 1508, "CHILDLESS(offset) || MASKPAGE(offset) <storageGetCount(store)", v8, v4, *(_QWORD *)(v5 + 232));
        free(v7);
        if (__valid_fsp(*(_DWORD **)(v5 + 216)))
          v9 = 2989;
        else
          v9 = 3072;
        *(_DWORD *)v9 = -559038737;
        abort();
      }
    }
  }
  return result;
}

uint64_t directoryStoreMergeUpdateSet(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v6;
  int32_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void (*v16)(_QWORD);
  int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_QWORD);
  char *v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE buf[24];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = setCrashStateTarget(3);
  if (storageResolvePtr(a1 + 8, 0, 1uLL, 1))
  {
    v7 = OSAtomicIncrement32((int32_t *)exceptionSequenceNum);
    v8 = *(_QWORD *)(a1 + 224);
    if (v8)
      v9 = *(_DWORD *)(v8 + 44);
    else
      v9 = -1;
    v10 = setThreadIdAndInfo(v9, sStorageExceptionCallbacks, a1 + 8, 1, v7);
    v30 = HIDWORD(v10);
    v31 = v10;
    v28 = v12;
    v29 = v11;
    v13 = *(_QWORD *)&threadData[18 * v10 + 2];
    v14 = v13 + 320 * HIDWORD(v10);
    v15 = *(_DWORD *)(v14 + 312);
    v16 = *(void (**)(_QWORD))(v14 + 224);
    if (v16)
      v16(*(_QWORD *)(v13 + 320 * HIDWORD(v10) + 288));
    if (_setjmp((int *)v14))
    {
      v17 = *__error();
      v18 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "directoryStoreMergeUpdateSet";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2312;
        _os_log_error_impl(&dword_1B8270000, v18, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v17;
      *(_DWORD *)(v14 + 312) = v15;
      CIOnThreadCleanUpReset(v28);
      dropThreadId(v31, 1, v7);
      CICleanUpReset(v31, v29);
    }
    else
    {
      *(_BYTE *)a1 = 1;
      v19 = *(_QWORD *)(a1 + 4416);
      if (!v19)
      {
        v19 = 2;
        *(_QWORD *)(a1 + 4416) = 2;
      }
      if (*a2 != v19)
      {
        v24 = __si_assert_copy_extra(0);
        v25 = v24;
        v26 = "";
        if (v24)
          v26 = v24;
        __message_assert("%s:%u: failed assertion '%s' %s ", "FileTree.c", 2307, "rootDirectory->fileid == getStoreOID(root.directory->fileId)", v26);
        free(v25);
        if (__valid_fs(-1))
          v27 = 2989;
        else
          v27 = 3072;
        *(_DWORD *)v27 = -559038737;
        abort();
      }
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      *(_QWORD *)buf = a1 + 4416;
      mergeOne(a1 + 8, (__int128 *)buf, (uint64_t)a2, a3);
      v20 = *(_QWORD *)&threadData[18 * v31 + 2];
      v21 = v20 + 320 * v30;
      *(_DWORD *)(v21 + 312) = v15;
      v22 = *(void (**)(_QWORD))(v21 + 232);
      if (v22)
        v22(*(_QWORD *)(v20 + 320 * v30 + 288));
      dropThreadId(v31, 0, v7);
    }
  }
  return setCrashStateTarget(v6);
}

uint64_t db_write_unlock(uint64_t a1)
{
  uint64_t v2;
  pthread_override_s *v3;
  char v4;

  v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  *(_DWORD *)(a1 + 204) = 0;
  v3 = *(pthread_override_s **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v4 = *(_DWORD *)(a1 + 196) != 0;
  *(_BYTE *)(a1 + 212) = 0;
  db_rwlock_wakeup(a1, v4, 0);
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v3)
    pthread_override_qos_class_end_np(v3);
  return v2;
}

uint64_t db_store_obj(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  pthread_key_t v8;
  void *v9;
  unsigned int v10;
  unint64_t v11;
  signed int v12;
  int v13;
  unint64_t v14;
  int v15;
  pthread_override_s *v16;
  char v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  int v27;
  char *v28;
  char *v29;
  const char *v30;
  int v31;
  NSObject *v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 != 1685287992)
  {
    v25 = *__error();
    v26 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_DWORD *)a1;
      *(_DWORD *)buf = 136315650;
      v34 = "db_store_obj";
      v35 = 1024;
      v36 = 319;
      v37 = 1024;
      v38 = v27;
      _os_log_error_impl(&dword_1B8270000, v26, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v25;
    v28 = __si_assert_copy_extra_268();
    v29 = v28;
    if (v28)
      v30 = v28;
    else
      v30 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 319, v30);
    free(v29);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  v6 = db2_store_obj_preamble(*(_DWORD *)(a1 + 804), a2, a3);
  if (!(_DWORD)v6)
  {
    v8 = __THREAD_SLOT_KEY;
    if (!__THREAD_SLOT_KEY)
    {
      makeThreadId();
      v8 = __THREAD_SLOT_KEY;
    }
    v9 = pthread_getspecific(v8);
    HIDWORD(v11) = qos_class_self() - 9;
    LODWORD(v11) = HIDWORD(v11);
    v10 = v11 >> 2;
    if (v10 > 6)
      v12 = 0;
    else
      v12 = dword_1B8630ED0[v10];
    v13 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
    if (*(_QWORD *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(_BYTE *)(a1 + 796))
      goto LABEL_12;
    if (v12 <= 5)
    {
      if (*(_QWORD *)(a1 + 16 * v12 + 648))
      {
LABEL_12:
        db_rwlock_wait(a1 + 584, v12, 2);
LABEL_13:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
        if (v13)
        {
          v31 = *__error();
          v32 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v34 = "db2_store_obj";
            v35 = 1024;
            v36 = 11501;
            v37 = 1024;
            v38 = v13;
            _os_log_error_impl(&dword_1B8270000, v32, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
          }
          *__error() = v31;
          sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11501);
        }
        if (v9)
          v14 = CIOnThreadCleanUpPush((uint64_t)v9 - 1, (uint64_t)db_write_unlock, a1 + 584);
        else
          v14 = -1;
        v6 = db2_store_obj_inner(a1, a2, a3);
        v15 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
        *(_DWORD *)(a1 + 788) = 0;
        v16 = *(pthread_override_s **)(a1 + 760);
        *(_QWORD *)(a1 + 768) = 0;
        *(_QWORD *)(a1 + 760) = 0;
        v17 = *(_DWORD *)(a1 + 780) != 0;
        *(_BYTE *)(a1 + 796) = 0;
        db_rwlock_wakeup(a1 + 584, v17, 0);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
        if (v16)
          pthread_override_qos_class_end_np(v16);
        if (v15)
          sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11503);
        if (v9)
        {
          CIOnThreadCleanUpClearItem((uint64_t)v9 - 1, v14);
          v18 = &threadData[18 * ((uint64_t)v9 - 1)];
          v21 = v18[14];
          v19 = v18 + 14;
          v20 = v21;
          if (v14 + 1 == v21)
            *v19 = v20 - 1;
        }
        return v6;
      }
      v22 = v12 - 1;
      v23 = (uint64_t *)(a1 + 16 * v12 + 664);
      while (v22 != 4)
      {
        v24 = *v23;
        v23 += 2;
        ++v22;
        if (v24)
        {
          if (v22 <= 4)
            goto LABEL_12;
          break;
        }
      }
    }
    *(_QWORD *)(a1 + 768) = pthread_self();
    goto LABEL_13;
  }
  return v6;
}

uint64_t db_rwlock_destroy(pthread_mutex_t *a1)
{
  uint64_t i;
  char *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  for (i = 0; i != 6; ++i)
  {
    v3 = (char *)a1 + 16 * i;
    v4 = (uint64_t *)(v3 + 64);
    v5 = v3 + 72;
    while (1)
    {
      v6 = *v4;
      if (*v4 != *v5)
      {
        *v4 = *(_QWORD *)(v6 + 64);
        goto LABEL_6;
      }
      *v4 = 0;
      v4[1] = 0;
      if (!v6)
        break;
LABEL_6:
      *(_BYTE *)(v6 + 52) = 1;
      --*(_DWORD *)&a1[3].__opaque[8];
      pthread_cond_destroy((pthread_cond_t *)v6);
      free((void *)v6);
    }
  }
  while (1)
  {
    v7 = *(_QWORD *)&a1[2].__opaque[32];
    if (!v7)
      break;
    *(_QWORD *)&a1[2].__opaque[32] = *(_QWORD *)(v7 + 64);
    pthread_cond_destroy((pthread_cond_t *)v7);
    free((void *)v7);
  }
  v8 = *(void **)&a1[2].__opaque[24];
  if (v8)
  {
    pthread_cond_destroy(*(pthread_cond_t **)&a1[2].__opaque[24]);
    free(v8);
  }
  return pthread_mutex_destroy(a1);
}

uint64_t db_downgrade_lock(pthread_mutex_t *a1)
{
  pthread_mutex_lock(a1);
  a1[3].__opaque[12] = 1;
  db_rwlock_wakeup((uint64_t)a1, 1, 1);
  return pthread_mutex_unlock(a1);
}

_DWORD *db_create_obj(uint64_t a1, uint64_t a2, int a3)
{
  size_t v5;
  _DWORD *v6;
  pthread_key_t v8;
  void *v9;
  unsigned int v10;
  unint64_t v11;
  signed int v12;
  int v13;
  unint64_t v14;
  int v15;
  pthread_override_s *v16;
  char v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  int v27;
  char *v28;
  char *v29;
  const char *v30;
  int v31;
  NSObject *v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a1 != 1685287992)
  {
    v25 = *__error();
    v26 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_DWORD *)a1;
      *(_DWORD *)buf = 136315650;
      v34 = "db_create_obj";
      v35 = 1024;
      v36 = 312;
      v37 = 1024;
      v38 = v27;
      _os_log_error_impl(&dword_1B8270000, v26, OS_LOG_TYPE_ERROR, "%s:%d: unexpected db signature %x", buf, 0x18u);
    }
    *__error() = v25;
    v28 = __si_assert_copy_extra_268();
    v29 = v28;
    if (v28)
      v30 = v28;
    else
      v30 = "";
    __message_assert("%s:%u: Unexpected code path %s ", "core-db.c", 312, v30);
    free(v29);
    MEMORY[0xBAD] = -559038737;
    abort();
  }
  if ((*(_BYTE *)(a1 + 804) & 8) != 0)
    return 0;
  if (a2)
    v5 = a2 + 48;
  else
    v5 = 256;
  v6 = malloc_type_malloc(v5, 0x31BFE0A7uLL);
  if (v6)
  {
    if (!a3)
    {
LABEL_8:
      v6[2] = v5;
      v6[3] = 48;
      *((_QWORD *)v6 + 5) = 8;
      *((_QWORD *)v6 + 3) = 0;
      *((_QWORD *)v6 + 4) = 0;
      return v6;
    }
    v8 = __THREAD_SLOT_KEY;
    if (!__THREAD_SLOT_KEY)
    {
      makeThreadId();
      v8 = __THREAD_SLOT_KEY;
    }
    v9 = pthread_getspecific(v8);
    HIDWORD(v11) = qos_class_self() - 9;
    LODWORD(v11) = HIDWORD(v11);
    v10 = v11 >> 2;
    if (v10 > 6)
      v12 = 0;
    else
      v12 = dword_1B8630ED0[v10];
    v13 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
    if (*(_QWORD *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(_BYTE *)(a1 + 796))
      goto LABEL_19;
    if (v12 <= 5)
    {
      if (*(_QWORD *)(a1 + 16 * v12 + 648))
      {
LABEL_19:
        db_rwlock_wait(a1 + 584, v12, 2);
LABEL_20:
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
        if (v13)
        {
          v31 = *__error();
          v32 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            v34 = "db2_create_obj_postamble";
            v35 = 1024;
            v36 = 11361;
            v37 = 1024;
            v38 = v13;
            _os_log_error_impl(&dword_1B8270000, v32, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", buf, 0x18u);
          }
          *__error() = v31;
          sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11361);
        }
        if (v9)
          v14 = CIOnThreadCleanUpPush((uint64_t)v9 - 1, (uint64_t)db_write_unlock, a1 + 584);
        else
          v14 = -1;
        *(_QWORD *)v6 = (*(_QWORD *)(a1 + 28))++;
        v15 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
        *(_DWORD *)(a1 + 788) = 0;
        v16 = *(pthread_override_s **)(a1 + 760);
        *(_QWORD *)(a1 + 768) = 0;
        *(_QWORD *)(a1 + 760) = 0;
        v17 = *(_DWORD *)(a1 + 780) != 0;
        *(_BYTE *)(a1 + 796) = 0;
        db_rwlock_wakeup(a1 + 584, v17, 0);
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
        if (v16)
          pthread_override_qos_class_end_np(v16);
        if (v15)
          sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 11363);
        if (v9)
        {
          CIOnThreadCleanUpClearItem((uint64_t)v9 - 1, v14);
          v18 = &threadData[18 * ((uint64_t)v9 - 1)];
          v21 = v18[14];
          v19 = v18 + 14;
          v20 = v21;
          if (v14 + 1 == v21)
            *v19 = v20 - 1;
        }
        goto LABEL_8;
      }
      v22 = v12 - 1;
      v23 = (uint64_t *)(a1 + 16 * v12 + 664);
      while (v22 != 4)
      {
        v24 = *v23;
        v23 += 2;
        ++v22;
        if (v24)
        {
          if (v22 <= 4)
            goto LABEL_19;
          break;
        }
      }
    }
    *(_QWORD *)(a1 + 768) = pthread_self();
    goto LABEL_20;
  }
  return v6;
}

uint64_t db2_store_obj_preamble(char a1, uint64_t a2, char a3)
{
  unsigned int v4;
  int v5;
  NSObject *v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  _BYTE v10[18];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if ((a1 & 8) != 0)
    return 13;
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 0x30 && *(_DWORD *)(a2 + 8) > 0x2Fu)
  {
    if (v4 <= 0xFFEB)
    {
      *(_DWORD *)(a2 + 40) &= ~8u;
      if ((a3 & 1) != 0)
      {
        return 0;
      }
      else
      {
        *(_QWORD *)v10 = 0;
        *(_QWORD *)&v10[8] = 0;
        if (gettimeofday((timeval *)v10, 0))
        {
          v8 = time(0);
          v9 = 0;
        }
        else
        {
          v8 = *(_DWORD *)v10;
          v9 = *(unsigned int *)&v10[8];
        }
        result = 0;
        *(_QWORD *)(a2 + 16) = v9 + 1000000 * v8;
      }
    }
    else
    {
      return 7;
    }
  }
  else
  {
    v5 = *__error();
    v6 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v10 = 136315394;
      *(_QWORD *)&v10[4] = "db2_store_obj_preamble";
      *(_WORD *)&v10[12] = 1024;
      *(_DWORD *)&v10[14] = 11481;
      _os_log_error_impl(&dword_1B8270000, v6, OS_LOG_TYPE_ERROR, "%s:%d: dbo too small", v10, 0x12u);
    }
    *__error() = v5;
    return 22;
  }
  return result;
}

uint64_t db2_store_obj_inner(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6;
  _QWORD *v7;
  int v8;
  int8x8_t v9;
  uint8x8_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t inserted;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;
  unsigned int *v32;
  size_t v33;
  unsigned int v34;
  uint64_t updated;
  int v36;
  NSObject *v37;
  uint64_t **v39;
  uint64_t *v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  int64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  int v56;
  unsigned int v57;
  char *v58;
  char *v59;
  const char *v60;
  uint64_t v61;
  _BYTE buf[12];
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  unint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a1 + 4) & 2) != 0)
  {
    v12 = *__error();
    v13 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "db2_store_obj_inner";
      v63 = 1024;
      v64 = 11470;
      _os_log_error_impl(&dword_1B8270000, v13, OS_LOG_TYPE_ERROR, "%s:%d: Previous write error", buf, 0x12u);
    }
    *__error() = v12;
    return 22;
  }
  if (*(_DWORD *)(a2 + 12) <= 0x2Fu)
  {
    v58 = __si_assert_copy_extra_2151(0, -1);
    v59 = v58;
    v60 = "";
    if (v58)
      v60 = v58;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 13332, "dbo->used_bytes >= sizeof(external_db_obj)", v60);
    free(v59);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v6 = *(_QWORD *)a2;
  if ((a3 & 4) != 0)
  {
    v15 = 0;
    v61 = 0;
    if ((*(_BYTE *)(a1 + 804) & 1) != 0)
      v15 = (*(_DWORD *)(a2 + 40) >> 5) & 1;
    v16 = *(_QWORD *)(a1 + 856);
    v17 = *(unsigned int *)(v16 + 8);
    if ((_DWORD)v17)
    {
      v18 = *(int *)(v16 + 16);
      if ((int)v18 >= (int)v17
        || (v19 = v16 + 16 * v18, *(_QWORD *)(v19 + 20) != v6)
        || (v20 = *(_DWORD *)(v19 + 32), v15 != v20 >> 28))
      {
        v21 = (int)v17;
        if ((int)v17 >= 1)
        {
          v22 = 0;
          while (1)
          {
            if ((int)v17 + v22 < 0 != __OFADD__((_DWORD)v17, v22))
              v25 = v17 + v22 + 1;
            else
              v25 = v17 + v22;
            v26 = (v25 >> 1);
            v27 = v15 - (*(_DWORD *)(v16 + 16 * (int)v26 + 32) >> 28);
            if (v27)
            {
              v23 = v27;
              v24 = v26;
              if ((v23 & 0x8000000000000000) == 0)
                goto LABEL_20;
            }
            else
            {
              v23 = v6 - *(_QWORD *)(v16 + 16 * ((uint64_t)v25 >> 1) + 20);
              v24 = v26;
              if ((v23 & 0x8000000000000000) == 0)
              {
LABEL_20:
                if (!v23)
                  goto LABEL_33;
                v22 = v26 + 1;
                v24 = v17;
              }
            }
            v17 = v24;
            if (v22 >= (int)v24)
            {
              v30 = v23 > 0;
              goto LABEL_34;
            }
          }
        }
        LODWORD(v26) = 0;
LABEL_33:
        v30 = 0;
LABEL_34:
        if (v21 - 1 <= (int)v26)
          v30 = 0;
        v31 = v26 + v30;
        v18 = v31;
        *(_DWORD *)(v16 + 16) = v31;
        v20 = *(_DWORD *)(v16 + 16 * v31 + 32);
      }
      v32 = (unsigned int *)(v16 + 16 * v18 + 28);
      v33 = v20 & 0xFFFFFFF;
      v28 = a3 & 0x4002;
    }
    else
    {
      v28 = a3 & 0x4002;
      *(_QWORD *)buf = 0;
      v29 = _page_alloc_fetch(a1, (int8x16_t **)buf, 0, (unsigned int *)&v61 + 1, (signed int *)&v61, a3 & 0x4002 | 4u);
      if ((_DWORD)v29)
        return v29;
      free(*(void **)buf);
      v32 = (unsigned int *)&v61 + 1;
      v33 = v61;
    }
    v34 = *v32;
    serializeDBO(a1);
    updated = _page_update_obj(a1, 0, v34, v33, v28);
    inserted = updated;
    if ((a3 & 8) != 0 && (_DWORD)updated == 2)
    {
      inserted = _real_page_insert_obj(a1, 0, a3, v34, v33);
    }
    else if ((_DWORD)updated)
    {
      v36 = *__error();
      v37 = _SILogForLogForCategory(7);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "db2_store_obj_inner";
        v63 = 1024;
        v64 = 11462;
        v65 = 1024;
        v66 = inserted;
        v67 = 2048;
        v68 = v6;
        _os_log_error_impl(&dword_1B8270000, v37, OS_LOG_TYPE_ERROR, "%s:%d: Error %d, oid %llx", buf, 0x22u);
      }
      *__error() = v36;
    }
    free(0);
    return inserted;
  }
  if ((a3 & 8) != 0)
    return _insert_obj(a1, (uint64_t *)a2, 0, a3);
  v7 = *(_QWORD **)(a1 + 992);
  v8 = *(_DWORD *)(a1 + 804);
  v9 = (int8x8_t)v7[1];
  if (!*(_QWORD *)&v9)
    goto LABEL_63;
  v10 = (uint8x8_t)vcnt_s8(v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = *(_QWORD *)a2;
    if (v6 >= *(_QWORD *)&v9)
      v11 = v6 % *(_QWORD *)&v9;
  }
  else
  {
    v11 = (*(_QWORD *)&v9 - 1) & v6;
  }
  v39 = *(uint64_t ***)(*v7 + 8 * v11);
  if (!v39 || (v40 = *v39) == 0)
  {
LABEL_63:
    if ((v8 & 1) != 0)
      v42 = (*(_DWORD *)(a2 + 40) >> 5) & 1;
    else
      v42 = 0;
    v43 = *(_QWORD *)(a1 + 856);
    v44 = *(unsigned int *)(v43 + 8);
    if (!(_DWORD)v44)
      return _insert_obj(a1, (uint64_t *)a2, 0, a3);
    v45 = *(int *)(v43 + 16);
    if ((int)v45 >= (int)v44
      || (v46 = v43 + 16 * v45, *(_QWORD *)(v46 + 20) != v6)
      || (v47 = *(_DWORD *)(v46 + 32), v42 != v47 >> 28))
    {
      v48 = (int)v44;
      if ((int)v44 >= 1)
      {
        v49 = 0;
        while (1)
        {
          if ((int)v44 + v49 < 0 != __OFADD__((_DWORD)v44, v49))
            v50 = v44 + v49 + 1;
          else
            v50 = v44 + v49;
          v51 = (v50 >> 1);
          v52 = v42 - (*(_DWORD *)(v43 + 16 * (int)v51 + 32) >> 28);
          if (v52)
          {
            v53 = v52;
            v54 = v51;
            if ((v53 & 0x8000000000000000) == 0)
            {
LABEL_80:
              if (!v53)
                goto LABEL_84;
              v49 = v51 + 1;
              v54 = v44;
            }
          }
          else
          {
            v53 = v6 - *(_QWORD *)(v43 + 16 * ((uint64_t)v50 >> 1) + 20);
            v54 = v51;
            if ((v53 & 0x8000000000000000) == 0)
              goto LABEL_80;
          }
          v44 = v54;
          if (v49 >= (int)v54)
          {
            v55 = v53 > 0;
            goto LABEL_85;
          }
        }
      }
      LODWORD(v51) = 0;
LABEL_84:
      v55 = 0;
LABEL_85:
      if (v48 - 1 <= (int)v51)
        v55 = 0;
      v56 = v51 + v55;
      v45 = v56;
      *(_DWORD *)(v43 + 16) = v56;
      v47 = *(_DWORD *)(v43 + 16 * v56 + 32);
    }
    if ((v8 & 1) != 0)
      v57 = (*(_DWORD *)(a2 + 40) >> 5) & 1;
    else
      v57 = 0;
    if (!_page_obj_exists_by_oid_and_type(a1, v6, v57, *(_DWORD *)(v43 + 16 * v45 + 28), v47 & 0xFFFFFFF))
      return _insert_obj(a1, (uint64_t *)a2, 0, a3);
    return 17;
  }
  while (1)
  {
    v41 = v40[1];
    if (v41 == v6)
      break;
    if (v10.u32[0] > 1uLL)
    {
      if (v41 >= *(_QWORD *)&v9)
        v41 %= *(_QWORD *)&v9;
    }
    else
    {
      v41 &= *(_QWORD *)&v9 - 1;
    }
    if (v41 != v11)
      goto LABEL_63;
LABEL_53:
    v40 = (uint64_t *)*v40;
    if (!v40)
      goto LABEL_63;
  }
  if (v40[2] != v6)
    goto LABEL_53;
  if (*((_DWORD *)v40 + 6) != 3)
    goto LABEL_63;
  return _insert_obj(a1, (uint64_t *)a2, 0, a3);
}

uint64_t db2_dirty_datastore(uint64_t a1)
{
  pthread_key_t v2;
  void *v3;
  unsigned int v4;
  unint64_t v5;
  signed int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  pthread_override_s *v11;
  char v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = __THREAD_SLOT_KEY;
  if (!__THREAD_SLOT_KEY)
  {
    makeThreadId();
    v2 = __THREAD_SLOT_KEY;
  }
  v3 = pthread_getspecific(v2);
  HIDWORD(v5) = qos_class_self() - 9;
  LODWORD(v5) = HIDWORD(v5);
  v4 = v5 >> 2;
  if (v4 > 6)
    v6 = 0;
  else
    v6 = dword_1B8630ED0[v4];
  v7 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  if (*(_QWORD *)(a1 + 768) || *(_DWORD *)(a1 + 780) || *(_BYTE *)(a1 + 796))
    goto LABEL_9;
  if (v6 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v6 + 648))
    {
LABEL_9:
      db_rwlock_wait(a1 + 584, v6, 2);
      goto LABEL_10;
    }
    v18 = v6 - 1;
    v19 = (uint64_t *)(a1 + 16 * v6 + 664);
    while (v18 != 4)
    {
      v20 = *v19;
      v19 += 2;
      ++v18;
      if (v20)
      {
        if (v18 <= 4)
          goto LABEL_9;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 768) = pthread_self();
LABEL_10:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v7)
  {
    v21 = *__error();
    v22 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = 136315650;
      v24 = "db2_dirty_datastore";
      v25 = 1024;
      v26 = 8969;
      v27 = 1024;
      v28 = v7;
      _os_log_error_impl(&dword_1B8270000, v22, OS_LOG_TYPE_ERROR, "%s:%d: Lock failed with error %d", (uint8_t *)&v23, 0x18u);
    }
    *__error() = v21;
    sdb2_die(a1, "Multiple threads entering in sdb!", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 8969);
  }
  if (v3)
    v8 = CIOnThreadCleanUpPush((uint64_t)v3 - 1, (uint64_t)db_write_unlock, a1 + 584);
  else
    v8 = -1;
  v9 = _dirty_datastore_locked(a1, 0);
  v10 = pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_DWORD *)(a1 + 788) = 0;
  v11 = *(pthread_override_s **)(a1 + 760);
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  v12 = *(_DWORD *)(a1 + 780) != 0;
  *(_BYTE *)(a1 + 796) = 0;
  db_rwlock_wakeup(a1 + 584, v12, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  if (v11)
    pthread_override_qos_class_end_np(v11);
  if (v10)
    sdb2_die(a1, "Multiple threads in sdb! (leaving)", "/Library/Caches/com.apple.xbs/Sources/Spotlight_frameworks/spotlight/core-db/serial-db2/sdb2.c", 8971);
  if (v3)
  {
    CIOnThreadCleanUpClearItem((uint64_t)v3 - 1, v8);
    v13 = &threadData[18 * ((uint64_t)v3 - 1)];
    v16 = v13[14];
    v14 = v13 + 14;
    v15 = v16;
    if (v8 + 1 == v16)
      *v14 = v15 - 1;
  }
  return v9;
}

char *create_termupdateset(uint64_t a1, char **a2, uint64_t a3)
{
  int v6;
  char *result;

  if (*(_BYTE *)(a1 + 38))
    v6 = 48;
  else
    v6 = 16;
  result = TermUpdateSetCreate(0, 0, *(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 60), v6, *(_QWORD *)(a1 + 14344), *(_DWORD *)(a1 + 48), *(const void **)(a1 + 4912));
  *a2 = result;
  if (*(_BYTE *)(a1 + 15162))
  {
    *((_QWORD *)result + 76) = getPropertyStringCallback;
    result = *a2;
  }
  *((_QWORD *)result + 35) = a3;
  return result;
}

__CFArray *createStringArray(int *a1, int a2, const char *a3, unsigned int a4, int a5, CFAllocatorRef allocator)
{
  unsigned int *v9;
  __CFArray *Mutable;
  _BOOL4 v13;
  unsigned int *v14;
  unint64_t v15;
  const __CFString *v16;
  const __CFString *v17;
  unsigned int v19;
  const char *v20;
  _OWORD v21[32];
  uint64_t v22;

  v9 = (unsigned int *)a3;
  v22 = *MEMORY[0x1E0C80C00];
  v20 = a3;
  Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E0C9B378]);
  memset(v21, 0, sizeof(v21));
  if ((~a2 & 0x8010) != 0)
  {
    v13 = 0;
    v14 = 0;
    if (!a4)
      goto LABEL_9;
  }
  else
  {
    v19 = 512;
    v9 = (unsigned int *)copyDataForUniquedValue((uint64_t)a1, *v9, v21, &v19);
    v20 = (const char *)v9;
    v13 = v9 != (unsigned int *)v21;
    a4 = v19;
    v14 = v9;
    if (!v19)
      goto LABEL_9;
  }
  v15 = (unint64_t)v9 + a4;
  do
  {
    v16 = createString_9893(a1, a2, &v20, a5, allocator);
    if (v16)
    {
      v17 = v16;
      CFArrayAppendValue(Mutable, v16);
      CFRelease(v17);
    }
  }
  while ((unint64_t)v20 < v15);
LABEL_9:
  if (v13)
    free(v14);
  return Mutable;
}

NSObject *copyHoldQueue(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 1152);
  if (!v1)
    return 0;
  v2 = *(NSObject **)(v1 + 16);
  if (v2)
  {
    dispatch_retain(*(dispatch_object_t *)(v1 + 16));
    dispatch_suspend(v2);
  }
  return v2;
}

uint64_t ci_preallocate(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;
  __int128 v6;

  v2 = a2;
  if (gDisablePreallocate == 1)
  {
    *__error() = 45;
  }
  else
  {
    v5 = 0x300000002uLL;
    v6 = (unint64_t)a2;
    result = fcntl(a1, 42, &v5);
    if ((_DWORD)result != -1)
      return result;
  }
  if (*__error() == 45)
    return 0xFFFFFFFFLL;
  while (v2 >= 419430401)
  {
    v5 = xmmword_1B86312C8;
    v6 = unk_1B86312D8;
    v2 -= 419430400;
    if (fcntl(a1, 42, &v5) == -1)
      return 0xFFFFFFFFLL;
  }
  v5 = 0x300000004uLL;
  v6 = (unint64_t)v2;
  result = fcntl(a1, 42, &v5);
  if ((_DWORD)result == -1)
    return 0xFFFFFFFFLL;
  return result;
}

uint64_t bundleIDTypeMaskForBundleIDs(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  unsigned __int16 v4;
  CFIndex i;
  const __CFString *ValueAtIndex;
  const __CFString *v7;
  __int16 v8;

  if (a1 && (Count = CFArrayGetCount(a1), Count >= 1))
  {
    v3 = Count;
    v4 = 0;
    for (i = 0; i != v3; ++i)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, i);
      if (ValueAtIndex)
      {
        v7 = ValueAtIndex;
        if (CFStringCompare(ValueAtIndex, CFSTR("com.apple.pommesctl"), 0))
        {
          if (CFStringCompare(v7, CFSTR("com.apple.mobilemail"), 0))
          {
            if (CFStringCompare(v7, CFSTR("com.apple.mobilesafari"), 0)
              && CFStringCompare(v7, CFSTR("com.argos.BlendABApp2"), 0))
            {
              if (CFStringCompare(v7, CFSTR("com.apple.mobileslideshow"), 0))
              {
                if (CFStringCompare(v7, CFSTR("com.apple.mobilecal"), 0))
                {
                  if (CFStringCompare(v7, CFSTR("com.apple.MobileSMS"), 0))
                  {
                    if (CFStringCompare(v7, CFSTR("com.apple.mobilenotes"), 0))
                    {
                      if (CFStringCompare(v7, CFSTR("com.apple.reminders"), 0))
                      {
                        if (CFStringCompare(v7, CFSTR("com.apple.spotlight.events"), 0))
                        {
                          if (CFStringHasPrefix(v7, CFSTR("com.apple.omniSearch"))
                            || CFStringHasPrefix(v7, CFSTR("com.apple.intelligenceflow"))
                            || CFStringHasPrefix(v7, CFSTR("com.apple.ondeviceeval"))
                            || (_os_feature_enabled_impl() & 1) != 0)
                          {
                            v8 = 1024;
                          }
                          else if (CFStringCompare(v7, CFSTR("com.apple.CloudDocs.MobileDocumentsFileProvider"), 0)
                                 && CFStringCompare(v7, CFSTR("com.apple.CloudDocs.iCloudDriveFileProvider"), 0))
                          {
                            v8 = (CFStringCompare(v7, CFSTR("com.apple.FileProvider.LocalStorage"), 0) == kCFCompareEqualTo) << 6;
                          }
                          else
                          {
                            v8 = 64;
                          }
                        }
                        else
                        {
                          v8 = 512;
                        }
                      }
                      else
                      {
                        v8 = 128;
                      }
                    }
                    else
                    {
                      v8 = 256;
                    }
                  }
                  else
                  {
                    v8 = 32;
                  }
                }
                else
                {
                  v8 = 16;
                }
              }
              else
              {
                v8 = 8;
              }
            }
            else
            {
              v8 = 4;
            }
          }
          else
          {
            v8 = 2;
          }
        }
        else
        {
          v8 = 1;
        }
      }
      else
      {
        v8 = 0;
      }
      v4 |= v8;
    }
  }
  else
  {
    return 0;
  }
  return v4;
}

_BYTE *_term_trie_compact_alloc(uint64_t a1, unsigned int a2, int8x8_t a3)
{
  unsigned int v3;
  uint8x8_t v4;
  _BYTE *v9;
  _BYTE *v10;
  size_t v11;
  _QWORD **v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t i;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  const char *v23;
  uint64_t v24;

  v3 = __clz(__rbit32(a2));
  a3.i32[0] = a2;
  v4 = (uint8x8_t)vcnt_s8(a3);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.i32[0] != 1 || v3 < 2 || v3 >= 6)
  {
    v21 = __si_assert_copy_extra_268();
    v22 = v21;
    v23 = "";
    if (v21)
      v23 = v21;
    __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 106, "__builtin_popcount(entry_size)==1 && slot > 1 && slot <= 5", v23);
    free(v22);
    if (__valid_fs(-1))
      v24 = 2989;
    else
      v24 = 3072;
    *(_DWORD *)v24 = -559038737;
    abort();
  }
  v9 = OSAtomicDequeue((OSQueueHead *)(a1 + 16 * (v3 - 2) + 2080), 0);
  if (v9)
  {
    v10 = v9;
    v11 = 8 * a2 + 48;
  }
  else
  {
    v15 = *(_QWORD **)(a1 + 8);
    v13 = (_QWORD **)(a1 + 8);
    v14 = v15;
    v11 = 8 * a2 + 48;
    for (i = atomic_load(v15 + 1); ; i = atomic_load(v19))
    {
      while (1)
      {
        v10 = (_BYTE *)((i + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)&v10[v11 + 8] >= v14[2])
          break;
        v17 = v14 + 1;
        while (1)
        {
          v18 = __ldaxr(v17);
          if (v18 != i)
            break;
          if (!__stlxr((unint64_t)&v10[v11], v17))
            goto LABEL_10;
        }
        __clrex();
        i = v18;
      }
      os_unfair_lock_lock((os_unfair_lock_t)&_slablock);
      v14 = *v13;
      v19 = *v13 + 1;
      v20 = atomic_load(v19);
      if (((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8 >= v14[2])
        break;
      os_unfair_lock_unlock((os_unfair_lock_t)&_slablock);
    }
    v10 = slab_new_slab(v13, 8 * a2 + 48, 244);
    os_unfair_lock_unlock((os_unfair_lock_t)&_slablock);
  }
LABEL_10:
  bzero(v10, v11);
  v10[41] = a2;
  return v10;
}

uint64_t _termUpdateSetProgress()
{
  return 0;
}

uint64_t _storeageSetFreeListHead(uint64_t a1, unsigned int a2, unint64_t a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  uint64_t v11;
  char *v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v16 = a3;
  if (a3 && *(_QWORD *)(a1 + 232) <= a3)
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(a1 + 232);
      *(_DWORD *)buf = 136316162;
      v18 = "_storeageSetFreeListHead";
      v19 = 1024;
      v20 = 200;
      v21 = 1024;
      v22 = a2;
      v23 = 2048;
      v24 = a3;
      v25 = 2048;
      v26 = v11;
      _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: %d: offset(%lld) < freeRegion (%lld)", buf, 0x2Cu);
    }
    v7 = 0;
    *__error() = v8;
  }
  else
  {
    v6 = storageResolvePtr(a1, a3, 8uLL, 1);
    if (!v6)
    {
      v12 = __si_assert_copy_extra(0);
      v13 = v12;
      v14 = "";
      if (v12)
        v14 = v12;
      __message_assert("%s:%u: failed assertion '%s' %s ", "storage.c", 208, "ptr", v14);
      free(v13);
      if (__valid_fs(-1))
        v15 = 2989;
      else
        v15 = 3072;
      *(_DWORD *)v15 = -559038737;
      abort();
    }
    *(_QWORD *)v6 = 0;
    v7 = 1;
    dirtyStorageOffsets(a1, &v16, 1);
    *(_QWORD *)(a1 + 8 * a2 + 8) = a3;
  }
  return v7;
}

uint64_t _storageExpand(uint64_t a1, int a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  int v13;
  NSObject *v14;
  int v15;
  int v16;
  NSObject *v17;
  int *v18;
  uint64_t result;
  pthread_rwlock_t *v20;
  unsigned int *sig;
  const char *v22;
  const char *v23;
  int v24;
  uint8_t v25[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 224);
  v4 = (2 * a2) + *(_QWORD *)(a1 + 232) + *(int *)(a1 + 4) + 8;
  if (v3 >> 30)
  {
    LODWORD(v5) = 0;
    do
      v5 = (v5 + 0x40000000);
    while (v4 >= v3 + v5);
  }
  else
  {
    if ((_DWORD)v3)
      v6 = *(_QWORD *)(a1 + 224);
    else
      v6 = 4096;
    do
    {
      LODWORD(v5) = v6;
      v7 = v3 + v6;
      v6 *= 2;
    }
    while (v4 >= v7);
  }
  v8 = *(_DWORD *)(a1 + 240);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 264);
    if (v9)
    {
      if (*(_QWORD *)(v9 + 8) && v8 >= 1)
      {
        v11 = 0;
        do
          storageWindowSync(*(_QWORD **)(a1 + 264 + 8 * v11++), 1);
        while (v11 < *(int *)(a1 + 240));
      }
    }
  }
  *__error() = 0;
  if ((_DWORD)v5 && (v12 = *(_QWORD *)(a1 + 224) + v5, v12 >= v4))
  {
    while (fd_truncate(*(_QWORD *)(a1 + 216), v12) == -1)
    {
      v13 = *__error();
      v14 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = *__error();
        *(_DWORD *)buf = 136315906;
        v34 = "_storageExpand";
        v35 = 1024;
        v36 = 705;
        v37 = 2048;
        v38 = v12;
        v39 = 1024;
        v40 = v15;
        _os_log_error_impl(&dword_1B8270000, v14, OS_LOG_TYPE_ERROR, "%s:%d: ftruncate(%lld) error:%d", buf, 0x22u);
      }
      *__error() = v13;
      if (v5 >= 2)
      {
        v5 = v5 >> 1;
        v12 = *(_QWORD *)(a1 + 224) + v5;
        if (v12 >= v4)
          continue;
      }
      goto LABEL_24;
    }
    *(_QWORD *)(a1 + 224) = v12;
    if (*(_DWORD *)(a1 + 240) == 1 && !*(_BYTE *)(a1 + 245))
      storageWindowRelease((uint64_t *)(a1 + 264));
    pthread_rwlock_wrlock(*(pthread_rwlock_t **)(a1 + 4400));
    v20 = *(pthread_rwlock_t **)(a1 + 4400);
    sig = (unsigned int *)v20[1].__sig;
    v20[1].__sig = 0;
    pthread_rwlock_unlock(v20);
    _release_read_window(&availableReaders, sig);
    return 1;
  }
  else
  {
LABEL_24:
    bzero(buf, 0x400uLL);
    v16 = *__error();
    v17 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v22 = fd_realpath(*(_DWORD **)(a1 + 216), buf);
      if (v22)
        v23 = v22;
      else
        v23 = "";
      v24 = *__error();
      *(_DWORD *)v25 = 136315906;
      v26 = "_storageExpand";
      v27 = 1024;
      v28 = 701;
      v29 = 2080;
      v30 = v23;
      v31 = 1024;
      v32 = v24;
      _os_log_error_impl(&dword_1B8270000, v17, OS_LOG_TYPE_ERROR, "%s:%d: _storageExpand %s error:%d", v25, 0x22u);
    }
    v18 = __error();
    result = 0;
    *v18 = v16;
  }
  return result;
}

void _si_dump_index_state(uint64_t a1, int a2)
{
  _BYTE *v4;
  void *v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  const char *v20;
  os_log_type_t v21;
  const char *v22;
  const char *v23;
  int v24;
  const char *v25;
  int v26;
  int v27;
  int v28;
  const char *v29;
  int v30;
  const char *v31;
  int v32;
  int v33;
  unsigned int v34;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  _BYTE v42[24];
  __int16 v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  _BYTE *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  void *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if (dword_1EF19FCB8 >= a2)
  {
    v4 = malloc_type_malloc(*(unsigned __int16 *)(a1 + 2484) + 1, 0x75A8DE3EuLL);
    v5 = malloc_type_malloc(*(unsigned __int16 *)(a1 + 2486) + 1, 0x96190D4BuLL);
    v6 = v5;
    if (*(_WORD *)(a1 + 2484))
    {
      v7 = 0;
      v8 = a1 + 2488;
      do
      {
        v9 = "unknown";
        if ((*(_BYTE *)(v8 + v7) - 1) <= 3u)
          v9 = off_1E6E2E448[(*(_BYTE *)(v8 + v7) - 1)];
        v10 = v7 + 1;
        v4[v7] = *v9;
        v7 = v10;
      }
      while (v10 < *(unsigned __int16 *)(a1 + 2484));
      v11 = v10;
    }
    else
    {
      v11 = 0;
    }
    v4[v11] = 0;
    if (*(_WORD *)(a1 + 2486))
    {
      v12 = 0;
      v13 = a1 + 2488;
      do
      {
        v14 = "unknown";
        if ((*(_BYTE *)(v13 + v12 + *(unsigned __int16 *)(a1 + 2484)) - 1) <= 3u)
          v14 = off_1E6E2E448[(*(_BYTE *)(v13 + v12 + *(unsigned __int16 *)(a1 + 2484))
                                              - 1)];
        v15 = v12 + 1;
        *((_BYTE *)v5 + v12) = *v14;
        v12 = v15;
      }
      while (v15 < *(unsigned __int16 *)(a1 + 2486));
      v16 = v15;
    }
    else
    {
      v16 = 0;
    }
    *((_BYTE *)v5 + v16) = 0;
    v34 = 0;
    if ((fd_setDir(*(unsigned int *)(a1 + 32), (int *)&v34) & 1) != 0)
    {
      v17 = *__error();
      v18 = _SILogForLogForCategory(11);
      v19 = v18;
      if (a2 == 2)
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          if ((*(_BYTE *)(a1 + 2481) - 1) > 3u)
            v20 = "unknown";
          else
            v20 = off_1E6E2E448[(*(_BYTE *)(a1 + 2481) - 1)];
          if ((*(_BYTE *)(a1 + 2482) - 1) > 3u)
            v29 = "unknown";
          else
            v29 = off_1E6E2E448[(*(_BYTE *)(a1 + 2482) - 1)];
          v30 = *(unsigned __int8 *)(a1 + 2480);
          if ((*(_BYTE *)(a1 + 2483) - 1) > 3u)
            v31 = "unknown";
          else
            v31 = off_1E6E2E448[(*(_BYTE *)(a1 + 2483) - 1)];
          v32 = *(unsigned __int16 *)(a1 + 2484);
          v33 = *(unsigned __int16 *)(a1 + 2486);
          *(_DWORD *)buf = 136317698;
          v36 = "_si_dump_index_state";
          v37 = 1024;
          v38 = 30138;
          v39 = 2048;
          v40 = (const char *)a1;
          v41 = 1024;
          *(_DWORD *)v42 = v30;
          *(_WORD *)&v42[4] = 2080;
          *(_QWORD *)&v42[6] = v20;
          *(_WORD *)&v42[14] = 2080;
          *(_QWORD *)&v42[16] = v29;
          v43 = 2080;
          v44 = v31;
          v45 = 1024;
          v46 = v32;
          v47 = 2080;
          v48 = v4;
          v49 = 1024;
          v50 = v33;
          v51 = 2080;
          v52 = v6;
          _os_log_error_impl(&dword_1B8270000, v19, OS_LOG_TYPE_ERROR, "%s:%d: (%p ver:%d main:%s sdb:%s path:%s scan:%d %s, live:%d %s)", buf, 0x60u);
        }
      }
      else
      {
        v21 = 2 * (dword_1EF19FCB8 < 4);
        if (os_log_type_enabled(v18, v21))
        {
          if ((*(_BYTE *)(a1 + 2481) - 1) > 3u)
            v22 = "unknown";
          else
            v22 = off_1E6E2E448[(*(_BYTE *)(a1 + 2481) - 1)];
          if ((*(_BYTE *)(a1 + 2482) - 1) > 3u)
            v23 = "unknown";
          else
            v23 = off_1E6E2E448[(*(_BYTE *)(a1 + 2482) - 1)];
          v24 = *(unsigned __int8 *)(a1 + 2480);
          if ((*(_BYTE *)(a1 + 2483) - 1) > 3u)
            v25 = "unknown";
          else
            v25 = off_1E6E2E448[(*(_BYTE *)(a1 + 2483) - 1)];
          v26 = *(unsigned __int16 *)(a1 + 2484);
          v27 = *(unsigned __int16 *)(a1 + 2486);
          *(_DWORD *)buf = 134220034;
          v36 = (const char *)a1;
          v37 = 1024;
          v38 = v24;
          v39 = 2080;
          v40 = v22;
          v41 = 2080;
          *(_QWORD *)v42 = v23;
          *(_WORD *)&v42[8] = 2080;
          *(_QWORD *)&v42[10] = v25;
          *(_WORD *)&v42[18] = 1024;
          *(_DWORD *)&v42[20] = v26;
          v43 = 2080;
          v44 = v4;
          v45 = 1024;
          v46 = v27;
          v47 = 2080;
          v48 = v6;
          _os_log_impl(&dword_1B8270000, v19, v21, "(%p ver:%d main:%s sdb:%s path:%s scan:%d %s, live:%d %s)", buf, 0x50u);
        }
      }
      *__error() = v17;
      v28 = v34;
      MEMORY[0x1BCCB1484](v34);
      if ((v28 & 0x80000000) == 0)
        close(v28);
    }
    free(v6);
    free(v4);
  }
}

void _qsort_termids(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  unsigned int *v14;
  size_t v15;
  char *v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  unsigned int v20;
  char *v21;
  char *v22;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  char *v28;
  unsigned int *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  __int128 *v48;
  __int128 v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  const char *v70;
  __int128 v71;
  int v72;
  __int128 v73;
  __int128 v74;
  int v75;
  int v76;
  __int128 v77;
  __int128 v78;
  unsigned int v79;
  int v80;

  v4 = malloc_type_malloc(0x800uLL, 0x1000040451B5BE8uLL);
  v5 = 0;
  *v4 = 0;
  v4[1] = 0;
  v6 = a1 + 28;
  v7 = 1;
  do
  {
    if (a2 > v5)
    {
      if (v7 <= 128)
        v9 = 128;
      else
        v9 = v7;
      while (1)
      {
        v10 = a2 - v5;
        if (a2 - v5 <= 16)
          break;
        v11 = v10 + 1;
        v12 = (char *)(a1 + 24 * v5);
        v13 = &v12[24 * ((v10 + 1) >> 1)];
        v14 = (unsigned int *)(a1 + 24 * a2);
        if (v10 < 0x400)
        {
          v19 = (char *)(a1 + 24 * v5);
          v28 = v13;
          v29 = (unsigned int *)(a1 + 24 * a2);
        }
        else
        {
          v15 = v11 >> 3;
          v16 = &v12[24 * (v11 >> 3)];
          v17 = *(_DWORD *)v12;
          v18 = *(_DWORD *)v16;
          v19 = (char *)(a1 + 24 * v5);
          if (*(_DWORD *)v16 != *(_DWORD *)v12)
          {
            v19 = &v12[48 * v15];
            v20 = *(_DWORD *)v19;
            if (*(_DWORD *)v19 >= v17)
              v21 = &v12[48 * v15];
            else
              v21 = (char *)(a1 + 24 * v5);
            if (v20 > v18)
              v21 = &v12[24 * (v11 >> 3)];
            if (v20 >= v17)
              v22 = (char *)(a1 + 24 * v5);
            else
              v22 = &v12[48 * v15];
            if (v20 >= v18)
              v16 = v22;
            if (v18 >= v17)
              v16 = v21;
            if (v17 != v20 && v18 != v20)
              v19 = v16;
          }
          v24 = *(_DWORD *)&v13[-24 * v15];
          v25 = *(_DWORD *)v13;
          if (*(_DWORD *)v13 == v24)
          {
            v28 = &v13[-24 * v15];
          }
          else
          {
            v26 = *(_DWORD *)&v13[24 * v15];
            v27 = v24 == v26 || v25 == v26;
            v28 = &v13[24 * v15];
            if (!v27)
            {
              v28 = v13;
              if (v25 >= v24)
              {
                if (v26 <= v25)
                {
                  if (v26 >= v24)
                    v28 = &v13[24 * v15];
                  else
                    v28 = &v13[-24 * v15];
                }
              }
              else if (v26 >= v25)
              {
                if (v26 >= v24)
                  v28 = &v13[-24 * v15];
                else
                  v28 = &v13[24 * v15];
              }
            }
          }
          v30 = -(uint64_t)v15;
          v29 = &v14[-12 * v15];
          v31 = &v14[6 * v30];
          v32 = *v29;
          v33 = *v31;
          if (*v31 != *v29)
          {
            v34 = *v14;
            if (*v14 >= v32)
              v35 = (unsigned int *)(a1 + 24 * a2);
            else
              v35 = v29;
            if (v34 > v33)
              v35 = v31;
            if (v34 < v32)
              v29 = (unsigned int *)(a1 + 24 * a2);
            if (v34 < v33)
              v29 = v31;
            if (v33 >= v32)
              v29 = v35;
            if (v32 == v34 || v33 == v34)
              v29 = (unsigned int *)(a1 + 24 * a2);
          }
        }
        v37 = *(_DWORD *)v19;
        v38 = *(_DWORD *)v28;
        if (*(_DWORD *)v28 == *(_DWORD *)v19)
        {
          v28 = v19;
        }
        else
        {
          v39 = *v29;
          if (v37 == *v29 || v38 == v39)
          {
            v28 = (char *)v29;
          }
          else if (v38 >= v37)
          {
            if (v39 <= v38)
            {
              if (v39 >= v37)
                v28 = (char *)v29;
              else
                v28 = v19;
            }
          }
          else if (v39 >= v38)
          {
            if (v39 >= v37)
              v28 = v19;
            else
              v28 = (char *)v29;
          }
        }
        v41 = *(_DWORD *)v28;
        v77 = *(_OWORD *)(v28 + 4);
        v79 = *((_DWORD *)v28 + 5);
        v42 = *((_QWORD *)v14 + 2);
        *(_OWORD *)v28 = *(_OWORD *)v14;
        *((_QWORD *)v28 + 2) = v42;
        *v14 = v41;
        *(_OWORD *)(v14 + 1) = v77;
        v14[5] = v79;
        v43 = *(_DWORD *)v12;
        v73 = *(_OWORD *)(v12 + 4);
        v75 = *((_DWORD *)v12 + 5);
        v44 = (__int128 *)(v6 + 24 * v5);
        v45 = a2;
        v46 = v5;
        do
        {
          v71 = v73;
          v72 = v75;
          v47 = *((_DWORD *)v44 - 1);
          v73 = *v44;
          v75 = *((_DWORD *)v44 + 4);
          if (v41 <= v43)
          {
            v48 = (__int128 *)(a1 + 24 * v46);
            v49 = *v48;
            *(_QWORD *)((char *)v44 - 12) = *((_QWORD *)v48 + 2);
            *(__int128 *)((char *)v44 - 28) = v49;
            *(_DWORD *)v48 = v43;
            *(__int128 *)((char *)v48 + 4) = v71;
            *((_DWORD *)v48 + 5) = v72;
            ++v46;
          }
          v44 = (__int128 *)((char *)v44 + 24);
          --v45;
          v43 = v47;
        }
        while (v5 != v45);
        v50 = (__int128 *)(a1 + 24 * v46);
        v51 = *((_QWORD *)v50 + 2);
        v52 = *v50;
        v53 = *((_QWORD *)v14 + 2);
        *v50 = *(_OWORD *)v14;
        *((_QWORD *)v50 + 2) = v53;
        *(_OWORD *)v14 = v52;
        *((_QWORD *)v14 + 2) = v51;
        v54 = v46 - v5;
        if (v46 < v5)
        {
          v68 = __si_assert_copy_extra_1644(0);
          v69 = v68;
          v70 = "";
          if (v68)
            v70 = v68;
          __message_assert("%s:%u: failed assertion '%s' %s ", "BurstTrie.c", 2141, "q>=left", v70);
          free(v69);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
        if (v7 == v9)
        {
          heapsort_b(v12, v11, 0x18uLL, &__block_literal_global_1765);
          v7 = v9;
          goto LABEL_3;
        }
        v55 = v54 <= a2 - v46;
        if (v54 <= a2 - v46)
          v56 = v46 - 1;
        else
          v56 = a2;
        if (v55)
          v57 = v5;
        else
          v57 = v46;
        if (v55)
          v5 = v46;
        else
          a2 = v46 - 1;
        v58 = &v4[2 * v7];
        *v58 = v57;
        v58[1] = v56;
        ++v7;
        if (a2 <= v5)
          goto LABEL_3;
      }
      v59 = v6 + 24 * v5;
      v60 = v5;
      do
      {
        v62 = v60++;
        v63 = (int *)(a1 + 24 * v62);
        v78 = *(_OWORD *)(v63 + 7);
        v80 = v63[11];
        v64 = *v63;
        v74 = *(_OWORD *)(v63 + 1);
        v65 = v63[6];
        v76 = v63[5];
        v66 = v60;
        if (v65 > v64)
        {
          v67 = v59;
          do
          {
            v66 = v62;
            *(_DWORD *)(v67 - 4) = v64;
            *(_OWORD *)v67 = v74;
            *(_DWORD *)(v67 + 16) = v76;
            if (v62 <= v5)
              break;
            v64 = *(_DWORD *)(v67 - 52);
            v74 = *(_OWORD *)(v67 - 48);
            v76 = *(_DWORD *)(v67 - 32);
            v67 -= 24;
            --v62;
          }
          while (v65 > v64);
        }
        v61 = a1 + 24 * v66;
        *(_DWORD *)v61 = v65;
        *(_OWORD *)(v61 + 4) = v78;
        *(_DWORD *)(v61 + 20) = v80;
        v59 += 24;
      }
      while (v60 != a2);
    }
LABEL_3:
    --v7;
    v8 = &v4[2 * v7];
    v5 = *v8;
    a2 = v8[1];
  }
  while (v7);
  free(v4);
}

uint64_t _indexProgress(uint64_t a1)
{
  double v2;
  uint64_t v3;
  int v5;
  NSObject *v6;
  NSObject *v7;
  uint8_t v8[16];
  uint8_t buf[16];

  if (!atomic_load((unsigned int *)(a1 + 15152)))
    return 0;
  v2 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 15008);
  if (v2 <= 10.0)
    return 0;
  if (v2 <= 20.0)
  {
    if (gSILogLevels[0] < 5)
      return 1;
    v5 = *__error();
    v7 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1B8270000, v7, OS_LOG_TYPE_DEFAULT, "should cancel\n", v8, 2u);
    }
    v3 = 1;
LABEL_16:
    *__error() = v5;
    return v3;
  }
  if (gSILogLevels[0] >= 5)
  {
    v5 = *__error();
    v6 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "should exit\n", buf, 2u);
    }
    v3 = 0xFFFFFFFFLL;
    goto LABEL_16;
  }
  return 0xFFFFFFFFLL;
}

uint64_t _getAndSetDocId(uint64_t a1, uint64_t a2, int a3, int a4, int a5, _BYTE *a6, int a7, float a8)
{
  char *v16;
  char *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t v21;
  signed int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  pthread_override_s *v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  const char *v46;
  const char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unsigned int v52;
  char *v53;
  char *v54;
  const char *v55;
  uint8_t buf[16];

  if (__THREAD_SLOT_KEY)
  {
    v16 = (char *)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v16)
      goto LABEL_8;
  }
  else
  {
    makeThreadId();
    v16 = (char *)pthread_getspecific(__THREAD_SLOT_KEY);
    if (!v16)
      goto LABEL_8;
  }
  if ((unint64_t)v16 < 0x801)
  {
    v17 = v16 - 1;
    if (a7)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  makeThreadId();
  v17 = (char *)pthread_getspecific(__THREAD_SLOT_KEY) - 1;
  if (a7)
  {
LABEL_5:
    v18 = *(_DWORD *)(a1 + 60);
    v19 = (unsigned int *)(a1 + 60);
    if (v18 + 1 >= *(_DWORD *)(a1 + 64))
    {
      v18 = 0;
      *a6 = 1;
      return v18;
    }
LABEL_18:
    if (!v18)
    {
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_fault_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Got unexpected 0 payloadCount. Attempting repair.", buf, 2u);
        v52 = *v19;
        v18 = *v19 + 1;
        *v19 = v18;
        if (v52 == -1)
        {
          v53 = __si_assert_copy_extra_2151(0, -1);
          v54 = v53;
          v55 = "";
          if (v53)
            v55 = v53;
          __message_assert("%s:%u: failed assertion '%s' %s Expected non-zero docid", "JHContentIndex.c", 4210, "docid", v55);
          free(v54);
          if (__valid_fs(-1))
          {
            MEMORY[0xBAD] = -559038737;
            abort();
          }
          MEMORY[0xC00] = -559038737;
          abort();
        }
      }
      else
      {
        v18 = 1;
        *v19 = 1;
      }
    }
    if (!a3)
      goto LABEL_42;
    *(_QWORD *)(*(_QWORD *)(a1 + 14368) + 8 * v18) = a2;
    v23 = *(_QWORD *)(a1 + 14376);
    if (v23)
      *(_DWORD *)(v23 + 4 * v18) = a4;
    v24 = *(_QWORD *)(a1 + 14384);
    if (v24)
    {
      if (a8 != 0.0)
        *(float *)(v24 + 8 * v18) = a8;
      if (a5)
        *(_DWORD *)(v24 + 8 * v18 + 4) = a5;
    }
    if (*(_BYTE *)(a1 + 37))
    {
      *(_BYTE *)(*(_QWORD *)(a1 + 14392) + v18) = a3;
      v25 = *(_QWORD *)(a1 + 14400);
      if (v25)
        *(_BYTE *)(v25 + v18 / (unint64_t)(32 * *MEMORY[0x1E0C85AD8])) |= 1 << ((v18
                                                                                        / (unint64_t)(4 * *MEMORY[0x1E0C85AD8])) & 7);
      goto LABEL_42;
    }
    v28 = v18 / 5uLL;
    v29 = *(_QWORD *)(a1 + 14392);
    v30 = *(_DWORD *)(v29 + 4 * v28) & ~(63 << (6 * (v18 % 5))) | ((a3 & 0x3F) << (6 * (v18 % 5)));
    v31 = *(_QWORD *)(a1 + 14400);
    if (v31)
    {
      v32 = (uint64_t *)MEMORY[0x1E0C85AD8];
      v33 = v28 / (8 * *MEMORY[0x1E0C85AD8]);
      v34 = (v28 / *MEMORY[0x1E0C85AD8]) & 7;
      *(_BYTE *)(v31 + v33) |= 1 << v34;
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 14400) + v33))
      {
        v48 = __si_assert_copy_extra_2151(0, -1);
        v45 = v48;
        v46 = "";
        if (v48)
          v46 = v48;
        v47 = "(cindex)->groupMap[gslot]";
        goto LABEL_66;
      }
      v35 = *v32;
      v36 = v34 | (8 * (_DWORD)v33);
      if (v35 * v36 > v28)
      {
        v49 = __si_assert_copy_extra_2151(0, -1);
        v45 = v49;
        v46 = "";
        if (v49)
          v46 = v49;
        v47 = "vm_page_size*(gslot*8+bslot) <=slot";
        goto LABEL_66;
      }
      if (v35 * (unint64_t)(v36 + 1) <= v28)
      {
        v50 = __si_assert_copy_extra_2151(0, -1);
        v45 = v50;
        v46 = "";
        if (v50)
          v46 = v50;
        v47 = "vm_page_size*(gslot*8+bslot+1) >slot";
        goto LABEL_66;
      }
      v37 = *(_QWORD *)(a1 + 14392);
      v38 = *(unsigned __int8 *)(a1 + 37);
      *(_DWORD *)(v37 + 4 * v28) = v30;
      if (v38)
      {
        v39 = *(unsigned __int8 *)(v37 + v18);
LABEL_41:
        if (v39 == (a3 & 0x3F))
        {
LABEL_42:
          *v19 = v18 + 1;
          if ((a7 & 1) == 0)
            CIOnThreadCleanUpPop((uint64_t)v17);
          return v18;
        }
        v44 = __si_assert_copy_extra_2151(0, -1);
        v45 = v44;
        v46 = "";
        if (v44)
          v46 = v44;
        v47 = "((cindex)->coreSpotlight?({ ((uint8_t *)(cindex)->groups)[(docid)]; }):({ uint32_t __where=(uint32_t)(doci"
              "d); uint32_t __slot = __where/5; uint32_t __shift= (__where-(__slot*5))*6; uint32_t __word = ((uint32_t)(("
              "cindex)->groups[__slot])); (__word >> __shift) & 0x3F ; }))==(inval&0x3F)";
LABEL_66:
        __message_assert("%s:%u: failed assertion '%s' %s ", "JHContentIndex.c", 4216, v47, v46);
        free(v45);
        if (__valid_fs(-1))
          v51 = 2989;
        else
          v51 = 3072;
        *(_DWORD *)v51 = -559038737;
        abort();
      }
    }
    else
    {
      *(_DWORD *)(v29 + 4 * v28) = v30;
    }
    v39 = (v30 >> (6 * (v18 % 5))) & 0x3F;
    goto LABEL_41;
  }
LABEL_9:
  HIDWORD(v21) = qos_class_self() - 9;
  LODWORD(v21) = HIDWORD(v21);
  v20 = v21 >> 2;
  if (v20 > 6)
    v22 = 0;
  else
    v22 = dword_1B8630ED0[v20];
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14464));
  if (*(_QWORD *)(a1 + 14648) || *(_DWORD *)(a1 + 14660) || *(_BYTE *)(a1 + 14676))
    goto LABEL_15;
  if (v22 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v22 + 14528))
    {
LABEL_15:
      db_rwlock_wait(a1 + 14464, v22, 2);
      goto LABEL_16;
    }
    v41 = v22 - 1;
    v42 = (uint64_t *)(a1 + 16 * v22 + 14544);
    while (v41 != 4)
    {
      v43 = *v42;
      v42 += 2;
      ++v41;
      if (v43)
      {
        if (v41 <= 4)
          goto LABEL_15;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 14648) = pthread_self();
LABEL_16:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14464));
  v19 = (unsigned int *)(a1 + 60);
  if ((*(_DWORD *)(a1 + 60) + 1) < *(_DWORD *)(a1 + 64))
  {
    CIOnThreadCleanUpPush((uint64_t)v17, (uint64_t)si_rwlock_wrunlock_2447, a1 + 14464);
    v18 = *v19;
    goto LABEL_18;
  }
  *a6 = 1;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 14464));
  *(_DWORD *)(a1 + 14668) = 0;
  v26 = *(pthread_override_s **)(a1 + 14640);
  *(_QWORD *)(a1 + 14648) = 0;
  *(_QWORD *)(a1 + 14640) = 0;
  v27 = *(_DWORD *)(a1 + 14660) != 0;
  *(_BYTE *)(a1 + 14676) = 0;
  db_rwlock_wakeup(a1 + 14464, v27, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 14464));
  if (v26)
    pthread_override_qos_class_end_np(v26);
  return 0;
}

void _flushCache(uint64_t *a1, int a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  int v10;
  NSObject *v11;
  const char *v12;
  double Current;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(_QWORD);
  uint64_t v19;
  void (*v20)(_QWORD);
  int v21;
  double v22;
  _BOOL4 v23;
  int v24;
  NSObject *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  int v34;
  NSObject *v35;
  os_log_type_t v36;
  unsigned int v37;
  uint64_t v38;
  const char *v39;
  statfs *p_buf;
  NSObject *v41;
  os_log_type_t v42;
  uint32_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  NSObject *v50;
  uint32_t f_bsize;
  uint64_t v52;
  unsigned __int8 v53;
  unsigned int v54;
  CFStringRef v55;
  int v56;
  NSObject *v57;
  int v58;
  NSObject *v59;
  int v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t);
  void *v66;
  uint64_t *v67;
  int v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  statfs buf;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = a1[5];
  if (v4)
  {
    dispatch_resume(v4);
    dispatch_release((dispatch_object_t)a1[5]);
    a1[5] = 0;
  }
  v63 = MEMORY[0x1E0C809B0];
  v64 = 0x40000000;
  v65 = ___flushCache_block_invoke;
  v66 = &__block_descriptor_tmp_80_6890;
  v67 = a1;
  if (a2)
  {
    if (dword_1EF19FC9C >= 5)
    {
      v5 = *__error();
      v6 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.f_bsize) = 0;
        _os_log_impl(&dword_1B8270000, v6, OS_LOG_TYPE_DEFAULT, "Skipped flushing", (uint8_t *)&buf, 2u);
      }
      *__error() = v5;
    }
    goto LABEL_66;
  }
  v7 = (void *)os_transaction_create();
  v8 = *a1;
  v9 = atomic_load((unsigned __int8 *)(*a1 + 1448));
  if ((v9 & 2) == 0)
  {
    if (dword_1EF19FC9C >= 5)
    {
      v10 = *__error();
      v11 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.f_bsize) = 0;
        v12 = "Skipped flush";
LABEL_100:
        _os_log_impl(&dword_1B8270000, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&buf, 2u);
        goto LABEL_101;
      }
      goto LABEL_101;
    }
    goto LABEL_65;
  }
  if (dword_1EF19FC9C >= 5)
  {
    v58 = *__error();
    v59 = _SILogForLogForCategory(4);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.f_bsize) = 0;
      _os_log_impl(&dword_1B8270000, v59, OS_LOG_TYPE_DEFAULT, "Starting flush", (uint8_t *)&buf, 2u);
    }
    *__error() = v58;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v14 = a1[1];
  v15 = atomic_load((unsigned int *)(v14 + 28));
  if ((v15 & 3) != 0 || *(_BYTE *)(v14 + 15163) || *(_DWORD *)(a1[1] + 48) != *((_DWORD *)a1 + 5))
  {
    v65((uint64_t)&v63);
    v21 = 0;
    goto LABEL_24;
  }
  buf.f_bsize = 0;
  if ((fd_setDir(*(unsigned int *)(*a1 + 32), (int *)&buf) & 1) == 0)
  {
    v19 = 0xFFFFFFFFLL;
LABEL_77:
    v53 = atomic_load((unsigned __int8 *)(v8 + 2439));
    if ((v53 & 1) == 0)
    {
      if (SIIsAppleInternal_onceToken != -1)
        dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_4644);
      if (SIIsAppleInternal_internal)
      {
        do
          v54 = __ldxr(&_flushCache__crashCount);
        while (__stxr(v54 + 1, &_flushCache__crashCount));
        if (!v54)
        {
          v55 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("_flushCache, error:%d"), v19, v63, v64);
          getpid();
          SISimulateCrashForPid(0, (uint64_t)v55);
          if (v55)
            CFRelease(v55);
        }
      }
    }
    v52 = 2;
    goto LABEL_86;
  }
  v16 = *a1;
  v17 = *(_QWORD **)(*a1 + 2360);
  if (v17)
  {
    v18 = (void (*)(_QWORD))v17[6];
    if (v18)
    {
      v18(v17[17]);
      v16 = *a1;
    }
    v19 = _CIFlushCache(a1[1], 0, (uint64_t)lowDiskSpaceCallback, v16, (uint64_t)&v63);
    v20 = (void (*)(_QWORD))v17[7];
    if (v20)
      v20(v17[17]);
  }
  else
  {
    v19 = _CIFlushCache(a1[1], 0, (uint64_t)lowDiskSpaceCallback, v16, (uint64_t)&v63);
  }
  f_bsize = buf.f_bsize;
  MEMORY[0x1BCCB1484](buf.f_bsize);
  if ((f_bsize & 0x80000000) == 0)
    close(f_bsize);
  if (!(_DWORD)v19)
  {
    v21 = *(unsigned __int8 *)(a1[1] + 15160);
LABEL_24:
    if (dword_1EF19FC9C >= 5)
    {
      v61 = *__error();
      v62 = _SILogForLogForCategory(4);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.f_bsize) = 0;
        _os_log_impl(&dword_1B8270000, v62, OS_LOG_TYPE_DEFAULT, "Completed index flush", (uint8_t *)&buf, 2u);
      }
      *__error() = v61;
      if ((v21 & 4) == 0)
      {
LABEL_26:
        v22 = CFAbsoluteTimeGetCurrent() - Current;
        if ((*(_BYTE *)(v8 + 6586) & 4) != 0)
          v23 = v22 > 4.0;
        else
          v23 = v22 > 10.0;
        if (v23)
        {
          v24 = *__error();
          v25 = _SILogForLogForCategory(4);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            buf.f_bsize = 134217984;
            *(double *)&buf.f_iosize = v22;
            _os_log_impl(&dword_1B8270000, v25, OS_LOG_TYPE_DEFAULT, "Merge slow at %f", (uint8_t *)&buf, 0xCu);
          }
          *__error() = v24;
        }
        if ((v21 & 2) != 0)
          goto LABEL_60;
        v26 = index_calculate_size(a1[1], 0);
        v27 = v26;
        if (v26 >= 0x4000001)
        {
          v28 = *__error();
          v29 = _SILogForLogForCategory(4);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            buf.f_bsize = 134217984;
            *(_QWORD *)&buf.f_iosize = v27;
            _os_log_impl(&dword_1B8270000, v29, OS_LOG_TYPE_DEFAULT, "force split; index size %lld",
              (uint8_t *)&buf,
              0xCu);
          }
          *__error() = v28;
          goto LABEL_59;
        }
        if (v26 <= 0x80000)
          goto LABEL_47;
        v30 = a1[1];
        v31 = atomic_load((unsigned int *)(v30 + 12));
        v32 = 5 * v31;
        v33 = *(_DWORD *)(v30 + 60);
        if (v33 < 2)
          v33 = 0;
        if (v32 <= 4 * (unint64_t)v33)
        {
LABEL_47:
          v44 = *a1;
          if (v26 <= 0x80000uLL >> *(_QWORD *)(*a1 + 2464))
          {
            if (v26 <= 0x80000 || (double)*(uint64_t *)(v8 + 2472) * 0.05 >= (double)v26)
              goto LABEL_60;
            v34 = *__error();
            v45 = _SILogForLogForCategory(4);
            v46 = 2 * (dword_1EF19FC9C < 4);
            if (!os_log_type_enabled(v45, v46))
              goto LABEL_58;
            v47 = *(_QWORD *)(v8 + 2472);
            buf.f_bsize = 134218240;
            *(_QWORD *)&buf.f_iosize = v47;
            WORD2(buf.f_blocks) = 2048;
            *(uint64_t *)((char *)&buf.f_blocks + 6) = v27;
            v39 = "force split; disk free %lld less than index size %lld";
            p_buf = &buf;
          }
          else
          {
            bzero(&buf, 0x878uLL);
            if (fstatfs(*(_DWORD *)(v44 + 32), &buf) || buf.f_bfree * buf.f_bsize >= v27)
              goto LABEL_60;
            v34 = *__error();
            v45 = _SILogForLogForCategory(4);
            v46 = 2 * (dword_1EF19FC9C < 4);
            if (!os_log_type_enabled(v45, v46))
              goto LABEL_58;
            v68 = 134218240;
            v69 = buf.f_bfree * buf.f_bsize;
            v70 = 2048;
            v71 = v27;
            v39 = "force split; disk free %lld less than index size %lld";
            p_buf = (statfs *)&v68;
          }
          v41 = v45;
          v42 = v46;
          v43 = 22;
        }
        else
        {
          v34 = *__error();
          v35 = _SILogForLogForCategory(4);
          v36 = 2 * (dword_1EF19FC9C < 4);
          if (!os_log_type_enabled(v35, v36))
          {
LABEL_58:
            *__error() = v34;
LABEL_59:
            v21 = 2;
LABEL_60:
            v48 = atomic_load((unsigned int *)(*a1 + 6888));
            if (v48 || (v21 & 2) == 0 || *(_BYTE *)(v8 + 6944) || *(int *)(v8 + 6960) > 0)
            {
              if (dword_1EF19FC9C >= 5)
              {
                v10 = *__error();
                v11 = _SILogForLogForCategory(4);
                if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(buf.f_bsize) = 0;
                  v12 = "Finished flush";
                  goto LABEL_100;
                }
LABEL_101:
                *__error() = v10;
              }
LABEL_65:
              os_release(v7);
LABEL_66:
              si_flush_index_ctx_free((uint64_t)a1, a2 != 0);
              return;
            }
            v49 = *__error();
            v50 = _SILogForLogForCategory(4);
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
            {
              buf.f_bsize = 134218240;
              *(double *)&buf.f_iosize = v22;
              WORD2(buf.f_blocks) = 1024;
              *(_DWORD *)((char *)&buf.f_blocks + 6) = v21;
              _os_log_impl(&dword_1B8270000, v50, OS_LOG_TYPE_DEFAULT, "Flush took %f seconds, split state %d\n", (uint8_t *)&buf, 0x12u);
            }
            *__error() = v49;
            si_forceSplitIndex((uint64_t)a1);
            goto LABEL_97;
          }
          v38 = a1[1];
          v37 = atomic_load((unsigned int *)(v38 + 12));
          LODWORD(v38) = *(_DWORD *)(v38 + 60);
          if (v38 >= 2)
            v38 = v38;
          else
            v38 = 0;
          buf.f_bsize = 134218496;
          *(_QWORD *)&buf.f_iosize = v27;
          WORD2(buf.f_blocks) = 1024;
          *(_DWORD *)((char *)&buf.f_blocks + 6) = v37;
          WORD1(buf.f_bfree) = 2048;
          *(uint64_t *)((char *)&buf.f_bfree + 4) = v38;
          v39 = "force split used:%lld, count:%d, deletes: %ld";
          p_buf = &buf;
          v41 = v35;
          v42 = v36;
          v43 = 28;
        }
        _os_log_impl(&dword_1B8270000, v41, v42, v39, (uint8_t *)p_buf, v43);
        goto LABEL_58;
      }
    }
    else if ((v21 & 4) == 0)
    {
      goto LABEL_26;
    }
    si_flush_index_ctx_free((uint64_t)a1, 0);
LABEL_97:
    os_release(v7);
    return;
  }
  if ((_DWORD)v19 != 28)
    goto LABEL_77;
  v52 = 1;
LABEL_86:
  si_makeUnavailable(v8, v19, v52, 21, (uint64_t)"flush cache err");
  si_flush_index_ctx_free((uint64_t)a1, 0);
  os_release(v7);
  v56 = *__error();
  v57 = _SILogForLogForCategory(4);
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.f_bsize) = 0;
    _os_log_impl(&dword_1B8270000, v57, OS_LOG_TYPE_DEFAULT, "Failed index flush", (uint8_t *)&buf, 2u);
  }
  *__error() = v56;
}

uint64_t _fd_remove_locked(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  char *v9;
  char *v10;
  const char *v11;
  char *v12;
  char *v13;
  const char *v14;
  uint64_t v15;
  char *v17;
  const char *v18;
  char *v19;
  const char *v20;
  char *v21;
  const char *v22;
  uint64_t v23;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(unsigned int *)(a1 + 40);
  *a2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    if (v2)
    {
      v12 = __si_assert_copy_extra_521(-1);
      v13 = v12;
      v14 = "";
      if (v12)
        v14 = v12;
      __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 453, "!obj->prev", v14);
      free(v13);
      if (__valid_fs(-1))
        v15 = 2989;
      else
        v15 = 3072;
      *(_DWORD *)v15 = -559038737;
      abort();
    }
    goto LABEL_20;
  }
  if (!v2)
  {
    v17 = __si_assert_copy_extra_521(-1);
    v10 = v17;
    v18 = "";
    if (v17)
      v18 = v17;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 433, "obj->prev", v18);
    goto LABEL_30;
  }
  v5 = g_fd_list;
  v6 = *(_QWORD *)(g_fd_list + 16);
  if (v6 == a1)
  {
    *(_QWORD *)(g_fd_list + 16) = v4;
    v6 = v4;
  }
  *(_QWORD *)(v2 + 24) = v4;
  *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) = v2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v7 = *(_DWORD *)v5;
  v8 = *(_DWORD *)v5 - 1;
  *(_DWORD *)v5 = v8;
  if (v6 == a1)
  {
    if (!v8)
    {
      *(_QWORD *)(v5 + 16) = 0;
      if ((_DWORD)v3 != -1)
        --*(_DWORD *)(v5 + 4);
      goto LABEL_20;
    }
    v21 = __si_assert_copy_extra_521(-1);
    v10 = v21;
    v22 = "";
    if (v21)
      v22 = v21;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 443, "g_fd_list->item_count==0", v22);
LABEL_30:
    free(v10);
    if (__valid_fs(-1))
      v23 = 2989;
    else
      v23 = 3072;
    *(_DWORD *)v23 = -559038737;
    abort();
  }
  if (!v8)
  {
    v19 = __si_assert_copy_extra_521(-1);
    v10 = v19;
    v20 = "";
    if (v19)
      v20 = v19;
    __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 446, "g_fd_list->item_count", v20);
    goto LABEL_30;
  }
  if ((_DWORD)v3 != -1)
  {
    --*(_DWORD *)(v5 + 4);
    if (v7 <= 0)
    {
      v9 = __si_assert_copy_extra_521(-1);
      v10 = v9;
      v11 = "";
      if (v9)
        v11 = v9;
      __message_assert("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 450, "g_fd_list->item_count>=0", v11);
      goto LABEL_30;
    }
  }
LABEL_20:
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 8) = 0;
  return v3;
}

uint64_t _fd_ftruncate(uint64_t a1, off_t a2)
{
  off_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;
  uint64_t v8;
  int *v9;
  int v10;
  const char *v11;
  BOOL v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  off_t v18;
  __int16 v19;
  int v20;
  _BYTE v21[1024];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if ((gDisablePreallocate & 1) == 0)
  {
    v4 = lseek(a1, 0, 2);
    v5 = a2 - v4;
    if (a2 > v4 && v5 > *MEMORY[0x1E0C85AD8])
    {
      ci_preallocate(a1, v5);
      if (prot_pwrite(a1, "", 1uLL, a2 - 1) == 1)
        return 0;
    }
  }
  while (1)
  {
    result = ftruncate(a1, a2);
    if ((_DWORD)result != -1)
      break;
    if (*__error() == 22)
    {
      result = ftruncate(a1, a2);
      if ((_DWORD)result != -1)
        break;
    }
    v7 = *__error();
    v8 = g_prot_error_callback;
    if (g_prot_error_callback)
    {
      v9 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v8 + 16))(v8, a1, *v9, 7) & 1) != 0)
        continue;
    }
    bzero(v21, 0x400uLL);
    v10 = fcntl(a1, 50, v21);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      v11 = "";
      if (v21[0])
        v12 = v10 < 0;
      else
        v12 = 1;
      *(_DWORD *)buf = 67109890;
      if (!v12)
        v11 = v21;
      v14 = a1;
      v15 = 2080;
      v16 = v11;
      v17 = 2048;
      v18 = a2;
      v19 = 1024;
      v20 = v7;
      _os_log_error_impl(&dword_1B8270000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "ftruncate(%d %s, %lld) error:%d", buf, 0x22u);
    }
    *__error() = v7;
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t _dirty_datastore_locked(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  NSObject *v16;
  char *v18;
  char *v19;
  const char *v20;
  _BYTE buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a1 + 4);
  if ((v2 & 0xA) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 804) & 8) != 0)
  {
    v18 = __si_assert_copy_extra_2151(0, -1);
    v19 = v18;
    v20 = "";
    if (v18)
      v20 = v18;
    __message_assert("%s:%u: failed assertion '%s' %s ", "sdb2.c", 8904, "(dst->const_flags & 0x8) == 0", v20);
    free(v19);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if ((v2 & 1) == 0)
    return 0;
  v6 = a1 + 584;
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 584));
  *(_BYTE *)(a1 + 796) = 1;
  db_rwlock_wakeup(a1 + 584, 1, 1);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 584));
  v7 = *(_QWORD *)(a1 + 832);
  if (v7 && (*(unsigned int (**)(uint64_t, uint64_t))(v7 + 16))(v7, a2))
  {
    v8 = *__error();
    v9 = _SILogForLogForCategory(7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "_dirty_datastore_locked";
      v22 = 1024;
      v23 = 8924;
      _os_log_error_impl(&dword_1B8270000, v9, OS_LOG_TYPE_ERROR, "%s:%d: dirty callback returned non-zero", buf, 0x12u);
    }
    *__error() = v8;
    return 22;
  }
  v10 = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = v10 & 0xFFFFF9FE;
  if ((v10 & 0x80) != 0)
  {
    *(_DWORD *)a1 = bswap32(*(_DWORD *)a1);
    *(_DWORD *)(a1 + 4) = bswap32(v10 & 0xFFFFF9FE);
    *(int8x8_t *)(a1 + 8) = vrev32_s8(*(int8x8_t *)(a1 + 8));
    *(_DWORD *)(a1 + 16) = bswap32(*(_DWORD *)(a1 + 16));
    *(int8x16_t *)(a1 + 20) = vrev64q_s8(*(int8x16_t *)(a1 + 20));
    *(int8x16_t *)(a1 + 36) = vrev32q_s8(*(int8x16_t *)(a1 + 36));
    *(int8x16_t *)(a1 + 52) = vrev32q_s8(*(int8x16_t *)(a1 + 52));
  }
  v11 = fd_pwrite(*(_QWORD *)(a1 + 848), a1, 0x1000uLL, 0);
  v3 = *__error();
  if ((*(_DWORD *)(a1 + 4) & 0x80000000) != 0)
  {
    *(int8x16_t *)a1 = vrev32q_s8(*(int8x16_t *)a1);
    *(_DWORD *)(a1 + 16) = bswap32(*(_DWORD *)(a1 + 16));
    *(int8x16_t *)(a1 + 20) = vrev64q_s8(*(int8x16_t *)(a1 + 20));
    *(int8x16_t *)(a1 + 36) = vrev32q_s8(*(int8x16_t *)(a1 + 36));
    *(int8x16_t *)(a1 + 52) = vrev32q_s8(*(int8x16_t *)(a1 + 52));
    if (v11 == 4096)
    {
LABEL_15:
      v12 = *(_QWORD *)(a1 + 848);
      *(_QWORD *)buf = 0;
      v13 = _fd_acquire_fd(v12, buf);
      if ((_DWORD)v13 == -1)
      {
        db_upgrade_lock(v6);
      }
      else
      {
        v14 = v13;
        v3 = prot_fsync(v13, (*(_WORD *)(v12 + 56) & 8) == 0);
        _fd_release_fd((_DWORD *)v12, v14, 0, *(uint64_t *)buf);
        db_upgrade_lock(v6);
        if ((_DWORD)v3 != -1)
          return v3;
      }
      return *__error();
    }
  }
  else if (v11 == 4096)
  {
    goto LABEL_15;
  }
  v15 = *__error();
  v16 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "_dirty_datastore_locked";
    v22 = 1024;
    v23 = 8944;
    v24 = 2080;
    v25 = a1 + 324;
    v26 = 2080;
    v27 = strerror(v3);
    _os_log_error_impl(&dword_1B8270000, v16, OS_LOG_TYPE_ERROR, "%s:%d: %s : db2_dirty_datastore: ERR: Can't write DST header (%s)\n", buf, 0x26u);
  }
  *__error() = v15;
  *(_DWORD *)(a1 + 4) |= 2u;
  *(_DWORD *)(a1 + 800) = v3;
  db_upgrade_lock(a1 + 584);
  return v3;
}

uint64_t __setCSAttributes2_block_invoke_4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void (*v13)(_QWORD);
  int v14;
  NSObject *v15;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD);
  _DWORD *v25;
  int v26;
  NSObject *v27;
  unint64_t *v28;
  unint64_t v29;
  int Count;
  int v31;
  int IntValue;
  int v33;
  uint64_t PlistObjectSize;
  const __CFString *v35;
  const __CFString *v36;
  CFStringRef v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  NSObject *v43;
  _BYTE *v44;
  BOOL v45;
  BOOL v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  void (*v52)(_QWORD);
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  void (*v56)(_QWORD);
  uint64_t v57;
  unsigned int v58;
  const __CFAllocator *v59;
  const __CFAllocator *v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  unsigned int v82;
  unsigned int v83;
  __int128 v84;
  uint64_t v85;
  _BYTE buf[18];
  uint64_t v87;
  uint64_t v88;

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v4 = v1;
  v88 = *MEMORY[0x1E0C80C00];
  makeThreadId();
  do
  {
    v5 = __ldxr(exceptionSequenceNum);
    v6 = v5 + 1;
  }
  while (__stxr(v5 + 1, exceptionSequenceNum));
  v7 = setThreadIdAndInfo(*(_DWORD *)(v4 + 152), sFdExceptionCallbacks, 0, 1, v6);
  v82 = HIDWORD(v7);
  v83 = v7;
  v81 = __PAIR64__(v8, v9);
  v10 = *(_QWORD *)&threadData[18 * v7 + 2];
  v11 = v10 + 320 * HIDWORD(v7);
  *(_BYTE *)(v11 + 216) = 0;
  v12 = *(_DWORD *)(v11 + 312);
  v13 = *(void (**)(_QWORD))(v11 + 224);
  if (v13)
    v13(*(_QWORD *)(v10 + 320 * HIDWORD(v7) + 288));
  v80 = v83;
  v79 = v82;
  v78 = v81;
  if (_setjmp((int *)v11))
  {
    v14 = *__error();
    v15 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "setCSAttributes2_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 28058;
      _os_log_error_impl(&dword_1B8270000, v15, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v14;
    *(_DWORD *)(v11 + 312) = v12;
    CIOnThreadCleanUpReset(v78);
    dropThreadId(v80, 1, v6);
    return CICleanUpReset(v80, HIDWORD(v78));
  }
  else
  {
    do
    {
      v17 = __ldxr(exceptionSequenceNum);
      v18 = v17 + 1;
    }
    while (__stxr(v17 + 1, exceptionSequenceNum));
    v19 = setThreadIdAndInfo(-1, (__int128 *)sJournalCtxExceptionCallbacks, *(_QWORD *)(v4 + 40), 0x40000000, v18);
    v76 = HIDWORD(v19);
    v77 = v19;
    v75 = __PAIR64__(v20, v21);
    v22 = *(_QWORD *)&threadData[18 * v19 + 2];
    v23 = v22 + 320 * HIDWORD(v19);
    *(_BYTE *)(v23 + 216) = 0;
    v61 = *(_DWORD *)(v23 + 312);
    v24 = *(void (**)(_QWORD))(v23 + 224);
    if (v24)
      v24(*(_QWORD *)(v22 + 320 * HIDWORD(v19) + 288));
    v74 = v77;
    v73 = v76;
    v72 = v75;
    if (_setjmp((int *)v23))
    {
      v25 = (_DWORD *)(v23 + 312);
      v26 = *__error();
      v27 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "setCSAttributes2_block_invoke_4";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 28057;
        _os_log_error_impl(&dword_1B8270000, v27, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v26;
      *v25 = v61;
      CIOnThreadCleanUpReset(v72);
      dropThreadId(v74, 1, v18);
      CICleanUpReset(v74, HIDWORD(v72));
    }
    else
    {
      bzero(buf, 0x1000uLL);
      v60 = _SIStackAllocatorCreate((unint64_t *)buf, 4096, indexingZone);
      v28 = *(unint64_t **)(v4 + 48);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      if (v29 < *(unsigned int *)(v4 + 156))
      {
        v59 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        do
        {
          v70 = 0uLL;
          v71 = 0;
          v84 = *(_OWORD *)(v4 + 56);
          v85 = *(_QWORD *)(v4 + 72);
          _MDPlistArrayGetPlistObjectAtIndex();
          if (!v87)
            *(_QWORD *)&buf[8] = (*(_QWORD *)buf + 55) & 0xFFFFFFFFFFFFFFF0;
          v84 = v70;
          v85 = v71;
          if (_MDPlistGetPlistObjectType() == 246)
          {
            *(_QWORD *)&v68 = 0;
            v84 = v70;
            v85 = v71;
            _MDPlistDataGetBytePtr();
            _MDPlistGetRootPlistObjectFromBytes();
            v70 = v84;
            v71 = v85;
          }
          v84 = v70;
          v85 = v71;
          if (_MDPlistGetPlistObjectType() == 240)
          {
            v84 = v70;
            v85 = v71;
            Count = _MDPlistArrayGetCount();
            if ((Count - 3) <= 1)
            {
              v31 = Count;
              v84 = v70;
              v85 = v71;
              _MDPlistArrayGetPlistObjectAtIndex();
              IntValue = _MDPlistNumberGetIntValue();
              if ((IntValue & 2) == 0)
              {
                v33 = IntValue;
                v58 = *(_DWORD *)(*(_QWORD *)(v4 + 40) + 80);
                v68 = 0uLL;
                v69 = 0;
                v84 = v70;
                v85 = v71;
                _MDPlistArrayGetPlistObjectAtIndex();
                v66 = 0uLL;
                v67 = 0;
                v84 = v68;
                v85 = v69;
                if (_MDPlistDictionaryGetPlistObjectForKey())
                {
                  v84 = v70;
                  v85 = v71;
                  PlistObjectSize = _MDPlistGetPlistObjectSize();
                  v84 = v66;
                  v85 = v67;
                  v35 = _copyMDPlistObject(v60);
                  if (v35)
                  {
                    v57 = PlistObjectSize;
                    v36 = v35;
                    if (CFStringGetLength(v35))
                    {
                      v64 = 0uLL;
                      v65 = 0;
                      if (v31 == 4)
                      {
                        v84 = v70;
                        v85 = v71;
                        _MDPlistArrayGetPlistObjectAtIndex();
                      }
                      if (*(_BYTE *)(v4 + 160))
                      {
                        bzero(&v84, 0x400uLL);
                        v37 = 0;
                        if (CFStringGetCString(v36, (char *)&v84, 1024, 0x8000100u))
                        {
                          v62 = 0uLL;
                          v63 = 0;
                          if (_MDPlistDictionaryGetPlistObjectForKey())
                            v37 = _copyMDPlistObject(v59);
                        }
                      }
                      else
                      {
                        v37 = 0;
                      }
                      v38 = *(_QWORD *)(v4 + 104);
                      v39 = *(_QWORD *)(v4 + 112);
                      v40 = *(_QWORD *)(v4 + 120);
                      v41 = *(_QWORD *)(v4 + 128);
                      v42 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 24);
                      v43 = *(NSObject **)(v4 + 136);
                      v44 = *(_BYTE **)(v4 + 144);
                      v84 = v68;
                      v85 = v69;
                      v62 = v64;
                      v63 = v65;
                      v45 = processOneCS(v38, v39, v40, v41, (v33 << 16) & 0x100000 | ((v33 & 1) << 17) | v58, (uint64_t)&v84, (uint64_t)&v62, (uint64_t)v37, v57, v60, 1u, v43, v42, v44);
                      CFRelease(v36);
                      if (v37)
                        CFRelease(v37);
                      if (v3)
                        v46 = v45;
                      else
                        v46 = 0;
                      if (v46)
                        break;
                    }
                    else
                    {
                      CFRelease(v36);
                    }
                  }
                }
              }
            }
          }
          v47 = *(unint64_t **)(v4 + 48);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
        while (v48 < *(unsigned int *)(v4 + 156));
      }
      v49 = *(_QWORD *)&threadData[18 * v74 + 2];
      v50 = v73;
      v51 = v49 + 320 * v73;
      *(_DWORD *)(v51 + 312) = v61;
      v52 = *(void (**)(_QWORD))(v51 + 232);
      if (v52)
        v52(*(_QWORD *)(v49 + 320 * v50 + 288));
      dropThreadId(v74, 0, v18);
    }
    v53 = *(_QWORD *)&threadData[18 * v80 + 2];
    v54 = v79;
    v55 = v53 + 320 * v79;
    *(_DWORD *)(v55 + 312) = v12;
    v56 = *(void (**)(_QWORD))(v55 + 232);
    if (v56)
      v56(*(_QWORD *)(v53 + 320 * v54 + 288));
    return dropThreadId(v80, 0, v6);
  }
}

void __new_live_index_block_invoke(uint64_t a1, const void *a2)
{
  si_collect_block(*(_QWORD *)(a1 + 32), a2);
}

void __mergeIntoUpdateSet_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 16416));
  v2 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(*(_QWORD *)(v2 + 16432) + 57) = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 16416));
  dispatch_group_wait(*(dispatch_group_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16432) + 40), 0xFFFFFFFFFFFFFFFFLL);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 16416));
  dispatch_release(*(dispatch_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16432) + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 16432);
  *(_QWORD *)(v3 + 16432) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 16416));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 16424));
  free(v4);
}

void __mergeIntoUpdateSet_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16432) + 48) = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16432) + 8) = a3;
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16432);
  *(_BYTE *)(v9 + 56) = a4;
  *(_QWORD *)v9 = a5;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD **)(v10 + 16432);
  v11[3] = a8;
  v11[4] = a7;
  v11[2] = a6;
  os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 16416));
  if (*(_BYTE *)(a1 + 40))
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(a1 + 32) + 16424));
}

void ___flushCache_block_invoke(uint64_t a1)
{
  _BYTE *v2;
  unsigned __int8 *v3;
  char v4;
  unsigned __int8 v5;
  unsigned int *v6;

  v2 = *(_BYTE **)(a1 + 32);
  v3 = (unsigned __int8 *)(*(_QWORD *)v2 + 1448);
  v4 = ~v2[16];
  do
    v5 = __ldaxr(v3);
  while (__stlxr(v5 & v4, v3));
  v6 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 88);
  if (v6)
  {
    si_scheduler_resume_with_token(v6);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 88) = 0;
  }
}

void ___copyMDPlistObject_block_invoke(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  const void *v6;
  __int128 v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  v5 = (const void *)_copyMDPlistObject(v3, &v7, v4);
  if (v5)
  {
    v6 = v5;
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 48), v5);
    CFRelease(v6);
  }
}

uint64_t _TermUpdateSetGetStats(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;
  int64x2_t i;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int64x2_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  int64x2_t v29;

  if (result)
  {
    v5 = result;
    if ((a3 & 1) == 0)
      db_read_lock(result + 304);
    v6 = *(_QWORD *)(v5 + 232);
    v7 = 0uLL;
    for (i = 0uLL; v6; v6 = *(_QWORD *)v6)
      i = vaddq_s64(vsubq_s64(i, vdupq_n_s64(v6)), *(int64x2_t *)(v6 + 8));
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 24);
    if (v9)
    {
      v7 = 0uLL;
      do
      {
        v7 = vaddq_s64(vsubq_s64(v7, vdupq_n_s64(v9)), *(int64x2_t *)(v9 + 8));
        v9 = *(_QWORD *)v9;
      }
      while (v9);
    }
    v29 = vaddq_s64(i, v7);
    result = _os_feature_enabled_impl();
    if (!(_DWORD)result || (v10 = *(_QWORD **)(v5 + 80), v13 = (_QWORD *)*v10, v11 = v10 + 1, v12 = v13, v13 == v11))
    {
      v18 = 39952;
    }
    else
    {
      v14 = 0;
      do
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v12[5] + 280))(v12[5]);
        v15 = (_QWORD *)v12[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (_QWORD *)v12[2];
            v17 = *v16 == (_QWORD)v12;
            v12 = v16;
          }
          while (!v17);
        }
        v14 += result;
        v12 = v16;
      }
      while (v16 != v11);
      v18 = v14 + 39952;
    }
    v19 = atomic_load((unsigned int *)(v5 + 100));
    v20 = 12 * *(unsigned int *)(v5 + 96);
    v21 = atomic_load((unsigned int *)(v5 + 248));
    v22 = 32 * *(unsigned int *)(v5 + 252);
    v23 = atomic_load((unsigned int *)(v5 + 268));
    v24 = *(unsigned int *)(v5 + 272);
    *(_BYTE *)(a2 + 64) = *(_QWORD *)(v5 + 240) != 0;
    v25 = vdupq_n_s64(0x9C10uLL);
    v25.i64[0] = v18;
    *(int64x2_t *)a2 = vaddq_s64(v25, v29);
    *(_QWORD *)(a2 + 16) = 12 * v19;
    *(_QWORD *)(a2 + 24) = v20;
    *(_QWORD *)(a2 + 32) = 32 * v21 + 8 * v23;
    *(_QWORD *)(a2 + 40) = v22 + 8 * v24;
    if ((a3 & 1) == 0)
    {
      pthread_mutex_lock((pthread_mutex_t *)(v5 + 304));
      v26 = *(_DWORD *)(v5 + 500) - 1;
      *(_DWORD *)(v5 + 500) = v26;
      if (!v26)
        db_rwlock_wakeup(v5 + 304, 0, 0);
      result = pthread_mutex_unlock((pthread_mutex_t *)(v5 + 304));
    }
  }
  else
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  v27 = atomic_load(&gTotalCurrentUsage);
  v28 = atomic_load(gTermUpdateSetCount);
  *(_QWORD *)(a2 + 48) = v27;
  *(_QWORD *)(a2 + 56) = v28;
  return result;
}

uint64_t _SIBudgetCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 152);
  if (v5)
    return (*(uint64_t (**)(void))(v5 + 16))();
  else
    return (*(uint64_t (**)(uint64_t))(a5 + 16))(a5);
}

uint64_t _CopyUTITypeInfo(const __CFString *a1, uint64_t a2, CFTypeRef *a3, CFURLRef *a4)
{
  void *v8;
  const __CFDictionary *v9;
  const void *Value;
  void *v11;
  uint64_t v12;
  const __CFArray *v13;
  const __CFArray *ValueAtIndex;
  CFTypeID TypeID;
  CFTypeID v16;

  if (a2 > 9)
    return 0;
  v8 = (void *)MEMORY[0x1BCCB1280]();
  v9 = UTTypeCopyDeclaration(a1);
  objc_autoreleasePoolPop(v8);
  if (!v9)
    return 0;
  Value = CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E0CA5B28]);
  if (Value)
  {
    if (a3)
      *a3 = CFRetain(Value);
    if (a4)
    {
      v11 = (void *)MEMORY[0x1BCCB1280]();
      *a4 = UTTypeCopyDeclaringBundleURL(a1);
      objc_autoreleasePoolPop(v11);
    }
    v12 = 1;
  }
  else
  {
    v13 = (const __CFArray *)CFDictionaryGetValue(v9, (const void *)*MEMORY[0x1E0CA5B08]);
    if (!v13)
      goto LABEL_16;
    ValueAtIndex = v13;
    TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(ValueAtIndex) && CFArrayGetCount(ValueAtIndex) == 1)
      ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
    v16 = CFStringGetTypeID();
    if (v16 == CFGetTypeID(ValueAtIndex))
      v12 = _CopyUTITypeInfo(ValueAtIndex, a2 + 1, a3, a4);
    else
LABEL_16:
      v12 = 0;
  }
  CFRelease(v9);
  return v12;
}

uint64_t _CIUpdateContent(uint64_t a1, uint64_t a2, const void *a3, int a4, const void *a5, uint64_t a6, int a7, CFTypeRef a8, float a9, const void *a10, unint64_t a11, uint64_t *a12, unsigned int a13, uint64_t a14, unsigned int a15, uint64_t (*a16)(uint64_t), uint64_t a17, int a18, int a19, int a20,unsigned __int8 a21,uint64_t a22)
{
  CFTypeRef v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void (*v36)(_QWORD);
  int v37;
  NSObject *v38;
  int v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v43;
  uint64_t v44;
  pthread_mutex_t *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD);
  int v49;
  NSObject *v50;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 8))
  {
    v39 = *__error();
    v40 = _SILogForLogForCategory(0);
    v41 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v40, v41))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v40, v41, "Skipping because index is shut down", buf, 2u);
    }
    *__error() = v39;
    return 0xFFFFFFFFLL;
  }
  v27 = a10;
  do
  {
    v28 = __ldxr(exceptionSequenceNum);
    v29 = v28 + 1;
  }
  while (__stxr(v28 + 1, exceptionSequenceNum));
  v30 = setThreadIdAndInfo(-1, (__int128 *)sIndexExceptionCallbacks, a1, 0, v29);
  v57 = HIDWORD(v30);
  v58 = v30;
  v55 = v32;
  v56 = v31;
  v33 = *(_QWORD *)&threadData[18 * v30 + 2];
  v34 = v33 + 320 * HIDWORD(v30);
  *(_BYTE *)(v34 + 216) = 0;
  v35 = *(_DWORD *)(v34 + 312);
  v36 = *(void (**)(_QWORD))(v34 + 224);
  if (v36)
    v36(*(_QWORD *)(v33 + 320 * HIDWORD(v30) + 288));
  if (_setjmp((int *)v34))
  {
    v37 = *__error();
    v38 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v60 = "_CIUpdateContent";
      v61 = 1024;
      v62 = 2375;
      _os_log_error_impl(&dword_1B8270000, v38, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
    }
    *__error() = v37;
    *(_DWORD *)(v34 + 312) = v35;
    CIOnThreadCleanUpReset(v55);
    dropThreadId(v58, 1, v29);
    CICleanUpReset(v58, v56);
    return 0xFFFFFFFFLL;
  }
  if (dword_1EF19FCB4 >= 5)
  {
    v49 = *__error();
    v50 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v60 = (const char *)a6;
      _os_log_impl(&dword_1B8270000, v50, OS_LOG_TYPE_DEFAULT, "_CIUpdateContent oid: %lld", buf, 0xCu);
    }
    *__error() = v49;
    if (!a8)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (a8)
LABEL_16:
    a8 = CFRetain(a8);
LABEL_17:
  if (a10)
    v27 = CFRetain(a10);
  if (a12)
  {
    *a12 = 0;
    v43 = setDocumentAttributes(a1, a2, a3, a4, a5, a6, a7, (const __CFDictionary *)a8, a9, v27, a11, a12, a13, a14, a16, a17, a15, a18, a19,
            a20,
            a21,
            a22);
  }
  else
  {
    v43 = setDocumentAttributes(a1, a2, a3, a4, a5, a6, a7, (const __CFDictionary *)a8, a9, v27, a11, 0, a13, a14, a16, a17, a15, a18, a19,
            a20,
            a21,
            a22);
  }
  v44 = v43;
  if (v27)
    CFRelease(v27);
  if (a8)
    CFRelease(a8);
  if (*(_BYTE *)(a1 + 16392) && *(_QWORD *)(a1 + 14360))
  {
    v45 = (pthread_mutex_t *)(a1 + 15080);
    pthread_mutex_lock(v45);
    pthread_mutex_unlock(v45);
  }
  v46 = *(_QWORD *)&threadData[18 * v58 + 2];
  v47 = v46 + 320 * v57;
  *(_DWORD *)(v47 + 312) = v35;
  v48 = *(void (**)(_QWORD))(v47 + 232);
  if (v48)
    v48(*(_QWORD *)(v46 + 320 * v57 + 288));
  dropThreadId(v58, 0, v29);
  return v44;
}

uint64_t _CIFlushCache(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pthread_mutex_t *v10;
  unsigned int v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void (*v19)(_QWORD);
  int v20;
  NSObject *v21;
  uint64_t v22;
  int v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD);
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = (pthread_mutex_t *)(a1 + 15080);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 15080));
  v36 = 0;
  if (*(_BYTE *)(a1 + 8))
  {
    do
    {
      v11 = __ldxr(exceptionSequenceNum);
      v12 = v11 + 1;
    }
    while (__stxr(v11 + 1, exceptionSequenceNum));
    v13 = setThreadIdAndInfo(-1, (__int128 *)sIndexExceptionCallbacks, a1, 0, v12);
    v34 = HIDWORD(v13);
    v35 = v13;
    v32 = v15;
    v33 = v14;
    v16 = *(_QWORD *)&threadData[18 * v13 + 2];
    v17 = v16 + 320 * HIDWORD(v13);
    *(_BYTE *)(v17 + 216) = 0;
    v18 = *(_DWORD *)(v17 + 312);
    v19 = *(void (**)(_QWORD))(v17 + 224);
    if (v19)
      v19(*(_QWORD *)(v16 + 320 * HIDWORD(v13) + 288));
    if (_setjmp((int *)v17))
    {
      v20 = *__error();
      v21 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v38 = "_CIFlushCache";
        v39 = 1024;
        v40 = 893;
        _os_log_error_impl(&dword_1B8270000, v21, OS_LOG_TYPE_ERROR, "%s:%d: Caught mach exception", buf, 0x12u);
      }
      *__error() = v20;
      *(_DWORD *)(v17 + 312) = v18;
      CIOnThreadCleanUpReset(v32);
      dropThreadId(v35, 1, v12);
      CICleanUpReset(v35, v33);
      v22 = 0;
    }
    else
    {
      if (atomic_load((unsigned int *)(a1 + 15152)))
      {
        (*(void (**)(uint64_t))(a5 + 16))(a5);
        v27 = 0;
      }
      else
      {
        v27 = index_FlushCache(a1, a2, a3, a4, a5);
      }
      v36 = 1;
      v28 = *(_QWORD *)&threadData[18 * v35 + 2];
      v29 = v28 + 320 * v34;
      *(_DWORD *)(v29 + 312) = v18;
      v30 = *(void (**)(_QWORD))(v29 + 232);
      if (v30)
        v30(*(_QWORD *)(v28 + 320 * v34 + 288));
      dropThreadId(v35, 0, v12);
      v22 = v27;
    }
  }
  else
  {
    v23 = *__error();
    v24 = _SILogForLogForCategory(0);
    v25 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v24, v25))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B8270000, v24, v25, "Skipping because index is shut down", buf, 2u);
    }
    v22 = 0;
    *__error() = v23;
  }
  if (!v36)
    (*(void (**)(uint64_t))(a5 + 16))(a5);
  pthread_mutex_unlock(v10);
  return v22;
}

void TrieMergeCleanup(uint64_t *a1)
{
  uint64_t v2;
  pthread_mutex_t *v3;
  pthread_override_s *v4;
  char v5;
  uint64_t v6;
  int v7;

  if (*((_BYTE *)a1 + 49))
  {
    v2 = *a1;
    v3 = (pthread_mutex_t *)(*a1 + 4592);
    pthread_mutex_lock(v3);
    *(_DWORD *)(v2 + 4796) = 0;
    v4 = *(pthread_override_s **)(v2 + 4768);
    *(_QWORD *)(v2 + 4776) = 0;
    *(_QWORD *)(v2 + 4768) = 0;
    v5 = *(_DWORD *)(v2 + 4788) != 0;
    v3[3].__opaque[12] = 0;
    db_rwlock_wakeup((uint64_t)v3, v5, 0);
    pthread_mutex_unlock(v3);
    if (v4)
      pthread_override_qos_class_end_np(v4);
  }
  if (*((_BYTE *)a1 + 48))
  {
    v6 = a1[1];
    pthread_mutex_lock((pthread_mutex_t *)(v6 + 304));
    v7 = *(_DWORD *)(v6 + 500) - 1;
    *(_DWORD *)(v6 + 500) = v7;
    if (!v7)
      db_rwlock_wakeup(v6 + 304, 0, 0);
    pthread_mutex_unlock((pthread_mutex_t *)(v6 + 304));
  }
  free((void *)a1[2]);
  free((void *)a1[3]);
  free((void *)a1[4]);
  free((void *)a1[5]);
  free(a1);
}

_DWORD *TermUpdateSetStore(_DWORD *result, uint64_t a2, _QWORD *a3, char a4)
{
  _DWORD *v7;
  double Current;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  void **v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  int v33;
  int v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  unsigned int v38;
  CFAbsoluteTime v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  char *v46;
  char *v47;
  const char *v48;
  unsigned int v49;
  pthread_mutex_t *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void *v54[2];
  uint64_t v55;
  int v56;
  void *__p[8];
  uint8_t buf[4];
  uint64_t v59;
  __int16 v60;
  void **v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v52 = 0u;
  v53 = 0u;
  v51 = 0u;
  if (result)
  {
    v7 = result;
    Current = CFAbsoluteTimeGetCurrent();
    db_read_lock((uint64_t)(v7 + 76));
    v9 = atomic_load((unsigned int *)(*((_QWORD *)v7 + 3) + 16));
    v10 = a3[5];
    if ((unint64_t)(a3[4] - v10) < 6)
    {
      *(void **)((char *)&__p[1] + 1) = 0;
      *(void **)((char *)__p + 1) = 0;
      __p[3] = 0;
      *(void **)((char *)&__p[2] + 1) = 0;
      LOBYTE(__p[0]) = 11;
      store_stream_write_bytes_2184((uint64_t)a3, (char *)__p, 1uLL);
    }
    else
    {
      *(_BYTE *)(a3[6] + v10) = 11;
      a3[5] = v10 + 1;
    }
    store_stream_write_vint32_2186(a3, v9);
    store_stream_write_vint32_2186(a3, v7[28]);
    v11 = *((_QWORD *)v7 + 1);
    v12 = a3[5];
    if ((unint64_t)(a3[4] - v12) < 0xB)
    {
      memset(__p, 0, 32);
      v45 = writeVInt64((uint64_t)__p, 0, v11);
      store_stream_write_bytes_2184((uint64_t)a3, (char *)__p, v45);
    }
    else
    {
      a3[5] = writeVInt64(a3[6], v12, v11);
    }
    store_stream_write_vint32_2186(a3, v7[4]);
    store_stream_write_vint32_2186(a3, v7[42]);
    store_stream_write_vint32_2186(a3, v7[36]);
    store_stream_write_vint32_2186(a3, v7[30]);
    store_stream_write_vint32_2186(a3, v7[44]);
    store_stream_write_vint32_2186(a3, v7[38]);
    store_stream_write_vint32_2186(a3, v7[32]);
    store_stream_write_vint32_2186(a3, v7[54]);
    store_stream_write_vint32_2186(a3, v7[52]);
    store_stream_write_vint32_2186(a3, v7[34]);
    store_stream_write_vint32_2186(a3, v7[42]);
    store_stream_write_vint32_2186(a3, v7[50]);
    storeDirStoreUpdateSet(*((_QWORD *)v7 + 11), (uint64_t)(v7 + 12), a3);
    v13 = v7[154];
    BYTE8(v53) = a4;
    LODWORD(v53) = 0;
    DWORD1(v53) = v13;
    v14 = *((_QWORD *)v7 + 11);
    *(_QWORD *)&v52 = v7 + 60;
    *((_QWORD *)&v52 + 1) = a2;
    *(_QWORD *)&v51 = a3;
    *((_QWORD *)&v51 + 1) = v14;
    v15 = *((_QWORD *)v7 + 3);
    v54[0] = 0;
    v54[1] = v54;
    v56 = 0;
    v55 = 0x2000000000;
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)0x40000000;
    __p[2] = ___hashTableIterate_block_invoke_2;
    __p[3] = &unk_1E6E2F4F8;
    __p[6] = &v51;
    __p[4] = v54;
    __p[5] = storeUpdateSetCallback;
    _TermTrieWalkFatWithOptions(v15 + 32, 0, 0, 0, (uint64_t)__p, 0, 0);
    _Block_object_dispose(v54, 8);
    if (v9 != (_DWORD)v53)
    {
      v46 = __si_assert_copy_extra_268();
      v47 = v46;
      v48 = "";
      if (v46)
        v48 = v46;
      __message_assert("%s:%u: failed assertion '%s' %s ", "TermUpdateSet.c", 909, "updateTermCount == ctx.termCount", v48);
      free(v47);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v50 = (pthread_mutex_t *)(v7 + 76);
    v49 = v9;
    v16 = *((_QWORD *)v7 + 10);
    if (v16)
    {
      v17 = *((_QWORD *)v7 + 11);
      store_stream_write_vint32_2186(a3, *(_DWORD *)(v16 + 16));
      v18 = *(_QWORD **)v16;
      if (*(_QWORD *)v16 != v16 + 8)
      {
        do
        {
          v19 = *__error();
          v20 = _SILogForLogForCategory(16);
          v21 = 2 * (dword_1EF19FCCC < 4);
          if (os_log_type_enabled(v20, v21))
          {
            v22 = v18[5];
            HIBYTE(v55) = 3;
            LODWORD(v54[0]) = 4085052;
            (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v22 + 312))(__p, v22, v54);
            v23 = __p;
            if (SHIBYTE(__p[2]) < 0)
              v23 = (void **)__p[0];
            *(_DWORD *)buf = 134218242;
            v59 = v16;
            v60 = 2080;
            v61 = v23;
            _os_log_impl(&dword_1B8270000, v20, v21, "store <UpdateSet> %p %s", buf, 0x16u);
            if (SHIBYTE(__p[2]) < 0)
            {
              operator delete(__p[0]);
              if (SHIBYTE(v55) < 0)
LABEL_37:
                operator delete(v54[0]);
            }
            else if (SHIBYTE(v55) < 0)
            {
              goto LABEL_37;
            }
          }
          *__error() = v19;
          store_stream_write_vint32_2186(a3, *(_DWORD *)(v18[5] + 8));
          v24 = *(_DWORD *)(v18[5] + 16);
          if (v24 == 2)
            v25 = 1;
          else
            v25 = 3;
          if (v24 == 4)
            v26 = 0;
          else
            v26 = v25;
          store_stream_write_vint32_2186(a3, v26);
          v27 = *(_DWORD *)(v18[5] + 12);
          if (v27 == 512)
            v28 = 1;
          else
            v28 = 3;
          if (v27 == 768)
            v28 = 2;
          if (v27 == 256)
            v29 = 0;
          else
            v29 = v28;
          store_stream_write_vint32_2186(a3, v29);
          store_stream_write_vint32_2186(a3, *(unsigned __int16 *)(v18[5] + 20));
          (*(void (**)(_QWORD, uint64_t, _QWORD *))(*(_QWORD *)v18[5] + 208))(v18[5], v17, a3);
          v30 = (_QWORD *)v18[1];
          if (v30)
          {
            do
            {
              v31 = v30;
              v30 = (_QWORD *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              v31 = (_QWORD *)v18[2];
              v32 = *v31 == (_QWORD)v18;
              v18 = v31;
            }
            while (!v32);
          }
          v18 = v31;
        }
        while (v31 != (_QWORD *)(v16 + 8));
      }
    }
    pthread_mutex_lock(v50);
    v33 = v7[125] - 1;
    v7[125] = v33;
    if (!v33)
      db_rwlock_wakeup((uint64_t)v50, 0, 0);
    pthread_mutex_unlock(v50);
    v34 = *__error();
    v35 = _SILogForLogForCategory(10);
    v36 = 2 * (dword_1EF19FCB4 < 4);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = v7[28];
      v38 = atomic_load(v7 + 25);
      v39 = CFAbsoluteTimeGetCurrent();
      LODWORD(__p[0]) = 67109888;
      HIDWORD(__p[0]) = v49;
      LOWORD(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 2) = v37;
      HIWORD(__p[1]) = 1024;
      LODWORD(__p[2]) = v38;
      WORD2(__p[2]) = 2048;
      *(double *)((char *)&__p[2] + 6) = v39 - Current;
      _os_log_impl(&dword_1B8270000, v35, v36, "Store Update Set (t %d, d %d, p %d) took %f seconds", (uint8_t *)__p, 0x1Eu);
    }
    result = __error();
    *result = v34;
  }
  else
  {
    v40 = a3[5];
    if ((unint64_t)(a3[4] - v40) < 6)
    {
      *(void **)((char *)&__p[1] + 1) = 0;
      *(void **)((char *)__p + 1) = 0;
      __p[3] = 0;
      *(void **)((char *)&__p[2] + 1) = 0;
      LOBYTE(__p[0]) = 11;
      result = (_DWORD *)store_stream_write_bytes_2184((uint64_t)a3, (char *)__p, 1uLL);
      v41 = a3[5];
    }
    else
    {
      *(_BYTE *)(a3[6] + v40) = 11;
      v41 = v40 + 1;
      a3[5] = v41;
    }
    if ((unint64_t)(a3[4] - v41) < 6)
    {
      memset(__p, 0, 32);
      result = (_DWORD *)store_stream_write_bytes_2184((uint64_t)a3, (char *)__p, 1uLL);
      v42 = a3[5];
    }
    else
    {
      *(_BYTE *)(a3[6] + v41) = 0;
      v42 = v41 + 1;
      a3[5] = v42;
    }
    if ((unint64_t)(a3[4] - v42) < 6)
    {
      memset(__p, 0, 32);
      result = (_DWORD *)store_stream_write_bytes_2184((uint64_t)a3, (char *)__p, 1uLL);
      v43 = a3[5];
    }
    else
    {
      *(_BYTE *)(a3[6] + v42) = 0;
      v43 = v42 + 1;
      a3[5] = v43;
    }
    if ((unint64_t)(a3[4] - v43) < 6)
    {
      memset(__p, 0, 32);
      result = (_DWORD *)store_stream_write_bytes_2184((uint64_t)a3, (char *)__p, 1uLL);
      v44 = a3[5];
    }
    else
    {
      *(_BYTE *)(a3[6] + v43) = 0;
      v44 = v43 + 1;
      a3[5] = v44;
    }
    if ((unint64_t)(a3[4] - v44) < 6)
    {
      memset(__p, 0, 32);
      return (_DWORD *)store_stream_write_bytes_2184((uint64_t)a3, (char *)__p, 1uLL);
    }
    else
    {
      *(_BYTE *)(a3[6] + v44) = 0;
      a3[5] = v44 + 1;
    }
  }
  return result;
}

uint64_t TermUpdateSetRemoveFromAccounting(uint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  const char *v7;

  v1 = *(_QWORD *)(result + 224);
  v2 = atomic_load(&gTotalCurrentUsage);
  if (v1 > v2)
  {
    v5 = __si_assert_copy_extra_268();
    v6 = v5;
    v7 = "";
    if (v5)
      v7 = v5;
    __message_assert("%s:%u: failed assertion '%s' %s ", "TermUpdateSet.c", 1421, "termUpdateSet->reportedSize <= gTotalCurrentUsage", v7);
    free(v6);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v3 = *(_QWORD *)(result + 224);
  do
    v4 = __ldaxr(&gTotalCurrentUsage);
  while (__stlxr(v4 - v3, &gTotalCurrentUsage));
  *(_QWORD *)(result + 224) = 0;
  return result;
}

char *TermUpdateSetCreate(uint64_t (*a1)(), uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, __int16 a7, const void *a8)
{
  char *v13;
  size_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  uint64_t (*v33)();
  int v34;
  uint64_t v35;
  int v37;
  NSObject *v38;
  char *v39;
  char *v40;
  const char *v41;
  uint8_t buf[24];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v13 = (char *)malloc_type_calloc(1uLL, 0x270uLL, 0x10A0040208F0414uLL);
  *((_DWORD *)v13 + 28) = 0;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_OWORD *)(v13 + 184) = 0u;
  *(_OWORD *)(v13 + 200) = 0u;
  *((_QWORD *)v13 + 27) = 0;
  *(_QWORD *)buf = 0;
  v14 = (size_t *)MEMORY[0x1E0C85AD8];
  v15 = *MEMORY[0x1E0C85AD8];
  v16 = 0;
  if (!slab_vm_allocate(buf, *MEMORY[0x1E0C85AD8], 244))
  {
    v16 = *(_QWORD *)buf;
    v17 = (void *)(*(_QWORD *)buf + 24);
    **(_QWORD **)buf = 0;
    *(_QWORD *)(v16 + 8) = v17;
    *(_QWORD *)(v16 + 16) = v16 + v15;
    madvise(v17, *v14, 3);
  }
  *((_QWORD *)v13 + 29) = v16;
  v18 = v13 + 232;
  *((_DWORD *)v13 + 4) = a4;
  *(_QWORD *)(v16 + 8) = (*(_QWORD *)(v16 + 8) + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = *((_QWORD *)v13 + 29);
  v20 = *(_QWORD **)(v19 + 8);
  if ((unint64_t)(v20 + 303) >= *(_QWORD *)(v19 + 16))
  {
    v20 = slab_new((_QWORD **)v13 + 29, 0x970uLL, 244);
    if ((a5 & 8) != 0)
      goto LABEL_19;
LABEL_6:
    v21 = *(_QWORD *)v18;
LABEL_8:
    v22 = atomic_load((unint64_t *)(v21 + 8));
    if (v22 + 24592 >= *(_QWORD *)(v21 + 16))
    {
      while (1)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&_slablock);
        v21 = *(_QWORD *)v18;
        v25 = (unint64_t *)(*(_QWORD *)v18 + 8);
        v26 = atomic_load(v25);
        if (v26 + 24592 >= *(_QWORD *)(v21 + 16))
          break;
        os_unfair_lock_unlock((os_unfair_lock_t)&_slablock);
        v22 = atomic_load(v25);
        if (v22 + 24592 < *(_QWORD *)(v21 + 16))
          goto LABEL_9;
      }
      v22 = (unint64_t)slab_new_slab((_QWORD **)v13 + 29, 0x6008uLL, 244);
      os_unfair_lock_unlock((os_unfair_lock_t)&_slablock);
    }
    else
    {
LABEL_9:
      v23 = (unint64_t *)(v21 + 8);
      do
      {
        v24 = __ldaxr(v23);
        if (v24 != v22)
        {
          __clrex();
          goto LABEL_8;
        }
      }
      while (__stlxr(v22 + 24584, v23));
      v27 = atomic_load(v23);
      if ((v27 ^ v22) < 0x40000)
        goto LABEL_18;
    }
    madvise((void *)((v22 & 0xFFFFFFFFFFFC0000) + 0x40000), 0x40000uLL, 3);
LABEL_18:
    *v20 = v22;
    goto LABEL_19;
  }
  *(_QWORD *)(v19 + 8) = v20 + 302;
  if (!v20)
    goto LABEL_21;
  if ((a5 & 8) == 0)
    goto LABEL_6;
LABEL_19:
  bzero(v20 + 2, 0x960uLL);
  *(_QWORD *)buf = 0;
  v28 = *v14;
  if (slab_vm_allocate(buf, *v14, 244))
  {
    v20[3] = 0;
    v39 = __si_assert_copy_extra_268();
    v40 = v39;
    v41 = "";
    if (v39)
      v41 = v39;
    __message_assert("%s:%u: failed assertion '%s' %s ", "TermTrie.c", 170, "trie->dataAllocator", v41);
    free(v40);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v29 = *(_QWORD *)buf;
  v30 = (void *)(*(_QWORD *)buf + 24);
  **(_QWORD **)buf = 0;
  *(_QWORD *)(v29 + 8) = v30;
  *(_QWORD *)(v29 + 16) = v29 + v28;
  madvise(v30, *v14, 3);
  *((_OWORD *)v20 + 147) = xmmword_1B8631678;
  *((_OWORD *)v20 + 148) = unk_1B8631688;
  *((_OWORD *)v20 + 149) = xmmword_1B8631698;
  *((_OWORD *)v20 + 150) = unk_1B86316A8;
  *((_OWORD *)v20 + 143) = xmmword_1B8631638;
  *((_OWORD *)v20 + 144) = unk_1B8631648;
  *((_OWORD *)v20 + 145) = xmmword_1B8631658;
  *((_OWORD *)v20 + 146) = unk_1B8631668;
  *((_OWORD *)v20 + 142) = unk_1B8631628;
  *((_OWORD *)v20 + 135) = tcm;
  *((_OWORD *)v20 + 136) = unk_1B86315C8;
  *((_OWORD *)v20 + 137) = xmmword_1B86315D8;
  v20[3] = v29;
  v20[262] = 0;
  v20[263] = 0;
  v20[264] = 0;
  v20[265] = 0;
  v20[266] = 0;
  v20[267] = 0;
  *(_QWORD *)buf = 0;
  v20[268] = 0;
  v20[269] = 0;
LABEL_21:
  *((_QWORD *)v13 + 3) = v20;
  v31 = _Block_copy(a8);
  v32 = 0;
  *((_QWORD *)v13 + 4) = v31;
  *((_QWORD *)v13 + 11) = 0;
  *((_DWORD *)v13 + 24) = 0;
  atomic_store(1u, (unsigned int *)v13 + 25);
  *((_QWORD *)v13 + 13) = v31;
  atomic_store(1u, (unsigned int *)v13 + 62);
  *((_DWORD *)v13 + 63) = 0;
  *((_QWORD *)v13 + 30) = 0;
  *((_QWORD *)v13 + 32) = 0;
  atomic_store(1u, (unsigned int *)v13 + 67);
  *((_DWORD *)v13 + 68) = 0;
  atomic_store(0, (unsigned int *)v13 + 66);
  *((_QWORD *)v13 + 37) = v31;
  *((_QWORD *)v13 + 1) = a3;
  if ((a5 & 8) == 0)
  {
    *(_QWORD *)(*(_QWORD *)v18 + 8) = (*(_QWORD *)(*(_QWORD *)v18 + 8) + 7) & 0xFFFFFFFFFFFFFFF8;
    v32 = *(_QWORD **)(*(_QWORD *)v18 + 8);
    if ((unint64_t)(v32 + 1922) >= *(_QWORD *)(*(_QWORD *)v18 + 16))
      v32 = slab_new((_QWORD **)v13 + 29, 0x3C08uLL, 244);
    else
      *(_QWORD *)(*(_QWORD *)v18 + 8) = v32 + 1921;
  }
  v33 = _termUpdateSetProgress;
  if (a1)
    v33 = a1;
  *((_QWORD *)v13 + 74) = v33;
  *((_QWORD *)v13 + 75) = a2;
  *((_QWORD *)v13 + 5) = v32;
  *((_QWORD *)v13 + 6) = 2;
  *((_QWORD *)v13 + 7) = 0;
  v34 = _os_feature_enabled_impl();
  if ((a5 & 0x40) == 0 && v34)
  {
    v35 = operator new();
    *(_QWORD *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 8) = 0;
    *(_QWORD *)v35 = v35 + 8;
    *(_WORD *)(v35 + 24) = a7;
    *(_OWORD *)(v35 + 28) = xmmword_1B8631CE0;
    *(_QWORD *)(v35 + 48) = a6;
    if (dword_1EF19FCCC >= 5)
    {
      v37 = *__error();
      v38 = _SILogForLogForCategory(16);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v35;
        _os_log_impl(&dword_1B8270000, v38, OS_LOG_TYPE_DEFAULT, "Create <UpdateSet> %p", buf, 0xCu);
      }
      *__error() = v37;
    }
    *((_QWORD *)v13 + 10) = v35;
  }
  atomic_store(1u, (unsigned int *)v13);
  *((_DWORD *)v13 + 154) = a5;
  *((_OWORD *)v13 + 19) = 0u;
  *((_OWORD *)v13 + 20) = 0u;
  *((_OWORD *)v13 + 21) = 0u;
  *((_OWORD *)v13 + 22) = 0u;
  *((_OWORD *)v13 + 23) = 0u;
  *((_OWORD *)v13 + 24) = 0u;
  *((_OWORD *)v13 + 25) = 0u;
  *((_OWORD *)v13 + 26) = 0u;
  *((_OWORD *)v13 + 27) = 0u;
  *((_OWORD *)v13 + 28) = 0u;
  *((_OWORD *)v13 + 29) = 0u;
  *((_OWORD *)v13 + 30) = 0u;
  *((_OWORD *)v13 + 31) = 0u;
  *((_QWORD *)v13 + 64) = 0;
  pthread_mutex_init((pthread_mutex_t *)(v13 + 304), 0);
  pthread_mutex_init((pthread_mutex_t *)(v13 + 520), 0);
  *((_QWORD *)v13 + 35) = 0;
  return v13;
}

uint64_t TermUpdateSetAddDocumentInfo(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, const void *a5, uint64_t a6, int a7, int a8, unsigned __int8 a9)
{
  pthread_rwlock_t *v15;
  unsigned int v16;
  unint64_t v17;
  signed int v18;
  _QWORD *v19;
  _QWORD *v20;
  CFTypeID v21;
  pthread_override_s *v22;
  char v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  const char *v30;

  if (!a3)
  {
    v28 = __si_assert_copy_extra_268();
    v29 = v28;
    v30 = "";
    if (v28)
      v30 = v28;
    __message_assert("%s:%u: failed assertion '%s' %s expected non-zero docID for term", "TermUpdateSet.c", 2324, "docID", v30);
    free(v29);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  v15 = *(pthread_rwlock_t **)(a1 + 280);
  poslock(v15);
  HIDWORD(v17) = qos_class_self() - 9;
  LODWORD(v17) = HIDWORD(v17);
  v16 = v17 >> 2;
  if (v16 > 6)
    v18 = 0;
  else
    v18 = dword_1B8630ED0[v16];
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 304));
  if (*(_QWORD *)(a1 + 488) || *(_DWORD *)(a1 + 500) || *(_BYTE *)(a1 + 516))
    goto LABEL_8;
  if (v18 <= 5)
  {
    if (*(_QWORD *)(a1 + 16 * v18 + 368))
    {
LABEL_8:
      db_rwlock_wait(a1 + 304, v18, 2);
      goto LABEL_9;
    }
    v25 = v18 - 1;
    v26 = (uint64_t *)(a1 + 16 * v18 + 384);
    while (v25 != 4)
    {
      v27 = *v26;
      v26 += 2;
      ++v25;
      if (v27)
      {
        if (v25 <= 4)
          goto LABEL_8;
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 488) = pthread_self();
LABEL_9:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 304));
  ++*(_DWORD *)(a1 + 112);
  switch(a8)
  {
    case 0:
      v19 = (_QWORD *)(a1 + 128);
      goto LABEL_19;
    case 1:
      v19 = (_QWORD *)(a1 + 168);
      goto LABEL_19;
    case 2:
      v19 = (_QWORD *)(a1 + 144);
      goto LABEL_19;
    case 3:
      v19 = (_QWORD *)(a1 + 120);
      goto LABEL_19;
    case 6:
      v19 = (_QWORD *)(a1 + 136);
      goto LABEL_19;
    case 7:
      v19 = (_QWORD *)(a1 + 192);
      goto LABEL_19;
    case 9:
      v19 = (_QWORD *)(a1 + 200);
      goto LABEL_19;
    case 10:
      v19 = (_QWORD *)(a1 + 208);
      goto LABEL_19;
    case 11:
      v19 = (_QWORD *)(a1 + 216);
LABEL_19:
      ++*v19;
      break;
    default:
      break;
  }
  v20 = CIRetainIndexingTokenizer(a2);
  if (a5)
  {
    v21 = CFGetTypeID(a5);
    if (v21 == CFDictionaryGetTypeID())
      termUpdateSetProcessFields(a1, 0, (uint64_t)v20, a3, a4, (CFDictionaryRef)a5, 0, a9);
    else
      invertValueToUpdateSet(a1, 0, (uint64_t)v20, 0, a3, a4, (uint64_t)a5, 0, 0, 0, 0, 0, 0, a9);
  }
  CIReleaseIndexingTokenizer((uint64_t)v20);
  if (a7)
    doChildFile(a1 + 88, (_QWORD *)(a1 + 48), a7, a6, a3, 0);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 304));
  *(_DWORD *)(a1 + 508) = 0;
  v22 = *(pthread_override_s **)(a1 + 480);
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  v23 = *(_DWORD *)(a1 + 500) != 0;
  *(_BYTE *)(a1 + 516) = 0;
  db_rwlock_wakeup(a1 + 304, v23, 0);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 304));
  if (v22)
    pthread_override_qos_class_end_np(v22);
  return poswriteunlock(v15);
}

void SIActivityJournalNewJournal(os_unfair_lock_s *a1, uint64_t a2)
{
  char *v3;
  const char *v4;
  unsigned int v5;
  os_unfair_lock_s *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  char v10;
  _OWORD v11[16];
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  memset(v11, 0, sizeof(v11));
  v3 = fd_name(a2, (char *)v11, 0x100uLL);
  if (v3)
  {
    v4 = v3;
    if (!strncmp(v3, "journalAttr.", 0xCuLL))
    {
      v8 = atoi(v4 + 12);
      v6 = a1 + 8;
      os_unfair_lock_lock(a1 + 8);
      v12 = 0u;
      v13 = 0u;
      if (v8 > 0x7F)
      {
        if (v8 >> 14)
        {
          if (v8 >> 21)
          {
            if (v8 >> 28)
            {
              LOBYTE(v12) = -16;
              *(_DWORD *)((char *)&v12 + 1) = v8;
              v7 = 5;
            }
            else
            {
              LOBYTE(v12) = HIBYTE(v8) | 0xE0;
              BYTE1(v12) = BYTE2(v8);
              BYTE2(v12) = BYTE1(v8);
              BYTE3(v12) = v8;
              v7 = 4;
            }
          }
          else
          {
            LOBYTE(v12) = BYTE2(v8) | 0xC0;
            BYTE1(v12) = BYTE1(v8);
            BYTE2(v12) = v8;
            v7 = 3;
          }
        }
        else
        {
          LOBYTE(v12) = BYTE1(v8) | 0x80;
          BYTE1(v12) = v8;
          v7 = 2;
        }
      }
      else
      {
        LOBYTE(v12) = v8;
        v7 = 1;
      }
      v9 = (uint64_t)a1;
      v10 = 24;
    }
    else
    {
      if (strncmp(v4, "deferAttr.", 0xAuLL))
        return;
      v5 = atoi(v4 + 10);
      v6 = a1 + 8;
      os_unfair_lock_lock(a1 + 8);
      v12 = 0u;
      v13 = 0u;
      if (v5 > 0x7F)
      {
        if (v5 >> 14)
        {
          if (v5 >> 21)
          {
            if (v5 >> 28)
            {
              LOBYTE(v12) = -16;
              *(_DWORD *)((char *)&v12 + 1) = v5;
              v7 = 5;
            }
            else
            {
              LOBYTE(v12) = HIBYTE(v5) | 0xE0;
              BYTE1(v12) = BYTE2(v5);
              BYTE2(v12) = BYTE1(v5);
              BYTE3(v12) = v5;
              v7 = 4;
            }
          }
          else
          {
            LOBYTE(v12) = BYTE2(v5) | 0xC0;
            BYTE1(v12) = BYTE1(v5);
            BYTE2(v12) = v5;
            v7 = 3;
          }
        }
        else
        {
          LOBYTE(v12) = BYTE1(v5) | 0x80;
          BYTE1(v12) = v5;
          v7 = 2;
        }
      }
      else
      {
        LOBYTE(v12) = v5;
        v7 = 1;
      }
      v9 = (uint64_t)a1;
      v10 = 52;
    }
    activityJournalWrite(v9, v10, &v12, v7);
    os_unfair_lock_unlock(v6);
  }
}

uint64_t RLEOIDArrayIsEmpty(uint64_t a1)
{
  pthread_rwlock_t *v2;
  uint64_t v3;

  v2 = (pthread_rwlock_t *)(a1 + 16);
  pthread_rwlock_rdlock((pthread_rwlock_t *)(a1 + 16));
  if (*(_BYTE *)(a1 + 384))
    v3 = 1;
  else
    v3 = SIValueSet<unsigned long long>::_SIValueSetInnerEmpty(a1 + 256, *(_DWORD *)(a1 + 224));
  pthread_rwlock_unlock(v2);
  return v3;
}

uint64_t RLEOIDArrayClear(uint64_t a1)
{
  pthread_rwlock_t *v2;
  void **v3;

  v2 = (pthread_rwlock_t *)(a1 + 16);
  pthread_rwlock_wrlock((pthread_rwlock_t *)(a1 + 16));
  *(_BYTE *)(a1 + 384) = 1;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  SIValueSet<unsigned int>::_SIValueSetInnerDealloc((_QWORD *)(a1 + 256), *(const __CFAllocator **)(a1 + 248));
  v3 = *(void ***)(a1 + 232);
  if (v3)
  {
    SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_s::clear(v3, *(const __CFAllocator **)(a1 + 248), *(_QWORD *)(a1 + 240));
    bzero(*(void **)(a1 + 232), 0x1F88uLL);
  }
  *(_QWORD *)(a1 + 240) = 0;
  return pthread_rwlock_unlock(v2);
}

int *PayloadWritePulseHeader(int *result, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char *v8;
  char *v9;
  const char *v10;
  _QWORD *v11;
  int *v12;
  __int128 v13;
  int v14;

  if (a3 && !*((_QWORD *)result + 4))
  {
    v4 = a2[1];
    if ((unint64_t)(v4 - *a2) <= 0x13)
    {
      v8 = __si_assert_copy_extra_268();
      v9 = v8;
      v10 = "";
      if (v8)
        v10 = v8;
      __message_assert("%s:%u: failed assertion '%s' %s ", "JHPayload.c", 274, "pd->payloadIndex - pd->payloadLimit >= sizeof(PulseHeaderDisk)", v10);
      free(v9);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    LODWORD(v13) = -1;
    *(_QWORD *)((char *)&v13 + 4) = a3;
    HIDWORD(v13) = a4;
    v14 = -1;
    v5 = *((_QWORD *)result + 3);
    if (v5 < 21)
    {
      v11 = a2;
      v12 = result;
      _PayloadWriteData_2575(result, a2, (char *)&v13, 20);
      a2 = v11;
      result = v12;
    }
    else
    {
      a2[1] = v4 - 20;
      *((_QWORD *)result + 3) = v5 - 20;
      v6 = *(_QWORD *)result + v5 - 20;
      v7 = v13;
      *(_DWORD *)(v6 + 16) = v14;
      *(_OWORD *)v6 = v7;
    }
    return PayloadWriteBufferWrite(result, a2);
  }
  return result;
}

int *PayloadWriteBufferWrite(int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  BOOL v15;
  int v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  const char *v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)result + 2);
  v3 = *((_QWORD *)result + 3);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if (a2[1] < *a2)
    {
      v23 = __si_assert_copy_extra_268();
      v24 = v23;
      v25 = "";
      if (v23)
        v25 = v23;
      __message_assert("%s:%u: failed assertion '%s' %s ", "JHPayload.c", 253, "pd->payloadIndex >= pd->payloadLimit", v25);
      free(v24);
      if (__valid_fs(-1))
      {
        MEMORY[0xBAD] = -559038737;
        abort();
      }
      MEMORY[0xC00] = -559038737;
      abort();
    }
    v6 = result;
    v7 = _fd_acquire_fd(a2[560], a2 + 562);
    if ((_DWORD)v7 == -1)
    {
      *((_QWORD *)v6 + 4) = *__error();
      v16 = *__error();
      v17 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v18 = *((_QWORD *)v6 + 4);
        *(_DWORD *)buf = 136315650;
        v27 = "PayloadWriteBufferWrite";
        v28 = 1024;
        v29 = 257;
        v30 = 2048;
        v31 = v18;
        _os_log_error_impl(&dword_1B8270000, v17, OS_LOG_TYPE_ERROR, "%s:%d: open error; %ld", buf, 0x1Cu);
      }
      result = __error();
      *result = v16;
    }
    else
    {
      v8 = v7;
      v9 = 0;
      v10 = *(_QWORD *)v6 + *((_QWORD *)v6 + 3);
      for (i = a2[1]; ; i += v12)
      {
        while (1)
        {
          v12 = guarded_pwrite_np();
          if ((v12 & 0x8000000000000000) == 0)
            break;
          v13 = g_prot_error_callback;
          if (g_prot_error_callback)
          {
            v14 = __error();
            if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t))(v13 + 16))(v13, v8, *v14, 5) & 1) != 0)continue;
          }
          goto LABEL_16;
        }
        v9 += v12;
        v15 = v4 > v12;
        v4 -= v12;
        if (!v15)
          break;
        v10 += v12;
      }
      if (v9 != -1)
        goto LABEL_19;
LABEL_16:
      *((_QWORD *)v6 + 4) = *__error();
      v19 = *__error();
      v20 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        v22 = *((_QWORD *)v6 + 4);
        *(_DWORD *)buf = 136315650;
        v27 = "PayloadWriteBufferWrite";
        v28 = 1024;
        v29 = 261;
        v30 = 2048;
        v31 = v22;
        _os_log_error_impl(&dword_1B8270000, v20, OS_LOG_TYPE_ERROR, "%s:%d: pwrite error; %ld", buf, 0x1Cu);
      }
      *__error() = v19;
LABEL_19:
      result = _fd_release_fd((_DWORD *)a2[560], v8, 0, a2[562]);
    }
    if (a2[1] - *a2 >= *((_QWORD *)v6 + 1))
      v21 = *((_QWORD *)v6 + 1);
    else
      v21 = (*((_DWORD *)a2 + 2) - *(_DWORD *)a2);
    *((_QWORD *)v6 + 2) = v21;
    *((_QWORD *)v6 + 3) = v21;
  }
  return result;
}

void *PayloadWriteBufferInit(_QWORD *a1, _DWORD *a2)
{
  void *result;
  uint64_t v5;
  char *v6;
  char *v7;
  const char *v8;

  result = malloc_type_malloc(0x10000uLL, 0x2318F62BuLL);
  *a1 = result;
  if (!result)
  {
    v6 = __si_assert_copy_extra_268();
    v7 = v6;
    v8 = "";
    if (v6)
      v8 = v6;
    __message_assert("%s:%u: failed assertion '%s' %s ", "JHPayload.c", 235, "wb->buffer", v8);
    free(v7);
    if (__valid_fs(-1))
    {
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    MEMORY[0xC00] = -559038737;
    abort();
  }
  if (*((_QWORD *)a2 + 1) - *(_QWORD *)a2 >= 0x10000uLL)
    v5 = 0x10000;
  else
    v5 = (a2[2] - *a2);
  a1[1] = 0x10000;
  a1[2] = v5;
  a1[3] = v5;
  a1[4] = 0;
  return result;
}

uint64_t CopyUTITypeDescriptionDictionary(uint64_t a1, const __CFString *a2)
{
  uint64_t v4;
  int v6;
  const __CFAllocator *v7;
  CFIndex Length;
  CFMutableStringRef MutableCopy;
  CFTypeRef v10;
  CFTypeRef cf;

  pushSkipCrashState();
  v10 = 0;
  cf = 0;
  v4 = _MDBundleUtilsCopyCachedLocalizedDescriptionDictionary();
  if (!v4)
  {
    si_indexingWatchdogSuspend(*(_QWORD *)(a1 + 64));
    v6 = _CopyUTITypeInfo(a2, 0, &cf, (CFURLRef *)&v10);
    si_indexingWatchdogResume(*(_QWORD *)(a1 + 64));
    if (v6)
    {
      v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      Length = CFStringGetLength(a2);
      MutableCopy = CFStringCreateMutableCopy(v7, Length, a2);
      si_indexingWatchdogSuspend(*(_QWORD *)(a1 + 64));
      v4 = _MDBundleUtilsCopyLocalizedDescriptionDictionary();
      si_indexingWatchdogResume(*(_QWORD *)(a1 + 64));
      CFRelease(MutableCopy);
      if (cf)
        CFRelease(cf);
      if (v10)
        CFRelease(v10);
    }
    else
    {
      v4 = 0;
    }
  }
  popSkipCrashState();
  return v4;
}

_QWORD *CIRetainIndexingTokenizer(unsigned int a1)
{
  _QWORD *v2;
  uint64_t v3;
  char *v5;
  char *v6;
  const char *v7;
  uint64_t v8;

  if (a1 >= 4)
  {
    v5 = __si_assert_copy_extra_268();
    v6 = v5;
    v7 = "";
    if (v5)
      v7 = v5;
    __message_assert("%s:%u: failed assertion '%s' %s ", "CITokenizer.c", 254, "version>=0 && version<=kCITokenizerVersionCurrent", v7);
    free(v6);
    if (__valid_fs(-1))
      v8 = 2989;
    else
      v8 = 3072;
    *(_DWORD *)v8 = -559038737;
    abort();
  }
  v2 = OSAtomicDequeue((OSQueueHead *)&gIndexingTokenizerStack + a1, 0);
  if (!v2)
    return CITokenizerCreate(a1);
  v3 = v2[1];
  v2[1] = 0;
  OSAtomicEnqueue(&gIndexingTokenizerHeap, v2, 0);
  return (_QWORD *)v3;
}

void CIReleaseIndexingTokenizer(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char *v4;
  char *v5;
  const char *v6;
  uint64_t v7;

  v1 = *(unsigned int *)(a1 + 40);
  if (v1 >= 4)
  {
    v4 = __si_assert_copy_extra_268();
    v5 = v4;
    v6 = "";
    if (v4)
      v6 = v4;
    __message_assert("%s:%u: failed assertion '%s' %s ", "CITokenizer.c", 288, "version>=0 && version<=kCITokenizerVersionCurrent", v6);
    free(v5);
    if (__valid_fs(-1))
      v7 = 2989;
    else
      v7 = 3072;
    *(_DWORD *)v7 = -559038737;
    abort();
  }
  if (*(_QWORD *)(a1 + 8))
    _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  if (*(_QWORD *)(a1 + 16))
    _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  v3 = OSAtomicDequeue(&gIndexingTokenizerHeap, 0);
  if (!v3)
    v3 = malloc_type_malloc(0x10uLL, 0xA0040BD48D6D6uLL);
  v3[1] = a1;
  OSAtomicEnqueue((OSQueueHead *)&gIndexingTokenizerStack + v1, v3, 0);
}

uint64_t ZSTD_compressSuperBlock(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5, int a6)
{
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unsigned __int16 *v14;
  unsigned int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  char *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  size_t v46;
  int v47;
  char *v48;
  _BOOL4 v49;
  _BYTE *v50;
  int v51;
  size_t v52;
  char *v53;
  uint64_t v54;
  _BYTE *v55;
  unint64_t *v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  int v61;
  int v62;
  _BOOL4 v63;
  BOOL v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  size_t v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v81;
  char *v82;
  unsigned int *v83;
  char *v84;
  unsigned int *v85;
  int v86;
  char *v87;
  unsigned __int16 *__dst;
  unint64_t v89;
  unint64_t v90;
  int v91;
  char *v93;
  uint64_t v94;
  unsigned __int16 *v95;
  unsigned __int16 *v96;
  unsigned __int16 *v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  int v101;
  _BOOL4 v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  unsigned int *v107;
  uint64_t v108;
  unsigned int v109;
  _OWORD v110[8];
  size_t __n[2];
  int v112[4];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  size_t v121[2];
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v122 = 0;
  v120 = 0u;
  *(_OWORD *)v121 = 0u;
  v118 = 0u;
  v119 = 0u;
  v116 = 0u;
  v117 = 0u;
  v114 = 0u;
  v115 = 0u;
  *(_OWORD *)v112 = 0u;
  v113 = 0u;
  *(_OWORD *)__n = 0u;
  memset(v110, 0, sizeof(v110));
  v11 = ZSTD_buildBlockEntropyStats((_QWORD *)(a1 + 824), *(char **)(a1 + 3072), *(void **)(a1 + 3080), (_DWORD *)(a1 + 192), (uint64_t)v110, *(char **)(a1 + 3368), 0x22D8uLL);
  if (v11 <= 0xFFFFFFFFFFFFFF88)
  {
    v12 = 0;
    v13 = 0;
    v14 = *(unsigned __int16 **)(a1 + 3080);
    v84 = a4;
    v81 = (unint64_t)&a4[a5];
    v106 = &a2[a3];
    v102 = LODWORD(v110[0]) == 2;
    v104 = *(_QWORD *)(a1 + 832);
    v96 = v14 + 2144;
    v97 = v14 + 1032;
    __dst = v14;
    v83 = *(unsigned int **)(a1 + 3072);
    v15 = *(unsigned int **)(a1 + 3368);
    v85 = v15;
    v16 = *(_QWORD *)(a1 + 824);
    v107 = *(unsigned int **)(a1 + 840);
    v94 = *(_QWORD *)(a1 + 848);
    v95 = v14 + 1418;
    v99 = *(unsigned __int8 **)(a1 + 864);
    v100 = *(unsigned __int8 **)(a1 + 856);
    v98 = *(unsigned __int8 **)(a1 + 872);
    v103 = *(_QWORD *)(a1 + 248);
    v82 = a2;
    v93 = a2;
    v101 = 1;
    v17 = v16;
    v89 = v16;
    while (1)
    {
      if (v16 == v104)
        goto LABEL_8;
      v18 = v17 + 8 * v13;
      v19 = *(unsigned __int16 *)(v18 + 4);
      if (*(_DWORD *)(a1 + 900) == ((v18 - *(_QWORD *)(a1 + 824)) >> 3) && *(_DWORD *)(a1 + 896) == 1)
        v19 += 0xFFFFLL;
      ++v13;
      if (v18 == v104 - 8)
      {
LABEL_8:
        v12 = v94 - (_QWORD)v107;
        v20 = 1;
      }
      else
      {
        v20 = 0;
        v12 += v19;
      }
      LODWORD(v108) = 255;
      if ((LODWORD(v110[0]) - 2) < 2)
      {
        v21 = v12;
        if ((unint64_t)HIST_count_wksp(v15, (unsigned int *)&v108, v107, v12, (char *)v15, 0x22D8uLL) <= 0xFFFFFFFFFFFFFF88)
        {
          v22 = HUF_estimateCompressedSize((uint64_t)__dst, v15, v108);
          v23 = __n[1];
          if (!v102)
            v23 = 0;
          v21 = v22 + v23 + 3;
        }
      }
      else if (LODWORD(v110[0]))
      {
        v21 = LODWORD(v110[0]) == 1;
      }
      else
      {
        v21 = v12;
      }
      if (v13)
      {
        v24 = v17;
        v25 = ZSTD_estimateSubBlockSize_symbolType(v112[1], v98, 0x1Fu, v13, v97, 0, OF_defaultNorm, 5, 0x1Cu, v15);
        v26 = ZSTD_estimateSubBlockSize_symbolType(v112[0], v100, 0x23u, v13, v96, (uint64_t)&LL_bits, LL_defaultNorm, 6, 0x23u, v15);
        v27 = ZSTD_estimateSubBlockSize_symbolType(v112[2], v99, 0x34u, v13, v95, (uint64_t)&ML_bits, ML_defaultNorm, 6, 0x34u, v15);
        v28 = v121[1];
        if (!v101)
          v28 = 0;
        if (v21 + v25 + v26 + v27 + v28 + 6 > v103)
          v29 = 1;
        else
          v29 = v20;
        if ((v29 & 1) != 0)
        {
          v17 = v24;
          v30 = v24 + 8 * v13;
          v31 = 0;
          if (v13 >= 1)
          {
            v32 = v17 - *(_QWORD *)(a1 + 824);
            v33 = 8 * v13;
            v34 = (unsigned __int16 *)(v17 + 6);
            do
            {
              v36 = *v34;
              v34 += 4;
              v35 = v36;
              v37 = v36 + 3;
              if (*(_DWORD *)(a1 + 900) == (v32 >> 3))
              {
                v38 = v35 + 65538;
                if (*(_DWORD *)(a1 + 896) == 2)
                  v37 = v38;
              }
              v31 += v37;
              v32 += 8;
              v33 -= 8;
            }
            while (v33 > 0);
          }
LABEL_36:
          v90 = v30;
          v105 = v17;
          if (a6)
            v40 = v20;
          else
            v40 = 0;
          v91 = v40;
          v41 = v93 + 3;
          if (v102)
            v42 = 200;
          else
            v42 = 0;
          if (v102)
            v43 = v110[0];
          else
            v43 = 3;
          if (1024 - v42 > v12)
            v44 = 3;
          else
            v44 = 4;
          if (0x4000 - v42 > v12)
            v45 = v44;
          else
            v45 = v44 + 1;
          if (!v12)
          {
LABEL_54:
            v46 = ZSTD_noCompressLiterals(v93 + 3, v106 - v93 - 3, v107, v12);
LABEL_60:
            v11 = v46;
            v47 = 1;
            goto LABEL_61;
          }
          if (LODWORD(v110[0]) == 1)
          {
            v46 = ZSTD_compressRleLiteralsBlock(v93 + 3, v106 - v93 - 3, v107, v12);
            goto LABEL_60;
          }
          if (!LODWORD(v110[0]))
            goto LABEL_54;
          v52 = 0;
          v53 = &v41[v45];
          if (v102 && LODWORD(v110[0]) == 2)
          {
            memcpy(v53, (char *)v110 + 4, __n[1]);
            v52 = __n[1];
            v53 = &v41[v45 + __n[1]];
          }
          v87 = v53;
          if (v45 == 3)
            v54 = HUF_compress1X_usingCTable();
          else
            v54 = HUF_compress4X_usingCTable();
          if ((unint64_t)(v54 - 1) > 0xFFFFFFFFFFFFFF87)
          {
            v16 = v89;
            v15 = v85;
            if (v20)
              goto LABEL_122;
          }
          else
          {
            v66 = v54 + v52;
            if (!v102 && v66 >= v12)
              goto LABEL_111;
            v67 = 3;
            if (v66 > 0x3FF)
              v67 = 4;
            if ((v66 & 0xFFFFFFFFFFFFC000) != 0)
              ++v67;
            if (v45 >= v67)
            {
              switch(v45)
              {
                case 5uLL:
                  *(_DWORD *)(v93 + 3) = v43 + 16 * v12 + ((_DWORD)v66 << 22) + 12;
                  v93[7] = v66 >> 10;
                  break;
                case 4uLL:
                  *(_DWORD *)v41 = v43 + 16 * v12 + ((_DWORD)v66 << 18) + 8;
                  break;
                case 3uLL:
                  v68 = 16 * v12 + v43 + ((_DWORD)v66 << 14);
                  *(_WORD *)(v93 + 3) = v68;
                  v93[5] = BYTE2(v68);
                  break;
              }
              v47 = 0;
              v11 = &v87[v54] - v41;
            }
            else
            {
LABEL_111:
              v11 = ZSTD_noCompressLiterals(v41, v106 - v93 - 3, v107, v12);
              v47 = 1;
            }
            v15 = v85;
LABEL_61:
            if (v11 > 0xFFFFFFFFFFFFFF88)
              return v11;
            if (!v11)
              goto LABEL_99;
            v48 = &v41[v11];
            v49 = *(_DWORD *)(a1 + 196) > 0x39u;
            if (v106 - v48 < 4)
              return -70;
            v86 = v47;
            if ((unint64_t)v13 >= 0x7F)
            {
              if ((unint64_t)v13 >> 8 > 0x7E)
              {
                *v48 = -1;
                *(_WORD *)(v48 + 1) = v13 - 32512;
                v50 = v48 + 3;
              }
              else
              {
                *v48 = BYTE1(v13) ^ 0x80;
                v48[1] = v13;
                v50 = v48 + 2;
              }
            }
            else
            {
              *v48 = v13;
              v50 = v48 + 1;
              if (!v13)
              {
                v51 = 1;
                v11 = 1;
                goto LABEL_86;
              }
            }
            v55 = v50 + 1;
            if (v101)
            {
              *v50 = (LOBYTE(v112[0]) << 6) + 16 * LOBYTE(v112[1]) + 4 * LOBYTE(v112[2]);
              memcpy(v50 + 1, &v112[3], v121[1]);
              v56 = (unint64_t *)&v55[v121[1]];
              v57 = ZSTD_encodeSequences(v56, v106 - (char *)v56, v95, (uint64_t)v99, v97, (uint64_t)v98, v96, (uint64_t)v100, v105, v13, v49);
              v11 = v57;
              if (v57 >= 0xFFFFFFFFFFFFFF89)
                return v11;
              v58 = (char *)v56 + v57;
              if (v122 && v122 + v57 < 4)
                goto LABEL_99;
            }
            else
            {
              *v50 = -4;
              v59 = ZSTD_encodeSequences((unint64_t *)(v50 + 1), v106 - v55, v95, (uint64_t)v99, v97, (uint64_t)v98, v96, (uint64_t)v100, v105, v13, v49);
              v11 = v59;
              if (v59 >= 0xFFFFFFFFFFFFFF89)
                return v11;
              v58 = &v55[v59];
            }
            if (v58 - v50 < 4)
              goto LABEL_99;
            v11 = v58 - v48;
            if ((unint64_t)(v58 - v48) > 0xFFFFFFFFFFFFFF88)
              return v11;
            if (!v11)
            {
LABEL_99:
              v16 = v89;
              goto LABEL_100;
            }
            v51 = 0;
LABEL_86:
            v60 = &v48[v11];
            v11 = &v48[v11] - v93;
            if (v91)
              v61 = -19;
            else
              v61 = -20;
            v62 = v61 + 8 * v11;
            *(_WORD *)v93 = v62;
            v93[2] = BYTE2(v62);
            if (v11 > 0xFFFFFFFFFFFFFF88)
              return v11;
            if (!v11)
              goto LABEL_99;
            v16 = v89;
            if (v11 >= v31 + v12)
            {
LABEL_100:
              v17 = v105;
              if (v20)
                goto LABEL_122;
            }
            else
            {
              v84 += v31 + v12;
              v107 = (unsigned int *)((char *)v107 + v12);
              v100 += v13;
              v99 += v13;
              v98 += v13;
              v63 = v102;
              if (!v86)
                v63 = 0;
              v64 = v51 == 0;
              v65 = v101;
              if (v64)
                v65 = 0;
              v101 = v65;
              v102 = v63;
              v93 = v60;
              v17 = v90;
              v12 = 0;
              v13 = 0;
              if (v20)
              {
LABEL_122:
                if (v102)
                  memcpy(__dst, v83, 0x810uLL);
                if (v101
                  && ((v112[0] - 1) < 2
                   || (v112[2] - 1) < 2
                   || (v112[1] - 3) > 0xFFFFFFFD))
                {
                  return 0;
                }
                if ((unint64_t)v84 < v81)
                {
                  v69 = v81 - (_QWORD)v84;
                  v11 = v81 - (_QWORD)v84 + 3;
                  if (v11 > v106 - v93)
                    return -70;
                  v70 = a6 + 8 * v69;
                  *(_WORD *)v93 = v70;
                  v93[2] = BYTE2(v70);
                  memcpy(v93 + 3, v84, v69);
                  if (v11 > 0xFFFFFFFFFFFFFF88)
                    return v11;
                  v93 += v11;
                  if (v17 < v104)
                  {
                    v108 = *((_QWORD *)v83 + 702);
                    v109 = v83[1406];
                    if (v16 < v17)
                    {
                      v71 = *(_DWORD *)(a1 + 900);
                      v72 = v108;
                      v73 = HIDWORD(v108);
                      v74 = v109;
                      v75 = v16 - *(_QWORD *)(a1 + 824);
                      do
                      {
                        v76 = *(unsigned __int16 *)(v16 + 4);
                        if (v71 == (v75 >> 3) && *(_DWORD *)(a1 + 896) == 1)
                          v76 += 0xFFFF;
                        v77 = *(_DWORD *)v16;
                        if ((*(_DWORD *)v16 - 1) < 3)
                        {
                          if (v76)
                            v79 = *(_DWORD *)v16 - 1;
                          else
                            v79 = *(_DWORD *)v16;
                          if (!v79)
                            goto LABEL_152;
                          if (v79 == 3)
                            v78 = v72 - 1;
                          else
                            v78 = *((_DWORD *)&v108 + v79);
                          if (v79 <= 1)
                            v73 = v74;
                          v109 = v73;
                          HIDWORD(v108) = v72;
                        }
                        else
                        {
                          v109 = v73;
                          HIDWORD(v108) = v72;
                          v78 = v77 - 3;
                        }
                        LODWORD(v108) = v78;
                        v74 = v73;
                        v73 = v72;
                        v72 = v78;
LABEL_152:
                        v75 += 8;
                        v16 += 8;
                      }
                      while (v16 < v17);
                    }
                    *((_QWORD *)__dst + 702) = v108;
                    *((_DWORD *)__dst + 1406) = v109;
                  }
                }
                return v93 - v82;
              }
            }
          }
        }
        else
        {
          v17 = v24;
          if (v20)
            goto LABEL_122;
        }
      }
      else
      {
        v31 = 0;
        if (v21 + 6 > v103)
          v39 = 1;
        else
          v39 = v20;
        v30 = v17;
        if ((v39 & 1) != 0)
          goto LABEL_36;
        v13 = 0;
        if (v20)
          goto LABEL_122;
      }
    }
  }
  return v11;
}

unint64_t ZSTD_estimateSubBlockSize_symbolType(int a1, unsigned __int8 *a2, unsigned int a3, int64_t a4, unsigned __int16 *a5, uint64_t a6, unsigned __int16 *a7, char a8, unsigned int a9, void *a10)
{
  unsigned __int8 *v15;
  unint64_t v17;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned int v21;

  v15 = a2;
  v21 = a3;
  HIST_countFast_wksp(a10, &v21, a2, a4, (char *)a10, 0x22D8uLL);
  if (a1 == 1)
    goto LABEL_9;
  if (!a1)
  {
    if (v21 > a9)
      return 10 * a4;
    v17 = ZSTD_crossEntropyCost(a7, a8, (int *)a10, v21);
    goto LABEL_7;
  }
  if ((a1 & 0xFFFFFFFE) != 2)
  {
LABEL_9:
    v17 = 0;
    goto LABEL_10;
  }
  v17 = ZSTD_fseBitCost(a5, (unsigned int *)a10, v21);
LABEL_7:
  if (v17 > 0xFFFFFFFFFFFFFF88)
    return 10 * a4;
LABEL_10:
  if (a4 >= 1)
  {
    v19 = &v15[a4];
    do
    {
      v20 = v15;
      if (a6)
        v20 = (unsigned __int8 *)(a6 + *v15);
      v17 += *v20;
      ++v15;
    }
    while (v15 < v19);
  }
  return v17 >> 3;
}

_DWORD *ZSTD_ldm_adjustParameters(_DWORD *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  unsigned int v7;

  v2 = *a2;
  result[5] = *a2;
  if (!result[3])
    result[3] = 64;
  v3 = result[1];
  if (!v3)
  {
    v3 = v2 - 7;
    if (v2 - 7 <= 6)
      v3 = 6;
    result[1] = v3;
  }
  v4 = result[2];
  if (!result[4])
  {
    v5 = v2 >= v3;
    v6 = v2 - v3;
    if (!v5)
      v6 = 0;
    result[4] = v6;
  }
  if (v4)
    v7 = v4;
  else
    v7 = 3;
  if (v7 >= v3)
    v7 = v3;
  result[2] = v7;
  return result;
}

uint64_t ZSTD_ldm_getTableSize(_DWORD *a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 >= v2)
    LOBYTE(v1) = a1[1];
  v3 = (1 << (v2 - v1)) + (8 << v2);
  if (*a1 == 1)
    return v3;
  else
    return 0;
}

unint64_t ZSTD_ldm_getMaxNbSeq(_DWORD *a1, unint64_t a2)
{
  if (*a1 == 1)
    return a2 / a1[3];
  else
    return 0;
}

unint64_t ZSTD_ldm_fillHashTable(unint64_t result, unint64_t a2, unint64_t a3, _DWORD *a4)
{
  int v4;
  int v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30[2];

  v4 = a4[1];
  v5 = a4[2];
  v28 = *(_QWORD *)(result + 8);
  v7 = a4[3];
  v6 = a4[4];
  if (v7 >= 0x40)
    v8 = 64;
  else
    v8 = a4[3];
  v9 = v6 - 1;
  v10 = ~(-1 << v6);
  v11 = v8 - v6;
  if (v9 >= v8)
    v11 = 0;
  v30[0] = 0xFFFFFFFFLL;
  v30[1] = v10 << v11;
  if (a2 < a3)
  {
    v12 = a2;
    v13 = result;
    v25 = a3;
    v26 = result + 64;
    v15 = a2 + v7;
    v16 = ~(-1 << (v4 - v5));
    do
    {
      v29 = 0;
      result = ZSTD_ldm_gear_feed(v30, v12, a3 - v12, v26, &v29);
      v27 = result;
      v17 = v29;
      if (v29)
      {
        v18 = (uint64_t *)v26;
        do
        {
          v19 = *v18++;
          v20 = v12 + v19;
          if (v12 + v19 >= v15)
          {
            v21 = v20 - v7;
            result = ZSTD_XXH64((uint64_t *)(v20 - v7), v7, 0);
            v22 = a4[2];
            v23 = *(_QWORD *)(v13 + 56);
            v24 = *(_BYTE *)(v23 + (result & v16));
            *(_QWORD *)(*(_QWORD *)(v13 + 40) + 8 * ((result & v16) << v22) + 8 * v24) = result & 0xFFFFFFFF00000000 | (v21 - v28);
            *(_BYTE *)(v23 + (result & v16)) = (v24 + 1) & ~(-1 << v22);
          }
          --v17;
        }
        while (v17);
      }
      v12 += v27;
      a3 = v25;
    }
    while (v12 < v25);
  }
  return result;
}

unint64_t ZSTD_ldm_gear_feed(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v5 = *a1;
  v6 = a1[1];
  if (a3 < 4)
  {
    v9 = 0;
LABEL_18:
    if (v9 < a3)
    {
      while (1)
      {
        v5 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(a2 + v9)] + 2 * v5;
        v14 = v9 + 1;
        if ((v5 & v6) != 0)
        {
          if (v14 >= a3)
            goto LABEL_27;
        }
        else
        {
          v15 = *a5;
          *(_QWORD *)(a4 + 8 * v15) = v14;
          LODWORD(v15) = v15 + 1;
          *a5 = v15;
          if ((_DWORD)v15 == 64 || v14 >= a3)
          {
LABEL_27:
            ++v9;
            break;
          }
        }
        ++v9;
      }
    }
  }
  else
  {
    v7 = 0;
    v8 = a2 + 1;
    while (1)
    {
      v5 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(a2 + v7)] + 2 * v5;
      if ((v5 & v6) == 0)
      {
        v10 = *a5;
        *(_QWORD *)(a4 + 8 * v10) = v7 + 1;
        *a5 = v10 + 1;
        if ((_DWORD)v10 == 63)
        {
          v9 = v7 + 1;
          goto LABEL_28;
        }
      }
      v5 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(v8 + v7)] + 2 * v5;
      if ((v5 & v6) == 0)
      {
        v11 = *a5;
        *(_QWORD *)(a4 + 8 * v11) = v7 + 2;
        *a5 = v11 + 1;
        if ((_DWORD)v11 == 63)
        {
          v9 = v7 + 2;
          goto LABEL_28;
        }
      }
      v5 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(v8 + v7 + 1)] + 2 * v5;
      if ((v5 & v6) == 0)
      {
        v12 = *a5;
        *(_QWORD *)(a4 + 8 * v12) = v7 + 3;
        *a5 = v12 + 1;
        if ((_DWORD)v12 == 63)
        {
          v9 = v7 + 3;
          goto LABEL_28;
        }
      }
      v5 = ZSTD_ldm_gearTab[*(unsigned __int8 *)(v8 + v7 + 2)] + 2 * v5;
      v9 = v7 + 4;
      if ((v5 & v6) == 0)
      {
        v13 = *a5;
        *(_QWORD *)(a4 + 8 * v13) = v9;
        LODWORD(v13) = v13 + 1;
        *a5 = v13;
        if ((_DWORD)v13 == 64)
          break;
      }
      v7 += 4;
      if (v9 + 3 >= a3)
        goto LABEL_18;
    }
    v9 = v7 + 4;
  }
LABEL_28:
  *a1 = v5;
  return v9;
}

unint64_t ZSTD_ldm_generateSequences(uint32x2_t *a1, _QWORD *a2, _DWORD *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint32x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint32x2_t *v13;
  uint32x2_t *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint32x2_t v18;
  unsigned int v19;
  __int32 v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint32x2_t v24;
  _DWORD *v25;
  int v26;
  unsigned __int32 v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  int v31;
  uint32x2_t v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t result;
  char *v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  char v44;
  char v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v63;
  uint32x2_t v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD *v67;
  uint64_t v68;
  uint32x2_t *v69;
  unsigned __int8 *v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int *v74;
  unint64_t v75;
  int v76;
  unint64_t v77;
  unsigned int *v78;
  unsigned int *v79;
  _QWORD *v80;
  uint64_t v81;
  uint32x2_t v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  _DWORD *v88;
  unint64_t v89;
  char *v90;
  _DWORD *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  BOOL v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unsigned __int8 *v104;
  _DWORD *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  unsigned __int8 *v112;
  uint64_t v113;
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  uint64_t v116;
  _DWORD *v117;
  int v118;
  unint64_t v119;
  char v120;
  uint32x2_t v121;
  unsigned __int8 v122;
  uint32x2_t v123;
  char v124;
  unsigned __int8 v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint32x2_t *v135;
  unint64_t v136;
  int v137;
  uint32x2_t *v138;
  _QWORD *v139;
  uint64_t *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _DWORD *v147;
  unint64_t v148;
  uint64_t v149;
  uint32x2_t *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint32x2_t v155;
  char *v156;
  uint32x2_t v157;
  unsigned int v158;
  unsigned int v159;
  unint64_t v160;
  _QWORD *v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t v164[3];

  if ((a5 & 0xFFFFF) != 0)
    v5 = (a5 >> 20) + 1;
  else
    v5 = a5 >> 20;
  if (!v5)
    return 0;
  v8 = a1;
  v9 = 0;
  v10 = 0;
  v11 = 1 << a3[5];
  v12 = (char *)(a4 + a5);
  v13 = a1 + 8;
  v14 = a1 + 72;
  v15 = a2[3];
  v140 = (uint64_t *)&a1[74];
  v147 = a3;
  while (1)
  {
    if (v15 >= a2[4])
      return 0;
    v16 = (unsigned __int8 *)(a4 + (v10 << 20));
    v17 = (unint64_t)(v12 - (char *)v16) >= 0x100000 ? (uint64_t)(v16 + 0x100000) : (uint64_t)v12;
    v18 = v8[1];
    v19 = v17 - v18.i32[0];
    if ((v17 - v18.i32[0]) > 0xE0000000)
    {
      v21 = 1 << a3[1];
      v22 = (_DWORD)v16 - v18.i32[0] - v11;
      v23 = v22 - 2;
      v24 = (uint32x2_t)(*(_QWORD *)&v8[2] + v23);
      v8[1] = (uint32x2_t)(*(_QWORD *)&v18 + v23);
      v8[2] = v24;
      v8[3] = (uint32x2_t)vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)vdup_n_s32(v22), v8[3]), (int8x8_t)0x200000002, (int8x8_t)vsub_s32((int32x2_t)v8[3], vdup_n_s32(v23)));
      ++v8[4].i32[0];
      v25 = (_DWORD *)v8[5];
      do
      {
        v26 = *v25 - v23;
        if (*v25 < v23)
          v26 = 0;
        *v25 = v26;
        v25 += 2;
        --v21;
      }
      while (v21);
      v20 = 0;
      v8[6].i32[0] = 0;
      v18 = v8[1];
      v19 = v17 - v18.i32[0];
    }
    else
    {
      v20 = v8[6].i32[0];
    }
    v27 = v8[3].u32[1];
    if (v20 + v11 >= v19)
    {
      v29 = v8[3].u32[0];
    }
    else
    {
      v28 = v19 - v11;
      if (v27 < v28)
      {
        v8[3].i32[1] = v28;
        v27 = v28;
      }
      v29 = v8[3].u32[0];
      if (v29 < v27)
      {
        v8[3].i32[0] = v27;
        v29 = v27;
      }
      v8[6].i32[0] = 0;
    }
    v162 = a3[3];
    v31 = a3[1];
    v30 = a3[2];
    if (v27 >= v29)
    {
      v32 = 0;
      v33 = v29;
    }
    else
    {
      v32 = v8[2];
      v33 = v27;
    }
    v34 = v17 - (_QWORD)v16;
    v35 = *(_QWORD *)&v32 + v33;
    if (v27 >= v29)
      v35 = 0;
    v152 = v35;
    v36 = (char *)(*(_QWORD *)&v32 + v29);
    v156 = v36;
    if (v27 >= v29)
      v36 = 0;
    v148 = (unint64_t)v36;
    result = v34;
    if (v34 >= v162)
      break;
LABEL_162:
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    v126 = a2[3];
    if (v15 >= v126)
      result = v34 + v9;
    else
      *(_DWORD *)(*a2 + 12 * v15 + 4) += v9;
    ++v10;
    v15 = v126;
    v9 = result;
    if (v10 == v5)
      return 0;
  }
  v155 = v32;
  v134 = v34;
  v38 = (char *)&v16[v34];
  v39 = (unint64_t)&v16[v34 - 8];
  if (v162 >= 0x40)
    v40 = 64;
  else
    v40 = a3[3];
  v41 = a3[4];
  v42 = v41 - 1;
  v43 = ~(-1 << v41);
  v44 = v40 - v41;
  if (v42 >= v40)
    v45 = 0;
  else
    v45 = v44;
  v164[0] = 0xFFFFFFFFLL;
  v164[1] = v43 << v45;
  v141 = v39;
  if ((unint64_t)&v16[v162] >= v39)
  {
LABEL_161:
    result = v38 - (char *)v16;
    v34 = v134;
    goto LABEL_162;
  }
  v127 = v15;
  v128 = v9;
  v129 = v12;
  v130 = v11;
  v131 = v10;
  v132 = v5;
  v133 = a4;
  v146 = 1 << v30;
  v154 = (unint64_t)(v38 - 3);
  v160 = (unint64_t)v38;
  v153 = (unint64_t)(v38 - 1);
  v145 = *(_QWORD *)&v18 - 1;
  v149 = *(_QWORD *)&v18 + 8;
  v144 = *(_QWORD *)&v18 + 8 + v29;
  v161 = (_QWORD *)(*(_QWORD *)&v18 + v29);
  v46 = v39;
  v47 = (unint64_t)&v16[v162];
  v138 = v14;
  v139 = a2;
  v150 = v8;
  v135 = v13;
  v157 = v18;
  v158 = v29;
  v159 = v33;
  v137 = ~(-1 << (v31 - v30));
  v136 = (unint64_t)(v38 - 7);
  while (2)
  {
    v163 = 0;
    v48 = ZSTD_ldm_gear_feed(v164, v47, v46 - v47, (uint64_t)v13, &v163);
    if (!v163)
    {
      v8 = v150;
      goto LABEL_159;
    }
    v142 = v47;
    v143 = v48;
    v49 = v47 - v162;
    v50 = a3;
    v51 = v140;
    v151 = v163;
    v52 = v163;
    v53 = v162;
    do
    {
      v54 = (uint64_t)*v13++;
      v55 = ZSTD_XXH64((uint64_t *)(v49 + v54), v162, 0);
      v56 = v55 & v137;
      *(v51 - 2) = v49 + v54;
      *((_DWORD *)v51 - 2) = v56;
      *((_DWORD *)v51 - 1) = HIDWORD(v55);
      _X8 = *(_QWORD *)&v150[5] + 8 * (v56 << v50[2]);
      *v51 = _X8;
      v51 += 3;
      __asm { PRFM            #0, [X8] }
      --v52;
    }
    while (v52);
    v63 = 0;
    a3 = v50;
    v8 = v150;
    v14 = v138;
    a2 = v139;
    v64 = v157;
    v65 = v27;
    v66 = v159;
    v67 = v161;
    v68 = v151;
    while (2)
    {
      v69 = &v138[3 * v63];
      v70 = (unsigned __int8 *)*v69;
      v71 = v69[1].u32[0];
      v72 = v69[1].u32[1];
      v73 = *(_QWORD *)v69 - *(_QWORD *)&v64;
      if (*(_QWORD *)v69 < (unint64_t)v16)
        goto LABEL_154;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v77 = 0;
      v78 = (unsigned int *)v138[3 * v63 + 2];
      v79 = &v78[2 * v146];
      v80 = v70 + 8;
      while (2)
      {
        if (v78[1] != v72)
          goto LABEL_147;
        v81 = *v78;
        if (v81 <= v66)
          goto LABEL_147;
        if (v65 < v158)
        {
          if (v81 >= v158)
            v82 = v64;
          else
            v82 = v155;
          v83 = (char *)(*(_QWORD *)&v82 + v81);
          if (v81 >= v158)
            v84 = (char *)v160;
          else
            v84 = v156;
          v85 = (char *)&v70[v84 - v83];
          if ((unint64_t)v85 >= v160)
            v85 = (char *)v160;
          if (v85 - 7 <= (char *)v70)
          {
            v90 = (char *)v70;
            v91 = (_DWORD *)(*(_QWORD *)&v82 + v81);
          }
          else
          {
            v86 = *(_QWORD *)v70 ^ *(_QWORD *)v83;
            if (v86)
            {
              v87 = __clz(__rbit64(v86)) >> 3;
              v64 = v157;
LABEL_96:
              v67 = v161;
              v53 = v162;
LABEL_97:
              if (&v83[v87] != v84)
                goto LABEL_123;
              v99 = (char *)&v70[v87];
              if (v136 <= (unint64_t)&v70[v87])
              {
                v104 = &v70[v87];
                v105 = v67;
              }
              else
              {
                v100 = *(_QWORD *)v99 ^ *v67;
                if (v100)
                {
                  v101 = __clz(__rbit64(v100)) >> 3;
LABEL_121:
                  v67 = v161;
                  v53 = v162;
LABEL_122:
                  v87 += v101;
LABEL_123:
                  if (v87 >= v53)
                  {
                    v93 = 0;
                    if (v81 >= v158)
                      v110 = (unsigned __int8 *)v67;
                    else
                      v110 = (unsigned __int8 *)v152;
                    if (v70 > v16 && v83 > (char *)v110)
                    {
                      v93 = 0;
                      v111 = (unsigned __int8 *)(*(_QWORD *)&v82 + v81 - 1);
                      v112 = v70 - 1;
                      do
                      {
                        if (*v112 != *v111)
                          break;
                        ++v93;
                        if (v112 <= v16)
                          break;
                        --v112;
                        v96 = v111-- > v110;
                      }
                      while (v96);
                    }
                    if (v110 == (unsigned __int8 *)v152 || &v83[-v93] != (char *)v110)
                    {
                      v65 = v27;
                    }
                    else
                    {
                      v113 = 0;
                      v65 = v27;
                      if (v148 > v152 && &v70[-v93] > v16)
                      {
                        v113 = 0;
                        v114 = &v70[-v93 - 1];
                        v115 = (unsigned __int8 *)(v148 - 1);
                        do
                        {
                          if (*v114 != *v115)
                            break;
                          ++v113;
                          if (v114 <= v16)
                            break;
                          --v114;
                          v96 = (unint64_t)v115-- > v152;
                        }
                        while (v96);
                      }
                      v93 += v113;
                    }
                    v67 = v161;
                    v53 = v162;
                    goto LABEL_144;
                  }
                  goto LABEL_146;
                }
                v106 = (char *)v80 + v87;
                while (1)
                {
                  v107 = &v106[v100];
                  if ((unint64_t)&v106[v100] >= v136)
                    break;
                  v108 = *(_QWORD *)(v144 + v100);
                  v100 += 8;
                  v109 = *(_QWORD *)v107 ^ v108;
                  if (v109)
                  {
                    v101 = v100 + (__clz(__rbit64(v109)) >> 3);
                    a3 = v147;
                    v64 = v157;
                    goto LABEL_121;
                  }
                }
                v104 = (unsigned __int8 *)v80 + v87 + v100;
                v105 = (_DWORD *)(v144 + v100);
                a3 = v147;
              }
              if ((unint64_t)v104 < v154 && *v105 == *(_DWORD *)v104)
              {
                v104 += 4;
                ++v105;
              }
              if ((unint64_t)v104 < v153 && *(unsigned __int16 *)v105 == *(unsigned __int16 *)v104)
              {
                v104 += 2;
                v105 = (_DWORD *)((char *)v105 + 2);
              }
              if ((unint64_t)v104 < v160 && *(unsigned __int8 *)v105 == *v104)
                ++v104;
              v64 = v157;
              v67 = v161;
              v53 = v162;
              v101 = v104 - (unsigned __int8 *)v99;
              v65 = v27;
              goto LABEL_122;
            }
            while (1)
            {
              v90 = (char *)v80 + v86;
              if ((char *)v80 + v86 >= v85 - 7)
                break;
              v97 = *(_QWORD *)(*(_QWORD *)&v82 + v81 + 8 + v86);
              v86 += 8;
              v98 = *(_QWORD *)v90 ^ v97;
              if (v98)
              {
                v87 = v86 + (__clz(__rbit64(v98)) >> 3);
                a3 = v147;
                v64 = v157;
                v65 = v27;
                goto LABEL_96;
              }
            }
            v91 = (_DWORD *)(*(_QWORD *)&v82 + v81 + v86 + 8);
            a3 = v147;
          }
          if (v90 < v85 - 3 && *v91 == *(_DWORD *)v90)
          {
            v90 += 4;
            ++v91;
          }
          if (v90 < v85 - 1 && *(unsigned __int16 *)v91 == *(unsigned __int16 *)v90)
          {
            v90 += 2;
            v91 = (_DWORD *)((char *)v91 + 2);
          }
          v64 = v157;
          if (v90 < v85 && *(unsigned __int8 *)v91 == *v90)
            ++v90;
          v67 = v161;
          v53 = v162;
          v87 = v90 - (char *)v70;
          v65 = v27;
          goto LABEL_97;
        }
        v88 = (_DWORD *)(*(_QWORD *)&v64 + v81);
        if (v136 <= (unint64_t)v70)
        {
          v92 = v70;
LABEL_75:
          if ((unint64_t)v92 < v154 && *v88 == *(_DWORD *)v92)
          {
            v92 += 4;
            ++v88;
          }
          if ((unint64_t)v92 < v153 && *(unsigned __int16 *)v88 == *(unsigned __int16 *)v92)
          {
            v92 += 2;
            v88 = (_DWORD *)((char *)v88 + 2);
          }
          if ((unint64_t)v92 < v160 && *(unsigned __int8 *)v88 == *v92)
            ++v92;
          v87 = v92 - v70;
          goto LABEL_85;
        }
        v89 = *(_QWORD *)v70 ^ *(_QWORD *)v88;
        if (!v89)
        {
          while (1)
          {
            v92 = (unsigned __int8 *)v80 + v89;
            if ((unint64_t)v80 + v89 >= v136)
              break;
            v102 = *(_QWORD *)(v149 + v81 + v89);
            v89 += 8;
            v103 = *(_QWORD *)v92 ^ v102;
            if (v103)
            {
              v87 = v89 + (__clz(__rbit64(v103)) >> 3);
              goto LABEL_85;
            }
          }
          v88 = (_DWORD *)(v149 + v81 + v89);
          goto LABEL_75;
        }
        v87 = __clz(__rbit64(v89)) >> 3;
LABEL_85:
        if (v87 >= v53)
        {
          v93 = 0;
          if (v70 > v16 && v81 > v158)
          {
            v93 = 0;
            v94 = (unsigned __int8 *)(v145 + v81);
            v95 = v70 - 1;
            do
            {
              if (*v95 != *v94)
                break;
              ++v93;
              if (v95 <= v16)
                break;
              --v95;
              v96 = v94-- > (unsigned __int8 *)v67;
            }
            while (v96);
          }
LABEL_144:
          if (v93 + v87 > v75)
          {
            v77 = v87;
            v76 = v93;
            v75 = v93 + v87;
            v74 = v78;
          }
LABEL_146:
          v66 = v159;
        }
LABEL_147:
        v78 += 2;
        if (v78 < v79)
          continue;
        break;
      }
      v8 = v150;
      v68 = v151;
      if (!v74)
      {
LABEL_154:
        v123 = v8[7];
        v124 = a3[2];
        v125 = *(_BYTE *)(*(_QWORD *)&v123 + v71);
        *(_QWORD *)(*(_QWORD *)&v8[5] + 8 * (v71 << v124) + 8 * v125) = v73 | ((unint64_t)v72 << 32);
        *(_BYTE *)(*(_QWORD *)&v123 + v71) = (v125 + 1) & ~(-1 << v124);
LABEL_155:
        if (++v63 == v68)
        {
          v13 = v135;
          v46 = v141;
          v47 = v142;
          v48 = v143;
          goto LABEL_159;
        }
        continue;
      }
      break;
    }
    v116 = v139[3];
    if (v116 != v139[4])
    {
      v117 = (_DWORD *)(*v139 + 12 * v116);
      v118 = v73 - *v74;
      v117[1] = (_DWORD)v70 - v76 - (_DWORD)v16;
      v117[2] = v76 + v77;
      *v117 = v118;
      v139[3] = v116 + 1;
      v119 = v73 | ((unint64_t)v72 << 32);
      v120 = a3[2];
      v121 = v150[7];
      v122 = *(_BYTE *)(*(_QWORD *)&v121 + v71);
      *(_QWORD *)(*(_QWORD *)&v150[5] + 8 * (v71 << v120) + 8 * v122) = v119;
      *(_BYTE *)(*(_QWORD *)&v121 + v71) = (v122 + 1) & ~(-1 << v120);
      v16 = &v70[v77];
      if ((unint64_t)&v70[v77] <= v142 + v143)
      {
        v68 = v151;
        goto LABEL_155;
      }
      v48 = v143;
      v47 = (unint64_t)&v16[-v143];
      v13 = v135;
      v46 = v141;
LABEL_159:
      v47 += v48;
      if (v47 >= v46)
      {
        v5 = v132;
        a4 = v133;
        v10 = v131;
        v11 = v130;
        v9 = v128;
        v12 = v129;
        v15 = v127;
        v38 = (char *)v160;
        goto LABEL_161;
      }
      continue;
    }
    return -70;
  }
}

uint64_t *ZSTD_ldm_skipSequences(uint64_t *result, unint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  if (a2)
  {
    v3 = result[3];
    v4 = result[1];
    if (v4 <= v3)
      v5 = result[3];
    else
      v5 = result[1];
    v6 = 12 * v4;
    while (v5 != v4)
    {
      v7 = *result;
      v8 = *result + v6;
      v9 = *(unsigned int *)(v8 + 4);
      v10 = a2 - v9;
      if (a2 <= v9)
      {
        *(_DWORD *)(v8 + 4) = v9 - a2;
        return result;
      }
      *(_DWORD *)(v8 + 4) = 0;
      v11 = *(unsigned int *)(v8 + 8);
      a2 = v10 - v11;
      if (v10 < v11)
      {
        *(_DWORD *)(v7 + v6 + 8) = v11 - v10;
        if ((int)v11 - (int)v10 < a3)
        {
          v12 = v4 + 1;
          if (v12 < v3)
            *(_DWORD *)(v7 + v6 + 16) += v11 - v10;
          result[1] = v12;
        }
        return result;
      }
      *(_DWORD *)(v8 + 8) = 0;
      result[1] = ++v4;
      v6 += 12;
      if (v10 == v11)
        return result;
    }
  }
  return result;
}

uint64_t ZSTD_ldm_skipRawSeqStoreBytes(uint64_t result, int a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;

  v2 = *(_DWORD *)(result + 16) + a2;
  if (!v2)
    goto LABEL_12;
  v3 = *(_QWORD *)(result + 24);
  v4 = *(_QWORD *)(result + 8);
  v5 = v4 <= v3 ? *(_QWORD *)(result + 24) : *(_QWORD *)(result + 8);
  v6 = 12 * v4;
  while (v5 != v4)
  {
    v7 = *(_DWORD *)(*(_QWORD *)result + v6 + 8) + *(_DWORD *)(*(_QWORD *)result + v6 + 4);
    v8 = v2 >= v7;
    v9 = v2 - v7;
    if (!v8)
    {
      *(_QWORD *)(result + 16) = v2;
      break;
    }
    *(_QWORD *)(result + 8) = ++v4;
    v6 += 12;
    v2 = v9;
    if (!v9)
      goto LABEL_12;
  }
  if (v3 == v4)
LABEL_12:
    *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t ZSTD_ldm_blockCompress(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, unint64_t a6, uint64_t a7)
{
  int v13;
  uint64_t v14;
  uint64_t (*v15)();
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  _OWORD *v37;
  _OWORD *v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  _OWORD *v42;
  unint64_t v43;
  __int128 *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t (*v51)();

  if (*(_DWORD *)(a2 + 28) >= *(_DWORD *)(a2 + 24))
  {
    v14 = *(_QWORD *)(a2 + 232);
    if (v14)
    {
      if (*(_DWORD *)(v14 + 124))
        v13 = 3;
      else
        v13 = 2;
    }
    else
    {
      v13 = 0;
    }
  }
  else
  {
    v13 = 1;
  }
  v50 = *(_DWORD *)(a2 + 256);
  v15 = ZSTD_selectBlockCompressor(*(_DWORD *)(a2 + 264), a5, v13);
  if (*(_DWORD *)(a2 + 264) > 6u)
  {
    *(_QWORD *)(a2 + 272) = a1;
    v16 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD *, unint64_t, uint64_t))v15)(a2, a3, a4, a6, a7);
    ZSTD_ldm_skipRawSeqStoreBytes((uint64_t)a1, a7);
    return v16;
  }
  v18 = a6 + a7;
  v19 = a1[1];
  v20 = v19 >= a1[3] || a7 < 1;
  v51 = v15;
  if (!v20)
  {
    v24 = v18 - 32;
    while (1)
    {
      v25 = v18 - a6;
      v26 = *a1 + 12 * v19;
      v27 = *(_QWORD *)v26;
      v28 = HIDWORD(*(_QWORD *)v26);
      v29 = *(_DWORD *)(v26 + 8);
      if (v29 + v28 <= (int)v18 - (int)a6)
      {
        a1[1] = v19 + 1;
        if (!(_DWORD)v27)
          goto LABEL_15;
      }
      else
      {
        if (v25 - v28 >= v50)
          v30 = *(_QWORD *)v26;
        else
          v30 = 0;
        if (v25 <= v28)
        {
          LODWORD(v27) = 0;
        }
        else
        {
          v29 = v25 - v28;
          LODWORD(v27) = v30;
        }
        ZSTD_ldm_skipSequences(a1, (v18 - a6), v50);
        if (!(_DWORD)v27)
          goto LABEL_15;
      }
      v31 = a6 - *(_DWORD *)(a2 + 8);
      v32 = *(_DWORD *)(a2 + 44);
      if (v32 + 1024 < v31)
      {
        v33 = v31 - v32 - 1024;
        if (v33 >= 0x200)
          v33 = 512;
        *(_DWORD *)(a2 + 44) = v31 - v33;
      }
      ZSTD_ldm_fillFastTables(a2, a6);
      v34 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD *, unint64_t, uint64_t))v51)(a2, a3, a4, a6, v28);
      *(_QWORD *)((char *)a4 + 4) = *a4;
      v35 = a6 + v28;
      *(_DWORD *)a4 = v27;
      v36 = (char *)(a6 + v28 - v34);
      v37 = *(_OWORD **)(a3 + 24);
      if (a6 + v28 > v24)
        break;
      *v37 = *(_OWORD *)v36;
      v41 = *(_QWORD *)(a3 + 24);
      if (v34 > 0x10)
      {
        v42 = (_OWORD *)(v41 + 16);
        v43 = v41 + v34;
        v44 = (__int128 *)(a6 + v28 - v34 + 16);
        do
        {
          v45 = *v44++;
          *v42++ = v45;
        }
        while ((unint64_t)v42 < v43);
LABEL_45:
        *(_QWORD *)(a3 + 24) += v34;
        v46 = *(_QWORD *)(a3 + 8);
        if (v34 >= 0x10000)
        {
          v47 = (unint64_t)(v46 - *(_QWORD *)a3) >> 3;
          *(_DWORD *)(a3 + 72) = 1;
          *(_DWORD *)(a3 + 76) = v47;
        }
        goto LABEL_48;
      }
      *(_QWORD *)(a3 + 24) = v41 + v34;
      v46 = *(_QWORD *)(a3 + 8);
LABEL_48:
      *(_WORD *)(v46 + 4) = v34;
      *(_DWORD *)v46 = v27 + 3;
      v48 = v29 - 3;
      if (v48 >= 0x10000)
      {
        v49 = (unint64_t)(v46 - *(_QWORD *)a3) >> 3;
        *(_DWORD *)(a3 + 72) = 2;
        *(_DWORD *)(a3 + 76) = v49;
      }
      *(_WORD *)(v46 + 6) = v48;
      *(_QWORD *)(a3 + 8) = v46 + 8;
      a6 = v35 + v29;
      v19 = a1[1];
      if (v19 >= a1[3] || a6 >= v18)
        goto LABEL_15;
    }
    if ((unint64_t)v36 <= v24)
    {
      v38 = (_OWORD *)((char *)v37 + v24 - (_QWORD)v36);
      do
      {
        v39 = *(_OWORD *)v36;
        v36 += 16;
        *v37++ = v39;
      }
      while (v37 < v38);
      v36 = (char *)(v18 - 32);
      v37 = v38;
    }
    while ((unint64_t)v36 < v35)
    {
      v40 = *v36++;
      *(_BYTE *)v37 = v40;
      v37 = (_OWORD *)((char *)v37 + 1);
    }
    goto LABEL_45;
  }
LABEL_15:
  v21 = a6 - *(_DWORD *)(a2 + 8);
  v22 = *(_DWORD *)(a2 + 44);
  if (v22 + 1024 < v21)
  {
    v23 = v21 - v22 - 1024;
    if (v23 >= 0x200)
      v23 = 512;
    *(_DWORD *)(a2 + 44) = v21 - v23;
  }
  ZSTD_ldm_fillFastTables(a2, a6);
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD *, unint64_t, unint64_t))v51)(a2, a3, a4, a6, v18 - a6);
}

uint64_t ZSTD_ldm_fillFastTables(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 264);
  if (v2 == 2)
    return ZSTD_fillDoubleHashTable(result, a2, 0);
  if (v2 == 1)
    return ZSTD_fillHashTable(result, a2, 0);
  return result;
}

uint64_t ZSTD_DDict_dictContent(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t ZSTD_DDict_dictSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

double ZSTD_copyDDictParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;

  *(_DWORD *)(a1 + 30184) = *(_DWORD *)(a2 + 27316);
  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 29896) = v2;
  *(_QWORD *)(a1 + 29904) = v2;
  v4 = v2 + v3;
  *(_QWORD *)(a1 + 29912) = v4;
  *(_QWORD *)(a1 + 29888) = v4;
  if (*(_DWORD *)(a2 + 27320))
  {
    *(_QWORD *)a1 = a2 + 24;
    *(_QWORD *)(a1 + 8) = a2 + 6184;
    *(_QWORD *)&result = 0x100000001;
    *(_QWORD *)(a1 + 29992) = 0x100000001;
    *(_QWORD *)(a1 + 16) = a2 + 4128;
    *(_QWORD *)(a1 + 24) = a2 + 10288;
    *(_DWORD *)(a1 + 26684) = *(_DWORD *)(a2 + 26676);
    *(_DWORD *)(a1 + 26688) = *(_DWORD *)(a2 + 26680);
    *(_DWORD *)(a1 + 26692) = *(_DWORD *)(a2 + 26684);
  }
  else
  {
    result = 0.0;
    *(_QWORD *)(a1 + 29992) = 0;
  }
  return result;
}

_OWORD *ZSTD_createDDict_advanced(const void *a1, size_t a2, int a3, int a4, _QWORD *a5)
{
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v14;
  uint64_t v15;

  if ((*a5 == 0) != (a5[1] == 0))
    return 0;
  v14 = *(_OWORD *)a5;
  v15 = a5[2];
  v10 = ZSTD_customMalloc(0x6AD8uLL, (uint64_t)&v14);
  v11 = v10;
  if (v10)
  {
    v12 = *(_OWORD *)a5;
    *((_QWORD *)v10 + 3418) = a5[2];
    v10[1708] = v12;
    if ((unint64_t)ZSTD_initDDict_internal((uint64_t)v10, a1, a2, a3, a4) >= 0xFFFFFFFFFFFFFF89)
    {
      ZSTD_freeDDict(v11);
      return 0;
    }
  }
  return v11;
}

uint64_t ZSTD_initDDict_internal(uint64_t a1, const void *a2, size_t size, int a4, int a5)
{
  size_t v6;
  void *v9;
  uint64_t result;
  _DWORD *v11;
  __int128 v12;
  uint64_t v13;

  v6 = size;
  if (a2 && size && a4 != 1)
  {
    v12 = *(_OWORD *)(a1 + 27328);
    v13 = *(_QWORD *)(a1 + 27344);
    v9 = ZSTD_customMalloc(size, (uint64_t)&v12);
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v9;
    if (!v9)
      return -64;
    memcpy(v9, a2, v6);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    if (!a2)
      v6 = 0;
  }
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 10288) = 201326604;
  *(_QWORD *)(a1 + 27316) = 0;
  if (a5 == 1)
    return 0;
  if (v6 <= 7)
  {
    if (a5 != 2)
      return 0;
    return -30;
  }
  v11 = *(_DWORD **)(a1 + 8);
  if (*v11 == -332356553)
  {
    *(_DWORD *)(a1 + 27316) = v11[1];
    if ((unint64_t)ZSTD_loadDEntropy((int *)(a1 + 24), (uint64_t)v11, v6) <= 0xFFFFFFFFFFFFFF88)
    {
      *(_DWORD *)(a1 + 27320) = 1;
      return 0;
    }
    return -30;
  }
  if (a5 == 2)
    result = -30;
  else
    result = 0;
  if (a5 != 2)
    return 0;
  return result;
}

uint64_t ZSTD_freeDDict(_OWORD *a1)
{
  void *v2;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  if (a1)
  {
    v6 = a1[1708];
    v7 = *((_QWORD *)a1 + 3418);
    v2 = *(void **)a1;
    v4 = a1[1708];
    v5 = *((_QWORD *)a1 + 3418);
    ZSTD_customFree(v2, (uint64_t)&v4);
    v4 = v6;
    v5 = v7;
    ZSTD_customFree(a1, (uint64_t)&v4);
  }
  return 0;
}

uint64_t ZSTD_getDictID_fromDDict(uint64_t result)
{
  if (result)
    return ZSTD_getDictID_fromDict(*(_DWORD **)(result + 8), *(_QWORD *)(result + 16));
  return result;
}

uint64_t ZSTD_fillDoubleHashTable(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  char v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(unsigned int *)(result + 44);
  v5 = v3 + v4;
  if (v3 + v4 + 2 <= (unint64_t)(a2 - 8))
  {
    v6 = *(_QWORD *)(result + 96);
    v7 = *(_DWORD *)(result + 244);
    v8 = 64 - v7;
    v9 = 32 - v7;
    v10 = *(_QWORD *)(result + 112);
    v11 = 64 - *(_DWORD *)(result + 248);
    result = (*(_DWORD *)(result + 256) - 5);
    do
    {
      v12 = 0;
      v13 = v3 + v4;
      do
      {
        switch((int)result)
        {
          case 0:
            v14 = *(_QWORD *)(v13 + v12);
            v15 = 0xCF1BBCDCBB000000 * v14;
            goto LABEL_10;
          case 1:
            v14 = *(_QWORD *)(v13 + v12);
            v15 = 0xCF1BBCDCBF9B0000 * v14;
            goto LABEL_10;
          case 2:
            v14 = *(_QWORD *)(v13 + v12);
            v15 = 0xCF1BBCDCBFA56300 * v14;
            goto LABEL_10;
          case 3:
            v14 = *(_QWORD *)(v13 + v12);
            v15 = 0xCF1BBCDCB7A56463 * v14;
LABEL_10:
            v16 = v15 >> v8;
            break;
          default:
            v16 = (-1640531535 * *(_DWORD *)(v13 + v12)) >> v9;
            v14 = *(_QWORD *)(v13 + v12);
            break;
        }
        v17 = (0xCF1BBCDCB7A56463 * v14) >> v11;
        if (v12)
        {
          if (*(_DWORD *)(v6 + 4 * v17))
          {
            if (!a3)
              break;
            continue;
          }
        }
        else
        {
          *(_DWORD *)(v10 + 4 * v16) = v5 - v3;
        }
        *(_DWORD *)(v6 + 4 * v17) = v4 + v12;
        if (!a3)
          break;
      }
      while (v12++ < 2);
      v19 = v5 + 5;
      v5 += 3;
      v4 += 3;
    }
    while (v19 <= a2 - 8);
  }
  return result;
}

uint64_t ZSTD_compressBlock_doubleFast(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  _BOOL4 v11;
  unsigned int v12;
  _BOOL4 v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 *v18;
  _BOOL4 v19;
  int v20;
  unsigned int v21;
  int64_t v22;
  int64_t v23;
  uint64_t v25;
  int v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  char *v48;
  unsigned __int8 *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unint64_t v55;
  _OWORD *v56;
  unsigned __int8 *v57;
  _BYTE *v58;
  uint64_t v59;
  _OWORD *v60;
  unint64_t v61;
  __int128 *v62;
  __int128 v63;
  char *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  _QWORD *v74;
  unint64_t v75;
  unint64_t v76;
  unsigned __int8 *v77;
  __int128 v78;
  unsigned __int8 *v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  __int16 v85;
  unint64_t v86;
  int64_t v87;
  int64_t v88;
  unint64_t v89;
  uint64_t v90;
  int64_t v91;
  uint64_t v92;
  char *v93;
  unsigned __int8 *v94;
  unint64_t v95;
  unint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  BOOL v108;
  char *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unsigned __int8 *v113;
  unsigned __int8 *v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  unint64_t v127;
  _OWORD *v128;
  _OWORD *v129;
  __int128 v130;
  char v131;
  uint64_t v132;
  _OWORD *v133;
  unint64_t v134;
  __int128 *v135;
  __int128 v136;
  unint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  _BOOL4 v147;
  unsigned int v148;
  _BOOL4 v149;
  uint64_t v150;
  unint64_t v151;
  unsigned int v152;
  unsigned int v153;
  _BOOL4 v154;
  int v155;
  unsigned int v156;
  uint64_t v158;
  int v159;
  int v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  int v171;
  unsigned __int8 *v172;
  uint64_t v173;
  char *v177;
  unsigned __int8 *v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  unint64_t v184;
  _OWORD *v185;
  unsigned __int8 *v186;
  _BYTE *v187;
  uint64_t v188;
  _OWORD *v189;
  unint64_t v190;
  __int128 *v191;
  __int128 v192;
  char *v193;
  _QWORD *v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  _QWORD *v199;
  unint64_t v200;
  unint64_t v201;
  char *v202;
  _QWORD *v203;
  unint64_t v204;
  unint64_t v205;
  unsigned __int8 *v206;
  __int128 v207;
  unsigned __int8 *v208;
  uint64_t v209;
  char v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  __int16 v214;
  unint64_t v215;
  int64_t v216;
  int64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  unsigned __int8 *v222;
  unint64_t v223;
  unint64_t v224;
  unsigned __int8 *v225;
  uint64_t v226;
  unint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  unint64_t v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  unsigned __int8 *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  unint64_t v239;
  unsigned __int8 *v240;
  unsigned __int8 *v241;
  unsigned __int8 *v242;
  unsigned __int8 *v243;
  uint64_t v244;
  _QWORD *v245;
  _QWORD *v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  char *v250;
  char *v251;
  uint64_t v252;
  unint64_t v253;
  unsigned __int8 *v254;
  unsigned __int8 *v255;
  unint64_t v256;
  _OWORD *v257;
  _OWORD *v258;
  __int128 v259;
  char v260;
  uint64_t v261;
  _OWORD *v262;
  unint64_t v263;
  __int128 *v264;
  __int128 v265;
  unint64_t v266;
  unint64_t v267;
  _QWORD *v268;
  _QWORD *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  _BOOL4 v276;
  unsigned int v277;
  _BOOL4 v278;
  uint64_t v279;
  unint64_t v280;
  unsigned int v281;
  unsigned int v282;
  _BOOL4 v283;
  int v284;
  unsigned int v285;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  uint64_t v290;
  int v291;
  unsigned int v292;
  unsigned int v293;
  _BOOL4 v294;
  unsigned int v295;
  _BOOL4 v296;
  uint64_t v297;
  unint64_t v298;
  unsigned int v299;
  unsigned int v300;
  _BOOL4 v301;
  int v302;
  unsigned int v303;
  int64_t v304;
  unsigned int v306;
  uint64_t v308;
  int v309;
  int v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  _QWORD *v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  int v321;
  unsigned __int8 *v322;
  uint64_t v323;
  char *v327;
  unsigned __int8 *v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  unsigned __int8 *v332;
  unsigned __int8 *v333;
  unint64_t v334;
  _OWORD *v335;
  unsigned __int8 *v336;
  _BYTE *v337;
  uint64_t v338;
  _OWORD *v339;
  unint64_t v340;
  __int128 *v341;
  __int128 v342;
  char *v343;
  _QWORD *v344;
  unint64_t v345;
  unint64_t v346;
  unint64_t v347;
  char *v348;
  _QWORD *v349;
  unint64_t v350;
  unint64_t v351;
  char *v352;
  _QWORD *v353;
  unint64_t v354;
  unint64_t v355;
  unsigned __int8 *v356;
  __int128 v357;
  unsigned __int8 *v358;
  uint64_t v359;
  char v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  __int16 v364;
  unint64_t v365;
  int64_t v366;
  int64_t v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  char *v371;
  unsigned __int8 *v372;
  unint64_t v373;
  unint64_t v374;
  unsigned __int8 *v375;
  uint64_t v376;
  unint64_t v377;
  char *v378;
  char *v379;
  uint64_t v380;
  unint64_t v381;
  unsigned __int8 *v382;
  unsigned __int8 *v383;
  unsigned __int8 *v384;
  unsigned __int8 *v385;
  char *v386;
  char *v387;
  uint64_t v388;
  unint64_t v389;
  unsigned __int8 *v390;
  unsigned __int8 *v391;
  uint64_t v392;
  _QWORD *v393;
  _QWORD *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  char *v398;
  char *v399;
  uint64_t v400;
  unint64_t v401;
  unsigned __int8 *v402;
  unsigned __int8 *v403;
  unint64_t v404;
  _OWORD *v405;
  _OWORD *v406;
  __int128 v407;
  char v408;
  uint64_t v409;
  _OWORD *v410;
  unint64_t v411;
  __int128 *v412;
  __int128 v413;
  unint64_t v414;
  unint64_t v415;
  _QWORD *v416;
  _QWORD *v417;
  uint64_t v418;
  unint64_t v419;
  uint64_t v420;
  int v421;
  int v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  unint64_t v430;
  unsigned int v431;
  uint64_t v432;
  int v433;
  unsigned __int8 *v434;
  uint64_t v435;
  char *v439;
  unsigned __int8 *v440;
  unint64_t v441;
  unint64_t v442;
  unsigned __int8 *v443;
  unsigned __int8 *v444;
  unint64_t v445;
  _OWORD *v446;
  unsigned __int8 *v447;
  _BYTE *v448;
  uint64_t v449;
  _OWORD *v450;
  unint64_t v451;
  __int128 *v452;
  __int128 v453;
  char *v454;
  _QWORD *v455;
  unint64_t v456;
  unint64_t v457;
  unint64_t v458;
  char *v459;
  _QWORD *v460;
  unint64_t v461;
  unint64_t v462;
  char *v463;
  _QWORD *v464;
  unint64_t v465;
  unint64_t v466;
  unsigned __int8 *v467;
  __int128 v468;
  uint64_t v469;
  char v470;
  uint64_t v471;
  unint64_t v472;
  unint64_t v473;
  __int16 v474;
  unint64_t v475;
  int64_t v476;
  int64_t v477;
  unint64_t v478;
  uint64_t v479;
  char *v480;
  unsigned __int8 *v481;
  unint64_t v482;
  unint64_t v483;
  unsigned __int8 *v484;
  unint64_t v485;
  char *v486;
  char *v487;
  uint64_t v488;
  unint64_t v489;
  unsigned __int8 *v490;
  unsigned __int8 *v491;
  unsigned __int8 *v492;
  unsigned __int8 *v493;
  char *v494;
  char *v495;
  uint64_t v496;
  unint64_t v497;
  unsigned __int8 *v498;
  unsigned __int8 *v499;
  uint64_t v500;
  _QWORD *v501;
  _QWORD *v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  char *v506;
  char *v507;
  uint64_t v508;
  unint64_t v509;
  unsigned __int8 *v510;
  unsigned __int8 *v511;
  unint64_t v512;
  _OWORD *v513;
  _OWORD *v514;
  __int128 v515;
  char v516;
  uint64_t v517;
  _OWORD *v518;
  unint64_t v519;
  __int128 *v520;
  __int128 v521;
  unint64_t v522;
  unint64_t v523;
  _QWORD *v524;
  _QWORD *v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  unint64_t v540;
  unint64_t v541;
  unint64_t v542;
  unint64_t v543;
  unint64_t v544;
  unint64_t v545;
  unint64_t v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  unsigned int v550;
  unint64_t v551;
  unsigned int v552;
  unsigned int v553;
  unsigned int v554;
  unsigned int v555;
  unsigned int v556;
  unint64_t v557;
  unint64_t v558;
  unint64_t v559;
  unint64_t v560;

  v5 = *(_DWORD *)(a1 + 256);
  switch(v5)
  {
    case 5:
      v143 = *(_QWORD *)(a1 + 8);
      v7 = &a4[a5];
      v144 = (_DWORD)a4 + a5 - v143;
      v145 = 1 << *(_DWORD *)(a1 + 240);
      v146 = *(_DWORD *)(a1 + 24);
      v147 = v144 - v146 > v145;
      v148 = v144 - v145;
      v149 = *(_DWORD *)(a1 + 40) == 0;
      if (v149 && v147)
        v150 = v148;
      else
        v150 = v146;
      v151 = (unint64_t)(v7 - 8);
      v153 = *a3;
      v152 = a3[1];
      v541 = v143 + v150;
      if ((unsigned __int8 *)(v143 + v150) == a4)
        v18 = a4 + 1;
      else
        v18 = a4;
      v154 = (_DWORD)v18 - (_DWORD)v143 - v146 > v145;
      v155 = (_DWORD)v18 - v143 - v145;
      if (!v149 || !v154)
        v155 = *(_DWORD *)(a1 + 24);
      v156 = (_DWORD)v18 - v143 - v155;
      v552 = v156;
      v554 = v152;
      if (v152 <= v156)
        v22 = v152;
      else
        v22 = 0;
      v556 = v153;
      if (v153 <= v156)
        v23 = v153;
      else
        v23 = 0;
      _X26 = v18 + 1;
      if ((unint64_t)(v18 + 1) <= v151)
      {
        v158 = *(_QWORD *)(a1 + 96);
        v159 = 64 - *(_DWORD *)(a1 + 248);
        v160 = 64 - *(_DWORD *)(a1 + 244);
        v161 = (unint64_t)(v7 - 7);
        v545 = (unint64_t)(v7 - 1);
        v549 = (unint64_t)(v7 - 3);
        v162 = *(_QWORD *)(a1 + 112);
        v533 = v143 + 12;
        v537 = v143 - 1;
        v529 = v143 + 16;
        while (1)
        {
          v163 = (unint64_t)(v18 + 256);
          v164 = *(_QWORD *)v18;
          v165 = (0xCF1BBCDCB7A56463 * *(_QWORD *)v18) >> v159;
          v166 = *(unsigned int *)(v158 + 4 * v165);
          v167 = (_QWORD *)(v143 + v166);
          v168 = 1;
          while (1)
          {
            v169 = (0xCF1BBCDCBB000000 * v164) >> v160;
            v170 = *(unsigned int *)(v162 + 4 * v169);
            v171 = (_DWORD)v18 - v143;
            *(_DWORD *)(v162 + 4 * v169) = (_DWORD)v18 - v143;
            *(_DWORD *)(v158 + 4 * v165) = (_DWORD)v18 - v143;
            if ((_DWORD)v23)
            {
              v172 = v18 + 1;
              if (*(_DWORD *)&v18[-v23 + 1] == *(_DWORD *)(v18 + 1))
              {
                v177 = (char *)(v18 + 5);
                v178 = &v18[-v23 + 5];
                if (v161 <= (unint64_t)(v18 + 5))
                {
                  v183 = v18 + 5;
                  v181 = (unint64_t)(v7 - 3);
                  v182 = v7 - 32;
                }
                else
                {
                  v179 = *(_QWORD *)v177 ^ *(_QWORD *)v178;
                  if (v179)
                  {
                    v180 = __clz(__rbit64(v179)) >> 3;
                    v181 = (unint64_t)(v7 - 3);
                    v182 = v7 - 32;
                    goto LABEL_243;
                  }
                  v236 = (char *)(v18 + 13);
                  v181 = (unint64_t)(v7 - 3);
                  v182 = v7 - 32;
                  while (1)
                  {
                    v237 = &v236[v179];
                    if ((unint64_t)&v236[v179] >= v161)
                      break;
                    v238 = *(_QWORD *)&v18[v179 + 13 - v23];
                    v179 += 8;
                    v239 = *(_QWORD *)v237 ^ v238;
                    v182 = v7 - 32;
                    if (v239)
                    {
                      v180 = v179 + (__clz(__rbit64(v239)) >> 3);
                      goto LABEL_243;
                    }
                  }
                  v183 = &v18[v179 + 13];
                  v178 = &v183[-v23];
                }
                if ((unint64_t)v183 < v181 && *(_DWORD *)v178 == *(_DWORD *)v183)
                {
                  v183 += 4;
                  v178 += 4;
                }
                if ((unint64_t)v183 < v545 && *(unsigned __int16 *)v178 == *(unsigned __int16 *)v183)
                {
                  v183 += 2;
                  v178 += 2;
                }
                if (v183 < v7 && *v178 == *v183)
                  ++v183;
                v180 = v183 - (unsigned __int8 *)v177;
LABEL_243:
                v184 = v172 - a4;
                v185 = *(_OWORD **)(a2 + 24);
                if (v172 <= v182)
                {
                  *v185 = *(_OWORD *)a4;
                  v188 = *(_QWORD *)(a2 + 24);
                  if (v184 > 0x10)
                  {
                    v189 = (_OWORD *)(v188 + 16);
                    v190 = v188 + v184;
                    v191 = (__int128 *)(a4 + 16);
                    do
                    {
                      v192 = *v191++;
                      *v189++ = v192;
                    }
                    while ((unint64_t)v189 < v190);
                    goto LABEL_270;
                  }
                  *(_QWORD *)(a2 + 24) = v188 + v184;
                  v211 = *(_QWORD *)(a2 + 8);
                }
                else
                {
                  if (a4 <= v182)
                  {
                    v187 = (char *)v185 + v182 - a4;
                    v206 = a4;
                    do
                    {
                      v207 = *(_OWORD *)v206;
                      v206 += 16;
                      *v185++ = v207;
                    }
                    while (v185 < (_OWORD *)v187);
                    v186 = v182;
                  }
                  else
                  {
                    v186 = a4;
                    v187 = *(_BYTE **)(a2 + 24);
                  }
                  if (v186 < v172)
                  {
                    if (a4 <= v182)
                      v208 = v182;
                    else
                      v208 = a4;
                    v209 = v18 - v208 + 1;
                    do
                    {
                      v210 = *v186++;
                      *v187++ = v210;
                      --v209;
                    }
                    while (v209);
                  }
LABEL_270:
                  *(_QWORD *)(a2 + 24) += v184;
                  v211 = *(_QWORD *)(a2 + 8);
                  if (v184 >= 0x10000)
                  {
                    v212 = (unint64_t)(v211 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v212;
                  }
                }
                v213 = v180 + 4;
                *(_WORD *)(v211 + 4) = v184;
                *(_DWORD *)v211 = 1;
                v214 = v180 + 1;
                v215 = (v180 + 1) >> 16;
                v216 = v23;
                v217 = v23;
                if (!v215)
                  goto LABEL_275;
LABEL_274:
                v218 = (unint64_t)(v211 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v218;
                v217 = v216;
                goto LABEL_275;
              }
            }
            v165 = (0xCF1BBCDCB7A56463 * *(_QWORD *)_X26) >> v159;
            if (v166 > v150 && *v167 == v164)
              break;
            v166 = *(unsigned int *)(v158 + 4 * v165);
            v167 = (_QWORD *)(v143 + v166);
            if (v170 > v150)
            {
              v173 = v143 + v170;
              if (*(_DWORD *)(v143 + v170) == *(_DWORD *)v18)
              {
                if (v166 > v150 && *v167 == *(_QWORD *)_X26)
                {
                  v198 = (char *)(_X26 + 8);
                  v199 = v167 + 1;
                  if (v161 <= (unint64_t)(_X26 + 8))
                  {
                    v254 = _X26 + 8;
                  }
                  else
                  {
                    v200 = *(_QWORD *)v198 ^ *v199;
                    if (v200)
                    {
                      v201 = __clz(__rbit64(v200)) >> 3;
                      goto LABEL_370;
                    }
                    v267 = 0;
                    v268 = _X26 + 16;
                    while (1)
                    {
                      v269 = &v268[v267 / 8];
                      if ((unint64_t)&v268[v267 / 8] >= v161)
                        break;
                      v270 = *(_QWORD *)(v529 + v166 + v267);
                      v267 += 8;
                      v271 = *v269 ^ v270;
                      if (v271)
                      {
                        v201 = v267 + (__clz(__rbit64(v271)) >> 3);
                        goto LABEL_370;
                      }
                    }
                    v254 = &_X26[v267 + 16];
                    v199 = (_QWORD *)(v529 + v166 + v267);
                  }
                  if ((unint64_t)v254 < v549 && *(_DWORD *)v199 == *(_DWORD *)v254)
                  {
                    v254 += 4;
                    v199 = (_QWORD *)((char *)v199 + 4);
                  }
                  if ((unint64_t)v254 < v545 && *(unsigned __int16 *)v199 == *(unsigned __int16 *)v254)
                  {
                    v254 += 2;
                    v199 = (_QWORD *)((char *)v199 + 2);
                  }
                  if (v254 < v7 && *(unsigned __int8 *)v199 == *v254)
                    ++v254;
                  v201 = v254 - (unsigned __int8 *)v198;
LABEL_370:
                  v213 = v201 + 8;
                  v216 = _X26 - (unsigned __int8 *)v167;
                  if (_X26 <= a4)
                  {
                    v172 = _X26;
                  }
                  else
                  {
                    v233 = _X26 - 1;
                    v255 = (unsigned __int8 *)(v537 + v166);
                    while (*v233 == *v255)
                    {
                      ++v213;
                      v235 = v233 - 1;
                      if (v233 > a4)
                      {
                        --v233;
                        v108 = (unint64_t)v255-- > v541;
                        if (v108)
                          continue;
                      }
                      goto LABEL_325;
                    }
LABEL_376:
                    v172 = v233 + 1;
                  }
                  goto LABEL_378;
                }
                v202 = (char *)(v18 + 4);
                v203 = (_QWORD *)(v173 + 4);
                if (v161 <= (unint64_t)(v18 + 4))
                {
                  v240 = v18 + 4;
                  v182 = v7 - 32;
                }
                else
                {
                  v204 = *(_QWORD *)v202 ^ *v203;
                  v182 = v7 - 32;
                  if (v204)
                  {
                    v205 = __clz(__rbit64(v204)) >> 3;
LABEL_342:
                    v213 = v205 + 4;
                    v216 = (int64_t)&v18[-v173];
                    if (v18 <= a4)
                    {
                      v172 = v18;
                    }
                    else
                    {
                      v241 = v18 - 1;
                      v242 = (unsigned __int8 *)(v537 + v170);
                      while (*v241 == *v242)
                      {
                        ++v213;
                        v243 = v241 - 1;
                        if (v241 > a4)
                        {
                          --v241;
                          v108 = (unint64_t)v242-- > v541;
                          if (v108)
                            continue;
                        }
                        v172 = v243 + 1;
                        goto LABEL_379;
                      }
                      v172 = v241 + 1;
                    }
                    goto LABEL_379;
                  }
                  v249 = 0;
                  v250 = (char *)(v18 + 12);
                  while (1)
                  {
                    v251 = &v250[v249];
                    if ((unint64_t)&v250[v249] >= v161)
                      break;
                    v252 = *(_QWORD *)(v533 + v170 + v249);
                    v249 += 8;
                    v253 = *(_QWORD *)v251 ^ v252;
                    v182 = v7 - 32;
                    if (v253)
                    {
                      v205 = v249 + (__clz(__rbit64(v253)) >> 3);
                      goto LABEL_342;
                    }
                  }
                  v240 = &v18[v249 + 12];
                  v203 = (_QWORD *)(v533 + v170 + v249);
                }
                if ((unint64_t)v240 < v549 && *(_DWORD *)v203 == *(_DWORD *)v240)
                {
                  v240 += 4;
                  v203 = (_QWORD *)((char *)v203 + 4);
                }
                if ((unint64_t)v240 < v545 && *(unsigned __int16 *)v203 == *(unsigned __int16 *)v240)
                {
                  v240 += 2;
                  v203 = (_QWORD *)((char *)v203 + 2);
                }
                if (v240 < v7 && *(unsigned __int8 *)v203 == *v240)
                  ++v240;
                v205 = v240 - (unsigned __int8 *)v202;
                goto LABEL_342;
              }
            }
            if ((unint64_t)_X26 >= v163)
            {
              __asm
              {
                PRFM            #0, [X26,#0x40]
                PRFM            #0, [X26,#0x80]
              }
              ++v168;
              v163 += 256;
            }
            __asm { PRFM            #0, [X26,#0x100] }
            v18 = _X26;
            v164 = *(_QWORD *)_X26;
            _X26 += v168;
            if ((unint64_t)_X26 > v151)
              goto LABEL_418;
          }
          v193 = (char *)(v18 + 8);
          v194 = v167 + 1;
          if (v161 <= (unint64_t)(v18 + 8))
          {
            v232 = v18 + 8;
            v196 = v143 + v150;
            goto LABEL_309;
          }
          v195 = *(_QWORD *)v193 ^ *v194;
          v196 = v143 + v150;
          if (v195)
          {
            v197 = __clz(__rbit64(v195)) >> 3;
            goto LABEL_319;
          }
          v244 = 0;
          v245 = v18 + 16;
          while (2)
          {
            v246 = &v245[v244];
            if ((unint64_t)&v245[v244] >= v161)
            {
              v232 = &v18[v244 * 8 + 16];
              v194 = &v167[v244 + 2];
LABEL_309:
              if ((unint64_t)v232 < v549 && *(_DWORD *)v194 == *(_DWORD *)v232)
              {
                v232 += 4;
                v194 = (_QWORD *)((char *)v194 + 4);
              }
              if ((unint64_t)v232 < v545 && *(unsigned __int16 *)v194 == *(unsigned __int16 *)v232)
              {
                v232 += 2;
                v194 = (_QWORD *)((char *)v194 + 2);
              }
              if (v232 < v7 && *(unsigned __int8 *)v194 == *v232)
                ++v232;
              v197 = v232 - (unsigned __int8 *)v193;
              goto LABEL_319;
            }
            v247 = v167[v244 + 2];
            ++v244;
            v248 = *v246 ^ v247;
            if (!v248)
              continue;
            break;
          }
          v197 = v244 * 8 + (__clz(__rbit64(v248)) >> 3);
LABEL_319:
          v213 = v197 + 8;
          v216 = v18 - (unsigned __int8 *)v167;
          if ((unint64_t)v167 <= v196 || v18 <= a4)
          {
            v172 = v18;
          }
          else
          {
            v233 = v18 - 1;
            v234 = (unsigned __int8 *)v167 - 1;
            do
            {
              if (*v233 != *v234)
                goto LABEL_376;
              ++v213;
              v235 = v233 - 1;
              if (v233 <= a4)
                break;
              --v233;
              v108 = (unint64_t)v234-- > v196;
            }
            while (v108);
LABEL_325:
            v172 = v235 + 1;
          }
LABEL_378:
          v182 = v7 - 32;
LABEL_379:
          if (v168 <= 3)
            *(_DWORD *)(v158 + 4 * v165) = (_DWORD)_X26 - v143;
          v256 = v172 - a4;
          v257 = *(_OWORD **)(a2 + 24);
          v181 = (unint64_t)(v7 - 3);
          if (v172 <= v182)
          {
            *v257 = *(_OWORD *)a4;
            v261 = *(_QWORD *)(a2 + 24);
            if (v256 > 0x10)
            {
              v262 = (_OWORD *)(v261 + 16);
              v263 = v261 + v256;
              v264 = (__int128 *)(a4 + 16);
              do
              {
                v265 = *v264++;
                *v262++ = v265;
              }
              while ((unint64_t)v262 < v263);
              goto LABEL_391;
            }
            *(_QWORD *)(a2 + 24) = v261 + v256;
            v211 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (a4 <= v182)
            {
              v258 = (_OWORD *)((char *)v257 + v182 - a4);
              do
              {
                v259 = *(_OWORD *)a4;
                a4 += 16;
                *v257++ = v259;
              }
              while (v257 < v258);
              a4 = v182;
              v257 = v258;
            }
            while (a4 < v172)
            {
              v260 = *a4++;
              *(_BYTE *)v257 = v260;
              v257 = (_OWORD *)((char *)v257 + 1);
            }
LABEL_391:
            *(_QWORD *)(a2 + 24) += v256;
            v211 = *(_QWORD *)(a2 + 8);
            if (v256 >= 0x10000)
            {
              v266 = (unint64_t)(v211 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v266;
            }
          }
          *(_WORD *)(v211 + 4) = v256;
          *(_DWORD *)v211 = v216 + 3;
          v214 = v213 - 3;
          v22 = v23;
          v217 = v216;
          if (v213 - 3 >= 0x10000)
            goto LABEL_274;
LABEL_275:
          *(_WORD *)(v211 + 6) = v214;
          v219 = v211 + 8;
          *(_QWORD *)(a2 + 8) = v211 + 8;
          v18 = &v172[v213];
          if ((unint64_t)&v172[v213] <= v151)
          {
            v220 = *(_QWORD *)(v143 + (v171 + 2));
            *(_DWORD *)(v158 + 4 * ((0xCF1BBCDCB7A56463 * v220) >> v159)) = v171 + 2;
            *(_DWORD *)(v158 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v18 - 2)) >> v159)) = (_DWORD)v18 - 2 - v143;
            *(_DWORD *)(v162 + 4 * ((0xCF1BBCDCBB000000 * v220) >> v160)) = v171 + 2;
            *(_DWORD *)(v162 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v18 - 1)) >> v160)) = (_DWORD)v18 - 1 - v143;
            while (1)
            {
              v91 = v217;
              v217 = v22;
              if (!(_DWORD)v22 || *(_DWORD *)v18 != *(_DWORD *)&v18[-v22])
                break;
              v221 = (char *)(v18 + 4);
              v222 = &v18[-v22 + 4];
              if (v161 <= (unint64_t)(v18 + 4))
              {
                v225 = v18 + 4;
              }
              else
              {
                v223 = *(_QWORD *)v221 ^ *(_QWORD *)v222;
                if (v223)
                {
                  v224 = __clz(__rbit64(v223)) >> 3;
                  goto LABEL_294;
                }
                v228 = (char *)(v18 + 12);
                while (1)
                {
                  v229 = &v228[v223];
                  if ((unint64_t)&v228[v223] >= v161)
                    break;
                  v230 = *(_QWORD *)&v18[v223 + 12 - v22];
                  v223 += 8;
                  v231 = *(_QWORD *)v229 ^ v230;
                  if (v231)
                  {
                    v224 = v223 + (__clz(__rbit64(v231)) >> 3);
                    v182 = v7 - 32;
                    goto LABEL_294;
                  }
                }
                v225 = &v18[v223 + 12];
                v222 = &v225[-v22];
                v182 = v7 - 32;
              }
              if ((unint64_t)v225 < v181 && *(_DWORD *)v222 == *(_DWORD *)v225)
              {
                v225 += 4;
                v222 += 4;
              }
              if ((unint64_t)v225 < v545 && *(unsigned __int16 *)v222 == *(unsigned __int16 *)v225)
              {
                v225 += 2;
                v222 += 2;
              }
              if (v225 < v7 && *v222 == *v225)
                ++v225;
              v224 = v225 - (unsigned __int8 *)v221;
LABEL_294:
              v226 = *(_QWORD *)v18;
              *(_DWORD *)(v162 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v18) >> v160)) = (_DWORD)v18 - v143;
              *(_DWORD *)(v158 + 4 * ((0xCF1BBCDCB7A56463 * v226) >> v159)) = (_DWORD)v18 - v143;
              if (v18 <= v182)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v18;
                v219 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v219 + 4) = 0;
              *(_DWORD *)v219 = 1;
              if (v224 + 1 >= 0x10000)
              {
                v227 = (unint64_t)(v219 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v227;
              }
              *(_WORD *)(v219 + 6) = v224 + 1;
              v219 += 8;
              *(_QWORD *)(a2 + 8) = v219;
              v18 += v224 + 4;
              v22 = v91;
              v23 = v217;
              if ((unint64_t)v18 > v151)
                goto LABEL_306;
            }
            v23 = v91;
            v91 = v22;
          }
          else
          {
            v23 = v217;
            v91 = v22;
          }
LABEL_306:
          _X26 = v18 + 1;
          a4 = v18;
          v22 = v91;
          if ((unint64_t)(v18 + 1) > v151)
            goto LABEL_419;
        }
      }
LABEL_418:
      LODWORD(v91) = v22;
      v18 = a4;
      goto LABEL_419;
    case 6:
      v272 = *(_QWORD *)(a1 + 8);
      v7 = &a4[a5];
      v273 = (_DWORD)a4 + a5 - v272;
      v274 = 1 << *(_DWORD *)(a1 + 240);
      v275 = *(_DWORD *)(a1 + 24);
      v276 = v273 - v275 > v274;
      v277 = v273 - v274;
      v278 = *(_DWORD *)(a1 + 40) == 0;
      if (v278 && v276)
        v279 = v277;
      else
        v279 = v275;
      v280 = (unint64_t)(v7 - 8);
      v282 = *a3;
      v281 = a3[1];
      v542 = v272 + v279;
      if ((unsigned __int8 *)(v272 + v279) == a4)
        v18 = a4 + 1;
      else
        v18 = a4;
      v283 = (_DWORD)v18 - (_DWORD)v272 - v275 > v274;
      v284 = (_DWORD)v18 - v272 - v274;
      if (!v278 || !v283)
        v284 = *(_DWORD *)(a1 + 24);
      v285 = (_DWORD)v18 - v272 - v284;
      v552 = v285;
      v554 = v281;
      if (v281 <= v285)
        v22 = v281;
      else
        v22 = 0;
      v556 = v282;
      if (v282 <= v285)
        v23 = v282;
      else
        v23 = 0;
      _X26 = v18 + 1;
      if ((unint64_t)(v18 + 1) <= v280)
      {
        v308 = *(_QWORD *)(a1 + 96);
        v309 = 64 - *(_DWORD *)(a1 + 248);
        v310 = 64 - *(_DWORD *)(a1 + 244);
        v311 = (unint64_t)(v7 - 7);
        v551 = (unint64_t)(v7 - 3);
        v312 = *(_QWORD *)(a1 + 112);
        v534 = v272 + 12;
        v538 = v272 - 1;
        v530 = v272 + 16;
        v546 = (unint64_t)(v7 - 1);
        v559 = (unint64_t)(v7 - 32);
        while (1)
        {
          v313 = (unint64_t)(v18 + 256);
          v314 = *(_QWORD *)v18;
          v315 = (0xCF1BBCDCB7A56463 * *(_QWORD *)v18) >> v309;
          v316 = *(unsigned int *)(v308 + 4 * v315);
          v317 = (_QWORD *)(v272 + v316);
          v318 = 1;
          while (1)
          {
            v319 = (0xCF1BBCDCBF9B0000 * v314) >> v310;
            v320 = *(unsigned int *)(v312 + 4 * v319);
            v321 = (_DWORD)v18 - v272;
            *(_DWORD *)(v312 + 4 * v319) = (_DWORD)v18 - v272;
            *(_DWORD *)(v308 + 4 * v315) = (_DWORD)v18 - v272;
            if ((_DWORD)v23)
            {
              v322 = v18 + 1;
              if (*(_DWORD *)&v18[-v23 + 1] == *(_DWORD *)(v18 + 1))
              {
                v327 = (char *)(v18 + 5);
                v328 = &v18[-v23 + 5];
                if (v311 <= (unint64_t)(v18 + 5))
                {
                  v333 = v18 + 5;
                  v331 = (unint64_t)(v7 - 3);
                  v332 = v7 - 32;
                }
                else
                {
                  v329 = *(_QWORD *)v327 ^ *(_QWORD *)v328;
                  if (v329)
                  {
                    v330 = __clz(__rbit64(v329)) >> 3;
                    v331 = (unint64_t)(v7 - 3);
                    v332 = v7 - 32;
                    goto LABEL_474;
                  }
                  v386 = (char *)(v18 + 13);
                  v331 = (unint64_t)(v7 - 3);
                  v332 = v7 - 32;
                  while (1)
                  {
                    v387 = &v386[v329];
                    if ((unint64_t)&v386[v329] >= v311)
                      break;
                    v388 = *(_QWORD *)&v18[v329 + 13 - v23];
                    v329 += 8;
                    v389 = *(_QWORD *)v387 ^ v388;
                    if (v389)
                    {
                      v330 = v329 + (__clz(__rbit64(v389)) >> 3);
                      goto LABEL_474;
                    }
                  }
                  v333 = &v18[v329 + 13];
                  v328 = &v333[-v23];
                }
                if ((unint64_t)v333 < v331 && *(_DWORD *)v328 == *(_DWORD *)v333)
                {
                  v333 += 4;
                  v328 += 4;
                }
                if ((unint64_t)v333 < v546 && *(unsigned __int16 *)v328 == *(unsigned __int16 *)v333)
                {
                  v333 += 2;
                  v328 += 2;
                }
                if (v333 < v7 && *v328 == *v333)
                  ++v333;
                v330 = v333 - (unsigned __int8 *)v327;
LABEL_474:
                v334 = v322 - a4;
                v335 = *(_OWORD **)(a2 + 24);
                if (v322 <= v332)
                {
                  *v335 = *(_OWORD *)a4;
                  v338 = *(_QWORD *)(a2 + 24);
                  if (v334 > 0x10)
                  {
                    v339 = (_OWORD *)(v338 + 16);
                    v340 = v338 + v334;
                    v341 = (__int128 *)(a4 + 16);
                    do
                    {
                      v342 = *v341++;
                      *v339++ = v342;
                    }
                    while ((unint64_t)v339 < v340);
                    goto LABEL_501;
                  }
                  *(_QWORD *)(a2 + 24) = v338 + v334;
                  v361 = *(_QWORD *)(a2 + 8);
                }
                else
                {
                  if (a4 <= v332)
                  {
                    v337 = (char *)v335 + v332 - a4;
                    v356 = a4;
                    do
                    {
                      v357 = *(_OWORD *)v356;
                      v356 += 16;
                      *v335++ = v357;
                    }
                    while (v335 < (_OWORD *)v337);
                    v336 = v332;
                  }
                  else
                  {
                    v336 = a4;
                    v337 = *(_BYTE **)(a2 + 24);
                  }
                  if (v336 < v322)
                  {
                    if (a4 <= v332)
                      v358 = v332;
                    else
                      v358 = a4;
                    v359 = v18 - v358 + 1;
                    do
                    {
                      v360 = *v336++;
                      *v337++ = v360;
                      --v359;
                    }
                    while (v359);
                  }
LABEL_501:
                  *(_QWORD *)(a2 + 24) += v334;
                  v361 = *(_QWORD *)(a2 + 8);
                  if (v334 >= 0x10000)
                  {
                    v362 = (unint64_t)(v361 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v362;
                  }
                }
                v363 = v330 + 4;
                *(_WORD *)(v361 + 4) = v334;
                *(_DWORD *)v361 = 1;
                v364 = v330 + 1;
                v365 = (v330 + 1) >> 16;
                v366 = v23;
                v367 = v23;
                if (!v365)
                  goto LABEL_506;
LABEL_505:
                v368 = (unint64_t)(v361 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v368;
                v367 = v366;
                goto LABEL_506;
              }
            }
            v315 = (0xCF1BBCDCB7A56463 * *(_QWORD *)_X26) >> v309;
            if (v316 > v279 && *v317 == v314)
              break;
            v316 = *(unsigned int *)(v308 + 4 * v315);
            v317 = (_QWORD *)(v272 + v316);
            if (v320 > v279)
            {
              v323 = v272 + v320;
              if (*(_DWORD *)(v272 + v320) == *(_DWORD *)v18)
              {
                if (v316 > v279 && *v317 == *(_QWORD *)_X26)
                {
                  v348 = (char *)(_X26 + 8);
                  v349 = v317 + 1;
                  if (v311 <= (unint64_t)(_X26 + 8))
                  {
                    v402 = _X26 + 8;
                  }
                  else
                  {
                    v350 = *(_QWORD *)v348 ^ *v349;
                    if (v350)
                    {
                      v351 = __clz(__rbit64(v350)) >> 3;
                      goto LABEL_599;
                    }
                    v415 = 0;
                    v416 = _X26 + 16;
                    while (1)
                    {
                      v417 = &v416[v415 / 8];
                      if ((unint64_t)&v416[v415 / 8] >= v311)
                        break;
                      v418 = *(_QWORD *)(v530 + v316 + v415);
                      v415 += 8;
                      v419 = *v417 ^ v418;
                      if (v419)
                      {
                        v351 = v415 + (__clz(__rbit64(v419)) >> 3);
                        goto LABEL_599;
                      }
                    }
                    v402 = &_X26[v415 + 16];
                    v349 = (_QWORD *)(v530 + v316 + v415);
                  }
                  if ((unint64_t)v402 < v551 && *(_DWORD *)v349 == *(_DWORD *)v402)
                  {
                    v402 += 4;
                    v349 = (_QWORD *)((char *)v349 + 4);
                  }
                  if ((unint64_t)v402 < v546 && *(unsigned __int16 *)v349 == *(unsigned __int16 *)v402)
                  {
                    v402 += 2;
                    v349 = (_QWORD *)((char *)v349 + 2);
                  }
                  if (v402 < v7 && *(unsigned __int8 *)v349 == *v402)
                    ++v402;
                  v351 = v402 - (unsigned __int8 *)v348;
LABEL_599:
                  v363 = v351 + 8;
                  v366 = _X26 - (unsigned __int8 *)v317;
                  if (_X26 <= a4)
                  {
                    v322 = _X26;
                    goto LABEL_606;
                  }
                  v385 = _X26 - 1;
                  v403 = (unsigned __int8 *)(v538 + v316);
                  while (*v385 == *v403)
                  {
                    ++v363;
                    v383 = v385 - 1;
                    if (v385 > a4)
                    {
                      --v385;
                      v108 = (unint64_t)v403-- > v542;
                      if (v108)
                        continue;
                    }
                    goto LABEL_604;
                  }
                }
                else
                {
                  v352 = (char *)(v18 + 4);
                  v353 = (_QWORD *)(v323 + 4);
                  if (v311 <= (unint64_t)(v18 + 4))
                  {
                    v390 = v18 + 4;
                  }
                  else
                  {
                    v354 = *(_QWORD *)v352 ^ *v353;
                    if (v354)
                    {
                      v355 = __clz(__rbit64(v354)) >> 3;
                      goto LABEL_572;
                    }
                    v397 = 0;
                    v398 = (char *)(v18 + 12);
                    while (1)
                    {
                      v399 = &v398[v397];
                      if ((unint64_t)&v398[v397] >= v311)
                        break;
                      v400 = *(_QWORD *)(v534 + v320 + v397);
                      v397 += 8;
                      v401 = *(_QWORD *)v399 ^ v400;
                      if (v401)
                      {
                        v355 = v397 + (__clz(__rbit64(v401)) >> 3);
                        goto LABEL_572;
                      }
                    }
                    v390 = &v18[v397 + 12];
                    v353 = (_QWORD *)(v534 + v320 + v397);
                  }
                  if ((unint64_t)v390 < v551 && *(_DWORD *)v353 == *(_DWORD *)v390)
                  {
                    v390 += 4;
                    v353 = (_QWORD *)((char *)v353 + 4);
                  }
                  if ((unint64_t)v390 < v546 && *(unsigned __int16 *)v353 == *(unsigned __int16 *)v390)
                  {
                    v390 += 2;
                    v353 = (_QWORD *)((char *)v353 + 2);
                  }
                  if (v390 < v7 && *(unsigned __int8 *)v353 == *v390)
                    ++v390;
                  v355 = v390 - (unsigned __int8 *)v352;
LABEL_572:
                  v363 = v355 + 4;
                  v366 = (int64_t)&v18[-v323];
                  if (v18 <= a4)
                  {
LABEL_578:
                    v322 = v18;
                    goto LABEL_606;
                  }
                  v385 = v18 - 1;
                  v391 = (unsigned __int8 *)(v538 + v320);
                  while (*v385 == *v391)
                  {
                    ++v363;
                    v383 = v385 - 1;
                    if (v385 > a4)
                    {
                      --v385;
                      v108 = (unint64_t)v391-- > v542;
                      if (v108)
                        continue;
                    }
                    goto LABEL_604;
                  }
                }
LABEL_556:
                v322 = v385 + 1;
                goto LABEL_606;
              }
            }
            if ((unint64_t)_X26 >= v313)
            {
              __asm
              {
                PRFM            #0, [X26,#0x40]
                PRFM            #0, [X26,#0x80]
              }
              ++v318;
              v313 += 256;
            }
            __asm { PRFM            #0, [X26,#0x100] }
            v18 = _X26;
            v314 = *(_QWORD *)_X26;
            _X26 += v318;
            if ((unint64_t)_X26 > v280)
              goto LABEL_418;
          }
          v343 = (char *)(v18 + 8);
          v344 = v317 + 1;
          if (v311 <= (unint64_t)(v18 + 8))
          {
            v382 = v18 + 8;
            v346 = v272 + v279;
          }
          else
          {
            v345 = *(_QWORD *)v343 ^ *v344;
            v346 = v272 + v279;
            if (v345)
            {
              v347 = __clz(__rbit64(v345)) >> 3;
              goto LABEL_550;
            }
            v392 = 0;
            v393 = v18 + 16;
            while (1)
            {
              v394 = &v393[v392];
              if ((unint64_t)&v393[v392] >= v311)
                break;
              v395 = v317[v392 + 2];
              ++v392;
              v396 = *v394 ^ v395;
              if (v396)
              {
                v347 = v392 * 8 + (__clz(__rbit64(v396)) >> 3);
                goto LABEL_550;
              }
            }
            v382 = &v18[v392 * 8 + 16];
            v344 = &v317[v392 + 2];
          }
          if ((unint64_t)v382 < v551 && *(_DWORD *)v344 == *(_DWORD *)v382)
          {
            v382 += 4;
            v344 = (_QWORD *)((char *)v344 + 4);
          }
          if ((unint64_t)v382 < v546 && *(unsigned __int16 *)v344 == *(unsigned __int16 *)v382)
          {
            v382 += 2;
            v344 = (_QWORD *)((char *)v344 + 2);
          }
          if (v382 < v7 && *(unsigned __int8 *)v344 == *v382)
            ++v382;
          v347 = v382 - (unsigned __int8 *)v343;
LABEL_550:
          v363 = v347 + 8;
          v366 = v18 - (unsigned __int8 *)v317;
          if ((unint64_t)v317 <= v346 || v18 <= a4)
            goto LABEL_578;
          v383 = v18 - 1;
          v384 = (unsigned __int8 *)v317 - 1;
          while (*v383 == *v384)
          {
            ++v363;
            v385 = v383 - 1;
            if (v383 > a4)
            {
              --v383;
              v108 = (unint64_t)v384-- > v346;
              if (v108)
                continue;
            }
            goto LABEL_556;
          }
LABEL_604:
          v322 = v383 + 1;
LABEL_606:
          if (v318 <= 3)
            *(_DWORD *)(v308 + 4 * v315) = (_DWORD)_X26 - v272;
          v404 = v322 - a4;
          v405 = *(_OWORD **)(a2 + 24);
          v332 = v7 - 32;
          if ((unint64_t)v322 <= v559)
          {
            *v405 = *(_OWORD *)a4;
            v409 = *(_QWORD *)(a2 + 24);
            if (v404 > 0x10)
            {
              v410 = (_OWORD *)(v409 + 16);
              v411 = v409 + v404;
              v412 = (__int128 *)(a4 + 16);
              v331 = (unint64_t)(v7 - 3);
              do
              {
                v413 = *v412++;
                *v410++ = v413;
              }
              while ((unint64_t)v410 < v411);
              goto LABEL_619;
            }
            *(_QWORD *)(a2 + 24) = v409 + v404;
            v361 = *(_QWORD *)(a2 + 8);
            v331 = (unint64_t)(v7 - 3);
          }
          else
          {
            if ((unint64_t)a4 <= v559)
            {
              v406 = (_OWORD *)((char *)v405 + v559 - (_QWORD)a4);
              do
              {
                v407 = *(_OWORD *)a4;
                a4 += 16;
                *v405++ = v407;
              }
              while (v405 < v406);
              a4 = v7 - 32;
              v405 = v406;
            }
            v331 = (unint64_t)(v7 - 3);
            while (a4 < v322)
            {
              v408 = *a4++;
              *(_BYTE *)v405 = v408;
              v405 = (_OWORD *)((char *)v405 + 1);
            }
LABEL_619:
            *(_QWORD *)(a2 + 24) += v404;
            v361 = *(_QWORD *)(a2 + 8);
            if (v404 >= 0x10000)
            {
              v414 = (unint64_t)(v361 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v414;
            }
          }
          *(_WORD *)(v361 + 4) = v404;
          *(_DWORD *)v361 = v366 + 3;
          v364 = v363 - 3;
          v22 = v23;
          v367 = v366;
          if (v363 - 3 >= 0x10000)
            goto LABEL_505;
LABEL_506:
          *(_WORD *)(v361 + 6) = v364;
          v369 = v361 + 8;
          *(_QWORD *)(a2 + 8) = v361 + 8;
          v18 = &v322[v363];
          if ((unint64_t)&v322[v363] <= v280)
          {
            v370 = *(_QWORD *)(v272 + (v321 + 2));
            *(_DWORD *)(v308 + 4 * ((0xCF1BBCDCB7A56463 * v370) >> v309)) = v321 + 2;
            *(_DWORD *)(v308 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v18 - 2)) >> v309)) = (_DWORD)v18 - 2 - v272;
            *(_DWORD *)(v312 + 4 * ((0xCF1BBCDCBF9B0000 * v370) >> v310)) = v321 + 2;
            *(_DWORD *)(v312 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v18 - 1)) >> v310)) = (_DWORD)v18 - 1 - v272;
            while (1)
            {
              v91 = v367;
              v367 = v22;
              if (!(_DWORD)v22 || *(_DWORD *)v18 != *(_DWORD *)&v18[-v22])
                break;
              v371 = (char *)(v18 + 4);
              v372 = &v18[-v22 + 4];
              if (v311 <= (unint64_t)(v18 + 4))
              {
                v375 = v18 + 4;
              }
              else
              {
                v373 = *(_QWORD *)v371 ^ *(_QWORD *)v372;
                if (v373)
                {
                  v374 = __clz(__rbit64(v373)) >> 3;
                  goto LABEL_525;
                }
                v378 = (char *)(v18 + 12);
                while (1)
                {
                  v379 = &v378[v373];
                  if ((unint64_t)&v378[v373] >= v311)
                    break;
                  v380 = *(_QWORD *)&v18[v373 + 12 - v22];
                  v373 += 8;
                  v381 = *(_QWORD *)v379 ^ v380;
                  if (v381)
                  {
                    v374 = v373 + (__clz(__rbit64(v381)) >> 3);
                    v332 = v7 - 32;
                    goto LABEL_525;
                  }
                }
                v375 = &v18[v373 + 12];
                v372 = &v375[-v22];
                v332 = v7 - 32;
              }
              if ((unint64_t)v375 < v331 && *(_DWORD *)v372 == *(_DWORD *)v375)
              {
                v375 += 4;
                v372 += 4;
              }
              if ((unint64_t)v375 < v546 && *(unsigned __int16 *)v372 == *(unsigned __int16 *)v375)
              {
                v375 += 2;
                v372 += 2;
              }
              if (v375 < v7 && *v372 == *v375)
                ++v375;
              v374 = v375 - (unsigned __int8 *)v371;
LABEL_525:
              v376 = *(_QWORD *)v18;
              *(_DWORD *)(v312 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v18) >> v310)) = (_DWORD)v18 - v272;
              *(_DWORD *)(v308 + 4 * ((0xCF1BBCDCB7A56463 * v376) >> v309)) = (_DWORD)v18 - v272;
              if (v18 <= v332)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v18;
                v369 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v369 + 4) = 0;
              *(_DWORD *)v369 = 1;
              if (v374 + 1 >= 0x10000)
              {
                v377 = (unint64_t)(v369 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v377;
              }
              *(_WORD *)(v369 + 6) = v374 + 1;
              v369 += 8;
              *(_QWORD *)(a2 + 8) = v369;
              v18 += v374 + 4;
              v22 = v91;
              v23 = v367;
              if ((unint64_t)v18 > v280)
                goto LABEL_537;
            }
            v23 = v91;
            v91 = v22;
          }
          else
          {
            v23 = v367;
            v91 = v22;
          }
LABEL_537:
          _X26 = v18 + 1;
          a4 = v18;
          v22 = v91;
          if ((unint64_t)(v18 + 1) > v280)
            goto LABEL_419;
        }
      }
      goto LABEL_418;
    case 7:
      v6 = *(_QWORD *)(a1 + 8);
      v7 = &a4[a5];
      v8 = (_DWORD)a4 + a5 - v6;
      v9 = 1 << *(_DWORD *)(a1 + 240);
      v10 = *(_DWORD *)(a1 + 24);
      v11 = v8 - v10 > v9;
      v12 = v8 - v9;
      v13 = *(_DWORD *)(a1 + 40) == 0;
      if (v13 && v11)
        v14 = v12;
      else
        v14 = v10;
      v15 = (unint64_t)(v7 - 8);
      v17 = *a3;
      v16 = a3[1];
      v540 = v6 + v14;
      if ((unsigned __int8 *)(v6 + v14) == a4)
        v18 = a4 + 1;
      else
        v18 = a4;
      v19 = (_DWORD)v18 - (_DWORD)v6 - v10 > v9;
      v20 = (_DWORD)v18 - v6 - v9;
      if (!v13 || !v19)
        v20 = *(_DWORD *)(a1 + 24);
      v21 = (_DWORD)v18 - v6 - v20;
      v552 = v21;
      v554 = v16;
      if (v16 <= v21)
        v22 = v16;
      else
        v22 = 0;
      v556 = v17;
      if (v17 <= v21)
        v23 = v17;
      else
        v23 = 0;
      _X26 = v18 + 1;
      if ((unint64_t)(v18 + 1) <= v15)
      {
        v25 = *(_QWORD *)(a1 + 96);
        v26 = 64 - *(_DWORD *)(a1 + 248);
        v27 = 64 - *(_DWORD *)(a1 + 244);
        v28 = (unint64_t)(v7 - 7);
        v548 = (unint64_t)(v7 - 3);
        v29 = *(_QWORD *)(a1 + 112);
        v532 = v6 + 12;
        v536 = v6 - 1;
        v528 = v6 + 16;
        v544 = (unint64_t)(v7 - 1);
        v558 = (unint64_t)(v7 - 32);
        while (1)
        {
          v30 = (unint64_t)(v18 + 256);
          v31 = *(_QWORD *)v18;
          v32 = (0xCF1BBCDCB7A56463 * *(_QWORD *)v18) >> v26;
          v33 = *(unsigned int *)(v25 + 4 * v32);
          v34 = (_QWORD *)(v6 + v33);
          v35 = 1;
          while (1)
          {
            v36 = (0xCF1BBCDCBFA56300 * v31) >> v27;
            v37 = *(unsigned int *)(v29 + 4 * v36);
            v38 = (_DWORD)v18 - v6;
            *(_DWORD *)(v29 + 4 * v36) = (_DWORD)v18 - v6;
            *(_DWORD *)(v25 + 4 * v32) = (_DWORD)v18 - v6;
            if ((_DWORD)v23)
            {
              v39 = v18 + 1;
              if (*(_DWORD *)&v18[-v23 + 1] == *(_DWORD *)(v18 + 1))
              {
                v48 = (char *)(v18 + 5);
                v49 = &v18[-v23 + 5];
                if (v28 <= (unint64_t)(v18 + 5))
                {
                  v54 = v18 + 5;
                  v52 = (unint64_t)(v7 - 3);
                  v53 = v7 - 32;
                }
                else
                {
                  v50 = *(_QWORD *)v48 ^ *(_QWORD *)v49;
                  if (v50)
                  {
                    v51 = __clz(__rbit64(v50)) >> 3;
                    v52 = (unint64_t)(v7 - 3);
                    v53 = v7 - 32;
                    goto LABEL_45;
                  }
                  v109 = (char *)(v18 + 13);
                  v52 = (unint64_t)(v7 - 3);
                  v53 = v7 - 32;
                  while (1)
                  {
                    v110 = &v109[v50];
                    if ((unint64_t)&v109[v50] >= v28)
                      break;
                    v111 = *(_QWORD *)&v18[v50 + 13 - v23];
                    v50 += 8;
                    v112 = *(_QWORD *)v110 ^ v111;
                    if (v112)
                    {
                      v51 = v50 + (__clz(__rbit64(v112)) >> 3);
                      goto LABEL_45;
                    }
                  }
                  v54 = &v18[v50 + 13];
                  v49 = &v54[-v23];
                }
                if ((unint64_t)v54 < v52 && *(_DWORD *)v49 == *(_DWORD *)v54)
                {
                  v54 += 4;
                  v49 += 4;
                }
                if ((unint64_t)v54 < v544 && *(unsigned __int16 *)v49 == *(unsigned __int16 *)v54)
                {
                  v54 += 2;
                  v49 += 2;
                }
                if (v54 < v7 && *v49 == *v54)
                  ++v54;
                v51 = v54 - (unsigned __int8 *)v48;
LABEL_45:
                v55 = v39 - a4;
                v56 = *(_OWORD **)(a2 + 24);
                if (v39 <= v53)
                {
                  *v56 = *(_OWORD *)a4;
                  v59 = *(_QWORD *)(a2 + 24);
                  if (v55 > 0x10)
                  {
                    v60 = (_OWORD *)(v59 + 16);
                    v61 = v59 + v55;
                    v62 = (__int128 *)(a4 + 16);
                    do
                    {
                      v63 = *v62++;
                      *v60++ = v63;
                    }
                    while ((unint64_t)v60 < v61);
                    goto LABEL_72;
                  }
                  *(_QWORD *)(a2 + 24) = v59 + v55;
                  v82 = *(_QWORD *)(a2 + 8);
                }
                else
                {
                  if (a4 <= v53)
                  {
                    v58 = (char *)v56 + v53 - a4;
                    v77 = a4;
                    do
                    {
                      v78 = *(_OWORD *)v77;
                      v77 += 16;
                      *v56++ = v78;
                    }
                    while (v56 < (_OWORD *)v58);
                    v57 = v53;
                  }
                  else
                  {
                    v57 = a4;
                    v58 = *(_BYTE **)(a2 + 24);
                  }
                  if (v57 < v39)
                  {
                    if (a4 <= v53)
                      v79 = v53;
                    else
                      v79 = a4;
                    v80 = v18 - v79 + 1;
                    do
                    {
                      v81 = *v57++;
                      *v58++ = v81;
                      --v80;
                    }
                    while (v80);
                  }
LABEL_72:
                  *(_QWORD *)(a2 + 24) += v55;
                  v82 = *(_QWORD *)(a2 + 8);
                  if (v55 >= 0x10000)
                  {
                    v83 = (unint64_t)(v82 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v83;
                  }
                }
                v84 = v51 + 4;
                *(_WORD *)(v82 + 4) = v55;
                *(_DWORD *)v82 = 1;
                v85 = v51 + 1;
                v86 = (v51 + 1) >> 16;
                v87 = v23;
                v88 = v23;
                if (!v86)
                  goto LABEL_77;
LABEL_76:
                v89 = (unint64_t)(v82 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v89;
                v88 = v87;
                goto LABEL_77;
              }
            }
            v32 = (0xCF1BBCDCB7A56463 * *(_QWORD *)_X26) >> v26;
            if (v33 > v14 && *v34 == v31)
              break;
            v33 = *(unsigned int *)(v25 + 4 * v32);
            v34 = (_QWORD *)(v6 + v33);
            if (v37 > v14)
            {
              v40 = v6 + v37;
              if (*(_DWORD *)(v6 + v37) == *(_DWORD *)v18)
              {
                if (v33 > v14 && *v34 == *(_QWORD *)_X26)
                {
                  v69 = (char *)(_X26 + 8);
                  v70 = v34 + 1;
                  if (v28 <= (unint64_t)(_X26 + 8))
                  {
                    v125 = _X26 + 8;
                  }
                  else
                  {
                    v71 = *(_QWORD *)v69 ^ *v70;
                    if (v71)
                    {
                      v72 = __clz(__rbit64(v71)) >> 3;
                      goto LABEL_170;
                    }
                    v138 = 0;
                    v139 = _X26 + 16;
                    while (1)
                    {
                      v140 = &v139[v138 / 8];
                      if ((unint64_t)&v139[v138 / 8] >= v28)
                        break;
                      v141 = *(_QWORD *)(v528 + v33 + v138);
                      v138 += 8;
                      v142 = *v140 ^ v141;
                      if (v142)
                      {
                        v72 = v138 + (__clz(__rbit64(v142)) >> 3);
                        goto LABEL_170;
                      }
                    }
                    v125 = &_X26[v138 + 16];
                    v70 = (_QWORD *)(v528 + v33 + v138);
                  }
                  if ((unint64_t)v125 < v548 && *(_DWORD *)v70 == *(_DWORD *)v125)
                  {
                    v125 += 4;
                    v70 = (_QWORD *)((char *)v70 + 4);
                  }
                  if ((unint64_t)v125 < v544 && *(unsigned __int16 *)v70 == *(unsigned __int16 *)v125)
                  {
                    v125 += 2;
                    v70 = (_QWORD *)((char *)v70 + 2);
                  }
                  if (v125 < v7 && *(unsigned __int8 *)v70 == *v125)
                    ++v125;
                  v72 = v125 - (unsigned __int8 *)v69;
LABEL_170:
                  v84 = v72 + 8;
                  v87 = _X26 - (unsigned __int8 *)v34;
                  if (_X26 <= a4)
                  {
                    v39 = _X26;
                    goto LABEL_177;
                  }
                  v107 = _X26 - 1;
                  v126 = (unsigned __int8 *)(v536 + v33);
                  while (*v107 == *v126)
                  {
                    ++v84;
                    v105 = v107 - 1;
                    if (v107 > a4)
                    {
                      --v107;
                      v108 = (unint64_t)v126-- > v540;
                      if (v108)
                        continue;
                    }
                    goto LABEL_175;
                  }
                }
                else
                {
                  v73 = (char *)(v18 + 4);
                  v74 = (_QWORD *)(v40 + 4);
                  if (v28 <= (unint64_t)(v18 + 4))
                  {
                    v113 = v18 + 4;
                  }
                  else
                  {
                    v75 = *(_QWORD *)v73 ^ *v74;
                    if (v75)
                    {
                      v76 = __clz(__rbit64(v75)) >> 3;
                      goto LABEL_143;
                    }
                    v120 = 0;
                    v121 = (char *)(v18 + 12);
                    while (1)
                    {
                      v122 = &v121[v120];
                      if ((unint64_t)&v121[v120] >= v28)
                        break;
                      v123 = *(_QWORD *)(v532 + v37 + v120);
                      v120 += 8;
                      v124 = *(_QWORD *)v122 ^ v123;
                      if (v124)
                      {
                        v76 = v120 + (__clz(__rbit64(v124)) >> 3);
                        goto LABEL_143;
                      }
                    }
                    v113 = &v18[v120 + 12];
                    v74 = (_QWORD *)(v532 + v37 + v120);
                  }
                  if ((unint64_t)v113 < v548 && *(_DWORD *)v74 == *(_DWORD *)v113)
                  {
                    v113 += 4;
                    v74 = (_QWORD *)((char *)v74 + 4);
                  }
                  if ((unint64_t)v113 < v544 && *(unsigned __int16 *)v74 == *(unsigned __int16 *)v113)
                  {
                    v113 += 2;
                    v74 = (_QWORD *)((char *)v74 + 2);
                  }
                  if (v113 < v7 && *(unsigned __int8 *)v74 == *v113)
                    ++v113;
                  v76 = v113 - (unsigned __int8 *)v73;
LABEL_143:
                  v84 = v76 + 4;
                  v87 = (int64_t)&v18[-v40];
                  if (v18 <= a4)
                  {
LABEL_149:
                    v39 = v18;
                    goto LABEL_177;
                  }
                  v107 = v18 - 1;
                  v114 = (unsigned __int8 *)(v536 + v37);
                  while (*v107 == *v114)
                  {
                    ++v84;
                    v105 = v107 - 1;
                    if (v107 > a4)
                    {
                      --v107;
                      v108 = (unint64_t)v114-- > v540;
                      if (v108)
                        continue;
                    }
                    goto LABEL_175;
                  }
                }
LABEL_127:
                v39 = v107 + 1;
                goto LABEL_177;
              }
            }
            if ((unint64_t)_X26 >= v30)
            {
              __asm
              {
                PRFM            #0, [X26,#0x40]
                PRFM            #0, [X26,#0x80]
              }
              ++v35;
              v30 += 256;
            }
            __asm { PRFM            #0, [X26,#0x100] }
            v18 = _X26;
            v31 = *(_QWORD *)_X26;
            _X26 += v35;
            if ((unint64_t)_X26 > v15)
              goto LABEL_418;
          }
          v64 = (char *)(v18 + 8);
          v65 = v34 + 1;
          if (v28 <= (unint64_t)(v18 + 8))
          {
            v104 = v18 + 8;
            v67 = v6 + v14;
          }
          else
          {
            v66 = *(_QWORD *)v64 ^ *v65;
            v67 = v6 + v14;
            if (v66)
            {
              v68 = __clz(__rbit64(v66)) >> 3;
              goto LABEL_121;
            }
            v115 = 0;
            v116 = v18 + 16;
            while (1)
            {
              v117 = &v116[v115];
              if ((unint64_t)&v116[v115] >= v28)
                break;
              v118 = v34[v115 + 2];
              ++v115;
              v119 = *v117 ^ v118;
              if (v119)
              {
                v68 = v115 * 8 + (__clz(__rbit64(v119)) >> 3);
                goto LABEL_121;
              }
            }
            v104 = &v18[v115 * 8 + 16];
            v65 = &v34[v115 + 2];
          }
          if ((unint64_t)v104 < v548 && *(_DWORD *)v65 == *(_DWORD *)v104)
          {
            v104 += 4;
            v65 = (_QWORD *)((char *)v65 + 4);
          }
          if ((unint64_t)v104 < v544 && *(unsigned __int16 *)v65 == *(unsigned __int16 *)v104)
          {
            v104 += 2;
            v65 = (_QWORD *)((char *)v65 + 2);
          }
          if (v104 < v7 && *(unsigned __int8 *)v65 == *v104)
            ++v104;
          v68 = v104 - (unsigned __int8 *)v64;
LABEL_121:
          v84 = v68 + 8;
          v87 = v18 - (unsigned __int8 *)v34;
          if ((unint64_t)v34 <= v67 || v18 <= a4)
            goto LABEL_149;
          v105 = v18 - 1;
          v106 = (unsigned __int8 *)v34 - 1;
          while (*v105 == *v106)
          {
            ++v84;
            v107 = v105 - 1;
            if (v105 > a4)
            {
              --v105;
              v108 = (unint64_t)v106-- > v67;
              if (v108)
                continue;
            }
            goto LABEL_127;
          }
LABEL_175:
          v39 = v105 + 1;
LABEL_177:
          if (v35 <= 3)
            *(_DWORD *)(v25 + 4 * v32) = (_DWORD)_X26 - v6;
          v127 = v39 - a4;
          v128 = *(_OWORD **)(a2 + 24);
          v53 = v7 - 32;
          if ((unint64_t)v39 <= v558)
          {
            *v128 = *(_OWORD *)a4;
            v132 = *(_QWORD *)(a2 + 24);
            if (v127 > 0x10)
            {
              v133 = (_OWORD *)(v132 + 16);
              v134 = v132 + v127;
              v135 = (__int128 *)(a4 + 16);
              v52 = (unint64_t)(v7 - 3);
              do
              {
                v136 = *v135++;
                *v133++ = v136;
              }
              while ((unint64_t)v133 < v134);
              goto LABEL_190;
            }
            *(_QWORD *)(a2 + 24) = v132 + v127;
            v82 = *(_QWORD *)(a2 + 8);
            v52 = (unint64_t)(v7 - 3);
          }
          else
          {
            if ((unint64_t)a4 <= v558)
            {
              v129 = (_OWORD *)((char *)v128 + v558 - (_QWORD)a4);
              do
              {
                v130 = *(_OWORD *)a4;
                a4 += 16;
                *v128++ = v130;
              }
              while (v128 < v129);
              a4 = v7 - 32;
              v128 = v129;
            }
            v52 = (unint64_t)(v7 - 3);
            while (a4 < v39)
            {
              v131 = *a4++;
              *(_BYTE *)v128 = v131;
              v128 = (_OWORD *)((char *)v128 + 1);
            }
LABEL_190:
            *(_QWORD *)(a2 + 24) += v127;
            v82 = *(_QWORD *)(a2 + 8);
            if (v127 >= 0x10000)
            {
              v137 = (unint64_t)(v82 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v137;
            }
          }
          *(_WORD *)(v82 + 4) = v127;
          *(_DWORD *)v82 = v87 + 3;
          v85 = v84 - 3;
          v22 = v23;
          v88 = v87;
          if (v84 - 3 >= 0x10000)
            goto LABEL_76;
LABEL_77:
          *(_WORD *)(v82 + 6) = v85;
          v90 = v82 + 8;
          *(_QWORD *)(a2 + 8) = v82 + 8;
          v18 = &v39[v84];
          if ((unint64_t)&v39[v84] > v15)
          {
            v23 = v88;
            v91 = v22;
            goto LABEL_108;
          }
          v92 = *(_QWORD *)(v6 + (v38 + 2));
          *(_DWORD *)(v25 + 4 * ((0xCF1BBCDCB7A56463 * v92) >> v26)) = v38 + 2;
          *(_DWORD *)(v25 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v18 - 2)) >> v26)) = (_DWORD)v18 - 2 - v6;
          *(_DWORD *)(v29 + 4 * ((0xCF1BBCDCBFA56300 * v92) >> v27)) = v38 + 2;
          *(_DWORD *)(v29 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v18 - 1)) >> v27)) = (_DWORD)v18 - 1 - v6;
          while (2)
          {
            v91 = v88;
            v88 = v22;
            if ((_DWORD)v22 && *(_DWORD *)v18 == *(_DWORD *)&v18[-v22])
            {
              v93 = (char *)(v18 + 4);
              v94 = &v18[-v22 + 4];
              if (v28 <= (unint64_t)(v18 + 4))
              {
                v97 = v18 + 4;
              }
              else
              {
                v95 = *(_QWORD *)v93 ^ *(_QWORD *)v94;
                if (v95)
                {
                  v96 = __clz(__rbit64(v95)) >> 3;
                  goto LABEL_96;
                }
                v100 = (char *)(v18 + 12);
                while (1)
                {
                  v101 = &v100[v95];
                  if ((unint64_t)&v100[v95] >= v28)
                    break;
                  v102 = *(_QWORD *)&v18[v95 + 12 - v22];
                  v95 += 8;
                  v103 = *(_QWORD *)v101 ^ v102;
                  if (v103)
                  {
                    v96 = v95 + (__clz(__rbit64(v103)) >> 3);
                    v53 = v7 - 32;
                    goto LABEL_96;
                  }
                }
                v97 = &v18[v95 + 12];
                v94 = &v97[-v22];
                v53 = v7 - 32;
              }
              if ((unint64_t)v97 < v52 && *(_DWORD *)v94 == *(_DWORD *)v97)
              {
                v97 += 4;
                v94 += 4;
              }
              if ((unint64_t)v97 < v544 && *(unsigned __int16 *)v94 == *(unsigned __int16 *)v97)
              {
                v97 += 2;
                v94 += 2;
              }
              if (v97 < v7 && *v94 == *v97)
                ++v97;
              v96 = v97 - (unsigned __int8 *)v93;
LABEL_96:
              v98 = *(_QWORD *)v18;
              *(_DWORD *)(v29 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v18) >> v27)) = (_DWORD)v18 - v6;
              *(_DWORD *)(v25 + 4 * ((0xCF1BBCDCB7A56463 * v98) >> v26)) = (_DWORD)v18 - v6;
              if (v18 <= v53)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v18;
                v90 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v90 + 4) = 0;
              *(_DWORD *)v90 = 1;
              if (v96 + 1 >= 0x10000)
              {
                v99 = (unint64_t)(v90 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v99;
              }
              *(_WORD *)(v90 + 6) = v96 + 1;
              v90 += 8;
              *(_QWORD *)(a2 + 8) = v90;
              v18 += v96 + 4;
              v22 = v91;
              v23 = v88;
              if ((unint64_t)v18 > v15)
                goto LABEL_108;
              continue;
            }
            break;
          }
          v23 = v91;
          v91 = v22;
LABEL_108:
          _X26 = v18 + 1;
          a4 = v18;
          v22 = v91;
          if ((unint64_t)(v18 + 1) > v15)
          {
LABEL_419:
            v288 = v552;
            v287 = v554;
            if (v554 <= v552)
              v287 = 0;
            v289 = v556;
            goto LABEL_440;
          }
        }
      }
      goto LABEL_418;
  }
  v290 = *(_QWORD *)(a1 + 8);
  v7 = &a4[a5];
  v291 = (_DWORD)a4 + a5 - v290;
  v292 = 1 << *(_DWORD *)(a1 + 240);
  v293 = *(_DWORD *)(a1 + 24);
  v294 = v291 - v293 > v292;
  v295 = v291 - v292;
  v296 = *(_DWORD *)(a1 + 40) == 0;
  if (v296 && v294)
    v297 = v295;
  else
    v297 = v293;
  v298 = (unint64_t)(v7 - 8);
  v300 = *a3;
  v299 = a3[1];
  v543 = v290 + v297;
  if ((unsigned __int8 *)(v290 + v297) == a4)
    v18 = a4 + 1;
  else
    v18 = a4;
  v301 = (_DWORD)v18 - (_DWORD)v290 - v293 > v292;
  v302 = (_DWORD)v18 - v290 - v292;
  if (!v296 || !v301)
    v302 = *(_DWORD *)(a1 + 24);
  v303 = (_DWORD)v18 - v290 - v302;
  v553 = v299;
  v555 = v300;
  if (v299 <= v303)
    v304 = v299;
  else
    v304 = 0;
  v550 = v303;
  if (v300 <= v303)
    v23 = v300;
  else
    v23 = 0;
  _X26 = v18 + 1;
  if ((unint64_t)(v18 + 1) > v298)
  {
LABEL_437:
    LODWORD(v91) = v304;
    v18 = a4;
    goto LABEL_438;
  }
  v420 = *(_QWORD *)(a1 + 96);
  v421 = 64 - *(_DWORD *)(a1 + 248);
  v422 = 32 - *(_DWORD *)(a1 + 244);
  v423 = *(_QWORD *)(a1 + 112);
  v424 = (unint64_t)(v7 - 7);
  v560 = (unint64_t)(v7 - 3);
  v535 = v290 + 12;
  v539 = v290 - 1;
  v531 = v290 + 16;
  v547 = (unint64_t)(v7 - 1);
  v557 = (unint64_t)(v7 - 32);
  do
  {
    v425 = (unint64_t)(v18 + 256);
    v426 = *(_QWORD *)v18;
    v427 = (0xCF1BBCDCB7A56463 * *(_QWORD *)v18) >> v421;
    v428 = *(unsigned int *)(v420 + 4 * v427);
    v429 = (_QWORD *)(v290 + v428);
    v430 = 1;
    while (1)
    {
      v431 = (-1640531535 * v426) >> v422;
      v432 = *(unsigned int *)(v423 + 4 * v431);
      v433 = (_DWORD)v18 - v290;
      *(_DWORD *)(v423 + 4 * v431) = (_DWORD)v18 - v290;
      *(_DWORD *)(v420 + 4 * v427) = (_DWORD)v18 - v290;
      if ((_DWORD)v23)
      {
        v434 = v18 + 1;
        if (*(_DWORD *)&v18[-v23 + 1] == *(_DWORD *)(v18 + 1))
        {
          v439 = (char *)(v18 + 5);
          v440 = &v18[-v23 + 5];
          if (v424 <= (unint64_t)(v18 + 5))
          {
            v444 = v18 + 5;
            v443 = v7 - 32;
          }
          else
          {
            v441 = *(_QWORD *)v439 ^ *(_QWORD *)v440;
            if (v441)
            {
              v442 = __clz(__rbit64(v441)) >> 3;
              v443 = v7 - 32;
              goto LABEL_657;
            }
            v494 = (char *)(v18 + 13);
            v443 = v7 - 32;
            while (1)
            {
              v495 = &v494[v441];
              if ((unint64_t)&v494[v441] >= v424)
                break;
              v496 = *(_QWORD *)&v18[v441 + 13 - v23];
              v441 += 8;
              v497 = *(_QWORD *)v495 ^ v496;
              if (v497)
              {
                v442 = v441 + (__clz(__rbit64(v497)) >> 3);
                goto LABEL_657;
              }
            }
            v444 = &v18[v441 + 13];
            v440 = &v444[-v23];
          }
          if ((unint64_t)v444 < v560 && *(_DWORD *)v440 == *(_DWORD *)v444)
          {
            v444 += 4;
            v440 += 4;
          }
          if ((unint64_t)v444 < v547 && *(unsigned __int16 *)v440 == *(unsigned __int16 *)v444)
          {
            v444 += 2;
            v440 += 2;
          }
          if (v444 < v7 && *v440 == *v444)
            ++v444;
          v442 = v444 - (unsigned __int8 *)v439;
LABEL_657:
          v445 = v434 - a4;
          v446 = *(_OWORD **)(a2 + 24);
          if (v434 <= v443)
          {
            *v446 = *(_OWORD *)a4;
            v449 = *(_QWORD *)(a2 + 24);
            if (v445 <= 0x10)
            {
              *(_QWORD *)(a2 + 24) = v449 + v445;
              v471 = *(_QWORD *)(a2 + 8);
              goto LABEL_686;
            }
            v450 = (_OWORD *)(v449 + 16);
            v451 = v449 + v445;
            v452 = (__int128 *)(a4 + 16);
            do
            {
              v453 = *v452++;
              *v450++ = v453;
            }
            while ((unint64_t)v450 < v451);
          }
          else
          {
            if (a4 <= v443)
            {
              v448 = (char *)v446 + v443 - a4;
              v467 = a4;
              do
              {
                v468 = *(_OWORD *)v467;
                v467 += 16;
                *v446++ = v468;
              }
              while (v446 < (_OWORD *)v448);
              v447 = v443;
            }
            else
            {
              v447 = a4;
              v448 = *(_BYTE **)(a2 + 24);
            }
            if (v447 < v434)
            {
              if (a4 <= v443)
                a4 = v443;
              v469 = v18 - a4 + 1;
              do
              {
                v470 = *v447++;
                *v448++ = v470;
                --v469;
              }
              while (v469);
            }
          }
          *(_QWORD *)(a2 + 24) += v445;
          v471 = *(_QWORD *)(a2 + 8);
          if (v445 >= 0x10000)
          {
            v472 = (unint64_t)(v471 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v472;
          }
LABEL_686:
          v473 = v442 + 4;
          *(_WORD *)(v471 + 4) = v445;
          *(_DWORD *)v471 = 1;
          v474 = v442 + 1;
          v475 = (v442 + 1) >> 16;
          v476 = v23;
          v477 = v23;
          if (!v475)
            goto LABEL_688;
LABEL_687:
          v478 = (unint64_t)(v471 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v478;
          v477 = v476;
          goto LABEL_688;
        }
      }
      v426 = *(_QWORD *)_X26;
      v427 = (0xCF1BBCDCB7A56463 * *(_QWORD *)_X26) >> v421;
      if (v428 > v297 && *v429 == *(_QWORD *)v18)
        break;
      v428 = *(unsigned int *)(v420 + 4 * v427);
      v429 = (_QWORD *)(v290 + v428);
      if (v432 > v297)
      {
        v435 = v290 + v432;
        if (*(_DWORD *)(v290 + v432) == *(_DWORD *)v18)
        {
          if (v428 > v297 && *v429 == v426)
          {
            v459 = (char *)(_X26 + 8);
            v460 = v429 + 1;
            if (v424 <= (unint64_t)(_X26 + 8))
            {
              v510 = _X26 + 8;
            }
            else
            {
              v461 = *(_QWORD *)v459 ^ *v460;
              if (v461)
              {
                v462 = __clz(__rbit64(v461)) >> 3;
LABEL_781:
                v473 = v462 + 8;
                v476 = _X26 - (unsigned __int8 *)v429;
                if (_X26 > a4)
                {
                  v491 = _X26 - 1;
                  v511 = (unsigned __int8 *)(v539 + v428);
                  while (*v491 == *v511)
                  {
                    ++v473;
                    v493 = v491 - 1;
                    if (v491 > a4)
                    {
                      --v491;
                      v108 = (unint64_t)v511-- > v543;
                      if (v108)
                        continue;
                    }
                    goto LABEL_786;
                  }
                  goto LABEL_787;
                }
                v434 = _X26;
                goto LABEL_788;
              }
              v523 = 0;
              v524 = _X26 + 16;
              while (1)
              {
                v525 = &v524[v523 / 8];
                if ((unint64_t)&v524[v523 / 8] >= v424)
                  break;
                v526 = *(_QWORD *)(v531 + v428 + v523);
                v523 += 8;
                v527 = *v525 ^ v526;
                if (v527)
                {
                  v462 = v523 + (__clz(__rbit64(v527)) >> 3);
                  goto LABEL_781;
                }
              }
              v510 = &_X26[v523 + 16];
              v460 = (_QWORD *)(v531 + v428 + v523);
            }
            if ((unint64_t)v510 < v560 && *(_DWORD *)v460 == *(_DWORD *)v510)
            {
              v510 += 4;
              v460 = (_QWORD *)((char *)v460 + 4);
            }
            if ((unint64_t)v510 < v547 && *(unsigned __int16 *)v460 == *(unsigned __int16 *)v510)
            {
              v510 += 2;
              v460 = (_QWORD *)((char *)v460 + 2);
            }
            if (v510 < v7 && *(unsigned __int8 *)v460 == *v510)
              ++v510;
            v462 = v510 - (unsigned __int8 *)v459;
            goto LABEL_781;
          }
          v463 = (char *)(v18 + 4);
          v464 = (_QWORD *)(v435 + 4);
          if (v424 <= (unint64_t)(v18 + 4))
          {
            v498 = v18 + 4;
          }
          else
          {
            v465 = *(_QWORD *)v463 ^ *v464;
            if (v465)
            {
              v466 = __clz(__rbit64(v465)) >> 3;
              goto LABEL_754;
            }
            v505 = 0;
            v506 = (char *)(v18 + 12);
            while (1)
            {
              v507 = &v506[v505];
              if ((unint64_t)&v506[v505] >= v424)
                break;
              v508 = *(_QWORD *)(v535 + v432 + v505);
              v505 += 8;
              v509 = *(_QWORD *)v507 ^ v508;
              if (v509)
              {
                v466 = v505 + (__clz(__rbit64(v509)) >> 3);
                goto LABEL_754;
              }
            }
            v498 = &v18[v505 + 12];
            v464 = (_QWORD *)(v535 + v432 + v505);
          }
          if ((unint64_t)v498 < v560 && *(_DWORD *)v464 == *(_DWORD *)v498)
          {
            v498 += 4;
            v464 = (_QWORD *)((char *)v464 + 4);
          }
          if ((unint64_t)v498 < v547 && *(unsigned __int16 *)v464 == *(unsigned __int16 *)v498)
          {
            v498 += 2;
            v464 = (_QWORD *)((char *)v464 + 2);
          }
          if (v498 < v7 && *(unsigned __int8 *)v464 == *v498)
            ++v498;
          v466 = v498 - (unsigned __int8 *)v463;
LABEL_754:
          v473 = v466 + 4;
          v476 = (int64_t)&v18[-v435];
          if (v18 > a4)
          {
            v491 = v18 - 1;
            v499 = (unsigned __int8 *)(v539 + v432);
            while (*v491 == *v499)
            {
              ++v473;
              v493 = v491 - 1;
              if (v491 > a4)
              {
                --v491;
                v108 = (unint64_t)v499-- > v543;
                if (v108)
                  continue;
              }
              goto LABEL_786;
            }
            goto LABEL_787;
          }
LABEL_760:
          v434 = v18;
          goto LABEL_788;
        }
      }
      if ((unint64_t)_X26 >= v425)
      {
        __asm
        {
          PRFM            #0, [X26,#0x40]
          PRFM            #0, [X26,#0x80]
        }
        ++v430;
        v425 += 256;
      }
      __asm { PRFM            #0, [X26,#0x100] }
      v18 = _X26;
      _X26 += v430;
      if ((unint64_t)_X26 > v298)
        goto LABEL_437;
    }
    v454 = (char *)(v18 + 8);
    v455 = v429 + 1;
    if (v424 <= (unint64_t)(v18 + 8))
    {
      v490 = v18 + 8;
      v457 = v290 + v297;
    }
    else
    {
      v456 = *(_QWORD *)v454 ^ *v455;
      v457 = v290 + v297;
      if (v456)
      {
        v458 = __clz(__rbit64(v456)) >> 3;
        goto LABEL_732;
      }
      v500 = 0;
      v501 = v18 + 16;
      while (1)
      {
        v502 = &v501[v500];
        if ((unint64_t)&v501[v500] >= v424)
          break;
        v503 = v429[v500 + 2];
        ++v500;
        v504 = *v502 ^ v503;
        if (v504)
        {
          v458 = v500 * 8 + (__clz(__rbit64(v504)) >> 3);
          goto LABEL_732;
        }
      }
      v490 = &v18[v500 * 8 + 16];
      v455 = &v429[v500 + 2];
    }
    if ((unint64_t)v490 < v560 && *(_DWORD *)v455 == *(_DWORD *)v490)
    {
      v490 += 4;
      v455 = (_QWORD *)((char *)v455 + 4);
    }
    if ((unint64_t)v490 < v547 && *(unsigned __int16 *)v455 == *(unsigned __int16 *)v490)
    {
      v490 += 2;
      v455 = (_QWORD *)((char *)v455 + 2);
    }
    if (v490 < v7 && *(unsigned __int8 *)v455 == *v490)
      ++v490;
    v458 = v490 - (unsigned __int8 *)v454;
LABEL_732:
    v473 = v458 + 8;
    v476 = v18 - (unsigned __int8 *)v429;
    if ((unint64_t)v429 <= v457 || v18 <= a4)
      goto LABEL_760;
    v491 = v18 - 1;
    v492 = (unsigned __int8 *)v429 - 1;
    while (*v491 == *v492)
    {
      ++v473;
      v493 = v491 - 1;
      if (v491 > a4)
      {
        --v491;
        v108 = (unint64_t)v492-- > v457;
        if (v108)
          continue;
      }
LABEL_786:
      v434 = v493 + 1;
      goto LABEL_788;
    }
LABEL_787:
    v434 = v491 + 1;
LABEL_788:
    if (v430 <= 3)
      *(_DWORD *)(v420 + 4 * v427) = (_DWORD)_X26 - v290;
    v512 = v434 - a4;
    v513 = *(_OWORD **)(a2 + 24);
    v443 = v7 - 32;
    if ((unint64_t)v434 <= v557)
    {
      *v513 = *(_OWORD *)a4;
      v517 = *(_QWORD *)(a2 + 24);
      if (v512 > 0x10)
      {
        v518 = (_OWORD *)(v517 + 16);
        v519 = v517 + v512;
        v520 = (__int128 *)(a4 + 16);
        do
        {
          v521 = *v520++;
          *v518++ = v521;
        }
        while ((unint64_t)v518 < v519);
        goto LABEL_800;
      }
      *(_QWORD *)(a2 + 24) = v517 + v512;
      v471 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      if ((unint64_t)a4 <= v557)
      {
        v514 = (_OWORD *)((char *)v513 + v557 - (_QWORD)a4);
        do
        {
          v515 = *(_OWORD *)a4;
          a4 += 16;
          *v513++ = v515;
        }
        while (v513 < v514);
        a4 = v7 - 32;
        v513 = v514;
      }
      while (a4 < v434)
      {
        v516 = *a4++;
        *(_BYTE *)v513 = v516;
        v513 = (_OWORD *)((char *)v513 + 1);
      }
LABEL_800:
      *(_QWORD *)(a2 + 24) += v512;
      v471 = *(_QWORD *)(a2 + 8);
      if (v512 >= 0x10000)
      {
        v522 = (unint64_t)(v471 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v522;
      }
    }
    *(_WORD *)(v471 + 4) = v512;
    *(_DWORD *)v471 = v476 + 3;
    v474 = v473 - 3;
    v304 = v23;
    v477 = v476;
    if (v473 - 3 >= 0x10000)
      goto LABEL_687;
LABEL_688:
    *(_WORD *)(v471 + 6) = v474;
    v479 = v471 + 8;
    *(_QWORD *)(a2 + 8) = v471 + 8;
    v18 = &v434[v473];
    if ((unint64_t)&v434[v473] > v298)
    {
      v23 = v477;
      v91 = v304;
      goto LABEL_719;
    }
    *(_DWORD *)(v420 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v290 + (v433 + 2))) >> v421)) = v433 + 2;
    *(_DWORD *)(v420 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v18 - 2)) >> v421)) = (_DWORD)v18 - 2 - v290;
    *(_DWORD *)(v423 + 4 * ((-1640531535 * *(_DWORD *)(v290 + (v433 + 2))) >> v422)) = v433 + 2;
    *(_DWORD *)(v423 + 4 * ((-1640531535 * *(_DWORD *)(v18 - 1)) >> v422)) = (_DWORD)v18 - 1 - v290;
    while (2)
    {
      v91 = v477;
      v477 = v304;
      if ((_DWORD)v304 && *(_DWORD *)v18 == *(_DWORD *)&v18[-v304])
      {
        v480 = (char *)(v18 + 4);
        v481 = &v18[-v304 + 4];
        if (v424 <= (unint64_t)(v18 + 4))
        {
          v484 = v18 + 4;
        }
        else
        {
          v482 = *(_QWORD *)v480 ^ *(_QWORD *)v481;
          if (v482)
          {
            v483 = __clz(__rbit64(v482)) >> 3;
            goto LABEL_707;
          }
          v486 = (char *)(v18 + 12);
          while (1)
          {
            v487 = &v486[v482];
            if ((unint64_t)&v486[v482] >= v424)
              break;
            v488 = *(_QWORD *)&v18[v482 + 12 - v304];
            v482 += 8;
            v489 = *(_QWORD *)v487 ^ v488;
            if (v489)
            {
              v483 = v482 + (__clz(__rbit64(v489)) >> 3);
              v443 = v7 - 32;
              goto LABEL_707;
            }
          }
          v484 = &v18[v482 + 12];
          v481 = &v484[-v304];
          v443 = v7 - 32;
        }
        if ((unint64_t)v484 < v560 && *(_DWORD *)v481 == *(_DWORD *)v484)
        {
          v484 += 4;
          v481 += 4;
        }
        if ((unint64_t)v484 < v547 && *(unsigned __int16 *)v481 == *(unsigned __int16 *)v484)
        {
          v484 += 2;
          v481 += 2;
        }
        if (v484 < v7 && *v481 == *v484)
          ++v484;
        v483 = v484 - (unsigned __int8 *)v480;
LABEL_707:
        *(_DWORD *)(v423 + 4 * ((-1640531535 * *(_DWORD *)v18) >> v422)) = (_DWORD)v18 - v290;
        *(_DWORD *)(v420 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)v18) >> v421)) = (_DWORD)v18 - v290;
        if (v18 <= v443)
        {
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v18;
          v479 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)(v479 + 4) = 0;
        *(_DWORD *)v479 = 1;
        if (v483 + 1 >= 0x10000)
        {
          v485 = (unint64_t)(v479 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v485;
        }
        *(_WORD *)(v479 + 6) = v483 + 1;
        v479 += 8;
        *(_QWORD *)(a2 + 8) = v479;
        v18 += v483 + 4;
        v304 = v91;
        v23 = v477;
        if ((unint64_t)v18 > v298)
          goto LABEL_719;
        continue;
      }
      break;
    }
    v23 = v91;
    v91 = v304;
LABEL_719:
    _X26 = v18 + 1;
    a4 = v18;
    v304 = v91;
  }
  while ((unint64_t)(v18 + 1) <= v298);
LABEL_438:
  v287 = v553;
  v289 = v555;
  v288 = v550;
  if (v553 <= v550)
    v287 = 0;
LABEL_440:
  if (v289 > v288)
    v287 = v289;
  if ((_DWORD)v23)
    v306 = v23;
  else
    v306 = v287;
  if ((_DWORD)v91)
    v287 = v91;
  *a3 = v306;
  a3[1] = v287;
  return v7 - v18;
}

unint64_t ZSTD_compressBlock_doubleFast_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unint64_t v38;
  _OWORD *v39;
  unsigned __int8 *v40;
  _BYTE *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  BOOL v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v70;
  _OWORD *v71;
  unint64_t v72;
  __int128 *v73;
  __int128 v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  unsigned __int8 *v78;
  char *v79;
  char *v80;
  unint64_t v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  __int128 v84;
  unsigned __int8 *v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  unint64_t v89;
  __int16 v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unint64_t v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unint64_t v102;
  _OWORD *v103;
  _OWORD *v104;
  __int128 v105;
  char v106;
  uint64_t v107;
  _OWORD *v108;
  unint64_t v109;
  __int128 *v110;
  __int128 v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v142;
  unsigned __int8 *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned __int8 *v160;
  unint64_t v161;
  unint64_t v162;
  _OWORD *v163;
  unsigned __int8 *v164;
  _BYTE *v165;
  uint64_t v166;
  char *v167;
  _QWORD *v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unsigned __int8 *v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  _QWORD *v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v190;
  _OWORD *v191;
  unint64_t v192;
  __int128 *v193;
  __int128 v194;
  unsigned __int8 *v195;
  unsigned __int8 *v196;
  uint64_t v197;
  unsigned __int8 *v198;
  char *v199;
  char *v200;
  unint64_t v201;
  unsigned __int8 *v202;
  unsigned __int8 *v203;
  __int128 v204;
  unsigned __int8 *v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  unint64_t v209;
  __int16 v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unsigned __int8 *v214;
  unsigned __int8 *v215;
  uint64_t v216;
  unint64_t v217;
  unsigned __int8 *v218;
  unsigned __int8 *v219;
  unsigned __int8 *v220;
  unsigned __int8 *v221;
  unint64_t v222;
  _OWORD *v223;
  _OWORD *v224;
  __int128 v225;
  char v226;
  uint64_t v227;
  _OWORD *v228;
  unint64_t v229;
  __int128 *v230;
  __int128 v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unsigned __int8 *v246;
  unsigned __int8 *v247;
  uint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unsigned __int8 *v251;
  unsigned __int8 *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  uint64_t v262;
  unsigned __int8 *v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  unsigned __int8 *v269;
  unsigned __int8 *v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  uint64_t v279;
  unsigned __int8 *v280;
  unint64_t v281;
  unint64_t v282;
  _OWORD *v283;
  unsigned __int8 *v284;
  _BYTE *v285;
  uint64_t v286;
  char *v287;
  _QWORD *v288;
  unint64_t v289;
  unint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unsigned __int8 *v295;
  unsigned __int8 *v296;
  unsigned __int8 *v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  _QWORD *v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v310;
  _OWORD *v311;
  unint64_t v312;
  __int128 *v313;
  __int128 v314;
  unsigned __int8 *v315;
  unsigned __int8 *v316;
  uint64_t v317;
  unsigned __int8 *v318;
  char *v319;
  char *v320;
  unint64_t v321;
  unsigned __int8 *v322;
  unsigned __int8 *v323;
  __int128 v324;
  unsigned __int8 *v325;
  uint64_t v326;
  char v327;
  uint64_t v328;
  unint64_t v329;
  __int16 v330;
  unint64_t v331;
  unint64_t v332;
  uint64_t v333;
  unsigned __int8 *v334;
  unsigned __int8 *v335;
  uint64_t v336;
  unint64_t v337;
  unsigned __int8 *v338;
  unsigned __int8 *v339;
  unsigned __int8 *v340;
  unsigned __int8 *v341;
  unint64_t v342;
  _OWORD *v343;
  _OWORD *v344;
  __int128 v345;
  char v346;
  uint64_t v347;
  _OWORD *v348;
  unint64_t v349;
  __int128 *v350;
  __int128 v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  int v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unsigned __int8 *v366;
  unsigned __int8 *v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  unsigned __int8 *v371;
  unsigned __int8 *v372;
  uint64_t v373;
  unint64_t v374;
  uint64_t v375;
  int v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  uint64_t v382;
  unsigned __int8 *v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  char *v388;
  uint64_t v389;
  unsigned __int8 *v390;
  unsigned __int8 *v391;
  uint64_t v392;
  unint64_t v393;
  unsigned int v394;
  int v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  uint64_t v399;
  uint64_t v400;
  unsigned __int8 *v401;
  unint64_t v402;
  unint64_t v403;
  _OWORD *v404;
  unsigned __int8 *v405;
  _BYTE *v406;
  uint64_t v407;
  char *v408;
  _QWORD *v409;
  unint64_t v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  uint64_t v415;
  unsigned __int8 *v416;
  unsigned __int8 *v417;
  unsigned __int8 *v418;
  unint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  char *v425;
  _QWORD *v426;
  unint64_t v427;
  unint64_t v428;
  uint64_t v431;
  _OWORD *v432;
  unint64_t v433;
  __int128 *v434;
  __int128 v435;
  unsigned __int8 *v436;
  unsigned __int8 *v437;
  uint64_t v438;
  unsigned __int8 *v439;
  char *v440;
  char *v441;
  unint64_t v442;
  unsigned __int8 *v443;
  unsigned __int8 *v444;
  __int128 v445;
  unsigned __int8 *v446;
  uint64_t v447;
  char v448;
  uint64_t v449;
  unint64_t v450;
  __int16 v451;
  unint64_t v452;
  unint64_t v453;
  uint64_t v454;
  unsigned __int8 *v455;
  unsigned __int8 *v456;
  uint64_t v457;
  unint64_t v458;
  unsigned __int8 *v459;
  unsigned __int8 *v460;
  unsigned __int8 *v461;
  unsigned __int8 *v462;
  unint64_t v463;
  _OWORD *v464;
  _OWORD *v465;
  __int128 v466;
  char v467;
  uint64_t v468;
  _OWORD *v469;
  unint64_t v470;
  __int128 *v471;
  __int128 v472;
  unint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t v484;
  unsigned __int8 *v485;
  unsigned __int8 *v486;
  uint64_t v487;
  unint64_t v488;
  uint64_t v489;
  unsigned __int8 *v490;
  unsigned __int8 *v491;
  uint64_t v492;
  unint64_t v493;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  unint64_t v508;
  unint64_t v509;
  unint64_t v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t v517;
  unint64_t v518;
  unsigned int *v519;
  unsigned int *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  int v525;
  int v526;
  int v527;
  int v528;
  unint64_t v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  int v533;
  int v534;
  int v535;
  int v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  unsigned int v541;
  unsigned int v542;
  unsigned int v543;
  unsigned int v544;
  unsigned int v545;
  unsigned int v546;
  unsigned int v547;
  unsigned int v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  char *v557;
  char *v558;
  char *v559;
  char *v560;
  unint64_t v561;
  unint64_t v562;
  unint64_t v563;
  unint64_t v564;
  unsigned __int8 *v565;
  unsigned __int8 *v566;
  unsigned __int8 *v567;
  unsigned __int8 *v568;
  unint64_t v569;
  unint64_t v570;
  unint64_t v571;
  unint64_t v572;
  int v573;
  int v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  int v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  int v586;
  int v587;
  int v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;

  v5 = a4;
  v7 = *(_DWORD *)(a1 + 256);
  if (v7 == 5)
  {
    v135 = *(_QWORD *)(a1 + 8);
    v9 = (unint64_t)&a4[a5];
    v136 = (_DWORD)a4 + a5 - v135;
    v137 = 1 << *(_DWORD *)(a1 + 240);
    v138 = *(_DWORD *)(a1 + 24);
    v139 = v136 - v138;
    v140 = v136 - v137;
    if (v139 > v137 && *(_DWORD *)(a1 + 40) == 0)
      v142 = v140;
    else
      v142 = v138;
    v143 = (unsigned __int8 *)(v135 + v142);
    v144 = v9 - 8;
    v20 = *a3;
    v19 = a3[1];
    v145 = *(_QWORD *)(a1 + 232);
    v146 = *(unsigned int *)(v145 + 24);
    v147 = *(char **)v145;
    v148 = *(_QWORD *)(v145 + 8);
    if ((_DWORD)v5 - ((_DWORD)v148 + (_DWORD)v146) - ((_DWORD)v135 + (_DWORD)v142) + *(_QWORD *)v145)
      v149 = v5;
    else
      v149 = v5 + 1;
    if ((unint64_t)v149 >= v144)
      goto LABEL_569;
    v508 = v148 + v146;
    v542 = *(_DWORD *)(v145 + 24);
    v519 = a3;
    v590 = *(_QWORD *)(a1 + 96);
    v582 = *(_QWORD *)(a1 + 112);
    v538 = *(_QWORD *)(v145 + 96);
    v586 = 64 - *(_DWORD *)(a1 + 248);
    v578 = 64 - *(_DWORD *)(a1 + 244);
    v534 = 64 - *(_DWORD *)(v145 + 248);
    v526 = 64 - *(_DWORD *)(v145 + 244);
    v574 = v142 - 1;
    v530 = v9 - 7;
    v522 = *(_QWORD *)(v145 + 112);
    v512 = v9 - 1;
    v516 = v9 - 3;
    v150 = (unsigned __int8 *)(v9 - 32);
    v546 = v142 + v148 - (_DWORD)v147;
    v554 = v148 - v546;
    v558 = *(char **)v145;
    v496 = v148 - 1;
    v500 = v135 + 16;
    v504 = v135 - 1;
    v562 = v9 - 8;
    v566 = (unsigned __int8 *)(v9 - 32);
    v570 = v9;
    v550 = *(_QWORD *)(v145 + 8);
    while (1)
    {
      v151 = *(_QWORD *)v149;
      v152 = 0xCF1BBCDCB7A56463 * *(_QWORD *)v149;
      v153 = 0xCF1BBCDCBB000000 * *(_QWORD *)v149;
      v154 = (_DWORD)v149 - v135;
      v155 = *(unsigned int *)(v590 + 4 * (v152 >> v586));
      v156 = *(unsigned int *)(v582 + 4 * (v153 >> v578));
      v157 = (_DWORD)v149 - v135 + 1;
      v158 = (v157 - v20);
      v159 = v148 + v158 - v546;
      if (v158 >= v142)
        v159 = v135 + v158;
      *(_DWORD *)(v582 + 4 * (v153 >> v578)) = v154;
      *(_DWORD *)(v590 + 4 * (v152 >> v586)) = v154;
      if ((v574 - v158) >= 3)
      {
        v160 = v149 + 1;
        if (*(_DWORD *)v159 == *(_DWORD *)(v149 + 1))
          break;
      }
      if (v155 <= v142)
      {
        v171 = *(unsigned int *)(v538 + 4 * (v152 >> v534));
        if (v171 > v542 && *(_QWORD *)(v550 + v171) == v151)
        {
          v9 = v570;
          v172 = ZSTD_count_2segments((_QWORD *)v149 + 1, (char *)(v550 + v171 + 8), v570, v147, v143);
          v154 = (_DWORD)v149 - v135;
          v173 = v172 + 8;
          v174 = (_DWORD)v149 - (_DWORD)v135 - v546 - v171;
          if (v149 > v5)
          {
            v175 = v149 - 1;
            v176 = (unsigned __int8 *)(v496 + v171);
            v144 = v562;
            v143 = (unsigned __int8 *)(v135 + v142);
            v147 = v558;
            v150 = v566;
            while (*v175 == *v176)
            {
              ++v173;
              v177 = v175 - 1;
              if (v175 > v5)
              {
                --v175;
                v54 = (unint64_t)v176-- > v508;
                if (v54)
                  continue;
              }
LABEL_313:
              v160 = v177 + 1;
              goto LABEL_332;
            }
LABEL_331:
            v160 = v175 + 1;
LABEL_332:
            v222 = v160 - v5;
            v223 = *(_OWORD **)(a2 + 24);
            if (v160 <= v150)
            {
              *v223 = *(_OWORD *)v5;
              v227 = *(_QWORD *)(a2 + 24);
              if (v222 > 0x10)
              {
                v228 = (_OWORD *)(v227 + 16);
                v229 = v227 + v222;
                v230 = (__int128 *)(v5 + 16);
                do
                {
                  v231 = *v230++;
                  *v228++ = v231;
                }
                while ((unint64_t)v228 < v229);
                goto LABEL_343;
              }
              *(_QWORD *)(a2 + 24) = v227 + v222;
              v208 = *(_QWORD *)(a2 + 8);
            }
            else
            {
              if (v5 <= v150)
              {
                v224 = (_OWORD *)((char *)v223 + v150 - v5);
                do
                {
                  v225 = *(_OWORD *)v5;
                  v5 += 16;
                  *v223++ = v225;
                }
                while (v223 < v224);
                v5 = v150;
                v223 = v224;
              }
              while (v5 < v160)
              {
                v226 = *v5++;
                *(_BYTE *)v223 = v226;
                v223 = (_OWORD *)((char *)v223 + 1);
              }
LABEL_343:
              *(_QWORD *)(a2 + 24) += v222;
              v208 = *(_QWORD *)(a2 + 8);
              if (v222 >= 0x10000)
              {
                v232 = (unint64_t)(v208 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 1;
                *(_DWORD *)(a2 + 76) = v232;
              }
            }
            *(_WORD *)(v208 + 4) = v222;
            *(_DWORD *)v208 = v174 + 3;
            v210 = v173 - 3;
            v19 = v20;
            v20 = v174;
            if (v173 - 3 >= 0x10000)
            {
LABEL_347:
              v233 = (unint64_t)(v208 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v233;
              v20 = v174;
            }
LABEL_348:
            *(_WORD *)(v208 + 6) = v210;
            v234 = v208 + 8;
            *(_QWORD *)(a2 + 8) = v208 + 8;
            v5 = &v160[v173];
            if ((unint64_t)&v160[v173] <= v144)
            {
              v235 = *(_QWORD *)(v135 + (v154 + 2));
              *(_DWORD *)(v590 + 4 * ((0xCF1BBCDCB7A56463 * v235) >> v586)) = v154 + 2;
              *(_DWORD *)(v590 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 - 2)) >> v586)) = (_DWORD)v5 - 2 - v135;
              *(_DWORD *)(v582 + 4 * ((0xCF1BBCDCBB000000 * v235) >> v578)) = v154 + 2;
              *(_DWORD *)(v582 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v5 - 1)) >> v578)) = (_DWORD)v5 - 1 - v135;
              v236 = v20;
              v237 = v19;
              while (1)
              {
                v20 = v237;
                v237 = v236;
                v238 = (_DWORD)v5 - v135;
                v239 = ((_DWORD)v5 - v135 - v20);
                v240 = v554;
                if (v239 >= v142)
                  v240 = v135;
                if ((v574 - v239) < 3)
                  break;
                v241 = v240 + v239;
                if (*(_DWORD *)v241 != *(_DWORD *)v5)
                  break;
                if (v239 >= v142)
                  v147 = (char *)v9;
                v242 = ZSTD_count_2segments(v5 + 4, (char *)(v241 + 4), v9, v147, v143);
                v150 = v566;
                if (v5 <= v566)
                {
                  *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                  v234 = *(_QWORD *)(a2 + 8);
                }
                *(_WORD *)(v234 + 4) = 0;
                *(_DWORD *)v234 = 1;
                v144 = v562;
                if (v242 + 1 >= 0x10000)
                {
                  v243 = (unint64_t)(v234 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v243;
                }
                *(_WORD *)(v234 + 6) = v242 + 1;
                v234 += 8;
                v244 = *(_QWORD *)v5;
                *(_DWORD *)(v582 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v5) >> v578)) = v238;
                *(_DWORD *)(v590 + 4 * ((0xCF1BBCDCB7A56463 * v244) >> v586)) = v238;
                v5 += v242 + 4;
                *(_QWORD *)(a2 + 8) = v234;
                v236 = v20;
                v19 = v237;
                v149 = v5;
                v143 = (unsigned __int8 *)(v135 + v142);
                v147 = v558;
                if ((unint64_t)v5 > v562)
                  goto LABEL_364;
              }
              v19 = v20;
              v20 = v236;
            }
            v149 = v5;
            goto LABEL_364;
          }
LABEL_288:
          v160 = v149;
          v144 = v562;
          v143 = (unsigned __int8 *)(v135 + v142);
          v147 = v558;
          v150 = v566;
          goto LABEL_332;
        }
      }
      else
      {
        v166 = v135 + v155;
        if (*(_QWORD *)(v135 + v155) == v151)
        {
          v167 = (char *)(v149 + 8);
          v168 = (_QWORD *)(v166 + 8);
          if (v530 <= (unint64_t)(v149 + 8))
          {
            v195 = v149 + 8;
          }
          else
          {
            v169 = *(_QWORD *)v167 ^ *v168;
            if (v169)
            {
              v170 = __clz(__rbit64(v169)) >> 3;
              v9 = v570;
              goto LABEL_252;
            }
            v213 = 0;
            v214 = v149 + 16;
            v9 = v570;
            while (1)
            {
              v215 = &v214[v213];
              if ((unint64_t)&v214[v213] >= v530)
                break;
              v216 = *(_QWORD *)(v500 + v155 + v213);
              v213 += 8;
              v217 = *(_QWORD *)v215 ^ v216;
              if (v217)
              {
                v170 = v213 + (__clz(__rbit64(v217)) >> 3);
                goto LABEL_252;
              }
            }
            v195 = &v149[v213 + 16];
            v168 = (_QWORD *)(v500 + v155 + v213);
          }
          if ((unint64_t)v195 < v516 && *(_DWORD *)v168 == *(_DWORD *)v195)
          {
            v195 += 4;
            v168 = (_QWORD *)((char *)v168 + 4);
          }
          v9 = v570;
          if ((unint64_t)v195 < v512 && *(unsigned __int16 *)v168 == *(unsigned __int16 *)v195)
          {
            v195 += 2;
            v168 = (_QWORD *)((char *)v168 + 2);
          }
          if ((unint64_t)v195 < v570 && *(unsigned __int8 *)v168 == *v195)
            ++v195;
          v170 = v195 - (unsigned __int8 *)v167;
LABEL_252:
          v173 = v170 + 8;
          v174 = ((_DWORD)v149 - v166);
          if (v149 > v5)
          {
            v175 = v149 - 1;
            v196 = (unsigned __int8 *)(v504 + v155);
            while (*v175 == *v196)
            {
              ++v173;
              v177 = v175 - 1;
              if (v175 > v5)
              {
                --v175;
                v54 = v196-- > v143;
                if (v54)
                  continue;
              }
              goto LABEL_313;
            }
            goto LABEL_331;
          }
          goto LABEL_314;
        }
      }
      if (v156 <= v142)
      {
        v179 = *(unsigned int *)(v522 + 4 * (v153 >> v526));
        if (v179 > v542)
        {
          v178 = v550 + v179;
          if (*(_DWORD *)(v550 + v179) == *(_DWORD *)v149)
          {
            LODWORD(v156) = v179 + v546;
LABEL_231:
            v160 = v149 + 1;
            v180 = *(_QWORD *)(v149 + 1);
            v181 = (0xCF1BBCDCB7A56463 * v180) >> v586;
            v182 = *(unsigned int *)(v590 + 4 * v181);
            *(_DWORD *)(v590 + 4 * v181) = v157;
            if (v182 <= v142)
            {
              v197 = *(unsigned int *)(v538 + 4 * ((0xCF1BBCDCB7A56463 * v180) >> v534));
              if (v197 > v542 && *(_QWORD *)(v550 + v197) == v180)
              {
                v173 = ZSTD_count_2segments(v149 + 9, (char *)(v550 + v197 + 8), v570, v147, v143) + 8;
                v174 = v157 - v546 - v197;
                if (v160 <= v5)
                {
                  v150 = v566;
                  v9 = v570;
                  v144 = v562;
                  v143 = (unsigned __int8 *)(v135 + v142);
                  v147 = v558;
                  v154 = (_DWORD)v149 - v135;
                  goto LABEL_332;
                }
                v198 = (unsigned __int8 *)(v496 + v197);
                v150 = v566;
                v9 = v570;
                v144 = v562;
                v143 = (unsigned __int8 *)(v135 + v142);
                v147 = v558;
                v154 = (_DWORD)v149 - v135;
                while (*v149 == *v198)
                {
                  ++v173;
                  v175 = v149 - 1;
                  if ((unint64_t)v198 > v508)
                  {
                    --v198;
                    v54 = v149-- > v5;
                    if (v54)
                      continue;
                  }
                  goto LABEL_331;
                }
                goto LABEL_367;
              }
            }
            else
            {
              v183 = v135 + v182;
              if (*(_QWORD *)(v135 + v182) == v180)
              {
                v184 = (char *)(v149 + 9);
                v185 = (_QWORD *)(v183 + 8);
                if (v530 <= (unint64_t)(v149 + 9))
                {
                  v220 = v149 + 9;
                  v9 = v570;
                }
                else
                {
                  v186 = *(_QWORD *)v184 ^ *v185;
                  v9 = v570;
                  if (v186)
                  {
                    v187 = __clz(__rbit64(v186)) >> 3;
                    goto LABEL_326;
                  }
                  v250 = 0;
                  v251 = v149 + 17;
                  while (1)
                  {
                    v252 = &v251[v250];
                    if ((unint64_t)&v251[v250] >= v530)
                      break;
                    v253 = *(_QWORD *)(v500 + v182 + v250);
                    v250 += 8;
                    v254 = *(_QWORD *)v252 ^ v253;
                    if (v254)
                    {
                      v187 = v250 + (__clz(__rbit64(v254)) >> 3);
                      goto LABEL_326;
                    }
                  }
                  v220 = &v149[v250 + 17];
                  v185 = (_QWORD *)(v500 + v182 + v250);
                }
                if ((unint64_t)v220 < v516 && *(_DWORD *)v185 == *(_DWORD *)v220)
                {
                  v220 += 4;
                  v185 = (_QWORD *)((char *)v185 + 4);
                }
                if ((unint64_t)v220 < v512 && *(unsigned __int16 *)v185 == *(unsigned __int16 *)v220)
                {
                  v220 += 2;
                  v185 = (_QWORD *)((char *)v185 + 2);
                }
                if ((unint64_t)v220 < v9 && *(unsigned __int8 *)v185 == *v220)
                  ++v220;
                v187 = v220 - (unsigned __int8 *)v184;
LABEL_326:
                v173 = v187 + 8;
                v174 = ((_DWORD)v160 - v183);
                if (v160 <= v5)
                  goto LABEL_332;
                v221 = (unsigned __int8 *)(v504 + v182);
                while (*v149 == *v221)
                {
                  ++v173;
                  v175 = v149 - 1;
                  if (v221 > v143)
                  {
                    --v221;
                    v54 = v149-- > v5;
                    if (v54)
                      continue;
                  }
                  goto LABEL_331;
                }
LABEL_367:
                v160 = v149 + 1;
                goto LABEL_332;
              }
            }
            v199 = (char *)(v149 + 4);
            v200 = (char *)(v178 + 4);
            if (v156 < v142)
            {
              v201 = v178;
              v9 = v570;
              v173 = ZSTD_count_2segments(v199, v200, v570, v147, v143) + 4;
              v154 = (_DWORD)v149 - v135;
              v174 = ((_DWORD)v149 - v135 - v156);
              if (v149 > v5)
              {
                v150 = v566;
                if (v201 > v508)
                {
                  v175 = v149 - 1;
                  v202 = (unsigned __int8 *)(v201 - 1);
                  v144 = v562;
                  v143 = (unsigned __int8 *)(v135 + v142);
                  v147 = v558;
                  while (*v175 == *v202)
                  {
                    ++v173;
                    v177 = v175 - 1;
                    if (v175 > v5)
                    {
                      --v175;
                      v54 = (unint64_t)v202-- > v508;
                      if (v54)
                        continue;
                    }
                    goto LABEL_313;
                  }
                  goto LABEL_331;
                }
                v160 = v149;
                v144 = v562;
                v143 = (unsigned __int8 *)(v135 + v142);
                v147 = v558;
                goto LABEL_332;
              }
              goto LABEL_288;
            }
            v9 = v570;
            if (v530 <= (unint64_t)v199)
            {
              v218 = v149 + 4;
            }
            else
            {
              v211 = *(_QWORD *)v199 ^ *(_QWORD *)v200;
              if (v211)
              {
                v212 = __clz(__rbit64(v211)) >> 3;
LABEL_307:
                v173 = v212 + 4;
                v174 = ((_DWORD)v149 - v178);
                if (v149 > v5 && v178 > (unint64_t)v143)
                {
                  v175 = v149 - 1;
                  v219 = (unsigned __int8 *)(v178 - 1);
                  while (*v175 == *v219)
                  {
                    ++v173;
                    v177 = v175 - 1;
                    if (v175 > v5)
                    {
                      --v175;
                      v54 = v219-- > v143;
                      if (v54)
                        continue;
                    }
                    goto LABEL_313;
                  }
                  goto LABEL_331;
                }
LABEL_314:
                v160 = v149;
                goto LABEL_332;
              }
              v245 = 0;
              v246 = v149 + 12;
              while (1)
              {
                v247 = &v246[v245];
                if ((unint64_t)&v246[v245] >= v530)
                  break;
                v248 = *(_QWORD *)(v178 + 12 + v245);
                v245 += 8;
                v249 = *(_QWORD *)v247 ^ v248;
                if (v249)
                {
                  v212 = v245 + (__clz(__rbit64(v249)) >> 3);
                  goto LABEL_307;
                }
              }
              v218 = &v149[v245 + 12];
              v200 = (char *)(v178 + v245 + 12);
            }
            if ((unint64_t)v218 < v516 && *(_DWORD *)v200 == *(_DWORD *)v218)
            {
              v218 += 4;
              v200 += 4;
            }
            if ((unint64_t)v218 < v512 && *(unsigned __int16 *)v200 == *(unsigned __int16 *)v218)
            {
              v218 += 2;
              v200 += 2;
            }
            if ((unint64_t)v218 < v570 && *v200 == *v218)
              ++v218;
            v212 = v218 - (unsigned __int8 *)v199;
            goto LABEL_307;
          }
        }
      }
      else
      {
        v178 = v135 + v156;
        if (*(_DWORD *)(v135 + v156) == *(_DWORD *)v149)
          goto LABEL_231;
      }
      _X8 = &v149[(v149 - v5) >> 8];
      v149 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
      v9 = v570;
LABEL_364:
      v148 = v550;
      if ((unint64_t)v149 >= v144)
      {
LABEL_568:
        a3 = v519;
        goto LABEL_569;
      }
    }
    v9 = v570;
    if (v158 >= v142)
      v147 = (char *)v570;
    v161 = ZSTD_count_2segments(v149 + 5, (char *)(v159 + 4), v570, v147, v143);
    v150 = v566;
    v162 = v160 - v5;
    v163 = *(_OWORD **)(a2 + 24);
    if (v160 <= v566)
    {
      *v163 = *(_OWORD *)v5;
      v190 = *(_QWORD *)(a2 + 24);
      if (v162 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v190 + v162;
        v208 = *(_QWORD *)(a2 + 8);
        v144 = v562;
        v143 = (unsigned __int8 *)(v135 + v142);
        v147 = v558;
        v154 = (_DWORD)v149 - v135;
        goto LABEL_286;
      }
      v191 = (_OWORD *)(v190 + 16);
      v192 = v190 + v162;
      v193 = (__int128 *)(v5 + 16);
      v144 = v562;
      v143 = (unsigned __int8 *)(v135 + v142);
      v147 = v558;
      v154 = (_DWORD)v149 - v135;
      do
      {
        v194 = *v193++;
        *v191++ = v194;
      }
      while ((unint64_t)v191 < v192);
    }
    else
    {
      if (v5 <= v566)
      {
        v165 = (char *)v163 + v566 - v5;
        v203 = v5;
        v144 = v562;
        v143 = (unsigned __int8 *)(v135 + v142);
        v147 = v558;
        v154 = (_DWORD)v149 - v135;
        do
        {
          v204 = *(_OWORD *)v203;
          v203 += 16;
          *v163++ = v204;
        }
        while (v163 < (_OWORD *)v165);
        v164 = v566;
      }
      else
      {
        v164 = v5;
        v165 = *(_BYTE **)(a2 + 24);
        v144 = v562;
        v143 = (unsigned __int8 *)(v135 + v142);
        v147 = v558;
        v154 = (_DWORD)v149 - v135;
      }
      if (v164 < v160)
      {
        if (v5 <= v566)
          v205 = v566;
        else
          v205 = v5;
        v206 = v149 - v205 + 1;
        do
        {
          v207 = *v164++;
          *v165++ = v207;
          --v206;
        }
        while (v206);
      }
    }
    *(_QWORD *)(a2 + 24) += v162;
    v208 = *(_QWORD *)(a2 + 8);
    if (v162 >= 0x10000)
    {
      v209 = (unint64_t)(v208 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v209;
    }
LABEL_286:
    v173 = v161 + 4;
    *(_WORD *)(v208 + 4) = v162;
    *(_DWORD *)v208 = 1;
    v210 = v161 + 1;
    v174 = v20;
    if ((v161 + 1) >> 16)
      goto LABEL_347;
    goto LABEL_348;
  }
  if (v7 != 6)
  {
    if (v7 == 7)
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = (unint64_t)&a4[a5];
      v10 = (_DWORD)a4 + a5 - v8;
      v11 = 1 << *(_DWORD *)(a1 + 240);
      v12 = *(_DWORD *)(a1 + 24);
      v13 = v10 - v12;
      v14 = v10 - v11;
      if (v13 > v11 && *(_DWORD *)(a1 + 40) == 0)
        v16 = v14;
      else
        v16 = v12;
      v17 = (unsigned __int8 *)(v8 + v16);
      v18 = v9 - 8;
      v20 = *a3;
      v19 = a3[1];
      v21 = *(_QWORD *)(a1 + 232);
      v22 = *(unsigned int *)(v21 + 24);
      v23 = *(char **)v21;
      v24 = *(_QWORD *)(v21 + 8);
      if ((_DWORD)v5 - ((_DWORD)v24 + (_DWORD)v22) - ((_DWORD)v8 + (_DWORD)v16) + *(_QWORD *)v21)
        v25 = v5;
      else
        v25 = v5 + 1;
      if ((unint64_t)v25 < v18)
      {
        v507 = v24 + v22;
        v541 = *(_DWORD *)(v21 + 24);
        v519 = a3;
        v589 = *(_QWORD *)(a1 + 96);
        v581 = *(_QWORD *)(a1 + 112);
        v537 = *(_QWORD *)(v21 + 96);
        v585 = 64 - *(_DWORD *)(a1 + 248);
        v577 = 64 - *(_DWORD *)(a1 + 244);
        v533 = 64 - *(_DWORD *)(v21 + 248);
        v525 = 64 - *(_DWORD *)(v21 + 244);
        v573 = v16 - 1;
        v529 = v9 - 7;
        v521 = *(_QWORD *)(v21 + 112);
        v511 = v9 - 1;
        v515 = v9 - 3;
        v26 = (unsigned __int8 *)(v9 - 32);
        v545 = v16 + v24 - (_DWORD)v23;
        v553 = v24 - v545;
        v557 = *(char **)v21;
        v495 = v24 - 1;
        v499 = v8 + 16;
        v503 = v8 - 1;
        v561 = v9 - 8;
        v565 = (unsigned __int8 *)(v9 - 32);
        v569 = v9;
        v549 = *(_QWORD *)(v21 + 8);
        while (1)
        {
          v27 = *(_QWORD *)v25;
          v28 = 0xCF1BBCDCB7A56463 * *(_QWORD *)v25;
          v29 = 0xCF1BBCDCBFA56300 * *(_QWORD *)v25;
          v30 = (_DWORD)v25 - v8;
          v31 = *(unsigned int *)(v589 + 4 * (v28 >> v585));
          v32 = *(unsigned int *)(v581 + 4 * (v29 >> v577));
          v33 = (_DWORD)v25 - v8 + 1;
          v34 = (v33 - v20);
          v35 = v24 + v34 - v545;
          if (v34 >= v16)
            v35 = v8 + v34;
          *(_DWORD *)(v581 + 4 * (v29 >> v577)) = v30;
          *(_DWORD *)(v589 + 4 * (v28 >> v585)) = v30;
          if ((v573 - v34) >= 3)
          {
            v36 = v25 + 1;
            if (*(_DWORD *)v35 == *(_DWORD *)(v25 + 1))
              break;
          }
          if (v31 <= v16)
          {
            v47 = *(unsigned int *)(v537 + 4 * (v28 >> v533));
            if (v47 > v541 && *(_QWORD *)(v549 + v47) == v27)
            {
              v9 = v569;
              v48 = ZSTD_count_2segments((_QWORD *)v25 + 1, (char *)(v549 + v47 + 8), v569, v23, v17);
              v30 = (_DWORD)v25 - v8;
              v49 = v48 + 8;
              v50 = (_DWORD)v25 - (_DWORD)v8 - v545 - v47;
              if (v25 > v5)
              {
                v51 = v25 - 1;
                v52 = (unsigned __int8 *)(v495 + v47);
                v18 = v561;
                v17 = (unsigned __int8 *)(v8 + v16);
                v23 = v557;
                v26 = v565;
                while (*v51 == *v52)
                {
                  ++v49;
                  v53 = v51 - 1;
                  if (v51 > v5)
                  {
                    --v51;
                    v54 = (unint64_t)v52-- > v507;
                    if (v54)
                      continue;
                  }
LABEL_125:
                  v36 = v53 + 1;
                  goto LABEL_144;
                }
LABEL_143:
                v36 = v51 + 1;
LABEL_144:
                v102 = v36 - v5;
                v103 = *(_OWORD **)(a2 + 24);
                if (v36 <= v26)
                {
                  *v103 = *(_OWORD *)v5;
                  v107 = *(_QWORD *)(a2 + 24);
                  if (v102 > 0x10)
                  {
                    v108 = (_OWORD *)(v107 + 16);
                    v109 = v107 + v102;
                    v110 = (__int128 *)(v5 + 16);
                    do
                    {
                      v111 = *v110++;
                      *v108++ = v111;
                    }
                    while ((unint64_t)v108 < v109);
                    goto LABEL_155;
                  }
                  *(_QWORD *)(a2 + 24) = v107 + v102;
                  v88 = *(_QWORD *)(a2 + 8);
                }
                else
                {
                  if (v5 <= v26)
                  {
                    v104 = (_OWORD *)((char *)v103 + v26 - v5);
                    do
                    {
                      v105 = *(_OWORD *)v5;
                      v5 += 16;
                      *v103++ = v105;
                    }
                    while (v103 < v104);
                    v5 = v26;
                    v103 = v104;
                  }
                  while (v5 < v36)
                  {
                    v106 = *v5++;
                    *(_BYTE *)v103 = v106;
                    v103 = (_OWORD *)((char *)v103 + 1);
                  }
LABEL_155:
                  *(_QWORD *)(a2 + 24) += v102;
                  v88 = *(_QWORD *)(a2 + 8);
                  if (v102 >= 0x10000)
                  {
                    v112 = (unint64_t)(v88 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 1;
                    *(_DWORD *)(a2 + 76) = v112;
                  }
                }
                *(_WORD *)(v88 + 4) = v102;
                *(_DWORD *)v88 = v50 + 3;
                v90 = v49 - 3;
                v19 = v20;
                v20 = v50;
                if (v49 - 3 >= 0x10000)
                {
LABEL_159:
                  v113 = (unint64_t)(v88 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v113;
                  v20 = v50;
                }
LABEL_160:
                *(_WORD *)(v88 + 6) = v90;
                v114 = v88 + 8;
                *(_QWORD *)(a2 + 8) = v88 + 8;
                v5 = &v36[v49];
                if ((unint64_t)&v36[v49] <= v18)
                {
                  v115 = *(_QWORD *)(v8 + (v30 + 2));
                  *(_DWORD *)(v589 + 4 * ((0xCF1BBCDCB7A56463 * v115) >> v585)) = v30 + 2;
                  *(_DWORD *)(v589 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 - 2)) >> v585)) = (_DWORD)v5 - 2 - v8;
                  *(_DWORD *)(v581 + 4 * ((0xCF1BBCDCBFA56300 * v115) >> v577)) = v30 + 2;
                  *(_DWORD *)(v581 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v5 - 1)) >> v577)) = (_DWORD)v5 - 1 - v8;
                  v116 = v20;
                  v117 = v19;
                  while (1)
                  {
                    v20 = v117;
                    v117 = v116;
                    v118 = (_DWORD)v5 - v8;
                    v119 = ((_DWORD)v5 - v8 - v20);
                    v120 = v553;
                    if (v119 >= v16)
                      v120 = v8;
                    if ((v573 - v119) < 3)
                      break;
                    v121 = v120 + v119;
                    if (*(_DWORD *)v121 != *(_DWORD *)v5)
                      break;
                    if (v119 >= v16)
                      v23 = (char *)v9;
                    v122 = ZSTD_count_2segments(v5 + 4, (char *)(v121 + 4), v9, v23, v17);
                    v26 = v565;
                    if (v5 <= v565)
                    {
                      *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                      v114 = *(_QWORD *)(a2 + 8);
                    }
                    *(_WORD *)(v114 + 4) = 0;
                    *(_DWORD *)v114 = 1;
                    v18 = v561;
                    if (v122 + 1 >= 0x10000)
                    {
                      v123 = (unint64_t)(v114 - *(_QWORD *)a2) >> 3;
                      *(_DWORD *)(a2 + 72) = 2;
                      *(_DWORD *)(a2 + 76) = v123;
                    }
                    *(_WORD *)(v114 + 6) = v122 + 1;
                    v114 += 8;
                    v124 = *(_QWORD *)v5;
                    *(_DWORD *)(v581 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v5) >> v577)) = v118;
                    *(_DWORD *)(v589 + 4 * ((0xCF1BBCDCB7A56463 * v124) >> v585)) = v118;
                    v5 += v122 + 4;
                    *(_QWORD *)(a2 + 8) = v114;
                    v116 = v20;
                    v19 = v117;
                    v25 = v5;
                    v17 = (unsigned __int8 *)(v8 + v16);
                    v23 = v557;
                    if ((unint64_t)v5 > v561)
                      goto LABEL_176;
                  }
                  v19 = v20;
                  v20 = v116;
                }
                v25 = v5;
                goto LABEL_176;
              }
LABEL_100:
              v36 = v25;
              v18 = v561;
              v17 = (unsigned __int8 *)(v8 + v16);
              v23 = v557;
              v26 = v565;
              goto LABEL_144;
            }
          }
          else
          {
            v42 = v8 + v31;
            if (*(_QWORD *)(v8 + v31) == v27)
            {
              v43 = (char *)(v25 + 8);
              v44 = (_QWORD *)(v42 + 8);
              if (v529 <= (unint64_t)(v25 + 8))
              {
                v75 = v25 + 8;
              }
              else
              {
                v45 = *(_QWORD *)v43 ^ *v44;
                if (v45)
                {
                  v46 = __clz(__rbit64(v45)) >> 3;
                  v9 = v569;
                  goto LABEL_64;
                }
                v93 = 0;
                v94 = v25 + 16;
                v9 = v569;
                while (1)
                {
                  v95 = &v94[v93];
                  if ((unint64_t)&v94[v93] >= v529)
                    break;
                  v96 = *(_QWORD *)(v499 + v31 + v93);
                  v93 += 8;
                  v97 = *(_QWORD *)v95 ^ v96;
                  if (v97)
                  {
                    v46 = v93 + (__clz(__rbit64(v97)) >> 3);
                    goto LABEL_64;
                  }
                }
                v75 = &v25[v93 + 16];
                v44 = (_QWORD *)(v499 + v31 + v93);
              }
              if ((unint64_t)v75 < v515 && *(_DWORD *)v44 == *(_DWORD *)v75)
              {
                v75 += 4;
                v44 = (_QWORD *)((char *)v44 + 4);
              }
              v9 = v569;
              if ((unint64_t)v75 < v511 && *(unsigned __int16 *)v44 == *(unsigned __int16 *)v75)
              {
                v75 += 2;
                v44 = (_QWORD *)((char *)v44 + 2);
              }
              if ((unint64_t)v75 < v569 && *(unsigned __int8 *)v44 == *v75)
                ++v75;
              v46 = v75 - (unsigned __int8 *)v43;
LABEL_64:
              v49 = v46 + 8;
              v50 = ((_DWORD)v25 - v42);
              if (v25 > v5)
              {
                v51 = v25 - 1;
                v76 = (unsigned __int8 *)(v503 + v31);
                while (*v51 == *v76)
                {
                  ++v49;
                  v53 = v51 - 1;
                  if (v51 > v5)
                  {
                    --v51;
                    v54 = v76-- > v17;
                    if (v54)
                      continue;
                  }
                  goto LABEL_125;
                }
                goto LABEL_143;
              }
              goto LABEL_126;
            }
          }
          if (v32 <= v16)
          {
            v56 = *(unsigned int *)(v521 + 4 * (v29 >> v525));
            if (v56 > v541)
            {
              v55 = v549 + v56;
              if (*(_DWORD *)(v549 + v56) == *(_DWORD *)v25)
              {
                LODWORD(v32) = v56 + v545;
LABEL_43:
                v36 = v25 + 1;
                v57 = *(_QWORD *)(v25 + 1);
                v58 = (0xCF1BBCDCB7A56463 * v57) >> v585;
                v59 = *(unsigned int *)(v589 + 4 * v58);
                *(_DWORD *)(v589 + 4 * v58) = v33;
                if (v59 <= v16)
                {
                  v77 = *(unsigned int *)(v537 + 4 * ((0xCF1BBCDCB7A56463 * v57) >> v533));
                  if (v77 > v541 && *(_QWORD *)(v549 + v77) == v57)
                  {
                    v49 = ZSTD_count_2segments(v25 + 9, (char *)(v549 + v77 + 8), v569, v23, v17) + 8;
                    v50 = v33 - v545 - v77;
                    if (v36 <= v5)
                    {
                      v26 = v565;
                      v9 = v569;
                      v18 = v561;
                      v17 = (unsigned __int8 *)(v8 + v16);
                      v23 = v557;
                      v30 = (_DWORD)v25 - v8;
                      goto LABEL_144;
                    }
                    v78 = (unsigned __int8 *)(v495 + v77);
                    v26 = v565;
                    v9 = v569;
                    v18 = v561;
                    v17 = (unsigned __int8 *)(v8 + v16);
                    v23 = v557;
                    v30 = (_DWORD)v25 - v8;
                    while (*v25 == *v78)
                    {
                      ++v49;
                      v51 = v25 - 1;
                      if ((unint64_t)v78 > v507)
                      {
                        --v78;
                        v54 = v25-- > v5;
                        if (v54)
                          continue;
                      }
                      goto LABEL_143;
                    }
                    goto LABEL_179;
                  }
                }
                else
                {
                  v60 = v8 + v59;
                  if (*(_QWORD *)(v8 + v59) == v57)
                  {
                    v61 = (char *)(v25 + 9);
                    v62 = (_QWORD *)(v60 + 8);
                    if (v529 <= (unint64_t)(v25 + 9))
                    {
                      v100 = v25 + 9;
                      v9 = v569;
                    }
                    else
                    {
                      v63 = *(_QWORD *)v61 ^ *v62;
                      v9 = v569;
                      if (v63)
                      {
                        v64 = __clz(__rbit64(v63)) >> 3;
                        goto LABEL_138;
                      }
                      v130 = 0;
                      v131 = v25 + 17;
                      while (1)
                      {
                        v132 = &v131[v130];
                        if ((unint64_t)&v131[v130] >= v529)
                          break;
                        v133 = *(_QWORD *)(v499 + v59 + v130);
                        v130 += 8;
                        v134 = *(_QWORD *)v132 ^ v133;
                        if (v134)
                        {
                          v64 = v130 + (__clz(__rbit64(v134)) >> 3);
                          goto LABEL_138;
                        }
                      }
                      v100 = &v25[v130 + 17];
                      v62 = (_QWORD *)(v499 + v59 + v130);
                    }
                    if ((unint64_t)v100 < v515 && *(_DWORD *)v62 == *(_DWORD *)v100)
                    {
                      v100 += 4;
                      v62 = (_QWORD *)((char *)v62 + 4);
                    }
                    if ((unint64_t)v100 < v511 && *(unsigned __int16 *)v62 == *(unsigned __int16 *)v100)
                    {
                      v100 += 2;
                      v62 = (_QWORD *)((char *)v62 + 2);
                    }
                    if ((unint64_t)v100 < v9 && *(unsigned __int8 *)v62 == *v100)
                      ++v100;
                    v64 = v100 - (unsigned __int8 *)v61;
LABEL_138:
                    v49 = v64 + 8;
                    v50 = ((_DWORD)v36 - v60);
                    if (v36 <= v5)
                      goto LABEL_144;
                    v101 = (unsigned __int8 *)(v503 + v59);
                    while (*v25 == *v101)
                    {
                      ++v49;
                      v51 = v25 - 1;
                      if (v101 > v17)
                      {
                        --v101;
                        v54 = v25-- > v5;
                        if (v54)
                          continue;
                      }
                      goto LABEL_143;
                    }
LABEL_179:
                    v36 = v25 + 1;
                    goto LABEL_144;
                  }
                }
                v79 = (char *)(v25 + 4);
                v80 = (char *)(v55 + 4);
                if (v32 < v16)
                {
                  v81 = v55;
                  v9 = v569;
                  v49 = ZSTD_count_2segments(v79, v80, v569, v23, v17) + 4;
                  v30 = (_DWORD)v25 - v8;
                  v50 = ((_DWORD)v25 - v8 - v32);
                  if (v25 > v5)
                  {
                    v26 = v565;
                    if (v81 > v507)
                    {
                      v51 = v25 - 1;
                      v82 = (unsigned __int8 *)(v81 - 1);
                      v18 = v561;
                      v17 = (unsigned __int8 *)(v8 + v16);
                      v23 = v557;
                      while (*v51 == *v82)
                      {
                        ++v49;
                        v53 = v51 - 1;
                        if (v51 > v5)
                        {
                          --v51;
                          v54 = (unint64_t)v82-- > v507;
                          if (v54)
                            continue;
                        }
                        goto LABEL_125;
                      }
                      goto LABEL_143;
                    }
                    v36 = v25;
                    v18 = v561;
                    v17 = (unsigned __int8 *)(v8 + v16);
                    v23 = v557;
                    goto LABEL_144;
                  }
                  goto LABEL_100;
                }
                v9 = v569;
                if (v529 <= (unint64_t)v79)
                {
                  v98 = v25 + 4;
                }
                else
                {
                  v91 = *(_QWORD *)v79 ^ *(_QWORD *)v80;
                  if (v91)
                  {
                    v92 = __clz(__rbit64(v91)) >> 3;
LABEL_119:
                    v49 = v92 + 4;
                    v50 = ((_DWORD)v25 - v55);
                    if (v25 > v5 && v55 > (unint64_t)v17)
                    {
                      v51 = v25 - 1;
                      v99 = (unsigned __int8 *)(v55 - 1);
                      while (*v51 == *v99)
                      {
                        ++v49;
                        v53 = v51 - 1;
                        if (v51 > v5)
                        {
                          --v51;
                          v54 = v99-- > v17;
                          if (v54)
                            continue;
                        }
                        goto LABEL_125;
                      }
                      goto LABEL_143;
                    }
LABEL_126:
                    v36 = v25;
                    goto LABEL_144;
                  }
                  v125 = 0;
                  v126 = v25 + 12;
                  while (1)
                  {
                    v127 = &v126[v125];
                    if ((unint64_t)&v126[v125] >= v529)
                      break;
                    v128 = *(_QWORD *)(v55 + 12 + v125);
                    v125 += 8;
                    v129 = *(_QWORD *)v127 ^ v128;
                    if (v129)
                    {
                      v92 = v125 + (__clz(__rbit64(v129)) >> 3);
                      goto LABEL_119;
                    }
                  }
                  v98 = &v25[v125 + 12];
                  v80 = (char *)(v55 + v125 + 12);
                }
                if ((unint64_t)v98 < v515 && *(_DWORD *)v80 == *(_DWORD *)v98)
                {
                  v98 += 4;
                  v80 += 4;
                }
                if ((unint64_t)v98 < v511 && *(unsigned __int16 *)v80 == *(unsigned __int16 *)v98)
                {
                  v98 += 2;
                  v80 += 2;
                }
                if ((unint64_t)v98 < v569 && *v80 == *v98)
                  ++v98;
                v92 = v98 - (unsigned __int8 *)v79;
                goto LABEL_119;
              }
            }
          }
          else
          {
            v55 = v8 + v32;
            if (*(_DWORD *)(v8 + v32) == *(_DWORD *)v25)
              goto LABEL_43;
          }
          _X8 = &v25[(v25 - v5) >> 8];
          v25 = _X8 + 1;
          _X8 += 257;
          __asm { PRFM            #0, [X8] }
          v9 = v569;
LABEL_176:
          v24 = v549;
          if ((unint64_t)v25 >= v18)
            goto LABEL_568;
        }
        v9 = v569;
        if (v34 >= v16)
          v23 = (char *)v569;
        v37 = ZSTD_count_2segments(v25 + 5, (char *)(v35 + 4), v569, v23, v17);
        v26 = v565;
        v38 = v36 - v5;
        v39 = *(_OWORD **)(a2 + 24);
        if (v36 <= v565)
        {
          *v39 = *(_OWORD *)v5;
          v70 = *(_QWORD *)(a2 + 24);
          if (v38 <= 0x10)
          {
            *(_QWORD *)(a2 + 24) = v70 + v38;
            v88 = *(_QWORD *)(a2 + 8);
            v18 = v561;
            v17 = (unsigned __int8 *)(v8 + v16);
            v23 = v557;
            v30 = (_DWORD)v25 - v8;
            goto LABEL_98;
          }
          v71 = (_OWORD *)(v70 + 16);
          v72 = v70 + v38;
          v73 = (__int128 *)(v5 + 16);
          v18 = v561;
          v17 = (unsigned __int8 *)(v8 + v16);
          v23 = v557;
          v30 = (_DWORD)v25 - v8;
          do
          {
            v74 = *v73++;
            *v71++ = v74;
          }
          while ((unint64_t)v71 < v72);
        }
        else
        {
          if (v5 <= v565)
          {
            v41 = (char *)v39 + v565 - v5;
            v83 = v5;
            v18 = v561;
            v17 = (unsigned __int8 *)(v8 + v16);
            v23 = v557;
            v30 = (_DWORD)v25 - v8;
            do
            {
              v84 = *(_OWORD *)v83;
              v83 += 16;
              *v39++ = v84;
            }
            while (v39 < (_OWORD *)v41);
            v40 = v565;
          }
          else
          {
            v40 = v5;
            v41 = *(_BYTE **)(a2 + 24);
            v18 = v561;
            v17 = (unsigned __int8 *)(v8 + v16);
            v23 = v557;
            v30 = (_DWORD)v25 - v8;
          }
          if (v40 < v36)
          {
            if (v5 <= v565)
              v85 = v565;
            else
              v85 = v5;
            v86 = v25 - v85 + 1;
            do
            {
              v87 = *v40++;
              *v41++ = v87;
              --v86;
            }
            while (v86);
          }
        }
        *(_QWORD *)(a2 + 24) += v38;
        v88 = *(_QWORD *)(a2 + 8);
        if (v38 >= 0x10000)
        {
          v89 = (unint64_t)(v88 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v89;
        }
LABEL_98:
        v49 = v37 + 4;
        *(_WORD *)(v88 + 4) = v38;
        *(_DWORD *)v88 = 1;
        v90 = v37 + 1;
        v50 = v20;
        if ((v37 + 1) >> 16)
          goto LABEL_159;
        goto LABEL_160;
      }
      goto LABEL_569;
    }
    v375 = *(_QWORD *)(a1 + 8);
    v9 = (unint64_t)&a4[a5];
    v376 = (_DWORD)a4 + a5 - v375;
    v377 = 1 << *(_DWORD *)(a1 + 240);
    v378 = *(_DWORD *)(a1 + 24);
    v379 = v376 - v378;
    v380 = v376 - v377;
    if (v379 > v377 && *(_DWORD *)(a1 + 40) == 0)
      v382 = v380;
    else
      v382 = v378;
    v383 = (unsigned __int8 *)(v375 + v382);
    v384 = v9 - 8;
    v385 = *a3;
    v19 = a3[1];
    v386 = *(_QWORD *)(a1 + 232);
    v387 = *(unsigned int *)(v386 + 24);
    v388 = *(char **)v386;
    v389 = *(_QWORD *)(v386 + 8);
    if ((_DWORD)v5 - ((_DWORD)v389 + (_DWORD)v387) - ((_DWORD)v375 + (_DWORD)v382) + *(_QWORD *)v386)
      v390 = v5;
    else
      v390 = v5 + 1;
    if ((unint64_t)v390 >= v384)
    {
LABEL_758:
      *a3 = v385;
      goto LABEL_759;
    }
    v510 = v389 + v387;
    v544 = *(_DWORD *)(v386 + 24);
    v520 = a3;
    v592 = *(_QWORD *)(a1 + 96);
    v584 = *(_QWORD *)(a1 + 112);
    v540 = *(_QWORD *)(v386 + 96);
    v588 = 64 - *(_DWORD *)(a1 + 248);
    v580 = 32 - *(_DWORD *)(a1 + 244);
    v536 = 64 - *(_DWORD *)(v386 + 248);
    v528 = 32 - *(_DWORD *)(v386 + 244);
    v576 = v382 - 1;
    v532 = v9 - 7;
    v524 = *(_QWORD *)(v386 + 112);
    v514 = v9 - 1;
    v518 = v9 - 3;
    v391 = (unsigned __int8 *)(v9 - 32);
    v498 = v389 - 1;
    v502 = v375 + 16;
    v506 = v375 - 1;
    v548 = v382 + v389 - (_DWORD)v388;
    v556 = v389 - v548;
    v560 = *(char **)v386;
    v564 = v9 - 8;
    v568 = (unsigned __int8 *)(v9 - 32);
    v572 = v9;
    v552 = *(_QWORD *)(v386 + 8);
    while (1)
    {
      v392 = *(_QWORD *)v390;
      v393 = 0xCF1BBCDCB7A56463 * *(_QWORD *)v390;
      v394 = -1640531535 * *(_QWORD *)v390;
      v395 = (_DWORD)v390 - v375;
      v396 = *(unsigned int *)(v592 + 4 * (v393 >> v588));
      v397 = *(unsigned int *)(v584 + 4 * (v394 >> v580));
      v398 = (_DWORD)v390 - v375 + 1;
      v399 = (v398 - v385);
      v400 = v389 + v399 - v548;
      if (v399 >= v382)
        v400 = v375 + v399;
      *(_DWORD *)(v584 + 4 * (v394 >> v580)) = v395;
      *(_DWORD *)(v592 + 4 * (v393 >> v588)) = v395;
      if ((v576 - v399) >= 3)
      {
        v401 = v390 + 1;
        if (*(_DWORD *)v400 == *(_DWORD *)(v390 + 1))
          break;
      }
      if (v396 <= v382)
      {
        v412 = *(unsigned int *)(v540 + 4 * (v393 >> v536));
        if (v412 > v544 && *(_QWORD *)(v552 + v412) == v392)
        {
          v9 = v572;
          v413 = ZSTD_count_2segments((_QWORD *)v390 + 1, (char *)(v552 + v412 + 8), v572, v388, v383);
          v395 = (_DWORD)v390 - v375;
          v414 = v413 + 8;
          v415 = (_DWORD)v390 - (_DWORD)v375 - v548 - v412;
          if (v390 > v5)
          {
            v416 = v390 - 1;
            v417 = (unsigned __int8 *)(v498 + v412);
            v384 = v564;
            v383 = (unsigned __int8 *)(v375 + v382);
            v388 = v560;
            v391 = v568;
            while (*v416 == *v417)
            {
              ++v414;
              v418 = v416 - 1;
              if (v416 > v5)
              {
                --v416;
                v54 = (unint64_t)v417-- > v510;
                if (v54)
                  continue;
              }
LABEL_691:
              v401 = v418 + 1;
              goto LABEL_710;
            }
LABEL_709:
            v401 = v416 + 1;
LABEL_710:
            v463 = v401 - v5;
            v464 = *(_OWORD **)(a2 + 24);
            if (v401 <= v391)
            {
              *v464 = *(_OWORD *)v5;
              v468 = *(_QWORD *)(a2 + 24);
              if (v463 > 0x10)
              {
                v469 = (_OWORD *)(v468 + 16);
                v470 = v468 + v463;
                v471 = (__int128 *)(v5 + 16);
                do
                {
                  v472 = *v471++;
                  *v469++ = v472;
                }
                while ((unint64_t)v469 < v470);
                goto LABEL_721;
              }
              *(_QWORD *)(a2 + 24) = v468 + v463;
              v449 = *(_QWORD *)(a2 + 8);
            }
            else
            {
              if (v5 <= v391)
              {
                v465 = (_OWORD *)((char *)v464 + v391 - v5);
                do
                {
                  v466 = *(_OWORD *)v5;
                  v5 += 16;
                  *v464++ = v466;
                }
                while (v464 < v465);
                v5 = v391;
                v464 = v465;
              }
              while (v5 < v401)
              {
                v467 = *v5++;
                *(_BYTE *)v464 = v467;
                v464 = (_OWORD *)((char *)v464 + 1);
              }
LABEL_721:
              *(_QWORD *)(a2 + 24) += v463;
              v449 = *(_QWORD *)(a2 + 8);
              if (v463 >= 0x10000)
              {
                v473 = (unint64_t)(v449 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 1;
                *(_DWORD *)(a2 + 76) = v473;
              }
            }
            *(_WORD *)(v449 + 4) = v463;
            *(_DWORD *)v449 = v415 + 3;
            v451 = v414 - 3;
            v19 = v385;
            v385 = v415;
            if (v414 - 3 >= 0x10000)
            {
LABEL_725:
              v474 = (unint64_t)(v449 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v474;
              v385 = v415;
            }
LABEL_726:
            *(_WORD *)(v449 + 6) = v451;
            v475 = v449 + 8;
            *(_QWORD *)(a2 + 8) = v449 + 8;
            v5 = &v401[v414];
            if ((unint64_t)&v401[v414] <= v384)
            {
              *(_DWORD *)(v592 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v375 + (v395 + 2))) >> v588)) = v395 + 2;
              *(_DWORD *)(v592 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 - 2)) >> v588)) = (_DWORD)v5 - 2 - v375;
              *(_DWORD *)(v584
                        + 4 * ((-1640531535 * *(_DWORD *)(v375 + (v395 + 2))) >> v580)) = v395 + 2;
              *(_DWORD *)(v584 + 4 * ((-1640531535 * *(_DWORD *)(v5 - 1)) >> v580)) = (_DWORD)v5 - 1 - v375;
              v476 = v385;
              v477 = v19;
              while (1)
              {
                v385 = v477;
                v477 = v476;
                v478 = (_DWORD)v5 - v375;
                v479 = ((_DWORD)v5 - v375 - v385);
                v480 = v556;
                if (v479 >= v382)
                  v480 = v375;
                if ((v576 - v479) < 3)
                  break;
                v481 = v480 + v479;
                if (*(_DWORD *)v481 != *(_DWORD *)v5)
                  break;
                if (v479 >= v382)
                  v388 = (char *)v9;
                v482 = ZSTD_count_2segments(v5 + 4, (char *)(v481 + 4), v9, v388, v383);
                v391 = v568;
                if (v5 <= v568)
                {
                  *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                  v475 = *(_QWORD *)(a2 + 8);
                }
                *(_WORD *)(v475 + 4) = 0;
                *(_DWORD *)v475 = 1;
                v384 = v564;
                if (v482 + 1 >= 0x10000)
                {
                  v483 = (unint64_t)(v475 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v483;
                }
                *(_WORD *)(v475 + 6) = v482 + 1;
                *(_DWORD *)(v584 + 4 * ((-1640531535 * *(_DWORD *)v5) >> v580)) = v478;
                v475 += 8;
                *(_DWORD *)(v592 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)v5) >> v588)) = v478;
                v5 += v482 + 4;
                *(_QWORD *)(a2 + 8) = v475;
                v476 = v385;
                v19 = v477;
                v390 = v5;
                v383 = (unsigned __int8 *)(v375 + v382);
                v388 = v560;
                if ((unint64_t)v5 > v564)
                  goto LABEL_742;
              }
              v19 = v385;
              v385 = v476;
            }
            v390 = v5;
            goto LABEL_742;
          }
LABEL_666:
          v401 = v390;
          v384 = v564;
          v383 = (unsigned __int8 *)(v375 + v382);
          v388 = v560;
          v391 = v568;
          goto LABEL_710;
        }
      }
      else
      {
        v407 = v375 + v396;
        if (*(_QWORD *)(v375 + v396) == v392)
        {
          v408 = (char *)(v390 + 8);
          v409 = (_QWORD *)(v407 + 8);
          if (v532 <= (unint64_t)(v390 + 8))
          {
            v436 = v390 + 8;
          }
          else
          {
            v410 = *(_QWORD *)v408 ^ *v409;
            if (v410)
            {
              v411 = __clz(__rbit64(v410)) >> 3;
              v9 = v572;
              goto LABEL_630;
            }
            v454 = 0;
            v455 = v390 + 16;
            v9 = v572;
            while (1)
            {
              v456 = &v455[v454];
              if ((unint64_t)&v455[v454] >= v532)
                break;
              v457 = *(_QWORD *)(v502 + v396 + v454);
              v454 += 8;
              v458 = *(_QWORD *)v456 ^ v457;
              if (v458)
              {
                v411 = v454 + (__clz(__rbit64(v458)) >> 3);
                goto LABEL_630;
              }
            }
            v436 = &v390[v454 + 16];
            v409 = (_QWORD *)(v502 + v396 + v454);
          }
          if ((unint64_t)v436 < v518 && *(_DWORD *)v409 == *(_DWORD *)v436)
          {
            v436 += 4;
            v409 = (_QWORD *)((char *)v409 + 4);
          }
          v9 = v572;
          if ((unint64_t)v436 < v514 && *(unsigned __int16 *)v409 == *(unsigned __int16 *)v436)
          {
            v436 += 2;
            v409 = (_QWORD *)((char *)v409 + 2);
          }
          if ((unint64_t)v436 < v572 && *(unsigned __int8 *)v409 == *v436)
            ++v436;
          v411 = v436 - (unsigned __int8 *)v408;
LABEL_630:
          v414 = v411 + 8;
          v415 = ((_DWORD)v390 - v407);
          if (v390 > v5)
          {
            v416 = v390 - 1;
            v437 = (unsigned __int8 *)(v506 + v396);
            while (*v416 == *v437)
            {
              ++v414;
              v418 = v416 - 1;
              if (v416 > v5)
              {
                --v416;
                v54 = v437-- > v383;
                if (v54)
                  continue;
              }
              goto LABEL_691;
            }
            goto LABEL_709;
          }
          goto LABEL_692;
        }
      }
      if (v397 <= v382)
      {
        v420 = *(unsigned int *)(v524 + 4 * (v394 >> v528));
        if (v420 > v544)
        {
          v419 = v552 + v420;
          if (*(_DWORD *)(v552 + v420) == *(_DWORD *)v390)
          {
            LODWORD(v397) = v420 + v548;
LABEL_609:
            v401 = v390 + 1;
            v421 = *(_QWORD *)(v390 + 1);
            v422 = (0xCF1BBCDCB7A56463 * v421) >> v588;
            v423 = *(unsigned int *)(v592 + 4 * v422);
            *(_DWORD *)(v592 + 4 * v422) = v398;
            if (v423 <= v382)
            {
              v438 = *(unsigned int *)(v540 + 4 * ((0xCF1BBCDCB7A56463 * v421) >> v536));
              if (v438 > v544 && *(_QWORD *)(v552 + v438) == v421)
              {
                v414 = ZSTD_count_2segments(v390 + 9, (char *)(v552 + v438 + 8), v572, v388, v383) + 8;
                v415 = v398 - v548 - v438;
                if (v401 <= v5)
                {
                  v391 = v568;
                  v9 = v572;
                  v384 = v564;
                  v383 = (unsigned __int8 *)(v375 + v382);
                  v388 = v560;
                  v395 = (_DWORD)v390 - v375;
                  goto LABEL_710;
                }
                v439 = (unsigned __int8 *)(v498 + v438);
                v391 = v568;
                v9 = v572;
                v384 = v564;
                v383 = (unsigned __int8 *)(v375 + v382);
                v388 = v560;
                v395 = (_DWORD)v390 - v375;
                while (*v390 == *v439)
                {
                  ++v414;
                  v416 = v390 - 1;
                  if ((unint64_t)v439 > v510)
                  {
                    --v439;
                    v54 = v390-- > v5;
                    if (v54)
                      continue;
                  }
                  goto LABEL_709;
                }
                goto LABEL_745;
              }
            }
            else
            {
              v424 = v375 + v423;
              if (*(_QWORD *)(v375 + v423) == v421)
              {
                v425 = (char *)(v390 + 9);
                v426 = (_QWORD *)(v424 + 8);
                if (v532 <= (unint64_t)(v390 + 9))
                {
                  v461 = v390 + 9;
                  v9 = v572;
                }
                else
                {
                  v427 = *(_QWORD *)v425 ^ *v426;
                  v9 = v572;
                  if (v427)
                  {
                    v428 = __clz(__rbit64(v427)) >> 3;
                    goto LABEL_704;
                  }
                  v489 = 0;
                  v490 = v390 + 17;
                  while (1)
                  {
                    v491 = &v490[v489];
                    if ((unint64_t)&v490[v489] >= v532)
                      break;
                    v492 = *(_QWORD *)(v502 + v423 + v489);
                    v489 += 8;
                    v493 = *(_QWORD *)v491 ^ v492;
                    if (v493)
                    {
                      v428 = v489 + (__clz(__rbit64(v493)) >> 3);
                      goto LABEL_704;
                    }
                  }
                  v461 = &v390[v489 + 17];
                  v426 = (_QWORD *)(v502 + v423 + v489);
                }
                if ((unint64_t)v461 < v518 && *(_DWORD *)v426 == *(_DWORD *)v461)
                {
                  v461 += 4;
                  v426 = (_QWORD *)((char *)v426 + 4);
                }
                if ((unint64_t)v461 < v514 && *(unsigned __int16 *)v426 == *(unsigned __int16 *)v461)
                {
                  v461 += 2;
                  v426 = (_QWORD *)((char *)v426 + 2);
                }
                if ((unint64_t)v461 < v9 && *(unsigned __int8 *)v426 == *v461)
                  ++v461;
                v428 = v461 - (unsigned __int8 *)v425;
LABEL_704:
                v414 = v428 + 8;
                v415 = ((_DWORD)v401 - v424);
                if (v401 <= v5)
                  goto LABEL_710;
                v462 = (unsigned __int8 *)(v506 + v423);
                while (*v390 == *v462)
                {
                  ++v414;
                  v416 = v390 - 1;
                  if (v462 > v383)
                  {
                    --v462;
                    v54 = v390-- > v5;
                    if (v54)
                      continue;
                  }
                  goto LABEL_709;
                }
LABEL_745:
                v401 = v390 + 1;
                goto LABEL_710;
              }
            }
            v440 = (char *)(v390 + 4);
            v441 = (char *)(v419 + 4);
            if (v397 < v382)
            {
              v442 = v419;
              v9 = v572;
              v414 = ZSTD_count_2segments(v440, v441, v572, v388, v383) + 4;
              v395 = (_DWORD)v390 - v375;
              v415 = ((_DWORD)v390 - v375 - v397);
              if (v390 > v5)
              {
                v391 = v568;
                if (v442 > v510)
                {
                  v416 = v390 - 1;
                  v443 = (unsigned __int8 *)(v442 - 1);
                  v384 = v564;
                  v383 = (unsigned __int8 *)(v375 + v382);
                  v388 = v560;
                  while (*v416 == *v443)
                  {
                    ++v414;
                    v418 = v416 - 1;
                    if (v416 > v5)
                    {
                      --v416;
                      v54 = (unint64_t)v443-- > v510;
                      if (v54)
                        continue;
                    }
                    goto LABEL_691;
                  }
                  goto LABEL_709;
                }
                v401 = v390;
                v384 = v564;
                v383 = (unsigned __int8 *)(v375 + v382);
                v388 = v560;
                goto LABEL_710;
              }
              goto LABEL_666;
            }
            v9 = v572;
            if (v532 <= (unint64_t)v440)
            {
              v459 = v390 + 4;
            }
            else
            {
              v452 = *(_QWORD *)v440 ^ *(_QWORD *)v441;
              if (v452)
              {
                v453 = __clz(__rbit64(v452)) >> 3;
LABEL_685:
                v414 = v453 + 4;
                v415 = ((_DWORD)v390 - v419);
                if (v390 > v5 && v419 > (unint64_t)v383)
                {
                  v416 = v390 - 1;
                  v460 = (unsigned __int8 *)(v419 - 1);
                  while (*v416 == *v460)
                  {
                    ++v414;
                    v418 = v416 - 1;
                    if (v416 > v5)
                    {
                      --v416;
                      v54 = v460-- > v383;
                      if (v54)
                        continue;
                    }
                    goto LABEL_691;
                  }
                  goto LABEL_709;
                }
LABEL_692:
                v401 = v390;
                goto LABEL_710;
              }
              v484 = 0;
              v485 = v390 + 12;
              while (1)
              {
                v486 = &v485[v484];
                if ((unint64_t)&v485[v484] >= v532)
                  break;
                v487 = *(_QWORD *)(v419 + 12 + v484);
                v484 += 8;
                v488 = *(_QWORD *)v486 ^ v487;
                if (v488)
                {
                  v453 = v484 + (__clz(__rbit64(v488)) >> 3);
                  goto LABEL_685;
                }
              }
              v459 = &v390[v484 + 12];
              v441 = (char *)(v419 + v484 + 12);
            }
            if ((unint64_t)v459 < v518 && *(_DWORD *)v441 == *(_DWORD *)v459)
            {
              v459 += 4;
              v441 += 4;
            }
            if ((unint64_t)v459 < v514 && *(unsigned __int16 *)v441 == *(unsigned __int16 *)v459)
            {
              v459 += 2;
              v441 += 2;
            }
            if ((unint64_t)v459 < v572 && *v441 == *v459)
              ++v459;
            v453 = v459 - (unsigned __int8 *)v440;
            goto LABEL_685;
          }
        }
      }
      else
      {
        v419 = v375 + v397;
        if (*(_DWORD *)(v375 + v397) == *(_DWORD *)v390)
          goto LABEL_609;
      }
      _X8 = &v390[(v390 - v5) >> 8];
      v390 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
      v9 = v572;
LABEL_742:
      v389 = v552;
      if ((unint64_t)v390 >= v384)
      {
        a3 = v520;
        goto LABEL_758;
      }
    }
    v9 = v572;
    if (v399 >= v382)
      v388 = (char *)v572;
    v402 = ZSTD_count_2segments(v390 + 5, (char *)(v400 + 4), v572, v388, v383);
    v391 = v568;
    v403 = v401 - v5;
    v404 = *(_OWORD **)(a2 + 24);
    if (v401 <= v568)
    {
      *v404 = *(_OWORD *)v5;
      v431 = *(_QWORD *)(a2 + 24);
      if (v403 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v431 + v403;
        v449 = *(_QWORD *)(a2 + 8);
        v384 = v564;
        v383 = (unsigned __int8 *)(v375 + v382);
        v388 = v560;
        v395 = (_DWORD)v390 - v375;
        goto LABEL_664;
      }
      v432 = (_OWORD *)(v431 + 16);
      v433 = v431 + v403;
      v434 = (__int128 *)(v5 + 16);
      v384 = v564;
      v383 = (unsigned __int8 *)(v375 + v382);
      v388 = v560;
      v395 = (_DWORD)v390 - v375;
      do
      {
        v435 = *v434++;
        *v432++ = v435;
      }
      while ((unint64_t)v432 < v433);
    }
    else
    {
      if (v5 <= v568)
      {
        v406 = (char *)v404 + v568 - v5;
        v444 = v5;
        v384 = v564;
        v383 = (unsigned __int8 *)(v375 + v382);
        v388 = v560;
        v395 = (_DWORD)v390 - v375;
        do
        {
          v445 = *(_OWORD *)v444;
          v444 += 16;
          *v404++ = v445;
        }
        while (v404 < (_OWORD *)v406);
        v405 = v568;
      }
      else
      {
        v405 = v5;
        v406 = *(_BYTE **)(a2 + 24);
        v384 = v564;
        v383 = (unsigned __int8 *)(v375 + v382);
        v388 = v560;
        v395 = (_DWORD)v390 - v375;
      }
      if (v405 < v401)
      {
        if (v5 <= v568)
          v446 = v568;
        else
          v446 = v5;
        v447 = v390 - v446 + 1;
        do
        {
          v448 = *v405++;
          *v406++ = v448;
          --v447;
        }
        while (v447);
      }
    }
    *(_QWORD *)(a2 + 24) += v403;
    v449 = *(_QWORD *)(a2 + 8);
    if (v403 >= 0x10000)
    {
      v450 = (unint64_t)(v449 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v450;
    }
LABEL_664:
    v414 = v402 + 4;
    *(_WORD *)(v449 + 4) = v403;
    *(_DWORD *)v449 = 1;
    v451 = v402 + 1;
    v415 = v385;
    if ((v402 + 1) >> 16)
      goto LABEL_725;
    goto LABEL_726;
  }
  v255 = *(_QWORD *)(a1 + 8);
  v9 = (unint64_t)&a4[a5];
  v256 = (_DWORD)a4 + a5 - v255;
  v257 = 1 << *(_DWORD *)(a1 + 240);
  v258 = *(_DWORD *)(a1 + 24);
  v259 = v256 - v258;
  v260 = v256 - v257;
  if (v259 > v257 && *(_DWORD *)(a1 + 40) == 0)
    v262 = v260;
  else
    v262 = v258;
  v263 = (unsigned __int8 *)(v255 + v262);
  v264 = v9 - 8;
  v20 = *a3;
  v19 = a3[1];
  v265 = *(_QWORD *)(a1 + 232);
  v266 = *(unsigned int *)(v265 + 24);
  v267 = *(char **)v265;
  v268 = *(_QWORD *)(v265 + 8);
  if ((_DWORD)v5 - ((_DWORD)v268 + (_DWORD)v266) - ((_DWORD)v255 + (_DWORD)v262) + *(_QWORD *)v265)
    v269 = v5;
  else
    v269 = v5 + 1;
  if ((unint64_t)v269 < v264)
  {
    v509 = v268 + v266;
    v543 = *(_DWORD *)(v265 + 24);
    v519 = a3;
    v591 = *(_QWORD *)(a1 + 96);
    v583 = *(_QWORD *)(a1 + 112);
    v539 = *(_QWORD *)(v265 + 96);
    v587 = 64 - *(_DWORD *)(a1 + 248);
    v579 = 64 - *(_DWORD *)(a1 + 244);
    v535 = 64 - *(_DWORD *)(v265 + 248);
    v527 = 64 - *(_DWORD *)(v265 + 244);
    v575 = v262 - 1;
    v531 = v9 - 7;
    v523 = *(_QWORD *)(v265 + 112);
    v513 = v9 - 1;
    v517 = v9 - 3;
    v270 = (unsigned __int8 *)(v9 - 32);
    v547 = v262 + v268 - (_DWORD)v267;
    v555 = v268 - v547;
    v559 = *(char **)v265;
    v497 = v268 - 1;
    v501 = v255 + 16;
    v505 = v255 - 1;
    v563 = v9 - 8;
    v567 = (unsigned __int8 *)(v9 - 32);
    v571 = v9;
    v551 = *(_QWORD *)(v265 + 8);
    while (1)
    {
      v271 = *(_QWORD *)v269;
      v272 = 0xCF1BBCDCB7A56463 * *(_QWORD *)v269;
      v273 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)v269;
      v274 = (_DWORD)v269 - v255;
      v275 = *(unsigned int *)(v591 + 4 * (v272 >> v587));
      v276 = *(unsigned int *)(v583 + 4 * (v273 >> v579));
      v277 = (_DWORD)v269 - v255 + 1;
      v278 = (v277 - v20);
      v279 = v268 + v278 - v547;
      if (v278 >= v262)
        v279 = v255 + v278;
      *(_DWORD *)(v583 + 4 * (v273 >> v579)) = v274;
      *(_DWORD *)(v591 + 4 * (v272 >> v587)) = v274;
      if ((v575 - v278) >= 3)
      {
        v280 = v269 + 1;
        if (*(_DWORD *)v279 == *(_DWORD *)(v269 + 1))
          break;
      }
      if (v275 <= v262)
      {
        v291 = *(unsigned int *)(v539 + 4 * (v272 >> v535));
        if (v291 > v543 && *(_QWORD *)(v551 + v291) == v271)
        {
          v9 = v571;
          v292 = ZSTD_count_2segments((_QWORD *)v269 + 1, (char *)(v551 + v291 + 8), v571, v267, v263);
          v274 = (_DWORD)v269 - v255;
          v293 = v292 + 8;
          v294 = (_DWORD)v269 - (_DWORD)v255 - v547 - v291;
          if (v269 > v5)
          {
            v295 = v269 - 1;
            v296 = (unsigned __int8 *)(v497 + v291);
            v264 = v563;
            v263 = (unsigned __int8 *)(v255 + v262);
            v267 = v559;
            v270 = v567;
            while (*v295 == *v296)
            {
              ++v293;
              v297 = v295 - 1;
              if (v295 > v5)
              {
                --v295;
                v54 = (unint64_t)v296-- > v509;
                if (v54)
                  continue;
              }
LABEL_501:
              v280 = v297 + 1;
              goto LABEL_520;
            }
LABEL_519:
            v280 = v295 + 1;
LABEL_520:
            v342 = v280 - v5;
            v343 = *(_OWORD **)(a2 + 24);
            if (v280 <= v270)
            {
              *v343 = *(_OWORD *)v5;
              v347 = *(_QWORD *)(a2 + 24);
              if (v342 > 0x10)
              {
                v348 = (_OWORD *)(v347 + 16);
                v349 = v347 + v342;
                v350 = (__int128 *)(v5 + 16);
                do
                {
                  v351 = *v350++;
                  *v348++ = v351;
                }
                while ((unint64_t)v348 < v349);
                goto LABEL_531;
              }
              *(_QWORD *)(a2 + 24) = v347 + v342;
              v328 = *(_QWORD *)(a2 + 8);
            }
            else
            {
              if (v5 <= v270)
              {
                v344 = (_OWORD *)((char *)v343 + v270 - v5);
                do
                {
                  v345 = *(_OWORD *)v5;
                  v5 += 16;
                  *v343++ = v345;
                }
                while (v343 < v344);
                v5 = v270;
                v343 = v344;
              }
              while (v5 < v280)
              {
                v346 = *v5++;
                *(_BYTE *)v343 = v346;
                v343 = (_OWORD *)((char *)v343 + 1);
              }
LABEL_531:
              *(_QWORD *)(a2 + 24) += v342;
              v328 = *(_QWORD *)(a2 + 8);
              if (v342 >= 0x10000)
              {
                v352 = (unint64_t)(v328 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 1;
                *(_DWORD *)(a2 + 76) = v352;
              }
            }
            *(_WORD *)(v328 + 4) = v342;
            *(_DWORD *)v328 = v294 + 3;
            v330 = v293 - 3;
            v19 = v20;
            v20 = v294;
            if (v293 - 3 >= 0x10000)
            {
LABEL_535:
              v353 = (unint64_t)(v328 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v353;
              v20 = v294;
            }
LABEL_536:
            *(_WORD *)(v328 + 6) = v330;
            v354 = v328 + 8;
            *(_QWORD *)(a2 + 8) = v328 + 8;
            v5 = &v280[v293];
            if ((unint64_t)&v280[v293] <= v264)
            {
              v355 = *(_QWORD *)(v255 + (v274 + 2));
              *(_DWORD *)(v591 + 4 * ((0xCF1BBCDCB7A56463 * v355) >> v587)) = v274 + 2;
              *(_DWORD *)(v591 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 - 2)) >> v587)) = (_DWORD)v5 - 2 - v255;
              *(_DWORD *)(v583 + 4 * ((0xCF1BBCDCBF9B0000 * v355) >> v579)) = v274 + 2;
              *(_DWORD *)(v583 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v5 - 1)) >> v579)) = (_DWORD)v5 - 1 - v255;
              v356 = v20;
              v357 = v19;
              while (1)
              {
                v20 = v357;
                v357 = v356;
                v358 = (_DWORD)v5 - v255;
                v359 = ((_DWORD)v5 - v255 - v20);
                v360 = v555;
                if (v359 >= v262)
                  v360 = v255;
                if ((v575 - v359) < 3)
                  break;
                v361 = v360 + v359;
                if (*(_DWORD *)v361 != *(_DWORD *)v5)
                  break;
                if (v359 >= v262)
                  v267 = (char *)v9;
                v362 = ZSTD_count_2segments(v5 + 4, (char *)(v361 + 4), v9, v267, v263);
                v270 = v567;
                if (v5 <= v567)
                {
                  *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                  v354 = *(_QWORD *)(a2 + 8);
                }
                *(_WORD *)(v354 + 4) = 0;
                *(_DWORD *)v354 = 1;
                v264 = v563;
                if (v362 + 1 >= 0x10000)
                {
                  v363 = (unint64_t)(v354 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v363;
                }
                *(_WORD *)(v354 + 6) = v362 + 1;
                v354 += 8;
                v364 = *(_QWORD *)v5;
                *(_DWORD *)(v583 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v5) >> v579)) = v358;
                *(_DWORD *)(v591 + 4 * ((0xCF1BBCDCB7A56463 * v364) >> v587)) = v358;
                v5 += v362 + 4;
                *(_QWORD *)(a2 + 8) = v354;
                v356 = v20;
                v19 = v357;
                v269 = v5;
                v263 = (unsigned __int8 *)(v255 + v262);
                v267 = v559;
                if ((unint64_t)v5 > v563)
                  goto LABEL_552;
              }
              v19 = v20;
              v20 = v356;
            }
            v269 = v5;
            goto LABEL_552;
          }
LABEL_476:
          v280 = v269;
          v264 = v563;
          v263 = (unsigned __int8 *)(v255 + v262);
          v267 = v559;
          v270 = v567;
          goto LABEL_520;
        }
      }
      else
      {
        v286 = v255 + v275;
        if (*(_QWORD *)(v255 + v275) == v271)
        {
          v287 = (char *)(v269 + 8);
          v288 = (_QWORD *)(v286 + 8);
          if (v531 <= (unint64_t)(v269 + 8))
          {
            v315 = v269 + 8;
          }
          else
          {
            v289 = *(_QWORD *)v287 ^ *v288;
            if (v289)
            {
              v290 = __clz(__rbit64(v289)) >> 3;
              v9 = v571;
              goto LABEL_440;
            }
            v333 = 0;
            v334 = v269 + 16;
            v9 = v571;
            while (1)
            {
              v335 = &v334[v333];
              if ((unint64_t)&v334[v333] >= v531)
                break;
              v336 = *(_QWORD *)(v501 + v275 + v333);
              v333 += 8;
              v337 = *(_QWORD *)v335 ^ v336;
              if (v337)
              {
                v290 = v333 + (__clz(__rbit64(v337)) >> 3);
                goto LABEL_440;
              }
            }
            v315 = &v269[v333 + 16];
            v288 = (_QWORD *)(v501 + v275 + v333);
          }
          if ((unint64_t)v315 < v517 && *(_DWORD *)v288 == *(_DWORD *)v315)
          {
            v315 += 4;
            v288 = (_QWORD *)((char *)v288 + 4);
          }
          v9 = v571;
          if ((unint64_t)v315 < v513 && *(unsigned __int16 *)v288 == *(unsigned __int16 *)v315)
          {
            v315 += 2;
            v288 = (_QWORD *)((char *)v288 + 2);
          }
          if ((unint64_t)v315 < v571 && *(unsigned __int8 *)v288 == *v315)
            ++v315;
          v290 = v315 - (unsigned __int8 *)v287;
LABEL_440:
          v293 = v290 + 8;
          v294 = ((_DWORD)v269 - v286);
          if (v269 > v5)
          {
            v295 = v269 - 1;
            v316 = (unsigned __int8 *)(v505 + v275);
            while (*v295 == *v316)
            {
              ++v293;
              v297 = v295 - 1;
              if (v295 > v5)
              {
                --v295;
                v54 = v316-- > v263;
                if (v54)
                  continue;
              }
              goto LABEL_501;
            }
            goto LABEL_519;
          }
          goto LABEL_502;
        }
      }
      if (v276 <= v262)
      {
        v299 = *(unsigned int *)(v523 + 4 * (v273 >> v527));
        if (v299 > v543)
        {
          v298 = v551 + v299;
          if (*(_DWORD *)(v551 + v299) == *(_DWORD *)v269)
          {
            LODWORD(v276) = v299 + v547;
LABEL_419:
            v280 = v269 + 1;
            v300 = *(_QWORD *)(v269 + 1);
            v301 = (0xCF1BBCDCB7A56463 * v300) >> v587;
            v302 = *(unsigned int *)(v591 + 4 * v301);
            *(_DWORD *)(v591 + 4 * v301) = v277;
            if (v302 <= v262)
            {
              v317 = *(unsigned int *)(v539 + 4 * ((0xCF1BBCDCB7A56463 * v300) >> v535));
              if (v317 > v543 && *(_QWORD *)(v551 + v317) == v300)
              {
                v293 = ZSTD_count_2segments(v269 + 9, (char *)(v551 + v317 + 8), v571, v267, v263) + 8;
                v294 = v277 - v547 - v317;
                if (v280 <= v5)
                {
                  v270 = v567;
                  v9 = v571;
                  v264 = v563;
                  v263 = (unsigned __int8 *)(v255 + v262);
                  v267 = v559;
                  v274 = (_DWORD)v269 - v255;
                  goto LABEL_520;
                }
                v318 = (unsigned __int8 *)(v497 + v317);
                v270 = v567;
                v9 = v571;
                v264 = v563;
                v263 = (unsigned __int8 *)(v255 + v262);
                v267 = v559;
                v274 = (_DWORD)v269 - v255;
                while (*v269 == *v318)
                {
                  ++v293;
                  v295 = v269 - 1;
                  if ((unint64_t)v318 > v509)
                  {
                    --v318;
                    v54 = v269-- > v5;
                    if (v54)
                      continue;
                  }
                  goto LABEL_519;
                }
                goto LABEL_555;
              }
            }
            else
            {
              v303 = v255 + v302;
              if (*(_QWORD *)(v255 + v302) == v300)
              {
                v304 = (char *)(v269 + 9);
                v305 = (_QWORD *)(v303 + 8);
                if (v531 <= (unint64_t)(v269 + 9))
                {
                  v340 = v269 + 9;
                  v9 = v571;
                }
                else
                {
                  v306 = *(_QWORD *)v304 ^ *v305;
                  v9 = v571;
                  if (v306)
                  {
                    v307 = __clz(__rbit64(v306)) >> 3;
                    goto LABEL_514;
                  }
                  v370 = 0;
                  v371 = v269 + 17;
                  while (1)
                  {
                    v372 = &v371[v370];
                    if ((unint64_t)&v371[v370] >= v531)
                      break;
                    v373 = *(_QWORD *)(v501 + v302 + v370);
                    v370 += 8;
                    v374 = *(_QWORD *)v372 ^ v373;
                    if (v374)
                    {
                      v307 = v370 + (__clz(__rbit64(v374)) >> 3);
                      goto LABEL_514;
                    }
                  }
                  v340 = &v269[v370 + 17];
                  v305 = (_QWORD *)(v501 + v302 + v370);
                }
                if ((unint64_t)v340 < v517 && *(_DWORD *)v305 == *(_DWORD *)v340)
                {
                  v340 += 4;
                  v305 = (_QWORD *)((char *)v305 + 4);
                }
                if ((unint64_t)v340 < v513 && *(unsigned __int16 *)v305 == *(unsigned __int16 *)v340)
                {
                  v340 += 2;
                  v305 = (_QWORD *)((char *)v305 + 2);
                }
                if ((unint64_t)v340 < v9 && *(unsigned __int8 *)v305 == *v340)
                  ++v340;
                v307 = v340 - (unsigned __int8 *)v304;
LABEL_514:
                v293 = v307 + 8;
                v294 = ((_DWORD)v280 - v303);
                if (v280 <= v5)
                  goto LABEL_520;
                v341 = (unsigned __int8 *)(v505 + v302);
                while (*v269 == *v341)
                {
                  ++v293;
                  v295 = v269 - 1;
                  if (v341 > v263)
                  {
                    --v341;
                    v54 = v269-- > v5;
                    if (v54)
                      continue;
                  }
                  goto LABEL_519;
                }
LABEL_555:
                v280 = v269 + 1;
                goto LABEL_520;
              }
            }
            v319 = (char *)(v269 + 4);
            v320 = (char *)(v298 + 4);
            if (v276 < v262)
            {
              v321 = v298;
              v9 = v571;
              v293 = ZSTD_count_2segments(v319, v320, v571, v267, v263) + 4;
              v274 = (_DWORD)v269 - v255;
              v294 = ((_DWORD)v269 - v255 - v276);
              if (v269 > v5)
              {
                v270 = v567;
                if (v321 > v509)
                {
                  v295 = v269 - 1;
                  v322 = (unsigned __int8 *)(v321 - 1);
                  v264 = v563;
                  v263 = (unsigned __int8 *)(v255 + v262);
                  v267 = v559;
                  while (*v295 == *v322)
                  {
                    ++v293;
                    v297 = v295 - 1;
                    if (v295 > v5)
                    {
                      --v295;
                      v54 = (unint64_t)v322-- > v509;
                      if (v54)
                        continue;
                    }
                    goto LABEL_501;
                  }
                  goto LABEL_519;
                }
                v280 = v269;
                v264 = v563;
                v263 = (unsigned __int8 *)(v255 + v262);
                v267 = v559;
                goto LABEL_520;
              }
              goto LABEL_476;
            }
            v9 = v571;
            if (v531 <= (unint64_t)v319)
            {
              v338 = v269 + 4;
            }
            else
            {
              v331 = *(_QWORD *)v319 ^ *(_QWORD *)v320;
              if (v331)
              {
                v332 = __clz(__rbit64(v331)) >> 3;
LABEL_495:
                v293 = v332 + 4;
                v294 = ((_DWORD)v269 - v298);
                if (v269 > v5 && v298 > (unint64_t)v263)
                {
                  v295 = v269 - 1;
                  v339 = (unsigned __int8 *)(v298 - 1);
                  while (*v295 == *v339)
                  {
                    ++v293;
                    v297 = v295 - 1;
                    if (v295 > v5)
                    {
                      --v295;
                      v54 = v339-- > v263;
                      if (v54)
                        continue;
                    }
                    goto LABEL_501;
                  }
                  goto LABEL_519;
                }
LABEL_502:
                v280 = v269;
                goto LABEL_520;
              }
              v365 = 0;
              v366 = v269 + 12;
              while (1)
              {
                v367 = &v366[v365];
                if ((unint64_t)&v366[v365] >= v531)
                  break;
                v368 = *(_QWORD *)(v298 + 12 + v365);
                v365 += 8;
                v369 = *(_QWORD *)v367 ^ v368;
                if (v369)
                {
                  v332 = v365 + (__clz(__rbit64(v369)) >> 3);
                  goto LABEL_495;
                }
              }
              v338 = &v269[v365 + 12];
              v320 = (char *)(v298 + v365 + 12);
            }
            if ((unint64_t)v338 < v517 && *(_DWORD *)v320 == *(_DWORD *)v338)
            {
              v338 += 4;
              v320 += 4;
            }
            if ((unint64_t)v338 < v513 && *(unsigned __int16 *)v320 == *(unsigned __int16 *)v338)
            {
              v338 += 2;
              v320 += 2;
            }
            if ((unint64_t)v338 < v571 && *v320 == *v338)
              ++v338;
            v332 = v338 - (unsigned __int8 *)v319;
            goto LABEL_495;
          }
        }
      }
      else
      {
        v298 = v255 + v276;
        if (*(_DWORD *)(v255 + v276) == *(_DWORD *)v269)
          goto LABEL_419;
      }
      _X8 = &v269[(v269 - v5) >> 8];
      v269 = _X8 + 1;
      _X8 += 257;
      __asm { PRFM            #0, [X8] }
      v9 = v571;
LABEL_552:
      v268 = v551;
      if ((unint64_t)v269 >= v264)
        goto LABEL_568;
    }
    v9 = v571;
    if (v278 >= v262)
      v267 = (char *)v571;
    v281 = ZSTD_count_2segments(v269 + 5, (char *)(v279 + 4), v571, v267, v263);
    v270 = v567;
    v282 = v280 - v5;
    v283 = *(_OWORD **)(a2 + 24);
    if (v280 <= v567)
    {
      *v283 = *(_OWORD *)v5;
      v310 = *(_QWORD *)(a2 + 24);
      if (v282 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v310 + v282;
        v328 = *(_QWORD *)(a2 + 8);
        v264 = v563;
        v263 = (unsigned __int8 *)(v255 + v262);
        v267 = v559;
        v274 = (_DWORD)v269 - v255;
        goto LABEL_474;
      }
      v311 = (_OWORD *)(v310 + 16);
      v312 = v310 + v282;
      v313 = (__int128 *)(v5 + 16);
      v264 = v563;
      v263 = (unsigned __int8 *)(v255 + v262);
      v267 = v559;
      v274 = (_DWORD)v269 - v255;
      do
      {
        v314 = *v313++;
        *v311++ = v314;
      }
      while ((unint64_t)v311 < v312);
    }
    else
    {
      if (v5 <= v567)
      {
        v285 = (char *)v283 + v567 - v5;
        v323 = v5;
        v264 = v563;
        v263 = (unsigned __int8 *)(v255 + v262);
        v267 = v559;
        v274 = (_DWORD)v269 - v255;
        do
        {
          v324 = *(_OWORD *)v323;
          v323 += 16;
          *v283++ = v324;
        }
        while (v283 < (_OWORD *)v285);
        v284 = v567;
      }
      else
      {
        v284 = v5;
        v285 = *(_BYTE **)(a2 + 24);
        v264 = v563;
        v263 = (unsigned __int8 *)(v255 + v262);
        v267 = v559;
        v274 = (_DWORD)v269 - v255;
      }
      if (v284 < v280)
      {
        if (v5 <= v567)
          v325 = v567;
        else
          v325 = v5;
        v326 = v269 - v325 + 1;
        do
        {
          v327 = *v284++;
          *v285++ = v327;
          --v326;
        }
        while (v326);
      }
    }
    *(_QWORD *)(a2 + 24) += v282;
    v328 = *(_QWORD *)(a2 + 8);
    if (v282 >= 0x10000)
    {
      v329 = (unint64_t)(v328 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v329;
    }
LABEL_474:
    v293 = v281 + 4;
    *(_WORD *)(v328 + 4) = v282;
    *(_DWORD *)v328 = 1;
    v330 = v281 + 1;
    v294 = v20;
    if ((v281 + 1) >> 16)
      goto LABEL_535;
    goto LABEL_536;
  }
LABEL_569:
  *a3 = v20;
LABEL_759:
  a3[1] = v19;
  return v9 - (_QWORD)v5;
}

uint64_t ZSTD_compressBlock_doubleFast_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  int v5;

  if ((*(_DWORD *)(a1 + 256) - 5) >= 3)
    v5 = 4;
  else
    v5 = *(_DWORD *)(a1 + 256);
  return ZSTD_compressBlock_doubleFast_extDict_generic(a1, a2, a3, a4, a5, v5);
}

unint64_t ZSTD_count_2segments(_QWORD *a1, char *a2, unint64_t a3, char *a4, _QWORD *a5)
{
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;

  v5 = (char *)a1 + a4 - a2;
  if ((unint64_t)v5 >= a3)
    v5 = (char *)a3;
  v6 = (char *)a1;
  v7 = a2;
  if (v5 - 7 > (char *)a1)
  {
    v8 = *a1 ^ *(_QWORD *)a2;
    if (v8)
    {
      v9 = __clz(__rbit64(v8)) >> 3;
      goto LABEL_21;
    }
    v10 = 0;
    v11 = a1 + 1;
    while (1)
    {
      v12 = &v11[v10];
      if (&v11[v10] >= (_QWORD *)(v5 - 7))
        break;
      v13 = *(_QWORD *)&a2[v10 * 8 + 8];
      ++v10;
      v14 = *v12 ^ v13;
      if (v14)
      {
        v9 = v10 * 8 + (__clz(__rbit64(v14)) >> 3);
        goto LABEL_21;
      }
    }
    v6 = (char *)&a1[v10 + 1];
    v7 = &a2[v10 * 8 + 8];
  }
  if (v6 < v5 - 3 && *(_DWORD *)v7 == *(_DWORD *)v6)
  {
    v6 += 4;
    v7 += 4;
  }
  if (v6 < v5 - 1 && *(unsigned __int16 *)v7 == *(unsigned __int16 *)v6)
  {
    v6 += 2;
    v7 += 2;
  }
  if (v6 < v5 && *v7 == *v6)
    ++v6;
  v9 = v6 - (char *)a1;
LABEL_21:
  if (&a2[v9] == a4)
  {
    v15 = (char *)a1 + v9;
    if (a3 - 7 <= (unint64_t)a1 + v9)
    {
      v18 = (_DWORD *)((char *)a1 + v9);
    }
    else
    {
      v16 = *(_QWORD *)v15 ^ *a5;
      if (v16)
      {
        v17 = __clz(__rbit64(v16)) >> 3;
LABEL_36:
        v9 += v17;
        return v9;
      }
      v20 = (uint64_t)a1 + v9 + 8;
      while (1)
      {
        v21 = (_QWORD *)(v20 + v16);
        if (v20 + v16 >= a3 - 7)
          break;
        v22 = *(_QWORD *)((char *)a5 + v16 + 8);
        v16 += 8;
        v23 = *v21 ^ v22;
        if (v23)
        {
          v17 = v16 + (__clz(__rbit64(v23)) >> 3);
          goto LABEL_36;
        }
      }
      v18 = (_DWORD *)((char *)a1 + v9 + v16 + 8);
      a5 = (_QWORD *)((char *)a5 + v16 + 8);
    }
    if ((unint64_t)v18 < a3 - 3 && *(_DWORD *)a5 == *v18)
    {
      ++v18;
      a5 = (_QWORD *)((char *)a5 + 4);
    }
    if ((unint64_t)v18 < a3 - 1 && *(unsigned __int16 *)a5 == *(unsigned __int16 *)v18)
    {
      v18 = (_DWORD *)((char *)v18 + 2);
      a5 = (_QWORD *)((char *)a5 + 2);
    }
    if ((unint64_t)v18 < a3 && *(unsigned __int8 *)a5 == *(unsigned __int8 *)v18)
      v18 = (_DWORD *)((char *)v18 + 1);
    v17 = (char *)v18 - v15;
    goto LABEL_36;
  }
  return v9;
}

uint64_t ZSTD_compressBlock_doubleFast_extDict_generic(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  unsigned __int8 *v6;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  char *v40;
  unint64_t v41;
  unsigned __int8 *v42;
  unint64_t v43;
  _OWORD *v44;
  unsigned __int8 *v45;
  _BYTE *v46;
  unint64_t v47;
  int v48;
  char *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  BOOL v52;
  unsigned __int8 *v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unsigned __int8 *v66;
  uint64_t v67;
  _OWORD *v68;
  unint64_t v69;
  __int128 *v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  char *v74;
  unsigned __int8 *v75;
  unint64_t v76;
  BOOL v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  __int128 v82;
  unsigned __int8 *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  __int16 v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unint64_t v92;
  _OWORD *v93;
  _OWORD *v94;
  __int128 v95;
  char v96;
  uint64_t v97;
  _OWORD *v98;
  unint64_t v99;
  __int128 *v100;
  __int128 v101;
  unint64_t v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  _OWORD *v105;
  _OWORD *v106;
  __int128 v107;
  char v108;
  uint64_t v109;
  _OWORD *v110;
  unint64_t v111;
  __int128 *v112;
  __int128 v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  char v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unint64_t v134;
  uint64_t v136;
  unsigned int *v137;
  int v138;
  unsigned __int8 *v139;
  char v140;
  unint64_t v141;
  uint64_t v142;
  char v143;
  int v144;
  uint64_t v145;
  unint64_t v146;
  int v147;
  int v148;
  unsigned __int8 *v149;
  char *v150;
  unsigned __int8 *v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;

  v6 = a4;
  v8 = (unint64_t)&a4[a5];
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_DWORD)a4 + a5 - v9;
  v11 = 1 << *(_DWORD *)(a1 + 240);
  v13 = *(_DWORD *)(a1 + 24);
  v12 = *(_DWORD *)(a1 + 28);
  v52 = v10 - v12 > v11;
  v14 = v10 - v11;
  if (v52 && *(_DWORD *)(a1 + 40) == 0)
    v16 = v14;
  else
    v16 = v12;
  if (v13 <= v16)
    v17 = v16;
  else
    v17 = v13;
  if (v16 >= v13)
    return ZSTD_compressBlock_doubleFast(a1, a2, a3, a4, a5);
  v18 = v8 - 8;
  v19 = *a3;
  v20 = a3[1];
  if (v8 - 8 <= (unint64_t)a4)
    goto LABEL_184;
  v137 = a3;
  v151 = (unsigned __int8 *)(v9 + v17);
  v21 = *(_QWORD *)(a1 + 16);
  v139 = (unsigned __int8 *)(v21 + v16);
  v153 = v21;
  v150 = (char *)(v21 + v17);
  v155 = *(_QWORD *)(a1 + 96);
  v22 = *(_DWORD *)(a1 + 244);
  v143 = 64 - v22;
  v23 = *(_QWORD *)(a1 + 112);
  v140 = 32 - v22;
  v154 = 64 - *(_DWORD *)(a1 + 248);
  v152 = v17 - 1;
  v148 = v16;
  v149 = (unsigned __int8 *)(v8 - 32);
  v24 = a6 - 5;
  v25 = a4;
  v146 = v8 - 8;
  v147 = v17;
  v144 = a6 - 5;
  v145 = v23;
  v141 = (unint64_t)&a4[a5];
  v142 = *(_QWORD *)(a1 + 8);
  do
  {
    v26 = v20;
    switch(v24)
    {
      case 0:
        v27 = *(_QWORD *)v6;
        v28 = -1157627904;
        goto LABEL_19;
      case 1:
        v27 = *(_QWORD *)v6;
        v28 = -1080360960;
        goto LABEL_19;
      case 2:
        v27 = *(_QWORD *)v6;
        v28 = -1079680256;
        goto LABEL_19;
      case 3:
        v27 = *(_QWORD *)v6;
        v28 = -1213897629;
LABEL_19:
        v29 = (v27 * (v28 | 0xCF1BBCDC00000000)) >> v143;
        break;
      default:
        v29 = (-1640531535 * *(_DWORD *)v6) >> v140;
        v27 = *(_QWORD *)v6;
        break;
    }
    v30 = *(unsigned int *)(v23 + 4 * v29);
    if (v30 >= v17)
      v31 = v9;
    else
      v31 = v153;
    v32 = (0xCF1BBCDCB7A56463 * v27) >> v154;
    v33 = *(unsigned int *)(v155 + 4 * v32);
    v34 = v9;
    if (v33 < v17)
      v9 = v153;
    v35 = (_DWORD)v6 - v34;
    v36 = (_DWORD)v6 - v34 + 1;
    v37 = (v36 - v19);
    if (v37 < v17)
      v34 = v153;
    *(_DWORD *)(v155 + 4 * v32) = v35;
    *(_DWORD *)(v23 + 4 * v29) = v35;
    if (v19 <= v36 - (int)v16
      && (v152 - v37) >= 3
      && *(_DWORD *)(v34 + v37) == *(_DWORD *)(v6 + 1))
    {
      v38 = v35;
      v39 = v6 + 1;
      if (v37 >= v17)
        v40 = (char *)v8;
      else
        v40 = v150;
      v41 = ZSTD_count_2segments(v6 + 5, (char *)(v34 + v37 + 4), v8, v40, v151);
      v42 = v6 + 1;
      v43 = v39 - v25;
      v44 = *(_OWORD **)(a2 + 24);
      if (v39 <= v149)
      {
        *v44 = *(_OWORD *)v25;
        v67 = *(_QWORD *)(a2 + 24);
        if (v43 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v67 + v43;
          v86 = *(_QWORD *)(a2 + 8);
          v9 = v142;
          LODWORD(v17) = v147;
          LODWORD(v16) = v148;
          v23 = v145;
          v18 = v146;
          v24 = v144;
          v54 = v38;
          goto LABEL_100;
        }
        v68 = (_OWORD *)(v67 + 16);
        v69 = v67 + v43;
        v70 = (__int128 *)(v25 + 16);
        v9 = v142;
        LODWORD(v17) = v147;
        LODWORD(v16) = v148;
        v23 = v145;
        v18 = v146;
        v24 = v144;
        v54 = v38;
        do
        {
          v71 = *v70++;
          *v68++ = v71;
        }
        while ((unint64_t)v68 < v69);
      }
      else
      {
        if (v25 <= v149)
        {
          v46 = (char *)v44 + v149 - v25;
          v81 = v25;
          do
          {
            v82 = *(_OWORD *)v81;
            v81 += 16;
            *v44++ = v82;
          }
          while (v44 < (_OWORD *)v46);
          v45 = v149;
        }
        else
        {
          v45 = v25;
          v46 = *(_BYTE **)(a2 + 24);
        }
        v9 = v142;
        LODWORD(v17) = v147;
        LODWORD(v16) = v148;
        v23 = v145;
        v18 = v146;
        v24 = v144;
        v54 = v38;
        if (v45 < v42)
        {
          if (v25 <= v149)
            v83 = v149;
          else
            v83 = v25;
          v84 = v6 - v83 + 1;
          do
          {
            v85 = *v45++;
            *v46++ = v85;
            --v84;
          }
          while (v84);
        }
      }
      *(_QWORD *)(a2 + 24) += v43;
      v86 = *(_QWORD *)(a2 + 8);
      if (v43 >= 0x10000)
      {
        v87 = (unint64_t)(v86 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v87;
      }
LABEL_100:
      v51 = v41 + 4;
      *(_WORD *)(v86 + 4) = v43;
      *(_DWORD *)v86 = 1;
      v88 = v41 + 1;
      v64 = v19;
      if (!((v41 + 1) >> 16))
        goto LABEL_148;
LABEL_147:
      v115 = (unint64_t)(v86 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v115;
      goto LABEL_148;
    }
    if (v33 > v16)
    {
      v47 = v9 + v33;
      if (*(_QWORD *)(v9 + v33) == v27)
      {
        v48 = v35;
        if (v33 >= v17)
          v49 = (char *)v141;
        else
          v49 = v150;
        if (v33 >= v17)
          v50 = v151;
        else
          v50 = v139;
        v51 = ZSTD_count_2segments((_QWORD *)v6 + 1, (char *)(v47 + 8), v141, v49, v151) + 8;
        v52 = v47 > (unint64_t)v50 && v6 > v25;
        if (v52)
        {
          v78 = v6 - 1;
          v79 = (unsigned __int8 *)(v9 + v33 - 1);
          v8 = v141;
          v9 = v142;
          LODWORD(v17) = v147;
          LODWORD(v16) = v148;
          v23 = v145;
          v18 = v146;
          v24 = v144;
          v54 = v48;
          while (*v78 == *v79)
          {
            ++v51;
            v80 = v78 - 1;
            if (v79 > v50)
            {
              --v79;
              v52 = v78-- > v25;
              if (v52)
                continue;
            }
            v6 = v80 + 1;
            goto LABEL_108;
          }
          v6 = v78 + 1;
LABEL_108:
          v42 = v6;
          v53 = v149;
        }
        else
        {
          v42 = v6;
          v8 = v141;
          v9 = v142;
          LODWORD(v17) = v147;
          LODWORD(v16) = v148;
          v23 = v145;
          v18 = v146;
          v53 = v149;
          v24 = v144;
          v54 = v48;
        }
        v92 = v6 - v25;
        v93 = *(_OWORD **)(a2 + 24);
        if (v6 <= v53)
        {
          *v93 = *(_OWORD *)v25;
          v97 = *(_QWORD *)(a2 + 24);
          if (v92 <= 0x10)
          {
            *(_QWORD *)(a2 + 24) = v97 + v92;
            v86 = *(_QWORD *)(a2 + 8);
LABEL_123:
            v64 = (v54 - v33);
            goto LABEL_146;
          }
          v98 = (_OWORD *)(v97 + 16);
          v99 = v97 + v92;
          v100 = (__int128 *)(v25 + 16);
          do
          {
            v101 = *v100++;
            *v98++ = v101;
          }
          while ((unint64_t)v98 < v99);
        }
        else
        {
          if (v25 <= v53)
          {
            v94 = (_OWORD *)((char *)v93 + v53 - v25);
            do
            {
              v95 = *(_OWORD *)v25;
              v25 += 16;
              *v93++ = v95;
            }
            while (v93 < v94);
            v25 = v53;
            v93 = v94;
          }
          while (v25 < v6)
          {
            v96 = *v25++;
            *(_BYTE *)v93 = v96;
            v93 = (_OWORD *)((char *)v93 + 1);
          }
        }
        *(_QWORD *)(a2 + 24) += v92;
        v86 = *(_QWORD *)(a2 + 8);
        if (v92 >= 0x10000)
        {
          v102 = (unint64_t)(v86 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v102;
        }
        goto LABEL_123;
      }
    }
    if (v30 <= v16 || (v55 = v31 + v30, *(_DWORD *)(v31 + v30) != *(_DWORD *)v6))
    {
      v6 += ((v6 - v25) >> 8) + 1;
      v20 = v26;
      v8 = v141;
      v9 = v142;
      continue;
    }
    v56 = *(_QWORD *)(v6 + 1);
    v57 = (0xCF1BBCDCB7A56463 * v56) >> v154;
    v58 = *(unsigned int *)(v155 + 4 * v57);
    v59 = v142;
    if (v58 < v17)
      v59 = v153;
    *(_DWORD *)(v155 + 4 * v57) = v36;
    if (v58 > v16 && *(_QWORD *)(v59 + v58) == v56)
    {
      v136 = v59;
      v138 = v35;
      v8 = v141;
      if (v58 >= v17)
        v60 = (char *)v141;
      else
        v60 = v150;
      if (v58 >= v17)
        v61 = v151;
      else
        v61 = v139;
      v62 = v59 + v58;
      v63 = ZSTD_count_2segments(v6 + 9, (char *)(v59 + v58 + 8), v141, v60, v151);
      v42 = v6 + 1;
      v51 = v63 + 8;
      v64 = (v36 - v58);
      if (v62 <= (unint64_t)v61 || v42 <= v25)
      {
        v9 = v142;
        LODWORD(v17) = v147;
        LODWORD(v16) = v148;
        v23 = v145;
        v18 = v146;
        v66 = v149;
        v24 = v144;
        v54 = v138;
        goto LABEL_132;
      }
      v103 = (unsigned __int8 *)(v136 + v58 - 1);
      LODWORD(v17) = v147;
      LODWORD(v16) = v148;
      v23 = v145;
      v18 = v146;
      v66 = v149;
      v24 = v144;
      v54 = v138;
      while (*v6 == *v103)
      {
        ++v51;
        v104 = v6 - 1;
        if (v103 > v61)
        {
          --v103;
          v52 = v6-- > v25;
          if (v52)
            continue;
        }
        v42 = v104 + 1;
        goto LABEL_131;
      }
      v42 = v6 + 1;
    }
    else
    {
      v72 = v31;
      v73 = v35;
      if (v30 >= v17)
        v74 = (char *)v141;
      else
        v74 = v150;
      if (v30 >= v17)
        v75 = v151;
      else
        v75 = v139;
      v76 = ZSTD_count_2segments(v6 + 4, (char *)(v55 + 4), v141, v74, v151);
      v54 = v73;
      v51 = v76 + 4;
      v64 = (v73 - v30);
      v77 = v55 > (unint64_t)v75 && v6 > v25;
      v66 = v149;
      if (!v77)
      {
        v42 = v6;
        v8 = v141;
        v9 = v142;
        LODWORD(v17) = v147;
        LODWORD(v16) = v148;
        v23 = v145;
        v18 = v146;
        v24 = v144;
        goto LABEL_132;
      }
      v89 = v6 - 1;
      v90 = (unsigned __int8 *)(v72 + v30 - 1);
      v8 = v141;
      LODWORD(v17) = v147;
      LODWORD(v16) = v148;
      v23 = v145;
      v18 = v146;
      v24 = v144;
      while (*v89 == *v90)
      {
        ++v51;
        v91 = v89 - 1;
        if (v90 > v75)
        {
          --v90;
          v52 = v89-- > v25;
          if (v52)
            continue;
        }
        v42 = v91 + 1;
        goto LABEL_131;
      }
      v42 = v89 + 1;
    }
LABEL_131:
    v9 = v142;
LABEL_132:
    v92 = v42 - v25;
    v105 = *(_OWORD **)(a2 + 24);
    if (v42 <= v66)
    {
      *v105 = *(_OWORD *)v25;
      v109 = *(_QWORD *)(a2 + 24);
      if (v92 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v109 + v92;
        v86 = *(_QWORD *)(a2 + 8);
        goto LABEL_146;
      }
      v110 = (_OWORD *)(v109 + 16);
      v111 = v109 + v92;
      v112 = (__int128 *)(v25 + 16);
      do
      {
        v113 = *v112++;
        *v110++ = v113;
      }
      while ((unint64_t)v110 < v111);
    }
    else
    {
      if (v25 <= v66)
      {
        v106 = (_OWORD *)((char *)v105 + v66 - v25);
        do
        {
          v107 = *(_OWORD *)v25;
          v25 += 16;
          *v105++ = v107;
        }
        while (v105 < v106);
        v25 = v66;
        v105 = v106;
      }
      while (v25 < v42)
      {
        v108 = *v25++;
        *(_BYTE *)v105 = v108;
        v105 = (_OWORD *)((char *)v105 + 1);
      }
    }
    *(_QWORD *)(a2 + 24) += v92;
    v86 = *(_QWORD *)(a2 + 8);
    if (v92 >= 0x10000)
    {
      v114 = (unint64_t)(v86 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v114;
    }
LABEL_146:
    *(_WORD *)(v86 + 4) = v92;
    *(_DWORD *)v86 = v64 + 3;
    v88 = v51 - 3;
    v26 = v19;
    if ((v51 - 3) >> 16)
      goto LABEL_147;
LABEL_148:
    *(_WORD *)(v86 + 6) = v88;
    v116 = v86 + 8;
    *(_QWORD *)(a2 + 8) = v86 + 8;
    v25 = &v42[v51];
    if ((unint64_t)&v42[v51] <= v18)
    {
      v117 = (v54 + 2);
      v118 = *(_QWORD *)(v9 + v117);
      *(_DWORD *)(v155 + 4 * ((0xCF1BBCDCB7A56463 * v118) >> v154)) = v117;
      *(_DWORD *)(v155 + 4 * ((0xCF1BBCDCB7A56463 * *(_QWORD *)(v25 - 2)) >> v154)) = (_DWORD)v25 - 2 - v9;
      switch(v24)
      {
        case 0:
          v119 = -1157627904;
          goto LABEL_155;
        case 1:
          v119 = -1080360960;
          goto LABEL_155;
        case 2:
          v119 = -1079680256;
LABEL_155:
          v122 = v119 | 0xCF1BBCDC00000000;
          v123 = v143;
          *(_DWORD *)(v23 + 4 * ((v118 * v122) >> v143)) = v117;
          v120 = (_DWORD)v25 - 1;
          v124 = *(_QWORD *)(v25 - 1);
          goto LABEL_157;
        case 3:
          v123 = v143;
          *(_DWORD *)(v23 + 4 * ((0xCF1BBCDCB7A56463 * v118) >> v143)) = v117;
          v120 = (_DWORD)v25 - 1;
          v124 = *(_QWORD *)(v25 - 1);
          v122 = 0xCF1BBCDCB7A56463;
LABEL_157:
          v121 = (v124 * v122) >> v123;
          break;
        default:
          *(_DWORD *)(v23 + 4 * ((-1640531535 * *(_DWORD *)(v9 + v117)) >> v140)) = v117;
          v120 = (_DWORD)v25 - 1;
          v121 = (-1640531535 * *(_DWORD *)(v25 - 1)) >> v140;
          break;
      }
      *(_DWORD *)(v23 + 4 * v121) = v120 - v9;
      while (1)
      {
        v20 = v64;
        v64 = v26;
        v125 = (_DWORD)v25 - v9;
        v126 = ((_DWORD)v25 - v9 - v26);
        v127 = v153;
        if (v126 >= v17)
          v127 = v9;
        if (v26 > v125 - (int)v16)
          break;
        if ((v152 - v126) < 3)
          break;
        v128 = v127 + v126;
        if (*(_DWORD *)v128 != *(_DWORD *)v25)
          break;
        if (v126 >= v17)
          v129 = (char *)v8;
        else
          v129 = v150;
        v130 = ZSTD_count_2segments(v25 + 4, (char *)(v128 + 4), v8, v129, v151);
        if (v25 <= v149)
        {
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v25;
          v116 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)(v116 + 4) = 0;
        *(_DWORD *)v116 = 1;
        v24 = v144;
        if (v130 + 1 >= 0x10000)
        {
          v131 = (unint64_t)(v116 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v131;
        }
        *(_WORD *)(v116 + 6) = v130 + 1;
        v116 += 8;
        *(_QWORD *)(a2 + 8) = v116;
        LODWORD(v17) = v147;
        LODWORD(v16) = v148;
        v23 = v145;
        v18 = v146;
        switch(v144)
        {
          case 0:
            v132 = *(_QWORD *)v25;
            v133 = -1157627904;
            goto LABEL_177;
          case 1:
            v132 = *(_QWORD *)v25;
            v133 = -1080360960;
            goto LABEL_177;
          case 2:
            v132 = *(_QWORD *)v25;
            v133 = -1079680256;
            goto LABEL_177;
          case 3:
            v132 = *(_QWORD *)v25;
            v133 = -1213897629;
LABEL_177:
            v134 = (v132 * (v133 | 0xCF1BBCDC00000000)) >> v143;
            break;
          default:
            v134 = (-1640531535 * *(_DWORD *)v25) >> v140;
            v132 = *(_QWORD *)v25;
            break;
        }
        *(_DWORD *)(v145 + 4 * v134) = v125;
        *(_DWORD *)(v155 + 4 * ((0xCF1BBCDCB7A56463 * v132) >> v154)) = v125;
        v25 += v130 + 4;
        v26 = v20;
        v19 = v64;
        v6 = v25;
        if ((unint64_t)v25 > v146)
          goto LABEL_182;
      }
      v19 = v20;
      v20 = v26;
    }
    else
    {
      v19 = v64;
      v20 = v26;
    }
    v6 = v25;
LABEL_182:
    ;
  }
  while ((unint64_t)v6 < v18);
  v6 = v25;
  a3 = v137;
LABEL_184:
  *a3 = v19;
  a3[1] = v20;
  return v8 - (_QWORD)v6;
}

double ZSTD_createDCtx_internal(__int128 *a1)
{
  char *v2;
  double result;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  if ((*(_QWORD *)a1 == 0) == (*((_QWORD *)a1 + 1) == 0))
  {
    v5 = *a1;
    v6 = *((_QWORD *)a1 + 2);
    v2 = (char *)ZSTD_customMalloc(0x176C8uLL, (uint64_t)&v5);
    if (v2)
    {
      v4 = *((_QWORD *)a1 + 2);
      *(_OWORD *)(v2 + 30120) = *a1;
      *((_QWORD *)v2 + 3767) = v4;
      *((_QWORD *)v2 + 3739) = 0;
      result = 0.0;
      *(_QWORD *)(v2 + 30188) = 0;
      *((_QWORD *)v2 + 3782) = 0;
      *((_QWORD *)v2 + 11992) = 0;
      *((_QWORD *)v2 + 3775) = 0;
      *((_QWORD *)v2 + 3770) = 0;
      *(_OWORD *)(v2 + 30168) = 0u;
      *(_OWORD *)(v2 + 30212) = 0u;
      *((_DWORD *)v2 + 7557) = 0;
      *((_QWORD *)v2 + 3780) = 134217729;
      *(_QWORD *)(v2 + 30292) = 0;
      *((_QWORD *)v2 + 3762) = 0;
      *((_DWORD *)v2 + 7552) = 0;
    }
  }
  return result;
}

uint64_t ZSTD_frameHeaderSize_internal(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  v3 = 5;
  if (a3)
    v3 = 1;
  if (v3 > a2)
    return -72;
  v5 = *(unsigned __int8 *)(v3 + a1 - 1);
  v6 = v5 < 0x40;
  v7 = ZSTD_did_fieldSize[v5 & 3];
  v8 = *(_QWORD *)((char *)&ZSTD_fcs_fieldSize + ((v5 >> 3) & 0x18));
  LODWORD(v5) = v5 & 0x20;
  v9 = (_DWORD)v5 == 0;
  v10 = v6 & (v5 >> 5);
  v11 = v7 + v3 + v8;
  if (v9)
    ++v11;
  return v11 + v10;
}

uint64_t ZSTD_getFrameHeader_advanced(uint64_t a1, _DWORD *a2, unint64_t a3, int a4)
{
  unint64_t v4;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;

  if (a4)
    v4 = 1;
  else
    v4 = 5;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (v4 <= a3)
  {
    if (a2)
    {
      if (a4 == 1 || *a2 == -47205080)
      {
        v8 = ZSTD_frameHeaderSize_internal((uint64_t)a2, a3, a4);
        if (v8 <= a3)
        {
          *(_DWORD *)(a1 + 24) = v8;
          v9 = *((unsigned __int8 *)a2 + v4 - 1);
          if ((v9 & 8) != 0)
          {
            return -14;
          }
          else
          {
            if ((v9 & 0x20) != 0)
            {
              v11 = 0;
            }
            else
            {
              v10 = *((unsigned __int8 *)a2 + v4);
              if (v10 > 0xAF)
                return -16;
              ++v4;
              v11 = (1 << ((v10 >> 3) + 10))
                  + ((unint64_t)(1 << ((v10 >> 3) + 10)) >> 3) * (v10 & 7);
            }
            v12 = v9 & 3;
            v13 = v9 >> 6;
            switch(v12)
            {
              case 3:
                v14 = *(_DWORD *)((char *)a2 + v4);
                v4 += 4;
                break;
              case 2:
                v14 = *(unsigned __int16 *)((char *)a2 + v4);
                v4 += 2;
                break;
              case 1:
                v14 = *((unsigned __int8 *)a2 + v4++);
                break;
              default:
                v14 = 0;
                break;
            }
            v15 = (v9 >> 2) & 1;
            switch(v13)
            {
              case 1u:
                v16 = *(unsigned __int16 *)((char *)a2 + v4) + 256;
                break;
              case 2u:
                v16 = *(unsigned int *)((char *)a2 + v4);
                break;
              case 3u:
                v16 = *(_QWORD *)((char *)a2 + v4);
                break;
              default:
                if ((v9 & 0x20) != 0)
                  v16 = *((unsigned __int8 *)a2 + v4);
                else
                  v16 = -1;
                break;
            }
            v4 = 0;
            if ((v9 & 0x20) != 0)
              v17 = v16;
            else
              v17 = v11;
            *(_QWORD *)a1 = v16;
            *(_QWORD *)(a1 + 8) = v17;
            if (v17 >= 0x20000)
              LODWORD(v17) = 0x20000;
            *(_DWORD *)(a1 + 16) = v17;
            *(_DWORD *)(a1 + 20) = 0;
            *(_DWORD *)(a1 + 28) = v14;
            *(_DWORD *)(a1 + 32) = v15;
          }
        }
        else
        {
          return v8;
        }
      }
      else if (*a2 >> 4 == 25481893)
      {
        if (a3 >= 8)
        {
          v4 = 0;
          *(_QWORD *)a1 = a2[1];
          *(_DWORD *)(a1 + 20) = 1;
        }
        else
        {
          return 8;
        }
      }
      else
      {
        return -10;
      }
    }
    else
    {
      return -1;
    }
  }
  return v4;
}

unint64_t ZSTD_findFrameSizeInfo(char *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  unsigned __int16 *v7;
  unint64_t v8;
  uint64_t i;
  BOOL v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (a2 < 8 || *(_DWORD *)a1 >> 4 != 25481893)
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    result = ZSTD_getFrameHeader_advanced((uint64_t)&v13, a1, a2, 0);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    if (result)
      return -72;
    v7 = (unsigned __int16 *)&a1[DWORD2(v14)];
    v8 = a2 - DWORD2(v14);
    v12 = 0;
    v11 = 0;
    result = ZSTD_getcBlockSize(v7, v8, &v11);
    if (result > 0xFFFFFFFFFFFFFF88)
      return result;
    for (i = 1; ; ++i)
    {
      v10 = v8 >= result + 3;
      v8 -= result + 3;
      if (!v10)
        return -72;
      v7 = (unsigned __int16 *)((char *)v7 + result + 3);
      if (HIDWORD(v11))
        break;
      v12 = 0;
      v11 = 0;
      result = ZSTD_getcBlockSize(v7, v8, &v11);
      if (result >= 0xFFFFFFFFFFFFFF89)
        return result;
    }
    if ((_DWORD)v15)
    {
      if (v8 < 4)
        return -72;
      v7 += 2;
    }
    return (char *)v7 - a1;
  }
  v4 = *((unsigned int *)a1 + 1);
  v5 = v4 + 8;
  if (v4 + 8 > a2)
    v5 = -72;
  if (v4 <= 0xFFFFFFF7)
    return v5;
  else
    return -14;
}

uint64_t ZSTD_decompressMultiFrame(_QWORD *a1, uint64_t a2, uint64_t a3, char *a4, unint64_t a5, _DWORD *a6, unint64_t a7, uint64_t a8)
{
  _DWORD *v15;
  unint64_t v16;
  uint64_t v17;
  size_t v18;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  BOOL v32;
  unsigned __int8 *v33;
  unint64_t v34;
  char *v35;
  char *v36;
  unsigned __int16 *v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *__n;
  size_t __na;
  unint64_t v45;
  char *__dst;
  unint64_t v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  size_t __len;

  v15 = a1 + 3745;
  if (a8)
  {
    a6 = (_DWORD *)ZSTD_DDict_dictContent(a8);
    a7 = ZSTD_DDict_dictSize(a8);
  }
  v16 = 5;
  if (v15[34])
    v16 = 1;
  if (v16 <= a5)
  {
    v50 = a3;
    v20 = 0;
    v21 = a1 + 3750;
    v17 = a2;
    while (1)
    {
      while (*(_DWORD *)a4 >> 4 == 25481893)
      {
        if (a5 < 8)
          return -72;
        v22 = *((unsigned int *)a4 + 1);
        if (v22 > 0xFFFFFFF7)
          return -14;
        v23 = v22 + 8;
        if (v23 <= a5)
          v18 = v23;
        else
          v18 = -72;
        if (v18 > 0xFFFFFFFFFFFFFF88)
          return v18;
        a4 += v18;
        a5 -= v18;
        if (a5 < v16)
          goto LABEL_7;
      }
      v48 = v20;
      v49 = v21;
      v47 = a7;
      if (a8)
      {
        ZSTD_decompressBegin_usingDDict((uint64_t)a1, a8);
      }
      else
      {
        v24 = ZSTD_decompressBegin_usingDict((uint64_t)a1, a6, a7);
        if (v24 > 0xFFFFFFFFFFFFFF88)
          return v24;
      }
      ZSTD_checkContinuity(a1, v17, v50);
      v25 = v15[34];
      v26 = 9;
      if (v25)
        v26 = 5;
      if (a5 < v26)
      {
LABEL_32:
        v18 = -72;
        goto LABEL_33;
      }
      if (v25)
        v27 = 1;
      else
        v27 = 5;
      v28 = ZSTD_frameHeaderSize_internal((uint64_t)a4, v27, v25);
      v18 = v28;
      if (v28 <= 0xFFFFFFFFFFFFFF88)
      {
        if (a5 < v28 + 3)
          goto LABEL_32;
        v29 = ZSTD_decodeFrameHeader((uint64_t)a1, a4, v28);
        if (v29 > 0xFFFFFFFFFFFFFF88)
        {
          v18 = v29;
        }
        else
        {
          LODWORD(__len) = 0;
          v51 = 0;
          __n = &a4[v18];
          v45 = a5 - v18;
          v30 = ZSTD_getcBlockSize((unsigned __int16 *)&a4[v18], a5 - v18, &v51);
          v31 = v30;
          if (v30 <= 0xFFFFFFFFFFFFFF88)
          {
            v41 = v17 + v50;
            __dst = (char *)v17;
            while (1)
            {
              v32 = v45 - 3 >= v31;
              v45 = v45 - 3 - v31;
              if (!v32)
                goto LABEL_32;
              v33 = (unsigned __int8 *)(__n + 3);
              v42 = __n + 3;
              __na = v31;
              if ((_DWORD)v51 == 2)
              {
                v34 = ZSTD_decompressBlock_internal((uint64_t)a1, __dst, v41 - (_QWORD)__dst, (uint64_t)v33, v31, 1);
                v31 = __na;
                v18 = v34;
                if (v34 > 0xFFFFFFFFFFFFFF88)
                  goto LABEL_33;
              }
              else
              {
                if ((_DWORD)v51 == 1)
                {
                  v18 = __len;
                  if (v41 - (uint64_t)__dst < (unint64_t)__len)
                    goto LABEL_69;
                  if (__dst)
                  {
                    memset(__dst, *v33, __len);
                    v31 = __na;
                    goto LABEL_59;
                  }
                  if ((_DWORD)__len)
                  {
LABEL_73:
                    v18 = -74;
                    goto LABEL_33;
                  }
                }
                else
                {
                  if ((_DWORD)v51)
                    goto LABEL_68;
                  if (v31 > v41 - (uint64_t)__dst)
                  {
LABEL_69:
                    v18 = -70;
                    goto LABEL_33;
                  }
                  if (__dst)
                  {
                    memcpy(__dst, v33, v31);
                    v31 = __na;
                    v18 = __na;
                    goto LABEL_59;
                  }
                  if (v31)
                    goto LABEL_73;
                }
                v18 = 0;
              }
LABEL_59:
              v35 = __dst;
              if (v15[36])
              {
                ZSTD_XXH64_update((uint64_t)v49, __dst, v18);
                v35 = __dst;
                v31 = __na;
              }
              v36 = &v35[v18];
              v37 = (unsigned __int16 *)&v42[v31];
              __n = &v42[v31];
              if (HIDWORD(v51))
              {
                v38 = a1[3741];
                v18 = (size_t)&v36[-v17];
                if (v38 != -1 && v18 != v38)
                {
LABEL_68:
                  v18 = -20;
                  goto LABEL_33;
                }
                if (*v15)
                {
                  v39 = v45 - 4;
                  if (v45 >= 4
                    && (v15[35]
                     || (v40 = ZSTD_XXH64_digest(v49),
                         v39 = v45 - 4,
                         v37 = (unsigned __int16 *)__n,
                         *(_DWORD *)__n == v40)))
                  {
                    a4 = (char *)(v37 + 2);
                    a5 = v39;
                  }
                  else
                  {
                    v18 = -22;
                  }
                }
                else
                {
                  a4 = &v42[v31];
                  a5 = v45;
                }
                goto LABEL_33;
              }
              __dst = v36;
              LODWORD(__len) = 0;
              v51 = 0;
              v31 = ZSTD_getcBlockSize(v37, v45, &v51);
              v18 = v31;
              if (v31 >= 0xFFFFFFFFFFFFFF89)
                goto LABEL_33;
            }
          }
          v18 = v30;
        }
      }
LABEL_33:
      if (((ZSTD_getErrorCode(v18) == 10) & v48) != 0)
        return -72;
      if (v18 > 0xFFFFFFFFFFFFFF88)
        return v18;
      v17 += v18;
      v50 -= v18;
      v16 = 5;
      if (v15[34])
        v16 = 1;
      v20 = 1;
      a7 = v47;
      v21 = v49;
      if (a5 < v16)
        goto LABEL_7;
    }
  }
  v17 = a2;
LABEL_7:
  if (a5)
    return -72;
  else
    return v17 - a2;
}

double ZSTD_getDDict(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  double result;

  v2 = (_DWORD *)(a1 + 30192);
  v3 = *(_DWORD *)(a1 + 30192);
  if (v3 != -1)
  {
    if (v3 == 1)
    {
      *v2 = 0;
    }
    else
    {
      ZSTD_freeDDict(*(_OWORD **)(a1 + 30168));
      *v2 = 0;
      result = 0.0;
      *(_OWORD *)(a1 + 30168) = 0u;
    }
  }
  return result;
}

uint64_t ZSTD_decompressContinue(uint64_t a1, char *a2, unint64_t a3, _DWORD *a4, size_t a5)
{
  size_t v5;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;

  v5 = a5;
  v10 = (unsigned int *)(a1 + 29944);
  if ((*(_DWORD *)(a1 + 29988) - 3) >= 2)
  {
    v12 = *(_QWORD *)(a1 + 29920);
  }
  else
  {
    if (*(_QWORD *)(a1 + 29920) >= a5)
      v11 = a5;
    else
      v11 = *(_QWORD *)(a1 + 29920);
    if (v11 <= 1)
      v11 = 1;
    if (*(_DWORD *)(a1 + 29984))
      v12 = *(_QWORD *)(a1 + 29920);
    else
      v12 = v11;
  }
  if (v12 != a5)
    return -72;
  ZSTD_checkContinuity((_QWORD *)a1, (uint64_t)a2, a3);
  *(_QWORD *)(a1 + 29968) += v5;
  switch(v10[11])
  {
    case 0u:
      v16 = v10[38];
      if (!v16 && *a4 >> 4 == 25481893)
      {
        memcpy((void *)(a1 + 95916), a4, v5);
        v14 = 0;
        *(_QWORD *)(a1 + 29920) = 8 - v5;
        v17 = 6;
        goto LABEL_36;
      }
      v14 = ZSTD_frameHeaderSize_internal((uint64_t)a4, v5, v16);
      *(_QWORD *)(a1 + 30088) = v14;
      if (v14 <= 0xFFFFFFFFFFFFFF88)
      {
        memcpy((void *)(a1 + 95916), a4, v5);
        *(_QWORD *)(a1 + 29920) = v14 - v5;
        v10[11] = 1;
        return 0;
      }
      return v14;
    case 1u:
      memcpy((void *)(a1 + 95916 + *(_QWORD *)(a1 + 30088) - v5), a4, v5);
      v14 = ZSTD_decodeFrameHeader(a1, (_DWORD *)(a1 + 95916), *(_QWORD *)(a1 + 30088));
      if (v14 <= 0xFFFFFFFFFFFFFF88)
      {
        v14 = 0;
        *(_QWORD *)(a1 + 29920) = 3;
        v17 = 2;
        goto LABEL_36;
      }
      return v14;
    case 2u:
      v23 = 0;
      v22 = 0;
      v18 = ZSTD_getcBlockSize((unsigned __int16 *)a4, 3uLL, &v22);
      v14 = v18;
      if (v18 <= 0xFFFFFFFFFFFFFF88)
      {
        if (v18 > *v10)
          return -20;
        *(_QWORD *)(a1 + 29920) = v18;
        v19 = HIDWORD(v22);
        v10[10] = v22;
        *(_QWORD *)(a1 + 30152) = v23;
        if (v18)
        {
          if (v19)
            v17 = 4;
          else
            v17 = 3;
        }
        else if (v19)
        {
          v17 = v10[4];
          if (v17)
          {
            *(_QWORD *)(a1 + 29920) = 4;
            v17 = 5;
          }
          else
          {
            *(_QWORD *)(a1 + 29920) = 0;
          }
        }
        else
        {
          *(_QWORD *)(a1 + 29920) = 3;
          v17 = 2;
        }
        v14 = 0;
        goto LABEL_36;
      }
      return v14;
    case 3u:
    case 4u:
      v13 = v10[10];
      if (v13)
      {
        if (v13 == 1)
        {
          v5 = *(_QWORD *)(a1 + 30152);
          if (v5 <= a3)
          {
            if (a2)
            {
              memset(a2, *(unsigned __int8 *)a4, *(_QWORD *)(a1 + 30152));
            }
            else if (v5)
            {
              v5 = -74;
            }
            else
            {
              v5 = 0;
            }
          }
          else
          {
            v5 = -70;
          }
        }
        else
        {
          if (v13 != 2)
            return -20;
          v5 = ZSTD_decompressBlock_internal(a1, a2, a3, (uint64_t)a4, v5, 1);
        }
        v20 = 0;
        *(_QWORD *)(a1 + 29920) = 0;
        v14 = v5;
        if (v5 <= 0xFFFFFFFFFFFFFF88)
          goto LABEL_59;
      }
      else
      {
        if (v5 <= a3)
        {
          if (a2)
          {
            memcpy(a2, a4, v5);
            if (v5 > 0xFFFFFFFFFFFFFF88)
              return v5;
          }
          else if (v5)
          {
            return -74;
          }
          v20 = *(_QWORD *)(a1 + 29920) - v5;
          *(_QWORD *)(a1 + 29920) = v20;
LABEL_59:
          if (v5 > *v10)
            return -20;
          *(_QWORD *)(a1 + 29976) += v5;
          if (v10[40])
          {
            ZSTD_XXH64_update(a1 + 30000, a2, v5);
            v20 = *(_QWORD *)(a1 + 29920);
          }
          *(_QWORD *)(a1 + 29888) = &a2[v5];
          if (!v20)
          {
            if (v10[11] == 4)
            {
              v21 = *(_QWORD *)(a1 + 29928);
              if (v21 != -1 && *(_QWORD *)(a1 + 29976) != v21)
                return -20;
              if (v10[4])
              {
                *(_QWORD *)(a1 + 29920) = 4;
                v10[11] = 5;
              }
              else
              {
                *(_QWORD *)(a1 + 29920) = 0;
                v10[11] = 0;
              }
            }
            else
            {
              v10[11] = 2;
              *(_QWORD *)(a1 + 29920) = 3;
            }
          }
          return v5;
        }
        v14 = -70;
      }
      break;
    case 5u:
      if (!v10[40] || *a4 == ZSTD_XXH64_digest((_QWORD *)(a1 + 30000)))
        goto LABEL_34;
      return -22;
    case 6u:
      memcpy((void *)(a1 - v5 + 95924), a4, v5);
      v14 = 0;
      *(_QWORD *)(a1 + 29920) = *(unsigned int *)(a1 + 95920);
      v17 = 7;
LABEL_36:
      v10[11] = v17;
      return v14;
    case 7u:
LABEL_34:
      v14 = 0;
      *(_QWORD *)(a1 + 29920) = 0;
      v10[11] = 0;
      return v14;
    default:
      return -1;
  }
  return v14;
}

unint64_t ZSTD_decodeFrameHeader(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  _DWORD *v5;
  unint64_t result;
  int v7;

  v5 = (_DWORD *)(a1 + 29956);
  result = ZSTD_getFrameHeader_advanced(a1 + 29928, a2, a3, *(_DWORD *)(a1 + 30096));
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (result)
    {
      return -72;
    }
    else
    {
      if (v5[63] == 1 && *(_QWORD *)(a1 + 30200))
        ZSTD_DCtx_selectFrameDDict(a1);
      if (*v5 && v5[57] != *v5)
      {
        return -32;
      }
      else
      {
        if (v5[1])
        {
          v7 = v5[36];
          v5[37] = v7 == 0;
          if (!v7)
            ZSTD_XXH64_reset(a1 + 30000, 0);
        }
        else
        {
          v5[37] = 0;
        }
        result = 0;
        *(_QWORD *)(a1 + 29968) += a3;
      }
    }
  }
  return result;
}

uint64_t ZSTD_loadDEntropy(int *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t DTableX2_wksp;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _WORD v32[13];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a3 >= 9)
  {
    v6 = a2 + 8;
    DTableX2_wksp = HUF_readDTableX2_wksp(a1 + 2566, (char *)(a2 + 8), a3 - 8, (uint64_t)a1, 0x2818uLL);
    if (DTableX2_wksp <= 0xFFFFFFFFFFFFFF88)
    {
      v8 = DTableX2_wksp;
      v9 = a2 + a3;
      v10 = v6 + DTableX2_wksp;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0;
      v26 = 31;
      v11 = FSE_readNCount(&v27, &v26, &v25, v10, a2 + a3 - v10);
      if (v11 <= 0xFFFFFFFFFFFFFF88 && v26 <= 0x1F && v25 < 9)
      {
        v12 = v11;
        ZSTD_buildFSETable(a1 + 1026, (uint64_t)&v27, v26, (uint64_t)&OF_base, (uint64_t)&OF_bits, v25, (uint64_t)(a1 + 6666));
        v13 = v10 + v12;
        v31 = 0u;
        memset(v32, 0, sizeof(v32));
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0;
        v26 = 52;
        v14 = FSE_readNCount(&v27, &v26, &v25, v10 + v12, v9 - (v10 + v12));
        if (v14 <= 0xFFFFFFFFFFFFFF88 && v26 <= 0x34 && v25 < 0xA)
        {
          v15 = v14;
          ZSTD_buildFSETable(a1 + 1540, (uint64_t)&v27, v26, (uint64_t)&ML_base, (uint64_t)&ML_bits_0, v25, (uint64_t)(a1 + 6666));
          v16 = v13 + v15;
          *(_QWORD *)&v31 = 0;
          v29 = 0u;
          v30 = 0u;
          v27 = 0u;
          v28 = 0u;
          v25 = 0;
          v26 = 35;
          v17 = FSE_readNCount(&v27, &v26, &v25, v13 + v15, v9 - (v13 + v15));
          if (v17 <= 0xFFFFFFFFFFFFFF88 && v26 <= 0x23 && v25 < 0xA)
          {
            v18 = v17;
            ZSTD_buildFSETable(a1, (uint64_t)&v27, v26, (uint64_t)&LL_base, (uint64_t)&LL_bits_0, v25, (uint64_t)(a1 + 6666));
            v19 = v16 + v18 + 12;
            if (v19 <= v9)
            {
              v21 = 0;
              v22 = v9 - v19;
              while (1)
              {
                v23 = *(unsigned int *)(v16 + v18 + v21 * 4);
                if (!(_DWORD)v23 || v22 < v23)
                  break;
                a1[v21 + 6663] = v23;
                if (++v21 == 3)
                  return v8 + v12 + v15 + v18 + 20;
              }
            }
          }
        }
      }
    }
  }
  return -30;
}

uint64_t ZSTD_decompressBegin_usingDict(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  unint64_t DEntropy;
  uint64_t v9;

  result = 0;
  v5 = 5;
  if (*(_DWORD *)(a1 + 30096))
    v5 = 1;
  *(_QWORD *)(a1 + 29920) = v5;
  *(_QWORD *)(a1 + 26684) = 0x400000001;
  *(_DWORD *)(a1 + 26692) = 8;
  *(_OWORD *)(a1 + 29888) = 0u;
  *(_OWORD *)(a1 + 29904) = 0u;
  *(_OWORD *)(a1 + 29968) = 0u;
  *(_DWORD *)(a1 + 10296) = 201326604;
  *(_DWORD *)(a1 + 30184) = 0;
  *(_OWORD *)(a1 + 29984) = xmmword_1B8629210;
  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 6192;
  *(_QWORD *)(a1 + 16) = a1 + 4136;
  *(_QWORD *)(a1 + 24) = a1 + 10296;
  if (a2 && a3)
  {
    if (a3 > 7 && *a2 == -332356553)
    {
      *(_DWORD *)(a1 + 30184) = a2[1];
      DEntropy = ZSTD_loadDEntropy((int *)(a1 + 32), (uint64_t)a2, a3);
      if (DEntropy > 0xFFFFFFFFFFFFFF88)
        return -30;
      *(_QWORD *)(a1 + 29992) = 0x100000001;
      v9 = *(_QWORD *)(a1 + 29888);
      *(_QWORD *)(a1 + 29912) = v9;
      *(_QWORD *)(a1 + 29904) = (char *)a2 + DEntropy + *(_QWORD *)(a1 + 29896) - v9;
      *(_QWORD *)(a1 + 29896) = (char *)a2 + DEntropy;
    }
    else
    {
      *(_QWORD *)(a1 + 29904) = a2;
      *(_QWORD *)(a1 + 29896) = a2;
    }
    result = 0;
    *(_QWORD *)(a1 + 29888) = (char *)a2 + a3;
  }
  return result;
}

uint64_t ZSTD_decompressBegin_usingDDict(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_DWORD *)(a1 + 30096);
  if (a2)
  {
    v5 = ZSTD_DDict_dictContent(a2);
    v4[23] = *(_QWORD *)(a1 + 29912) != v5 + ZSTD_DDict_dictSize(a2);
  }
  v6 = 5;
  if (*v4)
    v6 = 1;
  *(_QWORD *)(a1 + 29920) = v6;
  *(_OWORD *)(a1 + 29888) = 0u;
  *(_OWORD *)(a1 + 29904) = 0u;
  *(_OWORD *)(a1 + 29968) = 0u;
  *(_DWORD *)(a1 + 10296) = 201326604;
  v4[22] = 0;
  *(_OWORD *)(a1 + 29984) = xmmword_1B8629210;
  *(_QWORD *)(a1 + 26684) = 0x400000001;
  *(_DWORD *)(a1 + 26692) = 8;
  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 6192;
  *(_QWORD *)(a1 + 16) = a1 + 4136;
  *(_QWORD *)(a1 + 24) = a1 + 10296;
  if (a2)
    ZSTD_copyDDictParameters(a1, a2);
  return 0;
}

uint64_t ZSTD_getDictID_fromDict(_DWORD *a1, unint64_t a2)
{
  if (a2 >= 8 && *a1 == -332356553)
    return a1[1];
  else
    return 0;
}

double ZSTD_createDStream()
{
  return ZSTD_createDCtx_internal(&ZSTD_defaultCMem);
}

uint64_t ZSTD_DCtx_loadDictionary_advanced(uint64_t a1, const void *a2, size_t a3, int a4, int a5)
{
  _DWORD *v5;
  uint64_t result;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;

  v5 = (_DWORD *)(a1 + 30192);
  if (*(_DWORD *)(a1 + 30212))
    return -60;
  ZSTD_freeDDict(*(_OWORD **)(a1 + 30168));
  result = 0;
  *v5 = 0;
  *(_OWORD *)(a1 + 30168) = 0u;
  if (a2 && a3)
  {
    v15 = *(_QWORD *)(a1 + 30136);
    v14 = *(_OWORD *)(a1 + 30120);
    v12 = ZSTD_createDDict_advanced(a2, a3, a4, a5, &v14);
    *(_QWORD *)(a1 + 30168) = v12;
    if (v12)
    {
      v13 = v12;
      result = 0;
      *(_QWORD *)(a1 + 30176) = v13;
      *v5 = -1;
    }
    else
    {
      return -64;
    }
  }
  return result;
}

uint64_t ZSTD_DCtx_loadDictionary(uint64_t a1, const void *a2, size_t a3)
{
  return ZSTD_DCtx_loadDictionary_advanced(a1, a2, a3, 0, 0);
}

unint64_t ZSTD_initDStream(uint64_t a1)
{
  _DWORD *v1;
  unint64_t result;

  v1 = (_DWORD *)(a1 + 30096);
  *(_DWORD *)(a1 + 30212) = 0;
  *(_DWORD *)(a1 + 30292) = 0;
  result = ZSTD_DCtx_refDDict(a1, 0);
  if (result <= 0xFFFFFFFFFFFFFF88)
  {
    if (*v1)
      return 1;
    else
      return 5;
  }
  return result;
}

unint64_t ZSTD_DCtx_refDDict(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  unint64_t result;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = (_DWORD *)(a1 + 30192);
  if (*(_DWORD *)(a1 + 30212))
    return -60;
  ZSTD_freeDDict(*(_OWORD **)(a1 + 30168));
  *v2 = 0;
  *(_OWORD *)(a1 + 30168) = 0u;
  if (!a2)
    return 0;
  *(_QWORD *)(a1 + 30176) = a2;
  *v2 = -1;
  if (v2[4] != 1)
    return 0;
  v6 = *(_QWORD **)(a1 + 30200);
  if (!v6)
  {
    v17 = *(_QWORD *)(a1 + 30136);
    v15 = *(_OWORD *)(a1 + 30120);
    v18 = v15;
    v19 = *(_QWORD *)(a1 + 30136);
    v12 = ZSTD_customMalloc(0x18uLL, (uint64_t)&v18);
    if (v12)
    {
      v6 = v12;
      v18 = v15;
      v19 = v17;
      ZSTD_customCalloc(0x200uLL, (uint64_t)&v18);
      *v6 = v13;
      if (v13)
      {
        *(_OWORD *)(v6 + 1) = xmmword_1B8629220;
        *(_QWORD *)(a1 + 30200) = v6;
LABEL_17:
        result = ZSTD_DDictHashSet_emplaceDDict(v6, a2);
        if (result > 0xFFFFFFFFFFFFFF88)
          return result;
        return 0;
      }
      v18 = v15;
      v19 = v17;
      ZSTD_customFree(v6, (uint64_t)&v18);
    }
    *(_QWORD *)(a1 + 30200) = 0;
    return -64;
  }
  v7 = v6[1];
  if (v7 > 4 * v6[2])
    goto LABEL_17;
  v16 = *(_QWORD *)(a1 + 30136);
  v14 = *(_OWORD *)(a1 + 30120);
  v18 = v14;
  v19 = *(_QWORD *)(a1 + 30136);
  ZSTD_customCalloc(16 * v7, (uint64_t)&v18);
  if (!v8)
    return -64;
  v9 = (void *)*v6;
  v10 = v6[1];
  *v6 = v8;
  v6[1] = 2 * v7;
  v6[2] = 0;
  if (!v10)
  {
LABEL_13:
    v18 = v14;
    v19 = v16;
    ZSTD_customFree(v9, (uint64_t)&v18);
    goto LABEL_17;
  }
  v11 = (uint64_t *)v9;
  while (!*v11 || (unint64_t)ZSTD_DDictHashSet_emplaceDDict(v6, *v11) <= 0xFFFFFFFFFFFFFF88)
  {
    ++v11;
    if (!--v10)
      goto LABEL_13;
  }
  return -1;
}

uint64_t ZSTD_decompressStream(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t FrameHeader_advanced;
  unsigned int *v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  unint64_t v26;
  __int128 v27;
  int64_t v28;
  unint64_t v29;
  size_t v30;
  unsigned int v31;
  char *v32;
  char *v33;
  unint64_t FrameSizeInfo;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void *v50;
  size_t v51;
  unint64_t v52;
  size_t v53;
  uint64_t v54;
  size_t v55;
  size_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *__src;
  __int128 v84;
  uint64_t v85;
  char *v86;

  v4 = a3[1];
  v3 = a3[2];
  v5 = *a3;
  v7 = a2[1];
  v6 = a2[2];
  v8 = *a2;
  v9 = (char *)(*a2 + v6);
  v86 = v9;
  if (v3 > v4)
    return -72;
  if (v6 > v7)
    return -70;
  v74 = v9;
  v75 = v6;
  v80 = v7;
  v77 = v4;
  v78 = v3;
  v14 = (unsigned int *)(a1 + 29944);
  if (*(_DWORD *)(a1 + 30296) == 1)
  {
    if (*(_DWORD *)(a1 + 30212))
    {
      FrameHeader_advanced = -104;
      if (*(_QWORD *)(a1 + 30304) != v8 || *(_QWORD *)(a1 + 30320) != v6 || *(_QWORD *)(a1 + 30312) != v7)
        return FrameHeader_advanced;
    }
  }
  v81 = a1 + 95916;
  v15 = v8 + v7;
  v76 = a1 + 30304;
  v16 = (_QWORD *)(a1 + 30264);
  v79 = (unint64_t *)(a1 + 29928);
  v82 = (char *)(v5 + v4);
  __src = (char *)(v5 + v3);
  v71 = v4 - v3;
  v72 = a1 + 30120;
  v73 = (char *)(v5 + v3);
  while (2)
  {
    v17 = v86;
    while (1)
    {
      v18 = v14[67];
      if (v18 != 4)
        break;
      v19 = *(_QWORD *)(a1 + 30272);
      v20 = *(_QWORD *)(a1 + 30264);
      v21 = v19 - v20;
      v22 = v15 - (_QWORD)v17;
      if (v15 - (uint64_t)v17 >= (unint64_t)(v19 - v20))
        v23 = v19 - v20;
      else
        v23 = v15 - (_QWORD)v17;
      if (v23)
      {
        memcpy(v17, (const void *)(*(_QWORD *)(a1 + 30248) + v20), v23);
        v20 = *(_QWORD *)(a1 + 30264);
      }
      v17 += v23;
      v24 = v20 + v23;
      *v16 = v24;
      if (v21 > v22)
      {
        v86 = v17;
        v32 = __src;
        goto LABEL_103;
      }
      v14[67] = 2;
      v25 = *(_QWORD *)(a1 + 30256);
      if (v25 < *(_QWORD *)(a1 + 29928) && v24 + *v14 > v25)
      {
        *v16 = 0;
        *(_QWORD *)(a1 + 30272) = 0;
      }
    }
    switch(v18)
    {
      case 0u:
        v26 = 0;
        v86 = v17;
        v14[67] = 1;
        *(_QWORD *)(a1 + 30232) = 0;
        *(_QWORD *)(a1 + 30272) = 0;
        *(_QWORD *)(a1 + 30280) = 0;
        *v16 = 0;
        *(_DWORD *)(a1 + 30288) = 0;
        v27 = *(_OWORD *)a2;
        *(_QWORD *)(v76 + 16) = a2[2];
        *(_OWORD *)v76 = v27;
        goto LABEL_25;
      case 1u:
        v86 = v17;
        v26 = *(_QWORD *)(a1 + 30280);
LABEL_25:
        FrameHeader_advanced = ZSTD_getFrameHeader_advanced((uint64_t)v79, (_DWORD *)v81, v26, v14[38]);
        if (v14[66] && *(_QWORD *)(a1 + 30200))
          ZSTD_DCtx_selectFrameDDict(a1);
        if (FrameHeader_advanced > 0xFFFFFFFFFFFFFF88)
          return FrameHeader_advanced;
        if (FrameHeader_advanced)
        {
          v28 = *(_QWORD *)(a1 + 30280);
          v29 = FrameHeader_advanced - v28;
          if (FrameHeader_advanced - v28 > v82 - __src)
          {
            if (v82 != __src)
            {
              memcpy((void *)(v81 + v28), __src, v82 - __src);
              v28 = *(_QWORD *)(a1 + 30280) + v82 - __src;
              *(_QWORD *)(a1 + 30280) = v28;
            }
            a3[2] = a3[1];
            v67 = 2;
            if (!v14[38])
              v67 = 6;
            if (v67 <= FrameHeader_advanced)
              v67 = FrameHeader_advanced;
            return v67 - v28 + 3;
          }
          memcpy((void *)(v81 + v28), __src, FrameHeader_advanced - v28);
          *(_QWORD *)(a1 + 30280) = FrameHeader_advanced;
          __src += v29;
          continue;
        }
        if (*v79 != -1 && v14[1] != 1)
        {
          v33 = v86;
          if (v15 - (uint64_t)v86 >= *v79)
          {
            FrameSizeInfo = ZSTD_findFrameSizeInfo(v73, v71);
            if (FrameSizeInfo <= v71)
            {
              v68 = FrameSizeInfo;
              ZSTD_getDDict(a1);
              v70 = ZSTD_decompressMultiFrame((_QWORD *)a1, (uint64_t)v33, v15 - (_QWORD)v33, v73, v68, 0, 0, v69);
              FrameHeader_advanced = v70;
              if (v70 <= 0xFFFFFFFFFFFFFF88)
              {
                v32 = &v73[v68];
                v86 = &v33[v70];
                *(_QWORD *)(a1 + 29920) = 0;
LABEL_137:
                v14[67] = 0;
                goto LABEL_103;
              }
              return FrameHeader_advanced;
            }
          }
        }
        if (v14[88] == 1 && v14[1] != 1 && *v79 != -1 && v15 - (uint64_t)v86 < *v79)
          return -70;
        ZSTD_getDDict(a1);
        ZSTD_decompressBegin_usingDDict(a1, v35);
        if (*(_DWORD *)v81 >> 4 == 25481893)
        {
          v36 = *(unsigned int *)(v81 + 4);
          v37 = 7;
        }
        else
        {
          v38 = ZSTD_decodeFrameHeader(a1, (_DWORD *)v81, *(_QWORD *)(a1 + 30280));
          if (v38 > 0xFFFFFFFFFFFFFF88)
            return v38;
          v37 = 2;
          v36 = 3;
        }
        *(_QWORD *)(a1 + 29920) = v36;
        v14[11] = v37;
        v39 = *(_QWORD *)(a1 + 29936);
        if (v39 <= 0x400)
          v39 = 1024;
        *(_QWORD *)(a1 + 29936) = v39;
        if (v39 > *(_QWORD *)(a1 + 30240))
          return -16;
        if (*v14 <= 4)
          v40 = 4;
        else
          v40 = *v14;
        if (v14[88])
        {
          v41 = 0;
        }
        else
        {
          v42 = 0x20000;
          if (v39 < 0x20000)
            v42 = v39;
          v43 = v39 + 131136 + v42;
          if (v43 >= *v79)
            v41 = *v79;
          else
            v41 = v43;
        }
        v44 = *(_QWORD *)(a1 + 30224);
        v45 = *(_QWORD *)(a1 + 30256);
        if (v45 + v44 >= 3 * (v41 + v40))
        {
          v47 = v81;
          v46 = *(_QWORD *)(v81 + 20) + 1;
        }
        else
        {
          v46 = 0;
          v47 = v81;
        }
        *(_QWORD *)(v47 + 20) = v46;
        if (v44 < v40 || v45 < v41 || v46 >= 0x80)
        {
          v48 = *(_QWORD *)(a1 + 30160);
          if (v48)
          {
            if (v41 + v40 > v48 - 95944)
              return -64;
            v49 = *(char **)(a1 + 30216);
          }
          else
          {
            v50 = *(void **)(a1 + 30216);
            v84 = *(_OWORD *)v72;
            v85 = *(_QWORD *)(v72 + 16);
            ZSTD_customFree(v50, (uint64_t)&v84);
            *(_QWORD *)(a1 + 30224) = 0;
            *(_QWORD *)(a1 + 30256) = 0;
            v84 = *(_OWORD *)v72;
            v85 = *(_QWORD *)(v72 + 16);
            v49 = (char *)ZSTD_customMalloc(v41 + v40, (uint64_t)&v84);
            *(_QWORD *)(a1 + 30216) = v49;
            if (!v49)
              return -64;
          }
          *(_QWORD *)(a1 + 30224) = v40;
          *(_QWORD *)(a1 + 30248) = &v49[v40];
          *(_QWORD *)(a1 + 30256) = v41;
        }
        v14[67] = 2;
LABEL_72:
        v51 = v82 - __src;
        v31 = v14[11];
        if (v31 - 3 >= 2)
        {
          v30 = *(_QWORD *)(a1 + 29920);
        }
        else
        {
          v30 = *(_QWORD *)(a1 + 29920);
          if (!v14[10])
          {
            if (v30 >= v51)
              v52 = v82 - __src;
            else
              v52 = *(_QWORD *)(a1 + 29920);
            if (v52 <= 1)
              v53 = 1;
            else
              v53 = v52;
            v32 = __src;
            goto LABEL_83;
          }
        }
        v53 = v30;
        v32 = __src;
        if (!v30)
          goto LABEL_137;
LABEL_83:
        if (v51 >= v53)
        {
          v58 = v32;
          v57 = ZSTD_decompressContinueStream(a1, &v86, v15, v32, v53);
          FrameHeader_advanced = v57;
          __src = &v58[v53];
          goto LABEL_99;
        }
        if (v32 == v82)
        {
          v32 = v82;
          goto LABEL_103;
        }
        v14[67] = 3;
LABEL_86:
        v54 = *(_QWORD *)(a1 + 30232);
        v55 = v30 - v54;
        if (v31 == 7)
        {
          if (v55 >= v82 - v32)
            v56 = v82 - v32;
          else
            v56 = v30 - v54;
        }
        else
        {
          if (v55 > *(_QWORD *)(a1 + 30224) - v54)
            return -20;
          if (v55 >= v82 - v32)
            v56 = v82 - v32;
          else
            v56 = v30 - v54;
          if (v56)
          {
            memcpy((void *)(*(_QWORD *)(a1 + 30216) + v54), v32, v56);
            v32 = __src;
            v54 = *(_QWORD *)(a1 + 30232);
          }
        }
        v32 += v56;
        *(_QWORD *)(a1 + 30232) = v54 + v56;
        if (v56 >= v55)
        {
          __src = v32;
          *(_QWORD *)(a1 + 30232) = 0;
          v57 = ZSTD_decompressContinueStream(a1, &v86, v15, *(_DWORD **)(a1 + 30216), v30);
          FrameHeader_advanced = v57;
LABEL_99:
          if (v57 >= 0xFFFFFFFFFFFFFF89)
            return FrameHeader_advanced;
          continue;
        }
LABEL_103:
        a3[2] = (uint64_t)&v32[-*a3];
        v59 = v86;
        v60 = &v86[-*a2];
        a2[2] = (uint64_t)v60;
        *(_OWORD *)v76 = *(_OWORD *)a2;
        *(_QWORD *)(v76 + 16) = v60;
        if (v32 != v73 || v59 != v74)
        {
          v14[87] = 0;
LABEL_110:
          v62 = *(_QWORD *)(a1 + 29920);
          if (v62)
          {
            v63 = 3;
            if (v14[11] != 3)
              v63 = 0;
            return v62 - *(_QWORD *)(a1 + 30232) + v63;
          }
          else
          {
            v65 = v14[86];
            if (*(_QWORD *)(a1 + 30272) == *(_QWORD *)(a1 + 30264))
            {
              if (v65)
              {
                v66 = a3[2];
                if (v66 >= a3[1])
                {
                  v14[67] = 2;
                  return 1;
                }
                else
                {
                  FrameHeader_advanced = 0;
                  a3[2] = v66 + 1;
                }
              }
              else
              {
                return 0;
              }
            }
            else
            {
              FrameHeader_advanced = 1;
              if (!v65)
              {
                --a3[2];
                v14[86] = 1;
              }
            }
          }
          return FrameHeader_advanced;
        }
        v61 = v14[87];
        v14[87] = v61 + 1;
        if (v61 < 15)
          goto LABEL_110;
        if (v75 == v80)
          return -70;
        if (v78 != v77)
          goto LABEL_110;
        return -72;
      case 2u:
        v86 = v17;
        goto LABEL_72;
      case 3u:
        v86 = v17;
        v30 = *(_QWORD *)(a1 + 29920);
        v31 = v14[11];
        v32 = __src;
        goto LABEL_86;
      default:
        v86 = v17;
        return -1;
    }
  }
}

uint64_t ZSTD_DCtx_selectFrameDDict(uint64_t result)
{
  uint64_t v1;
  _DWORD *v2;
  _QWORD *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(result + 30176))
  {
    v1 = result;
    v2 = (_DWORD *)(result + 29956);
    v3 = *(_QWORD **)(result + 30200);
    v4 = *(_DWORD *)(result + 29956);
    LODWORD(v11) = v4;
    v5 = ZSTD_XXH64(&v11, 4uLL, 0);
    v6 = v3[1] - 1;
    v7 = v6 & v5;
    do
    {
      v8 = v7;
      result = ZSTD_getDictID_fromDDict(*(_QWORD *)(*v3 + 8 * v7));
      v7 = (v8 & v6) + 1;
    }
    while ((_DWORD)result != v4 && (_DWORD)result != 0);
    v10 = *(_QWORD *)(*v3 + 8 * v8);
    if (v10)
    {
      result = ZSTD_freeDDict(*(_OWORD **)(v1 + 30168));
      *(_QWORD *)(v1 + 30168) = 0;
      v2[57] = *v2;
      *(_QWORD *)(v1 + 30176) = v10;
      v2[59] = -1;
    }
  }
  return result;
}

unint64_t ZSTD_decompressContinueStream(uint64_t a1, char **a2, uint64_t a3, _DWORD *a4, size_t a5)
{
  uint64_t v6;
  int v7;
  char *v9;
  unint64_t v10;
  unint64_t result;
  unint64_t v12;
  uint64_t v13;
  int v15;

  v6 = a1 + 29988;
  v7 = *(_DWORD *)(a1 + 29988);
  if (*(_DWORD *)(a1 + 30296))
  {
    v9 = *a2;
    if (v7 == 7)
      v10 = 0;
    else
      v10 = a3 - (_QWORD)v9;
    result = ZSTD_decompressContinue(a1, v9, v10, a4, a5);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      *a2 += result;
      goto LABEL_16;
    }
  }
  else
  {
    if (v7 == 7)
    {
      v12 = 0;
      v13 = *(_QWORD *)(a1 + 30264);
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 30264);
      v12 = *(_QWORD *)(a1 + 30256) - v13;
    }
    result = ZSTD_decompressContinue(a1, (char *)(*(_QWORD *)(a1 + 30248) + v13), v12, a4, a5);
    if (result <= 0xFFFFFFFFFFFFFF88)
    {
      if (v7 == 7 || result != 0)
      {
        *(_QWORD *)(a1 + 30272) = *(_QWORD *)(a1 + 30264) + result;
        v15 = 4;
LABEL_17:
        result = 0;
        *(_DWORD *)(v6 + 224) = v15;
        return result;
      }
LABEL_16:
      v15 = 2;
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t ZSTD_DDictHashSet_emplaceDDict(uint64_t *a1, uint64_t a2)
{
  int DictID_fromDDict;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  DictID_fromDDict = ZSTD_getDictID_fromDDict(a2);
  LODWORD(v13) = DictID_fromDDict;
  v5 = ZSTD_XXH64(&v13, 4uLL, 0);
  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    return -1;
  v9 = v6 - 1;
  v10 = (v6 - 1) & v5;
  v11 = *a1;
  v12 = *(_QWORD *)(*a1 + 8 * v10);
  if (v12)
  {
    while (ZSTD_getDictID_fromDDict(v12) != DictID_fromDDict)
    {
      v10 = (v10 & v9) + 1;
      v11 = *a1;
      v12 = *(_QWORD *)(*a1 + 8 * v10);
      if (!v12)
      {
        v7 = a1[2];
        goto LABEL_7;
      }
    }
    result = 0;
    *(_QWORD *)(*a1 + 8 * v10) = a2;
  }
  else
  {
LABEL_7:
    result = 0;
    *(_QWORD *)(v11 + 8 * v10) = a2;
    a1[2] = v7 + 1;
  }
  return result;
}

uint64_t ZSTD_fillHashTable(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t i;
  char *v17;
  unint64_t v18;
  unint64_t v19;

  v3 = *(_QWORD *)(result + 8);
  v4 = *(unsigned int *)(result + 44);
  v5 = (_QWORD *)(v3 + v4);
  v6 = a2 - 6;
  v7 = v3 + v4 + 3;
  if (v7 < a2 - 6)
  {
    v8 = *(_QWORD *)(result + 96);
    v9 = *(_DWORD *)(result + 256);
    v10 = *(_DWORD *)(result + 248);
    result = (64 - v10);
    v11 = 32 - v10;
    v12 = v4 + 1;
    v13 = v9 - 5;
    do
    {
      switch(v13)
      {
        case 0:
          v14 = 0xCF1BBCDCBB000000 * *v5;
          goto LABEL_9;
        case 1:
          v14 = 0xCF1BBCDCBF9B0000 * *v5;
          goto LABEL_9;
        case 2:
          v14 = 0xCF1BBCDCBFA56300 * *v5;
          goto LABEL_9;
        case 3:
          v14 = 0xCF1BBCDCB7A56463 * *v5;
LABEL_9:
          v15 = v14 >> (64 - v10);
          break;
        default:
          v15 = (-1640531535 * *(_DWORD *)v5) >> v11;
          break;
      }
      *(_DWORD *)(v8 + 4 * v15) = (_DWORD)v5 - v3;
      if (a3)
      {
        for (i = 0; i != 2; ++i)
        {
          v17 = (char *)v5 + i;
          switch(v13)
          {
            case 0:
              v18 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v17 + 1);
              goto LABEL_17;
            case 1:
              v18 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v17 + 1);
              goto LABEL_17;
            case 2:
              v18 = 0xCF1BBCDCBFA56300 * *(_QWORD *)(v17 + 1);
              goto LABEL_17;
            case 3:
              v18 = 0xCF1BBCDCB7A56463 * *(_QWORD *)(v17 + 1);
LABEL_17:
              v19 = v18 >> (64 - v10);
              break;
            default:
              v19 = (-1640531535 * *(_DWORD *)(v17 + 1)) >> v11;
              break;
          }
          if (!*(_DWORD *)(v8 + 4 * v19))
            *(_DWORD *)(v8 + 4 * v19) = v12 + i;
        }
      }
      v7 += 3;
      v12 += 3;
      v5 = (_QWORD *)((char *)v5 + 3);
    }
    while (v7 < v6);
  }
  return result;
}

int64_t ZSTD_compressBlock_fast(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  _BOOL4 v14;
  unsigned int v15;
  _BOOL4 v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned __int8 *v21;
  _BOOL4 v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v29;
  int v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v56;
  _BOOL8 v57;
  uint64_t v58;
  unsigned __int8 *v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  BOOL v65;
  char *v66;
  unsigned __int8 *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned __int8 *v70;
  unint64_t v71;
  _OWORD *v72;
  _OWORD *v73;
  __int128 v74;
  char v75;
  uint64_t v76;
  _OWORD *v77;
  unint64_t v78;
  __int128 *v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unsigned __int8 *v89;
  unint64_t v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  unsigned int v106;
  _BOOL4 v107;
  unsigned int v108;
  _BOOL4 v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int v112;
  unsigned int v113;
  _BOOL4 v114;
  int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unsigned __int8 *v126;
  uint64_t v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  unsigned int v135;
  int v136;
  int v137;
  uint64_t v138;
  int v139;
  int v140;
  uint64_t v141;
  int v144;
  _BOOL8 v145;
  uint64_t v146;
  unsigned __int8 *v147;
  uint64_t v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  unsigned __int8 *v151;
  unsigned __int8 *v152;
  char *v153;
  unsigned __int8 *v154;
  unint64_t v155;
  unint64_t v156;
  unsigned __int8 *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _OWORD *v164;
  _OWORD *v165;
  __int128 v166;
  char v167;
  uint64_t v168;
  _OWORD *v169;
  unint64_t v170;
  __int128 *v171;
  __int128 v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  unsigned __int8 *v181;
  unint64_t v182;
  unint64_t v183;
  unsigned __int8 *v184;
  unint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  int v191;
  unsigned int v192;
  unsigned int v193;
  _BOOL4 v194;
  unsigned int v195;
  _BOOL4 v196;
  uint64_t v197;
  unint64_t v198;
  unsigned int v199;
  unsigned int v200;
  _BOOL4 v201;
  int v202;
  unsigned int v203;
  unsigned __int8 *v204;
  uint64_t v206;
  int v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unsigned __int8 *v212;
  uint64_t v213;
  unsigned __int8 *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  int v219;
  unsigned int v220;
  int v221;
  int v222;
  uint64_t v223;
  int v224;
  int v225;
  uint64_t v226;
  int v229;
  _BOOL8 v230;
  uint64_t v231;
  unsigned __int8 *v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  unsigned __int8 *v235;
  unsigned __int8 *v236;
  char *v237;
  unsigned __int8 *v238;
  unint64_t v239;
  unint64_t v240;
  unsigned __int8 *v241;
  unint64_t v242;
  _OWORD *v243;
  _OWORD *v244;
  __int128 v245;
  char v246;
  uint64_t v247;
  _OWORD *v248;
  unint64_t v249;
  __int128 *v250;
  __int128 v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  unint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  unsigned __int8 *v260;
  unint64_t v261;
  unint64_t v262;
  unsigned __int8 *v263;
  unint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  unint64_t v273;
  uint64_t v274;
  int v275;
  unsigned int v276;
  unsigned int v277;
  _BOOL4 v278;
  unsigned int v279;
  _BOOL4 v280;
  uint64_t v281;
  unint64_t v282;
  unsigned int v283;
  unsigned int v284;
  _BOOL4 v285;
  int v286;
  unsigned int v287;
  uint64_t v288;
  uint64_t v289;
  unsigned __int8 *v290;
  uint64_t v292;
  int v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unsigned __int8 *v298;
  uint64_t v299;
  unsigned __int8 *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  int v305;
  unsigned int v306;
  int v307;
  int v308;
  uint64_t v309;
  int v310;
  int v311;
  uint64_t v312;
  int v315;
  _BOOL8 v316;
  uint64_t v317;
  unsigned __int8 *v318;
  uint64_t v319;
  unsigned __int8 *v320;
  unsigned __int8 *v321;
  unsigned __int8 *v322;
  unsigned __int8 *v323;
  char *v324;
  unsigned __int8 *v325;
  unint64_t v326;
  unint64_t v327;
  unsigned __int8 *v328;
  unint64_t v329;
  _OWORD *v330;
  _OWORD *v331;
  __int128 v332;
  char v333;
  uint64_t v334;
  _OWORD *v335;
  unint64_t v336;
  __int128 *v337;
  __int128 v338;
  uint64_t v339;
  unint64_t v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  unsigned __int8 *v346;
  unint64_t v347;
  unint64_t v348;
  unsigned __int8 *v349;
  unint64_t v350;
  char *v351;
  char *v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  _QWORD *v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  int v361;
  unsigned int v362;
  unsigned int v363;
  _BOOL4 v364;
  unsigned int v365;
  _BOOL4 v366;
  uint64_t v367;
  unint64_t v368;
  unsigned int v369;
  unsigned int v370;
  _BOOL4 v371;
  int v372;
  unsigned int v373;
  unsigned __int8 *v374;
  uint64_t v376;
  int v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  unint64_t v381;
  int v382;
  unsigned __int8 *v383;
  unsigned __int8 *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  unsigned int v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  uint64_t v396;
  int v399;
  char *v400;
  _BOOL8 v401;
  uint64_t v402;
  unsigned __int8 *v403;
  unsigned __int8 *v404;
  unsigned __int8 *v405;
  unsigned __int8 *v406;
  unsigned __int8 *v407;
  char *v408;
  unsigned __int8 *v409;
  unint64_t v410;
  unint64_t v411;
  unsigned __int8 *v412;
  unint64_t v413;
  _OWORD *v414;
  _OWORD *v415;
  __int128 v416;
  char v417;
  uint64_t v418;
  _OWORD *v419;
  unint64_t v420;
  __int128 *v421;
  __int128 v422;
  uint64_t v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  unsigned __int8 *v430;
  unint64_t v431;
  unint64_t v432;
  unsigned __int8 *v433;
  unint64_t v434;
  char *v435;
  char *v436;
  uint64_t v437;
  unint64_t v438;
  uint64_t v439;
  uint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  unint64_t v443;
  unsigned int v444;
  unsigned int v445;
  uint64_t v446;
  int v447;
  unsigned int v448;
  unsigned int v449;
  _BOOL4 v450;
  unsigned int v451;
  _BOOL4 v452;
  uint64_t v453;
  unint64_t v454;
  unsigned int v455;
  unsigned int v456;
  _BOOL4 v457;
  int v458;
  unsigned int v459;
  uint64_t v461;
  int v462;
  unint64_t v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t v466;
  unsigned __int8 *v467;
  uint64_t v468;
  unsigned __int8 *v469;
  unsigned __int8 *v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  int v475;
  unsigned int v476;
  int v477;
  int v478;
  uint64_t v479;
  int v480;
  int v481;
  uint64_t v482;
  int v485;
  _BOOL8 v486;
  uint64_t v487;
  unsigned __int8 *v488;
  unsigned __int8 *v489;
  unsigned __int8 *v490;
  unsigned __int8 *v491;
  unsigned __int8 *v492;
  char *v493;
  unsigned __int8 *v494;
  unint64_t v495;
  unint64_t v496;
  unsigned __int8 *v497;
  uint64_t v498;
  uint64_t v499;
  _QWORD *v500;
  uint64_t v501;
  unint64_t v502;
  unint64_t v503;
  _OWORD *v504;
  _OWORD *v505;
  __int128 v506;
  char v507;
  uint64_t v508;
  _OWORD *v509;
  unint64_t v510;
  __int128 *v511;
  __int128 v512;
  uint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  unsigned __int8 *v521;
  unint64_t v522;
  unint64_t v523;
  unsigned __int8 *v524;
  unint64_t v525;
  char *v526;
  char *v527;
  uint64_t v528;
  unint64_t v529;
  uint64_t v530;
  int v531;
  unsigned int v532;
  unsigned int v533;
  _BOOL4 v534;
  unsigned int v535;
  _BOOL4 v536;
  uint64_t v537;
  unint64_t v538;
  unsigned int v539;
  unsigned int v540;
  _BOOL4 v541;
  int v542;
  unsigned int v543;
  uint64_t v545;
  int v546;
  unint64_t v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  unsigned __int8 *v551;
  uint64_t v552;
  unsigned __int8 *v553;
  unsigned __int8 *v554;
  unint64_t v555;
  uint64_t v556;
  uint64_t v557;
  unint64_t v558;
  int v559;
  unsigned int v560;
  int v561;
  int v562;
  uint64_t v563;
  int v564;
  int v565;
  uint64_t v566;
  int v569;
  _BOOL8 v570;
  uint64_t v571;
  unsigned __int8 *v572;
  unsigned __int8 *v573;
  unsigned __int8 *v574;
  unsigned __int8 *v575;
  unsigned __int8 *v576;
  char *v577;
  unsigned __int8 *v578;
  unint64_t v579;
  unint64_t v580;
  unsigned __int8 *v581;
  uint64_t v582;
  uint64_t v583;
  _QWORD *v584;
  uint64_t v585;
  unint64_t v586;
  unint64_t v587;
  _OWORD *v588;
  _OWORD *v589;
  __int128 v590;
  char v591;
  uint64_t v592;
  _OWORD *v593;
  unint64_t v594;
  __int128 *v595;
  __int128 v596;
  uint64_t v597;
  unint64_t v598;
  unint64_t v599;
  unint64_t v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  char *v604;
  unsigned __int8 *v605;
  unint64_t v606;
  unint64_t v607;
  unsigned __int8 *v608;
  unint64_t v609;
  char *v610;
  char *v611;
  uint64_t v612;
  unint64_t v613;
  uint64_t v614;
  int v615;
  unsigned int v616;
  unsigned int v617;
  _BOOL4 v618;
  unsigned int v619;
  _BOOL4 v620;
  uint64_t v621;
  unint64_t v622;
  unsigned int v623;
  unsigned int v624;
  _BOOL4 v625;
  int v626;
  unsigned int v627;
  uint64_t v629;
  int v630;
  unint64_t v631;
  unint64_t v632;
  unint64_t v633;
  unint64_t v634;
  unsigned __int8 *v635;
  int v636;
  unsigned __int8 *v637;
  unsigned __int8 *v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  int v643;
  unsigned int v644;
  int v645;
  int v646;
  int v647;
  int v648;
  int v649;
  uint64_t v650;
  int v653;
  _BOOL8 v654;
  uint64_t v655;
  unsigned __int8 *v656;
  unsigned __int8 *v657;
  unsigned __int8 *v658;
  unsigned __int8 *v659;
  unsigned __int8 *v660;
  char *v661;
  unsigned __int8 *v662;
  unint64_t v663;
  unint64_t v664;
  unsigned __int8 *v665;
  uint64_t v666;
  uint64_t v667;
  _QWORD *v668;
  uint64_t v669;
  unint64_t v670;
  unint64_t v671;
  _OWORD *v672;
  _OWORD *v673;
  __int128 v674;
  char v675;
  uint64_t v676;
  _OWORD *v677;
  unint64_t v678;
  __int128 *v679;
  __int128 v680;
  uint64_t v681;
  unint64_t v682;
  unint64_t v683;
  unint64_t v684;
  unint64_t v685;
  uint64_t v686;
  uint64_t v687;
  char *v688;
  unsigned __int8 *v689;
  unint64_t v690;
  unint64_t v691;
  unsigned __int8 *v692;
  unint64_t v693;
  char *v694;
  char *v695;
  uint64_t v696;
  unint64_t v697;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  unsigned int v703;
  unsigned int v704;
  unsigned int v705;
  unsigned int v706;
  unsigned int v707;
  unsigned int v708;
  unsigned int v709;
  unsigned int v710;
  unsigned int v711;

  v6 = *(_DWORD *)(a1 + 256);
  v7 = *(_DWORD *)(a1 + 260);
  if (v7 >= 2)
  {
    v8 = v7 + 1;
    if (v6 != 5)
    {
      if (v6 != 6)
      {
        if (v6 == 7)
        {
          v9 = *(_QWORD *)(a1 + 8);
          v10 = &a4[a5];
          v11 = (_DWORD)a4 + a5 - v9;
          v12 = 1 << *(_DWORD *)(a1 + 240);
          v13 = *(_DWORD *)(a1 + 24);
          v14 = v11 - v13 > v12;
          v15 = v11 - v12;
          v16 = *(_DWORD *)(a1 + 40) == 0;
          if (v16 && v14)
            v17 = v15;
          else
            v17 = v13;
          v18 = (unint64_t)(v10 - 8);
          v20 = *a3;
          v19 = a3[1];
          if ((unsigned __int8 *)(v9 + v17) == a4)
            v21 = a4 + 1;
          else
            v21 = a4;
          v22 = (_DWORD)v21 - (_DWORD)v9 - v13 > v12;
          v23 = (_DWORD)v21 - v9 - v12;
          if (!v16 || !v22)
            v23 = *(_DWORD *)(a1 + 24);
          v24 = (_DWORD)v21 - v9 - v23;
          if (v19 <= v24)
            v25 = v19;
          else
            v25 = 0;
          if (v20 <= v24)
            v26 = v20;
          else
            v26 = 0;
          v27 = &v21[v8];
          _X9 = &v21[v8 + 1];
          v706 = v19;
          v709 = v20;
          v703 = v24;
          if ((unint64_t)_X9 < v18)
          {
            v29 = *(_QWORD *)(a1 + 96);
            v699 = v8;
            v30 = 64 - *(_DWORD *)(a1 + 248);
            v31 = (unint64_t)(v10 - 7);
            v32 = (unint64_t)(v10 - 3);
            v33 = (unint64_t)(v10 - 1);
            v34 = (unint64_t)(v10 - 32);
LABEL_21:
            v35 = v21 + 1;
            v36 = *(_QWORD *)(v21 + 1);
            v37 = v21 + 128;
            v38 = (0xCF1BBCDCBFA56300 * *(_QWORD *)v21) >> v30;
            LODWORD(v39) = *(_DWORD *)(v29 + 4 * v38);
            v40 = v8;
            while (1)
            {
              v41 = (0xCF1BBCDCBFA56300 * v36) >> v30;
              v42 = *(_DWORD *)&v27[-v26];
              v43 = (_DWORD)v21 - v9;
              *(_DWORD *)(v29 + 4 * v38) = (_DWORD)v21 - v9;
              if ((_DWORD)v26 && *(_DWORD *)v27 == v42)
              {
                v56 = 0;
                v57 = *(v27 - 1) == v27[-v26 - 1];
                if (*(v27 - 1) == v27[-v26 - 1])
                  v58 = 5;
                else
                  v58 = 4;
                v21 = &v27[-v57];
                v59 = &v27[-v26 - v57];
                v60 = v26;
                v26 = v25;
                goto LABEL_51;
              }
              if (v39 >= v17)
              {
                v45 = *(_DWORD *)(v9 + v39);
                v44 = *(_DWORD *)v21;
              }
              else
              {
                v44 = *(_DWORD *)v21;
                v45 = *(_DWORD *)v21 ^ 1;
              }
              if (v44 == v45)
                goto LABEL_42;
              v39 = *(unsigned int *)(v29 + 4 * v41);
              v46 = *(_QWORD *)v27;
              v43 = (_DWORD)v35 - v9;
              *(_DWORD *)(v29 + 4 * v41) = (_DWORD)v35 - v9;
              if (v39 >= v17)
              {
                v48 = *(_DWORD *)(v9 + v39);
                v47 = *(_DWORD *)v35;
              }
              else
              {
                v47 = *(_DWORD *)v35;
                v48 = *(_DWORD *)v35 ^ 1;
              }
              v38 = (0xCF1BBCDCBFA56300 * v46) >> v30;
              if (v47 == v48)
                break;
              LODWORD(v39) = *(_DWORD *)(v29 + 4 * v38);
              v36 = *(_QWORD *)_X9;
              if (&v27[v40] >= v37)
              {
                v49 = v40 + 1;
                __asm
                {
                  PRFM            #0, [X9,#0x40]
                  PRFM            #0, [X9,#0x80]
                }
                v37 += 128;
              }
              else
              {
                v49 = v40;
              }
              v35 = _X9;
              v21 = v27;
              v27 += v40;
              _X9 += v40;
              v40 = v49;
              if ((unint64_t)_X9 >= v18)
                goto LABEL_597;
            }
            v21 = v35;
            v35 = v27;
            v41 = v38;
LABEL_42:
            v59 = (unsigned __int8 *)(v9 + v39);
            v60 = ((_DWORD)v21 - (_DWORD)v59);
            v56 = v60 + 2;
            if (v21 <= a4 || v39 <= v17)
            {
              v58 = 4;
            }
            else
            {
              v61 = (unsigned __int8 *)(v9 - 1 + v39);
              v62 = v21 - 1;
              v58 = 4;
              while (*v62 == *v61)
              {
                ++v58;
                v63 = v61 - 1;
                v64 = v62 - 1;
                if ((unint64_t)v61 > v9 + v17)
                {
                  --v61;
                  v65 = v62-- > a4;
                  if (v65)
                    continue;
                }
                v59 = v63 + 1;
                v21 = v64 + 1;
                goto LABEL_51;
              }
              v59 = v61 + 1;
              v21 = v62 + 1;
            }
LABEL_51:
            v66 = (char *)&v21[v58];
            v67 = &v59[v58];
            if (v31 <= (unint64_t)&v21[v58])
            {
              v70 = &v21[v58];
            }
            else
            {
              v68 = *(_QWORD *)v66 ^ *(_QWORD *)v67;
              if (v68)
              {
                v69 = __clz(__rbit64(v68)) >> 3;
                goto LABEL_65;
              }
              v98 = 0;
              v99 = (uint64_t)&v21[v58 + 8];
              while (1)
              {
                v100 = (_QWORD *)(v99 + v98);
                if (v99 + v98 >= v31)
                  break;
                v101 = *(_QWORD *)&v59[v58 + 8 + v98];
                v98 += 8;
                v102 = *v100 ^ v101;
                if (v102)
                {
                  v69 = v98 + (__clz(__rbit64(v102)) >> 3);
                  goto LABEL_65;
                }
              }
              v70 = &v21[v58 + 8 + v98];
              v67 = &v59[v58 + 8 + v98];
            }
            if ((unint64_t)v70 < v32 && *(_DWORD *)v67 == *(_DWORD *)v70)
            {
              v70 += 4;
              v67 += 4;
            }
            if ((unint64_t)v70 < v33 && *(unsigned __int16 *)v67 == *(unsigned __int16 *)v70)
            {
              v70 += 2;
              v67 += 2;
            }
            if (v70 < v10 && *v67 == *v70)
              ++v70;
            v69 = v70 - (unsigned __int8 *)v66;
LABEL_65:
            v71 = v21 - a4;
            v72 = *(_OWORD **)(a2 + 24);
            if ((unint64_t)v21 <= v34)
            {
              *v72 = *(_OWORD *)a4;
              v76 = *(_QWORD *)(a2 + 24);
              if (v71 <= 0x10)
              {
                *(_QWORD *)(a2 + 24) = v76 + v71;
                v81 = *(_QWORD *)(a2 + 8);
LABEL_79:
                v83 = v69 + v58;
                *(_WORD *)(v81 + 4) = v71;
                *(_DWORD *)v81 = v56 + 1;
                v84 = v69 + v58 - 3;
                if (v84 >= 0x10000)
                {
                  v85 = (unint64_t)(v81 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v85;
                }
                *(_WORD *)(v81 + 6) = v84;
                v86 = v81 + 8;
                *(_QWORD *)(a2 + 8) = v81 + 8;
                v21 += v83;
                if (v35 < v21)
                  *(_DWORD *)(v29 + 4 * v41) = (_DWORD)v35 - v9;
                if ((unint64_t)v21 > v18)
                {
                  v25 = v26;
LABEL_118:
                  v8 = v699;
                  goto LABEL_119;
                }
                *(_DWORD *)(v29 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v9 + 2 + v43)) >> v30)) = v43 + 2;
                *(_DWORD *)(v29 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v21 - 2)) >> v30)) = (_DWORD)v21 - 2 - v9;
                if (!(_DWORD)v26)
                {
                  v25 = 0;
                  goto LABEL_118;
                }
                v87 = v60;
                v8 = v699;
                while (1)
                {
                  v25 = v87;
                  v87 = v26;
                  if (*(_DWORD *)v21 != *(_DWORD *)&v21[-v26])
                  {
                    v60 = v25;
                    v25 = v26;
LABEL_119:
                    v27 = &v21[v8];
                    _X9 = &v21[v8 + 1];
                    v26 = v60;
                    a4 = v21;
                    if ((unint64_t)_X9 >= v18)
                    {
LABEL_598:
                      v444 = v706;
                      if (v706 <= v703)
                        v444 = 0;
                      if (v709 > v703)
                        v444 = v709;
                      if ((_DWORD)v60)
                        v445 = v60;
                      else
                        v445 = v444;
                      if ((_DWORD)v25)
                        v444 = v25;
                      goto LABEL_978;
                    }
                    goto LABEL_21;
                  }
                  v88 = (char *)(v21 + 4);
                  v89 = &v21[-v26 + 4];
                  if (v31 <= (unint64_t)(v21 + 4))
                    break;
                  v90 = *(_QWORD *)v88 ^ *(_QWORD *)v89;
                  if (!v90)
                  {
                    v94 = (char *)(v21 + 12);
                    while (1)
                    {
                      v95 = &v94[v90];
                      if ((unint64_t)&v94[v90] >= v31)
                        break;
                      v96 = *(_QWORD *)&v21[v90 + 12 - v87];
                      v90 += 8;
                      v97 = *(_QWORD *)v95 ^ v96;
                      if (v97)
                      {
                        v91 = v90 + (__clz(__rbit64(v97)) >> 3);
                        goto LABEL_102;
                      }
                    }
                    v92 = &v21[v90 + 12];
                    v89 = &v92[-v87];
                    goto LABEL_92;
                  }
                  v91 = __clz(__rbit64(v90)) >> 3;
LABEL_102:
                  *(_DWORD *)(v29 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v21) >> v30)) = (_DWORD)v21 - v9;
                  if ((unint64_t)v21 <= v34)
                  {
                    *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v21;
                    v86 = *(_QWORD *)(a2 + 8);
                  }
                  *(_WORD *)(v86 + 4) = 0;
                  *(_DWORD *)v86 = 1;
                  if (v91 + 1 >= 0x10000)
                  {
                    v93 = (unint64_t)(v86 - *(_QWORD *)a2) >> 3;
                    *(_DWORD *)(a2 + 72) = 2;
                    *(_DWORD *)(a2 + 76) = v93;
                  }
                  v21 += v91 + 4;
                  *(_WORD *)(v86 + 6) = v91 + 1;
                  v86 += 8;
                  *(_QWORD *)(a2 + 8) = v86;
                  v26 = v25;
                  v60 = v87;
                  if ((unint64_t)v21 > v18)
                    goto LABEL_119;
                }
                v92 = v21 + 4;
LABEL_92:
                if ((unint64_t)v92 < v32 && *(_DWORD *)v89 == *(_DWORD *)v92)
                {
                  v92 += 4;
                  v89 += 4;
                }
                if ((unint64_t)v92 < v33 && *(unsigned __int16 *)v89 == *(unsigned __int16 *)v92)
                {
                  v92 += 2;
                  v89 += 2;
                }
                if (v92 < v10 && *v89 == *v92)
                  ++v92;
                v91 = v92 - (unsigned __int8 *)v88;
                goto LABEL_102;
              }
              v77 = (_OWORD *)(v76 + 16);
              v78 = v76 + v71;
              v79 = (__int128 *)(a4 + 16);
              do
              {
                v80 = *v79++;
                *v77++ = v80;
              }
              while ((unint64_t)v77 < v78);
            }
            else
            {
              if ((unint64_t)a4 <= v34)
              {
                v73 = (_OWORD *)((char *)v72 + v34 - (_QWORD)a4);
                do
                {
                  v74 = *(_OWORD *)a4;
                  a4 += 16;
                  *v72++ = v74;
                }
                while (v72 < v73);
                a4 = v10 - 32;
                v72 = v73;
              }
              while (a4 < v21)
              {
                v75 = *a4++;
                *(_BYTE *)v72 = v75;
                v72 = (_OWORD *)((char *)v72 + 1);
              }
            }
            *(_QWORD *)(a2 + 24) += v71;
            v81 = *(_QWORD *)(a2 + 8);
            if (v71 >= 0x10000)
            {
              v82 = (unint64_t)(v81 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v82;
            }
            goto LABEL_79;
          }
LABEL_597:
          v21 = a4;
          LODWORD(v60) = v26;
          goto LABEL_598;
        }
        v360 = *(_QWORD *)(a1 + 8);
        v10 = &a4[a5];
        v361 = (_DWORD)a4 + a5 - v360;
        v362 = 1 << *(_DWORD *)(a1 + 240);
        v363 = *(_DWORD *)(a1 + 24);
        v364 = v361 - v363 > v362;
        v365 = v361 - v362;
        v366 = *(_DWORD *)(a1 + 40) == 0;
        if (v366 && v364)
          v367 = v365;
        else
          v367 = v363;
        v368 = (unint64_t)(v10 - 8);
        v369 = *a3;
        v370 = a3[1];
        if ((unsigned __int8 *)(v360 + v367) == a4)
          v21 = a4 + 1;
        else
          v21 = a4;
        v371 = (_DWORD)v21 - (_DWORD)v360 - v363 > v362;
        v372 = (_DWORD)v21 - v360 - v362;
        if (!v366 || !v371)
          v372 = *(_DWORD *)(a1 + 24);
        v373 = (_DWORD)v21 - v360 - v372;
        if (v370 <= v373)
          v25 = v370;
        else
          v25 = 0;
        if (v369 <= v373)
          v26 = v369;
        else
          v26 = 0;
        v374 = &v21[v8];
        _X6 = &v21[v8 + 1];
        v706 = a3[1];
        v709 = v369;
        v703 = v373;
        if ((unint64_t)_X6 >= v368)
          goto LABEL_597;
        v376 = *(_QWORD *)(a1 + 96);
        v702 = v8;
        v377 = 32 - *(_DWORD *)(a1 + 248);
        v378 = (unint64_t)(v10 - 7);
        v379 = (unint64_t)(v10 - 3);
        v380 = (unint64_t)(v10 - 1);
        v381 = (unint64_t)(v10 - 32);
        while (1)
        {
          v383 = v21 + 1;
          v382 = *(_DWORD *)(v21 + 1);
          v384 = v21 + 128;
          v385 = (-1640531535 * *(_DWORD *)v21) >> v377;
          LODWORD(v386) = *(_DWORD *)(v376 + 4 * v385);
          v387 = v8;
          while (1)
          {
            v388 = (-1640531535 * v382) >> v377;
            v389 = *(_DWORD *)&v374[-v26];
            v390 = (_DWORD)v21 - v360;
            *(_DWORD *)(v376 + 4 * v385) = (_DWORD)v21 - v360;
            v391 = *(_DWORD *)v374;
            if ((_DWORD)v26 && v391 == v389)
            {
              v399 = 0;
              v400 = (char *)&v374[-v26];
              v401 = *(v374 - 1) == *(v400 - 1);
              if (*(v374 - 1) == *(v400 - 1))
                v402 = 5;
              else
                v402 = 4;
              v21 = &v374[-v401];
              v403 = (unsigned __int8 *)&v400[-v401];
              v60 = v26;
              v26 = v25;
              goto LABEL_525;
            }
            if (v386 >= v367)
            {
              v393 = *(_DWORD *)(v360 + v386);
              v392 = *(_DWORD *)v21;
            }
            else
            {
              v392 = *(_DWORD *)v21;
              v393 = *(_DWORD *)v21 ^ 1;
            }
            if (v392 == v393)
              goto LABEL_516;
            v386 = *(unsigned int *)(v376 + 4 * v388);
            v390 = (_DWORD)v383 - v360;
            *(_DWORD *)(v376 + 4 * v388) = (_DWORD)v383 - v360;
            if (v386 >= v367)
            {
              v395 = *(_DWORD *)(v360 + v386);
              v394 = *(_DWORD *)v383;
            }
            else
            {
              v394 = *(_DWORD *)v383;
              v395 = *(_DWORD *)v383 ^ 1;
            }
            v385 = (-1640531535 * v391) >> v377;
            if (v394 == v395)
              break;
            LODWORD(v386) = *(_DWORD *)(v376 + 4 * v385);
            v382 = *(_DWORD *)_X6;
            if (&v374[v387] >= v384)
            {
              v396 = v387 + 1;
              __asm
              {
                PRFM            #0, [X6,#0x40]
                PRFM            #0, [X6,#0x80]
              }
              v384 += 128;
            }
            else
            {
              v396 = v387;
            }
            v383 = _X6;
            v21 = v374;
            v374 += v387;
            _X6 += v387;
            v387 = v396;
            if ((unint64_t)_X6 >= v368)
              goto LABEL_597;
          }
          v21 = v383;
          v383 = v374;
          v388 = v385;
LABEL_516:
          v403 = (unsigned __int8 *)(v360 + v386);
          v60 = ((_DWORD)v21 - (_DWORD)v403);
          v399 = v60 + 2;
          if (v21 <= a4 || v386 <= v367)
          {
            v402 = 4;
          }
          else
          {
            v404 = (unsigned __int8 *)(v360 - 1 + v386);
            v405 = v21 - 1;
            v402 = 4;
            while (*v405 == *v404)
            {
              ++v402;
              v406 = v404 - 1;
              v407 = v405 - 1;
              if ((unint64_t)v404 > v360 + v367)
              {
                --v404;
                v65 = v405-- > a4;
                if (v65)
                  continue;
              }
              v403 = v406 + 1;
              v21 = v407 + 1;
              goto LABEL_525;
            }
            v403 = v404 + 1;
            v21 = v405 + 1;
          }
LABEL_525:
          v408 = (char *)&v21[v402];
          v409 = &v403[v402];
          if (v378 <= (unint64_t)&v21[v402])
          {
            v412 = &v21[v402];
          }
          else
          {
            v410 = *(_QWORD *)v408 ^ *(_QWORD *)v409;
            if (v410)
            {
              v411 = __clz(__rbit64(v410)) >> 3;
              goto LABEL_539;
            }
            v439 = 0;
            v440 = (uint64_t)&v21[v402 + 8];
            while (1)
            {
              v441 = (_QWORD *)(v440 + v439);
              if (v440 + v439 >= v378)
                break;
              v442 = *(_QWORD *)&v403[v402 + 8 + v439];
              v439 += 8;
              v443 = *v441 ^ v442;
              if (v443)
              {
                v411 = v439 + (__clz(__rbit64(v443)) >> 3);
                goto LABEL_539;
              }
            }
            v412 = &v21[v402 + 8 + v439];
            v409 = &v403[v402 + 8 + v439];
          }
          if ((unint64_t)v412 < v379 && *(_DWORD *)v409 == *(_DWORD *)v412)
          {
            v412 += 4;
            v409 += 4;
          }
          if ((unint64_t)v412 < v380 && *(unsigned __int16 *)v409 == *(unsigned __int16 *)v412)
          {
            v412 += 2;
            v409 += 2;
          }
          if (v412 < v10 && *v409 == *v412)
            ++v412;
          v411 = v412 - (unsigned __int8 *)v408;
LABEL_539:
          v413 = v21 - a4;
          v414 = *(_OWORD **)(a2 + 24);
          if ((unint64_t)v21 <= v381)
          {
            *v414 = *(_OWORD *)a4;
            v418 = *(_QWORD *)(a2 + 24);
            if (v413 <= 0x10)
            {
              *(_QWORD *)(a2 + 24) = v418 + v413;
              v423 = *(_QWORD *)(a2 + 8);
              goto LABEL_553;
            }
            v419 = (_OWORD *)(v418 + 16);
            v420 = v418 + v413;
            v421 = (__int128 *)(a4 + 16);
            do
            {
              v422 = *v421++;
              *v419++ = v422;
            }
            while ((unint64_t)v419 < v420);
          }
          else
          {
            if ((unint64_t)a4 <= v381)
            {
              v415 = (_OWORD *)((char *)v414 + v381 - (_QWORD)a4);
              do
              {
                v416 = *(_OWORD *)a4;
                a4 += 16;
                *v414++ = v416;
              }
              while (v414 < v415);
              a4 = v10 - 32;
              v414 = v415;
            }
            while (a4 < v21)
            {
              v417 = *a4++;
              *(_BYTE *)v414 = v417;
              v414 = (_OWORD *)((char *)v414 + 1);
            }
          }
          *(_QWORD *)(a2 + 24) += v413;
          v423 = *(_QWORD *)(a2 + 8);
          if (v413 >= 0x10000)
          {
            v424 = (unint64_t)(v423 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v424;
          }
LABEL_553:
          v425 = v411 + v402;
          *(_WORD *)(v423 + 4) = v413;
          *(_DWORD *)v423 = v399 + 1;
          if (v425 - 3 >= 0x10000)
          {
            v426 = (unint64_t)(v423 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v426;
          }
          *(_WORD *)(v423 + 6) = v425 - 3;
          v427 = v423 + 8;
          *(_QWORD *)(a2 + 8) = v423 + 8;
          v21 += v425;
          if (v383 < v21)
            *(_DWORD *)(v376 + 4 * v388) = (_DWORD)v383 - v360;
          if ((unint64_t)v21 > v368)
          {
            v25 = v26;
LABEL_592:
            v8 = v702;
            goto LABEL_593;
          }
          *(_DWORD *)(v376 + 4 * ((-1640531535 * *(_DWORD *)(v360 + 2 + v390)) >> v377)) = v390 + 2;
          *(_DWORD *)(v376 + 4 * ((-1640531535 * *(_DWORD *)(v21 - 2)) >> v377)) = (_DWORD)v21
                                                                                                 - 2
                                                                                                 - v360;
          if (!(_DWORD)v26)
          {
            v25 = 0;
            goto LABEL_592;
          }
          v428 = v60;
          v8 = v702;
          while (1)
          {
            v25 = v428;
            v428 = v26;
            if (*(_DWORD *)v21 != *(_DWORD *)&v21[-v26])
              break;
            v429 = (char *)(v21 + 4);
            v430 = &v21[-v26 + 4];
            if (v378 <= (unint64_t)(v21 + 4))
            {
              v433 = v21 + 4;
            }
            else
            {
              v431 = *(_QWORD *)v429 ^ *(_QWORD *)v430;
              if (v431)
              {
                v432 = __clz(__rbit64(v431)) >> 3;
                goto LABEL_576;
              }
              v435 = (char *)(v21 + 12);
              while (1)
              {
                v436 = &v435[v431];
                if ((unint64_t)&v435[v431] >= v378)
                  break;
                v437 = *(_QWORD *)&v21[v431 + 12 - v26];
                v431 += 8;
                v438 = *(_QWORD *)v436 ^ v437;
                if (v438)
                {
                  v432 = v431 + (__clz(__rbit64(v438)) >> 3);
                  goto LABEL_576;
                }
              }
              v433 = &v21[v431 + 12];
              v430 = &v433[-v26];
            }
            if ((unint64_t)v433 < v379 && *(_DWORD *)v430 == *(_DWORD *)v433)
            {
              v433 += 4;
              v430 += 4;
            }
            if ((unint64_t)v433 < v380 && *(unsigned __int16 *)v430 == *(unsigned __int16 *)v433)
            {
              v433 += 2;
              v430 += 2;
            }
            if (v433 < v10 && *v430 == *v433)
              ++v433;
            v432 = v433 - (unsigned __int8 *)v429;
LABEL_576:
            *(_DWORD *)(v376 + 4 * ((-1640531535 * *(_DWORD *)v21) >> v377)) = (_DWORD)v21 - v360;
            if ((unint64_t)v21 <= v381)
            {
              *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v21;
              v427 = *(_QWORD *)(a2 + 8);
            }
            *(_WORD *)(v427 + 4) = 0;
            *(_DWORD *)v427 = 1;
            if (v432 + 1 >= 0x10000)
            {
              v434 = (unint64_t)(v427 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v434;
            }
            v21 += v432 + 4;
            *(_WORD *)(v427 + 6) = v432 + 1;
            v427 += 8;
            *(_QWORD *)(a2 + 8) = v427;
            v26 = v25;
            v60 = v428;
            if ((unint64_t)v21 > v368)
              goto LABEL_593;
          }
          v60 = v25;
          v25 = v26;
LABEL_593:
          v374 = &v21[v8];
          _X6 = &v21[v8 + 1];
          v26 = v60;
          a4 = v21;
          if ((unint64_t)_X6 >= v368)
            goto LABEL_598;
        }
      }
      v274 = *(_QWORD *)(a1 + 8);
      v10 = &a4[a5];
      v275 = (_DWORD)a4 + a5 - v274;
      v276 = 1 << *(_DWORD *)(a1 + 240);
      v277 = *(_DWORD *)(a1 + 24);
      v278 = v275 - v277 > v276;
      v279 = v275 - v276;
      v280 = *(_DWORD *)(a1 + 40) == 0;
      if (v280 && v278)
        v281 = v279;
      else
        v281 = v277;
      v282 = (unint64_t)(v10 - 8);
      v284 = *a3;
      v283 = a3[1];
      if ((unsigned __int8 *)(v274 + v281) == a4)
        v21 = a4 + 1;
      else
        v21 = a4;
      v285 = (_DWORD)v21 - (_DWORD)v274 - v277 > v276;
      v286 = (_DWORD)v21 - v274 - v276;
      if (!v280 || !v285)
        v286 = *(_DWORD *)(a1 + 24);
      v287 = (_DWORD)v21 - v274 - v286;
      if (v283 <= v287)
        v288 = v283;
      else
        v288 = 0;
      if (v284 <= v287)
        v289 = v284;
      else
        v289 = 0;
      v290 = &v21[v8];
      _X9 = &v21[v8 + 1];
      v708 = v283;
      v711 = v284;
      v705 = v287;
      if ((unint64_t)_X9 >= v282)
      {
LABEL_968:
        v21 = a4;
        LODWORD(v319) = v289;
        goto LABEL_969;
      }
      v292 = *(_QWORD *)(a1 + 96);
      v701 = v8;
      v293 = 64 - *(_DWORD *)(a1 + 248);
      v294 = (unint64_t)(v10 - 7);
      v295 = (unint64_t)(v10 - 3);
      v296 = (unint64_t)(v10 - 1);
      v297 = (unint64_t)(v10 - 32);
LABEL_377:
      v298 = v21 + 1;
      v299 = *(_QWORD *)(v21 + 1);
      v300 = v21 + 128;
      v301 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v21) >> v293;
      LODWORD(v302) = *(_DWORD *)(v292 + 4 * v301);
      v303 = v8;
      while (1)
      {
        v304 = (0xCF1BBCDCBF9B0000 * v299) >> v293;
        v305 = *(_DWORD *)&v290[-v289];
        v306 = (_DWORD)v21 - v274;
        *(_DWORD *)(v292 + 4 * v301) = (_DWORD)v21 - v274;
        if ((_DWORD)v289 && *(_DWORD *)v290 == v305)
        {
          v315 = 0;
          v316 = *(v290 - 1) == v290[-v289 - 1];
          if (*(v290 - 1) == v290[-v289 - 1])
            v317 = 5;
          else
            v317 = 4;
          v21 = &v290[-v316];
          v318 = &v290[-v289 - v316];
          v319 = v289;
          v289 = v288;
          goto LABEL_407;
        }
        if (v302 >= v281)
        {
          v308 = *(_DWORD *)(v274 + v302);
          v307 = *(_DWORD *)v21;
        }
        else
        {
          v307 = *(_DWORD *)v21;
          v308 = *(_DWORD *)v21 ^ 1;
        }
        if (v307 == v308)
          goto LABEL_398;
        v302 = *(unsigned int *)(v292 + 4 * v304);
        v309 = *(_QWORD *)v290;
        v306 = (_DWORD)v298 - v274;
        *(_DWORD *)(v292 + 4 * v304) = (_DWORD)v298 - v274;
        if (v302 >= v281)
        {
          v311 = *(_DWORD *)(v274 + v302);
          v310 = *(_DWORD *)v298;
        }
        else
        {
          v310 = *(_DWORD *)v298;
          v311 = *(_DWORD *)v298 ^ 1;
        }
        v301 = (0xCF1BBCDCBF9B0000 * v309) >> v293;
        if (v310 == v311)
          break;
        LODWORD(v302) = *(_DWORD *)(v292 + 4 * v301);
        v299 = *(_QWORD *)_X9;
        if (&v290[v303] >= v300)
        {
          v312 = v303 + 1;
          __asm
          {
            PRFM            #0, [X9,#0x40]
            PRFM            #0, [X9,#0x80]
          }
          v300 += 128;
        }
        else
        {
          v312 = v303;
        }
        v298 = _X9;
        v21 = v290;
        v290 += v303;
        _X9 += v303;
        v303 = v312;
        if ((unint64_t)_X9 >= v282)
          goto LABEL_968;
      }
      v21 = v298;
      v298 = v290;
      v304 = v301;
LABEL_398:
      v318 = (unsigned __int8 *)(v274 + v302);
      v319 = ((_DWORD)v21 - (_DWORD)v318);
      v315 = v319 + 2;
      if (v21 <= a4 || v302 <= v281)
      {
        v317 = 4;
      }
      else
      {
        v320 = (unsigned __int8 *)(v274 - 1 + v302);
        v321 = v21 - 1;
        v317 = 4;
        while (*v321 == *v320)
        {
          ++v317;
          v322 = v320 - 1;
          v323 = v321 - 1;
          if ((unint64_t)v320 > v274 + v281)
          {
            --v320;
            v65 = v321-- > a4;
            if (v65)
              continue;
          }
          v318 = v322 + 1;
          v21 = v323 + 1;
          goto LABEL_407;
        }
        v318 = v320 + 1;
        v21 = v321 + 1;
      }
LABEL_407:
      v324 = (char *)&v21[v317];
      v325 = &v318[v317];
      if (v294 <= (unint64_t)&v21[v317])
      {
        v328 = &v21[v317];
      }
      else
      {
        v326 = *(_QWORD *)v324 ^ *(_QWORD *)v325;
        if (v326)
        {
          v327 = __clz(__rbit64(v326)) >> 3;
          goto LABEL_421;
        }
        v355 = 0;
        v356 = (uint64_t)&v21[v317 + 8];
        while (1)
        {
          v357 = (_QWORD *)(v356 + v355);
          if (v356 + v355 >= v294)
            break;
          v358 = *(_QWORD *)&v318[v317 + 8 + v355];
          v355 += 8;
          v359 = *v357 ^ v358;
          if (v359)
          {
            v327 = v355 + (__clz(__rbit64(v359)) >> 3);
            goto LABEL_421;
          }
        }
        v328 = &v21[v317 + 8 + v355];
        v325 = &v318[v317 + 8 + v355];
      }
      if ((unint64_t)v328 < v295 && *(_DWORD *)v325 == *(_DWORD *)v328)
      {
        v328 += 4;
        v325 += 4;
      }
      if ((unint64_t)v328 < v296 && *(unsigned __int16 *)v325 == *(unsigned __int16 *)v328)
      {
        v328 += 2;
        v325 += 2;
      }
      if (v328 < v10 && *v325 == *v328)
        ++v328;
      v327 = v328 - (unsigned __int8 *)v324;
LABEL_421:
      v329 = v21 - a4;
      v330 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v21 <= v297)
      {
        *v330 = *(_OWORD *)a4;
        v334 = *(_QWORD *)(a2 + 24);
        if (v329 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v334 + v329;
          v339 = *(_QWORD *)(a2 + 8);
LABEL_435:
          v341 = v327 + v317;
          *(_WORD *)(v339 + 4) = v329;
          *(_DWORD *)v339 = v315 + 1;
          if (v341 - 3 >= 0x10000)
          {
            v342 = (unint64_t)(v339 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v342;
          }
          *(_WORD *)(v339 + 6) = v341 - 3;
          v343 = v339 + 8;
          *(_QWORD *)(a2 + 8) = v339 + 8;
          v21 += v341;
          if (v298 < v21)
            *(_DWORD *)(v292 + 4 * v304) = (_DWORD)v298 - v274;
          if ((unint64_t)v21 > v282)
          {
            v288 = v289;
LABEL_474:
            v8 = v701;
            goto LABEL_475;
          }
          *(_DWORD *)(v292 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v274 + 2 + v306)) >> v293)) = v306 + 2;
          *(_DWORD *)(v292 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v21 - 2)) >> v293)) = (_DWORD)v21 - 2 - v274;
          if (!(_DWORD)v289)
          {
            v288 = 0;
            goto LABEL_474;
          }
          v344 = v319;
          v8 = v701;
          while (1)
          {
            v288 = v344;
            v344 = v289;
            if (*(_DWORD *)v21 != *(_DWORD *)&v21[-v289])
            {
              v319 = v288;
              v288 = v289;
LABEL_475:
              v290 = &v21[v8];
              _X9 = &v21[v8 + 1];
              v289 = v319;
              a4 = v21;
              if ((unint64_t)_X9 >= v282)
              {
LABEL_969:
                v444 = v708;
                if (v708 <= v705)
                  v444 = 0;
                if (v711 > v705)
                  v444 = v711;
                if ((_DWORD)v319)
                  v445 = v319;
                else
                  v445 = v444;
                if ((_DWORD)v288)
                  v444 = v288;
                goto LABEL_978;
              }
              goto LABEL_377;
            }
            v345 = (char *)(v21 + 4);
            v346 = &v21[-v289 + 4];
            if (v294 <= (unint64_t)(v21 + 4))
              break;
            v347 = *(_QWORD *)v345 ^ *(_QWORD *)v346;
            if (!v347)
            {
              v351 = (char *)(v21 + 12);
              while (1)
              {
                v352 = &v351[v347];
                if ((unint64_t)&v351[v347] >= v294)
                  break;
                v353 = *(_QWORD *)&v21[v347 + 12 - v344];
                v347 += 8;
                v354 = *(_QWORD *)v352 ^ v353;
                if (v354)
                {
                  v348 = v347 + (__clz(__rbit64(v354)) >> 3);
                  goto LABEL_458;
                }
              }
              v349 = &v21[v347 + 12];
              v346 = &v349[-v344];
              goto LABEL_448;
            }
            v348 = __clz(__rbit64(v347)) >> 3;
LABEL_458:
            *(_DWORD *)(v292 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v21) >> v293)) = (_DWORD)v21 - v274;
            if ((unint64_t)v21 <= v297)
            {
              *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v21;
              v343 = *(_QWORD *)(a2 + 8);
            }
            *(_WORD *)(v343 + 4) = 0;
            *(_DWORD *)v343 = 1;
            if (v348 + 1 >= 0x10000)
            {
              v350 = (unint64_t)(v343 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v350;
            }
            v21 += v348 + 4;
            *(_WORD *)(v343 + 6) = v348 + 1;
            v343 += 8;
            *(_QWORD *)(a2 + 8) = v343;
            v289 = v288;
            v319 = v344;
            if ((unint64_t)v21 > v282)
              goto LABEL_475;
          }
          v349 = v21 + 4;
LABEL_448:
          if ((unint64_t)v349 < v295 && *(_DWORD *)v346 == *(_DWORD *)v349)
          {
            v349 += 4;
            v346 += 4;
          }
          if ((unint64_t)v349 < v296 && *(unsigned __int16 *)v346 == *(unsigned __int16 *)v349)
          {
            v349 += 2;
            v346 += 2;
          }
          if (v349 < v10 && *v346 == *v349)
            ++v349;
          v348 = v349 - (unsigned __int8 *)v345;
          goto LABEL_458;
        }
        v335 = (_OWORD *)(v334 + 16);
        v336 = v334 + v329;
        v337 = (__int128 *)(a4 + 16);
        do
        {
          v338 = *v337++;
          *v335++ = v338;
        }
        while ((unint64_t)v335 < v336);
      }
      else
      {
        if ((unint64_t)a4 <= v297)
        {
          v331 = (_OWORD *)((char *)v330 + v297 - (_QWORD)a4);
          do
          {
            v332 = *(_OWORD *)a4;
            a4 += 16;
            *v330++ = v332;
          }
          while (v330 < v331);
          a4 = v10 - 32;
          v330 = v331;
        }
        while (a4 < v21)
        {
          v333 = *a4++;
          *(_BYTE *)v330 = v333;
          v330 = (_OWORD *)((char *)v330 + 1);
        }
      }
      *(_QWORD *)(a2 + 24) += v329;
      v339 = *(_QWORD *)(a2 + 8);
      if (v329 >= 0x10000)
      {
        v340 = (unint64_t)(v339 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v340;
      }
      goto LABEL_435;
    }
    v190 = *(_QWORD *)(a1 + 8);
    v10 = &a4[a5];
    v191 = (_DWORD)a4 + a5 - v190;
    v192 = 1 << *(_DWORD *)(a1 + 240);
    v193 = *(_DWORD *)(a1 + 24);
    v194 = v191 - v193 > v192;
    v195 = v191 - v192;
    v196 = *(_DWORD *)(a1 + 40) == 0;
    if (v196 && v194)
      v197 = v195;
    else
      v197 = v193;
    v198 = (unint64_t)(v10 - 8);
    v200 = *a3;
    v199 = a3[1];
    if ((unsigned __int8 *)(v190 + v197) == a4)
      v21 = a4 + 1;
    else
      v21 = a4;
    v201 = (_DWORD)v21 - (_DWORD)v190 - v193 > v192;
    v202 = (_DWORD)v21 - v190 - v192;
    if (!v196 || !v201)
      v202 = *(_DWORD *)(a1 + 24);
    v203 = (_DWORD)v21 - v190 - v202;
    if (v199 <= v203)
      v25 = v199;
    else
      v25 = 0;
    if (v200 <= v203)
      v26 = v200;
    else
      v26 = 0;
    v204 = &v21[v8];
    _X9 = &v21[v8 + 1];
    v706 = v199;
    v709 = v200;
    v703 = v203;
    if ((unint64_t)_X9 >= v198)
      goto LABEL_597;
    v206 = *(_QWORD *)(a1 + 96);
    v700 = v8;
    v207 = 64 - *(_DWORD *)(a1 + 248);
    v208 = (unint64_t)(v10 - 7);
    v209 = (unint64_t)(v10 - 3);
    v210 = (unint64_t)(v10 - 1);
    v211 = (unint64_t)(v10 - 32);
    while (1)
    {
      v212 = v21 + 1;
      v213 = *(_QWORD *)(v21 + 1);
      v214 = v21 + 128;
      v215 = (0xCF1BBCDCBB000000 * *(_QWORD *)v21) >> v207;
      LODWORD(v216) = *(_DWORD *)(v206 + 4 * v215);
      v217 = v8;
      while (1)
      {
        v218 = (0xCF1BBCDCBB000000 * v213) >> v207;
        v219 = *(_DWORD *)&v204[-v26];
        v220 = (_DWORD)v21 - v190;
        *(_DWORD *)(v206 + 4 * v215) = (_DWORD)v21 - v190;
        if ((_DWORD)v26 && *(_DWORD *)v204 == v219)
        {
          v229 = 0;
          v230 = *(v204 - 1) == v204[-v26 - 1];
          if (*(v204 - 1) == v204[-v26 - 1])
            v231 = 5;
          else
            v231 = 4;
          v21 = &v204[-v230];
          v232 = &v204[-v26 - v230];
          v60 = v26;
          v26 = v25;
          goto LABEL_289;
        }
        if (v216 >= v197)
        {
          v222 = *(_DWORD *)(v190 + v216);
          v221 = *(_DWORD *)v21;
        }
        else
        {
          v221 = *(_DWORD *)v21;
          v222 = *(_DWORD *)v21 ^ 1;
        }
        if (v221 == v222)
          goto LABEL_280;
        v216 = *(unsigned int *)(v206 + 4 * v218);
        v223 = *(_QWORD *)v204;
        v220 = (_DWORD)v212 - v190;
        *(_DWORD *)(v206 + 4 * v218) = (_DWORD)v212 - v190;
        if (v216 >= v197)
        {
          v225 = *(_DWORD *)(v190 + v216);
          v224 = *(_DWORD *)v212;
        }
        else
        {
          v224 = *(_DWORD *)v212;
          v225 = *(_DWORD *)v212 ^ 1;
        }
        v215 = (0xCF1BBCDCBB000000 * v223) >> v207;
        if (v224 == v225)
          break;
        LODWORD(v216) = *(_DWORD *)(v206 + 4 * v215);
        v213 = *(_QWORD *)_X9;
        if (&v204[v217] >= v214)
        {
          v226 = v217 + 1;
          __asm
          {
            PRFM            #0, [X9,#0x40]
            PRFM            #0, [X9,#0x80]
          }
          v214 += 128;
        }
        else
        {
          v226 = v217;
        }
        v212 = _X9;
        v21 = v204;
        v204 += v217;
        _X9 += v217;
        v217 = v226;
        if ((unint64_t)_X9 >= v198)
          goto LABEL_597;
      }
      v21 = v212;
      v212 = v204;
      v218 = v215;
LABEL_280:
      v232 = (unsigned __int8 *)(v190 + v216);
      v60 = ((_DWORD)v21 - (_DWORD)v232);
      v229 = v60 + 2;
      if (v21 <= a4 || v216 <= v197)
      {
        v231 = 4;
      }
      else
      {
        v233 = (unsigned __int8 *)(v190 - 1 + v216);
        v234 = v21 - 1;
        v231 = 4;
        while (*v234 == *v233)
        {
          ++v231;
          v235 = v233 - 1;
          v236 = v234 - 1;
          if ((unint64_t)v233 > v190 + v197)
          {
            --v233;
            v65 = v234-- > a4;
            if (v65)
              continue;
          }
          v232 = v235 + 1;
          v21 = v236 + 1;
          goto LABEL_289;
        }
        v232 = v233 + 1;
        v21 = v234 + 1;
      }
LABEL_289:
      v237 = (char *)&v21[v231];
      v238 = &v232[v231];
      if (v208 <= (unint64_t)&v21[v231])
      {
        v241 = &v21[v231];
      }
      else
      {
        v239 = *(_QWORD *)v237 ^ *(_QWORD *)v238;
        if (v239)
        {
          v240 = __clz(__rbit64(v239)) >> 3;
          goto LABEL_303;
        }
        v269 = 0;
        v270 = (uint64_t)&v21[v231 + 8];
        while (1)
        {
          v271 = (_QWORD *)(v270 + v269);
          if (v270 + v269 >= v208)
            break;
          v272 = *(_QWORD *)&v232[v231 + 8 + v269];
          v269 += 8;
          v273 = *v271 ^ v272;
          if (v273)
          {
            v240 = v269 + (__clz(__rbit64(v273)) >> 3);
            goto LABEL_303;
          }
        }
        v241 = &v21[v231 + 8 + v269];
        v238 = &v232[v231 + 8 + v269];
      }
      if ((unint64_t)v241 < v209 && *(_DWORD *)v238 == *(_DWORD *)v241)
      {
        v241 += 4;
        v238 += 4;
      }
      if ((unint64_t)v241 < v210 && *(unsigned __int16 *)v238 == *(unsigned __int16 *)v241)
      {
        v241 += 2;
        v238 += 2;
      }
      if (v241 < v10 && *v238 == *v241)
        ++v241;
      v240 = v241 - (unsigned __int8 *)v237;
LABEL_303:
      v242 = v21 - a4;
      v243 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v21 <= v211)
      {
        *v243 = *(_OWORD *)a4;
        v247 = *(_QWORD *)(a2 + 24);
        if (v242 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v247 + v242;
          v252 = *(_QWORD *)(a2 + 8);
          goto LABEL_317;
        }
        v248 = (_OWORD *)(v247 + 16);
        v249 = v247 + v242;
        v250 = (__int128 *)(a4 + 16);
        do
        {
          v251 = *v250++;
          *v248++ = v251;
        }
        while ((unint64_t)v248 < v249);
      }
      else
      {
        if ((unint64_t)a4 <= v211)
        {
          v244 = (_OWORD *)((char *)v243 + v211 - (_QWORD)a4);
          do
          {
            v245 = *(_OWORD *)a4;
            a4 += 16;
            *v243++ = v245;
          }
          while (v243 < v244);
          a4 = v10 - 32;
          v243 = v244;
        }
        while (a4 < v21)
        {
          v246 = *a4++;
          *(_BYTE *)v243 = v246;
          v243 = (_OWORD *)((char *)v243 + 1);
        }
      }
      *(_QWORD *)(a2 + 24) += v242;
      v252 = *(_QWORD *)(a2 + 8);
      if (v242 >= 0x10000)
      {
        v253 = (unint64_t)(v252 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v253;
      }
LABEL_317:
      v254 = v240 + v231;
      *(_WORD *)(v252 + 4) = v242;
      *(_DWORD *)v252 = v229 + 1;
      v255 = v240 + v231 - 3;
      if (v255 >= 0x10000)
      {
        v256 = (unint64_t)(v252 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v256;
      }
      *(_WORD *)(v252 + 6) = v255;
      v257 = v252 + 8;
      *(_QWORD *)(a2 + 8) = v252 + 8;
      v21 += v254;
      if (v212 < v21)
        *(_DWORD *)(v206 + 4 * v218) = (_DWORD)v212 - v190;
      if ((unint64_t)v21 > v198)
      {
        v25 = v26;
LABEL_356:
        v8 = v700;
        goto LABEL_357;
      }
      *(_DWORD *)(v206 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v190 + 2 + v220)) >> v207)) = v220 + 2;
      *(_DWORD *)(v206 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v21 - 2)) >> v207)) = (_DWORD)v21 - 2 - v190;
      if (!(_DWORD)v26)
      {
        v25 = 0;
        goto LABEL_356;
      }
      v258 = v60;
      v8 = v700;
      while (1)
      {
        v25 = v258;
        v258 = v26;
        if (*(_DWORD *)v21 != *(_DWORD *)&v21[-v26])
          break;
        v259 = (char *)(v21 + 4);
        v260 = &v21[-v26 + 4];
        if (v208 <= (unint64_t)(v21 + 4))
        {
          v263 = v21 + 4;
        }
        else
        {
          v261 = *(_QWORD *)v259 ^ *(_QWORD *)v260;
          if (v261)
          {
            v262 = __clz(__rbit64(v261)) >> 3;
            goto LABEL_340;
          }
          v265 = (char *)(v21 + 12);
          while (1)
          {
            v266 = &v265[v261];
            if ((unint64_t)&v265[v261] >= v208)
              break;
            v267 = *(_QWORD *)&v21[v261 + 12 - v258];
            v261 += 8;
            v268 = *(_QWORD *)v266 ^ v267;
            if (v268)
            {
              v262 = v261 + (__clz(__rbit64(v268)) >> 3);
              goto LABEL_340;
            }
          }
          v263 = &v21[v261 + 12];
          v260 = &v263[-v258];
        }
        if ((unint64_t)v263 < v209 && *(_DWORD *)v260 == *(_DWORD *)v263)
        {
          v263 += 4;
          v260 += 4;
        }
        if ((unint64_t)v263 < v210 && *(unsigned __int16 *)v260 == *(unsigned __int16 *)v263)
        {
          v263 += 2;
          v260 += 2;
        }
        if (v263 < v10 && *v260 == *v263)
          ++v263;
        v262 = v263 - (unsigned __int8 *)v259;
LABEL_340:
        *(_DWORD *)(v206 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v21) >> v207)) = (_DWORD)v21 - v190;
        if ((unint64_t)v21 <= v211)
        {
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v21;
          v257 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)(v257 + 4) = 0;
        *(_DWORD *)v257 = 1;
        if (v262 + 1 >= 0x10000)
        {
          v264 = (unint64_t)(v257 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v264;
        }
        v21 += v262 + 4;
        *(_WORD *)(v257 + 6) = v262 + 1;
        v257 += 8;
        *(_QWORD *)(a2 + 8) = v257;
        v26 = v25;
        v60 = v258;
        if ((unint64_t)v21 > v198)
          goto LABEL_357;
      }
      v60 = v25;
      v25 = v26;
LABEL_357:
      v204 = &v21[v8];
      _X9 = &v21[v8 + 1];
      v26 = v60;
      a4 = v21;
      if ((unint64_t)_X9 >= v198)
        goto LABEL_598;
    }
  }
  if (v6 == 5)
  {
    v446 = *(_QWORD *)(a1 + 8);
    v10 = &a4[a5];
    v447 = (_DWORD)a4 + a5 - v446;
    v448 = 1 << *(_DWORD *)(a1 + 240);
    v449 = *(_DWORD *)(a1 + 24);
    v450 = v447 - v449 > v448;
    v451 = v447 - v448;
    v452 = *(_DWORD *)(a1 + 40) == 0;
    if (v452 && v450)
      v453 = v451;
    else
      v453 = v449;
    v454 = (unint64_t)(v10 - 8);
    v455 = *a3;
    v456 = a3[1];
    if ((unsigned __int8 *)(v446 + v453) == a4)
      v21 = a4 + 1;
    else
      v21 = a4;
    v457 = (_DWORD)v21 - (_DWORD)v446 - v449 > v448;
    v458 = (_DWORD)v21 - v446 - v448;
    if (!v452 || !v457)
      v458 = *(_DWORD *)(a1 + 24);
    v459 = (_DWORD)v21 - v446 - v458;
    if (v456 <= v459)
      v117 = v456;
    else
      v117 = 0;
    if (v455 <= v459)
      v118 = v455;
    else
      v118 = 0;
    _X14 = v21 + 3;
    v707 = v456;
    v710 = v455;
    v704 = (_DWORD)v21 - v446 - v458;
    if ((unint64_t)(v21 + 3) >= v454)
      goto LABEL_958;
    v461 = *(_QWORD *)(a1 + 96);
    v462 = 64 - *(_DWORD *)(a1 + 248);
    v463 = (unint64_t)(v10 - 7);
    v464 = (unint64_t)(v10 - 3);
    v465 = (unint64_t)(v10 - 1);
    v466 = (unint64_t)(v10 - 32);
    while (1)
    {
      v467 = v21 + 2;
      v469 = v21 + 1;
      v468 = *(_QWORD *)(v21 + 1);
      v470 = v21 + 128;
      v471 = (0xCF1BBCDCBB000000 * *(_QWORD *)v21) >> v462;
      LODWORD(v472) = *(_DWORD *)(v461 + 4 * v471);
      v473 = 2;
      while (1)
      {
        v474 = (0xCF1BBCDCBB000000 * v468) >> v462;
        v475 = *(_DWORD *)&v467[-v118];
        v476 = (_DWORD)v21 - v446;
        *(_DWORD *)(v461 + 4 * v471) = (_DWORD)v21 - v446;
        if ((_DWORD)v118 && *(_DWORD *)v467 == v475)
        {
          v485 = 0;
          v486 = *(v467 - 1) == v467[-v118 - 1];
          if (*(v467 - 1) == v467[-v118 - 1])
            v487 = 5;
          else
            v487 = 4;
          v21 = &v467[-v486];
          v488 = &v467[-v118 - v486];
          v148 = v118;
          v118 = v117;
          goto LABEL_653;
        }
        if (v472 >= v453)
        {
          v478 = *(_DWORD *)(v446 + v472);
          v477 = *(_DWORD *)v21;
        }
        else
        {
          v477 = *(_DWORD *)v21;
          v478 = *(_DWORD *)v21 ^ 1;
        }
        if (v477 == v478)
          goto LABEL_644;
        v472 = *(unsigned int *)(v461 + 4 * v474);
        v479 = *(_QWORD *)v467;
        v476 = (_DWORD)v469 - v446;
        *(_DWORD *)(v461 + 4 * v474) = (_DWORD)v469 - v446;
        if (v472 >= v453)
        {
          v481 = *(_DWORD *)(v446 + v472);
          v480 = *(_DWORD *)v469;
        }
        else
        {
          v480 = *(_DWORD *)v469;
          v481 = *(_DWORD *)v469 ^ 1;
        }
        v471 = (0xCF1BBCDCBB000000 * v479) >> v462;
        if (v480 == v481)
          break;
        LODWORD(v472) = *(_DWORD *)(v461 + 4 * v471);
        v468 = *(_QWORD *)_X14;
        if (&v467[v473] >= v470)
        {
          v482 = v473 + 1;
          __asm
          {
            PRFM            #0, [X14,#0x40]
            PRFM            #0, [X14,#0x80]
          }
          v470 += 128;
        }
        else
        {
          v482 = v473;
        }
        v469 = _X14;
        v21 = v467;
        v467 += v473;
        _X14 += v473;
        v473 = v482;
        if ((unint64_t)_X14 >= v454)
          goto LABEL_958;
      }
      v21 = v469;
      v469 = v467;
      v474 = (0xCF1BBCDCBB000000 * v479) >> v462;
LABEL_644:
      v488 = (unsigned __int8 *)(v446 + v472);
      v148 = ((_DWORD)v21 - (_DWORD)v488);
      v485 = v148 + 2;
      if (v21 <= a4 || v472 <= v453)
      {
        v487 = 4;
      }
      else
      {
        v489 = (unsigned __int8 *)(v446 - 1 + v472);
        v490 = v21 - 1;
        v487 = 4;
        while (*v490 == *v489)
        {
          ++v487;
          v491 = v489 - 1;
          v492 = v490 - 1;
          if ((unint64_t)v489 > v446 + v453)
          {
            --v489;
            v65 = v490-- > a4;
            if (v65)
              continue;
          }
          v488 = v491 + 1;
          v21 = v492 + 1;
          goto LABEL_653;
        }
        v488 = v489 + 1;
        v21 = v490 + 1;
      }
LABEL_653:
      v493 = (char *)&v21[v487];
      v494 = &v488[v487];
      if (v463 <= (unint64_t)&v21[v487])
      {
        v497 = &v21[v487];
      }
      else
      {
        v495 = *(_QWORD *)v493 ^ *(_QWORD *)v494;
        if (v495)
        {
          v496 = __clz(__rbit64(v495)) >> 3;
          goto LABEL_671;
        }
        v498 = 0;
        v499 = (uint64_t)&v21[v487 + 8];
        while (1)
        {
          v500 = (_QWORD *)(v499 + v498);
          if (v499 + v498 >= v463)
            break;
          v501 = *(_QWORD *)&v488[v487 + 8 + v498];
          v498 += 8;
          v502 = *v500 ^ v501;
          if (v502)
          {
            v496 = v498 + (__clz(__rbit64(v502)) >> 3);
            goto LABEL_671;
          }
        }
        v497 = &v21[v487 + 8 + v498];
        v494 = &v488[v487 + 8 + v498];
      }
      if ((unint64_t)v497 < v464 && *(_DWORD *)v494 == *(_DWORD *)v497)
      {
        v497 += 4;
        v494 += 4;
      }
      if ((unint64_t)v497 < v465 && *(unsigned __int16 *)v494 == *(unsigned __int16 *)v497)
      {
        v497 += 2;
        v494 += 2;
      }
      if (v497 < v10 && *v494 == *v497)
        ++v497;
      v496 = v497 - (unsigned __int8 *)v493;
LABEL_671:
      v503 = v21 - a4;
      v504 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v21 <= v466)
      {
        *v504 = *(_OWORD *)a4;
        v508 = *(_QWORD *)(a2 + 24);
        if (v503 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v508 + v503;
          v513 = *(_QWORD *)(a2 + 8);
          goto LABEL_685;
        }
        v509 = (_OWORD *)(v508 + 16);
        v510 = v508 + v503;
        v511 = (__int128 *)(a4 + 16);
        do
        {
          v512 = *v511++;
          *v509++ = v512;
        }
        while ((unint64_t)v509 < v510);
      }
      else
      {
        if ((unint64_t)a4 <= v466)
        {
          v505 = (_OWORD *)((char *)v504 + v466 - (_QWORD)a4);
          do
          {
            v506 = *(_OWORD *)a4;
            a4 += 16;
            *v504++ = v506;
          }
          while (v504 < v505);
          a4 = v10 - 32;
          v504 = v505;
        }
        while (a4 < v21)
        {
          v507 = *a4++;
          *(_BYTE *)v504 = v507;
          v504 = (_OWORD *)((char *)v504 + 1);
        }
      }
      *(_QWORD *)(a2 + 24) += v503;
      v513 = *(_QWORD *)(a2 + 8);
      if (v503 >= 0x10000)
      {
        v514 = (unint64_t)(v513 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v514;
      }
LABEL_685:
      v515 = v496 + v487;
      *(_WORD *)(v513 + 4) = v503;
      *(_DWORD *)v513 = v485 + 1;
      v516 = v496 + v487 - 3;
      if (v516 >= 0x10000)
      {
        v517 = (unint64_t)(v513 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v517;
      }
      *(_WORD *)(v513 + 6) = v516;
      v518 = v513 + 8;
      *(_QWORD *)(a2 + 8) = v518;
      v21 += v515;
      if (v469 < v21)
        *(_DWORD *)(v461 + 4 * v474) = (_DWORD)v469 - v446;
      if ((unint64_t)v21 <= v454)
      {
        *(_DWORD *)(v461 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v446 + 2 + v476)) >> v462)) = v476 + 2;
        *(_DWORD *)(v461 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v21 - 2)) >> v462)) = (_DWORD)v21 - 2 - v446;
        if ((_DWORD)v118)
        {
          v519 = v148;
          while (1)
          {
            v117 = v519;
            v519 = v118;
            if (*(_DWORD *)v21 != *(_DWORD *)&v21[-v118])
              break;
            v520 = (char *)(v21 + 4);
            v521 = &v21[-v118 + 4];
            if (v463 <= (unint64_t)(v21 + 4))
            {
              v524 = v21 + 4;
            }
            else
            {
              v522 = *(_QWORD *)v520 ^ *(_QWORD *)v521;
              if (v522)
              {
                v523 = __clz(__rbit64(v522)) >> 3;
                goto LABEL_708;
              }
              v526 = (char *)(v21 + 12);
              while (1)
              {
                v527 = &v526[v522];
                if ((unint64_t)&v526[v522] >= v463)
                  break;
                v528 = *(_QWORD *)&v21[v522 + 12 - v118];
                v522 += 8;
                v529 = *(_QWORD *)v527 ^ v528;
                if (v529)
                {
                  v523 = v522 + (__clz(__rbit64(v529)) >> 3);
                  goto LABEL_708;
                }
              }
              v524 = &v21[v522 + 12];
              v521 = &v524[-v118];
            }
            if ((unint64_t)v524 < v464 && *(_DWORD *)v521 == *(_DWORD *)v524)
            {
              v524 += 4;
              v521 += 4;
            }
            if ((unint64_t)v524 < v465 && *(unsigned __int16 *)v521 == *(unsigned __int16 *)v524)
            {
              v524 += 2;
              v521 += 2;
            }
            if (v524 < v10 && *v521 == *v524)
              ++v524;
            v523 = v524 - (unsigned __int8 *)v520;
LABEL_708:
            *(_DWORD *)(v461 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v21) >> v462)) = (_DWORD)v21 - v446;
            if ((unint64_t)v21 <= v466)
            {
              *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v21;
              v518 = *(_QWORD *)(a2 + 8);
            }
            *(_WORD *)(v518 + 4) = 0;
            *(_DWORD *)v518 = 1;
            if (v523 + 1 >= 0x10000)
            {
              v525 = (unint64_t)(v518 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v525;
            }
            v21 += v523 + 4;
            *(_WORD *)(v518 + 6) = v523 + 1;
            v518 += 8;
            *(_QWORD *)(a2 + 8) = v518;
            v118 = v117;
            v148 = v519;
            if ((unint64_t)v21 > v454)
              goto LABEL_721;
          }
          v148 = v117;
          v117 = v118;
        }
        else
        {
          v117 = 0;
        }
      }
      else
      {
        v117 = v118;
      }
LABEL_721:
      _X14 = v21 + 3;
      v118 = v148;
      a4 = v21;
      if ((unint64_t)(v21 + 3) >= v454)
        goto LABEL_959;
    }
  }
  if (v6 == 6)
  {
    v530 = *(_QWORD *)(a1 + 8);
    v10 = &a4[a5];
    v531 = (_DWORD)a4 + a5 - v530;
    v532 = 1 << *(_DWORD *)(a1 + 240);
    v533 = *(_DWORD *)(a1 + 24);
    v534 = v531 - v533 > v532;
    v535 = v531 - v532;
    v536 = *(_DWORD *)(a1 + 40) == 0;
    if (v536 && v534)
      v537 = v535;
    else
      v537 = v533;
    v538 = (unint64_t)(v10 - 8);
    v539 = *a3;
    v540 = a3[1];
    if ((unsigned __int8 *)(v530 + v537) == a4)
      v21 = a4 + 1;
    else
      v21 = a4;
    v541 = (_DWORD)v21 - (_DWORD)v530 - v533 > v532;
    v542 = (_DWORD)v21 - v530 - v532;
    if (!v536 || !v541)
      v542 = *(_DWORD *)(a1 + 24);
    v543 = (_DWORD)v21 - v530 - v542;
    if (v540 <= v543)
      v117 = v540;
    else
      v117 = 0;
    if (v539 <= v543)
      v118 = v539;
    else
      v118 = 0;
    _X14 = v21 + 3;
    v707 = v540;
    v710 = v539;
    v704 = (_DWORD)v21 - v530 - v542;
    if ((unint64_t)(v21 + 3) >= v538)
      goto LABEL_958;
    v545 = *(_QWORD *)(a1 + 96);
    v546 = 64 - *(_DWORD *)(a1 + 248);
    v547 = (unint64_t)(v10 - 7);
    v548 = (unint64_t)(v10 - 3);
    v549 = (unint64_t)(v10 - 1);
    v550 = (unint64_t)(v10 - 32);
    while (1)
    {
      v551 = v21 + 2;
      v553 = v21 + 1;
      v552 = *(_QWORD *)(v21 + 1);
      v554 = v21 + 128;
      v555 = (0xCF1BBCDCBF9B0000 * *(_QWORD *)v21) >> v546;
      LODWORD(v556) = *(_DWORD *)(v545 + 4 * v555);
      v557 = 2;
      while (1)
      {
        v558 = (0xCF1BBCDCBF9B0000 * v552) >> v546;
        v559 = *(_DWORD *)&v551[-v118];
        v560 = (_DWORD)v21 - v530;
        *(_DWORD *)(v545 + 4 * v555) = (_DWORD)v21 - v530;
        if ((_DWORD)v118 && *(_DWORD *)v551 == v559)
        {
          v569 = 0;
          v570 = *(v551 - 1) == v551[-v118 - 1];
          if (*(v551 - 1) == v551[-v118 - 1])
            v571 = 5;
          else
            v571 = 4;
          v21 = &v551[-v570];
          v572 = &v551[-v118 - v570];
          v148 = v118;
          v118 = v117;
          goto LABEL_770;
        }
        if (v556 >= v537)
        {
          v562 = *(_DWORD *)(v530 + v556);
          v561 = *(_DWORD *)v21;
        }
        else
        {
          v561 = *(_DWORD *)v21;
          v562 = *(_DWORD *)v21 ^ 1;
        }
        if (v561 == v562)
          goto LABEL_761;
        v556 = *(unsigned int *)(v545 + 4 * v558);
        v563 = *(_QWORD *)v551;
        v560 = (_DWORD)v553 - v530;
        *(_DWORD *)(v545 + 4 * v558) = (_DWORD)v553 - v530;
        if (v556 >= v537)
        {
          v565 = *(_DWORD *)(v530 + v556);
          v564 = *(_DWORD *)v553;
        }
        else
        {
          v564 = *(_DWORD *)v553;
          v565 = *(_DWORD *)v553 ^ 1;
        }
        v555 = (0xCF1BBCDCBF9B0000 * v563) >> v546;
        if (v564 == v565)
          break;
        LODWORD(v556) = *(_DWORD *)(v545 + 4 * v555);
        v552 = *(_QWORD *)_X14;
        if (&v551[v557] >= v554)
        {
          v566 = v557 + 1;
          __asm
          {
            PRFM            #0, [X14,#0x40]
            PRFM            #0, [X14,#0x80]
          }
          v554 += 128;
        }
        else
        {
          v566 = v557;
        }
        v553 = _X14;
        v21 = v551;
        v551 += v557;
        _X14 += v557;
        v557 = v566;
        if ((unint64_t)_X14 >= v538)
          goto LABEL_958;
      }
      v21 = v553;
      v553 = v551;
      v558 = (0xCF1BBCDCBF9B0000 * v563) >> v546;
LABEL_761:
      v572 = (unsigned __int8 *)(v530 + v556);
      v148 = ((_DWORD)v21 - (_DWORD)v572);
      v569 = v148 + 2;
      if (v21 <= a4 || v556 <= v537)
      {
        v571 = 4;
      }
      else
      {
        v573 = (unsigned __int8 *)(v530 - 1 + v556);
        v574 = v21 - 1;
        v571 = 4;
        while (*v574 == *v573)
        {
          ++v571;
          v575 = v573 - 1;
          v576 = v574 - 1;
          if ((unint64_t)v573 > v530 + v537)
          {
            --v573;
            v65 = v574-- > a4;
            if (v65)
              continue;
          }
          v572 = v575 + 1;
          v21 = v576 + 1;
          goto LABEL_770;
        }
        v572 = v573 + 1;
        v21 = v574 + 1;
      }
LABEL_770:
      v577 = (char *)&v21[v571];
      v578 = &v572[v571];
      if (v547 <= (unint64_t)&v21[v571])
      {
        v581 = &v21[v571];
      }
      else
      {
        v579 = *(_QWORD *)v577 ^ *(_QWORD *)v578;
        if (v579)
        {
          v580 = __clz(__rbit64(v579)) >> 3;
          goto LABEL_788;
        }
        v582 = 0;
        v583 = (uint64_t)&v21[v571 + 8];
        while (1)
        {
          v584 = (_QWORD *)(v583 + v582);
          if (v583 + v582 >= v547)
            break;
          v585 = *(_QWORD *)&v572[v571 + 8 + v582];
          v582 += 8;
          v586 = *v584 ^ v585;
          if (v586)
          {
            v580 = v582 + (__clz(__rbit64(v586)) >> 3);
            goto LABEL_788;
          }
        }
        v581 = &v21[v571 + 8 + v582];
        v578 = &v572[v571 + 8 + v582];
      }
      if ((unint64_t)v581 < v548 && *(_DWORD *)v578 == *(_DWORD *)v581)
      {
        v581 += 4;
        v578 += 4;
      }
      if ((unint64_t)v581 < v549 && *(unsigned __int16 *)v578 == *(unsigned __int16 *)v581)
      {
        v581 += 2;
        v578 += 2;
      }
      if (v581 < v10 && *v578 == *v581)
        ++v581;
      v580 = v581 - (unsigned __int8 *)v577;
LABEL_788:
      v587 = v21 - a4;
      v588 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v21 <= v550)
      {
        *v588 = *(_OWORD *)a4;
        v592 = *(_QWORD *)(a2 + 24);
        if (v587 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v592 + v587;
          v597 = *(_QWORD *)(a2 + 8);
          goto LABEL_802;
        }
        v593 = (_OWORD *)(v592 + 16);
        v594 = v592 + v587;
        v595 = (__int128 *)(a4 + 16);
        do
        {
          v596 = *v595++;
          *v593++ = v596;
        }
        while ((unint64_t)v593 < v594);
      }
      else
      {
        if ((unint64_t)a4 <= v550)
        {
          v589 = (_OWORD *)((char *)v588 + v550 - (_QWORD)a4);
          do
          {
            v590 = *(_OWORD *)a4;
            a4 += 16;
            *v588++ = v590;
          }
          while (v588 < v589);
          a4 = v10 - 32;
          v588 = v589;
        }
        while (a4 < v21)
        {
          v591 = *a4++;
          *(_BYTE *)v588 = v591;
          v588 = (_OWORD *)((char *)v588 + 1);
        }
      }
      *(_QWORD *)(a2 + 24) += v587;
      v597 = *(_QWORD *)(a2 + 8);
      if (v587 >= 0x10000)
      {
        v598 = (unint64_t)(v597 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v598;
      }
LABEL_802:
      v599 = v580 + v571;
      *(_WORD *)(v597 + 4) = v587;
      *(_DWORD *)v597 = v569 + 1;
      v600 = v580 + v571 - 3;
      if (v600 >= 0x10000)
      {
        v601 = (unint64_t)(v597 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v601;
      }
      *(_WORD *)(v597 + 6) = v600;
      v602 = v597 + 8;
      *(_QWORD *)(a2 + 8) = v602;
      v21 += v599;
      if (v553 < v21)
        *(_DWORD *)(v545 + 4 * v558) = (_DWORD)v553 - v530;
      if ((unint64_t)v21 <= v538)
      {
        *(_DWORD *)(v545 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v530 + 2 + v560)) >> v546)) = v560 + 2;
        *(_DWORD *)(v545 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v21 - 2)) >> v546)) = (_DWORD)v21 - 2 - v530;
        if ((_DWORD)v118)
        {
          v603 = v148;
          while (1)
          {
            v117 = v603;
            v603 = v118;
            if (*(_DWORD *)v21 != *(_DWORD *)&v21[-v118])
              break;
            v604 = (char *)(v21 + 4);
            v605 = &v21[-v118 + 4];
            if (v547 <= (unint64_t)(v21 + 4))
            {
              v608 = v21 + 4;
            }
            else
            {
              v606 = *(_QWORD *)v604 ^ *(_QWORD *)v605;
              if (v606)
              {
                v607 = __clz(__rbit64(v606)) >> 3;
                goto LABEL_825;
              }
              v610 = (char *)(v21 + 12);
              while (1)
              {
                v611 = &v610[v606];
                if ((unint64_t)&v610[v606] >= v547)
                  break;
                v612 = *(_QWORD *)&v21[v606 + 12 - v118];
                v606 += 8;
                v613 = *(_QWORD *)v611 ^ v612;
                if (v613)
                {
                  v607 = v606 + (__clz(__rbit64(v613)) >> 3);
                  goto LABEL_825;
                }
              }
              v608 = &v21[v606 + 12];
              v605 = &v608[-v118];
            }
            if ((unint64_t)v608 < v548 && *(_DWORD *)v605 == *(_DWORD *)v608)
            {
              v608 += 4;
              v605 += 4;
            }
            if ((unint64_t)v608 < v549 && *(unsigned __int16 *)v605 == *(unsigned __int16 *)v608)
            {
              v608 += 2;
              v605 += 2;
            }
            if (v608 < v10 && *v605 == *v608)
              ++v608;
            v607 = v608 - (unsigned __int8 *)v604;
LABEL_825:
            *(_DWORD *)(v545 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v21) >> v546)) = (_DWORD)v21 - v530;
            if ((unint64_t)v21 <= v550)
            {
              *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v21;
              v602 = *(_QWORD *)(a2 + 8);
            }
            *(_WORD *)(v602 + 4) = 0;
            *(_DWORD *)v602 = 1;
            if (v607 + 1 >= 0x10000)
            {
              v609 = (unint64_t)(v602 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v609;
            }
            v21 += v607 + 4;
            *(_WORD *)(v602 + 6) = v607 + 1;
            v602 += 8;
            *(_QWORD *)(a2 + 8) = v602;
            v118 = v117;
            v148 = v603;
            if ((unint64_t)v21 > v538)
              goto LABEL_838;
          }
          v148 = v117;
          v117 = v118;
        }
        else
        {
          v117 = 0;
        }
      }
      else
      {
        v117 = v118;
      }
LABEL_838:
      _X14 = v21 + 3;
      v118 = v148;
      a4 = v21;
      if ((unint64_t)(v21 + 3) >= v538)
        goto LABEL_959;
    }
  }
  if (v6 != 7)
  {
    v614 = *(_QWORD *)(a1 + 8);
    v10 = &a4[a5];
    v615 = (_DWORD)a4 + a5 - v614;
    v616 = 1 << *(_DWORD *)(a1 + 240);
    v617 = *(_DWORD *)(a1 + 24);
    v618 = v615 - v617 > v616;
    v619 = v615 - v616;
    v620 = *(_DWORD *)(a1 + 40) == 0;
    if (v620 && v618)
      v621 = v619;
    else
      v621 = v617;
    v622 = (unint64_t)(v10 - 8);
    v623 = *a3;
    v624 = a3[1];
    if ((unsigned __int8 *)(v614 + v621) == a4)
      v21 = a4 + 1;
    else
      v21 = a4;
    v625 = (_DWORD)v21 - (_DWORD)v614 - v617 > v616;
    v626 = (_DWORD)v21 - v614 - v616;
    if (!v620 || !v625)
      v626 = *(_DWORD *)(a1 + 24);
    v627 = (_DWORD)v21 - v614 - v626;
    if (v624 <= v627)
      v117 = v624;
    else
      v117 = 0;
    if (v623 <= v627)
      v118 = v623;
    else
      v118 = 0;
    _X5 = v21 + 3;
    v707 = v624;
    v710 = v623;
    v704 = (_DWORD)v21 - v614 - v626;
    if ((unint64_t)(v21 + 3) >= v622)
      goto LABEL_958;
    v629 = *(_QWORD *)(a1 + 96);
    v630 = 32 - *(_DWORD *)(a1 + 248);
    v631 = (unint64_t)(v10 - 7);
    v632 = (unint64_t)(v10 - 3);
    v633 = (unint64_t)(v10 - 1);
    v634 = (unint64_t)(v10 - 32);
    while (1)
    {
      v635 = v21 + 2;
      v637 = v21 + 1;
      v636 = *(_DWORD *)(v21 + 1);
      v638 = v21 + 128;
      v639 = (-1640531535 * *(_DWORD *)v21) >> v630;
      LODWORD(v640) = *(_DWORD *)(v629 + 4 * v639);
      v641 = 2;
      while (1)
      {
        v642 = (-1640531535 * v636) >> v630;
        v643 = *(_DWORD *)&v635[-v118];
        v644 = (_DWORD)v21 - v614;
        *(_DWORD *)(v629 + 4 * v639) = (_DWORD)v21 - v614;
        v645 = *(_DWORD *)v635;
        if ((_DWORD)v118 && v645 == v643)
        {
          v653 = 0;
          v654 = *(v635 - 1) == v635[-v118 - 1];
          if (*(v635 - 1) == v635[-v118 - 1])
            v655 = 5;
          else
            v655 = 4;
          v21 = &v635[-v654];
          v656 = &v635[-v118 - v654];
          v148 = v118;
          v118 = v117;
          goto LABEL_887;
        }
        if (v640 >= v621)
        {
          v647 = *(_DWORD *)(v614 + v640);
          v646 = *(_DWORD *)v21;
        }
        else
        {
          v646 = *(_DWORD *)v21;
          v647 = *(_DWORD *)v21 ^ 1;
        }
        if (v646 == v647)
          goto LABEL_878;
        v640 = *(unsigned int *)(v629 + 4 * v642);
        v644 = (_DWORD)v637 - v614;
        *(_DWORD *)(v629 + 4 * v642) = (_DWORD)v637 - v614;
        if (v640 >= v621)
        {
          v649 = *(_DWORD *)(v614 + v640);
          v648 = *(_DWORD *)v637;
        }
        else
        {
          v648 = *(_DWORD *)v637;
          v649 = *(_DWORD *)v637 ^ 1;
        }
        v639 = (-1640531535 * v645) >> v630;
        if (v648 == v649)
          break;
        LODWORD(v640) = *(_DWORD *)(v629 + 4 * v639);
        v636 = *(_DWORD *)_X5;
        if (&v635[v641] >= v638)
        {
          v650 = v641 + 1;
          __asm
          {
            PRFM            #0, [X5,#0x40]
            PRFM            #0, [X5,#0x80]
          }
          v638 += 128;
        }
        else
        {
          v650 = v641;
        }
        v637 = _X5;
        v21 = v635;
        v635 += v641;
        _X5 += v641;
        v641 = v650;
        if ((unint64_t)_X5 >= v622)
          goto LABEL_958;
      }
      v21 = v637;
      v637 = v635;
      v642 = v639;
LABEL_878:
      v656 = (unsigned __int8 *)(v614 + v640);
      v148 = ((_DWORD)v21 - (_DWORD)v656);
      v653 = v148 + 2;
      if (v21 <= a4 || v640 <= v621)
      {
        v655 = 4;
      }
      else
      {
        v657 = (unsigned __int8 *)(v614 - 1 + v640);
        v658 = v21 - 1;
        v655 = 4;
        while (*v658 == *v657)
        {
          ++v655;
          v659 = v657 - 1;
          v660 = v658 - 1;
          if ((unint64_t)v657 > v614 + v621)
          {
            --v657;
            v65 = v658-- > a4;
            if (v65)
              continue;
          }
          v656 = v659 + 1;
          v21 = v660 + 1;
          goto LABEL_887;
        }
        v656 = v657 + 1;
        v21 = v658 + 1;
      }
LABEL_887:
      v661 = (char *)&v21[v655];
      v662 = &v656[v655];
      if (v631 <= (unint64_t)&v21[v655])
      {
        v665 = &v21[v655];
      }
      else
      {
        v663 = *(_QWORD *)v661 ^ *(_QWORD *)v662;
        if (v663)
        {
          v664 = __clz(__rbit64(v663)) >> 3;
          goto LABEL_905;
        }
        v666 = 0;
        v667 = (uint64_t)&v21[v655 + 8];
        while (1)
        {
          v668 = (_QWORD *)(v667 + v666);
          if (v667 + v666 >= v631)
            break;
          v669 = *(_QWORD *)&v656[v655 + 8 + v666];
          v666 += 8;
          v670 = *v668 ^ v669;
          if (v670)
          {
            v664 = v666 + (__clz(__rbit64(v670)) >> 3);
            goto LABEL_905;
          }
        }
        v665 = &v21[v655 + 8 + v666];
        v662 = &v656[v655 + 8 + v666];
      }
      if ((unint64_t)v665 < v632 && *(_DWORD *)v662 == *(_DWORD *)v665)
      {
        v665 += 4;
        v662 += 4;
      }
      if ((unint64_t)v665 < v633 && *(unsigned __int16 *)v662 == *(unsigned __int16 *)v665)
      {
        v665 += 2;
        v662 += 2;
      }
      if (v665 < v10 && *v662 == *v665)
        ++v665;
      v664 = v665 - (unsigned __int8 *)v661;
LABEL_905:
      v671 = v21 - a4;
      v672 = *(_OWORD **)(a2 + 24);
      if ((unint64_t)v21 <= v634)
      {
        *v672 = *(_OWORD *)a4;
        v676 = *(_QWORD *)(a2 + 24);
        if (v671 <= 0x10)
        {
          *(_QWORD *)(a2 + 24) = v676 + v671;
          v681 = *(_QWORD *)(a2 + 8);
          goto LABEL_919;
        }
        v677 = (_OWORD *)(v676 + 16);
        v678 = v676 + v671;
        v679 = (__int128 *)(a4 + 16);
        do
        {
          v680 = *v679++;
          *v677++ = v680;
        }
        while ((unint64_t)v677 < v678);
      }
      else
      {
        if ((unint64_t)a4 <= v634)
        {
          v673 = (_OWORD *)((char *)v672 + v634 - (_QWORD)a4);
          do
          {
            v674 = *(_OWORD *)a4;
            a4 += 16;
            *v672++ = v674;
          }
          while (v672 < v673);
          a4 = v10 - 32;
          v672 = v673;
        }
        while (a4 < v21)
        {
          v675 = *a4++;
          *(_BYTE *)v672 = v675;
          v672 = (_OWORD *)((char *)v672 + 1);
        }
      }
      *(_QWORD *)(a2 + 24) += v671;
      v681 = *(_QWORD *)(a2 + 8);
      if (v671 >= 0x10000)
      {
        v682 = (unint64_t)(v681 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v682;
      }
LABEL_919:
      v683 = v664 + v655;
      *(_WORD *)(v681 + 4) = v671;
      *(_DWORD *)v681 = v653 + 1;
      v684 = v664 + v655 - 3;
      if (v684 >= 0x10000)
      {
        v685 = (unint64_t)(v681 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v685;
      }
      *(_WORD *)(v681 + 6) = v684;
      v686 = v681 + 8;
      *(_QWORD *)(a2 + 8) = v686;
      v21 += v683;
      if (v637 < v21)
        *(_DWORD *)(v629 + 4 * v642) = (_DWORD)v637 - v614;
      if ((unint64_t)v21 <= v622)
      {
        *(_DWORD *)(v629 + 4 * ((-1640531535 * *(_DWORD *)(v614 + 2 + v644)) >> v630)) = v644 + 2;
        *(_DWORD *)(v629 + 4 * ((-1640531535 * *(_DWORD *)(v21 - 2)) >> v630)) = (_DWORD)v21 - 2 - v614;
        if ((_DWORD)v118)
        {
          v687 = v148;
          while (1)
          {
            v117 = v687;
            v687 = v118;
            if (*(_DWORD *)v21 != *(_DWORD *)&v21[-v118])
              break;
            v688 = (char *)(v21 + 4);
            v689 = &v21[-v118 + 4];
            if (v631 <= (unint64_t)(v21 + 4))
            {
              v692 = v21 + 4;
            }
            else
            {
              v690 = *(_QWORD *)v688 ^ *(_QWORD *)v689;
              if (v690)
              {
                v691 = __clz(__rbit64(v690)) >> 3;
                goto LABEL_942;
              }
              v694 = (char *)(v21 + 12);
              while (1)
              {
                v695 = &v694[v690];
                if ((unint64_t)&v694[v690] >= v631)
                  break;
                v696 = *(_QWORD *)&v21[v690 + 12 - v118];
                v690 += 8;
                v697 = *(_QWORD *)v695 ^ v696;
                if (v697)
                {
                  v691 = v690 + (__clz(__rbit64(v697)) >> 3);
                  goto LABEL_942;
                }
              }
              v692 = &v21[v690 + 12];
              v689 = &v692[-v118];
            }
            if ((unint64_t)v692 < v632 && *(_DWORD *)v689 == *(_DWORD *)v692)
            {
              v692 += 4;
              v689 += 4;
            }
            if ((unint64_t)v692 < v633 && *(unsigned __int16 *)v689 == *(unsigned __int16 *)v692)
            {
              v692 += 2;
              v689 += 2;
            }
            if (v692 < v10 && *v689 == *v692)
              ++v692;
            v691 = v692 - (unsigned __int8 *)v688;
LABEL_942:
            *(_DWORD *)(v629 + 4 * ((-1640531535 * *(_DWORD *)v21) >> v630)) = (_DWORD)v21 - v614;
            if ((unint64_t)v21 <= v634)
            {
              *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v21;
              v686 = *(_QWORD *)(a2 + 8);
            }
            *(_WORD *)(v686 + 4) = 0;
            *(_DWORD *)v686 = 1;
            if (v691 + 1 >= 0x10000)
            {
              v693 = (unint64_t)(v686 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v693;
            }
            v21 += v691 + 4;
            *(_WORD *)(v686 + 6) = v691 + 1;
            v686 += 8;
            *(_QWORD *)(a2 + 8) = v686;
            v118 = v117;
            v148 = v687;
            if ((unint64_t)v21 > v622)
              goto LABEL_955;
          }
          v148 = v117;
          v117 = v118;
        }
        else
        {
          v117 = 0;
        }
      }
      else
      {
        v117 = v118;
      }
LABEL_955:
      _X5 = v21 + 3;
      v118 = v148;
      a4 = v21;
      if ((unint64_t)(v21 + 3) >= v622)
        goto LABEL_959;
    }
  }
  v103 = *(_QWORD *)(a1 + 8);
  v10 = &a4[a5];
  v104 = (_DWORD)a4 + a5 - v103;
  v105 = 1 << *(_DWORD *)(a1 + 240);
  v106 = *(_DWORD *)(a1 + 24);
  v107 = v104 - v106 > v105;
  v108 = v104 - v105;
  v109 = *(_DWORD *)(a1 + 40) == 0;
  if (v109 && v107)
    v110 = v108;
  else
    v110 = v106;
  v111 = (unint64_t)(v10 - 8);
  v112 = *a3;
  v113 = a3[1];
  if ((unsigned __int8 *)(v103 + v110) == a4)
    v21 = a4 + 1;
  else
    v21 = a4;
  v114 = (_DWORD)v21 - (_DWORD)v103 - v106 > v105;
  v115 = (_DWORD)v21 - v103 - v105;
  if (!v109 || !v114)
    v115 = *(_DWORD *)(a1 + 24);
  v116 = (_DWORD)v21 - v103 - v115;
  if (v113 <= v116)
    v117 = v113;
  else
    v117 = 0;
  if (v112 <= v116)
    v118 = v112;
  else
    v118 = 0;
  _X14 = v21 + 3;
  v707 = v113;
  v710 = v112;
  v704 = (_DWORD)v21 - v103 - v115;
  if ((unint64_t)(v21 + 3) >= v111)
  {
LABEL_958:
    v21 = a4;
    LODWORD(v148) = v118;
    goto LABEL_959;
  }
  v120 = *(_QWORD *)(a1 + 96);
  v121 = 64 - *(_DWORD *)(a1 + 248);
  v122 = (unint64_t)(v10 - 7);
  v123 = (unint64_t)(v10 - 3);
  v124 = (unint64_t)(v10 - 1);
  v125 = (unint64_t)(v10 - 32);
  do
  {
    v126 = v21 + 2;
    v128 = v21 + 1;
    v127 = *(_QWORD *)(v21 + 1);
    v129 = v21 + 128;
    v130 = (0xCF1BBCDCBFA56300 * *(_QWORD *)v21) >> v121;
    LODWORD(v131) = *(_DWORD *)(v120 + 4 * v130);
    v132 = 2;
    while (1)
    {
      v133 = (0xCF1BBCDCBFA56300 * v127) >> v121;
      v134 = *(_DWORD *)&v126[-v118];
      v135 = (_DWORD)v21 - v103;
      *(_DWORD *)(v120 + 4 * v130) = (_DWORD)v21 - v103;
      if ((_DWORD)v118 && *(_DWORD *)v126 == v134)
      {
        v144 = 0;
        v145 = *(v126 - 1) == v126[-v118 - 1];
        if (*(v126 - 1) == v126[-v118 - 1])
          v146 = 5;
        else
          v146 = 4;
        v21 = &v126[-v145];
        v147 = &v126[-v118 - v145];
        v148 = v118;
        v118 = v117;
        goto LABEL_172;
      }
      if (v131 >= v110)
      {
        v137 = *(_DWORD *)(v103 + v131);
        v136 = *(_DWORD *)v21;
      }
      else
      {
        v136 = *(_DWORD *)v21;
        v137 = *(_DWORD *)v21 ^ 1;
      }
      if (v136 == v137)
        break;
      v131 = *(unsigned int *)(v120 + 4 * v133);
      v138 = *(_QWORD *)v126;
      v135 = (_DWORD)v128 - v103;
      *(_DWORD *)(v120 + 4 * v133) = (_DWORD)v128 - v103;
      if (v131 >= v110)
      {
        v140 = *(_DWORD *)(v103 + v131);
        v139 = *(_DWORD *)v128;
      }
      else
      {
        v139 = *(_DWORD *)v128;
        v140 = *(_DWORD *)v128 ^ 1;
      }
      v130 = (0xCF1BBCDCBFA56300 * v138) >> v121;
      if (v139 == v140)
      {
        v21 = v128;
        v128 = v126;
        v133 = (0xCF1BBCDCBFA56300 * v138) >> v121;
        break;
      }
      LODWORD(v131) = *(_DWORD *)(v120 + 4 * v130);
      v127 = *(_QWORD *)_X14;
      if (&v126[v132] >= v129)
      {
        v141 = v132 + 1;
        __asm
        {
          PRFM            #0, [X14,#0x40]
          PRFM            #0, [X14,#0x80]
        }
        v129 += 128;
      }
      else
      {
        v141 = v132;
      }
      v128 = _X14;
      v21 = v126;
      v126 += v132;
      _X14 += v132;
      v132 = v141;
      if ((unint64_t)_X14 >= v111)
        goto LABEL_958;
    }
    v147 = (unsigned __int8 *)(v103 + v131);
    v148 = ((_DWORD)v21 - (_DWORD)v147);
    v144 = v148 + 2;
    if (v21 <= a4 || v131 <= v110)
    {
      v146 = 4;
    }
    else
    {
      v149 = (unsigned __int8 *)(v103 - 1 + v131);
      v150 = v21 - 1;
      v146 = 4;
      while (*v150 == *v149)
      {
        ++v146;
        v151 = v149 - 1;
        v152 = v150 - 1;
        if ((unint64_t)v149 > v103 + v110)
        {
          --v149;
          v65 = v150-- > a4;
          if (v65)
            continue;
        }
        v147 = v151 + 1;
        v21 = v152 + 1;
        goto LABEL_172;
      }
      v147 = v149 + 1;
      v21 = v150 + 1;
    }
LABEL_172:
    v153 = (char *)&v21[v146];
    v154 = &v147[v146];
    if (v122 <= (unint64_t)&v21[v146])
    {
      v157 = &v21[v146];
    }
    else
    {
      v155 = *(_QWORD *)v153 ^ *(_QWORD *)v154;
      if (v155)
      {
        v156 = __clz(__rbit64(v155)) >> 3;
        goto LABEL_190;
      }
      v158 = 0;
      v159 = (uint64_t)&v21[v146 + 8];
      while (1)
      {
        v160 = (_QWORD *)(v159 + v158);
        if (v159 + v158 >= v122)
          break;
        v161 = *(_QWORD *)&v147[v146 + 8 + v158];
        v158 += 8;
        v162 = *v160 ^ v161;
        if (v162)
        {
          v156 = v158 + (__clz(__rbit64(v162)) >> 3);
          goto LABEL_190;
        }
      }
      v157 = &v21[v146 + 8 + v158];
      v154 = &v147[v146 + 8 + v158];
    }
    if ((unint64_t)v157 < v123 && *(_DWORD *)v154 == *(_DWORD *)v157)
    {
      v157 += 4;
      v154 += 4;
    }
    if ((unint64_t)v157 < v124 && *(unsigned __int16 *)v154 == *(unsigned __int16 *)v157)
    {
      v157 += 2;
      v154 += 2;
    }
    if (v157 < v10 && *v154 == *v157)
      ++v157;
    v156 = v157 - (unsigned __int8 *)v153;
LABEL_190:
    v163 = v21 - a4;
    v164 = *(_OWORD **)(a2 + 24);
    if ((unint64_t)v21 > v125)
    {
      if ((unint64_t)a4 <= v125)
      {
        v165 = (_OWORD *)((char *)v164 + v125 - (_QWORD)a4);
        do
        {
          v166 = *(_OWORD *)a4;
          a4 += 16;
          *v164++ = v166;
        }
        while (v164 < v165);
        a4 = v10 - 32;
        v164 = v165;
      }
      while (a4 < v21)
      {
        v167 = *a4++;
        *(_BYTE *)v164 = v167;
        v164 = (_OWORD *)((char *)v164 + 1);
      }
      goto LABEL_201;
    }
    *v164 = *(_OWORD *)a4;
    v168 = *(_QWORD *)(a2 + 24);
    if (v163 > 0x10)
    {
      v169 = (_OWORD *)(v168 + 16);
      v170 = v168 + v163;
      v171 = (__int128 *)(a4 + 16);
      do
      {
        v172 = *v171++;
        *v169++ = v172;
      }
      while ((unint64_t)v169 < v170);
LABEL_201:
      *(_QWORD *)(a2 + 24) += v163;
      v173 = *(_QWORD *)(a2 + 8);
      if (v163 >= 0x10000)
      {
        v174 = (unint64_t)(v173 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 1;
        *(_DWORD *)(a2 + 76) = v174;
      }
      goto LABEL_204;
    }
    *(_QWORD *)(a2 + 24) = v168 + v163;
    v173 = *(_QWORD *)(a2 + 8);
LABEL_204:
    v175 = v156 + v146;
    *(_WORD *)(v173 + 4) = v163;
    *(_DWORD *)v173 = v144 + 1;
    v176 = v156 + v146 - 3;
    if (v176 >= 0x10000)
    {
      v177 = (unint64_t)(v173 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v177;
    }
    *(_WORD *)(v173 + 6) = v176;
    v178 = v173 + 8;
    *(_QWORD *)(a2 + 8) = v178;
    v21 += v175;
    if (v128 < v21)
      *(_DWORD *)(v120 + 4 * v133) = (_DWORD)v128 - v103;
    if ((unint64_t)v21 > v111)
    {
      v117 = v118;
      goto LABEL_240;
    }
    *(_DWORD *)(v120 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v103 + 2 + v135)) >> v121)) = v135 + 2;
    *(_DWORD *)(v120 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v21 - 2)) >> v121)) = (_DWORD)v21 - 2 - v103;
    if (!(_DWORD)v118)
    {
      v117 = 0;
      goto LABEL_240;
    }
    v179 = v148;
    while (1)
    {
      v117 = v179;
      v179 = v118;
      if (*(_DWORD *)v21 != *(_DWORD *)&v21[-v118])
        break;
      v180 = (char *)(v21 + 4);
      v181 = &v21[-v118 + 4];
      if (v122 <= (unint64_t)(v21 + 4))
      {
        v184 = v21 + 4;
LABEL_217:
        if ((unint64_t)v184 < v123 && *(_DWORD *)v181 == *(_DWORD *)v184)
        {
          v184 += 4;
          v181 += 4;
        }
        if ((unint64_t)v184 < v124 && *(unsigned __int16 *)v181 == *(unsigned __int16 *)v184)
        {
          v184 += 2;
          v181 += 2;
        }
        if (v184 < v10 && *v181 == *v184)
          ++v184;
        v183 = v184 - (unsigned __int8 *)v180;
        goto LABEL_227;
      }
      v182 = *(_QWORD *)v180 ^ *(_QWORD *)v181;
      if (!v182)
      {
        v186 = (char *)(v21 + 12);
        while (1)
        {
          v187 = &v186[v182];
          if ((unint64_t)&v186[v182] >= v122)
            break;
          v188 = *(_QWORD *)&v21[v182 + 12 - v118];
          v182 += 8;
          v189 = *(_QWORD *)v187 ^ v188;
          if (v189)
          {
            v183 = v182 + (__clz(__rbit64(v189)) >> 3);
            goto LABEL_227;
          }
        }
        v184 = &v21[v182 + 12];
        v181 = &v184[-v118];
        goto LABEL_217;
      }
      v183 = __clz(__rbit64(v182)) >> 3;
LABEL_227:
      *(_DWORD *)(v120 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v21) >> v121)) = (_DWORD)v21 - v103;
      if ((unint64_t)v21 <= v125)
      {
        *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v21;
        v178 = *(_QWORD *)(a2 + 8);
      }
      *(_WORD *)(v178 + 4) = 0;
      *(_DWORD *)v178 = 1;
      if (v183 + 1 >= 0x10000)
      {
        v185 = (unint64_t)(v178 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v185;
      }
      v21 += v183 + 4;
      *(_WORD *)(v178 + 6) = v183 + 1;
      v178 += 8;
      *(_QWORD *)(a2 + 8) = v178;
      v118 = v117;
      v148 = v179;
      if ((unint64_t)v21 > v111)
        goto LABEL_240;
    }
    v148 = v117;
    v117 = v118;
LABEL_240:
    _X14 = v21 + 3;
    v118 = v148;
    a4 = v21;
  }
  while ((unint64_t)(v21 + 3) < v111);
LABEL_959:
  v444 = v707;
  if (v707 <= v704)
    v444 = 0;
  if (v710 > v704)
    v444 = v710;
  if ((_DWORD)v148)
    v445 = v148;
  else
    v445 = v444;
  if ((_DWORD)v117)
    v444 = v117;
LABEL_978:
  *a3 = v445;
  a3[1] = v444;
  return v10 - v21;
}

unint64_t ZSTD_compressBlock_fast_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  unsigned __int8 *v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  BOOL v41;
  uint64_t v42;
  _OWORD *v43;
  unint64_t v44;
  __int128 *v45;
  __int128 v46;
  unsigned __int8 *v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  __int128 v52;
  unsigned __int8 *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  __int16 v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _OWORD *v69;
  _OWORD *v70;
  __int128 v71;
  char v72;
  uint64_t v73;
  _OWORD *v74;
  unint64_t v75;
  __int128 *v76;
  __int128 v77;
  unint64_t v78;
  uint64_t v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _OWORD *v85;
  _OWORD *v86;
  __int128 v87;
  char v88;
  uint64_t v89;
  _OWORD *v90;
  unint64_t v91;
  __int128 *v92;
  __int128 v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  unsigned __int8 *v101;
  uint64_t v102;
  unsigned __int8 *v103;
  unint64_t v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 *v109;
  unint64_t v110;
  unint64_t v111;
  _OWORD *v112;
  unsigned __int8 *v113;
  _BYTE *v114;
  uint64_t v115;
  char *v116;
  _QWORD *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  _OWORD *v126;
  unint64_t v127;
  __int128 *v128;
  __int128 v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  __int128 v135;
  unsigned __int8 *v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  unint64_t v140;
  __int16 v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _OWORD *v152;
  _OWORD *v153;
  __int128 v154;
  char v155;
  uint64_t v156;
  _OWORD *v157;
  unint64_t v158;
  __int128 *v159;
  __int128 v160;
  unint64_t v161;
  uint64_t v162;
  unsigned __int8 *v163;
  unsigned __int8 *v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  _OWORD *v168;
  _OWORD *v169;
  __int128 v170;
  char v171;
  uint64_t v172;
  _OWORD *v173;
  unint64_t v174;
  __int128 *v175;
  __int128 v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  unsigned __int8 *v184;
  uint64_t v185;
  unsigned __int8 *v186;
  unint64_t v187;
  uint64_t v188;
  unsigned int v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int8 *v192;
  unint64_t v193;
  unint64_t v194;
  _OWORD *v195;
  unsigned __int8 *v196;
  _BYTE *v197;
  uint64_t v198;
  char *v199;
  _QWORD *v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unsigned __int8 *v205;
  unsigned __int8 *v206;
  unsigned __int8 *v207;
  uint64_t v208;
  _OWORD *v209;
  unint64_t v210;
  __int128 *v211;
  __int128 v212;
  unsigned __int8 *v213;
  unsigned __int8 *v214;
  unsigned __int8 *v215;
  unsigned __int8 *v216;
  unsigned __int8 *v217;
  __int128 v218;
  unsigned __int8 *v219;
  uint64_t v220;
  char v221;
  uint64_t v222;
  unint64_t v223;
  __int16 v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  _OWORD *v235;
  _OWORD *v236;
  __int128 v237;
  char v238;
  uint64_t v239;
  _OWORD *v240;
  unint64_t v241;
  __int128 *v242;
  __int128 v243;
  unint64_t v244;
  uint64_t v245;
  unsigned __int8 *v246;
  unsigned __int8 *v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  _OWORD *v251;
  _OWORD *v252;
  __int128 v253;
  char v254;
  uint64_t v255;
  _OWORD *v256;
  unint64_t v257;
  __int128 *v258;
  __int128 v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  unsigned __int8 *v267;
  uint64_t v268;
  unsigned __int8 *v269;
  unsigned int v270;
  uint64_t v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  unsigned __int8 *v275;
  unint64_t v276;
  unint64_t v277;
  _OWORD *v278;
  unsigned __int8 *v279;
  _BYTE *v280;
  uint64_t v281;
  char *v282;
  _QWORD *v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  unsigned __int8 *v288;
  unsigned __int8 *v289;
  unsigned __int8 *v290;
  uint64_t v291;
  _OWORD *v292;
  unint64_t v293;
  __int128 *v294;
  __int128 v295;
  unsigned __int8 *v296;
  unsigned __int8 *v297;
  unsigned __int8 *v298;
  unsigned __int8 *v299;
  unsigned __int8 *v300;
  __int128 v301;
  unsigned __int8 *v302;
  uint64_t v303;
  char v304;
  uint64_t v305;
  unint64_t v306;
  __int16 v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  _OWORD *v318;
  _OWORD *v319;
  __int128 v320;
  char v321;
  uint64_t v322;
  _OWORD *v323;
  unint64_t v324;
  __int128 *v325;
  __int128 v326;
  unint64_t v327;
  uint64_t v328;
  unsigned __int8 *v329;
  unsigned __int8 *v330;
  uint64_t v331;
  unint64_t v332;
  unint64_t v333;
  _OWORD *v334;
  _OWORD *v335;
  __int128 v336;
  char v337;
  uint64_t v338;
  _OWORD *v339;
  unint64_t v340;
  __int128 *v341;
  __int128 v342;
  unint64_t v343;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  unint64_t v358;
  unint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  unint64_t v365;
  unint64_t v366;
  unint64_t v367;
  unint64_t v368;
  unsigned int *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char v374;
  char v375;
  char v376;
  char v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unsigned int v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  char *v399;
  char *v400;
  char *v401;
  unsigned __int8 *v402;
  unsigned __int8 *v403;
  unsigned __int8 *v404;
  unsigned __int8 *v405;
  int v406;
  int v407;
  int v408;
  int v409;
  int v410;
  int v411;
  int v412;
  int v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  unint64_t v421;
  unsigned __int8 *v422;
  unsigned __int8 *v423;
  unsigned __int8 *v424;
  unsigned __int8 *v425;
  unint64_t v426;
  unint64_t v427;
  unint64_t v428;
  unint64_t v429;

  v5 = a4;
  v7 = *(_DWORD *)(a1 + 256);
  if (v7 == 5)
  {
    v95 = *(_QWORD *)(a1 + 8);
    v96 = *(unsigned int *)(a1 + 24);
    v10 = (unint64_t)&a4[a5];
    v97 = (unint64_t)&a4[a5 - 8];
    v13 = *a3;
    v12 = a3[1];
    v98 = *(_QWORD *)(a1 + 232);
    v99 = *(char **)v98;
    v100 = *(_QWORD *)(v98 + 8);
    v379 = *(unsigned int *)(v98 + 24);
    v423 = (unsigned __int8 *)(v95 + v96);
    v354 = v100 + v379;
    if (*(_QWORD *)v98 + (_DWORD)v5 - ((_DWORD)v95 + (_DWORD)v96) == (_DWORD)v100 + (_DWORD)v379)
      v101 = v5 + 1;
    else
      v101 = v5;
    v419 = v97;
    if ((unint64_t)v101 >= v97)
      goto LABEL_509;
    v369 = a3;
    v415 = *(_QWORD *)(a1 + 96);
    LODWORD(v102) = *(_DWORD *)(a1 + 260);
    if ((_DWORD)v102)
      v102 = v102;
    else
      v102 = 1;
    v383 = v102;
    v411 = 64 - *(_DWORD *)(a1 + 248);
    v407 = v96 - 1;
    v371 = *(_QWORD *)(v98 + 96);
    v375 = 64 - *(_DWORD *)(v98 + 248);
    v103 = (unsigned __int8 *)(v10 - 32);
    v362 = v10 - 3;
    v366 = v10 - 7;
    v391 = v96 + v100 - (_DWORD)v99;
    v395 = v100 - v391;
    v399 = *(char **)v98;
    v346 = v100 - 1;
    v350 = v95 + 12;
    v358 = v10 - 1;
    v387 = *(_QWORD *)(v98 + 8);
    v403 = (unsigned __int8 *)(v10 - 32);
    v427 = v10;
    while (1)
    {
      v104 = 0xCF1BBCDCBB000000 * *(_QWORD *)v101;
      v105 = *(unsigned int *)(v415 + 4 * (v104 >> v411));
      v106 = (_DWORD)v101 - v95;
      v107 = ((_DWORD)v101 - v95 - v13 + 1);
      v108 = v100 + v107 - v391;
      if (v107 >= v96)
        v108 = v95 + v107;
      *(_DWORD *)(v415 + 4 * (v104 >> v411)) = v106;
      if ((v407 - v107) >= 3)
      {
        v109 = v101 + 1;
        if (*(_DWORD *)v108 == *(_DWORD *)(v101 + 1))
          break;
      }
      if (v105 <= v96)
      {
        v120 = *(unsigned int *)(v371 + 4 * (v104 >> v375));
        v10 = v427;
        if (v120 > v379 && *(_DWORD *)(v100 + v120) == *(_DWORD *)v101)
        {
          v121 = ZSTD_count_2segments(v101 + 4, (char *)(v100 + v120 + 4), v427, v99, v423) + 4;
          if (v101 <= v5)
          {
            v109 = v101;
            v99 = v399;
            v103 = v403;
            v106 = (_DWORD)v101 - v95;
          }
          else
          {
            v122 = (unsigned __int8 *)(v346 + v120);
            v123 = v101 - 1;
            v99 = v399;
            v106 = (_DWORD)v101 - v95;
            while (*v123 == *v122)
            {
              ++v121;
              v124 = v123 - 1;
              if ((unint64_t)v122 > v354)
              {
                --v122;
                v41 = v123-- > v5;
                if (v41)
                  continue;
              }
              v101 = v124 + 1;
              goto LABEL_238;
            }
            v101 = v123 + 1;
LABEL_238:
            v109 = v101;
            v103 = v403;
          }
          v167 = v101 - v5;
          v168 = *(_OWORD **)(a2 + 24);
          if (v101 <= v103)
          {
            *v168 = *(_OWORD *)v5;
            v172 = *(_QWORD *)(a2 + 24);
            if (v167 > 0x10)
            {
              v173 = (_OWORD *)(v172 + 16);
              v174 = v172 + v167;
              v175 = (__int128 *)(v5 + 16);
              do
              {
                v176 = *v175++;
                *v173++ = v176;
              }
              while ((unint64_t)v173 < v174);
              goto LABEL_250;
            }
            *(_QWORD *)(a2 + 24) = v172 + v167;
            v139 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (v5 <= v103)
            {
              v169 = (_OWORD *)((char *)v168 + v103 - v5);
              do
              {
                v170 = *(_OWORD *)v5;
                v5 += 16;
                *v168++ = v170;
              }
              while (v168 < v169);
              v5 = v103;
              v168 = v169;
            }
            while (v5 < v101)
            {
              v171 = *v5++;
              *(_BYTE *)v168 = v171;
              v168 = (_OWORD *)((char *)v168 + 1);
            }
LABEL_250:
            *(_QWORD *)(a2 + 24) += v167;
            v139 = *(_QWORD *)(a2 + 8);
            if (v167 >= 0x10000)
            {
              v177 = (unint64_t)(v139 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v177;
            }
          }
          v142 = v106 - v391 - v120;
          *(_WORD *)(v139 + 4) = v167;
          *(_DWORD *)v139 = v142 + 3;
          v141 = v121 - 3;
          v12 = v13;
          if (!((v121 - 3) >> 16))
          {
LABEL_197:
            *(_WORD *)(v139 + 6) = v141;
            v144 = v139 + 8;
            *(_QWORD *)(a2 + 8) = v139 + 8;
            v5 = &v109[v121];
            if ((unint64_t)&v109[v121] <= v419)
            {
              *(_DWORD *)(v415 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v95 + 2 + v106)) >> v411)) = v106 + 2;
              *(_DWORD *)(v415 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)(v5 - 2)) >> v411)) = (_DWORD)v5 - 2 - v95;
              v145 = v12;
              v10 = v427;
              while (1)
              {
                v12 = v142;
                v142 = v145;
                v146 = ((_DWORD)v5 - v95 - v145);
                v147 = v395;
                if (v146 >= v96)
                  v147 = v95;
                if ((v407 - v146) < 3)
                  break;
                v148 = v147 + v146;
                if (*(_DWORD *)v148 != *(_DWORD *)v5)
                  break;
                if (v146 >= v96)
                  v99 = (char *)v427;
                v149 = ZSTD_count_2segments(v5 + 4, (char *)(v148 + 4), v427, v99, v423);
                v103 = v403;
                if (v5 <= v403)
                {
                  *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                  v144 = *(_QWORD *)(a2 + 8);
                }
                *(_WORD *)(v144 + 4) = 0;
                *(_DWORD *)v144 = 1;
                if (v149 + 1 >= 0x10000)
                {
                  v150 = (unint64_t)(v144 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v150;
                }
                *(_WORD *)(v144 + 6) = v149 + 1;
                v144 += 8;
                *(_DWORD *)(v415 + 4 * ((0xCF1BBCDCBB000000 * *(_QWORD *)v5) >> v411)) = (_DWORD)v5 - v95;
                v5 += v149 + 4;
                *(_QWORD *)(a2 + 8) = v144;
                v145 = v12;
                v13 = v142;
                v101 = v5;
                v99 = v399;
                if ((unint64_t)v5 > v419)
                  goto LABEL_213;
              }
              v13 = v12;
              v12 = v142;
              v101 = v5;
            }
            else
            {
              v13 = v142;
              v101 = &v109[v121];
              v10 = v427;
            }
            goto LABEL_213;
          }
LABEL_196:
          v143 = (unint64_t)(v139 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v143;
          goto LABEL_197;
        }
      }
      else
      {
        v115 = v95 + v105;
        v10 = v427;
        if (*(_DWORD *)(v95 + v105) == *(_DWORD *)v101)
        {
          v116 = (char *)(v101 + 4);
          v117 = (_QWORD *)(v115 + 4);
          if (v366 <= (unint64_t)(v101 + 4))
          {
            v130 = v101 + 4;
          }
          else
          {
            v118 = *(_QWORD *)v116 ^ *v117;
            if (v118)
            {
              v119 = __clz(__rbit64(v118)) >> 3;
              goto LABEL_176;
            }
            v162 = 0;
            v163 = v101 + 12;
            while (1)
            {
              v164 = &v163[v162];
              if ((unint64_t)&v163[v162] >= v366)
                break;
              v165 = *(_QWORD *)(v350 + v105 + v162);
              v162 += 8;
              v166 = *(_QWORD *)v164 ^ v165;
              if (v166)
              {
                v119 = v162 + (__clz(__rbit64(v166)) >> 3);
                goto LABEL_176;
              }
            }
            v130 = &v101[v162 + 12];
            v117 = (_QWORD *)(v350 + v105 + v162);
          }
          if ((unint64_t)v130 < v362 && *(_DWORD *)v117 == *(_DWORD *)v130)
          {
            v130 += 4;
            v117 = (_QWORD *)((char *)v117 + 4);
          }
          if ((unint64_t)v130 < v358 && *(unsigned __int16 *)v117 == *(unsigned __int16 *)v130)
          {
            v130 += 2;
            v117 = (_QWORD *)((char *)v117 + 2);
          }
          if ((unint64_t)v130 < v427 && *(unsigned __int8 *)v117 == *v130)
            ++v130;
          v119 = v130 - (unsigned __int8 *)v116;
LABEL_176:
          v121 = v119 + 4;
          if (v101 <= v5)
          {
            v109 = v101;
          }
          else
          {
            v131 = v101 - 1;
            v132 = (unsigned __int8 *)(v95 - 1 + v105);
            while (*v131 == *v132)
            {
              ++v121;
              v133 = v131 - 1;
              if (v131 > v5)
              {
                --v131;
                v41 = v132-- > v423;
                if (v41)
                  continue;
              }
              v109 = v133 + 1;
              goto LABEL_216;
            }
            v109 = v131 + 1;
          }
LABEL_216:
          v151 = v109 - v5;
          v152 = *(_OWORD **)(a2 + 24);
          if (v109 <= v103)
          {
            *v152 = *(_OWORD *)v5;
            v156 = *(_QWORD *)(a2 + 24);
            if (v151 > 0x10)
            {
              v157 = (_OWORD *)(v156 + 16);
              v158 = v156 + v151;
              v159 = (__int128 *)(v5 + 16);
              do
              {
                v160 = *v159++;
                *v157++ = v160;
              }
              while ((unint64_t)v157 < v158);
              goto LABEL_227;
            }
            *(_QWORD *)(a2 + 24) = v156 + v151;
            v139 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (v5 <= v103)
            {
              v153 = (_OWORD *)((char *)v152 + v103 - v5);
              do
              {
                v154 = *(_OWORD *)v5;
                v5 += 16;
                *v152++ = v154;
              }
              while (v152 < v153);
              v5 = v103;
              v152 = v153;
            }
            while (v5 < v109)
            {
              v155 = *v5++;
              *(_BYTE *)v152 = v155;
              v152 = (_OWORD *)((char *)v152 + 1);
            }
LABEL_227:
            *(_QWORD *)(a2 + 24) += v151;
            v139 = *(_QWORD *)(a2 + 8);
            if (v151 >= 0x10000)
            {
              v161 = (unint64_t)(v139 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v161;
            }
          }
          v142 = ((_DWORD)v101 - v115);
          *(_WORD *)(v139 + 4) = v151;
          *(_DWORD *)v139 = v142 + 3;
          v141 = v121 - 3;
          v12 = v13;
          if (v121 - 3 < 0x10000)
            goto LABEL_197;
          goto LABEL_196;
        }
      }
      v101 += v383 + ((v101 - v5) >> 8);
LABEL_213:
      v100 = v387;
      if ((unint64_t)v101 >= v419)
      {
LABEL_508:
        a3 = v369;
        goto LABEL_509;
      }
    }
    if (v107 >= v96)
      v99 = (char *)v427;
    v110 = ZSTD_count_2segments(v101 + 5, (char *)(v108 + 4), v427, v99, v423);
    v103 = v403;
    v111 = v109 - v5;
    v112 = *(_OWORD **)(a2 + 24);
    if (v109 <= v403)
    {
      *v112 = *(_OWORD *)v5;
      v125 = *(_QWORD *)(a2 + 24);
      if (v111 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v125 + v111;
        v139 = *(_QWORD *)(a2 + 8);
        v99 = v399;
        v106 = (_DWORD)v101 - v95;
        goto LABEL_195;
      }
      v126 = (_OWORD *)(v125 + 16);
      v127 = v125 + v111;
      v128 = (__int128 *)(v5 + 16);
      v99 = v399;
      v106 = (_DWORD)v101 - v95;
      do
      {
        v129 = *v128++;
        *v126++ = v129;
      }
      while ((unint64_t)v126 < v127);
    }
    else
    {
      if (v5 <= v403)
      {
        v114 = (char *)v112 + v403 - v5;
        v134 = v5;
        do
        {
          v135 = *(_OWORD *)v134;
          v134 += 16;
          *v112++ = v135;
        }
        while (v112 < (_OWORD *)v114);
        v113 = v403;
      }
      else
      {
        v113 = v5;
        v114 = *(_BYTE **)(a2 + 24);
      }
      v99 = v399;
      v106 = (_DWORD)v101 - v95;
      if (v113 < v109)
      {
        if (v5 <= v403)
          v136 = v403;
        else
          v136 = v5;
        v137 = v101 - v136 + 1;
        do
        {
          v138 = *v113++;
          *v114++ = v138;
          --v137;
        }
        while (v137);
      }
    }
    *(_QWORD *)(a2 + 24) += v111;
    v139 = *(_QWORD *)(a2 + 8);
    if (v111 >= 0x10000)
    {
      v140 = (unint64_t)(v139 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v140;
    }
LABEL_195:
    v121 = v110 + 4;
    *(_WORD *)(v139 + 4) = v111;
    *(_DWORD *)v139 = 1;
    v141 = v110 + 1;
    v142 = v13;
    if (!((v110 + 1) >> 16))
      goto LABEL_197;
    goto LABEL_196;
  }
  if (v7 == 6)
  {
    v178 = *(_QWORD *)(a1 + 8);
    v179 = *(unsigned int *)(a1 + 24);
    v10 = (unint64_t)&a4[a5];
    v180 = (unint64_t)&a4[a5 - 8];
    v13 = *a3;
    v12 = a3[1];
    v181 = *(_QWORD *)(a1 + 232);
    v182 = *(char **)v181;
    v183 = *(_QWORD *)(v181 + 8);
    v380 = *(unsigned int *)(v181 + 24);
    v424 = (unsigned __int8 *)(v178 + v179);
    v355 = v183 + v380;
    if (*(_QWORD *)v181 + (_DWORD)v5 - ((_DWORD)v178 + (_DWORD)v179) == (_DWORD)v183 + (_DWORD)v380)
      v184 = v5 + 1;
    else
      v184 = v5;
    v420 = v180;
    if ((unint64_t)v184 >= v180)
      goto LABEL_509;
    v369 = a3;
    v416 = *(_QWORD *)(a1 + 96);
    LODWORD(v185) = *(_DWORD *)(a1 + 260);
    if ((_DWORD)v185)
      v185 = v185;
    else
      v185 = 1;
    v384 = v185;
    v412 = 64 - *(_DWORD *)(a1 + 248);
    v408 = v179 - 1;
    v372 = *(_QWORD *)(v181 + 96);
    v376 = 64 - *(_DWORD *)(v181 + 248);
    v186 = (unsigned __int8 *)(v10 - 32);
    v363 = v10 - 3;
    v367 = v10 - 7;
    v392 = v179 + v183 - (_DWORD)v182;
    v396 = v183 - v392;
    v400 = *(char **)v181;
    v347 = v183 - 1;
    v351 = v178 + 12;
    v359 = v10 - 1;
    v388 = *(_QWORD *)(v181 + 8);
    v404 = (unsigned __int8 *)(v10 - 32);
    v428 = v10;
    while (1)
    {
      v187 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)v184;
      v188 = *(unsigned int *)(v416 + 4 * (v187 >> v412));
      v189 = (_DWORD)v184 - v178;
      v190 = ((_DWORD)v184 - v178 - v13 + 1);
      v191 = v183 + v190 - v392;
      if (v190 >= v179)
        v191 = v178 + v190;
      *(_DWORD *)(v416 + 4 * (v187 >> v412)) = v189;
      if ((v408 - v190) >= 3)
      {
        v192 = v184 + 1;
        if (*(_DWORD *)v191 == *(_DWORD *)(v184 + 1))
          break;
      }
      if (v188 <= v179)
      {
        v203 = *(unsigned int *)(v372 + 4 * (v187 >> v376));
        v10 = v428;
        if (v203 > v380 && *(_DWORD *)(v183 + v203) == *(_DWORD *)v184)
        {
          v204 = ZSTD_count_2segments(v184 + 4, (char *)(v183 + v203 + 4), v428, v182, v424) + 4;
          if (v184 <= v5)
          {
            v192 = v184;
            v182 = v400;
            v186 = v404;
            v189 = (_DWORD)v184 - v178;
          }
          else
          {
            v205 = (unsigned __int8 *)(v347 + v203);
            v206 = v184 - 1;
            v182 = v400;
            v189 = (_DWORD)v184 - v178;
            while (*v206 == *v205)
            {
              ++v204;
              v207 = v206 - 1;
              if ((unint64_t)v205 > v355)
              {
                --v205;
                v41 = v206-- > v5;
                if (v41)
                  continue;
              }
              v184 = v207 + 1;
              goto LABEL_364;
            }
            v184 = v206 + 1;
LABEL_364:
            v192 = v184;
            v186 = v404;
          }
          v250 = v184 - v5;
          v251 = *(_OWORD **)(a2 + 24);
          if (v184 <= v186)
          {
            *v251 = *(_OWORD *)v5;
            v255 = *(_QWORD *)(a2 + 24);
            if (v250 > 0x10)
            {
              v256 = (_OWORD *)(v255 + 16);
              v257 = v255 + v250;
              v258 = (__int128 *)(v5 + 16);
              do
              {
                v259 = *v258++;
                *v256++ = v259;
              }
              while ((unint64_t)v256 < v257);
              goto LABEL_376;
            }
            *(_QWORD *)(a2 + 24) = v255 + v250;
            v222 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (v5 <= v186)
            {
              v252 = (_OWORD *)((char *)v251 + v186 - v5);
              do
              {
                v253 = *(_OWORD *)v5;
                v5 += 16;
                *v251++ = v253;
              }
              while (v251 < v252);
              v5 = v186;
              v251 = v252;
            }
            while (v5 < v184)
            {
              v254 = *v5++;
              *(_BYTE *)v251 = v254;
              v251 = (_OWORD *)((char *)v251 + 1);
            }
LABEL_376:
            *(_QWORD *)(a2 + 24) += v250;
            v222 = *(_QWORD *)(a2 + 8);
            if (v250 >= 0x10000)
            {
              v260 = (unint64_t)(v222 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v260;
            }
          }
          v225 = v189 - v392 - v203;
          *(_WORD *)(v222 + 4) = v250;
          *(_DWORD *)v222 = v225 + 3;
          v224 = v204 - 3;
          v12 = v13;
          if (!((v204 - 3) >> 16))
          {
LABEL_323:
            *(_WORD *)(v222 + 6) = v224;
            v227 = v222 + 8;
            *(_QWORD *)(a2 + 8) = v222 + 8;
            v5 = &v192[v204];
            if ((unint64_t)&v192[v204] <= v420)
            {
              *(_DWORD *)(v416 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v178 + 2 + v189)) >> v412)) = v189 + 2;
              *(_DWORD *)(v416 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)(v5 - 2)) >> v412)) = (_DWORD)v5 - 2 - v178;
              v228 = v12;
              v10 = v428;
              while (1)
              {
                v12 = v225;
                v225 = v228;
                v229 = ((_DWORD)v5 - v178 - v228);
                v230 = v396;
                if (v229 >= v179)
                  v230 = v178;
                if ((v408 - v229) < 3)
                  break;
                v231 = v230 + v229;
                if (*(_DWORD *)v231 != *(_DWORD *)v5)
                  break;
                if (v229 >= v179)
                  v182 = (char *)v428;
                v232 = ZSTD_count_2segments(v5 + 4, (char *)(v231 + 4), v428, v182, v424);
                v186 = v404;
                if (v5 <= v404)
                {
                  *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                  v227 = *(_QWORD *)(a2 + 8);
                }
                *(_WORD *)(v227 + 4) = 0;
                *(_DWORD *)v227 = 1;
                if (v232 + 1 >= 0x10000)
                {
                  v233 = (unint64_t)(v227 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v233;
                }
                *(_WORD *)(v227 + 6) = v232 + 1;
                v227 += 8;
                *(_DWORD *)(v416 + 4 * ((0xCF1BBCDCBF9B0000 * *(_QWORD *)v5) >> v412)) = (_DWORD)v5 - v178;
                v5 += v232 + 4;
                *(_QWORD *)(a2 + 8) = v227;
                v228 = v12;
                v13 = v225;
                v184 = v5;
                v182 = v400;
                if ((unint64_t)v5 > v420)
                  goto LABEL_339;
              }
              v13 = v12;
              v12 = v225;
              v184 = v5;
            }
            else
            {
              v13 = v225;
              v184 = &v192[v204];
              v10 = v428;
            }
            goto LABEL_339;
          }
LABEL_322:
          v226 = (unint64_t)(v222 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v226;
          goto LABEL_323;
        }
      }
      else
      {
        v198 = v178 + v188;
        v10 = v428;
        if (*(_DWORD *)(v178 + v188) == *(_DWORD *)v184)
        {
          v199 = (char *)(v184 + 4);
          v200 = (_QWORD *)(v198 + 4);
          if (v367 <= (unint64_t)(v184 + 4))
          {
            v213 = v184 + 4;
          }
          else
          {
            v201 = *(_QWORD *)v199 ^ *v200;
            if (v201)
            {
              v202 = __clz(__rbit64(v201)) >> 3;
              goto LABEL_302;
            }
            v245 = 0;
            v246 = v184 + 12;
            while (1)
            {
              v247 = &v246[v245];
              if ((unint64_t)&v246[v245] >= v367)
                break;
              v248 = *(_QWORD *)(v351 + v188 + v245);
              v245 += 8;
              v249 = *(_QWORD *)v247 ^ v248;
              if (v249)
              {
                v202 = v245 + (__clz(__rbit64(v249)) >> 3);
                goto LABEL_302;
              }
            }
            v213 = &v184[v245 + 12];
            v200 = (_QWORD *)(v351 + v188 + v245);
          }
          if ((unint64_t)v213 < v363 && *(_DWORD *)v200 == *(_DWORD *)v213)
          {
            v213 += 4;
            v200 = (_QWORD *)((char *)v200 + 4);
          }
          if ((unint64_t)v213 < v359 && *(unsigned __int16 *)v200 == *(unsigned __int16 *)v213)
          {
            v213 += 2;
            v200 = (_QWORD *)((char *)v200 + 2);
          }
          if ((unint64_t)v213 < v428 && *(unsigned __int8 *)v200 == *v213)
            ++v213;
          v202 = v213 - (unsigned __int8 *)v199;
LABEL_302:
          v204 = v202 + 4;
          if (v184 <= v5)
          {
            v192 = v184;
          }
          else
          {
            v214 = v184 - 1;
            v215 = (unsigned __int8 *)(v178 - 1 + v188);
            while (*v214 == *v215)
            {
              ++v204;
              v216 = v214 - 1;
              if (v214 > v5)
              {
                --v214;
                v41 = v215-- > v424;
                if (v41)
                  continue;
              }
              v192 = v216 + 1;
              goto LABEL_342;
            }
            v192 = v214 + 1;
          }
LABEL_342:
          v234 = v192 - v5;
          v235 = *(_OWORD **)(a2 + 24);
          if (v192 <= v186)
          {
            *v235 = *(_OWORD *)v5;
            v239 = *(_QWORD *)(a2 + 24);
            if (v234 > 0x10)
            {
              v240 = (_OWORD *)(v239 + 16);
              v241 = v239 + v234;
              v242 = (__int128 *)(v5 + 16);
              do
              {
                v243 = *v242++;
                *v240++ = v243;
              }
              while ((unint64_t)v240 < v241);
              goto LABEL_353;
            }
            *(_QWORD *)(a2 + 24) = v239 + v234;
            v222 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (v5 <= v186)
            {
              v236 = (_OWORD *)((char *)v235 + v186 - v5);
              do
              {
                v237 = *(_OWORD *)v5;
                v5 += 16;
                *v235++ = v237;
              }
              while (v235 < v236);
              v5 = v186;
              v235 = v236;
            }
            while (v5 < v192)
            {
              v238 = *v5++;
              *(_BYTE *)v235 = v238;
              v235 = (_OWORD *)((char *)v235 + 1);
            }
LABEL_353:
            *(_QWORD *)(a2 + 24) += v234;
            v222 = *(_QWORD *)(a2 + 8);
            if (v234 >= 0x10000)
            {
              v244 = (unint64_t)(v222 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v244;
            }
          }
          v225 = ((_DWORD)v184 - v198);
          *(_WORD *)(v222 + 4) = v234;
          *(_DWORD *)v222 = v225 + 3;
          v224 = v204 - 3;
          v12 = v13;
          if (v204 - 3 < 0x10000)
            goto LABEL_323;
          goto LABEL_322;
        }
      }
      v184 += v384 + ((v184 - v5) >> 8);
LABEL_339:
      v183 = v388;
      if ((unint64_t)v184 >= v420)
        goto LABEL_508;
    }
    if (v190 >= v179)
      v182 = (char *)v428;
    v193 = ZSTD_count_2segments(v184 + 5, (char *)(v191 + 4), v428, v182, v424);
    v186 = v404;
    v194 = v192 - v5;
    v195 = *(_OWORD **)(a2 + 24);
    if (v192 <= v404)
    {
      *v195 = *(_OWORD *)v5;
      v208 = *(_QWORD *)(a2 + 24);
      if (v194 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v208 + v194;
        v222 = *(_QWORD *)(a2 + 8);
        v182 = v400;
        v189 = (_DWORD)v184 - v178;
        goto LABEL_321;
      }
      v209 = (_OWORD *)(v208 + 16);
      v210 = v208 + v194;
      v211 = (__int128 *)(v5 + 16);
      v182 = v400;
      v189 = (_DWORD)v184 - v178;
      do
      {
        v212 = *v211++;
        *v209++ = v212;
      }
      while ((unint64_t)v209 < v210);
    }
    else
    {
      if (v5 <= v404)
      {
        v197 = (char *)v195 + v404 - v5;
        v217 = v5;
        do
        {
          v218 = *(_OWORD *)v217;
          v217 += 16;
          *v195++ = v218;
        }
        while (v195 < (_OWORD *)v197);
        v196 = v404;
      }
      else
      {
        v196 = v5;
        v197 = *(_BYTE **)(a2 + 24);
      }
      v182 = v400;
      v189 = (_DWORD)v184 - v178;
      if (v196 < v192)
      {
        if (v5 <= v404)
          v219 = v404;
        else
          v219 = v5;
        v220 = v184 - v219 + 1;
        do
        {
          v221 = *v196++;
          *v197++ = v221;
          --v220;
        }
        while (v220);
      }
    }
    *(_QWORD *)(a2 + 24) += v194;
    v222 = *(_QWORD *)(a2 + 8);
    if (v194 >= 0x10000)
    {
      v223 = (unint64_t)(v222 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v223;
    }
LABEL_321:
    v204 = v193 + 4;
    *(_WORD *)(v222 + 4) = v194;
    *(_DWORD *)v222 = 1;
    v224 = v193 + 1;
    v225 = v13;
    if (!((v193 + 1) >> 16))
      goto LABEL_323;
    goto LABEL_322;
  }
  if (v7 != 7)
  {
    v261 = *(_QWORD *)(a1 + 8);
    v262 = *(unsigned int *)(a1 + 24);
    v10 = (unint64_t)&a4[a5];
    v263 = (unint64_t)&a4[a5 - 8];
    v13 = *a3;
    v12 = a3[1];
    v264 = *(_QWORD *)(a1 + 232);
    v265 = *(char **)v264;
    v266 = *(_QWORD *)(v264 + 8);
    v381 = *(unsigned int *)(v264 + 24);
    v425 = (unsigned __int8 *)(v261 + v262);
    v356 = v266 + v381;
    if (*(_QWORD *)v264 + (_DWORD)v5 - ((_DWORD)v261 + (_DWORD)v262) == (_DWORD)v266 + (_DWORD)v381)
      v267 = v5 + 1;
    else
      v267 = v5;
    v421 = v263;
    if ((unint64_t)v267 >= v263)
      goto LABEL_509;
    v369 = a3;
    v417 = *(_QWORD *)(a1 + 96);
    LODWORD(v268) = *(_DWORD *)(a1 + 260);
    if ((_DWORD)v268)
      v268 = v268;
    else
      v268 = 1;
    v385 = v268;
    v413 = 32 - *(_DWORD *)(a1 + 248);
    v409 = v262 - 1;
    v377 = 32 - *(_DWORD *)(v264 + 248);
    v373 = *(_QWORD *)(v264 + 96);
    v269 = (unsigned __int8 *)(v10 - 32);
    v364 = v10 - 3;
    v368 = v10 - 7;
    v393 = v262 + v266 - (_DWORD)v265;
    v397 = v266 - v393;
    v401 = *(char **)v264;
    v348 = v266 - 1;
    v352 = v261 + 12;
    v360 = v10 - 1;
    v389 = *(_QWORD *)(v264 + 8);
    v405 = (unsigned __int8 *)(v10 - 32);
    v429 = v10;
    while (1)
    {
      v270 = (-1640531535 * *(_DWORD *)v267) >> v413;
      v271 = *(unsigned int *)(v417 + 4 * v270);
      v272 = (_DWORD)v267 - v261;
      v273 = ((_DWORD)v267 - v261 - v13 + 1);
      v274 = v266 + v273 - v393;
      if (v273 >= v262)
        v274 = v261 + v273;
      *(_DWORD *)(v417 + 4 * v270) = v272;
      if ((v409 - v273) >= 3)
      {
        v275 = v267 + 1;
        if (*(_DWORD *)v274 == *(_DWORD *)(v267 + 1))
          break;
      }
      if (v271 <= v262)
      {
        v286 = *(unsigned int *)(v373 + 4 * ((-1640531535 * *(_DWORD *)v267) >> v377));
        v10 = v429;
        if (v286 > v381 && *(_DWORD *)(v266 + v286) == *(_DWORD *)v267)
        {
          v287 = ZSTD_count_2segments(v267 + 4, (char *)(v266 + v286 + 4), v429, v265, v425) + 4;
          if (v267 <= v5)
          {
            v275 = v267;
            v265 = v401;
            v269 = v405;
            v272 = (_DWORD)v267 - v261;
          }
          else
          {
            v288 = (unsigned __int8 *)(v348 + v286);
            v289 = v267 - 1;
            v265 = v401;
            v272 = (_DWORD)v267 - v261;
            while (*v289 == *v288)
            {
              ++v287;
              v290 = v289 - 1;
              if ((unint64_t)v288 > v356)
              {
                --v288;
                v41 = v289-- > v5;
                if (v41)
                  continue;
              }
              v267 = v290 + 1;
              goto LABEL_490;
            }
            v267 = v289 + 1;
LABEL_490:
            v275 = v267;
            v269 = v405;
          }
          v333 = v267 - v5;
          v334 = *(_OWORD **)(a2 + 24);
          if (v267 <= v269)
          {
            *v334 = *(_OWORD *)v5;
            v338 = *(_QWORD *)(a2 + 24);
            if (v333 > 0x10)
            {
              v339 = (_OWORD *)(v338 + 16);
              v340 = v338 + v333;
              v341 = (__int128 *)(v5 + 16);
              do
              {
                v342 = *v341++;
                *v339++ = v342;
              }
              while ((unint64_t)v339 < v340);
              goto LABEL_502;
            }
            *(_QWORD *)(a2 + 24) = v338 + v333;
            v305 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (v5 <= v269)
            {
              v335 = (_OWORD *)((char *)v334 + v269 - v5);
              do
              {
                v336 = *(_OWORD *)v5;
                v5 += 16;
                *v334++ = v336;
              }
              while (v334 < v335);
              v5 = v269;
              v334 = v335;
            }
            while (v5 < v267)
            {
              v337 = *v5++;
              *(_BYTE *)v334 = v337;
              v334 = (_OWORD *)((char *)v334 + 1);
            }
LABEL_502:
            *(_QWORD *)(a2 + 24) += v333;
            v305 = *(_QWORD *)(a2 + 8);
            if (v333 >= 0x10000)
            {
              v343 = (unint64_t)(v305 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v343;
            }
          }
          v308 = v272 - v393 - v286;
          *(_WORD *)(v305 + 4) = v333;
          *(_DWORD *)v305 = v308 + 3;
          v307 = v287 - 3;
          v12 = v13;
          if (!((v287 - 3) >> 16))
          {
LABEL_449:
            *(_WORD *)(v305 + 6) = v307;
            v310 = v305 + 8;
            *(_QWORD *)(a2 + 8) = v305 + 8;
            v5 = &v275[v287];
            if ((unint64_t)&v275[v287] <= v421)
            {
              *(_DWORD *)(v417 + 4 * ((-1640531535 * *(_DWORD *)(v261 + 2 + v272)) >> v413)) = v272 + 2;
              *(_DWORD *)(v417 + 4 * ((-1640531535 * *(_DWORD *)(v5 - 2)) >> v413)) = (_DWORD)v5 - 2 - v261;
              v311 = v12;
              v10 = v429;
              while (1)
              {
                v12 = v308;
                v308 = v311;
                v312 = ((_DWORD)v5 - v261 - v311);
                v313 = v397;
                if (v312 >= v262)
                  v313 = v261;
                if ((v409 - v312) < 3)
                  break;
                v314 = v313 + v312;
                if (*(_DWORD *)v314 != *(_DWORD *)v5)
                  break;
                if (v312 >= v262)
                  v265 = (char *)v429;
                v315 = ZSTD_count_2segments(v5 + 4, (char *)(v314 + 4), v429, v265, v425);
                v269 = v405;
                if (v5 <= v405)
                {
                  *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                  v310 = *(_QWORD *)(a2 + 8);
                }
                *(_WORD *)(v310 + 4) = 0;
                *(_DWORD *)v310 = 1;
                if (v315 + 1 >= 0x10000)
                {
                  v316 = (unint64_t)(v310 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v316;
                }
                *(_WORD *)(v310 + 6) = v315 + 1;
                v310 += 8;
                *(_DWORD *)(v417 + 4 * ((-1640531535 * *(_DWORD *)v5) >> v413)) = (_DWORD)v5 - v261;
                v5 += v315 + 4;
                *(_QWORD *)(a2 + 8) = v310;
                v311 = v12;
                v13 = v308;
                v267 = v5;
                v265 = v401;
                if ((unint64_t)v5 > v421)
                  goto LABEL_465;
              }
              v13 = v12;
              v12 = v308;
              v267 = v5;
            }
            else
            {
              v13 = v308;
              v267 = &v275[v287];
              v10 = v429;
            }
            goto LABEL_465;
          }
LABEL_448:
          v309 = (unint64_t)(v305 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v309;
          goto LABEL_449;
        }
      }
      else
      {
        v281 = v261 + v271;
        v10 = v429;
        if (*(_DWORD *)(v261 + v271) == *(_DWORD *)v267)
        {
          v282 = (char *)(v267 + 4);
          v283 = (_QWORD *)(v281 + 4);
          if (v368 <= (unint64_t)(v267 + 4))
          {
            v296 = v267 + 4;
          }
          else
          {
            v284 = *(_QWORD *)v282 ^ *v283;
            if (v284)
            {
              v285 = __clz(__rbit64(v284)) >> 3;
              goto LABEL_428;
            }
            v328 = 0;
            v329 = v267 + 12;
            while (1)
            {
              v330 = &v329[v328];
              if ((unint64_t)&v329[v328] >= v368)
                break;
              v331 = *(_QWORD *)(v352 + v271 + v328);
              v328 += 8;
              v332 = *(_QWORD *)v330 ^ v331;
              if (v332)
              {
                v285 = v328 + (__clz(__rbit64(v332)) >> 3);
                goto LABEL_428;
              }
            }
            v296 = &v267[v328 + 12];
            v283 = (_QWORD *)(v352 + v271 + v328);
          }
          if ((unint64_t)v296 < v364 && *(_DWORD *)v283 == *(_DWORD *)v296)
          {
            v296 += 4;
            v283 = (_QWORD *)((char *)v283 + 4);
          }
          if ((unint64_t)v296 < v360 && *(unsigned __int16 *)v283 == *(unsigned __int16 *)v296)
          {
            v296 += 2;
            v283 = (_QWORD *)((char *)v283 + 2);
          }
          if ((unint64_t)v296 < v429 && *(unsigned __int8 *)v283 == *v296)
            ++v296;
          v285 = v296 - (unsigned __int8 *)v282;
LABEL_428:
          v287 = v285 + 4;
          if (v267 <= v5)
          {
            v275 = v267;
          }
          else
          {
            v297 = v267 - 1;
            v298 = (unsigned __int8 *)(v261 - 1 + v271);
            while (*v297 == *v298)
            {
              ++v287;
              v299 = v297 - 1;
              if (v297 > v5)
              {
                --v297;
                v41 = v298-- > v425;
                if (v41)
                  continue;
              }
              v275 = v299 + 1;
              goto LABEL_468;
            }
            v275 = v297 + 1;
          }
LABEL_468:
          v317 = v275 - v5;
          v318 = *(_OWORD **)(a2 + 24);
          if (v275 <= v269)
          {
            *v318 = *(_OWORD *)v5;
            v322 = *(_QWORD *)(a2 + 24);
            if (v317 > 0x10)
            {
              v323 = (_OWORD *)(v322 + 16);
              v324 = v322 + v317;
              v325 = (__int128 *)(v5 + 16);
              do
              {
                v326 = *v325++;
                *v323++ = v326;
              }
              while ((unint64_t)v323 < v324);
              goto LABEL_479;
            }
            *(_QWORD *)(a2 + 24) = v322 + v317;
            v305 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (v5 <= v269)
            {
              v319 = (_OWORD *)((char *)v318 + v269 - v5);
              do
              {
                v320 = *(_OWORD *)v5;
                v5 += 16;
                *v318++ = v320;
              }
              while (v318 < v319);
              v5 = v269;
              v318 = v319;
            }
            while (v5 < v275)
            {
              v321 = *v5++;
              *(_BYTE *)v318 = v321;
              v318 = (_OWORD *)((char *)v318 + 1);
            }
LABEL_479:
            *(_QWORD *)(a2 + 24) += v317;
            v305 = *(_QWORD *)(a2 + 8);
            if (v317 >= 0x10000)
            {
              v327 = (unint64_t)(v305 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v327;
            }
          }
          v308 = ((_DWORD)v267 - v281);
          *(_WORD *)(v305 + 4) = v317;
          *(_DWORD *)v305 = v308 + 3;
          v307 = v287 - 3;
          v12 = v13;
          if (v287 - 3 < 0x10000)
            goto LABEL_449;
          goto LABEL_448;
        }
      }
      v267 += v385 + ((v267 - v5) >> 8);
LABEL_465:
      v266 = v389;
      if ((unint64_t)v267 >= v421)
        goto LABEL_508;
    }
    if (v273 >= v262)
      v265 = (char *)v429;
    v276 = ZSTD_count_2segments(v267 + 5, (char *)(v274 + 4), v429, v265, v425);
    v269 = v405;
    v277 = v275 - v5;
    v278 = *(_OWORD **)(a2 + 24);
    if (v275 <= v405)
    {
      *v278 = *(_OWORD *)v5;
      v291 = *(_QWORD *)(a2 + 24);
      if (v277 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v291 + v277;
        v305 = *(_QWORD *)(a2 + 8);
        v265 = v401;
        v272 = (_DWORD)v267 - v261;
        goto LABEL_447;
      }
      v292 = (_OWORD *)(v291 + 16);
      v293 = v291 + v277;
      v294 = (__int128 *)(v5 + 16);
      v265 = v401;
      v272 = (_DWORD)v267 - v261;
      do
      {
        v295 = *v294++;
        *v292++ = v295;
      }
      while ((unint64_t)v292 < v293);
    }
    else
    {
      if (v5 <= v405)
      {
        v280 = (char *)v278 + v405 - v5;
        v300 = v5;
        do
        {
          v301 = *(_OWORD *)v300;
          v300 += 16;
          *v278++ = v301;
        }
        while (v278 < (_OWORD *)v280);
        v279 = v405;
      }
      else
      {
        v279 = v5;
        v280 = *(_BYTE **)(a2 + 24);
      }
      v265 = v401;
      v272 = (_DWORD)v267 - v261;
      if (v279 < v275)
      {
        if (v5 <= v405)
          v302 = v405;
        else
          v302 = v5;
        v303 = v267 - v302 + 1;
        do
        {
          v304 = *v279++;
          *v280++ = v304;
          --v303;
        }
        while (v303);
      }
    }
    *(_QWORD *)(a2 + 24) += v277;
    v305 = *(_QWORD *)(a2 + 8);
    if (v277 >= 0x10000)
    {
      v306 = (unint64_t)(v305 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v306;
    }
LABEL_447:
    v287 = v276 + 4;
    *(_WORD *)(v305 + 4) = v277;
    *(_DWORD *)v305 = 1;
    v307 = v276 + 1;
    v308 = v13;
    if (!((v276 + 1) >> 16))
      goto LABEL_449;
    goto LABEL_448;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = (unint64_t)&a4[a5];
  v11 = (unint64_t)&a4[a5 - 8];
  v13 = *a3;
  v12 = a3[1];
  v14 = *(_QWORD *)(a1 + 232);
  v15 = *(char **)v14;
  v16 = *(_QWORD *)(v14 + 8);
  v378 = *(unsigned int *)(v14 + 24);
  v422 = (unsigned __int8 *)(v8 + v9);
  v353 = v16 + v378;
  if (*(_QWORD *)v14 + (_DWORD)v5 - ((_DWORD)v8 + (_DWORD)v9) == (_DWORD)v16 + (_DWORD)v378)
    v17 = v5 + 1;
  else
    v17 = v5;
  v418 = v11;
  if ((unint64_t)v17 < v11)
  {
    v369 = a3;
    v414 = *(_QWORD *)(a1 + 96);
    LODWORD(v18) = *(_DWORD *)(a1 + 260);
    if ((_DWORD)v18)
      v18 = v18;
    else
      v18 = 1;
    v382 = v18;
    v410 = 64 - *(_DWORD *)(a1 + 248);
    v406 = v9 - 1;
    v370 = *(_QWORD *)(v14 + 96);
    v374 = 64 - *(_DWORD *)(v14 + 248);
    v19 = (unsigned __int8 *)(v10 - 32);
    v361 = v10 - 3;
    v365 = v10 - 7;
    v390 = v9 + v16 - (_DWORD)v15;
    v394 = v16 - v390;
    v398 = *(char **)v14;
    v345 = v16 - 1;
    v349 = v8 + 12;
    v357 = v10 - 1;
    v386 = *(_QWORD *)(v14 + 8);
    v402 = (unsigned __int8 *)(v10 - 32);
    v426 = v10;
    while (1)
    {
      v20 = 0xCF1BBCDCBFA56300 * *(_QWORD *)v17;
      v21 = *(unsigned int *)(v414 + 4 * (v20 >> v410));
      v22 = (_DWORD)v17 - v8;
      v23 = ((_DWORD)v17 - v8 - v13 + 1);
      v24 = v16 + v23 - v390;
      if (v23 >= v9)
        v24 = v8 + v23;
      *(_DWORD *)(v414 + 4 * (v20 >> v410)) = v22;
      if ((v406 - v23) >= 3)
      {
        v25 = v17 + 1;
        if (*(_DWORD *)v24 == *(_DWORD *)(v17 + 1))
          break;
      }
      if (v21 <= v9)
      {
        v36 = *(unsigned int *)(v370 + 4 * (v20 >> v374));
        v10 = v426;
        if (v36 > v378 && *(_DWORD *)(v16 + v36) == *(_DWORD *)v17)
        {
          v37 = ZSTD_count_2segments(v17 + 4, (char *)(v16 + v36 + 4), v426, v15, v422) + 4;
          if (v17 <= v5)
          {
            v25 = v17;
            v15 = v398;
            v19 = v402;
            v22 = (_DWORD)v17 - v8;
          }
          else
          {
            v38 = (unsigned __int8 *)(v345 + v36);
            v39 = v17 - 1;
            v15 = v398;
            v22 = (_DWORD)v17 - v8;
            while (*v39 == *v38)
            {
              ++v37;
              v40 = v39 - 1;
              if ((unint64_t)v38 > v353)
              {
                --v38;
                v41 = v39-- > v5;
                if (v41)
                  continue;
              }
              v17 = v40 + 1;
              goto LABEL_112;
            }
            v17 = v39 + 1;
LABEL_112:
            v25 = v17;
            v19 = v402;
          }
          v84 = v17 - v5;
          v85 = *(_OWORD **)(a2 + 24);
          if (v17 <= v19)
          {
            *v85 = *(_OWORD *)v5;
            v89 = *(_QWORD *)(a2 + 24);
            if (v84 > 0x10)
            {
              v90 = (_OWORD *)(v89 + 16);
              v91 = v89 + v84;
              v92 = (__int128 *)(v5 + 16);
              do
              {
                v93 = *v92++;
                *v90++ = v93;
              }
              while ((unint64_t)v90 < v91);
              goto LABEL_124;
            }
            *(_QWORD *)(a2 + 24) = v89 + v84;
            v56 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (v5 <= v19)
            {
              v86 = (_OWORD *)((char *)v85 + v19 - v5);
              do
              {
                v87 = *(_OWORD *)v5;
                v5 += 16;
                *v85++ = v87;
              }
              while (v85 < v86);
              v5 = v19;
              v85 = v86;
            }
            while (v5 < v17)
            {
              v88 = *v5++;
              *(_BYTE *)v85 = v88;
              v85 = (_OWORD *)((char *)v85 + 1);
            }
LABEL_124:
            *(_QWORD *)(a2 + 24) += v84;
            v56 = *(_QWORD *)(a2 + 8);
            if (v84 >= 0x10000)
            {
              v94 = (unint64_t)(v56 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v94;
            }
          }
          v59 = v22 - v390 - v36;
          *(_WORD *)(v56 + 4) = v84;
          *(_DWORD *)v56 = v59 + 3;
          v58 = v37 - 3;
          v12 = v13;
          if (!((v37 - 3) >> 16))
          {
LABEL_71:
            *(_WORD *)(v56 + 6) = v58;
            v61 = v56 + 8;
            *(_QWORD *)(a2 + 8) = v56 + 8;
            v5 = &v25[v37];
            if ((unint64_t)&v25[v37] <= v418)
            {
              *(_DWORD *)(v414 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v8 + 2 + v22)) >> v410)) = v22 + 2;
              *(_DWORD *)(v414 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)(v5 - 2)) >> v410)) = (_DWORD)v5 - 2 - v8;
              v62 = v12;
              v10 = v426;
              while (1)
              {
                v12 = v59;
                v59 = v62;
                v63 = ((_DWORD)v5 - v8 - v62);
                v64 = v394;
                if (v63 >= v9)
                  v64 = v8;
                if ((v406 - v63) < 3)
                  break;
                v65 = v64 + v63;
                if (*(_DWORD *)v65 != *(_DWORD *)v5)
                  break;
                if (v63 >= v9)
                  v15 = (char *)v426;
                v66 = ZSTD_count_2segments(v5 + 4, (char *)(v65 + 4), v426, v15, v422);
                v19 = v402;
                if (v5 <= v402)
                {
                  *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                  v61 = *(_QWORD *)(a2 + 8);
                }
                *(_WORD *)(v61 + 4) = 0;
                *(_DWORD *)v61 = 1;
                if (v66 + 1 >= 0x10000)
                {
                  v67 = (unint64_t)(v61 - *(_QWORD *)a2) >> 3;
                  *(_DWORD *)(a2 + 72) = 2;
                  *(_DWORD *)(a2 + 76) = v67;
                }
                *(_WORD *)(v61 + 6) = v66 + 1;
                v61 += 8;
                *(_DWORD *)(v414 + 4 * ((0xCF1BBCDCBFA56300 * *(_QWORD *)v5) >> v410)) = (_DWORD)v5 - v8;
                v5 += v66 + 4;
                *(_QWORD *)(a2 + 8) = v61;
                v62 = v12;
                v13 = v59;
                v17 = v5;
                v15 = v398;
                if ((unint64_t)v5 > v418)
                  goto LABEL_87;
              }
              v13 = v12;
              v12 = v59;
              v17 = v5;
            }
            else
            {
              v13 = v59;
              v17 = &v25[v37];
              v10 = v426;
            }
            goto LABEL_87;
          }
LABEL_70:
          v60 = (unint64_t)(v56 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v60;
          goto LABEL_71;
        }
      }
      else
      {
        v31 = v8 + v21;
        v10 = v426;
        if (*(_DWORD *)(v8 + v21) == *(_DWORD *)v17)
        {
          v32 = (char *)(v17 + 4);
          v33 = (_QWORD *)(v31 + 4);
          if (v365 <= (unint64_t)(v17 + 4))
          {
            v47 = v17 + 4;
          }
          else
          {
            v34 = *(_QWORD *)v32 ^ *v33;
            if (v34)
            {
              v35 = __clz(__rbit64(v34)) >> 3;
              goto LABEL_50;
            }
            v79 = 0;
            v80 = v17 + 12;
            while (1)
            {
              v81 = &v80[v79];
              if ((unint64_t)&v80[v79] >= v365)
                break;
              v82 = *(_QWORD *)(v349 + v21 + v79);
              v79 += 8;
              v83 = *(_QWORD *)v81 ^ v82;
              if (v83)
              {
                v35 = v79 + (__clz(__rbit64(v83)) >> 3);
                goto LABEL_50;
              }
            }
            v47 = &v17[v79 + 12];
            v33 = (_QWORD *)(v349 + v21 + v79);
          }
          if ((unint64_t)v47 < v361 && *(_DWORD *)v33 == *(_DWORD *)v47)
          {
            v47 += 4;
            v33 = (_QWORD *)((char *)v33 + 4);
          }
          if ((unint64_t)v47 < v357 && *(unsigned __int16 *)v33 == *(unsigned __int16 *)v47)
          {
            v47 += 2;
            v33 = (_QWORD *)((char *)v33 + 2);
          }
          if ((unint64_t)v47 < v426 && *(unsigned __int8 *)v33 == *v47)
            ++v47;
          v35 = v47 - (unsigned __int8 *)v32;
LABEL_50:
          v37 = v35 + 4;
          if (v17 <= v5)
          {
            v25 = v17;
          }
          else
          {
            v48 = v17 - 1;
            v49 = (unsigned __int8 *)(v8 - 1 + v21);
            while (*v48 == *v49)
            {
              ++v37;
              v50 = v48 - 1;
              if (v48 > v5)
              {
                --v48;
                v41 = v49-- > v422;
                if (v41)
                  continue;
              }
              v25 = v50 + 1;
              goto LABEL_90;
            }
            v25 = v48 + 1;
          }
LABEL_90:
          v68 = v25 - v5;
          v69 = *(_OWORD **)(a2 + 24);
          if (v25 <= v19)
          {
            *v69 = *(_OWORD *)v5;
            v73 = *(_QWORD *)(a2 + 24);
            if (v68 > 0x10)
            {
              v74 = (_OWORD *)(v73 + 16);
              v75 = v73 + v68;
              v76 = (__int128 *)(v5 + 16);
              do
              {
                v77 = *v76++;
                *v74++ = v77;
              }
              while ((unint64_t)v74 < v75);
              goto LABEL_101;
            }
            *(_QWORD *)(a2 + 24) = v73 + v68;
            v56 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (v5 <= v19)
            {
              v70 = (_OWORD *)((char *)v69 + v19 - v5);
              do
              {
                v71 = *(_OWORD *)v5;
                v5 += 16;
                *v69++ = v71;
              }
              while (v69 < v70);
              v5 = v19;
              v69 = v70;
            }
            while (v5 < v25)
            {
              v72 = *v5++;
              *(_BYTE *)v69 = v72;
              v69 = (_OWORD *)((char *)v69 + 1);
            }
LABEL_101:
            *(_QWORD *)(a2 + 24) += v68;
            v56 = *(_QWORD *)(a2 + 8);
            if (v68 >= 0x10000)
            {
              v78 = (unint64_t)(v56 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v78;
            }
          }
          v59 = ((_DWORD)v17 - v31);
          *(_WORD *)(v56 + 4) = v68;
          *(_DWORD *)v56 = v59 + 3;
          v58 = v37 - 3;
          v12 = v13;
          if (v37 - 3 < 0x10000)
            goto LABEL_71;
          goto LABEL_70;
        }
      }
      v17 += v382 + ((v17 - v5) >> 8);
LABEL_87:
      v16 = v386;
      if ((unint64_t)v17 >= v418)
        goto LABEL_508;
    }
    if (v23 >= v9)
      v15 = (char *)v426;
    v26 = ZSTD_count_2segments(v17 + 5, (char *)(v24 + 4), v426, v15, v422);
    v19 = v402;
    v27 = v25 - v5;
    v28 = *(_OWORD **)(a2 + 24);
    if (v25 <= v402)
    {
      *v28 = *(_OWORD *)v5;
      v42 = *(_QWORD *)(a2 + 24);
      if (v27 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v42 + v27;
        v56 = *(_QWORD *)(a2 + 8);
        v15 = v398;
        v22 = (_DWORD)v17 - v8;
        goto LABEL_69;
      }
      v43 = (_OWORD *)(v42 + 16);
      v44 = v42 + v27;
      v45 = (__int128 *)(v5 + 16);
      v15 = v398;
      v22 = (_DWORD)v17 - v8;
      do
      {
        v46 = *v45++;
        *v43++ = v46;
      }
      while ((unint64_t)v43 < v44);
    }
    else
    {
      if (v5 <= v402)
      {
        v30 = (char *)v28 + v402 - v5;
        v51 = v5;
        do
        {
          v52 = *(_OWORD *)v51;
          v51 += 16;
          *v28++ = v52;
        }
        while (v28 < (_OWORD *)v30);
        v29 = v402;
      }
      else
      {
        v29 = v5;
        v30 = *(_BYTE **)(a2 + 24);
      }
      v15 = v398;
      v22 = (_DWORD)v17 - v8;
      if (v29 < v25)
      {
        if (v5 <= v402)
          v53 = v402;
        else
          v53 = v5;
        v54 = v17 - v53 + 1;
        do
        {
          v55 = *v29++;
          *v30++ = v55;
          --v54;
        }
        while (v54);
      }
    }
    *(_QWORD *)(a2 + 24) += v27;
    v56 = *(_QWORD *)(a2 + 8);
    if (v27 >= 0x10000)
    {
      v57 = (unint64_t)(v56 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v57;
    }
LABEL_69:
    v37 = v26 + 4;
    *(_WORD *)(v56 + 4) = v27;
    *(_DWORD *)v56 = 1;
    v58 = v26 + 1;
    v59 = v13;
    if (!((v26 + 1) >> 16))
      goto LABEL_71;
    goto LABEL_70;
  }
LABEL_509:
  *a3 = v13;
  a3[1] = v12;
  return v10 - (_QWORD)v5;
}

int64_t ZSTD_compressBlock_fast_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  int v5;

  if ((*(_DWORD *)(a1 + 256) - 5) >= 3)
    v5 = 4;
  else
    v5 = *(_DWORD *)(a1 + 256);
  return ZSTD_compressBlock_fast_extDict_generic(a1, a2, a3, a4, a5, v5);
}

int64_t ZSTD_compressBlock_fast_extDict_generic(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  _OWORD *v39;
  unsigned __int8 *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unint64_t v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  _OWORD *v53;
  unint64_t v54;
  __int128 *v55;
  __int128 v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  __int128 v61;
  unsigned __int8 *v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _OWORD *v72;
  _OWORD *v73;
  __int128 v74;
  char v75;
  uint64_t v76;
  _OWORD *v77;
  unint64_t v78;
  __int128 *v79;
  __int128 v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unsigned int *v101;
  unsigned __int8 *v102;
  uint64_t v103;
  unsigned int v104;
  uint64_t v105;
  char v106;
  int v107;
  int v108;
  uint64_t v109;
  int v110;
  char *v111;
  unsigned __int8 *v112;
  char v113;
  unsigned __int8 *v114;
  int v115;
  uint64_t v116;
  unint64_t v117;

  v6 = a4;
  v7 = a2;
  v8 = *(_DWORD *)(a1 + 260);
  if (v8)
    v9 = v8;
  else
    v9 = 1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (unint64_t)&a4[a5];
  v12 = (_DWORD)a4 + a5 - v10;
  v13 = 1 << *(_DWORD *)(a1 + 240);
  v15 = *(_DWORD *)(a1 + 24);
  v14 = *(_DWORD *)(a1 + 28);
  v50 = v12 - v14 > v13;
  v16 = v12 - v13;
  if (v50 && *(_DWORD *)(a1 + 40) == 0)
    v18 = v16;
  else
    v18 = v14;
  if (v15 <= v18)
    v19 = v18;
  else
    v19 = v15;
  if (v18 >= v15)
    return ZSTD_compressBlock_fast(a1, a2, a3, a4, a5);
  v20 = *a3;
  v21 = a3[1];
  v117 = v11 - 8;
  if (v11 - 8 <= (unint64_t)a4)
    goto LABEL_127;
  v105 = v9;
  v22 = *(_QWORD *)(a1 + 16);
  v101 = a3;
  v102 = (unsigned __int8 *)(v22 + v18);
  v112 = (unsigned __int8 *)(v10 + v19);
  v116 = v22;
  v111 = (char *)(v22 + v19);
  v103 = v10 + 2;
  v23 = *(_QWORD *)(a1 + 96);
  LODWORD(v22) = *(_DWORD *)(a1 + 248);
  v113 = 64 - v22;
  v106 = 32 - v22;
  v115 = v19 - 1;
  v114 = (unsigned __int8 *)(v11 - 32);
  v24 = a6 - 5;
  v25 = a4;
  v107 = v18;
  v108 = a6 - 5;
  v109 = v23;
  v110 = v19;
  do
  {
    switch(v24)
    {
      case 0:
        v26 = *(_QWORD *)v6;
        v27 = -1157627904;
        goto LABEL_22;
      case 1:
        v26 = *(_QWORD *)v6;
        v27 = -1080360960;
        goto LABEL_22;
      case 2:
        v26 = *(_QWORD *)v6;
        v27 = -1079680256;
        goto LABEL_22;
      case 3:
        v26 = *(_QWORD *)v6;
        v27 = -1213897629;
LABEL_22:
        v28 = (v26 * (v27 | 0xCF1BBCDC00000000)) >> v113;
        break;
      default:
        v28 = (-1640531535 * *(_DWORD *)v6) >> v106;
        break;
    }
    v29 = *(unsigned int *)(v23 + 4 * v28);
    v30 = v116;
    if (v29 >= v19)
      v31 = v10;
    else
      v31 = v116;
    v32 = (_DWORD)v6 - v10;
    v33 = (_DWORD)v6 - v10 + 1;
    v34 = (v33 - v20);
    if (v34 >= v19)
      v30 = v10;
    *(_DWORD *)(v23 + 4 * v28) = v32;
    if (v20 > v33 - (int)v18
      || (v115 - v34) < 3
      || (v35 = (unint64_t)(v6 + 1), *(_DWORD *)(v30 + v34) != *(_DWORD *)(v6 + 1)))
    {
      v42 = v7;
      v43 = v10;
      v44 = v11;
      if (v29 < v18 || (v45 = v31 + v29, *(_DWORD *)(v31 + v29) != *(_DWORD *)v6))
      {
        v6 += v105 + ((v6 - v25) >> 8);
        v11 = v44;
        v10 = v43;
        v7 = v42;
        goto LABEL_125;
      }
      v104 = v32;
      if (v29 >= v19)
        v46 = (char *)v44;
      else
        v46 = v111;
      if (v29 >= v19)
        v47 = v112;
      else
        v47 = v102;
      v48 = v29;
      v49 = ZSTD_count_2segments(v6 + 4, (char *)(v45 + 4), v44, v46, v112) + 4;
      v50 = v45 > (unint64_t)v47 && v6 > v25;
      if (v50)
      {
        v57 = v6 - 1;
        v58 = (unsigned __int8 *)(v31 + v48 - 1);
        v11 = v44;
        v10 = v43;
        v7 = v42;
        v23 = v109;
        LODWORD(v19) = v110;
        v24 = v108;
        v51 = v104;
        while (*v57 == *v58)
        {
          ++v49;
          v59 = v57 - 1;
          if (v58 > v47)
          {
            --v58;
            v50 = v57-- > v25;
            if (v50)
              continue;
          }
          v6 = v59 + 1;
          goto LABEL_75;
        }
        v6 = v57 + 1;
      }
      else
      {
        v11 = v44;
        v10 = v43;
        v7 = v42;
        v23 = v109;
        LODWORD(v19) = v110;
        v24 = v108;
        v51 = v104;
      }
LABEL_75:
      v71 = v6 - v25;
      v72 = *(_OWORD **)(v7 + 24);
      if (v6 <= v114)
      {
        *v72 = *(_OWORD *)v25;
        v76 = *(_QWORD *)(v7 + 24);
        if (v71 <= 0x10)
        {
          *(_QWORD *)(v7 + 24) = v76 + v71;
          v81 = *(_QWORD *)(v7 + 8);
LABEL_89:
          v69 = v51 - v48;
          *(_WORD *)(v81 + 4) = v71;
          *(_DWORD *)v81 = v69 + 3;
          if (v49 - 3 >= 0x10000)
          {
            v83 = (unint64_t)(v81 - *(_QWORD *)v7) >> 3;
            *(_DWORD *)(v7 + 72) = 2;
            *(_DWORD *)(v7 + 76) = v83;
          }
          *(_WORD *)(v81 + 6) = v49 - 3;
          v68 = v81 + 8;
          *(_QWORD *)(v7 + 8) = v81 + 8;
          v25 = &v6[v49];
          v70 = v20;
          goto LABEL_92;
        }
        v77 = (_OWORD *)(v76 + 16);
        v78 = v76 + v71;
        v79 = (__int128 *)(v25 + 16);
        do
        {
          v80 = *v79++;
          *v77++ = v80;
        }
        while ((unint64_t)v77 < v78);
      }
      else
      {
        if (v25 <= v114)
        {
          v73 = (_OWORD *)((char *)v72 + v114 - v25);
          do
          {
            v74 = *(_OWORD *)v25;
            v25 += 16;
            *v72++ = v74;
          }
          while (v72 < v73);
          v25 = v114;
          v72 = v73;
        }
        while (v25 < v6)
        {
          v75 = *v25++;
          *(_BYTE *)v72 = v75;
          v72 = (_OWORD *)((char *)v72 + 1);
        }
      }
      *(_QWORD *)(v7 + 24) += v71;
      v81 = *(_QWORD *)(v7 + 8);
      if (v71 >= 0x10000)
      {
        v82 = (unint64_t)(v81 - *(_QWORD *)v7) >> 3;
        *(_DWORD *)(v7 + 72) = 1;
        *(_DWORD *)(v7 + 76) = v82;
      }
      goto LABEL_89;
    }
    if (v34 >= v19)
      v36 = (char *)v11;
    else
      v36 = v111;
    v37 = ZSTD_count_2segments(v6 + 5, (char *)(v30 + v34 + 4), v11, v36, v112);
    v38 = v35 - (_QWORD)v25;
    v39 = *(_OWORD **)(v7 + 24);
    if (v35 > (unint64_t)v114)
    {
      if (v25 <= v114)
      {
        v41 = (char *)v39 + v114 - v25;
        v60 = v25;
        do
        {
          v61 = *(_OWORD *)v60;
          v60 += 16;
          *v39++ = v61;
        }
        while (v39 < (_OWORD *)v41);
        v40 = v114;
      }
      else
      {
        v40 = v25;
        v41 = *(_BYTE **)(v7 + 24);
      }
      v23 = v109;
      LODWORD(v19) = v110;
      v24 = v108;
      v51 = (_DWORD)v6 - v10;
      if ((unint64_t)v40 < v35)
      {
        v62 = v114;
        if (v25 > v114)
          v62 = v25;
        v63 = v6 - v62 + 1;
        do
        {
          v64 = *v40++;
          *v41++ = v64;
          --v63;
        }
        while (v63);
      }
      goto LABEL_68;
    }
    *v39 = *(_OWORD *)v25;
    v52 = *(_QWORD *)(v7 + 24);
    if (v38 > 0x10)
    {
      v53 = (_OWORD *)(v52 + 16);
      v54 = v52 + v38;
      v55 = (__int128 *)(v25 + 16);
      v23 = v109;
      LODWORD(v19) = v110;
      v24 = v108;
      v51 = (_DWORD)v6 - v10;
      do
      {
        v56 = *v55++;
        *v53++ = v56;
      }
      while ((unint64_t)v53 < v54);
LABEL_68:
      *(_QWORD *)(v7 + 24) += v38;
      v65 = *(_QWORD *)(v7 + 8);
      if (v38 >= 0x10000)
      {
        v66 = (unint64_t)(v65 - *(_QWORD *)v7) >> 3;
        *(_DWORD *)(v7 + 72) = 1;
        *(_DWORD *)(v7 + 76) = v66;
      }
      goto LABEL_71;
    }
    *(_QWORD *)(v7 + 24) = v52 + v38;
    v65 = *(_QWORD *)(v7 + 8);
    v23 = v109;
    LODWORD(v19) = v110;
    v24 = v108;
    v51 = (_DWORD)v6 - v10;
LABEL_71:
    *(_WORD *)(v65 + 4) = v38;
    *(_DWORD *)v65 = 1;
    if (v37 + 1 >= 0x10000)
    {
      v67 = (unint64_t)(v65 - *(_QWORD *)v7) >> 3;
      *(_DWORD *)(v7 + 72) = 2;
      *(_DWORD *)(v7 + 76) = v67;
    }
    *(_WORD *)(v65 + 6) = v37 + 1;
    v68 = v65 + 8;
    *(_QWORD *)(v7 + 8) = v65 + 8;
    v25 = (unsigned __int8 *)(v35 + v37 + 4);
    v69 = v20;
    v70 = v21;
LABEL_92:
    if ((unint64_t)v25 <= v117)
    {
      v84 = v51 + 2;
      switch(v24)
      {
        case 0:
          v85 = *(_QWORD *)(v103 + v51);
          v86 = -1157627904;
          goto LABEL_100;
        case 1:
          v85 = *(_QWORD *)(v103 + v51);
          v86 = -1080360960;
          goto LABEL_100;
        case 2:
          v85 = *(_QWORD *)(v103 + v51);
          v86 = -1079680256;
          goto LABEL_100;
        case 3:
          v85 = *(_QWORD *)(v103 + v51);
          v86 = -1213897629;
LABEL_100:
          v89 = v86 | 0xCF1BBCDC00000000;
          *(_DWORD *)(v23 + 4 * ((v85 * v89) >> v113)) = v84;
          v87 = (_DWORD)v25 - 2;
          v88 = (*(_QWORD *)(v25 - 2) * v89) >> v113;
          break;
        default:
          *(_DWORD *)(v23 + 4 * ((-1640531535 * *(_DWORD *)(v103 + v51)) >> v106)) = v84;
          v87 = (_DWORD)v25 - 2;
          v88 = (-1640531535 * *(_DWORD *)(v25 - 2)) >> v106;
          break;
      }
      *(_DWORD *)(v23 + 4 * v88) = v87 - v10;
      v90 = v51 - v107;
      while (1)
      {
        v21 = v69;
        v69 = v70;
        v91 = ((_DWORD)v25 - v10 - v70);
        v92 = v116;
        if (v91 >= v19)
          v92 = v10;
        if (v69 > v90)
          break;
        if ((v115 - v91) < 3)
          break;
        v93 = v92 + v91;
        if (*(_DWORD *)v93 != *(_DWORD *)v25)
          break;
        if (v91 >= v19)
          v94 = (char *)v11;
        else
          v94 = v111;
        v95 = ZSTD_count_2segments(v25 + 4, (char *)(v93 + 4), v11, v94, v112);
        if (v25 <= v114)
        {
          *(_OWORD *)*(_QWORD *)(v7 + 24) = *(_OWORD *)v25;
          v68 = *(_QWORD *)(v7 + 8);
        }
        *(_WORD *)(v68 + 4) = 0;
        *(_DWORD *)v68 = 1;
        v24 = v108;
        if (v95 + 1 >= 0x10000)
        {
          v96 = (unint64_t)(v68 - *(_QWORD *)v7) >> 3;
          *(_DWORD *)(v7 + 72) = 2;
          *(_DWORD *)(v7 + 76) = v96;
        }
        *(_WORD *)(v68 + 6) = v95 + 1;
        v68 += 8;
        *(_QWORD *)(v7 + 8) = v68;
        v23 = v109;
        LODWORD(v19) = v110;
        switch(v108)
        {
          case 0:
            v97 = *(_QWORD *)v25;
            v98 = -1157627904;
            goto LABEL_120;
          case 1:
            v97 = *(_QWORD *)v25;
            v98 = -1080360960;
            goto LABEL_120;
          case 2:
            v97 = *(_QWORD *)v25;
            v98 = -1079680256;
            goto LABEL_120;
          case 3:
            v97 = *(_QWORD *)v25;
            v98 = -1213897629;
LABEL_120:
            v99 = (v97 * (v98 | 0xCF1BBCDC00000000)) >> v113;
            break;
          default:
            v99 = (-1640531535 * *(_DWORD *)v25) >> v106;
            break;
        }
        *(_DWORD *)(v109 + 4 * v99) = (_DWORD)v25 - v10;
        v25 += v95 + 4;
        v70 = v21;
        v20 = v69;
        v6 = v25;
        if ((unint64_t)v25 > v117)
          goto LABEL_125;
      }
      v20 = v21;
      v21 = v69;
    }
    else
    {
      v20 = v69;
      v21 = v70;
    }
    v6 = v25;
LABEL_125:
    LODWORD(v18) = v107;
  }
  while ((unint64_t)v6 < v117);
  v6 = v25;
  a3 = v101;
LABEL_127:
  *a3 = v20;
  a3[1] = v21;
  return v11 - (_QWORD)v6;
}

BOOL ZDICT_isError(unint64_t a1)
{
  return a1 > 0xFFFFFFFFFFFFFF88;
}

const char *ZDICT_getErrorName(unint64_t a1)
{
  if (a1 >= 0xFFFFFFFFFFFFFF89)
    return ERR_getErrorString(-(int)a1);
  else
    return ERR_getErrorString(0);
}

uint64_t ZDICT_finalizeDictionary(char *a1, unint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  int v19;
  FILE **v20;
  unint64_t v21;
  size_t v22;
  size_t v23;
  size_t v24;
  _DWORD __src[2];
  _BYTE v28[240];
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a9)
    v11 = a9;
  else
    v11 = 3;
  v12 = -70;
  if (a2 >= 0x100 && a2 >= a4)
  {
    __src[0] = -332356553;
    v19 = ZSTD_XXH64(a3, a4, 0) % 0x7FFF8000 + 0x8000;
    if (a11)
      v19 = a11;
    __src[1] = v19;
    if (a10 >= 2)
    {
      v20 = (FILE **)MEMORY[0x1E0C80C10];
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "\r%70s\r", "");
      fflush(*v20);
      fwrite("statistics ... \n", 0x10uLL, 1uLL, *v20);
      fflush(*v20);
    }
    v29 = 0;
    memset(v28, 0, sizeof(v28));
    v21 = ZDICT_analyzeEntropy((uint64_t)v28, 248, v11, a5, a6, a7, (uint64_t)a3, a4, a10);
    v12 = v21;
    if (v21 <= 0xFFFFFFFFFFFFFF88)
    {
      v22 = v21 + 8;
      if (v21 + 8 + a4 <= a2)
        v23 = a4;
      else
        v23 = a2 - (v21 + 8);
      if (v23 > 7)
      {
        v24 = 0;
      }
      else
      {
        if (v21 + 16 > a2)
          return -70;
        v24 = 8 - v23;
      }
      v12 = v23 + v22 + v24;
      memmove(&a1[v22 + v24], a3, v23);
      memcpy(a1, __src, v22);
      bzero(&a1[v22], v24);
    }
  }
  return v12;
}

uint64_t ZDICT_analyzeEntropy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  const void *v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  size_t v41;
  size_t v42;
  unint64_t v43;
  _QWORD *SeqStore;
  _QWORD *v45;
  unsigned __int8 *v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  unsigned int v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  FILE **v62;
  FILE *v63;
  FILE **v64;
  FILE **v65;
  uint64_t v66;
  unint64_t v67;
  FILE **v68;
  uint64_t i;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int32x4_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _WORD *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _WORD *v89;
  unint64_t v90;
  unint64_t v91;
  FILE **v92;
  FILE **v93;
  FILE **v94;
  FILE **v95;
  FILE **v96;
  FILE **v97;
  FILE *v98;
  const char *v99;
  size_t v100;
  FILE **v101;
  FILE **v102;
  FILE **v103;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  unsigned int v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t CCtx;
  __int128 v115;
  uint64_t v116;
  int v117;
  __int128 v118;
  __int128 v119;
  int v120;
  __int128 v121;
  __int128 v122;
  int v123;
  __int128 v124;
  __int128 v125;
  _DWORD v126[1];
  int v127;
  int v128;
  int v129;
  _OWORD v130[4];
  uint64_t v131;
  _OWORD v132[9];
  _OWORD v133[7];
  _OWORD v134[13];
  int v135;
  _OWORD v136[4];
  _OWORD v137[8];
  _BYTE v138[2056];
  _DWORD v139[256];
  _QWORD v140[130];

  v9 = MEMORY[0x1E0C80A78](a1);
  v13 = v12;
  v15 = v14;
  v16 = v11;
  v17 = v10;
  v111 = v18;
  v20 = v19;
  v22 = v21;
  v23 = v9;
  *(_QWORD *)((char *)&v140[127] + 4) = *MEMORY[0x1E0C80C00];
  v24 = __clz(v12 + 0x20000) ^ 0x1F;
  v25 = 0;
  if (v11)
  {
    v26 = v11;
    v27 = v10;
    do
    {
      v28 = *v27++;
      v25 += v28;
      --v26;
    }
    while (v26);
  }
  bzero(v139, 0x400uLL);
  bzero(v138, 0x808uLL);
  memset(v137, 0, 124);
  memset(v136, 0, 62);
  memset(v134, 0, sizeof(v134));
  v135 = 0;
  memset(v133, 0, 106);
  memset(v132, 0, sizeof(v132));
  v131 = 0;
  memset(v130, 0, sizeof(v130));
  if (v24 > 0x1E)
  {
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = -34;
    goto LABEL_102;
  }
  if (v16)
    v33 = v16;
  else
    v33 = 1;
  v34 = v25 / v33;
  memset_pattern16(v139, &unk_1B8629270, 0x400uLL);
  v108 = v24;
  memset_pattern16(v137, &unk_1B8629270, 4 * v24 + 4);
  memset_pattern16(v134, &unk_1B8629270, 0xD4uLL);
  memset_pattern16(v132, &unk_1B8629270, 0x90uLL);
  bzero(v126, 0x1000uLL);
  v129 = 1;
  v128 = 1;
  v127 = 1;
  if (v20)
    v35 = v20;
  else
    v35 = 3;
  v124 = 0u;
  v125 = 0u;
  ZSTD_getParams(v35, v34, v13, (uint64_t)&v117);
  v36 = v117;
  v121 = v118;
  v122 = v119;
  v123 = v120;
  v115 = 0uLL;
  v116 = 0;
  v29 = ZSTD_createCDict_advanced(v15, v13, 1, 1, &v117, &v115);
  CCtx = ZSTD_createCCtx();
  v37 = (char *)malloc_type_malloc(0x20000uLL, 0x53E96F2uLL);
  v31 = v37;
  if (v29 && CCtx && v37)
  {
    v106 = v23;
    v107 = v22;
    v110 = v37;
    v113 = v29;
    if (v16)
    {
      v38 = 0;
      v39 = 0;
      v40 = 1 << v36;
      if (1 << v36 >= 0x20000)
        v40 = 0x20000;
      v41 = v40;
      v112 = v16;
      v109 = v17;
      do
      {
        if (v41 >= v17[v38])
          v42 = v17[v38];
        else
          v42 = v41;
        if (ZSTD_compressBegin_usingCDict(CCtx, v29) >= 0xFFFFFFFFFFFFFF89)
        {
          if (a9)
          {
            v62 = (FILE **)MEMORY[0x1E0C80C10];
            fwrite("warning : ZSTD_compressBegin_usingCDict failed \n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            v63 = *v62;
LABEL_45:
            fflush(v63);
          }
        }
        else
        {
          v43 = ZSTD_compressBlock(CCtx, v110, 0x20000uLL, (char *)(v111 + v39), v42);
          if (v43 < 0xFFFFFFFFFFFFFF89)
          {
            if (v43)
            {
              SeqStore = (_QWORD *)ZSTD_getSeqStore(CCtx);
              v45 = SeqStore;
              v46 = (unsigned __int8 *)SeqStore[2];
              v47 = SeqStore[3];
              if ((unint64_t)v46 < v47)
              {
                v48 = v47 - (_QWORD)v46;
                do
                {
                  v49 = *v46++;
                  ++v139[v49];
                  --v48;
                }
                while (v48);
              }
              v50 = SeqStore[1] - *SeqStore;
              ZSTD_seqToCodes((uint64_t)SeqStore);
              v17 = v109;
              if ((v50 >> 3))
              {
                v51 = (unsigned __int8 *)v45[6];
                v52 = (v50 >> 3);
                v53 = v52;
                do
                {
                  v54 = *v51++;
                  ++*((_DWORD *)v137 + v54);
                  --v53;
                }
                while (v53);
                v55 = (unsigned __int8 *)v45[5];
                v56 = (v50 >> 3);
                do
                {
                  v57 = *v55++;
                  ++*((_DWORD *)v134 + v57);
                  --v56;
                }
                while (v56);
                v58 = (unsigned __int8 *)v45[4];
                do
                {
                  v59 = *v58++;
                  ++*((_DWORD *)v132 + v59);
                  --v52;
                }
                while (v52);
                if ((v50 >> 3) >= 2)
                {
                  v60 = *(_DWORD *)*v45 - 3;
                  v61 = *(_DWORD *)(*v45 + 8) - 3;
                  if (v60 > 0x3FF)
                    v60 = 0;
                  v126[v60] += 3;
                  if (v61 > 0x3FF)
                    v61 = 0;
                  ++v126[v61];
                }
              }
            }
            goto LABEL_46;
          }
          if (a9 >= 3)
          {
            v64 = (FILE **)MEMORY[0x1E0C80C10];
            fprintf((FILE *)*MEMORY[0x1E0C80C10], "warning : could not compress sample size %u \n", v42);
            v63 = *v64;
            goto LABEL_45;
          }
        }
LABEL_46:
        v39 += v17[v38++];
      }
      while (v38 != v112);
    }
    if (a9 >= 4)
    {
      v65 = (FILE **)MEMORY[0x1E0C80C10];
      fwrite("Offset Code Frequencies : \n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      fflush(*v65);
      v66 = 0;
      do
      {
        fprintf(*v65, "%2u :%7u \n", v66, *((_DWORD *)v137 + v66));
        fflush(*v65);
        ++v66;
      }
      while (v108 + 1 != v66);
    }
    v67 = HUF_buildCTable((uint64_t)v138);
    v32 = v67;
    if (v67 < 0xFFFFFFFFFFFFFF89)
    {
      v29 = v113;
      v30 = CCtx;
      if (v67 == 8)
      {
        if (a9 >= 2)
        {
          v68 = (FILE **)MEMORY[0x1E0C80C10];
          fwrite("warning : pathological dataset : literals are not compressible : samples are noisy or too regular \n", 0x63uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          fflush(*v68);
        }
        memset_pattern16(v140, &unk_1B8629260, 0x3FCuLL);
        v139[0] = 4;
        v140[126] = 0x100000001;
        LODWORD(v32) = HUF_buildCTable((uint64_t)v138);
      }
      for (i = 1; i != 1024; ++i)
      {
        *((_QWORD *)&v125 + 1) = __PAIR64__(v126[i], i);
        v70 = 3;
        do
        {
          v71 = v70 - 1;
          if (*((_DWORD *)&v124 + 2 * v71 + 1) >= *((_DWORD *)&v124 + 2 * v70 + 1))
            break;
          v72 = *((_QWORD *)&v124 + v71);
          *((_QWORD *)&v124 + v71) = *((_QWORD *)&v124 + v70);
          *((_QWORD *)&v124 + v70--) = v72;
        }
        while ((_DWORD)v71);
      }
      v73 = 0;
      LODWORD(v74) = 0;
      do
      {
        v74 = (*(_DWORD *)((char *)v137 + v73) + v74);
        v73 += 4;
      }
      while (4 * v108 + 4 != v73);
      v75 = FSE_normalizeCount((__int16 *)v136, 8u, (unsigned int *)v137, v74, v108, 1);
      if (v75 > 0xFFFFFFFFFFFFFF88)
      {
        if (a9)
        {
          v95 = (FILE **)MEMORY[0x1E0C80C10];
          fwrite("FSE_normalizeCount error with offcodeCount \n", 0x2CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          fflush(*v95);
        }
        v32 = v75;
        goto LABEL_101;
      }
      v76 = 0;
      LODWORD(v77) = 0;
      do
      {
        v77 = (*(_DWORD *)((char *)v134 + v76) + v77);
        v76 += 4;
      }
      while (v76 != 212);
      v78 = FSE_normalizeCount((__int16 *)v133, 9u, (unsigned int *)v134, v77, 0x34u, 1);
      if (v78 > 0xFFFFFFFFFFFFFF88)
      {
        if (a9)
        {
          v96 = (FILE **)MEMORY[0x1E0C80C10];
          fwrite("FSE_normalizeCount error with matchLengthCount \n", 0x30uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          fflush(*v96);
        }
        v32 = v78;
        goto LABEL_101;
      }
      v79 = 0;
      v80 = 0uLL;
      do
        v80 = vaddq_s32((int32x4_t)v132[v79++], v80);
      while (v79 != 9);
      v81 = FSE_normalizeCount((__int16 *)v130, 9u, (unsigned int *)v132, vaddvq_s32(v80), 0x23u, 1);
      if (v81 < 0xFFFFFFFFFFFFFF89)
      {
        v82 = HUF_writeCTable(v106, v107, (uint64_t)v138, 0xFFu, v32);
        v32 = v82;
        if (v82 >= 0xFFFFFFFFFFFFFF89)
        {
          if (a9)
          {
            v101 = (FILE **)MEMORY[0x1E0C80C10];
            fwrite("HUF_writeCTable error \n", 0x17uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            fflush(*v101);
          }
          goto LABEL_101;
        }
        v83 = FSE_writeNCount((_WORD *)(v106 + v82), v107 - v82, (uint64_t)v136, 30, v75);
        v84 = v83;
        if (v83 >= 0xFFFFFFFFFFFFFF89)
        {
          if (a9)
          {
            v102 = (FILE **)MEMORY[0x1E0C80C10];
            fwrite("FSE_writeNCount error with offcodeNCount \n", 0x2AuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            fflush(*v102);
          }
          v32 = v84;
        }
        else
        {
          v85 = (_WORD *)(v106 + v32 + v83);
          v86 = v107 - v32 - v83;
          v87 = FSE_writeNCount(v85, v86, (uint64_t)v133, 52, v78);
          v88 = v87;
          if (v87 < 0xFFFFFFFFFFFFFF89)
          {
            v89 = (_WORD *)((char *)v85 + v87);
            v90 = v86 - v87;
            v91 = FSE_writeNCount(v89, v86 - v87, (uint64_t)v130, 35, v81);
            v81 = v91;
            if (v91 < 0xFFFFFFFFFFFFFF89)
            {
              if (v90 - v91 <= 0xB)
              {
                v30 = CCtx;
                if (a9)
                {
                  v92 = (FILE **)MEMORY[0x1E0C80C10];
                  fwrite("not enough space to write RepOffsets \n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
                  fflush(*v92);
                }
                v32 = -70;
                goto LABEL_101;
              }
              v105 = (char *)v89 + v91;
              *(_QWORD *)v105 = 0x400000001;
              *((_DWORD *)v105 + 2) = 8;
              v32 += v84 + v88 + v91 + 12;
              goto LABEL_100;
            }
            v30 = CCtx;
            if (a9)
            {
              v97 = (FILE **)MEMORY[0x1E0C80C10];
              v98 = (FILE *)*MEMORY[0x1E0C80C10];
              v99 = "FSE_writeNCount error with litlengthNCount \n";
              v100 = 44;
              goto LABEL_90;
            }
            goto LABEL_91;
          }
          if (a9)
          {
            v103 = (FILE **)MEMORY[0x1E0C80C10];
            fwrite("FSE_writeNCount error with matchLengthNCount \n", 0x2EuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
            fflush(*v103);
          }
          v32 = v88;
        }
LABEL_100:
        v30 = CCtx;
        goto LABEL_101;
      }
      if (a9)
      {
        v97 = (FILE **)MEMORY[0x1E0C80C10];
        v98 = (FILE *)*MEMORY[0x1E0C80C10];
        v99 = "FSE_normalizeCount error with litLengthCount \n";
        v100 = 46;
LABEL_90:
        fwrite(v99, v100, 1uLL, v98);
        fflush(*v97);
      }
LABEL_91:
      v32 = v81;
LABEL_101:
      v31 = v110;
      goto LABEL_102;
    }
    v29 = v113;
    v30 = CCtx;
    v31 = v110;
    if (a9)
    {
      v94 = (FILE **)MEMORY[0x1E0C80C10];
      fwrite(" HUF_buildCTable error \n", 0x18uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      fflush(*v94);
    }
  }
  else
  {
    if (a9)
    {
      v93 = (FILE **)MEMORY[0x1E0C80C10];
      fwrite("Not enough memory \n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      fflush(*v93);
    }
    v32 = -64;
    v30 = CCtx;
  }
LABEL_102:
  ZSTD_freeCDict(v29);
  ZSTD_freeCCtx(v30);
  free(v31);
  return v32;
}

uint64_t ZDICT_trainFromBuffer(void *a1, unint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5)
{
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  v7 = 0u;
  v8 = 0;
  memset(v6, 0, sizeof(v6));
  DWORD1(v6[0]) = 8;
  HIDWORD(v6[0]) = 4;
  HIDWORD(v7) = 3;
  return ZDICT_optimizeTrainFromBuffer_fastCover(a1, a2, a3, a4, a5, (uint64_t)v6);
}

const char *ERR_getErrorString(int a1)
{
  const char *result;

  if (a1 > 29)
  {
    switch(a1)
    {
      case 30:
        result = "Dictionary is corrupted";
        break;
      case 31:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 41:
      case 43:
      case 45:
      case 47:
LABEL_20:
        result = "Unspecified error code";
        break;
      case 32:
        result = "Dictionary mismatch";
        break;
      case 34:
        result = "Cannot create Dictionary from provided samples";
        break;
      case 40:
        result = "Unsupported parameter";
        break;
      case 42:
        result = "Parameter is out of bound";
        break;
      case 44:
        result = "tableLog requires too much memory : unsupported";
        break;
      case 46:
        result = "Unsupported max Symbol Value : too large";
        break;
      case 48:
        result = "Specified maxSymbolValue is too small";
        break;
      default:
        switch(a1)
        {
          case '<':
            result = "Operation not authorized at current processing stage";
            break;
          case '=':
          case '?':
          case 'A':
          case 'C':
          case 'D':
          case 'E':
          case 'G':
          case 'I':
            goto LABEL_20;
          case '>':
            result = "Context should be init first";
            break;
          case '@':
            result = "Allocation error : not enough memory";
            break;
          case 'B':
            result = "workSpace buffer is not large enough";
            break;
          case 'F':
            result = "Destination buffer is too small";
            break;
          case 'H':
            result = "Src size is incorrect";
            break;
          case 'J':
            result = "Operation on NULL destination buffer";
            break;
          default:
            switch(a1)
            {
              case 'd':
                result = "Frame index is too large";
                break;
              case 'f':
                result = "An I/O error occurred when reading/seeking";
                break;
              case 'h':
                result = "Destination buffer is wrong";
                break;
              case 'i':
                result = "Source buffer is wrong";
                break;
              default:
                goto LABEL_20;
            }
            break;
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 10:
        return "Unknown frame descriptor";
      case 11:
      case 13:
      case 15:
      case 17:
      case 18:
      case 19:
      case 21:
        goto LABEL_20;
      case 12:
        return "Version not supported";
      case 14:
        return "Unsupported frame parameter";
      case 16:
        return "Frame requires too much memory for decoding";
      case 20:
        return "Corrupted block detected";
      case 22:
        return "Restored data doesn't match checksum";
      default:
        if (a1)
        {
          if (a1 != 1)
            goto LABEL_20;
          result = "Error (generic)";
        }
        else
        {
          result = "No error detected";
        }
        break;
    }
  }
  return result;
}

uint64_t ZSTD_getcBlockSize(unsigned __int16 *a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;

  if (a2 < 3)
    return -72;
  v4 = *a1;
  v5 = (v4 & 0xFFF8 | (*((unsigned __int8 *)a1 + 2) << 16)) >> 3;
  result = (v4 >> 1) & 3;
  *a3 = result;
  a3[1] = v4 & 1;
  a3[2] = v5;
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result == 3)
      return -20;
    else
      return v5;
  }
  return result;
}

uint64_t ZSTD_decodeLiteralsBlock(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 3)
    __asm { BR              X9 }
  return -20;
}

void sub_1B832E808(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  unint64_t v6;
  _QWORD *v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int v16;
  void *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  size_t v22;
  char *v23;

  v10 = (v6 >> 2) & 3;
  v11 = 0x20000;
  if (a5 < 0x20000)
    v11 = a5;
  if (v10 == 1)
  {
    v12 = (unint64_t)*v8 >> 4;
    v13 = 2;
  }
  else if (v10 == 3)
  {
    v12 = (*v8 | ((unint64_t)*((unsigned __int8 *)v8 + 2) << 16)) >> 4;
    v13 = 3;
  }
  else
  {
    v12 = v6 >> 3;
    v13 = 1;
  }
  if (a4)
    v14 = 1;
  else
    v14 = v12 == 0;
  v15 = !v14;
  if (v11 >= v12 && (v15 & 1) == 0)
  {
    if (a6 || v12 + 131136 >= a5)
    {
      if (v12 <= 0x10000)
      {
        v16 = 0;
        v19 = 0;
        v17 = (char *)v7 + 30348;
        v7[3791] = (char *)v7 + 30348;
        v18 = (uint64_t)v7 + v12 + 30348;
      }
      else
      {
        v17 = (void *)(a4 + v11 - v12 + 65504);
        v18 = a4 + v11 - 32;
        v7[3791] = v17;
        v19 = 2;
        v16 = 1;
      }
    }
    else
    {
      v16 = 0;
      v17 = (void *)(a4 + 131104);
      v7[3791] = a4 + 131104;
      v18 = a4 + 131104 + v12;
      v19 = 1;
    }
    v7[3792] = v18;
    *(_DWORD *)(v9 + 352) = v19;
    if (v13 + v12 + 32 <= a3)
    {
      v23 = (char *)v8 + v13;
      v7[3764] = v23;
      v7[3768] = v12;
      v7[3792] = &v23[v12];
      *(_DWORD *)(v9 + 352) = 0;
    }
    else
    {
      if (v13 + v12 > a3)
        JUMPOUT(0x1B832E7BCLL);
      v20 = (char *)v8 + v13;
      if (v16)
      {
        memcpy(v17, v20, v12 - 0x10000);
        v17 = (char *)v7 + 30348;
        v21 = &v20[v12 - 0x10000];
        v22 = 0x10000;
      }
      else
      {
        v21 = v20;
        v22 = v12;
      }
      memcpy(v17, v21, v22);
      v7[3764] = v7[3791];
      v7[3768] = v12;
    }
  }
  JUMPOUT(0x1B832E7C0);
}

int *ZSTD_buildFSETable(int *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  int v15;
  __int16 v16;
  _DWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int i;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;

  v7 = result + 2;
  v8 = (1 << a6);
  v9 = (v8 - 1);
  v10 = (a3 + 1);
  if (a3 == -1)
  {
    *result = 1;
    result[1] = a6;
    v11 = (v8 >> 3) + (v8 >> 1) + 3;
LABEL_16:
    v26 = 0;
    v27 = 0;
    do
    {
      v7[2 * (v27 & v9) + 1] = *(unsigned __int8 *)(a7 + v26 + 106);
      v7[2 * (((_DWORD)v27 + v11) & v9) + 1] = *(unsigned __int8 *)(a7 + v26 + 107);
      v27 = ((_DWORD)v27 + 2 * v11) & v9;
      v26 += 2;
    }
    while (v26 < v8);
    goto LABEL_26;
  }
  v12 = 0;
  v13 = 1;
  v14 = v8 - 1;
  do
  {
    v15 = *(__int16 *)(a2 + 2 * v12);
    if (v15 == -1)
    {
      v17 = &v7[2 * v14--];
      v17[1] = v12;
      v16 = 1;
    }
    else
    {
      v16 = *(_WORD *)(a2 + 2 * v12);
      if (0x10000 << (a6 - 1) >> 16 <= v15)
        v13 = 0;
    }
    *(_WORD *)(a7 + 2 * v12++) = v16;
  }
  while (v10 != v12);
  *result = v13;
  result[1] = a6;
  v18 = v8 >> 3;
  if (v14 == (_DWORD)v9)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    do
    {
      v22 = *(__int16 *)(a2 + 2 * v19);
      v23 = *(unsigned __int16 *)(a2 + 2 * v19);
      *(_QWORD *)(a7 + 106 + v21) = v20;
      if (v22 >= 9)
      {
        v24 = 114;
        do
        {
          *(_QWORD *)(a7 + v21 + v24) = v20;
          v25 = v24 - 98;
          v24 += 8;
        }
        while (v25 < v23);
      }
      v21 += (__int16)v23;
      ++v19;
      v20 += 0x101010101010101;
    }
    while (v19 != v10);
    v11 = v18 + 3 + (v8 >> 1);
    goto LABEL_16;
  }
  v28 = 0;
  v29 = 0;
  v30 = v18 + (v8 >> 1) + 3;
  do
  {
    v31 = *(__int16 *)(a2 + 2 * v28);
    if (v31 >= 1)
    {
      for (i = 0; i != v31; ++i)
      {
        v7[2 * v29 + 1] = v28;
        do
          v29 = (v30 + v29) & v9;
        while (v29 > v14);
      }
    }
    ++v28;
  }
  while (v28 != v10);
LABEL_26:
  v33 = result + 3;
  v34 = (1 << a6);
  do
  {
    v35 = *v33;
    v36 = *(unsigned __int16 *)(a7 + 2 * v35);
    *(_WORD *)(a7 + 2 * v35) = v36 + 1;
    v37 = a6 + 1 + (__clz(v36) ^ 0xFFFFFFE0);
    *((_BYTE *)v33 - 1) = v37;
    *((_WORD *)v33 - 2) = (v36 << v37) - v8;
    *((_BYTE *)v33 - 2) = *(_BYTE *)(a5 + v35);
    *v33 = *(_DWORD *)(a4 + 4 * v35);
    v33 += 2;
    --v34;
  }
  while (v34);
  return result;
}

uint64_t ZSTD_decodeSeqHeaders(uint64_t a1, int *a2, unsigned __int8 *a3, uint64_t a4)
{
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;

  if (!a4)
    return -72;
  v5 = a3 + 1;
  v6 = *a3;
  if (*a3)
  {
    if ((v6 & 0x80) != 0)
    {
      if (v6 == 255)
      {
        if (a4 < 3)
          return -72;
        v5 = a3 + 3;
        v6 = *(unsigned __int16 *)(a3 + 1) + 32512;
      }
      else
      {
        if (a4 < 2)
          return -72;
        v5 = a3 + 2;
        v6 = (a3[1] | (v6 << 8)) - 0x8000;
      }
    }
    v8 = &a3[a4];
    *a2 = v6;
    v9 = v5 + 1;
    if (v5 + 1 > &a3[a4])
      return -72;
    v11 = (int *)(a1 + 29996);
    v12 = *v5;
    v13 = ZSTD_buildSeqTable(a1 + 32, (_QWORD *)a1, v12 >> 6, 0x23u, 9u, v9, v8 - v9, (uint64_t)&LL_base_0, (uint64_t)&LL_bits_1, (uint64_t)&LL_defaultDTable, *(_DWORD *)(a1 + 29996), *(_DWORD *)(a1 + 30188), v6, a1 + 27324);
    if (v13 > 0xFFFFFFFFFFFFFF88)
      return -20;
    v14 = &v9[v13];
    v15 = ZSTD_buildSeqTable(a1 + 4136, (_QWORD *)(a1 + 16), (v12 >> 4) & 3, 0x1Fu, 8u, v14, v8 - v14, (uint64_t)&OF_base_0, (uint64_t)&OF_bits_0, (uint64_t)&OF_defaultDTable, *v11, *(_DWORD *)(a1 + 30188), v6, a1 + 27324);
    if (v15 > 0xFFFFFFFFFFFFFF88)
      return -20;
    v16 = &v14[v15];
    v17 = ZSTD_buildSeqTable(a1 + 6192, (_QWORD *)(a1 + 8), (v12 >> 2) & 3, 0x34u, 9u, v16, v8 - v16, (uint64_t)&ML_base_0, (uint64_t)&ML_bits_1, (uint64_t)&ML_defaultDTable, *v11, *(_DWORD *)(a1 + 30188), v6, a1 + 27324);
    if (v17 > 0xFFFFFFFFFFFFFF88)
      return -20;
    else
      return &v16[v17] - a3;
  }
  else
  {
    *a2 = 0;
    if (a4 == 1)
      return 1;
    else
      return -72;
  }
}

uint64_t ZSTD_buildSeqTable(uint64_t a1, _QWORD *a2, int a3, unsigned int a4, unsigned int a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, uint64_t a14)
{
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unsigned int v32;
  unsigned int v33;
  _OWORD v34[7];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v33 = a4;
  switch(a3)
  {
    case 0:
      v18 = 0;
      *a2 = a10;
      break;
    case 1:
      if (a7)
      {
        v19 = *a6;
        if (v19 > a4)
          goto LABEL_18;
        v20 = *(_DWORD *)(a8 + 4 * v19);
        v21 = *(_BYTE *)(a9 + v19);
        *(_QWORD *)a1 = 0;
        *(_BYTE *)(a1 + 11) = 0;
        *(_WORD *)(a1 + 8) = 0;
        *(_BYTE *)(a1 + 10) = v21;
        *(_DWORD *)(a1 + 12) = v20;
        *a2 = a1;
        v18 = 1;
      }
      else
      {
        v18 = -72;
      }
      break;
    case 2:
      v32 = 0;
      memset(v34, 0, 106);
      v22 = FSE_readNCount(v34, &v33, &v32, a6, a7);
      if (v22 > 0xFFFFFFFFFFFFFF88 || v32 > a5)
        goto LABEL_18;
      v18 = v22;
      ZSTD_buildFSETable((int *)a1, (uint64_t)v34, v33, a8, a9, v32, a14);
      *a2 = a1;
      break;
    case 3:
      if (a11)
      {
        if (a12)
          v23 = a13 < 25;
        else
          v23 = 1;
        if (!v23)
        {
          v24 = 0;
          do
          {
            _X11 = *a2 + v24;
            __asm { PRFM            #2, [X11] }
            v24 += 64;
          }
          while (v24 < 8 * (unint64_t)((1 << a5) + 1));
        }
        v18 = 0;
      }
      else
      {
LABEL_18:
        v18 = -20;
      }
      break;
    default:
      v18 = -1;
      break;
  }
  return v18;
}

uint64_t ZSTD_decompressBlock_internal(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  unint64_t v6;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  unsigned __int8 *v19;
  unint64_t v20;
  _DWORD *v21;
  int v22;
  char *v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v42;
  int64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int16 *v66;
  uint64_t v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int16 *v102;
  unsigned __int16 *v103;
  unsigned __int16 *v104;
  unint64_t v105;
  uint64_t v106;
  int v107;
  int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unsigned int v120;
  unint64_t v121;
  uint64_t v122;
  int v123;
  int v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  unint64_t *v128;
  unint64_t v129;
  char *v130;
  char *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  size_t v135;
  unint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  const void *v141;
  char *v142;
  __int128 v143;
  unint64_t *v144;
  size_t v145;
  unint64_t v146;
  unint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  const void *v155;
  char *v156;
  __int128 v157;
  char *v158;
  size_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  const void *v165;
  char *v166;
  __int128 v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  unint64_t v185;
  char *v186;
  uint64_t v187;
  char *v188;
  __int128 *v189;
  __int128 v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  __int128 *v197;
  __int128 v198;
  char *v199;
  __int128 *v200;
  __int128 v201;
  uint64_t v202;
  char *v203;
  char *v204;
  __int128 *v205;
  char *v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  char *v210;
  char *v211;
  __int128 *v212;
  char *v213;
  uint64_t v214;
  __int128 v215;
  char *v216;
  __int128 *v217;
  char *v218;
  uint64_t v219;
  __int128 v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  unint64_t *v225;
  char *v226;
  unint64_t v227;
  char *v228;
  char *v229;
  unint64_t v230;
  size_t v231;
  unint64_t v232;
  char *v234;
  char *v235;
  char *v236;
  int64_t v237;
  const void *v238;
  char *v239;
  __int128 v240;
  unint64_t v241;
  size_t v242;
  unint64_t v243;
  char *v244;
  char *v245;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  const void *v252;
  char *v253;
  __int128 v254;
  char *v255;
  unint64_t v256;
  char *v258;
  uint64_t v259;
  char *v260;
  __int128 v261;
  char *v262;
  uint64_t v263;
  char *v264;
  __int128 *v265;
  __int128 v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  char *v270;
  __int128 *v271;
  __int128 v272;
  char *v273;
  __int128 *v274;
  __int128 v275;
  uint64_t v276;
  char *v277;
  char *v278;
  __int128 *v279;
  char *v280;
  uint64_t v281;
  __int128 v282;
  uint64_t v283;
  char *v284;
  char *v285;
  __int128 *v286;
  char *v287;
  uint64_t v288;
  __int128 v289;
  _OWORD *v290;
  __int128 *v291;
  char *v292;
  uint64_t v293;
  __int128 v294;
  uint64_t i;
  int v296;
  unint64_t v297;
  size_t v298;
  unint64_t v299;
  int v300;
  uint64_t v301;
  unint64_t v302;
  _OWORD *v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  unint64_t v307;
  int v308;
  uint64_t v309;
  char *v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  int v316;
  __int128 v317;
  __int128 v318;
  _OWORD v319[5];
  char *v320;
  unint64_t v321;
  size_t v322;
  unint64_t v323;
  __int128 v324;
  _BYTE v325[184];
  uint64_t v326;

  v326 = *MEMORY[0x1E0C80C00];
  if (a5 >> 17)
    return -72;
  v13 = ZSTD_decodeLiteralsBlock(a1, a4, a5);
  v6 = v13;
  if (v13 > 0xFFFFFFFFFFFFFF88)
    return v6;
  v14 = a4 + v13;
  v15 = a5 - v13;
  v16 = *(_DWORD *)(a1 + 30188);
  v316 = 0;
  v17 = ZSTD_decodeSeqHeaders(a1, &v316, (unsigned __int8 *)(a4 + v13), a5 - v13);
  v6 = v17;
  if (v17 > 0xFFFFFFFFFFFFFF88)
    return v6;
  v18 = v316;
  if (!a2 && v316 > 0)
    return -70;
  v19 = (unsigned __int8 *)(v14 + v17);
  v20 = v15 - v17;
  if (!v16)
  {
    v21 = (_DWORD *)(a1 + 29996);
    if (a6)
    {
      if (*(_QWORD *)(a1 + 29936) >= 0x1000001uLL && v316 > 8)
        goto LABEL_15;
    }
    else if (v316 >= 9)
    {
LABEL_15:
      v24 = 0;
      v25 = *(_QWORD *)(a1 + 16);
      v26 = *(_DWORD *)(v25 + 4);
      v27 = v25 + 8;
      v28 = 1;
      do
      {
        if (*(unsigned __int8 *)(v27 + 8 * (v28 - 1) + 2) > 0x16u)
          ++v24;
      }
      while (!(v28++ >> v26));
      *(_DWORD *)(a1 + 30188) = 0;
      if ((v24 << (8 - v26)) >= 7)
        goto LABEL_10;
LABEL_45:
      if (*(_DWORD *)(a1 + 30344) == 2)
        return ZSTD_decompressSequencesSplitLitBuffer((uint64_t *)a1, a2, a3, v19, v20, v18);
      else
        return ZSTD_decompressSequences(a1, a2, a3, v19, v20, v18);
    }
    *(_DWORD *)(a1 + 30188) = 0;
    goto LABEL_45;
  }
  v21 = (_DWORD *)(a1 + 29996);
  *(_DWORD *)(a1 + 30188) = 0;
LABEL_10:
  v22 = v21[87];
  if (v22 == 1)
    v23 = *(char **)(a1 + 30328);
  else
    v23 = &a2[a3];
  v30 = *(char **)(a1 + 30112);
  v320 = v30;
  v31 = *(_QWORD *)(a1 + 30336);
  if (!v18)
  {
    v35 = a2;
    goto LABEL_31;
  }
  v32 = 0;
  v33 = *(char **)(a1 + 29896);
  v309 = *(_QWORD *)(a1 + 29904);
  v315 = *(_QWORD *)(a1 + 29912);
  memset(v325, 0, 176);
  v324 = 0u;
  v318 = 0u;
  memset(v319, 0, sizeof(v319));
  *v21 = 1;
  v317 = 0u;
  do
  {
    *((_QWORD *)&v319[3] + v32 + 1) = *(unsigned int *)(a1 + 26684 + 4 * v32);
    ++v32;
  }
  while (v32 != 3);
  if (v18 >= 8)
    v34 = 8;
  else
    v34 = v18;
  if (v15 == v17)
    return -20;
  *((_QWORD *)&v318 + 1) = v14 + v17;
  *(_QWORD *)&v319[0] = v19 + 8;
  if (v20 < 8)
  {
    v42 = *v19;
    *(_QWORD *)&v318 = v14 + v17;
    *(_QWORD *)&v317 = v42;
    switch(v20)
    {
      case 2uLL:
        goto LABEL_55;
      case 3uLL:
        goto LABEL_54;
      case 4uLL:
        goto LABEL_53;
      case 5uLL:
        goto LABEL_52;
      case 6uLL:
        goto LABEL_51;
      case 7uLL:
        v42 |= (unint64_t)v19[6] << 48;
LABEL_51:
        v42 += (unint64_t)v19[5] << 40;
LABEL_52:
        v42 += (unint64_t)v19[4] << 32;
LABEL_53:
        v42 += (unint64_t)v19[3] << 24;
LABEL_54:
        v42 += (unint64_t)v19[2] << 16;
LABEL_55:
        *(_QWORD *)&v317 = v42 + ((unint64_t)v19[1] << 8);
        break;
      default:
        break;
    }
    if (!v19[v20 - 1])
      return -20;
    DWORD2(v317) = __clz(v19[v20 - 1]) - 8 * v20 + 41;
  }
  else
  {
    v40 = *(_QWORD *)(a4 + a5 - 8);
    *(_QWORD *)&v318 = a4 + a5 - 8;
    *(_QWORD *)&v317 = v40;
    if (!HIBYTE(v40))
      return -20;
    DWORD2(v317) = __clz(HIBYTE(v40)) - 23;
    if (v20 > 0xFFFFFFFFFFFFFF88)
      return -20;
  }
  v296 = v34;
  v311 = v31;
  v303 = (_OWORD *)(a1 + 30348);
  v308 = v18;
  v301 = (uint64_t)v23;
  v43 = a2 - v33;
  ZSTD_initFseState((_QWORD *)v319 + 1, (uint64_t)&v317, *(_QWORD *)a1);
  ZSTD_initFseState((_QWORD *)&v319[1] + 1, (uint64_t)&v317, *(_QWORD *)(a1 + 16));
  ZSTD_initFseState((_QWORD *)&v319[2] + 1, (uint64_t)&v317, *(_QWORD *)(a1 + 8));
  v44 = DWORD2(v317);
  v310 = v33;
  if (DWORD2(v317) > 0x40)
  {
    LODWORD(v45) = 0;
    goto LABEL_112;
  }
  v46 = 0;
  v48 = (unint64_t *)*((_QWORD *)&v318 + 1);
  v47 = (unint64_t *)v318;
  v49 = v317;
  v45 = v296 & ~(v296 >> 31);
  v50 = *((_QWORD *)&v319[3] + 1);
  v51 = *(_QWORD *)&v319[4];
  v52 = *((_QWORD *)&v319[0] + 1);
  v53 = *(_QWORD *)&v319[0];
  v54 = *((_QWORD *)&v319[1] + 1);
  v312 = *(_QWORD *)&v319[1];
  v55 = *((_QWORD *)&v319[2] + 1);
  v56 = *(_QWORD *)&v319[3];
  v57 = (unint64_t *)v325;
  v58 = *(_QWORD *)&v319[2];
  do
  {
    if ((unint64_t)v47 >= v53)
    {
      v47 = (unint64_t *)((char *)v47 - (v44 >> 3));
      *(_QWORD *)&v318 = v47;
      v44 &= 7u;
LABEL_68:
      DWORD2(v317) = v44;
      v49 = *v47;
      *(_QWORD *)&v317 = *v47;
      goto LABEL_69;
    }
    if (v47 != v48)
    {
      v59 = v44 >> 3;
      if ((unint64_t *)((char *)v47 - v59) >= v48)
        v59 = v59;
      else
        v59 = ((_DWORD)v47 - (_DWORD)v48);
      v47 = (unint64_t *)((char *)v47 - v59);
      *(_QWORD *)&v318 = v47;
      v44 -= 8 * v59;
      goto LABEL_68;
    }
    v47 = v48;
LABEL_69:
    if (v45 == v46)
    {
      v97 = a1 + 29996;
      v98 = v308;
      goto LABEL_113;
    }
    v60 = v43;
    v61 = v45;
    v62 = (unsigned __int16 *)(v312 + 8 * v52);
    v63 = (unsigned __int16 *)(v56 + 8 * v55);
    v64 = *((unsigned int *)v63 + 1);
    v65 = *((unsigned int *)v62 + 1);
    v66 = (unsigned __int16 *)(v58 + 8 * v54);
    v67 = *((unsigned int *)v66 + 1);
    v68 = *((unsigned __int8 *)v62 + 2);
    v69 = *((unsigned __int8 *)v63 + 2);
    v70 = *((unsigned __int8 *)v66 + 2);
    v71 = *v62;
    v72 = *v63;
    v73 = *v66;
    v74 = *((unsigned __int8 *)v62 + 3);
    v75 = *((unsigned __int8 *)v63 + 3);
    v76 = *((unsigned __int8 *)v66 + 3);
    if (v70 >= 2)
    {
      v77 = v49 << v44 >> -(char)v70;
      v44 += v70;
      *((_QWORD *)&v319[4] + 1) = v51;
      v51 = v50;
      v50 = v77 + v67;
      goto LABEL_72;
    }
    if (!*((_BYTE *)v66 + 2))
    {
      v50 = *((_QWORD *)&v319[3] + ((_DWORD)v65 == 0) + 1);
      v51 = *((_QWORD *)&v319[3] + ((_DWORD)v65 != 0) + 1);
      goto LABEL_72;
    }
    if ((_DWORD)v65)
      v92 = v67;
    else
      v92 = (v67 + 1);
    v93 = v49 << v44++;
    DWORD2(v317) = v44;
    v94 = v92 + (v93 >> 63);
    if (v94 == 3)
    {
      if (v50 == 1)
        v95 = 1;
      else
        v95 = v50 - 1;
    }
    else
    {
      if (*((_QWORD *)&v319[3] + v94 + 1))
        v95 = *((_QWORD *)&v319[3] + v94 + 1);
      else
        v95 = 1;
      if (v94 == 1)
        goto LABEL_107;
    }
    *((_QWORD *)&v319[4] + 1) = v51;
LABEL_107:
    v51 = v50;
    v50 = v95;
LABEL_72:
    *((_QWORD *)&v319[3] + 1) = v50;
    *(_QWORD *)&v319[4] = v51;
    v78 = (v49 << v44 >> -(char)v69) + v64;
    if (v69)
    {
      v44 += v69;
      v64 = v78;
    }
    if ((v69 + v68 + v70) >= 0x1Fu && v44 <= 0x40)
    {
      if ((unint64_t)v47 >= v53)
      {
        v47 = (unint64_t *)((char *)v47 - (v44 >> 3));
        *(_QWORD *)&v318 = v47;
        v44 &= 7u;
LABEL_93:
        v49 = *v47;
        *(_QWORD *)&v317 = *v47;
        goto LABEL_75;
      }
      if (v47 != v48)
      {
        v91 = v44 >> 3;
        if ((unint64_t *)((char *)v47 - v91) >= v48)
          v91 = v91;
        else
          v91 = ((_DWORD)v47 - (_DWORD)v48);
        v47 = (unint64_t *)((char *)v47 - v91);
        *(_QWORD *)&v318 = v47;
        v44 -= 8 * v91;
        goto LABEL_93;
      }
      v47 = v48;
    }
LABEL_75:
    v79 = (v49 << v44 >> -(char)v68) + v65;
    if (v68)
      v44 += v68;
    else
      v79 = v65;
    v80 = v44 + v74;
    v52 = ((v49 >> -(char)v80) & BIT_mask[v74]) + v71;
    v81 = v80 + v75;
    v55 = ((v49 >> -(char)v81) & BIT_mask[v75]) + v72;
    *((_QWORD *)&v319[2] + 1) = v55;
    v44 = v81 + v76;
    v82 = (v49 >> -(char)v44) & BIT_mask[v76];
    DWORD2(v317) = v44;
    v54 = v82 + v73;
    *((_QWORD *)&v319[0] + 1) = v52;
    *((_QWORD *)&v319[1] + 1) = v54;
    v83 = v79 + v60;
    v33 = v310;
    v84 = v315;
    if (v50 <= v79 + v60)
      v84 = (unint64_t)v310;
    _X6 = v84 + v83 - v50;
    __asm
    {
      PRFM            #0, [X6]
      PRFM            #0, [X6,#0x40]
    }
    v43 = v83 + v64;
    *(v57 - 2) = v79;
    *(v57 - 1) = v64;
    *v57 = v50;
    v57 += 3;
    ++v46;
    v45 = v61;
  }
  while (v44 <= 0x40);
  LODWORD(v45) = v46;
LABEL_112:
  v97 = a1 + 29996;
  v98 = v308;
  if ((int)v45 < v296)
    return -20;
LABEL_113:
  v307 = v301 - 32;
  v302 = a1 + 95884;
  v35 = a2;
  while (2)
  {
    if (v44 < 0x41)
    {
      v99 = (_QWORD *)v318;
      if ((unint64_t)v318 >= *(_QWORD *)&v319[0])
      {
        v99 = (_QWORD *)(v318 - (v44 >> 3));
        *(_QWORD *)&v318 = v99;
        v44 &= 7u;
        goto LABEL_122;
      }
      if ((_QWORD)v318 != *((_QWORD *)&v318 + 1))
      {
        v100 = v44 >> 3;
        if ((unint64_t)(v318 - v100) >= *((_QWORD *)&v318 + 1))
          v101 = v100;
        else
          v101 = (v318 - DWORD2(v318));
        v99 = (_QWORD *)(v318 - v101);
        *(_QWORD *)&v318 = v318 - v101;
        v44 -= 8 * v101;
LABEL_122:
        DWORD2(v317) = v44;
        *(_QWORD *)&v317 = *v99;
      }
      if ((int)v45 >= v98)
        goto LABEL_251;
      v102 = (unsigned __int16 *)(*(_QWORD *)&v319[1] + 8 * *((_QWORD *)&v319[0] + 1));
      v103 = (unsigned __int16 *)(*(_QWORD *)&v319[3] + 8 * *((_QWORD *)&v319[2] + 1));
      v104 = (unsigned __int16 *)(*(_QWORD *)&v319[2] + 8 * *((_QWORD *)&v319[1] + 1));
      v313 = *((unsigned int *)v103 + 1);
      v105 = *((unsigned int *)v102 + 1);
      v106 = *((unsigned int *)v104 + 1);
      v107 = *((unsigned __int8 *)v102 + 2);
      v108 = *((unsigned __int8 *)v103 + 2);
      v109 = *((unsigned __int8 *)v104 + 2);
      v110 = *v102;
      v111 = *v103;
      v112 = *v104;
      v113 = *((unsigned __int8 *)v102 + 3);
      v114 = *((unsigned __int8 *)v103 + 3);
      v115 = *((unsigned __int8 *)v104 + 3);
      if (v109 >= 2)
      {
        v116 = (_QWORD)v317 << v44 >> -(char)v109;
        v44 += v109;
        v117 = v116 + v106;
        v319[4] = *(_OWORD *)((char *)&v319[3] + 8);
        *((_QWORD *)&v319[3] + 1) = v116 + v106;
        if (!v108)
          goto LABEL_126;
LABEL_186:
        v180 = (_QWORD)v317 << v44 >> -(char)v108;
        v44 += v108;
        v313 += v180;
LABEL_126:
        if ((v108 + v107 + v109) < 0x1Fu)
        {
LABEL_127:
          v118 = ((_QWORD)v317 << v44 >> -(char)v107) + v105;
          _ZF = v107 == 0;
          if (v107)
            v120 = v44 + v107;
          else
            v120 = v44;
          if (_ZF)
            v121 = v105;
          else
            v121 = v118;
          v122 = (((unint64_t)v317 >> -(char)(v120 + v113)) & BIT_mask[v113]) + v110;
          v123 = v120 + v113 + v114;
          *((_QWORD *)&v319[2] + 1) = (((unint64_t)v317 >> -(char)v123) & BIT_mask[v114]) + v111;
          v124 = v123 + v115;
          v125 = (unint64_t)v317 >> -(char)(v123 + v115);
          v126 = BIT_mask[v115];
          DWORD2(v317) = v124;
          *((_QWORD *)&v319[0] + 1) = v122;
          *((_QWORD *)&v319[1] + 1) = (v125 & v126) + v112;
          if (*(_DWORD *)(v97 + 348) == 2)
          {
            v127 = v320;
            v128 = (unint64_t *)&v325[24 * (v45 & 7) - 16];
            v129 = *v128;
            v130 = &v320[*v128];
            v131 = *(char **)(a1 + 30336);
            if (v130 > v131)
            {
              v132 = v131 - v320;
              v300 = v45;
              if (v131 != v320)
              {
                if (v132 > v301 - (uint64_t)v35)
                  return -70;
                v133 = v121;
                v134 = v117;
                ZSTD_safecopyDstBeforeSrc(v35, v320, v132);
                v121 = v133;
                v117 = v134;
                v98 = v308;
                v97 = a1 + 29996;
                v129 -= v132;
                *v128 = v129;
                v35 += v132;
              }
              v320 = (char *)(a1 + 30348);
              *(_DWORD *)(v97 + 348) = 0;
              v135 = v128[1];
              v136 = v128[2];
              if ((unint64_t)v303 + v129 > v302
                || (v6 = v135 + v129, (unint64_t)&v35[v135 + v129] > v307))
              {
                v321 = v129;
                v322 = v135;
                v323 = v136;
                v191 = v121;
                v192 = v117;
                v193 = ZSTD_execSequenceEnd(v35, v301, &v321, &v320, v302, v33, v309, v315);
                v117 = v192;
                v98 = v308;
                v97 = a1 + 29996;
                v6 = v193;
                v121 = v191;
              }
              else
              {
                v137 = &v35[v129];
                *(_OWORD *)v35 = *v303;
                if (v129 > 0x10)
                {
                  v199 = v35 + 16;
                  v200 = (__int128 *)(a1 + 30364);
                  do
                  {
                    v201 = *v200++;
                    *(_OWORD *)v199 = v201;
                    v199 += 16;
                  }
                  while (v199 < v137);
                }
                v138 = &v137[-v136];
                v320 = (char *)v303 + v129;
                if (v136 > v137 - v33)
                {
                  if (v136 > (unint64_t)&v137[-v309])
                    return -20;
                  v297 = v121;
                  v304 = v117;
                  v139 = v33;
                  v140 = v138 - v33;
                  v141 = (const void *)(v315 + v140);
                  if (v315 + v140 + v135 > v315)
                  {
                    memmove(v137, v141, -v140);
                    v137 -= v140;
                    v135 += v140;
                    v138 = v139;
                    v97 = a1 + 29996;
                    v98 = v308;
                    v33 = v139;
                    v117 = v304;
                    v121 = v297;
                    goto LABEL_145;
                  }
                  memmove(v137, v141, v135);
                  v97 = a1 + 29996;
                  v98 = v308;
                  v33 = v139;
                  v117 = v304;
                  v121 = v297;
                  LODWORD(v45) = v300;
LABEL_178:
                  if (v6 > 0xFFFFFFFFFFFFFF88)
                    return v6;
                  v168 = v121 + v43;
                  v174 = v313;
                  v175 = v315;
                  if (v117 <= v121 + v43)
                    v175 = (unint64_t)v33;
                  _X9 = v175 + v168 - v117;
                  __asm
                  {
                    PRFM            #0, [X9]
                    PRFM            #0, [X9,#0x40]
                  }
                  *v128 = v121;
                  v128[1] = v313;
                  v128[2] = v117;
                  v35 += v6;
                  v311 = a1 + 95884;
LABEL_182:
                  v43 = v168 + v174;
                  LODWORD(v45) = v45 + 1;
                  v44 = DWORD2(v317);
                  continue;
                }
LABEL_145:
                if (v136 < 0x10)
                {
                  if (v136 > 7)
                  {
                    *(_QWORD *)v137 = *(_QWORD *)v138;
                  }
                  else
                  {
                    v209 = ZSTD_overlapCopy8_dec64table[v136];
                    *v137 = *v138;
                    v137[1] = v138[1];
                    v137[2] = v138[2];
                    v137[3] = v138[3];
                    v210 = &v138[ZSTD_overlapCopy8_dec32table[v136]];
                    *((_DWORD *)v137 + 1) = *(_DWORD *)v210;
                    v138 = &v210[-v209];
                  }
                  if (v135 >= 9)
                  {
                    v216 = v137 + 8;
                    v217 = (__int128 *)(v138 + 8);
                    v218 = &v137[v135];
                    if (v137 + 8 - (char *)v217 >= 16)
                    {
                      do
                      {
                        v220 = *v217++;
                        *(_OWORD *)v216 = v220;
                        v216 += 16;
                      }
                      while (v216 < v218);
                    }
                    else
                    {
                      do
                      {
                        v219 = *(_QWORD *)v217;
                        v217 = (__int128 *)((char *)v217 + 8);
                        *(_QWORD *)v216 = v219;
                        v216 += 8;
                      }
                      while (v216 < v218);
                    }
                  }
                  v97 = a1 + 29996;
                  v98 = v308;
                  v33 = v310;
                }
                else
                {
                  v142 = &v137[v135];
                  do
                  {
                    v143 = *(_OWORD *)v138;
                    v138 += 16;
                    *(_OWORD *)v137 = v143;
                    v137 += 16;
                  }
                  while (v137 < v142);
                }
              }
              LODWORD(v45) = v300;
              goto LABEL_178;
            }
            v158 = v130 - 32;
            v159 = v128[1];
            v160 = v128[2];
            if ((unint64_t)v130 <= v311)
            {
              v6 = v159 + v129;
              if (&v35[v159 + v129] <= v158)
              {
                v161 = &v35[v129];
                *(_OWORD *)v35 = *(_OWORD *)v320;
                if (v129 > 0x10)
                {
                  v196 = v35 + 16;
                  v197 = (__int128 *)(v127 + 16);
                  do
                  {
                    v198 = *v197++;
                    *(_OWORD *)v196 = v198;
                    v196 += 16;
                  }
                  while (v196 < v161);
                }
                v162 = &v161[-v160];
                v320 = v130;
                if (v160 > v161 - v33)
                {
                  if (v160 > (unint64_t)&v161[-v309])
                    return -20;
                  v299 = v121;
                  v306 = v117;
                  v163 = v33;
                  v164 = v162 - v33;
                  v165 = (const void *)(v315 + v164);
                  if (v315 + v164 + v159 > v315)
                  {
                    memmove(v161, v165, -v164);
                    v161 -= v164;
                    v159 += v164;
                    v162 = v163;
                    v98 = v308;
                    v33 = v163;
                    v117 = v306;
                    v121 = v299;
                    goto LABEL_167;
                  }
                  memmove(v161, v165, v159);
                  v98 = v308;
                  v33 = v163;
                  v117 = v306;
                  v121 = v299;
LABEL_173:
                  if (v6 > 0xFFFFFFFFFFFFFF88)
                    return v6;
                  v168 = v121 + v43;
                  v169 = v315;
                  v97 = a1 + 29996;
                  if (v117 <= v121 + v43)
                    v169 = (unint64_t)v33;
                  _X9 = v169 + v168 - v117;
                  __asm
                  {
                    PRFM            #0, [X9]
                    PRFM            #0, [X9,#0x40]
                  }
                  v173 = (unint64_t *)&v325[24 * (v45 & 7) - 16];
                  v174 = v313;
                  *v173 = v121;
                  v173[1] = v313;
                  v173[2] = v117;
                  v35 += v6;
                  goto LABEL_182;
                }
LABEL_167:
                if (v160 >= 0x10)
                {
                  v166 = &v161[v159];
                  do
                  {
                    v167 = *(_OWORD *)v162;
                    v162 += 16;
                    *(_OWORD *)v161 = v167;
                    v161 += 16;
                  }
                  while (v161 < v166);
                  goto LABEL_173;
                }
                if (v160 > 7)
                {
                  *(_QWORD *)v161 = *(_QWORD *)v162;
                }
                else
                {
                  v202 = ZSTD_overlapCopy8_dec64table[v160];
                  *v161 = *v162;
                  v161[1] = v162[1];
                  v161[2] = v162[2];
                  v161[3] = v162[3];
                  v203 = &v162[ZSTD_overlapCopy8_dec32table[v160]];
                  *((_DWORD *)v161 + 1) = *(_DWORD *)v203;
                  v162 = &v203[-v202];
                }
                if (v159 >= 9)
                {
                  v211 = v161 + 8;
                  v212 = (__int128 *)(v162 + 8);
                  v213 = &v161[v159];
                  if (v161 + 8 - (char *)v212 >= 16)
                  {
                    do
                    {
                      v215 = *v212++;
                      *(_OWORD *)v211 = v215;
                      v211 += 16;
                    }
                    while (v211 < v213);
                  }
                  else
                  {
                    do
                    {
                      v214 = *(_QWORD *)v212;
                      v212 = (__int128 *)((char *)v212 + 8);
                      *(_QWORD *)v211 = v214;
                      v211 += 8;
                    }
                    while (v211 < v213);
                  }
                }
                goto LABEL_229;
              }
            }
            v321 = v129;
            v322 = v159;
            v323 = v160;
            v184 = v121;
            v185 = v117;
            v186 = v35;
            v187 = ZSTD_execSequenceEndSplitLitBuffer(v35, v301, v158, &v321, &v320, v311, v33, v309, v315);
          }
          else
          {
            v144 = (unint64_t *)&v325[24 * (v45 & 7) - 16];
            v146 = *v144;
            v145 = v144[1];
            v147 = v144[2];
            v148 = v320;
            v149 = &v320[*v144];
            if ((unint64_t)v149 <= v311)
            {
              v6 = v145 + v146;
              if ((unint64_t)&v35[v145 + v146] <= v307)
              {
                v150 = &v35[v146];
                *(_OWORD *)v35 = *(_OWORD *)v320;
                if (v146 > 0x10)
                {
                  v188 = v35 + 16;
                  v189 = (__int128 *)(v148 + 16);
                  do
                  {
                    v190 = *v189++;
                    *(_OWORD *)v188 = v190;
                    v188 += 16;
                  }
                  while (v188 < v150);
                }
                v151 = &v150[-v147];
                v320 = v149;
                if (v147 > v150 - v33)
                {
                  if (v147 > (unint64_t)&v150[-v309])
                    return -20;
                  v152 = v121;
                  v305 = v117;
                  v153 = v33;
                  v154 = v151 - v33;
                  v155 = (const void *)(v315 + v154);
                  if (v315 + v154 + v145 <= v315)
                  {
                    memmove(v150, v155, v145);
                    v98 = v308;
                    v33 = v153;
                    v117 = v305;
                    v121 = v152;
                    goto LABEL_173;
                  }
                  v298 = v145;
                  memmove(v150, v155, -v154);
                  v150 -= v154;
                  v145 = v154 + v298;
                  v151 = v153;
                  v98 = v308;
                  v33 = v153;
                  v117 = v305;
                  v121 = v152;
                }
                if (v147 >= 0x10)
                {
                  v156 = &v150[v145];
                  do
                  {
                    v157 = *(_OWORD *)v151;
                    v151 += 16;
                    *(_OWORD *)v150 = v157;
                    v150 += 16;
                  }
                  while (v150 < v156);
                  goto LABEL_173;
                }
                if (v147 > 7)
                {
                  *(_QWORD *)v150 = *(_QWORD *)v151;
                }
                else
                {
                  v194 = ZSTD_overlapCopy8_dec64table[v147];
                  *v150 = *v151;
                  v150[1] = v151[1];
                  v150[2] = v151[2];
                  v150[3] = v151[3];
                  v195 = &v151[ZSTD_overlapCopy8_dec32table[v147]];
                  *((_DWORD *)v150 + 1) = *(_DWORD *)v195;
                  v151 = &v195[-v194];
                }
                if (v145 >= 9)
                {
                  v204 = v150 + 8;
                  v205 = (__int128 *)(v151 + 8);
                  v206 = &v150[v145];
                  if (v150 + 8 - (char *)v205 >= 16)
                  {
                    do
                    {
                      v208 = *v205++;
                      *(_OWORD *)v204 = v208;
                      v204 += 16;
                    }
                    while (v204 < v206);
                  }
                  else
                  {
                    do
                    {
                      v207 = *(_QWORD *)v205;
                      v205 = (__int128 *)((char *)v205 + 8);
                      *(_QWORD *)v204 = v207;
                      v204 += 8;
                    }
                    while (v204 < v206);
                  }
                }
LABEL_229:
                v98 = v308;
                v33 = v310;
                goto LABEL_173;
              }
            }
            v321 = v146;
            v322 = v145;
            v323 = v147;
            v184 = v121;
            v185 = v117;
            v186 = v35;
            v187 = ZSTD_execSequenceEnd(v35, v301, &v321, &v320, v311, v33, v309, v315);
          }
          v117 = v185;
          v35 = v186;
          v98 = v308;
          v6 = v187;
          v121 = v184;
          goto LABEL_173;
        }
        if (v44 <= 0x40)
        {
          if ((unint64_t)v99 >= *(_QWORD *)&v319[0])
          {
            v183 = (_QWORD *)((char *)v99 - (v44 >> 3));
            *(_QWORD *)&v318 = v183;
            v44 &= 7u;
            goto LABEL_204;
          }
          if (v99 != *((_QWORD **)&v318 + 1))
          {
            v181 = v44 >> 3;
            if ((unint64_t)v99 - v181 >= *((_QWORD *)&v318 + 1))
              v182 = v181;
            else
              v182 = ((_DWORD)v99 - DWORD2(v318));
            v183 = (_QWORD *)((char *)v99 - v182);
            *(_QWORD *)&v318 = v183;
            v44 -= 8 * v182;
LABEL_204:
            *(_QWORD *)&v317 = *v183;
          }
        }
        v97 = a1 + 29996;
        v98 = v308;
        v33 = v310;
        goto LABEL_127;
      }
      if (!*((_BYTE *)v104 + 2))
      {
        v179 = *((_QWORD *)&v319[3] + ((_DWORD)v105 != 0) + 1);
        v117 = *((_QWORD *)&v319[3] + ((_DWORD)v105 == 0) + 1);
        *((_QWORD *)&v319[3] + 1) = v117;
        *(_QWORD *)&v319[4] = v179;
        goto LABEL_185;
      }
      if ((_DWORD)v105)
        v106 = v106;
      else
        v106 = (v106 + 1);
      v221 = (_QWORD)v317 << v44++;
      DWORD2(v317) = v44;
      v222 = v106 + (v221 >> 63);
      if (v222 == 3)
      {
        if (*((_QWORD *)&v319[3] + 1) == 1)
          v117 = 1;
        else
          v117 = *((_QWORD *)&v319[3] + 1) - 1;
        goto LABEL_248;
      }
      if (*((_QWORD *)&v319[3] + v222 + 1))
        v117 = *((_QWORD *)&v319[3] + v222 + 1);
      else
        v117 = 1;
      if (v222 != 1)
LABEL_248:
        *((_QWORD *)&v319[4] + 1) = *(_QWORD *)&v319[4];
      v223 = *((_QWORD *)&v319[3] + 1);
      *((_QWORD *)&v319[3] + 1) = v117;
      *(_QWORD *)&v319[4] = v223;
LABEL_185:
      v97 = a1 + 29996;
      v98 = v308;
      v33 = v310;
      if (v108)
        goto LABEL_186;
      goto LABEL_126;
    }
    break;
  }
  if ((int)v45 < v98)
    return -20;
LABEL_251:
  v224 = v45 - v296;
  if (v224 < v98)
  {
    v314 = a1 + 95884;
    do
    {
      v225 = (unint64_t *)&v325[24 * (v224 & 7) - 16];
      if (*(_DWORD *)(v97 + 348) == 2)
      {
        v226 = v320;
        v227 = *v225;
        v228 = &v320[*v225];
        v229 = *(char **)(a1 + 30336);
        if (v228 > v229)
        {
          v230 = v229 - v320;
          if (v229 != v320)
          {
            if (v230 > v301 - (uint64_t)v35)
              return -70;
            ZSTD_safecopyDstBeforeSrc(v35, v320, v230);
            v227 -= v230;
            *v225 = v227;
            v35 += v230;
            v97 = a1 + 29996;
            v98 = v308;
          }
          v320 = (char *)(a1 + 30348);
          *(_DWORD *)(v97 + 348) = 0;
          v231 = v225[1];
          v232 = v225[2];
          v6 = v231 + v227;
          if ((unint64_t)v303 + v227 > v314 || (unint64_t)&v35[v231 + v227] > v307)
          {
            v321 = v227;
            v322 = v231;
            v323 = v232;
            v267 = ZSTD_execSequenceEnd(v35, v301, &v321, &v320, v314, v33, v309, v315);
            v98 = v308;
            v97 = a1 + 29996;
            v6 = v267;
          }
          else
          {
            v234 = &v35[v227];
            *(_OWORD *)v35 = *v303;
            if (v227 > 0x10)
            {
              v273 = v35 + 16;
              v274 = (__int128 *)(a1 + 30364);
              do
              {
                v275 = *v274++;
                *(_OWORD *)v273 = v275;
                v273 += 16;
              }
              while (v273 < v234);
            }
            v235 = &v234[-v232];
            v320 = (char *)v303 + v227;
            if (v232 <= v234 - v33)
            {
LABEL_267:
              if (v232 < 0x10)
              {
                if (v232 > 7)
                {
                  *(_QWORD *)v234 = *(_QWORD *)v235;
                }
                else
                {
                  v283 = ZSTD_overlapCopy8_dec64table[v232];
                  *v234 = *v235;
                  v234[1] = v235[1];
                  v234[2] = v235[2];
                  v234[3] = v235[3];
                  v284 = &v235[ZSTD_overlapCopy8_dec32table[v232]];
                  *((_DWORD *)v234 + 1) = *(_DWORD *)v284;
                  v235 = &v284[-v283];
                }
                if (v231 >= 9)
                {
                  v290 = v234 + 8;
                  v291 = (__int128 *)(v235 + 8);
                  v292 = &v234[v231];
                  if (v234 + 8 - (char *)v291 >= 16)
                  {
                    do
                    {
                      v294 = *v291++;
                      *v290++ = v294;
                    }
                    while (v290 < (_OWORD *)v292);
                  }
                  else
                  {
                    do
                    {
                      v293 = *(_QWORD *)v291;
                      v291 = (__int128 *)((char *)v291 + 8);
                      *(_QWORD *)v290 = v293;
                      v290 = (_OWORD *)((char *)v290 + 8);
                    }
                    while (v290 < (_OWORD *)v292);
                  }
                }
                v97 = a1 + 29996;
                v98 = v308;
                v33 = v310;
              }
              else
              {
                v239 = &v234[v231];
                do
                {
                  v240 = *(_OWORD *)v235;
                  v235 += 16;
                  *(_OWORD *)v234 = v240;
                  v234 += 16;
                }
                while (v234 < v239);
              }
            }
            else
            {
              if (v232 > (unint64_t)&v234[-v309])
                return -20;
              v236 = v33;
              v237 = v235 - v33;
              v238 = (const void *)(v315 + v237);
              if (v315 + v237 + v231 > v315)
              {
                memmove(v234, v238, -v237);
                v234 -= v237;
                v231 += v237;
                v235 = v236;
                v97 = a1 + 29996;
                v98 = v308;
                v33 = v236;
                goto LABEL_267;
              }
              memmove(v234, v238, v231);
              v97 = a1 + 29996;
              v98 = v308;
              v33 = v236;
            }
          }
          if (v6 >= 0xFFFFFFFFFFFFFF89)
            return v6;
          v35 += v6;
          v311 = a1 + 95884;
          goto LABEL_303;
        }
        v255 = v228 - 32;
        v242 = v225[1];
        v256 = v225[2];
        v6 = v242 + v227;
        if ((unint64_t)v228 > v311 || &v35[v242 + v227] > v255)
        {
          v321 = *v225;
          v322 = v242;
          v323 = v256;
          v262 = v35;
          v263 = ZSTD_execSequenceEndSplitLitBuffer(v35, v301, v255, &v321, &v320, v311, v33, v309, v315);
          goto LABEL_307;
        }
        v247 = &v35[v227];
        *(_OWORD *)v35 = *(_OWORD *)v320;
        if (v227 > 0x10)
        {
          v270 = v35 + 16;
          v271 = (__int128 *)(v226 + 16);
          do
          {
            v272 = *v271++;
            *(_OWORD *)v270 = v272;
            v270 += 16;
          }
          while (v270 < v247);
        }
        v258 = &v247[-v256];
        v320 = v228;
        if (v256 <= v247 - v33)
          goto LABEL_293;
        if (v256 > (unint64_t)&v247[-v309])
          return -20;
        v249 = v35;
        v250 = v33;
        v259 = v258 - v33;
        v252 = (const void *)(v315 + v259);
        if (v315 + v259 + v242 > v315)
        {
          memmove(v247, v252, -v259);
          v247 -= v259;
          v242 += v259;
          v258 = v250;
          v97 = a1 + 29996;
          v98 = v308;
          v33 = v250;
LABEL_293:
          if (v256 >= 0x10)
          {
            v260 = &v247[v242];
            do
            {
              v261 = *(_OWORD *)v258;
              v258 += 16;
              *(_OWORD *)v247 = v261;
              v247 += 16;
            }
            while (v247 < v260);
            goto LABEL_298;
          }
          if (v256 > 7)
          {
            *(_QWORD *)v247 = *(_QWORD *)v258;
          }
          else
          {
            v276 = ZSTD_overlapCopy8_dec64table[v256];
            *v247 = *v258;
            v247[1] = v258[1];
            v247[2] = v258[2];
            v247[3] = v258[3];
            v277 = &v258[ZSTD_overlapCopy8_dec32table[v256]];
            *((_DWORD *)v247 + 1) = *(_DWORD *)v277;
            v258 = &v277[-v276];
          }
          if (v242 >= 9)
          {
            v285 = v247 + 8;
            v286 = (__int128 *)(v258 + 8);
            v287 = &v247[v242];
            if (v247 + 8 - (char *)v286 >= 16)
            {
              do
              {
                v289 = *v286++;
                *(_OWORD *)v285 = v289;
                v285 += 16;
              }
              while (v285 < v287);
            }
            else
            {
              do
              {
                v288 = *(_QWORD *)v286;
                v286 = (__int128 *)((char *)v286 + 8);
                *(_QWORD *)v285 = v288;
                v285 += 8;
              }
              while (v285 < v287);
            }
          }
          goto LABEL_337;
        }
      }
      else
      {
        v241 = *v225;
        v242 = v225[1];
        v243 = v225[2];
        v6 = v242 + *v225;
        v244 = v320;
        v245 = &v320[*v225];
        if ((unint64_t)v245 > v311 || (unint64_t)&v35[v6] > v307)
        {
          v321 = *v225;
          v322 = v242;
          v323 = v243;
          v262 = v35;
          v263 = ZSTD_execSequenceEnd(v35, v301, &v321, &v320, v311, v33, v309, v315);
LABEL_307:
          v35 = v262;
          v98 = v308;
          v97 = a1 + 29996;
          v6 = v263;
          goto LABEL_298;
        }
        v247 = &v35[v241];
        *(_OWORD *)v35 = *(_OWORD *)v320;
        if (v241 > 0x10)
        {
          v264 = v35 + 16;
          v265 = (__int128 *)(v244 + 16);
          do
          {
            v266 = *v265++;
            *(_OWORD *)v264 = v266;
            v264 += 16;
          }
          while (v264 < v247);
        }
        v248 = &v247[-v243];
        v320 = v245;
        if (v243 <= v247 - v33)
          goto LABEL_280;
        if (v243 > (unint64_t)&v247[-v309])
          return -20;
        v249 = v35;
        v250 = v33;
        v251 = v248 - v33;
        v252 = (const void *)(v315 + v251);
        if (v315 + v251 + v242 > v315)
        {
          memmove(v247, v252, -v251);
          v247 -= v251;
          v242 += v251;
          v248 = v250;
          v97 = a1 + 29996;
          v98 = v308;
          v33 = v250;
LABEL_280:
          if (v243 >= 0x10)
          {
            v253 = &v247[v242];
            do
            {
              v254 = *(_OWORD *)v248;
              v248 += 16;
              *(_OWORD *)v247 = v254;
              v247 += 16;
            }
            while (v247 < v253);
            goto LABEL_298;
          }
          if (v243 > 7)
          {
            *(_QWORD *)v247 = *(_QWORD *)v248;
          }
          else
          {
            v268 = ZSTD_overlapCopy8_dec64table[v243];
            *v247 = *v248;
            v247[1] = v248[1];
            v247[2] = v248[2];
            v247[3] = v248[3];
            v269 = &v248[ZSTD_overlapCopy8_dec32table[v243]];
            *((_DWORD *)v247 + 1) = *(_DWORD *)v269;
            v248 = &v269[-v268];
          }
          if (v242 >= 9)
          {
            v278 = v247 + 8;
            v279 = (__int128 *)(v248 + 8);
            v280 = &v247[v242];
            if (v247 + 8 - (char *)v279 >= 16)
            {
              do
              {
                v282 = *v279++;
                *(_OWORD *)v278 = v282;
                v278 += 16;
              }
              while (v278 < v280);
            }
            else
            {
              do
              {
                v281 = *(_QWORD *)v279;
                v279 = (__int128 *)((char *)v279 + 8);
                *(_QWORD *)v278 = v281;
                v278 += 8;
              }
              while (v278 < v280);
            }
          }
LABEL_337:
          v97 = a1 + 29996;
          v98 = v308;
          v33 = v310;
          goto LABEL_298;
        }
      }
      memmove(v247, v252, v242);
      v97 = a1 + 29996;
      v98 = v308;
      v33 = v250;
      v35 = v249;
LABEL_298:
      if (v6 > 0xFFFFFFFFFFFFFF88)
        return v6;
      v35 += v6;
LABEL_303:
      ++v224;
    }
    while (v224 != v98);
  }
  for (i = 0; i != 3; ++i)
    *(_DWORD *)(a1 + 26684 + 4 * i) = *((_QWORD *)&v319[3] + i + 1);
  v22 = *(_DWORD *)(v97 + 348);
  v30 = v320;
  v23 = (char *)v301;
  v31 = v311;
LABEL_31:
  if (v22 == 2)
  {
    v36 = v31 - (_QWORD)v30;
    if (v31 - (uint64_t)v30 <= (unint64_t)(v23 - v35))
    {
      if (v35)
      {
        v37 = v23;
        memmove(v35, v30, v31 - (_QWORD)v30);
        v23 = v37;
        v35 += v36;
      }
      v30 = (char *)(a1 + 30348);
      v31 = a1 + 95884;
      goto LABEL_36;
    }
    return -70;
  }
LABEL_36:
  v38 = v31 - (_QWORD)v30;
  if (v31 - (uint64_t)v30 > (unint64_t)(v23 - v35))
    return -70;
  if (v35)
  {
    memmove(v35, v30, v31 - (_QWORD)v30);
    v39 = &v35[v38];
  }
  else
  {
    v39 = 0;
  }
  return v39 - a2;
}

uint64_t ZSTD_decompressSequencesSplitLitBuffer(uint64_t *a1, char *__dst, uint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6)
{
  char *v6;
  uint64_t *v7;
  _DWORD *v8;
  char *v9;
  char *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  size_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 v38;
  char *v39;
  int v40;
  unint64_t v41;
  BOOL v42;
  int v43;
  unint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  size_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  const void *v59;
  char *v60;
  size_t v61;
  size_t v62;
  char *v63;
  __int128 v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  int64_t v69;
  const void *v70;
  char *v71;
  size_t v72;
  char *v73;
  __int128 v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  unsigned __int16 *v79;
  unsigned __int16 *v80;
  unsigned __int16 *v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  __int128 *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  char *v111;
  _OWORD *v112;
  __int128 *v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  unsigned __int16 *v124;
  unsigned __int16 *v125;
  unsigned __int16 *v126;
  size_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  BOOL v144;
  int v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  unint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  unsigned int *v155;
  int64_t v156;
  const void *v157;
  char *v158;
  char *v159;
  __int128 v160;
  unint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  char *v169;
  __int128 *v170;
  __int128 v171;
  uint64_t v172;
  char *v173;
  _OWORD *v174;
  __int128 *v175;
  char *v176;
  uint64_t v177;
  __int128 v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t i;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  __int128 *v190;
  __int128 v191;
  uint64_t v192;
  char *v193;
  _OWORD *v194;
  __int128 *v195;
  char *v196;
  uint64_t v197;
  __int128 v198;
  unint64_t v199;
  uint64_t v200;
  _DWORD *v201;
  char *v202;
  char *v203;
  char *v204;
  char *v205;
  uint64_t *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  _OWORD v212[5];
  char *v213;
  unint64_t v214;
  size_t v215;
  unint64_t v216;

  v6 = __dst;
  v7 = a1;
  v8 = (_DWORD *)a1 + 7499;
  v9 = &__dst[a3];
  v10 = (char *)a1[3764];
  v213 = v10;
  v11 = a1[3792];
  if (!a6)
  {
    v16 = __dst;
    goto LABEL_10;
  }
  v12 = a6;
  v13 = 0;
  v14 = (char *)a1[3737];
  v208 = a1[3739];
  v209 = a1[3738];
  v211 = 0u;
  memset(v212, 0, sizeof(v212));
  *v8 = 1;
  v210 = 0u;
  do
  {
    *((_QWORD *)&v212[3] + v13 + 1) = *((unsigned int *)a1 + v13 + 6671);
    ++v13;
  }
  while (v13 != 3);
  if (!a5)
    return -20;
  *((_QWORD *)&v211 + 1) = a4;
  *(_QWORD *)&v212[0] = a4 + 8;
  if (a5 < 8)
  {
    v20 = *a4;
    *(_QWORD *)&v211 = a4;
    *(_QWORD *)&v210 = v20;
    switch(a5)
    {
      case 2uLL:
        goto LABEL_23;
      case 3uLL:
        goto LABEL_22;
      case 4uLL:
        goto LABEL_21;
      case 5uLL:
        goto LABEL_20;
      case 6uLL:
        goto LABEL_19;
      case 7uLL:
        v20 |= (unint64_t)a4[6] << 48;
LABEL_19:
        v20 += (unint64_t)a4[5] << 40;
LABEL_20:
        v20 += (unint64_t)a4[4] << 32;
LABEL_21:
        v20 += (unint64_t)a4[3] << 24;
LABEL_22:
        v20 += (unint64_t)a4[2] << 16;
LABEL_23:
        *(_QWORD *)&v210 = v20 + ((unint64_t)a4[1] << 8);
        break;
      default:
        break;
    }
    if (!a4[a5 - 1])
      return -20;
    DWORD2(v210) = __clz(a4[a5 - 1]) - 8 * a5 + 41;
  }
  else
  {
    v15 = *(_QWORD *)&a4[a5 - 8];
    *(_QWORD *)&v211 = &a4[a5 - 8];
    *(_QWORD *)&v210 = v15;
    if (!HIBYTE(v15))
      return -20;
    DWORD2(v210) = __clz(HIBYTE(v15)) - 23;
    if (a5 > 0xFFFFFFFFFFFFFF88)
      return -20;
  }
  v202 = (char *)a1 + 30348;
  v204 = v14;
  v205 = &__dst[a3];
  v207 = v11;
  ZSTD_initFseState((_QWORD *)v212 + 1, (uint64_t)&v210, *a1);
  ZSTD_initFseState((_QWORD *)&v212[1] + 1, (uint64_t)&v210, v7[2]);
  ZSTD_initFseState((_QWORD *)&v212[2] + 1, (uint64_t)&v210, v7[1]);
  v21 = (unsigned __int16 *)(*(_QWORD *)&v212[1] + 8 * *((_QWORD *)&v212[0] + 1));
  v22 = (unsigned __int16 *)(*(_QWORD *)&v212[3] + 8 * *((_QWORD *)&v212[2] + 1));
  v23 = (unsigned __int16 *)(*(_QWORD *)&v212[2] + 8 * *((_QWORD *)&v212[1] + 1));
  v24 = *((unsigned int *)v22 + 1);
  v25 = *((unsigned int *)v21 + 1);
  v26 = *((unsigned int *)v23 + 1);
  v27 = *((unsigned __int8 *)v21 + 2);
  v28 = *((unsigned __int8 *)v22 + 2);
  v29 = *((unsigned __int8 *)v23 + 2);
  v30 = *v21;
  v31 = *v22;
  v32 = *v23;
  v33 = *((unsigned __int8 *)v21 + 3);
  v34 = *((unsigned __int8 *)v22 + 3);
  v35 = *((unsigned __int8 *)v23 + 3);
  v201 = v8;
  v206 = v7;
  if (v29 >= 2)
  {
    v36 = (_QWORD)v210 << SBYTE8(v210) >> -(char)v29;
    DWORD2(v210) += v29;
    v37 = v36 + v26;
    v212[4] = *(_OWORD *)((char *)&v212[3] + 8);
    goto LABEL_28;
  }
  if (*((_BYTE *)v23 + 2))
  {
    if ((_DWORD)v25)
      v26 = v26;
    else
      v26 = (v26 + 1);
    v199 = (_QWORD)v210 << SBYTE8(v210);
    ++DWORD2(v210);
    v200 = v26 + (v199 >> 63);
    if (v200 == 3)
    {
      if (*((_QWORD *)&v212[3] + 1) == 1)
        v37 = 1;
      else
        v37 = *((_QWORD *)&v212[3] + 1) - 1;
    }
    else
    {
      if (*((_QWORD *)&v212[3] + v200 + 1))
        v37 = *((_QWORD *)&v212[3] + v200 + 1);
      else
        v37 = 1;
      if (v200 == 1)
        goto LABEL_260;
    }
    *((_QWORD *)&v212[4] + 1) = *(_QWORD *)&v212[4];
LABEL_260:
    v183 = *((_QWORD *)&v212[3] + 1);
    goto LABEL_226;
  }
  v37 = *((_QWORD *)&v212[3] + ((_DWORD)v25 == 0) + 1);
  v183 = *((_QWORD *)&v212[3] + ((_DWORD)v25 != 0) + 1);
LABEL_226:
  *(_QWORD *)&v212[4] = v183;
LABEL_28:
  *((_QWORD *)&v212[3] + 1) = v37;
  v38 = v28 + v27 + v29;
  v11 = v207;
  v39 = v204;
  if (v28)
  {
    v184 = (_QWORD)v210 << SBYTE8(v210) >> -(char)v28;
    DWORD2(v210) += v28;
    v24 += v184;
  }
  v40 = DWORD2(v210);
  if (v38 >= 0x1Fu && DWORD2(v210) <= 0x40)
  {
    v185 = v211;
    if ((unint64_t)v211 >= *(_QWORD *)&v212[0])
    {
      *(_QWORD *)&v211 = v211 - ((unint64_t)DWORD2(v210) >> 3);
      v40 = BYTE8(v210) & 7;
      *(_QWORD *)&v210 = *(_QWORD *)v211;
      v11 = v207;
      v39 = v204;
    }
    else
    {
      v11 = v207;
      v39 = v204;
      if ((_QWORD)v211 != *((_QWORD *)&v211 + 1))
      {
        v186 = (unint64_t)DWORD2(v210) >> 3;
        if ((unint64_t)v211 - v186 >= *((_QWORD *)&v211 + 1))
          v187 = v186;
        else
          v187 = (v211 - DWORD2(v211));
        *(_QWORD *)&v211 = v211 - v187;
        v40 = DWORD2(v210) - 8 * v187;
        *(_QWORD *)&v210 = *(_QWORD *)(v185 - v187);
      }
    }
  }
  v41 = ((_QWORD)v210 << v40 >> -(char)v27) + v25;
  v42 = v27 == 0;
  if (v27)
    v43 = v40 + v27;
  else
    v43 = v40;
  if (v42)
    v44 = v25;
  else
    v44 = v41;
  v45 = BIT_mask;
  v46 = (((unint64_t)v210 >> -(char)(v43 + v33)) & BIT_mask[v33]) + v30;
  *((_QWORD *)&v212[2] + 1) = (((unint64_t)v210 >> -(char)(v43 + v33 + v34)) & BIT_mask[v34]) + v31;
  v47 = v43 + v33 + v34 + v35;
  v48 = ((unint64_t)v210 >> -(char)(v43 + v33 + v34 + v35)) & BIT_mask[v35];
  DWORD2(v210) = v47;
  *((_QWORD *)&v212[0] + 1) = v46;
  *((_QWORD *)&v212[1] + 1) = v48 + v32;
  v49 = &v10[v44];
  v50 = (char *)v206[3792];
  if (&v10[v44] <= v50)
  {
    v16 = v6;
    while (1)
    {
      v66 = v49 - 32;
      if ((unint64_t)v49 > v11 || (v19 = v44 + v24, &v16[v44 + v24] > v66))
      {
        v214 = v44;
        v215 = v24;
        v216 = v37;
        v102 = ZSTD_execSequenceEndSplitLitBuffer(v16, (uint64_t)v205, v66, &v214, &v213, v207, v204, v209, v208);
        v39 = v204;
        v11 = v207;
        v19 = v102;
      }
      else
      {
        v67 = &v16[v44];
        *(_OWORD *)v16 = *(_OWORD *)v10;
        if (v44 > 0x10)
        {
          v103 = v16 + 16;
          v104 = (__int128 *)(v10 + 16);
          do
          {
            v105 = *v104++;
            *(_OWORD *)v103 = v105;
            v103 += 16;
          }
          while (v103 < v67);
        }
        v68 = &v67[-v37];
        v213 = v49;
        if (v37 > v67 - v39)
        {
          if (v37 > (unint64_t)&v67[-v209])
            return -20;
          v69 = v68 - v39;
          v70 = (const void *)(v208 + v68 - v39);
          v71 = v39;
          if ((unint64_t)v70 + v24 <= v208)
          {
            memmove(v67, v70, v24);
            v11 = v207;
            v39 = v71;
            goto LABEL_69;
          }
          v72 = v24;
          memmove(v67, v70, v39 - v68);
          v11 = v207;
          v67 -= v69;
          v24 = v69 + v72;
          v68 = v71;
          v39 = v71;
        }
        if (v37 < 0x10)
        {
          if (v37 > 7)
          {
            *(_QWORD *)v67 = *(_QWORD *)v68;
          }
          else
          {
            v110 = ZSTD_overlapCopy8_dec64table[v37];
            *v67 = *v68;
            v67[1] = v68[1];
            v67[2] = v68[2];
            v67[3] = v68[3];
            v111 = &v68[ZSTD_overlapCopy8_dec32table[v37]];
            *((_DWORD *)v67 + 1) = *(_DWORD *)v111;
            v68 = &v111[-v110];
          }
          if (v24 >= 9)
          {
            v112 = v67 + 8;
            v113 = (__int128 *)(v68 + 8);
            v114 = &v67[v24];
            if (v67 + 8 - (char *)v113 >= 16)
            {
              do
              {
                v116 = *v113++;
                *v112++ = v116;
              }
              while (v112 < (_OWORD *)v114);
            }
            else
            {
              do
              {
                v115 = *(_QWORD *)v113;
                v113 = (__int128 *)((char *)v113 + 8);
                *(_QWORD *)v112 = v115;
                v112 = (_OWORD *)((char *)v112 + 8);
              }
              while (v112 < (_OWORD *)v114);
            }
          }
        }
        else
        {
          v73 = &v67[v24];
          do
          {
            v74 = *(_OWORD *)v68;
            v68 += 16;
            *(_OWORD *)v67 = v74;
            v67 += 16;
          }
          while (v67 < v73);
        }
      }
LABEL_69:
      if (v19 > 0xFFFFFFFFFFFFFF88)
        return v19;
      v16 += v19;
      if (!--v12)
        goto LABEL_216;
      v75 = DWORD2(v210);
      if (DWORD2(v210) <= 0x40)
      {
        if ((unint64_t)v211 >= *(_QWORD *)&v212[0])
        {
          v78 = (_QWORD *)(v211 - ((unint64_t)DWORD2(v210) >> 3));
          *(_QWORD *)&v211 = v78;
          v75 = BYTE8(v210) & 7;
        }
        else
        {
          if ((_QWORD)v211 == *((_QWORD *)&v211 + 1))
            goto LABEL_80;
          v76 = (unint64_t)DWORD2(v210) >> 3;
          if ((unint64_t)v211 - v76 >= *((_QWORD *)&v211 + 1))
            v77 = v76;
          else
            v77 = (v211 - DWORD2(v211));
          v78 = (_QWORD *)(v211 - v77);
          *(_QWORD *)&v211 = v211 - v77;
          v75 = DWORD2(v210) - 8 * v77;
        }
        *(_QWORD *)&v210 = *v78;
      }
LABEL_80:
      v79 = (unsigned __int16 *)(*(_QWORD *)&v212[1] + 8 * *((_QWORD *)&v212[0] + 1));
      v80 = (unsigned __int16 *)(*(_QWORD *)&v212[3] + 8 * *((_QWORD *)&v212[2] + 1));
      v81 = (unsigned __int16 *)(*(_QWORD *)&v212[2] + 8 * *((_QWORD *)&v212[1] + 1));
      v24 = *((unsigned int *)v80 + 1);
      v82 = *((unsigned int *)v79 + 1);
      v83 = *((unsigned int *)v81 + 1);
      v84 = *((unsigned __int8 *)v79 + 2);
      v85 = *((unsigned __int8 *)v80 + 2);
      v86 = *((unsigned __int8 *)v81 + 2);
      v87 = *v79;
      v88 = *v80;
      v89 = *v81;
      v90 = *((unsigned __int8 *)v79 + 3);
      v91 = *((unsigned __int8 *)v80 + 3);
      v92 = *((unsigned __int8 *)v81 + 3);
      if (v86 >= 2)
      {
        v93 = (_QWORD)v210 << v75 >> -(char)v86;
        v75 += v86;
        v37 = v93 + v83;
        *((_QWORD *)&v212[4] + 1) = *(_QWORD *)&v212[4];
        v94 = (char *)&v212[3] + 8;
        goto LABEL_82;
      }
      if (!*((_BYTE *)v81 + 2))
      {
        v37 = *((_QWORD *)&v212[3] + ((_DWORD)v82 == 0) + 1);
        v94 = (char *)&v212[3] + 8 * ((_DWORD)v82 != 0) + 8;
        goto LABEL_82;
      }
      if ((_DWORD)v82)
        v83 = v83;
      else
        v83 = (v83 + 1);
      v117 = (_QWORD)v210 << v75++;
      DWORD2(v210) = v75;
      v118 = v83 + (v117 >> 63);
      if (v118 == 3)
      {
        if (*((_QWORD *)&v212[3] + 1) == 1)
          v37 = 1;
        else
          v37 = *((_QWORD *)&v212[3] + 1) - 1;
      }
      else
      {
        if (*((_QWORD *)&v212[3] + v118 + 1))
          v37 = *((_QWORD *)&v212[3] + v118 + 1);
        else
          v37 = 1;
        if (v118 == 1)
          goto LABEL_126;
      }
      *((_QWORD *)&v212[4] + 1) = *(_QWORD *)&v212[4];
LABEL_126:
      v11 = v207;
      v94 = (char *)&v212[3] + 8;
      v39 = v204;
LABEL_82:
      v95 = *(_QWORD *)v94;
      *((_QWORD *)&v212[3] + 1) = v37;
      *(_QWORD *)&v212[4] = v95;
      if (v85)
      {
        v106 = (_QWORD)v210 << v75 >> -(char)v85;
        v75 += v85;
        v24 += v106;
      }
      if ((v85 + v84 + v86) < 0x1Fu || v75 > 0x40)
        goto LABEL_85;
      if ((unint64_t)v211 >= *(_QWORD *)&v212[0])
      {
        v109 = (_QWORD *)(v211 - (v75 >> 3));
        *(_QWORD *)&v211 = v109;
        v75 &= 7u;
LABEL_113:
        *(_QWORD *)&v210 = *v109;
        goto LABEL_85;
      }
      if ((_QWORD)v211 != *((_QWORD *)&v211 + 1))
      {
        v107 = v75 >> 3;
        if ((unint64_t)(v211 - v107) >= *((_QWORD *)&v211 + 1))
          v108 = v107;
        else
          v108 = (v211 - DWORD2(v211));
        v109 = (_QWORD *)(v211 - v108);
        *(_QWORD *)&v211 = v211 - v108;
        v75 -= 8 * v108;
        goto LABEL_113;
      }
LABEL_85:
      v96 = ((_QWORD)v210 << v75 >> -(char)v84) + v82;
      if (v84)
      {
        v75 += v84;
        v44 = v96;
      }
      else
      {
        v44 = v82;
      }
      v97 = v75 + v90;
      v98 = (((unint64_t)v210 >> -(char)v97) & BIT_mask[v90]) + v87;
      v99 = v97 + v91;
      *((_QWORD *)&v212[2] + 1) = (((unint64_t)v210 >> -(char)v99) & BIT_mask[v91]) + v88;
      v100 = v99 + v92;
      v101 = ((unint64_t)v210 >> -(char)v100) & BIT_mask[v92];
      DWORD2(v210) = v100;
      *((_QWORD *)&v212[0] + 1) = v98;
      *((_QWORD *)&v212[1] + 1) = v101 + v89;
      v10 = v213;
      v49 = &v213[v44];
      v50 = (char *)v206[3792];
      if (&v213[v44] > v50)
        goto LABEL_39;
    }
  }
  v16 = v6;
LABEL_39:
  v9 = v205;
  if (v12 < 1)
    return -20;
  v51 = v50 - v10;
  if (v50 != v10)
  {
    if (v51 > v205 - v16)
      return -70;
    v52 = v10;
    v53 = v50 - v10;
    v54 = v24;
    ZSTD_safecopyDstBeforeSrc(v16, v52, v53);
    v24 = v54;
    v39 = v204;
    v44 -= v51;
    v16 += v51;
  }
  v213 = v202;
  v11 = (unint64_t)v206 + 95884;
  v201[87] = 0;
  v55 = v205 - 32;
  if (&v202[v44] > (char *)v206 + 95884 || (v19 = v44 + v24, &v16[v44 + v24] > v55))
  {
    v214 = v44;
    v215 = v24;
    v216 = v37;
    v188 = ZSTD_execSequenceEnd(v16, (uint64_t)v205, &v214, &v213, v11, v39, v209, v208);
    v39 = v204;
    v11 = (unint64_t)v206 + 95884;
    v19 = v188;
    goto LABEL_130;
  }
  v56 = &v16[v44];
  v57 = &v16[v44 - v37];
  *(_OWORD *)v16 = *(_OWORD *)v202;
  if (v44 > 0x10)
  {
    v189 = v16 + 16;
    v190 = (__int128 *)(v202 + 16);
    do
    {
      v191 = *v190++;
      *(_OWORD *)v189 = v191;
      v189 += 16;
    }
    while (v189 < v56);
  }
  v213 = &v202[v44];
  if (v37 > v56 - v39)
  {
    if (v37 <= (unint64_t)&v56[-v209])
    {
      v58 = v57 - v39;
      v59 = (const void *)(v208 + v57 - v39);
      v60 = v39;
      if ((unint64_t)v59 + v24 <= v208)
      {
        memmove(v56, v59, v24);
        v11 = (unint64_t)v206 + 95884;
        v39 = v60;
        v9 = v205;
        goto LABEL_130;
      }
      v61 = v24;
      memmove(v56, v59, v39 - v57);
      v62 = v61;
      v55 = v205 - 32;
      v11 = (unint64_t)v206 + 95884;
      v56 -= v58;
      v24 = v58 + v62;
      v57 = v60;
      v39 = v60;
      v9 = v205;
      goto LABEL_50;
    }
    return -20;
  }
LABEL_50:
  if (v37 < 0x10)
  {
    if (v37 > 7)
    {
      *(_QWORD *)v56 = *(_QWORD *)v57;
    }
    else
    {
      v192 = ZSTD_overlapCopy8_dec64table[v37];
      *v56 = *v57;
      v56[1] = v57[1];
      v56[2] = v57[2];
      v56[3] = v57[3];
      v193 = &v57[ZSTD_overlapCopy8_dec32table[v37]];
      *((_DWORD *)v56 + 1) = *(_DWORD *)v193;
      v57 = &v193[-v192];
    }
    if (v24 >= 9)
    {
      v194 = v56 + 8;
      v195 = (__int128 *)(v57 + 8);
      v196 = &v56[v24];
      if (v56 + 8 - (char *)v195 >= 16)
      {
        do
        {
          v198 = *v195++;
          *v194++ = v198;
        }
        while (v194 < (_OWORD *)v196);
      }
      else
      {
        do
        {
          v197 = *(_QWORD *)v195;
          v195 = (__int128 *)((char *)v195 + 8);
          *(_QWORD *)v194 = v197;
          v194 = (_OWORD *)((char *)v194 + 8);
        }
        while (v194 < (_OWORD *)v196);
      }
    }
    v11 = (unint64_t)v206 + 95884;
    v39 = v204;
  }
  else
  {
    v63 = &v56[v24];
    do
    {
      v64 = *(_OWORD *)v57;
      v57 += 16;
      *(_OWORD *)v56 = v64;
      v56 += 16;
    }
    while (v56 < v63);
  }
LABEL_130:
  if (v19 > 0xFFFFFFFFFFFFFF88)
    return v19;
  v16 += v19;
  v119 = v12 - 1;
  if (v12 == 1)
    goto LABEL_217;
  v120 = DWORD2(v210);
  if (DWORD2(v210) > 0x40)
    goto LABEL_141;
  if ((unint64_t)v211 >= *(_QWORD *)&v212[0])
  {
    v123 = (_QWORD *)(v211 - ((unint64_t)DWORD2(v210) >> 3));
    *(_QWORD *)&v211 = v123;
    v120 = BYTE8(v210) & 7;
LABEL_140:
    *(_QWORD *)&v210 = *v123;
    goto LABEL_141;
  }
  if ((_QWORD)v211 != *((_QWORD *)&v211 + 1))
  {
    v121 = (unint64_t)DWORD2(v210) >> 3;
    if ((unint64_t)v211 - v121 >= *((_QWORD *)&v211 + 1))
      v122 = v121;
    else
      v122 = (v211 - DWORD2(v211));
    v123 = (_QWORD *)(v211 - v122);
    *(_QWORD *)&v211 = v211 - v122;
    v120 = DWORD2(v210) - 8 * v122;
    goto LABEL_140;
  }
LABEL_141:
  v203 = v6;
  while (1)
  {
    v124 = (unsigned __int16 *)(*(_QWORD *)&v212[1] + 8 * *((_QWORD *)&v212[0] + 1));
    v125 = (unsigned __int16 *)(*(_QWORD *)&v212[3] + 8 * *((_QWORD *)&v212[2] + 1));
    v126 = (unsigned __int16 *)(*(_QWORD *)&v212[2] + 8 * *((_QWORD *)&v212[1] + 1));
    v127 = *((unsigned int *)v125 + 1);
    v128 = *((unsigned int *)v124 + 1);
    v129 = *((unsigned int *)v126 + 1);
    v130 = *((unsigned __int8 *)v124 + 2);
    v131 = *((unsigned __int8 *)v125 + 2);
    v132 = *((unsigned __int8 *)v126 + 2);
    v133 = *v124;
    v134 = *v125;
    v135 = *v126;
    v136 = *((unsigned __int8 *)v124 + 3);
    v137 = *((unsigned __int8 *)v125 + 3);
    v138 = *((unsigned __int8 *)v126 + 3);
    if (v132 >= 2)
    {
      v139 = (_QWORD)v210 << v120 >> -(char)v132;
      v120 += v132;
      v140 = v139 + v129;
      *((_QWORD *)&v212[4] + 1) = *(_QWORD *)&v212[4];
      v141 = (char *)&v212[3] + 8;
      goto LABEL_144;
    }
    if (!*((_BYTE *)v126 + 2))
    {
      v140 = *((_QWORD *)&v212[3] + ((_DWORD)v128 == 0) + 1);
      v141 = (char *)&v212[3] + 8 * ((_DWORD)v128 != 0) + 8;
      goto LABEL_144;
    }
    v129 = (_DWORD)v128 ? v129 : (v129 + 1);
    v179 = (_QWORD)v210 << v120++;
    DWORD2(v210) = v120;
    v180 = v129 + (v179 >> 63);
    if (v180 == 3)
    {
      v140 = *((_QWORD *)&v212[3] + 1) == 1 ? 1 : *((_QWORD *)&v212[3] + 1) - 1;
    }
    else
    {
      if (*((_QWORD *)&v212[3] + v180 + 1))
        v140 = *((_QWORD *)&v212[3] + v180 + 1);
      else
        v140 = 1;
      if (v180 == 1)
        goto LABEL_212;
    }
    *((_QWORD *)&v212[4] + 1) = *(_QWORD *)&v212[4];
LABEL_212:
    v11 = (unint64_t)v206 + 95884;
    v141 = (char *)&v212[3] + 8;
    v39 = v204;
LABEL_144:
    v142 = *(_QWORD *)v141;
    *((_QWORD *)&v212[3] + 1) = v140;
    *(_QWORD *)&v212[4] = v142;
    if (v131)
    {
      v165 = (_QWORD)v210 << v120 >> -(char)v131;
      v120 += v131;
      v127 += v165;
    }
    if ((v131 + v130 + v132) >= 0x1Fu && v120 <= 0x40)
    {
      if ((unint64_t)v211 >= *(_QWORD *)&v212[0])
      {
        v168 = (_QWORD *)(v211 - (v120 >> 3));
        *(_QWORD *)&v211 = v168;
        v120 &= 7u;
      }
      else
      {
        if ((_QWORD)v211 == *((_QWORD *)&v211 + 1))
          goto LABEL_147;
        v166 = v120 >> 3;
        if ((unint64_t)(v211 - v166) >= *((_QWORD *)&v211 + 1))
          v167 = v166;
        else
          v167 = (v211 - DWORD2(v211));
        v168 = (_QWORD *)(v211 - v167);
        *(_QWORD *)&v211 = v211 - v167;
        v120 -= 8 * v167;
      }
      *(_QWORD *)&v210 = *v168;
    }
LABEL_147:
    v143 = ((_QWORD)v210 << v120 >> -(char)v130) + v128;
    v144 = v130 == 0;
    v145 = v130 ? v120 + v130 : v120;
    v146 = v144 ? v128 : v143;
    v147 = (((unint64_t)v210 >> -(char)(v145 + v136)) & v45[v136]) + v133;
    *((_QWORD *)&v212[2] + 1) = (((unint64_t)v210 >> -(char)(v145 + v136 + v137)) & v45[v137]) + v134;
    v148 = v145 + v136 + v137 + v138;
    v149 = ((unint64_t)v210 >> -(char)(v145 + v136 + v137 + v138)) & v45[v138];
    DWORD2(v210) = v148;
    *((_QWORD *)&v212[0] + 1) = v147;
    *((_QWORD *)&v212[1] + 1) = v149 + v135;
    v150 = v213;
    v151 = &v213[v146];
    if ((unint64_t)&v213[v146] > v11 || (v19 = v146 + v127, &v16[v146 + v127] > v55))
    {
      v214 = v146;
      v215 = v127;
      v216 = v140;
      v164 = ZSTD_execSequenceEnd(v16, (uint64_t)v205, &v214, &v213, v11, v39, v209, v208);
      v39 = v204;
      v11 = (unint64_t)v206 + 95884;
      v19 = v164;
    }
    else
    {
      v152 = &v16[v146];
      *(_OWORD *)v16 = *(_OWORD *)v213;
      if (v146 > 0x10)
      {
        v169 = v16 + 16;
        v170 = (__int128 *)(v150 + 16);
        do
        {
          v171 = *v170++;
          *(_OWORD *)v169 = v171;
          v169 += 16;
        }
        while (v169 < v152);
      }
      v153 = &v152[-v140];
      v213 = v151;
      if (v140 > v152 - v39)
      {
        if (v140 > (unint64_t)&v152[-v209])
          return -20;
        v154 = v55;
        v155 = v45;
        v156 = v153 - v39;
        v157 = (const void *)(v208 + v153 - v39);
        v158 = v39;
        if ((unint64_t)v157 + v127 <= v208)
        {
          memmove(v152, v157, v127);
          v11 = (unint64_t)v206 + 95884;
          v39 = v158;
          v45 = v155;
          v55 = v154;
          goto LABEL_165;
        }
        memmove(v152, v157, v39 - v153);
        v152 -= v156;
        v127 += v156;
        v153 = v158;
        v11 = (unint64_t)v206 + 95884;
        v39 = v158;
        v45 = v155;
        v55 = v154;
      }
      if (v140 < 0x10)
      {
        if (v140 > 7)
        {
          *(_QWORD *)v152 = *(_QWORD *)v153;
        }
        else
        {
          v172 = ZSTD_overlapCopy8_dec64table[v140];
          *v152 = *v153;
          v152[1] = v153[1];
          v152[2] = v153[2];
          v152[3] = v153[3];
          v173 = &v153[ZSTD_overlapCopy8_dec32table[v140]];
          *((_DWORD *)v152 + 1) = *(_DWORD *)v173;
          v153 = &v173[-v172];
        }
        if (v127 >= 9)
        {
          v174 = v152 + 8;
          v175 = (__int128 *)(v153 + 8);
          v176 = &v152[v127];
          if (v152 + 8 - (char *)v175 >= 16)
          {
            do
            {
              v178 = *v175++;
              *v174++ = v178;
            }
            while (v174 < (_OWORD *)v176);
          }
          else
          {
            do
            {
              v177 = *(_QWORD *)v175;
              v175 = (__int128 *)((char *)v175 + 8);
              *(_QWORD *)v174 = v177;
              v174 = (_OWORD *)((char *)v174 + 8);
            }
            while (v174 < (_OWORD *)v176);
          }
        }
      }
      else
      {
        v159 = &v152[v127];
        do
        {
          v160 = *(_OWORD *)v153;
          v153 += 16;
          *(_OWORD *)v152 = v160;
          v152 += 16;
        }
        while (v152 < v159);
      }
    }
LABEL_165:
    if (v19 > 0xFFFFFFFFFFFFFF88)
      return v19;
    v16 += v19;
    if (!--v119)
      break;
    v120 = DWORD2(v210);
    if (DWORD2(v210) <= 0x40)
    {
      if ((unint64_t)v211 >= *(_QWORD *)&v212[0])
      {
        v163 = (_QWORD *)(v211 - ((unint64_t)DWORD2(v210) >> 3));
        *(_QWORD *)&v211 = v163;
        v120 = BYTE8(v210) & 7;
        goto LABEL_175;
      }
      if ((_QWORD)v211 != *((_QWORD *)&v211 + 1))
      {
        v161 = (unint64_t)DWORD2(v210) >> 3;
        if ((unint64_t)v211 - v161 >= *((_QWORD *)&v211 + 1))
          v162 = v161;
        else
          v162 = (v211 - DWORD2(v211));
        v163 = (_QWORD *)(v211 - v162);
        *(_QWORD *)&v211 = v211 - v162;
        v120 = DWORD2(v210) - 8 * v162;
LABEL_175:
        DWORD2(v210) = v120;
        *(_QWORD *)&v210 = *v163;
      }
    }
  }
  v6 = v203;
LABEL_216:
  v9 = v205;
LABEL_217:
  v8 = v201;
  v7 = v206;
  if (DWORD2(v210) > 0x40
    || (v19 = -20, DWORD2(v210) == 64)
    && (unint64_t)v211 < *(_QWORD *)&v212[0]
    && (_QWORD)v211 == *((_QWORD *)&v211 + 1))
  {
    for (i = 0; i != 3; ++i)
      *((_DWORD *)v206 + i + 6671) = *((_QWORD *)&v212[3] + i + 1);
    v10 = v213;
LABEL_10:
    if (v8[87] == 2)
    {
      v17 = v11 - (_QWORD)v10;
      if (v11 - (unint64_t)v10 <= v9 - v16)
      {
        if (v16)
        {
          memmove(v16, v10, v11 - (_QWORD)v10);
          v16 += v17;
        }
        v10 = (char *)v7 + 30348;
        v11 = (unint64_t)v7 + 95884;
        v8[87] = 0;
        goto LABEL_15;
      }
      return -70;
    }
    else
    {
LABEL_15:
      v18 = v11 - (_QWORD)v10;
      if (v11 - (unint64_t)v10 > v9 - v16)
        return -70;
      if (v16)
      {
        memcpy(v16, v10, v11 - (_QWORD)v10);
        v65 = &v16[v18];
      }
      else
      {
        v65 = 0;
      }
      return v65 - v6;
    }
  }
  return v19;
}

uint64_t ZSTD_decompressSequences(uint64_t a1, char *__dst, uint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6)
{
  int v6;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _BYTE *v14;
  int64_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  char *v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  unsigned __int16 *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  char *v46;
  char *v47;
  _BYTE *v48;
  char *v49;
  uint64_t v50;
  const void *v51;
  _BYTE *v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _OWORD *v62;
  __int128 *v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  _OWORD *v67;
  __int128 *v68;
  unint64_t v69;
  uint64_t v70;
  __int128 v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t i;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char *v89;
  unint64_t v90[4];

  v6 = a6;
  if (*(_DWORD *)(a1 + 30344))
    v9 = *(char **)(a1 + 30328);
  else
    v9 = &__dst[a3];
  v10 = *(char **)(a1 + 30112);
  v89 = v10;
  v81 = &v10[*(_QWORD *)(a1 + 30144)];
  if (a6)
  {
    v11 = 0;
    v12 = *(char **)(a1 + 29896);
    v79 = *(_QWORD *)(a1 + 29912);
    v80 = *(_QWORD *)(a1 + 29904);
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    *(_DWORD *)(a1 + 29996) = 1;
    v82 = 0u;
    do
    {
      *((_QWORD *)&v87 + v11 + 1) = *(unsigned int *)(a1 + 26684 + 4 * v11);
      ++v11;
    }
    while (v11 != 3);
    if (!a5)
      return -20;
    *((_QWORD *)&v83 + 1) = a4;
    *(_QWORD *)&v84 = a4 + 8;
    if (a5 < 8)
    {
      v18 = *a4;
      *(_QWORD *)&v83 = a4;
      *(_QWORD *)&v82 = v18;
      switch(a5)
      {
        case 2uLL:
          goto LABEL_23;
        case 3uLL:
          goto LABEL_22;
        case 4uLL:
          goto LABEL_21;
        case 5uLL:
          goto LABEL_20;
        case 6uLL:
          goto LABEL_19;
        case 7uLL:
          v18 |= (unint64_t)a4[6] << 48;
LABEL_19:
          v18 += (unint64_t)a4[5] << 40;
LABEL_20:
          v18 += (unint64_t)a4[4] << 32;
LABEL_21:
          v18 += (unint64_t)a4[3] << 24;
LABEL_22:
          v18 += (unint64_t)a4[2] << 16;
LABEL_23:
          *(_QWORD *)&v82 = v18 + ((unint64_t)a4[1] << 8);
          break;
        default:
          break;
      }
      if (!a4[a5 - 1])
        return -20;
      DWORD2(v82) = __clz(a4[a5 - 1]) - 8 * a5 + 41;
    }
    else
    {
      v13 = *(_QWORD *)&a4[a5 - 8];
      *(_QWORD *)&v83 = &a4[a5 - 8];
      *(_QWORD *)&v82 = v13;
      if (!HIBYTE(v13))
        return -20;
      DWORD2(v82) = __clz(HIBYTE(v13)) - 23;
      if (a5 > 0xFFFFFFFFFFFFFF88)
        return -20;
    }
    ZSTD_initFseState((_QWORD *)&v84 + 1, (uint64_t)&v82, *(_QWORD *)a1);
    ZSTD_initFseState((_QWORD *)&v85 + 1, (uint64_t)&v82, *(_QWORD *)(a1 + 16));
    v76 = a1;
    ZSTD_initFseState((_QWORD *)&v86 + 1, (uint64_t)&v82, *(_QWORD *)(a1 + 8));
    v77 = (uint64_t)v9;
    v19 = v9 - 32;
    v14 = __dst;
    v78 = v19;
    while (1)
    {
      v20 = (unsigned __int16 *)(v85 + 8 * *((_QWORD *)&v84 + 1));
      v21 = (unsigned __int16 *)(v87 + 8 * *((_QWORD *)&v86 + 1));
      v22 = (unsigned __int16 *)(v86 + 8 * *((_QWORD *)&v85 + 1));
      v23 = *((unsigned int *)v21 + 1);
      v24 = *((unsigned int *)v20 + 1);
      v25 = *((unsigned int *)v22 + 1);
      v26 = *((unsigned __int8 *)v20 + 2);
      v27 = *((unsigned __int8 *)v21 + 2);
      v28 = *((unsigned __int8 *)v22 + 2);
      v29 = *v20;
      v30 = *v21;
      v31 = *v22;
      v32 = *((unsigned __int8 *)v20 + 3);
      v33 = *((unsigned __int8 *)v21 + 3);
      v34 = *((unsigned __int8 *)v22 + 3);
      if (v28 >= 2)
      {
        v35 = DWORD2(v82) + v28;
        v36 = ((_QWORD)v82 << SBYTE8(v82) >> -(char)v28) + v25;
        *((_QWORD *)&v88 + 1) = v88;
        v37 = (char *)&v87 + 8;
        goto LABEL_29;
      }
      if (!*((_BYTE *)v22 + 2))
      {
        v36 = *((_QWORD *)&v87 + ((_DWORD)v24 == 0) + 1);
        v37 = (char *)&v87 + 8 * ((_DWORD)v24 != 0) + 8;
        v35 = DWORD2(v82);
        goto LABEL_29;
      }
      if ((_DWORD)v24)
        v25 = v25;
      else
        v25 = (v25 + 1);
      v72 = (_QWORD)v82 << SBYTE8(v82);
      v35 = ++DWORD2(v82);
      v73 = v25 + (v72 >> 63);
      if (v73 == 3)
      {
        if (*((_QWORD *)&v87 + 1) == 1)
          v36 = 1;
        else
          v36 = *((_QWORD *)&v87 + 1) - 1;
      }
      else
      {
        if (*((_QWORD *)&v87 + v73 + 1))
          v36 = *((_QWORD *)&v87 + v73 + 1);
        else
          v36 = 1;
        if (v73 == 1)
          goto LABEL_96;
      }
      *((_QWORD *)&v88 + 1) = v88;
LABEL_96:
      v37 = (char *)&v87 + 8;
      v19 = v78;
LABEL_29:
      v38 = *(_QWORD *)v37;
      *((_QWORD *)&v87 + 1) = v36;
      *(_QWORD *)&v88 = v38;
      if (v27)
      {
        v58 = (_QWORD)v82 << v35 >> -(char)v27;
        v35 += v27;
        v23 += v58;
      }
      if ((v27 + v26 + v28) >= 0x1Fu && v35 <= 0x40)
      {
        if ((unint64_t)v83 >= (unint64_t)v84)
        {
          v61 = (_QWORD *)(v83 - (v35 >> 3));
          *(_QWORD *)&v83 = v61;
          v35 &= 7u;
        }
        else
        {
          if ((_QWORD)v83 == *((_QWORD *)&v83 + 1))
            goto LABEL_32;
          v59 = v35 >> 3;
          if ((unint64_t)(v83 - v59) >= *((_QWORD *)&v83 + 1))
            v60 = v59;
          else
            v60 = (v83 - DWORD2(v83));
          v61 = (_QWORD *)(v83 - v60);
          *(_QWORD *)&v83 = v83 - v60;
          v35 -= 8 * v60;
        }
        *(_QWORD *)&v82 = *v61;
      }
LABEL_32:
      v39 = ((_QWORD)v82 << v35 >> -(char)v26) + v24;
      v40 = v26 == 0;
      if (v26)
        v41 = v35 + v26;
      else
        v41 = v35;
      if (!v40)
        v24 = v39;
      v42 = v41 + v32;
      v43 = (((unint64_t)v82 >> -(char)v42) & BIT_mask[v32]) + v29;
      *((_QWORD *)&v86 + 1) = (((unint64_t)v82 >> -(char)(v42 + v33)) & BIT_mask[v33]) + v30;
      v44 = v42 + v33 + v34;
      v45 = ((unint64_t)v82 >> -(char)(v42 + v33 + v34)) & BIT_mask[v34];
      DWORD2(v82) = v44;
      *((_QWORD *)&v84 + 1) = v43;
      *((_QWORD *)&v85 + 1) = v45 + v31;
      v46 = v89;
      v47 = &v89[v24];
      if (&v89[v24] > v81 || (v16 = v24 + v23, &v14[v24 + v23] > v19))
      {
        v90[0] = v24;
        v90[1] = v23;
        v90[2] = v36;
        v16 = ZSTD_execSequenceEnd(v14, v77, v90, &v89, (uint64_t)v81, v12, v80, v79);
      }
      else
      {
        v48 = &v14[v24];
        *(_OWORD *)v14 = *(_OWORD *)v89;
        if (v24 > 0x10)
        {
          v62 = v14 + 16;
          v63 = (__int128 *)(v46 + 16);
          do
          {
            v64 = *v63++;
            *v62++ = v64;
          }
          while (v62 < (_OWORD *)v48);
        }
        v49 = &v48[-v36];
        v89 = v47;
        if (v36 <= v48 - v12)
          goto LABEL_44;
        if (v36 > (unint64_t)&v48[-v80])
          return -20;
        v50 = v49 - v12;
        v51 = (const void *)(v79 + v49 - v12);
        if ((unint64_t)v51 + v23 > v79)
        {
          memmove(&v14[v24], v51, v12 - v49);
          v48 -= v50;
          v23 += v50;
          v49 = v12;
          v19 = v78;
LABEL_44:
          if (v36 < 0x10)
          {
            if (v36 > 7)
            {
              *(_QWORD *)v48 = *(_QWORD *)v49;
            }
            else
            {
              v65 = ZSTD_overlapCopy8_dec64table[v36];
              *v48 = *v49;
              v48[1] = v49[1];
              v48[2] = v49[2];
              v48[3] = v49[3];
              v66 = &v49[ZSTD_overlapCopy8_dec32table[v36]];
              *((_DWORD *)v48 + 1) = *(_DWORD *)v66;
              v49 = &v66[-v65];
            }
            if (v23 >= 9)
            {
              v67 = v48 + 8;
              v68 = (__int128 *)(v49 + 8);
              v69 = (unint64_t)&v48[v23];
              if (v48 + 8 - (_BYTE *)v68 >= 16)
              {
                do
                {
                  v71 = *v68++;
                  *v67++ = v71;
                }
                while ((unint64_t)v67 < v69);
              }
              else
              {
                do
                {
                  v70 = *(_QWORD *)v68;
                  v68 = (__int128 *)((char *)v68 + 8);
                  *(_QWORD *)v67 = v70;
                  v67 = (_OWORD *)((char *)v67 + 8);
                }
                while ((unint64_t)v67 < v69);
              }
            }
          }
          else
          {
            v52 = &v48[v23];
            do
            {
              v53 = *(_OWORD *)v49;
              v49 += 16;
              *(_OWORD *)v48 = v53;
              v48 += 16;
            }
            while (v48 < v52);
          }
          goto LABEL_49;
        }
        memmove(&v14[v24], v51, v23);
        v19 = v78;
      }
LABEL_49:
      if (v16 > 0xFFFFFFFFFFFFFF88)
        return v16;
      v14 += v16;
      if (!--v6)
      {
        v9 = (char *)v77;
        if (DWORD2(v82) > 0x40
          || (v16 = -20, DWORD2(v82) == 64)
          && (unint64_t)v83 < (unint64_t)v84
          && (_QWORD)v83 == *((_QWORD *)&v83 + 1))
        {
          for (i = 0; i != 3; ++i)
            *(_DWORD *)(v76 + 26684 + 4 * i) = *((_QWORD *)&v87 + i + 1);
          v10 = v89;
          goto LABEL_13;
        }
        return v16;
      }
      if (DWORD2(v82) <= 0x40)
      {
        if ((unint64_t)v83 >= (unint64_t)v84)
        {
          v56 = (_QWORD *)(v83 - ((unint64_t)DWORD2(v82) >> 3));
          *(_QWORD *)&v83 = v56;
          v57 = BYTE8(v82) & 7;
          goto LABEL_59;
        }
        if ((_QWORD)v83 != *((_QWORD *)&v83 + 1))
        {
          v54 = (unint64_t)DWORD2(v82) >> 3;
          if ((unint64_t)v83 - v54 >= *((_QWORD *)&v83 + 1))
            v55 = v54;
          else
            v55 = (v83 - DWORD2(v83));
          v56 = (_QWORD *)(v83 - v55);
          *(_QWORD *)&v83 = v83 - v55;
          v57 = DWORD2(v82) - 8 * v55;
LABEL_59:
          DWORD2(v82) = v57;
          *(_QWORD *)&v82 = *v56;
        }
      }
    }
  }
  v14 = __dst;
LABEL_13:
  v15 = v81 - v10;
  if (v81 - v10 > (unint64_t)(v9 - v14))
    return -70;
  if (v14)
  {
    memcpy(v14, v10, v81 - v10);
    v17 = &v14[v15];
  }
  else
  {
    v17 = 0;
  }
  return v17 - __dst;
}

_QWORD *ZSTD_checkContinuity(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = result[3736];
    if (v3 != a2)
    {
      result[3739] = v3;
      result[3738] = a2 + result[3737] - v3;
      result[3737] = a2;
      result[3736] = a2;
    }
  }
  return result;
}

_QWORD *ZSTD_initFseState(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;

  v3 = *(unsigned int *)(a3 + 4);
  v4 = *(_DWORD *)(a2 + 8) + v3;
  v5 = (*(_QWORD *)a2 >> -(char)(*(_BYTE *)(a2 + 8) + v3)) & BIT_mask[v3];
  *(_DWORD *)(a2 + 8) = v4;
  *result = v5;
  if (v4 <= 0x40)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 >= *(_QWORD *)(a2 + 32))
    {
      v10 = (_QWORD *)(v6 - (v4 >> 3));
      *(_QWORD *)(a2 + 16) = v10;
      v11 = v4 & 7;
LABEL_9:
      *(_DWORD *)(a2 + 8) = v11;
      *(_QWORD *)a2 = *v10;
      goto LABEL_10;
    }
    v7 = *(_QWORD *)(a2 + 24);
    if (v6 != v7)
    {
      v8 = v4 >> 3;
      if (v6 - v8 >= v7)
        v9 = v8;
      else
        v9 = (v6 - v7);
      v10 = (_QWORD *)(v6 - v9);
      *(_QWORD *)(a2 + 16) = v10;
      v11 = v4 - 8 * v9;
      goto LABEL_9;
    }
  }
LABEL_10:
  result[1] = a3 + 8;
  return result;
}

_BYTE *ZSTD_safecopyDstBeforeSrc(_BYTE *result, char *a2, uint64_t a3)
{
  _BYTE *v3;
  _BYTE *v4;
  __int128 *v5;
  _OWORD *v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  char v10;

  v3 = &result[a3];
  if (a3 < 8 || result - a2 >= -7)
  {
    if (a3 >= 1)
    {
      do
      {
        v8 = *a2++;
        *result++ = v8;
      }
      while (result < v3);
    }
  }
  else
  {
    if ((unint64_t)(result - a2) > 0xFFFFFFFFFFFFFFEFLL || (v4 = v3 - 32, v4 < result))
    {
      v4 = result;
    }
    else
    {
      v5 = (__int128 *)a2;
      v6 = result;
      do
      {
        v7 = *v5++;
        *v6++ = v7;
      }
      while (v6 < (_OWORD *)v4);
      a2 += v4 - result;
    }
    v9 = &result[a3] - v4;
    do
    {
      v10 = *a2++;
      *v4++ = v10;
      --v9;
    }
    while (v9);
  }
  return result;
}

uint64_t ZSTD_execSequenceEnd(_BYTE *a1, uint64_t a2, unint64_t *a3, char **a4, uint64_t a5, char *a6, uint64_t a7, unint64_t a8)
{
  unint64_t v9;
  unint64_t v10;
  char *v12;
  char *v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  const void *v22;
  size_t v23;
  uint64_t v24;

  v9 = *a3;
  v10 = a3[1] + *a3;
  if (v10 <= a2 - (uint64_t)a1)
  {
    v12 = *a4;
    if (v9 > a5 - (uint64_t)*a4)
      return -20;
    v16 = &a1[v9];
    v17 = &v12[v9];
    v18 = &a1[v9 - a3[2]];
    v19 = (_BYTE *)(a2 - 32);
    ZSTD_safecopy(a1, (_BYTE *)(a2 - 32), v12, v9, 0);
    *a4 = v17;
    v20 = (char *)a3[2];
    if ((unint64_t)v20 <= v16 - a6)
    {
      v24 = a3[1];
      a6 = v18;
    }
    else
    {
      if (v20 > &v16[-a7])
        return -20;
      v21 = v18 - a6;
      v22 = (const void *)(a8 + v18 - a6);
      v23 = a3[1];
      if ((unint64_t)v22 + v23 <= a8)
      {
        memmove(v16, v22, v23);
        return v10;
      }
      memmove(v16, v22, a6 - v18);
      v16 -= v21;
      v24 = a3[1] + v21;
      a3[1] = v24;
    }
    ZSTD_safecopy(v16, v19, a6, v24, 1);
    return v10;
  }
  return -70;
}

_BYTE *ZSTD_safecopy(_BYTE *result, _BYTE *a2, char *a3, uint64_t a4, int a5)
{
  _BYTE *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  char v18;

  v5 = &result[a4];
  if (a4 > 7)
  {
    if (a5 == 1)
    {
      v7 = result - a3;
      if ((unint64_t)(result - a3) > 7)
      {
        *(_QWORD *)result = *(_QWORD *)a3;
      }
      else
      {
        v8 = ZSTD_overlapCopy8_dec64table[v7];
        *result = *a3;
        result[1] = a3[1];
        result[2] = a3[2];
        result[3] = a3[3];
        v9 = &a3[ZSTD_overlapCopy8_dec32table[v7]];
        *((_DWORD *)result + 1) = *(_DWORD *)v9;
        a3 = &v9[-v8];
      }
      a3 += 8;
      result += 8;
      a4 -= 8;
    }
    if (v5 <= a2)
    {
      v13 = &result[a4];
      if (a5 == 1 && result - a3 < 16)
      {
        do
        {
          v14 = *(_QWORD *)a3;
          a3 += 8;
          *(_QWORD *)result = v14;
          result += 8;
        }
        while (result < v13);
      }
      else
      {
        do
        {
          v15 = *(_OWORD *)a3;
          a3 += 16;
          *(_OWORD *)result = v15;
          result += 16;
        }
        while (result < v13);
      }
    }
    else
    {
      if (result <= a2)
      {
        v10 = a2 - result;
        if (a5 == 1 && result - a3 < 16)
        {
          v11 = (uint64_t *)a3;
          do
          {
            v12 = *v11++;
            *(_QWORD *)result = v12;
            result += 8;
          }
          while (result < a2);
        }
        else
        {
          v16 = (__int128 *)a3;
          do
          {
            v17 = *v16++;
            *(_OWORD *)result = v17;
            result += 16;
          }
          while (result < a2);
        }
        a3 += v10;
        result = a2;
      }
      while (result < v5)
      {
        v18 = *a3++;
        *result++ = v18;
      }
    }
  }
  else if (a4 >= 1)
  {
    do
    {
      v6 = *a3++;
      *result++ = v6;
    }
    while (result < v5);
  }
  return result;
}

uint64_t ZSTD_execSequenceEndSplitLitBuffer(char *a1, uint64_t a2, _BYTE *a3, unint64_t *a4, char **a5, uint64_t a6, char *a7, uint64_t a8, unint64_t a9)
{
  unint64_t v10;
  unint64_t v11;
  char *v13;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  const void *v22;
  size_t v23;
  uint64_t v24;

  v10 = *a4;
  v11 = a4[1] + *a4;
  if (v11 > a2 - (uint64_t)a1)
    return -70;
  v13 = *a5;
  if (v10 > a6 - (uint64_t)*a5)
    return -20;
  v17 = &v13[v10];
  if (v13 >= a1 || v17 <= a1)
  {
    v18 = &a1[v10];
    v19 = &a1[v10 - a4[2]];
    ZSTD_safecopyDstBeforeSrc(a1, v13, v10);
    *a5 = v17;
    v20 = (char *)a4[2];
    if ((unint64_t)v20 <= v18 - a7)
    {
      v24 = a4[1];
      a7 = v19;
    }
    else
    {
      if (v20 > &v18[-a8])
        return -20;
      v21 = v19 - a7;
      v22 = (const void *)(a9 + v19 - a7);
      v23 = a4[1];
      if ((unint64_t)v22 + v23 <= a9)
      {
        memmove(v18, v22, v23);
        return v11;
      }
      memmove(v18, v22, a7 - v19);
      v18 -= v21;
      v24 = a4[1] + v21;
      a4[1] = v24;
    }
    ZSTD_safecopy(v18, a3, a7, v24, 1);
    return v11;
  }
  return -70;
}

void *POOL_create()
{
  return &g_poolCtx;
}

uint64_t POOL_add(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  return a2(a3);
}

uint64_t ZSTD_getErrorCode(unint64_t a1)
{
  if (a1 >= 0xFFFFFFFFFFFFFF89)
    return -(int)a1;
  else
    return 0;
}

void *ZSTD_customMalloc(size_t size, uint64_t a2)
{
  if (*(_QWORD *)a2)
    return (void *)(*(uint64_t (**)(_QWORD, size_t))a2)(*(_QWORD *)(a2 + 16), size);
  else
    return malloc_type_malloc(size, 0x6A081B20uLL);
}

void ZSTD_customCalloc(size_t size, uint64_t a2)
{
  void *v3;

  if (*(_QWORD *)a2)
  {
    v3 = (void *)(*(uint64_t (**)(_QWORD, size_t))a2)(*(_QWORD *)(a2 + 16), size);
    bzero(v3, size);
  }
  else
  {
    malloc_type_calloc(1uLL, size, 0x7AA8671EuLL);
  }
}

void ZSTD_customFree(void *a1, uint64_t a2)
{
  void (*v2)(_QWORD, void *);

  if (a1)
  {
    v2 = *(void (**)(_QWORD, void *))(a2 + 8);
    if (v2)
      v2(*(_QWORD *)(a2 + 16), a1);
    else
      free(a1);
  }
}

uint64_t ZSTD_dedicatedDictSearch_lazy_loadDictionary(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  char v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)(result + 8);
  v3 = a2 - v2;
  v4 = *(_DWORD *)(result + 248);
  v5 = 1 << *(_DWORD *)(result + 244);
  v6 = *(unsigned int *)(result + 44);
  if (v5 >= a2 - (int)v2 - (int)v6)
    v7 = *(_DWORD *)(result + 44);
  else
    v7 = a2 - v2 - v5;
  if (((1 << *(_DWORD *)(result + 252)) - 3) >= 0xFF)
    v8 = 255;
  else
    v8 = (1 << *(_DWORD *)(result + 252)) - 3;
  v9 = v4 - 2;
  v10 = 3 << (v4 - 2);
  v26 = v3 >= v10;
  v11 = v3 - v10;
  if (v11 != 0 && v26)
    v12 = v11;
  else
    v12 = v6;
  v13 = *(_QWORD *)(result + 96);
  v14 = *(_QWORD *)(result + 112);
  v15 = v13 + 4 * (1 << v9);
  if (v3 > v6)
  {
    do
    {
      switch(*(_DWORD *)(result + 256))
      {
        case 5:
          v16 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v2 + v6);
          goto LABEL_17;
        case 6:
          v16 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v2 + v6);
          goto LABEL_17;
        case 7:
          v16 = 0xCF1BBCDCBFA56300 * *(_QWORD *)(v2 + v6);
          goto LABEL_17;
        case 8:
          v16 = 0xCF1BBCDCB7A56463 * *(_QWORD *)(v2 + v6);
LABEL_17:
          v17 = v16 >> (66 - v4);
          break;
        default:
          LODWORD(v17) = (-1640531535 * *(_DWORD *)(v2 + v6)) >> (34 - v4);
          break;
      }
      if (v6 >= v12)
        *(_DWORD *)(v15 + 4 * (v6 - v12)) = *(_DWORD *)(v13 + 4 * v17);
      *(_DWORD *)(v13 + 4 * v17) = v6++;
    }
    while (v6 < v3);
  }
  v18 = 0;
  v19 = 0;
  v20 = (1 << v9);
  do
  {
    v21 = *(_DWORD *)(v13 + 4 * v18);
    if (v21 < v12)
      goto LABEL_23;
    v23 = 0;
    v24 = 0;
    do
    {
      if (v21 < v7)
        ++v23;
      v25 = v24 + 1;
      v21 = *(_DWORD *)(v15 + 4 * (v21 - v12));
      v26 = v21 < v12 || v24++ >= 2;
    }
    while (!v26);
    if (v25 == 3 && v8)
    {
      v27 = 0;
      while (1)
      {
        if (v21 < v7)
        {
          if (!v21)
            break;
          if (++v23 > 3)
            break;
        }
        *(_DWORD *)(v14 + 4 * (v19 + v27++)) = v21;
        v26 = v21 >= v12;
        v28 = v21 - v12;
        if (!v26)
        {
          v22 = v27 + (v19 << 8);
          v19 += v27;
          goto LABEL_24;
        }
        v21 = *(_DWORD *)(v15 + 4 * v28);
        if (v8 == v27)
        {
          v19 += v27;
          v27 = v8;
          goto LABEL_45;
        }
      }
      v19 += v27;
      if (!v27)
        goto LABEL_23;
LABEL_45:
      v22 = v27 + ((v19 - v27) << 8);
    }
    else
    {
LABEL_23:
      v22 = 0;
    }
LABEL_24:
    *(_DWORD *)(v13 + 4 * v18++) = v22;
  }
  while (v18 != v20);
  v29 = (4 << v9) - 4;
  v30 = (int *)(v13 + 4 * (v20 - 1));
  v31 = 4 * v20 - 1;
  do
  {
    v32 = v13 + 4 * v29;
    v33 = *v30--;
    *(_DWORD *)(v32 + 8) = 0;
    *(_QWORD *)v32 = 0;
    *(_DWORD *)(v13 + 4 * v31) = v33;
    v29 -= 4;
    v31 -= 4;
    LODWORD(v20) = v20 - 1;
  }
  while ((_DWORD)v20);
  v34 = *(unsigned int *)(result + 44);
  if (v34 < v3)
  {
    v35 = 66 - v4;
    v36 = 34 - v4;
    do
    {
      switch(*(_DWORD *)(result + 256))
      {
        case 5:
          v37 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v2 + v34);
          goto LABEL_55;
        case 6:
          v37 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v2 + v34);
          goto LABEL_55;
        case 7:
          v37 = 0xCF1BBCDCBFA56300 * *(_QWORD *)(v2 + v34);
          goto LABEL_55;
        case 8:
          v37 = 0xCF1BBCDCB7A56463 * *(_QWORD *)(v2 + v34);
LABEL_55:
          v38 = v37 >> v35;
          break;
        default:
          LODWORD(v38) = (-1640531535 * *(_DWORD *)(v2 + v34)) >> v36;
          break;
      }
      v39 = 0;
      v40 = (4 * v38);
      v41 = v13 + 16 * (v38 & 0x3FFFFFFF);
      do
      {
        *(_DWORD *)(v41 + v39 + 8) = *(_DWORD *)(v41 + v39 + 4);
        v39 -= 4;
      }
      while (v39 != -8);
      *(_DWORD *)(v13 + 4 * v40) = v34++;
    }
    while (v34 < v3);
  }
  *(_DWORD *)(result + 44) = v3;
  return result;
}

uint64_t ZSTD_insertAndFindFirstIndex(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;

  v2 = *(_DWORD *)(a1 + 256);
  v3 = *(_QWORD *)(a1 + 96);
  v4 = *(_DWORD *)(a1 + 248);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 44);
  if (v6 < (int)a2 - (int)v5)
  {
    v7 = ~(-1 << *(_DWORD *)(a1 + 244));
    v8 = *(_QWORD *)(a1 + 112);
    do
    {
      switch(v2)
      {
        case 5:
          v9 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v5 + v6);
          goto LABEL_8;
        case 6:
          v9 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v5 + v6);
          goto LABEL_8;
        case 7:
          v9 = 0xCF1BBCDCBFA56300 * *(_QWORD *)(v5 + v6);
          goto LABEL_8;
        case 8:
          v9 = 0xCF1BBCDCB7A56463 * *(_QWORD *)(v5 + v6);
LABEL_8:
          v10 = v9 >> (64 - v4);
          break;
        default:
          v10 = (-1640531535 * *(_DWORD *)(v5 + v6)) >> (32 - v4);
          break;
      }
      *(_DWORD *)(v8 + 4 * (v6 & v7)) = *(_DWORD *)(v3 + 4 * v10);
      *(_DWORD *)(v3 + 4 * v10) = v6++;
    }
    while (v6 < ((_DWORD)a2 - v5));
  }
  *(_DWORD *)(a1 + 44) = (_DWORD)a2 - v5;
  switch(v2)
  {
    case 5:
      v11 = *a2;
      v12 = -1157627904;
      goto LABEL_18;
    case 6:
      v11 = *a2;
      v12 = -1080360960;
      goto LABEL_18;
    case 7:
      v11 = *a2;
      v12 = -1079680256;
      goto LABEL_18;
    case 8:
      v11 = *a2;
      v12 = -1213897629;
LABEL_18:
      v13 = (v11 * (v12 | 0xCF1BBCDC00000000)) >> -(char)v4;
      break;
    default:
      v13 = (-1640531535 * *(_DWORD *)a2) >> -(char)v4;
      break;
  }
  return *(unsigned int *)(v3 + 4 * v13);
}

uint64_t ZSTD_row_update(uint64_t result, int a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;

  v2 = *(_DWORD *)(result + 252);
  v3 = *(_DWORD *)(result + 256);
  if (v2 >= 6)
    v2 = 6;
  if (v2 <= 4)
    LOBYTE(v2) = 4;
  if (v3 >= 6)
    v3 = 6;
  v4 = *(unsigned int *)(result + 44);
  v5 = *(_QWORD *)(result + 8);
  if (v4 < a2 - (int)v5)
  {
    v6 = ~(-1 << v2);
    v7 = *(_QWORD *)(result + 96);
    v8 = *(_DWORD *)(result + 52);
    v9 = 56 - v8;
    v10 = *(_QWORD *)(result + 56);
    v11 = 24 - v8;
    do
    {
      if (v3 == 5)
      {
        v12 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v5 + v4);
      }
      else
      {
        if (v3 != 6)
        {
          LODWORD(v13) = (-1640531535 * *(_DWORD *)(v5 + v4)) >> v11;
          goto LABEL_15;
        }
        v12 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v5 + v4);
      }
      v13 = v12 >> v9;
LABEL_15:
      v14 = v13 >> 8 << v2;
      v15 = v7 + 4 * v14;
      v16 = (_BYTE *)(v10 + 2 * v14);
      v17 = (*v16 + 127) & v6;
      *v16 = (*v16 + 127) & v6;
      v16[v17 + 16] = v13;
      *(_DWORD *)(v15 + 4 * v17) = v4++;
    }
    while (v4 < (a2 - v5));
  }
  *(_DWORD *)(result + 44) = a2 - v5;
  return result;
}

unint64_t ZSTD_compressBlock_btlazy2(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  int v60;
  char *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  __int128 v69;
  char v70;
  uint64_t v71;
  _OWORD *v72;
  unint64_t v73;
  __int128 *v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  _BYTE *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int *v98;
  unint64_t v99;
  char *v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t (*v105)(uint64_t, unint64_t, unint64_t, uint64_t *);
  unint64_t v107;
  uint64_t v108;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = v7 + v8;
  v10 = *(_DWORD *)(a1 + 256);
  v11 = v10 - 7;
  v12 = 2 * (v10 > 3);
  v13 = v10 - 4;
  if (v11 < 0xFFFFFFFD)
    v13 = v12;
  v14 = *a3;
  v15 = a3[1];
  if ((_DWORD)a4 == (_DWORD)v9)
    v16 = (unint64_t)(a4 + 1);
  else
    v16 = (unint64_t)a4;
  v17 = v16 - v7;
  v18 = 1 << *(_DWORD *)(a1 + 240);
  v107 = (unint64_t)&a4[a5 - 8];
  if (v17 - (int)v8 > v18 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v8) = v17 - v18;
  v20 = v17 - v8;
  if (v15 <= v20)
    LODWORD(v21) = a3[1];
  else
    LODWORD(v21) = 0;
  if (v14 <= v20)
    v22 = v14;
  else
    v22 = 0;
  if (v16 < (unint64_t)&a4[a5 - 8])
  {
    v95 = v20;
    v96 = a3[1];
    v97 = *a3;
    v98 = a3;
    v99 = v9;
    v104 = (unint64_t)&a4[a5];
    v105 = *(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t *))off_1E6E2C458[v13];
    v24 = v6 - 7;
    v102 = v6 - 1;
    v103 = v6 - 3;
    v100 = (char *)(v6 - 32);
    while (1)
    {
      v25 = 0;
      v101 = v21;
      if (!(_DWORD)v22 || *(_DWORD *)(v16 + 1 - v22) != *(_DWORD *)(v16 + 1))
        goto LABEL_36;
      v26 = (char *)(v16 + 5);
      v27 = (_QWORD *)(v16 + 5 - v22);
      if (v24 <= v16 + 5)
        break;
      v28 = *(_QWORD *)v26 ^ *v27;
      if (!v28)
      {
        v62 = v16 + 13;
        while (1)
        {
          v63 = (_QWORD *)(v62 + v28);
          if (v62 + v28 >= v24)
            break;
          v64 = *(_QWORD *)(v16 + 13 - v22 + v28);
          v28 += 8;
          v65 = *v63 ^ v64;
          if (v65)
          {
            v29 = v28 + (__clz(__rbit64(v65)) >> 3);
            goto LABEL_35;
          }
        }
        v30 = (_DWORD *)(v16 + v28 + 13);
        v27 = (_QWORD *)((char *)v30 - v22);
        goto LABEL_25;
      }
      v29 = __clz(__rbit64(v28)) >> 3;
LABEL_35:
      v25 = v29 + 4;
LABEL_36:
      v108 = 999999999;
      v31 = v105(a1, v16, v6, &v108);
      if (v31 <= v25)
        v32 = v25;
      else
        v32 = v31;
      if (v32 >= 4)
      {
        if (v31 <= v25)
          v33 = (char *)(v16 + 1);
        else
          v33 = (char *)v16;
        if (v31 <= v25)
          v34 = 0;
        else
          v34 = v108;
        v35 = v32;
        v36 = v34;
        v37 = v33;
        v6 = v104;
        if (v16 < v107)
        {
          do
          {
            v37 = (char *)(v16 + 1);
            if (!v34 || !(_DWORD)v22 || *(_DWORD *)v37 != *(_DWORD *)&v37[-v22])
              goto LABEL_72;
            v38 = (char *)(v16 + 5);
            v39 = (_QWORD *)(v16 + 5 - v22);
            if (v24 <= v16 + 5)
            {
              v42 = (unsigned __int16 *)(v16 + 5);
            }
            else
            {
              v40 = *(_QWORD *)v38 ^ *v39;
              if (v40)
              {
                v41 = __clz(__rbit64(v40)) >> 3;
LABEL_70:
                v46 = v41 + 4;
                if (3 * (int)v46 > (int)(3 * v32 + (__clz(v34 + 1) ^ 0xFFFFFFE0) + 2))
                {
                  v34 = 0;
                  v32 = v46;
                  v33 = (char *)(v16 + 1);
                }
                goto LABEL_72;
              }
              v42 = (unsigned __int16 *)(v16 + 13);
              while ((unint64_t)v42 < v24)
              {
                v43 = *(_QWORD *)((char *)v42 - v22);
                v44 = *(_QWORD *)v42;
                v42 += 4;
                v45 = v44 ^ v43;
                if (v45)
                {
                  v42 = (unsigned __int16 *)((char *)v42 + (__clz(__rbit64(v45)) >> 3) - 8);
                  goto LABEL_69;
                }
              }
              v39 = (_QWORD *)((char *)v42 - v22);
            }
            if ((unint64_t)v42 < v103 && *(_DWORD *)v39 == *(_DWORD *)v42)
            {
              v42 += 2;
              v39 = (_QWORD *)((char *)v39 + 4);
            }
            if ((unint64_t)v42 < v102 && *(unsigned __int16 *)v39 == *v42)
            {
              ++v42;
              v39 = (_QWORD *)((char *)v39 + 2);
            }
            if ((unint64_t)v42 < v6 && *(unsigned __int8 *)v39 == *(unsigned __int8 *)v42)
              v42 = (unsigned __int16 *)((char *)v42 + 1);
LABEL_69:
            v41 = (char *)v42 - v38;
            if (v41 <= 0xFFFFFFFFFFFFFFFBLL)
              goto LABEL_70;
LABEL_72:
            v108 = 999999999;
            v35 = v105(a1, v16 + 1, v6, &v108);
            if (v35 >= 4)
            {
              v36 = v108;
              if ((int)((__clz(v108 + 1) ^ 0xFFFFFFE0) + 4 * v35 + 1) > (int)((__clz(v34 + 1) ^ 0xFFFFFFE0)
                                                                             + 4 * v32
                                                                             + 5))
                goto LABEL_102;
            }
            if ((unint64_t)v37 >= v107)
              goto LABEL_106;
            v37 = (char *)(v16 + 2);
            if (!v34)
            {
              v47 = v104;
              goto LABEL_100;
            }
            v47 = v104;
            if ((_DWORD)v22 && *(_DWORD *)v37 == *(_DWORD *)&v37[-v22])
            {
              v48 = (char *)(v16 + 6);
              v49 = (_QWORD *)(v16 + 6 - v22);
              if (v24 <= v16 + 6)
              {
                v52 = (unsigned __int16 *)(v16 + 6);
              }
              else
              {
                v50 = *(_QWORD *)v48 ^ *v49;
                if (v50)
                {
                  v51 = __clz(__rbit64(v50)) >> 3;
LABEL_98:
                  v56 = v51 + 4;
                  if ((int)((__clz(v34 + 1) ^ 0xFFFFFFE0) + 4 * v32 + 2) < 4 * (int)v56)
                  {
                    v34 = 0;
                    v32 = v56;
                    v33 = (char *)(v16 + 2);
                  }
                  goto LABEL_100;
                }
                v52 = (unsigned __int16 *)(v16 + 14);
                while ((unint64_t)v52 < v24)
                {
                  v53 = *(_QWORD *)((char *)v52 - v22);
                  v54 = *(_QWORD *)v52;
                  v52 += 4;
                  v55 = v54 ^ v53;
                  if (v55)
                  {
                    v52 = (unsigned __int16 *)((char *)v52 + (__clz(__rbit64(v55)) >> 3) - 8);
                    goto LABEL_97;
                  }
                }
                v49 = (_QWORD *)((char *)v52 - v22);
              }
              if ((unint64_t)v52 < v103 && *(_DWORD *)v49 == *(_DWORD *)v52)
              {
                v52 += 2;
                v49 = (_QWORD *)((char *)v49 + 4);
              }
              if ((unint64_t)v52 < v102 && *(unsigned __int16 *)v49 == *v52)
              {
                ++v52;
                v49 = (_QWORD *)((char *)v49 + 2);
              }
              if ((unint64_t)v52 < v104 && *(unsigned __int8 *)v49 == *(unsigned __int8 *)v52)
                v52 = (unsigned __int16 *)((char *)v52 + 1);
LABEL_97:
              v51 = (char *)v52 - v48;
              if (v51 <= 0xFFFFFFFFFFFFFFFBLL)
                goto LABEL_98;
            }
LABEL_100:
            v108 = 999999999;
            v35 = v105(a1, v16 + 2, v47, &v108);
            if (v35 < 4
              || (v36 = v108,
                  (int)((__clz(v108 + 1) ^ 0xFFFFFFE0) + 4 * v35 + 1) <= (int)((__clz(v34 + 1) ^ 0xFFFFFFE0)
                                                                             + 4 * v32
                                                                             + 8)))
            {
LABEL_106:
              v35 = v32;
              v36 = v34;
              v37 = v33;
              v6 = v104;
              break;
            }
LABEL_102:
            v6 = v104;
            v16 = (unint64_t)v37;
            v33 = v37;
            v34 = v36;
            v32 = v35;
          }
          while ((unint64_t)v37 < v107);
        }
        v21 = v101;
        if (v36 <= 2)
        {
          v57 = v100;
        }
        else
        {
          v57 = v100;
          if (v37 <= v5 || (unint64_t)&v37[-v36 + 2] <= v99)
          {
            v59 = v37;
          }
          else
          {
            v58 = 1 - v36;
            v59 = v37;
            while (1)
            {
              v60 = *--v59;
              if (v60 != v37[v58])
                break;
              ++v35;
              if (v59 > v5)
              {
                v61 = &v37[v58];
                v37 = v59;
                if ((unint64_t)v61 > v99)
                  continue;
              }
              goto LABEL_122;
            }
            v59 = v37;
          }
LABEL_122:
          v21 = v22;
          v22 = (v36 - 2);
          v37 = v59;
        }
        v66 = v37 - v5;
        v67 = *(_OWORD **)(a2 + 24);
        if (v37 <= v57)
        {
          *v67 = *(_OWORD *)v5;
          v71 = *(_QWORD *)(a2 + 24);
          if (v66 > 0x10)
          {
            v72 = (_OWORD *)(v71 + 16);
            v73 = v71 + v66;
            v74 = (__int128 *)(v5 + 16);
            do
            {
              v75 = *v74++;
              *v72++ = v75;
            }
            while ((unint64_t)v72 < v73);
            goto LABEL_134;
          }
          *(_QWORD *)(a2 + 24) = v71 + v66;
          v76 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          if (v5 <= v57)
          {
            v68 = (_OWORD *)((char *)v67 + v57 - v5);
            do
            {
              v69 = *(_OWORD *)v5;
              v5 += 16;
              *v67++ = v69;
            }
            while (v67 < v68);
            v5 = v57;
            v67 = v68;
          }
          while (v5 < v37)
          {
            v70 = *v5++;
            *(_BYTE *)v67 = v70;
            v67 = (_OWORD *)((char *)v67 + 1);
          }
LABEL_134:
          *(_QWORD *)(a2 + 24) += v66;
          v76 = *(_QWORD *)(a2 + 8);
          if (v66 >= 0x10000)
          {
            v77 = (unint64_t)(v76 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v77;
          }
        }
        *(_WORD *)(v76 + 4) = v66;
        *(_DWORD *)v76 = v36 + 1;
        if (v35 - 3 >= 0x10000)
        {
          v78 = (unint64_t)(v76 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v78;
        }
        *(_WORD *)(v76 + 6) = v35 - 3;
        v79 = v76 + 8;
        *(_QWORD *)(a2 + 8) = v76 + 8;
        v5 = &v37[v35];
        if (!(_DWORD)v21 || (unint64_t)v5 > v107)
        {
LABEL_171:
          v16 = (unint64_t)v5;
          goto LABEL_172;
        }
        v80 = v22;
        v81 = v21;
        while (2)
        {
          v22 = v81;
          v81 = v80;
          if (*(_DWORD *)v5 != *(_DWORD *)&v5[-v22])
          {
            LODWORD(v21) = v22;
            v22 = v80;
            goto LABEL_171;
          }
          v82 = v5 + 4;
          v83 = &v5[-v22 + 4];
          if (v24 <= (unint64_t)(v5 + 4))
          {
            v86 = v5 + 4;
          }
          else
          {
            v84 = *(_QWORD *)v82 ^ *(_QWORD *)v83;
            if (v84)
            {
              v85 = __clz(__rbit64(v84)) >> 3;
LABEL_157:
              if (v5 <= v57)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                v79 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v79 + 4) = 0;
              *(_DWORD *)v79 = 1;
              if (v85 + 1 >= 0x10000)
              {
                v87 = (unint64_t)(v79 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v87;
              }
              *(_WORD *)(v79 + 6) = v85 + 1;
              v79 += 8;
              *(_QWORD *)(a2 + 8) = v79;
              v5 += v85 + 4;
              if (!(_DWORD)v81)
              {
                LODWORD(v21) = 0;
                goto LABEL_171;
              }
              v80 = v22;
              LODWORD(v21) = v81;
              v16 = (unint64_t)v5;
              if ((unint64_t)v5 > v107)
                goto LABEL_172;
              continue;
            }
            v88 = v5 + 12;
            while (1)
            {
              v89 = &v88[v84];
              if ((unint64_t)&v88[v84] >= v24)
                break;
              v90 = *(_QWORD *)&v5[v84 + 12 - v22];
              v84 += 8;
              v91 = *v89 ^ v90;
              if (v91)
              {
                v85 = v84 + (__clz(__rbit64(v91)) >> 3);
                goto LABEL_157;
              }
            }
            v86 = &v5[v84 + 12];
            v83 = &v86[-v22];
          }
          break;
        }
        if ((unint64_t)v86 < v103 && *(_DWORD *)v83 == *(_DWORD *)v86)
        {
          v86 += 4;
          v83 += 4;
        }
        if ((unint64_t)v86 < v102 && *(unsigned __int16 *)v83 == *(unsigned __int16 *)v86)
        {
          v86 += 2;
          v83 += 2;
        }
        if ((unint64_t)v86 < v6 && *v83 == *v86)
          ++v86;
        v85 = v86 - v82;
        goto LABEL_157;
      }
      v16 += ((uint64_t)(v16 - (_QWORD)v5) >> 8) + 1;
      v6 = v104;
      LODWORD(v21) = v101;
LABEL_172:
      if (v16 >= v107)
      {
        a3 = v98;
        v15 = v96;
        v14 = v97;
        v20 = v95;
        goto LABEL_175;
      }
    }
    v30 = (_DWORD *)(v16 + 5);
LABEL_25:
    if ((unint64_t)v30 < v103 && *(_DWORD *)v27 == *v30)
    {
      ++v30;
      v27 = (_QWORD *)((char *)v27 + 4);
    }
    if ((unint64_t)v30 < v102 && *(unsigned __int16 *)v27 == *(unsigned __int16 *)v30)
    {
      v30 = (_DWORD *)((char *)v30 + 2);
      v27 = (_QWORD *)((char *)v27 + 2);
    }
    if ((unint64_t)v30 < v6 && *(unsigned __int8 *)v27 == *(unsigned __int8 *)v30)
      v30 = (_DWORD *)((char *)v30 + 1);
    v29 = (char *)v30 - v26;
    goto LABEL_35;
  }
LABEL_175:
  if (v15 <= v20)
    v92 = 0;
  else
    v92 = v15;
  if (v14 > v20)
    v92 = v14;
  if ((_DWORD)v22)
    v93 = v22;
  else
    v93 = v92;
  if ((_DWORD)v21)
    v92 = v21;
  *a3 = v93;
  a3[1] = v92;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy2(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int16 *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  int v60;
  char *v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _OWORD *v67;
  _OWORD *v68;
  __int128 v69;
  char v70;
  uint64_t v71;
  _OWORD *v72;
  unint64_t v73;
  __int128 *v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  unint64_t v87;
  _BYTE *v88;
  _QWORD *v89;
  uint64_t v90;
  unint64_t v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int *v98;
  unint64_t v99;
  char *v100;
  unsigned int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t (*v105)(uint64_t, unint64_t, unint64_t, uint64_t *);
  unint64_t v107;
  uint64_t v108;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = v7 + v8;
  v10 = *(_DWORD *)(a1 + 256);
  v11 = v10 - 7;
  v12 = 2 * (v10 > 3);
  v13 = v10 - 4;
  if (v11 < 0xFFFFFFFD)
    v13 = v12;
  v14 = *a3;
  v15 = a3[1];
  if ((_DWORD)a4 == (_DWORD)v9)
    v16 = (unint64_t)(a4 + 1);
  else
    v16 = (unint64_t)a4;
  v17 = v16 - v7;
  v18 = 1 << *(_DWORD *)(a1 + 240);
  v107 = (unint64_t)&a4[a5 - 8];
  if (v17 - (int)v8 > v18 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v8) = v17 - v18;
  v20 = v17 - v8;
  if (v15 <= v20)
    LODWORD(v21) = a3[1];
  else
    LODWORD(v21) = 0;
  if (v14 <= v20)
    v22 = v14;
  else
    v22 = 0;
  if (v16 < (unint64_t)&a4[a5 - 8])
  {
    v95 = v20;
    v96 = a3[1];
    v97 = *a3;
    v98 = a3;
    v99 = v9;
    v104 = (unint64_t)&a4[a5];
    v105 = *(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t *))off_1E6E2C3F8[v13];
    v24 = v6 - 7;
    v102 = v6 - 1;
    v103 = v6 - 3;
    v100 = (char *)(v6 - 32);
    while (1)
    {
      v25 = 0;
      v101 = v21;
      if (!(_DWORD)v22 || *(_DWORD *)(v16 + 1 - v22) != *(_DWORD *)(v16 + 1))
        goto LABEL_36;
      v26 = (char *)(v16 + 5);
      v27 = (_QWORD *)(v16 + 5 - v22);
      if (v24 <= v16 + 5)
        break;
      v28 = *(_QWORD *)v26 ^ *v27;
      if (!v28)
      {
        v62 = v16 + 13;
        while (1)
        {
          v63 = (_QWORD *)(v62 + v28);
          if (v62 + v28 >= v24)
            break;
          v64 = *(_QWORD *)(v16 + 13 - v22 + v28);
          v28 += 8;
          v65 = *v63 ^ v64;
          if (v65)
          {
            v29 = v28 + (__clz(__rbit64(v65)) >> 3);
            goto LABEL_35;
          }
        }
        v30 = (_DWORD *)(v16 + v28 + 13);
        v27 = (_QWORD *)((char *)v30 - v22);
        goto LABEL_25;
      }
      v29 = __clz(__rbit64(v28)) >> 3;
LABEL_35:
      v25 = v29 + 4;
LABEL_36:
      v108 = 999999999;
      v31 = v105(a1, v16, v6, &v108);
      if (v31 <= v25)
        v32 = v25;
      else
        v32 = v31;
      if (v32 >= 4)
      {
        if (v31 <= v25)
          v33 = (char *)(v16 + 1);
        else
          v33 = (char *)v16;
        if (v31 <= v25)
          v34 = 0;
        else
          v34 = v108;
        v35 = v32;
        v36 = v34;
        v37 = v33;
        v6 = v104;
        if (v16 < v107)
        {
          do
          {
            v37 = (char *)(v16 + 1);
            if (!v34 || !(_DWORD)v22 || *(_DWORD *)v37 != *(_DWORD *)&v37[-v22])
              goto LABEL_72;
            v38 = (char *)(v16 + 5);
            v39 = (_QWORD *)(v16 + 5 - v22);
            if (v24 <= v16 + 5)
            {
              v42 = (unsigned __int16 *)(v16 + 5);
            }
            else
            {
              v40 = *(_QWORD *)v38 ^ *v39;
              if (v40)
              {
                v41 = __clz(__rbit64(v40)) >> 3;
LABEL_70:
                v46 = v41 + 4;
                if (3 * (int)v46 > (int)(3 * v32 + (__clz(v34 + 1) ^ 0xFFFFFFE0) + 2))
                {
                  v34 = 0;
                  v32 = v46;
                  v33 = (char *)(v16 + 1);
                }
                goto LABEL_72;
              }
              v42 = (unsigned __int16 *)(v16 + 13);
              while ((unint64_t)v42 < v24)
              {
                v43 = *(_QWORD *)((char *)v42 - v22);
                v44 = *(_QWORD *)v42;
                v42 += 4;
                v45 = v44 ^ v43;
                if (v45)
                {
                  v42 = (unsigned __int16 *)((char *)v42 + (__clz(__rbit64(v45)) >> 3) - 8);
                  goto LABEL_69;
                }
              }
              v39 = (_QWORD *)((char *)v42 - v22);
            }
            if ((unint64_t)v42 < v103 && *(_DWORD *)v39 == *(_DWORD *)v42)
            {
              v42 += 2;
              v39 = (_QWORD *)((char *)v39 + 4);
            }
            if ((unint64_t)v42 < v102 && *(unsigned __int16 *)v39 == *v42)
            {
              ++v42;
              v39 = (_QWORD *)((char *)v39 + 2);
            }
            if ((unint64_t)v42 < v6 && *(unsigned __int8 *)v39 == *(unsigned __int8 *)v42)
              v42 = (unsigned __int16 *)((char *)v42 + 1);
LABEL_69:
            v41 = (char *)v42 - v38;
            if (v41 <= 0xFFFFFFFFFFFFFFFBLL)
              goto LABEL_70;
LABEL_72:
            v108 = 999999999;
            v35 = v105(a1, v16 + 1, v6, &v108);
            if (v35 >= 4)
            {
              v36 = v108;
              if ((int)((__clz(v108 + 1) ^ 0xFFFFFFE0) + 4 * v35 + 1) > (int)((__clz(v34 + 1) ^ 0xFFFFFFE0)
                                                                             + 4 * v32
                                                                             + 5))
                goto LABEL_102;
            }
            if ((unint64_t)v37 >= v107)
              goto LABEL_106;
            v37 = (char *)(v16 + 2);
            if (!v34)
            {
              v47 = v104;
              goto LABEL_100;
            }
            v47 = v104;
            if ((_DWORD)v22 && *(_DWORD *)v37 == *(_DWORD *)&v37[-v22])
            {
              v48 = (char *)(v16 + 6);
              v49 = (_QWORD *)(v16 + 6 - v22);
              if (v24 <= v16 + 6)
              {
                v52 = (unsigned __int16 *)(v16 + 6);
              }
              else
              {
                v50 = *(_QWORD *)v48 ^ *v49;
                if (v50)
                {
                  v51 = __clz(__rbit64(v50)) >> 3;
LABEL_98:
                  v56 = v51 + 4;
                  if ((int)((__clz(v34 + 1) ^ 0xFFFFFFE0) + 4 * v32 + 2) < 4 * (int)v56)
                  {
                    v34 = 0;
                    v32 = v56;
                    v33 = (char *)(v16 + 2);
                  }
                  goto LABEL_100;
                }
                v52 = (unsigned __int16 *)(v16 + 14);
                while ((unint64_t)v52 < v24)
                {
                  v53 = *(_QWORD *)((char *)v52 - v22);
                  v54 = *(_QWORD *)v52;
                  v52 += 4;
                  v55 = v54 ^ v53;
                  if (v55)
                  {
                    v52 = (unsigned __int16 *)((char *)v52 + (__clz(__rbit64(v55)) >> 3) - 8);
                    goto LABEL_97;
                  }
                }
                v49 = (_QWORD *)((char *)v52 - v22);
              }
              if ((unint64_t)v52 < v103 && *(_DWORD *)v49 == *(_DWORD *)v52)
              {
                v52 += 2;
                v49 = (_QWORD *)((char *)v49 + 4);
              }
              if ((unint64_t)v52 < v102 && *(unsigned __int16 *)v49 == *v52)
              {
                ++v52;
                v49 = (_QWORD *)((char *)v49 + 2);
              }
              if ((unint64_t)v52 < v104 && *(unsigned __int8 *)v49 == *(unsigned __int8 *)v52)
                v52 = (unsigned __int16 *)((char *)v52 + 1);
LABEL_97:
              v51 = (char *)v52 - v48;
              if (v51 <= 0xFFFFFFFFFFFFFFFBLL)
                goto LABEL_98;
            }
LABEL_100:
            v108 = 999999999;
            v35 = v105(a1, v16 + 2, v47, &v108);
            if (v35 < 4
              || (v36 = v108,
                  (int)((__clz(v108 + 1) ^ 0xFFFFFFE0) + 4 * v35 + 1) <= (int)((__clz(v34 + 1) ^ 0xFFFFFFE0)
                                                                             + 4 * v32
                                                                             + 8)))
            {
LABEL_106:
              v35 = v32;
              v36 = v34;
              v37 = v33;
              v6 = v104;
              break;
            }
LABEL_102:
            v6 = v104;
            v16 = (unint64_t)v37;
            v33 = v37;
            v34 = v36;
            v32 = v35;
          }
          while ((unint64_t)v37 < v107);
        }
        v21 = v101;
        if (v36 <= 2)
        {
          v57 = v100;
        }
        else
        {
          v57 = v100;
          if (v37 <= v5 || (unint64_t)&v37[-v36 + 2] <= v99)
          {
            v59 = v37;
          }
          else
          {
            v58 = 1 - v36;
            v59 = v37;
            while (1)
            {
              v60 = *--v59;
              if (v60 != v37[v58])
                break;
              ++v35;
              if (v59 > v5)
              {
                v61 = &v37[v58];
                v37 = v59;
                if ((unint64_t)v61 > v99)
                  continue;
              }
              goto LABEL_122;
            }
            v59 = v37;
          }
LABEL_122:
          v21 = v22;
          v22 = (v36 - 2);
          v37 = v59;
        }
        v66 = v37 - v5;
        v67 = *(_OWORD **)(a2 + 24);
        if (v37 <= v57)
        {
          *v67 = *(_OWORD *)v5;
          v71 = *(_QWORD *)(a2 + 24);
          if (v66 > 0x10)
          {
            v72 = (_OWORD *)(v71 + 16);
            v73 = v71 + v66;
            v74 = (__int128 *)(v5 + 16);
            do
            {
              v75 = *v74++;
              *v72++ = v75;
            }
            while ((unint64_t)v72 < v73);
            goto LABEL_134;
          }
          *(_QWORD *)(a2 + 24) = v71 + v66;
          v76 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          if (v5 <= v57)
          {
            v68 = (_OWORD *)((char *)v67 + v57 - v5);
            do
            {
              v69 = *(_OWORD *)v5;
              v5 += 16;
              *v67++ = v69;
            }
            while (v67 < v68);
            v5 = v57;
            v67 = v68;
          }
          while (v5 < v37)
          {
            v70 = *v5++;
            *(_BYTE *)v67 = v70;
            v67 = (_OWORD *)((char *)v67 + 1);
          }
LABEL_134:
          *(_QWORD *)(a2 + 24) += v66;
          v76 = *(_QWORD *)(a2 + 8);
          if (v66 >= 0x10000)
          {
            v77 = (unint64_t)(v76 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v77;
          }
        }
        *(_WORD *)(v76 + 4) = v66;
        *(_DWORD *)v76 = v36 + 1;
        if (v35 - 3 >= 0x10000)
        {
          v78 = (unint64_t)(v76 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v78;
        }
        *(_WORD *)(v76 + 6) = v35 - 3;
        v79 = v76 + 8;
        *(_QWORD *)(a2 + 8) = v76 + 8;
        v5 = &v37[v35];
        if (!(_DWORD)v21 || (unint64_t)v5 > v107)
        {
LABEL_171:
          v16 = (unint64_t)v5;
          goto LABEL_172;
        }
        v80 = v22;
        v81 = v21;
        while (2)
        {
          v22 = v81;
          v81 = v80;
          if (*(_DWORD *)v5 != *(_DWORD *)&v5[-v22])
          {
            LODWORD(v21) = v22;
            v22 = v80;
            goto LABEL_171;
          }
          v82 = v5 + 4;
          v83 = &v5[-v22 + 4];
          if (v24 <= (unint64_t)(v5 + 4))
          {
            v86 = v5 + 4;
          }
          else
          {
            v84 = *(_QWORD *)v82 ^ *(_QWORD *)v83;
            if (v84)
            {
              v85 = __clz(__rbit64(v84)) >> 3;
LABEL_157:
              if (v5 <= v57)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                v79 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v79 + 4) = 0;
              *(_DWORD *)v79 = 1;
              if (v85 + 1 >= 0x10000)
              {
                v87 = (unint64_t)(v79 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v87;
              }
              *(_WORD *)(v79 + 6) = v85 + 1;
              v79 += 8;
              *(_QWORD *)(a2 + 8) = v79;
              v5 += v85 + 4;
              if (!(_DWORD)v81)
              {
                LODWORD(v21) = 0;
                goto LABEL_171;
              }
              v80 = v22;
              LODWORD(v21) = v81;
              v16 = (unint64_t)v5;
              if ((unint64_t)v5 > v107)
                goto LABEL_172;
              continue;
            }
            v88 = v5 + 12;
            while (1)
            {
              v89 = &v88[v84];
              if ((unint64_t)&v88[v84] >= v24)
                break;
              v90 = *(_QWORD *)&v5[v84 + 12 - v22];
              v84 += 8;
              v91 = *v89 ^ v90;
              if (v91)
              {
                v85 = v84 + (__clz(__rbit64(v91)) >> 3);
                goto LABEL_157;
              }
            }
            v86 = &v5[v84 + 12];
            v83 = &v86[-v22];
          }
          break;
        }
        if ((unint64_t)v86 < v103 && *(_DWORD *)v83 == *(_DWORD *)v86)
        {
          v86 += 4;
          v83 += 4;
        }
        if ((unint64_t)v86 < v102 && *(unsigned __int16 *)v83 == *(unsigned __int16 *)v86)
        {
          v86 += 2;
          v83 += 2;
        }
        if ((unint64_t)v86 < v6 && *v83 == *v86)
          ++v86;
        v85 = v86 - v82;
        goto LABEL_157;
      }
      v16 += ((uint64_t)(v16 - (_QWORD)v5) >> 8) + 1;
      v6 = v104;
      LODWORD(v21) = v101;
LABEL_172:
      if (v16 >= v107)
      {
        a3 = v98;
        v15 = v96;
        v14 = v97;
        v20 = v95;
        goto LABEL_175;
      }
    }
    v30 = (_DWORD *)(v16 + 5);
LABEL_25:
    if ((unint64_t)v30 < v103 && *(_DWORD *)v27 == *v30)
    {
      ++v30;
      v27 = (_QWORD *)((char *)v27 + 4);
    }
    if ((unint64_t)v30 < v102 && *(unsigned __int16 *)v27 == *(unsigned __int16 *)v30)
    {
      v30 = (_DWORD *)((char *)v30 + 2);
      v27 = (_QWORD *)((char *)v27 + 2);
    }
    if ((unint64_t)v30 < v6 && *(unsigned __int8 *)v27 == *(unsigned __int8 *)v30)
      v30 = (_DWORD *)((char *)v30 + 1);
    v29 = (char *)v30 - v26;
    goto LABEL_35;
  }
LABEL_175:
  if (v15 <= v20)
    v92 = 0;
  else
    v92 = v15;
  if (v14 > v20)
    v92 = v14;
  if ((_DWORD)v22)
    v93 = v22;
  else
    v93 = v92;
  if ((_DWORD)v21)
    v92 = v21;
  *a3 = v93;
  a3[1] = v92;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  int v18;
  unsigned int v19;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  unint64_t v38;
  unsigned __int16 *v39;
  char *v40;
  char *v41;
  char *v42;
  unsigned __int16 *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  _OWORD *v60;
  _OWORD *v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  _OWORD *v65;
  unint64_t v66;
  __int128 *v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  _BYTE *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  char *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unsigned int v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t (*v99)(uint64_t, char *, unint64_t, uint64_t *);
  uint64_t v101;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = (unint64_t)&a4[a5 - 8];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = v8 + v9;
  v11 = *(_DWORD *)(a1 + 256);
  v12 = v11 - 7;
  v13 = 2 * (v11 > 3);
  v14 = v11 - 4;
  if (v12 < 0xFFFFFFFD)
    v14 = v13;
  v15 = *a3;
  v16 = a3[1];
  if ((_DWORD)a4 == (_DWORD)v10)
    v17 = a4 + 1;
  else
    v17 = a4;
  v18 = (_DWORD)v17 - v8;
  v19 = 1 << *(_DWORD *)(a1 + 240);
  if (v18 - (int)v9 > v19 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v9) = v18 - v19;
  v21 = v18 - v9;
  if (v16 <= v21)
    LODWORD(v22) = a3[1];
  else
    LODWORD(v22) = 0;
  if (v15 <= v21)
    v23 = v15;
  else
    v23 = 0;
  if ((unint64_t)v17 < v7)
  {
    v88 = v21;
    v89 = a3[1];
    v90 = *a3;
    v91 = a3;
    v98 = (unint64_t)&a4[a5];
    v99 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *))off_1E6E2C3F8[v14];
    v25 = v6 - 7;
    v26 = v6 - 3;
    v27 = v6 - 1;
    v97 = (unint64_t)&a4[a5 - 8];
    v93 = v10;
    v94 = v6 - 1;
    v95 = v6 - 3;
    v92 = (char *)(v6 - 32);
    while (1)
    {
      v96 = v22;
      v28 = 0;
      if ((_DWORD)v23 && *(_DWORD *)&v17[-v23 + 1] == *(_DWORD *)(v17 + 1))
      {
        v29 = v17 + 5;
        v30 = &v17[-v23 + 5];
        if (v25 <= (unint64_t)(v17 + 5))
        {
          v33 = v17 + 5;
        }
        else
        {
          v31 = *(_QWORD *)v29 ^ *(_QWORD *)v30;
          if (v31)
          {
            v32 = __clz(__rbit64(v31)) >> 3;
            goto LABEL_35;
          }
          v51 = v17 + 13;
          while (1)
          {
            v52 = &v51[v31];
            if ((unint64_t)&v51[v31] >= v25)
              break;
            v53 = *(_QWORD *)&v17[v31 + 13 - v23];
            v31 += 8;
            v54 = *v52 ^ v53;
            if (v54)
            {
              v32 = v31 + (__clz(__rbit64(v54)) >> 3);
              goto LABEL_35;
            }
          }
          v33 = &v17[v31 + 13];
          v30 = &v33[-v23];
        }
        if ((unint64_t)v33 < v26 && *(_DWORD *)v30 == *(_DWORD *)v33)
        {
          v33 += 4;
          v30 += 4;
        }
        if ((unint64_t)v33 < v27 && *(unsigned __int16 *)v30 == *(unsigned __int16 *)v33)
        {
          v33 += 2;
          v30 += 2;
        }
        if ((unint64_t)v33 < v6 && *v30 == *v33)
          ++v33;
        v32 = v33 - v29;
LABEL_35:
        v28 = v32 + 4;
      }
      v101 = 999999999;
      v34 = v99(a1, v17, v6, &v101);
      if (v34 <= v28)
        v35 = v28;
      else
        v35 = v34;
      if (v35 < 4)
      {
        v17 += ((v17 - v5) >> 8) + 1;
        v27 = v94;
        v26 = v95;
        LODWORD(v22) = v96;
        goto LABEL_143;
      }
      v36 = v7;
      if (v34 <= v28)
        v37 = v17 + 1;
      else
        v37 = v17;
      if (v34 <= v28)
        v38 = 0;
      else
        v38 = v101;
      if ((unint64_t)v17 >= v36)
        goto LABEL_81;
      v39 = (unsigned __int16 *)(v17 + 13);
      do
      {
        v40 = v17 + 1;
        if (!v38 || !(_DWORD)v23 || *(_DWORD *)v40 != *(_DWORD *)&v40[-v23])
          goto LABEL_71;
        v41 = v17 + 5;
        v42 = &v17[-v23 + 5];
        if (v25 <= (unint64_t)(v17 + 5))
        {
          v43 = (unsigned __int16 *)(v17 + 5);
        }
        else
        {
          v43 = v39;
          v44 = *(_QWORD *)v41 ^ *(_QWORD *)v42;
          if (v44)
          {
            v45 = __clz(__rbit64(v44)) >> 3;
LABEL_69:
            v49 = v45 + 4;
            if (3 * (int)v49 > (int)(3 * v35 + (__clz(v38 + 1) ^ 0xFFFFFFE0) + 2))
            {
              v38 = 0;
              v35 = v49;
              v37 = v17 + 1;
            }
            goto LABEL_71;
          }
          while ((unint64_t)v43 < v25)
          {
            v46 = *(_QWORD *)((char *)v43 - v23);
            v47 = *(_QWORD *)v43;
            v43 += 4;
            v48 = v47 ^ v46;
            if (v48)
            {
              v43 = (unsigned __int16 *)((char *)v43 + (__clz(__rbit64(v48)) >> 3) - 8);
              goto LABEL_68;
            }
          }
          v42 = (char *)v43 - v23;
        }
        if ((unint64_t)v43 < v95 && *(_DWORD *)v42 == *(_DWORD *)v43)
        {
          v43 += 2;
          v42 += 4;
        }
        if ((unint64_t)v43 < v94 && *(unsigned __int16 *)v42 == *v43)
        {
          ++v43;
          v42 += 2;
        }
        if ((unint64_t)v43 < v98 && *v42 == *(_BYTE *)v43)
          v43 = (unsigned __int16 *)((char *)v43 + 1);
LABEL_68:
        v45 = (char *)v43 - v41;
        if (v45 <= 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_69;
LABEL_71:
        v101 = 999999999;
        v50 = v99(a1, v17 + 1, v98, &v101);
        if (v50 < 4
          || (int)((__clz(v101 + 1) ^ 0xFFFFFFE0) + 4 * v50 + 1) <= (int)((__clz(v38 + 1) ^ 0xFFFFFFE0) + 4 * v35 + 5))
        {
          goto LABEL_80;
        }
        v39 = (unsigned __int16 *)((char *)v39 + 1);
        ++v17;
        v37 = v40;
        v38 = v101;
        v35 = v50;
      }
      while (v40 != (char *)v97);
      v35 = v50;
      v38 = v101;
      v37 = (char *)v97;
LABEL_80:
      v6 = v98;
LABEL_81:
      v22 = v96;
      if (v38 > 2)
      {
        if (v37 > v5 && (unint64_t)&v37[-v38 + 2] > v93)
        {
          v55 = 1 - v38;
          v56 = (unint64_t)v37;
          while (1)
          {
            v57 = *(unsigned __int8 *)--v56;
            if (v57 != v37[v55])
              break;
            ++v35;
            if (v56 > (unint64_t)v5)
            {
              v58 = (unint64_t)&v37[v55];
              v37 = (char *)v56;
              if (v58 > v93)
                continue;
            }
            goto LABEL_90;
          }
        }
        v56 = (unint64_t)v37;
LABEL_90:
        v22 = v23;
        v23 = (v38 - 2);
        v37 = (char *)v56;
      }
      v59 = v37 - v5;
      v60 = *(_OWORD **)(a2 + 24);
      if (v37 <= v92)
      {
        *v60 = *(_OWORD *)v5;
        v64 = *(_QWORD *)(a2 + 24);
        if (v59 > 0x10)
        {
          v65 = (_OWORD *)(v64 + 16);
          v66 = v64 + v59;
          v67 = (__int128 *)(v5 + 16);
          do
          {
            v68 = *v67++;
            *v65++ = v68;
          }
          while ((unint64_t)v65 < v66);
          goto LABEL_102;
        }
        *(_QWORD *)(a2 + 24) = v64 + v59;
        v69 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        if (v5 <= v92)
        {
          v61 = (_OWORD *)((char *)v60 + v92 - v5);
          do
          {
            v62 = *(_OWORD *)v5;
            v5 += 16;
            *v60++ = v62;
          }
          while (v60 < v61);
          v5 = v92;
          v60 = v61;
        }
        while (v5 < v37)
        {
          v63 = *v5++;
          *(_BYTE *)v60 = v63;
          v60 = (_OWORD *)((char *)v60 + 1);
        }
LABEL_102:
        *(_QWORD *)(a2 + 24) += v59;
        v69 = *(_QWORD *)(a2 + 8);
        if (v59 >= 0x10000)
        {
          v70 = (unint64_t)(v69 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v70;
        }
      }
      *(_WORD *)(v69 + 4) = v59;
      *(_DWORD *)v69 = v38 + 1;
      if (v35 - 3 >= 0x10000)
      {
        v71 = (unint64_t)(v69 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v71;
      }
      *(_WORD *)(v69 + 6) = v35 - 3;
      v72 = v69 + 8;
      *(_QWORD *)(a2 + 8) = v69 + 8;
      v5 = &v37[v35];
      if (!(_DWORD)v22)
      {
        v17 = &v37[v35];
        v7 = v97;
        goto LABEL_140;
      }
      v7 = v97;
      if ((unint64_t)v5 > v97)
      {
        v17 = v5;
LABEL_140:
        v27 = v94;
        v26 = v95;
        goto LABEL_143;
      }
      v73 = v23;
      v74 = v22;
      v27 = v94;
      v26 = v95;
      while (2)
      {
        v23 = v74;
        v74 = v73;
        if (*(_DWORD *)v5 != *(_DWORD *)&v5[-v23])
        {
          LODWORD(v22) = v23;
          v23 = v73;
          goto LABEL_142;
        }
        v75 = v5 + 4;
        v76 = &v5[-v23 + 4];
        if (v25 <= (unint64_t)(v5 + 4))
        {
          v79 = v5 + 4;
        }
        else
        {
          v77 = *(_QWORD *)v75 ^ *(_QWORD *)v76;
          if (v77)
          {
            v78 = __clz(__rbit64(v77)) >> 3;
            goto LABEL_125;
          }
          v81 = v5 + 12;
          while (1)
          {
            v82 = &v81[v77];
            if ((unint64_t)&v81[v77] >= v25)
              break;
            v83 = *(_QWORD *)&v5[v77 + 12 - v23];
            v77 += 8;
            v84 = *v82 ^ v83;
            if (v84)
            {
              v78 = v77 + (__clz(__rbit64(v84)) >> 3);
              goto LABEL_125;
            }
          }
          v79 = &v5[v77 + 12];
          v76 = &v79[-v23];
        }
        if ((unint64_t)v79 < v95 && *(_DWORD *)v76 == *(_DWORD *)v79)
        {
          v79 += 4;
          v76 += 4;
        }
        if ((unint64_t)v79 < v94 && *(unsigned __int16 *)v76 == *(unsigned __int16 *)v79)
        {
          v79 += 2;
          v76 += 2;
        }
        if ((unint64_t)v79 < v6 && *v76 == *v79)
          ++v79;
        v78 = v79 - v75;
LABEL_125:
        if (v5 <= v92)
        {
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
          v72 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)(v72 + 4) = 0;
        *(_DWORD *)v72 = 1;
        if (v78 + 1 >= 0x10000)
        {
          v80 = (unint64_t)(v72 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v80;
        }
        *(_WORD *)(v72 + 6) = v78 + 1;
        v72 += 8;
        *(_QWORD *)(a2 + 8) = v72;
        v5 += v78 + 4;
        if ((_DWORD)v74)
        {
          v73 = v23;
          LODWORD(v22) = v74;
          v17 = v5;
          if ((unint64_t)v5 > v97)
            goto LABEL_143;
          continue;
        }
        break;
      }
      LODWORD(v22) = 0;
LABEL_142:
      v17 = v5;
LABEL_143:
      if ((unint64_t)v17 >= v7)
      {
        a3 = v91;
        v16 = v89;
        v15 = v90;
        v21 = v88;
        break;
      }
    }
  }
  if (v16 <= v21)
    v85 = 0;
  else
    v85 = v16;
  if (v15 > v21)
    v85 = v15;
  if ((_DWORD)v23)
    v86 = v23;
  else
    v86 = v85;
  if ((_DWORD)v22)
    v85 = v22;
  *a3 = v86;
  a3[1] = v85;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_greedy(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  char *v16;
  int v17;
  unsigned int v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  char *v39;
  _BYTE *v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  _OWORD *v50;
  unint64_t v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  _BYTE *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int *v76;
  unint64_t v77;
  char *v78;
  uint64_t (*v79)(uint64_t, char *, unint64_t, uint64_t *);
  uint64_t v81;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = v6 - 8;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 256);
  v11 = v10 - 7;
  v12 = 2 * (v10 > 3);
  v13 = v10 - 4;
  if (v11 < 0xFFFFFFFD)
    v13 = v12;
  v14 = *a3;
  v15 = a3[1];
  v77 = v8 + v9;
  if ((_DWORD)a4 == (_DWORD)v8 + (_DWORD)v9)
    v16 = a4 + 1;
  else
    v16 = a4;
  v17 = (_DWORD)v16 - v8;
  v18 = 1 << *(_DWORD *)(a1 + 240);
  if (v17 - (int)v9 > v18 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v9) = v17 - v18;
  v20 = v17 - v9;
  if (v15 <= v20)
    v21 = v15;
  else
    v21 = 0;
  if (v14 <= v20)
    v22 = v14;
  else
    v22 = 0;
  if ((unint64_t)v16 < v7)
  {
    v73 = v20;
    v74 = a3[1];
    v75 = *a3;
    v76 = a3;
    v24 = v6 - 7;
    v25 = v6 - 3;
    v26 = v6 - 1;
    v27 = (char *)(v6 - 32);
    v78 = (char *)(v6 - 32);
    v79 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *))off_1E6E2C3F8[v13];
    while (1)
    {
      if ((_DWORD)v22)
      {
        v28 = (unint64_t)(v16 + 1);
        if (*(_DWORD *)&v16[-v22 + 1] == *(_DWORD *)(v16 + 1))
          break;
      }
      v81 = 999999999;
      v33 = v6;
      v34 = v79(a1, v16, v6, &v81);
      v35 = v81;
      if (!v34)
        v35 = 0;
      if (v34 > 3)
      {
        if (v35 < 3)
        {
          v6 = v33;
          v27 = v78;
        }
        else
        {
          v6 = v33;
          if (v16 <= v5 || (unint64_t)&v16[-v35 + 2] <= v77)
          {
            v28 = (unint64_t)v16;
            v27 = v78;
          }
          else
          {
            v36 = 1 - v35;
            v28 = (unint64_t)v16;
            v27 = v78;
            while (1)
            {
              v37 = *(unsigned __int8 *)--v28;
              if (v37 != v16[v36])
                break;
              ++v34;
              if (v28 > (unint64_t)v5)
              {
                v38 = (unint64_t)&v16[v36];
                v16 = (char *)v28;
                if (v38 > v77)
                  continue;
              }
              goto LABEL_56;
            }
            v28 = (unint64_t)v16;
          }
LABEL_56:
          v21 = v22;
          v22 = (v35 - 2);
LABEL_57:
          v16 = (char *)v28;
        }
        v44 = v16 - v5;
        v45 = *(_OWORD **)(a2 + 24);
        if (v16 <= v27)
        {
          *v45 = *(_OWORD *)v5;
          v49 = *(_QWORD *)(a2 + 24);
          if (v44 > 0x10)
          {
            v50 = (_OWORD *)(v49 + 16);
            v51 = v49 + v44;
            v52 = (__int128 *)(v5 + 16);
            do
            {
              v53 = *v52++;
              *v50++ = v53;
            }
            while ((unint64_t)v50 < v51);
            goto LABEL_69;
          }
          *(_QWORD *)(a2 + 24) = v49 + v44;
          v54 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          if (v5 <= v27)
          {
            v46 = (_OWORD *)((char *)v45 + v27 - v5);
            do
            {
              v47 = *(_OWORD *)v5;
              v5 += 16;
              *v45++ = v47;
            }
            while (v45 < v46);
            v5 = v27;
            v45 = v46;
          }
          while (v5 < v16)
          {
            v48 = *v5++;
            *(_BYTE *)v45 = v48;
            v45 = (_OWORD *)((char *)v45 + 1);
          }
LABEL_69:
          *(_QWORD *)(a2 + 24) += v44;
          v54 = *(_QWORD *)(a2 + 8);
          if (v44 >= 0x10000)
          {
            v55 = (unint64_t)(v54 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v55;
          }
        }
        *(_WORD *)(v54 + 4) = v44;
        *(_DWORD *)v54 = v35 + 1;
        if (v34 - 3 >= 0x10000)
        {
          v56 = (unint64_t)(v54 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v56;
        }
        *(_WORD *)(v54 + 6) = v34 - 3;
        v57 = v54 + 8;
        *(_QWORD *)(a2 + 8) = v54 + 8;
        v5 = &v16[v34];
        if ((_DWORD)v21 && (unint64_t)v5 <= v7)
        {
          v58 = v22;
          v59 = v21;
          while (1)
          {
            v22 = v59;
            v59 = v58;
            if (*(_DWORD *)v5 != *(_DWORD *)&v5[-v22])
            {
              v21 = v22;
              v22 = v58;
              break;
            }
            v60 = v5 + 4;
            v61 = &v5[-v22 + 4];
            if (v24 <= (unint64_t)(v5 + 4))
            {
              v64 = v5 + 4;
            }
            else
            {
              v62 = *(_QWORD *)v60 ^ *(_QWORD *)v61;
              if (v62)
              {
                v63 = __clz(__rbit64(v62)) >> 3;
                goto LABEL_92;
              }
              v66 = v5 + 12;
              while (1)
              {
                v67 = &v66[v62];
                if ((unint64_t)&v66[v62] >= v24)
                  break;
                v68 = *(_QWORD *)&v5[v62 + 12 - v22];
                v62 += 8;
                v69 = *v67 ^ v68;
                if (v69)
                {
                  v63 = v62 + (__clz(__rbit64(v69)) >> 3);
                  goto LABEL_92;
                }
              }
              v64 = &v5[v62 + 12];
              v61 = &v64[-v22];
            }
            if ((unint64_t)v64 < v25 && *(_DWORD *)v61 == *(_DWORD *)v64)
            {
              v64 += 4;
              v61 += 4;
            }
            if ((unint64_t)v64 < v26 && *(unsigned __int16 *)v61 == *(unsigned __int16 *)v64)
            {
              v64 += 2;
              v61 += 2;
            }
            if ((unint64_t)v64 < v6 && *v61 == *v64)
              ++v64;
            v63 = v64 - v60;
LABEL_92:
            if (v5 <= v27)
            {
              *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
              v57 = *(_QWORD *)(a2 + 8);
            }
            *(_WORD *)(v57 + 4) = 0;
            *(_DWORD *)v57 = 1;
            if (v63 + 1 >= 0x10000)
            {
              v65 = (unint64_t)(v57 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v65;
            }
            *(_WORD *)(v57 + 6) = v63 + 1;
            v57 += 8;
            *(_QWORD *)(a2 + 8) = v57;
            v5 += v63 + 4;
            if (!(_DWORD)v59)
            {
              v21 = v59;
              break;
            }
            v58 = v22;
            v21 = v59;
            v16 = v5;
            if ((unint64_t)v5 > v7)
              goto LABEL_107;
          }
        }
        v16 = v5;
        goto LABEL_107;
      }
      v16 += ((v16 - v5) >> 8) + 1;
      v6 = v33;
      v27 = v78;
LABEL_107:
      if ((unint64_t)v16 >= v7)
      {
        a3 = v76;
        v15 = v74;
        v14 = v75;
        v20 = v73;
        goto LABEL_109;
      }
    }
    v29 = v16 + 5;
    v30 = &v16[-v22 + 5];
    if (v24 <= (unint64_t)(v16 + 5))
    {
      v39 = v16 + 5;
    }
    else
    {
      v31 = *(_QWORD *)v29 ^ *(_QWORD *)v30;
      if (v31)
      {
        v32 = __clz(__rbit64(v31)) >> 3;
LABEL_47:
        LODWORD(v35) = 0;
        v34 = v32 + 4;
        goto LABEL_57;
      }
      v40 = v16 + 13;
      while (1)
      {
        v41 = &v40[v31];
        if ((unint64_t)&v40[v31] >= v24)
          break;
        v42 = *(_QWORD *)&v16[v31 + 13 - v22];
        v31 += 8;
        v43 = *v41 ^ v42;
        if (v43)
        {
          v32 = v31 + (__clz(__rbit64(v43)) >> 3);
          goto LABEL_47;
        }
      }
      v39 = &v16[v31 + 13];
      v30 = &v39[-v22];
    }
    if ((unint64_t)v39 < v25 && *(_DWORD *)v30 == *(_DWORD *)v39)
    {
      v39 += 4;
      v30 += 4;
    }
    if ((unint64_t)v39 < v26 && *(unsigned __int16 *)v30 == *(unsigned __int16 *)v39)
    {
      v39 += 2;
      v30 += 2;
    }
    if ((unint64_t)v39 < v6 && *v30 == *v39)
      ++v39;
    v32 = v39 - v29;
    goto LABEL_47;
  }
LABEL_109:
  if (v15 <= v20)
    v70 = 0;
  else
    v70 = v15;
  if (v14 > v20)
    v70 = v14;
  if ((_DWORD)v22)
    v71 = v22;
  else
    v71 = v70;
  if ((_DWORD)v21)
    v70 = v21;
  *a3 = v71;
  a3[1] = v70;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_btlazy2_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  __int128 v50;
  char v51;
  uint64_t v52;
  _OWORD *v53;
  unint64_t v54;
  __int128 *v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int *v70;
  unint64_t v71;
  _QWORD *v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  uint64_t (*v78)(uint64_t, unint64_t, unint64_t, uint64_t *);
  uint64_t v79;
  unint64_t v81;
  uint64_t v82;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = (_QWORD *)(v7 + v8);
  v10 = *(_DWORD *)(a1 + 256);
  v11 = v10 - 7;
  v12 = 2 * (v10 > 3);
  v13 = v10 - 4;
  if (v11 < 0xFFFFFFFD)
    v13 = v12;
  v15 = *a3;
  LODWORD(v14) = a3[1];
  v81 = (unint64_t)&a4[a5 - 8];
  v16 = *(_QWORD *)(a1 + 232);
  v17 = *(_QWORD *)(v16 + 8);
  v71 = v17 + *(unsigned int *)(v16 + 24);
  if ((_DWORD)a4 - (_DWORD)v9 - (_DWORD)v71 + *(_QWORD *)v16)
    v18 = (unint64_t)a4;
  else
    v18 = (unint64_t)(a4 + 1);
  if (v18 < (unint64_t)&a4[a5 - 8])
  {
    v70 = a3;
    v78 = *(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t *))off_1E6E2C458[v13 + 6];
    v79 = *(_QWORD *)(v16 + 8);
    v77 = v8 + v17 - *(_QWORD *)v16;
    v75 = v17 - v77;
    v76 = *(char **)v16;
    v73 = (_QWORD *)(v7 + v8);
    while (1)
    {
      v19 = (unsigned __int8 *)(v18 + 1);
      v20 = v18 - v7 - v15;
      v21 = (v20 + 1);
      v22 = v17 + v21 - v77;
      if (v21 >= v8)
        v22 = v7 + v21;
      v74 = v14;
      if ((v8 - v20 - 5) <= 0xFFFFFFFC && *(_DWORD *)v22 == *(_DWORD *)v19)
      {
        v23 = v21 >= v8 ? (char *)v6 : v76;
        v24 = ZSTD_count_2segments((_QWORD *)(v18 + 5), (char *)(v22 + 4), v6, v23, v9) + 4;
      }
      else
      {
        v24 = 0;
      }
      v82 = 999999999;
      v25 = v78(a1, v18, v6, &v82);
      v26 = v25 <= v24 ? v24 : v25;
      if (v26 >= 4)
        break;
      v18 += ((uint64_t)(v18 - (_QWORD)v5) >> 8) + 1;
      LODWORD(v14) = v74;
LABEL_105:
      v17 = v79;
      if (v18 >= v81)
      {
        a3 = v70;
        goto LABEL_107;
      }
    }
    if (v25 <= v24)
    {
      v27 = 0;
    }
    else
    {
      v19 = (unsigned __int8 *)v18;
      v27 = v82;
    }
    v28 = v26;
    v29 = v27;
    v30 = v19;
    if (v18 < v81)
    {
      while (1)
      {
        v30 = (unsigned __int8 *)(v18 + 1);
        v31 = (v18 + 1 - v7 - v15);
        v32 = v79 + v31 - v77;
        if (v31 >= v8)
          v32 = v7 + v31;
        if ((v8 + ~(_DWORD)v31) >= 3 && *(_DWORD *)v32 == *(_DWORD *)v30)
        {
          v33 = v31 >= v8 ? (char *)v6 : v76;
          v34 = ZSTD_count_2segments((_QWORD *)(v18 + 5), (char *)(v32 + 4), v6, v33, v73);
          v35 = 3 * v26 + (__clz(v27 + 1) ^ 0xFFFFFFE0) + 2;
          v36 = v34 > 0xFFFFFFFFFFFFFFFBLL || 3 * ((int)v34 + 4) <= v35;
          if (!v36)
          {
            v27 = 0;
            v26 = v34 + 4;
            v19 = (unsigned __int8 *)(v18 + 1);
          }
        }
        v82 = 999999999;
        v28 = v78(a1, v18 + 1, v6, &v82);
        if (v28 < 4
          || (v29 = v82,
              (int)((__clz(v82 + 1) ^ 0xFFFFFFE0) + 4 * v28 + 1) <= (int)((__clz(v27 + 1) ^ 0xFFFFFFE0) + 4 * v26 + 5)))
        {
          if ((unint64_t)v30 >= v81)
            break;
          v30 = (unsigned __int8 *)(v18 + 2);
          v37 = (v18 + 2 - v7 - v15);
          v38 = v79 + v37 - v77;
          if (v37 >= v8)
            v38 = v7 + v37;
          if ((v8 + ~(_DWORD)v37) >= 3 && *(_DWORD *)v38 == *(_DWORD *)v30)
          {
            v39 = v37 >= v8 ? (char *)v6 : v76;
            v40 = ZSTD_count_2segments((_QWORD *)(v18 + 6), (char *)(v38 + 4), v6, v39, v73);
            if (v40 <= 0xFFFFFFFFFFFFFFFBLL && (int)((__clz(v27 + 1) ^ 0xFFFFFFE0) + 4 * v26 + 2) < 4 * ((int)v40 + 4))
            {
              v27 = 0;
              v26 = v40 + 4;
              v19 = (unsigned __int8 *)(v18 + 2);
            }
          }
          v82 = 999999999;
          v28 = v78(a1, v18 + 2, v6, &v82);
          if (v28 < 4)
            break;
          v29 = v82;
          if ((int)((__clz(v82 + 1) ^ 0xFFFFFFE0) + 4 * v28 + 1) <= (int)((__clz(v27 + 1) ^ 0xFFFFFFE0) + 4 * v26 + 8))
            break;
        }
        v18 = (unint64_t)v30;
        v19 = v30;
        v27 = v29;
        v26 = v28;
        if ((unint64_t)v30 >= v81)
          goto LABEL_56;
      }
      v28 = v26;
      v29 = v27;
      v30 = v19;
    }
LABEL_56:
    v14 = v74;
    if (v29 <= 2)
    {
      v45 = (unsigned __int8 *)(v6 - 32);
    }
    else
    {
      v41 = v7 + v8;
      if (v8 > (int)v30 - ((int)v29 + (int)v7) + 2)
        v41 = v71;
      v42 = v75;
      if (v8 <= (int)v30 - ((int)v29 + (int)v7) + 2)
        v42 = v7;
      if (v30 <= v5 || v42 + (unint64_t)((_DWORD)v30 - (v29 + v7) + 2) <= v41)
      {
        v45 = (unsigned __int8 *)(v6 - 32);
      }
      else
      {
        v43 = (unsigned __int8 *)(v42 + ((_DWORD)v30 - (v29 + v7) + 2) - 1);
        v44 = v30 - 1;
        v45 = (unsigned __int8 *)(v6 - 32);
        while (*v44 == *v43)
        {
          ++v28;
          v46 = v44 - 1;
          if (v44 > v5)
          {
            --v44;
            v36 = (unint64_t)v43-- > v41;
            if (v36)
              continue;
          }
          v30 = v46 + 1;
          goto LABEL_71;
        }
        v30 = v44 + 1;
      }
LABEL_71:
      v14 = v15;
      v15 = (v29 - 2);
    }
    v47 = v30 - v5;
    v48 = *(_OWORD **)(a2 + 24);
    if (v30 <= v45)
    {
      *v48 = *(_OWORD *)v5;
      v52 = *(_QWORD *)(a2 + 24);
      if (v47 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v52 + v47;
        v57 = *(_QWORD *)(a2 + 8);
        goto LABEL_86;
      }
      v53 = (_OWORD *)(v52 + 16);
      v54 = v52 + v47;
      v55 = (__int128 *)(v5 + 16);
      do
      {
        v56 = *v55++;
        *v53++ = v56;
      }
      while ((unint64_t)v53 < v54);
    }
    else
    {
      if (v5 <= v45)
      {
        v49 = (_OWORD *)((char *)v48 + v45 - v5);
        do
        {
          v50 = *(_OWORD *)v5;
          v5 += 16;
          *v48++ = v50;
        }
        while (v48 < v49);
        v5 = v45;
        v48 = v49;
      }
      while (v5 < v30)
      {
        v51 = *v5++;
        *(_BYTE *)v48 = v51;
        v48 = (_OWORD *)((char *)v48 + 1);
      }
    }
    *(_QWORD *)(a2 + 24) += v47;
    v57 = *(_QWORD *)(a2 + 8);
    if (v47 >= 0x10000)
    {
      v58 = (unint64_t)(v57 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v58;
    }
LABEL_86:
    *(_WORD *)(v57 + 4) = v47;
    *(_DWORD *)v57 = v29 + 1;
    if (v28 - 3 >= 0x10000)
    {
      v59 = (unint64_t)(v57 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v59;
    }
    *(_WORD *)(v57 + 6) = v28 - 3;
    v60 = v57 + 8;
    *(_QWORD *)(a2 + 8) = v57 + 8;
    v5 = &v30[v28];
    if ((unint64_t)&v30[v28] <= v81)
    {
      v61 = v15;
      v62 = v14;
      v9 = (_QWORD *)(v7 + v8);
      while (1)
      {
        v15 = v62;
        v62 = v61;
        v63 = ((_DWORD)v5 - v7 - v15);
        v64 = v75;
        if (v63 >= v8)
          v64 = v7;
        if ((v8 + ~(_DWORD)v63) < 3)
          break;
        v65 = v64 + v63;
        if (*(_DWORD *)v65 != *(_DWORD *)v5)
          break;
        if (v63 >= v8)
          v66 = (char *)v6;
        else
          v66 = v76;
        v67 = ZSTD_count_2segments(v5 + 4, (char *)(v65 + 4), v6, v66, v73);
        if ((unint64_t)v5 <= v6 - 32)
        {
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
          v60 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)(v60 + 4) = 0;
        *(_DWORD *)v60 = 1;
        if (v67 + 1 >= 0x10000)
        {
          v68 = (unint64_t)(v60 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v68;
        }
        *(_WORD *)(v60 + 6) = v67 + 1;
        v60 += 8;
        v5 += v67 + 4;
        *(_QWORD *)(a2 + 8) = v60;
        v61 = v15;
        LODWORD(v14) = v62;
        v18 = (unint64_t)v5;
        if ((unint64_t)v5 > v81)
          goto LABEL_105;
      }
      LODWORD(v14) = v15;
      v15 = v61;
      v18 = (unint64_t)v5;
    }
    else
    {
      v18 = (unint64_t)&v30[v28];
      v9 = (_QWORD *)(v7 + v8);
    }
    goto LABEL_105;
  }
LABEL_107:
  *a3 = v15;
  a3[1] = v14;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy2_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  __int128 v50;
  char v51;
  uint64_t v52;
  _OWORD *v53;
  unint64_t v54;
  __int128 *v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int *v70;
  unint64_t v71;
  _QWORD *v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  uint64_t (*v78)(uint64_t, unint64_t, unint64_t, uint64_t *);
  uint64_t v79;
  unint64_t v81;
  uint64_t v82;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = (_QWORD *)(v7 + v8);
  v10 = *(_DWORD *)(a1 + 256);
  v11 = v10 - 7;
  v12 = 2 * (v10 > 3);
  v13 = v10 - 4;
  if (v11 < 0xFFFFFFFD)
    v13 = v12;
  v15 = *a3;
  LODWORD(v14) = a3[1];
  v81 = (unint64_t)&a4[a5 - 8];
  v16 = *(_QWORD *)(a1 + 232);
  v17 = *(_QWORD *)(v16 + 8);
  v71 = v17 + *(unsigned int *)(v16 + 24);
  if ((_DWORD)a4 - (_DWORD)v9 - (_DWORD)v71 + *(_QWORD *)v16)
    v18 = (unint64_t)a4;
  else
    v18 = (unint64_t)(a4 + 1);
  if (v18 < (unint64_t)&a4[a5 - 8])
  {
    v70 = a3;
    v78 = *(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t *))off_1E6E2C3F8[v13 + 6];
    v79 = *(_QWORD *)(v16 + 8);
    v77 = v8 + v17 - *(_QWORD *)v16;
    v75 = v17 - v77;
    v76 = *(char **)v16;
    v73 = (_QWORD *)(v7 + v8);
    while (1)
    {
      v19 = (unsigned __int8 *)(v18 + 1);
      v20 = v18 - v7 - v15;
      v21 = (v20 + 1);
      v22 = v17 + v21 - v77;
      if (v21 >= v8)
        v22 = v7 + v21;
      v74 = v14;
      if ((v8 - v20 - 5) <= 0xFFFFFFFC && *(_DWORD *)v22 == *(_DWORD *)v19)
      {
        v23 = v21 >= v8 ? (char *)v6 : v76;
        v24 = ZSTD_count_2segments((_QWORD *)(v18 + 5), (char *)(v22 + 4), v6, v23, v9) + 4;
      }
      else
      {
        v24 = 0;
      }
      v82 = 999999999;
      v25 = v78(a1, v18, v6, &v82);
      v26 = v25 <= v24 ? v24 : v25;
      if (v26 >= 4)
        break;
      v18 += ((uint64_t)(v18 - (_QWORD)v5) >> 8) + 1;
      LODWORD(v14) = v74;
LABEL_105:
      v17 = v79;
      if (v18 >= v81)
      {
        a3 = v70;
        goto LABEL_107;
      }
    }
    if (v25 <= v24)
    {
      v27 = 0;
    }
    else
    {
      v19 = (unsigned __int8 *)v18;
      v27 = v82;
    }
    v28 = v26;
    v29 = v27;
    v30 = v19;
    if (v18 < v81)
    {
      while (1)
      {
        v30 = (unsigned __int8 *)(v18 + 1);
        v31 = (v18 + 1 - v7 - v15);
        v32 = v79 + v31 - v77;
        if (v31 >= v8)
          v32 = v7 + v31;
        if ((v8 + ~(_DWORD)v31) >= 3 && *(_DWORD *)v32 == *(_DWORD *)v30)
        {
          v33 = v31 >= v8 ? (char *)v6 : v76;
          v34 = ZSTD_count_2segments((_QWORD *)(v18 + 5), (char *)(v32 + 4), v6, v33, v73);
          v35 = 3 * v26 + (__clz(v27 + 1) ^ 0xFFFFFFE0) + 2;
          v36 = v34 > 0xFFFFFFFFFFFFFFFBLL || 3 * ((int)v34 + 4) <= v35;
          if (!v36)
          {
            v27 = 0;
            v26 = v34 + 4;
            v19 = (unsigned __int8 *)(v18 + 1);
          }
        }
        v82 = 999999999;
        v28 = v78(a1, v18 + 1, v6, &v82);
        if (v28 < 4
          || (v29 = v82,
              (int)((__clz(v82 + 1) ^ 0xFFFFFFE0) + 4 * v28 + 1) <= (int)((__clz(v27 + 1) ^ 0xFFFFFFE0) + 4 * v26 + 5)))
        {
          if ((unint64_t)v30 >= v81)
            break;
          v30 = (unsigned __int8 *)(v18 + 2);
          v37 = (v18 + 2 - v7 - v15);
          v38 = v79 + v37 - v77;
          if (v37 >= v8)
            v38 = v7 + v37;
          if ((v8 + ~(_DWORD)v37) >= 3 && *(_DWORD *)v38 == *(_DWORD *)v30)
          {
            v39 = v37 >= v8 ? (char *)v6 : v76;
            v40 = ZSTD_count_2segments((_QWORD *)(v18 + 6), (char *)(v38 + 4), v6, v39, v73);
            if (v40 <= 0xFFFFFFFFFFFFFFFBLL && (int)((__clz(v27 + 1) ^ 0xFFFFFFE0) + 4 * v26 + 2) < 4 * ((int)v40 + 4))
            {
              v27 = 0;
              v26 = v40 + 4;
              v19 = (unsigned __int8 *)(v18 + 2);
            }
          }
          v82 = 999999999;
          v28 = v78(a1, v18 + 2, v6, &v82);
          if (v28 < 4)
            break;
          v29 = v82;
          if ((int)((__clz(v82 + 1) ^ 0xFFFFFFE0) + 4 * v28 + 1) <= (int)((__clz(v27 + 1) ^ 0xFFFFFFE0) + 4 * v26 + 8))
            break;
        }
        v18 = (unint64_t)v30;
        v19 = v30;
        v27 = v29;
        v26 = v28;
        if ((unint64_t)v30 >= v81)
          goto LABEL_56;
      }
      v28 = v26;
      v29 = v27;
      v30 = v19;
    }
LABEL_56:
    v14 = v74;
    if (v29 <= 2)
    {
      v45 = (unsigned __int8 *)(v6 - 32);
    }
    else
    {
      v41 = v7 + v8;
      if (v8 > (int)v30 - ((int)v29 + (int)v7) + 2)
        v41 = v71;
      v42 = v75;
      if (v8 <= (int)v30 - ((int)v29 + (int)v7) + 2)
        v42 = v7;
      if (v30 <= v5 || v42 + (unint64_t)((_DWORD)v30 - (v29 + v7) + 2) <= v41)
      {
        v45 = (unsigned __int8 *)(v6 - 32);
      }
      else
      {
        v43 = (unsigned __int8 *)(v42 + ((_DWORD)v30 - (v29 + v7) + 2) - 1);
        v44 = v30 - 1;
        v45 = (unsigned __int8 *)(v6 - 32);
        while (*v44 == *v43)
        {
          ++v28;
          v46 = v44 - 1;
          if (v44 > v5)
          {
            --v44;
            v36 = (unint64_t)v43-- > v41;
            if (v36)
              continue;
          }
          v30 = v46 + 1;
          goto LABEL_71;
        }
        v30 = v44 + 1;
      }
LABEL_71:
      v14 = v15;
      v15 = (v29 - 2);
    }
    v47 = v30 - v5;
    v48 = *(_OWORD **)(a2 + 24);
    if (v30 <= v45)
    {
      *v48 = *(_OWORD *)v5;
      v52 = *(_QWORD *)(a2 + 24);
      if (v47 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v52 + v47;
        v57 = *(_QWORD *)(a2 + 8);
        goto LABEL_86;
      }
      v53 = (_OWORD *)(v52 + 16);
      v54 = v52 + v47;
      v55 = (__int128 *)(v5 + 16);
      do
      {
        v56 = *v55++;
        *v53++ = v56;
      }
      while ((unint64_t)v53 < v54);
    }
    else
    {
      if (v5 <= v45)
      {
        v49 = (_OWORD *)((char *)v48 + v45 - v5);
        do
        {
          v50 = *(_OWORD *)v5;
          v5 += 16;
          *v48++ = v50;
        }
        while (v48 < v49);
        v5 = v45;
        v48 = v49;
      }
      while (v5 < v30)
      {
        v51 = *v5++;
        *(_BYTE *)v48 = v51;
        v48 = (_OWORD *)((char *)v48 + 1);
      }
    }
    *(_QWORD *)(a2 + 24) += v47;
    v57 = *(_QWORD *)(a2 + 8);
    if (v47 >= 0x10000)
    {
      v58 = (unint64_t)(v57 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v58;
    }
LABEL_86:
    *(_WORD *)(v57 + 4) = v47;
    *(_DWORD *)v57 = v29 + 1;
    if (v28 - 3 >= 0x10000)
    {
      v59 = (unint64_t)(v57 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v59;
    }
    *(_WORD *)(v57 + 6) = v28 - 3;
    v60 = v57 + 8;
    *(_QWORD *)(a2 + 8) = v57 + 8;
    v5 = &v30[v28];
    if ((unint64_t)&v30[v28] <= v81)
    {
      v61 = v15;
      v62 = v14;
      v9 = (_QWORD *)(v7 + v8);
      while (1)
      {
        v15 = v62;
        v62 = v61;
        v63 = ((_DWORD)v5 - v7 - v15);
        v64 = v75;
        if (v63 >= v8)
          v64 = v7;
        if ((v8 + ~(_DWORD)v63) < 3)
          break;
        v65 = v64 + v63;
        if (*(_DWORD *)v65 != *(_DWORD *)v5)
          break;
        if (v63 >= v8)
          v66 = (char *)v6;
        else
          v66 = v76;
        v67 = ZSTD_count_2segments(v5 + 4, (char *)(v65 + 4), v6, v66, v73);
        if ((unint64_t)v5 <= v6 - 32)
        {
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
          v60 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)(v60 + 4) = 0;
        *(_DWORD *)v60 = 1;
        if (v67 + 1 >= 0x10000)
        {
          v68 = (unint64_t)(v60 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v68;
        }
        *(_WORD *)(v60 + 6) = v67 + 1;
        v60 += 8;
        v5 += v67 + 4;
        *(_QWORD *)(a2 + 8) = v60;
        v61 = v15;
        LODWORD(v14) = v62;
        v18 = (unint64_t)v5;
        if ((unint64_t)v5 > v81)
          goto LABEL_105;
      }
      LODWORD(v14) = v15;
      v15 = v61;
      v18 = (unint64_t)v5;
    }
    else
    {
      v18 = (unint64_t)&v30[v28];
      v9 = (_QWORD *)(v7 + v8);
    }
    goto LABEL_105;
  }
LABEL_107:
  *a3 = v15;
  a3[1] = v14;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  _OWORD *v50;
  unint64_t v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int *v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned __int8 *v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  char *v80;
  uint64_t (*v81)(uint64_t, unsigned __int8 *, unint64_t, _QWORD *);
  uint64_t v82;
  unsigned __int8 *v84;
  unsigned int v85;
  _QWORD v86[2];

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = (unint64_t)&a4[a5 - 8];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 256);
  v11 = v10 - 7;
  v12 = 2 * (v10 > 3);
  v13 = v10 - 4;
  if (v11 < 0xFFFFFFFD)
    v13 = v12;
  v15 = *a3;
  LODWORD(v14) = a3[1];
  v84 = (unsigned __int8 *)(v8 + v9);
  v16 = *(_QWORD *)(a1 + 232);
  v18 = *(char **)v16;
  v17 = *(_QWORD *)(v16 + 8);
  v73 = (unsigned __int8 *)(v17 + *(unsigned int *)(v16 + 24));
  if ((_DWORD)a4 - ((_DWORD)v8 + (_DWORD)v9) - (_DWORD)v73 + *(_QWORD *)v16)
    v19 = a4;
  else
    v19 = a4 + 1;
  if ((unint64_t)v19 < v7)
  {
    v20 = a2;
    v67 = a3;
    v80 = *(char **)v16;
    v81 = *(uint64_t (**)(uint64_t, unsigned __int8 *, unint64_t, _QWORD *))off_1E6E2C3F8[v13 + 6];
    v74 = v9 + v17 - (_DWORD)v18;
    v77 = v17 - v74;
    v78 = (unsigned __int8 *)(v6 - 32);
    v69 = -(int)v8;
    v70 = v9 + v8 - 2;
    v68 = (_DWORD)v18 - v9 - v17 - v8 + 1;
    v85 = *(_DWORD *)(a1 + 24);
    v82 = *(_QWORD *)(v16 + 8);
    v71 = (uint64_t)&a4[a5 - 8];
    v79 = *(_QWORD *)(a1 + 8);
    while (1)
    {
      v21 = (_DWORD)v19 - v8 - v15;
      v22 = (v21 + 1);
      v23 = v17 + v22 - v74;
      if (v22 >= v9)
        v23 = v8 + v22;
      v75 = v14;
      if ((v9 - v21 - 5) <= 0xFFFFFFFC && *(_DWORD *)v23 == *(_DWORD *)(v19 + 1))
      {
        v24 = v22 >= v9 ? (char *)v6 : v80;
        v25 = ZSTD_count_2segments(v19 + 5, (char *)(v23 + 4), v6, v24, v84) + 4;
      }
      else
      {
        v25 = 0;
      }
      v86[0] = 999999999;
      v26 = v81(a1, v19, v6, v86);
      v9 = v26 <= v25 ? v25 : v26;
      if (v9 >= 4)
        break;
      v19 += ((v19 - v5) >> 8) + 1;
      LODWORD(v9) = v85;
      LODWORD(v14) = v75;
LABEL_90:
      v17 = v82;
      if ((unint64_t)v19 >= v7)
      {
        a3 = v67;
        goto LABEL_92;
      }
    }
    if (v26 <= v25)
      v27 = (unint64_t)(v19 + 1);
    else
      v27 = (unint64_t)v19;
    if (v26 <= v25)
      v28 = 0;
    else
      v28 = v86[0];
    if ((unint64_t)v19 < v7)
    {
      v29 = v6;
      v30 = 0;
      v76 = v7 - (_QWORD)v19;
      v31 = v70 + v15 - (_DWORD)v19;
      while (1)
      {
        v32 = &v19[v30 + 1];
        v33 = (v69 + (_DWORD)v19 - v15 + v30 + 1);
        v34 = v82 + (v68 + (_DWORD)v19 - v15 + v30);
        if (v33 >= v85)
          v34 = v79 + v33;
        if (v31 >= 3 && *(_DWORD *)v34 == *(_DWORD *)v32)
        {
          v35 = v33 >= v85 ? (char *)v29 : v80;
          v36 = ZSTD_count_2segments(&v19[v30 + 5], (char *)(v34 + 4), v29, v35, v84);
          if (v36 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v36 + 4) > (int)(3 * v9 + (__clz(v28 + 1) ^ 0xFFFFFFE0) + 2))
          {
            v28 = 0;
            v9 = v36 + 4;
            v27 = (unint64_t)&v19[v30 + 1];
          }
        }
        v86[0] = 999999999;
        v37 = v81(a1, &v19[v30 + 1], v29, v86);
        if (v37 < 4
          || (int)((__clz(LODWORD(v86[0]) + 1) ^ 0xFFFFFFE0) + 4 * v37 + 1) <= (int)((__clz(v28 + 1) ^ 0xFFFFFFE0)
                                                                                   + 4 * v9
                                                                                   + 5))
        {
          break;
        }
        ++v30;
        --v31;
        v27 = (unint64_t)v32;
        v28 = v86[0];
        v9 = v37;
        if (v76 == v30)
        {
          v9 = v37;
          v28 = v86[0];
          v7 = v71;
          v27 = v71;
          v6 = v29;
          v20 = a2;
          goto LABEL_45;
        }
      }
      v6 = v29;
      v7 = v71;
      v20 = a2;
    }
LABEL_45:
    v14 = v75;
    if (v28 > 2)
    {
      v38 = v79;
      v39 = v84;
      if (v85 > (int)v27 - ((int)v28 + (int)v79) + 2)
      {
        v39 = v73;
        v38 = v77;
      }
      if (v27 > (unint64_t)v5
        && v38 + (unint64_t)(v27 - (v28 + v79) + 2) > (unint64_t)v39)
      {
        v40 = (unsigned __int8 *)(v38 + (v27 - (v28 + v79) + 2) - 1);
        v41 = (unsigned __int8 *)(v27 - 1);
        while (*v41 == *v40)
        {
          ++v9;
          v42 = v41 - 1;
          if (v41 > v5)
          {
            --v41;
            if (v40-- > v39)
              continue;
          }
          v27 = (unint64_t)(v42 + 1);
          goto LABEL_56;
        }
        v27 = (unint64_t)(v41 + 1);
      }
LABEL_56:
      v14 = v15;
      v15 = (v28 - 2);
    }
    v44 = v27 - (_QWORD)v5;
    v45 = *(_OWORD **)(v20 + 24);
    if (v27 <= (unint64_t)v78)
    {
      *v45 = *(_OWORD *)v5;
      v49 = *(_QWORD *)(v20 + 24);
      if (v44 <= 0x10)
      {
        *(_QWORD *)(v20 + 24) = v49 + v44;
        v54 = *(_QWORD *)(v20 + 8);
        goto LABEL_71;
      }
      v50 = (_OWORD *)(v49 + 16);
      v51 = v49 + v44;
      v52 = (__int128 *)(v5 + 16);
      do
      {
        v53 = *v52++;
        *v50++ = v53;
      }
      while ((unint64_t)v50 < v51);
    }
    else
    {
      if (v5 <= v78)
      {
        v46 = (_OWORD *)((char *)v45 + v78 - v5);
        do
        {
          v47 = *(_OWORD *)v5;
          v5 += 16;
          *v45++ = v47;
        }
        while (v45 < v46);
        v5 = v78;
        v45 = v46;
      }
      while ((unint64_t)v5 < v27)
      {
        v48 = *v5++;
        *(_BYTE *)v45 = v48;
        v45 = (_OWORD *)((char *)v45 + 1);
      }
    }
    *(_QWORD *)(v20 + 24) += v44;
    v54 = *(_QWORD *)(v20 + 8);
    if (v44 >= 0x10000)
    {
      v55 = (unint64_t)(v54 - *(_QWORD *)v20) >> 3;
      *(_DWORD *)(v20 + 72) = 1;
      *(_DWORD *)(v20 + 76) = v55;
    }
LABEL_71:
    *(_WORD *)(v54 + 4) = v44;
    *(_DWORD *)v54 = v28 + 1;
    if (v9 - 3 >= 0x10000)
    {
      v56 = (unint64_t)(v54 - *(_QWORD *)v20) >> 3;
      *(_DWORD *)(v20 + 72) = 2;
      *(_DWORD *)(v20 + 76) = v56;
    }
    *(_WORD *)(v54 + 6) = v9 - 3;
    v57 = v54 + 8;
    *(_QWORD *)(v20 + 8) = v54 + 8;
    v5 = (unsigned __int8 *)(v27 + v9);
    if (v27 + v9 <= v7)
    {
      v58 = v15;
      v59 = v14;
      v8 = v79;
      LODWORD(v9) = v85;
      while (1)
      {
        v15 = v59;
        v59 = v58;
        v60 = ((_DWORD)v5 - v79 - v15);
        v61 = v77;
        if (v60 >= v85)
          v61 = v79;
        if (v85 + ~(_DWORD)v60 < 3)
          break;
        v62 = v61 + v60;
        if (*(_DWORD *)v62 != *(_DWORD *)v5)
          break;
        if (v60 >= v85)
          v63 = (char *)v6;
        else
          v63 = v80;
        v64 = ZSTD_count_2segments(v5 + 4, (char *)(v62 + 4), v6, v63, v84);
        if (v5 <= v78)
        {
          *(_OWORD *)*(_QWORD *)(v20 + 24) = *(_OWORD *)v5;
          v57 = *(_QWORD *)(v20 + 8);
        }
        *(_WORD *)(v57 + 4) = 0;
        *(_DWORD *)v57 = 1;
        if (v64 + 1 >= 0x10000)
        {
          v65 = (unint64_t)(v57 - *(_QWORD *)v20) >> 3;
          *(_DWORD *)(v20 + 72) = 2;
          *(_DWORD *)(v20 + 76) = v65;
        }
        *(_WORD *)(v57 + 6) = v64 + 1;
        v57 += 8;
        v5 += v64 + 4;
        *(_QWORD *)(v20 + 8) = v57;
        v58 = v15;
        LODWORD(v14) = v59;
        v19 = v5;
        if ((unint64_t)v5 > v7)
          goto LABEL_90;
      }
      LODWORD(v14) = v15;
      v15 = v58;
      v19 = v5;
    }
    else
    {
      v19 = (unsigned __int8 *)(v27 + v9);
      v8 = v79;
      LODWORD(v9) = v85;
    }
    goto LABEL_90;
  }
LABEL_92:
  *a3 = v15;
  a3[1] = v14;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_greedy_dictMatchState(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  unint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  _OWORD *v40;
  unint64_t v41;
  __int128 *v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int *v57;
  unint64_t v58;
  uint64_t (*v59)(uint64_t, char *, unint64_t, uint64_t *);
  unsigned int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 256);
  v10 = v9 - 7;
  v11 = 2 * (v9 > 3);
  v12 = v9 - 4;
  if (v10 < 0xFFFFFFFD)
    v12 = v11;
  v13 = *a3;
  v14 = a3[1];
  v15 = *(_QWORD *)(a1 + 232);
  v16 = *(_QWORD *)(v15 + 8);
  v65 = (_QWORD *)(v7 + v8);
  v58 = v16 + *(unsigned int *)(v15 + 24);
  if ((_DWORD)a4 - ((_DWORD)v7 + (_DWORD)v8) - (_DWORD)v58 + *(_QWORD *)v15)
    v17 = a4;
  else
    v17 = a4 + 1;
  v66 = (unint64_t)&a4[a5 - 8];
  if ((unint64_t)v17 < v66)
  {
    v57 = a3;
    v59 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *))off_1E6E2C3F8[v12 + 6];
    v61 = v8 + v16 - *(_QWORD *)v15;
    v63 = *(char **)v15;
    v64 = v16 - v61;
    v62 = *(_QWORD *)(v15 + 8);
    while (1)
    {
      v19 = v17 + 1;
      v20 = (_DWORD)v17 - v7 - v13;
      v21 = (v20 + 1);
      v22 = v16 + v21 - v61;
      if (v21 >= v8)
        v22 = v7 + v21;
      if ((v8 - v20 - 5) <= 0xFFFFFFFC && *(_DWORD *)v22 == *(_DWORD *)v19)
        break;
      v67 = 999999999;
      v26 = v59(a1, v17, v6, &v67);
      v25 = v67;
      if (v26)
        v19 = v17;
      else
        v25 = 0;
      if (v26 > 3)
      {
        if (v25 >= 3)
        {
          v27 = v7 + v8;
          if (v8 > (int)v19 - (int)v7 - (int)v25 + 2)
            v27 = v58;
          v28 = v64;
          if (v8 <= (int)v19 - (int)v7 - (int)v25 + 2)
            v28 = v7;
          if (v19 <= v5 || v28 + (unint64_t)((_DWORD)v19 - v7 - v25 + 2) <= v27)
          {
            v31 = (char *)(v6 - 32);
          }
          else
          {
            v29 = (unsigned __int8 *)(v28 + ((_DWORD)v19 - v7 - v25 + 2) - 1);
            v30 = v19 - 1;
            v31 = (char *)(v6 - 32);
            while (*v30 == *v29)
            {
              ++v26;
              v32 = (unsigned __int8 *)(v30 - 1);
              if (v30 > v5)
              {
                --v30;
                if ((unint64_t)v29-- > v27)
                  continue;
              }
              v19 = (char *)(v32 + 1);
              goto LABEL_36;
            }
            v19 = v30 + 1;
          }
LABEL_36:
          v14 = v13;
          v13 = (v25 - 2);
LABEL_37:
          v34 = v19 - v5;
          v35 = *(_OWORD **)(a2 + 24);
          if (v19 <= v31)
          {
            *v35 = *(_OWORD *)v5;
            v39 = *(_QWORD *)(a2 + 24);
            if (v34 > 0x10)
            {
              v40 = (_OWORD *)(v39 + 16);
              v41 = v39 + v34;
              v42 = (__int128 *)(v5 + 16);
              do
              {
                v43 = *v42++;
                *v40++ = v43;
              }
              while ((unint64_t)v40 < v41);
              goto LABEL_48;
            }
            *(_QWORD *)(a2 + 24) = v39 + v34;
            v44 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (v5 <= v31)
            {
              v36 = (_OWORD *)((char *)v35 + v31 - v5);
              do
              {
                v37 = *(_OWORD *)v5;
                v5 += 16;
                *v35++ = v37;
              }
              while (v35 < v36);
              v5 = v31;
              v35 = v36;
            }
            while (v5 < v19)
            {
              v38 = *v5++;
              *(_BYTE *)v35 = v38;
              v35 = (_OWORD *)((char *)v35 + 1);
            }
LABEL_48:
            *(_QWORD *)(a2 + 24) += v34;
            v44 = *(_QWORD *)(a2 + 8);
            if (v34 >= 0x10000)
            {
              v45 = (unint64_t)(v44 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v45;
            }
          }
          *(_WORD *)(v44 + 4) = v34;
          *(_DWORD *)v44 = v25 + 1;
          if (v26 - 3 >= 0x10000)
          {
            v46 = (unint64_t)(v44 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v46;
          }
          *(_WORD *)(v44 + 6) = v26 - 3;
          v47 = v44 + 8;
          *(_QWORD *)(a2 + 8) = v44 + 8;
          v5 = &v19[v26];
          if ((unint64_t)&v19[v26] <= v66)
          {
            v48 = v13;
            v49 = v14;
            while (1)
            {
              v13 = v49;
              v49 = v48;
              v50 = ((_DWORD)v5 - v7 - v13);
              v51 = v64;
              if (v50 >= v8)
                v51 = v7;
              if ((v8 + ~(_DWORD)v50) < 3)
                break;
              v52 = v51 + v50;
              if (*(_DWORD *)v52 != *(_DWORD *)v5)
                break;
              if (v50 >= v8)
                v53 = (char *)v6;
              else
                v53 = v63;
              v54 = ZSTD_count_2segments(v5 + 4, (char *)(v52 + 4), v6, v53, v65);
              if ((unint64_t)v5 <= v6 - 32)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                v47 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v47 + 4) = 0;
              *(_DWORD *)v47 = 1;
              if (v54 + 1 >= 0x10000)
              {
                v55 = (unint64_t)(v47 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v55;
              }
              *(_WORD *)(v47 + 6) = v54 + 1;
              v47 += 8;
              v5 += v54 + 4;
              *(_QWORD *)(a2 + 8) = v47;
              v48 = v13;
              v14 = v49;
              v17 = v5;
              if ((unint64_t)v5 > v66)
                goto LABEL_70;
            }
            v14 = v13;
            v13 = v48;
          }
          v17 = v5;
          goto LABEL_70;
        }
LABEL_33:
        v31 = (char *)(v6 - 32);
        goto LABEL_37;
      }
      v17 += ((v17 - v5) >> 8) + 1;
LABEL_70:
      v16 = v62;
      if ((unint64_t)v17 >= v66)
      {
        a3 = v57;
        goto LABEL_72;
      }
    }
    if (v21 >= v8)
      v23 = (char *)v6;
    else
      v23 = v63;
    v24 = ZSTD_count_2segments(v17 + 5, (char *)(v22 + 4), v6, v23, v65);
    LODWORD(v25) = 0;
    v26 = v24 + 4;
    goto LABEL_33;
  }
LABEL_72:
  *a3 = v13;
  a3[1] = v14;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy2_dedicatedDictSearch(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  __int128 v50;
  char v51;
  uint64_t v52;
  _OWORD *v53;
  unint64_t v54;
  __int128 *v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  unint64_t v67;
  unint64_t v68;
  unsigned int *v70;
  unint64_t v71;
  _QWORD *v73;
  unsigned int v74;
  uint64_t v75;
  char *v76;
  unsigned int v77;
  uint64_t (*v78)(uint64_t, unint64_t, unint64_t, uint64_t *);
  uint64_t v79;
  unint64_t v81;
  uint64_t v82;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = (_QWORD *)(v7 + v8);
  v10 = *(_DWORD *)(a1 + 256);
  v11 = v10 - 7;
  v12 = 2 * (v10 > 3);
  v13 = v10 - 4;
  if (v11 < 0xFFFFFFFD)
    v13 = v12;
  v15 = *a3;
  LODWORD(v14) = a3[1];
  v81 = (unint64_t)&a4[a5 - 8];
  v16 = *(_QWORD *)(a1 + 232);
  v17 = *(_QWORD *)(v16 + 8);
  v71 = v17 + *(unsigned int *)(v16 + 24);
  if ((_DWORD)a4 - (_DWORD)v9 - (_DWORD)v71 + *(_QWORD *)v16)
    v18 = (unint64_t)a4;
  else
    v18 = (unint64_t)(a4 + 1);
  if (v18 < (unint64_t)&a4[a5 - 8])
  {
    v70 = a3;
    v78 = *(uint64_t (**)(uint64_t, unint64_t, unint64_t, uint64_t *))off_1E6E2C3F8[v13 + 9];
    v79 = *(_QWORD *)(v16 + 8);
    v77 = v8 + v17 - *(_QWORD *)v16;
    v75 = v17 - v77;
    v76 = *(char **)v16;
    v73 = (_QWORD *)(v7 + v8);
    while (1)
    {
      v19 = (unsigned __int8 *)(v18 + 1);
      v20 = v18 - v7 - v15;
      v21 = (v20 + 1);
      v22 = v17 + v21 - v77;
      if (v21 >= v8)
        v22 = v7 + v21;
      v74 = v14;
      if ((v8 - v20 - 5) <= 0xFFFFFFFC && *(_DWORD *)v22 == *(_DWORD *)v19)
      {
        v23 = v21 >= v8 ? (char *)v6 : v76;
        v24 = ZSTD_count_2segments((_QWORD *)(v18 + 5), (char *)(v22 + 4), v6, v23, v9) + 4;
      }
      else
      {
        v24 = 0;
      }
      v82 = 999999999;
      v25 = v78(a1, v18, v6, &v82);
      v26 = v25 <= v24 ? v24 : v25;
      if (v26 >= 4)
        break;
      v18 += ((uint64_t)(v18 - (_QWORD)v5) >> 8) + 1;
      LODWORD(v14) = v74;
LABEL_105:
      v17 = v79;
      if (v18 >= v81)
      {
        a3 = v70;
        goto LABEL_107;
      }
    }
    if (v25 <= v24)
    {
      v27 = 0;
    }
    else
    {
      v19 = (unsigned __int8 *)v18;
      v27 = v82;
    }
    v28 = v26;
    v29 = v27;
    v30 = v19;
    if (v18 < v81)
    {
      while (1)
      {
        v30 = (unsigned __int8 *)(v18 + 1);
        v31 = (v18 + 1 - v7 - v15);
        v32 = v79 + v31 - v77;
        if (v31 >= v8)
          v32 = v7 + v31;
        if ((v8 + ~(_DWORD)v31) >= 3 && *(_DWORD *)v32 == *(_DWORD *)v30)
        {
          v33 = v31 >= v8 ? (char *)v6 : v76;
          v34 = ZSTD_count_2segments((_QWORD *)(v18 + 5), (char *)(v32 + 4), v6, v33, v73);
          v35 = 3 * v26 + (__clz(v27 + 1) ^ 0xFFFFFFE0) + 2;
          v36 = v34 > 0xFFFFFFFFFFFFFFFBLL || 3 * ((int)v34 + 4) <= v35;
          if (!v36)
          {
            v27 = 0;
            v26 = v34 + 4;
            v19 = (unsigned __int8 *)(v18 + 1);
          }
        }
        v82 = 999999999;
        v28 = v78(a1, v18 + 1, v6, &v82);
        if (v28 < 4
          || (v29 = v82,
              (int)((__clz(v82 + 1) ^ 0xFFFFFFE0) + 4 * v28 + 1) <= (int)((__clz(v27 + 1) ^ 0xFFFFFFE0) + 4 * v26 + 5)))
        {
          if ((unint64_t)v30 >= v81)
            break;
          v30 = (unsigned __int8 *)(v18 + 2);
          v37 = (v18 + 2 - v7 - v15);
          v38 = v79 + v37 - v77;
          if (v37 >= v8)
            v38 = v7 + v37;
          if ((v8 + ~(_DWORD)v37) >= 3 && *(_DWORD *)v38 == *(_DWORD *)v30)
          {
            v39 = v37 >= v8 ? (char *)v6 : v76;
            v40 = ZSTD_count_2segments((_QWORD *)(v18 + 6), (char *)(v38 + 4), v6, v39, v73);
            if (v40 <= 0xFFFFFFFFFFFFFFFBLL && (int)((__clz(v27 + 1) ^ 0xFFFFFFE0) + 4 * v26 + 2) < 4 * ((int)v40 + 4))
            {
              v27 = 0;
              v26 = v40 + 4;
              v19 = (unsigned __int8 *)(v18 + 2);
            }
          }
          v82 = 999999999;
          v28 = v78(a1, v18 + 2, v6, &v82);
          if (v28 < 4)
            break;
          v29 = v82;
          if ((int)((__clz(v82 + 1) ^ 0xFFFFFFE0) + 4 * v28 + 1) <= (int)((__clz(v27 + 1) ^ 0xFFFFFFE0) + 4 * v26 + 8))
            break;
        }
        v18 = (unint64_t)v30;
        v19 = v30;
        v27 = v29;
        v26 = v28;
        if ((unint64_t)v30 >= v81)
          goto LABEL_56;
      }
      v28 = v26;
      v29 = v27;
      v30 = v19;
    }
LABEL_56:
    v14 = v74;
    if (v29 <= 2)
    {
      v45 = (unsigned __int8 *)(v6 - 32);
    }
    else
    {
      v41 = v7 + v8;
      if (v8 > (int)v30 - ((int)v29 + (int)v7) + 2)
        v41 = v71;
      v42 = v75;
      if (v8 <= (int)v30 - ((int)v29 + (int)v7) + 2)
        v42 = v7;
      if (v30 <= v5 || v42 + (unint64_t)((_DWORD)v30 - (v29 + v7) + 2) <= v41)
      {
        v45 = (unsigned __int8 *)(v6 - 32);
      }
      else
      {
        v43 = (unsigned __int8 *)(v42 + ((_DWORD)v30 - (v29 + v7) + 2) - 1);
        v44 = v30 - 1;
        v45 = (unsigned __int8 *)(v6 - 32);
        while (*v44 == *v43)
        {
          ++v28;
          v46 = v44 - 1;
          if (v44 > v5)
          {
            --v44;
            v36 = (unint64_t)v43-- > v41;
            if (v36)
              continue;
          }
          v30 = v46 + 1;
          goto LABEL_71;
        }
        v30 = v44 + 1;
      }
LABEL_71:
      v14 = v15;
      v15 = (v29 - 2);
    }
    v47 = v30 - v5;
    v48 = *(_OWORD **)(a2 + 24);
    if (v30 <= v45)
    {
      *v48 = *(_OWORD *)v5;
      v52 = *(_QWORD *)(a2 + 24);
      if (v47 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v52 + v47;
        v57 = *(_QWORD *)(a2 + 8);
        goto LABEL_86;
      }
      v53 = (_OWORD *)(v52 + 16);
      v54 = v52 + v47;
      v55 = (__int128 *)(v5 + 16);
      do
      {
        v56 = *v55++;
        *v53++ = v56;
      }
      while ((unint64_t)v53 < v54);
    }
    else
    {
      if (v5 <= v45)
      {
        v49 = (_OWORD *)((char *)v48 + v45 - v5);
        do
        {
          v50 = *(_OWORD *)v5;
          v5 += 16;
          *v48++ = v50;
        }
        while (v48 < v49);
        v5 = v45;
        v48 = v49;
      }
      while (v5 < v30)
      {
        v51 = *v5++;
        *(_BYTE *)v48 = v51;
        v48 = (_OWORD *)((char *)v48 + 1);
      }
    }
    *(_QWORD *)(a2 + 24) += v47;
    v57 = *(_QWORD *)(a2 + 8);
    if (v47 >= 0x10000)
    {
      v58 = (unint64_t)(v57 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v58;
    }
LABEL_86:
    *(_WORD *)(v57 + 4) = v47;
    *(_DWORD *)v57 = v29 + 1;
    if (v28 - 3 >= 0x10000)
    {
      v59 = (unint64_t)(v57 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v59;
    }
    *(_WORD *)(v57 + 6) = v28 - 3;
    v60 = v57 + 8;
    *(_QWORD *)(a2 + 8) = v57 + 8;
    v5 = &v30[v28];
    if ((unint64_t)&v30[v28] <= v81)
    {
      v61 = v15;
      v62 = v14;
      v9 = (_QWORD *)(v7 + v8);
      while (1)
      {
        v15 = v62;
        v62 = v61;
        v63 = ((_DWORD)v5 - v7 - v15);
        v64 = v75;
        if (v63 >= v8)
          v64 = v7;
        if ((v8 + ~(_DWORD)v63) < 3)
          break;
        v65 = v64 + v63;
        if (*(_DWORD *)v65 != *(_DWORD *)v5)
          break;
        if (v63 >= v8)
          v66 = (char *)v6;
        else
          v66 = v76;
        v67 = ZSTD_count_2segments(v5 + 4, (char *)(v65 + 4), v6, v66, v73);
        if ((unint64_t)v5 <= v6 - 32)
        {
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
          v60 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)(v60 + 4) = 0;
        *(_DWORD *)v60 = 1;
        if (v67 + 1 >= 0x10000)
        {
          v68 = (unint64_t)(v60 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v68;
        }
        *(_WORD *)(v60 + 6) = v67 + 1;
        v60 += 8;
        v5 += v67 + 4;
        *(_QWORD *)(a2 + 8) = v60;
        v61 = v15;
        LODWORD(v14) = v62;
        v18 = (unint64_t)v5;
        if ((unint64_t)v5 > v81)
          goto LABEL_105;
      }
      LODWORD(v14) = v15;
      v15 = v61;
      v18 = (unint64_t)v5;
    }
    else
    {
      v18 = (unint64_t)&v30[v28];
      v9 = (_QWORD *)(v7 + v8);
    }
    goto LABEL_105;
  }
LABEL_107:
  *a3 = v15;
  a3[1] = v14;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy_dedicatedDictSearch(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unint64_t v44;
  _OWORD *v45;
  _OWORD *v46;
  __int128 v47;
  char v48;
  uint64_t v49;
  _OWORD *v50;
  unint64_t v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int *v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  unsigned __int8 *v73;
  unsigned int v74;
  unsigned int v75;
  unint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  char *v80;
  uint64_t (*v81)(uint64_t, unsigned __int8 *, unint64_t, _QWORD *);
  uint64_t v82;
  unsigned __int8 *v84;
  unsigned int v85;
  _QWORD v86[2];

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = (unint64_t)&a4[a5 - 8];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 256);
  v11 = v10 - 7;
  v12 = 2 * (v10 > 3);
  v13 = v10 - 4;
  if (v11 < 0xFFFFFFFD)
    v13 = v12;
  v15 = *a3;
  LODWORD(v14) = a3[1];
  v84 = (unsigned __int8 *)(v8 + v9);
  v16 = *(_QWORD *)(a1 + 232);
  v18 = *(char **)v16;
  v17 = *(_QWORD *)(v16 + 8);
  v73 = (unsigned __int8 *)(v17 + *(unsigned int *)(v16 + 24));
  if ((_DWORD)a4 - ((_DWORD)v8 + (_DWORD)v9) - (_DWORD)v73 + *(_QWORD *)v16)
    v19 = a4;
  else
    v19 = a4 + 1;
  if ((unint64_t)v19 < v7)
  {
    v20 = a2;
    v67 = a3;
    v80 = *(char **)v16;
    v81 = *(uint64_t (**)(uint64_t, unsigned __int8 *, unint64_t, _QWORD *))off_1E6E2C3F8[v13 + 9];
    v74 = v9 + v17 - (_DWORD)v18;
    v77 = v17 - v74;
    v78 = (unsigned __int8 *)(v6 - 32);
    v69 = -(int)v8;
    v70 = v9 + v8 - 2;
    v68 = (_DWORD)v18 - v9 - v17 - v8 + 1;
    v85 = *(_DWORD *)(a1 + 24);
    v82 = *(_QWORD *)(v16 + 8);
    v71 = (uint64_t)&a4[a5 - 8];
    v79 = *(_QWORD *)(a1 + 8);
    while (1)
    {
      v21 = (_DWORD)v19 - v8 - v15;
      v22 = (v21 + 1);
      v23 = v17 + v22 - v74;
      if (v22 >= v9)
        v23 = v8 + v22;
      v75 = v14;
      if ((v9 - v21 - 5) <= 0xFFFFFFFC && *(_DWORD *)v23 == *(_DWORD *)(v19 + 1))
      {
        v24 = v22 >= v9 ? (char *)v6 : v80;
        v25 = ZSTD_count_2segments(v19 + 5, (char *)(v23 + 4), v6, v24, v84) + 4;
      }
      else
      {
        v25 = 0;
      }
      v86[0] = 999999999;
      v26 = v81(a1, v19, v6, v86);
      v9 = v26 <= v25 ? v25 : v26;
      if (v9 >= 4)
        break;
      v19 += ((v19 - v5) >> 8) + 1;
      LODWORD(v9) = v85;
      LODWORD(v14) = v75;
LABEL_90:
      v17 = v82;
      if ((unint64_t)v19 >= v7)
      {
        a3 = v67;
        goto LABEL_92;
      }
    }
    if (v26 <= v25)
      v27 = (unint64_t)(v19 + 1);
    else
      v27 = (unint64_t)v19;
    if (v26 <= v25)
      v28 = 0;
    else
      v28 = v86[0];
    if ((unint64_t)v19 < v7)
    {
      v29 = v6;
      v30 = 0;
      v76 = v7 - (_QWORD)v19;
      v31 = v70 + v15 - (_DWORD)v19;
      while (1)
      {
        v32 = &v19[v30 + 1];
        v33 = (v69 + (_DWORD)v19 - v15 + v30 + 1);
        v34 = v82 + (v68 + (_DWORD)v19 - v15 + v30);
        if (v33 >= v85)
          v34 = v79 + v33;
        if (v31 >= 3 && *(_DWORD *)v34 == *(_DWORD *)v32)
        {
          v35 = v33 >= v85 ? (char *)v29 : v80;
          v36 = ZSTD_count_2segments(&v19[v30 + 5], (char *)(v34 + 4), v29, v35, v84);
          if (v36 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v36 + 4) > (int)(3 * v9 + (__clz(v28 + 1) ^ 0xFFFFFFE0) + 2))
          {
            v28 = 0;
            v9 = v36 + 4;
            v27 = (unint64_t)&v19[v30 + 1];
          }
        }
        v86[0] = 999999999;
        v37 = v81(a1, &v19[v30 + 1], v29, v86);
        if (v37 < 4
          || (int)((__clz(LODWORD(v86[0]) + 1) ^ 0xFFFFFFE0) + 4 * v37 + 1) <= (int)((__clz(v28 + 1) ^ 0xFFFFFFE0)
                                                                                   + 4 * v9
                                                                                   + 5))
        {
          break;
        }
        ++v30;
        --v31;
        v27 = (unint64_t)v32;
        v28 = v86[0];
        v9 = v37;
        if (v76 == v30)
        {
          v9 = v37;
          v28 = v86[0];
          v7 = v71;
          v27 = v71;
          v6 = v29;
          v20 = a2;
          goto LABEL_45;
        }
      }
      v6 = v29;
      v7 = v71;
      v20 = a2;
    }
LABEL_45:
    v14 = v75;
    if (v28 > 2)
    {
      v38 = v79;
      v39 = v84;
      if (v85 > (int)v27 - ((int)v28 + (int)v79) + 2)
      {
        v39 = v73;
        v38 = v77;
      }
      if (v27 > (unint64_t)v5
        && v38 + (unint64_t)(v27 - (v28 + v79) + 2) > (unint64_t)v39)
      {
        v40 = (unsigned __int8 *)(v38 + (v27 - (v28 + v79) + 2) - 1);
        v41 = (unsigned __int8 *)(v27 - 1);
        while (*v41 == *v40)
        {
          ++v9;
          v42 = v41 - 1;
          if (v41 > v5)
          {
            --v41;
            if (v40-- > v39)
              continue;
          }
          v27 = (unint64_t)(v42 + 1);
          goto LABEL_56;
        }
        v27 = (unint64_t)(v41 + 1);
      }
LABEL_56:
      v14 = v15;
      v15 = (v28 - 2);
    }
    v44 = v27 - (_QWORD)v5;
    v45 = *(_OWORD **)(v20 + 24);
    if (v27 <= (unint64_t)v78)
    {
      *v45 = *(_OWORD *)v5;
      v49 = *(_QWORD *)(v20 + 24);
      if (v44 <= 0x10)
      {
        *(_QWORD *)(v20 + 24) = v49 + v44;
        v54 = *(_QWORD *)(v20 + 8);
        goto LABEL_71;
      }
      v50 = (_OWORD *)(v49 + 16);
      v51 = v49 + v44;
      v52 = (__int128 *)(v5 + 16);
      do
      {
        v53 = *v52++;
        *v50++ = v53;
      }
      while ((unint64_t)v50 < v51);
    }
    else
    {
      if (v5 <= v78)
      {
        v46 = (_OWORD *)((char *)v45 + v78 - v5);
        do
        {
          v47 = *(_OWORD *)v5;
          v5 += 16;
          *v45++ = v47;
        }
        while (v45 < v46);
        v5 = v78;
        v45 = v46;
      }
      while ((unint64_t)v5 < v27)
      {
        v48 = *v5++;
        *(_BYTE *)v45 = v48;
        v45 = (_OWORD *)((char *)v45 + 1);
      }
    }
    *(_QWORD *)(v20 + 24) += v44;
    v54 = *(_QWORD *)(v20 + 8);
    if (v44 >= 0x10000)
    {
      v55 = (unint64_t)(v54 - *(_QWORD *)v20) >> 3;
      *(_DWORD *)(v20 + 72) = 1;
      *(_DWORD *)(v20 + 76) = v55;
    }
LABEL_71:
    *(_WORD *)(v54 + 4) = v44;
    *(_DWORD *)v54 = v28 + 1;
    if (v9 - 3 >= 0x10000)
    {
      v56 = (unint64_t)(v54 - *(_QWORD *)v20) >> 3;
      *(_DWORD *)(v20 + 72) = 2;
      *(_DWORD *)(v20 + 76) = v56;
    }
    *(_WORD *)(v54 + 6) = v9 - 3;
    v57 = v54 + 8;
    *(_QWORD *)(v20 + 8) = v54 + 8;
    v5 = (unsigned __int8 *)(v27 + v9);
    if (v27 + v9 <= v7)
    {
      v58 = v15;
      v59 = v14;
      v8 = v79;
      LODWORD(v9) = v85;
      while (1)
      {
        v15 = v59;
        v59 = v58;
        v60 = ((_DWORD)v5 - v79 - v15);
        v61 = v77;
        if (v60 >= v85)
          v61 = v79;
        if (v85 + ~(_DWORD)v60 < 3)
          break;
        v62 = v61 + v60;
        if (*(_DWORD *)v62 != *(_DWORD *)v5)
          break;
        if (v60 >= v85)
          v63 = (char *)v6;
        else
          v63 = v80;
        v64 = ZSTD_count_2segments(v5 + 4, (char *)(v62 + 4), v6, v63, v84);
        if (v5 <= v78)
        {
          *(_OWORD *)*(_QWORD *)(v20 + 24) = *(_OWORD *)v5;
          v57 = *(_QWORD *)(v20 + 8);
        }
        *(_WORD *)(v57 + 4) = 0;
        *(_DWORD *)v57 = 1;
        if (v64 + 1 >= 0x10000)
        {
          v65 = (unint64_t)(v57 - *(_QWORD *)v20) >> 3;
          *(_DWORD *)(v20 + 72) = 2;
          *(_DWORD *)(v20 + 76) = v65;
        }
        *(_WORD *)(v57 + 6) = v64 + 1;
        v57 += 8;
        v5 += v64 + 4;
        *(_QWORD *)(v20 + 8) = v57;
        v58 = v15;
        LODWORD(v14) = v59;
        v19 = v5;
        if ((unint64_t)v5 > v7)
          goto LABEL_90;
      }
      LODWORD(v14) = v15;
      v15 = v58;
      v19 = v5;
    }
    else
    {
      v19 = (unsigned __int8 *)(v27 + v9);
      v8 = v79;
      LODWORD(v9) = v85;
    }
    goto LABEL_90;
  }
LABEL_92:
  *a3 = v15;
  a3[1] = v14;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_greedy_dedicatedDictSearch(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  char *v30;
  char *v31;
  unsigned __int8 *v32;
  unint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  char v38;
  uint64_t v39;
  _OWORD *v40;
  unint64_t v41;
  __int128 *v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int *v57;
  unint64_t v58;
  uint64_t (*v59)(uint64_t, char *, unint64_t, uint64_t *);
  unsigned int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 256);
  v10 = v9 - 7;
  v11 = 2 * (v9 > 3);
  v12 = v9 - 4;
  if (v10 < 0xFFFFFFFD)
    v12 = v11;
  v13 = *a3;
  v14 = a3[1];
  v15 = *(_QWORD *)(a1 + 232);
  v16 = *(_QWORD *)(v15 + 8);
  v65 = (_QWORD *)(v7 + v8);
  v58 = v16 + *(unsigned int *)(v15 + 24);
  if ((_DWORD)a4 - ((_DWORD)v7 + (_DWORD)v8) - (_DWORD)v58 + *(_QWORD *)v15)
    v17 = a4;
  else
    v17 = a4 + 1;
  v66 = (unint64_t)&a4[a5 - 8];
  if ((unint64_t)v17 < v66)
  {
    v57 = a3;
    v59 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *))off_1E6E2C3F8[v12 + 9];
    v61 = v8 + v16 - *(_QWORD *)v15;
    v63 = *(char **)v15;
    v64 = v16 - v61;
    v62 = *(_QWORD *)(v15 + 8);
    while (1)
    {
      v19 = v17 + 1;
      v20 = (_DWORD)v17 - v7 - v13;
      v21 = (v20 + 1);
      v22 = v16 + v21 - v61;
      if (v21 >= v8)
        v22 = v7 + v21;
      if ((v8 - v20 - 5) <= 0xFFFFFFFC && *(_DWORD *)v22 == *(_DWORD *)v19)
        break;
      v67 = 999999999;
      v26 = v59(a1, v17, v6, &v67);
      v25 = v67;
      if (v26)
        v19 = v17;
      else
        v25 = 0;
      if (v26 > 3)
      {
        if (v25 >= 3)
        {
          v27 = v7 + v8;
          if (v8 > (int)v19 - (int)v7 - (int)v25 + 2)
            v27 = v58;
          v28 = v64;
          if (v8 <= (int)v19 - (int)v7 - (int)v25 + 2)
            v28 = v7;
          if (v19 <= v5 || v28 + (unint64_t)((_DWORD)v19 - v7 - v25 + 2) <= v27)
          {
            v31 = (char *)(v6 - 32);
          }
          else
          {
            v29 = (unsigned __int8 *)(v28 + ((_DWORD)v19 - v7 - v25 + 2) - 1);
            v30 = v19 - 1;
            v31 = (char *)(v6 - 32);
            while (*v30 == *v29)
            {
              ++v26;
              v32 = (unsigned __int8 *)(v30 - 1);
              if (v30 > v5)
              {
                --v30;
                if ((unint64_t)v29-- > v27)
                  continue;
              }
              v19 = (char *)(v32 + 1);
              goto LABEL_36;
            }
            v19 = v30 + 1;
          }
LABEL_36:
          v14 = v13;
          v13 = (v25 - 2);
LABEL_37:
          v34 = v19 - v5;
          v35 = *(_OWORD **)(a2 + 24);
          if (v19 <= v31)
          {
            *v35 = *(_OWORD *)v5;
            v39 = *(_QWORD *)(a2 + 24);
            if (v34 > 0x10)
            {
              v40 = (_OWORD *)(v39 + 16);
              v41 = v39 + v34;
              v42 = (__int128 *)(v5 + 16);
              do
              {
                v43 = *v42++;
                *v40++ = v43;
              }
              while ((unint64_t)v40 < v41);
              goto LABEL_48;
            }
            *(_QWORD *)(a2 + 24) = v39 + v34;
            v44 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (v5 <= v31)
            {
              v36 = (_OWORD *)((char *)v35 + v31 - v5);
              do
              {
                v37 = *(_OWORD *)v5;
                v5 += 16;
                *v35++ = v37;
              }
              while (v35 < v36);
              v5 = v31;
              v35 = v36;
            }
            while (v5 < v19)
            {
              v38 = *v5++;
              *(_BYTE *)v35 = v38;
              v35 = (_OWORD *)((char *)v35 + 1);
            }
LABEL_48:
            *(_QWORD *)(a2 + 24) += v34;
            v44 = *(_QWORD *)(a2 + 8);
            if (v34 >= 0x10000)
            {
              v45 = (unint64_t)(v44 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v45;
            }
          }
          *(_WORD *)(v44 + 4) = v34;
          *(_DWORD *)v44 = v25 + 1;
          if (v26 - 3 >= 0x10000)
          {
            v46 = (unint64_t)(v44 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v46;
          }
          *(_WORD *)(v44 + 6) = v26 - 3;
          v47 = v44 + 8;
          *(_QWORD *)(a2 + 8) = v44 + 8;
          v5 = &v19[v26];
          if ((unint64_t)&v19[v26] <= v66)
          {
            v48 = v13;
            v49 = v14;
            while (1)
            {
              v13 = v49;
              v49 = v48;
              v50 = ((_DWORD)v5 - v7 - v13);
              v51 = v64;
              if (v50 >= v8)
                v51 = v7;
              if ((v8 + ~(_DWORD)v50) < 3)
                break;
              v52 = v51 + v50;
              if (*(_DWORD *)v52 != *(_DWORD *)v5)
                break;
              if (v50 >= v8)
                v53 = (char *)v6;
              else
                v53 = v63;
              v54 = ZSTD_count_2segments(v5 + 4, (char *)(v52 + 4), v6, v53, v65);
              if ((unint64_t)v5 <= v6 - 32)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                v47 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v47 + 4) = 0;
              *(_DWORD *)v47 = 1;
              if (v54 + 1 >= 0x10000)
              {
                v55 = (unint64_t)(v47 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v55;
              }
              *(_WORD *)(v47 + 6) = v54 + 1;
              v47 += 8;
              v5 += v54 + 4;
              *(_QWORD *)(a2 + 8) = v47;
              v48 = v13;
              v14 = v49;
              v17 = v5;
              if ((unint64_t)v5 > v66)
                goto LABEL_70;
            }
            v14 = v13;
            v13 = v48;
          }
          v17 = v5;
          goto LABEL_70;
        }
LABEL_33:
        v31 = (char *)(v6 - 32);
        goto LABEL_37;
      }
      v17 += ((v17 - v5) >> 8) + 1;
LABEL_70:
      v16 = v62;
      if ((unint64_t)v17 >= v66)
      {
        a3 = v57;
        goto LABEL_72;
      }
    }
    if (v21 >= v8)
      v23 = (char *)v6;
    else
      v23 = v63;
    v24 = ZSTD_count_2segments(v17 + 5, (char *)(v22 + 4), v6, v23, v65);
    LODWORD(v25) = 0;
    v26 = v24 + 4;
    goto LABEL_33;
  }
LABEL_72:
  *a3 = v13;
  a3[1] = v14;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy2_row(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  unsigned __int16 *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  unint64_t v76;
  unsigned __int16 *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  int v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _OWORD *v92;
  _OWORD *v93;
  __int128 v94;
  char v95;
  uint64_t v96;
  _OWORD *v97;
  unint64_t v98;
  __int128 *v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  unint64_t v112;
  _BYTE *v113;
  _QWORD *v114;
  uint64_t v115;
  unint64_t v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v120;
  unsigned int v121;
  unsigned int *v122;
  unint64_t v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t (*v127)(uint64_t, char *, unint64_t, uint64_t *);
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;

  v5 = a4;
  v129 = (unint64_t)&a4[a5];
  v7 = (unint64_t)&a4[a5 - 16];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = v8 + v9;
  v11 = *(_DWORD *)(a1 + 252);
  v12 = *(_DWORD *)(a1 + 256);
  v13 = 2 * (v12 > 3);
  if (v12 - 7 >= 0xFFFFFFFD)
    v13 = v12 - 4;
  v14 = 2 * (v11 > 3);
  if (v11 - 7 >= 0xFFFFFFFD)
    v14 = v11 - 4;
  v127 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *))*(&off_1E6E2C4B8[3 * v13] + v14);
  v15 = *a3;
  v16 = a3[1];
  if ((_DWORD)a4 == (_DWORD)v10)
    v17 = a4 + 1;
  else
    v17 = a4;
  v18 = (_DWORD)v17 - v8;
  v19 = 1 << *(_DWORD *)(a1 + 240);
  v20 = (_DWORD)v17 - v8 - v19;
  v58 = (int)v17 - (int)v8 - (int)v9 > v19;
  v21 = *(unsigned int *)(a1 + 44);
  if (v58 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v9) = v20;
  v23 = v18 - v9;
  if (v16 <= v18 - (int)v9)
    LODWORD(v24) = a3[1];
  else
    LODWORD(v24) = 0;
  if (v15 <= v23)
    v25 = v15;
  else
    v25 = 0;
  if (v11 >= 6)
    v26 = 6;
  else
    v26 = *(_DWORD *)(a1 + 252);
  if (v26 <= 4)
    v27 = 4;
  else
    v27 = v26;
  if (v12 >= 6)
    v12 = 6;
  v28 = v7 - (v8 + v21);
  if ((v28 + 1) < 8)
    v29 = v28 + 1;
  else
    v29 = 8;
  v130 = (unint64_t)&a4[a5 - 16];
  if (v7 >= v8 + v21)
    v30 = v29;
  else
    v30 = 0;
  v31 = (v30 + v21);
  if (v21 < v31)
  {
    v32 = *(_QWORD *)(a1 + 96);
    v33 = *(_DWORD *)(a1 + 52);
    v34 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v12 == 5)
      {
        v35 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v8 + v21);
      }
      else
      {
        if (v12 != 6)
        {
          LODWORD(v36) = (-1640531535 * *(_DWORD *)(v8 + v21)) >> (24 - v33);
          goto LABEL_41;
        }
        v35 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v8 + v21);
      }
      v36 = v35 >> (56 - v33);
LABEL_41:
      v37 = v36 >> 8 << v27;
      _X5 = v32 + 4 * v37;
      __asm { PRFM            #0, [X5] }
      if (v26 > 4)
      {
        __asm { PRFM            #0, [X5,#0x40] }
        _X4 = v34 + 2 * v37;
        __asm { PRFM            #0, [X4] }
        if (v27 == 6)
          __asm { PRFM            #0, [X4,#0x40] }
      }
      else
      {
        _X4 = v34 + 2 * v37;
        __asm { PRFM            #0, [X4] }
      }
      *(_DWORD *)(a1 + 4 * (v21++ & 7) + 64) = v36;
    }
    while (v31 != v21);
  }
  if ((unint64_t)v17 < v130)
  {
    v120 = v16;
    v121 = v15;
    v122 = a3;
    v123 = v10;
    v49 = v129 - 7;
    v125 = v129 - 1;
    v126 = v129 - 3;
    while (1)
    {
      v124 = v24;
      v50 = 0;
      if (!(_DWORD)v25 || *(_DWORD *)&v17[-v25 + 1] != *(_DWORD *)(v17 + 1))
        goto LABEL_65;
      v51 = v17 + 5;
      v52 = &v17[-v25 + 5];
      if (v49 <= (unint64_t)(v17 + 5))
        break;
      v53 = *(_QWORD *)v51 ^ *(_QWORD *)v52;
      if (!v53)
      {
        v87 = v17 + 13;
        while (1)
        {
          v88 = &v87[v53];
          if ((unint64_t)&v87[v53] >= v49)
            break;
          v89 = *(_QWORD *)&v17[v53 + 13 - v25];
          v53 += 8;
          v90 = *(_QWORD *)v88 ^ v89;
          if (v90)
          {
            v54 = v53 + (__clz(__rbit64(v90)) >> 3);
            goto LABEL_64;
          }
        }
        v55 = &v17[v53 + 13];
        v52 = &v55[-v25];
        goto LABEL_54;
      }
      v54 = __clz(__rbit64(v53)) >> 3;
LABEL_64:
      v50 = v54 + 4;
LABEL_65:
      v131 = 999999999;
      v56 = v127(a1, v17, v129, &v131);
      if (v56 <= v50)
        v57 = v50;
      else
        v57 = v56;
      if (v57 >= 4)
      {
        v58 = v56 > v50;
        if (v56 <= v50)
          v59 = v17 + 1;
        else
          v59 = v17;
        if (v58)
          v60 = v131;
        else
          v60 = 0;
        v61 = v57;
        v62 = v60;
        v63 = v59;
        if ((unint64_t)v17 < v130)
        {
          do
          {
            v63 = v17 + 1;
            if (!v60 || !(_DWORD)v25 || *(_DWORD *)v63 != *(_DWORD *)&v63[-v25])
              goto LABEL_101;
            v64 = v17 + 5;
            v65 = &v17[-v25 + 5];
            if (v49 <= (unint64_t)(v17 + 5))
            {
              v68 = (unsigned __int16 *)(v17 + 5);
            }
            else
            {
              v66 = *(_QWORD *)v64 ^ *(_QWORD *)v65;
              if (v66)
              {
                v67 = __clz(__rbit64(v66)) >> 3;
LABEL_99:
                v72 = v67 + 4;
                if (3 * (int)v72 > (int)(3 * v57 + (__clz(v60 + 1) ^ 0xFFFFFFE0) + 2))
                {
                  v60 = 0;
                  v57 = v72;
                  v59 = v17 + 1;
                }
                goto LABEL_101;
              }
              v68 = (unsigned __int16 *)(v17 + 13);
              while ((unint64_t)v68 < v49)
              {
                v69 = *(_QWORD *)((char *)v68 - v25);
                v70 = *(_QWORD *)v68;
                v68 += 4;
                v71 = v70 ^ v69;
                if (v71)
                {
                  v68 = (unsigned __int16 *)((char *)v68 + (__clz(__rbit64(v71)) >> 3) - 8);
                  goto LABEL_98;
                }
              }
              v65 = (char *)v68 - v25;
            }
            if ((unint64_t)v68 < v126 && *(_DWORD *)v65 == *(_DWORD *)v68)
            {
              v68 += 2;
              v65 += 4;
            }
            if ((unint64_t)v68 < v125 && *(unsigned __int16 *)v65 == *v68)
            {
              ++v68;
              v65 += 2;
            }
            if ((unint64_t)v68 < v129 && *v65 == *(_BYTE *)v68)
              v68 = (unsigned __int16 *)((char *)v68 + 1);
LABEL_98:
            v67 = (char *)v68 - v64;
            if (v67 <= 0xFFFFFFFFFFFFFFFBLL)
              goto LABEL_99;
LABEL_101:
            v131 = 999999999;
            v61 = v127(a1, v17 + 1, v129, &v131);
            if (v61 >= 4)
            {
              v62 = v131;
              if ((int)((__clz(v131 + 1) ^ 0xFFFFFFE0) + 4 * v61 + 1) > (int)((__clz(v60 + 1) ^ 0xFFFFFFE0)
                                                                             + 4 * v57
                                                                             + 5))
                goto LABEL_130;
            }
            if ((unint64_t)v63 >= v130)
              goto LABEL_134;
            v63 = v17 + 2;
            if (v60 && (_DWORD)v25 && *(_DWORD *)v63 == *(_DWORD *)&v63[-v25])
            {
              v73 = v17 + 6;
              v74 = &v17[-v25 + 6];
              if (v49 <= (unint64_t)(v17 + 6))
              {
                v77 = (unsigned __int16 *)(v17 + 6);
              }
              else
              {
                v75 = *(_QWORD *)v73 ^ *(_QWORD *)v74;
                if (v75)
                {
                  v76 = __clz(__rbit64(v75)) >> 3;
LABEL_126:
                  v81 = v76 + 4;
                  if ((int)((__clz(v60 + 1) ^ 0xFFFFFFE0) + 4 * v57 + 2) < 4 * (int)v81)
                  {
                    v60 = 0;
                    v57 = v81;
                    v59 = v17 + 2;
                  }
                  goto LABEL_128;
                }
                v77 = (unsigned __int16 *)(v17 + 14);
                while ((unint64_t)v77 < v49)
                {
                  v78 = *(_QWORD *)((char *)v77 - v25);
                  v79 = *(_QWORD *)v77;
                  v77 += 4;
                  v80 = v79 ^ v78;
                  if (v80)
                  {
                    v77 = (unsigned __int16 *)((char *)v77 + (__clz(__rbit64(v80)) >> 3) - 8);
                    goto LABEL_125;
                  }
                }
                v74 = (char *)v77 - v25;
              }
              if ((unint64_t)v77 < v126 && *(_DWORD *)v74 == *(_DWORD *)v77)
              {
                v77 += 2;
                v74 += 4;
              }
              if ((unint64_t)v77 < v125 && *(unsigned __int16 *)v74 == *v77)
              {
                ++v77;
                v74 += 2;
              }
              if ((unint64_t)v77 < v129 && *v74 == *(_BYTE *)v77)
                v77 = (unsigned __int16 *)((char *)v77 + 1);
LABEL_125:
              v76 = (char *)v77 - v73;
              if (v76 <= 0xFFFFFFFFFFFFFFFBLL)
                goto LABEL_126;
            }
LABEL_128:
            v131 = 999999999;
            v61 = v127(a1, v17 + 2, v129, &v131);
            if (v61 < 4
              || (v62 = v131,
                  (int)((__clz(v131 + 1) ^ 0xFFFFFFE0) + 4 * v61 + 1) <= (int)((__clz(v60 + 1) ^ 0xFFFFFFE0)
                                                                             + 4 * v57
                                                                             + 8)))
            {
LABEL_134:
              v61 = v57;
              v62 = v60;
              v63 = v59;
              break;
            }
LABEL_130:
            v17 = v63;
            v59 = v63;
            v60 = v62;
            v57 = v61;
          }
          while ((unint64_t)v63 < v130);
        }
        v24 = v124;
        if (v62 <= 2)
        {
          v82 = (char *)(v129 - 32);
        }
        else
        {
          v82 = (char *)(v129 - 32);
          if (v63 <= v5 || (unint64_t)&v63[-v62 + 2] <= v123)
          {
            v84 = v63;
          }
          else
          {
            v83 = 1 - v62;
            v84 = v63;
            while (1)
            {
              v85 = *--v84;
              if (v85 != v63[v83])
                break;
              ++v61;
              if (v84 > v5)
              {
                v86 = &v63[v83];
                v63 = v84;
                if ((unint64_t)v86 > v123)
                  continue;
              }
              goto LABEL_150;
            }
            v84 = v63;
          }
LABEL_150:
          v24 = v25;
          v25 = (v62 - 2);
          v63 = v84;
        }
        v91 = v63 - v5;
        v92 = *(_OWORD **)(a2 + 24);
        if (v63 <= v82)
        {
          *v92 = *(_OWORD *)v5;
          v96 = *(_QWORD *)(a2 + 24);
          if (v91 > 0x10)
          {
            v97 = (_OWORD *)(v96 + 16);
            v98 = v96 + v91;
            v99 = (__int128 *)(v5 + 16);
            do
            {
              v100 = *v99++;
              *v97++ = v100;
            }
            while ((unint64_t)v97 < v98);
            goto LABEL_162;
          }
          *(_QWORD *)(a2 + 24) = v96 + v91;
          v101 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          if (v5 <= v82)
          {
            v93 = (_OWORD *)((char *)v92 + v82 - v5);
            do
            {
              v94 = *(_OWORD *)v5;
              v5 += 16;
              *v92++ = v94;
            }
            while (v92 < v93);
            v5 = v82;
            v92 = v93;
          }
          while (v5 < v63)
          {
            v95 = *v5++;
            *(_BYTE *)v92 = v95;
            v92 = (_OWORD *)((char *)v92 + 1);
          }
LABEL_162:
          *(_QWORD *)(a2 + 24) += v91;
          v101 = *(_QWORD *)(a2 + 8);
          if (v91 >= 0x10000)
          {
            v102 = (unint64_t)(v101 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v102;
          }
        }
        *(_WORD *)(v101 + 4) = v91;
        *(_DWORD *)v101 = v62 + 1;
        if (v61 - 3 >= 0x10000)
        {
          v103 = (unint64_t)(v101 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v103;
        }
        *(_WORD *)(v101 + 6) = v61 - 3;
        v104 = v101 + 8;
        *(_QWORD *)(a2 + 8) = v101 + 8;
        v5 = &v63[v61];
        if (!(_DWORD)v24 || (unint64_t)v5 > v130)
        {
LABEL_199:
          v17 = v5;
          goto LABEL_200;
        }
        v105 = v25;
        v106 = v24;
        while (2)
        {
          v25 = v106;
          v106 = v105;
          if (*(_DWORD *)v5 != *(_DWORD *)&v5[-v25])
          {
            LODWORD(v24) = v25;
            v25 = v105;
            goto LABEL_199;
          }
          v107 = v5 + 4;
          v108 = &v5[-v25 + 4];
          if (v49 <= (unint64_t)(v5 + 4))
          {
            v111 = v5 + 4;
          }
          else
          {
            v109 = *(_QWORD *)v107 ^ *(_QWORD *)v108;
            if (v109)
            {
              v110 = __clz(__rbit64(v109)) >> 3;
LABEL_185:
              if (v5 <= v82)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                v104 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v104 + 4) = 0;
              *(_DWORD *)v104 = 1;
              if (v110 + 1 >= 0x10000)
              {
                v112 = (unint64_t)(v104 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v112;
              }
              *(_WORD *)(v104 + 6) = v110 + 1;
              v104 += 8;
              *(_QWORD *)(a2 + 8) = v104;
              v5 += v110 + 4;
              if (!(_DWORD)v106)
              {
                LODWORD(v24) = 0;
                goto LABEL_199;
              }
              v105 = v25;
              LODWORD(v24) = v106;
              v17 = v5;
              if ((unint64_t)v5 > v130)
                goto LABEL_200;
              continue;
            }
            v113 = v5 + 12;
            while (1)
            {
              v114 = &v113[v109];
              if ((unint64_t)&v113[v109] >= v49)
                break;
              v115 = *(_QWORD *)&v5[v109 + 12 - v25];
              v109 += 8;
              v116 = *v114 ^ v115;
              if (v116)
              {
                v110 = v109 + (__clz(__rbit64(v116)) >> 3);
                goto LABEL_185;
              }
            }
            v111 = &v5[v109 + 12];
            v108 = &v111[-v25];
          }
          break;
        }
        if ((unint64_t)v111 < v126 && *(_DWORD *)v108 == *(_DWORD *)v111)
        {
          v111 += 4;
          v108 += 4;
        }
        if ((unint64_t)v111 < v125 && *(unsigned __int16 *)v108 == *(unsigned __int16 *)v111)
        {
          v111 += 2;
          v108 += 2;
        }
        if ((unint64_t)v111 < v129 && *v108 == *v111)
          ++v111;
        v110 = v111 - v107;
        goto LABEL_185;
      }
      v17 += ((v17 - v5) >> 8) + 1;
      LODWORD(v24) = v124;
LABEL_200:
      if ((unint64_t)v17 >= v130)
      {
        a3 = v122;
        v16 = v120;
        v15 = v121;
        goto LABEL_203;
      }
    }
    v55 = v17 + 5;
LABEL_54:
    if ((unint64_t)v55 < v126 && *(_DWORD *)v52 == *(_DWORD *)v55)
    {
      v55 += 4;
      v52 += 4;
    }
    if ((unint64_t)v55 < v125 && *(unsigned __int16 *)v52 == *(unsigned __int16 *)v55)
    {
      v55 += 2;
      v52 += 2;
    }
    if ((unint64_t)v55 < v129 && *v52 == *v55)
      ++v55;
    v54 = v55 - v51;
    goto LABEL_64;
  }
LABEL_203:
  if (v16 <= v23)
    v117 = 0;
  else
    v117 = v16;
  if (v15 > v23)
    v117 = v15;
  if ((_DWORD)v25)
    v118 = v25;
  else
    v118 = v117;
  if ((_DWORD)v24)
    v117 = v24;
  *a3 = v118;
  a3[1] = v117;
  return v129 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy_row(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  unsigned int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int16 *v65;
  char *v66;
  char *v67;
  char *v68;
  unsigned __int16 *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _BYTE *v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  unint64_t v85;
  _OWORD *v86;
  _OWORD *v87;
  __int128 v88;
  char v89;
  uint64_t v90;
  _OWORD *v91;
  unint64_t v92;
  __int128 *v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  unint64_t v106;
  _BYTE *v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  char *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unsigned int v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t (*v126)(uint64_t, char *, unint64_t, uint64_t *);
  uint64_t v128;

  v5 = a4;
  v7 = (unint64_t)&a4[a5];
  v8 = (unint64_t)&a4[a5 - 16];
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 24);
  v11 = v9 + v10;
  v12 = *(_DWORD *)(a1 + 252);
  v13 = *(_DWORD *)(a1 + 256);
  v14 = 2 * (v13 > 3);
  if (v13 - 7 >= 0xFFFFFFFD)
    v14 = v13 - 4;
  v15 = 2 * (v12 > 3);
  if (v12 - 7 >= 0xFFFFFFFD)
    v15 = v12 - 4;
  v126 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *))*(&off_1E6E2C4B8[3 * v14] + v15);
  v16 = *a3;
  v17 = a3[1];
  if ((_DWORD)a4 == (_DWORD)v11)
    v18 = a4 + 1;
  else
    v18 = a4;
  v19 = 1 << *(_DWORD *)(a1 + 240);
  v20 = (_DWORD)v18 - v9 - v19;
  v21 = (int)v18 - (int)v9 - (int)v10 > v19;
  v22 = *(unsigned int *)(a1 + 44);
  if (v21 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v10) = v20;
  v24 = (_DWORD)v18 - v9 - v10;
  if (v17 <= v24)
    v25 = a3[1];
  else
    v25 = 0;
  v117 = v24;
  if (v16 <= v24)
    v26 = v16;
  else
    v26 = 0;
  if (v12 >= 6)
    v27 = 6;
  else
    v27 = *(_DWORD *)(a1 + 252);
  if (v27 <= 4)
    v28 = 4;
  else
    v28 = v27;
  if (v13 >= 6)
    v13 = 6;
  v29 = v8 - (v9 + v22);
  if ((v29 + 1) < 8)
    v30 = v29 + 1;
  else
    v30 = 8;
  if (v8 >= v9 + v22)
    v31 = v30;
  else
    v31 = 0;
  v32 = (v31 + v22);
  if (v22 < v32)
  {
    v33 = *(_QWORD *)(a1 + 96);
    v34 = *(_DWORD *)(a1 + 52);
    v35 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v13 == 5)
      {
        v36 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v22);
      }
      else
      {
        if (v13 != 6)
        {
          LODWORD(v37) = (-1640531535 * *(_DWORD *)(v9 + v22)) >> (24 - v34);
          goto LABEL_41;
        }
        v36 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v22);
      }
      v37 = v36 >> (56 - v34);
LABEL_41:
      v38 = v37 >> 8 << v28;
      _X6 = v33 + 4 * v38;
      __asm { PRFM            #0, [X6] }
      if (v27 > 4)
      {
        __asm { PRFM            #0, [X6,#0x40] }
        _X5 = v35 + 2 * v38;
        __asm { PRFM            #0, [X5] }
        if (v28 == 6)
          __asm { PRFM            #0, [X5,#0x40] }
      }
      else
      {
        _X5 = v35 + 2 * v38;
        __asm { PRFM            #0, [X5] }
      }
      *(_DWORD *)(a1 + 4 * (v22++ & 7) + 64) = v37;
    }
    while (v32 != v22);
  }
  if ((unint64_t)v18 < v8)
  {
    v114 = v17;
    v115 = v16;
    v119 = v11;
    v120 = v8;
    v116 = a3;
    v50 = v7 - 7;
    v51 = v7 - 3;
    v52 = v7 - 1;
    v124 = (uint64_t)&v5[a5 - 16];
    v125 = v7;
    LODWORD(v53) = v25;
    v121 = v7 - 1;
    v122 = v7 - 3;
    v118 = (char *)(v7 - 32);
    while (1)
    {
      v54 = 0;
      v55 = v18 + 1;
      v123 = v53;
      if ((_DWORD)v26 && *(_DWORD *)&v55[-v26] == *(_DWORD *)(v18 + 1))
      {
        v56 = v18 + 5;
        v57 = &v18[-v26 + 5];
        if (v50 <= (unint64_t)(v18 + 5))
        {
          v60 = v18 + 5;
        }
        else
        {
          v58 = *(_QWORD *)v56 ^ *(_QWORD *)v57;
          if (v58)
          {
            v59 = __clz(__rbit64(v58)) >> 3;
            goto LABEL_64;
          }
          v77 = v18 + 13;
          while (1)
          {
            v78 = &v77[v58];
            if ((unint64_t)&v77[v58] >= v50)
              break;
            v79 = *(_QWORD *)&v18[v58 + 13 - v26];
            v58 += 8;
            v80 = *v78 ^ v79;
            if (v80)
            {
              v59 = v58 + (__clz(__rbit64(v80)) >> 3);
              goto LABEL_64;
            }
          }
          v60 = &v18[v58 + 13];
          v57 = &v60[-v26];
        }
        if ((unint64_t)v60 < v51 && *(_DWORD *)v57 == *(_DWORD *)v60)
        {
          v60 += 4;
          v57 += 4;
        }
        if ((unint64_t)v60 < v52 && *(unsigned __int16 *)v57 == *(unsigned __int16 *)v60)
        {
          v60 += 2;
          v57 += 2;
        }
        if ((unint64_t)v60 < v7 && *v57 == *v60)
          ++v60;
        v59 = v60 - v56;
LABEL_64:
        v54 = v59 + 4;
      }
      v128 = 999999999;
      v61 = v126(a1, v18, v7, &v128);
      if (v61 <= v54)
        v62 = v54;
      else
        v62 = v61;
      if (v62 < 4)
      {
        v18 += ((v18 - v5) >> 8) + 1;
        v52 = v121;
        v51 = v122;
        LODWORD(v53) = v123;
        goto LABEL_170;
      }
      if (v61 > v54)
        v55 = v18;
      v63 = v8;
      if (v61 <= v54)
        v64 = 0;
      else
        v64 = v128;
      if ((unint64_t)v18 >= v63)
        goto LABEL_109;
      v65 = (unsigned __int16 *)(v18 + 13);
      do
      {
        v66 = v18 + 1;
        if (!v64 || !(_DWORD)v26 || *(_DWORD *)v66 != *(_DWORD *)&v66[-v26])
          goto LABEL_99;
        v67 = v18 + 5;
        v68 = &v18[-v26 + 5];
        if (v50 <= (unint64_t)(v18 + 5))
        {
          v69 = (unsigned __int16 *)(v18 + 5);
        }
        else
        {
          v69 = v65;
          v70 = *(_QWORD *)v67 ^ *(_QWORD *)v68;
          if (v70)
          {
            v71 = __clz(__rbit64(v70)) >> 3;
LABEL_97:
            v75 = v71 + 4;
            if (3 * (int)v75 > (int)(3 * v62 + (__clz(v64 + 1) ^ 0xFFFFFFE0) + 2))
            {
              v64 = 0;
              v62 = v75;
              v55 = v18 + 1;
            }
            goto LABEL_99;
          }
          while ((unint64_t)v69 < v50)
          {
            v72 = *(_QWORD *)((char *)v69 - v26);
            v73 = *(_QWORD *)v69;
            v69 += 4;
            v74 = v73 ^ v72;
            if (v74)
            {
              v69 = (unsigned __int16 *)((char *)v69 + (__clz(__rbit64(v74)) >> 3) - 8);
              goto LABEL_96;
            }
          }
          v68 = (char *)v69 - v26;
        }
        if ((unint64_t)v69 < v122 && *(_DWORD *)v68 == *(_DWORD *)v69)
        {
          v69 += 2;
          v68 += 4;
        }
        if ((unint64_t)v69 < v121 && *(unsigned __int16 *)v68 == *v69)
        {
          ++v69;
          v68 += 2;
        }
        if ((unint64_t)v69 < v125 && *v68 == *(_BYTE *)v69)
          v69 = (unsigned __int16 *)((char *)v69 + 1);
LABEL_96:
        v71 = (char *)v69 - v67;
        if (v71 <= 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_97;
LABEL_99:
        v128 = 999999999;
        v76 = v126(a1, v18 + 1, v125, &v128);
        if (v76 < 4
          || (int)((__clz(v128 + 1) ^ 0xFFFFFFE0) + 4 * v76 + 1) <= (int)((__clz(v64 + 1) ^ 0xFFFFFFE0) + 4 * v62 + 5))
        {
          goto LABEL_108;
        }
        v65 = (unsigned __int16 *)((char *)v65 + 1);
        ++v18;
        v55 = v66;
        v64 = v128;
        v62 = v76;
      }
      while (v66 != (char *)v124);
      v62 = v76;
      v64 = v128;
      v55 = (char *)v124;
LABEL_108:
      v7 = v125;
LABEL_109:
      if (v64 <= 2)
      {
        v53 = v123;
      }
      else
      {
        if (v55 > v5 && (unint64_t)&v55[-v64 + 2] > v119)
        {
          v81 = 1 - v64;
          v82 = (unint64_t)v55;
          while (1)
          {
            v83 = *(unsigned __int8 *)--v82;
            if (v83 != v55[v81])
              break;
            ++v62;
            if (v82 > (unint64_t)v5)
            {
              v84 = (unint64_t)&v55[v81];
              v55 = (char *)v82;
              if (v84 > v119)
                continue;
            }
            goto LABEL_119;
          }
        }
        v82 = (unint64_t)v55;
LABEL_119:
        v53 = v26;
        v26 = (v64 - 2);
        v55 = (char *)v82;
      }
      v85 = v55 - v5;
      v86 = *(_OWORD **)(a2 + 24);
      if (v55 <= v118)
      {
        *v86 = *(_OWORD *)v5;
        v90 = *(_QWORD *)(a2 + 24);
        if (v85 > 0x10)
        {
          v91 = (_OWORD *)(v90 + 16);
          v92 = v90 + v85;
          v93 = (__int128 *)(v5 + 16);
          do
          {
            v94 = *v93++;
            *v91++ = v94;
          }
          while ((unint64_t)v91 < v92);
          goto LABEL_131;
        }
        *(_QWORD *)(a2 + 24) = v90 + v85;
        v95 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        if (v5 <= v118)
        {
          v87 = (_OWORD *)((char *)v86 + v118 - v5);
          do
          {
            v88 = *(_OWORD *)v5;
            v5 += 16;
            *v86++ = v88;
          }
          while (v86 < v87);
          v5 = v118;
          v86 = v87;
        }
        while (v5 < v55)
        {
          v89 = *v5++;
          *(_BYTE *)v86 = v89;
          v86 = (_OWORD *)((char *)v86 + 1);
        }
LABEL_131:
        *(_QWORD *)(a2 + 24) += v85;
        v95 = *(_QWORD *)(a2 + 8);
        if (v85 >= 0x10000)
        {
          v96 = (unint64_t)(v95 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 1;
          *(_DWORD *)(a2 + 76) = v96;
        }
      }
      *(_WORD *)(v95 + 4) = v85;
      *(_DWORD *)v95 = v64 + 1;
      if (v62 - 3 >= 0x10000)
      {
        v97 = (unint64_t)(v95 - *(_QWORD *)a2) >> 3;
        *(_DWORD *)(a2 + 72) = 2;
        *(_DWORD *)(a2 + 76) = v97;
      }
      *(_WORD *)(v95 + 6) = v62 - 3;
      v98 = v95 + 8;
      *(_QWORD *)(a2 + 8) = v95 + 8;
      v5 = &v55[v62];
      v8 = v120;
      if (!(_DWORD)v53 || (unint64_t)v5 > v120)
      {
        v18 = &v55[v62];
        v52 = v121;
        v51 = v122;
        goto LABEL_170;
      }
      v99 = v26;
      v100 = v53;
      v52 = v121;
      v51 = v122;
      while (2)
      {
        v26 = v100;
        v100 = v99;
        if (*(_DWORD *)v5 != *(_DWORD *)&v5[-v26])
        {
          LODWORD(v53) = v26;
          v26 = v99;
          goto LABEL_169;
        }
        v101 = v5 + 4;
        v102 = &v5[-v26 + 4];
        if (v50 <= (unint64_t)(v5 + 4))
        {
          v105 = v5 + 4;
        }
        else
        {
          v103 = *(_QWORD *)v101 ^ *(_QWORD *)v102;
          if (v103)
          {
            v104 = __clz(__rbit64(v103)) >> 3;
            goto LABEL_154;
          }
          v107 = v5 + 12;
          while (1)
          {
            v108 = &v107[v103];
            if ((unint64_t)&v107[v103] >= v50)
              break;
            v109 = *(_QWORD *)&v5[v103 + 12 - v26];
            v103 += 8;
            v110 = *v108 ^ v109;
            if (v110)
            {
              v104 = v103 + (__clz(__rbit64(v110)) >> 3);
              goto LABEL_154;
            }
          }
          v105 = &v5[v103 + 12];
          v102 = &v105[-v26];
        }
        if ((unint64_t)v105 < v122 && *(_DWORD *)v102 == *(_DWORD *)v105)
        {
          v105 += 4;
          v102 += 4;
        }
        if ((unint64_t)v105 < v121 && *(unsigned __int16 *)v102 == *(unsigned __int16 *)v105)
        {
          v105 += 2;
          v102 += 2;
        }
        if ((unint64_t)v105 < v7 && *v102 == *v105)
          ++v105;
        v104 = v105 - v101;
LABEL_154:
        if (v5 <= v118)
        {
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
          v98 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)(v98 + 4) = 0;
        *(_DWORD *)v98 = 1;
        if (v104 + 1 >= 0x10000)
        {
          v106 = (unint64_t)(v98 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v106;
        }
        *(_WORD *)(v98 + 6) = v104 + 1;
        v98 += 8;
        *(_QWORD *)(a2 + 8) = v98;
        v5 += v104 + 4;
        if ((_DWORD)v100)
        {
          v99 = v26;
          LODWORD(v53) = v100;
          v18 = v5;
          if ((unint64_t)v5 > v120)
            goto LABEL_170;
          continue;
        }
        break;
      }
      LODWORD(v53) = 0;
LABEL_169:
      v18 = v5;
LABEL_170:
      if ((unint64_t)v18 >= v8)
      {
        a3 = v116;
        v17 = v114;
        v16 = v115;
        goto LABEL_174;
      }
    }
  }
  LODWORD(v53) = v25;
LABEL_174:
  if (v17 <= v117)
    v111 = 0;
  else
    v111 = v17;
  if (v16 > v117)
    v111 = v16;
  if ((_DWORD)v26)
    v112 = v26;
  else
    v112 = v111;
  if ((_DWORD)v53)
    v111 = v53;
  *a3 = v112;
  a3[1] = v111;
  return v7 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_greedy_row(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  unint64_t v68;
  char *v69;
  _BYTE *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _OWORD *v75;
  _OWORD *v76;
  __int128 v77;
  char v78;
  uint64_t v79;
  _OWORD *v80;
  unint64_t v81;
  __int128 *v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  _BYTE *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int *v106;
  unint64_t v107;
  char *v108;
  unint64_t v109;
  uint64_t (*v110)(uint64_t, char *, unint64_t, uint64_t *, uint64_t);
  uint64_t v111;

  v5 = a4;
  v7 = a1;
  v8 = (unint64_t)&a4[a5];
  v9 = (unint64_t)&a4[a5 - 16];
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(unsigned int *)(a1 + 24);
  v12 = *(_DWORD *)(a1 + 252);
  v13 = *(_DWORD *)(a1 + 256);
  v14 = 2 * (v13 > 3);
  if (v13 - 7 >= 0xFFFFFFFD)
    v14 = v13 - 4;
  v15 = 2 * (v12 > 3);
  if (v12 - 7 >= 0xFFFFFFFD)
    v15 = v12 - 4;
  v110 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *, uint64_t))*(&off_1E6E2C4B8[3 * v14] + v15);
  v16 = *a3;
  v17 = a3[1];
  v107 = v10 + v11;
  if ((_DWORD)a4 == (_DWORD)v10 + (_DWORD)v11)
    v18 = a4 + 1;
  else
    v18 = a4;
  v19 = (_DWORD)v18 - v10;
  v20 = 1 << *(_DWORD *)(a1 + 240);
  v21 = (_DWORD)v18 - v10 - v20;
  v22 = (int)v18 - (int)v10 - (int)v11 > v20;
  v23 = *(unsigned int *)(a1 + 44);
  if (v22 && *(_DWORD *)(a1 + 40) == 0)
    LODWORD(v11) = v21;
  v25 = v19 - v11;
  if (v17 <= v19 - (int)v11)
    v26 = v17;
  else
    v26 = 0;
  if (v16 <= v25)
    v27 = v16;
  else
    v27 = 0;
  if (v12 >= 6)
    v28 = 6;
  else
    v28 = *(_DWORD *)(a1 + 252);
  if (v28 <= 4)
    v29 = 4;
  else
    v29 = v28;
  if (v13 >= 6)
    v13 = 6;
  v30 = v9 - (v10 + v23);
  if ((v30 + 1) < 8)
    v31 = v30 + 1;
  else
    v31 = 8;
  if (v9 >= v10 + v23)
    v32 = v31;
  else
    v32 = 0;
  v33 = (v32 + v23);
  if (v23 < v33)
  {
    v34 = *(_QWORD *)(a1 + 96);
    v35 = *(_DWORD *)(a1 + 52);
    v36 = *(_QWORD *)(v7 + 56);
    do
    {
      if (v13 == 5)
      {
        v37 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v10 + v23);
      }
      else
      {
        if (v13 != 6)
        {
          LODWORD(v38) = (-1640531535 * *(_DWORD *)(v10 + v23)) >> (24 - v35);
          goto LABEL_41;
        }
        v37 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v10 + v23);
      }
      v38 = v37 >> (56 - v35);
LABEL_41:
      v39 = v38 >> 8 << v29;
      _X5 = v34 + 4 * v39;
      __asm { PRFM            #0, [X5] }
      if (v28 > 4)
      {
        __asm { PRFM            #0, [X5,#0x40] }
        _X4 = v36 + 2 * v39;
        __asm { PRFM            #0, [X4] }
        if (v29 == 6)
          __asm { PRFM            #0, [X4,#0x40] }
      }
      else
      {
        _X4 = v36 + 2 * v39;
        __asm { PRFM            #0, [X4] }
      }
      *(_DWORD *)(v7 + 4 * (v23++ & 7) + 64) = v38;
    }
    while (v33 != v23);
  }
  if ((unint64_t)v18 < v9)
  {
    v103 = v25;
    v104 = v17;
    v105 = v16;
    v106 = a3;
    v51 = v8 - 7;
    v52 = v8 - 3;
    v53 = v8 - 1;
    v54 = (char *)(v8 - 32);
    v108 = (char *)(v8 - 32);
    v109 = v9;
    while (1)
    {
      if ((_DWORD)v27)
      {
        v55 = (unint64_t)(v18 + 1);
        if (*(_DWORD *)&v18[-v27 + 1] == *(_DWORD *)(v18 + 1))
          break;
      }
      v60 = v52;
      v111 = 999999999;
      v61 = v7;
      v62 = v7;
      v63 = v8;
      v64 = v110(v62, v18, v8, &v111, 2);
      v65 = v111;
      if (!v64)
        v65 = 0;
      if (v64 > 3)
      {
        if (v65 < 3)
        {
          v8 = v63;
          v7 = v61;
          v52 = v60;
          v54 = v108;
          v9 = v109;
        }
        else
        {
          v8 = v63;
          if (v18 <= v5 || (unint64_t)&v18[-v65 + 2] <= v107)
          {
            v55 = (unint64_t)v18;
            v7 = v61;
            v52 = v60;
            v54 = v108;
            v9 = v109;
          }
          else
          {
            v66 = 1 - v65;
            v55 = (unint64_t)v18;
            v7 = v61;
            v52 = v60;
            v54 = v108;
            v9 = v109;
            while (1)
            {
              v67 = *(unsigned __int8 *)--v55;
              if (v67 != v18[v66])
                break;
              ++v64;
              if (v55 > (unint64_t)v5)
              {
                v68 = (unint64_t)&v18[v66];
                v18 = (char *)v55;
                if (v68 > v107)
                  continue;
              }
              goto LABEL_85;
            }
            v55 = (unint64_t)v18;
          }
LABEL_85:
          v26 = v27;
          v27 = (v65 - 2);
LABEL_86:
          v18 = (char *)v55;
        }
        v74 = v18 - v5;
        v75 = *(_OWORD **)(a2 + 24);
        if (v18 <= v54)
        {
          *v75 = *(_OWORD *)v5;
          v79 = *(_QWORD *)(a2 + 24);
          if (v74 > 0x10)
          {
            v80 = (_OWORD *)(v79 + 16);
            v81 = v79 + v74;
            v82 = (__int128 *)(v5 + 16);
            do
            {
              v83 = *v82++;
              *v80++ = v83;
            }
            while ((unint64_t)v80 < v81);
            goto LABEL_98;
          }
          *(_QWORD *)(a2 + 24) = v79 + v74;
          v84 = *(_QWORD *)(a2 + 8);
        }
        else
        {
          if (v5 <= v54)
          {
            v76 = (_OWORD *)((char *)v75 + v54 - v5);
            do
            {
              v77 = *(_OWORD *)v5;
              v5 += 16;
              *v75++ = v77;
            }
            while (v75 < v76);
            v5 = v54;
            v75 = v76;
          }
          while (v5 < v18)
          {
            v78 = *v5++;
            *(_BYTE *)v75 = v78;
            v75 = (_OWORD *)((char *)v75 + 1);
          }
LABEL_98:
          *(_QWORD *)(a2 + 24) += v74;
          v84 = *(_QWORD *)(a2 + 8);
          if (v74 >= 0x10000)
          {
            v85 = (unint64_t)(v84 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 1;
            *(_DWORD *)(a2 + 76) = v85;
          }
        }
        *(_WORD *)(v84 + 4) = v74;
        *(_DWORD *)v84 = v65 + 1;
        if (v64 - 3 >= 0x10000)
        {
          v86 = (unint64_t)(v84 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v86;
        }
        *(_WORD *)(v84 + 6) = v64 - 3;
        v87 = v84 + 8;
        *(_QWORD *)(a2 + 8) = v84 + 8;
        v5 = &v18[v64];
        if ((_DWORD)v26 && (unint64_t)v5 <= v9)
        {
          v88 = v27;
          v89 = v26;
          while (1)
          {
            v27 = v89;
            v89 = v88;
            if (*(_DWORD *)v5 != *(_DWORD *)&v5[-v27])
            {
              v26 = v27;
              v27 = v88;
              break;
            }
            v90 = v5 + 4;
            v91 = &v5[-v27 + 4];
            if (v51 <= (unint64_t)(v5 + 4))
            {
              v94 = v5 + 4;
            }
            else
            {
              v92 = *(_QWORD *)v90 ^ *(_QWORD *)v91;
              if (v92)
              {
                v93 = __clz(__rbit64(v92)) >> 3;
                goto LABEL_121;
              }
              v96 = v5 + 12;
              while (1)
              {
                v97 = &v96[v92];
                if ((unint64_t)&v96[v92] >= v51)
                  break;
                v98 = *(_QWORD *)&v5[v92 + 12 - v27];
                v92 += 8;
                v99 = *v97 ^ v98;
                if (v99)
                {
                  v93 = v92 + (__clz(__rbit64(v99)) >> 3);
                  goto LABEL_121;
                }
              }
              v94 = &v5[v92 + 12];
              v91 = &v94[-v27];
            }
            if ((unint64_t)v94 < v52 && *(_DWORD *)v91 == *(_DWORD *)v94)
            {
              v94 += 4;
              v91 += 4;
            }
            if ((unint64_t)v94 < v53 && *(unsigned __int16 *)v91 == *(unsigned __int16 *)v94)
            {
              v94 += 2;
              v91 += 2;
            }
            if ((unint64_t)v94 < v8 && *v91 == *v94)
              ++v94;
            v93 = v94 - v90;
LABEL_121:
            if (v5 <= v54)
            {
              *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
              v87 = *(_QWORD *)(a2 + 8);
            }
            *(_WORD *)(v87 + 4) = 0;
            *(_DWORD *)v87 = 1;
            if (v93 + 1 >= 0x10000)
            {
              v95 = (unint64_t)(v87 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 2;
              *(_DWORD *)(a2 + 76) = v95;
            }
            *(_WORD *)(v87 + 6) = v93 + 1;
            v87 += 8;
            *(_QWORD *)(a2 + 8) = v87;
            v5 += v93 + 4;
            if (!(_DWORD)v89)
            {
              v26 = v89;
              break;
            }
            v88 = v27;
            v26 = v89;
            v18 = v5;
            if ((unint64_t)v5 > v9)
              goto LABEL_136;
          }
        }
        v18 = v5;
        goto LABEL_136;
      }
      v18 += ((v18 - v5) >> 8) + 1;
      v8 = v63;
      v7 = v61;
      v52 = v60;
      v54 = v108;
      v9 = v109;
LABEL_136:
      if ((unint64_t)v18 >= v9)
      {
        a3 = v106;
        v17 = v104;
        v16 = v105;
        v25 = v103;
        goto LABEL_138;
      }
    }
    v56 = v18 + 5;
    v57 = &v18[-v27 + 5];
    if (v51 <= (unint64_t)(v18 + 5))
    {
      v69 = v18 + 5;
    }
    else
    {
      v58 = *(_QWORD *)v56 ^ *(_QWORD *)v57;
      if (v58)
      {
        v59 = __clz(__rbit64(v58)) >> 3;
LABEL_76:
        LODWORD(v65) = 0;
        v64 = v59 + 4;
        goto LABEL_86;
      }
      v70 = v18 + 13;
      while (1)
      {
        v71 = &v70[v58];
        if ((unint64_t)&v70[v58] >= v51)
          break;
        v72 = *(_QWORD *)&v18[v58 + 13 - v27];
        v58 += 8;
        v73 = *v71 ^ v72;
        if (v73)
        {
          v59 = v58 + (__clz(__rbit64(v73)) >> 3);
          goto LABEL_76;
        }
      }
      v69 = &v18[v58 + 13];
      v57 = &v69[-v27];
    }
    if ((unint64_t)v69 < v52 && *(_DWORD *)v57 == *(_DWORD *)v69)
    {
      v69 += 4;
      v57 += 4;
    }
    if ((unint64_t)v69 < v53 && *(unsigned __int16 *)v57 == *(unsigned __int16 *)v69)
    {
      v69 += 2;
      v57 += 2;
    }
    if ((unint64_t)v69 < v8 && *v57 == *v69)
      ++v69;
    v59 = v69 - v56;
    goto LABEL_76;
  }
LABEL_138:
  if (v17 <= v25)
    v100 = 0;
  else
    v100 = v17;
  if (v16 > v25)
    v100 = v16;
  if ((_DWORD)v27)
    v101 = v27;
  else
    v101 = v100;
  if ((_DWORD)v26)
    v100 = v26;
  *a3 = v101;
  a3[1] = v100;
  return v8 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy2_dictMatchState_row(uint64_t a1, uint64_t a2, unsigned int *a3, _BYTE *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  __int128 v75;
  char v76;
  uint64_t v77;
  _OWORD *v78;
  unint64_t v79;
  __int128 *v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int *v95;
  unint64_t v96;
  _QWORD *v98;
  unsigned int v99;
  char *v100;
  unsigned int v101;
  uint64_t (*v102)(uint64_t, char *, unint64_t, uint64_t *);
  uint64_t v103;
  unint64_t v105;
  uint64_t v106;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = (unint64_t)&a4[a5 - 16];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = (_QWORD *)(v8 + v9);
  v11 = *(_DWORD *)(a1 + 252);
  v12 = *(_DWORD *)(a1 + 256);
  v13 = 2 * (v12 > 3);
  if (v12 - 7 >= 0xFFFFFFFD)
    v13 = v12 - 4;
  v14 = 2 * (v11 > 3);
  if (v11 - 7 >= 0xFFFFFFFD)
    v14 = v11 - 4;
  v102 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *))*(&off_1E6E2C4B8[3 * v13 + 18] + v14);
  v16 = *a3;
  LODWORD(v15) = a3[1];
  v17 = *(_QWORD *)(a1 + 232);
  v18 = *(unsigned int *)(v17 + 24);
  v103 = *(_QWORD *)(v17 + 8);
  v96 = v103 + v18;
  v100 = *(char **)v17;
  if ((_DWORD)a4 - (_DWORD)v10 - ((_DWORD)v103 + (_DWORD)v18) + *(_QWORD *)v17)
    v19 = a4;
  else
    v19 = a4 + 1;
  if (v11 >= 6)
    v11 = 6;
  if (v11 <= 4)
    v20 = 4;
  else
    v20 = v11;
  if (v12 >= 6)
    v12 = 6;
  v21 = *(unsigned int *)(a1 + 44);
  v22 = v7 - (v8 + v21);
  if ((v22 + 1) < 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  v105 = (unint64_t)&a4[a5 - 16];
  if (v7 >= v8 + v21)
    v24 = v23;
  else
    v24 = 0;
  v25 = (v24 + v21);
  if (v21 < v25)
  {
    v26 = *(_QWORD *)(a1 + 96);
    v27 = *(_DWORD *)(a1 + 52);
    v28 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v12 == 5)
      {
        v29 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v8 + v21);
      }
      else
      {
        if (v12 != 6)
        {
          LODWORD(v30) = (-1640531535 * *(_DWORD *)(v8 + v21)) >> (24 - v27);
          goto LABEL_29;
        }
        v29 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v8 + v21);
      }
      v30 = v29 >> (56 - v27);
LABEL_29:
      v31 = v30 >> 8 << v20;
      _X4 = v26 + 4 * v31;
      __asm { PRFM            #0, [X4] }
      if (v11 > 4)
      {
        __asm { PRFM            #0, [X4,#0x40] }
        _X3 = v28 + 2 * v31;
        __asm { PRFM            #0, [X3] }
        if (v20 == 6)
          __asm { PRFM            #0, [X3,#0x40] }
      }
      else
      {
        _X3 = v28 + 2 * v31;
        __asm { PRFM            #0, [X3] }
      }
      *(_DWORD *)(a1 + 4 * (v21++ & 7) + 64) = v30;
    }
    while (v25 != v21);
  }
  if ((unint64_t)v19 < v105)
  {
    v95 = a3;
    v101 = v9 + v103 - (_DWORD)v100;
    v98 = (_QWORD *)(v8 + v9);
    while (1)
    {
      v44 = v19 + 1;
      v45 = (_DWORD)v19 - v8 - v16;
      v46 = (v45 + 1);
      v47 = v103 + v46 - v101;
      if (v46 >= v9)
        v47 = v8 + v46;
      v99 = v15;
      if ((v9 - v45 - 5) <= 0xFFFFFFFC && *(_DWORD *)v47 == *(_DWORD *)v44)
      {
        v48 = v46 >= v9 ? (char *)v6 : v100;
        v49 = ZSTD_count_2segments(v19 + 5, (char *)(v47 + 4), v6, v48, v10) + 4;
      }
      else
      {
        v49 = 0;
      }
      v106 = 999999999;
      v50 = v102(a1, v19, v6, &v106);
      v51 = v50 <= v49 ? v49 : v50;
      if (v51 >= 4)
        break;
      v19 += ((v19 - (char *)v5) >> 8) + 1;
      LODWORD(v15) = v99;
LABEL_133:
      if ((unint64_t)v19 >= v105)
      {
        a3 = v95;
        goto LABEL_135;
      }
    }
    if (v50 <= v49)
    {
      v52 = 0;
    }
    else
    {
      v44 = v19;
      v52 = v106;
    }
    v53 = v51;
    v54 = v52;
    v55 = v44;
    if ((unint64_t)v19 < v105)
    {
      while (1)
      {
        v55 = v19 + 1;
        v56 = ((_DWORD)v19 + 1 - v8 - v16);
        v57 = v103 + v56 - v101;
        if (v56 >= v9)
          v57 = v8 + v56;
        if ((v9 + ~(_DWORD)v56) >= 3 && *(_DWORD *)v57 == *(_DWORD *)v55)
        {
          v58 = v56 >= v9 ? (char *)v6 : v100;
          v59 = ZSTD_count_2segments(v19 + 5, (char *)(v57 + 4), v6, v58, v98);
          v60 = 3 * v51 + (__clz(v52 + 1) ^ 0xFFFFFFE0) + 2;
          v61 = v59 > 0xFFFFFFFFFFFFFFFBLL || 3 * ((int)v59 + 4) <= v60;
          if (!v61)
          {
            v52 = 0;
            v51 = v59 + 4;
            v44 = v19 + 1;
          }
        }
        v106 = 999999999;
        v53 = v102(a1, v19 + 1, v6, &v106);
        if (v53 < 4
          || (v54 = v106,
              (int)((__clz(v106 + 1) ^ 0xFFFFFFE0) + 4 * v53 + 1) <= (int)((__clz(v52 + 1) ^ 0xFFFFFFE0) + 4 * v51 + 5)))
        {
          if ((unint64_t)v55 >= v105)
            break;
          v55 = v19 + 2;
          v62 = ((_DWORD)v19 + 2 - v8 - v16);
          v63 = v103 + v62 - v101;
          if (v62 >= v9)
            v63 = v8 + v62;
          if ((v9 + ~(_DWORD)v62) >= 3 && *(_DWORD *)v63 == *(_DWORD *)v55)
          {
            v64 = v62 >= v9 ? (char *)v6 : v100;
            v65 = ZSTD_count_2segments(v19 + 6, (char *)(v63 + 4), v6, v64, v98);
            if (v65 <= 0xFFFFFFFFFFFFFFFBLL && (int)((__clz(v52 + 1) ^ 0xFFFFFFE0) + 4 * v51 + 2) < 4 * ((int)v65 + 4))
            {
              v52 = 0;
              v51 = v65 + 4;
              v44 = v19 + 2;
            }
          }
          v106 = 999999999;
          v53 = v102(a1, v19 + 2, v6, &v106);
          if (v53 < 4)
            break;
          v54 = v106;
          if ((int)((__clz(v106 + 1) ^ 0xFFFFFFE0) + 4 * v53 + 1) <= (int)((__clz(v52 + 1) ^ 0xFFFFFFE0) + 4 * v51 + 8))
            break;
        }
        v19 = v55;
        v44 = v55;
        v52 = v54;
        v51 = v53;
        if ((unint64_t)v55 >= v105)
          goto LABEL_84;
      }
      v53 = v51;
      v54 = v52;
      v55 = v44;
    }
LABEL_84:
    v15 = v99;
    if (v54 <= 2)
    {
      v70 = (unsigned __int8 *)(v6 - 32);
    }
    else
    {
      v66 = v8 + v9;
      if (v9 > (int)v55 - ((int)v54 + (int)v8) + 2)
        v66 = v96;
      v67 = v103 - v101;
      if (v9 <= (int)v55 - ((int)v54 + (int)v8) + 2)
        v67 = v8;
      if (v55 <= (char *)v5 || v67 + (unint64_t)((_DWORD)v55 - (v54 + v8) + 2) <= v66)
      {
        v70 = (unsigned __int8 *)(v6 - 32);
      }
      else
      {
        v68 = (unsigned __int8 *)(v67 + ((_DWORD)v55 - (v54 + v8) + 2) - 1);
        v69 = (unsigned __int8 *)(v55 - 1);
        v70 = (unsigned __int8 *)(v6 - 32);
        while (*v69 == *v68)
        {
          ++v53;
          v71 = v69 - 1;
          if (v69 > v5)
          {
            --v69;
            v61 = (unint64_t)v68-- > v66;
            if (v61)
              continue;
          }
          v55 = (char *)(v71 + 1);
          goto LABEL_99;
        }
        v55 = (char *)(v69 + 1);
      }
LABEL_99:
      v15 = v16;
      v16 = (v54 - 2);
    }
    v72 = v55 - (char *)v5;
    v73 = *(_OWORD **)(a2 + 24);
    if (v55 <= (char *)v70)
    {
      *v73 = *(_OWORD *)v5;
      v77 = *(_QWORD *)(a2 + 24);
      if (v72 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v77 + v72;
        v82 = *(_QWORD *)(a2 + 8);
        goto LABEL_114;
      }
      v78 = (_OWORD *)(v77 + 16);
      v79 = v77 + v72;
      v80 = (__int128 *)(v5 + 16);
      do
      {
        v81 = *v80++;
        *v78++ = v81;
      }
      while ((unint64_t)v78 < v79);
    }
    else
    {
      if (v5 <= v70)
      {
        v74 = (_OWORD *)((char *)v73 + v70 - v5);
        do
        {
          v75 = *(_OWORD *)v5;
          v5 += 16;
          *v73++ = v75;
        }
        while (v73 < v74);
        v5 = v70;
        v73 = v74;
      }
      while (v5 < (unsigned __int8 *)v55)
      {
        v76 = *v5++;
        *(_BYTE *)v73 = v76;
        v73 = (_OWORD *)((char *)v73 + 1);
      }
    }
    *(_QWORD *)(a2 + 24) += v72;
    v82 = *(_QWORD *)(a2 + 8);
    if (v72 >= 0x10000)
    {
      v83 = (unint64_t)(v82 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v83;
    }
LABEL_114:
    *(_WORD *)(v82 + 4) = v72;
    *(_DWORD *)v82 = v54 + 1;
    if (v53 - 3 >= 0x10000)
    {
      v84 = (unint64_t)(v82 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v84;
    }
    *(_WORD *)(v82 + 6) = v53 - 3;
    v85 = v82 + 8;
    *(_QWORD *)(a2 + 8) = v82 + 8;
    v5 = (unsigned __int8 *)&v55[v53];
    if ((unint64_t)&v55[v53] <= v105)
    {
      v86 = v16;
      v87 = v15;
      v10 = (_QWORD *)(v8 + v9);
      while (1)
      {
        v16 = v87;
        v87 = v86;
        v88 = ((_DWORD)v5 - v8 - v16);
        v89 = v103 - v101;
        if (v88 >= v9)
          v89 = v8;
        if ((v9 + ~(_DWORD)v88) < 3)
          break;
        v90 = v89 + v88;
        if (*(_DWORD *)v90 != *(_DWORD *)v5)
          break;
        if (v88 >= v9)
          v91 = (char *)v6;
        else
          v91 = v100;
        v92 = ZSTD_count_2segments(v5 + 4, (char *)(v90 + 4), v6, v91, v98);
        if ((unint64_t)v5 <= v6 - 32)
        {
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
          v85 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)(v85 + 4) = 0;
        *(_DWORD *)v85 = 1;
        if (v92 + 1 >= 0x10000)
        {
          v93 = (unint64_t)(v85 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v93;
        }
        *(_WORD *)(v85 + 6) = v92 + 1;
        v85 += 8;
        v5 += v92 + 4;
        *(_QWORD *)(a2 + 8) = v85;
        v86 = v16;
        LODWORD(v15) = v87;
        v19 = (char *)v5;
        if ((unint64_t)v5 > v105)
          goto LABEL_133;
      }
      LODWORD(v15) = v16;
      v16 = v86;
      v19 = (char *)v5;
    }
    else
    {
      v19 = &v55[v53];
      v10 = (_QWORD *)(v8 + v9);
    }
    goto LABEL_133;
  }
LABEL_135:
  *a3 = v16;
  a3[1] = v15;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy_dictMatchState_row(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unint64_t v67;
  _OWORD *v68;
  _OWORD *v69;
  __int128 v70;
  char v71;
  uint64_t v72;
  _OWORD *v73;
  unint64_t v74;
  __int128 *v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int *v90;
  int v91;
  int v92;
  int v93;
  unint64_t v94;
  unsigned __int8 *v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned __int8 *v100;
  uint64_t v101;
  char *v102;
  uint64_t (*v103)(uint64_t, unsigned __int8 *, unint64_t, _QWORD *);
  unsigned __int8 *v104;
  uint64_t v105;
  unsigned int v106;
  _QWORD v108[2];

  v5 = a4;
  v6 = a2;
  v7 = (unint64_t)&a4[a5];
  v8 = (unint64_t)&a4[a5 - 16];
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 252);
  v12 = *(_DWORD *)(a1 + 256);
  v13 = 2 * (v12 > 3);
  if (v12 - 7 >= 0xFFFFFFFD)
    v13 = v12 - 4;
  v14 = 2 * (v11 > 3);
  if (v11 - 7 >= 0xFFFFFFFD)
    v14 = v11 - 4;
  v103 = *(uint64_t (**)(uint64_t, unsigned __int8 *, unint64_t, _QWORD *))*(&off_1E6E2C4B8[3 * v13 + 18]
                                                                                           + v14);
  v16 = *a3;
  LODWORD(v15) = a3[1];
  v17 = *(_QWORD *)(a1 + 232);
  v18 = *(unsigned int *)(v17 + 24);
  v105 = *(_QWORD *)(v17 + 8);
  v104 = (unsigned __int8 *)(v9 + v10);
  v96 = (unsigned __int8 *)(v105 + v18);
  v102 = *(char **)v17;
  if ((_DWORD)a4 - ((_DWORD)v9 + (_DWORD)v10) - ((_DWORD)v105 + (_DWORD)v18) + *(_QWORD *)v17)
    v19 = a4;
  else
    v19 = a4 + 1;
  if (v11 >= 6)
    v11 = 6;
  if (v11 <= 4)
    v20 = 4;
  else
    v20 = v11;
  if (v12 >= 6)
    v12 = 6;
  v21 = *(unsigned int *)(a1 + 44);
  v22 = v8 - (v9 + v21);
  if ((v22 + 1) < 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  if (v8 >= v9 + v21)
    v24 = v23;
  else
    v24 = 0;
  v25 = (v24 + v21);
  if (v21 < v25)
  {
    v26 = *(_QWORD *)(a1 + 96);
    v27 = *(_DWORD *)(a1 + 52);
    v28 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v12 == 5)
      {
        v29 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v21);
      }
      else
      {
        if (v12 != 6)
        {
          LODWORD(v30) = (-1640531535 * *(_DWORD *)(v9 + v21)) >> (24 - v27);
          goto LABEL_29;
        }
        v29 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v21);
      }
      v30 = v29 >> (56 - v27);
LABEL_29:
      v31 = v30 >> 8 << v20;
      _X5 = v26 + 4 * v31;
      __asm { PRFM            #0, [X5] }
      if (v11 > 4)
      {
        __asm { PRFM            #0, [X5,#0x40] }
        _X3 = v28 + 2 * v31;
        __asm { PRFM            #0, [X3] }
        if (v20 == 6)
          __asm { PRFM            #0, [X3,#0x40] }
      }
      else
      {
        _X3 = v28 + 2 * v31;
        __asm { PRFM            #0, [X3] }
      }
      *(_DWORD *)(a1 + 4 * (v21++ & 7) + 64) = v30;
    }
    while (v25 != v21);
  }
  if ((unint64_t)v19 < v8)
  {
    v90 = a3;
    v100 = (unsigned __int8 *)(v7 - 32);
    v97 = (uint64_t)&v5[a5 - 16];
    v93 = v10 + v9 - 2;
    v92 = -(int)v9;
    v91 = (_DWORD)v102 - v10 - v105 - v9 + 1;
    v98 = v10 + v105 - (_DWORD)v102;
    v106 = v10;
    v94 = v8;
    v101 = v9;
    while (1)
    {
      v44 = (_DWORD)v19 - v9 - v16;
      v45 = (v44 + 1);
      v46 = v105 + v45 - v98;
      if (v45 >= v10)
        v46 = v9 + v45;
      v99 = v15;
      if ((v10 - v44 - 5) <= 0xFFFFFFFC && *(_DWORD *)v46 == *(_DWORD *)(v19 + 1))
      {
        v47 = v45 >= v10 ? (char *)v7 : v102;
        v48 = ZSTD_count_2segments(v19 + 5, (char *)(v46 + 4), v7, v47, v104) + 4;
      }
      else
      {
        v48 = 0;
      }
      v108[0] = 999999999;
      v49 = v103(a1, v19, v7, v108);
      v10 = v49 <= v48 ? v48 : v49;
      if (v10 >= 4)
        break;
      v19 += ((v19 - v5) >> 8) + 1;
      LODWORD(v10) = v106;
      LODWORD(v15) = v99;
LABEL_118:
      if ((unint64_t)v19 >= v8)
      {
        a3 = v90;
        goto LABEL_120;
      }
    }
    if (v49 <= v48)
      v50 = (unint64_t)(v19 + 1);
    else
      v50 = (unint64_t)v19;
    if (v49 <= v48)
      v51 = 0;
    else
      v51 = v108[0];
    if ((unint64_t)v19 < v8)
    {
      v52 = v7;
      v53 = 0;
      v54 = v93 + v16 - (_DWORD)v19;
      while (1)
      {
        v55 = &v19[v53 + 1];
        v56 = (v92 + (_DWORD)v19 - v16 + v53 + 1);
        v57 = v105 + (v91 + (_DWORD)v19 - v16 + v53);
        if (v56 >= v106)
          v57 = v101 + v56;
        if (v54 >= 3 && *(_DWORD *)v57 == *(_DWORD *)v55)
        {
          v58 = v56 >= v106 ? (char *)v52 : v102;
          v59 = ZSTD_count_2segments(&v19[v53 + 5], (char *)(v57 + 4), v52, v58, v104);
          if (v59 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v59 + 4) > (int)(3 * v10 + (__clz(v51 + 1) ^ 0xFFFFFFE0) + 2))
          {
            v51 = 0;
            v10 = v59 + 4;
            v50 = (unint64_t)&v19[v53 + 1];
          }
        }
        v108[0] = 999999999;
        v60 = v103(a1, &v19[v53 + 1], v52, v108);
        if (v60 < 4
          || (int)((__clz(LODWORD(v108[0]) + 1) ^ 0xFFFFFFE0) + 4 * v60 + 1) <= (int)((__clz(v51 + 1) ^ 0xFFFFFFE0)
                                                                                    + 4 * v10
                                                                                    + 5))
        {
          break;
        }
        ++v53;
        --v54;
        v50 = (unint64_t)v55;
        v51 = v108[0];
        v10 = v60;
        if (v97 - (_QWORD)v19 == v53)
        {
          v10 = v60;
          v51 = v108[0];
          v50 = v97;
          break;
        }
      }
      v7 = v52;
      v8 = v94;
      v6 = a2;
    }
    v15 = v99;
    if (v51 > 2)
    {
      v61 = v101;
      v62 = v104;
      if (v106 > (int)v50 - ((int)v51 + (int)v101) + 2)
      {
        v62 = v96;
        v61 = v105 - v98;
      }
      if (v50 > (unint64_t)v5
        && v61 + (unint64_t)(v50 - (v51 + v101) + 2) > (unint64_t)v62)
      {
        v63 = (unsigned __int8 *)(v61 + (v50 - (v51 + v101) + 2) - 1);
        v64 = (unsigned __int8 *)(v50 - 1);
        while (*v64 == *v63)
        {
          ++v10;
          v65 = v64 - 1;
          if (v64 > v5)
          {
            --v64;
            if (v63-- > v62)
              continue;
          }
          v50 = (unint64_t)(v65 + 1);
          goto LABEL_84;
        }
        v50 = (unint64_t)(v64 + 1);
      }
LABEL_84:
      v15 = v16;
      v16 = (v51 - 2);
    }
    v67 = v50 - (_QWORD)v5;
    v68 = *(_OWORD **)(v6 + 24);
    if (v50 <= (unint64_t)v100)
    {
      *v68 = *(_OWORD *)v5;
      v72 = *(_QWORD *)(v6 + 24);
      if (v67 <= 0x10)
      {
        *(_QWORD *)(v6 + 24) = v72 + v67;
        v77 = *(_QWORD *)(v6 + 8);
        goto LABEL_99;
      }
      v73 = (_OWORD *)(v72 + 16);
      v74 = v72 + v67;
      v75 = (__int128 *)(v5 + 16);
      do
      {
        v76 = *v75++;
        *v73++ = v76;
      }
      while ((unint64_t)v73 < v74);
    }
    else
    {
      if (v5 <= v100)
      {
        v69 = (_OWORD *)((char *)v68 + v100 - v5);
        do
        {
          v70 = *(_OWORD *)v5;
          v5 += 16;
          *v68++ = v70;
        }
        while (v68 < v69);
        v5 = v100;
        v68 = v69;
      }
      while ((unint64_t)v5 < v50)
      {
        v71 = *v5++;
        *(_BYTE *)v68 = v71;
        v68 = (_OWORD *)((char *)v68 + 1);
      }
    }
    *(_QWORD *)(v6 + 24) += v67;
    v77 = *(_QWORD *)(v6 + 8);
    if (v67 >= 0x10000)
    {
      v78 = (unint64_t)(v77 - *(_QWORD *)v6) >> 3;
      *(_DWORD *)(v6 + 72) = 1;
      *(_DWORD *)(v6 + 76) = v78;
    }
LABEL_99:
    *(_WORD *)(v77 + 4) = v67;
    *(_DWORD *)v77 = v51 + 1;
    if (v10 - 3 >= 0x10000)
    {
      v79 = (unint64_t)(v77 - *(_QWORD *)v6) >> 3;
      *(_DWORD *)(v6 + 72) = 2;
      *(_DWORD *)(v6 + 76) = v79;
    }
    *(_WORD *)(v77 + 6) = v10 - 3;
    v80 = v77 + 8;
    *(_QWORD *)(v6 + 8) = v77 + 8;
    v5 = (unsigned __int8 *)(v50 + v10);
    if (v50 + v10 <= v8)
    {
      v81 = v16;
      v82 = v15;
      v9 = v101;
      LODWORD(v10) = v106;
      while (1)
      {
        v16 = v82;
        v82 = v81;
        v83 = ((_DWORD)v5 - v101 - v16);
        v84 = v105 - v98;
        if (v83 >= v106)
          v84 = v101;
        if (v106 + ~(_DWORD)v83 < 3)
          break;
        v85 = v84 + v83;
        if (*(_DWORD *)v85 != *(_DWORD *)v5)
          break;
        if (v83 >= v106)
          v86 = (char *)v7;
        else
          v86 = v102;
        v87 = ZSTD_count_2segments(v5 + 4, (char *)(v85 + 4), v7, v86, v104);
        if (v5 <= v100)
        {
          *(_OWORD *)*(_QWORD *)(v6 + 24) = *(_OWORD *)v5;
          v80 = *(_QWORD *)(v6 + 8);
        }
        *(_WORD *)(v80 + 4) = 0;
        *(_DWORD *)v80 = 1;
        if (v87 + 1 >= 0x10000)
        {
          v88 = (unint64_t)(v80 - *(_QWORD *)v6) >> 3;
          *(_DWORD *)(v6 + 72) = 2;
          *(_DWORD *)(v6 + 76) = v88;
        }
        *(_WORD *)(v80 + 6) = v87 + 1;
        v80 += 8;
        v5 += v87 + 4;
        *(_QWORD *)(v6 + 8) = v80;
        v81 = v16;
        LODWORD(v15) = v82;
        v19 = v5;
        if ((unint64_t)v5 > v8)
          goto LABEL_118;
      }
      LODWORD(v15) = v16;
      v16 = v81;
      v19 = v5;
    }
    else
    {
      v19 = (unsigned __int8 *)(v50 + v10);
      v9 = v101;
      LODWORD(v10) = v106;
    }
    goto LABEL_118;
  }
LABEL_120:
  *a3 = v16;
  a3[1] = v15;
  return v7 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_greedy_dictMatchState_row(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  char *v55;
  char *v56;
  unsigned __int8 *v57;
  unint64_t v59;
  _OWORD *v60;
  _OWORD *v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  _OWORD *v65;
  unint64_t v66;
  __int128 *v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int *v82;
  unint64_t v83;
  uint64_t (*v85)(uint64_t, char *, unint64_t, uint64_t *);
  unsigned int v86;
  uint64_t v87;
  char *v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;

  v5 = a4;
  v7 = (unint64_t)&a4[a5];
  v8 = (unint64_t)&a4[a5 - 16];
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 252);
  v12 = *(_DWORD *)(a1 + 256);
  v13 = 2 * (v12 > 3);
  if (v12 - 7 >= 0xFFFFFFFD)
    v13 = v12 - 4;
  v14 = 2 * (v11 > 3);
  if (v11 - 7 >= 0xFFFFFFFD)
    v14 = v11 - 4;
  v85 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *))*(&off_1E6E2C4B8[3 * v13 + 18] + v14);
  v15 = *a3;
  v16 = a3[1];
  v17 = *(_QWORD *)(a1 + 232);
  v18 = *(unsigned int *)(v17 + 24);
  v87 = *(_QWORD *)(v17 + 8);
  v88 = *(char **)v17;
  v89 = (_QWORD *)(v9 + v10);
  v83 = v87 + v18;
  if ((_DWORD)a4 - ((_DWORD)v9 + (_DWORD)v10) - ((_DWORD)v87 + (_DWORD)v18) + *(_QWORD *)v17)
    v19 = a4;
  else
    v19 = a4 + 1;
  if (v11 >= 6)
    v11 = 6;
  if (v11 <= 4)
    v20 = 4;
  else
    v20 = v11;
  if (v12 >= 6)
    v12 = 6;
  v21 = *(unsigned int *)(a1 + 44);
  v22 = v8 - (v9 + v21);
  if ((v22 + 1) < 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  v90 = (unint64_t)&a4[a5 - 16];
  if (v8 >= v9 + v21)
    v24 = v23;
  else
    v24 = 0;
  v25 = (v24 + v21);
  if (v21 < v25)
  {
    v26 = *(_QWORD *)(a1 + 96);
    v27 = *(_DWORD *)(a1 + 52);
    v28 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v12 == 5)
      {
        v29 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v21);
      }
      else
      {
        if (v12 != 6)
        {
          LODWORD(v30) = (-1640531535 * *(_DWORD *)(v9 + v21)) >> (24 - v27);
          goto LABEL_29;
        }
        v29 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v21);
      }
      v30 = v29 >> (56 - v27);
LABEL_29:
      v31 = v30 >> 8 << v20;
      _X4 = v26 + 4 * v31;
      __asm { PRFM            #0, [X4] }
      if (v11 > 4)
      {
        __asm { PRFM            #0, [X4,#0x40] }
        _X3 = v28 + 2 * v31;
        __asm { PRFM            #0, [X3] }
        if (v20 == 6)
          __asm { PRFM            #0, [X3,#0x40] }
      }
      else
      {
        _X3 = v28 + 2 * v31;
        __asm { PRFM            #0, [X3] }
      }
      *(_DWORD *)(a1 + 4 * (v21++ & 7) + 64) = v30;
    }
    while (v25 != v21);
  }
  if ((unint64_t)v19 < v90)
  {
    v82 = a3;
    v86 = v10 + v87 - (_DWORD)v88;
    while (1)
    {
      v44 = v19 + 1;
      v45 = (_DWORD)v19 - v9 - v15;
      v46 = (v45 + 1);
      v47 = v87 + v46 - v86;
      if (v46 >= v10)
        v47 = v9 + v46;
      if ((v10 - v45 - 5) <= 0xFFFFFFFC && *(_DWORD *)v47 == *(_DWORD *)v44)
        break;
      v91 = 999999999;
      v51 = v85(a1, v19, v7, &v91);
      v50 = v91;
      if (v51)
        v44 = v19;
      else
        v50 = 0;
      if (v51 > 3)
      {
        if (v50 >= 3)
        {
          v52 = v9 + v10;
          if (v10 > (int)v44 - (int)v9 - (int)v50 + 2)
            v52 = v83;
          v53 = v87 - v86;
          if (v10 <= (int)v44 - (int)v9 - (int)v50 + 2)
            v53 = v9;
          if (v44 <= v5 || v53 + (unint64_t)((_DWORD)v44 - v9 - v50 + 2) <= v52)
          {
            v56 = (char *)(v7 - 32);
          }
          else
          {
            v54 = (unsigned __int8 *)(v53 + ((_DWORD)v44 - v9 - v50 + 2) - 1);
            v55 = v44 - 1;
            v56 = (char *)(v7 - 32);
            while (*v55 == *v54)
            {
              ++v51;
              v57 = (unsigned __int8 *)(v55 - 1);
              if (v55 > v5)
              {
                --v55;
                if ((unint64_t)v54-- > v52)
                  continue;
              }
              v44 = (char *)(v57 + 1);
              goto LABEL_64;
            }
            v44 = v55 + 1;
          }
LABEL_64:
          v16 = v15;
          v15 = (v50 - 2);
LABEL_65:
          v59 = v44 - v5;
          v60 = *(_OWORD **)(a2 + 24);
          if (v44 <= v56)
          {
            *v60 = *(_OWORD *)v5;
            v64 = *(_QWORD *)(a2 + 24);
            if (v59 > 0x10)
            {
              v65 = (_OWORD *)(v64 + 16);
              v66 = v64 + v59;
              v67 = (__int128 *)(v5 + 16);
              do
              {
                v68 = *v67++;
                *v65++ = v68;
              }
              while ((unint64_t)v65 < v66);
              goto LABEL_76;
            }
            *(_QWORD *)(a2 + 24) = v64 + v59;
            v69 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (v5 <= v56)
            {
              v61 = (_OWORD *)((char *)v60 + v56 - v5);
              do
              {
                v62 = *(_OWORD *)v5;
                v5 += 16;
                *v60++ = v62;
              }
              while (v60 < v61);
              v5 = v56;
              v60 = v61;
            }
            while (v5 < v44)
            {
              v63 = *v5++;
              *(_BYTE *)v60 = v63;
              v60 = (_OWORD *)((char *)v60 + 1);
            }
LABEL_76:
            *(_QWORD *)(a2 + 24) += v59;
            v69 = *(_QWORD *)(a2 + 8);
            if (v59 >= 0x10000)
            {
              v70 = (unint64_t)(v69 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v70;
            }
          }
          *(_WORD *)(v69 + 4) = v59;
          *(_DWORD *)v69 = v50 + 1;
          if (v51 - 3 >= 0x10000)
          {
            v71 = (unint64_t)(v69 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v71;
          }
          *(_WORD *)(v69 + 6) = v51 - 3;
          v72 = v69 + 8;
          *(_QWORD *)(a2 + 8) = v69 + 8;
          v5 = &v44[v51];
          if ((unint64_t)&v44[v51] <= v90)
          {
            v73 = v15;
            v74 = v16;
            while (1)
            {
              v15 = v74;
              v74 = v73;
              v75 = ((_DWORD)v5 - v9 - v15);
              v76 = v87 - v86;
              if (v75 >= v10)
                v76 = v9;
              if ((v10 + ~(_DWORD)v75) < 3)
                break;
              v77 = v76 + v75;
              if (*(_DWORD *)v77 != *(_DWORD *)v5)
                break;
              if (v75 >= v10)
                v78 = (char *)v7;
              else
                v78 = v88;
              v79 = ZSTD_count_2segments(v5 + 4, (char *)(v77 + 4), v7, v78, v89);
              if ((unint64_t)v5 <= v7 - 32)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                v72 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v72 + 4) = 0;
              *(_DWORD *)v72 = 1;
              if (v79 + 1 >= 0x10000)
              {
                v80 = (unint64_t)(v72 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v80;
              }
              *(_WORD *)(v72 + 6) = v79 + 1;
              v72 += 8;
              v5 += v79 + 4;
              *(_QWORD *)(a2 + 8) = v72;
              v73 = v15;
              v16 = v74;
              v19 = v5;
              if ((unint64_t)v5 > v90)
                goto LABEL_98;
            }
            v16 = v15;
            v15 = v73;
          }
          v19 = v5;
          goto LABEL_98;
        }
LABEL_61:
        v56 = (char *)(v7 - 32);
        goto LABEL_65;
      }
      v19 += ((v19 - v5) >> 8) + 1;
LABEL_98:
      if ((unint64_t)v19 >= v90)
      {
        a3 = v82;
        goto LABEL_100;
      }
    }
    if (v46 >= v10)
      v48 = (char *)v7;
    else
      v48 = v88;
    v49 = ZSTD_count_2segments(v19 + 5, (char *)(v47 + 4), v7, v48, v89);
    LODWORD(v50) = 0;
    v51 = v49 + 4;
    goto LABEL_61;
  }
LABEL_100:
  *a3 = v15;
  a3[1] = v16;
  return v7 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy2_dedicatedDictSearch_row(uint64_t a1, uint64_t a2, unsigned int *a3, _BYTE *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  int v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  unint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  __int128 v75;
  char v76;
  uint64_t v77;
  _OWORD *v78;
  unint64_t v79;
  __int128 *v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int *v95;
  unint64_t v96;
  _QWORD *v98;
  unsigned int v99;
  char *v100;
  unsigned int v101;
  uint64_t (*v102)(uint64_t, char *, unint64_t, uint64_t *);
  uint64_t v103;
  unint64_t v105;
  uint64_t v106;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = (unint64_t)&a4[a5 - 16];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 24);
  v10 = (_QWORD *)(v8 + v9);
  v11 = *(_DWORD *)(a1 + 252);
  v12 = *(_DWORD *)(a1 + 256);
  v13 = 2 * (v12 > 3);
  if (v12 - 7 >= 0xFFFFFFFD)
    v13 = v12 - 4;
  v14 = 2 * (v11 > 3);
  if (v11 - 7 >= 0xFFFFFFFD)
    v14 = v11 - 4;
  v102 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *))*(&off_1E6E2C4B8[3 * v13 + 27] + v14);
  v16 = *a3;
  LODWORD(v15) = a3[1];
  v17 = *(_QWORD *)(a1 + 232);
  v18 = *(unsigned int *)(v17 + 24);
  v103 = *(_QWORD *)(v17 + 8);
  v96 = v103 + v18;
  v100 = *(char **)v17;
  if ((_DWORD)a4 - (_DWORD)v10 - ((_DWORD)v103 + (_DWORD)v18) + *(_QWORD *)v17)
    v19 = a4;
  else
    v19 = a4 + 1;
  if (v11 >= 6)
    v11 = 6;
  if (v11 <= 4)
    v20 = 4;
  else
    v20 = v11;
  if (v12 >= 6)
    v12 = 6;
  v21 = *(unsigned int *)(a1 + 44);
  v22 = v7 - (v8 + v21);
  if ((v22 + 1) < 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  v105 = (unint64_t)&a4[a5 - 16];
  if (v7 >= v8 + v21)
    v24 = v23;
  else
    v24 = 0;
  v25 = (v24 + v21);
  if (v21 < v25)
  {
    v26 = *(_QWORD *)(a1 + 96);
    v27 = *(_DWORD *)(a1 + 52);
    v28 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v12 == 5)
      {
        v29 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v8 + v21);
      }
      else
      {
        if (v12 != 6)
        {
          LODWORD(v30) = (-1640531535 * *(_DWORD *)(v8 + v21)) >> (24 - v27);
          goto LABEL_29;
        }
        v29 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v8 + v21);
      }
      v30 = v29 >> (56 - v27);
LABEL_29:
      v31 = v30 >> 8 << v20;
      _X4 = v26 + 4 * v31;
      __asm { PRFM            #0, [X4] }
      if (v11 > 4)
      {
        __asm { PRFM            #0, [X4,#0x40] }
        _X3 = v28 + 2 * v31;
        __asm { PRFM            #0, [X3] }
        if (v20 == 6)
          __asm { PRFM            #0, [X3,#0x40] }
      }
      else
      {
        _X3 = v28 + 2 * v31;
        __asm { PRFM            #0, [X3] }
      }
      *(_DWORD *)(a1 + 4 * (v21++ & 7) + 64) = v30;
    }
    while (v25 != v21);
  }
  if ((unint64_t)v19 < v105)
  {
    v95 = a3;
    v101 = v9 + v103 - (_DWORD)v100;
    v98 = (_QWORD *)(v8 + v9);
    while (1)
    {
      v44 = v19 + 1;
      v45 = (_DWORD)v19 - v8 - v16;
      v46 = (v45 + 1);
      v47 = v103 + v46 - v101;
      if (v46 >= v9)
        v47 = v8 + v46;
      v99 = v15;
      if ((v9 - v45 - 5) <= 0xFFFFFFFC && *(_DWORD *)v47 == *(_DWORD *)v44)
      {
        v48 = v46 >= v9 ? (char *)v6 : v100;
        v49 = ZSTD_count_2segments(v19 + 5, (char *)(v47 + 4), v6, v48, v10) + 4;
      }
      else
      {
        v49 = 0;
      }
      v106 = 999999999;
      v50 = v102(a1, v19, v6, &v106);
      v51 = v50 <= v49 ? v49 : v50;
      if (v51 >= 4)
        break;
      v19 += ((v19 - (char *)v5) >> 8) + 1;
      LODWORD(v15) = v99;
LABEL_133:
      if ((unint64_t)v19 >= v105)
      {
        a3 = v95;
        goto LABEL_135;
      }
    }
    if (v50 <= v49)
    {
      v52 = 0;
    }
    else
    {
      v44 = v19;
      v52 = v106;
    }
    v53 = v51;
    v54 = v52;
    v55 = v44;
    if ((unint64_t)v19 < v105)
    {
      while (1)
      {
        v55 = v19 + 1;
        v56 = ((_DWORD)v19 + 1 - v8 - v16);
        v57 = v103 + v56 - v101;
        if (v56 >= v9)
          v57 = v8 + v56;
        if ((v9 + ~(_DWORD)v56) >= 3 && *(_DWORD *)v57 == *(_DWORD *)v55)
        {
          v58 = v56 >= v9 ? (char *)v6 : v100;
          v59 = ZSTD_count_2segments(v19 + 5, (char *)(v57 + 4), v6, v58, v98);
          v60 = 3 * v51 + (__clz(v52 + 1) ^ 0xFFFFFFE0) + 2;
          v61 = v59 > 0xFFFFFFFFFFFFFFFBLL || 3 * ((int)v59 + 4) <= v60;
          if (!v61)
          {
            v52 = 0;
            v51 = v59 + 4;
            v44 = v19 + 1;
          }
        }
        v106 = 999999999;
        v53 = v102(a1, v19 + 1, v6, &v106);
        if (v53 < 4
          || (v54 = v106,
              (int)((__clz(v106 + 1) ^ 0xFFFFFFE0) + 4 * v53 + 1) <= (int)((__clz(v52 + 1) ^ 0xFFFFFFE0) + 4 * v51 + 5)))
        {
          if ((unint64_t)v55 >= v105)
            break;
          v55 = v19 + 2;
          v62 = ((_DWORD)v19 + 2 - v8 - v16);
          v63 = v103 + v62 - v101;
          if (v62 >= v9)
            v63 = v8 + v62;
          if ((v9 + ~(_DWORD)v62) >= 3 && *(_DWORD *)v63 == *(_DWORD *)v55)
          {
            v64 = v62 >= v9 ? (char *)v6 : v100;
            v65 = ZSTD_count_2segments(v19 + 6, (char *)(v63 + 4), v6, v64, v98);
            if (v65 <= 0xFFFFFFFFFFFFFFFBLL && (int)((__clz(v52 + 1) ^ 0xFFFFFFE0) + 4 * v51 + 2) < 4 * ((int)v65 + 4))
            {
              v52 = 0;
              v51 = v65 + 4;
              v44 = v19 + 2;
            }
          }
          v106 = 999999999;
          v53 = v102(a1, v19 + 2, v6, &v106);
          if (v53 < 4)
            break;
          v54 = v106;
          if ((int)((__clz(v106 + 1) ^ 0xFFFFFFE0) + 4 * v53 + 1) <= (int)((__clz(v52 + 1) ^ 0xFFFFFFE0) + 4 * v51 + 8))
            break;
        }
        v19 = v55;
        v44 = v55;
        v52 = v54;
        v51 = v53;
        if ((unint64_t)v55 >= v105)
          goto LABEL_84;
      }
      v53 = v51;
      v54 = v52;
      v55 = v44;
    }
LABEL_84:
    v15 = v99;
    if (v54 <= 2)
    {
      v70 = (unsigned __int8 *)(v6 - 32);
    }
    else
    {
      v66 = v8 + v9;
      if (v9 > (int)v55 - ((int)v54 + (int)v8) + 2)
        v66 = v96;
      v67 = v103 - v101;
      if (v9 <= (int)v55 - ((int)v54 + (int)v8) + 2)
        v67 = v8;
      if (v55 <= (char *)v5 || v67 + (unint64_t)((_DWORD)v55 - (v54 + v8) + 2) <= v66)
      {
        v70 = (unsigned __int8 *)(v6 - 32);
      }
      else
      {
        v68 = (unsigned __int8 *)(v67 + ((_DWORD)v55 - (v54 + v8) + 2) - 1);
        v69 = (unsigned __int8 *)(v55 - 1);
        v70 = (unsigned __int8 *)(v6 - 32);
        while (*v69 == *v68)
        {
          ++v53;
          v71 = v69 - 1;
          if (v69 > v5)
          {
            --v69;
            v61 = (unint64_t)v68-- > v66;
            if (v61)
              continue;
          }
          v55 = (char *)(v71 + 1);
          goto LABEL_99;
        }
        v55 = (char *)(v69 + 1);
      }
LABEL_99:
      v15 = v16;
      v16 = (v54 - 2);
    }
    v72 = v55 - (char *)v5;
    v73 = *(_OWORD **)(a2 + 24);
    if (v55 <= (char *)v70)
    {
      *v73 = *(_OWORD *)v5;
      v77 = *(_QWORD *)(a2 + 24);
      if (v72 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v77 + v72;
        v82 = *(_QWORD *)(a2 + 8);
        goto LABEL_114;
      }
      v78 = (_OWORD *)(v77 + 16);
      v79 = v77 + v72;
      v80 = (__int128 *)(v5 + 16);
      do
      {
        v81 = *v80++;
        *v78++ = v81;
      }
      while ((unint64_t)v78 < v79);
    }
    else
    {
      if (v5 <= v70)
      {
        v74 = (_OWORD *)((char *)v73 + v70 - v5);
        do
        {
          v75 = *(_OWORD *)v5;
          v5 += 16;
          *v73++ = v75;
        }
        while (v73 < v74);
        v5 = v70;
        v73 = v74;
      }
      while (v5 < (unsigned __int8 *)v55)
      {
        v76 = *v5++;
        *(_BYTE *)v73 = v76;
        v73 = (_OWORD *)((char *)v73 + 1);
      }
    }
    *(_QWORD *)(a2 + 24) += v72;
    v82 = *(_QWORD *)(a2 + 8);
    if (v72 >= 0x10000)
    {
      v83 = (unint64_t)(v82 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v83;
    }
LABEL_114:
    *(_WORD *)(v82 + 4) = v72;
    *(_DWORD *)v82 = v54 + 1;
    if (v53 - 3 >= 0x10000)
    {
      v84 = (unint64_t)(v82 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v84;
    }
    *(_WORD *)(v82 + 6) = v53 - 3;
    v85 = v82 + 8;
    *(_QWORD *)(a2 + 8) = v82 + 8;
    v5 = (unsigned __int8 *)&v55[v53];
    if ((unint64_t)&v55[v53] <= v105)
    {
      v86 = v16;
      v87 = v15;
      v10 = (_QWORD *)(v8 + v9);
      while (1)
      {
        v16 = v87;
        v87 = v86;
        v88 = ((_DWORD)v5 - v8 - v16);
        v89 = v103 - v101;
        if (v88 >= v9)
          v89 = v8;
        if ((v9 + ~(_DWORD)v88) < 3)
          break;
        v90 = v89 + v88;
        if (*(_DWORD *)v90 != *(_DWORD *)v5)
          break;
        if (v88 >= v9)
          v91 = (char *)v6;
        else
          v91 = v100;
        v92 = ZSTD_count_2segments(v5 + 4, (char *)(v90 + 4), v6, v91, v98);
        if ((unint64_t)v5 <= v6 - 32)
        {
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
          v85 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)(v85 + 4) = 0;
        *(_DWORD *)v85 = 1;
        if (v92 + 1 >= 0x10000)
        {
          v93 = (unint64_t)(v85 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v93;
        }
        *(_WORD *)(v85 + 6) = v92 + 1;
        v85 += 8;
        v5 += v92 + 4;
        *(_QWORD *)(a2 + 8) = v85;
        v86 = v16;
        LODWORD(v15) = v87;
        v19 = (char *)v5;
        if ((unint64_t)v5 > v105)
          goto LABEL_133;
      }
      LODWORD(v15) = v16;
      v16 = v86;
      v19 = (char *)v5;
    }
    else
    {
      v19 = &v55[v53];
      v10 = (_QWORD *)(v8 + v9);
    }
    goto LABEL_133;
  }
LABEL_135:
  *a3 = v16;
  a3[1] = v15;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy_dedicatedDictSearch_row(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unint64_t v67;
  _OWORD *v68;
  _OWORD *v69;
  __int128 v70;
  char v71;
  uint64_t v72;
  _OWORD *v73;
  unint64_t v74;
  __int128 *v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int *v90;
  int v91;
  int v92;
  int v93;
  unint64_t v94;
  unsigned __int8 *v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned __int8 *v100;
  uint64_t v101;
  char *v102;
  uint64_t (*v103)(uint64_t, unsigned __int8 *, unint64_t, _QWORD *);
  unsigned __int8 *v104;
  uint64_t v105;
  unsigned int v106;
  _QWORD v108[2];

  v5 = a4;
  v6 = a2;
  v7 = (unint64_t)&a4[a5];
  v8 = (unint64_t)&a4[a5 - 16];
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 252);
  v12 = *(_DWORD *)(a1 + 256);
  v13 = 2 * (v12 > 3);
  if (v12 - 7 >= 0xFFFFFFFD)
    v13 = v12 - 4;
  v14 = 2 * (v11 > 3);
  if (v11 - 7 >= 0xFFFFFFFD)
    v14 = v11 - 4;
  v103 = *(uint64_t (**)(uint64_t, unsigned __int8 *, unint64_t, _QWORD *))*(&off_1E6E2C4B8[3 * v13 + 27]
                                                                                           + v14);
  v16 = *a3;
  LODWORD(v15) = a3[1];
  v17 = *(_QWORD *)(a1 + 232);
  v18 = *(unsigned int *)(v17 + 24);
  v105 = *(_QWORD *)(v17 + 8);
  v104 = (unsigned __int8 *)(v9 + v10);
  v96 = (unsigned __int8 *)(v105 + v18);
  v102 = *(char **)v17;
  if ((_DWORD)a4 - ((_DWORD)v9 + (_DWORD)v10) - ((_DWORD)v105 + (_DWORD)v18) + *(_QWORD *)v17)
    v19 = a4;
  else
    v19 = a4 + 1;
  if (v11 >= 6)
    v11 = 6;
  if (v11 <= 4)
    v20 = 4;
  else
    v20 = v11;
  if (v12 >= 6)
    v12 = 6;
  v21 = *(unsigned int *)(a1 + 44);
  v22 = v8 - (v9 + v21);
  if ((v22 + 1) < 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  if (v8 >= v9 + v21)
    v24 = v23;
  else
    v24 = 0;
  v25 = (v24 + v21);
  if (v21 < v25)
  {
    v26 = *(_QWORD *)(a1 + 96);
    v27 = *(_DWORD *)(a1 + 52);
    v28 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v12 == 5)
      {
        v29 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v21);
      }
      else
      {
        if (v12 != 6)
        {
          LODWORD(v30) = (-1640531535 * *(_DWORD *)(v9 + v21)) >> (24 - v27);
          goto LABEL_29;
        }
        v29 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v21);
      }
      v30 = v29 >> (56 - v27);
LABEL_29:
      v31 = v30 >> 8 << v20;
      _X5 = v26 + 4 * v31;
      __asm { PRFM            #0, [X5] }
      if (v11 > 4)
      {
        __asm { PRFM            #0, [X5,#0x40] }
        _X3 = v28 + 2 * v31;
        __asm { PRFM            #0, [X3] }
        if (v20 == 6)
          __asm { PRFM            #0, [X3,#0x40] }
      }
      else
      {
        _X3 = v28 + 2 * v31;
        __asm { PRFM            #0, [X3] }
      }
      *(_DWORD *)(a1 + 4 * (v21++ & 7) + 64) = v30;
    }
    while (v25 != v21);
  }
  if ((unint64_t)v19 < v8)
  {
    v90 = a3;
    v100 = (unsigned __int8 *)(v7 - 32);
    v97 = (uint64_t)&v5[a5 - 16];
    v93 = v10 + v9 - 2;
    v92 = -(int)v9;
    v91 = (_DWORD)v102 - v10 - v105 - v9 + 1;
    v98 = v10 + v105 - (_DWORD)v102;
    v106 = v10;
    v94 = v8;
    v101 = v9;
    while (1)
    {
      v44 = (_DWORD)v19 - v9 - v16;
      v45 = (v44 + 1);
      v46 = v105 + v45 - v98;
      if (v45 >= v10)
        v46 = v9 + v45;
      v99 = v15;
      if ((v10 - v44 - 5) <= 0xFFFFFFFC && *(_DWORD *)v46 == *(_DWORD *)(v19 + 1))
      {
        v47 = v45 >= v10 ? (char *)v7 : v102;
        v48 = ZSTD_count_2segments(v19 + 5, (char *)(v46 + 4), v7, v47, v104) + 4;
      }
      else
      {
        v48 = 0;
      }
      v108[0] = 999999999;
      v49 = v103(a1, v19, v7, v108);
      v10 = v49 <= v48 ? v48 : v49;
      if (v10 >= 4)
        break;
      v19 += ((v19 - v5) >> 8) + 1;
      LODWORD(v10) = v106;
      LODWORD(v15) = v99;
LABEL_118:
      if ((unint64_t)v19 >= v8)
      {
        a3 = v90;
        goto LABEL_120;
      }
    }
    if (v49 <= v48)
      v50 = (unint64_t)(v19 + 1);
    else
      v50 = (unint64_t)v19;
    if (v49 <= v48)
      v51 = 0;
    else
      v51 = v108[0];
    if ((unint64_t)v19 < v8)
    {
      v52 = v7;
      v53 = 0;
      v54 = v93 + v16 - (_DWORD)v19;
      while (1)
      {
        v55 = &v19[v53 + 1];
        v56 = (v92 + (_DWORD)v19 - v16 + v53 + 1);
        v57 = v105 + (v91 + (_DWORD)v19 - v16 + v53);
        if (v56 >= v106)
          v57 = v101 + v56;
        if (v54 >= 3 && *(_DWORD *)v57 == *(_DWORD *)v55)
        {
          v58 = v56 >= v106 ? (char *)v52 : v102;
          v59 = ZSTD_count_2segments(&v19[v53 + 5], (char *)(v57 + 4), v52, v58, v104);
          if (v59 <= 0xFFFFFFFFFFFFFFFBLL && 3 * ((int)v59 + 4) > (int)(3 * v10 + (__clz(v51 + 1) ^ 0xFFFFFFE0) + 2))
          {
            v51 = 0;
            v10 = v59 + 4;
            v50 = (unint64_t)&v19[v53 + 1];
          }
        }
        v108[0] = 999999999;
        v60 = v103(a1, &v19[v53 + 1], v52, v108);
        if (v60 < 4
          || (int)((__clz(LODWORD(v108[0]) + 1) ^ 0xFFFFFFE0) + 4 * v60 + 1) <= (int)((__clz(v51 + 1) ^ 0xFFFFFFE0)
                                                                                    + 4 * v10
                                                                                    + 5))
        {
          break;
        }
        ++v53;
        --v54;
        v50 = (unint64_t)v55;
        v51 = v108[0];
        v10 = v60;
        if (v97 - (_QWORD)v19 == v53)
        {
          v10 = v60;
          v51 = v108[0];
          v50 = v97;
          break;
        }
      }
      v7 = v52;
      v8 = v94;
      v6 = a2;
    }
    v15 = v99;
    if (v51 > 2)
    {
      v61 = v101;
      v62 = v104;
      if (v106 > (int)v50 - ((int)v51 + (int)v101) + 2)
      {
        v62 = v96;
        v61 = v105 - v98;
      }
      if (v50 > (unint64_t)v5
        && v61 + (unint64_t)(v50 - (v51 + v101) + 2) > (unint64_t)v62)
      {
        v63 = (unsigned __int8 *)(v61 + (v50 - (v51 + v101) + 2) - 1);
        v64 = (unsigned __int8 *)(v50 - 1);
        while (*v64 == *v63)
        {
          ++v10;
          v65 = v64 - 1;
          if (v64 > v5)
          {
            --v64;
            if (v63-- > v62)
              continue;
          }
          v50 = (unint64_t)(v65 + 1);
          goto LABEL_84;
        }
        v50 = (unint64_t)(v64 + 1);
      }
LABEL_84:
      v15 = v16;
      v16 = (v51 - 2);
    }
    v67 = v50 - (_QWORD)v5;
    v68 = *(_OWORD **)(v6 + 24);
    if (v50 <= (unint64_t)v100)
    {
      *v68 = *(_OWORD *)v5;
      v72 = *(_QWORD *)(v6 + 24);
      if (v67 <= 0x10)
      {
        *(_QWORD *)(v6 + 24) = v72 + v67;
        v77 = *(_QWORD *)(v6 + 8);
        goto LABEL_99;
      }
      v73 = (_OWORD *)(v72 + 16);
      v74 = v72 + v67;
      v75 = (__int128 *)(v5 + 16);
      do
      {
        v76 = *v75++;
        *v73++ = v76;
      }
      while ((unint64_t)v73 < v74);
    }
    else
    {
      if (v5 <= v100)
      {
        v69 = (_OWORD *)((char *)v68 + v100 - v5);
        do
        {
          v70 = *(_OWORD *)v5;
          v5 += 16;
          *v68++ = v70;
        }
        while (v68 < v69);
        v5 = v100;
        v68 = v69;
      }
      while ((unint64_t)v5 < v50)
      {
        v71 = *v5++;
        *(_BYTE *)v68 = v71;
        v68 = (_OWORD *)((char *)v68 + 1);
      }
    }
    *(_QWORD *)(v6 + 24) += v67;
    v77 = *(_QWORD *)(v6 + 8);
    if (v67 >= 0x10000)
    {
      v78 = (unint64_t)(v77 - *(_QWORD *)v6) >> 3;
      *(_DWORD *)(v6 + 72) = 1;
      *(_DWORD *)(v6 + 76) = v78;
    }
LABEL_99:
    *(_WORD *)(v77 + 4) = v67;
    *(_DWORD *)v77 = v51 + 1;
    if (v10 - 3 >= 0x10000)
    {
      v79 = (unint64_t)(v77 - *(_QWORD *)v6) >> 3;
      *(_DWORD *)(v6 + 72) = 2;
      *(_DWORD *)(v6 + 76) = v79;
    }
    *(_WORD *)(v77 + 6) = v10 - 3;
    v80 = v77 + 8;
    *(_QWORD *)(v6 + 8) = v77 + 8;
    v5 = (unsigned __int8 *)(v50 + v10);
    if (v50 + v10 <= v8)
    {
      v81 = v16;
      v82 = v15;
      v9 = v101;
      LODWORD(v10) = v106;
      while (1)
      {
        v16 = v82;
        v82 = v81;
        v83 = ((_DWORD)v5 - v101 - v16);
        v84 = v105 - v98;
        if (v83 >= v106)
          v84 = v101;
        if (v106 + ~(_DWORD)v83 < 3)
          break;
        v85 = v84 + v83;
        if (*(_DWORD *)v85 != *(_DWORD *)v5)
          break;
        if (v83 >= v106)
          v86 = (char *)v7;
        else
          v86 = v102;
        v87 = ZSTD_count_2segments(v5 + 4, (char *)(v85 + 4), v7, v86, v104);
        if (v5 <= v100)
        {
          *(_OWORD *)*(_QWORD *)(v6 + 24) = *(_OWORD *)v5;
          v80 = *(_QWORD *)(v6 + 8);
        }
        *(_WORD *)(v80 + 4) = 0;
        *(_DWORD *)v80 = 1;
        if (v87 + 1 >= 0x10000)
        {
          v88 = (unint64_t)(v80 - *(_QWORD *)v6) >> 3;
          *(_DWORD *)(v6 + 72) = 2;
          *(_DWORD *)(v6 + 76) = v88;
        }
        *(_WORD *)(v80 + 6) = v87 + 1;
        v80 += 8;
        v5 += v87 + 4;
        *(_QWORD *)(v6 + 8) = v80;
        v81 = v16;
        LODWORD(v15) = v82;
        v19 = v5;
        if ((unint64_t)v5 > v8)
          goto LABEL_118;
      }
      LODWORD(v15) = v16;
      v16 = v81;
      v19 = v5;
    }
    else
    {
      v19 = (unsigned __int8 *)(v50 + v10);
      v9 = v101;
      LODWORD(v10) = v106;
    }
    goto LABEL_118;
  }
LABEL_120:
  *a3 = v16;
  a3[1] = v15;
  return v7 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_greedy_dedicatedDictSearch_row(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  char *v55;
  char *v56;
  unsigned __int8 *v57;
  unint64_t v59;
  _OWORD *v60;
  _OWORD *v61;
  __int128 v62;
  char v63;
  uint64_t v64;
  _OWORD *v65;
  unint64_t v66;
  __int128 *v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int *v82;
  unint64_t v83;
  uint64_t (*v85)(uint64_t, char *, unint64_t, uint64_t *);
  unsigned int v86;
  uint64_t v87;
  char *v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;

  v5 = a4;
  v7 = (unint64_t)&a4[a5];
  v8 = (unint64_t)&a4[a5 - 16];
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(unsigned int *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 252);
  v12 = *(_DWORD *)(a1 + 256);
  v13 = 2 * (v12 > 3);
  if (v12 - 7 >= 0xFFFFFFFD)
    v13 = v12 - 4;
  v14 = 2 * (v11 > 3);
  if (v11 - 7 >= 0xFFFFFFFD)
    v14 = v11 - 4;
  v85 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *))*(&off_1E6E2C4B8[3 * v13 + 27] + v14);
  v15 = *a3;
  v16 = a3[1];
  v17 = *(_QWORD *)(a1 + 232);
  v18 = *(unsigned int *)(v17 + 24);
  v87 = *(_QWORD *)(v17 + 8);
  v88 = *(char **)v17;
  v89 = (_QWORD *)(v9 + v10);
  v83 = v87 + v18;
  if ((_DWORD)a4 - ((_DWORD)v9 + (_DWORD)v10) - ((_DWORD)v87 + (_DWORD)v18) + *(_QWORD *)v17)
    v19 = a4;
  else
    v19 = a4 + 1;
  if (v11 >= 6)
    v11 = 6;
  if (v11 <= 4)
    v20 = 4;
  else
    v20 = v11;
  if (v12 >= 6)
    v12 = 6;
  v21 = *(unsigned int *)(a1 + 44);
  v22 = v8 - (v9 + v21);
  if ((v22 + 1) < 8)
    v23 = v22 + 1;
  else
    v23 = 8;
  v90 = (unint64_t)&a4[a5 - 16];
  if (v8 >= v9 + v21)
    v24 = v23;
  else
    v24 = 0;
  v25 = (v24 + v21);
  if (v21 < v25)
  {
    v26 = *(_QWORD *)(a1 + 96);
    v27 = *(_DWORD *)(a1 + 52);
    v28 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v12 == 5)
      {
        v29 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v21);
      }
      else
      {
        if (v12 != 6)
        {
          LODWORD(v30) = (-1640531535 * *(_DWORD *)(v9 + v21)) >> (24 - v27);
          goto LABEL_29;
        }
        v29 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v21);
      }
      v30 = v29 >> (56 - v27);
LABEL_29:
      v31 = v30 >> 8 << v20;
      _X4 = v26 + 4 * v31;
      __asm { PRFM            #0, [X4] }
      if (v11 > 4)
      {
        __asm { PRFM            #0, [X4,#0x40] }
        _X3 = v28 + 2 * v31;
        __asm { PRFM            #0, [X3] }
        if (v20 == 6)
          __asm { PRFM            #0, [X3,#0x40] }
      }
      else
      {
        _X3 = v28 + 2 * v31;
        __asm { PRFM            #0, [X3] }
      }
      *(_DWORD *)(a1 + 4 * (v21++ & 7) + 64) = v30;
    }
    while (v25 != v21);
  }
  if ((unint64_t)v19 < v90)
  {
    v82 = a3;
    v86 = v10 + v87 - (_DWORD)v88;
    while (1)
    {
      v44 = v19 + 1;
      v45 = (_DWORD)v19 - v9 - v15;
      v46 = (v45 + 1);
      v47 = v87 + v46 - v86;
      if (v46 >= v10)
        v47 = v9 + v46;
      if ((v10 - v45 - 5) <= 0xFFFFFFFC && *(_DWORD *)v47 == *(_DWORD *)v44)
        break;
      v91 = 999999999;
      v51 = v85(a1, v19, v7, &v91);
      v50 = v91;
      if (v51)
        v44 = v19;
      else
        v50 = 0;
      if (v51 > 3)
      {
        if (v50 >= 3)
        {
          v52 = v9 + v10;
          if (v10 > (int)v44 - (int)v9 - (int)v50 + 2)
            v52 = v83;
          v53 = v87 - v86;
          if (v10 <= (int)v44 - (int)v9 - (int)v50 + 2)
            v53 = v9;
          if (v44 <= v5 || v53 + (unint64_t)((_DWORD)v44 - v9 - v50 + 2) <= v52)
          {
            v56 = (char *)(v7 - 32);
          }
          else
          {
            v54 = (unsigned __int8 *)(v53 + ((_DWORD)v44 - v9 - v50 + 2) - 1);
            v55 = v44 - 1;
            v56 = (char *)(v7 - 32);
            while (*v55 == *v54)
            {
              ++v51;
              v57 = (unsigned __int8 *)(v55 - 1);
              if (v55 > v5)
              {
                --v55;
                if ((unint64_t)v54-- > v52)
                  continue;
              }
              v44 = (char *)(v57 + 1);
              goto LABEL_64;
            }
            v44 = v55 + 1;
          }
LABEL_64:
          v16 = v15;
          v15 = (v50 - 2);
LABEL_65:
          v59 = v44 - v5;
          v60 = *(_OWORD **)(a2 + 24);
          if (v44 <= v56)
          {
            *v60 = *(_OWORD *)v5;
            v64 = *(_QWORD *)(a2 + 24);
            if (v59 > 0x10)
            {
              v65 = (_OWORD *)(v64 + 16);
              v66 = v64 + v59;
              v67 = (__int128 *)(v5 + 16);
              do
              {
                v68 = *v67++;
                *v65++ = v68;
              }
              while ((unint64_t)v65 < v66);
              goto LABEL_76;
            }
            *(_QWORD *)(a2 + 24) = v64 + v59;
            v69 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (v5 <= v56)
            {
              v61 = (_OWORD *)((char *)v60 + v56 - v5);
              do
              {
                v62 = *(_OWORD *)v5;
                v5 += 16;
                *v60++ = v62;
              }
              while (v60 < v61);
              v5 = v56;
              v60 = v61;
            }
            while (v5 < v44)
            {
              v63 = *v5++;
              *(_BYTE *)v60 = v63;
              v60 = (_OWORD *)((char *)v60 + 1);
            }
LABEL_76:
            *(_QWORD *)(a2 + 24) += v59;
            v69 = *(_QWORD *)(a2 + 8);
            if (v59 >= 0x10000)
            {
              v70 = (unint64_t)(v69 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v70;
            }
          }
          *(_WORD *)(v69 + 4) = v59;
          *(_DWORD *)v69 = v50 + 1;
          if (v51 - 3 >= 0x10000)
          {
            v71 = (unint64_t)(v69 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v71;
          }
          *(_WORD *)(v69 + 6) = v51 - 3;
          v72 = v69 + 8;
          *(_QWORD *)(a2 + 8) = v69 + 8;
          v5 = &v44[v51];
          if ((unint64_t)&v44[v51] <= v90)
          {
            v73 = v15;
            v74 = v16;
            while (1)
            {
              v15 = v74;
              v74 = v73;
              v75 = ((_DWORD)v5 - v9 - v15);
              v76 = v87 - v86;
              if (v75 >= v10)
                v76 = v9;
              if ((v10 + ~(_DWORD)v75) < 3)
                break;
              v77 = v76 + v75;
              if (*(_DWORD *)v77 != *(_DWORD *)v5)
                break;
              if (v75 >= v10)
                v78 = (char *)v7;
              else
                v78 = v88;
              v79 = ZSTD_count_2segments(v5 + 4, (char *)(v77 + 4), v7, v78, v89);
              if ((unint64_t)v5 <= v7 - 32)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                v72 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v72 + 4) = 0;
              *(_DWORD *)v72 = 1;
              if (v79 + 1 >= 0x10000)
              {
                v80 = (unint64_t)(v72 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v80;
              }
              *(_WORD *)(v72 + 6) = v79 + 1;
              v72 += 8;
              v5 += v79 + 4;
              *(_QWORD *)(a2 + 8) = v72;
              v73 = v15;
              v16 = v74;
              v19 = v5;
              if ((unint64_t)v5 > v90)
                goto LABEL_98;
            }
            v16 = v15;
            v15 = v73;
          }
          v19 = v5;
          goto LABEL_98;
        }
LABEL_61:
        v56 = (char *)(v7 - 32);
        goto LABEL_65;
      }
      v19 += ((v19 - v5) >> 8) + 1;
LABEL_98:
      if ((unint64_t)v19 >= v90)
      {
        a3 = v82;
        goto LABEL_100;
      }
    }
    if (v46 >= v10)
      v48 = (char *)v7;
    else
      v48 = v88;
    v49 = ZSTD_count_2segments(v19 + 5, (char *)(v47 + 4), v7, v48, v89);
    LODWORD(v50) = 0;
    v51 = v49 + 4;
    goto LABEL_61;
  }
LABEL_100:
  *a3 = v15;
  a3[1] = v16;
  return v7 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_greedy_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  char *v33;
  unsigned __int8 *v34;
  char *v35;
  unsigned __int8 *v36;
  unint64_t v38;
  _OWORD *v39;
  _OWORD *v40;
  __int128 v41;
  char v42;
  uint64_t v43;
  _OWORD *v44;
  unint64_t v45;
  __int128 *v46;
  __int128 v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unsigned __int8 *v64;
  uint64_t (*v65)(uint64_t, char *, unint64_t, uint64_t *);
  char *v66;
  unsigned __int8 *v67;
  unint64_t v68;
  unint64_t v69;
  unsigned int v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 256);
  v10 = v9 - 7;
  v11 = 2 * (v9 > 3);
  v12 = v9 - 4;
  if (v10 < 0xFFFFFFFD)
    v12 = v11;
  v13 = *a3;
  v14 = a3[1];
  v67 = (unsigned __int8 *)(v7 + v8);
  if ((char *)(v7 + v8) == a4)
    v15 = a4 + 1;
  else
    v15 = a4;
  v73 = (unint64_t)&a4[a5 - 8];
  if ((unint64_t)v15 < v73)
  {
    v18 = *(_QWORD *)(a1 + 16);
    v66 = (char *)(v18 + v8);
    v72 = v18;
    v64 = (unsigned __int8 *)(v18 + *(unsigned int *)(a1 + 28));
    v19 = 1 << *(_DWORD *)(a1 + 240);
    v65 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *))off_1E6E2C3F8[v12 + 3];
    v71 = v8 - 1;
    v68 = v6 - 32;
    v69 = (unint64_t)&a4[a5];
    v70 = *(_DWORD *)(a1 + 24);
    while (1)
    {
      v20 = v15 + 1;
      v21 = (_DWORD)v15 - v7 + 1;
      v22 = v21 - v19;
      if (v21 - *(_DWORD *)(a1 + 28) <= v19 || *(_DWORD *)(a1 + 40) != 0)
        v22 = *(_DWORD *)(a1 + 28);
      v24 = (v21 - v13);
      v25 = v72;
      if (v24 >= v8)
        v25 = v7;
      if ((v71 - v24) >= 3 && v13 <= v21 - v22 && *(_DWORD *)v20 == *(_DWORD *)(v25 + v24))
        break;
      v74 = 999999999;
      v29 = v65(a1, v15, v6, &v74);
      v28 = v74;
      if (v29)
        v20 = v15;
      else
        v28 = 0;
      if (v29 > 3)
      {
        if (v28 >= 3)
        {
          v30 = (_DWORD)v20 - v7 - v28 + 2;
          if (v70 <= v30)
            v31 = v7;
          else
            v31 = v72;
          v32 = v67;
          v33 = (char *)v68;
          if (v70 > v30)
            v32 = v64;
          if (v20 > v5 && v31 + (unint64_t)v30 > (unint64_t)v32)
          {
            v34 = (unsigned __int8 *)(v31 + ((_DWORD)v20 - v7 - v28 + 2) - 1);
            v35 = v20 - 1;
            while (*v35 == *v34)
            {
              ++v29;
              v36 = (unsigned __int8 *)(v35 - 1);
              if (v35 > v5)
              {
                --v35;
                if (v34-- > v32)
                  continue;
              }
              v20 = (char *)(v36 + 1);
              goto LABEL_42;
            }
            v20 = v35 + 1;
          }
LABEL_42:
          v14 = v13;
          v13 = (v28 - 2);
LABEL_43:
          v38 = v20 - v5;
          v39 = *(_OWORD **)(a2 + 24);
          if (v20 <= v33)
          {
            *v39 = *(_OWORD *)v5;
            v43 = *(_QWORD *)(a2 + 24);
            if (v38 > 0x10)
            {
              v44 = (_OWORD *)(v43 + 16);
              v45 = v43 + v38;
              v46 = (__int128 *)(v5 + 16);
              v6 = v69;
              LODWORD(v8) = v70;
              do
              {
                v47 = *v46++;
                *v44++ = v47;
              }
              while ((unint64_t)v44 < v45);
              goto LABEL_54;
            }
            *(_QWORD *)(a2 + 24) = v43 + v38;
            v48 = *(_QWORD *)(a2 + 8);
            v6 = v69;
            LODWORD(v8) = v70;
          }
          else
          {
            if (v5 <= v33)
            {
              v40 = (_OWORD *)((char *)v39 + v33 - v5);
              do
              {
                v41 = *(_OWORD *)v5;
                v5 += 16;
                *v39++ = v41;
              }
              while (v39 < v40);
              v5 = v33;
              v39 = v40;
            }
            v6 = v69;
            LODWORD(v8) = v70;
            while (v5 < v20)
            {
              v42 = *v5++;
              *(_BYTE *)v39 = v42;
              v39 = (_OWORD *)((char *)v39 + 1);
            }
LABEL_54:
            *(_QWORD *)(a2 + 24) += v38;
            v48 = *(_QWORD *)(a2 + 8);
            if (v38 >= 0x10000)
            {
              v49 = (unint64_t)(v48 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v49;
            }
          }
          *(_WORD *)(v48 + 4) = v38;
          *(_DWORD *)v48 = v28 + 1;
          if (v29 - 3 >= 0x10000)
          {
            v50 = (unint64_t)(v48 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v50;
          }
          *(_WORD *)(v48 + 6) = v29 - 3;
          v51 = v48 + 8;
          *(_QWORD *)(a2 + 8) = v48 + 8;
          v5 = &v20[v29];
          if ((unint64_t)&v20[v29] <= v73)
          {
            v52 = v13;
            v53 = v14;
            while (1)
            {
              v13 = v53;
              v53 = v52;
              v54 = (_DWORD)v5 - v7;
              v55 = (_DWORD)v5 - v7 - v19;
              if ((int)v5 - (int)v7 - *(_DWORD *)(a1 + 28) <= v19 || *(_DWORD *)(a1 + 40) != 0)
                v55 = *(_DWORD *)(a1 + 28);
              v57 = (v54 - v13);
              v58 = v72;
              if (v57 >= v8)
                v58 = v7;
              if ((v71 - v57) < 3
                || v13 > v54 - v55
                || *(_DWORD *)v5 != *(_DWORD *)(v58 + v57))
              {
                break;
              }
              if (v57 >= v8)
                v59 = (char *)v6;
              else
                v59 = v66;
              v60 = ZSTD_count_2segments(v5 + 4, (char *)(v58 + v57 + 4), v6, v59, v67);
              if ((unint64_t)v5 <= v68)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                v51 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v51 + 4) = 0;
              *(_DWORD *)v51 = 1;
              if (v60 + 1 >= 0x10000)
              {
                v61 = (unint64_t)(v51 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v61;
              }
              *(_WORD *)(v51 + 6) = v60 + 1;
              v51 += 8;
              v5 += v60 + 4;
              *(_QWORD *)(a2 + 8) = v51;
              v52 = v13;
              v14 = v53;
              v15 = v5;
              v6 = v69;
              LODWORD(v8) = v70;
              if ((unint64_t)v5 > v73)
                goto LABEL_82;
            }
            v14 = v13;
            v13 = v52;
          }
          v15 = v5;
          goto LABEL_82;
        }
LABEL_40:
        v33 = (char *)v68;
        goto LABEL_43;
      }
      v15 += ((v15 - v5) >> 8) + 1;
      v6 = v69;
      LODWORD(v8) = v70;
LABEL_82:
      if ((unint64_t)v15 >= v73)
        goto LABEL_83;
    }
    if (v24 >= v8)
      v26 = (char *)v6;
    else
      v26 = v66;
    v27 = ZSTD_count_2segments(v15 + 5, (char *)(v25 + v24 + 4), v6, v26, v67);
    LODWORD(v28) = 0;
    v29 = v27 + 4;
    goto LABEL_40;
  }
LABEL_83:
  *a3 = v13;
  a3[1] = v14;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char *v33;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  char *v53;
  unsigned __int8 *v54;
  unint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  _OWORD *v61;
  unint64_t v62;
  __int128 *v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned int *v80;
  int v81;
  int v82;
  int v83;
  unsigned __int8 *v84;
  unint64_t v86;
  int v87;
  unsigned int v88;
  uint64_t v89;
  char *v90;
  char *v91;
  unint64_t v92;
  unsigned __int8 *v93;
  int v94;
  uint64_t (*v95)(uint64_t, unint64_t, unint64_t, _QWORD *);
  unsigned int v97;
  uint64_t v98;
  int v99;
  _QWORD v100[2];

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 256);
  v10 = v9 - 7;
  v11 = 2 * (v9 > 3);
  v12 = v9 - 4;
  if (v10 < 0xFFFFFFFD)
    v12 = v11;
  v14 = *a3;
  LODWORD(v13) = a3[1];
  v93 = (unsigned __int8 *)(v7 + v8);
  if ((char *)(v7 + v8) == a4)
    v15 = (unint64_t)(a4 + 1);
  else
    v15 = (unint64_t)a4;
  if (v15 < (unint64_t)&a4[a5 - 8])
  {
    v16 = a2;
    v17 = a1;
    v80 = a3;
    v18 = *(_QWORD *)(a1 + 16);
    v91 = (char *)(v18 + v8);
    v98 = v18;
    v84 = (unsigned __int8 *)(v18 + *(unsigned int *)(a1 + 28));
    v95 = *(uint64_t (**)(uint64_t, unint64_t, unint64_t, _QWORD *))off_1E6E2C3F8[v12 + 3];
    v94 = v8 - 1;
    v90 = (char *)(v6 - 32);
    v97 = 1 << *(_DWORD *)(a1 + 240);
    v83 = 1 - v7 - v97;
    v82 = 1 - v7;
    v81 = v8 + v7 - 2;
    v99 = *(_DWORD *)(a1 + 24);
    v92 = (unint64_t)&a4[a5];
    v86 = (unint64_t)&a4[a5 - 8];
    v89 = *(_QWORD *)(a1 + 8);
    while (1)
    {
      v19 = 0;
      v20 = (char *)(v15 + 1);
      v21 = v15 - v7 + 1;
      v22 = v21 - v97;
      if (v21 - *(_DWORD *)(v17 + 28) <= v97 || *(_DWORD *)(v17 + 40) != 0)
        v22 = *(_DWORD *)(v17 + 28);
      v24 = (v21 - v14);
      v25 = v98;
      if (v24 >= v8)
        v25 = v7;
      v88 = v13;
      if ((v94 - v24) >= 3 && v14 <= v21 - v22)
      {
        if (*(_DWORD *)v20 == *(_DWORD *)(v25 + v24))
        {
          if (v24 >= v8)
            v26 = (char *)v6;
          else
            v26 = v91;
          v19 = ZSTD_count_2segments((_QWORD *)(v15 + 5), (char *)(v25 + v24 + 4), v6, v26, v93) + 4;
        }
        else
        {
          v19 = 0;
        }
      }
      v100[0] = 999999999;
      v27 = v95(v17, v15, v6, v100);
      v28 = v27 <= v19 ? v19 : v27;
      if (v28 >= 4)
        break;
      v15 += ((uint64_t)(v15 - (_QWORD)v5) >> 8) + 1;
      v29 = v86;
      v7 = v89;
      LODWORD(v8) = v99;
      LODWORD(v13) = v88;
LABEL_123:
      if (v15 >= v29)
      {
        a3 = v80;
        goto LABEL_125;
      }
    }
    if (v27 <= v19)
    {
      v30 = 0;
    }
    else
    {
      v20 = (char *)v15;
      v30 = v100[0];
    }
    if (v15 >= v86)
    {
      v46 = v28;
      v48 = v30;
    }
    else
    {
      v31 = 0;
      v32 = v81 + v14 - v15;
      v87 = v82 + v15;
      LODWORD(v8) = v99;
      while (1)
      {
        v33 = (char *)(v15 + v31 + 1);
        if (!v30)
          goto LABEL_59;
        if (v87 + (int)v31 - *(_DWORD *)(a1 + 28) > v97 && *(_DWORD *)(a1 + 40) == 0)
          v35 = v83 + v15 + v31;
        else
          v35 = *(_DWORD *)(a1 + 28);
        v36 = (v82 + v15 - v14 + v31);
        v37 = v89;
        if (v36 < v8)
          v37 = v98;
        if (v32 >= 3 && v14 <= v87 + (int)v31 - v35 && *(_DWORD *)v33 == *(_DWORD *)(v37 + v36))
        {
          if (v36 >= v8)
            v38 = (char *)v92;
          else
            v38 = v91;
          v39 = ZSTD_count_2segments((_QWORD *)(v15 + v31 + 5), (char *)(v37 + v36 + 4), v92, v38, v93);
          v40 = v39 + 4;
          v41 = 3 * v28 + (__clz(v30 + 1) ^ 0xFFFFFFE0) + 2;
          v42 = 3 * (v39 + 4);
          v43 = v42 <= v41;
          if (v42 > v41)
          {
            v44 = 0;
          }
          else
          {
            v40 = v28;
            v44 = v30;
          }
          if (v43)
            v45 = (uint64_t)v20;
          else
            v45 = v15 + v31 + 1;
          if (v39 <= 0xFFFFFFFFFFFFFFFBLL)
            v46 = v40;
          else
            v46 = v28;
          if (v39 <= 0xFFFFFFFFFFFFFFFBLL)
          {
            v30 = v44;
            v20 = (char *)v45;
          }
        }
        else
        {
LABEL_59:
          v46 = v28;
        }
        v100[0] = 999999999;
        v47 = v95(a1, v15 + v31 + 1, v92, v100);
        v48 = v30;
        if (v47 < 4)
          break;
        v28 = v47;
        v30 = v100[0];
        if ((int)((__clz(LODWORD(v100[0]) + 1) ^ 0xFFFFFFE0) + 4 * v47 + 1) <= (int)((__clz(v48 + 1) ^ 0xFFFFFFE0)
                                                                                    + 4 * v46
                                                                                    + 5))
          break;
        ++v31;
        --v32;
        v20 = v33;
        LODWORD(v8) = v99;
        if (v86 - v15 == v31)
        {
          v46 = v47;
          v48 = v100[0];
          v16 = a2;
          v20 = (char *)v86;
          v6 = v92;
          v7 = v89;
          goto LABEL_67;
        }
      }
      v6 = v92;
      v16 = a2;
    }
    v7 = v89;
    LODWORD(v8) = v99;
LABEL_67:
    v13 = v88;
    if (v48 <= 2)
    {
      v17 = a1;
    }
    else
    {
      v49 = (_DWORD)v20 - (v48 + v7) + 2;
      if (v8 <= v49)
        v50 = v7;
      else
        v50 = v98;
      v51 = v93;
      if (v8 > v49)
        v51 = v84;
      if (v20 <= v5 || v50 + (unint64_t)v49 <= (unint64_t)v51)
      {
        v17 = a1;
      }
      else
      {
        v52 = (unsigned __int8 *)(v50 + ((_DWORD)v20 - (v48 + v7) + 2) - 1);
        v53 = v20 - 1;
        v17 = a1;
        while (*v53 == *v52)
        {
          ++v46;
          v54 = (unsigned __int8 *)(v53 - 1);
          if (v53 > v5)
          {
            --v53;
            v43 = v52-- > v51;
            if (v43)
              continue;
          }
          v20 = (char *)(v54 + 1);
          goto LABEL_83;
        }
        v20 = v53 + 1;
      }
LABEL_83:
      v13 = v14;
      v14 = (v48 - 2);
    }
    v55 = v20 - v5;
    v56 = *(_OWORD **)(v16 + 24);
    if (v20 <= v90)
    {
      *v56 = *(_OWORD *)v5;
      v60 = *(_QWORD *)(v16 + 24);
      if (v55 <= 0x10)
      {
        *(_QWORD *)(v16 + 24) = v60 + v55;
        v65 = *(_QWORD *)(v16 + 8);
LABEL_98:
        *(_WORD *)(v65 + 4) = v55;
        *(_DWORD *)v65 = v48 + 1;
        if (v46 - 3 >= 0x10000)
        {
          v67 = (unint64_t)(v65 - *(_QWORD *)v16) >> 3;
          *(_DWORD *)(v16 + 72) = 2;
          *(_DWORD *)(v16 + 76) = v67;
        }
        *(_WORD *)(v65 + 6) = v46 - 3;
        v68 = v65 + 8;
        *(_QWORD *)(v16 + 8) = v65 + 8;
        v5 = &v20[v46];
        v29 = v86;
        if ((unint64_t)v5 <= v86)
        {
          v69 = v14;
          v70 = v13;
          while (1)
          {
            v14 = v70;
            v70 = v69;
            v71 = (_DWORD)v5 - v7;
            v72 = (_DWORD)v5 - v7 - v97;
            if ((int)v5 - (int)v7 - *(_DWORD *)(v17 + 28) <= v97 || *(_DWORD *)(v17 + 40) != 0)
              v72 = *(_DWORD *)(v17 + 28);
            v74 = (v71 - v14);
            v75 = v98;
            if (v74 >= v8)
              v75 = v7;
            if ((v94 - v74) < 3
              || v14 > v71 - v72
              || *(_DWORD *)v5 != *(_DWORD *)(v75 + v74))
            {
              break;
            }
            if (v74 >= v8)
              v76 = (char *)v6;
            else
              v76 = v91;
            v77 = ZSTD_count_2segments(v5 + 4, (char *)(v75 + v74 + 4), v6, v76, v93);
            if (v5 <= v90)
            {
              *(_OWORD *)*(_QWORD *)(v16 + 24) = *(_OWORD *)v5;
              v68 = *(_QWORD *)(v16 + 8);
            }
            *(_WORD *)(v68 + 4) = 0;
            *(_DWORD *)v68 = 1;
            if (v77 + 1 >= 0x10000)
            {
              v78 = (unint64_t)(v68 - *(_QWORD *)v16) >> 3;
              *(_DWORD *)(v16 + 72) = 2;
              *(_DWORD *)(v16 + 76) = v78;
            }
            *(_WORD *)(v68 + 6) = v77 + 1;
            v68 += 8;
            v5 += v77 + 4;
            *(_QWORD *)(v16 + 8) = v68;
            v69 = v14;
            LODWORD(v13) = v70;
            v15 = (unint64_t)v5;
            LODWORD(v8) = v99;
            if ((unint64_t)v5 > v86)
              goto LABEL_123;
          }
          LODWORD(v13) = v14;
          v14 = v69;
        }
        v15 = (unint64_t)v5;
        goto LABEL_123;
      }
      v61 = (_OWORD *)(v60 + 16);
      v62 = v60 + v55;
      v63 = (__int128 *)(v5 + 16);
      do
      {
        v64 = *v63++;
        *v61++ = v64;
      }
      while ((unint64_t)v61 < v62);
    }
    else
    {
      if (v5 <= v90)
      {
        v57 = (_OWORD *)((char *)v56 + v90 - v5);
        do
        {
          v58 = *(_OWORD *)v5;
          v5 += 16;
          *v56++ = v58;
        }
        while (v56 < v57);
        v5 = v90;
        v56 = v57;
      }
      while (v5 < v20)
      {
        v59 = *v5++;
        *(_BYTE *)v56 = v59;
        v56 = (_OWORD *)((char *)v56 + 1);
      }
    }
    *(_QWORD *)(v16 + 24) += v55;
    v65 = *(_QWORD *)(v16 + 8);
    if (v55 >= 0x10000)
    {
      v66 = (unint64_t)(v65 - *(_QWORD *)v16) >> 3;
      *(_DWORD *)(v16 + 72) = 1;
      *(_DWORD *)(v16 + 76) = v66;
    }
    goto LABEL_98;
  }
LABEL_125:
  *a3 = v14;
  a3[1] = v13;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_lazy2_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  _BYTE *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  _OWORD *v61;
  unint64_t v62;
  __int128 *v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int8 *v81;
  unsigned __int8 *v83;
  unsigned int v84;
  unint64_t v85;
  char *v86;
  unsigned int v87;
  uint64_t (*v88)(uint64_t, _BYTE *, unint64_t, uint64_t *);
  unint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = *(unsigned int *)(a1 + 24);
  v93 = *(_QWORD *)(a1 + 8);
  v8 = (unsigned __int8 *)(v93 + v7);
  v9 = *(_DWORD *)(a1 + 256);
  v10 = v9 - 7;
  v11 = 2 * (v9 > 3);
  v12 = v9 - 4;
  if (v10 < 0xFFFFFFFD)
    v12 = v11;
  v14 = *a3;
  LODWORD(v13) = a3[1];
  if (v8 == a4)
    v15 = a4 + 1;
  else
    v15 = a4;
  v94 = (unint64_t)&a4[a5 - 8];
  if ((unint64_t)v15 < v94)
  {
    v17 = *(_QWORD *)(a1 + 16);
    v86 = (char *)(v17 + v7);
    v92 = v17;
    v81 = (unsigned __int8 *)(v17 + *(unsigned int *)(a1 + 28));
    v88 = *(uint64_t (**)(uint64_t, _BYTE *, unint64_t, uint64_t *))off_1E6E2C3F8[v12 + 3];
    v89 = (unint64_t)&a4[a5];
    v90 = v7 - 1;
    v91 = 1 << *(_DWORD *)(a1 + 240);
    v85 = v6 - 32;
    v87 = *(_DWORD *)(a1 + 24);
    v83 = (unsigned __int8 *)(v93 + v7);
    while (1)
    {
      v18 = 0;
      v19 = (_DWORD)v15 - v93;
      v20 = (_DWORD)v15 - v93 + 1;
      v21 = v20 - v91;
      if (v20 - *(_DWORD *)(a1 + 28) <= v91 || *(_DWORD *)(a1 + 40) != 0)
        v21 = *(_DWORD *)(a1 + 28);
      v23 = (v20 - v14);
      v24 = v92;
      if (v23 >= v7)
        v24 = v93;
      v84 = v13;
      if ((v90 - v23) >= 3 && v14 <= v20 - v21)
      {
        if (*(_DWORD *)(v15 + 1) == *(_DWORD *)(v24 + v23))
        {
          if (v23 >= v7)
            v25 = (char *)v6;
          else
            v25 = v86;
          v18 = ZSTD_count_2segments(v15 + 5, (char *)(v24 + v23 + 4), v6, v25, v8) + 4;
        }
        else
        {
          v18 = 0;
        }
      }
      v95 = 999999999;
      v26 = v88(a1, v15, v6, &v95);
      v27 = v26 <= v18 ? v18 : v26;
      if (v27 >= 4)
        break;
      v15 += ((v15 - v5) >> 8) + 1;
      v8 = v83;
      LODWORD(v13) = v84;
LABEL_133:
      if ((unint64_t)v15 >= v94)
        goto LABEL_134;
    }
    v28 = v26 > v18;
    if (v26 <= v18)
      v29 = v15 + 1;
    else
      v29 = v15;
    if (v28)
      v30 = v95;
    else
      v30 = 0;
    v31 = v27;
    v32 = v30;
    v7 = (unint64_t)v29;
    if ((unint64_t)v15 < v94)
    {
      do
      {
        v7 = (unint64_t)(v15 + 1);
        v33 = v19 + 1;
        if (v30)
        {
          v34 = v33 - v91;
          if (v33 - *(_DWORD *)(a1 + 28) <= v91 || *(_DWORD *)(a1 + 40) != 0)
            v34 = *(_DWORD *)(a1 + 28);
          v36 = (v33 - v14);
          v37 = v93;
          if (v36 < v87)
            v37 = v92;
          if ((v90 - v36) >= 3 && v14 <= v33 - v34)
          {
            v38 = v37 + v36;
            if (*(_DWORD *)v7 == *(_DWORD *)v38)
            {
              v39 = v36 >= v87 ? (char *)v89 : v86;
              v40 = ZSTD_count_2segments(v15 + 5, (char *)(v38 + 4), v89, v39, v83);
              if (v40 <= 0xFFFFFFFFFFFFFFFBLL
                && 3 * ((int)v40 + 4) > (int)(3 * v27 + (__clz(v30 + 1) ^ 0xFFFFFFE0) + 2))
              {
                v27 = v40 + 4;
                v30 = 0;
                v29 = v15 + 1;
              }
            }
          }
        }
        v95 = 999999999;
        v31 = v88(a1, v15 + 1, v89, &v95);
        if (v31 < 4
          || (v32 = v95,
              (int)((__clz(v95 + 1) ^ 0xFFFFFFE0) + 4 * v31 + 1) <= (int)((__clz(v30 + 1) ^ 0xFFFFFFE0) + 4 * v27 + 5)))
        {
          if (v7 >= v94)
            goto LABEL_77;
          v7 = (unint64_t)(v15 + 2);
          v19 += 2;
          if (v30)
          {
            v41 = v19 - v91;
            if (v19 - *(_DWORD *)(a1 + 28) <= v91 || *(_DWORD *)(a1 + 40) != 0)
              v41 = *(_DWORD *)(a1 + 28);
            v43 = (v19 - v14);
            v44 = v93;
            if (v43 < v87)
              v44 = v92;
            if ((v90 - v43) >= 3 && v14 <= v19 - v41)
            {
              v45 = v44 + v43;
              if (*(_DWORD *)v7 == *(_DWORD *)v45)
              {
                v46 = v43 >= v87 ? (char *)v89 : v86;
                v47 = ZSTD_count_2segments(v15 + 6, (char *)(v45 + 4), v89, v46, v83);
                if (v47 <= 0xFFFFFFFFFFFFFFFBLL
                  && (int)((__clz(v30 + 1) ^ 0xFFFFFFE0) + 4 * v27 + 2) < 4 * ((int)v47 + 4))
                {
                  v30 = 0;
                  v27 = v47 + 4;
                  v29 = v15 + 2;
                }
              }
            }
          }
          v95 = 999999999;
          v31 = v88(a1, v15 + 2, v89, &v95);
          if (v31 < 4
            || (v32 = v95,
                (int)((__clz(v95 + 1) ^ 0xFFFFFFE0) + 4 * v31 + 1) <= (int)((__clz(v30 + 1) ^ 0xFFFFFFE0) + 4 * v27 + 8)))
          {
LABEL_77:
            v31 = v27;
            v32 = v30;
            v7 = (unint64_t)v29;
            break;
          }
        }
        else
        {
          ++v19;
        }
        v15 = (_BYTE *)v7;
        v29 = (_BYTE *)v7;
        v30 = v32;
        v27 = v31;
      }
      while (v7 < v94);
    }
    v13 = v84;
    if (v32 <= 2)
    {
      v6 = v89;
      v8 = v83;
      v53 = (unsigned __int8 *)v85;
    }
    else
    {
      v48 = v93;
      v49 = v7 - (v32 + v93) + 2;
      if (v87 > v49)
        v48 = v92;
      v8 = v83;
      v50 = v81;
      if (v87 <= v49)
        v50 = v83;
      if (v7 <= (unint64_t)v5 || v48 + (unint64_t)v49 <= (unint64_t)v50)
      {
        v6 = v89;
        v53 = (unsigned __int8 *)v85;
      }
      else
      {
        v51 = (unsigned __int8 *)(v48 + (v7 - (v32 + v93) + 2) - 1);
        v52 = (unsigned __int8 *)(v7 - 1);
        v6 = v89;
        v53 = (unsigned __int8 *)v85;
        while (*v52 == *v51)
        {
          ++v31;
          v54 = v52 - 1;
          if (v52 > v5)
          {
            --v52;
            v28 = v51-- > v50;
            if (v28)
              continue;
          }
          v7 = (unint64_t)(v54 + 1);
          goto LABEL_93;
        }
        v7 = (unint64_t)(v52 + 1);
      }
LABEL_93:
      v13 = v14;
      v14 = (v32 - 2);
    }
    v55 = v7 - (_QWORD)v5;
    v56 = *(_OWORD **)(a2 + 24);
    if (v7 <= (unint64_t)v53)
    {
      *v56 = *(_OWORD *)v5;
      v60 = *(_QWORD *)(a2 + 24);
      if (v55 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v60 + v55;
        v65 = *(_QWORD *)(a2 + 8);
        goto LABEL_108;
      }
      v61 = (_OWORD *)(v60 + 16);
      v62 = v60 + v55;
      v63 = (__int128 *)(v5 + 16);
      do
      {
        v64 = *v63++;
        *v61++ = v64;
      }
      while ((unint64_t)v61 < v62);
    }
    else
    {
      if (v5 <= v53)
      {
        v57 = (_OWORD *)((char *)v56 + v53 - v5);
        do
        {
          v58 = *(_OWORD *)v5;
          v5 += 16;
          *v56++ = v58;
        }
        while (v56 < v57);
        v5 = v53;
        v56 = v57;
      }
      while ((unint64_t)v5 < v7)
      {
        v59 = *v5++;
        *(_BYTE *)v56 = v59;
        v56 = (_OWORD *)((char *)v56 + 1);
      }
    }
    *(_QWORD *)(a2 + 24) += v55;
    v65 = *(_QWORD *)(a2 + 8);
    if (v55 >= 0x10000)
    {
      v66 = (unint64_t)(v65 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v66;
    }
LABEL_108:
    *(_WORD *)(v65 + 4) = v55;
    *(_DWORD *)v65 = v32 + 1;
    if (v31 - 3 >= 0x10000)
    {
      v67 = (unint64_t)(v65 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v67;
    }
    *(_WORD *)(v65 + 6) = v31 - 3;
    v68 = v65 + 8;
    *(_QWORD *)(a2 + 8) = v65 + 8;
    v5 = (unsigned __int8 *)(v7 + v31);
    if (v7 + v31 <= v94)
    {
      v69 = v14;
      v70 = v13;
      LODWORD(v7) = v87;
      while (1)
      {
        v14 = v70;
        v70 = v69;
        v71 = (_DWORD)v5 - v93;
        v72 = (_DWORD)v5 - v93 - v91;
        if ((int)v5 - (int)v93 - *(_DWORD *)(a1 + 28) <= v91 || *(_DWORD *)(a1 + 40) != 0)
          v72 = *(_DWORD *)(a1 + 28);
        v74 = (v71 - v14);
        v75 = v92;
        if (v74 >= v87)
          v75 = v93;
        if ((v90 - v74) < 3 || v14 > v71 - v72 || *(_DWORD *)v5 != *(_DWORD *)(v75 + v74))
          break;
        if (v74 >= v87)
          v76 = (char *)v6;
        else
          v76 = v86;
        v77 = ZSTD_count_2segments(v5 + 4, (char *)(v75 + v74 + 4), v6, v76, v8);
        if ((unint64_t)v5 <= v85)
        {
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
          v68 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)(v68 + 4) = 0;
        *(_DWORD *)v68 = 1;
        if (v77 + 1 >= 0x10000)
        {
          v78 = (unint64_t)(v68 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v78;
        }
        *(_WORD *)(v68 + 6) = v77 + 1;
        v68 += 8;
        v5 += v77 + 4;
        *(_QWORD *)(a2 + 8) = v68;
        v69 = v14;
        LODWORD(v13) = v70;
        v15 = v5;
        if ((unint64_t)v5 > v94)
          goto LABEL_133;
      }
      LODWORD(v13) = v14;
      v14 = v69;
      v15 = v5;
    }
    else
    {
      v15 = (_BYTE *)(v7 + v31);
      LODWORD(v7) = v87;
    }
    goto LABEL_133;
  }
LABEL_134:
  *a3 = v14;
  a3[1] = v13;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_btlazy2_extDict(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  _BYTE *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unint64_t v55;
  _OWORD *v56;
  _OWORD *v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  _OWORD *v61;
  unint64_t v62;
  __int128 *v63;
  __int128 v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int8 *v81;
  unsigned __int8 *v83;
  unsigned int v84;
  unint64_t v85;
  char *v86;
  unsigned int v87;
  uint64_t (*v88)(uint64_t, _BYTE *, unint64_t, uint64_t *);
  unint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;

  v5 = a4;
  v6 = (unint64_t)&a4[a5];
  v7 = *(unsigned int *)(a1 + 24);
  v93 = *(_QWORD *)(a1 + 8);
  v8 = (unsigned __int8 *)(v93 + v7);
  v9 = *(_DWORD *)(a1 + 256);
  v10 = v9 - 7;
  v11 = 2 * (v9 > 3);
  v12 = v9 - 4;
  if (v10 < 0xFFFFFFFD)
    v12 = v11;
  v14 = *a3;
  LODWORD(v13) = a3[1];
  if (v8 == a4)
    v15 = a4 + 1;
  else
    v15 = a4;
  v94 = (unint64_t)&a4[a5 - 8];
  if ((unint64_t)v15 < v94)
  {
    v17 = *(_QWORD *)(a1 + 16);
    v86 = (char *)(v17 + v7);
    v92 = v17;
    v81 = (unsigned __int8 *)(v17 + *(unsigned int *)(a1 + 28));
    v88 = *(uint64_t (**)(uint64_t, _BYTE *, unint64_t, uint64_t *))off_1E6E2C458[v12 + 3];
    v89 = (unint64_t)&a4[a5];
    v90 = v7 - 1;
    v91 = 1 << *(_DWORD *)(a1 + 240);
    v85 = v6 - 32;
    v87 = *(_DWORD *)(a1 + 24);
    v83 = (unsigned __int8 *)(v93 + v7);
    while (1)
    {
      v18 = 0;
      v19 = (_DWORD)v15 - v93;
      v20 = (_DWORD)v15 - v93 + 1;
      v21 = v20 - v91;
      if (v20 - *(_DWORD *)(a1 + 28) <= v91 || *(_DWORD *)(a1 + 40) != 0)
        v21 = *(_DWORD *)(a1 + 28);
      v23 = (v20 - v14);
      v24 = v92;
      if (v23 >= v7)
        v24 = v93;
      v84 = v13;
      if ((v90 - v23) >= 3 && v14 <= v20 - v21)
      {
        if (*(_DWORD *)(v15 + 1) == *(_DWORD *)(v24 + v23))
        {
          if (v23 >= v7)
            v25 = (char *)v6;
          else
            v25 = v86;
          v18 = ZSTD_count_2segments(v15 + 5, (char *)(v24 + v23 + 4), v6, v25, v8) + 4;
        }
        else
        {
          v18 = 0;
        }
      }
      v95 = 999999999;
      v26 = v88(a1, v15, v6, &v95);
      v27 = v26 <= v18 ? v18 : v26;
      if (v27 >= 4)
        break;
      v15 += ((v15 - v5) >> 8) + 1;
      v8 = v83;
      LODWORD(v13) = v84;
LABEL_133:
      if ((unint64_t)v15 >= v94)
        goto LABEL_134;
    }
    v28 = v26 > v18;
    if (v26 <= v18)
      v29 = v15 + 1;
    else
      v29 = v15;
    if (v28)
      v30 = v95;
    else
      v30 = 0;
    v31 = v27;
    v32 = v30;
    v7 = (unint64_t)v29;
    if ((unint64_t)v15 < v94)
    {
      do
      {
        v7 = (unint64_t)(v15 + 1);
        v33 = v19 + 1;
        if (v30)
        {
          v34 = v33 - v91;
          if (v33 - *(_DWORD *)(a1 + 28) <= v91 || *(_DWORD *)(a1 + 40) != 0)
            v34 = *(_DWORD *)(a1 + 28);
          v36 = (v33 - v14);
          v37 = v93;
          if (v36 < v87)
            v37 = v92;
          if ((v90 - v36) >= 3 && v14 <= v33 - v34)
          {
            v38 = v37 + v36;
            if (*(_DWORD *)v7 == *(_DWORD *)v38)
            {
              v39 = v36 >= v87 ? (char *)v89 : v86;
              v40 = ZSTD_count_2segments(v15 + 5, (char *)(v38 + 4), v89, v39, v83);
              if (v40 <= 0xFFFFFFFFFFFFFFFBLL
                && 3 * ((int)v40 + 4) > (int)(3 * v27 + (__clz(v30 + 1) ^ 0xFFFFFFE0) + 2))
              {
                v27 = v40 + 4;
                v30 = 0;
                v29 = v15 + 1;
              }
            }
          }
        }
        v95 = 999999999;
        v31 = v88(a1, v15 + 1, v89, &v95);
        if (v31 < 4
          || (v32 = v95,
              (int)((__clz(v95 + 1) ^ 0xFFFFFFE0) + 4 * v31 + 1) <= (int)((__clz(v30 + 1) ^ 0xFFFFFFE0) + 4 * v27 + 5)))
        {
          if (v7 >= v94)
            goto LABEL_77;
          v7 = (unint64_t)(v15 + 2);
          v19 += 2;
          if (v30)
          {
            v41 = v19 - v91;
            if (v19 - *(_DWORD *)(a1 + 28) <= v91 || *(_DWORD *)(a1 + 40) != 0)
              v41 = *(_DWORD *)(a1 + 28);
            v43 = (v19 - v14);
            v44 = v93;
            if (v43 < v87)
              v44 = v92;
            if ((v90 - v43) >= 3 && v14 <= v19 - v41)
            {
              v45 = v44 + v43;
              if (*(_DWORD *)v7 == *(_DWORD *)v45)
              {
                v46 = v43 >= v87 ? (char *)v89 : v86;
                v47 = ZSTD_count_2segments(v15 + 6, (char *)(v45 + 4), v89, v46, v83);
                if (v47 <= 0xFFFFFFFFFFFFFFFBLL
                  && (int)((__clz(v30 + 1) ^ 0xFFFFFFE0) + 4 * v27 + 2) < 4 * ((int)v47 + 4))
                {
                  v30 = 0;
                  v27 = v47 + 4;
                  v29 = v15 + 2;
                }
              }
            }
          }
          v95 = 999999999;
          v31 = v88(a1, v15 + 2, v89, &v95);
          if (v31 < 4
            || (v32 = v95,
                (int)((__clz(v95 + 1) ^ 0xFFFFFFE0) + 4 * v31 + 1) <= (int)((__clz(v30 + 1) ^ 0xFFFFFFE0) + 4 * v27 + 8)))
          {
LABEL_77:
            v31 = v27;
            v32 = v30;
            v7 = (unint64_t)v29;
            break;
          }
        }
        else
        {
          ++v19;
        }
        v15 = (_BYTE *)v7;
        v29 = (_BYTE *)v7;
        v30 = v32;
        v27 = v31;
      }
      while (v7 < v94);
    }
    v13 = v84;
    if (v32 <= 2)
    {
      v6 = v89;
      v8 = v83;
      v53 = (unsigned __int8 *)v85;
    }
    else
    {
      v48 = v93;
      v49 = v7 - (v32 + v93) + 2;
      if (v87 > v49)
        v48 = v92;
      v8 = v83;
      v50 = v81;
      if (v87 <= v49)
        v50 = v83;
      if (v7 <= (unint64_t)v5 || v48 + (unint64_t)v49 <= (unint64_t)v50)
      {
        v6 = v89;
        v53 = (unsigned __int8 *)v85;
      }
      else
      {
        v51 = (unsigned __int8 *)(v48 + (v7 - (v32 + v93) + 2) - 1);
        v52 = (unsigned __int8 *)(v7 - 1);
        v6 = v89;
        v53 = (unsigned __int8 *)v85;
        while (*v52 == *v51)
        {
          ++v31;
          v54 = v52 - 1;
          if (v52 > v5)
          {
            --v52;
            v28 = v51-- > v50;
            if (v28)
              continue;
          }
          v7 = (unint64_t)(v54 + 1);
          goto LABEL_93;
        }
        v7 = (unint64_t)(v52 + 1);
      }
LABEL_93:
      v13 = v14;
      v14 = (v32 - 2);
    }
    v55 = v7 - (_QWORD)v5;
    v56 = *(_OWORD **)(a2 + 24);
    if (v7 <= (unint64_t)v53)
    {
      *v56 = *(_OWORD *)v5;
      v60 = *(_QWORD *)(a2 + 24);
      if (v55 <= 0x10)
      {
        *(_QWORD *)(a2 + 24) = v60 + v55;
        v65 = *(_QWORD *)(a2 + 8);
        goto LABEL_108;
      }
      v61 = (_OWORD *)(v60 + 16);
      v62 = v60 + v55;
      v63 = (__int128 *)(v5 + 16);
      do
      {
        v64 = *v63++;
        *v61++ = v64;
      }
      while ((unint64_t)v61 < v62);
    }
    else
    {
      if (v5 <= v53)
      {
        v57 = (_OWORD *)((char *)v56 + v53 - v5);
        do
        {
          v58 = *(_OWORD *)v5;
          v5 += 16;
          *v56++ = v58;
        }
        while (v56 < v57);
        v5 = v53;
        v56 = v57;
      }
      while ((unint64_t)v5 < v7)
      {
        v59 = *v5++;
        *(_BYTE *)v56 = v59;
        v56 = (_OWORD *)((char *)v56 + 1);
      }
    }
    *(_QWORD *)(a2 + 24) += v55;
    v65 = *(_QWORD *)(a2 + 8);
    if (v55 >= 0x10000)
    {
      v66 = (unint64_t)(v65 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 1;
      *(_DWORD *)(a2 + 76) = v66;
    }
LABEL_108:
    *(_WORD *)(v65 + 4) = v55;
    *(_DWORD *)v65 = v32 + 1;
    if (v31 - 3 >= 0x10000)
    {
      v67 = (unint64_t)(v65 - *(_QWORD *)a2) >> 3;
      *(_DWORD *)(a2 + 72) = 2;
      *(_DWORD *)(a2 + 76) = v67;
    }
    *(_WORD *)(v65 + 6) = v31 - 3;
    v68 = v65 + 8;
    *(_QWORD *)(a2 + 8) = v65 + 8;
    v5 = (unsigned __int8 *)(v7 + v31);
    if (v7 + v31 <= v94)
    {
      v69 = v14;
      v70 = v13;
      LODWORD(v7) = v87;
      while (1)
      {
        v14 = v70;
        v70 = v69;
        v71 = (_DWORD)v5 - v93;
        v72 = (_DWORD)v5 - v93 - v91;
        if ((int)v5 - (int)v93 - *(_DWORD *)(a1 + 28) <= v91 || *(_DWORD *)(a1 + 40) != 0)
          v72 = *(_DWORD *)(a1 + 28);
        v74 = (v71 - v14);
        v75 = v92;
        if (v74 >= v87)
          v75 = v93;
        if ((v90 - v74) < 3 || v14 > v71 - v72 || *(_DWORD *)v5 != *(_DWORD *)(v75 + v74))
          break;
        if (v74 >= v87)
          v76 = (char *)v6;
        else
          v76 = v86;
        v77 = ZSTD_count_2segments(v5 + 4, (char *)(v75 + v74 + 4), v6, v76, v8);
        if ((unint64_t)v5 <= v85)
        {
          *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
          v68 = *(_QWORD *)(a2 + 8);
        }
        *(_WORD *)(v68 + 4) = 0;
        *(_DWORD *)v68 = 1;
        if (v77 + 1 >= 0x10000)
        {
          v78 = (unint64_t)(v68 - *(_QWORD *)a2) >> 3;
          *(_DWORD *)(a2 + 72) = 2;
          *(_DWORD *)(a2 + 76) = v78;
        }
        *(_WORD *)(v68 + 6) = v77 + 1;
        v68 += 8;
        v5 += v77 + 4;
        *(_QWORD *)(a2 + 8) = v68;
        v69 = v14;
        LODWORD(v13) = v70;
        v15 = v5;
        if ((unint64_t)v5 > v94)
          goto LABEL_133;
      }
      LODWORD(v13) = v14;
      v14 = v69;
      v15 = v5;
    }
    else
    {
      v15 = (_BYTE *)(v7 + v31);
      LODWORD(v7) = v87;
    }
    goto LABEL_133;
  }
LABEL_134:
  *a3 = v14;
  a3[1] = v13;
  return v6 - (_QWORD)v5;
}

unint64_t ZSTD_compressBlock_greedy_extDict_row(uint64_t a1, uint64_t a2, unsigned int *a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  unsigned __int8 *v54;
  char *v55;
  unsigned __int8 *v56;
  unint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  __int128 v61;
  char v62;
  uint64_t v63;
  _OWORD *v64;
  unint64_t v65;
  __int128 *v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v84;
  uint64_t (*v85)(uint64_t, char *, unint64_t, uint64_t *);
  _QWORD *v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v5 = a4;
  v87 = (unint64_t)&a4[a5];
  v8 = (unint64_t)&a4[a5 - 16];
  v9 = *(_QWORD *)(a1 + 8);
  v89 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned int *)(a1 + 28);
  v91 = *(unsigned int *)(a1 + 24);
  v11 = *(_DWORD *)(a1 + 240);
  v12 = *(_DWORD *)(a1 + 252);
  v13 = *(_DWORD *)(a1 + 256);
  if (v12 < 5)
    v14 = 4;
  else
    v14 = 5;
  v15 = 2 * (v13 > 3);
  if (v13 - 7 >= 0xFFFFFFFD)
    v15 = v13 - 4;
  v16 = 2 * (v12 > 3);
  if (v12 - 7 >= 0xFFFFFFFD)
    v16 = v12 - 4;
  v85 = *(uint64_t (**)(uint64_t, char *, unint64_t, uint64_t *))*(&off_1E6E2C4B8[3 * v15 + 9] + v16);
  v17 = *a3;
  v18 = a3[1];
  v86 = (_QWORD *)(v9 + v91);
  if ((char *)(v9 + v91) == a4)
    v19 = a4 + 1;
  else
    v19 = a4;
  if (v13 >= 6)
    v13 = 6;
  v20 = *(unsigned int *)(a1 + 44);
  v21 = v8 - (v9 + v20);
  if ((v21 + 1) < 8)
    v22 = v21 + 1;
  else
    v22 = 8;
  v90 = (unint64_t)&a4[a5 - 16];
  if (v8 >= v9 + v20)
    v23 = v22;
  else
    v23 = 0;
  v24 = (v23 + v20);
  if (v20 < v24)
  {
    v25 = *(_QWORD *)(a1 + 96);
    v26 = *(_DWORD *)(a1 + 52);
    v27 = *(_QWORD *)(a1 + 56);
    do
    {
      if (v13 == 5)
      {
        v28 = 0xCF1BBCDCBB000000 * *(_QWORD *)(v9 + v20);
      }
      else
      {
        if (v13 != 6)
        {
          LODWORD(v29) = (-1640531535 * *(_DWORD *)(v9 + v20)) >> (24 - v26);
          goto LABEL_27;
        }
        v28 = 0xCF1BBCDCBF9B0000 * *(_QWORD *)(v9 + v20);
      }
      v29 = v28 >> (56 - v26);
LABEL_27:
      v30 = v29 >> 8 << v14;
      _X6 = v25 + 4 * v30;
      __asm { PRFM            #0, [X6] }
      if (v12 >= 5)
        __asm { PRFM            #0, [X6,#0x40] }
      _X5 = v27 + 2 * v30;
      __asm { PRFM            #0, [X5] }
      *(_DWORD *)(a1 + 4 * (v20++ & 7) + 64) = v29;
    }
    while (v24 != v20);
  }
  if ((unint64_t)v19 < v90)
  {
    v84 = v89 + v10;
    v39 = 1 << v11;
    v88 = v91 - 1;
    while (1)
    {
      v40 = v19 + 1;
      v41 = (_DWORD)v19 - v9 + 1;
      v42 = v41 - v39;
      if (v41 - *(_DWORD *)(a1 + 28) <= v39 || *(_DWORD *)(a1 + 40) != 0)
        v42 = *(_DWORD *)(a1 + 28);
      v44 = (v41 - v17);
      v45 = v89;
      if (v44 >= v91)
        v45 = v9;
      if ((v88 - v44) >= 3 && v17 <= v41 - v42 && *(_DWORD *)v40 == *(_DWORD *)(v45 + v44))
        break;
      v92 = 999999999;
      v49 = v85(a1, v19, v87, &v92);
      v48 = v92;
      if (v49)
        v40 = v19;
      else
        v48 = 0;
      if (v49 > 3)
      {
        if (v48 >= 3)
        {
          v50 = (_DWORD)v40 - v9 - v48 + 2;
          if (v91 <= v50)
            v51 = v9;
          else
            v51 = v89;
          v52 = v9 + v91;
          v53 = (char *)(v87 - 32);
          if (v91 > v50)
            v52 = v84;
          if (v40 > v5 && v51 + (unint64_t)v50 > v52)
          {
            v54 = (unsigned __int8 *)(v51 + ((_DWORD)v40 - v9 - v48 + 2) - 1);
            v55 = v40 - 1;
            while (*v55 == *v54)
            {
              ++v49;
              v56 = (unsigned __int8 *)(v55 - 1);
              if (v55 > v5)
              {
                --v55;
                if ((unint64_t)v54-- > v52)
                  continue;
              }
              v40 = (char *)(v56 + 1);
              goto LABEL_66;
            }
            v40 = v55 + 1;
          }
LABEL_66:
          v18 = v17;
          v17 = (v48 - 2);
LABEL_67:
          v58 = v40 - v5;
          v59 = *(_OWORD **)(a2 + 24);
          if (v40 <= v53)
          {
            *v59 = *(_OWORD *)v5;
            v63 = *(_QWORD *)(a2 + 24);
            if (v58 > 0x10)
            {
              v64 = (_OWORD *)(v63 + 16);
              v65 = v63 + v58;
              v66 = (__int128 *)(v5 + 16);
              do
              {
                v67 = *v66++;
                *v64++ = v67;
              }
              while ((unint64_t)v64 < v65);
              goto LABEL_78;
            }
            *(_QWORD *)(a2 + 24) = v63 + v58;
            v68 = *(_QWORD *)(a2 + 8);
          }
          else
          {
            if (v5 <= v53)
            {
              v60 = (_OWORD *)((char *)v59 + v53 - v5);
              do
              {
                v61 = *(_OWORD *)v5;
                v5 += 16;
                *v59++ = v61;
              }
              while (v59 < v60);
              v5 = v53;
              v59 = v60;
            }
            while (v5 < v40)
            {
              v62 = *v5++;
              *(_BYTE *)v59 = v62;
              v59 = (_OWORD *)((char *)v59 + 1);
            }
LABEL_78:
            *(_QWORD *)(a2 + 24) += v58;
            v68 = *(_QWORD *)(a2 + 8);
            if (v58 >= 0x10000)
            {
              v69 = (unint64_t)(v68 - *(_QWORD *)a2) >> 3;
              *(_DWORD *)(a2 + 72) = 1;
              *(_DWORD *)(a2 + 76) = v69;
            }
          }
          *(_WORD *)(v68 + 4) = v58;
          *(_DWORD *)v68 = v48 + 1;
          if (v49 - 3 >= 0x10000)
          {
            v70 = (unint64_t)(v68 - *(_QWORD *)a2) >> 3;
            *(_DWORD *)(a2 + 72) = 2;
            *(_DWORD *)(a2 + 76) = v70;
          }
          *(_WORD *)(v68 + 6) = v49 - 3;
          v71 = v68 + 8;
          *(_QWORD *)(a2 + 8) = v68 + 8;
          v5 = &v40[v49];
          if ((unint64_t)&v40[v49] <= v90)
          {
            v72 = v17;
            v73 = v18;
            while (1)
            {
              v17 = v73;
              v73 = v72;
              v74 = (_DWORD)v5 - v9;
              v75 = (_DWORD)v5 - v9 - v39;
              if ((int)v5 - (int)v9 - *(_DWORD *)(a1 + 28) <= v39 || *(_DWORD *)(a1 + 40) != 0)
                v75 = *(_DWORD *)(a1 + 28);
              v77 = (v74 - v17);
              v78 = v89;
              if (v77 >= v91)
                v78 = v9;
              if ((v88 - v77) < 3
                || v17 > v74 - v75
                || *(_DWORD *)v5 != *(_DWORD *)(v78 + v77))
              {
                break;
              }
              if (v77 >= v91)
                v79 = (char *)v87;
              else
                v79 = (char *)(v89 + v91);
              v80 = ZSTD_count_2segments(v5 + 4, (char *)(v78 + v77 + 4), v87, v79, v86);
              if ((unint64_t)v5 <= v87 - 32)
              {
                *(_OWORD *)*(_QWORD *)(a2 + 24) = *(_OWORD *)v5;
                v71 = *(_QWORD *)(a2 + 8);
              }
              *(_WORD *)(v71 + 4) = 0;
              *(_DWORD *)v71 = 1;
              if (v80 + 1 >= 0x10000)
              {
                v81 = (unint64_t)(v71 - *(_QWORD *)a2) >> 3;
                *(_DWORD *)(a2 + 72) = 2;
                *(_DWORD *)(a2 + 76) = v81;
              }
              *(_WORD *)(v71 + 6) = v80 + 1;
              v71 += 8;
              v5 += v80 + 4;
              *(_QWORD *)(a2 + 8) = v71;
              v72 = v17;
              v18 = v73;
              v19 = v5;
              if ((unint64_t)v5 > v90)
                goto LABEL_106;
            }
            v18 = v17;
            v17 = v72;
          }
          v19 = v5;
          goto LABEL_106;
        }
LABEL_64:
        v53 = (char *)(v87 - 32);
        goto LABEL_67;
      }
      v19 += ((v19 - v5) >> 8) + 1;
LABEL_106:
      if ((unint64_t)v19 >= v90)
        goto LABEL_107;
    }
    if (v44 >= v91)
      v46 = (char *)v87;
    else
      v46 = (char *)(v89 + v91);
    v47 = ZSTD_count_2segments(v19 + 5, (char *)(v45 + v44 + 4), v87, v46, v86);
    LODWORD(v48) = 0;
    v49 = v47 + 4;
    goto LABEL_64;
  }
LABEL_107:
  *a3 = v17;
  a3[1] = v18;
  return v87 - (_QWORD)v5;
}

